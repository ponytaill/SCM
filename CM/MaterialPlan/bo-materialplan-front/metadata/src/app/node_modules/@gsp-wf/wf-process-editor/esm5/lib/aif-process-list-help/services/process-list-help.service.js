/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { map } from 'rxjs/operators';
import { FrameworkService, AppService } from '@gsp-sys/rtf-common';
import { BifMonitorConstant } from '../entity/BifMonitorConstant';
import { RtBillProcessListResult } from '../entity/RtBillProcessListResult';
import { RtShowEntity } from '../entity/RtShowEntity';
var ProcessListHelpService = /** @class */ (function () {
    function ProcessListHelpService(appService, frameworkService, httpService) {
        this.appService = appService;
        this.frameworkService = frameworkService;
        this.httpService = httpService;
        this.baseUrl = "/api/runtime/aif/v1.0/rtbillprocess";
    }
    /**
     * @param {?} entity
     * @return {?}
     */
    ProcessListHelpService.prototype.openBifManagerApp = /**
     * @param {?} entity
     * @return {?}
     */
    function (entity) {
        /** @type {?} */
        var map = new Map();
        map.set("id", entity.id);
        map.set("type", entity.bifMetadataType);
        map.set("srcFuncId", BifMonitorConstant.bifDiagnostorFuncId);
        /** @type {?} */
        var opt = {
            funcId: BifMonitorConstant.bifManagerFuncId,
            appId: BifMonitorConstant.bifMonitorAppId,
            appEntrance: BifMonitorConstant.bifManagerAppEntrance,
            appType: "menu",
            entityParams: {},
            queryStringParams: map,
            tabId: entity.id,
            tabName: entity.name
        };
        this.frameworkService.openMenu(opt);
    };
    /**
     * @param {?} args
     * @return {?}
     */
    ProcessListHelpService.prototype.getDatagridData = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        /** @type {?} */
        var body = args.ConvertToJson();
        /** @type {?} */
        var data$ = null;
        //有业务种类参数时不分页
        if (args.bizType != null) {
            data$ = this.httpService.post(this.baseUrl + "/getpatch", body);
            return data$.pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                /** @type {?} */
                var listRes = new RtBillProcessListResult();
                listRes.entities = res.map((/**
                 * @param {?} elt
                 * @return {?}
                 */
                function (elt) {
                    /** @type {?} */
                    var e = new RtShowEntity();
                    e.LoadFromJsonObject(elt);
                    return e;
                }));
                return listRes;
            })));
        }
        else {
            data$ = this.httpService.post(this.baseUrl + "/getpagedpatch", body);
            return data$.pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                /** @type {?} */
                var listRes = new RtBillProcessListResult();
                listRes.LoadFromJsonObject(res);
                return listRes;
            })));
        }
    };
    ProcessListHelpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ProcessListHelpService.ctorParameters = function () { return [
        { type: AppService },
        { type: FrameworkService },
        { type: HttpService }
    ]; };
    return ProcessListHelpService;
}());
export { ProcessListHelpService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpService.prototype.baseUrl;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpService.prototype.appService;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpService.prototype.frameworkService;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpService.prototype.httpService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1saXN0LWhlbHAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvYWlmLXByb2Nlc3MtbGlzdC1oZWxwL3NlcnZpY2VzL3Byb2Nlc3MtbGlzdC1oZWxwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWxELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQWMsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFL0UsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFbEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDNUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXREO0lBSUksZ0NBQ1ksVUFBc0IsRUFDdEIsZ0JBQWtDLEVBQ2xDLFdBQXdCO1FBRnhCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUxuQixZQUFPLEdBQUcscUNBQXFDLENBQUM7SUFPakUsQ0FBQzs7Ozs7SUFFTSxrREFBaUI7Ozs7SUFBeEIsVUFBeUIsTUFBcUI7O1lBQ3BDLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRTtRQUNyQixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3hDLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDLENBQUM7O1lBQ3ZELEdBQUcsR0FBZTtZQUNwQixNQUFNLEVBQUUsa0JBQWtCLENBQUMsZ0JBQWdCO1lBQzNDLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxlQUFlO1lBQ3pDLFdBQVcsRUFBRSxrQkFBa0IsQ0FBQyxxQkFBcUI7WUFDckQsT0FBTyxFQUFFLE1BQU07WUFDZixZQUFZLEVBQUUsRUFBRTtZQUNoQixpQkFBaUIsRUFBRSxHQUFHO1lBQ3RCLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRTtZQUNoQixPQUFPLEVBQUUsTUFBTSxDQUFDLElBQUk7U0FDdkI7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Ozs7O0lBRU0sZ0RBQWU7Ozs7SUFBdEIsVUFBdUIsSUFBZ0M7O1lBQzdDLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFOztZQUM3QixLQUFLLEdBQW9CLElBQUk7UUFDakMsYUFBYTtRQUNiLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQUU7WUFDdEIsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFJLElBQUksQ0FBQyxPQUFPLGNBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNoRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQ2IsR0FBRzs7OztZQUNDLFVBQUMsR0FBUTs7b0JBQ0MsT0FBTyxHQUFHLElBQUksdUJBQXVCLEVBQUU7Z0JBQzdDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLEdBQUc7Ozs7Z0JBQUMsVUFBQSxHQUFHOzt3QkFDcEIsQ0FBQyxHQUFHLElBQUksWUFBWSxFQUFFO29CQUM1QixDQUFDLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQzFCLE9BQU8sQ0FBQyxDQUFDO2dCQUNiLENBQUMsRUFBQyxDQUFDO2dCQUNILE9BQU8sT0FBTyxDQUFDO1lBQ25CLENBQUMsRUFDSixDQUNKLENBQUM7U0FDTDthQUFNO1lBQ0gsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFJLElBQUksQ0FBQyxPQUFPLG1CQUFnQixFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3JFLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FDYixHQUFHOzs7O1lBQ0MsVUFBQyxHQUFROztvQkFDQyxPQUFPLEdBQUcsSUFBSSx1QkFBdUIsRUFBRTtnQkFDN0MsT0FBTyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNoQyxPQUFPLE9BQU8sQ0FBQztZQUNuQixDQUFDLEVBQ0osQ0FDSixDQUFDO1NBQ0w7SUFDTCxDQUFDOztnQkE1REosVUFBVTs7OztnQkFQNEIsVUFBVTtnQkFBNUIsZ0JBQWdCO2dCQUg1QixXQUFXOztJQXVFcEIsNkJBQUM7Q0FBQSxBQTdERCxJQTZEQztTQTVEWSxzQkFBc0I7Ozs7OztJQUMvQix5Q0FBaUU7Ozs7O0lBRzdELDRDQUE4Qjs7Ozs7SUFDOUIsa0RBQTBDOzs7OztJQUMxQyw2Q0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSAnQGVjcC1jYWYvY2FmLWNvbW1vbic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBBcHBPcHRpb25zLCBGcmFtZXdvcmtTZXJ2aWNlLCBBcHBTZXJ2aWNlIH0gZnJvbSAnQGdzcC1zeXMvcnRmLWNvbW1vbic7XHJcbmltcG9ydCB7IElSdFNob3dFbnRpdHkgfSBmcm9tICcuLi9lbnRpdHkvSVJ0U2hvd0VudGl0eSc7XHJcbmltcG9ydCB7IEJpZk1vbml0b3JDb25zdGFudCB9IGZyb20gJy4uL2VudGl0eS9CaWZNb25pdG9yQ29uc3RhbnQnO1xyXG5pbXBvcnQgeyBQcm9jZXNzRmlsdGVyQ29uZGl0aW9uQXJncyB9IGZyb20gJy4uL2VudGl0eS9Qcm9jZXNzRmlsdGVyQ29uZGl0aW9uQXJncyc7XHJcbmltcG9ydCB7IFJ0QmlsbFByb2Nlc3NMaXN0UmVzdWx0IH0gZnJvbSAnLi4vZW50aXR5L1J0QmlsbFByb2Nlc3NMaXN0UmVzdWx0JztcclxuaW1wb3J0IHsgUnRTaG93RW50aXR5IH0gZnJvbSAnLi4vZW50aXR5L1J0U2hvd0VudGl0eSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQcm9jZXNzTGlzdEhlbHBTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgYmFzZVVybCA9IFwiL2FwaS9ydW50aW1lL2FpZi92MS4wL3J0YmlsbHByb2Nlc3NcIjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGFwcFNlcnZpY2U6IEFwcFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBmcmFtZXdvcmtTZXJ2aWNlOiBGcmFtZXdvcmtTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgaHR0cFNlcnZpY2U6IEh0dHBTZXJ2aWNlLFxyXG4gICAgKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9wZW5CaWZNYW5hZ2VyQXBwKGVudGl0eTogSVJ0U2hvd0VudGl0eSkge1xyXG4gICAgICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcclxuICAgICAgICBtYXAuc2V0KFwiaWRcIiwgZW50aXR5LmlkKTtcclxuICAgICAgICBtYXAuc2V0KFwidHlwZVwiLCBlbnRpdHkuYmlmTWV0YWRhdGFUeXBlKTtcclxuICAgICAgICBtYXAuc2V0KFwic3JjRnVuY0lkXCIsIEJpZk1vbml0b3JDb25zdGFudC5iaWZEaWFnbm9zdG9yRnVuY0lkKTtcclxuICAgICAgICBjb25zdCBvcHQ6IEFwcE9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGZ1bmNJZDogQmlmTW9uaXRvckNvbnN0YW50LmJpZk1hbmFnZXJGdW5jSWQsXHJcbiAgICAgICAgICAgIGFwcElkOiBCaWZNb25pdG9yQ29uc3RhbnQuYmlmTW9uaXRvckFwcElkLFxyXG4gICAgICAgICAgICBhcHBFbnRyYW5jZTogQmlmTW9uaXRvckNvbnN0YW50LmJpZk1hbmFnZXJBcHBFbnRyYW5jZSxcclxuICAgICAgICAgICAgYXBwVHlwZTogXCJtZW51XCIsXHJcbiAgICAgICAgICAgIGVudGl0eVBhcmFtczoge30sXHJcbiAgICAgICAgICAgIHF1ZXJ5U3RyaW5nUGFyYW1zOiBtYXAsXHJcbiAgICAgICAgICAgIHRhYklkOiBlbnRpdHkuaWQsXHJcbiAgICAgICAgICAgIHRhYk5hbWU6IGVudGl0eS5uYW1lXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmZyYW1ld29ya1NlcnZpY2Uub3Blbk1lbnUob3B0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RGF0YWdyaWREYXRhKGFyZ3M6IFByb2Nlc3NGaWx0ZXJDb25kaXRpb25BcmdzKTogT2JzZXJ2YWJsZTxSdEJpbGxQcm9jZXNzTGlzdFJlc3VsdD4ge1xyXG4gICAgICAgIGNvbnN0IGJvZHkgPSBhcmdzLkNvbnZlcnRUb0pzb24oKTtcclxuICAgICAgICBsZXQgZGF0YSQ6IE9ic2VydmFibGU8YW55PiA9IG51bGw7XHJcbiAgICAgICAgLy/mnInkuJrliqHnp43nsbvlj4LmlbDml7bkuI3liIbpobVcclxuICAgICAgICBpZiAoYXJncy5iaXpUeXBlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgZGF0YSQgPSB0aGlzLmh0dHBTZXJ2aWNlLnBvc3QoYCR7dGhpcy5iYXNlVXJsfS9nZXRwYXRjaGAsIGJvZHkpO1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YSQucGlwZShcclxuICAgICAgICAgICAgICAgIG1hcChcclxuICAgICAgICAgICAgICAgICAgICAocmVzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlzdFJlcyA9IG5ldyBSdEJpbGxQcm9jZXNzTGlzdFJlc3VsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0UmVzLmVudGl0aWVzID0gcmVzLm1hcChlbHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBSdFNob3dFbnRpdHkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuTG9hZEZyb21Kc29uT2JqZWN0KGVsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsaXN0UmVzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkYXRhJCA9IHRoaXMuaHR0cFNlcnZpY2UucG9zdChgJHt0aGlzLmJhc2VVcmx9L2dldHBhZ2VkcGF0Y2hgLCBib2R5KTtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGEkLnBpcGUoXHJcbiAgICAgICAgICAgICAgICBtYXAoXHJcbiAgICAgICAgICAgICAgICAgICAgKHJlczogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpc3RSZXMgPSBuZXcgUnRCaWxsUHJvY2Vzc0xpc3RSZXN1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdFJlcy5Mb2FkRnJvbUpzb25PYmplY3QocmVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RSZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==