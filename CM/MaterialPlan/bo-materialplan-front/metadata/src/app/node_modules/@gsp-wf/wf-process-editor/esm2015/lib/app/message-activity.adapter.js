/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { ResourceKeys } from '../model/resourceKeys';
import { MessageNoticeComponent, MessageNoticeConverter } from '../views/message-notice/message-notice.component';
import { VariableSettingComponent, VariableSettingConverter } from '../views/variable-setting/variable-setting.component';
export class MessageActivityAdapter {
    /**
     * @param {?} uiState
     */
    constructor(uiState) {
        this.uiState = uiState;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case ResourceKeys.messageNotice: // 参与者
                        item.editor = MessageNoticeComponent;
                        item.converter = new MessageNoticeConverter();
                        item.editorParams = {
                            location: 'messageActivity'
                        };
                        break;
                    case ResourceKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter();
                        break;
                    default:
                        break;
                }
            }));
        }
    }
}
MessageActivityAdapter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MessageActivityAdapter.ctorParameters = () => [
    { type: ProcessDesignerUIState }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    MessageActivityAdapter.prototype.uiState;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS1hY3Rpdml0eS5hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi9hcHAvbWVzc2FnZS1hY3Rpdml0eS5hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXBFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUNsSCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUkxSCxNQUFNLE9BQU8sc0JBQXNCOzs7O0lBQy9CLFlBQW9CLE9BQStCO1FBQS9CLFlBQU8sR0FBUCxPQUFPLENBQXdCO0lBRW5ELENBQUM7Ozs7O0lBQ0QsV0FBVyxDQUFDLEdBQVE7UUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQztRQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7Ozs7SUFFTyxTQUFTLENBQUMsR0FBVTs7Y0FDbEIsY0FBYyxHQUE0QixFQUFFO1FBQ2xELElBQUksR0FBRyxFQUFFO1lBQ0wsR0FBRyxDQUFDLE9BQU87Ozs7WUFBQyxDQUFDLE9BQThCLEVBQUUsRUFBRTtnQkFDM0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ25DLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDakMsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7Ozs7OztJQUNPLFNBQVMsQ0FBQyxHQUFxQjtRQUNuQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN2QixHQUFHLENBQUMsT0FBTzs7OztZQUFDLENBQUMsSUFBb0IsRUFBRSxFQUFFO2dCQUNqQyxRQUFRLElBQUksQ0FBQyxVQUFVLEVBQUU7b0JBQ3JCLEtBQUssWUFBWSxDQUFDLGFBQWEsRUFBRSxNQUFNO3dCQUNuQyxJQUFJLENBQUMsTUFBTSxHQUFHLHNCQUFzQixDQUFDO3dCQUNyQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksc0JBQXNCLEVBQUUsQ0FBQzt3QkFDOUMsSUFBSSxDQUFDLFlBQVksR0FBRzs0QkFDaEIsUUFBUSxFQUFFLGlCQUFpQjt5QkFDOUIsQ0FBQzt3QkFDRixNQUFNO29CQUNWLEtBQUssWUFBWSxDQUFDLGdCQUFnQixFQUFFLE9BQU87d0JBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsd0JBQXdCLENBQUM7d0JBQ3ZDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSx3QkFBd0IsRUFBRSxDQUFDO3dCQUNoRCxNQUFNO29CQUNWO3dCQUNJLE1BQU07aUJBQ2I7WUFDTCxDQUFDLEVBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7O1lBekNKLFVBQVU7Ozs7WUFORixzQkFBc0I7Ozs7Ozs7SUFTZix5Q0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFByb2Nlc3NEZXNpZ25lclVJU3RhdGUgfSBmcm9tICcuL3Byb2Nlc3MtZGVzaWduZXIudWlzdGF0ZSc7XHJcbmltcG9ydCB7IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZywgUHJvcGVydHlFbnRpdHkgfSBmcm9tICdAZmFycmlzL3VpLXByb3BlcnR5LXBhbmVsJztcclxuaW1wb3J0IHsgUmVzb3VyY2VLZXlzIH0gZnJvbSAnLi4vbW9kZWwvcmVzb3VyY2VLZXlzJztcclxuaW1wb3J0IHsgTWVzc2FnZU5vdGljZUNvbXBvbmVudCwgTWVzc2FnZU5vdGljZUNvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL21lc3NhZ2Utbm90aWNlL21lc3NhZ2Utbm90aWNlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFZhcmlhYmxlU2V0dGluZ0NvbXBvbmVudCwgVmFyaWFibGVTZXR0aW5nQ29udmVydGVyIH0gZnJvbSAnLi4vdmlld3MvdmFyaWFibGUtc2V0dGluZy92YXJpYWJsZS1zZXR0aW5nLmNvbXBvbmVudCc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcblxyXG5leHBvcnQgY2xhc3MgTWVzc2FnZUFjdGl2aXR5QWRhcHRlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHVpU3RhdGU6IFByb2Nlc3NEZXNpZ25lclVJU3RhdGUpIHtcclxuXHJcbiAgICB9XHJcbiAgICBzZXRQcm9wZXJ0eShvYmo6IGFueSkge1xyXG4gICAgICAgIHRoaXMudWlTdGF0ZS5wcm9wZXJ0eURhdGEgPSBvYmoucHJvcGVydHlEYXRhO1xyXG4gICAgICAgIHRoaXMudWlTdGF0ZS5wcm9wZXJ0eUNvbmZpZyA9IHRoaXMuc2V0Q29uZmlnKG9iai5wcm9wZXJ0eUNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRDb25maWcob2JqOiBhbnlbXSk6IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZ1tdIHtcclxuICAgICAgICBjb25zdCBwcm9wZXJ0eUNvbmZpZzogRWxlbWVudFByb3BlcnR5Q29uZmlnW10gPSBbXTtcclxuICAgICAgICBpZiAob2JqKSB7XHJcbiAgICAgICAgICAgIG9iai5mb3JFYWNoKChlbGVtZW50OiBFbGVtZW50UHJvcGVydHlDb25maWcpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RW50aXR5KGVsZW1lbnQucHJvcGVydGllcyk7XHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUNvbmZpZy5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5Q29uZmlnO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzZXRFbnRpdHkob2JqOiBQcm9wZXJ0eUVudGl0eVtdKSB7XHJcbiAgICAgICAgaWYgKG9iaiAmJiBvYmoubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBvYmouZm9yRWFjaCgoaXRlbTogUHJvcGVydHlFbnRpdHkpID0+IHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoaXRlbS5wcm9wZXJ0eUlEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBSZXNvdXJjZUtleXMubWVzc2FnZU5vdGljZTogLy8g5Y+C5LiO6ICFXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZWRpdG9yID0gTWVzc2FnZU5vdGljZUNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jb252ZXJ0ZXIgPSBuZXcgTWVzc2FnZU5vdGljZUNvbnZlcnRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVkaXRvclBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnbWVzc2FnZUFjdGl2aXR5J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFJlc291cmNlS2V5cy52YXJpYWJsZVNldHRpbmdzOiAvLyDlj5jph4/orr7nva5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3IgPSBWYXJpYWJsZVNldHRpbmdDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY29udmVydGVyID0gbmV3IFZhcmlhYmxlU2V0dGluZ0NvbnZlcnRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==