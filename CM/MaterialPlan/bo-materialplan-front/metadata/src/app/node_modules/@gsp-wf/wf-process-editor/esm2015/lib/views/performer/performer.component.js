/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Output, EventEmitter, Input, ViewChild, TemplateRef, ComponentFactoryResolver, Injector } from '@angular/core';
import { PerformerUIState } from './performer.uistate';
import { PerformerRepository } from './performer.repository';
import { PerformerViewModel } from './performer.viewmodel';
import { FormBuilder } from '@angular/forms';
import { BsModalService } from '@farris/ui-modal';
import { PerformerEditComponent } from './views/performer-edit/performer-edit.component';
import { MessagerService } from '@farris/ui-messager';
import { PerformerOptionsComponent } from './views/performer-options/performer-options.component';
import { DialogComponent } from '@farris/ui-dialog';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExpressionService, InjectedType, ExprEditMode } from '@gsp-svc/expression';
import { PerformerInfo } from './entities/performer-info.entity';
import { DatagridComponent } from '@farris/ui-datagrid';
import { of } from 'rxjs';
import { HttpService } from '@ecp-caf/caf-common';
export class PerformerComponent {
    // 编辑状态，用于区分是新增还是编辑  new | edit
    /**
     * @param {?} viewModel
     * @param {?} uistate
     * @param {?} formBuilder
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} message
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} http
     */
    constructor(viewModel, uistate, formBuilder, resolver, injector, modalService, message, designerUIState, expr, http) {
        this.viewModel = viewModel;
        this.uistate = uistate;
        this.formBuilder = formBuilder;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.http = http;
        this.cls = 'farris-main-area flex-column';
        this.display = true; // 控制矩阵参与者是否显示
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.isClose = true;
        this.modalConfig = {
            title: '参与者',
            width: 800,
            height: 515,
            showButtons: true
        };
        this.columns = [
            {
                field: 'type', width: 50, title: '类型',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.uistate.typeCollection }
                }
            },
            { field: 'performerName', width: 50, title: '名称' },
            { field: 'description', width: 100, title: '描述', showTips: true },
            {
                field: 'condition', width: 60, title: '启用条件', showTips: true,
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.editConditon(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            if (e.rowData.type === 'wf.ComponentParticipant') {
                                /** @type {?} */
                                const i = this.uistate.performerInfo.components.findIndex((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                item => item.id === e.rowData.id));
                                this.uistate.performerInfo.components[i].condition = '';
                            }
                            else if (e.rowData.type === 'wf.ReportingLineParticipant') {
                                /** @type {?} */
                                const i = this.uistate.performerInfo.reportingLines.findIndex((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                item => item.id === e.rowData.id));
                                this.uistate.performerInfo.reportingLines[i].condition = '';
                            }
                            else if (e.rowData.type === 'wf.MatrixParticipant') {
                                /** @type {?} */
                                const i = this.uistate.performerInfo.matrixParticipants.findIndex((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                item => item.id === e.rowData.id));
                                this.uistate.performerInfo.matrixParticipants[i].condition = '';
                            }
                        })
                    }
                }
            }
        ];
        this.editState = 'new'; // 编辑状态，用于区分是新增还是编辑  new | edit
        this.afterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        (rowIndex, rowData, column) => {
            return of(true);
        });
        this.GetOrganizationType();
    }
    /**
     * @param {?} partInfo
     * @return {?}
     */
    set value(partInfo) {
        if (partInfo.performers && partInfo.performers.length > 0) {
            this.uistate.performerInfo.performers = partInfo.performers;
            this.uistate.performersList = this.uistate.performersList.concat((/** @type {?} */ (partInfo.performers)));
            this.uistate.performersList.map((/**
             * @param {?} performer
             * @return {?}
             */
            performer => performer.description = this.performerDescription((/** @type {?} */ (performer)))));
        }
        if (partInfo.components && partInfo.components.length > 0) {
            this.uistate.performerInfo.components = partInfo.components;
            partInfo.components.forEach((/**
             * @param {?} cmp
             * @return {?}
             */
            cmp => {
                this.uistate.performersList.push({
                    id: cmp.id,
                    type: 'wf.ComponentParticipant',
                    performerName: cmp.name,
                    description: this.componentDescription(cmp),
                    condition: cmp.condition
                });
            }));
        }
        if (partInfo.reportingLines && partInfo.reportingLines.length > 0) {
            this.uistate.performerInfo.reportingLines = partInfo.reportingLines;
            partInfo.reportingLines.forEach((/**
             * @param {?} r
             * @return {?}
             */
            r => {
                this.uistate.performersList.push({
                    id: r.id,
                    type: 'wf.ReportingLineParticipant',
                    performerName: r.reportingLineDefName + '-' + r.dimension,
                    description: this.reportingLineDescription(r),
                    condition: r.condition
                });
            }));
        }
        if (partInfo.matrixParticipants && partInfo.matrixParticipants.length > 0) {
            this.uistate.performerInfo.matrixParticipants = partInfo.matrixParticipants;
            partInfo.matrixParticipants.forEach((/**
             * @param {?} r
             * @return {?}
             */
            r => {
                this.uistate.performersList.push({
                    id: r.id,
                    type: 'wf.MatrixParticipant',
                    performerName: r.matrixDefName + '-' + r.dataFieldAlias,
                    description: this.matrixDescription(r),
                    condition: r.condition
                });
            }));
        }
        if (partInfo.options) {
            this.uistate.performerInfo.options = partInfo.options;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getMatrixConfig().subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            if (re && re.currentValue === 'false') {
                this.display = false;
            }
        }));
    }
    /**
     * @return {?}
     */
    add() {
        this.editState = 'new';
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(PerformerEditComponent);
        this.compRef = compFactory.create(this.injector);
        this.compRef.instance.display = this.display;
        /** @type {?} */
        const modalConfig = {
            title: '参与者选择',
            width: 800,
            height: 515,
            buttons: this.editFooter,
            showButtons: true
        };
        this.editDialog = this.modalService.show(this.compRef, modalConfig);
    }
    /**
     * @return {?}
     */
    edit() {
        this.editState = 'edit';
        if (this.uistate.curPerformer) {
            /** @type {?} */
            const modalConfig = {
                title: '参与者选择',
                width: 800,
                height: 515,
                buttons: this.editFooter,
                showButtons: true
            };
            /** @type {?} */
            const compFactory = this.resolver.resolveComponentFactory(PerformerEditComponent);
            this.compRef = compFactory.create(this.injector);
            switch (this.uistate.curPerformer.type) {
                case 'wf.PositionParticipant':
                    this.compRef.instance.performer = {
                        type: 'wf.PositionParticipant',
                        value: this.uistate.performerInfo.performers.find((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.id === this.uistate.curPerformer.id))
                    };
                    break;
                case 'wf.UserParticipant':
                    this.compRef.instance.performer = {
                        type: 'wf.UserParticipant',
                        value: this.uistate.performerInfo.performers.find((/**
                         * @param {?} p
                         * @return {?}
                         */
                        p => p.id === this.uistate.curPerformer.id))
                    };
                    break;
                case 'wf.ReportingLineParticipant':
                    /** @type {?} */
                    const reportingLine = this.uistate.performerInfo.reportingLines.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => {
                        return r.id === this.uistate.curPerformer.id;
                    }));
                    this.compRef.instance.performer = {
                        type: 'wf.ReportingLineParticipant',
                        value: reportingLine
                    };
                    /** @type {?} */
                    const url = '/api/runtime/wf/v1.0/reportingLineDefinitions/' + reportingLine.reportingLineDefId;
                    this.http.get(url).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    (res) => {
                        if (!res) {
                            this.message.error('该条汇报关系数据的定义已删除，该条数据将删除');
                            this.remove();
                        }
                        else {
                            this.editDialog = this.modalService.show(this.compRef, modalConfig);
                        }
                    }));
                    break;
                case 'wf.MatrixParticipant':
                    /** @type {?} */
                    const matrix = this.uistate.performerInfo.matrixParticipants.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => {
                        return r.id === this.uistate.curPerformer.id;
                    }));
                    this.compRef.instance.performer = {
                        type: 'wf.MatrixParticipant',
                        value: matrix
                    };
                    /** @type {?} */
                    const urlMatrix = '/api/runtime/wf/v1.0/matrixDefinition/' + matrix.matrixDefId;
                    this.http.get(urlMatrix).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    (res) => {
                        if (!res) {
                            this.message.error('该条矩阵数据的定义已删除，该条数据将删除');
                            this.remove();
                        }
                        else {
                            this.editDialog = this.modalService.show(this.compRef, modalConfig);
                        }
                    }));
                    break;
                case 'wf.ComponentParticipant':
                    this.compRef.instance.performer = {
                        type: 'wf.ComponentParticipant',
                        value: this.uistate.performerInfo.components.find((/**
                         * @param {?} c
                         * @return {?}
                         */
                        c => {
                            return c.id === this.uistate.curPerformer.id;
                        }))
                    };
                    break;
            }
            if (this.uistate.curPerformer.type !== 'wf.ReportingLineParticipant' &&
                this.uistate.curPerformer.type !== 'wf.MatrixParticipant') { // 汇报关系和矩阵单独处理
                this.editDialog = this.modalService.show(this.compRef, modalConfig);
            }
        }
    }
    /**
     * @return {?}
     */
    remove() {
        if (this.grid.selectedRow) {
            this.grid.endCellEdit();
            if (this.grid.selectedRow.data.type === 'wf.ComponentParticipant') {
                /** @type {?} */
                const i = this.uistate.performerInfo.components.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.id === this.grid.selectedRow.data.id));
                this.uistate.performerInfo.components.splice(i, 1);
            }
            else if (this.grid.selectedRow.data.type === 'wf.ReportingLineParticipant') {
                /** @type {?} */
                const i = this.uistate.performerInfo.reportingLines.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.id === this.grid.selectedRow.data.id));
                this.uistate.performerInfo.reportingLines.splice(i, 1);
            }
            else if (this.grid.selectedRow.data.type === 'wf.MatrixParticipant') {
                /** @type {?} */
                const i = this.uistate.performerInfo.matrixParticipants.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.id === this.grid.selectedRow.data.id));
                this.uistate.performerInfo.matrixParticipants.splice(i, 1);
            }
            else {
                /** @type {?} */
                const i = this.uistate.performerInfo.performers.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.id === this.grid.selectedRow.data.id));
                this.uistate.performerInfo.performers.splice(i, 1);
            }
            /** @type {?} */
            const index = this.uistate.performersList.findIndex((/**
             * @param {?} p
             * @return {?}
             */
            p => p.id === this.grid.selectedRow.data.id));
            this.uistate.performersList.splice(index, 1);
            this.grid.loadData(this.uistate.performersList);
        }
        else {
            this.message.info('请先选中一条参与者信息！');
        }
    }
    /**
     * @return {?}
     */
    clear() {
        this.uistate.performerInfo.performers = [];
        this.uistate.performerInfo.components = [];
        this.uistate.performerInfo.reportingLines = [];
        this.uistate.performerInfo.matrixParticipants = [];
        this.uistate.performersList = [];
        this.grid.loadData(this.uistate.performersList);
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.grid.endCellEdit();
        /** @type {?} */
        const object = {
            value: this.uistate.performerInfo, parameters: null
        };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    editOK() {
        if (this.compRef) {
            /** @type {?} */
            const re = this.compRef.instance.getPerformers();
            if (re.userPerformers && re.userPerformers.length > 0) {
                re.userPerformers.forEach((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => {
                    /** @type {?} */
                    const i = this.uistate.performerInfo.performers.findIndex((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => (a.id === p.id || a.performerId === p.performerId)));
                    if (i > -1) {
                        /** @type {?} */
                        const id = this.uistate.performerInfo.performers[i].id;
                        this.uistate.performerInfo.performers[i] = p;
                        /** @type {?} */
                        const index = this.uistate.performersList.findIndex((/**
                         * @param {?} a
                         * @return {?}
                         */
                        a => a.id === id));
                        this.uistate.performersList[index] = p;
                    }
                    else {
                        if (this.editState === 'edit') {
                            this.remove();
                        }
                        this.uistate.performerInfo.performers.push(p);
                        this.uistate.performersList = this.uistate.performersList.concat([p]);
                    }
                }));
                this.uistate.performersList
                    .filter((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.type === this.uistate.typeCollection[0].value || p.type === this.uistate.typeCollection[1].value))
                    .map((/**
                 * @param {?} performer
                 * @return {?}
                 */
                performer => performer.description =
                    this.performerDescription((/** @type {?} */ (performer)))));
            }
            if (re.positionPerformers && re.positionPerformers.length > 0) {
                re.positionPerformers.forEach((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => {
                    // (1)id一致，为编辑岗位；（2）performid一致，新增的用户，岗位已存在
                    /** @type {?} */
                    const i = this.uistate.performerInfo.performers.findIndex((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => (a.id === p.id || a.performerId === p.performerId)));
                    if (i > -1) {
                        /** @type {?} */
                        const id = this.uistate.performerInfo.performers[i].id;
                        this.uistate.performerInfo.performers[i] = p;
                        /** @type {?} */
                        const index = this.uistate.performersList.findIndex((/**
                         * @param {?} a
                         * @return {?}
                         */
                        a => a.id === id));
                        this.uistate.performersList[index] = p;
                    }
                    else {
                        this.uistate.performerInfo.performers.push(p);
                        this.uistate.performersList = this.uistate.performersList.concat([p]);
                    }
                }));
                this.uistate.performersList
                    .filter((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.type === this.uistate.typeCollection[0].value || p.type === this.uistate.typeCollection[1].value))
                    .map((/**
                 * @param {?} performer
                 * @return {?}
                 */
                performer => performer.description =
                    this.performerDescription((/** @type {?} */ (performer)))));
            }
            if (re.component && re.component.metadataId && re.component.methodCode) {
                /** @type {?} */
                const i = this.uistate.performerInfo.components.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.id === re.component.id));
                if (i > -1) {
                    this.uistate.performerInfo.components[i] = re.component;
                    /** @type {?} */
                    const index = this.uistate.performersList.findIndex((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => a.id === re.component.id));
                    this.uistate.performersList[index] = {
                        id: re.component.id,
                        type: 'wf.ComponentParticipant',
                        performerName: re.component.name,
                        description: this.componentDescription(re.component),
                        condition: re.component.condition
                    };
                }
                else {
                    this.uistate.performerInfo.components.push(re.component);
                    this.uistate.performersList.push({
                        id: re.component.id,
                        type: 'wf.ComponentParticipant',
                        performerName: re.component.name,
                        description: this.componentDescription(re.component),
                        condition: ''
                    });
                }
            }
            if (re.reportingLine && re.reportingLine.reportingLineDefId && re.reportingLine.dimension) {
                if (re.reportingLine.reportingReferObject === 'dept' && !re.reportingLine.refOrgId) {
                    this.isClose = false;
                    this.message.info('“部门”汇报关系类型下，参照人所在部门不能为空');
                }
                else if (re.reportingLine.reportingReferObject !== 'dept' && !re.reportingLine.refUserId && !re.reportingLine.refEmployeeId) { // 用户及其他人员汇报对象类型，参照用户和参照员工不能全部为空
                    this.isClose = false;
                    this.message.info('“用户”汇报关系类型下，参照人不能为空');
                }
                else {
                    this.isClose = true;
                    this.addReportingLineData(re);
                }
            }
            if (re.matrix && re.matrix.matrixDefId) {
                if (!re.matrix.conditionField1 && !re.matrix.conditionField2 && !re.matrix.conditionField3) {
                    this.isClose = false;
                    this.message.info('条件字段至少要存在一个');
                }
                else if (!re.matrix.dataFieldAlias) {
                    this.isClose = false;
                    this.message.info('数据字段不能为空');
                }
                else {
                    this.isClose = true;
                    this.addMatrixData(re);
                }
            }
            this.grid.loadData(this.uistate.performersList);
        }
        if (this.editDialog && this.isClose) {
            this.editDialog.close();
        }
    }
    /**
     * @private
     * @param {?} re
     * @return {?}
     */
    addReportingLineData(re) {
        /** @type {?} */
        const i = this.uistate.performerInfo.reportingLines.findIndex((/**
         * @param {?} a
         * @return {?}
         */
        a => a.id === re.reportingLine.id));
        if (i > -1) {
            this.uistate.performerInfo.reportingLines[i] = re.reportingLine;
            /** @type {?} */
            const index = this.uistate.performersList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => a.id === re.reportingLine.id));
            this.uistate.performersList[index] = {
                id: re.reportingLine.id,
                type: 'wf.ReportingLineParticipant',
                performerName: re.reportingLine.reportingLineDefName + '-' + re.reportingLine.dimension,
                description: this.reportingLineDescription(re.reportingLine),
                condition: re.reportingLine.condition
            };
        }
        else {
            for (const reportingLineData of this.uistate.performerInfo.reportingLines) {
                if (reportingLineData.reportingLineDefId === re.reportingLine.definitionId &&
                    reportingLineData.dimension === re.reportingLine.dimension &&
                    reportingLineData.refUserId === re.reportingLine.referUserId &&
                    reportingLineData.refEmployeeId === re.reportingLine.refEmployeeId &&
                    reportingLineData.refOrgId === re.reportingLine.referDeptId) {
                    this.message.error('该汇报关系已经进行过配置');
                    return;
                }
            }
            this.uistate.performerInfo.reportingLines.push(re.reportingLine);
            this.uistate.performersList.push({
                id: re.reportingLine.id,
                type: 'wf.ReportingLineParticipant',
                performerName: re.reportingLine.reportingLineDefName + '-' + re.reportingLine.dimension,
                description: this.reportingLineDescription(re.reportingLine),
                condition: re.reportingLine.condition
            });
        }
    }
    /**
     * @private
     * @param {?} re
     * @return {?}
     */
    addMatrixData(re) {
        /** @type {?} */
        const i = this.uistate.performerInfo.matrixParticipants.findIndex((/**
         * @param {?} a
         * @return {?}
         */
        a => a.id === re.matrix.id));
        if (i > -1) {
            this.uistate.performerInfo.matrixParticipants[i] = re.matrix;
            /** @type {?} */
            const index = this.uistate.performersList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            a => a.id === re.matrix.id));
            this.uistate.performersList[index] = {
                id: re.matrix.id,
                type: 'wf.MatrixParticipant',
                performerName: re.matrix.matrixDefName + '-' + re.matrix.dataFieldAlias,
                description: this.matrixDescription(re.matrix),
                condition: re.matrix.condition
            };
        }
        else {
            for (const matrixData of this.uistate.performerInfo.matrixParticipants) {
                if (matrixData.matrixDefId === re.matrix.matrixDefId &&
                    matrixData.conditionField1 === re.matrix.conditionField1 &&
                    matrixData.conditionField2 === re.matrix.conditionField2 &&
                    matrixData.conditionField3 === re.matrix.conditionField3 &&
                    matrixData.dataFieldAlias === re.matrix.dataFieldAlias) {
                    this.message.error('该矩阵已经进行过配置');
                    return;
                }
            }
            this.uistate.performerInfo.matrixParticipants.push(re.matrix);
            this.uistate.performersList.push({
                id: re.matrix.id,
                type: 'wf.MatrixParticipant',
                performerName: re.matrix.matrixDefName + '-' + re.matrix.dataFieldAlias,
                description: this.matrixDescription(re.matrix),
                condition: re.matrix.condition
            });
        }
    }
    /**
     * @return {?}
     */
    editCancel() {
        if (this.editDialog) {
            this.editDialog.close();
        }
    }
    /**
     * @return {?}
     */
    participantOptionsSet() {
        this.uistate.performerInfo.options = this.options.getPerformerOptions();
        this.optionsDialog.close();
    }
    /**
     * @private
     * @param {?} performer
     * @return {?}
     */
    performerDescription(performer) {
        if (performer.type === 'wf.UserParticipant') {
            if (performer.tag === 'expression') {
                return performer.performerId;
            }
            else {
                if (performer.orgName) {
                    return `部门：${performer.orgName}`;
                }
                else {
                    return '';
                }
            }
        }
        else if (performer.type === 'wf.PositionParticipant') {
            if (((/** @type {?} */ (performer))).positionType === '1') {
                if (performer.orgId) {
                    return `岗位类型：通用岗位，部门：${performer.orgId}`;
                }
                else {
                    return `岗位类型：通用岗位`;
                }
            }
            else if (((/** @type {?} */ (performer))).positionType === '0') {
                return '岗位类型：组织岗位';
            }
        }
    }
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    componentDescription(component) {
        /** @type {?} */
        let des = `构件：${component.name},参数：{`;
        if (component.actualParameters && component.actualParameters.length > 0) {
            component.actualParameters.forEach((/**
             * @param {?} p
             * @return {?}
             */
            p => {
                des += `${p.code}：${p.value}，`;
            }));
            des = des.substring(0, des.length - 1);
        }
        des += '}';
        return des;
    }
    /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    reportingLineDescription(reportingLine) {
        /** @type {?} */
        let description = '';
        if (reportingLine.refUserId) {
            description += `参照人：${reportingLine.refUserId}`;
        }
        if (reportingLine.refEmployeeId) {
            description += `参照人：${reportingLine.refEmployeeId}`;
        }
        if (reportingLine.refOrgId) {
            if (reportingLine.refUserId) {
                description += `，`;
            }
            if (reportingLine.refEmployeeId) {
                description += `，`;
            }
            description += `参照组织：${reportingLine.refOrgId}`;
        }
        return description;
    }
    /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    matrixDescription(matrix) {
        /** @type {?} */
        let description = '';
        if (matrix.conditionField1) {
            description += `条件1：${matrix.conditionFieldText1}，`;
        }
        if (matrix.conditionField2) {
            description += `条件2：${matrix.conditionFieldText2}，`;
        }
        if (matrix.conditionField3) {
            description += `条件3：${matrix.conditionFieldText3}，`;
        }
        if (matrix.dataFieldAlias) {
            description += `数据：${matrix.dataFieldAlias}，`;
        }
        return description.slice(0, description.length - 1);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    editConditon(e) {
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.designerUIState.procInstContext.length > 0) {
            for (const variable of this.designerUIState.procInstContext) {
                context.push(variable);
            }
        }
        if (this.designerUIState.formalParameterContext.length > 0) {
            for (const variable of this.designerUIState.formalParameterContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.participantContext.length > 0) {
            for (const variable of this.designerUIState.participantContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            for (const variable of this.designerUIState.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.setEditPattern(ExprEditMode.Conditional); // 默认打开简易表达式编辑器
        this.expr.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        (cond) => {
            if (this.grid.selectedRow.data.type === 'wf.ComponentParticipant') {
                this.uistate.performerInfo.components.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.id === this.grid.selectedRow.data.id)).condition = cond;
            }
            else if (this.grid.selectedRow.data.type === 'wf.ReportingLineParticipant') {
                this.uistate.performerInfo.reportingLines.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.id === this.grid.selectedRow.data.id)).condition = cond;
            }
            else if (this.grid.selectedRow.data.type === 'wf.MatrixParticipant') {
                this.uistate.performerInfo.matrixParticipants.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.id === this.grid.selectedRow.data.id)).condition = cond;
            }
            else {
                this.uistate.performerInfo.performers.find((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.id === this.grid.selectedRow.data.id)).condition = cond;
            }
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectChanged(data) {
        this.uistate.curPerformer = data.data;
    }
    /**
     * @private
     * @return {?}
     */
    GetOrganizationType() {
        /** @type {?} */
        const url = '/api/runtime/sys/v1.0/authfields/globalauthfields';
        this.http.get(url)
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => this.designerUIState.orgTypeCollection = data.map((/**
         * @param {?} d
         * @return {?}
         */
        d => ({ value: d.id, text: d.name })))));
    }
    /**
     * @private
     * @return {?}
     */
    getMatrixConfig() {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/generalConfig/Is_EnableMatrix`;
        return this.http.get(url);
    }
}
PerformerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-performer',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span>\r\n        <h4 class=\"f-title-text\">\u53C2\u4E0E\u8005\u5217\u8868</h4>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n      <button class=\"btn btn-primary mr-2\" (click)=\"add()\">\u65B0\u589E</button>\r\n      <button class=\"btn btn-secondary mr-2\" [disabled]=\"(!uistate.curPerformer)\"\r\n      (click)=\"edit()\">\u7F16\u8F91</button>\r\n      <button class=\"btn btn-secondary mr-2\" (click)=\"remove()\">\u79FB\u9664</button>\r\n      <button class=\"btn btn-secondary mr-2\" (click)=\"clear()\">\u6E05\u7A7A</button>\r\n      <button class=\"btn btn-secondary\" (click)=\"participantOptions.show()\">\u53C2\u4E0E\u8005\u9009\u9879</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"uistate.performersList\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\"\r\n        [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n        [multiSelect]=\"false\" [afterEdit]=\"afterEdit\" (selectChanged)=\"selectChanged($event)\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n<ng-template #editFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"editOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"editCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n<farris-dialog #participantOptions [buttons]=\"buttonRef\" [width]=\"500\" [height]=\"530\" [title]=\"'\u53C2\u4E0E\u8005\u9009\u9879'\">\r\n  <app-performer-options [options]=\"uistate.performerInfo.options\"></app-performer-options>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"participantOptionsSet()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"participantOptions.close()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                providers: [PerformerViewModel, PerformerRepository, PerformerUIState],
                styles: [""]
            }] }
];
/** @nocollapse */
PerformerComponent.ctorParameters = () => [
    { type: PerformerViewModel },
    { type: PerformerUIState },
    { type: FormBuilder },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: HttpService }
];
PerformerComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    editFooter: [{ type: ViewChild, args: ['editFooter',] }],
    options: [{ type: ViewChild, args: [PerformerOptionsComponent,] }],
    optionsDialog: [{ type: ViewChild, args: ['participantOptions',] }],
    grid: [{ type: ViewChild, args: [DatagridComponent,] }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    editorParams: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PerformerComponent.prototype.cls;
    /** @type {?} */
    PerformerComponent.prototype.display;
    /** @type {?} */
    PerformerComponent.prototype.modalFooter;
    /** @type {?} */
    PerformerComponent.prototype.editFooter;
    /** @type {?} */
    PerformerComponent.prototype.options;
    /** @type {?} */
    PerformerComponent.prototype.optionsDialog;
    /** @type {?} */
    PerformerComponent.prototype.grid;
    /** @type {?} */
    PerformerComponent.prototype.closeModal;
    /** @type {?} */
    PerformerComponent.prototype.submitModal;
    /** @type {?} */
    PerformerComponent.prototype.editorParams;
    /** @type {?} */
    PerformerComponent.prototype.editDialog;
    /** @type {?} */
    PerformerComponent.prototype.compRef;
    /** @type {?} */
    PerformerComponent.prototype.isClose;
    /** @type {?} */
    PerformerComponent.prototype.modalConfig;
    /** @type {?} */
    PerformerComponent.prototype.columns;
    /** @type {?} */
    PerformerComponent.prototype.curPerformer;
    /** @type {?} */
    PerformerComponent.prototype.editState;
    /** @type {?} */
    PerformerComponent.prototype.afterEdit;
    /** @type {?} */
    PerformerComponent.prototype.viewModel;
    /** @type {?} */
    PerformerComponent.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    PerformerComponent.prototype.formBuilder;
    /**
     * @type {?}
     * @private
     */
    PerformerComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    PerformerComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    PerformerComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    PerformerComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    PerformerComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    PerformerComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    PerformerComponent.prototype.http;
}
export class PerformerConverter {
    constructor() { }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if ((data.performers && data.performers.length > 0)
            || (data.components && data.components.length > 0)
            || (data.reportingLines && data.reportingLines.length > 0)
            || (data.matrixParticipants && data.matrixParticipants.length > 0)) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    }
}
//# sourceMappingURL=data:application/json;base64,