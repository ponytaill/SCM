/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, ViewChild, Injector, NgZone, ElementRef } from '@angular/core';
import { SysFarrisLookupComponent } from '@gsp-sys/sysmgr-ui';
import { ProcessDesignerUIState } from '../../../../app/process-designer.uistate';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { UserPerformerEntity } from '../../entities/user-performer.entity';
import { PerformerConfigService } from '../../performer-config.service';
import { HttpService } from '@ecp-caf/caf-common';
import { MessagerService } from "@farris/ui-messager";
export class UserPerformerComponent {
    /**
     * @param {?} designerUIState
     * @param {?} expr
     * @param {?} injector
     * @param {?} lookupConfig
     * @param {?} ngZone
     * @param {?=} http
     * @param {?=} message
     */
    constructor(designerUIState, expr, injector, lookupConfig, ngZone, http, message) {
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.injector = injector;
        this.lookupConfig = lookupConfig;
        this.ngZone = ngZone;
        this.http = http;
        this.message = message;
        this.cls = 'd-flex flex-fill h-100';
        this.showClearButton = false;
        this.bindingData = {};
        this.userTypeCollection = [
            { text: '固定用户', value: 'user' },
            { text: '变量参与者', value: 'variable' }
        ];
        this.userType = this.userTypeCollection[0].value;
        this.variableOrgTypes = [
            { name: '系统用户', value: 'Sys' },
            { name: '行政人员', value: 'Administrative_organization' }
        ];
        this.curOrgType = this.variableOrgTypes[0].value;
        this.hasAdminOrg = false;
        this.userTypeButtonNeedShow = false; // 用户类型单选按钮是否需要显示
        this.users = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        let url = '/api/runtime/wf/v1.0/reportingOrgType/hasAdminOrg';
        this.http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.hasAdminOrg = data;
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputGroup.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    userTypeChange(data) {
        // 切换类型时，清空users
        this.users = [];
        // 切换类型时，人员类型自动切换成系统用户
        this.orgTypeChange('Sys');
        // 有行政帮助并且切换到变量参与者才显示
        this.userTypeButtonNeedShow = this.hasAdminOrg && data.data.value === 'variable';
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clear(data) {
        this.bindingData = {};
        this.users = [];
        this.variableOrgTypes = [
            { name: '系统用户', value: 'Sys' },
            { name: '行政人员', value: 'Administrative_organization' }
        ];
    }
    /**
     * @param {?} data
     * @return {?}
     */
    selectUsers(data) {
        // 固定用户
        if (this.userType === this.userTypeCollection[0].value) {
            this.lookupConfig.getLookupConfig().subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                // 项目配置了自己的帮助时
                if (re.user && re.user.impl) {
                    System.import(re.user.impl)
                        .then((/**
                     * @param {?} moduleFactorys
                     * @return {?}
                     */
                    (moduleFactorys) => {
                        /** @type {?} */
                        const moduleFactory = Object.values(moduleFactorys)[0];
                        /** @type {?} */
                        const moduleRef = moduleFactory.create(this.injector);
                        moduleRef.instance.showHelp().subscribe((/**
                         * @param {?} data
                         * @return {?}
                         */
                        data => {
                            if (data && data.length > 0) {
                                this.users = data.map((/**
                                 * @param {?} u
                                 * @return {?}
                                 */
                                u => {
                                    /** @type {?} */
                                    const user = new UserPerformerEntity(u.id, u.name, 'wf.UserParticipant');
                                    user.orgId = u.orgId;
                                    user.orgName = u.orgName;
                                    user.userType = this.userTypeCollection[0].value;
                                    return user;
                                }));
                            }
                        }));
                    }));
                }
                else { // 加载默认帮助
                    this.userHelp.showHelp();
                }
            }));
        }
        else {
            this.showExprHelp();
        }
    }
    /**
     * @return {?}
     */
    editConditon() {
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.designerUIState.procInstContext.length > 0) {
            for (const variable of this.designerUIState.procInstContext) {
                context.push(variable);
            }
        }
        if (this.designerUIState.formalParameterContext.length > 0) {
            for (const variable of this.designerUIState.formalParameterContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.participantContext.length > 0) {
            for (const variable of this.designerUIState.participantContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            for (const variable of this.designerUIState.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            for (const variable of this.designerUIState.activityComponentContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.condition);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.condition = expressioninfo;
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    usersSelect(data) {
        this.users = data.map((/**
         * @param {?} u
         * @return {?}
         */
        u => {
            /** @type {?} */
            const user = new UserPerformerEntity(u.id, u.name, 'wf.UserParticipant');
            user.orgId = u.sysOrgId;
            user.orgName = u.sysOrgName;
            user.userType = this.userTypeCollection[0].value;
            return user;
        }));
    }
    /**
     * @return {?}
     */
    showExprHelp() {
        if (this.designerUIState.schemas.length > 0) {
            for (const schema of this.designerUIState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.designerUIState.participantContext.length > 0) {
            for (const variable of this.designerUIState.participantContext) {
                context.push(variable);
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            for (const variable of this.designerUIState.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        if (this.users.length > 0) {
            this.expr.addExpressionText(this.users[0].performerId);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            /** @type {?} */
            const user = new UserPerformerEntity(expressioninfo, '', 'wf.UserParticipant');
            user.tag = 'expression';
            user.performerName = this.variableParticipantName(expressioninfo);
            user.userType = this.userTypeCollection[1].value;
            if (this.variableParticipantName(expressioninfo) === '') {
                this.message.error('行政人员类型不能使用上下文变量');
                this.users = [];
            }
            else {
                this.users = [user];
            }
            if (user.performerId.indexOf("GetContextParameter") >= 0) { // 根据表达式中的函数名判断是否使用的是上下文变量
                this.variableOrgTypes = [
                    { name: '系统用户', value: 'Sys' }
                ];
            }
            else {
                this.variableOrgTypes = [
                    { name: '系统用户', value: 'Sys' },
                    { name: '行政人员', value: 'Administrative_organization' }
                ];
            }
        }));
    }
    /**
     * @return {?}
     */
    getPerformers() {
        this.users.map((/**
         * @param {?} user
         * @return {?}
         */
        user => {
            if (user.orgId === undefined) {
                user.orgType = this.curOrgType;
                return user;
            }
        }));
        if (this.condition) {
            this.users = this.users.map((/**
             * @param {?} user
             * @return {?}
             */
            user => {
                user.condition = this.condition;
                return user;
            }));
        }
        return this.users;
    }
    /**
     * @private
     * @param {?} expr
     * @return {?}
     */
    variableParticipantName(expr) {
        for (const c of this.designerUIState.participantContext) {
            if (expr.indexOf(c.key) > -1) {
                if (this.curOrgType !== 'Sys') { // 行政人员类型不允许使用上下文变量
                    return '';
                }
                return c.name;
            }
        }
        for (const c of this.designerUIState.processVariableContext) {
            if (expr.indexOf(c.key) > -1) {
                return c.name;
            }
        }
        return '业务字段';
    }
    /**
     * @param {?} data
     * @return {?}
     */
    orgTypeChange(data) {
        if (data === 'Sys') {
            this.curOrgType = this.variableOrgTypes[0].value;
        }
        else {
            this.curOrgType = this.variableOrgTypes[1].value;
        }
    }
}
UserPerformerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-user-performer',
                template: "<div class=\"d-flex flex-fill farris-overflow-y-auto p-md-2\">\r\n  <form style=\"background: #F0F3F6; width: 100%;\" >\r\n    <div class=\"d-flex m-2 flex-column w-100\">\r\n      <div class=\"d-flex flex-column mx-5 my-4\" style=\"background: #FFF;\">\r\n        <div class=\"farris-form form-inline  farris-form-inline mr-5 my-2\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u7528\u6237\u7C7B\u578B</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-combo-list [(ngModel)]=\"userType\" name=\"userType\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                    [valueField]=\"'value'\" [data]=\"userTypeCollection\" [panelHeight]=\"60\" (selectChange)='userTypeChange($event)'>\r\n                  </farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u7528\u6237</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div #inputGroup class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [value]=\"users | usersName \" name=\"users\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                        (click)=\"clear($event)\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span class=\"input-group-text\" (click)=\"selectUsers($event)\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\" [ngStyle]=\"{'visibility' : userTypeButtonNeedShow ? 'visible' : 'hidden'}\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u4EBA\u5458\u7C7B\u578B</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-radiogroup [data]=\"variableOrgTypes\" [horizontal]=\"true\"\r\n                                     [(ngModel)]=\"curOrgType\" name=\"referObject\"\r\n                                     (changeValue)=\"orgTypeChange($event)\"\r\n                  ></farris-radiogroup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex flex-column mx-5\" style=\"background: #FFF;\">\r\n        <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u542F\u7528\u6761\u4EF6</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"condition\" name=\"conditon\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span class=\"input-group-text\" (click)=\"editConditon()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n\r\n<sys-farris-grid-lookup #userHelp style=\"display: none;\" [singleSelect]=\"false\" [displayTxt]=\"bindingData.name\"\r\n  [pagination]=\"true\" [pageSize]=\"20\" [title]=\"'\u7CFB\u7EDF\u7528\u6237'\" [sourceType]=\"'user'\" (afterConfirm)=\"usersSelect($event)\"\r\n  [bindingData]=\"bindingData\" [filter]=\"{notGetCurrentUser:false}\" [typeMode]=\"1\">\r\n</sys-farris-grid-lookup>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
UserPerformerComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: Injector },
    { type: PerformerConfigService },
    { type: NgZone },
    { type: HttpService },
    { type: MessagerService }
];
UserPerformerComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    userHelp: [{ type: ViewChild, args: [SysFarrisLookupComponent,] }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }]
};
if (false) {
    /** @type {?} */
    UserPerformerComponent.prototype.cls;
    /** @type {?} */
    UserPerformerComponent.prototype.userHelp;
    /** @type {?} */
    UserPerformerComponent.prototype.inputGroup;
    /** @type {?} */
    UserPerformerComponent.prototype.showClearButton;
    /** @type {?} */
    UserPerformerComponent.prototype.bindingData;
    /** @type {?} */
    UserPerformerComponent.prototype.userTypeCollection;
    /** @type {?} */
    UserPerformerComponent.prototype.userType;
    /** @type {?} */
    UserPerformerComponent.prototype.variableOrgTypes;
    /** @type {?} */
    UserPerformerComponent.prototype.curOrgType;
    /** @type {?} */
    UserPerformerComponent.prototype.hasAdminOrg;
    /** @type {?} */
    UserPerformerComponent.prototype.userTypeButtonNeedShow;
    /** @type {?} */
    UserPerformerComponent.prototype.condition;
    /** @type {?} */
    UserPerformerComponent.prototype.users;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.designerUIState;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.lookupConfig;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    UserPerformerComponent.prototype.message;
}
//# sourceMappingURL=data:application/json;base64,