/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ElementRef, Input, Output, EventEmitter, HostBinding, ChangeDetectorRef, Optional, Injector } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { forkJoin } from 'rxjs';
import { UiFlowchartService } from '../services/ui-flowchart.service';
import { WFFlowchartService } from '../wf-flowchart.service';
import { MessagerService } from '@farris/ui-messager';
import { FrameworkService } from '@gsp-sys/rtf-common';
export class UIFlowchartComponent {
    /**
     * @param {?} sanitizer
     * @param {?} service
     * @param {?} changeDetector
     * @param {?} injector
     * @param {?} chartService
     */
    constructor(sanitizer, service, changeDetector, injector, chartService) {
        this.sanitizer = sanitizer;
        this.service = service;
        this.changeDetector = changeDetector;
        this.injector = injector;
        this.chartService = chartService;
        // 消息监听处理方法
        this.cls = 'd-flex flex-fill h-100';
        this.modalHide = new EventEmitter();
        this.fcHtml = window.document.location.origin + '/platform/runtime/wf/web/designer/flowchart.html';
        this.theme = 'viewFlowChart';
        this._mode = 'complete';
        this.modeButton = this.service.getI18nValue('static.flowchart.simulation');
        this.typeList = [{
                value: 'complete', text: this.service.getI18nValue('static.flowchart.complete')
            },
            {
                value: 'simulation', text: this.service.getI18nValue('static.flowchart.simulation')
            }];
        // 监听事件处理
        this.eventHandler = (event) => {
            /** @type {?} */
            const origin = event.origin;
            /** @type {?} */
            const message = event.data;
            if (this.fcHtml.search(origin) > -1) {
                switch (message.action) {
                    case 'load':
                        this.viewFlowChart();
                        break;
                    case 'viewLogs':
                        this.viewLogs(message.data);
                        break;
                    case 'viewParent':
                        this.viewParent(message.data.superProcInstId);
                        break;
                    case 'viewChild':
                        this.viewChild(message.data.superActInstId, message.data.superProcInstId);
                        break;
                    case 'viewForm':
                        this.viewForm(message.data.procInstId, message.data.actInstId, message.data.bizInstId);
                        break;
                    case 'retryAifCreation':
                        this.retryAifCreation(message.data.procInstId, message.data.actInstId, message.data.bizInstId);
                        break;
                    default:
                        break;
                }
            }
        };
        this.message = this.injector.get(MessagerService);
        this.frameworkSvc = this.injector.get(FrameworkService);
        this.srcUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.fcHtml);
        if (UIFlowchartComponent.func) {
            window.removeEventListener('message', UIFlowchartComponent.func, false);
        }
        this.addMessageListener();
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set mode(v) {
        this._mode = v;
        if (this._mode === 'simulation') {
            this.ifForecast = 'true';
            this.modeButton = this.service.getI18nValue('static.flowchart.complete');
        }
        else if (this._mode === 'complete') {
            this.modeButton = this.service.getI18nValue('static.flowchart.simulation');
        }
    }
    /**
     * @return {?}
     */
    get mode() {
        return this._mode;
    }
    /**
     * @param {?} procInstId
     * @return {?}
     */
    set ProcInstId(procInstId) {
        if (procInstId) {
            this.procInstId = procInstId;
        }
    }
    /**
     * @param {?} dataId
     * @return {?}
     */
    set DataId(dataId) {
        if (dataId) {
            this.dataId = dataId;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @private
     * @return {?}
     */
    addMessageListener() {
        window.addEventListener('message', this.eventHandler, false);
        UIFlowchartComponent.func = this.eventHandler;
    }
    /**
     * @private
     * @return {?}
     */
    viewFlowChart() {
        if (this.theme === 'viewFlowChart') {
            this.viewFlowChartByProcInstId();
        }
        else {
            this.processForecast();
        }
    }
    /**
     * @private
     * @param {?} superProcInstId
     * @return {?}
     */
    viewParent(superProcInstId) {
        // this.procInstId = superProcInstId;
        // this.viewFlowChartByProcInstId();
    }
    /**
     * @private
     * @param {?} superActInstId
     * @param {?} superProcInstId
     * @return {?}
     */
    viewChild(superActInstId, superProcInstId) {
        this.service.getSubProcessInstance(superActInstId, superProcInstId)
            .subscribe(re => {
            if (this.chartService) {
                this.chartService.viewFlowChartByDialog(re.id, this.mode);
            }
            else {
                throw Error('请升级查看流程公共包实现联查子流程图功能');
            }
        });
    }
    /**
     * @return {?}
     */
    modeSwitch() {
        if (this.mode === 'complete') {
            this.mode = 'simulation';
            this.ifForecast = 'true';
            this.modeButton = this.service.getI18nValue('static.flowchart.complete');
            this.service.getForecastProcessByProcInstId(this.procInstId).subscribe(r => {
                this.actInstList = r.activityInstanceSlims;
                this.transInsList = r.transitionInstanceSlims;
                this.postMessage('modeSwitch', {
                    mode: 'simulation',
                    actiInstList: r.activityInstanceSlims,
                    transInsList: r.transitionInstanceSlims
                });
            });
        }
        else {
            this.mode = 'complete';
            this.ifForecast = 'false';
            this.modeButton = this.service.getI18nValue('static.flowchart.simulation');
            this.service.getCompleteProcessInfoByProcInstId(this.procInstId).subscribe(r => {
                this.actInstList = r.activityInstanceSlims;
                this.transInsList = r.transitionInstanceSlims;
                this.postMessage('modeSwitch', {
                    mode: 'complete',
                    actiInstList: r.activityInstanceSlims,
                    transInsList: r.transitionInstanceSlims
                });
            });
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    viewLogs(data) {
        this.type = data.type;
        this.actDefId = data.actiDefId;
    }
    /**
     * @private
     * @return {?}
     */
    viewFlowChartByProcInstId() {
        this.content = '';
        if (this.procInstId) {
            if (this.mode === 'complete') {
                forkJoin(this.service.getProcInstanceById(this.procInstId), this.service.getBpmnModelbyProcInstId(this.procInstId), this.service.getCompleteProcessInfoByProcInstId(this.procInstId))
                    .subscribe((data) => {
                    this.processInstance = data[0];
                    this.content = JSON.stringify(data[1]);
                    this.actInstList = data[2].activityInstanceSlims;
                    this.transInsList = data[2].transitionInstanceSlims;
                    this.loadFlowChart();
                });
            }
            else {
                forkJoin(this.service.getProcInstanceById(this.procInstId), this.service.getBpmnModelbyProcInstId(this.procInstId), this.service.getForecastProcessByProcInstId(this.procInstId))
                    .subscribe((data) => {
                    this.processInstance = data[0];
                    this.content = JSON.stringify(data[1]);
                    this.actInstList = data[2].activityInstanceSlims;
                    this.transInsList = data[2].transitionInstanceSlims;
                    this.loadFlowChart();
                });
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    processForecast() {
        this.content = '';
        this.mode = 'simulation';
        // this.ifForecast = true;
        if (this.processForecastPayload.processDefinitionId && this.processForecastPayload.dataId) {
            forkJoin(this.service.getBpmnModelbyProcDefId(this.processForecastPayload.processDefinitionId), this.service.getForecastProcessByPayload(this.processForecastPayload))
                .subscribe((data) => {
                this.content = JSON.stringify(data[0]);
                this.actInstList = data[1].activityInstanceSlims;
                this.transInsList = data[1].transitionInstanceSlims;
                this.loadFlowChart();
            });
        }
    }
    /**
     * @private
     * @param {?} procInstId
     * @param {?} actInstId
     * @param {?} bizInstId
     * @return {?}
     */
    viewForm(procInstId, actInstId, bizInstId) {
        if (procInstId) {
            this.service.getFormInfoByActInstId(procInstId, actInstId).subscribe((re) => {
                /** @type {?} */
                const formInfo = re;
                if (!formInfo || !formInfo.appId) {
                    if (this.message) {
                        this.message.info('找不到单据，请联系管理员查看原因！');
                    }
                    return;
                }
                /** @type {?} */
                const options = {
                    appType: 'menu',
                    funcId: formInfo.appId,
                    appId: '',
                    appEntrance: '',
                    tabId: bizInstId,
                    isNewTab: true
                };
                // 传工作流上下文参数
                /** @type {?} */
                const parameters = new Map();
                parameters.set('procInstId', procInstId);
                parameters.set('actInstId', actInstId);
                formInfo.parameters.forEach((item) => parameters.set(item.code, item.value));
                options.queryStringParams = parameters;
                if (this.frameworkSvc) {
                    this.frameworkSvc.openMenu(options);
                }
                else {
                    throw Error('框架服务不存在！无法联查！');
                }
            });
        }
    }
    /**
     * @private
     * @param {?} procInstId
     * @param {?} actInstId
     * @param {?} bizInstId
     * @return {?}
     */
    retryAifCreation(procInstId, actInstId, bizInstId) {
        if (procInstId) {
            this.service.retryAifCreation(procInstId, actInstId, bizInstId).subscribe((re) => {
                this.viewFlowChart();
            }, (err) => {
                setTimeout(() => {
                    //todo 确定异常结构, 目前采用兼容取值方式
                    this.message.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                }, 300);
                throw err;
            });
        }
    }
    /**
     * @return {?}
     */
    loadFlowChart() {
        if (this.content) {
            this.postMessage('load', {
                processInstance: this.processInstance,
                content: this.content,
                actiInstList: this.actInstList,
                transInsList: this.transInsList,
                mode: this.mode
            });
        }
    }
    /**
     * @param {?} action
     * @param {?} data
     * @return {?}
     */
    postMessage(action, data) {
        /** @type {?} */
        const message = { action, data };
        this.iframe.nativeElement.contentWindow.postMessage(message, this.fcHtml);
    }
    /**
     * @return {?}
     */
    fill() {
        this.cls = 'd-flex flex-fill h-100 f-utils-absolute-all';
    }
}
UIFlowchartComponent.func = null; // 消息监听处理方法
UIFlowchartComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-flowchart',
                template: "<layout [direction]=\"'h'\" [fill]=\"true\">\r\n    <layout-panel region=\"west\" [showBorder]=\"false\" [minWidth]=\"400\" style=\"width: 70%;\">\r\n        <farris-section [mainTitle]=\"'static.flowchart.flowChart' | translate\" [enableMaximize]=\"false\"\r\n            [enableAccordion]=\"false\" [fill]=\"true\" style=\"height: 100%;\" class=\"px-0 pb-0\">\r\n            <ng-template farrisSectionToolbar>   \r\n                <button *ngIf=\"theme==='viewFlowChart'\" class=\"btn btn-secondary mr-2\" (click)=\"modeSwitch()\">{{modeButton}}</button>\r\n                <div class=\"btn-group\" fDropdown>\r\n                    <button class=\"btn btn-secondary dropdown-toggle\" fDropdownToggle type=\"button\">\r\n                        {{'static.flowchart.sequenceColor' | translate}}\r\n                    </button>\r\n                    <div class=\"dropdown-menu\" fDropdownMenu>\r\n                        <table class=\"mx-2\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style=\"width:25px;\"><span\r\n                                            style=\"background:#595959;color:#fff;border-radius:0;display: block;width:15px;height:15px;\"></span>\r\n                                    </td>\r\n                        \r\n                                    <td style=\"width:60px;\">{{'static.flowchart.completed' | translate}}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style=\"width:25px;\"><span\r\n                                            style=\"background:#f59c24;color:#fff;border-radius:0;display: block;width:15px;height:15px;\"></span>\r\n                                    </td>\r\n                                    <td style=\"width:60px;\">{{'static.flowchart.calculate' | translate}}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style=\"width:25px;\"><span\r\n                                            style=\"background:#59A1FF;color:#fff;border-radius:0;display: block;width:15px;height:15px;\"></span>\r\n                                    </td>\r\n                                    <td style=\"width:60px;\">{{'static.flowchart.default' | translate}}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style=\"width:25px;\"><span\r\n                                            style=\"background:#FF4040;color:#fff;border-radius:0;display: block;width:15px;height:15px;\"></span>\r\n                                    </td>\r\n                                    <td style=\"width:60px;\">{{'static.flowchart.suspend' | translate}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n            </ng-template>\r\n            <div *ngIf=\"dataId || procInstId || processForecastPayload\" style=\"height: 100%;\">\r\n                <iframe #iframe class=\"flowChart\" [src]=\"srcUrl\" frameborder=\"0\">\r\n                </iframe>\r\n            </div>\r\n        </farris-section>\r\n    </layout-panel>\r\n    <layout-panel region=\"center\" [showBorder]=\"false\" [minWidth]=\"300\" style=\"overflow: auto; width: 30%;\">\r\n        <farris-section [enableMaximize]=\"false\" [enableAccordion]=\"false\" [showHeader]=\"false\" class=\"px-0\">\r\n            <wf-approval-logs\r\n                [ProcInstId]=\"procInstId\"\r\n                [DataId]=\"dataId\" \r\n                [IfForecast]=\"ifForecast\"\r\n                [ActivityDefinitionId]=\"actDefId\" \r\n                [Type]=\"type\"\r\n                [processForecastPayload] = \"processForecastPayload\"\r\n                [ShowHeader]=\"true\"\r\n                [ShowViewProcess]=\"false\"\r\n            >\r\n            </wf-approval-logs>\r\n        </farris-section>\r\n    </layout-panel>\r\n</layout>\r\n\r\n",
                styles: ["::ng-deep .chartModal .ant-modal{height:100%}::ng-deep .chartModal .ant-modal-content{height:100%}::ng-deep .chartModal .ant-modal-body{height:90%}.flowChart{height:100%;min-height:400px;width:100%}"]
            }] }
];
/** @nocollapse */
UIFlowchartComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: UiFlowchartService },
    { type: ChangeDetectorRef },
    { type: Injector },
    { type: WFFlowchartService, decorators: [{ type: Optional }] }
];
UIFlowchartComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    iframe: [{ type: ViewChild, args: ['iframe',] }],
    modalHide: [{ type: Output }],
    theme: [{ type: Input }],
    processForecastPayload: [{ type: Input }],
    mode: [{ type: Input }],
    ProcInstId: [{ type: Input }],
    DataId: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    UIFlowchartComponent.func;
    /** @type {?} */
    UIFlowchartComponent.prototype.cls;
    /** @type {?} */
    UIFlowchartComponent.prototype.iframe;
    /** @type {?} */
    UIFlowchartComponent.prototype.modalHide;
    /** @type {?} */
    UIFlowchartComponent.prototype.procInstId;
    /** @type {?} */
    UIFlowchartComponent.prototype.dataId;
    /** @type {?} */
    UIFlowchartComponent.prototype.actDefId;
    /** @type {?} */
    UIFlowchartComponent.prototype.ifForecast;
    /** @type {?} */
    UIFlowchartComponent.prototype.type;
    /** @type {?} */
    UIFlowchartComponent.prototype.srcUrl;
    /** @type {?} */
    UIFlowchartComponent.prototype.content;
    /** @type {?} */
    UIFlowchartComponent.prototype.actInstList;
    /** @type {?} */
    UIFlowchartComponent.prototype.transInsList;
    /** @type {?} */
    UIFlowchartComponent.prototype.processInstance;
    /** @type {?} */
    UIFlowchartComponent.prototype.fcHtml;
    /** @type {?} */
    UIFlowchartComponent.prototype.theme;
    /** @type {?} */
    UIFlowchartComponent.prototype.processForecastPayload;
    /**
     * @type {?}
     * @private
     */
    UIFlowchartComponent.prototype._mode;
    /** @type {?} */
    UIFlowchartComponent.prototype.modeButton;
    /** @type {?} */
    UIFlowchartComponent.prototype.typeList;
    /**
     * @type {?}
     * @private
     */
    UIFlowchartComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    UIFlowchartComponent.prototype.frameworkSvc;
    /** @type {?} */
    UIFlowchartComponent.prototype.eventHandler;
    /**
     * @type {?}
     * @private
     */
    UIFlowchartComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    UIFlowchartComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    UIFlowchartComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    UIFlowchartComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    UIFlowchartComponent.prototype.chartService;
}
//# sourceMappingURL=data:application/json;base64,