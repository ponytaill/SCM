/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Input, Output, EventEmitter, ViewChild, TemplateRef, ComponentFactoryResolver, Injector } from '@angular/core';
import { CallActivitySubProcess } from '../call-activity-sub-process/call-activity-sub-process.entity';
import { MessagerService } from '@farris/ui-messager';
import { ProcessDeUtil } from '../../domain/process-de-util';
import { HttpService } from '@ecp-caf/caf-common';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExpressionService, InjectedType } from '@gsp-svc/expression';
import { FarrisRadioGroupComponent } from '@farris/ui-forms';
import { ProcessListHelpComponent } from '../../aif-process-list-help/components/process-list-help/process-list-help.component';
import { NotifyService } from '@farris/ui-notify';
import { BsModalService } from '@farris/ui-modal';
import { SubProcessType } from '../call-activity-sub-process/SubProcessType';
import { BillSourceType } from '../call-activity-sub-process/BillSourceType';
export class CallActivitySubProcess2Component {
    /**
     * @param {?} notify
     * @param {?} modalService
     * @param {?} message
     * @param {?} util
     * @param {?} http
     * @param {?} designerState
     * @param {?} expr
     * @param {?} cfr
     * @param {?} inj
     */
    constructor(notify, modalService, message, util, http, designerState, expr, cfr, inj) {
        this.notify = notify;
        this.modalService = modalService;
        this.message = message;
        this.util = util;
        this.http = http;
        this.designerState = designerState;
        this.expr = expr;
        this.cfr = cfr;
        this.inj = inj;
        this.cls = 'farris-main-area flex-column';
        this.editorParams = {};
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: '子流程设置',
            width: 480,
            height: 400,
            showButtons: true
        };
        this.callActivitySubProcess = new CallActivitySubProcess();
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.subProcessType = SubProcessType;
        this.billSourceType = BillSourceType;
        this.radioGroupProcessTypeData = [
            { value: "Specified", name: "指定子流程" },
            { value: "Dynamic", name: "动态子流程" },
        ];
        this.radioGroupBillSourceData = [
            { value: BillSourceType.InheritParent, name: '与父流程相同' },
            { value: BillSourceType.AutoCreation, name: '自动生成下游单据' },
            { value: BillSourceType.VariablesExpression, name: '变量表达式' },
        ];
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v) {
            this.callActivitySubProcess = v;
            // 为子流程类型赋值
            if (this.callActivitySubProcess.calledElement == null || this.callActivitySubProcess.calledElement == "") {
                if (this.callActivitySubProcess.calledBizDefKey == null || this.callActivitySubProcess.calledBizDefKey == "") {
                    this.callActivitySubProcess.subProcessType = SubProcessType.Specified;
                }
                else {
                    this.callActivitySubProcess.subProcessType = SubProcessType.Dynamic;
                }
            }
            else {
                this.callActivitySubProcess.subProcessType = SubProcessType.Specified;
            }
            // 为单据来源类型赋值
            if (this.callActivitySubProcess.inheritBizDataId === true) {
                this.callActivitySubProcess.billSourceType = BillSourceType.InheritParent;
            }
            else if (this.callActivitySubProcess.inheritBizDataId === false && this.callActivitySubProcess.useAutoCreationData === false) {
                this.callActivitySubProcess.billSourceType = BillSourceType.VariablesExpression;
            }
            else if (this.callActivitySubProcess.inheritBizDataId === false && this.callActivitySubProcess.useAutoCreationData === true) {
                this.callActivitySubProcess.billSourceType = BillSourceType.AutoCreation;
            }
            this.getProcessDefKey(this.callActivitySubProcess.calledElement);
            this.getFlowForm(this.callActivitySubProcess.calledBizDefKey);
            this.getAifProcessName(this.callActivitySubProcess.aifProcessCode);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (this.validator()) {
            /** @type {?} */
            const object = { value: this.callActivitySubProcess, parameters: null };
            this.submitModal.emit(object);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} args
     * @return {?}
     */
    processConfirm(args) {
        if (args) {
            this.callActivitySubProcess.calledElement = args.id;
            this.callActivitySubProcess.calledElementName = args.name;
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    processTypeChange(val) {
        console.log(val);
        if (val == SubProcessType.Specified) {
            this.callActivitySubProcess.calledBizDefKey = null;
            this.callActivitySubProcess.calledBizDefName = null;
        }
        else if (val == SubProcessType.Dynamic) {
            this.callActivitySubProcess.calledElement = null;
            this.callActivitySubProcess.calledElementName = null;
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    billSourceChange(val) {
        console.log(val);
        if (val == BillSourceType.InheritParent) {
            this.callActivitySubProcess.inheritBizDataId = true;
            this.callActivitySubProcess.useAutoCreationData = false;
        }
        else if (val == BillSourceType.AutoCreation) {
            this.callActivitySubProcess.inheritBizDataId = false;
            this.callActivitySubProcess.useAutoCreationData = true;
        }
        else if (val == BillSourceType.VariablesExpression) {
            this.callActivitySubProcess.inheritBizDataId = false;
            this.callActivitySubProcess.useAutoCreationData = false;
        }
    }
    /**
     * @return {?}
     */
    selectProcess() {
        this.openProcHelp().subscribe((/**
         * @param {?} rte
         * @return {?}
         */
        (rte) => {
            if (rte == null) {
                this.notify.warning("请选中一条生单流程");
                return;
            }
            this.callActivitySubProcess.aifProcessCode = rte.code;
            this.callActivitySubProcess.aifProcessName = rte.name;
        }));
    }
    /**
     * @return {?}
     */
    clearProcess() {
        this.callActivitySubProcess.aifProcessCode = null;
        this.callActivitySubProcess.aifProcessName = null;
    }
    /**
     * @return {?}
     */
    openProcHelp() {
        /** @type {?} */
        const cmpF = this.cfr.resolveComponentFactory(ProcessListHelpComponent);
        /** @type {?} */
        const cmpR = cmpF.create(this.inj, []);
        cmpR.instance.editorParams = this.editorParams;
        /** @type {?} */
        const modalRef = this.modalService.show(cmpR, {
            title: "生单流程",
            width: 1250,
            height: 500,
            resizable: true,
            buttons: [
                {
                    text: "确定",
                    cls: "btn btn-primary",
                    handle: (/**
                     * @param {?} evt
                     * @return {?}
                     */
                    (evt) => {
                        cmpR.instance.clickOk(evt);
                        modalRef.close();
                    })
                },
                {
                    text: "取消",
                    cls: "btn btn-secondary",
                    handle: (/**
                     * @param {?} evt
                     * @return {?}
                     */
                    (evt) => {
                        cmpR.instance.clickCancel(evt);
                        modalRef.close();
                    })
                }
            ],
            closed: (/**
             * @return {?}
             */
            () => {
                modalRef.dialog.destroy();
            })
        });
        cmpR.instance.modalRef = modalRef;
        return cmpR.instance.procEmitter.asObservable();
    }
    /**
     * @param {?} args
     * @return {?}
     */
    clearProcessDef(args) {
        this.callActivitySubProcess.calledElement = '';
        this.callActivitySubProcess.calledElementName = '';
    }
    /**
     * @param {?} args
     * @return {?}
     */
    flowFormConfirm(args) {
        if (args) {
            this.callActivitySubProcess.calledBizDefKey = args.id;
            this.callActivitySubProcess.calledBizDefName = args.name;
        }
    }
    /**
     * @param {?} args
     * @return {?}
     */
    clearFlowForm(args) {
        this.callActivitySubProcess.calledBizDefKey = '';
        this.callActivitySubProcess.calledBizDefName = '';
    }
    /**
     * @return {?}
     */
    setBizDataId() {
        this.showExprHelp();
    }
    /**
     * @private
     * @return {?}
     */
    showExprHelp() {
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.designerState.procInstContext.length > 0) {
            for (const variable of this.designerState.procInstContext) {
                context.push(variable);
                // this.expr.addContext(variable);
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            for (const variable of this.designerState.formalParameterContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (this.designerState.participantContext.length > 0) {
            for (const variable of this.designerState.participantContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            for (const variable of this.designerState.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.addExpressionText(this.callActivitySubProcess.bizDataId);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        (expressioninfo) => {
            this.callActivitySubProcess.bizDataId = expressioninfo;
        }));
    }
    /**
     * @param {?} bool
     * @return {?}
     */
    valueChange(bool) {
        if (bool) {
            this.callActivitySubProcess.bizDataId = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if (!this.callActivitySubProcess.inheritBizDataId && !this.callActivitySubProcess.useAutoCreationData && !this.callActivitySubProcess.bizDataId) {
            this.message.warning('当子流程与父流程单据不一致时，请设置子流程单据内码！');
            return false;
        }
        return true;
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    getProcessDefKey(key) {
        /** @type {?} */
        let url = this.util.getProcDefKeyWebApi();
        if (key) {
            url += `/${key}`;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                this.callActivitySubProcess.calledElementName = re.name;
            }));
        }
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    getFlowForm(id) {
        /** @type {?} */
        let url = this.util.getFlowFormWebApi();
        if (id) {
            url += `/${id}`;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                this.callActivitySubProcess.calledBizDefName = re.name;
            }));
        }
    }
    /**
     * @param {?} code
     * @return {?}
     */
    getAifProcessName(code) {
        if (code != null && code != "") {
            this.http.request("GET", `/api/runtime/aif/v1.0/rtbillcreationprocess/getname/${code}`, { responseType: 'text' }).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                this.callActivitySubProcess.aifProcessName = res;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    //todo 确定异常结构, 目前采用兼容取值方式
                    this.message.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                }), 300);
                throw err;
            }));
        }
    }
}
CallActivitySubProcess2Component.decorators = [
    { type: Component, args: [{
                selector: 'lib-call-activity-sub-process2',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section>\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">\u9009\u62E9\u5B50\u6D41\u7A0B</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <div class=\"h-100\">\r\n          <div class=\"farris-form form-inline farris-form-inline\">\r\n            <div class=\"farris-group-wrap mt-1\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u5B50\u6D41\u7A0B\u7C7B\u578B</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <!-- <farris-combo-list #comboProcessType\r\n                    [(ngModel)]=\"callActivitySubProcess&&callActivitySubProcess.subProcessType\"\r\n                    [idField]=\"comboProcessTypeIdField\" [valueField]=\"comboProcessTypeValueField\"\r\n                    [textField]=\"comboProcessTypeTextField\" [data]=\"comboProcessTypeData\"\r\n                    (valueChange)=\"processTypeChange($event)\" [enableClear]=\"false\" [editable]=\"false\">\r\n                  </farris-combo-list> -->\r\n                  <farris-radiogroup #radioGroupProcessType\r\n                    [(ngModel)]=\"callActivitySubProcess&&callActivitySubProcess.subProcessType\" [horizontal]=\"false\"\r\n                    [data]=\"radioGroupProcessTypeData\" (changeValue)=\"processTypeChange($event)\">\r\n                  </farris-radiogroup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\" *ngIf=\"callActivitySubProcess.subProcessType==subProcessType.Dynamic\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u6D41\u7A0B\u5206\u7C7B</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <wf-bizprocess-lookup [title]=\"'\u6D41\u7A0B\u5206\u7C7B'\" [sourceType]=\"'flowform'\"\r\n                    [displayTxt]=\"callActivitySubProcess.calledBizDefName\" (afterConfirm)=\"flowFormConfirm($event)\"\r\n                    (clear)=\"clearFlowForm($event)\">\r\n                  </wf-bizprocess-lookup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\" *ngIf=\"callActivitySubProcess.subProcessType==subProcessType.Specified\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u6D41\u7A0B\u5B9A\u4E49</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <wf-bizprocess-lookup [title]=\"'\u6D41\u7A0B\u5B9A\u4E49'\" [displayTxt]=\"callActivitySubProcess.calledElementName\"\r\n                    (afterConfirm)=\"processConfirm($event)\" (clear)=\"clearProcessDef($event)\">\r\n                  </wf-bizprocess-lookup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section class=\"\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">\u5355\u636E\u6765\u6E90</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <div class=\"h-100\">\r\n          <div class=\"farris-form form-inline farris-form-inline\">\r\n\r\n            <div class=\"farris-group-wrap mt-1\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u5355\u636E\u6765\u6E90</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-radiogroup #radioGroupBillSource\r\n                    [(ngModel)]=\"callActivitySubProcess&&callActivitySubProcess.billSourceType\" [horizontal]=\"false\"\r\n                    [data]=\"radioGroupBillSourceData\" (changeValue)=\"billSourceChange($event)\">\r\n                  </farris-radiogroup>\r\n                  <!-- <farris-combo-list #comboBillSource\r\n                    [(ngModel)]=\"callActivitySubProcess&&callActivitySubProcess.billSourceType\"\r\n                    [idField]=\"comboBillSourceIdField\" [valueField]=\"comboBillSourceValueField\"\r\n                    [textField]=\"comboBillSourceTextField\" [data]=\"comboBillSourceData\"\r\n                    (valueChange)=\"billSourceChange($event)\" [enableClear]=\"false\" [editable]=\"false\">\r\n                  </farris-combo-list> -->\r\n                </div>\r\n                <div class=\"farris-feedback valid-feedback\"></div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\"\r\n              *ngIf=\"callActivitySubProcess.billSourceType==billSourceType.AutoCreation\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u751F\u5355\u6D41\u7A0B</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <input-group [ngModel]=\"callActivitySubProcess&&callActivitySubProcess.aifProcessName\"\r\n                    [editable]=\"false\" (clickHandle)=\"selectProcess()\" [groupText]=\"groupIcon\" (clear)=\"clearProcess()\">\r\n                  </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\"\r\n              *ngIf=\"callActivitySubProcess.billSourceType==billSourceType.VariablesExpression\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u5355\u636E\u5185\u7801</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <input-group [ngModel]=\"callActivitySubProcess.bizDataId\" [enableClear]=\"false\"\r\n                    [ngModel]=\"callActivitySubProcess.bizDataId\" name=\"bizDataId\" [editable]=\"false\"\r\n                    (clickHandle)=\"setBizDataId()\" [groupText]=\"groupIcon\">\r\n                  </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>"
            }] }
];
/** @nocollapse */
CallActivitySubProcess2Component.ctorParameters = () => [
    { type: NotifyService },
    { type: BsModalService },
    { type: MessagerService },
    { type: ProcessDeUtil },
    { type: HttpService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
CallActivitySubProcess2Component.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    editorParams: [{ type: Input }],
    value: [{ type: Input }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    radioGroupProcessType: [{ type: ViewChild, args: ["radioGroupProcessType",] }],
    radioGroupBillSource: [{ type: ViewChild, args: ["radioGroupBillSource",] }]
};
if (false) {
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.cls;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.editorParams;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.closeModal;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.submitModal;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.modalFooter;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.modalConfig;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.callActivitySubProcess;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.groupIcon;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.subProcessType;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.billSourceType;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.radioGroupProcessType;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.radioGroupProcessTypeData;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.radioGroupBillSource;
    /** @type {?} */
    CallActivitySubProcess2Component.prototype.radioGroupBillSourceData;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.message;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.util;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.http;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.designerState;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    CallActivitySubProcess2Component.prototype.inj;
}
export class CallActivitySubProcess2Converter {
    constructor() { }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && (data.calledBizDefKey || data.calledElement)) {
            return '（已设置）';
        }
        return '（未设置）';
    }
}
//# sourceMappingURL=data:application/json;base64,