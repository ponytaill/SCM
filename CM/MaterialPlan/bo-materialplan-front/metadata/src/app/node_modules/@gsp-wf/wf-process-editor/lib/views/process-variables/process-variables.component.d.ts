import { OnInit, EventEmitter, TemplateRef, Injector, ComponentFactoryResolver } from '@angular/core';
import { TypeConverter } from '@farris/ui-property-panel';
import { ProcessVariable } from './process-variable.entity';
import { DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExpressionService } from '@gsp-svc/expression';
import { RowEditParam } from '@farris/ui-datagrid/lib/types';
export declare class ProcessVariablesComponent implements OnInit {
    private message;
    private resolver;
    private injector;
    private modalService;
    private uistate;
    private expr;
    cls: string;
    variableSetting: boolean;
    closeModal: EventEmitter<any>;
    submitModal: EventEmitter<any>;
    variableSetEmitter: EventEmitter<any>;
    value: Array<ProcessVariable>;
    editorParams: any;
    modalFooter: TemplateRef<any>;
    grid: DatagridComponent;
    private basicTypes;
    private tags;
    columns: ({
        field: string;
        width: number;
        title: string;
        sortable: boolean;
        editor: {
            type: string;
            options: {
                valueField?: undefined;
                textField?: undefined;
                data?: undefined;
                idField?: undefined;
                panelHeight?: undefined;
                showClear?: undefined;
                selectChange?: undefined;
                clear?: undefined;
            };
        };
        validators: {
            type: string;
            messager: string;
        }[];
        formatter?: undefined;
        showTips?: undefined;
    } | {
        field: string;
        width: number;
        title: string;
        sortable: boolean;
        formatter: {
            type: string;
            options: {
                valueField: string;
                textField: string;
                data: {
                    value: string;
                    text: string;
                }[];
            };
        };
        editor: {
            type: string;
            options: {
                valueField: string;
                textField: string;
                data: {
                    value: string;
                    text: string;
                }[];
                idField: string;
                panelHeight: string;
                showClear: boolean;
                selectChange?: undefined;
                clear?: undefined;
            };
        };
        validators: {
            type: string;
            messager: string;
        }[];
        showTips?: undefined;
    } | {
        field: string;
        width: number;
        title: string;
        showTips: boolean;
        editor: {
            type: string;
            options: {
                valueField?: undefined;
                textField?: undefined;
                data?: undefined;
                idField?: undefined;
                panelHeight?: undefined;
                showClear?: undefined;
                selectChange?: undefined;
                clear?: undefined;
            };
        };
        sortable?: undefined;
        validators?: undefined;
        formatter?: undefined;
    } | {
        field: string;
        width: number;
        title: string;
        sortable: boolean;
        formatter: {
            type: string;
            options: {
                valueField: string;
                textField: string;
                data: {
                    value: string;
                    text: string;
                }[];
            };
        };
        editor: {
            type: string;
            options: {
                valueField: string;
                textField: string;
                data: {
                    value: string;
                    text: string;
                }[];
                idField: string;
                panelHeight: string;
                selectChange: (e: any) => void;
                clear: (e: any) => void;
                showClear?: undefined;
            };
        };
        validators?: undefined;
        showTips?: undefined;
    })[];
    modalConfig: {
        title: string;
        width: number;
        height: number;
        showButtons: boolean;
    };
    constructor(message: MessagerService, resolver: ComponentFactoryResolver, injector: Injector, modalService: BsModalService, uistate: ProcessDesignerUIState, expr: ExpressionService);
    ngOnInit(): void;
    add(): void;
    delete(): void;
    clickOK(): void;
    clickCancel(): void;
    beforeEdit: (param: RowEditParam) => import("rxjs").Observable<boolean>;
    endEdit(data: any): void;
    valueEdit(e: any): void;
    private editConstant;
    private editExpression;
    private editComponent;
    private validator;
    private IsMatchVariableNameRules;
}
export declare class ProcessVariablesConverter implements TypeConverter {
    constructor();
    convertTo(data: any[]): string;
}
