/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { forkJoin } from 'rxjs';
import { MessagerService } from '@farris/ui-messager';
export class TaskService {
    /**
     * @param {?} httpSvc
     * @param {?} message
     */
    constructor(httpSvc, message) {
        this.httpSvc = httpSvc;
        this.message = message;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    getUsersByIds(ids) {
        /** @type {?} */
        var pathUrl = '/api/runtime/sys/v1.0/users';
        return forkJoin(ids.map(id => this.httpSvc.get(pathUrl + `/${id}` + `?mode=0002`)));
    }
    /**
     * 获取工作项操作列表
     * @param {?} workItemId
     * @return {?}
     */
    getWorkItemActions(workItemId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/actions`;
        return this.httpSvc.get(url);
    }
    /**
     * 执行审批操作
     * @param {?} context 执行审批上下文
     * @return {?}
     */
    complete(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/complete`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 执行审批预解析
     * @param {?} context 执行审批上下文
     * @return {?}
     */
    completeSimulate(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/complete-simulation`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 获取跳转活动信息
     * @param {?} workItemId 工作项Id
     * @param {?} action 动作编号
     * @return {?}
     */
    getDestinationScope(workItemId, action) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/nextNodes/${action}`;
        return this.httpSvc.get(url);
    }
    /**
     * 根据节点ID获取指定参与者的结果
     * @param {?} workItemId
     * @param {?} nodeId 说明：nodeIds=["node1","node2",···]
     * @return {?} 指派信息的数组 re: FlowNodeInfo[]
     */
    getSimulationAssigneeInfo(workItemId, nodeId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/simulation-assigneeInfo?nodeIds=[${nodeId}]`;
        return this.httpSvc.get(url);
    }
    /**
     * 执行征询、知会
     * @param {?} context 上下文
     * @return {?}
     */
    addSign(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/counterSignAdd`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 已阅
     * @param {?} context 参数
     * @return {?}
     */
    readTask(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/read`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 查询单据信息
     * @param {?} workItemId 工作项Id
     * @return {?}
     */
    getAppInfo(workItemId) {
        /** @type {?} */
        const formParUrl = `/api/runtime/wf/v1.0/workItems/${workItemId}/formInfo`;
        return this.httpSvc.get(formParUrl);
    }
    /**
     * 获取指派信息
     * @param {?} taskId 工作项Id
     * 此接口只返回一个AssignInfo类序列化后的信息，不是多个
     * @return {?}
     */
    getAssigneeInfo(taskId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${taskId}/assigneeInfo`;
        return this.httpSvc.get(url);
    }
    /**
     * 获取加签移交范围设置
     * @param {?} workItemId
     * @param {?} actionCode
     * @return {?}
     */
    getOrganizationScope(workItemId, actionCode) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/organizationScope/${actionCode}`;
        return this.httpSvc.get(url);
    }
    /**
     * 根据流程实例ID和任务状态办理任务
     * @param {?} procInstId 流程实例id
     * @param {?} state 任务状态 2或5
     * @return {?}
     */
    getTaskByProcInstId(procInstId, state) {
        /** @type {?} */
        const url = `/api/runtime/task/v1.0/tasks/processInstanceId?procInstId=${procInstId}&state=${state}`;
        return this.httpSvc.get(url);
    }
    /**
     * 根据workitemID获取任务实体
     * @param {?} workItemId
     * @return {?}
     */
    getTaskByWorkItemId(workItemId) {
        /** @type {?} */
        const url = `/api/runtime/task/v1.0/tasks/sourceId/${workItemId}`;
        return this.httpSvc.get(url);
    }
    /**
     * 根据工作项ID指派任务
     * @param {?} assigneesPa 指派参数
     * @return {?}
     */
    assignNextUsersByWorkItemId(assigneesPa) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/assignUser`;
        return this.httpSvc.post(url, assigneesPa);
    }
    /**
     * 取回
     * @param {?} context
     * @return {?}
     */
    retrieve(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/retrieve`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 任务移交
     * @param {?} transferContext
     * @return {?}
     */
    transfer(transferContext) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/transfer`;
        return this.httpSvc.post(url, transferContext);
    }
    /**
     * 任务评论
     * @param {?} commentContext
     * @return {?}
     */
    comment(commentContext) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/comment`;
        return this.httpSvc.post(url, commentContext);
    }
    /**
     * 领用任务
     * @param {?} taskId 工作项Id
     * @param {?} comment
     * @return {?}
     */
    claim(taskId, comment) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/claim`;
        /** @type {?} */
        const options = {
            workItemId: taskId,
            comment: comment
        };
        return this.httpSvc.post(url, options);
    }
    /**
     * 取消领用
     * @param {?} taskId 任务Id
     * @param {?} comment
     * @return {?}
     */
    unClaim(taskId, comment) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/unclaim`;
        /** @type {?} */
        const options = {
            workItemId: taskId,
            comment: comment
        };
        return this.httpSvc.post(url, options);
    }
    /**
     * 报错提示
     * @param {?} error
     * @return {?}
     */
    error(error) {
        if (error && error.error && error.error.Message) {
            /** @type {?} */
            var message = error.error.Message;
            this.message.warning(message);
        }
    }
    /**
     * 启动流程接口
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    startProcess(payload) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/startProcess`;
        return this.httpSvc.post(url, payload);
    }
    /**
     * 启动流程预解析
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    startProcessSimulate(payload) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/startProcess-simulation`;
        return this.httpSvc.post(url, payload);
    }
    /**
     * 取消提交
     * @param {?} param 参数
     * @return {?}
     */
    cancelSubmit(param) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/cancelSubmit`;
        return this.httpSvc.post(url, param);
    }
    /**
     * @return {?}
     */
    static newId() {
        /** @type {?} */
        const S4 = () => (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
    }
    /**
     * @return {?}
     */
    getCommentList() {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/commonComments`;
        return this.httpSvc.get(url);
    }
    /**
     * @return {?}
     */
    addComment() {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/commonComments`;
        return this.httpSvc.post(url, {});
    }
    /**
     * 获取任务中心配置项
     * @param {?} code 配置项的Code
     * @param {?=} ownerType
     * @param {?=} ownerId
     * @return {?}
     */
    getTaskCenterConfigByCode(code, ownerType, ownerId) {
        /** @type {?} */
        let url = `/api/runtime/task/v1.0/task-center-setting/code?code=${code}`;
        ownerType && (url += `&ownerType=${ownerType}`);
        ownerId && (url += `&ownerId=${ownerId}`);
        return this.httpSvc.get(url);
    }
    /**
     * 添加用户级别自定义配置
     * @param {?} code 配置项编号
     * @param {?} currentValue
     * @return {?}
     */
    addTaskCenterConfig(code, currentValue) {
        /** @type {?} */
        let url = `/api/runtime/task/v1.0/task-center-setting/add?configCode=${code}&currentValue=${currentValue}`;
        return this.httpSvc.post(url, null);
    }
    /**
     * 获取全部用户级别配置
     * @return {?}
     */
    getAllUserConfig() {
        /** @type {?} */
        let url = `/api/runtime/task/v1.0/task-center-setting/all`;
        return this.httpSvc.get(url);
    }
    /**
     * 真正上传附件
     * @param {?} files
     * @return {?}
     */
    uploadAttachment(files) {
        /** @type {?} */
        let url = `/api/runtime/dfs/v1.0/doc/commit`;
        return this.httpSvc.put(url, files);
    }
    /**
     * 删除附件
     * @param {?} fileDeleteEntity
     * @return {?}
     */
    deleteAttachment(fileDeleteEntity) {
        /** @type {?} */
        let url = `/api/runtime/dfs/v1.0/doc`;
        return this.httpSvc.delete(url, fileDeleteEntity);
    }
    /**
     * 签名图片，附件相关
     * @param {?} gspDocUploadEntity
     * @return {?}
     */
    uploadSignature(gspDocUploadEntity) {
        /** @type {?} */
        let url = `/api/runtime/dfs/v1.0/doc`;
        /** @type {?} */
        let header = this.httpSvc.setHeader({
            body: gspDocUploadEntity,
            responseType: 'text'
        });
        return this.httpSvc.request('Post', url, header);
    }
    /**
     * 创建内码
     * @return {?}
     */
    createNM() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            /** @type {?} */
            const r = Math.random() * 16 | 0;
            /** @type {?} */
            const v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
    /**
     * 获取当前用户信息
     * @return {?}
     */
    getUserInfo() {
        /** @type {?} */
        let url = `/api/runtime/sys/v1.0/userinfos?infoType=user`;
        return this.httpSvc.get(url);
    }
    /**
     * 获取用户所有签名
     * @param {?} userId
     * @return {?}
     */
    getUserSign(userId) {
        /** @type {?} */
        let url = `/api/runtime/dfs/v1.0/formdoc/fileinfo/form?formid=${userId}&rootid=taskcentersignature`;
        return this.httpSvc.get(url);
    }
    /**
     * 解析文件类型，给出缩略图
     * @param {?} attachmentInfo
     * @return {?}
     */
    createItem(attachmentInfo) {
        /** @type {?} */
        var pos = attachmentInfo.fileName.lastIndexOf(".");
        /** @type {?} */
        var type = attachmentInfo.fileName.substring(pos + 1);
        type = (type == '' ? 'Default' : type.toLowerCase());
        /** @type {?} */
        var docLib = 'doc-docx-htm-html-js-pdf-ppt-pptx-rar-zip-txt-xls-xlsx';
        /** @type {?} */
        var videoLib = 'wav-aif-aiff-au-mp1-mp2-mp3-ra-rm-ram-mid-rmi';
        /** @type {?} */
        var audioLib = 'avi-rm-rmvb-mpeg-mpg-dat-mov-qt-asf-wm-mp4';
        /** @type {?} */
        var imgLib = 'webp-baibmp-dupcx-tif-gif-jpeg-tga-exif-fpx-svg-psd-cdr-pcd-dxf-ufo-eps-ai-png-hdri-raw-wmf-flic-emf-ico-jpg';
        if (docLib.indexOf(type) >= 0) {
            type = type.toLowerCase();
        }
        else if (videoLib.indexOf(type) >= 0) {
            type = 'video';
        }
        else if (audioLib.indexOf(type) >= 0) {
            type = 'audio';
        }
        else if (imgLib.indexOf(type) >= 0) {
            type = 'picture';
        }
        else {
            type = 'default';
        }
        return type;
    }
    /**
     * 注册主题，并获取当前主题唯一标识token
     * @param {?} subjectCode 主题编码，非唯一标识，token为唯一标识
     * @param {?} token 主题唯一标识。
     * @return {?} 主题的唯一标识。
     */
    subjectRegister(subjectCode, token) {
        return ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.subjectRegister(subjectCode, { funcId: token });
    }
    /**
     * 通过某个token发送消息
     * @param {?} subjectToken 主题唯一的token标识
     * @param {?} message 要发送的消息
     * @return {?}
     */
    subjectNotify(subjectToken, message) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.notify(subjectToken, message);
    }
    /**
     * 添加观察者，并监听消息
     * @param {?} subjectToken 主题token
     * @param {?} observerToken 当前监听主题的观察者唯一标识token。此处固定
     * @param {?} handler 监听到消息后执行的动作
     * @return {?}
     */
    subjectResponse(subjectToken, observerToken, handler) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.response(subjectToken, observerToken, handler);
    }
    /**
     * 获取催办模拟结果
     * @param {?} context 参数
     * @return {?}
     */
    urgeHandleSimulate(context) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/processInstances/getUrgeHandleInfo`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 执行催办
     * @param {?} context 参数
     * @return {?}
     */
    urgeHandle(context) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/processInstances/urgeHandle`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 批量数字签名
     * @param {?} context 参数
     * @return {?}
     */
    batchVerifySigned(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/batchVerifySigned`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 获取用户帮助前端配置
     * @return {?}
     */
    getWfUserHelpConfig() {
        /** @type {?} */
        const url = `/platform/runtime/wf/web/wf-user-help/config.json?v=` + new Date().getTime();
        return this.httpSvc.get(url);
    }
    /**
     * 获取加签配置
     * @param {?} workItemId
     * @return {?}
     */
    getAdhocConfig(workItemId) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/workItems/${workItemId}/adhocConfig/AddSignBehind`;
        return this.httpSvc.get(url);
    }
    /**
     * 加签提交
     * @param {?} payload
     * @return {?}
     */
    adhocAssignee(payload) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/workItems/adhocAssignee`;
        return this.httpSvc.post(url, payload);
    }
    /**
     * 取消征询
     * @param {?} payload
     * @return {?}
     */
    cancelConsult(payload) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/workItems/cancelConsult`;
        return this.httpSvc.post(url, payload);
    }
}
TaskService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TaskService.ctorParameters = () => [
    { type: HttpService },
    { type: MessagerService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaskService.prototype.httpSvc;
    /**
     * @type {?}
     * @private
     */
    TaskService.prototype.message;
}
//# sourceMappingURL=data:application/json;base64,