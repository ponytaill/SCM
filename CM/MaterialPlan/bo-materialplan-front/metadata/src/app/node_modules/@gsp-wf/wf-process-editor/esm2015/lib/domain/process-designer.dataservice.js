/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { ProcessDeUtil } from './process-de-util';
export class ProcessDesignerDataService {
    /**
     * @param {?} http
     * @param {?} util
     */
    constructor(http, util) {
        this.http = http;
        this.util = util;
    }
    // 基于流程分类ID获取流程分类信息
    /**
     * @param {?} id
     * @return {?}
     */
    GetFlowFormbyId(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getFlowFormWebApi();
            url += `/${id}`;
            return this.http.get(url);
        }
    }
    // 基于流程分类获取参数列表
    /**
     * @param {?} id
     * @return {?}
     */
    getParametersbyFlowFormKey(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getFormalParametersWebApi();
            url += `?flowFormKey=${id}`;
            return this.http.get(url);
        }
    }
    // 基于流程分类获取流程构件
    /**
     * @param {?} id
     * @return {?}
     */
    getComponentsbyFlowformkey(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getBizComponentsWebApi();
            url += `/query?param=` + encodeURIComponent(`{"flowFormKey":"${id}"}`);
            return this.http.get(url);
        }
    }
    // 基于流程分类获取表单定义
    /**
     * @param {?} id
     * @return {?}
     */
    getExecuteFormbyFlowFormKey(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getExcuteFormsWebApi();
            url += `?flowFormKey=${id}`;
            return this.http.get(url);
        }
    }
    /**
     * 基于流程分类Id获取业务活动
     * @param {?} ffId 流程分类id
     * @return {?}
     */
    getBizActivities(ffId) {
        if (ffId) {
            /** @type {?} */
            const url = this.util.getBizActivityWebApi(ffId);
            return this.http.get(url);
            // .pipe(
            //     map((re: any) => re),
            //     mergeMap((activities: any[]) => {
            //         if (activities && activities.length > 0) {
            //             return forkJoin(activities.map(activity => {
            //                 return forkJoin(this.getBizActivityComponents(ffId, activity.id),
            //                     this.getBizActivityActions(activity.id))
            //                     .pipe(
            //                         map((re: any[]) => {
            //                             activity.components = re[0];
            //                             activity.actions = re[1];
            //                             return activity;
            //                         }));
            //             }));
            //         } else {
            //             return of([]);
            //         }
            //     })
            // );
        }
    }
    /**
     * 基于流程分类ID获取自定义动作
     * @param {?} formId 流程分类ID
     * @return {?}
     */
    getCustomizeActions(formId) {
        if (formId) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/customizeAction?flowFormKey=${formId}`;
            return this.http.get(url);
        }
    }
    /**
     * 基于业务活动id获取业务活动构件
     * @private
     * @param {?} flowFormId
     * @param {?} id 业务活动id
     * @return {?}
     */
    getBizActivityComponents(flowFormId, id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getBizComponentsWebApi();
            url += `/query?param=` + encodeURIComponent(`{"flowFormKey":"${flowFormId}","owner":"${id}","ownerType":"Activity"}`);
            return this.http.get(url);
        }
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    getBizActivityActions(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getApprovalActionWebApi();
            url += `?bizActivityId=${id}`;
            return this.http.get(url);
        }
    }
    // 基于ID获取BE
    /**
     * @param {?} id
     * @return {?}
     */
    getBusinessEntitybyId(id) {
        if (id) {
            // let url = this.util.getMetaDataRUWebApi();
            // url += id;
            // const url = `/api/runtime/lcm/v1.0/bef/handledBeMeta?beId=${id}`;
            /** @type {?} */
            const url = `/api/runtime/lcm/v1.0/bef/expression?beId=${id}`;
            return this.http.get(url);
        }
    }
    /**
     * 基于流程定义Key获取上下文
     * @param {?} key 流程定义key
     * @return {?}
     */
    getProcContentbyKey(key) {
        if (key) {
            /** @type {?} */
            let url = this.util.getProcessDefinitionWebApi();
            url += `/bpmnModel?procDefKey=${key}`;
            return this.http.get(url);
        }
    }
    /**
     * 基于流程定义Key获取上下文
     * @param {?} id
     * @return {?}
     */
    getRTProcContentbyId(id) {
        if (id) {
            /** @type {?} */
            let url = this.util.getRTProcessDefinitionWebApi();
            url += `/${id}/bpmnModel`;
            return this.http.get(url);
        }
    }
    /**
     * 保存流程
     * @param {?} content
     * @param {?} processInfo
     * @param {?} state
     * @return {?}
     */
    saveProcess(content, processInfo, state) {
        if (content) {
            /** @type {?} */
            const postData = {
                organization: processInfo.procOrg ? processInfo.procOrg.orgId : '',
                organizationName: processInfo.procOrg ? processInfo.procOrg.orgName : '',
                accessLevel: processInfo.accessLevel,
                procContent: content,
                state
            };
            /** @type {?} */
            const url = this.util.getProcessDefinitionWebApi();
            return this.http.post(url, JSON.stringify(postData));
        }
    }
    /**
     * @param {?} info
     * @return {?}
     */
    auditProcessDef(info) {
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/dtProcDefs/auditProcessDef';
        this.http.post(url, info).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => { }));
    }
    /**
     * 发布流程
     * @param {?} content
     * @return {?}
     */
    deployProcess(content) {
        if (content) {
            /** @type {?} */
            const postData = {
                procDefContent: content
            };
            /** @type {?} */
            const url = this.util.deployWebApi();
            return this.http.post(url, JSON.stringify(postData));
        }
    }
    /**
     * @param {?} content
     * @param {?} procDefId
     * @return {?}
     */
    saveRTProcess(content, procDefId) {
        if (content) {
            /** @type {?} */
            const postData = {
                procDefContent: content
            };
            /** @type {?} */
            let url = this.util.getRTProcessDefinitionWebApi();
            url += `/${procDefId}/adjust`;
            return this.http.post(url, JSON.stringify(postData));
        }
    }
    /**
     * @param {?} content
     * @param {?} rtProcessInfo
     * @return {?}
     */
    syncDtProcess(content, rtProcessInfo) {
        if (content) {
            /** @type {?} */
            const postData = {
                organization: rtProcessInfo.procOrg ? rtProcessInfo.procOrg.orgId : '',
                organizationName: rtProcessInfo.procOrg ? rtProcessInfo.procOrg.orgName : '',
                accessLevel: rtProcessInfo.accessLevel || 'public',
                procContent: content,
                state: 0
            };
            /** @type {?} */
            const url = '/api/runtime/wf/v1.0/dtProcDefs';
            return this.http.post(url, JSON.stringify(postData));
        }
    }
}
ProcessDesignerDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ProcessDesignerDataService.ctorParameters = () => [
    { type: HttpService },
    { type: ProcessDeUtil }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerDataService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerDataService.prototype.util;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1kZXNpZ25lci5kYXRhc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvZG9tYWluL3Byb2Nlc3MtZGVzaWduZXIuZGF0YXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBS2xELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQU1sRCxNQUFNLE9BQU8sMEJBQTBCOzs7OztJQUNuQyxZQUNZLElBQWlCLEVBQ2pCLElBQW1CO1FBRG5CLFNBQUksR0FBSixJQUFJLENBQWE7UUFDakIsU0FBSSxHQUFKLElBQUksQ0FBZTtJQUFJLENBQUM7Ozs7OztJQUdwQyxlQUFlLENBQUMsRUFBVTtRQUN0QixJQUFJLEVBQUUsRUFBRTs7Z0JBQ0EsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDdkMsR0FBRyxJQUFJLElBQUksRUFBRSxFQUFFLENBQUM7WUFDaEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM3QjtJQUNMLENBQUM7Ozs7OztJQUVELDBCQUEwQixDQUFDLEVBQVU7UUFDakMsSUFBSSxFQUFFLEVBQUU7O2dCQUNBLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLHlCQUF5QixFQUFFO1lBQy9DLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxFQUFFLENBQUM7WUFDNUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM3QjtJQUNMLENBQUM7Ozs7OztJQUVELDBCQUEwQixDQUFDLEVBQVU7UUFDakMsSUFBSSxFQUFFLEVBQUU7O2dCQUNBLEdBQUcs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QUMsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztTQUN4RDtJQUNMLENBQUM7OztZQTdMSixVQUFVOzs7O1lBVkYsV0FBVztZQUtYLGFBQWE7Ozs7Ozs7SUFRZCwwQ0FBeUI7Ozs7O0lBQ3pCLDBDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSAnQGVjcC1jYWYvY2FmLWNvbW1vbic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBtYXAsIG1lcmdlTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBmb3JrSm9pbiB9IGZyb20gJ3J4anMvb2JzZXJ2YWJsZS9mb3JrSm9pbic7XHJcbmltcG9ydCB7IG9mIH0gZnJvbSAncnhqcy9vYnNlcnZhYmxlL29mJztcclxuaW1wb3J0IHsgUHJvY2Vzc0RlVXRpbCB9IGZyb20gJy4vcHJvY2Vzcy1kZS11dGlsJztcclxuaW1wb3J0IHsgQXVkaXRQcm9jZXNzRGVmSW5mbyB9IGZyb20gJy4vZW50aXRpZXMvYXVkaXQtcHJvY2Vzc0RlZi1pbmZvJztcclxuaW1wb3J0IHsgUHJvY2Vzc0luZm8gfSBmcm9tICcuLi9tb2RlbC9wcm9jZXNzLWluZm8nO1xyXG5pbXBvcnQgeyBSVFByb2Nlc3NJbmZvIH0gZnJvbSAnLi4vbW9kZWwvcnQtcHJvY2Vzcy1pbmZvJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFByb2Nlc3NEZXNpZ25lckRhdGFTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgaHR0cDogSHR0cFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSB1dGlsOiBQcm9jZXNzRGVVdGlsKSB7IH1cclxuXHJcbiAgICAvLyDln7rkuo7mtYHnqIvliIbnsbtJROiOt+WPlua1geeoi+WIhuexu+S/oeaBr1xyXG4gICAgR2V0Rmxvd0Zvcm1ieUlkKGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGlmIChpZCkge1xyXG4gICAgICAgICAgICBsZXQgdXJsID0gdGhpcy51dGlsLmdldEZsb3dGb3JtV2ViQXBpKCk7XHJcbiAgICAgICAgICAgIHVybCArPSBgLyR7aWR9YDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyDln7rkuo7mtYHnqIvliIbnsbvojrflj5blj4LmlbDliJfooahcclxuICAgIGdldFBhcmFtZXRlcnNieUZsb3dGb3JtS2V5KGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGlmIChpZCkge1xyXG4gICAgICAgICAgICBsZXQgdXJsID0gdGhpcy51dGlsLmdldEZvcm1hbFBhcmFtZXRlcnNXZWJBcGkoKTtcclxuICAgICAgICAgICAgdXJsICs9IGA/Zmxvd0Zvcm1LZXk9JHtpZH1gO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIOWfuuS6jua1geeoi+WIhuexu+iOt+WPlua1geeoi+aehOS7tlxyXG4gICAgZ2V0Q29tcG9uZW50c2J5Rmxvd2Zvcm1rZXkoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgaWYgKGlkKSB7XHJcbiAgICAgICAgICAgIGxldCB1cmwgPSB0aGlzLnV0aWwuZ2V0Qml6Q29tcG9uZW50c1dlYkFwaSgpO1xyXG4gICAgICAgICAgICB1cmwgKz0gYC9xdWVyeT9wYXJhbT1gICsgZW5jb2RlVVJJQ29tcG9uZW50KGB7XCJmbG93Rm9ybUtleVwiOlwiJHtpZH1cIn1gKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyDln7rkuo7mtYHnqIvliIbnsbvojrflj5booajljZXlrprkuYlcclxuICAgIGdldEV4ZWN1dGVGb3JtYnlGbG93Rm9ybUtleShpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBpZiAoaWQpIHtcclxuICAgICAgICAgICAgbGV0IHVybCA9IHRoaXMudXRpbC5nZXRFeGN1dGVGb3Jtc1dlYkFwaSgpO1xyXG4gICAgICAgICAgICB1cmwgKz0gYD9mbG93Rm9ybUtleT0ke2lkfWA7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDln7rkuo7mtYHnqIvliIbnsbtJZOiOt+WPluS4muWKoea0u+WKqFxyXG4gICAgICogQHBhcmFtIGZmSWQg5rWB56iL5YiG57G7aWRcclxuICAgICAqL1xyXG4gICAgZ2V0Qml6QWN0aXZpdGllcyhmZklkOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoZmZJZCkge1xyXG4gICAgICAgICAgICBjb25zdCB1cmwgPSB0aGlzLnV0aWwuZ2V0Qml6QWN0aXZpdHlXZWJBcGkoZmZJZCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCk7XHJcbiAgICAgICAgICAgICAgICAvLyAucGlwZShcclxuICAgICAgICAgICAgICAgIC8vICAgICBtYXAoKHJlOiBhbnkpID0+IHJlKSxcclxuICAgICAgICAgICAgICAgIC8vICAgICBtZXJnZU1hcCgoYWN0aXZpdGllczogYW55W10pID0+IHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgaWYgKGFjdGl2aXRpZXMgJiYgYWN0aXZpdGllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICByZXR1cm4gZm9ya0pvaW4oYWN0aXZpdGllcy5tYXAoYWN0aXZpdHkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgIHJldHVybiBmb3JrSm9pbih0aGlzLmdldEJpekFjdGl2aXR5Q29tcG9uZW50cyhmZklkLCBhY3Rpdml0eS5pZCksXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0Qml6QWN0aXZpdHlBY3Rpb25zKGFjdGl2aXR5LmlkKSlcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBtYXAoKHJlOiBhbnlbXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5LmNvbXBvbmVudHMgPSByZVswXTtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eS5hY3Rpb25zID0gcmVbMV07XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2aXR5O1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgcmV0dXJuIG9mKFtdKTtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvLyApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWfuuS6jua1geeoi+WIhuexu0lE6I635Y+W6Ieq5a6a5LmJ5Yqo5L2cXHJcbiAgICAgKiBAcGFyYW0gZm9ybUlkIOa1geeoi+WIhuexu0lEXHJcbiAgICAgKi9cclxuICAgIGdldEN1c3RvbWl6ZUFjdGlvbnMoZm9ybUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGlmIChmb3JtSWQpIHtcclxuICAgICAgICAgICAgY29uc3QgdXJsID0gYC9hcGkvcnVudGltZS93Zi92MS4wL2N1c3RvbWl6ZUFjdGlvbj9mbG93Rm9ybUtleT0ke2Zvcm1JZH1gO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5Z+65LqO5Lia5Yqh5rS75YqoaWTojrflj5bkuJrliqHmtLvliqjmnoTku7ZcclxuICAgICAqIEBwYXJhbSBpZCDkuJrliqHmtLvliqhpZFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldEJpekFjdGl2aXR5Q29tcG9uZW50cyhmbG93Rm9ybUlkOiBzdHJpbmcsIGlkOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoaWQpIHtcclxuICAgICAgICAgICAgbGV0IHVybCA9IHRoaXMudXRpbC5nZXRCaXpDb21wb25lbnRzV2ViQXBpKCk7XHJcbiAgICAgICAgICAgIHVybCArPSBgL3F1ZXJ5P3BhcmFtPWAgKyBlbmNvZGVVUklDb21wb25lbnQoYHtcImZsb3dGb3JtS2V5XCI6XCIke2Zsb3dGb3JtSWR9XCIsXCJvd25lclwiOlwiJHtpZH1cIixcIm93bmVyVHlwZVwiOlwiQWN0aXZpdHlcIn1gKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGdldEJpekFjdGl2aXR5QWN0aW9ucyhpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKGlkKSB7XHJcbiAgICAgICAgICAgIGxldCB1cmwgPSB0aGlzLnV0aWwuZ2V0QXBwcm92YWxBY3Rpb25XZWJBcGkoKTtcclxuICAgICAgICAgICAgdXJsICs9IGA/Yml6QWN0aXZpdHlJZD0ke2lkfWA7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIOWfuuS6jklE6I635Y+WQkVcclxuICAgIGdldEJ1c2luZXNzRW50aXR5YnlJZChpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBpZiAoaWQpIHtcclxuICAgICAgICAgICAgLy8gbGV0IHVybCA9IHRoaXMudXRpbC5nZXRNZXRhRGF0YVJVV2ViQXBpKCk7XHJcbiAgICAgICAgICAgIC8vIHVybCArPSBpZDtcclxuICAgICAgICAgICAgLy8gY29uc3QgdXJsID0gYC9hcGkvcnVudGltZS9sY20vdjEuMC9iZWYvaGFuZGxlZEJlTWV0YT9iZUlkPSR7aWR9YDtcclxuICAgICAgICAgICAgY29uc3QgdXJsID0gYC9hcGkvcnVudGltZS9sY20vdjEuMC9iZWYvZXhwcmVzc2lvbj9iZUlkPSR7aWR9YDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOWfuuS6jua1geeoi+WumuS5iUtleeiOt+WPluS4iuS4i+aWh1xyXG4gICAgICogQHBhcmFtIGtleSDmtYHnqIvlrprkuYlrZXlcclxuICAgICAqL1xyXG4gICAgZ2V0UHJvY0NvbnRlbnRieUtleShrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgaWYgKGtleSkge1xyXG4gICAgICAgICAgICBsZXQgdXJsID0gdGhpcy51dGlsLmdldFByb2Nlc3NEZWZpbml0aW9uV2ViQXBpKCk7XHJcbiAgICAgICAgICAgIHVybCArPSBgL2JwbW5Nb2RlbD9wcm9jRGVmS2V5PSR7a2V5fWA7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDln7rkuo7mtYHnqIvlrprkuYlLZXnojrflj5bkuIrkuIvmlodcclxuICAgICAqIEBwYXJhbSBrZXkg5rWB56iL5a6a5LmJSWRcclxuICAgICAqL1xyXG4gICAgZ2V0UlRQcm9jQ29udGVudGJ5SWQoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgaWYgKGlkKSB7XHJcbiAgICAgICAgICAgIGxldCB1cmwgPSB0aGlzLnV0aWwuZ2V0UlRQcm9jZXNzRGVmaW5pdGlvbldlYkFwaSgpO1xyXG4gICAgICAgICAgICB1cmwgKz0gYC8ke2lkfS9icG1uTW9kZWxgO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5L+d5a2Y5rWB56iLXHJcbiAgICAgKiBAcGFyYW0gY29udGVudFxyXG4gICAgICovXHJcbiAgICBzYXZlUHJvY2Vzcyhjb250ZW50OiBzdHJpbmcsIHByb2Nlc3NJbmZvOiBQcm9jZXNzSW5mbywgc3RhdGU6IG51bWJlcik6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgcG9zdERhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBvcmdhbml6YXRpb246IHByb2Nlc3NJbmZvLnByb2NPcmcgPyBwcm9jZXNzSW5mby5wcm9jT3JnLm9yZ0lkIDogJycsXHJcbiAgICAgICAgICAgICAgICBvcmdhbml6YXRpb25OYW1lOiBwcm9jZXNzSW5mby5wcm9jT3JnID8gcHJvY2Vzc0luZm8ucHJvY09yZy5vcmdOYW1lIDogJycsXHJcbiAgICAgICAgICAgICAgICBhY2Nlc3NMZXZlbDogcHJvY2Vzc0luZm8uYWNjZXNzTGV2ZWwsXHJcbiAgICAgICAgICAgICAgICBwcm9jQ29udGVudDogY29udGVudCxcclxuICAgICAgICAgICAgICAgIHN0YXRlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IHRoaXMudXRpbC5nZXRQcm9jZXNzRGVmaW5pdGlvbldlYkFwaSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodXJsLCBKU09OLnN0cmluZ2lmeShwb3N0RGF0YSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhdWRpdFByb2Nlc3NEZWYoaW5mbzogQXVkaXRQcm9jZXNzRGVmSW5mbykge1xyXG4gICAgICAgIGNvbnN0IHVybCA9ICcvYXBpL3J1bnRpbWUvd2YvdjEuMC9kdFByb2NEZWZzL2F1ZGl0UHJvY2Vzc0RlZic7XHJcbiAgICAgICAgdGhpcy5odHRwLnBvc3QodXJsLCBpbmZvKS5zdWJzY3JpYmUocmUgPT4geyB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWPkeW4g+a1geeoi1xyXG4gICAgICogQHBhcmFtIGNvbnRlbnRcclxuICAgICAqL1xyXG4gICAgZGVwbG95UHJvY2Vzcyhjb250ZW50OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGlmIChjb250ZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBvc3REYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgcHJvY0RlZkNvbnRlbnQ6IGNvbnRlbnRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgdXJsID0gdGhpcy51dGlsLmRlcGxveVdlYkFwaSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodXJsLCBKU09OLnN0cmluZ2lmeShwb3N0RGF0YSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzYXZlUlRQcm9jZXNzKGNvbnRlbnQ6IHN0cmluZywgcHJvY0RlZklkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGlmIChjb250ZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBvc3REYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgcHJvY0RlZkNvbnRlbnQ6IGNvbnRlbnRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgbGV0IHVybCA9IHRoaXMudXRpbC5nZXRSVFByb2Nlc3NEZWZpbml0aW9uV2ViQXBpKCk7XHJcbiAgICAgICAgICAgIHVybCArPSBgLyR7cHJvY0RlZklkfS9hZGp1c3RgO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodXJsLCBKU09OLnN0cmluZ2lmeShwb3N0RGF0YSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzeW5jRHRQcm9jZXNzKGNvbnRlbnQ6IHN0cmluZywgcnRQcm9jZXNzSW5mbzogUlRQcm9jZXNzSW5mbyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgcG9zdERhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBvcmdhbml6YXRpb246IHJ0UHJvY2Vzc0luZm8ucHJvY09yZyA/IHJ0UHJvY2Vzc0luZm8ucHJvY09yZy5vcmdJZCA6ICcnLFxyXG4gICAgICAgICAgICAgICAgb3JnYW5pemF0aW9uTmFtZTogcnRQcm9jZXNzSW5mby5wcm9jT3JnID8gcnRQcm9jZXNzSW5mby5wcm9jT3JnLm9yZ05hbWUgOiAnJyxcclxuICAgICAgICAgICAgICAgIGFjY2Vzc0xldmVsOiBydFByb2Nlc3NJbmZvLmFjY2Vzc0xldmVsIHx8ICdwdWJsaWMnLFxyXG4gICAgICAgICAgICAgICAgcHJvY0NvbnRlbnQ6IGNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICBzdGF0ZTogMFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCB1cmwgPSAnL2FwaS9ydW50aW1lL3dmL3YxLjAvZHRQcm9jRGVmcyc7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh1cmwsIEpTT04uc3RyaW5naWZ5KHBvc3REYXRhKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==