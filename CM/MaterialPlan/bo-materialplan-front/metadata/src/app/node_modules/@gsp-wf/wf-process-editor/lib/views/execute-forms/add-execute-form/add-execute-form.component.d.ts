import { OnInit, TemplateRef } from '@angular/core';
import { ProcessDesignerUIState } from '../../../app/process-designer.uistate';
import { HttpService, SessionService } from '@ecp-caf/caf-common';
import { RtfAppHelpComponent } from '@gsp-sys/rtf-ui';
import { RtfApp } from '@gsp-sys/rtf-ui/lib/rtf-app-help/entities/rtf-app';
import { Observable, Subject } from 'rxjs';
import { PickedResult, LookupGridComponent } from '@farris/ui-lookup';
import { ExecuteFormModel } from '../entities/execute-form.entity';
import { MessagerService } from '@farris/ui-messager';
import { ExecuteForm } from '../entities/execute-form';
export declare class AddExecuteFormComponent implements OnInit {
    private state;
    private http;
    private session;
    private message;
    modalFooter: TemplateRef<any>;
    appHelper: RtfAppHelpComponent;
    lookUp: LookupGridComponent;
    private grid;
    submit: Subject<ExecuteFormModel>;
    cancel: Subject<{}>;
    tab: 'web' | 'mobile';
    forms: ExecuteForm[];
    columns: ({
        field: string;
        width: number;
        title: string;
        formatter?: undefined;
    } | {
        field: string;
        width: number;
        title: string;
        formatter: (v: any, d: any, i: any) => "功能菜单" | "表单格式";
    })[];
    cols: {
        field: string;
        width: number;
        title: string;
        searchField: string;
    }[];
    dataUri: string;
    constructor(state: ProcessDesignerUIState, http: HttpService, session: SessionService, message: MessagerService);
    ngOnInit(): void;
    clickOK(): void;
    clickCancel(): void;
    selectOtherFormFormat(): void;
    dictPicking: (arg: any) => Observable<{
        showDialog: boolean;
        data: {
            tab: "web" | "mobile";
        };
    }>;
    dictPicked: (data: any) => Observable<PickedResult>;
    selectOtherFunc(): void;
    funcSelected(apps: RtfApp[]): void;
    private getAllExecuteForms;
    private getExecuteForms;
    private getFormFormats;
}
