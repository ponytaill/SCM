/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, TemplateRef, Output, EventEmitter } from '@angular/core';
import { ProcessDesignerUIState } from '../../../../app/process-designer.uistate';
import { DatagridComponent } from '@farris/ui-datagrid';
import { CustomizeAciton } from '../../entities/customize-action.entity';
export class CustomizeActionListComponent {
    /**
     * @param {?} designerUIState
     */
    constructor(designerUIState) {
        this.designerUIState = designerUIState;
        this.submit = new EventEmitter();
        this.cancel = new EventEmitter();
        this.terminalList = [
            { value: 'app', text: '移动' },
            { value: 'web', text: 'web' },
            { value: 'web,app', text: 'web,移动' }
        ];
        this.cols = [
            { field: 'code', width: 100, title: '编号' },
            { field: 'name', width: 100, title: '名称' },
            {
                field: 'terminal', width: 100, title: '适用终端',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.terminalList }
                },
            },
            {
                field: 'isAll', width: 100, title: '是否默认',
                formatter: { type: 'boolean', options: { trueText: '是', falseText: '否' } }
            }
        ];
        this.customActionList = this.designerUIState.flowFormInfo.customizeActions || [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    clickOK() {
        /** @type {?} */
        const selections = [];
        /** @type {?} */
        const checkeds = this.grid.checkeds;
        if (checkeds && checkeds.length > 0) {
            checkeds.forEach((/**
             * @param {?} action
             * @return {?}
             */
            action => {
                /** @type {?} */
                const item = new CustomizeAciton(action.data.id, action.data.code, action.data.name);
                item.terminalType = action.data.terminal;
                // item.enable = true;
                item.actualParameters = [];
                if (action.data.actualParameters && action.data.actualParameters.length > 0) {
                    for (const p of action.data.actualParameters) {
                        /** @type {?} */
                        const param = (/** @type {?} */ ({
                            Name: p.code,
                            Value: p.value,
                            ValueText: p.name,
                            Tag: 'expression'
                        }));
                        item.actualParameters.push(param);
                    }
                }
                selections.push(item);
            }));
        }
        this.submit.emit(selections);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.cancel.emit(true);
    }
}
CustomizeActionListComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-customize-action-list',
                template: "<div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100 m-2\">\r\n  <farris-datagrid #grid [columns]=\"cols\" [data]=\"customActionList\" [idField]=\"'id'\" [fit]=\"true\"\r\n    [fitColumns]=\"true\" [pagination]='false' [multiSelect]=\"true\" [showCheckbox]=\"true\" [multiSelect]=\"true\"\r\n    [checkOnSelect]=\"true\" [selectOnCheck]=\"true\">\r\n  </farris-datagrid>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>",
                styles: [""]
            }] }
];
/** @nocollapse */
CustomizeActionListComponent.ctorParameters = () => [
    { type: ProcessDesignerUIState }
];
CustomizeActionListComponent.propDecorators = {
    grid: [{ type: ViewChild, args: ['grid',] }],
    footer: [{ type: ViewChild, args: ['footer',] }],
    submit: [{ type: Output }],
    cancel: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    CustomizeActionListComponent.prototype.grid;
    /** @type {?} */
    CustomizeActionListComponent.prototype.footer;
    /** @type {?} */
    CustomizeActionListComponent.prototype.submit;
    /** @type {?} */
    CustomizeActionListComponent.prototype.cancel;
    /** @type {?} */
    CustomizeActionListComponent.prototype.customActionList;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionListComponent.prototype.terminalList;
    /** @type {?} */
    CustomizeActionListComponent.prototype.cols;
    /**
     * @type {?}
     * @private
     */
    CustomizeActionListComponent.prototype.designerUIState;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9taXplLWFjdGlvbi1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvdmlld3MvY3VzdG9taXplLWFjdGlvbi92aWV3cy9jdXN0b21pemUtYWN0aW9uLWxpc3QvY3VzdG9taXplLWFjdGlvbi1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEcsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDbEYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBUXpFLE1BQU0sT0FBTyw0QkFBNEI7Ozs7SUE2QnZDLFlBQW9CLGVBQXVDO1FBQXZDLG9CQUFlLEdBQWYsZUFBZSxDQUF3QjtRQXhCakQsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFTLENBQUM7UUFDbkMsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFJbkMsaUJBQVksR0FBRztZQUNyQixFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRTtZQUM1QixFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtZQUM3QixFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRTtTQUNyQyxDQUFDO1FBRUYsU0FBSSxHQUFHO1lBQ0wsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtZQUMxQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1lBQzFDO2dCQUNFLEtBQUssRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTTtnQkFDNUMsU0FBUyxFQUFFO29CQUNULElBQUksRUFBRSxNQUFNO29CQUNaLE9BQU8sRUFBRSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRTtpQkFDN0U7YUFBRztZQUNOO2dCQUNFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTTtnQkFDekMsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsRUFBRTthQUFHO1NBQ2hGLENBQUM7UUFFQSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLElBQUksRUFBRSxDQUFDO0lBQ25GLENBQUM7Ozs7SUFFRCxRQUFRO0lBQ1IsQ0FBQzs7OztJQUNELE9BQU87O2NBQ0MsVUFBVSxHQUFHLEVBQUU7O2NBQ2YsUUFBUSxHQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUTtRQUMxQyxJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNuQyxRQUFRLENBQUMsT0FBTzs7OztZQUFDLE1BQU0sQ0FBQyxFQUFFOztzQkFDbEIsSUFBSSxHQUFHLElBQUksZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUNwRixJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO2dCQUN6QyxzQkFBc0I7Z0JBQ3RCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7Z0JBQzNCLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQzNFLEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTs7OEJBQ3RDLEtBQUssR0FBRyxtQkFBQTs0QkFDWixJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUk7NEJBQ1osS0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLOzRCQUNkLFNBQVMsRUFBRSxDQUFDLENBQUMsSUFBSTs0QkFDakIsR0FBRyxFQUFFLFlBQVk7eUJBQ2xCLEVBQW1CO3dCQUNwQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO3FCQUNuQztpQkFDRjtnQkFDRCxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3hCLENBQUMsRUFBQyxDQUFDO1NBQ0o7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMvQixDQUFDOzs7O0lBQ0QsV0FBVztRQUNULElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLENBQUM7OztZQW5FRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsOHFCQUFxRDs7YUFFdEQ7Ozs7WUFUUSxzQkFBc0I7OzttQkFZNUIsU0FBUyxTQUFDLE1BQU07cUJBQ2hCLFNBQVMsU0FBQyxRQUFRO3FCQUVsQixNQUFNO3FCQUNOLE1BQU07Ozs7SUFKUCw0Q0FBMkM7O0lBQzNDLDhDQUE4Qzs7SUFFOUMsOENBQTZDOztJQUM3Qyw4Q0FBMkM7O0lBRTNDLHdEQUF3Qjs7Ozs7SUFFeEIsb0RBSUU7O0lBRUYsNENBWUU7Ozs7O0lBQ1UsdURBQStDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFZpZXdDaGlsZCwgVGVtcGxhdGVSZWYsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFByb2Nlc3NEZXNpZ25lclVJU3RhdGUgfSBmcm9tICcuLi8uLi8uLi8uLi9hcHAvcHJvY2Vzcy1kZXNpZ25lci51aXN0YXRlJztcclxuaW1wb3J0IHsgRGF0YWdyaWRDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWRhdGFncmlkJztcclxuaW1wb3J0IHsgQ3VzdG9taXplQWNpdG9uIH0gZnJvbSAnLi4vLi4vZW50aXRpZXMvY3VzdG9taXplLWFjdGlvbi5lbnRpdHknO1xyXG5pbXBvcnQgeyBBY3R1YWxQYXJhbWV0ZXIgfSBmcm9tICcuLi8uLi8uLi9leGVjdXRlLWZvcm1zL2VudGl0aWVzL2V4ZWN1dGUtZm9ybS5lbnRpdHknO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtY3VzdG9taXplLWFjdGlvbi1saXN0JyxcclxuICB0ZW1wbGF0ZVVybDogJy4vY3VzdG9taXplLWFjdGlvbi1saXN0LmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9jdXN0b21pemUtYWN0aW9uLWxpc3QuY29tcG9uZW50LnNjc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ3VzdG9taXplQWN0aW9uTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ2dyaWQnKSBncmlkOiBEYXRhZ3JpZENvbXBvbmVudDtcclxuICBAVmlld0NoaWxkKCdmb290ZXInKSBmb290ZXI6IFRlbXBsYXRlUmVmPGFueT47XHJcblxyXG4gIEBPdXRwdXQoKSBzdWJtaXQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueVtdPigpO1xyXG4gIEBPdXRwdXQoKSBjYW5jZWwgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgY3VzdG9tQWN0aW9uTGlzdDogYW55W107XHJcblxyXG4gIHByaXZhdGUgdGVybWluYWxMaXN0ID0gW1xyXG4gICAgeyB2YWx1ZTogJ2FwcCcsIHRleHQ6ICfnp7vliqgnIH0sXHJcbiAgICB7IHZhbHVlOiAnd2ViJywgdGV4dDogJ3dlYicgfSxcclxuICAgIHsgdmFsdWU6ICd3ZWIsYXBwJywgdGV4dDogJ3dlYiznp7vliqgnIH1cclxuICBdO1xyXG5cclxuICBjb2xzID0gW1xyXG4gICAgeyBmaWVsZDogJ2NvZGUnLCB3aWR0aDogMTAwLCB0aXRsZTogJ+e8luWPtycgfSxcclxuICAgIHsgZmllbGQ6ICduYW1lJywgd2lkdGg6IDEwMCwgdGl0bGU6ICflkI3np7AnIH0sXHJcbiAgICB7XHJcbiAgICAgIGZpZWxkOiAndGVybWluYWwnLCB3aWR0aDogMTAwLCB0aXRsZTogJ+mAgueUqOe7iOerrycsXHJcbiAgICAgIGZvcm1hdHRlcjoge1xyXG4gICAgICAgIHR5cGU6ICdlbnVtJyxcclxuICAgICAgICBvcHRpb25zOiB7IHZhbHVlRmllbGQ6ICd2YWx1ZScsIHRleHRGaWVsZDogJ3RleHQnLCBkYXRhOiB0aGlzLnRlcm1pbmFsTGlzdCB9XHJcbiAgICAgIH0sIH0sXHJcbiAgICB7XHJcbiAgICAgIGZpZWxkOiAnaXNBbGwnLCB3aWR0aDogMTAwLCB0aXRsZTogJ+aYr+WQpum7mOiupCcsXHJcbiAgICAgIGZvcm1hdHRlcjogeyB0eXBlOiAnYm9vbGVhbicsIG9wdGlvbnM6IHsgdHJ1ZVRleHQ6ICfmmK8nLCBmYWxzZVRleHQ6ICflkKYnIH0gfSAgfVxyXG4gIF07XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkZXNpZ25lclVJU3RhdGU6IFByb2Nlc3NEZXNpZ25lclVJU3RhdGUpIHtcclxuICAgIHRoaXMuY3VzdG9tQWN0aW9uTGlzdCA9IHRoaXMuZGVzaWduZXJVSVN0YXRlLmZsb3dGb3JtSW5mby5jdXN0b21pemVBY3Rpb25zIHx8IFtdO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgfVxyXG4gIGNsaWNrT0soKSB7XHJcbiAgICBjb25zdCBzZWxlY3Rpb25zID0gW107XHJcbiAgICBjb25zdCBjaGVja2VkczogYW55W10gPSB0aGlzLmdyaWQuY2hlY2tlZHM7XHJcbiAgICBpZiAoY2hlY2tlZHMgJiYgY2hlY2tlZHMubGVuZ3RoID4gMCkge1xyXG4gICAgICBjaGVja2Vkcy5mb3JFYWNoKGFjdGlvbiA9PiB7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IG5ldyBDdXN0b21pemVBY2l0b24oYWN0aW9uLmRhdGEuaWQsIGFjdGlvbi5kYXRhLmNvZGUsIGFjdGlvbi5kYXRhLm5hbWUpO1xyXG4gICAgICAgIGl0ZW0udGVybWluYWxUeXBlID0gYWN0aW9uLmRhdGEudGVybWluYWw7XHJcbiAgICAgICAgLy8gaXRlbS5lbmFibGUgPSB0cnVlO1xyXG4gICAgICAgIGl0ZW0uYWN0dWFsUGFyYW1ldGVycyA9IFtdO1xyXG4gICAgICAgIGlmIChhY3Rpb24uZGF0YS5hY3R1YWxQYXJhbWV0ZXJzICYmIGFjdGlvbi5kYXRhLmFjdHVhbFBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgZm9yIChjb25zdCBwIG9mIGFjdGlvbi5kYXRhLmFjdHVhbFBhcmFtZXRlcnMpIHtcclxuICAgICAgICAgICAgY29uc3QgcGFyYW0gPSB7XHJcbiAgICAgICAgICAgICAgTmFtZTogcC5jb2RlLFxyXG4gICAgICAgICAgICAgIFZhbHVlOiBwLnZhbHVlLFxyXG4gICAgICAgICAgICAgIFZhbHVlVGV4dDogcC5uYW1lLFxyXG4gICAgICAgICAgICAgIFRhZzogJ2V4cHJlc3Npb24nXHJcbiAgICAgICAgICAgIH0gYXMgQWN0dWFsUGFyYW1ldGVyO1xyXG4gICAgICAgICAgICBpdGVtLmFjdHVhbFBhcmFtZXRlcnMucHVzaChwYXJhbSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNlbGVjdGlvbnMucHVzaChpdGVtKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnN1Ym1pdC5lbWl0KHNlbGVjdGlvbnMpO1xyXG4gIH1cclxuICBjbGlja0NhbmNlbCgpIHtcclxuICAgIHRoaXMuY2FuY2VsLmVtaXQodHJ1ZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==