/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, Injector, Input, ViewChild, ElementRef, HostBinding, NgZone } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { ProcessDesignerUIState } from '../../../../app/process-designer.uistate';
import { ExpressionService, InjectedType, ExprEditMode } from '@gsp-svc/expression';
import { SessionService } from '@ecp-caf/caf-common';
import { BsModalService } from '@farris/ui-modal';
import { CommonComponentUiRTService } from '@gsp-cmp/ccmp-ui';
import { SelectMetadataRTComponent } from '@gsp-lcm/metadatart-selector';
import { DatagridComponent } from '@farris/ui-datagrid';
import { of, forkJoin } from 'rxjs';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { LookupGridComponent } from '@farris/ui-lookup';
import { ComponentPerformerService } from './component-performer.service';
import { ParameterFetchValueMode } from '@gsp-cmp/wscmp-models';
import { ComponentPerformer } from './component-performer.entity';
import { ProcessDeUtil } from '../../../../domain/process-de-util';
export class ComponentPerformerComponent {
    /**
     * @param {?} formBuilder
     * @param {?} designerState
     * @param {?} expr
     * @param {?} resolver
     * @param {?} injector
     * @param {?} sessionSrc
     * @param {?} modalService
     * @param {?} componentService
     * @param {?} ngZone
     * @param {?} service
     * @param {?} util
     */
    constructor(formBuilder, designerState, expr, resolver, injector, sessionSrc, modalService, componentService, ngZone, service, util) {
        this.formBuilder = formBuilder;
        this.designerState = designerState;
        this.expr = expr;
        this.resolver = resolver;
        this.injector = injector;
        this.sessionSrc = sessionSrc;
        this.modalService = modalService;
        this.componentService = componentService;
        this.ngZone = ngZone;
        this.service = service;
        this.util = util;
        this.cls = 'farris-main-area flex-column';
        this.showClearButton = false;
        this.columns = [
            { field: 'code', width: 60, title: '编号' },
            { field: 'name', width: 60, title: '名称' },
            { field: 'description', width: 60, title: '描述', showTips: true },
            {
                field: 'valueText', width: 100, title: '参数值',
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            this.showExprHelp(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            // 清理valueText，也应该清理value
                            e.rowData.value = '';
                            for (const p of this.component.actualParameters) {
                                if (p.code === e.rowId) {
                                    p.value = '';
                                }
                            }
                        })
                    }
                }
            }
        ];
        this.helpInfo = {
            helpId: '',
            su: '',
            columns: [],
            displayType: 'List',
            items: [],
            pageInfo: {
                pageIndex: 1,
                pageList: [10, 20, 30, 50],
                pageSize: 20
            },
            search: { category: 'search' },
            title: '帮助',
            total: 100,
            fieldInfo: {
                idField: 'id',
                textField: 'name',
                valueField: 'id'
            }
        };
        this.beforeEdit = (/**
         * @param {?} param
         * @return {?}
         */
        (param) => {
            /** @type {?} */
            const rowData = (/** @type {?} */ (param.rowData));
            this.curParameter = rowData;
            switch (rowData.fetchValueMode) {
                case ParameterFetchValueMode.express:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                this.showExprHelp(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                // 清理valueText，也应该清理value
                                e.rowData.value = '';
                                for (const p of this.component.actualParameters) {
                                    if (p.code === e.rowId) {
                                        p.value = '';
                                    }
                                }
                            })
                        }
                    };
                    break;
                case ParameterFetchValueMode.none:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                this.showExprHelp(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                // 清理valueText，也应该清理value
                                e.rowData.value = '';
                                for (const p of this.component.actualParameters) {
                                    if (p.code === e.rowId) {
                                        p.value = '';
                                    }
                                }
                            })
                        }
                    };
                    break;
                case ParameterFetchValueMode.const:
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                    break;
                case ParameterFetchValueMode.enum:
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                    break;
                case ParameterFetchValueMode.help:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                this.cell = e;
                                this.helpInfo.helpId = ((/** @type {?} */ (rowData.fetchValueSetting))).helpId;
                                this.helpInfo.su = ((/** @type {?} */ (rowData.fetchValueSetting))).serviceUnit;
                                this.helpInfo.pageInfo = {
                                    pageIndex: 1,
                                    pageList: [10, 20, 30, 50],
                                    pageSize: 20
                                };
                                this.helpInfo.search = { category: 'search' };
                                this.getHelpInfo();
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                // 清理valueText，也应该清理value
                                e.rowData.value = '';
                                for (const p of this.component.actualParameters) {
                                    if (p.code === e.rowId) {
                                        p.value = '';
                                    }
                                }
                            })
                        }
                    };
                    break;
            }
            return of(true);
        });
        this.afterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        (rowIndex, rowData, column) => {
            return of(true);
        });
        this.dictPicked = (/**
         * @param {?} rowData
         * @return {?}
         */
        (rowData) => {
            if (this.cell) {
                this.cell.formControl.setValue(this.util.getValue(rowData, this.helpInfo.fieldInfo.textField));
                this.cell.instance.cd.detectChanges();
                this.cell.rowData.value = this.util.getValue(rowData, this.helpInfo.fieldInfo.valueField);
                for (const p of this.component.actualParameters) {
                    if (p.code === this.cell.rowId) {
                        p.value = this.util.getValue(rowData, this.helpInfo.fieldInfo.valueField);
                    }
                }
                return of(true);
            }
        });
    }
    /**
     * @param {?} cmp
     * @return {?}
     */
    set component(cmp) {
        if (cmp && cmp.methodCode) {
            this.service.getHelpMetaData(cmp.metadataId, '').subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                /** @type {?} */
                const c = JSON.parse(re.content);
                /** @type {?} */
                const operation = c.operations.find((/**
                 * @param {?} o
                 * @return {?}
                 */
                o => o.code === cmp.methodCode));
                if (operation) {
                    cmp.actualParameters = cmp.actualParameters.map((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => {
                        /** @type {?} */
                        const p = operation.parameters.find((/**
                         * @param {?} i
                         * @return {?}
                         */
                        i => i.code === a.code));
                        if (p) {
                            return {
                                code: a.code,
                                name: p.name,
                                value: a.value,
                                valueText: a.valueText ? a.valueText : a.value,
                                description: p.description,
                                tag: a.tag,
                                fetchValueMode: p.fetchValueMode,
                                fetchValueSetting: p.fetchValueSetting
                            };
                        }
                        else {
                            throw new Error('当前构件方法参数不一致，请更新！');
                        }
                    }));
                    this.componentPerformer = cmp;
                }
                else {
                    throw new Error('当前构件已不存在此方法，请更新！');
                }
            }));
        }
        else {
            this.componentPerformer = new ComponentPerformer();
        }
    }
    /**
     * @return {?}
     */
    get component() {
        return this.componentPerformer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputGroup.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            this.inputGroup.nativeElement.addEventListener('mouseleave', this.onMouseLeave.bind(this));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    toggleClearIcon(event, isShow = false) {
        /** @type {?} */
        const str = isShow ? '' : 'none';
        /** @type {?} */
        const clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    selectChanged(event) {
        this.curParameter = event.data;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    endEdit(e) {
        // 文本框编辑同时修改value
        if (e.rowData.fetchValueMode === ParameterFetchValueMode.const || e.rowData.fetchValueMode === ParameterFetchValueMode.enum) {
            this.component.actualParameters[e.rowIndex].value = this.component.actualParameters[e.rowIndex].valueText;
        }
    }
    /**
     * @return {?}
     */
    clear() {
        this.componentPerformer.name = '';
        this.componentPerformer.metadataId = '';
        this.componentPerformer.methodCode = '';
        this.componentPerformer.methodName = '';
        this.componentPerformer.condition = '';
        this.componentPerformer.actualParameters = new Array();
    }
    /**
     * @return {?}
     */
    selectComponent() {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.typeList = 'WebServiceComponent'; // 目前只能根据元数据类型过滤，后续添加标签过滤
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        ($event) => {
            try {
                /** @type {?} */
                const meta = $event.metadata;
                this.openComponentSelectorNew(meta.id, this.sessionSrc.getUserSessionId());
            }
            catch (_a) {
                console.log('$event', $event);
                throw new Error('获取解析构件出错' + $event);
            }
        }));
        /** @type {?} */
        const modalConfig = {
            title: '构件选择',
            width: 980,
            height: 548,
            showButtons: false
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
    }
    /**
     * @private
     * @param {?} metadataId
     * @param {?} sessionId
     * @return {?}
     */
    openComponentSelectorNew(metadataId, sessionId) {
        this.componentService.openSelector(metadataId, sessionId).subscribe((/**
         * @param {?} selectorResult
         * @return {?}
         */
        (selectorResult) => {
            selectorResult.confirmEvent.subscribe((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (result) {
                    this.component.name = result.name;
                    this.component.metadataId = result.id;
                    this.component.methodCode = result.operations[0].code;
                    this.component.methodName = result.operations[0].name;
                    this.component.actualParameters = [];
                    if (result.operations[0].parameters && result.operations[0].parameters.length > 0) {
                        this.component.actualParameters = result.operations[0].parameters
                            .map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        (p) => (/** @type {?} */ (({
                            code: p.code,
                            name: p.name,
                            value: '',
                            valueText: '',
                            description: p.description,
                            fetchValueMode: p.fetchValueMode,
                            fetchValueSetting: p.fetchValueSetting
                        })))));
                    }
                }
            }));
        }));
    }
    /**
     * @param {?} e
     * @return {?}
     */
    showExprHelp(e) {
        if (this.designerState.schemas.length > 0) {
            for (const schema of this.designerState.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.designerState.procInstContext.length > 0) {
            for (const variable of this.designerState.procInstContext) {
                context.push(variable);
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            for (const variable of this.designerState.formalParameterContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            for (const variable of this.designerState.participantContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            for (const variable of this.designerState.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 默认打开高级表达式编辑器
        this.expr.addExpressionText(e.instance.value);
        this.expr.buildExpression().then((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (d) {
                e.formControl.setValue(d);
                e.instance.cd.detectChanges();
                e.rowData.value = d;
                for (const p of this.component.actualParameters) {
                    if (p.code === e.rowId) {
                        p.value = d;
                    }
                }
            }
        }));
    }
    /**
     * @return {?}
     */
    getPerformers() {
        this.grid.endCellEdit();
        console.log(this.component);
        return this.component;
    }
    /**
     * @private
     * @return {?}
     */
    getHelpInfo() {
        forkJoin(this.service.getHelpMetaData(this.helpInfo.helpId, this.helpInfo.su), this.service.getLookUpData(this.helpInfo.helpId, this.helpInfo.su, this.helpInfo.pageInfo.pageIndex, this.helpInfo.pageInfo.pageSize, this.helpInfo.search)).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            if (re[0]) {
                /** @type {?} */
                const meta = re[0];
                /** @type {?} */
                const help = (/** @type {?} */ (JSON.parse(meta.content)));
                this.helpInfo.columns = help.dataSource.columns;
                this.helpInfo.displayType = help.displayType;
                this.helpInfo.fieldInfo = {
                    idField: help.idField,
                    valueField: help.valueField,
                    textField: help.textField
                };
            }
            else {
                throw new Error('帮助元数据不存在！');
            }
            if (re[1]) {
                /** @type {?} */
                const helpData = re[1];
                this.helpInfo.items = helpData.items;
                this.helpInfo.title = helpData.title;
                this.helpInfo.total = helpData.total;
                this.lookup.showDialog();
            }
            else {
                throw new Error('获取帮助数据源失败！');
            }
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    pagerChanged(data) {
        if (data) {
            this.helpInfo.pageInfo.pageIndex = data.pageIndex;
            this.helpInfo.pageInfo.pageSize = data.pageSize;
            this.service.getLookUpData(this.helpInfo.helpId, this.helpInfo.su, this.helpInfo.pageInfo.pageIndex, this.helpInfo.pageInfo.pageSize, this.helpInfo.search)
                .subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                this.helpInfo.items = re.items;
                this.helpInfo.title = re.title;
                this.helpInfo.total = re.total;
                this.lookup.loadData(re);
            }));
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    search(data) {
        console.log(data);
        this.helpInfo.search = { category: 'search' };
        if (data) {
            /** @type {?} */
            const searchInfo = {
                searchField: data.field || data.search.field,
                searchValue: data.value || data.search.value
            };
            this.helpInfo.search = Object.assign(this.helpInfo.search, searchInfo);
            this.service.getLookUpData(this.helpInfo.helpId, this.helpInfo.su, this.helpInfo.pageInfo.pageIndex, this.helpInfo.pageInfo.pageSize, this.helpInfo.search)
                .subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                this.helpInfo.items = re.items;
                this.helpInfo.title = re.title;
                this.helpInfo.total = re.total;
                this.lookup.loadData(re);
            }));
        }
    }
}
ComponentPerformerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-component-performer',
                template: "\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <form class=\"farris-form farris-card-content-bg farris-card-section mx-2\">\r\n        <div class=\"d-flex flex-wrap flex-column mb-2 pr-4\">\r\n          <div class=\"farris-form-controls-inline farris-form-auto mb-2\">\r\n            <div class=\"farris-group-wrap mx-3\">\r\n              <div class=\"form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u6784\u4EF6\u540D\u79F0</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-2\">\r\n                  <input type=\"text\" class=\"k-textbox form-control\" name=\"name\"\r\n                    [(ngModel)]=\"component.name\" />\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"farris-form-controls-inline farris-form-auto\">\r\n            <div class=\"farris-group-wrap mx-3\">\r\n              <div class=\"form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u6784\u4EF6\u9009\u62E9</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-2\">\r\n                  <div #inputGroup class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"component.methodCode\" name=\"methodCode\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\" (click)=\"clear()\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span class=\"input-group-text\" (click)=\"selectComponent()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <farris-tabs class=\"f-utils-fill\" #params [value]=\"'params'\" [contentFill]=\"true\">\r\n        <farris-tab title=\"\u53C2\u6570\u5217\u8868\" [id]=\"'params'\">\r\n          <ng-template #content>\r\n            <div class=\"f-utils-fill-flex-column h-100\">\r\n              <farris-datagrid #grid [data]=\"component.actualParameters\" [columns]=\"columns\" [idField]=\"'code'\" [fit]=\"true\"\r\n                [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n                [multiSelect]=\"false\" [afterEdit]=\"afterEdit\" [beforeEdit]=\"beforeEdit\" \r\n                (selectChanged)=\"selectChanged($event)\" (endEdit)=\"endEdit($event)\"></farris-datagrid>\r\n            </div>\r\n          </ng-template>\r\n        </farris-tab>\r\n      </farris-tabs>\r\n    </div>\r\n\r\n<farris-lookup-grid style=\"display: none;\" [items]=\"helpInfo.items\" [columns]=\"helpInfo.columns\"  [resizable]=\"true\" [singleSelect]=\"true\" \r\n  [idField]=\"helpInfo.fieldInfo.idField\" [textField]=\"helpInfo.fieldInfo.textField\" [valueField]=\"helpInfo.fieldInfo.valueField\" \r\n  [pagination]=\"true\"  [pageIndex]=\"helpInfo.pageInfo.pageIndex\" [pageSize]=\"helpInfo.pageInfo.pageSize\" [pageList]=\"helpInfo.pageInfo.pageList\" \r\n  [total]=\"helpInfo.total\" [title]=\"helpInfo.title\" [displayType]=\"helpInfo.displayType\" [dictPicked]=\"dictPicked\" [remoteSearch]='false'\r\n  (pagerChanged)=\"pagerChanged($event)\" (search)=\"search($event)\">\r\n</farris-lookup-grid>",
                providers: [ComponentPerformerService],
                styles: [""]
            }] }
];
/** @nocollapse */
ComponentPerformerComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: ProcessDesignerUIState },
    { type: ExpressionService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: SessionService },
    { type: BsModalService },
    { type: CommonComponentUiRTService },
    { type: NgZone },
    { type: ComponentPerformerService },
    { type: ProcessDeUtil }
];
ComponentPerformerComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    grid: [{ type: ViewChild, args: [DatagridComponent,] }],
    lookup: [{ type: ViewChild, args: [LookupGridComponent,] }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }],
    component: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ComponentPerformerComponent.prototype.cls;
    /**
     * @type {?}
     * @private
     */
    ComponentPerformerComponent.prototype.componentPerformer;
    /** @type {?} */
    ComponentPerformerComponent.prototype.grid;
    /** @type {?} */
    ComponentPerformerComponent.prototype.lookup;
    /** @type {?} */
    ComponentPerformerComponent.prototype.inputGroup;
    /** @type {?} */
    ComponentPerformerComponent.prototype.showClearButton;
    /** @type {?} */
    ComponentPerformerComponent.prototype.curParameter;
    /** @type {?} */
    ComponentPerformerComponent.prototype.columns;
    /** @type {?} */
    ComponentPerformerComponent.prototype.helpInfo;
    /** @type {?} */
    ComponentPerformerComponent.prototype.cell;
    /** @type {?} */
    ComponentPerformerComponent.prototype.beforeEdit;
    /** @type {?} */
    ComponentPerformerComponent.prototype.afterEdit;
    /** @type {?} */
    ComponentPerformerComponent.prototype.dictPicked;
    /**
     * @type {?}
     * @private
     */
    ComponentPerformerComponent.prototype.formBuilder;
    /**
     * @type {?}
     * @private
     */
    ComponentPerformerComponent.prototype.designerState;
    /**
     * @type {?}
     * @private
     */
    ComponentPerformerComponent.prototype.expr;
    /**
     * @type {?}
     * @private
     */
    ComponentPerformerComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ComponentPerformerComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ComponentPerformerComponent.prototype.sessionSrc;
    /**
     * @type {?}
     * @private
     */
    ComponentPerformerComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ComponentPerformerComponent.prototype.componentService;
    /**
     * @type {?}
     * @private
     */
    ComponentPerformerComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    ComponentPerformerComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ComponentPerformerComponent.prototype.util;
}
//# sourceMappingURL=data:application/json;base64,