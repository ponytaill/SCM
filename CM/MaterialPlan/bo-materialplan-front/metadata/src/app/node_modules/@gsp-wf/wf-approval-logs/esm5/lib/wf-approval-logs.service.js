/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { translate } from './service/i18n/index';
import { WfApprovalLogsComponent } from './wf-approval-logs.component';
var WfApprovalLogsService = /** @class */ (function () {
    function WfApprovalLogsService(msgService, injector, resolver, modalService) {
        var _this = this;
        this.msgService = msgService;
        this.injector = injector;
        this.resolver = resolver;
        this.modalService = modalService;
        //SPA模式下，点击附件，窗口关闭
        window.addEventListener("message", function (event) {
            if (window.document.location.origin.search(event.origin) > -1) {
                if (event.data == 'TaskCloseLogDialog' && _this.dialog) {
                    _this.dialog.close();
                }
            }
        }, false);
    }
    /**
     * @param {?} procInstId
     * @return {?}
     */
    WfApprovalLogsService.prototype.showByProcInstId = /**
     * @param {?} procInstId
     * @return {?}
     */
    function (procInstId) {
        if (!procInstId) {
            this.msgService.warning(this.getI18nValue('static.approvalLogs.processNotFound'));
        }
        else {
            /** @type {?} */
            var modalConfig = {
                title: this.getI18nValue('static.approvalLogs.title'),
                width: 550,
                height: 520,
                showButtons: false,
            };
            /** @type {?} */
            var compFactory = this.resolver.resolveComponentFactory(WfApprovalLogsComponent);
            /** @type {?} */
            var compRef = compFactory.create(this.injector);
            compRef.instance.ProcInstId = procInstId;
            compRef.instance.ShowHeader = false;
            compRef.instance.ShowViewProcess = false;
            compRef.instance.fill();
            this.dialog = this.modalService.show(compRef, modalConfig);
        }
    };
    /**
     * @param {?} dataId
     * @return {?}
     */
    WfApprovalLogsService.prototype.showByDataId = /**
     * @param {?} dataId
     * @return {?}
     */
    function (dataId) {
        /** @type {?} */
        var modalConfig = {
            title: this.getI18nValue('static.approvalLogs.title'),
            width: 550,
            height: 520,
            showButtons: false,
        };
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(WfApprovalLogsComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.DataId = dataId;
        compRef.instance.ShowHeader = false;
        compRef.instance.ShowViewProcess = false;
        compRef.instance.fill();
        this.dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @private
     * @param {?} name
     * @return {?}
     */
    WfApprovalLogsService.prototype.getI18nValue = /**
     * @private
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (!name) {
            return '';
        }
        /** @type {?} */
        var defaultLang = localStorage.getItem('languageCode');
        /** @type {?} */
        var langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];
        /** @type {?} */
        var resultVal = '';
        if (name.indexOf('.') === -1) {
            resultVal = langData[name];
        }
        else {
            resultVal = name.split('.').reduce(function (obj, key) {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }, langData);
        }
        return resultVal;
    };
    WfApprovalLogsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    WfApprovalLogsService.ctorParameters = function () { return [
        { type: MessagerService },
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: BsModalService }
    ]; };
    return WfApprovalLogsService;
}());
export { WfApprovalLogsService };
if (false) {
    /** @type {?} */
    WfApprovalLogsService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    WfApprovalLogsService.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    WfApprovalLogsService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    WfApprovalLogsService.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    WfApprovalLogsService.prototype.modalService;
}
//# sourceMappingURL=data:application/json;base64,