/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { FlowFormInfo } from '../domain/entities/flowform-info';
import { HttpService } from '@ecp-caf/caf-common';
import { forkJoin } from 'rxjs';
export class ProcessDesignerUIState {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        // 入口单据Info
        this.flowFormInfo = new FlowFormInfo();
        // Model上下文
        this.content = '';
        // 属性框
        this.propertyConfig = [];
        this.propertyData = {};
        // 设计器地址
        this.POST_MESSAGE_TARGET = window.document.location.origin + '/platform/runtime/wf/web/designer/index.html';
        this.schemas = [];
        // 审批活动属性
        this.counterSignVariables = [];
        this.approvalItems = [];
        // 流程的审批活动节点信息
        this.userActList = [];
        // 流程包括结束和审批活动节点的信息
        this.allActList = [];
        // 流程管理员信息
        this.isAdministratorConfig = false;
        this.organizations = new Array();
        // 审批活动属性枚举===========================================================================================
        this.assignIterator = [{ key: 'ALL', value: '所有' },
            { key: 'ASSIGN', value: '指派' },
            { key: 'CLAIM', value: '领用' }];
        this.completeIterator = [{ key: 'Preempt', value: '抢占模式' },
            { key: 'Parallel', value: '并行会签' },
            { key: 'Sequential', value: '串行会签' }];
        this.completeIterator4Claim = [{ key: 'Preempt', value: '抢占模式' }];
        this.boolIterator = [{ key: true, value: '是' },
            { key: false, value: '否' }];
        // 会签不允许跳转
        this.noJump4Sign = [{ key: false, value: '否' }];
        // =================================================================================================
        // 流程实例上下文-----------------------------------------------
        this.procInstContext = [
            { key: 'dataId', name: '单据内码', description: '单据内码' },
            { key: 'procInstId', name: '流程实例ID', description: '流程实例ID' },
            { key: 'bizDefKey', name: '入口单据ID', description: '入口单据ID' },
            { key: 'processDefinitionKey', name: '流程定义KEY', description: '流程定义KEY' },
            { key: 'procInstCreator', name: '流程发起人', description: '流程发起人' },
            { key: 'procInstDescription', name: '流程摘要', description: '流程摘要' },
            { key: 'comment', name: '审批意见', description: '审批意见' }
        ];
        // 催办上下文--------------------------------------------------
        this.urgeContext = [
            { key: 'dataId', name: '单据内码', description: '单据内码' },
            { key: 'procInstId', name: '流程实例ID', description: '流程实例ID' },
            { key: 'bizDefKey', name: '入口单据ID', description: '入口单据ID' },
            { key: 'processDefinitionKey', name: '流程定义KEY', description: '流程定义KEY' },
            { key: 'procInstCreator', name: '流程发起人', description: '流程发起人' },
            { key: 'procInstDescription', name: '流程摘要', description: '流程摘要' },
            { key: 'comment', name: '审批意见', description: '审批意见' },
            { key: 'bizDefName', name: '流程分类名称', description: '流程分类名称' },
            { key: 'curLoginUsername', name: '当前登录人名称', description: '当前登录人名称' },
            { key: 'procInstCreatorName', name: '流程发起人名称', description: '流程发起人名称' }
        ];
        /**
         * 流程参数上下文
         */
        this.formalParameterContext = [];
        /**
         * 参与者上下文
         */
        this.participantContext = [
            {
                key: 'procInstCreator',
                name: '流程发起人',
                description: '流程发起人'
            }, {
                key: 'currentUser',
                name: '当前执行人',
                description: '当前执行人'
            }, {
                key: 'preActExecutors',
                name: '上一个活动的执行人',
                description: '上一个活动的执行人'
            }
        ];
        /**
         * 活动构件参数上下文
         */
        this.activityComponentContext = [
            {
                key: 'conclusionType',
                name: '结论类型',
                description: '审批项流转方向，1正向，2反向，3终止'
            }, {
                key: 'conclusionValue',
                name: '结论值',
                description: '审批项编号，例如，"Pass"、"Back"、"Refuse"'
            }
        ];
        this.processVariableContext = new Array();
        this.processVariables = new Array();
        /**
         * 汇报级次
         */
        this.dimensions = [
            { value: 'directSuperior', text: '直接上级' },
            { value: 'higherSuperior', text: '间接上级' }
        ];
        /**
         * 启动方式
         */
        this.startModeIterator = [
            { key: 'DIRECT', value: '直接' },
            { key: 'EXTERNAL_PROCESS', value: '外部流程' },
            { key: 'SUB_PROCESS', value: '子流程' }
        ];
        /**
         * 显示终端
         */
        this.displayTerminal = [
            { key: "ALL", value: '电脑端和移动端' },
            { key: "WEB", value: '电脑端' },
            { key: "APP", value: '移动端' }
        ];
        /**
         * 消息渠道列表
         */
        this.messageChannels = new Array();
        this.orgTypeCollection = [];
    }
    /**
     * @param {?} variables
     * @return {?}
     */
    set ProcessVariables(variables) {
        this.processVariables = variables;
        this.setProcessVariableContext();
    }
    /**
     * @return {?}
     */
    get ProcessVariables() {
        return this.processVariables;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    variableContextName(key) {
        return this.participantContext.find((/**
         * @param {?} i
         * @return {?}
         */
        i => i.key === key)).name;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    ranksName(value) {
        return this.dimensions.find((/**
         * @param {?} i
         * @return {?}
         */
        i => i.value === value)).text;
    }
    /**
     * @return {?}
     */
    getMessageChannels() {
        /** @type {?} */
        const url = '/api/runtime/sys/v1.0/messageplatform/channel/getenabledchannels';
        this.http.get(url).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            this.messageChannels = re;
        }));
    }
    /**
     * @return {?}
     */
    getAdministratorInfo() {
        this.getCurrentUser().subscribe((/**
         * @param {?} user
         * @return {?}
         */
        user => {
            /** @type {?} */
            const userId = user.userId;
            forkJoin(this.getAdministratorConfig(), this.getAdministrator(userId)).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                this.isAdministratorConfig = re[0].currentValue === 'true' ? true : false;
                this.administrator = re[1];
                if (this.isAdministratorConfig && this.administrator && this.administrator.enable) {
                    forkJoin(this.administrator.administratorAuthorities.map((/**
                     * @param {?} a
                     * @return {?}
                     */
                    a => {
                        if (a.includeSubordinate) {
                            return this.getSysOrgWithAllSubsById(a.organization);
                        }
                        else {
                            return this.getSysOrgById(a.organization);
                        }
                    }))).subscribe((/**
                     * @param {?} r
                     * @return {?}
                     */
                    (r) => {
                        if (r && r.length > 0) {
                            this.organizations = new Array();
                            for (const orgs of r) {
                                if (orgs && orgs.length > 0) {
                                    for (const o of orgs) {
                                        if (!this.organizations.some((/**
                                         * @param {?} org
                                         * @return {?}
                                         */
                                        org => org.id === o.id))) {
                                            this.organizations.push(o);
                                        }
                                    }
                                }
                            }
                        }
                    }));
                }
            }));
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getCurrentUser() {
        /** @type {?} */
        const url = '/api/runtime/sys/v1.0/userinfos?infoType=user';
        return this.http.get(url);
    }
    /**
     * @private
     * @param {?} userId
     * @return {?}
     */
    getAdministrator(userId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processAdministrator/${userId}`;
        return this.http.get(url);
    }
    /**
     * @private
     * @return {?}
     */
    getAdministratorConfig() {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/generalConfig/Is_EnableAdministrator`;
        return this.http.get(url);
    }
    /**
     * @private
     * @param {?} orgId
     * @return {?}
     */
    getSysOrgById(orgId) {
        /** @type {?} */
        const url = `/api/runtime/sys/v1.0/sysOrgs/${orgId}`;
        return this.http.get(url);
    }
    /**
     * @private
     * @param {?} orgId
     * @return {?}
     */
    getSysOrgWithAllSubsById(orgId) {
        /** @type {?} */
        const url = `/api/runtime/sys/v1.0/sysOrgs?param=` + encodeURIComponent(`{"parentId":"${orgId}","withAllSub":true}`);
        return this.http.get(url);
    }
    /**
     * @private
     * @param {?} userId
     * @return {?}
     */
    getCurUserInfo(userId) {
        /** @type {?} */
        const url = `/api/runtime/sys/v1.0/users/${userId}`;
        return this.http.get(url);
    }
    /**
     * @private
     * @return {?}
     */
    setProcessVariableContext() {
        this.processVariableContext = new Array();
        if (this.ProcessVariables && this.ProcessVariables.length > 0) {
            for (const v of this.ProcessVariables) {
                /** @type {?} */
                const varEntity = {
                    key: v.name,
                    name: v.documentation,
                    description: v.description
                };
                this.processVariableContext.push(varEntity);
            }
        }
    }
    /**
     * 获取框架的顶级window
     * 进行跨域封装
     * @private
     * @return {?}
     */
    getTopWindow() {
        /** @type {?} */
        let curWin = window.self;
        try {
            while (curWin.location.origin === curWin.parent.location.origin) {
                if (curWin !== curWin.parent && !((/** @type {?} */ (curWin))).isRTFTopWin) {
                    curWin = curWin.parent;
                }
                else {
                    break;
                }
            }
        }
        catch (e) { }
        return curWin;
    }
    // --------------------------0-------------------------
    // uiState初始
    /**
     * @return {?}
     */
    initUIState() {
        this.propertyConfig = [];
        this.propertyData = null;
        this.content = '';
        this.schemas = [];
    }
    /**
     * 获取所有审批节点信息
     * @param {?} data
     * @return {?}
     */
    getUserActList(data) {
        this.userActList = [];
        if (data && data.length > 0) {
            for (const userAct of data) {
                /** @type {?} */
                const userActInfo = {
                    Id: userAct.Id,
                    Name: userAct.Name
                };
                this.userActList.push(userActInfo);
            }
        }
    }
    /**
     * 获取所有结束节点信息
     * @param {?} data
     * @return {?}
     */
    getEndEventList(data) {
        this.allActList = [];
        if (data && data.length > 0) {
            for (const endEvent of data) {
                /** @type {?} */
                const endEventInfo = {
                    Id: endEvent.Id,
                    Name: endEvent.Name
                };
                // 取结束节点存到
                this.allActList.push(endEventInfo);
            }
        }
        // 存入审批活动节点
        this.allActList = this.allActList.concat(this.userActList);
    }
}
ProcessDesignerUIState.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ProcessDesignerUIState.ctorParameters = () => [
    { type: HttpService }
];
if (false) {
    /** @type {?} */
    ProcessDesignerUIState.prototype.flowFormInfo;
    /** @type {?} */
    ProcessDesignerUIState.prototype.content;
    /** @type {?} */
    ProcessDesignerUIState.prototype.propertyConfig;
    /** @type {?} */
    ProcessDesignerUIState.prototype.propertyData;
    /** @type {?} */
    ProcessDesignerUIState.prototype.POST_MESSAGE_TARGET;
    /** @type {?} */
    ProcessDesignerUIState.prototype.BE;
    /** @type {?} */
    ProcessDesignerUIState.prototype.schemas;
    /** @type {?} */
    ProcessDesignerUIState.prototype.counterSignVariables;
    /** @type {?} */
    ProcessDesignerUIState.prototype.approvalItems;
    /** @type {?} */
    ProcessDesignerUIState.prototype.userActList;
    /** @type {?} */
    ProcessDesignerUIState.prototype.allActList;
    /** @type {?} */
    ProcessDesignerUIState.prototype.bizActivityId;
    /** @type {?} */
    ProcessDesignerUIState.prototype.isAdministratorConfig;
    /** @type {?} */
    ProcessDesignerUIState.prototype.administrator;
    /** @type {?} */
    ProcessDesignerUIState.prototype.organizations;
    /** @type {?} */
    ProcessDesignerUIState.prototype.assignIterator;
    /** @type {?} */
    ProcessDesignerUIState.prototype.completeIterator;
    /** @type {?} */
    ProcessDesignerUIState.prototype.completeIterator4Claim;
    /** @type {?} */
    ProcessDesignerUIState.prototype.boolIterator;
    /** @type {?} */
    ProcessDesignerUIState.prototype.noJump4Sign;
    /** @type {?} */
    ProcessDesignerUIState.prototype.procInstContext;
    /** @type {?} */
    ProcessDesignerUIState.prototype.urgeContext;
    /**
     * 流程参数上下文
     * @type {?}
     */
    ProcessDesignerUIState.prototype.formalParameterContext;
    /**
     * 参与者上下文
     * @type {?}
     */
    ProcessDesignerUIState.prototype.participantContext;
    /**
     * 活动构件参数上下文
     * @type {?}
     */
    ProcessDesignerUIState.prototype.activityComponentContext;
    /** @type {?} */
    ProcessDesignerUIState.prototype.processVariableContext;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerUIState.prototype.processVariables;
    /**
     * 汇报级次
     * @type {?}
     */
    ProcessDesignerUIState.prototype.dimensions;
    /**
     * 启动方式
     * @type {?}
     */
    ProcessDesignerUIState.prototype.startModeIterator;
    /**
     * 显示终端
     * @type {?}
     */
    ProcessDesignerUIState.prototype.displayTerminal;
    /**
     * 消息渠道列表
     * @type {?}
     */
    ProcessDesignerUIState.prototype.messageChannels;
    /** @type {?} */
    ProcessDesignerUIState.prototype.orgTypeCollection;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerUIState.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,