import { DomSanitizer } from '@angular/platform-browser';
import { forkJoin as forkJoin$1 } from 'rxjs/observable/forkJoin';
import { of as of$1 } from 'rxjs/observable/of';
import { ReplaySubject } from 'rxjs/ReplaySubject';
import { ParameterFetchValueMode } from '@gsp-cmp/wscmp-models';
import { Subject as Subject$1 } from 'rxjs/Subject';
import { LookupDataService } from '@farris/lookup-config';
import { Router, ActivatedRoute } from '@angular/router';
import { map, switchMap, catchError } from 'rxjs/operators';
import { forkJoin, Subject, of, from } from 'rxjs';
import { FormBuilder, FormGroup, FormControl, ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CommonComponentUiRTService, CommonComponentUiModule } from '@gsp-cmp/ccmp-ui';
import { SysFarrisLookupComponent, SysFarrisTreeHelpComponent, SysManagerUIModule } from '@gsp-sys/sysmgr-ui';
import { RtfAppHelpComponent, RtfAppHelpModule } from '@gsp-sys/rtf-ui';
import { TreeTableModule } from '@farris/ui-treetable';
import { PropertyPanelModule } from '@farris/ui-property-panel';
import { DataTableModule } from '@farris/ui-datatable';
import { LayoutModule } from '@farris/ui-layout';
import { SplitterModule } from '@farris/ui-splitter';
import { FlexLayoutModule } from '@farris/ui-flex-layout';
import { FarrisPanelModule } from '@farris/ui-panel';
import { FarrisResponsiveModule } from '@farris/ui-responsive';
import { PopoverModule } from '@farris/ui-popover';
import { PaginationModule } from '@farris/ui-pagination';
import { FarrisDropdownModule } from '@farris/ui-dropdown';
import { WizardModule } from '@farris/ui-wizard';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { ExprEditMode, ExpressionService, InjectedType, ExpressioneditorComponent, VarEntity, ExpressionModule } from '@gsp-svc/expression';
import { WfBizprocessLookupModule } from '@gsp-wf/wf-bizprocess-lookup';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { FarrisButtonModule } from '@farris/ui-button';
import { CommonModule } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { HttpService, SessionService, CacheService } from '@ecp-caf/caf-common';
import { FrameworkService, AppService, FrmEventBus, FuncsService } from '@gsp-sys/rtf-common';
import { BusinessObjectRtService } from '@gsp-lcm/bo-rt-service';
import { FResponseToolbarModule } from '@farris/ui-response-toolbar';
import { ListFilterModule } from '@farris/ui-list-filter';
import { AngularDraggableModule } from '@farris/ui-draggable';
import { FarrisCommonModule } from '@farris/ui-common';
import { FarrisFormsModule } from '@farris/ui-forms';
import { FarrisSectionModule } from '@farris/ui-section';
import { EditorTypes, DatagridEditorsModule, EditorProviders } from '@farris/ui-datagrid-editors';
import { DatagridComponent, DatagridModule } from '@farris/ui-datagrid';
import { InputGroupModule } from '@farris/ui-input-group';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { SwitchModule } from '@farris/ui-switch';
import { FarrisTabsModule } from '@farris/ui-tabs';
import { ServerSideToken, LookupGridComponent, LookupModule } from '@farris/ui-lookup';
import { LoadingService, LoadingModule } from '@farris/ui-loading';
import { __spread, __values, __assign, __extends } from 'tslib';
import { ComboListModule } from '@farris/ui-combo-list';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { SelectMetadataRTComponent, GSPMetadataRTService, MetadataRTSelectModule, GSPMetadataRTServiceModule } from '@gsp-lcm/metadatart-selector';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { JsonConvertableImpl, BpmnModelJsonHelper, TextValue } from '@edp-bif/common-api';
import { CommonModelUtil } from '@gsp-bef/gsp-cm-metadata';
import { Injectable, NgModule, Pipe, Inject, LOCALE_ID, InjectionToken, Component, ViewChild, Injector, ComponentFactoryResolver, Input, Output, EventEmitter, HostBinding, ViewContainerRef, ElementRef, NgZone, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WfProcessEditorService = /** @class */ (function () {
    function WfProcessEditorService() {
    }
    WfProcessEditorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    WfProcessEditorService.ctorParameters = function () { return []; };
    /** @nocollapse */ WfProcessEditorService.ngInjectableDef = defineInjectable({ factory: function WfProcessEditorService_Factory() { return new WfProcessEditorService(); }, token: WfProcessEditorService, providedIn: "root" });
    return WfProcessEditorService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ProcessTime = {
    dt: 'dt',
    rt: 'rt',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FlowFormInfo = /** @class */ (function () {
    function FlowFormInfo() {
    }
    return FlowFormInfo;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ProcessDesignerUIState = /** @class */ (function () {
    function ProcessDesignerUIState(http) {
        this.http = http;
        // 入口单据Info
        this.flowFormInfo = new FlowFormInfo();
        // Model上下文
        this.content = '';
        // 属性框
        this.propertyConfig = [];
        this.propertyData = {};
        // 设计器地址
        this.POST_MESSAGE_TARGET = window.document.location.origin + '/platform/runtime/wf/web/designer/index.html';
        this.schemas = [];
        // 审批活动属性
        this.counterSignVariables = [];
        this.approvalItems = [];
        // 流程的审批活动节点信息
        this.userActList = [];
        // 流程包括结束和审批活动节点的信息
        this.allActList = [];
        // 流程管理员信息
        this.isAdministratorConfig = false;
        this.organizations = new Array();
        // 审批活动属性枚举===========================================================================================
        this.assignIterator = [{ key: 'ALL', value: '所有' },
            { key: 'ASSIGN', value: '指派' },
            { key: 'CLAIM', value: '领用' }];
        this.completeIterator = [{ key: 'Preempt', value: '抢占模式' },
            { key: 'Parallel', value: '并行会签' },
            { key: 'Sequential', value: '串行会签' }];
        this.completeIterator4Claim = [{ key: 'Preempt', value: '抢占模式' }];
        this.boolIterator = [{ key: true, value: '是' },
            { key: false, value: '否' }];
        // 会签不允许跳转
        this.noJump4Sign = [{ key: false, value: '否' }];
        // =================================================================================================
        // 流程实例上下文-----------------------------------------------
        this.procInstContext = [
            { key: 'dataId', name: '单据内码', description: '单据内码' },
            { key: 'procInstId', name: '流程实例ID', description: '流程实例ID' },
            { key: 'bizDefKey', name: '入口单据ID', description: '入口单据ID' },
            { key: 'processDefinitionKey', name: '流程定义KEY', description: '流程定义KEY' },
            { key: 'procInstCreator', name: '流程发起人', description: '流程发起人' },
            { key: 'procInstDescription', name: '流程摘要', description: '流程摘要' },
            { key: 'comment', name: '审批意见', description: '审批意见' }
        ];
        // 催办上下文--------------------------------------------------
        this.urgeContext = [
            { key: 'dataId', name: '单据内码', description: '单据内码' },
            { key: 'procInstId', name: '流程实例ID', description: '流程实例ID' },
            { key: 'bizDefKey', name: '入口单据ID', description: '入口单据ID' },
            { key: 'processDefinitionKey', name: '流程定义KEY', description: '流程定义KEY' },
            { key: 'procInstCreator', name: '流程发起人', description: '流程发起人' },
            { key: 'procInstDescription', name: '流程摘要', description: '流程摘要' },
            { key: 'comment', name: '审批意见', description: '审批意见' },
            { key: 'bizDefName', name: '流程分类名称', description: '流程分类名称' },
            { key: 'curLoginUsername', name: '当前登录人名称', description: '当前登录人名称' },
            { key: 'procInstCreatorName', name: '流程发起人名称', description: '流程发起人名称' }
        ];
        /**
         * 流程参数上下文
         */
        this.formalParameterContext = [];
        /**
         * 参与者上下文
         */
        this.participantContext = [
            {
                key: 'procInstCreator',
                name: '流程发起人',
                description: '流程发起人'
            }, {
                key: 'currentUser',
                name: '当前执行人',
                description: '当前执行人'
            }, {
                key: 'preActExecutors',
                name: '上一个活动的执行人',
                description: '上一个活动的执行人'
            }
        ];
        /**
         * 活动构件参数上下文
         */
        this.activityComponentContext = [
            {
                key: 'conclusionType',
                name: '结论类型',
                description: '审批项流转方向，1正向，2反向，3终止'
            }, {
                key: 'conclusionValue',
                name: '结论值',
                description: '审批项编号，例如，"Pass"、"Back"、"Refuse"'
            }
        ];
        this.processVariableContext = new Array();
        this.processVariables = new Array();
        /**
         * 汇报级次
         */
        this.dimensions = [
            { value: 'directSuperior', text: '直接上级' },
            { value: 'higherSuperior', text: '间接上级' }
        ];
        /**
         * 启动方式
         */
        this.startModeIterator = [
            { key: 'DIRECT', value: '直接' },
            { key: 'EXTERNAL_PROCESS', value: '外部流程' },
            { key: 'SUB_PROCESS', value: '子流程' }
        ];
        /**
         * 显示终端
         */
        this.displayTerminal = [
            { key: "ALL", value: '电脑端和移动端' },
            { key: "WEB", value: '电脑端' },
            { key: "APP", value: '移动端' }
        ];
        /**
         * 消息渠道列表
         */
        this.messageChannels = new Array();
        this.orgTypeCollection = [];
    }
    Object.defineProperty(ProcessDesignerUIState.prototype, "ProcessVariables", {
        get: /**
         * @return {?}
         */
        function () {
            return this.processVariables;
        },
        set: /**
         * @param {?} variables
         * @return {?}
         */
        function (variables) {
            this.processVariables = variables;
            this.setProcessVariableContext();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} key
     * @return {?}
     */
    ProcessDesignerUIState.prototype.variableContextName = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.participantContext.find((/**
         * @param {?} i
         * @return {?}
         */
        function (i) { return i.key === key; })).name;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ProcessDesignerUIState.prototype.ranksName = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.dimensions.find((/**
         * @param {?} i
         * @return {?}
         */
        function (i) { return i.value === value; })).text;
    };
    /**
     * @return {?}
     */
    ProcessDesignerUIState.prototype.getMessageChannels = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var url = '/api/runtime/sys/v1.0/messageplatform/channel/getenabledchannels';
        this.http.get(url).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            _this.messageChannels = re;
        }));
    };
    /**
     * @return {?}
     */
    ProcessDesignerUIState.prototype.getAdministratorInfo = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.getCurrentUser().subscribe((/**
         * @param {?} user
         * @return {?}
         */
        function (user) {
            /** @type {?} */
            var userId = user.userId;
            forkJoin(_this.getAdministratorConfig(), _this.getAdministrator(userId)).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                _this.isAdministratorConfig = re[0].currentValue === 'true' ? true : false;
                _this.administrator = re[1];
                if (_this.isAdministratorConfig && _this.administrator && _this.administrator.enable) {
                    forkJoin(_this.administrator.administratorAuthorities.map((/**
                     * @param {?} a
                     * @return {?}
                     */
                    function (a) {
                        if (a.includeSubordinate) {
                            return _this.getSysOrgWithAllSubsById(a.organization);
                        }
                        else {
                            return _this.getSysOrgById(a.organization);
                        }
                    }))).subscribe((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) {
                        var e_1, _a, e_2, _b;
                        if (r && r.length > 0) {
                            _this.organizations = new Array();
                            try {
                                for (var r_1 = __values(r), r_1_1 = r_1.next(); !r_1_1.done; r_1_1 = r_1.next()) {
                                    var orgs = r_1_1.value;
                                    if (orgs && orgs.length > 0) {
                                        var _loop_1 = function (o) {
                                            if (!_this.organizations.some((/**
                                             * @param {?} org
                                             * @return {?}
                                             */
                                            function (org) { return org.id === o.id; }))) {
                                                _this.organizations.push(o);
                                            }
                                        };
                                        try {
                                            for (var orgs_1 = __values(orgs), orgs_1_1 = orgs_1.next(); !orgs_1_1.done; orgs_1_1 = orgs_1.next()) {
                                                var o = orgs_1_1.value;
                                                _loop_1(o);
                                            }
                                        }
                                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                        finally {
                                            try {
                                                if (orgs_1_1 && !orgs_1_1.done && (_b = orgs_1.return)) _b.call(orgs_1);
                                            }
                                            finally { if (e_2) throw e_2.error; }
                                        }
                                    }
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (r_1_1 && !r_1_1.done && (_a = r_1.return)) _a.call(r_1);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                        }
                    }));
                }
            }));
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ProcessDesignerUIState.prototype.getCurrentUser = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var url = '/api/runtime/sys/v1.0/userinfos?infoType=user';
        return this.http.get(url);
    };
    /**
     * @private
     * @param {?} userId
     * @return {?}
     */
    ProcessDesignerUIState.prototype.getAdministrator = /**
     * @private
     * @param {?} userId
     * @return {?}
     */
    function (userId) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/processAdministrator/" + userId;
        return this.http.get(url);
    };
    /**
     * @private
     * @return {?}
     */
    ProcessDesignerUIState.prototype.getAdministratorConfig = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/generalConfig/Is_EnableAdministrator";
        return this.http.get(url);
    };
    /**
     * @private
     * @param {?} orgId
     * @return {?}
     */
    ProcessDesignerUIState.prototype.getSysOrgById = /**
     * @private
     * @param {?} orgId
     * @return {?}
     */
    function (orgId) {
        /** @type {?} */
        var url = "/api/runtime/sys/v1.0/sysOrgs/" + orgId;
        return this.http.get(url);
    };
    /**
     * @private
     * @param {?} orgId
     * @return {?}
     */
    ProcessDesignerUIState.prototype.getSysOrgWithAllSubsById = /**
     * @private
     * @param {?} orgId
     * @return {?}
     */
    function (orgId) {
        /** @type {?} */
        var url = "/api/runtime/sys/v1.0/sysOrgs?param=" + encodeURIComponent("{\"parentId\":\"" + orgId + "\",\"withAllSub\":true}");
        return this.http.get(url);
    };
    /**
     * @private
     * @param {?} userId
     * @return {?}
     */
    ProcessDesignerUIState.prototype.getCurUserInfo = /**
     * @private
     * @param {?} userId
     * @return {?}
     */
    function (userId) {
        /** @type {?} */
        var url = "/api/runtime/sys/v1.0/users/" + userId;
        return this.http.get(url);
    };
    /**
     * @private
     * @return {?}
     */
    ProcessDesignerUIState.prototype.setProcessVariableContext = /**
     * @private
     * @return {?}
     */
    function () {
        var e_3, _a;
        this.processVariableContext = new Array();
        if (this.ProcessVariables && this.ProcessVariables.length > 0) {
            try {
                for (var _b = __values(this.ProcessVariables), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var v = _c.value;
                    /** @type {?} */
                    var varEntity = {
                        key: v.name,
                        name: v.documentation,
                        description: v.description
                    };
                    this.processVariableContext.push(varEntity);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
    };
    /**
     * 获取框架的顶级window
     * 进行跨域封装
     */
    /**
     * 获取框架的顶级window
     * 进行跨域封装
     * @private
     * @return {?}
     */
    ProcessDesignerUIState.prototype.getTopWindow = /**
     * 获取框架的顶级window
     * 进行跨域封装
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var curWin = window.self;
        try {
            while (curWin.location.origin === curWin.parent.location.origin) {
                if (curWin !== curWin.parent && !((/** @type {?} */ (curWin))).isRTFTopWin) {
                    curWin = curWin.parent;
                }
                else {
                    break;
                }
            }
        }
        catch (e) { }
        return curWin;
    };
    // --------------------------0-------------------------
    // uiState初始
    // --------------------------0-------------------------
    // uiState初始
    /**
     * @return {?}
     */
    ProcessDesignerUIState.prototype.initUIState = 
    // --------------------------0-------------------------
    // uiState初始
    /**
     * @return {?}
     */
    function () {
        this.propertyConfig = [];
        this.propertyData = null;
        this.content = '';
        this.schemas = [];
    };
    /**
     * 获取所有审批节点信息
     * @param data
     */
    /**
     * 获取所有审批节点信息
     * @param {?} data
     * @return {?}
     */
    ProcessDesignerUIState.prototype.getUserActList = /**
     * 获取所有审批节点信息
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var e_4, _a;
        this.userActList = [];
        if (data && data.length > 0) {
            try {
                for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                    var userAct = data_1_1.value;
                    /** @type {?} */
                    var userActInfo = {
                        Id: userAct.Id,
                        Name: userAct.Name
                    };
                    this.userActList.push(userActInfo);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
    };
    /**
     * 获取所有结束节点信息
     * @param data
     */
    /**
     * 获取所有结束节点信息
     * @param {?} data
     * @return {?}
     */
    ProcessDesignerUIState.prototype.getEndEventList = /**
     * 获取所有结束节点信息
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var e_5, _a;
        this.allActList = [];
        if (data && data.length > 0) {
            try {
                for (var data_2 = __values(data), data_2_1 = data_2.next(); !data_2_1.done; data_2_1 = data_2.next()) {
                    var endEvent = data_2_1.value;
                    /** @type {?} */
                    var endEventInfo = {
                        Id: endEvent.Id,
                        Name: endEvent.Name
                    };
                    // 取结束节点存到
                    this.allActList.push(endEventInfo);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (data_2_1 && !data_2_1.done && (_a = data_2.return)) _a.call(data_2);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        // 存入审批活动节点
        this.allActList = this.allActList.concat(this.userActList);
    };
    ProcessDesignerUIState.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ProcessDesignerUIState.ctorParameters = function () { return [
        { type: HttpService }
    ]; };
    return ProcessDesignerUIState;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ResourceKeys = {
    // 发出动作
    new: 'new',
    open: 'open',
    updateProperty: 'updateProperty',
    refresh: 'refresh',
    loadBizActivity: 'loadBizActivity',
    // 接受消息
    wf_initProperty: 'initProperty',
    wf_save: 'save',
    wf_saveAs: 'saveAs',
    wf_sync: 'wf_sync',
    wf_note: 'wf_note',
    wf_deploy: 'release',
    wf_closeDesigner: 'closeDesigner',
    getActivities: 'getActivities',
    getEndEvents: 'getEndEvents',
    wf_showTip: 'showTip',
    /**
     * 属性名称
     */
    EntryForm: 'EntryForm',
    ConditionExpression: 'ConditionExpression',
    ParticipantSchemes: 'ParticipantSchemes',
    ApprovalItems: 'ApprovalItems',
    AssignStrategy: 'AssignStrategy',
    OperatorConfig: 'OperatorConfig',
    CompleteStrategy: 'CompleteStrategy',
    SignRule: 'SignRule',
    Retrievable: 'Retrievable',
    AddSignFrontAble: 'AddSignFrontAble',
    AddSignBehindAble: 'AddSignBehindAble',
    NotifyAble: 'NotifyAble',
    DisplayTerminal: 'DisplayTerminal',
    ExecuteForms: 'ExecuteForms',
    sendBackedTask: 'sendBackedTask',
    SelectTargetAble: 'SelectTargetAble',
    JumpScope: 'JumpScope',
    BackWardRule: 'BackWardRule',
    Tools: 'Tools',
    SelectBranch: 'SelectBranch',
    Default: 'Default',
    allowPreAssign: 'allowPreAssign',
    startMode: 'startMode',
    transferScope: 'transferScope',
    eventDefinitions: 'EventDefinitions',
    urgeHandleRule: 'urgeHandleRule',
    // 子流程
    callActivitySubProcess: 'callActivitySubProcess',
    wf_Component: 'wf_Component',
    wf_ExecuteForms: 'wf_ExecuteForms',
    wf_ExecuteForms_PC: 'wf_ExecuteForms_PC',
    wf_ExecuteForms_Mobile: 'wf_ExecuteForms_Mobile',
    wf_TitleExpression: 'wf_TitleExpression',
    wf_CustomizeAction: 'wf_CustomizeAction',
    timeLimitControl: 'timeLimitControl',
    anonymousSet: 'anonymousSet',
    processVariables: 'processVariables',
    variableSettings: 'variableSettings',
    messageNotice: 'messageNotice',
    approvalPivotConfig: 'approvalPivotConfig',
    // state
    complete: 'complete',
    // 单据流编号
    aifProcessCode: 'aifProcessCode',
    // isRelied
    isRelied: 'isRelied',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ProcessDeUtil = /** @class */ (function () {
    function ProcessDeUtil() {
    }
    /**
     * @return {?}
     */
    ProcessDeUtil.GenerateElementId = /**
     * @return {?}
     */
    function () {
        ++(this.generatedId);
        return '_' + this.Decimal2String(this.generatedId);
    };
    /**
     * @private
     * @param {?} a
     * @return {?}
     */
    ProcessDeUtil.Decimal2String = /**
     * @private
     * @param {?} a
     * @return {?}
     */
    function (a) {
        /** @type {?} */
        var c;
        /** @type {?} */
        var b = '';
        do {
            c = a % this.exponent, b = this.keys[c] + b, a = (a - c) / this.exponent;
        } while (a > 0);
        return b;
    };
    /**
     * 创建内码
     */
    /**
     * 创建内码
     * @return {?}
     */
    ProcessDeUtil.createNM = /**
     * 创建内码
     * @return {?}
     */
    function () {
        /**
         * @return {?}
         */
        function S4() {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
        // return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
        //     const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
        //     return v.toString(16);
        // });
    };
    /**
     * @return {?}
     */
    ProcessDeUtil.prototype.getProcessDesignerRouter = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var url = 'processList';
        return url;
    };
    // 获取流程分类webapi
    // 获取流程分类webapi
    /**
     * @return {?}
     */
    ProcessDeUtil.prototype.getFlowFormWebApi = 
    // 获取流程分类webapi
    /**
     * @return {?}
     */
    function () {
        return '/api/runtime/wf/v1.0/flowForm';
    };
    // 获取参数列表webapi
    // 获取参数列表webapi
    /**
     * @return {?}
     */
    ProcessDeUtil.prototype.getFormalParametersWebApi = 
    // 获取参数列表webapi
    /**
     * @return {?}
     */
    function () {
        return '/api/runtime/wf/v1.0/formalParameter';
    };
    // 获取运行时元数据webapi
    // 获取运行时元数据webapi
    /**
     * @return {?}
     */
    ProcessDeUtil.prototype.getMetaDataRUWebApi = 
    // 获取运行时元数据webapi
    /**
     * @return {?}
     */
    function () {
        return '/api/runtime/lcm/v1.0/rt-metadatas/';
    };
    // 获取流程构件webapi
    // 获取流程构件webapi
    /**
     * @return {?}
     */
    ProcessDeUtil.prototype.getBizComponentsWebApi = 
    // 获取流程构件webapi
    /**
     * @return {?}
     */
    function () {
        return '/api/runtime/wf/v1.0/bizComponent';
    };
    // 基于流程分类获取表单定义
    // 基于流程分类获取表单定义
    /**
     * @return {?}
     */
    ProcessDeUtil.prototype.getExcuteFormsWebApi = 
    // 基于流程分类获取表单定义
    /**
     * @return {?}
     */
    function () {
        return '/api/runtime/wf/v1.0/excuteForm';
    };
    // 获取设计时流程定义WebAPi
    // 获取设计时流程定义WebAPi
    /**
     * @return {?}
     */
    ProcessDeUtil.prototype.getProcessDefinitionWebApi = 
    // 获取设计时流程定义WebAPi
    /**
     * @return {?}
     */
    function () {
        return '/api/runtime/wf/v1.0/dtProcDefs';
    };
    // 判断是否允许删除流程定义的api
    // 判断是否允许删除流程定义的api
    /**
     * @return {?}
     */
    ProcessDeUtil.prototype.getCheckExistActiveProcDefApi = 
    // 判断是否允许删除流程定义的api
    /**
     * @return {?}
     */
    function () {
        return '/api/runtime/wf/v1.0/procDefs/checkExistActiveProcDef';
    };
    /**
     * 获取业务活动webApi
     */
    /**
     * 获取业务活动webApi
     * @param {?} ffId
     * @return {?}
     */
    ProcessDeUtil.prototype.getBizActivityWebApi = /**
     * 获取业务活动webApi
     * @param {?} ffId
     * @return {?}
     */
    function (ffId) {
        return "/api/runtime/wf/v1.0/bizActivity?flowFormKey=" + ffId;
    };
    /**
     * @return {?}
     */
    ProcessDeUtil.prototype.getProcDefKeyWebApi = /**
     * @return {?}
     */
    function () {
        return '/api/runtime/wf/v1.0/procDefs/processDefinitionKeys';
    };
    // /**
    //  * 业务活动构件webApi
    //  */
    // getBizActCptWebApi() {
    //     return '/api/runtime/wf/v1.0/BizActivities/GetComponents';
    // }
    /**
     * 发布流程api
     */
    // /**
    //  * 业务活动构件webApi
    //  */
    // getBizActCptWebApi() {
    //     return '/api/runtime/wf/v1.0/BizActivities/GetComponents';
    // }
    /**
     * 发布流程api
     * @return {?}
     */
    ProcessDeUtil.prototype.deployWebApi = 
    // /**
    //  * 业务活动构件webApi
    //  */
    // getBizActCptWebApi() {
    //     return '/api/runtime/wf/v1.0/BizActivities/GetComponents';
    // }
    /**
     * 发布流程api
     * @return {?}
     */
    function () {
        return '/api/runtime/wf/v1.0/procDefs/deploy';
    };
    /**
     * 保存流程api
     */
    /**
     * 保存流程api
     * @return {?}
     */
    ProcessDeUtil.prototype.saveWebApi = /**
     * 保存流程api
     * @return {?}
     */
    function () {
        return '/api/runtime/wf/v1.0/DTProcessDefinitions/SaveBpmnModel';
    };
    /**
     * 获取审批动作webapi
     */
    /**
     * 获取审批动作webapi
     * @return {?}
     */
    ProcessDeUtil.prototype.getApprovalActionWebApi = /**
     * 获取审批动作webapi
     * @return {?}
     */
    function () {
        return '/api/runtime/wf/v1.0/approvalAction';
    };
    /**
     * 获取运行时流程定义WebAPi
     */
    /**
     * 获取运行时流程定义WebAPi
     * @return {?}
     */
    ProcessDeUtil.prototype.getRTProcessDefinitionWebApi = /**
     * 获取运行时流程定义WebAPi
     * @return {?}
     */
    function () {
        return '/api/runtime/wf/v1.0/procDefs';
    };
    /**
     * @param {?} data
     * @param {?} code
     * @return {?}
     */
    ProcessDeUtil.prototype.getValue = /**
     * @param {?} data
     * @param {?} code
     * @return {?}
     */
    function (data, code) {
        if (!code) {
            return '';
        }
        /** @type {?} */
        var resultVal = '';
        if (code.indexOf('.') === -1) {
            resultVal = data[code];
        }
        else {
            resultVal = code.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            function (obj, key) {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), data);
        }
        return resultVal;
    };
    /**
     * 转换
     * @param jsonObj Object
     */
    /**
     * 转换
     * @param {?} jsonObj Object
     * @return {?}
     */
    ProcessDeUtil.prototype.toUpperCase = /**
     * 转换
     * @param {?} jsonObj Object
     * @return {?}
     */
    function (jsonObj) {
        var e_1, _a;
        if (typeof (jsonObj) === 'object') {
            try {
                for (var _b = __values(Object.keys(jsonObj)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    jsonObj[key.substring(0, 1).toUpperCase() + key.substring(1)] = jsonObj[key];
                    delete (jsonObj[key]);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return jsonObj;
    };
    /**
     * @param {?} jsonObj
     * @return {?}
     */
    ProcessDeUtil.prototype.toLowCase = /**
     * @param {?} jsonObj
     * @return {?}
     */
    function (jsonObj) {
        var e_2, _a;
        if (typeof (jsonObj) === 'object') {
            try {
                for (var _b = __values(Object.keys(jsonObj)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    if ((key.substring(0, 1).toLowerCase() + key.substring(1)) !== key) {
                        jsonObj[key.substring(0, 1).toLowerCase() + key.substring(1)] = jsonObj[key];
                        delete (jsonObj[key]);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return jsonObj;
    };
    ProcessDeUtil.generatedId = parseInt(Date.now().toString());
    ProcessDeUtil.keys = '0123456789ABCDEFGHJKLMNPQRSTUVWXYZ';
    ProcessDeUtil.exponent = 34;
    ProcessDeUtil.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ProcessDeUtil.ctorParameters = function () { return []; };
    return ProcessDeUtil;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ProcessDesignerDataService = /** @class */ (function () {
    function ProcessDesignerDataService(http, util) {
        this.http = http;
        this.util = util;
    }
    // 基于流程分类ID获取流程分类信息
    // 基于流程分类ID获取流程分类信息
    /**
     * @param {?} id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.GetFlowFormbyId = 
    // 基于流程分类ID获取流程分类信息
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            /** @type {?} */
            var url = this.util.getFlowFormWebApi();
            url += "/" + id;
            return this.http.get(url);
        }
    };
    // 基于流程分类获取参数列表
    // 基于流程分类获取参数列表
    /**
     * @param {?} id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getParametersbyFlowFormKey = 
    // 基于流程分类获取参数列表
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            /** @type {?} */
            var url = this.util.getFormalParametersWebApi();
            url += "?flowFormKey=" + id;
            return this.http.get(url);
        }
    };
    // 基于流程分类获取流程构件
    // 基于流程分类获取流程构件
    /**
     * @param {?} id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getComponentsbyFlowformkey = 
    // 基于流程分类获取流程构件
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            /** @type {?} */
            var url = this.util.getBizComponentsWebApi();
            url += "/query?param=" + encodeURIComponent("{\"flowFormKey\":\"" + id + "\"}");
            return this.http.get(url);
        }
    };
    // 基于流程分类获取表单定义
    // 基于流程分类获取表单定义
    /**
     * @param {?} id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getExecuteFormbyFlowFormKey = 
    // 基于流程分类获取表单定义
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            /** @type {?} */
            var url = this.util.getExcuteFormsWebApi();
            url += "?flowFormKey=" + id;
            return this.http.get(url);
        }
    };
    /**
     * 基于流程分类Id获取业务活动
     * @param ffId 流程分类id
     */
    /**
     * 基于流程分类Id获取业务活动
     * @param {?} ffId 流程分类id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getBizActivities = /**
     * 基于流程分类Id获取业务活动
     * @param {?} ffId 流程分类id
     * @return {?}
     */
    function (ffId) {
        if (ffId) {
            /** @type {?} */
            var url = this.util.getBizActivityWebApi(ffId);
            return this.http.get(url);
            // .pipe(
            //     map((re: any) => re),
            //     mergeMap((activities: any[]) => {
            //         if (activities && activities.length > 0) {
            //             return forkJoin(activities.map(activity => {
            //                 return forkJoin(this.getBizActivityComponents(ffId, activity.id),
            //                     this.getBizActivityActions(activity.id))
            //                     .pipe(
            //                         map((re: any[]) => {
            //                             activity.components = re[0];
            //                             activity.actions = re[1];
            //                             return activity;
            //                         }));
            //             }));
            //         } else {
            //             return of([]);
            //         }
            //     })
            // );
        }
    };
    /**
     * 基于流程分类ID获取自定义动作
     * @param formId 流程分类ID
     */
    /**
     * 基于流程分类ID获取自定义动作
     * @param {?} formId 流程分类ID
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getCustomizeActions = /**
     * 基于流程分类ID获取自定义动作
     * @param {?} formId 流程分类ID
     * @return {?}
     */
    function (formId) {
        if (formId) {
            /** @type {?} */
            var url = "/api/runtime/wf/v1.0/customizeAction?flowFormKey=" + formId;
            return this.http.get(url);
        }
    };
    /**
     * 基于业务活动id获取业务活动构件
     * @param id 业务活动id
     */
    /**
     * 基于业务活动id获取业务活动构件
     * @private
     * @param {?} flowFormId
     * @param {?} id 业务活动id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getBizActivityComponents = /**
     * 基于业务活动id获取业务活动构件
     * @private
     * @param {?} flowFormId
     * @param {?} id 业务活动id
     * @return {?}
     */
    function (flowFormId, id) {
        if (id) {
            /** @type {?} */
            var url = this.util.getBizComponentsWebApi();
            url += "/query?param=" + encodeURIComponent("{\"flowFormKey\":\"" + flowFormId + "\",\"owner\":\"" + id + "\",\"ownerType\":\"Activity\"}");
            return this.http.get(url);
        }
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getBizActivityActions = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            /** @type {?} */
            var url = this.util.getApprovalActionWebApi();
            url += "?bizActivityId=" + id;
            return this.http.get(url);
        }
    };
    // 基于ID获取BE
    // 基于ID获取BE
    /**
     * @param {?} id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getBusinessEntitybyId = 
    // 基于ID获取BE
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            // let url = this.util.getMetaDataRUWebApi();
            // url += id;
            // const url = `/api/runtime/lcm/v1.0/bef/handledBeMeta?beId=${id}`;
            /** @type {?} */
            var url = "/api/runtime/lcm/v1.0/bef/expression?beId=" + id;
            return this.http.get(url);
        }
    };
    /**
     * 基于流程定义Key获取上下文
     * @param key 流程定义key
     */
    /**
     * 基于流程定义Key获取上下文
     * @param {?} key 流程定义key
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getProcContentbyKey = /**
     * 基于流程定义Key获取上下文
     * @param {?} key 流程定义key
     * @return {?}
     */
    function (key) {
        if (key) {
            /** @type {?} */
            var url = this.util.getProcessDefinitionWebApi();
            url += "/bpmnModel?procDefKey=" + key;
            return this.http.get(url);
        }
    };
    /**
     * 基于流程定义Key获取上下文
     * @param key 流程定义Id
     */
    /**
     * 基于流程定义Key获取上下文
     * @param {?} id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getRTProcContentbyId = /**
     * 基于流程定义Key获取上下文
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            /** @type {?} */
            var url = this.util.getRTProcessDefinitionWebApi();
            url += "/" + id + "/bpmnModel";
            return this.http.get(url);
        }
    };
    /**
     * 保存流程
     * @param content
     */
    /**
     * 保存流程
     * @param {?} content
     * @param {?} processInfo
     * @param {?} state
     * @return {?}
     */
    ProcessDesignerDataService.prototype.saveProcess = /**
     * 保存流程
     * @param {?} content
     * @param {?} processInfo
     * @param {?} state
     * @return {?}
     */
    function (content, processInfo, state) {
        if (content) {
            /** @type {?} */
            var postData = {
                organization: processInfo.procOrg ? processInfo.procOrg.orgId : '',
                organizationName: processInfo.procOrg ? processInfo.procOrg.orgName : '',
                accessLevel: processInfo.accessLevel,
                procContent: content,
                state: state
            };
            /** @type {?} */
            var url = this.util.getProcessDefinitionWebApi();
            return this.http.post(url, JSON.stringify(postData));
        }
    };
    /**
     * @param {?} info
     * @return {?}
     */
    ProcessDesignerDataService.prototype.auditProcessDef = /**
     * @param {?} info
     * @return {?}
     */
    function (info) {
        /** @type {?} */
        var url = '/api/runtime/wf/v1.0/dtProcDefs/auditProcessDef';
        this.http.post(url, info).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) { }));
    };
    /**
     * 发布流程
     * @param content
     */
    /**
     * 发布流程
     * @param {?} content
     * @return {?}
     */
    ProcessDesignerDataService.prototype.deployProcess = /**
     * 发布流程
     * @param {?} content
     * @return {?}
     */
    function (content) {
        if (content) {
            /** @type {?} */
            var postData = {
                procDefContent: content
            };
            /** @type {?} */
            var url = this.util.deployWebApi();
            return this.http.post(url, JSON.stringify(postData));
        }
    };
    /**
     * @param {?} content
     * @param {?} procDefId
     * @return {?}
     */
    ProcessDesignerDataService.prototype.saveRTProcess = /**
     * @param {?} content
     * @param {?} procDefId
     * @return {?}
     */
    function (content, procDefId) {
        if (content) {
            /** @type {?} */
            var postData = {
                procDefContent: content
            };
            /** @type {?} */
            var url = this.util.getRTProcessDefinitionWebApi();
            url += "/" + procDefId + "/adjust";
            return this.http.post(url, JSON.stringify(postData));
        }
    };
    /**
     * @param {?} content
     * @param {?} rtProcessInfo
     * @return {?}
     */
    ProcessDesignerDataService.prototype.syncDtProcess = /**
     * @param {?} content
     * @param {?} rtProcessInfo
     * @return {?}
     */
    function (content, rtProcessInfo) {
        if (content) {
            /** @type {?} */
            var postData = {
                organization: rtProcessInfo.procOrg ? rtProcessInfo.procOrg.orgId : '',
                organizationName: rtProcessInfo.procOrg ? rtProcessInfo.procOrg.orgName : '',
                accessLevel: rtProcessInfo.accessLevel || 'public',
                procContent: content,
                state: 0
            };
            /** @type {?} */
            var url = '/api/runtime/wf/v1.0/dtProcDefs';
            return this.http.post(url, JSON.stringify(postData));
        }
    };
    ProcessDesignerDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ProcessDesignerDataService.ctorParameters = function () { return [
        { type: HttpService },
        { type: ProcessDeUtil }
    ]; };
    return ProcessDesignerDataService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var ProcessClrTypeID = {
    /**
     * 流程typeId
     */
    process: 'bpmn.Process',
    /**
     * 开始活动typeId
     */
    startActivity: 'wf.StartActivity',
    /**
     * 活动节点typeId
     */
    userActivity: 'wf.UserActivity',
    /**
     * 人工操作typeId
     */
    operationActivity: 'wf.OperationActivity',
    /**
     * 结束活动typeId
     */
    endEvent: 'bpmn.EndEvent',
    /**
     * 流转线typeId
     */
    sequenceFlow: 'bpmn.SequenceFlow',
    /**
     * 排他网关typeId
     */
    exclusiveGateway: 'bpmn.ExclusiveGateway',
    /**
     * 并行网关typeId
     */
    parallelGateway: 'bpmn.ParallelGateway',
    /**
     * 子流程
     */
    subProcess: 'wf.CallActivitySubProcess',
    /**
     * 服务活动
     */
    autoActivity: 'wf.AutoActivity',
    /**
     * 信号捕获
     */
    catchEvent: 'wf.IntermediateCatchEventImpl',
    /**
     * 消息
     */
    messageActivity: 'wf.MessageActivity',
    /**
     * 知会活动
     */
    notifyActivity: "wf.NotifyActivity",
    /**
     * 生单活动
     */
    aifCreationBillActivity: "wf.AifCreationBillActivity",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EntryFormEditorComponent = /** @class */ (function () {
    function EntryFormEditorComponent(http, message) {
        this.http = http;
        this.message = message;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: '流程分类',
            width: 540,
            height: 520,
            showButtons: true
        };
        this.columns = [
            { title: '编号', field: 'code', width: 100, sortable: true },
            { title: '名称', field: 'name', width: 100, sortable: true },
            { title: '类型', field: 'base', width: 60, formatter: { type: 'boolean', options: { trueText: '基础', falseText: '扩展' } } }
        ];
        this.data = [];
    }
    Object.defineProperty(EntryFormEditorComponent.prototype, "value", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this.flowFormId = data.id;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    EntryFormEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getBaseAndExtendFlowForm();
    };
    /**
     * @return {?}
     */
    EntryFormEditorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    EntryFormEditorComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        if (!this.grid.selectedRow) {
            this.message.info('尚未选择流程分类');
            return;
        }
        /** @type {?} */
        var object = { value: this.grid.selectedRow.data, parameters: null };
        this.submitModal.emit(object);
    };
    /**
     * @return {?}
     */
    EntryFormEditorComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @private
     * @return {?}
     */
    EntryFormEditorComponent.prototype.getBaseAndExtendFlowForm = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.flowFormId) {
            /** @type {?} */
            var url = "/api/runtime/wf/v1.0/flowForm/" + this.flowFormId + "/baseAndExtend";
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                if (re && re.length > 0) {
                    _this.data = re;
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.grid.selectRow(_this.flowFormId, true);
                    }), 0);
                }
                else {
                    _this.message.info('流程分类已经不存在');
                }
            }));
        }
    };
    EntryFormEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-entry-form-editor',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"data\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n         [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\" [showLineNumber]=\"true\" [lineNumberTitle]=\"'\u5E8F\u53F7'\" \r\n         [lineNumberWidth]=\"50\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #iconSelectFooter>\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u91CD\u65B0\u7ED1\u5B9A</button>\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    EntryFormEditorComponent.ctorParameters = function () { return [
        { type: HttpService },
        { type: MessagerService }
    ]; };
    EntryFormEditorComponent.propDecorators = {
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        grid: [{ type: ViewChild, args: ['grid',] }],
        editorParams: [{ type: Input }]
    };
    return EntryFormEditorComponent;
}());
var FlowFormConverter = /** @class */ (function () {
    function FlowFormConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    FlowFormConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data) {
            return data.name;
        }
    };
    return FlowFormConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ActivityComponentUIState = /** @class */ (function () {
    function ActivityComponentUIState() {
        /**
         * 构件列表
         */
        this.components = [];
        /**
         * 流程分类绑定的所有活动构件
         */
        this.allComponents = [];
        /**
         * 构件执行时机数据绑定
         */
        this.executionCollection = [
            // { text: '流程创建', value: 'PROCESSINSTANCE_CREATED' },
            { text: '流程启动', value: 'PROCESSINSTANCE_STARTED' },
            { text: '流程挂起', value: 'PROCESSINSTANCE_SUSPENDED' },
            { text: '流程恢复', value: 'PROCESSINSTANCE_RESUMED' },
            { text: '流程完成', value: 'PROCESSINSTANCE_COMPLETED' },
            { text: '流程终止', value: 'PROCESSINSTANCE_ABORTED' },
            // { text: '流程预警', value: 'PROCESSINSTANCE_ALARM' },
            // { text: '流程超时', value: 'PROCESSINSTANCE_TIMEOUT' },
            // { text: '流程删除', value: 'PROCESSINSTANCE_DELETED' },
            { text: '流程取消', value: 'PROCESSINSTANCE_CANCELED' },
            { text: '流程复活', value: 'PROCESSINSTANCE_REACTIVATED' },
            { text: '流程驳回', value: 'PROCESSINSTANCE_ROLLBACK' },
            { text: '重新提交', value: 'PROCESSINSTANCE_RESUBMIT' },
            { text: '环节办理人变更', value: 'ACTIVITY_AND_PARTICIPANT_UPDATED' },
            { text: '管理员终止', value: 'PROCESSINSTANCE_ABORTED_BY_ADMIN' },
            { text: '流程启动前', value: 'PROCESSINSTANCE_BEFORE_START' },
            { text: '任务完成前', value: 'WORKITEM_BEFORE_COMPLETE' },
            { text: '任务完成后', value: 'WORKITEM_AFTER_COMPLETE' },
            { text: '获取数据', value: 'LOADDATA' }
        ];
        this.activityCollection = [
            // { text: '活动创建', value: 'ACTIVITY_CREATED' },
            { text: '活动启动', value: 'ACTIVITY_STARTED' },
            // { text: '活动挂起', value: 'ACTIVITY_SUSPENDED' },
            // { text: '活动恢复', value: 'ACTIVITY_RESUMED' },
            { text: '活动完成', value: 'ACTIVITY_COMPLETED' },
            { text: '活动终止', value: 'ACTIVITY_ABORTED' },
            { text: '工作项创建', value: 'WORKITEM_CREATED' },
            { text: '工作项完成', value: 'WORKITEM_COMPLETED' },
            { text: '工作项挂起', value: 'WORKITEM_SUSPENDED' },
            { text: '工作项恢复', value: 'WORKITEM_RESUMED' },
            { text: '工作项终止', value: 'WORKITEM_ABORTED' },
            { text: '工作项取回', value: 'WORKITEM_RETRIEVED' },
            { text: '工作项领用', value: 'WORKITEM_CLAIMED' },
            { text: '工作项反领用', value: 'WORKITEM_UNCLAIMED' },
            { text: '任务分配前', value: 'ACTIVITY_ASSIGNMENT' }
        ];
    }
    ActivityComponentUIState.decorators = [
        { type: Injectable }
    ];
    return ActivityComponentUIState;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BizComponentEntity = /** @class */ (function () {
    function BizComponentEntity(name, metadataid, method) {
        this.id = ProcessDeUtil.GenerateElementId();
        this.name = name;
        this.metadataId = metadataid;
        this.methodCode = method;
        this.isForCompensation = false;
    }
    return BizComponentEntity;
}());
/** @enum {string} */
var OwnerType = {
    Process: 'Process',
    Activity: 'Activity',
    Schema: 'Schema',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ActivityComponentRepository = /** @class */ (function () {
    function ActivityComponentRepository(uistate, util, http, designerState) {
        this.uistate = uistate;
        this.util = util;
        this.http = http;
        this.designerState = designerState;
        this.defaultProcessComponentIds = ['5863c8a8-e0a7-4137-a8b2-4c05e42b3b73', 'be781ba1-a88b-4bb8-9c88-2e2a27a9226e'];
        this.subject = new Subject();
    }
    /**
     * @param {?} flowFormId
     * @param {?} bizActId
     * @return {?}
     */
    ActivityComponentRepository.prototype.loadComponents = /**
     * @param {?} flowFormId
     * @param {?} bizActId
     * @return {?}
     */
    function (flowFormId, bizActId) {
        var _this = this;
        /** @type {?} */
        var url = this.util.getBizComponentsWebApi();
        if (bizActId) {
            url += "/query?param=" + encodeURIComponent("{\"flowFormKey\":\"" + flowFormId + "\",\"owner\":\"" + bizActId + "\",\"ownerType\":\"Activity\"}");
        }
        else {
            this.uistate.allComponents = [];
            return;
        }
        this.http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.uistate.allComponents = data.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.ownerType === OwnerType.Activity; }));
        }));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ActivityComponentRepository.prototype.removeComponent = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            /** @type {?} */
            var index = this.uistate.components.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.id === id; }));
            if (index > -1) {
                this.uistate.components.splice(index, 1);
                if (this.uistate.components.length > 0) {
                    this.subject.next(this.uistate.components[0]);
                }
                else {
                    this.uistate.curComponent = null;
                }
            }
        }
    };
    /**
     * @param {?} cpt
     * @return {?}
     */
    ActivityComponentRepository.prototype.addComponent = /**
     * @param {?} cpt
     * @return {?}
     */
    function (cpt) {
        if (cpt) {
            /** @type {?} */
            var component = new BizComponentEntity(cpt.name, cpt.id, cpt.operations[0].code);
            component.id = ProcessDeUtil.GenerateElementId();
            component.actualParameters = this.bindParas(cpt);
            this.uistate.components.push(component);
            this.subject.next(component);
        }
    };
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    ActivityComponentRepository.prototype.bindParas = /**
     * @private
     * @param {?} component
     * @return {?}
     */
    function (component) {
        /** @type {?} */
        var parameters = [];
        if (component.operations[0].parameters && component.operations[0].parameters.length > 0) {
            if (this.defaultProcessComponentIds.indexOf(component.id) > -1) {
                parameters = this.assignParameterValue(component.operations[0].parameters);
            }
            else {
                parameters = component.operations[0].parameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return ({ code: p.code, name: p.name, value: '' }); }));
            }
        }
        return parameters;
    };
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    ActivityComponentRepository.prototype.assignParameterValue = /**
     * @private
     * @param {?} params
     * @return {?}
     */
    function (params) {
        var _this = this;
        return params.map((/**
         * @param {?} p
         * @return {?}
         */
        function (p) {
            if (p.code.indexOf('beId') > -1) {
                /** @type {?} */
                var v = _this.designerState.formalParameterContext.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key.indexOf('metadataId') > -1; }))[0].key;
                return { code: p.code, name: p.name, value: "{\"expr\":\"DefaultFunction.GetContextParameter(\\\"" + v + "\\\")\"}" };
            }
            else if (p.code.indexOf('nodeId') > -1) {
                /** @type {?} */
                var v = _this.designerState.formalParameterContext.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key.indexOf('schemaId') > -1; }))[0].key;
                return { code: p.code, name: p.name, value: "{\"expr\":\"DefaultFunction.GetContextParameter(\\\"" + v + "\\\")\"}" };
            }
            else if (p.code.indexOf('dataId') > -1) {
                return { code: p.code, name: p.name, value: "{\"expr\":\"DefaultFunction.GetContextParameter(\\\"dataId\\\")\"}" };
            }
            else if (p.code.indexOf('procInstId') > -1) {
                return { code: p.code, name: p.name, value: "{\"expr\":\"DefaultFunction.GetContextParameter(\\\"procInstId\\\")\"}" };
            }
            else {
                return { code: p.code, name: p.name, value: '' };
            }
        }));
    };
    /**
     * @param {?} arr
     * @param {?} i1
     * @param {?} i2
     * @return {?}
     */
    ActivityComponentRepository.prototype.swapArray = /**
     * @param {?} arr
     * @param {?} i1
     * @param {?} i2
     * @return {?}
     */
    function (arr, i1, i2) {
        arr[i1] = arr.splice(i2, 1, arr[i1])[0];
        return arr;
    };
    ActivityComponentRepository.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ActivityComponentRepository.ctorParameters = function () { return [
        { type: ActivityComponentUIState },
        { type: ProcessDeUtil },
        { type: HttpService },
        { type: ProcessDesignerUIState }
    ]; };
    return ActivityComponentRepository;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ActivityComponentViewModel = /** @class */ (function () {
    function ActivityComponentViewModel(uistate, repository, messager) {
        this.uistate = uistate;
        this.repository = repository;
        this.messager = messager;
    }
    /**
     * @return {?}
     */
    ActivityComponentViewModel.prototype.deleteRow = /**
     * @return {?}
     */
    function () {
        if (this.uistate.curComponent) {
            if (this.uistate.curComponent.executionTime === 'LOADDATA') {
                this.messager.info('取数构件不允许删除，请了解！');
            }
            else {
                this.repository.removeComponent(this.uistate.curComponent.id);
            }
        }
        else {
            return;
        }
    };
    /**
     * @param {?} cpt
     * @return {?}
     */
    ActivityComponentViewModel.prototype.componentSelect = /**
     * @param {?} cpt
     * @return {?}
     */
    function (cpt) {
        if (cpt) {
            this.repository.addComponent(cpt);
        }
    };
    /**
     * @param {?} flowFormId
     * @param {?} bizActId
     * @return {?}
     */
    ActivityComponentViewModel.prototype.loadComponents = /**
     * @param {?} flowFormId
     * @param {?} bizActId
     * @return {?}
     */
    function (flowFormId, bizActId) {
        this.repository.loadComponents(flowFormId, bizActId);
    };
    ActivityComponentViewModel.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ActivityComponentViewModel.ctorParameters = function () { return [
        { type: ActivityComponentUIState },
        { type: ActivityComponentRepository },
        { type: MessagerService }
    ]; };
    return ActivityComponentViewModel;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ActualParameter = /** @class */ (function () {
    function ActualParameter(code, name, value) {
        this.code = code;
        this.name = name;
        this.value = value;
    }
    return ActualParameter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ActivityComponentComponent = /** @class */ (function () {
    function ActivityComponentComponent(uistate, viewModel, formBuilder, designerState, expr, resolver, injector, sessionSrc, modalService, componentService, repository, message) {
        this.uistate = uistate;
        this.viewModel = viewModel;
        this.formBuilder = formBuilder;
        this.designerState = designerState;
        this.expr = expr;
        this.resolver = resolver;
        this.injector = injector;
        this.sessionSrc = sessionSrc;
        this.modalService = modalService;
        this.componentService = componentService;
        this.repository = repository;
        this.message = message;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: '构件',
            width: 1000,
            height: 530,
            showButtons: true
        };
        this.columns = [];
        this.paramColumns = [];
        this.paramAfterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        function (rowIndex, rowData, column) {
            return of(true);
        });
    }
    Object.defineProperty(ActivityComponentComponent.prototype, "value", {
        set: /**
         * @param {?} cpts
         * @return {?}
         */
        function (cpts) {
            var e_1, _a, e_2, _b;
            if (cpts && cpts.length > 0) {
                try {
                    for (var cpts_1 = __values(cpts), cpts_1_1 = cpts_1.next(); !cpts_1_1.done; cpts_1_1 = cpts_1.next()) {
                        var cpt = cpts_1_1.value;
                        /** @type {?} */
                        var bizComponent = new BizComponentEntity(cpt.Name || cpt.name, cpt.MetadataId || cpt.metadataId, cpt.MethodCode || cpt.methodCode);
                        bizComponent.executionTime = cpt.Time || cpt.executionTime,
                            bizComponent.id = cpt.Id || cpt.id;
                        bizComponent.isForCompensation = cpt.isForCompensation;
                        bizComponent.actualParameters = [];
                        if ((cpt.ActualParameters && cpt.ActualParameters.length > 0) || (cpt.actualParameters && cpt.actualParameters.length > 0)) {
                            /** @type {?} */
                            var actualParameters = cpt.ActualParameters || cpt.actualParameters;
                            try {
                                for (var actualParameters_1 = __values(actualParameters), actualParameters_1_1 = actualParameters_1.next(); !actualParameters_1_1.done; actualParameters_1_1 = actualParameters_1.next()) {
                                    var para = actualParameters_1_1.value;
                                    /** @type {?} */
                                    var actualParameter = new ActualParameter(para.Name || para.code, para.Name || para.name, para.Value || para.value);
                                    bizComponent.actualParameters.push(actualParameter);
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (actualParameters_1_1 && !actualParameters_1_1.done && (_b = actualParameters_1.return)) _b.call(actualParameters_1);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                        }
                        this.uistate.components.push(bizComponent);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (cpts_1_1 && !cpts_1_1.done && (_a = cpts_1.return)) _a.call(cpts_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ActivityComponentComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.location = this.editorParams.location;
        if (this.location === 'activity') {
            this.uistate.executionCollection = this.uistate.activityCollection;
            this.columns = [
                {
                    field: 'name', width: 100, title: '构件名称'
                },
                { field: 'metadataId', width: 100, title: '构件ID' },
                { field: 'methodCode', width: 100, title: '构件方法' },
                {
                    field: 'executionTime', width: 100, title: '执行时机',
                    editor: {
                        type: EditorTypes.COMBOLIST,
                        options: { data: this.uistate.executionCollection, valueField: 'value', textField: 'text', idField: 'value', panelHeight: 'auto' }
                    },
                    formatter: (/**
                     * @param {?} v
                     * @param {?} d
                     * @param {?} i
                     * @return {?}
                     */
                    function (v, d, i) {
                        if (v) {
                            return _this.uistate.executionCollection.find((/**
                             * @param {?} item
                             * @return {?}
                             */
                            function (item) { return item.value === v; })).text;
                        }
                        else {
                            return '';
                        }
                    }),
                    validators: [
                        { type: 'required', messager: '必填' }
                    ]
                },
                {
                    field: 'isForCompensation', width: 50, title: '补偿操作',
                    editor: { type: EditorTypes.SWITCH, options: {} },
                    formatter: { type: 'boolean', options: { trueText: '是', falseText: '否' } }
                }
            ];
        }
        else if (this.location === 'autoActivity') {
            this.columns = [
                {
                    field: 'name', width: 100, title: '构件名称'
                },
                { field: 'metadataId', width: 100, title: '构件ID' },
                { field: 'methodCode', width: 100, title: '构件方法' },
                {
                    field: 'isForCompensation', width: 50, title: '补偿操作',
                    editor: { type: EditorTypes.SWITCH, options: {} },
                    formatter: { type: 'boolean', options: { trueText: '是', falseText: '否' } }
                }
            ];
        }
        else {
            this.columns = [
                {
                    field: 'name', width: 100, title: '构件名称'
                },
                { field: 'metadataId', width: 100, title: '构件ID' },
                { field: 'methodCode', width: 100, title: '构件方法' },
                {
                    field: 'executionTime', width: 100, title: '执行时机',
                    editor: {
                        type: EditorTypes.COMBOLIST,
                        options: { data: this.uistate.executionCollection, valueField: 'value', textField: 'text', idField: 'value', panelHeight: 'auto' }
                    },
                    formatter: (/**
                     * @param {?} v
                     * @param {?} d
                     * @param {?} i
                     * @return {?}
                     */
                    function (v, d, i) {
                        if (v) {
                            return _this.uistate.executionCollection.find((/**
                             * @param {?} item
                             * @return {?}
                             */
                            function (item) { return item.value === v; })).text;
                        }
                        else {
                            return '';
                        }
                    }),
                    validators: [
                        { type: 'required', messager: '必填' }
                    ]
                }
            ];
        }
        if (this.uistate.components && this.uistate.components.length > 0) {
            this.cmplist.selectRow(this.uistate.components[0].id, true);
        }
        this.paramColumns = [
            { field: 'code', width: 50, title: '编号' },
            { field: 'name', width: 50, title: '名称' },
            {
                field: 'value', width: 100, title: '参数值',
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            _this.showExprHelp(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        // 选中当前行
        this.repository.subject.subscribe((/**
         * @param {?} cmp
         * @return {?}
         */
        function (cmp) {
            _this.cmplist.loadData(_this.uistate.components);
            if (cmp) {
                _this.cmplist.selectRow(cmp.id, true);
            }
            else {
                _this.uistate.curComponent = null;
            }
        }));
    };
    /**
     * @return {?}
     */
    ActivityComponentComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.uistate.components && this.uistate.components.length > 0) {
            this.cmplist.selectRow(this.uistate.components[0].id, true);
        }
    };
    /**
     * @return {?}
     */
    ActivityComponentComponent.prototype.deleteRow = /**
     * @return {?}
     */
    function () {
        this.closeCellEdit();
        this.viewModel.deleteRow();
    };
    /**
     * @return {?}
     */
    ActivityComponentComponent.prototype.moveUp = /**
     * @return {?}
     */
    function () {
        if (!this.uistate.curComponent) {
            this.message.info('尚未选中构件！');
            return;
        }
        /** @type {?} */
        var curCmpId = this.uistate.curComponent.id;
        /** @type {?} */
        var i = this.uistate.components.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.id === curCmpId; }));
        if (i === 0) {
            return;
        }
        this.repository.swapArray(this.uistate.components, i, i - 1);
        this.cmplist.loadData(this.uistate.components);
        this.cmplist.selectRow(curCmpId, true);
    };
    /**
     * @return {?}
     */
    ActivityComponentComponent.prototype.moveDown = /**
     * @return {?}
     */
    function () {
        if (!this.uistate.curComponent) {
            this.message.info('尚未选中构件！');
            return;
        }
        /** @type {?} */
        var curCmpId = this.uistate.curComponent.id;
        /** @type {?} */
        var i = this.uistate.components.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.id === curCmpId; }));
        if (i === this.uistate.components.length - 1) {
            return;
        }
        this.repository.swapArray(this.uistate.components, i, i + 1);
        this.cmplist.loadData(this.uistate.components);
        this.cmplist.selectRow(curCmpId, true);
    };
    /**
     * @return {?}
     */
    ActivityComponentComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        this.closeCellEdit();
        if (this.validator()) {
            /** @type {?} */
            var object = { value: this.uistate.components, parameters: null };
            this.submitModal.emit(object);
        }
    };
    /**
     * @return {?}
     */
    ActivityComponentComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @return {?}
     */
    ActivityComponentComponent.prototype.componentSelect = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.typeList = 'WebServiceComponent'; // 目前只能根据元数据类型过滤，后续添加标签过滤
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            try {
                /** @type {?} */
                var meta = $event.metadata;
                _this.openComponentSelectorNew(meta.id, _this.sessionSrc.getUserSessionId());
            }
            catch (_a) {
                console.log('$event', $event);
                throw new Error('获取解析构件出错' + $event);
            }
        }));
        /** @type {?} */
        var modalConfig = {
            title: '构件选择',
            width: 980,
            height: 548,
            showButtons: false
        };
        /** @type {?} */
        var dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) { return dialog.close(); }));
    };
    /**
     * 取数构件帮助new
     */
    /**
     * 取数构件帮助new
     * @param {?} metadataId
     * @param {?} sessionId
     * @return {?}
     */
    ActivityComponentComponent.prototype.openComponentSelectorNew = /**
     * 取数构件帮助new
     * @param {?} metadataId
     * @param {?} sessionId
     * @return {?}
     */
    function (metadataId, sessionId) {
        var _this = this;
        this.componentService.openSelector(metadataId, sessionId).subscribe((/**
         * @param {?} selectorResult
         * @return {?}
         */
        function (selectorResult) {
            selectorResult.confirmEvent.subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                _this.viewModel.componentSelect(result);
            }));
        }));
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ActivityComponentComponent.prototype.showExprHelp = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var e_3, _a, e_4, _b, e_5, _c, e_6, _d, e_7, _e, e_8, _f, e_9, _g;
        if (this.designerState.schemas.length > 0) {
            try {
                for (var _h = __values(this.designerState.schemas), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var schema = _j.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_a = _h.return)) _a.call(_h);
                }
                finally { if (e_3) throw e_3.error; }
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerState.procInstContext.length > 0) {
            try {
                for (var _k = __values(this.designerState.procInstContext), _l = _k.next(); !_l.done; _l = _k.next()) {
                    var variable = _l.value;
                    context.push(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_l && !_l.done && (_b = _k.return)) _b.call(_k);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _m = __values(this.designerState.formalParameterContext), _o = _m.next(); !_o.done; _o = _m.next()) {
                    var variable = _o.value;
                    _loop_1(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_o && !_o.done && (_c = _m.return)) _c.call(_m);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _p = __values(this.designerState.participantContext), _q = _p.next(); !_q.done; _q = _p.next()) {
                    var variable = _q.value;
                    _loop_2(variable);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_q && !_q.done && (_d = _p.return)) _d.call(_p);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        if (this.location === 'activity') {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _r = __values(this.designerState.activityComponentContext), _s = _r.next(); !_s.done; _s = _r.next()) {
                    var variable = _s.value;
                    _loop_3(variable);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_s && !_s.done && (_e = _r.return)) _e.call(_r);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            var _loop_4 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _t = __values(this.designerState.processVariableContext), _u = _t.next(); !_u.done; _u = _t.next()) {
                    var variable = _u.value;
                    _loop_4(variable);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_u && !_u.done && (_f = _t.return)) _f.call(_t);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_g = context_1.return)) _g.call(context_1);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 默认打开高级表达式编辑器
        this.expr.addExpressionText(e.instance.value);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        function (expressioninfo) {
            e.formControl.setValue(expressioninfo);
            e.instance.cd.detectChanges();
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ActivityComponentComponent.prototype.selectionChange = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.uistate.curComponent = data.data;
    };
    /**
     * @private
     * @return {?}
     */
    ActivityComponentComponent.prototype.closeCellEdit = /**
     * @private
     * @return {?}
     */
    function () {
        this.cmplist.endCellEdit();
        if (this.paramlist) {
            this.paramlist.endCellEdit();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ActivityComponentComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        var e_10, _a;
        try {
            for (var _b = __values(this.uistate.components), _c = _b.next(); !_c.done; _c = _b.next()) {
                var c = _c.value;
                if (!c.executionTime && this.location !== 'autoActivity') {
                    this.message.warning('构件执行时机不允许为空！');
                    return false;
                }
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_10) throw e_10.error; }
        }
        return true;
    };
    ActivityComponentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-activity-component',
                    template: "\r\n<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span>\r\n        <h4 class=\"f-title-text\">\u6784\u4EF6\u5217\u8868</h4>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"componentSelect()\">\u65B0\u589E</button>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"deleteRow()\">\u5220\u9664</button>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"moveUp()\">\u4E0A\u79FB</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"moveDown()\">\u4E0B\u79FB</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <div [style.height.%]=\"uistate.curComponent?45:100\">\r\n        <farris-datagrid #cmplist [data]=\"uistate.components\" [idField]=\"'id'\" [columns]=\"columns\" [fit]=\"true\"\r\n          [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n          [multiSelect]=\"false\" (selectChanged)=\"selectionChange($event)\" [closeOtherGridEditor]=\"true\">\r\n        </farris-datagrid>\r\n      </div>\r\n      <ng-container *ngIf=\"uistate.curComponent\">\r\n        <farris-tabs class=\"f-utils-fill\" [value]=\"'parameters'\" [contentFill]=\"true\" [autoTitleWidth]=\"true\">\r\n          <farris-tab [title]=\"'\u53C2\u6570\u5217\u8868'\" [id]=\"'parameters'\">\r\n            <ng-template #content>\r\n              <div class=\"f-utils-fill-flex-column h-100\">\r\n                <farris-datagrid #paramlist [data]=\"uistate.curComponent.actualParameters\" \r\n                  [columns]=\"paramColumns\" [idField]=\"'code'\" [fit]=\"true\" [fitColumns]=\"true\" \r\n                  [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\"\r\n                  [showCheckbox]=\"false\" [multiSelect]=\"false\" [afterEdit]=\"paramAfterEdit\" [closeOtherGridEditor]=\"true\">\r\n                </farris-datagrid>\r\n              </div>\r\n            </ng-template>\r\n          </farris-tab>\r\n        </farris-tabs>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n",
                    providers: [ActivityComponentRepository, ActivityComponentUIState, ActivityComponentViewModel],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ActivityComponentComponent.ctorParameters = function () { return [
        { type: ActivityComponentUIState },
        { type: ActivityComponentViewModel },
        { type: FormBuilder },
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: SessionService },
        { type: BsModalService },
        { type: CommonComponentUiRTService },
        { type: ActivityComponentRepository },
        { type: MessagerService }
    ]; };
    ActivityComponentComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        editorParams: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        value: [{ type: Input }],
        cmplist: [{ type: ViewChild, args: ['cmplist',] }],
        paramlist: [{ type: ViewChild, args: ['paramlist',] }]
    };
    return ActivityComponentComponent;
}());
var ActivityComponentConverter = /** @class */ (function () {
    function ActivityComponentConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    ActivityComponentConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.length > 0) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    };
    return ActivityComponentConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExecuteFormsUIState = /** @class */ (function () {
    function ExecuteFormsUIState() {
        this.formTypeCollection = [
            { text: '流程嵌表单', value: '0' },
            { text: '表单嵌流程', value: '1' },
        ];
    }
    ExecuteFormsUIState.decorators = [
        { type: Injectable }
    ];
    return ExecuteFormsUIState;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExecuteFormsViewModel = /** @class */ (function () {
    function ExecuteFormsViewModel() {
    }
    ExecuteFormsViewModel.decorators = [
        { type: Injectable }
    ];
    return ExecuteFormsViewModel;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExecuteFormsRepository = /** @class */ (function () {
    function ExecuteFormsRepository() {
    }
    ExecuteFormsRepository.decorators = [
        { type: Injectable }
    ];
    return ExecuteFormsRepository;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExecuteFormModel = /** @class */ (function () {
    function ExecuteFormModel() {
    }
    return ExecuteFormModel;
}());
var ActualParameter$1 = /** @class */ (function () {
    function ActualParameter() {
    }
    return ActualParameter;
}());
/** @enum {string} */
var TerminalType = {
    PC: 'PC',
    MOBILE: 'MOBILE',
    ALL: 'ALL',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormFormatService = /** @class */ (function () {
    function FormFormatService(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    FormFormatService.prototype.getData = /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    function (url, params) {
        /** @type {?} */
        var customData = params.customData;
        /** @type {?} */
        var index = params.pageIndex || 1;
        /** @type {?} */
        var size = params.pageSize || 20;
        /** @type {?} */
        var searchValue = JSON.parse(params.searchValue);
        /** @type {?} */
        var terminal = customData.tab === 'web' ? 'PC' : 'Mobile';
        /** @type {?} */
        var query = '?param=';
        /** @type {?} */
        var filter = "{\"terminal\":\"" + terminal + "\"";
        if (searchValue.searchValue) {
            if (searchValue.searchField === '*') {
                filter += ",\"allColumns\":\"" + searchValue.searchValue + "\"";
            }
            else {
                filter += ",\"" + searchValue.searchField + "\":\"" + searchValue.searchValue + "\"";
            }
        }
        filter += '}';
        filter = encodeURIComponent(filter);
        query += (filter + ("&pageNum=" + index + "&pageSize=" + size));
        url += query;
        return this.http.get(url).pipe(map((/**
         * @param {?} re
         * @return {?}
         */
        function (re) { return ({
            items: re.content,
            total: re.totalElements,
            pageInfo: {
                pageIndex: re.pageable.pageNumber + 1,
                pageSize: re.pageable.pageSize,
                pageList: [20, 40, 60, 80, 100],
                enablePager: true
            }
        }); })));
    };
    FormFormatService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FormFormatService.ctorParameters = function () { return [
        { type: HttpService }
    ]; };
    return FormFormatService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExecuteForm = /** @class */ (function () {
    function ExecuteForm() {
    }
    return ExecuteForm;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AddExecuteFormComponent = /** @class */ (function () {
    function AddExecuteFormComponent(state, http, session, message) {
        var _this = this;
        this.state = state;
        this.http = http;
        this.session = session;
        this.message = message;
        this.submit = new Subject();
        this.cancel = new Subject();
        this.forms = new Array();
        // private formTypeCollection = [
        //   { text: '流程嵌表单', value: '0' },
        //   { text: '表单嵌流程', value: '1' },
        // ];
        this.columns = [
            { field: 'code', width: 100, title: '编号' },
            {
                field: 'name', width: 100, title: '名称',
            },
            {
                field: 'tag', width: 80, title: '单据类型',
                formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (v, d, i) {
                    if (d.appId) {
                        return '功能菜单';
                    }
                    else if (d.formFormatId) {
                        return '表单格式';
                    }
                })
            }
            // {
            //   field: 'formType', width: 80, title: '联查类型',
            //   formatter: {
            //     type: 'enum',
            //     options: { valueField: 'value', textField: 'text', data: this.formTypeCollection }
            //   },
            // },
        ];
        // 表单格式显示列
        this.cols = [
            {
                field: 'code', width: 100, title: '单据格式编号', searchField: 'code'
            }, {
                field: 'name', width: 100, title: '单据格式名称', searchField: 'name'
            }
        ];
        this.dataUri = '/api/runtime/wf/v1.0/formFormat/page';
        this.dictPicking = (/**
         * @param {?} arg
         * @return {?}
         */
        function (arg) {
            return of({
                showDialog: true, data: {
                    tab: _this.tab
                }
            });
        });
        this.dictPicked = (/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var model = new ExecuteFormModel();
            model.Id = ProcessDeUtil.GenerateElementId();
            model.Name = data.name;
            model.ComponentId = null;
            model.FormType = '0';
            model.formFormatId = data.id;
            model.TerminalType = _this.tab === 'web' ? TerminalType.PC : TerminalType.MOBILE;
            model.ActualParameters = data.urlParameters.map((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                /** @type {?} */
                var a = new ActualParameter$1();
                a.Name = p.code;
                a.Value = p.value;
                return a;
            }));
            _this.submit.next(model);
            return of({ closeDialog: true });
        });
    }
    /**
     * @return {?}
     */
    AddExecuteFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getAllExecuteForms();
    };
    /**
     * @return {?}
     */
    AddExecuteFormComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        if (this.grid.selectedRow) {
            /** @type {?} */
            var form = this.grid.selectedRow.data;
            /** @type {?} */
            var model = new ExecuteFormModel();
            model.Id = ProcessDeUtil.GenerateElementId();
            model.Name = form.name;
            model.ComponentId = form.appId;
            model.FormType = form.formType;
            model.formFormatId = form.formFormatId;
            model.TerminalType = this.tab === 'web' ? TerminalType.PC : TerminalType.MOBILE;
            model.ActualParameters = form.actualParameters.map((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                /** @type {?} */
                var a = new ActualParameter$1();
                a.Name = p.code;
                a.Value = p.value;
                return a;
            }));
            this.submit.next(model);
        }
        else {
            this.message.info('尚未选择表单定义！');
        }
    };
    /**
     * @return {?}
     */
    AddExecuteFormComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.cancel.next();
    };
    /**
     * @return {?}
     */
    AddExecuteFormComponent.prototype.selectOtherFormFormat = /**
     * @return {?}
     */
    function () {
        this.lookUp.showDialog();
    };
    /**
     * @return {?}
     */
    AddExecuteFormComponent.prototype.selectOtherFunc = /**
     * @return {?}
     */
    function () {
        this.appHelper.showHelp(this.session.getUserSessionId());
    };
    /**
     * @param {?} apps
     * @return {?}
     */
    AddExecuteFormComponent.prototype.funcSelected = /**
     * @param {?} apps
     * @return {?}
     */
    function (apps) {
        var _this = this;
        if (apps && apps.length > 0) {
            /** @type {?} */
            var model_1 = new ExecuteFormModel();
            model_1.Id = ProcessDeUtil.GenerateElementId();
            model_1.Name = apps[0].Name;
            model_1.ComponentId = apps[0].Id;
            model_1.FormType = '0';
            model_1.formFormatId = null;
            model_1.TerminalType = this.tab === 'web' ? TerminalType.PC : TerminalType.MOBILE;
            model_1.ActualParameters = [];
            if (apps[0].InvokingConfig['entityParams']) {
                /** @type {?} */
                var paras = JSON.parse(apps[0].InvokingConfig['entityParams']);
                model_1.ActualParameters = paras.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return ({
                    Name: p.name,
                    Value: ''
                }); }));
            }
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.submit.next(model_1);
            }), 0);
        }
    };
    /**
     * @private
     * @return {?}
     */
    AddExecuteFormComponent.prototype.getAllExecuteForms = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        forkJoin(this.getExecuteForms(), this.getFormFormats()).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            var e_1, _a;
            if (re[0]) {
                _this.forms = re[0];
            }
            if (re[1] && re[1].length > 0) {
                /** @type {?} */
                var formFormats = re[1];
                var _loop_1 = function (format) {
                    if (_this.forms.findIndex((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) { return f.formFormatId && f.formFormatId === format.id; })) === -1) {
                        /** @type {?} */
                        var executeForm = new ExecuteForm();
                        executeForm.id = ProcessDeUtil.createNM();
                        executeForm.flowFormKey = _this.state.flowFormInfo.flowForm.id;
                        executeForm.appId = null;
                        executeForm.code = format.code;
                        executeForm.name = format.name;
                        executeForm.actualParameters = [];
                        executeForm.isDefault = false;
                        executeForm.formType = '0';
                        executeForm.terminal = 'web';
                        executeForm.formFormatId = format.id;
                        executeForm.sysInit = 0;
                        executeForm.remarks = '';
                        if (format.urlParameters && format.urlParameters.length > 0) {
                            /** @type {?} */
                            var actPList = format.urlParameters.map((/**
                             * @param {?} p
                             * @return {?}
                             */
                            function (p) { return ({
                                code: p.code,
                                name: p.name,
                                value: p.value
                            }); }));
                            executeForm.actualParameters = actPList;
                        }
                        _this.forms.push(executeForm);
                    }
                };
                try {
                    for (var formFormats_1 = __values(formFormats), formFormats_1_1 = formFormats_1.next(); !formFormats_1_1.done; formFormats_1_1 = formFormats_1.next()) {
                        var format = formFormats_1_1.value;
                        _loop_1(format);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (formFormats_1_1 && !formFormats_1_1.done && (_a = formFormats_1.return)) _a.call(formFormats_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    AddExecuteFormComponent.prototype.getExecuteForms = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.state.flowFormInfo.flowForm.id && this.tab) {
            /** @type {?} */
            var url = "/api/runtime/wf/v1.0/excuteForm?flowFormKey=" + this.state.flowFormInfo.flowForm.id;
            return this.http.get(url).pipe(map((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                if (_this.tab === 'web') {
                    return re.filter((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) { return f.terminal.indexOf('web') > -1; }));
                }
                else if (_this.tab === 'mobile') {
                    return re.filter((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) { return f.terminal.indexOf('app') > -1; }));
                }
            })));
        }
        else {
            return from(new Array());
        }
    };
    /**
     * @private
     * @return {?}
     */
    AddExecuteFormComponent.prototype.getFormFormats = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.state.flowFormInfo.flowForm.businessObjectId && this.tab) {
            /** @type {?} */
            var terminal = this.tab === 'web' ? 'PC' : 'Mobile';
            /** @type {?} */
            var url = "/api/runtime/wf/v1.0/formFormat/query?param=";
            /** @type {?} */
            var param = "{\"bizCategory\":\"" + this.state.flowFormInfo.flowForm.businessObjectId + "\",\"terminal\":\"" + terminal + "\"}";
            param = encodeURIComponent(param);
            url += param;
            return this.http.get(url);
        }
        else {
            return from(new Array());
        }
    };
    AddExecuteFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-add-execute-form',
                    template: "<div class=\"f-page f-page-is-managelist\">\r\n  <!-- <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base mt-2 py-0\" style=\"min-height: 2rem;\">\r\n      <div class=\"f-title\">\r\n        <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span>\r\n        <h4 class=\"f-title-text\">\u8868\u5355\u683C\u5F0F\u5217\u8868</h4>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"selectOtherFormFormat()\">\r\n          \u5F15\u5165\u8868\u5355\u683C\u5F0F\r\n        </button>\r\n        <button class=\"btn btn-secondary\" (click)=\"selectOtherFunc()\">\r\n          \u5F15\u5165\u529F\u80FD\u83DC\u5355\r\n        </button>\r\n      </div>\r\n    </nav>\r\n  </div> -->\r\n  <div class=\"f-page-main my-0\">\r\n    <div class=\"f-struct-wrapper f-utils-fill-flex-column\">\r\n      <farris-section class=\"f-section-grid f-section-in-managelist p-2\" [showHeader]=\"false\">\r\n        <farris-datagrid class=\"f-component-grid\" [columns]=\"columns\" [data]=\"forms\" #grid\r\n          [idField]=\"'id'\" [showLineNumber]=\"true\" [striped]=\"true\"\r\n          [showCheckbox]=\"false\" [virtualized]=\"true\" [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\">\r\n        </farris-datagrid>\r\n      </farris-section>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n<app-rtf-app-help #appHelper (afterHelpConfirm)=\"funcSelected($event)\" [isLayeredLoad]=\"true\">\r\n</app-rtf-app-help>\r\n\r\n<!-- \u5355\u636E\u683C\u5F0F\u5E2E\u52A9 -->\r\n<farris-lookup-grid #lookup style=\"display: none;\" [editable]=\"false\" [columns]=\"cols\" [singleSelect]=\"true\"\r\n  [title]=\"'\u5355\u636E\u683C\u5F0F'\" [displayType]=\"'List'\" [uri]=\"dataUri\" [idField]=\"'id'\" [pageIndex]=\"1\" [pageSize]=\"20\"\r\n  [pagination]=\"true\" [valueField]=\"'id'\" [textField]=\"'name'\" [dialogWidth]=\"550\" [dictPicked]=\"dictPicked\"\r\n  [dictPicking]=\"dictPicking\">\r\n</farris-lookup-grid>\r\n",
                    providers: [{ provide: ServerSideToken, useClass: FormFormatService }],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    AddExecuteFormComponent.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: HttpService },
        { type: SessionService },
        { type: MessagerService }
    ]; };
    AddExecuteFormComponent.propDecorators = {
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        appHelper: [{ type: ViewChild, args: [RtfAppHelpComponent,] }],
        lookUp: [{ type: ViewChild, args: ['lookup',] }],
        grid: [{ type: ViewChild, args: ['grid',] }]
    };
    return AddExecuteFormComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormFormat = /** @class */ (function () {
    function FormFormat() {
    }
    return FormFormat;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormFormatConfig = /** @class */ (function () {
    function FormFormatConfig() {
        this.id = ProcessDeUtil.createNM();
        this.formMethodConfigs = new Array();
    }
    return FormFormatConfig;
}());
var FormButtonConfig = /** @class */ (function () {
    function FormButtonConfig() {
    }
    return FormButtonConfig;
}());
var FormFieldConfig = /** @class */ (function () {
    function FormFieldConfig() {
    }
    return FormFieldConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var workFlowActions = [
    { text: '正向', value: 'Forward' },
    { text: '反向', value: 'Backward' },
    { text: '终止', value: 'Abort' }
];
/** @type {?} */
var executionTime = [
    { text: '流转前', value: 'Pre' },
    { text: '流转后', value: 'Post' }
];
var FormMethodConfig = /** @class */ (function () {
    function FormMethodConfig() {
        this.id = ProcessDeUtil.createNM();
        this.workFlowAction = workFlowActions[0].value;
        this.executionTime = executionTime[0].value;
        this.sortOrder = 1;
    }
    return FormMethodConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ParameterSettingComponent = /** @class */ (function () {
    function ParameterSettingComponent(expr, designerState) {
        this.expr = expr;
        this.designerState = designerState;
        this.idField = 'Name';
        this._mode = 'bpmn';
        this.submit = new Subject();
        this.cancel = new Subject();
        this.formTypeCollection = [
            { text: '流程嵌表单', value: '0' },
            { text: '表单嵌流程', value: '1' },
        ];
        this.cols = new Array();
        this.parameters = new Array();
        this.formType = this.formTypeCollection[0].value;
        this.showFormType = false;
    }
    Object.defineProperty(ParameterSettingComponent.prototype, "mode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._mode;
        },
        set: /**
         * @param {?} m
         * @return {?}
         */
        function (m) {
            var _this = this;
            this._mode = m;
            if (m === 'bpmn') {
                this.idField = 'Name';
                this.cols = [
                    { field: 'Name', width: 50, title: '编号' },
                    {
                        field: 'Value', width: 100, title: '参数值',
                        editor: {
                            type: 'input-group',
                            options: {
                                groupText: '<i class="f-icon f-icon-lookup"></i>',
                                editable: false,
                                clickHandle: (/**
                                 * @param {?} e
                                 * @return {?}
                                 */
                                function (e) {
                                    e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                    _this.showExprHelp(e);
                                }),
                                clear: (/**
                                 * @param {?} e
                                 * @return {?}
                                 */
                                function (e) {
                                    console.log('clear', e);
                                })
                            }
                        }
                    }
                ];
            }
            else {
                this.idField = 'code';
                this.cols = [
                    { field: 'code', width: 50, title: '编号' },
                    { field: 'name', width: 50, title: '名称' },
                    {
                        field: 'value', width: 100, title: '参数值',
                        editor: {
                            type: 'input-group',
                            options: {
                                groupText: '<i class="f-icon f-icon-lookup"></i>',
                                editable: false,
                                clickHandle: (/**
                                 * @param {?} e
                                 * @return {?}
                                 */
                                function (e) {
                                    e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                    _this.showExprHelp(e);
                                }),
                                clear: (/**
                                 * @param {?} e
                                 * @return {?}
                                 */
                                function (e) {
                                    console.log('clear', e);
                                })
                            }
                        }
                    }
                ];
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ParameterSettingComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ParameterSettingComponent.prototype.showExprHelp = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f;
        if (this.designerState.schemas.length > 0) {
            try {
                for (var _g = __values(this.designerState.schemas), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var schema = _h.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_a = _g.return)) _a.call(_g);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerState.procInstContext.length > 0) {
            try {
                for (var _j = __values(this.designerState.procInstContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    context.push(variable);
                    // this.expr.addContext(variable);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _l = __values(this.designerState.formalParameterContext), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var variable = _m.value;
                    _loop_1(variable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _o = __values(this.designerState.participantContext), _p = _o.next(); !_p.done; _p = _o.next()) {
                    var variable = _p.value;
                    _loop_2(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _q = __values(this.designerState.processVariableContext), _r = _q.next(); !_r.done; _r = _q.next()) {
                    var variable = _r.value;
                    _loop_3(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_r && !_r.done && (_e = _q.return)) _e.call(_q);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_f = context_1.return)) _f.call(context_1);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.buildExpression().then((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (d) {
                e.formControl.setValue(d);
                e.instance.cd.detectChanges();
            }
        }));
    };
    /**
     * @return {?}
     */
    ParameterSettingComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        this.grid.endCellEdit();
        this.submit.next({ parameters: this.parameters, formType: this.formType });
    };
    /**
     * @return {?}
     */
    ParameterSettingComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.cancel.next();
    };
    ParameterSettingComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-parameter-setting',
                    template: "\r\n<div class=\"f-page f-page-is-managelist\">\r\n  <div class=\"f-page-main my-0\">\r\n    <div class=\"f-struct-wrapper f-utils-fill-flex-column\">\r\n      <farris-section class=\"f-section-grid f-section-in-managelist px-0\" [showHeader]=\"showFormType\" [mainTitle]=\"'\u53C2\u6570'\" [enableMaximize]=\"false\">\r\n        <ng-template farrisSectionToolbar>\r\n          <farris-combo-list [(ngModel)]=\"formType\" name=\"formType\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n            [enableClear]=\"false\" [valueField]=\"'value'\" [data]=\"formTypeCollection\" [panelHeight]=\"'auto'\" [editable]=\"false\"\r\n            style=\"width: 130px;\">\r\n          </farris-combo-list>\r\n        </ng-template>\r\n        <farris-datagrid class=\"f-component-grid\" [columns]=\"cols\" [data]=\"parameters\" #grid\r\n          [idField]=\"idField\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\"\r\n          [showCheckbox]=\"false\" [multiSelect]=\"false\" [showLineNumber]=\"true\" [striped]=\"true\"\r\n          [virtualized]=\"true\">\r\n        </farris-datagrid>\r\n      </farris-section>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ParameterSettingComponent.ctorParameters = function () { return [
        { type: ExpressionService },
        { type: ProcessDesignerUIState }
    ]; };
    ParameterSettingComponent.propDecorators = {
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        grid: [{ type: ViewChild, args: ['grid',] }]
    };
    return ParameterSettingComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormOperationConfigComponent = /** @class */ (function () {
    function FormOperationConfigComponent(http, message, resolver, injector, modalService) {
        this.http = http;
        this.message = message;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.operations = new Array();
        this.cols = new Array();
        this.methodCols = [
            { field: 'method', width: 100, title: '方法标识', showTips: true },
            { field: 'methodName', width: 80, title: '方法名称', showTips: true },
            { field: 'description', width: 120, title: '描述', showTips: true }
        ];
        this.formMethods = new Array();
        this.state = 'add';
    }
    Object.defineProperty(FormOperationConfigComponent.prototype, "formFormatId", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fromFormatId;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._fromFormatId = v;
            if (this._fromFormatId) {
                this.getFormMethods();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormOperationConfigComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.cols = [
            {
                field: 'workFlowAction', width: 80, title: '流转方向',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: workFlowActions }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: workFlowActions, idField: 'value', panelHeight: 'auto', enableClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }, {
                field: 'method', width: 100, title: '表单操作',
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            _this.e = e;
                            _this.methodsDialog.show();
                            _this.state = 'edit';
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            console.log('clear', e);
                        })
                    }
                },
                formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (v, d, i) {
                    if (v) {
                        /** @type {?} */
                        var m = _this.formMethods.find((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) { return item.method === v; }));
                        if (m) {
                            return m.methodName;
                        }
                        else {
                            return '';
                        }
                    }
                    else {
                        return '';
                    }
                }),
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'executionTime', width: 80, title: '执行时机',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: executionTime }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: executionTime, idField: 'value', panelHeight: 'auto', enableClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'sortOrder', width: 60, title: '执行顺序',
                editor: {
                    type: EditorTypes.NUMBERBOX, options: {}
                },
                formatter: { type: 'number', options: { precision: 0 } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'methodParameters', width: 80, title: '参数',
                template: this.cell,
                halign: 'center', align: 'center'
            }
        ];
    };
    /**
     * @return {?}
     */
    FormOperationConfigComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        this.methodsDialog.show();
        this.state = 'add';
    };
    /**
     * @return {?}
     */
    FormOperationConfigComponent.prototype.delete = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.grid.selectedRow) {
            this.operations = this.operations.filter((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return o.id !== _this.grid.selectedRow.id; }));
        }
        else {
            this.message.info('尚未选中表单操作配置！');
        }
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    FormOperationConfigComponent.prototype.editParam = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        var _this = this;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ParameterSettingComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.mode = 'usual';
        compRef.instance.showFormType = false;
        if (ctx.rowData.methodParameters) {
            compRef.instance.parameters = __spread(ctx.rowData.methodParameters.map((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return Object.assign({}, p); })));
        }
        else {
            compRef.instance.parameters = new Array();
        }
        /** @type {?} */
        var modalConfig = {
            title: '参数设置',
            width: 620,
            height: 400,
            showButtons: true,
            buttons: compRef.instance.modalFooter
        };
        /** @type {?} */
        var dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.submit.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            var e_1, _a;
            try {
                for (var _b = __values(_this.operations), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var o = _c.value;
                    if (o.id === ctx.rowData.id) {
                        o.methodParameters = re.parameters;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            dialog.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
    };
    /**
     * @return {?}
     */
    FormOperationConfigComponent.prototype.methodSelected = /**
     * @return {?}
     */
    function () {
        var e_2, _a;
        if (this.methodGrid.selectedRow) {
            /** @type {?} */
            var data = this.methodGrid.selectedRow.data;
            if (this.state === 'edit') {
                if (this.e) {
                    this.e.formControl.setValue(data.method);
                    this.e.instance.cd.detectChanges();
                    try {
                        for (var _b = __values(this.operations), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var o = _c.value;
                            if (o.id === data.id) {
                                o.method = data.method;
                                o.sortOrder = data.sortOrder;
                                o.methodParameters = data.methodParameters;
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            else {
                /** @type {?} */
                var operation = new FormMethodConfig();
                operation.formFormatConfigId = this.formFormatConfigId;
                operation.method = data.method;
                operation.sortOrder = data.sortOrder;
                operation.methodParameters = data.methodParameters;
                this.operations = this.operations.concat([operation]);
            }
            this.methodsDialog.close();
        }
        else {
            this.message.info('尚未选中表单操作！');
        }
    };
    /**
     * @return {?}
     */
    FormOperationConfigComponent.prototype.validator = /**
     * @return {?}
     */
    function () {
        var e_3, _a;
        this.grid.endCellEdit();
        try {
            for (var _b = __values(this.operations), _c = _b.next(); !_c.done; _c = _b.next()) {
                var o = _c.value;
                if (!o.method) {
                    this.message.info('尚未选择表单操作！');
                    return false;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return true;
    };
    /**
     * @private
     * @return {?}
     */
    FormOperationConfigComponent.prototype.getFormMethods = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.formFormatId) {
            /** @type {?} */
            var url = "/api/runtime/wf/v1.0/formOperation?formFormatId=" + this.formFormatId;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                if (re) {
                    _this.formMethods = re;
                }
            }));
        }
    };
    FormOperationConfigComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-form-operation-config',
                    template: "<div class=\"f-utils-fill-flex-column h-100\" style=\"background: #FFF;\">\r\n  <farris-datagrid class=\"f-component-grid f-utils-fill\" [columns]=\"cols\" [data]=\"operations\" #grid\r\n    [idField]=\"'id'\" [showLineNumber]=\"true\" [fitColumns]=\"true\" [striped]=\"true\" [showCheckbox]=\"false\"\r\n    [virtualized]=\"true\" [pagination]=\"false\" [useThemes]=\"false\" [fit]=\"true\"\r\n    [editable]=\"true\" [editMode]=\"'cell'\" >\r\n  </farris-datagrid>\r\n  <ng-template #cell let-ctx>\r\n    <a href=\"javascript: void(0);\" title=\"\u53C2\u6570\u8BBE\u7F6E\" (click)=\"editParam(ctx)\">\u8BBE\u7F6E</a>\r\n  </ng-template>\r\n</div>\r\n\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"methodSelected()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"methodsDialog.close()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n<farris-dialog #methodsDialog [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"500\" [title]=\"'\u8868\u5355\u4E8B\u4EF6'\">\r\n  <div class=\"f-page f-page-is-managelist\">\r\n    <div class=\"f-page-main\">\r\n      <div class=\"f-struct-wrapper f-utils-fill-flex-column\">\r\n        <farris-section class=\"f-section-grid f-section-in-managelist p-0\" [showHeader]=\"false\">\r\n          <farris-datagrid class=\"f-component-grid\" [columns]=\"methodCols\" [data]=\"formMethods\" #methodGrid [idField]=\"'id'\"\r\n            [showLineNumber]=\"true\" [striped]=\"true\" [showCheckbox]=\"false\" [virtualized]=\"true\" [pagination]=\"false\"\r\n            [fit]=\"true\" [fitColumns]=\"true\">\r\n          </farris-datagrid>\r\n        </farris-section>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    FormOperationConfigComponent.ctorParameters = function () { return [
        { type: HttpService },
        { type: MessagerService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService }
    ]; };
    FormOperationConfigComponent.propDecorators = {
        formFormatId: [{ type: Input }],
        formFormatConfigId: [{ type: Input }],
        operations: [{ type: Input }],
        methodsDialog: [{ type: ViewChild, args: ['methodsDialog',] }],
        grid: [{ type: ViewChild, args: ['grid',] }],
        methodGrid: [{ type: ViewChild, args: ['methodGrid',] }],
        cell: [{ type: ViewChild, args: ['cell',] }]
    };
    return FormOperationConfigComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormFormatConfigComponent = /** @class */ (function () {
    function FormFormatConfigComponent(http, message, notify) {
        this.http = http;
        this.message = message;
        this.notify = notify;
        this.config = new FormFormatConfig();
        this.formFormat = new FormFormat();
        this.state = 'edit';
        this.showMethodTab = true;
        this.buttonCols = [];
        this.buttonConfigs = new Array();
        this.fieldCols = [];
        this.fieldConfigs = new Array();
        this.formatFieldList = new Array();
    }
    Object.defineProperty(FormFormatConfigComponent.prototype, "formFormatId", {
        get: /**
         * @return {?}
         */
        function () {
            return this._formFormatId;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._formFormatId = v;
            this.config.formFormatId = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormFormatConfigComponent.prototype, "formatConfigId", {
        get: /**
         * @return {?}
         */
        function () {
            return this._formatConfigId;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._formatConfigId = v;
            if (!v) {
                this.state = 'new';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormFormatConfigComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.buttonCols = [
            { field: 'buttonName', width: 100, title: '按钮名称' },
            // { field: 'buttonId', width: 100, title: '按钮标识' },
            {
                title: '是否可用',
                field: 'enable',
                width: 80,
                template: this.btnEnable,
                align: 'center',
                hAlign: 'center'
            },
            {
                title: '是否禁用',
                field: 'disabled',
                width: 80,
                template: this.btnDisabled,
                align: 'center',
                hAlign: 'center'
            },
            {
                title: '是否隐藏',
                field: 'hidden',
                width: 80,
                template: this.btnHidden,
                align: 'center',
                hAlign: 'center'
            }
        ];
        this.fieldCols = [
            { field: 'fieldName', width: 100, title: '字段名称' },
            // { field: 'fieldId', width: 100, title: '字段标识' },
            {
                title: '是否可写',
                field: 'editable',
                width: 80,
                template: this.fieldEditable,
                align: 'center',
                hAlign: 'center'
            },
            {
                title: '是否只读',
                field: 'readonly',
                width: 80,
                template: this.fieldReadonly,
                align: 'center',
                hAlign: 'center'
            },
            {
                title: '是否隐藏',
                field: 'hidden',
                width: 80,
                template: this.fieldHidden,
                align: 'center',
                hAlign: 'center'
            },
            {
                title: '是否必填',
                field: 'required',
                width: 80,
                template: this.fieldRequired,
                align: 'center',
                hAlign: 'center'
            }
        ];
        this.getConfig();
    };
    /**
     * @return {?}
     */
    FormFormatConfigComponent.prototype.submit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.validator()) {
            this.setBtnAndFieldConfigs();
            if (this.state === 'new' &&
                this.config.formButtonConfigs.length === 0 &&
                this.config.formFieldConfigs.length === 0 &&
                this.operationConfig.operations.length === 0) {
                return of({ result: true, configId: null });
            }
            else {
                return this.saveConfig(this.config).pipe(switchMap((/**
                 * @param {?} re
                 * @return {?}
                 */
                function (re) {
                    return of({ result: true, configId: _this.config.id });
                })), catchError((/**
                 * @param {?} re
                 * @return {?}
                 */
                function (re) {
                    _this.message.error('保存配置失败，请联系管理员查看原因！');
                    return of({ result: false, configId: _this.config.id });
                })));
            }
        }
        else {
            return of({ result: false, configId: null });
        }
    };
    /**
     * @param {?} bool
     * @param {?} field
     * @param {?} id
     * @return {?}
     */
    FormFormatConfigComponent.prototype.btnConfigChange = /**
     * @param {?} bool
     * @param {?} field
     * @param {?} id
     * @return {?}
     */
    function (bool, field, id) {
        var e_1, _a;
        if (bool) {
            try {
                for (var _b = __values(this.buttonConfigs), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var b = _c.value;
                    if (b.id === id) {
                        switch (field) {
                            case 'enable':
                                b.enable = bool;
                                b.disabled = false;
                                b.hidden = false;
                                break;
                            case 'disabled':
                                b.disabled = bool;
                                b.enable = false;
                                b.hidden = false;
                                break;
                            case 'hidden':
                                b.hidden = bool;
                                b.disabled = false;
                                b.enable = false;
                                break;
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * @param {?} operation
     * @return {?}
     */
    FormFormatConfigComponent.prototype.btnBatchOperate = /**
     * @param {?} operation
     * @return {?}
     */
    function (operation) {
        var e_2, _a;
        /** @type {?} */
        var checkeds = this.btnGrid.checkedRows;
        if (checkeds && checkeds.length > 0) {
            try {
                for (var checkeds_1 = __values(checkeds), checkeds_1_1 = checkeds_1.next(); !checkeds_1_1.done; checkeds_1_1 = checkeds_1.next()) {
                    var c = checkeds_1_1.value;
                    this.btnConfigChange(true, operation, c.id);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (checkeds_1_1 && !checkeds_1_1.done && (_a = checkeds_1.return)) _a.call(checkeds_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    /**
     * @return {?}
     */
    FormFormatConfigComponent.prototype.btnBatchReset = /**
     * @return {?}
     */
    function () {
        var e_3, _a;
        /** @type {?} */
        var checkeds = this.btnGrid.checkedRows;
        if (checkeds && checkeds.length > 0) {
            var _loop_1 = function (c) {
                var e_4, _a;
                /** @type {?} */
                var button = this_1.formFormat.formButtons.find((/**
                 * @param {?} b
                 * @return {?}
                 */
                function (b) { return b.id === c.id; }));
                try {
                    for (var _b = __values(this_1.buttonConfigs), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var b = _c.value;
                        if (b.id === c.id) {
                            b.enable = button.buttonState === 'Enable' ? true : false;
                            b.disabled = button.buttonState === 'Disabled' ? true : false;
                            b.hidden = button.buttonState === 'Hidden' ? true : false;
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            };
            var this_1 = this;
            try {
                for (var checkeds_2 = __values(checkeds), checkeds_2_1 = checkeds_2.next(); !checkeds_2_1.done; checkeds_2_1 = checkeds_2.next()) {
                    var c = checkeds_2_1.value;
                    _loop_1(c);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (checkeds_2_1 && !checkeds_2_1.done && (_a = checkeds_2.return)) _a.call(checkeds_2);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
    };
    /**
     * @param {?} bool
     * @param {?} field
     * @param {?} id
     * @return {?}
     */
    FormFormatConfigComponent.prototype.fieldConfigChange = /**
     * @param {?} bool
     * @param {?} field
     * @param {?} id
     * @return {?}
     */
    function (bool, field, id) {
        if (bool) {
            this.fieldSwitchChange(this.fieldConfigs, field, id);
        }
    };
    /**
     * @private
     * @param {?} fieldConfigs
     * @param {?} field
     * @param {?} id
     * @return {?}
     */
    FormFormatConfigComponent.prototype.fieldSwitchChange = /**
     * @private
     * @param {?} fieldConfigs
     * @param {?} field
     * @param {?} id
     * @return {?}
     */
    function (fieldConfigs, field, id) {
        var e_5, _a;
        if (fieldConfigs.length > 0) {
            try {
                for (var fieldConfigs_1 = __values(fieldConfigs), fieldConfigs_1_1 = fieldConfigs_1.next(); !fieldConfigs_1_1.done; fieldConfigs_1_1 = fieldConfigs_1.next()) {
                    var f = fieldConfigs_1_1.value;
                    if (f.data.id === id) {
                        switch (field) {
                            case 'editable':
                                f.data.editable = true;
                                f.data.readonly = false;
                                f.data.hidden = false;
                                f.data.required = false;
                                break;
                            case 'readonly':
                                f.data.editable = false;
                                f.data.readonly = true;
                                f.data.hidden = false;
                                f.data.required = false;
                                break;
                            case 'hidden':
                                f.data.editable = false;
                                f.data.readonly = false;
                                f.data.hidden = true;
                                f.data.required = false;
                                break;
                            case 'required':
                                f.data.editable = false;
                                f.data.readonly = false;
                                f.data.hidden = false;
                                f.data.required = true;
                                break;
                        }
                        return;
                    }
                    else {
                        if (f.children && f.children.length > 0) {
                            this.fieldSwitchChange(f.children, field, id);
                        }
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (fieldConfigs_1_1 && !fieldConfigs_1_1.done && (_a = fieldConfigs_1.return)) _a.call(fieldConfigs_1);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
    };
    /**
     * @param {?} operation
     * @return {?}
     */
    FormFormatConfigComponent.prototype.fieldBatchOperate = /**
     * @param {?} operation
     * @return {?}
     */
    function (operation) {
        var e_6, _a;
        /** @type {?} */
        var checkeds = this.fieldTree.checkeds;
        if (checkeds && checkeds.length > 0) {
            try {
                for (var checkeds_3 = __values(checkeds), checkeds_3_1 = checkeds_3.next(); !checkeds_3_1.done; checkeds_3_1 = checkeds_3.next()) {
                    var c = checkeds_3_1.value;
                    this.fieldConfigChange(true, operation, c.data.id);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (checkeds_3_1 && !checkeds_3_1.done && (_a = checkeds_3.return)) _a.call(checkeds_3);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
    };
    /**
     * @return {?}
     */
    FormFormatConfigComponent.prototype.fieldBatchReset = /**
     * @return {?}
     */
    function () {
        var e_7, _a;
        /** @type {?} */
        var checkeds = this.fieldTree.checkeds;
        if (checkeds && checkeds.length > 0) {
            var _loop_2 = function (c) {
                /** @type {?} */
                var field = this_2.formatFieldList.find((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return f.id === c.data.id; }));
                this_2.resetFieldConfig(this_2.fieldConfigs, c.data.id, field);
            };
            var this_2 = this;
            try {
                for (var checkeds_4 = __values(checkeds), checkeds_4_1 = checkeds_4.next(); !checkeds_4_1.done; checkeds_4_1 = checkeds_4.next()) {
                    var c = checkeds_4_1.value;
                    _loop_2(c);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (checkeds_4_1 && !checkeds_4_1.done && (_a = checkeds_4.return)) _a.call(checkeds_4);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
    };
    /**
     * @param {?} fieldConfigs
     * @param {?} id
     * @param {?} field
     * @return {?}
     */
    FormFormatConfigComponent.prototype.resetFieldConfig = /**
     * @param {?} fieldConfigs
     * @param {?} id
     * @param {?} field
     * @return {?}
     */
    function (fieldConfigs, id, field) {
        var e_8, _a;
        if (fieldConfigs.length > 0) {
            try {
                for (var fieldConfigs_2 = __values(fieldConfigs), fieldConfigs_2_1 = fieldConfigs_2.next(); !fieldConfigs_2_1.done; fieldConfigs_2_1 = fieldConfigs_2.next()) {
                    var f = fieldConfigs_2_1.value;
                    if (f.leaf === true && f.data.id === id) {
                        f.data.editable = field.fieldState === 'Editable' ? true : false;
                        f.data.readonly = field.fieldState === 'Readonly' ? true : false;
                        f.data.hidden = field.fieldState === 'Hidden' ? true : false;
                        f.data.required = field.fieldState === 'Required' ? true : false;
                        return;
                    }
                    else {
                        if (f.children && f.children.length > 0) {
                            this.resetFieldConfig(f.children, id, field);
                        }
                    }
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (fieldConfigs_2_1 && !fieldConfigs_2_1.done && (_a = fieldConfigs_2.return)) _a.call(fieldConfigs_2);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    FormFormatConfigComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        return this.operationConfig.validator();
    };
    /**
     * @private
     * @return {?}
     */
    FormFormatConfigComponent.prototype.setBtnAndFieldConfigs = /**
     * @private
     * @return {?}
     */
    function () {
        var e_9, _a;
        this.config.formButtonConfigs = new Array();
        var _loop_3 = function (btn) {
            /** @type {?} */
            var button = this_3.formFormat.formButtons.find((/**
             * @param {?} b
             * @return {?}
             */
            function (b) { return b.buttonId === btn.buttonId; }));
            /** @type {?} */
            var btnConfig = new FormButtonConfig();
            btnConfig.buttonId = btn.buttonId;
            if (btn.enable) {
                btnConfig.buttonState = 'Enable';
            }
            else if (btn.disabled) {
                btnConfig.buttonState = 'Disabled';
            }
            else if (btn.hidden) {
                btnConfig.buttonState = 'Hidden';
            }
            else {
                return "continue";
            }
            if (!button.buttonState && btnConfig.buttonState) {
                this_3.config.formButtonConfigs.push(btnConfig);
            }
            if (button.buttonState && button.buttonState !== btnConfig.buttonState) {
                this_3.config.formButtonConfigs.push(btnConfig);
            }
        };
        var this_3 = this;
        try {
            for (var _b = __values(this.buttonConfigs), _c = _b.next(); !_c.done; _c = _b.next()) {
                var btn = _c.value;
                _loop_3(btn);
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_9) throw e_9.error; }
        }
        this.config.formFieldConfigs = new Array();
        this.getFieldConfigs(this.fieldConfigs);
        this.config.formMethodConfigs = this.operationConfig.operations || new Array();
    };
    /**
     * @private
     * @param {?} fieldConfigs
     * @return {?}
     */
    FormFormatConfigComponent.prototype.getFieldConfigs = /**
     * @private
     * @param {?} fieldConfigs
     * @return {?}
     */
    function (fieldConfigs) {
        var e_10, _a;
        if (fieldConfigs && fieldConfigs.length > 0) {
            var _loop_4 = function (f) {
                if (f.children && f.children.length > 0) {
                    this_4.getFieldConfigs(f.children);
                }
                if (f.leaf === false) {
                    return "continue";
                }
                /** @type {?} */
                var field = this_4.formatFieldList.find((/**
                 * @param {?} fd
                 * @return {?}
                 */
                function (fd) { return fd.fieldId === f.data.fieldId; }));
                /** @type {?} */
                var fieldConfig = new FormFieldConfig();
                fieldConfig.fieldId = f.data.fieldId;
                if (f.data.editable) {
                    fieldConfig.fieldState = 'Editable';
                }
                else if (f.data.readonly) {
                    fieldConfig.fieldState = 'Readonly';
                }
                else if (f.data.hidden) {
                    fieldConfig.fieldState = 'Hidden';
                }
                else if (f.data.required) {
                    fieldConfig.fieldState = 'Required';
                }
                else {
                    return "continue";
                }
                if (!field.fieldState && fieldConfig.fieldState) {
                    this_4.config.formFieldConfigs.push(fieldConfig);
                }
                if (field.fieldState && field.fieldState !== fieldConfig.fieldState) {
                    this_4.config.formFieldConfigs.push(fieldConfig);
                }
            };
            var this_4 = this;
            try {
                for (var fieldConfigs_3 = __values(fieldConfigs), fieldConfigs_3_1 = fieldConfigs_3.next(); !fieldConfigs_3_1.done; fieldConfigs_3_1 = fieldConfigs_3.next()) {
                    var f = fieldConfigs_3_1.value;
                    _loop_4(f);
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (fieldConfigs_3_1 && !fieldConfigs_3_1.done && (_a = fieldConfigs_3.return)) _a.call(fieldConfigs_3);
                }
                finally { if (e_10) throw e_10.error; }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    FormFormatConfigComponent.prototype.getConfig = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.formFormatId) {
            forkJoin(this.getFormFormat(), this.getFormFormatConfig()).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                var e_11, _a, e_12, _b, e_13, _c;
                /** @type {?} */
                var formFormat = (/** @type {?} */ (re[0]));
                if (formFormat) {
                    _this.formFormat = _this.convertFormFormat(formFormat);
                }
                /** @type {?} */
                var config = (/** @type {?} */ (re[1]));
                if (config) {
                    _this.config = config;
                }
                if (_this.formFormat.formButtons) {
                    _this.buttonConfigs = _this.formFormat.formButtons.map((/**
                     * @param {?} b
                     * @return {?}
                     */
                    function (b) { return Object.assign({}, b, {
                        enable: b.buttonState === 'Enable' ? true : false,
                        disabled: b.buttonState === 'Disabled' ? true : false,
                        hidden: b.buttonState === 'Hidden' ? true : false
                    }); }));
                    /** @type {?} */
                    var btnConfigs = new Array();
                    if (config && config.formButtonConfigs) {
                        btnConfigs = config.formButtonConfigs;
                    }
                    try {
                        for (var btnConfigs_1 = __values(btnConfigs), btnConfigs_1_1 = btnConfigs_1.next(); !btnConfigs_1_1.done; btnConfigs_1_1 = btnConfigs_1.next()) {
                            var b = btnConfigs_1_1.value;
                            try {
                                for (var _d = __values(_this.buttonConfigs), _e = _d.next(); !_e.done; _e = _d.next()) {
                                    var btn = _e.value;
                                    if (btn.buttonId === b.buttonId) {
                                        switch (b.buttonState) {
                                            case 'Enable':
                                                btn.enable = true;
                                                btn.disabled = false;
                                                btn.hidden = false;
                                                break;
                                            case 'Disabled':
                                                btn.enable = false;
                                                btn.disabled = true;
                                                btn.hidden = false;
                                                break;
                                            case 'Hidden':
                                                btn.enable = false;
                                                btn.disabled = false;
                                                btn.hidden = true;
                                                break;
                                        }
                                        break;
                                    }
                                }
                            }
                            catch (e_12_1) { e_12 = { error: e_12_1 }; }
                            finally {
                                try {
                                    if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                                }
                                finally { if (e_12) throw e_12.error; }
                            }
                        }
                    }
                    catch (e_11_1) { e_11 = { error: e_11_1 }; }
                    finally {
                        try {
                            if (btnConfigs_1_1 && !btnConfigs_1_1.done && (_a = btnConfigs_1.return)) _a.call(btnConfigs_1);
                        }
                        finally { if (e_11) throw e_11.error; }
                    }
                }
                if (_this.formFormat.formFields) {
                    _this.fieldConfigs = __spread(_this.formFormat.formFields);
                    _this.orgFieldConfigs(_this.fieldConfigs);
                    /** @type {?} */
                    var configs = new Array();
                    if (config && config.formFieldConfigs) {
                        configs = config.formFieldConfigs;
                    }
                    try {
                        for (var configs_1 = __values(configs), configs_1_1 = configs_1.next(); !configs_1_1.done; configs_1_1 = configs_1.next()) {
                            var f = configs_1_1.value;
                            _this.setFieldConfig(_this.fieldConfigs, f);
                        }
                    }
                    catch (e_13_1) { e_13 = { error: e_13_1 }; }
                    finally {
                        try {
                            if (configs_1_1 && !configs_1_1.done && (_c = configs_1.return)) _c.call(configs_1);
                        }
                        finally { if (e_13) throw e_13.error; }
                    }
                }
            }));
        }
    };
    /**
     * @private
     * @param {?} formFields
     * @return {?}
     */
    FormFormatConfigComponent.prototype.orgFieldConfigs = /**
     * @private
     * @param {?} formFields
     * @return {?}
     */
    function (formFields) {
        var e_14, _a;
        if (formFields.length > 0) {
            try {
                for (var formFields_1 = __values(formFields), formFields_1_1 = formFields_1.next(); !formFields_1_1.done; formFields_1_1 = formFields_1.next()) {
                    var d = formFields_1_1.value;
                    d.data = Object.assign({}, d.data, {
                        editable: d.data.fieldState === 'Editable' ? true : false,
                        readonly: d.data.fieldState === 'Readonly' ? true : false,
                        hidden: d.data.fieldState === 'Hidden' ? true : false,
                        required: d.data.fieldState === 'Required' ? true : false
                    });
                    if (d.children && d.children) {
                        this.orgFieldConfigs(d.children);
                    }
                }
            }
            catch (e_14_1) { e_14 = { error: e_14_1 }; }
            finally {
                try {
                    if (formFields_1_1 && !formFields_1_1.done && (_a = formFields_1.return)) _a.call(formFields_1);
                }
                finally { if (e_14) throw e_14.error; }
            }
        }
    };
    /**
     * @private
     * @param {?} fieldConfigs
     * @param {?} config
     * @return {?}
     */
    FormFormatConfigComponent.prototype.setFieldConfig = /**
     * @private
     * @param {?} fieldConfigs
     * @param {?} config
     * @return {?}
     */
    function (fieldConfigs, config) {
        var e_15, _a;
        if (fieldConfigs.length > 0) {
            try {
                for (var fieldConfigs_4 = __values(fieldConfigs), fieldConfigs_4_1 = fieldConfigs_4.next(); !fieldConfigs_4_1.done; fieldConfigs_4_1 = fieldConfigs_4.next()) {
                    var f = fieldConfigs_4_1.value;
                    if (f.data.fieldId === config.fieldId) {
                        switch (config.fieldState) {
                            case 'Editable':
                                f.data.editable = true;
                                f.data.readonly = false;
                                f.data.hidden = false;
                                f.data.required = false;
                                break;
                            case 'Readonly':
                                f.data.editable = false;
                                f.data.readonly = true;
                                f.data.hidden = false;
                                f.data.required = false;
                                break;
                            case 'Hidden':
                                f.data.editable = false;
                                f.data.readonly = false;
                                f.data.hidden = true;
                                f.data.required = false;
                                break;
                            case 'Required':
                                f.data.editable = false;
                                f.data.readonly = false;
                                f.data.hidden = false;
                                f.data.required = true;
                                break;
                        }
                        return;
                    }
                    else {
                        if (f.children && f.children.length > 0) {
                            this.setFieldConfig(f.children, config);
                        }
                    }
                }
            }
            catch (e_15_1) { e_15 = { error: e_15_1 }; }
            finally {
                try {
                    if (fieldConfigs_4_1 && !fieldConfigs_4_1.done && (_a = fieldConfigs_4.return)) _a.call(fieldConfigs_4);
                }
                finally { if (e_15) throw e_15.error; }
            }
        }
    };
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    FormFormatConfigComponent.prototype.saveConfig = /**
     * @private
     * @param {?} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var url = '/api/runtime/wf/v1.0/formFormatConfig';
        return this.http.post(url, config);
    };
    /**
     * @private
     * @return {?}
     */
    FormFormatConfigComponent.prototype.getFormFormat = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.formFormatId) {
            /** @type {?} */
            var url = "/api/runtime/wf/v1.0/formFormat/" + this.formFormatId;
            url = encodeURI(url);
            return this.http.get(url);
        }
        else {
            return of(null);
        }
    };
    /**
     * @private
     * @return {?}
     */
    FormFormatConfigComponent.prototype.getFormFormatConfig = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.formatConfigId) {
            /** @type {?} */
            var url = "/api/runtime/wf/v1.0/formFormatConfig/" + this.formatConfigId;
            url = encodeURI(url);
            return this.http.get(url);
        }
        else {
            return of(null);
        }
    };
    /**
     * @private
     * @param {?} formFormat
     * @return {?}
     */
    FormFormatConfigComponent.prototype.convertFormFormat = /**
     * @private
     * @param {?} formFormat
     * @return {?}
     */
    function (formFormat) {
        if (!formFormat.status) {
            formFormat.status = 0;
        }
        this.convertformFields(formFormat.formFields);
        this.getFormatFieldList(formFormat.formFields, this.formatFieldList);
        return formFormat;
    };
    /**
     * @private
     * @param {?} formFields
     * @return {?}
     */
    FormFormatConfigComponent.prototype.convertformFields = /**
     * @private
     * @param {?} formFields
     * @return {?}
     */
    function (formFields) {
        var e_16, _a;
        if (formFields.length > 0) {
            try {
                for (var formFields_2 = __values(formFields), formFields_2_1 = formFields_2.next(); !formFields_2_1.done; formFields_2_1 = formFields_2.next()) {
                    var d = formFields_2_1.value;
                    if (typeof (d.leaf) !== 'boolean' && (d.leaf == null || d.leaf === undefined)) {
                        d.leaf = true;
                    }
                    if (d.children && d.children) {
                        this.orgFieldConfigs(d.children);
                    }
                }
            }
            catch (e_16_1) { e_16 = { error: e_16_1 }; }
            finally {
                try {
                    if (formFields_2_1 && !formFields_2_1.done && (_a = formFields_2.return)) _a.call(formFields_2);
                }
                finally { if (e_16) throw e_16.error; }
            }
        }
    };
    /**
     * @private
     * @param {?} formFields
     * @param {?} array
     * @return {?}
     */
    FormFormatConfigComponent.prototype.getFormatFieldList = /**
     * @private
     * @param {?} formFields
     * @param {?} array
     * @return {?}
     */
    function (formFields, array) {
        var e_17, _a;
        if (formFields.length > 0) {
            try {
                for (var formFields_3 = __values(formFields), formFields_3_1 = formFields_3.next(); !formFields_3_1.done; formFields_3_1 = formFields_3.next()) {
                    var d = formFields_3_1.value;
                    array.push(d.data);
                    if (d.children && d.children) {
                        this.getFormatFieldList(d.children, array);
                    }
                }
            }
            catch (e_17_1) { e_17 = { error: e_17_1 }; }
            finally {
                try {
                    if (formFields_3_1 && !formFields_3_1.done && (_a = formFields_3.return)) _a.call(formFields_3);
                }
                finally { if (e_17) throw e_17.error; }
            }
        }
    };
    /**
     * @private
     * @param {?} formFields
     * @param {?} fieldId
     * @return {?}
     */
    FormFormatConfigComponent.prototype.getFormatField = /**
     * @private
     * @param {?} formFields
     * @param {?} fieldId
     * @return {?}
     */
    function (formFields, fieldId) {
        var e_18, _a;
        try {
            for (var formFields_4 = __values(formFields), formFields_4_1 = formFields_4.next(); !formFields_4_1.done; formFields_4_1 = formFields_4.next()) {
                var f = formFields_4_1.value;
                if (f.data.fieldId === fieldId) {
                    return f;
                }
                if (f.children && f.children.length > 0) {
                    return this.getFormatField(f.children, fieldId);
                }
            }
        }
        catch (e_18_1) { e_18 = { error: e_18_1 }; }
        finally {
            try {
                if (formFields_4_1 && !formFields_4_1.done && (_a = formFields_4.return)) _a.call(formFields_4);
            }
            finally { if (e_18) throw e_18.error; }
        }
    };
    FormFormatConfigComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-form-format-config',
                    template: "\r\n<!--\u9700\u8981\u5D4C\u5957\u7684\u5C42-----------\u6807\u7B7E\u9875---------------->\r\n<farris-tabs class=\"h-100 f-component-tabs f-tabs-has-grid\" [value]=\"'buttonConfig'\" [contentFill]=\"true\">\r\n  <farris-tab [title]=\"'\u8868\u5355\u6309\u94AE'\" [id]=\"'buttonConfig'\">\r\n    <ng-template farrisTabsExtend>\r\n      <farris-button [type]=\"'link'\" (click)=\"btnBatchOperate('enable')\">\r\n        \u53EF\u7528\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"btnBatchOperate('disabled')\">\r\n        \u7981\u7528\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"btnBatchOperate('hidden')\">\r\n        \u9690\u85CF\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"btnBatchReset()\">\r\n        \u91CD\u7F6E\r\n      </farris-button>\r\n    </ng-template>\r\n    <ng-template #content>\r\n      <div class=\"f-utils-fill-flex-column\" style=\"background: #FFF;\">\r\n        <farris-datagrid class=\"f-component-grid f-utils-fill\" [columns]=\"buttonCols\" [data]=\"buttonConfigs\" #btnGrid\r\n          [idField]=\"'id'\" [showLineNumber]=\"false\" [fitColumns]=\"true\" [striped]=\"true\"\r\n          [virtualized]=\"true\" [pagination]=\"false\" [useThemes]=\"false\" [fit]=\"true\" [showAllCheckbox]=\"true\" \r\n          [showCheckbox]=\"true\" [multiSelect]=\"true\">\r\n        </farris-datagrid>\r\n      </div>\r\n    </ng-template>\r\n  </farris-tab>\r\n  <farris-tab [title]=\"'\u8868\u5355\u5B57\u6BB5'\" [id]=\"'fieldConfig'\">\r\n    <ng-template farrisTabsExtend>\r\n      <farris-button [type]=\"'link'\" (click)=\"fieldBatchOperate('editable')\">\r\n        \u53EF\u5199\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"fieldBatchOperate('readonly')\">\r\n        \u53EA\u8BFB\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"fieldBatchOperate('hidden')\">\r\n        \u9690\u85CF\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"fieldBatchOperate('required')\">\r\n        \u5FC5\u586B\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"fieldBatchReset()\">\r\n        \u91CD\u7F6E\r\n      </farris-button>\r\n    </ng-template>\r\n    <ng-template #content>\r\n      <div class=\"f-utils-fill-flex-column\" style=\"background: #FFF;\">\r\n        <!-- <farris-datagrid class=\"f-component-grid f-utils-fill\" [columns]=\"fieldCols\" [data]=\"fieldConfigs\" #fieldGrid\r\n          [idField]=\"'id'\" [showLineNumber]=\"false\" [fitColumns]=\"true\" [striped]=\"true\"\r\n          [virtualized]=\"true\" [pagination]=\"false\" [useThemes]=\"false\" [fit]=\"true\" [showAllCheckbox]=\"true\" \r\n          [showCheckbox]=\"true\" [multiSelect]=\"true\">\r\n        </farris-datagrid> -->\r\n        <farris-treetable #fieldTree [columns]=\"fieldCols\" \r\n          [showBorder]=\"false\" [showHeader]=\"true\" [data]=\"fieldConfigs\" [fit]=\"true\" [fitColumns]=\"true\"\r\n          [idField]=\"'id'\" [singleSelect]=\"false\" [showCheckbox]=\"true\" \r\n          [showCheckAll]=\"true\" [striped]=\"true\" [fixedHeader]=\"true\">\r\n        </farris-treetable>\r\n      </div>\r\n    </ng-template>\r\n  </farris-tab>\r\n  <farris-tab [title]=\"'\u8868\u5355\u4E8B\u4EF6'\" [id]=\"'operationConfig'\" [show]=\"showMethodTab\">\r\n    <ng-template farrisTabsExtend>\r\n      <farris-button [type]=\"'link'\" (click)=\"operationConfig.add()\">\r\n        \u65B0\u589E\r\n      </farris-button>\r\n      <farris-button [type]=\"'link'\" (click)=\"operationConfig.delete()\">\r\n        \u5220\u9664\r\n      </farris-button>\r\n    </ng-template>\r\n    <ng-template #content>\r\n      <lib-form-operation-config \r\n        [formFormatId]=\"formFormatId\" \r\n        [formFormatConfigId]=\"config.id\" \r\n        [operations]=\"config.formMethodConfigs\"\r\n        class=\"h-100\"></lib-form-operation-config>\r\n    </ng-template>\r\n  </farris-tab>\r\n</farris-tabs>\r\n<!--Tab\u533A\u57DF-->  \r\n      \r\n  <!-- </section>\r\n</div> -->\r\n\r\n<ng-template #btnEnable let-ctx>\r\n  <farris-switch [(ngModel)]=\"ctx.rowData.enable\" (valueChange)=\"btnConfigChange($event, ctx.field, ctx.rowData.id)\"></farris-switch>\r\n</ng-template>\r\n<ng-template #btnDisabled let-ctx>\r\n  <farris-switch [(ngModel)]=\"ctx.rowData.disabled\" (valueChange)=\"btnConfigChange($event, ctx.field, ctx.rowData.id)\"></farris-switch>\r\n</ng-template>\r\n<ng-template #btnHidden let-ctx>\r\n  <farris-switch [(ngModel)]=\"ctx.rowData.hidden\" (valueChange)=\"btnConfigChange($event, ctx.field, ctx.rowData.id)\"></farris-switch>\r\n</ng-template>\r\n<ng-template #fieldEditable let-ctx>\r\n  <farris-switch *ngIf=\"ctx.node.leaf\" size=\"small\" [(ngModel)]=\"ctx.node.data.editable\"\r\n  (valueChange)=\"fieldConfigChange($event, ctx.column.field, ctx.node.data.id)\">\r\n  </farris-switch>\r\n</ng-template>\r\n<ng-template #fieldReadonly let-ctx>\r\n  <farris-switch *ngIf=\"ctx.node.leaf\" size=\"small\" [(ngModel)]=\"ctx.node.data.readonly\"\r\n    (valueChange)=\"fieldConfigChange($event, ctx.column.field, ctx.node.data.id)\">\r\n  </farris-switch>\r\n</ng-template>\r\n<ng-template #fieldHidden let-ctx>\r\n  <farris-switch *ngIf=\"ctx.node.leaf\" size=\"small\" [(ngModel)]=\"ctx.node.data.hidden\"\r\n    (valueChange)=\"fieldConfigChange($event, ctx.column.field, ctx.node.data.id)\">\r\n  </farris-switch>\r\n</ng-template>\r\n<ng-template #fieldRequired let-ctx>\r\n  <farris-switch *ngIf=\"ctx.node.leaf\" size=\"small\" [(ngModel)]=\"ctx.node.data.required\"\r\n    (valueChange)=\"fieldConfigChange($event, ctx.column.field, ctx.node.data.id)\">\r\n  </farris-switch>\r\n</ng-template>\r\n\r\n\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    FormFormatConfigComponent.ctorParameters = function () { return [
        { type: HttpService },
        { type: MessagerService },
        { type: NotifyService }
    ]; };
    FormFormatConfigComponent.propDecorators = {
        btnEnable: [{ type: ViewChild, args: ['btnEnable',] }],
        btnDisabled: [{ type: ViewChild, args: ['btnDisabled',] }],
        btnHidden: [{ type: ViewChild, args: ['btnHidden',] }],
        fieldEditable: [{ type: ViewChild, args: ['fieldEditable',] }],
        fieldReadonly: [{ type: ViewChild, args: ['fieldReadonly',] }],
        fieldHidden: [{ type: ViewChild, args: ['fieldHidden',] }],
        fieldRequired: [{ type: ViewChild, args: ['fieldRequired',] }],
        btnGrid: [{ type: ViewChild, args: ['btnGrid',] }],
        fieldTree: [{ type: ViewChild, args: ['fieldTree',] }],
        operationConfig: [{ type: ViewChild, args: [FormOperationConfigComponent,] }],
        showMethodTab: [{ type: Input }]
    };
    return FormFormatConfigComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormConfigContainerComponent = /** @class */ (function () {
    function FormConfigContainerComponent(injector, cfr, http) {
        this.injector = injector;
        this.cfr = cfr;
        this.http = http;
        this.showMethodTab = true;
    }
    /**
     * @return {?}
     */
    FormConfigContainerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // this.showComponentRef();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FormConfigContainerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['formFormatId'] && changes['formFormatId'].currentValue) {
            this.showComponentRef();
        }
        else { // 功能菜单时
            this.componentRef = this.createWFComponentRef();
            this.componentRef.instance.formFormatId = null;
            this.componentRef.instance.formatConfigId = null;
            this.componentRef.instance.showMethodTab = this.showMethodTab;
            this.container.clear();
            this.container.insert(this.componentRef.hostView);
        }
    };
    /**
     * @return {?}
     */
    FormConfigContainerComponent.prototype.submit = /**
     * @return {?}
     */
    function () {
        return this.componentRef.instance.submit();
    };
    /**
     * @private
     * @return {?}
     */
    FormConfigContainerComponent.prototype.showComponentRef = /**
     * @private
     * @return {?}
     */
    function () {
        this.componentRef = this.createWFComponentRef();
        this.componentRef.instance.formFormatId = this.formFormatId;
        this.componentRef.instance.formatConfigId = this.formatConfigId;
        this.componentRef.instance.showMethodTab = this.showMethodTab;
        this.container.clear();
        this.container.insert(this.componentRef.hostView);
        // if (this.formFormatId) {
        // this.getFormFormatType().subscribe((re: FormFormatType) => {
        // if (re.code === 'wf') {
        // } else {
        //   System.import(re.customImpl)
        //     .then((moduleFactorys: any) => {
        //       const moduleFactory: any = Object.values(moduleFactorys)[0];
        //       const moduleRef = moduleFactory.create(this.injector);
        //       this.componentRef = moduleRef.instance.createCustomComponentRef(this.injector);
        //       this.componentRef.instance.formFormatId = this.formFormatId;
        //       this.componentRef.instance.formatConfigId = this.formatConfigId;
        //       this.componentRef.instance.showMethodTab = this.showMethodTab;
        //       this.container.clear();
        //       this.container.insert(this.componentRef.hostView);
        //     });
        // }
        // });
        // }
    };
    /**
     * @private
     * @return {?}
     */
    FormConfigContainerComponent.prototype.createWFComponentRef = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var cmpF = this.cfr.resolveComponentFactory(FormFormatConfigComponent);
        /** @type {?} */
        var cmpR = cmpF.create(this.injector);
        return cmpR;
    };
    /**
     * @private
     * @return {?}
     */
    FormConfigContainerComponent.prototype.getFormFormatType = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.formFormatId) {
            /** @type {?} */
            var url = "/api/runtime/wf/v1.0/formFormatType/formFormat?formFormat=" + this.formFormatId;
            return this.http.get(url);
        }
    };
    FormConfigContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-form-config-container',
                    template: "<ng-container #container></ng-container>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    FormConfigContainerComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: HttpService }
    ]; };
    FormConfigContainerComponent.propDecorators = {
        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        formFormatId: [{ type: Input }],
        formatConfigId: [{ type: Input }],
        showMethodTab: [{ type: Input }]
    };
    return FormConfigContainerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExecuteFormsComponent = /** @class */ (function () {
    // *******************************************************
    function ExecuteFormsComponent(formBuilder, uistate, viewmodel, resolver, injector, modalService) {
        this.formBuilder = formBuilder;
        this.uistate = uistate;
        this.viewmodel = viewmodel;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.modalConfig = {
            title: '表单定义',
            width: 794,
            height: 505,
            showButtons: true
        };
        this.cls = 'farris-main-area flex-column';
        this.style = '#FFF';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.tab = 'web';
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.cols = [];
        this.showMethodTab = true;
        this.form = new ExecuteFormModel();
    }
    Object.defineProperty(ExecuteFormsComponent.prototype, "value", {
        set: /**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item) {
                /** @type {?} */
                var paramArray_1 = new Array();
                item.ActualParameters.forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) {
                    /** @type {?} */
                    var para = new ActualParameter$1();
                    para.Name = a.Name;
                    para.Value = a.Value;
                    paramArray_1.push(para);
                }));
                this.form.ActualParameters = paramArray_1;
                this.form.Id = item.Id;
                this.form.Name = item.Name;
                this.form.ComponentId = item.ComponentId;
                this.form.formFormatId = item.formFormatId;
                this.form.formatConfigId = item.formatConfigId;
                this.form.FormType = item.FormType;
                this.form.TerminalType = item.TerminalType;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ExecuteFormsComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // this.editCSS();
    };
    /**
     * @return {?}
     */
    ExecuteFormsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.location = this.editorParams.location;
        this.tab = this.editorParams.tab;
        if (this.location === 'userActivity') {
            this.showMethodTab = true;
        }
        else {
            this.showMethodTab = false;
        }
    };
    /**
     * @return {?}
     */
    ExecuteFormsComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var data = new ExecuteFormModel();
        this.getForm().subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            if (!re.result) {
                return;
            }
            data = re.form;
            /** @type {?} */
            var object = { value: data, parameters: null };
            _this.submitModal.emit(object);
        }));
    };
    /**
     * @return {?}
     */
    ExecuteFormsComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    // tabChange(data) {
    //   this.tab = data.nextId;
    // }
    // editCSS() {
    //   this.configSection.nativeElement.querySelector('div.f-section-header').classList.add('mb-0');
    // }
    // tabChange(data) {
    //   this.tab = data.nextId;
    // }
    // editCSS() {
    //   this.configSection.nativeElement.querySelector('div.f-section-header').classList.add('mb-0');
    // }
    /**
     * @private
     * @return {?}
     */
    ExecuteFormsComponent.prototype.getForm = 
    // tabChange(data) {
    //   this.tab = data.nextId;
    // }
    // editCSS() {
    //   this.configSection.nativeElement.querySelector('div.f-section-header').classList.add('mb-0');
    // }
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.form.ComponentId) {
            return of$1({ result: true, form: this.form });
        }
        else if (this.form.formFormatId) {
            return this.configContainer.submit().pipe(switchMap((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                if (re.result) {
                    _this.form.formatConfigId = re.configId;
                    return of$1({ result: true, form: _this.form });
                }
                else {
                    return of$1({ result: false, form: _this.form });
                }
            })));
        }
        else {
            return of$1({ result: true, form: null });
        }
    };
    /**
     * 参数设置
     */
    /**
     * 参数设置
     * @return {?}
     */
    ExecuteFormsComponent.prototype.parametersSet = /**
     * 参数设置
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ParameterSettingComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.mode = 'bpmn';
        if (this.tab === 'web') {
            if (this.form.ComponentId) {
                compRef.instance.showFormType = true;
                compRef.instance.formType = this.form.FormType;
            }
            compRef.instance.parameters = __spread(this.form.ActualParameters.map((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return Object.assign({}, p); })));
        }
        else {
            compRef.instance.parameters = __spread(this.form.ActualParameters.map((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return Object.assign({}, p); })));
        }
        /** @type {?} */
        var modalConfig = {
            title: '参数设置',
            width: 620,
            height: 400,
            showButtons: true,
            buttons: compRef.instance.modalFooter
        };
        /** @type {?} */
        var dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.submit.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            if (_this.tab === 'web') {
                _this.form.ActualParameters = re.parameters;
                _this.form.FormType = re.formType;
            }
            else {
                _this.form.ActualParameters = re.parameters;
            }
            dialog.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
    };
    /**
     * 选择表单定义
     */
    /**
     * 选择表单定义
     * @return {?}
     */
    ExecuteFormsComponent.prototype.selectExecuteForm = /**
     * 选择表单定义
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(AddExecuteFormComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.tab = this.tab;
        /** @type {?} */
        var modalConfig = {
            title: '表单定义列表',
            width: 650,
            height: 400,
            showButtons: true,
            buttons: compRef.instance.modalFooter
        };
        /** @type {?} */
        var dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.submit.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            _this.form = re;
            dialog.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
    };
    /**
     * @return {?}
     */
    ExecuteFormsComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.form = new ExecuteFormModel();
    };
    ExecuteFormsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-execute-forms',
                    template: "  <!-- <div class=\"h-100 farris-split-section m-2\">\r\n    <farris-tabs #tabs [value]=\"'web'\" [fill]=\"true\" (tabChange)=\"tabChange($event)\" [contentFill]=\"true\" class=\"f-utils-fill h-100\">\r\n      <farris-tab title=\"Web\u8868\u5355\" [show]=\"true\" [id]=\"'web'\" class=\"h-100\">\r\n        <ng-template #content>\r\n          <farris-section class=\"f-section-form f-section-in-mainsubcard pt-0\" [enableAccordion]=\"'default'\" [mainTitle]=\"'\u8868\u5355\u5B9A\u4E49'\"\r\n            [subTitle]=\"''\" [enableMaximize]=\"false\">\r\n            <div class=\"farris-form farris-form-controls-inline farris-form-auto f-form-lable-auto\">\r\n              <div class=\"f-section-formgroup-inputs\">\r\n                <div class=\"col-12 col-md-10\">\r\n                  <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group mb-0\">\r\n                      <div class=\"farris-input-wrap pl-4\">\r\n                        <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" [enableClear]=\"true\"\r\n                          [showButtonWhenDisabled]=\"false\" [(ngModel)]=\"webForm.Name\" name=\"webForm\" [placeholder]=\"'\u8BF7\u9009\u62E9'\"\r\n                          [editable]=\"false\" (clickHandle)=\"selectExecuteForm()\" (clear)=\"clear()\" [groupText]=\"groupIcon\">\r\n                        </input-group>\r\n                        <div class=\"farris-feedback valid-feedback\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 col-md-2\">\r\n                  <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group mb-0\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <button [disabled]=\"!webForm.ComponentId && !webForm.formFormatId\" class=\"btn-sm btn-secondary btn\" \r\n                          (click)=\"parametersSet()\">\r\n                          \u8868\u5355\u53C2\u6570\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </farris-section>\r\n          <farris-section #webConfigSection class=\"f-section-tabs f-section-in-mainsubcard pb-0 pt-1\" [enableAccordion]=\"''\" [mainTitle]=\"'\u8868\u5355\u683C\u5F0F\u8BBE\u7F6E'\"\r\n            [subTitle]=\"''\" [enableMaximize]=\"false\" [fill]=\"true\">\r\n            <lib-form-config-container #webConfigContainer *ngIf=\"webForm.formFormatId; else empty\" \r\n            [formFormatId]=\"webForm.formFormatId\" [formatConfigId]=\"webForm.formatConfigId\" [showMethodTab]=\"showMethodTab\" class=\"h-100\"></lib-form-config-container>\r\n          </farris-section>\r\n        </ng-template>\r\n      </farris-tab>\r\n      <farris-tab title=\"\u79FB\u52A8\u8868\u5355\" [id]=\"'mobile'\" class=\"h-100\">\r\n        <ng-template #content>\r\n          <farris-section class=\"f-section-form f-section-in-mainsubcard pt-0\" [enableAccordion]=\"'default'\" [mainTitle]=\"'\u8868\u5355\u5B9A\u4E49'\"\r\n            [subTitle]=\"''\" [enableMaximize]=\"false\">\r\n            <div class=\"farris-form farris-form-controls-inline farris-form-auto f-form-lable-auto\">\r\n              <div class=\"f-section-formgroup-inputs\">\r\n                <div class=\"col-12 col-md-10\">\r\n                  <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group mb-0\">\r\n                      <div class=\"farris-input-wrap pl-4\">\r\n                        <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" [enableClear]=\"true\"\r\n                          [showButtonWhenDisabled]=\"false\" [(ngModel)]=\"mobileForm.Name\" name=\"mobileForm\" [placeholder]=\"'\u8BF7\u9009\u62E9'\"\r\n                          [editable]=\"false\" (clickHandle)=\"selectExecuteForm()\" (clear)=\"clear()\" [groupText]=\"groupIcon\">\r\n                        </input-group>\r\n                        <div class=\"farris-feedback valid-feedback\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 col-md-2\">\r\n                  <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group mb-0\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <button [disabled]=\"!mobileForm.ComponentId && !mobileForm.formFormatId\" class=\"btn-sm btn-secondary btn\"\r\n                          (click)=\"parametersSet()\">\r\n                          \u8868\u5355\u53C2\u6570\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </farris-section>\r\n          <farris-section #appConfigSection class=\"f-section-tabs f-section-in-mainsubcard pb-0 pt-1\" [enableAccordion]=\"''\"\r\n            [mainTitle]=\"'\u8868\u5355\u683C\u5F0F\u8BBE\u7F6E'\" [subTitle]=\"''\" [enableMaximize]=\"false\" [fill]=\"true\">\r\n            <lib-form-config-container #appConfigContainer *ngIf=\"mobileForm.formFormatId; else empty\"\r\n              [formFormatId]=\"mobileForm.formFormatId\" [formatConfigId]=\"mobileForm.formatConfigId\" [showMethodTab]=\"showMethodTab\" class=\"h-100\">\r\n            </lib-form-config-container>\r\n          </farris-section>\r\n        </ng-template>\r\n      </farris-tab>\r\n    </farris-tabs>\r\n  </div> -->\r\n  \r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n<ng-template #empty>\r\n  <div class=\"f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-datagrid-norecords\" style=\"height: 100%;\">\r\n      <div class=\"f-datagrid-norecords-content w-100\">\u6682\u65E0\u8868\u5355\u683C\u5F0F</div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<div class=\"f-page f-page-is-managelist\">\r\n  <div class=\"f-page-main mx-3\">\r\n    <div class=\"farris-form farris-form-controls-inline farris-form-auto f-form-lable-auto\">\r\n      <div class=\"f-section-formgroup-inputs\">\r\n        <div class=\"col-12 col-md-5 px-0 my-2\">\r\n          <div class=\"farris-group-wrap\">\r\n            <div class=\"form-group farris-form-group mb-0\">\r\n              <div class=\"farris-input-wrap\">\r\n                <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" [enableClear]=\"true\"\r\n                  [showButtonWhenDisabled]=\"false\" [(ngModel)]=\"form.Name\" name=\"form\" [placeholder]=\"'\u8BF7\u9009\u62E9'\"\r\n                  [editable]=\"false\" (clickHandle)=\"selectExecuteForm()\" (clear)=\"clear()\" [groupText]=\"groupIcon\">\r\n                </input-group>\r\n                <div class=\"farris-feedback valid-feedback\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-12 col-md-2 my-2 px-0\">\r\n          <div class=\"farris-group-wrap\" style=\"padding-top: 2px;\">\r\n            <div class=\"form-group farris-form-group mb-0\">\r\n              <div class=\"farris-input-wrap\">\r\n                <farris-button [disabled]=\"!form.ComponentId && !form.formFormatId\" [type]=\"'link'\" (click)=\"parametersSet()\">\r\n                  \u53C2\u6570\r\n                </farris-button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <lib-form-config-container #configContainer\r\n      [formFormatId]=\"form.formFormatId\" [formatConfigId]=\"form.formatConfigId\" [showMethodTab]=\"showMethodTab\"\r\n      class=\"h-100\"></lib-form-config-container>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n",
                    providers: [ExecuteFormsUIState, ExecuteFormsViewModel, ExecuteFormsRepository],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ExecuteFormsComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: ExecuteFormsUIState },
        { type: ExecuteFormsViewModel },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService }
    ]; };
    ExecuteFormsComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        style: [{ type: HostBinding, args: ['style.background',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        editorParams: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        configContainer: [{ type: ViewChild, args: ['configContainer',] }],
        configSection: [{ type: ViewChild, args: ['configSection', { read: ElementRef },] }]
    };
    return ExecuteFormsComponent;
}());
var ExecuteFormsConverter = /** @class */ (function () {
    function ExecuteFormsConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    ExecuteFormsConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data) {
            return data.Name;
        }
        else {
            return '（未设置）';
        }
    };
    return ExecuteFormsConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TitleExpressionComponent = /** @class */ (function () {
    function TitleExpressionComponent(expr, designerState) {
        this.expr = expr;
        this.designerState = designerState;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.contextEntities = [];
        this.schema = {};
        this.injectName = '';
        this.modalConfig = {
            title: '任务描述',
            width: 1140,
            height: 520,
            showButtons: true
        };
        if (this.designerState.schemas[0]) {
            this.schema = this.designerState.schemas[0];
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                this.injectName = this.designerState.schemas[0].entityTypes[0].name;
            }
        }
    }
    /**
     * @return {?}
     */
    TitleExpressionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
        // this.contextEntities = this.contextEntities.concat(this.designerState.procInstContext)
        //   .concat(this.designerState.formalParameterContext)
        //   .concat(this.designerState.participantContext)
        //   .concat(this.designerState.processVariableContext);
        this.contextEntities = new Array();
        if (this.designerState.procInstContext.length > 0) {
            try {
                for (var _e = __values(this.designerState.procInstContext), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var variable = _f.value;
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!this_1.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    this_1.contextEntities = this_1.contextEntities.concat([variable]);
                }
            };
            var this_1 = this;
            try {
                for (var _g = __values(this.designerState.formalParameterContext), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var variable = _h.value;
                    _loop_1(variable);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!this_2.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    this_2.contextEntities = this_2.contextEntities.concat([variable]);
                }
            };
            var this_2 = this;
            try {
                for (var _j = __values(this.designerState.participantContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    _loop_2(variable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!this_3.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    this_3.contextEntities = this_3.contextEntities.concat([variable]);
                }
            };
            var this_3 = this;
            try {
                for (var _l = __values(this.designerState.processVariableContext), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var variable = _m.value;
                    _loop_3(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
    };
    /**
     * @return {?}
     */
    TitleExpressionComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        this.value = this.convertToValue(this.editor.getExpr());
        /** @type {?} */
        var object = { value: this.value, parameters: null };
        this.submitModal.emit(object);
    };
    /**
     * @return {?}
     */
    TitleExpressionComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    TitleExpressionComponent.prototype.convertToValue = /**
     * @private
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            if (val.substring(9, val.length - 2)) {
                return val;
            }
            else {
                return '';
            }
        }
        else {
            return '';
        }
    };
    TitleExpressionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-title-expression',
                    template: "<!-- <div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2\">\r\n    <textarea [(ngModel)]=\"value\" name=\"condition\" class=\"form-control k-textarea h-100 w-100\"></textarea>\r\n  </div>\r\n</div> -->\r\n<app-expressioneditor \r\n  [isPanel]=\"true\" [contextEntities]=\"contextEntities\" [text]=\"value\" [customSchemaName]=\"'Schema'\"\r\n  [customSchema]=\"schema\" [injectName]=\"injectName\"\r\n  [injectSchemaName]=\"'Schema'\" [injectNameInSchema]=\"injectName\">\r\n</app-expressioneditor>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <div class=\"btns\">\r\n    <!-- <button type=\"button\" class=\"btn btn-primary btn-sm mr-2\" (click)=\"clickOpen()\">\u7F16\u8F91\u5668</button> -->\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm mr-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n  </div>\r\n</ng-template>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    TitleExpressionComponent.ctorParameters = function () { return [
        { type: ExpressionService },
        { type: ProcessDesignerUIState }
    ]; };
    TitleExpressionComponent.propDecorators = {
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        editorParams: [{ type: Input }],
        editor: [{ type: ViewChild, args: [ExpressioneditorComponent,] }]
    };
    return TitleExpressionComponent;
}());
var TitleExpressionConverter = /** @class */ (function () {
    function TitleExpressionConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    TitleExpressionConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data) {
            return data;
        }
        else {
            return '（未设置）';
        }
    };
    return TitleExpressionConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CustomizeAciton = /** @class */ (function () {
    function CustomizeAciton(id, code, name) {
        this.id = id;
        this.code = code;
        this.name = name;
    }
    return CustomizeAciton;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CustomizeActionListComponent = /** @class */ (function () {
    function CustomizeActionListComponent(designerUIState) {
        this.designerUIState = designerUIState;
        this.submit = new EventEmitter();
        this.cancel = new EventEmitter();
        this.terminalList = [
            { value: 'app', text: '移动' },
            { value: 'web', text: 'web' },
            { value: 'web,app', text: 'web,移动' }
        ];
        this.cols = [
            { field: 'code', width: 100, title: '编号' },
            { field: 'name', width: 100, title: '名称' },
            {
                field: 'terminal', width: 100, title: '适用终端',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.terminalList }
                },
            },
            {
                field: 'isAll', width: 100, title: '是否默认',
                formatter: { type: 'boolean', options: { trueText: '是', falseText: '否' } }
            }
        ];
        this.customActionList = this.designerUIState.flowFormInfo.customizeActions || [];
    }
    /**
     * @return {?}
     */
    CustomizeActionListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    CustomizeActionListComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selections = [];
        /** @type {?} */
        var checkeds = this.grid.checkeds;
        if (checkeds && checkeds.length > 0) {
            checkeds.forEach((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                var e_1, _a;
                /** @type {?} */
                var item = new CustomizeAciton(action.data.id, action.data.code, action.data.name);
                item.terminalType = action.data.terminal;
                // item.enable = true;
                item.actualParameters = [];
                if (action.data.actualParameters && action.data.actualParameters.length > 0) {
                    try {
                        for (var _b = __values(action.data.actualParameters), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var p = _c.value;
                            /** @type {?} */
                            var param = (/** @type {?} */ ({
                                Name: p.code,
                                Value: p.value,
                                ValueText: p.name,
                                Tag: 'expression'
                            }));
                            item.actualParameters.push(param);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                selections.push(item);
            }));
        }
        this.submit.emit(selections);
    };
    /**
     * @return {?}
     */
    CustomizeActionListComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.cancel.emit(true);
    };
    CustomizeActionListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-customize-action-list',
                    template: "<div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100 m-2\">\r\n  <farris-datagrid #grid [columns]=\"cols\" [data]=\"customActionList\" [idField]=\"'id'\" [fit]=\"true\"\r\n    [fitColumns]=\"true\" [pagination]='false' [multiSelect]=\"true\" [showCheckbox]=\"true\" [multiSelect]=\"true\"\r\n    [checkOnSelect]=\"true\" [selectOnCheck]=\"true\">\r\n  </farris-datagrid>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CustomizeActionListComponent.ctorParameters = function () { return [
        { type: ProcessDesignerUIState }
    ]; };
    CustomizeActionListComponent.propDecorators = {
        grid: [{ type: ViewChild, args: ['grid',] }],
        footer: [{ type: ViewChild, args: ['footer',] }],
        submit: [{ type: Output }],
        cancel: [{ type: Output }]
    };
    return CustomizeActionListComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CustomizeActionComponent = /** @class */ (function () {
    function CustomizeActionComponent(designerState, expr, resolver, injector, modalService, message) {
        var _this = this;
        this.designerState = designerState;
        this.expr = expr;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: '自定义动作',
            width: 800,
            height: 520,
            showButtons: true
        };
        this.terminalList = [
            { value: 'app', text: '移动' },
            { value: 'web', text: 'web' },
            { value: 'web,app', text: 'web,移动' }
        ];
        this.actions = [];
        this.columns = [
            { field: 'code', width: 100, title: '编号' },
            { field: 'name', width: 100, title: '名称' },
            {
                field: 'terminalType', width: 100, title: '适用终端',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.terminalList }
                },
            },
        ];
        this.paramColumns = [
            { field: 'Name', width: 50, title: '编号' },
            { field: 'ValueText', width: 50, title: '名称' },
            {
                field: 'Value', width: 100, title: '参数值',
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            _this.showExprHelp(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
    }
    Object.defineProperty(CustomizeActionComponent.prototype, "value", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            var e_1, _a, e_2, _b;
            if (data && data.length > 0) {
                try {
                    for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                        var d = data_1_1.value;
                        /** @type {?} */
                        var action = new CustomizeAciton(d.id, d.code, d.name);
                        action.terminalType = d.terminalType;
                        action.actualParameters = [];
                        if (d.actualParameters && d.actualParameters.length > 0) {
                            try {
                                for (var _c = __values(d.actualParameters), _d = _c.next(); !_d.done; _d = _c.next()) {
                                    var a = _d.value;
                                    /** @type {?} */
                                    var p = new ActualParameter$1();
                                    p.Name = a.Name;
                                    p.Value = a.Value;
                                    p.ValueText = a.ValueText;
                                    p.Tag = a.Tag;
                                    action.actualParameters.push(p);
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                        }
                        this.actions.push(action);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CustomizeActionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    CustomizeActionComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.loadData();
        // this.actionlist.loadData(this.actions);
        // if (this.actions && this.actions.length > 0) {
        //   this.actionlist.selectRow(this.actions[0].id, true);
        // }
    };
    /**
     * @return {?}
     */
    CustomizeActionComponent.prototype.addActions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(CustomizeActionListComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        /** @type {?} */
        var modalConfig = {
            title: '自定义动作选择',
            width: 800,
            height: 520,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        /** @type {?} */
        var dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.submit.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            var e_3, _a;
            if (data && data.length > 0) {
                var _loop_1 = function (a) {
                    /** @type {?} */
                    var index = _this.actions.findIndex((/**
                     * @param {?} act
                     * @return {?}
                     */
                    function (act) { return act.code === a.code; }));
                    if (index > -1) {
                        _this.actions.splice(index, 1);
                    }
                    _this.actions.push(a);
                };
                try {
                    for (var data_2 = __values(data), data_2_1 = data_2.next(); !data_2_1.done; data_2_1 = data_2.next()) {
                        var a = data_2_1.value;
                        _loop_1(a);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (data_2_1 && !data_2_1.done && (_a = data_2.return)) _a.call(data_2);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                _this.loadData();
            }
            dialog.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) { return dialog.close(); }));
    };
    /**
     * @return {?}
     */
    CustomizeActionComponent.prototype.delete = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.actionlist.endCellEdit();
        if (this.actionlist.selectedRow && this.actionlist.selectedRow.data) {
            /** @type {?} */
            var i = this.actions.findIndex((/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d.code === _this.actionlist.selectedRow.data.code; }));
            this.actions.splice(i, 1);
            this.loadData();
            // this.actionlist.loadData(this.actions);
            // if (this.actions && this.actions.length > 0) {
            //   this.actionlist.selectRow(this.actions[0].id, true);
            // } else {
            //   this.curAction = null;
            // }
        }
        else {
            this.message.info('请首先选中一条选项！');
        }
    };
    /**
     * @return {?}
     */
    CustomizeActionComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        this.actionlist.endCellEdit();
        this.paramlist && this.paramlist.endCellEdit();
        /** @type {?} */
        var object = { value: this.actions, parameters: null };
        this.submitModal.emit(object);
    };
    /**
     * @return {?}
     */
    CustomizeActionComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @return {?}
     */
    CustomizeActionComponent.prototype.loadData = /**
     * @return {?}
     */
    function () {
        this.actionlist.loadData(this.actions);
        if (this.actions.length > 0 && (!this.actionlist.selectedRow || !this.actionlist.selectedRow.data)) {
            this.actionlist.selectRow(this.actions[0].id, true);
        }
        else {
            this.curAction = null;
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CustomizeActionComponent.prototype.selectChanged = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.curAction = data.data;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    CustomizeActionComponent.prototype.showExprHelp = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var e_4, _a, e_5, _b, e_6, _c, e_7, _d, e_8, _e, e_9, _f;
        if (this.designerState.schemas.length > 0) {
            try {
                for (var _g = __values(this.designerState.schemas), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var schema = _h.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_a = _g.return)) _a.call(_g);
                }
                finally { if (e_4) throw e_4.error; }
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerState.procInstContext.length > 0) {
            try {
                for (var _j = __values(this.designerState.procInstContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    context.push(variable);
                    // this.expr.addContext(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _l = __values(this.designerState.formalParameterContext), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var variable = _m.value;
                    _loop_2(variable);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _o = __values(this.designerState.participantContext), _p = _o.next(); !_p.done; _p = _o.next()) {
                    var variable = _p.value;
                    _loop_3(variable);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            var _loop_4 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _q = __values(this.designerState.processVariableContext), _r = _q.next(); !_r.done; _r = _q.next()) {
                    var variable = _r.value;
                    _loop_4(variable);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_r && !_r.done && (_e = _q.return)) _e.call(_q);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_f = context_1.return)) _f.call(context_1);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
        // if (e.instance.value) {
        this.expr.addExpressionText(e.instance.value);
        // }
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        function (expressioninfo) {
            e.formControl.setValue(expressioninfo);
            e.instance.cd.detectChanges();
        }));
    };
    CustomizeActionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-customize-action',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span>\r\n        <h4 class=\"f-title-text\">\u5217\u8868</h4>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"addActions()\">\u65B0\u589E</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"delete()\">\u5220\u9664</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <div [style.height.%]=\"curAction?45:100\">\r\n        <farris-datagrid #actionlist [data]=\"actions\" [idField]=\"'id'\"\r\n          [columns]=\"columns\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\"\r\n          [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\"\r\n          (selectChanged)=\"selectChanged($event)\" [closeOtherGridEditor]=\"true\">\r\n        </farris-datagrid>\r\n      </div>\r\n      <ng-container *ngIf=\"curAction\">\r\n        <farris-tabs class=\"f-utils-fill\" [value]=\"'parameters'\" [contentFill]=\"true\" [autoTitleWidth]=\"true\">\r\n          <farris-tab [title]=\"'\u53C2\u6570\u5217\u8868'\" [id]=\"'parameters'\">\r\n            <ng-template #content>\r\n              <div class=\"f-utils-fill-flex-column h-100\">\r\n                <farris-datagrid #paramlist [data]=\"curAction.actualParameters\" [columns]=\"paramColumns\"\r\n                  [idField]=\"'Name'\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n                  [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\" [closeOtherGridEditor]=\"true\">\r\n                </farris-datagrid>\r\n              </div>\r\n            </ng-template>\r\n          </farris-tab>\r\n        </farris-tabs>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CustomizeActionComponent.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService },
        { type: MessagerService }
    ]; };
    CustomizeActionComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        editorParams: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        value: [{ type: Input }],
        actionlist: [{ type: ViewChild, args: ['actionlist',] }],
        paramlist: [{ type: ViewChild, args: ['paramlist',] }]
    };
    return CustomizeActionComponent;
}());
var CustomizeActionConverter = /** @class */ (function () {
    function CustomizeActionConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    CustomizeActionConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.length > 0) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    };
    return CustomizeActionConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ProcessVariable = /** @class */ (function () {
    function ProcessVariable() {
        this.id = ProcessDeUtil.GenerateElementId();
        this.basicType = 'String';
    }
    return ProcessVariable;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ConstantEditComponent = /** @class */ (function () {
    function ConstantEditComponent() {
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ConstantEditComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ConstantEditComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        this.submitEmitter.emit(this.value);
    };
    /**
     * @return {?}
     */
    ConstantEditComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeEmitter.emit();
    };
    ConstantEditComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-constant-edit',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <textarea class=\"form-control\" type=\"text\" value=\"message\" [(ngModel)]=\"value\"\r\n        name=\"message\" style=\"height: 100%;\"></textarea>\r\n      <div class=\"farris-feedback valid-feedback\"></div>        \r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ConstantEditComponent.ctorParameters = function () { return []; };
    ConstantEditComponent.propDecorators = {
        footer: [{ type: ViewChild, args: ['footer',] }],
        closeEmitter: [{ type: Output }],
        submitEmitter: [{ type: Output }],
        value: [{ type: Input }]
    };
    return ConstantEditComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComponentEditLookUpService = /** @class */ (function () {
    function ComponentEditLookUpService(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    ComponentEditLookUpService.prototype.getData = /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    function (url, params) {
        /** @type {?} */
        var customData = params.customData;
        /** @type {?} */
        var index = params.pageIndex || 1;
        /** @type {?} */
        var size = params.pageSize || 20;
        /** @type {?} */
        var searchValue = params.searchValue;
        if (customData.helpId) {
            /** @type {?} */
            var query = "?helpId=" + customData.helpId + "&pageIndex=" + index + "&pageSize=" + size;
            if (searchValue) {
                query += "&searchValue=" + searchValue;
            }
            url += query;
            return this.http.get(url);
        }
    };
    ComponentEditLookUpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ComponentEditLookUpService.ctorParameters = function () { return [
        { type: HttpService }
    ]; };
    return ComponentEditLookUpService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComponentEditService = /** @class */ (function () {
    function ComponentEditService(http) {
        this.http = http;
    }
    /**
     * @param {?} helpId
     * @param {?} su
     * @return {?}
     */
    ComponentEditService.prototype.getHelpMetaData = /**
     * @param {?} helpId
     * @param {?} su
     * @return {?}
     */
    function (helpId, su) {
        /** @type {?} */
        var url = "/api/runtime/lcm/v1.0/rt-metadatas/" + helpId;
        return this.http.get(url);
    };
    ComponentEditService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ComponentEditService.ctorParameters = function () { return [
        { type: HttpService }
    ]; };
    return ComponentEditService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComponentEntity = /** @class */ (function () {
    function ComponentEntity() {
        this.Id = ProcessDeUtil.GenerateElementId();
        this.ActualParameters = new Array();
    }
    return ComponentEntity;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComponentEditComponent = /** @class */ (function () {
    function ComponentEditComponent(formBuilder, designerState, expr, resolver, injector, sessionSrc, modalService, componentService, ngZone, service, util, message) {
        var _this = this;
        this.formBuilder = formBuilder;
        this.designerState = designerState;
        this.expr = expr;
        this.resolver = resolver;
        this.injector = injector;
        this.sessionSrc = sessionSrc;
        this.modalService = modalService;
        this.componentService = componentService;
        this.ngZone = ngZone;
        this.service = service;
        this.util = util;
        this.message = message;
        this.cls = 'farris-main-area flex-column';
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
        this.showClearButton = false;
        this._component = new ComponentEntity();
        this.columns = [
            { field: 'Name', width: 100, title: '参数名' },
            {
                field: 'Value', width: 100, title: '参数值',
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            _this.showExprHelp(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        this.helpFields = {
            idField: '',
            valueField: '',
            textField: ''
        };
        this.dataUri = '/api/runtime/wf/v1.0/dtProcDefs/getHelpData';
        this.helpCols = [];
        this.displayType = 'List';
        this.title = '';
        this.beforeEdit = (/**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            /** @type {?} */
            var rowData = (/** @type {?} */ (param.rowData));
            switch (rowData.fetchValueMode) {
                case ParameterFetchValueMode.express:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                _this.showExprHelp(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                console.log('clear', e);
                            })
                        }
                    };
                    break;
                case ParameterFetchValueMode.none:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                _this.showExprHelp(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                console.log('clear', e);
                            })
                        }
                    };
                    break;
                case ParameterFetchValueMode.const:
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                    break;
                case ParameterFetchValueMode.enum:
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                    break;
                case ParameterFetchValueMode.help:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                _this.cell = e;
                                _this.helpId = ((/** @type {?} */ (rowData.fetchValueSetting))).helpId;
                                _this.su = ((/** @type {?} */ (rowData.fetchValueSetting))).serviceUnit;
                                _this.getHelpInfo().subscribe((/**
                                 * @param {?} re
                                 * @return {?}
                                 */
                                function (re) {
                                    console.log(re);
                                    /** @type {?} */
                                    var meta = re;
                                    /** @type {?} */
                                    var help = (/** @type {?} */ (JSON.parse(meta.content)));
                                    _this.helpCols = help.dataSource.columns;
                                    _this.displayType = help.displayType;
                                    _this.helpFields = {
                                        idField: help.idField,
                                        valueField: help.valueField,
                                        textField: help.textField
                                    };
                                    _this.lookup.onClear();
                                    _this.lookup.showDialog();
                                }), (/**
                                 * @param {?} err
                                 * @return {?}
                                 */
                                function (err) {
                                    _this.message.error('帮助元数据不存在，请联系系统管理员查看原因！');
                                }));
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                console.log('clear', e);
                            })
                        }
                    };
                    break;
            }
            return of(true);
        });
        this.afterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        function (rowIndex, rowData, column) {
            return of(true);
        });
        this.dictPicking = (/**
         * @return {?}
         */
        function () {
            return of({
                showDialog: true, data: {
                    helpId: _this.helpId
                }
            });
        });
        this.dictPicked = (/**
         * @param {?} rowData
         * @return {?}
         */
        function (rowData) {
            if (_this.cell) {
                console.log(rowData);
                _this.cell.formControl.setValue(_this.util.getValue(rowData, _this.helpFields.valueField));
                _this.cell.instance.cd.detectChanges();
                return of(true);
            }
        });
    }
    Object.defineProperty(ComponentEditComponent.prototype, "component", {
        get: /**
         * @return {?}
         */
        function () {
            return this._component;
        },
        set: /**
         * @param {?} cmp
         * @return {?}
         */
        function (cmp) {
            var _this = this;
            if (cmp && cmp.MethodCode) {
                this.service.getHelpMetaData(cmp.MetadataId, '').subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                function (re) {
                    /** @type {?} */
                    var c = JSON.parse(re.content);
                    /** @type {?} */
                    var operation = c.operations.find((/**
                     * @param {?} o
                     * @return {?}
                     */
                    function (o) { return o.code === cmp.MethodCode; }));
                    if (operation) {
                        cmp.ActualParameters = cmp.ActualParameters.map((/**
                         * @param {?} a
                         * @return {?}
                         */
                        function (a) {
                            /** @type {?} */
                            var p = operation.parameters.find((/**
                             * @param {?} i
                             * @return {?}
                             */
                            function (i) { return i.code === a.Name; }));
                            if (p) {
                                return __assign({}, a, { fetchValueMode: p.fetchValueMode, fetchValueSetting: p.fetchValueSetting });
                            }
                            else {
                                throw new Error('当前构件方法参数不一致，请更新！');
                            }
                        }));
                        _this._component = cmp;
                    }
                    else {
                        throw new Error('当前构件已不存在此方法，请更新！');
                    }
                }));
            }
            else {
                this._component = new ComponentEntity();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ComponentEditComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ComponentEditComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.inputGroup.nativeElement.addEventListener('mouseenter', _this.onMouseEnter.bind(_this));
            _this.inputGroup.nativeElement.addEventListener('mouseleave', _this.onMouseLeave.bind(_this));
        }));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ComponentEditComponent.prototype.onMouseEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ComponentEditComponent.prototype.onMouseLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    };
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    ComponentEditComponent.prototype.toggleClearIcon = /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    function (event, isShow) {
        if (isShow === void 0) { isShow = false; }
        /** @type {?} */
        var str = isShow ? '' : 'none';
        /** @type {?} */
        var clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    };
    /**
     * @return {?}
     */
    ComponentEditComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        this.grid.endCellEdit();
        if (this.validator()) {
            this.submitEmitter.emit(this.component);
        }
        else {
            this.message.info('尚未选择构件方法!');
        }
    };
    /**
     * @return {?}
     */
    ComponentEditComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeEmitter.emit();
    };
    /**
     * @private
     * @return {?}
     */
    ComponentEditComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.component.MethodCode || !this.component.MetadataId) {
            return false;
        }
        return true;
    };
    /**
     * @return {?}
     */
    ComponentEditComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.component = new ComponentEntity();
    };
    /**
     * @return {?}
     */
    ComponentEditComponent.prototype.selectComponent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.typeList = 'WebServiceComponent'; // 目前只能根据元数据类型过滤，后续添加标签过滤
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            try {
                /** @type {?} */
                var meta = $event.metadata;
                _this.openComponentSelectorNew(meta.id, _this.sessionSrc.getUserSessionId());
            }
            catch (_a) {
                console.log('$event', $event);
                throw new Error('获取解析构件出错' + $event);
            }
        }));
        /** @type {?} */
        var modalConfig = {
            title: '构件选择',
            width: 980,
            height: 548,
            showButtons: false
        };
        /** @type {?} */
        var dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) { return dialog.close(); }));
    };
    /**
     * @private
     * @param {?} metadataId
     * @param {?} sessionId
     * @return {?}
     */
    ComponentEditComponent.prototype.openComponentSelectorNew = /**
     * @private
     * @param {?} metadataId
     * @param {?} sessionId
     * @return {?}
     */
    function (metadataId, sessionId) {
        var _this = this;
        this.componentService.openSelector(metadataId, sessionId).subscribe((/**
         * @param {?} selectorResult
         * @return {?}
         */
        function (selectorResult) {
            selectorResult.confirmEvent.subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                if (result) {
                    _this.component.Name = result.name;
                    _this.component.MetadataId = result.id;
                    _this.component.MethodCode = result.operations[0].code;
                    // this.component.methodName = result.operations[0].name;
                    _this.component.ActualParameters = [];
                    if (result.operations[0].parameters && result.operations[0].parameters.length > 0) {
                        _this.component.ActualParameters = result.operations[0].parameters
                            .map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        function (p) { return ({
                            Name: p.code, Value: '', Tag: p.fetchValueMode.indexOf('express,none') > -1 ? 'expression' : 'constant',
                            fetchValueMode: p.fetchValueMode,
                            fetchValueSetting: p.fetchValueSetting
                        }); }));
                    }
                }
            }));
        }));
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ComponentEditComponent.prototype.showExprHelp = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f;
        if (this.designerState.schemas.length > 0) {
            try {
                for (var _g = __values(this.designerState.schemas), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var schema = _h.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_a = _g.return)) _a.call(_g);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerState.procInstContext.length > 0) {
            try {
                for (var _j = __values(this.designerState.procInstContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    context.push(variable);
                    // this.expr.addContext(variable);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _l = __values(this.designerState.formalParameterContext), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var variable = _m.value;
                    _loop_1(variable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _o = __values(this.designerState.participantContext), _p = _o.next(); !_p.done; _p = _o.next()) {
                    var variable = _p.value;
                    _loop_2(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _q = __values(this.designerState.processVariableContext), _r = _q.next(); !_r.done; _r = _q.next()) {
                    var variable = _r.value;
                    _loop_3(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_r && !_r.done && (_e = _q.return)) _e.call(_q);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_f = context_1.return)) _f.call(context_1);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.buildExpression().then((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            e.formControl.setValue(d);
            e.instance.cd.detectChanges();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ComponentEditComponent.prototype.getHelpInfo = /**
     * @private
     * @return {?}
     */
    function () {
        return this.service.getHelpMetaData(this.helpId, this.su);
    };
    ComponentEditComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-component-edit',
                    template: "<div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100 m-2\" style=\"background:#FFF;\">\r\n  <form class=\"farris-form farris-card-content-bg farris-card-section mx-2\">\r\n    <div class=\"d-flex flex-wrap flex-column mb-2 pr-4\">\r\n      <div class=\"farris-form-controls-inline farris-form-auto mb-2\">\r\n        <div class=\"farris-group-wrap mx-3\">\r\n          <div class=\"form-group\">\r\n            <label class=\"col-form-label\">\r\n              <span class=\"farris-label-info text-danger\">*</span>\r\n              <span class=\"farris-label-text\">\u6784\u4EF6\u540D\u79F0</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap ml-2\">\r\n              <input type=\"text\" class=\"k-textbox form-control\" name=\"name\" [(ngModel)]=\"component.Name\" />\r\n              <div class=\"farris-feedback valid-feedback\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"farris-form-controls-inline farris-form-auto\">\r\n        <div class=\"farris-group-wrap mx-3\">\r\n          <div class=\"form-group\">\r\n            <label class=\"col-form-label\">\r\n              <span class=\"farris-label-info text-danger\">*</span>\r\n              <span class=\"farris-label-text\">\u6784\u4EF6\u9009\u62E9</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap ml-2\">\r\n              <div #inputGroup class=\"input-group\">\r\n                <input type=\"text\" class=\"form-control\" [(ngModel)]=\"component.MethodCode\" name=\"methodCode\"\r\n                  [readOnly]=\"true\" />\r\n                <div class=\"input-group-append\">\r\n                  <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                    (click)=\"clear()\">\r\n                    <i class=\"f-icon modal_close\"></i>\r\n                  </span>\r\n                  <span class=\"input-group-text\" (click)=\"selectComponent()\" style=\"background: #FFF;\">\r\n                    <i class=\"f-icon f-icon-lookup\"></i>\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div class=\"farris-feedback valid-feedback\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n  <farris-tabs class=\"f-utils-fill\" #params [value]=\"'params'\" [contentFill]=\"true\">\r\n    <farris-tab title=\"\u53C2\u6570\u5217\u8868\" [id]=\"'params'\">\r\n      <ng-template #content>\r\n        <div class=\"f-utils-fill-flex-column h-100\">\r\n          <farris-datagrid #grid [data]=\"component.ActualParameters\" [columns]=\"columns\" [idField]=\"'Name'\" [fit]=\"true\"\r\n            [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\" [striped]=\"true\"\r\n            [multiSelect]=\"false\" [afterEdit]=\"afterEdit\" [beforeEdit]=\"beforeEdit\"></farris-datagrid>\r\n        </div>\r\n      </ng-template>\r\n    </farris-tab>\r\n  </farris-tabs>\r\n</div>\r\n\r\n<farris-lookup-grid style=\"display: none;\" #lookup [(ngModel)]=\"value\" [editable]=\"false\" [columns]=\"helpCols\"\r\n  [singleSelect]=\"true\" [title]=\"title\" [displayType]=\"displayType\" [uri]=\"dataUri\"\r\n  [idField]=\"helpFields.idField\" [pagination]=\"true\" [valueField]=\"helpFields.valueField\"\r\n  [textField]=\"helpFields.textField\" [dictPicking]=\"dictPicking\" [dictPicked]=\"dictPicked\">\r\n</farris-lookup-grid>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>",
                    providers: [
                        ComponentEditService,
                        { provide: ServerSideToken, useClass: ComponentEditLookUpService }
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ComponentEditComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: SessionService },
        { type: BsModalService },
        { type: CommonComponentUiRTService },
        { type: NgZone },
        { type: ComponentEditService },
        { type: ProcessDeUtil },
        { type: MessagerService }
    ]; };
    ComponentEditComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        grid: [{ type: ViewChild, args: [DatagridComponent,] }],
        lookup: [{ type: ViewChild, args: [LookupGridComponent,] }],
        footer: [{ type: ViewChild, args: ['footer',] }],
        closeEmitter: [{ type: Output }],
        submitEmitter: [{ type: Output }],
        inputGroup: [{ type: ViewChild, args: ['inputGroup',] }],
        component: [{ type: Input }]
    };
    return ComponentEditComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ProcessVariablesComponent = /** @class */ (function () {
    function ProcessVariablesComponent(message, resolver, injector, modalService, uistate, expr) {
        var _this = this;
        this.message = message;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.uistate = uistate;
        this.expr = expr;
        this.cls = 'farris-main-area flex-column';
        this.variableSetting = false;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.variableSetEmitter = new EventEmitter();
        this.value = new Array();
        this.editorParams = {};
        this.basicTypes = [
            { value: 'String', text: '字符' },
            { value: 'Integer', text: '整形' },
            { value: 'Decimal', text: '小数' },
            { value: 'Boolean', text: '布尔' },
        ];
        this.tags = [
            { value: 'constant', text: '常量' },
            { value: 'expression', text: '表达式' },
            { value: 'component', text: '构件' }
        ];
        this.columns = [
            {
                field: 'name', width: 80, title: '变量编号', sortable: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'documentation', width: 80, title: '变量名称', sortable: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'basicType', width: 60, title: '变量类型', sortable: true,
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.basicTypes }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.basicTypes, idField: 'value', panelHeight: 'auto', showClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }, {
                field: 'description', width: 100, title: '描述', showTips: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
            }, {
                field: 'tag', width: 60, title: '初始值类型', sortable: true,
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.tags }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: {
                        valueField: 'value', textField: 'text', data: this.tags, idField: 'value', panelHeight: 'auto',
                        selectChange: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            _this.value = _this.value.map((/**
                             * @param {?} v
                             * @return {?}
                             */
                            function (v) {
                                if (v.id === e.rowId) {
                                    v.value = null;
                                    v.valueText = null;
                                    if (v.component) {
                                        v.component = null;
                                    }
                                    return v;
                                }
                                else {
                                    return v;
                                }
                            }));
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            _this.value = _this.value.map((/**
                             * @param {?} v
                             * @return {?}
                             */
                            function (v) {
                                if (v.id === e.rowId) {
                                    v.value = null;
                                    v.valueText = null;
                                    if (v.component) {
                                        v.component = null;
                                    }
                                    return v;
                                }
                                else {
                                    return v;
                                }
                            }));
                        })
                    }
                }
            }, {
                field: 'valueText', width: 120, title: '初始值', showTips: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} }
            }
        ];
        this.modalConfig = {
            title: '流程变量',
            width: 1070,
            height: 510,
            showButtons: true
        };
        this.beforeEdit = (/**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            /** @type {?} */
            var rowData = (/** @type {?} */ (param.rowData));
            /** @type {?} */
            var column = param.column;
            if (column.field === 'valueText') {
                if (!((/** @type {?} */ (rowData))).tag) {
                    return of(false);
                }
                if (((/** @type {?} */ (rowData))).tag === _this.tags[0].value) {
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                }
                else {
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            showClear: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                _this.valueEdit(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                console.log('clear', e);
                            })
                        }
                    };
                }
            }
            return of(true);
        });
    }
    /**
     * @return {?}
     */
    ProcessVariablesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.variableSetting) {
            this.columns = this.columns.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field !== 'tag'
                && c.field !== 'valueText' && c.field !== 'description'; }));
        }
    };
    /**
     * @return {?}
     */
    ProcessVariablesComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var variable = new ProcessVariable();
        this.value = this.value.concat([variable]);
    };
    /**
     * @return {?}
     */
    ProcessVariablesComponent.prototype.delete = /**
     * @return {?}
     */
    function () {
        this.grid.endCellEdit();
        /** @type {?} */
        var selected = this.grid.selectedRow;
        if (!selected) {
            this.message.info('尚未选中流程变量！');
            return;
        }
        this.value = this.value.filter((/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return v.id !== selected.data.id; }));
    };
    /**
     * @return {?}
     */
    ProcessVariablesComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        if (this.variableSetting) {
            /** @type {?} */
            var selecteds = this.grid.checkeds;
            if (selecteds.length > 0) {
                this.variableSetEmitter.emit(selecteds);
            }
            else {
                this.message.info('尚未选中流程变量！');
            }
        }
        else {
            this.grid.endCellEdit();
            if (this.validator()) {
                /** @type {?} */
                var object = { value: this.value, parameters: null };
                this.submitModal.emit(object);
            }
        }
    };
    /**
     * @return {?}
     */
    ProcessVariablesComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ProcessVariablesComponent.prototype.endEdit = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data.column.field === 'valueText' && data.rowData.tag === this.tags[0].value) {
            data.rowData.value = data.rowData.valueText;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ProcessVariablesComponent.prototype.valueEdit = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var rowdata = e.rowData;
        switch (rowdata.tag) {
            case this.tags[0].value:
                this.editConstant(e);
                break;
            case this.tags[1].value:
                this.editExpression(e);
                break;
            case this.tags[2].value:
                this.editComponent(e);
                break;
        }
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    ProcessVariablesComponent.prototype.editConstant = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var data = e.rowData;
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ConstantEditComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.value = data.value;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            e.formControl.setValue(re);
            e.instance.cd.detectChanges();
            data.value = re;
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: '常量',
            width: 340,
            height: 280,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    ProcessVariablesComponent.prototype.editExpression = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f;
        /** @type {?} */
        var data = e.rowData;
        if (this.uistate.schemas.length > 0) {
            try {
                for (var _g = __values(this.uistate.schemas), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var schema = _h.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_a = _g.return)) _a.call(_g);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.uistate.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.uistate.procInstContext.length > 0) {
            try {
                for (var _j = __values(this.uistate.procInstContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    context.push(variable);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (this.uistate.formalParameterContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _l = __values(this.uistate.formalParameterContext), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var variable = _m.value;
                    _loop_1(variable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.uistate.participantContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _o = __values(this.uistate.participantContext), _p = _o.next(); !_p.done; _p = _o.next()) {
                    var variable = _p.value;
                    _loop_2(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.uistate.processVariableContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _q = __values(this.uistate.processVariableContext), _r = _q.next(); !_r.done; _r = _q.next()) {
                    var variable = _r.value;
                    _loop_3(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_r && !_r.done && (_e = _q.return)) _e.call(_q);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_f = context_1.return)) _f.call(context_1);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 表达式展现模式：默认高级版
        this.expr.addExpressionText(data.value);
        this.expr.buildExpression().then((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            e.formControl.setValue(re);
            e.instance.cd.detectChanges();
            data.value = re;
        }));
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    ProcessVariablesComponent.prototype.editComponent = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var data = e.rowData;
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ComponentEditComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.component = data.component;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            e.formControl.setValue(re.Name + '-' + re.MethodCode);
            e.instance.cd.detectChanges();
            data.value = re.Id;
            data.component = re;
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: '构件',
            width: 800,
            height: 515,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @private
     * @return {?}
     */
    ProcessVariablesComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        var e_7, _a;
        try {
            for (var _b = __values(this.value), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                if (!item.name) {
                    this.message.warning('变量编号不允许为空！');
                    return false;
                }
                if (!item.documentation) {
                    this.message.warning('变量名称不允许为空！');
                    return false;
                }
                if (!this.IsMatchVariableNameRules(item.name)) {
                    this.message.warning('变量编号只能包含字母、数字和下划线，且不能以数字开头！');
                    return false;
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_7) throw e_7.error; }
        }
        if (this.value.length > 1) {
            for (var i = 0; i < this.value.length; i++) {
                /** @type {?} */
                var code1 = this.value[i].name;
                for (var j = i + 1; j < this.value.length; j++) {
                    /** @type {?} */
                    var code2 = this.value[j].name;
                    if (code1 === code2) {
                        this.message.warning("\u6D41\u7A0B\u53D8\u91CF\u7F16\u53F7\u4E0D\u5141\u8BB8\u91CD\u590D\uFF01");
                        return false;
                    }
                }
            }
        }
        return true;
    };
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    ProcessVariablesComponent.prototype.IsMatchVariableNameRules = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var Regx = /^[a-zA-Z_][a-zA-Z_0-9]{0,}/;
        if (Regx.test(str)) {
            return true;
        }
        else {
            return false;
        }
    };
    ProcessVariablesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-process-variables',
                    template: "<div class=\"f-page\">\r\n  <div *ngIf=\"!variableSetting\" class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span>\r\n        <h4 class=\"f-title-text\">\u5217\u8868</h4>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"add()\">\u65B0\u589E</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"delete()\">\u5220\u9664</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"value\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n        [editable]=\"!variableSetting\" [editMode]=\"'cell'\" [pagination]=\"false\" (endEdit)=\"endEdit($event)\" [beforeEdit]=\"beforeEdit\"\r\n        [showCheckbox]=\"variableSetting\" [multiSelect]=\"variableSetting\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\" [showAllCheckbox]=\"variableSetting\"\r\n        [showLineNumber]=\"true\" [lineNumberTitle]=\"'\u5E8F\u53F7'\" [lineNumberWidth]=\"50\" [striped]=\"true\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ProcessVariablesComponent.ctorParameters = function () { return [
        { type: MessagerService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService },
        { type: ProcessDesignerUIState },
        { type: ExpressionService }
    ]; };
    ProcessVariablesComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        variableSetting: [{ type: Input }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        variableSetEmitter: [{ type: Output }],
        value: [{ type: Input }],
        editorParams: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        grid: [{ type: ViewChild, args: ['grid',] }]
    };
    return ProcessVariablesComponent;
}());
var ProcessVariablesConverter = /** @class */ (function () {
    function ProcessVariablesConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    ProcessVariablesConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.length > 0) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    };
    return ProcessVariablesConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TimeLimitInfo = /** @class */ (function () {
    function TimeLimitInfo() {
        this.tag = 'constant';
        this.enable = false;
        this.timeUnit = 'day';
        this.expireOperations = new Array();
    }
    return TimeLimitInfo;
}());
var ExpireOperation = /** @class */ (function () {
    function ExpireOperation() {
        this.id = ProcessDeUtil.GenerateElementId();
        this.durationType = 'BeforeDuration';
        this.timeDuration = 0;
        this.timeUnit = 'day';
        // 默认操作类型是发送预警消息
        this.operationTypeName = 'SendMessageExpireOperation';
    }
    return ExpireOperation;
}());
/**
 * 发送预警信息方式
 */
var /**
 * 发送预警信息方式
 */
SendMessage = /** @class */ (function (_super) {
    __extends(SendMessage, _super);
    function SendMessage(location) {
        var _this = _super.call(this) || this;
        _this.cycleEnable = false;
        _this.cycleTimeUnit = 'day';
        _this.receiver = location === 'activity' ? 'workItemParticipant' : 'procInstCreator';
        _this.receiverText = location === 'activity' ? '当前节点办理人' : '流程发起人';
        _this.subject = '超时预警';
        _this.message = location === 'activity' ? '您有一条待办消息即将超时。' : '您有一条消息即将超时';
        return _this;
    }
    return SendMessage;
}(ExpireOperation));
var AutoHandle = /** @class */ (function (_super) {
    __extends(AutoHandle, _super);
    function AutoHandle(type) {
        var _this = _super.call(this) || this;
        _this.autoHandleType = type;
        _this.message = '同意';
        return _this;
    }
    return AutoHandle;
}(ExpireOperation));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SendMessageOperationComponent = /** @class */ (function () {
    function SendMessageOperationComponent(injector, message, uistate) {
        this.injector = injector;
        this.message = message;
        this.uistate = uistate;
        // operation: ExpireOperation = new ExpireOperation();
        this.operation = new SendMessage('activity');
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
        this.typeGroup = this.uistate.messageChannels.map((/**
         * @param {?} m
         * @return {?}
         */
        function (m) { return ({ value: m.code, name: m.name }); }));
        this.receiverVariables = [
            { value: 'procInstCreator', name: '流程发起人' }
        ];
        this.activityReceiverVariables = [
            { value: 'workItemParticipant', name: '当前节点办理人' },
            { value: 'procInstCreator', name: '流程发起人' },
            { value: 'preActExecutors', name: '上一节点办理人' }
        ];
        this.placeholder = '';
        this.placeholder2 = '';
        this.parser = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            // console.log(val);
            return Number(val);
        });
        this.timeUnitCollection = [
            { value: 'day', text: '天' },
            { value: 'hour', text: '时' },
            { value: 'minute', text: '分' }
        ];
        this.location = 'activity';
        this.activityReceiverVar = '';
        this.bindingData = {};
    }
    Object.defineProperty(SendMessageOperationComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.operation;
        },
        set: /**
         * @param {?} info
         * @return {?}
         */
        function (info) {
            var e_1, _a, e_2, _b;
            this.operation = Object.assign({}, info);
            if (this.operation.sendType === undefined) {
                /** @type {?} */
                var sendMessage = new SendMessage(this.location);
                this.operation.cycleEnable = sendMessage.cycleEnable;
                this.operation.cycleTimeUnit = sendMessage.cycleTimeUnit;
                this.operation.receiver = sendMessage.receiver;
                this.operation.subject = sendMessage.subject;
                this.operation.message = sendMessage.message;
            }
            if (this.operation.receiver && this.operation.receiver.length > 0) {
                /** @type {?} */
                var array = this.operation.receiver.split(',');
                if (array.indexOf('workItemParticipant') > -1) {
                    this.receiverVari = 'workItemParticipant';
                    this.activityReceiverVar += 'workItemParticipant,';
                }
                if (array.indexOf('procInstCreator') > -1) {
                    this.receiverVari = 'procInstCreator';
                    this.activityReceiverVar += 'procInstCreator,';
                }
                if (array.indexOf('preActExecutors') > -1) {
                    this.activityReceiverVar += 'preActExecutors,';
                }
                if (this.activityReceiverVar.length > 0) {
                    this.activityReceiverVar = this.activityReceiverVar.substring(0, this.activityReceiverVar.length - 1);
                }
                if (array.length > 0) {
                    array = array.filter((/**
                     * @param {?} a
                     * @return {?}
                     */
                    function (a) { return a !== 'procInstCreator'; }));
                    this.bindingData.id = '';
                    try {
                        for (var array_1 = __values(array), array_1_1 = array_1.next(); !array_1_1.done; array_1_1 = array_1.next()) {
                            var r = array_1_1.value;
                            this.bindingData.id += r + ',';
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (array_1_1 && !array_1_1.done && (_a = array_1.return)) _a.call(array_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    if (this.bindingData.id) {
                        this.bindingData.id = this.bindingData.id.substring(0, this.bindingData.id.length - 1);
                    }
                }
            }
            if (this.operation.receiverText && this.operation.receiverText.length > 0) {
                /** @type {?} */
                var array = this.operation.receiverText.split(',');
                if (array.length > 0) {
                    array = array.filter((/**
                     * @param {?} a
                     * @return {?}
                     */
                    function (a) { return a !== '流程发起人'; }));
                    this.bindingData.name = '';
                    try {
                        for (var array_2 = __values(array), array_2_1 = array_2.next(); !array_2_1.done; array_2_1 = array_2.next()) {
                            var r = array_2_1.value;
                            this.bindingData.name += r + ',';
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (array_2_1 && !array_2_1.done && (_b = array_2.return)) _b.call(array_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    if (this.bindingData.name) {
                        this.bindingData.name = this.bindingData.name.substring(0, this.bindingData.name.length - 1);
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SendMessageOperationComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    SendMessageOperationComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        this.operation.cycleTime += '';
        if (this.location === 'process') {
            this.setReceiver();
        }
        if (this.location === 'activity') {
            this.setActivityReceiver();
        }
        if (this.validator()) {
            this.submitEmitter.emit(this.operation);
        }
    };
    /**
     * @return {?}
     */
    SendMessageOperationComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeEmitter.emit();
    };
    /**
     * @return {?}
     */
    SendMessageOperationComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.bindingData = {};
    };
    /**
     * @private
     * @return {?}
     */
    SendMessageOperationComponent.prototype.setReceiver = /**
     * @private
     * @return {?}
     */
    function () {
        var e_3, _a;
        /** @type {?} */
        var receiver = '';
        /** @type {?} */
        var receiverText = '';
        if (this.receiverVari) {
            receiver += this.receiverVari + ',';
            /** @type {?} */
            var array = this.receiverVari.split(',');
            if (array.length > 0) {
                var _loop_1 = function (a) {
                    /** @type {?} */
                    var t = this_1.receiverVariables.find((/**
                     * @param {?} v
                     * @return {?}
                     */
                    function (v) { return v.value === a; })).name;
                    receiverText += t + ',';
                };
                var this_1 = this;
                try {
                    for (var array_3 = __values(array), array_3_1 = array_3.next(); !array_3_1.done; array_3_1 = array_3.next()) {
                        var a = array_3_1.value;
                        _loop_1(a);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (array_3_1 && !array_3_1.done && (_a = array_3.return)) _a.call(array_3);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        }
        if (this.bindingData.id) {
            receiver += this.bindingData.id + ',';
            receiverText += this.bindingData.name + ',';
        }
        if (receiver) {
            receiver = receiver.substring(0, receiver.length - 1);
        }
        if (receiverText) {
            receiverText = receiverText.substring(0, receiverText.length - 1);
        }
        this.operation.receiver = receiver;
        this.operation.receiverText = receiverText;
    };
    /**
     * @return {?}
     */
    SendMessageOperationComponent.prototype.setActivityReceiver = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var receiver = '';
        if (this.activityReceiverVar) {
            receiver += this.activityReceiverVar + ',';
        }
        if (receiver) {
            receiver = receiver.substring(0, receiver.length - 1);
        }
        this.operation.receiver = receiver;
    };
    /**
     * @private
     * @return {?}
     */
    SendMessageOperationComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.operation.sendType) {
            this.message.info('发送方式不允许为空！');
            return false;
        }
        if (!this.operation.subject) {
            this.message.info('消息主题不允许为空！');
            return false;
        }
        if (!this.operation.message) {
            this.message.info('消息内容不允许为空！');
            return false;
        }
        if (!this.operation.receiver) {
            this.message.info('接收人不允许为空！');
            return false;
        }
        return true;
    };
    SendMessageOperationComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-send-message-operation',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">\u9884\u8B66\u6D88\u606F\u8BBE\u7F6E</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <perfect-scrollbar [config]=\"{}\">\r\n          <form class=\"h-100\">\r\n            <div class=\"farris-form form-inline farris-form-inline\">\r\n              <div class=\"farris-form-controls-inline\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group\">\r\n                    <label class=\"col-form-label pl-1 mr-3\">\r\n                      <span class=\"farris-label-text\">\u542F\u7528\u5FAA\u73AF\u9884\u8B66</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap mr-5\">\r\n                      <farris-switch [(ngModel)]=\"operation.cycleEnable\" name=\"cycleEnable\"></farris-switch>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"farris-form-controls-inline\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group\" style=\"width: 100%;\">\r\n                    <label class=\"col-form-label pl-1 mr-3\">\r\n                      <span class=\"farris-label-text\">\u5FAA\u73AF\u65F6\u95F4\u95F4\u9694</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap mr-1\" style=\"width: 35%;\">\r\n                      <farris-number-spinner [(ngModel)]=\"operation.cycleTime\" name=\"cycleTime\"\r\n                                             [editable]=\"true\" [precision]=\"0\" [parser]=\"parser\"\r\n                                             [min]=\"0\"></farris-number-spinner>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                    <div class=\"farris-input-wrap mr-5\" style=\"width: 30%;\">\r\n                      <farris-combo-list [(ngModel)]=\"operation.cycleTimeUnit\" name=\"cycleTimeUnit\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                                         [valueField]=\"'value'\" [data]=\"timeUnitCollection\" [panelHeight]=\"'auto'\"\r\n                                         [editable]=\"false\" [enableClear]=\"false\">\r\n                      </farris-combo-list>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u53D1\u9001\u65B9\u5F0F</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <farris-checkboxgroup #checkboxGroup [(ngModel)]=\"operation.sendType\" name=\"sendType\" [horizontal]=\"true\"\r\n                      [data]=\"typeGroup\">\r\n                    </farris-checkboxgroup>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"farris-group-wrap my-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u6D88\u606F\u4E3B\u9898</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <input class=\"form-control\" type=\"text\" value=\"subject\" [(ngModel)]=\"operation.subject\" name=\"subject\"\r\n                      [placeholder]=\"placeholder\" />\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"farris-group-wrap my-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u6D88\u606F\u5185\u5BB9</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <textarea class=\"form-control\" type=\"text\" value=\"message\" [(ngModel)]=\"operation.message\" name=\"message\"\r\n                      [placeholder]=\"placeholder2\" style=\"height: 100px;\"></textarea>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div *ngIf=\"location==='process'\" class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u63A5\u6536\u4EBA</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <div class=\"pb-2\">\r\n                      <farris-checkboxgroup #receiverVariable [(ngModel)]=\"receiverVari\" name=\"receiverVariable\"\r\n                        [horizontal]=\"true\" [data]=\"receiverVariables\">\r\n                      </farris-checkboxgroup>\r\n                    </div>\r\n                    <div>\r\n                      <sys-farris-grid-lookup #userHelp [singleSelect]=\"false\" [displayTxt]=\"bindingData.name\" [pagination]=\"true\"\r\n                        [pageSize]=\"20\" [title]=\"'\u7CFB\u7EDF\u7528\u6237'\" [sourceType]=\"'user'\" [bindingData]=\"bindingData\"\r\n                        [filter]=\"{notGetCurrentUser:false, notGetStopUser:true}\" [typeMode]=\"1\" (clear)=\"clear()\">\r\n                      </sys-farris-grid-lookup>\r\n                    </div>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div *ngIf=\"location==='activity'\" class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u63A5\u6536\u4EBA</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <div class=\"pb-2\">\r\n                      <farris-checkboxgroup #receiverVariable1 [(ngModel)]=\"activityReceiverVar\" name=\"ActivityReceiverVariable\"\r\n                                            [horizontal]=\"true\" [data]=\"activityReceiverVariables\">\r\n                      </farris-checkboxgroup>\r\n                    </div>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </perfect-scrollbar>\r\n\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SendMessageOperationComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: MessagerService },
        { type: ProcessDesignerUIState }
    ]; };
    SendMessageOperationComponent.propDecorators = {
        footer: [{ type: ViewChild, args: ['footer',] }],
        value: [{ type: Input }],
        closeEmitter: [{ type: Output }],
        submitEmitter: [{ type: Output }]
    };
    return SendMessageOperationComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AutoHandleOperationComponent = /** @class */ (function () {
    function AutoHandleOperationComponent(message, uiState) {
        var e_1, _a;
        this.message = message;
        this.uiState = uiState;
        this.placeholder = '';
        this.operation = new AutoHandle('Pass');
        this.submitEmitter = new EventEmitter();
        this.closeEmitter = new EventEmitter();
        this.autoHandleType = [
        // { value: 'autoPass', text: '自动通过' },
        // { value: 'autoBack', text: '自动驳回' }
        ];
        try {
            for (var _b = __values(this.uiState.propertyData.ApprovalItems), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                this.autoHandleType.push({ value: item.Value, text: item.Text });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    Object.defineProperty(AutoHandleOperationComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.operation;
        },
        set: /**
         * @param {?} info
         * @return {?}
         */
        function (info) {
            this.operation = Object.assign({}, info);
            if (this.operation.autoHandleType === undefined) {
                /** @type {?} */
                var autoHandle = new AutoHandle(this.autoHandleType[0].value);
                this.operation.autoHandleType = autoHandle.autoHandleType;
                this.operation.message = autoHandle.message;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AutoHandleOperationComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AutoHandleOperationComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        if (this.validator()) {
            this.submitEmitter.emit(this.operation);
        }
    };
    /**
     * @return {?}
     */
    AutoHandleOperationComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeEmitter.emit();
    };
    /**
     * @private
     * @return {?}
     */
    AutoHandleOperationComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.operation.message) {
            this.message.info('自动办理意见不允许为空！');
            return false;
        }
        if (!this.operation.autoHandleType) {
            this.message.info('自动办理不允许为空！');
            return false;
        }
        return true;
    };
    AutoHandleOperationComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-auto-handle-operation',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">\u81EA\u52A8\u529E\u7406\u8BBE\u7F6E</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <perfect-scrollbar [config]=\"{}\">\r\n          <form class=\"h-100\">\r\n            <div class=\"farris-form form-inline farris-form-inline\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u81EA\u52A8\u529E\u7406\u65B9\u5F0F</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <farris-combo-list [(ngModel)]=\"operation.autoHandleType\" name=\"cycleTimeUnit\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                                       [valueField]=\"'value'\" [data]=\"autoHandleType\" [panelHeight]=\"'auto'\"\r\n                                       [editable]=\"false\" [enableClear]=\"false\">\r\n                    </farris-combo-list>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"farris-group-wrap my-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u81EA\u52A8\u529E\u7406\u610F\u89C1</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <textarea class=\"form-control\" type=\"text\" value=\"message\" [(ngModel)]=\"operation.message\" name=\"message\"\r\n                              [placeholder]=\"placeholder\" style=\"height: 100px;\"></textarea>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </perfect-scrollbar>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    AutoHandleOperationComponent.ctorParameters = function () { return [
        { type: MessagerService },
        { type: ProcessDesignerUIState }
    ]; };
    AutoHandleOperationComponent.propDecorators = {
        footer: [{ type: ViewChild, args: ['footer',] }],
        value: [{ type: Input }],
        submitEmitter: [{ type: Output }],
        closeEmitter: [{ type: Output }]
    };
    return AutoHandleOperationComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TimeLimitControlComponent = /** @class */ (function () {
    function TimeLimitControlComponent(resolver, injector, modalService, message) {
        var _this = this;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: '超时操作',
            width: 580,
            height: 460,
            showButtons: true
        };
        this.timeLimitInfo = new TimeLimitInfo();
        this.tagCollection = [
            { value: 'constant', text: '固定值' },
            { value: 'scope', text: '时间范围' }
        ];
        this.timeUnitCollection = [
            { value: 'day', text: '天' },
            { value: 'hour', text: '时' },
            { value: 'minute', text: '分' }
        ];
        this.durationTypeCollection = [
            { value: 'BeforeDuration', text: '到期之前' },
            { value: 'OnDuration', text: '到期时' },
            { value: 'AfterDuration', text: '到期之后' }
        ];
        this.activityOperationTypeName = [
            { value: 'SendMessageExpireOperation', text: '超时预警' },
            { value: 'AutoHandleExpireOperation', text: '自动办理' }
        ];
        this.processOperationTypeName = [
            { value: 'SendMessageExpireOperation', text: '超时预警' }
        ];
        this.operationTypeName = [];
        this.timeScopeCollection = [
            { value: 'curDay', name: '当天' }
        ];
        this.timeScopeValue = this.timeScopeCollection[0].value;
        this.cols = [];
        this.location = 'activity';
        this.parser = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            // console.log(val);
            return Number(val);
        });
        this.durationTypeChange = (/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data && data.value && data.value.value === _this.durationTypeCollection[1].value) {
                /** @type {?} */
                var operation = _this.timeLimitInfo.expireOperations.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.id === data.rowData.id; }));
                operation.timeDuration = 0;
            }
        });
    }
    Object.defineProperty(TimeLimitControlComponent.prototype, "value", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            var e_1, _a;
            if (v) {
                this.timeLimitInfo = v;
            }
            else {
                this.timeLimitInfo = new TimeLimitInfo();
            }
            try {
                // 兼容历史数据中的操作类型
                for (var _b = __values(this.timeLimitInfo.expireOperations), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var operation = _c.value;
                    if (operation.operationTypeName === undefined) {
                        operation.operationTypeName = 'SendMessageExpireOperation';
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TimeLimitControlComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.location = this.editorParams.location;
        if (this.location === 'activity') {
            this.operationTypeName = this.activityOperationTypeName;
        }
        else {
            this.operationTypeName = this.processOperationTypeName;
        }
        this.cols = [
            {
                field: 'durationType', width: 80, title: '期限类型',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.durationTypeCollection }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: {
                        valueField: 'value', textField: 'text', data: this.durationTypeCollection, idField: 'value', panelHeight: 'auto',
                        valueChange: this.durationTypeChange, showClear: false
                    }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'timeDuration', width: 60, title: '时长',
                editor: {
                    type: EditorTypes.NUMBERBOX, options: { min: 0 },
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'timeUnit', width: 60, title: '单位',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.timeUnitCollection }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.timeUnitCollection, idField: 'value', panelHeight: 'auto' }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'operationTypeName', width: 100, title: '操作类型名称',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.operationTypeName }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.operationTypeName, idField: 'value', panelHeight: 'auto' }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'sendType', width: 80, title: '操作', template: this.cell,
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }
        ];
    };
    // beforeEdit = (param: RowEditParam) => {
    //   const rowData = param.rowData as any;
    //   if(rowData.durationType === 'OnDuration'){
    //     if(param.column.field === 'timeUnit'){
    //       rowData.timeUnit = 'day'
    //       param.column.editor = {};
    //     } else if(param.column.field === 'timeDuration'){
    //       rowData.timeDuration = 0;
    //       param.column.editor = {};
    //     } else {
    //       const fieldValue = this.cols.find(col => col.field === param.column.field);
    //       param.column.editor = fieldValue.editor;
    //     }
    //   }
    //   return of(true);
    // }
    // beforeEdit = (param: RowEditParam) => {
    //   const rowData = param.rowData as any;
    //   if(rowData.durationType === 'OnDuration'){
    //     if(param.column.field === 'timeUnit'){
    //       rowData.timeUnit = 'day'
    //       param.column.editor = {};
    //     } else if(param.column.field === 'timeDuration'){
    //       rowData.timeDuration = 0;
    //       param.column.editor = {};
    //     } else {
    //       const fieldValue = this.cols.find(col => col.field === param.column.field);
    //       param.column.editor = fieldValue.editor;
    //     }
    //   }
    //   return of(true);
    // }
    /**
     * @return {?}
     */
    TimeLimitControlComponent.prototype.clickOK = 
    // beforeEdit = (param: RowEditParam) => {
    //   const rowData = param.rowData as any;
    //   if(rowData.durationType === 'OnDuration'){
    //     if(param.column.field === 'timeUnit'){
    //       rowData.timeUnit = 'day'
    //       param.column.editor = {};
    //     } else if(param.column.field === 'timeDuration'){
    //       rowData.timeDuration = 0;
    //       param.column.editor = {};
    //     } else {
    //       const fieldValue = this.cols.find(col => col.field === param.column.field);
    //       param.column.editor = fieldValue.editor;
    //     }
    //   }
    //   return of(true);
    // }
    /**
     * @return {?}
     */
    function () {
        this.grid.endCellEdit();
        this.timeLimitInfo.dueTime += '';
        if (this.validator()) {
            /** @type {?} */
            var object = { value: this.timeLimitInfo, parameters: null };
            this.submitModal.emit(object);
        }
    };
    /**
     * @return {?}
     */
    TimeLimitControlComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @private
     * @return {?}
     */
    TimeLimitControlComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        var e_2, _a;
        if (this.timeLimitInfo.expireOperations
            && this.timeLimitInfo.expireOperations.length > 0) {
            try {
                for (var _b = __values(this.timeLimitInfo.expireOperations), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var e = _c.value;
                    if (e.operationTypeName === 'SendMessageExpireOperation') {
                        /** @type {?} */
                        var a = (/** @type {?} */ (e));
                        if (!a.sendType) {
                            this.message.info('请设置超时操作！');
                            return false;
                        }
                    }
                    if (e.operationTypeName === 'AutoHandleExpireOperation') {
                        /** @type {?} */
                        var a = (/** @type {?} */ (e));
                        if (!a.autoHandleType) {
                            this.message.info('请设置自动办理类型！');
                            return false;
                        }
                        if (!a.message) {
                            this.message.info('请设置自动办理意见！');
                            return false;
                        }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return true;
    };
    /**
     * @return {?}
     */
    TimeLimitControlComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var operation = new ExpireOperation();
        this.timeLimitInfo.expireOperations.push(operation);
        this.grid.loadData(this.timeLimitInfo.expireOperations);
        this.grid.selectRow(operation.id);
    };
    /**
     * @return {?}
     */
    TimeLimitControlComponent.prototype.remove = /**
     * @return {?}
     */
    function () {
        this.grid.endCellEdit();
        /** @type {?} */
        var curItem = this.grid.selectedRow;
        if (!curItem) {
            this.message.info('尚未选中预警操作！');
            return;
        }
        /** @type {?} */
        var i = this.timeLimitInfo.expireOperations.findIndex((/**
         * @param {?} a
         * @return {?}
         */
        function (a) { return a.id === curItem.data.id; }));
        if (i > -1) {
            this.timeLimitInfo.expireOperations.splice(i, 1);
            this.grid.loadData(this.timeLimitInfo.expireOperations);
        }
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    TimeLimitControlComponent.prototype.editOperation = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        var _this = this;
        this.grid.endCellEdit();
        if (ctx.rowData.operationTypeName === 'SendMessageExpireOperation') {
            this.sendMassageOperation(ctx);
        }
        if (ctx.rowData.operationTypeName === 'AutoHandleExpireOperation') {
            this.message.confirm("下一节点是由当前办理人指派的话，当前节点不支持任务自动办理").subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) { return re === true ? _this.autoHandleOperation(ctx) : null; }));
        }
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    TimeLimitControlComponent.prototype.sendMassageOperation = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        var _this = this;
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(SendMessageOperationComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.location = this.location;
        compRef.instance.value = Object.assign({}, ctx.rowData);
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            /** @type {?} */
            var operation = _this.timeLimitInfo.expireOperations.find((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return o.id === re.id; }));
            operation = Object.assign(operation, re);
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: '预警消息',
            width: 500,
            height: this.location === 'activity' ? 390 : 460,
            buttons: compRef.instance.footer,
            showButtons: true
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    TimeLimitControlComponent.prototype.autoHandleOperation = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        var _this = this;
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(AutoHandleOperationComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.value = Object.assign({}, ctx.rowData);
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            /** @type {?} */
            var operation = _this.timeLimitInfo.expireOperations.find((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return o.id === re.id; }));
            operation = Object.assign(operation, re);
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: '自动办理',
            width: 500,
            height: this.location === 'activity' ? 390 : 460,
            buttons: compRef.instance.footer,
            showButtons: true
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    TimeLimitControlComponent.prototype.tagSelectChange = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data.data.value === 'constant') {
            this.timeLimitInfo.timeUnit = "day";
        }
        else if (data.data.value === 'scope') {
            this.timeLimitInfo.timeUnit = '';
            this.timeLimitInfo.dueTime = this.timeScopeValue;
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    TimeLimitControlComponent.prototype.changeTimeScope = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.timeScopeValue = data;
        this.timeLimitInfo.dueTime = this.timeScopeValue;
    };
    TimeLimitControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-time-limit-control',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">\u4EFB\u52A1\u5904\u7406\u65F6\u6548\u63A7\u5236</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <form class=\"h-100\">\r\n          <div class=\"f-utils-fill-flex-column h-100\">\r\n            <div class=\"farris-form-controls-inline\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group\">\r\n                  <label class=\"col-form-label pl-1 mr-3\">\r\n                    <span class=\"farris-label-text\">\u662F\u5426\u542F\u7528</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap mr-5\">\r\n                    <farris-switch [(ngModel)]=\"timeLimitInfo.enable\" name=\"enable\"></farris-switch>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"farris-form-controls-inline\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group\" style=\"width: 100%;\">\r\n                  <label class=\"col-form-label pl-1 mr-3\">\r\n                    <span class=\"farris-label-text\">\u4EFB\u52A1\u671F\u9650</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap mr-1\" style=\"width: 35%;\"><!--name=\"tag\"-->\r\n                    <farris-combo-list [(ngModel)]=\"timeLimitInfo.tag\" [idField]=\"'value'\" [textField]=\"'text'\" name=\"tag\"\r\n                                       [valueField]=\"'value'\" [data]=\"tagCollection\" [panelHeight]=\"'auto'\"\r\n                                       [editable]=\"false\" [enableClear]=\"false\" (selectChange)=\"tagSelectChange($event)\">\r\n                    </farris-combo-list>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                  <div *ngIf=\"timeLimitInfo.tag === 'constant'\" class=\"farris-input-wrap mr-1\" style=\"width: 35%;\">\r\n                    <farris-number-spinner [(ngModel)]=\"timeLimitInfo.dueTime\" name=\"dueTime\"\r\n                      [editable]=\"true\" [precision]=\"0\" [parser]=\"parser\"\r\n                      [min]=\"0\"></farris-number-spinner>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                  <div *ngIf=\"timeLimitInfo.tag === 'constant'\" class=\"farris-input-wrap mr-5\" style=\"width: 30%;\">\r\n                    <farris-combo-list [(ngModel)]=\"timeLimitInfo.timeUnit\" name=\"timeUnit\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                    [valueField]=\"'value'\" [data]=\"timeUnitCollection\" [panelHeight]=\"'auto'\"\r\n                    [editable]=\"false\" [enableClear]=\"false\">\r\n                    </farris-combo-list>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                  <div *ngIf=\"timeLimitInfo.tag === 'scope'\" class=\"farris-input-wrap mr-1\" style=\"width: 65%;\">\r\n                    <farris-radiogroup [(ngModel)]=\"timeLimitInfo.dueTime\" name=\"scope\"\r\n                                       [data]=\"timeScopeCollection\"\r\n                                       (changeValue)=\"changeTimeScope($event)\">\r\n                    </farris-radiogroup>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"mx-2 mt-3\">\r\n              <div class=\"title-content\">\r\n                <h4 class=\"title-text\">\u65F6\u6548\u9884\u8B66\u64CD\u4F5C</h4><span class=\"title-line\"></span>\r\n              </div>\r\n            </div>\r\n            <div class=\"mx-2 h-100\">\r\n              <farris-tabs class=\"f-utils-fill h-100\" [value]=\"'operation'\" [contentFill]=\"true\" [autoTitleWidth]=\"true\">\r\n                <farris-tab [title]=\"'\u64CD\u4F5C\u5217\u8868'\" [id]=\"'operation'\">\r\n                  <ng-template farrisTabsExtend>\r\n                    <div class=\"mx-2\">\r\n                      <button type=\"button\" (click)=\"add()\"\r\n                        class=\"btn btn-primary mr-2\">\u65B0\u589E</button>\r\n                      <button type=\"button\" (click)=\"remove()\"\r\n                        class=\"btn btn-secondary\">\u5220\u9664</button>\r\n                    </div>\r\n                  </ng-template>\r\n                  <ng-template #content>\r\n                    <div class=\"f-utils-fill-flex-column h-100\" style=\"background: #FFF;\">\r\n                      <farris-datagrid #grid [data]=\"timeLimitInfo.expireOperations\" [idField]=\"'id'\" [columns]=\"cols\"\r\n                        [fit]=\"true\" [editMode]=\"'cell'\" [editable]=\"true\"\r\n                        [fitColumns]=\"true\" [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\"><!--[beforeEdit]=\"beforeEdit\" [afterEdit]=\"afterEdit\"-->\r\n                      </farris-datagrid>\r\n                    </div>\r\n                  </ng-template>\r\n                </farris-tab>\r\n              </farris-tabs>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n<ng-template #cell let-ctx>\r\n  <span (click)=\"editOperation(ctx)\" *ngIf=\"ctx.rowData.operationTypeName === 'SendMessageExpireOperation'\" class=\"link\">\r\n    {{ ctx.rowData.sendType?'\uFF08\u5DF2\u8BBE\u7F6E\uFF09': '\uFF08\u672A\u8BBE\u7F6E\uFF09' }}\r\n  </span>\r\n  <span (click)=\"editOperation(ctx)\" *ngIf=\"ctx.rowData.operationTypeName === 'AutoHandleExpireOperation'\" class=\"link\">\r\n    {{ (ctx.rowData.autoHandleType && ctx.rowData.message)?'\uFF08\u5DF2\u8BBE\u7F6E\uFF09': '\uFF08\u672A\u8BBE\u7F6E\uFF09' }}\r\n  </span>\r\n</ng-template>\r\n",
                    styles: [".title-content{color:#000;display:inline-flex;align-items:center;line-height:1.375rem;position:relative;overflow:hidden;padding:0 0 0 1rem;min-width:760px}.title-content ::before{content:'';width:.25rem;height:1.125rem;background:#59a1ff;border-radius:1px;position:absolute;top:50%;left:0;margin-top:-.5625rem}.title-text{font-size:1rem;line-height:1.375rem;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin-bottom:0;margin-right:10px}.title-line{flex-grow:1;border-bottom:1px dashed rgba(0,0,0,.1)}.link{color:#1206bb;font-size:14px}.link:hover{color:#5d478b;font-size:14px}"]
                }] }
    ];
    /** @nocollapse */
    TimeLimitControlComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService },
        { type: MessagerService }
    ]; };
    TimeLimitControlComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        editorParams: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        cell: [{ type: ViewChild, args: ['cell',] }],
        grid: [{ type: ViewChild, args: ['grid',] }]
    };
    return TimeLimitControlComponent;
}());
var TimeLimitControlConverter = /** @class */ (function () {
    function TimeLimitControlConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    TimeLimitControlConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.enable) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    };
    return TimeLimitControlConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MessageNotice = /** @class */ (function () {
    function MessageNotice() {
        this.id = ProcessDeUtil.GenerateElementId();
        this.subject = '消息通知';
        // this.sendType = 'email';
        this.content = '{"expr":"\'您有一条消息通知。\'","sexpr":""}';
    }
    return MessageNotice;
}());
/** @type {?} */
var processSendTime = [
    { value: 'PROCESSINSTANCE_COMPLETED', text: '流程完成' },
    { value: 'PROCESSINSTANCE_ABORTED', text: '流程终止' },
    { value: 'PROCESSINSTANCE_ROLLBACK', text: '流程驳回' }
];
/** @type {?} */
var activitySendTime = [
    { value: 'WORKITEM_CREATED', text: '任务创建' },
    { value: 'ACTIVITY_COMPLETED', text: '活动完成' },
    { value: 'ACTIVITY_ABORTED', text: '活动终止' },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MessageNoticeEditComponent = /** @class */ (function () {
    function MessageNoticeEditComponent(message, uistate, expr) {
        this.message = message;
        this.uistate = uistate;
        this.expr = expr;
        this.groupIcon2 = '<i class="f-icon f-icon-lookup"></i>';
        this.exprAble = false;
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
        this._location = 'activity';
        this.messageNotice = new MessageNotice();
        this.typeGroup = this.uistate.messageChannels.map((/**
         * @param {?} m
         * @return {?}
         */
        function (m) { return ({ value: m.code, name: m.name }); }));
        this.receiverVariables = [
            { value: 'workItemParticipant', name: '任务办理人' }
        ];
        this.sendTimes = [];
        this.bindingData = {};
    }
    Object.defineProperty(MessageNoticeEditComponent.prototype, "location", {
        get: /**
         * @return {?}
         */
        function () {
            return this._location;
        },
        set: /**
         * @param {?} l
         * @return {?}
         */
        function (l) {
            this._location = l;
            if (this.location !== 'activity') {
                this.receiverVariables = [{ value: 'procInstCreator', name: '流程发起人' }];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessageNoticeEditComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.messageNotice;
        },
        set: /**
         * @param {?} m
         * @return {?}
         */
        function (m) {
            var e_1, _a, e_2, _b;
            this.messageNotice = Object.assign({}, m);
            if (this.messageNotice.receiver && this.messageNotice.receiver.length > 0) {
                /** @type {?} */
                var array = this.messageNotice.receiver.split(',');
                if (array.indexOf('workItemParticipant') > -1) {
                    this.receiverVari = 'workItemParticipant';
                }
                else if (array.indexOf('procInstCreator') > -1) {
                    this.receiverVari = 'procInstCreator';
                }
                if (array.length > 0) {
                    array = array.filter((/**
                     * @param {?} a
                     * @return {?}
                     */
                    function (a) { return (a !== 'workItemParticipant' && a !== 'procInstCreator'); }));
                    this.bindingData.id = '';
                    try {
                        for (var array_1 = __values(array), array_1_1 = array_1.next(); !array_1_1.done; array_1_1 = array_1.next()) {
                            var r = array_1_1.value;
                            this.bindingData.id += r + ',';
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (array_1_1 && !array_1_1.done && (_a = array_1.return)) _a.call(array_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    if (this.bindingData.id) {
                        this.bindingData.id = this.bindingData.id.substring(0, this.bindingData.id.length - 1);
                    }
                }
            }
            if (this.messageNotice.receiverText && this.messageNotice.receiverText.length > 0) {
                /** @type {?} */
                var array = this.messageNotice.receiverText.split(',');
                if (array.length > 0) {
                    array = array.filter((/**
                     * @param {?} a
                     * @return {?}
                     */
                    function (a) { return (a !== '任务办理人' && a !== '流程发起人'); }));
                    this.bindingData.name = '';
                    try {
                        for (var array_2 = __values(array), array_2_1 = array_2.next(); !array_2_1.done; array_2_1 = array_2.next()) {
                            var r = array_2_1.value;
                            this.bindingData.name += r + ',';
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (array_2_1 && !array_2_1.done && (_b = array_2.return)) _b.call(array_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    if (this.bindingData.name) {
                        this.bindingData.name = this.bindingData.name.substring(0, this.bindingData.name.length - 1);
                    }
                }
            }
            this.exprAble = this.messageNotice.subject.charAt(0) === '{';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.location === 'activity') {
            this.sendTimes = activitySendTime;
        }
        else {
            this.sendTimes = processSendTime;
        }
    };
    /**
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        this.setReceiver();
        if (this.validator()) {
            this.submitEmitter.emit(this.messageNotice);
        }
    };
    /**
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeEmitter.emit();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.sendTimeChange = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data.data.value === activitySendTime[0].value) {
            this.receiverVari = 'workItemParticipant';
            this.clear();
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.usersSelect = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        console.log(data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.changeValue = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        console.log(data);
    };
    /**
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.bindingData = {};
    };
    /**
     * @private
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.setReceiver = /**
     * @private
     * @return {?}
     */
    function () {
        var e_3, _a;
        /** @type {?} */
        var receiver = '';
        /** @type {?} */
        var receiverText = '';
        if (this.receiverVari) {
            receiver += this.receiverVari + ',';
            /** @type {?} */
            var array = this.receiverVari.split(',');
            if (array.length > 0) {
                var _loop_1 = function (a) {
                    /** @type {?} */
                    var t = this_1.receiverVariables.find((/**
                     * @param {?} v
                     * @return {?}
                     */
                    function (v) { return v.value === a; })).name;
                    receiverText += t + ',';
                };
                var this_1 = this;
                try {
                    for (var array_3 = __values(array), array_3_1 = array_3.next(); !array_3_1.done; array_3_1 = array_3.next()) {
                        var a = array_3_1.value;
                        _loop_1(a);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (array_3_1 && !array_3_1.done && (_a = array_3.return)) _a.call(array_3);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        }
        if (this.bindingData.id) {
            receiver += this.bindingData.id + ',';
            receiverText += this.bindingData.name + ',';
        }
        if (receiver) {
            receiver = receiver.substring(0, receiver.length - 1);
        }
        if (receiverText) {
            receiverText = receiverText.substring(0, receiverText.length - 1);
        }
        this.messageNotice.receiver = receiver;
        this.messageNotice.receiverText = receiverText;
    };
    /**
     * @private
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.messageNotice.sendType) {
            this.message.info('发送方式不允许为空！');
            return false;
        }
        if (this.location !== 'messageActivity' && !this.messageNotice.sendTime) {
            this.message.info('发送时机不允许为空！');
            return false;
        }
        if (!this.messageNotice.subject) {
            this.message.info('消息主题不允许为空！');
            return false;
        }
        if (!this.messageNotice.content) {
            this.message.info('消息内容不允许为空！');
            return false;
        }
        if (!this.messageNotice.receiver) {
            this.message.info('接收人不允许为空！');
            return false;
        }
        return true;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.titleExpr = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.showTitleHelp(data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.contentExpr = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.showContentHelp(data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.showContentHelp = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.showExpr();
        if (this.messageNotice.content && this.messageNotice.content.length > 0) {
            this.expr.addExpressionText(this.messageNotice.content);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        function (expressionInfo) {
            _this.messageNotice.content = expressionInfo;
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.showTitleHelp = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (this.messageNotice.subject && this.messageNotice.subject.charAt(0) !== '{') {
            this.messageNotice.subject = '';
        }
        this.showExpr();
        if (this.messageNotice.subject && this.messageNotice.subject.length > 0) {
            this.expr.addExpressionText(this.messageNotice.subject);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        function (expressionInfo) {
            _this.messageNotice.subject = expressionInfo;
        }));
    };
    /**
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.showExpr = /**
     * @return {?}
     */
    function () {
        var e_4, _a, e_5, _b, e_6, _c, e_7, _d;
        if (this.uistate.schemas.length > 0) {
            try {
                for (var _e = __values(this.uistate.schemas), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var schema = _f.value;
                    // this.expr.addCommonObject(co);
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_4) throw e_4.error; }
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.uistate.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.uistate.procInstContext.length > 0) {
            try {
                for (var _g = __values(this.uistate.procInstContext), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var variable = _h.value;
                    context.push(variable);
                    // this.expr.addContext(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (this.uistate.processVariableContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _j = __values(this.uistate.processVariableContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    _loop_2(variable);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_d = context_1.return)) _d.call(context_1);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
    };
    /**
     * @return {?}
     */
    MessageNoticeEditComponent.prototype.tranExpr = /**
     * @return {?}
     */
    function () {
        this.messageNotice.subject = '';
    };
    MessageNoticeEditComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-message-notice-edit',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">\u6D88\u606F\u901A\u77E5\u8BBE\u7F6E</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <perfect-scrollbar [config]=\"{}\">\r\n          <form class=\"h-100\">\r\n            <div class=\"farris-form form-inline farris-form-inline\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u53D1\u9001\u65B9\u5F0F</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <farris-checkboxgroup #checkboxGroup [(ngModel)]=\"messageNotice.sendType\" name=\"sendType\" [horizontal]=\"true\"\r\n                      [data]=\"typeGroup\">\r\n                    </farris-checkboxgroup>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div *ngIf=\"location!=='messageActivity'\" class=\"farris-group-wrap my-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u53D1\u9001\u65F6\u673A</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <farris-combo-list [(ngModel)]=\"messageNotice.sendTime\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                      [enableClear]=\"false\" [data]=\"sendTimes\" name=\"sendTime\" [editable]=\"false\" (selectChange)=\"sendTimeChange($event)\">\r\n                    </farris-combo-list>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"farris-group-wrap my-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u6D88\u606F\u4E3B\u9898</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\" *ngIf=\"!exprAble; else disabled\">\r\n                    <input class=\"form-control\" type=\"text\" value=\"subject\" [(ngModel)]=\"messageNotice.subject\" name=\"subject\" />\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                  <ng-template #disabled>\r\n                    <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                                 [(value)]=\"messageNotice.subject\" (clickHandle)=\"titleExpr($event)\">\r\n                    </input-group>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </ng-template>\r\n                  <label class=\"col-form-label pl-1 mr-3\">\r\n                    <span class=\"farris-label-text\">\u542F\u7528\u8868\u8FBE\u5F0F</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap mr-5\">\r\n                    <farris-switch [(ngModel)]=\"exprAble\" name=\"enable\" (click)=\"tranExpr()\"></farris-switch>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"farris-group-wrap my-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u6D88\u606F\u5185\u5BB9</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                                 [(value)]=\"messageNotice.content\" (clickHandle)=\"contentExpr($event)\">\r\n                    </input-group>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u63A5\u6536\u4EBA</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <div class=\"pb-2\">\r\n                      <farris-checkboxgroup #receiverVariable [(ngModel)]=\"receiverVari\" name=\"receiverVariable\"\r\n                        [horizontal]=\"true\" [data]=\"receiverVariables\" (changeValue)=\"changeValue($event)\">\r\n                      </farris-checkboxgroup>\r\n                    </div>\r\n                    <div *ngIf=\"messageNotice.sendTime!=='WORKITEM_CREATED'\">\r\n                      <sys-farris-grid-lookup #userHelp [singleSelect]=\"false\" [displayTxt]=\"bindingData.name\" [pagination]=\"true\"\r\n                        [pageSize]=\"20\" [title]=\"'\u7CFB\u7EDF\u7528\u6237'\" [sourceType]=\"'user'\" (afterConfirm)=\"usersSelect($event)\" [typeMode]=\"1\"\r\n                        [bindingData]=\"bindingData\" [filter]=\"{notGetCurrentUser:false, notGetStopUser:true}\" (clear)=\"clear()\" [required]=\"false\">\r\n                      </sys-farris-grid-lookup>\r\n                    </div>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </perfect-scrollbar>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    MessageNoticeEditComponent.ctorParameters = function () { return [
        { type: MessagerService },
        { type: ProcessDesignerUIState },
        { type: ExpressionService }
    ]; };
    MessageNoticeEditComponent.propDecorators = {
        footer: [{ type: ViewChild, args: ['footer',] }],
        closeEmitter: [{ type: Output }],
        submitEmitter: [{ type: Output }],
        location: [{ type: Input }],
        value: [{ type: Input }]
    };
    return MessageNoticeEditComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MessageNoticeComponent = /** @class */ (function () {
    function MessageNoticeComponent(resolver, injector, modalService, message, uistate) {
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.uistate = uistate;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: '消息通知',
            width: 800,
            height: 515,
            showButtons: true
        };
        this.messageNotices = new Array();
        this.columns = [];
        this.location = 'activity';
    }
    Object.defineProperty(MessageNoticeComponent.prototype, "value", {
        set: /**
         * @param {?} notices
         * @return {?}
         */
        function (notices) {
            if (notices && notices.length > 0) {
                this.messageNotices = notices.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return ({
                    id: ProcessDeUtil.GenerateElementId(),
                    content: n.content,
                    sendTime: n.sendTime,
                    sendType: n.sendType,
                    subject: n.subject,
                    receiver: n.receiver,
                    receiverText: n.receiverText
                }); }));
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.location = this.editorParams.location;
        this.columns = [
            {
                field: 'subject', width: 100, title: '消息主题',
            }, {
                field: 'content', width: 150, title: '消息内容', showTips: true,
            }, {
                field: 'sendTime', width: 100, title: '发送时机',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.location === 'process' ? processSendTime : activitySendTime }
                },
            }, {
                field: 'sendType', width: 100, title: '发送方式',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'name', data: this.uistate.messageChannels.map((/**
                         * @param {?} m
                         * @return {?}
                         */
                        function (m) { return ({ value: m.code, name: m.name }); })) }
                },
            }, {
                field: 'receiverText', width: 120, title: '消息接收人', showTips: true
            }
        ];
        if (this.location === 'messageActivity') {
            this.columns = this.columns.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field !== 'sendTime'; }));
        }
    };
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(MessageNoticeEditComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.location = this.location;
        /** @type {?} */
        var messageNotice = new MessageNotice();
        if (this.location === 'activity') {
            messageNotice.sendTime = 'WORKITEM_CREATED';
            messageNotice.receiver = 'workItemParticipant';
            messageNotice.receiverText = '任务办理人';
        }
        else if (this.location === 'process') {
            messageNotice.sendTime = 'PROCESSINSTANCE_COMPLETED';
            messageNotice.receiver = 'procInstCreator';
            messageNotice.receiverText = '流程发起人';
        }
        else if (this.location === 'messageActivity') {
            messageNotice.receiver = 'procInstCreator';
            messageNotice.receiverText = '流程发起人';
        }
        compRef.instance.value = messageNotice;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            _this.messageNotices = _this.messageNotices.concat([re]);
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: '消息通知',
            width: 490,
            height: this.location === 'messageActivity' ? 450 : 490,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.edit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.grid.selectedRow) {
            this.message.info('尚未选中消息通知！');
            return;
        }
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(MessageNoticeEditComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.location = this.location;
        compRef.instance.value = this.grid.selectedRow.data;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            _this.messageNotices = _this.messageNotices.map((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                if (m.id === re.id) {
                    return re;
                }
                return m;
            }));
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: '消息通知',
            width: 490,
            height: this.location === 'messageActivity' ? 450 : 490,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.delete = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selected = this.grid.selectedRow;
        if (!selected) {
            this.message.info('尚未选中消息通知！');
            return;
        }
        this.messageNotices = this.messageNotices.filter((/**
         * @param {?} m
         * @return {?}
         */
        function (m) { return m.id !== selected.id; }));
    };
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var object = { value: this.messageNotices, parameters: null };
        this.submitModal.emit(object);
    };
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    MessageNoticeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-message-notice',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span>\r\n        <h4 class=\"f-title-text\">\u5217\u8868</h4>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"add()\">\u65B0\u589E</button>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"edit()\">\u7F16\u8F91</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"delete()\">\u5220\u9664</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"messageNotices\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\"\r\n        [fitColumns]=\"true\" [editable]=\"false\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n        [multiSelect]=\"false\" [showLineNumber]=\"true\" [lineNumberTitle]=\"'\u5E8F\u53F7'\" [lineNumberWidth]=\"50\" \r\n        [striped]=\"true\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    MessageNoticeComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService },
        { type: MessagerService },
        { type: ProcessDesignerUIState }
    ]; };
    MessageNoticeComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        editorParams: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        grid: [{ type: ViewChild, args: ['grid',] }]
    };
    return MessageNoticeComponent;
}());
var MessageNoticeConverter = /** @class */ (function () {
    function MessageNoticeConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    MessageNoticeConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.length > 0) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    };
    return MessageNoticeConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExtendPropertyComponent = /** @class */ (function () {
    function ExtendPropertyComponent(uiState) {
        this.uiState = uiState;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: '扩展属性',
            width: 430,
            height: 370,
            showButtons: true
        };
        this.procExtendProperty = new Array();
        this.booleanlist = [
            { key: '是', value: 'true' },
            { key: '否', value: 'false' }
        ];
        this.extendPropertyList = {
            key: '',
            value: ''
        };
    }
    Object.defineProperty(ExtendPropertyComponent.prototype, "value", {
        set: /**
         * @param {?} property
         * @return {?}
         */
        function (property) {
            if (property && property.length > 0) {
                this.procExtendProperty = property.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return ({
                    id: p.id,
                    code: p.code,
                    parentId: p.parentId,
                    sortOrder: p.sortOrder,
                    propertyNote: p.propertyNote,
                    propertyTitle: p.propertyTitle,
                    propertyLocation: p.propertyLocation,
                    propertyType: p.propertyType,
                    enumValue: p.enumValue,
                    bizDefKey: p.bizDefKey,
                    bizCategoryId: p.bizCategoryId,
                    startMode: p.startMode,
                    value: p.value,
                }); }));
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} obj
     * @return {?}
     */
    ExtendPropertyComponent.prototype.setProperty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = obj.propertyConfig;
    };
    /**
     * @return {?}
     */
    ExtendPropertyComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ExtendPropertyComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var value = this.procExtendProperty;
        /** @type {?} */
        var object = { value: value, parameters: null };
        this.submitModal.emit(object);
    };
    /**
     * @return {?}
     */
    ExtendPropertyComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    ExtendPropertyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-extend-property',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-page-main\">\r\n    <section class=\"\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n      </div>\r\n      <div class=\"f-section-content\">\r\n        <div class=\"f-form-layout farris-form farris-form-controls-inline\">\r\n          <fieldset class=\"f-section-formgroup\"\r\n            style=\"flex-grow: 1; overflow-y: auto; height: 210px;\">\r\n            <div class=\"f-section-formgroup-inputs\">\r\n              <ng-container *ngFor=\"let data of procExtendProperty\">\r\n                <!-- \u6587\u672C\u578B\u5C5E\u6027\u6846 -->\r\n                <div *ngIf=\"data.propertyType === 'text'\" class=\"col-12 farris-group-auto pr-5\">\r\n                  <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <label class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{data.propertyTitle}}</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap ml-1\" style=\"padding-right: 30px\">\r\n                        <input-group [(ngModel)]=\"data.value\"></input-group>\r\n                        <div class=\"farris-feedback valid-feedback\"></div>\r\n                      </div>\r\n                      <span class=\"f-icon f-icon-info\" farrisPopover [popoverTitle]=\"'\u8BF4\u660E'\"\r\n                        [popover]=\"data.propertyNote\" [container]=\"'body'\" [triggers]=\"'hover'\"\r\n                        [placement]=\"'left'\"></span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <!-- \u679A\u4E3E\u578B\u5C5E\u6027\u6846 -->\r\n                  <div *ngIf=\"data.propertyType === 'enum'\" class=\"col-12 farris-group-auto pr-5\">\r\n                    <div class=\"farris-group-wrap\">\r\n                      <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                          <span class=\"farris-label-text\">{{data.propertyTitle}}</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap ml-1\" style=\"padding-right: 30px\">\r\n                          <farris-combo-list autoHeight=\"true\" [(ngModel)]=\"data.value\" name=\"booleanProperty\"\r\n                            [idField]=\"'value'\" [textField]=\"'key'\" [valueField]=\"'value'\" [data]=\"data.enumValue\"\r\n                            [placeholder]=\"'\u8BF7\u9009\u62E9'\">\r\n                          </farris-combo-list>\r\n                          <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                        <span class=\"f-icon f-icon-info\" farrisPopover [popoverTitle]=\"'\u8BF4\u660E'\"\r\n                          [popover]=\"data.propertyNote\" [container]=\"'body'\" [triggers]=\"'hover'\"\r\n                          [placement]=\"'left'\"></span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                <!-- \u5E03\u5C14\u578B\u5C5E\u6027\u6846 mt-4 -->\r\n                  <div *ngIf=\"data.propertyType === 'boolean'\" class=\"col-12 farris-group-auto pr-5\">\r\n                    <div class=\"farris-group-wrap\">\r\n                      <div class=\"form-group farris-form-group\">\r\n                        <label class=\"col-form-label\">\r\n                          <span class=\"farris-label-text\">{{data.propertyTitle}}</span>\r\n                        </label>\r\n                        <div class=\"farris-input-wrap ml-1\" style=\"padding-right: 30px\">\r\n                          <farris-combo-list autoHeight=\"true\" [(ngModel)]=\"data.value\" name=\"booleanProperty\"\r\n                            [idField]=\"'value'\" [textField]=\"'key'\" [valueField]=\"'value'\" [data]=\"booleanlist\"\r\n                            [placeholder]=\"'\u8BF7\u9009\u62E9'\">\r\n                          </farris-combo-list>\r\n                          <div class=\"farris-feedback valid-feedback\"></div>\r\n                        </div>\r\n                        <span class=\"f-icon f-icon-info\" farrisPopover [popoverTitle]=\"'\u8BF4\u660E'\"\r\n                          [popover]=\"data.propertyNote\" [container]=\"'body'\" [triggers]=\"'hover'\"\r\n                          [placement]=\"'left'\"></span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n              </ng-container>\r\n            </div>\r\n          </fieldset>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"cancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ExtendPropertyComponent.ctorParameters = function () { return [
        { type: ProcessDesignerUIState }
    ]; };
    ExtendPropertyComponent.propDecorators = {
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        value: [{ type: Input }]
    };
    return ExtendPropertyComponent;
}());
var ExtendPropertyConverter = /** @class */ (function () {
    function ExtendPropertyConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    ExtendPropertyConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data instanceof Array && data.some((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.value; }))) {
            return '（已设置）';
        }
        return '（未设置）';
    };
    return ExtendPropertyConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BpmnProcessViewModel = /** @class */ (function () {
    function BpmnProcessViewModel(uiState) {
        this.uiState = uiState;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    BpmnProcessViewModel.prototype.setProcessProperty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        // if (obj.propertyData.EntryForm) {
        //     obj.propertyData.EntryForm = this.uiState.flowFormInfo.flowForm;
        // }
        this.uiState.propertyData = obj.propertyData;
        this.uiState.ProcessVariables = this.uiState.propertyData[ResourceKeys.processVariables];
        this.uiState.propertyConfig = this.setProcessConfig(obj.propertyConfig);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    BpmnProcessViewModel.prototype.setProcessConfig = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.setProcessEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    BpmnProcessViewModel.prototype.setProcessEntity = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        if (obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                switch (item.propertyID) {
                    case ResourceKeys.EntryForm: // 流程分类
                        item.editor = EntryFormEditorComponent;
                        item.converter = new FlowFormConverter();
                        // item.editorParams = {
                        //     flowForms: [this.uiState.flowFormInfo.flowForm]
                        // };
                        break;
                    case ResourceKeys.wf_Component:
                        item.editor = ActivityComponentComponent;
                        item.converter = new ActivityComponentConverter();
                        item.editorParams = {
                            location: 'process'
                        };
                        break;
                    case ResourceKeys.wf_ExecuteForms_PC:
                        item.editor = ExecuteFormsComponent;
                        item.converter = new ExecuteFormsConverter();
                        item.editorParams = {
                            location: 'process',
                            tab: 'web'
                        };
                        break;
                    case ResourceKeys.wf_ExecuteForms_Mobile:
                        item.editor = ExecuteFormsComponent;
                        item.converter = new ExecuteFormsConverter();
                        item.editorParams = {
                            location: 'process',
                            tab: 'mobile'
                        };
                        break;
                    case ResourceKeys.wf_TitleExpression:
                        item.editor = TitleExpressionComponent;
                        item.converter = new TitleExpressionConverter();
                        break;
                    case ResourceKeys.allowPreAssign:
                        item.iterator = _this.uiState.boolIterator;
                        break;
                    case ResourceKeys.startMode:
                        item.iterator = _this.uiState.startModeIterator;
                        break;
                    case ResourceKeys.DisplayTerminal:
                        item.iterator = _this.uiState.displayTerminal;
                        break;
                    case ResourceKeys.wf_CustomizeAction:
                        item.editor = CustomizeActionComponent;
                        item.converter = new CustomizeActionConverter();
                        break;
                    case ResourceKeys.processVariables:
                        item.editor = ProcessVariablesComponent;
                        item.converter = new ProcessVariablesConverter();
                        break;
                    case ResourceKeys.timeLimitControl:
                        item.editor = TimeLimitControlComponent;
                        item.converter = new TimeLimitControlConverter();
                        item.editorParams = {
                            location: 'process'
                        };
                        break;
                    case ResourceKeys.messageNotice:
                        item.editor = MessageNoticeComponent;
                        item.converter = new MessageNoticeConverter();
                        item.editorParams = {
                            location: 'process'
                        };
                        break;
                    default:
                        item.editor = ExtendPropertyComponent;
                        item.converter = new ExtendPropertyConverter();
                        break;
                }
            }));
        }
    };
    BpmnProcessViewModel.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BpmnProcessViewModel.ctorParameters = function () { return [
        { type: ProcessDesignerUIState }
    ]; };
    return BpmnProcessViewModel;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ApprovalItemEntity = /** @class */ (function () {
    function ApprovalItemEntity(value, text, wfAction) {
        this.isDefault = false;
        this.commentNecessary = false;
        this.certification = false;
        this.attachmentNecessary = false;
        this.value = value;
        this.text = text;
        this.workFlowAction = wfAction;
    }
    return ApprovalItemEntity;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ActionOrganizationScope = /** @class */ (function () {
    function ActionOrganizationScope() {
    }
    return ActionOrganizationScope;
}());
var OrganizationPotentialOwner = /** @class */ (function () {
    function OrganizationPotentialOwner() {
    }
    return OrganizationPotentialOwner;
}());
/** @enum {string} */
var ActionScope = {
    /**
     * 指派
     */
    AssignUser: 'AssignUser',
    /**
     * 移交
     */
    Transfer: 'Transfer',
    /**
     * 征询
     */
    AddSignFront: 'AddSignFront',
    /**
     * 加签
     */
    AddSignBehind: 'AddSignBehind',
    /**
     * 知会
     */
    Notify: "Notify",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AssignPerformerConfigComponent = /** @class */ (function () {
    function AssignPerformerConfigComponent() {
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.allowGlobalAssign = false;
        this.operatorCollection = [
            { text: '当前办理人', value: 'currentUser' },
            { text: '流程发起人', value: 'procInstCreator' }
        ];
        this.operator = 'currentUser';
        this.organizationLevelCollection = [
            { value: 'GLOBAL', text: '全员', orgId: 'global' },
            { value: 'UNIT', text: '本单位', orgId: 'currentUnit' },
            { value: 'DEPARTMENT', text: '本部门', orgId: 'currentDepartment' }
        ];
        this.organizationLevel = this.organizationLevelCollection[0].value;
        this.includeChildren = false;
        this.modalConfig = {
            title: '指派规则',
            width: 450,
            height: 470,
            showButtons: true
        };
    }
    Object.defineProperty(AssignPerformerConfigComponent.prototype, "value", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.assingPerformerConfigForm = new FormGroup({
                multiSelect: new FormControl(v.multiSelect),
                necessary: new FormControl(v.necessary)
            });
            this.operator = v.operator || 'currentUser';
            this.allowGlobalAssign = v.allowGlobalAssign || false;
            if (v.assignScope) {
                this.organizationLevel = v.assignScope.organizationLevel;
                this.includeChildren = v.assignScope.includeChildren;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AssignPerformerConfigComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AssignPerformerConfigComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.config = {
            operator: this.operator,
            multiSelect: this.assingPerformerConfigForm.get('multiSelect').value,
            necessary: this.assingPerformerConfigForm.get('necessary').value,
            allowGlobalAssign: this.allowGlobalAssign
        };
        if (this.allowGlobalAssign && this.organizationLevel !== this.organizationLevelCollection[0].value) {
            /** @type {?} */
            var potential = new OrganizationPotentialOwner();
            potential.actionScope = ActionScope.AssignUser;
            potential.organizationLevel = (/** @type {?} */ (this.organizationLevel));
            potential.organizationId = this.organizationLevelCollection.find((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return o.value === _this.organizationLevel; })).orgId;
            potential.organizationName = this.organizationLevelCollection.find((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return o.value === _this.organizationLevel; })).text;
            potential.includeChildren = this.includeChildren;
            potential.tag = 'variable';
            this.config.assignScope = potential;
        }
        /** @type {?} */
        var object = { value: this.config, parameters: null };
        this.submitModal.emit(object);
    };
    /**
     * @return {?}
     */
    AssignPerformerConfigComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AssignPerformerConfigComponent.prototype.valueChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        switch (event.value) {
            case this.organizationLevelCollection[0].value:
                this.includeChildren = false;
                break;
            case this.organizationLevelCollection[1].value:
                this.includeChildren = true;
                break;
            case this.organizationLevelCollection[2].value:
                this.includeChildren = false;
                break;
        }
    };
    AssignPerformerConfigComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-assign-performer-config',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">\u6307\u6D3E\u89C4\u5219\u9009\u9879</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <form class=\"h-100\" [formGroup]=\"assingPerformerConfigForm\">\r\n          <div class=\"f-utils-fill-flex-column justify-content-center h-100 pb-4\">\r\n            <div class=\"my-2 mx-5\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">\u6307\u6D3E\u64CD\u4F5C\u4EBA</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap mt-1\" style=\"width: 300px;\">\r\n                    <farris-combo-list [(ngModel)]=\"operator\" name=\"operator\" [ngModelOptions]=\"{standalone: true}\"\r\n                      [idField]=\"'value'\" [textField]=\"'text'\" [valueField]=\"'value'\" [data]=\"operatorCollection\"\r\n                      [panelHeight]=\"60\">\r\n                    </farris-combo-list>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"my-2 mx-5\">\r\n              <div class=\"farris-input-wrap\">\r\n                <div class=\"custom-control custom-checkbox\">\r\n                  <input class=\"custom-control-input\" type=\"checkbox\" id=\"multiSelect\" formControlName=\"multiSelect\"\r\n                    [readOnly]=\"false\" />\r\n                  <label class=\"custom-control-label\" for=\"multiSelect\">\u5141\u8BB8\u9009\u62E9\u591A\u4E2A\u5F85\u9009\u7528\u6237</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"my-2 mx-5\">\r\n              <div class=\"farris-input-wrap\">\r\n                <div class=\"custom-control custom-checkbox\">\r\n                  <input class=\"custom-control-input\" type=\"checkbox\" id=\"necessary\" formControlName=\"necessary\" [readOnly]=\"false\" />\r\n                  <label class=\"custom-control-label\" for=\"necessary\">\u53EA\u6709\u4E00\u4E2A\u5F85\u9009\u7528\u6237\u65F6\uFF0C\u4ECD\u9700\u624B\u5DE5\u9009\u62E9</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"mx-2 mt-3\">\r\n              <div class=\"title-content\">\r\n                <h4 class=\"title-text\">\u8BBE\u5B9A\u7684\u53C2\u4E0E\u8005\u8303\u56F4\u5916\u6307\u6D3E</h4><span class=\"title-line\"></span>\r\n              </div>\r\n            </div>\r\n            <div class=\"farris-form form-inline farris-form-inline my-1\">\r\n              <div class=\"col-12 mt-3\">\r\n                <div class=\"farris-group-wrap\">\r\n                  <div class=\"form-group farris-form-group\">\r\n                    <label class=\"col-form-label\">\r\n                      <span class=\"farris-label-text\">\u662F\u5426\u542F\u7528</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap ml-1\">\r\n                      <farris-switch [(ngModel)]=\"allowGlobalAssign\" [ngModelOptions]=\"{standalone: true}\" name=\"allowGlobalAssign\"></farris-switch>\r\n                      <div class=\"farris-feedback valid-feedback\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"d-flex flex-row\">\r\n                <div class=\"col-8 my-2\">\r\n                  <div class=\"farris-group-wrap\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <label class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">\u7EC4\u7EC7\u8303\u56F4</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap ml-1\">\r\n                        <farris-combo-list [panelHeight]=\"100\" [(ngModel)]=\"organizationLevel\" [ngModelOptions]=\"{standalone: true}\"\r\n                          name=\"organizationLevel\" [idField]=\"'value'\" [textField]=\"'text'\" [valueField]=\"'value'\"\r\n                          [data]=\"organizationLevelCollection\" [readonly]=\"allowGlobalAssign===false\" (valueChange)=\"valueChange($event)\">\r\n                        </farris-combo-list>\r\n                        <div class=\"farris-feedback valid-feedback\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-4 my-2\">\r\n                  <div class=\"farris-input-wrap pt-1\">\r\n                    <div class=\"custom-control custom-checkbox mr-3\">\r\n                      <input class=\"custom-control-input\" type=\"checkbox\" [(ngModel)]=\"includeChildren\" [ngModelOptions]=\"{standalone: true}\"\r\n                        name=\"includeChildren\" id=\"includeChildren\" [disabled]=\"!(allowGlobalAssign===true && organizationLevel === organizationLevelCollection[2].value)\" />\r\n                      <label class=\"custom-control-label\" for=\"includeChildren\">\u5305\u542B\u4E0B\u7EA7</label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n",
                    styles: [".title-content{color:#000;display:inline-flex;align-items:center;line-height:1.375rem;position:relative;overflow:hidden;padding:0 0 0 1rem;min-width:415px}.title-content ::before{content:'';width:.25rem;height:1.125rem;background:#59a1ff;border-radius:1px;position:absolute;top:50%;left:0;margin-top:-.5625rem}.title-text{font-size:1rem;line-height:1.375rem;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin-bottom:0;margin-right:10px}.title-line{flex-grow:1;border-bottom:1px dashed rgba(0,0,0,.1)}"]
                }] }
    ];
    /** @nocollapse */
    AssignPerformerConfigComponent.ctorParameters = function () { return []; };
    AssignPerformerConfigComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
    };
    return AssignPerformerConfigComponent;
}());
var AssignConfigConverter = /** @class */ (function () {
    function AssignConfigConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    AssignConfigConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return '（已设置）';
    };
    return AssignConfigConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SignRuleEntity = /** @class */ (function () {
    function SignRuleEntity() {
    }
    return SignRuleEntity;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SignRuleComponent = /** @class */ (function () {
    function SignRuleComponent(formBuilder, message, exprService, designerUIState) {
        var _this = this;
        this.formBuilder = formBuilder;
        this.message = message;
        this.exprService = exprService;
        this.designerUIState = designerUIState;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: '会签规则',
            width: 800,
            height: 520,
            showButtons: true
        };
        this.data = [];
        this.calculationMethods = [
            { text: '按数量', value: 'byNumber' },
            { text: '按比例(%)', value: 'byProportion' },
            { text: '自定义条件', value: 'null' },
        ];
        this.counterSignVariables = [];
        /**
         * **** 审批项帮助参数 ********************************************************
         */
        this.approvalCols = [{ title: '编号', field: 'value', width: 80 },
            { title: '名称', field: 'text', width: 90 }];
        this.approvalItems = [];
        /**
         * ********************************
         */
        this.columns = [
            { field: 'conclusionName', width: 25, title: '结论名称' },
            { field: 'conclusionValue', width: 25, title: '结论值' },
            { field: 'calculateType', width: 40, title: '计算方式',
                formatter: { type: 'enum', options: { valueField: 'value', textField: 'text', data: this.calculationMethods } },
                editor: { type: EditorTypes.COMBOLIST, options: { valueField: 'value', textField: 'text', data: this.calculationMethods, idField: 'value', panelHeight: 'auto' } }
            },
            { field: 'conditionValue', width: 25, title: '条件值',
                editor: { type: EditorTypes.NUMBERBOX, options: {} },
                formatter: { type: 'number', options: { precision: 0, min: 0 } }
            },
            { field: 'waitAllVotes', width: 35, title: '等待全员办结',
                editor: { type: EditorTypes.SWITCH, options: {} },
                formatter: { type: 'boolean', options: { trueText: '是', falseText: '否' } }
            },
            { field: 'completionCondition', width: 50, title: '自定义条件',
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            _this.editConditon(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            console.log('clear', e);
                        })
                    }
                }
            }
        ];
        /**
         * 结束编辑前事件
         */
        this.afterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        function (rowIndex, rowData, column) {
            _this.preValue = JSON.parse(JSON.stringify(rowData));
            return of(true);
        });
    }
    Object.defineProperty(SignRuleComponent.prototype, "value", {
        set: /**
         * @param {?} rules
         * @return {?}
         */
        function (rules) {
            var e_1, _a;
            if (rules && rules.length > 0) {
                try {
                    for (var rules_1 = __values(rules), rules_1_1 = rules_1.next(); !rules_1_1.done; rules_1_1 = rules_1.next()) {
                        var rule = rules_1_1.value;
                        /** @type {?} */
                        var val = new SignRuleEntity();
                        val.id = ProcessDeUtil.GenerateElementId();
                        val.conclusionValue = rule.ConclusionValue;
                        val.conclusionName = rule.ConclusionName;
                        val.calculateType = rule.CalculateType ? rule.CalculateType : 'null';
                        val.conditionValue = rule.ConditionValue ? rule.ConditionValue : 0;
                        val.waitAllVotes = rule.WaitAllVotes ? rule.WaitAllVotes : false;
                        val.completionCondition = rule.CompletionCondition ? rule.CompletionCondition._value : null;
                        this.data.push(val);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (rules_1_1 && !rules_1_1.done && (_a = rules_1.return)) _a.call(rules_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            else { // 如果模型上没有会签规则，自动带入所有的审批选项
                this.deleteRow();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SignRuleComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.counterSignVariables = this.designerUIState.counterSignVariables || [];
        this.approvalItems = this.designerUIState.approvalItems || [];
    };
    // 重置动作
    // 重置动作
    /**
     * @return {?}
     */
    SignRuleComponent.prototype.deleteRow = 
    // 重置动作
    /**
     * @return {?}
     */
    function () {
        var e_2, _a;
        this.data = [];
        /** @type {?} */
        var ruleItems = this.designerUIState.approvalItems || [];
        if (ruleItems && ruleItems.length > 0) {
            try {
                for (var ruleItems_1 = __values(ruleItems), ruleItems_1_1 = ruleItems_1.next(); !ruleItems_1_1.done; ruleItems_1_1 = ruleItems_1.next()) {
                    var ruleItem = ruleItems_1_1.value;
                    /** @type {?} */
                    var val = new SignRuleEntity();
                    if (ruleItem.value === 'Pass') {
                        val.id = ProcessDeUtil.GenerateElementId();
                        val.conclusionValue = ruleItem.value;
                        val.conclusionName = ruleItem.text;
                        val.calculateType = 'byProportion';
                        val.conditionValue = '100';
                        val.waitAllVotes = true;
                    }
                    else if (ruleItem.value === 'Back') {
                        val.id = ProcessDeUtil.GenerateElementId();
                        val.conclusionValue = ruleItem.value;
                        val.conclusionName = ruleItem.text;
                        val.calculateType = 'byNumber';
                        val.conditionValue = '1';
                        val.waitAllVotes = true;
                    }
                    else {
                        val.id = ProcessDeUtil.GenerateElementId();
                        val.conclusionValue = ruleItem.value;
                        val.conclusionName = ruleItem.text;
                        val.calculateType = 'null';
                        val.conditionValue = '0';
                        val.waitAllVotes = true;
                    }
                    this.data.push(val);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (ruleItems_1_1 && !ruleItems_1_1.done && (_a = ruleItems_1.return)) _a.call(ruleItems_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    /**
     * @return {?}
     */
    SignRuleComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        this.grid.endCellEdit();
        if (this.data.length === 0) {
            this.message.warning('完成策略为会签时，会签规则不允许为空，请了解！');
        }
        else {
            /** @type {?} */
            var object = { value: this.data, parameters: null };
            this.submitModal.emit(object);
        }
    };
    /**
     * @return {?}
     */
    SignRuleComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SignRuleComponent.prototype.editConditon = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var e_3, _a;
        if (this.counterSignVariables && this.counterSignVariables.length > 0) {
            try {
                for (var _b = __values(this.counterSignVariables), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var variable = _c.value;
                    this.exprService.addContext(variable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        this.exprService.setEditPattern(ExprEditMode.Advanced); // 表达式展现模式：默认高级版（会签规则需要上下文变量）
        this.exprService.addExpressionText(e.instance.value);
        this.exprService.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        function (cond) {
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
        }));
    };
    /**
     * 选中审批项
     */
    /**
     * 选中审批项
     * @return {?}
     */
    SignRuleComponent.prototype.approvalSelect = /**
     * 选中审批项
     * @return {?}
     */
    function () {
        var e_4, _a;
        /** @type {?} */
        var selections = this.apvlItemsGrid.checkeds;
        if (selections && selections.length > 0) {
            try {
                for (var selections_1 = __values(selections), selections_1_1 = selections_1.next(); !selections_1_1.done; selections_1_1 = selections_1.next()) {
                    var selection = selections_1_1.value;
                    /** @type {?} */
                    var signRule = new SignRuleEntity();
                    signRule.id = ProcessDeUtil.GenerateElementId();
                    signRule.conclusionValue = selection.data.value;
                    signRule.conclusionName = selection.data.text;
                    this.data.push(signRule);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (selections_1_1 && !selections_1_1.done && (_a = selections_1.return)) _a.call(selections_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
            this.grid.loadData(this.data);
            this.apvlItemDialog.close();
        }
        else {
            this.message.info('请首先选中一条审批项！');
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SignRuleComponent.prototype.endEdit = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.curValue = e.rowData;
        // 自定义会签规则和预置会签规则互斥
        if (this.preValue.completionCondition !== this.curValue.completionCondition) {
            this.data[e.rowIndex].calculateType = 'null',
                this.data[e.rowIndex].conditionValue = '0';
            this.data[e.rowIndex].waitAllVotes = false;
        }
        else if (this.preValue.calculateType !== this.curValue.calculateType ||
            this.preValue.conditionValue !== this.curValue.conditionValue ||
            this.preValue.waitAllVotes !== this.curValue.waitAllVotes) {
            this.data[e.rowIndex].completionCondition = null;
        }
        if (e.column.field === 'conditionValue' && this.data[e.rowIndex].calculateType === 'byProportion'
            && Number.parseInt(e.value) > 100) {
            this.message.info('条件值最大值是100');
            this.data[e.rowIndex].conditionValue = '100';
        }
        else if (e.column.field === 'conditionValue' && Number.parseInt(e.value) < 0) {
            this.message.info('条件值最小值是0');
            this.data[e.rowIndex].conditionValue = '0';
        }
        else if ((e.column.field === 'calculateType' || e.column.field === 'conditionValue') && (this.data[e.rowIndex].calculateType === 'oneVote' ||
            this.data[e.rowIndex].calculateType === 'fullVote') && Number.parseInt(this.data[e.rowIndex].conditionValue) !== 0) {
            this.message.info('结论执行方式为全票或一票时不需要条件值');
            this.data[e.rowIndex].conditionValue = '0';
        }
        else if (e.column.field === 'calculateType' && this.data[e.rowIndex].calculateType === 'byProportion' &&
            Number.parseInt(this.data[e.rowIndex].conditionValue) > 100) {
            this.message.info('条件值最大值是100');
            this.data[e.rowIndex].conditionValue = '100';
        }
    };
    SignRuleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-sign-rule',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span>\r\n        <h4 class=\"f-title-text\">\u89C4\u5219\u5217\u8868</h4>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"data\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\"\r\n        [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n        [multiSelect]=\"false\" [afterEdit]='afterEdit' (endEdit)=\"endEdit($event)\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"deleteRow()\">\u91CD\u7F6E</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n<farris-dialog #approvalItemDialog [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"520\" [title]=\"'\u5BA1\u6279\u9009\u9879'\">\r\n  <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100 m-2\">\r\n      <farris-datagrid #approvalTable [columns]=\"approvalCols\" [data]=\"approvalItems\" [idField]=\"'value'\"\r\n        [fit]=\"true\" [fitColumns]=\"true\" [pagination]='false' [multiSelect]=\"true\"\r\n        [showCheckbox]=\"true\" [multiSelect]=\"true\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\">\r\n      </farris-datagrid>\r\n  </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-primary px-3 mx-2\" (click)=\"approvalSelect()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"approvalItemDialog.close()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SignRuleComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: MessagerService },
        { type: ExpressionService },
        { type: ProcessDesignerUIState }
    ]; };
    SignRuleComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        editorParams: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        apvlItemsGrid: [{ type: ViewChild, args: ['approvalTable',] }],
        apvlItemDialog: [{ type: ViewChild, args: ['approvalItemDialog',] }],
        grid: [{ type: ViewChild, args: ['grid',] }]
    };
    return SignRuleComponent;
}());
var SignRuleConverter = /** @class */ (function () {
    function SignRuleConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    SignRuleConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.length > 0) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    };
    return SignRuleConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ApprovelItemsComponent = /** @class */ (function () {
    function ApprovelItemsComponent(formBuilder, message, util, http, uiState) {
        this.formBuilder = formBuilder;
        this.message = message;
        this.util = util;
        this.http = http;
        this.uiState = uiState;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: '审批选项',
            width: 880,
            height: 515,
            showButtons: true
        };
        this.workFlowActions = [
            { text: '正向', value: 'Forward' },
            { text: '反向', value: 'Backward' },
            { text: '终止', value: 'Abort' }
        ];
        this.columns = [
            {
                field: 'value', width: 80, title: '编号',
            },
            { field: 'text', width: 80, title: '名称' },
            {
                field: 'workFlowAction', width: 80, title: '流转方向',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.workFlowActions }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.workFlowActions, idField: 'value', panelHeight: 'auto' }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'isDefault', width: 60, title: '默认',
                editor: {
                    type: EditorTypes.SWITCH,
                    options: {}
                },
                formatter: { type: 'boolean', options: { trueText: '是', falseText: '否' } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'commentNecessary', width: 60, title: '意见必填',
                editor: {
                    type: EditorTypes.SWITCH,
                    options: {}
                },
                formatter: { type: 'boolean', options: { trueText: '是', falseText: '否' } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'attachmentNecessary', width: 60, title: '附件上传',
                editor: {
                    type: EditorTypes.SWITCH,
                    options: {}
                },
                formatter: { type: 'boolean', options: { trueText: '是', falseText: '否' } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'certification', width: 60, title: '数字签名',
                editor: {
                    type: EditorTypes.SWITCH,
                    options: {}
                },
                formatter: { type: 'boolean', options: { trueText: '是', falseText: '否' } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }
        ];
        this.data = [];
        this.actionsCols = [
            { title: '编号', field: 'code', width: 80 },
            { title: '名称', field: 'name', width: 90 }
        ];
    }
    Object.defineProperty(ApprovelItemsComponent.prototype, "value", {
        set: /**
         * @param {?} items
         * @return {?}
         */
        function (items) {
            var e_1, _a;
            if (items && items.length > 0) {
                try {
                    for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                        var item = items_1_1.value;
                        /** @type {?} */
                        var approval = new ApprovalItemEntity();
                        approval.value = item.Value;
                        approval.text = item.Text;
                        approval.workFlowAction = item.WorkFlowAction;
                        approval.isDefault = item.IsDefault;
                        if (item.commentNecessary === null || item.commentNecessary === undefined) {
                            approval.commentNecessary = (item.Value === 'Back' ? true : false);
                        }
                        else {
                            approval.commentNecessary = item.commentNecessary;
                        }
                        approval.certification = item.certification ? item.certification : false;
                        approval.attachmentNecessary = item.attachmentNecessary ? item.attachmentNecessary : false;
                        this.data.push(approval);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ApprovelItemsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getActionsList();
    };
    /**
     * @return {?}
     */
    ApprovelItemsComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        this.grid.endCellEdit();
        if (this.validator()) {
            /** @type {?} */
            var object = { value: this.data, parameters: null };
            this.submitModal.emit(object);
        }
    };
    /**
     * @return {?}
     */
    ApprovelItemsComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @private
     * @return {?}
     */
    ApprovelItemsComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.data.findIndex((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return !d.workFlowAction; })) > -1) {
            this.message.warning('审批项流转方向不允许为空，请修改！');
            return false;
        }
        return true;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ApprovelItemsComponent.prototype.selectChanged = /**
     * @param {?} data
     * @return {?}
     */
    function (data) { };
    /**
     * @return {?}
     */
    ApprovelItemsComponent.prototype.deleteRow = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.grid.endCellEdit();
        if (this.grid.selectedRow && this.grid.selectedRow.data) {
            /** @type {?} */
            var i = this.data.findIndex((/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d.value === _this.grid.selectedRow.data.value; }));
            this.data.splice(i, 1);
            this.grid.loadData(this.data);
        }
        else {
            this.message.info('请首先选中一条选项！');
        }
    };
    /**
     * @private
     * @return {?}
     */
    ApprovelItemsComponent.prototype.getActionsList = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var url = this.util.getApprovalActionWebApi() + '?';
        if (this.uiState.bizActivityId) {
            url += "bizActivityId=" + this.uiState.bizActivityId;
        }
        else {
            url += "bizActivityId=";
        }
        this.http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            data = data.filter((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return _this.actionValidate(a); }));
            _this.actions = data;
        }));
    };
    /**
     * @return {?}
     */
    ApprovelItemsComponent.prototype.actionsSelect = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var selections = this.actionsTable.checkeds;
        if (selections && selections.length > 0) {
            selections.forEach((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                /** @type {?} */
                var item = new ApprovalItemEntity(action.data.code, action.data.name, action.data.workFlowAction);
                /** @type {?} */
                var index = _this.data.findIndex((/**
                 * @param {?} act
                 * @return {?}
                 */
                function (act) { return act.value === action.data.code; }));
                if (index > -1) {
                    _this.data.splice(index, 1);
                }
                _this.data.push(item);
            }));
            this.grid.loadData(this.data);
        }
        this.actionsDialog.close();
    };
    /**
     * @private
     * @param {?} action
     * @return {?}
     */
    ApprovelItemsComponent.prototype.actionValidate = /**
     * @private
     * @param {?} action
     * @return {?}
     */
    function (action) {
        /** @type {?} */
        var arr = ['ViewBizLog', 'ViewFlowChart', 'AssignUser', 'Claim', 'Unclaim', 'Retrieve', 'Resubmit', 'Obsolete', 'Transfer', 'AddSignFront', 'ViewExecuteForm'];
        return arr.indexOf(action.code.trim()) === -1;
    };
    ApprovelItemsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-approvel-items',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span>\r\n        <h4 class=\"f-title-text\">\u5BA1\u6279\u9879\u5217\u8868</h4>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n      <button class=\"btn btn-primary mr-2\" (click)=\"actionsDialog.show()\">\u65B0\u589E</button>\r\n      <button class=\"btn btn-secondary\" (click)=\"deleteRow()\">\u5220\u9664</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"data\" [columns]=\"columns\" [idField]=\"'value'\" [fit]=\"true\"\r\n        [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n        [multiSelect]=\"false\" (selectChanged)=\"selectChanged($event)\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"actionsSelect()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"actionsDialog.close()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n<farris-dialog #actionsDialog [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"520\" [title]=\"'\u5BA1\u6279\u52A8\u4F5C'\">\r\n  <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100 m-2\">\r\n    <farris-datagrid #actionsTable [columns]=\"actionsCols\" [data]=\"actions\"\r\n      [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\" [pagination]='false'\r\n      [showCheckbox]=\"true\" [multiSelect]=\"true\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\" [showAllCheckbox]=\"true\"\r\n      [showLineNumber]=\"true\" [lineNumberTitle]=\"'\u5E8F\u53F7'\" [lineNumberWidth]=\"50\" [striped]=\"true\">\r\n    </farris-datagrid>\r\n  </div>\r\n</farris-dialog>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ApprovelItemsComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: MessagerService },
        { type: ProcessDeUtil },
        { type: HttpService },
        { type: ProcessDesignerUIState }
    ]; };
    ApprovelItemsComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        actionsTable: [{ type: ViewChild, args: ['actionsTable',] }],
        actionsDialog: [{ type: ViewChild, args: ['actionsDialog',] }],
        grid: [{ type: ViewChild, args: ['grid',] }]
    };
    return ApprovelItemsComponent;
}());
var ApprovelItemsConverter = /** @class */ (function () {
    function ApprovelItemsConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    ApprovelItemsConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.length > 0) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    };
    return ApprovelItemsConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExpressionEditorComponent = /** @class */ (function () {
    function ExpressionEditorComponent(expr, designerState) {
        this.expr = expr;
        this.designerState = designerState;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.contextEntities = [];
        this.schema = {};
        this.injectName = '';
        this.modalConfig = {
            title: '条件编辑',
            width: 1140,
            height: 520,
            showButtons: true
        };
        if (this.designerState.schemas[0]) {
            this.schema = this.designerState.schemas[0];
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                this.injectName = this.designerState.schemas[0].entityTypes[0].name;
            }
        }
    }
    /**
     * @return {?}
     */
    ExpressionEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e;
        this.contextEntities = new Array();
        if (this.designerState.procInstContext.length > 0) {
            try {
                for (var _f = __values(this.designerState.procInstContext), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var variable = _g.value;
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!this_1.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    this_1.contextEntities = this_1.contextEntities.concat([variable]);
                }
            };
            var this_1 = this;
            try {
                for (var _h = __values(this.designerState.formalParameterContext), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var variable = _j.value;
                    _loop_1(variable);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!this_2.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    this_2.contextEntities = this_2.contextEntities.concat([variable]);
                }
            };
            var this_2 = this;
            try {
                for (var _k = __values(this.designerState.participantContext), _l = _k.next(); !_l.done; _l = _k.next()) {
                    var variable = _l.value;
                    _loop_2(variable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.designerState.activityComponentContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!this_3.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    this_3.contextEntities = this_3.contextEntities.concat([variable]);
                }
            };
            var this_3 = this;
            try {
                for (var _m = __values(this.designerState.activityComponentContext), _o = _m.next(); !_o.done; _o = _m.next()) {
                    var variable = _o.value;
                    _loop_3(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            var _loop_4 = function (variable) {
                if (!this_4.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    this_4.contextEntities = this_4.contextEntities.concat([variable]);
                }
            };
            var this_4 = this;
            try {
                for (var _p = __values(this.designerState.processVariableContext), _q = _p.next(); !_q.done; _q = _p.next()) {
                    var variable = _q.value;
                    _loop_4(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
    };
    /**
     * @return {?}
     */
    ExpressionEditorComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = this.compute.getExpr();
        this.value = this.convertToValue(result.text);
        /** @type {?} */
        var object = { value: this.value, parameters: null };
        this.submitModal.emit(object);
    };
    /**
     * 切换表达式类型（简易表达式<--->高级表达式）
     */
    /**
     * 切换表达式类型（简易表达式<--->高级表达式）
     * @return {?}
     */
    ExpressionEditorComponent.prototype.changeType = /**
     * 切换表达式类型（简易表达式<--->高级表达式）
     * @return {?}
     */
    function () {
        this.compute.changeType();
    };
    /**
     * @return {?}
     */
    ExpressionEditorComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    ExpressionEditorComponent.prototype.convertToValue = /**
     * @private
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            if (val.substring(9, val.length - 2)) {
                return val;
            }
            else {
                return '';
            }
        }
        else {
            return '';
        }
    };
    ExpressionEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-expression-editor',
                    template: "<app-compute-rule-editor #compute\r\n  [text]=\"value\"\r\n  [advancedContexts]=\"contextEntities\"\r\n  [injectName]=\"injectName\"\r\n  [injectSchemaName]=\"'Schema'\"\r\n  [injectNameInSchema]=\"injectName\"\r\n  [schema]=\"schema\"\r\n  [schemaName]=\"'Schema'\"   >\r\n</app-compute-rule-editor>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <div class=\"btns\">\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm mr-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm mr-2\" (click)=\"changeType()\">\u5207\u6362\u7C7B\u578B</button>\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n  </div>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ExpressionEditorComponent.ctorParameters = function () { return [
        { type: ExpressionService },
        { type: ProcessDesignerUIState }
    ]; };
    ExpressionEditorComponent.propDecorators = {
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        editorParams: [{ type: Input }],
        editor: [{ type: ViewChild, args: [ExpressioneditorComponent,] }],
        compute: [{ type: ViewChild, args: ['compute',] }]
    };
    return ExpressionEditorComponent;
}());
var ExpressionEditorConverter = /** @class */ (function () {
    function ExpressionEditorConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    ExpressionEditorConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data) {
            return data;
        }
        else {
            return '（未设置）';
        }
    };
    return ExpressionEditorConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JumpScopeComponent = /** @class */ (function () {
    function JumpScopeComponent(uistate, message) {
        var _this = this;
        this.uistate = uistate;
        this.message = message;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: '目标节点选项',
            width: 520,
            height: 460,
            showButtons: true
        };
        this.cols = [
            { title: '名称', field: 'Name', width: 60, searchField: 'Name' },
            { title: 'ID', field: 'Id', width: 90, searchField: 'Id' }
        ];
        // ==========================================================
        this.actis = [];
        this.fullActis = [];
        this.defaultacty = '';
        this.categoryListItems = [
            { value: 'OutConnectNode', name: '流程图连线节点' },
            { value: 'Global', name: '流程内所有节点' },
            { value: 'AfterNodes', name: '所有后继节点' },
            { value: 'SpecifiedSet', name: '流程图连线节点+附加节点' }
        ];
        this.category = '';
        this.defaultType = '';
        this.defaultTypeListItems = [
            { value: 'FirstNode', name: '条件为true的连线节点，当有多条时默认选中首条' },
            { value: 'NullNode', name: '默认为空，每次都手动选择' },
            { value: 'SpecifyNode', name: '指定默认节点' }
        ];
        this.defaultActivity = '';
        this.pageInfo = {
            pageIndex: 1,
            pageList: [10, 20, 30, 50],
            pageSize: 20
        };
        this.actisSelect = (/**
         * @param {?} rowData
         * @return {?}
         */
        function (rowData) {
            // 附加节点的帮助后事件，把选中的数据赋给fullActis（此处处理的目的是为了显示Name同时取Id值）
            // console.log(rowData);
            _this.fullActis = rowData;
            return of({
                closeDialog: true
            });
        });
        this.defaultActivitySelect = (/**
         * @param {?} rowData
         * @return {?}
         */
        function (rowData) {
            // 默认节点的帮助后事件，把选中的id赋给defaultActivity（此处处理的目的是为了显示Name同时取Id值）
            _this.defaultActivity = rowData.Id;
            return of({
                closeDialog: true
            });
        });
    }
    Object.defineProperty(JumpScopeComponent.prototype, "value", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            var e_1, _a, e_2, _b;
            if (data) {
                this.category = data.Category;
                this.defaultType = data.DefaultType;
                // 取到DefaultActivity的节点Id，遍历出Name绑定到radiogroup上去（defaultacty）
                /** @type {?} */
                var acty = data.DefaultActivity;
                if (acty != null) {
                    try {
                        for (var _c = __values(this.uistate.allActList), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var act = _d.value;
                            if (act.Id === acty) {
                                this.defaultacty = act.Name;
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                // 取到DestinationActivities的节点Id，遍历出Id和Name绑定到radiogroup上去（actis）
                /** @type {?} */
                var strs = data.DestinationActivities;
                if (strs && strs.length > 0) {
                    var _loop_1 = function (str) {
                        /** @type {?} */
                        var name_1 = this_1.uistate.userActList.filter((/**
                         * @param {?} act
                         * @return {?}
                         */
                        function (act) { return act.Id === str; }))[0].Name;
                        // const acti = { Id: str, Name: name };
                        this_1.actis.push(name_1);
                    };
                    var this_1 = this;
                    try {
                        for (var strs_1 = __values(strs), strs_1_1 = strs_1.next(); !strs_1_1.done; strs_1_1 = strs_1.next()) {
                            var str = strs_1_1.value;
                            _loop_1(str);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (strs_1_1 && !strs_1_1.done && (_b = strs_1.return)) _b.call(strs_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            else {
                this.category = 'OutConnectNode';
                this.defaultType = 'FirstNode';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    JumpScopeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    JumpScopeComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        var e_3, _a, e_4, _b, e_5, _c;
        if (this.validator()) {
            /** @type {?} */
            var value = void 0;
            /** @type {?} */
            var list_1 = [];
            // 重新打开设置界面，没有进行节点配置的情况（DefaultActivity）
            if (this.defaultActivity === '' && this.defaultacty !== '') {
                try {
                    for (var _d = __values(this.uistate.allActList), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var defAct = _e.value;
                        if (defAct.Name === this.defaultacty) {
                            this.defaultActivity = defAct.Id;
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
            // 重新打开设置界面，没有进行节点配置的情况（DestinationActivities）
            if (this.fullActis.length === 0 && this.actis.length > 0) {
                try {
                    for (var _f = __values(this.actis), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var act = _g.value;
                        try {
                            for (var _h = __values(this.uistate.userActList), _j = _h.next(); !_j.done; _j = _h.next()) {
                                var allAct = _j.value;
                                if (act === allAct.Name) {
                                    list_1.push(allAct.Id);
                                }
                            }
                        }
                        catch (e_5_1) { e_5 = { error: e_5_1 }; }
                        finally {
                            try {
                                if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                            }
                            finally { if (e_5) throw e_5.error; }
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
            else if (this.category === 'SpecifiedSet' && this.fullActis && this.fullActis.length > 0) {
                // 附加节点的id传给模型上的DestinationActivities
                this.fullActis.forEach((/**
                 * @param {?} act
                 * @return {?}
                 */
                function (act) { return list_1.push(act.Id); }));
            }
            value = {
                Category: this.category,
                DefaultType: this.defaultType,
                DefaultActivity: this.defaultActivity,
                DestinationActivities: list_1,
            };
            /** @type {?} */
            var object = { value: value, parameters: null };
            this.submitModal.emit(object);
        }
    };
    /**
     * @return {?}
     */
    JumpScopeComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @private
     * @return {?}
     */
    JumpScopeComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.category) {
            this.message.warning('尚未设置目标节点选项，请了解！');
            return false;
        }
        // if (this.category === 'SpecifiedSet' && Object.prototype.isPrototypeOf(this.actis)) {
        //   this.message.info('尚未选择附加节点，请了解！');
        //   return false;
        // }
        if (this.defaultType === 'SpecifyNode' && this.defaultacty === '') {
            this.message.warning('尚未指定默认节点，请了解！');
            return false;
        }
        return true;
    };
    /**
     * @return {?}
     */
    JumpScopeComponent.prototype.deleteRow = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.actTable.selectedRow && this.actTable.selectedRow.data) {
            /** @type {?} */
            var i = this.actis.findIndex((/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d.id === _this.actTable.selectedRow.data.id; }));
            this.actis.splice(i, 1);
            this.actTable.loadData(this.actis);
        }
        else {
            this.message.info('请首先选中一条选项！');
        }
    };
    JumpScopeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-jump-scope',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <form class=\"h-100\">\r\n          <div class=\"f-utils-fill-flex-column h-100\">\r\n            <!-- \u5141\u8BB8\u9009\u62E9\u76EE\u6807\u8282\u70B9\u5355\u9009\u9879 -->\r\n            <!-- <div class=\"mx-4 mt-3 farris-form-controls-inline\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <div class=\"farris-input-wrap\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                      <input class=\"custom-control-input\" name=\"submitterAutoPass\" type=\"checkbox\"\r\n                        id=\"submitterAutoPass\" [(ngModel)]=\"outConnectNode\" />\r\n                      <label class=\"custom-control-label\" for=\"submitterAutoPass\">\u5141\u8BB8\u9009\u62E9\u76EE\u6807\u8282\u70B9</label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div> -->\r\n            <!-- \u53EF\u9009\u8282\u70B9\u5C0F\u6807\u9898 -->\r\n            <div class=\"mx-2 mt-1\">\r\n              <div class=\"title-content\">\r\n                <h4 class=\"title-text\">\u53EF\u9009\u8282\u70B9</h4><span class=\"title-line\"></span>\r\n              </div>\r\n            </div>\r\n            <div class=\"mt-2 mx-4 farris-form-controls-inline\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group\">\r\n                  <!-- \u7AD6\u5217\u679A\u4E3E\u7684category\u9009\u9879 -->\r\n                  <farris-radiogroup [(ngModel)]=\"category\" [data]=\"categoryListItems\" name=\"category\"\r\n                    [horizontal]=false>\r\n                  </farris-radiogroup>\r\n                </div>\r\n                <!-- \u9644\u52A0\u8282\u70B9\u5E2E\u52A9 -->\r\n                <farris-lookup-grid #userActisDialog\r\n                  [items]=\"uistate.userActList | jumpScopePipe:uistate.propertyData.Id \" [columns]=\"cols\"\r\n                  [disabled]=\"!(category === 'SpecifiedSet')\" [resizable]=\"true\" [singleSelect]=\"false\" [idField]=\"'Id'\"\r\n                  [textField]=\"'Name'\" [(ngModel)]=\"actis\" [valueField]=\"'Id'\" [pagination]=\"true\"\r\n                  [pageIndex]=\"pageInfo.pageIndex\" name=\"defaultActivities\" [pageSize]=\"pageInfo.pageSize\"\r\n                  [pageList]=\"pageInfo.pageList\" [total]=\"total\" [enableClear]=\"false\" [title]=\"'\u9644\u52A0\u8282\u70B9\u5217\u8868'\"\r\n                  [displayType]=\"'List'\" [remoteSearch]='false' [enableToSelect]=\"false\" [placeholder]=\"'\u8BF7\u9009\u62E9\u9644\u52A0\u8282\u70B9'\" [dictPicked]=\"actisSelect\">\r\n                </farris-lookup-grid>\r\n              </div>\r\n            </div>\r\n            <!-- \u9ED8\u8BA4\u8282\u70B9\u5C0F\u6807\u9898 -->\r\n            <div class=\"mx-2 mt-1\">\r\n              <div class=\"title-content\">\r\n                <h4 class=\"title-text\">\u9ED8\u8BA4\u8282\u70B9</h4><span class=\"title-line\"></span>\r\n              </div>\r\n            </div>\r\n            <div class=\"mt-2 mx-4 farris-form-controls-inline\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group\">\r\n                  <!-- \u7AD6\u5217\u679A\u4E3E\u7684DefaultType\u9009\u9879 -->\r\n                  <farris-radiogroup [(ngModel)]=\"defaultType\" [data]=\"defaultTypeListItems\" name=\"defaultType\"\r\n                    [horizontal]=false>\r\n                  </farris-radiogroup>\r\n                </div>\r\n                <!-- \u9ED8\u8BA4\u8282\u70B9\u5E2E\u52A9 -->\r\n                <farris-lookup-grid #allActisTable [items]=\"uistate.allActList | jumpScopePipe:uistate.propertyData.Id \"\r\n                  [columns]=\"cols\" [disabled]=\"!(defaultType === 'SpecifyNode')\" [resizable]=\"true\"\r\n                  [singleSelect]=\"true\" [idField]=\"'Id'\" [textField]=\"'Name'\" [(ngModel)]=\"defaultacty\"\r\n                  [valueField]=\"'Id'\" [pagination]=\"true\" [placeholder]=\"'\u8BF7\u9009\u62E9\u9ED8\u8BA4\u8282\u70B9'\" [pageIndex]=\"pageInfo.pageIndex\"\r\n                  name=\"defaultActivity\" [pageSize]=\"pageInfo.pageSize\" [pageList]=\"pageInfo.pageList\" [total]=\"total\"\r\n                  [enableClear]=\"false\" [title]=\"'\u9ED8\u8BA4\u8282\u70B9\u5217\u8868'\" [displayType]=\"'List'\" [remoteSearch]='false' [dictPicked]=\"defaultActivitySelect\">\r\n                </farris-lookup-grid>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n<!-- <ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-primary mx-2\" (click)=\"actisSelect()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-sm btn-default\" (click)=\"allActisDialog.close()\">\u53D6\u6D88</button>\r\n</ng-template> -->\r\n<!-- <farris-dialog #allActisDialog [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"520\" [title]=\"'\u6D3B\u52A8\u5217\u8868'\">\r\n  <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100 m-2\">\r\n    <farris-datagrid #allActisTable [columns]=\"cols\"\r\n      [data]=\"uistate.userActList | jumpScopePipe:uistate.propertyData.Id\" [idField]=\"'Id'\" [fit]=\"true\"\r\n      [fitColumns]=\"true\" [pagination]='false' [multiSelect]=\"true\" [showCheckbox]=\"true\" [multiSelect]=\"true\"\r\n      [checkOnSelect]=\"true\" [selectOnCheck]=\"true\">\r\n    </farris-datagrid>\r\n  </div>\r\n</farris-dialog> -->\r\n",
                    styles: [".title-content{color:#000;display:inline-flex;align-items:center;line-height:1.375rem;position:relative;overflow:hidden;padding:0 0 0 1rem;min-width:760px}.title-content ::before{content:'';width:.25rem;height:1.125rem;background:#59a1ff;border-radius:1px;position:absolute;top:50%;left:0;margin-top:-.5625rem}.title-text{font-size:1rem;line-height:1.375rem;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin-bottom:0;margin-right:10px}.title-line{flex-grow:1;border-bottom:1px dashed rgba(0,0,0,.1)}"]
                }] }
    ];
    /** @nocollapse */
    JumpScopeComponent.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: MessagerService }
    ]; };
    JumpScopeComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        allActisTable: [{ type: ViewChild, args: ['allActisTable',] }],
        allActisDialog: [{ type: ViewChild, args: ['allActisDialog',] }],
        actTable: [{ type: ViewChild, args: ['actTable',] }],
        lookup: [{ type: ViewChild, args: ['lookup',] }]
    };
    return JumpScopeComponent;
}());
var JumpScopeConverter = /** @class */ (function () {
    function JumpScopeConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    JumpScopeConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data) {
            return '（已设置）';
        }
        return '（未设置）';
    };
    return JumpScopeConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BackwardRuleComponent = /** @class */ (function () {
    function BackwardRuleComponent(uiState, message) {
        var _this = this;
        this.uiState = uiState;
        this.message = message;
        this.cls = 'farris-main-area flex-column';
        this.editorParams = {};
        this.nodeType = 'UserActivity';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: '驳回规则',
            width: 430,
            height: 370,
            showButtons: true
        };
        this.listItems = [
            { Id: 'InitialActityId', Name: '开始节点' },
            { Id: 'PrecursorActivityId', Name: '前置节点' },
            { Id: 'Empty', Name: '空' }
        ];
        this.items = [];
        this.columns = [
            { title: '名称', field: 'Name', width: 100, searchField: 'Name' },
            { title: '标识', field: 'Id', width: 100, searchField: 'Id' },
        ];
        this.selectAbleChecked = false;
        this.waitReturnChecked = false;
        this.dynamicBackWardRuleAbleChecked = false;
        this.targetRef = this.listItems[0].Id;
        this.pageInfo = {
            pageIndex: 1,
            pageList: [10, 20, 30, 50],
            pageSize: 20
        };
        this.dictPicked = (/**
         * @param {?} arg
         * @return {?}
         */
        function (arg) {
            _this.targetRef = arg.Id;
            _this.displayText = arg.Name;
            return of({ closeDialog: true });
        });
        this.listItems = this.listItems.concat(this.uiState.userActList);
        this.items = this.listItems;
        this.total = this.listItems.length;
    }
    Object.defineProperty(BackwardRuleComponent.prototype, "value", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            var _this = this;
            if (data) {
                this.selectAbleChecked = data.SelectTargetAble;
                this.waitReturnChecked = data.WaitReturn;
                this.dynamicBackWardRuleAbleChecked = data.DynamicBackWardRuleAble;
                if (!data.TargetRef) {
                    this.targetRef = 'Empty';
                }
                else {
                    this.targetRef = data.TargetRef;
                }
                /** @type {?} */
                var act = this.listItems.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.Id === _this.targetRef; }));
                if (act) {
                    this.displayText = act.Name;
                }
                else {
                    this.displayText = '';
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.message.warning('驳回活动节点已不存在，请重新编辑');
                    }), 500);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BackwardRuleComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.nodeType = this.editorParams.nodeType;
        if (this.nodeType !== 'UserActivity') {
            this.listItems = this.listItems.filter((/**
             * @param {?} i
             * @return {?}
             */
            function (i) { return i.Id !== 'Empty'; }));
            this.items = this.listItems;
            this.total = this.listItems.length;
        }
    };
    /**
     * @return {?}
     */
    BackwardRuleComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    BackwardRuleComponent.prototype.selectAbleClick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.uiState.propertyData.ClrTypeID === 'wf.UserActivity'
            && this.uiState.propertyData.CompleteStrategy !== this.uiState.completeIterator[0].key
            && this.selectAbleChecked === true) {
            this.message.info('会签策略下，不允许“动态选择驳回级次”!', (/**
             * @return {?}
             */
            function () {
                _this.selectAbleChecked = false;
            }));
        }
    };
    /**
     * @return {?}
     */
    BackwardRuleComponent.prototype.waitReturnClick = /**
     * @return {?}
     */
    function () {
        this.waitReturnChecked = !this.waitReturnChecked;
    };
    /**
     * @return {?}
     */
    BackwardRuleComponent.prototype.dynamicBackWardRuleAbleClick = /**
     * @return {?}
     */
    function () {
        this.dynamicBackWardRuleAbleChecked = !this.dynamicBackWardRuleAbleChecked;
    };
    /**
     * @return {?}
     */
    BackwardRuleComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var backWardRule = {
            TargetRef: this.getTargetRef(),
            SelectTargetAble: this.selectAbleChecked,
            WaitReturn: this.waitReturnChecked,
            DynamicBackWardRuleAble: this.dynamicBackWardRuleAbleChecked,
        };
        /** @type {?} */
        var object = { value: backWardRule, parameters: null };
        this.submitModal.emit(object);
    };
    /**
     * @return {?}
     */
    BackwardRuleComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @param {?} arg
     * @return {?}
     */
    BackwardRuleComponent.prototype.pagerChanged = /**
     * @param {?} arg
     * @return {?}
     */
    function (arg) {
        this.pageInfo.pageIndex = arg.pageIndex;
        this.pageInfo.pageSize = arg.pageSize;
        /** @type {?} */
        var search = {
            field: arg.searchValue.searchField,
            value: arg.searchValue.searchValue
        };
        this.load(search);
    };
    /**
     * @param {?} arg
     * @return {?}
     */
    BackwardRuleComponent.prototype.pageSizeChange = /**
     * @param {?} arg
     * @return {?}
     */
    function (arg) {
        console.log(arg);
        this.pageInfo.pageIndex = arg.pageIndex;
        this.pageInfo.pageSize = arg.pageSize;
        /** @type {?} */
        var search = {
            field: arg.searchValue.searchField,
            value: arg.searchValue.searchValue
        };
        this.load(search);
    };
    /**
     * @param {?} arg
     * @return {?}
     */
    BackwardRuleComponent.prototype.search = /**
     * @param {?} arg
     * @return {?}
     */
    function (arg) {
        this.pageInfo.pageIndex = arg.pageInfo.pageIndex;
        this.pageInfo.pageSize = arg.pageInfo.pageSize;
        /** @type {?} */
        var search = arg.search;
        this.load(search);
    };
    /**
     * @param {?=} search
     * @return {?}
     */
    BackwardRuleComponent.prototype.load = /**
     * @param {?=} search
     * @return {?}
     */
    function (search) {
        /** @type {?} */
        var start = (this.pageInfo.pageIndex - 1) * this.pageInfo.pageSize;
        /** @type {?} */
        var end = start + this.pageInfo.pageSize;
        /** @type {?} */
        var items = [];
        if (search) {
            if (search.field === '*') {
                items = this.listItems.filter((/**
                 * @param {?} i
                 * @return {?}
                 */
                function (i) { return i.Name.indexOf(search.value) > -1 || i.Id.indexOf(search.value) > -1; }));
            }
            else {
                items = this.listItems.filter((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return f[search.field].indexOf(search.value) > -1; }));
            }
        }
        else {
            items = this.listItems;
        }
        this.total = items.length;
        this.items = items; // .slice(start, end);
        this.hlp.componentRef.instance.loadData({
            // total: this.total,
            // pageSize: this.pageInfo.pageSize,
            // pageIndex: this.pageInfo.pageIndex,
            data: this.items
        });
    };
    /**
     * @private
     * @return {?}
     */
    BackwardRuleComponent.prototype.getTargetRef = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.targetRef === 'Empty') {
            return '';
        }
        else {
            return this.targetRef;
        }
    };
    BackwardRuleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'procDesigner-backward-rule',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">\u9A73\u56DE\u89C4\u5219\u8BBE\u7F6E</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <div class=\"farris-form form-inline farris-form-inline\">\r\n          <div class=\"col-12 farris-group-auto my-4 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u9A73\u56DE\u81F3</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-lookup-grid #hlp [items]=\"items\" [columns]=\"columns\" [resizable]=\"true\"\r\n                    [singleSelect]=\"true\" [idField]=\"'Id'\" [textField]=\"'Name'\" [(ngModel)]=\"displayText\"\r\n                    [valueField]=\"'Id'\" [pagination]=\"false\" [pageIndex]=\"pageInfo.pageIndex\"\r\n                    [pageSize]=\"pageInfo.pageSize\" [pageList]=\"pageInfo.pageList\" [total]=\"total\"\r\n                    [title]=\"'\u6D3B\u52A8\u5217\u8868'\" [displayType]=\"'List'\" [dictPicked]=\"dictPicked\" [remoteSearch]='false'\r\n                    (pagerChanged)=\"pagerChanged($event)\" (search)=\"search($event)\" [enableClear]=\"false\"\r\n                    (pageSizeChange)=\"pageSizeChange($event)\">\r\n                  </farris-lookup-grid>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div *ngIf=\"nodeType==='UserActivity'\" class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap pl-5\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"custom-control custom-checkbox\">\r\n                    <input class=\"custom-control-input\" name=\"selectAble\" type=\"checkbox\" id=\"selectAble\"\r\n                      [(ngModel)]=\"selectAbleChecked\" (change)=\"selectAbleClick()\" />\r\n                    <label class=\"custom-control-label\" for=\"selectAble\">\u52A8\u6001\u9009\u62E9\u9A73\u56DE\u7EA7\u6B21</label>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap pl-5\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"custom-control custom-checkbox\">\r\n                    <input class=\"custom-control-input\" name=\"waitReturn\" type=\"checkbox\" id=\"waitReturn\" [checked]=\"waitReturnChecked\"\r\n                      (change)=\"waitReturnClick()\" />\r\n                    <label class=\"custom-control-label\" for=\"waitReturn\">\u9A73\u56DE\u540E\u91CD\u65B0\u63D0\u4EA4\u81F3\u672C\u8282\u70B9</label>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap pl-5\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"custom-control custom-checkbox\">\r\n                    <input class=\"custom-control-input\" name=\"dynamicBackWardRuleAble\" type=\"checkbox\" id=\"dynamicBackWardRuleAble\" [checked]=\"dynamicBackWardRuleAbleChecked\"\r\n                      (change)=\"dynamicBackWardRuleAbleClick()\" />\r\n                    <label class=\"custom-control-label\" for=\"dynamicBackWardRuleAble\">\u52A8\u6001\u9009\u62E9\u9A73\u56DE\u89C4\u5219</label>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <!-- <form class=\"h-100\">\r\n          <div class=\"f-utils-fill-flex-column justify-content-center h-100 pb-4\">\r\n            <div class=\"my-2 mx-5\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">\u9A73\u56DE\u81F3</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap mt-1\" style=\"width: 300px;\">\r\n                    <farris-combo-list [(ngModel)]=\"targetRef\" name=\"targetRef\" [ngModelOptions]=\"{standalone: true}\"\r\n                      [idField]=\"'value'\" [textField]=\"'text'\" [valueField]=\"'value'\" [data]=\"listItems\"\r\n                      [panelHeight]=\"100\">\r\n                    </farris-combo-list>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"my-2 mx-5\">\r\n              <div class=\"farris-input-wrap\">\r\n                <div class=\"custom-control custom-checkbox\">\r\n                  <input class=\"custom-control-input\" name=\"selectAble\" type=\"checkbox\" id=\"selectAble\" [(ngModel)]=\"selectAbleChecked\"\r\n                    (change)=\"selectAbleClick()\" />\r\n                  <label class=\"custom-control-label\" for=\"selectAble\">\u52A8\u6001\u9009\u62E9\u9A73\u56DE\u7EA7\u6B21</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"my-2 mx-5\">\r\n              <div class=\"farris-input-wrap\">\r\n                <div class=\"custom-control custom-checkbox\">\r\n                  <input class=\"custom-control-input\" name=\"waitReturn\" type=\"checkbox\" id=\"waitReturn\" [checked]=\"waitReturnChecked\"\r\n                    (change)=\"waitReturnClick()\" />\r\n                  <label class=\"custom-control-label\" for=\"waitReturn\">\u9A73\u56DE\u540E\u91CD\u65B0\u63D0\u4EA4\u81F3\u672C\u8282\u70B9</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form> -->\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [".item-header{padding:1rem}.item{padding:.5rem 5rem}"]
                }] }
    ];
    /** @nocollapse */
    BackwardRuleComponent.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: MessagerService }
    ]; };
    BackwardRuleComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        editorParams: [{ type: Input }],
        value: [{ type: Input }],
        nodeType: [{ type: Input }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        hlp: [{ type: ViewChild, args: ['hlp',] }]
    };
    return BackwardRuleComponent;
}());
var BackwardRuleConverter = /** @class */ (function () {
    function BackwardRuleConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    BackwardRuleConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data) {
            return '（已设置）';
        }
        return '（未设置）';
    };
    return BackwardRuleConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PerformerUIState = /** @class */ (function () {
    function PerformerUIState() {
        this.performersList = [];
        this.typeCollection = [
            { text: '用户', value: 'wf.UserParticipant' },
            { text: '岗位', value: 'wf.PositionParticipant' },
            { text: '构件参与者', value: 'wf.ComponentParticipant' },
            { text: '汇报关系', value: 'wf.ReportingLineParticipant' },
            { text: '矩阵', value: 'wf.MatrixParticipant' }
        ];
        this.performerInfo = { performers: [], components: [], reportingLines: [], matrixParticipants: [], options: null };
    }
    PerformerUIState.decorators = [
        { type: Injectable }
    ];
    return PerformerUIState;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PerformerRepository = /** @class */ (function () {
    function PerformerRepository() {
    }
    PerformerRepository.decorators = [
        { type: Injectable }
    ];
    return PerformerRepository;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PerformerViewModel = /** @class */ (function () {
    function PerformerViewModel(resolver, injector, modalService) {
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
    }
    PerformerViewModel.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PerformerViewModel.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService }
    ]; };
    return PerformerViewModel;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PerformerEntity = /** @class */ (function () {
    function PerformerEntity(id, name, type) {
        this.id = '_' + ProcessDeUtil.GenerateElementId();
        this.performerId = id;
        this.performerName = name;
        this.type = type;
    }
    return PerformerEntity;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UserPerformerEntity = /** @class */ (function (_super) {
    __extends(UserPerformerEntity, _super);
    function UserPerformerEntity(id, name, type) {
        return _super.call(this, id, name, type) || this;
    }
    return UserPerformerEntity;
}(PerformerEntity));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PerformerConfigService = /** @class */ (function () {
    function PerformerConfigService(http) {
        var _this = this;
        this.http = http;
        this.lookupConfig = new ReplaySubject();
        this.http.get('/platform/runtime/wf/web/wf-proc-designer/assets/config/performerlookupconfig.json').subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.lookupConfig.next(data);
        }));
    }
    /**
     * @return {?}
     */
    PerformerConfigService.prototype.getLookupConfig = /**
     * @return {?}
     */
    function () {
        return this.lookupConfig.asObservable();
    };
    PerformerConfigService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PerformerConfigService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return PerformerConfigService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UserPerformerComponent = /** @class */ (function () {
    function UserPerformerComponent(designerUIState, expr, injector, lookupConfig, ngZone, http, message) {
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.injector = injector;
        this.lookupConfig = lookupConfig;
        this.ngZone = ngZone;
        this.http = http;
        this.message = message;
        this.cls = 'd-flex flex-fill h-100';
        this.showClearButton = false;
        this.bindingData = {};
        this.userTypeCollection = [
            { text: '固定用户', value: 'user' },
            { text: '变量参与者', value: 'variable' }
        ];
        this.userType = this.userTypeCollection[0].value;
        this.variableOrgTypes = [
            { name: '系统用户', value: 'Sys' },
            { name: '行政人员', value: 'Administrative_organization' }
        ];
        this.curOrgType = this.variableOrgTypes[0].value;
        this.hasAdminOrg = false;
        this.userTypeButtonNeedShow = false; // 用户类型单选按钮是否需要显示
        this.users = [];
    }
    /**
     * @return {?}
     */
    UserPerformerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var url = '/api/runtime/wf/v1.0/reportingOrgType/hasAdminOrg';
        this.http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.hasAdminOrg = data;
        }));
    };
    /**
     * @return {?}
     */
    UserPerformerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.inputGroup.nativeElement.addEventListener('mouseenter', _this.onMouseEnter.bind(_this));
            _this.inputGroup.nativeElement.addEventListener('mouseleave', _this.onMouseLeave.bind(_this));
        }));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    UserPerformerComponent.prototype.onMouseEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    UserPerformerComponent.prototype.onMouseLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    };
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    UserPerformerComponent.prototype.toggleClearIcon = /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    function (event, isShow) {
        if (isShow === void 0) { isShow = false; }
        /** @type {?} */
        var str = isShow ? '' : 'none';
        /** @type {?} */
        var clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    UserPerformerComponent.prototype.userTypeChange = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        // 切换类型时，清空users
        this.users = [];
        // 切换类型时，人员类型自动切换成系统用户
        this.orgTypeChange('Sys');
        // 有行政帮助并且切换到变量参与者才显示
        this.userTypeButtonNeedShow = this.hasAdminOrg && data.data.value === 'variable';
    };
    /**
     * @param {?} data
     * @return {?}
     */
    UserPerformerComponent.prototype.clear = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.bindingData = {};
        this.users = [];
        this.variableOrgTypes = [
            { name: '系统用户', value: 'Sys' },
            { name: '行政人员', value: 'Administrative_organization' }
        ];
    };
    /**
     * @param {?} data
     * @return {?}
     */
    UserPerformerComponent.prototype.selectUsers = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        // 固定用户
        if (this.userType === this.userTypeCollection[0].value) {
            this.lookupConfig.getLookupConfig().subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                // 项目配置了自己的帮助时
                if (re.user && re.user.impl) {
                    System.import(re.user.impl)
                        .then((/**
                     * @param {?} moduleFactorys
                     * @return {?}
                     */
                    function (moduleFactorys) {
                        /** @type {?} */
                        var moduleFactory = Object.values(moduleFactorys)[0];
                        /** @type {?} */
                        var moduleRef = moduleFactory.create(_this.injector);
                        moduleRef.instance.showHelp().subscribe((/**
                         * @param {?} data
                         * @return {?}
                         */
                        function (data) {
                            if (data && data.length > 0) {
                                _this.users = data.map((/**
                                 * @param {?} u
                                 * @return {?}
                                 */
                                function (u) {
                                    /** @type {?} */
                                    var user = new UserPerformerEntity(u.id, u.name, 'wf.UserParticipant');
                                    user.orgId = u.orgId;
                                    user.orgName = u.orgName;
                                    user.userType = _this.userTypeCollection[0].value;
                                    return user;
                                }));
                            }
                        }));
                    }));
                }
                else { // 加载默认帮助
                    _this.userHelp.showHelp();
                }
            }));
        }
        else {
            this.showExprHelp();
        }
    };
    /**
     * @return {?}
     */
    UserPerformerComponent.prototype.editConditon = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f, e_7, _g;
        if (this.designerUIState.schemas.length > 0) {
            try {
                for (var _h = __values(this.designerUIState.schemas), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var schema = _j.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_a = _h.return)) _a.call(_h);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerUIState.procInstContext.length > 0) {
            try {
                for (var _k = __values(this.designerUIState.procInstContext), _l = _k.next(); !_l.done; _l = _k.next()) {
                    var variable = _l.value;
                    context.push(variable);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_l && !_l.done && (_b = _k.return)) _b.call(_k);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (this.designerUIState.formalParameterContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _m = __values(this.designerUIState.formalParameterContext), _o = _m.next(); !_o.done; _o = _m.next()) {
                    var variable = _o.value;
                    _loop_1(variable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_o && !_o.done && (_c = _m.return)) _c.call(_m);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.designerUIState.participantContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _p = __values(this.designerUIState.participantContext), _q = _p.next(); !_q.done; _q = _p.next()) {
                    var variable = _q.value;
                    _loop_2(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_q && !_q.done && (_d = _p.return)) _d.call(_p);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _r = __values(this.designerUIState.processVariableContext), _s = _r.next(); !_s.done; _s = _r.next()) {
                    var variable = _s.value;
                    _loop_3(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_s && !_s.done && (_e = _r.return)) _e.call(_r);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            var _loop_4 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _t = __values(this.designerUIState.activityComponentContext), _u = _t.next(); !_u.done; _u = _t.next()) {
                    var variable = _u.value;
                    _loop_4(variable);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_u && !_u.done && (_f = _t.return)) _f.call(_t);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_g = context_1.return)) _g.call(context_1);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.condition);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        function (expressioninfo) {
            _this.condition = expressioninfo;
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    UserPerformerComponent.prototype.usersSelect = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.users = data.map((/**
         * @param {?} u
         * @return {?}
         */
        function (u) {
            /** @type {?} */
            var user = new UserPerformerEntity(u.id, u.name, 'wf.UserParticipant');
            user.orgId = u.sysOrgId;
            user.orgName = u.sysOrgName;
            user.userType = _this.userTypeCollection[0].value;
            return user;
        }));
    };
    /**
     * @return {?}
     */
    UserPerformerComponent.prototype.showExprHelp = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var e_8, _a, e_9, _b, e_10, _c, e_11, _d;
        if (this.designerUIState.schemas.length > 0) {
            try {
                for (var _e = __values(this.designerUIState.schemas), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var schema = _f.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_8) throw e_8.error; }
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerUIState.participantContext.length > 0) {
            try {
                for (var _g = __values(this.designerUIState.participantContext), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var variable = _h.value;
                    context.push(variable);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            var _loop_5 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _j = __values(this.designerUIState.processVariableContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    _loop_5(variable);
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_10) throw e_10.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_2 = __values(context), context_2_1 = context_2.next(); !context_2_1.done; context_2_1 = context_2.next()) {
                    var v = context_2_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (context_2_1 && !context_2_1.done && (_d = context_2.return)) _d.call(context_2);
                }
                finally { if (e_11) throw e_11.error; }
            }
        }
        if (this.users.length > 0) {
            this.expr.addExpressionText(this.users[0].performerId);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        function (expressioninfo) {
            /** @type {?} */
            var user = new UserPerformerEntity(expressioninfo, '', 'wf.UserParticipant');
            user.tag = 'expression';
            user.performerName = _this.variableParticipantName(expressioninfo);
            user.userType = _this.userTypeCollection[1].value;
            if (_this.variableParticipantName(expressioninfo) === '') {
                _this.message.error('行政人员类型不能使用上下文变量');
                _this.users = [];
            }
            else {
                _this.users = [user];
            }
            if (user.performerId.indexOf("GetContextParameter") >= 0) { // 根据表达式中的函数名判断是否使用的是上下文变量
                _this.variableOrgTypes = [
                    { name: '系统用户', value: 'Sys' }
                ];
            }
            else {
                _this.variableOrgTypes = [
                    { name: '系统用户', value: 'Sys' },
                    { name: '行政人员', value: 'Administrative_organization' }
                ];
            }
        }));
    };
    /**
     * @return {?}
     */
    UserPerformerComponent.prototype.getPerformers = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.users.map((/**
         * @param {?} user
         * @return {?}
         */
        function (user) {
            if (user.orgId === undefined) {
                user.orgType = _this.curOrgType;
                return user;
            }
        }));
        if (this.condition) {
            this.users = this.users.map((/**
             * @param {?} user
             * @return {?}
             */
            function (user) {
                user.condition = _this.condition;
                return user;
            }));
        }
        return this.users;
    };
    /**
     * @private
     * @param {?} expr
     * @return {?}
     */
    UserPerformerComponent.prototype.variableParticipantName = /**
     * @private
     * @param {?} expr
     * @return {?}
     */
    function (expr) {
        var e_12, _a, e_13, _b;
        try {
            for (var _c = __values(this.designerUIState.participantContext), _d = _c.next(); !_d.done; _d = _c.next()) {
                var c = _d.value;
                if (expr.indexOf(c.key) > -1) {
                    if (this.curOrgType !== 'Sys') { // 行政人员类型不允许使用上下文变量
                        return '';
                    }
                    return c.name;
                }
            }
        }
        catch (e_12_1) { e_12 = { error: e_12_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_12) throw e_12.error; }
        }
        try {
            for (var _e = __values(this.designerUIState.processVariableContext), _f = _e.next(); !_f.done; _f = _e.next()) {
                var c = _f.value;
                if (expr.indexOf(c.key) > -1) {
                    return c.name;
                }
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_13) throw e_13.error; }
        }
        return '业务字段';
    };
    /**
     * @param {?} data
     * @return {?}
     */
    UserPerformerComponent.prototype.orgTypeChange = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data === 'Sys') {
            this.curOrgType = this.variableOrgTypes[0].value;
        }
        else {
            this.curOrgType = this.variableOrgTypes[1].value;
        }
    };
    UserPerformerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-user-performer',
                    template: "<div class=\"d-flex flex-fill farris-overflow-y-auto p-md-2\">\r\n  <form style=\"background: #F0F3F6; width: 100%;\" >\r\n    <div class=\"d-flex m-2 flex-column w-100\">\r\n      <div class=\"d-flex flex-column mx-5 my-4\" style=\"background: #FFF;\">\r\n        <div class=\"farris-form form-inline  farris-form-inline mr-5 my-2\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u7528\u6237\u7C7B\u578B</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-combo-list [(ngModel)]=\"userType\" name=\"userType\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                    [valueField]=\"'value'\" [data]=\"userTypeCollection\" [panelHeight]=\"60\" (selectChange)='userTypeChange($event)'>\r\n                  </farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u7528\u6237</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div #inputGroup class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [value]=\"users | usersName \" name=\"users\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                        (click)=\"clear($event)\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span class=\"input-group-text\" (click)=\"selectUsers($event)\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\" [ngStyle]=\"{'visibility' : userTypeButtonNeedShow ? 'visible' : 'hidden'}\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u4EBA\u5458\u7C7B\u578B</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-radiogroup [data]=\"variableOrgTypes\" [horizontal]=\"true\"\r\n                                     [(ngModel)]=\"curOrgType\" name=\"referObject\"\r\n                                     (changeValue)=\"orgTypeChange($event)\"\r\n                  ></farris-radiogroup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex flex-column mx-5\" style=\"background: #FFF;\">\r\n        <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u542F\u7528\u6761\u4EF6</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"condition\" name=\"conditon\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span class=\"input-group-text\" (click)=\"editConditon()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n\r\n<sys-farris-grid-lookup #userHelp style=\"display: none;\" [singleSelect]=\"false\" [displayTxt]=\"bindingData.name\"\r\n  [pagination]=\"true\" [pageSize]=\"20\" [title]=\"'\u7CFB\u7EDF\u7528\u6237'\" [sourceType]=\"'user'\" (afterConfirm)=\"usersSelect($event)\"\r\n  [bindingData]=\"bindingData\" [filter]=\"{notGetCurrentUser:false}\" [typeMode]=\"1\">\r\n</sys-farris-grid-lookup>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    UserPerformerComponent.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: Injector },
        { type: PerformerConfigService },
        { type: NgZone },
        { type: HttpService },
        { type: MessagerService }
    ]; };
    UserPerformerComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        userHelp: [{ type: ViewChild, args: [SysFarrisLookupComponent,] }],
        inputGroup: [{ type: ViewChild, args: ['inputGroup',] }]
    };
    return UserPerformerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PositionPerformerEntity = /** @class */ (function (_super) {
    __extends(PositionPerformerEntity, _super);
    function PositionPerformerEntity() {
        return _super.call(this) || this;
    }
    return PositionPerformerEntity;
}(PerformerEntity));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PositionPerformerComponent = /** @class */ (function () {
    function PositionPerformerComponent(http, designerUIState, expr, ngZone) {
        this.http = http;
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.ngZone = ngZone;
        this.cls = 'd-flex flex-fill h-100';
        this.showClearButton = false;
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.positionTypes = [
            { value: '0', text: '组织岗' },
            { value: '1', text: '通用岗' }
        ];
        this.filter = {};
        this.position = new PositionPerformerEntity();
    }
    /**
     * @return {?}
     */
    PositionPerformerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    PositionPerformerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.inputGroup.nativeElement.addEventListener('mouseenter', _this.onMouseEnter.bind(_this));
            _this.inputGroup.nativeElement.addEventListener('mouseleave', _this.onMouseLeave.bind(_this));
        }));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PositionPerformerComponent.prototype.onMouseEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PositionPerformerComponent.prototype.onMouseLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    };
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    PositionPerformerComponent.prototype.toggleClearIcon = /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    function (event, isShow) {
        if (isShow === void 0) { isShow = false; }
        /** @type {?} */
        var str = isShow ? '' : 'none';
        /** @type {?} */
        var clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    };
    /**
     * @return {?}
     */
    PositionPerformerComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.position.performerId = null;
        this.position.performerName = null;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PositionPerformerComponent.prototype.positionTypeChange = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data.value === '0') {
            this.filter = { positionType: 0 };
        }
        else {
            this.filter = { positionType: 1 };
        }
        this.clear();
        this.position.orgType = null;
        this.position.orgId = null;
    };
    /**
     * @return {?}
     */
    PositionPerformerComponent.prototype.selectOrganition = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var e_1, _a;
        if (this.position.positionType === '1') {
            if (this.designerUIState.schemas.length > 0) {
                try {
                    for (var _b = __values(this.designerUIState.schemas), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var schema = _c.value;
                        this.expr.addSchema('Schema', schema);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                    /** @type {?} */
                    var entityType = this.designerUIState.schemas[0].entityTypes[0];
                    this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
                }
            }
            this.expr.addExpressionText(this.position.orgId);
            this.expr.buildExpression().then((/**
             * @param {?} expr
             * @return {?}
             */
            function (expr) {
                _this.position.orgId = expr;
            }));
        }
    };
    /**
     * @return {?}
     */
    PositionPerformerComponent.prototype.selectPosition = /**
     * @return {?}
     */
    function () {
        this.posiHelp.showHelp();
    };
    /**
     * @return {?}
     */
    PositionPerformerComponent.prototype.editCondition = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var e_2, _a, e_3, _b, e_4, _c, e_5, _d, e_6, _e, e_7, _f, e_8, _g;
        if (this.designerUIState.schemas.length > 0) {
            try {
                for (var _h = __values(this.designerUIState.schemas), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var schema = _j.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_a = _h.return)) _a.call(_h);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerUIState.procInstContext.length > 0) {
            try {
                for (var _k = __values(this.designerUIState.procInstContext), _l = _k.next(); !_l.done; _l = _k.next()) {
                    var variable = _l.value;
                    context.push(variable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_l && !_l.done && (_b = _k.return)) _b.call(_k);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.designerUIState.formalParameterContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _m = __values(this.designerUIState.formalParameterContext), _o = _m.next(); !_o.done; _o = _m.next()) {
                    var variable = _o.value;
                    _loop_1(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_o && !_o.done && (_c = _m.return)) _c.call(_m);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.designerUIState.participantContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _p = __values(this.designerUIState.participantContext), _q = _p.next(); !_q.done; _q = _p.next()) {
                    var variable = _q.value;
                    _loop_2(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_q && !_q.done && (_d = _p.return)) _d.call(_p);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _r = __values(this.designerUIState.processVariableContext), _s = _r.next(); !_s.done; _s = _r.next()) {
                    var variable = _s.value;
                    _loop_3(variable);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_s && !_s.done && (_e = _r.return)) _e.call(_r);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            var _loop_4 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _t = __values(this.designerUIState.activityComponentContext), _u = _t.next(); !_u.done; _u = _t.next()) {
                    var variable = _u.value;
                    _loop_4(variable);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_u && !_u.done && (_f = _t.return)) _f.call(_t);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_g = context_1.return)) _g.call(context_1);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.position.condition);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        function (expressioninfo) {
            _this.position.condition = expressioninfo;
        }));
    };
    /**
     * @param {?} re
     * @return {?}
     */
    PositionPerformerComponent.prototype.orgTypeChange = /**
     * @param {?} re
     * @return {?}
     */
    function (re) {
        this.position.orgType = re.data.value;
    };
    /**
     * @return {?}
     */
    PositionPerformerComponent.prototype.clearOrgType = /**
     * @return {?}
     */
    function () {
        this.position.orgType = null;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PositionPerformerComponent.prototype.positionsSelect = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data) {
            this.position.performerId = data.id;
            this.position.performerName = data.name;
            this.position.type = 'wf.PositionParticipant';
            if (!this.position.positionType) {
                this.position.positionType = data.posType + '';
                this.filter = {
                    positionType: data.posType
                };
            }
        }
    };
    /**
     * @return {?}
     */
    PositionPerformerComponent.prototype.getPerformers = /**
     * @return {?}
     */
    function () {
        return this.position;
    };
    PositionPerformerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-position-performer',
                    template: "<div class=\"d-flex flex-fill farris-overflow-y-auto p-md-2\">\r\n  <form style=\"background: #F0F3F6; width: 100%;\">\r\n    <div class=\"d-flex m-2 flex-column w-100\">\r\n      <div class=\"d-flex flex-column mx-5 my-4\" style=\"background: #FFF;\">\r\n        <div class=\"farris-form form-inline  farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-3\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <!-- <span class=\"farris-label-info text-danger\">*</span> -->\r\n                  <span class=\"farris-label-text\">\u5C97\u4F4D\u7C7B\u578B</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-combo-list [(ngModel)]=\"position.positionType\" name=\"positionType\" [panelHeight]=\"'auto'\" [idField]=\"'value'\"\r\n                    [textField]=\"'text'\" [data]=\"positionTypes\" (valueChange)=\"positionTypeChange($event)\"\r\n                    [panelHeight]=\"'auto'\" [enableClear]=\"false\">\r\n                  </farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u5C97\u4F4D</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div #inputGroup class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"position.performerName\" name=\"positionName\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\" (click)=\"clear()\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span class=\"input-group-text\" (click)=\"selectPosition()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <!-- <span *ngIf=\"filter.positionType===1\" class=\"farris-label-info text-danger\">*</span> -->\r\n                  <span class=\"farris-label-text\">\u7EC4\u7EC7\u7C7B\u578B</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-combo-list [(ngModel)]=\"position.orgType\" name=\"orgType\" [idField]=\"'value'\" [textField]=\"'text'\" [valueField]=\"'value'\"\r\n                    [data]=\"designerUIState.orgTypeCollection\" [panelHeight]=\"'auto'\" (clear)=\"clearOrgType()\"\r\n                    (selectChange)='orgTypeChange($event)' [readonly]=\"!(position.positionType==='1')\" [placeholder]=\"position.positionType==='1'?'\u8BF7\u9009\u62E9':''\">\r\n                  </farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-3\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <!-- <span *ngIf=\"filter.positionType===1\" class=\"farris-label-info text-danger\">*</span> -->\r\n                  <span class=\"farris-label-text\">\u7EC4\u7EC7</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <!-- <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"position.orgId\" name=\"organization\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span class=\"input-group-text\" (click)=\"selectOrganition()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div> -->\r\n                  <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" [enableClear]=\"false\"\r\n                    [showButtonWhenDisabled]=\"false\" [readonly]=\"!(position.positionType==='1')\"\r\n                    [(ngModel)]=\"position.orgId\" name=\"organization\" [placeholder]=\"position.positionType==='1'?'\u8BF7\u9009\u62E9':''\"\r\n                    [editable]=\"false\" (clickHandle)=\"selectOrganition()\" [groupText]=\"groupIcon\"></input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex flex-column mx-5\" style=\"background: #FFF;\">\r\n        <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-3\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u542F\u7528\u6761\u4EF6</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"this.position.condition\" name=\"conditon\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span class=\"input-group-text\" (click)=\"editCondition()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n\r\n<sys-farris-grid-lookup #posiHelp style=\"display: none;\" [singleSelect]=\"true\"\r\n  [pagination]=\"true\" [pageSize]=\"20\" [title]=\"'\u7CFB\u7EDF\u5C97\u4F4D'\" [sourceType]=\"'position'\"\r\n  (afterConfirm)=\"positionsSelect($event)\" [filter]=\"filter\">\r\n</sys-farris-grid-lookup>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PositionPerformerComponent.ctorParameters = function () { return [
        { type: HttpService },
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: NgZone }
    ]; };
    PositionPerformerComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        posiHelp: [{ type: ViewChild, args: [SysFarrisLookupComponent,] }],
        inputGroup: [{ type: ViewChild, args: ['inputGroup',] }]
    };
    return PositionPerformerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComponentPerformerService = /** @class */ (function () {
    function ComponentPerformerService(http) {
        this.http = http;
    }
    /**
     * @param {?} helpId
     * @param {?} su
     * @param {?} pageIndex
     * @param {?} pageSiza
     * @param {?=} search
     * @return {?}
     */
    ComponentPerformerService.prototype.getLookUpData = /**
     * @param {?} helpId
     * @param {?} su
     * @param {?} pageIndex
     * @param {?} pageSiza
     * @param {?=} search
     * @return {?}
     */
    function (helpId, su, pageIndex, pageSiza, search) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/dtProcDefs/getHelpData?helpId=" + helpId + "&pageIndex=" + pageIndex + "&pageSize=" + pageSiza;
        if (search) {
            url += "&searchValue=" + JSON.stringify(search);
        }
        return this.http.get(url);
    };
    /**
     * @param {?} helpId
     * @param {?} su
     * @return {?}
     */
    ComponentPerformerService.prototype.getHelpMetaData = /**
     * @param {?} helpId
     * @param {?} su
     * @return {?}
     */
    function (helpId, su) {
        /** @type {?} */
        var url = "/api/runtime/lcm/v1.0/rt-metadatas/" + helpId;
        return this.http.get(url);
    };
    ComponentPerformerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ComponentPerformerService.ctorParameters = function () { return [
        { type: HttpService }
    ]; };
    return ComponentPerformerService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComponentPerformer = /** @class */ (function () {
    function ComponentPerformer() {
        this.id = ProcessDeUtil.GenerateElementId();
    }
    return ComponentPerformer;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComponentPerformerComponent = /** @class */ (function () {
    function ComponentPerformerComponent(formBuilder, designerState, expr, resolver, injector, sessionSrc, modalService, componentService, ngZone, service, util) {
        var _this = this;
        this.formBuilder = formBuilder;
        this.designerState = designerState;
        this.expr = expr;
        this.resolver = resolver;
        this.injector = injector;
        this.sessionSrc = sessionSrc;
        this.modalService = modalService;
        this.componentService = componentService;
        this.ngZone = ngZone;
        this.service = service;
        this.util = util;
        this.cls = 'farris-main-area flex-column';
        this.showClearButton = false;
        this.columns = [
            { field: 'code', width: 60, title: '编号' },
            { field: 'name', width: 60, title: '名称' },
            { field: 'description', width: 60, title: '描述', showTips: true },
            {
                field: 'valueText', width: 100, title: '参数值',
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            _this.showExprHelp(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            var e_1, _a;
                            // 清理valueText，也应该清理value
                            e.rowData.value = '';
                            try {
                                for (var _b = __values(_this.component.actualParameters), _c = _b.next(); !_c.done; _c = _b.next()) {
                                    var p = _c.value;
                                    if (p.code === e.rowId) {
                                        p.value = '';
                                    }
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                        })
                    }
                }
            }
        ];
        this.helpInfo = {
            helpId: '',
            su: '',
            columns: [],
            displayType: 'List',
            items: [],
            pageInfo: {
                pageIndex: 1,
                pageList: [10, 20, 30, 50],
                pageSize: 20
            },
            search: { category: 'search' },
            title: '帮助',
            total: 100,
            fieldInfo: {
                idField: 'id',
                textField: 'name',
                valueField: 'id'
            }
        };
        this.beforeEdit = (/**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            /** @type {?} */
            var rowData = (/** @type {?} */ (param.rowData));
            _this.curParameter = rowData;
            switch (rowData.fetchValueMode) {
                case ParameterFetchValueMode.express:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                _this.showExprHelp(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                var e_2, _a;
                                // 清理valueText，也应该清理value
                                e.rowData.value = '';
                                try {
                                    for (var _b = __values(_this.component.actualParameters), _c = _b.next(); !_c.done; _c = _b.next()) {
                                        var p = _c.value;
                                        if (p.code === e.rowId) {
                                            p.value = '';
                                        }
                                    }
                                }
                                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                finally {
                                    try {
                                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                    }
                                    finally { if (e_2) throw e_2.error; }
                                }
                            })
                        }
                    };
                    break;
                case ParameterFetchValueMode.none:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                _this.showExprHelp(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                var e_3, _a;
                                // 清理valueText，也应该清理value
                                e.rowData.value = '';
                                try {
                                    for (var _b = __values(_this.component.actualParameters), _c = _b.next(); !_c.done; _c = _b.next()) {
                                        var p = _c.value;
                                        if (p.code === e.rowId) {
                                            p.value = '';
                                        }
                                    }
                                }
                                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                finally {
                                    try {
                                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                    }
                                    finally { if (e_3) throw e_3.error; }
                                }
                            })
                        }
                    };
                    break;
                case ParameterFetchValueMode.const:
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                    break;
                case ParameterFetchValueMode.enum:
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                    break;
                case ParameterFetchValueMode.help:
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                _this.cell = e;
                                _this.helpInfo.helpId = ((/** @type {?} */ (rowData.fetchValueSetting))).helpId;
                                _this.helpInfo.su = ((/** @type {?} */ (rowData.fetchValueSetting))).serviceUnit;
                                _this.helpInfo.pageInfo = {
                                    pageIndex: 1,
                                    pageList: [10, 20, 30, 50],
                                    pageSize: 20
                                };
                                _this.helpInfo.search = { category: 'search' };
                                _this.getHelpInfo();
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                var e_4, _a;
                                // 清理valueText，也应该清理value
                                e.rowData.value = '';
                                try {
                                    for (var _b = __values(_this.component.actualParameters), _c = _b.next(); !_c.done; _c = _b.next()) {
                                        var p = _c.value;
                                        if (p.code === e.rowId) {
                                            p.value = '';
                                        }
                                    }
                                }
                                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                                finally {
                                    try {
                                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                    }
                                    finally { if (e_4) throw e_4.error; }
                                }
                            })
                        }
                    };
                    break;
            }
            return of(true);
        });
        this.afterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        function (rowIndex, rowData, column) {
            return of(true);
        });
        this.dictPicked = (/**
         * @param {?} rowData
         * @return {?}
         */
        function (rowData) {
            var e_5, _a;
            if (_this.cell) {
                _this.cell.formControl.setValue(_this.util.getValue(rowData, _this.helpInfo.fieldInfo.textField));
                _this.cell.instance.cd.detectChanges();
                _this.cell.rowData.value = _this.util.getValue(rowData, _this.helpInfo.fieldInfo.valueField);
                try {
                    for (var _b = __values(_this.component.actualParameters), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var p = _c.value;
                        if (p.code === _this.cell.rowId) {
                            p.value = _this.util.getValue(rowData, _this.helpInfo.fieldInfo.valueField);
                        }
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
                return of(true);
            }
        });
    }
    Object.defineProperty(ComponentPerformerComponent.prototype, "component", {
        get: /**
         * @return {?}
         */
        function () {
            return this.componentPerformer;
        },
        set: /**
         * @param {?} cmp
         * @return {?}
         */
        function (cmp) {
            var _this = this;
            if (cmp && cmp.methodCode) {
                this.service.getHelpMetaData(cmp.metadataId, '').subscribe((/**
                 * @param {?} re
                 * @return {?}
                 */
                function (re) {
                    /** @type {?} */
                    var c = JSON.parse(re.content);
                    /** @type {?} */
                    var operation = c.operations.find((/**
                     * @param {?} o
                     * @return {?}
                     */
                    function (o) { return o.code === cmp.methodCode; }));
                    if (operation) {
                        cmp.actualParameters = cmp.actualParameters.map((/**
                         * @param {?} a
                         * @return {?}
                         */
                        function (a) {
                            /** @type {?} */
                            var p = operation.parameters.find((/**
                             * @param {?} i
                             * @return {?}
                             */
                            function (i) { return i.code === a.code; }));
                            if (p) {
                                return {
                                    code: a.code,
                                    name: p.name,
                                    value: a.value,
                                    valueText: a.valueText ? a.valueText : a.value,
                                    description: p.description,
                                    tag: a.tag,
                                    fetchValueMode: p.fetchValueMode,
                                    fetchValueSetting: p.fetchValueSetting
                                };
                            }
                            else {
                                throw new Error('当前构件方法参数不一致，请更新！');
                            }
                        }));
                        _this.componentPerformer = cmp;
                    }
                    else {
                        throw new Error('当前构件已不存在此方法，请更新！');
                    }
                }));
            }
            else {
                this.componentPerformer = new ComponentPerformer();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ComponentPerformerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ComponentPerformerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.inputGroup.nativeElement.addEventListener('mouseenter', _this.onMouseEnter.bind(_this));
            _this.inputGroup.nativeElement.addEventListener('mouseleave', _this.onMouseLeave.bind(_this));
        }));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ComponentPerformerComponent.prototype.onMouseEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ComponentPerformerComponent.prototype.onMouseLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    };
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    ComponentPerformerComponent.prototype.toggleClearIcon = /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    function (event, isShow) {
        if (isShow === void 0) { isShow = false; }
        /** @type {?} */
        var str = isShow ? '' : 'none';
        /** @type {?} */
        var clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ComponentPerformerComponent.prototype.selectChanged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.curParameter = event.data;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ComponentPerformerComponent.prototype.endEdit = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // 文本框编辑同时修改value
        if (e.rowData.fetchValueMode === ParameterFetchValueMode.const || e.rowData.fetchValueMode === ParameterFetchValueMode.enum) {
            this.component.actualParameters[e.rowIndex].value = this.component.actualParameters[e.rowIndex].valueText;
        }
    };
    /**
     * @return {?}
     */
    ComponentPerformerComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.componentPerformer.name = '';
        this.componentPerformer.metadataId = '';
        this.componentPerformer.methodCode = '';
        this.componentPerformer.methodName = '';
        this.componentPerformer.condition = '';
        this.componentPerformer.actualParameters = new Array();
    };
    /**
     * @return {?}
     */
    ComponentPerformerComponent.prototype.selectComponent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.typeList = 'WebServiceComponent'; // 目前只能根据元数据类型过滤，后续添加标签过滤
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            try {
                /** @type {?} */
                var meta = $event.metadata;
                _this.openComponentSelectorNew(meta.id, _this.sessionSrc.getUserSessionId());
            }
            catch (_a) {
                console.log('$event', $event);
                throw new Error('获取解析构件出错' + $event);
            }
        }));
        /** @type {?} */
        var modalConfig = {
            title: '构件选择',
            width: 980,
            height: 548,
            showButtons: false
        };
        /** @type {?} */
        var dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) { return dialog.close(); }));
    };
    /**
     * @private
     * @param {?} metadataId
     * @param {?} sessionId
     * @return {?}
     */
    ComponentPerformerComponent.prototype.openComponentSelectorNew = /**
     * @private
     * @param {?} metadataId
     * @param {?} sessionId
     * @return {?}
     */
    function (metadataId, sessionId) {
        var _this = this;
        this.componentService.openSelector(metadataId, sessionId).subscribe((/**
         * @param {?} selectorResult
         * @return {?}
         */
        function (selectorResult) {
            selectorResult.confirmEvent.subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                if (result) {
                    _this.component.name = result.name;
                    _this.component.metadataId = result.id;
                    _this.component.methodCode = result.operations[0].code;
                    _this.component.methodName = result.operations[0].name;
                    _this.component.actualParameters = [];
                    if (result.operations[0].parameters && result.operations[0].parameters.length > 0) {
                        _this.component.actualParameters = result.operations[0].parameters
                            .map((/**
                         * @param {?} p
                         * @return {?}
                         */
                        function (p) { return (/** @type {?} */ (({
                            code: p.code,
                            name: p.name,
                            value: '',
                            valueText: '',
                            description: p.description,
                            fetchValueMode: p.fetchValueMode,
                            fetchValueSetting: p.fetchValueSetting
                        }))); }));
                    }
                }
            }));
        }));
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ComponentPerformerComponent.prototype.showExprHelp = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        var e_6, _a, e_7, _b, e_8, _c, e_9, _d, e_10, _e, e_11, _f;
        if (this.designerState.schemas.length > 0) {
            try {
                for (var _g = __values(this.designerState.schemas), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var schema = _h.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_a = _g.return)) _a.call(_g);
                }
                finally { if (e_6) throw e_6.error; }
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerState.procInstContext.length > 0) {
            try {
                for (var _j = __values(this.designerState.procInstContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    context.push(variable);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _l = __values(this.designerState.formalParameterContext), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var variable = _m.value;
                    _loop_1(variable);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _o = __values(this.designerState.participantContext), _p = _o.next(); !_p.done; _p = _o.next()) {
                    var variable = _p.value;
                    _loop_2(variable);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _q = __values(this.designerState.processVariableContext), _r = _q.next(); !_r.done; _r = _q.next()) {
                    var variable = _r.value;
                    _loop_3(variable);
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (_r && !_r.done && (_e = _q.return)) _e.call(_q);
                }
                finally { if (e_10) throw e_10.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_f = context_1.return)) _f.call(context_1);
                }
                finally { if (e_11) throw e_11.error; }
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 默认打开高级表达式编辑器
        this.expr.addExpressionText(e.instance.value);
        this.expr.buildExpression().then((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            var e_12, _a;
            if (d) {
                e.formControl.setValue(d);
                e.instance.cd.detectChanges();
                e.rowData.value = d;
                try {
                    for (var _b = __values(_this.component.actualParameters), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var p = _c.value;
                        if (p.code === e.rowId) {
                            p.value = d;
                        }
                    }
                }
                catch (e_12_1) { e_12 = { error: e_12_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_12) throw e_12.error; }
                }
            }
        }));
    };
    /**
     * @return {?}
     */
    ComponentPerformerComponent.prototype.getPerformers = /**
     * @return {?}
     */
    function () {
        this.grid.endCellEdit();
        console.log(this.component);
        return this.component;
    };
    /**
     * @private
     * @return {?}
     */
    ComponentPerformerComponent.prototype.getHelpInfo = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        forkJoin(this.service.getHelpMetaData(this.helpInfo.helpId, this.helpInfo.su), this.service.getLookUpData(this.helpInfo.helpId, this.helpInfo.su, this.helpInfo.pageInfo.pageIndex, this.helpInfo.pageInfo.pageSize, this.helpInfo.search)).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            if (re[0]) {
                /** @type {?} */
                var meta = re[0];
                /** @type {?} */
                var help = (/** @type {?} */ (JSON.parse(meta.content)));
                _this.helpInfo.columns = help.dataSource.columns;
                _this.helpInfo.displayType = help.displayType;
                _this.helpInfo.fieldInfo = {
                    idField: help.idField,
                    valueField: help.valueField,
                    textField: help.textField
                };
            }
            else {
                throw new Error('帮助元数据不存在！');
            }
            if (re[1]) {
                /** @type {?} */
                var helpData = re[1];
                _this.helpInfo.items = helpData.items;
                _this.helpInfo.title = helpData.title;
                _this.helpInfo.total = helpData.total;
                _this.lookup.showDialog();
            }
            else {
                throw new Error('获取帮助数据源失败！');
            }
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ComponentPerformerComponent.prototype.pagerChanged = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (data) {
            this.helpInfo.pageInfo.pageIndex = data.pageIndex;
            this.helpInfo.pageInfo.pageSize = data.pageSize;
            this.service.getLookUpData(this.helpInfo.helpId, this.helpInfo.su, this.helpInfo.pageInfo.pageIndex, this.helpInfo.pageInfo.pageSize, this.helpInfo.search)
                .subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                _this.helpInfo.items = re.items;
                _this.helpInfo.title = re.title;
                _this.helpInfo.total = re.total;
                _this.lookup.loadData(re);
            }));
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ComponentPerformerComponent.prototype.search = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        console.log(data);
        this.helpInfo.search = { category: 'search' };
        if (data) {
            /** @type {?} */
            var searchInfo = {
                searchField: data.field || data.search.field,
                searchValue: data.value || data.search.value
            };
            this.helpInfo.search = Object.assign(this.helpInfo.search, searchInfo);
            this.service.getLookUpData(this.helpInfo.helpId, this.helpInfo.su, this.helpInfo.pageInfo.pageIndex, this.helpInfo.pageInfo.pageSize, this.helpInfo.search)
                .subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                _this.helpInfo.items = re.items;
                _this.helpInfo.title = re.title;
                _this.helpInfo.total = re.total;
                _this.lookup.loadData(re);
            }));
        }
    };
    ComponentPerformerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-component-performer',
                    template: "\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <form class=\"farris-form farris-card-content-bg farris-card-section mx-2\">\r\n        <div class=\"d-flex flex-wrap flex-column mb-2 pr-4\">\r\n          <div class=\"farris-form-controls-inline farris-form-auto mb-2\">\r\n            <div class=\"farris-group-wrap mx-3\">\r\n              <div class=\"form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u6784\u4EF6\u540D\u79F0</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-2\">\r\n                  <input type=\"text\" class=\"k-textbox form-control\" name=\"name\"\r\n                    [(ngModel)]=\"component.name\" />\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"farris-form-controls-inline farris-form-auto\">\r\n            <div class=\"farris-group-wrap mx-3\">\r\n              <div class=\"form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u6784\u4EF6\u9009\u62E9</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-2\">\r\n                  <div #inputGroup class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"component.methodCode\" name=\"methodCode\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\" (click)=\"clear()\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span class=\"input-group-text\" (click)=\"selectComponent()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <farris-tabs class=\"f-utils-fill\" #params [value]=\"'params'\" [contentFill]=\"true\">\r\n        <farris-tab title=\"\u53C2\u6570\u5217\u8868\" [id]=\"'params'\">\r\n          <ng-template #content>\r\n            <div class=\"f-utils-fill-flex-column h-100\">\r\n              <farris-datagrid #grid [data]=\"component.actualParameters\" [columns]=\"columns\" [idField]=\"'code'\" [fit]=\"true\"\r\n                [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n                [multiSelect]=\"false\" [afterEdit]=\"afterEdit\" [beforeEdit]=\"beforeEdit\" \r\n                (selectChanged)=\"selectChanged($event)\" (endEdit)=\"endEdit($event)\"></farris-datagrid>\r\n            </div>\r\n          </ng-template>\r\n        </farris-tab>\r\n      </farris-tabs>\r\n    </div>\r\n\r\n<farris-lookup-grid style=\"display: none;\" [items]=\"helpInfo.items\" [columns]=\"helpInfo.columns\"  [resizable]=\"true\" [singleSelect]=\"true\" \r\n  [idField]=\"helpInfo.fieldInfo.idField\" [textField]=\"helpInfo.fieldInfo.textField\" [valueField]=\"helpInfo.fieldInfo.valueField\" \r\n  [pagination]=\"true\"  [pageIndex]=\"helpInfo.pageInfo.pageIndex\" [pageSize]=\"helpInfo.pageInfo.pageSize\" [pageList]=\"helpInfo.pageInfo.pageList\" \r\n  [total]=\"helpInfo.total\" [title]=\"helpInfo.title\" [displayType]=\"helpInfo.displayType\" [dictPicked]=\"dictPicked\" [remoteSearch]='false'\r\n  (pagerChanged)=\"pagerChanged($event)\" (search)=\"search($event)\">\r\n</farris-lookup-grid>",
                    providers: [ComponentPerformerService],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ComponentPerformerComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: SessionService },
        { type: BsModalService },
        { type: CommonComponentUiRTService },
        { type: NgZone },
        { type: ComponentPerformerService },
        { type: ProcessDeUtil }
    ]; };
    ComponentPerformerComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        grid: [{ type: ViewChild, args: [DatagridComponent,] }],
        lookup: [{ type: ViewChild, args: [LookupGridComponent,] }],
        inputGroup: [{ type: ViewChild, args: ['inputGroup',] }],
        component: [{ type: Input }]
    };
    return ComponentPerformerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ReportingLineDataEntity = /** @class */ (function (_super) {
    __extends(ReportingLineDataEntity, _super);
    function ReportingLineDataEntity(id, name, type) {
        return _super.call(this, id, name, type) || this;
    }
    return ReportingLineDataEntity;
}(PerformerEntity));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WfReportDefHelpService = /** @class */ (function () {
    function WfReportDefHelpService(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    WfReportDefHelpService.prototype.getData = /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    function (url, params) {
        var e_1, _a;
        /** @type {?} */
        var customData = params.customData;
        /** @type {?} */
        var index = params.pageIndex || 1;
        /** @type {?} */
        var size = params.pageSize || 20;
        /** @type {?} */
        var searchValue = JSON.parse(params.searchValue);
        if (searchValue.searchValue || customData.filter) {
            /** @type {?} */
            var query = '{';
            if (searchValue.searchValue) {
                if (searchValue.searchField === '*') {
                    query += "\"codeOrNameLike\":\"" + searchValue.searchValue + "\",";
                }
                else {
                    query += "\"" + searchValue.searchField + "\":\"" + searchValue.searchValue + "\",";
                }
            }
            if (customData.filter) {
                /** @type {?} */
                var keys = Object.keys(customData.filter);
                if (keys && keys.length > 0) {
                    try {
                        for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                            var key = keys_1_1.value;
                            if (customData.filter[key]) {
                                query += "\"" + key + "\":\"" + customData.filter[key] + "\",";
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            }
            if (query.substr(query.length - 1, 1) === ',') {
                query = query.substring(0, query.length - 1);
            }
            query += '}';
            query = encodeURIComponent(query);
            query += "&pageIndex=" + index + "&pageSize=" + size;
            url += '?pageFilter=' + query;
        }
        else {
            url += "?pageIndex=" + index + "&pageSize=" + size;
        }
        return this.http.get(url).pipe(map((/**
         * @param {?} re
         * @return {?}
         */
        function (re) { return ({
            items: re.content,
            total: re.totalElements,
            pageInfo: {
                pageIndex: re.pageable.pageNumber + 1,
                pageSize: re.pageable.pageSize,
                pageList: [20, 40, 60, 80, 100],
                enablePager: true
            }
        }); })));
    };
    WfReportDefHelpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    WfReportDefHelpService.ctorParameters = function () { return [
        { type: HttpService }
    ]; };
    return WfReportDefHelpService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WfReportDefHelpComponent = /** @class */ (function () {
    function WfReportDefHelpComponent() {
        var _this = this;
        /**
         * 宽度
         */
        this.width = 550;
        /**
         * 只读
         */
        this.disabled = false;
        /**
         * 是否单选
         */
        this.singleSelect = true;
        /**
         * 是否分页，默认true
         */
        this.pagination = true;
        /**
         * 首次加载第几页，默认1
         */
        this.pageIndex = 1;
        /**
         * 每页加载数，默认20
         */
        this.pageSize = 20;
        /**
         * 过滤条件
         */
        this.filter = {};
        // @Input() beforeClose: (selectData: any) => Observable<PickedResult>;
        /**
         * 帮助选择后事件
         */
        this.afterConfirm = new EventEmitter();
        this.dialogClosed = new EventEmitter();
        this.clear = new EventEmitter();
        this.columns = [];
        /**
         * 帮助前事件,强行传递过滤条件
         */
        this.beforeOpen = (/**
         * @param {?} arg
         * @return {?}
         */
        function (arg) {
            // 把过滤数据和当前的数据传递到service层
            return of({
                showDialog: true, data: {
                    filter: _this.filter
                }
            });
        });
        this.dictPicked = (/**
         * @param {?} arg
         * @return {?}
         */
        function (arg) {
            _this.afterConfirm.next(arg);
            return of({ closeDialog: true });
        });
    }
    /**
     * @return {?}
     */
    WfReportDefHelpComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.columns = [
            { title: '编号', field: 'code', width: '80', searchField: 'code', },
            { title: '名称', field: 'name', width: '100', searchField: 'name', }
        ];
        // this.dataUri = this.uiState.dataUri;
        this.dataUri = '/api/runtime/wf/v1.0/reportingLineDefinitions/query';
        // 必须要有，否则初始选中不起作用
        this.lookUp.mapFields = { id: 'id', name: 'name' };
    };
    /**
     * @param {?} arg
     * @return {?}
     */
    WfReportDefHelpComponent.prototype.afterClear = /**
     * @param {?} arg
     * @return {?}
     */
    function (arg) {
        this.clear.next(arg);
    };
    /** 手动显示帮助 */
    /**
     * 手动显示帮助
     * @return {?}
     */
    WfReportDefHelpComponent.prototype.showHelp = /**
     * 手动显示帮助
     * @return {?}
     */
    function () {
        this.lookUp.showDialog();
    };
    WfReportDefHelpComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-wf-report-def-help',
                    template: "\n    <farris-lookup-grid #lookup\n      [disabled]=\"disabled\"\n      [editable]=\"false\"\n      [bindingData]=\"bindingData\"\n      [(ngModel)]=\"displayTxt\"\n      [columns]=\"columns\"\n      [singleSelect]=\"singleSelect\"\n      [title]=\"title\"\n      [displayType]=\"'List'\"\n      [uri]=\"dataUri\"\n      [idField]=\"'id'\"\n      [pageIndex]=\"pageIndex\"\n      [pageSize]=\"pageSize\"\n      [pagination]=\"pagination\"\n      [valueField]=\"'id'\"\n      [textField]=\"'name'\"\n      (clear)=\"afterClear($event)\"\n      [dialogWidth]=\"width\"\n      [dictPicking]=\"beforeOpen\"\n      [dictPicked]=\"dictPicked\">\n    </farris-lookup-grid>\n  ",
                    providers: [{ provide: ServerSideToken, useClass: WfReportDefHelpService }]
                }] }
    ];
    /** @nocollapse */
    WfReportDefHelpComponent.ctorParameters = function () { return []; };
    WfReportDefHelpComponent.propDecorators = {
        title: [{ type: Input }],
        width: [{ type: Input }],
        sourceType: [{ type: Input }],
        disabled: [{ type: Input }],
        singleSelect: [{ type: Input }],
        pagination: [{ type: Input }],
        pageIndex: [{ type: Input }],
        pageSize: [{ type: Input }],
        displayTxt: [{ type: Input }],
        bindingData: [{ type: Input }],
        filter: [{ type: Input }],
        afterConfirm: [{ type: Output }],
        dialogClosed: [{ type: Output }],
        clear: [{ type: Output }],
        lookUp: [{ type: ViewChild, args: ['lookup',] }]
    };
    return WfReportDefHelpComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ReportingLineComponent = /** @class */ (function () {
    function ReportingLineComponent(http, designerUIState, expr, ngZone) {
        this.http = http;
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.ngZone = ngZone;
        this.cls = 'd-flex flex-fill h-100';
        this.treeFilter = '';
        this.display = 'none';
        this.typeReadOnly = false;
        this.groupIcon2 = '<i class="f-icon f-icon-lookup"></i>';
        this.defName = '';
        /**
         * 汇报关系数据
         */
        this.reportingLineDataEntity = new ReportingLineDataEntity();
        /**
         * 汇报关系定义列表
         */
        this.reportingLineDefinitionList = [];
        this.reportingLineDimension = [];
        this.showClearButton = false;
        this.items = [];
        this.users = [];
        this.departments = [];
        this.pageIndex = 1;
        this.pageSize = 20;
        this.pageList = [10, 20, 30, 50, 100];
        this.total = 0;
        /**
         * 汇报类型显示列
         */
        this.columns = [
            { title: '编号', field: 'code', width: 100 },
            { title: '名称', field: 'name', width: 100 }
        ];
        /**
         *  参与者列表汇报关系显示字段
         */
        this.reportingReferObjects = [
            { name: '组织', value: 'dept' },
            { name: '系统用户', value: 'sysUser' },
            { name: '员工', value: 'employee' }
        ];
        this.curReportingRefer = this.reportingReferObjects[0].value;
        this.getReportingLineType();
    }
    Object.defineProperty(ReportingLineComponent.prototype, "setReportingLineDataEntity", {
        set: /**
         * @param {?} dataEntity
         * @return {?}
         */
        function (dataEntity) {
            var _this = this;
            this.defName = dataEntity.reportingLineDefName;
            this.reportingLineDataEntity = dataEntity;
            /** @type {?} */
            var defUrl = '/api/runtime/wf/v1.0/reportingLineDefinitions/' + dataEntity.reportingLineDefId;
            this.http.get(defUrl).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                var e_1, _a;
                _this.reportingLineDefinition = re;
                _this.designerUIState.dimensions = [
                    { value: 'higherSuperior', text: '间接上级' }
                ];
                // 兼容历史数据
                if (JSON.parse(_this.reportingLineDefinition.dimensions)[0].code !== 'directSuperior') {
                    /** @type {?} */
                    var di = {
                        value: 'directSuperior',
                        text: '直接上级'
                    };
                    _this.designerUIState.dimensions.push(di);
                }
                try {
                    for (var _b = __values(JSON.parse(_this.reportingLineDefinition.dimensions)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var dimension = _c.value;
                        /** @type {?} */
                        var di = {
                            value: dimension.code,
                            text: dimension.name
                        };
                        _this.designerUIState.dimensions.push(di);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }));
            this.users = [dataEntity];
            if (dataEntity.refUserId) {
                this.users[0].performerName = this.variableParticipantName(dataEntity.refUserId);
                this.curReportingRefer = this.reportingReferObjects[1].value;
                this.display = 'block';
            }
            else if (dataEntity.refEmployeeId) {
                this.users[0].performerName = dataEntity.refEmployeeId;
                this.curReportingRefer = this.reportingReferObjects[2].value;
                this.display = 'block';
            }
            else {
                this.curReportingRefer = this.reportingReferObjects[0].value;
            }
            if (dataEntity.reportingLineDefId) {
                this.typeReadOnly = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ReportingLineComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * 获取汇报关系类型
     */
    /**
     * 获取汇报关系类型
     * @return {?}
     */
    ReportingLineComponent.prototype.getReportingLineType = /**
     * 获取汇报关系类型
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var url = '/api/runtime/wf/v1.0/reportingLineDefinitions';
        this.http.get(url).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            _this.reportingLineDefinitionList = re;
            _this.items = _this.reportingLineDefinitionList.slice(0, _this.pageSize);
            _this.total = _this.reportingLineDefinitionList.length;
        }));
    };
    /**
     * @return {?}
     */
    ReportingLineComponent.prototype.onclear = /**
     * @return {?}
     */
    function () {
        this.reportingLineDataEntity = new ReportingLineDataEntity();
    };
    // 参照类型改变
    // 参照类型改变
    /**
     * @param {?} data
     * @return {?}
     */
    ReportingLineComponent.prototype.referObjectChange = 
    // 参照类型改变
    /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data === 'dept') {
            this.display = 'none';
            this.curReportingRefer = this.reportingReferObjects[0].value;
            this.reportingLineDataEntity.refUserId = null;
            this.reportingLineDataEntity.refEmployeeId = null;
        }
        else if (data === 'sysUser') {
            this.display = 'block';
            this.curReportingRefer = this.reportingReferObjects[1].value;
            this.reportingLineDataEntity.refOrgId = null;
            this.reportingLineDataEntity.refOrgName = null;
            this.reportingLineDataEntity.refEmployeeId = null;
        }
        else { // 员工的情况
            this.display = 'block';
            this.curReportingRefer = this.reportingReferObjects[2].value;
            this.reportingLineDataEntity.refOrgId = null;
            this.reportingLineDataEntity.refOrgName = null;
            this.reportingLineDataEntity.refUserId = null;
        }
        // 参照对象切换时，清空user和department
        this.users = [];
        this.departments = [];
    };
    /**
     * 参照用户改变
     */
    /**
     * 参照用户改变
     * @param {?} data
     * @return {?}
     */
    ReportingLineComponent.prototype.referUserChange = /**
     * 参照用户改变
     * @param {?} data
     * @return {?}
     */
    function (data) {
        console.log(data);
    };
    /**
     * 维度改变
     */
    /**
     * 维度改变
     * @param {?} data
     * @return {?}
     */
    ReportingLineComponent.prototype.reportingDimensionChange = /**
     * 维度改变
     * @param {?} data
     * @return {?}
     */
    function (data) {
    };
    /**
     * 组织帮助选完后
     */
    /**
     * 组织帮助选完后
     * @param {?} org
     * @return {?}
     */
    ReportingLineComponent.prototype.orgSelected = /**
     * 组织帮助选完后
     * @param {?} org
     * @return {?}
     */
    function (org) {
        this.reportingLineDataEntity.refOrgId = org.id;
        this.reportingLineDataEntity.refOrgName = org.name;
    };
    /**
     * 编辑条件
     */
    /**
     * 编辑条件
     * @return {?}
     */
    ReportingLineComponent.prototype.editCondition = /**
     * 编辑条件
     * @return {?}
     */
    function () {
        var _this = this;
        var e_2, _a, e_3, _b, e_4, _c, e_5, _d, e_6, _e, e_7, _f, e_8, _g;
        if (this.designerUIState.schemas.length > 0) {
            try {
                for (var _h = __values(this.designerUIState.schemas), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var schema = _j.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_a = _h.return)) _a.call(_h);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerUIState.procInstContext.length > 0) {
            try {
                for (var _k = __values(this.designerUIState.procInstContext), _l = _k.next(); !_l.done; _l = _k.next()) {
                    var variable = _l.value;
                    context.push(variable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_l && !_l.done && (_b = _k.return)) _b.call(_k);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.designerUIState.formalParameterContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _m = __values(this.designerUIState.formalParameterContext), _o = _m.next(); !_o.done; _o = _m.next()) {
                    var variable = _o.value;
                    _loop_1(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_o && !_o.done && (_c = _m.return)) _c.call(_m);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.designerUIState.participantContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _p = __values(this.designerUIState.participantContext), _q = _p.next(); !_q.done; _q = _p.next()) {
                    var variable = _q.value;
                    _loop_2(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_q && !_q.done && (_d = _p.return)) _d.call(_p);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _r = __values(this.designerUIState.processVariableContext), _s = _r.next(); !_s.done; _s = _r.next()) {
                    var variable = _s.value;
                    _loop_3(variable);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_s && !_s.done && (_e = _r.return)) _e.call(_r);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            var _loop_4 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _t = __values(this.designerUIState.activityComponentContext), _u = _t.next(); !_u.done; _u = _t.next()) {
                    var variable = _u.value;
                    _loop_4(variable);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_u && !_u.done && (_f = _t.return)) _f.call(_t);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_g = context_1.return)) _g.call(context_1);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.reportingLineDataEntity.condition); // this.reportingLineDataEntity.condition
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        function (expressioninfo) {
            _this.reportingLineDataEntity.condition = expressioninfo;
        }));
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    ReportingLineComponent.prototype.getReportingTypes = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var start = (this.pageIndex - 1) * this.pageSize;
        /** @type {?} */
        var end = start + this.pageSize;
        /** @type {?} */
        var items = [];
        if (value) {
            items = this.reportingLineDefinitionList.filter((/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return f.name.indexOf(value) > -1 || f.code.indexOf(value) > -1; }));
        }
        else {
            items = this.reportingLineDefinitionList;
        }
        this.total = items.length;
        this.items = items.slice(start, end);
        this.lookup.componentRef.instance.loadData({
            total: this.total,
            pageSize: this.pageSize,
            pageIndex: this.pageIndex,
            data: this.items
        });
    };
    /**
     * @return {?}
     */
    ReportingLineComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.inputGroup.nativeElement.addEventListener('mouseenter', _this.onMouseEnter.bind(_this));
            _this.inputGroup.nativeElement.addEventListener('mouseleave', _this.onMouseLeave.bind(_this));
            _this.inputGroup1.nativeElement.addEventListener('mouseenter', _this.onMouseEnter.bind(_this));
            _this.inputGroup1.nativeElement.addEventListener('mouseleave', _this.onMouseLeave.bind(_this));
        }));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ReportingLineComponent.prototype.onMouseEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ReportingLineComponent.prototype.onMouseLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    };
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    ReportingLineComponent.prototype.toggleClearIcon = /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    function (event, isShow) {
        if (isShow === void 0) { isShow = false; }
        /** @type {?} */
        var str = isShow ? '' : 'none';
        /** @type {?} */
        var clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ReportingLineComponent.prototype.clear = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.reportingLineDataEntity.refOrgId = '';
        this.reportingLineDataEntity.refOrgName = '';
    };
    /**
     * @return {?}
     */
    ReportingLineComponent.prototype.clearUser = /**
     * @return {?}
     */
    function () {
        this.users = [];
        this.reportingLineDataEntity.refUserId = '';
        this.reportingLineDataEntity.refEmployeeId = '';
    };
    /**
     * @return {?}
     */
    ReportingLineComponent.prototype.clearOrg = /**
     * @return {?}
     */
    function () {
        this.departments = [];
        this.reportingLineDataEntity.refOrgId = '';
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ReportingLineComponent.prototype.selectOrg = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.showExprHelp(data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ReportingLineComponent.prototype.selectUsers = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.showExprHelp(data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ReportingLineComponent.prototype.showExprHelp = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        var e_9, _a, e_10, _b, e_11, _c, e_12, _d;
        this.expr.setEditPattern(ExprEditMode.Advanced); // 表达式展现模式：默认高级
        if (this.designerUIState.schemas.length > 0) {
            try {
                for (var _e = __values(this.designerUIState.schemas), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var schema = _f.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_9) throw e_9.error; }
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerUIState.participantContext.length > 0) {
            try {
                for (var _g = __values(this.designerUIState.participantContext), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var variable = _h.value;
                    context.push(variable);
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                }
                finally { if (e_10) throw e_10.error; }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            var _loop_5 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _j = __values(this.designerUIState.processVariableContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    _loop_5(variable);
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_11) throw e_11.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_2 = __values(context), context_2_1 = context_2.next(); !context_2_1.done; context_2_1 = context_2.next()) {
                    var v = context_2_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_12_1) { e_12 = { error: e_12_1 }; }
            finally {
                try {
                    if (context_2_1 && !context_2_1.done && (_d = context_2.return)) _d.call(context_2);
                }
                finally { if (e_12) throw e_12.error; }
            }
        }
        if (data === 'sysUser') {
            if (this.reportingLineDataEntity.refUserId && this.reportingLineDataEntity.refUserId.length > 0) {
                this.expr.addExpressionText(this.reportingLineDataEntity.refUserId);
            }
            else {
                this.expr.addExpressionText('');
            }
        }
        else if (data === 'org') {
            if (this.reportingLineDataEntity.refOrgId && this.reportingLineDataEntity.refOrgId.length > 0) {
                this.expr.addExpressionText(this.reportingLineDataEntity.refOrgId);
            }
            else {
                this.expr.addExpressionText('');
            }
        }
        else { // 员工及其他汇报对象类型
            if (this.reportingLineDataEntity.refEmployeeId && this.reportingLineDataEntity.refEmployeeId.length > 0) {
                this.expr.addExpressionText(this.reportingLineDataEntity.refEmployeeId);
            }
            else {
                this.expr.addExpressionText('');
            }
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        function (expressionInfo) {
            if (data === 'sysUser') {
                /** @type {?} */
                var user = new PerformerEntity(expressionInfo, '', 'wf.ReportingLineParticipant');
                user.tag = 'expression';
                user.performerName = _this.variableParticipantName(expressionInfo);
                _this.reportingLineDataEntity.refUserId = user.performerId;
                _this.reportingLineDataEntity.tag = user.tag;
                _this.reportingLineDataEntity.performerName = user.performerName;
                _this.users = [_this.reportingLineDataEntity];
            }
            else if (data === 'org') {
                /** @type {?} */
                var dept = new PerformerEntity(expressionInfo, '', 'wf.ReportingLineParticipant');
                dept.tag = 'expression';
                _this.reportingLineDataEntity.refOrgName = expressionInfo;
                _this.reportingLineDataEntity.refOrgId = expressionInfo;
                _this.departments = [_this.reportingLineDataEntity];
            }
            else {
                /** @type {?} */
                var employee = new PerformerEntity(expressionInfo, '', 'wf.ReportingLineParticipant');
                employee.performerName = expressionInfo;
                employee.tag = 'expression';
                _this.reportingLineDataEntity.refEmployeeId = expressionInfo;
                _this.reportingLineDataEntity.performerName = employee.performerName;
                _this.users = [_this.reportingLineDataEntity];
            }
        }));
    };
    /**
     * @private
     * @param {?} expr
     * @return {?}
     */
    ReportingLineComponent.prototype.variableParticipantName = /**
     * @private
     * @param {?} expr
     * @return {?}
     */
    function (expr) {
        var e_13, _a, e_14, _b;
        try {
            for (var _c = __values(this.designerUIState.participantContext), _d = _c.next(); !_d.done; _d = _c.next()) {
                var c = _d.value;
                if (expr.indexOf(c.key) > -1) {
                    return c.name;
                }
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_13) throw e_13.error; }
        }
        try {
            for (var _e = __values(this.designerUIState.processVariableContext), _f = _e.next(); !_f.done; _f = _e.next()) {
                var c = _f.value;
                if (expr.indexOf(c.key) > -1) {
                    return c.name;
                }
            }
        }
        catch (e_14_1) { e_14 = { error: e_14_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_14) throw e_14.error; }
        }
        return '业务字段';
    };
    /**
     * @return {?}
     */
    ReportingLineComponent.prototype.defChanged = /**
     * @return {?}
     */
    function () {
        var _this = this;
        System.import('/platform/runtime/wf/web/wf-reporting-data/reportingLineDefHelp.js?v=20210903').then((/**
         * @return {?}
         */
        function () {
            ((/** @type {?} */ (window))).gspWfReportingLineDef.ReportingLineDefHelpUtil.getReportingLineHelp().then((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.defSelected(data);
            }));
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ReportingLineComponent.prototype.defSelected = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var e_15, _a;
        this.defName = data.name;
        this.reportingLineDataEntity.reportingLineDefId = data.id;
        this.reportingLineDataEntity.reportingLineDefName = data.name;
        this.reportingLineDimension = JSON.parse(data.dimensions);
        this.designerUIState.dimensions = [
            { value: 'higherSuperior', text: '间接上级' }
        ];
        // 兼容历史数据
        if (this.reportingLineDimension[0].code !== 'directSuperior') {
            /** @type {?} */
            var di = {
                value: 'directSuperior',
                text: '直接上级'
            };
            this.designerUIState.dimensions.push(di);
        }
        try {
            for (var _b = __values(this.reportingLineDimension), _c = _b.next(); !_c.done; _c = _b.next()) {
                var dimension = _c.value;
                /** @type {?} */
                var di = {
                    value: dimension.code,
                    text: dimension.name
                };
                this.designerUIState.dimensions.push(di);
            }
        }
        catch (e_15_1) { e_15 = { error: e_15_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_15) throw e_15.error; }
        }
        // 定义切换后，默认是参照组织
        this.curReportingRefer = this.reportingReferObjects[0].value;
        return of(true);
    };
    /**
     * @return {?}
     */
    ReportingLineComponent.prototype.getPerformers = /**
     * @return {?}
     */
    function () {
        this.reportingLineDataEntity.type = 'wf.ReportingLineParticipant';
        this.reportingLineDataEntity.reportingReferObject = this.curReportingRefer;
        return this.reportingLineDataEntity;
    };
    ReportingLineComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-reporting-line',
                    template: "<sys-farris-tree-help class=\"flex-fill\" #orgHelp style=\"display: none;\"\r\n                      [singleSelect]=\"true\" [sourceType]=\"'org'\" [disabled]=\"false\" [filter]=\"treeFilter\"\r\n                      [useBeforeCloseEvent]=\"false\" [async]=\"true\"\r\n                      (afterConfirm)=\"orgSelected($event)\">\r\n</sys-farris-tree-help>\r\n\r\n<div class=\"d-flex flex-fill farris-overflow-y-auto p-md-2\">\r\n  <form style=\"background: #F0F3F6; width: 100%; height: 420px\">\r\n    <div class=\"d-flex m-2 flex-column w-100\">\r\n      <div class=\"d-flex flex-column mx-5 my-4\" style=\"background: #FFF;\">\r\n        <div class=\"farris-form form-inline  farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u6C47\u62A5\u5B9A\u4E49</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <!--<farris-lookup-grid [items]=\"items\" [columns]=\"columns\" [(ngModel)]=\"reportingLineDataEntity.reportingLineDefName\"\r\n                    name=\"definitionId\" [resizable]=\"true\" [singleSelect]=\"true\" [idField]=\"'id'\" [pagination]=\"true\"\r\n                    [pageIndex]=\"pageIndex\" [pageSize]=\"pageSize\" [pageList]=\"pageList\" [total]=\"total\" [textField]=\"'name'\"\r\n                    [valueField]=\"'id'\" [title]=\"'\u6C47\u62A5\u7C7B\u578B'\" [dictPicked]=\"dictPicked\" (clear)=\"onclear()\" [readonly]=\"typeReadOnly\"\r\n                    [customDisplayType] = \"true\" [displayType]=\"'LIST'\">\r\n                  </farris-lookup-grid>-->\r\n                  <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                               [(value)]=\"defName\"\r\n                               (clickHandle)=\"defChanged()\" [enableClear]=\"false\"\r\n                  ></input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u6C47\u62A5\u7EA7\u522B</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-combo-list [(ngModel)]=\"reportingLineDataEntity.dimension\" name=\"dimension\" [panelHeight]=\"200\"\r\n                                     [idField]=\"'value'\" [textField]=\"'text'\" [data]=\"this.designerUIState.dimensions\" (valueChange)=\"reportingDimensionChange($event)\"\r\n                                     ></farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u53C2\u7167\u7C7B\u578B</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-radiogroup [data]=\"reportingReferObjects\" [horizontal]=\"true\"\r\n                                     [(ngModel)]=\"curReportingRefer\" name=\"referObject\"\r\n                                     (changeValue)=\"referObjectChange($event)\"\r\n                  ></farris-radiogroup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\" [ngStyle]=\"{'display':display}\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u53C2\u7167\u4EBA</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div #inputGroup1 class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [value]=\"users | usersName \" [(ngModel)]=\"reportingLineDataEntity.performerName\" name=\"users\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                            (click)=\"clearUser()\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span *ngIf=\"curReportingRefer === 'sysUser'\" class=\"input-group-text\" (click)=\"selectUsers('sysUser')\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                      <span *ngIf=\"curReportingRefer === 'employee'\" class=\"input-group-text\" (click)=\"selectUsers('employee')\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\" [ngStyle]=\"{'display':display === 'none' ? 'block':'none'}\">*</span>\r\n                  <span class=\"farris-label-text\">\u53C2\u7167\u7EC4\u7EC7</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div #inputGroup class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"reportingLineDataEntity.refOrgId\" name=\"dept\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                            (click)=\"clearOrg()\">\r\n                        <i class=\"f-icon modal_close\"></i>\r\n                      </span>\r\n                      <span class=\"input-group-text\" (click)=\"selectOrg('org')\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex flex-column mx-5\" style=\"background: #FFF;\">\r\n        <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u542F\u7528\u6761\u4EF6</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"reportingLineDataEntity.condition\" name=\"conditon\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span class=\"input-group-text\" (click)=\"editCondition()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n\r\n<app-wf-report-def-help style=\"display: none;\" [singleSelect]=\"true\" [title]=\"'\u6C47\u62A5\u5173\u7CFB\u5B9A\u4E49'\" (afterConfirm)=\"defSelected($event)\">\r\n\r\n</app-wf-report-def-help>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ReportingLineComponent.ctorParameters = function () { return [
        { type: HttpService },
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: NgZone }
    ]; };
    ReportingLineComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        reportingLineDefHelp: [{ type: ViewChild, args: [WfReportDefHelpComponent,] }],
        setReportingLineDataEntity: [{ type: Input }],
        lookup: [{ type: ViewChild, args: [LookupGridComponent,] }],
        orgHelp: [{ type: ViewChild, args: [SysFarrisTreeHelpComponent,] }],
        inputGroup: [{ type: ViewChild, args: ['inputGroup',] }],
        inputGroup1: [{ type: ViewChild, args: ['inputGroup1',] }]
    };
    return ReportingLineComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatrixDefInfoEntity = /** @class */ (function () {
    function MatrixDefInfoEntity() {
    }
    return MatrixDefInfoEntity;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatrixDataInfoEntity = /** @class */ (function (_super) {
    __extends(MatrixDataInfoEntity, _super);
    function MatrixDataInfoEntity(id, name, type) {
        return _super.call(this, id, name, type) || this;
    }
    return MatrixDataInfoEntity;
}(PerformerEntity));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EnumListComponent = /** @class */ (function () {
    function EnumListComponent(messageService, injector) {
        this.messageService = messageService;
        this.injector = injector;
        this.cls = 'farris-main-area flex-column';
        this.columns = [
            { field: 'key', width: 100, title: '键' },
            { field: 'value', width: 100, title: '值' }
        ];
        this.confirm = new Subject$1();
        this.closeModalEmitter = new Subject$1();
        /**
         * 显示值
         */
        this.data = new Array();
        this.selectedIds = new Array();
    }
    /**
     * @return {?}
     */
    EnumListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * 加载显示数据
     */
    /**
     * 加载显示数据
     * @param {?} enumValues
     * @return {?}
     */
    EnumListComponent.prototype.load = /**
     * 加载显示数据
     * @param {?} enumValues
     * @return {?}
     */
    function (enumValues) {
        this.data = __spread(enumValues);
    };
    /**
     * 确认
     */
    /**
     * 确认
     * @return {?}
     */
    EnumListComponent.prototype.onConfirm = /**
     * 确认
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.selectedIds.length === 0) {
            this.messageService.warning('尚未选中枚举值');
        }
        /** @type {?} */
        var enumValues = this.data.filter((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return _this.selectedIds.findIndex((/**
         * @param {?} id
         * @return {?}
         */
        function (id) { return id === d.key; })) > -1; }));
        this.confirm.next(enumValues);
        this.closeModalEmitter.next();
    };
    /**
     * 取消
     */
    /**
     * 取消
     * @return {?}
     */
    EnumListComponent.prototype.cancel = /**
     * 取消
     * @return {?}
     */
    function () {
        this.closeModalEmitter.next();
    };
    EnumListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-enum-list',
                    template: "<ng-template #buttons>\r\n  <button class=\"btn btn-primary\" (click)=\"onConfirm()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-secondary\" (click)=\"cancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n<div class=\"f-page\">\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid [data]=\"data\" [columns]=\"columns\" #dg=\"datagrid\" [fit]=\"true\"\r\n                       [idField]=\"'key'\" [fitColumns]=\"true\" [showLineNumber]=\"true\" [(checkValues)]=\"selectedIds\"\r\n                       [showAllCheckbox]=\"true\" [showCheckbox]=\"true\" [multiSelect]=\"false\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\"\r\n                       [lineNumberTitle]=\"'\u5E8F\u53F7'\" [lineNumberWidth]=\"50\" [striped]=\"true\" [virtualized]=\"true\" [pagination]=\"false\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    EnumListComponent.ctorParameters = function () { return [
        { type: MessagerService },
        { type: Injector }
    ]; };
    EnumListComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        dg: [{ type: ViewChild, args: ['dg',] }],
        btnRef: [{ type: ViewChild, args: ['buttons',] }]
    };
    return EnumListComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MatrixPerformerComponent = /** @class */ (function () {
    function MatrixPerformerComponent(http, designerUIState, expr, modalService, resolver, injector) {
        var _this = this;
        this.http = http;
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.modalService = modalService;
        this.resolver = resolver;
        this.injector = injector;
        this.cls = 'd-flex flex-fill h-100';
        this.display = 'none';
        this.typeReadOnly = false;
        this.items = [];
        this.pageIndex = 1;
        this.pageSize = 20;
        this.pageList = [10, 20, 30, 50, 100];
        this.total = 0;
        this.groupIcon2 = '<i class="f-icon f-icon-lookup"></i>';
        this.fieldId = '';
        /**
         * 矩阵定义显示列
         */
        this.columns = [
            { title: '编号', field: 'code', width: 100 },
            { title: '名称', field: 'name', width: 100 }
        ];
        this.users = [];
        this.dataFieldAndValues = []; // { text: '部门', value: 'department' },
        // { text: '部门', value: 'department' },
        this.curDataFieldValue = '';
        this.matrixDefEntityList = [];
        this.curMatrixDefEntity = new MatrixDefInfoEntity();
        this.curMatrixDataEntity = new MatrixDataInfoEntity();
        this.conditionFields = [];
        this.exprGroup = [
            { name: '帮助', value: 'help' }
        ];
        this.condition1ExprAble = true;
        this.condition2ExprAble = true;
        this.condition3ExprAble = true;
        /**
         * 编辑器页面显示文字，防范浅拷贝问题（对于条件字段的值和显示文字都不要在当前实体中进行修改只有点击确定时，才将其保存至当前实体并返回）
         */
        this.condition1Text = '';
        this.condition1Value = '';
        this.condition2Text = '';
        this.condition2Value = '';
        this.condition3Text = '';
        this.condition3Value = '';
        this.dictPicked = (/**
         * @param {?} rowData
         * @return {?}
         */
        function (rowData) {
            // 先将当前绑定的数据清空
            _this.curMatrixDataEntity = new MatrixDataInfoEntity();
            _this.curDataFieldValue = '';
            _this.curMatrixDefEntity = rowData;
            _this.curMatrixDataEntity.matrixDefId = rowData.id;
            _this.curMatrixDataEntity.matrixDefName = rowData.name;
            _this.setFields();
            return of(true);
        });
        this.dictHelpPicked = (/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.value = null;
            return of({ closeDialog: true });
        });
        this.getMatrixLineType();
    }
    Object.defineProperty(MatrixPerformerComponent.prototype, "setMatrixDataEntity", {
        set: /**
         * @param {?} dataEntity
         * @return {?}
         */
        function (dataEntity) {
            var _this = this;
            this.curMatrixDataEntity = dataEntity;
            /** @type {?} */
            var url = '/api/runtime/wf/v1.0/matrixDefinition/' + dataEntity.matrixDefId;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                _this.curMatrixDefEntity = re;
                _this.setFields();
                _this.curDataFieldValue = dataEntity.dataFieldAlias;
            }));
            if (dataEntity.matrixDefId) {
                this.typeReadOnly = true;
            }
            if (!this.curMatrixDataEntity.conditionField1) {
                this.condition1 = 'expr';
                this.condition1ExprAble = true;
            }
            else if (this.curMatrixDataEntity.conditionField1.charAt(0) === '{') {
                this.condition1 = 'expr';
                this.condition1ExprAble = true;
            }
            else {
                this.condition1 = 'help';
                this.condition1ExprAble = false;
            }
            if (!this.curMatrixDataEntity.conditionField2) {
                this.condition2 = 'expr';
                this.condition2ExprAble = true;
            }
            else if (this.curMatrixDataEntity.conditionField2.charAt(0) === '{') {
                this.condition2 = 'expr';
                this.condition2ExprAble = true;
            }
            else {
                this.condition2 = 'help';
                this.condition2ExprAble = false;
            }
            if (!this.curMatrixDataEntity.conditionField3) {
                this.condition3 = 'expr';
                this.condition3ExprAble = true;
            }
            else if (this.curMatrixDataEntity.conditionField3.charAt(0) === '{') {
                this.condition3 = 'expr';
                this.condition3ExprAble = true;
            }
            else {
                this.condition3 = 'help';
                this.condition3ExprAble = false;
            }
            this.condition1Text = this.curMatrixDataEntity.conditionFieldText1 ? this.curMatrixDataEntity.conditionFieldText1 : '';
            this.condition1Value = this.curMatrixDataEntity.conditionField1 ? this.curMatrixDataEntity.conditionField1 : '';
            this.condition2Text = this.curMatrixDataEntity.conditionFieldText2 ? this.curMatrixDataEntity.conditionFieldText2 : '';
            this.condition2Value = this.curMatrixDataEntity.conditionField2 ? this.curMatrixDataEntity.conditionField2 : '';
            this.condition3Text = this.curMatrixDataEntity.conditionFieldText3 ? this.curMatrixDataEntity.conditionFieldText3 : '';
            this.condition3Value = this.curMatrixDataEntity.conditionField3 ? this.curMatrixDataEntity.conditionField3 : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MatrixPerformerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * 获取矩阵定义
     */
    /**
     * 获取矩阵定义
     * @return {?}
     */
    MatrixPerformerComponent.prototype.getMatrixLineType = /**
     * 获取矩阵定义
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var url = '/api/runtime/wf/v1.0/matrixDefinition';
        this.http.get(url).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            _this.matrixDefEntityList = re;
            _this.items = _this.matrixDefEntityList.slice(0, _this.pageSize);
            _this.total = _this.matrixDefEntityList.length;
        }));
    };
    /**
     * @private
     * @return {?}
     */
    MatrixPerformerComponent.prototype.setFields = /**
     * @private
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b;
        this.conditionFields = [];
        this.dataFieldAndValues = [];
        // 先对条件字段按照排序号进行排序
        this.curMatrixDefEntity.conditionField.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            return a.sortOrder - b.sortOrder;
        }));
        try {
            // 将排序后的条件放入条件字段数组中
            for (var _c = __values(this.curMatrixDefEntity.conditionField), _d = _c.next(); !_d.done; _d = _c.next()) {
                var condition = _d.value;
                this.conditionFields.push(condition);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // 先对数据字段按照排序号进行排序
        this.curMatrixDefEntity.dataField.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            return a.sortOrder - b.sortOrder;
        }));
        try {
            // 填充数据字段的下拉列表
            for (var _e = __values(this.curMatrixDefEntity.dataField), _f = _e.next(); !_f.done; _f = _e.next()) {
                var data = _f.value;
                /** @type {?} */
                var temp = {
                    text: data.alias,
                    value: data.alias
                };
                this.dataFieldAndValues.push(temp);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /**
     * @return {?}
     */
    MatrixPerformerComponent.prototype.onClear = /**
     * @return {?}
     */
    function () {
        this.curMatrixDataEntity = new MatrixDataInfoEntity();
    };
    /**
     * 编辑条件
     */
    /**
     * 编辑条件
     * @return {?}
     */
    MatrixPerformerComponent.prototype.editCondition = /**
     * 编辑条件
     * @return {?}
     */
    function () {
        var _this = this;
        var e_3, _a, e_4, _b, e_5, _c, e_6, _d, e_7, _e, e_8, _f;
        if (this.designerUIState.schemas.length > 0) {
            try {
                for (var _g = __values(this.designerUIState.schemas), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var schema = _h.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_a = _g.return)) _a.call(_g);
                }
                finally { if (e_3) throw e_3.error; }
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerUIState.procInstContext.length > 0) {
            try {
                for (var _j = __values(this.designerUIState.procInstContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    context.push(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.designerUIState.formalParameterContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _l = __values(this.designerUIState.formalParameterContext), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var variable = _m.value;
                    _loop_1(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (this.designerUIState.participantContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _o = __values(this.designerUIState.participantContext), _p = _o.next(); !_p.done; _p = _o.next()) {
                    var variable = _p.value;
                    _loop_2(variable);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _q = __values(this.designerUIState.processVariableContext), _r = _q.next(); !_r.done; _r = _q.next()) {
                    var variable = _r.value;
                    _loop_3(variable);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_r && !_r.done && (_e = _q.return)) _e.call(_q);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_f = context_1.return)) _f.call(context_1);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        this.expr.setEditPattern(ExprEditMode.Conditional); // 表达式展现模式：默认简易版
        this.expr.addExpressionText(this.curMatrixDataEntity.condition); // this.reportingLineDataEntity.condition
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        function (expressioninfo) {
            _this.curMatrixDataEntity.condition = expressioninfo;
        }));
    };
    /**
     * @param {?} data
     * @param {?} index
     * @param {?} id
     * @return {?}
     */
    MatrixPerformerComponent.prototype.onHelpSearch = /**
     * @param {?} data
     * @param {?} index
     * @param {?} id
     * @return {?}
     */
    function (data, index, id) {
        this.index = index;
        this.fieldId = id;
        this.helpId = this.curMatrixDefEntity.conditionField[this.index].smartHelp;
        this.lookUp.onClear();
        this.lookUp.showDialog();
    };
    /**
     * @param {?} index
     * @param {?} id
     * @return {?}
     */
    MatrixPerformerComponent.prototype.openEnumValue = /**
     * @param {?} index
     * @param {?} id
     * @return {?}
     */
    function (index, id) {
        this.index = index;
        this.fieldId = id;
        this.showEnumList(JSON.parse(this.curMatrixDefEntity.conditionField[this.index].enumList));
    };
    /**
     * @private
     * @param {?} enumList
     * @return {?}
     */
    MatrixPerformerComponent.prototype.showEnumList = /**
     * @private
     * @param {?} enumList
     * @return {?}
     */
    function (enumList) {
        var _this = this;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(EnumListComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        /** @type {?} */
        var modalConfig = {
            title: '枚举选择',
            width: 650,
            height: 450,
            showButtons: true,
            buttons: compRef.instance.btnRef,
        };
        if (enumList && enumList.length > 0) {
            compRef.instance.load(enumList);
        }
        compRef.instance.confirm.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            if (_this.index === 0) {
                _this.condition1Text = re[0].value;
                _this.condition1Value = re[0].value;
            }
            else if (_this.index === 1) {
                _this.condition2Text = re[0].value;
                _this.condition2Value = re[0].value;
            }
            else if (_this.index === 2) {
                _this.condition3Text = re[0].value;
                _this.condition3Value = re[0].value;
            }
        }));
        /** @type {?} */
        var dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @return {?}
         */
        function () {
            dialog.close();
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MatrixPerformerComponent.prototype.dataFieldChange = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.curMatrixDataEntity.dataFieldAlias = data.data.value;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MatrixPerformerComponent.prototype.selectedDataHandler = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (this.index === 0) {
            this.condition1Text = data.name;
            this.condition1Value = data.id;
        }
        else if (this.index === 1) {
            this.condition2Text = data.name;
            this.condition2Value = data.id;
        }
        else if (this.index === 2) {
            this.condition3Text = data.name;
            this.condition3Value = data.id;
        }
    };
    /**
     * @return {?}
     */
    MatrixPerformerComponent.prototype.getPerformers = /**
     * @return {?}
     */
    function () {
        this.curMatrixDataEntity.type = 'wf.MatrixParticipant';
        this.curMatrixDataEntity.conditionFieldText1 = this.condition1Text;
        this.curMatrixDataEntity.conditionField1 = this.condition1Text === '' ? '' : this.condition1Value;
        this.curMatrixDataEntity.conditionFieldText2 = this.condition2Text;
        this.curMatrixDataEntity.conditionField2 = this.condition2Text === '' ? '' : this.condition2Value;
        this.curMatrixDataEntity.conditionFieldText3 = this.condition3Text;
        this.curMatrixDataEntity.conditionField3 = this.condition3Text === '' ? '' : this.condition3Value;
        return this.curMatrixDataEntity;
    };
    /**
     * 打开表达式编辑器
     * @param data 编辑第几个条件字段，值为（condition1，condition2，condition3）
     */
    /**
     * 打开表达式编辑器
     * @param {?} data 编辑第几个条件字段，值为（condition1，condition2，condition3）
     * @return {?}
     */
    MatrixPerformerComponent.prototype.showExprHelp = /**
     * 打开表达式编辑器
     * @param {?} data 编辑第几个条件字段，值为（condition1，condition2，condition3）
     * @return {?}
     */
    function (data) {
        var _this = this;
        var e_9, _a, e_10, _b, e_11, _c, e_12, _d;
        if (this.designerUIState.schemas.length > 0) {
            try {
                for (var _e = __values(this.designerUIState.schemas), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var schema = _f.value;
                    // this.expr.addCommonObject(co);
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_9) throw e_9.error; }
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerUIState.participantContext.length > 0) {
            try {
                for (var _g = __values(this.designerUIState.participantContext), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var variable = _h.value;
                    context.push(variable);
                    // this.expr.addContext(variable);
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                }
                finally { if (e_10) throw e_10.error; }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            var _loop_4 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _j = __values(this.designerUIState.processVariableContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    _loop_4(variable);
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_11) throw e_11.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_2 = __values(context), context_2_1 = context_2.next(); !context_2_1.done; context_2_1 = context_2.next()) {
                    var v = context_2_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_12_1) { e_12 = { error: e_12_1 }; }
            finally {
                try {
                    if (context_2_1 && !context_2_1.done && (_d = context_2.return)) _d.call(context_2);
                }
                finally { if (e_12) throw e_12.error; }
            }
        }
        if (data === 'condition1') {
            if (this.curMatrixDataEntity.conditionField1) {
                this.expr.addExpressionText(this.curMatrixDataEntity.conditionField1);
            }
            else {
                this.expr.addExpressionText('');
            }
        }
        else if (data === 'condition2') {
            if (this.curMatrixDataEntity.conditionField2) {
                this.expr.addExpressionText(this.curMatrixDataEntity.conditionField2);
            }
            else {
                this.expr.addExpressionText('');
            }
        }
        else if (data === 'condition3') {
            if (this.curMatrixDataEntity.conditionField3) {
                this.expr.addExpressionText(this.curMatrixDataEntity.conditionField3);
            }
            else {
                this.expr.addExpressionText('');
            }
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        function (expressionInfo) {
            if (data === 'condition1') {
                _this.condition1Text = expressionInfo;
                _this.condition1Value = expressionInfo;
            }
            else if (data === 'condition2') {
                _this.condition2Text = expressionInfo;
                _this.condition2Value = expressionInfo;
            }
            else {
                _this.condition3Text = expressionInfo;
                _this.condition3Value = expressionInfo;
            }
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MatrixPerformerComponent.prototype.condition1Expr = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.showExprHelp(data);
    };
    /**
     * @return {?}
     */
    MatrixPerformerComponent.prototype.condition1ExprClick = /**
     * @return {?}
     */
    function () {
        this.condition1ExprAble = !this.condition1ExprAble;
        this.condition1Text = '';
        this.condition1Value = '';
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MatrixPerformerComponent.prototype.condition2Expr = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.showExprHelp(data);
    };
    /**
     * @return {?}
     */
    MatrixPerformerComponent.prototype.condition2ExprClick = /**
     * @return {?}
     */
    function () {
        this.condition2ExprAble = !this.condition2ExprAble;
        this.condition2Text = '';
        this.condition2Value = '';
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MatrixPerformerComponent.prototype.condition3Expr = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.showExprHelp(data);
    };
    /**
     * @return {?}
     */
    MatrixPerformerComponent.prototype.condition3ExprClick = /**
     * @return {?}
     */
    function () {
        this.condition3ExprAble = !this.condition3ExprAble;
        this.condition3Text = '';
        this.condition3Value = '';
    };
    MatrixPerformerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-matrix-performer',
                    template: "<div class=\"d-flex flex-fill farris-overflow-y-auto p-md-2\">\r\n  <form style=\"background: #F0F3F6; width: 100%; height: 470px\">\r\n    <div class=\"d-flex m-2 flex-column w-100\">\r\n      <div class=\"d-flex flex-column mx-5 my-4\" style=\"background: #FFF;\">\r\n        <div class=\"farris-form form-inline  farris-form-inline\"><!--mr-5-->\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\" style=\"width: 15%\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u5F15\u7528\u77E9\u9635\u8868</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\" style=\"width: 70%\">\r\n                  <farris-lookup-grid [items]=\"items\" [columns]=\"columns\" [(ngModel)]=\"curMatrixDataEntity.matrixDefName\"\r\n                                      name=\"definitionId\" [resizable]=\"true\" [singleSelect]=\"true\" [idField]=\"'id'\" [pagination]=\"true\"\r\n                                      [pageIndex]=\"pageIndex\" [pageSize]=\"pageSize\" [pageList]=\"pageList\" [total]=\"total\" [textField]=\"'name'\"\r\n                                      [valueField]=\"'id'\" [title]=\"'\u77E9\u9635\u8868'\" [dictPicked]=\"dictPicked\" (clear)=\"onClear()\" [readonly]=\"typeReadOnly\"\r\n                                      [customDisplayType] = \"true\" [displayType]=\"'LIST'\">\r\n                  </farris-lookup-grid>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n                <div style=\"width: 15%\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\" style=\"width: 15%\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u7ED3\u679C\u5217</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\" style=\"width: 70%\">\r\n                  <!--\u4E0B\u62C9\u5217\u8868-->\r\n                  <farris-combo-list [(ngModel)]=\"curDataFieldValue\" name=\"referObject\" [panelHeight]=\"200\" [idField]=\"'value'\"\r\n                                     [textField]=\"'text'\" [data]=\"dataFieldAndValues\" (selectChange)='dataFieldChange($event)'>\r\n                  </farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n                <div style=\"width: 15%\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\" *ngIf=\"conditionFields && conditionFields.length > 0\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\" style=\"margin-top: -17px; margin-bottom: -22px\">\r\n                <label class=\"col-form-label\" style=\"width: 15%\">\r\n                  <span class=\"farris-label-text\" style=\"color: rgb(180,180,180)\">\u6761\u4EF6\u5B57\u6BB5</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\" style=\"width: 70%\">\r\n                  <hr size=\"3px\">\r\n                </div>\r\n                <div style=\"width: 15%\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\" *ngIf=\"conditionFields && conditionFields.length > 0\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\" style=\"width: 15%\">\r\n                  <span class=\"farris-label-text\">{{conditionFields[0].alias}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\" style=\"width: 70%\" *ngIf=\"conditionFields[0].inputType === 'help' && !condition1ExprAble\">\r\n                  <input-group name=\"condition1\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\" [(ngModel)]=\"condition1Text\" (clickHandle)=\"onHelpSearch($event,0,conditionFields[0].id)\"></input-group>\r\n                </div>\r\n                <div class=\"farris-input-wrap\" style=\"width: 70%\" *ngIf=\"conditionFields[0].inputType === 'enum' && !condition1ExprAble\">\r\n                  <input-group name=\"condition1\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\" [(ngModel)]=\"condition1Text\" (clickHandle)=\"openEnumValue(0,conditionFields[0].id)\"></input-group>\r\n                </div>\r\n                <div class=\"farris-input-wrap\" style=\"width: 70%\" *ngIf=\"condition1ExprAble\">\r\n                  <input-group name=\"condition1\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                               [(ngModel)]=\"condition1Text\" (clickHandle)=\"condition1Expr('condition1')\">\r\n                  </input-group>\r\n                </div>\r\n                <farris-checkboxgroup style=\"width: 15%; padding-left: 10px\" [(ngModel)]=\"condition1\" name=\"Expr1Able\" [horizontal]=\"true\"\r\n                                      [data]=\"exprGroup\" (changeValue)=\"condition1ExprClick()\">\r\n                </farris-checkboxgroup>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\" *ngIf=\"conditionFields && conditionFields.length > 1\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\" style=\"width: 15%\">\r\n                  <span class=\"farris-label-text\">{{conditionFields[1].alias}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\" style=\"width: 70%\" *ngIf=\"conditionFields[1].inputType === 'help' && !condition2ExprAble\">\r\n                  <input-group name=\"condition2\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\" [(ngModel)]=\"condition2Text\" (clickHandle)=\"onHelpSearch($event,1,conditionFields[1].id)\"></input-group>\r\n                </div>\r\n                <div class=\"farris-input-wrap\" style=\"width: 70%\" *ngIf=\"conditionFields[1].inputType === 'enum' && !condition2ExprAble\">\r\n                  <input-group name=\"condition2\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\" [(ngModel)]=\"condition2Text\" (clickHandle)=\"openEnumValue(1,conditionFields[1].id)\"></input-group>\r\n                </div>\r\n                <div class=\"farris-input-wrap\" style=\"width: 70%\" *ngIf=\"condition2ExprAble\">\r\n                  <input-group name=\"condition2\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                               [(ngModel)]=\"condition2Text\" (clickHandle)=\"condition2Expr('condition2')\">\r\n                  </input-group>\r\n                </div>\r\n                <farris-checkboxgroup style=\"width: 15%; padding-left: 10px\" [(ngModel)]=\"condition2\" name=\"Expr2Able\" [horizontal]=\"true\"\r\n                                      [data]=\"exprGroup\" (changeValue)=\"condition2ExprClick()\">\r\n                </farris-checkboxgroup>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto my-4\" *ngIf=\"conditionFields && conditionFields.length > 2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\" style=\"width: 15%\">\r\n                  <span class=\"farris-label-text\">{{conditionFields[2].alias}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\" style=\"width: 70%\" *ngIf=\"conditionFields[2].inputType === 'help' && !condition3ExprAble\">\r\n                  <input-group name=\"condition3\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\" [(ngModel)]=\"condition3Text\" (clickHandle)=\"onHelpSearch($event,2,conditionFields[2].id)\"></input-group>\r\n                </div>\r\n                <div class=\"farris-input-wrap\" style=\"width: 70%\" *ngIf=\"conditionFields[2].inputType === 'enum' && !condition3ExprAble\">\r\n                  <input-group name=\"condition3\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\" [(ngModel)]=\"condition3Text\" (clickHandle)=\"openEnumValue(2,conditionFields[2].id)\"></input-group>\r\n                </div>\r\n                <div class=\"farris-input-wrap\" style=\"width: 70%\" *ngIf=\"condition3ExprAble\">\r\n                  <input-group name=\"condition3\" [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                               [(ngModel)]=\"condition3Text\" (clickHandle)=\"condition3Expr('condition3')\">\r\n                  </input-group>\r\n                </div>\r\n                <farris-checkboxgroup style=\"width: 15%; padding-left: 10px\" [(ngModel)]=\"condition3\" name=\"Expr3Able\" [horizontal]=\"true\"\r\n                                      [data]=\"exprGroup\" (changeValue)=\"condition3ExprClick()\">\r\n                </farris-checkboxgroup>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex flex-column mx-5\" style=\"background: #FFF;\">\r\n        <div class=\"farris-form form-inline farris-form-inline mr-5\">\r\n          <div class=\"col-12 farris-group-auto my-4\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u542F\u7528\u6761\u4EF6</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"curMatrixDataEntity.condition\" name=\"conditon\" [readOnly]=\"true\" />\r\n                    <div class=\"input-group-append\">\r\n                      <span class=\"input-group-text\" (click)=\"editCondition()\" style=\"background: #FFF;\">\r\n                        <i class=\"f-icon f-icon-lookup\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n\r\n<farris-lookup-grid style=\"display: none;\" #lookup [(ngModel)]=\"value\" name=\"value\" [helpId]=\"helpId\"\r\n                    [singleSelect]=\"true\" [uri]=\"'assets/data/tree-list-help.json'\" (selectedData)=\"selectedDataHandler($event)\"\r\n                    [dictPicked]=\"dictHelpPicked\" [enableCascade]=\"false\">\r\n</farris-lookup-grid>\r\n",
                    providers: [
                        { provide: ServerSideToken, useClass: LookupDataService }
                    ],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    MatrixPerformerComponent.ctorParameters = function () { return [
        { type: HttpService },
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: BsModalService },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    MatrixPerformerComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        setMatrixDataEntity: [{ type: Input }],
        lookUp: [{ type: ViewChild, args: ['lookup',] }]
    };
    return MatrixPerformerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PerformerEditComponent = /** @class */ (function () {
    function PerformerEditComponent(http) {
        this.http = http;
        this.cls = 'farris-main-area flex-column';
        this.tab = 'user';
        this.display = true;
    }
    /**
     * @return {?}
     */
    PerformerEditComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    PerformerEditComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.performer) {
            switch (this.performer.type) {
                case 'wf.UserParticipant':
                    this.tab = 'user';
                    this.usersCmp.users = [];
                    this.usersCmp.users.push(this.performer.value);
                    // 考虑到兼容历史数据，暂时不使用用户参与者实体类中的userType属性
                    if (this.performer.value.performerId && this.performer.value.performerId.charAt(0) === '{') {
                        /** @type {?} */
                        var url = '/api/runtime/wf/v1.0/reportingOrgType/hasAdminOrg';
                        this.http.get(url).subscribe((/**
                         * @param {?} data
                         * @return {?}
                         */
                        function (data) {
                            _this.usersCmp.userTypeButtonNeedShow = data;
                            _this.usersCmp.userType = 'variable';
                            _this.usersCmp.curOrgType = _this.performer.value.orgType === 'Sys' ? 'Sys' : 'Administrative_organization';
                            _this.usersCmp.condition = _this.performer.value.condition;
                            // 根据表达式中的函数名判断是否使用的是上下文变量
                            /** @type {?} */
                            var isContextVariable = _this.performer.value.performerId.indexOf("GetContextParameter") >= 0;
                            _this.usersCmp.variableOrgTypes = isContextVariable ? [
                                { name: '系统用户', value: 'Sys' }
                            ] : [
                                { name: '系统用户', value: 'Sys' },
                                { name: '行政人员', value: 'Administrative_organization' }
                            ];
                        }));
                    }
                    else {
                        this.usersCmp.userType = 'user';
                        this.usersCmp.condition = this.performer.value.condition;
                    }
                    break;
                case 'wf.PositionParticipant':
                    this.tab = 'position';
                    this.posiCmp.position = Object.assign({}, this.performer.value);
                    if (this.posiCmp.position.positionType === '0') {
                        this.posiCmp.filter = { positionType: 0 };
                    }
                    else {
                        this.posiCmp.filter = { positionType: 1 };
                    }
                    break;
                case 'wf.ReportingLineParticipant':
                    this.tab = 'report';
                    this.reportingLineCmp.setReportingLineDataEntity = this.performer.value;
                    break;
                case 'wf.ComponentParticipant':
                    this.tab = 'component';
                    this.cmpCmp.component = this.performer.value;
                    break;
                case 'wf.MatrixParticipant':
                    this.tab = 'matrix';
                    this.cmpCmp.component = this.performer.value;
                    this.matrixCmp.setMatrixDataEntity = this.performer.value;
            }
        }
    };
    /**
     * @return {?}
     */
    PerformerEditComponent.prototype.getPerformers = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var users = this.usersCmp.getPerformers();
        /** @type {?} */
        var position = this.posiCmp.getPerformers();
        /** @type {?} */
        var component = this.cmpCmp.getPerformers();
        /** @type {?} */
        var reportingLine = this.reportingLineCmp.getPerformers();
        /** @type {?} */
        var matrix = this.matrixCmp.getPerformers();
        // let performers = [];
        /** @type {?} */
        var positionPerformers = [];
        // 只包含岗位参与者
        /** @type {?} */
        var userPerformers = [];
        if (users && users.length > 0) {
            userPerformers = userPerformers.concat(users);
        }
        if (position && position.performerId) {
            positionPerformers.push(position);
        }
        return { userPerformers: userPerformers, positionPerformers: positionPerformers, component: component, reportingLine: reportingLine, matrix: matrix };
    };
    PerformerEditComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-performer-edit',
                    template: "<div class=\"flex-fill farris-split-section m-2 farris-overflow-y-auto f-utils-flex-column\">\r\n    <farris-tabs class=\"f-utils-fill h-100\" #tabs [value]=\"tab\" [fill]=\"true\" [contentFill]=\"true\">\r\n      <farris-tab title=\"\u7528\u6237\" [show]=\"true\" [id]=\"'user'\">\r\n        <ng-template #content>\r\n          <app-user-performer></app-user-performer>\r\n        </ng-template>\r\n      </farris-tab>\r\n      <farris-tab title=\"\u5C97\u4F4D\" [id]=\"'position'\">\r\n        <ng-template #content>\r\n          <app-position-performer></app-position-performer>\r\n        </ng-template>\r\n      </farris-tab>\r\n      <farris-tab title=\"\u6C47\u62A5\u5173\u7CFB\" [id]=\"'report'\">\r\n        <ng-template #content>\r\n          <app-reporting-line></app-reporting-line>\r\n        </ng-template>\r\n      </farris-tab>\r\n      <farris-tab title=\"\u77E9\u9635\" [id]=\"'matrix'\" *ngIf=\"display\">\r\n        <ng-template #content>\r\n          <app-matrix-performer></app-matrix-performer>\r\n        </ng-template>\r\n      </farris-tab>\r\n      <farris-tab title=\"\u53C2\u4E0E\u8005\u6784\u4EF6\" [id]=\"'component'\">\r\n        <ng-template #content>\r\n          <app-component-performer [component]=\"component\" style=\"background: #FFF;\"></app-component-performer>\r\n        </ng-template>\r\n      </farris-tab>\r\n    </farris-tabs>\r\n</div>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PerformerEditComponent.ctorParameters = function () { return [
        { type: HttpService }
    ]; };
    PerformerEditComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        display: [{ type: Input }],
        usersCmp: [{ type: ViewChild, args: [UserPerformerComponent,] }],
        posiCmp: [{ type: ViewChild, args: [PositionPerformerComponent,] }],
        cmpCmp: [{ type: ViewChild, args: [ComponentPerformerComponent,] }],
        reportingLineCmp: [{ type: ViewChild, args: [ReportingLineComponent,] }],
        matrixCmp: [{ type: ViewChild, args: [MatrixPerformerComponent,] }]
    };
    return PerformerEditComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PerformerOptionsComponent = /** @class */ (function () {
    function PerformerOptionsComponent(ngZone, designerState, expr, message) {
        this.ngZone = ngZone;
        this.designerState = designerState;
        this.expr = expr;
        this.message = message;
        this.cls = 'farris-main-area flex-column';
        this.showClearButton = false;
        this.historicFirst = false;
        this.excludeProcInstCreator = false;
        this.excludePreActExecutors = false;
        this.excludeAllPassExecutors = false;
        this.autoProcInstCreator = false;
        this.autoPreActExecutors = false;
        this.autoAllPassExecutors = false;
        this.noPerformerStrategyList = [
            { text: '向下流转', value: 'leave' },
            { text: '异常提示', value: 'throwException' }
        ];
        this.exclusionPerformersOptions = [
            { value: 'procInstCreator', name: '流程发起人' },
            { value: 'preActExecutors', name: '上一节点办理人' },
            { value: 'allPassExecutors', name: '所有已办理人员' }
        ];
        this.noPerformerStrategy = this.noPerformerStrategyList[0].value;
    }
    Object.defineProperty(PerformerOptionsComponent.prototype, "options", {
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            if (options) {
                this.exclusionPerformers = options.ExclusionPerformers;
                this.noPerformerStrategy = options.NoPerformerStrategy;
                this.historicFirst = options.HistoricFirst;
                this.automaticPerformers = options.automaticPerformers;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PerformerOptionsComponent.prototype, "exclusionPerformers", {
        set: /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e) {
                if (typeof e === 'string') {
                    this.excludeProcInstCreator = e.indexOf('procInstCreator') > -1;
                    this.excludePreActExecutors = e.indexOf('preActExecutors') > -1;
                }
                else {
                    this.excludeProcInstCreator = e.findIndex((/**
                     * @param {?} i
                     * @return {?}
                     */
                    function (i) { return i === 'procInstCreator'; })) > -1;
                    this.excludePreActExecutors = e.findIndex((/**
                     * @param {?} i
                     * @return {?}
                     */
                    function (i) { return i === 'preActExecutors'; })) > -1;
                    this.excludeAllPassExecutors = e.findIndex((/**
                     * @param {?} i
                     * @return {?}
                     */
                    function (i) { return i === 'allPassExecutors'; })) > -1;
                    this.excludeExprPerformer = e.find((/**
                     * @param {?} i
                     * @return {?}
                     */
                    function (i) { return i.indexOf('expr') > -1; }));
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PerformerOptionsComponent.prototype, "automaticPerformers", {
        set: /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e && e.length > 0) {
                this.autoProcInstCreator = e.findIndex((/**
                 * @param {?} i
                 * @return {?}
                 */
                function (i) { return i === 'procInstCreator'; })) > -1;
                this.autoPreActExecutors = e.findIndex((/**
                 * @param {?} i
                 * @return {?}
                 */
                function (i) { return i === 'preActExecutors'; })) > -1;
                this.autoAllPassExecutors = e.findIndex((/**
                 * @param {?} i
                 * @return {?}
                 */
                function (i) { return i === 'allPassExecutors'; })) > -1;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PerformerOptionsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    PerformerOptionsComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.inputGroup.nativeElement.addEventListener('mouseenter', _this.onMouseEnter.bind(_this));
            _this.inputGroup.nativeElement.addEventListener('mouseleave', _this.onMouseLeave.bind(_this));
        }));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PerformerOptionsComponent.prototype.onMouseEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showClearButton = true;
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PerformerOptionsComponent.prototype.onMouseLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    };
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    PerformerOptionsComponent.prototype.toggleClearIcon = /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    function (event, isShow) {
        if (isShow === void 0) { isShow = false; }
        /** @type {?} */
        var str = isShow ? '' : 'none';
        /** @type {?} */
        var clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PerformerOptionsComponent.prototype.excludeProcInstCreatorClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // this.excludeProcInstCreator = !this.excludeProcInstCreator;
        if (this.excludeProcInstCreator && this.autoProcInstCreator) {
            this.autoProcInstCreator = false;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PerformerOptionsComponent.prototype.excludePreActExecutorsClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        // this.excludePreActExecutors = !this.excludePreActExecutors;
        if (this.autoAllPassExecutors === true && this.excludePreActExecutors === true) {
            this.message.info('所有已办理人员已设置自动审批，上个节点已办理人员默认不允许排除！', (/**
             * @return {?}
             */
            function () {
                _this.excludePreActExecutors = false;
            }));
            return;
        }
        if (this.excludePreActExecutors && this.autoPreActExecutors) {
            this.autoPreActExecutors = false;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PerformerOptionsComponent.prototype.excludeAllPassExecutorsClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // this.excludeAllPassExecutors = !this.excludeAllPassExecutors;
        if (this.excludeAllPassExecutors) {
            if (this.autoPreActExecutors) {
                this.autoPreActExecutors = false;
            }
            if (this.autoAllPassExecutors) {
                this.autoAllPassExecutors = false;
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PerformerOptionsComponent.prototype.autoProcInstCreatorClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        // if (this.designerState.propertyData.CompleteStrategy !== this.designerState.completeIterator[0].key
        //   && this.autoProcInstCreator === true ) {
        //   this.message.info('【完成策略】为【会签】时，不允许设置自动审批，请了解！', () => {
        //     this.autoProcInstCreator = false;
        //   });
        //   return;
        // }
        if (this.designerState.propertyData.AssignStrategy === this.designerState.assignIterator[2].key
            && this.autoProcInstCreator === true) {
            this.message.info('【分配策略】为【领用】时，不允许设置自动审批，请了解！', (/**
             * @return {?}
             */
            function () {
                _this.autoProcInstCreator = false;
            }));
            return;
        }
        // this.autoProcInstCreator = !this.autoProcInstCreator;
        if (this.autoProcInstCreator && this.excludeProcInstCreator) {
            this.excludeProcInstCreator = false;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PerformerOptionsComponent.prototype.autoPreActExecutorsClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        // if (this.designerState.propertyData.CompleteStrategy !== this.designerState.completeIterator[0].key
        //   && this.autoPreActExecutors === true) {
        //   this.message.info('【完成策略】为【会签】时，不允许设置自动审批，请了解！', () => {
        //     this.autoPreActExecutors = false;
        //   });
        //   return;
        // }
        if (this.designerState.propertyData.AssignStrategy === this.designerState.assignIterator[2].key
            && this.autoPreActExecutors === true) {
            this.message.info('【分配策略】为【领用】时，不允许设置自动审批，请了解！', (/**
             * @return {?}
             */
            function () {
                _this.autoPreActExecutors = false;
            }));
            return;
        }
        if (this.excludeAllPassExecutors === true && this.autoPreActExecutors === true) {
            this.message.info('所有已办理人员已设置不允许审批，所以上个节点已办理人员默认不允许自动审批！', (/**
             * @return {?}
             */
            function () {
                _this.autoPreActExecutors = false;
            }));
            return;
        }
        // this.autoPreActExecutors = !this.autoPreActExecutors;
        if (this.autoPreActExecutors && this.excludePreActExecutors) {
            this.excludePreActExecutors = false;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PerformerOptionsComponent.prototype.autoAllPassExecutorsClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        // if (this.designerState.propertyData.CompleteStrategy !== this.designerState.completeIterator[0].key
        //   && this.autoAllPassExecutors === true) {
        //   this.message.info('【完成策略】为【会签】时，不允许设置自动审批，请了解！', () => {
        //     this.autoAllPassExecutors = false;
        //   });
        //   return;
        // }
        if (this.designerState.propertyData.AssignStrategy === this.designerState.assignIterator[2].key
            && this.autoAllPassExecutors === true) {
            this.message.info('【分配策略】为【领用】时，不允许设置自动审批，请了解！', (/**
             * @return {?}
             */
            function () {
                _this.autoAllPassExecutors = false;
            }));
            return;
        }
        // this.autoAllPassExecutors = !this.autoAllPassExecutors;
        if (this.autoAllPassExecutors) {
            if (this.excludeAllPassExecutors) {
                this.excludeAllPassExecutors = false;
            }
            if (this.excludePreActExecutors) {
                this.excludePreActExecutors = false;
            }
        }
    };
    /**
     * @return {?}
     */
    PerformerOptionsComponent.prototype.getPerformerOptions = /**
     * @return {?}
     */
    function () {
        return {
            ExclusionPerformers: this.getExclusionPerformers(),
            NoPerformerStrategy: this.noPerformerStrategy,
            HistoricFirst: this.historicFirst,
            automaticPerformers: this.getAutoPerformers()
        };
    };
    /**
     * @private
     * @return {?}
     */
    PerformerOptionsComponent.prototype.getExclusionPerformers = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var exclusionPerf = [];
        if (this.excludeProcInstCreator) {
            exclusionPerf.push('procInstCreator');
        }
        if (this.excludePreActExecutors) {
            exclusionPerf.push('preActExecutors');
        }
        if (this.excludeAllPassExecutors) {
            exclusionPerf.push('allPassExecutors');
        }
        if (this.excludeExprPerformer) {
            exclusionPerf.push(this.excludeExprPerformer);
        }
        return exclusionPerf;
    };
    /**
     * @private
     * @return {?}
     */
    PerformerOptionsComponent.prototype.getAutoPerformers = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var autoPerf = new Array();
        if (this.autoProcInstCreator) {
            autoPerf.push('procInstCreator');
        }
        if (this.autoPreActExecutors) {
            autoPerf.push('preActExecutors');
        }
        if (this.autoAllPassExecutors) {
            autoPerf.push('allPassExecutors');
        }
        return autoPerf;
    };
    /**
     * @return {?}
     */
    PerformerOptionsComponent.prototype.openExprEditor = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f;
        if (this.designerState.schemas.length > 0) {
            try {
                for (var _g = __values(this.designerState.schemas), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var schema = _h.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_a = _g.return)) _a.call(_g);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerState.procInstContext.length > 0) {
            try {
                for (var _j = __values(this.designerState.procInstContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    context.push(variable);
                    // this.expr.addContext(variable);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _l = __values(this.designerState.formalParameterContext), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var variable = _m.value;
                    _loop_1(variable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _o = __values(this.designerState.participantContext), _p = _o.next(); !_p.done; _p = _o.next()) {
                    var variable = _p.value;
                    _loop_2(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _q = __values(this.designerState.processVariableContext), _r = _q.next(); !_r.done; _r = _q.next()) {
                    var variable = _r.value;
                    _loop_3(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_r && !_r.done && (_e = _q.return)) _e.call(_q);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_f = context_1.return)) _f.call(context_1);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        // if (this.excludeExprPerformer) {
        this.expr.addExpressionText(this.excludeExprPerformer);
        // }
        this.expr.buildExpression().then((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.excludeExprPerformer = d;
        }));
    };
    /**
     * @return {?}
     */
    PerformerOptionsComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.excludeExprPerformer = '';
    };
    PerformerOptionsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-performer-options',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">\u53C2\u4E0E\u8005\u9AD8\u7EA7\u9009\u9879</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <perfect-scrollbar [config]=\"{}\">\r\n          <form class=\"h-100\">\r\n            <div class=\"f-utils-fill-flex-column h-100 pb-4\">\r\n              <div class=\"farris-form form-inline farris-form-inline\">\r\n                <div class=\"col-12 farris-group-auto\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"historicFirst\" type=\"checkbox\" id=\"historicFirst\"\r\n                            [(ngModel)]=\"historicFirst\" />\r\n                          <label class=\"custom-control-label\" for=\"historicFirst\">\u518D\u6B21\u8FDB\u5165\u8282\u70B9\u65F6\uFF0C\u529E\u7406\u4EBA\u662F\u8282\u70B9\u7684\u5DF2\u529E\u4EBA\u5458</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-9 farris-group-auto mt-2 pr-4\">\r\n                  <div class=\"farris-group-wrap f-form-lable-auto pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <label class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">\u529E\u7406\u4EBA\u4E3A\u7A7A\u7B56\u7565\uFF1A</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap\">\r\n                        <farris-combo-list [(ngModel)]=\"noPerformerStrategy\" name=\"noPerformerStrategy\" [idField]=\"'value'\"\r\n                          [textField]=\"'text'\" [valueField]=\"'value'\" [data]=\"noPerformerStrategyList\" [panelHeight]=\"60\">\r\n                        </farris-combo-list>\r\n                        <div class=\"farris-feedback valid-feedback\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"mx-2 mt-3\">\r\n                  <div class=\"title-content\">\r\n                    <h4 class=\"title-text\">\u6392\u9664\u529E\u7406\u4EBA\u9009\u9879</h4><span class=\"title-line\"></span>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto mt-2\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"excludeProcInstCreator\" type=\"checkbox\" id=\"excludeProcInstCreator\"\r\n                            [(ngModel)]=\"excludeProcInstCreator\" (change)=\"excludeProcInstCreatorClick($event)\" />\r\n                          <label class=\"custom-control-label\" for=\"excludeProcInstCreator\">\u6D41\u7A0B\u53D1\u8D77\u4EBA\u9ED8\u8BA4\u4E0D\u53C2\u4E0E\u5BA1\u6279</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto mt-2\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"excludePreActExecutors\" type=\"checkbox\" id=\"excludePreActExecutors\"\r\n                            [(ngModel)]=\"excludePreActExecutors\" (change)=\"excludePreActExecutorsClick($event)\"/>\r\n                          <label class=\"custom-control-label\" for=\"excludePreActExecutors\">\u4E0A\u4E2A\u8282\u70B9\u5DF2\u529E\u7406\u4EBA\u5458\u9ED8\u8BA4\u4E0D\u53C2\u4E0E\u5BA1\u6279</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto mt-2\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"excludeAllPassExecutors\" type=\"checkbox\" id=\"excludeAllPassExecutors\"\r\n                            [(ngModel)]=\"excludeAllPassExecutors\" (change)=\"excludeAllPassExecutorsClick($event)\"/>\r\n                          <label class=\"custom-control-label\" for=\"excludeAllPassExecutors\">\u6240\u6709\u5DF2\u529E\u7406\u4EBA\u5458\u9ED8\u8BA4\u4E0D\u53C2\u4E0E\u5BA1\u6279</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-11 farris-group-auto pr-4\">\r\n                  <div class=\"farris-group-wrap f-form-lable-auto pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <label class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">\u6D41\u7A0B\u53D8\u91CF\uFF1A</span>\r\n                      </label>\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div #inputGroup class=\"input-group\">\r\n                          <input type=\"text\" class=\"form-control\" [(ngModel)]=\"excludeExprPerformer\" name=\"excludeExprPerformer\"\r\n                            [readOnly]=\"true\" />\r\n                          <div class=\"input-group-append\">\r\n                            <span [style.display]=\"showClearButton ? '' : 'none'\" class=\"input-group-text input-group-clear\"\r\n                              (click)=\"clear()\">\r\n                              <i class=\"f-icon modal_close\"></i>\r\n                            </span>\r\n                            <span class=\"input-group-text\" (click)=\"openExprEditor()\" style=\"background: #FFF;\">\r\n                              <i class=\"f-icon f-icon-lookup\"></i>\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"farris-feedback valid-feedback\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"mx-2 mt-3\">\r\n                  <div class=\"title-content\">\r\n                    <h4 class=\"title-text\">\u81EA\u52A8\u5BA1\u6279\u9009\u9879</h4><span class=\"title-line\"></span>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-12 farris-group-auto mt-2\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"autoProcInstCreator\" type=\"checkbox\" id=\"autoProcInstCreator\"\r\n                            [(ngModel)]=\"autoProcInstCreator\" (change)=\"autoProcInstCreatorClick($event)\" />\r\n                          <label class=\"custom-control-label\" for=\"autoProcInstCreator\">\u6D41\u7A0B\u53D1\u8D77\u4EBA\u9ED8\u8BA4\u81EA\u52A8\u5BA1\u6279\u901A\u8FC7</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div><div class=\"col-12 farris-group-auto mt-2\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"autoPreActExecutors\" type=\"checkbox\" id=\"autoPreActExecutors\"\r\n                            [(ngModel)]=\"autoPreActExecutors\" (change)=\"autoPreActExecutorsClick($event)\" />\r\n                          <label class=\"custom-control-label\" for=\"autoPreActExecutors\">\u4E0A\u4E00\u8282\u70B9\u529E\u7406\u4EBA\u5458\u9ED8\u8BA4\u81EA\u52A8\u5BA1\u6279\u901A\u8FC7</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div><div class=\"col-12 farris-group-auto mt-2\">\r\n                  <div class=\"farris-group-wrap pl-3\">\r\n                    <div class=\"form-group farris-form-group\">\r\n                      <div class=\"farris-input-wrap\">\r\n                        <div class=\"custom-control custom-checkbox\">\r\n                          <input class=\"custom-control-input\" name=\"autoAllPassExecutors\" type=\"checkbox\" id=\"autoAllPassExecutors\"\r\n                            [(ngModel)]=\"autoAllPassExecutors\" (change)=\"autoAllPassExecutorsClick($event)\" />\r\n                          <label class=\"custom-control-label\" for=\"autoAllPassExecutors\">\u6240\u6709\u5DF2\u529E\u7406\u4EBA\u5458\u9ED8\u8BA4\u81EA\u52A8\u5BA1\u6279\u901A\u8FC7</label>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </perfect-scrollbar>\r\n        \r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>",
                    styles: [".item-header{padding:1rem}.item{padding:.5rem 5rem}.title-content{color:#000;display:inline-flex;align-items:center;line-height:1.375rem;position:relative;overflow:hidden;padding:0 0 0 1rem;min-width:450px}.title-content ::before{content:'';width:.25rem;height:1.125rem;background:#59a1ff;border-radius:1px;position:absolute;top:50%;left:0;margin-top:-.5625rem}.title-text{font-size:1rem;line-height:1.375rem;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin-bottom:0;margin-right:10px}.title-line{flex-grow:1;border-bottom:1px dashed rgba(0,0,0,.1)}"]
                }] }
    ];
    /** @nocollapse */
    PerformerOptionsComponent.ctorParameters = function () { return [
        { type: NgZone },
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: MessagerService }
    ]; };
    PerformerOptionsComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        options: [{ type: Input }],
        exclusionPerformers: [{ type: Input }],
        inputGroup: [{ type: ViewChild, args: ['inputGroup',] }]
    };
    return PerformerOptionsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PerformerComponent = /** @class */ (function () {
    function PerformerComponent(viewModel, uistate, formBuilder, resolver, injector, modalService, message, designerUIState, expr, http) {
        var _this = this;
        this.viewModel = viewModel;
        this.uistate = uistate;
        this.formBuilder = formBuilder;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.http = http;
        this.cls = 'farris-main-area flex-column';
        this.display = true; // 控制矩阵参与者是否显示
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.isClose = true;
        this.modalConfig = {
            title: '参与者',
            width: 800,
            height: 515,
            showButtons: true
        };
        this.columns = [
            {
                field: 'type', width: 50, title: '类型',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.uistate.typeCollection }
                }
            },
            { field: 'performerName', width: 50, title: '名称' },
            { field: 'description', width: 100, title: '描述', showTips: true },
            {
                field: 'condition', width: 60, title: '启用条件', showTips: true,
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            _this.editConditon(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            if (e.rowData.type === 'wf.ComponentParticipant') {
                                /** @type {?} */
                                var i = _this.uistate.performerInfo.components.findIndex((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                function (item) { return item.id === e.rowData.id; }));
                                _this.uistate.performerInfo.components[i].condition = '';
                            }
                            else if (e.rowData.type === 'wf.ReportingLineParticipant') {
                                /** @type {?} */
                                var i = _this.uistate.performerInfo.reportingLines.findIndex((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                function (item) { return item.id === e.rowData.id; }));
                                _this.uistate.performerInfo.reportingLines[i].condition = '';
                            }
                            else if (e.rowData.type === 'wf.MatrixParticipant') {
                                /** @type {?} */
                                var i = _this.uistate.performerInfo.matrixParticipants.findIndex((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                function (item) { return item.id === e.rowData.id; }));
                                _this.uistate.performerInfo.matrixParticipants[i].condition = '';
                            }
                        })
                    }
                }
            }
        ];
        this.editState = 'new'; // 编辑状态，用于区分是新增还是编辑  new | edit
        this.afterEdit = (/**
         * @param {?} rowIndex
         * @param {?} rowData
         * @param {?=} column
         * @return {?}
         */
        function (rowIndex, rowData, column) {
            return of(true);
        });
        this.GetOrganizationType();
    }
    Object.defineProperty(PerformerComponent.prototype, "value", {
        set: /**
         * @param {?} partInfo
         * @return {?}
         */
        function (partInfo) {
            var _this = this;
            if (partInfo.performers && partInfo.performers.length > 0) {
                this.uistate.performerInfo.performers = partInfo.performers;
                this.uistate.performersList = this.uistate.performersList.concat((/** @type {?} */ (partInfo.performers)));
                this.uistate.performersList.map((/**
                 * @param {?} performer
                 * @return {?}
                 */
                function (performer) { return performer.description = _this.performerDescription((/** @type {?} */ (performer))); }));
            }
            if (partInfo.components && partInfo.components.length > 0) {
                this.uistate.performerInfo.components = partInfo.components;
                partInfo.components.forEach((/**
                 * @param {?} cmp
                 * @return {?}
                 */
                function (cmp) {
                    _this.uistate.performersList.push({
                        id: cmp.id,
                        type: 'wf.ComponentParticipant',
                        performerName: cmp.name,
                        description: _this.componentDescription(cmp),
                        condition: cmp.condition
                    });
                }));
            }
            if (partInfo.reportingLines && partInfo.reportingLines.length > 0) {
                this.uistate.performerInfo.reportingLines = partInfo.reportingLines;
                partInfo.reportingLines.forEach((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) {
                    _this.uistate.performersList.push({
                        id: r.id,
                        type: 'wf.ReportingLineParticipant',
                        performerName: r.reportingLineDefName + '-' + r.dimension,
                        description: _this.reportingLineDescription(r),
                        condition: r.condition
                    });
                }));
            }
            if (partInfo.matrixParticipants && partInfo.matrixParticipants.length > 0) {
                this.uistate.performerInfo.matrixParticipants = partInfo.matrixParticipants;
                partInfo.matrixParticipants.forEach((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) {
                    _this.uistate.performersList.push({
                        id: r.id,
                        type: 'wf.MatrixParticipant',
                        performerName: r.matrixDefName + '-' + r.dataFieldAlias,
                        description: _this.matrixDescription(r),
                        condition: r.condition
                    });
                }));
            }
            if (partInfo.options) {
                this.uistate.performerInfo.options = partInfo.options;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PerformerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.getMatrixConfig().subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            if (re && re.currentValue === 'false') {
                _this.display = false;
            }
        }));
    };
    /**
     * @return {?}
     */
    PerformerComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        this.editState = 'new';
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(PerformerEditComponent);
        this.compRef = compFactory.create(this.injector);
        this.compRef.instance.display = this.display;
        /** @type {?} */
        var modalConfig = {
            title: '参与者选择',
            width: 800,
            height: 515,
            buttons: this.editFooter,
            showButtons: true
        };
        this.editDialog = this.modalService.show(this.compRef, modalConfig);
    };
    /**
     * @return {?}
     */
    PerformerComponent.prototype.edit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.editState = 'edit';
        if (this.uistate.curPerformer) {
            /** @type {?} */
            var modalConfig_1 = {
                title: '参与者选择',
                width: 800,
                height: 515,
                buttons: this.editFooter,
                showButtons: true
            };
            /** @type {?} */
            var compFactory = this.resolver.resolveComponentFactory(PerformerEditComponent);
            this.compRef = compFactory.create(this.injector);
            switch (this.uistate.curPerformer.type) {
                case 'wf.PositionParticipant':
                    this.compRef.instance.performer = {
                        type: 'wf.PositionParticipant',
                        value: this.uistate.performerInfo.performers.find((/**
                         * @param {?} p
                         * @return {?}
                         */
                        function (p) { return p.id === _this.uistate.curPerformer.id; }))
                    };
                    break;
                case 'wf.UserParticipant':
                    this.compRef.instance.performer = {
                        type: 'wf.UserParticipant',
                        value: this.uistate.performerInfo.performers.find((/**
                         * @param {?} p
                         * @return {?}
                         */
                        function (p) { return p.id === _this.uistate.curPerformer.id; }))
                    };
                    break;
                case 'wf.ReportingLineParticipant':
                    /** @type {?} */
                    var reportingLine = this.uistate.performerInfo.reportingLines.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) {
                        return r.id === _this.uistate.curPerformer.id;
                    }));
                    this.compRef.instance.performer = {
                        type: 'wf.ReportingLineParticipant',
                        value: reportingLine
                    };
                    /** @type {?} */
                    var url = '/api/runtime/wf/v1.0/reportingLineDefinitions/' + reportingLine.reportingLineDefId;
                    this.http.get(url).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    function (res) {
                        if (!res) {
                            _this.message.error('该条汇报关系数据的定义已删除，该条数据将删除');
                            _this.remove();
                        }
                        else {
                            _this.editDialog = _this.modalService.show(_this.compRef, modalConfig_1);
                        }
                    }));
                    break;
                case 'wf.MatrixParticipant':
                    /** @type {?} */
                    var matrix = this.uistate.performerInfo.matrixParticipants.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) {
                        return r.id === _this.uistate.curPerformer.id;
                    }));
                    this.compRef.instance.performer = {
                        type: 'wf.MatrixParticipant',
                        value: matrix
                    };
                    /** @type {?} */
                    var urlMatrix = '/api/runtime/wf/v1.0/matrixDefinition/' + matrix.matrixDefId;
                    this.http.get(urlMatrix).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    function (res) {
                        if (!res) {
                            _this.message.error('该条矩阵数据的定义已删除，该条数据将删除');
                            _this.remove();
                        }
                        else {
                            _this.editDialog = _this.modalService.show(_this.compRef, modalConfig_1);
                        }
                    }));
                    break;
                case 'wf.ComponentParticipant':
                    this.compRef.instance.performer = {
                        type: 'wf.ComponentParticipant',
                        value: this.uistate.performerInfo.components.find((/**
                         * @param {?} c
                         * @return {?}
                         */
                        function (c) {
                            return c.id === _this.uistate.curPerformer.id;
                        }))
                    };
                    break;
            }
            if (this.uistate.curPerformer.type !== 'wf.ReportingLineParticipant' &&
                this.uistate.curPerformer.type !== 'wf.MatrixParticipant') { // 汇报关系和矩阵单独处理
                this.editDialog = this.modalService.show(this.compRef, modalConfig_1);
            }
        }
    };
    /**
     * @return {?}
     */
    PerformerComponent.prototype.remove = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.grid.selectedRow) {
            this.grid.endCellEdit();
            if (this.grid.selectedRow.data.type === 'wf.ComponentParticipant') {
                /** @type {?} */
                var i = this.uistate.performerInfo.components.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.id === _this.grid.selectedRow.data.id; }));
                this.uistate.performerInfo.components.splice(i, 1);
            }
            else if (this.grid.selectedRow.data.type === 'wf.ReportingLineParticipant') {
                /** @type {?} */
                var i = this.uistate.performerInfo.reportingLines.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.id === _this.grid.selectedRow.data.id; }));
                this.uistate.performerInfo.reportingLines.splice(i, 1);
            }
            else if (this.grid.selectedRow.data.type === 'wf.MatrixParticipant') {
                /** @type {?} */
                var i = this.uistate.performerInfo.matrixParticipants.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.id === _this.grid.selectedRow.data.id; }));
                this.uistate.performerInfo.matrixParticipants.splice(i, 1);
            }
            else {
                /** @type {?} */
                var i = this.uistate.performerInfo.performers.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.id === _this.grid.selectedRow.data.id; }));
                this.uistate.performerInfo.performers.splice(i, 1);
            }
            /** @type {?} */
            var index = this.uistate.performersList.findIndex((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p.id === _this.grid.selectedRow.data.id; }));
            this.uistate.performersList.splice(index, 1);
            this.grid.loadData(this.uistate.performersList);
        }
        else {
            this.message.info('请先选中一条参与者信息！');
        }
    };
    /**
     * @return {?}
     */
    PerformerComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.uistate.performerInfo.performers = [];
        this.uistate.performerInfo.components = [];
        this.uistate.performerInfo.reportingLines = [];
        this.uistate.performerInfo.matrixParticipants = [];
        this.uistate.performersList = [];
        this.grid.loadData(this.uistate.performersList);
    };
    /**
     * @return {?}
     */
    PerformerComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        this.grid.endCellEdit();
        /** @type {?} */
        var object = {
            value: this.uistate.performerInfo, parameters: null
        };
        this.submitModal.emit(object);
    };
    /**
     * @return {?}
     */
    PerformerComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @return {?}
     */
    PerformerComponent.prototype.editOK = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.compRef) {
            /** @type {?} */
            var re_1 = this.compRef.instance.getPerformers();
            if (re_1.userPerformers && re_1.userPerformers.length > 0) {
                re_1.userPerformers.forEach((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) {
                    /** @type {?} */
                    var i = _this.uistate.performerInfo.performers.findIndex((/**
                     * @param {?} a
                     * @return {?}
                     */
                    function (a) { return (a.id === p.id || a.performerId === p.performerId); }));
                    if (i > -1) {
                        /** @type {?} */
                        var id_1 = _this.uistate.performerInfo.performers[i].id;
                        _this.uistate.performerInfo.performers[i] = p;
                        /** @type {?} */
                        var index = _this.uistate.performersList.findIndex((/**
                         * @param {?} a
                         * @return {?}
                         */
                        function (a) { return a.id === id_1; }));
                        _this.uistate.performersList[index] = p;
                    }
                    else {
                        if (_this.editState === 'edit') {
                            _this.remove();
                        }
                        _this.uistate.performerInfo.performers.push(p);
                        _this.uistate.performersList = _this.uistate.performersList.concat([p]);
                    }
                }));
                this.uistate.performersList
                    .filter((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.type === _this.uistate.typeCollection[0].value || p.type === _this.uistate.typeCollection[1].value; }))
                    .map((/**
                 * @param {?} performer
                 * @return {?}
                 */
                function (performer) { return performer.description =
                    _this.performerDescription((/** @type {?} */ (performer))); }));
            }
            if (re_1.positionPerformers && re_1.positionPerformers.length > 0) {
                re_1.positionPerformers.forEach((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) {
                    // (1)id一致，为编辑岗位；（2）performid一致，新增的用户，岗位已存在
                    /** @type {?} */
                    var i = _this.uistate.performerInfo.performers.findIndex((/**
                     * @param {?} a
                     * @return {?}
                     */
                    function (a) { return (a.id === p.id || a.performerId === p.performerId); }));
                    if (i > -1) {
                        /** @type {?} */
                        var id_2 = _this.uistate.performerInfo.performers[i].id;
                        _this.uistate.performerInfo.performers[i] = p;
                        /** @type {?} */
                        var index = _this.uistate.performersList.findIndex((/**
                         * @param {?} a
                         * @return {?}
                         */
                        function (a) { return a.id === id_2; }));
                        _this.uistate.performersList[index] = p;
                    }
                    else {
                        _this.uistate.performerInfo.performers.push(p);
                        _this.uistate.performersList = _this.uistate.performersList.concat([p]);
                    }
                }));
                this.uistate.performersList
                    .filter((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.type === _this.uistate.typeCollection[0].value || p.type === _this.uistate.typeCollection[1].value; }))
                    .map((/**
                 * @param {?} performer
                 * @return {?}
                 */
                function (performer) { return performer.description =
                    _this.performerDescription((/** @type {?} */ (performer))); }));
            }
            if (re_1.component && re_1.component.metadataId && re_1.component.methodCode) {
                /** @type {?} */
                var i = this.uistate.performerInfo.components.findIndex((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return a.id === re_1.component.id; }));
                if (i > -1) {
                    this.uistate.performerInfo.components[i] = re_1.component;
                    /** @type {?} */
                    var index = this.uistate.performersList.findIndex((/**
                     * @param {?} a
                     * @return {?}
                     */
                    function (a) { return a.id === re_1.component.id; }));
                    this.uistate.performersList[index] = {
                        id: re_1.component.id,
                        type: 'wf.ComponentParticipant',
                        performerName: re_1.component.name,
                        description: this.componentDescription(re_1.component),
                        condition: re_1.component.condition
                    };
                }
                else {
                    this.uistate.performerInfo.components.push(re_1.component);
                    this.uistate.performersList.push({
                        id: re_1.component.id,
                        type: 'wf.ComponentParticipant',
                        performerName: re_1.component.name,
                        description: this.componentDescription(re_1.component),
                        condition: ''
                    });
                }
            }
            if (re_1.reportingLine && re_1.reportingLine.reportingLineDefId && re_1.reportingLine.dimension) {
                if (re_1.reportingLine.reportingReferObject === 'dept' && !re_1.reportingLine.refOrgId) {
                    this.isClose = false;
                    this.message.info('“部门”汇报关系类型下，参照人所在部门不能为空');
                }
                else if (re_1.reportingLine.reportingReferObject !== 'dept' && !re_1.reportingLine.refUserId && !re_1.reportingLine.refEmployeeId) { // 用户及其他人员汇报对象类型，参照用户和参照员工不能全部为空
                    this.isClose = false;
                    this.message.info('“用户”汇报关系类型下，参照人不能为空');
                }
                else {
                    this.isClose = true;
                    this.addReportingLineData(re_1);
                }
            }
            if (re_1.matrix && re_1.matrix.matrixDefId) {
                if (!re_1.matrix.conditionField1 && !re_1.matrix.conditionField2 && !re_1.matrix.conditionField3) {
                    this.isClose = false;
                    this.message.info('条件字段至少要存在一个');
                }
                else if (!re_1.matrix.dataFieldAlias) {
                    this.isClose = false;
                    this.message.info('数据字段不能为空');
                }
                else {
                    this.isClose = true;
                    this.addMatrixData(re_1);
                }
            }
            this.grid.loadData(this.uistate.performersList);
        }
        if (this.editDialog && this.isClose) {
            this.editDialog.close();
        }
    };
    /**
     * @private
     * @param {?} re
     * @return {?}
     */
    PerformerComponent.prototype.addReportingLineData = /**
     * @private
     * @param {?} re
     * @return {?}
     */
    function (re) {
        var e_1, _a;
        /** @type {?} */
        var i = this.uistate.performerInfo.reportingLines.findIndex((/**
         * @param {?} a
         * @return {?}
         */
        function (a) { return a.id === re.reportingLine.id; }));
        if (i > -1) {
            this.uistate.performerInfo.reportingLines[i] = re.reportingLine;
            /** @type {?} */
            var index = this.uistate.performersList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.id === re.reportingLine.id; }));
            this.uistate.performersList[index] = {
                id: re.reportingLine.id,
                type: 'wf.ReportingLineParticipant',
                performerName: re.reportingLine.reportingLineDefName + '-' + re.reportingLine.dimension,
                description: this.reportingLineDescription(re.reportingLine),
                condition: re.reportingLine.condition
            };
        }
        else {
            try {
                for (var _b = __values(this.uistate.performerInfo.reportingLines), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var reportingLineData = _c.value;
                    if (reportingLineData.reportingLineDefId === re.reportingLine.definitionId &&
                        reportingLineData.dimension === re.reportingLine.dimension &&
                        reportingLineData.refUserId === re.reportingLine.referUserId &&
                        reportingLineData.refEmployeeId === re.reportingLine.refEmployeeId &&
                        reportingLineData.refOrgId === re.reportingLine.referDeptId) {
                        this.message.error('该汇报关系已经进行过配置');
                        return;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.uistate.performerInfo.reportingLines.push(re.reportingLine);
            this.uistate.performersList.push({
                id: re.reportingLine.id,
                type: 'wf.ReportingLineParticipant',
                performerName: re.reportingLine.reportingLineDefName + '-' + re.reportingLine.dimension,
                description: this.reportingLineDescription(re.reportingLine),
                condition: re.reportingLine.condition
            });
        }
    };
    /**
     * @private
     * @param {?} re
     * @return {?}
     */
    PerformerComponent.prototype.addMatrixData = /**
     * @private
     * @param {?} re
     * @return {?}
     */
    function (re) {
        var e_2, _a;
        /** @type {?} */
        var i = this.uistate.performerInfo.matrixParticipants.findIndex((/**
         * @param {?} a
         * @return {?}
         */
        function (a) { return a.id === re.matrix.id; }));
        if (i > -1) {
            this.uistate.performerInfo.matrixParticipants[i] = re.matrix;
            /** @type {?} */
            var index = this.uistate.performersList.findIndex((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.id === re.matrix.id; }));
            this.uistate.performersList[index] = {
                id: re.matrix.id,
                type: 'wf.MatrixParticipant',
                performerName: re.matrix.matrixDefName + '-' + re.matrix.dataFieldAlias,
                description: this.matrixDescription(re.matrix),
                condition: re.matrix.condition
            };
        }
        else {
            try {
                for (var _b = __values(this.uistate.performerInfo.matrixParticipants), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var matrixData = _c.value;
                    if (matrixData.matrixDefId === re.matrix.matrixDefId &&
                        matrixData.conditionField1 === re.matrix.conditionField1 &&
                        matrixData.conditionField2 === re.matrix.conditionField2 &&
                        matrixData.conditionField3 === re.matrix.conditionField3 &&
                        matrixData.dataFieldAlias === re.matrix.dataFieldAlias) {
                        this.message.error('该矩阵已经进行过配置');
                        return;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.uistate.performerInfo.matrixParticipants.push(re.matrix);
            this.uistate.performersList.push({
                id: re.matrix.id,
                type: 'wf.MatrixParticipant',
                performerName: re.matrix.matrixDefName + '-' + re.matrix.dataFieldAlias,
                description: this.matrixDescription(re.matrix),
                condition: re.matrix.condition
            });
        }
    };
    /**
     * @return {?}
     */
    PerformerComponent.prototype.editCancel = /**
     * @return {?}
     */
    function () {
        if (this.editDialog) {
            this.editDialog.close();
        }
    };
    /**
     * @return {?}
     */
    PerformerComponent.prototype.participantOptionsSet = /**
     * @return {?}
     */
    function () {
        this.uistate.performerInfo.options = this.options.getPerformerOptions();
        this.optionsDialog.close();
    };
    /**
     * @private
     * @param {?} performer
     * @return {?}
     */
    PerformerComponent.prototype.performerDescription = /**
     * @private
     * @param {?} performer
     * @return {?}
     */
    function (performer) {
        if (performer.type === 'wf.UserParticipant') {
            if (performer.tag === 'expression') {
                return performer.performerId;
            }
            else {
                if (performer.orgName) {
                    return "\u90E8\u95E8\uFF1A" + performer.orgName;
                }
                else {
                    return '';
                }
            }
        }
        else if (performer.type === 'wf.PositionParticipant') {
            if (((/** @type {?} */ (performer))).positionType === '1') {
                if (performer.orgId) {
                    return "\u5C97\u4F4D\u7C7B\u578B\uFF1A\u901A\u7528\u5C97\u4F4D\uFF0C\u90E8\u95E8\uFF1A" + performer.orgId;
                }
                else {
                    return "\u5C97\u4F4D\u7C7B\u578B\uFF1A\u901A\u7528\u5C97\u4F4D";
                }
            }
            else if (((/** @type {?} */ (performer))).positionType === '0') {
                return '岗位类型：组织岗位';
            }
        }
    };
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    PerformerComponent.prototype.componentDescription = /**
     * @private
     * @param {?} component
     * @return {?}
     */
    function (component) {
        /** @type {?} */
        var des = "\u6784\u4EF6\uFF1A" + component.name + ",\u53C2\u6570\uFF1A{";
        if (component.actualParameters && component.actualParameters.length > 0) {
            component.actualParameters.forEach((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                des += p.code + "\uFF1A" + p.value + "\uFF0C";
            }));
            des = des.substring(0, des.length - 1);
        }
        des += '}';
        return des;
    };
    /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    PerformerComponent.prototype.reportingLineDescription = /**
     * @private
     * @param {?} reportingLine
     * @return {?}
     */
    function (reportingLine) {
        /** @type {?} */
        var description = '';
        if (reportingLine.refUserId) {
            description += "\u53C2\u7167\u4EBA\uFF1A" + reportingLine.refUserId;
        }
        if (reportingLine.refEmployeeId) {
            description += "\u53C2\u7167\u4EBA\uFF1A" + reportingLine.refEmployeeId;
        }
        if (reportingLine.refOrgId) {
            if (reportingLine.refUserId) {
                description += "\uFF0C";
            }
            if (reportingLine.refEmployeeId) {
                description += "\uFF0C";
            }
            description += "\u53C2\u7167\u7EC4\u7EC7\uFF1A" + reportingLine.refOrgId;
        }
        return description;
    };
    /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    PerformerComponent.prototype.matrixDescription = /**
     * @private
     * @param {?} matrix
     * @return {?}
     */
    function (matrix) {
        /** @type {?} */
        var description = '';
        if (matrix.conditionField1) {
            description += "\u6761\u4EF61\uFF1A" + matrix.conditionFieldText1 + "\uFF0C";
        }
        if (matrix.conditionField2) {
            description += "\u6761\u4EF62\uFF1A" + matrix.conditionFieldText2 + "\uFF0C";
        }
        if (matrix.conditionField3) {
            description += "\u6761\u4EF63\uFF1A" + matrix.conditionFieldText3 + "\uFF0C";
        }
        if (matrix.dataFieldAlias) {
            description += "\u6570\u636E\uFF1A" + matrix.dataFieldAlias + "\uFF0C";
        }
        return description.slice(0, description.length - 1);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    PerformerComponent.prototype.editConditon = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        var e_3, _a, e_4, _b, e_5, _c, e_6, _d, e_7, _e, e_8, _f, e_9, _g;
        if (this.designerUIState.schemas.length > 0) {
            try {
                for (var _h = __values(this.designerUIState.schemas), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var schema = _j.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_a = _h.return)) _a.call(_h);
                }
                finally { if (e_3) throw e_3.error; }
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerUIState.procInstContext.length > 0) {
            try {
                for (var _k = __values(this.designerUIState.procInstContext), _l = _k.next(); !_l.done; _l = _k.next()) {
                    var variable = _l.value;
                    context.push(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_l && !_l.done && (_b = _k.return)) _b.call(_k);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.designerUIState.formalParameterContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _m = __values(this.designerUIState.formalParameterContext), _o = _m.next(); !_o.done; _o = _m.next()) {
                    var variable = _o.value;
                    _loop_1(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_o && !_o.done && (_c = _m.return)) _c.call(_m);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (this.designerUIState.participantContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _p = __values(this.designerUIState.participantContext), _q = _p.next(); !_q.done; _q = _p.next()) {
                    var variable = _q.value;
                    _loop_2(variable);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_q && !_q.done && (_d = _p.return)) _d.call(_p);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _r = __values(this.designerUIState.processVariableContext), _s = _r.next(); !_s.done; _s = _r.next()) {
                    var variable = _s.value;
                    _loop_3(variable);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_s && !_s.done && (_e = _r.return)) _e.call(_r);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            var _loop_4 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _t = __values(this.designerUIState.activityComponentContext), _u = _t.next(); !_u.done; _u = _t.next()) {
                    var variable = _u.value;
                    _loop_4(variable);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_u && !_u.done && (_f = _t.return)) _f.call(_t);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_g = context_1.return)) _g.call(context_1);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.setEditPattern(ExprEditMode.Conditional); // 默认打开简易表达式编辑器
        this.expr.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        function (cond) {
            if (_this.grid.selectedRow.data.type === 'wf.ComponentParticipant') {
                _this.uistate.performerInfo.components.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.id === _this.grid.selectedRow.data.id; })).condition = cond;
            }
            else if (_this.grid.selectedRow.data.type === 'wf.ReportingLineParticipant') {
                _this.uistate.performerInfo.reportingLines.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.id === _this.grid.selectedRow.data.id; })).condition = cond;
            }
            else if (_this.grid.selectedRow.data.type === 'wf.MatrixParticipant') {
                _this.uistate.performerInfo.matrixParticipants.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.id === _this.grid.selectedRow.data.id; })).condition = cond;
            }
            else {
                _this.uistate.performerInfo.performers.find((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return p.id === _this.grid.selectedRow.data.id; })).condition = cond;
            }
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PerformerComponent.prototype.selectChanged = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.uistate.curPerformer = data.data;
    };
    /**
     * @private
     * @return {?}
     */
    PerformerComponent.prototype.GetOrganizationType = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var url = '/api/runtime/sys/v1.0/authfields/globalauthfields';
        this.http.get(url)
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return _this.designerUIState.orgTypeCollection = data.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return ({ value: d.id, text: d.name }); })); }));
    };
    /**
     * @private
     * @return {?}
     */
    PerformerComponent.prototype.getMatrixConfig = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/generalConfig/Is_EnableMatrix";
        return this.http.get(url);
    };
    PerformerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-performer',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span>\r\n        <h4 class=\"f-title-text\">\u53C2\u4E0E\u8005\u5217\u8868</h4>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n      <button class=\"btn btn-primary mr-2\" (click)=\"add()\">\u65B0\u589E</button>\r\n      <button class=\"btn btn-secondary mr-2\" [disabled]=\"(!uistate.curPerformer)\"\r\n      (click)=\"edit()\">\u7F16\u8F91</button>\r\n      <button class=\"btn btn-secondary mr-2\" (click)=\"remove()\">\u79FB\u9664</button>\r\n      <button class=\"btn btn-secondary mr-2\" (click)=\"clear()\">\u6E05\u7A7A</button>\r\n      <button class=\"btn btn-secondary\" (click)=\"participantOptions.show()\">\u53C2\u4E0E\u8005\u9009\u9879</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"uistate.performersList\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\"\r\n        [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n        [multiSelect]=\"false\" [afterEdit]=\"afterEdit\" (selectChanged)=\"selectChanged($event)\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n<ng-template #editFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"editOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"editCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n<farris-dialog #participantOptions [buttons]=\"buttonRef\" [width]=\"500\" [height]=\"530\" [title]=\"'\u53C2\u4E0E\u8005\u9009\u9879'\">\r\n  <app-performer-options [options]=\"uistate.performerInfo.options\"></app-performer-options>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"participantOptionsSet()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"participantOptions.close()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    providers: [PerformerViewModel, PerformerRepository, PerformerUIState],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PerformerComponent.ctorParameters = function () { return [
        { type: PerformerViewModel },
        { type: PerformerUIState },
        { type: FormBuilder },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService },
        { type: MessagerService },
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: HttpService }
    ]; };
    PerformerComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        editFooter: [{ type: ViewChild, args: ['editFooter',] }],
        options: [{ type: ViewChild, args: [PerformerOptionsComponent,] }],
        optionsDialog: [{ type: ViewChild, args: ['participantOptions',] }],
        grid: [{ type: ViewChild, args: [DatagridComponent,] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        editorParams: [{ type: Input }]
    };
    return PerformerComponent;
}());
var PerformerConverter = /** @class */ (function () {
    function PerformerConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    PerformerConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if ((data.performers && data.performers.length > 0)
            || (data.components && data.components.length > 0)
            || (data.reportingLines && data.reportingLines.length > 0)
            || (data.matrixParticipants && data.matrixParticipants.length > 0)) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    };
    return PerformerConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var OrganizationPotentialOwnerComponent = /** @class */ (function () {
    function OrganizationPotentialOwnerComponent() {
        var _this = this;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: '选项设置',
            width: 425,
            height: 360,
            showButtons: true
        };
        this.organizationLevelCollection = [{
                value: 'GLOBAL',
                text: '全员',
                orgId: 'global',
            }, {
                value: 'UNIT',
                text: '本单位',
                orgId: 'currentUnit'
            }, {
                value: 'DEPARTMENT',
                text: '本部门',
                orgId: 'currentDepartment'
            }];
        this.actionCollection = [{
                value: ActionScope.AddSignBehind, name: '加签'
            }, {
                value: ActionScope.AddSignFront, name: '征询'
            }, {
                value: ActionScope.Transfer, name: '移交'
            }, {
                value: ActionScope.Notify, name: '知会'
            }];
        this.enable = false;
        this.organizationLevel = this.organizationLevelCollection[0].value;
        this.action = this.actionCollection[0].value;
        this.includeChildren = false;
        this.actionName = (/**
         * @return {?}
         */
        function () {
            return _this.actionCollection.find((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.value === _this.action; })).name;
        });
    }
    Object.defineProperty(OrganizationPotentialOwnerComponent.prototype, "value", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.action = v.action;
            if (this.action === this.actionCollection[2].value) {
                if (v.enable === null || v.enable === undefined) {
                    this.enable = true;
                }
                else {
                    this.enable = v.enable;
                }
            }
            else {
                this.enable = v.enable;
            }
            if (v.scope) {
                this.organizationLevel = v.scope.organizationLevel;
                this.includeChildren = v.scope.includeChildren;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    OrganizationPotentialOwnerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    OrganizationPotentialOwnerComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var scope = new ActionOrganizationScope();
        scope.enable = this.enable;
        scope.action = this.action;
        if (scope.enable && this.organizationLevel !== this.organizationLevelCollection[0].value) {
            /** @type {?} */
            var potential = new OrganizationPotentialOwner();
            potential.actionScope = this.action;
            potential.organizationLevel = (/** @type {?} */ (this.organizationLevel));
            potential.organizationId = this.organizationLevelCollection.find((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return o.value === _this.organizationLevel; })).orgId;
            potential.organizationName = this.organizationLevelCollection.find((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return o.value === _this.organizationLevel; })).text;
            potential.includeChildren = this.includeChildren;
            potential.tag = 'variable';
            scope.scope = potential;
        }
        /** @type {?} */
        var object = { value: scope, parameters: null };
        this.submitModal.emit(object);
    };
    /**
     * @return {?}
     */
    OrganizationPotentialOwnerComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    OrganizationPotentialOwnerComponent.prototype.valueChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        switch (event.value) {
            case this.organizationLevelCollection[0].value:
                this.includeChildren = false;
                break;
            case this.organizationLevelCollection[1].value:
                this.includeChildren = true;
                break;
            case this.organizationLevelCollection[2].value:
                this.includeChildren = false;
                break;
        }
    };
    OrganizationPotentialOwnerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-organization-potential-owner',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">{{actionName()+'\u9009\u9879'}}</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <div class=\"farris-form form-inline farris-form-inline\">\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u662F\u5426\u542F\u7528</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-switch [(ngModel)]=\"enable\" name=\"enable\"></farris-switch>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto mt-4 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">{{actionName()+'\u8303\u56F4'}}</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1 pr-5\">\r\n                  <farris-combo-list [panelHeight]=\"100\" [(ngModel)]=\"organizationLevel\" name=\"actionScope\" [idField]=\"'value'\"\r\n                    [textField]=\"'text'\" [valueField]=\"'value'\" [data]=\"organizationLevelCollection\"\r\n                    (valueChange)=\"valueChange($event)\" [readonly]=\"enable===false\">\r\n                  </farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div *ngIf=\"organizationLevel===organizationLevelCollection[2].value\" class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u5305\u542B\u4E0B\u7EA7</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-switch [(ngModel)]=\"includeChildren\" name=\"includeChildren\" [editable]=\"enable===true\"></farris-switch>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [".title-content{color:#000;display:inline-flex;align-items:center;line-height:1.375rem;position:relative;overflow:hidden;padding:0 0 0 1rem;min-width:390px}.title-content ::before{content:'';width:.25rem;height:1.125rem;background:#59a1ff;border-radius:1px;position:absolute;top:50%;left:0;margin-top:-.5625rem}.title-text{font-size:1rem;line-height:1.375rem;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin-bottom:0;margin-right:10px}.title-line{flex-grow:1;border-bottom:1px dashed rgba(0,0,0,.1)}"]
                }] }
    ];
    /** @nocollapse */
    OrganizationPotentialOwnerComponent.ctorParameters = function () { return []; };
    OrganizationPotentialOwnerComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
    };
    return OrganizationPotentialOwnerComponent;
}());
var OrganizationPotentialOwnerConverter = /** @class */ (function () {
    function OrganizationPotentialOwnerConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    OrganizationPotentialOwnerConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data.action === ActionScope.Transfer && (data.enable === null || data.enable === undefined)) {
            return '（已设置）';
        }
        else {
            if (data.enable) {
                return '（已设置）';
            }
            else {
                return '（未设置）';
            }
        }
    };
    return OrganizationPotentialOwnerConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AnonymousSet = /** @class */ (function () {
    function AnonymousSet() {
        this.isAnonymity = false;
        this.anonymous = '审批人';
    }
    return AnonymousSet;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AnonymousSetComponent = /** @class */ (function () {
    function AnonymousSetComponent(injector) {
        this.injector = injector;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.anonymousSet = new AnonymousSet();
        this.modalConfig = {
            title: '匿名选项',
            width: 450,
            height: 360,
            showButtons: true
        };
    }
    Object.defineProperty(AnonymousSetComponent.prototype, "value", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this.anonymousSet.isAnonymity = data.isAnonymity || false;
            this.anonymousSet.anonymous = data.anonymous || '审批人';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AnonymousSetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    AnonymousSetComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var object = { value: this.anonymousSet, parameters: null };
        this.submitModal.emit(object);
    };
    /**
     * @return {?}
     */
    AnonymousSetComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    AnonymousSetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-anonymous-set',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">\u533F\u540D\u8BBE\u7F6E</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <div class=\"farris-form form-inline farris-form-inline\">\r\n          <div class=\"col-12 farris-group-auto my-3 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u662F\u5426\u542F\u7528</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-switch [(ngModel)]=\"anonymousSet.isAnonymity\" name=\"isAnonymity\"></farris-switch>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 farris-group-auto mt-4 pr-5\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u533F\u540D\u4EE3\u79F0</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <textarea class=\"form-control\" type=\"text\" value=\"anonymous\" [(ngModel)]=\"anonymousSet.anonymous\" name=\"anonymous\"\r\n                  style=\"height: 50px;\" [readOnly]=\"!anonymousSet.isAnonymity\"></textarea>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    AnonymousSetComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    AnonymousSetComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
    };
    return AnonymousSetComponent;
}());
var AnonymousSetConverter = /** @class */ (function () {
    function AnonymousSetConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    AnonymousSetConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.isAnonymity) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    };
    return AnonymousSetConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var VariableSetting = /** @class */ (function () {
    function VariableSetting() {
    }
    return VariableSetting;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var VariableSettingComponent = /** @class */ (function () {
    function VariableSettingComponent(resolver, injector, modalService, message, uistate, expr) {
        var _this = this;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.uistate = uistate;
        this.expr = expr;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.value = new Array();
        this.editorParams = {};
        this.columns = [];
        this.tags = [
            { value: 'constant', text: '常量' },
            { value: 'expression', text: '表达式' },
            { value: 'component', text: '构件' }
        ];
        this.opportunities = [
            { value: 'ACTIVITY_STARTED', text: '活动开始' },
            { value: 'ACTIVITY_COMPLETED', text: '活动结束' }
        ];
        this.modalConfig = {
            title: '变量设置',
            width: 780,
            height: 460,
            showButtons: true
        };
        this.beforeEdit = (/**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            /** @type {?} */
            var rowData = (/** @type {?} */ (param.rowData));
            /** @type {?} */
            var column = param.column;
            if (column.field === 'valueText') {
                if (((/** @type {?} */ (rowData))).tag === _this.tags[0].value) {
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                }
                else {
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            showClear: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                _this.valueEdit(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                console.log('clear', e);
                            })
                        }
                    };
                }
            }
            return of(true);
        });
    }
    /**
     * @return {?}
     */
    VariableSettingComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.columns = [
            {
                field: 'variableCode', width: 90, title: '变量编号', sortable: true,
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'variableName', width: 90, title: '变量名称', sortable: true,
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }, {
                field: 'tag', width: 60, title: '值类型', sortable: true,
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.tags }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: {
                        valueField: 'value', textField: 'text', data: this.tags, idField: 'value', panelHeight: 'auto', showClear: false,
                        selectChange: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            _this.value = _this.value.map((/**
                             * @param {?} v
                             * @return {?}
                             */
                            function (v) {
                                if (v.variableCode === e.rowId) {
                                    v.value = null;
                                    v.valueText = null;
                                    if (v.component) {
                                        v.component = null;
                                    }
                                    return v;
                                }
                                else {
                                    return v;
                                }
                            }));
                        })
                    }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }, {
                field: 'executionTime', width: 80, title: '执行时机', sortable: true,
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.opportunities }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: {
                        valueField: 'value', textField: 'text', data: this.opportunities, idField: 'value', panelHeight: 'auto', showClear: false,
                    }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ],
            },
            {
                field: 'valueText', width: 150, title: '变量值', showTips: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }
        ];
    };
    /**
     * @return {?}
     */
    VariableSettingComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ProcessVariablesComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.variableSetting = true;
        compRef.instance.value = this.uistate.ProcessVariables;
        compRef.instance.variableSetEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            var e_1, _a;
            var _loop_1 = function (v) {
                /** @type {?} */
                var variableSet = new VariableSetting();
                variableSet.variableCode = v.data.name;
                variableSet.variableName = v.data.documentation;
                variableSet.tag = v.data.tag || _this.tags[0].value;
                variableSet.executionTime = v.data.executionTime || _this.opportunities[0].value;
                if (_this.value.findIndex((/**
                 * @param {?} i
                 * @return {?}
                 */
                function (i) { return i.variableCode === variableSet.variableCode; })) === -1) {
                    _this.value = _this.value.concat([variableSet]);
                }
            };
            try {
                for (var re_1 = __values(re), re_1_1 = re_1.next(); !re_1_1.done; re_1_1 = re_1.next()) {
                    var v = re_1_1.value;
                    _loop_1(v);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (re_1_1 && !re_1_1.done && (_a = re_1.return)) _a.call(re_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            dialog.close();
        }));
        compRef.instance.closeModal.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: '流程变量',
            width: 660,
            height: 460,
            showButtons: true,
            buttons: compRef.instance.modalFooter
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @return {?}
     */
    VariableSettingComponent.prototype.delete = /**
     * @return {?}
     */
    function () {
        this.grid.endCellEdit();
        /** @type {?} */
        var selected = this.grid.selectedRow;
        if (!selected) {
            this.message.info('尚未选中变量！');
            return;
        }
        this.value = this.value.filter((/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return v.variableCode !== selected.data.variableCode; }));
    };
    /**
     * @return {?}
     */
    VariableSettingComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        this.grid.endCellEdit();
        if (this.validator()) {
            /** @type {?} */
            var object = { value: this.value, parameters: null };
            this.submitModal.emit(object);
        }
    };
    /**
     * @return {?}
     */
    VariableSettingComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @return {?}
     */
    VariableSettingComponent.prototype.validator = /**
     * @return {?}
     */
    function () {
        var e_2, _a;
        try {
            for (var _b = __values(this.value), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                if (!item.value) {
                    this.message.warning('变量值不允许为空！');
                    return false;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return true;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    VariableSettingComponent.prototype.endEdit = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data.column.field === 'valueText' && data.rowData.tag === this.tags[0].value) {
            data.rowData.value = data.rowData.valueText;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    VariableSettingComponent.prototype.valueEdit = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var rowdata = e.rowData;
        switch (rowdata.tag) {
            case this.tags[1].value:
                this.editExpression(e);
                break;
            case this.tags[2].value:
                this.editComponent(e);
                break;
        }
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    VariableSettingComponent.prototype.editExpression = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var e_3, _a, e_4, _b, e_5, _c, e_6, _d, e_7, _e, e_8, _f;
        /** @type {?} */
        var data = e.rowData;
        if (this.uistate.schemas.length > 0) {
            try {
                for (var _g = __values(this.uistate.schemas), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var schema = _h.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_a = _g.return)) _a.call(_g);
                }
                finally { if (e_3) throw e_3.error; }
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.uistate.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.uistate.procInstContext.length > 0) {
            try {
                for (var _j = __values(this.uistate.procInstContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    context.push(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.uistate.formalParameterContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _l = __values(this.uistate.formalParameterContext), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var variable = _m.value;
                    _loop_2(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (this.uistate.participantContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _o = __values(this.uistate.participantContext), _p = _o.next(); !_p.done; _p = _o.next()) {
                    var variable = _p.value;
                    _loop_3(variable);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        if (this.uistate.processVariableContext.length > 0) {
            var _loop_4 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _q = __values(this.uistate.processVariableContext), _r = _q.next(); !_r.done; _r = _q.next()) {
                    var variable = _r.value;
                    _loop_4(variable);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_r && !_r.done && (_e = _q.return)) _e.call(_q);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_f = context_1.return)) _f.call(context_1);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 表达式展现模式：默认高级版
        this.expr.addExpressionText(data.value);
        this.expr.buildExpression().then((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            e.formControl.setValue(re);
            e.instance.cd.detectChanges();
            data.value = re;
        }));
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    VariableSettingComponent.prototype.editComponent = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var data = e.rowData;
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ComponentEditComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.component = data.component;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            e.formControl.setValue(re.Name + '-' + re.MethodCode);
            e.instance.cd.detectChanges();
            data.value = re.Id;
            data.component = re;
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: '构件',
            width: 800,
            height: 515,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    VariableSettingComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-variable-setting',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span>\r\n        <h4 class=\"f-title-text\">\u5217\u8868</h4>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"add()\">\u65B0\u589E</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"delete()\">\u5220\u9664</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"value\" [columns]=\"columns\" [idField]=\"'variableCode'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n        [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\"\r\n        [showLineNumber]=\"true\" [lineNumberTitle]=\"'\u5E8F\u53F7'\" [lineNumberWidth]=\"50\" [striped]=\"true\"\r\n        (endEdit)=\"endEdit($event)\" [beforeEdit]=\"beforeEdit\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n<ng-template #cell let-ctx>\r\n  <span (click)=\"valueEdit(ctx)\" class=\"link\"> {{ ctx.rowData.value?'\uFF08\u5DF2\u8BBE\u7F6E\uFF09': '\uFF08\u672A\u8BBE\u7F6E\uFF09' }}</span>\r\n</ng-template>",
                    styles: [".link{color:#1206bb;font-size:14px}.link:hover{color:#5d478b;font-size:14px}"]
                }] }
    ];
    /** @nocollapse */
    VariableSettingComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService },
        { type: MessagerService },
        { type: ProcessDesignerUIState },
        { type: ExpressionService }
    ]; };
    VariableSettingComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        editorParams: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        grid: [{ type: ViewChild, args: ['grid',] }],
        cell: [{ type: ViewChild, args: ['cell',] }]
    };
    return VariableSettingComponent;
}());
var VariableSettingConverter = /** @class */ (function () {
    function VariableSettingConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    VariableSettingConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.length > 0) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    };
    return VariableSettingConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ApprovalPivotConfig = /** @class */ (function () {
    function ApprovalPivotConfig() {
        this.enable = false;
        this.title = '审批要点';
        this.approvalPivots = new Array();
    }
    return ApprovalPivotConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ApprovalPivot = /** @class */ (function () {
    function ApprovalPivot() {
        this.id = ProcessDeUtil.GenerateElementId();
        this.type = 'REMIND';
    }
    return ApprovalPivot;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ApprovalPivotComponent = /** @class */ (function () {
    function ApprovalPivotComponent(designerUIState, expr, message) {
        var _this = this;
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.message = message;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.config = new ApprovalPivotConfig();
        this.typeList = [
            { value: 'REMIND', text: '文字提示' }
        ];
        this.columns = [
            {
                field: 'type', width: 80, title: '类型',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.typeList }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.typeList, idField: 'value', panelHeight: 'auto', enableClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'condition', width: 120, title: '条件', showTips: true,
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            _this.editConditon(e);
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            console.log('clear', e);
                        })
                    }
                }
            },
            {
                field: 'title', width: 80, title: '显示名称',
                editor: { type: EditorTypes.TEXTBOX, options: {} }
            }, {
                field: 'description', width: 100, title: '详细说明', showTips: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} }
            }
        ];
        this.modalConfig = {
            title: '审批要点',
            width: 800,
            height: 480,
            showButtons: true
        };
    }
    Object.defineProperty(ApprovalPivotComponent.prototype, "value", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            var e_1, _a;
            if (data) {
                this.config.enable = data.enable;
                this.config.title = data.title;
                if (data.approvalPivots && data.approvalPivots.length > 0) {
                    try {
                        for (var _b = __values(data.approvalPivots), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var a = _c.value;
                            /** @type {?} */
                            var approvalPivot = new ApprovalPivot();
                            approvalPivot.type = a.type;
                            approvalPivot.title = a.title;
                            approvalPivot.description = a.description;
                            if (a.condition) {
                                if (typeof (a.condition) === 'string') {
                                    approvalPivot.condition = a.condition;
                                }
                                else {
                                    approvalPivot.condition = a.condition._value;
                                }
                            }
                            this.config.approvalPivots = this.config.approvalPivots.concat([approvalPivot]);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ApprovalPivotComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ApprovalPivotComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var approvalPivot = new ApprovalPivot();
        this.config.approvalPivots = this.config.approvalPivots.concat([approvalPivot]);
    };
    /**
     * @return {?}
     */
    ApprovalPivotComponent.prototype.delete = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selectedRow = this.grid.selectedRow;
        if (!selectedRow) {
            this.message.info('尚未选中审批要点！');
            return;
        }
        this.config.approvalPivots = this.config.approvalPivots.filter((/**
         * @param {?} a
         * @return {?}
         */
        function (a) { return a.id !== selectedRow.id; }));
    };
    /**
     * @return {?}
     */
    ApprovalPivotComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        if (!this.config.title && this.config.enable) {
            this.message.info('尚未填写显示标题！');
            return;
        }
        this.grid.endCellEdit();
        if (this.validator()) {
            /** @type {?} */
            var object = { value: this.config, parameters: null };
            this.submitModal.emit(object);
        }
    };
    /**
     * @return {?}
     */
    ApprovalPivotComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @private
     * @return {?}
     */
    ApprovalPivotComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        return true;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ApprovalPivotComponent.prototype.editConditon = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var e_2, _a, e_3, _b, e_4, _c, e_5, _d, e_6, _e, e_7, _f, e_8, _g;
        if (this.designerUIState.schemas.length > 0) {
            try {
                for (var _h = __values(this.designerUIState.schemas), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var schema = _j.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_a = _h.return)) _a.call(_h);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerUIState.procInstContext.length > 0) {
            try {
                for (var _k = __values(this.designerUIState.procInstContext), _l = _k.next(); !_l.done; _l = _k.next()) {
                    var variable = _l.value;
                    context.push(variable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_l && !_l.done && (_b = _k.return)) _b.call(_k);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.designerUIState.formalParameterContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _m = __values(this.designerUIState.formalParameterContext), _o = _m.next(); !_o.done; _o = _m.next()) {
                    var variable = _o.value;
                    _loop_1(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_o && !_o.done && (_c = _m.return)) _c.call(_m);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.designerUIState.participantContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _p = __values(this.designerUIState.participantContext), _q = _p.next(); !_q.done; _q = _p.next()) {
                    var variable = _q.value;
                    _loop_2(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_q && !_q.done && (_d = _p.return)) _d.call(_p);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _r = __values(this.designerUIState.processVariableContext), _s = _r.next(); !_s.done; _s = _r.next()) {
                    var variable = _s.value;
                    _loop_3(variable);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_s && !_s.done && (_e = _r.return)) _e.call(_r);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        if (this.designerUIState.activityComponentContext.length > 0) {
            var _loop_4 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _t = __values(this.designerUIState.activityComponentContext), _u = _t.next(); !_u.done; _u = _t.next()) {
                    var variable = _u.value;
                    _loop_4(variable);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_u && !_u.done && (_f = _t.return)) _f.call(_t);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_g = context_1.return)) _g.call(context_1);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        this.expr.addExpressionText(e.instance.value);
        this.expr.setEditPattern(ExprEditMode.Conditional);
        this.expr.buildExpression().then((/**
         * @param {?} cond
         * @return {?}
         */
        function (cond) {
            e.formControl.setValue(cond);
            e.instance.cd.detectChanges();
        }));
    };
    ApprovalPivotComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-approval-pivot',
                    template: "<div class=\"f-page\">\r\n  <section class=\"f-page-main d-flex flex-column\">\r\n    <farris-section class=\"pt-0 f-section-form f-section-in-mainsubcard\" [mainTitle]=\"'\u5BA1\u6279\u8981\u70B9'\" [enableAccordion]=\"'default'\"\r\n      [enableMaximize]=\"false\">\r\n      <div class=\"f-form-layout farris-form farris-form-controls-inline\">\r\n        <fieldset class=\"f-section-formgroup\">\r\n          <div class=\"f-section-formgroup-inputs\">\r\n            <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">\u662F\u5426\u542F\u7528</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <farris-switch [(ngModel)]=\"config.enable\" name=\"enable\"></farris-switch>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u663E\u793A\u6807\u9898</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"config.title\" name=\"title\"/>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n      </div>\r\n    </farris-section>\r\n    <farris-section class=\"pt-0 f-section-grid f-section-in-managelist\" [mainTitle]=\"'\u5217\u8868'\" [enableAccordion]=\"''\"\r\n      [enableMaximize]=\"false\" [fill]=\"true\">\r\n      <ng-template farrisSectionToolbar>\r\n        <button class=\"btn btn-link pr-2 mr-2\" (click)=\"add()\">\u65B0\u589E</button>\r\n        <button class=\"btn btn-link mr-0\" (click)=\"delete()\">\u5220\u9664</button>\r\n      </ng-template>\r\n      <farris-datagrid class=\"f-component-grid\" [columns]=\"columns\" [data]=\"config.approvalPivots\" #grid [idField]=\"'id'\" [showLineNumber]=\"true\"\r\n        [striped]=\"true\" [showCheckbox]=\"false\" [pagination]=\"false\" [fit]=\"true\" [fitColumns]=\"true\" [editable]=\"true\" [editMode]=\"'cell'\"\r\n        [multiSelect]=\"false\">\r\n      </farris-datagrid>\r\n    </farris-section>\r\n  </section>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ApprovalPivotComponent.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: MessagerService }
    ]; };
    ApprovalPivotComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        grid: [{ type: ViewChild, args: ['grid',] }],
        value: [{ type: Input }]
    };
    return ApprovalPivotComponent;
}());
var ApprovalPivotConverter = /** @class */ (function () {
    function ApprovalPivotConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    ApprovalPivotConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.enable) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    };
    return ApprovalPivotConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UrgeHandleRule = /** @class */ (function () {
    function UrgeHandleRule() {
        this.urgeHandleAble = false;
        this.earlyTime = 0;
        this.intervalTime = 0;
        this.urgeMessageSubject = "{\"expr\":\"'催办审批：' + DefaultFunction.GetContextParameter(\\\"bizDefName\\\")\",\"sexpr\":\"\"}";
        this.urgeMessageContent = "{\"expr\":\"'请您尽快审批' + DefaultFunction.GetContextParameter(\\\"procInstCreatorName\\\") + '的' + DefaultFunction.GetContextParameter(\\\"bizDefName\\\") + '。'\",\"sexpr\":\"\"}";
        this.addReminder = false;
        this.subjectEditable = true;
        this.contentEditable = true;
    }
    return UrgeHandleRule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UrgeHandleRuleComponent = /** @class */ (function () {
    function UrgeHandleRuleComponent(designerUIState, expr, message) {
        this.designerUIState = designerUIState;
        this.expr = expr;
        this.message = message;
        this.groupIcon2 = '<i class="f-icon f-icon-lookup"></i>';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.urgeHandleRule = new UrgeHandleRule();
        this.typeGroup = this.designerUIState.messageChannels.map((/**
         * @param {?} m
         * @return {?}
         */
        function (m) { return ({ value: m.code, name: m.name }); }));
        this.modalConfig = {
            title: '催办',
            width: 500,
            height: 445,
            showButtons: true
        };
        this.parser = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            return Number(val);
        });
    }
    Object.defineProperty(UrgeHandleRuleComponent.prototype, "value", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (!data) {
                this.urgeHandleRule.urgeHandleAble = true;
                this.urgeHandleRule.sendType = 'cloudplus,inmail';
            }
            else {
                this.urgeHandleRule = data;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    UrgeHandleRuleComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    UrgeHandleRuleComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        if (this.validator()) {
            /** @type {?} */
            var object = { value: this.urgeHandleRule, parameters: null };
            this.submitModal.emit(object);
        }
    };
    /**
     * @return {?}
     */
    UrgeHandleRuleComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @private
     * @return {?}
     */
    UrgeHandleRuleComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.urgeHandleRule.urgeHandleAble) {
            return true;
        }
        if (!this.urgeHandleRule.sendType) {
            this.message.info('尚未选择发送方式！');
            return false;
        }
        if (!this.urgeHandleRule.urgeMessageSubject) {
            this.message.info('尚未配置消息主题！');
            return false;
        }
        if (!this.urgeHandleRule.urgeMessageContent) {
            this.message.info('尚未选择消息内容！');
            return false;
        }
        return true;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    UrgeHandleRuleComponent.prototype.titleExpr = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.showTitleHelp(data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    UrgeHandleRuleComponent.prototype.contentExpr = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.showContentHelp(data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    UrgeHandleRuleComponent.prototype.showTitleHelp = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.showExpr();
        if (this.urgeHandleRule.urgeMessageSubject && this.urgeHandleRule.urgeMessageSubject.length > 0) {
            this.expr.addExpressionText(this.urgeHandleRule.urgeMessageSubject);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        function (expressionInfo) {
            _this.urgeHandleRule.urgeMessageSubject = expressionInfo;
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    UrgeHandleRuleComponent.prototype.showContentHelp = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.showExpr();
        if (this.urgeHandleRule.urgeMessageContent && this.urgeHandleRule.urgeMessageContent.length > 0) {
            this.expr.addExpressionText(this.urgeHandleRule.urgeMessageContent);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        function (expressionInfo) {
            _this.urgeHandleRule.urgeMessageContent = expressionInfo;
        }));
    };
    /**
     * @return {?}
     */
    UrgeHandleRuleComponent.prototype.showExpr = /**
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
        if (this.designerUIState.schemas.length > 0) {
            try {
                for (var _e = __values(this.designerUIState.schemas), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var schema = _f.value;
                    // this.expr.addCommonObject(co);
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.designerUIState.schemas[0].entityTypes && this.designerUIState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerUIState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerUIState.urgeContext.length > 0) {
            try {
                for (var _g = __values(this.designerUIState.urgeContext), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var variable = _h.value;
                    context.push(variable);
                    // this.expr.addContext(variable);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (this.designerUIState.processVariableContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _j = __values(this.designerUIState.processVariableContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    _loop_1(variable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_d = context_1.return)) _d.call(context_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
    };
    UrgeHandleRuleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-urge-handle-rule',
                    template: "<div class=\"f-page\">\r\n  <section class=\"f-page-main d-flex flex-column\">\r\n    <farris-section class=\"pt-0 f-section-form f-section-in-mainsubcard\" [mainTitle]=\"'\u50AC\u529E\u9009\u9879'\"\r\n      [enableAccordion]=\"''\" [enableMaximize]=\"false\">\r\n      <div class=\"f-form-layout farris-form farris-form-controls-inline\">\r\n        <fieldset class=\"f-section-formgroup\">\r\n          <div class=\"f-section-formgroup-inputs\">\r\n            <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u542F\u7528\u50AC\u529E</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <farris-switch [(ngModel)]=\"urgeHandleRule.urgeHandleAble\" name=\"enable\"></farris-switch>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 mt-2 pt-1\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u65F6\u95F4\u8BBE\u7F6E</span>\r\n                  </label>\r\n                  <label style=\"width: 55%;\" class=\"mb-0\">\r\n                    <span class=\"farris-label-text\">\u6700\u65E9\u5141\u8BB8\u50AC\u529E\u65F6\u95F4\uFF08\u5C0F\u65F6\uFF09</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <farris-number-spinner [(ngModel)]=\"urgeHandleRule.earlyTime\" name=\"earlyTime\" [editable]=\"true\" [precision]=\"0\"\r\n                      [parser]=\"parser\" [min]=\"0\"></farris-number-spinner>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\"></span>\r\n                  </label>\r\n                  <label style=\"width: 55%;\" class=\"mb-0\">\r\n                    <span class=\"farris-label-text\">\u6700\u5C0F\u5141\u8BB8\u50AC\u529E\u95F4\u9694\uFF08\u5C0F\u65F6\uFF09</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <farris-number-spinner [(ngModel)]=\"urgeHandleRule.intervalTime\" name=\"intervalTime\" [editable]=\"true\" [precision]=\"0\"\r\n                      [parser]=\"parser\" [min]=\"0\"></farris-number-spinner>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 mt-2 pt-1\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u53D1\u9001\u65B9\u5F0F</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <farris-checkboxgroup #checkboxGroup [(ngModel)]=\"urgeHandleRule.sendType\" name=\"sendType\" [horizontal]=\"true\"\r\n                      [data]=\"typeGroup\">\r\n                    </farris-checkboxgroup>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 mt-2 pt-1\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u6D88\u606F\u4E3B\u9898</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                                 [(value)]=\"urgeHandleRule.urgeMessageSubject\" (clickHandle)=\"titleExpr($event)\">\r\n                    </input-group>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">\u652F\u6301\u7F16\u8F91</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\" style=\"text-align: right\">\r\n                    <farris-switch [(ngModel)]=\"urgeHandleRule.subjectEditable\" name=\"enable\" size=\"small\"></farris-switch>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 mt-2 pt-1\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u6D88\u606F\u5185\u5BB9</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                                 [(value)]=\"urgeHandleRule.urgeMessageContent\" (clickHandle)=\"contentExpr($event)\">\r\n                    </input-group>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">\u652F\u6301\u7F16\u8F91</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <farris-switch [(ngModel)]=\"urgeHandleRule.contentEditable\" name=\"enable\" size=\"small\"></farris-switch>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 mt-2 pt-1\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-text\">\u663E\u793A\u50AC\u529E\u4EBA</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap\">\r\n                    <farris-switch [(ngModel)]=\"urgeHandleRule.addReminder\" name=\"enable\" size=\"small\"></farris-switch>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n      </div>\r\n    </farris-section>\r\n  </section>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    UrgeHandleRuleComponent.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: MessagerService }
    ]; };
    UrgeHandleRuleComponent.propDecorators = {
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        value: [{ type: Input }]
    };
    return UrgeHandleRuleComponent;
}());
var UrgeHandleRuleConverter = /** @class */ (function () {
    function UrgeHandleRuleConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    UrgeHandleRuleConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (!data) {
            return '（已设置）';
        }
        else if (data.urgeHandleAble) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    };
    return UrgeHandleRuleConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WFFlowElementsViewModel = /** @class */ (function () {
    function WFFlowElementsViewModel(uiState, message, injector, modalService, resolver) {
        this.uiState = uiState;
        this.message = message;
        this.injector = injector;
        this.modalService = modalService;
        this.resolver = resolver;
    }
    /**
     * 设置流程元素属性框
     * @param obj
     */
    /**
     * 设置流程元素属性框
     * @param {?} obj
     * @return {?}
     */
    WFFlowElementsViewModel.prototype.setFlowElementProperty = /**
     * 设置流程元素属性框
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setFlowEleConfig(obj.propertyConfig);
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    WFFlowElementsViewModel.prototype.setFlowEleConfig = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.setFlowEleEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    WFFlowElementsViewModel.prototype.setFlowEleEntity = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                switch (item.propertyID) {
                    case ResourceKeys.ConditionExpression: // 条件表达式
                        item.editor = ExpressionEditorComponent;
                        item.converter = new ExpressionEditorConverter();
                        item.editorParams = {};
                        break;
                    case ResourceKeys.wf_ExecuteForms_PC: // 开始活动的表单构件
                        item.editor = ExecuteFormsComponent;
                        item.converter = new ExecuteFormsConverter();
                        item.editorParams = {
                            location: 'startActivity',
                            tab: 'web'
                        };
                        break;
                    case ResourceKeys.wf_ExecuteForms_Mobile: // 开始活动的表单构件
                        item.editor = ExecuteFormsComponent;
                        item.converter = new ExecuteFormsConverter();
                        item.editorParams = {
                            location: 'startActivity',
                            tab: 'mobile'
                        };
                        break;
                    case ResourceKeys.sendBackedTask: // 开始活动的发送驳回任务
                        item.iterator = _this.uiState.boolIterator;
                        break;
                    case ResourceKeys.SelectTargetAble: // 允许跳转
                        item.iterator = _this.uiState.boolIterator;
                        break;
                    case ResourceKeys.JumpScope: // 跳转规则
                        item.editor = JumpScopeComponent;
                        item.converter = new JumpScopeConverter();
                        break;
                    case ResourceKeys.Default: // 默认分支
                        item.iterator = _this.uiState.boolIterator;
                        break;
                    default:
                        item.editor = ExtendPropertyComponent;
                        item.converter = new ExtendPropertyConverter();
                        break;
                }
            }));
        }
    };
    /**
     * 设置审批活动节点的属性框
     * @param obj
     */
    /**
     * 设置审批活动节点的属性框
     * @param {?} obj
     * @return {?}
     */
    WFFlowElementsViewModel.prototype.setUserActivityProperty = /**
     * 设置审批活动节点的属性框
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (obj.propertyData.ApprovalItems) {
            this.buildApprovalItems(obj.propertyData.ApprovalItems);
            this.buildCounterSignVariables(obj.propertyData.ApprovalItems);
            this.buildSignRules(obj.propertyData.SignRule); // 设置会签规则的结论名称
        }
        this.uiState.propertyData = obj.propertyData;
        this.uiState.bizActivityId = obj.propertyData.BizActivityID;
        this.uiState.propertyConfig = this.setUserActConfig(obj.propertyConfig);
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    WFFlowElementsViewModel.prototype.setUserActConfig = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.setUserActEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    WFFlowElementsViewModel.prototype.setUserActEntity = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                switch (item.propertyID) {
                    case ResourceKeys.ParticipantSchemes: // 参与者
                        item.editor = PerformerComponent;
                        item.converter = new PerformerConverter();
                        break;
                    case ResourceKeys.wf_ExecuteForms_PC: // 表单定义
                        item.editor = ExecuteFormsComponent;
                        item.converter = new ExecuteFormsConverter();
                        item.editorParams = {
                            location: 'userActivity',
                            tab: 'web'
                        };
                        break;
                    case ResourceKeys.wf_ExecuteForms_Mobile: // 表单定义
                        item.editor = ExecuteFormsComponent;
                        item.converter = new ExecuteFormsConverter();
                        item.editorParams = {
                            location: 'userActivity',
                            tab: 'mobile'
                        };
                        break;
                    case ResourceKeys.AssignStrategy: // 分配策略
                        item.iterator = _this.uiState.assignIterator;
                        break;
                    case ResourceKeys.OperatorConfig: // 指派规则
                        item.editor = AssignPerformerConfigComponent;
                        item.converter = new AssignConfigConverter();
                        break;
                    case ResourceKeys.CompleteStrategy: // 完成策略
                        if (_this.uiState.propertyData.AssignStrategy === _this.uiState.assignIterator[2].key) {
                            item.iterator = _this.uiState.completeIterator4Claim; // 分配策略为领用时，完成策略只能是抢占模式
                        }
                        else {
                            item.iterator = _this.uiState.completeIterator;
                        }
                        break;
                    case ResourceKeys.SignRule: // 会签规则
                        item.editor = SignRuleComponent;
                        item.converter = new SignRuleConverter();
                        item.editorParams = {
                            variables: _this.uiState.counterSignVariables,
                            approvalItems: _this.uiState.approvalItems
                        };
                        break;
                    case ResourceKeys.ApprovalItems: // 审批项
                        item.editor = ApprovelItemsComponent;
                        item.converter = new ApprovelItemsConverter();
                        break;
                    case ResourceKeys.Retrievable: // 允许取回
                        item.iterator = _this.uiState.boolIterator;
                        break;
                    case ResourceKeys.AddSignFrontAble: // 允许征询
                        item.editor = OrganizationPotentialOwnerComponent;
                        item.converter = new OrganizationPotentialOwnerConverter();
                        break;
                    case ResourceKeys.AddSignBehindAble: // 允许加签
                        item.editor = OrganizationPotentialOwnerComponent;
                        item.converter = new OrganizationPotentialOwnerConverter();
                        break;
                    case ResourceKeys.NotifyAble: // 允许知会
                        item.editor = OrganizationPotentialOwnerComponent;
                        item.converter = new OrganizationPotentialOwnerConverter();
                        break;
                    case ResourceKeys.transferScope: // 移交范围
                        item.editor = OrganizationPotentialOwnerComponent;
                        item.converter = new OrganizationPotentialOwnerConverter();
                        break;
                    case ResourceKeys.SelectBranch: // 允许指定后续分支
                        item.iterator = _this.uiState.boolIterator;
                        break;
                    case ResourceKeys.SelectTargetAble: // 允许跳转
                        if (_this.uiState.propertyData.CompleteStrategy
                            && _this.uiState.propertyData.CompleteStrategy !== _this.uiState.completeIterator[0].key) {
                            item.iterator = _this.uiState.noJump4Sign;
                        }
                        else {
                            item.iterator = _this.uiState.boolIterator;
                        }
                        break;
                    case ResourceKeys.JumpScope: // 跳转规则
                        item.editor = JumpScopeComponent;
                        item.converter = new JumpScopeConverter();
                        break;
                    case ResourceKeys.BackWardRule: // 驳回规则
                        item.editor = BackwardRuleComponent;
                        item.converter = new BackwardRuleConverter();
                        item.editorParams = {
                            nodeType: 'UserActivity'
                        };
                        break;
                    case ResourceKeys.wf_TitleExpression:
                        item.editor = TitleExpressionComponent;
                        item.converter = new TitleExpressionConverter();
                        break;
                    case ResourceKeys.Tools: // 活动构件
                        item.editor = ActivityComponentComponent;
                        item.converter = new ActivityComponentConverter();
                        item.editorParams = {
                            location: 'activity'
                        };
                        break;
                    case ResourceKeys.wf_CustomizeAction: // 活动构件
                        item.editor = CustomizeActionComponent;
                        item.converter = new CustomizeActionConverter();
                        break;
                    case ResourceKeys.timeLimitControl: // 超时预警
                        item.editor = TimeLimitControlComponent;
                        item.converter = new TimeLimitControlConverter();
                        item.editorParams = {
                            location: 'activity'
                        };
                        break;
                    case ResourceKeys.anonymousSet: // 匿名设置
                        item.editor = AnonymousSetComponent;
                        item.converter = new AnonymousSetConverter();
                        break;
                    case ResourceKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter();
                        break;
                    case ResourceKeys.messageNotice: // 消息通知
                        item.editor = MessageNoticeComponent;
                        item.converter = new MessageNoticeConverter();
                        item.editorParams = {
                            location: 'activity'
                        };
                        break;
                    case ResourceKeys.approvalPivotConfig: // 审批要点
                        item.editor = ApprovalPivotComponent;
                        item.converter = new ApprovalPivotConverter();
                        break;
                    case ResourceKeys.DisplayTerminal: // 显示终端
                        item.iterator = _this.uiState.displayTerminal;
                        break;
                    case ResourceKeys.urgeHandleRule: // 显示终端
                        item.editor = UrgeHandleRuleComponent;
                        item.converter = new UrgeHandleRuleConverter();
                        break;
                    default:
                        item.editor = ExtendPropertyComponent;
                        item.converter = new ExtendPropertyConverter();
                        break;
                }
            }));
        }
    };
    /**
     * 创建会签规则变量
     */
    /**
     * 创建会签规则变量
     * @param {?} conclusions
     * @return {?}
     */
    WFFlowElementsViewModel.prototype.buildCounterSignVariables = /**
     * 创建会签规则变量
     * @param {?} conclusions
     * @return {?}
     */
    function (conclusions) {
        var e_1, _a;
        this.uiState.counterSignVariables = [];
        this.uiState.counterSignVariables = this.uiState.counterSignVariables.concat([{
                key: 'nrOfInstances',
                name: '总任务数',
                description: '总任务数'
            }, {
                key: 'nrOfCompletedInstances',
                name: '已完成任务数',
                description: '已完成任务数'
            }
        ]);
        if (conclusions && conclusions.length > 0) {
            try {
                for (var conclusions_1 = __values(conclusions), conclusions_1_1 = conclusions_1.next(); !conclusions_1_1.done; conclusions_1_1 = conclusions_1.next()) {
                    var conclusion = conclusions_1_1.value;
                    /** @type {?} */
                    var variable = new VarEntity();
                    variable.key = "nrOf" + conclusion.Value;
                    variable.name = conclusion.Text + "_\u4EFB\u52A1\u6570";
                    variable.description = conclusion.Text + "_\u4EFB\u52A1\u6570";
                    this.uiState.counterSignVariables.push(variable);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (conclusions_1_1 && !conclusions_1_1.done && (_a = conclusions_1.return)) _a.call(conclusions_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * 创建自定义项
     * @param conclusions
     */
    /**
     * 创建自定义项
     * @param {?} conclusions
     * @return {?}
     */
    WFFlowElementsViewModel.prototype.buildApprovalItems = /**
     * 创建自定义项
     * @param {?} conclusions
     * @return {?}
     */
    function (conclusions) {
        var e_2, _a;
        this.uiState.approvalItems = [];
        if (conclusions && conclusions.length > 0) {
            try {
                for (var conclusions_2 = __values(conclusions), conclusions_2_1 = conclusions_2.next(); !conclusions_2_1.done; conclusions_2_1 = conclusions_2.next()) {
                    var item = conclusions_2_1.value;
                    /** @type {?} */
                    var conclusion = new ApprovalItemEntity();
                    conclusion.value = item.Value;
                    conclusion.text = item.Text;
                    conclusion.workFlowAction = item.WorkFlowAction;
                    conclusion.isDefault = item.IsDefault;
                    this.uiState.approvalItems.push(conclusion);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (conclusions_2_1 && !conclusions_2_1.done && (_a = conclusions_2.return)) _a.call(conclusions_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    /**
     * 会签规则绑定审批项名称
     * @param signRules 会签规则
     */
    /**
     * 会签规则绑定审批项名称
     * @private
     * @param {?} signRules 会签规则
     * @return {?}
     */
    WFFlowElementsViewModel.prototype.buildSignRules = /**
     * 会签规则绑定审批项名称
     * @private
     * @param {?} signRules 会签规则
     * @return {?}
     */
    function (signRules) {
        var e_3, _a;
        if (signRules && signRules.length > 0) {
            var _loop_1 = function (signRule) {
                /** @type {?} */
                var approvalItem = this_1.uiState.approvalItems.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.value === signRule.ConclusionValue; }));
                // if (!approvalItem) {
                //     this.message.info('审批项发生改变，请调整会签规则！');
                // }
                if (approvalItem) {
                    signRule.ConclusionName = approvalItem.text;
                }
            };
            var this_1 = this;
            try {
                for (var signRules_1 = __values(signRules), signRules_1_1 = signRules_1.next(); !signRules_1_1.done; signRules_1_1 = signRules_1.next()) {
                    var signRule = signRules_1_1.value;
                    _loop_1(signRule);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (signRules_1_1 && !signRules_1_1.done && (_a = signRules_1.return)) _a.call(signRules_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
    };
    WFFlowElementsViewModel.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    WFFlowElementsViewModel.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: MessagerService },
        { type: Injector },
        { type: BsModalService },
        { type: ComponentFactoryResolver }
    ]; };
    return WFFlowElementsViewModel;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SaveAsEditComponent = /** @class */ (function () {
    function SaveAsEditComponent() {
        var _this = this;
        this.submit = new EventEmitter();
        this.cancel = new EventEmitter();
        this.accessLevel = 'public';
        this.isAdministratorConfig = false;
        this.items = new Array();
        this.accessLevelCollection = [
            { value: 'public', text: '公有' },
            { value: 'private', text: '私有' }
        ];
        this.columns = [
            { title: '编号', field: 'code', width: '100', searchField: 'code' },
            { title: '名称', field: 'name', width: '100', searchField: 'name' },
        ];
        this.dictPicked = (/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.organizationName = data.name;
            _this.organization = data.id;
            return of(true);
        });
    }
    Object.defineProperty(SaveAsEditComponent.prototype, "organizations", {
        get: /**
         * @return {?}
         */
        function () {
            return this._organizations;
        },
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this._organizations = data;
            if (this._organizations && this._organizations.length > 0) {
                this.items = this.makeTreeByParent(this._organizations, 'parentId', 'id');
            }
            else {
                this.items = new Array();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SaveAsEditComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    SaveAsEditComponent.prototype.saveAsOK = /**
     * @return {?}
     */
    function () {
        if (this.validator()) {
            this.submit.next({
                procName: this.procName,
                accessLevel: this.accessLevel,
                organization: this.organization,
                organizationName: this.organizationName
            });
        }
    };
    /**
     * @return {?}
     */
    SaveAsEditComponent.prototype.saveAsCancel = /**
     * @return {?}
     */
    function () {
        this.cancel.emit();
    };
    /**
     * @return {?}
     */
    SaveAsEditComponent.prototype.validator = /**
     * @return {?}
     */
    function () {
        return true;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    SaveAsEditComponent.prototype.search = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var tt = (/** @type {?} */ (this.lookUp.componentRef.instance));
        tt.searchHandle.search(data.field, data.value, 'client');
        // if (data.field === '*') {
        //   this.organizations = this.organizations.filter(o => o.code.indexOf(data.value) > -1 || o.name.indexOf(data.value) > -1);
        // } else {
        //   this.organizations = this.organizations.filter(o => o[data.field].indexOf(data.value) > -1);
        // }
    };
    /** 按照parent码构造树 */
    /**
     * 按照parent码构造树
     * @private
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    SaveAsEditComponent.prototype.makeTreeByParent = /**
     * 按照parent码构造树
     * @private
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    function (datas, parentField, keyField) {
        var _this = this;
        // 上級爲空，或者沒有上級的
        /** @type {?} */
        var pathLayerOnes = datas.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            if (!x[parentField]) {
                return true;
            }
            /** @type {?} */
            var p = datas.find((/**
             * @param {?} parent
             * @return {?}
             */
            function (parent) { return parent[keyField] === x[parentField]; }));
            if (!p) {
                return true;
            }
        }));
        /** @type {?} */
        var treedata = [];
        pathLayerOnes.forEach((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            /** @type {?} */
            var entity = {};
            entity.data = x;
            entity.children = [];
            treedata.push(entity);
            // this.root = x['id'];
        }));
        treedata.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            _this.findChildrenByParent(item, datas, parentField, keyField);
        }));
        return treedata;
    };
    /** 找到子节点 */
    /**
     * 找到子节点
     * @private
     * @param {?} parent
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    SaveAsEditComponent.prototype.findChildrenByParent = /**
     * 找到子节点
     * @private
     * @param {?} parent
     * @param {?} datas
     * @param {?} parentField
     * @param {?} keyField
     * @return {?}
     */
    function (parent, datas, parentField, keyField) {
        var _this = this;
        /** @type {?} */
        var childList = datas.filter((/**
         * @param {?} childitem
         * @return {?}
         */
        function (childitem) {
            if (childitem[parentField] === parent.data[keyField]) {
                return true;
            }
        }));
        if (childList && childList.length > 0) {
            childList.forEach((/**
             * @param {?} child
             * @return {?}
             */
            function (child) {
                /** @type {?} */
                var childEntity = {};
                childEntity.data = child;
                childEntity.children = [];
                parent.children.push(childEntity);
                _this.findChildrenByParent(childEntity, datas, parentField, keyField);
            }));
        }
    };
    SaveAsEditComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-save-as-edit',
                    template: "<!-- <div class=\"f-page\">\r\n  <div class=\"f-page-main\">\r\n    <div class=\"d-flex m-2 py-2 farris-row\">\r\n      <div class=\"w-100 px-4\">\r\n        <label class=\"col-form-label\">\r\n          <span class=\"farris-label-text\">\u6D41\u7A0B\u540D\u79F0</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <input type=\"text\" class=\"form-control\" [(ngModel)]=\"procName\" name=\"procName\" />\r\n          <div class=\"farris-feedback valid-feedback\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"d-flex m-2 py-2 farris-row\">\r\n      <div class=\"px-4 w-100\">\r\n        <label class=\"col-form-label\">\r\n          <span class=\"farris-label-text\">\u6D41\u7A0BKey\u503C</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n          <input type=\"text\" class=\"form-control\" [(ngModel)]=\"procKey\" name=\"procKey\" [readonly]=\"true\" />\r\n          <div class=\"farris-feedback valid-feedback\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div> -->\r\n\r\n<div class=\"f-page f-page-card f-page-is-mainsubcard\">\r\n  <section class=\"f-page-main\">\r\n    <!--\u4E0D\u786E\u8BA4---------------------------\u5361\u7247\u7EC4\u4EF6\u4E0D\u540C\u7684Section\u662F\u5728\u4E0D\u540C\u7684\u7EC4\u4EF6\u91CC\uFF0C\u8FD8\u662F\u5728\u540C\u4E00\u4E2A\u5361\u7247\u7EC4\u4EF6\u91CC-->\r\n    <!--\u8868\u5355\u533A\u57DF-->\r\n    <!--\u9700\u8981\u5D4C\u5957\u7684\u5C42---------------------------IDE\u8F6C\u5316\u6210\u7EC4\u4EF6----------->\r\n    <div class=\"f-struct-wrapper\">\r\n      <farris-section class=\"f-section-form f-section-in-mainsubcard\" [enableAccordion]=\"''\" [mainTitle]=\"'\u57FA\u7840\u5C5E\u6027'\"\r\n        [subTitle]=\"''\" [enableMaximize]=\"false\">\r\n\r\n        <!--\u8F93\u5165\u63A7\u4EF6 \u6CA1\u6709\u5206\u7EC4-->\r\n        <div class=\"f-form-layout farris-form farris-form-controls-inline pr-4 m-2\">\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u6D41\u7A0B\u540D\u79F0</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"procName\" name=\"procName\" />\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u6D41\u7A0BKey\u503C</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"procKey\" name=\"procKey\" [readonly]=\"true\" />\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u7EF4\u62A4\u7EC4\u7EC7</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-lookup-grid #lookup [(ngModel)]=\"organizationName\" name=\"orgName\"\r\n                    [columns]=\"columns\" [items]=\"items\" [singleSelect]=\"true\" [displayType]=\"'TreeList'\"\r\n                    [idField]=\"'id'\" [valueField]=\"'id'\" [textField]=\"'name'\" [dictPicked]=\"dictPicked\"\r\n                    [enableClear]=\"false\" (search)=\"search($event)\" [remoteSearch]=\"false\" [title]=\"'\u7EC4\u7EC7'\"\r\n                    [readonly]=\"!isAdministratorConfig\">\r\n                  </farris-lookup-grid>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-12 px-0 my-2\">\r\n            <div class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u8BBF\u95EE\u7EA7\u522B</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap\">\r\n                  <farris-combo-list [(ngModel)]=\"accessLevel\" name=\"accessLevel\"\r\n                    [ngModelOptions]=\"{standalone: true}\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                    [valueField]=\"'value'\" [data]=\"accessLevelCollection\" [panelHeight]=\"'auto'\" [enableClear]=\"false\">\r\n                  </farris-combo-list>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </farris-section>\r\n    </div>\r\n  </section>\r\n</div>\r\n\r\n<ng-template #buttonRef>\r\n  <button type=\"button\" class=\"btn btn-sm btn-primary mx-2\" (click)=\"saveAsOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"saveAsCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SaveAsEditComponent.ctorParameters = function () { return []; };
    SaveAsEditComponent.propDecorators = {
        btnRef: [{ type: ViewChild, args: ['buttonRef',] }],
        procName: [{ type: Input }],
        procKey: [{ type: Input }],
        lookUp: [{ type: ViewChild, args: ['lookup',] }],
        submit: [{ type: Output }],
        cancel: [{ type: Output }]
    };
    return SaveAsEditComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var BillSourceType = {
    InheritParent: 'SameWithParent',
    VariablesExpression: 'VariablesExpression',
    AutoCreation: 'AutoGenerateDownBill',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var SubProcessType = {
    Dynamic: "Dynamic",
    Specified: "Specified",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CallActivitySubProcess = /** @class */ (function () {
    function CallActivitySubProcess() {
        this.subProcessType = SubProcessType.Specified;
        this.billSourceType = BillSourceType.InheritParent;
    }
    return CallActivitySubProcess;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BifMonitorConstant = /** @class */ (function () {
    function BifMonitorConstant() {
    }
    BifMonitorConstant.bifMonitorAppId = "BillIntegrationFrameworkRT";
    BifMonitorConstant.bifManagerAppEntrance = "bif-manager";
    BifMonitorConstant.bifDiagnostorFuncId = "BifDiagnostor";
    BifMonitorConstant.bifManagerFuncId = "BifManager";
    return BifMonitorConstant;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var BifMetadataType = {
    BifCreationProcess: "BifCreationProcess",
    BifWritebackProcess: "BifWritebackProcess",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var /**
 * @abstract
 */
AbstractShowEntity = /** @class */ (function (_super) {
    __extends(AbstractShowEntity, _super);
    function AbstractShowEntity() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.sysInit = false;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    AbstractShowEntity.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.id = null;
        this.code = null;
        this.name = null;
        this.upBillVoName = null;
        this.downBillVoName = null;
        this.parentId = null;
        this.bifMetadataType = null;
        this.lastModifiedTime = null;
        this.sysInit = false;
        this.originId = null;
        this.rootId = null;
    };
    /**
     * @return {?}
     */
    AbstractShowEntity.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "id", this.id);
        BpmnModelJsonHelper.SetAttributeValue(obj, "code", this.code);
        BpmnModelJsonHelper.SetAttributeValue(obj, "name", this.name);
        BpmnModelJsonHelper.SetAttributeValue(obj, "upBillVoName", this.upBillVoName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "downBillVoName", this.downBillVoName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "parentId", this.parentId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bifMetadataType", this.bifMetadataType);
        BpmnModelJsonHelper.SetAttributeValue(obj, "lastModifiedTime", this.lastModifiedTime);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sysInit", this.sysInit);
        BpmnModelJsonHelper.SetAttributeValue(obj, "originId", this.originId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "rootId", this.rootId);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AbstractShowEntity.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.id = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "id");
        this.code = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "code");
        this.name = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "name");
        this.upBillVoName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "upBillVoName");
        this.downBillVoName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "downBillVoName");
        this.parentId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "parentId");
        this.bifMetadataType = BifMetadataType[BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bifMetadataType")];
        this.lastModifiedTime = BpmnModelJsonHelper.GetAttributeValueAsDateTime(obj, "lastModifiedTime");
        this.sysInit = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "sysInit");
        this.originId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "originId");
        this.rootId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "rootId");
    };
    return AbstractShowEntity;
}(JsonConvertableImpl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RtShowEntity = /** @class */ (function (_super) {
    __extends(RtShowEntity, _super);
    function RtShowEntity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @protected
     * @return {?}
     */
    RtShowEntity.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.isEnabled = false;
    };
    /**
     * @return {?}
     */
    RtShowEntity.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "isEnabled", this.isEnabled);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    RtShowEntity.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.isEnabled = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "isEnabled");
    };
    return RtShowEntity;
}(AbstractShowEntity));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RtShowEntitiesWithCustomization = /** @class */ (function (_super) {
    __extends(RtShowEntitiesWithCustomization, _super);
    function RtShowEntitiesWithCustomization() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.customizationEntities = new Array();
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    RtShowEntitiesWithCustomization.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.isEnabled = false;
        this.customizationEntities.length = 0;
    };
    /**
     * @return {?}
     */
    RtShowEntitiesWithCustomization.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "isEnabled", this.isEnabled);
        BpmnModelJsonHelper.SetAttributeValue(obj, "customizationEntities", this.customizationEntities);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    RtShowEntitiesWithCustomization.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.isEnabled = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "isEnabled");
        this.customizationEntities = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "customizationEntities", RtShowEntitiesWithCustomization);
    };
    /**
     * @protected
     * @return {?}
     */
    RtShowEntitiesWithCustomization.prototype.getTClass = /**
     * @protected
     * @return {?}
     */
    function () {
        return RtShowEntitiesWithCustomization;
    };
    return RtShowEntitiesWithCustomization;
}(RtShowEntity));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RtBillProcessListResult = /** @class */ (function (_super) {
    __extends(RtBillProcessListResult, _super);
    function RtBillProcessListResult() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.entities = new Array();
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    RtBillProcessListResult.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.totalCount = 0;
        this.pageCount = 0;
        this.pageIndex = 0;
        this.pageSize = 0;
        this.entities.length = 0;
    };
    /**
     * @return {?}
     */
    RtBillProcessListResult.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "totalCount", this.totalCount);
        BpmnModelJsonHelper.SetAttributeValue(obj, "pageCount", this.pageCount);
        BpmnModelJsonHelper.SetAttributeValue(obj, "pageIndex", this.pageIndex);
        BpmnModelJsonHelper.SetAttributeValue(obj, "pageSize", this.pageSize);
        BpmnModelJsonHelper.SetAttributeValue(obj, "entities", this.entities);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    RtBillProcessListResult.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.totalCount = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "totalCount");
        this.pageCount = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "pageCount");
        this.pageIndex = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "pageIndex");
        this.pageSize = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "pageSize");
        this.entities = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "entities", RtShowEntitiesWithCustomization);
    };
    return RtBillProcessListResult;
}(JsonConvertableImpl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ProcessListHelpService = /** @class */ (function () {
    function ProcessListHelpService(appService, frameworkService, httpService) {
        this.appService = appService;
        this.frameworkService = frameworkService;
        this.httpService = httpService;
        this.baseUrl = "/api/runtime/aif/v1.0/rtbillprocess";
    }
    /**
     * @param {?} entity
     * @return {?}
     */
    ProcessListHelpService.prototype.openBifManagerApp = /**
     * @param {?} entity
     * @return {?}
     */
    function (entity) {
        /** @type {?} */
        var map$$1 = new Map();
        map$$1.set("id", entity.id);
        map$$1.set("type", entity.bifMetadataType);
        map$$1.set("srcFuncId", BifMonitorConstant.bifDiagnostorFuncId);
        /** @type {?} */
        var opt = {
            funcId: BifMonitorConstant.bifManagerFuncId,
            appId: BifMonitorConstant.bifMonitorAppId,
            appEntrance: BifMonitorConstant.bifManagerAppEntrance,
            appType: "menu",
            entityParams: {},
            queryStringParams: map$$1,
            tabId: entity.id,
            tabName: entity.name
        };
        this.frameworkService.openMenu(opt);
    };
    /**
     * @param {?} args
     * @return {?}
     */
    ProcessListHelpService.prototype.getDatagridData = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        /** @type {?} */
        var body = args.ConvertToJson();
        /** @type {?} */
        var data$ = null;
        //有业务种类参数时不分页
        if (args.bizType != null) {
            data$ = this.httpService.post(this.baseUrl + "/getpatch", body);
            return data$.pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                /** @type {?} */
                var listRes = new RtBillProcessListResult();
                listRes.entities = res.map((/**
                 * @param {?} elt
                 * @return {?}
                 */
                function (elt) {
                    /** @type {?} */
                    var e = new RtShowEntity();
                    e.LoadFromJsonObject(elt);
                    return e;
                }));
                return listRes;
            })));
        }
        else {
            data$ = this.httpService.post(this.baseUrl + "/getpagedpatch", body);
            return data$.pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                /** @type {?} */
                var listRes = new RtBillProcessListResult();
                listRes.LoadFromJsonObject(res);
                return listRes;
            })));
        }
    };
    ProcessListHelpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ProcessListHelpService.ctorParameters = function () { return [
        { type: AppService },
        { type: FrameworkService },
        { type: HttpService }
    ]; };
    return ProcessListHelpService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ProcessFilterConditionArgs = /** @class */ (function (_super) {
    __extends(ProcessFilterConditionArgs, _super);
    function ProcessFilterConditionArgs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @protected
     * @return {?}
     */
    ProcessFilterConditionArgs.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.name = null;
        this.upBillVoId = null;
        this.downBillVoId = null;
        this.isEnabled = null;
        this.billProcessType = null;
        this.sysInit = null;
        this.bizType = null;
        this.orderByCode = null;
        this.orderByName = null;
        this.OrderByLastModifiedTime = null;
        this.pageSize = 0;
        this.pageIndex = 0;
    };
    /**
     * @return {?}
     */
    ProcessFilterConditionArgs.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "name", this.name);
        BpmnModelJsonHelper.SetAttributeValue(obj, "upBillVoId", this.upBillVoId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "downBillVoId", this.downBillVoId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "isEnabled", this.isEnabled);
        BpmnModelJsonHelper.SetAttributeValue(obj, "billProcessType", this.billProcessType);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sysInit", this.sysInit);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizType", this.bizType);
        BpmnModelJsonHelper.SetAttributeValue(obj, "orderByCode", this.orderByCode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "orderByName", this.orderByName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "OrderByLastModifiedTime", this.OrderByLastModifiedTime);
        BpmnModelJsonHelper.SetAttributeValue(obj, "pageSize", this.pageSize);
        BpmnModelJsonHelper.SetAttributeValue(obj, "pageIndex", this.pageIndex);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ProcessFilterConditionArgs.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.name = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "name", TextValue);
        this.upBillVoId = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "upBillVoId", TextValue);
        this.downBillVoId = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "downBillVoId", TextValue);
        this.isEnabled = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "isEnabled", TextValue);
        this.billProcessType = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "billProcessType", TextValue);
        this.sysInit = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "sysInit", TextValue);
        this.bizType = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "bizType", TextValue);
        this.orderByCode = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "orderByCode", TextValue);
        this.orderByName = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "orderByName", TextValue);
        this.OrderByLastModifiedTime = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "OrderByLastModifiedTime", TextValue);
        this.pageSize = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "pageSize");
        this.pageIndex = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "pageIndex");
    };
    return ProcessFilterConditionArgs;
}(JsonConvertableImpl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var OrderByDirection = {
    Asc: "Asc",
    Desc: "Desc",
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var BIF_LANG_RESOURCES = new InjectionToken("BIF_LANG_RESOURCES");
var AifLocalePipe = /** @class */ (function () {
    function AifLocalePipe(localeId, resources) {
        this.defaultLang = "zh-CHS";
        this.langCode = localeId || this.defaultLang;
        this.resources = resources || {};
        this.lang = resources[this.langCode] || resources[this.defaultLang] || {};
    }
    /**
     * @param {?} name
     * @return {?}
     */
    AifLocalePipe.prototype.transform = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.lang[name] || name;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    AifLocalePipe.prototype.instant = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.transform(name);
    };
    AifLocalePipe.decorators = [
        { type: Pipe, args: [{ name: 'aifLocale' },] }
    ];
    /** @nocollapse */
    AifLocalePipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [BIF_LANG_RESOURCES,] }] }
    ]; };
    return AifLocalePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ProcessListHelpComponent = /** @class */ (function () {
    function ProcessListHelpComponent(procHelpService, messager, notify, modalService, frameworkService, router, activatedRoute, loading, localeId, localePipe) {
        var _this = this;
        this.procHelpService = procHelpService;
        this.messager = messager;
        this.notify = notify;
        this.modalService = modalService;
        this.frameworkService = frameworkService;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.loading = loading;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: '生单流程选择',
            width: 1250,
            height: 500,
            showButtons: true
        };
        this.procEmitter = new EventEmitter();
        this.ttIdField = "id";
        this.ttData = [];
        this.ttColumns = [];
        this.cascadeCheck = false;
        this.cascadeDown = false;
        this.cascadeUp = false;
        this.defaultPageSize = 30;
        this.pageList = [this.defaultPageSize, 50, 100, 200, 500];
        /**
         * 列排序前事件
         */
        this.beforeSortColumn = (/**
         * @param {?} field
         * @param {?} order
         * @return {?}
         */
        function (field, order) {
            /** @type {?} */
            var cols = field.split(",");
            /** @type {?} */
            var orders = order.split(",");
            //重置排序条件
            _this.queryParam.filterArgs.orderByCode = null;
            _this.queryParam.filterArgs.orderByName = null;
            _this.queryParam.filterArgs.OrderByLastModifiedTime = null;
            //依次添加排序条件
            for (var i = 0; i < cols.length; i++) {
                /** @type {?} */
                var orderBy = null;
                if (orders[i] == "asc") {
                    orderBy = new TextValue();
                    orderBy.hasValue = true;
                    orderBy.value = OrderByDirection.Asc;
                }
                else if (orders[i] == "desc") {
                    orderBy = new TextValue();
                    orderBy.hasValue = true;
                    orderBy.value = OrderByDirection.Desc;
                }
                if (cols[i] == "code") {
                    _this.queryParam.filterArgs.orderByCode = orderBy;
                }
                else if (cols[i] == "name") {
                    _this.queryParam.filterArgs.orderByName = orderBy;
                }
                else if (cols[i] == "lastModifiedTime") {
                    _this.queryParam.filterArgs.OrderByLastModifiedTime = orderBy;
                }
            }
            return _this.loadItems(_this.queryParam.filterArgs);
        });
        this.queryParam = this.createDefaultQueryParam();
    }
    Object.defineProperty(ProcessListHelpComponent.prototype, "value", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this.processCode = data;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ProcessListHelpComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.configTtColumns();
        if (this.editorParams && this.editorParams.bizTypeId) {
            this.queryParam.filterArgs.bizType = new TextValue();
            this.queryParam.filterArgs.bizType.value = this.editorParams.bizTypeId;
            this.queryParam.filterArgs.bizType.hasValue = true;
        }
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.ttData && _this.ttData.length > 0) {
                    /** @type {?} */
                    var proc = _this.processCode != null ? _this.ttData.find((/**
                     * @param {?} it
                     * @return {?}
                     */
                    function (it) { return it.code == _this.processCode; })) : _this.ttData[0];
                    proc && _this.tt.selectRow(proc.id);
                }
            }), 300);
        }));
    };
    /**
     * @param {?=} evt
     * @return {?}
     */
    ProcessListHelpComponent.prototype.clickOk = /**
     * @param {?=} evt
     * @return {?}
     */
    function (evt) {
        if (this.tt.selectedRow == null) {
            this.notify.warning(this.localePipe.transform("pleaseSelectOneItemOnly"));
            return;
        }
        this.procEmitter.emit(this.tt.selectedRow.data);
        /** @type {?} */
        var object = { value: this.tt.selectedRow.data.code, parameters: null };
        this.submitModal.emit(object);
        this.modalRef && this.modalRef.close();
    };
    /**
     * @param {?=} evt
     * @return {?}
     */
    ProcessListHelpComponent.prototype.clickCancel = /**
     * @param {?=} evt
     * @return {?}
     */
    function (evt) {
        this.procEmitter.complete();
        this.closeModal.emit();
        this.modalRef && this.modalRef.close();
    };
    /**
     * @param {?} param
     * @return {?}
     */
    ProcessListHelpComponent.prototype.onSearch = /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        var _this = this;
        this.queryParam = param;
        console.log(this.queryParam);
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        function () {
            _this.tt.clearCheckeds();
            _this.tt.clearSelections();
        }));
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    ProcessListHelpComponent.prototype.clickNameCell = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        this.procHelpService.openBifManagerApp(ctx.rowData);
    };
    /**
     * 列排序后事件
     */
    /**
     * 列排序后事件
     * @param {?} val
     * @return {?}
     */
    ProcessListHelpComponent.prototype.columnSorted = /**
     * 列排序后事件
     * @param {?} val
     * @return {?}
     */
    function (val) {
        console.log(val);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ProcessListHelpComponent.prototype.onPageSizeChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        console.log('PageSize Changed:', $event);
        /** @type {?} */
        var checkedIds = this.tt.checkeds.map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return r.data.id; }));
        this.queryParam.filterArgs.pageSize = $event.pageSize;
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.tt.checkRows(checkedIds);
            }), 0);
        }));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ProcessListHelpComponent.prototype.onPageChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        console.log('PageNumber Changed:', $event);
        /** @type {?} */
        var checkedIds = this.tt.checkeds.map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return r.data.id; }));
        this.queryParam.filterArgs.pageIndex = $event.pageIndex - 1;
        this.queryParam.filterArgs.pageSize = $event.pageSize;
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.tt.checkRows(checkedIds);
            }), 0);
        }));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ProcessListHelpComponent.prototype.pageChangeHandler = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        console.log($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ProcessListHelpComponent.prototype.pageSizeChangeHandler = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        console.log($event);
    };
    /**
     * @private
     * @param {?} args
     * @return {?}
     */
    ProcessListHelpComponent.prototype.loadItems = /**
     * @private
     * @param {?} args
     * @return {?}
     */
    function (args) {
        var _this = this;
        /** @type {?} */
        var loadingComp = this.loading.show({ message: this.localePipe.transform("loading") });
        return this.procHelpService.getDatagridData(args).pipe(switchMap((/**
         * @param {?} listRes
         * @return {?}
         */
        function (listRes) {
            _this.ttData = __spread(listRes.entities);
            //更新分页信息
            _this.tt.setPageIndex(listRes.pageIndex + 1);
            _this.tt.total = listRes.totalCount;
            _this.tt.pageSize = listRes.pageSize;
            // this.page.setCurrentPage(this.paginationId, listRes.pageIndex + 1);
            // this.page.setItemsPerPage(this.paginationId, listRes.pageSize);
            // this.page.setTotalItems(this.paginationId, listRes.totalCount);
            loadingComp.close();
            return of(listRes);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            loadingComp.close();
            setTimeout((/**
             * @return {?}
             */
            function () {
                //todo 确定异常结构, 目前采用兼容取值方式
                _this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            }), 300);
            throw err;
        })));
    };
    /**
     * @private
     * @return {?}
     */
    ProcessListHelpComponent.prototype.configTtColumns = /**
     * @private
     * @return {?}
     */
    function () {
        this.ttColumns = [
            // {
            //   field: "isEnabled", title: this.localePipe.transform("enabledState"), width: 100, sortable: false,
            //   formatter: (value: boolean, rowData, rowIndex) => {
            //     if (value == true) {
            //       return this.localePipe.transform("enabled");
            //     } else if (value == false) {
            //       return this.localePipe.transform("disabled");
            //     } else {
            //       return "-";
            //     }
            //   }
            // },
            { field: "code", title: this.localePipe.transform("code"), width: 120, sortable: true },
            {
                field: "name", title: this.localePipe.transform("name"), width: 250, sortable: true,
                template: this.nameCellTemp,
            },
            { field: "upBillVoName", title: this.localePipe.transform("upBill"), width: 120, sortable: true },
            { field: "downBillVoName", title: this.localePipe.transform("downBill"), width: 120, sortable: true },
        ];
    };
    /**
     * @private
     * @return {?}
     */
    ProcessListHelpComponent.prototype.createDefaultQueryParam = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var queryParam = {
            filterArgs: new ProcessFilterConditionArgs(),
            filterArgsExt: {}
        };
        queryParam.filterArgs.pageSize = this.defaultPageSize;
        queryParam.filterArgs.pageIndex = 0;
        queryParam.filterArgs.OrderByLastModifiedTime = new TextValue();
        queryParam.filterArgs.OrderByLastModifiedTime.value = OrderByDirection.Desc;
        queryParam.filterArgs.OrderByLastModifiedTime.hasValue = true;
        queryParam.filterArgs.billProcessType = new TextValue();
        queryParam.filterArgs.billProcessType.value = BifMetadataType.BifCreationProcess;
        queryParam.filterArgs.billProcessType.hasValue = true;
        queryParam.filterArgs.isEnabled = new TextValue();
        queryParam.filterArgs.isEnabled.value = "true";
        queryParam.filterArgs.isEnabled.hasValue = true;
        return queryParam;
    };
    ProcessListHelpComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-process-list-help',
                    template: "<div class=\"f-page f-page-is-managelist\" id=\"bif-manager-list\">\r\n  <!-- <app-proc-help-query-solution id=\"query-solution\" #querySolution [(queryParam)]=\"queryParam\"\r\n    (onSearch)=\"onSearch($event)\">\r\n  </app-proc-help-query-solution> -->\r\n\r\n  <div class=\"f-page-main\" id=\"page-main\">\r\n    <div class=\"f-utils-fill-flex-column\">\r\n      <farris-datagrid id=\"tt\" #tt [data]=\"ttData\" [columns]=\"ttColumns\" [idField]=\"ttIdField\" [multiSelect]=\"true\"\r\n        [showCheckbox]=\"false\" [showAllCheckbox]=\"false\" [onlySelectSelf]=\"true\" [keepSelect]=\"true\"\r\n        [selectOnCheck]=\"true\" [checkOnSelect]=\"false\" [showHeader]=\"true\" [fit]=\"true\" [fitColumns]=\"true\"\r\n        [pagination]=\"true\" [showPageList]=\"true\" [pageSize]=\"defaultPageSize\" [pageList]=\"pageList\"\r\n        (pageChanged)=\"onPageChanged($event)\" (pageSizeChanged)=\"onPageSizeChanged($event)\" [remoteSort]=\"true\"\r\n        [multiSort]=\"false\" [beforeSortColumn]=\"beforeSortColumn\" (columnSorted)=\"columnSorted($event)\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #nameCellTemp let-ctx>\r\n  <a href=\"javascript: void(0);\" (click)=\"clickNameCell(ctx)\">{{ctx?.rowData?.name}}</a>\r\n</ng-template>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOk()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ProcessListHelpComponent.ctorParameters = function () { return [
        { type: ProcessListHelpService },
        { type: MessagerService },
        { type: NotifyService },
        { type: BsModalService },
        { type: FrameworkService },
        { type: Router },
        { type: ActivatedRoute },
        { type: LoadingService },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: AifLocalePipe }
    ]; };
    ProcessListHelpComponent.propDecorators = {
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        editorParams: [{ type: Input }],
        tt: [{ type: ViewChild, args: ["tt",] }],
        nameCellTemp: [{ type: ViewChild, args: ['nameCellTemp',] }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
    };
    return ProcessListHelpComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CallActivitySubProcess2Component = /** @class */ (function () {
    function CallActivitySubProcess2Component(notify, modalService, message, util, http, designerState, expr, cfr, inj) {
        this.notify = notify;
        this.modalService = modalService;
        this.message = message;
        this.util = util;
        this.http = http;
        this.designerState = designerState;
        this.expr = expr;
        this.cfr = cfr;
        this.inj = inj;
        this.cls = 'farris-main-area flex-column';
        this.editorParams = {};
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: '子流程设置',
            width: 480,
            height: 400,
            showButtons: true
        };
        this.callActivitySubProcess = new CallActivitySubProcess();
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.subProcessType = SubProcessType;
        this.billSourceType = BillSourceType;
        this.radioGroupProcessTypeData = [
            { value: "Specified", name: "指定子流程" },
            { value: "Dynamic", name: "动态子流程" },
        ];
        this.radioGroupBillSourceData = [
            { value: BillSourceType.InheritParent, name: '与父流程相同' },
            { value: BillSourceType.AutoCreation, name: '自动生成下游单据' },
            { value: BillSourceType.VariablesExpression, name: '变量表达式' },
        ];
    }
    Object.defineProperty(CallActivitySubProcess2Component.prototype, "value", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v) {
                this.callActivitySubProcess = v;
                // 为子流程类型赋值
                if (this.callActivitySubProcess.calledElement == null || this.callActivitySubProcess.calledElement == "") {
                    if (this.callActivitySubProcess.calledBizDefKey == null || this.callActivitySubProcess.calledBizDefKey == "") {
                        this.callActivitySubProcess.subProcessType = SubProcessType.Specified;
                    }
                    else {
                        this.callActivitySubProcess.subProcessType = SubProcessType.Dynamic;
                    }
                }
                else {
                    this.callActivitySubProcess.subProcessType = SubProcessType.Specified;
                }
                // 为单据来源类型赋值
                if (this.callActivitySubProcess.inheritBizDataId === true) {
                    this.callActivitySubProcess.billSourceType = BillSourceType.InheritParent;
                }
                else if (this.callActivitySubProcess.inheritBizDataId === false && this.callActivitySubProcess.useAutoCreationData === false) {
                    this.callActivitySubProcess.billSourceType = BillSourceType.VariablesExpression;
                }
                else if (this.callActivitySubProcess.inheritBizDataId === false && this.callActivitySubProcess.useAutoCreationData === true) {
                    this.callActivitySubProcess.billSourceType = BillSourceType.AutoCreation;
                }
                this.getProcessDefKey(this.callActivitySubProcess.calledElement);
                this.getFlowForm(this.callActivitySubProcess.calledBizDefKey);
                this.getAifProcessName(this.callActivitySubProcess.aifProcessCode);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        if (this.validator()) {
            /** @type {?} */
            var object = { value: this.callActivitySubProcess, parameters: null };
            this.submitModal.emit(object);
        }
    };
    /**
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.processConfirm = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        if (args) {
            this.callActivitySubProcess.calledElement = args.id;
            this.callActivitySubProcess.calledElementName = args.name;
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.processTypeChange = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        console.log(val);
        if (val == SubProcessType.Specified) {
            this.callActivitySubProcess.calledBizDefKey = null;
            this.callActivitySubProcess.calledBizDefName = null;
        }
        else if (val == SubProcessType.Dynamic) {
            this.callActivitySubProcess.calledElement = null;
            this.callActivitySubProcess.calledElementName = null;
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.billSourceChange = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        console.log(val);
        if (val == BillSourceType.InheritParent) {
            this.callActivitySubProcess.inheritBizDataId = true;
            this.callActivitySubProcess.useAutoCreationData = false;
        }
        else if (val == BillSourceType.AutoCreation) {
            this.callActivitySubProcess.inheritBizDataId = false;
            this.callActivitySubProcess.useAutoCreationData = true;
        }
        else if (val == BillSourceType.VariablesExpression) {
            this.callActivitySubProcess.inheritBizDataId = false;
            this.callActivitySubProcess.useAutoCreationData = false;
        }
    };
    /**
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.selectProcess = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.openProcHelp().subscribe((/**
         * @param {?} rte
         * @return {?}
         */
        function (rte) {
            if (rte == null) {
                _this.notify.warning("请选中一条生单流程");
                return;
            }
            _this.callActivitySubProcess.aifProcessCode = rte.code;
            _this.callActivitySubProcess.aifProcessName = rte.name;
        }));
    };
    /**
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.clearProcess = /**
     * @return {?}
     */
    function () {
        this.callActivitySubProcess.aifProcessCode = null;
        this.callActivitySubProcess.aifProcessName = null;
    };
    /**
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.openProcHelp = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var cmpF = this.cfr.resolveComponentFactory(ProcessListHelpComponent);
        /** @type {?} */
        var cmpR = cmpF.create(this.inj, []);
        cmpR.instance.editorParams = this.editorParams;
        /** @type {?} */
        var modalRef = this.modalService.show(cmpR, {
            title: "生单流程",
            width: 1250,
            height: 500,
            resizable: true,
            buttons: [
                {
                    text: "确定",
                    cls: "btn btn-primary",
                    handle: (/**
                     * @param {?} evt
                     * @return {?}
                     */
                    function (evt) {
                        cmpR.instance.clickOk(evt);
                        modalRef.close();
                    })
                },
                {
                    text: "取消",
                    cls: "btn btn-secondary",
                    handle: (/**
                     * @param {?} evt
                     * @return {?}
                     */
                    function (evt) {
                        cmpR.instance.clickCancel(evt);
                        modalRef.close();
                    })
                }
            ],
            closed: (/**
             * @return {?}
             */
            function () {
                modalRef.dialog.destroy();
            })
        });
        cmpR.instance.modalRef = modalRef;
        return cmpR.instance.procEmitter.asObservable();
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.clearProcessDef = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        this.callActivitySubProcess.calledElement = '';
        this.callActivitySubProcess.calledElementName = '';
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.flowFormConfirm = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        if (args) {
            this.callActivitySubProcess.calledBizDefKey = args.id;
            this.callActivitySubProcess.calledBizDefName = args.name;
        }
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.clearFlowForm = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        this.callActivitySubProcess.calledBizDefKey = '';
        this.callActivitySubProcess.calledBizDefName = '';
    };
    /**
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.setBizDataId = /**
     * @return {?}
     */
    function () {
        this.showExprHelp();
    };
    /**
     * @private
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.showExprHelp = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f;
        if (this.designerState.schemas.length > 0) {
            try {
                for (var _g = __values(this.designerState.schemas), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var schema = _h.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_a = _g.return)) _a.call(_g);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerState.procInstContext.length > 0) {
            try {
                for (var _j = __values(this.designerState.procInstContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    context.push(variable);
                    // this.expr.addContext(variable);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _l = __values(this.designerState.formalParameterContext), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var variable = _m.value;
                    _loop_1(variable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _o = __values(this.designerState.participantContext), _p = _o.next(); !_p.done; _p = _o.next()) {
                    var variable = _p.value;
                    _loop_2(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _q = __values(this.designerState.processVariableContext), _r = _q.next(); !_r.done; _r = _q.next()) {
                    var variable = _r.value;
                    _loop_3(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_r && !_r.done && (_e = _q.return)) _e.call(_q);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_f = context_1.return)) _f.call(context_1);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        this.expr.addExpressionText(this.callActivitySubProcess.bizDataId);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        function (expressioninfo) {
            _this.callActivitySubProcess.bizDataId = expressioninfo;
        }));
    };
    /**
     * @param {?} bool
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.valueChange = /**
     * @param {?} bool
     * @return {?}
     */
    function (bool) {
        if (bool) {
            this.callActivitySubProcess.bizDataId = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.callActivitySubProcess.inheritBizDataId && !this.callActivitySubProcess.useAutoCreationData && !this.callActivitySubProcess.bizDataId) {
            this.message.warning('当子流程与父流程单据不一致时，请设置子流程单据内码！');
            return false;
        }
        return true;
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.getProcessDefKey = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        /** @type {?} */
        var url = this.util.getProcDefKeyWebApi();
        if (key) {
            url += "/" + key;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                _this.callActivitySubProcess.calledElementName = re.name;
            }));
        }
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.getFlowForm = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var url = this.util.getFlowFormWebApi();
        if (id) {
            url += "/" + id;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                _this.callActivitySubProcess.calledBizDefName = re.name;
            }));
        }
    };
    /**
     * @param {?} code
     * @return {?}
     */
    CallActivitySubProcess2Component.prototype.getAifProcessName = /**
     * @param {?} code
     * @return {?}
     */
    function (code) {
        var _this = this;
        if (code != null && code != "") {
            this.http.request("GET", "/api/runtime/aif/v1.0/rtbillcreationprocess/getname/" + code, { responseType: 'text' }).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                _this.callActivitySubProcess.aifProcessName = res;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    //todo 确定异常结构, 目前采用兼容取值方式
                    _this.message.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                }), 300);
                throw err;
            }));
        }
    };
    CallActivitySubProcess2Component.decorators = [
        { type: Component, args: [{
                    selector: 'lib-call-activity-sub-process2',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section>\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">\u9009\u62E9\u5B50\u6D41\u7A0B</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <div class=\"h-100\">\r\n          <div class=\"farris-form form-inline farris-form-inline\">\r\n            <div class=\"farris-group-wrap mt-1\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u5B50\u6D41\u7A0B\u7C7B\u578B</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <!-- <farris-combo-list #comboProcessType\r\n                    [(ngModel)]=\"callActivitySubProcess&&callActivitySubProcess.subProcessType\"\r\n                    [idField]=\"comboProcessTypeIdField\" [valueField]=\"comboProcessTypeValueField\"\r\n                    [textField]=\"comboProcessTypeTextField\" [data]=\"comboProcessTypeData\"\r\n                    (valueChange)=\"processTypeChange($event)\" [enableClear]=\"false\" [editable]=\"false\">\r\n                  </farris-combo-list> -->\r\n                  <farris-radiogroup #radioGroupProcessType\r\n                    [(ngModel)]=\"callActivitySubProcess&&callActivitySubProcess.subProcessType\" [horizontal]=\"false\"\r\n                    [data]=\"radioGroupProcessTypeData\" (changeValue)=\"processTypeChange($event)\">\r\n                  </farris-radiogroup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\" *ngIf=\"callActivitySubProcess.subProcessType==subProcessType.Dynamic\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u6D41\u7A0B\u5206\u7C7B</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <wf-bizprocess-lookup [title]=\"'\u6D41\u7A0B\u5206\u7C7B'\" [sourceType]=\"'flowform'\"\r\n                    [displayTxt]=\"callActivitySubProcess.calledBizDefName\" (afterConfirm)=\"flowFormConfirm($event)\"\r\n                    (clear)=\"clearFlowForm($event)\">\r\n                  </wf-bizprocess-lookup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\" *ngIf=\"callActivitySubProcess.subProcessType==subProcessType.Specified\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u6D41\u7A0B\u5B9A\u4E49</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <wf-bizprocess-lookup [title]=\"'\u6D41\u7A0B\u5B9A\u4E49'\" [displayTxt]=\"callActivitySubProcess.calledElementName\"\r\n                    (afterConfirm)=\"processConfirm($event)\" (clear)=\"clearProcessDef($event)\">\r\n                  </wf-bizprocess-lookup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n    <section class=\"\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">\u5355\u636E\u6765\u6E90</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <div class=\"h-100\">\r\n          <div class=\"farris-form form-inline farris-form-inline\">\r\n\r\n            <div class=\"farris-group-wrap mt-1\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u5355\u636E\u6765\u6E90</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-radiogroup #radioGroupBillSource\r\n                    [(ngModel)]=\"callActivitySubProcess&&callActivitySubProcess.billSourceType\" [horizontal]=\"false\"\r\n                    [data]=\"radioGroupBillSourceData\" (changeValue)=\"billSourceChange($event)\">\r\n                  </farris-radiogroup>\r\n                  <!-- <farris-combo-list #comboBillSource\r\n                    [(ngModel)]=\"callActivitySubProcess&&callActivitySubProcess.billSourceType\"\r\n                    [idField]=\"comboBillSourceIdField\" [valueField]=\"comboBillSourceValueField\"\r\n                    [textField]=\"comboBillSourceTextField\" [data]=\"comboBillSourceData\"\r\n                    (valueChange)=\"billSourceChange($event)\" [enableClear]=\"false\" [editable]=\"false\">\r\n                  </farris-combo-list> -->\r\n                </div>\r\n                <div class=\"farris-feedback valid-feedback\"></div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\"\r\n              *ngIf=\"callActivitySubProcess.billSourceType==billSourceType.AutoCreation\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u751F\u5355\u6D41\u7A0B</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <input-group [ngModel]=\"callActivitySubProcess&&callActivitySubProcess.aifProcessName\"\r\n                    [editable]=\"false\" (clickHandle)=\"selectProcess()\" [groupText]=\"groupIcon\" (clear)=\"clearProcess()\">\r\n                  </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap mt-1\"\r\n              *ngIf=\"callActivitySubProcess.billSourceType==billSourceType.VariablesExpression\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u5355\u636E\u5185\u7801</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <input-group [ngModel]=\"callActivitySubProcess.bizDataId\" [enableClear]=\"false\"\r\n                    [ngModel]=\"callActivitySubProcess.bizDataId\" name=\"bizDataId\" [editable]=\"false\"\r\n                    (clickHandle)=\"setBizDataId()\" [groupText]=\"groupIcon\">\r\n                  </input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>"
                }] }
    ];
    /** @nocollapse */
    CallActivitySubProcess2Component.ctorParameters = function () { return [
        { type: NotifyService },
        { type: BsModalService },
        { type: MessagerService },
        { type: ProcessDeUtil },
        { type: HttpService },
        { type: ProcessDesignerUIState },
        { type: ExpressionService },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    CallActivitySubProcess2Component.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        editorParams: [{ type: Input }],
        value: [{ type: Input }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        radioGroupProcessType: [{ type: ViewChild, args: ["radioGroupProcessType",] }],
        radioGroupBillSource: [{ type: ViewChild, args: ["radioGroupBillSource",] }]
    };
    return CallActivitySubProcess2Component;
}());
var CallActivitySubProcess2Converter = /** @class */ (function () {
    function CallActivitySubProcess2Converter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    CallActivitySubProcess2Converter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && (data.calledBizDefKey || data.calledElement)) {
            return '（已设置）';
        }
        return '（未设置）';
    };
    return CallActivitySubProcess2Converter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SubProcessViewModel = /** @class */ (function () {
    function SubProcessViewModel(uiState) {
        this.uiState = uiState;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    SubProcessViewModel.prototype.setProperty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    SubProcessViewModel.prototype.setConfig = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    SubProcessViewModel.prototype.setEntity = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                switch (item.propertyID) {
                    case ResourceKeys.callActivitySubProcess: // 参与者
                        // item.editor = CallActivitySubProcessComponent;
                        // item.converter = new CallActivitySubProcessConverter();
                        item.editor = CallActivitySubProcess2Component;
                        item.converter = new CallActivitySubProcess2Converter();
                        item.editorParams = {
                            bizTypeId: _this.uiState.flowFormInfo.flowForm.businessObjectId,
                        };
                        break;
                    case ResourceKeys.BackWardRule:
                        item.editor = BackwardRuleComponent;
                        item.converter = new BackwardRuleConverter();
                        item.editorParams = {
                            nodeType: 'CallActivitySubProcess'
                        };
                        break;
                    case ResourceKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter();
                        break;
                    default:
                        break;
                }
            }));
        }
    };
    SubProcessViewModel.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SubProcessViewModel.ctorParameters = function () { return [
        { type: ProcessDesignerUIState }
    ]; };
    return SubProcessViewModel;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AutoActivityAdapter = /** @class */ (function () {
    function AutoActivityAdapter(uiState) {
        this.uiState = uiState;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    AutoActivityAdapter.prototype.setProperty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    AutoActivityAdapter.prototype.setConfig = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    AutoActivityAdapter.prototype.setEntity = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                switch (item.propertyID) {
                    case ResourceKeys.Tools: // 参与者
                        item.editor = ActivityComponentComponent;
                        item.converter = new ActivityComponentConverter();
                        item.editorParams = {
                            location: 'autoActivity'
                        };
                        break;
                    case ResourceKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter();
                        break;
                    default:
                        break;
                }
            }));
        }
    };
    AutoActivityAdapter.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AutoActivityAdapter.ctorParameters = function () { return [
        { type: ProcessDesignerUIState }
    ]; };
    return AutoActivityAdapter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EventDefinition = /** @class */ (function () {
    function EventDefinition() {
        this.triggerAction = 'Pass';
        this.Async = false;
    }
    return EventDefinition;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EventDefinitionComponent = /** @class */ (function () {
    function EventDefinitionComponent(message, util, injector) {
        this.message = message;
        this.util = util;
        this.injector = injector;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: '信号定义',
            width: 560,
            height: 420,
            showButtons: true
        };
        this.triggerActionCollection = [
            { text: '正向', value: 'Pass' },
            { text: '反向', value: 'Back' },
            { text: '终止', value: 'Abort' }
        ];
        this.columns = new Array();
        this.data = new Array();
    }
    Object.defineProperty(EventDefinitionComponent.prototype, "value", {
        set: /**
         * @param {?} items
         * @return {?}
         */
        function (items) {
            var e_1, _a;
            if (items && items.length > 0) {
                try {
                    for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                        var item = items_1_1.value;
                        /** @type {?} */
                        var event_1 = new EventDefinition();
                        event_1.Id = item.Id;
                        event_1.name = item.name;
                        event_1.triggerAction = item.triggerAction;
                        event_1.Async = item.Async;
                        event_1.SignalRef = item.SignalRef;
                        this.data.push(event_1);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    EventDefinitionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.columns = [{
                field: 'SignalRef', width: 100, title: '信号编号',
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'name', width: 100, title: '信号名称',
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'triggerAction', width: 100, title: '流转方向',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.triggerActionCollection }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.triggerActionCollection, idField: 'value', panelHeight: 'auto', showClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }];
    };
    /**
     * @return {?}
     */
    EventDefinitionComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var event = new EventDefinition();
        event.Id = ProcessDeUtil.GenerateElementId();
        this.data.push(event);
        this.grid.loadData(this.data);
    };
    /**
     * @return {?}
     */
    EventDefinitionComponent.prototype.delete = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.grid.endCellEdit();
        if (this.grid.selectedRow && this.grid.selectedRow.data) {
            /** @type {?} */
            var i = this.data.findIndex((/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d.Id === _this.grid.selectedRow.data.Id; }));
            this.data.splice(i, 1);
            this.grid.loadData(this.data);
        }
        else {
            this.message.info('尚未选中一条触发事件！');
        }
    };
    /**
     * @return {?}
     */
    EventDefinitionComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        this.grid.endCellEdit();
        if (this.validator()) {
            /** @type {?} */
            var object = { value: this.data, parameters: null };
            this.submitModal.emit(object);
        }
    };
    /**
     * @return {?}
     */
    EventDefinitionComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @private
     * @return {?}
     */
    EventDefinitionComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        var e_2, _a;
        if (this.data.length === 0) {
            this.message.info('至少需要一个信号定义，请了解！');
            return false;
        }
        else {
            try {
                for (var _b = __values(this.data), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var d = _c.value;
                    if (!d.SignalRef) {
                        this.message.info('信号编号不允许为空！');
                        return false;
                    }
                    else if (!d.name) {
                        this.message.info('信号名称不允许为空！');
                        return false;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (this.data.length > 1) {
                for (var i = 0; i < this.data.length; i++) {
                    /** @type {?} */
                    var code1 = this.data[i].SignalRef;
                    for (var j = i + 1; j < this.data.length; j++) {
                        /** @type {?} */
                        var code2 = this.data[j].SignalRef;
                        if (code1 === code2) {
                            this.message.warning("\u4FE1\u53F7\u7F16\u53F7\u4E0D\u5141\u8BB8\u91CD\u590D\uFF01");
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    };
    EventDefinitionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-event-definition',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span>\r\n        <h4 class=\"f-title-text\">\u5217\u8868</h4>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"add()\">\u65B0\u589E</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"delete()\">\u5220\u9664</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"data\" [columns]=\"columns\" [idField]=\"'Id'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n        [editable]=\"true\" [editMode]=\"'cell'\" [pagination]=\"false\" [showCheckbox]=\"false\" [multiSelect]=\"false\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    EventDefinitionComponent.ctorParameters = function () { return [
        { type: MessagerService },
        { type: ProcessDeUtil },
        { type: Injector }
    ]; };
    EventDefinitionComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        grid: [{ type: ViewChild, args: ['grid',] }]
    };
    return EventDefinitionComponent;
}());
var EventDefinitionConverter = /** @class */ (function () {
    function EventDefinitionConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    EventDefinitionConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.length > 0) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    };
    return EventDefinitionConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CatchEventAdapter = /** @class */ (function () {
    function CatchEventAdapter(uiState, injector) {
        this.uiState = uiState;
        this.injector = injector;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    CatchEventAdapter.prototype.setProperty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    CatchEventAdapter.prototype.setConfig = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    CatchEventAdapter.prototype.setEntity = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                switch (item.propertyID) {
                    case ResourceKeys.BackWardRule:
                        item.editor = BackwardRuleComponent;
                        item.converter = new BackwardRuleConverter();
                        item.editorParams = {
                            nodeType: 'CallActivitySubProcess'
                        };
                        break;
                    case ResourceKeys.eventDefinitions:
                        item.editor = EventDefinitionComponent;
                        item.converter = new EventDefinitionConverter();
                        break;
                    case ResourceKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter();
                        break;
                    default:
                        break;
                }
            }));
        }
    };
    CatchEventAdapter.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CatchEventAdapter.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: Injector }
    ]; };
    return CatchEventAdapter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MessageActivityAdapter = /** @class */ (function () {
    function MessageActivityAdapter(uiState) {
        this.uiState = uiState;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    MessageActivityAdapter.prototype.setProperty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    MessageActivityAdapter.prototype.setConfig = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    MessageActivityAdapter.prototype.setEntity = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                switch (item.propertyID) {
                    case ResourceKeys.messageNotice: // 参与者
                        item.editor = MessageNoticeComponent;
                        item.converter = new MessageNoticeConverter();
                        item.editorParams = {
                            location: 'messageActivity'
                        };
                        break;
                    case ResourceKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter();
                        break;
                    default:
                        break;
                }
            }));
        }
    };
    MessageActivityAdapter.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    MessageActivityAdapter.ctorParameters = function () { return [
        { type: ProcessDesignerUIState }
    ]; };
    return MessageActivityAdapter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AuditProcessDefInfo = /** @class */ (function () {
    function AuditProcessDefInfo() {
    }
    return AuditProcessDefInfo;
}());
/** @enum {string} */
var AuditEvent = {
    WF_ProcessDef_SaveDT: 'WF_ProcessDef_SaveDT',
    WF_ProcessDef_SaveRT: 'WF_ProcessDef_SaveRT',
    WF_ProcessDef_Deploy: 'WF_ProcessDef_Deploy',
    WF_ProcessDef_Import: 'WF_ProcessDef_Import',
    WF_ProcessDef_Export: 'WF_ProcessDef_Export',
    WF_ProcessDef_SyncDT: 'WF_ProcessDef_SyncDT',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ProcessInfo = /** @class */ (function () {
    function ProcessInfo() {
    }
    return ProcessInfo;
}());
var ProcessOrganization = /** @class */ (function () {
    function ProcessOrganization() {
    }
    return ProcessOrganization;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NotifyActivityAdapter = /** @class */ (function () {
    function NotifyActivityAdapter(uiState) {
        this.uiState = uiState;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    NotifyActivityAdapter.prototype.setProperty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    NotifyActivityAdapter.prototype.setConfig = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    NotifyActivityAdapter.prototype.setEntity = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                switch (item.propertyID) {
                    case ResourceKeys.ParticipantSchemes: // 参与者
                        item.editor = PerformerComponent;
                        item.converter = new PerformerConverter();
                        break;
                    case ResourceKeys.wf_ExecuteForms_PC: // 表单定义
                        item.editor = ExecuteFormsComponent;
                        item.converter = new ExecuteFormsConverter();
                        item.editorParams = {
                            location: 'notifyActivity',
                            tab: 'web'
                        };
                        break;
                    case ResourceKeys.wf_ExecuteForms_Mobile: // 表单定义
                        item.editor = ExecuteFormsComponent;
                        item.converter = new ExecuteFormsConverter();
                        item.editorParams = {
                            location: 'notifyActivity',
                            tab: 'mobile'
                        };
                        break;
                    case ResourceKeys.messageNotice: // 消息通知
                        item.editor = MessageNoticeComponent;
                        item.converter = new MessageNoticeConverter();
                        item.editorParams = {
                            location: 'activity'
                        };
                        break;
                    default:
                        item.editor = ExtendPropertyComponent;
                        item.converter = new ExtendPropertyConverter();
                        break;
                }
            }));
        }
    };
    NotifyActivityAdapter.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NotifyActivityAdapter.ctorParameters = function () { return [
        { type: ProcessDesignerUIState }
    ]; };
    return NotifyActivityAdapter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AifCreationBillProcessConverter = /** @class */ (function () {
    function AifCreationBillProcessConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    AifCreationBillProcessConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data) {
            return data.name || data.code || '（已设置）';
        }
        else {
            return '（未设置）';
        }
    };
    return AifCreationBillProcessConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AifCreationBillActivityAdapter = /** @class */ (function () {
    function AifCreationBillActivityAdapter(uiState) {
        this.uiState = uiState;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    AifCreationBillActivityAdapter.prototype.setProperty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    AifCreationBillActivityAdapter.prototype.setConfig = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    AifCreationBillActivityAdapter.prototype.setEntity = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                switch (item.propertyID) {
                    case ResourceKeys.aifProcessCode: // 单据流编号
                        item.editor = ProcessListHelpComponent;
                        item.converter = new AifCreationBillProcessConverter();
                        item.editorParams = {
                            bizTypeId: _this.uiState.flowFormInfo.flowForm.businessObjectId
                        };
                        break;
                    default:
                        break;
                }
            }));
        }
    };
    AifCreationBillActivityAdapter.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AifCreationBillActivityAdapter.ctorParameters = function () { return [
        { type: ProcessDesignerUIState }
    ]; };
    return AifCreationBillActivityAdapter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ProcessDesignerViewModel = /** @class */ (function () {
    function ProcessDesignerViewModel(uiState, service, util, notify, message, process, activity, subProcess, autoActAdapter, catchEventAdapter, messageActAdapter, notifyActAdapter, creationActAdapter, modalService, injector, resolver, http) {
        this.uiState = uiState;
        this.service = service;
        this.util = util;
        this.notify = notify;
        this.message = message;
        this.process = process;
        this.activity = activity;
        this.subProcess = subProcess;
        this.autoActAdapter = autoActAdapter;
        this.catchEventAdapter = catchEventAdapter;
        this.messageActAdapter = messageActAdapter;
        this.notifyActAdapter = notifyActAdapter;
        this.creationActAdapter = creationActAdapter;
        this.modalService = modalService;
        this.injector = injector;
        this.resolver = resolver;
        this.http = http;
    }
    // 初始加载流程属性
    // 初始加载流程属性
    /**
     * @param {?} obj
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.initProcessProperty = 
    // 初始加载流程属性
    /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var pptData = obj.propertyData;
        /** @type {?} */
        var ffId = pptData.EntryForm;
        if (ffId) {
            pptData.EntryForm = this.uiState.flowFormInfo.flowForm;
            this.uiState.propertyConfig = this.process.setProcessConfig(obj.propertyConfig);
            this.uiState.propertyData = pptData;
        }
        else {
            this.uiState.propertyConfig = this.process.setProcessConfig(obj.propertyConfig);
            this.uiState.propertyData = pptData;
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.setProperty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        // 更新属性框数据与配置
        /** @type {?} */
        var propertyData = obj.propertyData;
        switch (propertyData.ClrTypeID) {
            case ProcessClrTypeID.process:
                this.process.setProcessProperty(obj);
                break;
            case ProcessClrTypeID.userActivity:
                this.activity.setUserActivityProperty(obj);
                break;
            case ProcessClrTypeID.subProcess:
                this.subProcess.setProperty(obj);
                break;
            case ProcessClrTypeID.autoActivity:
                this.autoActAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.catchEvent:
                this.catchEventAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.operationActivity:
                this.activity.setUserActivityProperty(obj);
                break;
            case ProcessClrTypeID.messageActivity:
                this.messageActAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.notifyActivity:
                this.notifyActAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.aifCreationBillActivity:
                this.creationActAdapter.setProperty(obj);
                break;
            default:
                this.activity.setFlowElementProperty(obj);
                break;
        }
    };
    /**
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.updateSchemas = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.uiState.schemas = [];
        if (this.uiState.flowFormInfo.formalParameters && this.uiState.flowFormInfo.formalParameters.length > 0) {
            /** @type {?} */
            var schemaParams = this.uiState.flowFormInfo.formalParameters.filter((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p.dataType === 'CDTSchema' && p.schemaMetadataId; }));
            forkJoin$1(schemaParams.map((/**
             * @param {?} para
             * @return {?}
             */
            function (para) {
                return _this.service.getBusinessEntitybyId(para.schemaMetadataId);
            }))).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data && data.length > 0) {
                    data.forEach((/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) {
                        _this.uiState.schemas.push(d);
                    }));
                }
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.uiState.schemas = [];
            }));
        }
        else {
            this.uiState.schemas = [];
        }
    };
    /**
     * @param {?} formId
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.getFlowFormInfoById = /**
     * @param {?} formId
     * @return {?}
     */
    function (formId) {
        var _this = this;
        /** @type {?} */
        var $flowform = new Subject();
        if (formId) {
            forkJoin$1(this.service.GetFlowFormbyId(formId), this.service.getParametersbyFlowFormKey(formId).pipe(map((/**
             * @param {?} params
             * @return {?}
             */
            function (params) {
                _this.setFormParamCxt(params);
                return params;
            }))), this.service.getComponentsbyFlowformkey(formId), this.service.getExecuteFormbyFlowFormKey(formId), this.service.getBizActivities(formId), this.service.getCustomizeActions(formId)).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                /** @type {?} */
                var flowform = new FlowFormInfo();
                flowform.flowForm = re[0];
                flowform.formalParameters = re[1];
                flowform.bizComponents = re[2].filter((/**
                 * @param {?} cmp
                 * @return {?}
                 */
                function (cmp) { return cmp.ownerType !== 'Activity'; }));
                flowform.excuteForms = re[3];
                flowform.bizActivities = re[4];
                flowform.customizeActions = re[5];
                _this.uiState.flowFormInfo = flowform;
                // this.updateCOs();
                _this.updateSchemas();
                $flowform.next(flowform);
            }));
        }
        return $flowform.asObservable();
    };
    /**
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.getFormFormatsByBizCategory = /**
     * @return {?}
     */
    function () {
        if (this.uiState.flowFormInfo.flowForm.businessObjectId) {
            /** @type {?} */
            var url = "/api/runtime/wf/v1.0/formFormat/query?param=";
            /** @type {?} */
            var param = "{\"bizCategory\":\"" + this.uiState.flowFormInfo.flowForm.businessObjectId + "\"}";
            param = encodeURIComponent(param);
            url += param;
            return this.http.get(url);
        }
        else {
            return from(new Array());
        }
    };
    /**
     * 保存流程
     * @param content 流程上下文
     */
    /**
     * 保存流程
     * @param {?} content 流程上下文
     * @param {?} processInfo
     * @param {?} state
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.saveProcess = /**
     * 保存流程
     * @param {?} content 流程上下文
     * @param {?} processInfo
     * @param {?} state
     * @return {?}
     */
    function (content, processInfo, state) {
        return this.service.saveProcess(content, processInfo, state);
    };
    /**
     * 发布流程
     * @param content 流程上下文
     */
    /**
     * 发布流程
     * @param {?} content 流程上下文
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.deployProcess = /**
     * 发布流程
     * @param {?} content 流程上下文
     * @return {?}
     */
    function (content) {
        return this.service.deployProcess(content);
    };
    /**
     * @param {?} auditId
     * @param {?} success
     * @param {?} key
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.auditProcessDef = /**
     * @param {?} auditId
     * @param {?} success
     * @param {?} key
     * @return {?}
     */
    function (auditId, success, key) {
        /** @type {?} */
        var info = new AuditProcessDefInfo();
        info.auditId = auditId;
        info.success = success;
        info.processDefKey = key;
        this.service.auditProcessDef(info);
    };
    /**
     * 保存运行时流程
     * @param content 流程上下文
     */
    /**
     * 保存运行时流程
     * @param {?} content 流程上下文
     * @param {?} procDefId
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.saveRTProcess = /**
     * 保存运行时流程
     * @param {?} content 流程上下文
     * @param {?} procDefId
     * @return {?}
     */
    function (content, procDefId) {
        return this.service.saveRTProcess(content, procDefId);
    };
    /**
     * @param {?} process
     * @param {?} processInfo
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.saveAsProcess = /**
     * @param {?} process
     * @param {?} processInfo
     * @return {?}
     */
    function (process, processInfo) {
        var _this = this;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(SaveAsEditComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.procKey = process.DefaultProcess.Key;
        compRef.instance.procName = process.DefaultProcess.Name + '_副本';
        compRef.instance.isAdministratorConfig = this.uiState.isAdministratorConfig;
        compRef.instance.organizations = this.uiState.organizations;
        compRef.instance.accessLevel = processInfo.accessLevel;
        compRef.instance.organization = processInfo.procOrg.orgId;
        compRef.instance.organizationName = processInfo.procOrg.orgName;
        /** @type {?} */
        var modalOptions = {
            title: '另存为',
            width: 450, height: 400,
            buttons: compRef.instance.btnRef,
            showButtons: true
        };
        /** @type {?} */
        var dlg = this.modalService.show(compRef, modalOptions);
        compRef.instance.submit.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            process.DefaultProcess.Name = re.procName;
            /** @type {?} */
            var procInfo = new ProcessInfo();
            procInfo.accessLevel = re.accessLevel;
            procInfo.procOrg = {
                orgId: re.organization,
                orgName: re.organizationName
            };
            _this.saveProcess(JSON.stringify(process), procInfo, 1).subscribe((/**
             * @param {?} r
             * @return {?}
             */
            function (r) {
                _this.notify.success((/** @type {?} */ ({
                    title: '系统提示', msg: '另存为成功', timeout: 3000
                })));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.notify.error((/** @type {?} */ ({
                    title: '系统提示', msg: '另存为失败，请检查流程是否正确！', timeout: 3000
                })));
            }));
            dlg.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            dlg.close();
        }));
    };
    /**
     * 同步设计器时流程定义
     */
    /**
     * 同步设计器时流程定义
     * @param {?} content
     * @param {?} rtProcessInfo
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.syncDtProcess = /**
     * 同步设计器时流程定义
     * @param {?} content
     * @param {?} rtProcessInfo
     * @return {?}
     */
    function (content, rtProcessInfo) {
        var _this = this;
        if (content) {
            /** @type {?} */
            var process_1 = JSON.parse(content);
            this.message.question('是否将当前版本流程定义同步到设计时流程定义包！', (/**
             * @return {?}
             */
            function () {
                _this.service.syncDtProcess(content, rtProcessInfo).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    _this.notify.success((/** @type {?} */ ({
                        title: '系统提示', msg: '同步成功', timeout: 3000
                    })));
                    _this.auditProcessDef(AuditEvent.WF_ProcessDef_SyncDT, true, process_1.DefaultProcess.Key);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    _this.notify.error((/** @type {?} */ ({
                        title: '系统提示', msg: '同步失败，请联系管理员查看原因！', timeout: 3000
                    })));
                    _this.auditProcessDef(AuditEvent.WF_ProcessDef_SyncDT, false, process_1.DefaultProcess.Key);
                }));
            }));
        }
    };
    /**
     * @param {?} data
     * @param {?} processInfo
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.beforeCompleteStrategyChange = /**
     * @param {?} data
     * @param {?} processInfo
     * @return {?}
     */
    function (data, processInfo) {
        var _this = this;
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/processInstances/runtimeActivityInstances?procDefId=" + processInfo.rtProcDefId + "&activityDefinitionId=" + data.Id;
        return this.http.get(url).pipe(switchMap((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            if (re && re.length > 0) {
                _this.message.info('当前节点存在运行中的活动实例，不允许调整完成策略，请了解！');
                return of(false);
            }
            else {
                return of(true);
            }
        })));
    };
    /**
     * @param {?} procCategoryId
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.getProcessCategory = /**
     * @param {?} procCategoryId
     * @return {?}
     */
    function (procCategoryId) {
        return this.service.GetFlowFormbyId(procCategoryId);
    };
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.setFormParamCxt = /**
     * @private
     * @param {?} params
     * @return {?}
     */
    function (params) {
        var _this = this;
        this.uiState.formalParameterContext = [];
        if (params && params.length > 0) {
            params.forEach((/**
             * @param {?} param
             * @return {?}
             */
            function (param) {
                if (param.dataType === 'CDTSchema') {
                    /** @type {?} */
                    var formalParameterContext = [{
                            key: "schemaId_" + param.code,
                            name: "schemaId_" + param.name,
                            description: "schemaId_" + param.name
                        }, {
                            key: "metadataId_" + param.code,
                            name: "metadataId_" + param.name,
                            description: "metadataId_" + param.name
                        }];
                    _this.uiState.formalParameterContext = _this.uiState.formalParameterContext.concat(formalParameterContext);
                }
            }));
        }
    };
    ProcessDesignerViewModel.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ProcessDesignerViewModel.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: ProcessDesignerDataService },
        { type: ProcessDeUtil },
        { type: NotifyService },
        { type: MessagerService },
        { type: BpmnProcessViewModel },
        { type: WFFlowElementsViewModel },
        { type: SubProcessViewModel },
        { type: AutoActivityAdapter },
        { type: CatchEventAdapter },
        { type: MessageActivityAdapter },
        { type: NotifyActivityAdapter },
        { type: AifCreationBillActivityAdapter },
        { type: BsModalService },
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: HttpService }
    ]; };
    return ProcessDesignerViewModel;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RTProcessInfo = /** @class */ (function () {
    function RTProcessInfo() {
    }
    return RTProcessInfo;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NoteComponent = /** @class */ (function () {
    function NoteComponent() {
        this.submit = new Subject();
        this.cancel = new Subject();
        this.placeholder = '请输入流程变更记录';
    }
    /**
     * @return {?}
     */
    NoteComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    NoteComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        this.submit.next(this.record);
    };
    /**
     * @return {?}
     */
    NoteComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.cancel.next();
    };
    NoteComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-note',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <textarea class=\"form-control content-textarea\" style=\"height: 100%;\" [(ngModel)]=\"record\" [placeholder]=\"placeholder\"></textarea>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    NoteComponent.ctorParameters = function () { return []; };
    NoteComponent.propDecorators = {
        footer: [{ type: ViewChild, args: ['footer',] }]
    };
    return NoteComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WfProcessEditorComponent = /** @class */ (function () {
    function WfProcessEditorComponent(sanitizer, uiState, viewModel, service, loadService, notify, message, activity, injector, modalService, resolver) {
        var _this = this;
        this.sanitizer = sanitizer;
        this.uiState = uiState;
        this.viewModel = viewModel;
        this.service = service;
        this.loadService = loadService;
        this.notify = notify;
        this.message = message;
        this.activity = activity;
        this.injector = injector;
        this.modalService = modalService;
        this.resolver = resolver;
        this.flag = true;
        this.cls = 'farris-main-area flex-column';
        this.action = 'edit';
        this.mode = 'general';
        this.close = new EventEmitter();
        /**
         * 监听事件处理
         */
        this.eventHandler = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var postData = (/** @type {?} */ (event.data));
            if (_this.uiState.POST_MESSAGE_TARGET.search(event.origin) > -1) {
                switch (postData.action) {
                    case ResourceKeys.wf_initProperty:
                        if (_this.flag) {
                            _this.flag = false;
                            _this.closeLoading();
                        }
                        _this.viewModel.initProcessProperty(postData.data);
                        break;
                    case ResourceKeys.wf_save:
                        _this.uiState.content = postData.data;
                        _this.showLoading();
                        _this.save();
                        break;
                    case ResourceKeys.wf_deploy:
                        _this.uiState.content = postData.data;
                        _this.showLoading();
                        _this.viewModel.deployProcess(_this.uiState.content).subscribe((/**
                         * @param {?} data
                         * @return {?}
                         */
                        function (data) {
                            _this.closeLoading();
                            _this.viewModel.saveProcess(_this.uiState.content, _this.processInfo, 0).subscribe((/**
                             * @param {?} r
                             * @return {?}
                             */
                            function (r) { }));
                            _this.notify.success((/** @type {?} */ ({
                                title: '系统提示', msg: '发布成功', timeout: 3000
                            })));
                            /** @type {?} */
                            var process = JSON.parse(_this.uiState.content);
                            _this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_Deploy, true, process.DefaultProcess.Key);
                        }), (/**
                         * @param {?} error
                         * @return {?}
                         */
                        function (error) {
                            _this.closeLoading();
                            _this.notify.error((/** @type {?} */ ({
                                title: '系统提示', msg: '发布失败，请检查流程是否正确！', timeout: 3000
                            })));
                            /** @type {?} */
                            var process = JSON.parse(_this.uiState.content);
                            _this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_Deploy, false, process.DefaultProcess.Key);
                        }));
                        break;
                    case ResourceKeys.wf_saveAs:
                        /** @type {?} */
                        var prcoess = postData.data;
                        _this.viewModel.saveAsProcess(prcoess, _this.processInfo);
                        break;
                    case ResourceKeys.wf_sync:
                        /** @type {?} */
                        var content = postData.data;
                        _this.viewModel.syncDtProcess(content, _this.rtProcessInfo);
                        break;
                    case ResourceKeys.wf_note:
                        _this.note(postData.data);
                        break;
                    case ResourceKeys.wf_closeDesigner:
                        _this.close.emit();
                        break;
                    case ResourceKeys.getActivities: // 获取活动节点信息
                        _this.uiState.getUserActList(postData.data);
                        break;
                    case ResourceKeys.getEndEvents: // 获取所有结束节点信息
                        _this.uiState.getEndEventList(postData.data);
                        break;
                    case 'loaded':
                        _this.openProcContent();
                        break;
                    case ResourceKeys.wf_showTip:
                        _this.showTip(postData.data);
                        break;
                    default:
                        _this.viewModel.setProperty(postData.data);
                        break;
                }
            }
        });
        // 如果存在消息监听，先删掉
        if (WfProcessEditorComponent.func) {
            window.removeEventListener('message', WfProcessEditorComponent.func, false);
        }
        this.addMessageListener();
        this.uiState.getAdministratorInfo();
    }
    Object.defineProperty(WfProcessEditorComponent.prototype, "time", {
        get: /**
         * @return {?}
         */
        function () {
            return this._time;
        },
        set: /**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            this._time = t;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    WfProcessEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getSrc();
        this.uiState.initUIState();
        this.showLoading();
        this.updateProperty();
        // 获取消息列表
        this.uiState.getMessageChannels();
    };
    /**
     * @private
     * @return {?}
     */
    WfProcessEditorComponent.prototype.getSrc = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var processCategoryId;
        if (this._time === ProcessTime.rt) {
            processCategoryId = this.rtProcessInfo.flowFormId;
        }
        else {
            processCategoryId = this.processInfo.flowFormId;
        }
        this.viewModel.getProcessCategory(processCategoryId).subscribe((/**
         * @param {?} procCategory
         * @return {?}
         */
        function (procCategory) {
            _this.src = '/platform/runtime/wf/web/designer/index.html';
            if (_this._time === ProcessTime.rt) {
                _this.src = _this.src + '?time=rt';
            }
            else {
                _this.src = _this.src + "?time=dt";
                if (procCategory) {
                    _this.src = _this.src + ("&bizCategoryId=" + procCategory.businessObjectId);
                }
            }
            if (_this.action === 'view') {
                _this.src = _this.src + '&action=view';
            }
            else {
                _this.src = _this.src + '&action=edit';
            }
            if (_this.mode === 'general') {
                _this.src = _this.src + '&mode=general';
            }
            else {
                _this.src = _this.src + '&mode=simplify';
            }
            _this.src = _this.sanitizer.bypassSecurityTrustResourceUrl(_this.src);
        }));
    };
    /**
     * 添加事件监听
     */
    /**
     * 添加事件监听
     * @private
     * @return {?}
     */
    WfProcessEditorComponent.prototype.addMessageListener = /**
     * 添加事件监听
     * @private
     * @return {?}
     */
    function () {
        window.addEventListener('message', this.eventHandler, false);
        WfProcessEditorComponent.func = this.eventHandler;
    };
    /**
     * @private
     * @return {?}
     */
    WfProcessEditorComponent.prototype.updateProperty = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.propertyPanel.propertyChanged.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.updateChangeProperty(data);
        }));
        this.propertyPanel.submitModal.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.updateChangeProperty(data.changeObject);
        }));
        return false; // 防止冒泡
    };
    /**
     * 更新属性
     */
    /**
     * 更新属性
     * @private
     * @param {?} data
     * @return {?}
     */
    WfProcessEditorComponent.prototype.updateChangeProperty = /**
     * 更新属性
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        data.Id = this.uiState.propertyData.Id;
        switch (data.propertyID) {
            case ResourceKeys.EntryForm:
                this.bindEntryFormInfo(data);
                break;
            case ResourceKeys.ApprovalItems:
                this.sendMessage(ResourceKeys.updateProperty, JSON.stringify(data));
                this.activity.buildCounterSignVariables(data.propertyValue);
                break;
            case ResourceKeys.CompleteStrategy:
                this.beforeCompleteStrategyChange(data).subscribe((/**
                 * @param {?} b
                 * @return {?}
                 */
                function (b) {
                    if (b) {
                        _this.sendMessage(ResourceKeys.updateProperty, JSON.stringify(data));
                        _this.completeStrategyChanged(data.propertyValue);
                    }
                    else { // 刷新属性框
                        _this.sendMessage(ResourceKeys.refresh, JSON.stringify(data));
                    }
                }));
                break;
            case ResourceKeys.SignRule:
                this.sendMessage(ResourceKeys.updateProperty, JSON.stringify(data));
                break;
            default:
                this.sendMessage(ResourceKeys.updateProperty, JSON.stringify(data));
                break;
        }
    };
    /**
     * 绑定流程分类的参数列表，流程构件，表单赋值
     * @param data
     */
    /**
     * 绑定流程分类的参数列表，流程构件，表单赋值
     * @private
     * @param {?} data
     * @return {?}
     */
    WfProcessEditorComponent.prototype.bindEntryFormInfo = /**
     * 绑定流程分类的参数列表，流程构件，表单赋值
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var flowformId = data.propertyValue.id;
        if (flowformId) {
            this.viewModel.getFlowFormInfoById(flowformId).subscribe((/**
             * @param {?} info
             * @return {?}
             */
            function (info) {
                data.flowForm = info.flowForm;
                data.formalParameters = info.formalParameters;
                data.processBizComponnets = info.bizComponents;
                data.executeForms = [];
                info.excuteForms.forEach((/**
                 * @param {?} form
                 * @return {?}
                 */
                function (form) {
                    if (form.isDefault) {
                        /** @type {?} */
                        var executeForms = _this.ConvertExecuteForm(form);
                        data.executeForms = data.executeForms.concat(executeForms); // 流程绑定默认单据
                    }
                }));
                data.customizeActions = info.customizeActions.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return a.isAll === true; })).map((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return ({
                    id: a.id, code: a.code, name: a.name, terminalType: a.terminal,
                    actualParameters: a.actualParameters.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    function (p) { return ({
                        Name: p.code, Value: p.value, ValueText: p.name, Tag: 'expression'
                    }); }))
                }); }));
                _this.sendMessage(ResourceKeys.loadBizActivity, info.bizActivities || []);
                _this.sendMessage(ResourceKeys.updateProperty, JSON.stringify(data));
            }));
        }
    };
    /**
     * @private
     * @param {?} record
     * @return {?}
     */
    WfProcessEditorComponent.prototype.note = /**
     * @private
     * @param {?} record
     * @return {?}
     */
    function (record) {
        var _this = this;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(NoteComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.record = record;
        /** @type {?} */
        var modalConfig = {
            title: '流程变更记录',
            width: 800,
            height: 520,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        /** @type {?} */
        var dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.cancel.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) { return dialog.close(); }));
        compRef.instance.submit.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.sendMessage(ResourceKeys.wf_note, data);
            dialog.close();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    WfProcessEditorComponent.prototype.openProcContent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.time === ProcessTime.dt) {
            if (this.processInfo) {
                if (this.processInfo.processKey === ResourceKeys.new && this.processInfo.flowFormId) {
                    this.openNewProcess(this.processInfo.flowFormId);
                }
                else {
                    // TODO：首先获取流程分类信息，确保流程分类和流程构件获取到（会稍微影响设计器打开速度）
                    this.viewModel.getFlowFormInfoById(this.processInfo.flowFormId).subscribe((/**
                     * @param {?} info
                     * @return {?}
                     */
                    function (info) {
                        _this.sendMessage(ResourceKeys.loadBizActivity, info.bizActivities || []);
                        _this.getProcContent(_this.processInfo.processKey).subscribe((/**
                         * @param {?} re
                         * @return {?}
                         */
                        function (re) {
                            _this.uiState.content = _this.checkModelContent(JSON.stringify(re));
                            _this.sendMessage(ResourceKeys.open, {
                                content: _this.uiState.content
                            });
                        }));
                    }));
                }
            }
            else {
                throw new Error('不存在设计时流程信息！请先赋值！');
            }
        }
        else if (this.time === ProcessTime.rt) {
            if (this.rtProcessInfo) {
                this.viewModel.getFlowFormInfoById(this.rtProcessInfo.flowFormId).subscribe((/**
                 * @param {?} info
                 * @return {?}
                 */
                function (info) {
                    _this.sendMessage(ResourceKeys.loadBizActivity, info.bizActivities || []);
                    _this.getProcContent(_this.rtProcessInfo.rtProcDefId).subscribe((/**
                     * @param {?} re
                     * @return {?}
                     */
                    function (re) {
                        _this.uiState.content = _this.checkModelContent(JSON.stringify(re));
                        _this.sendMessage(ResourceKeys.open, {
                            content: _this.uiState.content
                        });
                    }));
                }));
            }
            else {
                throw new Error('不存在运行时流程信息！请先赋值！');
            }
        }
    };
    /**
     * 新增流程，基于流程分类获取参数列表，构件和表单
     * @param ffId 流程分类ID
     */
    /**
     * 新增流程，基于流程分类获取参数列表，构件和表单
     * @private
     * @param {?} ffId 流程分类ID
     * @return {?}
     */
    WfProcessEditorComponent.prototype.openNewProcess = /**
     * 新增流程，基于流程分类获取参数列表，构件和表单
     * @private
     * @param {?} ffId 流程分类ID
     * @return {?}
     */
    function (ffId) {
        var _this = this;
        this.viewModel.getFlowFormInfoById(ffId)
            .subscribe((/**
         * @param {?} info
         * @return {?}
         */
        function (info) {
            /** @type {?} */
            var processBizComponnets = info.bizComponents;
            /** @type {?} */
            var customizeActions = info.customizeActions.filter((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return a.isAll === true; })).map((/**
             * @param {?} a
             * @return {?}
             */
            function (a) { return ({
                id: a.id, code: a.code, name: a.name, terminalType: a.terminal,
                actualParameters: a.actualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return ({
                    Name: p.code, Value: p.value, ValueText: p.name, Tag: 'expression'
                }); }))
            }); }));
            /** @type {?} */
            var executeForms = [];
            info.excuteForms.forEach((/**
             * @param {?} form
             * @return {?}
             */
            function (form) {
                if (form.isDefault) {
                    /** @type {?} */
                    var forms = _this.ConvertExecuteForm(form);
                    executeForms = executeForms.concat(forms); // 流程绑定默认单据
                }
            }));
            // 如果不存在表单定义，需要去表单格式列表取一下
            if (executeForms.length === 0
                || executeForms.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.TerminalType === TerminalType.PC; })) === -1
                || executeForms.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.TerminalType === TerminalType.MOBILE; })) === -1) {
                _this.viewModel.getFormFormatsByBizCategory().subscribe((/**
                 * @param {?} formFormats
                 * @return {?}
                 */
                function (formFormats) {
                    if (formFormats && formFormats.length > 0) {
                        if (executeForms.findIndex((/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) { return e.TerminalType === TerminalType.PC; })) === -1) {
                            /** @type {?} */
                            var formFormat = formFormats.filter((/**
                             * @param {?} f
                             * @return {?}
                             */
                            function (f) { return f.terminal === 'PC' && f.status === 0; }))[0];
                            if (formFormat) {
                                executeForms.push(_this.formFormat2ExecuteForm(formFormat));
                            }
                        }
                        if (executeForms.findIndex((/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) { return e.TerminalType === TerminalType.MOBILE; })) === -1) {
                            /** @type {?} */
                            var formFormat = formFormats.filter((/**
                             * @param {?} f
                             * @return {?}
                             */
                            function (f) { return f.terminal === 'Mobile' && f.status === 0; }))[0];
                            if (formFormat) {
                                executeForms.push(_this.formFormat2ExecuteForm(formFormat));
                            }
                        }
                    }
                    _this.sendMessage(ResourceKeys.loadBizActivity, info.bizActivities || []);
                    _this.sendMessage(ResourceKeys.new, {
                        name: _this.processInfo.processName,
                        bizObjId: _this.processInfo.bizObjId,
                        ffId: ffId,
                        ffName: _this.processInfo.flowFormName,
                        startMode: _this.processInfo.startMode,
                        formalParameters: info.formalParameters,
                        processBizComponnets: processBizComponnets,
                        executeForms: executeForms,
                        customizeActions: customizeActions,
                        processDescription: info.flowForm.processDescription
                    });
                }));
            }
            else {
                _this.sendMessage(ResourceKeys.loadBizActivity, info.bizActivities || []);
                _this.sendMessage(ResourceKeys.new, {
                    name: _this.processInfo.processName,
                    bizObjId: _this.processInfo.bizObjId,
                    ffId: ffId,
                    ffName: _this.processInfo.flowFormName,
                    startMode: _this.processInfo.startMode,
                    formalParameters: info.formalParameters,
                    processBizComponnets: processBizComponnets,
                    executeForms: executeForms,
                    customizeActions: customizeActions,
                    processDescription: info.flowForm.processDescription
                });
            }
        }));
    };
    // 向子页面发送消息
    // 向子页面发送消息
    /**
     * @private
     * @param {?} action
     * @param {?} data
     * @return {?}
     */
    WfProcessEditorComponent.prototype.sendMessage = 
    // 向子页面发送消息
    /**
     * @private
     * @param {?} action
     * @param {?} data
     * @return {?}
     */
    function (action, data) {
        /** @type {?} */
        var iframeWindow = this.iframe.nativeElement.contentWindow;
        /** @type {?} */
        var message = this.wrapMessage(action, data);
        iframeWindow.postMessage(message, this.uiState.POST_MESSAGE_TARGET);
    };
    // 包装消息内容
    // 包装消息内容
    /**
     * @private
     * @param {?} action
     * @param {?} data
     * @return {?}
     */
    WfProcessEditorComponent.prototype.wrapMessage = 
    // 包装消息内容
    /**
     * @private
     * @param {?} action
     * @param {?} data
     * @return {?}
     */
    function (action, data) {
        return {
            action: action,
            data: data
        };
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    WfProcessEditorComponent.prototype.showTip = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data.type === 'message') {
            switch (data.level) {
                case 'warning':
                    this.message.warning(data.message);
                    break;
                case 'error':
                    this.message.error(data.message);
                    break;
                default:
                    this.message.info(data.message);
                    break;
            }
        }
        else if (data.type === 'notify') {
            switch (data.level) {
                case 'warning':
                    this.notify.warning(data.message);
                    break;
                case 'error':
                    this.notify.error(data.message);
                    break;
                default:
                    this.notify.info(data.message);
                    break;
            }
        }
    };
    /**
     * 获取流程上下文
     * @param id 流程定义ID（设计时使用流程定义Key，运行时使用流程定义ID）
     */
    /**
     * 获取流程上下文
     * @param {?} id 流程定义ID（设计时使用流程定义Key，运行时使用流程定义ID）
     * @return {?}
     */
    WfProcessEditorComponent.prototype.getProcContent = /**
     * 获取流程上下文
     * @param {?} id 流程定义ID（设计时使用流程定义Key，运行时使用流程定义ID）
     * @return {?}
     */
    function (id) {
        if (id) {
            if (this.time === ProcessTime.dt) {
                return this.service.getProcContentbyKey(id);
            }
            else if (this.time === ProcessTime.rt) {
                return this.service.getRTProcContentbyId(id);
            }
            else {
                throw new Error('设计器运行时机错误！');
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    WfProcessEditorComponent.prototype.save = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var process = JSON.parse(this.uiState.content);
        // this.uiState.content = this.checkModelContent(this.uiState.content);
        this.saveHttp().subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.closeLoading();
            _this.notify.success((/** @type {?} */ ({
                title: '系统提示', msg: '保存成功', timeout: 3000
            })));
            if (_this.time === ProcessTime.dt) {
                _this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_SaveDT, true, process.DefaultProcess.Key);
            }
            else if (_this.time === ProcessTime.rt) {
                _this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_SaveRT, true, process.DefaultProcess.Key);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.closeLoading();
            _this.notify.error((/** @type {?} */ ({
                title: '系统提示', msg: '保存失败，请检查流程是否正确！', timeout: 3000
            })));
            if (_this.time === ProcessTime.dt) {
                _this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_SaveDT, false, process.DefaultProcess.Key);
            }
            else if (_this.time === ProcessTime.rt) {
                _this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_SaveRT, false, process.DefaultProcess.Key);
            }
        }));
    };
    /**
     * 保存流程定义（设计时+运行时）
     */
    /**
     * 保存流程定义（设计时+运行时）
     * @private
     * @return {?}
     */
    WfProcessEditorComponent.prototype.saveHttp = /**
     * 保存流程定义（设计时+运行时）
     * @private
     * @return {?}
     */
    function () {
        if (this.uiState.content) {
            if (this.time === ProcessTime.dt) {
                return this.viewModel.saveProcess(this.uiState.content, this.processInfo, 1);
            }
            else if (this.time === ProcessTime.rt) {
                return this.viewModel.saveRTProcess(this.uiState.content, this.rtProcessInfo.rtProcDefId);
            }
            else {
                throw new Error('设计器运行时机错误！');
            }
        }
    };
    /**
     * @return {?}
     */
    WfProcessEditorComponent.prototype.showLoading = /**
     * @return {?}
     */
    function () {
        this.loadService.show({ container: 'body', message: '', type: 1 });
    };
    /**
     * @return {?}
     */
    WfProcessEditorComponent.prototype.closeLoading = /**
     * @return {?}
     */
    function () {
        this.loadService.close();
    };
    /**
     * @private
     * @param {?} form
     * @return {?}
     */
    WfProcessEditorComponent.prototype.ConvertExecuteForm = /**
     * @private
     * @param {?} form
     * @return {?}
     */
    function (form) {
        /** @type {?} */
        var executeForms = new Array();
        if (form.terminal === 'web,app') {
            /** @type {?} */
            var webForm = new ExecuteFormModel();
            webForm.ComponentId = form.appId;
            webForm.formFormatId = form.formFormatId;
            webForm.FormType = form.formType;
            webForm.Name = form.name;
            webForm.TerminalType = TerminalType.PC;
            if (form.actualParameters && form.actualParameters.length > 0) {
                webForm.ActualParameters = form.actualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return ({
                    Name: p.code,
                    Value: p.value
                }); }));
            }
            executeForms.push(webForm);
            /** @type {?} */
            var appForm = new ExecuteFormModel();
            appForm.ComponentId = form.appId;
            appForm.formFormatId = form.formFormatId;
            appForm.FormType = form.formType;
            appForm.Name = form.name;
            appForm.TerminalType = TerminalType.MOBILE;
            if (form.actualParameters && form.actualParameters.length > 0) {
                appForm.ActualParameters = form.actualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return ({
                    Name: p.code,
                    Value: p.value
                }); }));
            }
            executeForms.push(appForm);
        }
        else {
            /** @type {?} */
            var executeForm = new ExecuteFormModel();
            executeForm.ComponentId = form.appId;
            executeForm.formFormatId = form.formFormatId;
            executeForm.FormType = form.formType;
            executeForm.Name = form.name;
            switch (form.terminal) {
                case 'web':
                    executeForm.TerminalType = TerminalType.PC;
                    break;
                case 'app':
                    executeForm.TerminalType = TerminalType.MOBILE;
                    break;
            }
            if (form.actualParameters && form.actualParameters.length > 0) {
                executeForm.ActualParameters = form.actualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) { return ({
                    Name: p.code,
                    Value: p.value
                }); }));
            }
            executeForms.push(executeForm);
        }
        return executeForms;
    };
    /**
     * @private
     * @param {?} formformat
     * @return {?}
     */
    WfProcessEditorComponent.prototype.formFormat2ExecuteForm = /**
     * @private
     * @param {?} formformat
     * @return {?}
     */
    function (formformat) {
        /** @type {?} */
        var form = new ExecuteFormModel();
        form.Id = ProcessDeUtil.GenerateElementId();
        form.ComponentId = null;
        form.formFormatId = formformat.id;
        form.FormType = '0';
        form.Name = formformat.name;
        switch (formformat.terminal) {
            case 'PC':
                form.TerminalType = TerminalType.PC;
                break;
            case 'Mobile':
                form.TerminalType = TerminalType.MOBILE;
                break;
        }
        if (formformat.urlParameters && formformat.urlParameters.length > 0) {
            form.ActualParameters = formformat.urlParameters.map((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return ({
                Name: p.code,
                Value: p.value
            }); }));
        }
        return form;
    };
    /**
     * @private
     * @param {?} strategy
     * @return {?}
     */
    WfProcessEditorComponent.prototype.completeStrategyChanged = /**
     * @private
     * @param {?} strategy
     * @return {?}
     */
    function (strategy) {
        var _this = this;
        if (strategy !== this.uiState.completeIterator[0].key) {
            // 参与者存在自动审批的情况下，不允许修改完成策略为会签规则
            // if (this.uiState.propertyData.ParticipantSchemes
            //   && this.uiState.propertyData.ParticipantSchemes.options
            //   && this.uiState.propertyData.ParticipantSchemes.options.automaticPerformers
            //   && this.uiState.propertyData.ParticipantSchemes.options.automaticPerformers.length > 0) {
            //   return;
            // } else {
            // 会签规则不存在，即由抢占模式，变为会签时
            if (!this.uiState.propertyData.SignRule) {
                // 会签是自动弹出会签规则编辑
                /** @type {?} */
                var compFactory = this.resolver.resolveComponentFactory(SignRuleComponent);
                /** @type {?} */
                var compRef = compFactory.create(this.injector);
                compRef.instance.value = [];
                // compRef.instance.counterSignVariables = this.uiState.counterSignVariables || [];
                // compRef.instance.approvalItems = this.uiState.approvalItems || [];
                /** @type {?} */
                var modalConfig = Object.assign(compRef.instance.modalConfig, { buttons: compRef.instance.modalFooter });
                /** @type {?} */
                var dialog_1 = this.modalService.show(compRef, modalConfig);
                compRef.instance.closeModal.subscribe((/**
                 * @param {?} $event
                 * @return {?}
                 */
                function ($event) { return dialog_1.close(); }));
                compRef.instance.submitModal.subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    _this.updateChangeProperty({
                        categoryId: 'performerProperty',
                        propertyID: ResourceKeys.SignRule,
                        propertyValue: data.value
                    });
                    dialog_1.close();
                }));
            }
            // 会签规则下，驳回规则约束
            if (((/** @type {?} */ (this.uiState.propertyData.BackWardRule))).SelectTargetAble === true) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.message.warning('会签策略下,“驳回规则”不允许“动态选择驳回级次”，请修改！');
                }), 500);
            }
            // }
        }
    };
    /**
     * 完成策略调整校验
     */
    /**
     * 完成策略调整校验
     * @private
     * @param {?} data
     * @return {?}
     */
    WfProcessEditorComponent.prototype.beforeCompleteStrategyChange = /**
     * 完成策略调整校验
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (this.time === ProcessTime.rt) {
            return this.viewModel.beforeCompleteStrategyChange(data, this.rtProcessInfo);
        }
        else {
            return of(true);
        }
    };
    /**
     * 保存，发布，另存，同步操作时
     * 校验模型的流程分类ID与列表存储是否一致，不一致时，以列表为准
     */
    /**
     * 保存，发布，另存，同步操作时
     * 校验模型的流程分类ID与列表存储是否一致，不一致时，以列表为准
     * @private
     * @param {?} content
     * @return {?}
     */
    WfProcessEditorComponent.prototype.checkModelContent = /**
     * 保存，发布，另存，同步操作时
     * 校验模型的流程分类ID与列表存储是否一致，不一致时，以列表为准
     * @private
     * @param {?} content
     * @return {?}
     */
    function (content) {
        /** @type {?} */
        var process = JSON.parse(content);
        /** @type {?} */
        var modelBizDefKey = process.DefaultProcess.extensionElements.find((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.ClrTypeID === 'wf.ProcessHeader'; })).BizDefKey;
        if (this.time === ProcessTime.dt) {
            if (modelBizDefKey === this.processInfo.flowFormId) {
                return content;
            }
            else {
                process.DefaultProcess.extensionElements.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.ClrTypeID === 'wf.ProcessHeader'; })).BizDefKey = this.processInfo.flowFormId;
                process.DefaultProcess.extensionElements.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.ClrTypeID === 'wf.ProcessHeader'; })).BizDefName = this.uiState.flowFormInfo.flowForm.name;
                return JSON.stringify(process);
            }
        }
        else if (this.time === ProcessTime.rt) {
            if (modelBizDefKey === this.rtProcessInfo.flowFormId) {
                return content;
            }
            else {
                process.DefaultProcess.extensionElements.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.ClrTypeID === 'wf.ProcessHeader'; })).BizDefKey = this.rtProcessInfo.flowFormId;
                process.DefaultProcess.extensionElements.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { return e.ClrTypeID === 'wf.ProcessHeader'; })).BizDefName = this.uiState.flowFormInfo.flowForm.name;
                return JSON.stringify(process);
            }
        }
    };
    /**
     * 消息监听处理方法
     */
    WfProcessEditorComponent.func = null;
    WfProcessEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'wf-process-editor',
                    template: "\n  <div class=\"f-utils-flex-column h-100 m-2\">\n    <div class=\"flex-auto d-flex flex-fill flex-row\" style=\"position:relative; overflow: hidden\">\n      <div class=\"flex-grow-1\">\n        <div *ngIf=\"src\" class=\"h-100\">\n          <iframe #iframe class=\"bpmn-designer\" [src]=\"src\" frameborder=\"0\">\n          </iframe>\n        </div>\n      </div>\n      <div>\n        <app-property-panel #propertyPanel [(propertyConfig)]=\"uiState.propertyConfig\" [(propertyData)]=\"uiState.propertyData\"\n          width=\"235\" showCloseBtn=\"false\"></app-property-panel>\n      </div>\n    </div>\n  </div>",
                    styles: ["\n    .bpmn-designer {\n      height: 100%;\n      min-height: 400px;\n      width: 100%;\n    }"]
                }] }
    ];
    /** @nocollapse */
    WfProcessEditorComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: ProcessDesignerUIState },
        { type: ProcessDesignerViewModel },
        { type: ProcessDesignerDataService },
        { type: LoadingService },
        { type: NotifyService },
        { type: MessagerService },
        { type: WFFlowElementsViewModel },
        { type: Injector },
        { type: BsModalService },
        { type: ComponentFactoryResolver }
    ]; };
    WfProcessEditorComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        time: [{ type: Input }],
        processInfo: [{ type: Input }],
        rtProcessInfo: [{ type: Input }],
        action: [{ type: Input }],
        mode: [{ type: Input }],
        close: [{ type: Output }],
        propertyPanel: [{ type: ViewChild, args: ['propertyPanel',] }],
        iframe: [{ type: ViewChild, args: ['iframe',] }]
    };
    return WfProcessEditorComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JumpScopePipe = /** @class */ (function () {
    function JumpScopePipe() {
    }
    /**
     * @param {?} value
     * @param {?} nodeId
     * @return {?}
     */
    JumpScopePipe.prototype.transform = /**
     * @param {?} value
     * @param {?} nodeId
     * @return {?}
     */
    function (value, nodeId) {
        return value.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.Id !== nodeId; }));
    };
    JumpScopePipe.decorators = [
        { type: Pipe, args: [{ name: 'jumpScopePipe' },] }
    ];
    return JumpScopePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UsersNamePipe = /** @class */ (function () {
    function UsersNamePipe() {
    }
    /**
     * @param {?} users
     * @param {?=} defaultVal
     * @return {?}
     */
    UsersNamePipe.prototype.transform = /**
     * @param {?} users
     * @param {?=} defaultVal
     * @return {?}
     */
    function (users, defaultVal) {
        if (defaultVal === void 0) { defaultVal = ''; }
        /** @type {?} */
        var r = '';
        users.forEach((/**
         * @param {?} u
         * @return {?}
         */
        function (u) {
            r += u.performerName + '，';
        }));
        if (r) {
            r = r.substring(0, r.length - 1);
        }
        return r ? r : defaultVal;
    };
    UsersNamePipe.decorators = [
        { type: Pipe, args: [{ name: 'usersName' },] }
    ];
    /** @nocollapse */
    UsersNamePipe.ctorParameters = function () { return []; };
    return UsersNamePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PROCESS_DESIGNER_APP_PROVIDERS = [
    ProcessDesignerUIState,
    ProcessDesignerViewModel,
    BpmnProcessViewModel,
    WFFlowElementsViewModel,
    SubProcessViewModel,
    AutoActivityAdapter,
    CatchEventAdapter,
    MessageActivityAdapter,
    NotifyActivityAdapter,
    AifCreationBillActivityAdapter,
];
/** @type {?} */
var PROCESS_DESIGNER_DOMAIN_PROVIDERS = [
    ProcessDesignerDataService
];
/** @type {?} */
var PROCESS_DESIGNER_PART_PROVIDERS = [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CallActivitySubProcessComponent = /** @class */ (function () {
    function CallActivitySubProcessComponent(message, util, http, designerState, expr) {
        this.message = message;
        this.util = util;
        this.http = http;
        this.designerState = designerState;
        this.expr = expr;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.modalConfig = {
            title: '子流程选项',
            width: 480,
            height: 360,
            showButtons: true
        };
        this.callActivitySubProcess = new CallActivitySubProcess();
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
    }
    Object.defineProperty(CallActivitySubProcessComponent.prototype, "value", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v) {
                this.callActivitySubProcess = v;
                this.getProcessDefKey(this.callActivitySubProcess.calledElement);
                this.getFlowForm(this.callActivitySubProcess.calledBizDefKey);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CallActivitySubProcessComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    CallActivitySubProcessComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        if (this.validator()) {
            /** @type {?} */
            var object = { value: this.callActivitySubProcess, parameters: null };
            this.submitModal.emit(object);
        }
    };
    /**
     * @return {?}
     */
    CallActivitySubProcessComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CallActivitySubProcessComponent.prototype.processConfirm = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        if (args) {
            this.callActivitySubProcess.calledElement = args.id;
            this.callActivitySubProcess.calledElementName = args.name;
        }
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CallActivitySubProcessComponent.prototype.clearProcessDef = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        this.callActivitySubProcess.calledElement = '';
        this.callActivitySubProcess.calledElementName = '';
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CallActivitySubProcessComponent.prototype.flowFormConfirm = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        if (args) {
            this.callActivitySubProcess.calledBizDefKey = args.id;
            this.callActivitySubProcess.calledBizDefName = args.name;
        }
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CallActivitySubProcessComponent.prototype.clearFlowForm = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        this.callActivitySubProcess.calledBizDefKey = '';
        this.callActivitySubProcess.calledBizDefName = '';
    };
    /**
     * @return {?}
     */
    CallActivitySubProcessComponent.prototype.setBizDataId = /**
     * @return {?}
     */
    function () {
        this.showExprHelp();
    };
    /**
     * @private
     * @return {?}
     */
    CallActivitySubProcessComponent.prototype.showExprHelp = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f;
        if (this.designerState.schemas.length > 0) {
            try {
                for (var _g = __values(this.designerState.schemas), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var schema = _h.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_a = _g.return)) _a.call(_g);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.designerState.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.designerState.procInstContext.length > 0) {
            try {
                for (var _j = __values(this.designerState.procInstContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    context.push(variable);
                    // this.expr.addContext(variable);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _l = __values(this.designerState.formalParameterContext), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var variable = _m.value;
                    _loop_1(variable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _o = __values(this.designerState.participantContext), _p = _o.next(); !_p.done; _p = _o.next()) {
                    var variable = _p.value;
                    _loop_2(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _q = __values(this.designerState.processVariableContext), _r = _q.next(); !_r.done; _r = _q.next()) {
                    var variable = _r.value;
                    _loop_3(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_r && !_r.done && (_e = _q.return)) _e.call(_q);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = __values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_f = context_1.return)) _f.call(context_1);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        this.expr.addExpressionText(this.callActivitySubProcess.bizDataId);
        this.expr.buildExpression().then((/**
         * @param {?} expressioninfo
         * @return {?}
         */
        function (expressioninfo) {
            _this.callActivitySubProcess.bizDataId = expressioninfo;
        }));
    };
    /**
     * @param {?} bool
     * @return {?}
     */
    CallActivitySubProcessComponent.prototype.valueChange = /**
     * @param {?} bool
     * @return {?}
     */
    function (bool) {
        if (bool) {
            this.callActivitySubProcess.bizDataId = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    CallActivitySubProcessComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.callActivitySubProcess.inheritBizDataId && !this.callActivitySubProcess.bizDataId) {
            this.message.warning('当子流程与父流程单据不一致时，请设置子流程单据内码！');
            return false;
        }
        return true;
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    CallActivitySubProcessComponent.prototype.getProcessDefKey = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        /** @type {?} */
        var url = this.util.getProcDefKeyWebApi();
        if (key) {
            url += "/" + key;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                _this.callActivitySubProcess.calledElementName = re.name;
            }));
        }
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    CallActivitySubProcessComponent.prototype.getFlowForm = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var url = this.util.getFlowFormWebApi();
        if (id) {
            url += "/" + id;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                _this.callActivitySubProcess.calledBizDefName = re.name;
            }));
        }
    };
    CallActivitySubProcessComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-call-activity-sub-process',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">\u8BBE\u7F6E\u9009\u9879</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <form class=\"h-100\">\r\n          <div class=\"farris-form form-inline farris-form-inline\">\r\n            <div class=\"farris-group-wrap mt-1\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u6D41\u7A0B\u5206\u7C7B</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <wf-bizprocess-lookup [title]=\"'\u6D41\u7A0B\u5206\u7C7B'\" [sourceType]=\"'flowform'\" [displayTxt]=\"callActivitySubProcess.calledBizDefName\"\r\n                    (afterConfirm)=\"flowFormConfirm($event)\" (clear)=\"clearFlowForm($event)\">\r\n                  </wf-bizprocess-lookup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"farris-group-wrap my-4\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-text\">\u6D41\u7A0B\u5B9A\u4E49</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <wf-bizprocess-lookup [title]=\"'\u6D41\u7A0B\u5B9A\u4E49'\"  [displayTxt]=\"callActivitySubProcess.calledElementName\"\r\n                    (afterConfirm)=\"processConfirm($event)\" (clear)=\"clearProcessDef($event)\">\r\n                  </wf-bizprocess-lookup>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <!-- <div class=\"farris-group-wrap my-4\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"col-form-label\">\r\n                  <span class=\"farris-label-info text-danger\">*</span>\r\n                  <span class=\"farris-label-text\">\u7EE7\u627F\u53D8\u91CF</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-1\">\r\n                  <farris-switch [(ngModel)]=\"callActivitySubProcess.inheritVariables\" name=\"inheritVariables\">\r\n                  </farris-switch>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div> -->\r\n            <div class=\"farris-group-wrap my-4\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"ml-4 pl-3\">\r\n                  <span class=\"farris-label-text\">\u4E0E\u7236\u6D41\u7A0B\u540C\u4E00\u5F20\u4E1A\u52A1\u5355\u636E</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-3\">\r\n                  <farris-switch  [(ngModel)]=\"callActivitySubProcess.inheritBizDataId\" name=\"inheritBizDataId\"\r\n                    (valueChange)=\"valueChange($event)\">\r\n                  </farris-switch>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div *ngIf=\"!callActivitySubProcess.inheritBizDataId\" class=\"farris-group-wrap\">\r\n              <div class=\"form-group farris-form-group\">\r\n                <label class=\"ml-4 pl-3\">\r\n                  <span class=\"farris-label-text\">\u8BBE\u7F6E\u5355\u636E\u5185\u7801</span>\r\n                </label>\r\n                <div class=\"farris-input-wrap ml-3\">\r\n                  <input-group class=\"form-control\" style=\"width: 100%;padding:0;border:0;\" [enableClear]=\"false\"\r\n                    [ngModel]=\"callActivitySubProcess.bizDataId\" name=\"bizDataId\"\r\n                    [editable]=\"false\" (clickHandle)=\"setBizDataId()\" [groupText]=\"groupIcon\"></input-group>\r\n                  <div class=\"farris-feedback valid-feedback\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CallActivitySubProcessComponent.ctorParameters = function () { return [
        { type: MessagerService },
        { type: ProcessDeUtil },
        { type: HttpService },
        { type: ProcessDesignerUIState },
        { type: ExpressionService }
    ]; };
    CallActivitySubProcessComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        value: [{ type: Input }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
    };
    return CallActivitySubProcessComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var VOTemplateType = {
    /**来自于BE的VO */
    FromBE: 0,
    /**来自于VO的VO，即VO代理 */
    FromVO: 1,
    /**没有来源的VO，即虚拟VO */
    FromNone: 2,
};
VOTemplateType[VOTemplateType.FromBE] = 'FromBE';
VOTemplateType[VOTemplateType.FromVO] = 'FromVO';
VOTemplateType[VOTemplateType.FromNone] = 'FromNone';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CommonModelTypeHelper = /** @class */ (function () {
    function CommonModelTypeHelper() {
    }
    /**
     * @param {?} cm
     * @return {?}
     */
    CommonModelTypeHelper.getCommonModelType = /**
     * @param {?} cm
     * @return {?}
     */
    function (cm) {
        /** @type {?} */
        var type = CommonModelUtil.GetGeneratedConfigID((/** @type {?} */ (cm)));
        type = "com." + type;
        return type;
    };
    /**
     * 判断VO来源于BE还是VO或者完全虚拟
     * @param gspViewModel
     */
    /**
     * 判断VO来源于BE还是VO或者完全虚拟
     * @param {?} gspViewModel
     * @return {?}
     */
    CommonModelTypeHelper.judgeVoTemplateType = /**
     * 判断VO来源于BE还是VO或者完全虚拟
     * @param {?} gspViewModel
     * @return {?}
     */
    function (gspViewModel) {
        if (gspViewModel.IsVirtual === true) {
            if (gspViewModel.TemplateVoInfo && gspViewModel.TemplateVoInfo.TemplateVoId != null) {
                return VOTemplateType.FromVO;
            }
            else {
                return VOTemplateType.FromNone;
            }
        }
        else {
            return VOTemplateType.FromBE;
        }
    };
    return CommonModelTypeHelper;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ProcHelpQuerySolutionComponent = /** @class */ (function () {
    function ProcHelpQuerySolutionComponent(procHelpService, messager, notify, metadataService, modalService, injector, resolver, localePipe) {
        this.procHelpService = procHelpService;
        this.messager = messager;
        this.notify = notify;
        this.metadataService = metadataService;
        this.modalService = modalService;
        this.injector = injector;
        this.resolver = resolver;
        this.localePipe = localePipe;
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.queryParamChange = new EventEmitter();
        this.onSearchEmitter = new EventEmitter();
        this.comboProcessTypeIdField = "value";
        this.comboProcessTypeValueField = "value";
        this.comboProcessTypeTextField = "text";
        this.comboProcessTypeData = [
            { value: "", text: this.localePipe.transform("all") },
            { value: BifMetadataType.BifCreationProcess, text: this.localePipe.transform("creation") },
            { value: BifMetadataType.BifWritebackProcess, text: this.localePipe.transform("writeback") },
        ];
        this.comboEnabledStateIdField = "value";
        this.comboEnabledStateValueField = "value";
        this.comboEnabledStateTextField = "text";
        this.comboEnabledStateData = [
            { value: "", text: this.localePipe.transform("all") },
            { value: "true", text: this.localePipe.transform("enabled") },
            { value: "false", text: this.localePipe.transform("disabled") },
        ];
        this.comboSysInitIdField = "value";
        this.comboSysInitValueField = "value";
        this.comboSysInitTextField = "text";
        this.comboSysInitData = [
            { value: "", text: this.localePipe.transform("all") },
            { value: "true", text: this.localePipe.transform("yes") },
            { value: "false", text: this.localePipe.transform("no") },
        ];
    }
    /**
     * @return {?}
     */
    ProcHelpQuerySolutionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} name
     * @return {?}
     */
    ProcHelpQuerySolutionComponent.prototype.processNameChange = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.queryParam.filterArgs.name = new TextValue();
        this.queryParam.filterArgs.name.hasValue = true;
        this.queryParam.filterArgs.name.value = name;
        this.queryParam.filterArgsExt.name = name;
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    ProcHelpQuerySolutionComponent.prototype.processTypeChange = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var selections = _a.selections;
        /** @type {?} */
        var item = selections[0];
        this.queryParam.filterArgs.billProcessType = new TextValue();
        if (item != null) {
            if (item.value != "") {
                this.queryParam.filterArgs.billProcessType.hasValue = true;
            }
            this.queryParam.filterArgs.billProcessType.value = item.value;
        }
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    ProcHelpQuerySolutionComponent.prototype.enabledStateChange = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var selections = _a.selections;
        /** @type {?} */
        var item = selections[0];
        this.queryParam.filterArgs.isEnabled = new TextValue();
        if (item != null) {
            if (item.value != "") {
                this.queryParam.filterArgs.isEnabled.hasValue = true;
            }
            this.queryParam.filterArgs.isEnabled.value = String(item.value);
        }
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    ProcHelpQuerySolutionComponent.prototype.sysInitChange = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var selections = _a.selections;
        /** @type {?} */
        var item = selections[0];
        this.queryParam.filterArgs.sysInit = new TextValue();
        if (item != null) {
            if (item.value != "") {
                this.queryParam.filterArgs.sysInit.hasValue = true;
            }
            this.queryParam.filterArgs.sysInit.value = String(item.value);
        }
    };
    /**
     * 打开上游单据VO选择器
     */
    /**
     * 打开上游单据VO选择器
     * @return {?}
     */
    ProcHelpQuerySolutionComponent.prototype.selectUpBill = /**
     * 打开上游单据VO选择器
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.typeList = "GSPViewModel";
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} metadata4RefDto
         * @return {?}
         */
        function (metadata4RefDto) {
            _this.clearUpBill();
            /** @type {?} */
            var upVODto = metadata4RefDto.metadata;
            /** @type {?} */
            var upVO = JSON.parse(upVODto.content);
            switch (CommonModelTypeHelper.judgeVoTemplateType(upVO)) {
                //非代理VO
                case VOTemplateType.FromBE:
                    {
                        _this.queryParam.filterArgs.upBillVoId = new TextValue();
                        _this.queryParam.filterArgs.upBillVoId.hasValue = true;
                        _this.queryParam.filterArgs.upBillVoId.value = upVO.ID;
                        _this.queryParam.filterArgsExt.upBillVoName = upVO.MainObject.Name;
                    }
                    break;
                default:
                    _this.notify.error(_this.localePipe.transform("pleaseSelectNonVirtualVO"));
                    break;
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.error(err);
            //todo 确定异常结构, 目前采用兼容取值方式
            _this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            _this.clearUpBill();
        }));
        /** @type {?} */
        var modalConfig = {
            title: this.localePipe.transform("billSelector"),
            width: 930,
            height: 573,
            showButtons: false
        };
        /** @type {?} */
        var dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) { return dialog.close(); }));
    };
    /**
     * 打开下游单据VO选择器
     */
    /**
     * 打开下游单据VO选择器
     * @return {?}
     */
    ProcHelpQuerySolutionComponent.prototype.selectDownBill = /**
     * 打开下游单据VO选择器
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(SelectMetadataRTComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.typeList = "GSPViewModel";
        compRef.instance.selectedMetadata.subscribe((/**
         * @param {?} metadata4RefDto
         * @return {?}
         */
        function (metadata4RefDto) {
            _this.clearDownBill();
            /** @type {?} */
            var downVODto = metadata4RefDto.metadata;
            /** @type {?} */
            var downVO = JSON.parse(downVODto.content);
            switch (CommonModelTypeHelper.judgeVoTemplateType(downVO)) {
                //非代理VO
                case VOTemplateType.FromBE:
                    {
                        _this.queryParam.filterArgs.downBillVoId = new TextValue();
                        _this.queryParam.filterArgs.downBillVoId.hasValue = true;
                        _this.queryParam.filterArgs.downBillVoId.value = downVO.ID;
                        _this.queryParam.filterArgsExt.downBillVoName = downVO.MainObject.Name;
                    }
                    break;
                default:
                    _this.notify.error(_this.localePipe.transform("pleaseSelectNonVirtualVO"));
                    break;
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.error(err);
            //todo 确定异常结构, 目前采用兼容取值方式
            _this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            _this.clearUpBill();
        }));
        /** @type {?} */
        var modalConfig = {
            title: this.localePipe.transform("billSelector"),
            width: 930,
            height: 573,
            showButtons: false
        };
        /** @type {?} */
        var dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.closeModalEmitter.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) { return dialog.close(); }));
    };
    /**
     * 清除流程名称
     */
    /**
     * 清除流程名称
     * @return {?}
     */
    ProcHelpQuerySolutionComponent.prototype.clearProcessName = /**
     * 清除流程名称
     * @return {?}
     */
    function () {
        delete this.queryParam.filterArgs.name;
        this.queryParam.filterArgsExt.name = null;
    };
    /**
     * 清除选中的流程类型
     */
    /**
     * 清除选中的流程类型
     * @return {?}
     */
    ProcHelpQuerySolutionComponent.prototype.clearProcessType = /**
     * 清除选中的流程类型
     * @return {?}
     */
    function () {
        delete this.queryParam.filterArgs.billProcessType;
    };
    /**
     * 清除选中的上游单据信息
     */
    /**
     * 清除选中的上游单据信息
     * @return {?}
     */
    ProcHelpQuerySolutionComponent.prototype.clearUpBill = /**
     * 清除选中的上游单据信息
     * @return {?}
     */
    function () {
        delete this.queryParam.filterArgs.upBillVoId;
        this.queryParam.filterArgsExt.upBillVoName = null;
    };
    /**
     * 清除选中的下游单据信息
     */
    /**
     * 清除选中的下游单据信息
     * @return {?}
     */
    ProcHelpQuerySolutionComponent.prototype.clearDownBill = /**
     * 清除选中的下游单据信息
     * @return {?}
     */
    function () {
        delete this.queryParam.filterArgs.downBillVoId;
        this.queryParam.filterArgsExt.downBillVoName = null;
    };
    /**
     * 清除选中的启用状态
     */
    /**
     * 清除选中的启用状态
     * @return {?}
     */
    ProcHelpQuerySolutionComponent.prototype.clearIsEnabled = /**
     * 清除选中的启用状态
     * @return {?}
     */
    function () {
        delete this.queryParam.filterArgs.isEnabled;
    };
    /**
     * 清除选中的发布状态
     */
    /**
     * 清除选中的发布状态
     * @return {?}
     */
    ProcHelpQuerySolutionComponent.prototype.clearIsPublished = /**
     * 清除选中的发布状态
     * @return {?}
     */
    function () {
        // delete this.queryParam.filterArgs.isPublished;
    };
    /**
     * 清除选中的发布状态
     */
    /**
     * 清除选中的发布状态
     * @return {?}
     */
    ProcHelpQuerySolutionComponent.prototype.clearSysInit = /**
     * 清除选中的发布状态
     * @return {?}
     */
    function () {
        delete this.queryParam.filterArgs.sysInit;
    };
    /**
     * 点击筛选按钮
     */
    /**
     * 点击筛选按钮
     * @return {?}
     */
    ProcHelpQuerySolutionComponent.prototype.clickBtnFilter = /**
     * 点击筛选按钮
     * @return {?}
     */
    function () {
        this.queryParam.filterArgs.pageIndex = 0;
        this.onSearchEmitter.emit(this.queryParam);
    };
    /**
     * 点击清空按钮
     */
    /**
     * 点击清空按钮
     * @return {?}
     */
    ProcHelpQuerySolutionComponent.prototype.clickBtnClear = /**
     * 点击清空按钮
     * @return {?}
     */
    function () {
        //重置下拉框
        this.comboProcessType.onClear();
        this.comboProcessTypeData = this.comboProcessTypeData.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return (__assign({}, item)); }));
        this.comboEnabledState.onClear();
        this.comboEnabledStateData = this.comboEnabledStateData.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return (__assign({}, item)); }));
        this.comboSysInit.onClear();
        this.comboSysInitData = this.comboSysInitData.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return (__assign({}, item)); }));
        // this.comboPublishedState.onClear();
        // this.comboPublishedStateData = this.comboPublishedStateData.map(item => ({ ...item }));
        //重置查询参数
        // const queryParam = {
        //   filterArgs: new ProcessFilterConditionArgs(),
        //   filterArgsExt: {}
        // };
        // queryParam.filterArgs.LoadFromJsonObject(this.queryParam.filterArgs.ConvertToJsonObject());
        /** @type {?} */
        var queryParam = this.queryParam;
        queryParam.filterArgsExt = {};
        queryParam.filterArgs.isEnabled = null;
        queryParam.filterArgs.billProcessType = null;
        queryParam.filterArgs.upBillVoId = null;
        queryParam.filterArgs.downBillVoId = null;
        queryParam.filterArgs.sysInit = null;
        // queryParam.filterArgs.pageSize = this.queryParam.filterArgs.pageSize;
        // queryParam.filterArgs.pageIndex = this.queryParam.filterArgs.pageIndex;
        // queryParam.filterArgs.orderByCode = this.queryParam.filterArgs.orderByCode;
        // queryParam.filterArgs.orderByName = this.queryParam.filterArgs.orderByName;
        // queryParam.filterArgs.OrderByLastModifiedTime = this.queryParam.filterArgs.OrderByLastModifiedTime;
        this.queryParam = queryParam;
    };
    ProcHelpQuerySolutionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-proc-help-query-solution',
                    template: "<farris-section #sectionQuerySolution class=\"f-section-scheme f-section-in-managelist\" [expandStatus]=\"true\"\r\n  [enableMaximize]=\"false\" [enableAccordion]=\"''\" mainTitle=\"{{ 'querySolution' | aifLocale }}\" [fill]=\"false\"\r\n  [showHeader]=\"true\">\r\n  <ng-template farrisSectionTitle>\r\n    <div\r\n      style=\"border-radius: 6px; padding: 5px 12px; background: linear-gradient(-51deg, rgb(42, 135, 255, 0.2) 0%, rgb(50, 139, 255, 0.2) 100%);\">\r\n      <span style=\"font-size: 13px;color: #2A87FF;line-height: 16px;\">{{ 'querySolution' | aifLocale }}</span>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <ng-template farrisSectionToolbar>\r\n    <div class=\"query-solution\">\r\n      <div class=\"solution-action\">\r\n        <ng-container *ngIf=\"sectionQuerySolution.expandStatus == true\">\r\n          <div class=\"btn-group\">\r\n            <button class=\"btn btn-primary\" (click)=\"clickBtnFilter()\">{{ 'filter' | aifLocale }}</button>\r\n          </div>\r\n          <div class=\"icon-group\">\r\n            <span class=\"icon-group-remove\" title=\"{{'clear' | aifLocale}}\" (click)=\"clickBtnClear()\">\r\n              <span class=\"f-icon f-icon-remove\"></span>\r\n            </span>\r\n            <span class=\"divide\"></span>\r\n            <span class=\"icon-group-setup\" *ngIf=\"false\">\r\n              <span class=\"f-icon f-icon-home-setup\"></span>\r\n            </span>\r\n            <span class=\"icon-group-packup\" title=\"{{ 'collapse' | aifLocale }}\"\r\n              (click)=\"sectionQuerySolution.expandStatus = false\">\r\n              <span class=\"f-icon f-icon-packup\"></span>\r\n            </span>\r\n          </div>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"sectionQuerySolution.expandStatus == false\">\r\n          <div class=\"icon-group\">\r\n            <span class=\"icon-group-packup\" title=\"{{ 'expand' | aifLocale }}\"\r\n              (click)=\"sectionQuerySolution.expandStatus = true\">\r\n              <span class=\"f-icon f-icon-packup\" style=\"transform: rotate(180deg);\"></span>\r\n            </span>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <div class=\"form f-form-layout farris-form farris-form-controls-inline\"\r\n    *ngIf=\"sectionQuerySolution.expandStatus == true\">\r\n    <!-- \u6D41\u7A0B\u540D\u79F0 -->\r\n    <div class=\"col-12 col-md-6 col-xl-3\">\r\n      <div class=\"farris-group-wrap\">\r\n        <div class=\"form-group farris-form-group\">\r\n          <label for=\"\" class=\"col-form-label\" title=\"{{'processName' | aifLocale}}\">\r\n            <span class=\"farris-label-text\">{{\"processName\" | aifLocale}}</span>\r\n          </label>\r\n          <div class=\"farris-input-wrap\">\r\n            <input-group [ngModel]=\"queryParam.filterArgsExt.name\" (valueChange)=\"processNameChange($event)\"\r\n              (clear)=\"clearProcessName()\">\r\n            </input-group>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- \u6D41\u7A0B\u7C7B\u578B -->\r\n    <div class=\"col-12 col-md-6 col-xl-3\" *ngIf=\"true\">\r\n      <div class=\"farris-group-wrap\">\r\n        <div class=\"form-group farris-form-group\">\r\n          <label for=\"\" class=\"col-form-label\" title=\"{{'processType' | aifLocale}}\">\r\n            <span class=\"farris-label-text\">{{\"processType\" | aifLocale}}</span>\r\n          </label>\r\n          <div class=\"farris-input-wrap\">\r\n            <farris-combo-list #comboProcessType [ngModel]=\"queryParam.filterArgs.billProcessType?.value\"\r\n              [idField]=\"comboProcessTypeIdField\" [valueField]=\"comboProcessTypeValueField\"\r\n              [textField]=\"comboProcessTypeTextField\" [data]=\"comboProcessTypeData\" (clear)=\"clearProcessType()\"\r\n              (valueChange)=\"processTypeChange($event)\" [editable]=\"false\"></farris-combo-list>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- \u4E0A\u6E38\u5355\u636E -->\r\n    <div class=\"col-12 col-md-6 col-xl-3\">\r\n      <div class=\"farris-group-wrap\">\r\n        <div class=\"form-group farris-form-group\">\r\n          <label for=\"\" class=\"col-form-label\" title=\"{{'upBill' | aifLocale}}\">\r\n            <span class=\"farris-label-text\">{{\"upBill\" | aifLocale}}</span>\r\n          </label>\r\n          <div class=\"farris-input-wrap\">\r\n            <input-group [editable]=\"false\" [ngModel]=\"queryParam.filterArgsExt.upBillVoName\"\r\n              (clickHandle)=\"selectUpBill()\" [groupText]=\"groupIcon\" (clear)=\"clearUpBill()\"></input-group>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- \u4E0B\u6E38\u5355\u636E -->\r\n    <div class=\"col-12 col-md-6 col-xl-3\">\r\n      <div class=\"farris-group-wrap\">\r\n        <div class=\"form-group farris-form-group\">\r\n          <label for=\"\" class=\"col-form-label\" title=\"{{'downBill' | aifLocale}}\">\r\n            <span class=\"farris-label-text\">{{\"downBill\" | aifLocale}}</span>\r\n          </label>\r\n          <div class=\"farris-input-wrap\">\r\n            <input-group [editable]=\"false\" [ngModel]=\"queryParam.filterArgsExt.downBillVoName\"\r\n              (clickHandle)=\"selectDownBill()\" [groupText]=\"groupIcon\" (clear)=\"clearDownBill()\">\r\n            </input-group>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- \u542F\u7528\u72B6\u6001 -->\r\n    <div class=\"col-12 col-md-6 col-xl-3\">\r\n      <div class=\"farris-group-wrap\">\r\n        <div class=\"form-group farris-form-group\">\r\n          <label for=\"enabledState\" class=\"col-form-label\" title=\"{{'enabledState' | aifLocale}}\">\r\n            <span class=\"farris-label-text\">{{\"enabledState\" | aifLocale}}</span>\r\n          </label>\r\n          <div class=\"farris-input-wrap\">\r\n            <farris-combo-list #comboEnabledState [ngModel]=\"queryParam.filterArgs.isEnabled?.value\"\r\n              [idField]=\"comboEnabledStateIdField\" [valueField]=\"comboEnabledStateValueField\"\r\n              [textField]=\"comboEnabledStateTextField\" [data]=\"comboEnabledStateData\" (clear)=\"clearIsEnabled()\"\r\n              (valueChange)=\"enabledStateChange($event)\" [editable]=\"false\"></farris-combo-list>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- \u7CFB\u7EDF\u9884\u7F6E -->\r\n    <div class=\"col-12 col-md-6 col-xl-3\" *ngIf=\"true\">\r\n      <div class=\"farris-group-wrap\">\r\n        <div class=\"form-group farris-form-group\">\r\n          <label for=\"\" class=\"col-form-label\" title=\"{{'sysInit' | aifLocale}}\">\r\n            <span class=\"farris-label-text\">{{\"sysInit\" | aifLocale}}</span>\r\n          </label>\r\n          <div class=\"farris-input-wrap\">\r\n            <farris-combo-list #comboSysInit [ngModel]=\"queryParam.filterArgs.sysInit?.value\"\r\n              [idField]=\"comboSysInitIdField\" [valueField]=\"comboSysInitValueField\" [textField]=\"comboSysInitTextField\"\r\n              [data]=\"comboSysInitData\" (clear)=\"clearSysInit()\" (valueChange)=\"sysInitChange($event)\"\r\n              [editable]=\"false\">\r\n            </farris-combo-list>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-section>",
                    styles: [".query-solution span{vertical-align:middle;margin:0 3px;cursor:pointer}"]
                }] }
    ];
    /** @nocollapse */
    ProcHelpQuerySolutionComponent.ctorParameters = function () { return [
        { type: ProcessListHelpService },
        { type: MessagerService },
        { type: NotifyService },
        { type: GSPMetadataRTService },
        { type: BsModalService },
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: AifLocalePipe }
    ]; };
    ProcHelpQuerySolutionComponent.propDecorators = {
        queryParam: [{ type: Input, args: ["queryParam",] }],
        queryParamChange: [{ type: Output, args: ["queryParamChange",] }],
        onSearchEmitter: [{ type: Output, args: ["onSearch",] }],
        comboProcessType: [{ type: ViewChild, args: ["comboProcessType",] }],
        comboEnabledState: [{ type: ViewChild, args: ["comboEnabledState",] }],
        comboSysInit: [{ type: ViewChild, args: ["comboSysInit",] }]
    };
    return ProcHelpQuerySolutionComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AifUiCommonModule = /** @class */ (function () {
    function AifUiCommonModule() {
    }
    AifUiCommonModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        AifLocalePipe
                    ],
                    exports: [
                        AifLocalePipe
                    ]
                },] }
    ];
    return AifUiCommonModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var BILL_TRACKER_LANG_RESOURCES = {
    "zh-CHS": {
        "code": "编号",
        "name": "名称",
        "lastModifiedTime": "最后修改时间",
        "upBill": "上游单据",
        "downBill": "下游单据",
        "processName": "流程名称",
        "processType": "流程类型",
        "creation": "生单",
        "writeback": "回写",
        "enabledState": "启用状态",
        "sysInit": "系统预置",
        "filter": "筛选",
        "all": "全部",
        "enabled": "已启用",
        "disabled": "已禁用",
        "yes": "是",
        "no": "否",
        "billSelector": "单据选择",
        "querySolution": "筛选方案",
        "collapse": "收起",
        "expand": "展开",
        "loading": "加载中",
        "pleaseSelectNonVirtualVO": "请选择非虚拟VO",
        "pleaseSelectOneItemOnly": "请选中一条数据",
        "isExtendProcess": "扩展流程",
    },
    "en": {
        "code": "Code",
        "name": "Name",
        "lastModifiedTime": "Last Modified Time",
        "upBill": "Upstream Bill",
        "downBill": "Downstream Bill",
        "processName": "Process Name",
        "processType": "Process Type",
        "creation": "Creation",
        "writeback": "Writeback",
        "enabledState": "Enabled State",
        "sysInit": "System Init",
        "filter": "Filter",
        "all": "All",
        "enabled": "Enabled",
        "disabled": "Disabled",
        "yes": "Yes",
        "no": "No",
        "billSelector": "Bill Selector",
        "querySolution": "Query Solution",
        "collapse": "Collapse",
        "expand": "Expand",
        "loading": "Loading...",
        "pleaseSelectNonVirtualVO": "Please select non-virtual VO",
        "pleaseSelectOneItemOnly": "Please select only one item",
        "isExtendProcess": "Extend Process",
    },
    "zh-CHT": {
        "code": "編號",
        "name": "名稱",
        "lastModifiedTime": "最後修改時間",
        "upBill": "上遊單據",
        "downBill": "下遊單據",
        "processName": "流程名稱",
        "processType": "流程類型",
        "creation": "生單",
        "writeback": "回寫",
        "enabledState": "啟用狀態",
        "sysInit": "系統預置",
        "filter": "篩選",
        "all": "全部",
        "enabled": "已啟用",
        "disabled": "已禁用",
        "yes": "是",
        "no": "否",
        "billSelector": "單據選擇",
        "querySolution": "篩選方案",
        "collapse": "收起",
        "expand": "展開",
        "loading": "加載中",
        "pleaseSelectNonVirtualVO": "請選擇非虛擬VO",
        "pleaseSelectOneItemOnly": "請選中壹條數據",
        "isExtendProcess": "擴展流程",
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ɵ0 = localStorage.getItem('languageCode') || 'zh-CHS', ɵ1 = BILL_TRACKER_LANG_RESOURCES;
var ProcessListHelpModule = /** @class */ (function () {
    function ProcessListHelpModule() {
    }
    ProcessListHelpModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        HttpClientModule,
                        MetadataRTSelectModule,
                        GSPMetadataRTServiceModule.forRoot(""),
                        FResponseToolbarModule,
                        ListFilterModule,
                        AngularDraggableModule,
                        FarrisCommonModule.forRoot(),
                        FarrisFormsModule,
                        FarrisSectionModule,
                        DatagridEditorsModule,
                        DatagridModule.forRoot(__spread(EditorProviders)),
                        ComboListModule,
                        InputGroupModule,
                        FarrisDialogModule,
                        SwitchModule,
                        FarrisTabsModule,
                        LookupModule,
                        LoadingModule.forRoot({
                            message: 'Loading...'
                        }),
                        NotifyModule.forRoot(),
                        MessagerModule.forRoot({
                            width: 550,
                            height: 450
                        }),
                        ModalModule.forRoot(),
                        AifUiCommonModule,
                    ],
                    providers: [
                        CacheService,
                        SessionService,
                        HttpService,
                        FrmEventBus,
                        FuncsService,
                        LoadingService,
                        AppService,
                        FrameworkService,
                        { provide: LOCALE_ID, useValue: ɵ0 },
                        GSPMetadataRTService,
                        BusinessObjectRtService,
                        ProcessListHelpService,
                        { provide: BIF_LANG_RESOURCES, useValue: ɵ1 },
                        AifLocalePipe,
                    ],
                    declarations: [
                        ProcessListHelpComponent,
                        ProcHelpQuerySolutionComponent,
                    ],
                    entryComponents: [
                        ProcessListHelpComponent,
                        ProcHelpQuerySolutionComponent,
                    ]
                },] }
    ];
    return ProcessListHelpModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WfProcessEditorModule = /** @class */ (function () {
    function WfProcessEditorModule() {
    }
    WfProcessEditorModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        WfProcessEditorComponent,
                        EntryFormEditorComponent,
                        ExpressionEditorComponent,
                        AssignPerformerConfigComponent,
                        SignRuleComponent,
                        ApprovelItemsComponent,
                        ExecuteFormsComponent,
                        JumpScopeComponent,
                        BackwardRuleComponent,
                        JumpScopePipe,
                        ActivityComponentComponent,
                        PerformerComponent,
                        PerformerEditComponent,
                        UserPerformerComponent,
                        ComponentPerformerComponent,
                        PositionPerformerComponent,
                        PerformerOptionsComponent,
                        UsersNamePipe,
                        ReportingLineComponent,
                        TitleExpressionComponent,
                        SaveAsEditComponent,
                        OrganizationPotentialOwnerComponent,
                        CustomizeActionComponent,
                        CustomizeActionListComponent,
                        CallActivitySubProcessComponent,
                        TimeLimitControlComponent,
                        SendMessageOperationComponent,
                        EventDefinitionComponent,
                        AnonymousSetComponent,
                        ProcessVariablesComponent,
                        VariableSettingComponent,
                        ConstantEditComponent,
                        ComponentEditComponent,
                        MessageNoticeComponent,
                        MessageNoticeEditComponent,
                        AddExecuteFormComponent,
                        FormFormatConfigComponent,
                        FormConfigContainerComponent,
                        ParameterSettingComponent,
                        FormOperationConfigComponent,
                        NoteComponent,
                        ApprovalPivotComponent,
                        WfReportDefHelpComponent,
                        UrgeHandleRuleComponent,
                        NoteComponent,
                        MatrixPerformerComponent,
                        EnumListComponent,
                        AutoHandleOperationComponent,
                        ExtendPropertyComponent,
                        CallActivitySubProcess2Component,
                    ],
                    imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        FormsModule,
                        HttpClientModule,
                        SysManagerUIModule,
                        RtfAppHelpModule,
                        CommonComponentUiModule,
                        GSPMetadataRTServiceModule.forRoot(''),
                        MetadataRTSelectModule,
                        TreeTableModule,
                        DataTableModule,
                        LayoutModule,
                        NotifyModule,
                        FarrisDialogModule,
                        SplitterModule,
                        InputGroupModule,
                        LookupModule,
                        FlexLayoutModule,
                        FarrisPanelModule,
                        FarrisResponsiveModule,
                        ExpressionModule,
                        PropertyPanelModule,
                        FarrisTabsModule,
                        LoadingModule.forRoot({
                            message: '加载中...'
                        }),
                        MessagerModule.forRoot({
                            width: 500
                        }),
                        ModalModule,
                        PopoverModule,
                        PaginationModule,
                        FarrisDropdownModule,
                        DatagridEditorsModule,
                        DatagridModule.forRoot(__spread(EditorProviders)),
                        ComboListModule,
                        WizardModule,
                        FarrisFormsModule,
                        SwitchModule,
                        WfBizprocessLookupModule,
                        NumberSpinnerModule,
                        PerfectScrollbarModule,
                        FarrisSectionModule,
                        FarrisButtonModule,
                        ProcessListHelpModule,
                    ],
                    providers: [
                        SessionService,
                        HttpService,
                        ExpressionService,
                        CommonComponentUiRTService,
                        PROCESS_DESIGNER_APP_PROVIDERS,
                        PROCESS_DESIGNER_DOMAIN_PROVIDERS,
                        PROCESS_DESIGNER_PART_PROVIDERS,
                        PerformerConfigService,
                        ProcessDeUtil,
                        WfReportDefHelpService
                    ],
                    exports: [WfProcessEditorComponent],
                    entryComponents: [
                        EntryFormEditorComponent,
                        ExpressionEditorComponent,
                        AssignPerformerConfigComponent,
                        SignRuleComponent,
                        ApprovelItemsComponent,
                        ExecuteFormsComponent,
                        JumpScopeComponent,
                        BackwardRuleComponent,
                        ActivityComponentComponent,
                        SelectMetadataRTComponent,
                        PerformerComponent,
                        PerformerEditComponent,
                        UserPerformerComponent,
                        ComponentPerformerComponent,
                        PositionPerformerComponent,
                        PerformerOptionsComponent,
                        ReportingLineComponent,
                        TitleExpressionComponent,
                        SaveAsEditComponent,
                        OrganizationPotentialOwnerComponent,
                        CustomizeActionComponent,
                        CustomizeActionListComponent,
                        CallActivitySubProcessComponent,
                        TimeLimitControlComponent,
                        SendMessageOperationComponent,
                        EventDefinitionComponent,
                        AnonymousSetComponent,
                        ProcessVariablesComponent,
                        VariableSettingComponent,
                        ConstantEditComponent,
                        ComponentEditComponent,
                        MessageNoticeComponent,
                        MessageNoticeEditComponent,
                        AddExecuteFormComponent,
                        FormFormatConfigComponent,
                        FormConfigContainerComponent,
                        ParameterSettingComponent,
                        FormOperationConfigComponent,
                        NoteComponent,
                        ApprovalPivotComponent,
                        UrgeHandleRuleComponent,
                        NoteComponent,
                        MatrixPerformerComponent,
                        EnumListComponent,
                        AutoHandleOperationComponent,
                        ProcessListHelpComponent,
                        ExtendPropertyComponent,
                        CallActivitySubProcess2Component,
                    ],
                },] }
    ];
    return WfProcessEditorModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { WfProcessEditorService, WfProcessEditorComponent, WfProcessEditorModule, ProcessTime, ProcessInfo, ProcessOrganization, RTProcessInfo, ProcHelpQuerySolutionComponent as ɵde, ProcessListHelpComponent as ɵdd, BILL_TRACKER_LANG_RESOURCES as ɵdc, ProcessListHelpModule as ɵcx, ProcessListHelpService as ɵdb, AifUiCommonModule as ɵcy, AifLocalePipe as ɵda, BIF_LANG_RESOURCES as ɵcz, AifCreationBillActivityAdapter as ɵl, AutoActivityAdapter as ɵh, BpmnProcessViewModel as ɵe, CatchEventAdapter as ɵi, MessageActivityAdapter as ɵj, NotifyActivityAdapter as ɵk, ProcessDesignerUIState as ɵa, ProcessDesignerViewModel as ɵb, SubProcessViewModel as ɵg, WFFlowElementsViewModel as ɵf, ProcessDeUtil as ɵd, ProcessDesignerDataService as ɵc, PROCESS_DESIGNER_APP_PROVIDERS as ɵdf, PROCESS_DESIGNER_DOMAIN_PROVIDERS as ɵdg, PROCESS_DESIGNER_PART_PROVIDERS as ɵdh, ActivityComponentComponent as ɵy, ActivityComponentRepository as ɵz, ActivityComponentUIState as ɵba, ActivityComponentViewModel as ɵbb, AnonymousSetComponent as ɵcb, ApprovalPivotComponent as ɵcr, ApprovelItemsComponent as ɵq, AssignPerformerConfigComponent as ɵo, BackwardRuleComponent as ɵw, CallActivitySubProcessComponent as ɵbx, CallActivitySubProcess2Component as ɵcw, CustomizeActionComponent as ɵbv, CustomizeActionListComponent as ɵbw, EntryFormEditorComponent as ɵm, EventDefinitionComponent as ɵca, AddExecuteFormComponent as ɵck, FormFormatService as ɵcl, ExecuteFormsComponent as ɵr, ExecuteFormsRepository as ɵu, ExecuteFormsUIState as ɵs, ExecuteFormsViewModel as ɵt, FormConfigContainerComponent as ɵco, FormFormatConfigComponent as ɵcm, FormOperationConfigComponent as ɵcn, ParameterSettingComponent as ɵcp, ExpressionEditorComponent as ɵn, ExtendPropertyComponent as ɵcv, JumpScopeComponent as ɵv, JumpScopePipe as ɵx, MessageNoticeEditComponent as ɵcj, MessageNoticeComponent as ɵci, NoteComponent as ɵcq, OrganizationPotentialOwnerComponent as ɵbu, PerformerConfigService as ɵbj, PerformerComponent as ɵbc, PerformerRepository as ɵbe, PerformerUIState as ɵbf, PerformerViewModel as ɵbd, ComponentPerformerComponent as ɵbl, ComponentPerformerService as ɵbm, EnumListComponent as ɵct, MatrixPerformerComponent as ɵbq, PerformerEditComponent as ɵbh, PerformerOptionsComponent as ɵbg, PositionPerformerComponent as ɵbk, ReportingLineComponent as ɵbn, WfReportDefHelpComponent as ɵbo, WfReportDefHelpService as ɵbp, UserPerformerComponent as ɵbi, UsersNamePipe as ɵbr, ProcessVariablesComponent as ɵcc, SaveAsEditComponent as ɵbt, SignRuleComponent as ɵp, AutoHandleOperationComponent as ɵcu, SendMessageOperationComponent as ɵbz, TimeLimitControlComponent as ɵby, TitleExpressionComponent as ɵbs, UrgeHandleRuleComponent as ɵcs, VariableSettingComponent as ɵcd, ComponentEditLookUpService as ɵch, ComponentEditComponent as ɵcf, ComponentEditService as ɵcg, ConstantEditComponent as ɵce };

//# sourceMappingURL=gsp-wf-wf-process-editor.js.map