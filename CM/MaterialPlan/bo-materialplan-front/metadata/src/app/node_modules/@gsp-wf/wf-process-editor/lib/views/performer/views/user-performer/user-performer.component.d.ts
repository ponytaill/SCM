import { OnInit, Injector, NgZone, AfterViewInit, ElementRef } from '@angular/core';
import { SysFarrisLookupComponent } from '@gsp-sys/sysmgr-ui';
import { ProcessDesignerUIState } from '../../../../app/process-designer.uistate';
import { ExpressionService } from '@gsp-svc/expression';
import { UserPerformerEntity } from '../../entities/user-performer.entity';
import { PerformerConfigService } from '../../performer-config.service';
import { HttpService } from '@ecp-caf/caf-common';
import { MessagerService } from "@farris/ui-messager";
export declare class UserPerformerComponent implements OnInit, AfterViewInit {
    private designerUIState;
    private expr;
    private injector;
    private lookupConfig;
    private ngZone;
    private http?;
    private message?;
    cls: string;
    userHelp: SysFarrisLookupComponent;
    inputGroup: ElementRef;
    showClearButton: boolean;
    bindingData: {
        id?: any;
        name?: any;
    };
    userTypeCollection: {
        text: string;
        value: string;
    }[];
    userType: string;
    variableOrgTypes: {
        name: string;
        value: string;
    }[];
    curOrgType: string;
    hasAdminOrg: boolean;
    userTypeButtonNeedShow: boolean;
    condition: string;
    users: UserPerformerEntity[];
    constructor(designerUIState: ProcessDesignerUIState, expr: ExpressionService, injector: Injector, lookupConfig: PerformerConfigService, ngZone: NgZone, http?: HttpService, message?: MessagerService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    onMouseEnter(event: any): void;
    onMouseLeave(event: any): void;
    private toggleClearIcon;
    userTypeChange(data: any): void;
    clear(data: any): void;
    selectUsers(data: any): void;
    editConditon(): void;
    usersSelect(data: any[]): void;
    showExprHelp(): void;
    getPerformers(): UserPerformerEntity[];
    private variableParticipantName;
    orgTypeChange(data: any): void;
}
