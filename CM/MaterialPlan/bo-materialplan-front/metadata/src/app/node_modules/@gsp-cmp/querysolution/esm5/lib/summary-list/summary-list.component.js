/**
 * @fileoverview added by tsickle
 * Generated from: lib/summary-list/summary-list.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, NgZone, HostBinding, ChangeDetectorRef } from '@angular/core';
import ResizeObserver from "resize-observer-polyfill";
var SummaryListComponent = /** @class */ (function () {
    function SummaryListComponent(ngZone, cd) {
        this.ngZone = ngZone;
        this.cd = cd;
        this.cls = true;
        this.conditions = new Array();
        this.enableTips = false;
        this.ro = null;
        this.widthFlag = 0;
    }
    /**
     * @return {?}
     */
    SummaryListComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.ro) {
            this.ro.unobserve(this.wrapperEl.nativeElement);
            this.ro = null;
        }
    };
    /**
     * @return {?}
     */
    SummaryListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.observerElement();
    };
    /**
     * @private
     * @return {?}
     */
    SummaryListComponent.prototype.observerElement = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.ro = new ResizeObserver((/**
             * @param {?} entries
             * @param {?} observer
             * @return {?}
             */
            function (entries, observer) {
                /** @type {?} */
                var tempWidth = entries[0].contentRect.width;
                // 宽度变化超过80开始计算
                if (Math.abs(tempWidth - _this.widthFlag) > 15) {
                    _this.widthFlag = tempWidth;
                    _this.changeTipsState();
                }
            }));
            _this.ro.observe(_this.wrapperEl.nativeElement);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    SummaryListComponent.prototype.changeTipsState = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tEnableTips = this.enableTips;
        if (this.wrapperEl.nativeElement.clientWidth + 2 < this.wrapperEl.nativeElement.scrollWidth) {
            tEnableTips = true;
        }
        else {
            tEnableTips = false;
        }
        if (tEnableTips !== this.enableTips) {
            this.enableTips = tEnableTips;
            this.cd.markForCheck();
            this.cd.detectChanges();
        }
    };
    SummaryListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-summary-list',
                    template: "<div class=\"summary-condition-wrapper\" #wrapper [farrisTooltip]=\"enableTips\" [placement]=\"'bottom'\" [content]=\"tpTemplate\" [tipCls]=\"'summary-list--tips'\" [tipWidth]=\"widthFlag+'px'\">\r\n    <ng-container *ngFor=\"let currentItem of conditions;let i = index;let lastIndex=last;\">\r\n        <lib-summary-condition class=\"summary-condition--item\" [condition]=\"currentItem\"></lib-summary-condition>\r\n        <span class=\"summary-condition--spliter\" [ngClass]=\"{'last-spliter':i==lastIndex}\"></span>\r\n    </ng-container>\r\n</div>\r\n<ng-template #tpTemplate>\r\n    <div class=\"summary-condition--tips\" *ngIf=\"enableTips\">\r\n        <ng-container *ngFor=\"let currentItem of conditions;let i = index;let lastIndex=last;\">\r\n            <lib-summary-condition class=\"summary-condition--item\" [condition]=\"currentItem\"></lib-summary-condition>\r\n            <span class=\"summary-condition--gutter\">;</span>\r\n        </ng-container>\r\n    </div>\r\n</ng-template>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SummaryListComponent.ctorParameters = function () { return [
        { type: NgZone },
        { type: ChangeDetectorRef }
    ]; };
    SummaryListComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class.summary-list',] }],
        conditions: [{ type: Input }],
        enableTips: [{ type: Input }],
        wrapperEl: [{ type: ViewChild, args: ['wrapper', { read: ElementRef },] }]
    };
    return SummaryListComponent;
}());
export { SummaryListComponent };
if (false) {
    /** @type {?} */
    SummaryListComponent.prototype.cls;
    /** @type {?} */
    SummaryListComponent.prototype.conditions;
    /** @type {?} */
    SummaryListComponent.prototype.enableTips;
    /** @type {?} */
    SummaryListComponent.prototype.wrapperEl;
    /**
     * @type {?}
     * @private
     */
    SummaryListComponent.prototype.ro;
    /** @type {?} */
    SummaryListComponent.prototype.widthFlag;
    /**
     * @type {?}
     * @private
     */
    SummaryListComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    SummaryListComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VtbWFyeS1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL3F1ZXJ5c29sdXRpb24vIiwic291cmNlcyI6WyJsaWIvc3VtbWFyeS1saXN0L3N1bW1hcnktbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBYSxXQUFXLEVBQWlCLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5KLE9BQU8sY0FBYyxNQUFNLDBCQUEwQixDQUFDO0FBQ3REO0lBYUUsOEJBQW9CLE1BQWEsRUFBUyxFQUFxQjtRQUEzQyxXQUFNLEdBQU4sTUFBTSxDQUFPO1FBQVMsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFONUIsUUFBRyxHQUFDLElBQUksQ0FBQztRQUNuQyxlQUFVLEdBQTBCLElBQUksS0FBSyxFQUFrQixDQUFDO1FBQ2hFLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFFcEIsT0FBRSxHQUEwQixJQUFJLENBQUM7UUFDekMsY0FBUyxHQUFHLENBQUMsQ0FBQztJQUdkLENBQUM7Ozs7SUFDRCwwQ0FBVzs7O0lBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDWCxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ2hELElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQzs7OztJQUVELHVDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7OztJQUVPLDhDQUFlOzs7O0lBQXZCO1FBQUEsaUJBWUM7UUFYQyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQjs7O1FBQUM7WUFDNUIsS0FBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLGNBQWM7Ozs7O1lBQUMsVUFBQyxPQUFPLEVBQUUsUUFBUTs7b0JBQ3ZDLFNBQVMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUs7Z0JBQzlDLGVBQWU7Z0JBQ2YsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxLQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFFO29CQUM3QyxLQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztvQkFDM0IsS0FBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO2lCQUN4QjtZQUNILENBQUMsRUFBQyxDQUFDO1lBQ0gsS0FBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNoRCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBQ08sOENBQWU7Ozs7SUFBdkI7O1lBQ00sV0FBVyxHQUFDLElBQUksQ0FBQyxVQUFVO1FBQy9CLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsV0FBVyxHQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUU7WUFDMUYsV0FBVyxHQUFHLElBQUksQ0FBQztTQUNwQjthQUFNO1lBQ0wsV0FBVyxHQUFHLEtBQUssQ0FBQztTQUNyQjtRQUNELElBQUcsV0FBVyxLQUFHLElBQUksQ0FBQyxVQUFVLEVBQUM7WUFDL0IsSUFBSSxDQUFDLFVBQVUsR0FBQyxXQUFXLENBQUM7WUFDNUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQzs7Z0JBcERGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsa0JBQWtCO29CQUM1QixvL0JBQTRDOztpQkFFN0M7Ozs7Z0JBUDBELE1BQU07Z0JBQXlDLGlCQUFpQjs7O3NCQVV4SCxXQUFXLFNBQUMsb0JBQW9COzZCQUNoQyxLQUFLOzZCQUNMLEtBQUs7NEJBQ0wsU0FBUyxTQUFDLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7O0lBMkM1QywyQkFBQztDQUFBLEFBckRELElBcURDO1NBaERZLG9CQUFvQjs7O0lBRS9CLG1DQUE0Qzs7SUFDNUMsMENBQXlFOztJQUN6RSwwQ0FBNEI7O0lBQzVCLHlDQUFrRTs7Ozs7SUFDbEUsa0NBQXlDOztJQUN6Qyx5Q0FBYzs7Ozs7SUFDRixzQ0FBcUI7Ozs7O0lBQUMsa0NBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCAgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBOZ1pvbmUsIE9uRGVzdHJveSwgSG9zdEJpbmRpbmcsIEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9ufSBmcm9tICdAZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvbic7XHJcbmltcG9ydCBSZXNpemVPYnNlcnZlciBmcm9tIFwicmVzaXplLW9ic2VydmVyLXBvbHlmaWxsXCI7XHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbGliLXN1bW1hcnktbGlzdCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3N1bW1hcnktbGlzdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vc3VtbWFyeS1saXN0LmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgU3VtbWFyeUxpc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcbiAgICBcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnN1bW1hcnktbGlzdCcpIGNscz10cnVlO1xyXG4gIEBJbnB1dCgpIGNvbmRpdGlvbnM6IEFycmF5PFF1ZXJ5Q29uZGl0aW9uPiA9IG5ldyBBcnJheTxRdWVyeUNvbmRpdGlvbj4oKTtcclxuICBASW5wdXQoKSBlbmFibGVUaXBzID0gZmFsc2U7XHJcbiAgQFZpZXdDaGlsZCgnd3JhcHBlcicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSB3cmFwcGVyRWw6IEVsZW1lbnRSZWY7XHJcbiAgcHJpdmF0ZSBybzogUmVzaXplT2JzZXJ2ZXIgfCBudWxsID0gbnVsbDtcclxuICB3aWR0aEZsYWcgPSAwO1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdab25lOk5nWm9uZSxwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge1xyXG5cclxuICB9XHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5ybykge1xyXG4gICAgICB0aGlzLnJvLnVub2JzZXJ2ZSh0aGlzLndyYXBwZXJFbC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgdGhpcy5ybyA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMub2JzZXJ2ZXJFbGVtZW50KCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9ic2VydmVyRWxlbWVudCgpIHtcclxuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgdGhpcy5ybyA9IG5ldyBSZXNpemVPYnNlcnZlcigoZW50cmllcywgb2JzZXJ2ZXIpID0+IHtcclxuICAgICAgICBjb25zdCB0ZW1wV2lkdGggPSBlbnRyaWVzWzBdLmNvbnRlbnRSZWN0LndpZHRoO1xyXG4gICAgICAgIC8vIOWuveW6puWPmOWMlui2hei/hzgw5byA5aeL6K6h566XXHJcbiAgICAgICAgaWYgKE1hdGguYWJzKHRlbXBXaWR0aCAtIHRoaXMud2lkdGhGbGFnKSA+IDE1KSB7XHJcbiAgICAgICAgICB0aGlzLndpZHRoRmxhZyA9IHRlbXBXaWR0aDtcclxuICAgICAgICAgIHRoaXMuY2hhbmdlVGlwc1N0YXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5yby5vYnNlcnZlKHRoaXMud3JhcHBlckVsLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHByaXZhdGUgY2hhbmdlVGlwc1N0YXRlKCkge1xyXG4gICAgbGV0IHRFbmFibGVUaXBzPXRoaXMuZW5hYmxlVGlwcztcclxuICAgIGlmICh0aGlzLndyYXBwZXJFbC5uYXRpdmVFbGVtZW50LmNsaWVudFdpZHRoICsyIDwgdGhpcy53cmFwcGVyRWwubmF0aXZlRWxlbWVudC5zY3JvbGxXaWR0aCkge1xyXG4gICAgICB0RW5hYmxlVGlwcyA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0RW5hYmxlVGlwcyA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYodEVuYWJsZVRpcHMhPT10aGlzLmVuYWJsZVRpcHMpe1xyXG4gICAgICB0aGlzLmVuYWJsZVRpcHM9dEVuYWJsZVRpcHM7XHJcbiAgICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XHJcbiAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=