/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/httpservice.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { QuerySolutionVoConvertor } from '@farris/component-querycondition';
export class HttpService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.histroyUrl = "/api/runtime/sys/v1.0/querysolution/previousQuery";
        this.url = '/api/runtime/sys/v1.0/querysolution';
    }
    /**
     * 新增查询方案
     * @param {?} querySolution 查询方案实体
     * @param {?} sessionId
     * @return {?}
     */
    create(querySolution, sessionId) {
        /** @type {?} */
        let headers = new HttpHeaders({
            'Content-Type': 'application/json',
            'sessionid': sessionId
        });
        /** @type {?} */
        const options = {
            headers: headers,
            sessionid: sessionId
        };
        /** @type {?} */
        let convertor = new QuerySolutionVoConvertor();
        /** @type {?} */
        let body = convertor.convertJObject(querySolution);
        return this.http.post(this.url, body, options);
    }
    /**
     * 根据表单ID查询当前表单当前登录用户的查询方案列表
     * @param {?} formId 表单ID
     * @param {?} sessionId
     * @return {?}
     */
    query(formId, sessionId) {
        /** @type {?} */
        let headers = new HttpHeaders({
            'Content-Type': 'application/json',
            'sessionid': sessionId
        });
        /** @type {?} */
        const options = {
            headers: headers,
        };
        /** @type {?} */
        let belongId = formId;
        // let url = `http://localhost:5100/api/dev/main/v1.0/querysolution/bybelongid/${belongId}`;
        /** @type {?} */
        let url = `${this.url}/belongId/${belongId}`;
        return this.http.get(url, options);
    }
    /**
     * 更新
     * @param {?} querySolution 查询方案实体
     * @param {?} sessionId
     * @return {?}
     */
    update(querySolution, sessionId) {
        /** @type {?} */
        let headers = new HttpHeaders({
            'Content-Type': 'application/json',
            'sessionid': sessionId
        });
        /** @type {?} */
        const options = {
            headers: headers
        };
        /** @type {?} */
        let convertor = new QuerySolutionVoConvertor();
        /** @type {?} */
        let body = convertor.convertJObject(querySolution);
        return this.http.put(this.url, body, options);
    }
    /**
         * 删除
         * @unused
         * @param idArray 删除的解决方案ID列表
         */
    // delete(idArray: Array<string>, sessionId: string) {
    //     if (!idArray || idArray.length <= 0) {
    //         return;
    //     }
    //     let headers = new HttpHeaders({
    //         'Content-Type': 'application/json',
    //         'sessionid': sessionId
    //     });
    //     const options = {
    //         headers: headers,
    //         sessionid: sessionId
    //     };
    //     let ids = '';
    //     idArray.forEach(id => {
    //         ids = ids + "#" + id;
    //     });
    //     let url = `/api/dev/main/v1.0/querysolution/${encodeURIComponent(ids)}`;
    //     return this.http.delete(url, options);
    // }
    /**
     * 批量更新
     * @param {?} body
     * @param {?} sessionId
     * @return {?}
     */
    batchUpdate(body, sessionId) {
        /** @type {?} */
        let headers = new HttpHeaders({
            'Content-Type': 'application/json',
            'sessionid': sessionId
        });
        /** @type {?} */
        const options = {
            headers: headers,
            sessionid: sessionId
        };
        /** @type {?} */
        let url = `${this.url}/batch`;
        return this.http.put(url, body, options);
    }
    /**
         * 获取默认查询方案ID
         * @unused
         * @param formId
         */
    // getDefaultQuerySolution(formId: string, sessionId: string): Observable<any> {
    //     let headers = new HttpHeaders({
    //         'Content-Type': 'text/plain',
    //         'sessionid': sessionId
    //     });
    //     let belongId = formId;
    //     // let url = `http://localhost:5100/api/dev/main/v1.0/querysolution/defaultSolution/bybelongid/${belongId}`;
    //     let url = `/api/dev/main/v1.0/querysolution/defaultSolution/bybelongid/${belongId}`;
    //     return this.http.get(url, { headers: headers, responseType: 'text' });
    // }
    /**
     * 是否支持
     * @return {?}
     */
    supportLS() {
        if (window.hasOwnProperty("localStorage")) {
            return true;
        }
        return false;
    }
    /**
     * 设置保存时候，属性从小写变成大写
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setLS(key, value) {
        /** @type {?} */
        let conditionsStr = '[]';
        if (value) {
            if (typeof value == 'string') {
                conditionsStr = value;
            }
            else {
                /** @type {?} */
                const convertor = new QuerySolutionVoConvertor();
                conditionsStr = JSON.stringify(convertor.formatConvertJObject(value));
            }
        }
        if (key && this.supportLS) {
            localStorage.setItem(key, conditionsStr);
        }
    }
    /**
     * 获取时，属性从大写变成小写
     * @param {?} key
     * @return {?}
     */
    getLS(key) {
        /** @type {?} */
        let result = new Array();
        if (key && this.supportLS) {
            /** @type {?} */
            var v = localStorage.getItem(key);
            if (v != undefined || v !== null) {
                result = JSON.parse(v);
            }
        }
        if (result.length > 0) {
            /** @type {?} */
            const convertor = new QuerySolutionVoConvertor();
            return convertor.formatFromJobject(result);
        }
        return result;
    }
    /**
     * 更新
     * @param {?} querySolution 查询方案实体
     * @param {?} sessionId
     * @return {?}
     */
    saveHistroy(querySolution, sessionId) {
        /** @type {?} */
        let headers = new HttpHeaders({
            "Content-Type": "application/json",
            sessionid: sessionId
        });
        /** @type {?} */
        const options = {
            headers: headers
        };
        /** @type {?} */
        let convertor = new QuerySolutionVoConvertor();
        /** @type {?} */
        let body = convertor.convertJObject(querySolution);
        return this.http.put(this.histroyUrl, body, options);
    }
}
HttpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HttpService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpService.prototype.histroyUrl;
    /** @type {?} */
    HttpService.prototype.url;
    /**
     * @type {?}
     * @private
     */
    HttpService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,