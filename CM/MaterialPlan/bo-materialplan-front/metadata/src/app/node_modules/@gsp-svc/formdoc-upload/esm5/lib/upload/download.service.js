/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
var DownloadService = /** @class */ (function () {
    function DownloadService() {
    }
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @return {?}
     */
    DownloadService.prototype.getDownloadUrl = /**
     * @param {?} metadataId
     * @param {?} rootId
     * @return {?}
     */
    function (metadataId, rootId) {
        return "/api/runtime/dfs/v1.0/doc/filecontent?metadataid=" + metadataId + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(metadataId, rootId));
    };
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    DownloadService.prototype.getMultipleDownloadUrl = /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    function (metadataIdList, rootId) {
        /** @type {?} */
        var list = JSON.parse(metadataIdList);
        return "/api/runtime/dfs/v1.0/doc/multiple/download?metadataidlist=" + metadataIdList + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(list[0], rootId));
    };
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?} zipName
     * @return {?}
     */
    DownloadService.prototype.getMultipleDownloadUrlWithName = /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?} zipName
     * @return {?}
     */
    function (metadataIdList, rootId, zipName) {
        /** @type {?} */
        var list = JSON.parse(metadataIdList);
        if (zipName == null || zipName == "")
            zipName = 'unifile.zip';
        if (!zipName.endsWith(".zip"))
            zipName += '.zip';
        return "/api/runtime/dfs/v1.0/doc/compress/download?metadataidlist=" + metadataIdList + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(list[0], rootId)) + "&zipName=" + zipName;
    };
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @param {?} version
     * @return {?}
     */
    DownloadService.prototype.getHistoryDownloadUrl = /**
     * @param {?} metadataId
     * @param {?} rootId
     * @param {?} version
     * @return {?}
     */
    function (metadataId, rootId, version) {
        //let list:string[]=JSON.parse(metadataIdList);
        return "/api/runtime/dfs/v1.0/doc/historycontent?metadataid=" + metadataId + "&rootid=" + rootId + "&version=" + version + "&token=" + this.getToken(this.mergeString(metadataId, rootId));
    };
    /**
     * @private
     * @param {?} str
     * @param {?} str1
     * @return {?}
     */
    DownloadService.prototype.mergeString = /**
     * @private
     * @param {?} str
     * @param {?} str1
     * @return {?}
     */
    function (str, str1) {
        /** @type {?} */
        var min = str.length < str1.length ? str.length : str1.length;
        /** @type {?} */
        var res = "";
        /** @type {?} */
        var i = 0;
        for (i = 0; i < min; i++) {
            res += str.substring(i, i + 1);
            res += str1.substring(i, i + 1);
        }
        res += str.length < str1.length ? str1.substring(i) : str.substring(i);
        return res;
    };
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    DownloadService.prototype.getToken = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var array = [1, 2, 3];
        if (str.length > 24)
            str = str.substring(0, 24);
        /** @type {?} */
        var length = Math.floor(str.length / 3);
        /** @type {?} */
        var str1 = str.substring(0, length);
        /** @type {?} */
        var str2 = str.substring(length, 2 * length);
        /** @type {?} */
        var str3 = str.substring(2 * length, 3 * length);
        /** @type {?} */
        var randomArray = [];
        /** @type {?} */
        var random = Math.ceil(Math.random() * 3);
        randomArray.push(array[random - 1]);
        array.splice(random - 1, 1);
        random = Math.ceil(Math.random() * 2);
        randomArray.push(array[random - 1]);
        array.splice(random - 1, 1);
        randomArray.push(array[0]);
        /** @type {?} */
        var timeStamp = Math.round(new Date().getTime() / 1000) + "";
        return timeStamp.substring(0, 5) + "times" + randomArray[0] + "" + randomArray[1] + "" + randomArray[2] + this.switchStr(str1, str2, str3, randomArray[0]) + this.switchStr(str1, str2, str3, randomArray[1]) + this.switchStr(str1, str2, str3, randomArray[2]) + "times" + timeStamp.substring(5);
    };
    /**
     * @private
     * @param {?} str1
     * @param {?} str2
     * @param {?} str3
     * @param {?} i
     * @return {?}
     */
    DownloadService.prototype.switchStr = /**
     * @private
     * @param {?} str1
     * @param {?} str2
     * @param {?} str3
     * @param {?} i
     * @return {?}
     */
    function (str1, str2, str3, i) {
        switch (i) {
            case 1: return str1;
            case 2: return str2;
            case 3: return str3;
        }
    };
    DownloadService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DownloadService.ctorParameters = function () { return []; };
    return DownloadService;
}());
export { DownloadService };
//# sourceMappingURL=data:application/json;base64,