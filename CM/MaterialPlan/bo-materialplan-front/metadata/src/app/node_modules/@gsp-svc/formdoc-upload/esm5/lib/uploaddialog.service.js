/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';
import { FileUploadComponent } from './upload/file-upload/file-upload.component';
import { BsModalService } from '@farris/ui-modal';
import { of } from 'rxjs';
var UploadDialogService = /** @class */ (function () {
    function UploadDialogService(modalService, componentFactoryResolver, injector) {
        this.modalService = modalService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.fileInfoList = [];
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @return {?}
     */
    UploadDialogService.prototype.showDialog = /**
     * @param {?} formId
     * @param {?} rootId
     * @return {?}
     */
    function (formId, rootId) {
        var _this = this;
        /** @type {?} */
        var flag = 0;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            /** @type {?} */
            var viewerFactory = _this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(_this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.formId = formId;
            _this.dlg = _this.modalService.show(viewerRef, {
                title: '上传文件',
                width: 950, height: 570,
                buttons: [
                    {
                        text: '保存', cls: 'k-button k-button-icontext k-primary', handle: (/**
                         * @return {?}
                         */
                        function () {
                            _this.dlg.content.upload().subscribe((/**
                             * @param {?} res
                             * @return {?}
                             */
                            function (res) {
                                if (res) {
                                    resolve(res);
                                    flag = 1;
                                    _this.dlg.close();
                                }
                            }));
                        })
                    },
                    {
                        text: '关闭', cls: 'k-button k-button-icontext', handle: (/**
                         * @return {?}
                         */
                        function () {
                            _this.dlg.close();
                        })
                    }
                ],
                showButtons: true,
                showMaxButton: false,
                beforeClose: (/**
                 * @return {?}
                 */
                function () {
                    if (flag == 0)
                        _this.dlg.content.cancel();
                    return of(true);
                })
            });
        }));
    };
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?=} oldIdList
     * @return {?}
     */
    UploadDialogService.prototype.uploadFile = /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?=} oldIdList
     * @return {?}
     */
    function (formId, rootId, oldIdList) {
        if (oldIdList === void 0) { oldIdList = []; }
        return this.uploadFileWithLimit(formId, rootId, null, oldIdList);
    };
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?} limit
     * @param {?=} oldIdList
     * @return {?}
     */
    UploadDialogService.prototype.uploadFileWithLimit = /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?} limit
     * @param {?=} oldIdList
     * @return {?}
     */
    function (formId, rootId, limit, oldIdList) {
        var _this = this;
        if (oldIdList === void 0) { oldIdList = []; }
        /** @type {?} */
        var flag = 0;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            /** @type {?} */
            var uploadFactory = _this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);
            /** @type {?} */
            var uploadRef = uploadFactory.create(_this.injector);
            if (limit != null) {
                uploadRef.instance.fileCount = limit.fileCount;
                if (limit.fileType != null && limit.fileType != "")
                    uploadRef.instance.fileType = limit.fileType;
            }
            uploadRef.instance.rootId = rootId;
            uploadRef.instance.formId = formId;
            uploadRef.instance.oldIdList = oldIdList;
            _this.dlg = _this.modalService.show(uploadRef, {
                title: '上传文件',
                width: 950, height: 570,
                buttons: [
                    {
                        text: '保存', cls: 'k-button k-button-icontext k-primary', handle: (/**
                         * @return {?}
                         */
                        function () {
                            _this.dlg.content.upload().subscribe((/**
                             * @param {?} res
                             * @return {?}
                             */
                            function (res) {
                                if (res) {
                                    resolve(res);
                                    flag = 1;
                                    _this.dlg.close();
                                }
                            }));
                        })
                    },
                    {
                        text: '关闭', cls: 'k-button k-button-icontext', handle: (/**
                         * @return {?}
                         */
                        function () {
                            _this.dlg.close();
                        })
                    }
                ],
                showButtons: true,
                showMaxButton: false,
                beforeClose: (/**
                 * @return {?}
                 */
                function () {
                    if (flag == 0)
                        _this.dlg.content.cancel();
                    return of(true);
                })
            });
        }));
    };
    UploadDialogService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    UploadDialogService.ctorParameters = function () { return [
        { type: BsModalService },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    return UploadDialogService;
}());
export { UploadDialogService };
if (false) {
    /** @type {?} */
    UploadDialogService.prototype.dlg;
    /** @type {?} */
    UploadDialogService.prototype.fileInfoList;
    /**
     * @type {?}
     * @private
     */
    UploadDialogService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    UploadDialogService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    UploadDialogService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,