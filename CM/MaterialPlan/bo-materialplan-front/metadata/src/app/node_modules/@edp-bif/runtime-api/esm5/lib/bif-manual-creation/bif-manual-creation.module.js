/**
 * @fileoverview added by tsickle
 * Generated from: lib/bif-manual-creation/bif-manual-creation.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, LOCALE_ID, NgModuleFactoryLoader, SystemJsNgModuleLoader } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { ModalModule } from '@farris/ui-modal';
import { NotifyModule } from '@farris/ui-notify';
import { MessagerModule } from '@farris/ui-messager';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { ModuleConfig } from './config/module.config';
import { PushSelectorComponent } from './components/push-selector/push-selector.component';
import { PullSelectorComponent } from './components/pull-selector/pull-selector.component';
import { LocalePipe } from "./pipe/locale.pipe";
import { BifDataService } from './service/bif-data.service';
import { BifSourceUiService } from './service/bif-source-ui.service';
import { BifTargetUiService } from './service/bif-target-ui.service';
import { LoadingModule } from '@farris/ui-loading';
var ɵ0 = localStorage.getItem('languageCode') || 'zh-CHS', ɵ1 = {};
var BifManualCreationModule = /** @class */ (function () {
    function BifManualCreationModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    BifManualCreationModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var providers = [
            { provide: ModuleConfig, useValue: config || {} },
            BifDataService,
            BifSourceUiService,
            BifTargetUiService,
        ];
        return {
            ngModule: BifManualCreationModule,
            providers: providers
        };
    };
    BifManualCreationModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        PushSelectorComponent,
                        PullSelectorComponent,
                        LocalePipe,
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        HttpClientModule,
                        ModalModule.forRoot(),
                        NotifyModule.forRoot(),
                        MessagerModule.forRoot(),
                        FarrisDialogModule.forRoot(),
                        LoadingModule.forRoot(),
                    ],
                    providers: [
                        { provide: LOCALE_ID, useValue: ɵ0 },
                        { provide: ModuleConfig, useValue: ɵ1 },
                        { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },
                        BifDataService,
                        BifSourceUiService,
                        BifTargetUiService,
                    ],
                    exports: [
                        PushSelectorComponent,
                        PullSelectorComponent
                    ],
                    entryComponents: [
                        PushSelectorComponent,
                        PullSelectorComponent
                    ],
                },] }
    ];
    return BifManualCreationModule;
}());
export { BifManualCreationModule };
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlmLW1hbnVhbC1jcmVhdGlvbi5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWJpZi9ydW50aW1lLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9iaWYtbWFudWFsLWNyZWF0aW9uL2JpZi1tYW51YWwtY3JlYXRpb24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsU0FBUyxFQUFFLHFCQUFxQixFQUFFLHNCQUFzQixFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ2xJLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFeEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQzNGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQzNGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDckUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDckUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO1NBbUJYLFlBQVksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksUUFBUSxPQUM3QyxFQUFFO0FBbEI3QztJQUFBO0lBOENBLENBQUM7Ozs7O0lBWmlCLCtCQUFPOzs7O0lBQXJCLFVBQXNCLE1BQXFCOztZQUNqQyxTQUFTLEdBQWU7WUFDMUIsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxNQUFNLElBQUksRUFBRSxFQUFFO1lBQ2pELGNBQWM7WUFDZCxrQkFBa0I7WUFDbEIsa0JBQWtCO1NBQ3JCO1FBQ0QsT0FBTztZQUNILFFBQVEsRUFBRSx1QkFBdUI7WUFDakMsU0FBUyxFQUFFLFNBQVM7U0FDdkIsQ0FBQTtJQUNMLENBQUM7O2dCQTdDSixRQUFRLFNBQUM7b0JBQ04sWUFBWSxFQUFFO3dCQUNWLHFCQUFxQjt3QkFDckIscUJBQXFCO3dCQUNyQixVQUFVO3FCQUNiO29CQUNELE9BQU8sRUFBRTt3QkFDTCxZQUFZO3dCQUNaLFdBQVc7d0JBQ1gsZ0JBQWdCO3dCQUNoQixXQUFXLENBQUMsT0FBTyxFQUFFO3dCQUNyQixZQUFZLENBQUMsT0FBTyxFQUFFO3dCQUN0QixjQUFjLENBQUMsT0FBTyxFQUFFO3dCQUN4QixrQkFBa0IsQ0FBQyxPQUFPLEVBQUU7d0JBQzVCLGFBQWEsQ0FBQyxPQUFPLEVBQUU7cUJBQzFCO29CQUNELFNBQVMsRUFBRTt3QkFDUCxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxJQUFrRCxFQUFFO3dCQUNsRixFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxJQUFJLEVBQUU7d0JBQ3ZDLEVBQUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLFFBQVEsRUFBRSxzQkFBc0IsRUFBRTt3QkFDcEUsY0FBYzt3QkFDZCxrQkFBa0I7d0JBQ2xCLGtCQUFrQjtxQkFDckI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNMLHFCQUFxQjt3QkFDckIscUJBQXFCO3FCQUN4QjtvQkFDRCxlQUFlLEVBQUU7d0JBQ2IscUJBQXFCO3dCQUNyQixxQkFBcUI7cUJBQ3hCO2lCQUNKOztJQWNELDhCQUFDO0NBQUEsQUE5Q0QsSUE4Q0M7U0FiWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgTE9DQUxFX0lELCBOZ01vZHVsZUZhY3RvcnlMb2FkZXIsIFN5c3RlbUpzTmdNb2R1bGVMb2FkZXIsIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5cclxuaW1wb3J0IHsgTW9kYWxNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW1vZGFsJztcclxuaW1wb3J0IHsgTm90aWZ5TW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBNZXNzYWdlck1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5pbXBvcnQgeyBGYXJyaXNEaWFsb2dNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWRpYWxvZyc7XHJcbmltcG9ydCB7IE1vZHVsZUNvbmZpZyB9IGZyb20gJy4vY29uZmlnL21vZHVsZS5jb25maWcnO1xyXG5pbXBvcnQgeyBQdXNoU2VsZWN0b3JDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvcHVzaC1zZWxlY3Rvci9wdXNoLXNlbGVjdG9yLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFB1bGxTZWxlY3RvckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9wdWxsLXNlbGVjdG9yL3B1bGwtc2VsZWN0b3IuY29tcG9uZW50JztcclxuaW1wb3J0IHsgTG9jYWxlUGlwZSB9IGZyb20gXCIuL3BpcGUvbG9jYWxlLnBpcGVcIjtcclxuaW1wb3J0IHsgQmlmRGF0YVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2UvYmlmLWRhdGEuc2VydmljZSc7XHJcbmltcG9ydCB7IEJpZlNvdXJjZVVpU2VydmljZSB9IGZyb20gJy4vc2VydmljZS9iaWYtc291cmNlLXVpLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBCaWZUYXJnZXRVaVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2UvYmlmLXRhcmdldC11aS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTG9hZGluZ01vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9hZGluZyc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gICAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAgICAgUHVzaFNlbGVjdG9yQ29tcG9uZW50LFxyXG4gICAgICAgIFB1bGxTZWxlY3RvckNvbXBvbmVudCxcclxuICAgICAgICBMb2NhbGVQaXBlLFxyXG4gICAgXSxcclxuICAgIGltcG9ydHM6IFtcclxuICAgICAgICBDb21tb25Nb2R1bGUsXHJcbiAgICAgICAgRm9ybXNNb2R1bGUsXHJcbiAgICAgICAgSHR0cENsaWVudE1vZHVsZSxcclxuICAgICAgICBNb2RhbE1vZHVsZS5mb3JSb290KCksXHJcbiAgICAgICAgTm90aWZ5TW9kdWxlLmZvclJvb3QoKSxcclxuICAgICAgICBNZXNzYWdlck1vZHVsZS5mb3JSb290KCksXHJcbiAgICAgICAgRmFycmlzRGlhbG9nTW9kdWxlLmZvclJvb3QoKSxcclxuICAgICAgICBMb2FkaW5nTW9kdWxlLmZvclJvb3QoKSxcclxuICAgIF0sXHJcbiAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7IHByb3ZpZGU6IExPQ0FMRV9JRCwgdXNlVmFsdWU6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYW5ndWFnZUNvZGUnKSB8fCAnemgtQ0hTJyB9LFxyXG4gICAgICAgIHsgcHJvdmlkZTogTW9kdWxlQ29uZmlnLCB1c2VWYWx1ZToge30gfSxcclxuICAgICAgICB7IHByb3ZpZGU6IE5nTW9kdWxlRmFjdG9yeUxvYWRlciwgdXNlQ2xhc3M6IFN5c3RlbUpzTmdNb2R1bGVMb2FkZXIgfSxcclxuICAgICAgICBCaWZEYXRhU2VydmljZSxcclxuICAgICAgICBCaWZTb3VyY2VVaVNlcnZpY2UsXHJcbiAgICAgICAgQmlmVGFyZ2V0VWlTZXJ2aWNlLFxyXG4gICAgXSxcclxuICAgIGV4cG9ydHM6IFtcclxuICAgICAgICBQdXNoU2VsZWN0b3JDb21wb25lbnQsXHJcbiAgICAgICAgUHVsbFNlbGVjdG9yQ29tcG9uZW50XHJcbiAgICBdLFxyXG4gICAgZW50cnlDb21wb25lbnRzOiBbXHJcbiAgICAgICAgUHVzaFNlbGVjdG9yQ29tcG9uZW50LFxyXG4gICAgICAgIFB1bGxTZWxlY3RvckNvbXBvbmVudFxyXG4gICAgXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIEJpZk1hbnVhbENyZWF0aW9uTW9kdWxlIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgZm9yUm9vdChjb25maWc/OiBNb2R1bGVDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgICAgICBjb25zdCBwcm92aWRlcnM6IFByb3ZpZGVyW10gPSBbXHJcbiAgICAgICAgICAgIHsgcHJvdmlkZTogTW9kdWxlQ29uZmlnLCB1c2VWYWx1ZTogY29uZmlnIHx8IHt9IH0sXHJcbiAgICAgICAgICAgIEJpZkRhdGFTZXJ2aWNlLFxyXG4gICAgICAgICAgICBCaWZTb3VyY2VVaVNlcnZpY2UsXHJcbiAgICAgICAgICAgIEJpZlRhcmdldFVpU2VydmljZSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5nTW9kdWxlOiBCaWZNYW51YWxDcmVhdGlvbk1vZHVsZSxcclxuICAgICAgICAgICAgcHJvdmlkZXJzOiBwcm92aWRlcnNcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=