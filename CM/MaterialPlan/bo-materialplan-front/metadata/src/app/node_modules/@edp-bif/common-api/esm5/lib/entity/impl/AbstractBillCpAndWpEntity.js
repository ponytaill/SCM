/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/impl/AbstractBillCpAndWpEntity.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Entity, BpmnModelJsonHelper } from '../../ref';
var AbstractBillCpAndWpEntity = /** @class */ (function (_super) {
    tslib_1.__extends(AbstractBillCpAndWpEntity, _super);
    function AbstractBillCpAndWpEntity() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.sysInit = false;
        _this.isCreationProcess = false;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    AbstractBillCpAndWpEntity.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.code = null;
        this.name = null;
        this.persistenceVersion = null;
        this.parentId = null;
        this.upBillVoId = null;
        this.downBillVoId = null;
        this.sysInit = false;
        this.isCreationProcess = false;
        this.originId = null;
        this.rootId = null;
    };
    /**
     * @return {?}
     */
    AbstractBillCpAndWpEntity.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "code", this.code);
        BpmnModelJsonHelper.SetAttributeValue(obj, "name", this.name);
        BpmnModelJsonHelper.SetAttributeValue(obj, "persistenceVersion", this.persistenceVersion);
        BpmnModelJsonHelper.SetAttributeValue(obj, "parentId", this.parentId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "upBillVoId", this.upBillVoId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "downBillVoId", this.downBillVoId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sysInit", this.sysInit);
        BpmnModelJsonHelper.SetAttributeValue(obj, "isCreationProcess", this.isCreationProcess);
        BpmnModelJsonHelper.SetAttributeValue(obj, "originId", this.originId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "rootId", this.rootId);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AbstractBillCpAndWpEntity.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.code = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "code");
        this.name = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "name");
        this.persistenceVersion = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "persistenceVersion");
        this.parentId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "parentId");
        this.upBillVoId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "upBillVoId");
        this.downBillVoId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "downBillVoId");
        this.sysInit = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "sysInit");
        this.isCreationProcess = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "isCreationProcess");
        this.originId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "originId");
        this.rootId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "rootId");
    };
    return AbstractBillCpAndWpEntity;
}(Entity));
export { AbstractBillCpAndWpEntity };
if (false) {
    /** @type {?} */
    AbstractBillCpAndWpEntity.prototype.code;
    /** @type {?} */
    AbstractBillCpAndWpEntity.prototype.name;
    /** @type {?} */
    AbstractBillCpAndWpEntity.prototype.persistenceVersion;
    /** @type {?} */
    AbstractBillCpAndWpEntity.prototype.parentId;
    /** @type {?} */
    AbstractBillCpAndWpEntity.prototype.upBillVoId;
    /** @type {?} */
    AbstractBillCpAndWpEntity.prototype.downBillVoId;
    /** @type {?} */
    AbstractBillCpAndWpEntity.prototype.sysInit;
    /** @type {?} */
    AbstractBillCpAndWpEntity.prototype.isCreationProcess;
    /** @type {?} */
    AbstractBillCpAndWpEntity.prototype.originId;
    /** @type {?} */
    AbstractBillCpAndWpEntity.prototype.rootId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWJzdHJhY3RCaWxsQ3BBbmRXcEVudGl0eS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2ltcGwvQWJzdHJhY3RCaWxsQ3BBbmRXcEVudGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLG1CQUFtQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBR3hEO0lBQStDLHFEQUFNO0lBQXJEO1FBQUEscUVBMERDO1FBbkRHLGFBQU8sR0FBWSxLQUFLLENBQUM7UUFDekIsdUJBQWlCLEdBQVksS0FBSyxDQUFDOztJQWtEdkMsQ0FBQzs7Ozs7SUE5Q2EsdURBQW1COzs7O0lBQTdCO1FBQ0ksaUJBQU0sbUJBQW1CLFdBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO1FBQy9CLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDdkIsQ0FBQzs7OztJQUVNLHVEQUFtQjs7O0lBQTFCOztZQUNRLEdBQUcsR0FBRyxpQkFBTSxtQkFBbUIsV0FBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5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Jy4uLy4uL3JlZic7XHJcbmltcG9ydCB7IElCaWxsQ3BBbmRXcEVudGl0eSB9IGZyb20gJy4uL0lCaWxsQ3BBbmRXcEVudGl0eSc7XHJcblxyXG5leHBvcnQgY2xhc3MgQWJzdHJhY3RCaWxsQ3BBbmRXcEVudGl0eSBleHRlbmRzIEVudGl0eSBpbXBsZW1lbnRzIElCaWxsQ3BBbmRXcEVudGl0eSB7XHJcbiAgICBjb2RlOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBwZXJzaXN0ZW5jZVZlcnNpb246IHN0cmluZztcclxuICAgIHBhcmVudElkOiBzdHJpbmc7XHJcbiAgICB1cEJpbGxWb0lkOiBzdHJpbmc7XHJcbiAgICBkb3duQmlsbFZvSWQ6IHN0cmluZztcclxuICAgIHN5c0luaXQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIGlzQ3JlYXRpb25Qcm9jZXNzOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBvcmlnaW5JZDogc3RyaW5nO1xyXG4gICAgcm9vdElkOiBzdHJpbmc7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLmNvZGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5wZXJzaXN0ZW5jZVZlcnNpb24gPSBudWxsO1xyXG4gICAgICAgIHRoaXMucGFyZW50SWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudXBCaWxsVm9JZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5kb3duQmlsbFZvSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc3lzSW5pdCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNDcmVhdGlvblByb2Nlc3MgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm9yaWdpbklkID0gbnVsbDtcclxuICAgICAgICB0aGlzLnJvb3RJZCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImNvZGVcIiwgdGhpcy5jb2RlKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJuYW1lXCIsIHRoaXMubmFtZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwicGVyc2lzdGVuY2VWZXJzaW9uXCIsIHRoaXMucGVyc2lzdGVuY2VWZXJzaW9uKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJwYXJlbnRJZFwiLCB0aGlzLnBhcmVudElkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJ1cEJpbGxWb0lkXCIsIHRoaXMudXBCaWxsVm9JZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiZG93bkJpbGxWb0lkXCIsIHRoaXMuZG93bkJpbGxWb0lkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJzeXNJbml0XCIsIHRoaXMuc3lzSW5pdCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiaXNDcmVhdGlvblByb2Nlc3NcIiwgdGhpcy5pc0NyZWF0aW9uUHJvY2Vzcyk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwib3JpZ2luSWRcIiwgdGhpcy5vcmlnaW5JZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwicm9vdElkXCIsIHRoaXMucm9vdElkKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5jb2RlID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJjb2RlXCIpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwibmFtZVwiKTtcclxuICAgICAgICB0aGlzLnBlcnNpc3RlbmNlVmVyc2lvbiA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwicGVyc2lzdGVuY2VWZXJzaW9uXCIpO1xyXG4gICAgICAgIHRoaXMucGFyZW50SWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInBhcmVudElkXCIpO1xyXG4gICAgICAgIHRoaXMudXBCaWxsVm9JZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwidXBCaWxsVm9JZFwiKTtcclxuICAgICAgICB0aGlzLmRvd25CaWxsVm9JZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiZG93bkJpbGxWb0lkXCIpO1xyXG4gICAgICAgIHRoaXMuc3lzSW5pdCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc0Jvb2xlYW4ob2JqLCBcInN5c0luaXRcIik7XHJcbiAgICAgICAgdGhpcy5pc0NyZWF0aW9uUHJvY2VzcyA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc0Jvb2xlYW4ob2JqLCBcImlzQ3JlYXRpb25Qcm9jZXNzXCIpO1xyXG4gICAgICAgIHRoaXMub3JpZ2luSWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcIm9yaWdpbklkXCIpO1xyXG4gICAgICAgIHRoaXMucm9vdElkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJyb290SWRcIik7XHJcbiAgICB9XHJcbn0iXX0=