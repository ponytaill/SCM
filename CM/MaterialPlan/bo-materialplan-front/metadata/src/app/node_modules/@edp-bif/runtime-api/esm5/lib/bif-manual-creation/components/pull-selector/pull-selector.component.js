/**
 * @fileoverview added by tsickle
 * Generated from: lib/bif-manual-creation/components/pull-selector/pull-selector.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Inject, LOCALE_ID, ElementRef } from '@angular/core';
import { Subject } from 'rxjs';
import { SELECTOR_ARGS_INJECTOR } from '../../config/selector-args-injector.config';
import { BifDataService } from '../../service/bif-data.service';
import { FormGetBillCreationProcessEntityExArgs } from '../../../entity/form-rest/FormGetBillCreationProcessEntityExArgs';
import { LoadingService } from '@farris/ui-loading';
var PullSelectorComponent = /** @class */ (function () {
    function PullSelectorComponent(args, dataService, localeId, loading, elementRef) {
        var _this = this;
        this.dataService = dataService;
        this.loading = loading;
        this.elementRef = elementRef;
        //来源VoType列表
        this.voIdList = [];
        //来源VoType与来源VoName映射
        this.nameDict = {};
        //来源VoType与相应的生单规则列表映射
        this.entityDict = {};
        this.bsModalRef4BifSelector = null;
        this.subject4CreationProcess = new Subject();
        this.clickOk4BifSelector = (/**
         * @return {?}
         */
        function () {
            _this.subject4CreationProcess.next(_this.selectedEntity);
            _this.subject4CreationProcess.complete();
            _this.bsModalRef4BifSelector.close();
        });
        this.clickClose4BifSelector = (/**
         * @return {?}
         */
        function () {
            _this.bsModalRef4BifSelector.close();
        });
        this.args = new FormGetBillCreationProcessEntityExArgs();
        this.args.LoadFromJsonObject(args);
    }
    Object.defineProperty(PullSelectorComponent.prototype, "selectedVoId", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedVoId;
        },
        set: /**
         * @param {?} voId
         * @return {?}
         */
        function (voId) {
            this._selectedVoId = voId;
            if (voId != null) {
                this.selectedEntity = this.entityDict[this._selectedVoId][0];
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PullSelectorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.loadItems();
    };
    /**
     * @private
     * @return {?}
     */
    PullSelectorComponent.prototype.loadItems = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.loading.show({ container: this.elementRef });
        /** @type {?} */
        var list$ = null;
        if (this.args.upBillVoId == null) {
            // if (this.args.bizFlowchartId == null) {
            list$ = this.dataService.getSlimBillCreationProcessEntityExesByDownBillVoId4Pull(this.args.downBillVoId);
            // } else {
            // list$ = this.dataService.getSlimCreationRulesByTargetVoIdAndFlowchartId(this.args.targetVoId, this.args.bizFlowchartId);
            // }
        }
        else {
            // if (this.args.bizFlowchartId == null) {
            list$ = this.dataService.getSlimBillCreationProcessEntityExesByUpBillVoIdAndDownBillVoId4SpecificPull(this.args.upBillVoId, this.args.downBillVoId);
            // } else {
            // list$ = this.dataService.getSlimCreationRulesBySourceVoIdAndTargetVoIdAndFlowchartId(this.args.sourceVoId, this.args.targetVoId, this.args.bizFlowchartId);
            // }
        }
        list$.subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            /** @type {?} */
            var list = result;
            list.forEach((/**
             * @param {?} elt
             * @return {?}
             */
            function (elt) {
                if (_this.voIdList.includes(elt.upBillVoId) === false) {
                    _this.voIdList.push(elt.upBillVoId);
                    _this.entityDict[elt.upBillVoId] = new Array();
                }
                _this.nameDict[elt.upBillVoId] = elt.upBillVoName;
                _this.entityDict[elt.upBillVoId].push(elt);
            }));
            _this.selectedVoId = _this.voIdList.length > 0 ? _this.voIdList[0] : null;
            _this.loading.close();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.loading.close();
            throw err;
        }));
    };
    PullSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-bif-pull-selector',
                    template: "<div class=\"g-main px-3 py-2\">\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"height: 150px;overflow-y: auto;\">\r\n    <div [hidden]=\"voIdList.length != 0\"><span style=\"color: red;\">{{ 'emptyResult' | locale }}</span></div>\r\n    <div>{{ 'selectUpstreamBill' | locale }}</div>\r\n    <div *ngFor=\"let voId of voIdList;let i=index\" class=\"col-sm-12 col-md-5 form-check form-check-inline\">\r\n      <input class=\"form-check-input\" type=\"radio\" [name]=\"'voId'+i\" [id]=\"voId\" [value]=\"voId\"\r\n        [(ngModel)]=\"selectedVoId\" />\r\n      <label class=\"form-check-label\" [for]=\"'voId'+i\">{{nameDict[voId]}}</label>\r\n    </div>\r\n  </div>\r\n\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"\">\r\n    <div>{{ 'selectCreationProcess' | locale }}</div>\r\n    <select class=\"form-control\" name=\"selectedEntity\" [(ngModel)]=\"selectedEntity\">\r\n      <option *ngFor=\"let cr of entityDict[selectedVoId];\" [ngValue]=\"cr\">\r\n        {{cr.name}}({{cr.code}})</option>\r\n    </select>\r\n  </div>\r\n\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"\">\r\n    <div>{{ 'processDesciption' | locale }}</div>\r\n    <textarea readonly class=\"form-control\" name=\"description\" rows=\"3\"\r\n      [ngModel]=\"selectedEntity&&selectedEntity.description\"></textarea>\r\n  </div>\r\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PullSelectorComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [SELECTOR_ARGS_INJECTOR,] }] },
        { type: BifDataService },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: LoadingService },
        { type: ElementRef }
    ]; };
    return PullSelectorComponent;
}());
export { PullSelectorComponent };
if (false) {
    /** @type {?} */
    PullSelectorComponent.prototype.voIdList;
    /** @type {?} */
    PullSelectorComponent.prototype.nameDict;
    /** @type {?} */
    PullSelectorComponent.prototype.entityDict;
    /**
     * @type {?}
     * @private
     */
    PullSelectorComponent.prototype._selectedVoId;
    /** @type {?} */
    PullSelectorComponent.prototype.selectedEntity;
    /** @type {?} */
    PullSelectorComponent.prototype.bsModalRef4BifSelector;
    /** @type {?} */
    PullSelectorComponent.prototype.subject4CreationProcess;
    /**
     * @type {?}
     * @private
     */
    PullSelectorComponent.prototype.args;
    /** @type {?} */
    PullSelectorComponent.prototype.clickOk4BifSelector;
    /** @type {?} */
    PullSelectorComponent.prototype.clickClose4BifSelector;
    /**
     * @type {?}
     * @private
     */
    PullSelectorComponent.prototype.dataService;
    /**
     * @type {?}
     * @private
     */
    PullSelectorComponent.prototype.loading;
    /**
     * @type {?}
     * @private
     */
    PullSelectorComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,