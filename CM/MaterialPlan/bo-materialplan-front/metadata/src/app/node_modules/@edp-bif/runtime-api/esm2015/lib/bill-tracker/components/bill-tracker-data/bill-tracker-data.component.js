/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/components/bill-tracker-data/bill-tracker-data.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, Injector, ViewContainerRef, ViewChild, ComponentRef, NgModuleFactoryLoader, ChangeDetectorRef, LOCALE_ID, Inject } from '@angular/core';
import { BasicTableComponent } from '../basic-table/basic-table.component';
import { BillTrackerDataService } from '../../services/bill-tracker-data.service';
import { LoadingService } from '@farris/ui-loading';
import { MessagerService } from '@farris/ui-messager';
import { BillTrackingSettings, BillTrackingDataShownMode } from '@edp-bif/common-api';
import { from, of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { BasicInfoComponent } from '../basic-info/basic-info.component';
import { NotifyService } from '@farris/ui-notify';
import { BsModalService } from '@farris/ui-modal';
import { BillTrackerDataInfoService } from '../../services/bill-tracker-data-info.service';
import { BillTrackerLocalePipe } from '../../pipe/bill-tracker-locale.pipe';
export class BillTrackerDataComponent {
    /**
     * @param {?} notify
     * @param {?} messager
     * @param {?} loading
     * @param {?} modal
     * @param {?} dataService
     * @param {?} inj
     * @param {?} cfr
     * @param {?} cdf
     * @param {?} loader
     * @param {?} localeId
     */
    constructor(notify, messager, loading, modal, dataService, inj, cfr, cdf, loader, localeId) {
        this.notify = notify;
        this.messager = messager;
        this.loading = loading;
        this.modal = modal;
        this.dataService = dataService;
        this.inj = inj;
        this.cfr = cfr;
        this.cdf = cdf;
        this.loader = loader;
        this.dataInfoService = new BillTrackerDataInfoService();
        this.localeId = localeId || this.inj.get(LOCALE_ID, null) || 'zh-CHS';
        this.localePipe = new BillTrackerLocalePipe(localeId);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    clearDataRegion() {
        this.dataRegion.clear();
    }
    /**
     * @param {?} args
     * @param {?=} billInfo
     * @param {?=} billDataInfo
     * @param {?=} res
     * @return {?}
     */
    showDataGrid(args, billInfo, billDataInfo, res) {
        // 单据追踪配置
        /** @type {?} */
        let bts = new BillTrackingSettings();
        if (billInfo && billInfo.billTrackingSettings) {
            bts.LoadFromJson(billInfo.billTrackingSettings);
        }
        if (bts.billTrackingDataShownMode == BillTrackingDataShownMode.CUSTOMFORM) {
            this.showCustomForm(args, billInfo, billDataInfo);
        }
        else {
            this.showGeneralForm(args, billInfo, billDataInfo, res);
        }
    }
    /**
     * 打开通用表单
     * @private
     * @param {?} args
     * @param {?=} billInfo
     * @param {?=} billDataInfo
     * @param {?=} res
     * @param {?=} newBTS
     * @return {?}
     */
    showGeneralForm(args, billInfo, billDataInfo, res, newBTS) {
        if (res != null) {
            this.createDataComp(res, billInfo, billDataInfo);
        }
        else {
            /** @type {?} */
            const l = this.loading.show({ message: this.localePipe.transform("loading") });
            this.dataService.getEntityData(args).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                this.createDataComp(res, billInfo, billDataInfo);
                l.close();
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                l.close();
                this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                throw err;
            }));
        }
    }
    /**
     * 打开自定义表单
     * @private
     * @param {?} args
     * @param {?=} billInfo
     * @param {?=} billDataInfo
     * @return {?}
     */
    showCustomForm(args, billInfo, billDataInfo) {
        /** @type {?} */
        let bts = new BillTrackingSettings();
        if (billInfo && billInfo.billTrackingSettings) {
            bts.LoadFromJson(billInfo.billTrackingSettings);
        }
        /** @type {?} */
        let formContent = JSON.parse(bts.customFormContent);
        /** @type {?} */
        let moduleF$ = null;
        if (formContent.form.endsWith(".js")) {
            // url格式为[js路径]时
            moduleF$ = from(System.import(formContent.form.toLowerCase()).then((/**
             * @param {?} m
             * @return {?}
             */
            m => m))).pipe(switchMap((/**
             * @param {?} m
             * @return {?}
             */
            (m) => {
                for (let key in m) {
                    return of(m[key]);
                }
                return of(null);
            })));
        }
        else {
            // url格式为[js路径#模块名]时
            moduleF$ = from(this.loader.load(formContent.form));
        }
        moduleF$.subscribe((/**
         * @param {?} moduleFactory
         * @return {?}
         */
        (moduleFactory) => {
            /** @type {?} */
            const moduleRef = moduleFactory.create(this.inj);
            /** @type {?} */
            let cmpR$ = moduleRef.instance.createDataShownComponent(this.inj, args);
            if (cmpR$ instanceof ComponentRef) {
                cmpR$ = of(cmpR$);
            }
            cmpR$.subscribe((/**
             * @param {?} cmpR
             * @return {?}
             */
            (cmpR) => {
                // 重置滚动条
                /** @type {?} */
                const elt = (/** @type {?} */ (this.dataRegion.element.nativeElement.parentElement));
                elt.scrollTo({ left: 0 });
                this.dataRegion.clear();
                this.dataRegion.insert(cmpR.hostView);
            }));
        }));
    }
    /**
     * 创建通用表组件
     * @param {?} res
     * @param {?} billInfo
     * @param {?} billDataInfo
     * @return {?}
     */
    createDataComp(res, billInfo, billDataInfo) {
        /** @type {?} */
        const newBTS = this.dataInfoService.isNewBTS(billInfo.billTrackingSettings);
        // if (newBTS) {
        try {
            this.createNewDataComp(res, billInfo, billDataInfo);
        }
        catch (e) {
            // 重置滚动条
            /** @type {?} */
            const elt = (/** @type {?} */ (this.dataRegion.element.nativeElement.parentElement));
            elt && elt.scrollTo({ left: 0 });
            this.dataRegion.clear();
            /** @type {?} */
            const cmf = this.cfr.resolveComponentFactory(BasicTableComponent);
            /** @type {?} */
            const cmpR = this.dataRegion.createComponent(cmf);
            cmpR.instance.billInfo = billInfo;
            cmpR.instance.isMain = true;
            cmpR.instance.showMainTable(res);
            this.dataRegion.insert(cmpR.hostView);
        }
        // }
    }
    /**
     * 创建通用表组件
     * @param {?} res
     * @param {?=} billInfo
     * @param {?=} billDataInfo
     * @return {?}
     */
    createNewDataComp(res, billInfo, billDataInfo) {
        // 重置滚动条
        /** @type {?} */
        const elt = (/** @type {?} */ (this.dataRegion.element.nativeElement.parentElement));
        elt && elt.scrollTo({ left: 0 });
        this.dataRegion.clear();
        /** @type {?} */
        const cmf = this.cfr.resolveComponentFactory(BasicInfoComponent);
        /** @type {?} */
        const cmpR = this.dataRegion.createComponent(cmf);
        cmpR.instance.schemaTable = res.billSchema.mainTable;
        cmpR.instance.dataTable = res.billData.mainTable;
        cmpR.instance.billInfo = billInfo;
        cmpR.instance.billDataInfo = billDataInfo;
        this.dataRegion.insert(cmpR.hostView);
    }
}
BillTrackerDataComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-bill-tracker-data',
                template: "<div style=\"\">\r\n    <ng-container #dataRegion></ng-container>\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
BillTrackerDataComponent.ctorParameters = () => [
    { type: NotifyService },
    { type: MessagerService },
    { type: LoadingService },
    { type: BsModalService },
    { type: BillTrackerDataService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef },
    { type: NgModuleFactoryLoader },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
BillTrackerDataComponent.propDecorators = {
    dataRegion: [{ type: ViewChild, args: ["dataRegion", { read: ViewContainerRef },] }]
};
if (false) {
    /** @type {?} */
    BillTrackerDataComponent.prototype.dataRegion;
    /** @type {?} */
    BillTrackerDataComponent.prototype.dataInfoService;
    /** @type {?} */
    BillTrackerDataComponent.prototype.localePipe;
    /** @type {?} */
    BillTrackerDataComponent.prototype.localeId;
    /** @type {?} */
    BillTrackerDataComponent.prototype.notify;
    /** @type {?} */
    BillTrackerDataComponent.prototype.messager;
    /** @type {?} */
    BillTrackerDataComponent.prototype.loading;
    /** @type {?} */
    BillTrackerDataComponent.prototype.modal;
    /** @type {?} */
    BillTrackerDataComponent.prototype.dataService;
    /** @type {?} */
    BillTrackerDataComponent.prototype.inj;
    /** @type {?} */
    BillTrackerDataComponent.prototype.cfr;
    /** @type {?} */
    BillTrackerDataComponent.prototype.cdf;
    /** @type {?} */
    BillTrackerDataComponent.prototype.loader;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbC10cmFja2VyLWRhdGEuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1iaWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvYmlsbC10cmFja2VyL2NvbXBvbmVudHMvYmlsbC10cmFja2VyLWRhdGEvYmlsbC10cmFja2VyLWRhdGEuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSx3QkFBd0IsRUFBRSxRQUFRLEVBQWlCLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUscUJBQXFCLEVBQW1CLGlCQUFpQixFQUFZLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeE8sT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDM0UsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFFbEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUd0RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RixPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUM1QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDeEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUMzRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FB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QUFHLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQztRQUNyRCxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQztRQUNqRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBRTFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7WUFuTEYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx1QkFBdUI7Z0JBQ2pDLHVGQUFpRDs7YUFFbEQ7Ozs7WUFaUSxhQUFhO1lBVGIsZUFBZTtZQURmLGNBQWM7WUFXZCxjQUFjO1lBYmQsc0JBQXNCO1lBRnVCLFFBQVE7WUFBbEMsd0JBQXdCO1lBQThHLGlCQUFpQjtZQUF6RCxxQkFBcUI7eUNBNkMxSSxNQUFNLFNBQUMsU0FBUzs7O3lCQWhCbEIsU0FBUyxTQUFDLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRTs7OztJQUFuRCw4Q0FDNkI7O0lBQzdCLG1EQUE0Qzs7SUFDNUMsOENBQWtDOztJQUNsQyw0Q0FBaUI7O0lBR2YsMENBQTRCOztJQUM1Qiw0Q0FBZ0M7O0lBQ2hDLDJDQUE4Qjs7SUFDOUIseUNBQTRCOztJQUM1QiwrQ0FBMEM7O0lBQzFDLHVDQUFvQjs7SUFDcEIsdUNBQW9DOztJQUNwQyx1Q0FBNkI7O0lBQzdCLDBDQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEluamVjdG9yLCBBZnRlclZpZXdJbml0LCBWaWV3Q29udGFpbmVyUmVmLCBWaWV3Q2hpbGQsIENvbXBvbmVudFJlZiwgTmdNb2R1bGVGYWN0b3J5TG9hZGVyLCBOZ01vZHVsZUZhY3RvcnksIENoYW5nZURldGVjdG9yUmVmLCBPcHRpb25hbCwgTE9DQUxFX0lELCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQmFzaWNUYWJsZUNvbXBvbmVudCB9IGZyb20gJy4uL2Jhc2ljLXRhYmxlL2Jhc2ljLXRhYmxlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEJpbGxUcmFja2VyRGF0YVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9iaWxsLXRyYWNrZXItZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgR2V0TWFpbkVudGl0eURhdGFBcmdzIH0gZnJvbSAnLi4vLi4vYXJncy9HZXRNYWluRW50aXR5RGF0YUFyZ3MnO1xyXG5pbXBvcnQgeyBMb2FkaW5nU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9hZGluZyc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5pbXBvcnQgeyBFbnRpdHlEYXRhUmVzdWx0IH0gZnJvbSAnLi4vLi4vYXJncy9FbnRpdHlEYXRhUmVzdWx0JztcclxuaW1wb3J0IHsgQmlsbEluZm8gfSBmcm9tICcuLi8uLi8uLi9lbnRpdHkvdHJhY2tpbmcvQmlsbEluZm8nO1xyXG5pbXBvcnQgeyBCaWxsVHJhY2tpbmdTZXR0aW5ncywgQmlsbFRyYWNraW5nRGF0YVNob3duTW9kZSB9IGZyb20gJ0BlZHAtYmlmL2NvbW1vbi1hcGknO1xyXG5pbXBvcnQgeyBmcm9tLCBvZiwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IElCaWxsVHJhY2tlckRhdGFTaG93bk1vZHVsZSB9IGZyb20gJy4uLy4uL2Jhc2UvSUJpbGxUcmFja2VyRGF0YVNob3duTW9kdWxlJztcclxuaW1wb3J0IHsgSUJpbGxUcmFja2VyRGF0YVNob3duQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vYmFzZS9JQmlsbFRyYWNrZXJEYXRhU2hvd25Db21wb25lbnQnO1xyXG5pbXBvcnQgeyBCYXNpY0luZm9Db21wb25lbnQgfSBmcm9tICcuLi9iYXNpYy1pbmZvL2Jhc2ljLWluZm8uY29tcG9uZW50JztcclxuaW1wb3J0IHsgTm90aWZ5U2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbm90aWZ5JztcclxuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW1vZGFsJztcclxuaW1wb3J0IHsgQmlsbFRyYWNrZXJEYXRhSW5mb1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9iaWxsLXRyYWNrZXItZGF0YS1pbmZvLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBCaWxsVHJhY2tlckxvY2FsZVBpcGUgfSBmcm9tICcuLi8uLi9waXBlL2JpbGwtdHJhY2tlci1sb2NhbGUucGlwZSc7XHJcbmltcG9ydCB7IEJpbGxEYXRhSW5mbyB9IGZyb20gJy4uLy4uLy4uL2VudGl0eS90cmFja2luZy9CaWxsRGF0YUluZm8nO1xyXG5cclxuZGVjbGFyZSB2YXIgU3lzdGVtOiBhbnk7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2xpYi1iaWxsLXRyYWNrZXItZGF0YScsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2JpbGwtdHJhY2tlci1kYXRhLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9iaWxsLXRyYWNrZXItZGF0YS5jb21wb25lbnQuY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIEJpbGxUcmFja2VyRGF0YUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcblxyXG4gIEBWaWV3Q2hpbGQoXCJkYXRhUmVnaW9uXCIsIHsgcmVhZDogVmlld0NvbnRhaW5lclJlZiB9KVxyXG4gIGRhdGFSZWdpb246IFZpZXdDb250YWluZXJSZWY7XHJcbiAgZGF0YUluZm9TZXJ2aWNlOiBCaWxsVHJhY2tlckRhdGFJbmZvU2VydmljZTtcclxuICBsb2NhbGVQaXBlOiBCaWxsVHJhY2tlckxvY2FsZVBpcGU7XHJcbiAgbG9jYWxlSWQ6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgbm90aWZ5OiBOb3RpZnlTZXJ2aWNlLFxyXG4gICAgcHVibGljIG1lc3NhZ2VyOiBNZXNzYWdlclNlcnZpY2UsXHJcbiAgICBwdWJsaWMgbG9hZGluZzogTG9hZGluZ1NlcnZpY2UsXHJcbiAgICBwdWJsaWMgbW9kYWw6IEJzTW9kYWxTZXJ2aWNlLFxyXG4gICAgcHVibGljIGRhdGFTZXJ2aWNlOiBCaWxsVHJhY2tlckRhdGFTZXJ2aWNlLFxyXG4gICAgcHVibGljIGluajogSW5qZWN0b3IsXHJcbiAgICBwdWJsaWMgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICBwdWJsaWMgY2RmOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgIHB1YmxpYyBsb2FkZXI6IE5nTW9kdWxlRmFjdG9yeUxvYWRlcixcclxuICAgIEBJbmplY3QoTE9DQUxFX0lEKSBsb2NhbGVJZDogc3RyaW5nLFxyXG4gICkge1xyXG4gICAgdGhpcy5kYXRhSW5mb1NlcnZpY2UgPSBuZXcgQmlsbFRyYWNrZXJEYXRhSW5mb1NlcnZpY2UoKTtcclxuICAgIHRoaXMubG9jYWxlSWQgPSBsb2NhbGVJZCB8fCB0aGlzLmluai5nZXQoTE9DQUxFX0lELCBudWxsKSB8fCAnemgtQ0hTJztcclxuICAgIHRoaXMubG9jYWxlUGlwZSA9IG5ldyBCaWxsVHJhY2tlckxvY2FsZVBpcGUobG9jYWxlSWQpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG5cclxuICB9XHJcblxyXG4gIHB1YmxpYyBjbGVhckRhdGFSZWdpb24oKTogdm9pZCB7XHJcbiAgICB0aGlzLmRhdGFSZWdpb24uY2xlYXIoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzaG93RGF0YUdyaWQoYXJnczogR2V0TWFpbkVudGl0eURhdGFBcmdzLCBiaWxsSW5mbz86IEJpbGxJbmZvLCBiaWxsRGF0YUluZm8/OiBCaWxsRGF0YUluZm8sIHJlcz86IEVudGl0eURhdGFSZXN1bHQpOiB2b2lkIHtcclxuICAgIC8vIOWNleaNrui/vei4qumFjee9rlxyXG4gICAgbGV0IGJ0czogQmlsbFRyYWNraW5nU2V0dGluZ3MgPSBuZXcgQmlsbFRyYWNraW5nU2V0dGluZ3MoKTtcclxuICAgIGlmIChiaWxsSW5mbyAmJiBiaWxsSW5mby5iaWxsVHJhY2tpbmdTZXR0aW5ncykge1xyXG4gICAgICBidHMuTG9hZEZyb21Kc29uKGJpbGxJbmZvLmJpbGxUcmFja2luZ1NldHRpbmdzKTtcclxuICAgIH1cclxuICAgIGlmIChidHMuYmlsbFRyYWNraW5nRGF0YVNob3duTW9kZSA9PSBCaWxsVHJhY2tpbmdEYXRhU2hvd25Nb2RlLkNVU1RPTUZPUk0pIHtcclxuICAgICAgdGhpcy5zaG93Q3VzdG9tRm9ybShhcmdzLCBiaWxsSW5mbywgYmlsbERhdGFJbmZvKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2hvd0dlbmVyYWxGb3JtKGFyZ3MsIGJpbGxJbmZvLCBiaWxsRGF0YUluZm8sIHJlcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmiZPlvIDpgJrnlKjooajljZVcclxuICAgKiBAcGFyYW0gYXJncyBcclxuICAgKiBAcGFyYW0gYmlsbEluZm8gXHJcbiAgICogQHBhcmFtIHJlcyBcclxuICAgKi9cclxuICBwcml2YXRlIHNob3dHZW5lcmFsRm9ybShhcmdzOiBHZXRNYWluRW50aXR5RGF0YUFyZ3MsIGJpbGxJbmZvPzogQmlsbEluZm8sIGJpbGxEYXRhSW5mbz86IEJpbGxEYXRhSW5mbywgcmVzPzogRW50aXR5RGF0YVJlc3VsdCwgbmV3QlRTPzogYm9vbGVhbikge1xyXG4gICAgaWYgKHJlcyAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuY3JlYXRlRGF0YUNvbXAocmVzLCBiaWxsSW5mbywgYmlsbERhdGFJbmZvKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IGwgPSB0aGlzLmxvYWRpbmcuc2hvdyh7IG1lc3NhZ2U6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJsb2FkaW5nXCIpIH0pO1xyXG4gICAgICB0aGlzLmRhdGFTZXJ2aWNlLmdldEVudGl0eURhdGEoYXJncykuc3Vic2NyaWJlKFxyXG4gICAgICAgIChyZXM6IEVudGl0eURhdGFSZXN1bHQpID0+IHtcclxuICAgICAgICAgIHRoaXMuY3JlYXRlRGF0YUNvbXAocmVzLCBiaWxsSW5mbywgYmlsbERhdGFJbmZvKTtcclxuICAgICAgICAgIGwuY2xvc2UoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIChlcnIpID0+IHtcclxuICAgICAgICAgIGwuY2xvc2UoKTtcclxuICAgICAgICAgIHRoaXMubWVzc2FnZXIuZXJyb3IoZXJyLmVycm9yID09IG51bGwgPyBlcnIubWVzc2FnZSA6IChlcnIuZXJyb3IuTWVzc2FnZSB8fCBlcnIuZXJyb3IubWVzc2FnZSB8fCBlcnIubWVzc2FnZSkpO1xyXG4gICAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaJk+W8gOiHquWumuS5ieihqOWNlVxyXG4gICAqIEBwYXJhbSBhcmdzIFxyXG4gICAqIEBwYXJhbSBiaWxsSW5mbyBcclxuICAgKi9cclxuICBwcml2YXRlIHNob3dDdXN0b21Gb3JtKGFyZ3M6IEdldE1haW5FbnRpdHlEYXRhQXJncywgYmlsbEluZm8/OiBCaWxsSW5mbywgYmlsbERhdGFJbmZvPzogQmlsbERhdGFJbmZvKSB7XHJcbiAgICBsZXQgYnRzOiBCaWxsVHJhY2tpbmdTZXR0aW5ncyA9IG5ldyBCaWxsVHJhY2tpbmdTZXR0aW5ncygpO1xyXG4gICAgaWYgKGJpbGxJbmZvICYmIGJpbGxJbmZvLmJpbGxUcmFja2luZ1NldHRpbmdzKSB7XHJcbiAgICAgIGJ0cy5Mb2FkRnJvbUpzb24oYmlsbEluZm8uYmlsbFRyYWNraW5nU2V0dGluZ3MpO1xyXG4gICAgfVxyXG4gICAgbGV0IGZvcm1Db250ZW50ID0gSlNPTi5wYXJzZShidHMuY3VzdG9tRm9ybUNvbnRlbnQpO1xyXG5cclxuICAgIGxldCBtb2R1bGVGJCA9IG51bGw7XHJcbiAgICBpZiAoZm9ybUNvbnRlbnQuZm9ybS5lbmRzV2l0aChcIi5qc1wiKSkge1xyXG4gICAgICAvLyB1cmzmoLzlvI/kuLpbanPot6/lvoRd5pe2XHJcbiAgICAgIG1vZHVsZUYkID0gZnJvbShTeXN0ZW0uaW1wb3J0KGZvcm1Db250ZW50LmZvcm0udG9Mb3dlckNhc2UoKSkudGhlbihtID0+IG0pKS5waXBlKFxyXG4gICAgICAgIHN3aXRjaE1hcChcclxuICAgICAgICAgIChtOiB7IFtrZXk6IHN0cmluZ106IE5nTW9kdWxlRmFjdG9yeTxJQmlsbFRyYWNrZXJEYXRhU2hvd25Nb2R1bGU+IH0pID0+IHtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIG0pIHtcclxuICAgICAgICAgICAgICByZXR1cm4gb2YobVtrZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKVxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gdXJs5qC85byP5Li6W2pz6Lev5b6EI+aooeWdl+WQjV3ml7ZcclxuICAgICAgbW9kdWxlRiQgPSBmcm9tKHRoaXMubG9hZGVyLmxvYWQoZm9ybUNvbnRlbnQuZm9ybSkpO1xyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZUYkLnN1YnNjcmliZShcclxuICAgICAgKG1vZHVsZUZhY3Rvcnk6IE5nTW9kdWxlRmFjdG9yeTxJQmlsbFRyYWNrZXJEYXRhU2hvd25Nb2R1bGU+KSA9PiB7XHJcbiAgICAgICAgY29uc3QgbW9kdWxlUmVmID0gbW9kdWxlRmFjdG9yeS5jcmVhdGUodGhpcy5pbmopO1xyXG5cclxuICAgICAgICBsZXQgY21wUiQgPSBtb2R1bGVSZWYuaW5zdGFuY2UuY3JlYXRlRGF0YVNob3duQ29tcG9uZW50KHRoaXMuaW5qLCBhcmdzKTtcclxuICAgICAgICBpZiAoY21wUiQgaW5zdGFuY2VvZiBDb21wb25lbnRSZWYpIHtcclxuICAgICAgICAgIGNtcFIkID0gb2YoY21wUiQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjbXBSJC5zdWJzY3JpYmUoXHJcbiAgICAgICAgICAoY21wUjogQ29tcG9uZW50UmVmPElCaWxsVHJhY2tlckRhdGFTaG93bkNvbXBvbmVudD4pID0+IHtcclxuICAgICAgICAgICAgLy8g6YeN572u5rua5Yqo5p2hXHJcbiAgICAgICAgICAgIGNvbnN0IGVsdCA9IHRoaXMuZGF0YVJlZ2lvbi5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudCBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgZWx0LnNjcm9sbFRvKHsgbGVmdDogMCB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVJlZ2lvbi5jbGVhcigpO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFSZWdpb24uaW5zZXJ0KGNtcFIuaG9zdFZpZXcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICog5Yib5bu66YCa55So6KGo57uE5Lu2XHJcbiAqIEBwYXJhbSByZXMgXHJcbiAqIEBwYXJhbSBiaWxsSW5mbyBcclxuICovXHJcbiAgY3JlYXRlRGF0YUNvbXAocmVzOiBFbnRpdHlEYXRhUmVzdWx0LCBiaWxsSW5mbzogQmlsbEluZm8sIGJpbGxEYXRhSW5mbzogQmlsbERhdGFJbmZvKSB7XHJcbiAgICBjb25zdCBuZXdCVFMgPSB0aGlzLmRhdGFJbmZvU2VydmljZS5pc05ld0JUUyhiaWxsSW5mby5iaWxsVHJhY2tpbmdTZXR0aW5ncyk7XHJcbiAgICAvLyBpZiAobmV3QlRTKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLmNyZWF0ZU5ld0RhdGFDb21wKHJlcywgYmlsbEluZm8sIGJpbGxEYXRhSW5mbyk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIC8vIOmHjee9rua7muWKqOadoVxyXG4gICAgICBjb25zdCBlbHQgPSB0aGlzLmRhdGFSZWdpb24uZWxlbWVudC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgIGVsdCAmJiBlbHQuc2Nyb2xsVG8oeyBsZWZ0OiAwIH0pO1xyXG5cclxuICAgICAgdGhpcy5kYXRhUmVnaW9uLmNsZWFyKCk7XHJcbiAgICAgIGNvbnN0IGNtZiA9IHRoaXMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KEJhc2ljVGFibGVDb21wb25lbnQpO1xyXG4gICAgICBjb25zdCBjbXBSOiBDb21wb25lbnRSZWY8QmFzaWNUYWJsZUNvbXBvbmVudD4gPSB0aGlzLmRhdGFSZWdpb24uY3JlYXRlQ29tcG9uZW50KGNtZik7XHJcbiAgICAgIGNtcFIuaW5zdGFuY2UuYmlsbEluZm8gPSBiaWxsSW5mbztcclxuICAgICAgY21wUi5pbnN0YW5jZS5pc01haW4gPSB0cnVlO1xyXG4gICAgICBjbXBSLmluc3RhbmNlLnNob3dNYWluVGFibGUocmVzKTtcclxuXHJcbiAgICAgIHRoaXMuZGF0YVJlZ2lvbi5pbnNlcnQoY21wUi5ob3N0Vmlldyk7XHJcbiAgICB9XHJcbiAgICAvLyB9XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAqIOWIm+W7uumAmueUqOihqOe7hOS7tlxyXG4gKiBAcGFyYW0gcmVzIFxyXG4gKiBAcGFyYW0gYmlsbEluZm8gXHJcbiAqL1xyXG4gIGNyZWF0ZU5ld0RhdGFDb21wKHJlczogRW50aXR5RGF0YVJlc3VsdCwgYmlsbEluZm8/OiBCaWxsSW5mbywgYmlsbERhdGFJbmZvPzogQmlsbERhdGFJbmZvKSB7XHJcbiAgICAvLyDph43nva7mu5rliqjmnaFcclxuICAgIGNvbnN0IGVsdCA9IHRoaXMuZGF0YVJlZ2lvbi5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudCBhcyBIVE1MRWxlbWVudDtcclxuICAgIGVsdCAmJiBlbHQuc2Nyb2xsVG8oeyBsZWZ0OiAwIH0pO1xyXG5cclxuICAgIHRoaXMuZGF0YVJlZ2lvbi5jbGVhcigpO1xyXG4gICAgY29uc3QgY21mID0gdGhpcy5jZnIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoQmFzaWNJbmZvQ29tcG9uZW50KTtcclxuICAgIGNvbnN0IGNtcFI6IENvbXBvbmVudFJlZjxCYXNpY0luZm9Db21wb25lbnQ+ID0gdGhpcy5kYXRhUmVnaW9uLmNyZWF0ZUNvbXBvbmVudChjbWYpO1xyXG4gICAgY21wUi5pbnN0YW5jZS5zY2hlbWFUYWJsZSA9IHJlcy5iaWxsU2NoZW1hLm1haW5UYWJsZTtcclxuICAgIGNtcFIuaW5zdGFuY2UuZGF0YVRhYmxlID0gcmVzLmJpbGxEYXRhLm1haW5UYWJsZTtcclxuICAgIGNtcFIuaW5zdGFuY2UuYmlsbEluZm8gPSBiaWxsSW5mbztcclxuICAgIGNtcFIuaW5zdGFuY2UuYmlsbERhdGFJbmZvID0gYmlsbERhdGFJbmZvO1xyXG5cclxuICAgIHRoaXMuZGF0YVJlZ2lvbi5pbnNlcnQoY21wUi5ob3N0Vmlldyk7XHJcbiAgfVxyXG59XHJcbiJdfQ==