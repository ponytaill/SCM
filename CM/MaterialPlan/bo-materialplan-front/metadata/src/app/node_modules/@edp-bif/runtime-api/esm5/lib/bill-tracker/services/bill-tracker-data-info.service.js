/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/services/bill-tracker-data-info.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
import { BpmnModelJsonHelper, DataType } from "@edp-aif/common-api";
import { BillTrackingDataShownMode, BillTrackingSettings, fullPathPrefix } from "@edp-bif/common-api";
var BillTrackerDataInfoService = /** @class */ (function () {
    function BillTrackerDataInfoService() {
    }
    /**
     * 判断BillTrackingSettings是旧版还是新版
     * @param bts
     * @returns
     */
    /**
     * 判断BillTrackingSettings是旧版还是新版
     * @param {?} bts
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.isNewBTS = /**
     * 判断BillTrackingSettings是旧版还是新版
     * @param {?} bts
     * @return {?}
     */
    function (bts) {
        if (typeof bts == "string") {
            /** @type {?} */
            var temp = new BillTrackingSettings();
            temp.LoadFromJson(bts);
            bts = temp;
        }
        return bts != null && bts.version === "1.0";
    };
    /**
     * @param {?} rows
     * @param {?} shownFields
     * @param {?} wholeFields
     * @param {?} idField
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.extractDataRows = /**
     * @param {?} rows
     * @param {?} shownFields
     * @param {?} wholeFields
     * @param {?} idField
     * @return {?}
     */
    function (rows, shownFields, wholeFields, idField) {
        var _this = this;
        var e_1, _a;
        /** @type {?} */
        var frows = [];
        var _loop_1 = function (row) {
            /** @type {?} */
            var obj = {};
            obj[idField] = row.dataId;
            // 先解析其他类型字段
            /** @type {?} */
            var decimalFFs = [];
            shownFields.forEach((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                if (f.dataType == DataType.Decimal) {
                    decimalFFs.push(f);
                }
                else {
                    obj[f.fieldPath] = _this.getFieldValue(f, row.GetFieldMap(), wholeFields);
                }
            }));
            // 再解析浮点型字段
            decimalFFs.forEach((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                obj[f.fieldPath] = _this.getFieldValue(f, row.GetFieldMap(), wholeFields);
            }));
            frows.push(obj);
        };
        try {
            for (var rows_1 = tslib_1.__values(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()) {
                var row = rows_1_1.value;
                _loop_1(row);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (rows_1_1 && !rows_1_1.done && (_a = rows_1.return)) _a.call(rows_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return frows;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.extractCaptionPath = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var s = field.caption;
        /** @type {?} */
        var tmp = (/** @type {?} */ (field));
        while (tmp.attachedField != null) {
            s = tmp.attachedField.caption + "." + s;
            tmp = (/** @type {?} */ (tmp.attachedField));
        }
        return s;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.extractFieldPath = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var s = field.fieldName;
        /** @type {?} */
        var tmp = (/** @type {?} */ (field));
        while (tmp.attachedField != null) {
            s = tmp.attachedField.fieldName + "." + s;
            tmp = (/** @type {?} */ (tmp.attachedField));
        }
        return s;
    };
    /**
     *
     * @param fields 子字段列表
     * @param selectedFields 用户自定义展示字段列表
     * @param showCustomFields 是否按用户自定义字段显示
     * @returns
     */
    /**
     *
     * @param {?} fields 子字段列表
     * @param {?} selectedFields 用户自定义展示字段列表
     * @param {?} showCustomFields 是否按用户自定义字段显示
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.extractFFields = /**
     *
     * @param {?} fields 子字段列表
     * @param {?} selectedFields 用户自定义展示字段列表
     * @param {?} showCustomFields 是否按用户自定义字段显示
     * @return {?}
     */
    function (fields, selectedFields, showCustomFields) {
        var _this = this;
        /** @type {?} */
        var ffields = [];
        fields.forEach((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            f.show = true;
            //枚举或者枚举型单值UDT时默认取Name
            if (f.fieldType == "Enum" || f.fieldType == "EnumSingleUdt") {
                /** @type {?} */
                var tempFPath_1 = _this.extractFieldPath(f);
                /** @type {?} */
                var sf = null;
                if (showCustomFields) {
                    // 如果字段不在已配置字段列表中则跳过
                    sf = selectedFields.find((/**
                     * @param {?} sfield
                     * @return {?}
                     */
                    function (sfield) { return sfield.fieldPath == tempFPath_1; }));
                    if (sf == null) {
                        f.show = false;
                    }
                }
                f = (/** @type {?} */ (_this.setExtendProps(f, sf, tempFPath_1 + ".Name")));
                ffields.push(f);
            }
            else if (f.GetSubFieldList() != null && f.GetSubFieldList().length > 0) {
                ffields.push.apply(ffields, tslib_1.__spread(_this.extractFFields(f.GetSubFieldList(), selectedFields, showCustomFields)));
            }
            else {
                /** @type {?} */
                var tempFPath_2 = _this.extractFieldPath(f);
                /** @type {?} */
                var sf = null;
                if (showCustomFields) {
                    // 如果字段不在已配置字段列表中则跳过
                    sf = selectedFields.find((/**
                     * @param {?} sfield
                     * @return {?}
                     */
                    function (sfield) { return sfield.fieldPath == tempFPath_2; }));
                    if (sf == null) {
                        f.show = false;
                    }
                }
                f = (/** @type {?} */ (_this.setExtendProps(f, sf, tempFPath_2)));
                ffields.push(f);
            }
        }));
        return ffields;
    };
    /**
     * 判定有子数据的条件为：子表可显示，且子表有数据
     */
    /**
     * 判定有子数据的条件为：子表可显示，且子表有数据
     * @param {?} row
     * @param {?} billInfo
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.hasChildData = /**
     * 判定有子数据的条件为：子表可显示，且子表有数据
     * @param {?} row
     * @param {?} billInfo
     * @return {?}
     */
    function (row, billInfo) {
        var e_2, _a;
        /** @type {?} */
        var hasChildData = false;
        /** @type {?} */
        var schema = this.getBillTrackerSchema(billInfo);
        /** @type {?} */
        var children = row.GetChildTableList();
        try {
            for (var children_1 = tslib_1.__values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
                var c = children_1_1.value;
                /** @type {?} */
                var tableShow = false;
                /** @type {?} */
                var hasRows = false;
                /** @type {?} */
                var table = schema && schema[c.tableName];
                if (table != null && table.show != null) {
                    tableShow = table.show;
                }
                else {
                    // 兼容无show属性情形
                    tableShow = true;
                }
                if (c.GetRowList() && c.GetRowList().length > 0) {
                    hasRows = true;
                }
                hasChildData = tableShow && hasRows;
                if (hasChildData == true) {
                    break;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return hasChildData;
    };
    /**
     * @param {?} f
     * @param {?} rdfm
     * @param {?=} wholeFields
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.getFieldValue = /**
     * @param {?} f
     * @param {?} rdfm
     * @param {?=} wholeFields
     * @return {?}
     */
    function (f, rdfm, wholeFields) {
        /** @type {?} */
        var fields = f.fieldPath ? f.fieldPath.split(".") : [f.fieldName];
        /** @type {?} */
        var bdf = fields && rdfm[fields[0]];
        for (var i = 1; bdf != null && i < fields.length; i++) {
            /** @type {?} */
            var temp = bdf.GetSubFieldMap();
            if (temp == null) {
                break;
            }
            bdf = temp[fields[i]];
        }
        /** @type {?} */
        var textValue = bdf ? bdf.GetTextValue() : "";
        if (textValue == null) {
            return null;
        }
        if (f.dataType == DataType.String) {
            if (f.formatInfo != null) {
                /** @type {?} */
                var stringMapFormatter = f.formatInfo.stringMapFormatter;
                if (stringMapFormatter != null) {
                    /** @type {?} */
                    var v = stringMapFormatter[textValue] || textValue;
                    f.fieldValue = v;
                    return v;
                }
                else {
                    f.fieldValue = textValue;
                    return textValue || "";
                }
            }
            else {
                f.fieldValue = textValue;
                return textValue || "";
            }
        }
        else if (f.dataType == DataType.Decimal) {
            /** @type {?} */
            var scale = f.scale;
            if (f.formatInfo != null) {
                if (f.formatInfo.scale != null) {
                    scale = f.formatInfo.scale;
                }
                if (f.formatInfo.enableScaleExpression) {
                    if (f.formatInfo.scaleExpression != null) {
                        /** @type {?} */
                        var scaleField = this.getFieldInFields(wholeFields, f.formatInfo.scaleExpression);
                        /** @type {?} */
                        var tmp = scaleField && parseInt(String(this.getFieldValue(scaleField, rdfm)));
                        // const tmp = parseInt(this.getFieldValueInFieldsWithValue(extactedFields, f.formatInfo.scaleExpression));
                        if (tmp != null && !isNaN(tmp)) {
                            scale = tmp;
                        }
                    }
                }
            }
            f.fieldValue = parseFloat(String(textValue));
            /** @type {?} */
            var dec = parseFloat(String(textValue)).toFixed(scale).toString();
            return dec || "";
        }
        else if (f.dataType == DataType.Boolean) {
            if (textValue == "") {
                f.fieldValue = null;
                return textValue;
            }
            f.fieldValue = (/** @type {?} */ (JSON.parse(textValue)));
            return (/** @type {?} */ (JSON.parse(textValue)));
        }
        else if (f.dataType == DataType.DateTime) {
            /** @type {?} */
            var date = BpmnModelJsonHelper.DateTimeFromString(textValue);
            /** @type {?} */
            var formatter = "yyyy-MM-dd";
            formatter = f.formatInfo && f.formatInfo.dateFormatter || "yyyy-MM-dd";
            // if (f.fieldType == "DateTime") {
            //     formatter = f.formatInfo && f.formatInfo.dateFormatter || "yyyy-MM-dd HH:mm:ss.SSS";
            // } else if (f.fieldType == "Date") {
            //     formatter = f.formatInfo && f.formatInfo.dateFormatter || "yyyy-MM-dd";
            // } else {
            //     formatter = f.formatInfo && f.formatInfo.dateFormatter || "yyyy-MM-dd";
            // }
            f.fieldValue = date;
            return this.dateFormat(date, formatter);
        }
        else {
            f.fieldValue = textValue;
            return textValue || "";
        }
    };
    /**
     * 根据fullPath在字段列表中查找目标字段
     * @param fields
     * @param fullPath
     * @returns
     */
    /**
     * 根据fullPath在字段列表中查找目标字段
     * @param {?} fields
     * @param {?} fullPath
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.getFieldInFields = /**
     * 根据fullPath在字段列表中查找目标字段
     * @param {?} fields
     * @param {?} fullPath
     * @return {?}
     */
    function (fields, fullPath) {
        var e_3, _a;
        /** @type {?} */
        var v = null;
        try {
            for (var fields_1 = tslib_1.__values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                var fv = fields_1_1.value;
                /** @type {?} */
                var curFv = (/** @type {?} */ (fv));
                // 查找根字段
                /** @type {?} */
                var tmpFv = fv;
                while (tmpFv.attachedField) {
                    tmpFv = tmpFv.attachedField;
                }
                /** @type {?} */
                var rootFv = (/** @type {?} */ (tmpFv));
                // 更新fullPath
                curFv.fullPath = fullPathPrefix + rootFv.attachedTable.tableName + "." + curFv.fieldPath;
                // 对比当前字段fullPath与目标fullPath
                if (fullPath == curFv.fullPath) {
                    v = curFv;
                    break;
                }
                // 递归查找子字段
                /** @type {?} */
                var subFlds = curFv.GetSubFieldList();
                if (subFlds && subFlds.length > 0) {
                    v = this.getFieldInFields(subFlds, fullPath);
                    if (v != null) {
                        break;
                    }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return v;
    };
    /**
     * @param {?} fieldsWithValue
     * @param {?} fullPath
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.getFieldValueInFieldsWithValue = /**
     * @param {?} fieldsWithValue
     * @param {?} fullPath
     * @return {?}
     */
    function (fieldsWithValue, fullPath) {
        var e_4, _a;
        /** @type {?} */
        var v = null;
        try {
            for (var fieldsWithValue_1 = tslib_1.__values(fieldsWithValue), fieldsWithValue_1_1 = fieldsWithValue_1.next(); !fieldsWithValue_1_1.done; fieldsWithValue_1_1 = fieldsWithValue_1.next()) {
                var fv = fieldsWithValue_1_1.value;
                while (fv.attachedField) {
                    fv = fv.attachedField;
                }
                /** @type {?} */
                var rootFv = (/** @type {?} */ (fv));
                rootFv.fullPath = fullPathPrefix + rootFv.attachedTable.tableName + "." + rootFv.fieldPath;
                if (fullPath == rootFv.fullPath) {
                    v = rootFv.fieldValue;
                    break;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (fieldsWithValue_1_1 && !fieldsWithValue_1_1.done && (_a = fieldsWithValue_1.return)) _a.call(fieldsWithValue_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return v;
    };
    /**
     * @param {?} billInfo
     * @param {?} schemaTable
     * @param {?} dataTable
     * @param {?=} filterFields
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.getBasicInfoFieldsWithValue = /**
     * @param {?} billInfo
     * @param {?} schemaTable
     * @param {?} dataTable
     * @param {?=} filterFields
     * @return {?}
     */
    function (billInfo, schemaTable, dataTable, filterFields) {
        var _this = this;
        if (filterFields === void 0) { filterFields = true; }
        /** @type {?} */
        var fieldsWithValue = [];
        // 单据追踪配置
        /** @type {?} */
        var bts = new BillTrackingSettings();
        if (billInfo && billInfo.billTrackingSettings) {
            bts.LoadFromJson(billInfo.billTrackingSettings);
        }
        /** @type {?} */
        var schema = this.getBillTrackerSchema(billInfo);
        /** @type {?} */
        var selectedFields = schema && schema[schemaTable.tableName] && schema[schemaTable.tableName].fields;
        selectedFields = selectedFields ? selectedFields : [];
        /** @type {?} */
        var showCustomFields = bts.billTrackingDataShownMode === BillTrackingDataShownMode.CUSTOMFIELD;
        // 所有字段
        /** @type {?} */
        var fs = schemaTable.getFieldList();
        /** @type {?} */
        var r = dataTable.GetRowList()[0];
        // 主表字段
        /** @type {?} */
        var rdfm = r.GetFieldMap();
        // 提取展示字段
        /** @type {?} */
        var ffs = this.extractFFields(fs, selectedFields, showCustomFields);
        // 获取字段值
        // 先解析其他类型字段
        /** @type {?} */
        var decimalFfs = [];
        ffs.forEach((/**
         * @param {?} ff
         * @return {?}
         */
        function (ff) {
            if (ff.dataType == DataType.Decimal) {
                decimalFfs.push(ff);
            }
            else {
                ff.fieldValue = _this.getFieldValue(ff, rdfm);
            }
        }));
        // 再解析浮点数字段
        decimalFfs.forEach((/**
         * @param {?} ff
         * @return {?}
         */
        function (ff) {
            ff.fieldValue = _this.getFieldValue(ff, rdfm, fs);
        }));
        fieldsWithValue.push.apply(fieldsWithValue, tslib_1.__spread(ffs));
        return fieldsWithValue;
    };
    /**
     * @param {?} f
     * @param {?} sf
     * @param {?} fieldPath
     * @param {?=} rdfm
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.setExtendProps = /**
     * @param {?} f
     * @param {?} sf
     * @param {?} fieldPath
     * @param {?=} rdfm
     * @return {?}
     */
    function (f, sf, fieldPath, rdfm) {
        f.captionPath = this.extractCaptionPath(f);
        f.fieldPath = fieldPath;
        if (sf) {
            f.displayName = sf.displayName;
            f.i18nCols = sf.i18nCols;
            f.formatInfo = sf.formatInfo;
            f.order = sf.order;
        }
        if (rdfm) {
            f.fieldValue = this.getFieldValue(f, rdfm);
        }
        return f;
    };
    /**
     * 字段列表按order属性排序
     * @param fieldsWithValue
     * @returns
     */
    /**
     * 字段列表按order属性排序
     * @param {?} fieldsWithValue
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.sortFieldsByOrder = /**
     * 字段列表按order属性排序
     * @param {?} fieldsWithValue
     * @return {?}
     */
    function (fieldsWithValue) {
        return fieldsWithValue.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            if (a.order != null && b.order != null) {
                return a.order - b.order;
            }
            else if (a.order != null && b.order == null) {
                return -1;
            }
            else if (a.order == null && b.order != null) {
                return 1;
            }
            else {
                return 0;
            }
        }));
    };
    /**
     * @param {?} date
     * @param {?} fmt
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.dateFormat = /**
     * @param {?} date
     * @param {?} fmt
     * @return {?}
     */
    function (date, fmt) {
        /** @type {?} */
        var ret;
        /** @type {?} */
        var opt = {
            "y+": date.getUTCFullYear().toString(),
            // 年
            "M+": (date.getUTCMonth() + 1).toString(),
            // 月
            "d+": date.getUTCDate().toString(),
            // 日
            "H+": date.getUTCHours().toString(),
            // 时
            "m+": date.getUTCMinutes().toString(),
            // 分
            "s+": date.getUTCSeconds().toString(),
            // 秒
            "S+": date.getUTCMilliseconds().toString(),
        };
        for (var k in opt) {
            ret = new RegExp("(" + k + ")").exec(fmt);
            if (ret) {
                if (!String.prototype.padStart) {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (this.myPadStart(opt[k], ret[1].length, "0")));
                }
                else {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, "0")));
                }
            }
        }
        return fmt;
    };
    /**
     * @param {?} src
     * @param {?} targetLength
     * @param {?} padString
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.myPadStart = /**
     * @param {?} src
     * @param {?} targetLength
     * @param {?} padString
     * @return {?}
     */
    function (src, targetLength, padString) {
        targetLength = targetLength >> 0; //floor if number or convert non-number to 0;
        padString = String(typeof padString !== 'undefined' ? padString : ' ');
        if (src.length > targetLength) {
            return String(src);
        }
        else {
            targetLength = targetLength - src.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed
            }
            return padString.slice(0, targetLength) + String(src);
        }
    };
    /**
     * 解析字段名称
     * @param f
     * @param langCode
     * @returns
     */
    /**
     * 解析字段名称
     * @param {?} f
     * @param {?=} langCode
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.getFieldLabel = /**
     * 解析字段名称
     * @param {?} f
     * @param {?=} langCode
     * @return {?}
     */
    function (f, langCode) {
        return (langCode && f.i18nCols && f.i18nCols.colI18nValues.displayName &&
            f.i18nCols.colI18nValues.displayName[langCode]) || f.displayName || f.captionPath || f.caption;
    };
    /**
     * 解析表名称
     */
    /**
     * 解析表名称
     * @param {?} billInfo
     * @param {?} schemaTable
     * @param {?=} langCode
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.getTableLabel = /**
     * 解析表名称
     * @param {?} billInfo
     * @param {?} schemaTable
     * @param {?=} langCode
     * @return {?}
     */
    function (billInfo, schemaTable, langCode) {
        /** @type {?} */
        var schema = this.getBillTrackerSchema(billInfo);
        /** @type {?} */
        var table = schema && schema[schemaTable.tableName];
        if (table != null) {
            /** @type {?} */
            var i18nCols = table.i18nCols;
            /** @type {?} */
            var tmp = (langCode && i18nCols && i18nCols.colI18nValues.displayName && i18nCols.colI18nValues.displayName[langCode]) || table.displayName || table.caption || table.code;
            return tmp;
        }
        else {
            return schemaTable.caption;
        }
    };
    /**
     * 获取解析可展示子表
     */
    /**
     * 获取解析可展示子表
     * @param {?} billInfo
     * @param {?} schemaTable
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.getChildTables = /**
     * 获取解析可展示子表
     * @param {?} billInfo
     * @param {?} schemaTable
     * @return {?}
     */
    function (billInfo, schemaTable) {
        /** @type {?} */
        var result = [];
        /** @type {?} */
        var schema = this.getBillTrackerSchema(billInfo);
        /** @type {?} */
        var children = schemaTable.GetChildTableList();
        children && children.forEach((/**
         * @param {?} child
         * @return {?}
         */
        function (child) {
            /** @type {?} */
            var trackerTable = schema && schema[child.tableName];
            if (trackerTable != null && trackerTable.show != null) {
                if (trackerTable.show == true) {
                    child.order = trackerTable.order;
                    result.push(child);
                }
            }
            else {
                // 兼容无show属性情形
                result.push(child);
            }
        }));
        result = this.sortTablesByOrder(result);
        return result;
    };
    /**
     * 表按sort字段排序
     * @param schemaTables
     * @returns
     */
    /**
     * 表按sort字段排序
     * @param {?} schemaTables
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.sortTablesByOrder = /**
     * 表按sort字段排序
     * @param {?} schemaTables
     * @return {?}
     */
    function (schemaTables) {
        return schemaTables.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            if (a.order != null && b.order != null) {
                return a.order - b.order;
            }
            else if (a.order != null && b.order == null) {
                return -1;
            }
            else if (a.order == null && b.order != null) {
                return 1;
            }
            else {
                return 0;
            }
        }));
    };
    /**
     * 解析billTrackerSchema
     * @param billInfo
     */
    /**
     * 解析billTrackerSchema
     * @param {?} billInfo
     * @return {?}
     */
    BillTrackerDataInfoService.prototype.getBillTrackerSchema = /**
     * 解析billTrackerSchema
     * @param {?} billInfo
     * @return {?}
     */
    function (billInfo) {
        /** @type {?} */
        var bts = new BillTrackingSettings();
        if (billInfo && billInfo.billTrackingSettings) {
            bts.LoadFromJson(billInfo.billTrackingSettings);
        }
        /** @type {?} */
        var fieldContent = bts.customFieldContent;
        /** @type {?} */
        var fieldConfig = fieldContent && (typeof fieldContent == "object" ? fieldContent : JSON.parse(fieldContent));
        /** @type {?} */
        var schema = fieldConfig && fieldConfig.schema;
        return schema;
    };
    BillTrackerDataInfoService.decorators = [
        { type: Injectable }
    ];
    return BillTrackerDataInfoService;
}());
export { BillTrackerDataInfoService };
//# sourceMappingURL=data:application/json;base64,