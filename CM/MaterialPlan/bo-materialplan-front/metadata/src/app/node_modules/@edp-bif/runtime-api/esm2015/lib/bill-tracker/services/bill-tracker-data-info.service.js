/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/services/bill-tracker-data-info.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { BpmnModelJsonHelper, DataType } from "@edp-aif/common-api";
import { BillTrackingDataShownMode, BillTrackingSettings, fullPathPrefix } from "@edp-bif/common-api";
export class BillTrackerDataInfoService {
    /**
     * 判断BillTrackingSettings是旧版还是新版
     * @param {?} bts
     * @return {?}
     */
    isNewBTS(bts) {
        if (typeof bts == "string") {
            /** @type {?} */
            const temp = new BillTrackingSettings();
            temp.LoadFromJson(bts);
            bts = temp;
        }
        return bts != null && bts.version === "1.0";
    }
    /**
     * @param {?} rows
     * @param {?} shownFields
     * @param {?} wholeFields
     * @param {?} idField
     * @return {?}
     */
    extractDataRows(rows, shownFields, wholeFields, idField) {
        /** @type {?} */
        let frows = [];
        for (let row of rows) {
            /** @type {?} */
            let obj = {};
            obj[idField] = row.dataId;
            // 先解析其他类型字段
            /** @type {?} */
            const decimalFFs = [];
            shownFields.forEach((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                if (f.dataType == DataType.Decimal) {
                    decimalFFs.push(f);
                }
                else {
                    obj[f.fieldPath] = this.getFieldValue(f, row.GetFieldMap(), wholeFields);
                }
            }));
            // 再解析浮点型字段
            decimalFFs.forEach((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                obj[f.fieldPath] = this.getFieldValue(f, row.GetFieldMap(), wholeFields);
            }));
            frows.push(obj);
        }
        return frows;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    extractCaptionPath(field) {
        /** @type {?} */
        let s = field.caption;
        /** @type {?} */
        let tmp = (/** @type {?} */ (field));
        while (tmp.attachedField != null) {
            s = tmp.attachedField.caption + "." + s;
            tmp = (/** @type {?} */ (tmp.attachedField));
        }
        return s;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    extractFieldPath(field) {
        /** @type {?} */
        let s = field.fieldName;
        /** @type {?} */
        let tmp = (/** @type {?} */ (field));
        while (tmp.attachedField != null) {
            s = tmp.attachedField.fieldName + "." + s;
            tmp = (/** @type {?} */ (tmp.attachedField));
        }
        return s;
    }
    /**
     *
     * @param {?} fields 子字段列表
     * @param {?} selectedFields 用户自定义展示字段列表
     * @param {?} showCustomFields 是否按用户自定义字段显示
     * @return {?}
     */
    extractFFields(fields, selectedFields, showCustomFields) {
        /** @type {?} */
        let ffields = [];
        fields.forEach((/**
         * @param {?} f
         * @return {?}
         */
        f => {
            f.show = true;
            //枚举或者枚举型单值UDT时默认取Name
            if (f.fieldType == "Enum" || f.fieldType == "EnumSingleUdt") {
                /** @type {?} */
                const tempFPath = this.extractFieldPath(f);
                /** @type {?} */
                let sf = null;
                if (showCustomFields) {
                    // 如果字段不在已配置字段列表中则跳过
                    sf = selectedFields.find((/**
                     * @param {?} sfield
                     * @return {?}
                     */
                    (sfield) => sfield.fieldPath == tempFPath));
                    if (sf == null) {
                        f.show = false;
                    }
                }
                f = (/** @type {?} */ (this.setExtendProps(f, sf, tempFPath + ".Name")));
                ffields.push(f);
            }
            else if (f.GetSubFieldList() != null && f.GetSubFieldList().length > 0) {
                ffields.push(...this.extractFFields(f.GetSubFieldList(), selectedFields, showCustomFields));
            }
            else {
                /** @type {?} */
                const tempFPath = this.extractFieldPath(f);
                /** @type {?} */
                let sf = null;
                if (showCustomFields) {
                    // 如果字段不在已配置字段列表中则跳过
                    sf = selectedFields.find((/**
                     * @param {?} sfield
                     * @return {?}
                     */
                    (sfield) => sfield.fieldPath == tempFPath));
                    if (sf == null) {
                        f.show = false;
                    }
                }
                f = (/** @type {?} */ (this.setExtendProps(f, sf, tempFPath)));
                ffields.push(f);
            }
        }));
        return ffields;
    }
    /**
     * 判定有子数据的条件为：子表可显示，且子表有数据
     * @param {?} row
     * @param {?} billInfo
     * @return {?}
     */
    hasChildData(row, billInfo) {
        /** @type {?} */
        let hasChildData = false;
        /** @type {?} */
        const schema = this.getBillTrackerSchema(billInfo);
        /** @type {?} */
        let children = row.GetChildTableList();
        for (let c of children) {
            /** @type {?} */
            let tableShow = false;
            /** @type {?} */
            let hasRows = false;
            /** @type {?} */
            let table = schema && schema[c.tableName];
            if (table != null && table.show != null) {
                tableShow = table.show;
            }
            else {
                // 兼容无show属性情形
                tableShow = true;
            }
            if (c.GetRowList() && c.GetRowList().length > 0) {
                hasRows = true;
            }
            hasChildData = tableShow && hasRows;
            if (hasChildData == true) {
                break;
            }
        }
        return hasChildData;
    }
    /**
     * @param {?} f
     * @param {?} rdfm
     * @param {?=} wholeFields
     * @return {?}
     */
    getFieldValue(f, rdfm, wholeFields) {
        /** @type {?} */
        let fields = f.fieldPath ? f.fieldPath.split(".") : [f.fieldName];
        /** @type {?} */
        let bdf = fields && rdfm[fields[0]];
        for (let i = 1; bdf != null && i < fields.length; i++) {
            /** @type {?} */
            const temp = bdf.GetSubFieldMap();
            if (temp == null) {
                break;
            }
            bdf = temp[fields[i]];
        }
        /** @type {?} */
        const textValue = bdf ? bdf.GetTextValue() : "";
        if (textValue == null) {
            return null;
        }
        if (f.dataType == DataType.String) {
            if (f.formatInfo != null) {
                /** @type {?} */
                const stringMapFormatter = f.formatInfo.stringMapFormatter;
                if (stringMapFormatter != null) {
                    /** @type {?} */
                    const v = stringMapFormatter[textValue] || textValue;
                    f.fieldValue = v;
                    return v;
                }
                else {
                    f.fieldValue = textValue;
                    return textValue || "";
                }
            }
            else {
                f.fieldValue = textValue;
                return textValue || "";
            }
        }
        else if (f.dataType == DataType.Decimal) {
            /** @type {?} */
            let scale = f.scale;
            if (f.formatInfo != null) {
                if (f.formatInfo.scale != null) {
                    scale = f.formatInfo.scale;
                }
                if (f.formatInfo.enableScaleExpression) {
                    if (f.formatInfo.scaleExpression != null) {
                        /** @type {?} */
                        const scaleField = this.getFieldInFields(wholeFields, f.formatInfo.scaleExpression);
                        /** @type {?} */
                        const tmp = scaleField && parseInt(String(this.getFieldValue(scaleField, rdfm)));
                        // const tmp = parseInt(this.getFieldValueInFieldsWithValue(extactedFields, f.formatInfo.scaleExpression));
                        if (tmp != null && !isNaN(tmp)) {
                            scale = tmp;
                        }
                    }
                }
            }
            f.fieldValue = parseFloat(String(textValue));
            /** @type {?} */
            let dec = parseFloat(String(textValue)).toFixed(scale).toString();
            return dec || "";
        }
        else if (f.dataType == DataType.Boolean) {
            if (textValue == "") {
                f.fieldValue = null;
                return textValue;
            }
            f.fieldValue = (/** @type {?} */ (JSON.parse(textValue)));
            return (/** @type {?} */ (JSON.parse(textValue)));
        }
        else if (f.dataType == DataType.DateTime) {
            /** @type {?} */
            let date = BpmnModelJsonHelper.DateTimeFromString(textValue);
            /** @type {?} */
            let formatter = "yyyy-MM-dd";
            formatter = f.formatInfo && f.formatInfo.dateFormatter || "yyyy-MM-dd";
            // if (f.fieldType == "DateTime") {
            //     formatter = f.formatInfo && f.formatInfo.dateFormatter || "yyyy-MM-dd HH:mm:ss.SSS";
            // } else if (f.fieldType == "Date") {
            //     formatter = f.formatInfo && f.formatInfo.dateFormatter || "yyyy-MM-dd";
            // } else {
            //     formatter = f.formatInfo && f.formatInfo.dateFormatter || "yyyy-MM-dd";
            // }
            f.fieldValue = date;
            return this.dateFormat(date, formatter);
        }
        else {
            f.fieldValue = textValue;
            return textValue || "";
        }
    }
    /**
     * 根据fullPath在字段列表中查找目标字段
     * @param {?} fields
     * @param {?} fullPath
     * @return {?}
     */
    getFieldInFields(fields, fullPath) {
        /** @type {?} */
        let v = null;
        for (let fv of fields) {
            /** @type {?} */
            const curFv = (/** @type {?} */ (fv));
            // 查找根字段
            /** @type {?} */
            let tmpFv = fv;
            while (tmpFv.attachedField) {
                tmpFv = tmpFv.attachedField;
            }
            /** @type {?} */
            const rootFv = (/** @type {?} */ (tmpFv));
            // 更新fullPath
            curFv.fullPath = fullPathPrefix + rootFv.attachedTable.tableName + "." + curFv.fieldPath;
            // 对比当前字段fullPath与目标fullPath
            if (fullPath == curFv.fullPath) {
                v = curFv;
                break;
            }
            // 递归查找子字段
            /** @type {?} */
            const subFlds = curFv.GetSubFieldList();
            if (subFlds && subFlds.length > 0) {
                v = this.getFieldInFields(subFlds, fullPath);
                if (v != null) {
                    break;
                }
            }
        }
        return v;
    }
    /**
     * @param {?} fieldsWithValue
     * @param {?} fullPath
     * @return {?}
     */
    getFieldValueInFieldsWithValue(fieldsWithValue, fullPath) {
        /** @type {?} */
        let v = null;
        for (let fv of fieldsWithValue) {
            while (fv.attachedField) {
                fv = fv.attachedField;
            }
            /** @type {?} */
            const rootFv = (/** @type {?} */ (fv));
            rootFv.fullPath = fullPathPrefix + rootFv.attachedTable.tableName + "." + rootFv.fieldPath;
            if (fullPath == rootFv.fullPath) {
                v = rootFv.fieldValue;
                break;
            }
        }
        return v;
    }
    /**
     * @param {?} billInfo
     * @param {?} schemaTable
     * @param {?} dataTable
     * @param {?=} filterFields
     * @return {?}
     */
    getBasicInfoFieldsWithValue(billInfo, schemaTable, dataTable, filterFields = true) {
        /** @type {?} */
        const fieldsWithValue = [];
        // 单据追踪配置
        /** @type {?} */
        let bts = new BillTrackingSettings();
        if (billInfo && billInfo.billTrackingSettings) {
            bts.LoadFromJson(billInfo.billTrackingSettings);
        }
        /** @type {?} */
        const schema = this.getBillTrackerSchema(billInfo);
        /** @type {?} */
        let selectedFields = schema && schema[schemaTable.tableName] && schema[schemaTable.tableName].fields;
        selectedFields = selectedFields ? selectedFields : [];
        /** @type {?} */
        let showCustomFields = bts.billTrackingDataShownMode === BillTrackingDataShownMode.CUSTOMFIELD;
        // 所有字段
        /** @type {?} */
        const fs = schemaTable.getFieldList();
        /** @type {?} */
        const r = dataTable.GetRowList()[0];
        // 主表字段
        /** @type {?} */
        const rdfm = r.GetFieldMap();
        // 提取展示字段
        /** @type {?} */
        const ffs = this.extractFFields(fs, selectedFields, showCustomFields);
        // 获取字段值
        // 先解析其他类型字段
        /** @type {?} */
        const decimalFfs = [];
        ffs.forEach((/**
         * @param {?} ff
         * @return {?}
         */
        ff => {
            if (ff.dataType == DataType.Decimal) {
                decimalFfs.push(ff);
            }
            else {
                ff.fieldValue = this.getFieldValue(ff, rdfm);
            }
        }));
        // 再解析浮点数字段
        decimalFfs.forEach((/**
         * @param {?} ff
         * @return {?}
         */
        ff => {
            ff.fieldValue = this.getFieldValue(ff, rdfm, fs);
        }));
        fieldsWithValue.push(...ffs);
        return fieldsWithValue;
    }
    /**
     * @param {?} f
     * @param {?} sf
     * @param {?} fieldPath
     * @param {?=} rdfm
     * @return {?}
     */
    setExtendProps(f, sf, fieldPath, rdfm) {
        f.captionPath = this.extractCaptionPath(f);
        f.fieldPath = fieldPath;
        if (sf) {
            f.displayName = sf.displayName;
            f.i18nCols = sf.i18nCols;
            f.formatInfo = sf.formatInfo;
            f.order = sf.order;
        }
        if (rdfm) {
            f.fieldValue = this.getFieldValue(f, rdfm);
        }
        return f;
    }
    /**
     * 字段列表按order属性排序
     * @param {?} fieldsWithValue
     * @return {?}
     */
    sortFieldsByOrder(fieldsWithValue) {
        return fieldsWithValue.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            if (a.order != null && b.order != null) {
                return a.order - b.order;
            }
            else if (a.order != null && b.order == null) {
                return -1;
            }
            else if (a.order == null && b.order != null) {
                return 1;
            }
            else {
                return 0;
            }
        }));
    }
    /**
     * @param {?} date
     * @param {?} fmt
     * @return {?}
     */
    dateFormat(date, fmt) {
        /** @type {?} */
        let ret;
        /** @type {?} */
        const opt = {
            "y+": date.getUTCFullYear().toString(),
            // 年
            "M+": (date.getUTCMonth() + 1).toString(),
            // 月
            "d+": date.getUTCDate().toString(),
            // 日
            "H+": date.getUTCHours().toString(),
            // 时
            "m+": date.getUTCMinutes().toString(),
            // 分
            "s+": date.getUTCSeconds().toString(),
            // 秒
            "S+": date.getUTCMilliseconds().toString(),
        };
        for (let k in opt) {
            ret = new RegExp("(" + k + ")").exec(fmt);
            if (ret) {
                if (!String.prototype.padStart) {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (this.myPadStart(opt[k], ret[1].length, "0")));
                }
                else {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, "0")));
                }
            }
        }
        return fmt;
    }
    /**
     * @param {?} src
     * @param {?} targetLength
     * @param {?} padString
     * @return {?}
     */
    myPadStart(src, targetLength, padString) {
        targetLength = targetLength >> 0; //floor if number or convert non-number to 0;
        padString = String(typeof padString !== 'undefined' ? padString : ' ');
        if (src.length > targetLength) {
            return String(src);
        }
        else {
            targetLength = targetLength - src.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed
            }
            return padString.slice(0, targetLength) + String(src);
        }
    }
    /**
     * 解析字段名称
     * @param {?} f
     * @param {?=} langCode
     * @return {?}
     */
    getFieldLabel(f, langCode) {
        return (langCode && f.i18nCols && f.i18nCols.colI18nValues.displayName &&
            f.i18nCols.colI18nValues.displayName[langCode]) || f.displayName || f.captionPath || f.caption;
    }
    /**
     * 解析表名称
     * @param {?} billInfo
     * @param {?} schemaTable
     * @param {?=} langCode
     * @return {?}
     */
    getTableLabel(billInfo, schemaTable, langCode) {
        /** @type {?} */
        const schema = this.getBillTrackerSchema(billInfo);
        /** @type {?} */
        let table = schema && schema[schemaTable.tableName];
        if (table != null) {
            /** @type {?} */
            const i18nCols = table.i18nCols;
            /** @type {?} */
            const tmp = (langCode && i18nCols && i18nCols.colI18nValues.displayName && i18nCols.colI18nValues.displayName[langCode]) || table.displayName || table.caption || table.code;
            return tmp;
        }
        else {
            return schemaTable.caption;
        }
    }
    /**
     * 获取解析可展示子表
     * @param {?} billInfo
     * @param {?} schemaTable
     * @return {?}
     */
    getChildTables(billInfo, schemaTable) {
        /** @type {?} */
        let result = [];
        /** @type {?} */
        const schema = this.getBillTrackerSchema(billInfo);
        /** @type {?} */
        const children = schemaTable.GetChildTableList();
        children && children.forEach((/**
         * @param {?} child
         * @return {?}
         */
        (child) => {
            /** @type {?} */
            let trackerTable = schema && schema[child.tableName];
            if (trackerTable != null && trackerTable.show != null) {
                if (trackerTable.show == true) {
                    child.order = trackerTable.order;
                    result.push(child);
                }
            }
            else {
                // 兼容无show属性情形
                result.push(child);
            }
        }));
        result = this.sortTablesByOrder(result);
        return result;
    }
    /**
     * 表按sort字段排序
     * @param {?} schemaTables
     * @return {?}
     */
    sortTablesByOrder(schemaTables) {
        return schemaTables.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            if (a.order != null && b.order != null) {
                return a.order - b.order;
            }
            else if (a.order != null && b.order == null) {
                return -1;
            }
            else if (a.order == null && b.order != null) {
                return 1;
            }
            else {
                return 0;
            }
        }));
    }
    /**
     * 解析billTrackerSchema
     * @param {?} billInfo
     * @return {?}
     */
    getBillTrackerSchema(billInfo) {
        /** @type {?} */
        let bts = new BillTrackingSettings();
        if (billInfo && billInfo.billTrackingSettings) {
            bts.LoadFromJson(billInfo.billTrackingSettings);
        }
        /** @type {?} */
        let fieldContent = bts.customFieldContent;
        /** @type {?} */
        let fieldConfig = fieldContent && (typeof fieldContent == "object" ? fieldContent : JSON.parse(fieldContent));
        /** @type {?} */
        let schema = fieldConfig && fieldConfig.schema;
        return schema;
    }
}
BillTrackerDataInfoService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,