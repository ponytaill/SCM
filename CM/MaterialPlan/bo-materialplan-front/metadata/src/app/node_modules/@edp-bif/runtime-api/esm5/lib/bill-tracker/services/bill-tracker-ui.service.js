/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/services/bill-tracker-ui.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector, ComponentFactoryResolver, ReflectiveInjector, Inject, LOCALE_ID } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { BillTrackerDataService } from './bill-tracker-data.service';
import { BillTrackerComponent } from '../components/bill-tracker/bill-tracker.component';
import { BillTrackerArgs } from '../config/bill-tracker-args';
import { GetDownBillsInfoArgs } from '../../entity/tracking/GetDownBillsInfoArgs';
import { BillTrackerLocalePipe } from '../pipe/bill-tracker-locale.pipe';
import { of } from 'rxjs';
import { switchMap, catchError } from 'rxjs/operators';
import { MessagerService } from '@farris/ui-messager';
import { LoadingService } from '@farris/ui-loading';
import { FrameworkService, AppType } from '@gsp-sys/rtf-common';
import { BillTrackerConstant } from '../config/bill-tracker-constant';
import { BillTrackerGraphOptions } from '../config/bill-tracker-graph-options';
import { BillTrackerGridOptions } from '../config/bill-tracker-grid-options';
var BillTrackerUiService = /** @class */ (function () {
    function BillTrackerUiService(frameworkService, messager, loading, localeId, dataService, modalService, cfr, injector) {
        this.frameworkService = frameworkService;
        this.messager = messager;
        this.loading = loading;
        this.dataService = dataService;
        this.modalService = modalService;
        this.cfr = cfr;
        this.injector = injector;
        /**
         * 内置模态框配置
         */
        this.defaultModalOptions = {
            title: null,
            width: 1100,
            height: 480,
            buttons: null,
            showButtons: null,
        };
        this.localePipe = new BillTrackerLocalePipe(localeId);
    }
    /**
     * 打开单据追踪弹窗
     * todo: spa模式下，弹窗在body中，位于最上层，打开联查时会盖住新tab页，此问题待解决
     * @param args 单据追踪参数
     * @param maximized 是否最大化弹窗
     * @param modalOptions 弹窗配置
     * @param graphOptions 追踪图配置
     * @param gridOptions 数据表配置
     */
    /**
     * 打开单据追踪弹窗
     * todo: spa模式下，弹窗在body中，位于最上层，打开联查时会盖住新tab页，此问题待解决
     * @param {?} args 单据追踪参数
     * @param {?=} maximized 是否最大化弹窗
     * @param {?=} modalOptions 弹窗配置
     * @param {?=} graphOptions 追踪图配置
     * @param {?=} gridOptions 数据表配置
     * @return {?}
     */
    BillTrackerUiService.prototype.openDefaultBillTrackerDialog = /**
     * 打开单据追踪弹窗
     * todo: spa模式下，弹窗在body中，位于最上层，打开联查时会盖住新tab页，此问题待解决
     * @param {?} args 单据追踪参数
     * @param {?=} maximized 是否最大化弹窗
     * @param {?=} modalOptions 弹窗配置
     * @param {?=} graphOptions 追踪图配置
     * @param {?=} gridOptions 数据表配置
     * @return {?}
     */
    function (args, maximized, modalOptions, graphOptions, gridOptions) {
        var _this = this;
        if (maximized === void 0) { maximized = true; }
        if (typeof modalOptions == "string") {
            if (modalOptions == "") {
                this.messager.info(this.localePipe.transform("modalOptionsCantBeEmpty"));
                return of(null);
            }
            modalOptions = JSON.parse(modalOptions);
        }
        /** @type {?} */
        var modalOpts = {
            title: this.localePipe.transform("billTracker")
        };
        modalOpts = Object.assign(modalOpts, this.defaultModalOptions, modalOptions);
        if (typeof graphOptions == "string") {
            if (graphOptions != "") {
                graphOptions = JSON.parse(graphOptions);
            }
            else {
                graphOptions = null;
            }
        }
        if (typeof gridOptions == "string") {
            if (gridOptions != "") {
                gridOptions = JSON.parse(gridOptions);
            }
            else {
                gridOptions = null;
            }
        }
        /** @type {?} */
        var downArgs = new GetDownBillsInfoArgs();
        downArgs.billDataId = args.billDataId;
        downArgs.documentTypeId = args.documentTypeId;
        downArgs.bizKind = args.bizKind;
        downArgs.bizType = args.bizType;
        downArgs.billChildInfos = args.billChildInfos;
        downArgs.curYear = args.curYear;
        this.loading.show({ message: this.localePipe.transform("loading") });
        return this.dataService.canTracking(downArgs).pipe(switchMap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (!res.canDownTracking && !res.canUpTracking) {
                _this.messager.info(_this.localePipe.transform("noAssoBill"));
                _this.loading.close();
                return of(null);
            }
            /** @type {?} */
            var billTrackerArgs = new BillTrackerArgs();
            billTrackerArgs.canTrackingResult = res;
            billTrackerArgs.getBillsInfoArgs = args;
            /** @type {?} */
            var graphOpt = new BillTrackerGraphOptions();
            graphOpt = Object.assign(graphOpt, graphOptions);
            billTrackerArgs.graphOptions = graphOpt;
            /** @type {?} */
            var gridOpt = new BillTrackerGridOptions();
            gridOpt = Object.assign(gridOpt, gridOptions);
            billTrackerArgs.gridOptions = gridOpt;
            /** @type {?} */
            var cmpR = _this.createBillTrackerComponent(billTrackerArgs);
            _this.loading.close();
            /** @type {?} */
            var modalRef = _this.modalService.show(cmpR, modalOpts);
            if (maximized) {
                modalRef.dialog.instance.maxDialog();
            }
            cmpR.instance.setModalRef(modalRef);
            return of(cmpR.instance);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.loading.close();
            //todo 确定异常结构, 目前采用兼容取值方式
            _this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            throw err;
        })));
    };
    /**
     * 打开单据追踪应用
     * @param args 单据追踪参数
     * @param graphOptions 追踪图配置
     * @param gridOptions 数据表配置
     */
    /**
     * 打开单据追踪应用
     * @param {?} args 单据追踪参数
     * @param {?=} graphOptions 追踪图配置
     * @param {?=} gridOptions 数据表配置
     * @return {?}
     */
    BillTrackerUiService.prototype.openDefaultBillTrackerApp = /**
     * 打开单据追踪应用
     * @param {?} args 单据追踪参数
     * @param {?=} graphOptions 追踪图配置
     * @param {?=} gridOptions 数据表配置
     * @return {?}
     */
    function (args, graphOptions, gridOptions) {
        var _this = this;
        if (typeof graphOptions == "string") {
            if (graphOptions == "") {
                this.messager.info(this.localePipe.transform("modalOptionsCantBeEmpty"));
                return;
            }
            graphOptions = JSON.parse(graphOptions);
        }
        if (typeof gridOptions == "string") {
            if (gridOptions == "") {
                this.messager.info(this.localePipe.transform("modalOptionsCantBeEmpty"));
                return;
            }
            gridOptions = JSON.parse(gridOptions);
        }
        /** @type {?} */
        var downArgs = new GetDownBillsInfoArgs();
        downArgs.documentTypeId = args.documentTypeId;
        downArgs.billDataId = args.billDataId;
        downArgs.bizKind = args.bizKind;
        downArgs.bizType = args.bizType;
        downArgs.billChildInfos = args.billChildInfos;
        downArgs.curYear = args.curYear;
        this.loading.show({ message: this.localePipe.transform("loading") });
        this.dataService.canTracking(downArgs).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (!res.canDownTracking && !res.canUpTracking) {
                _this.messager.info(_this.localePipe.transform("noAssoBill"));
                _this.loading.close();
                return;
            }
            /** @type {?} */
            var billTrackerArgs = new BillTrackerArgs();
            billTrackerArgs.canTrackingResult = res;
            billTrackerArgs.getBillsInfoArgs = args;
            /** @type {?} */
            var graphOpt = new BillTrackerGraphOptions();
            graphOpt = Object.assign(graphOpt, graphOptions);
            billTrackerArgs.graphOptions = graphOpt;
            /** @type {?} */
            var gridOpt = new BillTrackerGridOptions();
            gridOpt = Object.assign(gridOpt, gridOptions);
            billTrackerArgs.gridOptions = gridOpt;
            /** @type {?} */
            var opt = {
                appId: BillTrackerConstant.DEFAULT_APP_ID,
                appEntrance: BillTrackerConstant.DEFAULT_APP_ENTRANCE,
                funcId: BillTrackerConstant.DEFAULT_FUNC_ID,
                tabId: "billTracker" + Date.now(),
                tabName: _this.localePipe.transform("billTracker"),
                appType: AppType.App,
                entityParams: billTrackerArgs,
                queryStringParams: _this.buildQueryMap(billTrackerArgs),
                isReload: undefined,
            };
            _this.frameworkService.openMenu(opt);
            _this.loading.close();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.loading.close();
            //todo 确定异常结构, 目前采用兼容取值方式
            _this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            throw err;
        }));
    };
    /**
     * 创建单据追踪组件
     * @param billTrackerArgs 单据追踪参数
     * @param cfr ComponentFactoryResolver
     * @param injector Injector
     * @param custProviders 自定义Provider
     * @returns
     */
    /**
     * 创建单据追踪组件
     * @param {?} billTrackerArgs 单据追踪参数
     * @param {?=} cfr ComponentFactoryResolver
     * @param {?=} injector Injector
     * @param {?=} custProviders 自定义Provider
     * @return {?}
     */
    BillTrackerUiService.prototype.createBillTrackerComponent = /**
     * 创建单据追踪组件
     * @param {?} billTrackerArgs 单据追踪参数
     * @param {?=} cfr ComponentFactoryResolver
     * @param {?=} injector Injector
     * @param {?=} custProviders 自定义Provider
     * @return {?}
     */
    function (billTrackerArgs, cfr, injector, custProviders) {
        cfr = cfr == null ? this.cfr : cfr;
        injector = injector == null ? this.injector : injector;
        custProviders = custProviders == null || Array.isArray(custProviders) == false ? [] : custProviders;
        /** @type {?} */
        var inj = ReflectiveInjector.resolveAndCreate(tslib_1.__spread([
            { provide: BillTrackerArgs, useValue: billTrackerArgs }
        ], custProviders), injector);
        /** @type {?} */
        var cmpF = cfr.resolveComponentFactory(BillTrackerComponent);
        /** @type {?} */
        var cmpR = cmpF.create(inj);
        return cmpR;
    };
    /**
     * 能否继续追踪
     * @param args
     * @returns
     */
    /**
     * 能否继续追踪
     * @param {?} args
     * @return {?}
     */
    BillTrackerUiService.prototype.canTracking = /**
     * 能否继续追踪
     * @param {?} args
     * @return {?}
     */
    function (args) {
        return this.dataService.canTracking(args);
    };
    /**
     * 获取下游单据信息
     * @param args
     * @returns
     */
    /**
     * 获取下游单据信息
     * @param {?} args
     * @return {?}
     */
    BillTrackerUiService.prototype.getDownBillsInfo = /**
     * 获取下游单据信息
     * @param {?} args
     * @return {?}
     */
    function (args) {
        return this.dataService.getDownBillsInfo(args);
    };
    /**
     * 获取上游单据信息
     * @param args
     * @returns
     */
    /**
     * 获取上游单据信息
     * @param {?} args
     * @return {?}
     */
    BillTrackerUiService.prototype.getUpBillsInfo = /**
     * 获取上游单据信息
     * @param {?} args
     * @return {?}
     */
    function (args) {
        return this.dataService.getUpBillsInfo(args);
    };
    /**
     * 查询实体数据
     * @param args
     * @returns
     */
    /**
     * 查询实体数据
     * @param {?} args
     * @return {?}
     */
    BillTrackerUiService.prototype.getEntityData = /**
     * 查询实体数据
     * @param {?} args
     * @return {?}
     */
    function (args) {
        return this.dataService.getEntityData(args);
    };
    /**
     * @private
     * @param {?} billTrackerArgs
     * @return {?}
     */
    BillTrackerUiService.prototype.buildQueryMap = /**
     * @private
     * @param {?} billTrackerArgs
     * @return {?}
     */
    function (billTrackerArgs) {
        /** @type {?} */
        var map = new Map();
        for (var key in billTrackerArgs) {
            /** @type {?} */
            var value = billTrackerArgs[key];
            if (typeof value == "object") {
                value = value && JSON.stringify(value);
            }
            map.set(key, value);
        }
        return map;
    };
    BillTrackerUiService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BillTrackerUiService.ctorParameters = function () { return [
        { type: FrameworkService },
        { type: MessagerService },
        { type: LoadingService },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: BillTrackerDataService },
        { type: BsModalService },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    return BillTrackerUiService;
}());
export { BillTrackerUiService };
if (false) {
    /**
     * 内置模态框配置
     * @type {?}
     */
    BillTrackerUiService.prototype.defaultModalOptions;
    /** @type {?} */
    BillTrackerUiService.prototype.localePipe;
    /** @type {?} */
    BillTrackerUiService.prototype.frameworkService;
    /** @type {?} */
    BillTrackerUiService.prototype.messager;
    /** @type {?} */
    BillTrackerUiService.prototype.loading;
    /** @type {?} */
    BillTrackerUiService.prototype.dataService;
    /** @type {?} */
    BillTrackerUiService.prototype.modalService;
    /** @type {?} */
    BillTrackerUiService.prototype.cfr;
    /** @type {?} */
    BillTrackerUiService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbC10cmFja2VyLXVpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWJpZi9ydW50aW1lLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9iaWxsLXRyYWNrZXIvc2VydmljZXMvYmlsbC10cmFja2VyLXVpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsd0JBQXdCLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0SCxPQUFPLEVBQUUsY0FBYyxFQUFnQixNQUFNLGtCQUFrQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1EQUFtRCxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUU5RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNsRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN6RSxPQUFPLEVBQUUsRUFBRSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXRELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQWMsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDNUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFdEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDL0UsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFPN0U7SUFlSSw4QkFDVyxnQkFBa0MsRUFDbEMsUUFBeUIsRUFDekIsT0FBdUIsRUFDWCxRQUFnQixFQUM1QixXQUFtQyxFQUNuQyxZQUE0QixFQUM1QixHQUE2QixFQUM3QixRQUFrQjtRQVBsQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBQ3pCLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBRXZCLGdCQUFXLEdBQVgsV0FBVyxDQUF3QjtRQUNuQyxpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7UUFDNUIsUUFBRyxHQUFILEdBQUcsQ0FBMEI7UUFDN0IsYUFBUSxHQUFSLFFBQVEsQ0FBVTs7OztRQWxCYix3QkFBbUIsR0FBaUI7WUFDaEQsS0FBSyxFQUFFLElBQUk7WUFDWCxLQUFLLEVBQUUsSUFBSTtZQUNYLE1BQU0sRUFBRSxHQUFHO1lBQ1gsT0FBTyxFQUFFLElBQUk7WUFDYixXQUFXLEVBQUUsSUFBSTtTQUNwQixDQUFDO1FBY0UsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRDs7Ozs7Ozs7T0FRRzs7Ozs7Ozs7Ozs7SUFDSSwyREFBNEI7Ozs7Ozs7Ozs7SUFBbkMsVUFBb0MsSUFBc0IsRUFBRSxTQUF5QixFQUFFLFlBQTJCLEVBQUUsWUFBc0MsRUFBRSxXQUFvQztRQUFoTSxpQkFpRkM7UUFqRjJELDBCQUFBLEVBQUEsZ0JBQXlCO1FBQ2pGLElBQUksT0FBTyxZQUFZLElBQUksUUFBUSxFQUFFO1lBQ2pDLElBQUksWUFBWSxJQUFJLEVBQUUsRUFBRTtnQkFDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDO2dCQUN6RSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNuQjtZQUNELFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzNDOztZQUVHLFNBQVMsR0FBaUI7WUFDMUIsS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQztTQUNsRDtRQUNELFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFFN0UsSUFBSSxPQUFPLFlBQVksSUFBSSxRQUFRLEVBQUU7WUFDakMsSUFBSSxZQUFZLElBQUksRUFBRSxFQUFFO2dCQUNwQixZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUMzQztpQkFBTTtnQkFDSCxZQUFZLEdBQUcsSUFBSSxDQUFDO2FBQ3ZCO1NBQ0o7UUFFRCxJQUFJLE9BQU8sV0FBVyxJQUFJLFFBQVEsRUFBRTtZQUNoQyxJQUFJLFdBQVcsSUFBSSxFQUFFLEVBQUU7Z0JBQ25CLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3pDO2lCQUFNO2dCQUNILFdBQVcsR0FBRyxJQUFJLENBQUM7YUFDdEI7U0FDSjs7WUFFSyxRQUFRLEdBQUcsSUFBSSxvQkFBb0IsRUFBRTtRQUMzQyxRQUFRLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDdEMsUUFBUSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQzlDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNoQyxRQUFRLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDaEMsUUFBUSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQzlDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUVoQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckUsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQzlDLFNBQVM7Ozs7UUFDTCxVQUFDLEdBQXNCO1lBQ25CLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRTtnQkFDNUMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztnQkFDNUQsS0FBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDckIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDbkI7O2dCQUVLLGVBQWUsR0FBb0IsSUFBSSxlQUFlLEVBQUU7WUFDOUQsZUFBZSxDQUFDLGlCQUFpQixHQUFHLEdBQUcsQ0FBQztZQUN4QyxlQUFlLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDOztnQkFFcEMsUUFBUSxHQUFHLElBQUksdUJBQXVCLEVBQUU7WUFDNUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ2pELGVBQWUsQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDOztnQkFFcEMsT0FBTyxHQUFHLElBQUksc0JBQXNCLEVBQUU7WUFDMUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQzlDLGVBQWUsQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDOztnQkFFaEMsSUFBSSxHQUFHLEtBQUksQ0FBQywwQkFBMEIsQ0FBQyxlQUFlLENBQUM7WUFFN0QsS0FBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7Z0JBQ2YsUUFBUSxHQUFHLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUM7WUFDeEQsSUFBSSxTQUFTLEVBQUU7Z0JBQ1gsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLENBQUM7YUFDeEM7WUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUVwQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0IsQ0FBQyxFQUNKLEVBQ0QsVUFBVTs7OztRQUNOLFVBQUMsR0FBRztZQUNBLEtBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDckIseUJBQXlCO1lBQ3pCLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQy9HLE1BQU0sR0FBRyxDQUFDO1FBQ2QsQ0FBQyxFQUNKLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRDs7Ozs7T0FLRzs7Ozs7Ozs7SUFDSSx3REFBeUI7Ozs7Ozs7SUFBaEMsVUFBaUMsSUFBc0IsRUFBRSxZQUFzQyxFQUFFLFdBQW9DO1FBQXJJLGlCQW9FQztRQW5FRyxJQUFJLE9BQU8sWUFBWSxJQUFJLFFBQVEsRUFBRTtZQUNqQyxJQUFJLFlBQVksSUFBSSxFQUFFLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQztnQkFDekUsT0FBTzthQUNWO1lBQ0QsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDM0M7UUFFRCxJQUFJLE9BQU8sV0FBVyxJQUFJLFFBQVEsRUFBRTtZQUNoQyxJQUFJLFdBQVcsSUFBSSxFQUFFLEVBQUU7Z0JBQ25CLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQztnQkFDekUsT0FBTzthQUNWO1lBQ0QsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDekM7O1lBRUssUUFBUSxHQUFHLElBQUksb0JBQW9CLEVBQUU7UUFDM0MsUUFBUSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQzlDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN0QyxRQUFRLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDaEMsUUFBUSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ2hDLFFBQVEsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUM5QyxRQUFRLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFFaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVM7Ozs7UUFDNUMsVUFBQyxHQUFzQjtZQUNuQixJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUU7Z0JBQzVDLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7Z0JBQzVELEtBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ3JCLE9BQU87YUFDVjs7Z0JBRUssZUFBZSxHQUFvQixJQUFJLGVBQWUsRUFBRTtZQUM5RCxlQUFlLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxDQUFDO1lBQ3hDLGVBQWUsQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7O2dCQUVwQyxRQUFRLEdBQUcsSUFBSSx1QkFBdUIsRUFBRTtZQUM1QyxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDakQsZUFBZSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUM7O2dCQUVwQyxPQUFPLEdBQUcsSUFBSSxzQkFBc0IsRUFBRTtZQUMxQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDOUMsZUFBZSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUM7O2dCQUVoQyxHQUFHLEdBQWU7Z0JBQ3BCLEtBQUssRUFBRSxtQkFBbUIsQ0FBQyxjQUFjO2dCQUN6QyxXQUFXLEVBQUUsbUJBQW1CLENBQUMsb0JBQW9CO2dCQUNyRCxNQUFNLEVBQUUsbUJBQW1CLENBQUMsZUFBZTtnQkFDM0MsS0FBSyxFQUFFLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUNqQyxPQUFPLEVBQUUsS0FBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO2dCQUNqRCxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUc7Z0JBQ3BCLFlBQVksRUFBRSxlQUFlO2dCQUM3QixpQkFBaUIsRUFBRSxLQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQztnQkFDdEQsUUFBUSxFQUFFLFNBQVM7YUFDdEI7WUFFRCxLQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BDLEtBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDekIsQ0FBQzs7OztRQUNELFVBQUMsR0FBRztZQUNBLEtBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDckIseUJBQXlCO1lBQ3pCLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQy9HLE1BQU0sR0FBRyxDQUFDO1FBQ2QsQ0FBQyxFQUNKLENBQUM7SUFDTixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRzs7Ozs7Ozs7O0lBQ0kseURBQTBCOzs7Ozs7OztJQUFqQyxVQUFrQyxlQUFnQyxFQUFFLEdBQThCLEVBQUUsUUFBbUIsRUFBRSxhQUFxQjtRQUMxSSxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ25DLFFBQVEsR0FBRyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDdkQsYUFBYSxHQUFHLGFBQWEsSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDOztZQUU5RixHQUFHLEdBQUcsa0JBQWtCLENBQUMsZ0JBQWdCO1lBQzNDLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFO1dBQ3BELGFBQWEsR0FDakIsUUFBUSxDQUFDOztZQUNOLElBQUksR0FBRyxHQUFHLENBQUMsdUJBQXVCLENBQUMsb0JBQW9CLENBQUM7O1lBQ3hELElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUM3QixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQ7Ozs7T0FJRzs7Ozs7O0lBQ0ksMENBQVc7Ozs7O0lBQWxCLFVBQW1CLElBQTBCO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVEOzs7O09BSUc7Ozs7OztJQUNJLCtDQUFnQjs7Ozs7SUFBdkIsVUFBd0IsSUFBMEI7UUFDOUMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7OztPQUlHOzs7Ozs7SUFDSSw2Q0FBYzs7Ozs7SUFBckIsVUFBc0IsSUFBd0I7UUFDMUMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7Ozs7T0FJRzs7Ozs7O0lBQ0ksNENBQWE7Ozs7O0lBQXBCLFVBQXFCLElBQTJCO1FBQzVDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEQsQ0FBQzs7Ozs7O0lBRU8sNENBQWE7Ozs7O0lBQXJCLFVBQXNCLGVBQWdDOztZQUM5QyxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUU7UUFDbkIsS0FBSyxJQUFJLEdBQUcsSUFBSSxlQUFlLEVBQUU7O2dCQUN6QixLQUFLLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQztZQUNoQyxJQUFJLE9BQU8sS0FBSyxJQUFJLFFBQVEsRUFBRTtnQkFDMUIsS0FBSyxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzFDO1lBQ0QsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDdkI7UUFFRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7O2dCQXpRSixVQUFVOzs7O2dCQVhGLGdCQUFnQjtnQkFIaEIsZUFBZTtnQkFFZixjQUFjOzZDQStCZCxNQUFNLFNBQUMsU0FBUztnQkF6Q2hCLHNCQUFzQjtnQkFEdEIsY0FBYztnQkFEUSx3QkFBd0I7Z0JBQWxDLFFBQVE7O0lBa1M3QiwyQkFBQztDQUFBLEFBMVFELElBMFFDO1NBelFZLG9CQUFvQjs7Ozs7O0lBSTdCLG1EQU1FOztJQUVGLDBDQUFrQzs7SUFHOUIsZ0RBQXlDOztJQUN6Qyx3Q0FBZ0M7O0lBQ2hDLHVDQUE4Qjs7SUFFOUIsMkNBQTBDOztJQUMxQyw0Q0FBbUM7O0lBQ25DLG1DQUFvQzs7SUFDcEMsd0NBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgUmVmbGVjdGl2ZUluamVjdG9yLCBJbmplY3QsIExPQ0FMRV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSwgTW9kYWxPcHRpb25zIH0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbCc7XHJcbmltcG9ydCB7IEJpbGxUcmFja2VyRGF0YVNlcnZpY2UgfSBmcm9tICcuL2JpbGwtdHJhY2tlci1kYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBCaWxsVHJhY2tlckNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvYmlsbC10cmFja2VyL2JpbGwtdHJhY2tlci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBCaWxsVHJhY2tlckFyZ3MgfSBmcm9tICcuLi9jb25maWcvYmlsbC10cmFja2VyLWFyZ3MnO1xyXG5pbXBvcnQgeyBHZXRCaWxsc0luZm9BcmdzIH0gZnJvbSAnLi4vLi4vZW50aXR5L3RyYWNraW5nL0dldEJpbGxzSW5mb0FyZ3MnO1xyXG5pbXBvcnQgeyBHZXREb3duQmlsbHNJbmZvQXJncyB9IGZyb20gJy4uLy4uL2VudGl0eS90cmFja2luZy9HZXREb3duQmlsbHNJbmZvQXJncyc7XHJcbmltcG9ydCB7IEJpbGxUcmFja2VyTG9jYWxlUGlwZSB9IGZyb20gJy4uL3BpcGUvYmlsbC10cmFja2VyLWxvY2FsZS5waXBlJztcclxuaW1wb3J0IHsgb2YsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgc3dpdGNoTWFwLCBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBNZXNzYWdlclNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW1lc3NhZ2VyJztcclxuaW1wb3J0IHsgQ2FuVHJhY2tpbmdSZXN1bHQgfSBmcm9tICcuLi9hcmdzL0NhblRyYWNraW5nUmVzdWx0JztcclxuaW1wb3J0IHsgTG9hZGluZ1NlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWxvYWRpbmcnO1xyXG5pbXBvcnQgeyBGcmFtZXdvcmtTZXJ2aWNlLCBBcHBPcHRpb25zLCBBcHBUeXBlIH0gZnJvbSAnQGdzcC1zeXMvcnRmLWNvbW1vbic7XHJcbmltcG9ydCB7IEJpbGxUcmFja2VyQ29uc3RhbnQgfSBmcm9tICcuLi9jb25maWcvYmlsbC10cmFja2VyLWNvbnN0YW50JztcclxuaW1wb3J0IHsgSUJpbGxUcmFja2VyVWlTZXJ2aWNlIH0gZnJvbSAnLi4vYmFzZS9JQmlsbFRyYWNrZXJVaVNlcnZpY2UnO1xyXG5pbXBvcnQgeyBCaWxsVHJhY2tlckdyYXBoT3B0aW9ucyB9IGZyb20gJy4uL2NvbmZpZy9iaWxsLXRyYWNrZXItZ3JhcGgtb3B0aW9ucyc7XHJcbmltcG9ydCB7IEJpbGxUcmFja2VyR3JpZE9wdGlvbnMgfSBmcm9tICcuLi9jb25maWcvYmlsbC10cmFja2VyLWdyaWQtb3B0aW9ucyc7XHJcbmltcG9ydCB7IEdldE1haW5FbnRpdHlEYXRhQXJncyB9IGZyb20gJy4uL2FyZ3MvR2V0TWFpbkVudGl0eURhdGFBcmdzJztcclxuaW1wb3J0IHsgRW50aXR5RGF0YVJlc3VsdCB9IGZyb20gJy4uL2FyZ3MvRW50aXR5RGF0YVJlc3VsdCc7XHJcbmltcG9ydCB7IEdldFVwQmlsbHNJbmZvQXJncyB9IGZyb20gJy4uLy4uL2VudGl0eS90cmFja2luZy9HZXRVcEJpbGxzSW5mb0FyZ3MnO1xyXG5pbXBvcnQgeyBVcEJpbGxJbmZvUmVzdWx0IH0gZnJvbSAnLi4vYXJncy9VcEJpbGxJbmZvUmVzdWx0JztcclxuaW1wb3J0IHsgRG93bkJpbGxJbmZvUmVzdWx0IH0gZnJvbSAnLi4vYXJncy9Eb3duQmlsbEluZm9SZXN1bHQnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQmlsbFRyYWNrZXJVaVNlcnZpY2UgaW1wbGVtZW50cyBJQmlsbFRyYWNrZXJVaVNlcnZpY2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiDlhoXnva7mqKHmgIHmoYbphY3nva5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGRlZmF1bHRNb2RhbE9wdGlvbnM6IE1vZGFsT3B0aW9ucyA9IHtcclxuICAgICAgICB0aXRsZTogbnVsbCxcclxuICAgICAgICB3aWR0aDogMTEwMCxcclxuICAgICAgICBoZWlnaHQ6IDQ4MCxcclxuICAgICAgICBidXR0b25zOiBudWxsLFxyXG4gICAgICAgIHNob3dCdXR0b25zOiBudWxsLFxyXG4gICAgfTtcclxuXHJcbiAgICBsb2NhbGVQaXBlOiBCaWxsVHJhY2tlckxvY2FsZVBpcGU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHVibGljIGZyYW1ld29ya1NlcnZpY2U6IEZyYW1ld29ya1NlcnZpY2UsXHJcbiAgICAgICAgcHVibGljIG1lc3NhZ2VyOiBNZXNzYWdlclNlcnZpY2UsXHJcbiAgICAgICAgcHVibGljIGxvYWRpbmc6IExvYWRpbmdTZXJ2aWNlLFxyXG4gICAgICAgIEBJbmplY3QoTE9DQUxFX0lEKSBsb2NhbGVJZDogc3RyaW5nLFxyXG4gICAgICAgIHB1YmxpYyBkYXRhU2VydmljZTogQmlsbFRyYWNrZXJEYXRhU2VydmljZSxcclxuICAgICAgICBwdWJsaWMgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSxcclxuICAgICAgICBwdWJsaWMgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICAgICAgcHVibGljIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMubG9jYWxlUGlwZSA9IG5ldyBCaWxsVHJhY2tlckxvY2FsZVBpcGUobG9jYWxlSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5omT5byA5Y2V5o2u6L+96Liq5by556qXXHJcbiAgICAgKiB0b2RvOiBzcGHmqKHlvI/kuIvvvIzlvLnnqpflnKhib2R55Lit77yM5L2N5LqO5pyA5LiK5bGC77yM5omT5byA6IGU5p+l5pe25Lya55uW5L2P5pawdGFi6aG177yM5q2k6Zeu6aKY5b6F6Kej5YazXHJcbiAgICAgKiBAcGFyYW0gYXJncyDljZXmja7ov73ouKrlj4LmlbBcclxuICAgICAqIEBwYXJhbSBtYXhpbWl6ZWQg5piv5ZCm5pyA5aSn5YyW5by556qXXHJcbiAgICAgKiBAcGFyYW0gbW9kYWxPcHRpb25zIOW8ueeql+mFjee9rlxyXG4gICAgICogQHBhcmFtIGdyYXBoT3B0aW9ucyDov73ouKrlm77phY3nva5cclxuICAgICAqIEBwYXJhbSBncmlkT3B0aW9ucyDmlbDmja7ooajphY3nva5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG9wZW5EZWZhdWx0QmlsbFRyYWNrZXJEaWFsb2coYXJnczogR2V0QmlsbHNJbmZvQXJncywgbWF4aW1pemVkOiBib29sZWFuID0gdHJ1ZSwgbW9kYWxPcHRpb25zPzogTW9kYWxPcHRpb25zLCBncmFwaE9wdGlvbnM/OiBCaWxsVHJhY2tlckdyYXBoT3B0aW9ucywgZ3JpZE9wdGlvbnM/OiBCaWxsVHJhY2tlckdyaWRPcHRpb25zKTogT2JzZXJ2YWJsZTxCaWxsVHJhY2tlckNvbXBvbmVudD4ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgbW9kYWxPcHRpb25zID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgaWYgKG1vZGFsT3B0aW9ucyA9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2VyLmluZm8odGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybShcIm1vZGFsT3B0aW9uc0NhbnRCZUVtcHR5XCIpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvZihudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtb2RhbE9wdGlvbnMgPSBKU09OLnBhcnNlKG1vZGFsT3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbW9kYWxPcHRzOiBNb2RhbE9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiYmlsbFRyYWNrZXJcIilcclxuICAgICAgICB9O1xyXG4gICAgICAgIG1vZGFsT3B0cyA9IE9iamVjdC5hc3NpZ24obW9kYWxPcHRzLCB0aGlzLmRlZmF1bHRNb2RhbE9wdGlvbnMsIG1vZGFsT3B0aW9ucyk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgZ3JhcGhPcHRpb25zID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgaWYgKGdyYXBoT3B0aW9ucyAhPSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICBncmFwaE9wdGlvbnMgPSBKU09OLnBhcnNlKGdyYXBoT3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBncmFwaE9wdGlvbnMgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGdyaWRPcHRpb25zID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgaWYgKGdyaWRPcHRpb25zICE9IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIGdyaWRPcHRpb25zID0gSlNPTi5wYXJzZShncmlkT3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBncmlkT3B0aW9ucyA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGRvd25BcmdzID0gbmV3IEdldERvd25CaWxsc0luZm9BcmdzKCk7XHJcbiAgICAgICAgZG93bkFyZ3MuYmlsbERhdGFJZCA9IGFyZ3MuYmlsbERhdGFJZDtcclxuICAgICAgICBkb3duQXJncy5kb2N1bWVudFR5cGVJZCA9IGFyZ3MuZG9jdW1lbnRUeXBlSWQ7XHJcbiAgICAgICAgZG93bkFyZ3MuYml6S2luZCA9IGFyZ3MuYml6S2luZDtcclxuICAgICAgICBkb3duQXJncy5iaXpUeXBlID0gYXJncy5iaXpUeXBlO1xyXG4gICAgICAgIGRvd25BcmdzLmJpbGxDaGlsZEluZm9zID0gYXJncy5iaWxsQ2hpbGRJbmZvcztcclxuICAgICAgICBkb3duQXJncy5jdXJZZWFyID0gYXJncy5jdXJZZWFyO1xyXG5cclxuICAgICAgICB0aGlzLmxvYWRpbmcuc2hvdyh7IG1lc3NhZ2U6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJsb2FkaW5nXCIpIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTZXJ2aWNlLmNhblRyYWNraW5nKGRvd25BcmdzKS5waXBlKFxyXG4gICAgICAgICAgICBzd2l0Y2hNYXAoXHJcbiAgICAgICAgICAgICAgICAocmVzOiBDYW5UcmFja2luZ1Jlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzLmNhbkRvd25UcmFja2luZyAmJiAhcmVzLmNhblVwVHJhY2tpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlci5pbmZvKHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJub0Fzc29CaWxsXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvZihudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJpbGxUcmFja2VyQXJnczogQmlsbFRyYWNrZXJBcmdzID0gbmV3IEJpbGxUcmFja2VyQXJncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJpbGxUcmFja2VyQXJncy5jYW5UcmFja2luZ1Jlc3VsdCA9IHJlcztcclxuICAgICAgICAgICAgICAgICAgICBiaWxsVHJhY2tlckFyZ3MuZ2V0QmlsbHNJbmZvQXJncyA9IGFyZ3M7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBncmFwaE9wdCA9IG5ldyBCaWxsVHJhY2tlckdyYXBoT3B0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGdyYXBoT3B0ID0gT2JqZWN0LmFzc2lnbihncmFwaE9wdCwgZ3JhcGhPcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICBiaWxsVHJhY2tlckFyZ3MuZ3JhcGhPcHRpb25zID0gZ3JhcGhPcHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBncmlkT3B0ID0gbmV3IEJpbGxUcmFja2VyR3JpZE9wdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgICAgICBncmlkT3B0ID0gT2JqZWN0LmFzc2lnbihncmlkT3B0LCBncmlkT3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYmlsbFRyYWNrZXJBcmdzLmdyaWRPcHRpb25zID0gZ3JpZE9wdDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY21wUiA9IHRoaXMuY3JlYXRlQmlsbFRyYWNrZXJDb21wb25lbnQoYmlsbFRyYWNrZXJBcmdzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9kYWxSZWYgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KGNtcFIsIG1vZGFsT3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1heGltaXplZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbFJlZi5kaWFsb2cuaW5zdGFuY2UubWF4RGlhbG9nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNtcFIuaW5zdGFuY2Uuc2V0TW9kYWxSZWYobW9kYWxSZWYpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoY21wUi5pbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy90b2RvIOehruWumuW8guW4uOe7k+aehCwg55uu5YmN6YeH55So5YW85a655Y+W5YC85pa55byPXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlci5lcnJvcihlcnIuZXJyb3IgPT0gbnVsbCA/IGVyci5tZXNzYWdlIDogKGVyci5lcnJvci5NZXNzYWdlIHx8IGVyci5lcnJvci5tZXNzYWdlIHx8IGVyci5tZXNzYWdlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaJk+W8gOWNleaNrui/vei4quW6lOeUqFxyXG4gICAgICogQHBhcmFtIGFyZ3Mg5Y2V5o2u6L+96Liq5Y+C5pWwXHJcbiAgICAgKiBAcGFyYW0gZ3JhcGhPcHRpb25zIOi/vei4quWbvumFjee9rlxyXG4gICAgICogQHBhcmFtIGdyaWRPcHRpb25zIOaVsOaNruihqOmFjee9rlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3BlbkRlZmF1bHRCaWxsVHJhY2tlckFwcChhcmdzOiBHZXRCaWxsc0luZm9BcmdzLCBncmFwaE9wdGlvbnM/OiBCaWxsVHJhY2tlckdyYXBoT3B0aW9ucywgZ3JpZE9wdGlvbnM/OiBCaWxsVHJhY2tlckdyaWRPcHRpb25zKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBncmFwaE9wdGlvbnMgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBpZiAoZ3JhcGhPcHRpb25zID09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZXIuaW5mbyh0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwibW9kYWxPcHRpb25zQ2FudEJlRW1wdHlcIikpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdyYXBoT3B0aW9ucyA9IEpTT04ucGFyc2UoZ3JhcGhPcHRpb25zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgZ3JpZE9wdGlvbnMgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBpZiAoZ3JpZE9wdGlvbnMgPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlci5pbmZvKHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJtb2RhbE9wdGlvbnNDYW50QmVFbXB0eVwiKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ3JpZE9wdGlvbnMgPSBKU09OLnBhcnNlKGdyaWRPcHRpb25zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGRvd25BcmdzID0gbmV3IEdldERvd25CaWxsc0luZm9BcmdzKCk7XHJcbiAgICAgICAgZG93bkFyZ3MuZG9jdW1lbnRUeXBlSWQgPSBhcmdzLmRvY3VtZW50VHlwZUlkO1xyXG4gICAgICAgIGRvd25BcmdzLmJpbGxEYXRhSWQgPSBhcmdzLmJpbGxEYXRhSWQ7XHJcbiAgICAgICAgZG93bkFyZ3MuYml6S2luZCA9IGFyZ3MuYml6S2luZDtcclxuICAgICAgICBkb3duQXJncy5iaXpUeXBlID0gYXJncy5iaXpUeXBlO1xyXG4gICAgICAgIGRvd25BcmdzLmJpbGxDaGlsZEluZm9zID0gYXJncy5iaWxsQ2hpbGRJbmZvcztcclxuICAgICAgICBkb3duQXJncy5jdXJZZWFyID0gYXJncy5jdXJZZWFyO1xyXG5cclxuICAgICAgICB0aGlzLmxvYWRpbmcuc2hvdyh7IG1lc3NhZ2U6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJsb2FkaW5nXCIpIH0pO1xyXG4gICAgICAgIHRoaXMuZGF0YVNlcnZpY2UuY2FuVHJhY2tpbmcoZG93bkFyZ3MpLnN1YnNjcmliZShcclxuICAgICAgICAgICAgKHJlczogQ2FuVHJhY2tpbmdSZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghcmVzLmNhbkRvd25UcmFja2luZyAmJiAhcmVzLmNhblVwVHJhY2tpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2VyLmluZm8odGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybShcIm5vQXNzb0JpbGxcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBiaWxsVHJhY2tlckFyZ3M6IEJpbGxUcmFja2VyQXJncyA9IG5ldyBCaWxsVHJhY2tlckFyZ3MoKTtcclxuICAgICAgICAgICAgICAgIGJpbGxUcmFja2VyQXJncy5jYW5UcmFja2luZ1Jlc3VsdCA9IHJlcztcclxuICAgICAgICAgICAgICAgIGJpbGxUcmFja2VyQXJncy5nZXRCaWxsc0luZm9BcmdzID0gYXJncztcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgZ3JhcGhPcHQgPSBuZXcgQmlsbFRyYWNrZXJHcmFwaE9wdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIGdyYXBoT3B0ID0gT2JqZWN0LmFzc2lnbihncmFwaE9wdCwgZ3JhcGhPcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIGJpbGxUcmFja2VyQXJncy5ncmFwaE9wdGlvbnMgPSBncmFwaE9wdDtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgZ3JpZE9wdCA9IG5ldyBCaWxsVHJhY2tlckdyaWRPcHRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICBncmlkT3B0ID0gT2JqZWN0LmFzc2lnbihncmlkT3B0LCBncmlkT3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICBiaWxsVHJhY2tlckFyZ3MuZ3JpZE9wdGlvbnMgPSBncmlkT3B0O1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdDogQXBwT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBhcHBJZDogQmlsbFRyYWNrZXJDb25zdGFudC5ERUZBVUxUX0FQUF9JRCxcclxuICAgICAgICAgICAgICAgICAgICBhcHBFbnRyYW5jZTogQmlsbFRyYWNrZXJDb25zdGFudC5ERUZBVUxUX0FQUF9FTlRSQU5DRSxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jSWQ6IEJpbGxUcmFja2VyQ29uc3RhbnQuREVGQVVMVF9GVU5DX0lELFxyXG4gICAgICAgICAgICAgICAgICAgIHRhYklkOiBcImJpbGxUcmFja2VyXCIgKyBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRhYk5hbWU6IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJiaWxsVHJhY2tlclwiKSxcclxuICAgICAgICAgICAgICAgICAgICBhcHBUeXBlOiBBcHBUeXBlLkFwcCxcclxuICAgICAgICAgICAgICAgICAgICBlbnRpdHlQYXJhbXM6IGJpbGxUcmFja2VyQXJncyxcclxuICAgICAgICAgICAgICAgICAgICBxdWVyeVN0cmluZ1BhcmFtczogdGhpcy5idWlsZFF1ZXJ5TWFwKGJpbGxUcmFja2VyQXJncyksXHJcbiAgICAgICAgICAgICAgICAgICAgaXNSZWxvYWQ6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5mcmFtZXdvcmtTZXJ2aWNlLm9wZW5NZW51KG9wdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcuY2xvc2UoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAvL3RvZG8g56Gu5a6a5byC5bi457uT5p6ELCDnm67liY3ph4fnlKjlhbzlrrnlj5blgLzmlrnlvI9cclxuICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZXIuZXJyb3IoZXJyLmVycm9yID09IG51bGwgPyBlcnIubWVzc2FnZSA6IChlcnIuZXJyb3IuTWVzc2FnZSB8fCBlcnIuZXJyb3IubWVzc2FnZSB8fCBlcnIubWVzc2FnZSkpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIm+W7uuWNleaNrui/vei4que7hOS7tlxyXG4gICAgICogQHBhcmFtIGJpbGxUcmFja2VyQXJncyDljZXmja7ov73ouKrlj4LmlbAgXHJcbiAgICAgKiBAcGFyYW0gY2ZyIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlclxyXG4gICAgICogQHBhcmFtIGluamVjdG9yIEluamVjdG9yXHJcbiAgICAgKiBAcGFyYW0gY3VzdFByb3ZpZGVycyDoh6rlrprkuYlQcm92aWRlclxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjcmVhdGVCaWxsVHJhY2tlckNvbXBvbmVudChiaWxsVHJhY2tlckFyZ3M6IEJpbGxUcmFja2VyQXJncywgY2ZyPzogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBpbmplY3Rvcj86IEluamVjdG9yLCBjdXN0UHJvdmlkZXJzPzogYW55W10pIHtcclxuICAgICAgICBjZnIgPSBjZnIgPT0gbnVsbCA/IHRoaXMuY2ZyIDogY2ZyO1xyXG4gICAgICAgIGluamVjdG9yID0gaW5qZWN0b3IgPT0gbnVsbCA/IHRoaXMuaW5qZWN0b3IgOiBpbmplY3RvcjtcclxuICAgICAgICBjdXN0UHJvdmlkZXJzID0gY3VzdFByb3ZpZGVycyA9PSBudWxsIHx8IEFycmF5LmlzQXJyYXkoY3VzdFByb3ZpZGVycykgPT0gZmFsc2UgPyBbXSA6IGN1c3RQcm92aWRlcnM7XHJcblxyXG4gICAgICAgIGNvbnN0IGluaiA9IFJlZmxlY3RpdmVJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtcclxuICAgICAgICAgICAgeyBwcm92aWRlOiBCaWxsVHJhY2tlckFyZ3MsIHVzZVZhbHVlOiBiaWxsVHJhY2tlckFyZ3MgfSxcclxuICAgICAgICAgICAgLi4uY3VzdFByb3ZpZGVyc1xyXG4gICAgICAgIF0sIGluamVjdG9yKTtcclxuICAgICAgICBjb25zdCBjbXBGID0gY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KEJpbGxUcmFja2VyQ29tcG9uZW50KTtcclxuICAgICAgICBjb25zdCBjbXBSID0gY21wRi5jcmVhdGUoaW5qKTtcclxuICAgICAgICByZXR1cm4gY21wUjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiDveWQpue7p+e7rei/vei4qlxyXG4gICAgICogQHBhcmFtIGFyZ3MgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNhblRyYWNraW5nKGFyZ3M6IEdldERvd25CaWxsc0luZm9BcmdzKTogT2JzZXJ2YWJsZTxDYW5UcmFja2luZ1Jlc3VsdD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTZXJ2aWNlLmNhblRyYWNraW5nKGFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5LiL5ri45Y2V5o2u5L+h5oGvXHJcbiAgICAgKiBAcGFyYW0gYXJncyBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0RG93bkJpbGxzSW5mbyhhcmdzOiBHZXREb3duQmlsbHNJbmZvQXJncyk6IE9ic2VydmFibGU8RG93bkJpbGxJbmZvUmVzdWx0W10+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZS5nZXREb3duQmlsbHNJbmZvKGFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5LiK5ri45Y2V5o2u5L+h5oGvXHJcbiAgICAgKiBAcGFyYW0gYXJncyBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0VXBCaWxsc0luZm8oYXJnczogR2V0VXBCaWxsc0luZm9BcmdzKTogT2JzZXJ2YWJsZTxVcEJpbGxJbmZvUmVzdWx0W10+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZS5nZXRVcEJpbGxzSW5mbyhhcmdzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOafpeivouWunuS9k+aVsOaNrlxyXG4gICAgICogQHBhcmFtIGFyZ3MgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEVudGl0eURhdGEoYXJnczogR2V0TWFpbkVudGl0eURhdGFBcmdzKTogT2JzZXJ2YWJsZTxFbnRpdHlEYXRhUmVzdWx0PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2UuZ2V0RW50aXR5RGF0YShhcmdzKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGJ1aWxkUXVlcnlNYXAoYmlsbFRyYWNrZXJBcmdzOiBCaWxsVHJhY2tlckFyZ3MpOiBNYXA8c3RyaW5nLCBzdHJpbmc+IHtcclxuICAgICAgICBsZXQgbWFwID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBiaWxsVHJhY2tlckFyZ3MpIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gYmlsbFRyYWNrZXJBcmdzW2tleV07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSAmJiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWFwLnNldChrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBtYXA7XHJcbiAgICB9XHJcbn0iXX0=