import * as tslib_1 from "tslib";
import { Inject, Injectable, Injector } from '@angular/core';
import { FrameContext } from '../frame/frame_context';
import { MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN, ComponentType } from '../core/index';
import { NAMESPACE } from '../frame/tokens';
var ValidateEffector = /** @class */ (function () {
    function ValidateEffector(injector, messageService, notifyService, namespace, frameContext) {
        this.injector = injector;
        this.messageService = messageService;
        this.notifyService = notifyService;
        this.namespace = namespace;
        this.frameContext = frameContext;
        this.ns = namespace;
    }
    ValidateEffector.prototype.effect = function (path, value, options) {
        var _a;
        // 校验不通过时返回false
        var domInfo = this.getDomInfoByEntityPath(path);
        if (!domInfo) {
            return;
        }
        var frameContext = domInfo.frameContext;
        var rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();
        // const rootViewModel = rootFrameContext.viewModel;
        var expressionId = options.expressionId;
        var domPropertyName = domInfo.domPropertyName;
        if (expressionId) {
            // 增加校验规则
            frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, "validate" /* Validate */);
        }
        if (value === false && options.message) {
            // 更新form错误信息
            // 不是grid，则认为是卡片
            if (!domInfo.isGridComponent) {
                var message = options.message.replace(/\$property/g, domInfo.propertyName);
                var formErrors = this.buildFormErrors(domPropertyName, message);
                // // 只增加校验规则，不立即显示校验信息，否则页面加载后在非编辑态就会显示校验信息
                frameContext.form.updateFormErrors(formErrors);
            }
            else {
                // if (expressionId) {
                //   // 增加校验规则
                //   frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, RuleType.Validate);
                // }
            }
            // 不进行汇总展示
            // const verifyInformations = this.buildVerifyInformations(domInfo.id, frameContext, domInfo.domPropertyName, options.message);
            // 增加到汇总消息
            // rootViewModel.verifycationChanged.next(verifyInformations);
            // 更新汇总错误信息
        }
        else if (value === true) {
            // 移除错误消息
            // const verifyInformations = this.removeValidateVerifyInformations(domInfo.id, this.frameContext);
            // rootViewModel.verifycationChanged.next(verifyInformations);
            var currentErrors = frameContext.form.getFormControlErrors(domPropertyName) || null;
            if (currentErrors) {
                if (currentErrors.hasOwnProperty('validate')) {
                    // require合法，移除require校验提示
                    delete currentErrors.validate;
                }
                frameContext.form.updateFormErrors((_a = {}, _a[domPropertyName] = { errors: currentErrors }, _a));
            }
            else {
                var formErrors = this.buildFormErrors(domPropertyName, null);
                frameContext.form.updateFormErrors(formErrors);
            }
        }
    };
    /**
     * 通过实体路径获取对应的dom信息
     * @param entityPath
     * @returns
     */
    ValidateEffector.prototype.getDomInfoByEntityPath = function (entityPath) {
        var e_1, _a, e_2, _b;
        var result = null;
        if (!entityPath) {
            return result;
        }
        entityPath = entityPath.split('/').filter(function (p) { return p; }).join('.');
        var frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || null;
        if (frameContexts && frameContexts.length > 0) {
            try {
                for (var frameContexts_1 = tslib_1.__values(frameContexts), frameContexts_1_1 = frameContexts_1.next(); !frameContexts_1_1.done; frameContexts_1_1 = frameContexts_1.next()) {
                    var frameContext = frameContexts_1_1.value;
                    if (result) {
                        break;
                    }
                    var isValidFrameContext = frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0;
                    if (frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0) {
                        var keys = Object.keys(frameContext.form.ngFormControls);
                        try {
                            for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                                var propertyName = keys_1_1.value;
                                var ngFormControl = frameContext.form.ngFormControls[propertyName];
                                var bindingPath = frameContext.viewModel.bindingPath || '/';
                                var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                                var bindings = ngFormControl.binding.split('.');
                                bindings = bindingPaths.concat(bindings);
                                if (entityPath === bindings.join('.')) {
                                    // 判断对应的组件是什么类型
                                    var dgColumnNames = frameContext.viewModel['dataGridColumnsName'] || null;
                                    var dgColumnInfo = frameContext.viewModel[dgColumnNames] || null;
                                    if (dgColumnInfo && Array.isArray(dgColumnInfo) && dgColumnInfo.length > 0) {
                                        var isEditableGrid = dgColumnInfo.find(function (array) {
                                            var readonlyGroup = array.every(function (column) { return !(column.hasOwnProperty('editor') && column.editor); });
                                            if (!readonlyGroup) {
                                                return true;
                                            }
                                            else {
                                                return false;
                                            }
                                        });
                                        if (!isEditableGrid) {
                                            continue;
                                        }
                                    }
                                    // 如果是farris树，则跳过
                                    var isFarrisTreeTableComponent = frameContext && frameContext.frameComponent && frameContext.frameComponent.componentType === ComponentType.farrisTreeTalbeComponent;
                                    if (isFarrisTreeTableComponent) {
                                        continue;
                                    }
                                    var isGridComponent = false;
                                    if (dgColumnNames) {
                                        isGridComponent = true;
                                    }
                                    result = {
                                        domPropertyName: propertyName,
                                        propertyName: ngFormControl.name || ngFormControl.defaultI18nValue,
                                        frameContext: frameContext,
                                        id: ngFormControl.id,
                                        isGridComponent: isGridComponent
                                    };
                                    break;
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (keys_1_1 && !keys_1_1.done && (_b = keys_1.return)) _b.call(keys_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (frameContexts_1_1 && !frameContexts_1_1.done && (_a = frameContexts_1.return)) _a.call(frameContexts_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return result;
    };
    ValidateEffector.prototype.getVerifyInformations = function (frameContext) {
        var rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();
        var rootViewModel = rootFrameContext.viewModel;
        var verifyInformations = rootViewModel.verifyInformations;
        return verifyInformations;
    };
    ValidateEffector.prototype.buildFormErrors = function (domPropertyName, message) {
        var _a, _b;
        if (message) {
            message = message.replace(/\$property/g, 'domPropertyName');
            return _a = {},
                _a[domPropertyName] = {
                    errors: {
                        'validate': {
                            name: message
                        }
                    }
                },
                _a;
        }
        else {
            return _b = {},
                _b[domPropertyName] = {
                    errors: {}
                },
                _b;
        }
    };
    ValidateEffector.prototype.buildVerifyInformations = function (id, frameContext, domPropertyName, message) {
        var verifyInformations = this.getVerifyInformations(frameContext);
        var index = verifyInformations.findIndex(function (item) {
            return item.id === id;
        });
        if (index !== -1) {
            verifyInformations.splice(index, 1);
        }
        verifyInformations.push({
            id: id,
            namespace: frameContext.namespace,
            targetField: domPropertyName,
            index: verifyInformations.length + 1,
            title: frameContext.form.formGroupName,
            msg: message,
            type: 'error'
        });
        return verifyInformations;
    };
    ValidateEffector.prototype.removeValidateVerifyInformations = function (id, frameContext) {
        var verifyInformations = this.getVerifyInformations(frameContext);
        var index = verifyInformations.findIndex(function (item) {
            return item.id === id;
        });
        if (index !== -1) {
            verifyInformations.splice(index, 1);
        }
        return verifyInformations;
    };
    ValidateEffector.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ValidateEffector.ctorParameters = function () { return [
        { type: Injector },
        { type: undefined, decorators: [{ type: Inject, args: [MESSAGE_SERVICE_TOKEN,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [NOTIFY_SERVICE_TOKEN,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] },
        { type: FrameContext }
    ]; };
    return ValidateEffector;
}());
export { ValidateEffector };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGVfZWZmZWN0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9lZmZlY3Rvci92YWxpZGF0ZV9lZmZlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsb0JBQW9CLEVBQW1DLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUc1SCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFNUM7SUFHRSwwQkFDVSxRQUFrQixFQUNhLGNBQStCLEVBQ2hDLGFBQTZCLEVBQ3hDLFNBQVMsRUFDNUIsWUFBMEI7UUFKMUIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNhLG1CQUFjLEdBQWQsY0FBYyxDQUFpQjtRQUNoQyxrQkFBYSxHQUFiLGFBQWEsQ0FBZ0I7UUFDeEMsY0FBUyxHQUFULFNBQVMsQ0FBQTtRQUM1QixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUVsQyxJQUFJLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQztJQUN0QixDQUFDO0lBQ00saUNBQU0sR0FBYixVQUFjLElBQVksRUFBRSxLQUFVLEVBQUUsT0FBaUM7O1FBQ3ZFLGdCQUFnQjtRQUNoQixJQUFNLE9BQU8sR0FBUSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE9BQU87U0FDUjtRQUNELElBQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUM7UUFDMUMsSUFBTSxnQkFBZ0IsR0FBRyxZQUFZLElBQUksWUFBWSxDQUFDLDBCQUEwQixFQUFFLENBQUM7UUFDbkYsb0RBQW9EO1FBQ3BELElBQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUM7UUFDMUMsSUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQztRQUNoRCxJQUFJLFlBQVksRUFBRTtZQUNoQixTQUFTO1lBQ1QsWUFBWSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxZQUFZLDRCQUFvQixDQUFDO1NBQzNHO1FBQ0QsSUFBSSxLQUFLLEtBQUssS0FBSyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDdEMsYUFBYTtZQUNiLGdCQUFnQjtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRTtnQkFDNUIsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQTtnQkFDNUUsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQ2xFLDRDQUE0QztnQkFDNUMsWUFBWSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUNoRDtpQkFBTTtnQkFDTCxzQkFBc0I7Z0JBQ3RCLGNBQWM7Z0JBQ2QsK0dBQStHO2dCQUMvRyxJQUFJO2FBQ0w7WUFDRCxVQUFVO1lBQ1YsK0hBQStIO1lBQy9ILFVBQVU7WUFDViw4REFBOEQ7WUFDOUQsV0FBVztTQUNaO2FBQU0sSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO1lBQ3pCLFNBQVM7WUFDVCxtR0FBbUc7WUFDbkcsOERBQThEO1lBQzlELElBQU0sYUFBYSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsZUFBZSxDQUFDLElBQUksSUFBSSxDQUFDO1lBQ3RGLElBQUksYUFBYSxFQUFFO2dCQUNqQixJQUFJLGFBQWEsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLEVBQUU7b0JBQzVDLDBCQUEwQjtvQkFDMUIsT0FBTyxhQUFhLENBQUMsUUFBUSxDQUFDO2lCQUMvQjtnQkFDRCxZQUFZLENBQUMsSUFBSSxDQUFDLGdCQUFnQixXQUFHLEdBQUMsZUFBZSxJQUFHLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFHLENBQUM7YUFDdEY7aUJBQU07Z0JBQ0wsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQy9ELFlBQVksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDaEQ7U0FDRjtJQUNILENBQUM7SUFDRDs7OztPQUlHO0lBQ0ssaURBQXNCLEdBQTlCLFVBQStCLFVBQWtCOztRQUMvQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFDRCxVQUFVLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEVBQUQsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVELElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksQ0FBQztRQUNoSixJQUFJLGFBQWEsSUFBSSxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7Z0JBQzdDLEtBQTJCLElBQUEsa0JBQUEsaUJBQUEsYUFBYSxDQUFBLDRDQUFBLHVFQUFFO29CQUFyQyxJQUFNLFlBQVksMEJBQUE7b0JBQ3JCLElBQUksTUFBTSxFQUFFO3dCQUNWLE1BQU07cUJBQ1A7b0JBRUQsSUFBTSxtQkFBbUIsR0FBRyxZQUFZLElBQUksWUFBWSxDQUFDLElBQUksSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtvQkFDN0osSUFBSSxZQUFZLElBQUksWUFBWSxDQUFDLElBQUksSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTt3QkFDckksSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDOzs0QkFDM0QsS0FBMkIsSUFBQSxTQUFBLGlCQUFBLElBQUksQ0FBQSwwQkFBQSw0Q0FBRTtnQ0FBNUIsSUFBTSxZQUFZLGlCQUFBO2dDQUNyQixJQUFNLGFBQWEsR0FBa0IsWUFBWSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7Z0NBQ3BGLElBQUksV0FBVyxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsV0FBVyxJQUFJLEdBQUcsQ0FBQztnQ0FDNUQsSUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEVBQUQsQ0FBQyxDQUFDLENBQUM7Z0NBQzNELElBQUksUUFBUSxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dDQUNoRCxRQUFRLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztnQ0FDekMsSUFBSSxVQUFVLEtBQUssUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtvQ0FDckMsZUFBZTtvQ0FDZixJQUFNLGFBQWEsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksSUFBSSxDQUFDO29DQUM1RSxJQUFNLFlBQVksR0FBc0IsWUFBWSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsSUFBSSxJQUFJLENBQUM7b0NBQ3RGLElBQUksWUFBWSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7d0NBQzFFLElBQU0sY0FBYyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBQyxLQUFpQjs0Q0FDekQsSUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFDLE1BQVcsSUFBSyxPQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBbkQsQ0FBbUQsQ0FBQyxDQUFDOzRDQUN4RyxJQUFJLENBQUMsYUFBYSxFQUFFO2dEQUNsQixPQUFPLElBQUksQ0FBQzs2Q0FDYjtpREFBTTtnREFDTCxPQUFPLEtBQUssQ0FBQzs2Q0FDZDt3Q0FDSCxDQUFDLENBQUMsQ0FBQzt3Q0FDSCxJQUFJLENBQUMsY0FBYyxFQUFFOzRDQUNuQixTQUFTO3lDQUNWO3FDQUNGO29DQUNELGlCQUFpQjtvQ0FDakIsSUFBTSwwQkFBMEIsR0FBRyxZQUFZLElBQUksWUFBWSxDQUFDLGNBQWMsSUFBSSxZQUFZLENBQUMsY0FBYyxDQUFDLGFBQWEsS0FBSyxhQUFhLENBQUMsd0JBQXdCLENBQUM7b0NBQ3ZLLElBQUksMEJBQTBCLEVBQUU7d0NBQzlCLFNBQVM7cUNBQ1Y7b0NBQ0QsSUFBSSxlQUFlLEdBQUcsS0FBSyxDQUFDO29DQUM1QixJQUFJLGFBQWEsRUFBRTt3Q0FDakIsZUFBZSxHQUFHLElBQUksQ0FBQztxQ0FDeEI7b0NBQ0QsTUFBTSxHQUFHO3dDQUNQLGVBQWUsRUFBRSxZQUFZO3dDQUM3QixZQUFZLEVBQUUsYUFBYSxDQUFDLElBQUksSUFBSSxhQUFhLENBQUMsZ0JBQWdCO3dDQUNsRSxZQUFZLGNBQUE7d0NBQ1osRUFBRSxFQUFFLGFBQWEsQ0FBQyxFQUFFO3dDQUNwQixlQUFlLGlCQUFBO3FDQUNoQixDQUFDO29DQUNGLE1BQU07aUNBQ1A7NkJBQ0Y7Ozs7Ozs7OztxQkFDRjtpQkFDRjs7Ozs7Ozs7O1NBQ0Y7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBQ08sZ0RBQXFCLEdBQTdCLFVBQThCLFlBQTBCO1FBQ3RELElBQU0sZ0JBQWdCLEdBQUcsWUFBWSxJQUFJLFlBQVksQ0FBQywwQkFBMEIsRUFBRSxDQUFDO1FBQ25GLElBQU0sYUFBYSxHQUFHLGdCQUFnQixDQUFDLFNBQVMsQ0FBQztRQUNqRCxJQUFNLGtCQUFrQixHQUFHLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQztRQUM1RCxPQUFPLGtCQUFrQixDQUFDO0lBQzVCLENBQUM7SUFDTywwQ0FBZSxHQUF2QixVQUF3QixlQUF1QixFQUFFLE9BQWU7O1FBQzlELElBQUksT0FBTyxFQUFFO1lBQ1gsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDNUQ7Z0JBQ0UsR0FBQyxlQUFlLElBQUc7b0JBQ2pCLE1BQU0sRUFBRTt3QkFDTixVQUFVLEVBQUU7NEJBQ1YsSUFBSSxFQUFFLE9BQU87eUJBQ2Q7cUJBQ0Y7aUJBQ0Y7bUJBQ0Q7U0FDSDthQUFNO1lBQ0w7Z0JBQ0UsR0FBQyxlQUFlLElBQUc7b0JBQ2pCLE1BQU0sRUFBRSxFQUFFO2lCQUNYO21CQUNEO1NBQ0g7SUFDSCxDQUFDO0lBQ08sa0RBQXVCLEdBQS9CLFVBQWdDLEVBQVUsRUFBRSxZQUEwQixFQUFFLGVBQXVCLEVBQUUsT0FBZTtRQUM5RyxJQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNwRSxJQUFNLEtBQUssR0FBRyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsVUFBQyxJQUFTO1lBQ25ELE9BQU8sSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUE7UUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNoQixrQkFBa0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3JDO1FBQ0Qsa0JBQWtCLENBQUMsSUFBSSxDQUFDO1lBQ3RCLEVBQUUsRUFBRSxFQUFFO1lBQ04sU0FBUyxFQUFFLFlBQVksQ0FBQyxTQUFTO1lBQ2pDLFdBQVcsRUFBRSxlQUFlO1lBQzVCLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQztZQUNwQyxLQUFLLEVBQUUsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhO1lBQ3RDLEdBQUcsRUFBRSxPQUFPO1lBQ1osSUFBSSxFQUFFLE9BQU87U0FDZCxDQUFDLENBQUM7UUFDSCxPQUFPLGtCQUFrQixDQUFDO0lBQzVCLENBQUM7SUFDTywyREFBZ0MsR0FBeEMsVUFBeUMsRUFBVSxFQUFFLFlBQTBCO1FBQzdFLElBQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3BFLElBQU0sS0FBSyxHQUFHLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxVQUFDLElBQVM7WUFDbkQsT0FBTyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQTtRQUN2QixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2hCLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDckM7UUFDRCxPQUFPLGtCQUFrQixDQUFDO0lBQzVCLENBQUM7O2dCQXpMRixVQUFVOzs7O2dCQVJrQixRQUFRO2dEQWFoQyxNQUFNLFNBQUMscUJBQXFCO2dEQUM1QixNQUFNLFNBQUMsb0JBQW9CO2dEQUMzQixNQUFNLFNBQUMsU0FBUztnQkFiWixZQUFZOztJQWdNckIsdUJBQUM7Q0FBQSxBQTFMRCxJQTBMQztTQXpMWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEV4cHJlc3Npb24gfSBmcm9tICcuLi9leHByZXNzaW9uL2luZGV4JztcclxuaW1wb3J0IHsgRnJhbWVDb250ZXh0IH0gZnJvbSAnLi4vZnJhbWUvZnJhbWVfY29udGV4dCc7XHJcbmltcG9ydCB7IE1FU1NBR0VfU0VSVklDRV9UT0tFTiwgTk9USUZZX1NFUlZJQ0VfVE9LRU4sIElNZXNzYWdlU2VydmljZSwgSU5vdGlmeVNlcnZpY2UsIENvbXBvbmVudFR5cGUgfSBmcm9tICcuLi9jb3JlL2luZGV4JztcclxuaW1wb3J0IHsgTmdGb3JtQ29udHJvbCB9IGZyb20gJy4uL2Zvcm0vZGVjb3JhdG9ycyc7XHJcbmltcG9ydCB7IFJ1bGVUeXBlIH0gZnJvbSAnLi4vZm9ybS9pbmRleCc7XHJcbmltcG9ydCB7IE5BTUVTUEFDRSB9IGZyb20gJy4uL2ZyYW1lL3Rva2Vucyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBWYWxpZGF0ZUVmZmVjdG9yIGltcGxlbWVudHMgRXhwcmVzc2lvbi5FZmZlY3RvciB7XHJcbiAgcHVibGljIG5zOiBzdHJpbmc7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgIEBJbmplY3QoTUVTU0FHRV9TRVJWSUNFX1RPS0VOKSBwcml2YXRlIG1lc3NhZ2VTZXJ2aWNlOiBJTWVzc2FnZVNlcnZpY2UsXHJcbiAgICBASW5qZWN0KE5PVElGWV9TRVJWSUNFX1RPS0VOKSBwcml2YXRlIG5vdGlmeVNlcnZpY2U6IElOb3RpZnlTZXJ2aWNlLFxyXG4gICAgQEluamVjdChOQU1FU1BBQ0UpIHByaXZhdGUgbmFtZXNwYWNlLFxyXG4gICAgcHJpdmF0ZSBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dFxyXG4gICkge1xyXG4gICAgdGhpcy5ucyA9IG5hbWVzcGFjZTtcclxuICB9XHJcbiAgcHVibGljIGVmZmVjdChwYXRoOiBzdHJpbmcsIHZhbHVlOiBhbnksIG9wdGlvbnM6IEV4cHJlc3Npb24uRWZmZWN0T3B0aW9ucykge1xyXG4gICAgLy8g5qCh6aqM5LiN6YCa6L+H5pe26L+U5ZueZmFsc2VcclxuICAgIGNvbnN0IGRvbUluZm86IGFueSA9IHRoaXMuZ2V0RG9tSW5mb0J5RW50aXR5UGF0aChwYXRoKTtcclxuICAgIGlmICghZG9tSW5mbykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBmcmFtZUNvbnRleHQgPSBkb21JbmZvLmZyYW1lQ29udGV4dDtcclxuICAgIGNvbnN0IHJvb3RGcmFtZUNvbnRleHQgPSBmcmFtZUNvbnRleHQgJiYgZnJhbWVDb250ZXh0LmdldFZpcnR1YWxSb290RnJhbWVDb250ZXh0KCk7XHJcbiAgICAvLyBjb25zdCByb290Vmlld01vZGVsID0gcm9vdEZyYW1lQ29udGV4dC52aWV3TW9kZWw7XHJcbiAgICBjb25zdCBleHByZXNzaW9uSWQgPSBvcHRpb25zLmV4cHJlc3Npb25JZDtcclxuICAgIGNvbnN0IGRvbVByb3BlcnR5TmFtZSA9IGRvbUluZm8uZG9tUHJvcGVydHlOYW1lO1xyXG4gICAgaWYgKGV4cHJlc3Npb25JZCkge1xyXG4gICAgICAvLyDlop7liqDmoKHpqozop4TliJlcclxuICAgICAgZnJhbWVDb250ZXh0LmZvcm0uYWRkRmllbGRWYWxpZGF0ZVJ1bGUoZG9tUHJvcGVydHlOYW1lLCBvcHRpb25zLm1lc3NhZ2UsIGV4cHJlc3Npb25JZCwgUnVsZVR5cGUuVmFsaWRhdGUpO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlID09PSBmYWxzZSAmJiBvcHRpb25zLm1lc3NhZ2UpIHtcclxuICAgICAgLy8g5pu05pawZm9ybemUmeivr+S/oeaBr1xyXG4gICAgICAvLyDkuI3mmK9ncmlk77yM5YiZ6K6k5Li65piv5Y2h54mHXHJcbiAgICAgIGlmICghZG9tSW5mby5pc0dyaWRDb21wb25lbnQpIHtcclxuICAgICAgICBjb25zdCBtZXNzYWdlID0gb3B0aW9ucy5tZXNzYWdlLnJlcGxhY2UoL1xcJHByb3BlcnR5L2csIGRvbUluZm8ucHJvcGVydHlOYW1lKVxyXG4gICAgICAgIGNvbnN0IGZvcm1FcnJvcnMgPSB0aGlzLmJ1aWxkRm9ybUVycm9ycyhkb21Qcm9wZXJ0eU5hbWUsIG1lc3NhZ2UpO1xyXG4gICAgICAgIC8vIC8vIOWPquWinuWKoOagoemqjOinhOWIme+8jOS4jeeri+WNs+aYvuekuuagoemqjOS/oeaBr++8jOWQpuWImemhtemdouWKoOi9veWQjuWcqOmdnue8lui+keaAgeWwseS8muaYvuekuuagoemqjOS/oeaBr1xyXG4gICAgICAgIGZyYW1lQ29udGV4dC5mb3JtLnVwZGF0ZUZvcm1FcnJvcnMoZm9ybUVycm9ycyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gaWYgKGV4cHJlc3Npb25JZCkge1xyXG4gICAgICAgIC8vICAgLy8g5aKe5Yqg5qCh6aqM6KeE5YiZXHJcbiAgICAgICAgLy8gICBmcmFtZUNvbnRleHQuZm9ybS5hZGRGaWVsZFZhbGlkYXRlUnVsZShkb21Qcm9wZXJ0eU5hbWUsIG9wdGlvbnMubWVzc2FnZSwgZXhwcmVzc2lvbklkLCBSdWxlVHlwZS5WYWxpZGF0ZSk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICB9XHJcbiAgICAgIC8vIOS4jei/m+ihjOaxh+aAu+WxleekulxyXG4gICAgICAvLyBjb25zdCB2ZXJpZnlJbmZvcm1hdGlvbnMgPSB0aGlzLmJ1aWxkVmVyaWZ5SW5mb3JtYXRpb25zKGRvbUluZm8uaWQsIGZyYW1lQ29udGV4dCwgZG9tSW5mby5kb21Qcm9wZXJ0eU5hbWUsIG9wdGlvbnMubWVzc2FnZSk7XHJcbiAgICAgIC8vIOWinuWKoOWIsOaxh+aAu+a2iOaBr1xyXG4gICAgICAvLyByb290Vmlld01vZGVsLnZlcmlmeWNhdGlvbkNoYW5nZWQubmV4dCh2ZXJpZnlJbmZvcm1hdGlvbnMpO1xyXG4gICAgICAvLyDmm7TmlrDmsYfmgLvplJnor6/kv6Hmga9cclxuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IHRydWUpIHtcclxuICAgICAgLy8g56e76Zmk6ZSZ6K+v5raI5oGvXHJcbiAgICAgIC8vIGNvbnN0IHZlcmlmeUluZm9ybWF0aW9ucyA9IHRoaXMucmVtb3ZlVmFsaWRhdGVWZXJpZnlJbmZvcm1hdGlvbnMoZG9tSW5mby5pZCwgdGhpcy5mcmFtZUNvbnRleHQpO1xyXG4gICAgICAvLyByb290Vmlld01vZGVsLnZlcmlmeWNhdGlvbkNoYW5nZWQubmV4dCh2ZXJpZnlJbmZvcm1hdGlvbnMpO1xyXG4gICAgICBjb25zdCBjdXJyZW50RXJyb3JzID0gZnJhbWVDb250ZXh0LmZvcm0uZ2V0Rm9ybUNvbnRyb2xFcnJvcnMoZG9tUHJvcGVydHlOYW1lKSB8fCBudWxsO1xyXG4gICAgICBpZiAoY3VycmVudEVycm9ycykge1xyXG4gICAgICAgIGlmIChjdXJyZW50RXJyb3JzLmhhc093blByb3BlcnR5KCd2YWxpZGF0ZScpKSB7XHJcbiAgICAgICAgICAvLyByZXF1aXJl5ZCI5rOV77yM56e76ZmkcmVxdWlyZeagoemqjOaPkOekulxyXG4gICAgICAgICAgZGVsZXRlIGN1cnJlbnRFcnJvcnMudmFsaWRhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZyYW1lQ29udGV4dC5mb3JtLnVwZGF0ZUZvcm1FcnJvcnMoeyBbZG9tUHJvcGVydHlOYW1lXTogeyBlcnJvcnM6IGN1cnJlbnRFcnJvcnMgfSB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBmb3JtRXJyb3JzID0gdGhpcy5idWlsZEZvcm1FcnJvcnMoZG9tUHJvcGVydHlOYW1lLCBudWxsKTtcclxuICAgICAgICBmcmFtZUNvbnRleHQuZm9ybS51cGRhdGVGb3JtRXJyb3JzKGZvcm1FcnJvcnMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOmAmui/h+WunuS9k+i3r+W+hOiOt+WPluWvueW6lOeahGRvbeS/oeaBr1xyXG4gICAqIEBwYXJhbSBlbnRpdHlQYXRoIFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0RG9tSW5mb0J5RW50aXR5UGF0aChlbnRpdHlQYXRoOiBzdHJpbmcpOiB7IGRvbVByb3BlcnR5TmFtZTogc3RyaW5nLCBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCwgaWQ6IHN0cmluZywgaXNHcmlkQ29tcG9uZW50OiBib29sZWFuIH0ge1xyXG4gICAgbGV0IHJlc3VsdCA9IG51bGw7XHJcbiAgICBpZiAoIWVudGl0eVBhdGgpIHtcclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIGVudGl0eVBhdGggPSBlbnRpdHlQYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCkuam9pbignLicpO1xyXG4gICAgY29uc3QgZnJhbWVDb250ZXh0cyA9IHRoaXMuZnJhbWVDb250ZXh0ICYmIHRoaXMuZnJhbWVDb250ZXh0LmFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRzQnlOYW1lc3BhY2UodGhpcy5uYW1lc3BhY2UpIHx8IG51bGw7XHJcbiAgICBpZiAoZnJhbWVDb250ZXh0cyAmJiBmcmFtZUNvbnRleHRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yIChjb25zdCBmcmFtZUNvbnRleHQgb2YgZnJhbWVDb250ZXh0cykge1xyXG4gICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgaXNWYWxpZEZyYW1lQ29udGV4dCA9IGZyYW1lQ29udGV4dCAmJiBmcmFtZUNvbnRleHQuZm9ybSAmJiBmcmFtZUNvbnRleHQuZm9ybS5uZ0Zvcm1Db250cm9scyAmJiBPYmplY3Qua2V5cyhmcmFtZUNvbnRleHQuZm9ybS5uZ0Zvcm1Db250cm9scykubGVuZ3RoID4gMFxyXG4gICAgICAgIGlmIChmcmFtZUNvbnRleHQgJiYgZnJhbWVDb250ZXh0LmZvcm0gJiYgZnJhbWVDb250ZXh0LmZvcm0ubmdGb3JtQ29udHJvbHMgJiYgT2JqZWN0LmtleXMoZnJhbWVDb250ZXh0LmZvcm0ubmdGb3JtQ29udHJvbHMpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhmcmFtZUNvbnRleHQuZm9ybS5uZ0Zvcm1Db250cm9scyk7XHJcbiAgICAgICAgICBmb3IgKGNvbnN0IHByb3BlcnR5TmFtZSBvZiBrZXlzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5nRm9ybUNvbnRyb2w6IE5nRm9ybUNvbnRyb2wgPSBmcmFtZUNvbnRleHQuZm9ybS5uZ0Zvcm1Db250cm9sc1twcm9wZXJ0eU5hbWVdO1xyXG4gICAgICAgICAgICBsZXQgYmluZGluZ1BhdGggPSBmcmFtZUNvbnRleHQudmlld01vZGVsLmJpbmRpbmdQYXRoIHx8ICcvJztcclxuICAgICAgICAgICAgY29uc3QgYmluZGluZ1BhdGhzID0gYmluZGluZ1BhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgICAgICAgICAgbGV0IGJpbmRpbmdzID0gbmdGb3JtQ29udHJvbC5iaW5kaW5nLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgIGJpbmRpbmdzID0gYmluZGluZ1BhdGhzLmNvbmNhdChiaW5kaW5ncyk7XHJcbiAgICAgICAgICAgIGlmIChlbnRpdHlQYXRoID09PSBiaW5kaW5ncy5qb2luKCcuJykpIHtcclxuICAgICAgICAgICAgICAvLyDliKTmlq3lr7nlupTnmoTnu4Tku7bmmK/ku4DkuYjnsbvlnotcclxuICAgICAgICAgICAgICBjb25zdCBkZ0NvbHVtbk5hbWVzID0gZnJhbWVDb250ZXh0LnZpZXdNb2RlbFsnZGF0YUdyaWRDb2x1bW5zTmFtZSddIHx8IG51bGw7XHJcbiAgICAgICAgICAgICAgY29uc3QgZGdDb2x1bW5JbmZvOiBBcnJheTxBcnJheTxhbnk+PiA9IGZyYW1lQ29udGV4dC52aWV3TW9kZWxbZGdDb2x1bW5OYW1lc10gfHwgbnVsbDtcclxuICAgICAgICAgICAgICBpZiAoZGdDb2x1bW5JbmZvICYmIEFycmF5LmlzQXJyYXkoZGdDb2x1bW5JbmZvKSAmJiBkZ0NvbHVtbkluZm8ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNFZGl0YWJsZUdyaWQgPSBkZ0NvbHVtbkluZm8uZmluZCgoYXJyYXk6IEFycmF5PGFueT4pID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgcmVhZG9ubHlHcm91cCA9IGFycmF5LmV2ZXJ5KChjb2x1bW46IGFueSkgPT4gIShjb2x1bW4uaGFzT3duUHJvcGVydHkoJ2VkaXRvcicpICYmIGNvbHVtbi5lZGl0b3IpKTtcclxuICAgICAgICAgICAgICAgICAgaWYgKCFyZWFkb25seUdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmICghaXNFZGl0YWJsZUdyaWQpIHtcclxuICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8vIOWmguaenOaYr2ZhcnJpc+agke+8jOWImei3s+i/h1xyXG4gICAgICAgICAgICAgIGNvbnN0IGlzRmFycmlzVHJlZVRhYmxlQ29tcG9uZW50ID0gZnJhbWVDb250ZXh0ICYmIGZyYW1lQ29udGV4dC5mcmFtZUNvbXBvbmVudCAmJiBmcmFtZUNvbnRleHQuZnJhbWVDb21wb25lbnQuY29tcG9uZW50VHlwZSA9PT0gQ29tcG9uZW50VHlwZS5mYXJyaXNUcmVlVGFsYmVDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgaWYgKGlzRmFycmlzVHJlZVRhYmxlQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgbGV0IGlzR3JpZENvbXBvbmVudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIGlmIChkZ0NvbHVtbk5hbWVzKSB7XHJcbiAgICAgICAgICAgICAgICBpc0dyaWRDb21wb25lbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICBkb21Qcm9wZXJ0eU5hbWU6IHByb3BlcnR5TmFtZSxcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogbmdGb3JtQ29udHJvbC5uYW1lIHx8IG5nRm9ybUNvbnRyb2wuZGVmYXVsdEkxOG5WYWx1ZSxcclxuICAgICAgICAgICAgICAgIGZyYW1lQ29udGV4dCxcclxuICAgICAgICAgICAgICAgIGlkOiBuZ0Zvcm1Db250cm9sLmlkLFxyXG4gICAgICAgICAgICAgICAgaXNHcmlkQ29tcG9uZW50XHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbiAgcHJpdmF0ZSBnZXRWZXJpZnlJbmZvcm1hdGlvbnMoZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQpIHtcclxuICAgIGNvbnN0IHJvb3RGcmFtZUNvbnRleHQgPSBmcmFtZUNvbnRleHQgJiYgZnJhbWVDb250ZXh0LmdldFZpcnR1YWxSb290RnJhbWVDb250ZXh0KCk7XHJcbiAgICBjb25zdCByb290Vmlld01vZGVsID0gcm9vdEZyYW1lQ29udGV4dC52aWV3TW9kZWw7XHJcbiAgICBjb25zdCB2ZXJpZnlJbmZvcm1hdGlvbnMgPSByb290Vmlld01vZGVsLnZlcmlmeUluZm9ybWF0aW9ucztcclxuICAgIHJldHVybiB2ZXJpZnlJbmZvcm1hdGlvbnM7XHJcbiAgfVxyXG4gIHByaXZhdGUgYnVpbGRGb3JtRXJyb3JzKGRvbVByb3BlcnR5TmFtZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcclxuICAgIGlmIChtZXNzYWdlKSB7XHJcbiAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlLnJlcGxhY2UoL1xcJHByb3BlcnR5L2csICdkb21Qcm9wZXJ0eU5hbWUnKTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBbZG9tUHJvcGVydHlOYW1lXToge1xyXG4gICAgICAgICAgZXJyb3JzOiB7XHJcbiAgICAgICAgICAgICd2YWxpZGF0ZSc6IHtcclxuICAgICAgICAgICAgICBuYW1lOiBtZXNzYWdlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIFtkb21Qcm9wZXJ0eU5hbWVdOiB7XHJcbiAgICAgICAgICBlcnJvcnM6IHt9XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH1cclxuICBwcml2YXRlIGJ1aWxkVmVyaWZ5SW5mb3JtYXRpb25zKGlkOiBzdHJpbmcsIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LCBkb21Qcm9wZXJ0eU5hbWU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCB2ZXJpZnlJbmZvcm1hdGlvbnMgPSB0aGlzLmdldFZlcmlmeUluZm9ybWF0aW9ucyhmcmFtZUNvbnRleHQpO1xyXG4gICAgY29uc3QgaW5kZXggPSB2ZXJpZnlJbmZvcm1hdGlvbnMuZmluZEluZGV4KChpdGVtOiBhbnkpID0+IHtcclxuICAgICAgcmV0dXJuIGl0ZW0uaWQgPT09IGlkXHJcbiAgICB9KTtcclxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcclxuICAgICAgdmVyaWZ5SW5mb3JtYXRpb25zLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICB9XHJcbiAgICB2ZXJpZnlJbmZvcm1hdGlvbnMucHVzaCh7XHJcbiAgICAgIGlkOiBpZCxcclxuICAgICAgbmFtZXNwYWNlOiBmcmFtZUNvbnRleHQubmFtZXNwYWNlLFxyXG4gICAgICB0YXJnZXRGaWVsZDogZG9tUHJvcGVydHlOYW1lLFxyXG4gICAgICBpbmRleDogdmVyaWZ5SW5mb3JtYXRpb25zLmxlbmd0aCArIDEsXHJcbiAgICAgIHRpdGxlOiBmcmFtZUNvbnRleHQuZm9ybS5mb3JtR3JvdXBOYW1lLFxyXG4gICAgICBtc2c6IG1lc3NhZ2UsXHJcbiAgICAgIHR5cGU6ICdlcnJvcidcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHZlcmlmeUluZm9ybWF0aW9ucztcclxuICB9XHJcbiAgcHJpdmF0ZSByZW1vdmVWYWxpZGF0ZVZlcmlmeUluZm9ybWF0aW9ucyhpZDogc3RyaW5nLCBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCkge1xyXG4gICAgY29uc3QgdmVyaWZ5SW5mb3JtYXRpb25zID0gdGhpcy5nZXRWZXJpZnlJbmZvcm1hdGlvbnMoZnJhbWVDb250ZXh0KTtcclxuICAgIGNvbnN0IGluZGV4ID0gdmVyaWZ5SW5mb3JtYXRpb25zLmZpbmRJbmRleCgoaXRlbTogYW55KSA9PiB7XHJcbiAgICAgIHJldHVybiBpdGVtLmlkID09PSBpZFxyXG4gICAgfSk7XHJcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgIHZlcmlmeUluZm9ybWF0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZlcmlmeUluZm9ybWF0aW9ucztcclxuICB9XHJcbn0iXX0=