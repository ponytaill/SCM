/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of, BehaviorSubject } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { FavoriteAction } from '../lookup-displaytype';
/**
 * @record
 */
export function SelectionState() { }
if (false) {
    /** @type {?} */
    SelectionState.prototype.selecteditems;
    /** @type {?} */
    SelectionState.prototype.favoriteItems;
    /** @type {?} */
    SelectionState.prototype.quickItems;
}
export class LookupSelectionService {
    /**
     * @param {?} ins
     */
    constructor(ins) {
        this.ins = ins;
        this.state = {
            selecteditems: [],
            favoriteItems: [],
            quickItems: []
        };
        this.state$ = new BehaviorSubject(this.state);
        this.selected$ = this.state$.pipe(switchMap((/**
         * @param {?} n
         * @return {?}
         */
        n => of(n.selecteditems))));
        this.favoriteItems$ = new BehaviorSubject({ items: this.state.favoriteItems, action: null });
        this.quickItems$ = this.state$.pipe(switchMap((/**
         * @param {?} n
         * @return {?}
         */
        n => of(n.quickItems))));
    }
    /**
     * @private
     * @return {?}
     */
    get idField() {
        return this.ins.idField;
    }
    /**
     * @param {?} items
     * @return {?}
     */
    initFavoriteItems(items) {
        this.state.favoriteItems = items || [];
    }
    //#region 收藏数据
    /**
     * @param {?} data
     * @param {?} action
     * @return {?}
     */
    updateFavoriteData(data, action) {
        if (this.ins.savingFaoriteData) {
            return;
        }
        if (action === FavoriteAction.add) {
            this.state.favoriteItems = this.state.favoriteItems.concat([data]);
        }
        else {
            this.state.favoriteItems = this.state.favoriteItems.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.idField] !== data[this.idField]));
        }
        this.favoriteItems$.next({ items: this.state.favoriteItems, action, data });
    }
    //#endregion
    //#region 多选数据
    /**
     * @param {?} data
     * @return {?}
     */
    loadSelections(data) {
        this.state.selecteditems = [...data];
        this.state$.next(this.state);
    }
    /**
     * @return {?}
     */
    getSelections() {
        return [...this.state.selecteditems];
    }
    /**
     * @param {?} item
     * @return {?}
     */
    select(item) {
        if (item) {
            this.state.selecteditems = [...this.state.selecteditems, item];
            this.state$.next(this.state);
        }
    }
    /**
     * @param {?} pathcode
     * @return {?}
     */
    unselectByPathcode(pathcode) {
        // const { dataField, pathField } = this.ins.treeInfo;
        this.state.selecteditems = this.state.selecteditems.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            /** @type {?} */
            const pathcode = this.ins.getPathCode(n, this.ins.treeInfo);
            return pathcode && pathcode.indexOf(pathcode) !== 0;
        }));
    }
    /**
     * @param {?} data
     * @param {?=} checked
     * @return {?}
     */
    updateSelections(data, checked = true) {
        if (!Array.isArray(data)) {
            data = [data];
        }
        /** @type {?} */
        const items = [...data];
        /** @type {?} */
        const idField = this.idField;
        if (checked) {
            if (this.state.selecteditems && !this.state.selecteditems.length) {
                this.state.selecteditems = items;
            }
            else {
                /** @type {?} */
                const ids = items.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[idField]));
                ids.forEach((/**
                 * @param {?} n
                 * @param {?} i
                 * @return {?}
                 */
                (n, i) => {
                    if (!this.state.selecteditems.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => r[idField] == n))) {
                        this.state.selecteditems.push(items[i]);
                    }
                }));
            }
        }
        else {
            if (data) {
                /** @type {?} */
                const ids2 = data.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[idField]));
                this.state.selecteditems = this.state.selecteditems.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    return ids2.indexOf(n[idField]) === -1;
                }));
            }
        }
        this.state$.next(this.state);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    unSelect(id) {
        if (id) {
            if (Array.isArray(id)) {
                this.state.selecteditems = this.state.selecteditems.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    return id.indexOf(n[this.idField]) === -1;
                }));
            }
            else {
                this.state.selecteditems = this.state.selecteditems.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[this.idField] != id));
            }
            this.state$.next(this.state);
        }
    }
    /**
     * @return {?}
     */
    clearSelections() {
        this.state.selecteditems = [];
        this.state$.next(this.state);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupSelectionService.prototype.state;
    /** @type {?} */
    LookupSelectionService.prototype.state$;
    /** @type {?} */
    LookupSelectionService.prototype.selected$;
    /** @type {?} */
    LookupSelectionService.prototype.favoriteItems$;
    /** @type {?} */
    LookupSelectionService.prototype.quickItems$;
    /**
     * @type {?}
     * @private
     */
    LookupSelectionService.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLXNlbGVjdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1sb29rdXAvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvbG9va3VwLXNlbGVjdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWMsRUFBRSxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7O0FBR3ZELG9DQUlDOzs7SUFIRyx1Q0FBcUI7O0lBQ3JCLHVDQUFxQjs7SUFDckIsb0NBQWtCOztBQUd0QixNQUFNLE9BQU8sc0JBQXNCOzs7O0lBd0IvQixZQUFvQixHQUF3QjtRQUF4QixRQUFHLEdBQUgsR0FBRyxDQUFxQjtRQXRCcEMsVUFBSyxHQUFtQjtZQUM1QixhQUFhLEVBQUUsRUFBRTtZQUNqQixhQUFhLEVBQUUsRUFBRTtZQUNqQixVQUFVLEVBQUUsRUFBRTtTQUNqQixDQUFDO1FBRUYsV0FBTSxHQUFvQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFMUUsY0FBUyxHQUFzQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDM0MsU0FBUzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsRUFBQyxDQUN0QyxDQUFDO1FBRUYsbUJBQWMsR0FBeUIsSUFBSSxlQUFlLENBQUMsRUFBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFFN0csZ0JBQVcsR0FBc0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQzdDLFNBQVM7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFD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LEVBQU87UUFDWixJQUFJLEVBQUUsRUFBRTtZQUNKLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTTs7OztnQkFBQyxDQUFDLENBQUMsRUFBRTtvQkFDM0QsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDOUMsQ0FBQyxFQUFDLENBQUM7YUFDTjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNOzs7O2dCQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUMsQ0FBQzthQUMxRjtZQUVELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNoQztJQUNMLENBQUM7Ozs7SUFFRCxlQUFlO1FBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDO1FBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0NBSUo7Ozs7OztJQS9IRyx1Q0FJRTs7SUFFRix3Q0FBMEU7O0lBRTFFLDJDQUVFOztJQUVGLGdEQUE2Rzs7SUFFN0csNkNBRUU7Ozs7O0lBTVUscUNBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEZhdm9yaXRlQWN0aW9uIH0gZnJvbSAnLi4vbG9va3VwLWRpc3BsYXl0eXBlJztcclxuaW1wb3J0IHsgTG9va3VwR3JpZENvbXBvbmVudCB9IGZyb20gJy4uL2xvb2t1cC1ncmlkLmNvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNlbGVjdGlvblN0YXRlIHtcclxuICAgIHNlbGVjdGVkaXRlbXM6IGFueVtdO1xyXG4gICAgZmF2b3JpdGVJdGVtczogYW55W107XHJcbiAgICBxdWlja0l0ZW1zOiBhbnlbXTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExvb2t1cFNlbGVjdGlvblNlcnZpY2Uge1xyXG5cclxuICAgIHByaXZhdGUgc3RhdGU6IFNlbGVjdGlvblN0YXRlID0ge1xyXG4gICAgICAgIHNlbGVjdGVkaXRlbXM6IFtdLFxyXG4gICAgICAgIGZhdm9yaXRlSXRlbXM6IFtdLFxyXG4gICAgICAgIHF1aWNrSXRlbXM6IFtdXHJcbiAgICB9O1xyXG5cclxuICAgIHN0YXRlJDogQmVoYXZpb3JTdWJqZWN0PFNlbGVjdGlvblN0YXRlPiA9IG5ldyBCZWhhdmlvclN1YmplY3QodGhpcy5zdGF0ZSk7XHJcblxyXG4gICAgc2VsZWN0ZWQkOiBPYnNlcnZhYmxlPGFueVtdPiA9IHRoaXMuc3RhdGUkLnBpcGUoXHJcbiAgICAgICAgc3dpdGNoTWFwKG4gPT4gb2Yobi5zZWxlY3RlZGl0ZW1zKSlcclxuICAgICk7XHJcblxyXG4gICAgZmF2b3JpdGVJdGVtcyQ6IEJlaGF2aW9yU3ViamVjdDxhbnk+ID0gbmV3IEJlaGF2aW9yU3ViamVjdCh7aXRlbXM6IHRoaXMuc3RhdGUuZmF2b3JpdGVJdGVtcywgYWN0aW9uOiBudWxsIH0pO1xyXG5cclxuICAgIHF1aWNrSXRlbXMkOiBPYnNlcnZhYmxlPGFueVtdPiA9IHRoaXMuc3RhdGUkLnBpcGUoXHJcbiAgICAgICAgc3dpdGNoTWFwKG4gPT4gb2Yobi5xdWlja0l0ZW1zKSlcclxuICAgICk7XHJcblxyXG4gICAgcHJpdmF0ZSBnZXQgaWRGaWVsZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbnMuaWRGaWVsZDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluczogTG9va3VwR3JpZENvbXBvbmVudCkge1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRGYXZvcml0ZUl0ZW1zKGl0ZW1zOiBhbnlbXSkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUuZmF2b3JpdGVJdGVtcyA9IGl0ZW1zIHx8IFtdO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyNyZWdpb24g5pS26JeP5pWw5o2uXHJcblxyXG4gICAgdXBkYXRlRmF2b3JpdGVEYXRhKGRhdGE6IGFueSwgYWN0aW9uOiBGYXZvcml0ZUFjdGlvbikge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pbnMuc2F2aW5nRmFvcml0ZURhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGFjdGlvbiA9PT0gRmF2b3JpdGVBY3Rpb24uYWRkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuZmF2b3JpdGVJdGVtcyA9IHRoaXMuc3RhdGUuZmF2b3JpdGVJdGVtcy5jb25jYXQoW2RhdGFdKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmZhdm9yaXRlSXRlbXMgPSB0aGlzLnN0YXRlLmZhdm9yaXRlSXRlbXMuZmlsdGVyKG4gPT4gblt0aGlzLmlkRmllbGRdICE9PSBkYXRhW3RoaXMuaWRGaWVsZF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5mYXZvcml0ZUl0ZW1zJC5uZXh0KHsgaXRlbXM6IHRoaXMuc3RhdGUuZmF2b3JpdGVJdGVtcywgYWN0aW9uLCBkYXRhIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgIC8vI3JlZ2lvbiDlpJrpgInmlbDmja5cclxuXHJcbiAgICBsb2FkU2VsZWN0aW9ucyggZGF0YTogW10pIHtcclxuICAgICAgICB0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMgPSBbLi4uZGF0YV07XHJcbiAgICAgICAgdGhpcy5zdGF0ZSQubmV4dCh0aGlzLnN0YXRlKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTZWxlY3Rpb25zKCkge1xyXG4gICAgICAgIHJldHVybiBbLi4udGhpcy5zdGF0ZS5zZWxlY3RlZGl0ZW1zXTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3QoaXRlbTogYW55KSB7XHJcbiAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZWxlY3RlZGl0ZW1zID0gWy4uLnRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtcywgaXRlbV07XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUkLm5leHQodGhpcy5zdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVuc2VsZWN0QnlQYXRoY29kZShwYXRoY29kZTogc3RyaW5nKSB7XHJcbiAgICAgICAgLy8gY29uc3QgeyBkYXRhRmllbGQsIHBhdGhGaWVsZCB9ID0gdGhpcy5pbnMudHJlZUluZm87XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5zZWxlY3RlZGl0ZW1zID0gdGhpcy5zdGF0ZS5zZWxlY3RlZGl0ZW1zLmZpbHRlcihuID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcGF0aGNvZGUgPSB0aGlzLmlucy5nZXRQYXRoQ29kZShuLCB0aGlzLmlucy50cmVlSW5mbyk7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXRoY29kZSAmJiBwYXRoY29kZS5pbmRleE9mKHBhdGhjb2RlKSAhPT0gMDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTZWxlY3Rpb25zKGRhdGE6IGFueSwgY2hlY2tlZCA9IHRydWUpIHtcclxuXHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSBbZGF0YV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpdGVtcyA9IFsgLi4uZGF0YSBdO1xyXG4gICAgICAgIGNvbnN0IGlkRmllbGQgPSB0aGlzLmlkRmllbGQ7XHJcbiAgICAgICAgaWYgKGNoZWNrZWQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtcyAmJiAhdGhpcy5zdGF0ZS5zZWxlY3RlZGl0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZWxlY3RlZGl0ZW1zID0gaXRlbXM7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZHMgPSBpdGVtcy5tYXAobiA9PiBuW2lkRmllbGRdKTtcclxuICAgICAgICAgICAgICAgIGlkcy5mb3JFYWNoKChuLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMuZmluZChyID0+IHJbaWRGaWVsZF0gPT0gbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZWxlY3RlZGl0ZW1zLnB1c2goaXRlbXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkczIgPSBkYXRhLm1hcChuID0+IG5baWRGaWVsZF0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZWxlY3RlZGl0ZW1zID0gdGhpcy5zdGF0ZS5zZWxlY3RlZGl0ZW1zLmZpbHRlcihuID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWRzMi5pbmRleE9mKG5baWRGaWVsZF0pID09PSAtMTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnN0YXRlJC5uZXh0KHRoaXMuc3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHVuU2VsZWN0KGlkOiBhbnkpIHtcclxuICAgICAgICBpZiAoaWQpIHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaWQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMgPSB0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMuZmlsdGVyKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpZC5pbmRleE9mKG5bdGhpcy5pZEZpZWxkXSkgPT09IC0xO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMgPSB0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMuZmlsdGVyKG4gPT4gblt0aGlzLmlkRmllbGRdICE9IGlkKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSQubmV4dCh0aGlzLnN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJTZWxlY3Rpb25zKCkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc3RhdGUkLm5leHQodGhpcy5zdGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8jZW5kcmVnaW9uXHJcblxyXG59XHJcbiJdfQ==