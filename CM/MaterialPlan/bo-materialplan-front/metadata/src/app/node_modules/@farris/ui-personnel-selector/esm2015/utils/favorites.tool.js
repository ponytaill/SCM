/**
 * @fileoverview added by tsickle
 * Generated from: utils/favorites.tool.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { of, Subject } from 'rxjs';
export class FavoritesTool {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.absOrgType = 'System_organization';
        this.busNum = 'common';
        this.idField = 'userId';
        this.favoritesList = [];
        this.enableFavorites = true;
        this.absRfQueryUrl = '/api/runtime/sys/v1.0/absRecentContacts/query';
        this.absRfModifyUrl = '/api/runtime/sys/v1.0/absRecentContacts/modify';
        this.subject = new Subject();
    }
    /**
     * 操作最近联系人或收藏夹
     * @param {?} actionToken
     * @param {?} param RfRequestParam
     * @return {?} observable
     */
    curdRecentContactsOrFavorites(actionToken, param) {
        /** @type {?} */
        let url = this.absRfQueryUrl;
        if (actionToken === 'modify') {
            url = this.absRfModifyUrl;
        }
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        return this.http.post(url, param, options);
    }
    /**
     * @return {?}
     */
    get favoritesSubject() {
        return this.subject.asObservable();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setFavoritesList(value) {
        this.subject.next(value);
    }
    /**
     * 获取收藏夹中人员列表
     * @return {?}
     */
    getFavoritesList() {
        if (this.enableFavorites) {
            /** @type {?} */
            const param = {
                absOrgType: this.absOrgType,
                bizId: this.busNum,
                objectValue: 'CollectUser'
            };
            return this.curdRecentContactsOrFavorites('query', param);
        }
        return of([]);
    }
    /**
     * 加入或取消收藏
     * @param {?} e 鼠标事件
     * @param {?} object
     * @return {?} Observable
     */
    toggleFavorites(e, object) {
        /** @type {?} */
        const id = object[this.idField];
        /** @type {?} */
        let action = 'add';
        /** @type {?} */
        const param = {
            absOrgType: this.absOrgType,
            bizId: this.busNum,
            objectValue: 'CollectUser'
        };
        if (this.favoritesList.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        item => item[this.idField] === id)) !== -1) {
            param.deleteList = [id];
            action = 'delete';
        }
        else {
            param.addList = [id];
        }
        this.curdRecentContactsOrFavorites('modify', param).subscribe((/**
         * @return {?}
         */
        () => {
            if (action === 'add') {
                /** @type {?} */
                const index = this.favoritesList.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item[this.idField] === id));
                if (index === -1) {
                    this.favoritesList.push(object);
                }
            }
            else {
                this.favoritesList = this.favoritesList.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item[this.idField] !== id));
            }
            this.setFavoritesList(this.favoritesList);
        }));
        e.cancelBubble = true;
        e.stopPropagation();
    }
    /**
     * 清空我的收藏
     * @return {?}
     */
    clearFavoritesList() {
        if (!this.favoritesList.length) {
            this.setFavoritesList(this.favoritesList);
            return;
        }
        /** @type {?} */
        const ids = this.favoritesList.map((/**
         * @param {?} item
         * @return {?}
         */
        item => item[this.idField]));
        /** @type {?} */
        const param = {
            absOrgType: this.absOrgType,
            bizId: this.busNum,
            objectValue: 'CollectUser',
            addList: [],
            deleteList: ids
        };
        this.curdRecentContactsOrFavorites('modify', param).subscribe((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            this.favoritesList = [];
            this.setFavoritesList(this.favoritesList);
        }));
    }
}
FavoritesTool.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FavoritesTool.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /** @type {?} */
    FavoritesTool.prototype.absOrgType;
    /** @type {?} */
    FavoritesTool.prototype.busNum;
    /** @type {?} */
    FavoritesTool.prototype.idField;
    /** @type {?} */
    FavoritesTool.prototype.favoritesList;
    /** @type {?} */
    FavoritesTool.prototype.enableFavorites;
    /** @type {?} */
    FavoritesTool.prototype.absRfQueryUrl;
    /** @type {?} */
    FavoritesTool.prototype.absRfModifyUrl;
    /**
     * @type {?}
     * @private
     */
    FavoritesTool.prototype.subject;
    /**
     * @type {?}
     * @private
     */
    FavoritesTool.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,