import { Directive, Input, HostListener, Self, Host, Optional, Output, EventEmitter, KeyValueDiffers } from '@angular/core';
import { ComboBoxComponent } from '@progress/kendo-angular-dropdowns';
import { LookupGridComponent } from '@farris/ui-lookup';
import { ComboListComponent } from '@farris/ui-combo-list';
import { ComboLookupComponent } from '@farris/ui-combo-lookup';
export class UIStateBindingDirective {
    constructor(hostComboComponent, hostHelpComponent, differs, hostComboListComponent, hostComboLookupComponent) {
        this.hostComboComponent = hostComboComponent;
        this.hostHelpComponent = hostHelpComponent;
        this.differs = differs;
        this.hostComboListComponent = hostComboListComponent;
        this.hostComboLookupComponent = hostComboLookupComponent;
        this.differ = null;
        this.UIStateBindingChange = new EventEmitter();
    }
    set bindingObject(value) {
        this._bindingObject = value;
        if (!this.differ && value && this.differs && typeof (value) === 'object') {
            this.differ = this.differs.find(value).create();
        }
    }
    get bindingObject() {
        return this._bindingObject;
    }
    onValueChange(val) {
        // host is combobox
        if (this.hostComboComponent && this.bindingObject) {
            if (val) {
                this.bindingObject.key = val.value;
                this.bindingObject.value = val.name;
            }
            else {
                this.bindingObject.key = null;
                this.bindingObject.value = null;
            }
        }
    }
    ngOnInit() {
        if (this.hostComboComponent) {
            this.hostComboComponent.valuePrimitive = false;
        }
        else if (this.hostHelpComponent) {
            this.bindObjectToHostLookup();
        }
        else if (this.hostComboListComponent) {
            this.bindObjectToHostComboList();
        }
        else if (this.hostComboLookupComponent) {
            this.bindObjectToHostComboLookup();
        }
    }
    ngDoCheck() {
        if (this.differ && typeof (this.bindingObject) === 'object') {
            const changes = this.differ && this.differ.diff(this.bindingObject);
            if (changes) {
                this.bindingChanges();
            }
        }
        else { // 兼容未重新编译工程，differ不存在从情况
            this.bindingChanges();
        }
    }
    bindingChanges() {
        const text = this.bindingObject ? this.bindingObject.value : null;
        const key = this.bindingObject ? this.bindingObject.key : null;
        if (this.hostComboComponent) {
            this.hostComboComponent.text = text;
            const vField = this.hostComboComponent.valueField;
            const item = this.hostComboComponent.data.find(n => n[vField] === key);
            this.hostComboComponent.writeValue(item);
        }
        else if (this.hostHelpComponent) {
            this.hostHelpComponent.writeValue(text);
            this.hostHelpComponent.displayValue = key;
        }
        else if (this.hostComboListComponent) {
            this.hostComboListComponent.writeValue(key);
        }
        else if (this.hostComboLookupComponent) {
            this.hostComboLookupComponent.selectedValues = key;
            this.hostComboLookupComponent.writeValue(text);
        }
    }
    ngOnChanges(changes) {
        if (changes.bindingObject && !this.differ) {
            this.bindingChanges();
        }
    }
    // 弹出帮助
    bindObjectToHostLookup() {
        if (!this.hostHelpComponent) {
            return;
        }
        this.hostHelpComponent.selectedData.subscribe((data) => this.updateHelpBindingObject(data));
        this.hostHelpComponent.clear.subscribe(() => {
            // this.bindingObject = {key: null, value: null};
            this.updateHelpBindingObject(null);
        });
        if (this.hostHelpComponent.nosearch) {
            this.hostHelpComponent.valueChanged.subscribe((txt) => {
                const idField = this.hostHelpComponent.idField;
                const textField = this.hostHelpComponent.textField;
                this.updateHelpBindingObject({
                    [idField]: txt,
                    [textField]: txt
                });
            });
        }
    }
    // 下拉列表
    bindObjectToHostComboList() {
        if (!this.hostComboListComponent) {
            return;
        }
        this.hostComboListComponent.valueChange.subscribe((data) => this.updateHelpBindingObject(data.selections));
        this.hostComboListComponent.clear.subscribe(() => {
            this.updateHelpBindingObject(null);
        });
    }
    // 下拉帮助
    bindObjectToHostComboLookup() {
        if (!this.hostComboLookupComponent) {
            return;
        }
        if (this.hostComboLookupComponent.multiSelect) {
            this.hostComboLookupComponent.valueChange.subscribe((data) => this.updateHelpBindingObject(data.selections));
        }
        else {
            // this.hostComboLookupComponent.selectChange.subscribe((data: any) => this.updateHelpBindingObject(data));
            this.hostComboLookupComponent.selectChange.subscribe((e) => {
                let data = e;
                if (e.data) {
                    data = e.data;
                }
                this.updateHelpBindingObject(data);
            });
        }
        this.hostComboLookupComponent.clear.subscribe(() => {
            this.updateHelpBindingObject(null);
        });
    }
    // 更新UISTATE
    updateHelpBindingObject(data) {
        let idField, textField;
        if (this.hostHelpComponent) {
            idField = this.hostHelpComponent.idField;
            textField = this.hostHelpComponent.textField;
        }
        if (this.hostComboListComponent) {
            idField = this.hostComboListComponent.idField;
            textField = this.hostComboListComponent.textField;
        }
        if (this.hostComboLookupComponent) {
            idField = this.hostComboLookupComponent.idField;
            textField = this.hostComboLookupComponent.textField;
        }
        this.emitUiStateBinding(data, idField, textField);
    }
    emitUiStateBinding(data, idField, textField) {
        const newObject = { key: null, value: null };
        if (data) {
            // const idField = this.hostHelpComponent.idField;
            // const textField = this.hostHelpComponent.textField;
            if (Array.isArray(data)) {
                newObject.key = data.map(d => d[idField]).join(',');
                newObject.value = data.map(d => {
                    if (textField.indexOf('.') > -1) {
                        return textField.split('.').reduce((r, c) => {
                            return r[c];
                        }, d);
                    }
                    else {
                        return d[textField];
                    }
                }).join(',');
            }
            else {
                if (idField) {
                    newObject.key = data[idField];
                }
                if (textField) {
                    if (textField.indexOf('.') > -1) {
                        newObject.value = textField.split('.').reduce((r, c) => {
                            return r[c];
                        }, data);
                    }
                    else {
                        newObject.value = data[textField];
                    }
                }
            }
        }
        this.UIStateBindingChange.emit(newObject);
    }
}
UIStateBindingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[UIStateBinding]'
            },] }
];
/** @nocollapse */
UIStateBindingDirective.ctorParameters = () => [
    { type: ComboBoxComponent, decorators: [{ type: Host }, { type: Self }, { type: Optional }] },
    { type: LookupGridComponent, decorators: [{ type: Host }, { type: Self }, { type: Optional }] },
    { type: KeyValueDiffers, decorators: [{ type: Optional }] },
    { type: ComboListComponent, decorators: [{ type: Host }, { type: Self }, { type: Optional }] },
    { type: ComboLookupComponent, decorators: [{ type: Host }, { type: Self }, { type: Optional }] }
];
UIStateBindingDirective.propDecorators = {
    bindingObject: [{ type: Input, args: ['UIStateBinding',] }],
    UIStateBindingChange: [{ type: Output }],
    onValueChange: [{ type: HostListener, args: ['valueChange', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWlzdGF0ZS1iaW5kaW5nLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMva2VuZG8tYmluZGluZy8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL3Vpc3RhdGUtYmluZGluZy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsWUFBWSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQXFELGVBQWUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2TCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN0RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUsvRCxNQUFNLE9BQU8sdUJBQXVCO0lBOEJsQyxZQUNzQyxrQkFBcUMsRUFDckMsaUJBQXNDLEVBQ3RELE9BQXdCLEVBQ1Isc0JBQTBDLEVBQzFDLHdCQUE4QztRQUo5Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1CO1FBQ3JDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBcUI7UUFDdEQsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFDUiwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQW9CO1FBQzFDLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBc0I7UUFqQzVFLFdBQU0sR0FBNkIsSUFBSSxDQUFDO1FBWXRDLHlCQUFvQixHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0lBc0J4RSxDQUFDO0lBaENMLElBQ0ksYUFBYSxDQUFDLEtBQVU7UUFDMUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUks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RUFBRTs0QkFDckQsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ2QsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO3FCQUNWO3lCQUFNO3dCQUNMLFNBQVMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO3FCQUNuQztpQkFDRjthQUNGO1NBQ0Y7UUFDRCxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVDLENBQUM7OztZQTdNRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjthQUM3Qjs7OztZQVBRLGlCQUFpQix1QkF1Q3JCLElBQUksWUFBSSxJQUFJLFlBQUksUUFBUTtZQXRDcEIsbUJBQW1CLHVCQXVDdkIsSUFBSSxZQUFJLElBQUksWUFBSSxRQUFRO1lBekNtSCxlQUFlLHVCQTBDMUosUUFBUTtZQXZDSixrQkFBa0IsdUJBd0N0QixJQUFJLFlBQUksSUFBSSxZQUFJLFFBQVE7WUF2Q3BCLG9CQUFvQix1QkF3Q3hCLElBQUksWUFBSSxJQUFJLFlBQUksUUFBUTs7OzRCQS9CMUIsS0FBSyxTQUFDLGdCQUFnQjttQ0FVdEIsTUFBTTs0QkFFTixZQUFZLFNBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT25Jbml0LCBIb3N0TGlzdGVuZXIsIFNlbGYsIEhvc3QsIE9wdGlvbmFsLCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBEb0NoZWNrLCBLZXlWYWx1ZURpZmZlciwgS2V5VmFsdWVEaWZmZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbWJvQm94Q29tcG9uZW50IH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItZHJvcGRvd25zJztcclxuaW1wb3J0IHsgTG9va3VwR3JpZENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktbG9va3VwJztcclxuaW1wb3J0IHsgQ29tYm9MaXN0Q29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1jb21iby1saXN0JztcclxuaW1wb3J0IHsgQ29tYm9Mb29rdXBDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWNvbWJvLWxvb2t1cCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tVSVN0YXRlQmluZGluZ10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBVSVN0YXRlQmluZGluZ0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBEb0NoZWNrIHtcclxuICBwcml2YXRlIF9iaW5kaW5nT2JqZWN0OiBhbnk7XHJcbiAgcHJpdmF0ZSBkaWZmZXI6IEtleVZhbHVlRGlmZmVyPGFueSwgYW55PiA9IG51bGw7XHJcblxyXG4gIEBJbnB1dCgnVUlTdGF0ZUJpbmRpbmcnKVxyXG4gIHNldCBiaW5kaW5nT2JqZWN0KHZhbHVlOiBhbnkpIHtcclxuICAgIHRoaXMuX2JpbmRpbmdPYmplY3QgPSB2YWx1ZTtcclxuICAgIGlmICghdGhpcy5kaWZmZXIgJiYgdmFsdWUgJiYgdGhpcy5kaWZmZXJzICYmIHR5cGVvZiAodmFsdWUpID09PSAnb2JqZWN0Jykge1xyXG4gICAgICB0aGlzLmRpZmZlciA9IHRoaXMuZGlmZmVycy5maW5kKHZhbHVlKS5jcmVhdGUoKTtcclxuICAgIH1cclxuICB9XHJcbiAgZ2V0IGJpbmRpbmdPYmplY3QoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fYmluZGluZ09iamVjdDtcclxuICB9XHJcbiAgQE91dHB1dCgpIFVJU3RhdGVCaW5kaW5nQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG5cclxuICBASG9zdExpc3RlbmVyKCd2YWx1ZUNoYW5nZScsIFsnJGV2ZW50J10pXHJcbiAgb25WYWx1ZUNoYW5nZSh2YWw6IGFueSkge1xyXG4gICAgLy8gaG9zdCBpcyBjb21ib2JveFxyXG4gICAgaWYgKHRoaXMuaG9zdENvbWJvQ29tcG9uZW50ICYmIHRoaXMuYmluZGluZ09iamVjdCkge1xyXG4gICAgICBpZiAodmFsKSB7XHJcbiAgICAgICAgdGhpcy5iaW5kaW5nT2JqZWN0LmtleSA9IHZhbC52YWx1ZTtcclxuICAgICAgICB0aGlzLmJpbmRpbmdPYmplY3QudmFsdWUgPSB2YWwubmFtZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmJpbmRpbmdPYmplY3Qua2V5ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmJpbmRpbmdPYmplY3QudmFsdWUgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBIb3N0KCkgQFNlbGYoKSBAT3B0aW9uYWwoKSBwcml2YXRlIGhvc3RDb21ib0NvbXBvbmVudDogQ29tYm9Cb3hDb21wb25lbnQsXHJcbiAgICBASG9zdCgpIEBTZWxmKCkgQE9wdGlvbmFsKCkgcHJpdmF0ZSBob3N0SGVscENvbXBvbmVudDogTG9va3VwR3JpZENvbXBvbmVudCxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgZGlmZmVyczogS2V5VmFsdWVEaWZmZXJzLFxyXG4gICAgQEhvc3QoKSBAU2VsZigpIEBPcHRpb25hbCgpIHByaXZhdGUgaG9zdENvbWJvTGlzdENvbXBvbmVudDogQ29tYm9MaXN0Q29tcG9uZW50LFxyXG4gICAgQEhvc3QoKSBAU2VsZigpIEBPcHRpb25hbCgpIHByaXZhdGUgaG9zdENvbWJvTG9va3VwQ29tcG9uZW50OiBDb21ib0xvb2t1cENvbXBvbmVudFxyXG4gICkgeyB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG5cclxuICAgIGlmICh0aGlzLmhvc3RDb21ib0NvbXBvbmVudCkge1xyXG4gICAgICB0aGlzLmhvc3RDb21ib0NvbXBvbmVudC52YWx1ZVByaW1pdGl2ZSA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmhvc3RIZWxwQ29tcG9uZW50KSB7XHJcbiAgICAgIHRoaXMuYmluZE9iamVjdFRvSG9zdExvb2t1cCgpO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmhvc3RDb21ib0xpc3RDb21wb25lbnQpIHtcclxuICAgICAgdGhpcy5iaW5kT2JqZWN0VG9Ib3N0Q29tYm9MaXN0KCk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuaG9zdENvbWJvTG9va3VwQ29tcG9uZW50KSB7XHJcbiAgICAgIHRoaXMuYmluZE9iamVjdFRvSG9zdENvbWJvTG9va3VwKCk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuICBuZ0RvQ2hlY2soKSB7XHJcbiAgICBpZiAodGhpcy5kaWZmZXIgJiYgdHlwZW9mICh0aGlzLmJpbmRpbmdPYmplY3QpID09PSAnb2JqZWN0Jykge1xyXG4gICAgICBjb25zdCBjaGFuZ2VzID0gdGhpcy5kaWZmZXIgJiYgdGhpcy5kaWZmZXIuZGlmZih0aGlzLmJpbmRpbmdPYmplY3QpO1xyXG4gICAgICBpZiAoY2hhbmdlcykge1xyXG4gICAgICAgIHRoaXMuYmluZGluZ0NoYW5nZXMoKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHsgLy8g5YW85a655pyq6YeN5paw57yW6K+R5bel56iL77yMZGlmZmVy5LiN5a2Y5Zyo5LuO5oOF5Ya1XHJcbiAgICAgIHRoaXMuYmluZGluZ0NoYW5nZXMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYmluZGluZ0NoYW5nZXMoKSB7XHJcbiAgICBjb25zdCB0ZXh0ID0gdGhpcy5iaW5kaW5nT2JqZWN0ID8gdGhpcy5iaW5kaW5nT2JqZWN0LnZhbHVlIDogbnVsbDtcclxuICAgIGNvbnN0IGtleSA9IHRoaXMuYmluZGluZ09iamVjdCA/IHRoaXMuYmluZGluZ09iamVjdC5rZXkgOiBudWxsO1xyXG4gICAgaWYgKHRoaXMuaG9zdENvbWJvQ29tcG9uZW50KSB7XHJcbiAgICAgIHRoaXMuaG9zdENvbWJvQ29tcG9uZW50LnRleHQgPSB0ZXh0O1xyXG4gICAgICBjb25zdCB2RmllbGQgPSB0aGlzLmhvc3RDb21ib0NvbXBvbmVudC52YWx1ZUZpZWxkO1xyXG4gICAgICBjb25zdCBpdGVtID0gdGhpcy5ob3N0Q29tYm9Db21wb25lbnQuZGF0YS5maW5kKG4gPT4gblt2RmllbGRdID09PSBrZXkpO1xyXG4gICAgICB0aGlzLmhvc3RDb21ib0NvbXBvbmVudC53cml0ZVZhbHVlKGl0ZW0pO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmhvc3RIZWxwQ29tcG9uZW50KSB7XHJcbiAgICAgIHRoaXMuaG9zdEhlbHBDb21wb25lbnQud3JpdGVWYWx1ZSh0ZXh0KTtcclxuICAgICAgdGhpcy5ob3N0SGVscENvbXBvbmVudC5kaXNwbGF5VmFsdWUgPSBrZXk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuaG9zdENvbWJvTGlzdENvbXBvbmVudCkge1xyXG4gICAgICB0aGlzLmhvc3RDb21ib0xpc3RDb21wb25lbnQud3JpdGVWYWx1ZShrZXkpO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmhvc3RDb21ib0xvb2t1cENvbXBvbmVudCkge1xyXG4gICAgICB0aGlzLmhvc3RDb21ib0xvb2t1cENvbXBvbmVudC5zZWxlY3RlZFZhbHVlcyA9IGtleTtcclxuICAgICAgdGhpcy5ob3N0Q29tYm9Mb29rdXBDb21wb25lbnQud3JpdGVWYWx1ZSh0ZXh0KTtcclxuICAgIH1cclxuICB9XHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgaWYgKGNoYW5nZXMuYmluZGluZ09iamVjdCAmJiAhdGhpcy5kaWZmZXIpIHtcclxuICAgICAgdGhpcy5iaW5kaW5nQ2hhbmdlcygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8g5by55Ye65biu5YqpXHJcbiAgcHJpdmF0ZSBiaW5kT2JqZWN0VG9Ib3N0TG9va3VwKCkge1xyXG4gICAgaWYgKCF0aGlzLmhvc3RIZWxwQ29tcG9uZW50KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmhvc3RIZWxwQ29tcG9uZW50LnNlbGVjdGVkRGF0YS5zdWJzY3JpYmUoKGRhdGE6IGFueSkgPT4gdGhpcy51cGRhdGVIZWxwQmluZGluZ09iamVjdChkYXRhKSk7XHJcblxyXG4gICAgdGhpcy5ob3N0SGVscENvbXBvbmVudC5jbGVhci5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAvLyB0aGlzLmJpbmRpbmdPYmplY3QgPSB7a2V5OiBudWxsLCB2YWx1ZTogbnVsbH07XHJcbiAgICAgIHRoaXMudXBkYXRlSGVscEJpbmRpbmdPYmplY3QobnVsbCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAodGhpcy5ob3N0SGVscENvbXBvbmVudC5ub3NlYXJjaCkge1xyXG4gICAgICB0aGlzLmhvc3RIZWxwQ29tcG9uZW50LnZhbHVlQ2hhbmdlZC5zdWJzY3JpYmUoKHR4dDogYW55KSA9PiB7XHJcbiAgICAgICAgY29uc3QgaWRGaWVsZCA9IHRoaXMuaG9zdEhlbHBDb21wb25lbnQuaWRGaWVsZDtcclxuICAgICAgICBjb25zdCB0ZXh0RmllbGQgPSB0aGlzLmhvc3RIZWxwQ29tcG9uZW50LnRleHRGaWVsZDtcclxuICAgICAgICB0aGlzLnVwZGF0ZUhlbHBCaW5kaW5nT2JqZWN0KHtcclxuICAgICAgICAgIFtpZEZpZWxkXTogdHh0LFxyXG4gICAgICAgICAgW3RleHRGaWVsZF06IHR4dFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIOS4i+aLieWIl+ihqFxyXG4gIHByaXZhdGUgYmluZE9iamVjdFRvSG9zdENvbWJvTGlzdCgpIHtcclxuICAgIGlmICghdGhpcy5ob3N0Q29tYm9MaXN0Q29tcG9uZW50KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmhvc3RDb21ib0xpc3RDb21wb25lbnQudmFsdWVDaGFuZ2Uuc3Vic2NyaWJlKChkYXRhOiBhbnkpID0+IHRoaXMudXBkYXRlSGVscEJpbmRpbmdPYmplY3QoZGF0YS5zZWxlY3Rpb25zKSk7XHJcblxyXG4gICAgdGhpcy5ob3N0Q29tYm9MaXN0Q29tcG9uZW50LmNsZWFyLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgIHRoaXMudXBkYXRlSGVscEJpbmRpbmdPYmplY3QobnVsbCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIOS4i+aLieW4ruWKqVxyXG4gIHByaXZhdGUgYmluZE9iamVjdFRvSG9zdENvbWJvTG9va3VwKCkge1xyXG4gICAgaWYgKCF0aGlzLmhvc3RDb21ib0xvb2t1cENvbXBvbmVudCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaG9zdENvbWJvTG9va3VwQ29tcG9uZW50Lm11bHRpU2VsZWN0KSB7XHJcbiAgICAgIHRoaXMuaG9zdENvbWJvTG9va3VwQ29tcG9uZW50LnZhbHVlQ2hhbmdlLnN1YnNjcmliZSgoZGF0YTogYW55KSA9PiB0aGlzLnVwZGF0ZUhlbHBCaW5kaW5nT2JqZWN0KGRhdGEuc2VsZWN0aW9ucykpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gdGhpcy5ob3N0Q29tYm9Mb29rdXBDb21wb25lbnQuc2VsZWN0Q2hhbmdlLnN1YnNjcmliZSgoZGF0YTogYW55KSA9PiB0aGlzLnVwZGF0ZUhlbHBCaW5kaW5nT2JqZWN0KGRhdGEpKTtcclxuICAgICAgdGhpcy5ob3N0Q29tYm9Mb29rdXBDb21wb25lbnQuc2VsZWN0Q2hhbmdlLnN1YnNjcmliZSgoZTogYW55KSA9PiB7XHJcbiAgICAgICAgbGV0IGRhdGEgPSBlO1xyXG4gICAgICAgIGlmKGUuZGF0YSkge1xyXG4gICAgICAgICAgZGF0YSA9IGUuZGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51cGRhdGVIZWxwQmluZGluZ09iamVjdChkYXRhKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5ob3N0Q29tYm9Mb29rdXBDb21wb25lbnQuY2xlYXIuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgdGhpcy51cGRhdGVIZWxwQmluZGluZ09iamVjdChudWxsKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8g5pu05pawVUlTVEFURVxyXG4gIHByaXZhdGUgdXBkYXRlSGVscEJpbmRpbmdPYmplY3QoZGF0YTogYW55KSB7XHJcbiAgICBsZXQgaWRGaWVsZCwgdGV4dEZpZWxkO1xyXG4gICAgaWYgKHRoaXMuaG9zdEhlbHBDb21wb25lbnQpIHtcclxuICAgICAgaWRGaWVsZCA9IHRoaXMuaG9zdEhlbHBDb21wb25lbnQuaWRGaWVsZDtcclxuICAgICAgdGV4dEZpZWxkID0gdGhpcy5ob3N0SGVscENvbXBvbmVudC50ZXh0RmllbGQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaG9zdENvbWJvTGlzdENvbXBvbmVudCkge1xyXG4gICAgICBpZEZpZWxkID0gdGhpcy5ob3N0Q29tYm9MaXN0Q29tcG9uZW50LmlkRmllbGQ7XHJcbiAgICAgIHRleHRGaWVsZCA9IHRoaXMuaG9zdENvbWJvTGlzdENvbXBvbmVudC50ZXh0RmllbGQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaG9zdENvbWJvTG9va3VwQ29tcG9uZW50KSB7XHJcbiAgICAgIGlkRmllbGQgPSB0aGlzLmhvc3RDb21ib0xvb2t1cENvbXBvbmVudC5pZEZpZWxkO1xyXG4gICAgICB0ZXh0RmllbGQgPSB0aGlzLmhvc3RDb21ib0xvb2t1cENvbXBvbmVudC50ZXh0RmllbGQ7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5lbWl0VWlTdGF0ZUJpbmRpbmcoZGF0YSwgaWRGaWVsZCwgdGV4dEZpZWxkKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZW1pdFVpU3RhdGVCaW5kaW5nKGRhdGEsIGlkRmllbGQsIHRleHRGaWVsZCkge1xyXG4gICAgY29uc3QgbmV3T2JqZWN0ID0geyBrZXk6IG51bGwsIHZhbHVlOiBudWxsIH07XHJcbiAgICBpZiAoZGF0YSkge1xyXG4gICAgICAvLyBjb25zdCBpZEZpZWxkID0gdGhpcy5ob3N0SGVscENvbXBvbmVudC5pZEZpZWxkO1xyXG4gICAgICAvLyBjb25zdCB0ZXh0RmllbGQgPSB0aGlzLmhvc3RIZWxwQ29tcG9uZW50LnRleHRGaWVsZDtcclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcclxuICAgICAgICBuZXdPYmplY3Qua2V5ID0gZGF0YS5tYXAoZCA9PiBkW2lkRmllbGRdKS5qb2luKCcsJyk7XHJcbiAgICAgICAgbmV3T2JqZWN0LnZhbHVlID0gZGF0YS5tYXAoZCA9PiB7XHJcbiAgICAgICAgICBpZiAodGV4dEZpZWxkLmluZGV4T2YoJy4nKSA+IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0RmllbGQuc3BsaXQoJy4nKS5yZWR1Y2UoKHIsIGMpID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gcltjXTtcclxuICAgICAgICAgICAgfSwgZCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZFt0ZXh0RmllbGRdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pLmpvaW4oJywnKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChpZEZpZWxkKSB7XHJcbiAgICAgICAgICBuZXdPYmplY3Qua2V5ID0gZGF0YVtpZEZpZWxkXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0ZXh0RmllbGQpIHtcclxuICAgICAgICAgIGlmICh0ZXh0RmllbGQuaW5kZXhPZignLicpID4gLTEpIHtcclxuICAgICAgICAgICAgbmV3T2JqZWN0LnZhbHVlID0gdGV4dEZpZWxkLnNwbGl0KCcuJykucmVkdWNlKChyLCBjKSA9PiB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHJbY107XHJcbiAgICAgICAgICAgIH0sIGRhdGEpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbmV3T2JqZWN0LnZhbHVlID0gZGF0YVt0ZXh0RmllbGRdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5VSVN0YXRlQmluZGluZ0NoYW5nZS5lbWl0KG5ld09iamVjdCk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=