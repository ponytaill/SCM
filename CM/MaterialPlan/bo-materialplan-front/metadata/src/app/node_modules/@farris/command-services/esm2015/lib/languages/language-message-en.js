/**
 * 英文语言消息
 */
class LanguageMessageForEn {
    constructor() {
        this.yes = 'Yes';
        this.no = 'No';
        this.unsaveNotifyTitle = 'Exist unsave record. Do save operation or not?';
        this.clientNotifyTitle = 'System Prompt In The Frontend';
        this.serverNotifyTitle = 'System Prompt In The Backend';
        this.cancelApproveSuccess = 'Cancel Approve Success';
        this.cancelApproveFailed = 'Cancel Approve Failed';
        this.unallowEmptyProcessInstanceName = 'Process Instance Name Can Not Be Empty';
        this.unallowEmptyBizBillId = 'Biz Bill Id Can Not Be Empty';
        this.unallowEmptyChildBizBillId = 'Child Biz Bill Id Can Not Be Empty';
        this.bizDefKeyRequired = 'Biz Def Key can\'t be empty.';
        this.procInsIdRequired = 'Process instance Id can\'t be empty.';
        this.addChildFailed = 'Add Child Failed';
        this.addSiblingFailed = 'Add Sibling Failed';
        this.addSubChildFailed = 'Add Sub Child Failed';
        this.addSubSiblingFailed = 'Add Sub Sibling Failed';
        this.deleteFailed = 'Delete Failed';
        this.multiSaveFailed = 'MultiSave Failed';
        this.appendFailed = 'Append Failed';
        this.queryFailed = 'Query Failed';
        this.cancelFailed = 'Cancel Failed';
        this.updateFailed = 'Update Failed';
        this.addFailed = 'Add Failed';
        this.loadFailed = 'Load Failed';
        this.saveSuccess = 'Successfully saved!';
        this.saveFailed = 'Save failed!';
        this.deleteSuccess = 'Successfully deleted!';
        this.deleteFaild = 'Failed to delete!';
        this.confirmDeletion = 'Confirm deletion?';
        this.submitSuccess = 'Submit successfully!';
        this.submitFaild = 'Submit failed!';
        this.notifyTitle = 'System prompt';
        this.httpError = 'HTTP request error! Please check the server error!';
        this.gridDataNotSave = 'The current page data is not saved. Turning the page will result in data loss. Do you want to continue turning the page?';
        this.exitWithoutSave = 'There is unsaved data. Do you want to continue closing?';
        this.notSupportMenuType = 'Not supported menu type!';
        this.cancelWithoutSave = 'Exist unsaved change,Confirm to cancel?';
        this.plsSelectDeleteData = 'Please select the data to delete!';
        this.errorHierarchyKey = 'Incorrect ierarchy key';
        this.plsSelectParentNode = 'Please select parent node!';
        this.deleteChildFirst = 'Please delete the child nodes first!';
        this.incorrectHierarchyConfig = 'Hierarchy config is incorrect!';
        this.operationFailed = 'The operation failed.';
        this.plsSelectEditData = 'Please select the data you want to edit!';
        this.plsSelectViewData = 'Please select the data you want to view!';
        this.plsUploadFirst = 'Please upload attachment first!';
        this.defaultDialogTitle = 'Dialog';
        this.changeToFirst = 'The first data.';
        this.changeToLast = 'The last data.';
        this.noProcessInstanceId = 'Please provide the process instance id.';
        this.noDataExist = 'Data does not exist to access the edit state!';
        this.noAttachment = 'There are no attachments to preview.';
        this.confirm = 'Confirm';
        this.cancel = 'Cancel';
        this.plsSelectCopyData = 'Please select the data you want to copy!';
        this.copyFieldsRequired = 'The copy fields can`t be empty!';
        this.pathIsRequired = 'The request url can`t be empty!';
        this.propsIsEmpty = 'The material has no props!';
        this.historyAttachment = 'The history attachment can`t be delete!';
        this.plsSelectDownloadAtt = 'Please select the attachment you want to download!';
        this.noDownloadAtt = 'There are no attachments to download!';
        this.plsCheckBatchEditRows = 'Please check the rows you want to edit!';
        this.plsSelectDetailFormData = 'Please select a detail form data first!';
        this.dataAndStateChanged = 'Are you sure you want to load the new data and switch to $1 state?';
        this.dataChanged = 'Are you sure you want to load the data and discards the current modification?';
        this.stateChanged = 'Are you sure you want to switch $1 state?';
        this.defaultStateName = 'init';
        this.copy = 'Copy detail message';
        this.copySuccess = 'Copy success';
        this.copyFailed = 'Copy failed';
        this.roger = 'Roger';
        this.appOrFuncIdRequired = 'No menu or application parameters are configured, please configure them in the designer.';
        this.tableCanNotEmpty = 'can not empty.';
    }
}
export { LanguageMessageForEn };
//# sourceMappingURL=data:application/json;base64,