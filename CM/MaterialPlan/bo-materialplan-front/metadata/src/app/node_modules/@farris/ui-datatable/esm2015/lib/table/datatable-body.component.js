/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LocaleService } from '@farris/ui-locale';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 13:53:03
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-01 15:02:29
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Input, Output, Optional, ElementRef, Renderer2, EventEmitter, Directive, HostListener, Injector } from '@angular/core';
import { convertColumns } from '../datatable-column';
import { DataTableService } from '../datatable.service';
import { DataTableComponent } from '../datatable.component';
import { ColumnFormatService } from '@farris/ui-common/column';
import { CommonUtils } from '@farris/ui-common';
export class DTDblClickRowDirective {
    /**
     * @param {?} el
     * @param {?} dt
     */
    constructor(el, dt) {
        this.el = el;
        this.dt = dt;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} event
     * @return {?}
     */
    ondblclick(event) {
        if (this.row) {
            this.dt.rowDblClick.emit(this.row);
        }
        event.stopPropagation();
    }
}
DTDblClickRowDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dblclick]'
            },] }
];
/** @nocollapse */
DTDblClickRowDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: DataTableComponent, decorators: [{ type: Optional }] }
];
DTDblClickRowDirective.propDecorators = {
    row: [{ type: Input, args: ['dblclick',] }],
    ondblclick: [{ type: HostListener, args: ['dblclick', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    DTDblClickRowDirective.prototype.row;
    /** @type {?} */
    DTDblClickRowDirective.prototype.el;
    /** @type {?} */
    DTDblClickRowDirective.prototype.dt;
}
export class DataTableBodyComponent {
    /**
     * @param {?} el
     * @param {?} dataService
     * @param {?} render
     * @param {?} dt
     * @param {?} colFormatSer
     * @param {?} utils
     * @param {?} injector
     */
    constructor(el, dataService, render, dt, colFormatSer, utils, injector) {
        this.el = el;
        this.dataService = dataService;
        this.render = render;
        this.dt = dt;
        this.colFormatSer = colFormatSer;
        this.utils = utils;
        this.injector = injector;
        this.rows = [];
        this.rowDblClick = new EventEmitter();
        this.selectRow = new EventEmitter();
        this.cellEdit = new EventEmitter();
        this.cellClick = new EventEmitter();
        this.lastRowIndex = 0;
        this.lastColumnIndex = 0;
        this.edit = {};
        this.className = {};
        this.isRowTempl = false;
        this.selectedRowIndex = -1;
        this._selections = {};
        this.emptyMessage = '暂无数据';
        this.localeService = this.injector.get(LocaleService);
    }
    // 已选择的行 默认为空
    /**
     * @param {?} v
     * @return {?}
     */
    set selections(v) {
        this._selections = v || {};
        this.dt.updateCheckboxState(this.rows);
    }
    /**
     * @return {?}
     */
    get selections() {
        if (!this._selections) {
            return;
        }
        /** @type {?} */
        const keys = Object.keys(this._selections);
        if (keys.length) {
            if (this.dt.singleSelect) {
                return this._selections;
            }
            else {
                return keys.map((/**
                 * @param {?} k
                 * @return {?}
                 */
                k => this._selections[k]));
            }
        }
        return undefined;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dataService.selectedAll.subscribe((/**
         * @param {?} allChecked
         * @return {?}
         */
        allChecked => {
            /** @type {?} */
            const idfield = this.idField();
            this.rows.forEach((/**
             * @param {?} row
             * @return {?}
             */
            row => {
                if (allChecked) {
                    this._selections[row[idfield]] = row;
                }
                else {
                    delete this._selections[row[idfield]];
                }
            }));
        }));
        if (this.rows) {
            this.isRowTempl = this.rows.some((/**
             * @param {?} row
             * @return {?}
             */
            row => {
                return row.hasOwnProperty('rowTempl');
            }));
        }
        if (this.fixed === 'left') {
            this.columns = convertColumns(this.columns, 'left');
        }
        if (this.fixed === 'right') {
            this.columns = convertColumns(this.columns, 'right');
        }
        this.emptyMessage = this.localeService.getValue('datagrid.emptyMessage');
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._rows = this.el.nativeElement.querySelectorAll('tr');
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.rows && !changes.rows.isFirstChange()) {
            if (!this.dt.singleSelect) {
                /** @type {?} */
                const _rows = changes.rows.currentValue || [];
                /** @type {?} */
                const checkedRows = _rows.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    return this.isSelected(n) ? n : 0;
                })).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n));
                if (!_rows.length) {
                    this.dataService.updateCheckAllStatus.next(0);
                    return;
                }
                /** @type {?} */
                const idfield = this.idField();
                /** @type {?} */
                let checkTotal = 0;
                _rows.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    if (checkedRows.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n[idfield] === element[idfield]))) {
                        checkTotal += 1;
                    }
                }));
                if (_rows.length === checkTotal) {
                    this.dataService.updateCheckAllStatus.next(1);
                }
                else {
                    if (checkedRows.length === 0) {
                        this.dataService.updateCheckAllStatus.next(0);
                    }
                    else {
                        this.dataService.updateCheckAllStatus.next(2);
                    }
                }
            }
        }
    }
    /**
     * 获取对象中指定字段的值。 field: 可以为带有层级结构的路径，如： user.firstName | name 等
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    getValue(field, data) {
        if (field.indexOf('.') === -1) {
            return data[field];
        }
        else {
            return (field.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                return obj[key];
            }), data) || '');
        }
    }
    /**
     * @param {?} event
     * @param {?} index
     * @param {?} data
     * @return {?}
     */
    selectedRow(event, index, data) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        /** @type {?} */
        let isSelected = false;
        /** @type {?} */
        const idfield = this.idField();
        if (this.dt.singleSelect) {
            if (this.selectedRowIndex !== index || !this._selections || this._selections[idfield] !== data[idfield]) {
                this.selectedRowIndex = index;
                this._selections = data;
                isSelected = true;
                this.dataService.selectedRow.next({
                    rowIndex: index,
                    rowData: data
                });
            }
            else {
                if (!this.dt.keepSelect) {
                    this.selectedRowIndex = -1;
                    this._selections = undefined;
                    isSelected = false;
                    this.dataService.unSelectedRow.next({
                        rowIndex: index,
                        rowData: data
                    });
                }
                else {
                    isSelected = true;
                }
            }
        }
        else {
            if (this.isSelected(data)) {
                delete this._selections[data[idfield]];
                isSelected = false;
                this.dataService.unSelectedRow.next({
                    rowIndex: index,
                    rowData: data
                });
            }
            else {
                this._selections[data[this.idField()]] = data;
                isSelected = true;
                this.dataService.selectedRow.next({
                    rowIndex: index,
                    rowData: data
                });
            }
        }
        if (isSelected) {
            this.dt.selectedRow.emit({ data, index });
            // 兼容
            this.dt.selectRows.emit({ data, index });
        }
        else {
            this.dt.unSelectRow.emit({ data, index });
        }
    }
    /**
     * @param {?} event
     * @param {?} index
     * @param {?} data
     * @return {?}
     */
    onChecked(event, index, data) {
        /** @type {?} */
        const state = event.checked;
        /** @type {?} */
        const idfield = this.dt.idField;
        if (state) {
            this._selections[data[idfield]] = data;
            this.dataService.selectedRow.next({
                rowIndex: index,
                rowData: data
            });
            this.dt.selectedRow.emit({ data, index });
            // 兼容
            this.dt.selectRows.emit({ data, index });
        }
        else {
            delete this._selections[data[idfield]];
            this.dataService.unSelectedRow.next({
                rowIndex: index,
                rowData: data
            });
            this.dt.unSelectRow.emit({ data, index });
        }
        event.originalEvent.stopPropagation();
    }
    /**
     * @private
     * @return {?}
     */
    idField() {
        return this.dt.idField;
    }
    /**
     * @param {?} row
     * @param {?=} tr
     * @return {?}
     */
    isSelected(row, tr) {
        /** @type {?} */
        const idfield = this.idField();
        if (this._selections) {
            if (this.dt.singleSelect) {
                return this._selections[idfield] === row[idfield];
            }
            else {
                return this._selections[row[idfield]] !== undefined;
            }
        }
        return false;
    }
    /**
     * @param {?} field
     * @param {?} data
     * @param {?} formatter
     * @return {?}
     */
    formatData(field, data, formatter) {
        /** @type {?} */
        const value = this.utils.getValue(field, data, true);
        return this.colFormatSer.format(value, data, formatter);
    }
    // 添加自定义设置列 单元格类样式
    /**
     * @param {?} value
     * @param {?} col
     * @return {?}
     */
    getTdClassName(value, col) {
        /** @type {?} */
        const tempClassName = {};
        // 列类的样式
        if (col.className &&
            Object.prototype.toString.call(col.className) === '[object String]') {
            tempClassName[col.className] = true;
        }
        if (this.cellClassName && this.cellClassName(value, col)) {
            tempClassName[this.cellClassName(value, col)] = true;
        }
        return tempClassName;
    }
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    createRowClassName(row, index) {
        return this.rowClassName ? this.rowClassName(row, index) : '';
    }
    /**
     * @param {?} event
     * @param {?} col
     * @param {?} row
     * @return {?}
     */
    onCellClick(event, col, row) {
        this.cellClick.emit({ event, col, row });
    }
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    renderRowStyle(row, index) {
        if (this.dt.rowStyler) {
            return this.dt.rowStyler({ data: row, index });
        }
        return '';
    }
    /**
     * @param {?} val
     * @param {?} row
     * @param {?} index
     * @param {?} col
     * @return {?}
     */
    renderCellStyle(val, row, index, col) {
        if (this.dt.cellStyler) {
            return this.dt.cellStyler({ value: val, data: row, index, col, field: col.field });
        }
        return '';
    }
}
DataTableBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'datatable-body',
                template: `
        <table
            class="table"
            [class.table-sm]="size === 'small'"
            [class.table-hover]="dt.hover"
            [class.table-striped]="striped"
            [class.table-bordered]="bordered"
            [class.f-table-norecords]="!rows || !rows.length"
            style="border-collapse: separate;border-spacing: 0;"
        >
            <colgroup>
                <col class="dt-checkbox-cell" *ngIf="!dt.singleSelect" />
                <col
                    *ngFor="let col of columns"
                    [style.width]="col.width + 'px'"
                />
            </colgroup>

            <tbody class="ui-table-tbody " *ngIf="rows && rows.length">
                <tr
                    *ngFor="let row of rows; trackBy: dt.trackByRows; let rowIndex = index"
                    [ngClass]="createRowClassName(row, rowIndex)"
                    (click)="selectedRow($event, rowIndex, row)"
                    [class.selected]="isSelected(row, tr)" #tr
                    [dblclick]="row"
                    [ngStyle]="renderRowStyle(row, rowIndex)"
                >
                    <td class="dt-checkbox-cell" *ngIf="!dt.singleSelect">
                        <dt-checkbox
                            [checked]="isSelected(row, tr)"
                            (checkedChange)="onChecked($event, rowIndex, row)"
                        ></dt-checkbox>
                    </td>
                    <td
                        [ngClass]="getTdClassName(row[col.field], col)"
                        *ngFor="let col of columns; let colIndex = index"
                        [style.textAlign]="col.align || 'left'"
                        [ngStyle]="renderCellStyle(utils.getValue(col.field, row), row, rowIndex, col)"
                        (click)="onCellClick($event, col, row)"
                        [class.datatable-fixed-right]="col['fixed'] === 'right'"
                    >
                        <ng-container *ngIf="!col.cellTempl; else cellTemp">
                            <span *ngIf="col.formatter" [innerHTML]="formatData(col.field, row, col.formatter) | safe:'html'" ></span>
                            <span *ngIf="!col.formatter" [title]="utils.getValue(col.field, row)"
                             [textContent]="utils.getValue(col.field, row)"></span>
                        </ng-container>
                        <ng-template
                            #cellTemp
                            [ngTemplateOutlet]="col.cellTempl"
                            [ngTemplateOutletContext]="{
                                $implicit: row,
                                rowIndex: rowIndex,
                                value: row[col.field]
                            }"
                        ></ng-template>
                    </td>
                </tr>
            </tbody>

            <tbody class="ui-table-tbody" *ngIf="!rows || !rows.length">
                <tr class="f-table-norecords-row">
                    <td [attr.align]="'center'"
                        class="farris-treetable-emptydata"
                        [attr.colspan]="columns.length"
                    >
                        <div
                            class="f-table-norecords-content"
                            [innerHTML]="emptyMessage | safe: 'html'"
                        ></div>
                    </td>
                </tr>
            </tbody>
        </table>
    `,
                styles: [`
            .table td:focus-within {
                box-shadow: inset 0 0 0 2px rgba(0, 0, 0, 0.13);
            }
            .table td div {
                width: 100%;
                height: 100%;
            }
            .table td input {
                width: 100%;
                height: 100%;
                font-family: auto;
                line-height: 1;
                font-size: 13px;
            }
            .table td input:focus {
                border: 0;
            }
            input[type='checkbox']:focus {
                outline: none;
            }

            .f-table-norecords-row:hover {
                background-color: #0000!important;
                cursor: default!important;
            }
        `]
            }] }
];
/** @nocollapse */
DataTableBodyComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: DataTableService },
    { type: Renderer2 },
    { type: DataTableComponent, decorators: [{ type: Optional }] },
    { type: ColumnFormatService },
    { type: CommonUtils },
    { type: Injector }
];
DataTableBodyComponent.propDecorators = {
    size: [{ type: Input }],
    hover: [{ type: Input }],
    bordered: [{ type: Input }],
    striped: [{ type: Input }],
    columns: [{ type: Input }],
    fixed: [{ type: Input }],
    rows: [{ type: Input }],
    rowClassName: [{ type: Input }],
    cellClassName: [{ type: Input }],
    rowDblClick: [{ type: Output }],
    selectRow: [{ type: Output }],
    cellEdit: [{ type: Output }],
    cellClick: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DataTableBodyComponent.prototype.size;
    /** @type {?} */
    DataTableBodyComponent.prototype.hover;
    /** @type {?} */
    DataTableBodyComponent.prototype.bordered;
    /** @type {?} */
    DataTableBodyComponent.prototype.striped;
    /** @type {?} */
    DataTableBodyComponent.prototype.columns;
    /** @type {?} */
    DataTableBodyComponent.prototype.fixed;
    /** @type {?} */
    DataTableBodyComponent.prototype.rows;
    /** @type {?} */
    DataTableBodyComponent.prototype.rowClassName;
    /** @type {?} */
    DataTableBodyComponent.prototype.cellClassName;
    /** @type {?} */
    DataTableBodyComponent.prototype.rowDblClick;
    /** @type {?} */
    DataTableBodyComponent.prototype.selectRow;
    /** @type {?} */
    DataTableBodyComponent.prototype.cellEdit;
    /** @type {?} */
    DataTableBodyComponent.prototype.cellClick;
    /** @type {?} */
    DataTableBodyComponent.prototype.lastRowIndex;
    /** @type {?} */
    DataTableBodyComponent.prototype.lastColumnIndex;
    /** @type {?} */
    DataTableBodyComponent.prototype.boxShadow;
    /** @type {?} */
    DataTableBodyComponent.prototype._rows;
    /** @type {?} */
    DataTableBodyComponent.prototype.edit;
    /** @type {?} */
    DataTableBodyComponent.prototype.className;
    /** @type {?} */
    DataTableBodyComponent.prototype.isRowTempl;
    /** @type {?} */
    DataTableBodyComponent.prototype.selectedRowIndex;
    /** @type {?} */
    DataTableBodyComponent.prototype._selections;
    /** @type {?} */
    DataTableBodyComponent.prototype.emptyMessage;
    /**
     * @type {?}
     * @private
     */
    DataTableBodyComponent.prototype.localeService;
    /** @type {?} */
    DataTableBodyComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DataTableBodyComponent.prototype.dataService;
    /**
     * @type {?}
     * @private
     */
    DataTableBodyComponent.prototype.render;
    /** @type {?} */
    DataTableBodyComponent.prototype.dt;
    /** @type {?} */
    DataTableBodyComponent.prototype.colFormatSer;
    /** @type {?} */
    DataTableBodyComponent.prototype.utils;
    /**
     * @type {?}
     * @private
     */
    DataTableBodyComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,