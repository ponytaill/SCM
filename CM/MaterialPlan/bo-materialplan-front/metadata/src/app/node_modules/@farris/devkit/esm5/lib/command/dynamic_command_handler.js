import * as tslib_1 from "tslib";
import { ReflectiveInjector } from '@angular/core';
import { isObservable, of, Subject } from 'rxjs';
import { CommandHandler } from './command_handler';
var DynamicCommandHandler = /** @class */ (function (_super) {
    tslib_1.__extends(DynamicCommandHandler, _super);
    function DynamicCommandHandler(commandName, method) {
        var _this = _super.call(this) || this;
        _this.commandName = commandName;
        _this.method = method;
        return _this;
    }
    DynamicCommandHandler.prototype.dynamicInvoke = function (serviceTocken, method, args, context) {
        var serviceInstance = context.frameContext.injector.get(serviceTocken, null);
        if (serviceInstance) {
            this.setContextToServiceInstance(serviceInstance, context);
            var parsedStageParams = this.parseService.parse(args, context);
            var parsedArgs = parsedStageParams.map(function (param) { return param.expression; });
            // tslint:disable-next-line: ban-types
            var serviceMethod = serviceInstance[method];
            return serviceMethod.apply(serviceInstance, parsedArgs);
        }
    };
    DynamicCommandHandler.prototype.dynamicInvoke2 = function (methodObject, context) {
        var _this = this;
        var serviceUri = methodObject.source, serviceName = methodObject.service, method = methodObject.method;
        var args = methodObject.params.map(function (stageParam) {
            return Object.assign({}, stageParam);
        });
        var result$ = new Subject();
        // const serviceSpecifer = controllerMap.imports[serviceUri] || serviceUri;
        var serviceSpecifer = serviceUri && serviceUri.toLowerCase();
        if (serviceSpecifer) {
            System.import(serviceSpecifer)
                .then(function (serviceModule) {
                var serviceConstructor = serviceModule[serviceName];
                if (serviceConstructor) {
                    var originalContextInjector_1 = context.frameContext.injector;
                    var serviceInstance = void 0;
                    // const resolvedReflectiveProviders = ReflectiveInjector.resolve([{ provide: serviceName, useClass: serviceConstructor }]);
                    if (context.frameContext.injector.get(serviceName, null)) {
                        serviceInstance = context.frameContext.injector.get(serviceName);
                    }
                    else {
                        var resolvedReflectiveProviders = _this.loadProvidersFromModule(serviceModule);
                        var reflectiveInjector = ReflectiveInjector.fromResolvedProviders(resolvedReflectiveProviders, context.frameContext.injector);
                        context.frameContext.injector = reflectiveInjector;
                        serviceInstance = reflectiveInjector.get(serviceName, null);
                    }
                    if (serviceInstance) {
                        _this.setContextToServiceInstance(serviceInstance, context);
                        var parsedStageParams = _this.parseService.parse(args, context);
                        var parsedArgs = parsedStageParams.map(function (param) { return param.expression; });
                        // tslint:disable-next-line: ban-types
                        var serviceMethod = serviceInstance[method];
                        var serviceMethodResult = serviceMethod.apply(serviceInstance, parsedArgs);
                        var result$$ = isObservable(serviceMethodResult) ? serviceMethodResult : of(serviceMethodResult);
                        result$$.subscribe({
                            next: function (result) {
                                result$.next(result);
                            },
                            error: function (error) {
                                result$.error(error);
                            },
                            complete: function () {
                                result$.complete();
                                context.frameContext.injector = originalContextInjector_1;
                            },
                        });
                        // return serviceMethod.apply(serviceInstance, parsedArgs);
                    }
                }
            });
        }
        return result$;
    };
    DynamicCommandHandler.prototype.schedule = function () {
        this.scheduleStages(this.method.stages, null);
        // this.method.stages.reduce((preStage: MethodStage, currentStage: MethodStage) => {
        //   if (currentStage.type === '0') {
        //     this.addTask(currentStage.name, (context: CommandContext) => {
        //       return this.dynamicInvoke2(currentStage as ExecutingStage, context);
        //     });
        //     if (preStage) {
        //       this.addLink(preStage.name, currentStage.name, `1===1`);
        //     }
        //   } else if (currentStage.type === '2') {
        //   } else {
        //     throw new Error(`unknow method stage type, the ${currentStage.name}'s type is ${currentStage.type}`);
        //   }
        //   return currentStage;
        // }, null);
    };
    DynamicCommandHandler.prototype.scheduleStages = function (stages, initialStage) {
        var _this = this;
        stages.reduce(function (preStage, currentStage) {
            if (currentStage.type === 'executing') {
                _this.addTask(currentStage.name, function (context) {
                    return _this.dynamicInvoke2(currentStage, context);
                });
            }
            else if (currentStage.type === 'fork') {
                var forkStages = currentStage.stages;
                forkStages.forEach(function (forkStage) {
                    _this.scheduleStages(forkStage.stages, forkStage);
                });
                _this.scheduleStages(currentStage.stages, currentStage);
            }
            else if (currentStage.type === 'determing') {
                _this.addTask(currentStage.name, function (context) {
                    return of(true);
                });
            }
            else {
                throw new Error("unknow method stage type, the " + currentStage.name + "'s type is " + currentStage.type);
            }
            if (preStage) {
                var condition = preStage.type === 'determing' ? preStage.condition : "1===1";
                _this.addLink(preStage.name, currentStage.name, condition);
            }
            return currentStage;
        }, initialStage);
    };
    DynamicCommandHandler.prototype.loadProvidersFromModule = function (serviceModule) {
        var providerArray = [];
        for (var propertyName in serviceModule) {
            if (Object.prototype.hasOwnProperty.call(serviceModule, propertyName)) {
                var propertyValue = serviceModule[propertyName];
                if (this.isInjectableService(propertyValue)) {
                    // const providerName = propertyValue.name === 'e' ? propertyName : propertyValue.name;
                    var providerName = propertyName;
                    providerArray.push({ provide: providerName, useClass: propertyValue });
                    providerArray.push(propertyValue);
                }
            }
        }
        var resolvedReflectiveProviders = ReflectiveInjector.resolve(providerArray);
        return resolvedReflectiveProviders;
    };
    DynamicCommandHandler.prototype.isInjectableService = function (propertyValue) {
        var hasInjectableDecorator = false;
        var isFunction = propertyValue instanceof Function;
        if (isFunction && propertyValue.hasOwnProperty('decorators')) {
            var decorators = propertyValue.decorators;
            var injectableDecorators = decorators.filter(function (decorator) {
                if (decorator.type && decorator.type.prototype && decorator.type.prototype.ngMetadataName === 'Injectable') {
                    return decorator;
                }
            });
            hasInjectableDecorator = injectableDecorators && injectableDecorators.length > 0;
        }
        else if (isFunction && propertyValue.hasOwnProperty('__annotations__')) {
            var decorators = propertyValue.__annotations__;
            var injectableDecorators = decorators.filter(function (decoratorFactory) {
                if (decoratorFactory && decoratorFactory.ngMetadataName && decoratorFactory.ngMetadataName === 'Injectable') {
                    return decoratorFactory;
                }
            });
            hasInjectableDecorator = injectableDecorators && injectableDecorators.length > 0;
        }
        return hasInjectableDecorator;
    };
    return DynamicCommandHandler;
}(CommandHandler));
export { DynamicCommandHandler };
//# sourceMappingURL=data:application/json;base64,