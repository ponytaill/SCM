import { Injectable, InjectFlags, Optional } from '@angular/core';
import { from, of, empty, EMPTY } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { UploadDialogService, UploadLimit, DownloadService, FileState } from '@gsp-svc/formdoc-upload';
import { FileViewerService } from '@gsp-svc/file-viewer';
import { FrameContext, BindingPathConverter, DataPathCreator } from '@farris/devkit';
import { FormNotifyService } from '../form-notify.service';
import { AttachmentUtil } from './attachment.util';
import { AttachmentDataService } from './attachment-data.service';
import { LanguageService } from '../languag.service';
import { EntityService } from '../entity-services/index';
// tslint:disable: max-line-length
/**
 * 附件服务
 */
class AttachmentService {
    /**
     * 构造函数
     */
    constructor(frameContext, attachDataService, notifyService, uploadDialogService, downloadService) {
        this.frameContext = frameContext;
        this.attachDataService = attachDataService;
        this.notifyService = notifyService;
        this.uploadDialogService = uploadDialogService;
        this.downloadService = downloadService;
        /**
         * 默认根目录
         */
        this.defaultRootDirId = '';
        this.setLanguageService();
        this.fileViewerService = this.frameContext.injector.get(FileViewerService, null, InjectFlags.Optional);
        this.entityService = this.frameContext.injector.get(EntityService, null, InjectFlags.Optional);
        if (!this.downloadService && typeof DownloadService !== 'undefined') {
            this.downloadService = this.frameContext.injector.get(DownloadService, null);
        }
    }
    /**
     * 默认父路径
     */
    get defaultParentDirName() {
        return this.frameContext.bindingData.list.currentId;
    }
    /**
     * 绑定数据
     */
    get bindingData() {
        return this.frameContext.bindingData;
    }
    /**
     * 设置语言服务
     */
    setLanguageService() {
        const injector = this.frameContext.injector;
        this.languageService = injector.get(LanguageService, null, InjectFlags.Optional);
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 上传单个文件
     * @param attachmentIdPath 附件内码字段的路径，形如/attachInfo/attachmentId；
     * @param attachmentNamePath 附件名称字段的路径
     */
    uploadAndUpdateRow(attachmentInfoFieldPath, rootDirId, parentDirName, fileType, id) {
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        const uploadLimit = new UploadLimit();
        uploadLimit.fileCount = 1;
        if (fileType) {
            uploadLimit.fileType = fileType;
        }
        // 获取老的附件id数组
        const attachmentIdList = [];
        let currentItem = null;
        if (id) {
            // 修正当前行
            const bindingList = this.frameContext.bindingData.getList();
            if (bindingList.currentId !== id) {
                bindingList.setCurrentId(id, true, true);
            }
            // 如果指定了id则获取指定id的行
            currentItem = this.getSpecialRow(attachmentInfoFieldPath, id);
        }
        else {
            // 没有指定则使用当前行，可能存在当前行和事件行不一致的情况，此时应该在命令中传递id参数
            currentItem = this.getCurrentRow(attachmentInfoFieldPath);
        }
        if (currentItem && currentItem.primaryKeyValue) {
            const attachmentIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, [currentItem.primaryKeyValue]);
            if (attachmentIds && attachmentIds.length > 0) {
                attachmentIdList.push.apply(attachmentIdList, attachmentIds);
            }
        }
        const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit, attachmentIdList));
        const result$ = dialog$.pipe(switchMap((fileInfos) => {
            if (!fileInfos || fileInfos.length === 0) {
                this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });
                return empty();
            }
            // 过滤出state为新增的附件
            fileInfos = fileInfos.filter((fileInfo) => {
                if (fileInfo.hasOwnProperty('state')) {
                    return fileInfo.state === FileState.New;
                }
                return true;
            });
            if (fileInfos.length === 0) {
                return of(true);
            }
            // 是否上传判断
            const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
            const firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);
            return this.attachDataService.updateRow(attachmentInfoFieldPath, firstAttachmentInfo);
        }));
        return result$;
    }
    /**
     * 上传单个文件（支持多列）
     * @param attachmentInfoFieldPath 附件内码字段的路径，形如/attachInfo/attachmentId；
     * @param rootDirId 附件存储根目录
     * @param parentDirName 附件存储目录
     * @param fileType 文件类型，like .txt,.docx
     */
    uploadAndUpdateRowWithPropertyName(attachmentInfoFieldPath, rootDirId, parentDirName, fileType, id) {
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        const uploadLimit = new UploadLimit();
        uploadLimit.fileCount = 1;
        if (fileType) {
            uploadLimit.fileType = fileType;
        }
        // 获取老的附件id数组
        const attachmentIdList = [];
        let currentItem = null;
        if (id) {
            // 修正当前行
            const bindingList = this.frameContext.bindingData.getList();
            if (bindingList.currentId !== id) {
                bindingList.setCurrentId(id, true, true);
            }
            // 如果指定了id则获取指定id的行
            currentItem = this.getSpecialRow(attachmentInfoFieldPath, id);
        }
        else {
            // 没有指定则使用当前行，可能存在当前行和事件行不一致的情况，此时应该在命令中传递id参数
            currentItem = this.getCurrentRow(attachmentInfoFieldPath);
        }
        if (currentItem && currentItem.primaryKeyValue) {
            const attachmentIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, [currentItem.primaryKeyValue]);
            if (attachmentIds && attachmentIds.length > 0) {
                attachmentIdList.push.apply(attachmentIdList, attachmentIds);
            }
        }
        const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit, attachmentIdList));
        const result$ = dialog$.pipe(switchMap((fileInfos) => {
            if (!fileInfos || fileInfos.length === 0) {
                this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });
                return EMPTY;
            }
            // 过滤出state为新增的附件
            fileInfos = fileInfos.filter((fileInfo) => {
                if (fileInfo.hasOwnProperty('state')) {
                    return fileInfo.state === FileState.New;
                }
                return true;
            });
            if (fileInfos.length === 0) {
                return of(true);
            }
            // 是否上传判断
            const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
            const firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);
            return this.attachDataService.updateRowWithPropertyName(attachmentInfoFieldPath, firstAttachmentInfo);
        }));
        return result$;
    }
    /**
     * 上传多个文件
     */
    uploadAndBatchAddRows(attachmentInfoFieldPath, rootDirId, parentDirName, fileType) {
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        const uploadLimit = new UploadLimit();
        if (fileType) {
            uploadLimit.fileType = fileType;
        }
        const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit));
        const result$ = dialog$.pipe(switchMap((fileInfos) => {
            if (!fileInfos || fileInfos.length === 0) {
                this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });
                return EMPTY;
            }
            // 过滤出state为新增的附件
            fileInfos = fileInfos.filter((fileInfo) => {
                if (fileInfo.hasOwnProperty('state')) {
                    return fileInfo.state === FileState.New;
                }
                return true;
            });
            if (fileInfos.length === 0) {
                return of(true);
            }
            const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
            return this.attachDataService.updateRows(attachmentInfoFieldPath, attachmentInfos);
        }));
        return result$;
    }
    /**
     * 上传多个文件
     */
    uploadAndBatchAddRowsWithPropertyName(attachmentInfoFieldPath, rootDirId, parentDirName, fileType, id) {
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        const uploadLimit = new UploadLimit();
        if (fileType) {
            uploadLimit.fileType = fileType;
        }
        if (id) {
            // 修正当前行
            const bindingList = this.frameContext.bindingData.getList();
            if (bindingList.currentId !== id) {
                bindingList.setCurrentId(id, true, true);
            }
        }
        const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit));
        const result$ = dialog$.pipe(switchMap((fileInfos) => {
            if (!fileInfos || fileInfos.length === 0) {
                this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });
                return EMPTY;
            }
            // 过滤出state为新增的附件
            fileInfos = fileInfos.filter((fileInfo) => {
                if (fileInfo.hasOwnProperty('state')) {
                    return fileInfo.state === FileState.New;
                }
                return true;
            });
            if (fileInfos.length === 0) {
                return of(true);
            }
            const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
            return this.attachDataService.updateRowsWithPropertyName(attachmentInfoFieldPath, attachmentInfos);
        }));
        return result$;
    }
    /**
     * 下载附件（根据附件id）
     */
    download(attachId, rootId) {
        if (!attachId) {
            this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        rootId = rootId || 'default-root';
        const url = this.getDownloadUrl([attachId], rootId);
        // let url = '';
        // if (rootId) {
        //   url = `/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${attachId}&rootid=${rootId}`;
        // } else {
        //   url = `/api/runtime/dfs/v1.0/formdoc/download/${attachId}`;
        // }
        window.open(url);
        return of(true);
    }
    /**
     * 批量下载附件（根据附件id数组）
     */
    batchDownload(attachIds, rootId) {
        if (!attachIds || attachIds.length === 0) {
            this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        // 只选择一个附件时按单个附件下载处理
        if (attachIds.length === 1) {
            return this.download(attachIds[0], rootId);
        }
        // const attachIdsString = JSON.stringify(attachIds);
        // const url = `/api/runtime/dfs/v1.0/formdoc/multiple/download?metadataidlist=${attachIdsString}&rootid=${rootId}`;
        const url = this.getDownloadUrl(attachIds, rootId);
        window.open(url);
        return of(true);
    }
    /**
     * 获取下载路径
     * @param metadataidlist 附件id数组
     * @param rootId rootId
     */
    getDownloadUrl(metadataidlist, rootId) {
        rootId = rootId || 'default-root';
        if (this.downloadService) {
            if (metadataidlist.length === 1) {
                return this.downloadService.getDownloadUrl(metadataidlist[0], rootId);
            }
            else {
                const attachIdsString = JSON.stringify(metadataidlist);
                return this.downloadService.getMultipleDownloadUrl(attachIdsString, rootId);
            }
        }
        else {
            console.warn('因安全问题，附件下载提供安全校验机制，附件下载功能需重新编译。');
            if (metadataidlist.length === 1) {
                return `/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${metadataidlist[0]}&rootid=${rootId}`;
            }
            else {
                const attachIdsString = JSON.stringify(metadataidlist);
                return `/api/runtime/dfs/v1.0/formdoc/multiple/download?metadataidlist=${attachIdsString}&rootid=${rootId}`;
            }
        }
    }
    /**
     * 下载（根据数据id）
     */
    downloadByDataId(dataId, attachmentInfoFieldPath, rootId) {
        if (!dataId) {
            this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        const dataIds = [dataId];
        const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);
        if (attachIds.length === 0) {
            this.notifyService.warning(this.languageService.noDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        const attachId = attachIds[0];
        return this.download(attachId);
    }
    /**
     * 批量下载附件
     */
    batchDownloadByDataIds(dataIds, attachmentInfoFieldPath, rootId) {
        if (typeof dataIds === 'string' && dataIds && dataIds.length > 0) {
            dataIds = dataIds.split(',').filter(p => p);
        }
        if (!dataIds || Array.isArray(dataIds) === false || dataIds.length === 0) {
            this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        const ids = [].concat(dataIds);
        const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, ids);
        if (attachIds.length === 0) {
            this.notifyService.warning(this.languageService.noDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        return this.batchDownload(attachIds, rootId);
    }
    /**
     * 根据附件UDT字段的路径预览附件
     * @param attachmentInfoFieldPath 附件UDT字段path
     * @param rootDirId 跟目录id
     * @param ids 附件id
     */
    previewByAttachmentInfoFieldPath(attachmentInfoFieldPath, rootDirId, ids) {
        if (!attachmentInfoFieldPath || !rootDirId) {
            throw new Error('attachmentInfoFieldPath和rootDirId不能为空，请填写');
        }
        let attachIds = [];
        let dataIds = [];
        if (ids && ids.length > 0) {
            if (typeof (ids) === 'string') {
                dataIds.push(ids);
            }
            else {
                dataIds = ids;
            }
            attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);
        }
        else {
            attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);
        }
        if (attachIds && attachIds.length === 0) {
            this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
            return EMPTY;
        }
        return this.previewByAttachmentIds(attachIds, rootDirId);
    }
    /**
     * 根据附件UDT字段的路径预览当前行的附件
     * @param attachmentInfoFieldPath 附件UDT字段path
     * @param rootDirId 根目录id
     */
    previewByAttachmentInfoFieldPathWithIndex(attachmentInfoFieldPath, rootDirId) {
        if (!attachmentInfoFieldPath || !rootDirId) {
            throw new Error('attachmentInfoFieldPath和rootDirId不能为空，请填写');
        }
        const currentRow = this.getCurrentRow(attachmentInfoFieldPath);
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        const attachmentFieldName = parentBindingPathArray.pop();
        if (!currentRow[attachmentFieldName] || !currentRow[attachmentFieldName]['attachmentId']) {
            this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
            return EMPTY;
        }
        const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);
        if (attachIds && attachIds.length === 0) {
            this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
            return EMPTY;
        }
        const attachmentId = this.getCurrentAttachmentId(attachmentInfoFieldPath);
        if (!attachmentId) {
            throw new Error('要预览的附件id不存在，请确认');
        }
        else {
            return this.previewFileListWithIndex(attachIds, rootDirId, attachmentId);
        }
    }
    /**
     * 根据目录预览附件
     * @param subDirName 父目录名称
     * @param rootDirId 根目录id
     */
    previewBySubDirName(subDirName, rootDirId) {
        if (!subDirName || !rootDirId) {
            throw new Error('subDirName和rootDirId不能为空，请填写');
        }
        const viewer$ = from(this.fileViewerService.viewerFormFile(subDirName, rootDirId));
        return viewer$;
    }
    /**
     * 根据目录预览指定索引的附件
     * @param attachmentInfoFieldPath 附件UDT字段path
     * @param subDirName 子目录名称
     * @param rootDirId 根目录id
     */
    previewBySubDirNameWithIndex(attachmentInfoFieldPath, subDirName, rootDirId) {
        if (!subDirName || !rootDirId) {
            throw new Error('subDirName和rootDirId不能为空，请填写');
        }
        // const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);
        const attachmentId = this.getCurrentAttachmentId(attachmentInfoFieldPath);
        if (!attachmentId) {
            this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
            return EMPTY;
        }
        const viewer$ = from(this.fileViewerService.viewerFormFileWithIndex(subDirName, rootDirId, attachmentId));
        return viewer$;
    }
    /**
     * 根据附件id数组预览附件
     * @param attachmentIds 附件id数组
     * @param rootDirId 根目录id
     */
    previewByAttachmentIds(attachmentIds, rootDirId) {
        const viewer$ = from(this.fileViewerService.viewerFileList(attachmentIds, rootDirId));
        return viewer$;
    }
    /**
     * 根据附件id数组预览指定索引的附件
     * @param attachmentIds 附件id数组
     * @param rootDirId 根目录id
     * @param attachmentId 附件Id
     */
    previewFileListWithIndex(attachmentIds, rootDirId, attachmentId) {
        const viewer$ = from(this.fileViewerService.viewerFileListWithIndex(attachmentIds, rootDirId, attachmentId));
        return viewer$;
    }
    /**
     * 生成版本号
     * @param versions 历史版本号
     * @description 默认编码规则v1.0 v2.0 ...
     */
    genVersion(versions) {
        if (!versions) {
            versions = [];
        }
        const mainCode = versions.length + 1;
        return `V${mainCode}.0`;
    }
    /**
     * 更新附件版本信息
     * @param versionField 附件版本字段
     * @param historyField 是否历史版本字段
     * @param attachmentFieldPath 附件udt字段路径
     */
    updateAttachmentVersion(versionField, historyField, attachmentFieldPath) {
        /**
         * 遍历所有附件行
         * 找到所有没有附件版本的行
         * 遍历这些行
         * 通过文件名去查找同名的且有附件版本号的行
         * 这些行历史版本字段置为true
         * 无版本号的行，版本= 上行数 + 1
         *
         */
        const bindingPaths = attachmentFieldPath.split('/').filter(p => p);
        // 弹出附件udt字段
        const attachmentField = bindingPaths.pop();
        // 获取到所有的附件
        const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths);
        const befRepository = this.frameContext.repository;
        const entityManager = befRepository.entityManager;
        const dataPath = DataPathCreator.createByShortPathFromRoot(bindingPaths, entityManager, this.frameContext.bindingData);
        const paths = dataPath.toArray().map((path) => {
            if (path.startsWith('PropName:')) {
                return path.split(':')[1];
            }
            else {
                return path;
            }
        });
        if (attachmentBindingList) {
            const attachments = attachmentBindingList.toJSON();
            // 只处理有附件的情况
            if (attachments) {
                const versionLessRows = attachments.filter(item => !item[versionField]);
                versionLessRows.forEach(item => {
                    const fileName = item[attachmentField]['fileName'];
                    const versionedRows = attachments.filter(row => row[attachmentField]['fileName'] === fileName && row[versionField]);
                    paths.pop();
                    paths.push(`DataId:${item[attachmentBindingList.primaryKey]}`);
                    let entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);
                    const version = this.genVersion(versionedRows);
                    entity[versionField] = version;
                    entity[historyField] = false;
                    // 处理历史记录
                    versionedRows.forEach(row => {
                        paths.pop();
                        paths.push(`DataId:${row[attachmentBindingList.primaryKey]}`);
                        entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);
                        entity[historyField] = true;
                    });
                });
            }
        }
    }
    isAttachmentCanDelete(historyField, attachmentFieldPath) {
        const bindingPaths = attachmentFieldPath.split('/').filter(p => p);
        // 弹出附件udt字段
        bindingPaths.pop();
        const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths);
        const bindingObject = attachmentBindingList.currentItem;
        if (bindingObject[historyField] === true) {
            this.notifyService.warning(this.languageService.historyAttachment, { hideTitle: true });
            return EMPTY;
        }
    }
    updateAttachmentHistory(versionField, historyField, attachmentFieldPath) {
        const bindingPaths = attachmentFieldPath.split('/').filter(p => p);
        // 弹出附件udt字段
        const attachmentField = bindingPaths.pop();
        // 获取到所有的附件
        const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths);
        // const befRepository = this.frameContext.repository as BefRepository<any>;
        // const entityManager = befRepository.entityManager;
        if (attachmentBindingList) {
            const attachments = attachmentBindingList.toJSON();
            const versionedRows = attachments.filter(item => item[versionField]);
            const fileNameMap = new Map();
            const befRepository = this.frameContext.repository;
            const entityManager = befRepository.entityManager;
            const dataPath = DataPathCreator.createByShortPathFromRoot(bindingPaths, entityManager, this.frameContext.bindingData);
            const paths = dataPath.toArray().map((path) => {
                if (path.startsWith('PropName:')) {
                    return path.split(':')[1];
                }
                else {
                    return path;
                }
            });
            versionedRows.forEach(item => {
                const fileName = item[attachmentField]['fileName'];
                if (fileNameMap.has(fileName)) {
                    fileNameMap.get(fileName).push(item);
                }
                else {
                    fileNameMap.set(fileName, [item]);
                }
            });
            Array.from(fileNameMap.values()).forEach((array) => {
                array.sort((x, y) => {
                    const xVersion = parseInt(x[versionField].replace(/[a-zA-Z\.]/g, ''));
                    const yVersion = parseInt(y[versionField].replace(/[a-zA-Z\.]/g, ''));
                    return yVersion - xVersion;
                });
                const row = array[0];
                paths.pop();
                paths.push(`DataId:${row[attachmentBindingList.primaryKey]}`);
                const entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);
                entity[historyField] = false;
            });
        }
    }
    /**
     * 获取当前视图模型当前行的附件id
     * @param attachmentInfoFieldPath 附件udt字段
     */
    getCurrentAttachmentId(attachmentInfoFieldPath) {
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        const attachmentFieldName = parentBindingPathArray.pop();
        const bindingList = this.frameContext.bindingData.getValue(parentBindingPathArray);
        const currentItem = bindingList.currentItem;
        if (currentItem && currentItem.primaryKeyValue) {
            return currentItem[attachmentFieldName] && currentItem[attachmentFieldName]['attachmentId'] || null;
        }
        else {
            return null;
        }
    }
    /**
     * 获取当前行
     * @param attachmentInfoFieldPath udt字段
     */
    getCurrentRow(attachmentInfoFieldPath) {
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        const bindingList = this.frameContext.bindingData.getValue(parentBindingPathArray);
        const currentItem = bindingList && bindingList.currentItem;
        return currentItem;
    }
    /**
     * 获取指定附件信息表的指定行
     * @param attachmentInfoFieldPath
     * @param primaryValue
     * @returns
     */
    getSpecialRow(attachmentInfoFieldPath, primaryValue) {
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        const bindingList = this.frameContext.bindingData.getValue(parentBindingPathArray);
        const currentItem = bindingList && bindingList.findById(primaryValue);
        return currentItem;
    }
    /**
     * 获取dataIds对应Entity上的附件id数组
     */
    getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds) {
        // 解析路径
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        const attachmentFieldName = parentBindingPathArray.pop();
        // 获取附件所在实体的数据列表，不传递dataIds参数，则返回全部
        const entityListData = this.entityService.getEntityListData(parentBindingPathArray);
        let filteredEntityListData = [];
        if (dataIds && Array.isArray(dataIds) === true) {
            filteredEntityListData = entityListData.filter((entityData) => {
                return dataIds.indexOf(entityData.id) > -1;
            });
        }
        else {
            filteredEntityListData = entityListData;
        }
        // 转换为附件Id数组
        const attachmentIds = [];
        filteredEntityListData.forEach((entityData) => {
            if (entityData[attachmentFieldName]) {
                const attachmentId = entityData[attachmentFieldName]['attachmentId'];
                if (attachmentId) {
                    attachmentIds.push(attachmentId);
                }
            }
        });
        return attachmentIds;
    }
}
AttachmentService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AttachmentService.ctorParameters = () => [
    { type: FrameContext },
    { type: AttachmentDataService },
    { type: FormNotifyService },
    { type: UploadDialogService },
    { type: DownloadService, decorators: [{ type: Optional }] }
];
export { AttachmentService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0YWNobWVudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2F0dGFjaG1lbnQvYXR0YWNobWVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRSxPQUFPLEVBQWMsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzFELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsbUJBQW1CLEVBQWtCLFdBQVcsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkgsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFFLFlBQVksRUFBZSxvQkFBb0IsRUFBNkIsZUFBZSxFQUFzQixNQUFNLGdCQUFnQixDQUFDO0FBQ2pKLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzNELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBR3pELGtDQUFrQztBQUNsQzs7R0FFRztBQUNILE1BQ00saUJBQWlCO0lBb0NyQjs7T0FFRztJQUNILFlBQ1UsWUFBMEIsRUFDMUIsaUJBQXdDLEVBQ3hDLGFBQWdDLEVBQ2hDLG1CQUF3QyxFQUM1QixlQUFnQztRQUo1QyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixz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O1FBQ25DLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUNwRixJQUFJLHNCQUFzQixHQUFHLEVBQUUsQ0FBQztRQUNoQyxJQUFJLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksRUFBRTtZQUM5QyxzQkFBc0IsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBZSxFQUFFLEVBQUU7Z0JBQ2pFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDN0MsQ0FBQyxDQUFDLENBQUM7U0FDSjthQUFNO1lBQ0wsc0JBQXNCLEdBQUcsY0FBYyxDQUFDO1NBQ3pDO1FBRUQsWUFBWTtRQUNaLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUN6QixzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFlLEVBQUUsRUFBRTtZQUNqRCxJQUFJLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO2dCQUNuQyxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQztnQkFDckUsSUFBSSxZQUFZLEVBQUU7b0JBQ2hCLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7aUJBQ2xDO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7OztZQXpxQkYsVUFBVTs7OztZQVpGLFlBQVk7WUFHWixxQkFBcUI7WUFGckIsaUJBQWlCO1lBSGpCLG1CQUFtQjtZQUErQixlQUFlLHVCQTJEckUsUUFBUTs7QUErbkJiLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0RmxhZ3MsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIGZyb20sIG9mLCBlbXB0eSwgRU1QVFkgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBVcGxvYWREaWFsb2dTZXJ2aWNlLCBVcGxvYWRGaWxlSW5mbywgVXBsb2FkTGltaXQsIERvd25sb2FkU2VydmljZSwgRmlsZVN0YXRlIH0gZnJvbSAnQGdzcC1zdmMvZm9ybWRvYy11cGxvYWQnO1xyXG5pbXBvcnQgeyBGaWxlVmlld2VyU2VydmljZSB9IGZyb20gJ0Bnc3Atc3ZjL2ZpbGUtdmlld2VyJztcclxuaW1wb3J0IHsgRnJhbWVDb250ZXh0LCBCaW5kaW5nRGF0YSwgQmluZGluZ1BhdGhDb252ZXJ0ZXIsIEJpbmRpbmdMaXN0LCBEYXRhUGF0aFV0aWwsIERhdGFQYXRoQ3JlYXRvciwgRW50aXR5TGlzdCwgRW50aXR5IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBGb3JtTm90aWZ5U2VydmljZSB9IGZyb20gJy4uL2Zvcm0tbm90aWZ5LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBdHRhY2htZW50VXRpbCB9IGZyb20gJy4vYXR0YWNobWVudC51dGlsJztcclxuaW1wb3J0IHsgQXR0YWNobWVudERhdGFTZXJ2aWNlIH0gZnJvbSAnLi9hdHRhY2htZW50LWRhdGEuc2VydmljZSc7XHJcbmltcG9ydCB7IExhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uL2xhbmd1YWcuc2VydmljZSc7XHJcbmltcG9ydCB7IEVudGl0eVNlcnZpY2UgfSBmcm9tICcuLi9lbnRpdHktc2VydmljZXMvaW5kZXgnO1xyXG5pbXBvcnQgeyBCZWZSZXBvc2l0b3J5IH0gZnJvbSAnQGZhcnJpcy9iZWYnO1xyXG5cclxuLy8gdHNsaW50OmRpc2FibGU6IG1heC1saW5lLWxlbmd0aFxyXG4vKipcclxuICog6ZmE5Lu25pyN5YqhXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIEF0dGFjaG1lbnRTZXJ2aWNlIHtcclxuXHJcbiAgLyoqXHJcbiAgICog6buY6K6k5qC555uu5b2VXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBkZWZhdWx0Um9vdERpcklkID0gJyc7XHJcblxyXG4gIC8qKlxyXG4gICAqIOm7mOiupOeItui3r+W+hFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0IGRlZmF1bHRQYXJlbnREaXJOYW1lKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5mcmFtZUNvbnRleHQuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDnu5HlrprmlbDmja5cclxuICAgKi9cclxuICBwcml2YXRlIGdldCBiaW5kaW5nRGF0YSgpOiBCaW5kaW5nRGF0YSB7XHJcbiAgICByZXR1cm4gdGhpcy5mcmFtZUNvbnRleHQuYmluZGluZ0RhdGE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlpJror63mnI3liqFcclxuICAgKi9cclxuICBwcml2YXRlIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlO1xyXG5cclxuICAvKipcclxuICAgKiDpmYTku7bpooTop4jmnI3liqFcclxuICAgKi9cclxuICBwcml2YXRlIGZpbGVWaWV3ZXJTZXJ2aWNlOiBGaWxlVmlld2VyU2VydmljZTtcclxuXHJcbiAgLyoqXHJcbiAgICog5a6e5L2T5pyN5YqhXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBlbnRpdHlTZXJ2aWNlOiBFbnRpdHlTZXJ2aWNlO1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsXHJcbiAgICBwcml2YXRlIGF0dGFjaERhdGFTZXJ2aWNlOiBBdHRhY2htZW50RGF0YVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIG5vdGlmeVNlcnZpY2U6IEZvcm1Ob3RpZnlTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSB1cGxvYWREaWFsb2dTZXJ2aWNlOiBVcGxvYWREaWFsb2dTZXJ2aWNlLFxyXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBkb3dubG9hZFNlcnZpY2U6IERvd25sb2FkU2VydmljZVxyXG4gICkge1xyXG4gICAgdGhpcy5zZXRMYW5ndWFnZVNlcnZpY2UoKTtcclxuICAgIHRoaXMuZmlsZVZpZXdlclNlcnZpY2UgPSB0aGlzLmZyYW1lQ29udGV4dC5pbmplY3Rvci5nZXQ8RmlsZVZpZXdlclNlcnZpY2U+KEZpbGVWaWV3ZXJTZXJ2aWNlLCBudWxsLCBJbmplY3RGbGFncy5PcHRpb25hbCk7XHJcbiAgICB0aGlzLmVudGl0eVNlcnZpY2UgPSB0aGlzLmZyYW1lQ29udGV4dC5pbmplY3Rvci5nZXQ8RW50aXR5U2VydmljZT4oRW50aXR5U2VydmljZSwgbnVsbCwgSW5qZWN0RmxhZ3MuT3B0aW9uYWwpO1xyXG4gICAgaWYgKCF0aGlzLmRvd25sb2FkU2VydmljZSAmJiB0eXBlb2YgRG93bmxvYWRTZXJ2aWNlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICB0aGlzLmRvd25sb2FkU2VydmljZSA9IHRoaXMuZnJhbWVDb250ZXh0LmluamVjdG9yLmdldDxEb3dubG9hZFNlcnZpY2U+KERvd25sb2FkU2VydmljZSwgbnVsbCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDorr7nva7or63oqIDmnI3liqFcclxuICAgKi9cclxuICBwcml2YXRlIHNldExhbmd1YWdlU2VydmljZSgpIHtcclxuICAgIGNvbnN0IGluamVjdG9yID0gdGhpcy5mcmFtZUNvbnRleHQuaW5qZWN0b3I7XHJcbiAgICB0aGlzLmxhbmd1YWdlU2VydmljZSA9IGluamVjdG9yLmdldDxMYW5ndWFnZVNlcnZpY2U+KExhbmd1YWdlU2VydmljZSwgbnVsbCwgSW5qZWN0RmxhZ3MuT3B0aW9uYWwpO1xyXG4gICAgaWYgKCF0aGlzLmxhbmd1YWdlU2VydmljZSkge1xyXG4gICAgICB0aGlzLmxhbmd1YWdlU2VydmljZSA9IExhbmd1YWdlU2VydmljZS5nZXRJbnN0YW5jZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5LiK5Lyg5Y2V5Liq5paH5Lu2XHJcbiAgICogQHBhcmFtIGF0dGFjaG1lbnRJZFBhdGgg6ZmE5Lu25YaF56CB5a2X5q6155qE6Lev5b6E77yM5b2i5aaCL2F0dGFjaEluZm8vYXR0YWNobWVudElk77ybXHJcbiAgICogQHBhcmFtIGF0dGFjaG1lbnROYW1lUGF0aCDpmYTku7blkI3np7DlrZfmrrXnmoTot6/lvoRcclxuICAgKi9cclxuICBwdWJsaWMgdXBsb2FkQW5kVXBkYXRlUm93KGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoOiBzdHJpbmcsIHJvb3REaXJJZD86IHN0cmluZywgcGFyZW50RGlyTmFtZT86IHN0cmluZywgZmlsZVR5cGU/OiBzdHJpbmcsIGlkPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHJvb3RJZCA9IHJvb3REaXJJZCA/IHJvb3REaXJJZCA6IHRoaXMuZGVmYXVsdFJvb3REaXJJZDtcclxuICAgIGNvbnN0IGZvcm1JZCA9IHBhcmVudERpck5hbWUgPyBwYXJlbnREaXJOYW1lIDogdGhpcy5kZWZhdWx0UGFyZW50RGlyTmFtZTtcclxuICAgIGlmICghcm9vdElkIHx8ICFmb3JtSWQpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdyb290RGlySWTlkoxwYXJlbnREaXJOYW1l5LiN6IO95Li656m677yM6K+35aGr5YaZJyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdXBsb2FkTGltaXQ6IFVwbG9hZExpbWl0ID0gbmV3IFVwbG9hZExpbWl0KCk7XHJcbiAgICB1cGxvYWRMaW1pdC5maWxlQ291bnQgPSAxO1xyXG4gICAgaWYgKGZpbGVUeXBlKSB7XHJcbiAgICAgIHVwbG9hZExpbWl0LmZpbGVUeXBlID0gZmlsZVR5cGU7XHJcbiAgICB9XHJcbiAgICAvLyDojrflj5bogIHnmoTpmYTku7ZpZOaVsOe7hFxyXG4gICAgY29uc3QgYXR0YWNobWVudElkTGlzdCA9IFtdO1xyXG4gICAgbGV0IGN1cnJlbnRJdGVtID0gbnVsbDtcclxuICAgIGlmIChpZCkge1xyXG4gICAgICAvLyDkv67mraPlvZPliY3ooYxcclxuICAgICAgY29uc3QgYmluZGluZ0xpc3Q6IEJpbmRpbmdMaXN0ID0gdGhpcy5mcmFtZUNvbnRleHQuYmluZGluZ0RhdGEuZ2V0TGlzdCgpO1xyXG4gICAgICBpZiAoYmluZGluZ0xpc3QuY3VycmVudElkICE9PSBpZCkge1xyXG4gICAgICAgIGJpbmRpbmdMaXN0LnNldEN1cnJlbnRJZChpZCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgLy8g5aaC5p6c5oyH5a6a5LqGaWTliJnojrflj5bmjIflrpppZOeahOihjFxyXG4gICAgICBjdXJyZW50SXRlbSA9IHRoaXMuZ2V0U3BlY2lhbFJvdyhhdHRhY2htZW50SW5mb0ZpZWxkUGF0aCwgaWQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8g5rKh5pyJ5oyH5a6a5YiZ5L2/55So5b2T5YmN6KGM77yM5Y+v6IO95a2Y5Zyo5b2T5YmN6KGM5ZKM5LqL5Lu26KGM5LiN5LiA6Ie055qE5oOF5Ya177yM5q2k5pe25bqU6K+l5Zyo5ZG95Luk5Lit5Lyg6YCSaWTlj4LmlbBcclxuICAgICAgY3VycmVudEl0ZW0gPSB0aGlzLmdldEN1cnJlbnRSb3coYXR0YWNobWVudEluZm9GaWVsZFBhdGgpO1xyXG4gICAgfVxyXG4gICAgaWYgKGN1cnJlbnRJdGVtICYmIGN1cnJlbnRJdGVtLnByaW1hcnlLZXlWYWx1ZSkge1xyXG4gICAgICBjb25zdCBhdHRhY2htZW50SWRzID0gdGhpcy5nZXRBdHRhY2htZW50SWRzQnlQYXRoQW5kRGF0YUlkcyhhdHRhY2htZW50SW5mb0ZpZWxkUGF0aCwgW2N1cnJlbnRJdGVtLnByaW1hcnlLZXlWYWx1ZV0pO1xyXG4gICAgICBpZiAoYXR0YWNobWVudElkcyAmJiBhdHRhY2htZW50SWRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBhdHRhY2htZW50SWRMaXN0LnB1c2guYXBwbHkoYXR0YWNobWVudElkTGlzdCwgYXR0YWNobWVudElkcyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkaWFsb2ckID0gZnJvbSh0aGlzLnVwbG9hZERpYWxvZ1NlcnZpY2UudXBsb2FkRmlsZVdpdGhMaW1pdChmb3JtSWQsIHJvb3RJZCwgdXBsb2FkTGltaXQsIGF0dGFjaG1lbnRJZExpc3QpKTtcclxuICAgIGNvbnN0IHJlc3VsdCQgPSBkaWFsb2ckLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcCgoZmlsZUluZm9zOiBVcGxvYWRGaWxlSW5mb1tdKSA9PiB7XHJcbiAgICAgICAgaWYgKCFmaWxlSW5mb3MgfHwgZmlsZUluZm9zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLndhcm5pbmcodGhpcy5sYW5ndWFnZVNlcnZpY2UucGxzVXBsb2FkRmlyc3QsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgcmV0dXJuIGVtcHR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOi/h+a7pOWHunN0YXRl5Li65paw5aKe55qE6ZmE5Lu2XHJcbiAgICAgICAgZmlsZUluZm9zID0gZmlsZUluZm9zLmZpbHRlcigoZmlsZUluZm86IFVwbG9hZEZpbGVJbmZvKSA9PiB7XHJcbiAgICAgICAgICBpZiAoZmlsZUluZm8uaGFzT3duUHJvcGVydHkoJ3N0YXRlJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpbGVJbmZvLnN0YXRlID09PSBGaWxlU3RhdGUuTmV3O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGZpbGVJbmZvcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5piv5ZCm5LiK5Lyg5Yik5patXHJcbiAgICAgICAgY29uc3QgYXR0YWNobWVudEluZm9zID0gQXR0YWNobWVudFV0aWwuY29udmVydFRvQXR0YWNobWVudEluZm9zKGZpbGVJbmZvcyk7XHJcbiAgICAgICAgY29uc3QgZmlyc3RBdHRhY2htZW50SW5mbyA9IEF0dGFjaG1lbnRVdGlsLmdldEZpcnN0QXR0YWNobWVudEluZm8oYXR0YWNobWVudEluZm9zKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5hdHRhY2hEYXRhU2VydmljZS51cGRhdGVSb3coYXR0YWNobWVudEluZm9GaWVsZFBhdGgsIGZpcnN0QXR0YWNobWVudEluZm8pO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0JDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5LiK5Lyg5Y2V5Liq5paH5Lu277yI5pSv5oyB5aSa5YiX77yJXHJcbiAgICogQHBhcmFtIGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoIOmZhOS7tuWGheeggeWtl+auteeahOi3r+W+hO+8jOW9ouWmgi9hdHRhY2hJbmZvL2F0dGFjaG1lbnRJZO+8m1xyXG4gICAqIEBwYXJhbSByb290RGlySWQg6ZmE5Lu25a2Y5YKo5qC555uu5b2VXHJcbiAgICogQHBhcmFtIHBhcmVudERpck5hbWUg6ZmE5Lu25a2Y5YKo55uu5b2VXHJcbiAgICogQHBhcmFtIGZpbGVUeXBlIOaWh+S7tuexu+Wei++8jGxpa2UgLnR4dCwuZG9jeFxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGxvYWRBbmRVcGRhdGVSb3dXaXRoUHJvcGVydHlOYW1lKGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoOiBzdHJpbmcsIHJvb3REaXJJZD86IHN0cmluZywgcGFyZW50RGlyTmFtZT86IHN0cmluZywgZmlsZVR5cGU/OiBzdHJpbmcsIGlkPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHJvb3RJZCA9IHJvb3REaXJJZCA/IHJvb3REaXJJZCA6IHRoaXMuZGVmYXVsdFJvb3REaXJJZDtcclxuICAgIGNvbnN0IGZvcm1JZCA9IHBhcmVudERpck5hbWUgPyBwYXJlbnREaXJOYW1lIDogdGhpcy5kZWZhdWx0UGFyZW50RGlyTmFtZTtcclxuICAgIGlmICghcm9vdElkIHx8ICFmb3JtSWQpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdyb290RGlySWTlkoxwYXJlbnREaXJOYW1l5LiN6IO95Li656m677yM6K+35aGr5YaZJyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdXBsb2FkTGltaXQ6IFVwbG9hZExpbWl0ID0gbmV3IFVwbG9hZExpbWl0KCk7XHJcbiAgICB1cGxvYWRMaW1pdC5maWxlQ291bnQgPSAxO1xyXG4gICAgaWYgKGZpbGVUeXBlKSB7XHJcbiAgICAgIHVwbG9hZExpbWl0LmZpbGVUeXBlID0gZmlsZVR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g6I635Y+W6ICB55qE6ZmE5Lu2aWTmlbDnu4RcclxuICAgIGNvbnN0IGF0dGFjaG1lbnRJZExpc3QgPSBbXTtcclxuICAgIGxldCBjdXJyZW50SXRlbSA9IG51bGw7XHJcbiAgICBpZiAoaWQpIHtcclxuICAgICAgLy8g5L+u5q2j5b2T5YmN6KGMXHJcbiAgICAgIGNvbnN0IGJpbmRpbmdMaXN0OiBCaW5kaW5nTGlzdCA9IHRoaXMuZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhLmdldExpc3QoKTtcclxuICAgICAgaWYgKGJpbmRpbmdMaXN0LmN1cnJlbnRJZCAhPT0gaWQpIHtcclxuICAgICAgICBiaW5kaW5nTGlzdC5zZXRDdXJyZW50SWQoaWQsIHRydWUsIHRydWUpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIOWmguaenOaMh+WumuS6hmlk5YiZ6I635Y+W5oyH5a6aaWTnmoTooYxcclxuICAgICAgY3VycmVudEl0ZW0gPSB0aGlzLmdldFNwZWNpYWxSb3coYXR0YWNobWVudEluZm9GaWVsZFBhdGgsIGlkKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIOayoeacieaMh+WumuWImeS9v+eUqOW9k+WJjeihjO+8jOWPr+iDveWtmOWcqOW9k+WJjeihjOWSjOS6i+S7tuihjOS4jeS4gOiHtOeahOaDheWGte+8jOatpOaXtuW6lOivpeWcqOWRveS7pOS4reS8oOmAkmlk5Y+C5pWwXHJcbiAgICAgIGN1cnJlbnRJdGVtID0gdGhpcy5nZXRDdXJyZW50Um93KGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoKTtcclxuICAgIH1cclxuICAgIGlmIChjdXJyZW50SXRlbSAmJiBjdXJyZW50SXRlbS5wcmltYXJ5S2V5VmFsdWUpIHtcclxuICAgICAgY29uc3QgYXR0YWNobWVudElkcyA9IHRoaXMuZ2V0QXR0YWNobWVudElkc0J5UGF0aEFuZERhdGFJZHMoYXR0YWNobWVudEluZm9GaWVsZFBhdGgsIFtjdXJyZW50SXRlbS5wcmltYXJ5S2V5VmFsdWVdKTtcclxuICAgICAgaWYgKGF0dGFjaG1lbnRJZHMgJiYgYXR0YWNobWVudElkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgYXR0YWNobWVudElkTGlzdC5wdXNoLmFwcGx5KGF0dGFjaG1lbnRJZExpc3QsIGF0dGFjaG1lbnRJZHMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZGlhbG9nJCA9IGZyb20odGhpcy51cGxvYWREaWFsb2dTZXJ2aWNlLnVwbG9hZEZpbGVXaXRoTGltaXQoZm9ybUlkLCByb290SWQsIHVwbG9hZExpbWl0LCBhdHRhY2htZW50SWRMaXN0KSk7XHJcbiAgICBjb25zdCByZXN1bHQkID0gZGlhbG9nJC5waXBlKFxyXG4gICAgICBzd2l0Y2hNYXAoKGZpbGVJbmZvczogVXBsb2FkRmlsZUluZm9bXSkgPT4ge1xyXG4gICAgICAgIGlmICghZmlsZUluZm9zIHx8IGZpbGVJbmZvcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5U2VydmljZS53YXJuaW5nKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnBsc1VwbG9hZEZpcnN0LCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcclxuICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g6L+H5ruk5Ye6c3RhdGXkuLrmlrDlop7nmoTpmYTku7ZcclxuICAgICAgICBmaWxlSW5mb3MgPSBmaWxlSW5mb3MuZmlsdGVyKChmaWxlSW5mbzogVXBsb2FkRmlsZUluZm8pID0+IHtcclxuICAgICAgICAgIGlmIChmaWxlSW5mby5oYXNPd25Qcm9wZXJ0eSgnc3RhdGUnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmlsZUluZm8uc3RhdGUgPT09IEZpbGVTdGF0ZS5OZXc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoZmlsZUluZm9zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDmmK/lkKbkuIrkvKDliKTmlq1cclxuICAgICAgICBjb25zdCBhdHRhY2htZW50SW5mb3MgPSBBdHRhY2htZW50VXRpbC5jb252ZXJ0VG9BdHRhY2htZW50SW5mb3MoZmlsZUluZm9zKTtcclxuICAgICAgICBjb25zdCBmaXJzdEF0dGFjaG1lbnRJbmZvID0gQXR0YWNobWVudFV0aWwuZ2V0Rmlyc3RBdHRhY2htZW50SW5mbyhhdHRhY2htZW50SW5mb3MpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmF0dGFjaERhdGFTZXJ2aWNlLnVwZGF0ZVJvd1dpdGhQcm9wZXJ0eU5hbWUoYXR0YWNobWVudEluZm9GaWVsZFBhdGgsIGZpcnN0QXR0YWNobWVudEluZm8pO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0JDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5LiK5Lyg5aSa5Liq5paH5Lu2XHJcbiAgICovXHJcbiAgcHVibGljIHVwbG9hZEFuZEJhdGNoQWRkUm93cyhhdHRhY2htZW50SW5mb0ZpZWxkUGF0aDogc3RyaW5nLCByb290RGlySWQ/OiBzdHJpbmcsIHBhcmVudERpck5hbWU/OiBzdHJpbmcsIGZpbGVUeXBlPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHJvb3RJZCA9IHJvb3REaXJJZCA/IHJvb3REaXJJZCA6IHRoaXMuZGVmYXVsdFJvb3REaXJJZDtcclxuICAgIGNvbnN0IGZvcm1JZCA9IHBhcmVudERpck5hbWUgPyBwYXJlbnREaXJOYW1lIDogdGhpcy5kZWZhdWx0UGFyZW50RGlyTmFtZTtcclxuICAgIGlmICghcm9vdElkIHx8ICFmb3JtSWQpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdyb290RGlySWTlkoxwYXJlbnREaXJOYW1l5LiN6IO95Li656m677yM6K+35aGr5YaZJyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdXBsb2FkTGltaXQ6IFVwbG9hZExpbWl0ID0gbmV3IFVwbG9hZExpbWl0KCk7XHJcbiAgICBpZiAoZmlsZVR5cGUpIHtcclxuICAgICAgdXBsb2FkTGltaXQuZmlsZVR5cGUgPSBmaWxlVHlwZTtcclxuICAgIH1cclxuICAgIGNvbnN0IGRpYWxvZyQgPSBmcm9tKHRoaXMudXBsb2FkRGlhbG9nU2VydmljZS51cGxvYWRGaWxlV2l0aExpbWl0KGZvcm1JZCwgcm9vdElkLCB1cGxvYWRMaW1pdCkpO1xyXG4gICAgY29uc3QgcmVzdWx0JCA9IGRpYWxvZyQucGlwZShcclxuICAgICAgc3dpdGNoTWFwKChmaWxlSW5mb3M6IFVwbG9hZEZpbGVJbmZvW10pID0+IHtcclxuICAgICAgICBpZiAoIWZpbGVJbmZvcyB8fCBmaWxlSW5mb3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZS5wbHNVcGxvYWRGaXJzdCwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgICAgICByZXR1cm4gRU1QVFk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOi/h+a7pOWHunN0YXRl5Li65paw5aKe55qE6ZmE5Lu2XHJcbiAgICAgICAgZmlsZUluZm9zID0gZmlsZUluZm9zLmZpbHRlcigoZmlsZUluZm86IFVwbG9hZEZpbGVJbmZvKSA9PiB7XHJcbiAgICAgICAgICBpZiAoZmlsZUluZm8uaGFzT3duUHJvcGVydHkoJ3N0YXRlJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpbGVJbmZvLnN0YXRlID09PSBGaWxlU3RhdGUuTmV3O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGZpbGVJbmZvcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYXR0YWNobWVudEluZm9zID0gQXR0YWNobWVudFV0aWwuY29udmVydFRvQXR0YWNobWVudEluZm9zKGZpbGVJbmZvcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0YWNoRGF0YVNlcnZpY2UudXBkYXRlUm93cyhhdHRhY2htZW50SW5mb0ZpZWxkUGF0aCwgYXR0YWNobWVudEluZm9zKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgICByZXR1cm4gcmVzdWx0JDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5LiK5Lyg5aSa5Liq5paH5Lu2XHJcbiAgICovXHJcbiAgcHVibGljIHVwbG9hZEFuZEJhdGNoQWRkUm93c1dpdGhQcm9wZXJ0eU5hbWUoYXR0YWNobWVudEluZm9GaWVsZFBhdGg6IHN0cmluZywgcm9vdERpcklkPzogc3RyaW5nLCBwYXJlbnREaXJOYW1lPzogc3RyaW5nLCBmaWxlVHlwZT86IHN0cmluZywgaWQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3Qgcm9vdElkID0gcm9vdERpcklkID8gcm9vdERpcklkIDogdGhpcy5kZWZhdWx0Um9vdERpcklkO1xyXG4gICAgY29uc3QgZm9ybUlkID0gcGFyZW50RGlyTmFtZSA/IHBhcmVudERpck5hbWUgOiB0aGlzLmRlZmF1bHRQYXJlbnREaXJOYW1lO1xyXG4gICAgaWYgKCFyb290SWQgfHwgIWZvcm1JZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Jvb3REaXJJZOWSjHBhcmVudERpck5hbWXkuI3og73kuLrnqbrvvIzor7floavlhpknKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHVwbG9hZExpbWl0OiBVcGxvYWRMaW1pdCA9IG5ldyBVcGxvYWRMaW1pdCgpO1xyXG4gICAgaWYgKGZpbGVUeXBlKSB7XHJcbiAgICAgIHVwbG9hZExpbWl0LmZpbGVUeXBlID0gZmlsZVR5cGU7XHJcbiAgICB9XHJcbiAgICBpZiAoaWQpIHtcclxuICAgICAgLy8g5L+u5q2j5b2T5YmN6KGMXHJcbiAgICAgIGNvbnN0IGJpbmRpbmdMaXN0OiBCaW5kaW5nTGlzdCA9IHRoaXMuZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhLmdldExpc3QoKTtcclxuICAgICAgaWYgKGJpbmRpbmdMaXN0LmN1cnJlbnRJZCAhPT0gaWQpIHtcclxuICAgICAgICBiaW5kaW5nTGlzdC5zZXRDdXJyZW50SWQoaWQsIHRydWUsIHRydWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBkaWFsb2ckID0gZnJvbSh0aGlzLnVwbG9hZERpYWxvZ1NlcnZpY2UudXBsb2FkRmlsZVdpdGhMaW1pdChmb3JtSWQsIHJvb3RJZCwgdXBsb2FkTGltaXQpKTtcclxuICAgIGNvbnN0IHJlc3VsdCQgPSBkaWFsb2ckLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcCgoZmlsZUluZm9zOiBVcGxvYWRGaWxlSW5mb1tdKSA9PiB7XHJcbiAgICAgICAgaWYgKCFmaWxlSW5mb3MgfHwgZmlsZUluZm9zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLndhcm5pbmcodGhpcy5sYW5ndWFnZVNlcnZpY2UucGxzVXBsb2FkRmlyc3QsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDov4fmu6Tlh7pzdGF0ZeS4uuaWsOWinueahOmZhOS7tlxyXG4gICAgICAgIGZpbGVJbmZvcyA9IGZpbGVJbmZvcy5maWx0ZXIoKGZpbGVJbmZvOiBVcGxvYWRGaWxlSW5mbykgPT4ge1xyXG4gICAgICAgICAgaWYgKGZpbGVJbmZvLmhhc093blByb3BlcnR5KCdzdGF0ZScpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWxlSW5mby5zdGF0ZSA9PT0gRmlsZVN0YXRlLk5ldztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChmaWxlSW5mb3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGF0dGFjaG1lbnRJbmZvcyA9IEF0dGFjaG1lbnRVdGlsLmNvbnZlcnRUb0F0dGFjaG1lbnRJbmZvcyhmaWxlSW5mb3MpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmF0dGFjaERhdGFTZXJ2aWNlLnVwZGF0ZVJvd3NXaXRoUHJvcGVydHlOYW1lKGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoLCBhdHRhY2htZW50SW5mb3MpO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICAgIHJldHVybiByZXN1bHQkO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDkuIvovb3pmYTku7bvvIjmoLnmja7pmYTku7ZpZO+8iVxyXG4gICAqL1xyXG4gIHB1YmxpYyBkb3dubG9hZChhdHRhY2hJZDogc3RyaW5nLCByb290SWQ/OiBzdHJpbmcpOiBhbnkge1xyXG4gICAgaWYgKCFhdHRhY2hJZCkge1xyXG4gICAgICB0aGlzLm5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZS5wbHNTZWxlY3REb3dubG9hZEF0dCwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuICAgIHJvb3RJZCA9IHJvb3RJZCB8fCAnZGVmYXVsdC1yb290JztcclxuICAgIGNvbnN0IHVybCA9IHRoaXMuZ2V0RG93bmxvYWRVcmwoW2F0dGFjaElkXSwgcm9vdElkKTtcclxuICAgIC8vIGxldCB1cmwgPSAnJztcclxuICAgIC8vIGlmIChyb290SWQpIHtcclxuICAgIC8vICAgdXJsID0gYC9hcGkvcnVudGltZS9kZnMvdjEuMC9mb3JtZG9jL2ZpbGVjb250ZW50P21ldGFkYXRhaWQ9JHthdHRhY2hJZH0mcm9vdGlkPSR7cm9vdElkfWA7XHJcbiAgICAvLyB9IGVsc2Uge1xyXG4gICAgLy8gICB1cmwgPSBgL2FwaS9ydW50aW1lL2Rmcy92MS4wL2Zvcm1kb2MvZG93bmxvYWQvJHthdHRhY2hJZH1gO1xyXG4gICAgLy8gfVxyXG4gICAgd2luZG93Lm9wZW4odXJsKTtcclxuICAgIHJldHVybiBvZih0cnVlKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5om56YeP5LiL6L296ZmE5Lu277yI5qC55o2u6ZmE5Lu2aWTmlbDnu4TvvIlcclxuICAgKi9cclxuICBwdWJsaWMgYmF0Y2hEb3dubG9hZChhdHRhY2hJZHM6IHN0cmluZ1tdLCByb290SWQ6IHN0cmluZyk6IGFueSB7XHJcbiAgICBpZiAoIWF0dGFjaElkcyB8fCBhdHRhY2hJZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRoaXMubm90aWZ5U2VydmljZS53YXJuaW5nKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnBsc1NlbGVjdERvd25sb2FkQXR0LCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcclxuICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgfVxyXG4gICAgLy8g5Y+q6YCJ5oup5LiA5Liq6ZmE5Lu25pe25oyJ5Y2V5Liq6ZmE5Lu25LiL6L295aSE55CGXHJcbiAgICBpZiAoYXR0YWNoSWRzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5kb3dubG9hZChhdHRhY2hJZHNbMF0sIHJvb3RJZCk7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zdCBhdHRhY2hJZHNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShhdHRhY2hJZHMpO1xyXG4gICAgLy8gY29uc3QgdXJsID0gYC9hcGkvcnVudGltZS9kZnMvdjEuMC9mb3JtZG9jL211bHRpcGxlL2Rvd25sb2FkP21ldGFkYXRhaWRsaXN0PSR7YXR0YWNoSWRzU3RyaW5nfSZyb290aWQ9JHtyb290SWR9YDtcclxuICAgIGNvbnN0IHVybCA9IHRoaXMuZ2V0RG93bmxvYWRVcmwoYXR0YWNoSWRzLCByb290SWQpO1xyXG4gICAgd2luZG93Lm9wZW4odXJsKTtcclxuICAgIHJldHVybiBvZih0cnVlKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5LiL6L296Lev5b6EXHJcbiAgICogQHBhcmFtIG1ldGFkYXRhaWRsaXN0IOmZhOS7tmlk5pWw57uEXHJcbiAgICogQHBhcmFtIHJvb3RJZCByb290SWRcclxuICAgKi9cclxuICBwcml2YXRlIGdldERvd25sb2FkVXJsKG1ldGFkYXRhaWRsaXN0OiBBcnJheTxzdHJpbmc+LCByb290SWQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByb290SWQgPSByb290SWQgfHwgJ2RlZmF1bHQtcm9vdCc7XHJcbiAgICBpZiAodGhpcy5kb3dubG9hZFNlcnZpY2UpIHtcclxuICAgICAgaWYgKG1ldGFkYXRhaWRsaXN0Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvd25sb2FkU2VydmljZS5nZXREb3dubG9hZFVybChtZXRhZGF0YWlkbGlzdFswXSwgcm9vdElkKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBhdHRhY2hJZHNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShtZXRhZGF0YWlkbGlzdCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG93bmxvYWRTZXJ2aWNlLmdldE11bHRpcGxlRG93bmxvYWRVcmwoYXR0YWNoSWRzU3RyaW5nLCByb290SWQpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ+WboOWuieWFqOmXrumimO+8jOmZhOS7tuS4i+i9veaPkOS+m+WuieWFqOagoemqjOacuuWItu+8jOmZhOS7tuS4i+i9veWKn+iDvemcgOmHjeaWsOe8luivkeOAgicpO1xyXG4gICAgICBpZiAobWV0YWRhdGFpZGxpc3QubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgcmV0dXJuIGAvYXBpL3J1bnRpbWUvZGZzL3YxLjAvZm9ybWRvYy9maWxlY29udGVudD9tZXRhZGF0YWlkPSR7bWV0YWRhdGFpZGxpc3RbMF19JnJvb3RpZD0ke3Jvb3RJZH1gO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IGF0dGFjaElkc1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KG1ldGFkYXRhaWRsaXN0KTtcclxuICAgICAgICByZXR1cm4gYC9hcGkvcnVudGltZS9kZnMvdjEuMC9mb3JtZG9jL211bHRpcGxlL2Rvd25sb2FkP21ldGFkYXRhaWRsaXN0PSR7YXR0YWNoSWRzU3RyaW5nfSZyb290aWQ9JHtyb290SWR9YDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDkuIvovb3vvIjmoLnmja7mlbDmja5pZO+8iVxyXG4gICAqL1xyXG4gIHB1YmxpYyBkb3dubG9hZEJ5RGF0YUlkKGRhdGFJZDogc3RyaW5nLCBhdHRhY2htZW50SW5mb0ZpZWxkUGF0aDogc3RyaW5nLCByb290SWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBpZiAoIWRhdGFJZCkge1xyXG4gICAgICB0aGlzLm5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZS5wbHNTZWxlY3REb3dubG9hZEF0dCwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkYXRhSWRzID0gW2RhdGFJZF07XHJcbiAgICBjb25zdCBhdHRhY2hJZHMgPSB0aGlzLmdldEF0dGFjaG1lbnRJZHNCeVBhdGhBbmREYXRhSWRzKGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoLCBkYXRhSWRzKTtcclxuICAgIGlmIChhdHRhY2hJZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRoaXMubm90aWZ5U2VydmljZS53YXJuaW5nKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLm5vRG93bmxvYWRBdHQsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xyXG4gICAgICByZXR1cm4gRU1QVFk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYXR0YWNoSWQgPSBhdHRhY2hJZHNbMF07XHJcbiAgICByZXR1cm4gdGhpcy5kb3dubG9hZChhdHRhY2hJZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmibnph4/kuIvovb3pmYTku7ZcclxuICAgKi9cclxuICBwdWJsaWMgYmF0Y2hEb3dubG9hZEJ5RGF0YUlkcyhkYXRhSWRzOiBzdHJpbmdbXSB8IHN0cmluZywgYXR0YWNobWVudEluZm9GaWVsZFBhdGg6IHN0cmluZywgcm9vdElkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKHR5cGVvZiBkYXRhSWRzID09PSAnc3RyaW5nJyAmJiBkYXRhSWRzICYmIGRhdGFJZHMubGVuZ3RoID4gMCkge1xyXG4gICAgICBkYXRhSWRzID0gZGF0YUlkcy5zcGxpdCgnLCcpLmZpbHRlcihwID0+IHApO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkYXRhSWRzIHx8IEFycmF5LmlzQXJyYXkoZGF0YUlkcykgPT09IGZhbHNlIHx8IGRhdGFJZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRoaXMubm90aWZ5U2VydmljZS53YXJuaW5nKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnBsc1NlbGVjdERvd25sb2FkQXR0LCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcclxuICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaWRzID0gW10uY29uY2F0KGRhdGFJZHMpO1xyXG4gICAgY29uc3QgYXR0YWNoSWRzID0gdGhpcy5nZXRBdHRhY2htZW50SWRzQnlQYXRoQW5kRGF0YUlkcyhhdHRhY2htZW50SW5mb0ZpZWxkUGF0aCwgaWRzKTtcclxuICAgIGlmIChhdHRhY2hJZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRoaXMubm90aWZ5U2VydmljZS53YXJuaW5nKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLm5vRG93bmxvYWRBdHQsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xyXG4gICAgICByZXR1cm4gRU1QVFk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuYmF0Y2hEb3dubG9hZChhdHRhY2hJZHMsIHJvb3RJZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmoLnmja7pmYTku7ZVRFTlrZfmrrXnmoTot6/lvoTpooTop4jpmYTku7ZcclxuICAgKiBAcGFyYW0gYXR0YWNobWVudEluZm9GaWVsZFBhdGgg6ZmE5Lu2VURU5a2X5q61cGF0aFxyXG4gICAqIEBwYXJhbSByb290RGlySWQg6Lef55uu5b2VaWRcclxuICAgKiBAcGFyYW0gaWRzIOmZhOS7tmlkXHJcbiAgICovXHJcbiAgcHVibGljIHByZXZpZXdCeUF0dGFjaG1lbnRJbmZvRmllbGRQYXRoKGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoOiBzdHJpbmcsIHJvb3REaXJJZDogc3RyaW5nLCBpZHM/OiBhbnkpIHtcclxuICAgIGlmICghYXR0YWNobWVudEluZm9GaWVsZFBhdGggfHwgIXJvb3REaXJJZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2F0dGFjaG1lbnRJbmZvRmllbGRQYXRo5ZKMcm9vdERpcklk5LiN6IO95Li656m677yM6K+35aGr5YaZJyk7XHJcbiAgICB9XHJcbiAgICBsZXQgYXR0YWNoSWRzID0gW107XHJcbiAgICBsZXQgZGF0YUlkcyA9IFtdO1xyXG4gICAgaWYgKGlkcyAmJiBpZHMubGVuZ3RoID4gMCkge1xyXG4gICAgICBpZiAodHlwZW9mIChpZHMpID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGRhdGFJZHMucHVzaChpZHMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRhdGFJZHMgPSBpZHM7XHJcbiAgICAgIH1cclxuICAgICAgYXR0YWNoSWRzID0gdGhpcy5nZXRBdHRhY2htZW50SWRzQnlQYXRoQW5kRGF0YUlkcyhhdHRhY2htZW50SW5mb0ZpZWxkUGF0aCwgZGF0YUlkcyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhdHRhY2hJZHMgPSB0aGlzLmdldEF0dGFjaG1lbnRJZHNCeVBhdGhBbmREYXRhSWRzKGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoLCBudWxsKTtcclxuICAgIH1cclxuICAgIGlmIChhdHRhY2hJZHMgJiYgYXR0YWNoSWRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICB0aGlzLm5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZS5ub0F0dGFjaG1lbnQsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xyXG4gICAgICByZXR1cm4gRU1QVFk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5wcmV2aWV3QnlBdHRhY2htZW50SWRzKGF0dGFjaElkcywgcm9vdERpcklkKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5qC55o2u6ZmE5Lu2VURU5a2X5q6155qE6Lev5b6E6aKE6KeI5b2T5YmN6KGM55qE6ZmE5Lu2XHJcbiAgICogQHBhcmFtIGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoIOmZhOS7tlVEVOWtl+autXBhdGhcclxuICAgKiBAcGFyYW0gcm9vdERpcklkIOagueebruW9lWlkXHJcbiAgICovXHJcbiAgcHVibGljIHByZXZpZXdCeUF0dGFjaG1lbnRJbmZvRmllbGRQYXRoV2l0aEluZGV4KGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoOiBzdHJpbmcsIHJvb3REaXJJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGlmICghYXR0YWNobWVudEluZm9GaWVsZFBhdGggfHwgIXJvb3REaXJJZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2F0dGFjaG1lbnRJbmZvRmllbGRQYXRo5ZKMcm9vdERpcklk5LiN6IO95Li656m677yM6K+35aGr5YaZJyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBjdXJyZW50Um93ID0gdGhpcy5nZXRDdXJyZW50Um93KGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoKTtcclxuICAgIGNvbnN0IHBhcmVudEJpbmRpbmdQYXRoQXJyYXkgPSBCaW5kaW5nUGF0aENvbnZlcnRlci50b0JpbmRpbmdQYXRoQXJyYXkoYXR0YWNobWVudEluZm9GaWVsZFBhdGgpO1xyXG4gICAgY29uc3QgYXR0YWNobWVudEZpZWxkTmFtZSA9IHBhcmVudEJpbmRpbmdQYXRoQXJyYXkucG9wKCk7XHJcbiAgICBpZiAoIWN1cnJlbnRSb3dbYXR0YWNobWVudEZpZWxkTmFtZV0gfHwgIWN1cnJlbnRSb3dbYXR0YWNobWVudEZpZWxkTmFtZV1bJ2F0dGFjaG1lbnRJZCddKSB7XHJcbiAgICAgIHRoaXMubm90aWZ5U2VydmljZS53YXJuaW5nKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLm5vQXR0YWNobWVudCwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuICAgIGNvbnN0IGF0dGFjaElkcyA9IHRoaXMuZ2V0QXR0YWNobWVudElkc0J5UGF0aEFuZERhdGFJZHMoYXR0YWNobWVudEluZm9GaWVsZFBhdGgsIG51bGwpO1xyXG4gICAgaWYgKGF0dGFjaElkcyAmJiBhdHRhY2hJZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRoaXMubm90aWZ5U2VydmljZS53YXJuaW5nKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLm5vQXR0YWNobWVudCwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuICAgIGNvbnN0IGF0dGFjaG1lbnRJZCA9IHRoaXMuZ2V0Q3VycmVudEF0dGFjaG1lbnRJZChhdHRhY2htZW50SW5mb0ZpZWxkUGF0aCk7XHJcbiAgICBpZiAoIWF0dGFjaG1lbnRJZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+imgemihOiniOeahOmZhOS7tmlk5LiN5a2Y5Zyo77yM6K+356Gu6K6kJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5wcmV2aWV3RmlsZUxpc3RXaXRoSW5kZXgoYXR0YWNoSWRzLCByb290RGlySWQsIGF0dGFjaG1lbnRJZCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOagueaNruebruW9lemihOiniOmZhOS7tlxyXG4gICAqIEBwYXJhbSBzdWJEaXJOYW1lIOeItuebruW9leWQjeensFxyXG4gICAqIEBwYXJhbSByb290RGlySWQg5qC555uu5b2VaWRcclxuICAgKi9cclxuICBwdWJsaWMgcHJldmlld0J5U3ViRGlyTmFtZShzdWJEaXJOYW1lOiBzdHJpbmcsIHJvb3REaXJJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGlmICghc3ViRGlyTmFtZSB8fCAhcm9vdERpcklkKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignc3ViRGlyTmFtZeWSjHJvb3REaXJJZOS4jeiDveS4uuepuu+8jOivt+Whq+WGmScpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgdmlld2VyJCA9IGZyb20odGhpcy5maWxlVmlld2VyU2VydmljZS52aWV3ZXJGb3JtRmlsZShzdWJEaXJOYW1lLCByb290RGlySWQpKTtcclxuICAgIHJldHVybiB2aWV3ZXIkO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmoLnmja7nm67lvZXpooTop4jmjIflrprntKLlvJXnmoTpmYTku7ZcclxuICAgKiBAcGFyYW0gYXR0YWNobWVudEluZm9GaWVsZFBhdGgg6ZmE5Lu2VURU5a2X5q61cGF0aFxyXG4gICAqIEBwYXJhbSBzdWJEaXJOYW1lIOWtkOebruW9leWQjeensFxyXG4gICAqIEBwYXJhbSByb290RGlySWQg5qC555uu5b2VaWRcclxuICAgKi9cclxuICBwdWJsaWMgcHJldmlld0J5U3ViRGlyTmFtZVdpdGhJbmRleChhdHRhY2htZW50SW5mb0ZpZWxkUGF0aDogc3RyaW5nLCBzdWJEaXJOYW1lOiBzdHJpbmcsIHJvb3REaXJJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGlmICghc3ViRGlyTmFtZSB8fCAhcm9vdERpcklkKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignc3ViRGlyTmFtZeWSjHJvb3REaXJJZOS4jeiDveS4uuepuu+8jOivt+Whq+WGmScpO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc3QgYXR0YWNoSWRzID0gdGhpcy5nZXRBdHRhY2htZW50SWRzQnlQYXRoQW5kRGF0YUlkcyhhdHRhY2htZW50SW5mb0ZpZWxkUGF0aCwgbnVsbCk7XHJcbiAgICBjb25zdCBhdHRhY2htZW50SWQgPSB0aGlzLmdldEN1cnJlbnRBdHRhY2htZW50SWQoYXR0YWNobWVudEluZm9GaWVsZFBhdGgpO1xyXG4gICAgaWYgKCFhdHRhY2htZW50SWQpIHtcclxuICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLndhcm5pbmcodGhpcy5sYW5ndWFnZVNlcnZpY2Uubm9BdHRhY2htZW50LCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcclxuICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgdmlld2VyJCA9IGZyb20odGhpcy5maWxlVmlld2VyU2VydmljZS52aWV3ZXJGb3JtRmlsZVdpdGhJbmRleChzdWJEaXJOYW1lLCByb290RGlySWQsIGF0dGFjaG1lbnRJZCkpO1xyXG4gICAgcmV0dXJuIHZpZXdlciQ7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOagueaNrumZhOS7tmlk5pWw57uE6aKE6KeI6ZmE5Lu2XHJcbiAgICogQHBhcmFtIGF0dGFjaG1lbnRJZHMg6ZmE5Lu2aWTmlbDnu4RcclxuICAgKiBAcGFyYW0gcm9vdERpcklkIOagueebruW9lWlkXHJcbiAgICovXHJcbiAgcHVibGljIHByZXZpZXdCeUF0dGFjaG1lbnRJZHMoYXR0YWNobWVudElkczogc3RyaW5nW10sIHJvb3REaXJJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHZpZXdlciQgPSBmcm9tKHRoaXMuZmlsZVZpZXdlclNlcnZpY2Uudmlld2VyRmlsZUxpc3QoYXR0YWNobWVudElkcywgcm9vdERpcklkKSk7XHJcbiAgICByZXR1cm4gdmlld2VyJDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5qC55o2u6ZmE5Lu2aWTmlbDnu4TpooTop4jmjIflrprntKLlvJXnmoTpmYTku7ZcclxuICAgKiBAcGFyYW0gYXR0YWNobWVudElkcyDpmYTku7ZpZOaVsOe7hFxyXG4gICAqIEBwYXJhbSByb290RGlySWQg5qC555uu5b2VaWRcclxuICAgKiBAcGFyYW0gYXR0YWNobWVudElkIOmZhOS7tklkXHJcbiAgICovXHJcbiAgcHVibGljIHByZXZpZXdGaWxlTGlzdFdpdGhJbmRleChhdHRhY2htZW50SWRzOiBzdHJpbmdbXSwgcm9vdERpcklkOiBzdHJpbmcsIGF0dGFjaG1lbnRJZDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCB2aWV3ZXIkID0gZnJvbSh0aGlzLmZpbGVWaWV3ZXJTZXJ2aWNlLnZpZXdlckZpbGVMaXN0V2l0aEluZGV4KGF0dGFjaG1lbnRJZHMsIHJvb3REaXJJZCwgYXR0YWNobWVudElkKSk7XHJcbiAgICByZXR1cm4gdmlld2VyJDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog55Sf5oiQ54mI5pys5Y+3XHJcbiAgICogQHBhcmFtIHZlcnNpb25zIOWOhuWPsueJiOacrOWPt1xyXG4gICAqIEBkZXNjcmlwdGlvbiDpu5jorqTnvJbnoIHop4TliJl2MS4wIHYyLjAgLi4uXHJcbiAgICovXHJcbiAgcHVibGljIGdlblZlcnNpb24odmVyc2lvbnM6IHN0cmluZ1tdKSB7XHJcbiAgICBpZiAoIXZlcnNpb25zKSB7XHJcbiAgICAgIHZlcnNpb25zID0gW107XHJcbiAgICB9XHJcbiAgICBjb25zdCBtYWluQ29kZSA9IHZlcnNpb25zLmxlbmd0aCArIDE7XHJcbiAgICByZXR1cm4gYFYke21haW5Db2RlfS4wYDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5pu05paw6ZmE5Lu254mI5pys5L+h5oGvXHJcbiAgICogQHBhcmFtIHZlcnNpb25GaWVsZCDpmYTku7bniYjmnKzlrZfmrrVcclxuICAgKiBAcGFyYW0gaGlzdG9yeUZpZWxkIOaYr+WQpuWOhuWPsueJiOacrOWtl+autVxyXG4gICAqIEBwYXJhbSBhdHRhY2htZW50RmllbGRQYXRoIOmZhOS7tnVkdOWtl+autei3r+W+hFxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGVBdHRhY2htZW50VmVyc2lvbih2ZXJzaW9uRmllbGQ6IHN0cmluZywgaGlzdG9yeUZpZWxkOiBzdHJpbmcsIGF0dGFjaG1lbnRGaWVsZFBhdGg6IHN0cmluZykge1xyXG4gICAgLyoqXHJcbiAgICAgKiDpgY3ljobmiYDmnInpmYTku7booYxcclxuICAgICAqIOaJvuWIsOaJgOacieayoeaciemZhOS7tueJiOacrOeahOihjFxyXG4gICAgICog6YGN5Y6G6L+Z5Lqb6KGMXHJcbiAgICAgKiDpgJrov4fmlofku7blkI3ljrvmn6Xmib7lkIzlkI3nmoTkuJTmnInpmYTku7bniYjmnKzlj7fnmoTooYwgXHJcbiAgICAgKiDov5nkupvooYzljoblj7LniYjmnKzlrZfmrrXnva7kuLp0cnVlXHJcbiAgICAgKiDml6DniYjmnKzlj7fnmoTooYzvvIzniYjmnKw9IOS4iuihjOaVsCArIDFcclxuICAgICAqIFxyXG4gICAgICovXHJcbiAgICBjb25zdCBiaW5kaW5nUGF0aHMgPSBhdHRhY2htZW50RmllbGRQYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAvLyDlvLnlh7rpmYTku7Z1ZHTlrZfmrrVcclxuICAgIGNvbnN0IGF0dGFjaG1lbnRGaWVsZCA9IGJpbmRpbmdQYXRocy5wb3AoKTtcclxuICAgIC8vIOiOt+WPluWIsOaJgOacieeahOmZhOS7tlxyXG4gICAgY29uc3QgYXR0YWNobWVudEJpbmRpbmdMaXN0ID0gdGhpcy5mcmFtZUNvbnRleHQuYmluZGluZ0RhdGEuZ2V0VmFsdWUoYmluZGluZ1BhdGhzKSBhcyBCaW5kaW5nTGlzdDtcclxuICAgIGNvbnN0IGJlZlJlcG9zaXRvcnkgPSB0aGlzLmZyYW1lQ29udGV4dC5yZXBvc2l0b3J5IGFzIEJlZlJlcG9zaXRvcnk8YW55PjtcclxuICAgIGNvbnN0IGVudGl0eU1hbmFnZXIgPSBiZWZSZXBvc2l0b3J5LmVudGl0eU1hbmFnZXI7XHJcbiAgICBjb25zdCBkYXRhUGF0aCA9IERhdGFQYXRoQ3JlYXRvci5jcmVhdGVCeVNob3J0UGF0aEZyb21Sb290KGJpbmRpbmdQYXRocywgZW50aXR5TWFuYWdlciwgdGhpcy5mcmFtZUNvbnRleHQuYmluZGluZ0RhdGEpO1xyXG4gICAgY29uc3QgcGF0aHMgPSBkYXRhUGF0aC50b0FycmF5KCkubWFwKChwYXRoOiBzdHJpbmcpID0+IHtcclxuICAgICAgaWYgKHBhdGguc3RhcnRzV2l0aCgnUHJvcE5hbWU6JykpIHtcclxuICAgICAgICByZXR1cm4gcGF0aC5zcGxpdCgnOicpWzFdO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBwYXRoO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGlmIChhdHRhY2htZW50QmluZGluZ0xpc3QpIHtcclxuICAgICAgY29uc3QgYXR0YWNobWVudHMgPSBhdHRhY2htZW50QmluZGluZ0xpc3QudG9KU09OKCk7XHJcbiAgICAgIC8vIOWPquWkhOeQhuaciemZhOS7tueahOaDheWGtVxyXG4gICAgICBpZiAoYXR0YWNobWVudHMpIHtcclxuICAgICAgICBjb25zdCB2ZXJzaW9uTGVzc1Jvd3MgPSBhdHRhY2htZW50cy5maWx0ZXIoaXRlbSA9PiAhaXRlbVt2ZXJzaW9uRmllbGRdKTtcclxuICAgICAgICB2ZXJzaW9uTGVzc1Jvd3MuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgIGNvbnN0IGZpbGVOYW1lID0gaXRlbVthdHRhY2htZW50RmllbGRdWydmaWxlTmFtZSddO1xyXG4gICAgICAgICAgY29uc3QgdmVyc2lvbmVkUm93cyA9IGF0dGFjaG1lbnRzLmZpbHRlcihyb3cgPT4gcm93W2F0dGFjaG1lbnRGaWVsZF1bJ2ZpbGVOYW1lJ10gPT09IGZpbGVOYW1lICYmIHJvd1t2ZXJzaW9uRmllbGRdKTtcclxuICAgICAgICAgIHBhdGhzLnBvcCgpO1xyXG4gICAgICAgICAgcGF0aHMucHVzaChgRGF0YUlkOiR7aXRlbVthdHRhY2htZW50QmluZGluZ0xpc3QucHJpbWFyeUtleV19YCk7XHJcbiAgICAgICAgICBsZXQgZW50aXR5ID0gdGhpcy5mcmFtZUNvbnRleHQucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmdldEVudGl0eUJ5UGF0aChwYXRocyk7XHJcbiAgICAgICAgICBjb25zdCB2ZXJzaW9uID0gdGhpcy5nZW5WZXJzaW9uKHZlcnNpb25lZFJvd3MpO1xyXG4gICAgICAgICAgZW50aXR5W3ZlcnNpb25GaWVsZF0gPSB2ZXJzaW9uO1xyXG4gICAgICAgICAgZW50aXR5W2hpc3RvcnlGaWVsZF0gPSBmYWxzZTtcclxuICAgICAgICAgIC8vIOWkhOeQhuWOhuWPsuiusOW9lVxyXG4gICAgICAgICAgdmVyc2lvbmVkUm93cy5mb3JFYWNoKHJvdyA9PiB7XHJcbiAgICAgICAgICAgIHBhdGhzLnBvcCgpO1xyXG4gICAgICAgICAgICBwYXRocy5wdXNoKGBEYXRhSWQ6JHtyb3dbYXR0YWNobWVudEJpbmRpbmdMaXN0LnByaW1hcnlLZXldfWApO1xyXG4gICAgICAgICAgICBlbnRpdHkgPSB0aGlzLmZyYW1lQ29udGV4dC5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uZ2V0RW50aXR5QnlQYXRoKHBhdGhzKTtcclxuICAgICAgICAgICAgZW50aXR5W2hpc3RvcnlGaWVsZF0gPSB0cnVlO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcHVibGljIGlzQXR0YWNobWVudENhbkRlbGV0ZShoaXN0b3J5RmllbGQ6IHN0cmluZywgYXR0YWNobWVudEZpZWxkUGF0aDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBiaW5kaW5nUGF0aHMgPSBhdHRhY2htZW50RmllbGRQYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAvLyDlvLnlh7rpmYTku7Z1ZHTlrZfmrrVcclxuICAgIGJpbmRpbmdQYXRocy5wb3AoKTtcclxuICAgIGNvbnN0IGF0dGFjaG1lbnRCaW5kaW5nTGlzdCA9IHRoaXMuZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhLmdldFZhbHVlKGJpbmRpbmdQYXRocykgYXMgQmluZGluZ0xpc3Q7XHJcbiAgICBjb25zdCBiaW5kaW5nT2JqZWN0ID0gYXR0YWNobWVudEJpbmRpbmdMaXN0LmN1cnJlbnRJdGVtO1xyXG4gICAgaWYgKGJpbmRpbmdPYmplY3RbaGlzdG9yeUZpZWxkXSA9PT0gdHJ1ZSkge1xyXG4gICAgICB0aGlzLm5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZS5oaXN0b3J5QXR0YWNobWVudCwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuICB9XHJcbiAgcHVibGljIHVwZGF0ZUF0dGFjaG1lbnRIaXN0b3J5KHZlcnNpb25GaWVsZDogc3RyaW5nLCBoaXN0b3J5RmllbGQ6IHN0cmluZywgYXR0YWNobWVudEZpZWxkUGF0aDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBiaW5kaW5nUGF0aHMgPSBhdHRhY2htZW50RmllbGRQYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAvLyDlvLnlh7rpmYTku7Z1ZHTlrZfmrrVcclxuICAgIGNvbnN0IGF0dGFjaG1lbnRGaWVsZCA9IGJpbmRpbmdQYXRocy5wb3AoKTtcclxuICAgIC8vIOiOt+WPluWIsOaJgOacieeahOmZhOS7tlxyXG4gICAgY29uc3QgYXR0YWNobWVudEJpbmRpbmdMaXN0ID0gdGhpcy5mcmFtZUNvbnRleHQuYmluZGluZ0RhdGEuZ2V0VmFsdWUoYmluZGluZ1BhdGhzKSBhcyBCaW5kaW5nTGlzdDtcclxuICAgIC8vIGNvbnN0IGJlZlJlcG9zaXRvcnkgPSB0aGlzLmZyYW1lQ29udGV4dC5yZXBvc2l0b3J5IGFzIEJlZlJlcG9zaXRvcnk8YW55PjtcclxuICAgIC8vIGNvbnN0IGVudGl0eU1hbmFnZXIgPSBiZWZSZXBvc2l0b3J5LmVudGl0eU1hbmFnZXI7XHJcbiAgICBpZiAoYXR0YWNobWVudEJpbmRpbmdMaXN0KSB7XHJcbiAgICAgIGNvbnN0IGF0dGFjaG1lbnRzID0gYXR0YWNobWVudEJpbmRpbmdMaXN0LnRvSlNPTigpO1xyXG4gICAgICBjb25zdCB2ZXJzaW9uZWRSb3dzID0gYXR0YWNobWVudHMuZmlsdGVyKGl0ZW0gPT4gaXRlbVt2ZXJzaW9uRmllbGRdKTtcclxuICAgICAgY29uc3QgZmlsZU5hbWVNYXAgPSBuZXcgTWFwPHN0cmluZywgQXJyYXk8YW55Pj4oKTtcclxuICAgICAgY29uc3QgYmVmUmVwb3NpdG9yeSA9IHRoaXMuZnJhbWVDb250ZXh0LnJlcG9zaXRvcnkgYXMgQmVmUmVwb3NpdG9yeTxhbnk+O1xyXG4gICAgICBjb25zdCBlbnRpdHlNYW5hZ2VyID0gYmVmUmVwb3NpdG9yeS5lbnRpdHlNYW5hZ2VyO1xyXG4gICAgICBjb25zdCBkYXRhUGF0aCA9IERhdGFQYXRoQ3JlYXRvci5jcmVhdGVCeVNob3J0UGF0aEZyb21Sb290KGJpbmRpbmdQYXRocywgZW50aXR5TWFuYWdlciwgdGhpcy5mcmFtZUNvbnRleHQuYmluZGluZ0RhdGEpO1xyXG4gICAgICBjb25zdCBwYXRocyA9IGRhdGFQYXRoLnRvQXJyYXkoKS5tYXAoKHBhdGg6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGlmIChwYXRoLnN0YXJ0c1dpdGgoJ1Byb3BOYW1lOicpKSB7XHJcbiAgICAgICAgICByZXR1cm4gcGF0aC5zcGxpdCgnOicpWzFdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gcGF0aDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICB2ZXJzaW9uZWRSb3dzLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBpdGVtW2F0dGFjaG1lbnRGaWVsZF1bJ2ZpbGVOYW1lJ107XHJcbiAgICAgICAgaWYgKGZpbGVOYW1lTWFwLmhhcyhmaWxlTmFtZSkpIHtcclxuICAgICAgICAgIGZpbGVOYW1lTWFwLmdldChmaWxlTmFtZSkucHVzaChpdGVtKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZmlsZU5hbWVNYXAuc2V0KGZpbGVOYW1lLCBbaXRlbV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIEFycmF5LmZyb20oZmlsZU5hbWVNYXAudmFsdWVzKCkpLmZvckVhY2goKGFycmF5OiBBcnJheTxhbnk+KSA9PiB7XHJcbiAgICAgICAgYXJyYXkuc29ydCgoeCwgeSkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgeFZlcnNpb24gPSBwYXJzZUludCh4W3ZlcnNpb25GaWVsZF0ucmVwbGFjZSgvW2EtekEtWlxcLl0vZywgJycpKTtcclxuICAgICAgICAgIGNvbnN0IHlWZXJzaW9uID0gcGFyc2VJbnQoeVt2ZXJzaW9uRmllbGRdLnJlcGxhY2UoL1thLXpBLVpcXC5dL2csICcnKSk7XHJcbiAgICAgICAgICByZXR1cm4geVZlcnNpb24gLSB4VmVyc2lvbjtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCByb3cgPSBhcnJheVswXTtcclxuICAgICAgICBwYXRocy5wb3AoKTtcclxuICAgICAgICBwYXRocy5wdXNoKGBEYXRhSWQ6JHtyb3dbYXR0YWNobWVudEJpbmRpbmdMaXN0LnByaW1hcnlLZXldfWApO1xyXG4gICAgICAgIGNvbnN0IGVudGl0eSA9IHRoaXMuZnJhbWVDb250ZXh0LnJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi5nZXRFbnRpdHlCeVBhdGgocGF0aHMpO1xyXG4gICAgICAgIGVudGl0eVtoaXN0b3J5RmllbGRdID0gZmFsc2U7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5blvZPliY3op4blm77mqKHlnovlvZPliY3ooYznmoTpmYTku7ZpZFxyXG4gICAqIEBwYXJhbSBhdHRhY2htZW50SW5mb0ZpZWxkUGF0aCDpmYTku7Z1ZHTlrZfmrrVcclxuICAgKi9cclxuICBwcml2YXRlIGdldEN1cnJlbnRBdHRhY2htZW50SWQoYXR0YWNobWVudEluZm9GaWVsZFBhdGg6IHN0cmluZykge1xyXG4gICAgY29uc3QgcGFyZW50QmluZGluZ1BhdGhBcnJheSA9IEJpbmRpbmdQYXRoQ29udmVydGVyLnRvQmluZGluZ1BhdGhBcnJheShhdHRhY2htZW50SW5mb0ZpZWxkUGF0aCk7XHJcbiAgICBjb25zdCBhdHRhY2htZW50RmllbGROYW1lID0gcGFyZW50QmluZGluZ1BhdGhBcnJheS5wb3AoKTtcclxuICAgIGNvbnN0IGJpbmRpbmdMaXN0OiBCaW5kaW5nTGlzdCA9IHRoaXMuZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhLmdldFZhbHVlKHBhcmVudEJpbmRpbmdQYXRoQXJyYXkpIGFzIEJpbmRpbmdMaXN0O1xyXG4gICAgY29uc3QgY3VycmVudEl0ZW0gPSBiaW5kaW5nTGlzdC5jdXJyZW50SXRlbTtcclxuICAgIGlmIChjdXJyZW50SXRlbSAmJiBjdXJyZW50SXRlbS5wcmltYXJ5S2V5VmFsdWUpIHtcclxuICAgICAgcmV0dXJuIGN1cnJlbnRJdGVtW2F0dGFjaG1lbnRGaWVsZE5hbWVdICYmIGN1cnJlbnRJdGVtW2F0dGFjaG1lbnRGaWVsZE5hbWVdWydhdHRhY2htZW50SWQnXSB8fCBudWxsO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluW9k+WJjeihjFxyXG4gICAqIEBwYXJhbSBhdHRhY2htZW50SW5mb0ZpZWxkUGF0aCB1ZHTlrZfmrrVcclxuICAgKi9cclxuICBwcml2YXRlIGdldEN1cnJlbnRSb3coYXR0YWNobWVudEluZm9GaWVsZFBhdGg6IHN0cmluZykge1xyXG4gICAgY29uc3QgcGFyZW50QmluZGluZ1BhdGhBcnJheSA9IEJpbmRpbmdQYXRoQ29udmVydGVyLnRvQmluZGluZ1BhdGhBcnJheShhdHRhY2htZW50SW5mb0ZpZWxkUGF0aCk7XHJcbiAgICBwYXJlbnRCaW5kaW5nUGF0aEFycmF5LnBvcCgpO1xyXG4gICAgY29uc3QgYmluZGluZ0xpc3Q6IEJpbmRpbmdMaXN0ID0gdGhpcy5mcmFtZUNvbnRleHQuYmluZGluZ0RhdGEuZ2V0VmFsdWUocGFyZW50QmluZGluZ1BhdGhBcnJheSkgYXMgQmluZGluZ0xpc3Q7XHJcbiAgICBjb25zdCBjdXJyZW50SXRlbSA9IGJpbmRpbmdMaXN0ICYmIGJpbmRpbmdMaXN0LmN1cnJlbnRJdGVtO1xyXG4gICAgcmV0dXJuIGN1cnJlbnRJdGVtO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5bmjIflrprpmYTku7bkv6Hmga/ooajnmoTmjIflrprooYxcclxuICAgKiBAcGFyYW0gYXR0YWNobWVudEluZm9GaWVsZFBhdGggXHJcbiAgICogQHBhcmFtIHByaW1hcnlWYWx1ZSBcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwcml2YXRlIGdldFNwZWNpYWxSb3coYXR0YWNobWVudEluZm9GaWVsZFBhdGg6IHN0cmluZywgcHJpbWFyeVZhbHVlOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHBhcmVudEJpbmRpbmdQYXRoQXJyYXkgPSBCaW5kaW5nUGF0aENvbnZlcnRlci50b0JpbmRpbmdQYXRoQXJyYXkoYXR0YWNobWVudEluZm9GaWVsZFBhdGgpO1xyXG4gICAgcGFyZW50QmluZGluZ1BhdGhBcnJheS5wb3AoKTtcclxuICAgIGNvbnN0IGJpbmRpbmdMaXN0OiBCaW5kaW5nTGlzdCA9IHRoaXMuZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhLmdldFZhbHVlKHBhcmVudEJpbmRpbmdQYXRoQXJyYXkpIGFzIEJpbmRpbmdMaXN0O1xyXG4gICAgY29uc3QgY3VycmVudEl0ZW0gPSBiaW5kaW5nTGlzdCAmJiBiaW5kaW5nTGlzdC5maW5kQnlJZChwcmltYXJ5VmFsdWUpO1xyXG4gICAgcmV0dXJuIGN1cnJlbnRJdGVtO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5ZkYXRhSWRz5a+55bqURW50aXR55LiK55qE6ZmE5Lu2aWTmlbDnu4RcclxuICAgKi9cclxuICBwcml2YXRlIGdldEF0dGFjaG1lbnRJZHNCeVBhdGhBbmREYXRhSWRzKGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoOiBzdHJpbmcsIGRhdGFJZHM/OiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuXHJcbiAgICAvLyDop6PmnpDot6/lvoRcclxuICAgIGNvbnN0IHBhcmVudEJpbmRpbmdQYXRoQXJyYXkgPSBCaW5kaW5nUGF0aENvbnZlcnRlci50b0JpbmRpbmdQYXRoQXJyYXkoYXR0YWNobWVudEluZm9GaWVsZFBhdGgpO1xyXG4gICAgY29uc3QgYXR0YWNobWVudEZpZWxkTmFtZSA9IHBhcmVudEJpbmRpbmdQYXRoQXJyYXkucG9wKCk7XHJcblxyXG4gICAgLy8g6I635Y+W6ZmE5Lu25omA5Zyo5a6e5L2T55qE5pWw5o2u5YiX6KGo77yM5LiN5Lyg6YCSZGF0YUlkc+WPguaVsO+8jOWImei/lOWbnuWFqOmDqFxyXG4gICAgY29uc3QgZW50aXR5TGlzdERhdGEgPSB0aGlzLmVudGl0eVNlcnZpY2UuZ2V0RW50aXR5TGlzdERhdGEocGFyZW50QmluZGluZ1BhdGhBcnJheSk7XHJcbiAgICBsZXQgZmlsdGVyZWRFbnRpdHlMaXN0RGF0YSA9IFtdO1xyXG4gICAgaWYgKGRhdGFJZHMgJiYgQXJyYXkuaXNBcnJheShkYXRhSWRzKSA9PT0gdHJ1ZSkge1xyXG4gICAgICBmaWx0ZXJlZEVudGl0eUxpc3REYXRhID0gZW50aXR5TGlzdERhdGEuZmlsdGVyKChlbnRpdHlEYXRhOiBhbnkpID0+IHtcclxuICAgICAgICByZXR1cm4gZGF0YUlkcy5pbmRleE9mKGVudGl0eURhdGEuaWQpID4gLTE7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZmlsdGVyZWRFbnRpdHlMaXN0RGF0YSA9IGVudGl0eUxpc3REYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOi9rOaNouS4uumZhOS7tklk5pWw57uEXHJcbiAgICBjb25zdCBhdHRhY2htZW50SWRzID0gW107XHJcbiAgICBmaWx0ZXJlZEVudGl0eUxpc3REYXRhLmZvckVhY2goKGVudGl0eURhdGE6IGFueSkgPT4ge1xyXG4gICAgICBpZiAoZW50aXR5RGF0YVthdHRhY2htZW50RmllbGROYW1lXSkge1xyXG4gICAgICAgIGNvbnN0IGF0dGFjaG1lbnRJZCA9IGVudGl0eURhdGFbYXR0YWNobWVudEZpZWxkTmFtZV1bJ2F0dGFjaG1lbnRJZCddO1xyXG4gICAgICAgIGlmIChhdHRhY2htZW50SWQpIHtcclxuICAgICAgICAgIGF0dGFjaG1lbnRJZHMucHVzaChhdHRhY2htZW50SWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGF0dGFjaG1lbnRJZHM7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBBdHRhY2htZW50U2VydmljZSB9O1xyXG4iXX0=