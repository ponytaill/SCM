import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { tap, switchMap, map } from 'rxjs/operators';
import { FrameContext, BindingPathConverter } from '@farris/devkit';
import { BefDataPathUtil } from '@farris/bef';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { AttachmentUtil } from './attachment.util';
/**
 * 附件调用
 */
var AttachmentDataService = /** @class */ (function () {
    function AttachmentDataService(frameContext, loadingService) {
        this.frameContext = frameContext;
        this.loadingService = loadingService;
    }
    Object.defineProperty(AttachmentDataService.prototype, "repository", {
        /**
         * 实体仓库
         */
        get: function () {
            return this.frameContext.repository;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AttachmentDataService.prototype, "bindingData", {
        /**
         * 绑定数据
         */
        get: function () {
            return this.frameContext.bindingData;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 更新附件信息
     */
    AttachmentDataService.prototype.updateRow = function (attachmentInfoFieldPath, attachmentInfo) {
        var _this = this;
        var restService = this.repository.restService;
        var baseUri = restService.baseUri;
        var updateUri = baseUri + "/service/updateattachment";
        var serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
        var body = {
            updateAttachInfo: serverAttachInfo,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            body: body
        };
        this.loadingService.show();
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap(function (responseInfo) {
            return _this.syncAttachmentInfosToClient();
        }), tap(function () {
            _this.loadingService.hide();
        }));
    };
    /**
     * 通过属性名更新附件信息
     * @param attachmentInfoFieldPath 附件字段
     * @param attachmentInfo 附件信息
     */
    AttachmentDataService.prototype.updateRowWithPropertyName = function (attachmentInfoFieldPath, attachmentInfo) {
        var _this = this;
        var restService = this.repository.restService;
        var baseUri = restService.baseUri;
        var updateUri = baseUri + "/service/updateattachmentwithproptyname";
        var serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
        var propertyName = attachmentInfoFieldPath.split('/').filter(function (p) { return p; }).pop();
        var body = {
            updateAttachInfo: serverAttachInfo,
            propertyName: propertyName,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            body: body
        };
        this.loadingService.show();
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap(function (responseInfo) {
            return _this.syncAttachmentInfosToClient();
        }), tap(function () {
            _this.loadingService.hide();
        }));
    };
    /**
     * 批量创建附件行数据
     */
    AttachmentDataService.prototype.updateRows = function (attachmentInfoFieldPath, attachmentInfos) {
        var _this = this;
        var restService = this.repository.restService;
        var baseUri = restService.baseUri;
        var updateUri = baseUri + "/service/batchuploadattachment";
        var serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
        var isRootEntity = serverAttachInfo.NodeCodes.length === 0;
        var body = {
            batchUploadInfo: serverAttachInfo,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            body: body
        };
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap(function (responseInfo) {
            return _this.appendAttachmentInfosToClient(responseInfo.returnValue, isRootEntity);
        }), tap(function () {
            _this.loadingService.hide();
        }));
    };
    /**
     * 批量创建附件行数据
     */
    AttachmentDataService.prototype.updateRowsWithConfigs = function (attachmentInfoFieldPath, attachmentInfos, configs) {
        var _this = this;
        var restService = this.repository.restService;
        var baseUri = restService.baseUri;
        var updateUri = baseUri + "/service/batchuploadattachment";
        var serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
        // const isRootEntity = serverAttachInfo.NodeCodes.length === 0;
        var body = {
            batchUploadInfo: serverAttachInfo,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            body: body
        };
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap(function (responseInfo) {
            return _this.appendAttachmentInfos(responseInfo.returnValue, configs);
        }), tap(function () {
            _this.loadingService.hide();
        }));
    };
    /**
     * 根据属性名批量创建附件行数据
     */
    AttachmentDataService.prototype.updateRowsWithPropertyName = function (attachmentInfoFieldPath, attachmentInfos) {
        var _this = this;
        var restService = this.repository.restService;
        var baseUri = restService.baseUri;
        var updateUri = baseUri + "/service/batchuploadattachmentwithproptyname";
        var serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
        var isRootEntity = serverAttachInfo.NodeCodes.length === 0;
        var propertyName = attachmentInfoFieldPath.split('/').filter(function (p) { return p; }).pop();
        var body = {
            batchUploadInfo: serverAttachInfo,
            propertyName: propertyName,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            body: body
        };
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap(function (responseInfo) {
            return _this.appendAttachmentInfosToClient(responseInfo.returnValue, isRootEntity);
        }), tap(function () {
            _this.loadingService.hide();
        }));
    };
    /**
     * 创建服务器端需要的更新信息
     */
    AttachmentDataService.prototype.createUpdateAttachInfo = function (attachmentInfoFieldPath, attachmentInfo) {
        var attachmentId = attachmentInfo.attachmentId;
        var parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        var nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
        var hiretryIds = BefDataPathUtil.convertToDataIdsForUpdate(parentBindingPathArray, this.bindingData);
        var serverAttachInfo = {
            NodeCodes: nodeCodes,
            HiretryIds: hiretryIds,
            AttachmentIds: [attachmentId],
            AttachmentId: attachmentId
        };
        return serverAttachInfo;
    };
    /**
     * 创建服务器端需要的批量新增附件信息
     */
    AttachmentDataService.prototype.createBatchCreateAttachInfo = function (attachmentInfoFieldPath, attachmentInfo) {
        var attachmentIds = AttachmentUtil.peekAttachmentIds(attachmentInfo);
        var parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        var nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
        var hiretryIds = BefDataPathUtil.convertToDataIdsForAdd(parentBindingPathArray, this.bindingData);
        var serverAttachInfo = {
            NodeCodes: nodeCodes,
            HiretryIds: hiretryIds,
            AttachmentIds: attachmentIds,
            AttachmentId: null
        };
        return serverAttachInfo;
    };
    /**
     * 同步服务器端最新信息到客户端
     * @todo:
     * 1、主对象批量新增时不支持
     */
    AttachmentDataService.prototype.syncAttachmentInfosToClient = function () {
        var rootDataId = this.bindingData.list.currentId;
        return this.repository.updateEntityById(rootDataId);
    };
    /**
     * 追加主表数据到客户端
     */
    AttachmentDataService.prototype.appendAttachmentInfosToClient = function (listData, isRootEntity) {
        if (isRootEntity === true) {
            var entities = this.repository.buildEntities(listData);
            this.repository.entityCollection.addEntities(entities);
            return of(listData);
        }
        else {
            var rootDataId = this.bindingData.list.currentId;
            return this.repository.updateEntityById(rootDataId).pipe(map(function () { return listData; }));
        }
    };
    AttachmentDataService.prototype.appendAttachmentInfos = function (listData, keyValues) {
        var entities = this.repository.buildEntities(listData);
        this.repository.entityCollection.addEntities(entities);
        // 更新实体使之产生变更集
        this.updateEntities(entities, keyValues);
        return of(listData);
    };
    AttachmentDataService.prototype.updateEntities = function (entities, keyValues) {
        var _this = this;
        entities.forEach(function (entity) {
            _this.updateEntity(entity, keyValues);
        });
    };
    AttachmentDataService.prototype.updateEntity = function (target, keyValues) {
        var _this = this;
        Object.keys(keyValues).forEach(function (key) {
            _this.setValueByPath(target, key, keyValues[key]);
        });
    };
    AttachmentDataService.prototype.setValueByPath = function (target, path, value) {
        if (target) {
            var paths = path.split('.');
            if (paths.length <= 1) {
                target[path] = value;
            }
            else {
                paths.slice(0, -1).reduce(function (prev, path) {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    };
    AttachmentDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AttachmentDataService.ctorParameters = function () { return [
        { type: FrameContext },
        { type: FormLoadingService }
    ]; };
    return AttachmentDataService;
}());
export { AttachmentDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0YWNobWVudC1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvYXR0YWNobWVudC9hdHRhY2htZW50LWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckQsT0FBTyxFQUFFLFlBQVksRUFBdUIsb0JBQW9CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RixPQUFPLEVBQWlCLGVBQWUsRUFBZ0IsTUFBTSxhQUFhLENBQUM7QUFDM0UsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFMUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRW5EOztHQUVHO0FBQ0g7SUFpQkUsK0JBQW9CLFlBQTBCLEVBQVUsY0FBa0M7UUFBdEUsaUJBQVksR0FBWixZQUFZLENBQWM7UUFBVSxtQkFBYyxHQUFkLGNBQWMsQ0FBb0I7SUFDMUYsQ0FBQztJQVpELHNCQUFZLDZDQUFVO1FBSHRCOztXQUVHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBbUMsQ0FBQztRQUMvRCxDQUFDOzs7T0FBQTtJQUtELHNCQUFZLDhDQUFXO1FBSHZCOztXQUVHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDO1FBQ3ZDLENBQUM7OztPQUFBO0lBS0Q7O09BRUc7SUFDSSx5Q0FBUyxHQUFoQixVQUFpQix1QkFBK0IsRUFBRSxjQUE4QjtRQUFoRixpQkFxQkM7UUFwQkMsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFVB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QUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQ3RCO2lCQUFNO2dCQUNMLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBSSxFQUFFLElBQUk7b0JBQ25DLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO3dCQUMxRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO3FCQUNqQjtvQkFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDcEIsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQzdDO1NBQ0Y7SUFDSCxDQUFDOztnQkE3UEYsVUFBVTs7OztnQkFURixZQUFZO2dCQUVaLGtCQUFrQjs7SUFxUTNCLDRCQUFDO0NBQUEsQUE5UEQsSUE4UEM7QUFHRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFwLCBzd2l0Y2hNYXAsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgRnJhbWVDb250ZXh0LCBFbnRpdHksIEJpbmRpbmdEYXRhLCBCaW5kaW5nUGF0aENvbnZlcnRlciB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgQmVmUmVwb3NpdG9yeSwgQmVmRGF0YVBhdGhVdGlsLCBSZXNwb25zZUluZm8gfSBmcm9tICdAZmFycmlzL2JlZic7XHJcbmltcG9ydCB7IEZvcm1Mb2FkaW5nU2VydmljZSB9IGZyb20gJy4uL2Zvcm0tbG9hZGluZy9mb3JtLWxvYWRpbmcuc2VydmljZSc7XHJcbmltcG9ydCB7IEF0dGFjaG1lbnRJbmZvLCBTZXJ2ZXJBdHRhY2htZW50SW5mbyB9IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgeyBBdHRhY2htZW50VXRpbCB9IGZyb20gJy4vYXR0YWNobWVudC51dGlsJztcclxuXHJcbi8qKlxyXG4gKiDpmYTku7bosIPnlKhcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgQXR0YWNobWVudERhdGFTZXJ2aWNlIHtcclxuXHJcbiAgLyoqXHJcbiAgICog5a6e5L2T5LuT5bqTXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXQgcmVwb3NpdG9yeSgpOiBCZWZSZXBvc2l0b3J5PEVudGl0eT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJhbWVDb250ZXh0LnJlcG9zaXRvcnkgYXMgQmVmUmVwb3NpdG9yeTxFbnRpdHk+O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog57uR5a6a5pWw5o2uXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXQgYmluZGluZ0RhdGEoKTogQmluZGluZ0RhdGEge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCwgcHJpdmF0ZSBsb2FkaW5nU2VydmljZTogRm9ybUxvYWRpbmdTZXJ2aWNlKSB7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmm7TmlrDpmYTku7bkv6Hmga9cclxuICAgKi9cclxuICBwdWJsaWMgdXBkYXRlUm93KGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoOiBzdHJpbmcsIGF0dGFjaG1lbnRJbmZvOiBBdHRhY2htZW50SW5mbyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCByZXN0U2VydmljZSA9IHRoaXMucmVwb3NpdG9yeS5yZXN0U2VydmljZTtcclxuICAgIGNvbnN0IGJhc2VVcmkgPSByZXN0U2VydmljZS5iYXNlVXJpO1xyXG4gICAgY29uc3QgdXBkYXRlVXJpID0gYCR7YmFzZVVyaX0vc2VydmljZS91cGRhdGVhdHRhY2htZW50YDtcclxuICAgIGNvbnN0IHNlcnZlckF0dGFjaEluZm8gPSB0aGlzLmNyZWF0ZVVwZGF0ZUF0dGFjaEluZm8oYXR0YWNobWVudEluZm9GaWVsZFBhdGgsIGF0dGFjaG1lbnRJbmZvKTtcclxuICAgIGNvbnN0IGJvZHkgPSB7XHJcbiAgICAgIHVwZGF0ZUF0dGFjaEluZm86IHNlcnZlckF0dGFjaEluZm8sXHJcbiAgICAgIHJlcXVlc3RJbmZvOiByZXN0U2VydmljZS5idWlsZFJlcXVlc3RJbmZvKClcclxuICAgIH07XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBib2R5OiBib2R5XHJcbiAgICB9O1xyXG4gICAgdGhpcy5sb2FkaW5nU2VydmljZS5zaG93KCk7XHJcbiAgICByZXR1cm4gcmVzdFNlcnZpY2UuaW52b2tlKHVwZGF0ZVVyaSwgJ1BVVCcsIG51bGwsIG9wdGlvbnMpLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcCgocmVzcG9uc2VJbmZvOiBSZXNwb25zZUluZm8pID0+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zeW5jQXR0YWNobWVudEluZm9zVG9DbGllbnQoKTtcclxuICAgICAgfSksXHJcbiAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlKCk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDpgJrov4flsZ7mgKflkI3mm7TmlrDpmYTku7bkv6Hmga9cclxuICAgKiBAcGFyYW0gYXR0YWNobWVudEluZm9GaWVsZFBhdGgg6ZmE5Lu25a2X5q61XHJcbiAgICogQHBhcmFtIGF0dGFjaG1lbnRJbmZvIOmZhOS7tuS/oeaBr1xyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGVSb3dXaXRoUHJvcGVydHlOYW1lKGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoOiBzdHJpbmcsIGF0dGFjaG1lbnRJbmZvOiBBdHRhY2htZW50SW5mbyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCByZXN0U2VydmljZSA9IHRoaXMucmVwb3NpdG9yeS5yZXN0U2VydmljZTtcclxuICAgIGNvbnN0IGJhc2VVcmkgPSByZXN0U2VydmljZS5iYXNlVXJpO1xyXG4gICAgY29uc3QgdXBkYXRlVXJpID0gYCR7YmFzZVVyaX0vc2VydmljZS91cGRhdGVhdHRhY2htZW50d2l0aHByb3B0eW5hbWVgO1xyXG4gICAgY29uc3Qgc2VydmVyQXR0YWNoSW5mbyA9IHRoaXMuY3JlYXRlVXBkYXRlQXR0YWNoSW5mbyhhdHRhY2htZW50SW5mb0ZpZWxkUGF0aCwgYXR0YWNobWVudEluZm8pO1xyXG4gICAgY29uc3QgcHJvcGVydHlOYW1lID0gYXR0YWNobWVudEluZm9GaWVsZFBhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKS5wb3AoKTtcclxuICAgIGNvbnN0IGJvZHkgPSB7XHJcbiAgICAgIHVwZGF0ZUF0dGFjaEluZm86IHNlcnZlckF0dGFjaEluZm8sXHJcbiAgICAgIHByb3BlcnR5TmFtZSxcclxuICAgICAgcmVxdWVzdEluZm86IHJlc3RTZXJ2aWNlLmJ1aWxkUmVxdWVzdEluZm8oKVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGJvZHk6IGJvZHlcclxuICAgIH07XHJcbiAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3coKTtcclxuICAgIHJldHVybiByZXN0U2VydmljZS5pbnZva2UodXBkYXRlVXJpLCAnUFVUJywgbnVsbCwgb3B0aW9ucykucGlwZShcclxuICAgICAgc3dpdGNoTWFwKChyZXNwb25zZUluZm86IFJlc3BvbnNlSW5mbykgPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNBdHRhY2htZW50SW5mb3NUb0NsaWVudCgpO1xyXG4gICAgICB9KSxcclxuICAgICAgdGFwKCgpID0+IHtcclxuICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGUoKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOaJuemHj+WIm+W7uumZhOS7tuihjOaVsOaNrlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGVSb3dzKGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoOiBzdHJpbmcsIGF0dGFjaG1lbnRJbmZvczogQXR0YWNobWVudEluZm9bXSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCByZXN0U2VydmljZSA9IHRoaXMucmVwb3NpdG9yeS5yZXN0U2VydmljZTtcclxuICAgIGNvbnN0IGJhc2VVcmkgPSByZXN0U2VydmljZS5iYXNlVXJpO1xyXG4gICAgY29uc3QgdXBkYXRlVXJpID0gYCR7YmFzZVVyaX0vc2VydmljZS9iYXRjaHVwbG9hZGF0dGFjaG1lbnRgO1xyXG4gICAgY29uc3Qgc2VydmVyQXR0YWNoSW5mbyA9IHRoaXMuY3JlYXRlQmF0Y2hDcmVhdGVBdHRhY2hJbmZvKGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoLCBhdHRhY2htZW50SW5mb3MpO1xyXG4gICAgY29uc3QgaXNSb290RW50aXR5ID0gc2VydmVyQXR0YWNoSW5mby5Ob2RlQ29kZXMubGVuZ3RoID09PSAwO1xyXG5cclxuICAgIGNvbnN0IGJvZHkgPSB7XHJcbiAgICAgIGJhdGNoVXBsb2FkSW5mbzogc2VydmVyQXR0YWNoSW5mbyxcclxuICAgICAgcmVxdWVzdEluZm86IHJlc3RTZXJ2aWNlLmJ1aWxkUmVxdWVzdEluZm8oKVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGJvZHk6IGJvZHlcclxuICAgIH07XHJcbiAgICByZXR1cm4gcmVzdFNlcnZpY2UuaW52b2tlKHVwZGF0ZVVyaSwgJ1BVVCcsIG51bGwsIG9wdGlvbnMpLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcCgocmVzcG9uc2VJbmZvOiBSZXNwb25zZUluZm8pID0+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBlbmRBdHRhY2htZW50SW5mb3NUb0NsaWVudChyZXNwb25zZUluZm8ucmV0dXJuVmFsdWUsIGlzUm9vdEVudGl0eSk7XHJcbiAgICAgIH0pLFxyXG4gICAgICB0YXAoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5om56YeP5Yib5bu66ZmE5Lu26KGM5pWw5o2uXHJcbiAgICovXHJcbiAgcHVibGljIHVwZGF0ZVJvd3NXaXRoQ29uZmlncyhhdHRhY2htZW50SW5mb0ZpZWxkUGF0aDogc3RyaW5nLCBhdHRhY2htZW50SW5mb3M6IEF0dGFjaG1lbnRJbmZvW10sIGNvbmZpZ3M6IHsgW3Byb3A6IHN0cmluZ106IGFueSB9KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHJlc3RTZXJ2aWNlID0gdGhpcy5yZXBvc2l0b3J5LnJlc3RTZXJ2aWNlO1xyXG4gICAgY29uc3QgYmFzZVVyaSA9IHJlc3RTZXJ2aWNlLmJhc2VVcmk7XHJcbiAgICBjb25zdCB1cGRhdGVVcmkgPSBgJHtiYXNlVXJpfS9zZXJ2aWNlL2JhdGNodXBsb2FkYXR0YWNobWVudGA7XHJcbiAgICBjb25zdCBzZXJ2ZXJBdHRhY2hJbmZvID0gdGhpcy5jcmVhdGVCYXRjaENyZWF0ZUF0dGFjaEluZm8oYXR0YWNobWVudEluZm9GaWVsZFBhdGgsIGF0dGFjaG1lbnRJbmZvcyk7XHJcbiAgICAvLyBjb25zdCBpc1Jvb3RFbnRpdHkgPSBzZXJ2ZXJBdHRhY2hJbmZvLk5vZGVDb2Rlcy5sZW5ndGggPT09IDA7XHJcblxyXG4gICAgY29uc3QgYm9keSA9IHtcclxuICAgICAgYmF0Y2hVcGxvYWRJbmZvOiBzZXJ2ZXJBdHRhY2hJbmZvLFxyXG4gICAgICByZXF1ZXN0SW5mbzogcmVzdFNlcnZpY2UuYnVpbGRSZXF1ZXN0SW5mbygpXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgYm9keTogYm9keVxyXG4gICAgfTtcclxuICAgIHJldHVybiByZXN0U2VydmljZS5pbnZva2UodXBkYXRlVXJpLCAnUFVUJywgbnVsbCwgb3B0aW9ucykucGlwZShcclxuICAgICAgc3dpdGNoTWFwKChyZXNwb25zZUluZm86IFJlc3BvbnNlSW5mbykgPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGVuZEF0dGFjaG1lbnRJbmZvcyhyZXNwb25zZUluZm8ucmV0dXJuVmFsdWUsIGNvbmZpZ3MpO1xyXG4gICAgICB9KSxcclxuICAgICAgdGFwKCgpID0+IHtcclxuICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGUoKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOagueaNruWxnuaAp+WQjeaJuemHj+WIm+W7uumZhOS7tuihjOaVsOaNrlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGVSb3dzV2l0aFByb3BlcnR5TmFtZShhdHRhY2htZW50SW5mb0ZpZWxkUGF0aDogc3RyaW5nLCBhdHRhY2htZW50SW5mb3M6IEF0dGFjaG1lbnRJbmZvW10pOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgcmVzdFNlcnZpY2UgPSB0aGlzLnJlcG9zaXRvcnkucmVzdFNlcnZpY2U7XHJcbiAgICBjb25zdCBiYXNlVXJpID0gcmVzdFNlcnZpY2UuYmFzZVVyaTtcclxuICAgIGNvbnN0IHVwZGF0ZVVyaSA9IGAke2Jhc2VVcml9L3NlcnZpY2UvYmF0Y2h1cGxvYWRhdHRhY2htZW50d2l0aHByb3B0eW5hbWVgO1xyXG4gICAgY29uc3Qgc2VydmVyQXR0YWNoSW5mbyA9IHRoaXMuY3JlYXRlQmF0Y2hDcmVhdGVBdHRhY2hJbmZvKGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoLCBhdHRhY2htZW50SW5mb3MpO1xyXG4gICAgY29uc3QgaXNSb290RW50aXR5ID0gc2VydmVyQXR0YWNoSW5mby5Ob2RlQ29kZXMubGVuZ3RoID09PSAwO1xyXG4gICAgY29uc3QgcHJvcGVydHlOYW1lID0gYXR0YWNobWVudEluZm9GaWVsZFBhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKS5wb3AoKTtcclxuXHJcbiAgICBjb25zdCBib2R5ID0ge1xyXG4gICAgICBiYXRjaFVwbG9hZEluZm86IHNlcnZlckF0dGFjaEluZm8sXHJcbiAgICAgIHByb3BlcnR5TmFtZSxcclxuICAgICAgcmVxdWVzdEluZm86IHJlc3RTZXJ2aWNlLmJ1aWxkUmVxdWVzdEluZm8oKVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGJvZHk6IGJvZHlcclxuICAgIH07XHJcbiAgICByZXR1cm4gcmVzdFNlcnZpY2UuaW52b2tlKHVwZGF0ZVVyaSwgJ1BVVCcsIG51bGwsIG9wdGlvbnMpLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcCgocmVzcG9uc2VJbmZvOiBSZXNwb25zZUluZm8pID0+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBlbmRBdHRhY2htZW50SW5mb3NUb0NsaWVudChyZXNwb25zZUluZm8ucmV0dXJuVmFsdWUsIGlzUm9vdEVudGl0eSk7XHJcbiAgICAgIH0pLFxyXG4gICAgICB0YXAoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIm+W7uuacjeWKoeWZqOerr+mcgOimgeeahOabtOaWsOS/oeaBr1xyXG4gICAqL1xyXG4gIHByaXZhdGUgY3JlYXRlVXBkYXRlQXR0YWNoSW5mbyhhdHRhY2htZW50SW5mb0ZpZWxkUGF0aDogc3RyaW5nLCBhdHRhY2htZW50SW5mbzogQXR0YWNobWVudEluZm8pOiBTZXJ2ZXJBdHRhY2htZW50SW5mbyB7XHJcblxyXG4gICAgY29uc3QgYXR0YWNobWVudElkID0gYXR0YWNobWVudEluZm8uYXR0YWNobWVudElkO1xyXG4gICAgY29uc3QgcGFyZW50QmluZGluZ1BhdGhBcnJheSA9IEJpbmRpbmdQYXRoQ29udmVydGVyLnRvQmluZGluZ1BhdGhBcnJheShhdHRhY2htZW50SW5mb0ZpZWxkUGF0aCk7XHJcbiAgICBwYXJlbnRCaW5kaW5nUGF0aEFycmF5LnBvcCgpO1xyXG4gICAgY29uc3Qgbm9kZUNvZGVzID0gQmVmRGF0YVBhdGhVdGlsLmNvbnZlcnRUb09iamVjdENvZGVzKHBhcmVudEJpbmRpbmdQYXRoQXJyYXksIHRoaXMuYmluZGluZ0RhdGEpO1xyXG4gICAgY29uc3QgaGlyZXRyeUlkcyA9IEJlZkRhdGFQYXRoVXRpbC5jb252ZXJ0VG9EYXRhSWRzRm9yVXBkYXRlKHBhcmVudEJpbmRpbmdQYXRoQXJyYXksIHRoaXMuYmluZGluZ0RhdGEpO1xyXG5cclxuICAgIGNvbnN0IHNlcnZlckF0dGFjaEluZm86IFNlcnZlckF0dGFjaG1lbnRJbmZvID0ge1xyXG4gICAgICBOb2RlQ29kZXM6IG5vZGVDb2RlcyxcclxuICAgICAgSGlyZXRyeUlkczogaGlyZXRyeUlkcyxcclxuICAgICAgQXR0YWNobWVudElkczogW2F0dGFjaG1lbnRJZF0sXHJcbiAgICAgIEF0dGFjaG1lbnRJZDogYXR0YWNobWVudElkXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBzZXJ2ZXJBdHRhY2hJbmZvO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yib5bu65pyN5Yqh5Zmo56uv6ZyA6KaB55qE5om56YeP5paw5aKe6ZmE5Lu25L+h5oGvXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjcmVhdGVCYXRjaENyZWF0ZUF0dGFjaEluZm8oYXR0YWNobWVudEluZm9GaWVsZFBhdGg6IHN0cmluZywgYXR0YWNobWVudEluZm86IEF0dGFjaG1lbnRJbmZvW10pOiBTZXJ2ZXJBdHRhY2htZW50SW5mbyB7XHJcbiAgICBjb25zdCBhdHRhY2htZW50SWRzID0gQXR0YWNobWVudFV0aWwucGVla0F0dGFjaG1lbnRJZHMoYXR0YWNobWVudEluZm8pO1xyXG5cclxuICAgIGNvbnN0IHBhcmVudEJpbmRpbmdQYXRoQXJyYXkgPSBCaW5kaW5nUGF0aENvbnZlcnRlci50b0JpbmRpbmdQYXRoQXJyYXkoYXR0YWNobWVudEluZm9GaWVsZFBhdGgpO1xyXG4gICAgcGFyZW50QmluZGluZ1BhdGhBcnJheS5wb3AoKTtcclxuICAgIGNvbnN0IG5vZGVDb2RlcyA9IEJlZkRhdGFQYXRoVXRpbC5jb252ZXJ0VG9PYmplY3RDb2RlcyhwYXJlbnRCaW5kaW5nUGF0aEFycmF5LCB0aGlzLmJpbmRpbmdEYXRhKTtcclxuICAgIGNvbnN0IGhpcmV0cnlJZHMgPSBCZWZEYXRhUGF0aFV0aWwuY29udmVydFRvRGF0YUlkc0ZvckFkZChwYXJlbnRCaW5kaW5nUGF0aEFycmF5LCB0aGlzLmJpbmRpbmdEYXRhKTtcclxuXHJcbiAgICBjb25zdCBzZXJ2ZXJBdHRhY2hJbmZvID0ge1xyXG4gICAgICBOb2RlQ29kZXM6IG5vZGVDb2RlcyxcclxuICAgICAgSGlyZXRyeUlkczogaGlyZXRyeUlkcyxcclxuICAgICAgQXR0YWNobWVudElkczogYXR0YWNobWVudElkcyxcclxuICAgICAgQXR0YWNobWVudElkOiBudWxsXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBzZXJ2ZXJBdHRhY2hJbmZvO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5ZCM5q2l5pyN5Yqh5Zmo56uv5pyA5paw5L+h5oGv5Yiw5a6i5oi356uvXHJcbiAgICogQHRvZG86XHJcbiAgICogMeOAgeS4u+WvueixoeaJuemHj+aWsOWinuaXtuS4jeaUr+aMgVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzeW5jQXR0YWNobWVudEluZm9zVG9DbGllbnQoKSB7XHJcbiAgICBjb25zdCByb290RGF0YUlkID0gdGhpcy5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZDtcclxuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkudXBkYXRlRW50aXR5QnlJZChyb290RGF0YUlkKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOi/veWKoOS4u+ihqOaVsOaNruWIsOWuouaIt+err1xyXG4gICAqL1xyXG4gIHB1YmxpYyBhcHBlbmRBdHRhY2htZW50SW5mb3NUb0NsaWVudChsaXN0RGF0YTogYW55W10sIGlzUm9vdEVudGl0eTogYm9vbGVhbik6IE9ic2VydmFibGU8YW55W10+IHtcclxuICAgIGlmIChpc1Jvb3RFbnRpdHkgPT09IHRydWUpIHtcclxuICAgICAgY29uc3QgZW50aXRpZXMgPSB0aGlzLnJlcG9zaXRvcnkuYnVpbGRFbnRpdGllcyhsaXN0RGF0YSk7XHJcbiAgICAgIHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmFkZEVudGl0aWVzKGVudGl0aWVzKTtcclxuICAgICAgcmV0dXJuIG9mKGxpc3REYXRhKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHJvb3REYXRhSWQgPSB0aGlzLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkO1xyXG4gICAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5LnVwZGF0ZUVudGl0eUJ5SWQocm9vdERhdGFJZCkucGlwZShcclxuICAgICAgICBtYXAoKCkgPT4gbGlzdERhdGEpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHB1YmxpYyBhcHBlbmRBdHRhY2htZW50SW5mb3MobGlzdERhdGE6IGFueVtdLCBrZXlWYWx1ZXM6IHsgW3Byb3A6IHN0cmluZ106IGFueSB9KTogT2JzZXJ2YWJsZTxhbnlbXT4ge1xyXG4gICAgY29uc3QgZW50aXRpZXMgPSB0aGlzLnJlcG9zaXRvcnkuYnVpbGRFbnRpdGllcyhsaXN0RGF0YSk7XHJcbiAgICB0aGlzLnJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi5hZGRFbnRpdGllcyhlbnRpdGllcyk7XHJcbiAgICAvLyDmm7TmlrDlrp7kvZPkvb/kuYvkuqfnlJ/lj5jmm7Tpm4ZcclxuICAgIHRoaXMudXBkYXRlRW50aXRpZXMoZW50aXRpZXMsIGtleVZhbHVlcyk7XHJcbiAgICByZXR1cm4gb2YobGlzdERhdGEpO1xyXG4gIH1cclxuICBwcml2YXRlIHVwZGF0ZUVudGl0aWVzKGVudGl0aWVzOiBFbnRpdHlbXSwga2V5VmFsdWVzOiB7IFtwcm9wOiBzdHJpbmddOiBhbnkgfSkge1xyXG4gICAgZW50aXRpZXMuZm9yRWFjaCgoZW50aXR5OiBFbnRpdHkpID0+IHtcclxuICAgICAgdGhpcy51cGRhdGVFbnRpdHkoZW50aXR5LCBrZXlWYWx1ZXMpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHByaXZhdGUgdXBkYXRlRW50aXR5KHRhcmdldDogRW50aXR5LCBrZXlWYWx1ZXM6IHsgW3Byb3A6IHN0cmluZ106IGFueSB9KSB7XHJcbiAgICBPYmplY3Qua2V5cyhrZXlWYWx1ZXMpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0VmFsdWVCeVBhdGgodGFyZ2V0LCBrZXksIGtleVZhbHVlc1trZXldKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBwcml2YXRlIHNldFZhbHVlQnlQYXRoKHRhcmdldDogb2JqZWN0LCBwYXRoOiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcclxuICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgY29uc3QgcGF0aHMgPSBwYXRoLnNwbGl0KCcuJyk7XHJcbiAgICAgIGlmIChwYXRocy5sZW5ndGggPD0gMSkge1xyXG4gICAgICAgIHRhcmdldFtwYXRoXSA9IHZhbHVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBhdGhzLnNsaWNlKDAsIC0xKS5yZWR1Y2UoKHByZXYsIHBhdGgpID0+IHtcclxuICAgICAgICAgIGlmICghKHByZXYuaGFzT3duUHJvcGVydHkocGF0aCkgfHwgcHJldlsnX19wcm90b19fJ10uaGFzT3duUHJvcGVydHkocGF0aCkpKSB7XHJcbiAgICAgICAgICAgIHByZXZbcGF0aF0gPSB7fTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBwcmV2W3BhdGhdO1xyXG4gICAgICAgIH0sIHRhcmdldClbcGF0aHNbcGF0aHMubGVuZ3RoIC0gMV1dID0gdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgeyBBdHRhY2htZW50RGF0YVNlcnZpY2UgfTtcclxuIl19