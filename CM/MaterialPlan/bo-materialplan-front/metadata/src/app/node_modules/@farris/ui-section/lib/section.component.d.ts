import { OnInit, OnDestroy, Injector } from "@angular/core";
import { Observable } from "rxjs";
import { ToolbarConfig, ButtonConfig } from "./toolbar.config";
import { ComponentTemplateRef } from "@farris/ui-common";
export declare class FarrisSectionComponent implements OnInit, OnDestroy {
    private inject;
    contentCls: string;
    baseCls: boolean;
    maxStatus: boolean;
    readonly fillCls: boolean;
    readonly enableAccordionCls: boolean;
    readonly enableCollapseCls: boolean;
    readonly enableCustomAccordionCls: boolean;
    mainTitle: string;
    subTitle: string;
    showHeader: boolean;
    enableMaximize: boolean;
    /**
     * 是否启用収折功能
     * 默认不启用収折,值为''
     * 启用默认収折,值为'default'
     * 启用自定义収折,值为 'custom'
     **/
    enableAccordion: string;
    fill: boolean;
    expandStatus: boolean;
    /**
     * 事件上下文，解决按钮点击时没有上下文的问题
     */
    context: any;
    index: any;
    toolbarPosition: string;
    toolbarBtns: any[];
    private _toolbar;
    toolbar: ToolbarConfig | null;
    toolbarDpHidden: boolean;
    ctx: any;
    headerComponentType: ComponentTemplateRef;
    titleComponentType: ComponentTemplateRef;
    contentComponentType: ComponentTemplateRef;
    toolbarComponentType: ComponentTemplateRef;
    extendComponentType: ComponentTemplateRef;
    viewchagneComponentType: ComponentTemplateRef;
    headerDirective: any;
    headerTitleDirective: any;
    headerContentDirective: any;
    headerToolbarDirective: any;
    extendDirective: any;
    contentDirective: any;
    viewChangeDirective: any;
    _disableDatas: Observable<Array<{
        [key: string]: boolean;
    }>>;
    btnStates: Observable<Array<{
        [key: string]: boolean;
    }>>;
    _visibleDatas: Observable<Array<{
        [key: string]: boolean;
    }>>;
    btnVisible: Observable<Array<{
        [key: string]: boolean;
    }>>;
    clickThrottleTime: number;
    toolbarContainer: any;
    btnPlaceHolder: any;
    private clickItems;
    private clickSubscription;
    trackByButton(index: number, btn: any): number;
    private ro;
    private resizeEl;
    private ngZone;
    private renderer;
    inMoreButtonContents: ButtonConfig[];
    constructor(inject: Injector);
    ngOnInit(): void;
    /**
     * 获取按钮配置中，禁用、可见的属性
     * @param id
     * @param stateProp
     */
    getState(btnItem: any, stateProp: any): any;
    /**
     * 改变可用状态
     * @param values
     */
    private changeState;
    /**
     * 查找
     * @param id
     * @param datas
     */
    private _findItemByID;
    ngOnDestroy(): void;
    /**
     * 绑定限制
     */
    private bindResizeEvent;
    /**
     * 按钮数据变更后触发检查
     */
    private afterBindToolbarData;
    /**
     * 判断下拉按钮是否显示
     */
    private _calculateToolbarDropdownIsShow;
    /**
     * 计算显示的按钮个数及更多中显示的按钮个数
     */
    private _calculateButtonsShow;
    /**
     * 在按钮状态变化时解除限制
     */
    private unBindResizeEvent;
    /**
     * @return string
     * '' 不存在按钮，无所谓位置
     * 'inHead' 按钮在头部
     * 'inContent' 按钮在内容位置
     */
    private getToolbarPosition;
    /**
     * 判断是否显示、隐藏
     * @param id
     * @param state
     */
    getToolbarState(id: string, state?: Observable<any>, defaultValue?: boolean): Observable<any>;
    clickHandler(btnInfo: any): void;
}
