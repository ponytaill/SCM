{"version":3,"sources":["ng://@farris/ui-progress-step/lib/progress-step.service.ts","ng://@farris/ui-progress-step/lib/progress-step.component.ts","ng://@farris/ui-progress-step/lib/progress-step.module.ts"],"names":["ProgressStepService","Injectable","args","providedIn","ProgressStepItemTemplateDirective","Directive","selector","TemplateRef","template","this","ProgressStepExtendTemplateDirective","Object","defineProperty","ProgressStepComponent","prototype","_subStepData","value","ngOnInit","_stepData","_this","setTimeout","stepInit","ngOnChanges","changes","steps","stepData","forEach","item","status","stepMessages","filter","hidden","index","findIndex","id","currentId","activeIndex","listClick","step","clickable","stepClick","emit","goStep","storedIndexState","currentIndex","i","nextStep","length","prevStep","getCurrentStepIndex","data","setProgressData","progressData","setActiveIndex","num","activeNum","Component","ContentChild","read","Input","Output","direction","fill","stepsCls","EventEmitter","ProgressStepModule","NgModule","declarations","imports","CommonModule","LocaleModule","forRoot","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProgressStepService {\r\n\r\n  constructor() { }\r\n}\r\n","import { Component, OnInit, Input, Output, Directive, TemplateRef, ContentChild,EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[progressStepItem]'\r\n})\r\nexport class ProgressStepItemTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n\r\n@Directive({\r\n  selector: '[progressStepExtend]'\r\n})\r\nexport class ProgressStepExtendTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) {}\r\n}\r\n\r\n\r\nexport interface stepMessage {\r\n  \"id\": string,\r\n  \"title\": string,\r\n  \"icon\"?:string,\r\n  \"status\"?:string,\r\n  \"clickDisable\"?:boolean,\r\n  \"hidden\"?:boolean,\r\n  \"class\"?:string\r\n}\r\nexport interface progressData {\r\n  activeIndex:number,\r\n  stepMessages:stepMessage[]\r\n}\r\n\r\n@Component({\r\n  selector: 'farris-progress-step',\r\n  templateUrl:'./progress-step.component.html',\r\n  styleUrls:[\r\n    './progress-step.component.scss'\r\n  ]\r\n})\r\nexport class ProgressStepComponent implements OnInit, OnChanges {\r\n\r\n  @ContentChild(ProgressStepItemTemplateDirective, {read: TemplateRef}) progressStepTemplate: TemplateRef<any>;\r\n  @ContentChild(ProgressStepExtendTemplateDirective, {read: TemplateRef}) progressStepExtendTmpl: TemplateRef<any>;\r\n\r\n  //è¿åº¦æ¡æ°æ®\r\n  // @Input() stepData:progressData;\r\n\r\n  /**æ¨ªåhorizontalãç«åæåvertical*/\r\n  @Input() direction = 'horizontal';\r\n  /**æ¯å¦éºæ»¡ */\r\n  @Input() fill:boolean = false;\r\n  /**æ¯å¦æ¯æç¹å» */\r\n  @Input() clickable:boolean = false;\r\n  // æ­¥éª¤æ¡æ´ä½æ ·å¼\r\n  @Input() stepsCls='';\r\n  @Input() fHeight:number;\r\n  // æ­¥éª¤æ¡Style,åæ³ [stepStyle]=\"{'max-width':'100px'}\"\r\n  @Input() stepStyle:any;\r\n  @Output('stepClick') stepClick = new EventEmitter();\r\n  \r\n\r\n  @Input() steps: stepMessage[];\r\n  @Input() currentId: string;\r\n  @Input() storedIndexState:boolean = false;\r\n\r\n  _subStepData;\r\n  @Input()\r\n  set subStepData(value){\r\n    this._subStepData = value;\r\n  }\r\n  get subStepData(){\r\n    return this._subStepData;\r\n  }\r\n\r\n  stepMessages: stepMessage[];\r\n  activeIndex:number = 0; //ä»0å¼å§\r\n  currentIndex:number;\r\n\r\n  private innerStepData: progressData;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  _stepData:progressData;\r\n  @Input()\r\n  set stepData(value){\r\n    // if(value['stepMessages']&&value['stepMessages'].length){\r\n    //   value['stepMessages'].forEach(step => {\r\n    //     //if(typeof step.status === 'undefined'){\r\n    //       step.status = '';\r\n    //     //}\r\n    //   });\r\n    //   this.stepMessages = value['stepMessages'].filter((step) =>{\r\n    //     return !step.hidden;\r\n    //   });\r\n    // }\r\n    // this.activeIndex = value['activeIndex'];\r\n    setTimeout(() => {\r\n      if(value){\r\n        this.stepInit(value);\r\n      }\r\n    });\r\n  }\r\n  get stepData(){\r\n    return this._stepData;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // if (changes['stepData'] && this.stepData) {\r\n    //   // if(this.stepData['stepMessages']&&this.stepData['stepMessages'].length){\r\n    //   //   this.stepData['stepMessages'].forEach(step => {\r\n    //   //     //if(typeof step.status === 'undefined'){\r\n    //   //       step.status = '';\r\n    //   //     //}\r\n    //   //   });\r\n    //   //   this.stepMessages = this.stepData['stepMessages'].filter((step) =>{\r\n    //   //     return !step.hidden;\r\n    //   //   });\r\n    //   // }\r\n    //   // this.activeIndex = this.stepData['activeIndex'];\r\n    //   this.stepInit();\r\n    // } else \r\n    if (changes['steps'] || changes['currentId']) {\r\n      if (!this.steps || this.stepData) { return; }\r\n      this.steps.forEach(item => item.status = '');\r\n      this.stepMessages = this.steps.filter(item => !item.hidden);\r\n      let index = this.stepMessages.findIndex(item => item.id === this.currentId);\r\n      this.activeIndex = index === -1 ? 0 : index;\r\n    }\r\n  }\r\n\r\n  /**ç¹å»æä¸æ­¥ */\r\n  listClick(step,index){\r\n    if(this.clickable){\r\n      this.stepClick.emit({'step':step,'index':index});\r\n    }\r\n  }\r\n\r\n  goStep(index){\r\n    if(this.storedIndexState){\r\n      if(this.activeIndex == index){\r\n        this.currentIndex = null;\r\n      }\r\n      else{\r\n        this.currentIndex = index;\r\n      }\r\n    }\r\n    else{\r\n      this.stepMessages.forEach((step, i )=> {\r\n        if(i<index){\r\n          step.status = 'finish';\r\n        }\r\n        else if(i>index){\r\n          step.status = '';\r\n        }\r\n        else{\r\n          step.status = 'active';\r\n        }\r\n      });\r\n      this.activeIndex = index;\r\n    }\r\n    \r\n  }\r\n\r\n  /**ä¸ä¸æ­¥ */\r\n  nextStep(){\r\n    if(this.storedIndexState && this.currentIndex < this.stepMessages.length-1){\r\n      this.currentIndex++;\r\n    }\r\n    if(this.activeIndex < this.stepMessages.length-1){\r\n      this.stepMessages[this.activeIndex].status = 'finish';\r\n      this.stepMessages[this.activeIndex+1].status = 'active';\r\n      this.activeIndex++;\r\n      if(this.storedIndexState){\r\n        this.currentIndex = this.activeIndex;\r\n      }\r\n\r\n    }\r\n    //return this.activeIndex;\r\n  }\r\n  /**ä¸ä¸æ­¥ */\r\n  prevStep(){\r\n    // if(this.storedIndexState && this.currentIndex > 0){\r\n    //   this.currentIndex--;\r\n    // }\r\n    if(this.activeIndex > 0){\r\n    // else if(this.activeIndex > 0 && !this.storedIndexState){\r\n      this.stepMessages[this.activeIndex].status = '';\r\n      this.stepMessages[this.activeIndex-1].status = 'active';\r\n      this.activeIndex--;\r\n      if(this.storedIndexState){\r\n        this.currentIndex = this.activeIndex;\r\n      }\r\n      \r\n    }\r\n    //return this.activeIndex;\r\n  }\r\n\r\n  getCurrentStepIndex(){\r\n    return this.activeIndex;\r\n  }\r\n\r\n  stepInit(data){\r\n    if(data['stepMessages']&&data['stepMessages'].length){\r\n      data['stepMessages'].forEach(step => {\r\n        //if(typeof step.status === 'undefined'){\r\n          step.status = '';\r\n        //}\r\n      });\r\n      this.stepMessages = data['stepMessages'].filter((step) =>{\r\n        return !step.hidden;\r\n      });\r\n    }\r\n    this.activeIndex = data['activeIndex'];\r\n    if(this.storedIndexState){\r\n      this.currentIndex = this.activeIndex;\r\n    }\r\n  }\r\n\r\n  setProgressData(progressData:progressData){\r\n    if(progressData){\r\n      //this.stepData = progressData;\r\n      this.stepInit(progressData);\r\n    }\r\n  }\r\n\r\n  setActiveIndex(num:number){\r\n    let activeNum:number  = (num>= 0 && num < this.stepMessages.length)? num: 0;\r\n    this.activeIndex = activeNum;\r\n    \r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ProgressStepComponent,ProgressStepItemTemplateDirective,ProgressStepExtendTemplateDirective } from './progress-step.component';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\n\r\n@NgModule({\r\n  declarations: [ProgressStepComponent,ProgressStepItemTemplateDirective,ProgressStepExtendTemplateDirective],\r\n  imports: [\r\n    CommonModule,\r\n    LocaleModule.forRoot()\r\n  ],\r\n  exports: [ProgressStepComponent,ProgressStepItemTemplateDirective,ProgressStepExtendTemplateDirective]\r\n})\r\nexport class ProgressStepModule { }\r\n"]}