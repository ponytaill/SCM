import { Directive, HostListener, EventEmitter, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { BindingData, ChangeType, ViewModel, DataTypeInfo, EntityPathConverter, RunMode } from '@farris/devkit';
import { DatagridComponent } from '@farris/ui-datagrid';
import { debounceTime, finalize } from 'rxjs/operators';
// tslint:disable: max-line-length
/*
 * 使用绑定数据指令
 */
var FarrisDatagridUseBindingDataDirective = /** @class */ (function () {
    function FarrisDatagridUseBindingDataDirective(bindingData, viewModel, grid) {
        this.bindingData = bindingData;
        this.viewModel = viewModel;
        this.grid = grid;
        // 排序字段
        this.sortFields = null;
        // 排序方向
        this.sortDirections = null;
        this.parentId = null;
        /**
         * 过滤条件
         */
        this.filters = null;
        /**
         * 渲染grid
         */
        this.renderGridSubject = new Subject();
        /**
         * 选中行切换事件
         */
        this.selectedRowChange = new EventEmitter();
        this.setChecks([]);
        this.registerEvent();
    }
    Object.defineProperty(FarrisDatagridUseBindingDataDirective.prototype, "props", {
        get: function () {
            return this._PROPS;
        },
        set: function (value) {
            this._PROPS = value;
        },
        enumerable: true,
        configurable: true
    });
    // #region Ng Event
    FarrisDatagridUseBindingDataDirective.prototype.ngOnInit = function () {
        var _this = this;
        var _a = (this.getPagingInfo() || {}).pageSize, pageSize = _a === void 0 ? 0 : _a;
        if (pageSize !== 0) {
            // 启用分页
            if ((!this.grid.pageList || this.grid.pageList.length < 1) && typeof this.grid['setPageList'] === 'function') {
                this.grid['setPageList']([pageSize, pageSize * 2, pageSize * 3, pageSize * 4]);
            }
        }
        this.setComponentRef();
        this.bindData();
        window.setTimeout(function () {
            _this.updateSelectedRow();
        }, 0);
        this.registerBindingDataChangeEvent();
        this.renderGridSubject.pipe(debounceTime(500)).subscribe(function (change) {
            if (!_this.viewModel || !_this.viewModel.frameContext || _this.viewModel.frameContext.isDisposed) {
                return;
            }
            _this.bindData(change);
        });
    };
    FarrisDatagridUseBindingDataDirective.prototype.ngOnChanges = function (changes) {
        this.bindData();
    };
    Object.defineProperty(FarrisDatagridUseBindingDataDirective.prototype, "primaryKey", {
        // #endregion
        /**
         * 主键
         */
        get: function () {
            return this.bindingList.primaryKey;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisDatagridUseBindingDataDirective.prototype, "bindingList", {
        /**
         * 获取绑定数据
         */
        get: function () {
            // 根实体
            if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
                return this.bindingData.list;
            }
            // 子实体
            var bindingPath = this.viewModel.bindingPath.substr(1);
            bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
            var paths = bindingPath.split('/');
            var filteredPaths = paths.filter(function (part) {
                return part !== '';
            });
            return this.bindingData.getValue(filteredPaths);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 设置组件引用
     */
    FarrisDatagridUseBindingDataDirective.prototype.setComponentRef = function () {
        var appContext = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.getFormAppContext();
        var frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId;
        var id = this.grid && this.grid.id;
        // 如果frameId不存在或farris grid没有id属性，说明不符合使用场景
        if (!frameId || !id) {
            return;
        }
        var map = appContext && appContext.componentRefs && appContext.componentRefs.get(frameId) || new Map();
        appContext && appContext.componentRefs && appContext.componentRefs.set(frameId, map.set(id, this.grid));
    };
    /**
     * 获取分页信息
     */
    FarrisDatagridUseBindingDataDirective.prototype.getPagingInfo = function () {
        var bindingPath = this.viewModel.bindingPath;
        var bindingData = this.viewModel.bindingData;
        var pagingInfo = bindingData && bindingData.pagingInfo || {};
        if (bindingPath === '/') {
            return pagingInfo;
        }
        else {
            var bindingPaths = bindingPath.substr(1).split('/').filter(function (item) { return !!item && item.length > 0; });
            // 从表及从从表分页和数据是关联的，因为不同的从表行有不同的从从表数据，分页信息的结构为nodeCode_parentId:{分页信息}且分页信息是平级的
            // {pagination:{a_pid:{pageSize:2,pageIndex:1},b_pid:{pageSize:2,pageIndex:1}}}
            // 取出当前路径下实体的nodeCode
            var nodeCode = bindingPaths[bindingPaths.length - 1];
            nodeCode = nodeCode.substr(0, nodeCode.length - 1);
            // 获取当前实体上级的主键
            // const result = pagingInfo[nodeCode] || {};
            // if (result.hasOwnProperty('totalCount')) {
            //   result.total = result.totalCount;
            // }
            // return result;
            var paths = bindingPaths.slice(0, bindingPaths.length - 1);
            var bindingList = bindingData.getValue(paths);
            var _a = (pagingInfo["" + nodeCode] || {}).pageSize, pageSize = _a === void 0 ? 0 : _a;
            // 上级表有数据
            if (bindingList && bindingList.currentId) {
                var key = nodeCode + "_" + bindingList.currentId;
                // const key = nodeCode;
                var result = pagingInfo[key] || {};
                if (result.hasOwnProperty('totalCount')) {
                    result.total = result.totalCount;
                }
                // 上级表虽然有数据，但上级表当前行的下级表可能没有数据，这就导致获取不到分页信息，所以需要在返回前对结果进行处理，如果没有分页信息的话起码应该返回分页大小及当前页码
                if (Object.keys(result).length < 1) {
                    result.pageIndex = 1;
                    result.pageSize = pageSize;
                }
                return result;
            }
            else {
                // 上级表没有数据，此时需要获取当前表的分页信息，如分页大小。当前页默认为1即可。
                return { pageIndex: 1, pageSize: pageSize };
            }
        }
    };
    // #region Input
    /**
     * 组件是否需要更新
     * @param props 当前属性
     * @param nextProps 新属性
     * @param change 变更
     */
    FarrisDatagridUseBindingDataDirective.prototype.shouldComponentUpdate = function (change, data) {
        var props = this.buildProps(data);
        if (this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.appContext && this.viewModel.frameContext.appContext.runMode === RunMode.highSpeed && change) {
            if (change.type === ChangeType.Load || change.type === ChangeType.Remove || change.type === ChangeType.PaginationInfoChange) {
                return { result: true, props: props };
            }
        }
        var gridProps = this.buildGridProps();
        if (JSON.stringify(props) === JSON.stringify(gridProps)) {
            return { result: false };
        }
        return { result: true, props: props };
    };
    FarrisDatagridUseBindingDataDirective.prototype.registerEvent = function () {
        var _this = this;
        // 排序事件
        this.grid && this.grid.columnSorted && this.grid.columnSorted.subscribe(function (event) {
            var isRemoteSort = _this.grid.remoteSort;
            // 本地排序
            if (!isRemoteSort) {
                _this.sortFields = _this.grid.sortName;
                _this.sortDirections = _this.grid.sortOrder;
                _this.sortBindingList();
                // this.props = this.buildProps();
            }
            else {
                // 服务器端排序
                var groupField = _this.grid && _this.grid.groupField || null;
                var sortFields = _this.grid.sortName && _this.grid.sortName.split(',') || [];
                var sortDirection = _this.grid.sortOrder && _this.grid.sortOrder.split(',') || [];
                if (groupField) {
                    if (!sortFields.includes(groupField)) {
                        sortFields.splice(0, 0, groupField);
                        sortDirection.splice(0, 0, 'asc');
                    }
                }
                // 获取当前entity上所有object属性
                var entityType = _this.viewModel && _this.viewModel.frameContext.repository.entityType || null;
                if (sortFields.length > 0) {
                    if (entityType) {
                        var dataTypeInfo_1 = new DataTypeInfo(entityType);
                        sortFields = sortFields.map(function (field) {
                            //if (field && field.indexOf('.') !== -1) {
                            var paths = field.split('.');
                            var propInfo = dataTypeInfo_1.getPropInfoByPath(paths);
                            var originalField = propInfo && propInfo.metadataInfo['path'] || null;
                            return originalField;
                            //}
                            //return field;
                        });
                    }
                }
                // 遍历属性，根据datafield转换为originalDataField
                var fields = sortFields.join(',');
                var directions = sortDirection.join(',') || 'asc';
                var frameContext = _this.viewModel && _this.viewModel.frameContext || null;
                if (frameContext) {
                    frameContext.repository.sortConditionManager.setConditions(_this.viewModel.bindingPath, fields, directions);
                }
            }
        });
        // 过滤事件
        this.grid && this.grid.filterChanged && this.grid.filterChanged.subscribe(function (event) {
            _this.filters = event;
            if (!_this.grid.remoteFilter) {
                if (_this.bindingList.length > 0 && !_this.bindingList.currentId) {
                    var id = _this.bindingList.getIdByIndex(0);
                    _this.bindingList.setCurrentId(id);
                }
                _this.bindData();
            }
        });
    };
    /**
     * 对bindingList排序
     */
    FarrisDatagridUseBindingDataDirective.prototype.sortBindingList = function () {
        var groupField = this.grid && this.grid.groupField || null;
        if (groupField) {
            var arrSortFields = this.sortFields && this.sortFields.split(',') || [];
            if (!arrSortFields.includes(groupField)) {
                arrSortFields.splice(0, 0, groupField);
                var arrSortDirection = this.sortDirections && this.sortDirections.split(',') || [];
                arrSortDirection.splice(0, 0, 'asc');
                this.sortFields = arrSortFields.join(',');
                this.sortDirections = arrSortDirection.join(',') || 'asc';
            }
        }
        if (this.sortFields && this.sortDirections) {
            this.bindingList.sortBy(this.sortFields, this.sortDirections);
            // this.props = this.buildProps();
        }
        this.bindData();
    };
    // #endregion
    // #region 数据绑定部分
    /**
     * 更新数据
     * @param change? 变更
     */
    FarrisDatagridUseBindingDataDirective.prototype.bindData = function (change) {
        var _this = this;
        var isRemoteFilter = this.grid && this.grid.remoteFilter || false;
        // 先执行排序
        if (this.sortFields && !this.grid.editable && change && (change.type === 'Load' || change.type === 'SelectionChanged')) {
            this.sortBindingList();
            return;
        }
        // 新增数据时清空表格筛选条件
        if ((this.grid.editable === true || change && change.type === ChangeType.Append) && this.filters && Object.keys(this.filters).length > 0 && !isRemoteFilter) {
            this.filters = {};
            this.grid.clearCondition();
        }
        // 再toJSON
        var data = this.bindingList.toJSON();
        if (this.filters && Object.keys(this.filters).length > 0 && !isRemoteFilter) {
            data = this.grid.clientFilterService.executeFilter(data, this.filters);
        }
        if (this.filters && Object.keys(this.filters).length > 0 && !isRemoteFilter && (!change || change && change.type !== ChangeType.SelectionChanged && change.type !== ChangeType.GlobalSelectionChanged)) {
            if (data && data.length > 0) {
                // 判断当前行是否在过滤后的数据中
                var row = data.find(function (item) { return item[_this.bindingList.primaryKey] === _this.bindingList.currentId; });
                if (!row) {
                    var firstRowId = data[0][this.bindingList.primaryKey];
                    this.bindingList.setCurrentId(firstRowId, true, true);
                }
            }
            else {
                // 本地过滤完之后没有数据了
                // this.bindingList.currentId = null;
                this.bindingList.setCurrentId(null, true, true, true);
                // 单选时清空ids
                if (!this.grid.multiSelect) {
                    this.setChecks([]);
                }
            }
        }
        var result = this.shouldComponentUpdate(change, data);
        if (!result.result) {
            return;
        }
        // const nextProps = this.buildProps(result);
        this.renderGrid(result.props);
        this.props = JSON.parse(JSON.stringify(result.props));
    };
    /**
     * 渲染grid
     * @param props 属性
     */
    FarrisDatagridUseBindingDataDirective.prototype.renderGrid = function (props) {
        var pageIndex = props.pageIndex, pageSize = props.pageSize, total = props.total, pagination = props.pagination, data = props.data;
        var virtualizedLoad = this.grid.virtualizedAsyncLoad || false;
        this.grid.total = total;
        this.grid.pageSize = pageSize;
        this.grid.pageIndex = pageIndex;
        this.grid.pagination = pagination;
        this.grid.controlPaginationState = false;
        // this.endCellEdit();
        if (pageSize === 0) {
            this.grid.pagination = false;
            this.grid.pageIndex = 1;
            // 修复不分页时grid启用分组仍会重新邦数的问题
            // this.grid.pageSize = total;
        }
        if (virtualizedLoad) {
            this.grid.loadVirtualData({
                items: data,
                pageIndex: pageIndex,
                pageSize: pageSize,
                total: total
            });
        }
        else {
            this.grid.loadData(data);
        }
    };
    /**
     * 构造表格数据属性
     */
    FarrisDatagridUseBindingDataDirective.prototype.buildProps = function (datas) {
        var data;
        if (typeof (datas) !== 'undefined') {
            data = datas;
        }
        else {
            data = this.bindingList.toJSON();
        }
        // let skip = 0;
        var _a = this.getPagingInfo() || {}, _b = _a.pageIndex, pageIndex = _b === void 0 ? 1 : _b, _c = _a.pageSize, pageSize = _c === void 0 ? 0 : _c;
        var _d = (this.getPagingInfo() || {}).total, total = _d === void 0 ? 0 : _d;
        // if (pageIndex > 0) {
        //   skip = (pageIndex - 1) * pageSize;
        // }
        if (pageSize === 0 && total === 0) {
            total = data.length;
        }
        return { data: data, pageIndex: pageIndex, pageSize: pageSize, total: total, pagination: pageSize !== 0 };
    };
    /**
     * 计算grid状态
     */
    FarrisDatagridUseBindingDataDirective.prototype.buildGridProps = function () {
        var data = this.grid.data || [];
        var skip = 0;
        var _a = { pageIndex: this.grid.pageIndex, pageSize: this.grid.pageSize }, _b = _a.pageIndex, pageIndex = _b === void 0 ? 1 : _b, _c = _a.pageSize, pageSize = _c === void 0 ? 0 : _c;
        var total = this.grid.total || 0;
        if (pageIndex > 0) {
            skip = (pageIndex - 1) * pageSize;
        }
        if (pageSize === 0 && total === 0) {
            total = data.length;
        }
        return { data: data, pageIndex: pageIndex, pageSize: pageSize, total: total, pagination: this.grid.pagination };
    };
    /**
     * 数据源发生变更
     * @param change 变更
     */
    FarrisDatagridUseBindingDataDirective.prototype.onBindingDataChange = function (change) {
        this.updateDataSource(change);
        this.updateSelectedRow(change);
        // this.updateGrid(change);
        // 不清除勾选行，需要保留勾选状态
        // this.clearCheckedRows(change);
        this.endCellEdit(change);
        // 更新勾选行数据
        this.updateCheckedRows(change);
        this.updateData(change);
    };
    /**
     * 更新数据
     */
    FarrisDatagridUseBindingDataDirective.prototype.updateDataSource = function (change) {
        /*if (change) {
          const isMatch = this.checkIfChangeMatchBindingPath(change);
          if (!isMatch) {
            return;
          }
        }*/
        if (change && change.type === ChangeType.ValueChanged) {
            this.renderGridSubject.next(change);
        }
        else if (change && (change.type === ChangeType.SelectionChanged || change.type === ChangeType.GlobalSelectionChanged)) {
            if (this.bindingList.currentId === (this.grid.selectedRow && this.grid.selectedRow.id) && this.grid.total > 0) {
            }
            else {
                this.bindData(change);
            }
        }
        else {
            this.bindData(change);
        }
    };
    // private endCellEdit() {
    //   const isEditing = this.grid.isEditing();
    //   if (isEditing) {
    //     this.grid.endCellEdit();
    //   }
    // }
    FarrisDatagridUseBindingDataDirective.prototype.endCellEdit = function (change) {
        var isEditing = this.grid.isEditing();
        if (change.type === ChangeType.Load && isEditing) {
            this.grid.endCellEdit();
        }
    };
    /**
     * 设置grid当前选择行
     * @param change 变更
     */
    FarrisDatagridUseBindingDataDirective.prototype.updateSelectedRow = function (change) {
        if (!this.bindingList || !this.bindingList.currentId) {
            return;
        }
        // 页码切换时不执行当前行切换
        if (change && change.type === ChangeType.PaginationInfoChange) {
            return;
        }
        if (this.viewModel && this.viewModel.frameContext.bindingData.rowSelectedEventSuspend === true) {
            return;
        }
        var _a = (this.grid.selectedRow || {}).id, gridSelectedRowId = _a === void 0 ? null : _a;
        var currentId = this.bindingList.currentId;
        // grid当前行与bingingList当前行一致，无须切换
        if (gridSelectedRowId === currentId) {
            var isMatch = change && (change.path.toString() === this.viewModel.bindingPath.split('/').filter(function (p) { return p; }).toString());
            if (change && change.type === ChangeType.Load && isMatch) {
                this.grid.clearSelections();
                this.grid.selectRow(currentId, true, true);
            }
            return;
        }
        this.selectGridRow(this.bindingList.currentId);
    };
    /**
     * 注册bindingdata变化事件
     */
    FarrisDatagridUseBindingDataDirective.prototype.registerBindingDataChangeEvent = function () {
        var _this = this;
        this.bindingDataChangeEvent = this.bindingData.changes.subscribe(function (change) {
            _this.onBindingDataChange(change);
        });
        this.viewModel.frameContext.appContext.messagePipe.subscribe(function (message) {
            if (message === 'bindData') {
                _this.bindData();
            }
        });
    };
    /**
     * 取消bindingdata变化订阅
     */
    FarrisDatagridUseBindingDataDirective.prototype.unRegisterBindingDataChangeEvent = function () {
        if (this.bindingDataChangeEvent && typeof (this.bindingDataChangeEvent.unsubscribe) === 'function') {
            this.bindingDataChangeEvent.unsubscribe();
        }
    };
    /**
     * 触发页码切换事件
     * @description 本方法适用场景仅为父级grid数据重新load，需要触发该grid重新取数使用。其他场景请勿使用
     * @TODO: 待重构，控制下级数据加载应该依赖表格的行切换事件，临时这样处理，后续提供LoadChildren事件
     */
    FarrisDatagridUseBindingDataDirective.prototype.updateData = function (change) {
        var _this = this;
        if (!(change && (change.type === ChangeType.SelectionChanged || change.type === ChangeType.Load))) {
            return;
        }
        var bindingPath = this.viewModel.bindingPath;
        var eventBindingPath = '/' + change.path.join('/');
        var isRetrieve = this.viewModel.frameContext.appContext.params.get('retrieveing') || false;
        if (change.path.length < 1 || bindingPath === '/' || bindingPath === eventBindingPath || !bindingPath.startsWith(eventBindingPath)) {
            return;
        }
        // retrieve时会自动带回从表第一页及从表第一行的从从表数据，所以不需要再去单独请求
        if (isRetrieve) {
            return;
        }
        var fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);
        var paths = fullPaths.slice(0, fullPaths.length - 1);
        var parent = this.bindingList.parent;
        var parentId = parent && parent[parent.primaryKey];
        // 上级表没有数据
        if (!parentId) {
            return;
        }
        // 获取nodecode
        var bindingPaths = this.viewModel.bindingPath.split('/').filter(function (item) { return item; });
        var nodeCode = bindingPaths[bindingPaths.length - 1];
        nodeCode = nodeCode.substr(0, nodeCode.length - 1);
        // const configPath = `/${nodeCode}_${parentId}`;
        var configPath = "/" + nodeCode;
        var _a = (this.viewModel.frameContext.repository.entityCollection.getPaginationConfigByPath(configPath) || {}).pageIndex, pageIndex = _a === void 0 ? 1 : _a;
        var _b = (this.viewModel.frameContext.repository.entityCollection.getPaginationConfigByPath(configPath) || {}).pageSize, pageSize = _b === void 0 ? 0 : _b;
        var parentNodeCode = change.path[change.path.length - 1];
        var parentConfigPath = '/' + parentNodeCode.substring(0, parentNodeCode.length - 1);
        var _c = (this.viewModel.frameContext.repository.entityCollection.getPaginationConfigByPath(parentConfigPath) || {}).pageSize, parentPageSize = _c === void 0 ? 0 : _c;
        var isQueryChild = this.viewModel.frameContext.appContext.params.get('queryChild') || false;
        if (isQueryChild) {
            // this.viewModel.frameContext.appContext.params.delete('queryChild');
            pageIndex = 1;
        }
        // 当上级表切换行时
        if (parentPageSize + pageSize !== 0) {
            this.viewModel.frameContext.appContext.params.set('forceQueryChild', true);
            this.viewModel.frameContext.repository.queryChild(paths, pageIndex, pageSize).pipe(finalize(function () { return _this.viewModel.frameContext.appContext.params.delete('forceQueryChild'); })).subscribe();
        }
    };
    FarrisDatagridUseBindingDataDirective.prototype.ngOnDestroy = function () {
        this.unRegisterBindingDataChangeEvent();
    };
    // #endregion
    // #region 事件发射器
    /**
     * 发射选中行切换事件
     * @description 统一单选模式和多选模式下的行切换事件
     */
    FarrisDatagridUseBindingDataDirective.prototype.fireSelectedRowChange = function (selectedRowContext) {
        this.selectedRowChange.emit(selectedRowContext);
    };
    /**
     * 清空选定行
     * @param change 变更
     */
    FarrisDatagridUseBindingDataDirective.prototype.clearCheckedRows = function (change) {
        if (change.type === ChangeType.Load && this.grid.multiSelect) {
            var isMatch = this.checkIfChangeMatchBindingPath(change);
            if (isMatch) {
                this.setChecks([]);
                if (typeof (this.grid.clearCheckeds) === 'function') {
                    this.grid.clearCheckeds();
                }
            }
        }
    };
    // #endregion
    // #region 通信
    /**
     * 设置BindingList的当前行
     * @param id 当前行内码
     */
    FarrisDatagridUseBindingDataDirective.prototype.setSelectionIdToBindingData = function (id) {
        // 如果当前行不存在，则强制设置
        if (!id) {
            this.bindingList.currentId = id;
            if (!this.grid.multiSelect) {
                this.setChecks([]);
            }
            return;
        }
        if (this.bindingList.currentId !== id) {
            this.bindingList.setCurrentId(id, true);
        }
        // 单选模式下将当前行设置到ids
        if (!this.grid.multiSelect) {
            this.setChecks([id]);
        }
    };
    FarrisDatagridUseBindingDataDirective.prototype.updateCheckedRows = function (changes) {
        if (changes.type === ChangeType.Load) {
            this.setCheckedRows();
        }
        else if (changes.type === ChangeType.ValueChanged) {
            var ids = this.getChecks();
            if (changes.id && ids.includes(changes.id)) {
                this.setCheckedRows();
            }
        }
    };
    /**
     * 设置选择行
     */
    FarrisDatagridUseBindingDataDirective.prototype.setChecks = function (ids) {
        this.viewModel.uiState.setPropertyValue('ids', ids);
        this.setCheckedRows(ids);
    };
    /**
     * 获取勾选行id数组
     * @returns
     */
    FarrisDatagridUseBindingDataDirective.prototype.getChecks = function () {
        return this.viewModel.uiState['ids'] || [];
    };
    /**
     * 更新勾选行数据
     */
    FarrisDatagridUseBindingDataDirective.prototype.setCheckedRows = function (ids) {
        var _this = this;
        // 高速模式时不再设置rows
        // if (this.viewModel.frameContext.appContext.runMode === RunMode.highSpeed) {
        //   return;
        // }
        if (typeof ids === 'undefined') {
            ids = this.viewModel.uiState['ids'] || [];
        }
        if (!Array.isArray(ids) || ids.length < 1) {
            // 此时ids没有值，rows中也不应该有
            this.viewModel.uiState.setPropertyValue('rows', null);
            return;
        }
        var list = [];
        // TODO：rows中数据在高速模式和普通模式下多语字段的值表现不一致，高速模式下多语字段值为对象，普通模式为当前语言。暂不处理高速模式场景
        if (this.viewModel.frameContext.appContext.runMode === RunMode.highSpeed) {
            list = this.grid.data || [];
        }
        else {
            list = this.bindingList.toJSON({ ignoreMultiLangInput: true });
        }
        var rows = this.viewModel.uiState['rows'] || new Map();
        var result = new Map();
        ids.forEach(function (id) {
            var item = list.find(function (item) { return item[_this.primaryKey] === id; });
            var otherPageItem = rows.get(id);
            if (item) {
                result.set(id, item);
            }
            else if (otherPageItem) {
                result.set(id, otherPageItem);
            }
        });
        this.viewModel.uiState.setPropertyValue('rows', result);
    };
    /**
     * 选中grid行
     * @param id id
     */
    FarrisDatagridUseBindingDataDirective.prototype.selectGridRow = function (id) {
        this.grid.selectRow(id);
        this.grid.scrollToCurrentRow();
    };
    // #endregion
    // #region 事件处理器
    /**
     * 页码切换事件
     * @param event event
     */
    FarrisDatagridUseBindingDataDirective.prototype.pageChangedHandler = function (event) {
        var pageIndex = event.pageIndex, pageSize = event.pageSize;
        if (pageIndex < 1) {
            pageIndex = 1;
        }
        var skip = (pageIndex - 1) * pageSize;
        this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
    };
    /**
     * 行切换事件
     * @param event event
     */
    FarrisDatagridUseBindingDataDirective.prototype.selectedRowChanged = function (event) {
        var index = event.index, data = event.data;
        var id = data[this.primaryKey];
        this.setSelectionIdToBindingData(id);
        this.fireSelectedRowChange(event);
    };
    /**
     * 取消行选择事件
     * @param event event
     */
    FarrisDatagridUseBindingDataDirective.prototype.unSelected = function (event) {
        if (!event) {
            return;
        }
        var _a = event.data, data = _a === void 0 ? {} : _a;
        var id = data[this.primaryKey];
        var currentId = this.bindingList.currentId;
        if (id === currentId) {
            this.setSelectionIdToBindingData(null);
        }
        // this.fireSelectedRowChange(event);
    };
    /**
     * 勾选行发生变化
     * @param event event
     */
    FarrisDatagridUseBindingDataDirective.prototype.checkedChanged = function (event) {
        event = event || [];
        var ids = event.map(function (item) { return item.id; });
        this.setChecks(ids);
    };
    /**
     * 分页大小变更事件
     * @param event event
     */
    FarrisDatagridUseBindingDataDirective.prototype.pageSizeChanged = function (event) {
        var pageIndex = event.pageIndex, pageSize = event.pageSize;
        var skip = 0; //(pageIndex - 1) * pageSize;
        // this.bindingList.setPaginationInfo(skip, pageSize);
        this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
    };
    /**
     * grid滚动加载数据
     * @param event event
     */
    FarrisDatagridUseBindingDataDirective.prototype.scrollY = function (event) {
        var pageIndex = event.pager, pageSize = event.pageSize;
        var skip = (pageIndex - 1) * pageSize;
        this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
    };
    FarrisDatagridUseBindingDataDirective.prototype.filterChanged = function (event) {
        this.filters = event;
    };
    // #endregion
    FarrisDatagridUseBindingDataDirective.prototype.checkIfChangeMatchBindingPath = function (change) {
        var isMatch = false;
        if (!change || !change.path) {
            return isMatch;
        }
        var changePathArray = change.path;
        if (!changePathArray) {
            return isMatch;
        }
        if (!(this.bindingData) && !(this.bindingData.bindingPath)) {
            return isMatch;
        }
        var bingdingPathArray = this.bindingData.bindingPath.split('/');
        if (bingdingPathArray.length <= 0) {
            return isMatch;
        }
        if (changePathArray.length === 0) { // 主表
            if (this.bindingData.bindingPath === '/') {
                isMatch = true;
            }
        }
        else if (change.path.length === 1) { // 主从表
            if (bingdingPathArray.length === 2 && bingdingPathArray[1] === change.path[0]) {
                isMatch = true;
            }
        }
        else if (change.path.length === 2) { // 主从从表
            if (bingdingPathArray.length === 3 && bingdingPathArray[1] === change.path[0] && bingdingPathArray[2] === change.path[1]) {
                isMatch = true;
            }
        }
        return isMatch;
    };
    FarrisDatagridUseBindingDataDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farris-use-binding-data]'
                },] }
    ];
    /** @nocollapse */
    FarrisDatagridUseBindingDataDirective.ctorParameters = function () { return [
        { type: BindingData },
        { type: ViewModel },
        { type: DatagridComponent }
    ]; };
    FarrisDatagridUseBindingDataDirective.propDecorators = {
        selectedRowChange: [{ type: Output }],
        pageChangedHandler: [{ type: HostListener, args: ['pageChanged', ['$event'],] }],
        selectedRowChanged: [{ type: HostListener, args: ['selectChanged', ['$event'],] }],
        unSelected: [{ type: HostListener, args: ['unSelect', ['$event'],] }],
        checkedChanged: [{ type: HostListener, args: ['checkedChange', ['$event'],] }],
        pageSizeChanged: [{ type: HostListener, args: ['pageSizeChanged', ['$event'],] }],
        scrollY: [{ type: HostListener, args: ['scrollYLoad', ['$event'],] }],
        filterChanged: [{ type: HostListener, args: ['filterChanged', ['$event'],] }]
    };
    return FarrisDatagridUseBindingDataDirective;
}());
export { FarrisDatagridUseBindingDataDirective };
//# sourceMappingURL=data:application/json;base64,