/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
* @Author: 疯狂秀才(Lucas Huang)
* @Date: 2019-08-06 07:43:53
* @LastEditors: 疯狂秀才(Lucas Huang)
* @LastEditTime: 2019-11-20 20:14:11
* @QQ: 1055818239
* @Version: v0.0.1
*/
import { ComponentFactoryResolver, ViewContainerRef } from '@angular/core';
import { Component, Input, Renderer2, ViewChild, ElementRef, ViewEncapsulation, Injector, ChangeDetectorRef, Directive, Optional, NgZone } from '@angular/core';
import { DatagridService } from '../../services/datagrid.service';
import { SCROLL_X_ACTION, FIXED_LEFT_SHADOW_CLS, SCROLL_X_REACH_START_ACTION, FIXED_RIGHT_SHADOW_CLS, SCROLL_X_REACH_END_ACTION, GRID_FILTER_ROW } from '../../types/constant';
import { DatagridComponent } from '../../datagrid.component';
import { DatagridFacadeService } from '../../services/datagrid-facade.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var DatagridHeaderComponent = /** @class */ (function () {
    function DatagridHeaderComponent(render2, injector, dg, ngZone) {
        var _this = this;
        this.render2 = render2;
        this.injector = injector;
        this.dg = dg;
        this.ngZone = ngZone;
        this.height = 35;
        this.columns = [];
        this.enableDragColumn = false;
        this.wrapHeader = false;
        this.enableFilterRow = false;
        this.scrollbarMode = 'auto';
        /**
         * 启用性能优化版
         */
        this.fast = false;
        this.ro = null;
        this.rightFixedColumnWidth = 0;
        this.normalColumnWidth = 0;
        this.showOverlay = false;
        this.disableSort = false;
        this.scrollX = 0;
        this.showShadowCls = false;
        this.top = 0;
        this.hasFixedLeftColumns = false;
        this.destroy$ = new Subject();
        this.lineNumberTitle = '序号';
        this.dfs = this.injector.get(DatagridFacadeService);
        this.dgs = this.injector.get(DatagridService);
        this.cfr = this.injector.get(ComponentFactoryResolver);
        this.cd = this.injector.get(ChangeDetectorRef);
        this.el = this.injector.get(ElementRef);
        this.dfrs = this.dg.clientFilterService;
        this.dgs.scorll$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (d.type === SCROLL_X_ACTION || d.type === SCROLL_X_REACH_END_ACTION || d.type === SCROLL_X_REACH_START_ACTION) {
                _this.scrollX = d.x;
                _this.render2.setStyle(_this.headerColumnsTable.nativeElement, 'transform', "translate3d(-" + d.x + "px, 0px, 0px)");
                if (!_this.dg.groupRows) {
                    if (_this.fixedLeft) {
                        if (d.x) {
                            _this.render2.addClass(_this.fixedLeft.nativeElement, FIXED_LEFT_SHADOW_CLS);
                        }
                        else {
                            _this.render2.removeClass(_this.fixedLeft.nativeElement, FIXED_LEFT_SHADOW_CLS);
                        }
                    }
                }
            }
            if (d.type === SCROLL_X_REACH_START_ACTION) {
                if (_this.fixedLeft) {
                    _this.render2.removeClass(_this.fixedLeft.nativeElement, FIXED_LEFT_SHADOW_CLS);
                }
            }
        }));
        this.dgs.showFixedShadow.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (_this.fixedRight) {
                _this.setFixedColumnPosition(e.showRightShadow, e.x);
            }
        }));
        this.dgs.disableHeader.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} flag
         * @return {?}
         */
        function (flag) {
            _this.showOverlay = flag;
            _this.disableSort = flag;
            _this.cd.detectChanges();
        }));
    }
    Object.defineProperty(DatagridHeaderComponent.prototype, "chkAll", {
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._chkall = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridHeaderComponent.prototype, "fr", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this.fixedRight = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridHeaderComponent.prototype, "rowSpan", {
        // 行号 、 复选框，在多表头下的合并行数
        get: 
        // 行号 、 复选框，在多表头下的合并行数
        /**
         * @return {?}
         */
        function () {
            // TFS 495872
            // return this.columns.length + (this.dg.enableFilterRow ? 1 : 0);
            return this.columns.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatagridHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dgs.checkedRowsTotalChanged$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        function () {
            if (_this._chkall) {
                /** @type {?} */
                var checkedsCount = _this.dfs.getCurrentPageCheckeds().length;
                /** @type {?} */
                var isCheckAll = _this.dfs.isCheckAll();
                /** @type {?} */
                var isIndeterminate = isCheckAll || !checkedsCount;
                _this._chkall.chk.nativeElement.indeterminate = !isIndeterminate;
                /** @type {?} */
                var _checked = isCheckAll && checkedsCount > 0;
                _this._chkall.updateStatus(_checked);
            }
        }));
        this.dgs.uncheckAll.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        function () {
            if (_this.dg.showAllCheckbox && _this._chkall) {
                _this._chkall.chk.nativeElement.indeterminate = false;
                _this._chkall.chk.nativeElement.checked = false;
            }
        }));
        this.dgs.checkAll.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        function () {
            if (_this._chkall) {
                _this._chkall.chk.nativeElement.checked = true;
            }
        }));
        this.dgs.scrollbarUpdate.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} ps
         * @return {?}
         */
        function (ps) {
            _this.ps = ps.scrollbarRef;
            /** @type {?} */
            var rw = ps.rightWidth || 0;
            if (!rw) {
                _this.rightFixedColumnWidth = _this.getRightFixedColWidth(_this.ps);
            }
            else {
                _this.rightFixedColumnWidth = rw;
            }
            if (_this.fixedRight) {
                _this.setFixedColumnPosition(_this.showShadowCls, 0);
            }
            _this.cd.detectChanges();
        }));
        this.dgs.showGridHeader.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        function () {
            _this.setHeaderPosition();
        }));
        this.dgs.smartFilterBarExpand.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        function () {
            _this.setHeaderPosition();
        }));
        this.rightFixedColumnWidth = this.getRightFixedColWidth(this.ps);
        this.hasFixedLeftColumns = this.columnsGroup && this.columnsGroup.leftFixed && !!this.columnsGroup.leftFixed.length;
    };
    /**
     * @return {?}
     */
    DatagridHeaderComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.setHeaderPosition();
        }));
        this.lineNumberTitle = this.getLineNumberTitle();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatagridHeaderComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // if (changes.scrollbarMode && !changes.scrollbarMode.isFirstChange()) {
        //     this.rightFixedColumnWidth = this.getRightFixedColWidth(this.ps);
        //     this.cd.detectChanges();
        // }
        if (changes.columnsGroup && !changes.columnsGroup.isFirstChange()) {
            this.rightFixedColumnWidth = this.getRightFixedColWidth(this.ps);
            this.hasFixedLeftColumns = this.columnsGroup && this.columnsGroup.leftFixed && !!this.columnsGroup.leftFixed.length;
            // if (!this.dg.useControlPanel) {
            //     this.fixedRight = null;
            // }
            this.cd.detectChanges();
        }
    };
    /**
     * @return {?}
     */
    DatagridHeaderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
        this.fixedRight = null;
    };
    /**
     * @private
     * @return {?}
     */
    DatagridHeaderComponent.prototype.getLineNumberTitle = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.dg.lineNumberTitle) {
            return this.dg.lineNumberTitle;
        }
        else {
            return this.dg.localeService.getValue('datagrid.lineNumberTitle');
        }
    };
    /**
     * @private
     * @param {?=} ps
     * @return {?}
     */
    DatagridHeaderComponent.prototype.getRightFixedColWidth = /**
     * @private
     * @param {?=} ps
     * @return {?}
     */
    function (ps) {
        if (ps === void 0) { ps = null; }
        if (!this.columnsGroup) {
            return 0;
        }
        /** @type {?} */
        var w = this.columnsGroup.rightFixedWidth;
        if (!ps) {
            ps = this.dg.scrollInstance.instance;
        }
        if (ps && ps.scrollbarYActive && this.scrollbarMode === 'allways') {
            return w += this.showShadowCls ? 18 : 0;
        }
        return w;
    };
    /**
     * @private
     * @return {?}
     */
    DatagridHeaderComponent.prototype.setHeaderPosition = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var top = 0;
        if ((this.dg.enableFilterRow || this.dg.enableSmartFilter) && this.dg.showFilterBar) {
            top += this.dg.filterBarHeight;
        }
        if (this.dg.showRowGroupPanel) {
            top += this.dg.rowGroupPanelHeight;
        }
        this.top = top;
        this.render2.setStyle(this.el.nativeElement, 'top', top + "px");
    };
    /**
     * @param {?} fixedLeftWidth
     * @return {?}
     */
    DatagridHeaderComponent.prototype.isShowShadow = /**
     * @param {?} fixedLeftWidth
     * @return {?}
     */
    function (fixedLeftWidth) {
        /** @type {?} */
        var dgContainerWidth = this.dg.dgContainer.nativeElement.offsetWidth;
        return dgContainerWidth < this.dg.colGroup.totalWidth;
    };
    /**
     * @param {?} left
     * @param {?} right
     * @param {?} col
     * @param {?=} isdatafield
     * @return {?}
     */
    DatagridHeaderComponent.prototype.isColspan = /**
     * @param {?} left
     * @param {?} right
     * @param {?} col
     * @param {?=} isdatafield
     * @return {?}
     */
    function (left, right, col, isdatafield) {
        if (isdatafield === void 0) { isdatafield = false; }
        // if (this.fast) {
        //     if (isdatafield) {
        //         return !col.colspan;
        //     } else {
        //         return col.colspan;
        //     }
        // }
        if (!left && !right) {
            if (isdatafield) {
                return !col.colspan && (!col.fixed || col.fixed === 'none');
            }
            else {
                return col.colspan && (!col.fixed || col.fixed === 'none');
            }
        }
        else if (left) {
            if (isdatafield) {
                return !col.colspan && col.fixed && col.fixed === 'left';
            }
            else {
                return col.colspan && col.fixed && col.fixed === 'left';
            }
        }
        else if (right) {
            if (isdatafield) {
                return !col.colspan && col.fixed && col.fixed === 'right';
            }
            else {
                return col.colspan && col.fixed && col.fixed === 'right';
            }
        }
    };
    /**
     * @param {?} isShow
     * @param {?} scrollLeft
     * @return {?}
     */
    DatagridHeaderComponent.prototype.setFixedColumnPosition = /**
     * @param {?} isShow
     * @param {?} scrollLeft
     * @return {?}
     */
    function (isShow, scrollLeft) {
        this.showShadowCls = isShow;
        /** @type {?} */
        var method = isShow ? 'addClass' : 'removeClass';
        this.render2[method](this.fixedRight.nativeElement, FIXED_RIGHT_SHADOW_CLS);
        /** @type {?} */
        var realWidth = this.columnsGroup.leftFixedWidth + this.columnsGroup.normalWidth + this.rightFixedColumnWidth;
        /** @type {?} */
        var gridWidth = this.dg.width;
        /** @type {?} */
        var l = this.dg.width - (this.dg.showBorder ? 2 : 1) - this.rightFixedColumnWidth;
        if (gridWidth > realWidth) {
            l = this.columnsGroup.leftFixedWidth + this.columnsGroup.normalWidth;
        }
        this.render2.setStyle(this.fixedRight.nativeElement, 'left', l + 'px');
    };
    /**
     * @param {?} e
     * @param {?} rntd
     * @return {?}
     */
    DatagridHeaderComponent.prototype.onRowNumerColumnDblClick = /**
     * @param {?} e
     * @param {?} rntd
     * @return {?}
     */
    function (e, rntd) {
        /** @type {?} */
        var maxRowNumber = this.dg.getRows().length;
        if (this.dg.pagination) {
            /** @type {?} */
            var pageSize = this.dg.pageSize;
            /** @type {?} */
            var pageIndex = this.dg.pageIndex;
            maxRowNumber = pageSize * pageIndex + pageSize;
        }
        this.dg.longTextArea.nativeElement.innerHTML = maxRowNumber;
        /** @type {?} */
        var w1 = this.dg.longTextArea.nativeElement.offsetWidth;
        /** @type {?} */
        var currentWidth = rntd.offsetWidth;
        if (w1 > currentWidth) {
            this.dg.lineNumberWidth = w1 + 10;
            this.dfs.updateProperty('lineNumberWidth', this.dg.lineNumberWidth);
            this.dfs.resizeColumns();
        }
    };
    /**
     * @param {?} e
     * @param {?} col
     * @return {?}
     */
    DatagridHeaderComponent.prototype.onSortColumnClick = /**
     * @param {?} e
     * @param {?} col
     * @return {?}
     */
    function (e, col) {
        var _this = this;
        if (this.disableSort) {
            return;
        }
        if (!col.sortable) {
            return;
        }
        // 结束编辑
        this.dg.cancelEdit(null);
        /** @type {?} */
        var sortName = this.dg.sortName;
        /** @type {?} */
        var sortOrder = this.dg.sortOrder;
        /** @type {?} */
        var sortFields = [];
        /** @type {?} */
        var sortOrders = [];
        if (sortName) {
            sortFields = sortName.split(',');
            sortOrders = sortOrder.split(',');
        }
        /** @type {?} */
        var colOrder = col.order || 'asc';
        /** @type {?} */
        var newOrder = colOrder;
        /** @type {?} */
        var i = sortFields.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n === col.field; }));
        if (i >= 0) {
            /** @type {?} */
            var _order = sortOrders[i] === 'asc' ? 'desc' : 'asc';
            newOrder = _order;
            // if (this.dg.multiSort && newOrder === 'asc') {
            if (newOrder === 'asc') {
                newOrder = undefined;
                sortFields.splice(i, 1);
                sortOrders.splice(i, 1);
            }
            else {
                sortOrders[i] = _order;
            }
        }
        else {
            if (this.dg.multiSort) {
                sortFields.push(col.field);
                sortOrders.push(colOrder);
            }
            else {
                sortFields = [col.field];
                sortOrders = [colOrder];
            }
        }
        col.order = newOrder;
        this.dg.sortName = sortFields.join(',');
        this.dg.sortOrder = sortOrders.join(',');
        this.dfs.setSortInfo(this.dg.sortName, this.dg.sortOrder);
        this.dg.beforeSortColumn(this.dg.sortName, this.dg.sortOrder, this.dg).subscribe((/**
         * @return {?}
         */
        function () {
            _this.dg.onColumnSorted();
        }));
    };
    DatagridHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-header',
                    template: "<!--\r\n * @Author: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @Date: 2019-08-06 07:43:53\r\n * @LastEditors: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @LastEditTime: 2019-11-05 08:53:26\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n -->\r\n <!-- [style.maxWidth.px]=\"col.width - 44\"   =>  style=\"width: 100%\"    -->\r\n<ng-template #filterAndSort let-col>\r\n    <ng-container *ngIf=\"col.filter\">\r\n        <span style=\"width: 100%\" class=\"f-datagrid-header-cell-title\">\r\n            <span class=\"text-danger\" *ngIf=\" col.validators | showStar \">*</span>\r\n            {{ col.title }}\r\n        </span>\r\n        <ng-container *ngIf=\"col.sortable \">\r\n            <span class=\"f-datagrid-sort\" [class.f-datagrid-filter-sort-asc]=\"col.order === 'asc'\"\r\n                [class.f-datagrid-filter-sort-desc]=\"col.order === 'desc'\"\r\n                [style.cursor]=\"disableSort ? 'not-allowed': 'pointer'\" *ngIf=\"col.order\"\r\n                datagrid-smart-filter [disabled]=\"disableSort\" [column]=\"col\"> </span>\r\n            <span class=\"f-datagrid-sort f-datagrid-filter-sort\" [style.cursor]=\"disableSort ? 'not-allowed': 'pointer'\"\r\n                datagrid-smart-filter [disabled]=\"disableSort\" [column]=\"col\" *ngIf=\"!col.order\"></span>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!col.sortable\">\r\n            <span class=\"f-datagrid-sort f-datagrid-filter\" datagrid-smart-filter  [disabled]=\"disableSort\"  [column]=\"col\"></span>\r\n        </ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!col.filter\" [ngTemplateOutlet]=\"column_title\" [ngTemplateOutletContext]=\"{$implicit: col}\">\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #column_title let-col>\r\n    <ng-container *ngIf=\"!col.sortable\">\r\n        <span [style.width.px]=\"col.width - 20\" class=\"f-datagrid-header-cell-title\" *ngIf=\"col.field !== dg.ControlPanelFeild\">\r\n            <span class=\"text-danger\" *ngIf=\" col.validators | showStar \">*</span>\r\n            {{ col.title }}\r\n        </span>\r\n        <span *ngIf=\"col.field === dg.ControlPanelFeild\" class=\"f-datagrid-header-cell-title\"\r\n            style=\"position: absolute; left: 3px; top: 0; cursor: pointer;\"\r\n            (click)=\"dg.showControlPanel($event)\">\r\n            <span class=\"f-icon f-icon-home-setup\"></span>\r\n        </span>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"col.sortable\">\r\n        <span style=\"width: 100%\"  class=\"f-datagrid-header-cell-title\">\r\n            <span class=\"text-danger\" *ngIf=\" col.validators | showStar \">*</span>\r\n            {{ col.title }}\r\n        </span>\r\n        <span class=\"f-datagrid-sort\" [class.f-datagrid-sort-asc]=\"col.order === 'asc'\"\r\n            [class.f-datagrid-sort-desc]=\"col.order === 'desc'\"\r\n            [style.cursor]=\"disableSort ? 'not-allowed': 'pointer'\"\r\n            (click)=\"onSortColumnClick($event, col)\" *ngIf=\"col.order\"> </span>\r\n        <span class=\"f-datagrid-sort\" [style.cursor]=\"disableSort ? 'not-allowed': 'pointer'\"\r\n            (click)=\"onSortColumnClick($event, col)\" *ngIf=\"!col.order \"></span>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<!-- \u4F7F\u7528\u8868\u5934\u6A21\u677F\u65F6\uFF0C\u6392\u5E8F\u6A21\u677F -->\r\n<ng-template #column_sort let-col>\r\n    <ng-container *ngIf=\"!col.sortable\">\r\n        <span *ngIf=\"col.field === dg.ControlPanelFeild\" class=\"f-datagrid-header-cell-title\"\r\n            style=\"position: absolute; left: 3px; top: 0; cursor: pointer;\"\r\n            (click)=\"dg.showControlPanel($event)\">\r\n            <span class=\"f-icon f-icon-home-setup\"></span>\r\n        </span>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"col.sortable\">\r\n        <span class=\"f-datagrid-sort\" [class.f-datagrid-sort-asc]=\"col.order === 'asc'\"\r\n            [class.f-datagrid-sort-desc]=\"col.order === 'desc'\"\r\n            [style.cursor]=\"disableSort ? 'not-allowed': 'pointer'\"\r\n            (click)=\"onSortColumnClick($event, col)\" *ngIf=\"col.order\"> </span>\r\n        <span class=\"f-datagrid-sort\" [style.cursor]=\"disableSort ? 'not-allowed': 'pointer'\"\r\n            (click)=\"onSortColumnClick($event, col)\" *ngIf=\"!col.order \"></span>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<!-- \u4F7F\u7528\u8868\u5934\u6A21\u677F\u65F6\uFF0C\u667A\u80FD\u8FC7\u6EE4\u6A21\u677F -->\r\n<ng-template #smartfilter let-col>\r\n    <ng-container *ngIf=\"col.filter\">\r\n        <ng-container *ngIf=\"col.sortable \">\r\n            <span class=\"f-datagrid-sort\" [class.f-datagrid-filter-sort-asc]=\"col.order === 'asc'\"\r\n                [class.f-datagrid-filter-sort-desc]=\"col.order === 'desc'\"\r\n                [style.cursor]=\"disableSort ? 'not-allowed': 'pointer'\" *ngIf=\"col.order\"\r\n                datagrid-smart-filter [disabled]=\"disableSort\" [column]=\"col\"> </span>\r\n            <span class=\"f-datagrid-sort f-datagrid-filter-sort\" [style.cursor]=\"disableSort ? 'not-allowed': 'pointer'\"\r\n                datagrid-smart-filter [disabled]=\"disableSort\" [column]=\"col\" *ngIf=\"!col.order\"></span>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!col.sortable\">\r\n            <span class=\"f-datagrid-sort f-datagrid-filter\" datagrid-smart-filter  [disabled]=\"disableSort\"  [column]=\"col\"></span>\r\n        </ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!col.filter\" [ngTemplateOutlet]=\"column_sort\" [ngTemplateOutletContext]=\"{$implicit: col}\"></ng-container>\r\n</ng-template>\r\n\r\n\r\n<ng-template #column_template let-col let-left=\"left\" let-right=\"right\">\r\n    <ng-container *ngIf=\"isColspan(left, right, col, false) \">\r\n        <td [resize-column]=\"col\" class=\"f-datagrid-header-cell f-datagrid-header-cell-group\" [attr.align]=\"col.halign\"\r\n            [attr.colspan]=\"col.colspan\" [attr.title]=\"col.title\"\r\n            [class.r-shadow-col]=\"col.rightShadowCol\"\r\n            [class.l-shadow-col]=\"col.leftShadowCol\">\r\n            <div class=\"f-datagrid-header-cell-content\" [header-style]=\"col\">\r\n                {{ col.title }}\r\n            </div>\r\n        </td>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"isColspan(left, right, col, true)\">\r\n        <td [resize-column]=\"col\" class=\"f-datagrid-header-cell\" [attr.align]=\"col.halign\" [attr.field]=\"col.field\"\r\n            [attr.rowspan]=\"col.rowspan\" [attr.title]=\"col.title\"\r\n            *ngIf=\"dg.columnIsVisible(col)\"\r\n            [style.display]=\"dg.columnIsVisible(col) ? '': 'none'\"\r\n            [class.f-datagrid-header-cell-sort]=\"col.sortable\"\r\n            [class.smooth-dnd-draggable-wrapper]=\"enableDragColumn && col.field !== dg.ControlPanelFeild \"\r\n            >\r\n            <div class=\"f-datagrid-header-cell-content\" [header-style]=\"col\" [style.width.px]=\"col.width\">\r\n                <span class=\"drag-column-bar f-icon f-icon-more-vertical\" *ngIf=\"col.field !== dg.ControlPanelFeild && enableDragColumn && !dg.editable\"></span>\r\n                <ng-container *ngIf=\"col.headerTemplate\">\r\n                    <ng-container [ngTemplateOutlet]=\"col.headerTemplate\" [ngTemplateOutletContext]=\"{$implicit: col}\"></ng-container>\r\n                    <ng-container [ngTemplateOutlet]=\" !dg.enableSmartFilter ? column_sort : smartfilter \" [ngTemplateOutletContext]=\"{$implicit: col}\"></ng-container>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"!col.headerTemplate\" [ngTemplateOutlet]=\" !dg.enableSmartFilter ? column_title : filterAndSort \" [ngTemplateOutletContext]=\"{$implicit: col}\"></ng-container>\r\n            </div>\r\n        </td>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #header_template_inner let-columns let-left=\"left\" let-right=\"right\" let-groupCols=\"groupCols\">\r\n    <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"height: 100%\">\r\n        <colgroup>\r\n            <col width=\"36px\" *ngIf=\"dg.showCheckbox && left\">\r\n            <col [width]=\"dg?.lineNumberWidth + 'px'\" *ngIf=\"dg.showLineNumber && left\">\r\n            <ng-container *ngFor=\"let col of groupCols\">\r\n                <col [width]=\"col.width + 'px'\" *ngIf=\"col.width && col.field\">\r\n            </ng-container>\r\n        </colgroup>\r\n        <thead [class.header-wrap]=\"wrapHeader\">\r\n            <tr class=\"f-datagrid-header-row\" *ngFor=\"let cols of columns; index as colsIdx; first as isFirst\"\r\n                [drag-column]=\"enableDragColumn\" [groupName]=\"left?'left': right ? 'right': 'center'\">\r\n                <!-- \u590D\u9009\u6846 -->\r\n                <td *ngIf=\"dg.showCheckbox && isFirst && left\" #chktd\r\n                    class=\"f-datagrid-header-cell f-datagrid-header-checkbox\" \r\n                    [attr.rowspan]=\"rowSpan\">\r\n                    <div class=\"f-datagrid-header-cell-content\" style=\"width: 36px; text-align: center;overflow:hidden; \">\r\n                        <datagrid-header-checkbox #chkAll *ngIf=\"dg.showAllCheckbox && dg.multiSelect\" ></datagrid-header-checkbox>\r\n                    </div>\r\n                </td>\r\n                <!-- \u884C\u53F7 -->\r\n                <td *ngIf=\"dg.showLineNumber && isFirst && left\" #rntd\r\n                    class=\"f-datagrid-header-cell f-datagrid-cell-rownumber\" [attr.rowspan]=\"rowSpan\"\r\n                    (dblclick)=\"onRowNumerColumnDblClick($event, rntd)\">\r\n                    <div class=\"f-datagrid-header-cell-content\" style=\"padding: 0px;\"  [style.width.px]=\"dg?.lineNumberWidth\">\r\n                        \r\n                        <span style=\"width: 100%\" class=\"f-datagrid-header-cell-title\">\r\n                            {{ lineNumberTitle }}\r\n                        </span>\r\n                    </div>\r\n                </td>\r\n                <ng-container *ngFor=\"let col of cols; last as isLast\">\r\n                    <ng-container\r\n                        *ngTemplateOutlet=\"column_template; context: {$implicit: col, left: left, right: right}\">\r\n                    </ng-container>\r\n                </ng-container>\r\n            </tr>\r\n            <tr *ngIf=\"enableFilterRow\" [style.height.px]=\"dg.filterRowHeight\" class=\"f-datagrid-header-row f-datagrid-filter-row\">\r\n                <!-- \u590D\u9009\u6846 -->\r\n                <td *ngIf=\"dg.showCheckbox && left\" class=\"f-datagrid-header-cell f-datagrid-header-checkbox\" >\r\n                </td>\r\n                <!-- \u884C\u53F7 -->\r\n                <td *ngIf=\"dg.showLineNumber && left\" class=\"f-datagrid-header-cell f-datagrid-cell-rownumber\" >\r\n                </td>\r\n                \r\n                <ng-container filter-row-creator [left]=\"left\" [right]=\"right\">\r\n                </ng-container>\r\n            </tr>\r\n        </thead>\r\n    </table>\r\n</ng-template>\r\n\r\n\r\n\r\n<div class=\"f-datagrid-header\" style=\"width: 100%;\" #header>\r\n\r\n            \r\n        <!--\u5DE6\u4FA7\u56FA\u5B9A\u5217-->\r\n        <div #fixedLeft class=\"f-datagrid-header-fixed-left\"\r\n            *ngIf=\"columnsGroup?.leftFixed && columnsGroup?.leftFixed.length  || dg?.showLineNumber || dg?.showCheckbox \"\r\n            [style.width.px]=\"columnsGroup?.leftFixedWidth\"\r\n            [style.height.px]=\"height\">\r\n            <ng-container *ngTemplateOutlet=\"header_template_inner; context: { $implicit: columns, left: true, right: false,\r\n                groupCols:  columnsGroup?.leftFixed}\">\r\n            </ng-container>\r\n        </div>\r\n\r\n        <!--\u6B63\u5E38\u5217-->\r\n        <div #headerContainer class=\"f-datagrid-header-center\" \r\n            [style.left.px]=\"columnsGroup?.leftFixedWidth\"\r\n            [style.width.px]=\"columnsGroup?.normalWidth\"\r\n            style=\"position: absolute;height: 100%\">\r\n            <ng-container *ngTemplateOutlet=\"header_template_inner; context: {$implicit: columns, left: false, right: false,\r\n                groupCols:  columnsGroup?.normalColumns}\">\r\n            </ng-container>\r\n        </div>\r\n        <!--\u53F3\u4FA7\u56FA\u5B9A\u5217-->\r\n        <div #fixedRight class=\"f-datagrid-header-fixed-right\"\r\n            *ngIf=\"columnsGroup?.rightFixed && columnsGroup?.rightFixed.length\"\r\n            [style.width.px]=\" dg.showBorder?  rightFixedColumnWidth : rightFixedColumnWidth + 1\"\r\n            [style.height.px]=\"height\" style=\"border: 0\">\r\n            <ng-container *ngTemplateOutlet=\"header_template_inner; context: {$implicit: columns, left: false, right: true,\r\n                groupCols: columnsGroup?.rightFixed}\">\r\n            </ng-container>\r\n        </div>\r\n\r\n    <div class=\"filter-row-disabled\"\r\n        style=\"position: absolute;background: rgb(255, 255, 255);width: 100%;z-index: 9;height: 40px; bottom:0;opacity: 0;\"\r\n        [style.left.px]=\"dg.showAllCheckbox ? 36 : 0\" *ngIf=\"showOverlay && dg.enableFilterRow\">\r\n    </div>\r\n</div>\r\n\r\n",
                    encapsulation: ViewEncapsulation.None,
                    exportAs: 'dgHeader'
                }] }
    ];
    /** @nocollapse */
    DatagridHeaderComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: Injector },
        { type: DatagridComponent, decorators: [{ type: Optional }] },
        { type: NgZone }
    ]; };
    DatagridHeaderComponent.propDecorators = {
        height: [{ type: Input }],
        columns: [{ type: Input }],
        columnsGroup: [{ type: Input }],
        enableDragColumn: [{ type: Input }],
        wrapHeader: [{ type: Input }],
        enableFilterRow: [{ type: Input }],
        scrollbarMode: [{ type: Input }],
        fast: [{ type: Input }],
        header: [{ type: ViewChild, args: ['header',] }],
        headerColumnsTable: [{ type: ViewChild, args: ['headerContainer',] }],
        fixedLeft: [{ type: ViewChild, args: ['fixedLeft',] }],
        chkAll: [{ type: ViewChild, args: ['chkAll',] }],
        fr: [{ type: ViewChild, args: ['fixedRight',] }]
    };
    return DatagridHeaderComponent;
}());
export { DatagridHeaderComponent };
if (false) {
    /** @type {?} */
    DatagridHeaderComponent.prototype.height;
    /** @type {?} */
    DatagridHeaderComponent.prototype.columns;
    /** @type {?} */
    DatagridHeaderComponent.prototype.columnsGroup;
    /** @type {?} */
    DatagridHeaderComponent.prototype.enableDragColumn;
    /** @type {?} */
    DatagridHeaderComponent.prototype.wrapHeader;
    /** @type {?} */
    DatagridHeaderComponent.prototype.enableFilterRow;
    /** @type {?} */
    DatagridHeaderComponent.prototype.scrollbarMode;
    /**
     * 启用性能优化版
     * @type {?}
     */
    DatagridHeaderComponent.prototype.fast;
    /** @type {?} */
    DatagridHeaderComponent.prototype.header;
    /** @type {?} */
    DatagridHeaderComponent.prototype.headerColumnsTable;
    /** @type {?} */
    DatagridHeaderComponent.prototype.fixedLeft;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype._chkall;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.fixedRight;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.dgs;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.dfrs;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.el;
    /** @type {?} */
    DatagridHeaderComponent.prototype.rightFixedColumnWidth;
    /** @type {?} */
    DatagridHeaderComponent.prototype.normalColumnWidth;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.cd;
    /** @type {?} */
    DatagridHeaderComponent.prototype.showOverlay;
    /** @type {?} */
    DatagridHeaderComponent.prototype.disableSort;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.scrollX;
    /** @type {?} */
    DatagridHeaderComponent.prototype.showShadowCls;
    /** @type {?} */
    DatagridHeaderComponent.prototype.top;
    /** @type {?} */
    DatagridHeaderComponent.prototype.hasFixedLeftColumns;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.ps;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.destroy$;
    /** @type {?} */
    DatagridHeaderComponent.prototype.lineNumberTitle;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.render2;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.injector;
    /** @type {?} */
    DatagridHeaderComponent.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.ngZone;
}
var FilterRowCreateDirective = /** @class */ (function () {
    function FilterRowCreateDirective(vc, injector, dg, ngZone) {
        var _this = this;
        this.vc = vc;
        this.injector = injector;
        this.dg = dg;
        this.ngZone = ngZone;
        this.dfs = this.injector.get(DatagridFacadeService);
        this.dgs = this.injector.get(DatagridService);
        this.cfr = this.injector.get(ComponentFactoryResolver);
        this.cd = this.injector.get(ChangeDetectorRef);
        this.dfrs = this.dg.clientFilterService;
        this.filterRowType = this.injector.get(GRID_FILTER_ROW, null);
        this.dgs.clearFilter.subscribe((/**
         * @return {?}
         */
        function () {
            if (_this.filterRowRef) {
                _this.filterRowRef.instance.clearFilterValue(false);
            }
        }));
        this.dgs.columnsChanged.subscribe((/**
         * @return {?}
         */
        function () {
            _this.createFilterRow(true);
        }));
        if (this.dfrs) {
            this.dfrs.removeField.subscribe((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                if (_this.filterRowRef && f) {
                    /** @type {?} */
                    var flag = false;
                    /** @type {?} */
                    var _cols = [];
                    if (_this.left) {
                        _cols = _this.dg.colGroup.leftFixed || [];
                    }
                    else if (_this.right) {
                        _cols = _this.dg.colGroup.rightFixed || [];
                    }
                    else {
                        _cols = _this.dg.colGroup.normalColumns || [];
                    }
                    flag = !!_cols.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === f; }));
                    if (flag) {
                        _this.filterRowRef.instance.removeField(f);
                    }
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    FilterRowCreateDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.createFilterRow(true);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FilterRowCreateDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @return {?}
     */
    FilterRowCreateDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /** 过滤行 */
    /**
     * 过滤行
     * @param {?=} rebuild
     * @return {?}
     */
    FilterRowCreateDirective.prototype.createFilterRow = /**
     * 过滤行
     * @param {?=} rebuild
     * @return {?}
     */
    function (rebuild) {
        var _this = this;
        if (rebuild === void 0) { rebuild = false; }
        if (rebuild && this.filterRowRef) {
            this.filterRowRef.destroy();
            this.filterRowRef = null;
        }
        if (this['_FILTERROW_CREATE_TIMER_']) {
            clearTimeout(this['_FILTERROW_CREATE_TIMER_']);
        }
        this['_FILTERROW_CREATE_TIMER_'] = setTimeout((/**
         * @return {?}
         */
        function () {
            _this._createFilterRow();
            if (rebuild) {
                _this.cd.detectChanges();
            }
        }), 50);
    };
    /**
     * @private
     * @return {?}
     */
    FilterRowCreateDirective.prototype._createFilterRow = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dg.enableFilterRow) {
            if (!this.filterRowType) {
                return;
            }
            /** @type {?} */
            var columnsData = this.dg.colGroup.normalColumns;
            if (this.left) {
                columnsData = this.dg.colGroup.leftFixed;
            }
            else if (this.right) {
                columnsData = this.dg.colGroup.rightFixed;
            }
            if (!this.filterRowRef && this.vc) {
                /** @type {?} */
                var cf = this.cfr.resolveComponentFactory(this.filterRowType);
                this.filterRowRef = this.vc.createComponent(cf);
                this.filterRowRef.instance.fixedLeft = this.left;
                this.filterRowRef.instance.columns = columnsData;
                this.filterRowRef.instance.gridInstance = this.dg;
                this.filterRowRef.instance.conditionChange.subscribe((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    /** @type {?} */
                    var conditions = _this.mergeFilterConditions(n || {});
                    _this.dgs.onFilterChanged.emit(conditions);
                }));
            }
        }
    };
    /**
     * @private
     * @param {?} conditions
     * @return {?}
     */
    FilterRowCreateDirective.prototype.mergeFilterConditions = /**
     * @private
     * @param {?} conditions
     * @return {?}
     */
    function (conditions) {
        /** @type {?} */
        var _conditions = Object.assign(this.dg.conditions || {}, conditions || {});
        Object.keys(_conditions).forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (_conditions[n] === null) {
                delete _conditions[n];
            }
        }));
        return _conditions;
    };
    FilterRowCreateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[filter-row-creator]'
                },] }
    ];
    /** @nocollapse */
    FilterRowCreateDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: Injector },
        { type: DatagridComponent },
        { type: NgZone }
    ]; };
    FilterRowCreateDirective.propDecorators = {
        left: [{ type: Input }],
        right: [{ type: Input }]
    };
    return FilterRowCreateDirective;
}());
export { FilterRowCreateDirective };
if (false) {
    /** @type {?} */
    FilterRowCreateDirective.prototype.left;
    /** @type {?} */
    FilterRowCreateDirective.prototype.right;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.dgs;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.dfrs;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.filterRowType;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.filterRowRef;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.vc;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.injector;
    /** @type {?} */
    FilterRowCreateDirective.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtaGVhZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9oZWFkZXIvZGF0YWdyaWQtaGVhZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFVQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsZ0JBQWdCLEVBQXdELE1BQU0sZUFBZSxDQUFDO0FBRWpJLE9BQU8sRUFDSCxTQUFTLEVBQVUsS0FBSyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUMzQyxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQzdGLE1BQU0sZUFBZSxDQUFDO0FBSXZCLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNsRSxPQUFPLEVBQUUsZUFBZSxFQUFFLHFCQUFxQixFQUFFLDJCQUEyQixFQUFFLHNCQUFzQixFQUFFLHlCQUF5QixFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9LLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTdELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBRy9FLE9BQU8sRUFBa0IsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQztJQWlFSSxpQ0FDWSxPQUFrQixFQUFVLFFBQWtCLEVBQ25DLEVBQXFCLEVBQVUsTUFBYztRQUZwRSxpQkFtREM7UUFsRFcsWUFBTyxHQUFQLE9BQU8sQ0FBVztRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbkMsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBNUQzRCxXQUFNLEdB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O0lBQ3ZCLENBQUM7O2dCQXpISixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLHNCQUFzQjtpQkFDbkM7Ozs7Z0JBL1lrQyxnQkFBZ0I7Z0JBSWIsUUFBUTtnQkFPckMsaUJBQWlCO2dCQVA4RCxNQUFNOzs7dUJBNll6RixLQUFLO3dCQUNMLEtBQUs7O0lBcUhWLCtCQUFDO0NBQUEsQUExSEQsSUEwSEM7U0F2SFksd0JBQXdCOzs7SUFDakMsd0NBQXVCOztJQUN2Qix5Q0FBd0I7Ozs7O0lBRXhCLHVDQUE2Qjs7Ozs7SUFDN0IsdUNBQW1DOzs7OztJQUNuQyx1Q0FBc0M7Ozs7O0lBQ3RDLHdDQUFvQzs7Ozs7SUFDcEMsaURBQTJCOzs7OztJQUMzQixnREFBd0M7Ozs7O0lBQ3hDLHNDQUE4Qjs7Ozs7SUFDbEIsc0NBQTRCOzs7OztJQUFFLDRDQUEwQjs7SUFDaEUsc0NBQTRCOzs7OztJQUFFLDBDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFF1ZXJ5TGlzdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbi8qXHJcbiogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4qIEBEYXRlOiAyMDE5LTA4LTA2IDA3OjQzOjUzXHJcbiogQExhc3RFZGl0b3JzOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiogQExhc3RFZGl0VGltZTogMjAxOS0xMS0yMCAyMDoxNDoxMVxyXG4qIEBRUTogMTA1NTgxODIzOVxyXG4qIEBWZXJzaW9uOiB2MC4wLjFcclxuKi9cclxuXHJcbmltcG9ydCB7IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgVmlld0NvbnRhaW5lclJlZiwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBDb21wb25lbnRSZWYsIFZpZXdDaGlsZHJlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgUmVuZGVyZXIyLCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsXHJcbiAgICBBZnRlclZpZXdJbml0LCBWaWV3RW5jYXBzdWxhdGlvbiwgSW5qZWN0b3IsIENoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIE9wdGlvbmFsLCBOZ1pvbmVcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IERhdGFDb2x1bW4gfSBmcm9tICcuLy4uLy4uL3R5cGVzL2RhdGEtY29sdW1uJztcclxuaW1wb3J0IHsgQ29sdW1uR3JvdXAgfSBmcm9tICcuLi8uLi90eXBlcy9kYXRhLWNvbHVtbic7XHJcbmltcG9ydCB7IERhdGFncmlkU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2RhdGFncmlkLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTQ1JPTExfWF9BQ1RJT04sIEZJWEVEX0xFRlRfU0hBRE9XX0NMUywgU0NST0xMX1hfUkVBQ0hfU1RBUlRfQUNUSU9OLCBGSVhFRF9SSUdIVF9TSEFET1dfQ0xTLCBTQ1JPTExfWF9SRUFDSF9FTkRfQUNUSU9OLCBHUklEX0ZJTFRFUl9ST1cgfSBmcm9tICcuLi8uLi90eXBlcy9jb25zdGFudCc7XHJcbmltcG9ydCB7IERhdGFncmlkQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZGF0YWdyaWQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRGF0YWdyaWRIZWFkZXJDaGVja2JveENvbXBvbmVudCB9IGZyb20gJy4uL2NoZWNrYm94L2RhdGFncmlkLWhlYWRlci1jaGVja2JveC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEZhY2FkZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kYXRhZ3JpZC1mYWNhZGUuc2VydmljZSc7XHJcbmltcG9ydCBSZXNpemVPYnNlcnZlciBmcm9tICdyZXNpemUtb2JzZXJ2ZXItcG9seWZpbGwnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEZpbHRlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kYXRhZ3JpZC1maWx0ZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IG9mLCBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdkYXRhZ3JpZC1oZWFkZXInLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2hlYWRlci5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gICAgZXhwb3J0QXM6ICdkZ0hlYWRlcidcclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGFncmlkSGVhZGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcbiAgICBASW5wdXQoKSBoZWlnaHQgPSAzNTtcclxuICAgIEBJbnB1dCgpIGNvbHVtbnMgPSBbXTtcclxuICAgIEBJbnB1dCgpIGNvbHVtbnNHcm91cDogQ29sdW1uR3JvdXA7XHJcbiAgICBASW5wdXQoKSBlbmFibGVEcmFnQ29sdW1uID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSB3cmFwSGVhZGVyID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBlbmFibGVGaWx0ZXJSb3cgPSBmYWxzZTtcclxuXHJcbiAgICBASW5wdXQoKSBzY3JvbGxiYXJNb2RlID0gJ2F1dG8nO1xyXG5cclxuICAgIC8qKiDlkK/nlKjmgKfog73kvJjljJbniYggKi9cclxuICAgIEBJbnB1dCgpIGZhc3QgPSBmYWxzZTtcclxuXHJcblxyXG4gICAgQFZpZXdDaGlsZCgnaGVhZGVyJykgaGVhZGVyOiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgnaGVhZGVyQ29udGFpbmVyJykgaGVhZGVyQ29sdW1uc1RhYmxlOiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgnZml4ZWRMZWZ0JykgZml4ZWRMZWZ0OiBFbGVtZW50UmVmO1xyXG5cclxuICAgIHByaXZhdGUgX2Noa2FsbDogRGF0YWdyaWRIZWFkZXJDaGVja2JveENvbXBvbmVudDtcclxuICAgIEBWaWV3Q2hpbGQoJ2Noa0FsbCcpIHNldCBjaGtBbGwodikge1xyXG4gICAgICAgIHRoaXMuX2Noa2FsbCA9IHY7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmaXhlZFJpZ2h0OiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgnZml4ZWRSaWdodCcpIHNldCBmcih2YWwpIHtcclxuICAgICAgICBpZiAodmFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZml4ZWRSaWdodCA9IHZhbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkZ3M6IERhdGFncmlkU2VydmljZTtcclxuICAgIHByaXZhdGUgZGZzOiBEYXRhZ3JpZEZhY2FkZVNlcnZpY2U7XHJcbiAgICBwcml2YXRlIHJvOiBSZXNpemVPYnNlcnZlciB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcclxuICAgIHByaXZhdGUgZGZyczogRGF0YWdyaWRGaWx0ZXJTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZjtcclxuICAgIHJpZ2h0Rml4ZWRDb2x1bW5XaWR0aCA9IDA7XHJcbiAgICBub3JtYWxDb2x1bW5XaWR0aCA9IDA7XHJcblxyXG4gICAgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWY7XHJcbiAgICBzaG93T3ZlcmxheSA9IGZhbHNlO1xyXG4gICAgZGlzYWJsZVNvcnQgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgc2Nyb2xsWCA9IDA7XHJcbiAgICBzaG93U2hhZG93Q2xzID0gZmFsc2U7XHJcblxyXG4gICAgdG9wID0gMDtcclxuXHJcbiAgICAvLyDooYzlj7cg44CBIOWkjemAieahhu+8jOWcqOWkmuihqOWktOS4i+eahOWQiOW5tuihjOaVsFxyXG4gICAgZ2V0IHJvd1NwYW4oKSB7XHJcbiAgICAgICAgLy8gVEZTIDQ5NTg3MlxyXG4gICAgICAgIC8vIHJldHVybiB0aGlzLmNvbHVtbnMubGVuZ3RoICsgKHRoaXMuZGcuZW5hYmxlRmlsdGVyUm93ID8gMSA6IDApO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbHVtbnMubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIGhhc0ZpeGVkTGVmdENvbHVtbnMgPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIHBzO1xyXG4gICAgcHJpdmF0ZSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICBsaW5lTnVtYmVyVGl0bGUgPSAn5bqP5Y+3JztcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgcmVuZGVyMjogUmVuZGVyZXIyLCBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgICAgICBAT3B0aW9uYWwoKSBwdWJsaWMgZGc6IERhdGFncmlkQ29tcG9uZW50LCBwcml2YXRlIG5nWm9uZTogTmdab25lKSB7XHJcbiAgICAgICAgdGhpcy5kZnMgPSB0aGlzLmluamVjdG9yLmdldChEYXRhZ3JpZEZhY2FkZVNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuZGdzID0gdGhpcy5pbmplY3Rvci5nZXQoRGF0YWdyaWRTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLmNmciA9IHRoaXMuaW5qZWN0b3IuZ2V0KENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcik7XHJcbiAgICAgICAgdGhpcy5jZCA9IHRoaXMuaW5qZWN0b3IuZ2V0KENoYW5nZURldGVjdG9yUmVmKTtcclxuICAgICAgICB0aGlzLmVsID0gdGhpcy5pbmplY3Rvci5nZXQoRWxlbWVudFJlZik7XHJcbiAgICAgICAgdGhpcy5kZnJzID0gdGhpcy5kZy5jbGllbnRGaWx0ZXJTZXJ2aWNlO1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5kZ3Muc2NvcmxsJC5waXBlKFxyXG4gICAgICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JClcclxuICAgICAgICApLnN1YnNjcmliZSgoZDogYW55KSA9PiB7XHJcblxyXG4gICAgICAgICAgICBpZiAoZC50eXBlID09PSBTQ1JPTExfWF9BQ1RJT04gfHwgZC50eXBlID09PSBTQ1JPTExfWF9SRUFDSF9FTkRfQUNUSU9OIHx8IGQudHlwZSA9PT0gU0NST0xMX1hfUkVBQ0hfU1RBUlRfQUNUSU9OKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFggPSBkLng7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcjIuc2V0U3R5bGUodGhpcy5oZWFkZXJDb2x1bW5zVGFibGUubmF0aXZlRWxlbWVudCwgJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUzZCgtJHtkLnh9cHgsIDBweCwgMHB4KWApO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRnLmdyb3VwUm93cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpeGVkTGVmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC54KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcjIuYWRkQ2xhc3ModGhpcy5maXhlZExlZnQubmF0aXZlRWxlbWVudCwgRklYRURfTEVGVF9TSEFET1dfQ0xTKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyMi5yZW1vdmVDbGFzcyh0aGlzLmZpeGVkTGVmdC5uYXRpdmVFbGVtZW50LCBGSVhFRF9MRUZUX1NIQURPV19DTFMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZC50eXBlID09PSBTQ1JPTExfWF9SRUFDSF9TVEFSVF9BQ1RJT04pIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpeGVkTGVmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyMi5yZW1vdmVDbGFzcyh0aGlzLmZpeGVkTGVmdC5uYXRpdmVFbGVtZW50LCBGSVhFRF9MRUZUX1NIQURPV19DTFMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZGdzLnNob3dGaXhlZFNoYWRvdy5waXBlKFxyXG4gICAgICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JClcclxuICAgICAgICApLnN1YnNjcmliZSgoZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZpeGVkUmlnaHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Rml4ZWRDb2x1bW5Qb3NpdGlvbihlLnNob3dSaWdodFNoYWRvdywgZS54KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmRncy5kaXNhYmxlSGVhZGVyLnBpcGUoXHJcbiAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKVxyXG4gICAgICAgICkuc3Vic2NyaWJlKChmbGFnOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zaG93T3ZlcmxheSA9IGZsYWc7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZVNvcnQgPSBmbGFnO1xyXG4gICAgICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRncy5jaGVja2VkUm93c1RvdGFsQ2hhbmdlZCQucGlwZShcclxuICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveSQpXHJcbiAgICAgICAgKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fY2hrYWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGVja2Vkc0NvdW50ID0gdGhpcy5kZnMuZ2V0Q3VycmVudFBhZ2VDaGVja2VkcygpLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzQ2hlY2tBbGwgPSB0aGlzLmRmcy5pc0NoZWNrQWxsKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc0luZGV0ZXJtaW5hdGUgPSBpc0NoZWNrQWxsIHx8ICFjaGVja2Vkc0NvdW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hrYWxsLmNoay5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSAhaXNJbmRldGVybWluYXRlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgX2NoZWNrZWQgPSBpc0NoZWNrQWxsICYmIGNoZWNrZWRzQ291bnQgPiAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hrYWxsLnVwZGF0ZVN0YXR1cyhfY2hlY2tlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5kZ3MudW5jaGVja0FsbC5waXBlKFxyXG4gICAgICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JClcclxuICAgICAgICApLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRnLnNob3dBbGxDaGVja2JveCAmJiB0aGlzLl9jaGthbGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Noa2FsbC5jaGsubmF0aXZlRWxlbWVudC5pbmRldGVybWluYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGthbGwuY2hrLm5hdGl2ZUVsZW1lbnQuY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZGdzLmNoZWNrQWxsLnBpcGUoXHJcbiAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKVxyXG4gICAgICAgICkuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Noa2FsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hrYWxsLmNoay5uYXRpdmVFbGVtZW50LmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZGdzLnNjcm9sbGJhclVwZGF0ZS5waXBlKFxyXG4gICAgICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JClcclxuICAgICAgICApLnN1YnNjcmliZSgocHM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBzID0gcHMuc2Nyb2xsYmFyUmVmO1xyXG4gICAgICAgICAgICBjb25zdCBydyA9IHBzLnJpZ2h0V2lkdGggfHwgMDtcclxuICAgICAgICAgICAgaWYgKCFydykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodEZpeGVkQ29sdW1uV2lkdGggPSB0aGlzLmdldFJpZ2h0Rml4ZWRDb2xXaWR0aCh0aGlzLnBzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRGaXhlZENvbHVtbldpZHRoID0gcnc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuZml4ZWRSaWdodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRGaXhlZENvbHVtblBvc2l0aW9uKHRoaXMuc2hvd1NoYWRvd0NscywgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICB0aGlzLmRncy5zaG93R3JpZEhlYWRlci5waXBlKFxyXG4gICAgICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JClcclxuICAgICAgICApLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0SGVhZGVyUG9zaXRpb24oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5kZ3Muc21hcnRGaWx0ZXJCYXJFeHBhbmQucGlwZShcclxuICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveSQpXHJcbiAgICAgICAgKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldEhlYWRlclBvc2l0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMucmlnaHRGaXhlZENvbHVtbldpZHRoID0gdGhpcy5nZXRSaWdodEZpeGVkQ29sV2lkdGgodGhpcy5wcyk7XHJcbiAgICAgICAgdGhpcy5oYXNGaXhlZExlZnRDb2x1bW5zID0gdGhpcy5jb2x1bW5zR3JvdXAgJiYgdGhpcy5jb2x1bW5zR3JvdXAubGVmdEZpeGVkICYmICEhdGhpcy5jb2x1bW5zR3JvdXAubGVmdEZpeGVkLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0SGVhZGVyUG9zaXRpb24oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5saW5lTnVtYmVyVGl0bGUgPSB0aGlzLmdldExpbmVOdW1iZXJUaXRsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgICAgICAvLyBpZiAoY2hhbmdlcy5zY3JvbGxiYXJNb2RlICYmICFjaGFuZ2VzLnNjcm9sbGJhck1vZGUuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMucmlnaHRGaXhlZENvbHVtbldpZHRoID0gdGhpcy5nZXRSaWdodEZpeGVkQ29sV2lkdGgodGhpcy5wcyk7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMuY29sdW1uc0dyb3VwICYmICFjaGFuZ2VzLmNvbHVtbnNHcm91cC5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5yaWdodEZpeGVkQ29sdW1uV2lkdGggPSB0aGlzLmdldFJpZ2h0Rml4ZWRDb2xXaWR0aCh0aGlzLnBzKTtcclxuICAgICAgICAgICAgdGhpcy5oYXNGaXhlZExlZnRDb2x1bW5zID0gdGhpcy5jb2x1bW5zR3JvdXAgJiYgdGhpcy5jb2x1bW5zR3JvdXAubGVmdEZpeGVkICYmICEhdGhpcy5jb2x1bW5zR3JvdXAubGVmdEZpeGVkLmxlbmd0aDtcclxuICAgICAgICAgICAgLy8gaWYgKCF0aGlzLmRnLnVzZUNvbnRyb2xQYW5lbCkge1xyXG4gICAgICAgICAgICAvLyAgICAgdGhpcy5maXhlZFJpZ2h0ID0gbnVsbDtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XHJcbiAgICAgICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xyXG5cclxuICAgICAgICB0aGlzLmZpeGVkUmlnaHQgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0TGluZU51bWJlclRpdGxlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRnLmxpbmVOdW1iZXJUaXRsZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZy5saW5lTnVtYmVyVGl0bGU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGcubG9jYWxlU2VydmljZS5nZXRWYWx1ZSgnZGF0YWdyaWQubGluZU51bWJlclRpdGxlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0UmlnaHRGaXhlZENvbFdpZHRoKHBzID0gbnVsbCkge1xyXG4gICAgICAgIGlmICghdGhpcy5jb2x1bW5zR3JvdXApIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IHcgPSB0aGlzLmNvbHVtbnNHcm91cC5yaWdodEZpeGVkV2lkdGg7XHJcblxyXG4gICAgICAgIGlmICghcHMpIHtcclxuICAgICAgICAgICAgcHMgPSB0aGlzLmRnLnNjcm9sbEluc3RhbmNlLmluc3RhbmNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBzICYmIHBzLnNjcm9sbGJhcllBY3RpdmUgJiYgdGhpcy5zY3JvbGxiYXJNb2RlID09PSAnYWxsd2F5cycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHcgKz0gdGhpcy5zaG93U2hhZG93Q2xzID8gMTggOiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldEhlYWRlclBvc2l0aW9uKCkge1xyXG4gICAgICAgIGxldCB0b3AgPSAwO1xyXG4gICAgICAgIGlmICgodGhpcy5kZy5lbmFibGVGaWx0ZXJSb3cgfHwgdGhpcy5kZy5lbmFibGVTbWFydEZpbHRlcikgJiYgdGhpcy5kZy5zaG93RmlsdGVyQmFyKSB7XHJcbiAgICAgICAgICAgIHRvcCArPSB0aGlzLmRnLmZpbHRlckJhckhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRnLnNob3dSb3dHcm91cFBhbmVsKSB7XHJcbiAgICAgICAgICAgIHRvcCArPSB0aGlzLmRnLnJvd0dyb3VwUGFuZWxIZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnRvcCA9IHRvcDtcclxuICAgICAgICB0aGlzLnJlbmRlcjIuc2V0U3R5bGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAndG9wJywgYCR7dG9wfXB4YCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNTaG93U2hhZG93KGZpeGVkTGVmdFdpZHRoKSB7XHJcbiAgICAgICAgY29uc3QgZGdDb250YWluZXJXaWR0aCA9IHRoaXMuZGcuZGdDb250YWluZXIubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcclxuICAgICAgICByZXR1cm4gZGdDb250YWluZXJXaWR0aCA8IHRoaXMuZGcuY29sR3JvdXAudG90YWxXaWR0aDtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgaXNDb2xzcGFuKGxlZnQsIHJpZ2h0LCBjb2wsIGlzZGF0YWZpZWxkID0gZmFsc2UpIHtcclxuICAgICAgICAvLyBpZiAodGhpcy5mYXN0KSB7XHJcbiAgICAgICAgLy8gICAgIGlmIChpc2RhdGFmaWVsZCkge1xyXG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuICFjb2wuY29sc3BhbjtcclxuICAgICAgICAvLyAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyAgICAgICAgIHJldHVybiBjb2wuY29sc3BhbjtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vIH1cclxuICAgICAgICBpZiAoIWxlZnQgJiYgIXJpZ2h0KSB7XHJcbiAgICAgICAgICAgIGlmIChpc2RhdGFmaWVsZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICFjb2wuY29sc3BhbiAmJiAoIWNvbC5maXhlZCB8fCBjb2wuZml4ZWQgPT09ICdub25lJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sLmNvbHNwYW4gJiYgKCFjb2wuZml4ZWQgfHwgY29sLmZpeGVkID09PSAnbm9uZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChsZWZ0KSB7XHJcbiAgICAgICAgICAgIGlmIChpc2RhdGFmaWVsZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICFjb2wuY29sc3BhbiAmJiBjb2wuZml4ZWQgJiYgY29sLmZpeGVkID09PSAnbGVmdCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sLmNvbHNwYW4gJiYgY29sLmZpeGVkICYmIGNvbC5maXhlZCA9PT0gJ2xlZnQnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChyaWdodCkge1xyXG4gICAgICAgICAgICBpZiAoaXNkYXRhZmllbGQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhY29sLmNvbHNwYW4gJiYgY29sLmZpeGVkICYmIGNvbC5maXhlZCA9PT0gJ3JpZ2h0JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2wuY29sc3BhbiAmJiBjb2wuZml4ZWQgJiYgY29sLmZpeGVkID09PSAncmlnaHQnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldEZpeGVkQ29sdW1uUG9zaXRpb24oaXNTaG93LCBzY3JvbGxMZWZ0KSB7XHJcbiAgICAgICAgdGhpcy5zaG93U2hhZG93Q2xzID0gaXNTaG93O1xyXG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IGlzU2hvdyA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnO1xyXG4gICAgICAgIHRoaXMucmVuZGVyMlttZXRob2RdKHRoaXMuZml4ZWRSaWdodC5uYXRpdmVFbGVtZW50LCBGSVhFRF9SSUdIVF9TSEFET1dfQ0xTKTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVhbFdpZHRoID0gdGhpcy5jb2x1bW5zR3JvdXAubGVmdEZpeGVkV2lkdGggKyB0aGlzLmNvbHVtbnNHcm91cC5ub3JtYWxXaWR0aCArIHRoaXMucmlnaHRGaXhlZENvbHVtbldpZHRoO1xyXG4gICAgICAgIGNvbnN0IGdyaWRXaWR0aCA9IHRoaXMuZGcud2lkdGg7XHJcbiAgICAgICAgbGV0IGwgPSB0aGlzLmRnLndpZHRoIC0gKHRoaXMuZGcuc2hvd0JvcmRlciA/IDIgOiAxKSAtIHRoaXMucmlnaHRGaXhlZENvbHVtbldpZHRoO1xyXG4gICAgICAgIGlmIChncmlkV2lkdGggPiByZWFsV2lkdGgpIHtcclxuICAgICAgICAgICAgbCA9IHRoaXMuY29sdW1uc0dyb3VwLmxlZnRGaXhlZFdpZHRoICsgdGhpcy5jb2x1bW5zR3JvdXAubm9ybWFsV2lkdGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJlbmRlcjIuc2V0U3R5bGUodGhpcy5maXhlZFJpZ2h0Lm5hdGl2ZUVsZW1lbnQsICdsZWZ0JywgbCArICdweCcpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uUm93TnVtZXJDb2x1bW5EYmxDbGljayhlOiBNb3VzZUV2ZW50LCBybnRkOiBhbnkpIHtcclxuICAgICAgICBsZXQgbWF4Um93TnVtYmVyID0gdGhpcy5kZy5nZXRSb3dzKCkubGVuZ3RoO1xyXG4gICAgICAgIGlmICh0aGlzLmRnLnBhZ2luYXRpb24pIHtcclxuICAgICAgICAgICAgY29uc3QgcGFnZVNpemUgPSB0aGlzLmRnLnBhZ2VTaXplO1xyXG4gICAgICAgICAgICBjb25zdCBwYWdlSW5kZXggPSB0aGlzLmRnLnBhZ2VJbmRleDtcclxuICAgICAgICAgICAgbWF4Um93TnVtYmVyID0gcGFnZVNpemUgKiBwYWdlSW5kZXggKyBwYWdlU2l6ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZGcubG9uZ1RleHRBcmVhLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MID0gbWF4Um93TnVtYmVyO1xyXG4gICAgICAgIGNvbnN0IHcxID0gdGhpcy5kZy5sb25nVGV4dEFyZWEubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcclxuXHJcbiAgICAgICAgY29uc3QgY3VycmVudFdpZHRoID0gcm50ZC5vZmZzZXRXaWR0aDtcclxuXHJcbiAgICAgICAgaWYgKHcxID4gY3VycmVudFdpZHRoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGcubGluZU51bWJlcldpZHRoID0gdzEgKyAxMDtcclxuICAgICAgICAgICAgdGhpcy5kZnMudXBkYXRlUHJvcGVydHkoJ2xpbmVOdW1iZXJXaWR0aCcsIHRoaXMuZGcubGluZU51bWJlcldpZHRoKTtcclxuICAgICAgICAgICAgdGhpcy5kZnMucmVzaXplQ29sdW1ucygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvblNvcnRDb2x1bW5DbGljayhlOiBNb3VzZUV2ZW50LCBjb2w6IERhdGFDb2x1bW4pIHtcclxuICAgICAgICBpZiAodGhpcy5kaXNhYmxlU29ydCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWNvbC5zb3J0YWJsZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOe7k+adn+e8lui+kVxyXG4gICAgICAgIHRoaXMuZGcuY2FuY2VsRWRpdChudWxsKTtcclxuICAgICAgICBjb25zdCBzb3J0TmFtZSA9IHRoaXMuZGcuc29ydE5hbWU7XHJcbiAgICAgICAgY29uc3Qgc29ydE9yZGVyID0gdGhpcy5kZy5zb3J0T3JkZXI7XHJcbiAgICAgICAgbGV0IHNvcnRGaWVsZHMgPSBbXTtcclxuICAgICAgICBsZXQgc29ydE9yZGVycyA9IFtdO1xyXG4gICAgICAgIGlmIChzb3J0TmFtZSkge1xyXG4gICAgICAgICAgICBzb3J0RmllbGRzID0gc29ydE5hbWUuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgc29ydE9yZGVycyA9IHNvcnRPcmRlci5zcGxpdCgnLCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY29sT3JkZXIgPSBjb2wub3JkZXIgfHwgJ2FzYyc7XHJcbiAgICAgICAgbGV0IG5ld09yZGVyID0gY29sT3JkZXI7XHJcbiAgICAgICAgY29uc3QgaSA9IHNvcnRGaWVsZHMuZmluZEluZGV4KG4gPT4gbiA9PT0gY29sLmZpZWxkKTtcclxuICAgICAgICBpZiAoaSA+PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IF9vcmRlciA9IHNvcnRPcmRlcnNbaV0gPT09ICdhc2MnID8gJ2Rlc2MnIDogJ2FzYyc7XHJcbiAgICAgICAgICAgIG5ld09yZGVyID0gX29yZGVyO1xyXG4gICAgICAgICAgICAvLyBpZiAodGhpcy5kZy5tdWx0aVNvcnQgJiYgbmV3T3JkZXIgPT09ICdhc2MnKSB7XHJcbiAgICAgICAgICAgIGlmIChuZXdPcmRlciA9PT0gJ2FzYycpIHtcclxuICAgICAgICAgICAgICAgIG5ld09yZGVyID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgc29ydEZpZWxkcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICBzb3J0T3JkZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNvcnRPcmRlcnNbaV0gPSBfb3JkZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kZy5tdWx0aVNvcnQpIHtcclxuICAgICAgICAgICAgICAgIHNvcnRGaWVsZHMucHVzaChjb2wuZmllbGQpO1xyXG4gICAgICAgICAgICAgICAgc29ydE9yZGVycy5wdXNoKGNvbE9yZGVyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNvcnRGaWVsZHMgPSBbY29sLmZpZWxkXTtcclxuICAgICAgICAgICAgICAgIHNvcnRPcmRlcnMgPSBbY29sT3JkZXJdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb2wub3JkZXIgPSBuZXdPcmRlcjtcclxuXHJcbiAgICAgICAgdGhpcy5kZy5zb3J0TmFtZSA9IHNvcnRGaWVsZHMuam9pbignLCcpO1xyXG4gICAgICAgIHRoaXMuZGcuc29ydE9yZGVyID0gc29ydE9yZGVycy5qb2luKCcsJyk7XHJcbiAgICAgICAgdGhpcy5kZnMuc2V0U29ydEluZm8odGhpcy5kZy5zb3J0TmFtZSwgdGhpcy5kZy5zb3J0T3JkZXIpO1xyXG5cclxuICAgICAgICB0aGlzLmRnLmJlZm9yZVNvcnRDb2x1bW4odGhpcy5kZy5zb3J0TmFtZSwgdGhpcy5kZy5zb3J0T3JkZXIsIHRoaXMuZGcpLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZGcub25Db2x1bW5Tb3J0ZWQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tmaWx0ZXItcm93LWNyZWF0b3JdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRmlsdGVyUm93Q3JlYXRlRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcbiAgICBASW5wdXQoKSBsZWZ0OiBib29sZWFuO1xyXG4gICAgQElucHV0KCkgcmlnaHQ6IGJvb2xlYW47XHJcblxyXG4gICAgcHJpdmF0ZSBkZ3M6IERhdGFncmlkU2VydmljZTtcclxuICAgIHByaXZhdGUgZGZzOiBEYXRhZ3JpZEZhY2FkZVNlcnZpY2U7XHJcbiAgICBwcml2YXRlIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xyXG4gICAgcHJpdmF0ZSBkZnJzOiBEYXRhZ3JpZEZpbHRlclNlcnZpY2U7XHJcbiAgICBwcml2YXRlIGZpbHRlclJvd1R5cGU6IGFueTtcclxuICAgIHByaXZhdGUgZmlsdGVyUm93UmVmOiBDb21wb25lbnRSZWY8YW55PjtcclxuICAgIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmO1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB2YzogVmlld0NvbnRhaW5lclJlZiwgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICAgICAgcHVibGljIGRnOiBEYXRhZ3JpZENvbXBvbmVudCwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkge1xyXG5cclxuICAgICAgICB0aGlzLmRmcyA9IHRoaXMuaW5qZWN0b3IuZ2V0KERhdGFncmlkRmFjYWRlU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy5kZ3MgPSB0aGlzLmluamVjdG9yLmdldChEYXRhZ3JpZFNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuY2ZyID0gdGhpcy5pbmplY3Rvci5nZXQoQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKTtcclxuICAgICAgICB0aGlzLmNkID0gdGhpcy5pbmplY3Rvci5nZXQoQ2hhbmdlRGV0ZWN0b3JSZWYpO1xyXG4gICAgICAgIHRoaXMuZGZycyA9IHRoaXMuZGcuY2xpZW50RmlsdGVyU2VydmljZTtcclxuXHJcbiAgICAgICAgdGhpcy5maWx0ZXJSb3dUeXBlID0gdGhpcy5pbmplY3Rvci5nZXQoR1JJRF9GSUxURVJfUk9XLCBudWxsKTtcclxuXHJcbiAgICAgICAgdGhpcy5kZ3MuY2xlYXJGaWx0ZXIuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyUm93UmVmKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlclJvd1JlZi5pbnN0YW5jZS5jbGVhckZpbHRlclZhbHVlKGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZGdzLmNvbHVtbnNDaGFuZ2VkLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlRmlsdGVyUm93KHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZGZycykge1xyXG4gICAgICAgICAgICB0aGlzLmRmcnMucmVtb3ZlRmllbGQuc3Vic2NyaWJlKChmKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJSb3dSZWYgJiYgZikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IF9jb2xzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGVmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY29scyA9IHRoaXMuZGcuY29sR3JvdXAubGVmdEZpeGVkIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY29scyA9IHRoaXMuZGcuY29sR3JvdXAucmlnaHRGaXhlZCB8fCBbXTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY29scyA9IHRoaXMuZGcuY29sR3JvdXAubm9ybWFsQ29sdW1ucyB8fCBbXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZsYWcgPSAhIV9jb2xzLmZpbmQobiA9PiBuLmZpZWxkID09PSBmKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmxhZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbHRlclJvd1JlZi5pbnN0YW5jZS5yZW1vdmVGaWVsZChmKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLmNyZWF0ZUZpbHRlclJvdyh0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDov4fmu6TooYwgKi9cclxuICAgIGNyZWF0ZUZpbHRlclJvdyhyZWJ1aWxkID0gZmFsc2UpIHtcclxuICAgICAgICBpZiAocmVidWlsZCAmJiB0aGlzLmZpbHRlclJvd1JlZikge1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlclJvd1JlZi5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyUm93UmVmID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXNbJ19GSUxURVJST1dfQ1JFQVRFX1RJTUVSXyddKSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzWydfRklMVEVSUk9XX0NSRUFURV9USU1FUl8nXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXNbJ19GSUxURVJST1dfQ1JFQVRFX1RJTUVSXyddID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUZpbHRlclJvdygpO1xyXG4gICAgICAgICAgICBpZiAocmVidWlsZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCA1MCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY3JlYXRlRmlsdGVyUm93KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRnLmVuYWJsZUZpbHRlclJvdykge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZmlsdGVyUm93VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgY29sdW1uc0RhdGEgPSB0aGlzLmRnLmNvbEdyb3VwLm5vcm1hbENvbHVtbnM7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlZnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbHVtbnNEYXRhID0gdGhpcy5kZy5jb2xHcm91cC5sZWZ0Rml4ZWQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yaWdodCkge1xyXG4gICAgICAgICAgICAgICAgY29sdW1uc0RhdGEgPSB0aGlzLmRnLmNvbEdyb3VwLnJpZ2h0Rml4ZWQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5maWx0ZXJSb3dSZWYgJiYgdGhpcy52Yykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2YgPSB0aGlzLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeSh0aGlzLmZpbHRlclJvd1R5cGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJSb3dSZWYgPSB0aGlzLnZjLmNyZWF0ZUNvbXBvbmVudChjZik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlclJvd1JlZi5pbnN0YW5jZS5maXhlZExlZnQgPSB0aGlzLmxlZnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlclJvd1JlZi5pbnN0YW5jZS5jb2x1bW5zID0gY29sdW1uc0RhdGE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlclJvd1JlZi5pbnN0YW5jZS5ncmlkSW5zdGFuY2UgPSB0aGlzLmRnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJSb3dSZWYuaW5zdGFuY2UuY29uZGl0aW9uQ2hhbmdlLnN1YnNjcmliZShuID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25kaXRpb25zID0gdGhpcy5tZXJnZUZpbHRlckNvbmRpdGlvbnMobiB8fCB7fSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZ3Mub25GaWx0ZXJDaGFuZ2VkLmVtaXQoY29uZGl0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1lcmdlRmlsdGVyQ29uZGl0aW9ucyhjb25kaXRpb25zOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBfY29uZGl0aW9ucyA9IE9iamVjdC5hc3NpZ24odGhpcy5kZy5jb25kaXRpb25zIHx8IHt9LCBjb25kaXRpb25zIHx8IHt9KTtcclxuICAgICAgICBPYmplY3Qua2V5cyhfY29uZGl0aW9ucykuZm9yRWFjaChuID0+IHtcclxuICAgICAgICAgICAgaWYgKF9jb25kaXRpb25zW25dID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgX2NvbmRpdGlvbnNbbl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIF9jb25kaXRpb25zO1xyXG4gICAgfVxyXG59XHJcblxyXG4iXX0=