/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/month-range-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from "../controltype";
var MonthRangeValue = /** @class */ (function () {
    function MonthRangeValue(value) {
        if (value === void 0) { value = { startTime: '', endTime: '' }; }
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    MonthRangeValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    };
    /**
     * @return {?}
     */
    MonthRangeValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        if (!this.startTime || !this.endTime) {
            return '';
        }
        return this.startTime + "~" + this.endTime;
    };
    /**
     * @return {?}
     */
    MonthRangeValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.MonthRange;
    };
    /**
     * @return {?}
     */
    MonthRangeValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.startTime = undefined;
        this.endTime = undefined;
    };
    /**
     * @return {?}
     */
    MonthRangeValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.startTime || !this.endTime;
    };
    return MonthRangeValue;
}());
export { MonthRangeValue };
if (false) {
    /** @type {?} */
    MonthRangeValue.prototype.startTime;
    /** @type {?} */
    MonthRangeValue.prototype.endTime;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGgtcmFuZ2UtdmFsdWUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvY29uZGl0aW9udmFsdWUvbW9udGgtcmFuZ2UtdmFsdWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0M7SUF5QkUseUJBQVksS0FBOEU7UUFBOUUsc0JBQUEsRUFBQSxVQUFrRCxTQUFTLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUU7UUFDeEYsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUMvQixDQUFDOzs7OztJQTNCRCwwQ0FBZ0I7Ozs7SUFBaEIsVUFBaUIsS0FBK0M7UUFDOUQsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO1lBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFEO2FBQU07WUFDTCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDbkI7SUFDSCxDQUFDOzs7O0lBQ0QsMENBQWdCOzs7SUFBaEI7UUFDRSxJQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUM7WUFDaEMsT0FBTyxFQUFFLENBQUM7U0FDVjtRQUNGLE9BQVUsSUFBSSxDQUFDLFNBQVMsU0FBSSxJQUFJLENBQUMsT0FBUyxDQUFDO0lBQzdDLENBQUM7Ozs7SUFDRCx3Q0FBYzs7O0lBQWQ7UUFDRSxPQUFPLFdBQVcsQ0FBQyxVQUFVLENBQUM7SUFDaEMsQ0FBQzs7OztJQUNELG9DQUFVOzs7SUFBVjtRQUNFLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO0lBQzNCLENBQUM7Ozs7SUFRRCxpQ0FBTzs7O0lBQVA7UUFDRSxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDMUMsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FBQyxBQWhDRCxJQWdDQzs7OztJQVZDLG9DQUFrQjs7SUFDbEIsa0NBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVZhbHVlIH0gZnJvbSBcIi4vaXZhbHVlXCI7XHJcbmltcG9ydCB7IENvbnRyb2xUeXBlIH0gZnJvbSBcIi4uL2NvbnRyb2x0eXBlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTW9udGhSYW5nZVZhbHVlIGltcGxlbWVudHMgSVZhbHVlIHtcclxuICBzZXRPcmlnaW5hbFZhbHVlKHZhbHVlOiB7IGZvcm1hdHRlZDogc3RyaW5nLCBkZWxpbWl0ZXI6IHN0cmluZyB9KTogdm9pZCB7XHJcbiAgICBpZiAodmFsdWUuZm9ybWF0dGVkKSB7XHJcbiAgICAgIHRoaXMuc3RhcnRUaW1lID0gdmFsdWUuZm9ybWF0dGVkLnNwbGl0KHZhbHVlLmRlbGltaXRlcilbMF07XHJcbiAgICAgIHRoaXMuZW5kVGltZSA9IHZhbHVlLmZvcm1hdHRlZC5zcGxpdCh2YWx1ZS5kZWxpbWl0ZXIpWzFdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5jbGVhclZhbHVlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGdldE9yaWdpbmFsVmFsdWUoKSB7XHJcbiAgICBpZighdGhpcy5zdGFydFRpbWV8fCF0aGlzLmVuZFRpbWUpe1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICAgfVxyXG4gICAgcmV0dXJuIGAke3RoaXMuc3RhcnRUaW1lfX4ke3RoaXMuZW5kVGltZX1gO1xyXG4gIH1cclxuICBnZXRDb250cm9sVHlwZSgpOiBDb250cm9sVHlwZSB7XHJcbiAgICByZXR1cm4gQ29udHJvbFR5cGUuTW9udGhSYW5nZTtcclxuICB9XHJcbiAgY2xlYXJWYWx1ZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuc3RhcnRUaW1lID0gdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5lbmRUaW1lID0gdW5kZWZpbmVkO1xyXG4gIH1cclxuICBzdGFydFRpbWU6IHN0cmluZztcclxuICBlbmRUaW1lOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZhbHVlOiB7IHN0YXJ0VGltZTogc3RyaW5nLCBlbmRUaW1lOiBzdHJpbmcgfSA9IHsgc3RhcnRUaW1lOiAnJywgZW5kVGltZTogJycgfSkge1xyXG4gICAgdGhpcy5zdGFydFRpbWUgPSB2YWx1ZS5zdGFydFRpbWU7XHJcbiAgICB0aGlzLmVuZFRpbWUgPSB2YWx1ZS5lbmRUaW1lO1xyXG4gIH1cclxuICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICF0aGlzLnN0YXJ0VGltZSB8fCAhdGhpcy5lbmRUaW1lO1xyXG4gIH1cclxufVxyXG4iXX0=