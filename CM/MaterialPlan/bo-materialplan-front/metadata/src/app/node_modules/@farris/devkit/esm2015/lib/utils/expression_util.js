import { DataPropGroup } from "../core/index";
import { ENTITY_TEMPLATE, GROUP_FUNCTIONS } from "../resolver/index";
export class ExpressionUtil {
    static getGroupFunctionDependency(expr, entityTypeInfo) {
        const deps = [];
        // 获取聚合函数依赖项
        const groupFunctionRegex = new RegExp(`DefaultFunction\\.(${GROUP_FUNCTIONS.join('|')})\\s*\\([^\\r\\n\\)]*\\)`, "g");
        const groupFunctions = expr.match(groupFunctionRegex);
        if (groupFunctions && groupFunctions.length > 0) {
            // todo: 使用正则匹配时可能会因为参数中有逗号导致问题，后续使用ast解析
            const argumentsRegex = /\(([^\r\n\)]*)\)/;
            const methodNameRegex = /DefaultFunction\.(\S*)\(/;
            groupFunctions.forEach((groupFunction) => {
                const argumentMatchResult = groupFunction.match(argumentsRegex);
                const methodNameMatchResult = groupFunction.match(methodNameRegex);
                let methodName = null;
                if (methodNameMatchResult && methodNameMatchResult.length == 2) {
                    methodName = methodNameMatchResult[1];
                }
                if (argumentMatchResult.length === 2) {
                    const argument = argumentMatchResult[1];
                    const args = argument.split(',').map(p => p.replace(/\"/g, ''));
                    if (args && args.length === 2) {
                        let item = args.join('.');
                        item = this.convertToNodeCode(item, entityTypeInfo).join('.');
                        // 移除主表code
                        item = item.substr(item.indexOf('.') + 1);
                        const dep = item.split('.');
                        dep.splice(0, 0, ENTITY_TEMPLATE);
                        deps.push(dep.join('/'));
                    }
                    else if (args && args.length === 3 && methodName === 'MultiplyChildNumber') {
                        // support MultiplyChildNumber
                        // [Entity.childrens,prop1,prop2]
                        const prefix = args[0]; // like Entity.childrens
                        //const tableName = args[0];// prefix.substring(prefix.indexOf('.')+1);
                        const prop1FullPath = `${prefix}.${args[1]}`;
                        const prop2FullPath = `${prefix}.${args[2]}`;
                        [prop1FullPath, prop2FullPath].forEach(item => {
                            item = this.convertToNodeCode(item, entityTypeInfo).join('.');
                            item = item.substr(item.indexOf('.') + 1);
                            const dep = item.split('.');
                            dep.splice(0, 0, ENTITY_TEMPLATE);
                            deps.push(dep.join('/'));
                        });
                    }
                    else {
                        throw new Error(`无法解析参数： ${JSON.stringify(argument)}`);
                    }
                }
            });
        }
        return deps;
    }
    /**
     * 将voCode转换为前端nodeCode
     * @param entityExpression like Entity.Child.p1
     * @returns
     */
    static convertToNodeCode(entityExpression, entityTypeInfo) {
        // UserEntity.storys.p1
        const nodeCodes = [];
        if (entityTypeInfo && entityExpression.includes('.')) {
            const entityExpressions = entityExpression.split('.') || [];
            let dataTypeInfo = entityTypeInfo;
            for (let index = 0; index < entityExpressions.length; index++) {
                const prop = entityExpressions[index];
                if (dataTypeInfo && dataTypeInfo.entityInfo && dataTypeInfo.entityInfo.nodeCode === prop || dataTypeInfo.entityInfo.originalCode === prop) {
                    // 第一个是主表code，不能转nodeCode
                    if (index === 0) {
                        nodeCodes.push(dataTypeInfo.entityInfo.originalCode);
                    }
                    else {
                        nodeCodes.push(dataTypeInfo.entityInfo.nodeCode);
                    }
                    // 下一级可能为子表、对象或属性
                    const nextNodeCode = entityExpressions[index + 1];
                    if (!nextNodeCode) {
                        break;
                    }
                    const nextNodeCodePropInfo = dataTypeInfo.getPropInfoByName(nextNodeCode);
                    if (!nextNodeCodePropInfo) {
                        break;
                    }
                    // 下一级为子表或对象
                    if (nextNodeCodePropInfo.typeInfo) {
                        dataTypeInfo = nextNodeCodePropInfo.typeInfo;
                    }
                }
                else if (dataTypeInfo && dataTypeInfo.getPropInfoByName(prop)) {
                    const dataPropInfo = dataTypeInfo.getPropInfoByName(prop);
                    nodeCodes.push(dataPropInfo.name);
                }
                else {
                    //throw new Error(`错误的属性参数 ${entityExpression}`);
                    break;
                }
            }
        }
        return nodeCodes;
    }
    /**
     * 找到元数据中所有实体路径
     * @param dataTypeInfo
     * @param results
     * @param paths
     */
    static getChildrenEntityPaths(dataTypeInfo, results, paths = []) {
        const list = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);
        if (list && list.length > 0) {
            list.forEach((dataPropInfo) => {
                if (paths.length === 0) {
                    results.push([dataPropInfo.name]);
                }
                const childrens = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);
                if (childrens && childrens.length > 0) {
                    paths.push(dataPropInfo.name);
                    childrens.forEach((dataPropInfo) => {
                        this.getChildrenEntityPaths(dataPropInfo.typeInfo, results, paths);
                    });
                }
                else {
                    if (paths.length !== 0) {
                        paths.push(dataPropInfo.name);
                        results.push([...paths]);
                    }
                    paths.length = 0;
                }
            });
        }
        else {
            if (paths.length > 0) {
                paths.push(dataTypeInfo.entityInfo.nodeCode);
                results.push([...paths]);
            }
            paths.length = 0;
        }
    }
    /**
     * 获取指定绑定路径的当前行数据
     * @param paths 绑定路径
     * @param bindingData
     * @returns
     */
    static getCurrentRowByPaths(paths, bindingData) {
        let result = null;
        const bindingList = bindingData.getValue(paths);
        if (bindingList && bindingList.length > 0) {
            let primaryValue = bindingList.currentItem.primaryKeyValue || null;
            // 使用事件中的主键
            // 主表或下级表新增，此时事件行就是当前行，无需处理
            if (primaryValue) {
                const bindingObject = bindingList.findById(primaryValue);
                if (bindingObject) {
                    result = bindingObject.toJSON();
                }
            }
        }
        return result;
    }
    /**
     * 从实体路径中获取级数最大的从表或从从表
     * @param paths
     * @returns
     */
    static getAvailableChildrenPathsFromEntityPaths(paths, entityTypeInfo) {
        let nodeCodes = [];
        paths = [...paths];
        while (paths.length > 0) {
            const dataPropInfo = entityTypeInfo.getPropInfoByPath(paths);
            if (dataPropInfo && dataPropInfo.group === 'List') {
                nodeCodes = paths;
                break;
            }
            paths.pop();
        }
        return nodeCodes;
    }
    /**
     * 从路径中获取绑定路径
     * @param paths 路径
     * @param entityTypeInfo entityTypeInfo
     * @returns
     */
    static getBindingPath(paths, entityTypeInfo) {
        paths = this.getEntityPath(paths);
        const entityPaths = this.getAvailableChildrenPathsFromEntityPaths(paths, entityTypeInfo);
        return entityPaths;
    }
    static getEntityPath(path) {
        const paths = path.filter((value, index) => {
            if (index % 2 === 0 && value.includes(':')) {
                return false;
            }
            else {
                return true;
            }
        });
        return paths;
    }
}
//# sourceMappingURL=data:application/json;base64,