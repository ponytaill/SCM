/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-09-02 17:55:57
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-23 16:57:28
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { addDays, differenceInMinutes, format, isValid, parseISO, subDays } from "date-fns";
import { Injectable } from "@angular/core";
import { MyDateConverter } from "./myDateConverter";
import { format as timeagoFmt } from './timeago/timeago';
import * as i0 from "@angular/core";
export class DateTimeHelperService {
    constructor() {
        this.$D = null;
        this.$D = new MyDateConverter();
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @return {?}
     */
    relativeTime(date, locale = 'zh-CHS') {
        if (date) {
            return timeagoFmt(date, locale);
        }
        return '';
    }
    /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    addDays(date, days) {
        return addDays(date, days);
    }
    /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    subDays(date, days) {
        return subDays(date, days);
    }
    /**
     * @param {?} dateLeft
     * @param {?} dateRight
     * @return {?}
     */
    differenceInMinutes(dateLeft, dateRight) {
        return differenceInMinutes(dateLeft, dateRight);
    }
    /**
     * @param {?} value 要转换格式的日期
     * @param {?=} fmt 格式化字符串
     *
     * 更多的格式化请参考
     * [点我点我](https://date-fns.org/v1.30.1/docs/format)
     * @return {?}
     */
    formatTo(value, fmt = "yyyy-MM-dd") {
        if (!value) {
            return "";
        }
        if (typeof value === "string" && value.indexOf("0001") === 0) {
            return "";
        }
        if (value instanceof Date) {
            return format(value, fmt);
        }
        /** @type {?} */
        let _d = parseISO(value);
        if (_d == "Invalid Date") {
            _d = this.createDate(value) || new Date(value);
        }
        // const d = parseISO(value);
        if (isValid(_d)) {
            /** @type {?} */
            const d = parseISO(format(_d, "yyyy-MM-dd HH:mm:ss"));
            return format(d, fmt);
        }
        else {
            // console.error(`${value} 转换为Date时失败。`);
            if (fmt.indexOf("HH") === 0 || fmt.indexOf("hh") === 0) {
                // 仅有时间部分
                // 提取时间
                /** @type {?} */
                const _time = value
                    .match(/\d*/g)
                    .filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                (n) => n !== ""))
                    .join(":");
                if (fmt === "HH" || fmt === "hh") {
                    fmt = fmt += ":mm";
                }
                // const fullDateTime = new Date('2022-11-25 ' + _time);
                /** @type {?} */
                const fullDateTime = parseISO("2022-11-25 " + _time);
                return format(fullDateTime, fmt);
            }
            return "";
        }
    }
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    createDate(val) {
        return this.$D.create(val);
    }
    // 根据参数日期获取具体日期信息
    /**
     * @private
     * @param {?=} date
     * @param {?=} firstDayOfWeek
     * @return {?}
     */
    formatDate(date = new Date(), firstDayOfWeek = '一') {
        /** @type {?} */
        let year = date.getFullYear();
        /** @type {?} */
        let month = date.getMonth() + 1;
        /** @type {?} */
        let day = date.getDate();
        /** @type {?} */
        let weekDay = date.getDay();
        if (firstDayOfWeek === '一') {
            if (!weekDay) {
                weekDay = 6;
            }
            else {
                weekDay = weekDay - 1;
            }
        }
        /** @type {?} */
        let week = ["一", "二", "三", "四", "五", "六", "日"][weekDay];
        /** @type {?} */
        const dateInfo = {
            date: new Date(date),
            dateStr: `${year}-${month.toString().padStart(2, "0")}-${day
                .toString()
                .padStart(2, "0")}`,
            year,
            month,
            day,
            week,
            isToday: false,
        };
        /** @type {?} */
        const today = new Date();
        // 判断是否为当天
        if (today.getFullYear() === year &&
            today.getMonth() + 1 === month &&
            today.getDate() === day) {
            dateInfo["isToday"] = true;
        }
        return dateInfo;
    }
    // 根据基准日期，获取长度为dayLenth的日期数组
    /**
     * @private
     * @param {?=} date
     * @param {?=} step
     * @param {?=} firstDayOfWeek
     * @return {?}
     */
    setDate(date = new Date(), step = 7, firstDayOfWeek = '一') {
        /** @type {?} */
        let weekData = [];
        /** @type {?} */
        const week = date.getDay() - 1;
        /** @type {?} */
        let _rangeDays = week * -1;
        if (firstDayOfWeek === '日') {
            _rangeDays = _rangeDays - 1;
        }
        date = this.getDateByDate(date, _rangeDays); // 以周日为第1天时 -1
        for (let i = 0; i < step; i++) {
            weekData.push(this.formatDate(i == 0 ? date : this.getDateByDate(date, 1), firstDayOfWeek));
        }
        return weekData;
    }
    // 根据基准日期获取前后某天的日期对象
    /**
     * @private
     * @param {?=} date
     * @param {?=} range
     * @return {?}
     */
    getDateByDate(date = new Date(), range = 0) {
        date.setDate(date.getDate() + range);
        return date;
    }
    /*
        获取以baselineDate所在周的一周、前一周、下一周的日期和星期信息(切换周期也可通过参数dayLenth自行设置)
        baselineDate: 设置的基准日期(返回的日期列表的第一个日期)
        range: 以 baselineDate 为基准日期的前后天数范围(如基准日期的range为0，需要返回前7天日期，则range为-7，后7天则range为7)
        step: 需要获取的日期信息周期天数，默认获取baselineDate所在周的一周日期信息
        firstDayOfWeek: 每周第一天 是 周一，还是周日，默认为 周一
       */
    /**
     * @param {?} __0
     * @param {?=} firstDayOfWeek
     * @return {?}
     */
    getWeekDate({ baselineDate = new Date(), range = 0, step = 7 }, firstDayOfWeek = '一') {
        return this.setDate(this.getDateByDate(baselineDate, range), step, firstDayOfWeek);
    }
    /**
     * 根据当前日期，获取当前是所在年的第几周
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @return {?}
     */
    getYearWeek(year, month, day) {
        //a为年 b为月 c为日
        /*
                date1是当前日期
                date2是当年第一天
                d是当前日期是今年第多少天
                用d + 当前年的第一天的周差距的和在除以7就是本年第几周
                */
        /** @type {?} */
        var date1 = new Date(year, parseInt(month) - 1, day);
        /** @type {?} */
        var date2 = new Date(year, 0, 1);
        /** @type {?} */
        var d = Math.round((date1.valueOf() - date2.valueOf()) / 86400000);
        return Math.ceil((d + ((date2.getDay() + 1) - 1)) / 7);
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @return {?}
     */
    getMonthWeek(year, month, day) {
        /**
         * a = d = 当前日期
         * b = 6 - w = 当前周的还有几天过完(不算今天)
         * a + b 的和在除以7 就是当天是当前月份的第几周
         * @type {?}
         */
        var date = new Date(year, parseInt(month) - 1, day);
        /** @type {?} */
        var w = date.getDay();
        /** @type {?} */
        var d = date.getDate();
        if (w == 0) {
            w = 7;
        }
        /** @type {?} */
        var config = {
            getMonth: date.getMonth() + 1,
            getYear: date.getFullYear(),
            getWeek: Math.ceil((d + 6 - w) / 7),
        };
        return config;
    }
}
DateTimeHelperService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root",
            },] }
];
/** @nocollapse */
DateTimeHelperService.ctorParameters = () => [];
/** @nocollapse */ DateTimeHelperService.ngInjectableDef = i0.defineInjectable({ factory: function DateTimeHelperService_Factory() { return new DateTimeHelperService(); }, token: DateTimeHelperService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    DateTimeHelperService.prototype.$D;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1oZWxwZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktY29tbW9uL2RhdGUvIiwic291cmNlcyI6WyJsaWIvZGF0ZS1oZWxwZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUM1RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVwRCxPQUFPLEVBQUUsTUFBTSxJQUFJLFVBQVUsRUFBUyxNQUFNLG1CQUFtQixDQUFDOztBQVFoRSxNQUFNLE9BQU8scUJBQXFCO0lBRzlCO1FBRlEsT0FBRSxHQUFHLElBQUksQ0FBQztRQUdkLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxlQUFlLEVBQUUsQ0FBQztJQUNwQyxDQUFDOzs7Ozs7SUFFRCxZQUFZLENBQUMsSUFBVyxFQUFFLFNBQWlDLFFBQVE7UUFDL0QsSUFBSSxJQUFJLEVBQUU7WUFDTixPQUFPLFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDbkM7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7Ozs7OztJQUVELE9BQU8sQ0FBQyxJQUFVLEVBQUUsSUFBWTtRQUM1QixPQUFPLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7Ozs7O0lBRUQsT0FBTyxDQUFDLElBQVUsRUFBRSxJQUFZO1FBQzVCLE9BQU8sT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDOzs7Ozs7SUFFRCxtQkFBbUIsQ0FBQyxRQUF1QixFQUFFLFNBQXdCO1FBQ2pFLE9BQU8sbUJBQW1CLENBQUMsUUFBUSxF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QyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzRCxDQUFDOzs7Ozs7O0lBRUQsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRzs7Ozs7OztZQU1yQixJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDOztZQUMvQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRTs7WUFDakIsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ1IsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNUOztZQUNHLE1BQU0sR0FBRztZQUNULFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQztZQUM3QixPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUMzQixPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3RDO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7O1lBbk1KLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7Ozs7Ozs7OztJQUVHLG1DQUFrQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEBBdXRob3I6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQERhdGU6IDIwMTktMDktMDIgMTc6NTU6NTdcclxuICogQExhc3RFZGl0b3JzOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMTAtMjMgMTY6NTc6MjhcclxuICogQFFROiAxMDU1ODE4MjM5XHJcbiAqIEBWZXJzaW9uOiB2MC4wLjFcclxuICovXHJcbmltcG9ydCB7IGFkZERheXMsIGRpZmZlcmVuY2VJbk1pbnV0ZXMsIGZvcm1hdCwgaXNWYWxpZCwgcGFyc2VJU08sIHN1YkRheXMgfSBmcm9tIFwiZGF0ZS1mbnNcIjtcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IE15RGF0ZUNvbnZlcnRlciB9IGZyb20gXCIuL215RGF0ZUNvbnZlcnRlclwiO1xyXG5cclxuaW1wb3J0IHsgZm9ybWF0IGFzIHRpbWVhZ29GbXQsIFREYXRlIH0gZnJvbSAnLi90aW1lYWdvL3RpbWVhZ28nO1xyXG5cclxuXHJcbmV4cG9ydCB0eXBlIEZpcnN0RGF5T2ZXZWVrID0gJ+S4gCcgfCAn5pelJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46IFwicm9vdFwiLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0ZVRpbWVIZWxwZXJTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgJEQgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuJEQgPSBuZXcgTXlEYXRlQ29udmVydGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVsYXRpdmVUaW1lKGRhdGU6IFREYXRlLCBsb2NhbGU6ICdlbid8J3poLUNIUyd8J3poLUNIVCcgPSAnemgtQ0hTJykge1xyXG4gICAgICAgIGlmIChkYXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aW1lYWdvRm10KGRhdGUsIGxvY2FsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuXHJcbiAgICBhZGREYXlzKGRhdGU6IERhdGUsIGRheXM6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiBhZGREYXlzKGRhdGUsIGRheXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHN1YkRheXMoZGF0ZTogRGF0ZSwgZGF5czogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHN1YkRheXMoZGF0ZSwgZGF5cyk7XHJcbiAgICB9XHJcblxyXG4gICAgZGlmZmVyZW5jZUluTWludXRlcyhkYXRlTGVmdDogRGF0ZSB8IG51bWJlciwgZGF0ZVJpZ2h0OiBEYXRlIHwgbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIGRpZmZlcmVuY2VJbk1pbnV0ZXMoZGF0ZUxlZnQsIGRhdGVSaWdodCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUg6KaB6L2s5o2i5qC85byP55qE5pel5pyfXHJcbiAgICAgKiBAcGFyYW0gZm10IOagvOW8j+WMluWtl+espuS4slxyXG4gICAgICpcclxuICAgICAqIOabtOWkmueahOagvOW8j+WMluivt+WPguiAg1xyXG4gICAgICogW+eCueaIkeeCueaIkV0oaHR0cHM6Ly9kYXRlLWZucy5vcmcvdjEuMzAuMS9kb2NzL2Zvcm1hdClcclxuICAgICAqL1xyXG4gICAgZm9ybWF0VG8odmFsdWU6IGFueSwgZm10OiBzdHJpbmcgPSBcInl5eXktTU0tZGRcIikge1xyXG4gICAgICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLmluZGV4T2YoXCIwMDAxXCIpID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0KHZhbHVlLCBmbXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IF9kOiBhbnkgPSBwYXJzZUlTTyh2YWx1ZSk7XHJcblxyXG4gICAgICAgIGlmIChfZCA9PSBcIkludmFsaWQgRGF0ZVwiKSB7XHJcbiAgICAgICAgICAgIF9kID0gdGhpcy5jcmVhdGVEYXRlKHZhbHVlKSB8fCBuZXcgRGF0ZSh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjb25zdCBkID0gcGFyc2VJU08odmFsdWUpO1xyXG4gICAgICAgIGlmIChpc1ZhbGlkKF9kKSkge1xyXG4gICAgICAgICAgICBjb25zdCBkID0gcGFyc2VJU08oZm9ybWF0KF9kLCBcInl5eXktTU0tZGQgSEg6bW06c3NcIikpO1xyXG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0KGQsIGZtdCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5lcnJvcihgJHt2YWx1ZX0g6L2s5o2i5Li6RGF0ZeaXtuWksei0peOAgmApO1xyXG4gICAgICAgICAgICBpZiAoZm10LmluZGV4T2YoXCJISFwiKSA9PT0gMCB8fCBmbXQuaW5kZXhPZihcImhoXCIpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDku4XmnInml7bpl7Tpg6jliIZcclxuICAgICAgICAgICAgICAgIC8vIOaPkOWPluaXtumXtFxyXG4gICAgICAgICAgICAgICAgY29uc3QgX3RpbWUgPSB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXRjaCgvXFxkKi9nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKG4pID0+IG4gIT09IFwiXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oXCI6XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChmbXQgPT09IFwiSEhcIiB8fCBmbXQgPT09IFwiaGhcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGZtdCA9IGZtdCArPSBcIjptbVwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNvbnN0IGZ1bGxEYXRlVGltZSA9IG5ldyBEYXRlKCcyMDIyLTExLTI1ICcgKyBfdGltZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmdWxsRGF0ZVRpbWUgPSBwYXJzZUlTTyhcIjIwMjItMTEtMjUgXCIgKyBfdGltZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0KGZ1bGxEYXRlVGltZSwgZm10KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGVEYXRlKHZhbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiRELmNyZWF0ZSh2YWwpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOagueaNruWPguaVsOaXpeacn+iOt+WPluWFt+S9k+aXpeacn+S/oeaBr1xyXG4gICAgcHJpdmF0ZSBmb3JtYXREYXRlKGRhdGUgPSBuZXcgRGF0ZSgpLCBmaXJzdERheU9mV2VlazogRmlyc3REYXlPZldlZWsgPSAn5LiAJykge1xyXG4gICAgICAgIGxldCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgIGxldCBtb250aCA9IGRhdGUuZ2V0TW9udGgoKSArIDE7XHJcbiAgICAgICAgbGV0IGRheSA9IGRhdGUuZ2V0RGF0ZSgpO1xyXG5cclxuICAgICAgICBsZXQgd2Vla0RheSA9IGRhdGUuZ2V0RGF5KCk7XHJcbiAgICAgICAgaWYgKGZpcnN0RGF5T2ZXZWVrID09PSAn5LiAJykge1xyXG4gICAgICAgICAgICBpZiAoIXdlZWtEYXkpIHtcclxuICAgICAgICAgICAgICAgIHdlZWtEYXkgPSA2O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgd2Vla0RheSA9IHdlZWtEYXkgLSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgd2VlayA9IFtcIuS4gFwiLCBcIuS6jFwiLCBcIuS4iVwiLCBcIuWbm1wiLCBcIuS6lFwiLCBcIuWFrVwiLCBcIuaXpVwiXVt3ZWVrRGF5XTtcclxuXHJcbiAgICAgICAgY29uc3QgZGF0ZUluZm8gPSB7XHJcbiAgICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKGRhdGUpLFxyXG4gICAgICAgICAgICBkYXRlU3RyOiBgJHt5ZWFyfS0ke21vbnRoLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpfS0ke2RheVxyXG4gICAgICAgICAgICAgICAgLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgICAgIC5wYWRTdGFydCgyLCBcIjBcIil9YCxcclxuICAgICAgICAgICAgeWVhcixcclxuICAgICAgICAgICAgbW9udGgsXHJcbiAgICAgICAgICAgIGRheSxcclxuICAgICAgICAgICAgd2VlayxcclxuICAgICAgICAgICAgaXNUb2RheTogZmFsc2UsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIC8vIOWIpOaWreaYr+WQpuS4uuW9k+WkqVxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdG9kYXkuZ2V0RnVsbFllYXIoKSA9PT0geWVhciAmJlxyXG4gICAgICAgICAgICB0b2RheS5nZXRNb250aCgpICsgMSA9PT0gbW9udGggJiZcclxuICAgICAgICAgICAgdG9kYXkuZ2V0RGF0ZSgpID09PSBkYXlcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgZGF0ZUluZm9bXCJpc1RvZGF5XCJdID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRhdGVJbmZvO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOagueaNruWfuuWHhuaXpeacn++8jOiOt+WPlumVv+W6puS4umRheUxlbnRo55qE5pel5pyf5pWw57uEXHJcbiAgICBwcml2YXRlIHNldERhdGUoZGF0ZSA9IG5ldyBEYXRlKCksIHN0ZXAgPSA3LCBmaXJzdERheU9mV2VlazogRmlyc3REYXlPZldlZWsgPSAn5LiAJykge1xyXG4gICAgICAgIGxldCB3ZWVrRGF0YSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHdlZWsgPSBkYXRlLmdldERheSgpIC0gMTtcclxuXHJcblxyXG4gICAgICAgIGxldCBfcmFuZ2VEYXlzID0gd2VlayAqIC0xOyAvLyDku6XlkajkuIDkuLrnrKwx5aSpXHJcblxyXG4gICAgICAgIGlmIChmaXJzdERheU9mV2VlayA9PT0gJ+aXpScpIHtcclxuICAgICAgICAgICAgX3JhbmdlRGF5cyA9IF9yYW5nZURheXMgLSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkYXRlID0gdGhpcy5nZXREYXRlQnlEYXRlKGRhdGUsIF9yYW5nZURheXMpOyAvLyDku6Xlkajml6XkuLrnrKwx5aSp5pe2IC0xXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGVwOyBpKyspIHtcclxuICAgICAgICAgICAgd2Vla0RhdGEucHVzaChcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9ybWF0RGF0ZShpID09IDAgPyBkYXRlIDogdGhpcy5nZXREYXRlQnlEYXRlKGRhdGUsIDEpLCBmaXJzdERheU9mV2VlaylcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHdlZWtEYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOagueaNruWfuuWHhuaXpeacn+iOt+WPluWJjeWQjuafkOWkqeeahOaXpeacn+WvueixoVxyXG4gICAgcHJpdmF0ZSBnZXREYXRlQnlEYXRlKGRhdGUgPSBuZXcgRGF0ZSgpLCByYW5nZSA9IDApIHtcclxuICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyByYW5nZSk7XHJcbiAgICAgICAgcmV0dXJuIGRhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyogXHJcbiAgICDojrflj5bku6ViYXNlbGluZURhdGXmiYDlnKjlkajnmoTkuIDlkajjgIHliY3kuIDlkajjgIHkuIvkuIDlkajnmoTml6XmnJ/lkozmmJ/mnJ/kv6Hmga8o5YiH5o2i5ZGo5pyf5Lmf5Y+v6YCa6L+H5Y+C5pWwZGF5TGVudGjoh6rooYzorr7nva4pXHJcbiAgICBiYXNlbGluZURhdGU6IOiuvue9rueahOWfuuWHhuaXpeacnyjov5Tlm57nmoTml6XmnJ/liJfooajnmoTnrKzkuIDkuKrml6XmnJ8pXHJcbiAgICByYW5nZTog5LulIGJhc2VsaW5lRGF0ZSDkuLrln7rlh4bml6XmnJ/nmoTliY3lkI7lpKnmlbDojIPlm7Qo5aaC5Z+65YeG5pel5pyf55qEcmFuZ2XkuLow77yM6ZyA6KaB6L+U5Zue5YmNN+WkqeaXpeacn++8jOWImXJhbmdl5Li6LTfvvIzlkI435aSp5YiZcmFuZ2XkuLo3KVxyXG4gICAgc3RlcDog6ZyA6KaB6I635Y+W55qE5pel5pyf5L+h5oGv5ZGo5pyf5aSp5pWw77yM6buY6K6k6I635Y+WYmFzZWxpbmVEYXRl5omA5Zyo5ZGo55qE5LiA5ZGo5pel5pyf5L+h5oGvXHJcbiAgICBmaXJzdERheU9mV2Vlazog5q+P5ZGo56ys5LiA5aSpIOaYryDlkajkuIDvvIzov5jmmK/lkajml6XvvIzpu5jorqTkuLog5ZGo5LiAXHJcbiAgICovXHJcbiAgICBnZXRXZWVrRGF0ZSh7IGJhc2VsaW5lRGF0ZSA9IG5ldyBEYXRlKCksIHJhbmdlID0gMCwgc3RlcCA9IDcgfSwgZmlyc3REYXlPZldlZWs6IEZpcnN0RGF5T2ZXZWVrID0gJ+S4gCcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXREYXRlKHRoaXMuZ2V0RGF0ZUJ5RGF0ZShiYXNlbGluZURhdGUsIHJhbmdlKSwgc3RlcCwgZmlyc3REYXlPZldlZWspO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmoLnmja7lvZPliY3ml6XmnJ/vvIzojrflj5blvZPliY3mmK/miYDlnKjlubTnmoTnrKzlh6DlkaggKi9cclxuICAgIGdldFllYXJXZWVrKHllYXIsIG1vbnRoLCBkYXkpIHsvL2HkuLrlubQgYuS4uuaciCBj5Li65pelXHJcbiAgICAgICAgLyogIFxyXG4gICAgICAgIGRhdGUx5piv5b2T5YmN5pel5pyfICBcclxuICAgICAgICBkYXRlMuaYr+W9k+W5tOesrOS4gOWkqSAgXHJcbiAgICAgICAgZOaYr+W9k+WJjeaXpeacn+aYr+S7iuW5tOesrOWkmuWwkeWkqSAgXHJcbiAgICAgICAg55SoZCArIOW9k+WJjeW5tOeahOesrOS4gOWkqeeahOWRqOW3rui3neeahOWSjOWcqOmZpOS7pTflsLHmmK/mnKzlubTnrKzlh6DlkaggIFxyXG4gICAgICAgICovXHJcbiAgICAgICAgdmFyIGRhdGUxID0gbmV3IERhdGUoeWVhciwgcGFyc2VJbnQobW9udGgpIC0gMSwgZGF5KSxcclxuICAgICAgICAgICAgZGF0ZTIgPSBuZXcgRGF0ZSh5ZWFyLCAwLCAxKSxcclxuICAgICAgICAgICAgZCA9IE1hdGgucm91bmQoKGRhdGUxLnZhbHVlT2YoKSAtIGRhdGUyLnZhbHVlT2YoKSkgLyA4NjQwMDAwMCk7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbCgoZCArICgoZGF0ZTIuZ2V0RGF5KCkgKyAxKSAtIDEpKSAvIDcpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE1vbnRoV2Vlayh5ZWFyLCBtb250aCwgZGF5KSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBhID0gZCA9IOW9k+WJjeaXpeacn1xyXG4gICAgICAgICogYiA9IDYgLSB3ID0g5b2T5YmN5ZGo55qE6L+Y5pyJ5Yeg5aSp6L+H5a6MKOS4jeeul+S7iuWkqSlcclxuICAgICAgICAqIGEgKyBiIOeahOWSjOWcqOmZpOS7pTcg5bCx5piv5b2T5aSp5piv5b2T5YmN5pyI5Lu955qE56ys5Yeg5ZGoXHJcbiAgICAgICAgKi9cclxuICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIHBhcnNlSW50KG1vbnRoKSAtIDEsIGRheSksXHJcbiAgICAgICAgICAgIHcgPSBkYXRlLmdldERheSgpLFxyXG4gICAgICAgICAgICBkID0gZGF0ZS5nZXREYXRlKCk7XHJcbiAgICAgICAgaWYgKHcgPT0gMCkge1xyXG4gICAgICAgICAgICB3ID0gNztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbmZpZyA9IHtcclxuICAgICAgICAgICAgZ2V0TW9udGg6IGRhdGUuZ2V0TW9udGgoKSArIDEsXHJcbiAgICAgICAgICAgIGdldFllYXI6IGRhdGUuZ2V0RnVsbFllYXIoKSxcclxuICAgICAgICAgICAgZ2V0V2VlazogTWF0aC5jZWlsKChkICsgNiAtIHcpIC8gNyksXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICB9XHJcbn1cclxuIl19