/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { of } from 'rxjs';
import { debounceTime, switchMap } from 'rxjs/operators';
import { LookupGridDisplayType } from '../lookup-displaytype';
import { LookupLeftComponent } from '../lookup-left.component';
var LookupComponentManager = /** @class */ (function () {
    function LookupComponentManager(ins) {
        this.ins = ins;
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    LookupComponentManager.prototype.getComponentInstance = /**
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        if (type === void 0) { type = 'datatable'; }
        if (!this.ins.componentRef || !this.ins.componentRef.instance) {
            return null;
        }
        if (type === 'selected') {
            return this.ins.multiSelectDT;
        }
        /** @type {?} */
        var ins = this.ins.componentRef.instance;
        if (type === 'leftDataTable' || type === 'leftTree') {
            /** @type {?} */
            var leftRef = this.ins.leftComponentRef;
            if (!leftRef || !leftRef.instance || !leftRef.instance.cmpRef || !leftRef.instance.cmpRef.instance) {
                return null;
            }
            ins = this.ins.leftComponentRef.instance.cmpRef.instance;
        }
        if (type === 'fav') {
            ins = this.ins.favoritesComponentRef.instance;
        }
        switch (type) {
            case 'leftDataTable':
            case 'fav':
            case 'datatable':
                return (/** @type {?} */ (ins));
            case 'leftTree':
            case 'treetable':
                return (/** @type {?} */ (ins));
            default:
                if (this.ins.isTree()) {
                    return (/** @type {?} */ (ins));
                }
                return (/** @type {?} */ (ins));
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    LookupComponentManager.prototype.createComponentWithServerData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (this.ins.componentRef) {
            return;
        }
        this.ins.idField = data.idField || this.ins.idField;
        this.ins.textField = data.textField || this.ins.textField;
        this.ins.valueField = data.valueField || this.ins.valueField;
        this.ins.displayType = (data && data.displayType) || this.ins.displayType || 'LIST';
        /** @type {?} */
        var dtyp = this.ins.displayType.toUpperCase();
        if (this.ins.isDoublleList()) {
            if (this.ins.navTreeToList && dtyp === LookupGridDisplayType.NavTreeList) {
                this.ins.displayType = LookupGridDisplayType.NavList;
            }
            if (this.ins.treeToList) {
                if (dtyp === LookupGridDisplayType.NavListTree) {
                    this.ins.displayType = LookupGridDisplayType.NavList;
                }
            }
        }
        else {
            if (this.ins.treeToList) {
                if (dtyp === LookupGridDisplayType.TreeList) {
                    this.ins.displayType = 'LIST';
                }
                else {
                    if (dtyp === LookupGridDisplayType.NavListTree) {
                        this.ins.displayType = LookupGridDisplayType.NavList;
                    }
                }
            }
        }
        if (this.ins.isDoublleList() && this.ins.navTreeToList) {
            if (dtyp === LookupGridDisplayType.NavTreeList) {
                this.ins.displayType = LookupGridDisplayType.NavList;
            }
        }
        this.ins.changeDetector.detectChanges();
        this.ins.componentRef = this.createContent(this.ins.gridOptions);
        this.createFavoriteComponent();
        this.resizeComponent();
    };
    /**
     * @return {?}
     */
    LookupComponentManager.prototype.createFavoriteComponent = /**
     * @return {?}
     */
    function () {
        if (this.ins.useFavorite && !this.ins.favoritesComponentRef) {
            this.ins.favoriteColumns = this.ins.favHelper.getFavoriteColumns();
            /** @type {?} */
            var favoritesOptions = Object.assign({}, this.ins.gridOptions, {
                showFilterBar: false,
                pagination: false,
                columns: this.ins.favoriteColumns || []
            });
            this.ins.favoritesComponentRef = this.createFavoritesContent(favoritesOptions);
            this.resizeComponent('fav');
        }
    };
    /**
     * @private
     * @param {?} expandLevel
     * @return {?}
     */
    LookupComponentManager.prototype.reloadTreeDataForExpand = /**
     * @private
     * @param {?} expandLevel
     * @return {?}
     */
    function (expandLevel) {
        var _this = this;
        /** @type {?} */
        var uri = this.ins.gridOptions.uri;
        /** @type {?} */
        var tt = (/** @type {?} */ (this.ins.componentRef.instance));
        var _a = tslib_1.__assign({}, tt.searchData), _b = _a.field, field = _b === void 0 ? '*' : _b, _c = _a.value, value = _c === void 0 ? '' : _c;
        /** @type {?} */
        var search = { category: 'all', searchValue: value, searchField: field, layerNum: expandLevel };
        /** @type {?} */
        var param = {
            searchValue: JSON.stringify(search),
            customData: this.ins.customData,
            enableFullTree: this.ins.enableFullTree,
            loadTreeDataType: this.ins.loadTreeDataType
        };
        if (this.ins.helpId) {
            param['helpId'] = this.ins.helpId;
        }
        if (tt && tt.sortName) {
            Object.assign(param, {
                sortName: tt.sortName,
                sortOrder: tt.sortOrder
            });
        }
        this.ins.showLoading();
        return this.ins.http.getData(uri, param).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.ins.closeLoading();
            /** @type {?} */
            var nodes = _this.ins.checkNodeCanBeSelect(data.items, expandLevel === -1);
            _this.ins.items = nodes;
            tt.loadData(nodes);
        }));
    };
    /**
     * @private
     * @param {?} nodes
     * @param {?} level
     * @return {?}
     */
    LookupComponentManager.prototype.setTreeNodeExpandBy = /**
     * @private
     * @param {?} nodes
     * @param {?} level
     * @return {?}
     */
    function (nodes, level) {
        var _this = this;
        if (!nodes || !nodes.length) {
            return;
        }
        nodes.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var layer = n.data[_this.ins.treeInfo.dataField].layer;
            /** @type {?} */
            var expandLayer = layer + level - 1;
            n.expanded = layer <= expandLayer ? true : n.expanded;
            if (n.children && n.children.length && layer + 1 <= expandLayer) {
                _this.setTreeNodeExpandBy(n.children, level);
            }
        }));
    };
    // 启用树帮助右键菜单功能
    // 启用树帮助右键菜单功能
    /**
     * @private
     * @param {?} cmpRef
     * @return {?}
     */
    LookupComponentManager.prototype.useContextMenuForTree = 
    // 启用树帮助右键菜单功能
    /**
     * @private
     * @param {?} cmpRef
     * @return {?}
     */
    function (cmpRef) {
        var _this = this;
        var _a = this.ins.treeTableOptions, maxLevel = _a.maxLevel, enableContextMenu = _a.enableContextMenu, language = _a.language;
        if (enableContextMenu && maxLevel) {
            /** @type {?} */
            var levelMenus = [];
            for (var i = 1; i <= maxLevel; i++) {
                /** @type {?} */
                var title = language['expand' + i];
                levelMenus.push({ id: 30 + 1, code: i, title: title, handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        // 发送请求获取数据
                        /** @type {?} */
                        var level = t.menu.code;
                        if (isLoadAllTreeData_1()) {
                            _this.setTreeNodeExpandBy(_this.ins.items, level);
                            cmpRef.instance.updateSerializedValue();
                        }
                        else {
                            var _a = _this.ins.treeInfo, dataField = _a.dataField, layerField = _a.layerField;
                            /** @type {?} */
                            var firstNodeData = (_this.ins.items || [])[0];
                            if (firstNodeData && firstNodeData.data) {
                                /** @type {?} */
                                var minLayer = _this.ins.utils.getValue(dataField + "." + layerField, firstNodeData.data);
                                /** @type {?} */
                                var _level = minLayer + level - 1;
                                _this.reloadTreeDataForExpand(_level);
                            }
                        }
                    }) });
            }
            /** @type {?} */
            var isLoadAllTreeData_1 = (/**
             * @return {?}
             */
            function () {
                if (_this.ins.loadTreeDataType === 'default') {
                    return cmpRef.instance.loadDataType === 'all';
                }
                else {
                    return _this.ins.loadTreeDataType === 'loadall';
                }
            });
            /** @type {?} */
            var contextMenus = [
                {
                    id: 6, code: 'checkchildnodes', title: '勾选下级数据',
                    visible: (/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        // console.log(e);
                        return !e.data.node.selectable && !_this.ins.singleSelect && e.data.node.children && e.data.node.children.length;
                    }),
                    handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        if (cmpRef) {
                            /** @type {?} */
                            var nodeIds = cmpRef.instance.getChildNodes(t.data.id).filter((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n.selectable; })).map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n[_this.ins.idField]; }));
                            // const nodeIds = t.data.node.children.map(n => n[this.ins.idField]);
                            cmpRef.instance.checkedNodes(nodeIds);
                            cmpRef.instance.selectNodes(nodeIds);
                        }
                    })
                },
                {
                    id: 5, code: 'uncheckchildnodes', title: '取消勾选下级数据',
                    visible: (/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        // console.log(e);
                        return !e.data.node.selectable && !_this.ins.singleSelect && e.data.node.children && e.data.node.children.length;
                    }),
                    handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        if (cmpRef) {
                            // const nodeIds = t.data.node.children.map(n => n[this.ins.idField]);
                            /** @type {?} */
                            var nodeIds = cmpRef.instance.getChildNodes(t.data.id).filter((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n.selectable; })).map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n[_this.ins.idField]; }));
                            cmpRef.instance.unCheckedNodes(nodeIds);
                            cmpRef.instance.unSelectNodes(nodeIds);
                        }
                    })
                },
                '-',
                {
                    id: 1, code: 'expandall', title: language.expandall, handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        if (cmpRef && isLoadAllTreeData_1()) {
                            cmpRef.instance.expandAll();
                        }
                        else {
                            // 发送请求获取数据
                            _this.reloadTreeDataForExpand(-1);
                        }
                    })
                },
                { id: 2, code: 'collapseall', title: language.collapseall, handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        if (cmpRef) {
                            cmpRef.instance.collapseAll();
                        }
                    }) },
                '-',
                {
                    id: 3, title: language.expandByLayer,
                    children: levelMenus
                }
            ];
            this.ins.treeTableOptions.contextMenuItems = contextMenus;
            cmpRef.instance.beforeShowContextMenu = (/**
             * @return {?}
             */
            function () {
                return of({ show: !cmpRef.instance.state.searched });
            });
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupComponentManager.prototype.getSpaceWidth = /**
     * @private
     * @return {?}
     */
    function () {
        return this.ins.layoutFormat === 'default' ? 20 : 48;
    };
    /**
     * @param {?} opts
     * @return {?}
     */
    LookupComponentManager.prototype.createContent = /**
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        if (this.ins.componentRef) {
            return;
        }
        /** @type {?} */
        var type = this.ins.getComponentType();
        /** @type {?} */
        var cmpFac = this.ins.cfr.resolveComponentFactory(type);
        /** @type {?} */
        var cmpRef = null;
        if (this.ins.isDoublleList()) {
            cmpRef = this.ins.centerContainer.createComponent(cmpFac);
        }
        else {
            cmpRef = this.ins.contentContainer.createComponent(cmpFac);
        }
        if (this.ins.isTree()) {
            opts.fit = true;
            opts.pagination = false;
            opts.fast = true;
            if (this.ins.useFavorite) {
                opts.fitColumns = false;
                opts.autoFitColumns = true;
            }
            this.useContextMenuForTree(cmpRef);
        }
        else {
            opts.fill = true;
        }
        /** @type {?} */
        var ttOpts = this.ins.treeTableOptions || {};
        Object.assign(cmpRef.instance, opts, tslib_1.__assign({ allColumnsTitle: this.ins.allColumnsTitle }, ttOpts));
        this.ins.componentRef = cmpRef;
        this.resizeComponent();
        return cmpRef;
    };
    // 创建收藏CMP
    // 创建收藏CMP
    /**
     * @param {?} opts
     * @return {?}
     */
    LookupComponentManager.prototype.createFavoritesContent = 
    // 创建收藏CMP
    /**
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        /** @type {?} */
        var type = this.ins.getComponentType();
        /** @type {?} */
        var cmpFac = this.ins.cfr.resolveComponentFactory(type);
        /** @type {?} */
        var cmpRef = null;
        cmpRef = this.ins.favoritesContainer.createComponent(cmpFac);
        if (this.ins.isTree()) {
            opts.fit = true;
            opts.pagination = false;
        }
        else {
            opts.fill = true;
        }
        Object.assign(cmpRef.instance, opts, {
            width: this.ins.dialog.size.width - this.getSpaceWidth(),
            height: this.ins.dialogMgr.getHeight()
        });
        // 订阅收藏夹列表中组件的相关事件
        this.ins.favHelper.initFavoriteComponentEvent(cmpRef);
        return cmpRef;
    };
    /**
     * @param {?=} type
     * @return {?}
     */
    LookupComponentManager.prototype.resizeComponent = /**
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        if (type === void 0) { type = 'datatable'; }
        /** @type {?} */
        var size = {
            width: this.ins.dialog.size.width - this.getSpaceWidth(),
            height: this.ins.dialogMgr.getHeight()
        };
        if (this.ins.isDoublleList() && (type === 'datatable' || type === 'treetable')) {
            size.width = this.ins.dialog.size.width - this.ins.leftPanelWidth - (this.ins.layoutFormat === 'default' ? 20 : 48) - 7;
        }
        this.getComponentInstance(type).resize(size);
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    LookupComponentManager.prototype.getChildNodes = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        /** @type {?} */
        var nodes = [];
        if (node.selectable || node.selectable === undefined) {
            nodes.push(node);
        }
        if (node.children && node.children.length) {
            node.children.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                nodes.push.apply(nodes, tslib_1.__spread(_this.getChildNodes(n)));
            }));
        }
        return nodes;
    };
    /** 创建左侧组件 */
    /**
     * 创建左侧组件
     * @param {?} ops
     * @return {?}
     */
    LookupComponentManager.prototype.createLeftComponent = /**
     * 创建左侧组件
     * @param {?} ops
     * @return {?}
     */
    function (ops) {
        var _this = this;
        /** @type {?} */
        var dtFac = null;
        if (this.ins.isDoublleList()) {
            dtFac = this.ins.cfr.resolveComponentFactory(LookupLeftComponent);
        }
        this.ins.leftComponentRef = this.ins.leftContainer.createComponent(dtFac);
        ops.height = this.ins.dialogMgr.getHeight();
        if (this.ins.dialogWidth < this.ins.navLookupDialogMinWidth) {
            this.ins.dialogWidth = this.ins.navLookupDialogMinWidth;
            this.ins.dialog.reSize({ width: this.ins.dialogWidth });
            this.ins.resizeCmp({ width: this.ins.dialog.size.width });
        }
        if (ops.width !== this.ins.leftPanel.width) {
            // 默认 1 : 2
            this.ins.leftPanel.resize({
                width: this.ins.leftPanel.width,
                height: ops.height
            });
            this.ins.resizeCmp({ width: this.ins.dialog.size.width });
        }
        // this.resizeComponent();
        this.ins.leftComponentRef.instance.lookupCmp = this.ins;
        this.ins.leftComponentRef.instance.navOptions = ops;
        this.ins.leftComponentRef.instance.selected
            .pipe(debounceTime(100), switchMap((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (d && d.data) {
                _this.ins.navigationFilter = {
                    selected: d.data,
                    idValue: _this.getNavigationFilter(d.data),
                    searchField: '',
                    searchValue: ''
                };
            }
            else {
                _this.ins.navigationFilter = undefined;
            }
            // 加载右侧数据
            /** @type {?} */
            var p = {
                pageInfo: {
                    pageIndex: _this.ins.gridOptions.pageIndex,
                    pageSize: _this.ins.gridOptions.pageSize
                }
            };
            if (_this.ins.includeSubordinates && d && d.node && ops.treeInfo) {
                var _a = ops.treeInfo, layerType = _a.layerType, pathField = _a.pathField, loadDataType = _a.loadDataType, dataField = _a.dataField;
                if (loadDataType === 'all') {
                    /** @type {?} */
                    var rowDatas = _this.getChildNodes(d.node).map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.data; }));
                    _this.ins.navigationFilter.idValue = _this.getNavigationFilter(rowDatas);
                }
                else {
                    if (layerType == 'pathcode') {
                        // p['navNodePathCode'] = d.data[dataField][pathField];
                        p['navNodePathCode'] = _this.ins.getPathCode(d.data, ops.treeInfo);
                        _this.ins['navNodePathCode'] = p['navNodePathCode'];
                    }
                }
            }
            else {
                _this.ins['navNodePathCode'] = '';
            }
            /** @type {?} */
            var dataCmpRef = _this.getComponentInstance();
            var sortName = dataCmpRef.sortName, sortOrder = dataCmpRef.sortOrder;
            Object.assign(p, { search: _this.ins._searchState, sortName: sortName, sortOrder: sortOrder });
            return _this.ins.httpMgr.getData(p, 'list');
        })))
            .subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.ins.closeLoading();
            _this.ins.loadDataWhenOpen = true;
            // if (this.ins.useFavorite && !this.ins.isTree()) {
            //     this.ins.favHelper.updateFavoritesStatus(res.items);
            // }
            // this.ins.loadDataTableData(res);
            _this.ins.loadData(res, false);
            setTimeout((/**
             * @return {?}
             */
            function () {
                // 选中数据
                _this.ins.selectionMgr.selectCurrentValue();
                _this.ins.changeDetector.detectChanges();
            }));
        }));
        return this.ins.leftComponentRef.instance.createComponent();
    };
    // 获取关联数据, 右侧数据中 关联各字段的值
    // 获取关联数据, 右侧数据中 关联各字段的值
    /**
     * @private
     * @param {?} navRow
     * @return {?}
     */
    LookupComponentManager.prototype.getNavigationFilter = 
    // 获取关联数据, 右侧数据中 关联各字段的值
    /**
     * @private
     * @param {?} navRow
     * @return {?}
     */
    function (navRow) {
        if (this.ins.navigationOptions.relations && this.ins.navigationOptions.relations.length) {
            /** @type {?} */
            var result_1 = [];
            this.ins.navigationOptions.relations.forEach((/**
             * @param {?} r
             * @return {?}
             */
            function (r) {
                /** @type {?} */
                var k = r.groupField;
                /** @type {?} */
                var dField = r.helpField;
                /** @type {?} */
                var rf = { fieldName: dField, fieldValue: '' };
                if (Array.isArray(navRow)) {
                    /** @type {?} */
                    var vals = navRow.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return k.split('.').reduce((/**
                         * @param {?} o
                         * @param {?} c
                         * @return {?}
                         */
                        function (o, c) {
                            return o[c];
                        }), n);
                    }));
                    rf.fieldValue = vals.join(',');
                }
                else {
                    rf.fieldValue = k.split('.').reduce((/**
                     * @param {?} o
                     * @param {?} c
                     * @return {?}
                     */
                    function (o, c) {
                        return o[c];
                    }), navRow);
                }
                result_1.push(rf);
            }));
            return result_1;
        }
        return '';
    };
    return LookupComponentManager;
}());
export { LookupComponentManager };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupComponentManager.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,