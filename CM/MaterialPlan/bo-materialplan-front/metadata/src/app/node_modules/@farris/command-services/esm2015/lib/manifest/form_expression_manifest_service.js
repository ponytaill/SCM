import { HttpClient } from "@angular/common/http";
import { Inject, Injectable, Injector } from "@angular/core";
import { of } from "rxjs";
import { share, switchMap } from "rxjs/operators";
import { FORM_PATH_TOKEN, FrameContext, FORM_MANIFEST_SERVICE_TOKEN } from "@farris/devkit";
export class FormExpressionManifestService {
    constructor(injector, frameContext, httpClient, modulePath, formManifestService) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.httpClient = httpClient;
        this.modulePath = modulePath;
        this.formManifestService = formManifestService;
    }
    load() {
        if (this.modulePath.endsWith('\/')) {
            this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);
        }
        return this.formManifestService.load().pipe(switchMap((formManifest) => {
            const expressions = formManifest.expressions;
            const expressionManifest = expressions.find((expressionManifest) => expressionManifest.ns === this.frameContext.namespace);
            if (expressionManifest) {
                const expressionPath = `${this.modulePath}/expressions/${expressionManifest.path}?version=${new Date().valueOf().toString()}`;
                const key = `${this.modulePath}/expressions/${expressionManifest.path}`;
                const request$ = FormExpressionManifestService.mainfests.get(key);
                if (request$) {
                    return request$;
                }
                else {
                    const req$ = this.httpClient.get(expressionPath, { responseType: 'json' }).pipe(share());
                    FormExpressionManifestService.mainfests.set(key, req$);
                    return req$;
                }
            }
            else {
                return of({});
            }
        }));
    }
}
FormExpressionManifestService.mainfests = new Map();
FormExpressionManifestService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormExpressionManifestService.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext },
    { type: HttpClient },
    { type: undefined, decorators: [{ type: Inject, args: [FORM_PATH_TOKEN,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [FORM_MANIFEST_SERVICE_TOKEN,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybV9leHByZXNzaW9uX21hbmlmZXN0X3NlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvbWFuaWZlc3QvZm9ybV9leHByZXNzaW9uX21hbmlmZXN0X3NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQXlFLDJCQUEyQixFQUF3QixNQUFNLGdCQUFnQixDQUFDO0FBR3pMLE1BQU0sT0FBTyw2QkFBNkI7SUFFeEMsWUFDVSxRQUFrQixFQUNsQixZQUEwQixFQUMxQixVQUFzQixFQUNHLFVBQVUsRUFDRSxtQkFBeUM7UUFKOUUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ0csZUFBVSxHQUFWLFVBQVUsQ0FBQTtRQUNFLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBc0I7SUFBSSxDQUFDO0lBRXRGLElBQUk7UUFDVCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzVFO1FBRUQsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUN6QyxTQUFTLENBQUMsQ0FBQyxZQUEwQixFQUFFLEVBQUU7WUFDdkMsTUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLFdBQVcsQ0FBQztZQUM3QyxNQUFNLGtCQUFrQixHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxrQkFBMkMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDcEosSUFBSSxrQkFBa0IsRUFBRTtnQkFDdEIsTUFBTSxjQUFjLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxnQkFBZ0Isa0JBQWtCLENBQUMsSUFBSSxZQUFZLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztnQkFDOUgsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxnQkFBZ0Isa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3hFLE1BQU0sUUFBUSxHQUFHLDZCQUE2QixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2xFLElBQUksUUFBUSxFQUFFO29CQUNaLE9BQU8sUUFBUSxDQUFDO2lCQUNqQjtxQkFBTTtvQkFDTCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztvQkFDekYsNkJBQTZCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQ3ZELE9BQU8sSUFBSSxDQUFDO2lCQUNiO2FBQ0Y7aUJBQU07Z0JBQ0wsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDZjtRQUNILENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOztBQWpDYyx1Q0FBUyxHQUFHLElBQUksR0FBRyxFQUEyQixDQUFDOztZQUYvRCxVQUFVOzs7O1lBTGtCLFFBQVE7WUFHWCxZQUFZO1lBSjdCLFVBQVU7NENBYWQsTUFBTSxTQUFDLGVBQWU7NENBQ3RCLE1BQU0sU0FBQywyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IHNoYXJlLCBzd2l0Y2hNYXAgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcbmltcG9ydCB7IEZPUk1fUEFUSF9UT0tFTiwgRnJhbWVDb250ZXh0LCBGb3JtRXhwcmVzc2lvbnNNYW5pZmVzdCwgRm9ybU1hbmlmZXN0LCBJRm9ybUV4cHJlc3Npb25NYW5pZmVzdFNlcnZpY2UsIEZPUk1fTUFOSUZFU1RfU0VSVklDRV9UT0tFTiwgSUZvcm1NYW5pZmVzdFNlcnZpY2UgfSBmcm9tIFwiQGZhcnJpcy9kZXZraXRcIjtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZvcm1FeHByZXNzaW9uTWFuaWZlc3RTZXJ2aWNlIGltcGxlbWVudHMgSUZvcm1FeHByZXNzaW9uTWFuaWZlc3RTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzdGF0aWMgbWFpbmZlc3RzID0gbmV3IE1hcDxzdHJpbmcsIE9ic2VydmFibGU8YW55Pj4oKTtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgcHJpdmF0ZSBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCxcbiAgICBwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsXG4gICAgQEluamVjdChGT1JNX1BBVEhfVE9LRU4pIHByaXZhdGUgbW9kdWxlUGF0aCxcbiAgICBASW5qZWN0KEZPUk1fTUFOSUZFU1RfU0VSVklDRV9UT0tFTikgcHJpdmF0ZSBmb3JtTWFuaWZlc3RTZXJ2aWNlOiBJRm9ybU1hbmlmZXN0U2VydmljZSkgeyB9XG5cbiAgcHVibGljIGxvYWQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBpZiAodGhpcy5tb2R1bGVQYXRoLmVuZHNXaXRoKCdcXC8nKSkge1xuICAgICAgdGhpcy5tb2R1bGVQYXRoID0gdGhpcy5tb2R1bGVQYXRoLnN1YnN0cmluZygwLCB0aGlzLm1vZHVsZVBhdGgubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZm9ybU1hbmlmZXN0U2VydmljZS5sb2FkKCkucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoZm9ybU1hbmlmZXN0OiBGb3JtTWFuaWZlc3QpID0+IHtcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbnMgPSBmb3JtTWFuaWZlc3QuZXhwcmVzc2lvbnM7XG4gICAgICAgIGNvbnN0IGV4cHJlc3Npb25NYW5pZmVzdCA9IGV4cHJlc3Npb25zLmZpbmQoKGV4cHJlc3Npb25NYW5pZmVzdDogRm9ybUV4cHJlc3Npb25zTWFuaWZlc3QpID0+IGV4cHJlc3Npb25NYW5pZmVzdC5ucyA9PT0gdGhpcy5mcmFtZUNvbnRleHQubmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKGV4cHJlc3Npb25NYW5pZmVzdCkge1xuICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb25QYXRoID0gYCR7dGhpcy5tb2R1bGVQYXRofS9leHByZXNzaW9ucy8ke2V4cHJlc3Npb25NYW5pZmVzdC5wYXRofT92ZXJzaW9uPSR7bmV3IERhdGUoKS52YWx1ZU9mKCkudG9TdHJpbmcoKX1gO1xuICAgICAgICAgIGNvbnN0IGtleSA9IGAke3RoaXMubW9kdWxlUGF0aH0vZXhwcmVzc2lvbnMvJHtleHByZXNzaW9uTWFuaWZlc3QucGF0aH1gO1xuICAgICAgICAgIGNvbnN0IHJlcXVlc3QkID0gRm9ybUV4cHJlc3Npb25NYW5pZmVzdFNlcnZpY2UubWFpbmZlc3RzLmdldChrZXkpO1xuICAgICAgICAgIGlmIChyZXF1ZXN0JCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3QkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCByZXEkID0gdGhpcy5odHRwQ2xpZW50LmdldChleHByZXNzaW9uUGF0aCwgeyByZXNwb25zZVR5cGU6ICdqc29uJyB9KS5waXBlKHNoYXJlKCkpO1xuICAgICAgICAgICAgRm9ybUV4cHJlc3Npb25NYW5pZmVzdFNlcnZpY2UubWFpbmZlc3RzLnNldChrZXksIHJlcSQpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcSQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBvZih7fSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufSJdfQ==