/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Renderer2, ElementRef, NgZone, Injector, ViewChild } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { ComboListComponent } from '@farris/ui-combo-list';
import { ComboListDefaultOptions } from '../editor-default-options';
var DatagridComboListComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatagridComboListComponent, _super);
    function DatagridComboListComponent(render, el, ngzone, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.ngzone = ngzone;
        _this.injector = injector;
        _this.stopPropagation = false;
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridComboListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, ComboListDefaultOptions, this.options);
        if (this.options.showClear !== undefined) {
            this.options.enableClear = this.options.showClear;
        }
        if (this.formControl && this.formControl.value) {
            this.options.selectedValues = this.formControl.value;
        }
    };
    /**
     * @return {?}
     */
    DatagridComboListComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.inputElement = this.instance.input.textbox.nativeElement;
        _super.prototype.ngAfterViewInit.call(this);
        // setTimeout(() => {
        //     this.instance.show();
        // });
    };
    /**
     * @return {?}
     */
    DatagridComboListComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnDestroy.call(this);
        this.inputElement = null;
    };
    // onBeforeShow = () => {
    //     if (this.options.beforeShow) {
    //         return this.options.beforeShow(this);
    //     }
    //     return of(true);
    // }
    // onBeforeHide = () => {
    //     if (this.options.beforeHide) {
    //         return this.options.beforeHide(this);
    //     }
    //     return of(true);
    // }
    // onBeforeShow = () => {
    //     if (this.options.beforeShow) {
    //         return this.options.beforeShow(this);
    //     }
    //     return of(true);
    // }
    // onBeforeHide = () => {
    //     if (this.options.beforeHide) {
    //         return this.options.beforeHide(this);
    //     }
    //     return of(true);
    // }
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridComboListComponent.prototype.onShowPanel = 
    // onBeforeShow = () => {
    //     if (this.options.beforeShow) {
    //         return this.options.beforeShow(this);
    //     }
    //     return of(true);
    // }
    // onBeforeHide = () => {
    //     if (this.options.beforeHide) {
    //         return this.options.beforeHide(this);
    //     }
    //     return of(true);
    // }
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.showPanel) {
            this.options.showPanel(this.eventPrams($event));
        }
        else if (this.options.onShown) {
            this.options.onShown(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridComboListComponent.prototype.onHidePanel = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.hidePanel) {
            this.options.hidePanel(this.eventPrams($event));
        }
        else if (this.options.onHidden) {
            this.options.onHidden(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridComboListComponent.prototype.onClear = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.clear) {
            this.options.clear(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridComboListComponent.prototype.onValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridComboListComponent.prototype.onSelectChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.selectChange) {
            this.options.selectChange(this.eventPrams($event));
        }
    };
    /**
     * @return {?}
     */
    DatagridComboListComponent.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.instance.hide();
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    DatagridComboListComponent.prototype.eventPrams = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    };
    DatagridComboListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-combolist',
                    template: "\n        <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n            <farris-combo-list #cmblist style=\"width: 100%\"\n                [formControlName]=\"column.field\"\n                [readonly]= \"options.readonly\"\n                [editable]= \"options.editable\"\n                [(selectedValues)]=\"options.selectedValues\"\n                [idField]=\"options.idField\"\n                [textField]=\"options.textField\"\n                [multiSelect]=\"options.multiSelect\"\n                [valueField]=\"options.valueField\"\n                [uri]=\"options.uri\"\n                [data]=\"options.data\"\n                [nosearch]=\"options.nosearch\"\n                [maxLength]=\"options?.maxLength\"\n                [context]=\"options?.context\"\n                [itemTemplate]=\"options?.itemTemplate\"\n                [enableClear]=\"options.enableClear\"\n                [autoWidth]=\"options.autoWidth\"\n                [panelHeight]=\"options.panelHeight\"\n                [panelWidth]=\"options.panelWidth\"\n                [enableCancelSelected]=\"options.enableCancelSelected\"\n                [beforeShow]=\"options?.beforeShow\"\n                [beforeHide]=\"options?.beforeHide\"\n                (showPanel)=\"onShowPanel($event)\"\n                (hidePanel)=\"onHidePanel($event)\"\n                (clear)=\"onClear($event)\"\n                (valueChange)=\"onValueChange($event)\"\n                (selectChange)=\"onSelectChange($event)\"\n                [showPanelType]=\"options?.showPanelEvent || 'click'\"\n                [mappingField]=\"options?.mappingField\"\n            ></farris-combo-list>\n        </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridComboListComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    DatagridComboListComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['cmblist',] }]
    };
    return DatagridComboListComponent;
}(DatagridBaseEditorDirective));
export { DatagridComboListComponent };
if (false) {
    /** @type {?} */
    DatagridComboListComponent.prototype.stopPropagation;
    /** @type {?} */
    DatagridComboListComponent.prototype.instance;
    /**
     * @type {?}
     * @private
     */
    DatagridComboListComponent.prototype.ngzone;
    /** @type {?} */
    DatagridComboListComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,