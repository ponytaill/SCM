import { Directive, ElementRef, Injector } from "@angular/core";
import { FrameContext } from "@farris/devkit";
import { ListViewComponent } from "@farris/ui-list-view";
var ListViewComponentRefDirective = /** @class */ (function () {
    function ListViewComponentRefDirective(injector, component, elementRef, frameContext) {
        this.injector = injector;
        this.component = component;
        this.elementRef = elementRef;
        this.frameContext = frameContext;
    }
    ListViewComponentRefDirective.prototype.ngOnInit = function () {
        var id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;
        if (this.frameContext && id) {
            this.frameContext.componentRefManager.add(id, this.component);
        }
    };
    ListViewComponentRefDirective.prototype.ngOnDestroy = function () {
    };
    ListViewComponentRefDirective.prototype.ngAfterViewInit = function () {
    };
    ListViewComponentRefDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[listViewRef]'
                },] }
    ];
    /** @nocollapse */
    ListViewComponentRefDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ListViewComponent },
        { type: ElementRef },
        { type: FrameContext }
    ]; };
    return ListViewComponentRefDirective;
}());
export { ListViewComponentRefDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC12aWV3LWNvbXBvbmVudC1yZWYuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY29tcG9uZW50LXJlZi9saXN0LXZpZXctY29tcG9uZW50LXJlZi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDbEcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXpEO0lBSUUsdUNBQW9CLFFBQWtCLEVBQVUsU0FBNEIsRUFBVSxVQUFzQixFQUFVLFlBQTBCO1FBQTVILGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFtQjtRQUFVLGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBYztJQUFJLENBQUM7SUFDckosZ0RBQVEsR0FBUjtRQUNFLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1FBQ2hHLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxFQUFFLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMvRDtJQUNILENBQUM7SUFDRCxtREFBVyxHQUFYO0lBQ0EsQ0FBQztJQUNELHVEQUFlLEdBQWY7SUFDQSxDQUFDOztnQkFkRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGVBQWU7aUJBQzFCOzs7O2dCQU44QyxRQUFRO2dCQUU5QyxpQkFBaUI7Z0JBRlMsVUFBVTtnQkFDcEMsWUFBWTs7SUFrQnJCLG9DQUFDO0NBQUEsQUFmRCxJQWVDO1NBWlksNkJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3RvciwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tIFwiQGZhcnJpcy9kZXZraXRcIjtcclxuaW1wb3J0IHsgTGlzdFZpZXdDb21wb25lbnQgfSBmcm9tIFwiQGZhcnJpcy91aS1saXN0LXZpZXdcIjtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2xpc3RWaWV3UmVmXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIExpc3RWaWV3Q29tcG9uZW50UmVmRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGNvbXBvbmVudDogTGlzdFZpZXdDb21wb25lbnQsIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCkgeyB9XHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICBjb25zdCBpZCA9IHRoaXMuZWxlbWVudFJlZiAmJiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCAmJiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5pZDtcclxuICAgIGlmICh0aGlzLmZyYW1lQ29udGV4dCAmJiBpZCkge1xyXG4gICAgICB0aGlzLmZyYW1lQ29udGV4dC5jb21wb25lbnRSZWZNYW5hZ2VyLmFkZChpZCwgdGhpcy5jb21wb25lbnQpO1xyXG4gICAgfVxyXG4gIH1cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICB9XHJcbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gIH1cclxufSJdfQ==