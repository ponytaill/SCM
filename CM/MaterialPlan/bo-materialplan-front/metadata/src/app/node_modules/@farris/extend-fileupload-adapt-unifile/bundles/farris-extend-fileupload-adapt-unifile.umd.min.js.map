{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@farris/extend-fileupload-adapt-unifile/lib/ffileupload-adapt-unifile.config.ts","ng://@farris/extend-fileupload-adapt-unifile/lib/ffilepreview-adapt-unifile.service.ts","ng://@farris/extend-fileupload-adapt-unifile/lib/ffilepreview-adapt-unifile-simple.directive.ts","ng://@farris/extend-fileupload-adapt-unifile/lib/ffilepreview-adapt-seeimg/ffilepreview-adapt-seeimg.component.ts","ng://@farris/extend-fileupload-adapt-unifile/lib/ffileupload-adapt-unifile.service.ts","ng://@farris/extend-fileupload-adapt-unifile/lib/ffilepreview-adapt-unifile.directive.ts","ng://@farris/extend-fileupload-adapt-unifile/lib/ffileupload-adapt-unifile.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","FFileUploadAdaptUnifileConfigToken","InjectionToken","FFileUploadAdaptUnifileConfigService","exConfig","config","rootId","formId","mode","getConfig","setConfig","key","Injectable","args","providedIn","Optional","type","Inject","FfilepreviewAdaptUnifileService","fileviewSer","configSer","downloadSer","previewExtendServerConfig","extendData","getFinallyConfig","extendValue","previewFile","info","extendService","previewFileList","infos","metadataIdList","forEach","item","extend","options","viewerFileList","downloadFile","id","Error","window","open","getImgSrc","multiDownloadFiles","metadataIdList_1","url","getMultipleDownloadUrl","JSON","stringify","multiDownloadFilesWidthName","name","metadataIdList_2","getMultipleDownloadUrlWithName","attachId","getDownloadUrl","console","warn","setPreviwExtendServerConfig","getPreviewExtendServerConfig","FileViewerService","DownloadService","decorators","FFileAdaptPreviewFileDirective","previewSer","viewDisabled","extendServerConfig","filePreviewEventHandler","fileInfo","Directive","selector","Input","HostListener","FFileAdaptDownloadFileDirective","zipName","downloadDisabled","enableMulti","FfilepreviewAdaptSeeimgComponent","adpSer","elementRef","cls","enableThumbnail","clsPrefix","supportImgSuffix","iconWidth","maxThumbnailWidth","maxThumbnailHeight","ngOnInit","imgSrc","isImage","fileName","lastDotIndex","lastIndexOf","fileSuffix","substring","toLocaleLowerCase","split","findIndex","getFileTypeClassName","clsName","Component","template","ElementRef","HostBinding","FfileuploadAdaptUnifileService","uploadSer","_this","_super","bufferSize","uploadedChunk","fileTotalChunk","__","constructor","create","tslib_1.__extends","uuid","S4","Math","random","toString","remove","files","event","innerRemoveList","Observable","observer","removeFileInfo","GspFormRemoveListEntity","fileItem","concat","removeList","subscribe","result","complete","upload","uploadBigFile","innerUploadList","uploadInfo","GspFormUploadListEntity","docInfoList","readerObserable","sub","obser","reader","FileReader","readAsBinaryString","nativeFile","onload","fileContent","btoa","forkJoin","datas","uploadList","errorInfoFormat","findFileIndexByFileName","UploadStatus","Done","multipartUpload","file","chunkTotal","ceil","size","chunkIndex","GspFormUploadEntity","OperatingModes","Temp","docInfo","GspFormDocInfo","metadataId","total","nextSize","min","fileData","slice","innerIndex","index","uploadFile","progress","status","data","percentage","response","Number","parseInt","toFixed","Uploading","formatFileSize","getMultipartDisplayName","errorFiles","map","message","uploadChunks$","Subject","uploadchunks$","chunks","_getBigFileChunks","f","uploadChunks","__spread","parse","get","asObservable","uploadFileChunk","post","pipe","switchMap","of","catchError","upChunk$","expand","delay","uploadChunk","EMPTY","last","res","completeUpload","chunkSize","fileChunks","formData","FormData","append","previous","UploadService","UploadServerService","FFilePreviewAdaptUnifileDirective","_extendServeConfig","previewOpts","showDownload","showHeader","showFileList","fileDownloadEventHandler","downloadEv","defineProperty","providers","FfileuploadAdaptUnifileModule","forRoot","ngModule","provide","useValue","NgModule","declarations","imports","CommonModule","UploadDialogMoudle","FileListModule","FFileUploadModule","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, Optional, InjectionToken, Inject, } from '@angular/core';\r\n\r\nexport interface FFileUploadAdaptUnifileConfig {\r\n    rootId?: string;\r\n    formId?: string;\r\n    mode?: number;//0 代表正式，1代表临时\r\n    options?:any;\r\n}\r\nexport const FFileUploadAdaptUnifileConfigToken = new InjectionToken<FFileUploadAdaptUnifileConfig>('MFFileUploadAdaptUnifileConfig');\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FFileUploadAdaptUnifileConfigService {\r\n    private config = {\r\n        rootId: '',\r\n        formId: '',\r\n        mode: 0\r\n    } as FFileUploadAdaptUnifileConfig;\r\n    \r\n    constructor(@Optional() @Inject(FFileUploadAdaptUnifileConfigToken) exConfig: FFileUploadAdaptUnifileConfig) {\r\n        if (exConfig) {\r\n            Object.assign(this.config, exConfig);\r\n        }\r\n    }\r\n    /**\r\n     * 获取config属性的值\r\n     */\r\n    getConfig() {\r\n        return this.config;\r\n    }\r\n    /**\r\n     * 设置config的属性值\r\n     * @param key \r\n     * @param value \r\n     */\r\n    setConfig(key, value) {\r\n        this.config[key] = value;\r\n    }\r\n};","import { Injectable, Optional } from '@angular/core';\r\nimport { FUploadFileExtend } from '@farris/extend-file-upload';\r\nimport { FileViewerService } from '@gsp-svc/file-viewer';\r\nimport { DownloadService } from '@gsp-svc/formdoc-upload';\r\nimport { FFileUploadAdaptUnifileConfigService, FFileUploadAdaptUnifileConfig } from './ffileupload-adapt-unifile.config';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FfilepreviewAdaptUnifileService {\r\n    extendData;// 暂时用于简单合并\r\n    private previewExtendServerConfig: FFileUploadAdaptUnifileConfig = null;\r\n    constructor(private fileviewSer: FileViewerService, private configSer: FFileUploadAdaptUnifileConfigService, @Optional() private downloadSer: DownloadService) {\r\n        this.extendData = this.configSer.getConfig();\r\n    }\r\n    /**\r\n     * 返回最终属性值\r\n     * @param key \r\n     * @param configValue \r\n     * @param extendValue \r\n     */\r\n    private getFinallyConfig(key, extendValue) {\r\n        if (extendValue && extendValue.hasOwnProperty(key)) {\r\n            return extendValue[key];\r\n        }\r\n        // 避免下载等其他指令再传入扩展配置\r\n        if (this.previewExtendServerConfig && this.previewExtendServerConfig.hasOwnProperty(key)) {\r\n            return this.previewExtendServerConfig[key];\r\n        }\r\n        // 来自module中forRoot的配置\r\n        if (this.extendData.hasOwnProperty(key)) {\r\n            return this.extendData[key];\r\n        }\r\n           return null;\r\n        \r\n    }\r\n    /**\r\n     * 预览单个文件\r\n     * @param info \r\n     */\r\n    previewFile(info: FUploadFileExtend, extendService: FFileUploadAdaptUnifileConfig) {\r\n        return this.previewFileList([info], extendService);\r\n    }\r\n    /**\r\n     * 预览整个列表\r\n     * @param infos \r\n     */\r\n    previewFileList(infos: FUploadFileExtend[], extendService: FFileUploadAdaptUnifileConfig) {\r\n        //metadataIdList: string[]\r\n        let rootId = this.getFinallyConfig('rootId', extendService);\r\n        let metadataIdList = [];\r\n        infos.forEach(item => {\r\n            metadataIdList.push(item.extend['metadataId']);\r\n        });\r\n        let options = this.getFinallyConfig('options', extendService);\r\n        if(options){\r\n            return this.fileviewSer.viewerFileList(metadataIdList, rootId, options);\r\n        }else{\r\n            return this.fileviewSer.viewerFileList(metadataIdList, rootId);\r\n        }\r\n    }\r\n    /**\r\n     * 下载附件\r\n     * @param info \r\n     */\r\n    downloadFile(info: FUploadFileExtend, extendService: FFileUploadAdaptUnifileConfig) {\r\n        if (!info.id) {\r\n            throw new Error('请设置要下载的附件');\r\n        }\r\n        window.open(this.getImgSrc(info, extendService));\r\n    }\r\n    /**\r\n   * 下载附件\r\n   * @param info \r\n   */\r\n    multiDownloadFiles(infos: FUploadFileExtend[], extendService: FFileUploadAdaptUnifileConfig) {\r\n        //metadataIdList: string[]\r\n        if (infos.length == 1) {\r\n            this.downloadFile(infos[0], extendService);\r\n        } else {\r\n            let rootId = this.getFinallyConfig('rootId', extendService);\r\n            let metadataIdList = [];\r\n            infos.forEach(item => {\r\n                metadataIdList.push(item.extend['metadataId']);\r\n            });\r\n            let url = this.downloadSer.getMultipleDownloadUrl(JSON.stringify(metadataIdList), rootId);\r\n            window.open(url);\r\n        }\r\n    }\r\n    multiDownloadFilesWidthName(infos: FUploadFileExtend[], name = \"\", extendService: FFileUploadAdaptUnifileConfig) {\r\n        //metadataIdList: string[]\r\n        if (infos.length == 1) {\r\n            this.downloadFile(infos[0], extendService);\r\n        } else {\r\n            let rootId = this.getFinallyConfig('rootId', extendService);\r\n            let metadataIdList = [];\r\n            infos.forEach(item => {\r\n                metadataIdList.push(item.extend['metadataId']);\r\n            });\r\n            let url = this.downloadSer.getMultipleDownloadUrlWithName(JSON.stringify(metadataIdList), rootId, name);\r\n            window.open(url);\r\n        }\r\n    }\r\n    /**\r\n     * 获取下载链接\r\n    */\r\n    getImgSrc(info: FUploadFileExtend, extendService: FFileUploadAdaptUnifileConfig) {\r\n        if (!info.id) {\r\n            throw new Error('请设置要下载的附件');\r\n        }\r\n        let url = '';\r\n        let attachId = info.extend['metadataId'];\r\n        let rootId = this.getFinallyConfig('rootId', extendService);\r\n        // 文档服务服务单元名进行规范性调整，由document修改为dfs\r\n        if (this.downloadSer) {\r\n            if (rootId) {\r\n                url = this.downloadSer.getDownloadUrl(attachId, rootId);\r\n            }\r\n        } else if (rootId) {\r\n            console.warn('因为安全问题，附件下载提供安全校验机制，附件下载功能需要重新编译')\r\n            url = `/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${attachId}&rootid=${rootId}`;\r\n        }\r\n        return url;\r\n    }\r\n    /**\r\n     * 根据预览指令的扩展配置获取\r\n     * @param value \r\n     */\r\n    setPreviwExtendServerConfig(value) {\r\n        this.previewExtendServerConfig = value;\r\n    }\r\n    getPreviewExtendServerConfig() {\r\n        return this.previewExtendServerConfig;\r\n    }\r\n\r\n}","import { Directive, HostListener, Input } from '@angular/core';\r\nimport { FfilepreviewAdaptUnifileService } from './ffilepreview-adapt-unifile.service';\r\n\r\n@Directive({\r\n    selector: '[fFileAdaptPreviewFile]'\r\n})\r\nexport class FFileAdaptPreviewFileDirective {\r\n    // 附件信息\r\n    @Input('fFileAdaptPreviewFile') fileInfo;\r\n    /**\r\n     * 捕获预览事件\r\n     * @param fileInfo \r\n     */\r\n    @HostListener('click', ['$event'])\r\n    filePreviewEventHandler() {\r\n        if (!this.fileInfo || this.viewDisabled) {\r\n            return;\r\n        }\r\n        this.previewSer.previewFile(this.fileInfo, this.extendServerConfig);\r\n    }\r\n    // 是否禁用预览\r\n    @Input() viewDisabled = false;\r\n    // 处理扩展的服务器端配置\r\n    @Input() extendServerConfig = null;\r\n    constructor(private previewSer: FfilepreviewAdaptUnifileService) {\r\n\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[fFileAdaptDownloadFile]'\r\n})\r\nexport class FFileAdaptDownloadFileDirective {\r\n    //  附件信息\r\n    @Input('fFileAdaptDownloadFile') fileInfo;\r\n    /**\r\n     * 捕获预览事件\r\n     * @param fileInfo \r\n     */\r\n    @HostListener('click', ['$event'])\r\n    filePreviewEventHandler() {\r\n        if (!this.fileInfo || this.downloadDisabled) {\r\n            return;\r\n        }\r\n        if (this.enableMulti && this.fileInfo instanceof Array) {\r\n            this.previewSer.multiDownloadFilesWidthName(this.fileInfo,this.zipName,this.extendServerConfig);\r\n        } else {\r\n            this.previewSer.downloadFile(this.fileInfo, this.extendServerConfig);\r\n        }\r\n    }\r\n    //重命名\r\n    @Input() zipName='';\r\n    // 是否禁用下载\r\n    @Input() downloadDisabled = false;\r\n    // 处理扩展的服务器端配置\r\n    @Input() extendServerConfig = null;\r\n    // 是否启用批量下载\r\n    @Input() enableMulti = false;\r\n    constructor(private previewSer: FfilepreviewAdaptUnifileService) {\r\n\r\n    }\r\n}\r\n\r\n","import { Component, OnInit, ElementRef, Input, HostBinding } from '@angular/core';\r\nimport { FUploadFileExtend } from '@farris/extend-file-upload';\r\nimport { FfilepreviewAdaptUnifileService } from './../ffilepreview-adapt-unifile.service';\r\n\r\n@Component({\r\n  selector: 'ffilepreview-adapt-seeimg',\r\n  templateUrl: './ffilepreview-adapt-seeimg.component.html',\r\n  styleUrls: ['./ffilepreview-adapt-seeimg.component.css']\r\n})\r\nexport class FfilepreviewAdaptSeeimgComponent implements OnInit {\r\n  @HostBinding('class.ffilepreview-adapt-seeimg') cls = true;\r\n  // 是否启用图片的缩略图，默认为false；如果启用，图片类型会出现缩略图；不启用，根据类型显示图标\r\n  @Input() enableThumbnail = false;\r\n  // 图标的样式前缀\r\n  @Input() clsPrefix = 'ffilepreview--filetype';\r\n  // 显示缩略图中时，定义哪些后缀属于图片;\r\n  @Input() supportImgSuffix = 'jpeg,jpg,gif,png,bmp';\r\n  // 附件信息\r\n  @Input() fileInfo: FUploadFileExtend;\r\n  @Input() iconWidth=38;\r\n  // 缩略图的最大宽度\r\n  @Input() maxThumbnailWidth = '100%';\r\n  // 缩略图的最小宽度\r\n  @Input() maxThumbnailHeight = '100%';\r\n  // 处理扩展的服务器端配置，这样可以支持每个指令预览不同的目录，比如{'rootId':'default-root','formId':'formId'}\r\n  @Input() extendServerConfig =null;\r\n  constructor(private adpSer: FfilepreviewAdaptUnifileService, private elementRef: ElementRef) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n  /**\r\n   * 获取图片的链接\r\n   */\r\n  imgSrc() {\r\n    return this.adpSer.getImgSrc(this.fileInfo, this.extendServerConfig);\r\n  }\r\n  /**\r\n   * 判断是否是图片\r\n   */\r\n  isImage() {\r\n    // 没有数据\r\n    if (!this.fileInfo) {\r\n      return false;\r\n    }\r\n    // 没有名称\r\n    let fileName = this.fileInfo.name;\r\n    if (!fileName) {\r\n      return false;\r\n    }\r\n    let lastDotIndex = fileName.lastIndexOf(\".\");\r\n    let fileSuffix = '';\r\n    if (lastDotIndex > -1) {\r\n      fileSuffix = fileName.substring(lastDotIndex + 1).toLocaleLowerCase();\r\n    }\r\n    if (!fileSuffix) {\r\n      return false;\r\n    }\r\n    let tImgSuffixArray = this.supportImgSuffix.split(',');\r\n    let tIndex = tImgSuffixArray.findIndex(item => {\r\n      return item == fileSuffix;\r\n    });\r\n    if (tIndex > -1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  /**\r\n   * 获取文件类型样式\r\n   */\r\n  getFileTypeClassName() {\r\n\r\n    let clsName = this.clsPrefix;\r\n    // 如果名称为空\r\n    if (!this.fileInfo || !this.fileInfo['name']) {\r\n      return clsName + '-any';\r\n    }\r\n    let fileName = this.fileInfo['name'];\r\n    let lastDotIndex = fileName.lastIndexOf(\".\");\r\n    let fileSuffix = '';\r\n    if (lastDotIndex > -1) {\r\n      fileSuffix = fileName.substring(lastDotIndex + 1).toLocaleLowerCase();\r\n    }\r\n    switch (fileSuffix) {\r\n      case 'pdf':\r\n        clsName += '-pdf';\r\n        break;\r\n      case 'jpeg':\r\n      case 'jpg':\r\n      case 'gif':\r\n      case 'png':\r\n      case 'bmp':\r\n        clsName += '-img';\r\n        break;\r\n      case 'ppt':\r\n        clsName += '-ppt';\r\n        break;\r\n      case 'doc':\r\n      case 'docx':\r\n        clsName += '-doc';\r\n        break;\r\n      case 'xls':\r\n      case 'xlsx':\r\n        clsName += '-xls';\r\n        break;\r\n      case 'txt':\r\n        clsName += '-txt';\r\n        break;\r\n      case 'zip':\r\n        clsName += '-zip';\r\n        break;\r\n      default:\r\n        clsName += '-any';\r\n    }\r\n    return clsName;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { UploadServerService, UploadFile, UploadInput, UploadStatus } from '@farris/extend-file-upload';\r\nimport { Observable, forkJoin, of, EMPTY, concat, Subject } from 'rxjs';\r\nimport { UploadService, GspFormUploadListEntity, GspFormRemoveListEntity, GspFormDocInfo, GspFormUploadEntity, FileInfo, OperatingModes, GspDocMetaProperty } from '@gsp-svc/formdoc-upload';\r\nimport { FFileUploadAdaptUnifileConfigService, FFileUploadAdaptUnifileConfig } from './ffileupload-adapt-unifile.config';\r\nimport { catchError, delay, expand, last, map, switchMap, tap } from 'rxjs/operators';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FfileuploadAdaptUnifileService extends UploadServerService {\r\n    extendData;// 暂时用于简单合并\r\n    bufferSize = 1024 * 1024;\r\n    private static previous = 0;\r\n    private uploadedChunk = {};\r\n    private fileTotalChunk = {};\r\n\r\n\r\n    \r\n\r\n    constructor(private uploadSer: UploadService, private configSer: FFileUploadAdaptUnifileConfigService) {\r\n        super();\r\n        this.extendData = this.configSer.getConfig();\r\n    }\r\n\r\n    private uuid() {\r\n        let S4 = function () {\r\n            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        };\r\n        let nGuid = S4() + S4() + S4() + S4() + S4() + S4() + S4() + S4();\r\n        return nGuid;\r\n    }\r\n    /**\r\n     * 删除文件\r\n     * @param file \r\n     * @param event \r\n     */\r\n    remove(files: UploadFile[], event: UploadInput, extendService: FFileUploadAdaptUnifileConfig): Observable<any> {\r\n        return this.innerRemoveList(files, event, extendService);\r\n    }\r\n\r\n    private innerRemoveList(files: UploadFile[], event: UploadInput, extendService = null): Observable<any> {\r\n        return new Observable(observer => {\r\n            let removeFileInfo = new GspFormRemoveListEntity;\r\n            let metadataIdList = [];\r\n            files.forEach(fileItem => {\r\n                if (fileItem['response']) {\r\n                    metadataIdList.push(fileItem['response']['metadataId']);\r\n                }\r\n            });\r\n\r\n            removeFileInfo.mode = this.getFinallyConfig('mode', extendService);\r\n            let rootId = this.getFinallyConfig('rootId', extendService);\r\n            removeFileInfo.metadataIdList = [].concat(metadataIdList);\r\n\r\n            this.uploadSer.removeList(metadataIdList, rootId).subscribe(result => {\r\n                // 没有需要整合的服务器端返回数据\r\n                observer.next({ type: 'removed', files: files });\r\n            }, error => {\r\n                observer.error(error);\r\n                observer.complete();\r\n            }, () => {\r\n                observer.complete();\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * 上传文件\r\n     * @param file \r\n     * @param event \r\n     */\r\n    upload(files: UploadFile[], event: UploadInput, extendService: FFileUploadAdaptUnifileConfig): Observable<any> {\r\n        if (event.type == 'sliceUpload') {\r\n            return this.uploadBigFile(files, event, extendService);\r\n        }\r\n        return this.innerUploadList(files, event, extendService);\r\n    }\r\n    /**\r\n     * 内部上传方式\r\n     * @param files \r\n     * @param event \r\n     * @param extendService \r\n     */\r\n    private innerUploadList(files: UploadFile[], event: UploadInput, extendService: FFileUploadAdaptUnifileConfig): Observable<any> {\r\n        return new Observable(observer => {\r\n\r\n            let uploadInfo = new GspFormUploadListEntity;\r\n            uploadInfo.formId = this.getFinallyConfig('formId', extendService);\r\n            uploadInfo.mode = this.getFinallyConfig('mode', extendService);\r\n\r\n            let rootId = this.getFinallyConfig('rootId', extendService);\r\n            uploadInfo.docInfoList = [];\r\n            let readerObserable: Observable<any>[] = [];\r\n            files.forEach((fileItem: UploadFile) => {\r\n                let sub = new Observable(obser => {\r\n                    let reader = new FileReader();\r\n                    // 暂不处理异常\r\n                    reader.readAsBinaryString(fileItem.nativeFile);\r\n                    reader.onload = (e) => {\r\n                        let info = { 'fileName': '', 'fileContent': '' } as any;\r\n                        info['fileName'] = fileItem.name;\r\n                        info['fileContent'] = btoa(reader.result.toString());\r\n                        // 如果data里有数据，并且属性是配置的扩展属性\r\n                        if (event.hasOwnProperty('data') && event['data'] && event['data'].hasOwnProperty('extProperty')) {\r\n                            // \r\n                            info['extProperty'] = event['data']['extProperty'];\r\n                        }\r\n                        uploadInfo.docInfoList.push(info);\r\n                        obser.next();\r\n                        obser.complete();\r\n                    }\r\n                });\r\n                readerObserable.push(sub);\r\n            });\r\n\r\n            forkJoin(readerObserable).subscribe(datas => {\r\n                //     metadataId: string;\r\n                //  fileName: string;\r\n                this.uploadSer.uploadList(uploadInfo, rootId).subscribe(result => {\r\n                    if (result.error) {\r\n                        // 此接口一旦出现问题，所有附件都上传不通过\r\n                        observer.error(this.errorInfoFormat(result.error, files));\r\n                        observer.complete();\r\n                        return;\r\n                    }\r\n                    // 合并返回结果到此处\r\n                    result.forEach(item => {\r\n                        var findIndex = this.findFileIndexByFileName(files, item.fileName);\r\n                        if (findIndex > -1) {\r\n                            files[findIndex]['response'] = item;\r\n                            files[findIndex]['progress']['status'] = UploadStatus.Done;\r\n                        }\r\n                    });\r\n\r\n                    observer.next({ type: 'done', files: files });\r\n\r\n                }, error => {\r\n                    observer.error(this.errorInfoFormat(error, files));\r\n                    observer.complete();\r\n                }, () => {\r\n                    observer.complete();\r\n                });\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * 分片加载\r\n     * @param file \r\n     * @param event \r\n     * @param extendService \r\n     */\r\n    multipartUpload(file: UploadFile, event: UploadInput, extendService: FFileUploadAdaptUnifileConfig): Observable<any> {\r\n\r\n        return new Observable(observer => {\r\n\r\n            // let fileInfo: FileInfo;\r\n            let uuid = this.uuid();\r\n            // let uuid = UUID.UUID();\r\n            //reader.readAsBinaryString(selectedFile);\r\n            //reader.onload = (e) => {\r\n            let fileName = file.name;\r\n            // fileInfo = {\r\n            //   id: uuid,\r\n            //   name: fileName,\r\n            //   type: file.type,\r\n            //   source: \"\",\r\n            //   size: this.formatFileSize(file.size),\r\n            //   fileSize: file.size,\r\n            //   picListDisplayName: this.getMultipartDisplayName(fileName),\r\n            //   queueListDisplayName: fileName,\r\n            //   //content: reader.result.toString(),\r\n            //   hasUploaded: false,\r\n            //   mouseOn: false,\r\n            //   selectd: false,\r\n            //   isUploading: true,\r\n            //   uploadResult: false,\r\n            //   uploadProcess: 0,\r\n            //   errorMessage: \"\",\r\n            //   extensionDropListId: 0,\r\n            //   extensionName: \"\"\r\n            // }\r\n\r\n            let chunkTotal: number = Math.ceil(file.size / this.bufferSize);\r\n            // 标记当前附件总的分片数\r\n            this.fileTotalChunk[uuid] = chunkTotal;\r\n            let chunkIndex: number = 0;\r\n            // 标记当前附件成功的分片数\r\n            this.uploadedChunk[uuid] = 0;\r\n            while (chunkIndex < chunkTotal) {\r\n                let uploadInfo = new GspFormUploadEntity;\r\n                uploadInfo.mode = OperatingModes.Temp;\r\n                uploadInfo.formId = this.getFinallyConfig('formId', extendService);\r\n                uploadInfo.rootId = this.getFinallyConfig('rootId', extendService);\r\n\r\n                let docInfo: GspFormDocInfo = new GspFormDocInfo;\r\n                docInfo.fileName = fileName;\r\n                docInfo.metadataId = uuid;\r\n                docInfo.total = chunkTotal;\r\n                // 如果data里有数据，并且属性是配置的扩展属性\r\n                if (event.hasOwnProperty('data') && event['data'] && event['data'].hasOwnProperty('extProperty')) {\r\n                    docInfo['extProperty'] = event['data']['extProperty'] as GspDocMetaProperty;\r\n                }\r\n                // 下一个文件大小\r\n                let nextSize = Math.min((chunkIndex + 1) * this.bufferSize, file.size);\r\n                // File类型\r\n                let fileData = file['nativeFile'].slice(chunkIndex * this.bufferSize, nextSize);\r\n                // 读取文件\r\n                let reader = new FileReader();\r\n                reader.readAsBinaryString(fileData);\r\n                let innerIndex = chunkIndex;\r\n                reader.onload = () => {\r\n                    // 附件上传\r\n                    docInfo.fileContent = btoa(reader.result.toString());\r\n                    docInfo.index = innerIndex;\r\n\r\n                    uploadInfo.docInfo = docInfo;\r\n                    let info = uploadInfo;\r\n\r\n                    this.uploadSer.uploadFile(info).subscribe(result => {\r\n                        if (result && result.error) {\r\n                            // 分片上传有返回结果就是报错了\r\n                            observer.error(this.errorInfoFormat(result.error, [file]));\r\n                            observer.complete();\r\n                            return;\r\n                        } else {\r\n                            this.uploadedChunk[uuid]++;\r\n                            if (this.uploadedChunk[docInfo.metadataId] == this.fileTotalChunk[docInfo.metadataId]) {\r\n                                // 判断是所有分片都上传完成\r\n                                file.progress = {\r\n                                    status: UploadStatus.Done,\r\n                                    data: {\r\n                                        percentage: 100\r\n                                    }\r\n                                };\r\n                                file.response = docInfo;\r\n                                delete this.uploadedChunk[uuid];\r\n                                delete this.fileTotalChunk[uuid];\r\n                                observer.next({ type: 'done', files: [file] });\r\n                                observer.complete();\r\n\r\n                            } else {\r\n                                // 分片上传正常\r\n                                const percentage = Number.parseInt((this.uploadedChunk[uuid] / this.fileTotalChunk[uuid] * 100).toFixed(0));\r\n                                // 判断未上传完成\r\n                                file.progress = {\r\n                                    status: UploadStatus.Uploading,\r\n                                    data: {\r\n                                        percentage: percentage\r\n                                    }\r\n                                };\r\n                                observer.next({ type: 'uploading', files: [file] });\r\n                            }\r\n                        }\r\n                    }, error => {\r\n                        delete this.uploadedChunk[uuid];\r\n                        delete this.fileTotalChunk[uuid];\r\n                        observer.error(this.errorInfoFormat(error, [file]));\r\n                        observer.complete();\r\n                    });\r\n                }\r\n                chunkIndex = chunkIndex + 1;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * 获取分片的附件大小\r\n     * @param size \r\n     */\r\n    private formatFileSize(size: number) {\r\n        if (size < 102400)\r\n            return (size / 1024).toFixed(1) + \"K\";\r\n        else if (size < 1024 * 1024)\r\n            return (size / 1024).toFixed(0) + \"K\";\r\n        else if (size < 100 * 1024 * 1024)\r\n            return (size / 1024 / 1024).toFixed(1) + \"M\";\r\n        else if (size < 1024 * 1024 * 1024)\r\n            return (size / 1024 / 1024).toFixed(0) + \"M\";\r\n        else\r\n            return (size / 1024 / 1024 / 1024).toFixed(1) + \"G\";\r\n    }\r\n    /**\r\n     * 获取分片的 附件名称\r\n     * @param fileName \r\n     */\r\n    private getMultipartDisplayName(fileName: string) {\r\n        if (fileName.length <= 10)\r\n            return fileName;\r\n        else {\r\n            let headContent = fileName.substring(0, 2);\r\n            let tailContent = fileName.substring(fileName.lastIndexOf('.') - 2);\r\n            return headContent + \"…\" + tailContent;\r\n        }\r\n    }\r\n    private errorInfoFormat(error, files) {\r\n        // \r\n        let errorFiles = files.map(item => {\r\n            return { id: item.id, name: item.name };\r\n        });\r\n        if (error) {\r\n            return Object.assign(error, { files: errorFiles }, { message: error['Message'] || error['extensionMessage'] || '上传失败', type: 'error' });\r\n        } else {\r\n            return Object.assign({ files: errorFiles }, { message: '上传失败', type: 'error' });\r\n        }\r\n    }\r\n    /**\r\n     * 返回最终属性值\r\n     * @param key \r\n     * @param configValue \r\n     * @param extendValue \r\n     */\r\n    private getFinallyConfig(key, extendValue) {\r\n        if (extendValue && extendValue.hasOwnProperty(key)) {\r\n            return extendValue[key];\r\n        }\r\n        return this.extendData[key];\r\n    }\r\n\r\n    private findFileIndexByFileName(files: UploadFile[], fileName) {\r\n        // 按照肯定能找到文件来处理\r\n        let findIndex = files.findIndex(file => file.name == fileName);\r\n        return findIndex;\r\n    }\r\n\r\n\r\n    //#region 大文件分片上传\r\n\r\n    uploadBigFile(files: UploadFile[], event: UploadInput, extendService: FFileUploadAdaptUnifileConfig) {\r\n\r\n        const uploadChunks$ = new Subject();\r\n\r\n        const _files = files.map(n => {\r\n            const chunks = this._getBigFileChunks(n, event, extendService)\r\n            return { ...n, ...chunks};\r\n        });\r\n\r\n        \r\n        const uploadchunks$: Observable<any>[] =  _files.map((f) => this.uploadChunks(f, uploadChunks$));\r\n        concat(...uploadchunks$).subscribe(\r\n            (f: any) => {\r\n                // console.log(`file: ${f.name} - upload complete`);\r\n                f.progress = {\r\n                    status: UploadStatus.Done,\r\n                    data:  {\r\n                        percentage: 100\r\n                    }\r\n                };\r\n                f.response = JSON.parse(f.chunks[0].get('docInfo'));\r\n                uploadChunks$.next({type: 'done', files:[f]});\r\n            },\r\n            error => {\r\n                uploadChunks$.error(this.errorInfoFormat(error, files));\r\n                uploadChunks$.complete();\r\n            },\r\n            () => {\r\n                uploadChunks$.complete();\r\n                // console.log(\"all files uploaded\")\r\n            }\r\n        );\r\n\r\n        return uploadChunks$.asObservable();\r\n    }\r\n\r\n    private uploadFileChunk(file: any) {\r\n        const url = \"/api/runtime/dfs/v1.0/formdoc/slice\";\r\n\r\n        return this.uploadSer['http']['http'].post(url, file.chunks[file.total]).pipe(\r\n            switchMap(() => {\r\n                return of(file);\r\n            }),\r\n            catchError((error: HttpErrorResponse) => {\r\n                return of(error);\r\n            }\r\n        ));\r\n    }\r\n\r\n    \r\n    private uploadChunks(file, upChunk$: Subject<any>) {\r\n\r\n        const doChunksRemain = (i) => i > -1;\r\n        const completeUpload = (f) => of(f);\r\n        const uploadChunk = (f) => {\r\n            return this.uploadFileChunk(f).pipe(\r\n                delay(100),\r\n                map((f: any) => {\r\n                    // 块数为0 时，即为此文件的所有块均上传成功\r\n                    f.progress = {\r\n                        status: UploadStatus.Uploading,\r\n                        data:  {\r\n                            percentage: (f.total / f.chunks.length * 100).toFixed(0)\r\n                        }\r\n                    };\r\n                    upChunk$.next({ type: 'uploading', files: [f] });\r\n\r\n                    return f;\r\n                })\r\n            )\r\n        };\r\n        const createMultipartUpload = (f) => of(f);\r\n\r\n\r\n        return createMultipartUpload(file).pipe(\r\n            // tap((f) => console.log(\"upload file\", f.name)),\r\n            expand((f) => {\r\n                if (doChunksRemain(--file.total)) {\r\n                    return uploadChunk(file);\r\n                }\r\n                return EMPTY;\r\n            }),\r\n            // tap((f: any) => {\r\n            //     console.log(`file: ${f.name} - remaining chunks: ${f.total}`);\r\n            // }),\r\n            last(),\r\n            switchMap((res: any) => {\r\n                return completeUpload(file);\r\n            })\r\n        );\r\n    }\r\n\r\n\r\n    private _getBigFileChunks(file: UploadFile, event: UploadInput, extendService: FFileUploadAdaptUnifileConfig) {\r\n        let uuid = this.uuid();\r\n\r\n        let chunkTotal: number = Math.ceil(file.size / this.bufferSize * (event.chunkSize || 1));\r\n        let chunkIndex: number = 0;\r\n        const fileChunks = {chunks: [], total: chunkTotal};\r\n\r\n        while (chunkIndex < chunkTotal) {\r\n            let uploadInfo = new GspFormUploadEntity;\r\n            uploadInfo.mode = OperatingModes.Temp;\r\n            uploadInfo.formId = this.getFinallyConfig('formId', extendService);\r\n            uploadInfo.rootId = this.getFinallyConfig('rootId', extendService);\r\n\r\n            let docInfo: GspFormDocInfo = new GspFormDocInfo;\r\n\r\n            docInfo.fileName = file.name;\r\n            docInfo.metadataId = uuid;\r\n            docInfo.total = chunkTotal;\r\n\r\n            let nextSize = Math.min((chunkIndex + 1) * this.bufferSize, file.size);\r\n            // File类型\r\n            let fileData = file['nativeFile'].slice(chunkIndex * this.bufferSize, nextSize);\r\n\r\n            docInfo.size = file.size;\r\n            docInfo.index = chunkIndex;\r\n            docInfo.fileContent = \"\"\r\n            \r\n            // 如果data里有数据，并且属性是配置的扩展属性\r\n            if (event.hasOwnProperty('data') && event['data'] && event['data'].hasOwnProperty('extProperty')) {\r\n                docInfo['extProperty'] = event['data']['extProperty'] as GspDocMetaProperty;\r\n            }\r\n\r\n\r\n            uploadInfo.docInfo = docInfo;\r\n      \r\n            //封装请求formdata\r\n            let formData = new FormData();\r\n            formData.append('uploadInfo', JSON.stringify(uploadInfo));\r\n            formData.append('docInfo', JSON.stringify(docInfo));\r\n            formData.append('file', fileData);\r\n\r\n            fileChunks.chunks.push(formData);\r\n            chunkIndex = chunkIndex + 1;\r\n        }\r\n\r\n        return fileChunks;\r\n    \r\n    }\r\n\r\n\r\n    // private showProgressBar() {\r\n    //     // overlay Div\r\n    //     const div = document.createElement('div');\r\n    //     div.style.cssText = 'position: absolute;top: 0;left: 0;width: 100vw;height: 100vh;z-index: 999999;background: #fdfdfd54;';\r\n\r\n    //     // panel Div\r\n    //     const progressPanelDiv = document.createElement('div');\r\n    //     div.style.cssText =`background: white;width: 500px;height: 130px;left: 50%;top: 50%;position: relative;\r\n    //     margin-top: -50px;margin-left: -250px;align-items: center;justify-content: center;display: flex;flex-direction: column;\r\n    //     border-radius: 15px;box-shadow: 1px 1px 7px #ced4da;`;\r\n\r\n    //     div.appendChild(progressPanelDiv);\r\n\r\n    //     const progressNumEl = document.createElement('h2');\r\n        \r\n    // }\r\n\r\n\r\n    //#endregion\r\n\r\n}\r\n\r\n","import { Directive, HostListener, Input } from '@angular/core';\r\nimport { FfilepreviewAdaptUnifileService } from './ffilepreview-adapt-unifile.service';\r\n\r\n@Directive({\r\n    selector: '[fFilePreviewAdaptUnifile]',\r\n    providers:[FfilepreviewAdaptUnifileService]\r\n})\r\nexport class FFilePreviewAdaptUnifileDirective {\r\n    /**\r\n     * 捕获预览事件\r\n     * @param fileInfo \r\n     */\r\n    @HostListener('filePreviewEvent', ['$event'])\r\n    filePreviewEventHandler(fileInfo) {\r\n        const previewOpts = Object.assign(this.extendServerConfig || {}, {\r\n            options: {\r\n                showDownload: !!fileInfo.showDownload,\r\n                showHeader: true,\r\n                showFileList: true\r\n            }});\r\n        this.previewSer.previewFile(fileInfo, previewOpts);\r\n    }\r\n    /**\r\n     * 捕获下载事件\r\n     * @param fileInfo \r\n     */\r\n    @HostListener('fileDownloadEvent', ['$event'])\r\n    fileDownloadEventHandler(downloadEv) {\r\n        // 如果是批量下载, downloadEv={fileInfos:[],name:}\r\n        if (downloadEv&&downloadEv['fileInfos'].length>0) {\r\n            if (downloadEv['fileInfos'].length>1) {\r\n                this.previewSer.multiDownloadFilesWidthName(downloadEv['fileInfos'],downloadEv['name'], this.extendServerConfig);\r\n            }else{\r\n                this.previewSer.downloadFile(downloadEv['fileInfos'][0], this.extendServerConfig);\r\n            }\r\n        }        \r\n    }\r\n\r\n    /**\r\n     * 处理扩展的服务器端配置\r\n     */\r\n    private _extendServeConfig=null;\r\n    @Input() \r\n    set extendServerConfig(value){\r\n        this._extendServeConfig=value;\r\n        this.previewSer.setPreviwExtendServerConfig(value);\r\n    } \r\n    get extendServerConfig(){\r\n        return this._extendServeConfig;\r\n    }\r\n    constructor(private previewSer: FfilepreviewAdaptUnifileService) {\r\n\r\n    }\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FFileUploadModule } from '@farris/extend-file-upload';\r\nimport { UploadDialogMoudle } from '@gsp-svc/formdoc-upload';\r\nimport { FfileuploadAdaptUnifileService } from './ffileupload-adapt-unifile.service';\r\nimport { FfilepreviewAdaptUnifileService } from './ffilepreview-adapt-unifile.service';\r\nimport { FFilePreviewAdaptUnifileDirective } from './ffilepreview-adapt-unifile.directive';\r\nimport { FileListModule, FileViewerService } from '@gsp-svc/file-viewer';\r\nimport { FFileUploadAdaptUnifileConfig, FFileUploadAdaptUnifileConfigToken, FFileUploadAdaptUnifileConfigService } from './ffileupload-adapt-unifile.config';\r\nimport { FfilepreviewAdaptSeeimgComponent } from './ffilepreview-adapt-seeimg/ffilepreview-adapt-seeimg.component';\r\nimport { FFileAdaptDownloadFileDirective, FFileAdaptPreviewFileDirective } from './ffilepreview-adapt-unifile-simple.directive';\r\n\r\n\r\n@NgModule({\r\n  declarations: [FFilePreviewAdaptUnifileDirective, FfilepreviewAdaptSeeimgComponent,FFileAdaptDownloadFileDirective,FFileAdaptPreviewFileDirective],\r\n  imports: [\r\n    CommonModule,\r\n    UploadDialogMoudle,\r\n    FileListModule,\r\n    FFileUploadModule.forRoot(null, FfileuploadAdaptUnifileService)\r\n  ],\r\n  exports: [FFileUploadModule, FFilePreviewAdaptUnifileDirective, FfilepreviewAdaptSeeimgComponent,FFileAdaptDownloadFileDirective,FFileAdaptPreviewFileDirective],\r\n  providers: [\r\n    FFileUploadAdaptUnifileConfigService,\r\n    FfilepreviewAdaptUnifileService,\r\n    FileViewerService\r\n  ]\r\n})\r\nexport class FfileuploadAdaptUnifileModule {\r\n\r\n  static forRoot(config?: FFileUploadAdaptUnifileConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: FfileuploadAdaptUnifileModule,\r\n      providers: [\r\n        { provide: FFileUploadAdaptUnifileConfigToken, useValue: config },\r\n        FFileUploadAdaptUnifileConfigService,\r\n        FfilepreviewAdaptUnifileService,\r\n        FileViewerService\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}