/*
 * @Author: aalizzwell
 * @Date: 2019-05-31 09:48:10
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2019-06-24 17:00:58
 */
import * as tslib_1 from "tslib";
// tslint:disable: no-string-literal max-line-length
/**
 * 树节点构造器
 * @summary
 * 将BindingData中的数据集合转换成TreeTable节点集合
 */
var ParentTreeNodeBuilder = /** @class */ (function () {
    /**
     * 构造函数
     */
    function ParentTreeNodeBuilder(allNodesData, oldTreeNodes, primaryKey, hierarchyInfoKey, context) {
        /**
         * 等待展开的节点
         * @description 节点结构
         * ```
         * {id:'xxx',expanded:false}
         * ```
         */
        this.nodesWaitExpand = [];
        this.primaryKey = primaryKey;
        this.hierarchyInfoKey = hierarchyInfoKey;
        this.allNodes = [];
        this.allNodesData = allNodesData;
        this.context = context || {};
        this.nodesWaitExpand = [];
        this.nodesShouldExpand = context && context.nodesShouldExpand || [];
        this.frameContext = context && context.frameContext || null;
        this.addTreeLoadCompleteListener(this.onTreeLoadComplete.bind(this));
        this.allNodesMap = new Map();
        this.allOldNodesMap = new Map();
        this.buildNodesDataMap(oldTreeNodes);
    }
    Object.defineProperty(ParentTreeNodeBuilder.prototype, "expandLevel", {
        /**
         * 展开至层级
         * @description -1为不展开
         */
        get: function () {
            return this.context && this.context.hasOwnProperty('expandLevel') ? this.context['expandLevel'] : -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParentTreeNodeBuilder.prototype, "component", {
        get: function () {
            return this.context && this.context['component'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParentTreeNodeBuilder.prototype, "addTreeLoadCompleteListener", {
        get: function () {
            return this.context && this.context['addTreeLoadCompleteListener'] || function (args) { };
        },
        enumerable: true,
        configurable: true
    });
    ParentTreeNodeBuilder.prototype.updateTreeNode = function (allNodesData, data) {
        this.allNodesData = allNodesData;
        this.buildNodesDataMap(data);
    };
    ParentTreeNodeBuilder.prototype.build = function () {
        var _this = this;
        var tree = [];
        var childrenOf = {};
        var parents = {};
        this.allNodesData.forEach(function (item) {
            var id = item.id;
            var parentId = _this.getHierarchyInfo(item).parentElement;
            // item.parentId = parentId;
            // 展开新增节点的父节点
            var isNewNode = _this.isNewNode(item);
            if (isNewNode === true) {
                _this.expandParentNode(item);
            }
            // 构造树节点
            var node = _this.buildNode(item);
            childrenOf[id] = childrenOf[id] || [];
            node.children = childrenOf[id];
            parents[parentId] = parents[parentId] || [];
            parents[parentId].push(node);
            _this.allNodesMap.set(item[_this.primaryKey], node);
            if (parentId) {
                childrenOf[parentId] = childrenOf[parentId] || [];
                childrenOf[parentId].push(node);
            }
            else {
                tree.push(node);
            }
        });
        // 所有节点都是parentId，没有返回根节点
        if ((!tree || tree.length < 1) && this.allNodesData && this.allNodesData.length > 0) {
            var parentIds = Object.keys(parents);
            parentIds.forEach(function (parentId) {
                if (!_this.allNodesData.find(function (item) { return item.id === parentId; })) {
                    tree = tree.concat(parents[parentId]);
                }
            });
        }
        return tree;
    };
    /**
     * 构造树节点
     */
    ParentTreeNodeBuilder.prototype.build1 = function () {
        var _this = this;
        var minLayer;
        // 获取最顶级节点的layer
        this.allNodesData.forEach(function (node) {
            var hierarchyInfo = _this.getHierarchyInfo(node);
            if (hierarchyInfo) {
                var layer = hierarchyInfo['layer'];
                if (!isNaN(layer)) {
                    if (minLayer === undefined) {
                        minLayer = layer;
                    }
                    else if (layer < minLayer) {
                        minLayer = layer;
                    }
                }
            }
        });
        var topLayer = minLayer - 1;
        this.buildNodes('', topLayer, this.allNodesData, this.allNodes);
        return this.allNodes;
    };
    /**
     * 构造树节点集合
     */
    ParentTreeNodeBuilder.prototype.buildNodes = function (fParentElement, fLayer, allNodesData, treeNodes) {
        var _this = this;
        var childNodesData = this.getChildNodesData(fParentElement, fLayer);
        childNodesData.forEach(function (nodeData) {
            // 展开新增节点的父节点
            var isNewNode = _this.isNewNode(nodeData);
            if (isNewNode === true) {
                _this.expandParentNode(nodeData);
            }
            // 构造树节点
            var node = _this.buildNode(nodeData);
            treeNodes.push(node);
            _this.allNodesMap.set(nodeData[_this.primaryKey], node);
            // 递归遍历下级节点
            var hierarchyInfo = _this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];
            var currentLayer = hierarchyInfo['layer'];
            var currentId = nodeData[_this.primaryKey];
            _this.buildNodes(currentId, currentLayer, allNodesData, node.children);
        });
    };
    /**
     * 创建树节点
     */
    ParentTreeNodeBuilder.prototype.buildNode = function (nodeData) {
        var isLeaf = this.isLeaf(nodeData);
        // 获取节点的展开状态
        var shouldExpand = this.shouldExpand(nodeData);
        // 节点虽然应该展开，但可能是因为之前就是展开状态，所以应该检查节点之前的状态
        var originExpandStatus = this.isExpanded(nodeData);
        // 如果应该展开该节点，但是该节点之前有状态，那么该节点不应该再由程序展开。
        if (!originExpandStatus && shouldExpand) {
            this.expandNode(nodeData);
        }
        var paginationInfo = this.buildPaginationInfo(nodeData);
        var treeNode = {
            data: Object.assign({}, nodeData),
            children: [],
            expanded: shouldExpand,
            leaf: isLeaf
        };
        if (paginationInfo) {
            treeNode.pagination = paginationInfo;
        }
        return treeNode;
    };
    /**
     * 构造分页信息
     * @param nodeData nodeData
     * @returns
     */
    ParentTreeNodeBuilder.prototype.buildPaginationInfo = function (nodeData) {
        var result = null;
        if (this.frameContext) {
            var id = this.getPrimary(nodeData);
            // 获取分页信息
            var key = "_NODE_" + id + "_PAGINATION_INFO_";
            var pagination = this.frameContext.params.get(key) || null;
            if (pagination && pagination.pageCount > 1) {
                result = {
                    pageIndex: pagination.pageIndex,
                    pageSize: pagination.pageSize,
                    total: pagination.totalCount
                };
            }
        }
        return result;
    };
    /**
     * 计算节点是否要展开
     * @param nodeData nodeData
     */
    ParentTreeNodeBuilder.prototype.shouldExpand = function (nodeData) {
        var _a = tslib_1.__read([this.isLeaf(nodeData), this.getNodeLayer(nodeData)], 2), isLeaf = _a[0], layer = _a[1];
        // 永远不展开叶子节点
        if (isLeaf) {
            return false;
        }
        var expanded = this.isExpanded(nodeData);
        if (!expanded) {
            var id_1 = this.getPrimary(nodeData);
            if (this.nodesWaitExpand.findIndex(function (node) { return node && node.id === id_1; }) > -1) {
                return false;
            }
            if (this.nodesShouldExpand.findIndex(function (nodeId) { return nodeId === id_1; }) > -1) {
                return true;
            }
            if (this.expandLevel === -1) {
                // -1 为不展开
                expanded = false;
            }
            else if (this.expandLevel === 0) {
                // 0 为全部展开
                expanded = true;
            }
            else {
                // 没有启用分层加载，通过展开层级确定是否展开该节点
                expanded = layer <= this.expandLevel;
                // 如果节点原本存在且节点没有展开则不展开
                var oldTreeNode = this.getOldNode(nodeData);
                if (oldTreeNode && !oldTreeNode.expanded) {
                    expanded = false;
                }
            }
        }
        return expanded;
    };
    /**
     * 展开树节点
     * @description 完全加载树使用展开属性在buildNode时已经展开，此函数的主要用于展开分级加载树
     * @param nodeData nodeData
     */
    ParentTreeNodeBuilder.prototype.expandNode = function (nodeData) {
        var _a = tslib_1.__read([nodeData[this.primaryKey], this.getNodeLayer(nodeData)], 2), element = _a[0], layer = _a[1];
        var childs = this.getChildNodesData(element, layer);
        // 当前节点不是叶子节点，但在节点数据中又找不到该节点的子节点，则认为树启用了分层加载
        if (!childs || childs.length < 1) {
            // 分层加载树需要通过触发节点展开事件才加载下层,目前树上还不存在该节点，无法直接展开，需要等树加载完之后再展开
            var id_2 = this.getPrimary(nodeData);
            if (this.nodesWaitExpand.findIndex(function (node) { return node && node.id === id_2; }) < 0) {
                this.nodesWaitExpand.push({ id: id_2, expanded: false });
            }
        }
    };
    /**
     * 树加载完成事件
     */
    ParentTreeNodeBuilder.prototype.onTreeLoadComplete = function () {
        var index = this.nodesWaitExpand.findIndex(function (node) { return !node.expanded; });
        var nodeData = this.nodesWaitExpand[index] || {};
        var id = nodeData.id;
        if (id) {
            var rowNode = this.component.findRowNode(id);
            if (rowNode) {
                nodeData.expanded = true;
                // if (nodeData && nodeData.node && !nodeData.node.expanded) {
                //   return;
                // }
                this.component.expandNode(id);
            }
        }
    };
    /**
     * 获取主键
     * @param nodeData nodeData
     */
    ParentTreeNodeBuilder.prototype.getPrimary = function (nodeData) {
        return nodeData[this.primaryKey];
    };
    // #region 工具方法，待单独封装
    /**
     * 获取子级节点的数据集合
     */
    ParentTreeNodeBuilder.prototype.getChildNodesData = function (fParentElement, fLayer) {
        var _this = this;
        var childNodesData = [];
        this.allNodesData.forEach(function (nodeData) {
            // @todo：待删除，兼容没有hierarchyInfo的数据 
            var hierarchyInfo = _this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];
            if (!hierarchyInfo) {
                return;
            }
            // 匹配节点
            var currentLayer = hierarchyInfo['layer'];
            var currentParentElement = hierarchyInfo['parentElement'];
            if ((currentLayer === fLayer + 1) && (currentParentElement === fParentElement || (!currentParentElement && fParentElement === ''))) {
                childNodesData.push(nodeData);
            }
        });
        return childNodesData;
    };
    ParentTreeNodeBuilder.prototype.getHierarchyInfo = function (nodeData) {
        return this.getValue(nodeData, this.hierarchyInfoKey); //nodeData[this.hierarchyInfoKey];
    };
    ParentTreeNodeBuilder.prototype.getValue = function (target, path) {
        if (path.indexOf('/') === -1) {
            return target[path];
        }
        var paths = path.split('/').filter(function (p) { return p; });
        return paths.reduce(function (result, path) {
            return result && result[path];
        }, target);
    };
    /**
     * 获取分级信息中的层级
     * @param nodeData nodeData
     */
    ParentTreeNodeBuilder.prototype.getNodeLayer = function (nodeData) {
        var hierarchyInfo = this.getHierarchyInfo(nodeData);
        return hierarchyInfo['layer'];
    };
    /**
     * 获取分级信息中的父节点
     * @param nodeData nodeData
     */
    ParentTreeNodeBuilder.prototype.getNodeParentElement = function (nodeData) {
        var hierarchyInfo = this.getHierarchyInfo(nodeData);
        return hierarchyInfo['parentElement'];
    };
    /**
     * 获取展开状态
     */
    ParentTreeNodeBuilder.prototype.isExpanded = function (newData) {
        var oldTreeNode = this.getOldNode(newData);
        return oldTreeNode ? oldTreeNode.expanded : undefined;
    };
    /**
     * 是否是叶子节点
     * @todo：应该用数据本身的isDetail来保证，但目前不准确，强制前端计算
     */
    ParentTreeNodeBuilder.prototype.isLeaf = function (nodeData) {
        var hierarchyInfo = this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];
        var isDetail = hierarchyInfo['isDetail'];
        return isDetail;
    };
    /**
     * 判断节点是否是新增
     * @todo：不应该这样判断，待优化。
     * @summary
     * 1、非空树（空树视为初次加载数据）；
     * 2、找不到oldNode。
     */
    ParentTreeNodeBuilder.prototype.isNewNode = function (nodeData) {
        if (this.allOldNodesMap.size === 0) {
            return false;
        }
        var oldTreeNode = this.getOldNode(nodeData);
        return oldTreeNode ? false : true;
    };
    /**
     * 展开父节点
     */
    ParentTreeNodeBuilder.prototype.expandParentNode = function (nodeData) {
        var parentTreeNode = this.getParentNode(nodeData);
        if (!parentTreeNode) {
            return;
        }
        parentTreeNode.leaf = false;
        parentTreeNode.expanded = true;
    };
    /**
     * 查找父节点
     */
    ParentTreeNodeBuilder.prototype.getParentNode = function (nodeData) {
        var _this = this;
        var hierarchyInfo = this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];
        var layer = hierarchyInfo['layer'];
        var parentElement = hierarchyInfo['parentElement'];
        var allNodes = Array.from(this.allNodesMap.values());
        var parentNode = allNodes.find(function (node) {
            var currentLayer = _this.getValue(node.data, _this.hierarchyInfoKey)['layer']; //node.data[this.hierarchyInfoKey]['layer'];
            var currentId = node.data[_this.primaryKey];
            return currentId === parentElement && layer === (currentLayer + 1);
        });
        return parentNode;
    };
    /**
     * 获取老的树节点
     */
    ParentTreeNodeBuilder.prototype.getOldNode = function (nodeData) {
        var id = nodeData[this.primaryKey];
        return this.allOldNodesMap.get(id);
    };
    /**
     * 打平TreeNodes，并放入一个Map中
     */
    ParentTreeNodeBuilder.prototype.buildNodesDataMap = function (treeNodes) {
        var _this = this;
        treeNodes.forEach(function (treeNode) {
            _this.allOldNodesMap.set(treeNode.data[_this.primaryKey], treeNode);
            if (treeNode.children) {
                _this.buildNodesDataMap(treeNode.children);
            }
        });
    };
    return ParentTreeNodeBuilder;
}());
export { ParentTreeNodeBuilder };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyZW50X3RyZWVfbm9kZV9idWlsZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvdHJlZV90YWJsZV9ub2RlX2J1aWxkZXIvcGFyZW50X3RyZWVfbm9kZV9idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztHQUtHOztBQUtILG9EQUFvRDtBQUNwRDs7OztHQUlHO0FBQ0g7SUFFRTs7T0FFRztJQUNILCtCQUFZLFlBQW1CLEVBQUUsWUFBd0IsRUFBRSxVQUFrQixFQUFFLGdCQUF3QixFQUFFLE9BQWE7UUFpQ3RIOzs7Ozs7V0FNRztRQUNLLG9CQUFlLEdBQVUsRUFBRSxDQUFDO1FBdkNsQyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7UUFDekMsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLGlCQUFpQixJQUFJLEVBQUUsQ0FBQztRQUNwRSxJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQztRQUM1RCxJQUFJLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRXJFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxHQUFHLEVBQW9CLENBQUM7UUFDL0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLEdBQUcsRUFBb0IsQ0FBQztR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OztPQUVHO0lBQ0ssaURBQWlCLEdBQXpCLFVBQTBCLFNBQXFCO1FBQS9DLGlCQU9DO1FBTkMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFFBQWtCO1lBQ25DLEtBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ2xFLElBQUksUUFBUSxDQUFDLFFBQVEsRUFBRTtnQkFDckIsS0FBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUMzQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUdILDRCQUFDO0FBQUQsQ0FBQyxBQXRiRCxJQXNiQztBQUVELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjogYWFsaXp6d2VsbCBcclxuICogQERhdGU6IDIwMTktMDUtMzEgMDk6NDg6MTAgXHJcbiAqIEBMYXN0IE1vZGlmaWVkIGJ5OiBhYWxpenp3ZWxsXHJcbiAqIEBMYXN0IE1vZGlmaWVkIHRpbWU6IDIwMTktMDYtMjQgMTc6MDA6NThcclxuICovXHJcblxyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IFRyZWVOb2RlLCBUcmVlVGFibGVDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLXRyZWV0YWJsZSc7XHJcbmltcG9ydCB7IFBhcmVudEhpZXJhcmNoeUluZm8gfSBmcm9tICcuL3R5cGVzJztcclxuLy8gdHNsaW50OmRpc2FibGU6IG5vLXN0cmluZy1saXRlcmFsIG1heC1saW5lLWxlbmd0aFxyXG4vKipcclxuICog5qCR6IqC54K55p6E6YCg5ZmoXHJcbiAqIEBzdW1tYXJ5XHJcbiAqIOWwhkJpbmRpbmdEYXRh5Lit55qE5pWw5o2u6ZuG5ZCI6L2s5o2i5oiQVHJlZVRhYmxl6IqC54K56ZuG5ZCIXHJcbiAqL1xyXG5jbGFzcyBQYXJlbnRUcmVlTm9kZUJ1aWxkZXIge1xyXG4gIHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQ7XHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoYWxsTm9kZXNEYXRhOiBhbnlbXSwgb2xkVHJlZU5vZGVzOiBUcmVlTm9kZVtdLCBwcmltYXJ5S2V5OiBzdHJpbmcsIGhpZXJhcmNoeUluZm9LZXk6IHN0cmluZywgY29udGV4dD86IGFueSkge1xyXG4gICAgdGhpcy5wcmltYXJ5S2V5ID0gcHJpbWFyeUtleTtcclxuICAgIHRoaXMuaGllcmFyY2h5SW5mb0tleSA9IGhpZXJhcmNoeUluZm9LZXk7XHJcbiAgICB0aGlzLmFsbE5vZGVzID0gW107XHJcbiAgICB0aGlzLmFsbE5vZGVzRGF0YSA9IGFsbE5vZGVzRGF0YTtcclxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQgfHwge307XHJcbiAgICB0aGlzLm5vZGVzV2FpdEV4cGFuZCA9IFtdO1xyXG4gICAgdGhpcy5ub2Rlc1Nob3VsZEV4cGFuZCA9IGNvbnRleHQgJiYgY29udGV4dC5ub2Rlc1Nob3VsZEV4cGFuZCB8fCBbXTtcclxuICAgIHRoaXMuZnJhbWVDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0LmZyYW1lQ29udGV4dCB8fCBudWxsO1xyXG4gICAgdGhpcy5hZGRUcmVlTG9hZENvbXBsZXRlTGlzdGVuZXIodGhpcy5vblRyZWVMb2FkQ29tcGxldGUuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgdGhpcy5hbGxOb2Rlc01hcCA9IG5ldyBNYXA8c3RyaW5nLCBUcmVlTm9kZT4oKTtcclxuICAgIHRoaXMuYWxsT2xkTm9kZXNNYXAgPSBuZXcgTWFwPHN0cmluZywgVHJlZU5vZGU+KCk7XHJcbiAgICB0aGlzLmJ1aWxkTm9kZXNEYXRhTWFwKG9sZFRyZWVOb2Rlcyk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWxleW8gOiHs+Wxgue6p1xyXG4gICAqIEBkZXNjcmlwdGlvbiAtMeS4uuS4jeWxleW8gFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0IGV4cGFuZExldmVsKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udGV4dCAmJiB0aGlzLmNvbnRleHQuaGFzT3duUHJvcGVydHkoJ2V4cGFuZExldmVsJykgPyB0aGlzLmNvbnRleHRbJ2V4cGFuZExldmVsJ10gOiAtMTtcclxuICB9XHJcbiAgcHJpdmF0ZSBnZXQgY29tcG9uZW50KCk6IFRyZWVUYWJsZUNvbXBvbmVudCB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0ICYmIHRoaXMuY29udGV4dFsnY29tcG9uZW50J107XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0IGFkZFRyZWVMb2FkQ29tcGxldGVMaXN0ZW5lcigpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRleHQgJiYgdGhpcy5jb250ZXh0WydhZGRUcmVlTG9hZENvbXBsZXRlTGlzdGVuZXInXSB8fCBmdW5jdGlvbiAoYXJnczogYW55KSB7IH07XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOmcgOimgeWxleW8gOeahOiKgueCuVxyXG4gICAqL1xyXG4gIHByaXZhdGUgbm9kZXNTaG91bGRFeHBhbmQ6IHN0cmluZ1tdO1xyXG5cclxuICAvKipcclxuICAgKiDnrYnlvoXlsZXlvIDnmoToioLngrlcclxuICAgKiBAZGVzY3JpcHRpb24g6IqC54K557uT5p6EXHJcbiAgICogYGBgXHJcbiAgICoge2lkOid4eHgnLGV4cGFuZGVkOmZhbHNlfVxyXG4gICAqIGBgYFxyXG4gICAqL1xyXG4gIHByaXZhdGUgbm9kZXNXYWl0RXhwYW5kOiBhbnlbXSA9IFtdO1xyXG5cclxuICAvKipcclxuICAgKiDkuLvplK7lrZfmrrXlkI1cclxuICAgKi9cclxuICBwcml2YXRlIHByaW1hcnlLZXk6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICog5YiG57qn56CB5a2X5q615ZCNXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBoaWVyYXJjaHlJbmZvS2V5OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIOiKgueCueeahOaVsOaNrumbhuWQiFxyXG4gICAqL1xyXG4gIHByaXZhdGUgYWxsTm9kZXNEYXRhOiBhbnlbXTtcclxuXHJcbiAgLyoqXHJcbiAgICog6IqC54K56ZuG5ZCIXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhbGxOb2RlczogVHJlZU5vZGVbXTtcclxuXHJcbiAgLyoqXHJcbiAgICog5LiK5LiA5qyh57uR5a6a55qE5qCR6IqC54K56ZuG5ZCITWFwXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhbGxOb2Rlc01hcDogTWFwPHN0cmluZywgVHJlZU5vZGU+O1xyXG5cclxuICAvKipcclxuICAgKiDkuIrkuIDmrKHnu5HlrprnmoTmoJHoioLngrnpm4blkIhNYXBcclxuICAgKi9cclxuICBwcml2YXRlIGFsbE9sZE5vZGVzTWFwOiBNYXA8c3RyaW5nLCBUcmVlTm9kZT47XHJcblxyXG4gIC8qKlxyXG4gICAqIOS4iuS4i+aWh1xyXG4gICAqL1xyXG4gIHByaXZhdGUgY29udGV4dDogYW55O1xyXG5cclxuICBwdWJsaWMgdXBkYXRlVHJlZU5vZGUoYWxsTm9kZXNEYXRhOiBhbnksIGRhdGE6IGFueSkge1xyXG4gICAgdGhpcy5hbGxOb2Rlc0RhdGEgPSBhbGxOb2Rlc0RhdGE7XHJcbiAgICB0aGlzLmJ1aWxkTm9kZXNEYXRhTWFwKGRhdGEpO1xyXG4gIH1cclxuICBwdWJsaWMgYnVpbGQoKTogVHJlZU5vZGVbXSB7XHJcbiAgICBsZXQgdHJlZTogVHJlZU5vZGVbXSA9IFtdO1xyXG4gICAgY29uc3QgY2hpbGRyZW5PZiA9IHt9O1xyXG4gICAgY29uc3QgcGFyZW50cyA9IHt9O1xyXG4gICAgdGhpcy5hbGxOb2Rlc0RhdGEuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgY29uc3QgaWQgPSBpdGVtLmlkO1xyXG4gICAgICBjb25zdCBwYXJlbnRJZCA9IHRoaXMuZ2V0SGllcmFyY2h5SW5mbyhpdGVtKS5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAvLyBpdGVtLnBhcmVudElkID0gcGFyZW50SWQ7XHJcbiAgICAgIC8vIOWxleW8gOaWsOWinuiKgueCueeahOeItuiKgueCuVxyXG4gICAgICBjb25zdCBpc05ld05vZGUgPSB0aGlzLmlzTmV3Tm9kZShpdGVtKTtcclxuICAgICAgaWYgKGlzTmV3Tm9kZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHRoaXMuZXhwYW5kUGFyZW50Tm9kZShpdGVtKTtcclxuICAgICAgfVxyXG4gICAgICAvLyDmnoTpgKDmoJHoioLngrlcclxuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuYnVpbGROb2RlKGl0ZW0pO1xyXG4gICAgICBjaGlsZHJlbk9mW2lkXSA9IGNoaWxkcmVuT2ZbaWRdIHx8IFtdO1xyXG4gICAgICBub2RlLmNoaWxkcmVuID0gY2hpbGRyZW5PZltpZF07XHJcblxyXG4gICAgICBwYXJlbnRzW3BhcmVudElkXSA9IHBhcmVudHNbcGFyZW50SWRdIHx8IFtdO1xyXG4gICAgICBwYXJlbnRzW3BhcmVudElkXS5wdXNoKG5vZGUpO1xyXG4gICAgICB0aGlzLmFsbE5vZGVzTWFwLnNldChpdGVtW3RoaXMucHJpbWFyeUtleV0sIG5vZGUpO1xyXG4gICAgICBpZiAocGFyZW50SWQpIHtcclxuICAgICAgICBjaGlsZHJlbk9mW3BhcmVudElkXSA9IGNoaWxkcmVuT2ZbcGFyZW50SWRdIHx8IFtdO1xyXG4gICAgICAgIGNoaWxkcmVuT2ZbcGFyZW50SWRdLnB1c2gobm9kZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdHJlZS5wdXNoKG5vZGUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vIOaJgOacieiKgueCuemDveaYr3BhcmVudElk77yM5rKh5pyJ6L+U5Zue5qC56IqC54K5XHJcbiAgICBpZiAoKCF0cmVlIHx8IHRyZWUubGVuZ3RoIDwgMSkgJiYgdGhpcy5hbGxOb2Rlc0RhdGEgJiYgdGhpcy5hbGxOb2Rlc0RhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICBjb25zdCBwYXJlbnRJZHMgPSBPYmplY3Qua2V5cyhwYXJlbnRzKTtcclxuICAgICAgcGFyZW50SWRzLmZvckVhY2gocGFyZW50SWQgPT4ge1xyXG4gICAgICAgIGlmICghdGhpcy5hbGxOb2Rlc0RhdGEuZmluZChpdGVtID0+IGl0ZW0uaWQgPT09IHBhcmVudElkKSkge1xyXG4gICAgICAgICAgdHJlZSA9IHRyZWUuY29uY2F0KHBhcmVudHNbcGFyZW50SWRdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRyZWU7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOagkeiKgueCuVxyXG4gICAqL1xyXG4gIHB1YmxpYyBidWlsZDEoKTogVHJlZU5vZGVbXSB7XHJcbiAgICBsZXQgbWluTGF5ZXI7XHJcbiAgICAvLyDojrflj5bmnIDpobbnuqfoioLngrnnmoRsYXllclxyXG4gICAgdGhpcy5hbGxOb2Rlc0RhdGEuZm9yRWFjaChub2RlID0+IHtcclxuICAgICAgY29uc3QgaGllcmFyY2h5SW5mbyA9IHRoaXMuZ2V0SGllcmFyY2h5SW5mbyhub2RlKTtcclxuICAgICAgaWYgKGhpZXJhcmNoeUluZm8pIHtcclxuICAgICAgICBjb25zdCBsYXllciA9IGhpZXJhcmNoeUluZm9bJ2xheWVyJ107XHJcbiAgICAgICAgaWYgKCFpc05hTihsYXllcikpIHtcclxuICAgICAgICAgIGlmIChtaW5MYXllciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG1pbkxheWVyID0gbGF5ZXI7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGxheWVyIDwgbWluTGF5ZXIpIHtcclxuICAgICAgICAgICAgbWluTGF5ZXIgPSBsYXllcjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY29uc3QgdG9wTGF5ZXIgPSBtaW5MYXllciAtIDE7XHJcbiAgICB0aGlzLmJ1aWxkTm9kZXMoJycsIHRvcExheWVyLCB0aGlzLmFsbE5vZGVzRGF0YSwgdGhpcy5hbGxOb2Rlcyk7XHJcbiAgICByZXR1cm4gdGhpcy5hbGxOb2RlcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOagkeiKgueCuembhuWQiFxyXG4gICAqL1xyXG4gIHByaXZhdGUgYnVpbGROb2RlcyhmUGFyZW50RWxlbWVudDogc3RyaW5nLCBmTGF5ZXI6IG51bWJlciwgYWxsTm9kZXNEYXRhOiBhbnlbXSwgdHJlZU5vZGVzOiBUcmVlTm9kZVtdKTogdm9pZCB7XHJcbiAgICBjb25zdCBjaGlsZE5vZGVzRGF0YSA9IHRoaXMuZ2V0Q2hpbGROb2Rlc0RhdGEoZlBhcmVudEVsZW1lbnQsIGZMYXllcik7XHJcbiAgICBjaGlsZE5vZGVzRGF0YS5mb3JFYWNoKChub2RlRGF0YTogYW55KSA9PiB7XHJcblxyXG4gICAgICAvLyDlsZXlvIDmlrDlop7oioLngrnnmoTniLboioLngrlcclxuICAgICAgY29uc3QgaXNOZXdOb2RlID0gdGhpcy5pc05ld05vZGUobm9kZURhdGEpO1xyXG4gICAgICBpZiAoaXNOZXdOb2RlID09PSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5leHBhbmRQYXJlbnROb2RlKG5vZGVEYXRhKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g5p6E6YCg5qCR6IqC54K5XHJcbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmJ1aWxkTm9kZShub2RlRGF0YSk7XHJcbiAgICAgIHRyZWVOb2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgICB0aGlzLmFsbE5vZGVzTWFwLnNldChub2RlRGF0YVt0aGlzLnByaW1hcnlLZXldLCBub2RlKTtcclxuXHJcbiAgICAgIC8vIOmAkuW9kumBjeWOhuS4i+e6p+iKgueCuVxyXG4gICAgICBjb25zdCBoaWVyYXJjaHlJbmZvID0gdGhpcy5nZXRIaWVyYXJjaHlJbmZvKG5vZGVEYXRhKTsgLy9ub2RlRGF0YVt0aGlzLmhpZXJhcmNoeUluZm9LZXldO1xyXG4gICAgICBjb25zdCBjdXJyZW50TGF5ZXIgPSBoaWVyYXJjaHlJbmZvWydsYXllciddO1xyXG4gICAgICBjb25zdCBjdXJyZW50SWQgPSBub2RlRGF0YVt0aGlzLnByaW1hcnlLZXldO1xyXG4gICAgICB0aGlzLmJ1aWxkTm9kZXMoY3VycmVudElkLCBjdXJyZW50TGF5ZXIsIGFsbE5vZGVzRGF0YSwgbm9kZS5jaGlsZHJlbiBhcyBUcmVlTm9kZVtdKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yib5bu65qCR6IqC54K5XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBidWlsZE5vZGUobm9kZURhdGE6IGFueSk6IFRyZWVOb2RlIHtcclxuICAgIGNvbnN0IGlzTGVhZiA9IHRoaXMuaXNMZWFmKG5vZGVEYXRhKTtcclxuICAgIC8vIOiOt+WPluiKgueCueeahOWxleW8gOeKtuaAgVxyXG4gICAgY29uc3Qgc2hvdWxkRXhwYW5kID0gdGhpcy5zaG91bGRFeHBhbmQobm9kZURhdGEpO1xyXG4gICAgLy8g6IqC54K56Jm954S25bqU6K+l5bGV5byA77yM5L2G5Y+v6IO95piv5Zug5Li65LmL5YmN5bCx5piv5bGV5byA54q25oCB77yM5omA5Lul5bqU6K+l5qOA5p+l6IqC54K55LmL5YmN55qE54q25oCBXHJcbiAgICBjb25zdCBvcmlnaW5FeHBhbmRTdGF0dXMgPSB0aGlzLmlzRXhwYW5kZWQobm9kZURhdGEpO1xyXG4gICAgLy8g5aaC5p6c5bqU6K+l5bGV5byA6K+l6IqC54K577yM5L2G5piv6K+l6IqC54K55LmL5YmN5pyJ54q25oCB77yM6YKj5LmI6K+l6IqC54K55LiN5bqU6K+l5YaN55Sx56iL5bqP5bGV5byA44CCXHJcbiAgICBpZiAoIW9yaWdpbkV4cGFuZFN0YXR1cyAmJiBzaG91bGRFeHBhbmQpIHtcclxuICAgICAgdGhpcy5leHBhbmROb2RlKG5vZGVEYXRhKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHBhZ2luYXRpb25JbmZvID0gdGhpcy5idWlsZFBhZ2luYXRpb25JbmZvKG5vZGVEYXRhKTtcclxuICAgIGNvbnN0IHRyZWVOb2RlOiBUcmVlTm9kZSA9IHtcclxuICAgICAgZGF0YTogT2JqZWN0LmFzc2lnbih7fSwgbm9kZURhdGEpLFxyXG4gICAgICBjaGlsZHJlbjogW10sXHJcbiAgICAgIGV4cGFuZGVkOiBzaG91bGRFeHBhbmQsXHJcbiAgICAgIGxlYWY6IGlzTGVhZlxyXG4gICAgfTtcclxuICAgIGlmIChwYWdpbmF0aW9uSW5mbykge1xyXG4gICAgICB0cmVlTm9kZS5wYWdpbmF0aW9uID0gcGFnaW5hdGlvbkluZm87XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJlZU5vZGU7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWIhumhteS/oeaBr1xyXG4gICAqIEBwYXJhbSBub2RlRGF0YSBub2RlRGF0YVxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHByaXZhdGUgYnVpbGRQYWdpbmF0aW9uSW5mbyhub2RlRGF0YTogYW55KTogeyBwYWdlSW5kZXg6IG51bWJlciwgcGFnZVNpemU6IG51bWJlciwgdG90YWw6IG51bWJlciB9IHwgbnVsbCB7XHJcbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcclxuICAgIGlmICh0aGlzLmZyYW1lQ29udGV4dCkge1xyXG4gICAgICBjb25zdCBpZCA9IHRoaXMuZ2V0UHJpbWFyeShub2RlRGF0YSk7XHJcbiAgICAgIC8vIOiOt+WPluWIhumhteS/oeaBr1xyXG4gICAgICBjb25zdCBrZXkgPSBgX05PREVfJHtpZH1fUEFHSU5BVElPTl9JTkZPX2A7XHJcbiAgICAgIGNvbnN0IHBhZ2luYXRpb24gPSB0aGlzLmZyYW1lQ29udGV4dC5wYXJhbXMuZ2V0KGtleSkgfHwgbnVsbDtcclxuICAgICAgaWYgKHBhZ2luYXRpb24gJiYgcGFnaW5hdGlvbi5wYWdlQ291bnQgPiAxKSB7XHJcbiAgICAgICAgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgcGFnZUluZGV4OiBwYWdpbmF0aW9uLnBhZ2VJbmRleCxcclxuICAgICAgICAgIHBhZ2VTaXplOiBwYWdpbmF0aW9uLnBhZ2VTaXplLFxyXG4gICAgICAgICAgdG90YWw6IHBhZ2luYXRpb24udG90YWxDb3VudFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiuoeeul+iKgueCueaYr+WQpuimgeWxleW8gFxyXG4gICAqIEBwYXJhbSBub2RlRGF0YSBub2RlRGF0YVxyXG4gICAqL1xyXG4gIHByaXZhdGUgc2hvdWxkRXhwYW5kKG5vZGVEYXRhOiBhbnkpIHtcclxuICAgIGNvbnN0IFtpc0xlYWYsIGxheWVyXSA9IFt0aGlzLmlzTGVhZihub2RlRGF0YSksIHRoaXMuZ2V0Tm9kZUxheWVyKG5vZGVEYXRhKV07XHJcbiAgICAvLyDmsLjov5zkuI3lsZXlvIDlj7blrZDoioLngrlcclxuICAgIGlmIChpc0xlYWYpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgbGV0IGV4cGFuZGVkID0gdGhpcy5pc0V4cGFuZGVkKG5vZGVEYXRhKTtcclxuICAgIGlmICghZXhwYW5kZWQpIHtcclxuICAgICAgY29uc3QgaWQgPSB0aGlzLmdldFByaW1hcnkobm9kZURhdGEpO1xyXG4gICAgICBpZiAodGhpcy5ub2Rlc1dhaXRFeHBhbmQuZmluZEluZGV4KG5vZGUgPT4gbm9kZSAmJiBub2RlLmlkID09PSBpZCkgPiAtMSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5ub2Rlc1Nob3VsZEV4cGFuZC5maW5kSW5kZXgobm9kZUlkID0+IG5vZGVJZCA9PT0gaWQpID4gLTEpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5leHBhbmRMZXZlbCA9PT0gLTEpIHtcclxuICAgICAgICAvLyAtMSDkuLrkuI3lsZXlvIBcclxuICAgICAgICBleHBhbmRlZCA9IGZhbHNlO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZXhwYW5kTGV2ZWwgPT09IDApIHtcclxuICAgICAgICAvLyAwIOS4uuWFqOmDqOWxleW8gFxyXG4gICAgICAgIGV4cGFuZGVkID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyDmsqHmnInlkK/nlKjliIblsYLliqDovb3vvIzpgJrov4flsZXlvIDlsYLnuqfnoa7lrprmmK/lkKblsZXlvIDor6XoioLngrlcclxuICAgICAgICBleHBhbmRlZCA9IGxheWVyIDw9IHRoaXMuZXhwYW5kTGV2ZWw7XHJcbiAgICAgICAgLy8g5aaC5p6c6IqC54K55Y6f5pys5a2Y5Zyo5LiU6IqC54K55rKh5pyJ5bGV5byA5YiZ5LiN5bGV5byAXHJcbiAgICAgICAgY29uc3Qgb2xkVHJlZU5vZGUgPSB0aGlzLmdldE9sZE5vZGUobm9kZURhdGEpO1xyXG4gICAgICAgIGlmIChvbGRUcmVlTm9kZSAmJiAhb2xkVHJlZU5vZGUuZXhwYW5kZWQpIHtcclxuICAgICAgICAgIGV4cGFuZGVkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZXhwYW5kZWQ7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWxleW8gOagkeiKgueCuVxyXG4gICAqIEBkZXNjcmlwdGlvbiDlrozlhajliqDovb3moJHkvb/nlKjlsZXlvIDlsZ7mgKflnKhidWlsZE5vZGXml7blt7Lnu4/lsZXlvIDvvIzmraTlh73mlbDnmoTkuLvopoHnlKjkuo7lsZXlvIDliIbnuqfliqDovb3moJFcclxuICAgKiBAcGFyYW0gbm9kZURhdGEgbm9kZURhdGFcclxuICAgKi9cclxuICBwcml2YXRlIGV4cGFuZE5vZGUobm9kZURhdGE6IGFueSkge1xyXG4gICAgY29uc3QgW2VsZW1lbnQsIGxheWVyXSA9IFtub2RlRGF0YVt0aGlzLnByaW1hcnlLZXldLCB0aGlzLmdldE5vZGVMYXllcihub2RlRGF0YSldO1xyXG4gICAgY29uc3QgY2hpbGRzID0gdGhpcy5nZXRDaGlsZE5vZGVzRGF0YShlbGVtZW50LCBsYXllcik7XHJcblxyXG4gICAgLy8g5b2T5YmN6IqC54K55LiN5piv5Y+25a2Q6IqC54K577yM5L2G5Zyo6IqC54K55pWw5o2u5Lit5Y+I5om+5LiN5Yiw6K+l6IqC54K555qE5a2Q6IqC54K577yM5YiZ6K6k5Li65qCR5ZCv55So5LqG5YiG5bGC5Yqg6L29XHJcbiAgICBpZiAoIWNoaWxkcyB8fCBjaGlsZHMubGVuZ3RoIDwgMSkge1xyXG4gICAgICAvLyDliIblsYLliqDovb3moJHpnIDopoHpgJrov4fop6blj5HoioLngrnlsZXlvIDkuovku7bmiY3liqDovb3kuIvlsYIs55uu5YmN5qCR5LiK6L+Y5LiN5a2Y5Zyo6K+l6IqC54K577yM5peg5rOV55u05o6l5bGV5byA77yM6ZyA6KaB562J5qCR5Yqg6L295a6M5LmL5ZCO5YaN5bGV5byAXHJcbiAgICAgIGNvbnN0IGlkID0gdGhpcy5nZXRQcmltYXJ5KG5vZGVEYXRhKTtcclxuICAgICAgaWYgKHRoaXMubm9kZXNXYWl0RXhwYW5kLmZpbmRJbmRleChub2RlID0+IG5vZGUgJiYgbm9kZS5pZCA9PT0gaWQpIDwgMCkge1xyXG4gICAgICAgIHRoaXMubm9kZXNXYWl0RXhwYW5kLnB1c2goeyBpZCwgZXhwYW5kZWQ6IGZhbHNlIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOagkeWKoOi9veWujOaIkOS6i+S7tlxyXG4gICAqL1xyXG4gIHByaXZhdGUgb25UcmVlTG9hZENvbXBsZXRlKCkge1xyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLm5vZGVzV2FpdEV4cGFuZC5maW5kSW5kZXgobm9kZSA9PiAhbm9kZS5leHBhbmRlZCk7XHJcbiAgICBjb25zdCBub2RlRGF0YSA9IHRoaXMubm9kZXNXYWl0RXhwYW5kW2luZGV4XSB8fCB7fTtcclxuICAgIGNvbnN0IHsgaWQgfSA9IG5vZGVEYXRhO1xyXG4gICAgaWYgKGlkKSB7XHJcbiAgICAgIGNvbnN0IHJvd05vZGUgPSB0aGlzLmNvbXBvbmVudC5maW5kUm93Tm9kZShpZCk7XHJcbiAgICAgIGlmIChyb3dOb2RlKSB7XHJcbiAgICAgICAgbm9kZURhdGEuZXhwYW5kZWQgPSB0cnVlO1xyXG4gICAgICAgIC8vIGlmIChub2RlRGF0YSAmJiBub2RlRGF0YS5ub2RlICYmICFub2RlRGF0YS5ub2RlLmV4cGFuZGVkKSB7XHJcbiAgICAgICAgLy8gICByZXR1cm47XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIHRoaXMuY29tcG9uZW50LmV4cGFuZE5vZGUoaWQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluS4u+mUrlxyXG4gICAqIEBwYXJhbSBub2RlRGF0YSBub2RlRGF0YVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0UHJpbWFyeShub2RlRGF0YTogYW55KSB7XHJcbiAgICByZXR1cm4gbm9kZURhdGFbdGhpcy5wcmltYXJ5S2V5XTtcclxuICB9XHJcbiAgLy8gI3JlZ2lvbiDlt6Xlhbfmlrnms5XvvIzlvoXljZXni6zlsIHoo4VcclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5a2Q57qn6IqC54K555qE5pWw5o2u6ZuG5ZCIXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRDaGlsZE5vZGVzRGF0YShmUGFyZW50RWxlbWVudDogc3RyaW5nLCBmTGF5ZXI6IG51bWJlcik6IGFueVtdIHtcclxuICAgIGNvbnN0IGNoaWxkTm9kZXNEYXRhID0gW107XHJcbiAgICB0aGlzLmFsbE5vZGVzRGF0YS5mb3JFYWNoKChub2RlRGF0YTogYW55KSA9PiB7XHJcblxyXG4gICAgICAvLyBAdG9kb++8muW+heWIoOmZpO+8jOWFvOWuueayoeaciWhpZXJhcmNoeUluZm/nmoTmlbDmja4gXHJcbiAgICAgIGNvbnN0IGhpZXJhcmNoeUluZm8gPSB0aGlzLmdldEhpZXJhcmNoeUluZm8obm9kZURhdGEpOyAvL25vZGVEYXRhW3RoaXMuaGllcmFyY2h5SW5mb0tleV07XHJcbiAgICAgIGlmICghaGllcmFyY2h5SW5mbykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g5Yy56YWN6IqC54K5XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRMYXllciA9IGhpZXJhcmNoeUluZm9bJ2xheWVyJ107XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRQYXJlbnRFbGVtZW50ID0gaGllcmFyY2h5SW5mb1sncGFyZW50RWxlbWVudCddO1xyXG4gICAgICBpZiAoKGN1cnJlbnRMYXllciA9PT0gZkxheWVyICsgMSkgJiYgKGN1cnJlbnRQYXJlbnRFbGVtZW50ID09PSBmUGFyZW50RWxlbWVudCB8fCAoIWN1cnJlbnRQYXJlbnRFbGVtZW50ICYmIGZQYXJlbnRFbGVtZW50ID09PSAnJykpKSB7XHJcbiAgICAgICAgY2hpbGROb2Rlc0RhdGEucHVzaChub2RlRGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGNoaWxkTm9kZXNEYXRhO1xyXG4gIH1cclxuICBwcml2YXRlIGdldEhpZXJhcmNoeUluZm8obm9kZURhdGE6IGFueSk6IFBhcmVudEhpZXJhcmNoeUluZm8ge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUobm9kZURhdGEsIHRoaXMuaGllcmFyY2h5SW5mb0tleSk7Ly9ub2RlRGF0YVt0aGlzLmhpZXJhcmNoeUluZm9LZXldO1xyXG4gIH1cclxuICBwcml2YXRlIGdldFZhbHVlKHRhcmdldDogYW55LCBwYXRoOiBzdHJpbmcpIHtcclxuICAgIGlmIChwYXRoLmluZGV4T2YoJy8nKSA9PT0gLTEpIHtcclxuICAgICAgcmV0dXJuIHRhcmdldFtwYXRoXTtcclxuICAgIH1cclxuICAgIGNvbnN0IHBhdGhzOiBhbnkgPSBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICByZXR1cm4gcGF0aHMucmVkdWNlKChyZXN1bHQsIHBhdGgpID0+IHtcclxuICAgICAgcmV0dXJuIHJlc3VsdCAmJiByZXN1bHRbcGF0aF07XHJcbiAgICB9LCB0YXJnZXQpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5bliIbnuqfkv6Hmga/kuK3nmoTlsYLnuqdcclxuICAgKiBAcGFyYW0gbm9kZURhdGEgbm9kZURhdGFcclxuICAgKi9cclxuICBwcml2YXRlIGdldE5vZGVMYXllcihub2RlRGF0YTogYW55KSB7XHJcbiAgICBjb25zdCBoaWVyYXJjaHlJbmZvID0gdGhpcy5nZXRIaWVyYXJjaHlJbmZvKG5vZGVEYXRhKTtcclxuICAgIHJldHVybiBoaWVyYXJjaHlJbmZvWydsYXllciddO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5bliIbnuqfkv6Hmga/kuK3nmoTniLboioLngrlcclxuICAgKiBAcGFyYW0gbm9kZURhdGEgbm9kZURhdGFcclxuICAgKi9cclxuICBwcml2YXRlIGdldE5vZGVQYXJlbnRFbGVtZW50KG5vZGVEYXRhOiBhbnkpIHtcclxuICAgIGNvbnN0IGhpZXJhcmNoeUluZm8gPSB0aGlzLmdldEhpZXJhcmNoeUluZm8obm9kZURhdGEpO1xyXG4gICAgcmV0dXJuIGhpZXJhcmNoeUluZm9bJ3BhcmVudEVsZW1lbnQnXTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5bGV5byA54q25oCBXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpc0V4cGFuZGVkKG5ld0RhdGE6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3Qgb2xkVHJlZU5vZGUgPSB0aGlzLmdldE9sZE5vZGUobmV3RGF0YSk7XHJcbiAgICByZXR1cm4gb2xkVHJlZU5vZGUgPyBvbGRUcmVlTm9kZS5leHBhbmRlZCA6IHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaYr+WQpuaYr+WPtuWtkOiKgueCuVxyXG4gICAqIEB0b2Rv77ya5bqU6K+l55So5pWw5o2u5pys6Lqr55qEaXNEZXRhaWzmnaXkv53or4HvvIzkvYbnm67liY3kuI3lh4bnoa7vvIzlvLrliLbliY3nq6/orqHnrpdcclxuICAgKi9cclxuICBwcml2YXRlIGlzTGVhZihub2RlRGF0YTogYW55KTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBoaWVyYXJjaHlJbmZvID0gdGhpcy5nZXRIaWVyYXJjaHlJbmZvKG5vZGVEYXRhKTsvL25vZGVEYXRhW3RoaXMuaGllcmFyY2h5SW5mb0tleV07XHJcbiAgICBjb25zdCBpc0RldGFpbCA9IGhpZXJhcmNoeUluZm9bJ2lzRGV0YWlsJ107XHJcbiAgICByZXR1cm4gaXNEZXRhaWw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliKTmlq3oioLngrnmmK/lkKbmmK/mlrDlop5cclxuICAgKiBAdG9kb++8muS4jeW6lOivpei/meagt+WIpOaWre+8jOW+heS8mOWMluOAglxyXG4gICAqIEBzdW1tYXJ5XHJcbiAgICogMeOAgemdnuepuuagke+8iOepuuagkeinhuS4uuWIneasoeWKoOi9veaVsOaNru+8ie+8m1xyXG4gICAqIDLjgIHmib7kuI3liLBvbGROb2Rl44CCXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpc05ld05vZGUobm9kZURhdGE6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKHRoaXMuYWxsT2xkTm9kZXNNYXAuc2l6ZSA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCBvbGRUcmVlTm9kZSA9IHRoaXMuZ2V0T2xkTm9kZShub2RlRGF0YSk7XHJcbiAgICByZXR1cm4gb2xkVHJlZU5vZGUgPyBmYWxzZSA6IHRydWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlsZXlvIDniLboioLngrlcclxuICAgKi9cclxuICBwcml2YXRlIGV4cGFuZFBhcmVudE5vZGUobm9kZURhdGE6IGFueSk6IHZvaWQge1xyXG4gICAgY29uc3QgcGFyZW50VHJlZU5vZGUgPSB0aGlzLmdldFBhcmVudE5vZGUobm9kZURhdGEpO1xyXG4gICAgaWYgKCFwYXJlbnRUcmVlTm9kZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBwYXJlbnRUcmVlTm9kZS5sZWFmID0gZmFsc2U7XHJcbiAgICBwYXJlbnRUcmVlTm9kZS5leHBhbmRlZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmn6Xmib7niLboioLngrlcclxuICAgKi9cclxuICBwcml2YXRlIGdldFBhcmVudE5vZGUobm9kZURhdGE6IGFueSk6IFRyZWVOb2RlIHtcclxuICAgIGNvbnN0IGhpZXJhcmNoeUluZm8gPSB0aGlzLmdldEhpZXJhcmNoeUluZm8obm9kZURhdGEpOy8vbm9kZURhdGFbdGhpcy5oaWVyYXJjaHlJbmZvS2V5XTtcclxuICAgIGNvbnN0IGxheWVyID0gaGllcmFyY2h5SW5mb1snbGF5ZXInXTtcclxuICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBoaWVyYXJjaHlJbmZvWydwYXJlbnRFbGVtZW50J107XHJcblxyXG4gICAgY29uc3QgYWxsTm9kZXMgPSBBcnJheS5mcm9tKHRoaXMuYWxsTm9kZXNNYXAudmFsdWVzKCkpO1xyXG4gICAgY29uc3QgcGFyZW50Tm9kZSA9IGFsbE5vZGVzLmZpbmQoKG5vZGU6IFRyZWVOb2RlKSA9PiB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRMYXllciA9IHRoaXMuZ2V0VmFsdWUobm9kZS5kYXRhLCB0aGlzLmhpZXJhcmNoeUluZm9LZXkpWydsYXllciddOyAvL25vZGUuZGF0YVt0aGlzLmhpZXJhcmNoeUluZm9LZXldWydsYXllciddO1xyXG4gICAgICBjb25zdCBjdXJyZW50SWQgPSBub2RlLmRhdGFbdGhpcy5wcmltYXJ5S2V5XTtcclxuICAgICAgcmV0dXJuIGN1cnJlbnRJZCA9PT0gcGFyZW50RWxlbWVudCAmJiBsYXllciA9PT0gKGN1cnJlbnRMYXllciArIDEpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHBhcmVudE5vZGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bogIHnmoTmoJHoioLngrlcclxuICAgKi9cclxuICBwcml2YXRlIGdldE9sZE5vZGUobm9kZURhdGE6IGFueSk6IFRyZWVOb2RlIHtcclxuICAgIGNvbnN0IGlkID0gbm9kZURhdGFbdGhpcy5wcmltYXJ5S2V5XTtcclxuICAgIHJldHVybiB0aGlzLmFsbE9sZE5vZGVzTWFwLmdldChpZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmiZPlubNUcmVlTm9kZXPvvIzlubbmlL7lhaXkuIDkuKpNYXDkuK1cclxuICAgKi9cclxuICBwcml2YXRlIGJ1aWxkTm9kZXNEYXRhTWFwKHRyZWVOb2RlczogVHJlZU5vZGVbXSk6IHZvaWQge1xyXG4gICAgdHJlZU5vZGVzLmZvckVhY2goKHRyZWVOb2RlOiBUcmVlTm9kZSkgPT4ge1xyXG4gICAgICB0aGlzLmFsbE9sZE5vZGVzTWFwLnNldCh0cmVlTm9kZS5kYXRhW3RoaXMucHJpbWFyeUtleV0sIHRyZWVOb2RlKTtcclxuICAgICAgaWYgKHRyZWVOb2RlLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgdGhpcy5idWlsZE5vZGVzRGF0YU1hcCh0cmVlTm9kZS5jaGlsZHJlbik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gI2VuZHJlZ2lvblxyXG59XHJcblxyXG5leHBvcnQgeyBQYXJlbnRUcmVlTm9kZUJ1aWxkZXIgfTtcclxuXHJcbiJdfQ==