import { Injectable, Optional } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { FormMessageService } from '../form-message.service';
import { LanguageService } from '../languag.service';
import { HttpUtil, HttpStatusType } from '../util/http';
/**
 * 表单错误提示服务
 * @description 统一处理前后端异常
 */
var FormErrorService = /** @class */ (function () {
    function FormErrorService(msgService, languageService) {
        this.msgService = msgService;
        this.languageService = languageService;
    }
    /**
     * 异常路由方法
     */
    FormErrorService.prototype.exception = function (message, error) {
        // 针对session失效做特殊处理
        if (error && error.hasOwnProperty('expired') && error['expired'] === true) {
            return;
        }
        if (error && this.isHttpErrorResponse(error)) {
            this.httpErrorHandler(error);
        }
        else {
            // todo: 细化异常处理后，继续拆解该方法
            this.commonErrorHandler(message);
        }
    };
    /**
     * http请求异常处理器
     */
    FormErrorService.prototype.httpErrorHandler = function (httpError) {
        if (!httpError) {
            return;
        }
        var statusType = HttpUtil.getHttpStatusType(httpError.status);
        switch (statusType) {
            case HttpStatusType.ClientError:
                if (httpError.status === 401) {
                    this.msgService.http401Error(httpError);
                    break;
                }
                this.msgService.httpErrorInClient(httpError);
                break;
            case HttpStatusType.ServerError:
                this.msgService.httpErrorInServer(httpError);
                break;
            default:
                throw new Error('Get invalid status code when using httpErrorHandler method.');
        }
    };
    FormErrorService.prototype.commonErrorHandler = function (errorMsg) {
        if (!errorMsg) {
            return;
        }
        this.msgService.error(errorMsg);
    };
    /**
     * httpErrorResponse like
     * @param error 异常
     */
    FormErrorService.prototype.isHttpErrorResponse = function (error) {
        if (!error) {
            return false;
        }
        if (typeof error !== 'object') {
            return false;
        }
        if (error.name === 'HttpErrorResponse' && error.hasOwnProperty('status') && error.hasOwnProperty('error')) {
            return true;
        }
        if (error instanceof HttpErrorResponse) {
            return true;
        }
        return false;
    };
    FormErrorService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FormErrorService.ctorParameters = function () { return [
        { type: FormMessageService },
        { type: LanguageService, decorators: [{ type: Optional }] }
    ]; };
    return FormErrorService;
}());
export { FormErrorService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1lcnJvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2Vycm9yL2Zvcm0tZXJyb3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV6RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFeEQ7OztHQUdHO0FBQ0g7SUFHRSwwQkFDVSxVQUE4QixFQUNsQixlQUFnQztRQUQ1QyxlQUFVLEdBQVYsVUFBVSxDQUFvQjtRQUNsQixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7SUFFdEQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksb0NBQVMsR0FBaEIsVUFBaUIsT0FBZSxFQUFFLEtBQVU7UUFDMUMsbUJBQW1CO1FBQ25CLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUN6RSxPQUFPO1NBQ1I7UUFDRCxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDNUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzlCO2FBQU07WUFFTCx3QkFBd0I7WUFDeEIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2xDO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0ksMkNBQWdCLEdBQXZCLFVBQXdCLFNBQTRCO1FBQ2xELElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxPQUFPO1NBQ1I7UUFFRCxJQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWhFLFFBQVEsVUFBVSxFQUFFO1lBQ2xCLEtBQUssY0FBYyxDQUFDLFdBQVc7Z0JBQzdCLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7b0JBQzVCLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUN4QyxNQUFNO2lCQUNQO2dCQUVELElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQzdDLE1BQU07WUFDUixLQUFLLGNBQWMsQ0FBQyxXQUFXO2dCQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUM3QyxNQUFNO1lBQ1I7Z0JBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQyw2REFBNkQsQ0FBQyxDQUFDO1NBQ2xGO0lBQ0gsQ0FBQztJQUVPLDZDQUFrQixHQUExQixVQUEyQixRQUFnQjtRQUN6QyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2IsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNEOzs7T0FHRztJQUNLLDhDQUFtQixHQUEzQixVQUE0QixLQUFLO1FBQy9CLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDN0IsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxtQkFBbUIsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDekcsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELElBQUksS0FBSyxZQUFZLGlCQUFpQixFQUFFO1lBQ3RDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7O2dCQTdFRixVQUFVOzs7O2dCQVJGLGtCQUFrQjtnQkFDbEIsZUFBZSx1QkFZbkIsUUFBUTs7SUF5RWIsdUJBQUM7Q0FBQSxBQTlFRCxJQThFQztBQUVELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcblxyXG5pbXBvcnQgeyBGb3JtTWVzc2FnZVNlcnZpY2UgfSBmcm9tICcuLi9mb3JtLW1lc3NhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IExhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uL2xhbmd1YWcuc2VydmljZSc7XHJcbmltcG9ydCB7IEh0dHBVdGlsLCBIdHRwU3RhdHVzVHlwZSB9IGZyb20gJy4uL3V0aWwvaHR0cCc7XHJcblxyXG4vKipcclxuICog6KGo5Y2V6ZSZ6K+v5o+Q56S65pyN5YqhXHJcbiAqIEBkZXNjcmlwdGlvbiDnu5/kuIDlpITnkIbliY3lkI7nq6/lvILluLhcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgRm9ybUVycm9yU2VydmljZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBtc2dTZXJ2aWNlOiBGb3JtTWVzc2FnZVNlcnZpY2UsXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlvILluLjot6/nlLHmlrnms5VcclxuICAgKi9cclxuICBwdWJsaWMgZXhjZXB0aW9uKG1lc3NhZ2U6IHN0cmluZywgZXJyb3I6IGFueSkge1xyXG4gICAgLy8g6ZKI5a+5c2Vzc2lvbuWkseaViOWBmueJueauiuWkhOeQhlxyXG4gICAgaWYgKGVycm9yICYmIGVycm9yLmhhc093blByb3BlcnR5KCdleHBpcmVkJykgJiYgZXJyb3JbJ2V4cGlyZWQnXSA9PT0gdHJ1ZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoZXJyb3IgJiYgdGhpcy5pc0h0dHBFcnJvclJlc3BvbnNlKGVycm9yKSkge1xyXG4gICAgICB0aGlzLmh0dHBFcnJvckhhbmRsZXIoZXJyb3IpO1xyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICAgIC8vIHRvZG86IOe7huWMluW8guW4uOWkhOeQhuWQju+8jOe7p+e7reaLhuino+ivpeaWueazlVxyXG4gICAgICB0aGlzLmNvbW1vbkVycm9ySGFuZGxlcihtZXNzYWdlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGh0dHDor7fmsYLlvILluLjlpITnkIblmahcclxuICAgKi9cclxuICBwdWJsaWMgaHR0cEVycm9ySGFuZGxlcihodHRwRXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKTogdm9pZCB7XHJcbiAgICBpZiAoIWh0dHBFcnJvcikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc3RhdHVzVHlwZSA9IEh0dHBVdGlsLmdldEh0dHBTdGF0dXNUeXBlKGh0dHBFcnJvci5zdGF0dXMpO1xyXG5cclxuICAgIHN3aXRjaCAoc3RhdHVzVHlwZSkge1xyXG4gICAgICBjYXNlIEh0dHBTdGF0dXNUeXBlLkNsaWVudEVycm9yOlxyXG4gICAgICAgIGlmIChodHRwRXJyb3Iuc3RhdHVzID09PSA0MDEpIHtcclxuICAgICAgICAgIHRoaXMubXNnU2VydmljZS5odHRwNDAxRXJyb3IoaHR0cEVycm9yKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5tc2dTZXJ2aWNlLmh0dHBFcnJvckluQ2xpZW50KGh0dHBFcnJvcik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgSHR0cFN0YXR1c1R5cGUuU2VydmVyRXJyb3I6XHJcbiAgICAgICAgdGhpcy5tc2dTZXJ2aWNlLmh0dHBFcnJvckluU2VydmVyKGh0dHBFcnJvcik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHZXQgaW52YWxpZCBzdGF0dXMgY29kZSB3aGVuIHVzaW5nIGh0dHBFcnJvckhhbmRsZXIgbWV0aG9kLicpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjb21tb25FcnJvckhhbmRsZXIoZXJyb3JNc2c6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgaWYgKCFlcnJvck1zZykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLm1zZ1NlcnZpY2UuZXJyb3IoZXJyb3JNc2cpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBodHRwRXJyb3JSZXNwb25zZSBsaWtlXHJcbiAgICogQHBhcmFtIGVycm9yIOW8guW4uFxyXG4gICAqL1xyXG4gIHByaXZhdGUgaXNIdHRwRXJyb3JSZXNwb25zZShlcnJvcikge1xyXG4gICAgaWYgKCFlcnJvcikge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGVycm9yICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoZXJyb3IubmFtZSA9PT0gJ0h0dHBFcnJvclJlc3BvbnNlJyAmJiBlcnJvci5oYXNPd25Qcm9wZXJ0eSgnc3RhdHVzJykgJiYgZXJyb3IuaGFzT3duUHJvcGVydHkoJ2Vycm9yJykpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBIdHRwRXJyb3JSZXNwb25zZSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEZvcm1FcnJvclNlcnZpY2UgfTtcclxuXHJcbiJdfQ==