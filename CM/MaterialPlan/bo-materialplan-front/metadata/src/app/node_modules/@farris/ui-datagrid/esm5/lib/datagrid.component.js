/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:07
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-30 16:42:51
 * @QQ: 1055818239
 * @Version: v0.8.0
 * - 2021/04/07 增加 enableHighlightCell 属性，支持选中单元格高亮
 */
import { Component, Input, ViewEncapsulation, ContentChildren, QueryList, Output, EventEmitter, Renderer2, ChangeDetectionStrategy, ChangeDetectorRef, Injector, HostBinding, NgZone, ElementRef, ViewChild, ApplicationRef, TemplateRef, HostListener } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import ResizeObserver from 'resize-observer-polyfill';
import { of, BehaviorSubject } from 'rxjs';
import { ColumnFilterType } from './types/data-column';
import { DatagridFacadeService } from './services/datagrid-facade.service';
import { DatagridColumnDirective } from './components/columns/datagrid-column.directive';
import { IgnoreProperties } from './services/state';
import { DATAGRID_REST_SERVICEE } from './services/rest.service';
import { DatagridService } from './services/datagrid.service';
import { GRID_EDITORS, CELL_SELECTED_CLS, GRID_VALIDATORS, SIZE_TYPE, GRID_SETTINGS_SERVICE, GRID_SETTINGS_HTTP, CELL_EDITING_CLS, TR_PREFIX, TR_ID_PREFIX } from './types/constant';
import { DomHandler } from './services/domhandler';
import { Utils } from './utils/utils';
import { CommonUtils, DebugService, FarrisComponentInstanceService } from '@farris/ui-common';
import { ColumnFormatService } from '@farris/ui-common/column';
import { flatten } from 'lodash-es';
import { LocaleService } from '@farris/ui-locale';
import { DatagridColumnsHelper } from './services/datagrid-columns.helper';
import { DatagridFilterService } from './services/datagrid-filter.service';
import { debounceTime } from 'rxjs/operators';
import { SmartFilterToolbarComponent } from './components/filter-toolbar/smart-filter-toolbar.component';
import { DatagridSmartFilterService } from './services/datagrid-smart-filter.service';
import { IdService } from '@farris/ui-common';
import { SelectionModeService } from './services/selection-mode.service';
var DatagridComponent = /** @class */ (function () {
    function DatagridComponent(cd, el, inject, zone, dfs, dgs, app, domSanitizer, render2) {
        var _this = this;
        this.cd = cd;
        this.el = el;
        this.inject = inject;
        this.zone = zone;
        this.dfs = dfs;
        this.dgs = dgs;
        this.app = app;
        this.domSanitizer = domSanitizer;
        this.render2 = render2;
        this.auther = "Lucas Huang - QQ:1055818239";
        this.version = '0.8.x';
        this.__component_type__ = 'DatagridComponent';
        /**
         * 启用性能优化版，默认为 false
         */
        this.fast = false;
        this.pos = 'relative';
        this.hostCls = false;
        /**
         * 使用主题
         */
        this.useThemes = true;
        // 用于存储用户个性化设置
        this.id = '';
        /**
         * 自动高度 - 启用此属性后，就是一个普普通通的 table , 不能编辑，不能排序，不能分页，不能... 就是一凡胎
         */
        this.useHtmlTable = false;
        /**
         * 自动高度
         */
        this.autoHeight = false;
        /**
         * 配合 autoHeight 一起使用，当此值大于0 时，且autoHeight 为true时，数据总行高达到最大高度时，将停止自动高度并使用内部滚动条
         */
        this.maxHeight = 0;
        /**
         * 显示边框
         */
        this.showBorder = false;
        /**
         * 启用斑马线
         */
        this.striped = true;
        /**
         * 宽度
         */
        this.width = 800;
        /**
         * 高度
         */
        this.height = 300;
        /**
         * 显示表头
         */
        this.showHeader = true;
        /**
         * 表头-单行高度
         */
        this.headerHeight = 35;
        /**
         * 表头折行
         */
        this.headerWrap = false;
        /**
         * 显示页脚
         */
        this.showFooter = false;
        /**
         * 页脚默认行高
         */
        this.footerHeight = 29;
        /**
         * 页脚数据来源, 默认为 client
         */
        this.footerDataFrom = 'client';
        /**
         * 合计行显示位置，默认为底部
         */
        this.footerPosition = 'bottom';
        /**
         * 行高
         */
        this.rowHeight = 29;
        /**
         * 设置grid 行高尺寸
         * sm: 小，md: 正常， lg: 大，xl: 超大
         */
        this._sizeType = 'sm';
        /**
         * 填充容器
         */
        this._fit = false;
        /**
         * 如果为真，则自动展开/收缩列的大小以适合网格宽度并防止水平滚动。
         */
        this._fitColumns = false;
        /**
         * 根据grid的宽度自动调整列宽度
         */
        this._autoFitColumns = false;
        /**
         * 禁用
         */
        this.disabled = false;
        /**
         * 滚动条显示模式，默认为 auto
         */
        this.scrollBarShowMode = 'auto';
        this.scrollBarOptions = {
            width: 18,
            height: 18
        };
        /**
         * 当滚动一直显示时，是否显示两端的箭头
         */
        this.showScrollArrow = false;
        /**
         * 可拖动列设置列宽
         */
        this.resizeColumn = true;
        /**
         * 显示行号
         */
        this.showLineNumber = false;
        /**
         * 行号表头字符
         */
        this.lineNumberTitle = '';
        /**
         * 行号宽度
         */
        this.lineNumberWidth = 36;
        /**
         * 鼠标滑过效果开关，默认开启
         */
        this.rowHover = true;
        /**
         * 允许编辑时，单击进入编辑状态; false为双击进入编辑
         */
        this.clickToEdit = true;
        this._lockPagination = false;
        /**
         * 分页信息
         */
        this.__pagination = true;
        /**
         * 分页组件自定义内容区模板
         */
        this.pagerContentTemplate = null;
        /**
         * 分页条对齐展示方式， left, right, center   默认为 right
         */
        this.pagerPos = 'right';
        /**
         * 分页条显示模式， default, simple
         */
        this.pagerViewMode = 'default';
        /**
         * 启用服务器端分页
         */
        this.pagerOnServer = true;
        /**
         * 每页记录数
         */
        this.pageList = [10, 20, 30, 50, 100];
        /**
         * 当前页码
         */
        this.pageIndex = 1;
        /**
         * 每页记录数
         */
        this.pageSize = 20;
        /**
         * 分页区高度
         */
        this.pagerHeight = 56;
        /**
         * 显示每页记录数
         */
        this.showPageList = false;
        /**
         * 显示分页信息
         */
        this.showPageInfo = true;
        /**
         * 显示页码
         */
        this.showPageNumber = true;
        /**
         * 显示页码最大数量
         */
        this.pagerLabelSize = 7;
        /**
         * 显示转至指定页码输入框
         */
        this.showGotoInput = false;
        /**
         * 启用跨页多选
         */
        this.enableMorePageSelect = false;
        /**
         * 显示选中列表
         */
        this.showSelectedList = false;
        /**
         * 单元格信息提示延时，默认 1000ms
         */
        this.cellTipTimer = 1000;
        /**
         * grid 内部处理分页状态
         */
        this.controlPaginationState = true;
        /**
         * 总记录数
         */
        this._total = 0;
        /**
         * 启用选中行
         */
        this.enableSelectRow = true;
        /**
         * 启用多选
         */
        this.multiSelect = false;
        /**
         * 启用多选时，是否显示checkbox
         */
        this.showCheckbox = false;
        /**
         * 显示全选checkbox
         */
        this.showAllCheckbox = false;
        /**
         * 当启用多选时，点击行选中，只允许且只有一行被选中。, 默认为 true
         */
        this.onlySelectSelf = true;
        /**
         * 启用多选且显示checkbox, 选中行同时钩选, 默认为 false
         */
        this.checkOnSelect = false;
        /**
         * 启用多选且显示checkbox, 钩选后选中行, 默认为 false
         */
        this.selectOnCheck = false;
        /**
         * 行选中模式，custom: 自定义， default: 仿Windows资源管理器选中
         * 注意： 此属性仅多选，显示复选框有效
         * 默认值： custom
         * addTime: 2021-12-14 by LUCAS HUANG
         */
        this.selectionMode = 'custom';
        /**
         * 单击行选中后，在次点击不会被取消选中状态;
         */
        this.keepSelect = true;
        /**
         * 当数据为空时，使用空白显示，且高度为一行的高度。 默认为 false
         */
        this.useBlankWhenDataIsEmpty = false;
        /**
         * 数据为空时的高度
         */
        this.emptyDataHeight = 240;
        /**
         * 空数据时，显示的提示文本
         */
        this.emptyMessage = '暂无数据';
        /**
         * 无数据时的模板
         */
        this.emptyTemplate = null;
        /**
         * 主键字段
         */
        this.idField = 'id';
        /**
         * 页脚数据
         */
        this._footerData = of([]);
        /**
         * 验证不通过时可以结束编辑
         */
        this.endEditByInvalid = true;
        /**
         * 列集合
         */
        this._columns = [];
        this._fields = [];
        /**
         * 禁止数据折行，默认值：true,即在一行显示，不折行。
         */
        this.nowrap = true;
        /**
         * 虚拟加载
         */
        this.virtualized = false;
        /**
         * 是否启用异步加载数据
         */
        this.virtualizedAsyncLoad = false;
        /**
         * 编辑方式： row(整行编辑)、cell(单元格编辑)；默认为 row
         */
        this.editMode = 'row';
        /**
         * 编辑状态
         */
        this._editable = false;
        /**
         * 启用可编辑单元格样式。
         */
        this.enableEditCellStyle = false;
        /**
         * 进入编辑状态时选是否选中文本；默认为 false
         * 仅文本框支持此特性
         */
        this.selectOnEditing = false;
        /**
         * 编辑器高度
         */
        this.editorHeight = 30;
        /**
         * 启用远端排序
         */
        this.remoteSort = false;
        this.hoverRowCls = 'f-datagrid-row-hover';
        /**
         * 允许拖拽列顺序
         */
        this.enableDragColumn = false;
        /**
         * 行分组面板高度，默认 50PX
         */
        this.rowGroupPanelHeight = 50;
        /**
         * 启用分组行
         */
        this.groupRows = false;
        /**
         * 启用行分组合计行
         */
        this.groupFooter = false;
        /**
         * 分组行是否展开，默认为 展开
         */
        this.expandGroupRows = true;
        /**
         * 合计数据显示位置
         * inGroupRow: 与分组在同一行，分别相关合计字段对齐
         * groupFooterRow: 在分组数据最后增加一行
         * 默认为 groupFooterRow
         */
        this.groupSummaryPosition = 'groupFooterRow';
        /**
         * 分组信息合并列数
         * 默认为 1
         */
        this.groupCellColSpan = 1;
        /**
         * 分组字段名称, 多字段分组以英文逗号分隔
         */
        this._groupField = '';
        this.groupFields$ = new BehaviorSubject([]);
        /**
         * 显示分组列
         */
        this.showGroupColumn = true;
        /**
         * 显示分组列面板。默认为 false
         */
        this._showRowGroupPanel = false;
        /**
         * 双击表头适应内容宽度
         */
        this.AutoColumnWidthUseDblclick = true;
        /**
         * 使用内部过滤器; 默认为 false
         */
        this.useDefaultFilter = false;
        /**
         * 过滤图标与排序图标合并，此属性与 enableFilterRow 互斥
         */
        this.enableSmartFilter = false;
        /**
         * 显示过滤行
         */
        this.enableFilterRow = false;
        /**
         * 服务器端过滤
         */
        this.remoteFilter = false;
        /**
         * 启用过滤条件显示条
         */
        this.showFilterBar = false;
        /**
         * 过滤条件汇总条高度，默认 32px
         */
        this.filterBarHeight = 32;
        this.filterRowHeight = 40;
        this.conditions = {};
        this.selectValue = null;
        this.checkValues = [];
        this.selectValues = [];
        /**
         * 合并单元格；先支持纵向合并
         */
        this.mergeCell = false;
        this.mergeFields = [];
        /**
         * 合并单元格数据启用客户端排序
         */
        this.enableClientSortForMergeCell = false;
        /**
         * 使用高级控制面板(列设置)
         */
        this.useControlPanel = false;
        /**
         * 启用简洁控制面板模式。默认为 false
         */
        this.enableSimpleMode = false;
        /**
         * 点击列设置图标，默认打开的控制面板
         */
        this.controlPanelMode = 'advanced';
        /**
         * 启用列设置方案
         */
        this.enableScheme = false;
        /**
         * 系统预制方案名称
         */
        this.defaultSchemeName = '系统预制';
        /**
         * 阻止click 事件冒泡
         */
        this.stopPropagation = true;
        /**
         * (202105 弃用)
         * 点击单元格进行编辑状态时，关闭其他Grid的编辑器。默认 false，
         * 多个列表存时，仅有一个列表中有编辑状态，其他列表结束编辑
         */
        this.closeOtherGridEditor = false;
        /**
         * 当数据源为空时，清空已选记录
         */
        this.clearSelectionsWhenDataIsEmpty = true;
        /**
         * 启用右键菜单，默认为 false
         */
        this.enableContextMenu = false;
        /**
         * 右键菜单数据
         */
        this.contextMenus = null;
        this.selectValueChange = new EventEmitter();
        this.checkValuesChange = new EventEmitter();
        this.selectValuesChange = new EventEmitter();
        this.beginEdit = new EventEmitter();
        this.endEdit = new EventEmitter();
        this.cancelEdited = new EventEmitter();
        this.scrollY = new EventEmitter();
        this.pageSizeChanged = new EventEmitter();
        this.pageChanged = new EventEmitter();
        this.loadSuccess = new EventEmitter();
        this.filterChanged = new EventEmitter();
        /**
         * 启用选中单元格高亮显示
         */
        this.enableHighlightCell = false;
        /**
         * 选中的数据始终从数据源中获取. 默认为 false
         */
        this.checkedRowsDataFromSource = false;
        /**
         * 当前单元格为只读时，使用tab 键跳到下个单元格时，是否允许进入编辑状态，默认为 false;
         * 默认情况下，当前单元格只读，按TAB跳到下个CELL 时，选中CELL ，回车进入编辑。
         * 开启后，下个单元格自动进入编辑状态。
         */
        this.editcellWhenTabKeydwon = false;
        /**
         * 单元格点击前事件
         */
        this.beforeClickCell = new EventEmitter();
        this.dblclickRow = new EventEmitter();
        this.selectChanged = new EventEmitter();
        this.unSelect = new EventEmitter();
        this.selectAll = new EventEmitter();
        this.unSelectAll = new EventEmitter();
        /**
         * 异步请求虚拟加载
         */
        this.scrollYLoad = new EventEmitter();
        this.checked = new EventEmitter();
        this.unChecked = new EventEmitter();
        this.checkAll = new EventEmitter();
        this.unCheckAll = new EventEmitter();
        this.checkedChange = new EventEmitter();
        this.columnSorted = new EventEmitter();
        this.rowClick = new EventEmitter();
        this.rowAppended = new EventEmitter();
        this.rowDeleted = new EventEmitter();
        this.rowUpdated = new EventEmitter();
        this.dataChange = new EventEmitter();
        /**
         * 最后一行的最后单元格回车处理事件
         */
        this.lastCellEnterHandler = new EventEmitter();
        /**
         * 分组字段变化后
         */
        this.groupFieldChange = new EventEmitter();
        /**
         * 拖动列改变列显示位置后触发
         */
        this.columnMoved = new EventEmitter();
        /**
         * 单元格点击事件
         */
        this.cellClick = new EventEmitter();
        this._loading = false;
        this._selectedRow = null;
        this.ds = {
            index: 0,
            rows: [],
            top: 0,
            bottom: 0,
            scrolling: false // 是否由滚动条触发
        };
        this.pagerOpts = {};
        this.editors = {};
        this.validators = [];
        this.footerWidth = 0;
        this.clickDelay = 150;
        this.resizeColumnInfo = {
            proxyLineEdge: 0,
            startWidth: 0,
            startX: 0,
            left: 0
        };
        this.ro = null;
        this.subscriptions = [];
        this.realHeaderHeight = 0;
        // 弹窗中使用时，窗口点击事件处理
        this.modalClickEvent = null;
        this.pending = false;
        this.scrollInstance = null;
        // 合并单元辅助信息
        this.mergeCellInfo = {};
        this.ignoreTarget = ['INPUT', 'SELECT', 'TEXTAREA'];
        this.clientFilterService = null;
        // DatagridSettingsService;
        /* 控制列字段名称: _datagrid-setting-control_ */
        this.ControlPanelFeild = '_datagrid-setting-control_';
        this._isResized = false;
        this.gridSize = { width: this.width + 'px', height: this.height + 'px' };
        // 客户端过滤时，是否过滤行发生变化
        this.clientFilterChanged = false;
        // style's ID
        this.styleSheetId = '';
        this.groupRowPanelPlaceholder = '';
        this.commonUtils = null;
        this.smartFilterService = null;
        this.smartFilterResult = { controlData: [], conditions: [] };
        this.smartFilterBarHeight = 32;
        this._active_datagrid_cls = 'datagrid-active';
        this._blured_datagrid_cls = 'datagrid-blurred';
        // 自定义grid样式，列表初始后，会添加一个自定义名称的样式
        this._custom_datagrid_cls = 'datagrid';
        // 焦点行索引，每次行点击后更新
        this.focusRowIndex = -1;
        this.documentBodyMouseDown = null;
        this.farrisInstances = null;
        this.currentPagerData = [];
        this.resizeTimer = null;
        this.debugSer = null;
        this.DATA_CHANGED_TIMER = null;
        this.formValidations = null;
        this.trackByRows = (/**
         * @param {?} index
         * @param {?} row
         * @return {?}
         */
        function (index, row) {
            if (row) {
                return row[_this.idField] || index;
            }
            return index;
        });
        this.onDocumentMouseDown = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var dgrid = event.target.closest('.f-datagrid');
            if (_this.pending) {
                return false;
            }
            if (!dgrid) {
                _this.activeDataGrid(false);
            }
            else {
                if (dgrid.id === _this.id) {
                    return;
                }
            }
            if (_this.currentCell) {
                if (Utils.hasDialogOpen()) {
                    /** @type {?} */
                    var indlg = _this.inDialog();
                    /** @type {?} */
                    var currentTargetInDialog = event.target.closest('.modal-body');
                    if (indlg && currentTargetInDialog) {
                        if (indlg != currentTargetInDialog) {
                            return;
                        }
                    }
                    else {
                        return;
                    }
                }
                if (!_this.currentCell.cellElement) {
                    return;
                }
                if (_this.currentCell.isEditing) {
                    /** @type {?} */
                    var zoneClick_1 = event.target['__zone_symbol__clickfalse'];
                    /** @type {?} */
                    var isBeBtn_1 = event.target.closest('.bedesigner-toolbar');
                    /** @type {?} */
                    var isOldBeBtn_1 = event.target.className.indexOf('beEleGridButton') > -1;
                    /** @type {?} */
                    var disableClickEvent_1 = zoneClick_1 && zoneClick_1.length && (event.target.closest('.f-section-in-mainsubcard') || isOldBeBtn_1 || isBeBtn_1 || event.target.closest('.datagrid-toolbars'));
                    if (disableClickEvent_1 && !dgrid) {
                        event.target.style.pointerEvents = 'none';
                        event.stopPropagation();
                    }
                    /** @type {?} */
                    var _timer = disableClickEvent_1 ? ((isBeBtn_1 || isOldBeBtn_1) ? 50 : 200) : 0;
                    /** @type {?} */
                    var stopEditingRowIndex_1 = _this.currentCell.rowIndex;
                    _this.currentCell.cellElement.closeEdit().pipe(debounceTime(_timer)).subscribe((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) {
                        if (_this.currentCell && stopEditingRowIndex_1 !== _this.currentCell.rowIndex) {
                            return;
                        }
                        if (f) {
                            if (_this.currentCell && _this.currentCell.cellElement) {
                                DomHandler.removeClass(_this.currentCell.cellElement, CELL_SELECTED_CLS);
                                DomHandler.removeClass(_this.currentCell.cellElement, CELL_EDITING_CLS);
                            }
                            _this.dfs.cancelSelectCell();
                            _this.unbindDocumentEditListener();
                            _this.currentCell = null;
                            if (disableClickEvent_1) {
                                zoneClick_1.forEach((/**
                                 * @param {?} n
                                 * @return {?}
                                 */
                                function (n) {
                                    n.callback(event);
                                }));
                                event.target.style.pointerEvents = 'auto';
                                if (isBeBtn_1 || isOldBeBtn_1) {
                                    _this.app.tick();
                                }
                            }
                        }
                    }));
                }
            }
        });
        this.styleSheetId = 'DATAGRID-' + Utils.uuid();
        this.localeService = this.inject.get(LocaleService);
        this.restService = this.inject.get(DATAGRID_REST_SERVICEE, null);
        this.colFormatSer = this.inject.get(ColumnFormatService);
        this.commonUtils = this.inject.get(CommonUtils, null);
        this.clientFilterService = new DatagridFilterService(dfs, this.localeService, inject);
        this.farrisInstances = this.inject.get(FarrisComponentInstanceService, null);
        this.debugSer = this.inject.get(DebugService, null);
        if (!this.debugSer) {
            this.debugSer = new DebugService();
        }
        if (this.debugSer.useDebugMode) {
            this.debugSer.useDebugMode();
        }
        this.smartFilterService = this.inject.get(DatagridSmartFilterService, null);
        this.idService = this.inject.get(IdService, null);
        this.dfs.localId = this.localeService.localeId;
        this.settingService = this.inject.get(GRID_SETTINGS_SERVICE, null);
        if (this.settingService) {
            /** @type {?} */
            var settingsHttp = this.inject.get(GRID_SETTINGS_HTTP, null);
            this.settingService.httpRestService = settingsHttp;
        }
        /** @type {?} */
        var dataSubscription = this.dfs.data$.subscribe((/**
         * @param {?} dataSource
         * @return {?}
         */
        function (dataSource) {
            _this.cleanDom();
            /** @type {?} */
            var ds = tslib_1.__assign({}, dataSource);
            if (_this.conditions && Object.keys(_this.conditions).length && !_this.remoteFilter && _this.useDefaultFilter) {
                ds.rows = _this.clientFilterService.executeFilter(ds.rows, _this.conditions);
            }
            _this.ds = ds;
            if (_this.ds.rows && _this.ds.rows.length) {
                _this.data = _this.dfs.getData();
                if (_this.mergeCell && _this.mergeFields && _this.mergeFields.length) {
                    _this.mergeCellInfo = _this.dgs.getMergeCellInfo3(_this.ds.rows, tslib_1.__spread(_this.mergeFields));
                }
                _this.setPagerTotal();
                _this.loadSuccess.emit(_this.ds.rows);
            }
            else {
                _this.data = [];
                _this.currentCell = null;
                if (_this.clearSelectionsWhenDataIsEmpty) {
                    _this.clearAll();
                }
            }
            if (!_this.ds.scrolling) {
                _this.updateFooterData();
            }
            // 性能优化
            _this.cd.detectChanges();
            if (_this.DATA_CHANGED_TIMER) {
                clearTimeout(_this.DATA_CHANGED_TIMER);
            }
            _this.DATA_CHANGED_TIMER = setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.autoHeight && _this.maxHeight) {
                    if (_this.maxHeight < 55) {
                        _this.maxHeight = 60;
                    }
                    /** @type {?} */
                    var gridContainerEl = _this.el.nativeElement.parentElement;
                    if (gridContainerEl.nodeName !== 'DIV') {
                        _this.writeConsole('Datagrid父容器必须为DIV。');
                    }
                    else {
                        gridContainerEl.style.height = 'unset';
                        gridContainerEl.style.maxHeight = _this.maxHeight + 'px';
                        gridContainerEl.style.minHeight = _this.emptyDataHeight + _this.realHeaderHeight + "px";
                    }
                }
                if (_this.useBlankWhenDataIsEmpty) {
                    _this.calculateGridSize(_this.fit);
                }
            }), 100);
        }));
        this.subscriptions.push(dataSubscription);
        /** @type {?} */
        var columnGroupSubscription = this.dfs.columnGroup$.pipe(debounceTime(60)).subscribe((/**
         * @param {?} cg
         * @return {?}
         */
        function (cg) {
            if (cg) {
                _this.colGroup = cg;
                _this.footerWidth = cg.totalWidth;
                _this.cd.detectChanges();
            }
        }));
        this.subscriptions.push(columnGroupSubscription);
        this.subscriptions.push(this.dfs.gridSize$.subscribe((/**
         * @param {?} cg
         * @return {?}
         */
        function (cg) {
            if (cg && cg.columnsGroup) {
                _this.colGroup = cg.columnsGroup;
                _this.cd.detectChanges();
            }
        })));
        this.initEditorAndValidator();
        /** @type {?} */
        var currentCellSubscription = this.dfs.currentCell$.subscribe((/**
         * @param {?} cell
         * @return {?}
         */
        function (cell) {
            _this.currentCell = cell;
            if (cell && cell.cellRef) {
                cell.cellRef.isEditing = cell.isEditing;
            }
            _this.unbindMoveSelectRowEvent();
            _this.bindDocumentEditListener();
        }));
        this.dfs.selectRow$.subscribe((/**
         * @param {?} sr
         * @return {?}
         */
        function (sr) {
            if (!_this.currentCell) {
                _this.bindDocumentMoveSelectRowEvent();
            }
            _this.selectedRow = sr;
            // this.cd.detectChanges();
            // this.selectChanged.emit(sr);
        }));
        this.subscriptions.push(currentCellSubscription);
        DatagridColumnsHelper.gridInstance = this;
        /** @type {?} */
        var filterChangedSubscription = this.dgs.onFilterChanged.subscribe((/**
         * @param {?} conditions
         * @return {?}
         */
        function (conditions) {
            // 更新缓存过滤条件
            _this.conditions = conditions;
            _this.clientFilterChanged = true;
            _this.filterData(_this.conditions);
        }));
        this.subscriptions.push(filterChangedSubscription);
        // this.initPaginationOptions();
        /** @type {?} */
        var footerDataSubscription = this.dgs.refreshFooterData.subscribe((/**
         * @return {?}
         */
        function () {
            _this.updateFooterData();
            // this.cd.detectChanges();
        }));
        this.subscriptions.push(footerDataSubscription);
        this.dgs.commonUtils = this.commonUtils;
        this.dgs.focusRowChanged.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e) {
                _this.focusRowIndex = e.rowIndex;
            }
        }));
    }
    Object.defineProperty(DatagridComponent.prototype, "autoHeightCls", {
        get: /**
         * @return {?}
         */
        function () {
            return this.autoHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "sizeType", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sizeType;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._sizeType = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "fit", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fit;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._fit = val;
            this.hostCls = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "fitColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fitColumns;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (this._fitColumns !== val) {
                this._fitColumns = val;
                if (val) {
                    this.setFitColumns(val);
                }
                else {
                    this.dfs.fitColumns(false);
                    this.dfs.initColumns(false, true);
                    this.restituteColumnsSize();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "autoFitColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._autoFitColumns;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._autoFitColumns = val;
            this.dfs.updateProperty('autoFitColumns', val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "lockPagination", {
        /** 锁定分页条，锁定后页码点击无效 */
        get: /**
         * 锁定分页条，锁定后页码点击无效
         * @return {?}
         */
        function () {
            return this._lockPagination;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._lockPagination = val;
            if (this.dgPager) {
                this.dgPager[val ? 'lock' : 'unlock']();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "pagination", {
        get: /**
         * @return {?}
         */
        function () {
            return this.__pagination;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (this.__pagination !== val) {
                this.__pagination = val;
                this.dfs.updateProperty('pagination', val);
                this.dgs.showGridHeader.emit();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "total", {
        get: /**
         * @return {?}
         */
        function () {
            return this._total;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._total = val;
            this.pagerOpts.totalItems = val;
            if (!this.pagination) {
                this.pagerOpts.itemsPerPage = val;
            }
            this.dfs.setTotal(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "footerData", {
        get: /**
         * @return {?}
         */
        function () {
            return this._footerData;
        },
        set: /**
         * @param {?} rows
         * @return {?}
         */
        function (rows) {
            if (rows && rows.subscribe) {
                this._footerData = rows;
            }
            else {
                this._footerData = of(rows || []);
            }
            if (rows) {
                this.setFooterHeight();
            }
            this.cd.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columns;
        },
        set: /**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            this._columns = this.correctColumns(values);
            this.dfs.updateProperty('columns', this._columns);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "fields", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fields;
        },
        set: /**
         * @param {?} cols
         * @return {?}
         */
        function (cols) {
            this._fields = cols;
            this.columns = cols;
            if (this.data) {
                this.columnsChanged(false, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "editable", {
        get: /**
         * @return {?}
         */
        function () {
            return this._editable;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (this._editable !== v) {
                this._editable = v;
                this.cd.detectChanges();
                this.dgs.updateEmptyStyle();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "groupField", {
        get: /**
         * @return {?}
         */
        function () {
            return this._groupField;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._groupField = val || '';
            if (Array.isArray(this._groupField)) {
                this._groupField = this._groupField.join(',');
            }
            if (this._groupField) {
                this.groupFields$.next(this._groupField.split(','));
            }
            else {
                this.groupFields$.next([]);
            }
            this.dfs.updateProperty('groupField', this._groupField);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "showRowGroupPanel", {
        get: /**
         * @return {?}
         */
        function () {
            return this.groupRows && this._showRowGroupPanel;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._showRowGroupPanel = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "loading", {
        get: /**
         * @return {?}
         */
        function () {
            return this._loading;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._loading = val;
            if (!this.cd['destroyed']) {
                this.cd.detectChanges();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "selections", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dfs.getSelections();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "checkeds", {
        get: /**
         * @return {?}
         */
        function () {
            return this.checkedRows;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "checkedRows", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var chkeds = this.dfs.getCheckeds();
            if (this.enableMorePageSelect) {
                if (chkeds && chkeds.length) {
                    if (!this.checkedRowsDataFromSource) {
                        return tslib_1.__spread(chkeds);
                    }
                    // 从数据源中获取最新数据
                    return chkeds.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        /** @type {?} */
                        var d = _this.dfs.findRow(n.id);
                        if (d) {
                            n.data = d.data;
                        }
                        return n;
                    }));
                }
            }
            else {
                if (this.data && this.data.length) {
                    /** @type {?} */
                    var temp_1 = this.data.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n[_this.idField]; }));
                    if (!this.checkedRowsDataFromSource) {
                        return chkeds.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return temp_1.includes(n.id); }));
                    }
                    // 从数据源中获取最新数据
                    return chkeds.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return temp_1.includes(n.id); })).map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        /** @type {?} */
                        var d = _this.dfs.findRow(n.id);
                        if (d) {
                            n.data = d.data;
                        }
                        return n;
                    }));
                }
            }
            return [];
        },
        set: /**
         * @param {?} rows
         * @return {?}
         */
        function (rows) {
            var _this = this;
            if (rows && rows.length) {
                rows = rows.map((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) {
                    if (r.data) {
                        return r;
                    }
                    return {
                        id: r[_this.idField],
                        data: r
                    };
                }));
            }
            this.dfs.updateProperty('checkedRows', rows || []);
            this.initSelectOrChecked();
            this.cd.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridComponent.prototype, "selectedRow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedRow;
        },
        set: /**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            if (row) {
                if (this.selectValue != row.id) {
                    this._selectedRow = row;
                    this.selectValue = row.id;
                    this.selectValueChange.emit(row.id);
                    this.selectChanged.emit(row);
                }
            }
            else {
                this.unSelect.emit(this._selectedRow);
                this.selectValue = null;
                this.selectValueChange.emit('');
                this._selectedRow = null;
            }
            // this.cd.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} $data
     * @return {?}
     */
    DatagridComponent.prototype.setCurrentPagerData = /**
     * @param {?} $data
     * @return {?}
     */
    function ($data) {
        this.currentPagerData = $data;
    };
    /**
     * @param {?} msg
     * @param {?=} type
     * @return {?}
     */
    DatagridComponent.prototype.writeConsole = /**
     * @param {?} msg
     * @param {?=} type
     * @return {?}
     */
    function (msg, type) {
        if (type === void 0) { type = 'warn'; }
        if (this.debugSer) {
            if (this.debugSer[type]) {
                this.debugSer[type](msg);
            }
            else {
                console[type](msg);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.updateFooterData = /**
     * @private
     * @return {?}
     */
    function () {
        if ((this.showFooter || this.pagerContentTemplate) && this.footerDataFrom === 'client') {
            this.footerData = of(this.dfs.getFooterData(this.data));
        }
    };
    //#region Ng Event
    //#region Ng Event
    /**
     * @return {?}
     */
    DatagridComponent.prototype.ngDoCheck = 
    //#region Ng Event
    /**
     * @return {?}
     */
    function () {
        // if (!this.checkValues) {
        //     this.checkValues = [];
        // }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.sms = new SelectionModeService(this);
        this.checkFilterStyle();
        if (this.useThemes) {
            this._checkSize();
        }
        this.checkOptions();
        this.groupRowPanelPlaceholder = this.localeService.getValue('datagrid.groupRow.tips');
        // this._flatColumns();
        // this.setHeaderHeight();
        if (this.smartFilterService) {
            if (this.enableSmartFilter && this.showFilterBar) {
                if (this.smartFilterResult && this.smartFilterResult.controlData && this.smartFilterResult.controlData.length) {
                    this.filterBarHeight = this.smartFilterBarHeight;
                }
                else {
                    this.filterBarHeight = 0;
                }
            }
            this.smartFilterService.filterChanged.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (!_this.smartFilterResult && !e) {
                    return;
                }
                if (JSON.stringify(_this.smartFilterResult) !== JSON.stringify(e)) {
                    _this.smartFilterResult = e;
                    _this.clientFilterChanged = true;
                    _this.filterData(e.conditions);
                    if (!_this.smartFilterResult || (_this.smartFilterResult.controlData && !_this.smartFilterResult.controlData.length)) {
                        _this.onFilterBarResize(0);
                    }
                    else {
                        if (!_this.filterBarHeight) {
                            _this.onFilterBarResize(_this.smartFilterBarHeight);
                        }
                    }
                }
            }));
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // 创建自定义style 容器
        // 
        var _this = this;
        this.setHeaderHeight();
        this.setPagerHeight();
        this.initBeforeEvents();
        if (this.fit) {
            this.setGridNewSizeWhenFit();
        }
        this.initState();
        if (this.el && this.farrisInstances) {
            this.farrisInstances.add(this.el.nativeElement, this);
        }
        if (!this.data || !this.data.length) {
            this.fetchData(1, this.pageSize).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                if (!res) {
                    return;
                }
                _this.total = res.total;
                if (res.footer) {
                    _this.footerData = res.footer;
                }
                _this.loadData(res.items);
            }));
        }
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.render2.addClass(_this.dgContainer.nativeElement, _this._custom_datagrid_cls);
            _this.ro = new ResizeObserver((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                /** @type {?} */
                var target = (/** @type {?} */ (e[0].target));
                if (target.style.display === 'none') {
                    return;
                }
                /** @type {?} */
                var _w = e[0].contentRect.width;
                if (!_w) {
                    return;
                }
                /** @type {?} */
                var _h = e[0].contentRect.height;
                /** @type {?} */
                var _floowW = Math.floor(_w);
                /** @type {?} */
                var _floorH = Math.floor(_h);
                /** @type {?} */
                var _roundW = Math.round(_w);
                /** @type {?} */
                var _roundH = Math.round(_h);
                /** @type {?} */
                var _ceilW = Math.ceil(_w);
                /** @type {?} */
                var _ceilH = Math.ceil(_h);
                if ((_this.width === _floowW || _this.width === _roundW || _this.width === _ceilW) && (_this.height === _floorH || _this.height === _roundH || _this.height === _ceilH)) {
                    _this.dgs.restoreScrollbarPosition();
                    return;
                }
                if (_this.resizeTimer) {
                    clearTimeout(_this.resizeTimer);
                }
                _this.resizeTimer = setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.calculateGridSize(_this.fit);
                }), 100);
            }));
            _this.ro.observe(_this.el.nativeElement.parentElement);
            document.body.removeEventListener('mousedown', _this.documentBodyMouseDown, true);
            document.body.addEventListener('mousedown', _this.documentBodyMouseDown = (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (!_this.isEditing()) {
                    return;
                }
                /** @type {?} */
                var target = (/** @type {?} */ (e.target));
                if (target.closest('td.f-datagrid-cell') ||
                    target.closest('.date-overlay-container') ||
                    target.closest('.time-picker-overlay') ||
                    target.closest('.language-textbox-panel') ||
                    target.closest('.farris-notify') ||
                    target.closest('.comboPanel')) {
                    return;
                }
                _this.onDocumentMouseDown(e);
            }), true);
        }));
        if (this.showFooter) {
            if (this.footerTemplate) {
                /** @type {?} */
                var footerDom = this.el.nativeElement.querySelector('.f-datagrid-footer');
                if (footerDom) {
                    this.footerHeight = this.el.nativeElement.querySelector('.f-datagrid-footer').offsetHeight;
                }
            }
        }
        if (this.fit) {
            if (this.el.nativeElement.parentElement) {
                this.el.nativeElement.parentElement.style.position = 'relative';
            }
            this.calculateGridSize(this.fit);
        }
        // 检查是否启用仿windows资源管理器中的多选模式
        if (this.selectionMode && this.selectionMode === 'default' && this.multiSelect) {
            this.sms.enableWindowsSelectionMode();
        }
        this.setCellStyle();
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this.dgColumns && this.dgColumns.length) {
            this.columns = this.dgColumns.map((/**
             * @param {?} dgc
             * @return {?}
             */
            function (dgc) {
                return tslib_1.__assign({}, dgc);
            }));
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatagridComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.data && !changes.data.isFirstChange()) {
            this.dfs.loadData(changes.data.currentValue);
            this.dgs.dataSourceChanged();
        }
        if (changes.showAllCheckbox !== undefined && !changes.showAllCheckbox.isFirstChange()) {
            if (changes.showAllCheckbox.currentValue != changes.showAllCheckbox.previousValue) {
                this.columnsChanged(false);
            }
        }
        if (changes.showCheckbox !== undefined && !changes.showCheckbox.isFirstChange()) {
            this.dfs.showCheckbox(changes.showCheckbox.currentValue);
        }
        if (changes.showLineNumber !== undefined && !changes.showLineNumber.isFirstChange()) {
            this.dfs.showLineNumber(changes.showLineNumber.currentValue);
        }
        if (changes.multiSelect !== undefined && !changes.multiSelect.isFirstChange()) {
            this.dfs.setMultiSelect(changes.multiSelect.currentValue);
        }
        if (changes.checkOnSelect !== undefined && !changes.checkOnSelect.isFirstChange()) {
            this.dfs.setCheckOnSelect(changes.checkOnSelect.currentValue);
        }
        if (changes.selectOnCheck !== undefined && !changes.selectOnCheck.isFirstChange()) {
            this.dfs.setSelectOnCheck(changes.selectOnCheck.currentValue);
        }
        if (changes.onlySelectSelf !== undefined && !changes.onlySelectSelf.isFirstChange()) {
            this.dfs.updateProperty('onlySelectSelf', changes.onlySelectSelf.currentValue);
        }
        if (changes.keepSelect !== undefined && !changes.keepSelect.isFirstChange()) {
            this.dfs.updateProperty('keepSelect', changes.keepSelect.currentValue);
        }
        if (changes.headerWrap !== undefined && !changes.headerWrap.isFirstChange()) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.setHeaderHeight();
                _this.cd.detectChanges();
                _this.dfs.columnResizeEnd();
            }));
        }
        if (changes.nowrap !== undefined && !changes.nowrap.isFirstChange()) {
            this.checkNowrap();
            this.setRowHeight(false);
            this.dgs.cellContentWrapChanged.emit();
            this.dfs.updateProperty('nowrap', changes.nowrap.currentValue);
        }
        if (changes.multiSort !== undefined && !changes.multiSort.isFirstChange()) {
            this.dfs.updateProperty('multiSort', changes.multiSort.currentValue);
        }
        if (changes.editable !== undefined && !changes.editable.isFirstChange()) {
            this.dfs.updateProperty('editable', changes.editable.currentValue);
            if (!changes.editable.currentValue) {
                this.endCellEdit();
            }
            this.isSingleClick = null;
            // if (this.editable) {
            //     this.keepSelect = false;
            // } else {
            //     this.keepSelect = this.dfs._state.keepSelect;
            // }
            this.cd.detectChanges();
        }
        if (changes.showHeader !== undefined && !changes.showHeader.isFirstChange()) {
            this.dfs.updateProperty('showHeader', changes.showHeader.currentValue);
            this.headerHeightChange();
            this.cd.detectChanges();
        }
        if (changes.showFilterBar !== undefined && !changes.showFilterBar.isFirstChange()) {
            this.dfs.updateProperty('showFilterBar', changes.showFilterBar.currentValue);
            this.dgs.showGridHeader.emit(this.realHeaderHeight);
            // this.dgs.smartFilterBarExpand.emit();
            /** @type {?} */
            var fh = 0;
            if (this.conditions && this.conditions.length) {
                fh = 32;
            }
            this.onFilterBarResize(fh);
        }
        if (changes.showFooter !== undefined && !changes.showFooter.isFirstChange()) {
            this.dfs.updateProperty('showFooter', changes.showFooter.currentValue);
            // this.cd.detectChanges();
            this.calculateGridSize(this.fit);
        }
        if (changes.pagerOnServer !== undefined && !changes.pagerOnServer.isFirstChange()) {
            this.dfs.updateProperty('pagerOnServer', changes.pagerOnServer.currentValue);
            this.pagerOpts = Object.assign(this.pagerOpts, {
                remote: this.pagerOnServer
            });
        }
        if (changes.pageIndex !== undefined && !changes.pageIndex.isFirstChange()) {
            this.dfs.updateProperty('pageIndex', changes.pageIndex.currentValue);
            this.pagerOpts = Object.assign(this.pagerOpts, {
                currentPage: this.pageIndex
            });
        }
        if (changes.pageSize !== undefined && !changes.pageSize.isFirstChange()) {
            this.dfs.updateProperty('pageSize', changes.pageSize.currentValue);
            this.pagerOpts = Object.assign(this.pagerOpts, {
                itemsPerPage: this.pageSize
            });
        }
        if (changes.pageList !== undefined && !changes.pageList.isFirstChange()) {
            this.dfs.updateProperty('pageList', changes.pageList.currentValue);
            this.pagerOpts = Object.assign(this.pagerOpts, {
                pageList: this.pageList
            });
        }
        if (changes.columns !== undefined && !changes.columns.isFirstChange()) {
            this.columnsChanged();
        }
        if (changes.sizeType !== undefined && !changes.sizeType.isFirstChange()) {
            this._sizeType = changes.sizeType.currentValue;
            this.setRowHeight(true);
            this.dfs.updateProperty('rowHeight', this.rowHeight);
            this.setFooterHeight();
            this.refresh();
            this.dgs.onRowHeightChange(this.rowHeight);
        }
        if (changes.rowHeight && !changes.rowHeight.isFirstChange()) {
            this.setRowHeight(false);
        }
        if (changes.selectValue && !changes.selectValue.isFirstChange()) {
            this.selectRow(this.selectValue, false);
        }
        if (changes.checkValues && !changes.checkValues.isFirstChange()) {
            /** @type {?} */
            var checkIds = this.dfs.differenceBy(changes.checkValues.currentValue || [], changes.checkValues.previousValue || [], (/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return v; }));
            if (checkIds && checkIds.length) {
                this.checkRows(checkIds, false);
            }
            /** @type {?} */
            var uncheckIds = this.dfs.differenceBy(changes.checkValues.previousValue || [], changes.checkValues.currentValue || [], (/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return v; }));
            if (uncheckIds && uncheckIds.length) {
                this.unCheckRows(uncheckIds, false);
            }
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.checkValues = _this.checkeds.map((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) { return r.id; }));
                    _this.checkValuesChange.emit(_this.checkValues);
                    _this.checkedChange.emit(_this.checkeds);
                    _this.updateAllCheckboxStatus();
                }), 10);
            }));
        }
        if (changes.showGroupColumn && !changes.showGroupColumn.isFirstChange()) {
            this.toggleVisibleColumn(this.groupField.split(','), changes.showGroupColumn.currentValue);
            this.columnsChanged();
        }
        if (changes.autoFitColumns && !changes.autoFitColumns.isFirstChange()) {
            this.dfs.updateProperty('autoFitColumns', changes.autoFitColumns.currentValue);
        }
        // if (changes.fitColumns && !changes.fitColumns.isFirstChange()) {
        //     this.fitColumns = changes.fitColumns.currentValue;
        // }
        if (changes.groupRows && !changes.groupRows.isFirstChange()) {
            this.dfs.updateProperty('groupRows', changes.groupRows.currentValue);
            this.refresh();
        }
        if (changes.mergeCell && !changes.mergeCell.isFirstChange()) {
            this.refresh();
        }
        if (changes.mergeFields && !changes.mergeFields.isFirstChange()) {
            this.refresh();
        }
        if (changes.enableFilterRow && !changes.enableFilterRow.isFirstChange()) {
            this.dfs.updateProperty('enableFilterRow', changes.enableFilterRow.currentValue);
            if (this.showHeader) {
                this.setHeaderHeight();
                this.filterBarHeight = 32;
                this.dgs.toggleFilterRow.emit(this.enableFilterRow);
                this.dgs.showGridHeader.emit(this.realHeaderHeight);
                this.cd.detectChanges();
            }
        }
        if (changes.enableSmartFilter && !changes.enableSmartFilter.isFirstChange()) {
            this.dfs.updateProperty('enableSmartFilter', changes.enableSmartFilter.currentValue);
        }
        if (changes.enableDragColumn && !changes.enableDragColumn.isFirstChange()) {
            this.checkDragColumns();
        }
        if (changes.showRowGroupPanel && !changes.showRowGroupPanel.isFirstChange()) {
            this.dgs.smartFilterBarExpand.emit();
            this.dgs.showGridHeader.emit(this.realHeaderHeight);
        }
        if (changes.selectionMode && !changes.selectionMode.isFirstChange()) {
            this.sms.toggleMode();
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.checkFilterStyle = /**
     * @private
     * @return {?}
     */
    function () {
        // 过滤行与智能过滤 同时启用时，将过滤行禁用
        if (this.enableFilterRow && this.enableSmartFilter) {
            this.enableFilterRow = false;
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype._checkSize = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var themesKey = localStorage.getItem('gsp_rtf_themSKey');
        /** @type {?} */
        var st = 'sm';
        switch (themesKey) {
            case 'default':
                st = 'sm';
                break;
            case 'loose':
                st = 'md';
                break;
        }
        this.sizeType = st;
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.checkDragColumns = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isMultiHeader()) {
            this.enableDragColumn = false;
            // this.cd.detectChanges();
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.checkOptions = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.gridSize = { width: this.width + 'px', height: this.height + 'px' };
        if (!this.id) {
            this.id = 'FarrisDataGrid' + Utils.uuid().replace(/-/g, '').substr(0, 10);
            if (this.useControlPanel) {
                this.useControlPanel = false;
                this.writeConsole('启用列配置属性，未设置ID，此功能将禁用。');
            }
            this._custom_datagrid_cls = this.id;
        }
        else {
            this.styleSheetId = this.id + '_' + Utils.uuid().replace(/-/g, '').substr(0, 10);
            this._custom_datagrid_cls = this.styleSheetId;
        }
        if (this.settingService && this.useControlPanel) {
            this.settingService.registerGridInstance(this);
        }
        this.dgs.createStyleElement(this.styleSheetId);
        if (!this.idField) {
            throw new Error('The Datagrid\'s idField can\'t be Null. ');
        }
        this.checkNowrap();
        this.checkSortInfo();
        this.checkMergeCell();
        this.setCheckboxBehavior();
        this.initPaginationOptions();
        if (!this.columns) {
            this.columns = this.fields;
        }
        this.checkGroupHeaderColumns();
        // TFS: 356956
        this.checkGroupRowSetting();
        this.checkColumnsType();
        this.checkDragColumns();
        /** @type {?} */
        var _defaultSetting = (/**
         * @return {?}
         */
        function () {
            _this._flatColumns();
            // this.setHeaderHeight();
            _this.setRowHeight();
        });
        this.dfs.setinitialOptions({
            columns: this.columns,
            groupField: this.groupField,
            sortName: this.sortName,
            sortOrder: this.sortOrder
        });
        // 加载用户个性化设置 --》 列显示与列排序
        if (this.settingService && this.useControlPanel) {
            /** @type {?} */
            var settings$ = this.settingService.getSettings(this.id);
            if (!settings$) {
                _defaultSetting();
                return;
            }
            settings$.subscribe((/**
             * @param {?} sets
             * @return {?}
             */
            function (sets) {
                if (sets) {
                    _this.userProfileSetting(sets);
                    _this.setRowHeight(false);
                }
                if (_this.data && _this.data.length) {
                    _this.dfs.updateProperty('data', _this.data);
                }
                _this.columnsChanged(_this.groupRows && (_this.data && !!_this.data.length));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _defaultSetting();
                _this.writeConsole(err, 'error');
            }));
        }
        else {
            _defaultSetting();
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.refreshSelectedData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.selectedRow && this.selectedRow.id) {
            if (this.data && this.data.length) {
                /** @type {?} */
                var rd = this.data.find((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) { return d[_this.idField] === _this.selectedRow.id; }));
                this.selectedRow.data = rd;
            }
            else {
                this.selectedRow = null;
            }
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unsubscribes();
        if (this.ro) {
            if (this.el.nativeElement.parentElement) {
                this.ro.unobserve(this.el.nativeElement.parentElement);
            }
            this.ro.disconnect();
        }
        if (this.documentRowKeydownHandler) {
            this.documentRowKeydownHandler();
        }
        this.currentCell = null;
        this.clientFilterService = null;
        this.cleanDom();
        // 移除动态的style
        this.dgs.removeStyleSheet();
        if (this.settingService && this.settingService.destroy) {
            this.settingService.destroy(this.id);
        }
        if (this.sms) {
            this.sms.destroy();
            this.sms = null;
        }
        document.body.removeEventListener('mousedown', this.documentBodyMouseDown, true);
        if (this.farrisInstances) {
            this.farrisInstances.destroy(this.el.nativeElement);
        }
        this._selectedRow = null;
        this.editors = {};
        DatagridColumnsHelper.gridInstance = null;
        this.unbindMoveSelectRowEvent();
        this.unbindDocumentEditListener();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatagridComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.showSelectedList && this.dgPager) {
            this.dgPager.closeSelectedList();
        }
        if (this.pending) {
            return;
        }
        /** @type {?} */
        var target = (/** @type {?} */ (event.target));
        if (target.nodeName === 'TEXTAREA' || target.nodeName === 'INPUT') {
            event.stopPropagation();
            return;
        }
        if (this.currentCell && this.currentCell.editor && this.currentCell.editor._editorClickEvent) {
            event.stopPropagation();
            return;
        }
        /*
        this.endCellEdit(event);
        this.dfs.cancelSelectCell();
        */
        if (this.stopPropagation) {
            event.stopPropagation();
            return;
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.initPaginationOptions = /**
     * @private
     * @return {?}
     */
    function () {
        this.pagerOpts = {
            id: this.id ? this.id + '-pager_' + Utils.uuid() : 'farris-datagrid-pager_' + Utils.uuid(),
            itemsPerPage: this.pagination ? this.pageSize : this.total,
            currentPage: this.pageIndex,
            totalItems: this.total,
            pageList: this.pageList,
            remote: this.pagerOnServer
        };
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.updatePagerOptions = /**
     * @private
     * @return {?}
     */
    function () {
        this.pagerOpts = Object.assign(this.pagerOpts, {
            itemsPerPage: this.pageSize,
            currentPage: this.pageIndex,
            totalItems: this.total
        });
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.setPagerTotal = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var _total = this.data.length;
        if (this.pagination && this.total === 0 && this.virtualized) {
            this.pagerOpts.totalItems = _total;
        }
        else {
            if (!this.pagination) {
                this.pagerOpts.itemsPerPage = _total;
            }
        }
    };
    /**
     * @private
     * @param {?=} rows
     * @return {?}
     */
    DatagridComponent.prototype.setFooterHeight = /**
     * @private
     * @param {?=} rows
     * @return {?}
     */
    function (rows) {
        var _this = this;
        if (this.showFooter && !this.footerTemplate) {
            rows = rows || this._footerData['value'];
            if (!rows || !rows.length) {
                return;
            }
            if (this.nowrap) {
                this.footerHeight = rows.length * this.footerHeight;
            }
            else {
                if (this['_footer_height_timer_']) {
                    clearTimeout(this['_footer_height_timer_']);
                }
                this['_footer_height_timer_'] = setTimeout((/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var topFooter = document.querySelector('.f-datagrid-footer-top');
                    /** @type {?} */
                    var bottomFooter = document.querySelector('.f-datagrid-footer-bottom');
                    if (topFooter) {
                        _this.render2.setStyle(topFooter, 'height', '29px');
                        _this.footerHeight = Math.max.apply(Math, tslib_1.__spread(Array.from(topFooter.querySelectorAll('table')).map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.offsetHeight; }))));
                        _this.render2.setStyle(topFooter, 'height', _this.footerHeight + 'px');
                    }
                    else {
                        if (bottomFooter) {
                            _this.render2.setStyle(bottomFooter, 'height', '29px');
                            _this.footerHeight = Math.max.apply(Math, tslib_1.__spread(Array.from(bottomFooter.querySelectorAll('table')).map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n.offsetHeight; }))));
                            _this.render2.setStyle(bottomFooter, 'height', _this.footerHeight + 'px');
                        }
                    }
                    _this.dfs.columnResizeEnd();
                }), 100);
            }
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.customStyleKey = /**
     * @return {?}
     */
    function () {
        return "." + this._custom_datagrid_cls;
    };
    /**
     * @private
     * @param {?=} useSizeType
     * @return {?}
     */
    DatagridComponent.prototype.setRowHeight = /**
     * @private
     * @param {?=} useSizeType
     * @return {?}
     */
    function (useSizeType) {
        if (useSizeType === void 0) { useSizeType = false; }
        /** @type {?} */
        var _rowHeight = SIZE_TYPE[this._sizeType].row;
        /** @type {?} */
        var _rh = 29;
        if (useSizeType) {
            this.rowHeight = _rowHeight;
        }
        else {
            this.rowHeight = _rowHeight > this.rowHeight ? _rowHeight : this.rowHeight;
        }
        this.filterRowHeight = SIZE_TYPE[this._sizeType].pager;
        /** @type {?} */
        var key1 = this.customStyleKey() + ".f-datagrid-body-row, " + this.customStyleKey() + " .f-datagrid-cell";
        /** @type {?} */
        var key2 = this.customStyleKey() + " .f-datagrid-cell-content";
        this.dgs.removeCssRule(key1);
        this.dgs.removeCssRule(key2);
        if (this.rowHeight !== _rh && this.nowrap) {
            /** @type {?} */
            var rowHeightCSS = [
                key1 + " { height: " + this.rowHeight + "px }",
                key2 + " { height: " + this.rowHeight + "px; line-height: " + this.rowHeight + "px }"
            ];
            this.dgs.appendCssRules(rowHeightCSS);
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.initSelectOrChecked = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var _data = this.dfs.getCurrentPageData();
        if (!this.enableMorePageSelect && this.multiSelect) {
            // this.clearAll();
            if (this.checkeds && this.checkeds.length) {
                this.checkeds.forEach((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) {
                    if (!_data.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n[_this.idField] == r.id; }))) {
                        _this.unCheckRow(r.id, false);
                    }
                }));
            }
            else {
                this.clearCheckeds();
            }
        }
        if (this.selectValue) {
            if (_data.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this.idField] == _this.selectValue; }))) {
                this.selectRow(this.selectValue, false);
                this.refreshSelectedData();
            }
        }
        if (this.multiSelect) {
            if (this.checkValues && this.checkValues.length) {
                /** @type {?} */
                var chkids = this.checkeds.map((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) { return r.id; }));
                /** @type {?} */
                var diffIds = this.dfs.difference(chkids, this.checkValues);
                if (diffIds.length) {
                    this.checkRows(diffIds, false);
                }
                else {
                    this.checkValues = [];
                }
            }
            else {
                this.checkValues = [];
            }
            this.checkValues = this.checkeds.map((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return r.id; }));
            if (!this._isResized || this.virtualized) {
                this.checkValuesChange.emit(this.checkValues);
                this.checkedChange.emit(this.checkeds);
            }
            this.updateAllCheckboxStatus(_data);
        }
    };
    /**
     * @private
     * @param {?=} _data
     * @return {?}
     */
    DatagridComponent.prototype.updateAllCheckboxStatus = /**
     * @private
     * @param {?=} _data
     * @return {?}
     */
    function (_data) {
        var _this = this;
        if (!_data) {
            _data = this.dfs.getCurrentPageData();
        }
        /** @type {?} */
        var checkAllStatus = 0;
        if (this.showAllCheckbox) {
            /** @type {?} */
            var allDataIDs = _data.map((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return r[_this.idField]; }));
            /** @type {?} */
            var newCheckValues = allDataIDs.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return _this.checkValues.includes(n); }));
            if (newCheckValues && newCheckValues.length) {
                /** @type {?} */
                var isSame = !this.dfs.difference(allDataIDs, this.checkValues).length;
                if (!this.checkValues || !this.checkValues.length) {
                    // 没有选中的数据
                    checkAllStatus = 0;
                }
                else if (isSame) { // this.checkValues.length === this.data.length ||
                    // 全部选中
                    checkAllStatus = 1;
                }
                else if (!isSame) { // this.checkValues.length !== this.data.length &&
                    // 有选中的数据，但不是全部选中
                    checkAllStatus = 2;
                }
            }
        }
        this.dgs.changeCheckAllStatus.emit(checkAllStatus);
    };
    // 当单选并显示复选框时，默认将 checkOnSelect, selectOnCheck 设置为 true;
    // 当单选并显示复选框时，默认将 checkOnSelect, selectOnCheck 设置为 true;
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.setCheckboxBehavior = 
    // 当单选并显示复选框时，默认将 checkOnSelect, selectOnCheck 设置为 true;
    /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.multiSelect && this.showCheckbox) {
            // TFS: 380899
            // this.checkOnSelect = true;
            // this.selectOnCheck = true;
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype._flatColumns = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.flatColumns = flatten(this.columns).filter((/**
         * @param {?} col
         * @return {?}
         */
        function (col) { return !col.colspan && _this.columnIsVisible(col); }));
        if (this.isMultiHeader() && this.fast) {
            this.flatColumns = this.dfs.getGroupColumns(this.columns[0]);
        }
    };
    /**
     * @param {?} col
     * @return {?}
     */
    DatagridComponent.prototype.columnIsVisible = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        return DatagridColumnsHelper.columnIsVisible(col, this);
    };
    // 添加列设置
    // 添加列设置
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.addControlCol = 
    // 添加列设置
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.useControlPanel) {
            /** @type {?} */
            var controlCol = this.columns[0].find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field === _this.ControlPanelFeild; }));
            if (!controlCol) {
                /** @type {?} */
                var cp = { field: this.ControlPanelFeild, width: 24, rowspan: this.columns.length, fixed: 'right', visible: true };
                // 2021-05-24 启用过滤行后出错
                // if (this.enableFilterRow) {
                //     cp.rowspan += 1;
                // }
                this.columns[0].push(cp);
            }
            else {
                controlCol.visible = true;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.checkGroupHeaderColumns = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isMultiHeader()) {
            /** @type {?} */
            var allCols = flatten(this.columns);
            DatagridColumnsHelper.checkGroupHeaderColumnVisible(allCols);
        }
    };
    // 检查列集合: [] -> [[]]
    // 检查列集合: [] -> [[]]
    /**
     * @private
     * @param {?} values
     * @return {?}
     */
    DatagridComponent.prototype.correctColumns = 
    // 检查列集合: [] -> [[]]
    /**
     * @private
     * @param {?} values
     * @return {?}
     */
    function (values) {
        if (values && values.length && !Array.isArray(values[0])) {
            return [values];
        }
        else {
            return values || [];
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.checkColumnsType = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.columns && this.columns.length) {
            // if (!Array.isArray(this.columns[0])) {
            //     this.columns = [ this.columns ];
            // }
            this.addControlCol();
            this.columns.forEach((/**
             * @param {?} cols
             * @param {?} columnsIndex
             * @return {?}
             */
            function (cols, columnsIndex) {
                cols.forEach((/**
                 * @param {?} col
                 * @param {?} index
                 * @return {?}
                 */
                function (col, index) {
                    if (!col.field) {
                        col.field = "farris-datagrid-column_" + columnsIndex + "_" + index;
                    }
                    if (!col.valign) {
                        col.valign = 'middle';
                    }
                    if (col.width === undefined || col.width === null) {
                        col.width = 100;
                    }
                    else {
                        if (typeof col.width === 'string') {
                            col.width = parseInt(col.width, 10);
                        }
                    }
                    // 记录原始宽度
                    if (!col.originalWidth) {
                        col.originalWidth = col.width;
                    }
                    if (col.formatter && typeof col.formatter !== 'function' && Object.keys(col.formatter).length === 0) {
                        col.formatter = null;
                    }
                    if (!_this.showGroupColumn && _this.groupRows) {
                        _this.toggleVisibleColumn(_this.groupField.split(','), false);
                    }
                    // 过滤行检查
                    if (col.filter) {
                        if (typeof col.filter === 'boolean') {
                            if (col.field) {
                                col.filter = _this.clientFilterService.createColumnFilterOptions(col);
                            }
                            else {
                                col.filter = false;
                            }
                        }
                        else {
                            if (!col.filter.options || !Object.keys(col.filter.options).length) {
                                switch (col.filter.type) {
                                    case ColumnFilterType.enum:
                                        col.filter.options = col.formatter['options'];
                                        break;
                                    case ColumnFilterType.date:
                                        col.filter.options = { dateFormat: 'yyyy-MM-dd', returnFormat: 'yyyy-MM-dd' };
                                        break;
                                    case ColumnFilterType.datetime:
                                        col.filter.options = { dateFormat: 'yyyy-MM-dd HH:mm:ss', returnFormat: 'yyyy-MM-dd HH:mm:ss' };
                                        break;
                                }
                            }
                        }
                    }
                    // 兼容 hidden 2021-05-31
                    if (col['hidden'] !== undefined && col.visible === undefined) {
                        if (typeof col['hidden'] === 'boolean') {
                            col.visible = !col['hidden'];
                        }
                        else {
                            if (typeof col['hidden'] === 'function') {
                                col.visible = (/**
                                 * @return {?}
                                 */
                                function () {
                                    /** @type {?} */
                                    var r = col['hidden'].bind(_this);
                                    return !r;
                                });
                            }
                        }
                    }
                }));
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.checkGroupRowSetting = /**
     * @private
     * @return {?}
     */
    function () {
        // 如果启用分组行，但未设置分组字段时，将关闭分组行功能
        // if (this.groupRows) {
        //     if (!this.groupField) {
        //         this.groupRows = false;
        //     }
        // }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.checkMergeCell = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.mergeCell) {
            if (!this.mergeFields || !this.mergeFields.length) {
                this.mergeCell = false;
            }
            else {
                this.virtualized = false;
                this.virtualizedAsyncLoad = false;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.checkSortInfo = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.sortName) {
            if (!this.sortOrder) {
                this.sortOrder = this.sortName.split(',').map((/**
                 * @return {?}
                 */
                function () { return 'asc'; })).join(',');
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.checkNowrap = /**
     * @private
     * @return {?}
     */
    function () {
        // 启用折行后，虚拟加载特性失效
        if (!this.nowrap) {
            this.virtualized = false;
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.setHeaderHeight = /**
     * @return {?}
     */
    function () {
        this.realHeaderHeight = 0;
        if (this.showHeader) {
            // if (!this.headerWrap) {
            //     this.realHeaderHeight = this.columns.length * this.headerHeight;
            //     if (this.enableFilterRow) {
            //         this.realHeaderHeight += this.filterRowHeight;
            //     }
            // } else {
            //     const gridHeaderEl = this.el.nativeElement.querySelector('.f-datagrid-header');
            //     if (gridHeaderEl) {
            //         const trs = gridHeaderEl.querySelectorAll('table tr:not(.f-datagrid-filter-row)');
            //         trs.forEach(n => {
            //             n.style.height = 'auto';
            //             Array.from(n.children).forEach((a: any) => a.style.height = 'auto');
            //         });
            //         // const h = Math.max(...Array.from(trs).map((n: any) => n.clientHeight));
            //         // this.realHeaderHeight = h;
            //         const tableEl = gridHeaderEl.querySelector('table');
            //         if(tableEl) {
            //             this.realHeaderHeight = tableEl.offsetHeight;
            //         }
            //     }
            // }
            /** @type {?} */
            var gridHeaderEl = this.el.nativeElement.querySelector('.f-datagrid-header');
            if (!this.headerWrap) {
                var _a = SIZE_TYPE[this._sizeType], hh = _a.header, ph = _a.pager;
                this.headerHeight = hh;
                this.realHeaderHeight = this.columns.length * this.headerHeight;
                if (this.enableFilterRow) {
                    // 解决宽松版下
                    this.filterRowHeight = ph;
                    this.realHeaderHeight += this.filterRowHeight;
                }
                if (gridHeaderEl) {
                    gridHeaderEl.style.minHeight = this.realHeaderHeight + 'px';
                }
            }
            else {
                if (gridHeaderEl) {
                    this.render2.removeStyle(gridHeaderEl, 'minHeight');
                    /** @type {?} */
                    var trs = gridHeaderEl.querySelectorAll('table tr:not(.f-datagrid-filter-row)');
                    trs.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        n.style.height = 'auto';
                        Array.from(n.children).forEach((/**
                         * @param {?} a
                         * @return {?}
                         */
                        function (a) { return a.style.height = 'auto'; }));
                    }));
                    /** @type {?} */
                    var tableEls = Array.from(gridHeaderEl.querySelectorAll('table'));
                    if (tableEls) {
                        /** @type {?} */
                        var heights = tableEls.map((/**
                         * @param {?} t
                         * @return {?}
                         */
                        function (t) { return t.offsetHeight; }));
                        /** @type {?} */
                        var maxHeight = Math.max.apply(Math, tslib_1.__spread(heights));
                        this.realHeaderHeight = maxHeight;
                        gridHeaderEl.style.minHeight = this.realHeaderHeight + 'px';
                    }
                }
            }
        }
        return this.realHeaderHeight;
    };
    // 列集合变化
    // 列集合变化
    /**
     * @param {?=} reloadData
     * @param {?=} useColumnSettingWidth
     * @return {?}
     */
    DatagridComponent.prototype.columnsChanged = 
    // 列集合变化
    /**
     * @param {?=} reloadData
     * @param {?=} useColumnSettingWidth
     * @return {?}
     */
    function (reloadData, useColumnSettingWidth) {
        var _this = this;
        if (reloadData === void 0) { reloadData = true; }
        if (useColumnSettingWidth === void 0) { useColumnSettingWidth = null; }
        /** @type {?} */
        var _useColumnSettingWidth = useColumnSettingWidth === null ? this.fitColumns : useColumnSettingWidth;
        this.dfs.updateProperty('expandGroupRows', this.expandGroupRows);
        this.checkColumnsType();
        this._flatColumns();
        this.headerHeightChange();
        this.dfs.updateProperty('flatColumns', this.flatColumns);
        this.dfs.updateColumns(this.columns, _useColumnSettingWidth, true);
        // this.colGroup = this.dfs.getState().columnsGroup;
        // 动态列合计行
        this.updateFooterData();
        this.dgs.columnsChanged.emit({ scrollToLeft: reloadData });
        if (reloadData) {
            if (this['_COLUMNS_CHANAGED_TIMER_']) {
                clearTimeout(this['_COLUMNS_CHANAGED_TIMER_']);
            }
            this['_COLUMNS_CHANAGED_TIMER_'] = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.refresh();
            }), 60);
        }
        this.setCellStyle();
    };
    // 列头变化
    // 列头变化
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.headerHeightChange = 
    // 列头变化
    /**
     * @private
     * @return {?}
     */
    function () {
        this.setHeaderHeight();
        this.dgs.showGridHeader.emit(this.realHeaderHeight);
    };
    /** 判断是否在弹出的窗口中；返回undefind 说明没有在弹出的窗口，否则视为当前列表在弹出窗口使用 */
    /**
     * 判断是否在弹出的窗口中；返回undefind 说明没有在弹出的窗口，否则视为当前列表在弹出窗口使用
     * @return {?}
     */
    DatagridComponent.prototype.inDialog = /**
     * 判断是否在弹出的窗口中；返回undefind 说明没有在弹出的窗口，否则视为当前列表在弹出窗口使用
     * @return {?}
     */
    function () {
        return this.el.nativeElement.closest('.modal-body');
    };
    //#endregion
    //#region Init
    /** 初始编辑器与验证器 */
    //#endregion
    //#region Init
    /**
     * 初始编辑器与验证器
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.initEditorAndValidator = 
    //#endregion
    //#region Init
    /**
     * 初始编辑器与验证器
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var Editors = this.inject.get(GRID_EDITORS, []);
        if (Editors.length) {
            Editors.forEach((/**
             * @param {?} ed
             * @return {?}
             */
            function (ed) {
                _this.editors[ed.name] = ed.value;
            }));
        }
        /** @type {?} */
        var _validators = this.inject.get(GRID_VALIDATORS, []);
        if (_validators && _validators.length) {
            // _validators.forEach(vr => {
            //     this.validators[vr.name] = vr.value;
            // });
            this.validators = _validators;
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.setPagerHeight = /**
     * @return {?}
     */
    function () {
        if (!this.useHtmlTable) {
            if (!this.pagination) {
                this.pagerHeight = 0;
            }
            else {
                this.pagerHeight = this.dgPager && this.dgPager.outerHeight || 40;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.initState = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.data = this.data || [];
        /** @type {?} */
        var sta = {};
        Object.keys(this).forEach((/**
         * @param {?} k
         * @return {?}
         */
        function (k) {
            if (!IgnoreProperties.includes(k)) {
                sta[k] = _this[k];
            }
        }));
        this.dfs.initState(tslib_1.__assign({}, sta, { fitColumns: this.fitColumns, fit: this.fit, groupField: this._groupField }));
        sta = null;
    };
    /**
     * @private
     * @param {?=} fitColumns
     * @return {?}
     */
    DatagridComponent.prototype.setFitColumns = /**
     * @private
     * @param {?=} fitColumns
     * @return {?}
     */
    function (fitColumns) {
        if (fitColumns === void 0) { fitColumns = true; }
        if (this.columns) {
            this.dfs.fitColumns(fitColumns);
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.setGridNewSizeWhenFit = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var parent = this.el.nativeElement.parentElement;
        if (parent) {
            var _a = parent.getBoundingClientRect(), width = _a.width, height = _a.height;
            /** @type {?} */
            var padding = this.getElementPadding(parent);
            /** @type {?} */
            var border = this.getElementBorderWidth(parent);
            /** @type {?} */
            var m = 'floor';
            if (this.maxHeight && this.autoHeight) {
                m = 'ceil';
            }
            this.width = Math[m](Math.ceil(width) - border.left - border.right - padding.left - padding.right);
            this.height = Math[m](Math.ceil(height) - border.top - border.bottom - padding.top - padding.bottom);
            if (this.maxHeight && this.autoHeight) {
                this.height += 1;
            }
            if (!this.height) {
                this.height = this.dfs.getState().height || 300;
            }
            if (!this.width) {
                this.width = this.dfs.getState().width || 800;
            }
        }
    };
    /**
     * @param {?=} fit
     * @return {?}
     */
    DatagridComponent.prototype.calculateGridSize = /**
     * @param {?=} fit
     * @return {?}
     */
    function (fit) {
        var _this = this;
        if (fit === void 0) { fit = true; }
        if (this.useHtmlTable) {
            return;
        }
        /** @type {?} */
        var setNewSize = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var h = _this.height;
            if (_this.useBlankWhenDataIsEmpty && (!_this.data || !_this.data.length)) {
                h = _this.emptyDataHeight + _this.realHeaderHeight;
            }
            if (_this.gridSize.height === h + 'px' && _this.gridSize.width === _this.width + 'px') {
                return;
            }
            _this.gridSize = { width: _this.width + 'px', height: h + 'px' };
            _this.dfs.resize({ width: _this.width, height: h });
        });
        if (fit) {
            this.setGridNewSizeWhenFit();
            if (this.width && this.height) {
                this._isResized = true;
                setNewSize();
                this._isResized = false;
                if (!this.cd['destroyed']) {
                    this.cd.detectChanges();
                }
            }
        }
        else {
            setNewSize();
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.initBeforeEvents = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.beforeSelect) {
            this.beforeSelect = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
        if (!this.beforeUnselect) {
            this.beforeUnselect = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
        if (!this.beforeCheck) {
            this.beforeCheck = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
        if (!this.beforeUncheck) {
            this.beforeUncheck = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
        if (!this.beforeSortColumn) {
            this.beforeSortColumn = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
        if (!this.beforeEdit) {
            this.beforeEdit = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
        if (!this.afterEdit) {
            this.afterEdit = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
    };
    //#endregion
    //#region 快捷键
    //#endregion
    //#region 快捷键
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.unbindMoveSelectRowEvent = 
    //#endregion
    //#region 快捷键
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.documentRowKeydownHandler) {
            this.documentRowKeydownHandler();
            this.documentRowKeydownHandler = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.bindDocumentMoveSelectRowEvent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.unbindMoveSelectRowEvent();
        this.unbindDocumentEditListener();
        this.documentRowKeydownHandler = this.render2.listen(document, 'keydown', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            // e.preventDefault();
            if (!_this.isActived()) {
                return;
            }
            // has loading
            if (document.querySelectorAll('farris-loading').length) {
                return;
            }
            if (e.target) {
                /** @type {?} */
                var targetName = ((/** @type {?} */ (e.target))).nodeName;
                if (_this.ignoreTarget.indexOf(targetName) > -1) {
                    return;
                }
            }
            if (e.keyCode === 40 || e.keyCode === 38) {
                e.preventDefault();
            }
            switch (e.keyCode) {
                case 40:
                    _this.selectNextRow();
                    break;
                case 38:
                    _this.selectPrevRow();
                    break;
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.bindEditListenerInModal = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // 弹窗中事件处理
        if (Utils.hasDialogOpen()) {
            /** @type {?} */
            var modalElement = this.inDialog();
            if (modalElement) {
                /** @type {?} */
                var _fmodal = modalElement.closest('.farris-modal');
                if (_fmodal) {
                    this.modalClickEvent = this.render2.listen(_fmodal, 'click', (/**
                     * @return {?}
                     */
                    function () {
                        _this.endEditing();
                        _this.currentCell = null;
                    }));
                }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.bindDocumentEditListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.unbindDocumentEditListener();
        /*
               if (!this.documentCellClickHandler) {
                   this.bindEditListenerInModal();
                   this.documentCellClickHandler = (event) => {
                       if (this.pending) {
                           return false;
                       }
                       if (this.currentCell) {
                           if (Utils.hasDialogOpen()) {
                               const indlg = this.inDialog();
                               const currentTargetInDialog = event.target.closest('.modal-body');
                               if (indlg && currentTargetInDialog) {
                                   if (indlg != currentTargetInDialog) {
                                       return;
                                   }
                               } else {
                                   return;
                               }
                           }
                           // DomHandler.removeClass(this.currentCell.cellElement, CELL_SELECTED_CLS);
       
                           // if (this.currentCell.isEditing) {
                           //     // this.dfs.endEditCell();
                           //     this.currentCell.cellElement.closeEdit();
                           // }
                           // this.dfs.cancelSelectCell();
                           // this.unbindDocumentEditListener();
       
                           if (this.currentCell.isEditing) {
                               // this.dfs.endEditCell();
                               this.currentCell.cellElement.closeEdit().subscribe(f => {
                                   if (f) {
                                       DomHandler.removeClass(this.currentCell.cellElement, CELL_SELECTED_CLS);
                                       DomHandler.removeClass(this.currentCell.cellElement, CELL_EDITING_CLS);
                                       this.dfs.cancelSelectCell();
                                       this.unbindDocumentEditListener();
                                       this.currentCell = null;
                                   }
                               });
                           }
                       }
                   };
                   this.docuemntCellClickEvents = this.render2.listen(document, 'click', this.documentCellClickHandler);
               }
       */
        if (!this.documentCellKeydownHandler) {
            this.documentCellKeydownHandler = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (!event.target.closest('.f-datagrid') && event.target.nodeName !== 'BODY') {
                    return;
                }
                if (_this.isActived()) {
                    _this.onKeyDownEvent(event);
                }
            });
            this.documentCellKeydownEvents = this.render2.listen(document, 'keydown', this.documentCellKeydownHandler);
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.unbindDocumentEditListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.documentCellClickHandler) {
            this.docuemntCellClickEvents();
            this.documentCellClickHandler = null;
        }
        if (this.documentCellKeydownHandler) {
            this.documentCellKeydownEvents();
            this.documentCellKeydownHandler = null;
        }
        if (this.modalClickEvent) {
            this.modalClickEvent();
            this.modalClickEvent = null;
        }
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    DatagridComponent.prototype.onKeyDownEvent = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // if (e.ctrlKey || e.shiftKey || !this.editable) {
        //     return;
        // }
        // if (!e.target.closest('.f-datagrid')) {
        //     return;
        // }
        if (this.disabled) {
            return;
        }
        /** @type {?} */
        var keyCode = e.keyCode;
        if (this.currentCell && !this.currentCell.isEditing) {
            if ([13, 40, 37, 38, 39, 9].indexOf(keyCode) > -1) {
                e.preventDefault();
            }
            switch (keyCode) {
                case 32: // 空格
                    if (this.currentCell && this.currentCell.column.onSpaceHandler) {
                        e.stopPropagation();
                        this.currentCell.column.onSpaceHandler({ grid: this, cell: this.currentCell, event: e });
                    }
                    break;
                case 13: // Enter
                    if (this.currentCell) {
                        /** @type {?} */
                        var fn = this.currentCell.cellElement['editCell'];
                        if (fn) {
                            fn.apply(this.currentCell.cellElement);
                        }
                        else {
                            if (this.currentCell.column.onEnterHandler) {
                                e.stopPropagation();
                                this.currentCell.column.onEnterHandler({ grid: this, cell: this.currentCell, event: e });
                            }
                        }
                    }
                    break;
                case 40: // ↓
                    this.selectNextCell('down', e);
                    break;
                case 38: // ↑
                    this.selectNextCell('up', e);
                    break;
                case 39: // →
                    this.selectNextCell('right', e);
                    break;
                case 37: // ←
                    this.selectNextCell('left', e);
                    break;
                case 9: // Tab
                    if (e.shiftKey) {
                        this.selectNextCell('left', e);
                    }
                    else {
                        this.selectNextCell('right', e);
                    }
                    break;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.unsubscribes = /**
     * @private
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} ss
         * @return {?}
         */
        function (ss) {
            if (ss) {
                ss.unsubscribe();
                ss = null;
            }
        }));
        this.subscriptions = [];
        if (this.docuemntCellClickEvents) {
            this.docuemntCellClickEvents();
        }
    };
    //#endregion
    //#region Editing
    //#endregion
    //#region Editing
    /**
     * @return {?}
     */
    DatagridComponent.prototype.isRowEditing = 
    //#endregion
    //#region Editing
    /**
     * @return {?}
     */
    function () {
        if (!this.selectedRow || this.selectedRow.index === -1) {
            return false;
        }
        else {
            if (this.editMode === 'row') {
                return this.selectedRow.editors && this.selectedRow.editors.length;
            }
            else {
                return false;
            }
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.isCellEditing = /**
     * @return {?}
     */
    function () {
        if (this.currentCell && this.editMode === 'cell') {
            if (!this.currentCell.editor && !this.currentCell.column.editorTemplate) {
                this.currentCell.isEditing = false;
            }
            return this.currentCell.isEditing;
        }
        return false;
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.isEditing = /**
     * @return {?}
     */
    function () {
        if (this.editMode === 'row') {
            return this.isRowEditing();
        }
        else {
            return this.isCellEditing();
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.endEditing = /**
     * @return {?}
     */
    function () {
        if (this.editMode === 'row') {
            this.endRowEdit();
        }
        else if (this.editMode === 'cell') {
            this.endCellEdit();
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.getEditors = /**
     * @return {?}
     */
    function () {
        return this.selectedRow.editors;
    };
    /**
     * @param {?} rowId
     * @param {?} field
     * @param {?=} validation
     * @return {?}
     */
    DatagridComponent.prototype.editCell = /**
     * @param {?} rowId
     * @param {?} field
     * @param {?=} validation
     * @return {?}
     */
    function (rowId, field, validation) {
        if (validation === void 0) { validation = null; }
        var _a;
        this.activeDataGrid();
        /** @type {?} */
        var rowIndex = this.dfs.findRowIndex(rowId);
        if (rowIndex > -1) {
            this.endCellEdit();
            /** @type {?} */
            var trId = TR_PREFIX + rowId;
            /** @type {?} */
            var trDom = this.el.nativeElement.querySelector('#' + trId);
            /** @type {?} */
            var tdDom_1 = null;
            if (trDom) {
                tdDom_1 = trDom.querySelector("[field=\"" + field + "\"]");
            }
            /** @type {?} */
            var col = this.getColumn(field);
            if (!tdDom_1 && col.fixed) {
                if (col.fixed === 'left') {
                    /** @type {?} */
                    var trDomL = this.el.nativeElement.querySelector('#' + trId + '_fixedleft');
                    tdDom_1 = trDomL && trDomL.querySelector("[field=\"" + field + "\"]");
                }
                else if (col.fixed === 'right') {
                    /** @type {?} */
                    var trDomR = this.el.nativeElement.querySelector('#' + trId + '_fixedright');
                    tdDom_1 = trDomR && trDomR.querySelector("[field=\"" + field + "\"]");
                }
            }
            if (validation) {
                this.formValidations = Object.assign(this.formValidations || {}, (_a = {}, _a[field] = validation, _a));
            }
            if (tdDom_1 && tdDom_1['editCell']) {
                this.currentCell = null;
                if (this['EDITCELL_TIMER']) {
                    clearTimeout(this['EDITCELL_TIMER']);
                }
                this['EDITCELL_TIMER'] = setTimeout((/**
                 * @return {?}
                 */
                function () {
                    tdDom_1.editCell();
                }), 0);
            }
        }
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    DatagridComponent.prototype.endCellEdit = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        // document.body.click();
        if (this.currentCell) {
            DomHandler.removeClass(this.currentCell.cellElement, CELL_SELECTED_CLS);
            if (this.currentCell.isEditing) {
                // this.dfs.endEditCell();
                if (this.currentCell.cellEditorRef) {
                    this.currentCell.cellEditorRef.hideCover();
                }
                /** @type {?} */
                var stopEdit = this.currentCell.cellElement.closeEdit();
                if (stopEdit) {
                    stopEdit.subscribe();
                }
            }
        }
    };
    /**
     * @param {?=} rowId
     * @return {?}
     */
    DatagridComponent.prototype.editRow = /**
     * @param {?=} rowId
     * @return {?}
     */
    function (rowId) {
        var _this = this;
        if (!this.editable || this.editMode !== 'row') {
            return false;
        }
        if (rowId) {
            this.selectRow(rowId);
        }
        if (!this.selectedRow || this.selectedRow.index === -1) {
            this.writeConsole('Please select a row.');
            return false;
        }
        var _a = tslib_1.__assign({}, this.selectedRow), rowIndex = _a.index, rowData = _a.data;
        /** @type {?} */
        var beforeEditEvent = this.beforeEdit({ rowIndex: rowIndex, rowData: rowData, gridInstance: this });
        if (!beforeEditEvent || !beforeEditEvent.subscribe) {
            this.writeConsole('please return an Observable Type.');
            return;
        }
        /** @type {?} */
        var trId = TR_PREFIX + rowId;
        /** @type {?} */
        var trDom = this.el.nativeElement.querySelector('#' + trId);
        if (!this.selectedRow.dr) {
            trDom.click();
        }
        beforeEditEvent.subscribe((/**
         * @param {?} flag
         * @return {?}
         */
        function (flag) {
            if (flag) {
                if (_this.selectedRow.dr) {
                    /** @type {?} */
                    var cells_1 = _this.selectedRow.dr.cells.toArray();
                    if (!cells_1 || !cells_1.length) {
                        return;
                    }
                    cells_1.forEach((/**
                     * @param {?} cell
                     * @return {?}
                     */
                    function (cell) {
                        if (cell.column.editor) {
                            cell.isEditing = true;
                        }
                    }));
                    _this.selectedRow.dr.cd.detectChanges();
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        /** @type {?} */
                        var editors = cells_1.map((/**
                         * @param {?} cell
                         * @return {?}
                         */
                        function (cell) {
                            if (cell.cellEditor) {
                                return cell.cellEditor.componentRef;
                            }
                        })).filter((/**
                         * @param {?} editor
                         * @return {?}
                         */
                        function (editor) { return editor; }));
                        _this.selectedRow.editors = editors;
                        if (editors && editors.length) {
                            if (editors[0].instance.inputElement) {
                                editors[0].instance.inputElement.focus();
                            }
                        }
                        // 绑定键盘事件
                        _this.bindRowEditorKeydownEvent();
                        if (!_this.cd['destroyed']) {
                            _this.cd.detectChanges();
                        }
                        _this.beginEdit.emit({ rowIndex: rowIndex, rowData: rowData, gridInstance: _this, editor: editors });
                    }));
                }
            }
        }));
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.endRowEdit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.isRowEditing()) {
            return { canEnd: true };
        }
        if (!this.selectedRow || this.selectedRow.index === -1) {
            this.writeConsole('Please select a row.');
            return;
        }
        var _a = tslib_1.__assign({}, this.selectedRow), rowIndex = _a.index, rowData = _a.data, dr = _a.dr;
        var _b = tslib_1.__assign({}, this.currentCell), currentEditor = _b.editor, column = _b.column;
        // blur
        document.body.click();
        if (this.pending) {
            return { canEnd: false };
        }
        /** @type {?} */
        var rowForm = (/** @type {?} */ (dr.form));
        rowForm.markAsTouched();
        if (rowForm.invalid && !this.endEditByInvalid) {
            return { canEnd: false };
        }
        // afterEdit 要传递相关参数，在编辑状态时，移动滚动条会出事
        /** @type {?} */
        var afterEditEvent = this.afterEdit(rowIndex, rowData, column, currentEditor);
        if (!afterEditEvent || !afterEditEvent.subscribe) {
            this.writeConsole('please return an Observable Type.');
            return { canEnd: false };
        }
        afterEditEvent.subscribe((/**
         * @param {?} flag
         * @return {?}
         */
        function (flag) {
            if (flag) {
                _this.closeAllCellEditor();
                if (_this.selectedRow.dr.form) {
                    _this.selectedRow.dr.rowData = Object.assign(_this.selectedRow.dr.rowData, _this.selectedRow.dr.form.value);
                    _this.dfs.updateRow(_this.selectedRow.id, _this.selectedRow.dr.rowData);
                    _this.cd.detectChanges();
                }
                /** @type {?} */
                var val = '';
                if (currentEditor && currentEditor.formControl) {
                    val = currentEditor.formControl.value;
                }
                _this.endEdit.emit({ rowIndex: rowIndex, rowData: rowData, column: column, value: val });
                _this.dgs.refreshFooterData.emit();
            }
        }));
    };
    /**
     * @param {?} rowId
     * @param {?=} emit
     * @return {?}
     */
    DatagridComponent.prototype.cancelEdit = /**
     * @param {?} rowId
     * @param {?=} emit
     * @return {?}
     */
    function (rowId, emit) {
        if (emit === void 0) { emit = true; }
        if (!this.isEditing()) {
            return;
        }
        this.closeAllCellEditor();
        if (rowId) {
            this.dfs.rejectChanges(rowId);
        }
        this.cd.detectChanges();
        if (emit) {
            this.cancelEdited.emit();
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.closeAllCellEditor = /**
     * @return {?}
     */
    function () {
        if (this.selectedRow && this.selectedRow.dr) {
            /** @type {?} */
            var cells = this.selectedRow.dr.cells;
            if (cells) {
                cells.forEach((/**
                 * @param {?} cell
                 * @return {?}
                 */
                function (cell) { return cell.isEditing = false; }));
                if (this.currentCell) {
                    this.currentCell.isEditing = false;
                }
            }
            this.selectedRow.editors = null;
        }
        // 取消键盘事件
        this.unbindRowEditorKeydownEvent();
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    DatagridComponent.prototype.rowEditTabKeydwonEvent = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        /** @type {?} */
        var keyCode = e.which || e.keyCode;
        if (keyCode === 9) { // tab
            // tab
            /** @type {?} */
            var td = e.target.closest('td');
            /** @type {?} */
            var tr_1 = e.target.closest('tr');
            /** @type {?} */
            var nextTd_1 = td.nextElementSibling;
            /** @type {?} */
            var hasNoEditor = (/**
             * @param {?} _td
             * @return {?}
             */
            function (_td) {
                return !_td.querySelector('input') && !_td.querySelector('textarea') && !_td.querySelector('select');
            });
            /** @type {?} */
            var editNextRow = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var nextTr = tr_1.nextElementSibling;
                if (nextTr) {
                    nextTr.click();
                    /** @type {?} */
                    var nextRowid = nextTr.getAttribute('id').replace(TR_PREFIX, '');
                    if (nextRowid) {
                        _this.editRow(nextRowid);
                    }
                }
            });
            if (nextTd_1) {
                if (hasNoEditor(nextTd_1)) {
                    /** @type {?} */
                    var tds = tr_1.querySelectorAll('td');
                    /** @type {?} */
                    var tdIdx_1 = -1;
                    tds.forEach((/**
                     * @param {?} t
                     * @param {?} i
                     * @return {?}
                     */
                    function (t, i) {
                        if (t === nextTd_1) {
                            tdIdx_1 = i;
                        }
                    }));
                    /** @type {?} */
                    var nextTrEdit = true;
                    while (tdIdx_1 < tds.length) {
                        /** @type {?} */
                        var _ntd = tds[tdIdx_1];
                        if (hasNoEditor(_ntd)) {
                            tdIdx_1++;
                        }
                        else {
                            nextTrEdit = false;
                            break;
                        }
                    }
                    if (nextTrEdit) {
                        editNextRow();
                    }
                }
            }
            else {
                editNextRow();
            }
        }
        e.stopPropagation();
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.bindRowEditorKeydownEvent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.documentRowEditKeydownHanlder) {
            this.documentRowEditKeydownHanlder = this.render2.listen(document, 'keydown', this.rowEditTabKeydwonEvent.bind(this));
        }
        this.documentClickEndRowEditHandler = this.render2.listen(document, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (_this.pending) {
                return false;
            }
            if (Utils.hasDialogOpen()) {
                return;
            }
            if (_this.isRowEditing()) {
                // this.endRowEdit();
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.unbindRowEditorKeydownEvent = /**
     * @private
     * @return {?}
     */
    function () {
        // 取消键盘事件
        if (this.documentRowEditKeydownHanlder) {
            this.documentRowEditKeydownHanlder();
            this.documentRowEditKeydownHanlder = null;
        }
        if (this.documentClickEndRowEditHandler) {
            this.documentClickEndRowEditHandler();
            this.documentClickEndRowEditHandler = null;
        }
    };
    //#endregion
    //#region Load Data
    //#endregion
    //#region Load Data
    /**
     * @private
     * @param {?} conditions
     * @param {?=} excuteLocaleFilter
     * @return {?}
     */
    DatagridComponent.prototype._clientFilter = 
    //#endregion
    //#region Load Data
    /**
     * @private
     * @param {?} conditions
     * @param {?=} excuteLocaleFilter
     * @return {?}
     */
    function (conditions, excuteLocaleFilter) {
        if (excuteLocaleFilter === void 0) { excuteLocaleFilter = false; }
        // 客户端过滤
        if (excuteLocaleFilter) {
            /** @type {?} */
            var allClientData = this.dfs.getData(true);
            if (conditions && Object.keys(conditions).length) {
                /** @type {?} */
                var _data = this.clientFilterService.executeFilter(allClientData, conditions);
                this.dfs.loadFilterData(_data);
            }
            else {
                this.loadData(allClientData, false, true);
            }
        }
        if (!this.virtualized) {
            this.scrollToTop();
        }
        this.filterChanged.emit(conditions);
    };
    /**
     * @private
     * @param {?} conditions
     * @return {?}
     */
    DatagridComponent.prototype.smartFilterData = /**
     * @private
     * @param {?} conditions
     * @return {?}
     */
    function (conditions) {
        if (this.remoteFilter) { // 服务器端过滤
            // 服务器端过滤
            /** @type {?} */
            var entityFilters = this.clientFilterService.convertSmartFilter2EntityFilter(conditions);
            this.filterChanged.emit(entityFilters);
        }
        else {
            // 客户端过滤
            this._clientFilter(conditions, this.useDefaultFilter);
        }
    };
    // smart fitler 清空查询条件
    // smart fitler 清空查询条件
    /**
     * @param {?=} $event
     * @return {?}
     */
    DatagridComponent.prototype.onClearSmartFilters = 
    // smart fitler 清空查询条件
    /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        this.smartFilterResult = { conditions: [], controlData: [] };
        this.conditions = [];
        this.smartFilterData([]);
        this.smartFilterService.clearAll();
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.onFilterBarResize(0);
        }));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridComponent.prototype.onRemoveSmartFilterItem = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event) {
            /** @type {?} */
            var e = tslib_1.__assign({}, $event);
            e['labelCode'] = $event.fieldCode;
            this.smartFilterService.removeCondition(e, true);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridComponent.prototype.onFilterBarResize = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.filterBarHeight = $event;
        /** @type {?} */
        var smartFilterEl = this.el.nativeElement.querySelector('.f-datagrid-column-drop-panel');
        if (smartFilterEl && !$event) {
            smartFilterEl.style.top = '0px';
        }
        this.dgs.showGridHeader.emit(this.realHeaderHeight);
        this.dgs.smartFilterBarExpand.emit();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridComponent.prototype.onSmartFilterChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var conditions = $event.conditions, filterItem = $event.filterItem;
        this.smartFilterService.filterConditionChanged({ conditions: conditions, controlData: filterItem, from: 'toolbar' });
        // this.smartFilterData(conditions);
        this.dgs.smartFilterDataChange.emit(filterItem);
    };
    /**
     * @param {?=} conditions
     * @return {?}
     */
    DatagridComponent.prototype.filterData = /**
     * @param {?=} conditions
     * @return {?}
     */
    function (conditions) {
        if (!conditions) {
            conditions = this.conditions;
        }
        else {
            this.conditions = conditions;
        }
        this.scrollToTop();
        if (this.enableSmartFilter) {
            this.smartFilterData(conditions);
            return;
        }
        if (this.remoteFilter) {
            /** @type {?} */
            var entityFilters = this.clientFilterService.convert2FilterArray(conditions);
            this.filterChanged.emit(entityFilters);
        }
        else {
            // 客户端过滤
            this._clientFilter(conditions, true);
        }
    };
    /** 清空过滤条件 */
    /**
     * 清空过滤条件
     * @return {?}
     */
    DatagridComponent.prototype.clearCondition = /**
     * 清空过滤条件
     * @return {?}
     */
    function () {
        this.dgs.onClearFilter();
    };
    /**
     * @param {?=} data
     * @param {?=} keepSortState
     * @param {?=} keepScrollPosition
     * @return {?}
     */
    DatagridComponent.prototype.loadData = /**
     * @param {?=} data
     * @param {?=} keepSortState
     * @param {?=} keepScrollPosition
     * @return {?}
     */
    function (data, keepSortState, keepScrollPosition) {
        if (keepSortState === void 0) { keepSortState = false; }
        if (keepScrollPosition === void 0) { keepScrollPosition = true; }
        if (this.loading) {
            this.closeLoading(!this.pagination);
        }
        data = data || [];
        if (keepScrollPosition && this.scrollInstance && this.scrollInstance.instance) {
            /** @type {?} */
            var lst = this.scrollInstance.instance.lastScrollTop;
            /** @type {?} */
            var lsl = this.scrollInstance.instance.lastScrollLeft;
            this.dfs.updateProperty('scrollInfo', { y: lst, x: lsl });
        }
        else {
            this.dfs.updateProperty('scrollInfo', { y: 0, x: 0 });
        }
        if (this.pagination) {
            this.dfs.setPagination(this.pageIndex, this.pageSize, this.total);
            this.updatePagerOptions();
            if (!this.cd['destroyed']) {
                this.cd.detectChanges();
            }
        }
        // 重新加载数据时，移除所有编辑列
        // this.closeAllCellEditor();
        this.data = data;
        if (keepSortState) {
            if (this.remoteSort) {
                this.dfs.loadData(data);
            }
            else {
                this.dfs.loadData(data, true, true);
            }
        }
        else {
            this.dfs.loadData(data);
        }
        this.setPagerHeight();
        this.dgs.dataSourceChanged();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    DatagridComponent.prototype.loadVirtualData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (this.groupRows) {
            this.writeConsole('if you using GROUPROWS, please set [virtualized]="false" [virtualizedAsyncLoad]="false"');
            return;
        }
        if (this.virtualizedAsyncLoad) {
            this.dgs.onLoadVirtualData(data);
        }
    };
    /**
     * @param {?} pageIndex
     * @param {?} pageSize
     * @return {?}
     */
    DatagridComponent.prototype.fetchData = /**
     * @param {?} pageIndex
     * @param {?} pageSize
     * @return {?}
     */
    function (pageIndex, pageSize) {
        if (this.restService) {
            this.showLoading();
            /** @type {?} */
            var params = { pageIndex: pageIndex, pageSize: pageSize };
            if (this.sortName) {
                params['sortName'] = this.sortName;
            }
            if (this.sortOrder) {
                params['sortOrder'] = this.sortOrder;
            }
            return this.restService.getData(this.url, params);
        }
        return of(undefined);
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.refresh = /**
     * @return {?}
     */
    function () {
        this.dfs.refresh();
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.reload = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.fetchData(1, this.pageSize).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res) {
                _this.pageIndex = 1;
                _this.total = res.total;
                _this.loadData(res.items);
            }
        }));
    };
    /** 获取当前页数据 */
    /**
     * 获取当前页数据
     * @return {?}
     */
    DatagridComponent.prototype.getRows = /**
     * 获取当前页数据
     * @return {?}
     */
    function () {
        if (this.groupRows || this.virtualized) {
            if (this.pagerOnServer) {
                return this.ds.rows;
            }
            else {
                return this.currentPagerData;
            }
        }
        else {
            if (this.pagerOnServer) {
                return this.data;
            }
            else {
                return this.currentPagerData;
            }
        }
    };
    //#endregion
    //#region Pagination
    //#endregion
    //#region Pagination
    /**
     * @param {?} pageIndex
     * @param {?=} detectChanges
     * @return {?}
     */
    DatagridComponent.prototype.setPageIndex = 
    //#endregion
    //#region Pagination
    /**
     * @param {?} pageIndex
     * @param {?=} detectChanges
     * @return {?}
     */
    function (pageIndex, detectChanges) {
        if (detectChanges === void 0) { detectChanges = true; }
        this.pageIndex = pageIndex;
        this.pagerOpts.currentPage = pageIndex;
        if (detectChanges) {
            this.cd.detectChanges();
        }
    };
    // 更新每页
    // 更新每页
    /**
     * @param {?} pageList
     * @param {?=} detectChanges
     * @return {?}
     */
    DatagridComponent.prototype.setPageList = 
    // 更新每页
    /**
     * @param {?} pageList
     * @param {?=} detectChanges
     * @return {?}
     */
    function (pageList, detectChanges) {
        if (detectChanges === void 0) { detectChanges = true; }
        this.pageList = pageList;
        this.pagerOpts.pageList = pageList;
        if (detectChanges) {
            this.cd.detectChanges();
        }
    };
    /**
     * @param {?} pageIndex
     * @return {?}
     */
    DatagridComponent.prototype.onPageChange = /**
     * @param {?} pageIndex
     * @return {?}
     */
    function (pageIndex) {
        var _this = this;
        if (this.lockPagination) {
            return;
        }
        if (this.controlPaginationState) {
            this.setPageIndex(pageIndex, false);
        }
        this.fetchData(pageIndex, this.pageSize).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res) {
                _this.loadData(res.items);
            }
        }));
        this.focusRowIndex = -1;
        this.scrollToTop();
        this.pageChanged.emit({ pageIndex: pageIndex, pageSize: this.pageSize });
    };
    /**
     * @param {?} pageSize
     * @return {?}
     */
    DatagridComponent.prototype.onPageSizeChange = /**
     * @param {?} pageSize
     * @return {?}
     */
    function (pageSize) {
        var _this = this;
        if (this.lockPagination) {
            return;
        }
        this.focusRowIndex = -1;
        this.scrollToTop();
        this.pageSize = pageSize;
        this.pagerOpts.itemsPerPage = pageSize;
        this.fetchData(1, pageSize).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res) {
                _this.pageIndex = 1;
                _this.loadData(res.items);
            }
        }));
        this.pageSizeChanged.emit({ pageSize: pageSize, pageIndex: this.pageIndex });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    DatagridComponent.prototype.onRemoveSelectedItem = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (this.dfs.findRowIndex(id) > -1) {
            this.unCheckRow(id);
            this.cd.detectChanges();
        }
        else {
            this.unCheckRow(id, false);
            this.checkValues = this.checkeds.map((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return r.id; }));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridComponent.prototype.onClearSelectedItem = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // this.clearAll();
        if (this.selectOnCheck) {
            this.selectValue = '';
        }
        this.clearCheckeds(true);
    };
    //#endregion
    //#region Loading
    //#endregion
    //#region Loading
    /**
     * @return {?}
     */
    DatagridComponent.prototype.showLoading = 
    //#endregion
    //#region Loading
    /**
     * @return {?}
     */
    function () {
        this.loading = true;
        this.cd.detectChanges();
    };
    /**
     * @param {?=} detectChanges
     * @return {?}
     */
    DatagridComponent.prototype.closeLoading = /**
     * @param {?=} detectChanges
     * @return {?}
     */
    function (detectChanges) {
        if (detectChanges === void 0) { detectChanges = true; }
        this.loading = false;
        if (detectChanges) {
            this.cd.detectChanges();
        }
    };
    //#endregion
    //#region Dom
    //#endregion
    //#region Dom
    /**
     * @private
     * @param {?} strNum
     * @return {?}
     */
    DatagridComponent.prototype.replacePX2Empty = 
    //#endregion
    //#region Dom
    /**
     * @private
     * @param {?} strNum
     * @return {?}
     */
    function (strNum) {
        if (strNum) {
            return Number.parseInt(strNum.replace('px', ''), 10);
        }
        return 0;
    };
    /**
     * @param {?} cls
     * @param {?} dom
     * @return {?}
     */
    DatagridComponent.prototype.renderCustomCls = /**
     * @param {?} cls
     * @param {?} dom
     * @return {?}
     */
    function (cls, dom) {
        var _this = this;
        if (cls) {
            if (cls[0] === '!') {
                /** @type {?} */
                var _cls = cls.slice(1).split(' ').filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c; }));
                _cls.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    if (c) {
                        _this.render2.removeClass(dom, c);
                    }
                }));
            }
            else {
                cls.split(' ').filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c; })).forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    if (c) {
                        _this.render2.addClass(dom, c);
                    }
                }));
            }
        }
    };
    /**
     * @param {?} cs
     * @param {?} dom
     * @param {?=} cssRuleText
     * @return {?}
     */
    DatagridComponent.prototype.renderCustomStyle = /**
     * @param {?} cs
     * @param {?} dom
     * @param {?=} cssRuleText
     * @return {?}
     */
    function (cs, dom, cssRuleText) {
        if (cssRuleText === void 0) { cssRuleText = null; }
        if (!cs) {
            return;
        }
        if (cs.cls) {
            this.renderCustomCls(cs.cls, dom);
        }
        if (cs.style) {
            if (!cssRuleText) {
                Object.keys(cs.style).forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    if (n.toLowerCase() === 'color' && cs.style[n] && cs.style[n].indexOf('!important') === -1) {
                        cs.style[n] = cs.style[n] + '!important';
                    }
                }));
                cssRuleText = this.customStyleKey() + " #" + dom.id + " " + JSON.stringify(cs.style);
            }
            this.dgs.appendCssRules([cssRuleText]);
        }
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DatagridComponent.prototype.getBoundingClientRect = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        return el.nativeElement.getBoundingClientRect();
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DatagridComponent.prototype.getElementPadding = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        /** @type {?} */
        var style = getComputedStyle(el);
        return {
            top: this.replacePX2Empty(style.paddingTop),
            left: this.replacePX2Empty(style.paddingLeft),
            bottom: this.replacePX2Empty(style.paddingBottom),
            right: this.replacePX2Empty(style.paddingRight)
        };
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DatagridComponent.prototype.getElementBorderWidth = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        /** @type {?} */
        var style = getComputedStyle(el);
        return {
            top: this.replacePX2Empty(style.borderTopWidth),
            bottom: this.replacePX2Empty(style.borderBottomWidth),
            right: this.replacePX2Empty(style.borderRightWidth),
            left: this.replacePX2Empty(style.borderLeftWidth)
        };
    };
    /**
     * @param {?} field
     * @param {?} data
     * @param {?} formatter
     * @return {?}
     */
    DatagridComponent.prototype.formatData = /**
     * @param {?} field
     * @param {?} data
     * @param {?} formatter
     * @return {?}
     */
    function (field, data, formatter) {
        /** @type {?} */
        var value = this.getFieldValue(field, data);
        return this.colFormatSer.format(value, data, formatter);
    };
    /**
     * @param {?} field
     * @param {?} rowData
     * @return {?}
     */
    DatagridComponent.prototype.getFieldValue = /**
     * @param {?} field
     * @param {?} rowData
     * @return {?}
     */
    function (field, rowData) {
        return Utils.getValue(field, rowData);
    };
    //#endregion
    //#region Select
    //#endregion
    //#region Select
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.canOperateCheckbox = 
    //#endregion
    //#region Select
    /**
     * @private
     * @return {?}
     */
    function () {
        return this.multiSelect && this.showCheckbox;
    };
    /**
     * @param {?} nextColumn
     * @return {?}
     */
    DatagridComponent.prototype.findNextTd = /**
     * @param {?} nextColumn
     * @return {?}
     */
    function (nextColumn) {
        if (!nextColumn) {
            return null;
        }
        /** @type {?} */
        var rowid = TR_ID_PREFIX + this.selectedRow.id;
        /** @type {?} */
        var leftTrID = TR_ID_PREFIX + this.selectedRow.id + '_fixedleft';
        /** @type {?} */
        var rightTrID = TR_ID_PREFIX + this.selectedRow.id + '_fixedright';
        /** @type {?} */
        var _tr = null;
        /** @type {?} */
        var _td = null;
        if (nextColumn.fixed === 'left') {
            _tr = document.querySelector(leftTrID);
            if (_tr) {
                _td = _tr.querySelector("[field=\"" + nextColumn.field + "\"]");
            }
        }
        else if (nextColumn.fixed === 'right') {
            _tr = document.querySelector(rightTrID);
            if (_tr) {
                _td = _tr.querySelector("[field=\"" + nextColumn.field + "\"]");
            }
        }
        else {
            _tr = document.querySelector(rowid);
            if (_tr) {
                _td = _tr.querySelector("[field=\"" + nextColumn.field + "\"]");
            }
        }
        return _td;
    };
    /**
     * 依据当前字段查询下个字段的TD DOM
     * @param field 当前字段名称
     * @param dir 移动方向
     * @returns TD element
     */
    /**
     * 依据当前字段查询下个字段的TD DOM
     * @param {?} field 当前字段名称
     * @param {?} dir 移动方向
     * @return {?} TD element
     */
    DatagridComponent.prototype.findNextCell = /**
     * 依据当前字段查询下个字段的TD DOM
     * @param {?} field 当前字段名称
     * @param {?} dir 移动方向
     * @return {?} TD element
     */
    function (field, dir) {
        /** @type {?} */
        var td = null;
        if (this.currentCell && this.currentCell.cellElement) {
            /** @type {?} */
            var col_1 = this.dfs.getColumn(field);
            /** @type {?} */
            var fixed = col_1.fixed || '';
            // let cellIndex = this.dfs.getColumnIndex(field, fixed);
            /** @type {?} */
            var cellIndex = this.colGroup.columns.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return (n.id && n.id === col_1.id) || n.field === col_1.field; }));
            // if (fixed === 'left' || this.fast) {
            //     if (this.showCheckbox) {
            //         cellIndex += 1;
            //     }
            //     if (this.showLineNumber) {
            //         cellIndex += 1;
            //     }
            // }
            /** @type {?} */
            var currCellEl = this.currentCell.cellElement;
            /** @type {?} */
            var tdSelector = "[field=\"" + field + "\"]";
            if (dir === 'up') {
                /** @type {?} */
                var prevTr = this.dgs.findNextTr(currCellEl.parentElement.previousElementSibling, 'up');
                if (prevTr) {
                    td = prevTr.querySelector(tdSelector);
                }
            }
            else if (dir === 'down') {
                /** @type {?} */
                var nextTr = this.dgs.findNextTr(currCellEl.parentElement.nextElementSibling, 'down');
                if (nextTr) {
                    td = nextTr.querySelector(tdSelector);
                }
            }
            else if (dir === 'left') {
                /** @type {?} */
                var nextColumn = this.colGroup.columns[cellIndex - 1];
                if (nextColumn) {
                    td = this.findNextTd(nextColumn);
                }
            }
            else if (dir === 'right') {
                /** @type {?} */
                var nextColumn = this.colGroup.columns[cellIndex + 1];
                if (nextColumn) {
                    td = this.findNextTd(nextColumn);
                }
            }
        }
        return td;
    };
    /**
     * @param {?} dir
     * @param {?} event
     * @return {?}
     */
    DatagridComponent.prototype.selectNextCell = /**
     * @param {?} dir
     * @param {?} event
     * @return {?}
     */
    function (dir, event) {
        /** @type {?} */
        var nextTd = this.findNextCell(this.currentCell.field, dir);
        if (dir === 'up' && !nextTd) {
            return;
        }
        if (nextTd && nextTd.className.indexOf('f-datagrid-cell-rownumber') == -1 && nextTd.className.indexOf('f-datagrid-cell-checkbox') == -1) {
            if (event['code'] === 'Tab' && this.editable && this.editcellWhenTabKeydwon) {
                nextTd['click'].apply(nextTd, [event]);
            }
            else {
                if (nextTd.selectCell) {
                    if (this.selectionMode === 'default') {
                        this.clearCheckeds();
                    }
                    nextTd['selectCell'](event, nextTd);
                }
            }
            // nextTd['selectCell'](event, nextTd);
            return nextTd;
        }
        else {
            /** @type {?} */
            var nextCol = this.colGroup.columns[0];
            /** @type {?} */
            var tdSeletor = "td[field=\"" + nextCol.field + "\"]";
            /** @type {?} */
            var tr = this.currentCell.cellElement.parentElement;
            /** @type {?} */
            var _next = tr.nextElementSibling;
            if (dir === 'left') {
                _next = tr.previousElementSibling;
            }
            if (!_next) {
                return;
            }
            /** @type {?} */
            var trDomId = _next.id.replace('_fixedleft', '').replace('_fixedright', '');
            /** @type {?} */
            var leftTrSelector = '#' + trDomId + '_fixedleft';
            if (_next.id.indexOf('_fixedright') > -1) {
                if (this.colGroup.leftFixed && this.colGroup.leftFixed.length) {
                    _next = document.querySelector(leftTrSelector);
                }
            }
            if (dir === 'left') {
                if (_next.id.indexOf('_fixedleft') > -1) {
                    _next = document.querySelector(leftTrSelector);
                }
            }
            /** @type {?} */
            var nextTd_2 = _next.querySelector(tdSeletor);
            if (nextTd_2 && nextTd_2.selectCell) {
                if (this.selectionMode === 'default') {
                    this.clearCheckeds();
                }
                nextTd_2.selectCell(event, nextTd_2);
            }
            /*
            const nextTr = this.dgs.findNextTr(_next, dir === 'left' ? 'up' : 'down');
            if (nextTr && nextTr.tagName === 'TR') {
                // nextTr.children.find(td => td.editCell).editCell();
                let firstEditor = false;
                let i = 0;
                while (!firstEditor) {
                    firstEditor = !!nextTr.children[i].selectCell;
                    if (!firstEditor) {
                        i++;
                    }
                }
                if (nextTr.children[i] && nextTr.children[i].selectCell) {
                    if (this.selectionMode === 'default' ) {
                        this.clearCheckeds();
                    }
                    nextTr.children[i].selectCell(event, nextTr.children[i]);
                }
            }
            */
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.selectNextRow = /**
     * @return {?}
     */
    function () {
        if (this.selectedRow) {
            /** @type {?} */
            var tr = this.selectedRow.dr.el.nativeElement;
            if (tr.nextElementSibling) {
                tr.nextElementSibling.click();
            }
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.selectPrevRow = /**
     * @return {?}
     */
    function () {
        if (this.selectedRow) {
            /** @type {?} */
            var tr = this.selectedRow.dr.el.nativeElement;
            if (tr.previousElementSibling) {
                tr.previousElementSibling.click();
            }
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.removeCellSelectedCls = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.currentCell) {
            DomHandler.removeClass(this.currentCell.cellElement, CELL_SELECTED_CLS);
            this.render2.removeClass(this.currentCell.cellElement, CELL_EDITING_CLS);
        }
        /** @type {?} */
        var selectedCell = this.el.nativeElement.querySelectorAll('.' + CELL_SELECTED_CLS);
        if (selectedCell.length) {
            selectedCell.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                _this.render2.removeClass(n, CELL_SELECTED_CLS);
            }));
        }
    };
    /**
     * 选中行
     * @param id 选中行ID
     * @param emit 触发select 事件
     * @param toCurrentPosition 滚动条定位到当前选择中行
     */
    /**
     * 选中行
     * @param {?} id 选中行ID
     * @param {?=} emit 触发select 事件
     * @param {?=} toCurrentPosition 滚动条定位到当前选择中行
     * @return {?}
     */
    DatagridComponent.prototype.selectRow = /**
     * 选中行
     * @param {?} id 选中行ID
     * @param {?=} emit 触发select 事件
     * @param {?=} toCurrentPosition 滚动条定位到当前选择中行
     * @return {?}
     */
    function (id, emit, toCurrentPosition) {
        var _this = this;
        if (emit === void 0) { emit = true; }
        if (toCurrentPosition === void 0) { toCurrentPosition = false; }
        if (this.selectedRow && this.selectedRow.id === id) {
            if (emit) {
                this.dfs.selectRecord(id);
            }
            if (toCurrentPosition) {
                this.scrollToCurrentRow();
            }
            return;
        }
        /** @type {?} */
        var _selectRow = (/**
         * @return {?}
         */
        function () {
            _this.removeCellSelectedCls();
            if (!_this.enableSelectRow) {
                return;
            }
            if (!_this.multiSelect && _this.showCheckbox) {
                _this.clearCheckeds(false, false);
            }
            if (_this.multiSelect && _this.selectionMode === 'default' && !_this.enableMorePageSelect) {
                _this.clearAll();
            }
            if (id && (!_this.selectedRow || _this.selectedRow.id != id)) {
                /** @type {?} */
                var row = _this.dfs.findRow(id);
                if (row && _this.disableRow) {
                    if (_this.disableRow(row.data, row.index)) {
                        return;
                    }
                }
                if (emit) {
                    _this.dfs.selectRecord(id);
                }
                else {
                    _this.dfs.setSelectRow(id, emit);
                    _this.selectedRow = _this.dfs.getCurrentRow();
                    if (_this.checkOnSelect) {
                        _this.checkRows([id]);
                    }
                    _this.dgs.setSelecedRow.emit({ id: id, selected: true });
                }
            }
            else {
                if (_this.checkOnSelect) {
                    _this.checkRows([id]);
                }
            }
            if (toCurrentPosition) {
                _this.scrollToCurrentRow();
            }
        });
        if (this.isEditing()) {
            /** @type {?} */
            var stopEdit = this.currentCell.cellElement.closeEdit();
            if (stopEdit) {
                stopEdit.subscribe(_selectRow);
            }
        }
        else {
            _selectRow();
        }
    };
    /**
     * 滚动条滚动到当前行的位置
     */
    /**
     * 滚动条滚动到当前行的位置
     * @return {?}
     */
    DatagridComponent.prototype.scrollToCurrentRow = /**
     * 滚动条滚动到当前行的位置
     * @return {?}
     */
    function () {
        this.dgs.scrollToCurrentRow.next();
    };
    /**
     * @param {?} id
     * @param {?=} emit
     * @return {?}
     */
    DatagridComponent.prototype.unSelectRow = /**
     * @param {?} id
     * @param {?=} emit
     * @return {?}
     */
    function (id, emit) {
        if (emit === void 0) { emit = true; }
        if (id) {
            this.closeAllCellEditor();
            if (this.currentCell && this.currentCell.rowId == id) {
                this.cancelSelectCell();
            }
            if (emit) {
                this.dfs.selectRecord(id, false);
            }
            else {
                this.dfs.setSelectRow(id, false);
                this.selectedRow = null;
                this.dgs.setSelecedRow.emit({ id: id, selected: false });
            }
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.selectAllRows = /**
     * @return {?}
     */
    function () {
        if (this.multiSelect && this.enableSelectRow) {
            this.dfs.selectAll();
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.cancelSelectCell = /**
     * @return {?}
     */
    function () {
        if (this.currentCell) {
            this.currentCell.cellElement.cancelSelected();
            if (!this.currentCell.isEditing) {
                this.currentCell = null;
                this.dfs.cancelSelectCell();
            }
        }
    };
    /**
     * @param {?=} excludeIds
     * @return {?}
     */
    DatagridComponent.prototype.clearSelections = /**
     * @param {?=} excludeIds
     * @return {?}
     */
    function (excludeIds) {
        this.dfs.clearSelections(excludeIds);
        this.selectedRow = null;
        this.cancelSelectCell();
        this.cd.detectChanges();
    };
    /**
     * @param {?} id
     * @param {?=} emit
     * @return {?}
     */
    DatagridComponent.prototype.checkRow = /**
     * @param {?} id
     * @param {?=} emit
     * @return {?}
     */
    function (id, emit) {
        if (emit === void 0) { emit = true; }
        if (this.canOperateCheckbox()) {
            if (emit) {
                this.dfs.checkRecord(id);
            }
            else {
                this.checkRows([id]);
            }
        }
    };
    /** 钩选行，不触发选中事件 */
    /**
     * 钩选行，不触发选中事件
     * @param {?} ids
     * @param {?=} emit
     * @return {?}
     */
    DatagridComponent.prototype.checkRows = /**
     * 钩选行，不触发选中事件
     * @param {?} ids
     * @param {?=} emit
     * @return {?}
     */
    function (ids, emit) {
        if (emit === void 0) { emit = false; }
        if (ids && ids.length) {
            this.dfs.setCheckedRows(ids, true);
            this.dgs.setCheckedRows.next({ ids: ids, checked: true });
            if (this.selectionMode === 'default') {
                this.dfs.updateProperty('selections', this.checkeds);
            }
            // this.cd.detectChanges();
            if (emit) {
                this.checkValues = this.checkeds.map((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) { return r.id; }));
                this.checkValuesChange.emit(this.checkValues);
                this.checkedChange.emit(this.checkeds);
            }
            this.updateAllCheckboxStatus();
        }
    };
    /** 取消钩选，不触发选中事件 */
    /**
     * 取消钩选，不触发选中事件
     * @param {?} ids
     * @param {?=} emit
     * @return {?}
     */
    DatagridComponent.prototype.unCheckRows = /**
     * 取消钩选，不触发选中事件
     * @param {?} ids
     * @param {?=} emit
     * @return {?}
     */
    function (ids, emit) {
        if (emit === void 0) { emit = false; }
        if (ids && ids.length) {
            this.dfs.setCheckedRows(ids, false);
            this.dgs.setCheckedRows.next({ ids: ids, checked: false });
            // this.cd.detectChanges();
            if (emit) {
                this.checkValues = this.checkeds.map((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) { return r.id; }));
                this.checkValuesChange.emit(this.checkValues);
                this.checkedChange.emit(this.checkeds);
            }
            this.updateAllCheckboxStatus();
        }
    };
    /**
     * @param {?=} emit
     * @return {?}
     */
    DatagridComponent.prototype.checkAllRows = /**
     * @param {?=} emit
     * @return {?}
     */
    function (emit) {
        if (emit === void 0) { emit = true; }
        if (this.canOperateCheckbox()) {
            this.dfs.checkAll();
            this.dgs.checkAll.emit();
            if (emit) {
                this.checkAll.emit();
            }
        }
    };
    /**
     * @param {?} id
     * @param {?=} emit
     * @return {?}
     */
    DatagridComponent.prototype.unCheckRow = /**
     * @param {?} id
     * @param {?=} emit
     * @return {?}
     */
    function (id, emit) {
        if (emit === void 0) { emit = true; }
        if (this.canOperateCheckbox()) {
            if (this.currentCell && this.currentCell.rowId == id) {
                this.cancelSelectCell();
            }
            if (emit) {
                this.dfs.checkRecord(id, false);
            }
            else {
                this.unCheckRows([id]);
            }
            this.updateAllCheckboxStatus();
        }
    };
    /** 清空钩选行，默认只清空当前页的钩选
     * clearAll: 清空所有 默认为 false; 否则仅清空当前页的钩选数据。
     */
    /**
     * 清空钩选行，默认只清空当前页的钩选
     * clearAll: 清空所有 默认为 false; 否则仅清空当前页的钩选数据。
     * @param {?=} clearAll
     * @param {?=} emitUnCheckAll
     * @return {?}
     */
    DatagridComponent.prototype.clearCheckeds = /**
     * 清空钩选行，默认只清空当前页的钩选
     * clearAll: 清空所有 默认为 false; 否则仅清空当前页的钩选数据。
     * @param {?=} clearAll
     * @param {?=} emitUnCheckAll
     * @return {?}
     */
    function (clearAll, emitUnCheckAll) {
        if (clearAll === void 0) { clearAll = false; }
        if (emitUnCheckAll === void 0) { emitUnCheckAll = true; }
        this.dfs.clearCheckeds(clearAll);
        this.checkValues = [];
        this.cancelSelectCell();
        if (emitUnCheckAll) {
            this.dgs.uncheckAll.emit();
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.clearAll = /**
     * @return {?}
     */
    function () {
        this.selectedRow = null;
        this.checkValues = [];
        this.dfs.clearAll();
        this.dgs.uncheckAll.emit();
        this.updateAllCheckboxStatus();
    };
    //#endregion
    //#region Resize Column
    //#endregion
    //#region Resize Column
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    DatagridComponent.prototype.getResizeProxyPosLeft = 
    //#endregion
    //#region Resize Column
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var target = (/** @type {?} */ (e.target));
        /** @type {?} */
        var dgRect = this.getBoundingClientRect(this.dgContainer);
        /** @type {?} */
        var td = target.parentElement;
        /** @type {?} */
        var tdLeft = td.getBoundingClientRect().left;
        /** @type {?} */
        var deltaEdge = td.offsetWidth - (e.pageX - tdLeft);
        this.resizeColumnInfo.proxyLineEdge = deltaEdge;
        this.resizeColumnInfo.startWidth = td.offsetWidth;
        this.resizeColumnInfo.startX = e.pageX;
        this.resizeColumnInfo.left = tdLeft - dgRect.left - 1 + deltaEdge;
        return e.pageX - dgRect.left - 1 + deltaEdge;
    };
    /**
     * @private
     * @param {?=} show
     * @return {?}
     */
    DatagridComponent.prototype.toggleResizeProxy = /**
     * @private
     * @param {?=} show
     * @return {?}
     */
    function (show) {
        if (show === void 0) { show = true; }
        /** @type {?} */
        var display = 'block';
        if (!show) {
            display = 'none';
        }
        this.render2.setStyle(this.resizeProxyBg.nativeElement, 'display', display);
        this.render2.setStyle(this.resizeProxy.nativeElement, 'display', display);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    DatagridComponent.prototype.onColumnResizeBegin = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.resizeProxy) {
            this.render2.setStyle(document.body, 'cursor', 'e-resize');
            /** @type {?} */
            var proxy = this.resizeProxy.nativeElement;
            /** @type {?} */
            var proxyPosLeft = this.getResizeProxyPosLeft(e);
            this.render2.setStyle(proxy, 'left', proxyPosLeft + 'px');
            /** @type {?} */
            var top_1 = 0;
            if ((this.enableFilterRow || this.enableSmartFilter) && this.showFilterBar) {
                top_1 += this.filterBarHeight;
            }
            if (this.showRowGroupPanel) {
                top_1 += this.rowGroupPanelHeight;
            }
            this.render2.setStyle(proxy, 'top', top_1 + "px");
            if (!this.autoHeight) {
                this.render2.setStyle(proxy, 'height', (this.height - this.pagerHeight) + 'px');
            }
            else {
                /** @type {?} */
                var bottomH = 0;
                if (this.pagination) {
                    bottomH += this.pagerHeight;
                }
                if (this.showFooter) {
                    bottomH += this.footerHeight;
                }
                this.render2.setStyle(proxy, 'height', "calc(100% - " + bottomH + "px)");
            }
            this.toggleResizeProxy();
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    DatagridComponent.prototype.onColumnResize = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var proxy = this.resizeProxy.nativeElement;
        /** @type {?} */
        var dgRect = this.getBoundingClientRect(this.dgContainer);
        /** @type {?} */
        var proxyPosLeft = e.pageX - dgRect.left - 1 + this.resizeColumnInfo.proxyLineEdge;
        if (proxyPosLeft - this.resizeColumnInfo.left > 20) {
            this.render2.setStyle(proxy, 'left', proxyPosLeft + 'px');
        }
        else {
            this.render2.setStyle(proxy, 'left', (this.resizeColumnInfo.left + 20) + 'px');
        }
        e.stopPropagation();
        e.preventDefault();
    };
    /**
     * @param {?} e
     * @param {?} col
     * @return {?}
     */
    DatagridComponent.prototype.onColumnResizeEnd = /**
     * @param {?} e
     * @param {?} col
     * @return {?}
     */
    function (e, col) {
        var _this = this;
        this.render2.removeStyle(document.body, 'cursor');
        this.toggleResizeProxy(false);
        this.resizeColumnInfo.proxyLineEdge = 0;
        /** @type {?} */
        var newColWidth = this.resizeColumnInfo.startWidth + e.pageX - this.resizeColumnInfo.startX;
        if (newColWidth < 20) {
            newColWidth = 20;
        }
        if (col.width > newColWidth) {
            /** @type {?} */
            var t = col.width - newColWidth;
            if (!this.fitColumns && this.scrollInstance.elementRef.nativeElement.scrollLeft) {
                /** @type {?} */
                var moveLeft = this.scrollInstance.elementRef.nativeElement.scrollLeft - t;
                this.scrollInstance.scrollToX(moveLeft);
            }
        }
        col.width = newColWidth;
        if (!this.nowrap && this.showFooter) {
            this.setFooterHeight();
        }
        if (this.useControlPanel && this.settingService) {
            this.settingService.saveUserConfig(this.id).subscribe((/**
             * @return {?}
             */
            function () {
                _this.dfs.columnResizeEnd();
                _this.dgs.columnResized.emit();
            }));
            return;
        }
        this.dfs.columnResizeEnd();
        this.dgs.columnResized.emit();
        this.updateFixedColumnCssForFastMode(col);
    };
    /** 还原列宽 */
    /**
     * 还原列宽
     * @return {?}
     */
    DatagridComponent.prototype.restituteColumnsSize = /**
     * 还原列宽
     * @return {?}
     */
    function () {
        this.dfs.resizeColumns(true);
        this.dgs.columnResized.emit();
    };
    /** 单元格内容自适应列宽 */
    /**
     * 单元格内容自适应列宽
     * @param {?} col
     * @param {?} th
     * @return {?}
     */
    DatagridComponent.prototype.sizeToContent = /**
     * 单元格内容自适应列宽
     * @param {?} col
     * @param {?} th
     * @return {?}
     */
    function (col, th) {
        if (!this.AutoColumnWidthUseDblclick) {
            return false;
        }
        /** @type {?} */
        var longestText = '';
        /** @type {?} */
        var items = this.data;
        for (var i = items.length - 1; i >= 0; i--) {
            // TFS: 356964 20200203
            /** @type {?} */
            var value = Utils.getValue(col.field, items[i]);
            if (value !== 0) {
                value = value || '';
            }
            /** @type {?} */
            var text = '' + value;
            if (col.formatter && value !== undefined) {
                text = this.colFormatSer.format(value, items[i], col.formatter);
            }
            if (Utils.getBLen(text) > Utils.getBLen(longestText)) {
                longestText = text;
            }
            else {
                this.longTextArea.nativeElement.innerHTML = text;
                /** @type {?} */
                var w1 = this.longTextArea.nativeElement.offsetWidth;
                this.longTextArea.nativeElement.innerHTML = longestText;
                /** @type {?} */
                var w2 = this.longTextArea.nativeElement.offsetWidth;
                if (w1 > w2) {
                    longestText = text;
                }
            }
        }
        this.longTextArea.nativeElement.innerHTML = longestText;
        /** @type {?} */
        var maxWidth = this.longTextArea.nativeElement.offsetWidth + 26;
        this.longTextArea.nativeElement.innerHTML = th.nativeElement.innerText;
        /** @type {?} */
        var thMinWidth = this.longTextArea.nativeElement.offsetWidth + 26;
        if (col.sortable) {
            thMinWidth += 24;
        }
        col.width = (maxWidth > thMinWidth ? maxWidth : thMinWidth);
        /** @type {?} */
        var colIndex = this.flatColumns.findIndex((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.field === col.field; }));
        if (colIndex === this.flatColumns.length - 1) {
            col.width += 6;
        }
        this.dfs.resizeColumns();
        this.dgs.columnResized.emit();
    };
    //#endregion
    //#region Changes
    //#endregion
    //#region Changes
    /**
     * @return {?}
     */
    DatagridComponent.prototype.getChanges = 
    //#endregion
    //#region Changes
    /**
     * @return {?}
     */
    function () {
        return this.dfs.getChanges();
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.acceptChanges = /**
     * @return {?}
     */
    function () {
        this.dfs.acceptChanges();
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.rejectChanges = /**
     * @return {?}
     */
    function () {
        this.dfs.rejectChanges();
    };
    //#endregion
    //#region CRUD
    //#endregion
    //#region CRUD
    /**
     * @param {?} row
     * @return {?}
     */
    DatagridComponent.prototype.appendRow = 
    //#endregion
    //#region CRUD
    /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        this.cancelEdit(null);
        this.dfs.appendRow(row);
        this.dataChange.emit(this.dfs.getData());
        this.rowAppended.emit();
    };
    /**
     * @param {?} rowId
     * @param {?} newData
     * @return {?}
     */
    DatagridComponent.prototype.updateRow = /**
     * @param {?} rowId
     * @param {?} newData
     * @return {?}
     */
    function (rowId, newData) {
        this.dfs.updateRow(rowId, newData);
        this.dataChange.emit(this.dfs.getData());
        this.rowUpdated.emit();
    };
    /**
     * @param {?} rowId
     * @return {?}
     */
    DatagridComponent.prototype.refreshRow = /**
     * @param {?} rowId
     * @return {?}
     */
    function (rowId) {
        /** @type {?} */
        var row = this.dfs.findRow(rowId);
        if (row && row.data) {
            this.dfs.rowUpdate$.emit(row);
        }
        else {
            this.writeConsole('Can not found row by id. id: ' + rowId);
        }
    };
    /**
     * @param {?=} rowId
     * @return {?}
     */
    DatagridComponent.prototype.deleteRow = /**
     * @param {?=} rowId
     * @return {?}
     */
    function (rowId) {
        this.cancelEdit(rowId, false);
        if (!rowId) {
            if (this.selectValue) {
                rowId = this.selectValue;
            }
            else {
                throw new Error("\u5220\u9664\u884C\u65F6\u4E3B\u952E\u6807\u8BC6ID \u4E0D\u80FD\u4E3A\u7A7A\u3002");
            }
        }
        /** @type {?} */
        var deleteRow = this.dfs.deleteRow(rowId);
        this.dataChange.emit(this.dfs.getData());
        this.currentCell = null;
        this.dfs.updateProperty('currentCell', null);
        this.cd.detectChanges();
        this.rowDeleted.emit(deleteRow);
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.validateRow = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.insertRow = /**
     * @return {?}
     */
    function () { };
    //#endregion
    //#region Scrolling
    //#endregion
    //#region Scrolling
    /**
     * @return {?}
     */
    DatagridComponent.prototype.scrollToLeft = 
    //#endregion
    //#region Scrolling
    /**
     * @return {?}
     */
    function () {
        if (this.scrollInstance) {
            this.scrollInstance.scrollToLeft(0, 200);
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.scrollToRight = /**
     * @return {?}
     */
    function () {
        if (this.scrollInstance) {
            this.scrollInstance.scrollToRight(0, 200);
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.scrollToTop = /**
     * @return {?}
     */
    function () {
        if (this.scrollInstance) {
            this.scrollInstance.scrollToTop(0, 100);
            this.dfs.updateProperty('scrollInfo', { y: 0, x: 0 });
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.scrollToBottom = /**
     * @return {?}
     */
    function () {
        if (this.scrollInstance) {
            this.scrollInstance.scrollToBottom(0, 100);
        }
    };
    //#endregion
    //#endregion
    /**
     * @private
     * @param {?} cols
     * @param {?} field
     * @param {?=} readonly
     * @return {?}
     */
    DatagridComponent.prototype._setColumnReadonly = 
    //#endregion
    /**
     * @private
     * @param {?} cols
     * @param {?} field
     * @param {?=} readonly
     * @return {?}
     */
    function (cols, field, readonly) {
        if (readonly === void 0) { readonly = true; }
        if (cols && cols.length && field) {
            /** @type {?} */
            var col = cols.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field === field; }));
            if (col) {
                col.readonly = readonly;
            }
        }
    };
    /**
     * @param {?} field
     * @param {?=} readonly
     * @return {?}
     */
    DatagridComponent.prototype.setColumnReadonly = /**
     * @param {?} field
     * @param {?=} readonly
     * @return {?}
     */
    function (field, readonly) {
        if (readonly === void 0) { readonly = true; }
        this._setColumnReadonly(this.colGroup.leftFixed, field, readonly);
        this._setColumnReadonly(this.colGroup.rightFixed, field, readonly);
        this._setColumnReadonly(this.colGroup.normalColumns, field, readonly);
    };
    // 是否为多表头
    // 是否为多表头
    /**
     * @return {?}
     */
    DatagridComponent.prototype.isMultiHeader = 
    // 是否为多表头
    /**
     * @return {?}
     */
    function () {
        return this.columns && this.columns.length > 1 && Array.isArray(this.columns[1]);
    };
    /**
     * @param {?} fields
     * @param {?=} visible
     * @return {?}
     */
    DatagridComponent.prototype.toggleVisibleColumn = /**
     * @param {?} fields
     * @param {?=} visible
     * @return {?}
     */
    function (fields, visible) {
        if (visible === void 0) { visible = true; }
        if (!this.isMultiHeader()) {
            this.columns.forEach((/**
             * @param {?} cols
             * @return {?}
             */
            function (cols) {
                fields.forEach((/**
                 * @param {?} field
                 * @return {?}
                 */
                function (field) {
                    /** @type {?} */
                    var col = cols.find((/**
                     * @param {?} c
                     * @return {?}
                     */
                    function (c) { return c.field === field || c.id === field; }));
                    if (col) {
                        col.visible = visible;
                    }
                }));
            }));
        }
        else {
            // 多表头
            /** @type {?} */
            var allCols_1 = flatten(this.columns);
            allCols_1.forEach((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                if (p.origianlColSpan === undefined) {
                    p.origianlColSpan = p.colspan;
                }
            }));
            fields.forEach((/**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                /** @type {?} */
                var _col = allCols_1.find((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) { return col.field === field || col.id === field; }));
                if (_col) {
                    if (_col.visible === visible) {
                        return;
                    }
                    _col.visible = visible;
                    /** @type {?} */
                    var parents = DatagridColumnsHelper.getParentColumns(_col, allCols_1);
                    /** @type {?} */
                    var childs = DatagridColumnsHelper.getChildColumns(_col, allCols_1);
                    childs.forEach((/**
                     * @param {?} c
                     * @return {?}
                     */
                    function (c) {
                        c.visible = visible;
                    }));
                    if (visible && childs.length) {
                        _col.colspan = _col.origianlColSpan;
                    }
                    /** @type {?} */
                    var _colspan_1 = _col.colspan || 1;
                    parents.forEach((/**
                     * @param {?} p
                     * @return {?}
                     */
                    function (p) {
                        if (!visible) {
                            p.colspan = p.colspan - _colspan_1;
                        }
                        else {
                            /** @type {?} */
                            var _childs = allCols_1.filter((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n.parentId === p.id && n.visible; }));
                            p.colspan = _childs.reduce((/**
                             * @param {?} r
                             * @param {?} c
                             * @return {?}
                             */
                            function (r, c) {
                                r = r + (c.colspan || 1);
                                return r;
                            }), 0);
                        }
                        p.visible = !!p.colspan;
                    }));
                }
            }));
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    DatagridComponent.prototype.getColumn = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var allCols = flatten(this.columns);
        return allCols.find((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field === field || n.id === field; }));
    };
    /**
     * @param {?} field
     * @param {?=} reload
     * @return {?}
     */
    DatagridComponent.prototype.showColumn = /**
     * @param {?} field
     * @param {?=} reload
     * @return {?}
     */
    function (field, reload) {
        if (reload === void 0) { reload = true; }
        if (typeof field === 'string') {
            this.toggleVisibleColumn([field], true);
        }
        else {
            this.toggleVisibleColumn(field, true);
        }
        this.columnsChanged(reload);
    };
    /**
     * @param {?} field
     * @param {?=} reload
     * @return {?}
     */
    DatagridComponent.prototype.hideColumn = /**
     * @param {?} field
     * @param {?=} reload
     * @return {?}
     */
    function (field, reload) {
        if (reload === void 0) { reload = true; }
        if (typeof field === 'string') {
            this.toggleVisibleColumn([field], false);
        }
        else {
            this.toggleVisibleColumn(field, false);
        }
        this.columnsChanged(reload);
    };
    /**
     * @param {?} field
     * @param {?} columnObject
     * @param {?=} detectChange
     * @return {?}
     */
    DatagridComponent.prototype.updateColumn = /**
     * @param {?} field
     * @param {?} columnObject
     * @param {?=} detectChange
     * @return {?}
     */
    function (field, columnObject, detectChange) {
        if (detectChange === void 0) { detectChange = true; }
        this.columns.forEach((/**
         * @param {?} cols
         * @return {?}
         */
        function (cols) {
            /** @type {?} */
            var column = cols.find((/**
             * @param {?} col
             * @return {?}
             */
            function (col) { return col.field === field; }));
            if (column) {
                column = Object.assign(column, columnObject);
            }
        }));
        if (detectChange) {
            this.columnsChanged();
        }
    };
    /**
     * @param {?} field
     * @param {?} formatter
     * @param {?=} detectChange
     * @return {?}
     */
    DatagridComponent.prototype.setColumnFormatter = /**
     * @param {?} field
     * @param {?} formatter
     * @param {?=} detectChange
     * @return {?}
     */
    function (field, formatter, detectChange) {
        if (detectChange === void 0) { detectChange = true; }
        this.columns.forEach((/**
         * @param {?} cols
         * @return {?}
         */
        function (cols) {
            /** @type {?} */
            var column = cols.find((/**
             * @param {?} col
             * @return {?}
             */
            function (col) { return col.field === field; }));
            if (column) {
                column.formatter = formatter;
            }
        }));
        if (detectChange) {
            this.columnsChanged();
        }
    };
    /**
     * @param {?} field
     * @param {?} formatterOptions
     * @param {?=} detectChange
     * @return {?}
     */
    DatagridComponent.prototype.updateColumnFormatterOptions = /**
     * @param {?} field
     * @param {?} formatterOptions
     * @param {?=} detectChange
     * @return {?}
     */
    function (field, formatterOptions, detectChange) {
        if (detectChange === void 0) { detectChange = true; }
        this.columns.forEach((/**
         * @param {?} cols
         * @return {?}
         */
        function (cols) {
            /** @type {?} */
            var column = cols.find((/**
             * @param {?} col
             * @return {?}
             */
            function (col) { return col.field === field; }));
            if (column && column.formatter) {
                /** @type {?} */
                var colFormatter = (/** @type {?} */ (column.formatter));
                colFormatter.options = colFormatter.options || {};
                colFormatter.options = Object.assign(colFormatter.options, formatterOptions || {});
            }
        }));
        if (detectChange) {
            this.columnsChanged();
        }
    };
    /**
     * @param {?} field
     * @param {?} title
     * @param {?=} detectChange
     * @return {?}
     */
    DatagridComponent.prototype.setColumnTitle = /**
     * @param {?} field
     * @param {?} title
     * @param {?=} detectChange
     * @return {?}
     */
    function (field, title, detectChange) {
        if (detectChange === void 0) { detectChange = true; }
        this.columns.forEach((/**
         * @param {?} cols
         * @return {?}
         */
        function (cols) {
            /** @type {?} */
            var column = cols.find((/**
             * @param {?} col
             * @return {?}
             */
            function (col) { return col.field === field; }));
            if (column) {
                column.title = title;
            }
        }));
        if (detectChange) {
            this.columnsChanged();
        }
    };
    /**
     * 排序
     * @param sortName 排序字段，如： 'name,age'
     * @param sortOrder 排序方式，如：'desc, asc'
     */
    /**
     * 排序
     * @param {?=} sortName 排序字段，如： 'name,age'
     * @param {?=} sortOrder 排序方式，如：'desc, asc'
     * @return {?}
     */
    DatagridComponent.prototype.sort = /**
     * 排序
     * @param {?=} sortName 排序字段，如： 'name,age'
     * @param {?=} sortOrder 排序方式，如：'desc, asc'
     * @return {?}
     */
    function (sortName, sortOrder) {
        if (sortName === null || sortName === '' || sortOrder === null || sortOrder === '') {
            this.clearSort();
        }
        else {
            if (sortName && sortOrder) {
                // this.updateSortInfo(sortName, sortOrder);
                this.sortName = sortName;
                this.sortOrder = sortOrder;
                this.dfs.setSortInfo(this.sortName, this.sortOrder);
            }
            if (!this.remoteSort) {
                this.dfs.clientSort();
            }
            this.onColumnSorted();
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.clearSort = /**
     * @return {?}
     */
    function () {
        this.sortName = '';
        this.sortOrder = '';
        this.dfs.setSortInfo('', '');
        if (!this.remoteSort) {
            if (this.data && this.data.length) {
                this.dfs.clearSort();
            }
        }
        this.onColumnSorted();
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.onColumnSorted = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var params = null;
        if (this.sortName && this.sortOrder) {
            /** @type {?} */
            var orders_1 = this.sortOrder.split(',');
            params = this.sortName.split(',').reduce((/**
             * @param {?} r
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            function (r, n, i) {
                r[n] = orders_1[i] || 'asc';
                return r;
            }), {});
        }
        if (!this.remoteSort) {
            this.dfs.clientSort();
        }
        this.columnSorted.emit(params);
    };
    /**
     * @param {?} newSortName
     * @param {?} newSortOrder
     * @return {?}
     */
    DatagridComponent.prototype.updateSortInfo = /**
     * @param {?} newSortName
     * @param {?} newSortOrder
     * @return {?}
     */
    function (newSortName, newSortOrder) {
        var _this = this;
        /** @type {?} */
        var sortName = this.sortName;
        /** @type {?} */
        var sortOrder = this.sortOrder;
        /** @type {?} */
        var sortFields = [];
        /** @type {?} */
        var sortOrders = [];
        if (sortName) {
            sortFields = sortName.split(',');
            sortOrders = sortOrder.split(',');
        }
        /** @type {?} */
        var _sortFields = newSortName.split(',');
        /** @type {?} */
        var _sortOrders = newSortOrder.split(',');
        _sortFields.forEach((/**
         * @param {?} nField
         * @param {?} nIndex
         * @return {?}
         */
        function (nField, nIndex) {
            /** @type {?} */
            var colOrder = _sortOrders[nIndex] || 'asc';
            /** @type {?} */
            var newOrder = colOrder;
            /** @type {?} */
            var i = sortFields.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n === nField; }));
            if (i >= 0) {
                /** @type {?} */
                var _order = sortOrders[i] === 'asc' ? 'desc' : 'asc';
                newOrder = _order;
                if (_this.multiSort && newOrder === 'asc') {
                    newOrder = undefined;
                    sortFields.splice(i, 1);
                    sortOrders.splice(i, 1);
                }
                else {
                    sortOrders[i] = _order;
                }
            }
            else {
                if (_this.multiSort) {
                    sortFields.push(nField);
                    sortOrders.push(colOrder);
                }
                else {
                    sortFields = [nField];
                    sortOrders = [colOrder];
                }
            }
        }));
        this.sortName = sortFields.join(',');
        this.sortOrder = sortOrders.join(',');
    };
    /** 列设置 */
    /**
     * 列设置
     * @param {?} $event
     * @return {?}
     */
    DatagridComponent.prototype.showControlPanel = /**
     * 列设置
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        /** @type {?} */
        var self = this;
        if (this.useControlPanel && this.settingService) {
            this.checkSettingHttp();
            this.settingService.show(self);
        }
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.checkSettingHttp = /**
     * @return {?}
     */
    function () {
        if (!this.settingService.httpRestService || !this.settingService.httpRestService.befRepository) {
            /** @type {?} */
            var settingsHttp = this.inject.get(GRID_SETTINGS_HTTP, null);
            this.settingService.httpRestService = settingsHttp;
        }
    };
    /**
     * @param {?=} flag
     * @return {?}
     */
    DatagridComponent.prototype.disableHeader = /**
     * @param {?=} flag
     * @return {?}
     */
    function (flag) {
        if (flag === void 0) { flag = true; }
        this.dgs.disableHeader.emit(flag);
    };
    /** 获取用户个性化设置 */
    /**
     * 获取用户个性化设置
     * @private
     * @param {?} settings
     * @return {?}
     */
    DatagridComponent.prototype.userProfileSetting = /**
     * 获取用户个性化设置
     * @private
     * @param {?} settings
     * @return {?}
     */
    function (settings) {
        var _this = this;
        var sortInfo = settings.sortInfo, viewColumns = settings.viewColumns, groupField = settings.groupField, columnFormat = settings.columnFormat, expandGroupRows = settings.expandGroupRows;
        /** @type {?} */
        var _sortName;
        /** @type {?} */
        var _sortOrder;
        if (sortInfo) {
            var sortName = sortInfo.sortName, sortOrder = sortInfo.sortOrder;
            _sortName = sortName;
            _sortOrder = sortOrder;
            if (sortName && sortName.length) {
                this.sortName = sortName.join(',');
                if (sortOrder) {
                    this.sortOrder = sortOrder.join(',');
                }
            }
            this['__sortInfo'] = sortInfo;
        }
        if (viewColumns && viewColumns.length) {
            this.columns = this.columns.map((/**
             * @param {?} cols
             * @return {?}
             */
            function (cols) {
                _this.settingService.updateColumnFormat(cols, columnFormat, _this);
                return _this.settingService.newVisibleOrderColumns(cols, viewColumns, columnFormat, _this);
            }));
            this.addControlCol();
            this.columns.forEach((/**
             * @param {?} cols
             * @return {?}
             */
            function (cols) {
                cols.forEach((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) {
                    if (_sortName && _sortName.length) {
                        /** @type {?} */
                        var i = _sortName.indexOf(col.field);
                        if (i > -1) {
                            col.order = _sortOrder[i];
                        }
                    }
                }));
            }));
        }
        if (this.groupRows && (groupField !== null && groupField !== undefined)) {
            this.groupField = groupField;
            this.expandGroupRows = expandGroupRows === undefined ? this.expandGroupRows : expandGroupRows;
        }
    };
    // 是否为当前活动的表格
    // 是否为当前活动的表格
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.isActived = 
    // 是否为当前活动的表格
    /**
     * @private
     * @return {?}
     */
    function () {
        return DomHandler.hasClass(this.dgContainer.nativeElement, this._active_datagrid_cls);
    };
    // 清理无效的DOM
    // 清理无效的DOM
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.cleanDom = 
    // 清理无效的DOM
    /**
     * @private
     * @return {?}
     */
    function () {
        // 清理 TOOL-TIP
        /** @type {?} */
        var tips = document.querySelectorAll('.datagrid-cell-tooltip');
        if (tips && tips.length) {
            tips.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                n.remove();
            }));
        }
    };
    /**
     * @param {?} col
     * @param {?} rowData
     * @return {?}
     */
    DatagridComponent.prototype.cellIsReadOnly = /**
     * @param {?} col
     * @param {?} rowData
     * @return {?}
     */
    function (col, rowData) {
        /** @type {?} */
        var readOnly = false;
        if (this.disableRow) {
            readOnly = this.disableRow(rowData);
        }
        if (!readOnly) {
            if (col.readonly !== undefined) {
                if (typeof col.readonly === 'boolean') {
                    readOnly = col.readonly;
                }
                else if (typeof col.readonly === 'function') {
                    readOnly = col.readonly(rowData);
                }
            }
        }
        return readOnly;
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.groupFieldChanged = /**
     * @private
     * @return {?}
     */
    function () {
        this.columnsChanged();
        if (this.settingService) {
            this.checkSettingHttp();
            this.settingService.saveUserConfig(this.id).subscribe();
        }
        this.groupFieldChange.emit({ newGroupField: this.groupField, grid: this });
    };
    /**
     * @param {?} field
     * @return {?}
     */
    DatagridComponent.prototype.removeGroupField = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var fields = this.groupField.split(',');
        /** @type {?} */
        var delIdx = fields.indexOf(field);
        if (delIdx > -1) {
            fields.splice(delIdx, 1).join(',');
        }
        this.groupField = fields.join(',');
        this.toggleVisibleColumn([field], true);
        this.groupFieldChanged();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridComponent.prototype.clearAllGrouppingField = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        this.showLoading();
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var fields = _this.groupField.split(',');
            _this.groupField = '';
            _this.toggleVisibleColumn(fields, true);
            _this.groupFieldChanged();
            _this.closeLoading();
        }));
    };
    /**
     * @param {?} groupFields
     * @return {?}
     */
    DatagridComponent.prototype.setGroupFields = /**
     * @param {?} groupFields
     * @return {?}
     */
    function (groupFields) {
        this.groupField = groupFields;
        this.columnsChanged();
    };
    /**
     * @param {?=} active
     * @return {?}
     */
    DatagridComponent.prototype.activeDataGrid = /**
     * @param {?=} active
     * @return {?}
     */
    function (active) {
        var _this = this;
        if (active === void 0) { active = true; }
        /** @type {?} */
        var grids = document.querySelectorAll('.f-datagrid.datagrid-active');
        if (grids.length) {
            grids.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                _this.render2.removeClass(n, _this._active_datagrid_cls);
            }));
        }
        if (active) {
            this.render2.addClass(this.dgContainer.nativeElement, this._active_datagrid_cls);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridComponent.prototype.onDatagridContainerFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (!this.disabled) {
            this.activeDataGrid();
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.setShadowColumnForFastMode = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.fast) {
            /** @type {?} */
            var fixedLeft_1 = this.flatColumns.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.fixed === 'left'; }));
            /** @type {?} */
            var fixedRight = this.flatColumns.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.fixed === 'right'; }));
            if (fixedLeft_1 && fixedLeft_1.length) {
                /** @type {?} */
                var leftWidthTotal_1 = 0;
                if (this.showCheckbox) {
                    leftWidthTotal_1 += 36;
                }
                if (this.showLineNumber) {
                    leftWidthTotal_1 += this.lineNumberWidth;
                }
                fixedLeft_1.forEach((/**
                 * @param {?} n
                 * @param {?} index
                 * @return {?}
                 */
                function (n, index) {
                    leftWidthTotal_1 += index ? fixedLeft_1[index - 1].width : 0;
                    n.left = leftWidthTotal_1;
                }));
                fixedLeft_1[fixedLeft_1.length - 1]['leftShadowCol'] = true;
                this.dfs.getColumn(fixedLeft_1[fixedLeft_1.length - 1].field)['leftShadowCol'] = true;
            }
            if (fixedRight && fixedRight.length) {
                fixedRight[0]['rightShadowCol'] = true;
                /** @type {?} */
                var rightWidthTotal_1 = fixedRight.reduce((/**
                 * @param {?} r
                 * @param {?} c
                 * @return {?}
                 */
                function (r, c) {
                    return r + c.width;
                }), 0);
                fixedRight.forEach((/**
                 * @param {?} n
                 * @param {?} index
                 * @return {?}
                 */
                function (n, index) {
                    rightWidthTotal_1 -= n.width;
                    n.right = rightWidthTotal_1;
                }));
                this.dfs.getColumn(fixedRight[0].field)['rightShadowCol'] = true;
            }
        }
    };
    // 单元对齐方式样式动态生成
    // 单元对齐方式样式动态生成
    /**
     * @private
     * @return {?}
     */
    DatagridComponent.prototype.setCellStyle = 
    // 单元对齐方式样式动态生成
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.flatColumns || !this.flatColumns.length) {
            return;
        }
        /** @type {?} */
        var cssarr = [];
        /** @type {?} */
        var verticalAlign = (/**
         * @param {?} column
         * @return {?}
         */
        function (column) {
            /** @type {?} */
            var va = 'center';
            switch (column.valign) {
                case 'top':
                    va = 'flex-start';
                    break;
                case 'bottom':
                    va = 'flex-end';
                    break;
                default:
                    va = 'center';
                    break;
            }
            return va;
        });
        /** @type {?} */
        var horizontalAlign = (/**
         * @param {?} column
         * @return {?}
         */
        function (column) {
            /** @type {?} */
            var ha = 'flex-start';
            if (column.align === 'right') {
                ha = 'flex-end';
            }
            else if (column.align === 'center') {
                ha = 'center';
            }
            return ha;
        });
        this.setShadowColumnForFastMode();
        this.flatColumns.forEach((/**
         * @param {?} col
         * @return {?}
         */
        function (col) {
            /** @type {?} */
            var css = _this.customStyleKey() + " .cell-text-align__" + col.field + " {align-items: " + verticalAlign(col) + ", justify-content: " + horizontalAlign(col) + "}";
            cssarr.push(css);
            if (_this.fast) {
                if (col.fixed === 'left' || col.fixed === 'right') {
                    /** @type {?} */
                    var fixed = _this.customStyleKey() + " .f-datagrid-fast__fixed-" + col.fixed + "[field=\"" + col.field + "\"]{";
                    if (col.fixed === 'left') {
                        fixed += "left: " + col.left + "px}";
                    }
                    if (col.fixed === 'right') {
                        fixed += "right: " + col.right + "px}";
                    }
                    cssarr.push(fixed);
                }
            }
        }));
        this.dgs.appendCssRules(cssarr);
    };
    /**
     * @private
     * @param {?} col
     * @return {?}
     */
    DatagridComponent.prototype.updateFixedColumnCssForFastMode = /**
     * @private
     * @param {?} col
     * @return {?}
     */
    function (col) {
        if (this.fast) {
            // update css.
            /** @type {?} */
            var colIndex = this.flatColumns.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field === col.field; }));
            /** @type {?} */
            var nextColumn = this.flatColumns[colIndex + 1];
            this.setShadowColumnForFastMode();
            if (nextColumn && nextColumn.fixed) {
                /** @type {?} */
                var ruleName = this.customStyleKey() + " .f-datagrid-fast__fixed-" + nextColumn.fixed + "[field=\"" + nextColumn.field + "\"]";
                /** @type {?} */
                var stylecss = ruleName + '{' + nextColumn.fixed + ':' + nextColumn[nextColumn.fixed] + 'px}';
                this.dgs.appendCssRules([stylecss]);
            }
        }
    };
    /**
     * @param {?} groupRowIndex
     * @return {?}
     */
    DatagridComponent.prototype.expandGroupRow = /**
     * @param {?} groupRowIndex
     * @return {?}
     */
    function (groupRowIndex) {
        this.dgs.toggleGroupRow$.emit({ expand: true, groupRowIndex: groupRowIndex });
    };
    /**
     * @param {?} groupRowIndex
     * @return {?}
     */
    DatagridComponent.prototype.collapseGroupRow = /**
     * @param {?} groupRowIndex
     * @return {?}
     */
    function (groupRowIndex) {
        this.dgs.toggleGroupRow$.emit({ expand: false, groupRowIndex: groupRowIndex });
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.expandAllGroupRows = /**
     * @return {?}
     */
    function () {
        this.dgs.toggleAllGroupRows$.emit({ expand: true });
    };
    /**
     * @return {?}
     */
    DatagridComponent.prototype.collapseAllGroupRows = /**
     * @return {?}
     */
    function () {
        this.dgs.toggleAllGroupRows$.emit({ expand: false });
    };
    DatagridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-datagrid',
                    template: "<!--\r\n * @Author: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @Date: 2019-08-10 11:02:50\r\n * @LastEditors: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @LastEditTime: 2019-11-18 15:48:39\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n -->\r\n\r\n<div #datagridContainer *ngIf=\"!useHtmlTable\"  tabindex=\"0\" style=\"outline: 0;\" hidefocus=\"true\" class=\"f-datagrid\" [ngStyle]=\"gridSize\"  [attr.id]=\"id\"\r\n    [class.f-datagrid-rowhover]=\"rowHover\" [class.f-datagrid-bordered]=\"showBorder\" [class.f-datagrid-wrap]=\"!nowrap\" [class.f-datagrid-strip]=\"striped\"\r\n    [class.f-datagrid-mergecell]=\"mergeCell\" [class.f-datagrid-enable-highlight]=\"enableHighlightCell\" [class.f-datagrid-fast]=\"fast\" \r\n    [class.highlight-allowedit-cell]=\"enableEditCellStyle && editable\" [class.scrollbar-allways-show]=\"scrollBarShowMode === 'allways'\" [class.scroolbar-arrows]=\"showScrollArrow\"\r\n    [class.f-datagrid-sm]=\"sizeType === 'sm'\" [class.f-datagrid-lg]=\"sizeType === 'lg'\" [class.f-datagrid-xl]=\"sizeType === 'xl'\"\r\n    (focus)=\"onDatagridContainerFocus($event)\" >\r\n    <div class=\"f-datagrid-column-drop-panel d-flex flex-row\" *ngIf=\"showRowGroupPanel\"\r\n        [style.height.px]=\"rowGroupPanelHeight\" [style.top.px]=\"showFilterBar ? (filterBarHeight): 0\"\r\n        [attr.placeholder]=\"groupField ? '': groupRowPanelPlaceholder\" [style.pointer-events]=\"editable ? 'none': ''\">\r\n        <div class=\"row-group-fields flex-fill\" drop-column style=\"display: inline-block!important;\">\r\n            <div class=\"group-field smooth-dnd-draggable-wrapper\" *ngFor=\"let f of groupFields$ | async\">{{ dfs.getColumn(f)?.title }}\r\n                <span class=\"f-icon f-icon-x\" title=\"{{ 'datagrid.groupRow.removeColumn'| locale }}\" (click)=\"removeGroupField(f)\"></span>\r\n            </div>\r\n        </div>\r\n        <button class=\"f-datagrid-clear-group-field btn btn-light ml-auto\"\r\n        title=\"{{'datagrid.groupRow.clearTip' | locale}}\" (click)=\"clearAllGrouppingField($event)\" [style.display]=\"groupField ? '' : 'none'\">\r\n            <span class=\"f-icon f-icon-remove\"></span> {{'datagrid.groupRow.clear' | locale}}\r\n        </button>\r\n    </div>\r\n    \r\n    <filter-toolbar #filterText *ngIf=\"enableFilterRow && showFilterBar\"></filter-toolbar>\r\n    <smart-filter-toolbar #smartfiltertoolbar *ngIf=\"enableSmartFilter && showFilterBar\"\r\n    [height]=\"filterBarHeight\"\r\n    [filterData]=\"smartFilterResult?.controlData || []\" \r\n    (clearFilters)=\"onClearSmartFilters($event)\"\r\n    (removeFilter)=\"onRemoveSmartFilterItem($event)\"\r\n    [padding]=\"showBorder && filterBarHeight ? '3px': ''\"\r\n    (resize)=\"onFilterBarResize($event)\"\r\n    (filterChange)=\"onSmartFilterChange($event)\"></smart-filter-toolbar>\r\n\r\n    <datagrid-header class=\"d-flex flex-fill\" *ngIf=\"showHeader\" #header [fast]=\"fast\"\r\n    [columns]=\"columns\" [columnsGroup]=\"colGroup\" [height]=\"realHeaderHeight\"\r\n    [style.height.px]=\"realHeaderHeight\" style=\"position: relative;width:100%;\" \r\n    [enableDragColumn]=\"enableDragColumn\" [wrapHeader]=\"headerWrap\"\r\n    [enableFilterRow]=\"enableFilterRow\" [scrollbarMode]=\"scrollBarShowMode\"></datagrid-header>\r\n\r\n\r\n    <datagrid-footer [height]=\"footerHeight\" [width]=\"footerWidth\" [columnsGroup]=\"colGroup\" [position]=\"'top'\"\r\n    [columns]=\"colGroup?.normalColumns\" [data]=\"footerData | async\" \r\n    [hasFixedColumns]=\"colGroup?.leftFixed && colGroup?.leftFixed?.length\" [fast]=\"fast\"\r\n    *ngIf=\"(footerPosition==='top' || footerPosition === 'both') && showFooter && ((ds && ds.rows && ds.rows.length) || (footerData | async).length)\"></datagrid-footer>\r\n\r\n    <datagrid-body [columnsGroup]=\"colGroup\" [data]=\"ds.rows | paginate: pagerOpts\" (dataChange)=\"setCurrentPagerData($event)\"\r\n        [startRowIndex]=\"ds.index\" [checkedRows]=\"checkedRows\" cell-tooltip [canvasWidth]=\"colGroup?.totalWidth\"\r\n        [topHideHeight]=\"ds.top\" [bottomHideHeight]=\"ds.bottom\" [footerHeight]=\"footerHeight\"\r\n        [scrollBarMode]=\"scrollBarShowMode\" [contextMenuItems]=\"contextMenus\"  [fast]=\"fast\"></datagrid-body>\r\n\r\n    <datagrid-footer [height]=\"footerHeight\" [width]=\"footerWidth\" [columnsGroup]=\"colGroup\" [position]=\"'bottom'\"\r\n    [columns]=\"colGroup?.normalColumns\" [data]=\"footerData | async\"  [fast]=\"fast\"\r\n    [hasFixedColumns]=\"colGroup?.leftFixed && colGroup?.leftFixed?.length\" \r\n    *ngIf=\"(footerPosition==='bottom' || footerPosition === 'both') && showFooter && ((ds && ds.rows && ds.rows.length) || (footerData | async).length)\"></datagrid-footer>\r\n    \r\n    <datagrid-pager *ngIf=\"pagination\" #dgPager \r\n        [showPageList]=\"showPageList\"\r\n        [id]=\"pagerOpts.id\" [locked]=\"lockPagination\"\r\n        [showPageInfo]=\"showPageInfo\"\r\n        [viewMode]=\"pagerViewMode\"\r\n        [showPageNumber] = \"showPageNumber\"\r\n        [maxSize]=\"pagerLabelSize\"\r\n        [showSelectedList]=\"showSelectedList && multiSelect\"\r\n        [selectedData]=\"checkedRows\"\r\n        [showGotoInput]=\"showGotoInput\"\r\n        (pageChange)=\"onPageChange($event)\"\r\n        (pageSizeChange)=\"onPageSizeChange($event)\"\r\n        (removeSelectedItem)=\"onRemoveSelectedItem($event)\"\r\n        (clearSelectedItem)=\"onClearSelectedItem($event)\"\r\n        [listItemFormatter]=\"selectedItemFormatter\"\r\n        [contentTemplate]=\"pagerContentTemplate\"\r\n        [data]=\"footerData | async\"\r\n        [pagerPos]=\"pagerPos\"\r\n        ></datagrid-pager>\r\n\r\n    <div class=\"f-datagrid-resize-bg\" #resizeProxyBg></div>\r\n    <div #resizeProxy class=\"f-datagrid-resize-proxy\" *ngIf=\"resizeColumn\"></div>\r\n    \r\n    <datagrid-loading *ngIf=\"loading\"></datagrid-loading>\r\n    <div style=\"position: absolute; left: -1000px; top: -1000px;visibility: hidden;\" #longTextArea></div>\r\n    <div class=\"f-datagrid-disabled\" style=\"position: absolute;\r\n        background: #fff;\r\n        height: 100%;\r\n        width: 100%;\r\n        z-index: 99;\r\n        opacity: .3;\" *ngIf=\"disabled\">\r\n    </div>\r\n</div>\r\n\r\n\r\n<div #datagridContainer\r\nclass=\"f-datagrid f-datagrid-htmltable\" [attr.id]=\"id\"\r\n[class.f-datagrid-rowhover]=\"rowHover\"\r\n[class.f-datagrid-bordered]=\"showBorder\"\r\n[class.f-datagrid-wrap]=\"!nowrap\"\r\n[class.f-datagrid-strip]=\"striped\" \r\n[class.f-datagrid-md]=\"sizeType === 'md'\"\r\n[class.f-datagrid-sm]=\"sizeType === 'sm'\" [class.f-datagrid-lg]=\"sizeType === 'lg'\" [class.f-datagrid-xl]=\"sizeType === 'xl'\"\r\n*ngIf=\"useHtmlTable\" style=\"border-right: 0px; border-bottom: 0px; overflow: auto\">\r\n\r\n    <auto-height [columnsGroup]=\"colGroup\" [columns]=\"columns\" [data]=\"ds.rows\"></auto-height>\r\n</div>\r\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        DatagridFacadeService,
                        DatagridService,
                        DatagridSmartFilterService
                    ],
                    exportAs: 'datagrid',
                    styles: [".f-datagrid-header table{\n            background-color: #F1F3F7;\n        }"]
                }] }
    ];
    /** @nocollapse */
    DatagridComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: Injector },
        { type: NgZone },
        { type: DatagridFacadeService },
        { type: DatagridService },
        { type: ApplicationRef },
        { type: DomSanitizer },
        { type: Renderer2 }
    ]; };
    DatagridComponent.propDecorators = {
        fast: [{ type: Input }],
        pos: [{ type: HostBinding, args: ['style.position',] }],
        hostCls: [{ type: HostBinding, args: ['class.f-datagrid-full',] }],
        autoHeightCls: [{ type: HostBinding, args: ['class.f-datagrid-auto-height',] }],
        useThemes: [{ type: Input }],
        id: [{ type: Input }],
        useHtmlTable: [{ type: Input }],
        autoHeight: [{ type: Input }],
        maxHeight: [{ type: Input }],
        showBorder: [{ type: Input }],
        striped: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        showHeader: [{ type: Input }],
        headerHeight: [{ type: Input }],
        headerWrap: [{ type: Input }],
        showFooter: [{ type: Input }],
        footerHeight: [{ type: Input }],
        footerDataFrom: [{ type: Input }],
        footerTemplate: [{ type: Input }],
        footerPosition: [{ type: Input }],
        footerStyler: [{ type: Input }],
        rowHeight: [{ type: Input }],
        sizeType: [{ type: Input }],
        fit: [{ type: Input }],
        fitColumns: [{ type: Input }],
        autoFitColumns: [{ type: Input }],
        disabled: [{ type: Input }],
        scrollBarShowMode: [{ type: Input }],
        scrollBarOptions: [{ type: Input }],
        showScrollArrow: [{ type: Input }],
        resizeColumn: [{ type: Input }],
        showLineNumber: [{ type: Input }],
        lineNumberTitle: [{ type: Input }],
        lineNumberWidth: [{ type: Input }],
        rowHover: [{ type: Input }],
        clickToEdit: [{ type: Input }],
        lockPagination: [{ type: Input }],
        pagination: [{ type: Input }],
        pagerContentTemplate: [{ type: Input }],
        pagerPos: [{ type: Input }],
        pagerViewMode: [{ type: Input }],
        pagerOnServer: [{ type: Input }],
        pageList: [{ type: Input }],
        pageIndex: [{ type: Input }],
        pageSize: [{ type: Input }],
        pagerHeight: [{ type: Input }],
        showPageList: [{ type: Input }],
        showPageInfo: [{ type: Input }],
        showPageNumber: [{ type: Input }],
        pagerLabelSize: [{ type: Input }],
        showGotoInput: [{ type: Input }],
        enableMorePageSelect: [{ type: Input }],
        showSelectedList: [{ type: Input }],
        selectedItemFormatter: [{ type: Input }],
        cellTipTimer: [{ type: Input }],
        controlPaginationState: [{ type: Input }],
        total: [{ type: Input }],
        enableSelectRow: [{ type: Input }],
        multiSelect: [{ type: Input }],
        showCheckbox: [{ type: Input }],
        showAllCheckbox: [{ type: Input }],
        onlySelectSelf: [{ type: Input }],
        checkOnSelect: [{ type: Input }],
        selectOnCheck: [{ type: Input }],
        selectionMode: [{ type: Input }],
        keepSelect: [{ type: Input }],
        useBlankWhenDataIsEmpty: [{ type: Input }],
        emptyDataHeight: [{ type: Input }],
        emptyMessage: [{ type: Input }],
        emptyTemplate: [{ type: Input }],
        idField: [{ type: Input }],
        url: [{ type: Input }],
        data: [{ type: Input }],
        footerData: [{ type: Input }],
        endEditByInvalid: [{ type: Input }],
        columns: [{ type: Input }],
        fields: [{ type: Input }],
        nowrap: [{ type: Input }],
        virtualized: [{ type: Input }],
        virtualizedAsyncLoad: [{ type: Input }],
        rowStyler: [{ type: Input }],
        editMode: [{ type: Input }],
        editable: [{ type: Input }],
        enableEditCellStyle: [{ type: Input }],
        selectOnEditing: [{ type: Input }],
        editorHeight: [{ type: Input }],
        remoteSort: [{ type: Input }],
        sortName: [{ type: Input }],
        sortOrder: [{ type: Input }],
        multiSort: [{ type: Input }],
        hoverRowCls: [{ type: Input }],
        enableDragColumn: [{ type: Input }],
        rowGroupPanelHeight: [{ type: Input }],
        groupRows: [{ type: Input }],
        groupFooter: [{ type: Input }],
        expandGroupRows: [{ type: Input }],
        groupFooterStyler: [{ type: Input }],
        groupSummaryPosition: [{ type: Input }],
        groupCellColSpan: [{ type: Input }],
        groupField: [{ type: Input }],
        showGroupColumn: [{ type: Input }],
        groupFormatter: [{ type: Input }],
        groupStyler: [{ type: Input }],
        showRowGroupPanel: [{ type: Input }],
        AutoColumnWidthUseDblclick: [{ type: Input }],
        disableRow: [{ type: Input }],
        useDefaultFilter: [{ type: Input }],
        enableSmartFilter: [{ type: Input }],
        enableFilterRow: [{ type: Input }],
        remoteFilter: [{ type: Input }],
        showFilterBar: [{ type: Input }],
        filterBarHeight: [{ type: Input }],
        filterRowHeight: [{ type: Input }],
        conditions: [{ type: Input }],
        selectValue: [{ type: Input }],
        checkValues: [{ type: Input }],
        selectValues: [{ type: Input }],
        mergeCell: [{ type: Input }],
        mergeFields: [{ type: Input }],
        enableClientSortForMergeCell: [{ type: Input }],
        useControlPanel: [{ type: Input }],
        enableSimpleMode: [{ type: Input }],
        controlPanelMode: [{ type: Input }],
        enableScheme: [{ type: Input }],
        defaultSchemeName: [{ type: Input }],
        stopPropagation: [{ type: Input }],
        closeOtherGridEditor: [{ type: Input }],
        clearSelectionsWhenDataIsEmpty: [{ type: Input }],
        enableContextMenu: [{ type: Input }],
        contextMenus: [{ type: Input }],
        selectValueChange: [{ type: Output }],
        checkValuesChange: [{ type: Output }],
        selectValuesChange: [{ type: Output }],
        beforeEdit: [{ type: Input }],
        beginEdit: [{ type: Output }],
        afterEdit: [{ type: Input }],
        endEdit: [{ type: Output }],
        cancelEdited: [{ type: Output }],
        scrollY: [{ type: Output }],
        pageSizeChanged: [{ type: Output }],
        pageChanged: [{ type: Output }],
        loadSuccess: [{ type: Output }],
        filterChanged: [{ type: Output }],
        beforeSelect: [{ type: Input }],
        beforeUnselect: [{ type: Input }],
        beforeCheck: [{ type: Input }],
        beforeUncheck: [{ type: Input }],
        beforeSortColumn: [{ type: Input }],
        enableHighlightCell: [{ type: Input }],
        checkedRowsDataFromSource: [{ type: Input }],
        editcellWhenTabKeydwon: [{ type: Input }],
        beforeClickCell: [{ type: Output }],
        dblclickRow: [{ type: Output }],
        selectChanged: [{ type: Output }],
        unSelect: [{ type: Output }],
        selectAll: [{ type: Output }],
        unSelectAll: [{ type: Output }],
        scrollYLoad: [{ type: Output }],
        checked: [{ type: Output }],
        unChecked: [{ type: Output }],
        checkAll: [{ type: Output }],
        unCheckAll: [{ type: Output }],
        checkedChange: [{ type: Output }],
        columnSorted: [{ type: Output }],
        rowClick: [{ type: Output }],
        rowAppended: [{ type: Output }],
        rowDeleted: [{ type: Output }],
        rowUpdated: [{ type: Output }],
        dataChange: [{ type: Output }],
        lastCellEnterHandler: [{ type: Output }],
        groupFieldChange: [{ type: Output }],
        columnMoved: [{ type: Output }],
        cellClick: [{ type: Output }],
        dgColumns: [{ type: ContentChildren, args: [DatagridColumnDirective,] }],
        dgPager: [{ type: ViewChild, args: ['dgPager',] }],
        resizeProxy: [{ type: ViewChild, args: ['resizeProxy',] }],
        resizeProxyBg: [{ type: ViewChild, args: ['resizeProxyBg',] }],
        dgContainer: [{ type: ViewChild, args: ['datagridContainer',] }],
        longTextArea: [{ type: ViewChild, args: ['longTextArea',] }],
        smartFilterToolbar: [{ type: ViewChild, args: ['smartfiltertoolbar',] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return DatagridComponent;
}());
export { DatagridComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.auther;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.version;
    /** @type {?} */
    DatagridComponent.prototype.__component_type__;
    /**
     * 启用性能优化版，默认为 false
     * @type {?}
     */
    DatagridComponent.prototype.fast;
    /** @type {?} */
    DatagridComponent.prototype.pos;
    /** @type {?} */
    DatagridComponent.prototype.hostCls;
    /**
     * 使用主题
     * @type {?}
     */
    DatagridComponent.prototype.useThemes;
    /** @type {?} */
    DatagridComponent.prototype.id;
    /**
     * 自动高度 - 启用此属性后，就是一个普普通通的 table , 不能编辑，不能排序，不能分页，不能... 就是一凡胎
     * @type {?}
     */
    DatagridComponent.prototype.useHtmlTable;
    /**
     * 自动高度
     * @type {?}
     */
    DatagridComponent.prototype.autoHeight;
    /**
     * 配合 autoHeight 一起使用，当此值大于0 时，且autoHeight 为true时，数据总行高达到最大高度时，将停止自动高度并使用内部滚动条
     * @type {?}
     */
    DatagridComponent.prototype.maxHeight;
    /**
     * 显示边框
     * @type {?}
     */
    DatagridComponent.prototype.showBorder;
    /**
     * 启用斑马线
     * @type {?}
     */
    DatagridComponent.prototype.striped;
    /**
     * 宽度
     * @type {?}
     */
    DatagridComponent.prototype.width;
    /**
     * 高度
     * @type {?}
     */
    DatagridComponent.prototype.height;
    /**
     * 显示表头
     * @type {?}
     */
    DatagridComponent.prototype.showHeader;
    /**
     * 表头-单行高度
     * @type {?}
     */
    DatagridComponent.prototype.headerHeight;
    /**
     * 表头折行
     * @type {?}
     */
    DatagridComponent.prototype.headerWrap;
    /**
     * 显示页脚
     * @type {?}
     */
    DatagridComponent.prototype.showFooter;
    /**
     * 页脚默认行高
     * @type {?}
     */
    DatagridComponent.prototype.footerHeight;
    /**
     * 页脚数据来源, 默认为 client
     * @type {?}
     */
    DatagridComponent.prototype.footerDataFrom;
    /**
     * 页脚合计行模板
     * @type {?}
     */
    DatagridComponent.prototype.footerTemplate;
    /**
     * 合计行显示位置，默认为底部
     * @type {?}
     */
    DatagridComponent.prototype.footerPosition;
    /**
     * 页脚行自定义样式
     * @type {?}
     */
    DatagridComponent.prototype.footerStyler;
    /**
     * 行高
     * @type {?}
     */
    DatagridComponent.prototype.rowHeight;
    /**
     * 设置grid 行高尺寸
     * sm: 小，md: 正常， lg: 大，xl: 超大
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._sizeType;
    /**
     * 填充容器
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._fit;
    /**
     * 如果为真，则自动展开/收缩列的大小以适合网格宽度并防止水平滚动。
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._fitColumns;
    /**
     * 根据grid的宽度自动调整列宽度
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._autoFitColumns;
    /**
     * 禁用
     * @type {?}
     */
    DatagridComponent.prototype.disabled;
    /**
     * 滚动条显示模式，默认为 auto
     * @type {?}
     */
    DatagridComponent.prototype.scrollBarShowMode;
    /** @type {?} */
    DatagridComponent.prototype.scrollBarOptions;
    /**
     * 当滚动一直显示时，是否显示两端的箭头
     * @type {?}
     */
    DatagridComponent.prototype.showScrollArrow;
    /**
     * 可拖动列设置列宽
     * @type {?}
     */
    DatagridComponent.prototype.resizeColumn;
    /**
     * 显示行号
     * @type {?}
     */
    DatagridComponent.prototype.showLineNumber;
    /**
     * 行号表头字符
     * @type {?}
     */
    DatagridComponent.prototype.lineNumberTitle;
    /**
     * 行号宽度
     * @type {?}
     */
    DatagridComponent.prototype.lineNumberWidth;
    /**
     * 鼠标滑过效果开关，默认开启
     * @type {?}
     */
    DatagridComponent.prototype.rowHover;
    /**
     * 允许编辑时，单击进入编辑状态; false为双击进入编辑
     * @type {?}
     */
    DatagridComponent.prototype.clickToEdit;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._lockPagination;
    /**
     * 分页信息
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.__pagination;
    /**
     * 分页组件自定义内容区模板
     * @type {?}
     */
    DatagridComponent.prototype.pagerContentTemplate;
    /**
     * 分页条对齐展示方式， left, right, center   默认为 right
     * @type {?}
     */
    DatagridComponent.prototype.pagerPos;
    /**
     * 分页条显示模式， default, simple
     * @type {?}
     */
    DatagridComponent.prototype.pagerViewMode;
    /**
     * 启用服务器端分页
     * @type {?}
     */
    DatagridComponent.prototype.pagerOnServer;
    /**
     * 每页记录数
     * @type {?}
     */
    DatagridComponent.prototype.pageList;
    /**
     * 当前页码
     * @type {?}
     */
    DatagridComponent.prototype.pageIndex;
    /**
     * 每页记录数
     * @type {?}
     */
    DatagridComponent.prototype.pageSize;
    /**
     * 分页区高度
     * @type {?}
     */
    DatagridComponent.prototype.pagerHeight;
    /**
     * 显示每页记录数
     * @type {?}
     */
    DatagridComponent.prototype.showPageList;
    /**
     * 显示分页信息
     * @type {?}
     */
    DatagridComponent.prototype.showPageInfo;
    /**
     * 显示页码
     * @type {?}
     */
    DatagridComponent.prototype.showPageNumber;
    /**
     * 显示页码最大数量
     * @type {?}
     */
    DatagridComponent.prototype.pagerLabelSize;
    /**
     * 显示转至指定页码输入框
     * @type {?}
     */
    DatagridComponent.prototype.showGotoInput;
    /**
     * 启用跨页多选
     * @type {?}
     */
    DatagridComponent.prototype.enableMorePageSelect;
    /**
     * 显示选中列表
     * @type {?}
     */
    DatagridComponent.prototype.showSelectedList;
    /**
     * 选中列表中，每条记录显示的内容
     * @type {?}
     */
    DatagridComponent.prototype.selectedItemFormatter;
    /**
     * 单元格信息提示延时，默认 1000ms
     * @type {?}
     */
    DatagridComponent.prototype.cellTipTimer;
    /**
     * grid 内部处理分页状态
     * @type {?}
     */
    DatagridComponent.prototype.controlPaginationState;
    /**
     * 总记录数
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._total;
    /**
     * 启用选中行
     * @type {?}
     */
    DatagridComponent.prototype.enableSelectRow;
    /**
     * 启用多选
     * @type {?}
     */
    DatagridComponent.prototype.multiSelect;
    /**
     * 启用多选时，是否显示checkbox
     * @type {?}
     */
    DatagridComponent.prototype.showCheckbox;
    /**
     * 显示全选checkbox
     * @type {?}
     */
    DatagridComponent.prototype.showAllCheckbox;
    /**
     * 当启用多选时，点击行选中，只允许且只有一行被选中。, 默认为 true
     * @type {?}
     */
    DatagridComponent.prototype.onlySelectSelf;
    /**
     * 启用多选且显示checkbox, 选中行同时钩选, 默认为 false
     * @type {?}
     */
    DatagridComponent.prototype.checkOnSelect;
    /**
     * 启用多选且显示checkbox, 钩选后选中行, 默认为 false
     * @type {?}
     */
    DatagridComponent.prototype.selectOnCheck;
    /**
     * 行选中模式，custom: 自定义， default: 仿Windows资源管理器选中
     * 注意： 此属性仅多选，显示复选框有效
     * 默认值： custom
     * addTime: 2021-12-14 by LUCAS HUANG
     * @type {?}
     */
    DatagridComponent.prototype.selectionMode;
    /**
     * 单击行选中后，在次点击不会被取消选中状态;
     * @type {?}
     */
    DatagridComponent.prototype.keepSelect;
    /**
     * 当数据为空时，使用空白显示，且高度为一行的高度。 默认为 false
     * @type {?}
     */
    DatagridComponent.prototype.useBlankWhenDataIsEmpty;
    /**
     * 数据为空时的高度
     * @type {?}
     */
    DatagridComponent.prototype.emptyDataHeight;
    /**
     * 空数据时，显示的提示文本
     * @type {?}
     */
    DatagridComponent.prototype.emptyMessage;
    /**
     * 无数据时的模板
     * @type {?}
     */
    DatagridComponent.prototype.emptyTemplate;
    /**
     * 主键字段
     * @type {?}
     */
    DatagridComponent.prototype.idField;
    /**
     * 请求数据源的URL
     * @type {?}
     */
    DatagridComponent.prototype.url;
    /**
     * 数据源
     * @type {?}
     */
    DatagridComponent.prototype.data;
    /**
     * 页脚数据
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._footerData;
    /**
     * 验证不通过时可以结束编辑
     * @type {?}
     */
    DatagridComponent.prototype.endEditByInvalid;
    /**
     * 列集合
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._fields;
    /**
     * 禁止数据折行，默认值：true,即在一行显示，不折行。
     * @type {?}
     */
    DatagridComponent.prototype.nowrap;
    /**
     * 虚拟加载
     * @type {?}
     */
    DatagridComponent.prototype.virtualized;
    /**
     * 是否启用异步加载数据
     * @type {?}
     */
    DatagridComponent.prototype.virtualizedAsyncLoad;
    /**
     * 行样式
     * @type {?}
     */
    DatagridComponent.prototype.rowStyler;
    /**
     * 编辑方式： row(整行编辑)、cell(单元格编辑)；默认为 row
     * @type {?}
     */
    DatagridComponent.prototype.editMode;
    /**
     * 编辑状态
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._editable;
    /**
     * 启用可编辑单元格样式。
     * @type {?}
     */
    DatagridComponent.prototype.enableEditCellStyle;
    /**
     * 进入编辑状态时选是否选中文本；默认为 false
     * 仅文本框支持此特性
     * @type {?}
     */
    DatagridComponent.prototype.selectOnEditing;
    /**
     * 编辑器高度
     * @type {?}
     */
    DatagridComponent.prototype.editorHeight;
    /**
     * 启用远端排序
     * @type {?}
     */
    DatagridComponent.prototype.remoteSort;
    /**
     * 排序字段
     * @type {?}
     */
    DatagridComponent.prototype.sortName;
    /**
     * 排序方式 asc | desc
     * @type {?}
     */
    DatagridComponent.prototype.sortOrder;
    /**
     * 允许多列排序
     * @type {?}
     */
    DatagridComponent.prototype.multiSort;
    /** @type {?} */
    DatagridComponent.prototype.hoverRowCls;
    /**
     * 允许拖拽列顺序
     * @type {?}
     */
    DatagridComponent.prototype.enableDragColumn;
    /**
     * 行分组面板高度，默认 50PX
     * @type {?}
     */
    DatagridComponent.prototype.rowGroupPanelHeight;
    /**
     * 启用分组行
     * @type {?}
     */
    DatagridComponent.prototype.groupRows;
    /**
     * 启用行分组合计行
     * @type {?}
     */
    DatagridComponent.prototype.groupFooter;
    /**
     * 分组行是否展开，默认为 展开
     * @type {?}
     */
    DatagridComponent.prototype.expandGroupRows;
    /**
     * 分组合计行自定义样式：
     * 允许的值为
     * - { cls: 'cssclassname, ', style: { color: 'red', border: 1px solid } }
     * - (groupFooterRowData): { cls: 'cssclassname, ', style: { color: 'red', border: 1px solid } } => {}
     * @type {?}
     */
    DatagridComponent.prototype.groupFooterStyler;
    /**
     * 合计数据显示位置
     * inGroupRow: 与分组在同一行，分别相关合计字段对齐
     * groupFooterRow: 在分组数据最后增加一行
     * 默认为 groupFooterRow
     * @type {?}
     */
    DatagridComponent.prototype.groupSummaryPosition;
    /**
     * 分组信息合并列数
     * 默认为 1
     * @type {?}
     */
    DatagridComponent.prototype.groupCellColSpan;
    /**
     * 分组字段名称, 多字段分组以英文逗号分隔
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._groupField;
    /** @type {?} */
    DatagridComponent.prototype.groupFields$;
    /**
     * 显示分组列
     * @type {?}
     */
    DatagridComponent.prototype.showGroupColumn;
    /**
     * 分组格式化
     * @type {?}
     */
    DatagridComponent.prototype.groupFormatter;
    /**
     * 分组行样式
     * @type {?}
     */
    DatagridComponent.prototype.groupStyler;
    /**
     * 显示分组列面板。默认为 false
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._showRowGroupPanel;
    /**
     * 双击表头适应内容宽度
     * @type {?}
     */
    DatagridComponent.prototype.AutoColumnWidthUseDblclick;
    /**
     * 行钩选及选中禁用表达式
     * @type {?}
     */
    DatagridComponent.prototype.disableRow;
    /**
     * 使用内部过滤器; 默认为 false
     * @type {?}
     */
    DatagridComponent.prototype.useDefaultFilter;
    /**
     * 过滤图标与排序图标合并，此属性与 enableFilterRow 互斥
     * @type {?}
     */
    DatagridComponent.prototype.enableSmartFilter;
    /**
     * 显示过滤行
     * @type {?}
     */
    DatagridComponent.prototype.enableFilterRow;
    /**
     * 服务器端过滤
     * @type {?}
     */
    DatagridComponent.prototype.remoteFilter;
    /**
     * 启用过滤条件显示条
     * @type {?}
     */
    DatagridComponent.prototype.showFilterBar;
    /**
     * 过滤条件汇总条高度，默认 32px
     * @type {?}
     */
    DatagridComponent.prototype.filterBarHeight;
    /** @type {?} */
    DatagridComponent.prototype.filterRowHeight;
    /** @type {?} */
    DatagridComponent.prototype.conditions;
    /** @type {?} */
    DatagridComponent.prototype.selectValue;
    /** @type {?} */
    DatagridComponent.prototype.checkValues;
    /** @type {?} */
    DatagridComponent.prototype.selectValues;
    /**
     * 合并单元格；先支持纵向合并
     * @type {?}
     */
    DatagridComponent.prototype.mergeCell;
    /** @type {?} */
    DatagridComponent.prototype.mergeFields;
    /**
     * 合并单元格数据启用客户端排序
     * @type {?}
     */
    DatagridComponent.prototype.enableClientSortForMergeCell;
    /**
     * 使用高级控制面板(列设置)
     * @type {?}
     */
    DatagridComponent.prototype.useControlPanel;
    /**
     * 启用简洁控制面板模式。默认为 false
     * @type {?}
     */
    DatagridComponent.prototype.enableSimpleMode;
    /**
     * 点击列设置图标，默认打开的控制面板
     * @type {?}
     */
    DatagridComponent.prototype.controlPanelMode;
    /**
     * 启用列设置方案
     * @type {?}
     */
    DatagridComponent.prototype.enableScheme;
    /**
     * 系统预制方案名称
     * @type {?}
     */
    DatagridComponent.prototype.defaultSchemeName;
    /**
     * 阻止click 事件冒泡
     * @type {?}
     */
    DatagridComponent.prototype.stopPropagation;
    /**
     * (202105 弃用)
     * 点击单元格进行编辑状态时，关闭其他Grid的编辑器。默认 false，
     * 多个列表存时，仅有一个列表中有编辑状态，其他列表结束编辑
     * @type {?}
     */
    DatagridComponent.prototype.closeOtherGridEditor;
    /**
     * 当数据源为空时，清空已选记录
     * @type {?}
     */
    DatagridComponent.prototype.clearSelectionsWhenDataIsEmpty;
    /**
     * 启用右键菜单，默认为 false
     * @type {?}
     */
    DatagridComponent.prototype.enableContextMenu;
    /**
     * 右键菜单数据
     * @type {?}
     */
    DatagridComponent.prototype.contextMenus;
    /** @type {?} */
    DatagridComponent.prototype.selectValueChange;
    /** @type {?} */
    DatagridComponent.prototype.checkValuesChange;
    /** @type {?} */
    DatagridComponent.prototype.selectValuesChange;
    /** @type {?} */
    DatagridComponent.prototype.beforeEdit;
    /** @type {?} */
    DatagridComponent.prototype.beginEdit;
    /** @type {?} */
    DatagridComponent.prototype.afterEdit;
    /** @type {?} */
    DatagridComponent.prototype.endEdit;
    /** @type {?} */
    DatagridComponent.prototype.cancelEdited;
    /** @type {?} */
    DatagridComponent.prototype.scrollY;
    /** @type {?} */
    DatagridComponent.prototype.pageSizeChanged;
    /** @type {?} */
    DatagridComponent.prototype.pageChanged;
    /** @type {?} */
    DatagridComponent.prototype.loadSuccess;
    /** @type {?} */
    DatagridComponent.prototype.filterChanged;
    /** @type {?} */
    DatagridComponent.prototype.beforeSelect;
    /** @type {?} */
    DatagridComponent.prototype.beforeUnselect;
    /** @type {?} */
    DatagridComponent.prototype.beforeCheck;
    /** @type {?} */
    DatagridComponent.prototype.beforeUncheck;
    /** @type {?} */
    DatagridComponent.prototype.beforeSortColumn;
    /**
     * 启用选中单元格高亮显示
     * @type {?}
     */
    DatagridComponent.prototype.enableHighlightCell;
    /**
     * 选中的数据始终从数据源中获取. 默认为 false
     * @type {?}
     */
    DatagridComponent.prototype.checkedRowsDataFromSource;
    /**
     * 当前单元格为只读时，使用tab 键跳到下个单元格时，是否允许进入编辑状态，默认为 false;
     * 默认情况下，当前单元格只读，按TAB跳到下个CELL 时，选中CELL ，回车进入编辑。
     * 开启后，下个单元格自动进入编辑状态。
     * @type {?}
     */
    DatagridComponent.prototype.editcellWhenTabKeydwon;
    /**
     * 单元格点击前事件
     * @type {?}
     */
    DatagridComponent.prototype.beforeClickCell;
    /** @type {?} */
    DatagridComponent.prototype.dblclickRow;
    /** @type {?} */
    DatagridComponent.prototype.selectChanged;
    /** @type {?} */
    DatagridComponent.prototype.unSelect;
    /** @type {?} */
    DatagridComponent.prototype.selectAll;
    /** @type {?} */
    DatagridComponent.prototype.unSelectAll;
    /**
     * 异步请求虚拟加载
     * @type {?}
     */
    DatagridComponent.prototype.scrollYLoad;
    /** @type {?} */
    DatagridComponent.prototype.checked;
    /** @type {?} */
    DatagridComponent.prototype.unChecked;
    /** @type {?} */
    DatagridComponent.prototype.checkAll;
    /** @type {?} */
    DatagridComponent.prototype.unCheckAll;
    /** @type {?} */
    DatagridComponent.prototype.checkedChange;
    /** @type {?} */
    DatagridComponent.prototype.columnSorted;
    /** @type {?} */
    DatagridComponent.prototype.rowClick;
    /** @type {?} */
    DatagridComponent.prototype.rowAppended;
    /** @type {?} */
    DatagridComponent.prototype.rowDeleted;
    /** @type {?} */
    DatagridComponent.prototype.rowUpdated;
    /** @type {?} */
    DatagridComponent.prototype.dataChange;
    /**
     * 最后一行的最后单元格回车处理事件
     * @type {?}
     */
    DatagridComponent.prototype.lastCellEnterHandler;
    /**
     * 分组字段变化后
     * @type {?}
     */
    DatagridComponent.prototype.groupFieldChange;
    /**
     * 拖动列改变列显示位置后触发
     * @type {?}
     */
    DatagridComponent.prototype.columnMoved;
    /**
     * 单元格点击事件
     * @type {?}
     */
    DatagridComponent.prototype.cellClick;
    /** @type {?} */
    DatagridComponent.prototype.dgColumns;
    /** @type {?} */
    DatagridComponent.prototype.dgPager;
    /** @type {?} */
    DatagridComponent.prototype.resizeProxy;
    /** @type {?} */
    DatagridComponent.prototype.resizeProxyBg;
    /** @type {?} */
    DatagridComponent.prototype.dgContainer;
    /** @type {?} */
    DatagridComponent.prototype.longTextArea;
    /** @type {?} */
    DatagridComponent.prototype.smartFilterToolbar;
    /** @type {?} */
    DatagridComponent.prototype.colGroup;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._loading;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._selectedRow;
    /** @type {?} */
    DatagridComponent.prototype.ds;
    /** @type {?} */
    DatagridComponent.prototype.pagerOpts;
    /** @type {?} */
    DatagridComponent.prototype.restService;
    /** @type {?} */
    DatagridComponent.prototype.editors;
    /** @type {?} */
    DatagridComponent.prototype.validators;
    /** @type {?} */
    DatagridComponent.prototype.currentCell;
    /** @type {?} */
    DatagridComponent.prototype.flatColumns;
    /** @type {?} */
    DatagridComponent.prototype.footerWidth;
    /** @type {?} */
    DatagridComponent.prototype.clickDelay;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.resizeColumnInfo;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.ro;
    /** @type {?} */
    DatagridComponent.prototype.subscriptions;
    /** @type {?} */
    DatagridComponent.prototype.realHeaderHeight;
    /** @type {?} */
    DatagridComponent.prototype.isSingleClick;
    /** @type {?} */
    DatagridComponent.prototype.docuemntCellClickEvents;
    /** @type {?} */
    DatagridComponent.prototype.documentCellClickHandler;
    /** @type {?} */
    DatagridComponent.prototype.documentCellKeydownEvents;
    /** @type {?} */
    DatagridComponent.prototype.documentCellKeydownHandler;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.modalClickEvent;
    /** @type {?} */
    DatagridComponent.prototype.documentRowKeydownHandler;
    /** @type {?} */
    DatagridComponent.prototype.documentRowEditKeydownHanlder;
    /** @type {?} */
    DatagridComponent.prototype.documentClickEndRowEditHandler;
    /** @type {?} */
    DatagridComponent.prototype.pending;
    /** @type {?} */
    DatagridComponent.prototype.colFormatSer;
    /** @type {?} */
    DatagridComponent.prototype.scrollInstance;
    /** @type {?} */
    DatagridComponent.prototype.localeService;
    /** @type {?} */
    DatagridComponent.prototype.mergeCellInfo;
    /** @type {?} */
    DatagridComponent.prototype.ignoreTarget;
    /** @type {?} */
    DatagridComponent.prototype.clientFilterService;
    /** @type {?} */
    DatagridComponent.prototype.settingService;
    /** @type {?} */
    DatagridComponent.prototype.ControlPanelFeild;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._isResized;
    /** @type {?} */
    DatagridComponent.prototype.gridSize;
    /** @type {?} */
    DatagridComponent.prototype.clientFilterChanged;
    /** @type {?} */
    DatagridComponent.prototype.styleSheetId;
    /** @type {?} */
    DatagridComponent.prototype.groupRowPanelPlaceholder;
    /** @type {?} */
    DatagridComponent.prototype.commonUtils;
    /** @type {?} */
    DatagridComponent.prototype.smartFilterService;
    /** @type {?} */
    DatagridComponent.prototype.smartFilterResult;
    /** @type {?} */
    DatagridComponent.prototype.smartFilterBarHeight;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.idService;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._active_datagrid_cls;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype._blured_datagrid_cls;
    /** @type {?} */
    DatagridComponent.prototype._custom_datagrid_cls;
    /** @type {?} */
    DatagridComponent.prototype.sms;
    /** @type {?} */
    DatagridComponent.prototype.focusRowIndex;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.documentBodyMouseDown;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.farrisInstances;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.currentPagerData;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.resizeTimer;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.debugSer;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.DATA_CHANGED_TIMER;
    /** @type {?} */
    DatagridComponent.prototype.formValidations;
    /** @type {?} */
    DatagridComponent.prototype.trackByRows;
    /** @type {?} */
    DatagridComponent.prototype.onDocumentMouseDown;
    /** @type {?} */
    DatagridComponent.prototype.cd;
    /** @type {?} */
    DatagridComponent.prototype.el;
    /** @type {?} */
    DatagridComponent.prototype.inject;
    /** @type {?} */
    DatagridComponent.prototype.zone;
    /** @type {?} */
    DatagridComponent.prototype.dfs;
    /** @type {?} */
    DatagridComponent.prototype.dgs;
    /**
     * @type {?}
     * @private
     */
    DatagridComponent.prototype.app;
    /**
     * @type {?}
     * @protected
     */
    DatagridComponent.prototype.domSanitizer;
    /** @type {?} */
    DatagridComponent.prototype.render2;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC8iLCJzb3VyY2VzIjpbImxpYi9kYXRhZ3JpZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFXQSxPQUFPLEVBQ0gsU0FBUyxFQUFVLEtBQUssRUFBRSxpQkFBaUIsRUFDM0MsZUFBZSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFDNUMsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFDOUQsTUFBTSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQWlCLGNBQWMsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUM1RyxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFekQsT0FBTyxjQUFjLE1BQU0sMEJBQTBCLENBQUM7QUFDdEQsT0FBTyxFQUFFLEVBQUUsRUFBa0MsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNFLE9BQU8sRUFBdUQsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM1RyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUN6RixPQUFPLEVBQVksZ0JBQWdCLEVBQW1DLE1BQU0sa0JBQWtCLENBQUM7QUFDL0YsT0FBTyxFQUFlLHNCQUFzQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxxQkFBcUIsRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0s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aUQ7Ozs7O0lBQ2pELGlEQUFrRDs7SUFHbEQsaURBQWtDOztJQUVsQyxnQ0FBMEI7O0lBRTFCLDBDQUFtQjs7Ozs7SUFFbkIsa0RBQXFDOzs7OztJQUNyQyw0Q0FBK0Q7Ozs7O0lBQy9ELDZDQUE4Qjs7Ozs7SUFDOUIsd0NBQTJCOzs7OztJQUMzQixxQ0FBc0M7Ozs7O0lBQ3RDLCtDQUFrQzs7SUFHbEMsNENBQXVCOztJQW0zQ3ZCLHdDQUtDOztJQWtFRCxnREEyRUM7O0lBbGdERywrQkFBNEI7O0lBQzVCLCtCQUFxQjs7SUFDckIsbUNBQXVCOztJQUFFLGlDQUFtQjs7SUFDNUMsZ0NBQWlDOztJQUNqQyxnQ0FBMkI7Ozs7O0lBQzNCLGdDQUEyQjs7Ozs7SUFDM0IseUNBQW9DOztJQUNwQyxvQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOS0wOC0wNiAwNzo0MzowN1xyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0xMS0zMCAxNjo0Mjo1MVxyXG4gKiBAUVE6IDEwNTU4MTgyMzlcclxuICogQFZlcnNpb246IHYwLjguMFxyXG4gKiAtIDIwMjEvMDQvMDcg5aKe5YqgIGVuYWJsZUhpZ2hsaWdodENlbGwg5bGe5oCn77yM5pSv5oyB6YCJ5Lit5Y2V5YWD5qC86auY5LquXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtcclxuICAgIENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgVmlld0VuY2Fwc3VsYXRpb24sXHJcbiAgICBDb250ZW50Q2hpbGRyZW4sIFF1ZXJ5TGlzdCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIFJlbmRlcmVyMiwgT25EZXN0cm95LCBPbkNoYW5nZXMsXHJcbiAgICBTaW1wbGVDaGFuZ2VzLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEluamVjdG9yLCBIb3N0QmluZGluZyxcclxuICAgIEFmdGVyQ29udGVudEluaXQsIE5nWm9uZSwgRWxlbWVudFJlZiwgVmlld0NoaWxkLCBBZnRlclZpZXdJbml0LCBBcHBsaWNhdGlvblJlZiwgVGVtcGxhdGVSZWYsIEhvc3RMaXN0ZW5lciwgRG9DaGVja1xyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHsgRm9ybUdyb3VwLCBWYWxpZGF0b3JGbiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IFJlc2l6ZU9ic2VydmVyIGZyb20gJ3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbCc7XHJcbmltcG9ydCB7IG9mLCBTdWJzY3JpcHRpb24sIE9ic2VydmFibGUsIGZyb20sIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBEYXRhQ29sdW1uLCBDdXN0b21TdHlsZSwgTW92ZURpcmVjdGlvbiwgQ29sdW1uR3JvdXAsIENvbHVtbkZpbHRlclR5cGUgfSBmcm9tICcuL3R5cGVzL2RhdGEtY29sdW1uJztcclxuaW1wb3J0IHsgRGF0YWdyaWRGYWNhZGVTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9kYXRhZ3JpZC1mYWNhZGUuc2VydmljZSc7XHJcbmltcG9ydCB7IERhdGFncmlkQ29sdW1uRGlyZWN0aXZlIH0gZnJvbSAnLi9jb21wb25lbnRzL2NvbHVtbnMvZGF0YWdyaWQtY29sdW1uLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IENlbGxJbmZvLCBJZ25vcmVQcm9wZXJ0aWVzLCBJU19HUk9VUF9ST1dfRklFTEQsIFNlbGVjdGVkUm93IH0gZnJvbSAnLi9zZXJ2aWNlcy9zdGF0ZSc7XHJcbmltcG9ydCB7IFJlc3RTZXJ2aWNlLCBEQVRBR1JJRF9SRVNUX1NFUlZJQ0VFIH0gZnJvbSAnLi9zZXJ2aWNlcy9yZXN0LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2RhdGFncmlkLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBHUklEX0VESVRPUlMsIENFTExfU0VMRUNURURfQ0xTLCBHUklEX1ZBTElEQVRPUlMsIFNJWkVfVFlQRSwgR1JJRF9TRVRUSU5HU19TRVJWSUNFLCBHUklEX1NFVFRJTkdTX0hUVFAsIENFTExfRURJVElOR19DTFMsIFRSX1BSRUZJWCwgVFJfSURfUFJFRklYIH0gZnJvbSAnLi90eXBlcy9jb25zdGFudCc7XHJcbmltcG9ydCB7IERvbUhhbmRsZXIgfSBmcm9tICcuL3NlcnZpY2VzL2RvbWhhbmRsZXInO1xyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBDb21tb25VdGlscywgRGVidWdTZXJ2aWNlLCBGYXJyaXNDb21wb25lbnRJbnN0YW5jZVNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbic7XHJcbmltcG9ydCB7IENvbHVtbkZvcm1hdFNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbi9jb2x1bW4nO1xyXG5pbXBvcnQgeyBmbGF0dGVuLCBjbG9uZURlZXAgfSBmcm9tICdsb2Rhc2gtZXMnO1xyXG5pbXBvcnQgeyBTY3JvbGxiYXJEaXJlY3RpdmUgfSBmcm9tICcuL3Njcm9sbGJhci9zY3JvbGxiYXIuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgTG9jYWxlU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9jYWxlJztcclxuaW1wb3J0IHsgQmVmb3JFdmVudFBhcmFtLCBSb3dFZGl0UGFyYW0gfSBmcm9tICcuL3R5cGVzL2V2ZW50LXBhcmFtcyc7XHJcbmltcG9ydCB7IERhdGFncmlkQ29sdW1uc0hlbHBlciB9IGZyb20gJy4vc2VydmljZXMvZGF0YWdyaWQtY29sdW1ucy5oZWxwZXInO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEZpbHRlclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2RhdGFncmlkLWZpbHRlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBTbWFydEZpbHRlclRvb2xiYXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZmlsdGVyLXRvb2xiYXIvc21hcnQtZmlsdGVyLXRvb2xiYXIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRGF0YWdyaWRTbWFydEZpbHRlclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2RhdGFncmlkLXNtYXJ0LWZpbHRlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSWRTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5pbXBvcnQgeyBTZWxlY3Rpb25Nb2RlU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvc2VsZWN0aW9uLW1vZGUuc2VydmljZSc7XHJcbmltcG9ydCB7IENvbnRleHRNZW51SXRlbSB9IGZyb20gJ0BmYXJyaXMvdWktY29udGV4dC1tZW51JztcclxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2ZhcnJpcy1kYXRhZ3JpZCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGF0YWdyaWQuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgRGF0YWdyaWRGYWNhZGVTZXJ2aWNlLFxyXG4gICAgICAgIERhdGFncmlkU2VydmljZSxcclxuICAgICAgICBEYXRhZ3JpZFNtYXJ0RmlsdGVyU2VydmljZVxyXG4gICAgXSxcclxuICAgIGV4cG9ydEFzOiAnZGF0YWdyaWQnLFxyXG4gICAgc3R5bGVzOltcclxuICAgICAgICBgLmYtZGF0YWdyaWQtaGVhZGVyIHRhYmxle1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjFGM0Y3O1xyXG4gICAgICAgIH1gXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMsIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQsIERvQ2hlY2sge1xyXG4gICAgcHJpdmF0ZSBhdXRoZXIgPSBgTHVjYXMgSHVhbmcgLSBRUToxMDU1ODE4MjM5YDtcclxuICAgIHByaXZhdGUgdmVyc2lvbiA9ICcwLjgueCc7XHJcbiAgICBfX2NvbXBvbmVudF90eXBlX18gPSAnRGF0YWdyaWRDb21wb25lbnQnO1xyXG5cclxuICAgIC8qKiDlkK/nlKjmgKfog73kvJjljJbniYjvvIzpu5jorqTkuLogZmFsc2UgKi9cclxuICAgIEBJbnB1dCgpIGZhc3QgPSBmYWxzZTtcclxuXHJcbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLnBvc2l0aW9uJykgcG9zID0gJ3JlbGF0aXZlJztcclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZi1kYXRhZ3JpZC1mdWxsJykgaG9zdENscyA9IGZhbHNlO1xyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mLWRhdGFncmlkLWF1dG8taGVpZ2h0JykgZ2V0IGF1dG9IZWlnaHRDbHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXV0b0hlaWdodDtcclxuICAgIH1cclxuICAgIC8qKiDkvb/nlKjkuLvpopggKi9cclxuICAgIEBJbnB1dCgpIHVzZVRoZW1lcyA9IHRydWU7XHJcbiAgICAvLyDnlKjkuo7lrZjlgqjnlKjmiLfkuKrmgKfljJborr7nva5cclxuICAgIEBJbnB1dCgpIGlkID0gJyc7XHJcbiAgICAvKiog6Ieq5Yqo6auY5bqmIC0g5ZCv55So5q2k5bGe5oCn5ZCO77yM5bCx5piv5LiA5Liq5pmu5pmu6YCa6YCa55qEIHRhYmxlICwg5LiN6IO957yW6L6R77yM5LiN6IO95o6S5bqP77yM5LiN6IO95YiG6aG177yM5LiN6IO9Li4uIOWwseaYr+S4gOWHoeiDjiAqL1xyXG4gICAgQElucHV0KCkgdXNlSHRtbFRhYmxlID0gZmFsc2U7XHJcbiAgICAvKiog6Ieq5Yqo6auY5bqmICovXHJcbiAgICBASW5wdXQoKSBhdXRvSGVpZ2h0ID0gZmFsc2U7XHJcbiAgICAvKiog6YWN5ZCIIGF1dG9IZWlnaHQg5LiA6LW35L2/55So77yM5b2T5q2k5YC85aSn5LqOMCDml7bvvIzkuJRhdXRvSGVpZ2h0IOS4unRydWXml7bvvIzmlbDmja7mgLvooYzpq5jovr7liLDmnIDlpKfpq5jluqbml7bvvIzlsIblgZzmraLoh6rliqjpq5jluqblubbkvb/nlKjlhoXpg6jmu5rliqjmnaEgKi9cclxuICAgIEBJbnB1dCgpIG1heEhlaWdodCA9IDA7XHJcblxyXG4gICAgLyoqIOaYvuekuui+ueahhiAqL1xyXG4gICAgQElucHV0KCkgc2hvd0JvcmRlciA9IGZhbHNlO1xyXG4gICAgLyoqIOWQr+eUqOaWkemprOe6vyAgKi9cclxuICAgIEBJbnB1dCgpIHN0cmlwZWQgPSB0cnVlO1xyXG4gICAgLyoqIOWuveW6piAqL1xyXG4gICAgQElucHV0KCkgd2lkdGggPSA4MDA7XHJcbiAgICAvKiog6auY5bqmICovXHJcbiAgICBASW5wdXQoKSBoZWlnaHQgPSAzMDA7XHJcblxyXG4gICAgLyoqIOaYvuekuuihqOWktCAqL1xyXG4gICAgQElucHV0KCkgc2hvd0hlYWRlciA9IHRydWU7XHJcbiAgICAvKiog6KGo5aS0LeWNleihjOmrmOW6piAqL1xyXG4gICAgQElucHV0KCkgaGVhZGVySGVpZ2h0ID0gMzU7XHJcbiAgICAvKiog6KGo5aS05oqY6KGMICovXHJcbiAgICBASW5wdXQoKSBoZWFkZXJXcmFwID0gZmFsc2U7XHJcbiAgICAvKiog5pi+56S66aG16ISaICovXHJcbiAgICBASW5wdXQoKSBzaG93Rm9vdGVyID0gZmFsc2U7XHJcbiAgICAvKiog6aG16ISa6buY6K6k6KGM6auYICovXHJcbiAgICBASW5wdXQoKSBmb290ZXJIZWlnaHQgPSAyOTtcclxuICAgIC8qKiDpobXohJrmlbDmja7mnaXmupAsIOm7mOiupOS4uiBjbGllbnQgKi9cclxuICAgIEBJbnB1dCgpIGZvb3RlckRhdGFGcm9tOiAnc2VydmVyJyB8ICdjbGllbnQnID0gJ2NsaWVudCc7XHJcbiAgICAvKiog6aG16ISa5ZCI6K6h6KGM5qih5p2/ICovXHJcbiAgICBASW5wdXQoKSBmb290ZXJUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcclxuICAgIC8qKiDlkIjorqHooYzmmL7npLrkvY3nva7vvIzpu5jorqTkuLrlupXpg6ggKi9cclxuICAgIEBJbnB1dCgpIGZvb3RlclBvc2l0aW9uOiAndG9wJyB8ICdib3R0b20nIHwgJ2JvdGgnID0gJ2JvdHRvbSc7XHJcbiAgICAvKiog6aG16ISa6KGM6Ieq5a6a5LmJ5qC35byPICovXHJcbiAgICBASW5wdXQoKSBmb290ZXJTdHlsZXI6ICgpID0+IHsgY2xzPzogc3RyaW5nLCBzdHlsZT86IGFueSB9O1xyXG4gICAgLyoqIOihjOmrmCAqL1xyXG4gICAgQElucHV0KCkgcm93SGVpZ2h0ID0gMjk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva5ncmlkIOihjOmrmOWwuuWvuFxyXG4gICAgICogc206IOWwj++8jG1kOiDmraPluLjvvIwgbGc6IOWkp++8jHhsOiDotoXlpKdcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfc2l6ZVR5cGU6ICdzbScgfCAnbWQnIHwgJ2xnJyB8ICd4bCcgPSAnc20nO1xyXG4gICAgZ2V0IHNpemVUeXBlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaXplVHlwZTtcclxuICAgIH1cclxuICAgIEBJbnB1dCgpIHNldCBzaXplVHlwZSh2YWwpIHtcclxuICAgICAgICB0aGlzLl9zaXplVHlwZSA9IHZhbDtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5aGr5YWF5a655ZmoICovXHJcbiAgICBwcml2YXRlIF9maXQgPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpIGdldCBmaXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpdDtcclxuICAgIH1cclxuICAgIHNldCBmaXQodmFsOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5fZml0ID0gdmFsO1xyXG4gICAgICAgIHRoaXMuaG9zdENscyA9IHZhbDtcclxuICAgIH1cclxuICAgIC8qKiDlpoLmnpzkuLrnnJ/vvIzliJnoh6rliqjlsZXlvIAv5pS257yp5YiX55qE5aSn5bCP5Lul6YCC5ZCI572R5qC85a695bqm5bm26Ziy5q2i5rC05bmz5rua5Yqo44CCICovXHJcbiAgICBwcml2YXRlIF9maXRDb2x1bW5zID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBnZXQgZml0Q29sdW1ucygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZml0Q29sdW1ucztcclxuICAgIH1cclxuICAgIHNldCBmaXRDb2x1bW5zKHZhbDogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLl9maXRDb2x1bW5zICE9PSB2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy5fZml0Q29sdW1ucyA9IHZhbDtcclxuICAgICAgICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRGaXRDb2x1bW5zKHZhbCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRmcy5maXRDb2x1bW5zKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGZzLmluaXRDb2x1bW5zKGZhbHNlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzdGl0dXRlQ29sdW1uc1NpemUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKiDmoLnmja5ncmlk55qE5a695bqm6Ieq5Yqo6LCD5pW05YiX5a695bqmICovXHJcbiAgICBwcml2YXRlIF9hdXRvRml0Q29sdW1ucyA9IGZhbHNlO1xyXG4gICAgQElucHV0KCkgZ2V0IGF1dG9GaXRDb2x1bW5zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hdXRvRml0Q29sdW1ucztcclxuICAgIH1cclxuICAgIHNldCBhdXRvRml0Q29sdW1ucyh2YWwpIHtcclxuICAgICAgICB0aGlzLl9hdXRvRml0Q29sdW1ucyA9IHZhbDtcclxuICAgICAgICB0aGlzLmRmcy51cGRhdGVQcm9wZXJ0eSgnYXV0b0ZpdENvbHVtbnMnLCB2YWwpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDnpoHnlKggKi9cclxuICAgIEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAvKipcclxuICAgICAqIOa7muWKqOadoeaYvuekuuaooeW8j++8jOm7mOiupOS4uiBhdXRvXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIHNjcm9sbEJhclNob3dNb2RlOiAnYXV0bycgfCAnYWxsd2F5cycgPSAnYXV0byc7XHJcbiAgICBASW5wdXQoKSBzY3JvbGxCYXJPcHRpb25zID0ge1xyXG4gICAgICAgIHdpZHRoOiAxOCxcclxuICAgICAgICBoZWlnaHQ6IDE4XHJcbiAgICB9O1xyXG4gICAgLyoqIOW9k+a7muWKqOS4gOebtOaYvuekuuaXtu+8jOaYr+WQpuaYvuekuuS4pOerr+eahOeureWktCAqL1xyXG4gICAgQElucHV0KCkgc2hvd1Njcm9sbEFycm93ID0gZmFsc2U7XHJcblxyXG4gICAgLyoqIOWPr+aLluWKqOWIl+iuvue9ruWIl+WuvSAqL1xyXG4gICAgQElucHV0KCkgcmVzaXplQ29sdW1uID0gdHJ1ZTtcclxuICAgIC8qKiDmmL7npLrooYzlj7cgKi9cclxuICAgIEBJbnB1dCgpIHNob3dMaW5lTnVtYmVyID0gZmFsc2U7XHJcbiAgICAvKiog6KGM5Y+36KGo5aS05a2X56ymICovXHJcbiAgICBASW5wdXQoKSBsaW5lTnVtYmVyVGl0bGUgPSAnJztcclxuICAgIC8qKiDooYzlj7flrr3luqYgKi9cclxuICAgIEBJbnB1dCgpIGxpbmVOdW1iZXJXaWR0aCA9IDM2O1xyXG4gICAgLyoqIOm8oOagh+a7kei/h+aViOaenOW8gOWFs++8jOm7mOiupOW8gOWQryAqL1xyXG4gICAgQElucHV0KCkgcm93SG92ZXIgPSB0cnVlO1xyXG4gICAgLyoqIOWFgeiuuOe8lui+keaXtu+8jOWNleWHu+i/m+WFpee8lui+keeKtuaAgTsgZmFsc2XkuLrlj4zlh7vov5vlhaXnvJbovpEgKi9cclxuICAgIEBJbnB1dCgpIGNsaWNrVG9FZGl0ID0gdHJ1ZTtcclxuXHJcbiAgICBwcml2YXRlIF9sb2NrUGFnaW5hdGlvbiA9IGZhbHNlO1xyXG4gICAgLyoqIOmUgeWumuWIhumhteadoe+8jOmUgeWumuWQjumhteeggeeCueWHu+aXoOaViCAqL1xyXG4gICAgQElucHV0KCkgZ2V0IGxvY2tQYWdpbmF0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NrUGFnaW5hdGlvbjtcclxuICAgIH1cclxuICAgIHNldCBsb2NrUGFnaW5hdGlvbih2YWw6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9sb2NrUGFnaW5hdGlvbiA9IHZhbDtcclxuICAgICAgICBpZiAodGhpcy5kZ1BhZ2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGdQYWdlclt2YWwgPyAnbG9jaycgOiAndW5sb2NrJ10oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWIhumhteS/oeaBryAqL1xyXG4gICAgcHJpdmF0ZSBfX3BhZ2luYXRpb24gPSB0cnVlO1xyXG4gICAgQElucHV0KCkgc2V0IHBhZ2luYXRpb24odmFsKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX19wYWdpbmF0aW9uICE9PSB2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy5fX3BhZ2luYXRpb24gPSB2YWw7XHJcbiAgICAgICAgICAgIHRoaXMuZGZzLnVwZGF0ZVByb3BlcnR5KCdwYWdpbmF0aW9uJywgdmFsKTtcclxuICAgICAgICAgICAgdGhpcy5kZ3Muc2hvd0dyaWRIZWFkZXIuZW1pdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCBwYWdpbmF0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9fcGFnaW5hdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5YiG6aG157uE5Lu26Ieq5a6a5LmJ5YaF5a655Yy65qih5p2/ICovXHJcbiAgICBASW5wdXQoKSBwYWdlckNvbnRlbnRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PiA9IG51bGw7XHJcbiAgICAvKiog5YiG6aG15p2h5a+56b2Q5bGV56S65pa55byP77yMIGxlZnQsIHJpZ2h0LCBjZW50ZXIgICDpu5jorqTkuLogcmlnaHQgICovXHJcbiAgICBASW5wdXQoKSBwYWdlclBvczogJ2xlZnQnfCdjZW50ZXInfCAncmlnaHQnID0gJ3JpZ2h0JztcclxuXHJcbiAgICAvKiog5YiG6aG15p2h5pi+56S65qih5byP77yMIGRlZmF1bHQsIHNpbXBsZSAqL1xyXG4gICAgQElucHV0KCkgcGFnZXJWaWV3TW9kZSA9ICdkZWZhdWx0JztcclxuICAgIC8qKiDlkK/nlKjmnI3liqHlmajnq6/liIbpobUgKi9cclxuICAgIEBJbnB1dCgpIHBhZ2VyT25TZXJ2ZXIgPSB0cnVlO1xyXG4gICAgLyoqIOavj+mhteiusOW9leaVsCAqL1xyXG4gICAgQElucHV0KCkgcGFnZUxpc3QgPSBbMTAsIDIwLCAzMCwgNTAsIDEwMF07XHJcbiAgICAvKiog5b2T5YmN6aG156CBICovXHJcbiAgICBASW5wdXQoKSBwYWdlSW5kZXggPSAxO1xyXG4gICAgLyoqIOavj+mhteiusOW9leaVsCAqL1xyXG4gICAgQElucHV0KCkgcGFnZVNpemUgPSAyMDtcclxuICAgIC8qKiDliIbpobXljLrpq5jluqYgKi9cclxuICAgIEBJbnB1dCgpIHBhZ2VySGVpZ2h0ID0gNTY7XHJcbiAgICAvKiog5pi+56S65q+P6aG16K6w5b2V5pWwICovXHJcbiAgICBASW5wdXQoKSBzaG93UGFnZUxpc3QgPSBmYWxzZTtcclxuICAgIC8qKiDmmL7npLrliIbpobXkv6Hmga8gKi9cclxuICAgIEBJbnB1dCgpIHNob3dQYWdlSW5mbyA9IHRydWU7XHJcbiAgICAvKiog5pi+56S66aG156CBICovXHJcbiAgICBASW5wdXQoKSBzaG93UGFnZU51bWJlciA9IHRydWU7XHJcbiAgICAvKiog5pi+56S66aG156CB5pyA5aSn5pWw6YePICovXHJcbiAgICBASW5wdXQoKSBwYWdlckxhYmVsU2l6ZSA9IDc7XHJcbiAgICAvKiog5pi+56S66L2s6Iez5oyH5a6a6aG156CB6L6T5YWl5qGGICovXHJcbiAgICBASW5wdXQoKSBzaG93R290b0lucHV0ID0gZmFsc2U7XHJcbiAgICAvKiog5ZCv55So6Leo6aG15aSa6YCJICovXHJcbiAgICBASW5wdXQoKSBlbmFibGVNb3JlUGFnZVNlbGVjdCA9IGZhbHNlO1xyXG4gICAgLyoqIOaYvuekuumAieS4reWIl+ihqCAqL1xyXG4gICAgQElucHV0KCkgc2hvd1NlbGVjdGVkTGlzdCA9IGZhbHNlO1xyXG4gICAgLyoqIOmAieS4reWIl+ihqOS4re+8jOavj+adoeiusOW9leaYvuekuueahOWGheWuuSAqL1xyXG4gICAgQElucHV0KCkgc2VsZWN0ZWRJdGVtRm9ybWF0dGVyOiAoZGF0YSkgPT4gc3RyaW5nO1xyXG4gICAgLyoqIOWNleWFg+agvOS/oeaBr+aPkOekuuW7tuaXtu+8jOm7mOiupCAxMDAwbXMgKi9cclxuICAgIEBJbnB1dCgpIGNlbGxUaXBUaW1lciA9IDEwMDA7XHJcbiAgICAvKiogZ3JpZCDlhoXpg6jlpITnkIbliIbpobXnirbmgIEgKi9cclxuICAgIEBJbnB1dCgpIGNvbnRyb2xQYWdpbmF0aW9uU3RhdGUgPSB0cnVlO1xyXG4gICAgLyoqIOaAu+iusOW9leaVsCAqL1xyXG4gICAgcHJpdmF0ZSBfdG90YWwgPSAwO1xyXG4gICAgZ2V0IHRvdGFsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90b3RhbDtcclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoKSBzZXQgdG90YWwodmFsOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl90b3RhbCA9IHZhbDtcclxuICAgICAgICB0aGlzLnBhZ2VyT3B0cy50b3RhbEl0ZW1zID0gdmFsO1xyXG4gICAgICAgIGlmICghdGhpcy5wYWdpbmF0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFnZXJPcHRzLml0ZW1zUGVyUGFnZSA9IHZhbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kZnMuc2V0VG90YWwodmFsKTtcclxuICAgIH1cclxuICAgIC8qKiDlkK/nlKjpgInkuK3ooYwgKi9cclxuICAgIEBJbnB1dCgpIGVuYWJsZVNlbGVjdFJvdyA9IHRydWU7XHJcbiAgICAvKiog5ZCv55So5aSa6YCJICovXHJcbiAgICBASW5wdXQoKSBtdWx0aVNlbGVjdCA9IGZhbHNlO1xyXG4gICAgLyoqIOWQr+eUqOWkmumAieaXtu+8jOaYr+WQpuaYvuekumNoZWNrYm94ICovXHJcbiAgICBASW5wdXQoKSBzaG93Q2hlY2tib3ggPSBmYWxzZTtcclxuICAgIC8qKiDmmL7npLrlhajpgIljaGVja2JveCAqL1xyXG4gICAgQElucHV0KCkgc2hvd0FsbENoZWNrYm94ID0gZmFsc2U7XHJcbiAgICAvKiog5b2T5ZCv55So5aSa6YCJ5pe277yM54K55Ye76KGM6YCJ5Lit77yM5Y+q5YWB6K645LiU5Y+q5pyJ5LiA6KGM6KKr6YCJ5Lit44CCLCDpu5jorqTkuLogdHJ1ZSAqL1xyXG4gICAgQElucHV0KCkgb25seVNlbGVjdFNlbGYgPSB0cnVlO1xyXG4gICAgLyoqIOWQr+eUqOWkmumAieS4lOaYvuekumNoZWNrYm94LCDpgInkuK3ooYzlkIzml7bpkqnpgIksIOm7mOiupOS4uiBmYWxzZSAqL1xyXG4gICAgQElucHV0KCkgY2hlY2tPblNlbGVjdCA9IGZhbHNlO1xyXG4gICAgLyoqIOWQr+eUqOWkmumAieS4lOaYvuekumNoZWNrYm94LCDpkqnpgInlkI7pgInkuK3ooYwsIOm7mOiupOS4uiBmYWxzZSAqL1xyXG4gICAgQElucHV0KCkgc2VsZWN0T25DaGVjayA9IGZhbHNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiDooYzpgInkuK3mqKHlvI/vvIxjdXN0b206IOiHquWumuS5ie+8jCBkZWZhdWx0OiDku79XaW5kb3dz6LWE5rqQ566h55CG5Zmo6YCJ5LitXHJcbiAgICAgKiDms6jmhI/vvJog5q2k5bGe5oCn5LuF5aSa6YCJ77yM5pi+56S65aSN6YCJ5qGG5pyJ5pWIXHJcbiAgICAgKiDpu5jorqTlgLzvvJogY3VzdG9tXHJcbiAgICAgKiBhZGRUaW1lOiAyMDIxLTEyLTE0IGJ5IExVQ0FTIEhVQU5HXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIHNlbGVjdGlvbk1vZGU6ICdjdXN0b20nIHwgJ2RlZmF1bHQnID0gJ2N1c3RvbSc7XHJcbiAgICAvKipcclxuICAgICAqIOWNleWHu+ihjOmAieS4reWQju+8jOWcqOasoeeCueWHu+S4jeS8muiiq+WPlua2iOmAieS4reeKtuaAgTtcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkga2VlcFNlbGVjdCA9IHRydWU7XHJcbiAgICAvKiog5b2T5pWw5o2u5Li656m65pe277yM5L2/55So56m655m95pi+56S677yM5LiU6auY5bqm5Li65LiA6KGM55qE6auY5bqm44CCIOm7mOiupOS4uiBmYWxzZSAqL1xyXG4gICAgQElucHV0KCkgdXNlQmxhbmtXaGVuRGF0YUlzRW1wdHkgPSBmYWxzZTtcclxuXHJcbiAgICAvKiog5pWw5o2u5Li656m65pe255qE6auY5bqmICovXHJcbiAgICBASW5wdXQoKSBlbXB0eURhdGFIZWlnaHQgPSAyNDA7XHJcbiAgICAvKiog56m65pWw5o2u5pe277yM5pi+56S655qE5o+Q56S65paH5pysICovXHJcbiAgICBASW5wdXQoKSBlbXB0eU1lc3NhZ2UgPSAn5pqC5peg5pWw5o2uJztcclxuICAgIC8qKiDml6DmlbDmja7ml7bnmoTmqKHmnb8gKi9cclxuICAgIEBJbnB1dCgpIGVtcHR5VGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4gPSBudWxsO1xyXG5cclxuICAgIC8qKiDkuLvplK7lrZfmrrUgKi9cclxuICAgIEBJbnB1dCgpIGlkRmllbGQgPSAnaWQnO1xyXG4gICAgLyoqIOivt+axguaVsOaNrua6kOeahFVSTCAqL1xyXG4gICAgQElucHV0KCkgdXJsOiBzdHJpbmc7XHJcbiAgICAvKiog5pWw5o2u5rqQICovXHJcbiAgICBASW5wdXQoKSBkYXRhOiBhbnlbXTtcclxuXHJcbiAgICAvKiog6aG16ISa5pWw5o2uICovXHJcbiAgICBwcml2YXRlIF9mb290ZXJEYXRhOiBPYnNlcnZhYmxlPGFueT4gPSBvZihbXSk7XHJcbiAgICBASW5wdXQoKSBnZXQgZm9vdGVyRGF0YSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZm9vdGVyRGF0YTtcclxuICAgIH1cclxuICAgIHNldCBmb290ZXJEYXRhKHJvd3MpIHtcclxuICAgICAgICBpZiAocm93cyAmJiByb3dzLnN1YnNjcmliZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9mb290ZXJEYXRhID0gcm93cztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9mb290ZXJEYXRhID0gb2Yocm93cyB8fCBbXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyb3dzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Rm9vdGVySGVpZ2h0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDpqozor4HkuI3pgJrov4fml7blj6/ku6Xnu5PmnZ/nvJbovpEgKi9cclxuICAgIEBJbnB1dCgpIGVuZEVkaXRCeUludmFsaWQgPSB0cnVlO1xyXG5cclxuICAgIC8qKiDliJfpm4blkIggKi9cclxuICAgIHByaXZhdGUgX2NvbHVtbnMgPSBbXTtcclxuICAgIEBJbnB1dCgpXHJcbiAgICBnZXQgY29sdW1ucygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29sdW1ucztcclxuICAgIH1cclxuICAgIHNldCBjb2x1bW5zKHZhbHVlcykge1xyXG4gICAgICAgIHRoaXMuX2NvbHVtbnMgPSB0aGlzLmNvcnJlY3RDb2x1bW5zKHZhbHVlcyk7XHJcbiAgICAgICAgdGhpcy5kZnMudXBkYXRlUHJvcGVydHkoJ2NvbHVtbnMnLCB0aGlzLl9jb2x1bW5zKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9maWVsZHMgPSBbXTtcclxuICAgIGdldCBmaWVsZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpZWxkcztcclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoKSBzZXQgZmllbGRzKGNvbHMpIHtcclxuICAgICAgICB0aGlzLl9maWVsZHMgPSBjb2xzO1xyXG4gICAgICAgIHRoaXMuY29sdW1ucyA9IGNvbHM7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbnNDaGFuZ2VkKGZhbHNlLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKiog56aB5q2i5pWw5o2u5oqY6KGM77yM6buY6K6k5YC877yadHJ1ZSzljbPlnKjkuIDooYzmmL7npLrvvIzkuI3mipjooYzjgIIgKi9cclxuICAgIEBJbnB1dCgpIG5vd3JhcCA9IHRydWU7XHJcbiAgICAvKiog6Jma5ouf5Yqg6L29ICovXHJcbiAgICBASW5wdXQoKSB2aXJ0dWFsaXplZCA9IGZhbHNlO1xyXG4gICAgLyoqIOaYr+WQpuWQr+eUqOW8guatpeWKoOi9veaVsOaNriAqL1xyXG4gICAgQElucHV0KCkgdmlydHVhbGl6ZWRBc3luY0xvYWQgPSBmYWxzZTtcclxuICAgIC8qKiDooYzmoLflvI8gKi9cclxuICAgIEBJbnB1dCgpIHJvd1N0eWxlcjogKHJvd0RhdGEsIHJvd0luZGV4PzogbnVtYmVyKSA9PiB7IGNscz86IHN0cmluZywgc3R5bGU/OiBhbnkgfTtcclxuICAgIC8qKiDnvJbovpHmlrnlvI/vvJogcm93KOaVtOihjOe8lui+kSnjgIFjZWxsKOWNleWFg+agvOe8lui+kSnvvJvpu5jorqTkuLogcm93ICovXHJcbiAgICBASW5wdXQoKSBlZGl0TW9kZTogJ3JvdycgfCAnY2VsbCcgPSAncm93JztcclxuICAgIC8qKiDnvJbovpHnirbmgIEgKi9cclxuICAgIHByaXZhdGUgX2VkaXRhYmxlID0gZmFsc2U7XHJcbiAgICBnZXQgZWRpdGFibGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VkaXRhYmxlO1xyXG4gICAgfVxyXG4gICAgQElucHV0KCkgc2V0IGVkaXRhYmxlKHYpIHtcclxuICAgICAgICBpZiAodGhpcy5fZWRpdGFibGUgIT09IHYpIHtcclxuICAgICAgICAgICAgdGhpcy5fZWRpdGFibGUgPSB2O1xyXG4gICAgICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgdGhpcy5kZ3MudXBkYXRlRW1wdHlTdHlsZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKiDlkK/nlKjlj6/nvJbovpHljZXlhYPmoLzmoLflvI/jgIIgKi9cclxuICAgIEBJbnB1dCgpIGVuYWJsZUVkaXRDZWxsU3R5bGUgPSBmYWxzZTtcclxuXHJcbiAgICAvKiog6L+b5YWl57yW6L6R54q25oCB5pe26YCJ5piv5ZCm6YCJ5Lit5paH5pys77yb6buY6K6k5Li6IGZhbHNlXHJcbiAgICAgKiDku4XmlofmnKzmoYbmlK/mjIHmraTnibnmgKdcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgc2VsZWN0T25FZGl0aW5nID0gZmFsc2U7XHJcblxyXG4gICAgLyoqIOe8lui+keWZqOmrmOW6piAqL1xyXG4gICAgQElucHV0KCkgZWRpdG9ySGVpZ2h0ID0gMzA7XHJcbiAgICAvKiog5ZCv55So6L+c56uv5o6S5bqPICovXHJcbiAgICBASW5wdXQoKSByZW1vdGVTb3J0ID0gZmFsc2U7XHJcbiAgICAvKiog5o6S5bqP5a2X5q61ICovXHJcbiAgICBASW5wdXQoKSBzb3J0TmFtZTogc3RyaW5nO1xyXG4gICAgLyoqIOaOkuW6j+aWueW8jyBhc2MgfCBkZXNjICovXHJcbiAgICBASW5wdXQoKSBzb3J0T3JkZXI6IHN0cmluZztcclxuICAgIC8qKiDlhYHorrjlpJrliJfmjpLluo8gKi9cclxuICAgIEBJbnB1dCgpIG11bHRpU29ydDogYm9vbGVhbjtcclxuXHJcbiAgICBASW5wdXQoKSBob3ZlclJvd0NscyA9ICdmLWRhdGFncmlkLXJvdy1ob3Zlcic7XHJcblxyXG4gICAgLyoqIOWFgeiuuOaLluaLveWIl+mhuuW6jyAqL1xyXG4gICAgQElucHV0KCkgZW5hYmxlRHJhZ0NvbHVtbiA9IGZhbHNlO1xyXG5cclxuICAgIC8qKiDooYzliIbnu4TpnaLmnb/pq5jluqbvvIzpu5jorqQgNTBQWCAqL1xyXG4gICAgQElucHV0KCkgcm93R3JvdXBQYW5lbEhlaWdodCA9IDUwO1xyXG4gICAgLyoqIOWQr+eUqOWIhue7hOihjCAqL1xyXG4gICAgQElucHV0KCkgZ3JvdXBSb3dzID0gZmFsc2U7XHJcbiAgICAvKiog5ZCv55So6KGM5YiG57uE5ZCI6K6h6KGMICovXHJcbiAgICBASW5wdXQoKSBncm91cEZvb3RlciA9IGZhbHNlO1xyXG4gICAgLyoqIOWIhue7hOihjOaYr+WQpuWxleW8gO+8jOm7mOiupOS4uiDlsZXlvIAgICovXHJcbiAgICBASW5wdXQoKSBleHBhbmRHcm91cFJvd3MgPSB0cnVlO1xyXG4gICAgLyoqXHJcbiAgICAgKiDliIbnu4TlkIjorqHooYzoh6rlrprkuYnmoLflvI/vvJpcclxuICAgICAqIOWFgeiuuOeahOWAvOS4ulxyXG4gICAgICogLSB7IGNsczogJ2Nzc2NsYXNzbmFtZSwgJywgc3R5bGU6IHsgY29sb3I6ICdyZWQnLCBib3JkZXI6IDFweCBzb2xpZCB9IH1cclxuICAgICAqIC0gKGdyb3VwRm9vdGVyUm93RGF0YSk6IHsgY2xzOiAnY3NzY2xhc3NuYW1lLCAnLCBzdHlsZTogeyBjb2xvcjogJ3JlZCcsIGJvcmRlcjogMXB4IHNvbGlkIH0gfSA9PiB7fVxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBncm91cEZvb3RlclN0eWxlcjogYW55O1xyXG4gICAgLyoqIOWQiOiuoeaVsOaNruaYvuekuuS9jee9rlxyXG4gICAgICogaW5Hcm91cFJvdzog5LiO5YiG57uE5Zyo5ZCM5LiA6KGM77yM5YiG5Yir55u45YWz5ZCI6K6h5a2X5q615a+56b2QXHJcbiAgICAgKiBncm91cEZvb3RlclJvdzog5Zyo5YiG57uE5pWw5o2u5pyA5ZCO5aKe5Yqg5LiA6KGMXHJcbiAgICAgKiDpu5jorqTkuLogZ3JvdXBGb290ZXJSb3dcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgZ3JvdXBTdW1tYXJ5UG9zaXRpb246ICdpbkdyb3VwUm93JyB8ICdncm91cEZvb3RlclJvdycgPSAnZ3JvdXBGb290ZXJSb3cnO1xyXG4gICAgLyoqIOWIhue7hOS/oeaBr+WQiOW5tuWIl+aVsFxyXG4gICAgICog6buY6K6k5Li6IDFcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgZ3JvdXBDZWxsQ29sU3BhbiA9IDE7XHJcblxyXG4gICAgLyoqIOWIhue7hOWtl+auteWQjeensCwg5aSa5a2X5q615YiG57uE5Lul6Iux5paH6YCX5Y+35YiG6ZqUICovXHJcbiAgICBwcml2YXRlIF9ncm91cEZpZWxkID0gJyc7XHJcbiAgICBncm91cEZpZWxkcyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KFtdKTtcclxuICAgIGdldCBncm91cEZpZWxkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ncm91cEZpZWxkO1xyXG4gICAgfVxyXG4gICAgQElucHV0KCkgc2V0IGdyb3VwRmllbGQodmFsKSB7XHJcbiAgICAgICAgdGhpcy5fZ3JvdXBGaWVsZCA9IHZhbCB8fCAnJztcclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fZ3JvdXBGaWVsZCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fZ3JvdXBGaWVsZCA9IHRoaXMuX2dyb3VwRmllbGQuam9pbignLCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2dyb3VwRmllbGQpIHtcclxuICAgICAgICAgICAgdGhpcy5ncm91cEZpZWxkcyQubmV4dCh0aGlzLl9ncm91cEZpZWxkLnNwbGl0KCcsJykpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBGaWVsZHMkLm5leHQoW10pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5kZnMudXBkYXRlUHJvcGVydHkoJ2dyb3VwRmllbGQnLCB0aGlzLl9ncm91cEZpZWxkKTtcclxuICAgIH1cclxuICAgIC8qKiDmmL7npLrliIbnu4TliJcgKi9cclxuICAgIEBJbnB1dCgpIHNob3dHcm91cENvbHVtbiA9IHRydWU7XHJcbiAgICAvKiog5YiG57uE5qC85byP5YyWICovXHJcbiAgICBASW5wdXQoKSBncm91cEZvcm1hdHRlcjogKGdyb3VwUm93OiBhbnkpID0+IGFueTtcclxuICAgIC8qKiDliIbnu4TooYzmoLflvI8gKi9cclxuICAgIEBJbnB1dCgpIGdyb3VwU3R5bGVyOiAoZ3JvdXBSb3c6IGFueSkgPT4geyBjbHM/OiBzdHJpbmcsIHN0eWxlPzogYW55IH07XHJcblxyXG4gICAgLyoqIOaYvuekuuWIhue7hOWIl+mdouadv+OAgum7mOiupOS4uiBmYWxzZSAqL1xyXG4gICAgcHJpdmF0ZSBfc2hvd1Jvd0dyb3VwUGFuZWwgPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpIHNldCBzaG93Um93R3JvdXBQYW5lbCh2YWwpIHtcclxuICAgICAgICB0aGlzLl9zaG93Um93R3JvdXBQYW5lbCA9IHZhbDtcclxuICAgIH1cclxuICAgIGdldCBzaG93Um93R3JvdXBQYW5lbCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ncm91cFJvd3MgJiYgdGhpcy5fc2hvd1Jvd0dyb3VwUGFuZWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWPjOWHu+ihqOWktOmAguW6lOWGheWuueWuveW6piAqL1xyXG4gICAgQElucHV0KCkgQXV0b0NvbHVtbldpZHRoVXNlRGJsY2xpY2sgPSB0cnVlO1xyXG4gICAgLyoqIOihjOmSqemAieWPiumAieS4reemgeeUqOihqOi+vuW8jyAqL1xyXG4gICAgQElucHV0KCkgZGlzYWJsZVJvdzogKHJvdywgaW5kZXg/OiBhbnkpID0+IGJvb2xlYW47XHJcbiAgICAvKiog5L2/55So5YaF6YOo6L+H5ruk5ZmoOyDpu5jorqTkuLogZmFsc2UgKi9cclxuICAgIEBJbnB1dCgpIHVzZURlZmF1bHRGaWx0ZXIgPSBmYWxzZTtcclxuICAgIC8qKiDov4fmu6Tlm77moIfkuI7mjpLluo/lm77moIflkIjlubbvvIzmraTlsZ7mgKfkuI4gZW5hYmxlRmlsdGVyUm93IOS6kuaWpSAqL1xyXG4gICAgQElucHV0KCkgZW5hYmxlU21hcnRGaWx0ZXIgPSBmYWxzZTtcclxuICAgIC8qKiDmmL7npLrov4fmu6TooYwgKi9cclxuICAgIEBJbnB1dCgpIGVuYWJsZUZpbHRlclJvdyA9IGZhbHNlO1xyXG4gICAgLyoqIOacjeWKoeWZqOerr+i/h+a7pCAqL1xyXG4gICAgQElucHV0KCkgcmVtb3RlRmlsdGVyID0gZmFsc2U7XHJcbiAgICAvKiog5ZCv55So6L+H5ruk5p2h5Lu25pi+56S65p2hICovXHJcbiAgICBASW5wdXQoKSBzaG93RmlsdGVyQmFyID0gZmFsc2U7XHJcbiAgICAvKiog6L+H5ruk5p2h5Lu25rGH5oC75p2h6auY5bqm77yM6buY6K6kIDMycHggICovXHJcbiAgICBASW5wdXQoKSBmaWx0ZXJCYXJIZWlnaHQgPSAzMjtcclxuICAgIEBJbnB1dCgpIGZpbHRlclJvd0hlaWdodCA9IDQwO1xyXG4gICAgQElucHV0KCkgY29uZGl0aW9uczogYW55ID0ge307XHJcblxyXG4gICAgQElucHV0KCkgc2VsZWN0VmFsdWUgPSBudWxsO1xyXG4gICAgQElucHV0KCkgY2hlY2tWYWx1ZXMgPSBbXTtcclxuICAgIEBJbnB1dCgpIHNlbGVjdFZhbHVlcyA9IFtdO1xyXG5cclxuICAgIC8qKiDlkIjlubbljZXlhYPmoLzvvJvlhYjmlK/mjIHnurXlkJHlkIjlubYgKi9cclxuICAgIEBJbnB1dCgpIG1lcmdlQ2VsbCA9IGZhbHNlO1xyXG4gICAgQElucHV0KCkgbWVyZ2VGaWVsZHMgPSBbXTtcclxuICAgIC8qKiDlkIjlubbljZXlhYPmoLzmlbDmja7lkK/nlKjlrqLmiLfnq6/mjpLluo8gKi9cclxuICAgIEBJbnB1dCgpIGVuYWJsZUNsaWVudFNvcnRGb3JNZXJnZUNlbGwgPSBmYWxzZTtcclxuICAgIC8qKiDkvb/nlKjpq5jnuqfmjqfliLbpnaLmnb8o5YiX6K6+572uKSAqL1xyXG4gICAgQElucHV0KCkgdXNlQ29udHJvbFBhbmVsID0gZmFsc2U7XHJcbiAgICAvKiog5ZCv55So566A5rSB5o6n5Yi26Z2i5p2/5qih5byP44CC6buY6K6k5Li6IGZhbHNlICovXHJcbiAgICBASW5wdXQoKSBlbmFibGVTaW1wbGVNb2RlID0gZmFsc2U7XHJcbiAgICAvKiog54K55Ye75YiX6K6+572u5Zu+5qCH77yM6buY6K6k5omT5byA55qE5o6n5Yi26Z2i5p2/ICovXHJcbiAgICBASW5wdXQoKSBjb250cm9sUGFuZWxNb2RlOiAnYWR2YW5jZWQnIHwgJ3NpbXBsZScgPSAnYWR2YW5jZWQnO1xyXG4gICAgLyoqIOWQr+eUqOWIl+iuvue9ruaWueahiCAqL1xyXG4gICAgQElucHV0KCkgZW5hYmxlU2NoZW1lID0gZmFsc2U7XHJcbiAgICAvKiog57O757uf6aKE5Yi25pa55qGI5ZCN56ewICovXHJcbiAgICBASW5wdXQoKSBkZWZhdWx0U2NoZW1lTmFtZSA9ICfns7vnu5/pooTliLYnO1xyXG5cclxuICAgIC8qKiDpmLvmraJjbGljayDkuovku7blhpLms6EgKi9cclxuICAgIEBJbnB1dCgpIHN0b3BQcm9wYWdhdGlvbiA9IHRydWU7XHJcbiAgICAvKipcclxuICAgICAqICgyMDIxMDUg5byD55SoKVxyXG4gICAgICog54K55Ye75Y2V5YWD5qC86L+b6KGM57yW6L6R54q25oCB5pe277yM5YWz6Zet5YW25LuWR3JpZOeahOe8lui+keWZqOOAgum7mOiupCBmYWxzZe+8jFxyXG4gICAgICog5aSa5Liq5YiX6KGo5a2Y5pe277yM5LuF5pyJ5LiA5Liq5YiX6KGo5Lit5pyJ57yW6L6R54q25oCB77yM5YW25LuW5YiX6KGo57uT5p2f57yW6L6RXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGNsb3NlT3RoZXJHcmlkRWRpdG9yID0gZmFsc2U7XHJcbiAgICAvKiog5b2T5pWw5o2u5rqQ5Li656m65pe277yM5riF56m65bey6YCJ6K6w5b2VICovXHJcbiAgICBASW5wdXQoKSBjbGVhclNlbGVjdGlvbnNXaGVuRGF0YUlzRW1wdHkgPSB0cnVlO1xyXG4gICAgLyoqIOWQr+eUqOWPs+mUruiPnOWNle+8jOm7mOiupOS4uiBmYWxzZSAqL1xyXG4gICAgQElucHV0KCkgZW5hYmxlQ29udGV4dE1lbnUgPSBmYWxzZTtcclxuICAgIC8qKiDlj7PplK7oj5zljZXmlbDmja4gKi9cclxuICAgIEBJbnB1dCgpIGNvbnRleHRNZW51czogQ29udGV4dE1lbnVJdGVtW10gPSBudWxsO1xyXG5cclxuICAgIEBPdXRwdXQoKSBzZWxlY3RWYWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBjaGVja1ZhbHVlc0NoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBzZWxlY3RWYWx1ZXNDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgQElucHV0KCkgYmVmb3JlRWRpdDogKHBhcmFtOiBSb3dFZGl0UGFyYW0pID0+IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcbiAgICBAT3V0cHV0KCkgYmVnaW5FZGl0ID0gbmV3IEV2ZW50RW1pdHRlcjxSb3dFZGl0UGFyYW0+KCk7XHJcbiAgICBASW5wdXQoKSBhZnRlckVkaXQ6IChyb3dJbmRleDogbnVtYmVyLCByb3dEYXRhOiBhbnksIGNvbHVtbj86IERhdGFDb2x1bW4sIGVkaXRvcj86IGFueSkgPT4gT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICAgIEBPdXRwdXQoKSBlbmRFZGl0ID0gbmV3IEV2ZW50RW1pdHRlcjx7IHJvd0luZGV4OiBudW1iZXIsIHJvd0RhdGE6IGFueSwgY29sdW1uPzogRGF0YUNvbHVtbiwgdmFsdWU/OiBhbnkgfT4oKTtcclxuICAgIEBPdXRwdXQoKSBjYW5jZWxFZGl0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcclxuXHJcbiAgICBAT3V0cHV0KCkgc2Nyb2xsWSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBAT3V0cHV0KCkgcGFnZVNpemVDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIHBhZ2VDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIEBPdXRwdXQoKSBsb2FkU3VjY2VzcyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBAT3V0cHV0KCkgZmlsdGVyQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBASW5wdXQoKSBiZWZvcmVTZWxlY3Q6IChwYXJhbXM6IEJlZm9yRXZlbnRQYXJhbSkgPT4gT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICAgIEBJbnB1dCgpIGJlZm9yZVVuc2VsZWN0OiAocGFyYW1zOiBCZWZvckV2ZW50UGFyYW0pID0+IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcbiAgICBASW5wdXQoKSBiZWZvcmVDaGVjazogKHBhcmFtczogQmVmb3JFdmVudFBhcmFtKSA9PiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG4gICAgQElucHV0KCkgYmVmb3JlVW5jaGVjazogKHBhcmFtczogQmVmb3JFdmVudFBhcmFtKSA9PiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG4gICAgQElucHV0KCkgYmVmb3JlU29ydENvbHVtbjogKGZpZWxkOiBzdHJpbmcsIG9yZGVyOiBzdHJpbmcsIGluc3RhbmNlOiBEYXRhZ3JpZENvbXBvbmVudCkgPT4gT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICAgIC8qKiDlkK/nlKjpgInkuK3ljZXlhYPmoLzpq5jkuq7mmL7npLogKi9cclxuICAgIEBJbnB1dCgpIGVuYWJsZUhpZ2hsaWdodENlbGwgPSBmYWxzZTtcclxuICAgIC8qKiAg6YCJ5Lit55qE5pWw5o2u5aeL57uI5LuO5pWw5o2u5rqQ5Lit6I635Y+WLiDpu5jorqTkuLogZmFsc2UgKi9cclxuICAgIEBJbnB1dCgpIGNoZWNrZWRSb3dzRGF0YUZyb21Tb3VyY2UgPSBmYWxzZTtcclxuICAgIC8qKiDlvZPliY3ljZXlhYPmoLzkuLrlj6ror7vml7bvvIzkvb/nlKh0YWIg6ZSu6Lez5Yiw5LiL5Liq5Y2V5YWD5qC85pe277yM5piv5ZCm5YWB6K646L+b5YWl57yW6L6R54q25oCB77yM6buY6K6k5Li6IGZhbHNlO1xyXG4gICAgICog6buY6K6k5oOF5Ya15LiL77yM5b2T5YmN5Y2V5YWD5qC85Y+q6K+777yM5oyJVEFC6Lez5Yiw5LiL5LiqQ0VMTCDml7bvvIzpgInkuK1DRUxMIO+8jOWbnui9pui/m+WFpee8lui+keOAglxyXG4gICAgICog5byA5ZCv5ZCO77yM5LiL5Liq5Y2V5YWD5qC86Ieq5Yqo6L+b5YWl57yW6L6R54q25oCB44CCXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGVkaXRjZWxsV2hlblRhYktleWR3b24gPSBmYWxzZTtcclxuXHJcbiAgICAvKiog5Y2V5YWD5qC854K55Ye75YmN5LqL5Lu2ICovXHJcbiAgICBAT3V0cHV0KCkgYmVmb3JlQ2xpY2tDZWxsID0gbmV3IEV2ZW50RW1pdHRlcjxSb3dFZGl0UGFyYW0+KCk7XHJcblxyXG4gICAgQE91dHB1dCgpIGRibGNsaWNrUm93ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIHNlbGVjdENoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPFNlbGVjdGVkUm93PigpO1xyXG4gICAgQE91dHB1dCgpIHVuU2VsZWN0ID0gbmV3IEV2ZW50RW1pdHRlcjxTZWxlY3RlZFJvdz4oKTtcclxuICAgIEBPdXRwdXQoKSBzZWxlY3RBbGwgPSBuZXcgRXZlbnRFbWl0dGVyPFNlbGVjdGVkUm93W10+KCk7XHJcbiAgICBAT3V0cHV0KCkgdW5TZWxlY3RBbGwgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAvKiog5byC5q2l6K+35rGC6Jma5ouf5Yqg6L29ICovXHJcbiAgICBAT3V0cHV0KCkgc2Nyb2xsWUxvYWQgPSBuZXcgRXZlbnRFbWl0dGVyPHsgcGFnZXI6IG51bWJlciwgcGFnZVNpemU6IG51bWJlciB9PigpO1xyXG5cclxuICAgIEBPdXRwdXQoKSBjaGVja2VkID0gbmV3IEV2ZW50RW1pdHRlcjxTZWxlY3RlZFJvdz4oKTtcclxuICAgIEBPdXRwdXQoKSB1bkNoZWNrZWQgPSBuZXcgRXZlbnRFbWl0dGVyPFNlbGVjdGVkUm93PigpO1xyXG4gICAgQE91dHB1dCgpIGNoZWNrQWxsID0gbmV3IEV2ZW50RW1pdHRlcjxTZWxlY3RlZFJvd1tdPigpO1xyXG4gICAgQE91dHB1dCgpIHVuQ2hlY2tBbGwgPSBuZXcgRXZlbnRFbWl0dGVyPFNlbGVjdGVkUm93W10+KCk7XHJcbiAgICBAT3V0cHV0KCkgY2hlY2tlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8U2VsZWN0ZWRSb3dbXT4oKTtcclxuXHJcbiAgICBAT3V0cHV0KCkgY29sdW1uU29ydGVkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gICAgQE91dHB1dCgpIHJvd0NsaWNrID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIHJvd0FwcGVuZGVkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIHJvd0RlbGV0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgcm93VXBkYXRlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBAT3V0cHV0KCkgZGF0YUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICAvKiog5pyA5ZCO5LiA6KGM55qE5pyA5ZCO5Y2V5YWD5qC85Zue6L2m5aSE55CG5LqL5Lu2ICovXHJcbiAgICBAT3V0cHV0KCkgbGFzdENlbGxFbnRlckhhbmRsZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgLyoqIOWIhue7hOWtl+auteWPmOWMluWQjiAqL1xyXG4gICAgQE91dHB1dCgpIGdyb3VwRmllbGRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAvKiog5ouW5Yqo5YiX5pS55Y+Y5YiX5pi+56S65L2N572u5ZCO6Kem5Y+RICovXHJcbiAgICBAT3V0cHV0KCkgY29sdW1uTW92ZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAvKiog5Y2V5YWD5qC854K55Ye75LqL5Lu2ICovXHJcbiAgICBAT3V0cHV0KCkgY2VsbENsaWNrID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIEBDb250ZW50Q2hpbGRyZW4oRGF0YWdyaWRDb2x1bW5EaXJlY3RpdmUpIGRnQ29sdW1ucz86IFF1ZXJ5TGlzdDxEYXRhZ3JpZENvbHVtbkRpcmVjdGl2ZT47XHJcbiAgICBAVmlld0NoaWxkKCdkZ1BhZ2VyJykgZGdQYWdlcjogYW55O1xyXG4gICAgQFZpZXdDaGlsZCgncmVzaXplUHJveHknKSByZXNpemVQcm94eTogRWxlbWVudFJlZjtcclxuICAgIEBWaWV3Q2hpbGQoJ3Jlc2l6ZVByb3h5QmcnKSByZXNpemVQcm94eUJnOiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgnZGF0YWdyaWRDb250YWluZXInKSBkZ0NvbnRhaW5lcjogRWxlbWVudFJlZjtcclxuICAgIEBWaWV3Q2hpbGQoJ2xvbmdUZXh0QXJlYScpIGxvbmdUZXh0QXJlYTogRWxlbWVudFJlZjtcclxuICAgIEBWaWV3Q2hpbGQoJ3NtYXJ0ZmlsdGVydG9vbGJhcicpIHNtYXJ0RmlsdGVyVG9vbGJhcjogU21hcnRGaWx0ZXJUb29sYmFyQ29tcG9uZW50O1xyXG4gICAgY29sR3JvdXA6IENvbHVtbkdyb3VwO1xyXG5cclxuICAgIHByaXZhdGUgX2xvYWRpbmcgPSBmYWxzZTtcclxuICAgIGdldCBsb2FkaW5nKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sb2FkaW5nO1xyXG4gICAgfVxyXG4gICAgc2V0IGxvYWRpbmcodmFsOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5fbG9hZGluZyA9IHZhbDtcclxuICAgICAgICBpZiAoIXRoaXMuY2RbJ2Rlc3Ryb3llZCddKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgc2VsZWN0aW9ucygpOiBTZWxlY3RlZFJvd1tdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kZnMuZ2V0U2VsZWN0aW9ucygpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjaGVja2VkcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGVja2VkUm93cztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2hlY2tlZFJvd3MoKSB7XHJcbiAgICAgICAgY29uc3QgY2hrZWRzID0gdGhpcy5kZnMuZ2V0Q2hlY2tlZHMoKTtcclxuICAgICAgICBpZiAodGhpcy5lbmFibGVNb3JlUGFnZVNlbGVjdCkge1xyXG4gICAgICAgICAgICBpZiAoY2hrZWRzICYmIGNoa2Vkcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaGVja2VkUm93c0RhdGFGcm9tU291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsuLi5jaGtlZHNdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8g5LuO5pWw5o2u5rqQ5Lit6I635Y+W5pyA5paw5pWw5o2uXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hrZWRzLm1hcChuID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkID0gdGhpcy5kZnMuZmluZFJvdyhuLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuLmRhdGEgPSBkLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhICYmIHRoaXMuZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXAgPSB0aGlzLmRhdGEubWFwKG4gPT4gblt0aGlzLmlkRmllbGRdKTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaGVja2VkUm93c0RhdGFGcm9tU291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoa2Vkcy5maWx0ZXIobiA9PiB0ZW1wLmluY2x1ZGVzKG4uaWQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIOS7juaVsOaNrua6kOS4reiOt+WPluacgOaWsOaVsOaNrlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoa2Vkcy5maWx0ZXIobiA9PiB0ZW1wLmluY2x1ZGVzKG4uaWQpKS5tYXAobiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZCA9IHRoaXMuZGZzLmZpbmRSb3cobi5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbi5kYXRhID0gZC5kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbjtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgY2hlY2tlZFJvd3Mocm93czogYW55W10pIHtcclxuICAgICAgICBpZiAocm93cyAmJiByb3dzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByb3dzID0gcm93cy5tYXAociA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoci5kYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiByW3RoaXMuaWRGaWVsZF0sXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogclxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmRmcy51cGRhdGVQcm9wZXJ0eSgnY2hlY2tlZFJvd3MnLCByb3dzIHx8IFtdKTtcclxuICAgICAgICB0aGlzLmluaXRTZWxlY3RPckNoZWNrZWQoKTtcclxuICAgICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3NlbGVjdGVkUm93ID0gbnVsbDtcclxuICAgIGdldCBzZWxlY3RlZFJvdygpOiBTZWxlY3RlZFJvdyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkUm93O1xyXG4gICAgfVxyXG4gICAgc2V0IHNlbGVjdGVkUm93KHJvdykge1xyXG4gICAgICAgIGlmIChyb3cpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0VmFsdWUgIT0gcm93LmlkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3RlZFJvdyA9IHJvdztcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0VmFsdWUgPSByb3cuaWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdFZhbHVlQ2hhbmdlLmVtaXQocm93LmlkKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Q2hhbmdlZC5lbWl0KHJvdyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnVuU2VsZWN0LmVtaXQodGhpcy5fc2VsZWN0ZWRSb3cpO1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdFZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RWYWx1ZUNoYW5nZS5lbWl0KCcnKTtcclxuICAgICAgICAgICAgdGhpcy5fc2VsZWN0ZWRSb3cgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBkcyA9IHtcclxuICAgICAgICBpbmRleDogMCxcclxuICAgICAgICByb3dzOiBbXSxcclxuICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgYm90dG9tOiAwLFxyXG4gICAgICAgIHNjcm9sbGluZzogZmFsc2UgLy8g5piv5ZCm55Sx5rua5Yqo5p2h6Kem5Y+RXHJcbiAgICB9O1xyXG5cclxuICAgIHBhZ2VyT3B0czogYW55ID0ge307XHJcbiAgICByZXN0U2VydmljZTogUmVzdFNlcnZpY2U7XHJcbiAgICBlZGl0b3JzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XHJcblxyXG4gICAgdmFsaWRhdG9yczogeyBuYW1lOiBzdHJpbmcsIHZhbHVlOiBWYWxpZGF0b3JGbiB9W10gPSBbXTtcclxuXHJcbiAgICBjdXJyZW50Q2VsbDogQ2VsbEluZm87XHJcbiAgICBmbGF0Q29sdW1uczogRGF0YUNvbHVtbltdO1xyXG4gICAgZm9vdGVyV2lkdGggPSAwO1xyXG5cclxuICAgIGNsaWNrRGVsYXkgPSAxNTA7XHJcbiAgICBwcml2YXRlIHJlc2l6ZUNvbHVtbkluZm8gPSB7XHJcbiAgICAgICAgcHJveHlMaW5lRWRnZTogMCxcclxuICAgICAgICBzdGFydFdpZHRoOiAwLFxyXG4gICAgICAgIHN0YXJ0WDogMCxcclxuICAgICAgICBsZWZ0OiAwXHJcbiAgICB9O1xyXG5cclxuICAgIHByaXZhdGUgcm86IFJlc2l6ZU9ic2VydmVyIHwgbnVsbCA9IG51bGw7XHJcbiAgICBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xyXG4gICAgcmVhbEhlYWRlckhlaWdodCA9IDA7XHJcbiAgICBpc1NpbmdsZUNsaWNrOiBib29sZWFuO1xyXG5cclxuICAgIGRvY3VlbW50Q2VsbENsaWNrRXZlbnRzOiBhbnk7XHJcbiAgICBkb2N1bWVudENlbGxDbGlja0hhbmRsZXI6IGFueTtcclxuICAgIGRvY3VtZW50Q2VsbEtleWRvd25FdmVudHM6IGFueTtcclxuICAgIGRvY3VtZW50Q2VsbEtleWRvd25IYW5kbGVyOiBhbnk7XHJcblxyXG4gICAgLy8g5by556qX5Lit5L2/55So5pe277yM56qX5Y+j54K55Ye75LqL5Lu25aSE55CGXHJcbiAgICBwcml2YXRlIG1vZGFsQ2xpY2tFdmVudCA9IG51bGw7XHJcblxyXG4gICAgLy8g6KGM6YCJ5Lit6ZSu55uY5LqL5Lu2XHJcbiAgICBkb2N1bWVudFJvd0tleWRvd25IYW5kbGVyOiBhbnk7XHJcbiAgICAvLyDooYznvJbovpHlv6vmjbfplK5cclxuICAgIGRvY3VtZW50Um93RWRpdEtleWRvd25IYW5sZGVyOiBhbnk7XHJcbiAgICAvLyBkb2N1bWVudCDljZXlh7vml7bnu5PmnZ/ooYznvJbovpFcclxuICAgIGRvY3VtZW50Q2xpY2tFbmRSb3dFZGl0SGFuZGxlcjogYW55O1xyXG5cclxuICAgIHBlbmRpbmcgPSBmYWxzZTtcclxuICAgIHB1YmxpYyBjb2xGb3JtYXRTZXI6IENvbHVtbkZvcm1hdFNlcnZpY2U7XHJcbiAgICBzY3JvbGxJbnN0YW5jZTogU2Nyb2xsYmFyRGlyZWN0aXZlID0gbnVsbDtcclxuICAgIC8vIOacrOWcsOWMluacjeWKoVxyXG4gICAgbG9jYWxlU2VydmljZTogTG9jYWxlU2VydmljZTtcclxuICAgIC8vIOWQiOW5tuWNleWFg+i+heWKqeS/oeaBr1xyXG4gICAgbWVyZ2VDZWxsSW5mbyA9IHt9O1xyXG4gICAgaWdub3JlVGFyZ2V0ID0gWydJTlBVVCcsICdTRUxFQ1QnLCAnVEVYVEFSRUEnXTtcclxuICAgIGNsaWVudEZpbHRlclNlcnZpY2U6IERhdGFncmlkRmlsdGVyU2VydmljZSA9IG51bGw7XHJcblxyXG4gICAgc2V0dGluZ1NlcnZpY2U6IGFueTsgLy8gRGF0YWdyaWRTZXR0aW5nc1NlcnZpY2U7XHJcblxyXG4gICAgLyog5o6n5Yi25YiX5a2X5q615ZCN56ewOiBfZGF0YWdyaWQtc2V0dGluZy1jb250cm9sXyAqL1xyXG4gICAgQ29udHJvbFBhbmVsRmVpbGQgPSAnX2RhdGFncmlkLXNldHRpbmctY29udHJvbF8nO1xyXG5cclxuICAgIHByaXZhdGUgX2lzUmVzaXplZCA9IGZhbHNlO1xyXG5cclxuICAgIGdyaWRTaXplID0geyB3aWR0aDogdGhpcy53aWR0aCArICdweCcsIGhlaWdodDogdGhpcy5oZWlnaHQgKyAncHgnIH07XHJcbiAgICAvLyDlrqLmiLfnq6/ov4fmu6Tml7bvvIzmmK/lkKbov4fmu6TooYzlj5HnlJ/lj5jljJZcclxuICAgIGNsaWVudEZpbHRlckNoYW5nZWQgPSBmYWxzZTtcclxuICAgIC8vIHN0eWxlJ3MgSURcclxuICAgIHN0eWxlU2hlZXRJZCA9ICcnO1xyXG5cclxuICAgIGdyb3VwUm93UGFuZWxQbGFjZWhvbGRlciA9ICcnO1xyXG4gICAgY29tbW9uVXRpbHM6IENvbW1vblV0aWxzID0gbnVsbDtcclxuICAgIHNtYXJ0RmlsdGVyU2VydmljZTogRGF0YWdyaWRTbWFydEZpbHRlclNlcnZpY2UgPSBudWxsO1xyXG4gICAgc21hcnRGaWx0ZXJSZXN1bHQgPSB7IGNvbnRyb2xEYXRhOiBbXSwgY29uZGl0aW9uczogW10gfTtcclxuICAgIHNtYXJ0RmlsdGVyQmFySGVpZ2h0ID0gMzI7XHJcbiAgICBwcml2YXRlIGlkU2VydmljZTogSWRTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBfYWN0aXZlX2RhdGFncmlkX2NscyA9ICdkYXRhZ3JpZC1hY3RpdmUnO1xyXG4gICAgcHJpdmF0ZSBfYmx1cmVkX2RhdGFncmlkX2NscyA9ICdkYXRhZ3JpZC1ibHVycmVkJztcclxuXHJcbiAgICAvLyDoh6rlrprkuYlncmlk5qC35byP77yM5YiX6KGo5Yid5aeL5ZCO77yM5Lya5re75Yqg5LiA5Liq6Ieq5a6a5LmJ5ZCN56ew55qE5qC35byPXHJcbiAgICBfY3VzdG9tX2RhdGFncmlkX2NscyA9ICdkYXRhZ3JpZCc7XHJcbiAgICAvLyDlpJrpgInku78gd2luZG93cyDpgInmi6nmqKHlvI9cclxuICAgIHNtczogU2VsZWN0aW9uTW9kZVNlcnZpY2U7XHJcbiAgICAvLyDnhKbngrnooYzntKLlvJXvvIzmr4/mrKHooYzngrnlh7vlkI7mm7TmlrBcclxuICAgIGZvY3VzUm93SW5kZXggPSAtMTtcclxuXHJcbiAgICBwcml2YXRlIGRvY3VtZW50Qm9keU1vdXNlRG93biA9IG51bGw7XHJcbiAgICBwcml2YXRlIGZhcnJpc0luc3RhbmNlczogRmFycmlzQ29tcG9uZW50SW5zdGFuY2VTZXJ2aWNlID0gbnVsbDtcclxuICAgIHByaXZhdGUgY3VycmVudFBhZ2VyRGF0YSA9IFtdO1xyXG4gICAgcHJpdmF0ZSByZXNpemVUaW1lciA9IG51bGw7XHJcbiAgICBwcml2YXRlIGRlYnVnU2VyOiBEZWJ1Z1NlcnZpY2UgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBEQVRBX0NIQU5HRURfVElNRVIgPSBudWxsO1xyXG5cclxuXHJcbiAgICBmb3JtVmFsaWRhdGlvbnMgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgcHVibGljIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgICAgIHB1YmxpYyBpbmplY3Q6IEluamVjdG9yLCBwdWJsaWMgem9uZTogTmdab25lLFxyXG4gICAgICAgIHB1YmxpYyBkZnM6IERhdGFncmlkRmFjYWRlU2VydmljZSxcclxuICAgICAgICBwdWJsaWMgZGdzOiBEYXRhZ3JpZFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBhcHA6IEFwcGxpY2F0aW9uUmVmLFxyXG4gICAgICAgIHByb3RlY3RlZCBkb21TYW5pdGl6ZXI6IERvbVNhbml0aXplcixcclxuICAgICAgICBwdWJsaWMgcmVuZGVyMjogUmVuZGVyZXIyKSB7XHJcblxyXG4gICAgICAgIHRoaXMuc3R5bGVTaGVldElkID0gJ0RBVEFHUklELScgKyBVdGlscy51dWlkKCk7XHJcblxyXG4gICAgICAgIHRoaXMubG9jYWxlU2VydmljZSA9IHRoaXMuaW5qZWN0LmdldChMb2NhbGVTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLnJlc3RTZXJ2aWNlID0gdGhpcy5pbmplY3QuZ2V0PFJlc3RTZXJ2aWNlPihEQVRBR1JJRF9SRVNUX1NFUlZJQ0VFLCBudWxsKTtcclxuICAgICAgICB0aGlzLmNvbEZvcm1hdFNlciA9IHRoaXMuaW5qZWN0LmdldChDb2x1bW5Gb3JtYXRTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLmNvbW1vblV0aWxzID0gdGhpcy5pbmplY3QuZ2V0KENvbW1vblV0aWxzLCBudWxsKTtcclxuICAgICAgICB0aGlzLmNsaWVudEZpbHRlclNlcnZpY2UgPSBuZXcgRGF0YWdyaWRGaWx0ZXJTZXJ2aWNlKGRmcywgdGhpcy5sb2NhbGVTZXJ2aWNlLCBpbmplY3QpO1xyXG4gICAgICAgIHRoaXMuZmFycmlzSW5zdGFuY2VzID0gdGhpcy5pbmplY3QuZ2V0KEZhcnJpc0NvbXBvbmVudEluc3RhbmNlU2VydmljZSwgbnVsbCk7XHJcbiAgICAgICAgdGhpcy5kZWJ1Z1NlciA9IHRoaXMuaW5qZWN0LmdldChEZWJ1Z1NlcnZpY2UsIG51bGwpO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuZGVidWdTZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5kZWJ1Z1NlciA9IG5ldyBEZWJ1Z1NlcnZpY2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRlYnVnU2VyLnVzZURlYnVnTW9kZSkge1xyXG4gICAgICAgICAgICB0aGlzLmRlYnVnU2VyLnVzZURlYnVnTW9kZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zbWFydEZpbHRlclNlcnZpY2UgPSB0aGlzLmluamVjdC5nZXQoRGF0YWdyaWRTbWFydEZpbHRlclNlcnZpY2UsIG51bGwpO1xyXG4gICAgICAgIHRoaXMuaWRTZXJ2aWNlID0gdGhpcy5pbmplY3QuZ2V0KElkU2VydmljZSwgbnVsbCk7XHJcbiAgICAgICAgdGhpcy5kZnMubG9jYWxJZCA9IHRoaXMubG9jYWxlU2VydmljZS5sb2NhbGVJZDtcclxuXHJcbiAgICAgICAgdGhpcy5zZXR0aW5nU2VydmljZSA9IHRoaXMuaW5qZWN0LmdldChHUklEX1NFVFRJTkdTX1NFUlZJQ0UsIG51bGwpO1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNldHRpbmdzSHR0cCA9IHRoaXMuaW5qZWN0LmdldChHUklEX1NFVFRJTkdTX0hUVFAsIG51bGwpO1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdTZXJ2aWNlLmh0dHBSZXN0U2VydmljZSA9IHNldHRpbmdzSHR0cDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGRhdGFTdWJzY3JpcHRpb24gPSB0aGlzLmRmcy5kYXRhJC5zdWJzY3JpYmUoKGRhdGFTb3VyY2U6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFuRG9tKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRzID0geyAuLi5kYXRhU291cmNlIH07XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb25kaXRpb25zICYmIE9iamVjdC5rZXlzKHRoaXMuY29uZGl0aW9ucykubGVuZ3RoICYmICF0aGlzLnJlbW90ZUZpbHRlciAmJiB0aGlzLnVzZURlZmF1bHRGaWx0ZXIpIHtcclxuICAgICAgICAgICAgICAgIGRzLnJvd3MgPSB0aGlzLmNsaWVudEZpbHRlclNlcnZpY2UuZXhlY3V0ZUZpbHRlcihkcy5yb3dzLCB0aGlzLmNvbmRpdGlvbnMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRzID0gZHM7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5kcy5yb3dzICYmIHRoaXMuZHMucm93cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZGZzLmdldERhdGEoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tZXJnZUNlbGwgJiYgdGhpcy5tZXJnZUZpZWxkcyAmJiB0aGlzLm1lcmdlRmllbGRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVyZ2VDZWxsSW5mbyA9IHRoaXMuZGdzLmdldE1lcmdlQ2VsbEluZm8zKHRoaXMuZHMucm93cywgWy4uLnRoaXMubWVyZ2VGaWVsZHNdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFBhZ2VyVG90YWwoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZFN1Y2Nlc3MuZW1pdCh0aGlzLmRzLnJvd3MpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBbXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudENlbGwgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2xlYXJTZWxlY3Rpb25zV2hlbkRhdGFJc0VtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckFsbCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmRzLnNjcm9sbGluZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVGb290ZXJEYXRhKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g5oCn6IO95LyY5YyWXHJcbiAgICAgICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICh0aGlzLkRBVEFfQ0hBTkdFRF9USU1FUikge1xyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuREFUQV9DSEFOR0VEX1RJTUVSKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5EQVRBX0NIQU5HRURfVElNRVIgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF1dG9IZWlnaHQgJiYgdGhpcy5tYXhIZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXhIZWlnaHQgPCA1NSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1heEhlaWdodCA9IDYwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ3JpZENvbnRhaW5lckVsID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdyaWRDb250YWluZXJFbC5ub2RlTmFtZSAhPT0gJ0RJVicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53cml0ZUNvbnNvbGUoJ0RhdGFncmlk54i25a655Zmo5b+F6aG75Li6RElW44CCJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZENvbnRhaW5lckVsLnN0eWxlLmhlaWdodCA9ICd1bnNldCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyaWRDb250YWluZXJFbC5zdHlsZS5tYXhIZWlnaHQgPSB0aGlzLm1heEhlaWdodCArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyaWRDb250YWluZXJFbC5zdHlsZS5taW5IZWlnaHQgPSBgJHt0aGlzLmVtcHR5RGF0YUhlaWdodCArIHRoaXMucmVhbEhlYWRlckhlaWdodH1weGA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVzZUJsYW5rV2hlbkRhdGFJc0VtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVHcmlkU2l6ZSh0aGlzLmZpdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIDEwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goZGF0YVN1YnNjcmlwdGlvbik7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbHVtbkdyb3VwU3Vic2NyaXB0aW9uID0gdGhpcy5kZnMuY29sdW1uR3JvdXAkLnBpcGUoXHJcbiAgICAgICAgICAgIGRlYm91bmNlVGltZSg2MClcclxuICAgICAgICApLnN1YnNjcmliZShjZyA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xHcm91cCA9IGNnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb290ZXJXaWR0aCA9IGNnLnRvdGFsV2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChjb2x1bW5Hcm91cFN1YnNjcmlwdGlvbik7XHJcblxyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKFxyXG4gICAgICAgICAgICB0aGlzLmRmcy5ncmlkU2l6ZSQuc3Vic2NyaWJlKChjZzogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2cgJiYgY2cuY29sdW1uc0dyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xHcm91cCA9IGNnLmNvbHVtbnNHcm91cDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLmluaXRFZGl0b3JBbmRWYWxpZGF0b3IoKTtcclxuXHJcbiAgICAgICAgY29uc3QgY3VycmVudENlbGxTdWJzY3JpcHRpb24gPSB0aGlzLmRmcy5jdXJyZW50Q2VsbCQuc3Vic2NyaWJlKChjZWxsOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2VsbCA9IGNlbGw7XHJcbiAgICAgICAgICAgIGlmIChjZWxsICYmIGNlbGwuY2VsbFJlZikge1xyXG4gICAgICAgICAgICAgICAgY2VsbC5jZWxsUmVmLmlzRWRpdGluZyA9IGNlbGwuaXNFZGl0aW5nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudW5iaW5kTW92ZVNlbGVjdFJvd0V2ZW50KCk7XHJcbiAgICAgICAgICAgIHRoaXMuYmluZERvY3VtZW50RWRpdExpc3RlbmVyKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICB0aGlzLmRmcy5zZWxlY3RSb3ckLnN1YnNjcmliZSgoc3I6IFNlbGVjdGVkUm93KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5jdXJyZW50Q2VsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iaW5kRG9jdW1lbnRNb3ZlU2VsZWN0Um93RXZlbnQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93ID0gc3I7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgICAgICAvLyB0aGlzLnNlbGVjdENoYW5nZWQuZW1pdChzcik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKGN1cnJlbnRDZWxsU3Vic2NyaXB0aW9uKTtcclxuXHJcbiAgICAgICAgRGF0YWdyaWRDb2x1bW5zSGVscGVyLmdyaWRJbnN0YW5jZSA9IHRoaXM7XHJcblxyXG4gICAgICAgIGNvbnN0IGZpbHRlckNoYW5nZWRTdWJzY3JpcHRpb24gPSB0aGlzLmRncy5vbkZpbHRlckNoYW5nZWQuc3Vic2NyaWJlKChjb25kaXRpb25zOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgLy8g5pu05paw57yT5a2Y6L+H5ruk5p2h5Lu2XHJcbiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9ucyA9IGNvbmRpdGlvbnM7XHJcbiAgICAgICAgICAgIHRoaXMuY2xpZW50RmlsdGVyQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyRGF0YSh0aGlzLmNvbmRpdGlvbnMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKGZpbHRlckNoYW5nZWRTdWJzY3JpcHRpb24pO1xyXG4gICAgICAgIC8vIHRoaXMuaW5pdFBhZ2luYXRpb25PcHRpb25zKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGZvb3RlckRhdGFTdWJzY3JpcHRpb24gPSB0aGlzLmRncy5yZWZyZXNoRm9vdGVyRGF0YS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUZvb3RlckRhdGEoKTtcclxuICAgICAgICAgICAgLy8gdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goZm9vdGVyRGF0YVN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgdGhpcy5kZ3MuY29tbW9uVXRpbHMgPSB0aGlzLmNvbW1vblV0aWxzO1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5kZ3MuZm9jdXNSb3dDaGFuZ2VkLnN1YnNjcmliZSgoZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzUm93SW5kZXggPSBlLnJvd0luZGV4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHNldEN1cnJlbnRQYWdlckRhdGEoJGRhdGEpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRQYWdlckRhdGEgPSAkZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICB3cml0ZUNvbnNvbGUobXNnLCB0eXBlOiAnaW5mbyd8J2xvZyd8J3dhcm4nfCdlcnJvcicgPSAnd2FybicpIHtcclxuICAgICAgICBpZiAodGhpcy5kZWJ1Z1Nlcikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kZWJ1Z1Nlclt0eXBlXSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWJ1Z1Nlclt0eXBlXShtc2cpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZVt0eXBlXShtc2cpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVGb290ZXJEYXRhKCkge1xyXG4gICAgICAgIGlmICgodGhpcy5zaG93Rm9vdGVyIHx8IHRoaXMucGFnZXJDb250ZW50VGVtcGxhdGUgKSAmJiB0aGlzLmZvb3RlckRhdGFGcm9tID09PSAnY2xpZW50JyApIHtcclxuICAgICAgICAgICAgdGhpcy5mb290ZXJEYXRhID0gb2YodGhpcy5kZnMuZ2V0Rm9vdGVyRGF0YSh0aGlzLmRhdGEpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8jcmVnaW9uIE5nIEV2ZW50XHJcblxyXG4gICAgbmdEb0NoZWNrKCkge1xyXG4gICAgICAgIC8vIGlmICghdGhpcy5jaGVja1ZhbHVlcykge1xyXG4gICAgICAgIC8vICAgICB0aGlzLmNoZWNrVmFsdWVzID0gW107XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG5cclxuICAgICAgICB0aGlzLnNtcyA9IG5ldyBTZWxlY3Rpb25Nb2RlU2VydmljZSh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5jaGVja0ZpbHRlclN0eWxlKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnVzZVRoZW1lcykge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGVja1NpemUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGVja09wdGlvbnMoKTtcclxuICAgICAgICB0aGlzLmdyb3VwUm93UGFuZWxQbGFjZWhvbGRlciA9IHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZSgnZGF0YWdyaWQuZ3JvdXBSb3cudGlwcycpO1xyXG4gICAgICAgIC8vIHRoaXMuX2ZsYXRDb2x1bW5zKCk7XHJcbiAgICAgICAgLy8gdGhpcy5zZXRIZWFkZXJIZWlnaHQoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc21hcnRGaWx0ZXJTZXJ2aWNlKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5lbmFibGVTbWFydEZpbHRlciAmJiB0aGlzLnNob3dGaWx0ZXJCYXIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNtYXJ0RmlsdGVyUmVzdWx0ICYmIHRoaXMuc21hcnRGaWx0ZXJSZXN1bHQuY29udHJvbERhdGEgJiYgdGhpcy5zbWFydEZpbHRlclJlc3VsdC5jb250cm9sRGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbHRlckJhckhlaWdodCA9IHRoaXMuc21hcnRGaWx0ZXJCYXJIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyQmFySGVpZ2h0ID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5zbWFydEZpbHRlclNlcnZpY2UuZmlsdGVyQ2hhbmdlZC5zdWJzY3JpYmUoKGU6IGFueSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zbWFydEZpbHRlclJlc3VsdCAmJiAhZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkodGhpcy5zbWFydEZpbHRlclJlc3VsdCkgIT09IEpTT04uc3RyaW5naWZ5KGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zbWFydEZpbHRlclJlc3VsdCA9IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGllbnRGaWx0ZXJDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbHRlckRhdGEoZS5jb25kaXRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc21hcnRGaWx0ZXJSZXN1bHQgfHwgKHRoaXMuc21hcnRGaWx0ZXJSZXN1bHQuY29udHJvbERhdGEgJiYgIXRoaXMuc21hcnRGaWx0ZXJSZXN1bHQuY29udHJvbERhdGEubGVuZ3RoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRmlsdGVyQmFyUmVzaXplKDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5maWx0ZXJCYXJIZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25GaWx0ZXJCYXJSZXNpemUodGhpcy5zbWFydEZpbHRlckJhckhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcblxyXG4gICAgICAgIC8vIOWIm+W7uuiHquWumuS5iXN0eWxlIOWuueWZqFxyXG4gICAgICAgIC8vIFxyXG5cclxuICAgICAgICB0aGlzLnNldEhlYWRlckhlaWdodCgpO1xyXG4gICAgICAgIHRoaXMuc2V0UGFnZXJIZWlnaHQoKTtcclxuICAgICAgICB0aGlzLmluaXRCZWZvcmVFdmVudHMoKTtcclxuICAgICAgICBpZiAodGhpcy5maXQpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRHcmlkTmV3U2l6ZVdoZW5GaXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdFN0YXRlKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuZWwgJiYgdGhpcy5mYXJyaXNJbnN0YW5jZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5mYXJyaXNJbnN0YW5jZXMuYWRkKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5kYXRhIHx8ICF0aGlzLmRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmV0Y2hEYXRhKDEsIHRoaXMucGFnZVNpemUpLnN1YnNjcmliZShyZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvdGFsID0gcmVzLnRvdGFsO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyZXMuZm9vdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb290ZXJEYXRhID0gcmVzLmZvb3RlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWREYXRhKHJlcy5pdGVtcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXIyLmFkZENsYXNzKHRoaXMuZGdDb250YWluZXIubmF0aXZlRWxlbWVudCwgdGhpcy5fY3VzdG9tX2RhdGFncmlkX2Nscyk7XHJcbiAgICAgICAgICAgIHRoaXMucm8gPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGVbMF0udGFyZ2V0IGFzIGFueTtcclxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IF93ID0gZVswXS5jb250ZW50UmVjdC53aWR0aDtcclxuICAgICAgICAgICAgICAgIGlmICghX3cpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBfaCA9IGVbMF0uY29udGVudFJlY3QuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgX2Zsb293VyA9IE1hdGguZmxvb3IoX3cpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgX2Zsb29ySCA9IE1hdGguZmxvb3IoX2gpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgX3JvdW5kVyA9IE1hdGgucm91bmQoX3cpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgX3JvdW5kSCA9IE1hdGgucm91bmQoX2gpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgX2NlaWxXID0gTWF0aC5jZWlsKF93KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IF9jZWlsSCA9IE1hdGguY2VpbChfaCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCh0aGlzLndpZHRoID09PSBfZmxvb3dXIHx8IHRoaXMud2lkdGggPT09IF9yb3VuZFcgfHwgdGhpcy53aWR0aCA9PT0gX2NlaWxXKSAmJiAodGhpcy5oZWlnaHQgPT09IF9mbG9vckggfHwgdGhpcy5oZWlnaHQgPT09IF9yb3VuZEggfHwgdGhpcy5oZWlnaHQgPT09IF9jZWlsSCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRncy5yZXN0b3JlU2Nyb2xsYmFyUG9zaXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVzaXplVGltZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5yZXNpemVUaW1lcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZVRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVHcmlkU2l6ZSh0aGlzLmZpdCk7XHJcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucm8ub2JzZXJ2ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudCk7XHJcblxyXG5cclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLmRvY3VtZW50Qm9keU1vdXNlRG93biwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5kb2N1bWVudEJvZHlNb3VzZURvd24gPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzRWRpdGluZygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQgYXMgYW55O1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KCd0ZC5mLWRhdGFncmlkLWNlbGwnKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5jbG9zZXN0KCcuZGF0ZS1vdmVybGF5LWNvbnRhaW5lcicpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmNsb3Nlc3QoJy50aW1lLXBpY2tlci1vdmVybGF5JykgfHxcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuY2xvc2VzdCgnLmxhbmd1YWdlLXRleHRib3gtcGFuZWwnKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5jbG9zZXN0KCcuZmFycmlzLW5vdGlmeScpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmNsb3Nlc3QoJy5jb21ib1BhbmVsJykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uRG9jdW1lbnRNb3VzZURvd24oZSk7XHJcbiAgICAgICAgICAgIH0sIHRydWUpO1xyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd0Zvb3Rlcikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5mb290ZXJUZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZm9vdGVyRG9tID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mLWRhdGFncmlkLWZvb3RlcicpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZvb3RlckRvbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9vdGVySGVpZ2h0ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mLWRhdGFncmlkLWZvb3RlcicpLm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZml0KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlR3JpZFNpemUodGhpcy5maXQpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vIOajgOafpeaYr+WQpuWQr+eUqOS7v3dpbmRvd3PotYTmupDnrqHnkIblmajkuK3nmoTlpJrpgInmqKHlvI9cclxuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25Nb2RlICYmIHRoaXMuc2VsZWN0aW9uTW9kZSA9PT0gJ2RlZmF1bHQnICYmIHRoaXMubXVsdGlTZWxlY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5zbXMuZW5hYmxlV2luZG93c1NlbGVjdGlvbk1vZGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0Q2VsbFN0eWxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRnQ29sdW1ucyAmJiB0aGlzLmRnQ29sdW1ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5jb2x1bW5zID0gdGhpcy5kZ0NvbHVtbnMubWFwKGRnYyA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5kZ2MgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgICAgICBpZiAoY2hhbmdlcy5kYXRhICYmICFjaGFuZ2VzLmRhdGEuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGZzLmxvYWREYXRhKGNoYW5nZXMuZGF0YS5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLmRncy5kYXRhU291cmNlQ2hhbmdlZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMuc2hvd0FsbENoZWNrYm94ICE9PSB1bmRlZmluZWQgJiYgIWNoYW5nZXMuc2hvd0FsbENoZWNrYm94LmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5zaG93QWxsQ2hlY2tib3guY3VycmVudFZhbHVlICE9IGNoYW5nZXMuc2hvd0FsbENoZWNrYm94LnByZXZpb3VzVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uc0NoYW5nZWQoZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5zaG93Q2hlY2tib3ggIT09IHVuZGVmaW5lZCAmJiAhY2hhbmdlcy5zaG93Q2hlY2tib3guaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGZzLnNob3dDaGVja2JveChjaGFuZ2VzLnNob3dDaGVja2JveC5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMuc2hvd0xpbmVOdW1iZXIgIT09IHVuZGVmaW5lZCAmJiAhY2hhbmdlcy5zaG93TGluZU51bWJlci5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5kZnMuc2hvd0xpbmVOdW1iZXIoY2hhbmdlcy5zaG93TGluZU51bWJlci5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMubXVsdGlTZWxlY3QgIT09IHVuZGVmaW5lZCAmJiAhY2hhbmdlcy5tdWx0aVNlbGVjdC5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5kZnMuc2V0TXVsdGlTZWxlY3QoY2hhbmdlcy5tdWx0aVNlbGVjdC5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMuY2hlY2tPblNlbGVjdCAhPT0gdW5kZWZpbmVkICYmICFjaGFuZ2VzLmNoZWNrT25TZWxlY3QuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGZzLnNldENoZWNrT25TZWxlY3QoY2hhbmdlcy5jaGVja09uU2VsZWN0LmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5zZWxlY3RPbkNoZWNrICE9PSB1bmRlZmluZWQgJiYgIWNoYW5nZXMuc2VsZWN0T25DaGVjay5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5kZnMuc2V0U2VsZWN0T25DaGVjayhjaGFuZ2VzLnNlbGVjdE9uQ2hlY2suY3VycmVudFZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLm9ubHlTZWxlY3RTZWxmICE9PSB1bmRlZmluZWQgJiYgIWNoYW5nZXMub25seVNlbGVjdFNlbGYuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGZzLnVwZGF0ZVByb3BlcnR5KCdvbmx5U2VsZWN0U2VsZicsIGNoYW5nZXMub25seVNlbGVjdFNlbGYuY3VycmVudFZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLmtlZXBTZWxlY3QgIT09IHVuZGVmaW5lZCAmJiAhY2hhbmdlcy5rZWVwU2VsZWN0LmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRmcy51cGRhdGVQcm9wZXJ0eSgna2VlcFNlbGVjdCcsIGNoYW5nZXMua2VlcFNlbGVjdC5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMuaGVhZGVyV3JhcCAhPT0gdW5kZWZpbmVkICYmICFjaGFuZ2VzLmhlYWRlcldyYXAuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRIZWFkZXJIZWlnaHQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZnMuY29sdW1uUmVzaXplRW5kKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMubm93cmFwICE9PSB1bmRlZmluZWQgJiYgIWNoYW5nZXMubm93cmFwLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrTm93cmFwKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Um93SGVpZ2h0KGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5kZ3MuY2VsbENvbnRlbnRXcmFwQ2hhbmdlZC5lbWl0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZGZzLnVwZGF0ZVByb3BlcnR5KCdub3dyYXAnLCBjaGFuZ2VzLm5vd3JhcC5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMubXVsdGlTb3J0ICE9PSB1bmRlZmluZWQgJiYgIWNoYW5nZXMubXVsdGlTb3J0LmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRmcy51cGRhdGVQcm9wZXJ0eSgnbXVsdGlTb3J0JywgY2hhbmdlcy5tdWx0aVNvcnQuY3VycmVudFZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLmVkaXRhYmxlICE9PSB1bmRlZmluZWQgJiYgIWNoYW5nZXMuZWRpdGFibGUuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGZzLnVwZGF0ZVByb3BlcnR5KCdlZGl0YWJsZScsIGNoYW5nZXMuZWRpdGFibGUuY3VycmVudFZhbHVlKTtcclxuICAgICAgICAgICAgaWYgKCFjaGFuZ2VzLmVkaXRhYmxlLmN1cnJlbnRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbmRDZWxsRWRpdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuaXNTaW5nbGVDbGljayA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiAodGhpcy5lZGl0YWJsZSkge1xyXG4gICAgICAgICAgICAvLyAgICAgdGhpcy5rZWVwU2VsZWN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLmtlZXBTZWxlY3QgPSB0aGlzLmRmcy5fc3RhdGUua2VlcFNlbGVjdDtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLnNob3dIZWFkZXIgIT09IHVuZGVmaW5lZCAmJiAhY2hhbmdlcy5zaG93SGVhZGVyLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRmcy51cGRhdGVQcm9wZXJ0eSgnc2hvd0hlYWRlcicsIGNoYW5nZXMuc2hvd0hlYWRlci5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLmhlYWRlckhlaWdodENoYW5nZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLnNob3dGaWx0ZXJCYXIgIT09IHVuZGVmaW5lZCAmJiAhY2hhbmdlcy5zaG93RmlsdGVyQmFyLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRmcy51cGRhdGVQcm9wZXJ0eSgnc2hvd0ZpbHRlckJhcicsIGNoYW5nZXMuc2hvd0ZpbHRlckJhci5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLmRncy5zaG93R3JpZEhlYWRlci5lbWl0KHRoaXMucmVhbEhlYWRlckhlaWdodCk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuZGdzLnNtYXJ0RmlsdGVyQmFyRXhwYW5kLmVtaXQoKTtcclxuICAgICAgICAgICAgbGV0IGZoID0gMDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9ucyAmJiB0aGlzLmNvbmRpdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBmaCA9IDMyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMub25GaWx0ZXJCYXJSZXNpemUoZmgpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLnNob3dGb290ZXIgIT09IHVuZGVmaW5lZCAmJiAhY2hhbmdlcy5zaG93Rm9vdGVyLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRmcy51cGRhdGVQcm9wZXJ0eSgnc2hvd0Zvb3RlcicsIGNoYW5nZXMuc2hvd0Zvb3Rlci5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgICAgICAvLyB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVHcmlkU2l6ZSh0aGlzLmZpdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5wYWdlck9uU2VydmVyICE9PSB1bmRlZmluZWQgJiYgIWNoYW5nZXMucGFnZXJPblNlcnZlci5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5kZnMudXBkYXRlUHJvcGVydHkoJ3BhZ2VyT25TZXJ2ZXInLCBjaGFuZ2VzLnBhZ2VyT25TZXJ2ZXIuY3VycmVudFZhbHVlKTtcclxuICAgICAgICAgICAgdGhpcy5wYWdlck9wdHMgPSBPYmplY3QuYXNzaWduKHRoaXMucGFnZXJPcHRzLCB7XHJcbiAgICAgICAgICAgICAgICByZW1vdGU6IHRoaXMucGFnZXJPblNlcnZlclxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLnBhZ2VJbmRleCAhPT0gdW5kZWZpbmVkICYmICFjaGFuZ2VzLnBhZ2VJbmRleC5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5kZnMudXBkYXRlUHJvcGVydHkoJ3BhZ2VJbmRleCcsIGNoYW5nZXMucGFnZUluZGV4LmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMucGFnZXJPcHRzID0gT2JqZWN0LmFzc2lnbih0aGlzLnBhZ2VyT3B0cywge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2U6IHRoaXMucGFnZUluZGV4XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMucGFnZVNpemUgIT09IHVuZGVmaW5lZCAmJiAhY2hhbmdlcy5wYWdlU2l6ZS5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5kZnMudXBkYXRlUHJvcGVydHkoJ3BhZ2VTaXplJywgY2hhbmdlcy5wYWdlU2l6ZS5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2VyT3B0cyA9IE9iamVjdC5hc3NpZ24odGhpcy5wYWdlck9wdHMsIHtcclxuICAgICAgICAgICAgICAgIGl0ZW1zUGVyUGFnZTogdGhpcy5wYWdlU2l6ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLnBhZ2VMaXN0ICE9PSB1bmRlZmluZWQgJiYgIWNoYW5nZXMucGFnZUxpc3QuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGZzLnVwZGF0ZVByb3BlcnR5KCdwYWdlTGlzdCcsIGNoYW5nZXMucGFnZUxpc3QuY3VycmVudFZhbHVlKTtcclxuICAgICAgICAgICAgdGhpcy5wYWdlck9wdHMgPSBPYmplY3QuYXNzaWduKHRoaXMucGFnZXJPcHRzLCB7XHJcbiAgICAgICAgICAgICAgICBwYWdlTGlzdDogdGhpcy5wYWdlTGlzdFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLmNvbHVtbnMgIT09IHVuZGVmaW5lZCAmJiAhY2hhbmdlcy5jb2x1bW5zLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbnNDaGFuZ2VkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5zaXplVHlwZSAhPT0gdW5kZWZpbmVkICYmICFjaGFuZ2VzLnNpemVUeXBlLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zaXplVHlwZSA9IGNoYW5nZXMuc2l6ZVR5cGUuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLnNldFJvd0hlaWdodCh0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5kZnMudXBkYXRlUHJvcGVydHkoJ3Jvd0hlaWdodCcsIHRoaXMucm93SGVpZ2h0KTtcclxuICAgICAgICAgICAgdGhpcy5zZXRGb290ZXJIZWlnaHQoKTtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZGdzLm9uUm93SGVpZ2h0Q2hhbmdlKHRoaXMucm93SGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLnJvd0hlaWdodCAmJiAhY2hhbmdlcy5yb3dIZWlnaHQuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Um93SGVpZ2h0KGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLnNlbGVjdFZhbHVlICYmICFjaGFuZ2VzLnNlbGVjdFZhbHVlLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdFJvdyh0aGlzLnNlbGVjdFZhbHVlLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5jaGVja1ZhbHVlcyAmJiAhY2hhbmdlcy5jaGVja1ZhbHVlcy5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgY2hlY2tJZHMgPSB0aGlzLmRmcy5kaWZmZXJlbmNlQnkoY2hhbmdlcy5jaGVja1ZhbHVlcy5jdXJyZW50VmFsdWUgfHwgW10sIGNoYW5nZXMuY2hlY2tWYWx1ZXMucHJldmlvdXNWYWx1ZSB8fCBbXSwgKHYpID0+IHYpO1xyXG4gICAgICAgICAgICBpZiAoY2hlY2tJZHMgJiYgY2hlY2tJZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrUm93cyhjaGVja0lkcywgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB1bmNoZWNrSWRzID0gdGhpcy5kZnMuZGlmZmVyZW5jZUJ5KGNoYW5nZXMuY2hlY2tWYWx1ZXMucHJldmlvdXNWYWx1ZSB8fCBbXSwgY2hhbmdlcy5jaGVja1ZhbHVlcy5jdXJyZW50VmFsdWUgfHwgW10sICh2KSA9PiB2KTtcclxuICAgICAgICAgICAgaWYgKHVuY2hlY2tJZHMgJiYgdW5jaGVja0lkcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5DaGVja1Jvd3ModW5jaGVja0lkcywgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja1ZhbHVlcyA9IHRoaXMuY2hlY2tlZHMubWFwKHIgPT4gci5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja1ZhbHVlc0NoYW5nZS5lbWl0KHRoaXMuY2hlY2tWYWx1ZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tlZENoYW5nZS5lbWl0KHRoaXMuY2hlY2tlZHMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUFsbENoZWNrYm94U3RhdHVzKCk7XHJcbiAgICAgICAgICAgICAgICB9LCAxMCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMuc2hvd0dyb3VwQ29sdW1uICYmICFjaGFuZ2VzLnNob3dHcm91cENvbHVtbi5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy50b2dnbGVWaXNpYmxlQ29sdW1uKHRoaXMuZ3JvdXBGaWVsZC5zcGxpdCgnLCcpLCBjaGFuZ2VzLnNob3dHcm91cENvbHVtbi5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbnNDaGFuZ2VkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5hdXRvRml0Q29sdW1ucyAmJiAhY2hhbmdlcy5hdXRvRml0Q29sdW1ucy5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5kZnMudXBkYXRlUHJvcGVydHkoJ2F1dG9GaXRDb2x1bW5zJywgY2hhbmdlcy5hdXRvRml0Q29sdW1ucy5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaWYgKGNoYW5nZXMuZml0Q29sdW1ucyAmJiAhY2hhbmdlcy5maXRDb2x1bW5zLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgIC8vICAgICB0aGlzLmZpdENvbHVtbnMgPSBjaGFuZ2VzLmZpdENvbHVtbnMuY3VycmVudFZhbHVlO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMuZ3JvdXBSb3dzICYmICFjaGFuZ2VzLmdyb3VwUm93cy5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5kZnMudXBkYXRlUHJvcGVydHkoJ2dyb3VwUm93cycsIGNoYW5nZXMuZ3JvdXBSb3dzLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMubWVyZ2VDZWxsICYmICFjaGFuZ2VzLm1lcmdlQ2VsbC5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5tZXJnZUZpZWxkcyAmJiAhY2hhbmdlcy5tZXJnZUZpZWxkcy5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5lbmFibGVGaWx0ZXJSb3cgJiYgIWNoYW5nZXMuZW5hYmxlRmlsdGVyUm93LmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRmcy51cGRhdGVQcm9wZXJ0eSgnZW5hYmxlRmlsdGVyUm93JywgY2hhbmdlcy5lbmFibGVGaWx0ZXJSb3cuY3VycmVudFZhbHVlKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2hvd0hlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRIZWFkZXJIZWlnaHQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyQmFySGVpZ2h0ID0gMzI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRncy50b2dnbGVGaWx0ZXJSb3cuZW1pdCh0aGlzLmVuYWJsZUZpbHRlclJvdyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRncy5zaG93R3JpZEhlYWRlci5lbWl0KHRoaXMucmVhbEhlYWRlckhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMuZW5hYmxlU21hcnRGaWx0ZXIgJiYgIWNoYW5nZXMuZW5hYmxlU21hcnRGaWx0ZXIuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGZzLnVwZGF0ZVByb3BlcnR5KCdlbmFibGVTbWFydEZpbHRlcicsIGNoYW5nZXMuZW5hYmxlU21hcnRGaWx0ZXIuY3VycmVudFZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLmVuYWJsZURyYWdDb2x1bW4gJiYgIWNoYW5nZXMuZW5hYmxlRHJhZ0NvbHVtbi5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0RyYWdDb2x1bW5zKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5zaG93Um93R3JvdXBQYW5lbCAmJiAhY2hhbmdlcy5zaG93Um93R3JvdXBQYW5lbC5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5kZ3Muc21hcnRGaWx0ZXJCYXJFeHBhbmQuZW1pdCgpO1xyXG4gICAgICAgICAgICB0aGlzLmRncy5zaG93R3JpZEhlYWRlci5lbWl0KHRoaXMucmVhbEhlYWRlckhlaWdodCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5zZWxlY3Rpb25Nb2RlICYmICFjaGFuZ2VzLnNlbGVjdGlvbk1vZGUuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc21zLnRvZ2dsZU1vZGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja0ZpbHRlclN0eWxlKCkge1xyXG4gICAgICAgIC8vIOi/h+a7pOihjOS4juaZuuiDvei/h+a7pCDlkIzml7blkK/nlKjml7bvvIzlsIbov4fmu6TooYznpoHnlKhcclxuICAgICAgICBpZiAodGhpcy5lbmFibGVGaWx0ZXJSb3cgJiYgdGhpcy5lbmFibGVTbWFydEZpbHRlcikge1xyXG4gICAgICAgICAgICB0aGlzLmVuYWJsZUZpbHRlclJvdyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jaGVja1NpemUoKSB7XHJcbiAgICAgICAgY29uc3QgdGhlbWVzS2V5ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2dzcF9ydGZfdGhlbVNLZXknKTtcclxuICAgICAgICBsZXQgc3Q6IGFueSA9ICdzbSc7XHJcbiAgICAgICAgc3dpdGNoICh0aGVtZXNLZXkpIHtcclxuICAgICAgICAgICAgY2FzZSAnZGVmYXVsdCc6XHJcbiAgICAgICAgICAgICAgICBzdCA9ICdzbSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbG9vc2UnOlxyXG4gICAgICAgICAgICAgICAgc3QgPSAnbWQnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNpemVUeXBlID0gc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja0RyYWdDb2x1bW5zKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzTXVsdGlIZWFkZXIoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmVuYWJsZURyYWdDb2x1bW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tPcHRpb25zKCkge1xyXG5cclxuICAgICAgICB0aGlzLmdyaWRTaXplID0geyB3aWR0aDogdGhpcy53aWR0aCArICdweCcsIGhlaWdodDogdGhpcy5oZWlnaHQgKyAncHgnIH07XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5pZCkge1xyXG4gICAgICAgICAgICB0aGlzLmlkID0gJ0ZhcnJpc0RhdGFHcmlkJyArIFV0aWxzLnV1aWQoKS5yZXBsYWNlKC8tL2csICcnKS5zdWJzdHIoMCwgMTApO1xyXG4gICAgICAgICAgICBpZiAodGhpcy51c2VDb250cm9sUGFuZWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXNlQ29udHJvbFBhbmVsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlQ29uc29sZSgn5ZCv55So5YiX6YWN572u5bGe5oCn77yM5pyq6K6+572uSUTvvIzmraTlip/og73lsIbnpoHnlKjjgIInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9jdXN0b21fZGF0YWdyaWRfY2xzID0gdGhpcy5pZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnN0eWxlU2hlZXRJZCA9IHRoaXMuaWQgKyAnXycgKyBVdGlscy51dWlkKCkucmVwbGFjZSgvLS9nLCAnJykuc3Vic3RyKDAsIDEwKTtcclxuICAgICAgICAgICAgdGhpcy5fY3VzdG9tX2RhdGFncmlkX2NscyA9IHRoaXMuc3R5bGVTaGVldElkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5nU2VydmljZSAmJiB0aGlzLnVzZUNvbnRyb2xQYW5lbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdTZXJ2aWNlLnJlZ2lzdGVyR3JpZEluc3RhbmNlKHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5kZ3MuY3JlYXRlU3R5bGVFbGVtZW50KHRoaXMuc3R5bGVTaGVldElkKTtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmlkRmllbGQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgRGF0YWdyaWRcXCdzIGlkRmllbGQgY2FuXFwndCBiZSBOdWxsLiAnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGVja05vd3JhcCgpO1xyXG4gICAgICAgIHRoaXMuY2hlY2tTb3J0SW5mbygpO1xyXG4gICAgICAgIHRoaXMuY2hlY2tNZXJnZUNlbGwoKTtcclxuICAgICAgICB0aGlzLnNldENoZWNrYm94QmVoYXZpb3IoKTtcclxuICAgICAgICB0aGlzLmluaXRQYWdpbmF0aW9uT3B0aW9ucygpO1xyXG4gICAgICAgIGlmICghdGhpcy5jb2x1bW5zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1ucyA9IHRoaXMuZmllbGRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jaGVja0dyb3VwSGVhZGVyQ29sdW1ucygpO1xyXG5cclxuICAgICAgICAvLyBURlM6IDM1Njk1NlxyXG4gICAgICAgIHRoaXMuY2hlY2tHcm91cFJvd1NldHRpbmcoKTtcclxuICAgICAgICB0aGlzLmNoZWNrQ29sdW1uc1R5cGUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5jaGVja0RyYWdDb2x1bW5zKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IF9kZWZhdWx0U2V0dGluZyA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fZmxhdENvbHVtbnMoKTtcclxuICAgICAgICAgICAgLy8gdGhpcy5zZXRIZWFkZXJIZWlnaHQoKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRSb3dIZWlnaHQoKTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5kZnMuc2V0aW5pdGlhbE9wdGlvbnMoe1xyXG4gICAgICAgICAgICBjb2x1bW5zOiB0aGlzLmNvbHVtbnMsXHJcbiAgICAgICAgICAgIGdyb3VwRmllbGQ6IHRoaXMuZ3JvdXBGaWVsZCxcclxuICAgICAgICAgICAgc29ydE5hbWU6IHRoaXMuc29ydE5hbWUsXHJcbiAgICAgICAgICAgIHNvcnRPcmRlcjogdGhpcy5zb3J0T3JkZXJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8g5Yqg6L2955So5oi35Liq5oCn5YyW6K6+572uIC0t44CLIOWIl+aYvuekuuS4juWIl+aOkuW6j1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdTZXJ2aWNlICYmIHRoaXMudXNlQ29udHJvbFBhbmVsKSB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzZXR0aW5ncyQgPSB0aGlzLnNldHRpbmdTZXJ2aWNlLmdldFNldHRpbmdzKHRoaXMuaWQpO1xyXG4gICAgICAgICAgICBpZiAoIXNldHRpbmdzJCkge1xyXG4gICAgICAgICAgICAgICAgX2RlZmF1bHRTZXR0aW5nKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0dGluZ3MkLnN1YnNjcmliZSgoc2V0cykgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNldHMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVzZXJQcm9maWxlU2V0dGluZyhzZXRzKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFJvd0hlaWdodChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YSAmJiB0aGlzLmRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZnMudXBkYXRlUHJvcGVydHkoJ2RhdGEnLCB0aGlzLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uc0NoYW5nZWQodGhpcy5ncm91cFJvd3MgJiYgKHRoaXMuZGF0YSAmJiAhIXRoaXMuZGF0YS5sZW5ndGgpKTtcclxuICAgICAgICAgICAgfSwgKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgX2RlZmF1bHRTZXR0aW5nKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlQ29uc29sZShlcnIsICdlcnJvcicpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBfZGVmYXVsdFNldHRpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJlZnJlc2hTZWxlY3RlZERhdGEoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRSb3cgJiYgdGhpcy5zZWxlY3RlZFJvdy5pZCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhICYmIHRoaXMuZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJkID0gdGhpcy5kYXRhLmZpbmQoZCA9PiBkW3RoaXMuaWRGaWVsZF0gPT09IHRoaXMuc2VsZWN0ZWRSb3cuaWQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFJvdy5kYXRhID0gcmQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93ID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlcygpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5ybykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5lbC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucm8udW5vYnNlcnZlKHRoaXMuZWwubmF0aXZlRWxlbWVudC5wYXJlbnRFbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnJvLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRvY3VtZW50Um93S2V5ZG93bkhhbmRsZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudFJvd0tleWRvd25IYW5kbGVyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmN1cnJlbnRDZWxsID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNsaWVudEZpbHRlclNlcnZpY2UgPSBudWxsO1xyXG5cclxuICAgICAgICB0aGlzLmNsZWFuRG9tKCk7XHJcblxyXG4gICAgICAgIC8vIOenu+mZpOWKqOaAgeeahHN0eWxlXHJcbiAgICAgICAgdGhpcy5kZ3MucmVtb3ZlU3R5bGVTaGVldCgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5nU2VydmljZSAmJiB0aGlzLnNldHRpbmdTZXJ2aWNlLmRlc3Ryb3kpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5nU2VydmljZS5kZXN0cm95KHRoaXMuaWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc21zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc21zLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgdGhpcy5zbXMgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLmRvY3VtZW50Qm9keU1vdXNlRG93biwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmZhcnJpc0luc3RhbmNlcykge1xyXG4gICAgICAgICAgICB0aGlzLmZhcnJpc0luc3RhbmNlcy5kZXN0cm95KHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3NlbGVjdGVkUm93ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmVkaXRvcnMgPSB7fTtcclxuICAgICAgICBEYXRhZ3JpZENvbHVtbnNIZWxwZXIuZ3JpZEluc3RhbmNlID0gbnVsbDtcclxuICAgICAgICB0aGlzLnVuYmluZE1vdmVTZWxlY3RSb3dFdmVudCgpO1xyXG4gICAgICAgIHRoaXMudW5iaW5kRG9jdW1lbnRFZGl0TGlzdGVuZXIoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxyXG4gICAgb25DbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnNob3dTZWxlY3RlZExpc3QgJiYgdGhpcy5kZ1BhZ2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGdQYWdlci5jbG9zZVNlbGVjdGVkTGlzdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGVuZGluZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgYW55O1xyXG4gICAgICAgIGlmICh0YXJnZXQubm9kZU5hbWUgPT09ICdURVhUQVJFQScgfHwgdGFyZ2V0Lm5vZGVOYW1lID09PSAnSU5QVVQnKSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRDZWxsICYmIHRoaXMuY3VycmVudENlbGwuZWRpdG9yICYmIHRoaXMuY3VycmVudENlbGwuZWRpdG9yLl9lZGl0b3JDbGlja0V2ZW50KSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgIHRoaXMuZW5kQ2VsbEVkaXQoZXZlbnQpO1xyXG4gICAgICAgIHRoaXMuZGZzLmNhbmNlbFNlbGVjdENlbGwoKTtcclxuICAgICAgICAqL1xyXG4gICAgICAgIGlmICh0aGlzLnN0b3BQcm9wYWdhdGlvbikge1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGluaXRQYWdpbmF0aW9uT3B0aW9ucygpIHtcclxuICAgICAgICB0aGlzLnBhZ2VyT3B0cyA9IHtcclxuICAgICAgICAgICAgaWQ6IHRoaXMuaWQgPyB0aGlzLmlkICsgJy1wYWdlcl8nICsgVXRpbHMudXVpZCgpIDogJ2ZhcnJpcy1kYXRhZ3JpZC1wYWdlcl8nICsgVXRpbHMudXVpZCgpLFxyXG4gICAgICAgICAgICBpdGVtc1BlclBhZ2U6IHRoaXMucGFnaW5hdGlvbiA/IHRoaXMucGFnZVNpemUgOiB0aGlzLnRvdGFsLFxyXG4gICAgICAgICAgICBjdXJyZW50UGFnZTogdGhpcy5wYWdlSW5kZXgsXHJcbiAgICAgICAgICAgIHRvdGFsSXRlbXM6IHRoaXMudG90YWwsXHJcbiAgICAgICAgICAgIHBhZ2VMaXN0OiB0aGlzLnBhZ2VMaXN0LFxyXG4gICAgICAgICAgICByZW1vdGU6IHRoaXMucGFnZXJPblNlcnZlclxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVQYWdlck9wdGlvbnMoKSB7XHJcbiAgICAgICAgdGhpcy5wYWdlck9wdHMgPSBPYmplY3QuYXNzaWduKHRoaXMucGFnZXJPcHRzLCB7XHJcbiAgICAgICAgICAgIGl0ZW1zUGVyUGFnZTogdGhpcy5wYWdlU2l6ZSxcclxuICAgICAgICAgICAgY3VycmVudFBhZ2U6IHRoaXMucGFnZUluZGV4LFxyXG4gICAgICAgICAgICB0b3RhbEl0ZW1zOiB0aGlzLnRvdGFsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRQYWdlclRvdGFsKCkge1xyXG4gICAgICAgIGNvbnN0IF90b3RhbCA9IHRoaXMuZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgaWYgKHRoaXMucGFnaW5hdGlvbiAmJiB0aGlzLnRvdGFsID09PSAwICYmIHRoaXMudmlydHVhbGl6ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWdlck9wdHMudG90YWxJdGVtcyA9IF90b3RhbDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMucGFnaW5hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlck9wdHMuaXRlbXNQZXJQYWdlID0gX3RvdGFsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0Rm9vdGVySGVpZ2h0KHJvd3M/OiBbXSkge1xyXG4gICAgICAgIGlmICh0aGlzLnNob3dGb290ZXIgJiYgIXRoaXMuZm9vdGVyVGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgcm93cyA9IHJvd3MgfHwgdGhpcy5fZm9vdGVyRGF0YVsndmFsdWUnXTtcclxuXHJcbiAgICAgICAgICAgIGlmICghcm93cyB8fCAhcm93cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubm93cmFwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvb3RlckhlaWdodCA9IHJvd3MubGVuZ3RoICogdGhpcy5mb290ZXJIZWlnaHQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpc1snX2Zvb3Rlcl9oZWlnaHRfdGltZXJfJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpc1snX2Zvb3Rlcl9oZWlnaHRfdGltZXJfJ10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXNbJ19mb290ZXJfaGVpZ2h0X3RpbWVyXyddID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9wRm9vdGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmYtZGF0YWdyaWQtZm9vdGVyLXRvcCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvdHRvbUZvb3RlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mLWRhdGFncmlkLWZvb3Rlci1ib3R0b20nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvcEZvb3Rlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcjIuc2V0U3R5bGUodG9wRm9vdGVyLCAnaGVpZ2h0JywgJzI5cHgnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb290ZXJIZWlnaHQgPSBNYXRoLm1heCguLi5BcnJheS5mcm9tKHRvcEZvb3Rlci5xdWVyeVNlbGVjdG9yQWxsKCd0YWJsZScpKS5tYXAobiA9PiBuLm9mZnNldEhlaWdodCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcjIuc2V0U3R5bGUodG9wRm9vdGVyLCAnaGVpZ2h0JywgdGhpcy5mb290ZXJIZWlnaHQgKyAncHgnKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYm90dG9tRm9vdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcjIuc2V0U3R5bGUoYm90dG9tRm9vdGVyLCAnaGVpZ2h0JywgJzI5cHgnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9vdGVySGVpZ2h0ID0gTWF0aC5tYXgoLi4uQXJyYXkuZnJvbShib3R0b21Gb290ZXIucXVlcnlTZWxlY3RvckFsbCgndGFibGUnKSkubWFwKG4gPT4gbi5vZmZzZXRIZWlnaHQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyMi5zZXRTdHlsZShib3R0b21Gb290ZXIsICdoZWlnaHQnLCB0aGlzLmZvb3RlckhlaWdodCArICdweCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZnMuY29sdW1uUmVzaXplRW5kKCk7XHJcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGN1c3RvbVN0eWxlS2V5KCkge1xyXG4gICAgICAgIHJldHVybiBgLiR7dGhpcy5fY3VzdG9tX2RhdGFncmlkX2Nsc31gO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0Um93SGVpZ2h0KHVzZVNpemVUeXBlID0gZmFsc2UpIHtcclxuICAgICAgICBjb25zdCBfcm93SGVpZ2h0ID0gU0laRV9UWVBFW3RoaXMuX3NpemVUeXBlXS5yb3c7XHJcbiAgICAgICAgY29uc3QgX3JoID0gMjk7XHJcbiAgICAgICAgaWYgKHVzZVNpemVUeXBlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm93SGVpZ2h0ID0gX3Jvd0hlaWdodDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnJvd0hlaWdodCA9IF9yb3dIZWlnaHQgPiB0aGlzLnJvd0hlaWdodCA/IF9yb3dIZWlnaHQgOiB0aGlzLnJvd0hlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZmlsdGVyUm93SGVpZ2h0ID0gU0laRV9UWVBFW3RoaXMuX3NpemVUeXBlXS5wYWdlcjtcclxuXHJcbiAgICAgICAgY29uc3Qga2V5MSA9IGAke3RoaXMuY3VzdG9tU3R5bGVLZXkoKX0uZi1kYXRhZ3JpZC1ib2R5LXJvdywgJHt0aGlzLmN1c3RvbVN0eWxlS2V5KCl9IC5mLWRhdGFncmlkLWNlbGxgO1xyXG4gICAgICAgIGNvbnN0IGtleTIgPSBgJHt0aGlzLmN1c3RvbVN0eWxlS2V5KCl9IC5mLWRhdGFncmlkLWNlbGwtY29udGVudGA7XHJcblxyXG4gICAgICAgIHRoaXMuZGdzLnJlbW92ZUNzc1J1bGUoa2V5MSk7XHJcbiAgICAgICAgdGhpcy5kZ3MucmVtb3ZlQ3NzUnVsZShrZXkyKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucm93SGVpZ2h0ICE9PSBfcmggJiYgdGhpcy5ub3dyYXApIHtcclxuICAgICAgICAgICAgY29uc3Qgcm93SGVpZ2h0Q1NTID0gW1xyXG4gICAgICAgICAgICAgICAgYCR7a2V5MX0geyBoZWlnaHQ6ICR7dGhpcy5yb3dIZWlnaHR9cHggfWAsXHJcbiAgICAgICAgICAgICAgICBgJHtrZXkyfSB7IGhlaWdodDogJHt0aGlzLnJvd0hlaWdodH1weDsgbGluZS1oZWlnaHQ6ICR7dGhpcy5yb3dIZWlnaHR9cHggfWBcclxuICAgICAgICAgICAgXTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGdzLmFwcGVuZENzc1J1bGVzKHJvd0hlaWdodENTUyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGluaXRTZWxlY3RPckNoZWNrZWQoKSB7XHJcbiAgICAgICAgY29uc3QgX2RhdGEgPSB0aGlzLmRmcy5nZXRDdXJyZW50UGFnZURhdGEoKTtcclxuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlTW9yZVBhZ2VTZWxlY3QgJiYgdGhpcy5tdWx0aVNlbGVjdCkge1xyXG4gICAgICAgICAgICAvLyB0aGlzLmNsZWFyQWxsKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrZWRzICYmIHRoaXMuY2hlY2tlZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWRzLmZvckVhY2gociA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfZGF0YS5maW5kKG4gPT4gblt0aGlzLmlkRmllbGRdID09IHIuaWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudW5DaGVja1JvdyhyLmlkLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQ2hlY2tlZHMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0VmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKF9kYXRhLmZpbmQobiA9PiBuW3RoaXMuaWRGaWVsZF0gPT0gdGhpcy5zZWxlY3RWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Um93KHRoaXMuc2VsZWN0VmFsdWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFNlbGVjdGVkRGF0YSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5tdWx0aVNlbGVjdCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jaGVja1ZhbHVlcyAmJiB0aGlzLmNoZWNrVmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hraWRzID0gdGhpcy5jaGVja2Vkcy5tYXAociA9PiByLmlkKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRpZmZJZHMgPSB0aGlzLmRmcy5kaWZmZXJlbmNlKGNoa2lkcywgdGhpcy5jaGVja1ZhbHVlcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRpZmZJZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja1Jvd3MoZGlmZklkcywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrVmFsdWVzID0gW107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrVmFsdWVzID0gW107XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tWYWx1ZXMgPSB0aGlzLmNoZWNrZWRzLm1hcChyID0+IHIuaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1Jlc2l6ZWQgfHwgdGhpcy52aXJ0dWFsaXplZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja1ZhbHVlc0NoYW5nZS5lbWl0KHRoaXMuY2hlY2tWYWx1ZXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja2VkQ2hhbmdlLmVtaXQodGhpcy5jaGVja2Vkcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy51cGRhdGVBbGxDaGVja2JveFN0YXR1cyhfZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlQWxsQ2hlY2tib3hTdGF0dXMoX2RhdGE/OiBhbnkpIHtcclxuICAgICAgICBpZiAoIV9kYXRhKSB7XHJcbiAgICAgICAgICAgIF9kYXRhID0gdGhpcy5kZnMuZ2V0Q3VycmVudFBhZ2VEYXRhKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgY2hlY2tBbGxTdGF0dXMgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLnNob3dBbGxDaGVja2JveCkge1xyXG4gICAgICAgICAgICBjb25zdCBhbGxEYXRhSURzID0gX2RhdGEubWFwKHIgPT4gclt0aGlzLmlkRmllbGRdKTtcclxuICAgICAgICAgICAgY29uc3QgbmV3Q2hlY2tWYWx1ZXMgPSBhbGxEYXRhSURzLmZpbHRlcihuID0+IHRoaXMuY2hlY2tWYWx1ZXMuaW5jbHVkZXMobikpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG5ld0NoZWNrVmFsdWVzICYmIG5ld0NoZWNrVmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNTYW1lID0gIXRoaXMuZGZzLmRpZmZlcmVuY2UoYWxsRGF0YUlEcywgdGhpcy5jaGVja1ZhbHVlcykubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrVmFsdWVzIHx8ICF0aGlzLmNoZWNrVmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOayoeaciemAieS4reeahOaVsOaNrlxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQWxsU3RhdHVzID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzU2FtZSkgeyAvLyB0aGlzLmNoZWNrVmFsdWVzLmxlbmd0aCA9PT0gdGhpcy5kYXRhLmxlbmd0aCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWFqOmDqOmAieS4rVxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQWxsU3RhdHVzID0gMTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzU2FtZSkgeyAvLyB0aGlzLmNoZWNrVmFsdWVzLmxlbmd0aCAhPT0gdGhpcy5kYXRhLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOaciemAieS4reeahOaVsOaNru+8jOS9huS4jeaYr+WFqOmDqOmAieS4rVxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQWxsU3RhdHVzID0gMjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5kZ3MuY2hhbmdlQ2hlY2tBbGxTdGF0dXMuZW1pdChjaGVja0FsbFN0YXR1cyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5b2T5Y2V6YCJ5bm25pi+56S65aSN6YCJ5qGG5pe277yM6buY6K6k5bCGIGNoZWNrT25TZWxlY3QsIHNlbGVjdE9uQ2hlY2sg6K6+572u5Li6IHRydWU7XHJcbiAgICBwcml2YXRlIHNldENoZWNrYm94QmVoYXZpb3IoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm11bHRpU2VsZWN0ICYmIHRoaXMuc2hvd0NoZWNrYm94KSB7XHJcbiAgICAgICAgICAgIC8vIFRGUzogMzgwODk5XHJcbiAgICAgICAgICAgIC8vIHRoaXMuY2hlY2tPblNlbGVjdCA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuc2VsZWN0T25DaGVjayA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2ZsYXRDb2x1bW5zKCkge1xyXG4gICAgICAgIHRoaXMuZmxhdENvbHVtbnMgPSBmbGF0dGVuPERhdGFDb2x1bW4+KHRoaXMuY29sdW1ucykuZmlsdGVyKChjb2w6IERhdGFDb2x1bW4pID0+ICFjb2wuY29sc3BhbiAmJiB0aGlzLmNvbHVtbklzVmlzaWJsZShjb2wpKTtcclxuICAgICAgICBpZiAodGhpcy5pc011bHRpSGVhZGVyKCkgJiYgdGhpcy5mYXN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmxhdENvbHVtbnMgPSB0aGlzLmRmcy5nZXRHcm91cENvbHVtbnModGhpcy5jb2x1bW5zWzBdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29sdW1uSXNWaXNpYmxlKGNvbDogRGF0YUNvbHVtbikge1xyXG4gICAgICAgIHJldHVybiBEYXRhZ3JpZENvbHVtbnNIZWxwZXIuY29sdW1uSXNWaXNpYmxlKGNvbCwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5re75Yqg5YiX6K6+572uXHJcbiAgICBwcml2YXRlIGFkZENvbnRyb2xDb2woKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudXNlQ29udHJvbFBhbmVsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xDb2wgPSB0aGlzLmNvbHVtbnNbMF0uZmluZChuID0+IG4uZmllbGQgPT09IHRoaXMuQ29udHJvbFBhbmVsRmVpbGQpO1xyXG4gICAgICAgICAgICBpZiAoIWNvbnRyb2xDb2wpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNwID0geyBmaWVsZDogdGhpcy5Db250cm9sUGFuZWxGZWlsZCwgd2lkdGg6IDI0LCByb3dzcGFuOiB0aGlzLmNvbHVtbnMubGVuZ3RoLCBmaXhlZDogJ3JpZ2h0JywgdmlzaWJsZTogdHJ1ZSB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIDIwMjEtMDUtMjQg5ZCv55So6L+H5ruk6KGM5ZCO5Ye66ZSZXHJcbiAgICAgICAgICAgICAgICAvLyBpZiAodGhpcy5lbmFibGVGaWx0ZXJSb3cpIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICBjcC5yb3dzcGFuICs9IDE7XHJcbiAgICAgICAgICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5zWzBdLnB1c2goY3ApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udHJvbENvbC52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNoZWNrR3JvdXBIZWFkZXJDb2x1bW5zKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzTXVsdGlIZWFkZXIoKSkge1xyXG4gICAgICAgICAgICBjb25zdCBhbGxDb2xzID0gZmxhdHRlbjxEYXRhQ29sdW1uPih0aGlzLmNvbHVtbnMpO1xyXG4gICAgICAgICAgICBEYXRhZ3JpZENvbHVtbnNIZWxwZXIuY2hlY2tHcm91cEhlYWRlckNvbHVtblZpc2libGUoYWxsQ29scyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOajgOafpeWIl+mbhuWQiDogW10gLT4gW1tdXVxyXG5cclxuICAgIHByaXZhdGUgY29ycmVjdENvbHVtbnModmFsdWVzKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoICYmICFBcnJheS5pc0FycmF5KHZhbHVlc1swXSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFt2YWx1ZXNdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXMgfHwgW107XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tDb2x1bW5zVHlwZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5jb2x1bW5zICYmIHRoaXMuY29sdW1ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gaWYgKCFBcnJheS5pc0FycmF5KHRoaXMuY29sdW1uc1swXSkpIHtcclxuICAgICAgICAgICAgLy8gICAgIHRoaXMuY29sdW1ucyA9IFsgdGhpcy5jb2x1bW5zIF07XHJcbiAgICAgICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuYWRkQ29udHJvbENvbCgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb2x1bW5zLmZvckVhY2goKGNvbHMsIGNvbHVtbnNJbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29scy5mb3JFYWNoKChjb2w6IERhdGFDb2x1bW4sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb2wuZmllbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sLmZpZWxkID0gYGZhcnJpcy1kYXRhZ3JpZC1jb2x1bW5fJHtjb2x1bW5zSW5kZXh9XyR7aW5kZXh9YDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY29sLnZhbGlnbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2wudmFsaWduID0gJ21pZGRsZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sLndpZHRoID09PSB1bmRlZmluZWQgfHwgY29sLndpZHRoID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbC53aWR0aCA9IDEwMDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbC53aWR0aCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbC53aWR0aCA9IHBhcnNlSW50KGNvbC53aWR0aCwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyDorrDlvZXljp/lp4vlrr3luqZcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbC5vcmlnaW5hbFdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbC5vcmlnaW5hbFdpZHRoID0gY29sLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbC5mb3JtYXR0ZXIgJiYgdHlwZW9mIGNvbC5mb3JtYXR0ZXIgIT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmtleXMoY29sLmZvcm1hdHRlcikubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbC5mb3JtYXR0ZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNob3dHcm91cENvbHVtbiAmJiB0aGlzLmdyb3VwUm93cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVZpc2libGVDb2x1bW4odGhpcy5ncm91cEZpZWxkLnNwbGl0KCcsJyksIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6L+H5ruk6KGM5qOA5p+lXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbC5maWx0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2wuZmlsdGVyID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2wuZmllbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wuZmlsdGVyID0gdGhpcy5jbGllbnRGaWx0ZXJTZXJ2aWNlLmNyZWF0ZUNvbHVtbkZpbHRlck9wdGlvbnMoY29sKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sLmZpbHRlciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb2wuZmlsdGVyLm9wdGlvbnMgfHwgIU9iamVjdC5rZXlzKGNvbC5maWx0ZXIub3B0aW9ucykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjb2wuZmlsdGVyLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBDb2x1bW5GaWx0ZXJUeXBlLmVudW06XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wuZmlsdGVyLm9wdGlvbnMgPSBjb2wuZm9ybWF0dGVyWydvcHRpb25zJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBDb2x1bW5GaWx0ZXJUeXBlLmRhdGU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wuZmlsdGVyLm9wdGlvbnMgPSB7IGRhdGVGb3JtYXQ6ICd5eXl5LU1NLWRkJywgcmV0dXJuRm9ybWF0OiAneXl5eS1NTS1kZCcgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIENvbHVtbkZpbHRlclR5cGUuZGF0ZXRpbWU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wuZmlsdGVyLm9wdGlvbnMgPSB7IGRhdGVGb3JtYXQ6ICd5eXl5LU1NLWRkIEhIOm1tOnNzJywgcmV0dXJuRm9ybWF0OiAneXl5eS1NTS1kZCBISDptbTpzcycgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWFvOWuuSBoaWRkZW4gMjAyMS0wNS0zMVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xbJ2hpZGRlbiddICE9PSB1bmRlZmluZWQgJiYgY29sLnZpc2libGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbFsnaGlkZGVuJ10gPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sLnZpc2libGUgPSAhY29sWydoaWRkZW4nXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29sWydoaWRkZW4nXSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbC52aXNpYmxlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gY29sWydoaWRkZW4nXS5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja0dyb3VwUm93U2V0dGluZygpIHtcclxuICAgICAgICAvLyDlpoLmnpzlkK/nlKjliIbnu4TooYzvvIzkvYbmnKrorr7nva7liIbnu4TlrZfmrrXml7bvvIzlsIblhbPpl63liIbnu4TooYzlip/og71cclxuICAgICAgICAvLyBpZiAodGhpcy5ncm91cFJvd3MpIHtcclxuICAgICAgICAvLyAgICAgaWYgKCF0aGlzLmdyb3VwRmllbGQpIHtcclxuICAgICAgICAvLyAgICAgICAgIHRoaXMuZ3JvdXBSb3dzID0gZmFsc2U7XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja01lcmdlQ2VsbCgpIHtcclxuICAgICAgICBpZiAodGhpcy5tZXJnZUNlbGwpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm1lcmdlRmllbGRzIHx8ICF0aGlzLm1lcmdlRmllbGRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZXJnZUNlbGwgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlydHVhbGl6ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlydHVhbGl6ZWRBc3luY0xvYWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNoZWNrU29ydEluZm8oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc29ydE5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnNvcnRPcmRlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb3J0T3JkZXIgPSB0aGlzLnNvcnROYW1lLnNwbGl0KCcsJykubWFwKCgpID0+ICdhc2MnKS5qb2luKCcsJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja05vd3JhcCgpIHtcclxuICAgICAgICAvLyDlkK/nlKjmipjooYzlkI7vvIzomZrmi5/liqDovb3nibnmgKflpLHmlYhcclxuICAgICAgICBpZiAoIXRoaXMubm93cmFwKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlydHVhbGl6ZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0SGVhZGVySGVpZ2h0KCkge1xyXG4gICAgICAgIHRoaXMucmVhbEhlYWRlckhlaWdodCA9IDA7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd0hlYWRlcikge1xyXG4gICAgICAgICAgICAvLyBpZiAoIXRoaXMuaGVhZGVyV3JhcCkge1xyXG4gICAgICAgICAgICAvLyAgICAgdGhpcy5yZWFsSGVhZGVySGVpZ2h0ID0gdGhpcy5jb2x1bW5zLmxlbmd0aCAqIHRoaXMuaGVhZGVySGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgLy8gICAgIGlmICh0aGlzLmVuYWJsZUZpbHRlclJvdykge1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIHRoaXMucmVhbEhlYWRlckhlaWdodCArPSB0aGlzLmZpbHRlclJvd0hlaWdodDtcclxuICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gICAgIGNvbnN0IGdyaWRIZWFkZXJFbCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZi1kYXRhZ3JpZC1oZWFkZXInKTtcclxuICAgICAgICAgICAgLy8gICAgIGlmIChncmlkSGVhZGVyRWwpIHtcclxuICAgICAgICAgICAgLy8gICAgICAgICBjb25zdCB0cnMgPSBncmlkSGVhZGVyRWwucXVlcnlTZWxlY3RvckFsbCgndGFibGUgdHI6bm90KC5mLWRhdGFncmlkLWZpbHRlci1yb3cpJyk7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgdHJzLmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIG4uc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICBBcnJheS5mcm9tKG4uY2hpbGRyZW4pLmZvckVhY2goKGE6IGFueSkgPT4gYS5zdHlsZS5oZWlnaHQgPSAnYXV0bycpO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gICAgICAgICAvLyBjb25zdCBoID0gTWF0aC5tYXgoLi4uQXJyYXkuZnJvbSh0cnMpLm1hcCgobjogYW55KSA9PiBuLmNsaWVudEhlaWdodCkpO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIC8vIHRoaXMucmVhbEhlYWRlckhlaWdodCA9IGg7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgY29uc3QgdGFibGVFbCA9IGdyaWRIZWFkZXJFbC5xdWVyeVNlbGVjdG9yKCd0YWJsZScpO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIGlmKHRhYmxlRWwpIHtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgdGhpcy5yZWFsSGVhZGVySGVpZ2h0ID0gdGFibGVFbC5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZ3JpZEhlYWRlckVsID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mLWRhdGFncmlkLWhlYWRlcicpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaGVhZGVyV3JhcCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgaGVhZGVyOiBoaCwgcGFnZXI6IHBofSA9IFNJWkVfVFlQRVt0aGlzLl9zaXplVHlwZV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWRlckhlaWdodCA9IGhoO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWFsSGVhZGVySGVpZ2h0ID0gdGhpcy5jb2x1bW5zLmxlbmd0aCAqIHRoaXMuaGVhZGVySGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZUZpbHRlclJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOino+WGs+WuveadvueJiOS4i1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyUm93SGVpZ2h0ID0gcGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFsSGVhZGVySGVpZ2h0ICs9IHRoaXMuZmlsdGVyUm93SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChncmlkSGVhZGVyRWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBncmlkSGVhZGVyRWwuc3R5bGUubWluSGVpZ2h0ID0gdGhpcy5yZWFsSGVhZGVySGVpZ2h0ICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChncmlkSGVhZGVyRWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcjIucmVtb3ZlU3R5bGUoZ3JpZEhlYWRlckVsLCAnbWluSGVpZ2h0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJzID0gZ3JpZEhlYWRlckVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RhYmxlIHRyOm5vdCguZi1kYXRhZ3JpZC1maWx0ZXItcm93KScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRycy5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkuZnJvbShuLmNoaWxkcmVuKS5mb3JFYWNoKChhOiBhbnkpID0+IGEuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFibGVFbHMgPSBBcnJheS5mcm9tKGdyaWRIZWFkZXJFbC5xdWVyeVNlbGVjdG9yQWxsKCd0YWJsZScpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZih0YWJsZUVscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWlnaHRzID0gdGFibGVFbHMubWFwKCh0OiBhbnkpID0+IHQub2Zmc2V0SGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gTWF0aC5tYXgoLi4uaGVpZ2h0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVhbEhlYWRlckhlaWdodCA9IG1heEhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZEhlYWRlckVsLnN0eWxlLm1pbkhlaWdodCA9IHRoaXMucmVhbEhlYWRlckhlaWdodCArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnJlYWxIZWFkZXJIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5YiX6ZuG5ZCI5Y+Y5YyWXHJcbiAgICBjb2x1bW5zQ2hhbmdlZChyZWxvYWREYXRhID0gdHJ1ZSwgdXNlQ29sdW1uU2V0dGluZ1dpZHRoID0gbnVsbCkge1xyXG4gICAgICAgIGNvbnN0IF91c2VDb2x1bW5TZXR0aW5nV2lkdGggPSB1c2VDb2x1bW5TZXR0aW5nV2lkdGggPT09IG51bGwgPyB0aGlzLmZpdENvbHVtbnMgOiB1c2VDb2x1bW5TZXR0aW5nV2lkdGg7XHJcblxyXG4gICAgICAgIHRoaXMuZGZzLnVwZGF0ZVByb3BlcnR5KCdleHBhbmRHcm91cFJvd3MnLCB0aGlzLmV4cGFuZEdyb3VwUm93cyk7XHJcblxyXG4gICAgICAgIHRoaXMuY2hlY2tDb2x1bW5zVHlwZSgpO1xyXG5cclxuICAgICAgICB0aGlzLl9mbGF0Q29sdW1ucygpO1xyXG4gICAgICAgIHRoaXMuaGVhZGVySGVpZ2h0Q2hhbmdlKCk7XHJcbiAgICAgICAgdGhpcy5kZnMudXBkYXRlUHJvcGVydHkoJ2ZsYXRDb2x1bW5zJywgdGhpcy5mbGF0Q29sdW1ucyk7XHJcbiAgICAgICAgdGhpcy5kZnMudXBkYXRlQ29sdW1ucyh0aGlzLmNvbHVtbnMsIF91c2VDb2x1bW5TZXR0aW5nV2lkdGgsIHRydWUpO1xyXG5cclxuICAgICAgICAvLyB0aGlzLmNvbEdyb3VwID0gdGhpcy5kZnMuZ2V0U3RhdGUoKS5jb2x1bW5zR3JvdXA7XHJcbiAgICAgICAgLy8g5Yqo5oCB5YiX5ZCI6K6h6KGMXHJcbiAgICAgICAgdGhpcy51cGRhdGVGb290ZXJEYXRhKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZGdzLmNvbHVtbnNDaGFuZ2VkLmVtaXQoeyBzY3JvbGxUb0xlZnQ6IHJlbG9hZERhdGEgfSk7XHJcblxyXG4gICAgICAgIGlmIChyZWxvYWREYXRhKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpc1snX0NPTFVNTlNfQ0hBTkFHRURfVElNRVJfJ10pIHtcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzWydfQ09MVU1OU19DSEFOQUdFRF9USU1FUl8nXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXNbJ19DT0xVTU5TX0NIQU5BR0VEX1RJTUVSXyddID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcclxuICAgICAgICAgICAgfSwgNjApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZXRDZWxsU3R5bGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDliJflpLTlj5jljJZcclxuICAgIHByaXZhdGUgaGVhZGVySGVpZ2h0Q2hhbmdlKCkge1xyXG4gICAgICAgIHRoaXMuc2V0SGVhZGVySGVpZ2h0KCk7XHJcbiAgICAgICAgdGhpcy5kZ3Muc2hvd0dyaWRIZWFkZXIuZW1pdCh0aGlzLnJlYWxIZWFkZXJIZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDliKTmlq3mmK/lkKblnKjlvLnlh7rnmoTnqpflj6PkuK3vvJvov5Tlm551bmRlZmluZCDor7TmmI7msqHmnInlnKjlvLnlh7rnmoTnqpflj6PvvIzlkKbliJnop4bkuLrlvZPliY3liJfooajlnKjlvLnlh7rnqpflj6Pkvb/nlKggKi9cclxuICAgIGluRGlhbG9nKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2xvc2VzdCgnLm1vZGFsLWJvZHknKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAvLyNyZWdpb24gSW5pdFxyXG4gICAgLyoqIOWIneWni+e8lui+keWZqOS4jumqjOivgeWZqCAqL1xyXG4gICAgcHJpdmF0ZSBpbml0RWRpdG9yQW5kVmFsaWRhdG9yKCkge1xyXG4gICAgICAgIGNvbnN0IEVkaXRvcnMgPSB0aGlzLmluamVjdC5nZXQ8YW55W10+KEdSSURfRURJVE9SUywgW10pO1xyXG5cclxuICAgICAgICBpZiAoRWRpdG9ycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgRWRpdG9ycy5mb3JFYWNoKGVkID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yc1tlZC5uYW1lXSA9IGVkLnZhbHVlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgX3ZhbGlkYXRvcnMgPSB0aGlzLmluamVjdC5nZXQ8YW55W10+KEdSSURfVkFMSURBVE9SUywgW10pO1xyXG4gICAgICAgIGlmIChfdmFsaWRhdG9ycyAmJiBfdmFsaWRhdG9ycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gX3ZhbGlkYXRvcnMuZm9yRWFjaCh2ciA9PiB7XHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLnZhbGlkYXRvcnNbdnIubmFtZV0gPSB2ci52YWx1ZTtcclxuICAgICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdG9ycyA9IF92YWxpZGF0b3JzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRQYWdlckhlaWdodCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMudXNlSHRtbFRhYmxlKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5wYWdpbmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2VySGVpZ2h0ID0gMDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFnZXJIZWlnaHQgPSB0aGlzLmRnUGFnZXIgJiYgdGhpcy5kZ1BhZ2VyLm91dGVySGVpZ2h0IHx8IDQwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdFN0YXRlKCkge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZGF0YSB8fCBbXTtcclxuXHJcbiAgICAgICAgbGV0IHN0YSA9IHt9O1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMpLmZvckVhY2goKGs6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIUlnbm9yZVByb3BlcnRpZXMuaW5jbHVkZXMoaykpIHtcclxuICAgICAgICAgICAgICAgIHN0YVtrXSA9IHRoaXNba107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5kZnMuaW5pdFN0YXRlKHsgLi4uc3RhLCBmaXRDb2x1bW5zOiB0aGlzLmZpdENvbHVtbnMsIGZpdDogdGhpcy5maXQsIGdyb3VwRmllbGQ6IHRoaXMuX2dyb3VwRmllbGQgfSk7XHJcbiAgICAgICAgc3RhID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldEZpdENvbHVtbnMoZml0Q29sdW1ucyA9IHRydWUpIHtcclxuICAgICAgICBpZiAodGhpcy5jb2x1bW5zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGZzLmZpdENvbHVtbnMoZml0Q29sdW1ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0R3JpZE5ld1NpemVXaGVuRml0KCkge1xyXG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgIGlmIChwYXJlbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwYWRkaW5nID0gdGhpcy5nZXRFbGVtZW50UGFkZGluZyhwYXJlbnQpO1xyXG4gICAgICAgICAgICBjb25zdCBib3JkZXIgPSB0aGlzLmdldEVsZW1lbnRCb3JkZXJXaWR0aChwYXJlbnQpO1xyXG5cclxuICAgICAgICAgICAgbGV0IG0gPSAnZmxvb3InXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1heEhlaWdodCAmJiB0aGlzLmF1dG9IZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgIG0gPSAnY2VpbCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gTWF0aFttXShNYXRoLmNlaWwod2lkdGgpIC0gYm9yZGVyLmxlZnQgLSBib3JkZXIucmlnaHQgLSBwYWRkaW5nLmxlZnQgLSBwYWRkaW5nLnJpZ2h0KTtcclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBNYXRoW21dKE1hdGguY2VpbChoZWlnaHQpIC0gYm9yZGVyLnRvcCAtIGJvcmRlci5ib3R0b20gLSBwYWRkaW5nLnRvcCAtIHBhZGRpbmcuYm90dG9tKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1heEhlaWdodCAmJiB0aGlzLmF1dG9IZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0ICs9IDE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5oZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5kZnMuZ2V0U3RhdGUoKS5oZWlnaHQgfHwgMzAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMud2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmRmcy5nZXRTdGF0ZSgpLndpZHRoIHx8IDgwMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY3VsYXRlR3JpZFNpemUoZml0ID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnVzZUh0bWxUYWJsZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzZXROZXdTaXplID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgaCA9IHRoaXMuaGVpZ2h0O1xyXG4gICAgICAgICAgICBpZiAodGhpcy51c2VCbGFua1doZW5EYXRhSXNFbXB0eSAmJiAoIXRoaXMuZGF0YSB8fCAhdGhpcy5kYXRhLmxlbmd0aCkpIHtcclxuICAgICAgICAgICAgICAgIGggPSB0aGlzLmVtcHR5RGF0YUhlaWdodCArIHRoaXMucmVhbEhlYWRlckhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdyaWRTaXplLmhlaWdodCA9PT0gaCArICdweCcgJiYgdGhpcy5ncmlkU2l6ZS53aWR0aCA9PT0gdGhpcy53aWR0aCArICdweCcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5ncmlkU2l6ZSA9IHsgd2lkdGg6IHRoaXMud2lkdGggKyAncHgnLCBoZWlnaHQ6IGggKyAncHgnIH07XHJcbiAgICAgICAgICAgIHRoaXMuZGZzLnJlc2l6ZSh7IHdpZHRoOiB0aGlzLndpZHRoLCBoZWlnaHQ6IGggfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZml0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0R3JpZE5ld1NpemVXaGVuRml0KCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLndpZHRoICYmIHRoaXMuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pc1Jlc2l6ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgc2V0TmV3U2l6ZSgpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pc1Jlc2l6ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jZFsnZGVzdHJveWVkJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNldE5ld1NpemUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdEJlZm9yZUV2ZW50cygpIHtcclxuICAgICAgICBpZiAoIXRoaXMuYmVmb3JlU2VsZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmVmb3JlU2VsZWN0ID0gKCkgPT4gb2YodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5iZWZvcmVVbnNlbGVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLmJlZm9yZVVuc2VsZWN0ID0gKCkgPT4gb2YodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuYmVmb3JlQ2hlY2spIHtcclxuICAgICAgICAgICAgdGhpcy5iZWZvcmVDaGVjayA9ICgpID0+IG9mKHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmJlZm9yZVVuY2hlY2spIHtcclxuICAgICAgICAgICAgdGhpcy5iZWZvcmVVbmNoZWNrID0gKCkgPT4gb2YodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuYmVmb3JlU29ydENvbHVtbikge1xyXG4gICAgICAgICAgICB0aGlzLmJlZm9yZVNvcnRDb2x1bW4gPSAoKSA9PiBvZih0cnVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5iZWZvcmVFZGl0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmVmb3JlRWRpdCA9ICgpID0+IG9mKHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmFmdGVyRWRpdCkge1xyXG4gICAgICAgICAgICB0aGlzLmFmdGVyRWRpdCA9ICgpID0+IG9mKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0cmFja0J5Um93cyA9IChpbmRleDogbnVtYmVyLCByb3c6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmIChyb3cpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJvd1t0aGlzLmlkRmllbGRdIHx8IGluZGV4O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgLy8jcmVnaW9uIOW/q+aNt+mUrlxyXG5cclxuICAgIHByaXZhdGUgdW5iaW5kTW92ZVNlbGVjdFJvd0V2ZW50KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRvY3VtZW50Um93S2V5ZG93bkhhbmRsZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudFJvd0tleWRvd25IYW5kbGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRSb3dLZXlkb3duSGFuZGxlciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGJpbmREb2N1bWVudE1vdmVTZWxlY3RSb3dFdmVudCgpIHtcclxuICAgICAgICB0aGlzLnVuYmluZE1vdmVTZWxlY3RSb3dFdmVudCgpO1xyXG4gICAgICAgIHRoaXMudW5iaW5kRG9jdW1lbnRFZGl0TGlzdGVuZXIoKTtcclxuICAgICAgICB0aGlzLmRvY3VtZW50Um93S2V5ZG93bkhhbmRsZXIgPSB0aGlzLnJlbmRlcjIubGlzdGVuKGRvY3VtZW50LCAna2V5ZG93bicsIChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGhhcyBsb2FkaW5nXHJcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdmYXJyaXMtbG9hZGluZycpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldE5hbWUgPSAoZS50YXJnZXQgYXMgYW55KS5ub2RlTmFtZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlnbm9yZVRhcmdldC5pbmRleE9mKHRhcmdldE5hbWUpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDQwIHx8IGUua2V5Q29kZSA9PT0gMzgpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDA6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3ROZXh0Um93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM4OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0UHJldlJvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBiaW5kRWRpdExpc3RlbmVySW5Nb2RhbCgpIHtcclxuICAgICAgICAvLyDlvLnnqpfkuK3kuovku7blpITnkIZcclxuICAgICAgICBpZiAoVXRpbHMuaGFzRGlhbG9nT3BlbigpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsRWxlbWVudCA9IHRoaXMuaW5EaWFsb2coKTtcclxuICAgICAgICAgICAgaWYgKG1vZGFsRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgX2Ztb2RhbCA9IG1vZGFsRWxlbWVudC5jbG9zZXN0KCcuZmFycmlzLW1vZGFsJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2Ztb2RhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9kYWxDbGlja0V2ZW50ID0gdGhpcy5yZW5kZXIyLmxpc3RlbihfZm1vZGFsLCAnY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW5kRWRpdGluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRDZWxsID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkRvY3VtZW50TW91c2VEb3duID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGdyaWQgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLmYtZGF0YWdyaWQnKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGVuZGluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWRncmlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlRGF0YUdyaWQoZmFsc2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChkZ3JpZC5pZCA9PT0gdGhpcy5pZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50Q2VsbCkge1xyXG4gICAgICAgICAgICBpZiAoVXRpbHMuaGFzRGlhbG9nT3BlbigpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRsZyA9IHRoaXMuaW5EaWFsb2coKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRUYXJnZXRJbkRpYWxvZyA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCcubW9kYWwtYm9keScpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGxnICYmIGN1cnJlbnRUYXJnZXRJbkRpYWxvZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRsZyAhPSBjdXJyZW50VGFyZ2V0SW5EaWFsb2cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoICF0aGlzLmN1cnJlbnRDZWxsLmNlbGxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRDZWxsLmlzRWRpdGluZykge1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHpvbmVDbGljayA9IGV2ZW50LnRhcmdldFsnX196b25lX3N5bWJvbF9fY2xpY2tmYWxzZSddO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNCZUJ0biA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCcuYmVkZXNpZ25lci10b29sYmFyJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc09sZEJlQnRuID0gZXZlbnQudGFyZ2V0LmNsYXNzTmFtZS5pbmRleE9mKCdiZUVsZUdyaWRCdXR0b24nKSA+IC0xO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGlzYWJsZUNsaWNrRXZlbnQgPSB6b25lQ2xpY2sgJiYgem9uZUNsaWNrLmxlbmd0aCAmJiAoZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5mLXNlY3Rpb24taW4tbWFpbnN1YmNhcmQnKSB8fCBpc09sZEJlQnRuIHx8IGlzQmVCdG4gfHwgZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5kYXRhZ3JpZC10b29sYmFycycpKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChkaXNhYmxlQ2xpY2tFdmVudCAmJiAhZGdyaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBfdGltZXIgPSBkaXNhYmxlQ2xpY2tFdmVudCA/ICgoaXNCZUJ0biB8fCBpc09sZEJlQnRuKT8gNTA6IDIwMCkgOiAwO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcEVkaXRpbmdSb3dJbmRleCA9IHRoaXMuY3VycmVudENlbGwucm93SW5kZXg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRDZWxsLmNlbGxFbGVtZW50LmNsb3NlRWRpdCgpLnBpcGUoZGVib3VuY2VUaW1lKF90aW1lcikpLnN1YnNjcmliZShmID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50Q2VsbCAmJiBzdG9wRWRpdGluZ1Jvd0luZGV4ICE9PSB0aGlzLmN1cnJlbnRDZWxsLnJvd0luZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudENlbGwgJiYgdGhpcy5jdXJyZW50Q2VsbC5jZWxsRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9tSGFuZGxlci5yZW1vdmVDbGFzcyh0aGlzLmN1cnJlbnRDZWxsLmNlbGxFbGVtZW50LCBDRUxMX1NFTEVDVEVEX0NMUyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb21IYW5kbGVyLnJlbW92ZUNsYXNzKHRoaXMuY3VycmVudENlbGwuY2VsbEVsZW1lbnQsIENFTExfRURJVElOR19DTFMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGZzLmNhbmNlbFNlbGVjdENlbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51bmJpbmREb2N1bWVudEVkaXRMaXN0ZW5lcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRDZWxsID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzYWJsZUNsaWNrRXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvbmVDbGljay5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uY2FsbGJhY2soZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdhdXRvJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNCZUJ0biB8fCBpc09sZEJlQnRuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAudGljaygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYmluZERvY3VtZW50RWRpdExpc3RlbmVyKCkge1xyXG4gICAgICAgIHRoaXMudW5iaW5kRG9jdW1lbnRFZGl0TGlzdGVuZXIoKTtcclxuIC8qXHJcbiAgICAgICAgaWYgKCF0aGlzLmRvY3VtZW50Q2VsbENsaWNrSGFuZGxlcikge1xyXG4gICAgICAgICAgICB0aGlzLmJpbmRFZGl0TGlzdGVuZXJJbk1vZGFsKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRDZWxsQ2xpY2tIYW5kbGVyID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudENlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoVXRpbHMuaGFzRGlhbG9nT3BlbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGxnID0gdGhpcy5pbkRpYWxvZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50VGFyZ2V0SW5EaWFsb2cgPSBldmVudC50YXJnZXQuY2xvc2VzdCgnLm1vZGFsLWJvZHknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGxnICYmIGN1cnJlbnRUYXJnZXRJbkRpYWxvZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGxnICE9IGN1cnJlbnRUYXJnZXRJbkRpYWxvZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBEb21IYW5kbGVyLnJlbW92ZUNsYXNzKHRoaXMuY3VycmVudENlbGwuY2VsbEVsZW1lbnQsIENFTExfU0VMRUNURURfQ0xTKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgKHRoaXMuY3VycmVudENlbGwuaXNFZGl0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC8vIHRoaXMuZGZzLmVuZEVkaXRDZWxsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRoaXMuY3VycmVudENlbGwuY2VsbEVsZW1lbnQuY2xvc2VFZGl0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuZGZzLmNhbmNlbFNlbGVjdENlbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLnVuYmluZERvY3VtZW50RWRpdExpc3RlbmVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRDZWxsLmlzRWRpdGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLmRmcy5lbmRFZGl0Q2VsbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRDZWxsLmNlbGxFbGVtZW50LmNsb3NlRWRpdCgpLnN1YnNjcmliZShmID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9tSGFuZGxlci5yZW1vdmVDbGFzcyh0aGlzLmN1cnJlbnRDZWxsLmNlbGxFbGVtZW50LCBDRUxMX1NFTEVDVEVEX0NMUyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9tSGFuZGxlci5yZW1vdmVDbGFzcyh0aGlzLmN1cnJlbnRDZWxsLmNlbGxFbGVtZW50LCBDRUxMX0VESVRJTkdfQ0xTKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRmcy5jYW5jZWxTZWxlY3RDZWxsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51bmJpbmREb2N1bWVudEVkaXRMaXN0ZW5lcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudENlbGwgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdWVtbnRDZWxsQ2xpY2tFdmVudHMgPSB0aGlzLnJlbmRlcjIubGlzdGVuKGRvY3VtZW50LCAnY2xpY2snLCB0aGlzLmRvY3VtZW50Q2VsbENsaWNrSGFuZGxlcik7XHJcbiAgICAgICAgfVxyXG4qL1xyXG4gICAgICAgIGlmICghdGhpcy5kb2N1bWVudENlbGxLZXlkb3duSGFuZGxlcikge1xyXG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50Q2VsbEtleWRvd25IYW5kbGVyID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LnRhcmdldC5jbG9zZXN0KCcuZi1kYXRhZ3JpZCcpICYmIGV2ZW50LnRhcmdldC5ub2RlTmFtZSAhPT0gJ0JPRFknKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQWN0aXZlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbktleURvd25FdmVudChldmVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50Q2VsbEtleWRvd25FdmVudHMgPSB0aGlzLnJlbmRlcjIubGlzdGVuKGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMuZG9jdW1lbnRDZWxsS2V5ZG93bkhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVuYmluZERvY3VtZW50RWRpdExpc3RlbmVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRvY3VtZW50Q2VsbENsaWNrSGFuZGxlcikge1xyXG4gICAgICAgICAgICB0aGlzLmRvY3VlbW50Q2VsbENsaWNrRXZlbnRzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRDZWxsQ2xpY2tIYW5kbGVyID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRvY3VtZW50Q2VsbEtleWRvd25IYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRDZWxsS2V5ZG93bkV2ZW50cygpO1xyXG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50Q2VsbEtleWRvd25IYW5kbGVyID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm1vZGFsQ2xpY2tFdmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLm1vZGFsQ2xpY2tFdmVudCgpO1xyXG4gICAgICAgICAgICB0aGlzLm1vZGFsQ2xpY2tFdmVudCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25LZXlEb3duRXZlbnQoZTogYW55KSB7XHJcbiAgICAgICAgLy8gaWYgKGUuY3RybEtleSB8fCBlLnNoaWZ0S2V5IHx8ICF0aGlzLmVkaXRhYmxlKSB7XHJcbiAgICAgICAgLy8gICAgIHJldHVybjtcclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIC8vIGlmICghZS50YXJnZXQuY2xvc2VzdCgnLmYtZGF0YWdyaWQnKSkge1xyXG4gICAgICAgIC8vICAgICByZXR1cm47XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGtleUNvZGUgPSBlLmtleUNvZGU7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50Q2VsbCAmJiAhdGhpcy5jdXJyZW50Q2VsbC5pc0VkaXRpbmcpIHtcclxuICAgICAgICAgICAgaWYgKFsxMywgNDAsIDM3LCAzOCwgMzksIDldLmluZGV4T2Yoa2V5Q29kZSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5Q29kZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzMjogLy8g56m65qC8XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudENlbGwgJiYgdGhpcy5jdXJyZW50Q2VsbC5jb2x1bW4ub25TcGFjZUhhbmRsZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2VsbC5jb2x1bW4ub25TcGFjZUhhbmRsZXIoeyBncmlkOiB0aGlzLCBjZWxsOiB0aGlzLmN1cnJlbnRDZWxsLCBldmVudDogZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDEzOiAvLyBFbnRlclxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZuID0gdGhpcy5jdXJyZW50Q2VsbC5jZWxsRWxlbWVudFsnZWRpdENlbGwnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbi5hcHBseSh0aGlzLmN1cnJlbnRDZWxsLmNlbGxFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRDZWxsLmNvbHVtbi5vbkVudGVySGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2VsbC5jb2x1bW4ub25FbnRlckhhbmRsZXIoeyBncmlkOiB0aGlzLCBjZWxsOiB0aGlzLmN1cnJlbnRDZWxsLCBldmVudDogZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDA6IC8vIOKGk1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0TmV4dENlbGwoJ2Rvd24nLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzg6IC8vIOKGkVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0TmV4dENlbGwoJ3VwJywgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM5OiAvLyDihpJcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdE5leHRDZWxsKCdyaWdodCcsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzNzogLy8g4oaQXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3ROZXh0Q2VsbCgnbGVmdCcsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA5OiAvLyBUYWJcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdE5leHRDZWxsKCdsZWZ0JywgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3ROZXh0Q2VsbCgncmlnaHQnLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgdW5zdWJzY3JpYmVzKCkge1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHNzID0+IHtcclxuICAgICAgICAgICAgaWYgKHNzKSB7XHJcbiAgICAgICAgICAgICAgICBzcy51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgc3MgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IFtdO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5kb2N1ZW1udENlbGxDbGlja0V2ZW50cykge1xyXG4gICAgICAgICAgICB0aGlzLmRvY3VlbW50Q2VsbENsaWNrRXZlbnRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgIC8vI3JlZ2lvbiBFZGl0aW5nXHJcblxyXG4gICAgaXNSb3dFZGl0aW5nKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5zZWxlY3RlZFJvdyB8fCB0aGlzLnNlbGVjdGVkUm93LmluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZWRpdE1vZGUgPT09ICdyb3cnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZFJvdy5lZGl0b3JzICYmIHRoaXMuc2VsZWN0ZWRSb3cuZWRpdG9ycy5sZW5ndGg7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaXNDZWxsRWRpdGluZygpIHtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50Q2VsbCAmJiB0aGlzLmVkaXRNb2RlID09PSAnY2VsbCcpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmN1cnJlbnRDZWxsLmVkaXRvciAmJiAhdGhpcy5jdXJyZW50Q2VsbC5jb2x1bW4uZWRpdG9yVGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudENlbGwuaXNFZGl0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudENlbGwuaXNFZGl0aW5nO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaXNFZGl0aW5nKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmVkaXRNb2RlID09PSAncm93Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc1Jvd0VkaXRpbmcoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc0NlbGxFZGl0aW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGVuZEVkaXRpbmcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZWRpdE1vZGUgPT09ICdyb3cnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW5kUm93RWRpdCgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5lZGl0TW9kZSA9PT0gJ2NlbGwnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW5kQ2VsbEVkaXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RWRpdG9ycygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZFJvdy5lZGl0b3JzO1xyXG4gICAgfVxyXG5cclxuICAgIGVkaXRDZWxsKHJvd0lkOiBhbnksIGZpZWxkOiBzdHJpbmcsIHZhbGlkYXRpb246ICB7IGlzVmFsaWQ6IGJvb2xlYW4sIG1lc3NhZ2U6IHN0cmluZyB9ID0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlRGF0YUdyaWQoKTtcclxuXHJcbiAgICAgICAgY29uc3Qgcm93SW5kZXggPSB0aGlzLmRmcy5maW5kUm93SW5kZXgocm93SWQpO1xyXG4gICAgICAgIGlmIChyb3dJbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW5kQ2VsbEVkaXQoKTtcclxuICAgICAgICAgICAgY29uc3QgdHJJZCA9IFRSX1BSRUZJWCArIHJvd0lkO1xyXG4gICAgICAgICAgICBjb25zdCB0ckRvbSA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIHRySWQpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHRkRG9tID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHRyRG9tKSB7XHJcbiAgICAgICAgICAgICAgICB0ZERvbSA9IHRyRG9tLnF1ZXJ5U2VsZWN0b3IoYFtmaWVsZD1cIiR7ZmllbGR9XCJdYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgY29sID0gdGhpcy5nZXRDb2x1bW4oZmllbGQpO1xyXG4gICAgICAgICAgICBpZiAoIXRkRG9tICYmIGNvbC5maXhlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbC5maXhlZCA9PT0gJ2xlZnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJEb21MID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgdHJJZCArICdfZml4ZWRsZWZ0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGREb20gPSB0ckRvbUwgJiYgdHJEb21MLnF1ZXJ5U2VsZWN0b3IoYFtmaWVsZD1cIiR7ZmllbGR9XCJdYCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbC5maXhlZCA9PT0gJ3JpZ2h0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyRG9tUiA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIHRySWQgKyAnX2ZpeGVkcmlnaHQnKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZERvbSA9IHRyRG9tUiAmJiB0ckRvbVIucXVlcnlTZWxlY3RvcihgW2ZpZWxkPVwiJHtmaWVsZH1cIl1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHZhbGlkYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9ybVZhbGlkYXRpb25zID0gT2JqZWN0LmFzc2lnbiggdGhpcy5mb3JtVmFsaWRhdGlvbnMgfHwge30sIHsgW2ZpZWxkXTogdmFsaWRhdGlvbn0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKHRkRG9tICYmIHRkRG9tWydlZGl0Q2VsbCddKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRDZWxsID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzWydFRElUQ0VMTF9USU1FUiddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXNbJ0VESVRDRUxMX1RJTUVSJ10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpc1snRURJVENFTExfVElNRVInXSA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRkRG9tLmVkaXRDZWxsKCk7XHJcbiAgICAgICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlbmRDZWxsRWRpdChldmVudD86IGFueSkge1xyXG4gICAgICAgIC8vIGRvY3VtZW50LmJvZHkuY2xpY2soKTtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50Q2VsbCkge1xyXG4gICAgICAgICAgICBEb21IYW5kbGVyLnJlbW92ZUNsYXNzKHRoaXMuY3VycmVudENlbGwuY2VsbEVsZW1lbnQsIENFTExfU0VMRUNURURfQ0xTKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudENlbGwuaXNFZGl0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLmRmcy5lbmRFZGl0Q2VsbCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudENlbGwuY2VsbEVkaXRvclJlZikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudENlbGwuY2VsbEVkaXRvclJlZi5oaWRlQ292ZXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdG9wRWRpdCA9IHRoaXMuY3VycmVudENlbGwuY2VsbEVsZW1lbnQuY2xvc2VFZGl0KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RvcEVkaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdG9wRWRpdC5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlZGl0Um93KHJvd0lkPzogYW55KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmVkaXRhYmxlIHx8IHRoaXMuZWRpdE1vZGUgIT09ICdyb3cnKSB7IHJldHVybiBmYWxzZTsgfVxyXG5cclxuICAgICAgICBpZiAocm93SWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RSb3cocm93SWQpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICghdGhpcy5zZWxlY3RlZFJvdyB8fCB0aGlzLnNlbGVjdGVkUm93LmluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLndyaXRlQ29uc29sZSgnUGxlYXNlIHNlbGVjdCBhIHJvdy4nKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgeyBpbmRleDogcm93SW5kZXgsIGRhdGE6IHJvd0RhdGEgfSA9IHsgLi4udGhpcy5zZWxlY3RlZFJvdyB9O1xyXG5cclxuICAgICAgICBjb25zdCBiZWZvcmVFZGl0RXZlbnQgPSB0aGlzLmJlZm9yZUVkaXQoeyByb3dJbmRleCwgcm93RGF0YSwgZ3JpZEluc3RhbmNlOiB0aGlzIH0pO1xyXG4gICAgICAgIGlmICghYmVmb3JlRWRpdEV2ZW50IHx8ICFiZWZvcmVFZGl0RXZlbnQuc3Vic2NyaWJlKSB7XHJcbiAgICAgICAgICAgIHRoaXMud3JpdGVDb25zb2xlKCdwbGVhc2UgcmV0dXJuIGFuIE9ic2VydmFibGUgVHlwZS4nKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdHJJZCA9IFRSX1BSRUZJWCArIHJvd0lkO1xyXG4gICAgICAgIGNvbnN0IHRyRG9tID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgdHJJZCk7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5zZWxlY3RlZFJvdy5kcikge1xyXG4gICAgICAgICAgICB0ckRvbS5jbGljaygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYmVmb3JlRWRpdEV2ZW50LnN1YnNjcmliZSgoZmxhZzogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZmxhZykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRSb3cuZHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxscyA9IHRoaXMuc2VsZWN0ZWRSb3cuZHIuY2VsbHMudG9BcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2VsbHMgfHwgIWNlbGxzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjZWxscy5mb3JFYWNoKGNlbGwgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbC5jb2x1bW4uZWRpdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLmlzRWRpdGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93LmRyLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWRpdG9ycyA9IGNlbGxzLm1hcChjZWxsID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjZWxsLmNlbGxFZGl0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2VsbC5jZWxsRWRpdG9yLmNvbXBvbmVudFJlZjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuZmlsdGVyKGVkaXRvciA9PiBlZGl0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93LmVkaXRvcnMgPSBlZGl0b3JzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVkaXRvcnMgJiYgZWRpdG9ycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlZGl0b3JzWzBdLmluc3RhbmNlLmlucHV0RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvcnNbMF0uaW5zdGFuY2UuaW5wdXRFbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOe7keWumumUruebmOS6i+S7tlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJpbmRSb3dFZGl0b3JLZXlkb3duRXZlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNkWydkZXN0cm95ZWQnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbkVkaXQuZW1pdCh7IHJvd0luZGV4LCByb3dEYXRhLCBncmlkSW5zdGFuY2U6IHRoaXMsIGVkaXRvcjogZWRpdG9ycyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBlbmRSb3dFZGl0KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc1Jvd0VkaXRpbmcoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4geyBjYW5FbmQ6IHRydWUgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5zZWxlY3RlZFJvdyB8fCB0aGlzLnNlbGVjdGVkUm93LmluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLndyaXRlQ29uc29sZSgnUGxlYXNlIHNlbGVjdCBhIHJvdy4nKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7IGluZGV4OiByb3dJbmRleCwgZGF0YTogcm93RGF0YSwgZHIgfSA9IHsgLi4udGhpcy5zZWxlY3RlZFJvdyB9O1xyXG4gICAgICAgIGNvbnN0IHsgZWRpdG9yOiBjdXJyZW50RWRpdG9yLCBjb2x1bW4gfSA9IHsgLi4udGhpcy5jdXJyZW50Q2VsbCB9O1xyXG4gICAgICAgIC8vIGJsdXJcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsaWNrKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgY2FuRW5kOiBmYWxzZSB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgcm93Rm9ybSA9IGRyLmZvcm0gYXMgRm9ybUdyb3VwO1xyXG4gICAgICAgIHJvd0Zvcm0ubWFya0FzVG91Y2hlZCgpO1xyXG4gICAgICAgIGlmIChyb3dGb3JtLmludmFsaWQgJiYgIXRoaXMuZW5kRWRpdEJ5SW52YWxpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4geyBjYW5FbmQ6IGZhbHNlIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhZnRlckVkaXQg6KaB5Lyg6YCS55u45YWz5Y+C5pWw77yM5Zyo57yW6L6R54q25oCB5pe277yM56e75Yqo5rua5Yqo5p2h5Lya5Ye65LqLXHJcbiAgICAgICAgY29uc3QgYWZ0ZXJFZGl0RXZlbnQgPSB0aGlzLmFmdGVyRWRpdChyb3dJbmRleCwgcm93RGF0YSwgY29sdW1uLCBjdXJyZW50RWRpdG9yKTtcclxuICAgICAgICBpZiAoIWFmdGVyRWRpdEV2ZW50IHx8ICFhZnRlckVkaXRFdmVudC5zdWJzY3JpYmUpIHtcclxuICAgICAgICAgICAgdGhpcy53cml0ZUNvbnNvbGUoJ3BsZWFzZSByZXR1cm4gYW4gT2JzZXJ2YWJsZSBUeXBlLicpO1xyXG4gICAgICAgICAgICByZXR1cm4geyBjYW5FbmQ6IGZhbHNlIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhZnRlckVkaXRFdmVudC5zdWJzY3JpYmUoKGZsYWc6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICAgICAgaWYgKGZsYWcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VBbGxDZWxsRWRpdG9yKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRSb3cuZHIuZm9ybSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRSb3cuZHIucm93RGF0YSA9IE9iamVjdC5hc3NpZ24odGhpcy5zZWxlY3RlZFJvdy5kci5yb3dEYXRhLCB0aGlzLnNlbGVjdGVkUm93LmRyLmZvcm0udmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGZzLnVwZGF0ZVJvdyh0aGlzLnNlbGVjdGVkUm93LmlkLCB0aGlzLnNlbGVjdGVkUm93LmRyLnJvd0RhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCB2YWwgPSAnJztcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RWRpdG9yICYmIGN1cnJlbnRFZGl0b3IuZm9ybUNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWwgPSBjdXJyZW50RWRpdG9yLmZvcm1Db250cm9sLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuZW5kRWRpdC5lbWl0KHsgcm93SW5kZXgsIHJvd0RhdGEsIGNvbHVtbiwgdmFsdWU6IHZhbCB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRncy5yZWZyZXNoRm9vdGVyRGF0YS5lbWl0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjYW5jZWxFZGl0KHJvd0lkOiBhbnksIGVtaXQgPSB0cnVlKSB7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5pc0VkaXRpbmcoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNsb3NlQWxsQ2VsbEVkaXRvcigpO1xyXG4gICAgICAgIGlmIChyb3dJZCkge1xyXG4gICAgICAgICAgICB0aGlzLmRmcy5yZWplY3RDaGFuZ2VzKHJvd0lkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIGlmIChlbWl0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsRWRpdGVkLmVtaXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2VBbGxDZWxsRWRpdG9yKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkUm93ICYmIHRoaXMuc2VsZWN0ZWRSb3cuZHIpIHtcclxuICAgICAgICAgICAgY29uc3QgY2VsbHMgPSB0aGlzLnNlbGVjdGVkUm93LmRyLmNlbGxzO1xyXG4gICAgICAgICAgICBpZiAoY2VsbHMpIHtcclxuICAgICAgICAgICAgICAgIGNlbGxzLmZvckVhY2goY2VsbCA9PiBjZWxsLmlzRWRpdGluZyA9IGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2VsbC5pc0VkaXRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93LmVkaXRvcnMgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5Y+W5raI6ZSu55uY5LqL5Lu2XHJcbiAgICAgICAgdGhpcy51bmJpbmRSb3dFZGl0b3JLZXlkb3duRXZlbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJvd0VkaXRUYWJLZXlkd29uRXZlbnQoZTogYW55KSB7XHJcbiAgICAgICAgY29uc3Qga2V5Q29kZSA9IGUud2hpY2ggfHwgZS5rZXlDb2RlO1xyXG5cclxuICAgICAgICBpZiAoa2V5Q29kZSA9PT0gOSkgeyAgLy8gdGFiXHJcbiAgICAgICAgICAgIGNvbnN0IHRkID0gZS50YXJnZXQuY2xvc2VzdCgndGQnKTtcclxuICAgICAgICAgICAgY29uc3QgdHIgPSBlLnRhcmdldC5jbG9zZXN0KCd0cicpO1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0VGQgPSB0ZC5uZXh0RWxlbWVudFNpYmxpbmc7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBoYXNOb0VkaXRvciA9IChfdGQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICFfdGQucXVlcnlTZWxlY3RvcignaW5wdXQnKSAmJiAhX3RkLnF1ZXJ5U2VsZWN0b3IoJ3RleHRhcmVhJykgJiYgIV90ZC5xdWVyeVNlbGVjdG9yKCdzZWxlY3QnKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGVkaXROZXh0Um93ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dFRyID0gdHIubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHRUcikge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHRUci5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRSb3dpZCA9IG5leHRUci5nZXRBdHRyaWJ1dGUoJ2lkJykucmVwbGFjZShUUl9QUkVGSVgsICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFJvd2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdFJvdyhuZXh0Um93aWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGlmIChuZXh0VGQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChoYXNOb0VkaXRvcihuZXh0VGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGRzID0gdHIucXVlcnlTZWxlY3RvckFsbCgndGQnKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGRJZHggPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICB0ZHMuZm9yRWFjaCgodCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA9PT0gbmV4dFRkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZElkeCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dFRyRWRpdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRkSWR4IDwgdGRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBfbnRkID0gdGRzW3RkSWR4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc05vRWRpdG9yKF9udGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZElkeCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFRyRWRpdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0VHJFZGl0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXROZXh0Um93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZWRpdE5leHRSb3coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGJpbmRSb3dFZGl0b3JLZXlkb3duRXZlbnQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRvY3VtZW50Um93RWRpdEtleWRvd25IYW5sZGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRSb3dFZGl0S2V5ZG93bkhhbmxkZXIgPSB0aGlzLnJlbmRlcjIubGlzdGVuKGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMucm93RWRpdFRhYktleWR3b25FdmVudC5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kb2N1bWVudENsaWNrRW5kUm93RWRpdEhhbmRsZXIgPSB0aGlzLnJlbmRlcjIubGlzdGVuKGRvY3VtZW50LCAnY2xpY2snLCAoZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoVXRpbHMuaGFzRGlhbG9nT3BlbigpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUm93RWRpdGluZygpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5lbmRSb3dFZGl0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVuYmluZFJvd0VkaXRvcktleWRvd25FdmVudCgpIHtcclxuICAgICAgICAvLyDlj5bmtojplK7nm5jkuovku7ZcclxuICAgICAgICBpZiAodGhpcy5kb2N1bWVudFJvd0VkaXRLZXlkb3duSGFubGRlcikge1xyXG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50Um93RWRpdEtleWRvd25IYW5sZGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRSb3dFZGl0S2V5ZG93bkhhbmxkZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRDbGlja0VuZFJvd0VkaXRIYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRDbGlja0VuZFJvd0VkaXRIYW5kbGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRDbGlja0VuZFJvd0VkaXRIYW5kbGVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgLy8jcmVnaW9uIExvYWQgRGF0YVxyXG5cclxuXHJcbiAgICBwcml2YXRlIF9jbGllbnRGaWx0ZXIoY29uZGl0aW9uczogYW55LCBleGN1dGVMb2NhbGVGaWx0ZXIgPSBmYWxzZSkge1xyXG4gICAgICAgIC8vIOWuouaIt+err+i/h+a7pFxyXG4gICAgICAgIGlmIChleGN1dGVMb2NhbGVGaWx0ZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgYWxsQ2xpZW50RGF0YSA9IHRoaXMuZGZzLmdldERhdGEodHJ1ZSk7XHJcbiAgICAgICAgICAgIGlmIChjb25kaXRpb25zICYmIE9iamVjdC5rZXlzKGNvbmRpdGlvbnMpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgX2RhdGEgPSB0aGlzLmNsaWVudEZpbHRlclNlcnZpY2UuZXhlY3V0ZUZpbHRlcihhbGxDbGllbnREYXRhLCBjb25kaXRpb25zKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGZzLmxvYWRGaWx0ZXJEYXRhKF9kYXRhKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZERhdGEoYWxsQ2xpZW50RGF0YSwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMudmlydHVhbGl6ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGxUb1RvcCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5maWx0ZXJDaGFuZ2VkLmVtaXQoY29uZGl0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzbWFydEZpbHRlckRhdGEoY29uZGl0aW9uczogYW55KSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVtb3RlRmlsdGVyKSB7IC8vIOacjeWKoeWZqOerr+i/h+a7pFxyXG4gICAgICAgICAgICBjb25zdCBlbnRpdHlGaWx0ZXJzID0gdGhpcy5jbGllbnRGaWx0ZXJTZXJ2aWNlLmNvbnZlcnRTbWFydEZpbHRlcjJFbnRpdHlGaWx0ZXIoY29uZGl0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyQ2hhbmdlZC5lbWl0KGVudGl0eUZpbHRlcnMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIOWuouaIt+err+i/h+a7pFxyXG4gICAgICAgICAgICB0aGlzLl9jbGllbnRGaWx0ZXIoY29uZGl0aW9ucywgdGhpcy51c2VEZWZhdWx0RmlsdGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vIHNtYXJ0IGZpdGxlciDmuIXnqbrmn6Xor6LmnaHku7ZcclxuICAgIG9uQ2xlYXJTbWFydEZpbHRlcnMoJGV2ZW50PzogYW55KSB7XHJcbiAgICAgICAgdGhpcy5zbWFydEZpbHRlclJlc3VsdCA9IHsgY29uZGl0aW9uczogW10sIGNvbnRyb2xEYXRhOiBbXSB9O1xyXG4gICAgICAgIHRoaXMuY29uZGl0aW9ucyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc21hcnRGaWx0ZXJEYXRhKFtdKTtcclxuICAgICAgICB0aGlzLnNtYXJ0RmlsdGVyU2VydmljZS5jbGVhckFsbCgpO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm9uRmlsdGVyQmFyUmVzaXplKDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uUmVtb3ZlU21hcnRGaWx0ZXJJdGVtKCRldmVudCkge1xyXG4gICAgICAgIGlmICgkZXZlbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IHsgLi4uJGV2ZW50IH07XHJcbiAgICAgICAgICAgIGVbJ2xhYmVsQ29kZSddID0gJGV2ZW50LmZpZWxkQ29kZTtcclxuICAgICAgICAgICAgdGhpcy5zbWFydEZpbHRlclNlcnZpY2UucmVtb3ZlQ29uZGl0aW9uKGUsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkZpbHRlckJhclJlc2l6ZSgkZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmZpbHRlckJhckhlaWdodCA9ICRldmVudDtcclxuXHJcbiAgICAgICAgY29uc3Qgc21hcnRGaWx0ZXJFbCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZi1kYXRhZ3JpZC1jb2x1bW4tZHJvcC1wYW5lbCcpO1xyXG4gICAgICAgIGlmIChzbWFydEZpbHRlckVsICYmICEkZXZlbnQpIHtcclxuICAgICAgICAgICAgc21hcnRGaWx0ZXJFbC5zdHlsZS50b3AgPSAnMHB4JztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kZ3Muc2hvd0dyaWRIZWFkZXIuZW1pdCh0aGlzLnJlYWxIZWFkZXJIZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuZGdzLnNtYXJ0RmlsdGVyQmFyRXhwYW5kLmVtaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBvblNtYXJ0RmlsdGVyQ2hhbmdlKCRldmVudCkge1xyXG4gICAgICAgIGNvbnN0IHsgY29uZGl0aW9ucywgZmlsdGVySXRlbSB9ID0gJGV2ZW50O1xyXG5cclxuICAgICAgICB0aGlzLnNtYXJ0RmlsdGVyU2VydmljZS5maWx0ZXJDb25kaXRpb25DaGFuZ2VkKHsgY29uZGl0aW9ucywgY29udHJvbERhdGE6IGZpbHRlckl0ZW0sIGZyb206ICd0b29sYmFyJyB9KTtcclxuXHJcbiAgICAgICAgLy8gdGhpcy5zbWFydEZpbHRlckRhdGEoY29uZGl0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5kZ3Muc21hcnRGaWx0ZXJEYXRhQ2hhbmdlLmVtaXQoZmlsdGVySXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsdGVyRGF0YShjb25kaXRpb25zPzogYW55KSB7XHJcbiAgICAgICAgaWYgKCFjb25kaXRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbmRpdGlvbnMgPSB0aGlzLmNvbmRpdGlvbnM7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jb25kaXRpb25zID0gY29uZGl0aW9ucztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2Nyb2xsVG9Ub3AoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlU21hcnRGaWx0ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5zbWFydEZpbHRlckRhdGEoY29uZGl0aW9ucyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnJlbW90ZUZpbHRlcikge1xyXG4gICAgICAgICAgICBjb25zdCBlbnRpdHlGaWx0ZXJzID0gdGhpcy5jbGllbnRGaWx0ZXJTZXJ2aWNlLmNvbnZlcnQyRmlsdGVyQXJyYXkoY29uZGl0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyQ2hhbmdlZC5lbWl0KGVudGl0eUZpbHRlcnMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIOWuouaIt+err+i/h+a7pFxyXG4gICAgICAgICAgICB0aGlzLl9jbGllbnRGaWx0ZXIoY29uZGl0aW9ucywgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqIOa4heepuui/h+a7pOadoeS7tiAqL1xyXG4gICAgY2xlYXJDb25kaXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5kZ3Mub25DbGVhckZpbHRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGxvYWREYXRhKGRhdGE/OiBhbnksIGtlZXBTb3J0U3RhdGUgPSBmYWxzZSwga2VlcFNjcm9sbFBvc2l0aW9uID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmxvYWRpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoIXRoaXMucGFnaW5hdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRhdGEgPSBkYXRhIHx8IFtdO1xyXG5cclxuICAgICAgICBpZiAoa2VlcFNjcm9sbFBvc2l0aW9uICYmIHRoaXMuc2Nyb2xsSW5zdGFuY2UgJiYgdGhpcy5zY3JvbGxJbnN0YW5jZS5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBjb25zdCBsc3QgPSB0aGlzLnNjcm9sbEluc3RhbmNlLmluc3RhbmNlLmxhc3RTY3JvbGxUb3A7XHJcbiAgICAgICAgICAgIGNvbnN0IGxzbCA9IHRoaXMuc2Nyb2xsSW5zdGFuY2UuaW5zdGFuY2UubGFzdFNjcm9sbExlZnQ7XHJcbiAgICAgICAgICAgIHRoaXMuZGZzLnVwZGF0ZVByb3BlcnR5KCdzY3JvbGxJbmZvJywgeyB5OiBsc3QsIHg6IGxzbCB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmRmcy51cGRhdGVQcm9wZXJ0eSgnc2Nyb2xsSW5mbycsIHsgeTogMCwgeDogMCB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBhZ2luYXRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5kZnMuc2V0UGFnaW5hdGlvbih0aGlzLnBhZ2VJbmRleCwgdGhpcy5wYWdlU2l6ZSwgdGhpcy50b3RhbCk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUGFnZXJPcHRpb25zKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY2RbJ2Rlc3Ryb3llZCddKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g6YeN5paw5Yqg6L295pWw5o2u5pe277yM56e76Zmk5omA5pyJ57yW6L6R5YiXXHJcbiAgICAgICAgLy8gdGhpcy5jbG9zZUFsbENlbGxFZGl0b3IoKTtcclxuXHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICBpZiAoa2VlcFNvcnRTdGF0ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5yZW1vdGVTb3J0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRmcy5sb2FkRGF0YShkYXRhKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGZzLmxvYWREYXRhKGRhdGEsIHRydWUsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kZnMubG9hZERhdGEoZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNldFBhZ2VySGVpZ2h0KCk7XHJcbiAgICAgICAgdGhpcy5kZ3MuZGF0YVNvdXJjZUNoYW5nZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkVmlydHVhbERhdGEoZGF0YTogYW55KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ3JvdXBSb3dzKSB7XHJcbiAgICAgICAgICAgIHRoaXMud3JpdGVDb25zb2xlKCdpZiB5b3UgdXNpbmcgR1JPVVBST1dTLCBwbGVhc2Ugc2V0IFt2aXJ0dWFsaXplZF09XCJmYWxzZVwiIFt2aXJ0dWFsaXplZEFzeW5jTG9hZF09XCJmYWxzZVwiJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMudmlydHVhbGl6ZWRBc3luY0xvYWQpIHtcclxuICAgICAgICAgICAgdGhpcy5kZ3Mub25Mb2FkVmlydHVhbERhdGEoZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZldGNoRGF0YShwYWdlSW5kZXgsIHBhZ2VTaXplKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVzdFNlcnZpY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5zaG93TG9hZGluZygpO1xyXG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB7IHBhZ2VJbmRleCwgcGFnZVNpemUgfTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc29ydE5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtc1snc29ydE5hbWUnXSA9IHRoaXMuc29ydE5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuc29ydE9yZGVyKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXNbJ3NvcnRPcmRlciddID0gdGhpcy5zb3J0T3JkZXI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc3RTZXJ2aWNlLmdldERhdGEodGhpcy51cmwsIHBhcmFtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvZih1bmRlZmluZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZnJlc2goKSB7XHJcbiAgICAgICAgdGhpcy5kZnMucmVmcmVzaCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbG9hZCgpIHtcclxuICAgICAgICB0aGlzLmZldGNoRGF0YSgxLCB0aGlzLnBhZ2VTaXplKS5zdWJzY3JpYmUocmVzID0+IHtcclxuICAgICAgICAgICAgaWYgKHJlcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlSW5kZXggPSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbCA9IHJlcy50b3RhbDtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZERhdGEocmVzLml0ZW1zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDojrflj5blvZPliY3pobXmlbDmja4gKi9cclxuICAgIGdldFJvd3MoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ3JvdXBSb3dzIHx8IHRoaXMudmlydHVhbGl6ZWQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGFnZXJPblNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHMucm93cztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRQYWdlckRhdGE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wYWdlck9uU2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFBhZ2VyRGF0YTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAvLyNyZWdpb24gUGFnaW5hdGlvblxyXG5cclxuICAgIHNldFBhZ2VJbmRleChwYWdlSW5kZXg6IG51bWJlciwgZGV0ZWN0Q2hhbmdlcyA9IHRydWUpIHtcclxuICAgICAgICB0aGlzLnBhZ2VJbmRleCA9IHBhZ2VJbmRleDtcclxuICAgICAgICB0aGlzLnBhZ2VyT3B0cy5jdXJyZW50UGFnZSA9IHBhZ2VJbmRleDtcclxuXHJcbiAgICAgICAgaWYgKGRldGVjdENoYW5nZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOabtOaWsOavj+mhtVxyXG4gICAgc2V0UGFnZUxpc3QocGFnZUxpc3Q6IG51bWJlcltdLCBkZXRlY3RDaGFuZ2VzID0gdHJ1ZSkge1xyXG4gICAgICAgIHRoaXMucGFnZUxpc3QgPSBwYWdlTGlzdDtcclxuICAgICAgICB0aGlzLnBhZ2VyT3B0cy5wYWdlTGlzdCA9IHBhZ2VMaXN0O1xyXG4gICAgICAgIGlmIChkZXRlY3RDaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvblBhZ2VDaGFuZ2UocGFnZUluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5sb2NrUGFnaW5hdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5jb250cm9sUGFnaW5hdGlvblN0YXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0UGFnZUluZGV4KHBhZ2VJbmRleCwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHRoaXMuZmV0Y2hEYXRhKHBhZ2VJbmRleCwgdGhpcy5wYWdlU2l6ZSkuc3Vic2NyaWJlKHJlcyA9PiB7XHJcbiAgICAgICAgICAgIGlmIChyZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZERhdGEocmVzLml0ZW1zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZm9jdXNSb3dJbmRleCA9IC0xO1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsVG9Ub3AoKTtcclxuICAgICAgICB0aGlzLnBhZ2VDaGFuZ2VkLmVtaXQoeyBwYWdlSW5kZXgsIHBhZ2VTaXplOiB0aGlzLnBhZ2VTaXplIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uUGFnZVNpemVDaGFuZ2UocGFnZVNpemU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLmxvY2tQYWdpbmF0aW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5mb2N1c1Jvd0luZGV4ID0gLTE7XHJcbiAgICAgICAgdGhpcy5zY3JvbGxUb1RvcCgpO1xyXG4gICAgICAgIHRoaXMucGFnZVNpemUgPSBwYWdlU2l6ZTtcclxuICAgICAgICB0aGlzLnBhZ2VyT3B0cy5pdGVtc1BlclBhZ2UgPSBwYWdlU2l6ZTtcclxuXHJcbiAgICAgICAgdGhpcy5mZXRjaERhdGEoMSwgcGFnZVNpemUpLnN1YnNjcmliZShyZXMgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2VJbmRleCA9IDE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWREYXRhKHJlcy5pdGVtcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnBhZ2VTaXplQ2hhbmdlZC5lbWl0KHsgcGFnZVNpemUsIHBhZ2VJbmRleDogdGhpcy5wYWdlSW5kZXggfSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25SZW1vdmVTZWxlY3RlZEl0ZW0oaWQ6IGFueSkge1xyXG4gICAgICAgIGlmICh0aGlzLmRmcy5maW5kUm93SW5kZXgoaWQpID4gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy51bkNoZWNrUm93KGlkKTtcclxuICAgICAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy51bkNoZWNrUm93KGlkLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tWYWx1ZXMgPSB0aGlzLmNoZWNrZWRzLm1hcChyID0+IHIuaWQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkNsZWFyU2VsZWN0ZWRJdGVtKCRldmVudCkge1xyXG4gICAgICAgIC8vIHRoaXMuY2xlYXJBbGwoKTtcclxuICAgICAgICBpZiAodGhpcy5zZWxlY3RPbkNoZWNrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0VmFsdWUgPSAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jbGVhckNoZWNrZWRzKHRydWUpO1xyXG4gICAgfVxyXG4gICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgLy8jcmVnaW9uIExvYWRpbmdcclxuICAgIHNob3dMb2FkaW5nKCkge1xyXG4gICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2VMb2FkaW5nKGRldGVjdENoYW5nZXMgPSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKGRldGVjdENoYW5nZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgLy8jcmVnaW9uIERvbVxyXG5cclxuICAgIHByaXZhdGUgcmVwbGFjZVBYMkVtcHR5KHN0ck51bTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHN0ck51bSkge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KHN0ck51bS5yZXBsYWNlKCdweCcsICcnKSwgMTApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDdXN0b21DbHMoY2xzOiBhbnksIGRvbTogYW55KSB7XHJcbiAgICAgICAgaWYgKGNscykge1xyXG4gICAgICAgICAgICBpZiAoY2xzWzBdID09PSAnIScpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IF9jbHMgPSBjbHMuc2xpY2UoMSkuc3BsaXQoJyAnKS5maWx0ZXIoYyA9PiBjKTtcclxuICAgICAgICAgICAgICAgIF9jbHMuZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcjIucmVtb3ZlQ2xhc3MoZG9tLCBjKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNscy5zcGxpdCgnICcpLmZpbHRlcihjID0+IGMpLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIyLmFkZENsYXNzKGRvbSwgYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ3VzdG9tU3R5bGUoY3M6IEN1c3RvbVN0eWxlLCBkb206IGFueSwgY3NzUnVsZVRleHQgPSBudWxsKSB7XHJcbiAgICAgICAgaWYgKCFjcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjcy5jbHMpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJDdXN0b21DbHMoY3MuY2xzLCBkb20pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNzLnN0eWxlKSB7XHJcbiAgICAgICAgICAgIGlmICghY3NzUnVsZVRleHQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhjcy5zdHlsZSkuZm9yRWFjaChuID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobi50b0xvd2VyQ2FzZSgpID09PSAnY29sb3InICYmIGNzLnN0eWxlW25dICYmIGNzLnN0eWxlW25dLmluZGV4T2YoJyFpbXBvcnRhbnQnKSA9PT0gLTEgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzLnN0eWxlW25dID0gY3Muc3R5bGVbbl0gKyAnIWltcG9ydGFudCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY3NzUnVsZVRleHQgPSBgJHt0aGlzLmN1c3RvbVN0eWxlS2V5KCl9ICMke2RvbS5pZH0gJHtKU09OLnN0cmluZ2lmeShjcy5zdHlsZSl9YDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5kZ3MuYXBwZW5kQ3NzUnVsZXMoW2Nzc1J1bGVUZXh0XSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbDogRWxlbWVudFJlZikge1xyXG4gICAgICAgIHJldHVybiBlbC5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEVsZW1lbnRQYWRkaW5nKGVsOiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdG9wOiB0aGlzLnJlcGxhY2VQWDJFbXB0eShzdHlsZS5wYWRkaW5nVG9wKSxcclxuICAgICAgICAgICAgbGVmdDogdGhpcy5yZXBsYWNlUFgyRW1wdHkoc3R5bGUucGFkZGluZ0xlZnQpLFxyXG4gICAgICAgICAgICBib3R0b206IHRoaXMucmVwbGFjZVBYMkVtcHR5KHN0eWxlLnBhZGRpbmdCb3R0b20pLFxyXG4gICAgICAgICAgICByaWdodDogdGhpcy5yZXBsYWNlUFgyRW1wdHkoc3R5bGUucGFkZGluZ1JpZ2h0KVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RWxlbWVudEJvcmRlcldpZHRoKGVsOiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdG9wOiB0aGlzLnJlcGxhY2VQWDJFbXB0eShzdHlsZS5ib3JkZXJUb3BXaWR0aCksXHJcbiAgICAgICAgICAgIGJvdHRvbTogdGhpcy5yZXBsYWNlUFgyRW1wdHkoc3R5bGUuYm9yZGVyQm90dG9tV2lkdGgpLFxyXG4gICAgICAgICAgICByaWdodDogdGhpcy5yZXBsYWNlUFgyRW1wdHkoc3R5bGUuYm9yZGVyUmlnaHRXaWR0aCksXHJcbiAgICAgICAgICAgIGxlZnQ6IHRoaXMucmVwbGFjZVBYMkVtcHR5KHN0eWxlLmJvcmRlckxlZnRXaWR0aClcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZvcm1hdERhdGEoZmllbGQ6IGFueSwgZGF0YTogYW55LCBmb3JtYXR0ZXI6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRGaWVsZFZhbHVlKGZpZWxkLCBkYXRhKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb2xGb3JtYXRTZXIuZm9ybWF0KHZhbHVlLCBkYXRhLCBmb3JtYXR0ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEZpZWxkVmFsdWUoZmllbGQsIHJvd0RhdGEpIHtcclxuICAgICAgICByZXR1cm4gVXRpbHMuZ2V0VmFsdWUoZmllbGQsIHJvd0RhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgIC8vI3JlZ2lvbiBTZWxlY3RcclxuICAgIHByaXZhdGUgY2FuT3BlcmF0ZUNoZWNrYm94KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm11bHRpU2VsZWN0ICYmIHRoaXMuc2hvd0NoZWNrYm94O1xyXG4gICAgfVxyXG5cclxuICAgIGZpbmROZXh0VGQobmV4dENvbHVtbikge1xyXG5cclxuICAgICAgICBpZiAoIW5leHRDb2x1bW4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCByb3dpZCA9IFRSX0lEX1BSRUZJWCArIHRoaXMuc2VsZWN0ZWRSb3cuaWQ7XHJcbiAgICAgICAgY29uc3QgbGVmdFRySUQgPSBUUl9JRF9QUkVGSVggKyB0aGlzLnNlbGVjdGVkUm93LmlkICsgJ19maXhlZGxlZnQnO1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0VHJJRCA9IFRSX0lEX1BSRUZJWCArIHRoaXMuc2VsZWN0ZWRSb3cuaWQgKyAnX2ZpeGVkcmlnaHQnO1xyXG5cclxuICAgICAgICBsZXQgX3RyID0gbnVsbDtcclxuICAgICAgICBsZXQgX3RkID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKG5leHRDb2x1bW4uZml4ZWQgPT09ICdsZWZ0Jykge1xyXG4gICAgICAgICAgICBfdHIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGxlZnRUcklEKTtcclxuICAgICAgICAgICAgaWYgKF90cikge1xyXG4gICAgICAgICAgICAgICAgX3RkID0gX3RyLnF1ZXJ5U2VsZWN0b3IoYFtmaWVsZD1cIiR7bmV4dENvbHVtbi5maWVsZH1cIl1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAobmV4dENvbHVtbi5maXhlZCA9PT0gJ3JpZ2h0JyApIHtcclxuICAgICAgICAgICAgX3RyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihyaWdodFRySUQpO1xyXG4gICAgICAgICAgICBpZiAoX3RyKSB7XHJcbiAgICAgICAgICAgICAgICBfdGQgPSBfdHIucXVlcnlTZWxlY3RvcihgW2ZpZWxkPVwiJHtuZXh0Q29sdW1uLmZpZWxkfVwiXWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgX3RyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihyb3dpZCk7XHJcbiAgICAgICAgICAgIGlmIChfdHIpIHtcclxuICAgICAgICAgICAgICAgIF90ZCA9IF90ci5xdWVyeVNlbGVjdG9yKGBbZmllbGQ9XCIke25leHRDb2x1bW4uZmllbGR9XCJdYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBfdGQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkvp3mja7lvZPliY3lrZfmrrXmn6Xor6LkuIvkuKrlrZfmrrXnmoRURCBET01cclxuICAgICAqIEBwYXJhbSBmaWVsZCDlvZPliY3lrZfmrrXlkI3np7BcclxuICAgICAqIEBwYXJhbSBkaXIg56e75Yqo5pa55ZCRXHJcbiAgICAgKiBAcmV0dXJucyBURCBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIGZpbmROZXh0Q2VsbChmaWVsZDogc3RyaW5nLCBkaXI6IE1vdmVEaXJlY3Rpb24pIHtcclxuICAgICAgICBsZXQgdGQgPSBudWxsO1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRDZWxsICYmIHRoaXMuY3VycmVudENlbGwuY2VsbEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgY29sID0gdGhpcy5kZnMuZ2V0Q29sdW1uKGZpZWxkKTtcclxuICAgICAgICAgICAgY29uc3QgZml4ZWQgPSBjb2wuZml4ZWQgfHwgJyc7XHJcbiAgICAgICAgICAgIC8vIGxldCBjZWxsSW5kZXggPSB0aGlzLmRmcy5nZXRDb2x1bW5JbmRleChmaWVsZCwgZml4ZWQpO1xyXG4gICAgICAgICAgICBsZXQgY2VsbEluZGV4ID0gdGhpcy5jb2xHcm91cC5jb2x1bW5zLmZpbmRJbmRleChuID0+IChuLmlkICYmIG4uaWQgPT09IGNvbC5pZCkgfHwgbi5maWVsZCA9PT0gY29sLmZpZWxkKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIChmaXhlZCA9PT0gJ2xlZnQnIHx8IHRoaXMuZmFzdCkge1xyXG4gICAgICAgICAgICAvLyAgICAgaWYgKHRoaXMuc2hvd0NoZWNrYm94KSB7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgY2VsbEluZGV4ICs9IDE7XHJcbiAgICAgICAgICAgIC8vICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyAgICAgaWYgKHRoaXMuc2hvd0xpbmVOdW1iZXIpIHtcclxuICAgICAgICAgICAgLy8gICAgICAgICBjZWxsSW5kZXggKz0gMTtcclxuICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgY3VyckNlbGxFbCA9IHRoaXMuY3VycmVudENlbGwuY2VsbEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHRkU2VsZWN0b3IgPSBgW2ZpZWxkPVwiJHtmaWVsZH1cIl1gO1xyXG4gICAgICAgICAgICBpZiAoZGlyID09PSAndXAnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2VHIgPSB0aGlzLmRncy5maW5kTmV4dFRyKGN1cnJDZWxsRWwucGFyZW50RWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLCAndXAnKTtcclxuICAgICAgICAgICAgICAgIGlmIChwcmV2VHIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZCA9IHByZXZUci5xdWVyeVNlbGVjdG9yKHRkU2VsZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRpciA9PT0gJ2Rvd24nKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0VHIgPSB0aGlzLmRncy5maW5kTmV4dFRyKGN1cnJDZWxsRWwucGFyZW50RWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcsICdkb3duJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dFRyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGQgPSBuZXh0VHIucXVlcnlTZWxlY3Rvcih0ZFNlbGVjdG9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChkaXIgPT09ICdsZWZ0Jykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dENvbHVtbiA9IHRoaXMuY29sR3JvdXAuY29sdW1uc1tjZWxsSW5kZXggLSAxXTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0Q29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGQgPSB0aGlzLmZpbmROZXh0VGQobmV4dENvbHVtbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGlyID09PSAncmlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0Q29sdW1uID0gdGhpcy5jb2xHcm91cC5jb2x1bW5zW2NlbGxJbmRleCArIDFdO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHRDb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZCA9IHRoaXMuZmluZE5leHRUZChuZXh0Q29sdW1uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZWN0TmV4dENlbGwoZGlyOiBNb3ZlRGlyZWN0aW9uLCBldmVudDogRXZlbnQpIHtcclxuICAgICAgICBjb25zdCBuZXh0VGQgPSB0aGlzLmZpbmROZXh0Q2VsbCh0aGlzLmN1cnJlbnRDZWxsLmZpZWxkLCBkaXIpO1xyXG5cclxuICAgICAgICBpZiAoZGlyID09PSAndXAnICYmICFuZXh0VGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG5leHRUZCAmJiBuZXh0VGQuY2xhc3NOYW1lLmluZGV4T2YoJ2YtZGF0YWdyaWQtY2VsbC1yb3dudW1iZXInKSA9PSAtMSAmJiBuZXh0VGQuY2xhc3NOYW1lLmluZGV4T2YoJ2YtZGF0YWdyaWQtY2VsbC1jaGVja2JveCcpID09IC0xKSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudFsnY29kZSddID09PSAnVGFiJyAmJiB0aGlzLmVkaXRhYmxlICYmIHRoaXMuZWRpdGNlbGxXaGVuVGFiS2V5ZHdvbikge1xyXG4gICAgICAgICAgICAgICAgbmV4dFRkWydjbGljayddLmFwcGx5KG5leHRUZCwgW2V2ZW50XSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dFRkLnNlbGVjdENlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25Nb2RlID09PSAnZGVmYXVsdCcgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDaGVja2VkcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBuZXh0VGRbJ3NlbGVjdENlbGwnXShldmVudCwgbmV4dFRkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBuZXh0VGRbJ3NlbGVjdENlbGwnXShldmVudCwgbmV4dFRkKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5leHRUZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbmV4dENvbCA9IHRoaXMuY29sR3JvdXAuY29sdW1uc1swXTtcclxuICAgICAgICAgICAgY29uc3QgdGRTZWxldG9yID0gYHRkW2ZpZWxkPVwiJHtuZXh0Q29sLmZpZWxkfVwiXWA7XHJcbiAgICAgICAgICAgIGNvbnN0IHRyID0gdGhpcy5jdXJyZW50Q2VsbC5jZWxsRWxlbWVudC5wYXJlbnRFbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgbGV0IF9uZXh0ID0gdHIubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICBpZiAoZGlyID09PSAnbGVmdCcpIHtcclxuICAgICAgICAgICAgICAgIF9uZXh0ID0gdHIucHJldmlvdXNFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIV9uZXh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRyRG9tSWQgPSBfbmV4dC5pZC5yZXBsYWNlKCdfZml4ZWRsZWZ0JywnJykucmVwbGFjZSgnX2ZpeGVkcmlnaHQnLCcnKTtcclxuICAgICAgICAgICAgY29uc3QgbGVmdFRyU2VsZWN0b3IgPSAnIycgKyB0ckRvbUlkICsgJ19maXhlZGxlZnQnO1xyXG5cclxuICAgICAgICAgICAgaWYgKF9uZXh0LmlkLmluZGV4T2YoJ19maXhlZHJpZ2h0JykgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29sR3JvdXAubGVmdEZpeGVkICYmIHRoaXMuY29sR3JvdXAubGVmdEZpeGVkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF9uZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihsZWZ0VHJTZWxlY3Rvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGRpciA9PT0gJ2xlZnQnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX25leHQuaWQuaW5kZXhPZignX2ZpeGVkbGVmdCcpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBfbmV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobGVmdFRyU2VsZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgY29uc3QgbmV4dFRkID0gX25leHQucXVlcnlTZWxlY3Rvcih0ZFNlbGV0b3IpO1xyXG4gICAgICAgICAgICBpZiAobmV4dFRkICYmIG5leHRUZC5zZWxlY3RDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25Nb2RlID09PSAnZGVmYXVsdCcgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckNoZWNrZWRzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuZXh0VGQuc2VsZWN0Q2VsbChldmVudCwgbmV4dFRkKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgY29uc3QgbmV4dFRyID0gdGhpcy5kZ3MuZmluZE5leHRUcihfbmV4dCwgZGlyID09PSAnbGVmdCcgPyAndXAnIDogJ2Rvd24nKTtcclxuICAgICAgICAgICAgaWYgKG5leHRUciAmJiBuZXh0VHIudGFnTmFtZSA9PT0gJ1RSJykge1xyXG4gICAgICAgICAgICAgICAgLy8gbmV4dFRyLmNoaWxkcmVuLmZpbmQodGQgPT4gdGQuZWRpdENlbGwpLmVkaXRDZWxsKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZmlyc3RFZGl0b3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICAgICAgICAgIHdoaWxlICghZmlyc3RFZGl0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdEVkaXRvciA9ICEhbmV4dFRyLmNoaWxkcmVuW2ldLnNlbGVjdENlbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdEVkaXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5leHRUci5jaGlsZHJlbltpXSAmJiBuZXh0VHIuY2hpbGRyZW5baV0uc2VsZWN0Q2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGlvbk1vZGUgPT09ICdkZWZhdWx0JyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckNoZWNrZWRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5leHRUci5jaGlsZHJlbltpXS5zZWxlY3RDZWxsKGV2ZW50LCBuZXh0VHIuY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICovXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdE5leHRSb3coKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRSb3cpIHtcclxuICAgICAgICAgICAgY29uc3QgdHIgPSB0aGlzLnNlbGVjdGVkUm93LmRyLmVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGlmICh0ci5uZXh0RWxlbWVudFNpYmxpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRyLm5leHRFbGVtZW50U2libGluZy5jbGljaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2VsZWN0UHJldlJvdygpIHtcclxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFJvdykge1xyXG4gICAgICAgICAgICBjb25zdCB0ciA9IHRoaXMuc2VsZWN0ZWRSb3cuZHIuZWwubmF0aXZlRWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKHRyLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRyLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuY2xpY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVDZWxsU2VsZWN0ZWRDbHMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudENlbGwpIHtcclxuICAgICAgICAgICAgRG9tSGFuZGxlci5yZW1vdmVDbGFzcyh0aGlzLmN1cnJlbnRDZWxsLmNlbGxFbGVtZW50LCBDRUxMX1NFTEVDVEVEX0NMUyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyMi5yZW1vdmVDbGFzcyh0aGlzLmN1cnJlbnRDZWxsLmNlbGxFbGVtZW50LCBDRUxMX0VESVRJTkdfQ0xTKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkQ2VsbCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIENFTExfU0VMRUNURURfQ0xTKTtcclxuICAgICAgICBpZiAoc2VsZWN0ZWRDZWxsLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBzZWxlY3RlZENlbGwuZm9yRWFjaChuID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyMi5yZW1vdmVDbGFzcyhuLCBDRUxMX1NFTEVDVEVEX0NMUyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOmAieS4reihjFxyXG4gICAgICogQHBhcmFtIGlkIOmAieS4reihjElEXHJcbiAgICAgKiBAcGFyYW0gZW1pdCDop6blj5FzZWxlY3Qg5LqL5Lu2XHJcbiAgICAgKiBAcGFyYW0gdG9DdXJyZW50UG9zaXRpb24g5rua5Yqo5p2h5a6a5L2N5Yiw5b2T5YmN6YCJ5oup5Lit6KGMXHJcbiAgICAgKi9cclxuICAgIHNlbGVjdFJvdyhpZDogYW55LCBlbWl0ID0gdHJ1ZSwgdG9DdXJyZW50UG9zaXRpb24gPSBmYWxzZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkUm93ICYmIHRoaXMuc2VsZWN0ZWRSb3cuaWQgPT09IGlkKSB7XHJcbiAgICAgICAgICAgIGlmIChlbWl0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRmcy5zZWxlY3RSZWNvcmQoaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAodG9DdXJyZW50UG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9DdXJyZW50Um93KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgX3NlbGVjdFJvdyA9ICgpID0+IHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ2VsbFNlbGVjdGVkQ2xzKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZW5hYmxlU2VsZWN0Um93KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5tdWx0aVNlbGVjdCAmJiB0aGlzLnNob3dDaGVja2JveCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhckNoZWNrZWRzKGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm11bHRpU2VsZWN0ICYmIHRoaXMuc2VsZWN0aW9uTW9kZSA9PT0gJ2RlZmF1bHQnICYmICF0aGlzLmVuYWJsZU1vcmVQYWdlU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQWxsKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpZCAmJiAoIXRoaXMuc2VsZWN0ZWRSb3cgfHwgdGhpcy5zZWxlY3RlZFJvdy5pZCAhPSBpZCkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCByb3cgPSB0aGlzLmRmcy5maW5kUm93KGlkKTtcclxuICAgICAgICAgICAgICAgIGlmIChyb3cgJiYgdGhpcy5kaXNhYmxlUm93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlzYWJsZVJvdyhyb3cuZGF0YSwgcm93LmluZGV4KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChlbWl0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZnMuc2VsZWN0UmVjb3JkKGlkKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZnMuc2V0U2VsZWN0Um93KGlkLCBlbWl0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93ID0gdGhpcy5kZnMuZ2V0Q3VycmVudFJvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrT25TZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja1Jvd3MoW2lkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGdzLnNldFNlbGVjZWRSb3cuZW1pdCh7IGlkLCBzZWxlY3RlZDogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrT25TZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrUm93cyhbaWRdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRvQ3VycmVudFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFRvQ3VycmVudFJvdygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNFZGl0aW5nKCkgKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0b3BFZGl0ID0gdGhpcy5jdXJyZW50Q2VsbC5jZWxsRWxlbWVudC5jbG9zZUVkaXQoKTtcclxuICAgICAgICAgICAgaWYgKHN0b3BFZGl0KSB7XHJcbiAgICAgICAgICAgICAgICBzdG9wRWRpdC5zdWJzY3JpYmUoX3NlbGVjdFJvdyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBfc2VsZWN0Um93KCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmu5rliqjmnaHmu5rliqjliLDlvZPliY3ooYznmoTkvY3nva5cclxuICAgICAqL1xyXG4gICAgc2Nyb2xsVG9DdXJyZW50Um93KCkge1xyXG4gICAgICAgIHRoaXMuZGdzLnNjcm9sbFRvQ3VycmVudFJvdy5uZXh0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgdW5TZWxlY3RSb3coaWQ6IGFueSwgZW1pdCA9IHRydWUpIHtcclxuICAgICAgICBpZiAoaWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUFsbENlbGxFZGl0b3IoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRDZWxsICYmIHRoaXMuY3VycmVudENlbGwucm93SWQgPT0gaWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsU2VsZWN0Q2VsbCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZW1pdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZnMuc2VsZWN0UmVjb3JkKGlkLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRmcy5zZXRTZWxlY3RSb3coaWQsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRSb3cgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZ3Muc2V0U2VsZWNlZFJvdy5lbWl0KHsgaWQsIHNlbGVjdGVkOiBmYWxzZSB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3RBbGxSb3dzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm11bHRpU2VsZWN0ICYmIHRoaXMuZW5hYmxlU2VsZWN0Um93KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGZzLnNlbGVjdEFsbCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjYW5jZWxTZWxlY3RDZWxsKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRDZWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENlbGwuY2VsbEVsZW1lbnQuY2FuY2VsU2VsZWN0ZWQoKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmN1cnJlbnRDZWxsLmlzRWRpdGluZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2VsbCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRmcy5jYW5jZWxTZWxlY3RDZWxsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJTZWxlY3Rpb25zKGV4Y2x1ZGVJZHM/OiBzdHJpbmdbXSkge1xyXG4gICAgICAgIHRoaXMuZGZzLmNsZWFyU2VsZWN0aW9ucyhleGNsdWRlSWRzKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkUm93ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNhbmNlbFNlbGVjdENlbGwoKTtcclxuICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja1JvdyhpZDogYW55LCBlbWl0ID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmNhbk9wZXJhdGVDaGVja2JveCgpKSB7XHJcbiAgICAgICAgICAgIGlmIChlbWl0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRmcy5jaGVja1JlY29yZChpZCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrUm93cyhbaWRdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog6ZKp6YCJ6KGM77yM5LiN6Kem5Y+R6YCJ5Lit5LqL5Lu2ICovXHJcbiAgICBjaGVja1Jvd3MoaWRzOiBhbnlbXSwgZW1pdCA9IGZhbHNlKSB7XHJcbiAgICAgICAgaWYgKGlkcyAmJiBpZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGZzLnNldENoZWNrZWRSb3dzKGlkcywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZGdzLnNldENoZWNrZWRSb3dzLm5leHQoeyBpZHMsIGNoZWNrZWQ6IHRydWUgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25Nb2RlID09PSAnZGVmYXVsdCcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGZzLnVwZGF0ZVByb3BlcnR5KCdzZWxlY3Rpb25zJywgdGhpcy5jaGVja2Vkcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgICAgICBpZiAoZW1pdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja1ZhbHVlcyA9IHRoaXMuY2hlY2tlZHMubWFwKHIgPT4gci5pZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrVmFsdWVzQ2hhbmdlLmVtaXQodGhpcy5jaGVja1ZhbHVlcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWRDaGFuZ2UuZW1pdCh0aGlzLmNoZWNrZWRzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy51cGRhdGVBbGxDaGVja2JveFN0YXR1cygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog5Y+W5raI6ZKp6YCJ77yM5LiN6Kem5Y+R6YCJ5Lit5LqL5Lu2ICovXHJcbiAgICB1bkNoZWNrUm93cyhpZHM6IGFueVtdLCBlbWl0ID0gZmFsc2UpIHtcclxuICAgICAgICBpZiAoaWRzICYmIGlkcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5kZnMuc2V0Q2hlY2tlZFJvd3MoaWRzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZGdzLnNldENoZWNrZWRSb3dzLm5leHQoeyBpZHMsIGNoZWNrZWQ6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICAvLyB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgaWYgKGVtaXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tWYWx1ZXMgPSB0aGlzLmNoZWNrZWRzLm1hcChyID0+IHIuaWQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja1ZhbHVlc0NoYW5nZS5lbWl0KHRoaXMuY2hlY2tWYWx1ZXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja2VkQ2hhbmdlLmVtaXQodGhpcy5jaGVja2Vkcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQWxsQ2hlY2tib3hTdGF0dXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2hlY2tBbGxSb3dzKGVtaXQgPSB0cnVlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FuT3BlcmF0ZUNoZWNrYm94KCkpIHtcclxuICAgICAgICAgICAgdGhpcy5kZnMuY2hlY2tBbGwoKTtcclxuICAgICAgICAgICAgdGhpcy5kZ3MuY2hlY2tBbGwuZW1pdCgpO1xyXG4gICAgICAgICAgICBpZiAoZW1pdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja0FsbC5lbWl0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdW5DaGVja1JvdyhpZDogYW55LCBlbWl0ID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmNhbk9wZXJhdGVDaGVja2JveCgpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRDZWxsICYmIHRoaXMuY3VycmVudENlbGwucm93SWQgPT0gaWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsU2VsZWN0Q2VsbCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZW1pdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZnMuY2hlY2tSZWNvcmQoaWQsIGZhbHNlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5DaGVja1Jvd3MoW2lkXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQWxsQ2hlY2tib3hTdGF0dXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKiog5riF56m66ZKp6YCJ6KGM77yM6buY6K6k5Y+q5riF56m65b2T5YmN6aG155qE6ZKp6YCJXHJcbiAgICAgKiBjbGVhckFsbDog5riF56m65omA5pyJIOm7mOiupOS4uiBmYWxzZTsg5ZCm5YiZ5LuF5riF56m65b2T5YmN6aG155qE6ZKp6YCJ5pWw5o2u44CCXHJcbiAgICAgKi9cclxuICAgIGNsZWFyQ2hlY2tlZHMoY2xlYXJBbGwgPSBmYWxzZSwgZW1pdFVuQ2hlY2tBbGwgPSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5kZnMuY2xlYXJDaGVja2VkcyhjbGVhckFsbCk7XHJcbiAgICAgICAgdGhpcy5jaGVja1ZhbHVlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuY2FuY2VsU2VsZWN0Q2VsbCgpO1xyXG4gICAgICAgIGlmIChlbWl0VW5DaGVja0FsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmRncy51bmNoZWNrQWxsLmVtaXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJBbGwoKSB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFJvdyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jaGVja1ZhbHVlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZGZzLmNsZWFyQWxsKCk7XHJcbiAgICAgICAgdGhpcy5kZ3MudW5jaGVja0FsbC5lbWl0KCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVBbGxDaGVja2JveFN0YXR1cygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgIC8vI3JlZ2lvbiBSZXNpemUgQ29sdW1uXHJcblxyXG4gICAgcHJpdmF0ZSBnZXRSZXNpemVQcm94eVBvc0xlZnQoZTogTW91c2VFdmVudCkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0IGFzIGFueTtcclxuICAgICAgICBjb25zdCBkZ1JlY3QgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCh0aGlzLmRnQ29udGFpbmVyKTtcclxuICAgICAgICBjb25zdCB0ZCA9IHRhcmdldC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgIGNvbnN0IHRkTGVmdCA9IHRkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XHJcbiAgICAgICAgY29uc3QgZGVsdGFFZGdlID0gdGQub2Zmc2V0V2lkdGggLSAoZS5wYWdlWCAtIHRkTGVmdCk7XHJcbiAgICAgICAgdGhpcy5yZXNpemVDb2x1bW5JbmZvLnByb3h5TGluZUVkZ2UgPSBkZWx0YUVkZ2U7XHJcbiAgICAgICAgdGhpcy5yZXNpemVDb2x1bW5JbmZvLnN0YXJ0V2lkdGggPSB0ZC5vZmZzZXRXaWR0aDtcclxuICAgICAgICB0aGlzLnJlc2l6ZUNvbHVtbkluZm8uc3RhcnRYID0gZS5wYWdlWDtcclxuICAgICAgICB0aGlzLnJlc2l6ZUNvbHVtbkluZm8ubGVmdCA9IHRkTGVmdCAtIGRnUmVjdC5sZWZ0IC0gMSArIGRlbHRhRWRnZTtcclxuICAgICAgICByZXR1cm4gZS5wYWdlWCAtIGRnUmVjdC5sZWZ0IC0gMSArIGRlbHRhRWRnZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHRvZ2dsZVJlc2l6ZVByb3h5KHNob3cgPSB0cnVlKSB7XHJcbiAgICAgICAgbGV0IGRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIGlmICghc2hvdykge1xyXG4gICAgICAgICAgICBkaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlbmRlcjIuc2V0U3R5bGUodGhpcy5yZXNpemVQcm94eUJnLm5hdGl2ZUVsZW1lbnQsICdkaXNwbGF5JywgZGlzcGxheSk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIyLnNldFN0eWxlKHRoaXMucmVzaXplUHJveHkubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknLCBkaXNwbGF5KTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNvbHVtblJlc2l6ZUJlZ2luKGU6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5yZXNpemVQcm94eSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcjIuc2V0U3R5bGUoZG9jdW1lbnQuYm9keSwgJ2N1cnNvcicsICdlLXJlc2l6ZScpO1xyXG4gICAgICAgICAgICBjb25zdCBwcm94eSA9IHRoaXMucmVzaXplUHJveHkubmF0aXZlRWxlbWVudDtcclxuICAgICAgICAgICAgY29uc3QgcHJveHlQb3NMZWZ0ID0gdGhpcy5nZXRSZXNpemVQcm94eVBvc0xlZnQoZSk7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyMi5zZXRTdHlsZShwcm94eSwgJ2xlZnQnLCBwcm94eVBvc0xlZnQgKyAncHgnKTtcclxuXHJcbiAgICAgICAgICAgIGxldCB0b3AgPSAwO1xyXG4gICAgICAgICAgICBpZiAoKHRoaXMuZW5hYmxlRmlsdGVyUm93IHx8IHRoaXMuZW5hYmxlU21hcnRGaWx0ZXIpICYmIHRoaXMuc2hvd0ZpbHRlckJhcikge1xyXG4gICAgICAgICAgICAgICAgdG9wICs9IHRoaXMuZmlsdGVyQmFySGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zaG93Um93R3JvdXBQYW5lbCkge1xyXG4gICAgICAgICAgICAgICAgdG9wICs9IHRoaXMucm93R3JvdXBQYW5lbEhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5yZW5kZXIyLnNldFN0eWxlKHByb3h5LCAndG9wJywgYCR7dG9wfXB4YCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuYXV0b0hlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIyLnNldFN0eWxlKHByb3h5LCAnaGVpZ2h0JywgKHRoaXMuaGVpZ2h0IC0gdGhpcy5wYWdlckhlaWdodCkgKyAncHgnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCBib3R0b21IID0gMDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhZ2luYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBib3R0b21IICs9IHRoaXMucGFnZXJIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zaG93Rm9vdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tSCArPSB0aGlzLmZvb3RlckhlaWdodDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyMi5zZXRTdHlsZShwcm94eSwgJ2hlaWdodCcsIGBjYWxjKDEwMCUgLSAke2JvdHRvbUh9cHgpYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy50b2dnbGVSZXNpemVQcm94eSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkNvbHVtblJlc2l6ZShlOiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgcHJveHkgPSB0aGlzLnJlc2l6ZVByb3h5Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgY29uc3QgZGdSZWN0ID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QodGhpcy5kZ0NvbnRhaW5lcik7XHJcbiAgICAgICAgY29uc3QgcHJveHlQb3NMZWZ0ID0gZS5wYWdlWCAtIGRnUmVjdC5sZWZ0IC0gMSArIHRoaXMucmVzaXplQ29sdW1uSW5mby5wcm94eUxpbmVFZGdlO1xyXG4gICAgICAgIGlmIChwcm94eVBvc0xlZnQgLSB0aGlzLnJlc2l6ZUNvbHVtbkluZm8ubGVmdCA+IDIwKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyMi5zZXRTdHlsZShwcm94eSwgJ2xlZnQnLCBwcm94eVBvc0xlZnQgKyAncHgnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcjIuc2V0U3R5bGUocHJveHksICdsZWZ0JywgKHRoaXMucmVzaXplQ29sdW1uSW5mby5sZWZ0ICsgMjApICsgJ3B4Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ29sdW1uUmVzaXplRW5kKGU6IE1vdXNlRXZlbnQsIGNvbDogRGF0YUNvbHVtbikge1xyXG4gICAgICAgIHRoaXMucmVuZGVyMi5yZW1vdmVTdHlsZShkb2N1bWVudC5ib2R5LCAnY3Vyc29yJyk7XHJcbiAgICAgICAgdGhpcy50b2dnbGVSZXNpemVQcm94eShmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5yZXNpemVDb2x1bW5JbmZvLnByb3h5TGluZUVkZ2UgPSAwO1xyXG5cclxuICAgICAgICBsZXQgbmV3Q29sV2lkdGggPSB0aGlzLnJlc2l6ZUNvbHVtbkluZm8uc3RhcnRXaWR0aCArIGUucGFnZVggLSB0aGlzLnJlc2l6ZUNvbHVtbkluZm8uc3RhcnRYO1xyXG5cclxuICAgICAgICBpZiAobmV3Q29sV2lkdGggPCAyMCkge1xyXG4gICAgICAgICAgICBuZXdDb2xXaWR0aCA9IDIwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNvbC53aWR0aCA+IG5ld0NvbFdpZHRoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHQgPSBjb2wud2lkdGggLSBuZXdDb2xXaWR0aDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmZpdENvbHVtbnMgJiYgdGhpcy5zY3JvbGxJbnN0YW5jZS5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsTGVmdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW92ZUxlZnQgPSB0aGlzLnNjcm9sbEluc3RhbmNlLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zY3JvbGxMZWZ0IC0gdDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsSW5zdGFuY2Uuc2Nyb2xsVG9YKG1vdmVMZWZ0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb2wud2lkdGggPSBuZXdDb2xXaWR0aDtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLm5vd3JhcCAmJiB0aGlzLnNob3dGb290ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRGb290ZXJIZWlnaHQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnVzZUNvbnRyb2xQYW5lbCAmJiB0aGlzLnNldHRpbmdTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ1NlcnZpY2Uuc2F2ZVVzZXJDb25maWcodGhpcy5pZCkuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGZzLmNvbHVtblJlc2l6ZUVuZCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZ3MuY29sdW1uUmVzaXplZC5lbWl0KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5kZnMuY29sdW1uUmVzaXplRW5kKCk7XHJcbiAgICAgICAgdGhpcy5kZ3MuY29sdW1uUmVzaXplZC5lbWl0KCk7XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlRml4ZWRDb2x1bW5Dc3NGb3JGYXN0TW9kZShjb2wpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDov5jljp/liJflrr0gKi9cclxuICAgIHJlc3RpdHV0ZUNvbHVtbnNTaXplKCkge1xyXG4gICAgICAgIHRoaXMuZGZzLnJlc2l6ZUNvbHVtbnModHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5kZ3MuY29sdW1uUmVzaXplZC5lbWl0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWNleWFg+agvOWGheWuueiHqumAguW6lOWIl+WuvSAqL1xyXG4gICAgc2l6ZVRvQ29udGVudChjb2w6IERhdGFDb2x1bW4sIHRoOiBFbGVtZW50UmVmKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLkF1dG9Db2x1bW5XaWR0aFVzZURibGNsaWNrKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGxvbmdlc3RUZXh0ID0gJyc7XHJcbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLmRhdGE7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSBpdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAvLyBURlM6IDM1Njk2NCAyMDIwMDIwM1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBVdGlscy5nZXRWYWx1ZShjb2wuZmllbGQsIGl0ZW1zW2ldKTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIHx8ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gJycgKyB2YWx1ZTtcclxuICAgICAgICAgICAgaWYgKGNvbC5mb3JtYXR0ZXIgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGV4dCA9IHRoaXMuY29sRm9ybWF0U2VyLmZvcm1hdCh2YWx1ZSwgaXRlbXNbaV0sIGNvbC5mb3JtYXR0ZXIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoVXRpbHMuZ2V0Qkxlbih0ZXh0KSA+IFV0aWxzLmdldEJMZW4obG9uZ2VzdFRleHQpKSB7XHJcbiAgICAgICAgICAgICAgICBsb25nZXN0VGV4dCA9IHRleHQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvbmdUZXh0QXJlYS5uYXRpdmVFbGVtZW50LmlubmVySFRNTCA9IHRleHQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3MSA9IHRoaXMubG9uZ1RleHRBcmVhLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvbmdUZXh0QXJlYS5uYXRpdmVFbGVtZW50LmlubmVySFRNTCA9IGxvbmdlc3RUZXh0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdzIgPSB0aGlzLmxvbmdUZXh0QXJlYS5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh3MSA+IHcyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9uZ2VzdFRleHQgPSB0ZXh0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxvbmdUZXh0QXJlYS5uYXRpdmVFbGVtZW50LmlubmVySFRNTCA9IGxvbmdlc3RUZXh0O1xyXG4gICAgICAgIGNvbnN0IG1heFdpZHRoID0gdGhpcy5sb25nVGV4dEFyZWEubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCArIDI2O1xyXG5cclxuICAgICAgICB0aGlzLmxvbmdUZXh0QXJlYS5uYXRpdmVFbGVtZW50LmlubmVySFRNTCA9IHRoLm5hdGl2ZUVsZW1lbnQuaW5uZXJUZXh0O1xyXG4gICAgICAgIGxldCB0aE1pbldpZHRoID0gdGhpcy5sb25nVGV4dEFyZWEubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCArIDI2O1xyXG5cclxuICAgICAgICBpZiAoY29sLnNvcnRhYmxlKSB7XHJcbiAgICAgICAgICAgIHRoTWluV2lkdGggKz0gMjQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb2wud2lkdGggPSAobWF4V2lkdGggPiB0aE1pbldpZHRoID8gbWF4V2lkdGggOiB0aE1pbldpZHRoKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29sSW5kZXggPSB0aGlzLmZsYXRDb2x1bW5zLmZpbmRJbmRleChjID0+IGMuZmllbGQgPT09IGNvbC5maWVsZCk7XHJcbiAgICAgICAgaWYgKGNvbEluZGV4ID09PSB0aGlzLmZsYXRDb2x1bW5zLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgY29sLndpZHRoICs9IDY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGZzLnJlc2l6ZUNvbHVtbnMoKTtcclxuICAgICAgICB0aGlzLmRncy5jb2x1bW5SZXNpemVkLmVtaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAvLyNyZWdpb24gQ2hhbmdlc1xyXG4gICAgZ2V0Q2hhbmdlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kZnMuZ2V0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGFjY2VwdENoYW5nZXMoKSB7XHJcbiAgICAgICAgdGhpcy5kZnMuYWNjZXB0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlamVjdENoYW5nZXMoKSB7XHJcbiAgICAgICAgdGhpcy5kZnMucmVqZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG4gICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgLy8jcmVnaW9uIENSVURcclxuXHJcbiAgICBhcHBlbmRSb3cocm93OiBhbnkpIHtcclxuICAgICAgICB0aGlzLmNhbmNlbEVkaXQobnVsbCk7XHJcbiAgICAgICAgdGhpcy5kZnMuYXBwZW5kUm93KHJvdyk7XHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbmdlLmVtaXQodGhpcy5kZnMuZ2V0RGF0YSgpKTtcclxuICAgICAgICB0aGlzLnJvd0FwcGVuZGVkLmVtaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVSb3cocm93SWQsIG5ld0RhdGE6IHsgW2tleTogc3RyaW5nXTogYW55IH0pIHtcclxuICAgICAgICB0aGlzLmRmcy51cGRhdGVSb3cocm93SWQsIG5ld0RhdGEpO1xyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5nZS5lbWl0KHRoaXMuZGZzLmdldERhdGEoKSk7XHJcbiAgICAgICAgdGhpcy5yb3dVcGRhdGVkLmVtaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICByZWZyZXNoUm93KHJvd0lkKSB7XHJcbiAgICAgICAgY29uc3Qgcm93ID0gdGhpcy5kZnMuZmluZFJvdyhyb3dJZCk7XHJcbiAgICAgICAgaWYgKHJvdyAmJiByb3cuZGF0YSkge1xyXG4gICAgICAgICAgICB0aGlzLmRmcy5yb3dVcGRhdGUkLmVtaXQocm93KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLndyaXRlQ29uc29sZSgnQ2FuIG5vdCBmb3VuZCByb3cgYnkgaWQuIGlkOiAnICsgcm93SWQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgZGVsZXRlUm93KHJvd0lkPzogYW55KSB7XHJcbiAgICAgICAgdGhpcy5jYW5jZWxFZGl0KHJvd0lkLCBmYWxzZSk7XHJcbiAgICAgICAgaWYgKCFyb3dJZCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcm93SWQgPSB0aGlzLnNlbGVjdFZhbHVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDliKDpmaTooYzml7bkuLvplK7moIfor4ZJRCDkuI3og73kuLrnqbrjgIJgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkZWxldGVSb3cgPSB0aGlzLmRmcy5kZWxldGVSb3cocm93SWQpO1xyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5nZS5lbWl0KHRoaXMuZGZzLmdldERhdGEoKSk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Q2VsbCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5kZnMudXBkYXRlUHJvcGVydHkoJ2N1cnJlbnRDZWxsJywgbnVsbCk7XHJcbiAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgdGhpcy5yb3dEZWxldGVkLmVtaXQoZGVsZXRlUm93KTtcclxuICAgIH1cclxuXHJcbiAgICB2YWxpZGF0ZVJvdygpIHsgfVxyXG5cclxuICAgIGluc2VydFJvdygpIHsgfVxyXG5cclxuICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgIC8vI3JlZ2lvbiBTY3JvbGxpbmdcclxuXHJcbiAgICBzY3JvbGxUb0xlZnQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2Nyb2xsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGxJbnN0YW5jZS5zY3JvbGxUb0xlZnQoMCwgMjAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2Nyb2xsVG9SaWdodCgpIHtcclxuICAgICAgICBpZiAodGhpcy5zY3JvbGxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNjcm9sbEluc3RhbmNlLnNjcm9sbFRvUmlnaHQoMCwgMjAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2Nyb2xsVG9Ub3AoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2Nyb2xsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGxJbnN0YW5jZS5zY3JvbGxUb1RvcCgwLCAxMDApO1xyXG4gICAgICAgICAgICB0aGlzLmRmcy51cGRhdGVQcm9wZXJ0eSgnc2Nyb2xsSW5mbycsIHsgeTogMCwgeDogMCB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2Nyb2xsVG9Cb3R0b20oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2Nyb2xsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGxJbnN0YW5jZS5zY3JvbGxUb0JvdHRvbSgwLCAxMDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICBwcml2YXRlIF9zZXRDb2x1bW5SZWFkb25seShjb2xzOiBEYXRhQ29sdW1uW10sIGZpZWxkOiBzdHJpbmcsIHJlYWRvbmx5ID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmIChjb2xzICYmIGNvbHMubGVuZ3RoICYmIGZpZWxkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbCA9IGNvbHMuZmluZChuID0+IG4uZmllbGQgPT09IGZpZWxkKTtcclxuICAgICAgICAgICAgaWYgKGNvbCkge1xyXG4gICAgICAgICAgICAgICAgY29sLnJlYWRvbmx5ID0gcmVhZG9ubHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q29sdW1uUmVhZG9ubHkoZmllbGQ6IHN0cmluZywgcmVhZG9ubHkgPSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0Q29sdW1uUmVhZG9ubHkodGhpcy5jb2xHcm91cC5sZWZ0Rml4ZWQsIGZpZWxkLCByZWFkb25seSk7XHJcbiAgICAgICAgdGhpcy5fc2V0Q29sdW1uUmVhZG9ubHkodGhpcy5jb2xHcm91cC5yaWdodEZpeGVkLCBmaWVsZCwgcmVhZG9ubHkpO1xyXG4gICAgICAgIHRoaXMuX3NldENvbHVtblJlYWRvbmx5KHRoaXMuY29sR3JvdXAubm9ybWFsQ29sdW1ucywgZmllbGQsIHJlYWRvbmx5KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDmmK/lkKbkuLrlpJrooajlpLRcclxuICAgIGlzTXVsdGlIZWFkZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1ucyAmJiB0aGlzLmNvbHVtbnMubGVuZ3RoID4gMSAmJiBBcnJheS5pc0FycmF5KHRoaXMuY29sdW1uc1sxXSk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlVmlzaWJsZUNvbHVtbihmaWVsZHM6IHN0cmluZ1tdLCB2aXNpYmxlID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc011bHRpSGVhZGVyKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5jb2x1bW5zLmZvckVhY2goKGNvbHM6IERhdGFDb2x1bW5bXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IGNvbHMuZmluZChjID0+IGMuZmllbGQgPT09IGZpZWxkIHx8IGMuaWQgPT09IGZpZWxkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbC52aXNpYmxlID0gdmlzaWJsZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8g5aSa6KGo5aS0XHJcbiAgICAgICAgICAgIGNvbnN0IGFsbENvbHMgPSBmbGF0dGVuPERhdGFDb2x1bW4+KHRoaXMuY29sdW1ucyk7XHJcblxyXG4gICAgICAgICAgICBhbGxDb2xzLmZvckVhY2gocCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocC5vcmlnaWFubENvbFNwYW4gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHAub3JpZ2lhbmxDb2xTcGFuID0gcC5jb2xzcGFuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IF9jb2wgPSBhbGxDb2xzLmZpbmQoY29sID0+IGNvbC5maWVsZCA9PT0gZmllbGQgfHwgY29sLmlkID09PSBmaWVsZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2NvbCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoX2NvbC52aXNpYmxlID09PSB2aXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9jb2wudmlzaWJsZSA9IHZpc2libGU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50cyA9IERhdGFncmlkQ29sdW1uc0hlbHBlci5nZXRQYXJlbnRDb2x1bW5zKF9jb2wsIGFsbENvbHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkcyA9IERhdGFncmlkQ29sdW1uc0hlbHBlci5nZXRDaGlsZENvbHVtbnMoX2NvbCwgYWxsQ29scyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRzLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGMudmlzaWJsZSA9IHZpc2libGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZpc2libGUgJiYgY2hpbGRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY29sLmNvbHNwYW4gPSBfY29sLm9yaWdpYW5sQ29sU3BhbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IF9jb2xzcGFuID0gX2NvbC5jb2xzcGFuIHx8IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50cy5mb3JFYWNoKHAgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuY29sc3BhbiA9IHAuY29sc3BhbiAtIF9jb2xzcGFuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgX2NoaWxkcyA9IGFsbENvbHMuZmlsdGVyKG4gPT4gbi5wYXJlbnRJZCA9PT0gcC5pZCAmJiBuLnZpc2libGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5jb2xzcGFuID0gX2NoaWxkcy5yZWR1Y2UoKHIsIGMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gciArIChjLmNvbHNwYW4gfHwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcC52aXNpYmxlID0gISFwLmNvbHNwYW47XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRDb2x1bW4oZmllbGQ6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IGFsbENvbHMgPSBmbGF0dGVuPERhdGFDb2x1bW4+KHRoaXMuY29sdW1ucyk7XHJcbiAgICAgICAgcmV0dXJuIGFsbENvbHMuZmluZChuID0+IG4uZmllbGQgPT09IGZpZWxkIHx8IG4uaWQgPT09IGZpZWxkKTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93Q29sdW1uKGZpZWxkOiBzdHJpbmcgfCBzdHJpbmdbXSwgcmVsb2FkID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZmllbGQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlVmlzaWJsZUNvbHVtbihbZmllbGRdLCB0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZVZpc2libGVDb2x1bW4oZmllbGQsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbHVtbnNDaGFuZ2VkKHJlbG9hZCk7XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZUNvbHVtbihmaWVsZDogc3RyaW5nIHwgc3RyaW5nW10sIHJlbG9hZCA9IHRydWUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGZpZWxkID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZVZpc2libGVDb2x1bW4oW2ZpZWxkXSwgZmFsc2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlVmlzaWJsZUNvbHVtbihmaWVsZCwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbHVtbnNDaGFuZ2VkKHJlbG9hZCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlQ29sdW1uKGZpZWxkOiBzdHJpbmcsIGNvbHVtbk9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgZGV0ZWN0Q2hhbmdlID0gdHJ1ZSkge1xyXG4gICAgICAgIHRoaXMuY29sdW1ucy5mb3JFYWNoKChjb2xzOiBEYXRhQ29sdW1uW10pID0+IHtcclxuICAgICAgICAgICAgbGV0IGNvbHVtbiA9IGNvbHMuZmluZChjb2wgPT4gY29sLmZpZWxkID09PSBmaWVsZCk7XHJcbiAgICAgICAgICAgIGlmIChjb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgIGNvbHVtbiA9IE9iamVjdC5hc3NpZ24oY29sdW1uLCBjb2x1bW5PYmplY3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChkZXRlY3RDaGFuZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5jb2x1bW5zQ2hhbmdlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRDb2x1bW5Gb3JtYXR0ZXIoZmllbGQ6IHN0cmluZywgZm9ybWF0dGVyOiBhbnksIGRldGVjdENoYW5nZSA9IHRydWUpIHtcclxuICAgICAgICB0aGlzLmNvbHVtbnMuZm9yRWFjaCgoY29sczogRGF0YUNvbHVtbltdKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtbiA9IGNvbHMuZmluZChjb2wgPT4gY29sLmZpZWxkID09PSBmaWVsZCk7XHJcbiAgICAgICAgICAgIGlmIChjb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgIGNvbHVtbi5mb3JtYXR0ZXIgPSBmb3JtYXR0ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKGRldGVjdENoYW5nZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbnNDaGFuZ2VkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUNvbHVtbkZvcm1hdHRlck9wdGlvbnMoZmllbGQ6IHN0cmluZywgZm9ybWF0dGVyT3B0aW9uczogYW55LCBkZXRlY3RDaGFuZ2UgPSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5jb2x1bW5zLmZvckVhY2goKGNvbHM6IERhdGFDb2x1bW5bXSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjb2x1bW4gPSBjb2xzLmZpbmQoY29sID0+IGNvbC5maWVsZCA9PT0gZmllbGQpO1xyXG4gICAgICAgICAgICBpZiAoY29sdW1uICYmIGNvbHVtbi5mb3JtYXR0ZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbEZvcm1hdHRlciA9IGNvbHVtbi5mb3JtYXR0ZXIgYXMgYW55O1xyXG4gICAgICAgICAgICAgICAgY29sRm9ybWF0dGVyLm9wdGlvbnMgPSBjb2xGb3JtYXR0ZXIub3B0aW9ucyB8fCB7fTtcclxuICAgICAgICAgICAgICAgIGNvbEZvcm1hdHRlci5vcHRpb25zID0gT2JqZWN0LmFzc2lnbihjb2xGb3JtYXR0ZXIub3B0aW9ucywgZm9ybWF0dGVyT3B0aW9ucyB8fCB7fSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKGRldGVjdENoYW5nZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbnNDaGFuZ2VkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldENvbHVtblRpdGxlKGZpZWxkOiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcsIGRldGVjdENoYW5nZSA9IHRydWUpIHtcclxuICAgICAgICB0aGlzLmNvbHVtbnMuZm9yRWFjaCgoY29sczogRGF0YUNvbHVtbltdKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtbiA9IGNvbHMuZmluZChjb2wgPT4gY29sLmZpZWxkID09PSBmaWVsZCk7XHJcbiAgICAgICAgICAgIGlmIChjb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgIGNvbHVtbi50aXRsZSA9IHRpdGxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChkZXRlY3RDaGFuZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5jb2x1bW5zQ2hhbmdlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaOkuW6j1xyXG4gICAgICogQHBhcmFtIHNvcnROYW1lIOaOkuW6j+Wtl+aute+8jOWmgu+8miAnbmFtZSxhZ2UnXHJcbiAgICAgKiBAcGFyYW0gc29ydE9yZGVyIOaOkuW6j+aWueW8j++8jOWmgu+8midkZXNjLCBhc2MnXHJcbiAgICAgKi9cclxuICAgIHNvcnQoc29ydE5hbWU/OiBzdHJpbmcsIHNvcnRPcmRlcj86IHN0cmluZykge1xyXG4gICAgICAgIGlmIChzb3J0TmFtZSA9PT0gbnVsbCB8fCBzb3J0TmFtZSA9PT0gJycgfHwgc29ydE9yZGVyID09PSBudWxsIHx8IHNvcnRPcmRlciA9PT0gJycpIHtcclxuICAgICAgICAgICAgdGhpcy5jbGVhclNvcnQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoc29ydE5hbWUgJiYgc29ydE9yZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnVwZGF0ZVNvcnRJbmZvKHNvcnROYW1lLCBzb3J0T3JkZXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb3J0TmFtZSA9IHNvcnROYW1lO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb3J0T3JkZXIgPSBzb3J0T3JkZXI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRmcy5zZXRTb3J0SW5mbyh0aGlzLnNvcnROYW1lLCB0aGlzLnNvcnRPcmRlcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5yZW1vdGVTb3J0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRmcy5jbGllbnRTb3J0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5vbkNvbHVtblNvcnRlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjbGVhclNvcnQoKSB7XHJcbiAgICAgICAgdGhpcy5zb3J0TmFtZSA9ICcnO1xyXG4gICAgICAgIHRoaXMuc29ydE9yZGVyID0gJyc7XHJcbiAgICAgICAgdGhpcy5kZnMuc2V0U29ydEluZm8oJycsICcnKTtcclxuICAgICAgICBpZiAoIXRoaXMucmVtb3RlU29ydCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhICYmIHRoaXMuZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGZzLmNsZWFyU29ydCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub25Db2x1bW5Tb3J0ZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNvbHVtblNvcnRlZCgpIHtcclxuICAgICAgICBsZXQgcGFyYW1zID0gbnVsbDtcclxuICAgICAgICBpZiAodGhpcy5zb3J0TmFtZSAmJiB0aGlzLnNvcnRPcmRlcikge1xyXG4gICAgICAgICAgICBjb25zdCBvcmRlcnMgPSB0aGlzLnNvcnRPcmRlci5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICBwYXJhbXMgPSB0aGlzLnNvcnROYW1lLnNwbGl0KCcsJykucmVkdWNlKChyLCBuLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByW25dID0gb3JkZXJzW2ldIHx8ICdhc2MnO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHI7XHJcbiAgICAgICAgICAgIH0sIHt9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5yZW1vdGVTb3J0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGZzLmNsaWVudFNvcnQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29sdW1uU29ydGVkLmVtaXQocGFyYW1zKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTb3J0SW5mbyhuZXdTb3J0TmFtZSwgbmV3U29ydE9yZGVyKSB7XHJcbiAgICAgICAgY29uc3Qgc29ydE5hbWUgPSB0aGlzLnNvcnROYW1lO1xyXG4gICAgICAgIGNvbnN0IHNvcnRPcmRlciA9IHRoaXMuc29ydE9yZGVyO1xyXG4gICAgICAgIGxldCBzb3J0RmllbGRzID0gW107XHJcbiAgICAgICAgbGV0IHNvcnRPcmRlcnMgPSBbXTtcclxuICAgICAgICBpZiAoc29ydE5hbWUpIHtcclxuICAgICAgICAgICAgc29ydEZpZWxkcyA9IHNvcnROYW1lLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIHNvcnRPcmRlcnMgPSBzb3J0T3JkZXIuc3BsaXQoJywnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IF9zb3J0RmllbGRzID0gbmV3U29ydE5hbWUuc3BsaXQoJywnKTtcclxuICAgICAgICBjb25zdCBfc29ydE9yZGVycyA9IG5ld1NvcnRPcmRlci5zcGxpdCgnLCcpO1xyXG5cclxuXHJcbiAgICAgICAgX3NvcnRGaWVsZHMuZm9yRWFjaCgobkZpZWxkLCBuSW5kZXgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29sT3JkZXIgPSBfc29ydE9yZGVyc1tuSW5kZXhdIHx8ICdhc2MnO1xyXG4gICAgICAgICAgICBsZXQgbmV3T3JkZXIgPSBjb2xPcmRlcjtcclxuICAgICAgICAgICAgY29uc3QgaSA9IHNvcnRGaWVsZHMuZmluZEluZGV4KG4gPT4gbiA9PT0gbkZpZWxkKTtcclxuICAgICAgICAgICAgaWYgKGkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgX29yZGVyID0gc29ydE9yZGVyc1tpXSA9PT0gJ2FzYycgPyAnZGVzYycgOiAnYXNjJztcclxuICAgICAgICAgICAgICAgIG5ld09yZGVyID0gX29yZGVyO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubXVsdGlTb3J0ICYmIG5ld09yZGVyID09PSAnYXNjJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld09yZGVyID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRGaWVsZHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRPcmRlcnMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzb3J0T3JkZXJzW2ldID0gX29yZGVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm11bHRpU29ydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRGaWVsZHMucHVzaChuRmllbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRPcmRlcnMucHVzaChjb2xPcmRlcik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRGaWVsZHMgPSBbbkZpZWxkXTtcclxuICAgICAgICAgICAgICAgICAgICBzb3J0T3JkZXJzID0gW2NvbE9yZGVyXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnNvcnROYW1lID0gc29ydEZpZWxkcy5qb2luKCcsJyk7XHJcbiAgICAgICAgdGhpcy5zb3J0T3JkZXIgPSBzb3J0T3JkZXJzLmpvaW4oJywnKTtcclxuICAgIH1cclxuICAgIC8qKiDliJforr7nva4gKi9cclxuICAgIHNob3dDb250cm9sUGFuZWwoJGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLnVzZUNvbnRyb2xQYW5lbCAmJiB0aGlzLnNldHRpbmdTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tTZXR0aW5nSHR0cCgpO1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdTZXJ2aWNlLnNob3coc2VsZik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrU2V0dGluZ0h0dHAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdTZXJ2aWNlLmh0dHBSZXN0U2VydmljZSB8fCAhdGhpcy5zZXR0aW5nU2VydmljZS5odHRwUmVzdFNlcnZpY2UuYmVmUmVwb3NpdG9yeSkge1xyXG4gICAgICAgICAgICBjb25zdCBzZXR0aW5nc0h0dHAgPSB0aGlzLmluamVjdC5nZXQoR1JJRF9TRVRUSU5HU19IVFRQLCBudWxsKTtcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5nU2VydmljZS5odHRwUmVzdFNlcnZpY2UgPSBzZXR0aW5nc0h0dHA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRpc2FibGVIZWFkZXIoZmxhZyA9IHRydWUpIHtcclxuICAgICAgICB0aGlzLmRncy5kaXNhYmxlSGVhZGVyLmVtaXQoZmxhZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOiOt+WPlueUqOaIt+S4quaAp+WMluiuvue9riAqL1xyXG4gICAgcHJpdmF0ZSB1c2VyUHJvZmlsZVNldHRpbmcoc2V0dGluZ3MpIHtcclxuXHJcbiAgICAgICAgY29uc3QgeyBzb3J0SW5mbywgdmlld0NvbHVtbnMsIGdyb3VwRmllbGQsIGNvbHVtbkZvcm1hdCwgZXhwYW5kR3JvdXBSb3dzICB9ID0gc2V0dGluZ3M7XHJcbiAgICAgICAgbGV0IF9zb3J0TmFtZSwgX3NvcnRPcmRlcjtcclxuICAgICAgICBpZiAoc29ydEluZm8pIHtcclxuICAgICAgICAgICAgY29uc3QgeyBzb3J0TmFtZSwgc29ydE9yZGVyIH0gPSBzb3J0SW5mbztcclxuICAgICAgICAgICAgX3NvcnROYW1lID0gc29ydE5hbWU7XHJcbiAgICAgICAgICAgIF9zb3J0T3JkZXIgPSBzb3J0T3JkZXJcclxuICAgICAgICAgICAgaWYgKHNvcnROYW1lICYmIHNvcnROYW1lLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb3J0TmFtZSA9IHNvcnROYW1lLmpvaW4oJywnKTtcclxuICAgICAgICAgICAgICAgIGlmIChzb3J0T3JkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvcnRPcmRlciA9IHNvcnRPcmRlci5qb2luKCcsJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXNbJ19fc29ydEluZm8nXSA9IHNvcnRJbmZvO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHZpZXdDb2x1bW5zICYmIHZpZXdDb2x1bW5zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbnMgPSB0aGlzLmNvbHVtbnMubWFwKGNvbHMgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5nU2VydmljZS51cGRhdGVDb2x1bW5Gb3JtYXQoY29scywgY29sdW1uRm9ybWF0LCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdTZXJ2aWNlLm5ld1Zpc2libGVPcmRlckNvbHVtbnMoY29scywgdmlld0NvbHVtbnMsIGNvbHVtbkZvcm1hdCwgdGhpcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hZGRDb250cm9sQ29sKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbnMuZm9yRWFjaChjb2xzID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbHMuZm9yRWFjaChjb2wgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfc29ydE5hbWUgJiYgX3NvcnROYW1lLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gX3NvcnROYW1lLmluZGV4T2YoY29sLmZpZWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sLm9yZGVyID0gX3NvcnRPcmRlcltpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmdyb3VwUm93cyAmJiAoZ3JvdXBGaWVsZCAhPT0gbnVsbCAmJiBncm91cEZpZWxkICE9PSB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBGaWVsZCA9IGdyb3VwRmllbGQ7XHJcbiAgICAgICAgICAgIHRoaXMuZXhwYW5kR3JvdXBSb3dzID0gZXhwYW5kR3JvdXBSb3dzID09PSB1bmRlZmluZWQgPyB0aGlzLmV4cGFuZEdyb3VwUm93czogZXhwYW5kR3JvdXBSb3dzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDmmK/lkKbkuLrlvZPliY3mtLvliqjnmoTooajmoLxcclxuICAgIHByaXZhdGUgaXNBY3RpdmVkKCkge1xyXG4gICAgICAgIHJldHVybiBEb21IYW5kbGVyLmhhc0NsYXNzKHRoaXMuZGdDb250YWluZXIubmF0aXZlRWxlbWVudCwgdGhpcy5fYWN0aXZlX2RhdGFncmlkX2Nscyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5riF55CG5peg5pWI55qERE9NXHJcbiAgICBwcml2YXRlIGNsZWFuRG9tKCkge1xyXG4gICAgICAgIC8vIOa4heeQhiBUT09MLVRJUFxyXG4gICAgICAgIGNvbnN0IHRpcHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZGF0YWdyaWQtY2VsbC10b29sdGlwJyk7XHJcbiAgICAgICAgaWYgKHRpcHMgJiYgdGlwcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGlwcy5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgbi5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNlbGxJc1JlYWRPbmx5KGNvbDogRGF0YUNvbHVtbiwgcm93RGF0YSkge1xyXG4gICAgICAgIGxldCByZWFkT25seSA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVSb3cpIHtcclxuICAgICAgICAgICAgcmVhZE9ubHkgPSB0aGlzLmRpc2FibGVSb3cocm93RGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXJlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgIGlmIChjb2wucmVhZG9ubHkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2wucmVhZG9ubHkgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5ID0gY29sLnJlYWRvbmx5O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29sLnJlYWRvbmx5ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHkgPSBjb2wucmVhZG9ubHkocm93RGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlYWRPbmx5O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGdyb3VwRmllbGRDaGFuZ2VkKCkge1xyXG4gICAgICAgIHRoaXMuY29sdW1uc0NoYW5nZWQoKTtcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5nU2VydmljZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrU2V0dGluZ0h0dHAoKTtcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5nU2VydmljZS5zYXZlVXNlckNvbmZpZyh0aGlzLmlkKS5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ncm91cEZpZWxkQ2hhbmdlLmVtaXQoeyBuZXdHcm91cEZpZWxkOiB0aGlzLmdyb3VwRmllbGQsIGdyaWQ6IHRoaXMgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlR3JvdXBGaWVsZChmaWVsZDogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgZmllbGRzID0gdGhpcy5ncm91cEZpZWxkLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgY29uc3QgZGVsSWR4ID0gZmllbGRzLmluZGV4T2YoZmllbGQpO1xyXG4gICAgICAgIGlmIChkZWxJZHggPiAtMSkge1xyXG4gICAgICAgICAgICBmaWVsZHMuc3BsaWNlKGRlbElkeCwgMSkuam9pbignLCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmdyb3VwRmllbGQgPSBmaWVsZHMuam9pbignLCcpO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlVmlzaWJsZUNvbHVtbihbZmllbGRdLCB0cnVlKTtcclxuICAgICAgICB0aGlzLmdyb3VwRmllbGRDaGFuZ2VkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJBbGxHcm91cHBpbmdGaWVsZCgkZXZlbnQpIHtcclxuICAgICAgICB0aGlzLnNob3dMb2FkaW5nKCk7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMuZ3JvdXBGaWVsZC5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwRmllbGQgPSAnJztcclxuICAgICAgICAgICAgdGhpcy50b2dnbGVWaXNpYmxlQ29sdW1uKGZpZWxkcywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBGaWVsZENoYW5nZWQoKTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUxvYWRpbmcoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRHcm91cEZpZWxkcyhncm91cEZpZWxkcykge1xyXG4gICAgICAgIHRoaXMuZ3JvdXBGaWVsZCA9IGdyb3VwRmllbGRzO1xyXG4gICAgICAgIHRoaXMuY29sdW1uc0NoYW5nZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBhY3RpdmVEYXRhR3JpZChhY3RpdmUgPSB0cnVlKSB7XHJcbiAgICAgICAgY29uc3QgZ3JpZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZi1kYXRhZ3JpZC5kYXRhZ3JpZC1hY3RpdmUnKTtcclxuICAgICAgICBpZiAoZ3JpZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGdyaWRzLmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcjIucmVtb3ZlQ2xhc3MobiwgdGhpcy5fYWN0aXZlX2RhdGFncmlkX2Nscyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyMi5hZGRDbGFzcyh0aGlzLmRnQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQsIHRoaXMuX2FjdGl2ZV9kYXRhZ3JpZF9jbHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgb25EYXRhZ3JpZENvbnRhaW5lckZvY3VzKCRldmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZURhdGFHcmlkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIHNldFNoYWRvd0NvbHVtbkZvckZhc3RNb2RlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmZhc3QpIHtcclxuICAgICAgICAgICAgY29uc3QgZml4ZWRMZWZ0ID0gdGhpcy5mbGF0Q29sdW1ucy5maWx0ZXIobiA9PiBuLmZpeGVkID09PSAnbGVmdCcpO1xyXG4gICAgICAgICAgICBjb25zdCBmaXhlZFJpZ2h0ID0gdGhpcy5mbGF0Q29sdW1ucy5maWx0ZXIobiA9PiBuLmZpeGVkID09PSAncmlnaHQnKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmaXhlZExlZnQgJiYgZml4ZWRMZWZ0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGxlZnRXaWR0aFRvdGFsID0gMDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNob3dDaGVja2JveCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnRXaWR0aFRvdGFsICs9IDM2O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hvd0xpbmVOdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0V2lkdGhUb3RhbCArPSB0aGlzLmxpbmVOdW1iZXJXaWR0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZpeGVkTGVmdC5mb3JFYWNoKChuLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnRXaWR0aFRvdGFsICs9IGluZGV4ID8gZml4ZWRMZWZ0W2luZGV4IC0gMV0ud2lkdGggOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIG4ubGVmdCA9IGxlZnRXaWR0aFRvdGFsO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZml4ZWRMZWZ0W2ZpeGVkTGVmdC5sZW5ndGggLSAxXVsnbGVmdFNoYWRvd0NvbCddID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRmcy5nZXRDb2x1bW4oZml4ZWRMZWZ0W2ZpeGVkTGVmdC5sZW5ndGggLSAxXS5maWVsZClbJ2xlZnRTaGFkb3dDb2wnXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChmaXhlZFJpZ2h0ICYmIGZpeGVkUmlnaHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBmaXhlZFJpZ2h0WzBdWydyaWdodFNoYWRvd0NvbCddID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGxldCByaWdodFdpZHRoVG90YWwgPSBmaXhlZFJpZ2h0LnJlZHVjZSgociwgYykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByICsgYy53aWR0aDtcclxuICAgICAgICAgICAgICAgIH0sIDApO1xyXG5cclxuICAgICAgICAgICAgICAgIGZpeGVkUmlnaHQuZm9yRWFjaCgobiwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByaWdodFdpZHRoVG90YWwgLT0gbi53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICBuLnJpZ2h0ID0gcmlnaHRXaWR0aFRvdGFsO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5kZnMuZ2V0Q29sdW1uKGZpeGVkUmlnaHRbMF0uZmllbGQpWydyaWdodFNoYWRvd0NvbCddID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDljZXlhYPlr7npvZDmlrnlvI/moLflvI/liqjmgIHnlJ/miJBcclxuICAgIHByaXZhdGUgc2V0Q2VsbFN0eWxlKCkge1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuZmxhdENvbHVtbnMgfHwgIXRoaXMuZmxhdENvbHVtbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNzc2FyciA9IFtdO1xyXG5cclxuICAgICAgICBjb25zdCAgdmVydGljYWxBbGlnbiA9IChjb2x1bW4pID0+IHtcclxuICAgICAgICAgICAgbGV0IHZhID0gJ2NlbnRlcic7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoY29sdW1uLnZhbGlnbikge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndG9wJzpcclxuICAgICAgICAgICAgICAgICAgICB2YSA9ICdmbGV4LXN0YXJ0JztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdmEgPSAnZmxleC1lbmQnO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB2YSA9ICdjZW50ZXInO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2YTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBob3Jpem9udGFsQWxpZ24gPSAoY29sdW1uKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBoYSA9ICdmbGV4LXN0YXJ0JztcclxuICAgICAgICAgICAgaWYgKGNvbHVtbi5hbGlnbiA9PT0gJ3JpZ2h0Jykge1xyXG4gICAgICAgICAgICAgICAgaGEgPSAnZmxleC1lbmQnO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbHVtbi5hbGlnbiA9PT0gJ2NlbnRlcicpIHtcclxuICAgICAgICAgICAgICAgIGhhID0gJ2NlbnRlcic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGhhO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuc2V0U2hhZG93Q29sdW1uRm9yRmFzdE1vZGUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5mbGF0Q29sdW1ucy5mb3JFYWNoKGNvbCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNzcyA9IGAke3RoaXMuY3VzdG9tU3R5bGVLZXkoKX0gLmNlbGwtdGV4dC1hbGlnbl9fJHtjb2wuZmllbGR9IHthbGlnbi1pdGVtczogJHt2ZXJ0aWNhbEFsaWduKGNvbCl9LCBqdXN0aWZ5LWNvbnRlbnQ6ICR7aG9yaXpvbnRhbEFsaWduKGNvbCl9fWA7XHJcbiAgICAgICAgICAgIGNzc2Fyci5wdXNoKGNzcyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5mYXN0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sLmZpeGVkID09PSAnbGVmdCcgfHwgY29sLmZpeGVkID09PSAncmlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpeGVkID0gYCR7dGhpcy5jdXN0b21TdHlsZUtleSgpfSAuZi1kYXRhZ3JpZC1mYXN0X19maXhlZC0ke2NvbC5maXhlZH1bZmllbGQ9XCIke2NvbC5maWVsZH1cIl17YDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sLmZpeGVkID09PSAnbGVmdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZml4ZWQgKz0gYGxlZnQ6ICR7Y29sLmxlZnR9cHh9YDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2wuZml4ZWQgPT09ICdyaWdodCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZml4ZWQgKz0gYHJpZ2h0OiAke2NvbC5yaWdodH1weH1gO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY3NzYXJyLnB1c2goZml4ZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZGdzLmFwcGVuZENzc1J1bGVzKGNzc2Fycik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVGaXhlZENvbHVtbkNzc0ZvckZhc3RNb2RlKGNvbDogRGF0YUNvbHVtbikge1xyXG4gICAgICAgIGlmICh0aGlzLmZhc3QpIHtcclxuICAgICAgICAgICAgLy8gdXBkYXRlIGNzcy5cclxuICAgICAgICAgICAgY29uc3QgY29sSW5kZXggPSB0aGlzLmZsYXRDb2x1bW5zLmZpbmRJbmRleChuID0+IG4uZmllbGQgPT09IGNvbC5maWVsZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRDb2x1bW4gPSB0aGlzLmZsYXRDb2x1bW5zW2NvbEluZGV4ICsgMV07XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U2hhZG93Q29sdW1uRm9yRmFzdE1vZGUoKTtcclxuICAgICAgICAgICAgaWYgKG5leHRDb2x1bW4gJiYgbmV4dENvbHVtbi5maXhlZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcnVsZU5hbWUgPSAgYCR7dGhpcy5jdXN0b21TdHlsZUtleSgpfSAuZi1kYXRhZ3JpZC1mYXN0X19maXhlZC0ke25leHRDb2x1bW4uZml4ZWR9W2ZpZWxkPVwiJHtuZXh0Q29sdW1uLmZpZWxkfVwiXWA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdHlsZWNzcyA9IHJ1bGVOYW1lICsgJ3snICsgbmV4dENvbHVtbi5maXhlZCArICc6JyArIG5leHRDb2x1bW5bbmV4dENvbHVtbi5maXhlZF0gKyAncHh9JztcclxuICAgICAgICAgICAgICAgIHRoaXMuZGdzLmFwcGVuZENzc1J1bGVzKFtzdHlsZWNzc10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cGFuZEdyb3VwUm93KGdyb3VwUm93SW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuZGdzLnRvZ2dsZUdyb3VwUm93JC5lbWl0KHsgZXhwYW5kOiB0cnVlLCBncm91cFJvd0luZGV4IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbGxhcHNlR3JvdXBSb3coZ3JvdXBSb3dJbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5kZ3MudG9nZ2xlR3JvdXBSb3ckLmVtaXQoeyBleHBhbmQ6IGZhbHNlLCBncm91cFJvd0luZGV4IH0pO1xyXG4gICAgfVxyXG4gICBcclxuXHJcbiAgICBleHBhbmRBbGxHcm91cFJvd3MoKSB7XHJcbiAgICAgICAgdGhpcy5kZ3MudG9nZ2xlQWxsR3JvdXBSb3dzJC5lbWl0KHsgZXhwYW5kOiB0cnVlIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbGxhcHNlQWxsR3JvdXBSb3dzKCkge1xyXG4gICAgICAgIHRoaXMuZGdzLnRvZ2dsZUFsbEdyb3VwUm93cyQuZW1pdCh7IGV4cGFuZDogZmFsc2UgfSk7XHJcbiAgICB9XHJcbn1cclxuIl19