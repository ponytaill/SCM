/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/checkbox/checkbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Injector, EventEmitter, Output } from '@angular/core';
import { QueryCondition } from '../../entity/querycondition';
import { SolutionService } from '../../service/solution.service';
export class CheckBoxComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        this.solutionService = this.injector.get(SolutionService);
    }
    /**
     * @param {?} nr
     * @return {?}
     */
    set item(nr) {
        this._item = nr;
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.checkValue = ((/** @type {?} */ (this.item.value))).getOriginalValue();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.checkValue = this.item.value.getOriginalValue();
        this.controlData = (/** @type {?} */ (this.item.control));
        this.testId = this.solutionService.getGuid();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    valueChanged(event) {
        //选中时返回[true], 从选中变为未选中时返回[]
        if (event.length) {
            this._item.value.setOriginalValue(event);
        }
        else {
            this._item.value.setOriginalValue([false]);
        }
        this.conditionChange.emit();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
}
CheckBoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-checkbox',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group qcheckbox-group\" style=\"overflow: auto;white-space: nowrap\">\r\n        <label class=\"col-form-label mr-0\" style=\"width:auto;\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n        </label>\r\n        <!-- <div class=\"farris-input-wrap\">\r\n            <div class=\"custom-control custom-checkbox\">\r\n                <input class=\"custom-control-input\" type=\"checkbox\" id=\"item.fieldCode\" (change)=\"valueChange($event.target.checked)\" [(ngModel)]=\"item.value['value']\"/>\r\n                <label class=\"custom-control-label\" for=\"item.fieldCode\">{{item.fieldName}}</label>\r\n            </div>\r\n          <div class=\"farris-feedback valid-feedback\"></div>\r\n        </div> -->\r\n        <farris-checkboxgroup\r\n            [isStringValue]=\"controlData.isStringValue\" \r\n            [data]=\"controlData.data\" \r\n            [horizontal]=\"controlData.horizontal\" \r\n            [disable]=\"item.readonly\" \r\n            [(ngModel)]=\"checkValue\"\r\n            (changeValue)=\"valueChanged($event)\"\r\n            id=\"{{testId}}\"\r\n        ></farris-checkboxgroup>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
CheckBoxComponent.ctorParameters = () => [
    { type: Injector }
];
CheckBoxComponent.propDecorators = {
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};
if (false) {
    /** @type {?} */
    CheckBoxComponent.prototype._item;
    /** @type {?} */
    CheckBoxComponent.prototype.checkValue;
    /** @type {?} */
    CheckBoxComponent.prototype.controlData;
    /** @type {?} */
    CheckBoxComponent.prototype.testId;
    /**
     * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
     * @type {?}
     */
    CheckBoxComponent.prototype.changeFields;
    /** @type {?} */
    CheckBoxComponent.prototype.conditionChange;
    /** @type {?} */
    CheckBoxComponent.prototype.solutionService;
    /**
     * @type {?}
     * @private
     */
    CheckBoxComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb24vIiwic291cmNlcyI6WyJsaWIvY29udHJvbGNvbXBvbmVudC9jaGVja2JveC9jaGVja2JveC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxRQUFRLEVBQTRCLFlBQVksRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbEgsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzdELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQVVqRSxNQUFNLE9BQU8saUJBQWlCOzs7O0lBd0IxQixZQUFvQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVOzs7O1FBTjdCLGlCQUFZLEdBQWtCLEVBQUUsQ0FBQztRQUVmLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUs1RCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzlELENBQUM7Ozs7O0lBckJELElBQ0ksSUFBSSxDQUFDLEVBQWtCO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7Ozs7SUFFRCxJQUFJLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQzs7Ozs7SUFnQkQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLElBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsV0FBVyxFQUFFOztrQkFDbEcsUUFBUSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSTs7OztZQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFDO1lBQ2pHLElBQUcsUUFBUSxFQUFDO2dCQUNSLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxtQkFBQSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBaUIsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7YUFDM0U7U0FDSjtJQUNMLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ0osSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3JELElBQUksQ0FBQyxXQUFXLEdBQUcsbUJBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQW1CLENBQUM7UUFDeEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pELENBQUM7Ozs7O0lBRUQsWUFBWSxDQUFDLEtBQVk7UUFDckIsNEJBQTRCO1FBQzVCLElBQUcsS0FBSyxDQUFDLE1BQU0sRUFBQztZQUNaLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzVDO2FBQUk7WUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDOUM7UUFDRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBRUQscUJBQXFCLENBQUMsS0FBb0I7UUFDdEMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdELENBQUM7OztZQTVESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHVCQUF1QjtnQkFDakMsZ3pDQUF3QzthQUMzQzs7OztZQVZrQyxRQUFROzs7bUJBaUJ0QyxLQUFLOzJCQWFMLEtBQUs7OEJBRUwsTUFBTSxTQUFDLGlCQUFpQjs7OztJQWxCekIsa0NBQXNCOztJQUN0Qix1Q0FBa0I7O0lBQ2xCLHdDQUE2Qjs7SUFTN0IsbUNBQWM7Ozs7O0lBS2QseUNBQTBDOztJQUUxQyw0Q0FBZ0U7O0lBRWhFLDRDQUFpQzs7Ozs7SUFFckIscUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBJbmplY3RvciwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBFdmVudEVtaXR0ZXIsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uIH0gZnJvbSAnLi4vLi4vZW50aXR5L3F1ZXJ5Y29uZGl0aW9uJztcclxuaW1wb3J0IHsgU29sdXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZS9zb2x1dGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2hlY2tCb3hWYWx1ZSB9IGZyb20gJy4uLy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS9jaGVja2JveC12YWx1ZSc7XHJcbmltcG9ydCB7IENoZWNrQm94Q29udHJvbCB9IGZyb20gJy4uLy4uL2VudGl0eS9jb250cm9sdHlwZS9jaGVja2JveC9jaGVja2JveC1jb250cm9sJztcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnYXBwLXNvbHV0aW9uLWNoZWNrYm94JyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9jaGVja2JveC5jb21wb25lbnQuaHRtbCcsXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgQ2hlY2tCb3hDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XHJcbiAgIFxyXG4gICAgX2l0ZW06IFF1ZXJ5Q29uZGl0aW9uO1xyXG4gICAgY2hlY2tWYWx1ZTogYW55W107XHJcbiAgICBjb250cm9sRGF0YTogQ2hlY2tCb3hDb250cm9sO1xyXG4gICAgQElucHV0KCkgXHJcbiAgICBzZXQgaXRlbShucjogUXVlcnlDb25kaXRpb24pe1xyXG4gICAgICAgIHRoaXMuX2l0ZW0gPSBucjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXRlbSgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVtO1xyXG4gICAgfVxyXG4gICAgdGVzdElkOnN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIOafkOS4quWtl+auteWPkeeUn+WAvOWPmOWMluS6i+S7tuaXtu+8jOmcgOimgeWQjOatpea4heepuueahOWtl+aute+8jOWPr+iDveS4jeaYr+W9k+WJjeWtl+autVxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBjaGFuZ2VGaWVsZHM6IEFycmF5PHN0cmluZz4gPSBbXTtcclxuXHJcbiAgICBAT3V0cHV0KCdjb25kaXRpb25DaGFuZ2UnKSBjb25kaXRpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgc29sdXRpb25TZXJ2aWNlOiBTb2x1dGlvblNlcnZpY2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3Ipe1xyXG4gICAgICAgIHRoaXMuc29sdXRpb25TZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoU29sdXRpb25TZXJ2aWNlKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICAgICAgaWYoY2hhbmdlc1snY2hhbmdlRmllbGRzJ10gJiYgY2hhbmdlc1snY2hhbmdlRmllbGRzJ10uY3VycmVudFZhbHVlICYmICFjaGFuZ2VzWydjaGFuZ2VGaWVsZHMnXS5maXJzdENoYW5nZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpc0NoYW5nZSA9IGNoYW5nZXNbJ2NoYW5nZUZpZWxkcyddLmN1cnJlbnRWYWx1ZS5zb21lKGZpZWxkID0+IGZpZWxkID09IHRoaXMuaXRlbS5maWVsZENvZGUpO1xyXG4gICAgICAgICAgICBpZihpc0NoYW5nZSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrVmFsdWUgPSAodGhpcy5pdGVtLnZhbHVlIGFzIENoZWNrQm94VmFsdWUpLmdldE9yaWdpbmFsVmFsdWUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNoZWNrVmFsdWUgPSB0aGlzLml0ZW0udmFsdWUuZ2V0T3JpZ2luYWxWYWx1ZSgpO1xyXG4gICAgICAgIHRoaXMuY29udHJvbERhdGEgPSB0aGlzLml0ZW0uY29udHJvbCBhcyBDaGVja0JveENvbnRyb2w7XHJcbiAgICAgICAgdGhpcy50ZXN0SWQgPSB0aGlzLnNvbHV0aW9uU2VydmljZS5nZXRHdWlkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFsdWVDaGFuZ2VkKGV2ZW50OiBhbnlbXSl7XHJcbiAgICAgICAgLy/pgInkuK3ml7bov5Tlm55bdHJ1ZV0sIOS7jumAieS4reWPmOS4uuacqumAieS4reaXtui/lOWbnltdXHJcbiAgICAgICAgaWYoZXZlbnQubGVuZ3RoKXtcclxuICAgICAgICAgICAgdGhpcy5faXRlbS52YWx1ZS5zZXRPcmlnaW5hbFZhbHVlKGV2ZW50KTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgdGhpcy5faXRlbS52YWx1ZS5zZXRPcmlnaW5hbFZhbHVlKFtmYWxzZV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbmRpdGlvbkNoYW5nZS5lbWl0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29uZGl0aW9uSXRlbVRpdGxlKGZpZWxkOlF1ZXJ5Q29uZGl0aW9uKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5zb2x1dGlvblNlcnZpY2UuZ2V0Q29uZGl0aW9uSXRlbVRpdGxlKGZpZWxkKTtcclxuICAgIH1cclxufSJdfQ==