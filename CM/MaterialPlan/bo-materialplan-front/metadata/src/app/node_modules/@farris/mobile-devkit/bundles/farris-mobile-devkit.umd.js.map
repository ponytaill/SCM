{"version":3,"file":"farris-mobile-devkit.umd.js","sources":["../../../node_modules/tslib/tslib.es6.js","ng://@farris/mobile-devkit/lib/core/types.ts","ng://@farris/mobile-devkit/lib/core/di/types.ts","ng://@farris/mobile-devkit/lib/core/di/consts.ts","ng://@farris/mobile-devkit/lib/core/di/utils.ts","ng://@farris/mobile-devkit/lib/core/di/injectable_def.ts","ng://@farris/mobile-devkit/lib/core/di/injection_token.ts","ng://@farris/mobile-devkit/lib/core/di/injector.ts","ng://@farris/mobile-devkit/lib/core/di/null_injector.ts","ng://@farris/mobile-devkit/lib/core/di/forward_ref.ts","ng://@farris/mobile-devkit/lib/core/di/static_injector.ts","ng://@farris/mobile-devkit/lib/core/di/injector_creator.ts","ng://@farris/mobile-devkit/lib/core/metadata/decorator.ts","ng://@farris/mobile-devkit/lib/core/metadata/metadata_util.ts","ng://@farris/mobile-devkit/lib/http/types.ts","ng://@farris/mobile-devkit/lib/http/http-util.ts","ng://@farris/mobile-devkit/lib/http/http-client.ts","ng://@farris/mobile-devkit/lib/http/index.ts","ng://@farris/mobile-devkit/lib/changeset/types.ts","ng://@farris/mobile-devkit/lib/changeset/change_set.ts","ng://@farris/mobile-devkit/lib/entity/entity-path/data_path_node.ts","ng://@farris/mobile-devkit/lib/entity/entity-path/data_path.ts","ng://@farris/mobile-devkit/lib/entity/entity-type-info/data_prop_info.ts","ng://@farris/mobile-devkit/lib/entity/metadata/prop_metadata_primitive.ts","ng://@farris/mobile-devkit/lib/utils/string_uitl.ts","ng://@farris/mobile-devkit/lib/utils/number_uitl.ts","ng://@farris/mobile-devkit/lib/utils/bool_util.ts","ng://@farris/mobile-devkit/lib/utils/enum_util.ts","ng://@farris/mobile-devkit/lib/utils/date_util.ts","ng://@farris/mobile-devkit/lib/utils/array_util.ts","ng://@farris/mobile-devkit/lib/utils/object_util.ts","ng://@farris/mobile-devkit/lib/utils/data-path/binding_path_converter.ts","ng://@farris/mobile-devkit/lib/utils/data-path/binding_path_comparer.ts","ng://@farris/mobile-devkit/lib/utils/data-path/binding_path_traverser.ts","ng://@farris/mobile-devkit/lib/binding-data/changes.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_property.ts","ng://@farris/mobile-devkit/lib/binding-data/property_util.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_object.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_list_factory.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_object_factory.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_list.ts","ng://@farris/mobile-devkit/lib/binding-data/entity_util.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_data.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_data_factory.ts","ng://@farris/mobile-devkit/lib/utils/data-path/entity_path_converter.ts","ng://@farris/mobile-devkit/lib/utils/data-path/entity_path_comparer.ts","ng://@farris/mobile-devkit/lib/utils/data-path/form_path_converter.ts","ng://@farris/mobile-devkit/lib/utils/data-path/index.ts","ng://@farris/mobile-devkit/lib/utils/data-path-util.ts","ng://@farris/mobile-devkit/lib/utils/guid.ts","ng://@farris/mobile-devkit/lib/utils/is-observable.ts","ng://@farris/mobile-devkit/lib/entity/metadata/prop_meatadata_object.ts","ng://@farris/mobile-devkit/lib/entity/metadata/prop_metadata_dynamic.ts","ng://@farris/mobile-devkit/lib/entity/metadata/prop_metadata_list.ts","ng://@farris/mobile-devkit/lib/entity/metadata/field_metadata_util.ts","ng://@farris/mobile-devkit/lib/entity/metadata/entity_metadata_util.ts","ng://@farris/mobile-devkit/lib/entity/entity-type-info/data_type_info.ts","ng://@farris/mobile-devkit/lib/entity/entity-path/data_path_creator.ts","ng://@farris/mobile-devkit/lib/entity/entity-path/index.ts","ng://@farris/mobile-devkit/lib/entity/types.ts","ng://@farris/mobile-devkit/lib/entity/entity_creator.ts","ng://@farris/mobile-devkit/lib/entity/entity_list.ts","ng://@farris/mobile-devkit/lib/entity/entity_factory.ts","ng://@farris/mobile-devkit/lib/entity/entity.ts","ng://@farris/mobile-devkit/lib/entity/dynamic_entity.ts","ng://@farris/mobile-devkit/lib/repository/decorators.ts","ng://@farris/mobile-devkit/lib/repository/entity_collection.ts","ng://@farris/mobile-devkit/lib/repository/entity_manager.ts","ng://@farris/mobile-devkit/lib/repository/pagination_manager.ts","ng://@farris/mobile-devkit/lib/repository/data_change_history.ts","ng://@farris/mobile-devkit/lib/repository/repository.ts","ng://@farris/mobile-devkit/lib/repository/default_repository.ts","ng://@farris/mobile-devkit/lib/command/decorators.ts","ng://@farris/mobile-devkit/lib/command/flow/task_node.ts","ng://@farris/mobile-devkit/lib/variable/variable_parser.ts","ng://@farris/mobile-devkit/lib/app/types.ts","ng://@farris/mobile-devkit/lib/app/binding_data_manager.ts","ng://@farris/mobile-devkit/lib/app/repository_mananger.ts","ng://@farris/mobile-devkit/lib/app/view_model_contex_manager.ts","ng://@farris/mobile-devkit/lib/context/context.ts","ng://@farris/mobile-devkit/lib/app/app_context.ts","ng://@farris/mobile-devkit/lib/view-model/view_model_context.ts","ng://@farris/mobile-devkit/lib/ui-state/decorators.ts","ng://@farris/mobile-devkit/lib/ui-state/uistate_metadata_util.ts","ng://@farris/mobile-devkit/lib/ui-state/ui_state.ts","ng://@farris/mobile-devkit/lib/state-machine/types.ts","ng://@farris/mobile-devkit/lib/state-machine/metadata/state_metadata.ts","ng://@farris/mobile-devkit/lib/state-machine/metadata/render_state_metadata.ts","ng://@farris/mobile-devkit/lib/state-machine/metadata/action_metadata.ts","ng://@farris/mobile-devkit/lib/state-machine/state_machine_context.ts","ng://@farris/mobile-devkit/lib/state-machine/state_machine_watcher.ts","ng://@farris/mobile-devkit/lib/state-machine/state_machine.ts","ng://@farris/mobile-devkit/lib/form/types.ts","ng://@farris/mobile-devkit/lib/form/binding_value_converter.ts","ng://@farris/mobile-devkit/lib/form/binding_value_accessor.ts","ng://@farris/mobile-devkit/lib/form/decorators.ts","ng://@farris/mobile-devkit/lib/validator/validator.ts","ng://@farris/mobile-devkit/lib/form/form_control.ts","ng://@farris/mobile-devkit/lib/form/form.ts","ng://@farris/mobile-devkit/lib/view-model/decorators.ts","ng://@farris/mobile-devkit/lib/view-model/view_model.ts","ng://@farris/mobile-devkit/lib/view-model/types.ts","ng://@farris/mobile-devkit/lib/app/app_eventBus.ts","ng://@farris/mobile-devkit/lib/app/providers.ts","ng://@farris/mobile-devkit/lib/app/app.ts","ng://@farris/mobile-devkit/lib/variable/parse_util.ts","ng://@farris/mobile-devkit/lib/variable/data_variable_parser.ts","ng://@farris/mobile-devkit/lib/variable/ui_state_variable_parser.ts","ng://@farris/mobile-devkit/lib/variable/state_machine_variable_parser.ts","ng://@farris/mobile-devkit/lib/variable/command_variable_parser.ts","ng://@farris/mobile-devkit/lib/variable/variable_parse_service.ts","ng://@farris/mobile-devkit/lib/variable/providers.ts","ng://@farris/mobile-devkit/lib/command/flow/task_link.ts","ng://@farris/mobile-devkit/lib/command/flow/task_flow.ts","ng://@farris/mobile-devkit/lib/command/command_context.ts","ng://@farris/mobile-devkit/lib/command/command_handler.ts","ng://@farris/mobile-devkit/lib/command/command_handler_registry.ts","ng://@farris/mobile-devkit/lib/command/command_handler_extender.ts","ng://@farris/mobile-devkit/lib/command/command_handler_extender_registry.ts","ng://@farris/mobile-devkit/lib/command/command_handler_factory.ts","ng://@farris/mobile-devkit/lib/command/command_bus.ts","ng://@farris/mobile-devkit/lib/command/providers.ts","ng://@farris/mobile-devkit/lib/exception/tokens.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","\r\nexport interface Type<T> extends Function {\r\n  new (...args: any[]): T;\r\n}\r\n\r\nexport const Type = Function;\r\n\r\n\r\n\r\n// export type ClassType = new (...args: any[]) => any;\r\n\r\nexport interface Pagination {\r\n    pageSize: number;\r\n    pageIndex: number;\r\n    total: number;\r\n}\r\n\r\nexport interface Pagination {\r\n    pageSize: number;\r\n    pageIndex: number;\r\n    total: number;\r\n}\r\n\r\n\r\nexport interface ResultData {\r\n    data?: any[];\r\n    pagination?: Pagination;\r\n}\r\n\r\nexport enum DataChangeType { Add, Delete }\r\n\r\nexport interface DataChange {\r\n    /**\r\n     * 变更路径，主要针对带从表的情况\r\n     */\r\n    fpath?: string;\r\n    dataId: string;\r\n    changeType: DataChangeType;\r\n    [prop: string]: any;\r\n}\r\n","import { Type } from '../types';\r\n\r\nexport function isType(v: any): v is Type<any> {\r\n  return typeof v === 'function';\r\n}\r\n\r\n\r\n\r\nexport interface AbstractType<T> extends Function {\r\n  prototype: T;\r\n}\r\n\r\n\r\nexport enum InjectFlags {\r\n\r\n  Default = 0b0000,\r\n\r\n  Self = 0b0001,\r\n\r\n  SkipSelf = 0b0010,\r\n\r\n  Optional = 0b0100,\r\n}\r\n\r\n\r\nexport const enum OptionFlags {\r\n  Optional = 1 << 0,\r\n  CheckSelf = 1 << 1,\r\n  CheckParent = 1 << 2,\r\n  Default = CheckSelf | CheckParent\r\n}\r\n\r\n\r\nexport interface Record {\r\n\r\n  fn: Function;\r\n\r\n  useNew: boolean;\r\n\r\n  deps: DependencyRecord[];\r\n\r\n  value: any;\r\n\r\n}\r\n\r\n\r\nexport interface DependencyRecord {\r\n\r\n  token: any;\r\n\r\n  options: number;\r\n}\r\n\r\n\r\n","export const EMPTY = [] as any[];\r\n\r\nexport const IDENT = function<T>(value: T): T {\r\n  return value;\r\n};\r\n\r\nexport const CIRCULAR = IDENT;\r\n\r\nexport const MULTI_PROVIDER_FN = function(): any[] {\r\n  return Array.prototype.slice.call(arguments);\r\n};\r\n\r\nexport const NEW_LINE = /\\n/gm;\r\n\r\nexport const NO_NEW_LINE = 'ɵ';\r\n\r\nconst _THROW_IF_NOT_FOUND = {};\r\n\r\nexport const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\r\n\r\nexport const NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\r\n","import { NO_NEW_LINE, NEW_LINE } from './consts';\r\n\r\nexport function stringify(token: any): string {\r\n  if (typeof token === 'string') {\r\n    return token;\r\n  }\r\n\r\n  if (Array.isArray(token)) {\r\n    return '[' + token.map(stringify).join(', ') + ']';\r\n  }\r\n\r\n  if (token == null) {\r\n    return '' + token;\r\n  }\r\n\r\n  if (token.overriddenName) {\r\n    return `${token.overriddenName}`;\r\n  }\r\n\r\n  if (token.name) {\r\n    return `${token.name}`;\r\n  }\r\n\r\n  const res = token.toString();\r\n\r\n  if (res == null) {\r\n    return '' + res;\r\n  }\r\n\r\n  const newLineIndex = res.indexOf('\\n');\r\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\r\n}\r\n\r\n\r\nexport function getClosureSafeProperty<T>(objWithPropertyToExtract: T): string {\r\n  for (const key in objWithPropertyToExtract) {\r\n    if (objWithPropertyToExtract[key] === getClosureSafeProperty as any) {\r\n      return key;\r\n    }\r\n  }\r\n  throw Error('Could not find renamed property on target object.');\r\n}\r\n\r\n\r\nexport function formatError(\r\n  text: string,\r\n  obj: any,\r\n  injectorErrorName: string,\r\n  source: string|null = null\r\n): string {\r\n  text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\r\n  let context = stringify(obj);\r\n  if (Array.isArray(obj)) {\r\n    context = obj.map(stringify).join(' -> ');\r\n  } else if (typeof obj === 'object') {\r\n    const parts = [] as string[];\r\n    for (const key in obj) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        const value = obj[key];\r\n        parts.push(\r\n            key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\r\n      }\r\n    }\r\n    context = `{${parts.join(', ')}}`;\r\n  }\r\n  return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${\r\n      text.replace(NEW_LINE, '\\n  ')}`;\r\n}\r\n\r\n\r\nexport function staticError(text: string, obj: any): Error {\r\n  return new Error(formatError(text, obj, 'StaticInjectorError'));\r\n}\r\n","import { Type } from '../types';\r\nimport { getClosureSafeProperty } from './utils';\r\n\r\n\r\nexport interface InjectorType<T> extends Type<T> {\r\n  ɵinj: never;\r\n}\r\n\r\nexport interface ɵɵInjectableDef<T> {\r\n  providedIn: InjectorType<any>|'root'|'platform'|'any'|null;\r\n  token: unknown;\r\n  factory: (t?: Type<any>) => T;\r\n  value: T|undefined;\r\n}\r\n\r\n\r\nexport function ɵɵdefineInjectable<T>(opts: {\r\n  token: unknown,\r\n  providedIn?: Type<any>|'root'|'platform'|'any'|null, factory: () => T,\r\n}): never {\r\n  return ({\r\n    token: opts.token,\r\n    providedIn: opts.providedIn as any || null,\r\n    factory: opts.factory,\r\n    value: undefined,\r\n  } as ɵɵInjectableDef<T>) as never;\r\n}\r\n\r\n\r\nexport const NG_PROV_DEF       = getClosureSafeProperty({ɵprov: getClosureSafeProperty});\r\nexport const NG_INJ_DEF        = getClosureSafeProperty({ɵinj: getClosureSafeProperty});\r\nexport const NG_INJECTABLE_DEF = getClosureSafeProperty({ngInjectableDef: getClosureSafeProperty});\r\n\r\nexport function getOwnDefinition<T>(type: any, def: ɵɵInjectableDef<T>): ɵɵInjectableDef<T>|null {\r\n  return def && def.token === type ? def : null;\r\n}\r\n\r\nexport function getInjectableDef<T>(type: any): ɵɵInjectableDef<T>|null {\r\n  return getOwnDefinition(type, type[NG_PROV_DEF]) ||\r\n      getOwnDefinition(type, type[NG_INJECTABLE_DEF]);\r\n}\r\n","import { Type } from '../types';\r\nimport { ɵɵdefineInjectable } from './injectable_def';\r\n\r\n\r\nexport class InjectionToken<T> {\r\n\r\n  readonly ngMetadataName = 'InjectionToken';\r\n\r\n  readonly ɵprov: never|undefined;\r\n\r\n  constructor(\r\n    protected _desc: string,\r\n    options?: { providedIn?: Type<any>|'root'|'platform'|'any'|null, factory: () => T }\r\n  ) {\r\n\r\n    this.ɵprov = undefined;\r\n    if (typeof options === 'number') {\r\n      (this as any).__NG_ELEMENT_ID__ = options;\r\n    } else if (options !== undefined) {\r\n      this.ɵprov = ɵɵdefineInjectable({\r\n        token: this,\r\n        providedIn: options.providedIn || 'root',\r\n        factory: options.factory,\r\n      });\r\n    }\r\n  }\r\n\r\n  toString(): string {\r\n    return `InjectionToken ${this._desc}`;\r\n  }\r\n}\r\n\r\nexport function createInjectionToken(token: any): InjectionToken<any> {\r\n  return new InjectionToken<any>(token);\r\n}\r\n","import { Type } from '../types';\r\nimport { AbstractType, InjectFlags } from './types';\r\nimport { InjectionToken } from './injection_token';\r\n\r\n/**\r\n * 注入器抽象类\r\n */\r\nexport abstract class Injector {\r\n\r\n  abstract get<T>(\r\n      token: Type<T>|InjectionToken<T>|AbstractType<T>,\r\n      notFoundValue?: T,\r\n      flags?: InjectFlags\r\n  ): T;\r\n\r\n  abstract get(token: any, notFoundValue?: any): any;\r\n\r\n}\r\n","import { stringify } from './utils';\r\nimport { THROW_IF_NOT_FOUND } from './consts';\r\nimport { Injector } from './injector';\r\n\r\n\r\nexport class NullInjector implements Injector {\r\n\r\n  get(token: any, notFoundValue: any = THROW_IF_NOT_FOUND): any {\r\n    if (notFoundValue === THROW_IF_NOT_FOUND) {\r\n      const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\r\n      error.name = 'NullInjectorError';\r\n      throw error;\r\n    }\r\n    return notFoundValue;\r\n  }\r\n\r\n}\r\n\r\n\r\nexport const NULL_INJECTOR: Injector = new NullInjector();\r\n","import { Type } from '../types';\r\nimport { stringify, getClosureSafeProperty } from './utils';\r\n\r\nconst __forward_ref__ = getClosureSafeProperty({__forward_ref__: getClosureSafeProperty});\r\n\r\nexport function resolveForwardRef<T>(type: T): T {\r\n  return isForwardRef(type) ? type() : type;\r\n}\r\n\r\nexport interface ForwardRefFn {\r\n  (): any;\r\n}\r\n\r\nexport function forwardRef(forwardRefFn: ForwardRefFn): Type<any> {\r\n  (forwardRefFn as any).__forward_ref__ = forwardRef;\r\n  (forwardRefFn as any).toString = function() {\r\n    return stringify(this());\r\n  };\r\n  return (forwardRefFn as any as Type<any>);\r\n}\r\n\r\nexport function isForwardRef(fn: any): fn is() => any {\r\n  return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\r\n      fn.__forward_ref__ === forwardRef;\r\n}\r\n","import { Type } from '../types';\r\nimport { InjectFlags, OptionFlags, Record, DependencyRecord } from './types';\r\nimport { IDENT, EMPTY, CIRCULAR, MULTI_PROVIDER_FN, NO_NEW_LINE, NEW_LINE, NG_TEMP_TOKEN_PATH } from './consts';\r\nimport { stringify, getClosureSafeProperty, formatError, staticError } from './utils';\r\nimport { Injector } from './injector';\r\nimport { NULL_INJECTOR, NullInjector} from './null_injector';\r\nimport {\r\n  ValueProvider, StaticClassProvider, ConstructorProvider,  ExistingProvider, FactoryProvider,\r\n  StaticProvider, SupportedProvider,\r\n} from './providers';\r\nimport { InjectionToken } from './injection_token';\r\nimport { getInjectableDef } from './injectable_def';\r\nimport { resolveForwardRef } from './forward_ref';\r\nimport { THROW_IF_NOT_FOUND, } from './consts';\r\n\r\n\r\nexport const INJECTOR = new InjectionToken<Injector>('INJECTOR', -1 as any);\r\n\r\nexport const USE_VALUE =  getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\r\n\r\nlet _currentInjector: Injector|undefined|null = undefined;\r\n\r\nexport function setCurrentInjector(injector: Injector|null|undefined): Injector|undefined|null {\r\n  const former = _currentInjector;\r\n  _currentInjector = injector;\r\n  return former;\r\n}\r\n\r\n\r\nexport class StaticInjector implements Injector {\r\n\r\n  readonly parent: Injector;\r\n\r\n  readonly source: string|null;\r\n\r\n  readonly scope: string|null;\r\n\r\n  private _records: Map<any, Record|null>;\r\n\r\n  constructor(\r\n    providers: StaticProvider[],\r\n    parent: Injector = NULL_INJECTOR,\r\n    source: string|null = null\r\n  ) {\r\n    parent = parent ? parent : NULL_INJECTOR;\r\n    this.parent = parent;\r\n    this.source = source;\r\n    const records = this._records = new Map<any, Record>();\r\n\r\n    records.set(Injector, {token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false} as Record);\r\n    records.set(INJECTOR, {token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false} as Record);\r\n    this.scope = recursivelyProcessProviders(records, providers);\r\n  }\r\n\r\n  get<T>(token: Type<T>|InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\r\n  get(token: any, notFoundValue?: any): any;\r\n  get(token: any, notFoundValue?: any, flags: InjectFlags = InjectFlags.Default): any {\r\n    const records = this._records;\r\n    let record = records.get(token);\r\n    if (record === undefined) {\r\n      const injectableDef = getInjectableDef(token);\r\n      if (injectableDef) {\r\n        const providedIn = injectableDef && injectableDef.providedIn;\r\n        if (providedIn === 'any' || providedIn != null && providedIn === this.scope) {\r\n          records.set(\r\n            token,\r\n            record = resolveProvider({provide: token, useFactory: injectableDef.factory, deps: EMPTY})\r\n          );\r\n        }\r\n      }\r\n      if (record === undefined) {\r\n        records.set(token, null);\r\n      }\r\n    }\r\n    const lastInjector = setCurrentInjector(this);\r\n    try {\r\n      return tryResolveToken(token, record, records, this.parent, notFoundValue, flags);\r\n    } catch (e) {\r\n      throw e;\r\n    } finally {\r\n      setCurrentInjector(lastInjector);\r\n    }\r\n  }\r\n\r\n  toString() {\r\n    const tokens = [] as string[];\r\n    const  records = this._records;\r\n    records.forEach((v, token) => tokens.push(stringify(token)));\r\n    return `StaticInjector[${tokens.join(', ')}]`;\r\n  }\r\n}\r\n\r\n\r\nfunction multiProviderMixError(token: any) {\r\n  return staticError('Cannot mix multi providers and regular providers', token);\r\n}\r\n\r\nexport const INJECTOR_SCOPE = new InjectionToken<'root'|'platform'|null>('Set Injector scope.');\r\n\r\n\r\n/**\r\n * 递归处理Provider\r\n */\r\nfunction recursivelyProcessProviders(records: Map<any, Record>, provider: StaticProvider): string | null {\r\n  let scope: string|null = null;\r\n  if (provider) {\r\n    provider = resolveForwardRef(provider);\r\n    if (Array.isArray(provider)) {\r\n\r\n      for (let i = 0; i < provider.length; i++) {\r\n        scope = recursivelyProcessProviders(records, provider[i]) || scope;\r\n      }\r\n    } else if (typeof provider === 'function') {\r\n\r\n      throw staticError('Function/Class not supported', provider);\r\n    } else if (provider && typeof provider === 'object' && provider.provide) {\r\n\r\n      let token = resolveForwardRef(provider.provide);\r\n      const resolvedProvider = resolveProvider(provider);\r\n\r\n      // multi\r\n      if (provider.multi === true) {\r\n        let multiProvider: Record|undefined = records.get(token);\r\n        if (multiProvider) {\r\n          if (multiProvider.fn !== MULTI_PROVIDER_FN) {\r\n            throw multiProviderMixError(token);\r\n          }\r\n        } else {\r\n          records.set(token, multiProvider = {\r\n            token: provider.provide,\r\n            deps: [],\r\n            useNew: false,\r\n            fn: MULTI_PROVIDER_FN,\r\n            value: EMPTY\r\n          } as Record);\r\n        }\r\n        token = provider;\r\n        multiProvider.deps.push({token, options: OptionFlags.Default});\r\n      }\r\n\r\n      const record = records.get(token);\r\n      if (record && record.fn === MULTI_PROVIDER_FN) {\r\n        throw multiProviderMixError(token);\r\n      }\r\n      if (token === INJECTOR_SCOPE) {\r\n        scope = resolvedProvider.value;\r\n      }\r\n      records.set(token, resolvedProvider);\r\n    } else {\r\n      throw staticError('Unexpected provider', provider);\r\n    }\r\n  }\r\n  return scope;\r\n}\r\n\r\nfunction resolveProvider(provider: SupportedProvider): Record {\r\n  const deps = computeDeps(provider);\r\n  let fn: Function = IDENT;\r\n  let value: any = EMPTY;\r\n  let useNew: boolean = false;\r\n  const provide = resolveForwardRef(provider.provide);\r\n\r\n  if (USE_VALUE in provider) {\r\n\r\n    value = (provider as ValueProvider).useValue;\r\n  } else if ((provider as FactoryProvider).useFactory) {\r\n\r\n    fn = (provider as FactoryProvider).useFactory;\r\n  } else if ((provider as ExistingProvider).useExisting) {\r\n\r\n    // Just use IDENT\r\n  } else if ((provider as StaticClassProvider).useClass) {\r\n\r\n    // 静态类型\r\n    useNew = true;\r\n    fn = resolveForwardRef((provider as StaticClassProvider).useClass);\r\n  } else if (typeof provide === 'function') {\r\n\r\n    // 构造函数\r\n    useNew = true;\r\n    fn = provide;\r\n  } else {\r\n    throw staticError(\r\n        'StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable',\r\n        provider);\r\n  }\r\n  return {deps, fn, useNew, value};\r\n}\r\n\r\n/**\r\n * 计算依赖\r\n */\r\nfunction computeDeps(provider: StaticProvider): DependencyRecord[] {\r\n  let deps: DependencyRecord[] = EMPTY;\r\n  const providerDeps: any[] = (provider as ExistingProvider & StaticClassProvider & ConstructorProvider).deps;\r\n\r\n  if (providerDeps && providerDeps.length) {\r\n    deps = [];\r\n    for (let i = 0; i < providerDeps.length; i++) {\r\n      const options = OptionFlags.Default;\r\n      const token = resolveForwardRef(providerDeps[i]);\r\n      deps.push({token, options});\r\n    }\r\n  } else if ((provider as ExistingProvider).useExisting) {\r\n    const token = resolveForwardRef((provider as ExistingProvider).useExisting);\r\n    deps = [{token, options: OptionFlags.Default}];\r\n  } else if (!providerDeps && !(USE_VALUE in provider)) {\r\n    // useValue & useExisting are the only ones which are exempt from deps all others need it.\r\n    throw staticError('\\'deps\\' required', provider);\r\n  }\r\n  return deps;\r\n}\r\n\r\n\r\nfunction tryResolveToken(\r\n  token: any,\r\n  record: Record|undefined|null,\r\n  records: Map<any, Record|null>,\r\n  parent: Injector,\r\n  notFoundValue: any,\r\n  flags: InjectFlags\r\n): any {\r\n  try {\r\n    return resolveToken(token, record, records, parent, notFoundValue, flags);\r\n  } catch (e) {\r\n    if (!(e instanceof Error)) {\r\n      e = new Error(e);\r\n    }\r\n    const path: any[] = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\r\n    path.unshift(token);\r\n\r\n    // 清空循环引用的值\r\n    if (record && record.value === CIRCULAR) {\r\n      record.value = EMPTY;\r\n    }\r\n    throw e;\r\n  }\r\n}\r\n\r\n\r\nfunction resolveToken(\r\n  token: any,\r\n  record: Record|undefined|null,\r\n  records: Map<any, Record|null>,\r\n  parent: Injector,\r\n  notFoundValue: any,\r\n  flags: InjectFlags\r\n): any {\r\n\r\n  let value;\r\n  if (record && !(flags & InjectFlags.SkipSelf)) {\r\n    value = record.value;\r\n    if (value === CIRCULAR) {\r\n      throw Error(NO_NEW_LINE + 'Circular dependency');\r\n    } else if (value === EMPTY) {\r\n      record.value = CIRCULAR;\r\n      const useNew = record.useNew;\r\n      const fn = record.fn;\r\n      const depRecords = record.deps;\r\n      let deps = EMPTY;\r\n      if (depRecords.length) {\r\n        deps = [];\r\n        for (let i = 0; i < depRecords.length; i++) {\r\n          const depRecord: DependencyRecord = depRecords[i];\r\n          const options = depRecord.options;\r\n          const childRecord = options & OptionFlags.CheckSelf ? records.get(depRecord.token) : undefined;\r\n          deps.push(\r\n            tryResolveToken(\r\n              depRecord.token,\r\n              childRecord,\r\n              records,\r\n              !childRecord && !(options & OptionFlags.CheckParent) ? NULL_INJECTOR : parent,\r\n              options & OptionFlags.Optional ? null : THROW_IF_NOT_FOUND,\r\n              InjectFlags.Default\r\n            )\r\n          );\r\n        }\r\n      }\r\n      record.value = value = useNew ? new (fn as any)(...deps) : fn.apply(undefined, deps);\r\n    }\r\n  } else if (!(flags & InjectFlags.Self)) {\r\n\r\n    value = parent.get(token, notFoundValue, InjectFlags.Default);\r\n  } else if (!(flags & InjectFlags.Optional)) {\r\n\r\n    value = NULL_INJECTOR.get(token, notFoundValue);\r\n  } else {\r\n\r\n    value = NULL_INJECTOR.get(token, typeof notFoundValue !== 'undefined' ? notFoundValue : null);\r\n  }\r\n  return value;\r\n}\r\n","import { Injector } from './injector';\r\nimport { StaticInjector } from './static_injector';\r\nimport { StaticProvider } from './providers';\r\n\r\nexport function INJECTOR_IMPL__PRE_R3__(providers: StaticProvider[], parent: Injector|undefined, name: string) {\r\n  return new StaticInjector(providers, parent, name);\r\n}\r\n\r\nexport const INJECTOR_IMPL = INJECTOR_IMPL__PRE_R3__;\r\n\r\nexport function createInjector(\r\n  options: StaticProvider[] | {providers: StaticProvider[], parent?: Injector, name?: string},\r\n  parent?: Injector\r\n): Injector {\r\n  if (Array.isArray(options)) {\r\n    return INJECTOR_IMPL(options, parent, '');\r\n  } else {\r\n    return INJECTOR_IMPL(options.providers, options.parent, options.name || '');\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// import { Type } from '@angular/core';\r\nimport { Type } from '../types';\r\n\r\n/**\r\n * An interface implemented by all Angular formType decorators, which allows them to be used as ES7\r\n * decorators as well as\r\n * Angular DSL syntax.\r\n *\r\n * ES7 syntax:\r\n *\r\n * ```\r\n * @ng.Component({...})\r\n * class MyClass {...}\r\n * ```\r\n *\r\n */\r\nexport interface TypeDecorator {\r\n    /**\r\n     * Invoke as ES7 decorator.\r\n     */\r\n    <T extends Type<any>>(type: T): T;\r\n\r\n    // Make TypeDecorator assignable to built-in ParameterDecorator formType.\r\n    // ParameterDecorator is declared in lib.d.ts as a `declare formType`\r\n    // so we cannot declare this interface as a subtype.\r\n    // see https://github.com/angular/angular/issues/3379#issuecomment-126169417\r\n    (target: Object, propertyKey?: string | symbol, parameterIndex?: number): void;\r\n}\r\n\r\nexport const ANNOTATIONS = '__annotations__';\r\nexport const PARAMETERS = '__parameters__';\r\nexport const PROP_METADATA = '__prop__metadata__';\r\n\r\n\r\n\r\n\r\n/**\r\n * @suppress {globalThis}\r\n */\r\nexport function makeDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\r\n    chainFn?: (fn: Function) => void,\r\n    typeFn?: (type: Type<any>, ...args: any[]) => void): {\r\n        new(...args: any[]): any;\r\n        (...args: any[]): any;\r\n        (...args: any[]): (cls: any) => any;\r\n    } {\r\n    const metaCtor = makeMetadataCtor(props);\r\n\r\n    function DecoratorFactory(...args: any[]): (cls: any) => any {\r\n        if (this instanceof DecoratorFactory) {\r\n            metaCtor.call(this, ...args);\r\n            return this;\r\n        }\r\n\r\n        const annotationInstance = new (<any>DecoratorFactory)(...args);\r\n        const typeDecorator: TypeDecorator = <TypeDecorator>function createTypeDecorator(cls: Type<any>) {\r\n            typeFn && typeFn(cls, ...args);\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\r\n                (cls as any)[ANNOTATIONS] :\r\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\r\n            annotations.push(annotationInstance);\r\n            return cls;\r\n        };\r\n        if (chainFn) { chainFn(typeDecorator); }\r\n        return typeDecorator;\r\n    }\r\n\r\n    if (parentClass) {\r\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n\r\n    DecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>DecoratorFactory).annotationCls = DecoratorFactory;\r\n    return DecoratorFactory as any;\r\n}\r\n\r\nfunction makeMetadataCtor(props?: (...args: any[]) => any): any {\r\n    return function ctor(...args: any[]) {\r\n        if (props) {\r\n            const values = props(...args);\r\n            // tslint:disable-next-line:forin\r\n            for (const propName in values) {\r\n                this[propName] = values[propName];\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function makeParamDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\r\n    const metaCtor = makeMetadataCtor(props);\r\n    function ParamDecoratorFactory(...args: any[]): any {\r\n        if (this instanceof ParamDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n        const annotationInstance = new (<any>ParamDecoratorFactory)(...args);\r\n\r\n        (<any>ParamDecorator).annotation = annotationInstance;\r\n        return ParamDecorator;\r\n\r\n        function ParamDecorator(cls: any, unusedKey: any, index: number): any {\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const parameters = cls.hasOwnProperty(PARAMETERS) ?\r\n                (cls as any)[PARAMETERS] :\r\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\r\n\r\n            // there might be gaps if some in between parameters do not have annotations.\r\n            // we pad with nulls.\r\n            while (parameters.length <= index) {\r\n                parameters.push(null);\r\n            }\r\n\r\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\r\n            return cls;\r\n        }\r\n    }\r\n    if (parentClass) {\r\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>ParamDecoratorFactory).annotationCls = ParamDecoratorFactory;\r\n    return ParamDecoratorFactory;\r\n}\r\n\r\n\r\n\r\n\r\nexport function makePropDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\r\n    const metaCtor = makeMetadataCtor(props);\r\n\r\n    function PropDecoratorFactory(...args: any[]): any {\r\n        if (this instanceof PropDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n\r\n        const decoratorInstance = new (<any>PropDecoratorFactory)(...args);\r\n\r\n        // tslint:disable-next-line:no-shadowed-variable\r\n        return function PropDecorator(target: any, name: string) {\r\n            const constructor = target.constructor;\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const meta = constructor.hasOwnProperty(PROP_METADATA) ?\r\n                (constructor as any)[PROP_METADATA] :\r\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\r\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\r\n            meta[name].unshift(decoratorInstance);\r\n        };\r\n    }\r\n\r\n    if (parentClass) {\r\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n\r\n    PropDecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>PropDecoratorFactory).annotationCls = PropDecoratorFactory;\r\n    return PropDecoratorFactory;\r\n}\r\n","import { ANNOTATIONS, PROP_METADATA } from './decorator';\r\nimport { Translate } from '../../i18n/index';\r\n\r\n/**\r\n * 元数据解析\r\n * 约束：\r\n * 1、类型装饰器：在某个类型上，某种类型的装饰器，只使用一次，不重复添加；\r\n * 2、属性装饰器：在某个属性上，某种类型的装饰器，只使用一次，不重复添加\r\n */\r\nclass MetadataUtil {\r\n\r\n  // ----------------------------------------\r\n  // 类型元数据\r\n  // ----------------------------------------\r\n\r\n  /**\r\n   * 获取类元数据\r\n   * 返回结果形如：\r\n   * [\r\n   *   Injectable\r\n   *   NgViewModel\r\n   *   NgViewModel\r\n   * ]\r\n   */\r\n  static getClassMetadatas(constructor: any): any[] {\r\n    const metadatas = constructor[ANNOTATIONS];\r\n    return metadatas;\r\n  }\r\n\r\n  /**\r\n   * 获取某个class上的某种装饰器\r\n   * 返回结果：NgViewModel\r\n   */\r\n  static getClassMetadataByName(constructor: any, metadataName: string): any {\r\n    const metadata = this.getClassMetadataByNameWithTranslate(constructor, metadataName, null, null);\r\n    return metadata;\r\n  }\r\n\r\n  static getClassMetadataByNameWithTranslate(\r\n    constructor: any, metadataName: string,\r\n    translateService?: Translate, keysToTranslate?: string[]): any {\r\n    const allClassMetadatas = this.getClassMetadatas(constructor);\r\n    if (!allClassMetadatas) {\r\n      return null;\r\n    }\r\n    const metadata = allClassMetadatas.find((classMetadata: any) => {\r\n      return classMetadata.ngMetadataName === metadataName;\r\n    });\r\n    if (metadata && translateService && keysToTranslate) {\r\n      keysToTranslate.forEach((metadataPropKey) => {\r\n        const propertyVariable: string = metadata[metadataPropKey];\r\n        if (propertyVariable && propertyVariable.startsWith('{{') && propertyVariable.endsWith('}}')) {\r\n          const translateKey = propertyVariable.replace('{{', '').replace('}}', '').trim();\r\n          metadata[metadataPropKey] = translateService.transform(translateKey, null);\r\n        }\r\n      });\r\n    }\r\n    return metadata;\r\n  }\r\n\r\n  // ----------------------------------------\r\n  // 属性元数据\r\n  // ----------------------------------------\r\n\r\n  /**\r\n   * 获取所有属性的所有元数据\r\n   * 返回格式：\r\n   * {\r\n   *   propName1: [ NgDefaultValue, NgMaxLength, NgMinLength],\r\n   *   propName2: [ NgDefaultValue, NgMaxLength, NgMinLength]\r\n   * }\r\n   */\r\n  static getPropsMetadatas(constructor: any): any {\r\n    const allPropMetadatas = constructor[PROP_METADATA];\r\n    return allPropMetadatas;\r\n  }\r\n\r\n  /**\r\n   * 获取所有属性的某一类型的元数据\r\n   * 如果同一属性\r\n   * 返回结果：\r\n   * {\r\n   *    propName1: NgDefaultValue,\r\n   *    propName2: NgDefaultValue\r\n   * }\r\n   */\r\n  static getPropsMetadatasByName(constructor: any, metadataName: string): { [propName: string]: any } {\r\n    const metadatas = this.getPropsMetadatasByNameWithTranslate(constructor, metadataName);\r\n    return metadatas;\r\n  }\r\n\r\n  static getPropsMetadatasByNameWithTranslate(\r\n    constructor: any, metadataName: string,\r\n    translateService?: Translate, keysToTranslate?: string[]): { [propName: string]: any } {\r\n    const metadatas = {};\r\n    // 读取构造函数中存储的类属性注解。\r\n    const allPropMetadatas = this.getPropsMetadatas(constructor);\r\n    if (!allPropMetadatas) {\r\n      return metadatas;\r\n    }\r\n    // 遍历所有属性提取注解信息。\r\n    Object.keys(allPropMetadatas).forEach((propName: string) => {\r\n      // 提取当前属性注解对象\r\n      const propMetadatas: any[] = allPropMetadatas[propName];\r\n      // 提取指定类型的注解项\r\n      const metadata = propMetadatas.find((propMetadata: any) => {\r\n        return propMetadata.ngMetadataName === metadataName;\r\n      });\r\n      if (translateService && keysToTranslate) {\r\n        keysToTranslate.forEach((metadataPropKey) => {\r\n          const propertyVariable: string = metadata[metadataPropKey];\r\n          if (propertyVariable && propertyVariable.startsWith('{{') && propertyVariable.endsWith('}}')) {\r\n            const translateKey = propertyVariable.replace('{{', '').replace('}}', '').trim();\r\n            metadata[metadataPropKey] = translateService.transform(translateKey, null);\r\n          }\r\n        });\r\n      }\r\n      if (metadata) {\r\n        metadatas[propName] = metadata;\r\n      }\r\n    });\r\n\r\n    return metadatas;\r\n  }\r\n\r\n  /**\r\n   * 获取某个属性的所有元数据\r\n   * 返回格式：[ NgDefaultValue, NgMaxLength, NgMinLength]\r\n   */\r\n  static getPropMetadatasByName(constructor: any, propName: string): any[] {\r\n    // 暂不实现\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 获取某个属性的某种元数据\r\n   * 返回格式：NgDefaultValue\r\n   */\r\n  static getPropMetadataByName(constructor: any, propName: string, metadataName: string): any {\r\n    // 暂不实现\r\n    return null;\r\n  }\r\n\r\n\r\n  // ----------------------------------------\r\n  // 参数元数据\r\n  // ----------------------------------------\r\n\r\n}\r\n\r\nexport { MetadataUtil };\r\n","/**\r\n * 请求头信息\r\n */\r\ninterface HttpHeaders {\r\n  [key: string]: string;\r\n}\r\n\r\n/**\r\n * Http参数\r\n */\r\ninterface HttpParams {\r\n  [key: string]: string;\r\n}\r\n\r\n/**\r\n * 请求方法\r\n */\r\ntype HttpMethod = | 'GET' | 'DELETE' | 'HEAD' | 'OPTIONS' | 'POST' | 'PUT' | 'PATCH' | 'LINK' | 'UNLINK';\r\n\r\n/**\r\n * HttpMethods\r\n */\r\nclass HttpMethods {\r\n  public static GET: HttpMethod     = 'GET';\r\n  public static DELETE: HttpMethod  = 'DELETE';\r\n  public static HEAD: HttpMethod    = 'HEAD';\r\n  public static OPTIONS: HttpMethod = 'OPTIONS';\r\n  public static POST: HttpMethod    = 'POST';\r\n  public static PUT: HttpMethod     = 'PUT';\r\n  public static PATCH: HttpMethod   = 'PATCH';\r\n  public static LINK: HttpMethod    = 'LINK';\r\n  public static UNLINK: HttpMethod  = 'UNLINK';\r\n}\r\n\r\n\r\n/**\r\n * 返回值类型\r\n */\r\ntype HttpResponseType = | 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream';\r\n\r\n/**\r\n * 返回值处理类型\r\n */\r\ntype ObserveType = 'body' | 'response';\r\n\r\n/**\r\n * Http响应信息\r\n */\r\ninterface HttpResponse {\r\n  headers: {[key: string]: string};\r\n  body: any;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\n/**\r\n * Http请求配置\r\n */\r\ninterface HttpRequestConfig {\r\n  params?: HttpParams;\r\n  body?: any;\r\n  headers?: HttpHeaders;\r\n  responseType?: HttpResponseType;\r\n  observe?: 'body' | 'response';\r\n}\r\n\r\n\r\nexport { HttpHeaders, HttpParams, HttpMethod, HttpMethods, ObserveType, HttpResponseType, HttpRequestConfig, HttpResponse };\r\n","import { AxiosInstance, AxiosRequestConfig, AxiosResponse} from 'axios';\r\nimport { HttpMethod, HttpHeaders, HttpResponse, HttpRequestConfig } from './types';\r\n\r\nclass HttpUtil {\r\n\r\n  /**\r\n   * 追加Header\r\n   */\r\n  public static appendHeader(headers: HttpHeaders, key: string, value: string): HttpHeaders {\r\n    headers = Object.assign({}, headers, {[key]: value});\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * 向RequestConfig中追加body\r\n   */\r\n  public static appendBodyToRequestConfig(body: any, requestConfig: HttpRequestConfig) {\r\n    if (!requestConfig) {\r\n      requestConfig = {};\r\n    }\r\n    requestConfig = Object.assign({}, requestConfig, { body: body});\r\n\r\n    return requestConfig;\r\n  }\r\n\r\n  /**\r\n   * 构造AxiosReqeustConfig\r\n   */\r\n  public static buildAxiosRequestConfig(method: HttpMethod, url: string, requestConfig: HttpRequestConfig): AxiosRequestConfig {\r\n    requestConfig = requestConfig || {};\r\n\r\n    const axiosRequestConfig: AxiosRequestConfig = {\r\n      url: url,\r\n      method: method,\r\n      params:  requestConfig.params || null,\r\n      headers: requestConfig.headers || null,\r\n      responseType: requestConfig.responseType || 'json',\r\n      data: requestConfig.body || null\r\n    };\r\n    return axiosRequestConfig;\r\n  }\r\n\r\n  /**\r\n   * 构造Http响应信息\r\n   */\r\n  public static buildHttpResponse(axiosResponse: AxiosResponse ) {\r\n    const httpResponse: HttpResponse = {\r\n      body: axiosResponse.data,\r\n      headers: axiosResponse.headers,\r\n      status: axiosResponse.status,\r\n      statusText: axiosResponse.statusText\r\n    };\r\n    return httpResponse;\r\n  }\r\n\r\n}\r\n\r\nexport { HttpUtil };\r\n","import { Observable, from, of } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport axios from 'axios';\r\nimport { AxiosInstance, AxiosResponse} from 'axios';\r\nimport { HttpMethod, HttpRequestConfig } from './types';\r\nimport { HttpUtil } from './http-util';\r\n\r\n/**\r\n * HttpClient\r\n */\r\nclass HttpClient {\r\n\r\n  /**\r\n   * axios实例\r\n   */\r\n  private axiosInstance: AxiosInstance;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.axiosInstance = axios.create();\r\n  }\r\n\r\n  /**\r\n   * 发送GET请求\r\n   */\r\n  public get(url: string, requestConfig: HttpRequestConfig): Observable<any> {\r\n    return this.request('GET', url, requestConfig);\r\n  }\r\n\r\n  /**\r\n   * 发送POST请求\r\n   */\r\n  public post(url: string, body: any, requestConfig: HttpRequestConfig) {\r\n    requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);\r\n    return this.request('POST', url, requestConfig);\r\n  }\r\n\r\n  /**\r\n   * 发送PUT请求\r\n   */\r\n  public put(url: string, body: any, requestConfig: HttpRequestConfig) {\r\n    requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);\r\n    return this.request('PUT', url, requestConfig);\r\n  }\r\n\r\n  /**\r\n   * 发送PATCH请求\r\n   */\r\n  public patch(url: string, body: any, requestConfig: HttpRequestConfig) {\r\n    requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);\r\n    return this.request('PATCH', url, requestConfig);\r\n  }\r\n\r\n  /**\r\n   * 发送DELETE请求\r\n   */\r\n  public delete(url: string, requestConfig: HttpRequestConfig) {\r\n    return this.request('DELETE', url, requestConfig);\r\n  }\r\n\r\n  /**\r\n   * 发送请求\r\n   */\r\n  request( method: HttpMethod, url: string, requestConfig: HttpRequestConfig): Observable<any> {\r\n    const request$ = of(true).pipe(\r\n      switchMap(() => {\r\n        const axiosRequestConfig = HttpUtil.buildAxiosRequestConfig(method, url, requestConfig);\r\n        return from(this.axiosInstance.request(axiosRequestConfig));\r\n      })\r\n    );\r\n    return request$.pipe(\r\n      map((axiosResponse: AxiosResponse) => {\r\n        const httpResponse = HttpUtil.buildHttpResponse(axiosResponse);\r\n        return requestConfig.observe === 'response' ? httpResponse : axiosResponse.data;\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport { HttpClient };\r\n","export * from './types';\r\nexport * from './http-util';\r\nexport * from './http-client';\r\n\r\nimport { StaticProvider } from '../core/index';\r\nimport { HttpClient } from './http-client';\r\n\r\nconst HTTP_PROVIDERS: StaticProvider[] = [\r\n  { provide: HttpClient, useClass: HttpClient, deps: [] }\r\n];\r\n\r\nexport { HTTP_PROVIDERS };\r\n\r\n\r\n","/**\r\n * 变更记录\r\n */\r\nexport class Modification {\r\n\r\n  /**\r\n   * 实体变更路径。如：[1, 'name']\r\n   * 说明： 1 为实体主键ID， name 为属性名称\r\n   */\r\n  path?: string[];\r\n\r\n  /**\r\n   * 原值\r\n   */\r\n  preValue?: any;\r\n\r\n  /**\r\n   * 变更后的新值\r\n   *\r\n   * value 值类型会根据 type(变更类型)的不同而不同，当type 为以下类型时：\r\n   * - Add: value的值为json 对象\r\n   * - ValueChange: value的值为string\\number\\boolean等简单数据\r\n   * - Remove: value的值为键值对{[key:string]: value} key为主键字段\r\n   *\r\n   */\r\n  value: any;\r\n\r\n  /**\r\n   * 变更类型\r\n   */\r\n  type: ModifyType;\r\n\r\n  /**\r\n   * 数据是否通过验证\r\n   */\r\n  isValid?: boolean;\r\n\r\n  /**\r\n   * 数据验证结果\r\n   */\r\n  errors?: { [type: string]: string };\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param value 新值\r\n   * @param modifyType 变更类型\r\n   * @param path 变更路径\r\n   * @param preValue 旧值\r\n   */\r\n  constructor(value: any, modifyType: ModifyType, path?: string[], preValue?: any) {\r\n    this.type = modifyType;\r\n    this.value = value;\r\n    this.preValue = preValue;\r\n    this.path = path;\r\n  }\r\n}\r\n\r\n/**\r\n * 变更类型\r\n */\r\nexport enum ModifyType {\r\n\r\n  /**\r\n   * 添加\r\n   */\r\n  Add = 'ADD',\r\n\r\n  /**\r\n   * 删除\r\n   */\r\n  Remove = 'REMOVE',\r\n\r\n  /**\r\n   * 修改\r\n   */\r\n  ValueChange = 'VALUE_CHANGE',\r\n\r\n  /**\r\n   * 加载\r\n   */\r\n  Load = 'LOAD',\r\n\r\n  /**\r\n   * 未改变\r\n   */\r\n  UnChanged = 'UNCHANGED',\r\n\r\n  /**\r\n   * 分页信息变更\r\n   */\r\n  PaginationInfoChange = \"PAGINATION_INFO_CHANGE\"\r\n}\r\n","/*\r\n * @Author: Lucus, Witt\r\n * @Date: 2018-10-30 15:53:59\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-11-08 17:25:08\r\n */\r\n\r\nimport { Modification, ModifyType } from './types';\r\n\r\nfunction isEqual(value: any, other: any) {\r\n  return JSON.stringify(value) ===  JSON.stringify(other);\r\n}\r\n\r\n/**\r\n * 实体数据变更集\r\n */\r\nclass ChangeSet {\r\n\r\n  /**\r\n   * 变更集合\r\n   */\r\n  protected modifications: Modification[] = [];\r\n\r\n  /**\r\n   *  获取所有的变更记录\r\n   */\r\n  public get changes(): Modification[] {\r\n      return this.modifications;\r\n  }\r\n\r\n  /**\r\n   * 将变更集添加到集合中\r\n   * ### 使用示例\r\n   * ```\r\n   * const changeSet = new ChangeSet();\r\n   * const modify = new Modification('newValue', ModifyType.ValueChange, [1, 'title'], 'oldValue');\r\n   * changeSet.append(modify)\r\n   * ```\r\n   * @param changeItem 变更数据\r\n   */\r\n  public append(modification: Modification) {\r\n    switch (modification.type) {\r\n      case ModifyType.ValueChange:\r\n        this.appendValueChangeModification(modification);\r\n          break;\r\n       case ModifyType.Add:\r\n        this.appendAddModification(modification);\r\n          break;\r\n      case ModifyType.Remove:\r\n        this.appendRemoveModification(modification);\r\n        break;\r\n      case ModifyType.Load:\r\n        break;\r\n      default:\r\n        throw new Error('不支持此类型的变更');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加值变化变更\r\n   */\r\n  private appendValueChangeModification(modification: Modification) {\r\n    const value = modification.value;\r\n\r\n    const existedModification = this.findModifyItemsPath(modification.path);\r\n    if (existedModification) {\r\n\r\n      // 如果存在相同路径的ValueChange类型的变更集，则更新值；\r\n      existedModification.value = value;\r\n    } else {\r\n        const existedAddModification = this.findNewAddItemsPath(modification.path);\r\n        if (existedAddModification) {\r\n\r\n          // @todo：\r\n          // 1、此处逻辑有问题，value是个字符串，不能直接assign；\r\n          // 2、之所以没有出现问题，是因为都是服务器端新增，新增后，客户端清空了所有变更。\r\n          // 如果存在涵盖该ValueChange变更的Add变更，则更新Add变更对应的数据；\r\n          existedAddModification.value = Object.assign({}, existedAddModification.value, value);\r\n        } else {\r\n\r\n          // 其他情况，新增一条ValueChange变更。\r\n          this.modifications.push(modification);\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加新增变更\r\n   */\r\n  private appendAddModification(modification: Modification) {\r\n    const value = modification.value;\r\n\r\n    const existedModification = this.findNewAddItemsPath(modification.path);\r\n    if (existedModification) {\r\n\r\n      // 1、如果已经存在相同路径的Add变更，则合并Value。\r\n      existedModification.value = existedModification.value.concat(value);\r\n    } else {\r\n\r\n      // 2、如果没有，则新增一条Add变更。\r\n      this.modifications.push(modification);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加删除变更\r\n   */\r\n  private appendRemoveModification(modification: Modification) {\r\n\r\n    const path = modification.path;\r\n    const primaryKey = Object.keys(modification.value)[0];\r\n    const primaryKeyValue = modification.value[primaryKey];\r\n\r\n    // 1、存在相同path的新增变更，移除新增变更，不需要添加删除变更；\r\n    // @todo：待重构（1、只考虑了主从情况，2、临时用多重循环实现）\r\n    this.modifications.forEach((addModification: Modification) => {\r\n\r\n      // 只处理新增变更\r\n      if (addModification.type !== ModifyType.Add) {\r\n        return;\r\n      }\r\n\r\n      // @todo 只考虑主从结构，再深的层次暂不考虑\r\n      if (isEqual(addModification.path, path) === false) {\r\n        return;\r\n      }\r\n\r\n      // 遍历新增新增变更的value（value是个数组），移除相匹配的新增删除\r\n      addModification.value = addModification.value.filter((addDataItem: any) => {\r\n        return addDataItem[primaryKey] !== primaryKeyValue;\r\n      });\r\n    });\r\n\r\n    // 2、移除对应的修改变更\r\n    const fullRemovePath = path.concat(`${primaryKey}:${primaryKeyValue}`);\r\n    this.modifications = this.modifications.filter((valueModification: Modification) => {\r\n      if (valueModification.type !== ModifyType.ValueChange) {\r\n        return true;\r\n      }\r\n      const valueChangePath = Array.from(valueModification.path);\r\n      valueChangePath.pop();\r\n\r\n      // 路径相同进行移除\r\n      const isToRemove = isEqual(valueChangePath, fullRemovePath);\r\n      return !isToRemove;\r\n    });\r\n\r\n    // 先删除下级删除变更，再插入\r\n    // 主要针对从从表删除之后，又删除子表时，根实体上还存在从从表删除变更的场景\r\n    this.removeDescendantRemoveModifications(modification);\r\n    this.modifications.push(modification);\r\n  }\r\n\r\n  /**\r\n   * 清空变更集合\r\n   */\r\n  public clear() {\r\n    this.modifications = [];\r\n  }\r\n\r\n\r\n  /**\r\n   * 根据path获取Add类型的变更记录\r\n   * @param path 变更路径\r\n   */\r\n  private findNewAddItemsPath(path: any[]) {\r\n      return this.modifications.find((value, index) => {\r\n          return isEqual(path, value.path) && value.type === ModifyType.Add;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * 根据path获取ValueChange类型的变更记录\r\n   * @param path 变更路径\r\n   */\r\n  private findModifyItemsPath(path: any[]) {\r\n    return this.modifications.find((value, index) => {\r\n      return isEqual(path, value.path) && value.type === ModifyType.ValueChange;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 删除后代（包括自己）所有的删除变更\r\n   * @todo：临时做一个最小化修改\r\n   */\r\n  private removeDescendantRemoveModifications(parentRemoveModification: Modification): void {\r\n\r\n    const parentPathWithId = this.createRemovePathWithId(parentRemoveModification);\r\n\r\n    // 删除后代修改变更\r\n    this.modifications = this.modifications.filter((modification: Modification) => {\r\n      if (modification.type !== ModifyType.Remove) {\r\n        return true;\r\n      }\r\n      const descendantPathWithId = this.createRemovePathWithId(modification);\r\n      const isDescendant =  this.isDescendantPath(parentPathWithId, descendantPathWithId);\r\n      return !isDescendant;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取删除路径的完整格式\r\n   * @summary\r\n   * 1、目前删除变更的路径标记到父集合；\r\n   * 2、为了方便比较，将被删除的数据id加入到路径中\r\n   */\r\n  private createRemovePathWithId(modification: Modification) {\r\n    const path = modification.path;\r\n    const primaryKey = Object.keys(modification.value)[0];\r\n    const primaryKeyValue = modification.value[primaryKey];\r\n    const pathWithId = path.concat([`${primaryKey}:${primaryKeyValue}`]);\r\n    return pathWithId;\r\n  }\r\n\r\n  /**\r\n   * 判断是否是后代节点路径\r\n   * @param parentPath 父节点路径\r\n   * @param descendantPath 后代节点\r\n   */\r\n  private isDescendantPath(parentPath: string[], descendantPath: string[]) {\r\n    if (parentPath.length > descendantPath.length) {\r\n      return false;\r\n    }\r\n\r\n    let isDescendantPath = true;\r\n    parentPath.forEach((parentPathItem: string, parentPathItemIndex: number) => {\r\n      if (parentPathItem !== descendantPath[parentPathItemIndex]) {\r\n        isDescendantPath = false;\r\n        return;\r\n      }\r\n    });\r\n\r\n    return isDescendantPath;\r\n  }\r\n\r\n}\r\n\r\nexport { ChangeSet };\r\n\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-27 09:25:38\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-27 09:39:10\r\n */\r\n\r\n\r\n/**\r\n * 路径类型\r\n */\r\nenum DataPathNodeType {\r\n\r\n  /**\r\n   * 标记该节点是一个实体主键值，用来在列表上定位一个实体\r\n   */\r\n  DataId   = 'DataId',\r\n\r\n  /**\r\n   * 标记该节点是一个属性名，用来在对象上定位一个属性\r\n   */\r\n  PropName = 'PropName',\r\n}\r\n\r\n\r\n/**\r\n * 路径节点\r\n */\r\nclass DataPathNode {\r\n\r\n  /**\r\n   * 上一节点\r\n   */\r\n  prev: DataPathNode;\r\n\r\n  /**\r\n   * 下一节点\r\n   */\r\n  next: DataPathNode;\r\n\r\n  /**\r\n   * 节点类型\r\n   */\r\n  type: DataPathNodeType;\r\n\r\n  /**\r\n   * 路径数据\r\n   * 对于List类型：  value是主键值，用于指明具体是哪一行；\r\n   * 对于Object类型：value是属性名，用于指明具体哪一属性。\r\n   */\r\n  value: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(type: DataPathNodeType, data: any) {\r\n    this.type = type;\r\n    this.value = data;\r\n\r\n    this.prev = null;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\n\r\nexport { DataPathNodeType, DataPathNode };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-27 09:26:41\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-01-15 22:00:45\r\n */\r\n\r\nimport { DataPathNode, DataPathNodeType } from './data_path_node';\r\n/**\r\n * 变更路径（简单双向列表）\r\n */\r\nclass DataPath {\r\n\r\n  /**\r\n   * 头节点\r\n   */\r\n  public head: DataPathNode;\r\n\r\n  /**\r\n   * 长度\r\n   */\r\n  public length: number;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.head = new DataPathNode(null, null);\r\n    this.length = 0;\r\n  }\r\n\r\n  /**\r\n   * 添加一个节点到头部\r\n   */\r\n  public unshift(type: DataPathNodeType, data: any) {\r\n    const newNode = new DataPathNode(type, data);\r\n    newNode.next = this.head.next;\r\n    newNode.prev = this.head;\r\n\r\n    this.head.next = newNode;\r\n    if (newNode.next) {\r\n      newNode.next.prev = newNode;\r\n    }\r\n\r\n    this.length++;\r\n  }\r\n\r\n  /**\r\n   * 在链表最后追加一个节点\r\n   */\r\n  public push(type: DataPathNodeType, data: any) {\r\n    const tailNode = this.getTail();\r\n    const newNode = new DataPathNode(type, data);\r\n    tailNode.next = newNode;\r\n    this.length++;\r\n  }\r\n\r\n  /**\r\n   * 获取链表尾部节点\r\n   */\r\n  public getTail(): DataPathNode {\r\n    let lastNode = this.head;\r\n    while (lastNode.next) {\r\n      lastNode = lastNode.next;\r\n    }\r\n    return lastNode;\r\n  }\r\n\r\n  /**\r\n   * 转换为数组格式\r\n   */\r\n  public toArray() {\r\n    const pathArray = [];\r\n    let currentNode = this.head.next;\r\n    while (currentNode) {\r\n      pathArray.push(`${currentNode.type}:${currentNode.value}`) ;\r\n      currentNode = currentNode.next;\r\n    }\r\n    return pathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为字符串格式\r\n   */\r\n  public toString() {\r\n    const pathArray = this.toArray();\r\n    const pathString = pathArray.join(', ');\r\n    return `[${pathString}]`;\r\n  }\r\n\r\n  /**\r\n   * 拷贝\r\n   */\r\n  public clone(): DataPath {\r\n    const newDataPath = new DataPath();\r\n    let curDataNode = this.head.next;\r\n    while (curDataNode) {\r\n      newDataPath.push(curDataNode.type, curDataNode.value);\r\n      curDataNode = curDataNode.next;\r\n    }\r\n    return newDataPath;\r\n  }\r\n}\r\n\r\nexport { DataPath };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-08-14 14:11:51\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-08-14 16:11:51\r\n */\r\n\r\nimport { DataTypeInfo } from './data_type_info';\r\n\r\n\r\n/**\r\n * 实体属性分组\r\n */\r\nenum DataPropGroup {\r\n\r\n  /**\r\n   * 简单类型\r\n   */\r\n  Primitive = 'Primitive',\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  Object = 'Object',\r\n\r\n  /**\r\n   * 动态实体类型\r\n   */\r\n  Dynamic = 'Dynamic',\r\n\r\n  /**\r\n   * 列表类型\r\n   */\r\n  List = 'List'\r\n\r\n}\r\n\r\n\r\n/**\r\n * 实体属性信息\r\n */\r\nclass DataPropInfo {\r\n\r\n  /**\r\n   * 属性类型\r\n   */\r\n  public group: DataPropGroup;\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  public name: string;\r\n\r\n  /**\r\n   * 影射名称\r\n   */\r\n  public mapping: string;\r\n\r\n  /**\r\n   * 属性类型描述\r\n   */\r\n  public typeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 元数据信息\r\n   * @todo\r\n   * 1、EntityPropInfo不应该认识元数据描述，不能强识别元数据上的属性；\r\n   * 2、将来元数据可能有多套，每一套有自己的解析 元数据解析框架还没有做，所以临时处理，不对暴露\r\n   */\r\n  public metadataInfo?: any;\r\n}\r\n\r\nexport {DataPropGroup, DataPropInfo };\r\n","import 'reflect-metadata';\r\nimport { makePropDecorator } from '../../core/index';\r\nimport { ClassType } from '../types';\r\nimport { PropMetadata } from './prop_meatadata';\r\n\r\n/**\r\n * 简单属性元数据\r\n */\r\nexport interface PrimitivePropMetadata extends PropMetadata {\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  property?: string;\r\n\r\n  /**\r\n   * 字段名称\r\n   */\r\n  dataField?: string;\r\n\r\n  /**\r\n   * 原始字段名称\r\n   */\r\n  originalDataField?: string;\r\n\r\n  /**\r\n   * 原始字段类型\r\n   */\r\n  originalDataFieldType?: string;\r\n\r\n  /**\r\n   * 是否为主键\r\n   */\r\n  primary?: boolean;\r\n\r\n  /**\r\n   * 是否为外键\r\n   */\r\n  foreign?: boolean;\r\n\r\n  /**\r\n   * 默认值\r\n   */\r\n  defaultValue?: any;\r\n\r\n  /**\r\n   * 验证规则\r\n   */\r\n  validRules?: any[];\r\n\r\n  /**\r\n   * 初始值，用于字段清空后\r\n   */\r\n  initValue?: any;\r\n\r\n  /**\r\n   * 启用多语录入\r\n   */\r\n  enableMultiLangInput?: boolean;\r\n}\r\n\r\n\r\n/**\r\n * 元数据名称\r\n */\r\nexport const PRIMITIVE_PROP_META = 'PrimitivePropMeta';\r\n\r\n\r\n/**\r\n * 【简单属性装饰器工厂】接口\r\n * @summary\r\n * 类型可以为：NgFieldProperty、string、ClassType\r\n * 当为string 时，则设其映射字段；\r\n * 当为ClassType时，则设置集合中的记录类型\r\n */\r\nexport interface PrimitivePropMetaDecorator {\r\n\r\n  (obj: PrimitivePropMetadata | string | ClassType): any;\r\n\r\n  (obj?: PrimitivePropMetadata | string | boolean): any;\r\n\r\n  new(obj?: PrimitivePropMetadata | string | boolean): any;\r\n}\r\n\r\n\r\n/**\r\n * 【简单属性装饰器工厂】的工厂\r\n */\r\nfunction makePrimitivePropMetaDecorator(options?: PrimitivePropMetadata | string | boolean): any {\r\n\r\n  let metadata: PrimitivePropMetadata = {\r\n    primary: false,\r\n    foreign: false\r\n  };\r\n\r\n  if (options) {\r\n    const paramType = typeof options;\r\n    switch (paramType) {\r\n      case 'boolean':\r\n        metadata.primary = Boolean(options);\r\n        break;\r\n      case 'string':\r\n        metadata.dataField = String(options);\r\n        break;\r\n      case 'object':\r\n        metadata = Object.assign(metadata, options);\r\n        break;\r\n    }\r\n  }\r\n  return metadata;\r\n}\r\n\r\n\r\n/**\r\n * 简单属性装饰器工厂\r\n */\r\nexport const PrimitivePropMeta: PrimitivePropMetaDecorator = makePropDecorator(PRIMITIVE_PROP_META, makePrimitivePropMetaDecorator);\r\n","class StringUtil {\r\n\r\n  /**\r\n     * 字符串格式化\r\n     */\r\n  public static format(value, options) {\r\n    return value.toString();\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { StringUtil };\r\n","class NumberUtil {\r\n\r\n  /**\r\n     * 数字格式化\r\n     * {\r\n     *   precision: 2,\r\n     *   decimal: true,\r\n     *   thousand: ','\r\n     *   prefix: '',\r\n     *   suffix: ''\r\n     * }\r\n     */\r\n  public static format(value, options) {\r\n\r\n    // 参数处理\r\n    let decimals = (options.precision || options.precision === 0) ? options.precision : 2;\r\n    let decimalPoint = options.decimal || '.';\r\n    let thousandsSep = options.thousand || '';\r\n    let prefix = options.prefix || '';\r\n    let suffix = options.suffix || '';\r\n\r\n    let prefixType = options.prefixType;\r\n    if (prefixType == \"dynamic\" && options.prefix) {\r\n      // 表示前缀为一个函数  那么执行函数定义\r\n      let prefixFunc = new Function(\"return \" + options.prefix);\r\n      prefix = prefixFunc()(options.sourceData);\r\n    }\r\n\r\n    value = (value + '').replace(/[^0-9+-Ee.]/g, '');\r\n    let s;\r\n\r\n    // 处理精度\r\n    let toFixedFix = function (n, prec) {\r\n      var k = Math.pow(10, prec);\r\n      return '' + parseFloat(Math.round(parseFloat((n * k).toFixed(prec * 2))).toFixed(prec * 2)) / k;\r\n    };\r\n    s = ((decimals || decimals === 0) ? toFixedFix(value, decimals) : '' + Math.round(value)).split('.');\r\n\r\n    // 处理千分位\r\n    if (thousandsSep) {\r\n      let pattern = /(-?\\d+)(\\d{3})/;\r\n      while (pattern.test(s[0])) {\r\n        s[0] = s[0].replace(pattern, \"$1\" + thousandsSep + \"$2\");\r\n      }\r\n      if ((s[1] || '').length < decimals) {\r\n        s[1] = s[1] || '';\r\n        s[1] += new Array(decimals - s[1].length + 1).join('0');\r\n      }\r\n    }\r\n\r\n    let formatedValue = s.join(decimalPoint);\r\n    formatedValue = `${prefix}${formatedValue}${suffix}`;\r\n    return formatedValue;\r\n  }\r\n\r\n}\r\n\r\nexport { NumberUtil };","/**\r\n * 布尔工具类\r\n */\r\nclass BoolUtil {\r\n  \r\n  /**\r\n   * 布尔值格式化\r\n  */\r\n  public static  format(value, options) {\r\n    if (value === true) {\r\n      return '是';\r\n    } else {\r\n      return '否';\r\n    }\r\n  }\r\n}\r\n\r\nexport { BoolUtil };\r\n\r\n\r\n","class EnumUtil {\r\n\r\n  /**\r\n   * 枚举格式化\r\n   * {\r\n   *  enumData: [\r\n   *    {value: 'value1', name: 'name1'},\r\n   *    {value: 'value2', name: 'name2'}\r\n   *  ]\r\n   * }\r\n   */\r\n  static format(value, options) {\r\n    const enumOptions = options.enumData;\r\n    const targetEnumOption = enumOptions.find((enumOption) => {\r\n      return enumOption.value === value;\r\n    });\r\n\r\n    if (!targetEnumOption) {\r\n      console.error(`找不到${value}对应的枚举选项`);\r\n      return value;\r\n    }\r\n\r\n    return targetEnumOption.name;\r\n  }\r\n}\r\n\r\nexport { EnumUtil };\r\n\r\n","import { format, isDate, parseISO, isEqual, compareAsc } from 'date-fns';\r\nimport dayjs from 'dayjs';\r\nimport IsBetween from 'dayjs/plugin/IsBetween';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport Calendar from 'dayjs/plugin/calendar';\r\nimport 'dayjs/locale/zh-cn';\r\ndayjs.locale('zh-cn');\r\n/**\r\n * 日期处理类\r\n */\r\nclass DateUtil {\r\n\r\n  /**\r\n   * 空日期字符串（N版）\r\n   * @todo：兼容服务器端，不应该在devkit体现这种兼容，待移除\r\n   */\r\n  // static emptyDateTimeString = '0001-01-01T00:00:00';\r\n  static emptyDateTimeString = null;\r\n\r\n  /**\r\n   * 默认空日期字符串（ISO标准格式）\r\n   */\r\n  // static emptyISODateTimeString = '0001-01-01T00:00:00+00:00';\r\n  static emptyISODateTimeString = null;\r\n\r\n  /**\r\n   * 默认日期听格式\r\n   */\r\n  static defaultISOFormat = `yyyy-MM-dd'T'HH:mm:ssxxx`;\r\n\r\n  static defaultDisplayFormat = 'yyyy-MM-dd HH:mm:ss';\r\n\r\n  static defaultDateFormat = 'yyyy-MM-dd';\r\n\r\n  static defaultTimeFormat = 'HH:mm:ss';\r\n\r\n  /**\r\n   * 将日期（或日期字符串）转换为完整的的ISO格式的字符串\r\n   */\r\n  static formatISO(dateOrDateString: string | Date): string {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return this.emptyISODateTimeString;\r\n    }\r\n    const dateObj = this.parse(dateOrDateString);\r\n    return format(dateObj, this.defaultISOFormat);\r\n  }\r\n\r\n  /**\r\n   * 将日期（或日期字符串）转换为指定格式的字符串\r\n   * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串\r\n   * @param dateFormat 日期格式字符串\r\n   */\r\n  static format(dateOrDateString: string | Date, dateFormat?: string): string {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return this.emptyISODateTimeString;\r\n    }\r\n    const dateObj = this.parse(dateOrDateString);\r\n    dateFormat = dateFormat ? dateFormat : this.defaultDisplayFormat;\r\n    return format(dateObj, dateFormat);\r\n  }\r\n\r\n  static dateShow(dateOrDateString: string | Date, type: string) {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return this.emptyISODateTimeString;\r\n    }\r\n    if (!type || \"\" === type) {\r\n      return;\r\n    }\r\n    return this[type] && this[type](dateOrDateString)\r\n  }\r\n\r\n  static dateOperation(dateOrDateString: string | Date, options) {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return this.emptyISODateTimeString;\r\n    }\r\n    const { type = \"\", option } = options;\r\n    if (!type || \"\" === type) {\r\n      return;\r\n    }\r\n    if ('isSame' === type) {\r\n      return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity'])\r\n    }\r\n    if ('isBefore' === type) {\r\n      return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity'])\r\n    }\r\n    if ('isAfter' === type) {\r\n      return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity'])\r\n    }\r\n    if ('isBetween' === type ) {\r\n      return this[type] && this[type](dateOrDateString, options['targetDate'], options['targetDate2'], options['granularity'], options['contains'])\r\n    }\r\n    if (!option) {\r\n      return this[type] && this[type](dateOrDateString)\r\n    }\r\n    return this[type] && this[type](dateOrDateString, option)\r\n  }\r\n\r\n\r\n\r\n  static relativeTime(dateOrDateString: string | Date, option) {\r\n    dayjs.extend(relativeTime)\r\n    const dateObj = dayjs(dateOrDateString);\r\n    if (!option) {\r\n      return dayjs(dateObj).fromNow()\r\n    }\r\n    return dayjs(dateObj).fromNow(option)\r\n  }\r\n\r\n  static isToday(dateOrDateString: string | Date) {\r\n    const todayDate = new Date();\r\n    const dateObj = dayjs(dateOrDateString);\r\n    return this.isSame(dateObj, todayDate, 'date');\r\n  }\r\n\r\n  static calendar(dateOrDateString: string | Date, option) {\r\n    const dateObj = dayjs(dateOrDateString);\r\n    dayjs.extend(Calendar)\r\n    if (option) {\r\n      return dayjs().calendar(dateObj, { ...option })\r\n    }\r\n    return dayjs().calendar(dateObj, {\r\n      sameDay: '[今天] HH:mm',\r\n      nextDay: '[明天] HH:mm',\r\n      lastDay: '[昨天] HH:mm',\r\n      sameElse: 'YYYY-MM-DD'\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * 创建日期\r\n   * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串\r\n   */\r\n  static parse(dateOrDateString: string | Date): Date {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return null;\r\n    }\r\n\r\n    if (this.isDate(dateOrDateString) === true) {\r\n      return dateOrDateString as Date;\r\n    }\r\n\r\n    return parseISO(dateOrDateString as string);\r\n  }\r\n\r\n  /**\r\n   * 是否是日期对象\r\n   */\r\n  static isDate(date: any): boolean {\r\n    return isDate(date);\r\n  }\r\n\r\n  /**\r\n   * 是否是空日期或者空日期字符串\r\n   * @param dateOrDateString 日期或日期字符串\r\n   */\r\n  static isEmptyDateOrDateString(dateOrDateString: string | Date) {\r\n    if (this.isDate(dateOrDateString) === true) {\r\n      return this.isEmptyDate(dateOrDateString as Date);\r\n    }\r\n    return this.isEmptyDateString(dateOrDateString as string);\r\n  }\r\n\r\n  /**\r\n   * 是否为空日期字符串\r\n   * @param date 日期对象\r\n   */\r\n  static isEmptyDate(date: Date) {\r\n    if (!date) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 是否是空日期字符串\r\n   * @param dateString 日期字符串\r\n   */\r\n  static isEmptyDateString(dateString: string) {\r\n    if (!dateString || dateString.startsWith('0001-01-01') === true) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 两个日期是否相等\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @return 相等返回true，否则返回false\r\n   */\r\n  static isEqual(dateOrDateString1: string | Date, dateOrDateString2: string | Date): boolean {\r\n    const dateObj1 = this.parse(dateOrDateString1);\r\n    const dateObj2 = this.parse(dateOrDateString2);\r\n    if (dateObj1 === dateObj2) {\r\n      return true;\r\n    }\r\n    return isEqual(dateObj1, dateObj2);\r\n  }\r\n\r\n  /**\r\n   * 两个日期是否相等\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @return 返回-1、0、1\r\n   */\r\n  static compare(dateOrDateString1: string | Date, dateOrDateString2: string | Date) {\r\n    const dateObj1 = this.parse(dateOrDateString1);\r\n    const dateObj2 = this.parse(dateOrDateString2);\r\n    if (this.isEqual(dateObj1, dateObj2) === true) {\r\n      return 0;\r\n    }\r\n\r\n    // 处理解析后为null的场景，null比所有有效日期小\r\n    if (!dateObj1 && this.isDate(dateObj2) === true) {\r\n      return -1;\r\n    }\r\n    if (!dateObj2 && this.isDate(dateObj1) === true) {\r\n      return 1;\r\n    }\r\n\r\n    return compareAsc(dateObj1, dateObj2);\r\n  }\r\n\r\n\r\n  /**\r\n   * \r\n   * @param currentDate 当前日期\r\n   * @param targetDate 目标日期\r\n   * @param type 比较类型 date\tD\t天00:00 day\td\t星期00:00 month\tM\t月第一天00:00 year\ty\t1月1日00点 week\tw\t周第一天00:00hour\th\t00:00:00minute\tm\t00:00second\ts\t00millisecond\tms\t0\r\n   * @returns \r\n   */\r\n  static isSame(currentDate, targetDate, type?) {\r\n    if (type) {\r\n      return dayjs(currentDate).isSame(dayjs(targetDate), type)\r\n    }\r\n    return dayjs(currentDate).isSame(dayjs(targetDate));\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param currentDate 当前日期\r\n   * @param targetDate 目标日期\r\n   * @returns boolean\r\n   */\r\n  static isBefore(currentDate, targetDate, type?) {\r\n    if (type) {\r\n      return dayjs(currentDate).isBefore(dayjs(targetDate), type)\r\n    }\r\n    return dayjs(currentDate).isBefore(dayjs(targetDate));\r\n  }\r\n\r\n  /**\r\n * \r\n * @param currentDate 当前日期\r\n * @param targetDate 目标日期\r\n * @returns boolean\r\n */\r\n  static isAfter(currentDate, targetDate, type?) {\r\n    if (type) {\r\n      return dayjs(currentDate).isAfter(dayjs(targetDate), type)\r\n    }\r\n    return dayjs(currentDate).isAfter(dayjs(targetDate));\r\n  }\r\n\r\n\r\n  /**\r\n   * \r\n   * @param currentDate \r\n   * @param targetDate1 \r\n   * @param targetDate2 \r\n   * @returns \r\n   */\r\n  static isBetween(currentDate, targetDate1, targetDate2, type, contains) {\r\n    dayjs.extend(IsBetween)\r\n    if (type) {\r\n      return dayjs(currentDate).isBetween(dayjs(targetDate1), dayjs(targetDate2), type, contains);\r\n    }\r\n    return dayjs(currentDate).isBetween(dayjs(targetDate1), dayjs(targetDate2), null, contains);\r\n  }\r\n}\r\n\r\nexport { DateUtil };\r\n\r\n","class ArrayUtil {\r\n\r\n  /**\r\n   * 从数组中删除一项\r\n   */\r\n  public static remove(arr: any[], itemToRemove: any): void {\r\n    const indexToRemove = arr.findIndex((item: any) => {\r\n      return item === itemToRemove;\r\n    });\r\n    this.removeByIndex(arr, indexToRemove);\r\n  }\r\n  \r\n  /**\r\n   * 从数组中删除indexToRemove对应的项\r\n   * @param index \r\n   */\r\n  public static removeByIndex(arr: any[], indexToRemove: number) {\r\n    if (!arr || arr[indexToRemove] !== undefined) {\r\n      \r\n    }\r\n    arr.splice(indexToRemove, 1);\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { ArrayUtil };","class ObjectUtil {\r\n\r\n  /**\r\n   * 检查是否是简单对象\r\n   */\r\n  public static isPlainObject(value): boolean {\r\n    if (!(typeof value === 'object' && value !== null) || Object.prototype.toString.call({}) !== '[object Object]') {\r\n      return false;\r\n    }\r\n    if (Object.getPrototypeOf(value) === null) {\r\n      return true;\r\n    }\r\n    let proto = value;\r\n    while (Object.getPrototypeOf(proto) !== null) {\r\n      proto = Object.getPrototypeOf(proto);\r\n    }\r\n    return Object.getPrototypeOf(value) === proto;\r\n  }\r\n}\r\n\r\nexport { ObjectUtil };\r\n","/**\r\n * 数据路径处理\r\n */\r\nclass BindingPathConverter {\r\n\r\n  /**\r\n   * (BindingPathString | BindingPathArray) => BindingPathArray\r\n   * @param bindingPath BindingPath的字符串或者数组格式\r\n   * @return BindingPath数组\r\n   */\r\n  public static toBindingPathArray(bindingPath: string | string[]): string[] {\r\n    let bindingPathArray: string[];\r\n    if (typeof bindingPath === 'string') {\r\n      bindingPathArray = bindingPath.split('/').filter((part: string) => {\r\n        return part !== '';\r\n      });\r\n      return bindingPathArray;\r\n    } else {\r\n      bindingPathArray = bindingPath.concat([]);\r\n    }\r\n\r\n    return bindingPathArray;\r\n  }\r\n\r\n  /**\r\n   * BindingPathArray => BindingPathString\r\n   */\r\n  public static toBindingPathString(bindingPathArray: string[]): string {\r\n    return '/' + bindingPathArray.join('/');\r\n  }\r\n}\r\n\r\nexport { BindingPathConverter };\r\n","import { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * BindingPath比较器\r\n */\r\nclass BindingPathComparer {\r\n\r\n  /**\r\n   * 是否相等\r\n   */\r\n  public static isEqual(srcPath: string | string[], dstPath: string | string[]) {\r\n    const srcPathArray = BindingPathConverter.toBindingPathArray(srcPath);\r\n    const dstPathArray = BindingPathConverter.toBindingPathArray(dstPath);\r\n\r\n    const isEqual = srcPathArray.every((srcPathItem: string, srcPathIndex: number) => {\r\n      return srcPathItem === dstPathArray[srcPathIndex];\r\n    });\r\n\r\n    return isEqual;\r\n  }\r\n\r\n  /**\r\n   * 是否是父路径\r\n   */\r\n  public static isParent(childPath: string | string[], parentPath: string | string[]): boolean {\r\n\r\n    const childPathArray  = BindingPathConverter.toBindingPathArray(childPath);\r\n    const parentPathArray = BindingPathConverter.toBindingPathArray(parentPath);\r\n\r\n    // 长度差1个\r\n    if (childPathArray.length !== parentPathArray.length + 1) {\r\n      return;\r\n    }\r\n\r\n    return this.isAncestor(childPath, parentPath);\r\n  }\r\n\r\n  /**\r\n   * 是否是祖先路径\r\n   */\r\n  public static isAncestor(descendantPath: string | string[], ancestorPath: string | string[]): boolean {\r\n    const descendantPathArray = BindingPathConverter.toBindingPathArray(descendantPath);\r\n    const ancestorPathArray   = BindingPathConverter.toBindingPathArray(ancestorPath);\r\n\r\n    if (descendantPath.length <= ancestorPathArray.length) {\r\n      return false;\r\n    }\r\n\r\n    const isAncestor = ancestorPathArray.every((ancestorPathItem: string, ancestorPathIndex: number) => {\r\n      return ancestorPathItem === descendantPathArray[ancestorPathIndex];\r\n    });\r\n\r\n    return isAncestor;\r\n  }\r\n\r\n}\r\n\r\nexport { BindingPathComparer };\r\n","import { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * BindingPath遍历器\r\n */\r\nclass BindingPathTraverser {\r\n\r\n  /**\r\n   * 获取叶子节点的Path\r\n   */\r\n  public static getLeafPathString(bindingPath: string | string[]): string {\r\n    const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    return bindingPathArray.pop();\r\n  }\r\n\r\n  /**\r\n   * 获取父路径\r\n   */\r\n  public static getParentPathString(bindingPath: string | string[]): string {\r\n    const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    bindingPathArray.pop();\r\n    return '/' + bindingPathArray.join('/');\r\n  }\r\n}\r\n\r\nexport { BindingPathTraverser };\r\n","/**\r\n * 变更相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\n/**\r\n * 绑定数据变更\r\n */\r\nexport interface Change {\r\n\r\n  /**\r\n   * 变更类型\r\n   */\r\n  type: ChangeType;\r\n\r\n  /**\r\n   * 变更路径\r\n   */\r\n  path: string[];\r\n\r\n  /**\r\n   * 变更后的值\r\n   */\r\n  value?: any;\r\n\r\n  /**\r\n   * 变更前的值\r\n   */\r\n  preValue?: any;\r\n\r\n  /**\r\n   * 错误信息\r\n   */\r\n  errors?: any;\r\n\r\n  /**\r\n   * 验证后回调，会将验证结果传入\r\n   */\r\n  cb?: Function;\r\n\r\n  /**\r\n   * 是否提交过，为true时开启输入时验证\r\n   */\r\n  isSubmitted?: boolean;\r\n\r\n  /**\r\n   * 在grid中使用，如果存在id，则将errors在form中以\r\n   * {\r\n   *  [id]: errors\r\n   * }\r\n   * 的形式保存一份\r\n   */\r\n  id?: string;\r\n\r\n  isUdt?: boolean;\r\n\r\n  isGrid?: boolean;\r\n}\r\n\r\n/**\r\n * 绑定数据变更类型\r\n */\r\nexport enum ChangeType {\r\n  Load = 'Load',\r\n  Append = 'Append',\r\n  Remove = 'Remove',\r\n  SelectionChanged = 'SelectionChanged',\r\n  ValueChanged = 'ValueChanged',\r\n  UpdateErrors = 'UpdateErrors',\r\n  GlobalSelectionChanged = 'GlobalSelectionChanged',\r\n  /**\r\n   * 分页信息变化\r\n   */\r\n  PaginationInfoChange = 'PaginationInfoChange',\r\n}\r\n\r\n/**\r\n * 视图变更\r\n */\r\nexport interface ViewChange {\r\n  type: ViewChangeType;\r\n  path: string[];\r\n  value: any;\r\n  preValue?: any;\r\n}\r\n\r\n/**\r\n * 视图变更类型\r\n */\r\nexport enum ViewChangeType {\r\n  ValueChanged\r\n}\r\n\r\n/**\r\n * Form值变化事件\r\n */\r\nexport interface FormValueChange {\r\n  path: string[]; // 字段路径\r\n  value: any; // 新值\r\n  preValue?: any; // 旧值\r\n  command: string; // 监听命令\r\n  entityChanged: boolean; // 实体是否已改变\r\n}\r\n\r\n/**\r\n * 实体值变化事件\r\n */\r\nexport interface EntityValueChange {\r\n  paths: string[]; // 字段路径\r\n  value: any; // 新值\r\n  preValue?: any; // 旧值\r\n  changed: boolean; // 实体是否已改变\r\n}","/**\r\n * 绑定属性相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\n/**\r\n * 属性类型\r\n */\r\nexport enum BindingPropertyType {\r\n\r\n  /**\r\n   * 简单类型\r\n   */\r\n  Plain  = 'Plain',\r\n\r\n  /**\r\n   * 对象类型\r\n   */\r\n  Object = 'Object',\r\n\r\n  /**\r\n   * 列表类型\r\n   */\r\n  List   = 'List',\r\n\r\n  /**\r\n   * 动态类型\r\n   */\r\n  Dynamic = 'Dynamic'\r\n}\r\n\r\n\r\n/**\r\n * 绑定属性\r\n */\r\nexport interface BindingProperty {\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 属性类型\r\n   */\r\n  type: BindingPropertyType;\r\n\r\n  /**\r\n   * 对应实体类型，当属性类型为Object、List类型时，设置该属性。\r\n   */\r\n  entityType?: any;\r\n\r\n  /**\r\n   * 是否为主键\r\n   */\r\n  isPrimaryKey?: boolean;\r\n\r\n  /**\r\n   * 启用多语录入\r\n   */\r\n  enableMultiLangInput?: boolean;\r\n\r\n}\r\n","import {Type} from '../core/index';\r\nimport { Entity, FieldMetadataUtil } from '../entity/index';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\n\r\n/**\r\n * 属性工具类\r\n */\r\nclass PropertyUtil {\r\n\r\n  /**\r\n   * 获取实体上的属性集合，并将他们转换成BindingProperty集合\r\n   * @param  entityType 实体类型\r\n   * @returns 绑定属性集合\r\n   */\r\n  static getProperties(entityType: Type<Entity>): BindingProperty[] {\r\n    const properties = [];\r\n\r\n    // Plain\r\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\r\n    Object.keys(ngFieldProperties).forEach((propertyName: string) => {\r\n      const ngFieldProperty = ngFieldProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Plain,\r\n        isPrimaryKey: ngFieldProperty.primary,\r\n        isForeignKey: ngFieldProperty.foreign,\r\n        enableMultiLangInput: ngFieldProperty.enableMultiLangInput\r\n      });\r\n    });\r\n\r\n    // Object\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propertyName: string) => {\r\n      const ngObjectProperty = ngObjectProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Object,\r\n        entityType: ngObjectProperty.type\r\n      });\r\n    });\r\n\r\n    // List\r\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\r\n    Object.keys(ngListProperties).forEach((propertyName: string) => {\r\n      const ngListProperty = ngListProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.List,\r\n        entityType: ngListProperty.type\r\n      });\r\n    });\r\n\r\n    // Dynamics\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propertyName: string) => {\r\n      const ngDynamicProperty = ngDynamicProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Dynamic,\r\n        entityType: ngDynamicProperty.type\r\n      });\r\n    });\r\n\r\n    return properties;\r\n  }\r\n\r\n  static getDynamicProperties(dynamicData: any): BindingProperty[] {\r\n    const properties = [];\r\n    Object.keys(dynamicData).forEach((propertyName: string) => {\r\n      if (dynamicData.hasOwnProperty(propertyName)) {\r\n        if (dynamicData[propertyName] instanceof Object) {\r\n          properties.push({\r\n            name: propertyName,\r\n            type: BindingPropertyType.Dynamic,\r\n            entityType: null\r\n          });\r\n        } else {\r\n          properties.push({\r\n            name: propertyName,\r\n            type: BindingPropertyType.Plain,\r\n            isPrimaryKey: false,\r\n            isForeignKey: false\r\n          });\r\n        }\r\n      }\r\n    });\r\n    return properties;\r\n  }\r\n  /**\r\n   * 根据属性名获取属性\r\n   */\r\n  static getPropertyByName(properties: BindingProperty[], propertyName: string): BindingProperty {\r\n    const targetProperty =  properties.find((property: BindingProperty) => {\r\n      return property.name === propertyName;\r\n    });\r\n    return targetProperty;\r\n  }\r\n\r\n  /**\r\n   * 获取实体主键名\r\n   * @param properties 属性集合\r\n   * @returns 主键名\r\n   */\r\n  static getPrimaryKey(properties: BindingProperty[]): string {\r\n\r\n    // 实体必须有主键，如果没有主键在构造实体的时候就已经报错，这里不需要再进行检查\r\n    const primaryProperty = properties.find((property: BindingProperty) => {\r\n      return property.isPrimaryKey === true;\r\n    });\r\n    return primaryProperty ? primaryProperty.name : '';\r\n  }\r\n\r\n}\r\n\r\nexport { PropertyUtil };\r\n","/**\r\n * BindingObject相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Subject, Observable, of } from 'rxjs';\r\n\r\nimport { Change, ChangeType, ViewChange, ViewChangeType } from './changes';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingList } from './binding_list';\r\nimport { PropertyUtil } from './property_util';\r\n\r\ninterface InvokeOnValueChange {\r\n  (preValue, value, entityChanged: boolean): Observable<boolean>;\r\n}\r\n\r\n/**\r\n * BindingObject是Entity在绑定层的一个影射，它将Entity内的数据转换为不可变对象，并用于界面绑定。\r\n */\r\nclass BindingObject {\r\n\r\n  /**\r\n   * immutable值对象\r\n   */\r\n  private innerValues: Map<string, any>;\r\n\r\n  /**\r\n   * 父对象或父列表\r\n   */\r\n  public parent: BindingList | BindingObject;\r\n\r\n  /**\r\n   * 实体引起的变更\r\n   */\r\n  public changes: Subject<Change>;\r\n\r\n  /**\r\n   * 界面层引起的变更流\r\n   */\r\n  public viewChanges: Subject<ViewChange>;\r\n\r\n  /**\r\n   *  属性集合\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 主键名\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 主键值\r\n   */\r\n  public get primaryKeyValue() {\r\n    return this.primaryKey ? this.getValue(this.primaryKey) : '';\r\n  }\r\n\r\n  /**\r\n   * 标识是否提交过\r\n   */\r\n  public isShowValidationMsg = false;\r\n\r\n  /**\r\n   * 以{ [propertyName]: FormControl }的形式存放每条数据的control\r\n   */\r\n  public controlMap: any = {};\r\n\r\n  /**\r\n   * 设置是否提交过\r\n   */\r\n  public setShowValidationMsg(flag: boolean) {\r\n    this.isShowValidationMsg = flag;\r\n  }\r\n\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param properties 属性集合\r\n   */\r\n  constructor(properties: BindingProperty[]) {\r\n    this.properties = properties;\r\n    this.primaryKey = PropertyUtil.getPrimaryKey(properties);\r\n\r\n    this.innerValues = new Map<string, any>();\r\n    this.changes = new Subject<Change>();\r\n    this.viewChanges = new Subject<ViewChange>();\r\n  }\r\n\r\n  /**\r\n   * 根据属性名获取属性值\r\n   * @param   propertyName 属性名\r\n   * @returns 属性值\r\n   */\r\n  public getValue(propertyName: string): any {\r\n    return this.innerValues.get(propertyName);\r\n  }\r\n\r\n  /**\r\n   * 设置属性值\r\n   * @param propertyName        属性名\r\n   * @param propertyValue       属性值\r\n   * @param emitEventToView     是否通知View层去更新界面，默认为false\r\n   * @param emitEventToEntity   是否通知Entity层去更新值，默认为false\r\n   * @param errors              错误消息\r\n   * @param invokeOnValueChange 值变化事件执行句柄\r\n   */\r\n  public setValue(\r\n    propertyName: string, propertyValue: any,\r\n    emitEventToView: boolean = false, emitEventToEntity: boolean = false,\r\n    errors?: any, invokeOnValueChange?: InvokeOnValueChange\r\n  ): void {\r\n\r\n    const oldPropertyValue = this.getValue(propertyName);\r\n\r\n    // 由于特定原因（@邵珠强），无法屏蔽oldPropertyValue === propertyValue\r\n    if (oldPropertyValue === propertyValue) {\r\n      return;\r\n    }\r\n\r\n    if (!invokeOnValueChange || oldPropertyValue === propertyValue) {\r\n      // 设定缺省\r\n      invokeOnValueChange = function (preValue, value, entityChanged: boolean) {\r\n        return of(true);\r\n      };\r\n    }\r\n\r\n    if (emitEventToEntity === true) {\r\n      // BUG 322301，删除@2019.08.10; 如果无对应实体，则中止值传递; 这种情况发生在带从表的单据新增，从表响应Load变化的情况；\r\n      // if(!this.innerValues.has(propertyName)) {\r\n      //   return;\r\n      // }\r\n      // 执行实体值变化前事件\r\n      invokeOnValueChange(oldPropertyValue, propertyValue, false).subscribe((result) => {\r\n        if (result) {\r\n          // 如果成功，执行变化，并通知实体变化\r\n          this.innerValues = this.innerValues.set(propertyName, propertyValue);\r\n          const viewChange = {\r\n            type: ViewChangeType.ValueChanged,\r\n            path: [propertyName],\r\n            value: propertyValue,\r\n            errors: errors\r\n          };\r\n          this.viewChanges.next(viewChange);\r\n          // 如果需要通知视图，通知视图相应修改\r\n          if (emitEventToView === true) {\r\n            this.changes.next({\r\n              type: ChangeType.ValueChanged,\r\n              path: [propertyName],\r\n              value: propertyValue,\r\n              id: this.primaryKeyValue,\r\n              errors: errors\r\n            });\r\n          }\r\n          // 执行实体值变化后事件\r\n          invokeOnValueChange(oldPropertyValue, propertyValue, true).subscribe();\r\n        } else {\r\n          // 如果失败，不再通知实体变化\r\n          // 并执行界面回滚操作\r\n          this.changes.next({\r\n            type: ChangeType.ValueChanged,\r\n            path: [propertyName],\r\n            value: oldPropertyValue,\r\n            id: this.primaryKeyValue,\r\n            errors: errors\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      // `emitEventToEntity === false`, 则认定实体值已经发生变化，通知视图变化，并触发实体值变化后事件\r\n      this.innerValues = this.innerValues.set(propertyName, propertyValue);\r\n      if (emitEventToView === true) {\r\n        this.changes.next({\r\n          type: ChangeType.ValueChanged,\r\n          path: [propertyName],\r\n          value: propertyValue,\r\n          id: this.primaryKeyValue,\r\n          errors: errors\r\n        });\r\n      }\r\n      // 执行实体值变化后事件\r\n      invokeOnValueChange(oldPropertyValue, propertyValue, true).subscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 将BindingObject实例转换成JSON对象\r\n   */\r\n  public toJSON(options?: any): any {\r\n    const langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n    const result = {};\r\n    this.properties.forEach((property: BindingProperty) => {\r\n      const propName = property.name;\r\n      if (property.type === BindingPropertyType.List) {\r\n        const list: BindingList = this[propName];\r\n        result[propName] = list.toJSON(options);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        const object: BindingObject = this[propName];\r\n        result[propName] = object.toJSON(options);\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        const object: BindingObject = this[propName];\r\n        result[propName] = object.toJSON(options);\r\n      } else {\r\n\r\n        // 1、对于多语录入字段；\r\n        // 2、传入ignoreMultiLangInput标志，则取当前语言的值给控件。\r\n        if (options && options.ignoreMultiLangInput === true && property.enableMultiLangInput === true) {\r\n          const multiLangValueObj = this.getValue(propName);\r\n          if (multiLangValueObj) {\r\n            result[propName] = multiLangValueObj[langCode];\r\n          } else {\r\n            result[propName] = multiLangValueObj;\r\n          }\r\n        } else {\r\n          result[propName] = this.getValue(propName);\r\n        }\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport { BindingObject, InvokeOnValueChange };\r\n","/**\r\n * 绑定列表工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { BindingList } from './binding_list';\r\nimport { BindingProperty } from './binding_property';\r\n\r\n/**\r\n * BindingList工厂用于创建一个空的BindingList对象，并将当前行的属性影射到BindingList对象上。\r\n *\r\n * **示例代码**\r\n * ```ts\r\n * const deptProperties: BindingProperty[] = PropertyUtil.getProperties(DeptEntity);\r\n * const deptList = BindingListFactory.create(deptProperties);\r\n * ```\r\n */\r\nclass BindingListFactory {\r\n\r\n  /**\r\n   * 创建BindingList实例，并扩展其属性\r\n   * @param bindingProperties 绑定属性集合\r\n   */\r\n  static create(bindingProperties: BindingProperty[]): BindingList {\r\n    const bindingList = new BindingList(bindingProperties);\r\n    this.extendProperties(bindingList, bindingProperties);\r\n    return bindingList;\r\n  }\r\n\r\n  /**\r\n   * 扩展BindingList属性，将当前行上的属性映射到列表上\r\n   * @param bindingList       要扩展的绑定列表\r\n   * @param bindingProperties 绑定属性集合\r\n   */\r\n  static extendProperties(bindingList: BindingList, bindingProperties: BindingProperty[]) {\r\n\r\n    bindingProperties.forEach((bindingProperty: BindingProperty) => {\r\n      const propertyName = bindingProperty.name;\r\n      Object.defineProperty(bindingList, propertyName, {\r\n        get: () => {\r\n          return bindingList.currentItem[propertyName];\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport { BindingListFactory };\r\n\r\n","/**\r\n * 绑定对象工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Change } from './changes';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingListFactory } from './binding_list_factory';\r\n\r\n/**\r\n * BindingObject工厂用于创建一个空的BindingObject对象，并对其属性进行扩展。\r\n *\r\n * **扩展属性处理**\r\n *\r\n * 对于要扩展的属性（BindingProperty）有三种处理：\r\n * - 普通属性：初始化为一个undefined，并包装get、set方法，通过set方法监听变更；\r\n * - 对象属性：初始化为一个空的BindingObject对象，并监听子对象的变更；\r\n * - 列表属性：初始化为一个空的BindingList对象，并监听子列表的变更；\r\n *\r\n * **示例代码**\r\n *\r\n * ```ts\r\n *  const empProperties = PropertyUtil.getProperties(EmpEntity);\r\n * const empBindingObject = BindingObjectFactory.create(properties);\r\n * ```\r\n */\r\nclass BindingObjectFactory {\r\n\r\n  /**\r\n   * 创建BindingObject实例\r\n   * @param properties 要扩展的属性集合\r\n   * @returns 带扩展属性的空BindingObject对象\r\n   * @\r\n   */\r\n  static create(properties: BindingProperty[]): BindingObject {\r\n    const object = new BindingObject(properties);\r\n    this.extendProperties(object, properties);\r\n    return object;\r\n  }\r\n\r\n  static createDynamicBindingObject(data: any): BindingObject {\r\n    const properties = PropertyUtil.getDynamicProperties(data);\r\n    const object = new BindingObject(properties);\r\n    this.extendProperties(object, properties);\r\n    return object;\r\n  }\r\n\r\n  /**\r\n   * 扩展属性绑定对象的属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 绑定属性集合\r\n   */\r\n  static extendProperties(object: BindingObject, properties: BindingProperty[]): void {\r\n\r\n    // 扩展BindingObject属性\r\n    properties.forEach((property: BindingProperty) => {\r\n      if (property.type === BindingPropertyType.List) {\r\n        this.extendListProperty(object, property);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        this.extendObjectProperty(object, property);\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        this.extendDynamicObjectProperty(object, property);\r\n      } else {\r\n        this.extendPlainProperty(object, property);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展列表类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 列表类型的绑定属性集合\r\n   */\r\n  static extendListProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    const childListProperties = PropertyUtil.getProperties(property.entityType);\r\n    const childList = BindingListFactory.create(childListProperties);\r\n\r\n    // 指定子List的parent、监听子List的changes事件\r\n    childList.parent = object;\r\n    childList.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      object.changes.next(change);\r\n    });\r\n\r\n    // 将子的BindingList实例赋值给当前属性\r\n    Object.defineProperty(object, propertyName, {\r\n      value: childList\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展对象类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 对象类型的绑定属性集合\r\n   */\r\n  static extendObjectProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    const childObjectProperties = PropertyUtil.getProperties(property.entityType);\r\n    const childObject = this.create(childObjectProperties);\r\n\r\n    // 指定子Object的parent、监听子Object的changes事件\r\n    childObject.parent = object;\r\n    childObject.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      object.changes.next(change);\r\n    });\r\n\r\n    Object.defineProperty(object, propertyName, {\r\n      value: childObject\r\n    });\r\n  }\r\n\r\n  static extendDynamicObjectProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    object[propertyName] = null;\r\n  }\r\n\r\n  static attachDynamicObjectProperty(object: BindingObject, propertyName: string, dynamicObject: BindingObject) {\r\n    dynamicObject.parent = object;\r\n    dynamicObject.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      object.changes.next(change);\r\n    });\r\n    Object.defineProperty(object, propertyName, {\r\n      value: dynamicObject\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展简单类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 简单类型的绑定属性集合\r\n   */\r\n  static extendPlainProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    Object.defineProperty(object, propertyName, {\r\n      get: () => {\r\n        return object.getValue(propertyName);\r\n      },\r\n      set: (value: any) => {\r\n        const oldValue = object.getValue(propertyName);\r\n        if (value === oldValue) {\r\n          return;\r\n        }\r\n        object.setValue(propertyName, value, true, true);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport { BindingObjectFactory };\r\n","import { Subject } from 'rxjs';\r\n\r\nimport { ArrayUtil } from '../utils/index';\r\nimport { Change, ChangeType } from './changes';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingProperty } from './binding_property';\r\nimport { BindingObjectFactory } from './binding_object_factory';\r\nimport { PropertyUtil } from './property_util';\r\n\r\n/**\r\n * BindingList是一个BindingObject集合\r\n */\r\nclass BindingList {\r\n\r\n  /**\r\n   * immutable的BindingObject列表\r\n   */\r\n  private innerList: BindingObject[];\r\n\r\n  private emptyCurrentItem: BindingObject;\r\n\r\n  /**\r\n   * 关联实体的属性集合\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 主键名\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 父对象\r\n   */\r\n  public parent: BindingObject;\r\n\r\n  /**\r\n   * 变更流\r\n   */\r\n  public changes: Subject<Change>;\r\n\r\n  /**\r\n   * 当前行对应的绑定对象的内码\r\n   */\r\n  public currentId: string;\r\n\r\n  //#region 分页相关\r\n\r\n  /**\r\n   * 分页信息\r\n   */\r\n  public _paginationInfo: any = null;\r\n\r\n  set paginationInfo(sPaginationInfo: any) {\r\n    this._paginationInfo = sPaginationInfo;\r\n    if (this._paginationInfo === sPaginationInfo) {\r\n      return;\r\n    }\r\n    this.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: [],\r\n      value: this._paginationInfo\r\n    });\r\n  }\r\n\r\n  get paginationInfo(): any {\r\n    return this._paginationInfo;\r\n  }\r\n  /**\r\n   * 获取页码\r\n   */\r\n  get pageIndex() {\r\n    if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty(\"pageIndex\")) {\r\n      return this.paginationInfo.pageIndex;\r\n    }\r\n    return 1;\r\n  }\r\n  /**\r\n   * 获取分页大小\r\n   */\r\n  get pageSize() {\r\n    if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty(\"pageSize\")) {\r\n      return this.paginationInfo.pageSize;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * 获取数据总项数\r\n   */\r\n  get total() {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.total || this.paginationInfo.totalCount;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 获取跳过的数据条数\r\n   */\r\n  get skip() {\r\n    const pageIndex = this.pageIndex;\r\n    const pageSize = this.pageSize;\r\n    return (pageIndex - 1) * pageSize;\r\n  }\r\n\r\n  /**\r\n   * 前台设置分页信息\r\n   * @param skip skip\r\n   * @param take take\r\n   */\r\n  public setPaginationInfo(skip: number, take: number) {\r\n    this.paginationInfo = Object.assign({}, this.paginationInfo, {\r\n      pageSize: take,\r\n      pageIndex: skip / take + 1\r\n    });\r\n    /*this.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: [],\r\n      value: this.paginationInfo\r\n    });*/\r\n  }\r\n  //#endregion\r\n\r\n\r\n\r\n  /**\r\n   * 当前行对应的绑定对象\r\n   * 如果currentId为null，则创建一个空结构，防止绑定报错；\r\n   */\r\n  public get currentItem(): BindingObject {\r\n    const currentItem = this.findById(this.currentId);\r\n    if (!currentItem) {\r\n      if (!this.emptyCurrentItem) {\r\n        this.emptyCurrentItem = BindingObjectFactory.create(this.properties);\r\n      }\r\n      return this.emptyCurrentItem;\r\n    }\r\n    return currentItem;\r\n  }\r\n\r\n  /**\r\n   * 绑定对象的数量\r\n   */\r\n  public get length(): number {\r\n    return this.innerList.length;\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(properties: BindingProperty[]) {\r\n    this.properties = properties;\r\n    this.primaryKey = PropertyUtil.getPrimaryKey(properties);\r\n\r\n    this.changes = new Subject<Change>();\r\n    this.innerList = [];\r\n    this.currentId = null;\r\n  }\r\n\r\n  /**\r\n   * 添加[Symbol.iterator]，使之能通过for of遍历\r\n   */\r\n  [Symbol.iterator]() {\r\n    const self = this;\r\n    let index = -1;\r\n    const size = this.innerList.length;\r\n\r\n    return {\r\n      next: function () {\r\n        index++;\r\n        if (index < size) {\r\n          return {\r\n            done: false,\r\n            value: self.innerList[index]\r\n          };\r\n        }\r\n        return { done: true, value: undefined };\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 批量加载绑定对象，加载之前先清空绑定列表，并重置当前行，加载之后将第一行设置为默认当前行。\r\n   * @param objects 要加载绑定对象数组\r\n   */\r\n  public load(objects: BindingObject[]): void {\r\n\r\n    // 重置列表\r\n    this.innerList = [];\r\n\r\n    if (objects.length !== 0) {\r\n      // 加载数据\r\n      objects.forEach((object: BindingObject) => {\r\n        this.add(object);\r\n      });\r\n\r\n      // 设置默认当前行\r\n      const currentItem = this.findById(this.currentId);\r\n      if (!currentItem) {\r\n        const firstId = objects[0][this.primaryKey];\r\n        this.setCurrentId(firstId, false, false);\r\n      }\r\n    } else {\r\n      this.currentId = null;\r\n    }\r\n\r\n    // 触发事件\r\n    this.changes.next({\r\n      type: ChangeType.Load,\r\n      path: [],\r\n      value: objects\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 批量追加绑定对象，追加之后将最后一个追加的绑定对象设置为当前行。\r\n   * @param objects 要加载绑定对象数组\r\n   */\r\n  public append(objects: BindingObject[]): void {\r\n\r\n    if (objects.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // 加载BindingObject\r\n    objects.forEach((object: BindingObject) => {\r\n      this.add(object);\r\n    });\r\n\r\n    // 当前行为新追加的最后1行\r\n    const lastId = objects[objects.length - 1][this.primaryKey];\r\n    this.setCurrentId(lastId, true, true);\r\n\r\n    // 触发事件\r\n    this.changes.next({\r\n      type: ChangeType.Append,\r\n      path: [],\r\n      value: objects\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 添加绑定对象，并建立绑定对象和绑定列表之间的关联。\r\n   * @param object 绑定对象\r\n   */\r\n  public add(object: BindingObject) {\r\n    this.innerList.push(object);\r\n    object.parent = this;\r\n\r\n    // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径\r\n    object.changes.subscribe((change: Change) => {\r\n      this.changes.next(change);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 删除主键值数组对应的绑定对象。\r\n   * @param ids 主键值数组\r\n   */\r\n  public removeByIds(ids: Array<string>): void {\r\n    if (!ids || ids.length === 0) {\r\n      return;\r\n    }\r\n\r\n    let nextCurrentId = this.currentId;\r\n    ids.forEach((id: string) => {\r\n\r\n      // 如果当前行被删除，计算下一当前行\r\n      if (id === nextCurrentId) {\r\n        nextCurrentId = this.getCurrentIdBeforeDeleting();\r\n      }\r\n\r\n      // 删除对象，找不到时跳过\r\n      const index = this.getIndexById(id);\r\n      if (index === -1) {\r\n        return;\r\n      }\r\n      ArrayUtil.removeByIndex(this.innerList, index);\r\n    });\r\n\r\n    // 重新设置当前行\r\n    if (this.innerList.length === 0) {\r\n      this.currentId = null;\r\n    } else {\r\n      this.setCurrentId(nextCurrentId, false, false);\r\n    }\r\n\r\n    // 出发行删除事件\r\n    this.changes.next({\r\n      type: ChangeType.Remove,\r\n      path: [],\r\n      value: ids\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 清空\r\n   */\r\n  public clear() {\r\n    this.innerList = [];\r\n    this.currentId = null;\r\n    this.changes.next({\r\n      type: ChangeType.Remove,\r\n      path: [],\r\n      value: []\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 如果当前行被删除，删除之前重新计算当前行的位置，并返回下一当前行的主键值。\r\n   * - 如果被删除的行是最后1行，则上移1行；\r\n   * - 其他情况，下移1行。\r\n   */\r\n  public getCurrentIdBeforeDeleting(): string {\r\n    let nextIndex = -1;\r\n    const currentIndex = this.getIndexById(this.currentId);\r\n    if (currentIndex === this.length - 1) {\r\n      nextIndex = currentIndex - 1;\r\n    } else {\r\n      nextIndex = currentIndex + 1;\r\n    }\r\n    return this.getIdByIndex(nextIndex);\r\n  }\r\n\r\n  /**\r\n   * 根据主键值获取对应绑定对象\r\n   * @param   id 要查找的主键值\r\n   * @returns 找到时返回对应BindingObject， 找不到时返回null\r\n   */\r\n  public findById(id: string): BindingObject | null {\r\n    let target: BindingObject;\r\n    target = this.innerList.find((item) => {\r\n      return item.getValue(this.primaryKey) === id;\r\n    });\r\n    return target === undefined ? null : target;\r\n  }\r\n\r\n  /**\r\n   * 将主键值为id的绑定对象设置为当前行\r\n   * @param  id        要设置的主键值\r\n   * @param  emitEvent 是否发送当前行变更事件\r\n   */\r\n  public setCurrentId(id: string, emitEvent: boolean = true, emitGlobalEvent: boolean = true): void {\r\n    if (this.currentId === id) {\r\n      return;\r\n    }\r\n\r\n    // 不存在时设置为null\r\n    // const currentObj = this.findById(id);\r\n    // if (!currentObj) {\r\n    //   this.currentId = null;\r\n    // } else {\r\n    //   this.currentId = id;\r\n    // }\r\n\r\n    // @todo：找不到时按理应该设置为null，目前是直接返回，框架部分功能依赖该特性。\r\n    const currentObj = this.findById(id);\r\n    if (!currentObj) {\r\n      return;\r\n    }\r\n    this.currentId = id;\r\n\r\n    // 发出行切换事件\r\n    if (emitEvent === true) {\r\n      this.changes.next({\r\n        type: ChangeType.SelectionChanged,\r\n        path: [],\r\n        value: this.currentItem\r\n      });\r\n    }\r\n\r\n    // 是否发送全局的行切换事件\r\n    if (emitGlobalEvent === true) {\r\n      this.changes.next({\r\n        type: ChangeType.GlobalSelectionChanged,\r\n        path: [],\r\n        value: this.currentItem\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据主键值为id的绑定对象的索引\r\n   * @param id 主键值\r\n   * @returns 找到时返回对应的index，找不到时返回-1\r\n   */\r\n  public getIndexById(id: string): number {\r\n    return this.innerList.findIndex((obj: BindingObject) => {\r\n      return obj[this.primaryKey] === id;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 根据索引位置获取对应绑定对象的主键值\r\n   * @reutrn 找到时返回对应主键值，找不到返回null\r\n   */\r\n  public getIdByIndex(index: number): string {\r\n\r\n    if (index < 0 || index > this.length) {\r\n      return null;\r\n    }\r\n\r\n    const obj = this.innerList[index];\r\n    if (!obj) {\r\n      return null;\r\n    }\r\n\r\n    return obj[this.primaryKey];\r\n  }\r\n\r\n  /**\r\n   * 转换为BindingObject数组\r\n   */\r\n  public toArray(): BindingObject[] {\r\n    return this.innerList.concat([]);\r\n  }\r\n\r\n  /**\r\n   * 转换为JSON对象\r\n   * @returns 普通对象数组\r\n   */\r\n  public toJSON(options?: any): any[] {\r\n    const result = [];\r\n    this.innerList.forEach((obj: BindingObject) => {\r\n      result.push(obj.toJSON(options));\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 获取分页信息\r\n   * @param path 路径\r\n   * @param defaultValue 默认值\r\n   */\r\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n    if (!path || path === '/') {\r\n      return this.paginationInfo;\r\n    }\r\n    if (typeof path !== 'string') {\r\n      throw new Error('路径必须为字符串！');\r\n    }\r\n    path = path.substring(1);\r\n    const paths = path.split('/').filter(item => !!item && item.trim().length > 0).map(item => item.trim());\r\n    let config = this.paginationInfo;\r\n    paths.forEach(item => {\r\n      if (config && config.hasOwnProperty(item)) {\r\n        config = config[item];\r\n      } else {\r\n        config = null;\r\n      }\r\n    });\r\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n  }\r\n  /**\r\n   * 对bindingList就行排序\r\n   * @param string 排序字段\r\n   * @param directions 排序规则字段\r\n   * @param options 参数\r\n   */\r\n  public sortBy(fields: string | Array<string>, directions: string | Array<string>, options?: { [prop: string]: any }) {\r\n    if (!fields || fields.length < 1 || !directions || directions.length < 1) {\r\n      throw new Error('sortBy:argument error');\r\n    }\r\n    // 默认升序\r\n    const arrFields: Array<string> = typeof fields === 'string' ? fields.split(',') : fields || [];\r\n    const arrDirections: Array<string> = typeof directions === 'string' ? directions.split(',') : directions || [];\r\n    // 排序字段和排序方式应一致\r\n    if (arrFields.length !== arrDirections.length || arrFields.length < 1) {\r\n      throw new Error('sortBy:fields and directions not match');\r\n    }\r\n    // nage,age,total\r\n    const comparator = (props: Array<string>, orders: Array<string>) => (item1: BindingObject, item2: BindingObject) => {\r\n      for (const prop of props) {\r\n        const order = ['asc'].includes(orders[props.indexOf(prop)]) ? 1 : -1;\r\n        if (item1.getValue(prop) > item2.getValue(prop)) { return order * 1; }\r\n        if (item1.getValue(prop) < item2.getValue(prop)) { return order * -1; }\r\n      }\r\n      return 0;\r\n    };\r\n    this.innerList = this.innerList.sort(comparator(arrFields, arrDirections));\r\n  }\r\n}\r\n\r\nexport { BindingList };\r\n","import { Repository } from '../repository/index';\r\nimport { Entity, EntityList, PARENT_CLASS, FieldMetadataUtil } from '../entity/index';\r\nimport { Modification, ModifyType } from '../changeset/index';\r\nimport { ViewChange, Change, ChangeType } from './changes';\r\nimport { BindingList } from './binding_list';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingObjectFactory } from './binding_object_factory';\r\nimport { Pagination } from '../core/index';\r\nimport { BindingData } from './binding_data';\r\n\r\n/**\r\n * 实体操作工具类\r\n */\r\nclass EntityUtil {\r\n\r\n  /**\r\n   * 将entity的数据加载到bindingObject中，并保持两者同步。\r\n   * @param entity        实体对象\r\n   * @param bindingObject 绑定对象\r\n   */\r\n  static loadEntity(entity: Entity, bindingObject: BindingObject) {\r\n\r\n    // 遍历bindingObject的properties进行赋值\r\n    bindingObject.properties.forEach((property: BindingProperty) => {\r\n      const propertyName = property.name;\r\n      if (property.type === BindingPropertyType.List) {\r\n        this.loadEntityList(entity[propertyName] || entity[PARENT_CLASS], bindingObject[propertyName]);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        if (entity && entity[propertyName]) {\r\n          this.loadEntity(entity[propertyName], bindingObject[propertyName]);\r\n        }\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        if (entity && entity[propertyName]) {\r\n          const dynamicObject = BindingObjectFactory.createDynamicBindingObject(entity[propertyName].data);\r\n          BindingObjectFactory.attachDynamicObjectProperty(bindingObject, propertyName, dynamicObject);\r\n          this.loadEntity(entity[propertyName], bindingObject[propertyName]);\r\n        }\r\n      } else {\r\n        bindingObject.setValue(propertyName, entity[propertyName], false, false);\r\n      }\r\n    });\r\n\r\n    this.setUpEntityPipeline(entity, bindingObject);\r\n  }\r\n\r\n  /**\r\n   * 建立entity和bindingObject之间的关联\r\n   * @param entity        实体对象\r\n   * @param bindingObject 绑定对象\r\n   */\r\n  static setUpEntityPipeline(entity: Entity, bindingObject: BindingObject) {\r\n\r\n    // 监听entity变更\r\n    entity.onValueChanged.subscribe((modification: Modification) => {\r\n      if (modification.type !== ModifyType.ValueChange || modification.path.length === 0) {\r\n        return;\r\n      }\r\n      const propertyName = modification.path[modification.path.length - 1];\r\n      const primaryKeyPath = modification.path[modification.path.length - 2];\r\n\r\n      // 验证主键是否匹配\r\n      // 存在主键并且主键不是id时才检查（值对象、关联对象不检查）\r\n      if (bindingObject.primaryKey && bindingObject.primaryKey === 'id') {\r\n        const primaryKey = bindingObject.primaryKey;\r\n        const primaryKeyValue = bindingObject.getValue(primaryKey);\r\n        if (primaryKeyPath !== `${primaryKey}:${primaryKeyValue}`) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      // 值没有发生变化，不再设置\r\n      // TODO: 通过bindingObject修改entity属性值时，entity总会触发一个变更回来，如果不截获这个重复的变更，会导致重复或死循环\r\n      if (bindingObject.getValue(propertyName) === modification.value) {\r\n        return;\r\n      }\r\n      bindingObject.setValue(propertyName, modification.value, true, false, modification.errors);\r\n    });\r\n\r\n    // 监听bindingObject变更\r\n    bindingObject.viewChanges.subscribe((viewChange: ViewChange) => {\r\n      const value = viewChange.value;\r\n      const propertyName = viewChange.path[0];\r\n\r\n      let pathPrefix = '';\r\n      const pathData = entity.getPaths();\r\n      const paths = pathData.path;\r\n      let id = bindingObject['id'];\r\n      if (pathData.isUdt) {\r\n        // grid中udt没有id，从父级中取出id，以便存放验证信息\r\n        const getParentId = (target: any) => {\r\n          let parentId = '';\r\n          const findId = (item: any) => {\r\n            if (item && item && item['id']) {\r\n              parentId = item['id'];\r\n              return;\r\n            } else if (item['parent']) {\r\n              findId(item['parent']);\r\n            }\r\n          };\r\n          findId(target);\r\n          return parentId;\r\n        };\r\n        id = getParentId(bindingObject);\r\n        if (pathData.isGrid) {\r\n          // grid 将从表主字段去除\r\n          paths.shift();\r\n        }\r\n        if (paths.length) {\r\n          pathPrefix = paths.join('.') + '.';\r\n        }\r\n      }\r\n\r\n      // 不是主键值字段时，要先检查主键是否存在，并且主键是否相等（防止后代变更冒泡上来）\r\n      // 非主键属性变更时，要先检查主键是否匹配（如果主键也修改了，要求先修改主键再修改其他值）\r\n      if (bindingObject.primaryKey) {\r\n        const primaryKey = bindingObject.primaryKey;\r\n        if (propertyName !== primaryKey) {\r\n          if (!entity[primaryKey] || entity[primaryKey] !== bindingObject[primaryKey]) {\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置\r\n      if (entity[propertyName] === value) {\r\n        return;\r\n      }\r\n\r\n      // 调用表单验证,通过后调用实体验证\r\n      // bingdingObject变化后，先调用实体上的验证，通过后再设置实体的变动\r\n      entity[propertyName] = value;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将entityList中的Entity对象转换为BindingObject对象，加载到bindingList中，并保持entityList和bindingList同步。\r\n   * @param entityList  实体列表\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadEntityList(entityList: EntityList<any>, bindingList: BindingList) {\r\n    this.loadEntities(entityList.items, bindingList);\r\n\r\n    this.setUpEntityListPipeline(entityList, bindingList);\r\n  }\r\n\r\n  /**\r\n   * 建立entityList和bindingList之间的关联\r\n   * @param entityList  实体列表\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static setUpEntityListPipeline(entityList: EntityList<any>, bindingList: BindingList) {\r\n\r\n    entityList.onListChanged.subscribe((modification: Modification) => {\r\n      switch (modification.type) {\r\n\r\n        // 添加实体\r\n        case ModifyType.Add:\r\n          const entitiesToAdd = <Entity[]>modification.value;\r\n          if (entitiesToAdd.length === 0) {\r\n            return;\r\n          }\r\n\r\n          // 检查父id是否一致，冒泡导致的变更不处理\r\n          const paths = modification.path;\r\n          const parentPath = paths[paths.length - 2];\r\n          const parentId = bindingList.parent.primaryKeyValue;\r\n          if (parentPath.indexOf(parentId) === -1) {\r\n            return;\r\n          }\r\n\r\n          this.appendEntities(<Entity[]>modification.value, bindingList);\r\n          break;\r\n\r\n        // 删除实体\r\n        case ModifyType.Remove:\r\n\r\n          // 删除实体（value格式待商榷，目前value的格式为 { primaryKey: primaryValue}）\r\n          const id = modification.value[bindingList.primaryKey];\r\n          bindingList.removeByIds([id]);\r\n          // this.removeEntities(<Entity[]>modification.value, bindingList);\r\n          break;\r\n\r\n        // 加载实体\r\n        case ModifyType.Load:\r\n          const entities = modification.value;\r\n          this.loadEntities(entities, bindingList);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 监听repository变化，保持repository和bindingList同步。\r\n   * @param repository  实体仓库\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadRepository(repository: Repository<any>, bindingList: BindingList) {\r\n\r\n    // 初次加载\r\n    const entities = Array.from(repository.entityCollection.toArray());\r\n    this.loadEntities(entities, bindingList);\r\n\r\n    // 监听变化\r\n    repository.entityCollectionChange.subscribe((modification: Modification) => {\r\n      switch (modification.type) {\r\n        case ModifyType.Load:\r\n          this.loadEntities(<Entity[]>modification.value, bindingList);\r\n          break;\r\n        case ModifyType.Add:\r\n          this.appendEntities(<Entity[]>modification.value, bindingList);\r\n          break;\r\n        case ModifyType.Remove:\r\n          this.removeEntities(<Entity[]>modification.value, bindingList);\r\n          break;\r\n        case ModifyType.PaginationInfoChange:\r\n          bindingList.paginationInfo = <Pagination>modification.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    // 监听BindingList数据变化\r\n    bindingList.changes.subscribe((change: Change) => {\r\n      if (change.type === ChangeType.PaginationInfoChange) {\r\n        const entityCollection = repository.entityCollection;\r\n        // const entityTypeName = entityCollection.entityTypeName;\r\n        // const original = entityCollection.paginationInfo[entityTypeName];\r\n        // const entityPaginationInfo = Object.assign({}, original, change.value);\r\n        entityCollection.paginationInfo = Object.assign({}, entityCollection.paginationInfo, change.value);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将entities中的Entity对象转换为BindingObject对象，并加载到bindingList中\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadEntities(entities: Entity[], bindingList: BindingList) {\r\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\r\n    bindingList.load(bindingObjects);\r\n  }\r\n\r\n  /**\r\n   * 将entities中的Entity对象转换为BIndingObject对象，并追加到bindingList中\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static appendEntities(entities: Entity[], bindingList: BindingList) {\r\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\r\n    bindingList.append(bindingObjects);\r\n  }\r\n\r\n  /**\r\n   * 从bindingList移除entities对应的BindingObject对象\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static removeEntities(entities: Entity[], bindingList: BindingList) {\r\n    if (entities === null || entities.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // 归集要删除的id数组\r\n    const primaryKey = bindingList.primaryKey;\r\n    const ids = [];\r\n    entities.forEach((entity: Entity) => {\r\n      ids.push(entity[primaryKey]);\r\n    });\r\n    bindingList.removeByIds(ids);\r\n  }\r\n\r\n  /**\r\n   * 将entities中的Entity对象转换为BindingObject对象\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static createBindingObjects(entities: Entity[], bindingList: BindingList) {\r\n\r\n    if (entities === null || entities.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const bindingObjects = [];\r\n    entities.forEach((entity: Entity) => {\r\n      const bindingObject = BindingObjectFactory.create(bindingList.properties);\r\n      this.loadEntity(entity, bindingObject);\r\n\r\n      // // 为bindingObject设置默认值initialData属性\r\n      // if (entity['initialData']) {\r\n      //   bindingObject['initialData'] = entity['initialData'];\r\n      // }\r\n\r\n      bindingObjects.push(bindingObject);\r\n    });\r\n    return bindingObjects;\r\n  }\r\n  public static watchReposiroty(repository: Repository<any>, bindingData: BindingData) {\r\n    // reposiroty => bindingData\r\n    repository.entityCollectionChange.subscribe((modification: Modification) => {\r\n      switch (modification.type) {\r\n        case ModifyType.PaginationInfoChange:\r\n          bindingData.pagingInfo = modification.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 查找属性的类型\r\n   * @param entityType 实体类型\r\n   * @param targetPropName 属性名称\r\n   * @return 属性信息，包含属性类型（NgField、NgObject、NgList）和属性对应的实体类型（当NgField类型时为null）\r\n   */\r\n  static getPropInfo(entityType: any, targetPropName: string): { propType: string, propEntityType: any } {\r\n\r\n    let propType: string;\r\n    let propEntityType: any;\r\n\r\n    // NgField\r\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\r\n    Object.keys(ngFieldProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgField';\r\n        propEntityType = null;\r\n      }\r\n    });\r\n\r\n    // NgObject\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgObject';\r\n        propEntityType = ngObjectProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    // NgList\r\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\r\n    Object.keys(ngListProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgList';\r\n        propEntityType = ngListProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgDynamic';\r\n        propEntityType = ngDynamicProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    return { propType, propEntityType };\r\n  }\r\n\r\n  /**\r\n   * 获取实体的主键名\r\n   * @param entityType 实体类型\r\n   */\r\n  static getPrimaryKey(entityType: any) {\r\n    const primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);\r\n    if (primaryNgFiledProp) {\r\n      return primaryNgFiledProp.dataField;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 是否为对象属性\r\n   */\r\n  static isObjectProp(entityType: any, targetPropName: string, ) {\r\n    let isObjectProp = false;\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isObjectProp = true;\r\n      }\r\n    });\r\n    return isObjectProp;\r\n  }\r\n\r\n  /**\r\n   * 检查是否是动态列属性\r\n   */\r\n  static isDynamicProp(entityType: any, targetPropName: string) {\r\n    let isDynamicProp = false;\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isDynamicProp = true;\r\n      }\r\n    });\r\n    return isDynamicProp;\r\n  }\r\n\r\n  /**\r\n   * 为实体增加initialData属性\r\n   * @param entity 实体实例\r\n   * @param initialData 默认值对象\r\n   */\r\n  static appendInitialData(entity, initialData) {\r\n    const data = Object.assign({}, initialData);\r\n    delete data.id;\r\n    delete data.parentID;\r\n    entity['initialData'] = data;\r\n  }\r\n}\r\n\r\nexport { EntityUtil };\r\n","// tslint:disable: max-line-length member-ordering\r\n/**\r\n * 绑定数据相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n * @todo\r\n * 1、全局的BindingData和局部的BindingData应该拆成两个类，两个类之间是装饰关系；；\r\n * 2、为了保持兼容，减少改动量，暂时放在一起，待进一步重构。\r\n */\r\n\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { DataTypeInfo } from '../entity/entity-type-info/index';\r\nimport { Repository } from '../repository/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { Change, ChangeType } from './changes';\r\nimport { BindingProperty } from './binding_property';\r\nimport { BindingList } from './binding_list';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { PropertyUtil } from './property_util';\r\nimport { EntityUtil } from './entity_util';\r\nimport { InvokeOnValueChange } from './binding_object';\r\nimport { nullSafeIsEquivalent } from '@angular/compiler/src/output/output_ast';\r\n\r\n/**\r\n * BindingData\r\n */\r\n\r\nclass BindingData {\r\n\r\n  private viewModelContext: ViewModelContext;\r\n\r\n  /**\r\n   * 数据类型描述\r\n   */\r\n  private dataTypeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 绑定该路径\r\n   */\r\n  public get bindingPath(): string {\r\n    if (this.viewModelContext && this.viewModelContext.viewModel.bindingPath) {\r\n      return this.viewModelContext.viewModel.bindingPath;\r\n    }\r\n    return '/';\r\n  }\r\n\r\n  /**\r\n   * 可绑定的属性描述\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 数据列表\r\n   */\r\n  public list: BindingList;\r\n  private paginationInfo = null;\r\n\r\n  public set pagingInfo(pagingInfo: any) {\r\n    this.paginationInfo = pagingInfo;\r\n    this.firePagingChangeEvent();\r\n  }\r\n\r\n  public get pagingInfo() {\r\n    return this.paginationInfo;\r\n  }\r\n  /**\r\n   * 设置分页信息\r\n   * @param skip 跳过\r\n   * @param take 获取\r\n   * @param bindingPath 路径\r\n   */\r\n  public setPagingInfo(skip: number, take: number, bindingPath: string) {\r\n    if (bindingPath.length < 1 || bindingPath === '/') {\r\n      this.paginationInfo = Object.assign(this.paginationInfo, { pageSize: take, pageIndex: skip / take + 1 });\r\n    } else {\r\n      let pagingInfo = this.paginationInfo || {};\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0).map(item => item.substring(0, item.length - 1));\r\n      bindingPaths.forEach(path => {\r\n        if (!pagingInfo.hasOwnProperty(path)) {\r\n          pagingInfo[path] = {};\r\n        }\r\n        pagingInfo = pagingInfo[path];\r\n      });\r\n      pagingInfo.pageIndex = ((skip / take) || 0) + 1;\r\n      pagingInfo.pageSize = take || 0;\r\n    }\r\n    this.firePagingChangeEvent();\r\n  }\r\n  private firePagingChangeEvent() {\r\n    this.list.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: [],\r\n      value: this.paginationInfo\r\n    });\r\n  }\r\n  /**\r\n   * 变更集\r\n   */\r\n  public get changes(): Subject<Change> {\r\n    return this.list.changes;\r\n  }\r\n\r\n  /**\r\n   * 值变化执行器工厂，根据路径产生执行器\r\n   */\r\n  private valueChangeInvokerFactory: (paths: string[]) => InvokeOnValueChange;\r\n\r\n  /**\r\n   * 设置值变化执行器工厂\r\n   * @param value 值变化执行器工厂\r\n   */\r\n  public setValueChangeInvokerFactory(value: (paths: string[]) => InvokeOnValueChange) {\r\n    this.valueChangeInvokerFactory = value;\r\n  }\r\n\r\n  /**\r\n   * 初始化（已废弃）\r\n   */\r\n  public init(repository: Repository<any>, bindingPath: string) {\r\n    this.initByRepository(repository, null);\r\n  }\r\n\r\n  /**\r\n   * 根据Repository对BindingData进行初始化\r\n   */\r\n  public initByRepository(repository: Repository<any>, viewModelContext: ViewModelContext) {\r\n    this.viewModelContext = viewModelContext;\r\n\r\n    this.properties = PropertyUtil.getProperties(repository.entityType);\r\n    this.list = BindingListFactory.create(this.properties);\r\n    // 从repository初始化bindingData\r\n    this.pagingInfo = repository.entityCollection.paginationInfo;\r\n\r\n    // @todo\r\n    // BindingData不应该知道Repository，加载数据、建立关联关系的过程应该转移到外边\r\n    EntityUtil.loadRepository(repository, this.list);\r\n    this.dataTypeInfo = repository.entityTypeInfo;\r\n\r\n    this.extendProperties(this.properties);\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public initByBindingList(bindingList: BindingList,  viewModelContext: ViewModelContext) {\r\n    this.list = bindingList;\r\n    this.viewModelContext = viewModelContext;\r\n    this.extendProperties(this.list.properties);\r\n  }\r\n\r\n  /**\r\n   * 获取paths对应的属性值\r\n   * @param  paths 属性路径数组\r\n   * @returns 属性值\r\n   */\r\n  public getValue(paths: string[]) {\r\n    let target: any = this.list;\r\n    paths.forEach((path: string) => {\r\n      if (target) {\r\n        target = target[path];\r\n      }\r\n    });\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * 根据paths设置属性值\r\n   * @param paths 属性路径数组\r\n   * @param value 属性值\r\n   * @param emitEventToView 如果设置为true，则发送事件通知订阅它的组件、指令去更新界面，默认为false。\r\n   * @param emitEventToEntity 如果设置为true，则同步去更新Entity上对应的字段，默认为true。\r\n   */\r\n  public setValue(paths: string[], value: any, emitEventToView: boolean = false, emitEventToEntity: boolean = true) {\r\n\r\n    if (!paths || paths.length === 0) {\r\n      throw Error('路径不能为空');\r\n    }\r\n    const parentPaths = paths.slice(0, paths.length - 1);\r\n    const propName = paths[paths.length - 1];\r\n\r\n    let parent = this.getValue(parentPaths);\r\n    if (!parent) {\r\n      throw Error('找不到要设置的对象');\r\n    }\r\n    if (parent instanceof BindingData) {\r\n      parent = parent.list.currentItem;\r\n    } else if (parent instanceof BindingList) {\r\n      parent = parent.currentItem;\r\n    }\r\n    if (!!this.valueChangeInvokerFactory) {\r\n      parent.setValue(propName, value, emitEventToView, emitEventToEntity, null, this.valueChangeInvokerFactory(paths));\r\n    } else {\r\n      parent.setValue(propName, value, emitEventToView, emitEventToEntity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据paths清空属性值\r\n   */\r\n  public clearValue(paths: string[], emitEventToView: boolean = false, emitEventToEntity: boolean = true) {\r\n    let initValue: any;\r\n    const propInfo = this.dataTypeInfo.getPropInfoByPath(paths);\r\n    if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.initValue !== undefined) {\r\n      initValue = propInfo.metadataInfo.initValue;\r\n    } else {\r\n\r\n      // 原来的帮助映射中，强行纠正了数值的情况，保持一致\r\n      const oldValue = this.getValue(paths);\r\n      if (typeof oldValue === 'number') {\r\n        initValue = 0;\r\n      } else {\r\n        initValue = '';\r\n      }\r\n    }\r\n    this.setValue(paths, initValue, emitEventToView, emitEventToEntity);\r\n  }\r\n\r\n  /**\r\n   * 获取当前列表\r\n   */\r\n  public getList() {\r\n\r\n    if (!this.bindingPath || this.bindingPath === '/') {\r\n      return this.list;\r\n    }\r\n\r\n    const bindingPath = this.bindingPath.substr(1);\r\n    const bindingPathArray = bindingPath.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return this.getValue(bindingPathArray);\r\n  }\r\n\r\n  /**\r\n   * 获取当前对象\r\n   */\r\n  public getObject() {\r\n    const bindingList = this.getList();\r\n    return bindingList.currentItem;\r\n  }\r\n\r\n  /**\r\n   * 扩展BindingData属性，映射BindingData所持有的绑定列表当前行的属性，减少绑定层级。\r\n   * @param properties 关联实体的属性集合\r\n   */\r\n  private extendProperties(properties: BindingProperty[]) {\r\n    properties.forEach((property: BindingProperty) => {\r\n      const propName = property.name;\r\n      Object.defineProperty(this, propName, {\r\n        get: () => {\r\n          return this.list.currentItem[propName];\r\n        },\r\n        set: (value: any) => {\r\n          this.list.currentItem[propName] = value;\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport { BindingData };\r\n","import { Entity } from '../entity/index';\r\nimport { Repository, EntityManager } from '../repository/index';\r\nimport { PropertyUtil as BindingPropertyUtil } from './property_util';\r\nimport { EntityUtil as EntityLoadUtil } from './entity_util';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { BindingData } from './binding_data';\r\n\r\n\r\nclass BindingDataFactory {\r\n\r\n  /**\r\n   * 根据Repository创建一个BindingData\r\n   */\r\n  public static createFromRepository(repository: Repository<Entity>, bindingPath: string): BindingData {\r\n    const bindingData = new BindingData();\r\n    const bindingProperties = BindingPropertyUtil.getProperties(repository.entityType);\r\n    const bindingList = BindingListFactory.create(bindingProperties);\r\n    bindingData.initByBindingList(bindingList, null);\r\n    EntityLoadUtil.loadRepository(repository, bindingList);\r\n\r\n    // 从repository初始化bindingData\r\n    bindingData.pagingInfo = repository.entityCollection.paginationInfo;\r\n    return bindingData;\r\n  }\r\n\r\n  /**\r\n   * 根据EntityManager创建BindingData，并建立双向关联（请勿使用）\r\n   * @internal\r\n   * @summary\r\n   * 1、该方法暂时仅供内部单元测试使用；\r\n   * 2、该方法暂时只创建BindingData，不建立双向关联\r\n   */\r\n  public static createFromEntityManager(entityManager: EntityManager<Entity>, bindingPath: string): BindingData {\r\n    const bindingData = new BindingData();\r\n    const bindingProperties = BindingPropertyUtil.getProperties(entityManager.entityType);\r\n    const bindingList = BindingListFactory.create(bindingProperties);\r\n    bindingData.initByBindingList(bindingList, null);\r\n\r\n    // 初始化数据\r\n    const entities: Entity[] = entityManager.getEntitiesByPath([]);\r\n    EntityLoadUtil.loadEntities(entities, bindingList);\r\n\r\n    return bindingData;\r\n  }\r\n\r\n  /**\r\n   * 根据已经存在的BindingData创建一个新的BindingData\r\n   */\r\n  public static createFromExistingBindingData(existingBindingData: BindingData, bindingPath: string) {\r\n    const bindingData = new BindingData();\r\n    bindingData.initByBindingList(existingBindingData.list, null);\r\n    return bindingData;\r\n  }\r\n}\r\n\r\nexport { BindingDataFactory };\r\n","import {\r\n  BindingData, BindingPropertyType, PropertyUtil\r\n} from '../../binding-data/index';\r\nimport { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * EntityPath转换器\r\n */\r\nclass EntityPathConverter {\r\n\r\n  /**\r\n   * 转换为Entity可识别的路径\r\n   * 根：[]\r\n   * 主表：['id:xxx', 'name'],\r\n   * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']\r\n   * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']\r\n   * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],\r\n   * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']\r\n   */\r\n  public static toEntityPathArray(bindingPathString: string, bindingData: BindingData): string[] {\r\n    const bindingPathArray: string[] = BindingPathConverter.toBindingPathArray(bindingPathString);\r\n    const entityPathArray: string[] = [];\r\n\r\n    if (bindingPathArray.length === 0) {\r\n      return entityPathArray;\r\n    }\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    entityPathArray.push(\r\n      this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n    );\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      switch (propInfo.type) {\r\n        case BindingPropertyType.Plain:\r\n          entityPathArray.push(propName);\r\n          break;\r\n        case BindingPropertyType.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        case BindingPropertyType.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return entityPathArray;\r\n  }\r\n\r\n  /**\r\n   * 创建路径中的主键部分\r\n   */\r\n  public static createPrimaryKeyPath(primaryKey: string, primaryKeyValue: string) {\r\n    return `${primaryKey}:${primaryKeyValue}`;\r\n  }\r\n\r\n}\r\n\r\nexport { EntityPathConverter };\r\n","\r\n/**\r\n * 实体路径比较器\r\n */\r\nclass EntityPathComparer {\r\n}\r\n\r\nexport { EntityPathComparer };\r\n","\r\n/**\r\n * 表单路径转换类\r\n */\r\nclass FormPathConverter {\r\n\r\n  /**\r\n   * ControlPathString => BingingPathArray\r\n   * @params controlPath FormControl对应的数据绑定路径（BindingData的bindingPaht + FormControl的binding）\r\n   * @return BindingPath数组\r\n   */\r\n  public static toBindingPathArray(formPahtString: string): string[] {\r\n    const bindingPathArray = formPahtString.split('.').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return bindingPathArray;\r\n  }\r\n}\r\n\r\nexport { FormPathConverter };\r\n","/**\r\n * 数据路径转换、比较等工具类\r\n * @summary\r\n * ----------------------------------------\r\n * 术语：\r\n * BindingPath：数组形式；\r\n * BindingPathString：BindingPath的字符串形式，用/分隔；\r\n * ControlPathString：BindingPath的字符串形式，用.分隔；\r\n *\r\n * EntityPath：数组形式；\r\n * EntityPathString：EntityPath的字符串形式，使用/分隔；\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 路径处理工具类\r\n * @summary\r\n * --------------------------------------------------------------------------------\r\n * 路径现状\r\n *\r\n * 字符串格式\r\n * 1、BindingPath（/edus/grades/id）：主要用于表达式解析；\r\n * 2、ControlPath（edus.grades.id）： 主要用于FormControl的binding；\r\n * 3、RestPath（/empId/edus/eduId/grades/gradeId）：主要用于创建Rest\r\n * 数组格式：\r\n * 1、BindingPathArray（['edus', 'grades', 'id']）：BindingData模块中使用；\r\n * 2、EntityPathArray（['id:empId', 'edus', 'id:eduId', 'id']）：Entity模块中使用；\r\n * --------------------------------------------------------------------------------\r\n * 转换原则\r\n * 1、除了该工具类，不允许再出现路径转换、比较的方法；\r\n * 2、如果有特殊情况，先在该类中实现对应的方法；\r\n * 1、对于BindingPath、ControlPath统一转换成BingdingPathArray比较\r\n * 2、对于EntityPath统一转换成EntityPathArray进行比较；\r\n * --------------------------------------------------------------------------------\r\n * @todo\r\n * 1909中使用统一的数据结构（双向链表）进行存储，来解决目前混乱的情况\r\n */\r\n\r\n export * from './binding_path_converter';\r\n export * from './binding_path_comparer';\r\n export * from './binding_path_traverser';\r\n export * from './entity_path_converter';\r\n export * from './entity_path_comparer';\r\n export * from './form_path_converter';\r\n","import { BindingData, BindingPropertyType, PropertyUtil } from '../binding-data/index';\r\n/**\r\n * 路径处理工具类（处理/PathNode1/PathNode2/...格式的路径）\r\n */\r\nclass DataPathUtil {\r\n\r\n  /**\r\n   * 转换成BindingData可识别的路径\r\n   */\r\n  public static convertToBindingPathArray(path: string): string[] {\r\n    const bindingPathArray = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return bindingPathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为Entity可识别的路径\r\n   * 根：[]\r\n   * 主表：['id:xxx', 'name'],\r\n   * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']\r\n   * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']\r\n   * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],\r\n   * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']\r\n   */\r\n  public static convertToEntityPathArray(path: string, bindingData: BindingData): string[] {\r\n    const bindingPathArray: string[] = this.convertToBindingPathArray(path);\r\n    const entityPathArray: string[] = [];\r\n\r\n    if (bindingPathArray.length === 0) {\r\n      return entityPathArray;\r\n    }\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    entityPathArray.push(\r\n      this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n    );\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      switch (propInfo.type) {\r\n        case BindingPropertyType.Plain:\r\n          entityPathArray.push(propName);\r\n          break;\r\n        case BindingPropertyType.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        case BindingPropertyType.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return entityPathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为RestUrl里的路径\r\n   *\r\n   * 返回结果：\r\n   * 主表（/）：/\r\n   * 从表（/jiwtEdus）：/xxx/jiwtEdus\r\n   * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdus/xxx/jiwtGrades\r\n   */\r\n  public static convertToRestUrl(path: string, bindingData: BindingData): string {\r\n    const bindingPathArray: string[] = this.convertToBindingPathArray(path);\r\n    const restPathArray: string[] = [];\r\n\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    restPathArray.push(currentBindingObject.primaryKeyValue);\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      if (propInfo.type !== BindingPropertyType.List) {\r\n        throw new Error(`${propInfo.name}不是子表对应的属性`);\r\n      }\r\n      const currentBindingList = currentBindingObject[propName];\r\n      currentBindingObject = currentBindingList.currentItem;\r\n      restPathArray.push(propName);\r\n      restPathArray.push(currentBindingObject.primaryKeyValue);\r\n    });\r\n\r\n    // 移除最后一个主键\r\n    restPathArray.pop();\r\n    return '/' + restPathArray.join('/');\r\n  }\r\n\r\n  /**\r\n   * 获取叶子节点的Path\r\n   */\r\n  public static getLeafPath(path: string): string {\r\n    const pathArray = DataPathUtil.convertToBindingPathArray(path);\r\n    return pathArray.pop();\r\n  }\r\n\r\n  /**\r\n   * 获取父路径\r\n   */\r\n  public static getParentPath(path: string): string {\r\n    const pathArray = DataPathUtil.convertToBindingPathArray(path);\r\n    pathArray.pop();\r\n    return '/' + pathArray.join('/');\r\n  }\r\n\r\n  /**\r\n   * 创建路径中的主键部分\r\n   */\r\n  private static createPrimaryKeyPath(primaryKey: string, primaryKeyValue: string) {\r\n    return `${primaryKey}:${primaryKeyValue}`;\r\n  }\r\n}\r\n\r\nexport { DataPathUtil };\r\n","// tslint:disable: max-line-length\r\n/**\r\n * GUID创建服务\r\n * @scope 静态类没有提供Provider\r\n */\r\nexport class Guid {\r\n\r\n    private constructor(guid: string) {\r\n        if (!guid) { throw new TypeError('Invalid argument; `value` has no value.'); }\r\n\r\n        this.value = Guid.EMPTY;\r\n\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n\r\n\r\n    public static validator = new RegExp('^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$', 'i');\r\n\r\n    public static EMPTY = '00000000-0000-0000-0000-000000000000';\r\n\r\n    private value: string;\r\n\r\n    public static isGuid(guid: any) {\r\n        const value: string = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    }\r\n\r\n    public static create(): Guid {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join('-'));\r\n    }\r\n\r\n    public static createEmpty(): Guid {\r\n        return new Guid('emptyguid');\r\n    }\r\n\r\n    public static parse(guid: string): Guid {\r\n        return new Guid(guid);\r\n    }\r\n\r\n    public static raw(): string {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join('-');\r\n    }\r\n\r\n    private static gen(count: number) {\r\n        let out = '';\r\n        for (let i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    public equals(other: Guid): boolean {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return this.value === Guid.EMPTY;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.value;\r\n    }\r\n\r\n    public toJSON(): any {\r\n        return {\r\n            value: this.value,\r\n        };\r\n    }\r\n}\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-10-25 13:30:52 \r\n * @Last Modified by:   aalizzwell \r\n * @Last Modified time: 2019-10-25 13:30:52 \r\n */\r\nimport { Observable } from 'rxjs';\r\n\r\nconst isObservable = (value) => {\r\n    if (!value) {\r\n        return false;\r\n    }\r\n    if (value[Symbol.observable] && value === value[Symbol.observable]()) {\r\n        return true;\r\n    }\r\n    if (value['@@observable'] && value === value['@@observable']()) {\r\n        return true;\r\n    }\r\n    if (value instanceof Observable) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport { isObservable }\r\n","import { makePropDecorator } from '../../core/index';\r\nimport { ObjectUtil } from '../../utils/index';\r\nimport { ClassType } from '../types';\r\nimport { PropMetadata } from './prop_meatadata';\r\n\r\n/**\r\n * 【对象属性元数据】接口\r\n */\r\nexport interface ObjectPropMetadata extends PropMetadata {\r\n\r\n  /**\r\n   * 映射字段\r\n   */\r\n  dataField?: string;\r\n\r\n  /**\r\n   * 原始字段名称\r\n   */\r\n  originalDataField?: string;\r\n\r\n  /**\r\n   * 表名\r\n   */\r\n  tableName?: string;\r\n\r\n  /**\r\n   * 引用实体类型\r\n   */\r\n  type?: ClassType;\r\n\r\n  /**\r\n   * 树分级类型(分级码=path 父路径=parent) \r\n   */\r\n  hierarchyType?: string;\r\n}\r\n\r\n\r\n/**\r\n * 【对象属性元数据】名称\r\n */\r\nexport const OBJECT_PROP_META = 'ObjectPropMeta';\r\n\r\n\r\n/**\r\n * 【对象属性元数据装饰器工厂】接口\r\n * @summaryh\r\n * obj 参数obj的值类型可以为 NgObjectProperty、string、ClassType\r\n * 当为string 时，则设其映射字段；\r\n * 当为ClassType时，则设置集合中的记录类型\r\n */\r\nexport interface ObjectPropMetaDecorator {\r\n\r\n  (obj: ObjectPropMetadata | string | ClassType): any;\r\n\r\n  new(obj: ObjectPropMetadata | string | ClassType): any;\r\n}\r\n\r\n\r\n/**\r\n * 【对象属性元数据装饰器工厂】的工厂\r\n */\r\nfunction makeObjectPropMetaDecorator(options: ObjectPropMetadata | string | ClassType): any {\r\n  if (ObjectUtil.isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * 对象属性元数据装饰器工厂\r\n */\r\nexport const ObjectPropMeta: ObjectPropMetaDecorator = makePropDecorator(OBJECT_PROP_META, makeObjectPropMetaDecorator);\r\n","import { makePropDecorator } from '../../core/index';\r\nimport { ObjectUtil } from '../../utils/index';\r\nimport { ClassType } from '../types';\r\nimport { PropMetadata } from './prop_meatadata';\r\n\r\n\r\n/**\r\n * 【动态对象元数据】接口\r\n */\r\nexport interface DynamicPropMetadata extends PropMetadata {\r\n\r\n  /**\r\n   * 映射字段\r\n   */\r\n  dataField?: string;\r\n\r\n  /**\r\n   * 原始字段名称\r\n   */\r\n  originalDataField?: string;\r\n\r\n  /**\r\n   * 表名\r\n   */\r\n  tableName?: string;\r\n\r\n  /**\r\n   * 引用实体类型\r\n   */\r\n  type?: ClassType;\r\n}\r\n\r\n\r\n/**\r\n * 【动态对象元数据装饰器】名称\r\n */\r\nexport const DYNAMIC_PROP_META = 'DynamicPropMeta';\r\n\r\n\r\n/**\r\n * 【动态对象元数据装饰器工厂】接口\r\n */\r\nexport interface DynamicPropMetaDecorator {\r\n\r\n  (obj: DynamicPropMetadata | string | ClassType): any;\r\n\r\n  new(obj: DynamicPropMetadata | string | ClassType): any;\r\n}\r\n\r\n\r\n/**\r\n * 【动态对象元数据装饰器工厂】的工厂\r\n */\r\nfunction makeDynamicPropMetaDecorator(options: DynamicPropMetadata | string | ClassType): any {\r\n  if (ObjectUtil.isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * 实体属性注解\r\n */\r\nexport const DynamicPropMeta: DynamicPropMetaDecorator = makePropDecorator(DYNAMIC_PROP_META, makeDynamicPropMetaDecorator);","import { makePropDecorator } from '../../core/index';\r\nimport { ObjectUtil } from '../../utils/index';\r\nimport { ClassType } from '../types';\r\nimport { PropMetadata } from './prop_meatadata';\r\n\r\n\r\n/**\r\n * 列表属性元数据\r\n */\r\nexport interface ListPropMetadata extends PropMetadata {\r\n\r\n  /**\r\n   * 表名\r\n   */\r\n  tableName?: string;\r\n\r\n  /**\r\n   * 字段名称\r\n   */\r\n  dataField?: string;\r\n\r\n  /**\r\n   * 原始字段名称\r\n   */\r\n  originalDataField?: string;\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  type?: any;\r\n}\r\n\r\n\r\n/**\r\n * 【列表属性元数据】名称\r\n */\r\nexport const LIST_PROP_META = 'ListPropMeta';\r\n\r\n\r\n/**\r\n * 【列表属性元数据装饰器工厂】接口\r\n */\r\nexport interface ListPropMetaDecorator {\r\n\r\n  (obj: ListPropMetadata | string | ClassType): any;\r\n\r\n  new(obj: ListPropMetadata | string | ClassType): any;\r\n\r\n}\r\n\r\n/**\r\n * 【列表属性元数据装饰器工厂】的工厂\r\n */\r\nfunction makeListPropMetaDecorator(options: ListPropMetadata | string | ClassType): any {\r\n  if (ObjectUtil.isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * 列表属性装饰器工厂\r\n */\r\nexport const ListPropMeta: ListPropMetaDecorator = makePropDecorator(LIST_PROP_META, makeListPropMetaDecorator);\r\n","import { MetadataUtil } from '../../core/index';\r\nimport {\r\n  PRIMITIVE_PROP_META, OBJECT_PROP_META, DYNAMIC_PROP_META, LIST_PROP_META,\r\n  PrimitivePropMetadata, ObjectPropMetadata, DynamicPropMetadata, ListPropMetadata\r\n} from './field_decorator';\r\n\r\n/**\r\n * 属性注解器通用方法\r\n */\r\nexport class FieldMetadataUtil {\r\n  /**\r\n   * 获取实体所有的简单属性元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgObjectProperty}\r\n   */\r\n  static getNgFields(target: any): { [propName: string]: PrimitivePropMetadata } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, PRIMITIVE_PROP_META);\r\n  }\r\n\r\n  /**\r\n   * 获取某个简单属性的元数据\r\n   */\r\n  static getNgField(target: any, propName: string): PrimitivePropMetadata {\r\n    const ngFields = this.getNgFields(target);\r\n    const ngField = ngFields[propName] as PrimitivePropMetadata;\r\n    return ngField;\r\n  }\r\n\r\n  /**\r\n   * 获取实体属性在原始数据中的属性名\r\n   */\r\n  static getDataField(target: any, propName: string) {\r\n    const ngField = this.getNgField(target, propName);\r\n    return ngField.dataField || propName;\r\n  }\r\n\r\n  /**\r\n   * 获取标注为NgObject的属性的元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgObjectProperty}\r\n   */\r\n  static getNgObjects(target: any): { [propName: string]: ObjectPropMetadata } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, OBJECT_PROP_META);\r\n  }\r\n\r\n  static getNgDynamic(target: any): { [propName: string]: ObjectPropMetadata } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, DYNAMIC_PROP_META);\r\n  }\r\n\r\n  /**\r\n   * 获取标注为NgList的属性的元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgListProperty}\r\n   */\r\n  static getNgList(target: any): { [propName: string]: ListPropMetadata } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, LIST_PROP_META);\r\n  }\r\n\r\n  /**\r\n   * 获取实体标注为主键的属性元数据\r\n   * @param target 实体类型\r\n   */\r\n  static getPrimaryFieldMetadata(target: any): PrimitivePropMetadata | undefined {\r\n    const ngFieldObj = FieldMetadataUtil.getNgFields(target);\r\n    const primaryKey = Object.keys(ngFieldObj).find((prop: string) => {\r\n      return ngFieldObj[prop].primary;\r\n    });\r\n\r\n    if (primaryKey) {\r\n      const propMeta = ngFieldObj[primaryKey];\r\n      propMeta.property = primaryKey;\r\n      if (!propMeta.dataField) {\r\n        propMeta.dataField = primaryKey;\r\n      }\r\n\r\n      return propMeta;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * 获取主键名称，没有主键时返回空字符串\r\n   */\r\n  static getPrimaryKey(entityType: any) {\r\n    const primaryNgField = this.getPrimaryFieldMetadata(entityType);\r\n    if (!primaryNgField) {\r\n      return '';\r\n    }\r\n    return primaryNgField.property;\r\n  }\r\n\r\n}\r\n","import { Type } from '../../core/index';\r\nimport { MetadataUtil } from '../../core/index';\r\nimport { Entity } from '../entity';\r\n\r\nimport {\r\n  PropMetadata, PRIMITIVE_PROP_META, PrimitivePropMetadata, OBJECT_PROP_META, ObjectPropMetadata,\r\n  DYNAMIC_PROP_META, DynamicPropMetadata, LIST_PROP_META,    ListPropMetadata\r\n} from './field_decorator';\r\n\r\n/**\r\n * 实体元数据工具类\r\n */\r\nexport class EntityMetadataUtil {\r\n\r\n  /**\r\n   * 获取所有属性\r\n   * @todo：封装根据基类获取所有元数据的方法，解决重复代码\r\n   */\r\n  static getAllNgProperties(entityType: Type<Entity>): { [propName: string]: PropMetadata } {\r\n    const ngPlainProperties = this.getNgFieldProperties(entityType);\r\n    const ngEntityProperties = this.getNgObjectProperties(entityType);\r\n    const ngDynamicProperties = this.getNgDynamicProperties(entityType);\r\n    const ngEntityListProperties = this.getNgObjectProperties(entityType);\r\n\r\n    return Object.assign({},\r\n      ngPlainProperties,   ngEntityProperties,\r\n      ngDynamicProperties, ngEntityListProperties\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 获取NgField的属性元数据\r\n   */\r\n  static getNgFieldProperties(entityType: any): { [propName: string]: PrimitivePropMetadata } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, PRIMITIVE_PROP_META);\r\n  }\r\n\r\n  /**\r\n   * 获取NgObject属性元数据\r\n   */\r\n  static getNgObjectProperties(entityType: any): { [propName: string]: ObjectPropMetadata } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, OBJECT_PROP_META);\r\n  }\r\n\r\n  /**\r\n   * 获取NgDynamic属性元数据\r\n   */\r\n  static getNgDynamicProperties(entityType: any): { [propName: string]: DynamicPropMetadata } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, DYNAMIC_PROP_META);\r\n  }\r\n\r\n  /**\r\n   * 获取NgList属性元数据\r\n   */\r\n  static getNgListProperties(entityType: any): { [propName: string]: ListPropMetadata } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, LIST_PROP_META);\r\n  }\r\n\r\n  /**\r\n   * 获取主键属性元数据\r\n   */\r\n  static getPrimaryKeyProperty(entityType: Type<Entity>): PrimitivePropMetadata {\r\n    let primaryKeyProperty;\r\n    const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(entityType);\r\n    Object.keys(ngPlainProperties).forEach((propName: string) => {\r\n      const ngProperty = ngPlainProperties[propName] as PrimitivePropMetadata;\r\n      if (ngProperty.primary === true) {\r\n        primaryKeyProperty = ngProperty;\r\n      }\r\n    });\r\n\r\n    return primaryKeyProperty;\r\n  }\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-07 09:05:09\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-27 20:35:02\r\n */\r\n\r\nimport { Type } from '../../core/types';\r\nimport {\r\n  PropMetadata, PrimitivePropMetadata, ObjectPropMetadata, DynamicPropMetadata, ListPropMetadata,\r\n  EntityMetadataUtil\r\n} from '../metadata/index';\r\nimport { DataPropGroup, DataPropInfo } from './data_prop_info';\r\n\r\n/**\r\n * 实体类型信息\r\n * @todo：\r\n * 1、构造时不应该识别Entity模块的东西，应该是更抽象的；\r\n * 2、构造函数应该接收一个Builder接口，由Entity或者其他实现层来实现这个接口。\r\n */\r\nclass DataTypeInfo {\r\n\r\n  /**\r\n   * 数据类型\r\n   */\r\n  public type: Type<any>;\r\n\r\n  /**\r\n   * 属性集合\r\n   */\r\n  public propInfoMap: Map<string, DataPropInfo>;\r\n\r\n  /**\r\n   * 主键\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 外键\r\n   */\r\n  public foreignKey: string;\r\n\r\n  /**\r\n   * 是否为值对象\r\n   */\r\n  public get isValueObject() {\r\n    return !this.primaryKey;\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   * @todo：不应该识别\r\n   */\r\n  constructor(type: any) {\r\n    this.type = type;\r\n    this.primaryKey = '';\r\n    this.foreignKey = '';\r\n    this.propInfoMap = new Map<string, DataPropInfo>();\r\n    this.collectPropInfos();\r\n  }\r\n\r\n  /**\r\n   * 获取全部属性信息\r\n   */\r\n  public getPropInfos(): DataPropInfo[] {\r\n    return Array.from(this.propInfoMap.values());\r\n  }\r\n\r\n  /**\r\n   * 获取全部属性的名称\r\n   */\r\n  public getPropNames(): string[] {\r\n    const propNames = [];\r\n    const propInfos = this.getPropInfos();\r\n    propInfos.forEach((propInfo) => {\r\n      propNames.push(propInfo.name);\r\n    });\r\n    return propNames;\r\n  }\r\n\r\n  /**\r\n   * 根据group获取属性信息数组\r\n   */\r\n  public getPropInfosByGroup(group: DataPropGroup): DataPropInfo[] {\r\n    const allPropInfos = Array.from(this.propInfoMap.values());\r\n    const propInfos = allPropInfos.filter((propInfo: DataPropInfo) => {\r\n      return propInfo.group === group;\r\n    });\r\n    return propInfos;\r\n  }\r\n\r\n  /**\r\n   * 根据group获取属性名称数组\r\n   * @param group 属性分组\r\n   */\r\n  public getPropNamesByGroup(group: DataPropGroup): string[] {\r\n    const propNames = [];\r\n    const propInfos = this.getPropInfosByGroup(group);\r\n    propInfos.forEach((propInfo) => {\r\n      propNames.push(propInfo.name);\r\n    });\r\n    return propNames;\r\n  }\r\n\r\n  /**\r\n   * 根据propName获取属性信息\r\n   */\r\n  public getPropInfoByName(propName: string): DataPropInfo {\r\n    if (this.propInfoMap.has(propName)) {\r\n      return this.propInfoMap.get(propName);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取属性信息\r\n   */\r\n  public getPropInfoByPath(path: string[]): DataPropInfo {\r\n\r\n    // 先复制，防止shift方法产生污染\r\n    const arrPath = path.concat([]);\r\n    if (arrPath.length === 0) {\r\n      throw Error(`属性路径不能为空`);\r\n    }\r\n\r\n    // 循环查找\r\n    let typeInfo = this;\r\n    let propInfo = null;\r\n    while (typeInfo && arrPath.length > 0) {\r\n\r\n      const propName = arrPath.shift();\r\n      propInfo = typeInfo.getPropInfoByName(propName);\r\n      if (!propInfo) {\r\n        throw Error(`路径${path}中存在不正确的节点${propName}，请检查`);\r\n      }\r\n      typeInfo = propInfo.typeInfo;\r\n\r\n      // 如果是动态列，并且路径数组里还有属性，统一设置为null(动态列不再描述属性信息)\r\n      if (propInfo.group === DataPropGroup.Dynamic && arrPath.length > 0) {\r\n        propInfo = null;\r\n        typeInfo = null;\r\n      }\r\n    }\r\n\r\n    return propInfo;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取对应属性的TypeInfo\r\n   */\r\n  public getTypeInfoByPath(path: string[]): DataTypeInfo {\r\n\r\n    // 空数组时返回\r\n    if (path.length === 0) {\r\n      return this;\r\n    }\r\n\r\n    // 获取对应属性信息\r\n    const propInfo = this.getPropInfoByPath(path);\r\n    if (!propInfo.typeInfo) {\r\n      throw Error(`路径${path}无法定位到一个EntityTypeInfo，请检查`);\r\n    }\r\n\r\n    return propInfo.typeInfo;\r\n  }\r\n\r\n  /**\r\n   * 获取主键的属性信息\r\n   */\r\n  public getPrimaryKeyPropInfo(): DataPropInfo {\r\n    return this.getPropInfoByName(this.primaryKey);\r\n  }\r\n\r\n  /**\r\n   * 根据name获取影射名\r\n   */\r\n  public getPropMappingByName(name: string): string {\r\n    const propInfo = this.getPropInfoByName(name);\r\n    if (!propInfo) {\r\n      return '';\r\n    }\r\n    return propInfo.mapping;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取映射名\r\n   */\r\n  public getPropMappingByPath(path: string[]): string {\r\n    const propInfo = this.getPropInfoByPath(path);\r\n    if (!propInfo) {\r\n      return '';\r\n    }\r\n    return propInfo.mapping;\r\n  }\r\n\r\n  /**\r\n   * 检查属性是否属于特定的分组\r\n   */\r\n  public checkPropGroup(propName: string, propGroup: DataPropGroup): boolean {\r\n    const propInfo = this.getPropInfoByName(propName);\r\n    if (propInfo && propInfo.group === propGroup) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  /**\r\n   * --------------------------------------------------------------------------------\r\n   * 属性元数据 => 属性描述信息\r\n   * --------------------------------------------------------------------------------\r\n   */\r\n\r\n  /**\r\n   * 搜集所有属性信息\r\n   * @todo：消除重复代码，ts不支持interface类型检测，暂时通过遍历实现。\r\n   */\r\n  private collectPropInfos() {\r\n\r\n    // 简单属性\r\n    const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(this.type);\r\n    Object.keys(ngPlainProperties).forEach((propName: string) => {\r\n      const ngProperty = ngPlainProperties[propName] as PrimitivePropMetadata;\r\n      if (ngProperty.primary === true) {\r\n        this.primaryKey = propName;\r\n      }\r\n      if (ngProperty.foreign === true) {\r\n        this.foreignKey = propName;\r\n      }\r\n      this.addPropInfo(DataPropGroup.Primitive, propName, ngProperty.dataField, null, ngProperty);\r\n    });\r\n\r\n    // 实体属性\r\n    const ngEntityProperties = EntityMetadataUtil.getNgObjectProperties(this.type);\r\n    Object.keys(ngEntityProperties).forEach((propName: string) => {\r\n      const ngProperty = ngEntityProperties[propName] as ObjectPropMetadata;\r\n      this.addPropInfo(DataPropGroup.Object, propName, ngProperty.dataField, ngProperty.type, ngProperty);\r\n    });\r\n\r\n    // 动态实体属性\r\n    const ngDynamicProperties = EntityMetadataUtil.getNgDynamicProperties(this.type);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      const ngProperty = ngDynamicProperties[propName] as DynamicPropMetadata;\r\n      this.addPropInfo(DataPropGroup.Dynamic, propName, ngProperty.dataField, null, ngProperty);\r\n    });\r\n\r\n    // 实体列表属性\r\n    const ngEntityListProperties = EntityMetadataUtil.getNgListProperties(this.type);\r\n    Object.keys(ngEntityListProperties).forEach((propName: string) => {\r\n      const ngProperty = ngEntityListProperties[propName] as ListPropMetadata;\r\n      this.addPropInfo(DataPropGroup.List, propName, ngProperty.dataField, ngProperty.type, ngProperty);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 添加属性信息\r\n   */\r\n  private addPropInfo(group: DataPropGroup, name: string, mapping: string, type: Type<any>, metadataInfo: PropMetadata) {\r\n\r\n    // 没有设置影射时，用属性名充当影射\r\n    mapping = mapping ? mapping : name;\r\n    let typeInfo = null;\r\n    if (type) {\r\n      typeInfo = new DataTypeInfo(type);\r\n    }\r\n    const propInfo = { group, name, mapping, typeInfo, metadataInfo };\r\n    this.propInfoMap.set(name, propInfo);\r\n  }\r\n\r\n}\r\n\r\nexport { DataTypeInfo };\r\n","\r\nimport { DataTypeInfo, DataPropGroup  } from '../entity-type-info/index';\r\nimport { Entity  } from '../index';\r\nimport { Repository, EntityManager } from '../../repository/index';\r\nimport { BindingData } from '../../binding-data/index';\r\nimport { DataPathNode, DataPathNodeType } from './data_path_node';\r\nimport { DataPath } from './data_path';\r\n\r\n/**\r\n * 数据Path工厂类\r\n */\r\nclass DataPathCreator {\r\n\r\n  /**\r\n   * 将长路径数组或字符串转换为\r\n   * @param fullPathArrayOrString 路径数组或字符串\r\n   * @param repository 实体仓库\r\n   * @summary\r\n   * 1、长路径格式说明参考：data-path.md\r\n   */\r\n  public static createByLongPathFromRoot(fullPathArrayOrString: string[] | string, entityManager: EntityManager<Entity>): DataPath {\r\n    const dataPath = new DataPath();\r\n    const fullPathArray = fullPathArrayOrString as string[];\r\n    if (!fullPathArray || fullPathArray.length === 0) {\r\n      return dataPath;\r\n    }\r\n\r\n    let currentNodeInfo = {\r\n      nodeValue: fullPathArray.shift(),\r\n      nodeType: DataPathNodeType.DataId,\r\n      entityTypeInfo: new DataTypeInfo(entityManager.entityType)\r\n    };\r\n    while (currentNodeInfo) {\r\n      dataPath.push(currentNodeInfo.nodeType, currentNodeInfo.nodeValue);\r\n\r\n      // 处理下一个节点\r\n      const nextNodeValue = fullPathArray.shift();\r\n      if (!nextNodeValue || !currentNodeInfo.entityTypeInfo) {\r\n        break;\r\n      }\r\n      currentNodeInfo = this.getNextPathNodeInfo(currentNodeInfo, nextNodeValue);\r\n    }\r\n\r\n    return dataPath;\r\n  }\r\n\r\n  /**\r\n   * 获取下一个路径节点的信息\r\n   * @param parentNodeInfo 当前路径节点信息\r\n   * @param nextNodeValue 下一个路径节点的值\r\n   * @summary\r\n   * 1、这个递归写的很绕，说明数据结构设计不合理；\r\n   * 2、多个因素混用了一个结构；\r\n   */\r\n  private static getNextPathNodeInfo(parentNodeInfo: any, nextNodeValue: string): any {\r\n\r\n    const parentNodeValue = parentNodeInfo.nodeValue;\r\n    const parentNodeType = parentNodeInfo.nodeType;\r\n    const parentEntityTypeInfo = parentNodeInfo.entityTypeInfo;\r\n\r\n    if (!nextNodeValue || !parentEntityTypeInfo) {\r\n      return null;\r\n    }\r\n\r\n    const nextPathNodeInfo = {\r\n      nodeValue: nextNodeValue,\r\n      nodeType: null,\r\n      entityTypeInfo: null\r\n    };\r\n\r\n\r\n    // DataNodeType=List：下一节点肯定是Object，并且EntityTypeInfo不变\r\n    if (parentNodeType === DataPathNodeType.DataId) {\r\n      nextPathNodeInfo.nodeType = DataPathNodeType.PropName;\r\n      nextPathNodeInfo.entityTypeInfo = parentEntityTypeInfo;\r\n    } else {\r\n\r\n      // DataNodeType=Object：必然对应一个属性信息\r\n      const nextPropInfo = parentEntityTypeInfo.getPropInfoByName(parentNodeValue);\r\n      if (nextPropInfo.group === DataPropGroup.List) {\r\n\r\n        // EntityPropGroup=EntityList：下一个节点是List类型。\r\n        nextPathNodeInfo.nodeType = DataPathNodeType.DataId;\r\n        nextPathNodeInfo.entityTypeInfo = nextPropInfo.typeInfo;\r\n      } else {\r\n\r\n        // EntityPropGroup=Entity：       下级entityTypeInfo为\r\n        // EntityPropGroup=Dynamic|Plain：null\r\n        nextPathNodeInfo.nodeType = DataPathNodeType.PropName;\r\n        nextPathNodeInfo.entityTypeInfo = nextPropInfo.group === DataPropGroup.Object ? nextPropInfo.typeInfo : null;\r\n      }\r\n    }\r\n\r\n    return nextPathNodeInfo;\r\n  }\r\n\r\n  /**\r\n   * @param fullPathArrayOrString 路径数组或字符串\r\n   * @param repository 实体仓库\r\n   * @summary\r\n   * 1、长路径格式说明参考：data-path.md\r\n   * 2、shortPathArrayOrString暂时只支持字符串数组\r\n   */\r\n  public static createByShortPathFromRoot(\r\n    shortPathArrayOrString: string[] | string, entityManager: EntityManager<Entity>, bindingData: BindingData\r\n  ): DataPath {\r\n\r\n    const dataPath = new DataPath();\r\n    const shortPathArray: string[] = shortPathArrayOrString as string[];\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    let currentEntityTypeInfo = new DataTypeInfo(entityManager.entityType);\r\n    dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);\r\n\r\n    // 遍历下级节点\r\n    shortPathArray.forEach((propName: string) => {\r\n      const propInfo = currentEntityTypeInfo.getPropInfoByName(propName);\r\n      switch (propInfo.group) {\r\n        case DataPropGroup.Primitive:\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n          break;\r\n        case DataPropGroup.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          currentEntityTypeInfo = propInfo.typeInfo;\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n\r\n          break;\r\n        case DataPropGroup.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          currentEntityTypeInfo = propInfo.typeInfo;\r\n\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n          dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return dataPath;\r\n  }\r\n\r\n}\r\n\r\nexport { DataPathCreator };\r\n","/**\r\n * 获取path对应的实体\r\n * @summary\r\n * 关于path的格式如下：\r\n * - 主表：[parentId]\r\n * - 主表关联: [parentId, assoInfo]\r\n * - 从表: [parentId, child1s, child1Id]\r\n * - 从表关联：[parentId, child1s, child1Id, assoInfo]\r\n * - 从从表: [parentId, child1s, child1Id, grand11s, grand11Id]\r\n * - 从从表关联：[parentId, child1s, child1Id, grand11s, grand11Id, assoInfo]\r\n */\r\n\r\n\r\n\r\nexport * from './data_path_node';\r\nexport * from './data_path';\r\nexport * from './data_path_creator';\r\n","export const PARENT_PATH = '__PARENT_PATH__';\r\nexport const PARENT_CLASS = '__PARENT__';\r\n\r\nexport type ClassType = new (...args: any[]) => any;\r\n\r\nexport interface Dynamic {\r\n  loadDynamicData(dynamicData: any): void;\r\n}\r\n","import { Type } from '../core/index';\r\nimport { Entity } from './entity';\r\n\r\n/**\r\n * 创建实体\r\n * @param entityType 实体类型\r\n * @param entityData 实体数据\r\n */\r\nexport function createEntity<T extends Entity>(entityType: Type<any>, entityData: any): T {\r\n  const entity = new entityType(entityData);\r\n  return entity;\r\n}\r\n\r\n/**\r\n * 批量创建实体\r\n * @param entityType     实体类型\r\n * @param entityListData 实体数据数组\r\n */\r\nexport function createEntities<T extends Entity>(entityType: Type<any>, entityListData: any): T[] {\r\n  const entities: T[] = [];\r\n  entityListData.forEach((entityData: any) => {\r\n    const entity = createEntity<T>(entityType, entityData);\r\n    entities.push(entity);\r\n  });\r\n  return entities;\r\n}\r\n\r\n/**\r\n * 已弃用：请使用createEntity方法代替。\r\n */\r\nexport function EntityFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\r\n  const entity = new T(data);\r\n  return entity;\r\n}\r\n\r\n\r\n\r\n","import { Subject } from 'rxjs';\r\nimport { ChangeSet } from '../changeset/change_set';\r\nimport { Modification, ModifyType } from '../changeset/types';\r\nimport { Entity } from './entity';\r\nimport { EntityFactory } from './entity_creator';\r\nimport { PARENT_CLASS, PARENT_PATH, ClassType } from './types';\r\n\r\nexport interface IList<T> {\r\n  [index: number]: T;\r\n}\r\n/**\r\n * 实体集合列表\r\n */\r\nexport class EntityList<T extends Entity> implements IList<T>, Iterable<T> {\r\n\r\n  // #region 私有属性\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private rawData: T[];\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private listChanged = new Subject<Modification>();\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private changeSet = new ChangeSet();\r\n  // #endregion\r\n\r\n\r\n  // #region 公有属性\r\n\r\n  /**\r\n   * 集合改变时触发(新增、行记录修改、删除)\r\n   * @event\r\n   */\r\n  public onListChanged = this.listChanged.asObservable();\r\n\r\n  /**\r\n   * 获取项集合\r\n   */\r\n  public get items(): T[] {\r\n    return this.rawData;\r\n  }\r\n\r\n  /**\r\n   * 列表变更集\r\n   */\r\n  public get changes() {\r\n    return this.changeSet.changes;\r\n  }\r\n\r\n  /**\r\n   * 获取指定索引处的值\r\n   */\r\n  [index: number]: T;\r\n\r\n  /**\r\n   * 迭代器\r\n   */\r\n  *[Symbol.iterator](): Iterator<T> {\r\n    yield* this.items;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n   * @param data JSON数据集合\r\n   * @param type 集合中的实体类型\r\n   */\r\n  constructor(data?: any[], type?: ClassType) {\r\n    this.clear();\r\n    if (data) {\r\n      // this.loadEntities(data);\r\n      data.forEach(item => {\r\n        this.initEntity(EntityFactory(type, item));\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  // #region 公有方法\r\n\r\n  /** 加载实体列表 */\r\n  public loadEntities(entities: T[]) {\r\n    this.clear();\r\n\r\n    entities.forEach(entity => {\r\n      this.initEntity(entity);\r\n    });\r\n\r\n    // 发送Load变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: entities,\r\n      preValue: undefined,\r\n      type: ModifyType.Load\r\n    };\r\n    this.setChanges(changeItem);\r\n  }\r\n  /**\r\n   * 清空\r\n   */\r\n  public clear() {\r\n    this.rawData = [];\r\n  }\r\n\r\n  /**\r\n   * 添加实体对象到集合中，并返回新加的对象\r\n   * @param entity 实体对象\r\n   */\r\n  public appendNew(entity: T): T {\r\n    const newEntity = this.initEntity(entity);\r\n\r\n    // 新增变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: [newEntity],\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n\r\n    this.setChanges(changeItem);\r\n    return newEntity;\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   */\r\n  public appendEntity(entity: T): void {\r\n    const newEntity = this.initEntity(entity);\r\n\r\n    // 新增变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: [newEntity],\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n\r\n    this.setChanges(changeItem);\r\n  }\r\n\r\n  /**\r\n   * 批量追加实体\r\n   */\r\n  public appendEntities(entities: T[]): void {\r\n    const newEntites = entities.map((entity: T) => {\r\n      return this.initEntity(entity);\r\n    });\r\n    const changeItem = {\r\n      path: [],\r\n      value: newEntites,\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n\r\n    this.setChanges(changeItem);\r\n  }\r\n\r\n  /**\r\n   * 删除指定主键ID 的实体对象，返回布尔，true 删除成功，false 删除失败\r\n   * @param primaryId 主键ID\r\n   */\r\n  public remove(primaryId: string): boolean {\r\n    const total = this.count();\r\n    const indexToRemove = this.rawData.findIndex((entity: Entity) => {\r\n      return entity.primaryValue === primaryId;\r\n    });\r\n    if (indexToRemove === -1) {\r\n      return false;\r\n    }\r\n    const entityToRemove = this.rawData[indexToRemove];\r\n    this.rawData.splice(indexToRemove, 1);\r\n\r\n    // 删除变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: { [entityToRemove.primaryProperty.dataField]: primaryId },\r\n      preValue: undefined,\r\n      type: ModifyType.Remove\r\n    };\r\n\r\n    this.updateIndex(total);\r\n    this.setChanges(changeItem);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 从集合中获取指定ID值的实体对象\r\n   * @param id 主键值\r\n   */\r\n  public get(id: string) {\r\n    return this.items.find(item => {\r\n      return item.primaryValue === id;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将变更记录添加到集合变更集中\r\n   * @param value 变更记录\r\n   */\r\n  public setChanges(modinfo: Modification) {\r\n    // 向app层发送的变更\r\n    this.listChanged.next(modinfo);\r\n\r\n    // 构造向changeSet中添加的chagne\r\n    const change = Object.assign({}, modinfo);\r\n    if (modinfo.type === ModifyType.Add && modinfo.value[0] instanceof Entity) {\r\n      change.value = [modinfo.value[0].data];\r\n    }\r\n    this.changeSet.append(change);\r\n  }\r\n\r\n  /** 集合总记录数 */\r\n  public count() {\r\n    return this.items.length;\r\n  }\r\n\r\n  /**\r\n   * 获取实体对象的索引值\r\n   */\r\n  public indexOf(entity: T): number {\r\n    return this.items.indexOf(entity);\r\n  }\r\n\r\n  /**\r\n   * 计算集合中某个属性的总和\r\n   * @param propertyName 属性名称\r\n   */\r\n  public sum(propertyName: string): number {\r\n    if (this.count() === 0) {\r\n      return 0;\r\n    }\r\n    return this.items.reduce((val, curr: T) => {\r\n      return val + curr[propertyName];\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * 已废弃：请使用toJSON方法代替\r\n   * @deprecated\r\n   */\r\n  public toJson() {\r\n    return this.rawData;\r\n  }\r\n\r\n  /**\r\n   * 转换为JSON格式\r\n   */\r\n  public toJSON(): any[] {\r\n    const result = [];\r\n    this.items.forEach((entity: Entity) => {\r\n      result.push(entity.toJSON());\r\n    });\r\n    return result;\r\n  }\r\n\r\n  public toArray(): T[] {\r\n    return this.items;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 私有方法\r\n\r\n  /**\r\n   * 实体初始化\r\n   * @param entity 实体\r\n   */\r\n  private initEntity(entity: T): T {\r\n    entity[PARENT_CLASS] = this;\r\n    entity[PARENT_PATH] = this[PARENT_PATH];\r\n    entity.onValueChanged.subscribe((v: Modification) => {\r\n      const path = v.path;\r\n      const value = v.value;\r\n      const preValue = v.preValue;\r\n      const operator = v.type;\r\n      const subChanges = { path, value, preValue, type: operator };\r\n      this.setChanges(subChanges);\r\n    });\r\n    // TODO: 添加数据验证逻辑代码\r\n    const newLength = this.rawData.push(entity);\r\n    this[newLength - 1] = entity;\r\n\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 更新索引\r\n   * @param total 总记录数\r\n   */\r\n  private updateIndex(total: number) {\r\n    for (let i = 0; i < total; i++) {\r\n      delete this[i];\r\n    }\r\n    this.rawData.forEach((entity, index) => {\r\n      this[index] = entity;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取属性名称\r\n   */\r\n  private getPropertyName() {\r\n    const path = this[PARENT_PATH];\r\n    if (path && path.length) {\r\n      const name = path[path.length - 1];\r\n      return name;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  // #endregion\r\n\r\n}\r\n","import { Entity } from './entity';\r\n\r\nexport function EntityFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\r\n    const entity = new T(data);\r\n    return entity;\r\n}\r\n","import { Observable, Subject, from, of } from 'rxjs';\r\nimport { scan, map, tap } from 'rxjs/operators';\r\nimport { PrimitivePropMetadata, ListPropMetadata, ObjectPropMetadata, DynamicPropMetadata, FieldMetadataUtil } from './metadata/index';;\r\nimport { Modification, ModifyType, ChangeSet } from '../changeset/index';\r\nimport { PARENT_PATH, PARENT_CLASS, Dynamic } from './types';\r\nimport { EntityList } from './entity_list';\r\nimport { EntityFactory } from './entity_factory';\r\n\r\n/**\r\n * @author Lucas Huang\r\n * 实体抽象基类，所有实体必须扩展自Entity\r\n *\r\n * ### 使用示例\r\n * ```\r\n * export class UserEntity extends Entity {\r\n *    userId: string;\r\n *    userName: string;\r\n *\r\n *    constructor(data: any){\r\n *        super(data);\r\n *    }\r\n * }\r\n * ```\r\n */\r\nexport abstract class Entity {\r\n\r\n\r\n  // #region 私有、保护属性\r\n\r\n  /**\r\n   * 验证错误集合\r\n   */\r\n  private validErrors = {};\r\n\r\n  /**\r\n   * 增量变更集合\r\n   */\r\n  protected changeSet = new ChangeSet();\r\n\r\n  /**\r\n   * 是否正在验证\r\n   */\r\n  protected isValidating = false;\r\n\r\n  /**\r\n   * 新数据\r\n   */\r\n  protected newData = undefined;\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 公有属性\r\n\r\n  /**\r\n   * 变更流\r\n   */\r\n  public valueChanged = new Subject<Modification>();\r\n\r\n  /**\r\n   * 属性值改变时触发\r\n   *\r\n   * ### 使用示例\r\n   * ```\r\n   *  const entity = new UserEntity(data);\r\n   *  entity.onValueChanged.subscribe((data: Modification) => {\r\n   *      console.log(data);\r\n   *  })\r\n   *\r\n   * ```\r\n   *\r\n   * @event\r\n   */\r\n  public onValueChanged = this.valueChanged.asObservable();\r\n\r\n  /**\r\n   * 返回JSON格式的数据\r\n   */\r\n  public get data(): any {\r\n    return this.newData;\r\n  }\r\n\r\n  /**\r\n   * 验证错误集合\r\n   */\r\n  public get errors() {\r\n    return this.validErrors;\r\n  }\r\n\r\n  /**\r\n   * 实体变更集\r\n   */\r\n  public get changes(): Modification[] {\r\n    return this.changeSet.changes;\r\n  }\r\n\r\n  /**\r\n   * 实体主键元数据\r\n   */\r\n  public get primaryProperty(): PrimitivePropMetadata {\r\n    return FieldMetadataUtil.getPrimaryFieldMetadata(this.constructor);\r\n  }\r\n\r\n  /**\r\n   * 主键\r\n   * @todo\r\n   * 1、没有主键时返回''不合理，应该返回undefined\r\n   */\r\n  public get primaryKey(): string {\r\n    if (this.primaryProperty) {\r\n      return this.primaryProperty.property;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 实体主键值\r\n   * 1、没有主键时返回''不合理，应该返回undefined\r\n   */\r\n  public get primaryValue(): string {\r\n    if (this.primaryKey) {\r\n      // return this[this.primaryProperty.property].toString();\r\n      const primaryValue = this[this.primaryProperty.property];\r\n      return primaryValue ? primaryValue : '';\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n   * @param data JSON数据\r\n   */\r\n  constructor(data: any) {\r\n    this.newData = Object.assign({}, data);\r\n    this.onValueChanged = this.valueChanged;\r\n    this.initialize();\r\n  }\r\n\r\n\r\n  // #region 公有方法\r\n\r\n  /**\r\n   * 将变更记录保存至变更集中\r\n   * @param value 变更记录\r\n   */\r\n  public setChanges(value: Modification): void {\r\n    const propertyName = value.path[value.path.length - 1];\r\n\r\n    // @todo：事件会从下级向上冒泡，change可能是下级的，不能和当前Entity的newData合并。\r\n    // this.newData = Object.assign(this.newData, { [propertyName]: value.value });\r\n\r\n    this.valueChanged.next(value);\r\n    this.changeSet.append(value);\r\n  }\r\n\r\n  public getPaths() {\r\n    const pathObj = {\r\n      path: [],\r\n      isUdt: false,\r\n      isGrid: false\r\n    };\r\n    const handleParent = item => {\r\n      const parentPaths = item[PARENT_PATH];\r\n      if (parentPaths) {\r\n        const prop = parentPaths[parentPaths.length - 1];\r\n        // 父级所在实体包含的ngObject，存在当前实体字段，则判断为UDt字段\r\n        if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {\r\n          pathObj.isUdt = true;\r\n        }\r\n        // 存在类型为ngList，则判断为grid\r\n        if (item[PARENT_CLASS] && item instanceof EntityList === true) {\r\n          pathObj.isGrid = true;\r\n        }\r\n        pathObj.path.push(prop);\r\n      }\r\n      if (item[PARENT_CLASS] && item instanceof EntityList === true) {\r\n        handleParent(item[PARENT_CLASS]);\r\n      }\r\n    };\r\n    handleParent(this);\r\n    pathObj.path = pathObj.path.reverse();\r\n    return pathObj;\r\n  }\r\n\r\n  /**\r\n   * 加载数据\r\n   * @param data 新数据\r\n   */\r\n  public load(data: any) {\r\n    if (!data) {\r\n      data = {};\r\n    }\r\n\r\n    this.loadFields(data);\r\n    this.loadLists(data);\r\n    this.loadObjects(data);\r\n\r\n    this.loadDynamicObjects(data);\r\n    this.newData = Object.assign({}, data);\r\n  }\r\n\r\n  /**\r\n   * 转换为JSON\r\n   */\r\n  public toJSON() {\r\n    const result = {};\r\n\r\n    // 简单属性\r\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\r\n    Object.keys(ngFields).forEach((propName: string) => {\r\n      const ngField = ngFields[propName];\r\n      const dataField = ngField.dataField || propName;\r\n      result[dataField] = this[propName];\r\n    });\r\n\r\n    // 对象属性\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\r\n    Object.keys(ngObjects).forEach((propName: string) => {\r\n      const ngObject = ngObjects[propName];\r\n      const dataField = ngObject.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON() : {};\r\n    });\r\n\r\n    // 动态属性\r\n    const ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);\r\n    Object.keys(ngDynamics).forEach((propName: string) => {\r\n      const ngDynamic = ngDynamics[propName];\r\n      const dataField = ngDynamic.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON() : {};\r\n    });\r\n\r\n    // 列表属性\r\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\r\n    Object.keys(ngLists).forEach((propName: string) => {\r\n      const ngList = ngLists[propName];\r\n      const dataField = ngList.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON() : {};\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  //#region 实体初始化相关private方法\r\n\r\n  /**\r\n   * 初始化实体\r\n   */\r\n  private initialize() {\r\n    const constructor = this.constructor;\r\n\r\n    const ngFields = FieldMetadataUtil.getNgFields(constructor);\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(constructor);\r\n    const ngLists = FieldMetadataUtil.getNgList(constructor);\r\n    const ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);\r\n\r\n    this.initializeNormalField(ngFields);\r\n    this.initializeList(ngLists);\r\n    this.initializeObject(ngObjects);\r\n    this.initializeDynamic(ngDynamic);\r\n  }\r\n\r\n  /**\r\n   * 创建path\r\n   * @param propertyName 属性名称\r\n   */\r\n  protected createPath(propertyName: string): string[] {\r\n    const primaryFieldMetadata = this.primaryProperty;\r\n    if (primaryFieldMetadata) {\r\n      const primaryDataField = primaryFieldMetadata.dataField;\r\n      return [primaryDataField + ':' + this.primaryValue, propertyName];\r\n    } else {\r\n      return [':', propertyName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 属性字段初始化\r\n   * @param ngFields 属性字段元数据\r\n   */\r\n  private initializeNormalField(ngFields: { [key: string]: PrimitivePropMetadata }): void {\r\n    Object.keys(ngFields).forEach(propName => {\r\n      const ngField = ngFields[propName] as PrimitivePropMetadata;\r\n      const dataField = ngField.dataField || propName;\r\n\r\n      if (delete this[propName]) {\r\n        Object.defineProperty(this, propName, {\r\n          get: function() {\r\n            return this.getPropValue(propName, ngField);\r\n          },\r\n          set: function(newPropValue) {\r\n\r\n            // 有主键的实体，必须先给主键赋值，否则其他字段不允许赋值\r\n            if (this.primaryKey && this.primaryKey === propName && !newPropValue) {\r\n              return;\r\n            }\r\n\r\n            if (this.primaryKey && this.primaryKey !== propName && !this.primaryValue ) {\r\n              return;\r\n            }\r\n\r\n            // 值相同时不触发变更。\r\n            const oldPropValue = this.getPropValue(propName, ngField);\r\n            if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {\r\n              return;\r\n            }\r\n            this.setPropValue(propName, ngField, newPropValue);\r\n            this.emitValueChange(propName, ngField, newPropValue, oldPropValue);\r\n          },\r\n          configurable: true\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 初始化列表类型的元数据\r\n   * @param ngListMetadata 列表类型元数据\r\n   */\r\n  private initializeList(ngListMetadata: { [key: string]: ListPropMetadata }): void {\r\n    Object.keys(ngListMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngListMetadata[propertyName] as ListPropMetadata;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n      const val = this.data[dataField];\r\n\r\n      const entityList = new EntityList<typeof fieldMetadata.type>();\r\n      entityList[PARENT_CLASS] = this;\r\n      entityList[PARENT_PATH] = path;\r\n\r\n      if (val) {\r\n        const entities = val.map(v => EntityFactory<typeof fieldMetadata.type>(fieldMetadata.type, v));\r\n        entityList.loadEntities(entities);\r\n      }\r\n\r\n      entityList.onListChanged.subscribe(value => {\r\n        if (value) {\r\n          if (entityList[PARENT_PATH][0] !== value.path[0]) {\r\n            value.path = entityList[PARENT_PATH].concat(value.path);\r\n          }\r\n          this.setChanges(value);\r\n        }\r\n      });\r\n      this[propertyName] = entityList;\r\n    });\r\n  }\r\n  /**\r\n   * 初始化子对象\r\n   * @param ngObjectMetadata 子对象元数据\r\n   */\r\n  private initializeObject(ngObjectMetadata: { [key: string]: ObjectPropMetadata }) {\r\n    Object.keys(ngObjectMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngObjectMetadata[propertyName] as ObjectPropMetadata;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n\r\n      // val不存在时，用空对象代替\r\n      const val = this.data[dataField] || {};\r\n\r\n      const createEntityFromJsonData = (value: any) => {\r\n        let instance;\r\n        if (value instanceof fieldMetadata.type) {\r\n          instance = value;\r\n        } else {\r\n          instance = EntityFactory(fieldMetadata.type, value);\r\n        }\r\n        instance[PARENT_CLASS] = this;\r\n        instance[PARENT_PATH] = path;\r\n\r\n        instance.onValueChanged.subscribe(changes => {\r\n          if (changes) {\r\n            changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n            this.setChanges(changes);\r\n          }\r\n        });\r\n\r\n        return instance;\r\n      };\r\n\r\n      // 如果没有值用一个空对象代替\r\n      let childEntity = createEntityFromJsonData(val);\r\n      if (delete this[propertyName]) {\r\n        Object.defineProperty(this, propertyName, {\r\n          get: () => {\r\n            return childEntity;\r\n          },\r\n          set: function (value: any) {\r\n            const modifyInfo = {\r\n              path: childEntity[PARENT_PATH],\r\n              value: value.data,\r\n              preValue: this[propertyName].data,\r\n              type: ModifyType.ValueChange\r\n            };\r\n            childEntity = createEntityFromJsonData(value);\r\n            this.setChanges(modifyInfo);\r\n          },\r\n          configurable: true\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private initializeDynamic(ngDynamicMetadata: { [key: string]: DynamicPropMetadata }) {\r\n    Object.keys(ngDynamicMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngDynamicMetadata[propertyName] as DynamicPropMetadata;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n\r\n      const originalData = this.data[dataField] || {};\r\n\r\n      const createEntityFromJsonData = (value: any) => {\r\n        let instance;\r\n        if (value instanceof fieldMetadata.type) {\r\n          instance = value;\r\n        } else {\r\n          instance = EntityFactory(fieldMetadata.type, value);\r\n        }\r\n        instance[PARENT_CLASS] = this;\r\n        instance[PARENT_PATH] = path;\r\n\r\n        instance.onValueChanged.subscribe(changes => {\r\n          if (changes) {\r\n            changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n            this.setChanges(changes);\r\n          }\r\n        });\r\n\r\n        return instance;\r\n      };\r\n\r\n      let dynamicEntity = createEntityFromJsonData(originalData);\r\n      if (delete this[propertyName]) {\r\n        Object.defineProperty(this, propertyName, {\r\n          get: function () {\r\n            return dynamicEntity;\r\n          },\r\n          set: function (value) {\r\n            const modifyInfo = {\r\n              path: dynamicEntity[PARENT_PATH],\r\n              value: value.data,\r\n              preValue: this[propertyName].data,\r\n              type: ModifyType.ValueChange\r\n            };\r\n            dynamicEntity = createEntityFromJsonData(value);\r\n            this.setChanges(modifyInfo);\r\n          },\r\n          configurable: true\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  //#endregion\r\n\r\n\r\n  // #region 加载实体数据相关private、projected方法\r\n\r\n  /**\r\n   * 加载简单字段值\r\n   * @todo 临时用修改的方式模拟\r\n   */\r\n  protected loadFields(data: any) {\r\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\r\n    Object.keys(ngFields).forEach((propName: string) => {\r\n      const ngField = ngFields[propName];\r\n      const dataField = ngField.dataField || propName;\r\n      // if (ngField.primary === false) {\r\n      //   this[propName] = data[dataField];\r\n      // }\r\n      this[propName] = data[dataField];\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 加载子列表数据\r\n   * @param data 数据\r\n   */\r\n  protected loadLists(data: any) {\r\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\r\n    Object.keys(ngLists).forEach((propName: string) => {\r\n      const ngList = ngLists[propName];\r\n      const dataField = ngList.dataField || propName;\r\n      const entityType = ngList.type;\r\n\r\n      // 创建实体\r\n      const listData = data[dataField];\r\n      if (listData) {\r\n        const entities = listData.map((entityData: any) => {\r\n          return EntityFactory<typeof entityType>(entityType, entityData);\r\n        });\r\n        this[propName].loadEntities(entities);\r\n      } else {\r\n        this[propName].loadEntities([]);\r\n      }\r\n    });\r\n  }\r\n\r\n  private loadObjects(data: any) {\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\r\n    Object.keys(ngObjects).forEach((propName: string) => {\r\n      const ngObject = ngObjects[propName];\r\n      const dataField = ngObject.dataField || propName;\r\n      const objectData = data[dataField];\r\n      const entity = this[propName] as Entity;\r\n      if (!entity || !objectData) {\r\n        return;\r\n      }\r\n      entity.load(objectData);\r\n    });\r\n  }\r\n\r\n  protected loadDynamicObjects(data: any) {\r\n    const ngDynamicObjects = FieldMetadataUtil.getNgDynamic(this.constructor);\r\n    Object.keys(ngDynamicObjects).forEach((propName: string) => {\r\n      const ngDynamicObject = ngDynamicObjects[propName];\r\n      const dataField = ngDynamicObject.dataField || propName;\r\n\r\n      const dynamicData = data[dataField] || {};\r\n      const dynamicEntity = this[propName] as Dynamic;\r\n      if (!dynamicEntity) {\r\n        return;\r\n      }\r\n      dynamicEntity.loadDynamicData(dynamicData);\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region 私有工具方法\r\n\r\n\r\n  /**\r\n   * 发送值变更\r\n   */\r\n  private emitValueChange(propName: string, propMetadata: PrimitivePropMetadata, newPropValue: any, oldPropValue: any): void {\r\n    const change = {\r\n      path: this.createPath(propName),\r\n      value: newPropValue,\r\n      preValue: oldPropValue,\r\n      type: ModifyType.ValueChange\r\n    };\r\n\r\n    if (this[PARENT_PATH]) {\r\n      change.path = this[PARENT_PATH].concat(change.path);\r\n    }\r\n    this.setChanges(change);\r\n  }\r\n\r\n  /**\r\n   * 获取属性值\r\n   */\r\n  private getPropValue(propName: string, propMetadata: PrimitivePropMetadata) {\r\n    const dataField = propMetadata.dataField || propName;\r\n    const value = this.data[dataField];\r\n\r\n    // 对多语录入字段，query不返回问题进行兼容\r\n    if (propMetadata.enableMultiLangInput === true && !value) {\r\n      const langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n      const originDataField = dataField.replace('_MULTILANGUAGE', '');\r\n      return {\r\n        [langCode]: this.data[originDataField]\r\n      };\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * 设置属性值\r\n   */\r\n  private setPropValue(propName: string, propMetadata: PrimitivePropMetadata, propValue: any) {\r\n    const dataField = propMetadata.dataField || propName;\r\n    this.data[dataField] = propValue;\r\n  }\r\n\r\n  /**\r\n   * 检查属性值是否发生变化\r\n   */\r\n  private isPropValueChanged(propName: string, propMetadata: PrimitivePropMetadata, newPropValue: any, oldPropValue: any) {\r\n    if (propMetadata.enableMultiLangInput === true) {\r\n      if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {\r\n        return false;\r\n      }\r\n      return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);\r\n    } else {\r\n      return newPropValue !== oldPropValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 多语录入字段的值是否为空\r\n   */\r\n  private isEmptyMultiLangPropValue(value: any) {\r\n    return !value || Object.keys(value).length === 0;\r\n  }\r\n\r\n  // #endregion\r\n}\r\n","import { ModifyType, Modification } from '../changeset/types';\r\nimport { PARENT_PATH, Dynamic, PARENT_CLASS } from './types';\r\nimport { Entity } from './entity';\r\n\r\n/**\r\n * 支持动态字段集合的动态实体\r\n */\r\nexport class DynamicEntity extends Entity implements Dynamic {\r\n\r\n  /**\r\n   * 是否是嵌套的动态实体\r\n   */\r\n  public get IsNested(): boolean {\r\n    return this[PARENT_CLASS] instanceof DynamicEntity;\r\n  }\r\n\r\n  /**\r\n   * @param data JSON数据\r\n   */\r\n  constructor(data: any) {\r\n    super(data);\r\n    this.loadDynamicData(data);\r\n  }\r\n\r\n  public loadDynamicData(dynamicData: any) {\r\n    this.initializeDynamicField(dynamicData);\r\n    // super.loadFields(dynamicData);\r\n  }\r\n\r\n  /**\r\n   * 初始化动态数据\r\n   * @param dynamicData 动态数据\r\n   */\r\n  private initializeDynamicField(dynamicData: any): void {\r\n    // 遍历动态数据的key，创建动态实体属性。\r\n    Object.keys(dynamicData).forEach(propertyName => {\r\n\r\n      // 如果属性已经存在，先删除\r\n      if (this[propertyName]) {\r\n        delete this[propertyName];\r\n      }\r\n\r\n      const dataField = propertyName;\r\n      if (dynamicData[propertyName] instanceof Object) {\r\n        const path = this.createPath(propertyName);\r\n        let dynamicEntity = this.createDynamicEntityFromJsonData(dynamicData[propertyName], path);\r\n        Object.defineProperty(this, propertyName, {\r\n          get: function() {\r\n            return dynamicEntity;\r\n          },\r\n          set: function(value) {\r\n            const modifyInfo = {\r\n              path: dynamicEntity[PARENT_PATH],\r\n              value: value.data,\r\n              preValue: this[propertyName].data,\r\n              type: ModifyType.ValueChange\r\n            };\r\n            dynamicEntity = this.createDynamicEntityFromJsonData(value, path);\r\n            this.setChanges(modifyInfo);\r\n          },\r\n          configurable: true\r\n        });\r\n      } else {\r\n        Object.defineProperty(this, propertyName, {\r\n          // 定义返回数据方法。\r\n          get: function() {\r\n            // 从初始数据返回字段值。\r\n            return this.data[dataField];\r\n          },\r\n          set: function(value) {\r\n            // 值相同时不触发变更。\r\n            const oldValue = this.data[dataField];\r\n            if (oldValue === value) {\r\n              return;\r\n            }\r\n            // 更新元数据数据。\r\n            this.data[dataField] = value;\r\n            // 变更集\r\n            const changes = {\r\n              type: ModifyType.ValueChange,\r\n              path: this.createPath(propertyName),\r\n              value: value,\r\n              preValue: oldValue\r\n            };\r\n\r\n            if (this[PARENT_PATH]) {\r\n              changes.path = this[PARENT_PATH].concat(changes.path);\r\n            }\r\n            this.setChanges(changes);\r\n          },\r\n          configurable: true\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private createDynamicEntityFromJsonData(value: any, parentPath: string[]) {\r\n    let instance: DynamicEntity;\r\n    if (value instanceof DynamicEntity) {\r\n      instance = value;\r\n    } else {\r\n      instance = new DynamicEntity(value);\r\n    }\r\n    instance[PARENT_CLASS] = this;\r\n    instance[PARENT_PATH] = parentPath;\r\n    instance.onValueChanged.subscribe(changes => {\r\n      if (changes) {\r\n        changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n        this.setChanges(changes);\r\n      }\r\n    });\r\n\r\n    return instance;\r\n  }\r\n\r\n  /**\r\n   * 将变更记录保存至变更集中\r\n   * @param value 变更记录\r\n   * @todo\r\n   * 1、preValue的处理有问题，下级传递上来的变更这样可以，根DyanmicaEntity上的，data已经发生变化，prevalue和value是一样了；\r\n   * 2、当value是下级冒泡上来的，需要根据value去更新当前层级的data，该逻辑不应该放在setChagnes，待修改。\r\n   */\r\n  setChanges(value: Modification): void {\r\n    const propertyName = value.path[value.path.length - 1];\r\n    const preValue = Object.assign({}, this.data);\r\n    this.newData = Object.assign(this.newData, { [propertyName]: value.value });\r\n    let parentPath = value.path;\r\n    if (value.path.length > 2) {\r\n      parentPath = value.path.slice(0, value.path.length - 2);\r\n    }\r\n\r\n    // 统一不使用构造函数（保持和其他位置对Modification的构造一致）\r\n    // const parentModification = new Modification(this.data, value.type, parentPath, preValue);\r\n    const parentModification: Modification = {\r\n      path: parentPath,\r\n      value: this.data,\r\n      preValue: preValue,\r\n      type: value.type\r\n    };\r\n\r\n    this.valueChanged.next(parentModification);\r\n    this.changeSet.append(value);\r\n  }\r\n\r\n  /**\r\n   * toJSON\r\n   */\r\n  public toJSON() {\r\n    return this.data;\r\n  }\r\n}\r\n","import { Type, makeDecorator } from '../core/index';\r\n\r\n/**\r\n * REPOSITORY_META\r\n */\r\nexport const REPOSITORY_META = 'RepositoryMeta';\r\n\r\n\r\n/**\r\n * RepositoryMeta\r\n */\r\nexport interface RepositoryMeta {\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  entityType: Type<any>;\r\n}\r\n\r\n\r\n/**\r\n * RepositoryMetaDecorator\r\n */\r\nexport interface RepositoryMetaDecorator {\r\n  (obj?: RepositoryMeta): any;\r\n  new (obj?: RepositoryMeta): any;\r\n}\r\n\r\n\r\n/**\r\n * RepositoryMeta\r\n */\r\nexport function RepositoryMeta(options: RepositoryMeta) {\r\n  const decoratorFactory = makeDecorator(\r\n    REPOSITORY_META,\r\n    (obj: RepositoryMeta) => obj\r\n  );\r\n  return decoratorFactory(options);\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-01 19:36:51\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-03 19:46:42\r\n */\r\nimport { Type } from '../core/index';\r\nimport { Modification, ModifyType } from '../changeset/index';\r\nimport { Subject } from 'rxjs';\r\nimport { Entity, FieldMetadataUtil, EntityList } from '../entity/index';\r\n// tslint:disable: no-bitwise\r\n/**\r\n * 实体集合\r\n * @todo：应该用EntityList代替。\r\n */\r\nclass EntityCollection<T extends Entity> {\r\n\r\n  /**\r\n   * 内部实体Set\r\n   */\r\n  private innerEntitySet: Set<T>;\r\n\r\n  /**\r\n   * 内部实体Map\r\n   */\r\n  private innerEntityMap: Map<string, T>;\r\n\r\n\r\n  /**\r\n   * Entity集合变更流\r\n   */\r\n  public collectionChanged: Subject<Modification>;\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public readonly entityType: Type<T>;\r\n\r\n  /**\r\n   * 实体主键\r\n   */\r\n  public readonly primaryKey: string;\r\n\r\n  /**\r\n   * 实体当前分页信息\r\n   */\r\n  public paginationInfo: any;\r\n\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(entityType: Type<T>) {\r\n    this.innerEntitySet = new Set<T>();\r\n    this.innerEntityMap = new Map<string, T>();\r\n    this.collectionChanged = new Subject<Modification>();\r\n\r\n    this.entityType = entityType;\r\n    this.primaryKey = FieldMetadataUtil.getPrimaryKey(this.entityType);\r\n  }\r\n\r\n  /**\r\n   * 实体数量\r\n   */\r\n  public count(): number {\r\n    return this.innerEntitySet.size;\r\n  }\r\n\r\n  public get entityTypeName() {\r\n    return this.entityType.name;\r\n  }\r\n  /**\r\n   * 是否包含指定主键值的实体\r\n   * @param id 主键值\r\n   */\r\n  public has(id: string): boolean {\r\n    return this.innerEntityMap.has(id);\r\n  }\r\n\r\n  /**\r\n   * 清空全部实体\r\n   */\r\n  public clear() {\r\n    this.innerEntityMap.clear();\r\n    this.innerEntitySet.clear();\r\n    this.notifyCollectionChanged(new Modification([], ModifyType.Load));\r\n  }\r\n\r\n  /**\r\n   * 转换为实体数组\r\n   */\r\n  public toArray(): Entity[] {\r\n    return Array.from(this.innerEntitySet);\r\n  }\r\n\r\n  /**\r\n   * 转换为JSON数组\r\n   */\r\n  public toJSON(): any[] {\r\n    const result = [];\r\n    const entities = this.toArray();\r\n    entities.forEach((entity: Entity) => {\r\n      result.push(entity.toJSON());\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 批量加载实体\r\n   */\r\n  public loadEntities(entities: any[]) {\r\n\r\n    this.innerEntityMap.clear();\r\n    this.innerEntitySet.clear();\r\n\r\n    entities.forEach(entity => {\r\n      this.innerEntitySet.add(entity);\r\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entities, ModifyType.Load));\r\n\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   * @param entity 要追加的实体\r\n   */\r\n  public addEntity(entity: T) {\r\n    this.verifyEntityToAdd(entity);\r\n    this.innerEntitySet.add(entity);\r\n    this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n    this.notifyCollectionChanged(new Modification([entity], ModifyType.Add));\r\n  }\r\n\r\n  /**\r\n   * 批量追加实体\r\n   * @param entities 要加载的实体数组\r\n   */\r\n  public addEntities(entities: T[]) {\r\n    if (!entities) {\r\n      return;\r\n    }\r\n    const entitiesToAdd: T[] = [];\r\n    entities.forEach(entity => {\r\n      this.verifyEntityToAdd(entity);\r\n      entitiesToAdd.push(entity);\r\n    });\r\n    entitiesToAdd.forEach(entity => {\r\n      this.innerEntitySet.add(entity);\r\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entitiesToAdd, ModifyType.Add));\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * 根据主键值获取实体\r\n   */\r\n  getEntityById(identity: string): T {\r\n    if (this.innerEntityMap.has(identity) === false) {\r\n      return null;\r\n    }\r\n    const entity = this.innerEntityMap.get(identity);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 根据路径获取实体\r\n   */\r\n  getEntityByPath(pathArray: string[]): any {\r\n    const rootEntityId = pathArray[0].split(':')[1];\r\n\r\n    let parentNode: any = this.getEntityById(rootEntityId);\r\n    for (let i = 1; i < pathArray.length && parentNode; i = i + 1) {\r\n      const currentPath = pathArray[i];\r\n      if (parentNode instanceof Entity) {\r\n\r\n        // @todo：强识了别冒号\r\n        if (currentPath.indexOf(':') === -1) {\r\n          parentNode = parentNode[pathArray[i]];\r\n        }\r\n      } else {\r\n        parentNode = parentNode.get(pathArray[i].split(':')[1]);\r\n      }\r\n    }\r\n\r\n    return parentNode;\r\n  }\r\n\r\n  /**\r\n   * 返回符合指定条件的实体集合\r\n   * @param predicate 条件谓词\r\n   */\r\n  getEntities(predicate: (value: T, index: number, array: T[]) => T): T[] {\r\n    const entities: T[] = Array.from(this.innerEntitySet);\r\n    const matchedEntities = entities.filter(predicate);\r\n    return matchedEntities;\r\n  }\r\n\r\n  /**\r\n   * 获取全部实体\r\n   */\r\n  getAllEntities(): T[] {\r\n    return Array.from(this.innerEntitySet);\r\n  }\r\n\r\n  /**\r\n   * 根据主键值删除对应实体\r\n   * @param identity 主键值\r\n   */\r\n  removeEntityById(identity: string): T {\r\n    this.verifyEntityToRemove(identity);\r\n    const entityToRemove = this.innerEntityMap.get(identity);\r\n    this.innerEntityMap.delete(identity);\r\n    this.innerEntitySet.delete(entityToRemove);\r\n    this.notifyCollectionChanged(new Modification([entityToRemove], ModifyType.Remove));\r\n    return entityToRemove;\r\n  }\r\n\r\n  removeEntitiesByIds(id: string) {\r\n  }\r\n\r\n  /**\r\n   * 删除符合条件的实体集合\r\n   */\r\n  public removeEntities(predicate: (value: T, index: number, array: T[]) => any): T[] {\r\n    const entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);\r\n    entitiesToRemove.forEach(entityToRemove => {\r\n      this.innerEntityMap.delete(entityToRemove[this.primaryKey]);\r\n      this.innerEntitySet.delete(entityToRemove);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entitiesToRemove, ModifyType.Remove));\r\n    return entitiesToRemove;\r\n  }\r\n  /**\r\n   * 重置子表数据\r\n   * @param paths 路径  \r\n   * 路径格式 ['实体主键:主键值','从表Codes','从从表Codes']\r\n   * @param entities 实体数组\r\n   */\r\n  public resetEntities(paths: string[], entities: T[]) {\r\n    if (paths[0].indexOf(':') === -1) {\r\n      throw new Error('路径格式错误');\r\n    }\r\n    // paths里面第一个一定是id\r\n    const entityInfo: string[] = paths[0].split(':');\r\n    const [entityPrimaryKey, entityId] = entityInfo;\r\n    let entity: T = null;\r\n    for (const element of this.innerEntitySet) {\r\n      if (element[entityPrimaryKey] === entityId) {\r\n        entity = element;\r\n        break;\r\n      }\r\n    }\r\n    // for (let index = 0; index < this.innerEntitySet; index++) {\r\n    //   const element: T = this.innerEntitySet[index];\r\n    //   if (element[entityPrimaryKey] === entityId) {\r\n    //     entity = element;\r\n    //     break;\r\n    //   }\r\n    // }\r\n    if (!entity) {\r\n      throw new Error(`找不到${entityPrimaryKey}为${entityId}的实体`);\r\n    }\r\n    let data: any = entity;\r\n    paths.slice(1).forEach(path => {\r\n      data = data[path];\r\n    });\r\n    const entityList = data as EntityList<T>;\r\n    entityList.clear();\r\n    entityList.loadEntities(entities);\r\n  }\r\n\r\n  /**\r\n   * 验证实体是否能够添加\r\n   */\r\n  private verifyEntityToAdd(entity: T): boolean {\r\n    if (this.has(entity[this.primaryKey])) {\r\n      this.innerEntitySet.delete(this.innerEntityMap.get(entity[this.primaryKey]));\r\n      this.innerEntityMap.delete(entity[this.primaryKey]);\r\n      // throw new Error(`The repository already had an item with the save identity of '${entity[this.primaryKey]}'`);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 验证实体是否能移除\r\n   */\r\n  private verifyEntityToRemove(identity: string): boolean {\r\n    if (!this.has(identity)) {\r\n      throw new Error(`The entity with identity of '${identity} dose not exsit.'`);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 实体集合变更流\r\n   */\r\n  private notifyCollectionChanged(modification: Modification) {\r\n    this.collectionChanged.next(modification);\r\n  }\r\n\r\n  //#region 分页\r\n\r\n  /**\r\n   * 设置分页大小\r\n   */\r\n  set pageSize(pageSize: number) {\r\n    if (typeof (pageSize) !== 'number' || pageSize < 0) {\r\n      throw new Error('Invalid parameter:pageSize');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageSize });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    // this.notifyCollectionChanged(new Modification(this.paginationInfo[this.entityTypeName], ModifyType.PaginationInfoChange));\r\n    this.paginationInfo = Object.assign({}, original, { pageSize });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取分页大小\r\n   * @description 如果用户未指定分页大小则默认为0，即获取所有数据\r\n   */\r\n  get pageSize(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.pageSize || 0;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 设置数据总条数\r\n   */\r\n  set totalCount(total: number) {\r\n    if (typeof (total) !== 'number' || total < 0) {\r\n      throw new Error('Invalid parameter:total');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { total });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    this.paginationInfo = Object.assign({}, original, { total });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取数据总条数\r\n   */\r\n  get totalCount(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.total || 0;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 设置当前页码\r\n   */\r\n  set pageIndex(pageIndex: number) {\r\n    if (typeof (pageIndex) !== 'number' || pageIndex < 0) {\r\n      throw new Error('Invalid parameter:pageIndex');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageIndex });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    this.paginationInfo = Object.assign({}, original, { pageIndex });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取当前页码\r\n   */\r\n  get pageIndex(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.pageIndex || 1;\r\n    }\r\n    return 1;\r\n  }\r\n  /**\r\n   * 更新分页信息\r\n   * @param path 绑定路径\r\n   * @param pageInfo 分页信息\r\n   */\r\n  public updatePaginationInfoByPath(path: string, pageInfo: { pageIndex: any, pageSize: any, totalCount: any, [prop: string]: any }) {\r\n    const original = this.paginationInfo;\r\n    const { pageIndex, pageSize, totalCount: total } = pageInfo;\r\n    const paginationInfo = Object.assign({}, original, { pageIndex, pageSize, total });\r\n    this.setPaginationConfigByPath(path, paginationInfo);\r\n  }\r\n  /**\r\n   * 根据路径获取分页大小\r\n   * @param path 路径\r\n   */\r\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n    if (!path || path === '/') {\r\n      return this.paginationInfo;\r\n    }\r\n    if (typeof path !== 'string') {\r\n      throw new Error('路径必须为字符串！');\r\n    }\r\n    path = path.substring(1);\r\n    const paths = path.split('/').filter(item => !!item && item.trim().length > 0).map(item => item.trim());\r\n    let config = this.paginationInfo;\r\n    paths.forEach(item => {\r\n      if (config && config.hasOwnProperty(item)) {\r\n        config = config[item];\r\n      } else {\r\n        config = null;\r\n      }\r\n    });\r\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n  }\r\n  /**\r\n   * 设置分页信息\r\n   * @param path 路径\r\n   * @param value 值\r\n   */\r\n  public setPaginationConfigByPath(path: string | Array<any>, value: any) {\r\n    const original = JSON.stringify(this.paginationInfo);\r\n    if (!path || path === '/') {\r\n      this.paginationInfo = value;\r\n    } else {\r\n      if (!Array.isArray(path)) {\r\n        path = path.toString().match(/[^/[\\]]+/g) || [];\r\n      }\r\n      path.slice(0, -1).reduce((prev, current, index) =>\r\n        Object(prev[current]) === prev[current]\r\n          ? prev[current]\r\n          : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]\r\n            ? []\r\n            : {},\r\n        this.paginationInfo)[path[path.length - 1]] = value;\r\n    }\r\n\r\n    if (JSON.stringify(this.paginationInfo) !== original) {\r\n      this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n    }\r\n    return this.paginationInfo;\r\n  }\r\n  //#endregion\r\n}\r\n\r\nexport { EntityCollection };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-07 17:24:38\r\n * @Last Modified by:   Witt\r\n * @Last Modified time: 2019-03-11 19:50:38\r\n */\r\n\r\nimport { Type } from '../core/index';\r\nimport { Entity, EntityList, createEntity, createEntities } from '../entity/index';\r\nimport { EntityCollection } from './entity_collection';\r\nimport { DataPath, DataPathCreator, DataPathNodeType, DataTypeInfo } from '../entity/index';\r\nimport { EntityUtil } from '../binding-data/entity_util';\r\n\r\n\r\n/**\r\n * 实体管理类\r\n */\r\nclass EntityManager<T extends Entity> {\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public entityType: Type<Entity>;\r\n\r\n  /**\r\n   * 实体集合\r\n   */\r\n  public entityCollection: EntityCollection<Entity>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(entityCollection: EntityCollection<T>) {\r\n    this.entityCollection = entityCollection;\r\n    this.entityType = entityCollection.entityType;\r\n  }\r\n\r\n\r\n  // #region 创建实体相关方法\r\n\r\n  /**\r\n   * 创建实体\r\n   */\r\n  public createEntity(entityData: any): T {\r\n    const entity = createEntity<T>(this.entityType, entityData);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 批量创建实体\r\n   */\r\n  public createEntities(entityListData: any[], entityType: any): T[] {\r\n    const entities: T[] = createEntities<T>(this.entityType, entityListData);\r\n    return entities;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 获取实体、实体数组相关方法\r\n\r\n  /**\r\n   * 获取path对应的实体\r\n   */\r\n  public getEntityByPath(path: string[]): Entity {\r\n    const entity = this.getEntityNodeByPath(path) as Entity;\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 获取path对应的实体\r\n   */\r\n  public getEntitiesByPath(path: string[]): Entity[] {\r\n    const entityCollectionOrList = this.getEntityNodeByPath(path) as EntityCollection<Entity> | EntityList<Entity>;\r\n    let entities: Entity[];\r\n    if (entityCollectionOrList instanceof EntityCollection === true) {\r\n      entities = (entityCollectionOrList as EntityCollection<Entity>).toArray();\r\n    } else {\r\n      entities = (entityCollectionOrList as EntityList<Entity>).toArray();\r\n    }\r\n    return entities;\r\n  }\r\n\r\n  /**\r\n   * 获取实体节点\r\n   * @param path 节点路径\r\n   */\r\n  private getEntityNodeByPath(path: string[]): EntityCollection<Entity> | EntityList<Entity> | Entity {\r\n    const dataPath = DataPathCreator.createByLongPathFromRoot(path, this);\r\n    let entityNode: any = this.entityCollection;\r\n    let pathNode = dataPath.head.next;\r\n    while (pathNode) {\r\n      if (pathNode.type === DataPathNodeType.DataId) {\r\n        if (entityNode instanceof EntityCollection === true) {\r\n          entityNode = (entityNode as EntityCollection<Entity>).getEntityById(pathNode.value);\r\n        } else {\r\n          entityNode = (entityNode as EntityList<Entity>).get(pathNode.value);\r\n        }\r\n      } else {\r\n        entityNode = entityNode[pathNode.value];\r\n      }\r\n      if (!entityNode) {\r\n        throw new Error(`找不到${pathNode.value}对应的数据节点`);\r\n      }\r\n      pathNode = pathNode.next;\r\n    }\r\n    return entityNode;\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 获取、设置属性值\r\n\r\n  /**\r\n   * 获取path对应的实体属性值\r\n   */\r\n  public getPropValueByPath(path: string[]): any {\r\n    const propName = path.pop();\r\n    const entity = this.getEntityByPath(path);\r\n    return entity[propName];\r\n  }\r\n\r\n  /**\r\n   * 设置path对应实体的属性值\r\n   */\r\n  public setPropValueByPath(path: string[], propValue: any): void {\r\n    const propName = path.pop();\r\n    const entity = this.getEntityByPath(path);\r\n    entity[propName] = propValue;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 插入实体\r\n\r\n  /**\r\n   * 在path对应实体前插入实体\r\n   */\r\n  public insertEntityBeforeByPath(fpath: string[]) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前批量插入实体\r\n   */\r\n  public insertEntitiesBeforeByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前插入实体\r\n   */\r\n  public insertEntityAfterByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前批量插入实体\r\n   */\r\n  public insertEntitiesAfterByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 追加实体\r\n\r\n  /**\r\n   * 在path对应的实体集合中追加1个实体\r\n   */\r\n  // public appendEntityByPath(fpath: string[], entity: Entity): void {\r\n  //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n  //   if (entityCollectionOrList instanceof EntityCollection === true) {\r\n  //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n  //     entityCollection.addEntity(entity);\r\n  //   } else {\r\n  //     const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n  //     entityList.appendEntity(entity);\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * 根据path获取实体集合\r\n   * @param fpath 路径\r\n   * @param entityData 实体数据\r\n   * @param initialData[可选] 默认值\r\n   */\r\n  public appendEntityByPath(fpath: string, entityData: any, initialData?: any): Entity {\r\n    const subPaths = fpath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\r\n    }\r\n\r\n    let childEntityList: EntityList<any>;\r\n    let propInfo: { propType: string, propEntityType: any };\r\n    let propName: string;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      propName = subPaths[i];\r\n\r\n      // todo: EntityCollection重构之后这里无需差异处理\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      const entityType = propInfo ? propInfo.propEntityType : this.entityType;\r\n      propInfo = EntityUtil.getPropInfo(entityType, propName);\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\r\n      }\r\n    }\r\n\r\n    // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);\r\n    const childEntity = createEntity<Entity>(propInfo.propEntityType, entityData);\r\n    // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值\r\n    if (initialData) {\r\n      EntityUtil.appendInitialData(childEntity, initialData);\r\n    }\r\n    childEntityList.appendNew(childEntity);\r\n    return childEntity;\r\n  }\r\n\r\n\r\n  /**\r\n   * 在path对应的实体集合中追加多个实体\r\n   */\r\n  public appendEntitiesByPath(fpath: string[], entities: Entity[]) {\r\n    const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n    if (entityCollectionOrList instanceof EntityCollection === true) {\r\n      const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n      entityCollection.addEntities(entities);\r\n    } else {\r\n      const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n      entityList.appendEntities(entities);\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 删除实体\r\n\r\n  /**\r\n   * 从fapth对应的实体集合中删除id对应的实体\r\n   */\r\n  // public removeEntityByPath(fpath: string[], id: string): void {\r\n  //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n  //   if (entityCollectionOrList instanceof EntityCollection === true) {\r\n  //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n  //     entityCollection.removeEntityById(id);\r\n  //   } else {\r\n  //     const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n  //     entityList.remove(id);\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * 根据path获取实体集合\r\n   * @param fpath path\r\n   */\r\n  public removeEntityByPath(fpath: string, id: string) {\r\n    const subPaths = fpath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\r\n    }\r\n    let childEntityList: EntityList<any>;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      const propName = subPaths[i];\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\r\n      }\r\n    }\r\n\r\n    childEntityList.remove(id);\r\n  }\r\n\r\n  /**\r\n   * 从fapth对应的实体集合中删除ids对应的实体\r\n   */\r\n  public removeEntitiesByPath(fpath: string[], ids: string[]): void {\r\n    // const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n    // if (entityCollectionOrList instanceof EntityCollection === true) {\r\n    //   const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n    //   entityCollection.removeEntitiesByIds(ids);\r\n    // } else {\r\n    //   const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n    //   entityList.remove(ids);\r\n    // }\r\n    throw new Error('Not Implemented');\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 清空变更集相关方法\r\n\r\n  /**\r\n   * 清空所有实体的变更集\r\n   */\r\n  public clearAllEntityChanges() {\r\n    const entities = this.entityCollection.toArray();\r\n    entities.forEach((entity: Entity) => {\r\n      entity.changes.splice(0, entity.changes.length);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 清空id指定的实体变更集\r\n   */\r\n  public clearEntityChangesById(id: string): void {\r\n    const entity = this.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return;\r\n    }\r\n    entity.changes.splice(0, entity.changes.length);\r\n  }\r\n\r\n  /**\r\n   * 清空ids数组中指定的实体的变更集\r\n   */\r\n  public clearEntityChangesByIds(ids: string[]): void {\r\n    if (!ids || ids.length < 0) {\r\n      return;\r\n    }\r\n\r\n    ids.forEach((id: string) => {\r\n      this.clearEntityChangesById(id);\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 变更集检查相关方法\r\n\r\n  /**\r\n   * 检查所有的实体，是否有未提交的变更\r\n   */\r\n  public checkAllEntityChanges(): boolean {\r\n\r\n    const entities = this.entityCollection.toArray();\r\n    const hasChanges = entities.some((entity: Entity) => {\r\n      if (entity.changes.length > 0) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    return hasChanges;\r\n  }\r\n\r\n  /**\r\n   * 检查id对应的实体，是否有未提交的变更\r\n   */\r\n  public checkEntityChangesById(id: string): boolean {\r\n    const entity = this.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return false;\r\n    }\r\n    return entity.changes.length > 0;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 不规范方法，待废弃\r\n\r\n  /**\r\n   * 待废弃\r\n   * @deprecated\r\n   */\r\n  public clearEntityChangesByArray(idArray: string[]): void {\r\n    this.clearEntityChangesByIds(idArray);\r\n  }\r\n\r\n  // #endregion\r\n\r\n}\r\n\r\nexport { EntityManager };\r\n","import { Type  } from '../core/index';\r\nimport { Entity, FieldMetadataUtil } from '../entity/index';\r\n// tslint:disable: no-bitwise\r\n\r\nexport class PaginationManager<T extends Entity> {\r\n\r\n    constructor(private entityType: Type<T>, private paginationConfig: any) {\r\n        if (this.paginationConfig === null || this.paginationConfig === undefined) {\r\n            this.paginationConfig = this.getNgListProperties();\r\n        }\r\n        // 兼容老表单，将之前的主表分页信息展开到分页配置根中\r\n        this.expandMainEntityConfig();\r\n        this.deleteMainEntityConfig();\r\n    }\r\n    /**\r\n     * 主表分页信息展开到分页配置根中\r\n     */\r\n    private expandMainEntityConfig() {\r\n        const entityName = this.entityType.name;\r\n        if (this.paginationConfig.hasOwnProperty(entityName)) {\r\n            const entityConfig = this.paginationConfig[entityName];\r\n            this.paginationConfig = Object.assign(this.paginationConfig, entityConfig);\r\n        }\r\n    }\r\n    /**\r\n     * 删除主表实体配置信息\r\n     */\r\n    private deleteMainEntityConfig() {\r\n        delete this.paginationConfig[this.entityType.name];\r\n    }\r\n    /**\r\n     * 获取分页信息\r\n     */\r\n    public get pagination() {\r\n        return this.paginationConfig;\r\n    }\r\n    /**\r\n     * 获取分页信息\r\n     * @param path 路径\r\n     * @param defaultValue 默认值\r\n     */\r\n    public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n        if (!path || path === '/') {\r\n            return this.paginationConfig;\r\n        }\r\n        if (typeof path !== 'string') {\r\n            throw new Error('路径必须为字符串！');\r\n        }\r\n        path = path.substring(1);\r\n        const paths = path.split('/').filter(item => !!item && item.trim().length > 0);\r\n        let config = this.paginationConfig;\r\n        paths.forEach(item => {\r\n            if (config && config.hasOwnProperty(item)) {\r\n                config = config[item];\r\n            } else {\r\n                config = null;\r\n            }\r\n        });\r\n        return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n    }\r\n    /**\r\n     * 设置分页信息\r\n     * @param path 路径\r\n     * @param value 值\r\n     */\r\n    public setPaginationConfigByPath(path: string | Array<any>, value: any) {\r\n        if (!Array.isArray(path)) {\r\n            path = path.toString().match(/[^/[\\]]+/g) || [];\r\n        }\r\n        path.slice(0, -1).reduce((prev, current, index) =>\r\n            Object(prev[current]) === prev[current]\r\n                ? prev[current]\r\n                : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]\r\n                    ? []\r\n                    : {},\r\n            this.paginationConfig)[path[path.length - 1]] = value;\r\n        return this.paginationConfig;\r\n    }\r\n\r\n    /**\r\n     * 递归获取当前实体的所有NgList属性\r\n     * @param defaultPageSize defaultPageSize\r\n     */\r\n    private getNgListProperties(defaultPageSize: number = 0) {\r\n\r\n        const getChilds = (objectType: Type<Entity>) => {\r\n            const listProperties = FieldMetadataUtil.getNgList(objectType);\r\n            let result = {};\r\n            if (Object.keys(listProperties).length < 1) {\r\n                return result;\r\n            }\r\n\r\n            Object.keys(listProperties).forEach(prop => {\r\n                let itemTypeName = listProperties[prop].dataField;\r\n                // 去掉尾部的s\r\n                if (itemTypeName.endsWith('s')) {\r\n                    itemTypeName = itemTypeName.substring(0, itemTypeName.length - 1);\r\n                }\r\n                result[itemTypeName] = {\r\n                    pageSize: defaultPageSize\r\n                };\r\n                const child = getChilds(listProperties[prop].type);\r\n                if (child !== null && Object.keys(child).length > 0) {\r\n                    result = Object.assign({}, result, child);\r\n                }\r\n            });\r\n            return result;\r\n        };\r\n        const childs = getChilds(this.entityType);\r\n        const root = Object.assign({}, { pageSize: defaultPageSize }, childs);\r\n        return root;\r\n    }\r\n\r\n}\r\n","import { DataChange, DataChangeType } from '../core';\r\n\r\nclass DataChangeHistory {\r\n    private history: Array<DataChange>;\r\n    constructor() {\r\n        this.history = [];\r\n    }\r\n    public addChange(dataChange: DataChange) {\r\n        const changeType = DataChangeType[dataChange.changeType];\r\n        this[`on${changeType}Data`](dataChange);\r\n    }\r\n    public addChanges(dataChange: DataChange[]) {\r\n        dataChange.forEach(change => this.addChange(change));\r\n    }\r\n    public clear() {\r\n        this.history.splice(0, this.history.length);\r\n    }\r\n    public clearByIds(ids: string[]) {\r\n        this.history = this.history.filter(item => {\r\n            if (item.fpath && item.fpath !== '/' && item.fpath.includes('/')) {\r\n                for (const id of ids) {\r\n                    const include = item.fpath.split('/').includes(id);\r\n                    return !include;\r\n                }\r\n            } else {\r\n                return !ids.includes(item.dataId);\r\n            }\r\n        });\r\n    }\r\n    public isChanged() {\r\n        return this.history.length > 0;\r\n    }\r\n    private onAddData(dataChange: DataChange) {\r\n        this.history.push(dataChange);\r\n    }\r\n    private onDeleteData(dataChange: DataChange) {\r\n        const index = this.history.findIndex(item => item.dataId === dataChange.dataId && item.changeType === DataChangeType.Add);\r\n        if (index >= 0) {\r\n            this.history.splice(index, 1);\r\n        } else {\r\n            this.history.push(dataChange);\r\n        }\r\n    }\r\n}\r\nexport { DataChangeHistory };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-12 15:37:11\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-03 19:10:44\r\n * @todo 待优化问题\r\n * 1、apiUrl是否应该在基类中，子类中的api如何传递给基类；\r\n */\r\n\r\nimport { Type } from '../core/index';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { DataTypeInfo } from '../entity/index';\r\nimport { Guid } from '../utils/index';\r\nimport { Modification } from '../changeset/index';\r\nimport { MetadataUtil } from '../core/index';\r\nimport { Entity, createEntity, createEntities, FieldMetadataUtil } from '../entity/index';\r\nimport { RepositoryMeta } from './decorators';\r\nimport { EntityCollection } from './entity_collection';\r\nimport { PaginationManager } from './pagination_manager';\r\nimport { DataChangeHistory } from './data_change_history';\r\n\r\nexport abstract class Repository<T extends Entity> {\r\n\r\n  /**\r\n   * 名称\r\n   */\r\n  abstract name: string;\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public entityType: Type<T>;\r\n\r\n  /**\r\n   * 实体类型信息\r\n   */\r\n  public entityTypeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 实体集合\r\n   */\r\n  public entityCollection: EntityCollection<T>;\r\n\r\n  /**\r\n   * 用户分页配置信息\r\n   */\r\n  public paginationInfo: any = null;\r\n\r\n  /**\r\n   * 数据变更历史\r\n   * @summary\r\n   * 仅针对主表增加、从表删除\r\n   */\r\n  public dataChangeHistory: DataChangeHistory;\r\n\r\n\r\n  /**\r\n   * 分页管理器\r\n   */\r\n  public paginationManager: PaginationManager<T>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n  }\r\n\r\n  protected init() {\r\n    this.entityTypeInfo = new DataTypeInfo(this.entityType);\r\n    this.entityCollection = new EntityCollection<T>(this.entityType);\r\n    this.dataChangeHistory = new DataChangeHistory();\r\n  }\r\n\r\n  /**\r\n   * 实体主键\r\n   */\r\n  public get primaryKey(): string {\r\n    return this.entityCollection.primaryKey;\r\n  }\r\n\r\n  /**\r\n   * 实体变更集合\r\n   */\r\n  public get entityCollectionChange(): Subject<Modification> {\r\n    return this.entityCollection.collectionChanged;\r\n  }\r\n\r\n  /**\r\n   * 重置状态\r\n   */\r\n  public reset(): void {\r\n    this.entityCollection.clear();\r\n  }\r\n\r\n  /**\r\n   * 创建实体\r\n   */\r\n  public buildEntity(data: any): T {\r\n    const entity = createEntity<T>(this.entityType, data);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 批量创建实体\r\n   */\r\n  public buildEntities(listData: any[]): T[] {\r\n    const entities: T[] = createEntities<T>(this.entityType, listData);\r\n    return entities;\r\n  }\r\n\r\n  /**\r\n   * 初始化分页配置\r\n   * @param config 用户分页配置\r\n   */\r\n  setPaginationConfig(config: any) {\r\n    this.paginationManager = new PaginationManager(this.entityType, config);\r\n    const { pageSize = 0 } = this.paginationManager.getPaginationConfigByPath('/') || {};\r\n    // tslint:disable-next-line: max-line-length\r\n    this.entityCollection.paginationInfo = Object.assign({ pageSize }, this.entityCollection.paginationInfo, this.paginationManager.pagination);\r\n\r\n    // 无需再单独设置一次pageSize，减少一次变更\r\n    // this.entityCollection.pageSize = pageSize;\r\n  }\r\n\r\n  /**\r\n   * 设置分页\r\n   */\r\n  public setPaginationInfo(paginationInfo: any) {\r\n    this.paginationInfo = { ...this.paginationInfo, ...paginationInfo };\r\n  }\r\n  \r\n}\r\n","import { Entity } from '../entity/index';\r\nimport { Repository } from './repository';\r\nimport { EntityManager } from './entity_manager';\r\n\r\n/**\r\n * 空Repository实现\r\n */\r\nabstract class DefaultRepository<T extends Entity> extends Repository<T> {\r\n\r\n  /**\r\n   * 名称\r\n   */\r\n  abstract name: string;\r\n\r\n  /**\r\n   * 实体管理器\r\n   */\r\n  public entityManager: EntityManager<T>;\r\n\r\n  constructor() {\r\n    super();\r\n    this.entityManager = new EntityManager(this.entityCollection);\r\n  }\r\n}\r\n\r\nexport { DefaultRepository };\r\n","import { TypeDecorator, makeDecorator, makePropDecorator } from '../core/index';\r\n\r\n/**\r\n * ----------------------------------------\r\n * CommandHandlerMeta\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 命令处理描述\r\n */\r\nexport interface CommandHandlerMetadata {\r\n\r\n  /**\r\n   * 要处理的名称\r\n   */\r\n  commandName: string;\r\n}\r\n\r\n\r\n/**\r\n * 命令处理装饰器名称\r\n */\r\nexport const COMMAND_HANDLER_META = 'CommandHandlerMeta';\r\n\r\n\r\n/**\r\n * 命令处理装饰器接口\r\n */\r\nexport interface CommandHandlerMetaDecorator {\r\n  (handler?: CommandHandlerMetadata): TypeDecorator;\r\n  new(handler?: CommandHandlerMetadata): CommandHandlerMetadata;\r\n}\r\n\r\n\r\n/**\r\n * 命令处理装饰器工厂\r\n */\r\n\r\nexport function CommandHandlerMeta(options: CommandHandlerMetadata) {\r\n  const decoratorFactory = makeDecorator(COMMAND_HANDLER_META, (handler: CommandHandlerMetadata) => handler);\r\n  return decoratorFactory(options);\r\n}\r\n\r\n\r\n/**\r\n * ----------------------------------------\r\n * CommandExtenderMeta\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 命令处理扩展描述\r\n */\r\nexport interface CommandHandlerExtenderMetadata {\r\n  commandName: string;\r\n}\r\n\r\n\r\n/**\r\n * 命令处理扩展装饰器名称\r\n */\r\nexport const COMMAND_HANDLER_EXTENDER_META = 'CommandHandlerExtenderMeta';\r\n\r\n\r\n/**\r\n * 命令处理扩展装饰器接口\r\n */\r\nexport interface CommandHandlerExtenderMetaDecorator {\r\n  (extender?: CommandHandlerExtenderMetadata): TypeDecorator;\r\n  new(extender?: CommandHandlerExtenderMetadata): CommandHandlerExtenderMetadata;\r\n}\r\n\r\n/**\r\n * 命令处理扩展装饰器工厂\r\n */\r\nexport function CommandHandlerExtenderMeta(options: CommandHandlerExtenderMetadata) {\r\n  const decoratorFactory = makeDecorator(COMMAND_HANDLER_EXTENDER_META, (extender: CommandHandlerExtenderMetadata) => extender);\r\n  return decoratorFactory(options);\r\n}\r\n","import { Observable, of } from 'rxjs';\r\nimport { CommandContext } from '../command_context';\r\nimport { isObservable } from '../../utils/index';\r\n\r\n/**\r\n * 任务函数\r\n */\r\ntype TaskFunc = (context: CommandContext) => any;\r\n\r\n\r\n/**\r\n * 任务节点\r\n */\r\nclass TaskNode {\r\n\r\n  /**\r\n   * 任务名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 任务函数\r\n   */\r\n  func: TaskFunc;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(name: string, func: TaskFunc) {\r\n    this.name = name;\r\n    this.func = func;\r\n  }\r\n\r\n  /**\r\n   * 执行任务函数\r\n   */\r\n  execute(context: CommandContext): Observable<any> {\r\n    const result = this.func(context);\r\n    const result$ = isObservable(result) ? result : of(result);\r\n    return result$;\r\n  }\r\n}\r\n\r\nexport { TaskFunc, TaskNode };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\nimport { createInjectionToken } from '../core/index';\r\n\r\n/**\r\n * 变量解析接口\r\n */\r\ninterface VariableParser {\r\n  parse(expression: string, context: any): any;\r\n}\r\n\r\nconst VARIABLE_PARSERS = createInjectionToken('@farris/devkit VARIABLE_PARSERS');\r\n\r\nexport { VariableParser, VARIABLE_PARSERS };\r\n","import { StaticProvider } from '../core/index';\r\n\r\nclass AppOptions {\r\n\r\n  /**\r\n   * 应用id\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * 应用providers\r\n   */\r\n  providers: StaticProvider[];\r\n\r\n}\r\n\r\nexport { AppOptions };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-29 10:46:01\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-30 17:56:02\r\n */\r\n\r\nimport { BindingData } from '../binding-data';\r\n\r\n/**\r\n * BindingData管理类\r\n */\r\nclass BindingDataManager {\r\n\r\n  /**\r\n   * BindingDataMap\r\n   */\r\n  private bindingDataMap: Map<string, BindingData>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.bindingDataMap = new Map<string, BindingData>();\r\n  }\r\n\r\n  /**\r\n   * 获取BindingDataMap\r\n   */\r\n  public getBindingDataMap(): Map<string, BindingData> {\r\n    return this.bindingDataMap;\r\n  }\r\n\r\n  /**\r\n   * 根据name获取BindingData\r\n   * @return 找不到时返回undefined\r\n   */\r\n  public getBindingDataByName(name: string): BindingData {\r\n    return this.bindingDataMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 初始化全局的BindingData\r\n   */\r\n  public regBindingData(name: string, bindingData: BindingData): void {\r\n    this.bindingDataMap.set(name, bindingData);\r\n  }\r\n\r\n  /**\r\n   * 是否Repository已经存在\r\n   */\r\n  public ifBindingDataExits(name: string) {\r\n    const bindingData = this.getBindingDataByName(name);\r\n    return bindingData ? true : false;\r\n  }\r\n\r\n}\r\n\r\nexport { BindingDataManager };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-29 10:46:01\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-30 18:06:11\r\n */\r\n\r\nimport { Repository } from '../repository/index';\r\nimport { Entity } from '../entity/index';\r\n\r\n/**\r\n * Repository管理类\r\n */\r\nclass RepositoryManager {\r\n\r\n  /**\r\n   * repositoryMap\r\n   */\r\n  private repositoryMap: Map<string, Repository<Entity>>;\r\n\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.repositoryMap = new Map<string, Repository<Entity>>();\r\n  }\r\n\r\n  /**\r\n   * 注册Repository\r\n   */\r\n  public regRepository(name: string, repository: Repository<Entity>): void {\r\n    this.repositoryMap.set(name, repository);\r\n  }\r\n\r\n  /**\r\n   * 获取RepositoryMap\r\n   * @internal\r\n   */\r\n  public getRepositoryMap(): Map<string, Repository<Entity>> {\r\n    return this.repositoryMap;\r\n  }\r\n\r\n  /**\r\n   * 获取Repository数组\r\n   */\r\n  public getRepositories(): Repository<Entity>[] {\r\n    return Array.from(this.repositoryMap.values());\r\n  }\r\n\r\n  /**\r\n   * 根据name获取Repository\r\n   */\r\n  public getRepositoryByName(name: string): Repository<Entity> {\r\n    return this.repositoryMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 是否Repository已经存在\r\n   */\r\n  public ifRepositoryExits(name: string) {\r\n    const repository = this.getRepositoryByName(name);\r\n    return repository ? true : false;\r\n  }\r\n\r\n}\r\n\r\nexport { RepositoryManager };\r\n","import { ViewModelContext } from '../view-model/index';\r\n\r\n/**\r\n * ViewModelContext管理类\r\n */\r\nclass ViewModelContextManager {\r\n\r\n  /**\r\n   * Context字典\r\n   */\r\n  private contextMap: Map<string, ViewModelContext>;\r\n\r\n  /**\r\n   * Context集合\r\n   */\r\n  private contextSet: Set<ViewModelContext>;\r\n\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.contextMap = new Map<string, ViewModelContext>();\r\n    this.contextSet = new Set<ViewModelContext>();\r\n  }\r\n\r\n  /**\r\n   * 注册Context\r\n   */\r\n  public regContext(viewModelContext: ViewModelContext): void {\r\n    const id = viewModelContext.id;\r\n    if (this.contextMap.has(id) === true) {\r\n      // throw Error(`id为${id}的ViewModelContext已经存在`);\r\n      // 临时处理，方式报错。\r\n      this.unregContext(viewModelContext);\r\n    }\r\n\r\n    this.contextMap.set(id, viewModelContext);\r\n    this.contextSet.add(viewModelContext);\r\n  }\r\n\r\n  /**\r\n   * 取消注册\r\n   */\r\n  public unregContext(context: ViewModelContext): void {\r\n    const id = context.id;\r\n    this.contextMap.delete(id);\r\n    this.contextSet.delete(context);\r\n  }\r\n\r\n  /**\r\n   * 获取ContextMap\r\n   */\r\n  public getContextMap() {\r\n    return this.contextMap;\r\n  }\r\n\r\n  /**\r\n   * 获取全部Context\r\n   */\r\n  public getContexts(): ViewModelContext[] {\r\n    return Array.from(this.contextSet);\r\n  }\r\n\r\n  /**\r\n   * 根据id获取Context\r\n   */\r\n  public getContextById(id: string): ViewModelContext {\r\n    const targetContext = this.contextMap.get(id);\r\n    return targetContext;\r\n  }\r\n\r\n  /**\r\n   * 获取根Context\r\n   */\r\n  public getRootContext(): ViewModelContext {\r\n    const contexts = this.getContexts();\r\n    const rootContext = contexts.find((context: ViewModelContext) => {\r\n      return context.parent === null;\r\n    });\r\n    return rootContext;\r\n  }\r\n\r\n  /**\r\n   * 获取传入视图模型id的root及root的下一代集合数组\r\n   */\r\n  public getRootContextAndPosterityById(viewModelId): ViewModelContext[] {\r\n    const targetContext = this.getContextById(viewModelId);\r\n    const contexts = this.getContexts();\r\n    let contextsGroup = [];\r\n    // 1.找到ROOT\r\n    const RootId = this.getContextsGroupRoot(targetContext);\r\n    // 2.可直接遍历拿到所有直系后代 (目前只有两层结构直接获取下一代)\r\n    contexts.map((context: ViewModelContext) => {\r\n      if (context.parent && context.parent.id === RootId) {\r\n        contextsGroup.push(context);\r\n      }\r\n    });\r\n    contextsGroup.push(this.getContextById(RootId));\r\n    return contextsGroup;\r\n  }\r\n\r\n  private getContextsGroupRoot(context: ViewModelContext) {\r\n    if (context.parent) {\r\n      return this.getContextsGroupRoot(context.parent);\r\n    } else {\r\n      return context.id\r\n    }\r\n  }\r\n}\r\n\r\nexport { ViewModelContextManager };\r\n","class Context {\r\n\r\n  /**\r\n   * 上下文变量\r\n   */\r\n  params: Map<string, any> = new Map<string, any>();\r\n\r\n  /**\r\n   * 获取变量\r\n   */\r\n  getParam(key: string): any {\r\n    return this.params.get(key);\r\n  }\r\n\r\n  /**\r\n   * 设置变量\r\n   */\r\n  setParam(key: string, value: any) {\r\n    this.params.set(key, value);\r\n  }\r\n}\r\n\r\nexport { Context };\r\n","/**\r\n * 应用上下文\r\n * @author Witt<jiwt@inspur.com>\r\n * @todo\r\n * 1、parnet和AppContextManager是否必要？按理说就是应该隔离上下文，表单之间通过事件通讯进行交互；\r\n */\r\nimport { Injector } from '../core/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { Context } from '../context/index';\r\nimport { BindingDataFactory } from '../binding-data';\r\nimport { ViewModelContextManager } from './view_model_contex_manager';\r\nimport { RepositoryManager } from './repository_mananger';\r\nimport { BindingDataManager } from './binding_data_manager';\r\nimport { AppEventBus } from './app_eventBus';\r\n\r\n\r\nclass AppContext extends Context {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    public injector: Injector,\r\n    public eventBus: AppEventBus,\r\n    public repositoryManager: RepositoryManager,\r\n    public bindingDataManager: BindingDataManager,\r\n    public viewModelContextManager: ViewModelContextManager,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * 注册FrameContext\r\n   */\r\n  public regViewModelContext(viewModelContext: ViewModelContext): void {\r\n\r\n    const repository = viewModelContext.repository;\r\n    const repositoryName = repository.name;\r\n\r\n    // Repository\r\n    if (this.repositoryManager.ifRepositoryExits(repositoryName) === false) {\r\n      this.repositoryManager.regRepository(repositoryName, repository);\r\n    }\r\n\r\n    // BindingData\r\n    if (this.bindingDataManager.ifBindingDataExits(repositoryName) === false) {\r\n      const bindingData = BindingDataFactory.createFromRepository(repository, '/');\r\n      this.bindingDataManager.regBindingData(repositoryName, bindingData);\r\n    }\r\n\r\n    // 考虑路由再次进入的时候，AppContext没有被注销，但Component被再次构造的场景\r\n    this.viewModelContextManager.regContext(viewModelContext);\r\n  }\r\n\r\n}\r\n\r\nexport { AppContext };\r\n","import { Injector, InjectFlags } from '../core/index';\r\nimport { Context } from '../context/index';\r\nimport { AppContext } from '../app/index';\r\nimport { Entity } from '../entity/index';\r\nimport { Repository } from '../repository/index';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { UIState } from '../ui-state/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { Form } from '../form/index';\r\nimport { ViewModel } from '../view-model/index';\r\nimport { CommandBus } from '../command/index';\r\n\r\n/**\r\n * 视图模型上下文\r\n */\r\nclass ViewModelContext {\r\n\r\n  private innerViewModel: ViewModel;\r\n\r\n  public appContext: AppContext;\r\n\r\n  public root: ViewModelContext;\r\n\r\n  public parent: ViewModelContext;\r\n\r\n  public id: string;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  public init(viewModel): void {\r\n    this.innerViewModel = viewModel;\r\n    this.id = this.innerViewModel.id;\r\n    this.appContext = viewModel.injector.get(AppContext);\r\n    this.regToTree();\r\n    this.regToAppContext();\r\n  }\r\n\r\n  public regToTree() {\r\n    const parentInjector = this.innerViewModel.injector.get<Injector>(Injector, null, InjectFlags.SkipSelf);\r\n    if (parentInjector)  {\r\n      this.parent = parentInjector.get(ViewModelContext, null);\r\n      this.root = this.parent ? this.parent.root : this;\r\n    } else {\r\n      this.parent = null;\r\n      this.root = this;\r\n    }\r\n  }\r\n\r\n  public regToAppContext() {\r\n    this.appContext.regViewModelContext(this);\r\n  }\r\n\r\n  public get viewModel(): ViewModel {\r\n    return this.innerViewModel;\r\n  }\r\n\r\n  public get injector(): Injector {\r\n    return this.innerViewModel.injector;\r\n  }\r\n\r\n  public get repository(): Repository<Entity> {\r\n    return this.innerViewModel.repository;\r\n  }\r\n\r\n  public get bindingData(): BindingData {\r\n    return this.innerViewModel.bindingData;\r\n  }\r\n\r\n  public get uiState(): UIState {\r\n    return this.innerViewModel.uiState;\r\n  }\r\n\r\n  public get stateMachine(): StateMachine {\r\n    return this.innerViewModel.stateMachine;\r\n  }\r\n\r\n  public get form(): Form {\r\n    return this.innerViewModel.form;\r\n  }\r\n\r\n  public get commandBus(): CommandBus {\r\n    return this.innerViewModel.commandBus;\r\n  }\r\n\r\n}\r\n\r\nexport { ViewModelContext };\r\n","import { makePropDecorator } from '../core/index';\r\n\r\n/**\r\n * UIState属性元数据接口\r\n */\r\nexport interface UIStatePropMetadata {\r\n\r\n  /**\r\n   * 组件的ID\r\n   */\r\n  componentId?: string;\r\n\r\n  /**\r\n   * 状态名称\r\n   */\r\n  stateName?: string;\r\n  \r\n}\r\n\r\n/**\r\n * UIState属性元数据名称\r\n */\r\nexport const UISTATE_PROP_META = 'UIStatePropMeta';\r\n\r\n/**\r\n * UIState属性元数据装饰器工厂接口\r\n */\r\nexport interface UIStatePropMetaDecorator {\r\n  (obj?: UIStatePropMetadata): any;\r\n  new(obj?: UIStatePropMetadata): any;\r\n}\r\n\r\n/**\r\n * UIState属性元数据装饰器工厂\r\n */\r\nexport const UIStatePropMeta: UIStatePropMetaDecorator =\r\n  makePropDecorator(UISTATE_PROP_META, (obj?: UIStatePropMetadata) => obj);\r\n\r\n\r\n","import { MetadataUtil } from '../core/index';\r\nimport { UISTATE_PROP_META, UIStatePropMetadata } from './decorators';\r\n\r\nexport class UIStateMetadataUtil {\r\n\r\n  /**\r\n   * 获取NgUIState的属性元数据\r\n   * @param \r\n   * @returns 属性元数据对象\r\n   * @example\r\n   * 返回格式：\r\n   * {\r\n   *    '属性名称': <NgUIStateProperty>{ ...}\r\n   * }\r\n   */\r\n  static getUIFields(target: Function): {[propName: string]: UIStatePropMetadata} {\r\n      return MetadataUtil.getPropsMetadatasByName(target, UISTATE_PROP_META);\r\n  }\r\n}","/*\r\n * @Author: Witt\r\n * @Date: 2018-11-17 13:38:23\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-11-17 13:38:50\r\n * @todo：临时删除原有功能，待重构\r\n */\r\n\r\nimport { Subject } from 'rxjs';\r\nimport { UIStateMetadataUtil } from './uistate_metadata_util';\r\nimport { UIStatePropMetadata } from './decorators';\r\n\r\nexport interface UIStateObservableParam {\r\n  field: string;\r\n  value: any;\r\n}\r\n\r\n\r\n/**\r\n * UI状态\r\n */\r\nexport class UIState {\r\n\r\n  innerData: {};\r\n\r\n  // 监听变化\r\n  changes: Subject<UIStateObservableParam>;\r\n\r\n  constructor() {\r\n    this.changes = new Subject<UIStateObservableParam>();\r\n    this.innerData = Object.assign({});\r\n    this._init();\r\n  }\r\n\r\n  _init() {\r\n    const construct = this.constructor;\r\n    const uiFields = UIStateMetadataUtil.getUIFields(construct);\r\n    this.initializeUIField(uiFields);\r\n  }\r\n\r\n  private initializeUIField(uiFieldMetadata: { [key: string]: UIStatePropMetadata }): void {\r\n    Object.keys(uiFieldMetadata).forEach(propertyName => {\r\n      const fieldMetadata = uiFieldMetadata[propertyName] as UIStatePropMetadata;\r\n      const uiField = fieldMetadata.stateName || propertyName;\r\n\r\n      if (delete this[propertyName]) {\r\n        this.defineProperty(propertyName, uiField);\r\n      }\r\n    });\r\n  }\r\n\r\n  public isExistProperty(propertyName: any) {\r\n    if (this.innerData.hasOwnProperty(propertyName) || this.hasOwnProperty(propertyName)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private defineProperty(propertyName: any, field: any = null) {\r\n    Object.defineProperty(this, propertyName, {\r\n      get: function () {\r\n        return field !== null ? this.innerData[field] : this.innerData[propertyName];\r\n      },\r\n      set: function (value) {\r\n        // 值相同时不触发变更\r\n        const oldValue = field !== null ? this.innerData[field] : this.innerData[propertyName];\r\n        if (oldValue === value) {\r\n          return;\r\n        }\r\n        if (field !== null) {\r\n          this.innerData[field] = value;\r\n        } else {\r\n          this.innerData[propertyName] = value;\r\n        }\r\n        this.changes.next({\r\n          field: propertyName,\r\n          value: value\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public setPropertyValue(propertyName: any, value: any) {\r\n    if (propertyName === '' || propertyName === undefined) {\r\n      return;\r\n    }\r\n    if (!this.isExistProperty(propertyName)) {\r\n      this.defineProperty(propertyName);\r\n    }\r\n    this[propertyName] = value;\r\n  }\r\n}\r\n","import { StateMachineContext } from './state_machine_context';\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * State相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 基本状态：表单的基本状态，通过State的运算确定RenderState的值，进而控制页面控件的状态。\r\n */\r\nexport class State {\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param name 状态名称\r\n   */\r\n  constructor(public name: string) {\r\n  }\r\n}\r\n\r\n/**\r\n * 基本状态字典, 形如\r\n * {\r\n *  stateName1: stateInstance1,\r\n *  stateName2: stateInstance2,\r\n *  ...\r\n * }\r\n */\r\nexport interface StateDictionary {\r\n    [index: string]: State;\r\n}\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * RenderState相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 渲染状态，该状态用于和界面UI绑定\r\n */\r\nexport type RenderState = boolean;\r\n\r\n/**\r\n * 初始渲染状态\r\n */\r\nexport const initialUIState: RenderState = false;\r\n\r\n/**\r\n * 渲染状态字典，形如：\r\n * {\r\n *  renderStateName1: true,\r\n *  renderStateName1: false,\r\n *  ...\r\n * }\r\n */\r\nexport interface RenderStateDictionary {\r\n  [index: string]: RenderState;\r\n}\r\n\r\n\r\n/**\r\n * 渲染方法\r\n * 该方法接收一个StateMachineContext类型的上下文，\r\n * 通过对上下文中指定的当前状态的计算，确定对应渲染状态的值，该方法返回一个RenderState类型的值（即布尔类型）\r\n */\r\nexport type Render = (context: StateMachineContext) => RenderState;\r\n\r\n/**\r\n * 渲染方法字典\r\n * {\r\n *  renderStateName1: render1,\r\n *  renderStateName1: render2,\r\n *  ...\r\n * }\r\n */\r\nexport interface RenderDictionary {\r\n  [index: string]: Render;\r\n}\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * Action相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 状态机动作\r\n */\r\nexport type Action = () => any;\r\n\r\n/**\r\n * 状态机行为约束条件\r\n */\r\n// export interface Precondition {\r\n// }\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * Effect相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 行为效果，表示状态机发起某行为后引起的界面变化效果\r\n */\r\nexport interface EffectHandlerOption {\r\n\r\n  /**\r\n   * 效果类型\r\n   */\r\n  type: string;\r\n\r\n  /**\r\n   * 效果实现\r\n   */\r\n  effect: any;\r\n}\r\n\r\n/**\r\n * 状态机界面效果\r\n */\r\nexport interface Effect {\r\n\r\n  /**\r\n   * 行为约束条件集合\r\n   */\r\n  preconditions?: any[];\r\n\r\n  /**\r\n   * 发生某行为后引起的界面变化效果\r\n   */\r\n  handlers?: EffectHandlerOption[];\r\n}\r\n\r\n/**\r\n * 状态机效果字典\r\n */\r\nexport interface EffectDictianry {\r\n    [index: string]: Effect;\r\n}\r\n\r\n\r\n","import { makePropDecorator } from '../../core/index';\r\n\r\n/**\r\n * 页面状态元数据\r\n */\r\nexport interface StatePropMetadata {\r\n\r\n  /**\r\n   * 初始状态\r\n   */\r\n  initialState?: boolean;\r\n}\r\n\r\n\r\n/**\r\n * 状态元数据名称\r\n */\r\nexport const STATE_PROP_META = 'StatePropMeta';\r\n\r\n\r\n/**\r\n * 页面状态元数据装饰器工厂接口\r\n */\r\nexport interface StatePropMetaDecorator {\r\n  (obj?: StatePropMetadata): any;\r\n  new(obj?: StatePropMetadata): any;\r\n}\r\n\r\n/**\r\n * 页面状态元数据装饰器工厂\r\n */\r\nexport const StatePropMeta: StatePropMetaDecorator =\r\n  makePropDecorator(STATE_PROP_META, (obj?: StatePropMetadata) => obj);\r\n","import { makePropDecorator } from '../../core/index';\r\nimport { Render } from '../types';\r\n\r\n/**\r\n * 组件状态元数据\r\n */\r\nexport interface RenderStatePropMetadata {\r\n  render: Render;\r\n}\r\n\r\n\r\n/**\r\n * 组件状态元数据名称\r\n */\r\nexport const RENDER_STATE_PROP_META = 'RenderStatePropMeta';\r\n\r\n\r\n/**\r\n * 组件状态元数据工厂接口\r\n */\r\nexport interface RenderStatePropMetaDecorator {\r\n  (obj?: RenderStatePropMetadata): any;\r\n  new(obj?: RenderStatePropMetadata): any;\r\n}\r\n\r\n/**\r\n * 组件状态元数据工厂\r\n */\r\nexport const RenderStatePropMeta: RenderStatePropMetaDecorator =\r\n  makePropDecorator(RENDER_STATE_PROP_META, (obj: RenderStatePropMetadata) => obj);","import { makePropDecorator } from '../../core/index';\r\n\r\n/**\r\n * 迁移动作\r\n */\r\nexport interface ActionMethodMetadata {\r\n  precondition?: any[];\r\n  transitTo: string;\r\n}\r\n\r\n\r\n/**\r\n * 动作方法元数据名称\r\n */\r\nexport const ACTION_METHOD_META = 'ActionMethodMeta';\r\n\r\n\r\n/**\r\n * 迁移动作元数据装饰工厂接口\r\n */\r\nexport interface ActionMethodMetaDecorator {\r\n  (obj?: ActionMethodMetadata): any;\r\n  new(obj?: ActionMethodMetadata): any;\r\n}\r\n\r\n/**\r\n * 迁移动作元数据装饰工厂\r\n */\r\nexport const ActionMethodMeta: ActionMethodMetaDecorator =\r\n  makePropDecorator(ACTION_METHOD_META, (action: ActionMethodMetadata) => action);","import { StateMachine } from './state_machine';\r\nimport { State } from './types';\r\nimport { Context } from '../context/context';\r\nimport { VariableParseService } from '../variable/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { StateMachineWatcher } from './state_machine_watcher';\r\n\r\n/**\r\n * 状态机上下文\r\n */\r\nexport class StateMachineContext {\r\n\r\n  /**\r\n   * 当前状态名称\r\n   */\r\n  public state: string;\r\n\r\n  /**\r\n   * 父Context\r\n   */\r\n  public parent: Context;\r\n\r\n  /**\r\n   * 变量解析器\r\n   */\r\n  public parser: any;\r\n\r\n  /**\r\n   * ViewModel上下文\r\n   */\r\n  public viewModelContext: ViewModelContext;\r\n\r\n  /**\r\n   * 状态机事件监听\r\n   */\r\n  public stateMachineWatcher: StateMachineWatcher;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param stateMachine 状态机实例\r\n   * @param initialState 初始状态\r\n   */\r\n  constructor(public stateMachine: StateMachine, initialState: State) {\r\n    this.state = initialState.name;\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(frameContext: ViewModelContext) {\r\n    this.viewModelContext = frameContext;\r\n    this.parser = this.viewModelContext.injector.get(VariableParseService);\r\n    this.stateMachineWatcher = this.stateMachine.stateMachineWatcher;\r\n  }\r\n\r\n  /**\r\n   * 状态迁移\r\n   * @param stateName 下一状态的名称\r\n   */\r\n  public transitTo(stateName: string) {\r\n    const nextState = this.stateMachine.states[stateName];\r\n    if (nextState) {\r\n      this.state = nextState.name;\r\n      this.stateMachine.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取expression对应的UIState值\r\n   * @param expression UIState表达式\r\n   */\r\n  public getUIState(expression: string): any {\r\n    if (!expression) {\r\n      return;\r\n    }\r\n    const viewModelContext = this.stateMachineWatcher.getViewModelContext(expression);\r\n    if (!viewModelContext) {\r\n      return;\r\n    }\r\n\r\n    this.stateMachineWatcher.subscribeUIStateChange(viewModelContext, expression);\r\n\r\n    if (this.parser) {\r\n      const value = this.parser.parse(expression, viewModelContext);\r\n      if (value === null) {\r\n        return null;\r\n      }\r\n      if (typeof value === 'object' && Object.keys(value).length === 0) {\r\n        return null;\r\n      }\r\n      return value;\r\n    } else {\r\n      throw new Error('未初始化变量解析器。');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取数据的值\r\n   */\r\n  public getData(expression: string): any {\r\n    if (!expression) {\r\n      return;\r\n    }\r\n    const viewModelContext = this.stateMachineWatcher.getViewModelContext(expression);\r\n    if (!viewModelContext) {\r\n      return;\r\n    }\r\n\r\n    this.stateMachineWatcher.subscribeEntityChange(viewModelContext, expression);\r\n\r\n    if (this.parser) {\r\n      const value = this.parser.parse(expression, viewModelContext);\r\n      if (value === null) {\r\n        return null;\r\n      }\r\n      if (typeof value === 'object' && Object.keys(value).length === 0) {\r\n        return null;\r\n      }\r\n      return value;\r\n    } else {\r\n      throw new Error('未初始化变量解析器。');\r\n    }\r\n  }\r\n}\r\n","import { StateMachine } from './state_machine';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { Change } from '../binding-data/changes';\r\n\r\n\r\n/**\r\n * 状态机事件，监听uistate的变化和entity的变化\r\n */\r\nexport class StateMachineWatcher {\r\n\r\n  /**\r\n   * 当前ViewModel上下文\r\n   */\r\n  private viewModelContext: ViewModelContext;\r\n\r\n  /**\r\n   * viewModel=>UIStatePahts字典\r\n   */\r\n  private viewModelContextAndUIStatePathsMap: Map<ViewModelContext, Array<string>>;\r\n\r\n  /**\r\n   * viewModel=>DataStatePahts字典\r\n   */\r\n  private viewModelContextAndDataStatePathsMap: Map<ViewModelContext, Array<string>>;\r\n\r\n  /**\r\n   * 所有UIStatePath数组\r\n   */\r\n  private uiStatePathList: Array<string> = [];\r\n\r\n  /**\r\n   * 所有DataStatePath数组\r\n   */\r\n  private dataStatePathList: Array<string> = [];\r\n\r\n  constructor(public stateMachine: StateMachine) {\r\n    this.viewModelContextAndUIStatePathsMap = new Map<ViewModelContext, any>();\r\n    this.viewModelContextAndDataStatePathsMap = new Map<ViewModelContext, any>();\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   * @param viewModelContext 当前视图上下文\r\n   */\r\n  public init(viewModelContext: ViewModelContext) {\r\n    this.viewModelContext = viewModelContext;\r\n  }\r\n\r\n  /**\r\n   * 返回表达式中ViewModelId对应的ViewModelContext\r\n   */\r\n  public getViewModelContext(expression: any): ViewModelContext {\r\n    const viewModelId = this.extractPaths(expression).split('/')[1];\r\n    return this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId);\r\n  }\r\n\r\n  /**\r\n   * 监听UIState变更\r\n   * @param viewModelContext ViewModel上下文\r\n   * @param expression UIState表达式\r\n   */\r\n  public subscribeUIStateChange(viewModelContext: ViewModelContext, expression: any) {\r\n    const uiStatePath = this.getStatePath(expression);\r\n\r\n    if (this.viewModelContextAndUIStatePathsMap.has(viewModelContext) === false) {\r\n      this.viewModelContextAndUIStatePathsMap.set(viewModelContext, this.uiStatePathList);\r\n      viewModelContext.uiState.changes.subscribe((uiStateChange) => {\r\n        const uiStatePathList = this.viewModelContextAndUIStatePathsMap.get(viewModelContext);\r\n        if (uiStateChange.field && uiStatePathList.indexOf(uiStateChange.field) > -1) {\r\n          this.stateMachine.render();\r\n        }\r\n      });\r\n    }\r\n\r\n    if (this.viewModelContextAndUIStatePathsMap.get(viewModelContext).indexOf(uiStatePath) === -1) {\r\n      this.uiStatePathList.push(uiStatePath);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 监听实体变更\r\n   */\r\n  public subscribeEntityChange(viewModelContext: ViewModelContext, expression: any) {\r\n\r\n    if (this.viewModelContextAndDataStatePathsMap.has(viewModelContext) === false) {\r\n      this.viewModelContextAndDataStatePathsMap.set(viewModelContext, this.dataStatePathList);\r\n      viewModelContext.bindingData.changes.subscribe((change: Change) => {\r\n\r\n        if (change.type === 'Load' || change.type === 'SelectionChanged') {\r\n          this.stateMachine.render();\r\n        }\r\n\r\n        const dataPathList = this.viewModelContextAndDataStatePathsMap.get(viewModelContext);\r\n        if (change.path.join() && this.isAccordingPath(dataPathList, change.path.join('/'))) {\r\n          this.stateMachine.render();\r\n        }\r\n      });\r\n    }\r\n\r\n    if (this.viewModelContextAndDataStatePathsMap.get(viewModelContext).indexOf(expression) === -1) {\r\n      this.dataStatePathList.push(expression);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据表达式获取对应的StatePath（移除了ViewModelId之外的部分）\r\n   * @param expression 变量表达式\r\n   */\r\n  private getStatePath(expression: any) {\r\n    return this.extractPaths(expression).split('/')[2];\r\n  }\r\n\r\n  /**\r\n   * 判断是否监听范围内的变更路径\r\n   */\r\n  public isAccordingPath(dataStatePaths: any, dataStatePath: string) {\r\n    const targetPath = dataStatePaths.find((item) => {\r\n      return item.indexOf(dataStatePath) > -1;\r\n    });\r\n\r\n    return targetPath === undefined ? false : true;\r\n  }\r\n\r\n  /**\r\n   * 暂时把这个方法放了这个地方，等季老师共用方法调整后，直接引用他的方法，该方法可删除\r\n   * @param expression 变量表达式\r\n   */\r\n  private extractPaths(expression: string): string {\r\n    let path: string;\r\n    const UI_STATE_PATTERN_G = /\\{UISTATE~(\\S+?)\\}/g;\r\n    const DATA_PATTERN_G = /\\{DATA~(\\S+?)\\}/g;\r\n    const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n    const dataVariables = expression.match(DATA_PATTERN_G);\r\n    if (uiStateVariables !== null) {\r\n      const UI_STATE_PATTERN = /\\{UISTATE~(\\S+?)\\}/;\r\n      uiStateVariables.forEach((uiStateVariable: string) => {\r\n        const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);\r\n        if (pathMatches != null && pathMatches.length === 2) {\r\n          path = pathMatches[1];\r\n        }\r\n      });\r\n    }\r\n    if (dataVariables !== null) {\r\n      const DATA_PATTERN = /\\{DATA~(\\S+?)\\}/;\r\n      dataVariables.forEach((dataVariable: string) => {\r\n        const pathMatches = dataVariable.match(DATA_PATTERN);\r\n        if (pathMatches != null && pathMatches.length === 2) {\r\n          path = pathMatches[1];\r\n        }\r\n      });\r\n    }\r\n    return path;\r\n  }\r\n}","import { BehaviorSubject } from 'rxjs';\r\nimport { MetadataUtil } from '../core/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\n\r\nimport { State, initialUIState, StateDictionary, RenderStateDictionary, RenderDictionary } from './types';\r\nimport {\r\n  StatePropMetadata, ActionMethodMetadata, RenderStatePropMetadata,\r\n  STATE_PROP_META, RENDER_STATE_PROP_META, ACTION_METHOD_META\r\n} from './decorators';\r\nimport { StateMachineContext } from './state_machine_context';\r\nimport { StateMachineWatcher } from './state_machine_watcher';\r\n\r\n/**\r\n * 状态机\r\n */\r\nexport class StateMachine {\r\n\r\n  /**\r\n   * 初始状态\r\n   */\r\n  private initialState: State;\r\n\r\n  /**\r\n   * 状态字典\r\n   */\r\n  public states: StateDictionary;\r\n\r\n  /**\r\n   * 渲染状态字典\r\n   */\r\n  public renderStates: RenderStateDictionary;\r\n\r\n  /**\r\n   * 渲染器字典\r\n   */\r\n  public renders: RenderDictionary;\r\n\r\n  /**\r\n   * 状态机上下文\r\n   */\r\n  public context: StateMachineContext;\r\n\r\n  /**\r\n   * 状态变更\r\n   */\r\n  public stateChange: BehaviorSubject<string>;\r\n\r\n  /**\r\n   * ViewModel上下文\r\n   */\r\n  public viewModelContext: ViewModelContext;\r\n\r\n  /**\r\n   * 状态机事件监听\r\n   */\r\n  public stateMachineWatcher: StateMachineWatcher;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.renderStates = {};\r\n    this.handlePropMetadatas();\r\n    this.stateChange = new BehaviorSubject<any>(false);\r\n    this.context = new StateMachineContext(this, this.initialState);\r\n    this.stateMachineWatcher = new StateMachineWatcher(this);\r\n  }\r\n\r\n  /**\r\n   * 初始化状态机\r\n   * @param viewModelContext ViewModel上下文\r\n   * @summary\r\n   * 状态机变更，为了在绑定数据之后执行状态机的操作，把render方法延后执行。\r\n   */\r\n  public init(viewModelContext: ViewModelContext) {\r\n    this.viewModelContext = viewModelContext;\r\n    this.context.init(this.viewModelContext);\r\n    this.stateMachineWatcher.init(this.viewModelContext);\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * 批量处理属性元数据\r\n   */\r\n  private handlePropMetadatas() {\r\n    const propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);\r\n\r\n    // 遍历所有属性装饰器，并调用相应的build方法\r\n    if (propsMetadatas) {\r\n      Object.keys(propsMetadatas).forEach((propName: string) => {\r\n        const propMetadatas = propsMetadatas[propName];\r\n        propMetadatas.forEach(propMetadata => {\r\n          this.handlePropMetadata(propName, propMetadata);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (!this.initialState) {\r\n      throw new Error('请在StatePropMeta注解中指定状态机的初始状态。');\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 处理属性元数据\r\n   */\r\n  private handlePropMetadata(propName: string, propMetadata: any) {\r\n    const ngMetadataName =  propMetadata.ngMetadataName;\r\n    switch(ngMetadataName) {\r\n      case STATE_PROP_META:\r\n        this.buildState(propName, propMetadata);\r\n        break;\r\n      case RENDER_STATE_PROP_META:\r\n        this.buildRenderState(propName, propMetadata);\r\n        break;\r\n      case ACTION_METHOD_META:\r\n        this.buildAction(propName, propMetadata);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 包装State\r\n   * @param stateName 状态名称\r\n   * @param ngState   状态对象\r\n   */\r\n  private buildState(stateName: string, ngState: StatePropMetadata) {\r\n    this.states = this.states || {};\r\n    this[stateName] = new State(stateName);\r\n    this.states[stateName] = this[stateName];\r\n    if (ngState.initialState) {\r\n      this.initialState = this[stateName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 包装RenderState\r\n   * @param renderStateName 渲染状态名称\r\n   * @param ngRenderState   渲染状态元数据\r\n   */\r\n  private buildRenderState(renderStateName: string, ngRenderState: RenderStatePropMetadata) {\r\n    this.renderStates = this.renderStates || {};\r\n    this[renderStateName] = initialUIState;\r\n    this.renderStates[renderStateName] = this[renderStateName];\r\n\r\n    // 将renderState上指定的render加入到renders中\r\n    this.renders = this.renders || {};\r\n    this.renders[renderStateName] = ngRenderState.render;\r\n  }\r\n\r\n  /**\r\n   * 包装Action\r\n   * @param actionName 动作名称\r\n   * @param ngAction 动作元数据\r\n   */\r\n  private buildAction(actionName: string, ngAction: ActionMethodMetadata) {\r\n    this[actionName] = () => {\r\n      const nextStateName = ngAction.transitTo;\r\n      const nextState: State = this.states[nextStateName];\r\n      this.context.transitTo(nextState.name);\r\n      this.render();\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 重新计算所有渲染状态的值\r\n   * @sumamry\r\n   * 当 state切换的时候，调用遍历所有的render方法，更改renderState\r\n   */\r\n  render() {\r\n    for (const renderStateName in this.renderStates) {\r\n\r\n      if (this.renderStates.hasOwnProperty(renderStateName) === false) {\r\n        continue;\r\n      }\r\n\r\n      // 执行RenderState的render方法，更新renderState\r\n      const stateRender = this.renders[renderStateName];\r\n      if (!stateRender) {\r\n        continue;\r\n      }\r\n\r\n      this.renderStates[renderStateName] = stateRender(this.context);\r\n      this[renderStateName] = this.renderStates[renderStateName];\r\n    }\r\n    this.stateChange.next(this.context.state);\r\n  }\r\n}\r\n","enum BindingType {\r\n\r\n  /**\r\n   * 实体状态\r\n   */\r\n  EntityState = 'EntityState',\r\n\r\n  /**\r\n   * UI状态\r\n   */\r\n  UIState     = 'UIState'\r\n}\r\n\r\nexport { BindingType };\r\n","import { DateUtil } from '../utils/index';\r\n\r\n/**\r\n * 绑定值转换器\r\n */\r\ninterface BindingValueConverter {\r\n\r\n  /**\r\n   * 将ControlValue转换为StateValue值\r\n   */\r\n  convertFrom(controlValue: any): any;\r\n\r\n  /**\r\n   * 将StateValue转换为ControlValue\r\n   */\r\n  convertTo(stateValue: any): any;\r\n}\r\n\r\n\r\n/**\r\n * 日期字符串转换器\r\n */\r\nclass DateStringValueConverter implements BindingValueConverter {\r\n\r\n  public convertFrom(dateObj: Date): string {\r\n    return  DateUtil.formatISO(dateObj);\r\n  }\r\n\r\n  public convertTo(dateString): Date {\r\n    return DateUtil.parse(dateString);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * 数组字符串转换器\r\n */\r\nclass ArrayStringValueConverter implements BindingValueConverter  {\r\n\r\n  public convertFrom(arr: any[]): string {\r\n    return  arr.join(',');\r\n  }\r\n\r\n  public convertTo(arrString): any[] {\r\n    return arrString.split(',');\r\n  }\r\n\r\n}\r\n\r\nexport { BindingValueConverter, DateStringValueConverter, ArrayStringValueConverter };\r\n\r\n\r\n\r\n","import { BindingData } from '../binding-data/index';\r\nimport { UIState } from '../ui-state/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { BindingPathConverter, DateUtil } from '../utils/index';\r\n\r\nimport { BindingType } from './types';\r\nimport { BindingValueConverter } from './binding_value_converter';\r\n\r\n/**\r\n * 绑定值访问器接口\r\n */\r\ninterface BindingValueAccessor {\r\n\r\n  getValue(): any;\r\n\r\n  setValue(controlValue: any): void;\r\n}\r\n\r\n/**\r\n * Entity值访问器\r\n */\r\nclass EntityBindingValueAccessor implements BindingValueAccessor {\r\n\r\n  private bindingData: BindingData;\r\n\r\n  private bindingPathSegments: string[];\r\n\r\n  private valueConverter: BindingValueConverter;\r\n\r\n  constructor(bindingData: BindingData, bindingPath: string, valueConverter: BindingValueConverter) {\r\n    this.bindingData = bindingData;\r\n    this.bindingPathSegments = this.getBindingPathSegments(bindingPath);\r\n    this.valueConverter = valueConverter;\r\n  }\r\n\r\n  public getValue(): any {\r\n    const stateValue = this.bindingData.getValue(this.bindingPathSegments);\r\n    const controlValue = this.valueConverter ? this.valueConverter.convertTo(stateValue) : stateValue;\r\n    return controlValue;\r\n  }\r\n\r\n  public setValue(controlValue: any): void {\r\n    const oldStateValue = this.bindingData.getValue(this.bindingPathSegments);\r\n    const stateValue = this.valueConverter ? this.valueConverter.convertFrom(controlValue) : controlValue;\r\n\r\n    if (this.isDateConverter(this.valueConverter) === true) {\r\n      if (DateUtil.isEqual(oldStateValue, stateValue) === true) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.bindingData.setValue(this.bindingPathSegments, stateValue, true, true);\r\n  }\r\n\r\n  private getBindingPathSegments(bindingPath: string) {\r\n    const parentPathSegments = BindingPathConverter.toBindingPathArray(this.bindingData.bindingPath);\r\n    bindingPath = bindingPath.replace(/\\./g, '\\/');\r\n    const bindingPathSegments = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    return parentPathSegments.concat(bindingPathSegments);\r\n  }\r\n\r\n  /**\r\n   * 是否是DateConverter\r\n   */\r\n  private isDateConverter(converter: BindingValueConverter): boolean {\r\n    let isDateConverter = false;\r\n    if (converter && converter.hasOwnProperty('format') === true) {\r\n      isDateConverter = true;\r\n    }\r\n    return isDateConverter;\r\n  }\r\n}\r\n\r\n/**\r\n * UIState值访问器\r\n */\r\nclass UIStateBindingValueAccessor implements BindingValueAccessor {\r\n\r\n  private uiState: UIState;\r\n\r\n  private bindingPathSegments: string[];\r\n\r\n\r\n  constructor(uiState: UIState, bindingPath: string, valueConverter: BindingValueConverter) {\r\n    this.uiState = uiState;\r\n    this.bindingPathSegments = this.getUiStateBindingPath(bindingPath);\r\n  }\r\n\r\n  public getValue(): any {\r\n    let stateValue;\r\n    let obj = this.uiState;\r\n    this.bindingPathSegments.forEach(item => {\r\n      stateValue = obj[item];\r\n      obj = stateValue\r\n    })\r\n    return stateValue;\r\n  }\r\n\r\n  public setValue(controlValue: any): void {\r\n    const length = this.bindingPathSegments.length;\r\n    if (length === 1) {\r\n      this.uiState.setPropertyValue(this.bindingPathSegments, controlValue);\r\n    } else {\r\n      let obj;\r\n      for(let i = length-1 ; i > 0 ; i--){\r\n        obj = {[this.bindingPathSegments[i]]: controlValue};\r\n        controlValue = obj;\r\n      }\r\n      this.uiState.setPropertyValue(this.bindingPathSegments[0], obj);\r\n    }\r\n  }\r\n\r\n  // UISTATE获取路径\r\n  private getUiStateBindingPath(bindingPath: string) {\r\n    const index = bindingPath.search('/');\r\n    if (index !== -1) {\r\n      return bindingPath.split('/')\r\n    } else {\r\n      return [bindingPath]\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 绑定值访问器工厂\r\n */\r\nclass BindingValueAccessorFactory {\r\n\r\n  static create(bindingType: BindingType, bindingBindingPath: string, bindingValueConverter, viewModelContext: ViewModelContext) {\r\n    switch (bindingType) {\r\n      case BindingType.EntityState:\r\n        const bindingData = viewModelContext.bindingData;\r\n        return new EntityBindingValueAccessor(bindingData, bindingBindingPath, bindingValueConverter);\r\n      case BindingType.UIState:\r\n        const uiState = viewModelContext.uiState;\r\n        return new UIStateBindingValueAccessor(uiState, bindingBindingPath, bindingValueConverter);\r\n      default:\r\n        throw new Error('Not Supported');\r\n    }\r\n  }\r\n}\r\n\r\nexport { BindingValueAccessor, EntityBindingValueAccessor, UIStateBindingValueAccessor, BindingValueAccessorFactory };\r\n","\r\nimport { makePropDecorator } from '../core/index';\r\nimport { BindingType } from './types';\r\nimport { BindingValueConverter } from './binding_value_converter';\r\nimport { ValidationRule } from '../validator';\r\n\r\n/**\r\n * FormControl元数据名称\r\n */\r\nexport const FORM_CONTROL_PROP_META = 'FormControlPropMeta';\r\n\r\n\r\n/**\r\n * FormControl元数据\r\n */\r\nexport interface FormControlMetadata {\r\n\r\n  /**\r\n   * 控件名称\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * 绑定字段路径\r\n   */\r\n  bindingType?: BindingType;\r\n\r\n  /**\r\n   * 绑定路径\r\n   */\r\n  bindingPath?: string;\r\n\r\n  /**\r\n   * 值转换器\r\n   */\r\n  valueConverter?: BindingValueConverter;\r\n\r\n    /**\r\n   * 值改变前监听器\r\n   */\r\n  valueChanging?: string;\r\n  /**\r\n   * 值改变后监听器\r\n   */\r\n  valueChanged?: string;\r\n  /**\r\n    * 验证规则\r\n    */\r\n  validRules?: ValidationRule | ValidationRule[] | null;\r\n}\r\n\r\n/**\r\n * 表单控件装饰器\r\n */\r\nexport interface FormControlPropMetaDecorator {\r\n  (obj?: FormControlMetadata): any;\r\n  new(obj?: FormControlMetadata): any;\r\n}\r\n\r\n/**\r\n * FormControl装饰器工厂\r\n */\r\nexport const FormControlPropMeta: FormControlPropMetaDecorator =\r\n  makePropDecorator(FORM_CONTROL_PROP_META, (obj: FormControlMetadata) => obj);\r\n","import { ValidationRule } from './types';\r\nimport { DateUtil } from '../utils/date_util'\r\n/**\r\n * 验证器工厂\r\n */\r\nclass ValidatorFactory {\r\n    /**\r\n     * 创建适配器\r\n     */\r\n    static create(validRules: ValidationRule | ValidationRule[]): any {\r\n        let validatorFn = [];\r\n        if (Array.isArray(validRules) && validRules.length > 1) {\r\n            validRules.forEach((validRule: ValidationRule) => {\r\n                validatorFn.push(this.initValidRuleFn(validRule))\r\n            })\r\n        } else if (Array.isArray(validRules) && validRules.length === 1) {\r\n            validatorFn.push(this.initValidRuleFn(validRules[0]))\r\n        } else {\r\n            validatorFn.push(this.initValidRuleFn(validRules as ValidationRule))\r\n        }\r\n        return validatorFn;\r\n    }\r\n\r\n    private static initValidRuleFn(validRule: ValidationRule): any {\r\n        const { type, constraints, message } = validRule;\r\n        switch (type) {\r\n            case 'required':\r\n                return (v) => {\r\n                    if (constraints[0] === true) {\r\n                        if (null === v || undefined === v || '' === v) {\r\n                            return { passing: false, message: message || '必填' }\r\n                        } else {\r\n                            return { passing: true, message: '' }\r\n\r\n                        }\r\n                    }\r\n                }\r\n            case 'NumberMaxValue':\r\n                return (v) => {\r\n                    if (typeof v !== 'number') {\r\n                        return\r\n                    }\r\n                    if (constraints[0] || 0 == constraints[0]) {\r\n                        if (v <= parseFloat(constraints[0])) {\r\n                            return { passing: true, message: '' }\r\n                        } else {\r\n                            return { passing: false, message: message || `输入值不能大于${constraints[0]}` }\r\n                        }\r\n                    }\r\n                }\r\n            case 'NumberMinValue':\r\n                return (v) => {\r\n                    if (typeof v !== 'number') {\r\n                        return\r\n                    }\r\n                    if (constraints[0] || 0 == constraints[0]) {\r\n                        if (v >= parseFloat(constraints[0])) {\r\n                            return { passing: true, message: '' }\r\n                        } else {\r\n                            return { passing: false, message: message || `输入值不能小于${constraints[0]}` }\r\n                        }\r\n                    }\r\n                }\r\n            case 'DateMaxValue':\r\n                return (v) => {\r\n                    if (constraints[0]) {\r\n                        if (DateUtil.isBefore(v, constraints[0]) || DateUtil.isSame(v, constraints[0])) {\r\n                            return { passing: true, message: '' }\r\n                        } else {\r\n                            return { passing: false, message: message || `输入日期不能大于${constraints[0]}` }\r\n                        }\r\n                    }\r\n                }\r\n            case 'DateMinValue':\r\n                return (v) => {\r\n                    if (constraints[0]) {\r\n                        if (DateUtil.isAfter(v, constraints[0]) || DateUtil.isSame(v, constraints[0])) {\r\n                            return { passing: true, message: '' }\r\n                        } else {\r\n                            return { passing: false, message: message || `输入日期不能小于${constraints[0]}` }\r\n                        }\r\n                    }\r\n                }\r\n            case 'StringMaxLength':\r\n                return (v) => {\r\n                    if (constraints[0]) {\r\n                        if (v.length <= constraints[0]) {\r\n                            return { passing: true, message: '' }\r\n                        } else {\r\n                            return { passing: false, message: message || `输入值长度不能大于${constraints[0]}` }\r\n                        }\r\n                    }\r\n                }\r\n            case 'StringMinLength':\r\n                return (v) => {\r\n                    if (constraints[0]) {\r\n                        if (v.length >= constraints[0]) {\r\n                            return { passing: true, message: '' }\r\n                        } else {\r\n                            return { passing: false, message: message || `输入值长度不能小于${constraints[0]}` }\r\n                        }\r\n                    }\r\n                }\r\n            case 'regex':\r\n                return (v) => {\r\n                    let constraintsTemp = [];\r\n                    if (typeof constraints[0] === 'string') {\r\n                        constraintsTemp = constraints[0].split(',');\r\n                    }\r\n                    for (let i = 0 ; i < constraintsTemp.length ; i++){\r\n                        if(constraintsTemp[i] === ''){\r\n                            return \r\n                        }\r\n                        const re = new RegExp(constraintsTemp[i]);\r\n                        if (re.test(v)) {\r\n                            return { passing: false, message: message  || `存在不可输入项${constraints[0]}` }\r\n                        } else {\r\n                            return { passing: true, message: '' }\r\n                        }\r\n                    }\r\n\r\n                }\r\n            case 'customFunction':\r\n                return (v) => {\r\n                    if (typeof constraints[0] === 'function') {\r\n                        let message = constraints[0](v)\r\n                        if (!message) {\r\n                            return { passing: true, message: '' }\r\n                        } else {\r\n                            return { passing: false, message }\r\n                        }\r\n                    }\r\n                }\r\n            default:\r\n                return () => {\r\n                    return { passing: true, message: '' }\r\n                }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 遍历生成的校验方法对当前值进行校验，当发现错误就返回校验结果\r\n     * 遍历完成没有错误则返回校验通过结果\r\n     * @param validatorFn 校验方法\r\n     * @param value 当前值\r\n     */\r\n    static executeValidator(validatorFn, value) {\r\n        for (let i = 0; i < validatorFn.length; i++) {\r\n            let validationResult = validatorFn[i](value);\r\n            if (validationResult['passing'] === false) {\r\n                return validationResult;\r\n            }\r\n        }\r\n        return { passing: true, message: '' };\r\n    }\r\n\r\n}\r\n\r\nexport { ValidatorFactory };","import { ViewModelContext } from '../view-model/index';\r\nimport { BindingType } from './types';\r\nimport { BindingValueConverter } from './binding_value_converter';\r\nimport { BindingValueAccessor, BindingValueAccessorFactory } from './binding_value_accessor';\r\nimport { ValidationRule, ValidatorFactory } from '../validator/index'\r\n\r\n/**\r\n * 表单控件配置\r\n */\r\ninterface FormControlConfig {\r\n  name: string;\r\n  bindingType: BindingType;\r\n  bindingPath: string;\r\n  valueConverter?: BindingValueConverter;\r\n  valueChanging?: string;\r\n  valueChanged?: string;\r\n  validRules?: ValidationRule | ValidationRule[] | null;\r\n}\r\n\r\n/**\r\n * FormControl定义\r\n */\r\nclass FormControl {\r\n\r\n  private valueAccessor: BindingValueAccessor;\r\n\r\n  private validatorFn: any;\r\n\r\n  private validationResult: any;\r\n\r\n  constructor(config: FormControlConfig, viewModelContext: ViewModelContext) {\r\n    this.valueAccessor = BindingValueAccessorFactory.create(\r\n      config.bindingType,\r\n      config.bindingPath,\r\n      config.valueConverter,\r\n      viewModelContext\r\n    );\r\n    this.validatorFn = config.validRules && ValidatorFactory.create(config.validRules)\r\n  }\r\n\r\n  public get value() {\r\n    return this.valueAccessor.getValue();\r\n  }\r\n\r\n  public set value(val) {\r\n    this.valueAccessor.setValue(val);\r\n  }\r\n}\r\n\r\nexport { FormControlConfig, FormControl };\r\n","import { MetadataUtil } from '../core/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { FormControlConfig, FormControl } from './form_control';\r\nimport { FormControlMetadata, FORM_CONTROL_PROP_META } from './decorators';\r\nimport { Subject } from 'rxjs';\r\nimport { ValidatorFactory } from '../validator'\r\n\r\n/**\r\n * Form抽象类\r\n */\r\nabstract class Form {\r\n\r\n  /**\r\n   * 表单控件配置\r\n   */\r\n  private formControlConfigs: FormControlConfig[];\r\n\r\n  /**\r\n   * ViewModel上下文\r\n   */\r\n  private viewModelContext: ViewModelContext;\r\n\r\n  private validateformControls: string[];\r\n\r\n  private validateformControlPathMap: Map<string, string>;\r\n\r\n  public changes: Subject<any>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(viewModelContext: ViewModelContext) {\r\n    this.viewModelContext = viewModelContext;\r\n    this.formControlConfigs = [];\r\n    this.validateformControls = [];\r\n    this.validateformControlPathMap = new Map;\r\n    this.changes = new Subject();\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init() {\r\n    this.collectMetadatas();\r\n    this.createFormControls();\r\n  }\r\n\r\n  /**\r\n   * 全部校验 \r\n   *  formControlConfigs 上所有的formControl的存在方法调用一遍 将错误信息集中返回\r\n   */\r\n  validateFields() {\r\n    let validationResult = [];\r\n    if (this.validateformControls.length === 0) { return validationResult; }\r\n    this.validateformControls.forEach((formControl) => {\r\n      this[formControl]['validationResult'] = ValidatorFactory.executeValidator(this[formControl]['validatorFn'], this[formControl]['value']);\r\n      !this[formControl]['validationResult'].passing && validationResult.push(this[formControl])\r\n    });\r\n    this.changes.next({ type: 'validateFieldsFinished' })\r\n    return validationResult;\r\n  }\r\n\r\n  /**\r\n   * 获取某一个得校验错误信息\r\n   * @param name 属性名称\r\n   */\r\n  getFieldError(name: string) {\r\n    if (this.validateformControls.length === 0) {\r\n      return {}\r\n    }\r\n    const index = this.validateformControls.findIndex((item) => {\r\n      return item === name\r\n    });\r\n    if (index === -1) {\r\n      return {}\r\n    } else {\r\n      const result = ValidatorFactory.executeValidator(this[name]['validatorFn'], this[name]['value']);\r\n      this[name]['validationResult'] = result;\r\n      this.changes.next({ type: 'validateFieldsFinished', value: name });\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n * 根据form元数据中的path获取某一个得校验错误信息\r\n * @param path 属性名称数组\r\n */\r\n  getFieldErrorByPath(path: string[]) {\r\n    if (this.validateformControls.length === 0) {\r\n      return {}\r\n    }\r\n    let pathName = path[0]\r\n    if (path && path.length >= 2) {\r\n      pathName = path.join('.');\r\n    }\r\n    const index = this.validateformControlPathMap.has(pathName);\r\n    if (!index) {\r\n      return {}\r\n    } else {\r\n      const result = ValidatorFactory.executeValidator(this[this.validateformControlPathMap.get(pathName)]['validatorFn'], this[this.validateformControlPathMap.get(pathName)]['value']);\r\n      this[this.validateformControlPathMap.get(pathName)]['validationResult'] = result;\r\n      this.changes.next({ type: 'validateFieldsFinished', value: this.validateformControlPathMap.get(pathName) });\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清除一组字段验证状态\r\n   * @param fields 字段的数组\r\n   */\r\n  resetFieldsValidate(fields?: string[]) {\r\n    if (this.validateformControls.length === 0) {\r\n      return true;\r\n    } else {\r\n      if (fields && fields.length > 0) {\r\n        const sa = new Set(this.validateformControls);\r\n        const sb = new Set(fields);\r\n        // 交集\r\n        const intersect = this.validateformControls.filter(x => sb.has(x));\r\n        // 遍历清空所有校验结果数据\r\n        intersect.forEach(item => {\r\n          this[item]['validationResult'] = {};\r\n        })\r\n      } else {\r\n        // 没传数据全部清除\r\n        this.validateformControls.forEach(item => {\r\n          this[item]['validationResult'] = {};\r\n        })\r\n      }\r\n      this.changes.next({ type: 'validateFieldsFinished' })\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * 创建FormControls\r\n   */\r\n  private createFormControls() {\r\n    this.formControlConfigs.forEach((formControlConfig: FormControlConfig) => {\r\n      const name = formControlConfig.name;\r\n      const formControl = new FormControl(formControlConfig, this.viewModelContext);\r\n      this[name] = formControl;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 收集元数据\r\n   */\r\n  private collectMetadatas() {\r\n    const formControlMetadatas = MetadataUtil.getPropsMetadatasByName(this.constructor, FORM_CONTROL_PROP_META);\r\n    Object.keys(formControlMetadatas).forEach((name: string) => {\r\n      const formControlMetadata = formControlMetadatas[name] as FormControlMetadata;\r\n      if (formControlMetadata.validRules) {\r\n        this.validateformControls.push(name);\r\n        this.validateformControlPathMap.set(formControlMetadata.bindingPath, name);\r\n      }\r\n      const formControlConfig: FormControlConfig = {\r\n        name: name,\r\n        bindingType: formControlMetadata.bindingType,\r\n        bindingPath: formControlMetadata.bindingPath,\r\n        valueConverter: formControlMetadata.valueConverter,\r\n        valueChanging: formControlMetadata.valueChanging,\r\n        valueChanged: formControlMetadata.valueChanged,\r\n        validRules: formControlMetadata.validRules\r\n      };\r\n      this.formControlConfigs.push(formControlConfig);\r\n    });\r\n  }\r\n\r\n  public getEntityValueChangingListeners(): { [property: string]: string } {\r\n    const listeners = {};\r\n    this.formControlConfigs.forEach((formControl: FormControlConfig) => {\r\n      if (formControl.valueChanging) {\r\n        listeners[formControl.bindingPath] = formControl.valueChanging;\r\n      }\r\n    });\r\n    return listeners;\r\n  }\r\n\r\n  public getEntityValueChangedListeners(): { [property: string]: string } {\r\n    const listeners = {};\r\n    this.formControlConfigs.forEach((formControl: FormControlConfig) => {\r\n      if (formControl.valueChanged) {\r\n        listeners[formControl.bindingPath] = formControl.valueChanged;\r\n      }\r\n    });\r\n    return listeners;\r\n  }\r\n}\r\n\r\nexport { Form };\r\n","import { makePropDecorator } from '../core/index';\r\nimport { CommandParams, ParamDescriptions,  } from '../command/index';\r\n\r\n/**\r\n * 快捷键\r\n */\r\nexport interface Keybinding {\r\n  readonly ctrlKey: boolean;\r\n  readonly shiftKey: boolean;\r\n  readonly altKey: boolean;\r\n  readonly metaKey?: boolean;\r\n  readonly key: string;\r\n}\r\n\r\n/**\r\n * 命令描述\r\n */\r\nexport interface CommandMethodMetadata {\r\n\r\n  /**\r\n   * 命令名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 命令参数\r\n   */\r\n  params?: CommandParams;\r\n\r\n  /**\r\n   * 框架id\r\n   * 通过frameId确定命令执行的上下文，不指定则默认为当前Frame。\r\n   */\r\n  frameId?: string;\r\n\r\n  /**\r\n   * 参数描述，目前描述类型，后续可兼容精度等其他信息。\r\n   */\r\n  paramDescriptions?: ParamDescriptions;\r\n\r\n  /**\r\n   * 快捷键绑定\r\n   */\r\n  keyBinding?: Keybinding;\r\n}\r\n\r\n\r\n/**\r\n * 命令装饰器名称\r\n */\r\nexport const COMMAND_METHOD_META = 'CommandMethodMeta';\r\n\r\n/**\r\n * 命令装饰接口\r\n */\r\nexport interface CommandMethodMetaDecorator {\r\n  (ngCommand?: CommandMethodMetadata): any;\r\n  new(ngCommand?: CommandMethodMetadata): any;\r\n}\r\n\r\n/**\r\n * 命令装饰器工厂\r\n */\r\nexport const CommandMethodMeta: CommandMethodMetaDecorator =\r\n  makePropDecorator(COMMAND_METHOD_META, (obj: CommandMethodMetadata) => obj);\r\n","import { MetadataUtil } from '../core/index';\r\nimport { Injector } from '../core/index';\r\nimport { Entity } from '../entity/index';\r\nimport { Repository } from '../repository/index';\r\nimport { Command, CommandBus } from '../command/index';\r\nimport { BindingData, EntityValueChange, InvokeOnValueChange } from '../binding-data/index';\r\nimport { UIState } from '../ui-state/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { Form } from '../form/index';\r\nimport { ViewModelContext } from './view_model_context';\r\n\r\nimport { COMMAND_METHOD_META, CommandMethodMetadata, Keybinding } from './decorators';\r\nimport { EMPTY, from, Observable, of } from 'rxjs';\r\nimport { concatMap, every, tap } from 'rxjs/operators';\r\n\r\nabstract class ViewModel {\r\n\r\n  /**\r\n   * 命令元数据集合\r\n   */\r\n  public ngCommands: { [propName: string]: CommandMethodMetadata };\r\n\r\n  /**\r\n   * 名称\r\n   */\r\n  public id: string;\r\n\r\n  /**\r\n   * 注入器\r\n   */\r\n  public injector: Injector;\r\n\r\n  /**\r\n   * 视图模型上下文\r\n   */\r\n  public context: ViewModelContext;\r\n\r\n  /**\r\n   * 数据仓库\r\n   */\r\n  public repository: Repository<Entity>;\r\n\r\n  /**\r\n   * 绑定路径\r\n   */\r\n  public bindingPath: string;\r\n\r\n  /**\r\n   * 数据状态\r\n   */\r\n  public bindingData: BindingData;\r\n\r\n  /**\r\n   * UI状态\r\n   */\r\n  public uiState: UIState;\r\n\r\n  /**\r\n   * 状态机\r\n   */\r\n  public stateMachine: StateMachine;\r\n\r\n  /**\r\n   * 表单\r\n   */\r\n  public form: Form;\r\n\r\n  /**\r\n   * 命令总线\r\n   */\r\n  public commandBus: CommandBus;\r\n\r\n  /**\r\n   * 快捷键映射\r\n   */\r\n  public keybindingMap: Map<string, Keybinding>;\r\n\r\n  /**\r\n   * 值变化前监听器\r\n   */\r\n  private entityValueChangingListeners: Map<string, string>;\r\n\r\n  /**\r\n   * 值变化后监听器\r\n   */\r\n  private entityValueChangedListeners: Map<string, string>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor(injector: Injector, id: string) {\r\n    this.injector = injector;\r\n    this.id = id;\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init() {\r\n    this.initRepository();\r\n    this.initContext();\r\n    this.initBindingData();\r\n    this.initUIState();\r\n    this.intiStateMachine();\r\n    this.initForm();\r\n    this.initCommandBus();\r\n    this.registerWithParent();\r\n    this.initListeners();\r\n    this.closeOldBeSession();\r\n  }\r\n\r\n  private initRepository() {\r\n    this.repository = this.injector.get(Repository);\r\n  }\r\n\r\n  private initContext() {\r\n    this.context = this.injector.get<ViewModelContext>(ViewModelContext);\r\n    this.context.init(this);\r\n  }\r\n\r\n  private initBindingData() {\r\n    this.bindingData = this.context.injector.get(BindingData);\r\n    this.entityValueChangingListeners = new Map<string, string>();\r\n    this.entityValueChangedListeners = new Map<string, string>();\r\n    if (this.bindingData) {\r\n      this.bindingData.setValueChangeInvokerFactory((paths: string[]): InvokeOnValueChange => {\r\n        return (preValue, value, entityChanged: boolean, primaryValue?: any): Observable<boolean> => {\r\n          const plainPath = '/' + paths.join('/');\r\n          let command: string;\r\n          if (entityChanged === false) {\r\n            command = this.entityValueChangingListeners[plainPath];\r\n          } else {\r\n            command = this.entityValueChangedListeners[plainPath];\r\n          }\r\n\r\n          if (!!command) {\r\n            const change: EntityValueChange = {\r\n              paths: paths,\r\n              preValue: preValue,\r\n              value: value,\r\n              changed: entityChanged\r\n            };\r\n            const commands = command.split(';').filter(p => p);\r\n            let valueChangeSuccess = true;\r\n            return from(commands).pipe(\r\n              concatMap(item => {\r\n                if (!valueChangeSuccess) {\r\n                  return EMPTY;\r\n                }\r\n                return this[item](change).pipe(\r\n                  tap((result: any) => {\r\n                    valueChangeSuccess = result;\r\n                  })\r\n                );\r\n              }),\r\n              every((result: any) => result)\r\n            );\r\n          } else {\r\n            return of(true);\r\n          }\r\n        };\r\n\r\n      });\r\n    }\r\n\r\n    const repositoryName = this.repository.name;\r\n    const bindingDataManager = this.context.appContext.bindingDataManager;\r\n    const repositoryBindingData = bindingDataManager.getBindingDataByName(repositoryName);\r\n    this.bindingData.initByBindingList(repositoryBindingData.list, this.context);\r\n  }\r\n\r\n  private initUIState() {\r\n    this.uiState = this.injector.get(UIState);\r\n  }\r\n\r\n  private intiStateMachine() {\r\n    this.stateMachine = this.injector.get(StateMachine, null);\r\n    if (!this.stateMachine) {\r\n      return;\r\n    }\r\n    this.stateMachine.init(this.context);\r\n  }\r\n\r\n  private initForm() {\r\n    this.form = this.injector.get(Form, null);\r\n    this.form.init();\r\n  }\r\n\r\n  private initCommandBus() {\r\n    this.commandBus = this.injector.get(CommandBus);\r\n    this.extendCommandMethods();\r\n  }\r\n\r\n  private extendCommandMethods() {\r\n    this.ngCommands = MetadataUtil.getPropsMetadatasByName(this.constructor, COMMAND_METHOD_META);\r\n    this.keybindingMap = new Map<string, Keybinding>();\r\n\r\n    Object.keys(this.ngCommands).forEach((propName: string) => {\r\n      const ngCommand: CommandMethodMetadata = this.ngCommands[propName];\r\n\r\n      Object.defineProperty(this, propName, {\r\n        value: (eventParams: any) => {\r\n          const command: Command = {\r\n            name: ngCommand.name,\r\n            params: ngCommand.params,\r\n            paramDescriptions: ngCommand.paramDescriptions,\r\n            eventParam: eventParams || null\r\n          };\r\n          return this.commandBus.dispatch(command);\r\n        }\r\n      });\r\n\r\n      if (ngCommand.keyBinding) {\r\n        this.keybindingMap.set(propName, ngCommand.keyBinding);\r\n      }\r\n    });\r\n  }\r\n\r\n  private registerWithParent() {\r\n    const parentContext = this.context.parent;\r\n    if (!parentContext || !parentContext.viewModel || !parentContext.viewModel['childViewModels']) {\r\n      return;\r\n    }\r\n\r\n    const parentViewModel = parentContext.viewModel;\r\n    const className = this.constructor.name;\r\n    const propName = parentViewModel['childViewModels'][className];\r\n    parentViewModel[propName] = this;\r\n  }\r\n\r\n  /**\r\n   * 关闭老的BeSession\r\n   */\r\n  private closeOldBeSession() {\r\n    const allViewModelContexts = this.context.appContext.viewModelContextManager.getContexts();\r\n    if (allViewModelContexts.length === 1 && allViewModelContexts[0] === this.context) {\r\n      this.context.repository.reset();\r\n    }\r\n  }\r\n\r\n  /**\r\n * 从Form获取监听器\r\n */\r\n  private initListeners() {\r\n    const extractPath = (bindingBasePath: string, bindingPath: string): string => {\r\n      return '/' + bindingBasePath.split('/').concat(bindingPath.split('.')).filter((item) => item.length > 0).join('/');\r\n    };\r\n\r\n    if (this.form) {\r\n      const valueChangingListeners = this.form.getEntityValueChangingListeners();\r\n      Object.keys(valueChangingListeners).forEach((bindingPath) => {\r\n        const plainPath = extractPath(this.bindingPath, bindingPath);\r\n        this.entityValueChangingListeners[plainPath] = valueChangingListeners[bindingPath];\r\n      });\r\n\r\n      const valueChangedListeners = this.form.getEntityValueChangedListeners();\r\n      Object.keys(valueChangedListeners).forEach((bindingPath) => {\r\n        const plainPath = extractPath(this.bindingPath, bindingPath);\r\n        this.entityValueChangedListeners[plainPath] = valueChangedListeners[bindingPath];\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport { ViewModel };\r\n","import { StaticProvider } from '../core/index';\r\nimport { ViewModel } from './view_model';\r\n\r\nclass ViewModelOptions {\r\n\r\n  id: string;\r\n\r\n  /**\r\n   * 应用providers\r\n   */\r\n  providers: StaticProvider[];\r\n\r\n  /**\r\n   * 父ViewModel\r\n   */\r\n  parent?: ViewModel;\r\n\r\n}\r\n\r\nexport { ViewModelOptions };\r\n","import { Subject, Subscription } from 'rxjs';\r\n\r\nclass AppEventBus {\r\n  /**\r\n* eventBus\r\n*/\r\n  private eventBus: Subject<any>;\r\n\r\n  private subscriptionsMap: Map<string, Subscription>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.eventBus = new Subject();\r\n    this.subscriptionsMap = new Map<string, Subscription>();\r\n  }\r\n\r\n  triggerEvent(event: any) {\r\n    this.eventBus.next(event);\r\n  }\r\n\r\n  subscribe(componentId: string, func: Function, funcError?: Function) {\r\n    if (this.subscriptionsMap.has(componentId) === false) {\r\n      const subscription = this.eventBus.subscribe(\r\n        (value) => func(value),\r\n        (value) => funcError(value)\r\n      )\r\n      this.subscriptionsMap.set(componentId, subscription);\r\n    }\r\n  }\r\n  \r\n  unsubscribe(componentId: string) {\r\n    if (this.subscriptionsMap.has(componentId) === true) {\r\n      this.subscriptionsMap.get(componentId).unsubscribe();\r\n      this.subscriptionsMap.delete(componentId);\r\n    }\r\n  }\r\n}\r\n\r\nexport { AppEventBus };","import { StaticProvider, Injector } from '../core/index';\r\nimport { BindingDataManager } from './binding_data_manager';\r\nimport { RepositoryManager } from './repository_mananger';\r\nimport { ViewModelContextManager } from './view_model_contex_manager';\r\nimport { AppContext } from './app_context';\r\nimport { AppEventBus } from './app_eventBus';\r\n\r\nconst APP_BASE_PROVIDERS: StaticProvider[] = [\r\n  { provide: AppEventBus, useClass: AppEventBus, deps: [] },\r\n  { provide: BindingDataManager, useClass: BindingDataManager, deps: [] },\r\n  { provide: RepositoryManager, useClass: RepositoryManager, deps: [] },\r\n  { provide: ViewModelContextManager, useClass: ViewModelContextManager, deps: [] },\r\n  {\r\n    provide: AppContext, useClass: AppContext,\r\n    deps: [Injector, AppEventBus, RepositoryManager, BindingDataManager, ViewModelContextManager]\r\n  }\r\n];\r\n\r\nexport { APP_BASE_PROVIDERS };\r\n","import { StaticProvider, Injector, createInjector} from '../core/index';\r\nimport { AppContext } from './app_context';\r\nimport { ViewModelContext, ViewModel, ViewModelOptions } from '../view-model/index';\r\n\r\nimport { APP_BASE_PROVIDERS } from './providers';\r\nimport { APP_VARIABLE_PROVIDERS } from '../variable/index';\r\nimport { VIEW_MODEL_COMMAND_PROVIDERS } from '../command/index';\r\nimport { HTTP_PROVIDERS } from '../http/index';\r\n\r\n\r\nclass App {\r\n\r\n  public context: AppContext;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(options: any) {\r\n\r\n    options.providers = options.providers || [];\r\n    const appProviders = [\r\n      ...APP_BASE_PROVIDERS,\r\n      ...APP_VARIABLE_PROVIDERS,\r\n      ...HTTP_PROVIDERS,\r\n      ...options.providers\r\n    ];\r\n    const appInjector = createInjector(appProviders);\r\n    this.context = appInjector.get(AppContext);\r\n  }\r\n\r\n  /**\r\n   * 启用ViewModel\r\n   */\r\n  createViewModel(options: ViewModelOptions): ViewModel {\r\n\r\n    const providers = options.providers || [];\r\n    const parent = options.parent || null;\r\n\r\n    const mergedProviders: StaticProvider[] = [\r\n      { provide: ViewModelContext, useClass: ViewModelContext, deps: [] },\r\n      ...VIEW_MODEL_COMMAND_PROVIDERS,\r\n      ...providers\r\n    ];\r\n\r\n    const parentInjector = parent ? parent.injector : this.context.injector;\r\n    const injector = createInjector(mergedProviders, parentInjector);\r\n    const viewModel = injector.get<ViewModel>(ViewModel);\r\n    viewModel.init();\r\n    return viewModel;\r\n  }\r\n\r\n}\r\n\r\nexport { App };\r\n","/*\r\n * StateMachine变量解析\r\n * @Author: Witt\r\n * @Date: 2018-12-04 17:09:42\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-10-30 11:07:10\r\n */\r\n\r\nimport { AppContext } from '../app/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { CommandContext } from '../command/index';\r\n\r\n/**\r\n * 解析辅助工具类\r\n */\r\nclass ParseUtil {\r\n\r\n  /**\r\n   * 获取应用上下文\r\n   */\r\n  static getAppContext(context: any): AppContext {\r\n    if (context instanceof CommandContext) {\r\n      return context.viewModelContext.appContext;\r\n    } else if (context instanceof ViewModelContext) {\r\n      return context.appContext;\r\n    } else  if (context instanceof AppContext) {\r\n      return context;\r\n    } else {\r\n      throw new Error('上下文中找不到AppContext，请检查！');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取当前Frame的Context\r\n   */\r\n  static getFrameContext(context: any): ViewModelContext {\r\n    if (context instanceof CommandContext) {\r\n      return context.viewModelContext;\r\n    } else if (context instanceof ViewModelContext) {\r\n      return context;\r\n    } else {\r\n      throw new Error('上下文中找不到FrameContext，请检查！');\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * 获取根Frame的Context\r\n   */\r\n  static getRootFrameContext(context: any): ViewModelContext {\r\n    const frameContext = this.getFrameContext(context);\r\n    return frameContext.root;\r\n  }\r\n\r\n  /**\r\n   * 根据frameId获取FrameContext\r\n   */\r\n  static getFrameContextById(context: any, frameId: string): ViewModelContext {\r\n    const appContext = this.getAppContext(context);\r\n    return appContext.viewModelContextManager.getContextById(frameId);\r\n  }\r\n}\r\n\r\nexport { ParseUtil };\r\n","/**\r\n * 数据源变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\nimport { AppContext } from '../app/index';\r\nimport { VariableParser } from './variable_parser';\r\nimport { ParseUtil } from './parse_util';\r\n\r\n/**\r\n * 数据变量解析\r\n */\r\nclass DataVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  parse(expression: string, context: any): any {\r\n    const appContext = ParseUtil.getAppContext(context);\r\n    const paths: string[] = this.extractPaths(expression);\r\n\r\n    // 1、单个的表达式：直接求值\r\n    if (paths.length === 1 && expression === `{DATA~${paths[0]}}`) {\r\n      return this.getValue(paths[0], appContext);\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach( (path: string) => {\r\n      const searchValue = `{DATA~${path}}`;\r\n      const replaceValue = this.getValue(path, appContext);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n    });\r\n\r\n    return  expression;\r\n  }\r\n\r\n  /**\r\n   * 提取路径\r\n   */\r\n  private extractPaths(expression: string) {\r\n    const paths: string[]  = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const DATA_PATTERN_G = /\\{DATA~(\\S+?)\\}/g;\r\n    const dataVariables = expression.match(DATA_PATTERN_G);\r\n    if (dataVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const DATA_PATTERN = /\\{DATA~(\\S+?)\\}/;\r\n    dataVariables.forEach( dataVariable =>  {\r\n      const pathMatches = dataVariable.match(DATA_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取值\r\n   * @param path 路径：/\r\n   */\r\n  private getValue(path: string, appContext: AppContext): any {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n\r\n    const frameContext = appContext.viewModelContextManager.getContextById(parts[0]);\r\n    if (!frameContext) {\r\n      throw new Error(`${path}不正确，请检查！`);\r\n    }\r\n\r\n    const bindingData  = frameContext.bindingData;\r\n    if (!bindingData) {\r\n      throw new Error(`${path}不正确，请检查！`);\r\n    }\r\n    return bindingData.getValue(parts.slice(1));\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { DataVariableParser };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { VariableParser } from './variable_parser';\r\nimport { AppContext } from '../app/index';\r\nimport { ParseUtil } from './parse_util';\r\n\r\n/**\r\n * 数据变量解析\r\n */\r\nclass UIStateVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 形如：/frameId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n\r\n    const appContext = ParseUtil.getAppContext(context);\r\n    const paths = this.extractPaths(expression);\r\n\r\n    // 1、单个的表达式：直接求值\r\n    if (paths.length === 1 && expression === `{UISTATE~${paths[0]}}`) {\r\n      return this.getUIState(paths[0], appContext);\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach(path => {\r\n      const searchValue = `{UISTATE~${path}}`;\r\n      const replaceValue = this.getUIState(path, appContext);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n    });\r\n\r\n    return expression;\r\n  }\r\n\r\n  /**\r\n   * 提取路径\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[] = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const UI_STATE_PATTERN_G = /\\{UISTATE~(\\S+?)\\}/g;\r\n    const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n    if (uiStateVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const UI_STATE_PATTERN = /\\{UISTATE~(\\S+?)\\}/;\r\n    uiStateVariables.forEach((uiStateVariable: string) => {\r\n      const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取UIState\r\n   */\r\n  private getUIState(path: string, appContext: AppContext) {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    const [frameId, stateName] = parts;\r\n    const frameContext = appContext.viewModelContextManager.getContextById(frameId);\r\n    let state = frameContext.uiState[stateName];\r\n    if (state && state.constructor.toString().startsWith('function Date()')) {\r\n      return this.formatDate(state);\r\n    }\r\n    for (let i = 2; i < parts.length; i++) {\r\n      state = state[parts[i]];\r\n\r\n      // 复杂对象一层层查找下去，如果某一层不存在，结果可以是undefined，但是要直接返回undefined避免报错。\r\n      if (!state) {\r\n        return state;\r\n      }\r\n    }\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * @todo：待删除\r\n   */\r\n  private formatDate(value: Date): string {\r\n    if (!value) {\r\n      return '';\r\n    }\r\n\r\n    // 年\r\n    const year = value.getFullYear();\r\n\r\n    // 月\r\n    let month = (value.getMonth() + 1).toString();\r\n    month = month.length === 1 ? ('0' + month) : month;\r\n\r\n    // 日\r\n    let day = value.getDate().toString();\r\n    day = day.length === 1 ? ('0' + day) : day;\r\n    return `${year}-${month}-${day}`;\r\n  }\r\n}\r\n\r\nexport { UIStateVariableParser };\r\n","/*\r\n * StateMachine变量解析\r\n * @Author: Witt\r\n * @Date: 2018-12-04 17:09:42\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-10-30 11:07:10\r\n */\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { VariableParser } from './variable_parser';\r\nimport { ParseUtil } from './parse_util';\r\n\r\n/**\r\n * 状态机变量解析\r\n * @summary\r\n *\r\n * 解析策略：\r\n * 1、不带frameId，从顶层StateMachine中解析\r\n * {STATEMACHINE~/states/key}\r\n * {STATEMACHINE~/renderStates/key}\r\n *\r\n * 2、带frameId，从frameId对应的FrameContext的StateMachine中解析\r\n * {STATEMACHINE~/frameId/states/key}\r\n * {STATEMACHINE~/frameId/renderStates/key}\r\n *\r\n * 存在的问题：\r\n * 1、不带frameId从顶层StateMachine解析仅为了兼容，将来改为从当前FrameContext的StateMachine中解析；\r\n * 2、组合表单中顶层StateMachine是主表单的rootFrameContext的StateMachine，显然不合理（既成事实）；\r\n * 3、farmeId如果是states或renderStates，导致解析失败，几率很小，但又风险。\r\n */\r\nclass StateMachineVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor() {\r\n  }\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 变量：格式形如：/frameId/componentId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    const paths = this.extractPaths(expression);\r\n\r\n    // 1、单个的表达式：直接求值\r\n    if (paths.length === 1 && expression === `{STATEMACHINE~${paths[0]}}`) {\r\n      return this.getValue(paths[0], context);\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach( path => {\r\n      const searchValue = `{STATEMACHINE~${path}}`;\r\n      const replaceValue = this.getValue(path, context);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n    });\r\n\r\n    return  expression;\r\n  }\r\n\r\n  /**\r\n   * 提取Session变量名\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[]  = [];\r\n\r\n    // 查找所有的StateMachine变量字符串\r\n    const STATE_MACHINE_PATTERN_G = /\\{STATEMACHINE~(\\S+?)\\}/g;\r\n    const stateMachineVariables = expression.match(STATE_MACHINE_PATTERN_G);\r\n    if (stateMachineVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const STATE_MACHINE_PATTERN = /\\{STATEMACHINE~(\\S+?)\\}/;\r\n    stateMachineVariables.forEach( sessionVariable =>  {\r\n      const pathMatches = sessionVariable.match(STATE_MACHINE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取对应的值\r\n   */\r\n  private getValue(path: string, context: any): any {\r\n\r\n    const pathObj = this.getPathObj(path);\r\n    const stateMachine = this.getTargetStateMachine(pathObj.frameId, context);\r\n\r\n    if (pathObj.type === 'currentState') {\r\n      return stateMachine.context.state;\r\n    } else if (pathObj.type === 'renderStates') {\r\n      return stateMachine[pathObj.name] as boolean;\r\n    } else {\r\n      throw new Error(`不支类型为${pathObj.type}的状态机变量`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 解析path，并获取对应的StateMachine实例\r\n   */\r\n  private getTargetStateMachine(frameId: string, context): StateMachine {\r\n    let targetFrameContext: ViewModelContext;\r\n    if (frameId) {\r\n      targetFrameContext = ParseUtil.getFrameContextById(context, frameId);\r\n    } else {\r\n      targetFrameContext = ParseUtil.getRootFrameContext(context);\r\n    }\r\n\r\n    if (!targetFrameContext || !targetFrameContext.stateMachine) {\r\n      throw new Error('找不到对应的状态机实例，请检查！');\r\n    }\r\n    return targetFrameContext.stateMachine;\r\n  }\r\n\r\n  /**\r\n   * 将Path解析为格式化的Path对象\r\n   */\r\n  private getPathObj(path: string): any {\r\n    let parsedPathObj: any;\r\n    const parts = this.splitPath(path);\r\n\r\n    if (parts[0] === 'currentState' || parts[0] === 'renderStates') {\r\n      parsedPathObj = {\r\n        frameId: '',\r\n        type: parts[0],\r\n        name: parts[1]\r\n      };\r\n    } else {\r\n      parsedPathObj = {\r\n        frameId: parts[0],\r\n        type: parts[1],\r\n        name: parts[2]\r\n      };\r\n    }\r\n\r\n    return parsedPathObj;\r\n  }\r\n\r\n  /**\r\n   * 分隔Path\r\n   */\r\n  private splitPath(path: string): string[] {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return parts;\r\n  }\r\n\r\n}\r\n\r\nexport { StateMachineVariableParser };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { CommandContext } from '../command/index';\r\nimport { VariableParser } from './variable_parser';\r\n\r\n/**\r\n * 命令变量解析\r\n * {COMMAND~/params/key}\r\n * {COMMAND~/results/taskName}\r\n */\r\nclass CommandVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor() {\r\n  }\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 变量：格式形如：/frameId/componentId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    const paths = this.extractPaths(expression);\r\n\r\n    // 1、单个的表达式：直接求值\r\n    if (paths.length === 1 && expression === `{COMMAND~${paths[0]}}`) {\r\n      return this.getValue(paths[0], context);\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach( path => {\r\n      const searchValue = `{COMMAND~${path}}`;\r\n      const replaceValue = this.getValue(path, context);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n    });\r\n\r\n    return  expression;\r\n  }\r\n\r\n  /**\r\n   * 提取Session变量名\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[]  = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const UI_STATE_PATTERN_G = /\\{COMMAND~(\\S+?)\\}/g;\r\n    const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n    if (uiStateVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const UI_STATE_PATTERN = /\\{COMMAND~(\\S+?)\\}/;\r\n    uiStateVariables.forEach( sessionVariable =>  {\r\n      const pathMatches = sessionVariable.match(UI_STATE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取UIState\r\n   */\r\n  private getValue(path: string, context: any) {\r\n    if (context instanceof CommandContext === false) {\r\n      throw new Error('当前上下文不支持COMMAND变量，请检查！');\r\n    }\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n\r\n    const [type, name] = parts;\r\n    if (type === 'params') {\r\n      return context.command.params[name];\r\n    } else if (type === 'results') {\r\n      return context.results[name];\r\n    }\r\n  }\r\n}\r\n\r\nexport { CommandVariableParser };\r\n","/**\r\n * 变量解析服务\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\nimport { VariableParser, VARIABLE_PARSERS } from './variable_parser';\r\nimport { Injector  } from '../core/index';\r\n\r\n\r\n/**\r\n * 变量解析服务\r\n * 职责：\r\n * 1、解析字符串中的变量，并替换成相应的值；\r\n * 2、对表达式进行求值。\r\n *\r\n * @todo 对表达式求值的部分和表达式功能重叠，是否转移到表达式中？\r\n */\r\nclass VariableParseService {\r\n\r\n  /**\r\n   * 解析器集合\r\n   */\r\n  private parsers: VariableParser[];\r\n\r\n  /**\r\n   * 构造变量解析服务\r\n   * @param parsers 解析器集合\r\n   */\r\n  constructor(parsers: VariableParser[]) {\r\n    this.parsers = parsers;\r\n  }\r\n\r\n  /**\r\n   * 解析表达式\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  public parse(target: any, context?: any): any {\r\n    if (typeof target === 'string' && target.length > 0) {\r\n\r\n      // 字符串，直接解析\r\n      return this.parseExpression(target, context);\r\n\r\n    } else if (Array.isArray(target)) {\r\n\r\n      // 遍历数组\r\n      target.forEach((item, itemIndex) =>  {\r\n        if (typeof item === 'string') {\r\n          target[itemIndex] = this.parseExpression(item, context);\r\n        } else {\r\n          target[itemIndex] = this.parse(item, context);\r\n        }\r\n      });\r\n\r\n    } else if (typeof target === 'object' && target !== null) {\r\n\r\n      // 遍历对象可枚举属性\r\n      const keys = Object.keys(target);\r\n      keys.forEach(key => {\r\n        if (typeof target[key] === 'string') {\r\n          target[key] = this.parseExpression(target[key], context);\r\n        } else {\r\n          target[key] = this.parse(target[key], context);\r\n        }\r\n      });\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * 表达式求值\r\n   */\r\n  public evaluate(expression: string, context?: any): any {\r\n    const parsedExpression = this.parse(expression, context);\r\n    return (new Function('return ' + parsedExpression))();\r\n  }\r\n\r\n  /**\r\n   * 解析表达式\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  private parseExpression(expression: string, context: any): string {\r\n\r\n    // 空串直接返回\r\n    if (expression === '') {\r\n      return '';\r\n    }\r\n\r\n    this.parsers.forEach(parser => {\r\n      if (typeof expression === 'string') {\r\n        expression = parser.parse(expression, context);\r\n      }\r\n    });\r\n    return expression;\r\n  }\r\n}\r\n\r\nexport { VariableParseService };\r\n","import { StaticProvider } from '../core/index';\r\nimport { VARIABLE_PARSERS } from './variable_parser';\r\nimport { DataVariableParser } from './data_variable_parser';\r\nimport { UIStateVariableParser } from './ui_state_variable_parser';\r\nimport { StateMachineVariableParser } from './state_machine_variable_parser';\r\nimport { CommandVariableParser } from './command_variable_parser';\r\nimport { VariableParseService } from './variable_parse_service';\r\n\r\nconst APP_VARIABLE_PROVIDERS: StaticProvider[] = [\r\n  { provide: VARIABLE_PARSERS,     useClass: DataVariableParser,         multi: true, deps: [] },\r\n  { provide: VARIABLE_PARSERS,     useClass: UIStateVariableParser,      multi: true,  deps: [] },\r\n  { provide: VARIABLE_PARSERS,     useClass: StateMachineVariableParser, multi: true,  deps: [] },\r\n  { provide: VARIABLE_PARSERS,     useClass: CommandVariableParser,      multi: true,  deps: [] },\r\n  { provide: VariableParseService, useClass: VariableParseService,       deps: [VARIABLE_PARSERS] },\r\n];\r\n\r\nexport { APP_VARIABLE_PROVIDERS };\r\n","/* eslint-disable no-case-declarations */\r\nimport { VariableParseService } from '../../variable/index';\r\nimport { CommandContext } from '../command_context';\r\nimport { Injector } from '../../core/index';\r\n\r\n/**\r\n * 任务函数\r\n * @params result 上一步执行结果\r\n * @params context 执行上下文\r\n */\r\ntype LinkFunc = (context: CommandContext) => boolean;\r\n\r\n/**\r\n * 任务链接\r\n */\r\nclass TaskLink {\r\n\r\n  /**\r\n   * 源任务\r\n   */\r\n  from: string;\r\n\r\n  /**\r\n   * 目标任务\r\n   */\r\n  to: string;\r\n\r\n  /**\r\n   * 执行条件\r\n   * 1、表达式；\r\n   * 2、布尔值；\r\n   * 3、函数\r\n   */\r\n  condition: string | boolean| LinkFunc;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(from: string, to: string, condition: string | boolean| LinkFunc) {\r\n    this.from = from;\r\n    this.to   = to;\r\n    this.condition = condition;\r\n  }\r\n\r\n  /**\r\n   * 是否能够\r\n   */\r\n  public canLink(context: CommandContext): boolean {\r\n    const type = typeof this.condition;\r\n    let canLink;\r\n    switch (type) {\r\n      case 'boolean':\r\n        canLink = this.condition as boolean;\r\n        break;\r\n      case 'function':\r\n        canLink = (this.condition as LinkFunc)(context);\r\n        break;\r\n      case 'string':\r\n        const parseService = context.viewModelContext.injector.get(VariableParseService);\r\n        canLink = parseService.evaluate(this.condition as string, context);\r\n        break;\r\n      default:\r\n        canLink = false;\r\n        break;\r\n    }\r\n    return canLink;\r\n  }\r\n}\r\n\r\nexport { LinkFunc, TaskLink };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-17 14:13:40\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-10-17 16:08:34\r\n */\r\n\r\nimport { TaskFunc, TaskNode } from './task_node';\r\nimport { LinkFunc, TaskLink } from './task_link';\r\nimport { CommandContext } from '../command_context';\r\n\r\n/**\r\n * 任务执行流程\r\n */\r\nclass TaskFlow {\r\n\r\n  /**\r\n   * 节点集合\r\n   */\r\n  private nodes: TaskNode[] = [];\r\n\r\n  /**\r\n   * 边集合\r\n   */\r\n  private links: TaskLink[] = [];\r\n\r\n\r\n  // #region 节点操作\r\n\r\n  /**\r\n   * 添加节点\r\n   */\r\n  public addNode(name: string, func: TaskFunc): void {\r\n    const node = new TaskNode(name, func);\r\n    this.nodes.push(node);\r\n  }\r\n\r\n\r\n  /**\r\n   * 批量添加链接\r\n   */\r\n  public addNodes(nodes: TaskNode[]) {\r\n    this.nodes = this.nodes.concat(nodes);\r\n  }\r\n\r\n  /**\r\n   * 在目标节点之前插入一个节点\r\n   * @param target 目标节点名称\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  public insertNode(target: string, name: string, func: TaskFunc): void {\r\n    const index = this.findNodeIndex(target);\r\n    const node = this.createNode(name, func);\r\n    this.nodes.splice(index, 0, node);\r\n  }\r\n\r\n  /**\r\n   * 在目标节点之前插入一个节点\r\n   */\r\n  public appendNode(target: string, name: string, func: TaskFunc) {\r\n    const index = this.findNodeIndex(target) + 1;\r\n    const node = this.createNode(name, func);\r\n    this.nodes.splice(index, 0, node);\r\n  }\r\n\r\n  /**\r\n   * 获取节点索引\r\n   * @param name 名称\r\n   */\r\n  private findNodeIndex(name: string): number {\r\n    return this.nodes.findIndex((node: TaskNode) => {\r\n      return node.name === name;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建任务节点\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  private createNode(name: string, func: TaskFunc): TaskNode {\r\n    const node = new TaskNode(name, func);\r\n    return node;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 链接操作\r\n\r\n  /**\r\n   * 添加链接\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  public addLink(from: string, to: string, condition: string | boolean) {\r\n    const link = this.createLink(from, to, condition);\r\n    this.links.push(link);\r\n  }\r\n\r\n  /**\r\n   * 批量添加链接\r\n   */\r\n  public addLinks(links: TaskLink[]) {\r\n    this.links = this.links.concat(links);\r\n  }\r\n\r\n  /**\r\n   * 创建链接\r\n   */\r\n  private createLink(from: string, to: string, condition: string | boolean) {\r\n    const link = new TaskLink(from, to, condition);\r\n    return link;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 流程控制\r\n  /**\r\n   * 获取下一个节点\r\n   * @param from    源节点名称\r\n   * @param context 上下文\r\n   */\r\n  getNext(from?: string, context?: CommandContext): TaskNode {\r\n    if (!from) {\r\n      return this.nodes.shift();\r\n    }\r\n\r\n    // 符合满足条件的边\r\n    const nextLink = this.links.find((link: TaskLink) => {\r\n      return link.from === from && link.canLink(context);\r\n    });\r\n    if (!nextLink) {\r\n      return;\r\n    }\r\n\r\n    return this.nodes.find((node: TaskNode) => {\r\n      return node.name === nextLink.to;\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region 其他方法\r\n\r\n  /**\r\n   * 克隆任务流\r\n   */\r\n  clone() {\r\n    const taskFlow = new TaskFlow();\r\n    taskFlow.addNodes(this.nodes);\r\n    taskFlow.addLinks(this.links);\r\n    return taskFlow;\r\n  }\r\n\r\n  // #endregion\r\n}\r\n\r\nexport { TaskFlow };\r\n","import { ViewModelContext } from '../view-model/index';\r\nimport { Command } from './command';\r\n\r\n/**\r\n * Command上下文\r\n */\r\nclass CommandContext {\r\n\r\n  /**\r\n   * 命令实例\r\n   */\r\n  command: Command;\r\n\r\n  /**\r\n   * 组件上下文\r\n   */\r\n  viewModelContext: ViewModelContext;\r\n\r\n  /**\r\n   * 执行结果\r\n   */\r\n  results: {[taskName: string]: any} = {};\r\n\r\n  /**\r\n   * 最新的执行结果\r\n   */\r\n  latestResult: any;\r\n\r\n  /**\r\n   * 事件参数\r\n   */\r\n  eventParams: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param command 命令\r\n   * @param viewModelContext 视图模型上下文\r\n   */\r\n  constructor(command: Command, viewModelContext: ViewModelContext) {\r\n    this.command = command;\r\n    this.viewModelContext = viewModelContext;\r\n  }\r\n\r\n}\r\n\r\nexport { CommandContext };\r\n","import { Observable, Subject, BehaviorSubject } from 'rxjs';\r\nimport { concatMap, map, takeLast, take, timeout, throwIfEmpty } from 'rxjs/operators';\r\n\r\nimport { createInjectionToken, Injector } from '../core/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { VariableParseService } from '../variable/index';\r\n\r\nimport { Command, CommandParams, ParamDescriptions } from './command';\r\nimport { CommandContext } from './command_context';\r\nimport { TaskFunc, TaskFlow } from './flow/index';\r\n\r\n\r\n/**\r\n * 命令处理抽象类，所有具体的命令处理类必须继承它，并实现schedule方法。\r\n */\r\nabstract class CommandHandler {\r\n\r\n  /**\r\n   * 任务流程图\r\n   */\r\n  private taskFlow: TaskFlow;\r\n\r\n  /**\r\n   * 上下文\r\n   */\r\n  protected viewModelContext: ViewModelContext;\r\n\r\n  /**\r\n   * 变量解析服务\r\n   */\r\n  protected parseService: VariableParseService;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * 构造执行流程\r\n   */\r\n  abstract schedule();\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(viewModelContext: ViewModelContext) {\r\n    this.viewModelContext = viewModelContext;\r\n    this.parseService = viewModelContext.injector.get(VariableParseService);\r\n    this.taskFlow = new TaskFlow();\r\n\r\n    this.schedule();\r\n  }\r\n\r\n  /**\r\n   * 执行任务\r\n   * @param command 要执行的命令\r\n   * @return 最后一个任务的执行结果\r\n   * @todo：按功能拆分小函数\r\n   */\r\n  public execute(command: Command): Observable<any> {\r\n    const lastTaskResult$ = new Subject();\r\n    const taskFlow = this.taskFlow.clone();\r\n\r\n    // setTimeout暂时不能去掉的原因：\r\n    // 1、树表单加载数据，依赖TreeTableBinding里设置的全局变量，需要延后执行加载时机；\r\n    // 2、关闭前命令需要延迟执行。\r\n    setTimeout(() => {\r\n\r\n      // 1、解析参数\r\n      // 避免解析变量时修改了原始的command\r\n      const { eventParam = null } = {\r\n        ...command\r\n      };\r\n      delete command.eventParam;\r\n      const commandToExecute = JSON.parse(JSON.stringify(command));\r\n      commandToExecute.params = this.parseService.parse(commandToExecute.params, this.viewModelContext);\r\n      command.eventParam = eventParam;\r\n      commandToExecute.eventParam = eventParam;\r\n\r\n      // 2、串联任务流\r\n      const initContext = new CommandContext(commandToExecute, this.viewModelContext);\r\n      initContext.eventParams = command.eventParam || null;\r\n      const context$ = new BehaviorSubject<CommandContext>(initContext);\r\n      let currentTask = taskFlow.getNext('', initContext);\r\n      const highOrder$ = context$.pipe(\r\n        concatMap((context: CommandContext) => {\r\n          const result$ = currentTask.execute(context);\r\n          return result$.pipe(\r\n            take(1),\r\n            map((result: any) => {\r\n\r\n              // 写入执行结果\r\n              context.results[currentTask.name] = result;\r\n              context.latestResult = result;\r\n              currentTask = taskFlow.getNext(currentTask.name, context);\r\n\r\n              // 操作控制流\r\n              if (currentTask) {\r\n                context$.next(context);\r\n              } else {\r\n                context$.complete();\r\n              }\r\n\r\n              // 将结果流转换为context流\r\n              return context;\r\n            }),\r\n            throwIfEmpty(() => {\r\n              context$.complete();\r\n            })\r\n          );\r\n        })\r\n      );\r\n\r\n      // 3、执行合并后的任务流\r\n      highOrder$.pipe(\r\n        takeLast(1)\r\n      ).subscribe({\r\n        next: (context: CommandContext) => {\r\n          lastTaskResult$.next(context.latestResult);\r\n        },\r\n        error: (error: any) => {\r\n          this.displayError(error);\r\n          lastTaskResult$.error(error);\r\n        },\r\n        complete: () => {\r\n          lastTaskResult$.complete();\r\n        },\r\n      });\r\n\r\n    }, 0);\r\n\r\n    return lastTaskResult$;\r\n  }\r\n\r\n  /**\r\n   * 显示错误信息\r\n   */\r\n  private displayError(error: any) {\r\n    if (!error) {\r\n      return;\r\n    }\r\n    if (!console || !console.error) {\r\n      return;\r\n    }\r\n    console.error(error);\r\n  }\r\n\r\n  /**\r\n   * 添加任务，只有子类可以添加任务，外部不能访问\r\n   * @param name  任务名称\r\n   * @param func 任务函数\r\n   */\r\n  protected addTask(name: string, func: TaskFunc) {\r\n    this.taskFlow.addNode(name, func);\r\n  }\r\n\r\n  /**\r\n   * 添加任务，只有子类可以添加任务，外部不能访问\r\n   * @param name  任务名称\r\n   * @param func 任务函数\r\n   */\r\n  protected addLink(from: string, to: string, condition: string | boolean) {\r\n    this.taskFlow.addLink(from, to, condition);\r\n  }\r\n\r\n  /**\r\n   * 插入任务\r\n   * @param  name 要扩展的任务名称\r\n   * @param  func 扩展函数\r\n   */\r\n  public insertTask(target: string, name: string, func: TaskFunc) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 插入任务\r\n   * @param  name 要扩展的任务名称\r\n   * @param  func 扩展函数\r\n   */\r\n  public afterTask(target: string, name: string, func: TaskFunc) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 替换任务\r\n   * @param  name 要替换的任务名称\r\n   * @param  func 替换函数\r\n   */\r\n  public replaceTask(name: string, func: TaskFunc) {\r\n    throw new Error('Not Implement');\r\n  }\r\n\r\n  /**\r\n   * 调用方法\r\n   */\r\n  public invoke(serviceInstance: any, method: string, args: any[], context: CommandContext) {\r\n    this.setContextToServiceInstance(serviceInstance, context);\r\n    const parsedArgs = this.parseService.parse(args, context);\r\n    return serviceInstance[method](...parsedArgs);\r\n  }\r\n\r\n  /**\r\n   * 为服务设置命令上下文\r\n   * @todo\r\n   * 通过这种方式存在很大问题：\r\n   * 1、会覆盖掉已有的context，给开发人员造成困扰和调试成本；\r\n   * 2、服务中依赖了一个没有声明的对象，不符合面向对象的原则。\r\n   * 建议解决方案：\r\n   * 1、将context修改为某个特殊属性名；\r\n   * 2、先检测服务上有没有一个CommandContext类型的context属性，有的话再赋值，\r\n   *    这就要求需要使用context的服务需要是实现一个IContext接口。\r\n   */\r\n  private setContextToServiceInstance(serviceInstance: any, context: CommandContext) {\r\n\r\n    // 如果服务上已经存在context属性，并且该属性不是CommandContext类型，则不能覆盖\r\n    const serviceContext = serviceInstance.context;\r\n    if (serviceContext && (serviceContext instanceof CommandContext === false)) {\r\n      return;\r\n    }\r\n\r\n    serviceInstance.context = context;\r\n  }\r\n}\r\n\r\n/**\r\n * 命令处理器注入Token\r\n */\r\nconst COMMAND_HANDLERS_TOKEN = createInjectionToken('@Farris/devkit COMMAND_HANDLERS_TOKEN');\r\n\r\nexport { CommandHandler, COMMAND_HANDLERS_TOKEN };\r\n","/**\r\n * 命令处理注册器相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\nimport { MetadataUtil, Injector, InjectFlags } from '../core/index';\r\nimport { COMMAND_HANDLER_META, CommandHandlerMetadata } from './decorators';\r\nimport { COMMAND_HANDLERS_TOKEN, CommandHandler } from './command_handler';\r\n\r\n/**\r\n * 命令处理注册器\r\n */\r\nclass CommandHandlerRegistry {\r\n\r\n  /**\r\n   * CommandHandler Map\r\n   */\r\n  private handlerMap: Map<string, CommandHandler>;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param handlers 命令处理实例数组\r\n   */\r\n  constructor(private injector: Injector) {\r\n    const handlers = this.injector.get(COMMAND_HANDLERS_TOKEN, null, InjectFlags.Optional);\r\n    this.handlerMap = new Map<string, CommandHandler>();\r\n    if (handlers) {\r\n      handlers.forEach((handler: CommandHandler) => {\r\n        this.regist(handler);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加命令处理\r\n   * @param  commandName    命令名称\r\n   * @param  commandHandler 命令处理实例\r\n   */\r\n  public set(commandName: string, commandHandler: CommandHandler) {\r\n    if (this.handlerMap.has(commandName)) {\r\n      throw new Error(commandName + '对应的CommandHandler已经存在');\r\n    }\r\n    this.handlerMap.set(commandName, commandHandler);\r\n  }\r\n\r\n  /**\r\n   * 获取命令处理\r\n   * @param   commandName 命令名称\r\n   * @returns 命令处理实例\r\n   */\r\n  public get(commandName: string): CommandHandler {\r\n    if (this.handlerMap.has(commandName) === false) {\r\n      throw new Error('找不到' + commandName + '对应的CommandHandler');\r\n    }\r\n    return this.handlerMap.get(commandName);\r\n  }\r\n\r\n  /**\r\n   * 注册命令处理\r\n   * @param handlers 命令处理实例\r\n   */\r\n  public regist(commandHandler: CommandHandler) {\r\n\r\n    // 根据metadata获取对应的Command名称\r\n    const handlerMetadata: CommandHandlerMetadata =\r\n      MetadataUtil.getClassMetadataByName(commandHandler.constructor, COMMAND_HANDLER_META);\r\n    if (!handlerMetadata) {\r\n      throw new Error('CommandHandler必须指定要处理的命令名称');\r\n    }\r\n    const commandName = handlerMetadata.commandName;\r\n    this.set(commandName, commandHandler);\r\n  }\r\n\r\n}\r\n\r\nexport { CommandHandlerRegistry };\r\n","/**\r\n * 命令处理扩展相关\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\nimport { createInjectionToken, Injector } from '../core/index';\r\nimport { CommandHandler } from './command_handler';\r\n\r\n\r\nabstract class CommandHandlerExtender {\r\n\r\n  /**\r\n   * 扩展方法\r\n   * @param handler 要扩展的命令处理器\r\n   */\r\n  abstract extend(handler: CommandHandler): CommandHandler;\r\n\r\n}\r\n\r\n\r\n/**\r\n * 命令处理器扩展注入Token\r\n */\r\nconst COMMAND_HANDLER_EXTENDERS_TOKEN = createInjectionToken('@farris/devkit COMMAND_HANDLER_EXTENDERS_TOKEN');\r\n\r\nexport { CommandHandlerExtender, COMMAND_HANDLER_EXTENDERS_TOKEN };\r\n","/**\r\n * 命令处理扩展注册器相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { MetadataUtil, Injector, InjectFlags } from '../core/index';\r\nimport { COMMAND_HANDLER_EXTENDER_META, CommandHandlerExtenderMetadata } from './decorators';\r\nimport { COMMAND_HANDLER_EXTENDERS_TOKEN, CommandHandlerExtender } from './command_handler_extender';\r\n\r\n/**\r\n * 命令处理扩展注册器\r\n */\r\nclass CommandHandlerExtenderRegistry {\r\n\r\n  /**\r\n   * CommandHandlerExtender实例Map\r\n   * - key：命令名称\r\n   * - value：命令扩展实例\r\n   */\r\n  private extendersMap: Map<string, CommandHandlerExtender[]>;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param extenders 命令扩展实例数组\r\n   */\r\n  constructor(private injector: Injector) {\r\n    const extenders = this.injector.get(COMMAND_HANDLER_EXTENDERS_TOKEN, null, InjectFlags.Optional);\r\n    this.extendersMap = new Map<string, CommandHandlerExtender[]>();\r\n    if (extenders) {\r\n      extenders.forEach((extender: CommandHandlerExtender) => {\r\n        this.regist(extender);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取命令扩展实例数组\r\n   * @param   commandName 命令名称\r\n   * @returns 命令处理扩展实例数组\r\n   */\r\n  get(commandName: string): CommandHandlerExtender[] {\r\n    if (this.extendersMap.has(commandName) === false) {\r\n      return [];\r\n    }\r\n    return this.extendersMap.get(commandName);\r\n  }\r\n\r\n  /**\r\n   * 添加命令扩展\r\n   * @param commandName Command名称\r\n   * @param extender    CommandHandlerExtender实例\r\n   * @return void\r\n   */\r\n  set(commandName: string, extender: CommandHandlerExtender) {\r\n    if (this.extendersMap.has(commandName)) {\r\n\r\n      // 如果commandName对应的扩展已经存在，则在扩展数组中追加\r\n      this.extendersMap.get(commandName).push(extender);\r\n    } else {\r\n\r\n      // 如果不存在，则创建新的扩展数组，并追加\r\n      this.extendersMap.set(commandName, [extender]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注册命令扩展\r\n   * @param extender CommandHandlerExtender实例\r\n   */\r\n  regist(extender: CommandHandlerExtender) {\r\n\r\n    // 通过元数据获取要扩展的Comamnd名称\r\n    const extenderMetadata: CommandHandlerExtenderMetadata =\r\n      MetadataUtil.getClassMetadataByName(extender.constructor, COMMAND_HANDLER_EXTENDER_META);\r\n    if (!extenderMetadata) {\r\n      throw new Error('CommandHandlerExtender必须指定要扩展的命令名称');\r\n    }\r\n    const commandName = extenderMetadata.commandName;\r\n\r\n    // 添加到Map中\r\n    this.set(commandName, extender);\r\n  }\r\n\r\n}\r\n\r\nexport { CommandHandlerExtenderRegistry };\r\n","/**\r\n * 命令处理器工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { CommandHandler } from './command_handler';\r\nimport { CommandHandlerRegistry } from './command_handler_registry';\r\nimport { CommandHandlerExtender } from './command_handler_extender';\r\nimport { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';\r\n\r\n/**\r\n * 命令处理器工厂\r\n */\r\nclass CommandHandlerFactory {\r\n  /**\r\n   * 构造函数\r\n   * @param handlerRegistry  命令处理注册器\r\n   * @param extenderRegistry 命令处理扩展注册器\r\n   */\r\n  constructor(\r\n    private handlerRegistry: CommandHandlerRegistry,\r\n    private extenderRegistry: CommandHandlerExtenderRegistry,\r\n    private viewModelContext: ViewModelContext\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * 创建命令处理器\r\n   * @param   commandName 命令名称\r\n   * @returns 对应的命令处理器实例\r\n   */\r\n  public create(commandName: string): CommandHandler {\r\n    const rawHandler = this.handlerRegistry.get(commandName);\r\n    rawHandler.init(this.viewModelContext);\r\n    const extenders  = this.extenderRegistry.get(commandName);\r\n\r\n    // 遍历extenders，依次对handler进行扩展\r\n    return extenders.reduce((handler: CommandHandler, extender: CommandHandlerExtender) => {\r\n      return extender.extend(handler);\r\n    }, rawHandler);\r\n  }\r\n\r\n}\r\n\r\nexport { CommandHandlerFactory };\r\n","/**\r\n * CommandBus相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Observable, BehaviorSubject, Subject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Injector } from '../core/index';\r\nimport { Command } from './command';\r\nimport { CommandHandlerFactory } from './command_handler_factory';\r\nimport { CommandHandlerRegistry } from './command_handler_registry';\r\nimport { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';\r\n\r\n\r\n/**\r\n * CommandBus用于派发Command，它接受一个Command实例，查找对应的CommandHandler，并执行。\r\n */\r\nclass CommandBus {\r\n\r\n  /**\r\n   * handler工厂\r\n   */\r\n  private handlerFactory: CommandHandlerFactory;\r\n\r\n  /**\r\n   * 正在执行的命令数量流（请勿使用，后果自负）\r\n   */\r\n  public executingCommandCount$: BehaviorSubject<number>;\r\n\r\n  /**\r\n   * 正在执行的命令数量\r\n   */\r\n  private executingCommands: Command[];\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor(handlerFactory: CommandHandlerFactory) {\r\n    this.handlerFactory = handlerFactory;\r\n    this.executingCommands = [];\r\n    this.executingCommandCount$ = new BehaviorSubject<number>(this.executingCommands.length);\r\n  }\r\n\r\n  /**\r\n   * 派发命令\r\n   * @param command 要派发的命令\r\n   */\r\n  public dispatch(command: Command): Observable<any> {\r\n    const commandResult$ = new Subject();\r\n    this.executeCommand(command).subscribe({\r\n        next: (lastTaskResult: any) => {\r\n          commandResult$.next(lastTaskResult);\r\n          commandResult$.complete();\r\n        },\r\n        complete: () => {\r\n          commandResult$.complete();\r\n          this.removeCommandFromExecutingQueue(command);\r\n        },\r\n        error: (error: any)  => {\r\n          commandResult$.error(error);\r\n          this.removeCommandFromExecutingQueue(command);\r\n        }\r\n      });\r\n    return commandResult$;\r\n  }\r\n\r\n  /**\r\n   * 执行命令并返回最后一个任务的执行结果流\r\n   */\r\n  private executeCommand(command: Command): Observable<any> {\r\n    this.addCommandToExecutingQueue(command);\r\n    const commandName = command.name;\r\n    const handler = this.handlerFactory.create(commandName);\r\n    const lastTaskResult$ = handler.execute(command);\r\n    return lastTaskResult$;\r\n  }\r\n\r\n\r\n  /**\r\n   * 添加到执行队列\r\n   */\r\n  private addCommandToExecutingQueue(command: Command) {\r\n    this.executingCommands.push(command);\r\n    this.executingCommandCount$.next(this.executingCommands.length);\r\n  }\r\n\r\n  /**\r\n   * 从执行队列中移除\r\n   */\r\n  private removeCommandFromExecutingQueue(command: Command) {\r\n    this.executingCommands = this.executingCommands.filter((executingCommand: Command) => {\r\n      return executingCommand !== command;\r\n    });\r\n    this.executingCommandCount$.next(this.executingCommands.length);\r\n  }\r\n\r\n}\r\n\r\nexport { CommandBus };\r\n","import { StaticProvider, Injector } from '../core/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { CommandHandlerRegistry } from './command_handler_registry';\r\nimport { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';\r\nimport { CommandHandlerFactory } from './command_handler_factory';\r\nimport { CommandBus } from './command_bus';\r\n\r\nconst VIEW_MODEL_COMMAND_PROVIDERS: StaticProvider[] = [\r\n  {\r\n    provide: CommandHandlerRegistry,\r\n    useClass: CommandHandlerRegistry,\r\n    deps: [ Injector ]\r\n  },\r\n  {\r\n    provide: CommandHandlerExtenderRegistry,\r\n    useClass: CommandHandlerExtenderRegistry,\r\n    deps: [ Injector ]\r\n  },\r\n  {\r\n    provide: CommandHandlerFactory,\r\n    useClass: CommandHandlerFactory,\r\n    deps: [ CommandHandlerRegistry, CommandHandlerExtenderRegistry, ViewModelContext ]\r\n  },\r\n  {\r\n    provide: CommandBus,\r\n    useClass: CommandBus,\r\n    deps: [ CommandHandlerFactory ]\r\n  }\r\n];\r\n\r\nexport { VIEW_MODEL_COMMAND_PROVIDERS };\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-30 11:08:18 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-01 17:10:04\r\n */\r\n\r\nimport { IExceptionHandler } from './types';\r\nexport const EXCEPTION_HANDLER = '@farris/devkit ExceptionHandler';"],"names":["DataChangeType","InjectFlags","of","switchMap","from","map","ModifyType","DataPathNodeType","DataPropGroup","format","parseISO","isDate","isEqual","compareAsc","ChangeType","ViewChangeType","BindingPropertyType","Subject","tslib_1.__values","BindingPropertyUtil","EntityLoadUtil","Observable","EntityFactory","tslib_1.__extends","BehaviorSubject","BindingType","concatMap","EMPTY","tap","every","take","throwIfEmpty","takeLast"],"mappings":"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"}