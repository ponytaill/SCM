import * as tslib_1 from "tslib";
import { Injectable, ComponentFactoryResolver, ReflectiveInjector, InjectFlags, Injector, Optional } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { FarrisFormService } from './farris-form.service';
import { FrameContext } from '@farris/devkit';
import { of, Subject } from 'rxjs';
import { LanguageService } from './languag.service';
import { switchMap } from 'rxjs/operators';
/**
 * 弹窗服务
 * @scope FormModule
 */
var DialogService = /** @class */ (function () {
    function DialogService(modalService, farrisFormService, _componentFactoryResolver, frameContext, injector) {
        this.modalService = modalService;
        this.farrisFormService = farrisFormService;
        this._componentFactoryResolver = _componentFactoryResolver;
        this.frameContext = frameContext;
        this.injector = injector;
        this._providers = [];
        this.modals = {};
        this.setLanguageService();
    }
    /**
     * 设置语言服务
     */
    DialogService.prototype.setLanguageService = function () {
        // FrameContext不一定存在，不能直接用
        var frameContext = this.getFrameContext();
        if (frameContext) {
            var injector = this.frameContext.injector;
            this.languageService = injector.get(LanguageService, null, InjectFlags.Optional);
        }
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    };
    /**
     * 兼容旧弹窗，获取frameContext
     */
    DialogService.prototype.getFrameContext = function () {
        if (this.frameContext) {
            return this.frameContext;
        }
        if (this['context'] && this['context']['frameContext']) {
            return this['context']['frameContext'];
        }
        return null;
    };
    /**
     * 兼容旧弹窗，获取ComponentFactoryResolver
     */
    DialogService.prototype.getComponentFactoryResolver = function () {
        var frameContext = this.getFrameContext();
        var componentFactoryResolver;
        if (frameContext) {
            componentFactoryResolver = frameContext.injector.get(ComponentFactoryResolver);
        }
        return componentFactoryResolver;
    };
    /**
     * 获取config转换成对象类型的配置
     * @param config 配置项
     */
    DialogService.prototype.getObjectTypeConfig = function (config) {
        var objectTypeConfig;
        if (typeof config === 'string') {
            if (config.length) {
                try {
                    objectTypeConfig = JSON.parse(config);
                }
                catch (_a) {
                    throw new Error(config + '不是合法的json字符串');
                }
            }
            else {
                objectTypeConfig = {};
            }
        }
        else if (typeof config === 'object') {
            objectTypeConfig = Object.assign({}, config);
        }
        else {
            throw new Error('填写对象格式或json字符串');
        }
        return objectTypeConfig;
    };
    /**
     * 创建模态框内组件实例，并返回模态框实例；做了兼容老表单处理
     * @param config 弹窗配置
     * @param compnent 弹窗内组件
     * @param uiStateObject 绑定弹窗内组件uiState
     */
    DialogService.prototype.createModalComponentRef = function (config, component, uiStateObject) {
        var componentRef;
        var modalRef;
        var frameContext = this.getFrameContext();
        var componentFactoryResolver = this.getComponentFactoryResolver();
        if (frameContext && componentFactoryResolver) {
            var contentCmptFactory = componentFactoryResolver.resolveComponentFactory(component);
            var modalContentInjector = ReflectiveInjector.resolveAndCreate(tslib_1.__spread(this._providers), frameContext.injector);
            componentRef = contentCmptFactory.create(modalContentInjector);
            if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {
                if (typeof uiStateObject === 'object' && Object.keys(uiStateObject).length) {
                    Object.keys(uiStateObject).forEach(function (item) {
                        componentRef.instance.viewModel.uiState.setPropertyValue(item, uiStateObject[item]);
                    });
                }
                // 附加isDialog参数
                componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
            }
            modalRef = this.modalService.show(componentRef, config);
        }
        else {
            modalRef = this.modalService.show(component, config);
        }
        return modalRef;
    };
    /**
     *
     * @param config 模态框本身配置
     * @param modalId 模态框内组件的id
     * @param uiStateConfig 模态框内组件uiState上的字段及值
     */
    DialogService.prototype.openModal = function (config, modalId, uiStateConfig, callback) {
        var _this = this;
        if (config === void 0) { config = {}; }
        if (uiStateConfig === void 0) { uiStateConfig = {}; }
        var configObj = this.getObjectTypeConfig(config);
        var uiStateObject = this.getObjectTypeConfig(uiStateConfig);
        var innerCompopnent = this.farrisFormService.getControls(modalId);
        var modalRef;
        var modalConfig = {
            title: this.languageService.defaultDialogTitle,
            width: 760,
            height: 450,
            showButtons: false
        };
        modalConfig = Object.assign(modalConfig, configObj);
        var onClosingHandler = modalConfig.beforeClose;
        // tslint:disable: no-string-literal
        var cancelChanges = modalConfig['cancelChanges'] || false;
        modalConfig.beforeClose = function (ref) {
            // if (ref && ref.modalRef && ref.modalRef.content) {
            //   ref.modalRef.content.isDialogRootComponent = false;
            // }
            if (!!onClosingHandler && typeof onClosingHandler === 'function') {
                return onClosingHandler(ref).pipe(switchMap(function (result) {
                    if (result) {
                        if (cancelChanges) {
                            return _this.cancelChanges(ref);
                        }
                    }
                    return of(result);
                }));
            }
            if (cancelChanges) {
                return _this.cancelChanges(ref);
            }
            else {
                return of(true);
            }
        };
        var remote = modalConfig.remote || false;
        if (remote) {
            this.createRemoteForm(modalConfig, uiStateObject).subscribe(function (modalRef) {
                _this.modalRef = modalRef;
                if (modalRef && !!modalRef.content) {
                    modalRef.content.isDialogRootComponent = true;
                    modalRef.content.dialogRef = modalRef;
                }
                callback(modalRef);
            });
        }
        else {
            if (!innerCompopnent) {
                console.error("\u83B7\u53D6\u63A7\u4EF6\u5931\u8D25\uFF0CmodalId=" + modalId);
                return;
            }
            if (typeof innerCompopnent === 'string') {
                modalConfig.dialogType = 'iframe';
                modalRef = this.modalService.show(innerCompopnent, modalConfig);
            }
            else if (typeof innerCompopnent === 'function') {
                modalRef = this.createModalComponentRef(modalConfig, innerCompopnent, uiStateObject);
            }
            else if (typeof innerCompopnent === 'object') {
                // 如果是对象 且使用独立js加载
                // {"useIsolateJs":true,"modalInstance":f()}
                if (innerCompopnent.useIsolateJs) {
                    var parameter = {
                        injector: this.injector,
                        uiState: uiStateObject,
                        modalService: this.modalService,
                        dialogServiceInstance: this,
                        eventBus: this.frameContext.getVirtualRootFrameContext().eventBus,
                        componentCallback: this.componentModify,
                        modalInstanceCallback: this.modalInstanceCallback
                    };
                    // 会在内部进行
                    return innerCompopnent["modalInstance"](modalConfig, parameter);
                }
                else {
                    modalRef = this.modalService.show(innerCompopnent, modalConfig);
                }
            }
            this.modalRef = modalRef;
            if (modalRef && !!modalRef.content) {
                modalRef.content.isDialogRootComponent = true;
                modalRef.content.dialogRef = modalRef;
            }
            return modalRef;
        }
    };
    DialogService.prototype.componentModify = function (cmpRef, parameter) {
        if (cmpRef && cmpRef.instance && cmpRef.instance.viewModel && cmpRef.instance.viewModel.uiState) {
            if (parameter.uistate && typeof parameter.uistate === "string") {
                parameter.uistate = JSON.parse(parameter.uistate);
            }
            if (typeof parameter.uistate === 'object' && Object.keys(parameter.uistate).length) {
                Object.keys(parameter.uistate).forEach(function (item) {
                    cmpRef.instance.viewModel.uiState.setPropertyValue(item, parameter.uistate[item]);
                });
            }
            // 附加isDialog参数
            cmpRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
        }
    };
    DialogService.prototype.modalInstanceCallback = function (cmpRef, options, parameter) {
        if (parameter && parameter.modalService) {
            var modalRef = parameter.modalService.show(cmpRef, options);
            if (modalRef && !!modalRef.content) {
                modalRef.content.isDialogRootComponent = true;
                modalRef.content.dialogRef = modalRef;
            }
            return modalRef;
        }
    };
    /**
     * 打开类帮助表单
     * @param frameId
     * @param params
     * @param configs
     * @description 弹出表单和弹出远端表单区别为弹出表单需要配置字段映射
     */
    DialogService.prototype.openHelpModal = function (frameId, params, configs) {
        var _this = this;
        var events = this['context']['eventParam'] || {};
        // 卡片场景传递过来的事件是自定义对象，包含event和options。列表场景传递过来的事件参数是普通事件参数，在参数中携带了editor.options
        var event = events.event || events;
        var options = events.options || events.editor && events.editor.options || {};
        var context = events && events.context;
        var subject = new Subject();
        // modalId在两种场景下都需要，用来区分实例
        var _a = options.modalId, modalId = _a === void 0 ? null : _a;
        if (!configs) {
            configs = '{}';
        }
        if (typeof configs === 'string' && configs.length > 0) {
            configs = JSON.parse(configs);
        }
        var _b = configs || {}, _c = _b.remote, remote = _c === void 0 ? false : _c, _d = _b.currentRow, currentRow = _d === void 0 ? false : _d, _e = _b.areaResponse, areaResponse = _e === void 0 ? undefined : _e;
        // 支持areaResponse配置
        if (areaResponse !== undefined && options.areaResponse === undefined) {
            options.areaResponse = areaResponse;
        }
        if (remote) {
            var mapFields_1 = configs.mapFields || {};
            options.remote = remote + '?v=' + new Date().valueOf();
            this.openModal(options, modalId, params, function (dialogRef) {
                // 新增event参数（为了以后调用event中的formControl以适配列表中的智能输入框弹出表单）
                _this.modals[modalId] = { subject: subject, frameId: frameId, mapFields: mapFields_1, dialogRef: dialogRef, currentRow: currentRow, event: event, context: context };
            });
        }
        else {
            var dialogRef = this.openModal(options, modalId, params);
            var mapFields = options.mapFields || {};
            this.modals[modalId] = { subject: subject, frameId: frameId, mapFields: mapFields, dialogRef: dialogRef, currentRow: currentRow, event: event, context: context };
        }
        return subject;
    };
    /**
     * 打开带回调的弹窗
     * @param frameId frameId
     * @param params 参数
     * @param configs 配置
     * @returns
     */
    DialogService.prototype.openCallbackableModal = function (frameId, params, configs) {
        var _this = this;
        if (!configs) {
            configs = '{}';
        }
        if (typeof configs === 'string') {
            configs = JSON.parse(configs);
        }
        var events = this['context'] && this['context']['eventParam'] || {};
        var options = events.options;
        options.showButtons = true;
        options.buttons = [
            {
                text: this.languageService.confirm, cls: 'btn btn-primary', handle: function (event) {
                    var _a = (options || {}).modalId, modalId = _a === void 0 ? null : _a;
                    if (modalId) {
                        var modal = _this.modals[modalId];
                        var _b = modal || {}, _c = _b.subject, subject_1 = _c === void 0 ? null : _c, _d = _b.dialogRef, dialogRef = _d === void 0 ? null : _d, _e = _b.frameId, frameId_1 = _e === void 0 ? null : _e, _f = _b.handle, handle_1 = _f === void 0 ? null : _f, _g = _b.currentRow, currentRow_1 = _g === void 0 ? false : _g;
                        var formCmp = dialogRef.content; // 弹窗表单实例
                        if (!formCmp) {
                            throw new Error('不支持的表单类型');
                        }
                        var selectedItems = [];
                        if (currentRow_1 === true) {
                            var frameComtext = void 0;
                            if (formCmp.context) {
                                frameComtext = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId_1);
                            }
                            else {
                                frameComtext = formCmp.appContext.frameContextManager.getFrameContextById(frameId_1);
                            }
                            if (!frameComtext) {
                                throw new Error("\u65E0\u6548\u7684frameId\uFF1A" + frameId_1 + "\uFF0C\u8BF7\u786E\u8BA4\u547D\u4EE4\u4E2DframeId\u6B63\u786E\u3002");
                            }
                            var bindingList = frameComtext.bindingData.getList();
                            var item = bindingList && bindingList.currentItem && bindingList.currentItem.toJSON();
                            selectedItems = [item];
                        }
                        else {
                            var rows = void 0;
                            // 如果context为空 那么尝试从对应的appcontext读取，主要目的是为了解析表单的弹出
                            if (formCmp.context) {
                                rows = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId_1).uiState.rows || new Map();
                            }
                            else {
                                rows = formCmp.appContext.frameContextManager.getFrameContextById(frameId_1).uiState.rows || new Map();
                            }
                            selectedItems = Array.from(rows.values());
                        }
                        if (typeof handle_1 === 'function') {
                            handle_1(selectedItems);
                        }
                        if (subject_1) {
                            subject_1.next();
                        }
                        dialogRef.close(options);
                    }
                }
            },
            { text: this.languageService.cancel, cls: 'btn', handle: function (event) { return _this.cancel(options); } }
        ];
        var subject = new Subject();
        var _a = options.modalId, modalId = _a === void 0 ? null : _a;
        var _b = configs.remote, remote = _b === void 0 ? null : _b, _c = configs.currentRow, currentRow = _c === void 0 ? false : _c, _d = configs.areaResponse, areaResponse = _d === void 0 ? undefined : _d;
        var handle = options.handle;
        // 支持areaResponse配置
        if (areaResponse !== undefined && options.areaResponse === undefined) {
            options.areaResponse = areaResponse;
        }
        if (remote) {
            options.remote = remote + '?v=' + new Date().valueOf();
            this.openModal(options, modalId, params, function (dialogRef) {
                _this.modals[modalId] = { subject: subject, frameId: frameId, dialogRef: dialogRef, handle: handle, currentRow: currentRow, event: events.event };
            });
        }
        else {
            var dialogRef = this.openModal(options, modalId, params);
            this.modals[modalId] = { subject: subject, frameId: frameId, dialogRef: dialogRef, handle: handle, currentRow: currentRow, event: events.event };
        }
        return subject;
    };
    /**
     * 确认按钮事件
     * @param args
     */
    DialogService.prototype.confirm = function () {
        var _this = this;
        var events = this['context'] && this['context']['eventParam'] || {};
        var _a = (events || {}).modalId, modalId = _a === void 0 ? null : _a;
        if (modalId) {
            var modal = this.modals[modalId];
            var _b = modal || {}, _c = _b.subject, subject = _c === void 0 ? null : _c, _d = _b.dialogRef, dialogRef = _d === void 0 ? null : _d, _e = _b.mapFields, mapFields_2 = _e === void 0 ? {} : _e, _f = _b.frameId, frameId = _f === void 0 ? null : _f, _g = _b.currentRow, currentRow = _g === void 0 ? false : _g, _h = _b.event, event_1 = _h === void 0 ? null : _h, _j = _b.context, context_1 = _j === void 0 ? null : _j;
            var formCmp = dialogRef.content; // 弹窗表单实例
            if (!formCmp) {
                throw new Error('不支持的表单类型');
            }
            // const selectedIds = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.ids;
            var selectedItems_1 = [];
            if (currentRow === true) {
                var frameComtext = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId);
                if (!frameComtext) {
                    throw new Error("\u65E0\u6548\u7684frameId\uFF1A" + frameId + "\uFF0C\u8BF7\u786E\u8BA4\u547D\u4EE4\u4E2DframeId\u6B63\u786E\u3002");
                }
                var bindingList = frameComtext.bindingData.getList();
                var item = bindingList && bindingList.currentItem && bindingList.currentItem.toJSON();
                if (item && Object.keys(item).length > 0) {
                    selectedItems_1 = [item];
                }
            }
            else {
                var rows = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.rows || new Map();
                selectedItems_1 = Array.from(rows.values());
            }
            // 映射字段数据
            // 获取触发弹框的编辑器的字段名称
            var editorField = undefined;
            if (event_1 && event_1.editor && event_1.editor.column) {
                editorField = event_1.editor.column.field;
            }
            if (selectedItems_1 && mapFields_2) {
                Object.keys(mapFields_2).forEach(function (k) {
                    var targetField = mapFields_2[k];
                    var sourceKeyArray = k.split('.').filter(function (p) { return p; }) || [];
                    var targetValue = selectedItems_1.map(function (r) {
                        return sourceKeyArray.reduce(function (target, key) {
                            if (target && (target.hasOwnProperty(key) || target['__proto__'].hasOwnProperty(key))) {
                                return target[key];
                            }
                            else {
                                return '';
                            }
                        }, r);
                    }).join(',');
                    if (targetField) {
                        var bindingPaths_1 = _this.frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; });
                        var targetFields = targetField.split(',').filter(function (p) { return p; });
                        targetFields.forEach(function (target) {
                            if (context_1) {
                                _this.setValueByPath(context_1, target, targetValue);
                            }
                            else {
                                var targetPath = target.split('.');
                                _this.frameContext.bindingData.setValue(bindingPaths_1.concat(targetPath), targetValue, true, true);
                            }
                        });
                    }
                });
            }
            if (subject) {
                subject.next();
            }
            dialogRef.close();
        }
    };
    /**
     * 取消按钮事件
     * @param args
     */
    DialogService.prototype.cancel = function (event) {
        var events = event || this['context'] && this['context']['eventParam'] || {};
        var _a = (events || {}).modalId, modalId = _a === void 0 ? null : _a;
        if (modalId) {
            var modal = this.modals[modalId];
            var _b = modal || {}, _c = _b.subject, subject = _c === void 0 ? null : _c, _d = _b.dialogRef, dialogRef = _d === void 0 ? null : _d;
            if (subject) {
                subject.next();
            }
            if (dialogRef) {
                dialogRef.close();
            }
        }
    };
    /**
     * 取消服务器变更集
     */
    DialogService.prototype.cancelChanges = function (ref) {
        if (ref && ref.modalRef && ref.modalRef.content) {
            var component = ref.modalRef.content;
            if (component && component.context) {
                var repository = component.context.repository || null;
                if (repository) {
                    return repository.cancelChanges().pipe(switchMap(function () { return of(true); }));
                }
            }
        }
        return of(true);
    };
    /**
     * 关闭该弹窗
     */
    DialogService.prototype.closeModal = function () {
        if (this.modalRef) {
            this.modalRef.close();
        }
    };
    /**
     * 创建远程表单实例
     * @param options dialog配置
     * @param uiState uistate
     */
    DialogService.prototype.createRemoteForm = function (options, uiState) {
        var _this = this;
        var remote = options.remote || false;
        var subject = new Subject();
        if (remote) {
            var moduleName_1 = options.moduleName || null;
            System.import(remote).then(function (module) {
                if (!moduleName_1) {
                    moduleName_1 = Object.keys(module).pop();
                }
                var moduleFactory = module[moduleName_1];
                var moduleRef = moduleFactory.create(_this.injector);
                var entryComponent = moduleRef['_bootstrapComponents'][0];
                if (entryComponent) {
                    var compFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(entryComponent);
                    var componentRef_1 = compFactory.create(_this.injector);
                    if (componentRef_1 && componentRef_1.instance && componentRef_1.instance.viewModel && componentRef_1.instance.viewModel.uiState) {
                        if (typeof uiState === 'object' && Object.keys(uiState).length) {
                            Object.keys(uiState).forEach(function (item) {
                                componentRef_1.instance.viewModel.uiState.setPropertyValue(item, uiState[item]);
                            });
                        }
                        // 附加isDialog参数
                        componentRef_1.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
                    }
                    var modalRef = _this.modalService.show(componentRef_1, options);
                    subject.next(modalRef);
                }
                else {
                    throw new Error("\u65E0\u6CD5\u627E\u5230\u5165\u53E3\u8868\u5355\uFF01");
                }
            });
        }
        return subject;
    };
    DialogService.prototype.setValueByPath = function (target, path, value) {
        if (target) {
            var paths = path.split('.');
            if (paths.length <= 1) {
                target[path] = value;
            }
            else {
                paths.slice(0, -1).reduce(function (prev, path) {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    };
    DialogService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DialogService.ctorParameters = function () { return [
        { type: BsModalService },
        { type: FarrisFormService },
        { type: ComponentFactoryResolver },
        { type: FrameContext },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    return DialogService;
}());
export { DialogService };
//# sourceMappingURL=data:application/json;base64,