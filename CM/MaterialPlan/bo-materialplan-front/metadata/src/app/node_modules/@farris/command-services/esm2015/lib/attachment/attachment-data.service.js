import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { tap, switchMap, map } from 'rxjs/operators';
import { FrameContext, BindingPathConverter } from '@farris/devkit';
import { BefDataPathUtil } from '@farris/bef';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { AttachmentUtil } from './attachment.util';
/**
 * 附件调用
 */
class AttachmentDataService {
    constructor(frameContext, loadingService) {
        this.frameContext = frameContext;
        this.loadingService = loadingService;
    }
    /**
     * 实体仓库
     */
    get repository() {
        return this.frameContext.repository;
    }
    /**
     * 绑定数据
     */
    get bindingData() {
        return this.frameContext.bindingData;
    }
    /**
     * 更新附件信息
     */
    updateRow(attachmentInfoFieldPath, attachmentInfo) {
        const restService = this.repository.restService;
        const baseUri = restService.baseUri;
        const updateUri = `${baseUri}/service/updateattachment`;
        const serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
        const body = {
            updateAttachInfo: serverAttachInfo,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            body: body
        };
        this.loadingService.show();
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap((responseInfo) => {
            return this.syncAttachmentInfosToClient();
        }), tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 通过属性名更新附件信息
     * @param attachmentInfoFieldPath 附件字段
     * @param attachmentInfo 附件信息
     */
    updateRowWithPropertyName(attachmentInfoFieldPath, attachmentInfo) {
        const restService = this.repository.restService;
        const baseUri = restService.baseUri;
        const updateUri = `${baseUri}/service/updateattachmentwithproptyname`;
        const serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
        const propertyName = attachmentInfoFieldPath.split('/').filter(p => p).pop();
        const body = {
            updateAttachInfo: serverAttachInfo,
            propertyName,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            body: body
        };
        this.loadingService.show();
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap((responseInfo) => {
            return this.syncAttachmentInfosToClient();
        }), tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 批量创建附件行数据
     */
    updateRows(attachmentInfoFieldPath, attachmentInfos) {
        const restService = this.repository.restService;
        const baseUri = restService.baseUri;
        const updateUri = `${baseUri}/service/batchuploadattachment`;
        const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
        const isRootEntity = serverAttachInfo.NodeCodes.length === 0;
        const body = {
            batchUploadInfo: serverAttachInfo,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            body: body
        };
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap((responseInfo) => {
            return this.appendAttachmentInfosToClient(responseInfo.returnValue, isRootEntity);
        }), tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 批量创建附件行数据
     */
    updateRowsWithConfigs(attachmentInfoFieldPath, attachmentInfos, configs) {
        const restService = this.repository.restService;
        const baseUri = restService.baseUri;
        const updateUri = `${baseUri}/service/batchuploadattachment`;
        const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
        // const isRootEntity = serverAttachInfo.NodeCodes.length === 0;
        const body = {
            batchUploadInfo: serverAttachInfo,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            body: body
        };
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap((responseInfo) => {
            return this.appendAttachmentInfos(responseInfo.returnValue, configs);
        }), tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 根据属性名批量创建附件行数据
     */
    updateRowsWithPropertyName(attachmentInfoFieldPath, attachmentInfos) {
        const restService = this.repository.restService;
        const baseUri = restService.baseUri;
        const updateUri = `${baseUri}/service/batchuploadattachmentwithproptyname`;
        const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
        const isRootEntity = serverAttachInfo.NodeCodes.length === 0;
        const propertyName = attachmentInfoFieldPath.split('/').filter(p => p).pop();
        const body = {
            batchUploadInfo: serverAttachInfo,
            propertyName,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            body: body
        };
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap((responseInfo) => {
            return this.appendAttachmentInfosToClient(responseInfo.returnValue, isRootEntity);
        }), tap(() => {
            this.loadingService.hide();
        }));
    }
    /**
     * 创建服务器端需要的更新信息
     */
    createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo) {
        const attachmentId = attachmentInfo.attachmentId;
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        const nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
        const hiretryIds = BefDataPathUtil.convertToDataIdsForUpdate(parentBindingPathArray, this.bindingData);
        const serverAttachInfo = {
            NodeCodes: nodeCodes,
            HiretryIds: hiretryIds,
            AttachmentIds: [attachmentId],
            AttachmentId: attachmentId
        };
        return serverAttachInfo;
    }
    /**
     * 创建服务器端需要的批量新增附件信息
     */
    createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfo) {
        const attachmentIds = AttachmentUtil.peekAttachmentIds(attachmentInfo);
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        const nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
        const hiretryIds = BefDataPathUtil.convertToDataIdsForAdd(parentBindingPathArray, this.bindingData);
        const serverAttachInfo = {
            NodeCodes: nodeCodes,
            HiretryIds: hiretryIds,
            AttachmentIds: attachmentIds,
            AttachmentId: null
        };
        return serverAttachInfo;
    }
    /**
     * 同步服务器端最新信息到客户端
     * @todo:
     * 1、主对象批量新增时不支持
     */
    syncAttachmentInfosToClient() {
        const rootDataId = this.bindingData.list.currentId;
        return this.repository.updateEntityById(rootDataId);
    }
    /**
     * 追加主表数据到客户端
     */
    appendAttachmentInfosToClient(listData, isRootEntity) {
        if (isRootEntity === true) {
            const entities = this.repository.buildEntities(listData);
            this.repository.entityCollection.addEntities(entities);
            return of(listData);
        }
        else {
            const rootDataId = this.bindingData.list.currentId;
            return this.repository.updateEntityById(rootDataId).pipe(map(() => listData));
        }
    }
    appendAttachmentInfos(listData, keyValues) {
        const entities = this.repository.buildEntities(listData);
        this.repository.entityCollection.addEntities(entities);
        // 更新实体使之产生变更集
        this.updateEntities(entities, keyValues);
        return of(listData);
    }
    updateEntities(entities, keyValues) {
        entities.forEach((entity) => {
            this.updateEntity(entity, keyValues);
        });
    }
    updateEntity(target, keyValues) {
        Object.keys(keyValues).forEach((key) => {
            this.setValueByPath(target, key, keyValues[key]);
        });
    }
    setValueByPath(target, path, value) {
        if (target) {
            const paths = path.split('.');
            if (paths.length <= 1) {
                target[path] = value;
            }
            else {
                paths.slice(0, -1).reduce((prev, path) => {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    }
}
AttachmentDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AttachmentDataService.ctorParameters = () => [
    { type: FrameContext },
    { type: FormLoadingService }
];
export { AttachmentDataService };
//# sourceMappingURL=data:application/json;base64,