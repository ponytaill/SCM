import * as tslib_1 from "tslib";
import { Injectable, Optional } from '@angular/core';
import { of, empty, EMPTY } from 'rxjs';
import { tap, switchMap, concatMap } from 'rxjs/operators';
import { Repository, BindingData, ViewModel, EntityPathConverter } from '@farris/devkit';
import { BefRepositoryUtil } from '@farris/bef';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { FormNotifyService } from '../form-notify.service';
import { LanguageService } from '../languag.service';
import { FormMessageService } from '../form-message.service';
import { FormErrorService } from '../error/form-error.service';
import { CommandService } from '../command-service';
import { FilterConditionService } from '../filter-condition.service';
// tslint:disable: no-string-literal max-line-length
/**
 * 列表仓库服务
 */
var ListDataService = /** @class */ (function () {
    /**
     * 构造
     * @param msgService msgService
     * @param repository repository
     * @param bindingData bindingData
     * @param loadingService loadingService
     * @param languageService languageService
     * @param formNotifyService formNotifyService
     * @param formErrorService formErrorService
     * ! @param viewModel viewModel,vm是后期注入的，老表单获取不到，一定要做非空判断
     * @param filterConditionService filterConditionService
     */
    function ListDataService(msgService, repository, bindingData, loadingService, languageService, formNotifyService, formErrorService, viewModel, filterConditionService) {
        this.msgService = msgService;
        this.repository = repository;
        this.bindingData = bindingData;
        this.loadingService = loadingService;
        this.languageService = languageService;
        this.formNotifyService = formNotifyService;
        this.formErrorService = formErrorService;
        this.viewModel = viewModel;
        this.filterConditionService = filterConditionService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
        // if (!filterConditionService) {
        //   this.filterConditionService = new FilterConditionService();
        // }
    }
    /**
     * 加载
     */
    ListDataService.prototype.load = function (filter, sort) {
        var _this = this;
        // 参数处理
        filter = !filter ? '[]' : filter;
        sort = !sort ? '[]' : sort;
        // 合并过滤条件
        filter = this.mergeFilterConditions(filter);
        // 合并排序条件
        sort = this.mergeSortConditions(sort);
        var loadingTimerId = this.loadingService.showLoadingWithDelay(200);
        var query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), null, null);
        return query$.pipe(tap(function () {
            // 触发远端合计事件
            _this.fireQueryEvent(filter);
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.loadFailed, error);
        }));
    };
    /**
     * 过滤数据
     * @param filter 过滤条件
     * @param sort 排序条件
     */
    ListDataService.prototype.filter = function (filter, sort) {
        var _this = this;
        // 参数处理
        filter = !filter ? '[]' : filter;
        sort = !sort ? '[]' : sort;
        // 合并过滤条件
        filter = this.mergeFilterConditions(filter);
        // 合并排序条件
        sort = this.mergeSortConditions(sort);
        var loadingTimerId = this.loadingService.showLoadingWithDelay(200);
        var query$ = this.repository.filter(JSON.parse(filter), JSON.parse(sort));
        return query$.pipe(tap(function () {
            // 触发远端合计事件
            _this.fireQueryEvent(filter);
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.loadFailed, error);
        }));
    };
    /**
     * 查询
     */
    ListDataService.prototype.query = function (filter, sort, pageSize, pageIndex) {
        var _this = this;
        // 参数处理
        filter = (filter === '') ? '[]' : filter;
        sort = (sort === '') ? '[]' : sort;
        // 合并过滤条件
        filter = this.mergeFilterConditions(filter);
        // 合并排序条件
        sort = this.mergeSortConditions(sort);
        // 执行取数
        var loadingTimerId = this.loadingService.showLoadingWithDelay(5);
        var query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), pageSize, pageIndex);
        return query$.pipe(tap(function () {
            // 触发远端合计事件
            _this.fireQueryEvent(filter);
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.queryFailed, error);
        }));
    };
    ListDataService.prototype.queryChild = function (filter, sort) {
        var _this = this;
        // const isUpdateWithPaging = this.viewModel.frameContext.root.params.get('updateWithPaging') || false;
        // if (isUpdateWithPaging) {
        //   return of(null);
        // }
        // tslint:disable-next-line: max-line-length
        var fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);
        var paths = fullPaths.slice(0, fullPaths.length - 1);
        // debug
        // tslint:disable-next-line: max-line-length
        var bindingPaths = this.viewModel.bindingPath.split('/').filter(function (item) { return item; });
        var bindingData = this.viewModel.bindingData;
        var nodeCode = bindingPaths[bindingPaths.length - 1];
        nodeCode = nodeCode.substr(0, nodeCode.length - 1);
        // 获取上级实体
        var parentPaths = bindingPaths.slice(0, bindingPaths.length - 1);
        var BindingList = bindingData.getValue(parentPaths);
        if (!BindingList) {
            return;
        }
        this.viewModel.frameContext.appContext.params.delete("retrieveing");
        var configPath = "/" + nodeCode;
        var config = this.repository.entityCollection.getPaginationConfigByPath(configPath);
        if (config) {
            var _a = config.pageIndex, pageIndex = _a === void 0 ? 1 : _a, _b = config.pageSize, pageSize = _b === void 0 ? 0 : _b;
            // pageSize = 0表示未分页
            if (pageSize !== 0) {
                this.viewModel.frameContext.appContext.params.set('queryChild', true);
                var request$ = this.repository.queryChild(paths, pageIndex, pageSize);
                return request$.pipe(tap(function () { }, function (error) {
                    _this.formErrorService.exception(_this.languageService.queryFailed, error);
                }));
            }
        }
    };
    /**
     * 获取分页信息
     * @param nodeCode nodeCode
     * @returns 分页信息，包括：分页大小、当前页码
     * @description 基本分页信息在分页信息中存储时key为nodeCode
     */
    /*private getPagingInfo(nodeCode: string) {
      const result: { pageIndex?: number, pageSize?: number } = {};
      const nodeCodePath = `/${nodeCode}`;
      const defaultPagingInfo = this.repository.entityCollection.getPaginationConfigByPath(nodeCodePath);
      const pageSize = defaultPagingInfo && defaultPagingInfo.pageSize || 0;
      const pageIndex = defaultPagingInfo && defaultPagingInfo.pageIndex || 1;
      result.pageIndex = pageIndex;
      result.pageSize = pageSize;
      return result;
    }*/
    /**
     * 追加一条新数据
     */
    ListDataService.prototype.append = function () {
        var _this = this;
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'append' });
        }
        var append$ = this.repository.append();
        return append$.pipe(tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.appendFailed, error);
        }));
    };
    /**
     * 当前行前或后插入数据
     * @param position 1 | -1
     */
    ListDataService.prototype.insert = function (position) {
        var _this = this;
        if (position === void 0) { position = -1; }
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'insert' });
        }
        var append$ = this.repository.insert(position);
        return append$.pipe(tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.appendFailed, error);
        }));
    };
    /**
     * 提交变更（批量编辑页面，行切换时提交增量）
     */
    ListDataService.prototype.updateChanges = function () {
        var update$ = this.repository.updateAllChanges();
        return update$;
    };
    /**
     * 批量保存
     * @param successMsg 自定义提示信息
     */
    ListDataService.prototype.save = function (successMsg) {
        var _this = this;
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'save' });
        }
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var save$ = this.repository.applyChanges();
        var result$ = save$.pipe(tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            if (successMsg && successMsg.trim()) {
                _this.formNotifyService.success(successMsg, { hideTitle: true });
            }
            else {
                _this.formNotifyService.success(_this.languageService.saveSuccess, { hideTitle: true });
            }
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.multiSaveFailed, error);
        }));
        return result$;
    };
    /**
     * 删除
     * @param id 要删除的数据的id
     * @param ifSave 是否保存
     * @param successMsg 自定义提示信息
     * @param confirm 是否需要确认
     * @param breakable 是否可中断，ifSave为false时流会中断
     */
    ListDataService.prototype.remove = function (id, ifSave, successMsg, confirm, breakable) {
        var _this = this;
        if (confirm === void 0) { confirm = true; }
        if (breakable === void 0) { breakable = true; }
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'delete' });
        }
        if (!id) {
            this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return empty();
        }
        confirm = (confirm === false || confirm === 'false') ? false : true;
        breakable = (breakable === false || breakable === 'false') ? false : true;
        var action$ = confirm ? this.msgService.question(this.languageService.confirmDeletion) : of(true);
        return action$.pipe(concatMap(function (result) {
            if (!result) {
                return empty();
            }
            ifSave = (ifSave === false || ifSave === 'false') ? false : true;
            var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
            var remove$ = _this.repository.removeById(id, ifSave);
            if (!remove$) {
                return empty();
            }
            return remove$.pipe(tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    _this.formNotifyService.success(successMsg, { hideTitle: true });
                }
                else {
                    _this.formNotifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                }
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.deleteFailed, error);
            }), switchMap(function () {
                if (ifSave === true || !breakable) {
                    // return this.load();
                    return of([]);
                }
                else {
                    return empty();
                }
            }));
        }));
    };
    /**
     * 批量删除
     * @param ids ids
     * @param ifSave 是否保存
     * @param successMsg 自定义提示信息
     * @param deleteCurrentRowIfNoChecks 没有勾选时删除当前行
     */
    ListDataService.prototype.removeRows = function (ids, ifSave, successMsg, deleteCurrentRowIfNoChecks) {
        var _this = this;
        if (deleteCurrentRowIfNoChecks === void 0) { deleteCurrentRowIfNoChecks = false; }
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'removeRows' });
        }
        deleteCurrentRowIfNoChecks = (deleteCurrentRowIfNoChecks === 'true' || deleteCurrentRowIfNoChecks === true) ? true : false;
        if (!ids || ids.length === 0) {
            var currentId = this.bindingData.list.currentId;
            if (deleteCurrentRowIfNoChecks === true && currentId) {
                ids = [this.bindingData.list.currentId];
            }
            else {
                this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
                return empty();
            }
        }
        var action$ = this.msgService.confirm(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(function (result) {
            if (!result) {
                return empty();
            }
            if (typeof ifSave === 'undefined') {
                ifSave = true;
            }
            if (typeof ifSave === 'string') {
                ifSave = ifSave.toLowerCase() === 'false' ? false : true;
            }
            ifSave = (ifSave === false) ? false : true;
            var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
            var remove$ = _this.repository.removeByIds(ids, ifSave);
            if (!remove$) {
                return empty();
            }
            return remove$.pipe(tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    _this.formNotifyService.success(successMsg, { hideTitle: true });
                }
                else {
                    _this.formNotifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.deleteFailed, error);
            }), switchMap(function () {
                return of([]);
            }));
        }));
    };
    /**
     * 删除后的刷新
     */
    ListDataService.prototype.refreshAfterRemoving = function (loadCmdName, loadCmdFrameId) {
        if (this.viewModel && loadCmdName && loadCmdFrameId) {
            var commandService = this.viewModel.frameContext.injector.get(CommandService, null);
            return commandService.execute(loadCmdName, loadCmdFrameId);
        }
        return this.load();
    };
    /**
     * 刷新
     * @param loadCmdName 刷新命令
     * @param loadCmdFrameId 刷新命令所在的frameId
     */
    ListDataService.prototype.refresh = function (loadCmdName, loadCmdFrameId) {
        if (this.viewModel && loadCmdName && loadCmdFrameId) {
            var commandService = this.viewModel.frameContext.injector.get(CommandService, null);
            return commandService.execute(loadCmdName, loadCmdFrameId);
        }
        return this.load();
    };
    /**
     * 取消时检测未保存记录
     */
    ListDataService.prototype.cancel = function () {
        var _this = this;
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'cancel' });
        }
        // 没有变更时直接取消
        var befRepository = this.repository;
        var hasUnsavedData = BefRepositoryUtil.isExistUnsaveData(befRepository);
        if (hasUnsavedData === false) {
            return this._cancel();
        }
        var confirmResult$ = this.msgService.question(this.languageService['cancelWithoutSave']).pipe(switchMap(function (ifCancel) {
            if (ifCancel === false) {
                return EMPTY;
            }
            return _this._cancel();
        }));
        return confirmResult$;
    };
    /**
     * 还原变更集
     * @description 不带变更检测提示
     */
    ListDataService.prototype.revert = function () {
        return this._cancel();
    };
    /**
     * 取消（内部取消）
     */
    ListDataService.prototype._cancel = function () {
        var _this = this;
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var cancel$ = this.repository.cancelChanges();
        return cancel$.pipe(tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.cancelFailed, error);
        }));
    };
    Object.defineProperty(ListDataService.prototype, "messagePipe", {
        /**
         * 获取根组件appContext
         */
        get: function () {
            if (this.viewModel && this.viewModel.frameContext) {
                var appContext = this.viewModel.frameContext.getFormAppContext() || null;
                if (appContext) {
                    return appContext.messagePipe || null;
                }
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 触发查询事件
     * @param filters 过滤条件
     */
    ListDataService.prototype.fireQueryEvent = function (filters) {
        var messagePipe = this.messagePipe;
        // const frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId || null;
        if (messagePipe) {
            messagePipe.next({ type: 'query' });
        }
    };
    /**
     * 合并过滤条件
     * @param filter 表单过滤条件
     */
    ListDataService.prototype.mergeFilterConditions = function (filter) {
        if (typeof filter === 'string') {
            filter = JSON.parse(filter) || [];
        }
        var filters = filter;
        var bindingPath = this.viewModel && this.viewModel.bindingPath || null;
        if (bindingPath) {
            var originalConditions = this.viewModel && this.viewModel.frameContext.repository.filterConditionManager.getFilters(bindingPath) || [];
            // this.filterConditionService.getFilters(bindingPath) || [];
            var conditions = Array.from(originalConditions);
            if (conditions && conditions.length > 0) {
                /*filters.forEach((item: any, index: number) => {
                  const field = item.FilterField || null;
                  if (field) {
                    const duplicateIndex = conditions.findIndex(condition => condition.FilterField === field);
                    if (duplicateIndex !== -1) {
                      filters[index] = conditions[duplicateIndex];
                      conditions.splice(duplicateIndex, 1);
                    }
                  }
                });*/
                // 修改命令上过滤条件的最后一个查询关系为and
                if (filters.length > 0) {
                    // 最后一个过滤条件
                    var lastFilter = filters[filters.length - 1];
                    if (lastFilter) {
                        if (lastFilter.hasOwnProperty('Relation')) {
                            delete lastFilter.Relation;
                        }
                        lastFilter.relation = 1;
                    }
                }
                // 合并新的过滤条件和原来命令上的过滤条件
                filters.push.apply(filters, tslib_1.__spread(conditions));
            }
        }
        return JSON.stringify(filters);
    };
    /**
     * 合并排序条件
     * @param sort 排序条件
     */
    ListDataService.prototype.mergeSortConditions = function (sort) {
        if (typeof sort === 'string') {
            sort = JSON.parse(sort) || [];
        }
        var sorts = sort;
        var bindingPath = this.viewModel && this.viewModel.bindingPath || null;
        if (bindingPath) {
            // 获取当前绑定路径的所有排序条件
            var originalConditions = this.viewModel && this.viewModel.frameContext.repository.sortConditionManager.getConditionsByBindingPath(bindingPath, function (direction) {
                if (direction === 'asc') {
                    return 0;
                }
                else {
                    return 1;
                }
            }) || [];
            var conditions = Array.from(originalConditions);
            // 如果当前绑定路径有排序条件，则忽略命令上预制的排序条件
            if (conditions && conditions.length > 0) {
                // 遍历已有的过滤条件，如果有重复的field，用后者的覆盖已有的
                /*sorts.forEach((item: any, index: number) => {
                  const field = item.SortField || null;
                  if (field) {
                    const duplicateIndex = conditions.findIndex(condition => condition.SortField === field);
                    if (duplicateIndex !== -1) {
                      sorts[index] = conditions[duplicateIndex];
                      conditions.splice(duplicateIndex, 1);
                    }
                  }
                });*/
                return JSON.stringify(conditions);
                // 将其余排序条件添加到排序数组
                // sorts.push(...conditions);
            }
        }
        return JSON.stringify(sorts);
    };
    ListDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ListDataService.ctorParameters = function () { return [
        { type: FormMessageService },
        { type: Repository },
        { type: BindingData },
        { type: FormLoadingService },
        { type: LanguageService, decorators: [{ type: Optional }] },
        { type: FormNotifyService },
        { type: FormErrorService },
        { type: ViewModel },
        { type: FilterConditionService }
    ]; };
    return ListDataService;
}());
export { ListDataService };
//# sourceMappingURL=data:application/json;base64,