/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LocaleService } from '@farris/ui-locale';
import { Component, Input, ComponentFactoryResolver, Injector, ApplicationRef, Renderer2, ViewChild, ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { delay, filter } from 'rxjs/operators';
import ResizeObserver from 'resize-observer-polyfill';
import { ColumnFilterType } from '@farris/ui-datagrid';
import { FilterOperator, TextFilterOperators, NumberOrDateFilterOperators, FilterConditionValue, } from './../operations/operators';
import { FilterRowPanelComponent } from './filter-row-panel.component';
import { DatagridFilterRowService } from '../datagrid-filter-row.service';
import { FilterRowEditorComponent } from './filter-row-editor.component';
export class FilterTextboxComponent extends FilterRowEditorComponent {
    /**
     * @param {?} cfr
     * @param {?} injector
     * @param {?} app
     * @param {?} dfrs
     * @param {?} render
     * @param {?} cd
     * @param {?} localSer
     */
    constructor(cfr, injector, app, dfrs, render, cd, localSer) {
        super();
        this.cfr = cfr;
        this.injector = injector;
        this.app = app;
        this.dfrs = dfrs;
        this.render = render;
        this.cd = cd;
        this.localSer = localSer;
        this.disabled = false;
        this.delay = 300;
        this.filterStr = '';
        this.filterPanelSubscription = null;
        this.ro = null;
        this.zone = null;
        this.el = null;
        this.zone = this.injector.get(NgZone);
        this.el = this.injector.get(ElementRef);
        this.dfrs.filterTextboxChanged.pipe(filter((/**
         * @param {?} v
         * @return {?}
         */
        v => v[this.column.field] !== undefined)), delay(this.delay)).subscribe((/**
         * @param {?} obj
         * @return {?}
         */
        (obj) => {
            /** @type {?} */
            const val = obj[this.column.field];
            if (val !== '') {
                /** @type {?} */
                const _condition = { operator1: FilterOperator.Contains, value1: val };
                if (this.column.filter.type === ColumnFilterType.number) {
                    _condition.operator1 = FilterOperator.Equal;
                }
                this.dfrs.updateColumnConditions(this.column.field, _condition);
            }
            else {
                this.dfrs.updateColumnConditions(this.column.field, FilterConditionValue.All);
            }
        }));
        this.dfrs.removeField.subscribe((/**
         * @param {?} f
         * @return {?}
         */
        f => {
            if (f === this.column.field) {
                this.clearValue();
            }
        }));
    }
    /**
     * @return {?}
     */
    get inputType() {
        if (this.column.filter.type === ColumnFilterType.number) {
            return 'number';
        }
        return 'text';
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.ro) {
            this.ro.disconnect();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    show(event) {
        this.close();
        event.stopPropagation();
        /** @type {?} */
        const dgContainerEle = ((/** @type {?} */ (event.target))).closest('.f-datagrid');
        if (dgContainerEle) {
            dgContainerEle.addEventListener('click', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.close();
            }));
        }
        if (!this.dfrs.gridInstance) {
            this.dfrs.gridInstance = this.gridInstance;
        }
        /** @type {?} */
        const cf = this.cfr.resolveComponentFactory(FilterRowPanelComponent);
        this.filterPanelRef = cf.create(this.injector);
        this.app.attachView(this.filterPanelRef.hostView);
        this.filterPanelRef.instance.column = this.column;
        this.filterPanelRef.instance.gridInstance = this.gridInstance;
        this.initOperators(this.filterPanelRef.instance);
        if (this.column.filter !== false && this.column.filter !== undefined) {
            this.filterPanelRef.instance.datatype = this.column.filter.type;
            if (this.column.filter.type === ColumnFilterType.enum ||
                this.column.filter.type === ColumnFilterType.fromdata) {
                this.filterPanelRef.instance.height = 300;
            }
        }
        /** @type {?} */
        const currentColumnCondition = this.dfrs.columnConditions[this.column.field];
        if (currentColumnCondition) {
            this.filterPanelRef.instance.condition = (/** @type {?} */ (currentColumnCondition));
        }
        else {
            this.filterPanelRef.instance.condition = {
                operator1: 0,
                value1: '',
                relation: '',
                operator2: 0,
                value2: ''
            };
            // this.initOperators(this.filterPanelRef.instance);
        }
        this.filterPanelSubscription = this.filterPanelRef.instance.conditionChange.subscribe((/**
         * @param {?} condition
         * @return {?}
         */
        (condition) => {
            if (condition) {
                this.dfrs.updateColumnConditions(this.column.field, condition);
                this.filterStr = this.dfrs.condition2string(this.column, condition);
                if (this.column.filter.type < 2) {
                    this.disabled = !!this.filterStr;
                }
                this.cd.detectChanges();
            }
            else {
                this.clearValue();
                this.dfrs.updateColumnConditions(this.column.field, FilterConditionValue.All);
            }
        }));
        document.body.appendChild(this.filterPanelRef.location.nativeElement);
        document.body.style.overflow = 'hidden';
        this.updateFilterPanelPosition(event.target);
        this.dfrs.setFilterPanel(this.filterPanelRef);
        const { width: dgWidth, height: dgHeight } = dgContainerEle.getBoundingClientRect();
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.ro = new ResizeObserver((/**
             * @param {?} entries
             * @param {?} observer
             * @return {?}
             */
            (entries, observer) => {
                const { width, height } = entries[0].target.getBoundingClientRect();
                if (width !== dgWidth || height !== dgHeight) {
                    this.close();
                }
            }));
            this.ro.observe(dgContainerEle);
        }));
        this.filterPanelRef.instance.target = event;
        this.filterPanelRef.changeDetectorRef.markForCheck();
        this.filterPanelRef.changeDetectorRef.detectChanges();
    }
    /**
     * @return {?}
     */
    close() {
        this.dfrs.closeFilterPanel();
        if (this.filterPanelSubscription) {
            this.filterPanelSubscription.unsubscribe();
            this.filterPanelSubscription = null;
        }
    }
    /**
     * @private
     * @param {?} ins
     * @return {?}
     */
    initOperators(ins) {
        if (this.column.filter.type === ColumnFilterType.string) {
            ins.operators = TextFilterOperators;
            ins.condition.operator1 = FilterOperator.Contains;
            ins.condition.operator2 = FilterOperator.Contains;
        }
        else if (this.column.filter.type === ColumnFilterType.number || this.column.filter.type === ColumnFilterType.datetime
            || this.column.filter.type === ColumnFilterType.date || this.column.filter.type === ColumnFilterType.time) {
            ins.operators = NumberOrDateFilterOperators;
            ins.condition.operator1 = FilterOperator.Equal;
            ins.condition.operator2 = FilterOperator.Equal;
        }
        if (ins.operators) {
            ins.operators.forEach((/**
             * @param {?} o
             * @return {?}
             */
            o => {
                o.label = this.dfrs.getOperatorLabel(o.code);
            }));
        }
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    updateFilterPanelPosition(target) {
        if (target) {
            /** @type {?} */
            const filterIconParent = target.parentElement;
            if (filterIconParent) {
                /** @type {?} */
                const pos = filterIconParent.getBoundingClientRect();
                /** @type {?} */
                const tr = target.closest('tr');
                /** @type {?} */
                const td = target.closest('td');
                /** @type {?} */
                const headerPos = target.closest('.f-datagrid-header').getBoundingClientRect();
                /** @type {?} */
                const panelWidth = this.filterPanelRef.instance.width;
                /** @type {?} */
                let left = pos.left;
                if (headerPos.width + headerPos.x < pos.x + panelWidth) { // this.column.filter.type === ColumnFilterType.enum
                    left = td.getBoundingClientRect().left + td.offsetWidth - panelWidth;
                    this.filterPanelRef.location.nativeElement.querySelector('.panel-icon').style.left = `${panelWidth - 40}px`;
                }
                // const top = pos.top
                /** @type {?} */
                const panel = this.filterPanelRef.location.nativeElement.querySelector('div');
                if (panel) {
                    this.render.setStyle(panel, 'top', `${pos.top}px`);
                    this.render.setStyle(panel, 'left', `${left}px`);
                }
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTextValueChange($event) {
        /** @type {?} */
        const value = $event.target.value;
        this.dfrs.filterTextboxChanged.emit({ [this.column.field]: value });
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.filterStr = '';
        if (this.input) {
            this.input.nativeElement.value = '';
        }
        if (this.column.filter.type < 2) {
            this.disabled = false;
        }
        this.cd.detectChanges();
    }
    /**
     * @param {?} condition
     * @return {?}
     */
    initFilter(condition) {
        this.filterStr = this.dfrs.condition2string(this.column, condition);
        this.disabled = !!this.filterStr;
        this.dfrs._updateColumnConditions(this.column.field, condition);
        this.cd.detectChanges();
    }
}
FilterTextboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-textbox',
                template: `
    <div class="f-datagrid-header-cell-content f-datagrid-filter-cell d-flex" style="padding-right: 5px">
        <div class="f-datagrid-cell-formgroup farris-group-auto flex-fill">
            <input *ngIf="!disabled" class="form-control" [attr.type]="inputType" [value]="filterStr"
                (input)="onTextValueChange($event)" #input>
            <input *ngIf="disabled" class="form-control" type="text" [value]="filterStr"
            [attr.title]="filterStr" [disabled]="disabled" [class.filter-editor-disabled]="disabled" >
        </div>
        <div style="min-width: 26px; text-align: center; align-items: center;
            display: flex; justify-content: center;" *ngIf="column.filter.enableOperator">
            <span style="cursor: pointer;" class="f-icon f-icon-filter-sm" (click)="show($event)"></span>
        </div>
    </div>
    `
            }] }
];
/** @nocollapse */
FilterTextboxComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ApplicationRef },
    { type: DatagridFilterRowService },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: LocaleService }
];
FilterTextboxComponent.propDecorators = {
    column: [{ type: Input }],
    disabled: [{ type: Input }],
    delay: [{ type: Input }],
    input: [{ type: ViewChild, args: ['input',] }]
};
if (false) {
    /** @type {?} */
    FilterTextboxComponent.prototype.column;
    /** @type {?} */
    FilterTextboxComponent.prototype.disabled;
    /** @type {?} */
    FilterTextboxComponent.prototype.delay;
    /** @type {?} */
    FilterTextboxComponent.prototype.filterStr;
    /** @type {?} */
    FilterTextboxComponent.prototype.gridInstance;
    /** @type {?} */
    FilterTextboxComponent.prototype.filterPanelRef;
    /** @type {?} */
    FilterTextboxComponent.prototype.filterPanelSubscription;
    /** @type {?} */
    FilterTextboxComponent.prototype.input;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.app;
    /** @type {?} */
    FilterTextboxComponent.prototype.dfrs;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.localSer;
}
//# sourceMappingURL=data:application/json;base64,