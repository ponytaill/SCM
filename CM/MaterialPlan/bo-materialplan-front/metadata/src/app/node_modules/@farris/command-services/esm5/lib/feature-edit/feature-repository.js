import { Injectable, Injector } from "@angular/core";
import { Repository } from '@farris/devkit';
var FeatureRepository = /** @class */ (function () {
    function FeatureRepository(injector, repository) {
        this.injector = injector;
        this.repository = repository;
    }
    /**
     * 根据物料id获取物料特征项及特征值（公共默认值）
     * @param materialId 物料id
     */
    FeatureRepository.prototype.getFeaturesByMaterialId = function (materialId) {
        var url = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/getmaterialprops';
        var body = {
            materialID: materialId
        };
        var options = {
            body: body
        };
        var befRepository = this.repository;
        return befRepository.proxy.request(url, 'put', null, options);
    };
    /**
     * 根据物料id及物料特征保存后的hash获取该物料已经存储的特征项值
     * @param materialId 物料Id
     * @param configID 对应该物料的特征项hash
     * @returns
     */
    FeatureRepository.prototype.getConfigedValueByFeatureId = function (materialId, configID, configType) {
        if (configType === void 0) { configType = 'Materials'; }
        var url = '/api/bf/df/v1.0/charactconfigservice/service/getcharactconfiginfo';
        var body = { objType: configType, objID: materialId, configID: configID };
        var befRepository = this.repository;
        var options = {
            body: body
        };
        return befRepository.proxy.request(url, 'put', null, options);
    };
    /**
     * 保存物料特征项
     * @param materialId 物料id
     * @param charactValue 特征值
     * @param configType 配置类型
     * @returns
     */
    FeatureRepository.prototype.applyFeatures = function (materialId, charactValue, configType) {
        if (configType === void 0) { configType = 'Materials'; }
        var body = { objType: configType, objID: materialId, charactValue: charactValue };
        var befRepository = this.repository;
        var options = {
            body: body
        };
        return befRepository.proxy.request('/api/bf/df/v1.0/charactconfigservice/service/matchcharactconfigid', 'put', null, options);
    };
    /**
     * 获取帮助信息
     * @param helpid 帮助id
     * @param filter 过滤条件
     * @param params 参数
     * @returns
     */
    FeatureRepository.prototype.getHelpInfo = function (helpid, filter, params) {
        var url = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata';
        var httpParams = {};
        if (params) {
            if (params.pageIndex) {
                httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);
            }
            if (params.pageSize) {
                httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);
            }
            if (params.condition) {
                httpParams['condition'] = JSON.stringify(params.condition);
            }
            if (params.searchValue) {
                httpParams['search'] = params.searchValue;
            }
        }
        var body = {
            helpID: helpid,
            queryParam: JSON.stringify(httpParams),
            filterStr: filter
        };
        var befRepository = this.repository;
        var options = {
            body: body
        };
        return befRepository.proxy.request(url, 'put', null, options);
    };
    FeatureRepository.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FeatureRepository.ctorParameters = function () { return [
        { type: Injector },
        { type: Repository }
    ]; };
    return FeatureRepository;
}());
export { FeatureRepository };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZS1yZXBvc2l0b3J5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2ZlYXR1cmUtZWRpdC9mZWF0dXJlLXJlcG9zaXRvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSzVDO0lBRUUsMkJBQ1UsUUFBa0IsRUFDbEIsVUFBMkI7UUFEM0IsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixlQUFVLEdBQVYsVUFBVSxDQUFpQjtJQUNqQyxDQUFDO0lBQ0w7OztPQUdHO0lBQ0ksbURBQXVCLEdBQTlCLFVBQStCLFVBQWtCO1FBQy9DLElBQU0sR0FBRyxHQUFHLG1FQUFtRSxDQUFDO1FBQ2hGLElBQU0sSUFBSSxHQUFHO1lBQ1gsVUFBVSxFQUFFLFVBQVU7U0FDdkIsQ0FBQztRQUNGLElBQU0sT0FBTyxHQUFHO1lBQ2QsSUFBSSxNQUFBO1NBQ0wsQ0FBQztRQUNGLElBQU0sYUFBYSxHQUF1QixJQUFJLENBQUMsVUFBZ0MsQ0FBQztRQUNoRixPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFDRDs7Ozs7T0FLRztJQUNJLHVEQUEyQixHQUFsQyxVQUFtQyxVQUFrQixFQUFFLFFBQWdCLEVBQUUsVUFBZ0M7UUFBaEMsMkJBQUEsRUFBQSx3QkFBZ0M7UUFDdkcsSUFBTSxHQUFHLEdBQUcsbUVBQW1FLENBQUM7UUFDaEYsSUFBTSxJQUFJLEdBQUcsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsUUFBUSxVQUFBLEVBQUUsQ0FBQztRQUNsRSxJQUFNLGFBQWEsR0FBdUIsSUFBSSxDQUFDLFVBQWdDLENBQUM7UUFDaEYsSUFBTSxPQUFPLEdBQUc7WUFDZCxJQUFJLE1BQUE7U0FDTCxDQUFDO1FBQ0YsT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBQ0kseUNBQWEsR0FBcEIsVUFBcUIsVUFBa0IsRUFBRSxZQUFpQixFQUFFLFVBQWdDO1FBQWhDLDJCQUFBLEVBQUEsd0JBQWdDO1FBQzFGLElBQU0sSUFBSSxHQUFHLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFlBQVksY0FBQSxFQUFFLENBQUM7UUFDdEUsSUFBTSxhQUFhLEdBQXVCLElBQUksQ0FBQyxVQUFnQyxDQUFDO1FBQ2hGLElBQU0sT0FBTyxHQUFHO1lBQ2QsSUFBSSxNQUFBO1NBQ0wsQ0FBQztRQUNGLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsbUVBQW1FLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoSSxDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBQ0ksdUNBQVcsR0FBbEIsVUFBbUIsTUFBYyxFQUFFLE1BQWMsRUFBRSxNQUFXO1FBQzVELElBQU0sR0FBRyxHQUFHLDhEQUE4RCxDQUFDO1FBQzNFLElBQU0sVUFBVSxHQUFRLEVBQUUsQ0FBQztRQUMzQixJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDcEIsVUFBVSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNoRTtZQUNELElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRTtnQkFDbkIsVUFBVSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUM5RDtZQUNELElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDcEIsVUFBVSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQzVEO1lBQ0QsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFO2dCQUN0QixVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQzthQUMzQztTQUNGO1FBQ0QsSUFBTSxJQUFJLEdBQUc7WUFDWCxNQUFNLEVBQUUsTUFBTTtZQUNkLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztZQUN0QyxTQUFTLEVBQUUsTUFBTTtTQUNsQixDQUFDO1FBQ0YsSUFBTSxhQUFhLEdBQXVCLElBQUksQ0FBQyxVQUFnQyxDQUFDO1FBQ2hGLElBQU0sT0FBTyxHQUFHO1lBQ2QsSUFBSSxNQUFBO1NBQ0wsQ0FBQztRQUNGLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEUsQ0FBQzs7Z0JBckZGLFVBQVU7Ozs7Z0JBUFUsUUFBUTtnQkFFcEIsVUFBVTs7SUEyRm5CLHdCQUFDO0NBQUEsQUF0RkQsSUFzRkM7U0FyRlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQmVmUmVwb3NpdG9yeSwgUmVzcG9uc2VJbmZvIH0gZnJvbSBcIkBmYXJyaXMvYmVmXCI7XG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBtYXAgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcbmltcG9ydCB7IFByb3AgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRmVhdHVyZVJlcG9zaXRvcnkge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBwcml2YXRlIHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8YW55PixcbiAgKSB7IH1cbiAgLyoqXG4gICAqIOagueaNrueJqeaWmWlk6I635Y+W54mp5paZ54m55b6B6aG55Y+K54m55b6B5YC877yI5YWs5YWx6buY6K6k5YC877yJXG4gICAqIEBwYXJhbSBtYXRlcmlhbElkIOeJqeaWmWlkXG4gICAqL1xuICBwdWJsaWMgZ2V0RmVhdHVyZXNCeU1hdGVyaWFsSWQobWF0ZXJpYWxJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxSZXNwb25zZUluZm8+IHtcbiAgICBjb25zdCB1cmwgPSAnL2FwaS9zY20vc2NtZm5kL3YxLjAvc2NtY29tbW9uY21wc2VydmljZS9zZXJ2aWNlL2dldG1hdGVyaWFscHJvcHMnO1xuICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICBtYXRlcmlhbElEOiBtYXRlcmlhbElkXG4gICAgfTtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgYm9keVxuICAgIH07XG4gICAgY29uc3QgYmVmUmVwb3NpdG9yeTogQmVmUmVwb3NpdG9yeTxhbnk+ID0gdGhpcy5yZXBvc2l0b3J5IGFzIEJlZlJlcG9zaXRvcnk8YW55PjtcbiAgICByZXR1cm4gYmVmUmVwb3NpdG9yeS5wcm94eS5yZXF1ZXN0KHVybCwgJ3B1dCcsIG51bGwsIG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiDmoLnmja7nianmlplpZOWPiueJqeaWmeeJueW+geS/neWtmOWQjueahGhhc2jojrflj5bor6Xnianmlpnlt7Lnu4/lrZjlgqjnmoTnibnlvoHpobnlgLxcbiAgICogQHBhcmFtIG1hdGVyaWFsSWQg54mp5paZSWRcbiAgICogQHBhcmFtIGNvbmZpZ0lEIOWvueW6lOivpeeJqeaWmeeahOeJueW+gemhuWhhc2hcbiAgICogQHJldHVybnMgXG4gICAqL1xuICBwdWJsaWMgZ2V0Q29uZmlnZWRWYWx1ZUJ5RmVhdHVyZUlkKG1hdGVyaWFsSWQ6IHN0cmluZywgY29uZmlnSUQ6IHN0cmluZywgY29uZmlnVHlwZTogc3RyaW5nID0gJ01hdGVyaWFscycpOiBPYnNlcnZhYmxlPFJlc3BvbnNlSW5mbz4ge1xuICAgIGNvbnN0IHVybCA9ICcvYXBpL2JmL2RmL3YxLjAvY2hhcmFjdGNvbmZpZ3NlcnZpY2Uvc2VydmljZS9nZXRjaGFyYWN0Y29uZmlnaW5mbyc7XG4gICAgY29uc3QgYm9keSA9IHsgb2JqVHlwZTogY29uZmlnVHlwZSwgb2JqSUQ6IG1hdGVyaWFsSWQsIGNvbmZpZ0lEIH07XG4gICAgY29uc3QgYmVmUmVwb3NpdG9yeTogQmVmUmVwb3NpdG9yeTxhbnk+ID0gdGhpcy5yZXBvc2l0b3J5IGFzIEJlZlJlcG9zaXRvcnk8YW55PjtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgYm9keVxuICAgIH07XG4gICAgcmV0dXJuIGJlZlJlcG9zaXRvcnkucHJveHkucmVxdWVzdCh1cmwsICdwdXQnLCBudWxsLCBvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICog5L+d5a2Y54mp5paZ54m55b6B6aG5XG4gICAqIEBwYXJhbSBtYXRlcmlhbElkIOeJqeaWmWlkXG4gICAqIEBwYXJhbSBjaGFyYWN0VmFsdWUg54m55b6B5YC8XG4gICAqIEBwYXJhbSBjb25maWdUeXBlIOmFjee9ruexu+Wei1xuICAgKiBAcmV0dXJucyBcbiAgICovXG4gIHB1YmxpYyBhcHBseUZlYXR1cmVzKG1hdGVyaWFsSWQ6IHN0cmluZywgY2hhcmFjdFZhbHVlOiBhbnksIGNvbmZpZ1R5cGU6IHN0cmluZyA9ICdNYXRlcmlhbHMnKSB7XG4gICAgY29uc3QgYm9keSA9IHsgb2JqVHlwZTogY29uZmlnVHlwZSwgb2JqSUQ6IG1hdGVyaWFsSWQsIGNoYXJhY3RWYWx1ZSB9O1xuICAgIGNvbnN0IGJlZlJlcG9zaXRvcnk6IEJlZlJlcG9zaXRvcnk8YW55PiA9IHRoaXMucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PGFueT47XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGJvZHlcbiAgICB9O1xuICAgIHJldHVybiBiZWZSZXBvc2l0b3J5LnByb3h5LnJlcXVlc3QoJy9hcGkvYmYvZGYvdjEuMC9jaGFyYWN0Y29uZmlnc2VydmljZS9zZXJ2aWNlL21hdGNoY2hhcmFjdGNvbmZpZ2lkJywgJ3B1dCcsIG51bGwsIG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiDojrflj5bluK7liqnkv6Hmga9cbiAgICogQHBhcmFtIGhlbHBpZCDluK7liqlpZFxuICAgKiBAcGFyYW0gZmlsdGVyIOi/h+a7pOadoeS7tlxuICAgKiBAcGFyYW0gcGFyYW1zIOWPguaVsFxuICAgKiBAcmV0dXJucyBcbiAgICovXG4gIHB1YmxpYyBnZXRIZWxwSW5mbyhoZWxwaWQ6IHN0cmluZywgZmlsdGVyOiBzdHJpbmcsIHBhcmFtczogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCB1cmwgPSAnL2FwaS9zY20vc2NtZm5kL3YxLjAvc2NtY29tbW9uY21wc2VydmljZS9zZXJ2aWNlL2dldGhlbHBkYXRhJztcbiAgICBjb25zdCBodHRwUGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAocGFyYW1zKSB7XG4gICAgICBpZiAocGFyYW1zLnBhZ2VJbmRleCkge1xuICAgICAgICBodHRwUGFyYW1zWydwYWdlSW5kZXgnXSA9IEpTT04uc3RyaW5naWZ5KHBhcmFtcy5wYWdlSW5kZXggLSAwKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMucGFnZVNpemUpIHtcbiAgICAgICAgaHR0cFBhcmFtc1sncGFnZVNpemUnXSA9IEpTT04uc3RyaW5naWZ5KHBhcmFtcy5wYWdlU2l6ZSAtIDApO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5jb25kaXRpb24pIHtcbiAgICAgICAgaHR0cFBhcmFtc1snY29uZGl0aW9uJ10gPSBKU09OLnN0cmluZ2lmeShwYXJhbXMuY29uZGl0aW9uKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuc2VhcmNoVmFsdWUpIHtcbiAgICAgICAgaHR0cFBhcmFtc1snc2VhcmNoJ10gPSBwYXJhbXMuc2VhcmNoVmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICBoZWxwSUQ6IGhlbHBpZCxcbiAgICAgIHF1ZXJ5UGFyYW06IEpTT04uc3RyaW5naWZ5KGh0dHBQYXJhbXMpLFxuICAgICAgZmlsdGVyU3RyOiBmaWx0ZXJcbiAgICB9O1xuICAgIGNvbnN0IGJlZlJlcG9zaXRvcnk6IEJlZlJlcG9zaXRvcnk8YW55PiA9IHRoaXMucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PGFueT47XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGJvZHlcbiAgICB9O1xuICAgIHJldHVybiBiZWZSZXBvc2l0b3J5LnByb3h5LnJlcXVlc3QodXJsLCAncHV0JywgbnVsbCwgb3B0aW9ucyk7XG4gIH1cbn0iXX0=