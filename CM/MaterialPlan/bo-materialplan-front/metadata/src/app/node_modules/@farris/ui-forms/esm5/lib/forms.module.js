/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { IdService, FarrisCommonModule } from '@farris/ui-common';
import { RadioComponent } from './radio/radio.component';
import { RadioButtonComponent } from './radio/radio-button.component';
import { RadioGroupComponent } from './radio/radio-group.component';
import { FarrisRadioGroupComponent } from './radio/radiogroup.component';
import { CheckboxComponent } from './checkbox/checkbox.component';
import { CheckboxGroupComponent } from './checkbox/checkbox-group.component';
import { FarrisCheckboxGroupComponent } from './checkbox/checkboxgroup.component';
import { TextareaAutoSizeDirective } from './textarea-autosize.directive';
import { TextareaZoomDirective } from './textarea-zoom.directive';
import { InputAppendDirective } from './input-append.directive';
import { MessagerModule } from '@farris/ui-messager';
import { ShortCutTabKeyDirective } from './shortcut-tab.directive';
import { TextareaWordcountDirective } from './textarea-wordcount.directive';
import { LocaleModule } from '@farris/ui-locale';
import { TextareaCommentsDirective } from './textarea-comments.directive';
import { SingleListComponent } from './comments/single-list.component';
var FarrisFormsModule = /** @class */ (function () {
    function FarrisFormsModule() {
    }
    FarrisFormsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        RadioComponent,
                        RadioGroupComponent,
                        CheckboxComponent,
                        CheckboxGroupComponent,
                        RadioButtonComponent,
                        FarrisRadioGroupComponent,
                        FarrisCheckboxGroupComponent,
                        TextareaAutoSizeDirective,
                        TextareaZoomDirective,
                        ShortCutTabKeyDirective,
                        TextareaWordcountDirective,
                        InputAppendDirective,
                        TextareaCommentsDirective,
                        SingleListComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        MessagerModule.forRoot(),
                        FarrisCommonModule.forRoot(),
                        LocaleModule,
                    ],
                    exports: [
                        RadioComponent,
                        RadioGroupComponent,
                        CheckboxComponent,
                        CheckboxGroupComponent,
                        RadioButtonComponent,
                        FarrisRadioGroupComponent,
                        FarrisCheckboxGroupComponent,
                        TextareaAutoSizeDirective,
                        TextareaZoomDirective,
                        ShortCutTabKeyDirective,
                        TextareaWordcountDirective,
                        InputAppendDirective,
                        TextareaCommentsDirective
                    ],
                    entryComponents: [
                        SingleListComponent
                    ],
                    providers: [IdService],
                },] }
    ];
    return FarrisFormsModule;
}());
export { FarrisFormsModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybXMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1mb3Jtcy8iLCJzb3VyY2VzIjpbImxpYi9mb3Jtcy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQzlELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDMUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDdkU7SUFBQTtJQTRDaUMsQ0FBQzs7Z0JBNUNqQyxRQUFRLFNBQUM7b0JBQ04sWUFBWSxFQUFFO3dCQUNWLGNBQWM7d0JBQ2QsbUJBQW1CO3dCQUNuQixpQkFBaUI7d0JBQ2pCLHNCQUFzQjt3QkFDdEIsb0JBQW9CO3dCQUNwQix5QkFBeUI7d0JBQ3pCLDRCQUE0Qjt3QkFDNUIseUJBQXlCO3dCQUN6QixxQkFBcUI7d0JBQ3JCLHVCQUF1Qjt3QkFDdkIsMEJBQTBCO3dCQUMxQixvQkFBb0I7d0JBQ3BCLHlCQUF5Qjt3QkFDekIsbUJBQW1CO3FCQUN0QjtvQkFDRCxPQUFPLEVBQUU7d0JBQ0wsWUFBWTt3QkFDWixXQUFXO3dCQUNYLGNBQWMsQ0FBQyxPQUFPLEVBQUU7d0JBQ3hCLGtCQUFrQixDQUFDLE9BQU8sRUFBRTt3QkFDNUIsWUFBWTtxQkFDZjtvQkFDRCxPQUFPLEVBQUU7d0JBQ0wsY0FBYzt3QkFDZCxtQkFBbUI7d0JBQ25CLGlCQUFpQjt3QkFDakIsc0JBQXNCO3dCQUN0QixvQkFBb0I7d0JBQ3BCLHlCQUF5Qjt3QkFDekIsNEJBQTRCO3dCQUM1Qix5QkFBeUI7d0JBQ3pCLHFCQUFxQjt3QkFDckIsdUJBQXVCO3dCQUN2QiwwQkFBMEI7d0JBQzFCLG9CQUFvQjt3QkFDcEIseUJBQXlCO3FCQUM1QjtvQkFDRCxlQUFlLEVBQUU7d0JBQ2IsbUJBQW1CO3FCQUN0QjtvQkFDRCxTQUFTLEVBQUUsQ0FBQyxTQUFTLENBQUM7aUJBQ3pCOztJQUNnQyx3QkFBQztDQUFBLEFBNUNsQyxJQTRDa0M7U0FBckIsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuaW1wb3J0IHsgSWRTZXJ2aWNlLCBGYXJyaXNDb21tb25Nb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbic7XHJcblxyXG5pbXBvcnQgeyBSYWRpb0NvbXBvbmVudCB9IGZyb20gJy4vcmFkaW8vcmFkaW8uY29tcG9uZW50JztcclxuaW1wb3J0IHsgUmFkaW9CdXR0b25Db21wb25lbnQgfSBmcm9tICcuL3JhZGlvL3JhZGlvLWJ1dHRvbi5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBSYWRpb0dyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi9yYWRpby9yYWRpby1ncm91cC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGYXJyaXNSYWRpb0dyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi9yYWRpby9yYWRpb2dyb3VwLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENoZWNrYm94Q29tcG9uZW50IH0gZnJvbSAnLi9jaGVja2JveC9jaGVja2JveC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDaGVja2JveEdyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi9jaGVja2JveC9jaGVja2JveC1ncm91cC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGYXJyaXNDaGVja2JveEdyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi9jaGVja2JveC9jaGVja2JveGdyb3VwLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFRleHRhcmVhQXV0b1NpemVEaXJlY3RpdmUgfSBmcm9tICcuL3RleHRhcmVhLWF1dG9zaXplLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IFRleHRhcmVhWm9vbURpcmVjdGl2ZSB9IGZyb20gJy4vdGV4dGFyZWEtem9vbS5kaXJlY3RpdmUnO1xyXG5pbXBvcnQge0lucHV0QXBwZW5kRGlyZWN0aXZlfSBmcm9tICcuL2lucHV0LWFwcGVuZC5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBNZXNzYWdlck1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5pbXBvcnQgeyBTaG9ydEN1dFRhYktleURpcmVjdGl2ZSB9IGZyb20gJy4vc2hvcnRjdXQtdGFiLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IFRleHRhcmVhV29yZGNvdW50RGlyZWN0aXZlIH0gZnJvbSAnLi90ZXh0YXJlYS13b3JkY291bnQuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgTG9jYWxlTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2NhbGUnO1xyXG5pbXBvcnQgeyBUZXh0YXJlYUNvbW1lbnRzRGlyZWN0aXZlIH0gZnJvbSAnLi90ZXh0YXJlYS1jb21tZW50cy5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBTaW5nbGVMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9jb21tZW50cy9zaW5nbGUtbGlzdC5jb21wb25lbnQnO1xyXG5ATmdNb2R1bGUoe1xyXG4gICAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAgICAgUmFkaW9Db21wb25lbnQsXHJcbiAgICAgICAgUmFkaW9Hcm91cENvbXBvbmVudCxcclxuICAgICAgICBDaGVja2JveENvbXBvbmVudCxcclxuICAgICAgICBDaGVja2JveEdyb3VwQ29tcG9uZW50LFxyXG4gICAgICAgIFJhZGlvQnV0dG9uQ29tcG9uZW50LFxyXG4gICAgICAgIEZhcnJpc1JhZGlvR3JvdXBDb21wb25lbnQsXHJcbiAgICAgICAgRmFycmlzQ2hlY2tib3hHcm91cENvbXBvbmVudCxcclxuICAgICAgICBUZXh0YXJlYUF1dG9TaXplRGlyZWN0aXZlLFxyXG4gICAgICAgIFRleHRhcmVhWm9vbURpcmVjdGl2ZSxcclxuICAgICAgICBTaG9ydEN1dFRhYktleURpcmVjdGl2ZSxcclxuICAgICAgICBUZXh0YXJlYVdvcmRjb3VudERpcmVjdGl2ZSxcclxuICAgICAgICBJbnB1dEFwcGVuZERpcmVjdGl2ZSxcclxuICAgICAgICBUZXh0YXJlYUNvbW1lbnRzRGlyZWN0aXZlLFxyXG4gICAgICAgIFNpbmdsZUxpc3RDb21wb25lbnRcclxuICAgIF0sXHJcbiAgICBpbXBvcnRzOiBbXHJcbiAgICAgICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgICAgIEZvcm1zTW9kdWxlLFxyXG4gICAgICAgIE1lc3NhZ2VyTW9kdWxlLmZvclJvb3QoKSxcclxuICAgICAgICBGYXJyaXNDb21tb25Nb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgICAgIExvY2FsZU1vZHVsZSxcclxuICAgIF0sXHJcbiAgICBleHBvcnRzOiBbXHJcbiAgICAgICAgUmFkaW9Db21wb25lbnQsXHJcbiAgICAgICAgUmFkaW9Hcm91cENvbXBvbmVudCxcclxuICAgICAgICBDaGVja2JveENvbXBvbmVudCxcclxuICAgICAgICBDaGVja2JveEdyb3VwQ29tcG9uZW50LFxyXG4gICAgICAgIFJhZGlvQnV0dG9uQ29tcG9uZW50LFxyXG4gICAgICAgIEZhcnJpc1JhZGlvR3JvdXBDb21wb25lbnQsXHJcbiAgICAgICAgRmFycmlzQ2hlY2tib3hHcm91cENvbXBvbmVudCxcclxuICAgICAgICBUZXh0YXJlYUF1dG9TaXplRGlyZWN0aXZlLFxyXG4gICAgICAgIFRleHRhcmVhWm9vbURpcmVjdGl2ZSxcclxuICAgICAgICBTaG9ydEN1dFRhYktleURpcmVjdGl2ZSxcclxuICAgICAgICBUZXh0YXJlYVdvcmRjb3VudERpcmVjdGl2ZSxcclxuICAgICAgICBJbnB1dEFwcGVuZERpcmVjdGl2ZSxcclxuICAgICAgICBUZXh0YXJlYUNvbW1lbnRzRGlyZWN0aXZlXHJcbiAgICBdLFxyXG4gICAgZW50cnlDb21wb25lbnRzOiBbXHJcbiAgICAgICAgU2luZ2xlTGlzdENvbXBvbmVudFxyXG4gICAgXSxcclxuICAgIHByb3ZpZGVyczogW0lkU2VydmljZV0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYXJyaXNGb3Jtc01vZHVsZSB7IH1cclxuIl19