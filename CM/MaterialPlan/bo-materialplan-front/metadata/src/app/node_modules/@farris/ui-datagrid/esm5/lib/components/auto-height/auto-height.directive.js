/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DatagridComponent } from '../../datagrid.component';
import { Directive, Injector, Input, ElementRef } from '@angular/core';
var AutoHeightDirective = /** @class */ (function () {
    function AutoHeightDirective(dg, inject, el) {
        this.dg = dg;
        this.inject = inject;
        this.el = el;
        this.autoHeight = false;
        this._timer = null;
    }
    /**
     * @return {?}
     */
    AutoHeightDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // this.updateDatagridHeight(this.wheelHeight);
    };
    /**
     * @return {?}
     */
    AutoHeightDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.updateDatagridHeight(this.wheelHeight);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AutoHeightDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.wheelHeight) {
            this.updateDatagridHeight(this.wheelHeight);
        }
    };
    /**
     * @return {?}
     */
    AutoHeightDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        // this.checkScrollbarPosition();
    };
    /**
     * @private
     * @param {?} wheelHeight
     * @return {?}
     */
    AutoHeightDirective.prototype.updateDatagridHeight = /**
     * @private
     * @param {?} wheelHeight
     * @return {?}
     */
    function (wheelHeight) {
        if (this.el && this.el.nativeElement && this.el.nativeElement.parentElement) {
            if (this.autoHeight) {
                if (!wheelHeight) {
                    wheelHeight = 240;
                    if (!this.dg.ds || !this.dg.ds.rows || !this.dg.ds.rows.length) {
                        wheelHeight = (!this.dg.emptyDataHeight || this.dg.emptyDataHeight < 0) ? 240 : this.dg.emptyDataHeight;
                    }
                }
                /** @type {?} */
                var h = parseInt(wheelHeight, 10);
                if (this.dg.showHeader) {
                    if (!this.dg.realHeaderHeight) {
                        h += this.dg.setHeaderHeight();
                    }
                    else {
                        h += this.dg.realHeaderHeight;
                    }
                }
                if (this.dg.showFooter) {
                    h += this.dg.footerHeight;
                }
                if (this.dg.pagination) {
                    /** @type {?} */
                    var ph = this.dg.pagerHeight || 40;
                    h += ph;
                }
                if (this.dg.showFilterBar) {
                    h += this.dg.filterBarHeight;
                }
                /** @type {?} */
                var wh = wheelHeight + "px";
                this.el.nativeElement.parentElement.style.height = wh;
                this.el.nativeElement.parentElement.parentElement.style.height = wh;
                if (this.dg.dgContainer) {
                    /** @type {?} */
                    var dgHeight = h + "px";
                    // 更新grid 最外层的高度
                    this.dg.dgContainer.nativeElement.style.height = dgHeight;
                    // farris-datagrid 增加高度
                    this.dg.el.nativeElement.style.height = dgHeight;
                    this.dg.height = h;
                }
                else {
                    this.dg.el.nativeElement.querySelector('.f-datagrid').style.height = h + "px";
                }
            }
        }
    };
    AutoHeightDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[auto-height]',
                },] }
    ];
    /** @nocollapse */
    AutoHeightDirective.ctorParameters = function () { return [
        { type: DatagridComponent },
        { type: Injector },
        { type: ElementRef }
    ]; };
    AutoHeightDirective.propDecorators = {
        autoHeight: [{ type: Input, args: ['auto-height',] }],
        wheelHeight: [{ type: Input }]
    };
    return AutoHeightDirective;
}());
export { AutoHeightDirective };
if (false) {
    /** @type {?} */
    AutoHeightDirective.prototype.autoHeight;
    /**
     * 数据列表总高度
     * @type {?}
     */
    AutoHeightDirective.prototype.wheelHeight;
    /**
     * @type {?}
     * @private
     */
    AutoHeightDirective.prototype._timer;
    /** @type {?} */
    AutoHeightDirective.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    AutoHeightDirective.prototype.inject;
    /**
     * @type {?}
     * @private
     */
    AutoHeightDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,