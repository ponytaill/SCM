/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffilepreview-adapt-unifile.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Input } from '@angular/core';
import { FfilepreviewAdaptUnifileService } from './ffilepreview-adapt-unifile.service';
export class FFilePreviewAdaptUnifileDirective {
    /**
     * @param {?} previewSer
     */
    constructor(previewSer) {
        this.previewSer = previewSer;
        /**
         * 处理扩展的服务器端配置
         */
        this._extendServeConfig = null;
    }
    /**
     * 捕获预览事件
     * @param {?} fileInfo
     * @return {?}
     */
    filePreviewEventHandler(fileInfo) {
        /** @type {?} */
        const previewOpts = Object.assign(this.extendServerConfig || {});
        previewOpts.options = Object.assign(previewOpts.options || {}, { showDownload: !!fileInfo.showDownload });
        if (previewOpts.options.showHeader === undefined) {
            previewOpts.options.showHeader = true;
        }
        if (previewOpts.options.showFileList === undefined) {
            previewOpts.options.showFileList = true;
        }
        // 文件扩展名
        /** @type {?} */
        const extendName = fileInfo.name.substr(fileInfo.name.lastIndexOf('.') + 1).toLowerCase();
        /** @type {?} */
        const enablePreviews = ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'jpg', 'jpeg', 'png', 'gif', 'bmp', 'pdf', 'txt'];
        if (enablePreviews.includes(extendName)) {
            this.previewSer.previewFile(fileInfo, previewOpts);
        }
        else {
            /** @type {?} */
            const msg = '此文件不支持预览';
            if (this.previewSer.notifySer) {
                this.previewSer.notifySer.warning('此文件不支持预览');
            }
            else {
                alert(msg);
            }
        }
    }
    /**
     * 捕获下载事件
     * @param {?} downloadEv
     * @return {?}
     */
    fileDownloadEventHandler(downloadEv) {
        // 如果是批量下载, downloadEv={fileInfos:[],name:}
        if (downloadEv && downloadEv['fileInfos'].length > 0) {
            if (downloadEv['fileInfos'].length > 1) {
                this.previewSer.multiDownloadFilesWidthName(downloadEv['fileInfos'], downloadEv['name'], this.extendServerConfig);
            }
            else {
                this.previewSer.downloadFile(downloadEv['fileInfos'][0], this.extendServerConfig);
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set extendServerConfig(value) {
        this._extendServeConfig = value;
        this.previewSer.setPreviwExtendServerConfig(value);
    }
    /**
     * @return {?}
     */
    get extendServerConfig() {
        return this._extendServeConfig;
    }
}
FFilePreviewAdaptUnifileDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fFilePreviewAdaptUnifile]',
                providers: [FfilepreviewAdaptUnifileService]
            },] }
];
/** @nocollapse */
FFilePreviewAdaptUnifileDirective.ctorParameters = () => [
    { type: FfilepreviewAdaptUnifileService }
];
FFilePreviewAdaptUnifileDirective.propDecorators = {
    filePreviewEventHandler: [{ type: HostListener, args: ['filePreviewEvent', ['$event'],] }],
    fileDownloadEventHandler: [{ type: HostListener, args: ['fileDownloadEvent', ['$event'],] }],
    extendServerConfig: [{ type: Input }]
};
if (false) {
    /**
     * 处理扩展的服务器端配置
     * @type {?}
     * @private
     */
    FFilePreviewAdaptUnifileDirective.prototype._extendServeConfig;
    /**
     * @type {?}
     * @private
     */
    FFilePreviewAdaptUnifileDirective.prototype.previewSer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmZpbGVwcmV2aWV3LWFkYXB0LXVuaWZpbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9leHRlbmQtZmlsZXVwbG9hZC1hZGFwdC11bmlmaWxlLyIsInNvdXJjZXMiOlsibGliL2ZmaWxlcHJldmlldy1hZGFwdC11bmlmaWxlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUV6RSxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQU12RixNQUFNLE9BQU8saUNBQWlDOzs7O0lBNkQxQyxZQUFvQixVQUEyQztRQUEzQyxlQUFVLEdBQVYsVUFBVSxDQUFpQzs7OztRQVR2RCx1QkFBa0IsR0FBQyxJQUFJLENBQUM7SUFXaEMsQ0FBQzs7Ozs7O0lBekRELHVCQUF1QixDQUFDLFFBQVE7O2NBQ3RCLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLENBQUM7UUFDaEUsV0FBVyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLElBQUksRUFBRSxFQUFFLEVBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQztRQUV4RyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxLQUFLLFNBQVMsRUFBRTtZQUM5QyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7U0FDekM7UUFFRCxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsWUFBWSxLQUFLLFNBQVMsRUFBRTtZQUNoRCxXQUFXLENBQUMsT0FBTyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7U0FDM0M7OztjQUdLLFVBQVUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUU7O2NBQ25GLGNBQWMsR0FBRyxDQUFFLEtBQUssRUFBQyxNQUFNLEVBQUMsS0FBSyxFQUFDLE1BQU0sRUFBQyxLQUFLLEVBQUMsTUFBTSxFQUFDLEtBQUssRUFBQyxNQUFNLEVBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBRTtRQUVoSCxJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ3REO2FBQU07O2tCQUNHLEdBQUcsR0FBRyxVQUFVO1lBQ3RCLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUU7Z0JBQzNCLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUNqRDtpQkFBTTtnQkFDSCxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDZDtTQUNKO0lBQ0wsQ0FBQzs7Ozs7O0lBTUQsd0JBQXdCLENBQUMsVUFBVTtRQUMvQiwyQ0FBMkM7UUFDM0MsSUFBSSxVQUFVLElBQUUsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDaEQsSUFBSSxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDcEMsSUFBSSxDQUFDLFVBQVUsQ0FBQywyQkFBMkIsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2FBQ3BIO2lCQUFJO2dCQUNELElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQzthQUNyRjtTQUNKO0lBQ0wsQ0FBQzs7Ozs7SUFNRCxJQUNJLGtCQUFrQixDQUFDLEtBQUs7UUFDeEIsSUFBSSxDQUFDLGtCQUFrQixHQUFDLEtBQUssQ0FBQztRQUM5QixJQUFJLENBQUMsVUFBVSxDQUFDLDJCQUEyQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Ozs7SUFDRCxJQUFJLGtCQUFrQjtRQUNsQixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztJQUNuQyxDQUFDOzs7WUFoRUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSw0QkFBNEI7Z0JBQ3RDLFNBQVMsRUFBQyxDQUFDLCtCQUErQixDQUFDO2FBQzlDOzs7O1lBTFEsK0JBQStCOzs7c0NBV25DLFlBQVksU0FBQyxrQkFBa0IsRUFBRSxDQUFDLFFBQVEsQ0FBQzt1Q0FnQzNDLFlBQVksU0FBQyxtQkFBbUIsRUFBRSxDQUFDLFFBQVEsQ0FBQztpQ0FnQjVDLEtBQUs7Ozs7Ozs7O0lBRE4sK0RBQWdDOzs7OztJQVNwQix1REFBbUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5vdGlmeVNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW5vdGlmeSc7XHJcbmltcG9ydCB7IEZmaWxlcHJldmlld0FkYXB0VW5pZmlsZVNlcnZpY2UgfSBmcm9tICcuL2ZmaWxlcHJldmlldy1hZGFwdC11bmlmaWxlLnNlcnZpY2UnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tmRmlsZVByZXZpZXdBZGFwdFVuaWZpbGVdJyxcclxuICAgIHByb3ZpZGVyczpbRmZpbGVwcmV2aWV3QWRhcHRVbmlmaWxlU2VydmljZV1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZGaWxlUHJldmlld0FkYXB0VW5pZmlsZURpcmVjdGl2ZSB7XHJcbiAgICAvKipcclxuICAgICAqIOaNleiOt+mihOiniOS6i+S7tlxyXG4gICAgICogQHBhcmFtIGZpbGVJbmZvIFxyXG4gICAgICovXHJcbiAgICBASG9zdExpc3RlbmVyKCdmaWxlUHJldmlld0V2ZW50JywgWyckZXZlbnQnXSlcclxuICAgIGZpbGVQcmV2aWV3RXZlbnRIYW5kbGVyKGZpbGVJbmZvKSB7XHJcbiAgICAgICAgY29uc3QgcHJldmlld09wdHMgPSBPYmplY3QuYXNzaWduKHRoaXMuZXh0ZW5kU2VydmVyQ29uZmlnIHx8IHt9KTtcclxuICAgICAgICBwcmV2aWV3T3B0cy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbihwcmV2aWV3T3B0cy5vcHRpb25zIHx8IHt9LCB7c2hvd0Rvd25sb2FkOiAhIWZpbGVJbmZvLnNob3dEb3dubG9hZH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChwcmV2aWV3T3B0cy5vcHRpb25zLnNob3dIZWFkZXIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBwcmV2aWV3T3B0cy5vcHRpb25zLnNob3dIZWFkZXIgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHByZXZpZXdPcHRzLm9wdGlvbnMuc2hvd0ZpbGVMaXN0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcHJldmlld09wdHMub3B0aW9ucy5zaG93RmlsZUxpc3QgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5paH5Lu25omp5bGV5ZCNXHJcbiAgICAgICAgY29uc3QgZXh0ZW5kTmFtZSA9IGZpbGVJbmZvLm5hbWUuc3Vic3RyKGZpbGVJbmZvLm5hbWUubGFzdEluZGV4T2YoJy4nKSArIDEpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgY29uc3QgZW5hYmxlUHJldmlld3MgPSBbICdkb2MnLCdkb2N4JywneGxzJywneGxzeCcsJ3BwdCcsJ3BwdHgnLCdqcGcnLCdqcGVnJywncG5nJywgJ2dpZicsICdibXAnLCAncGRmJywgJ3R4dCcgXTtcclxuXHJcbiAgICAgICAgaWYgKGVuYWJsZVByZXZpZXdzLmluY2x1ZGVzKGV4dGVuZE5hbWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJldmlld1Nlci5wcmV2aWV3RmlsZShmaWxlSW5mbywgcHJldmlld09wdHMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9ICfmraTmlofku7bkuI3mlK/mjIHpooTop4gnO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2aWV3U2VyLm5vdGlmeVNlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2aWV3U2VyLm5vdGlmeVNlci53YXJuaW5nKCfmraTmlofku7bkuI3mlK/mjIHpooTop4gnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KG1zZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOaNleiOt+S4i+i9veS6i+S7tlxyXG4gICAgICogQHBhcmFtIGZpbGVJbmZvIFxyXG4gICAgICovXHJcbiAgICBASG9zdExpc3RlbmVyKCdmaWxlRG93bmxvYWRFdmVudCcsIFsnJGV2ZW50J10pXHJcbiAgICBmaWxlRG93bmxvYWRFdmVudEhhbmRsZXIoZG93bmxvYWRFdikge1xyXG4gICAgICAgIC8vIOWmguaenOaYr+aJuemHj+S4i+i9vSwgZG93bmxvYWRFdj17ZmlsZUluZm9zOltdLG5hbWU6fVxyXG4gICAgICAgIGlmIChkb3dubG9hZEV2JiZkb3dubG9hZEV2WydmaWxlSW5mb3MnXS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGlmIChkb3dubG9hZEV2WydmaWxlSW5mb3MnXS5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByZXZpZXdTZXIubXVsdGlEb3dubG9hZEZpbGVzV2lkdGhOYW1lKGRvd25sb2FkRXZbJ2ZpbGVJbmZvcyddLGRvd25sb2FkRXZbJ25hbWUnXSwgdGhpcy5leHRlbmRTZXJ2ZXJDb25maWcpO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJldmlld1Nlci5kb3dubG9hZEZpbGUoZG93bmxvYWRFdlsnZmlsZUluZm9zJ11bMF0sIHRoaXMuZXh0ZW5kU2VydmVyQ29uZmlnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5aSE55CG5omp5bGV55qE5pyN5Yqh5Zmo56uv6YWN572uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2V4dGVuZFNlcnZlQ29uZmlnPW51bGw7XHJcbiAgICBASW5wdXQoKSBcclxuICAgIHNldCBleHRlbmRTZXJ2ZXJDb25maWcodmFsdWUpe1xyXG4gICAgICAgIHRoaXMuX2V4dGVuZFNlcnZlQ29uZmlnPXZhbHVlO1xyXG4gICAgICAgIHRoaXMucHJldmlld1Nlci5zZXRQcmV2aXdFeHRlbmRTZXJ2ZXJDb25maWcodmFsdWUpO1xyXG4gICAgfSBcclxuICAgIGdldCBleHRlbmRTZXJ2ZXJDb25maWcoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZXh0ZW5kU2VydmVDb25maWc7XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHByZXZpZXdTZXI6IEZmaWxlcHJldmlld0FkYXB0VW5pZmlsZVNlcnZpY2UgKSB7XHJcblxyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=