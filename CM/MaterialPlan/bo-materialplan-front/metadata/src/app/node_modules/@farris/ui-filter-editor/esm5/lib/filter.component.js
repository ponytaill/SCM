/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { LocaleService } from "@farris/ui-locale";
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2018-12-04 10:43:42
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-17 17:34:39
 * @Company: Inspur
 * @Version: v0.0.1
 */
import { Component, Input, EventEmitter, Output, Injector, ElementRef, ComponentFactoryResolver, TemplateRef, ViewChild, forwardRef, HostListener, HostBinding, ChangeDetectorRef, } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { cloneDeep } from "lodash-es";
import { BsModalService } from "@farris/ui-modal";
import { LookupComponent } from "@farris/ui-lookup";
import { Compare, } from "@farris/ui-common/types";
import { FilterService } from "./services/filter.service";
import { FilterEditorComponent } from "./components/filter-editor.component";
import { CommonUtils } from "@farris/ui-common";
import { NotifyService } from "@farris/ui-notify";
/** @type {?} */
export var FILTER_LOOKUPGRID_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return FilterComponent; })),
    multi: true,
};
/**
 * @record
 */
export function FILTER_FIELD_EDITOR() { }
if (false) {
    /** @type {?} */
    FILTER_FIELD_EDITOR.prototype.type;
    /** @type {?|undefined} */
    FILTER_FIELD_EDITOR.prototype.options;
}
var FilterComponent = /** @class */ (function (_super) {
    tslib_1.__extends(FilterComponent, _super);
    function FilterComponent(injector, cfr, modalService, el, filterService) {
        var _this = _super.call(this, injector, el) || this;
        _this.cfr = cfr;
        _this.modalService = modalService;
        _this.el = el;
        _this.filterService = filterService;
        _this.hostCls = "f-cmp-inputgroup";
        _this.text = "";
        _this.conditions = [];
        _this.originalData = [];
        /**
         * 字段数据
         */
        _this.columns = [];
        _this.showCode = false;
        _this.showSql = false;
        _this.enableExpress = false;
        _this.fieldEditor = { type: "select", options: {} };
        _this.enableClear = true;
        _this.returnType = "object";
        _this.insertType = "below";
        _this.openDialog = new EventEmitter();
        _this.showExpress = new EventEmitter();
        _this.showClearButton = false;
        _this.cd = null;
        _this.commonUtils = null;
        _this.notifySer = null;
        _this.filterService.conditionsChanged.subscribe((/**
         * @param {?} conditionList
         * @return {?}
         */
        function (conditionList) {
            _this.conditions = conditionList;
        }));
        _this.notifySer = _this.injector.get(NotifyService, null);
        _this.localeService = _this.injector.get(LocaleService);
        _this.cd = _this.injector.get(ChangeDetectorRef);
        _this.commonUtils =
            _this.injector.get(CommonUtils, null) || new CommonUtils();
        return _this;
    }
    /**
     * @return {?}
     */
    FilterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} event
     * @return {?}
     */
    FilterComponent.prototype.onmouseover = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showClearButton = true;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FilterComponent.prototype.onmouseleave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showClearButton = false;
    };
    /**
     * @return {?}
     */
    FilterComponent.prototype.showDialog = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.disabled) {
            if (this.fieldEditor && this.fieldEditor.type === "combo-tree") {
                this.fieldEditor.options = this.fieldEditor.options || {};
                if (this.fieldEditor.options.autoWidth === undefined) {
                    this.fieldEditor.options.autoWidth = true;
                }
                if (!this.fieldEditor.options.columns) {
                    this.fieldEditor.options.columns = [
                        { field: "label", title: "label", width: 100 },
                    ];
                }
                if (!this.fieldEditor.options.textField) {
                    this.fieldEditor.options.textField = "label";
                }
                if (!this.fieldEditor.options.idField) {
                    this.fieldEditor.options.idField = "value";
                }
            }
            /** @type {?} */
            var filterEditorFactory = this.cfr.resolveComponentFactory(FilterEditorComponent);
            this.filterEditorRef = filterEditorFactory.create(this.injector);
            this.filterEditorRef.instance.columns = this.columns;
            this.filterEditorRef.instance.conditions = this.conditions;
            this.originalData = cloneDeep(this.conditions);
            this.dlgRef = this.modalService.show(this.filterEditorRef, {
                width: 800,
                height: 500,
                title: this.localeService.getValue("filterEditor.title"),
                enableScroll: false,
                minHeight: 398,
                minWidth: 798,
                iconCls: "f-icon f-icon-filter",
                buttons: this.btnRef,
                // dialogFooterStyles: { background: '#F4F6F9' },
                buttonAlign: "right",
                initialState: {
                    showCode: this.showCode,
                    showSql: this.showSql,
                    enableExpress: this.enableExpress,
                    fieldEditor: this.fieldEditor,
                    insertType: this.insertType,
                },
                closed: (/**
                 * @param {?} isCloseButtonClick
                 * @return {?}
                 */
                function (isCloseButtonClick) {
                    if (isCloseButtonClick) {
                        _this.cancel();
                    }
                }),
            });
            this.filterEditorRef.instance.height =
                this.dlgRef.dialog.instance.getContainerSize().height;
            this.filterEditorRef.instance.showExpress.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) {
                _this.showExpress.emit($event);
            }));
            this.dlgRef.dialog.instance.resized.subscribe((/**
             * @param {?} size
             * @return {?}
             */
            function (size) {
                _this.filterEditorRef.instance.height = size.containerHeight;
            }));
            this.filterEditorRef.changeDetectorRef.detectChanges();
            this.dlgRef.dialog.changeDetectorRef.reattach();
            this.openDialog.emit();
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    FilterComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            if (typeof val === "string") {
                val = JSON.parse(val);
            }
            this.conditions = val || [];
            this.text = this.commonUtils.buildSqlWhere(this.conditions);
        }
    };
    /**
     * @private
     * @return {?}
     */
    FilterComponent.prototype.checkSymbol = /**
     * @private
     * @return {?}
     */
    function () {
        return this.filterService.isValid(this.conditions, this.localeService);
    };
    /**
     * @return {?}
     */
    FilterComponent.prototype.save = /**
     * @return {?}
     */
    function () {
        if (this.conditions.length) {
            /** @type {?} */
            var checkResult = this.checkSymbol();
            if (typeof checkResult === "object") {
                var bracket = checkResult.bracket, relation = checkResult.relation, field = checkResult.field;
                if (!bracket.result || !relation.result || !field.result) {
                    /** @type {?} */
                    var msg = "";
                    if (!bracket.result) {
                        msg = bracket.msg;
                    }
                    else if (!relation.result) {
                        msg = relation.msg;
                    }
                    else if (!field.result) {
                        msg = field.msg;
                    }
                    if (msg) {
                        if (this.notifySer) {
                            this.notifySer.warning(msg);
                        }
                        else {
                            alert(msg);
                        }
                        return;
                    }
                }
            }
            this.conditions = this.conditions.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.filterField; }));
            // 转换in 操作符的value 值
            this.conditions = this.conditions.map((/**
             * @param {?} con
             * @return {?}
             */
            function (con) {
                /** @type {?} */
                var cp = parseInt("" + con.compare, 10);
                if (cp === Compare.In || cp === Compare.NotIn) {
                    con.value = con.value.replace(/,/g, "\r\n");
                }
                return con;
            }));
            this.text = this.commonUtils.buildSqlWhere(this.conditions);
        }
        else {
            this.text = "";
        }
        if (this.cd) {
            this.cd.detectChanges();
        }
        this.closeDialog();
    };
    /**
     * @return {?}
     */
    FilterComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.conditions = this.originalData;
        this.closeDialog();
    };
    /**
     * @return {?}
     */
    FilterComponent.prototype.closeDialog = /**
     * @return {?}
     */
    function () {
        this.updateModel();
        this.filterEditorRef = null;
        this.dlgRef.close();
    };
    /**
     * @return {?}
     */
    FilterComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.text = "";
        this.conditions = [];
        this.updateModel();
    };
    /**
     * @private
     * @return {?}
     */
    FilterComponent.prototype.updateModel = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var v = this.conditions;
        if (this.returnType === "string") {
            v = JSON.stringify(this.conditions);
        }
        this.onModelChange(v);
        this.onModelTouched(v);
    };
    FilterComponent.decorators = [
        { type: Component, args: [{
                    selector: "filter,filter-textbox",
                    template: "<div class=\"input-group\">\r\n    <input #txtbox\r\n        class=\"form-control\" \r\n        [value]=\"text\"\r\n        [readonly]=\"!editable || readonly\"\r\n        [class.f-state-disabled] = \"disabled\"\r\n        [class.f-state-readonly] = \"readonly\"\r\n        [class.f-state-editable] = \"!editable\"\r\n        [disabled]=\"disabled\"/>\r\n    <div class=\"input-group-append\" *ngIf=\"!readonly && !disabled\">\r\n        <span *ngIf=\"showClearButton && enableClear\" class=\"input-group-text input-group-clear\" (click)=\"clear()\">\r\n            <i class=\"f-icon modal_close\"></i>\r\n        </span>\r\n        <span class=\"f-select input-group-text\"  (click)=\"showDialog()\">\r\n            <i class=\"f-icon f-icon-lookup\"></i>\r\n        </span>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #defaultButtonRef>\r\n    <button class=\"btn btn-outline-secondary\" (click)=\"cancel()\"> {{ 'filterEditor.cancelButton'|locale }} </button>&nbsp;\r\n    <button class=\"btn btn-primary\" (click)=\"save()\"> {{ 'filterEditor.okButton'| locale }} </button>\r\n</ng-template>",
                    providers: [FILTER_LOOKUPGRID_VALUE_ACCESSOR, FilterService],
                    styles: ["\n            .lookup-clear {\n                cursor: pointer;\n                background: #fff !important;\n            }\n            .lookup-clear:hover {\n                background: #e9ecef !important;\n            }\n        "]
                }] }
    ];
    /** @nocollapse */
    FilterComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: BsModalService },
        { type: ElementRef },
        { type: FilterService }
    ]; };
    FilterComponent.propDecorators = {
        hostCls: [{ type: HostBinding, args: ["class",] }],
        columns: [{ type: Input }],
        showCode: [{ type: Input }],
        showSql: [{ type: Input }],
        enableExpress: [{ type: Input }],
        fieldEditor: [{ type: Input }],
        enableClear: [{ type: Input }],
        returnType: [{ type: Input }],
        insertType: [{ type: Input }],
        openDialog: [{ type: Output }],
        showExpress: [{ type: Output }],
        btnRef: [{ type: ViewChild, args: ["defaultButtonRef",] }],
        textbox: [{ type: ViewChild, args: ["txtbox",] }],
        onmouseover: [{ type: HostListener, args: ["mouseover", ["$event"],] }],
        onmouseleave: [{ type: HostListener, args: ["mouseleave", ["$event"],] }]
    };
    return FilterComponent;
}(LookupComponent));
export { FilterComponent };
if (false) {
    /** @type {?} */
    FilterComponent.prototype.hostCls;
    /** @type {?} */
    FilterComponent.prototype.text;
    /** @type {?} */
    FilterComponent.prototype.conditions;
    /** @type {?} */
    FilterComponent.prototype.originalData;
    /**
     * 字段数据
     * @type {?}
     */
    FilterComponent.prototype.columns;
    /** @type {?} */
    FilterComponent.prototype.showCode;
    /** @type {?} */
    FilterComponent.prototype.showSql;
    /** @type {?} */
    FilterComponent.prototype.enableExpress;
    /** @type {?} */
    FilterComponent.prototype.fieldEditor;
    /** @type {?} */
    FilterComponent.prototype.enableClear;
    /** @type {?} */
    FilterComponent.prototype.returnType;
    /** @type {?} */
    FilterComponent.prototype.insertType;
    /** @type {?} */
    FilterComponent.prototype.openDialog;
    /** @type {?} */
    FilterComponent.prototype.showExpress;
    /** @type {?} */
    FilterComponent.prototype.btnRef;
    /** @type {?} */
    FilterComponent.prototype.textbox;
    /** @type {?} */
    FilterComponent.prototype.showClearButton;
    /** @type {?} */
    FilterComponent.prototype.cd;
    /** @type {?} */
    FilterComponent.prototype.dlgRef;
    /** @type {?} */
    FilterComponent.prototype.filterEditorRef;
    /** @type {?} */
    FilterComponent.prototype.localeService;
    /** @type {?} */
    FilterComponent.prototype.commonUtils;
    /** @type {?} */
    FilterComponent.prototype.notifySer;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.modalService;
    /** @type {?} */
    FilterComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.filterService;
}
//# sourceMappingURL=data:application/json;base64,