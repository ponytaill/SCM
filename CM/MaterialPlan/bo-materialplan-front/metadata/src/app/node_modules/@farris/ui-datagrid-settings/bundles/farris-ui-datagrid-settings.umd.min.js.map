{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@farris/ui-datagrid-settings/lib/datagrid-settings.component.ts","ng://@farris/ui-datagrid-settings/lib/getValueWithLocaleId.ts","ng://@farris/ui-datagrid-settings/lib/simple-mode/simple-columns.component.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-scheme.service.ts","ng://@farris/ui-datagrid-settings/lib/scheme/newscheme.component.ts","ng://@farris/ui-datagrid-settings/lib/scheme/scheme-list.component.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-settings-locale.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-settings.service.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-sort-setting.component.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-view-columns.component.ts","ng://@farris/ui-datagrid-settings/lib/column-format-setting/column-format-setting.component.ts","ng://@farris/ui-datagrid-settings/lib/column-group/column-group.component.ts","ng://@farris/ui-datagrid-settings/lib/column-format-setting/column-visible-drag.directive.ts","ng://@farris/ui-datagrid-settings/lib/column-group/column-group-drag.directive.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-settings.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","DatagridSettingsComponent","cd","inject","activeTabIndex","sortTreeData","sortNames","sortInfo","viewTreeData","viewColumns","columnFormat","groupField","groupRowState","canSetColumnSort","canSetColumnVisible","enableReset","cancelHandle","EventEmitter","submitHandle","reset","concise","schemeInfo","searchItems","alignItems","summaryItems","summaryItems2","messager","get","MessagerService","localeSer","LocaleService","render2","Renderer2","title","getValue","initData","gridInstance","sortName","split","getViewColumns","columns","ngOnInit","enableScheme","ngOnChanges","changes","close","$event","stopPropagation","modalRef","setCurrentTab","left","setStyle","activeTab","nativeElement","changeTabs","idx","onSortInfoChange","_this","visibleCls","forEach","cols","_getViewColumns","filter","visible","undefined","map","field","c","colspan","mergeColumnFormats","keys","_a","sortOrder_1","sortOrder","col","find","sortable","order","onColumnFormatChange","colFormatData","onSubmitClick","emit","onCancelClick","onSettingReset","restorDefaultText","confirm","subscribe","reset2Default","options","dfs","initialOptions","columnFields","newColumns_1","halign","align","width","footer","groupFooter","sort","sortOrders","showConcise","Component","args","selector","template","encapsulation","ViewEncapsulation","None","ChangeDetectorRef","Injector","Input","Output","ViewChild","getMultilingualValue","valObj","localeId","val","SimpleColumnsComponent","injector","seartTypes","fields","clickToHidden","top","_schemeList","cls","formatChange","fieldsChange","submit","closed","advanced","addNewScheme","showSchemeList","activeItemChange","schemeChanged","allCols","columnType","isEn","showSchemePanel","switchValue","currentSchemeItem","searchResultIsVisibleAll","defaultSchemeName","settings","notify","NotifyService","defineProperty","JSON","parse","name","onClick","target","indexOf","onEscKeydown","document","querySelector","onEnterKeydown","onControlGKeydown","ctrlKey","preventDefault","key","toLowerCase","showAdvanced","searchInput","focus","getCurrentSchemeSettings","queryConditionString","dirtySettings","container","filterColumns","searchWords","onFieldsChanged","onDblClick","onCheckboxClick","index","splice","f","searchColumn","txt","onFieldDrop","fieldInfo","ulElRef","removedIndex","addedIndex","moveItem","targetItem","moveItemIndex","findIndex","targetItemIndex","removedItem","getCheckAllState","visibleLen","onCheckAllClick","state","isCheckAll","item","a","viewFields","_settings","content","bind","btnOk","currentScheme","warning","collectSettings","onChooseScheme","setTimeout","schemeitemsEleRef","itemEl","id","scrollIntoViewIfNeeded","scrollIntoView","onlySeeVisibleColumns","refresh","detectChanges","hidePanel","onNewSchemeClick","saveas","type","onShowSchemeList","onSchemeItemClick","schemeSettings","flag","clearSearch","input","HostBinding","HostListener","SCHEME_WEBAPI","DatagridSchemeService","restService","schemeList$","Subject","update","d","gridId","setRestService","httpSer","getWebFormKey","webformHash","window","location","hash","substring","lastIndexOf","getSchemeKey","getSchemeList","gridID","uri","invoke","saveScheme","scheme","isUpdate","httpMethod","belongId","body","updateScheme","param","of","getStateValue","statePro","_i","dgState","reduce","updateStateValue","propertyName","setSchemeList","newSchemeList","hasSchemeName","schemeName","schemeList","trim","replayNames_1","nameObj","k","checkAuthority","getLanguages","NewSchemeComponent","dataPermissionIds","closeModal","submitModal","isDefault","orgids","schemeType","noPublicAuthority","noOrgAuthority","languages","code","default","nameMaxLength","zh-CHS","zh-CHT","en","onSelectedOrg","selections","orgId","onSetRangeType","hasAuthority","public","org","getSelectedId","clearAllOrgs","SchemeListComponent","items","removeItem","currentUserId","colName","colType","colDefault","colCreator","colMgr","publicTxt","privateTxt","orgTxt","formatter","v","schemeIsDefault","btnDel","onClose","setDefault","ctx","rowData","defaultItem","defaultId","onSchemeDel","id_1","deletedIds","DATAGRID_SETTINGS_LOCALEDATA","datagrid-settings","noAuth","has","exist","chs","cht","required","groupRowStatus","label","expand","collapse","datagrid-scheme","saveTitle","namePlaceholder","setPrivate","privateTip","setPublic","publicTip","setOrg","orgTip","defaultTip","syspreset","isPublic","isOrg","isPrivate","newScheme","mgrScheme","onlyshowcolumns","delete","username","mgr","GRID_SETTINGS_WEBAPI","InjectionToken","DatagridSettingsService","modalSer","idService","multiSortMsg","columnsSortableMsg","notSupportHeaderGroupMsg","notShowDialog","_httpRestService","gridRefs","activeSchemeItem","saving","cfr","app","schemeListSubscription","currentSchemeitem","debugSer","ComponentFactoryResolver","ApplicationRef","notifyService","DebugService","schemeService","setLocaleData","destroy","setActiveSchemeItem","writeDebugMsg","msg","console","registerGridInstance","dg","getGridInstance","dgID","updateSchemeSettings","schemeItem","schemeContentObj","stringify","updateActiveSchemeItemSettings","dgId","getActiveSchemeItem","activeItem","schemekey","getSearchTypes","showSimple","selectedSchemeItem","convertColumnsToSimple","ControlPanelFeild","searchTypes","simpleRef_1","resolveComponentFactory","create","attachView","hostView","instance","_currentSchemtItem","appendChild","pipe","switchMap","style","right","timer","remove","unsubscribe","_activeSchemtItem","_currentSettings_1","disabled","updateGridView","visibleFields","showNewSchemeDialog","auth","list","showSchemeListDialog","cloneDeep","_activeSchemeItem","hasActiveItem","getDefaultScheme","show","opts","enableSimpleMode","_editColSortInfo","showSetColumnsTab","isHeaderGroup","currentSettings","fcol","treeData","convertColumns2TreeData","viewColumnsTreeData","checkViewTreeNodes","defaultOpts","height","showHeader","initialState","showButtons","modalOpts","dialog","draggbar","handle","header","multiSort","hasEnableSortColumns","flatColumns","grid","getChilds","rowIndex","colStartIndex","colCount","forSort","childCols","_count","slice","element","data","selectable","expanded","children","_","treeNodes","tn","_convertColumnsToSimple","gridOpts","_state","desginCols","_cols","rowspan","allowGrouping","dataType","resetGridView","newColumns_2","btn","sortInfo_1","viewColumns_1","columnFormat_1","_colformats","_groupField","groupRows","join","expandGroupRows","saveData","setUserConfig","updateColumnFormat","newVisibleOrderColumns","columnsChanged","clearSort","hideColumns","isNewAddColumn","includes","newCols","formatCol","text","calculationType","parseInt","showFooter","footerTemplate","createConfigKey","dgs","getCurrentUserSettings","config","saveUserConfig","LOCALEID","currentConfig","localStorage","getItem","_config","setItem","httpRestService","gridIns","activeScheme_1","success","hasOrgAuthority","authOrganizationData","_saveUserConfig","getUserConfig","_getUserConfig","con","defaultScheme","publicSchemes","getSettings","forkJoin","_b","userSetting","supportedLanguages","userSettings","userConfigSetting","configkey1","configkey2","configkey3","textvalue","saveUserSettings","resetUserConfig","getUserSettings","ucs","textValue","buildSubmitData","localeKey","authInfo","simpleRef","schemeListDlg","zIndex","resizable","newSchemeDlg","createNewScheme","_msg","langcode","info","hasPublicAuthority","authOperationData","isNewScheme","hasName","Array","isArray","getMessageCode_1","langCode","msgs","requiredName","newId","guid","isSystem","extendId","extendInfo","buildOrgAndSchemeRelations","schemeId","orgIds","relatedId","activeScheme","Injectable","BsModalService","IdService","DatagridSortSettingComponent","idField","valueField","textField","selectedIds","sortInfoChange","setFieldSortOrder","ms","moveToLeft","onSelectionsChange","getSortInfo","names_1","orders_1","si","onBeforeMove","DatagridViewColumnsComponent","_selectedIds","selectedIdsChange","vals","hiddenColumn","column","ColumnFormatSettingComponent","gridSettingComponentRef","formatData","activeField","showGridFooter","_searchResult","isFirstChange","setFormatData","checkColumnOptions","colForm","valueChanges","pristine","onFieldClick","search","isVisible","ColumnGroupSettingComponent","formatColumns","groupFields","groupFieldsChange","formatColumnsChange","groupRowStateChange","groupColumns","allowGroupColumns","activeCalculationCol","showSelectColumnsPanel","setGroupColumns","registerEventHandle","initCalculationColumns","groupingSettingEl","addEventListener","selectcolumnspanel","onGroupFieldsChange","getAllowGroupingColumns","toggleGroupingColumnPanel","addGroupColumn","onRemoveGroupingField","onGroupingFieldDropped","smoothDnd","constants","wrapperClass","animationClass","SmoothDndForVisible","dropHandler","dropHandlers","reactDropHandler","handler","wrapChild","ColumnVisibleDragDirective","ngzone","render","el","drop","behaviour","dragHandleSelector","dropPlaceholder","className","getGhostParent","getChildPayload","shouldAcceptDrop","sourceContainerOptions","payload","onDropReady","dropResult","run","onDrop","onDragEnter","onDragStart","onDragEnd","ngAfterViewInit","initDnD","ngOnDestroy","disposeDnd","dispose","Directive","NgZone","ElementRef","smoothDnD","SmoothDndForGroupingField","ColumnGroupDragDirective","orientation","DatagridSettingsModule","forRoot","apiUri","ngModule","providers","provide","GRID_SETTINGS_SERVICE","useClass","NgModule","declarations","imports","CommonModule","FormsModule","MultiSelectModule","ComboListModule","DatagridModule","FarrisCommonModule","MessagerModule","LocaleModule","ModalModule","SwitchModule","FarrisTooltipModule","NotifyModule","OrganizationSelectorModule","LanguageTextboxModule","entryComponents","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\r\n    Component, ViewEncapsulation, ViewChild, ElementRef, Input, EventEmitter,\r\n    OnInit, OnChanges, SimpleChanges, ChangeDetectorRef, Injector, Output, Renderer2\r\n} from '@angular/core';\r\nimport { BsModalRef } from '@farris/ui-modal';\r\nimport { DataColumn, DatagridComponent } from '@farris/ui-datagrid';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { DatagridSchemeModel, SettingModel } from './setting.model';\r\n\r\n@Component({\r\n    selector: 'datagrid-settings',\r\n    templateUrl: './datagrid-settings.component.html',\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class DatagridSettingsComponent implements OnInit, OnChanges {\r\n    modalRef: BsModalRef;\r\n    gridInstance: DatagridComponent;\r\n    activeTabIndex = 1;\r\n\r\n    /** æåºåæ°æ® */\r\n    sortTreeData = [];\r\n    sortNames = [];\r\n    sortInfo: any = {};\r\n\r\n    /** æ¾ç¤ºåæ°æ® */\r\n    viewTreeData = [];\r\n    viewColumns = [];\r\n\r\n    columnFormat = [];\r\n\r\n    groupField = [];\r\n    groupRowState = true;\r\n\r\n    canSetColumnSort = true;\r\n    canSetColumnVisible = true;\r\n    @Input() enableReset = false;\r\n    @Input() columns: DataColumn[][];\r\n\r\n    @Output() cancelHandle = new EventEmitter();\r\n    @Output() submitHandle = new EventEmitter();\r\n    @Output() reset = new EventEmitter();\r\n    @Output() concise = new EventEmitter();\r\n    @Input() schemeInfo: SettingModel = null;\r\n\r\n    @ViewChild('header') header: ElementRef;\r\n    @ViewChild('activeTab') activeTab: ElementRef;\r\n\r\n    searchItems = [];\r\n    alignItems = [];\r\n    summaryItems = [];\r\n    summaryItems2 = [];\r\n\r\n    private localeSer: LocaleService;\r\n    private messager: MessagerService;\r\n    private render2: Renderer2;\r\n    constructor(private cd: ChangeDetectorRef, private inject: Injector) {\r\n        this.messager = this.inject.get(MessagerService, null);\r\n        this.localeSer = this.inject.get(LocaleService);\r\n        this.render2 = this.inject.get(Renderer2, null);\r\n        this.searchItems = [\r\n            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },\r\n            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },\r\n            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }\r\n        ];\r\n\r\n        this.alignItems = [\r\n            { value: 'left', title: this.localeSer.getValue('datagrid.settings.alignLeft')},\r\n            { value: 'center', title: this.localeSer.getValue('datagrid.settings.alignCenter')},\r\n            { value: 'right', title: this.localeSer.getValue('datagrid.settings.alignRight')},\r\n        ];\r\n\r\n        this.summaryItems = [\r\n            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },\r\n            { value: 2, title: this.localeSer.getValue('datagrid.settings.summarySum') },\r\n            { value: 0, title: this.localeSer.getValue('datagrid.settings.summaryMax') },\r\n            { value: 1, title: this.localeSer.getValue('datagrid.settings.summaryMin') },\r\n            { value: 3, title: this.localeSer.getValue('datagrid.settings.summaryAverage') },\r\n            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },\r\n        ];\r\n\r\n        this.summaryItems2 = [\r\n            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },\r\n            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },\r\n        ];\r\n\r\n    }\r\n\r\n    private initData() {\r\n        this.sortNames = this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [];\r\n        this.viewColumns = this.getViewColumns();\r\n        this.sortInfo = this.gridInstance['__sortInfo'] || {};\r\n        this.columnFormat = [...this.columns[0]];\r\n        this.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];\r\n        this.groupRowState = this.gridInstance['expandGroupRows'];\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (!this.gridInstance.enableScheme) {\r\n            this.initData();\r\n        } else {\r\n            if (this.schemeInfo) {\r\n                this.sortInfo = this.schemeInfo.sortInfo || {};\r\n                if (this.sortInfo) {\r\n                    this.sortNames = this.sortInfo.sortName || '';\r\n                }\r\n                this.viewColumns = this.schemeInfo.viewColumns;\r\n                this.columnFormat = this.schemeInfo.columnFormat;\r\n                if (!this.columnFormat) {\r\n                    this.columnFormat = [...this.columns[0]];\r\n                }\r\n\r\n                if (this.schemeInfo.groupField) {\r\n                    if (typeof this.schemeInfo.groupField === 'string') {\r\n                        this.groupField = (this.schemeInfo.groupField as any).split(',');\r\n                    } else {\r\n                        this.groupField = this.schemeInfo.groupField || [];\r\n                    }\r\n                } else {\r\n                    this.groupField = [];\r\n                }\r\n                \r\n                return;\r\n            }\r\n            this.initData();\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n    }\r\n\r\n    close($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        if (this.modalRef) {\r\n            this.modalRef.close();\r\n        }\r\n    }\r\n\r\n    private setCurrentTab() {\r\n        if (this.render2) {\r\n\r\n            let left = 0;\r\n            switch(this.activeTabIndex) {\r\n                case 2:\r\n                    left = 68;\r\n                    break;\r\n                case 3:\r\n                    left = 130;\r\n                    break;\r\n                default:\r\n                    left = 0;\r\n                    break;\r\n\r\n            }\r\n\r\n            this.render2.setStyle(this.activeTab.nativeElement, 'transform', `translate3d(${left}px, 0px, 0px)`);\r\n        }\r\n    }\r\n\r\n\r\n    changeTabs($event: MouseEvent, idx) {\r\n        $event.stopPropagation();\r\n        this.activeTabIndex = idx;\r\n\r\n        this.setCurrentTab();\r\n    }\r\n\r\n    onSortInfoChange(sortInfo: any) {\r\n        this.sortInfo = sortInfo;\r\n    }\r\n\r\n    private getViewColumns() {\r\n        // å¤è¡¨å¤´\r\n        let visibleCls = [];\r\n        if (this.columns.length > 1 ) {\r\n            this.columns.forEach(cols => {\r\n                visibleCls = visibleCls.concat(this._getViewColumns(cols));\r\n            });\r\n        } else {\r\n            visibleCls = this.columns[0].filter(n => (n.visible || n.visible === undefined));\r\n        }\r\n\r\n        return visibleCls.map(n => n.field);\r\n    }\r\n\r\n    private _getViewColumns(cols: any[]) {\r\n        return cols.filter(c => !c.colspan && (c.visible || c.visible === undefined));\r\n    }\r\n\r\n\r\n    private mergeColumnFormats() {\r\n        if (this.sortInfo && Object.keys(this.sortInfo).length && this.columnFormat && this.columnFormat.length) {\r\n            const { sortName, sortOrder } = this.sortInfo;\r\n            if (sortName && sortName.length) {\r\n                sortName.forEach((n, i) => {\r\n                    const col = this.columnFormat.find((col: any) => {\r\n                        return col.field === n;\r\n                    });\r\n                    if (col) {\r\n                        col.sortable = true;\r\n                        col.order = sortOrder[i] || 'asc';\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    onColumnFormatChange(colFormatData) {\r\n        this.columnFormat = colFormatData;\r\n    }\r\n\r\n    onSubmitClick($event) {\r\n        this.mergeColumnFormats();\r\n        this.submitHandle.emit($event);\r\n    }\r\n\r\n    onCancelClick($event) {\r\n        this.cancelHandle.emit($event);\r\n    }\r\n\r\n    onSettingReset($event) {\r\n        // this.reset.emit($event);\r\n        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || 'ç¡®è®¤è¦æ¢å¤é»è®¤è®¾ç½®åï¼';\r\n        this.messager.confirm(restorDefaultText).subscribe((t: boolean) => {\r\n            if (t) {\r\n                this.reset2Default();\r\n            }\r\n        });\r\n    }\r\n\r\n    private reset2Default() {\r\n        const options = this.gridInstance.dfs['_state'].initialOptions;\r\n        if (options.columnFields && options.columnFields.length) {\r\n\r\n            const newColumns = [];\r\n            options.columnFields.forEach(c => {\r\n                if (c.field !== '_datagrid-setting-control_') {\r\n                    const col = this.gridInstance.columns[0].find((n: any) => n.field === c.field);\r\n                    if (col) {\r\n                        col.visible = c.visible;\r\n                        col.halign = c.halign;\r\n                        col.align = c.align;\r\n                        col.width = c.width;\r\n                        col.footer = {...c.footer || {}};\r\n                        col.groupFooter = {...c.groupFooter || {}};\r\n                        newColumns.push(col);\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.columns = [newColumns];\r\n        }\r\n\r\n        this.viewColumns = this.getViewColumns();\r\n\r\n        if (options.sort) {\r\n            const sortOrders = options.sort.sortOrder? options.sort.sortOrder.split(',') : [];\r\n            this.sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];\r\n            this.sortInfo = { sortName: this.sortNames, sortOrder:  sortOrders };\r\n        } else {\r\n            this.sortNames = [];\r\n            this.sortInfo = {};\r\n        }\r\n        this.columnFormat = [...this.columns[0]];\r\n        this.groupField =  options.groupField ? options.groupField.split(',') : [];\r\n    }\r\n    /** æ¾ç¤ºç®æ´æ¨¡å¼çªå£ */\r\n    showConcise($event) {\r\n\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        this.mergeColumnFormats();\r\n        this.concise.emit();\r\n    }\r\n}\r\n","export function getMultilingualValue(valObj, localeId) {\r\n    if (valObj && typeof valObj === 'object' && Object.keys(valObj).length > 0) {\r\n        localeId = localeId || 'zh-CHS';\r\n        const val = valObj[localeId];\r\n        if (val !== undefined) {\r\n            return val;\r\n        } else {\r\n            return '';\r\n        }\r\n    } else {\r\n        return '';\r\n    }\r\n}","\r\nimport { ChangeDetectorRef, Component, EventEmitter, HostBinding, Injector, Input, OnInit,\r\n        Output, ViewEncapsulation, HostListener, ViewChild, ElementRef } from '@angular/core';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\nimport { SettingModel } from '../setting.model';\r\nimport { getMultilingualValue } from '../getValueWithLocaleId';\r\nimport { NotifyService } from '@farris/ui-notify';\r\n\r\n@Component({\r\n    selector: 'datagrid-settings-simple',\r\n    templateUrl: './simple-columns.component.html',\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class SimpleColumnsComponent implements OnInit {\r\n    @Input() enableScheme = false;\r\n    @Input() seartTypes: any = [];\r\n    /** ææå */\r\n    @Input() columns = [];\r\n    /** æ¾ç¤ºçå */\r\n    @Input() fields = [];\r\n    /** ç¹å»ä¾§è¾¹æ ·å¼ä»¥å¤çåºåéèé¢æ¿ãé»è®¤ä¸º true */\r\n    @Input() clickToHidden = true;\r\n\r\n    @Input() top = 0;\r\n    private _schemeList = [];\r\n    @Input()\r\n    get schemeList() {\r\n        return this._schemeList;\r\n    }\r\n    set schemeList(val) {\r\n        if (val && val.length) {\r\n            val.forEach(n => {\r\n                n['_title_'] = getMultilingualValue(JSON.parse(n.name), this.localeSer.localeId);\r\n            });\r\n        }\r\n        this._schemeList = val || [];\r\n    }\r\n\r\n    @HostBinding('class') cls = 'f-datagrid-settings-simple-host';\r\n\r\n    @ViewChild('colcontainer') container: ElementRef;\r\n    @ViewChild('okbtn') btnOk: ElementRef;\r\n    @ViewChild('inputWord') searchInput: ElementRef;\r\n\r\n    @ViewChild('schemeitems') schemeitemsEleRef: ElementRef;\r\n    @ViewChild('btnSchemeName') btnRef: ElementRef;\r\n\r\n    @Output() formatChange = new EventEmitter();\r\n    @Output() fieldsChange = new EventEmitter();\r\n    @Output() submit = new EventEmitter();\r\n    @Output() closed = new EventEmitter();\r\n    @Output() advanced = new EventEmitter();\r\n\r\n    @Output() addNewScheme = new EventEmitter();\r\n    @Output() showSchemeList = new EventEmitter();\r\n    @Output() activeItemChange = new EventEmitter();\r\n\r\n    @Output() schemeChanged = new EventEmitter();\r\n\r\n    allCols = [];\r\n    columnType = 'all';\r\n\r\n    gridInstance: DatagridComponent;\r\n    localeSer: LocaleService;\r\n    isEn = false;\r\n\r\n    showSchemePanel = false;\r\n\r\n    switchValue = false;\r\n    // å½åæ¹æ¡\r\n    currentSchemeItem = null;\r\n\r\n    searchResultIsVisibleAll = false;\r\n    defaultSchemeName = 'ç³»ç»é¢å¶';\r\n\r\n    private messager: MessagerService;\r\n    private notify: NotifyService;\r\n    \r\n    settings: SettingModel = {};\r\n\r\n    constructor(private injector: Injector, public cd: ChangeDetectorRef) {\r\n        this.localeSer = this.injector.get(LocaleService, null);\r\n        this.messager = this.injector.get(MessagerService, null);\r\n        this.notify = this.injector.get(NotifyService, null);\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        const clsname = $event.target['className'] || '';\r\n        if (clsname.indexOf('f-datagrid-settings-simple-host') > -1) {\r\n            // éèä¾§è¾¹æ ï¼\r\n            if (this.clickToHidden) {\r\n                this.close();\r\n            }\r\n        }\r\n\r\n        this.showSchemePanel = false;\r\n    }\r\n\r\n    @HostListener('window:keydown.esc', ['$event'])\r\n    onEscKeydown($event) {\r\n        $event.stopPropagation();\r\n        if (!document.querySelector('modal-container')) {\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    @HostListener('window:keydown.enter', ['$event'])\r\n    onEnterKeydown($event) {\r\n        $event.stopPropagation();\r\n        if (!document.querySelector('modal-container')) {\r\n            this.onSubmitClick();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onControlGKeydown($event: KeyboardEvent) {\r\n        if ($event.ctrlKey && !document.querySelector('modal-container')) {\r\n            $event.preventDefault();\r\n            $event.stopPropagation();\r\n            if ($event.key.toLowerCase() === 'g') {\r\n                this.showAdvanced($event);\r\n            } else if ($event.key.toLowerCase() === 'r') {\r\n                this.onSettingReset();\r\n            } else if ($event.key.toLowerCase() === 's') {\r\n                this.searchInput.nativeElement.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCurrentSchemeSettings() {\r\n        if (this.currentSchemeItem && this.currentSchemeItem.queryConditionString) {\r\n            const schemeSettings = JSON.parse(this.currentSchemeItem.queryConditionString);\r\n            return schemeSettings[this.localeSer.localeId] as SettingModel;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.allCols = this.columns[0];\r\n        if (this.gridInstance.enableScheme && this.currentSchemeItem) {\r\n            this.settings = this.getCurrentSchemeSettings() || {};\r\n        }\r\n\r\n        if (this.settings && this.settings.viewColumns && this.settings.viewColumns.length) {\r\n            this.fields = this.settings.viewColumns;\r\n            this.dirtySettings(true);\r\n        } else {\r\n            this.fields = this.getViewColumns();\r\n        }\r\n\r\n        this.container.nativeElement.focus();\r\n\r\n        this.defaultSchemeName = this.localeSer.getValue('datagrid-scheme.syspreset') || this.gridInstance.defaultSchemeName;\r\n    }\r\n\r\n    private getViewColumns() {\r\n        // å¤è¡¨å¤´\r\n        let visibleCls = [];\r\n        if (this.columns.length > 1 ) {\r\n            this.columns.forEach(cols => {\r\n                visibleCls = visibleCls.concat(this._getViewColumns(cols));\r\n            });\r\n        } else {\r\n            visibleCls = this.columns[0].filter(n => (n.visible || n.visible === undefined));\r\n        }\r\n\r\n        return visibleCls.map(n => n.field);\r\n    }\r\n\r\n    private _getViewColumns(cols: any[]) {\r\n        return cols.filter(c => !c.colspan && (c.visible || c.visible === undefined));\r\n    }\r\n    \r\n    // æ ¹æ®åçç±»åè¿è¡ç­éè¿æ»¤ï¼\r\n    // all ææå\r\n    // visible å¯è§å\r\n    // hidden éèå\r\n    // group åç»å\r\n    filterColumns(searchWords = '') {\r\n        let cols = [];\r\n\r\n        if (this.switchValue) {\r\n            cols = this.columns[0].filter(n => this.fields.indexOf(n.field) > -1);\r\n        } else {\r\n            cols = this.columns[0];\r\n        }\r\n\r\n        if (searchWords) {\r\n            cols = cols.filter(c => c.title.toLowerCase().indexOf(searchWords.toLowerCase()) > -1);\r\n        }\r\n\r\n        this.allCols = cols;\r\n        this.searchResultIsVisibleAll = this.allCols.filter(n => n.visible).length === this.allCols.length;\r\n    }\r\n\r\n    private onFieldsChanged() {\r\n        if (!this.gridInstance.enableScheme) {\r\n            this.fieldsChange.emit(this.fields);\r\n        }\r\n    }\r\n\r\n    onDblClick($event, col) {\r\n        this.onCheckboxClick($event, col);\r\n    }\r\n\r\n    onCheckboxClick($event, col) {\r\n        $event.stopPropagation();\r\n        this.showSchemePanel = false;\r\n        let checked = false;\r\n        const index = this.fields.indexOf(col.field);\r\n        if (index === -1) {\r\n            this.fields.push(col.field);\r\n            checked = true;\r\n        } else {\r\n            this.fields.splice(index, 1);\r\n            checked = false;\r\n        }\r\n\r\n        this.columns[0].forEach(f => {\r\n            f.visible = this.fields.indexOf(f.field) > -1;\r\n        });\r\n\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n\r\n        this.searchResultIsVisibleAll = this.allCols.length === this.fields.length;\r\n\r\n        this.dirtySettings(true);\r\n        this.onFieldsChanged();\r\n    }\r\n\r\n    searchColumn($event) {\r\n        const txt = $event.target.value;\r\n        this.filterColumns(txt);\r\n    }\r\n\r\n    onFieldDrop(fieldInfo, txt, ulElRef: any) {\r\n        this.showSchemePanel = false;\r\n        const { removedIndex, addedIndex } = fieldInfo;\r\n\r\n        const moveItem = this.allCols[removedIndex];\r\n        const targetItem = this.allCols[addedIndex];\r\n\r\n        const moveItemIndex = this.columns[0].findIndex(n => n.field === moveItem.field);\r\n        const targetItemIndex = this.columns[0].findIndex(n => n.field === targetItem.field);\r\n\r\n        const removedItem = this.columns[0].splice(moveItemIndex, 1);\r\n        this.columns[0].splice(targetItemIndex, 0, ...removedItem);\r\n\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n\r\n        this.onFieldsChanged();\r\n        this.filterColumns(txt);\r\n    }\r\n\r\n    /**\r\n     * 0: 1ä¸ªä¹æ²¡æéä¸­ï¼ 1: å¨é¨éä¸­ï¼ 2: æéä¸­çä¹ææ²¡éä¸­ç\r\n     */\r\n    private getCheckAllState() {\r\n        if (!this.searchInput.nativeElement.value) {\r\n            if (this.fields.length === 0) {\r\n                return 0;\r\n            } else {\r\n                if (this.fields.length === this.columns[0].length) {\r\n                    return 1;\r\n                }\r\n                return 2;\r\n            }\r\n        } else {\r\n            const visibleLen = this.allCols.filter(n => n.visible).length;\r\n            if (visibleLen === this.allCols.length) {\r\n                return 1;\r\n            } else {\r\n                if (visibleLen < this.allCols.length) {\r\n                    if (visibleLen === 0) {\r\n                        return 0\r\n                    }\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // å¨é\r\n    onCheckAllClick($event: MouseEvent, txt) {\r\n        $event.stopPropagation();\r\n        this.showSchemePanel = false;\r\n        const state = this.getCheckAllState();\r\n\r\n        const isCheckAll = state === 0 || state === 2;\r\n\r\n        if (!txt) {\r\n            this.columns[0].forEach(n => n.visible = isCheckAll);\r\n            \r\n        } else {\r\n            this.columns[0].forEach(n => {\r\n                const item = this.allCols.find(a => n.field == a.field);\r\n                if (item) {\r\n                    n.visible = isCheckAll;\r\n                    item.visible = isCheckAll;\r\n                }\r\n            });\r\n\r\n        }\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n        this.searchResultIsVisibleAll = this.allCols.length === this.fields.length;\r\n\r\n        this.dirtySettings(true);\r\n\r\n        this.onFieldsChanged();\r\n        this.filterColumns(txt);\r\n    }\r\n\r\n    close($event?: MouseEvent) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        this.closed.emit();\r\n    }\r\n\r\n    // æå¼é«çº§è®¾ç½®çªå£\r\n    showAdvanced($event) {\r\n        this.close($event);\r\n        this.advanced.emit({ viewFields: this.fields });\r\n    }\r\n\r\n    // æ¢å¤é»è®¤\r\n    onSettingReset($event?: any) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        this.showSchemePanel = false;\r\n        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || 'æ¨ç¡®å®è¦æ¢å¤é»è®¤è®¾ç½®åï¼';\r\n        this.messager.confirm(restorDefaultText, 2035).subscribe((t: boolean) => {\r\n            if (t) {\r\n                this.reset2Default();\r\n                this.dirtySettings(true);\r\n            } \r\n        });\r\n    }\r\n\r\n    private reset2Default() {\r\n        const options = this.gridInstance.dfs['_state'].initialOptions;\r\n        if (options.columnFields && options.columnFields.length) {\r\n\r\n            const newColumns = [];\r\n            options.columnFields.forEach(c => {\r\n                if (c.field !== '_datagrid-setting-control_') {\r\n                    const col = this.columns[0].find((n: any) => n.field === c.field);\r\n                    if (col) {\r\n                        col.visible = c.visible;\r\n                        col.halign = c.halign;\r\n                        col.align = c.align;\r\n                        col.width = c.width;\r\n                        col.footer = {...c.footer || {}};\r\n                        col.groupFooter = {...c.groupFooter || {}};\r\n                        newColumns.push(col);\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.columns = [newColumns];\r\n        }\r\n\r\n        this.allCols = this.columns[0];\r\n        this.settings = {};\r\n        this.fields = this.getViewColumns();\r\n        this.settings.viewColumns = this.fields;\r\n        this.settings.columnFormat = [...this.columns[0]];\r\n        if (options.sort) {\r\n            const sortOrders = options.sort.sortOrder? options.sort.sortOrder.split(',') : [];\r\n            const sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];\r\n            this.settings.sortInfo = { sortName: sortNames, sortOrder:  sortOrders };\r\n        } else {\r\n            this.settings.sortInfo = {};\r\n        }\r\n        this.settings.groupField =  options.groupField ? options.groupField.split(',') : [];\r\n    }\r\n\r\n    // ç¡®å®æé®ç¹å»äºä»¶\r\n    onSubmitClick($event?: any) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        if (!this.fields || !this.fields.length) {\r\n            this.notify.warning('è¯·éæ©è¦æ¾ç¤ºçå­æ®µ');\r\n            return;\r\n        }\r\n\r\n        this.showSchemePanel = false;\r\n        this.settings.viewColumns = this.fields;\r\n\r\n        if (!this.enableScheme || !this.currentSchemeItem) {\r\n            if (!this.settings.columnFormat) {\r\n                this.settings.columnFormat = [...this.columns[0]];\r\n            }\r\n\r\n            if (!this.settings.sortInfo) {\r\n                this.settings.sortInfo = {\r\n                    sortName: this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [],\r\n                    sortOrder:  this.gridInstance.sortOrder ? this.gridInstance.sortOrder.split(',') : []\r\n                };\r\n            }\r\n\r\n            if (this.settings.groupField === undefined) {\r\n                this.settings.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];\r\n            }\r\n        } else {\r\n            const _settings = this.getCurrentSchemeSettings();\r\n            if (_settings) {\r\n                this.settings = Object.assign(_settings || {}, this.settings);\r\n            }\r\n        }\r\n        // this.activeItemChange.emit(this.activeSchemeItem);\r\n        this.submit.emit({content: this.settings, close: this.close.bind(this), target: this.btnOk.nativeElement, currentScheme: this.currentSchemeItem});\r\n    }\r\n\r\n    collectSettings() {\r\n        this.settings.viewColumns = this.fields;\r\n\r\n        if (!this.settings.columnFormat) {\r\n            this.settings.columnFormat = [...this.columns[0]];\r\n        }\r\n\r\n        if (!this.settings.sortInfo) {\r\n            this.settings.sortInfo = {\r\n                sortName: this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [],\r\n                sortOrder:  this.gridInstance.sortOrder ? this.gridInstance.sortOrder.split(',') : []\r\n            };\r\n        }\r\n\r\n        if (this.settings.groupField === undefined) {\r\n            this.settings.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];\r\n        }\r\n        \r\n        return { ...this.settings };\r\n    }\r\n\r\n    // æ¾ç¤ºä¸ææ¹æ¡åè¡¨\r\n    onChooseScheme($event) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        this.showSchemePanel = !this.showSchemePanel;\r\n\r\n        setTimeout(() => {\r\n            if (this.schemeitemsEleRef && this.currentSchemeItem) {\r\n                const itemEl = this.schemeitemsEleRef.nativeElement.querySelector(`#schemeitem_${this.currentSchemeItem.id}`);\r\n                if (itemEl) {\r\n                    if (itemEl.scrollIntoViewIfNeeded) {\r\n                        itemEl.scrollIntoViewIfNeeded();\r\n                    } else {\r\n                        itemEl.scrollIntoView();\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // ä»æ¾ç¤ºå¯è§å\r\n    onlySeeVisibleColumns($event) {\r\n        this.switchValue = $event;\r\n        this.filterColumns();\r\n    }\r\n\r\n    refresh() {\r\n        if (!this.cd['destroyed']) {\r\n            this.cd.detectChanges();\r\n        }\r\n    }\r\n\r\n    hidePanel() {\r\n        this.showSchemePanel = false;\r\n        this.refresh();\r\n    }\r\n\r\n    // æ°å¢æ¹æ¡\r\n    onNewSchemeClick($event, saveas = 'new') {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        this.hidePanel();\r\n        this.addNewScheme.emit({ type: saveas || 'new' });\r\n\r\n        \r\n    }\r\n\r\n    // æ¾ç¤ºæ¹æ¡åè¡¨ç®¡ççªå£\r\n    onShowSchemeList($event) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        this.hidePanel();\r\n        this.showSchemeList.emit();\r\n    }\r\n\r\n    // æ¹æ¡ç¹å»\r\n    onSchemeItemClick($event, item) {\r\n        setTimeout(() => {\r\n            this.currentSchemeItem = item;\r\n            this.showSchemePanel = false;\r\n\r\n            let schemeSettings = null;\r\n            if (item && item.queryConditionString) {\r\n                schemeSettings = JSON.parse(item.queryConditionString);\r\n                schemeSettings = schemeSettings[this.localeSer.localeId];\r\n\r\n                if (!schemeSettings) {\r\n                    this.reset2Default();\r\n                } else {\r\n                    this.settings = schemeSettings;\r\n                    this.fields = schemeSettings.viewColumns;\r\n\r\n\r\n                    this.columns[0].forEach(f => {\r\n                        f.visible = this.fields.indexOf(f.field) > -1;\r\n                    });\r\n                }\r\n            } else {\r\n                this.reset2Default();\r\n            }\r\n\r\n            this.schemeChanged.emit(item);\r\n            this.refresh();\r\n        });\r\n    }\r\n\r\n\r\n    dirtySettings(flag) {\r\n        // this.isChanged = flag;\r\n    }\r\n\r\n    clearSearch($event, input) {\r\n        if (input && input.value) {\r\n            this.filterColumns('');\r\n            input.value = '';\r\n        }\r\n    }\r\n}\r\n","import { Observable, of, Subject } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { BatchScheme, DatagridSchemeModel, DgSchemeState, SchemeAuthModel, SchemeState } from \"./setting.model\";\r\n\r\n/** ä¿å­æ¹æ¡API */\r\nconst SCHEME_WEBAPI = '/api/runtime/sys/v1.0/querysolution';\r\n/** è·åæ¹æ¡åè¡¨API */\r\nconst SCHEME_WEBAPI_QUERY = `${SCHEME_WEBAPI}/belongId/`;\r\n/** æ¹æ¡åè¡¨ç®¡ç- è®¾é»è®¤ãå é¤ API */\r\nconst SCHEME_WEBAPI_UPDATE = `${SCHEME_WEBAPI}/batch`;\r\n/** æééªè¯ */\r\nconst SCHEME_WEBAPI_Auth = '/api/runtime/sys/v1.0/querysolution/componentType/Datagrid';\r\n\r\nconst LANGUAGE_WEBAPI = '/api/runtime/sys/v1.0/loginInfo?infoType=supportedLanguage';\r\n\r\n\r\nexport class DatagridSchemeService {\r\n    private restService = null;\r\n    private state: DgSchemeState = {};\r\n\r\n    schemeList$ = new Subject();\r\n\r\n    constructor() {\r\n    }\r\n\r\n    update(d: SchemeState, gridId: string) {\r\n        if (!this.state[gridId]) {\r\n            this.state[gridId] = {};\r\n        }\r\n        this.state[gridId] = Object.assign(this.state[gridId], d);\r\n    }\r\n\r\n    setRestService(httpSer: any) {\r\n        if (httpSer && httpSer['befRepository']) {\r\n            this.restService = httpSer['befRepository']['restService'];\r\n        }\r\n    }\r\n\r\n    private getWebFormKey() {\r\n        const webformHash = window.location.hash.split('?')[0];\r\n        return webformHash.substring(webformHash.lastIndexOf('/') + 1);\r\n    }\r\n\r\n    getSchemeKey(gridId: string) {\r\n        const formKey = this.getWebFormKey();\r\n        return `${formKey}_DatagridScheme_${gridId}`;\r\n    }\r\n\r\n    getSchemeList(gridID: string): Observable<DatagridSchemeModel[]> {\r\n        const uri = SCHEME_WEBAPI_QUERY + this.getSchemeKey(gridID);\r\n        if (this.restService) {\r\n            return this.restService.invoke(uri, 'GET', null, null, false);\r\n        }\r\n    }\r\n\r\n    saveScheme(scheme: DatagridSchemeModel, gridID: string, isUpdate = false) {\r\n        if (this.restService) {\r\n            const httpMethod = isUpdate ? 'PUT': 'POST';\r\n            scheme.belongId = this.getSchemeKey(gridID);\r\n            return this.restService.invoke(SCHEME_WEBAPI, httpMethod, null, { body: scheme}, false);\r\n        }\r\n    }\r\n\r\n    updateScheme(param: BatchScheme, gridID: string): Observable<any> {\r\n        if (!param) {\r\n            return of(false);\r\n        }\r\n        const belongId = this.getSchemeKey(gridID);\r\n        param.belongId = belongId\r\n\r\n        if (param.belongId) {\r\n            return this.restService.invoke(SCHEME_WEBAPI_UPDATE, 'PUT', null, {body: param}, false);\r\n        }\r\n    }\r\n\r\n    getStateValue(gridId, ...statePro) {\r\n        const dgState = this.state[gridId];\r\n        if (dgState) {\r\n            if (statePro && statePro.length) {\r\n                return statePro.reduce((r, c) => {\r\n                    return r[c];\r\n                }, dgState)\r\n            }\r\n\r\n            return dgState;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private updateStateValue(gridId, propertyName, value) {\r\n        this.update({[propertyName]: value}, gridId);\r\n    }\r\n\r\n    setSchemeList(gridId, newSchemeList) {\r\n        this.updateStateValue(gridId, 'list', newSchemeList);\r\n        this.schemeList$.next(newSchemeList);\r\n    }\r\n\r\n    hasSchemeName(gridId, schemeName: any) {\r\n        const schemeList = this.getStateValue(gridId, 'list');\r\n        if (!schemeList || !schemeList.length) {\r\n            return false;\r\n        }\r\n\r\n        if (typeof schemeName === 'string') {\r\n            return !!schemeList.find(n => n.name === schemeName.trim());\r\n        } else {\r\n            if (typeof schemeName === 'object') {\r\n                const replayNames = [];\r\n                schemeList.forEach(n => {\r\n                    if (n.name) {\r\n                        const nameObj = JSON.parse(n.name);\r\n                        // const currentNames = Object.values(nameObj);\r\n                        for(let k in schemeName) {\r\n                            if (nameObj[k] === schemeName[k]) {\r\n                                replayNames.push(k);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                return replayNames;\r\n            }\r\n        }\r\n    }\r\n\r\n    checkAuthority(): Observable<SchemeAuthModel> {\r\n        return this.restService.invoke(SCHEME_WEBAPI_Auth, 'GET', null, null, false);\r\n    }\r\n\r\n    getLanguages() {\r\n        if (this.restService) {\r\n            return this.restService.invoke(LANGUAGE_WEBAPI, 'GET', null, null, false);\r\n        } else {\r\n            return of([]);\r\n        }\r\n    }\r\n}\r\n","import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'new-scheme',\r\n    templateUrl: './newscheme.component.html',\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NewSchemeComponent implements OnInit {\r\n\r\n    @ViewChild('header') header: ElementRef<any>;\r\n\r\n    @Input() dataPermissionIds = [];\r\n\r\n    @Output() closeModal = new EventEmitter();\r\n    @Output() submitModal = new EventEmitter();\r\n    @Output() checkAuthority = new EventEmitter();\r\n\r\n    schemeInfo = {\r\n        name: '',\r\n        isDefault: false,\r\n        type: 'private',\r\n        orgids: ''\r\n    }\r\n\r\n    schemeType = 'private';\r\n\r\n    noPublicAuthority = false;\r\n    noOrgAuthority = false;\r\n\r\n    languages = [{ code: 'zh-CHS', name: 'ä¸­æç®ä½', default: true },{ code: 'en', name: 'English' },{ code: 'zh-CHT', name: 'ä¸­æç¹ä½'}];\r\n    nameMaxLength = { 'zh-CHS': 9, 'zh-CHT': 9, en: 20 };\r\n    \r\n    constructor(private cd: ChangeDetectorRef) { }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    close($event) {\r\n        this.closeModal.emit();\r\n    }\r\n\r\n    submit($event) {\r\n        this.submitModal.emit(this.schemeInfo);\r\n    }\r\n\r\n    onCancelClick($event) {\r\n        this.close($event);\r\n    }\r\n\r\n    onSelectedOrg($event) {\r\n        if ($event.selections && $event.selections.length ) {\r\n            let orgids = $event.selections.map(n => n.orgId);\r\n            this.schemeInfo.orgids = orgids;\r\n        }\r\n    }\r\n\r\n    onSetRangeType($event: MouseEvent, val) {\r\n        $event.stopPropagation();\r\n        this.schemeType = val;\r\n        if (val === 'public' || val === 'org') {\r\n            this.checkAuthority.emit({ value: val, schemeInfo: this.schemeInfo });\r\n        } else {\r\n            this.schemeInfo.type = val;\r\n        }\r\n    }\r\n\r\n    refresh(hasAuthority = { public: true, org: true }) {\r\n        this.schemeInfo = {...this.schemeInfo};\r\n        this.schemeType = this.schemeInfo.type;\r\n        this.noPublicAuthority = !hasAuthority.public;\r\n        this.noOrgAuthority = !hasAuthority.org;\r\n        this.cd.detectChanges();\r\n    }\r\n\r\n    getSelectedId($event) {\r\n        if ($event.selections &&$event.selections.length) {\r\n            this.schemeInfo.orgids = $event.selections.map(n => n.orgId);\r\n        } else {\r\n            this.schemeInfo.orgids = '';\r\n        }\r\n    }\r\n\r\n    clearAllOrgs() {\r\n        this.schemeInfo.orgids = '';\r\n    }\r\n}\r\n","import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Injector, Input, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { getMultilingualValue } from '../getValueWithLocaleId';\r\n\r\n@Component({\r\n    selector: 'scheme-list',\r\n    templateUrl: 'scheme-list.component.html'\r\n})\r\n\r\nexport class SchemeListComponent implements OnInit {\r\n\r\n    @Input() items = [];\r\n    \r\n    @Output() closeModal = new EventEmitter();\r\n    @Output() submitModal = new EventEmitter();\r\n\r\n    @Input() removeItem = true;\r\n\r\n    \r\n    @ViewChild('header') header: ElementRef<any>;\r\n    @ViewChild('schemeName') schemeName: TemplateRef<any>;\r\n    @ViewChild('schemeIsDefault') schemeIsDefault: TemplateRef<any>;\r\n    @ViewChild('btnDel') btnDel: TemplateRef<any>;\r\n    @ViewChild('dg') dg: DatagridComponent;\r\n\r\n    columns = [];\r\n\r\n    currentUserId = '';\r\n   \r\n    private changes: {\r\n        defaultId?: string,\r\n        deletedIds?: any[]\r\n    } = null;\r\n    constructor(private cd: ChangeDetectorRef, private localeSer: LocaleService, private injector: Injector) { }\r\n\r\n    ngOnInit(): void {\r\n\r\n        const colName = this.localeSer.getValue('datagrid-scheme.columns.name') || 'åç§°';\r\n        const colType = this.localeSer.getValue('datagrid-scheme.columns.type') || 'å±æ§';\r\n        const colDefault = this.localeSer.getValue('datagrid-scheme.columns.isDefault') || 'é»è®¤';\r\n        const colCreator = this.localeSer.getValue('datagrid-scheme.columns.username') || 'åå»ºäºº';\r\n        const colMgr = this.localeSer.getValue('datagrid-scheme.columns.mgr') || 'ç®¡ç';\r\n\r\n        const publicTxt = this.localeSer.getValue('datagrid-scheme.isPublic') || 'å¬å±';\r\n        const privateTxt = this.localeSer.getValue('datagrid-scheme.isPrivate') || 'ä¸ªäºº';\r\n        const orgTxt = this.localeSer.getValue('datagrid-scheme.isOrg') || 'ç»ç»';\r\n\r\n\r\n        this.columns = [\r\n            // {field: 'name', title: 'åç§°', width: 150, template: this.schemeName},\r\n            {field: 'name', title: colName, width: 150, formatter: (v) => {\r\n                return getMultilingualValue(JSON.parse(v), this.localeSer.localeId);\r\n            }},\r\n            {field: 'type', title: colType, width: 50, halign: 'center', align: 'center', formatter: (v, d) => {\r\n                switch(v) {\r\n                    case 'public':\r\n                        return '<span class=\"scheme-manager__label px-1 public\">'+ publicTxt +'</span>';\r\n                    case 'org':\r\n                        return '<span class=\"scheme-manager__label px-1 org\">'+ orgTxt +'</span>';\r\n                    case 'private':\r\n                    default:\r\n                        return '<span class=\"scheme-manager__label px-1 private\">'+ privateTxt +'</span>';\r\n                }\r\n            }},\r\n            {field: 'isDefault', title: colDefault, width: 50, halign: 'center', align: 'center', template: this.schemeIsDefault },\r\n            {field: 'userName', title: colCreator, width: 80},\r\n            {title: colMgr, width: 50, template: this.btnDel, halign: 'center', align: 'center',}\r\n        ];\r\n    \r\n    }\r\n\r\n    onClose($event) {\r\n        this.closeModal.emit();\r\n    }\r\n\r\n    onSubmitClick($event) {\r\n        this.submitModal.emit( this.changes);\r\n    }\r\n\r\n    onCancelClick($event) {\r\n        this.closeModal.emit();\r\n    }\r\n\r\n    setDefault($event: any, ctx) {\r\n        const r = $event == '1';\r\n        // $event.stopPropagation();\r\n        this.items.forEach(n => {\r\n            n.isDefault = false;\r\n            if (n.id === ctx.rowData.id && r) {\r\n                n.isDefault = r;\r\n            }\r\n        });\r\n\r\n        this.items = [...this.items];\r\n\r\n        const defaultItem = this.items.find(n => n.isDefault);\r\n        if (defaultItem) {\r\n            this.changes = this.changes || {};\r\n            this.changes.defaultId = defaultItem.id;\r\n        }\r\n        // this.cd.detectChanges();\r\n    }\r\n\r\n    onSchemeDel($event, ctx) {\r\n        if ((this.currentUserId === ctx.rowData[\"userId\"] &&  ctx.rowData['type']=='private') || this.removeItem) {\r\n            $event.stopPropagation();\r\n            const id = ctx.rowData.id;\r\n            this.items = this.items.filter(n => n.id !== id);\r\n            this.changes = this.changes || {};\r\n            this.changes.deletedIds = [...(this.changes.deletedIds || []), id];\r\n            if (id === this.changes.defaultId) {\r\n                this.changes.defaultId = '';\r\n                delete this.changes.defaultId;\r\n            }\r\n        }\r\n    }\r\n}","/** åè®¾ç½®ç¸å³å¤è¯­èµæº */\r\nexport const DATAGRID_SETTINGS_LOCALEDATA = {\r\n    en: {\r\n        'datagrid-settings': {\r\n            noAuth: {\r\n                public: 'You do not have permission to set the usage scope of the scheme as public.',\r\n                org: 'You do not have permission to set the usage range of the scheme as organization.'\r\n            },\r\n            has: {\r\n                exist: 'The scheme name already exists, please modify it.',\r\n                chs: 'Simplified Chinese name already exists.',\r\n                cht: 'Traditional Chinese name already exists.',\r\n                en: 'English name already exists.'\r\n            },\r\n            required: {\r\n                schemeName: 'Please enter a scheme name.',\r\n                chs: 'Please enter a simplified Chinese name.',\r\n                cht: 'Please enter a name in Traditional Chinese.',\r\n                en: 'Please enter an English name.',\r\n                org: 'Please select an organization.'\r\n            },\r\n            groupRowStatus: {\r\n                label: 'Group Row Status',\r\n                expand: 'open',\r\n                collapse: 'fold'\r\n            }\r\n        },\r\n        'datagrid-scheme': {\r\n            saveTitle: 'Save Scheme',\r\n            namePlaceholder: 'Please enter a scheme name (no more than 9 characters)',\r\n            setPrivate: 'Private',\r\n            privateTip: 'When set as private, you can only view and use the scheme yourself',\r\n            setPublic: 'Public',\r\n            publicTip: 'When public, all users can view and use the scheme',\r\n            setOrg: 'Organization',\r\n            orgTip: 'When it is set to organization, users in the organization can view and use the scheme',\r\n            setDefault: 'Default',\r\n            defaultTip: 'The next time you enter this function, the scheme will be loaded by default',\r\n            syspreset: 'System preset',\r\n            isDefault: 'Default',\r\n            isPublic: 'Public',\r\n            isOrg: 'Org',\r\n            isPrivate: 'Private',\r\n            newScheme: 'Add New Scheme',\r\n            mgrScheme: 'Manage',\r\n            saveas: 'Save as',\r\n            onlyshowcolumns: 'only the display column',\r\n            schemeList: 'Scheme list',\r\n            delete: 'Delete this shceme',\r\n            columns:  {\r\n                name: 'Name',\r\n                type: 'Type',\r\n                isDefault: 'IsDefault',\r\n                username: 'Creator',\r\n                mgr: 'Manage'\r\n            }\r\n        }\r\n    },\r\n    'zh-CHS': {\r\n        'datagrid-settings': {\r\n            noAuth: {\r\n                public: 'æ¨æ²¡æå°æ¹æ¡çä½¿ç¨èå´è®¾ç½®ä¸ºå¬å±çæéã',\r\n                org: 'æ¨æ²¡æå°æ¹æ¡çä½¿ç¨èå´è®¾ç½®ä¸ºç»ç»çæéã'\r\n            },\r\n            has: {\r\n                exist: 'æ¹æ¡åç§°å·²å­å¨ï¼è¯·ä¿®æ¹ã',\r\n                chs: 'ç®ä½ä¸­æåç§°å·²å­å¨ã',\r\n                cht: 'ç¹ä½ä¸­æåç§°å·²å­å¨ã',\r\n                en: 'è±æåç§°å·²å­å¨ã'\r\n            },\r\n            required: {\r\n                schemeName: 'è¯·è¾å¥æ¹æ¡åç§°ã',\r\n                chs: 'è¯·è¾å¥ç®ä½ä¸­æåç§°ã',\r\n                cht: 'è¯·è¾å¥ç¹ä½ä¸­æåç§°ã',\r\n                en: 'è¯·è¾å¥è±æåç§°ã',\r\n                org: 'è¯·éæ©ç»ç»ã'\r\n            },\r\n            groupRowStatus: {\r\n                label: 'åç»è¡ç¶æ',\r\n                expand: 'å±å¼',\r\n                collapse: 'æå '\r\n            }\r\n        },\r\n        'datagrid-scheme': {\r\n            saveTitle: 'ä¿å­æ¹æ¡',\r\n            namePlaceholder: 'è¯·è¾å¥æ¹æ¡åç§°ï¼æå¤ä¸è¶è¿9ä¸ªå­ç¬¦ï¼',\r\n            setPrivate: 'è®¾ä¸ºä¸ªäºº',\r\n            privateTip: 'è®¾ä¸ºä¸ªäººæ¶ï¼åªè½èªå·±æ¥çãä½¿ç¨è¯¥æ¹æ¡',\r\n            setPublic: 'è®¾ä¸ºå¬å±',\r\n            publicTip: 'è®¾ä¸ºå¬å±æ¶ï¼ææç¨æ·é½å¯æ¥çãä½¿ç¨è¯¥æ¹æ¡',\r\n            setOrg: 'è®¾ä¸ºç»ç»',\r\n            orgTip: 'è®¾ä¸ºç»ç»æ¶ï¼ç»ç»åçç¨æ·åè½æ¥çãä½¿ç¨è¯¥æ¹æ¡',\r\n            setDefault: 'è®¾ä¸ºé»è®¤',\r\n            defaultTip: 'ä¸æ¬¡è¿å¥æ­¤åè½æ¶ï¼é»è®¤å è½½è¯¥æ¹æ¡',\r\n            syspreset: 'ç³»ç»é¢å¶',\r\n            isDefault: 'é»è®¤',\r\n            isPublic: 'å¬å±',\r\n            isOrg: 'ç»ç»',\r\n            isPrivate: 'ä¸ªäºº',\r\n            newScheme: 'æ°å¢æ¹æ¡',\r\n            mgrScheme: 'ç®¡ç',\r\n            saveas: 'å¦å­ä¸º',\r\n            onlyshowcolumns: 'ä»çå±ç¤ºå',\r\n            schemeList: 'æ¹æ¡åè¡¨',\r\n            delete: 'å é¤',\r\n            columns:  {\r\n                name: 'åç§°',\r\n                type: 'å±æ§',\r\n                isDefault: 'é»è®¤',\r\n                username: 'åå»ºäºº',\r\n                mgr: 'ç®¡ç'\r\n            }\r\n        }\r\n    },\r\n    'zh-CHT': {\r\n        'datagrid-settings': {\r\n            noAuth: {\r\n                public: 'æ¨æ²æå°æ¹æ¡çä½¿ç¨ç¯åè¨­ç½®ç²å¬å±çæ¬éã',\r\n                org: 'æ¨æ²æå°æ¹æ¡çä½¿ç¨ç¯åè¨­ç½®ç²çµç¹çæ¬éã'\r\n            },\r\n            has: {\r\n                exist: 'æ¹æ¡åç¨±å·²å­å¨ï¼è«ä¿®æ¹ã',\r\n                chs: 'ç°¡é«ä¸­æåç¨±å·²å­å¨ã',\r\n                cht: 'ç¹é«ä¸­æåç¨±å·²å­å¨ã',\r\n                en: 'è±æåç¨±å·²å­å¨ã'\r\n            },\r\n            required: {\r\n                schemeName: 'è«è¼¸å¥æ¹æ¡åç¨±.',\r\n                chs: 'è«è¼¸å¥ç°¡é«ä¸­æåç¨±ã',\r\n                cht: 'è«è¼¸å¥ç¹é«ä¸­æåç¨±ã',\r\n                en: 'è«è¼¸å¥è±æåç¨±ã',\r\n                org: 'è«é¸æçµç¹ã'\r\n            },\r\n            groupRowStatus: {\r\n                label: 'åçµè¡çæ',\r\n                expand: 'å±é',\r\n                collapse: 'æç'\r\n            }\r\n        },\r\n        'datagrid-scheme': {\r\n            saveTitle: 'ä¿å­æ¹æ¡',\r\n            namePlaceholder: 'è«è¼¸å¥æ¹æ¡åç¨±ï¼æå¤ä¸è¶é9åå­ç¬¦ï¼',\r\n            setPrivate: 'è¨­ç²åäºº',\r\n            privateTip: 'è¨­ç²åäººæï¼åªè½èªå·±æ¥çãä½¿ç¨è©²æ¹æ¡',\r\n            setPublic: 'è¨­ç²å¬å±',\r\n            publicTip: 'è¨­ç²å¬å±æ¶ï¼ææç¨æ¶é½å¯æ¥çãä½¿ç¨è©²æ¹æ¡',\r\n            setOrg: 'è¨­ç²çµç¹',\r\n            orgTip: 'è¨­ç²çµç¹æï¼çµç¹å§çç¨æ¶åè½æ¥çãä½¿ç¨è©²æ¹æ¡',\r\n            setDefault: 'è¨­ç²é»èª',\r\n            defaultTip: 'ä¸æ¬¡é²å¥æ­¤åè½æï¼é»èªå è¼è©²æ¹æ¡',\r\n            syspreset: 'ç³»çµ±é å¶',\r\n            isDefault: 'é»èª',\r\n            isPublic: 'å¬å±',\r\n            isOrg: 'çµç¹',\r\n            isPrivate: 'åäºº',\r\n            newScheme: 'æ°å¢æ¹æ¡',\r\n            mgrScheme: 'ç®¡ç',\r\n            saveas: 'å¦å­ç²',\r\n            onlyshowcolumns: 'åçå±ç¤ºå',\r\n            schemeList: 'æ¹æ¡åè¡¨',\r\n            delete: 'åªé¤',\r\n            columns:  {\r\n                name: 'åç¨±',\r\n                type: 'å±¬æ§',\r\n                isDefault: 'é»èª',\r\n                username: 'åµå»ºäºº',\r\n                mgr: 'ç®¡ç'\r\n            }\r\n        }\r\n    }\r\n}","import { debounceTime, map, switchMap, tap } from 'rxjs/operators';\r\nimport { forkJoin, Observable, of, Subscription, timer } from 'rxjs';\r\nimport { Injectable, Injector, InjectionToken, ComponentFactoryResolver, ApplicationRef } from '@angular/core';\r\nimport { DatagridComponent, DataColumn } from '@farris/ui-datagrid';\r\nimport { BsModalService, ModalOptions, ModalContainerComponent } from '@farris/ui-modal';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { DatagridSettingsComponent } from './datagrid-settings.component';\r\nimport { cloneDeep, debounce } from 'lodash-es';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { TreeNode } from '@farris/ui-treetable';\r\nimport { DebugService, IdService } from '@farris/ui-common';\r\nimport { SimpleColumnsComponent } from './simple-mode/simple-columns.component';\r\nimport { DatagridSchemeService } from './datagrid-scheme.service';\r\nimport { NewSchemeComponent } from './scheme/newscheme.component';\r\nimport { SchemeListComponent } from './scheme/scheme-list.component';\r\nimport { NotifyService } from '@farris/ui-notify';\r\nimport { DatagridSchemeModel, SchemeAuthModel, SettingModel } from './setting.model';\r\n\r\nimport { DATAGRID_SETTINGS_LOCALEDATA }  from './datagrid-settings-locale';\r\n\r\nexport const GRID_SETTINGS_WEBAPI =  new InjectionToken(' Farris DataGrid User Setting WebApi URI.');\r\n\r\n@Injectable()\r\nexport class DatagridSettingsService {\r\n\r\n    private multiSortMsg = 'åè¡¨ä¸­æªå¼å¯å¤åæåºçåè½ã è¯·æ£æ¥ï¼';\r\n    private columnsSortableMsg = 'æªå¼å¯åçæåºåè½ãè¯·æ£æ¥ï¼';\r\n    private notSupportHeaderGroupMsg = 'æä¸æ¯æå¤è¡¨å¤´è®¾ç½®';\r\n    private notShowDialog = 'å¤è¡¨å¤´æä¸æ¯æåæ¾ç¤ºè®¾ç½®ï¼åæ¶æªå¯ç¨åæåºåè½ã';\r\n\r\n    private _httpRestService = null;\r\n\r\n    private languages: any = [];\r\n\r\n    get httpRestService() {\r\n        return this._httpRestService;\r\n    };\r\n\r\n    set httpRestService(httpSer) {\r\n        this._httpRestService = httpSer;\r\n\r\n        if (this.schemeService) {\r\n            this.schemeService.setRestService(httpSer);\r\n        }\r\n    }\r\n\r\n    private gridRefs: {[key: string]: DatagridComponent} = null;\r\n    private activeSchemeItem: {[schemeid: string]: any} = null;\r\n\r\n    private saving = false;\r\n    private cfr: ComponentFactoryResolver = null;\r\n    private app: ApplicationRef = null;\r\n    private schemeListSubscription: Subscription = null;\r\n\r\n    private schemeService: DatagridSchemeService;\r\n    private notifyService: NotifyService;\r\n\r\n\r\n    private currentSchemeitem = null;\r\n    private debugSer: DebugService = null;\r\n\r\n    constructor(private injector: Injector, private modalSer: BsModalService,\r\n                private messager: MessagerService, private idService: IdService,\r\n                private localeSer: LocaleService) {\r\n\r\n        this.cfr = this.injector.get(ComponentFactoryResolver);\r\n        this.app = this.injector.get(ApplicationRef);\r\n        this.notifyService = this.injector.get(NotifyService, null);\r\n        this.debugSer = this.injector.get(DebugService, null);\r\n        this.schemeService = new DatagridSchemeService();\r\n\r\n        this.localeSer.setLocaleData(DATAGRID_SETTINGS_LOCALEDATA);\r\n    }\r\n\r\n\r\n    destroy(id?: string) {\r\n        if (this.gridRefs) {\r\n            if (id && this.gridRefs[id]) {\r\n                this.gridRefs[id] = null;\r\n                delete this.gridRefs[id];\r\n            } else {\r\n                if (!Object.keys(this.gridRefs).length) {\r\n                    this.gridRefs = null;\r\n                }\r\n            }\r\n        }\r\n        this.saving = false;\r\n        this.setActiveSchemeItem(id, null);\r\n    }\r\n\r\n    private writeDebugMsg(msg, type = 'warn') {\r\n        if (this.debugSer) {\r\n            if (this.debugSer[type]) {\r\n                this.debugSer[type](msg);\r\n            } else {\r\n                console[type](msg);\r\n            }\r\n        }\r\n    }\r\n\r\n    registerGridInstance(dg: DatagridComponent) {\r\n        if (!dg) {\r\n            this.writeDebugMsg('DatagridSettingService: grid instance is null.')\r\n            return;\r\n        }\r\n        const id = dg.id;\r\n        this.gridRefs = this.gridRefs || {};\r\n        if (!this.gridRefs[id]) {\r\n            this.gridRefs[id] = dg;\r\n        }\r\n    }\r\n\r\n    getGridInstance(dgID: string) {\r\n        return this.gridRefs ? this.gridRefs[dgID] : null;\r\n    }\r\n\r\n    /** æ´æ°æ¹æ¡ä¸­çéç½®æ°æ® */\r\n    private updateSchemeSettings(schemeItem: DatagridSchemeModel, settings: Partial<SettingModel>) {\r\n        if (schemeItem && settings) {\r\n            const schemeContentObj = schemeItem.queryConditionString ? JSON.parse(schemeItem.queryConditionString) : {};\r\n            if (schemeContentObj) {\r\n                if ( schemeContentObj[this.localeSer.localeId]) {\r\n                    const schemeSettings = schemeContentObj[this.localeSer.localeId] || {};\r\n                    schemeContentObj[this.localeSer.localeId] = Object.assign(schemeSettings, settings);\r\n                } else {\r\n                    schemeContentObj[this.localeSer.localeId] =  settings;\r\n                }\r\n                schemeItem.queryConditionString = JSON.stringify(schemeContentObj);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** æ´æ°å½åæ¹æ¡éç½®æ°æ® */\r\n    updateActiveSchemeItemSettings(dgId: string, settings: Partial<SettingModel>) {\r\n        const schemeItem = this.getActiveSchemeItem(dgId);\r\n        this.updateSchemeSettings(schemeItem, settings);\r\n    }\r\n\r\n    /** è®¾ç½®æ´»å¨çæ¹æ¡ */\r\n    setActiveSchemeItem(dgId: string, activeItem: any) {\r\n        const schemekey = this.schemeService.getSchemeKey(dgId);\r\n        this.activeSchemeItem = this.activeSchemeItem || {};\r\n        this.activeSchemeItem[schemekey] = activeItem;\r\n    }\r\n    /** è·åå½åæ´»å¨çæ¹æ¡ */\r\n    getActiveSchemeItem(dgId: string): DatagridSchemeModel {\r\n        const schemekey = this.schemeService.getSchemeKey(dgId);\r\n        return this.activeSchemeItem ? this.activeSchemeItem[schemekey] : null;\r\n    }\r\n\r\n    getSearchTypes() {\r\n        return [\r\n            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },\r\n            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },\r\n            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }\r\n        ];\r\n    }\r\n\r\n    showSimple(gridInstance: DatagridComponent, settings?: SettingModel, selectedSchemeItem?: DatagridSchemeModel) {\r\n        const columns = this.convertColumnsToSimple(gridInstance.columns);\r\n        columns[0] = [...columns[0].filter(n => n.field && n.field !== gridInstance.ControlPanelFeild)];\r\n\r\n        const searchTypes = this.getSearchTypes();\r\n\r\n        if (this.cfr) {\r\n            const cmpFactory = this.cfr.resolveComponentFactory(SimpleColumnsComponent);\r\n            let simpleRef = cmpFactory.create(this.injector);\r\n            this.app.attachView(simpleRef.hostView);\r\n            simpleRef.instance.columns = columns;\r\n            simpleRef.instance.seartTypes = searchTypes;\r\n            simpleRef.instance.gridInstance = gridInstance;\r\n\r\n            if (document.querySelector('#page-wrapper')) {\r\n                simpleRef.instance.top = 76;\r\n            }\r\n\r\n            simpleRef.instance.enableScheme = gridInstance.enableScheme;\r\n            if (gridInstance.enableScheme) {\r\n                if (settings) {\r\n                    if (selectedSchemeItem) {\r\n                        this.updateSchemeSettings(selectedSchemeItem, settings);\r\n                        simpleRef.instance.currentSchemeItem = selectedSchemeItem;\r\n                    } else {\r\n                        simpleRef.instance.currentSchemeItem = null;\r\n                        simpleRef.instance.settings = settings;\r\n                    }\r\n                } else {\r\n                    const _currentSchemtItem = this.getActiveSchemeItem(gridInstance.id);\r\n                    this.currentSchemeitem = _currentSchemtItem;\r\n                    simpleRef.instance.currentSchemeItem = _currentSchemtItem;\r\n                }\r\n            }\r\n\r\n            document.body.appendChild(simpleRef.location.nativeElement);\r\n\r\n            simpleRef.instance.closed.pipe(\r\n                switchMap( () => {\r\n                    if (simpleRef) {\r\n                        simpleRef.instance.container.nativeElement.style.right = '-500px';\r\n                        return timer(500);\r\n                    }\r\n                })\r\n            ).subscribe(() => {\r\n                simpleRef.location.nativeElement.remove();\r\n                simpleRef.destroy();\r\n                simpleRef = null;\r\n                if (this.schemeListSubscription) {\r\n                    this.schemeListSubscription.unsubscribe();\r\n                }\r\n\r\n                const _activeSchemtItem = this.getActiveSchemeItem(gridInstance.id);\r\n                if ((!this.currentSchemeitem || (_activeSchemtItem && _activeSchemtItem.id !== this.currentSchemeitem.id)) && (_activeSchemtItem &&_activeSchemtItem.queryConditionString)) {\r\n                    const _currentSettings = JSON.parse(_activeSchemtItem.queryConditionString)[this.localeSer.localeId];\r\n                    if (_currentSettings) {\r\n                        columns[0].forEach(f => {\r\n                            f.visible = _currentSettings.viewColumns.indexOf(f.field) > -1;\r\n                        });\r\n                    }\r\n                }\r\n\r\n            });\r\n\r\n\r\n            simpleRef.instance.advanced.subscribe(({ viewFields }) => {\r\n                if (viewFields && viewFields.length){\r\n                    this.updateSchemeSettings(simpleRef.instance.currentSchemeItem, {viewColumns: viewFields});\r\n                }\r\n                this.showAdvanced(gridInstance, null, simpleRef.instance.currentSchemeItem);\r\n            });\r\n\r\n            simpleRef.instance.submit.subscribe( (e: any) => {\r\n                e.target.disabled = true;\r\n                if (this.saving) {\r\n                    return;\r\n                }\r\n                if (!this.saving) {\r\n\r\n                    this.setActiveSchemeItem(gridInstance.id, e.currentScheme);\r\n                    \r\n\r\n                    this.updateGridView(e, gridInstance, e.target);\r\n                }\r\n            });\r\n\r\n            simpleRef.instance.fieldsChange.subscribe((visibleFields: string[]) => {\r\n                this.updateActiveSchemeItemSettings(gridInstance.id, {viewColumns: visibleFields})\r\n            });\r\n\r\n            // æå¼æ°å¢æ¹æ¡çªå£\r\n            simpleRef.instance.addNewScheme.subscribe((e: any) => {\r\n                this.showNewSchemeDialog(gridInstance, e, simpleRef);\r\n            });\r\n\r\n            simpleRef.instance.schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];\r\n\r\n            // æå¼æ¹æ¡ç®¡çåè¡¨çªå£\r\n            simpleRef.instance.showSchemeList.subscribe(() => {\r\n                this.schemeService.getSchemeList(gridInstance.id).pipe(\r\n                    switchMap((t) => {\r\n                        return this.schemeService.checkAuthority().pipe(\r\n                            map((auth: SchemeAuthModel) => {\r\n                                return {\r\n                                    list: t,\r\n                                    ...auth\r\n                                }\r\n                            })\r\n                        )\r\n                    })\r\n                ).subscribe((t: any) => {\r\n                    this.schemeService.setSchemeList(gridInstance.id, t.list || []);\r\n                    this.showSchemeListDialog(gridInstance, cloneDeep(t.list || []), t, simpleRef);\r\n                });\r\n            });\r\n\r\n            this.schemeListSubscription = this.schemeService.schemeList$.subscribe((list: any) => {\r\n                simpleRef.instance.schemeList = list;\r\n\r\n                if (!list || !list.length) {\r\n                    this.setActiveSchemeItem(gridInstance.id, null);\r\n                    return;\r\n                }\r\n\r\n                const _activeSchemeItem = this.getActiveSchemeItem(gridInstance.id);\r\n                if (_activeSchemeItem) {\r\n                    let hasActiveItem = list.find(n => n.id === _activeSchemeItem.id);\r\n                    if (!hasActiveItem) {\r\n                        hasActiveItem = this.getDefaultScheme(list); // è·åè®¾ç½®ä¸ºå½åæ¹æ¡çé¡¹\r\n                        this.setActiveSchemeItem(gridInstance.id, hasActiveItem || null);\r\n                    }\r\n\r\n                    simpleRef.instance.currentSchemeItem = hasActiveItem;\r\n                }\r\n            });\r\n\r\n            // åæ¢æ¹æ¡\r\n            // simpleRef.instance.activeItemChange.subscribe((r: any) => {\r\n            //     this.setActiveSchemeItem(gridInstance.id, r);\r\n            // });\r\n\r\n            simpleRef.instance.schemeChanged.subscribe((t: any) => {\r\n                this.currentSchemeitem = t;\r\n            })\r\n\r\n            simpleRef.hostView.detectChanges();\r\n\r\n            simpleRef.instance.container.nativeElement.style.right = '0px';\r\n\r\n            return simpleRef;\r\n        }\r\n    }\r\n\r\n\r\n    show(gridInstance: DatagridComponent, opts?: ModalOptions) {\r\n        this.registerGridInstance(gridInstance);\r\n\r\n        if (gridInstance.enableSimpleMode) {\r\n            return this.showSimple(gridInstance);\r\n        } else {\r\n            return this.showAdvanced(gridInstance, opts);\r\n        }\r\n    }\r\n\r\n    private showAdvanced(gridInstance: DatagridComponent, opts?: ModalOptions, selectedSchemeItem?: DatagridSchemeModel) {\r\n        let _editColSortInfo = true;\r\n        const editColSortInfo = this.canSetColumnSort(gridInstance);\r\n        if (editColSortInfo !== true) {\r\n            // this.messager.warning(msg);\r\n            // return;\r\n            _editColSortInfo = false;\r\n        }\r\n\r\n        const showSetColumnsTab = !this.isHeaderGroup(gridInstance);\r\n        const getActiveTabIndex = () => {\r\n            if (showSetColumnsTab) {\r\n                return 1;\r\n            } else {\r\n                if (_editColSortInfo) {\r\n                    return 2;\r\n                } else {\r\n                    return -1;\r\n                }\r\n            }\r\n        };\r\n        const activeTabIndex = getActiveTabIndex();\r\n\r\n        if (activeTabIndex === -1) {\r\n            this.messager.warning(this.notShowDialog);\r\n            return;\r\n        }\r\n\r\n        const columns = this.convertColumnsToSimple(gridInstance.columns);\r\n\r\n        // è·åå½åæ¹æ¡ä¸­å½åè¯­è¨çéç½®æ°æ®\r\n        let currentSettings: SettingModel = null;\r\n        if (selectedSchemeItem && selectedSchemeItem.queryConditionString) {\r\n            currentSettings = JSON.parse(selectedSchemeItem.queryConditionString)[this.localeSer.localeId];\r\n\r\n            if (currentSettings.columnFormat && currentSettings.columnFormat.length) {\r\n                columns[0] = columns[0].map((col) => {\r\n                    const fcol = currentSettings.columnFormat.find(n => n.field === col.field);\r\n                    if (fcol) {\r\n                        col = Object.assign(col, fcol);\r\n                    }\r\n                    return col;\r\n                });\r\n            }\r\n\r\n            if (currentSettings.viewColumns && currentSettings.viewColumns.length) {\r\n                columns[0].forEach(f => {\r\n                    f.visible = currentSettings.viewColumns.indexOf(f.field) > -1;\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n        columns[0] = columns[0].filter(n => n.field && n.field !== gridInstance.ControlPanelFeild);\r\n        const treeData = this.convertColumns2TreeData(cloneDeep(columns), true);\r\n        const viewColumnsTreeData = this.convertColumns2TreeData(cloneDeep(columns), false);\r\n        this.checkViewTreeNodes(viewColumnsTreeData);\r\n\r\n        let modalRef = null;\r\n\r\n        const okText = this.localeSer.getValue('datagrid.settings.ok') || 'ç¡®å®';\r\n        const cancelText = this.localeSer.getValue('datagrid.settings.cancel') || 'åæ¶';\r\n        const resetText =  this.localeSer.getValue('datagrid.settings.reset') || 'éç½®';\r\n\r\n        const defaultOpts = {\r\n            width: 760, height: 560, showHeader: false, title: 'æ§å¶é¢æ¿',\r\n            initialState: {\r\n                columns,\r\n                sortTreeData: treeData,\r\n                viewTreeData: viewColumnsTreeData,\r\n                gridInstance,\r\n                canSetColumnSort: _editColSortInfo,\r\n                canSetColumnVisible: showSetColumnsTab,\r\n                activeTabIndex,\r\n                schemeInfo: currentSettings\r\n            },\r\n            showButtons: false\r\n        };\r\n        const modalOpts = Object.assign(defaultOpts, opts || {});\r\n\r\n        modalRef = this.modalSer.show(DatagridSettingsComponent, modalOpts);\r\n        const instance = modalRef.content as DatagridSettingsComponent;\r\n        instance.enableReset = true;\r\n        instance.modalRef = modalRef;\r\n        instance.canSetColumnSort = _editColSortInfo;\r\n        instance.canSetColumnVisible = !this.isHeaderGroup(gridInstance);\r\n\r\n        instance.submitHandle.subscribe((e) => {\r\n            e.target.disabled = true;\r\n            if (this.saving) {\r\n                return;\r\n            }\r\n            if (!this.saving) {\r\n                if (selectedSchemeItem) {\r\n                    this.setActiveSchemeItem(gridInstance.id, selectedSchemeItem);\r\n                }\r\n                this.updateGridView(modalRef, gridInstance, e.target);\r\n            }\r\n        });\r\n\r\n        instance.cancelHandle.subscribe((e) => {\r\n            modalRef.close();\r\n        });\r\n\r\n        // åæ¢å°ä¾§è¾¹æ ç®æ´æ¨¡å¼\r\n        instance.concise.subscribe((e) => {\r\n            modalRef.close();\r\n            const settings = modalRef.content;\r\n            const { sortInfo, viewColumns, columnFormat, groupField } = settings;\r\n            this.showSimple(gridInstance, { sortInfo, viewColumns, columnFormat, groupField }, selectedSchemeItem);\r\n        });\r\n\r\n        const modalContainer = modalRef.dialog.instance as ModalContainerComponent;\r\n        modalContainer.draggbar.handle = instance.header.nativeElement;\r\n        return modalRef;\r\n    }\r\n\r\n\r\n\r\n    private canSetColumnSort(gridInstance: DatagridComponent) {\r\n        if (gridInstance.multiSort && this.hasEnableSortColumns(gridInstance)) {\r\n            return true;\r\n        } else {\r\n            if (!this.hasEnableSortColumns(gridInstance)) {\r\n                return this.columnsSortableMsg;\r\n            } else if (!gridInstance.multiSort) {\r\n                return this.multiSortMsg;\r\n            }\r\n        }\r\n    }\r\n\r\n    private hasEnableSortColumns(gridInstance: DatagridComponent) {\r\n        const sortColumnsCount = gridInstance.flatColumns.reduce((c, r) => {\r\n            if (r.sortable) {\r\n                return c + 1;\r\n            }\r\n            return c;\r\n        }, 0);\r\n\r\n        return sortColumnsCount > 0;\r\n    }\r\n\r\n    private isHeaderGroup(grid: DatagridComponent) {\r\n        const flag = grid.columns.length > 1;\r\n        if (flag) {\r\n            return this.notSupportHeaderGroupMsg;\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    private getChilds(cols, rowIndex, colStartIndex, colCount, forSort = false) {\r\n        const childCols = [];\r\n        let _count = colStartIndex;\r\n        if (!cols[rowIndex]) {\r\n            return  [];\r\n        }\r\n\r\n        cols[rowIndex].slice().forEach(element => {\r\n            _count = _count + element.colspan;\r\n            if ( _count <= colCount ) {\r\n                childCols.push(element);\r\n            }\r\n        });\r\n\r\n        cols[rowIndex].splice(0, childCols.length);\r\n\r\n        return childCols.map((c, i) => {\r\n            let n: any = {\r\n                data: c,\r\n                selectable: forSort ? !!c.sortable : true\r\n            };\r\n\r\n            if (c.colspan && c.colspan > 1) {\r\n                n = {\r\n                    data: c,\r\n                    selectable: false,\r\n                    expanded: true,\r\n                    children: this.getChilds(cols, rowIndex + 1, 0 , c.colspan)\r\n                };\r\n            }\r\n            return n;\r\n        });\r\n    }\r\n    convertColumns2TreeData(cols: DataColumn[][], forSort = false) {\r\n        const columns = cols.map((c: any) => {\r\n            const aa = c.map((_) => {\r\n                if (_.field.indexOf('farris-datagrid-column_') == -1) {\r\n                    _.colspan = _.colspan || 1;\r\n                    return _;\r\n                }\r\n                return null;\r\n            });\r\n            return aa.filter(n => n);\r\n        });\r\n        if (columns.length === 1) {\r\n            return columns[0].map(c => {\r\n                return {\r\n                    data: c,\r\n                    selectable: forSort ? !!c.sortable : true\r\n                };\r\n            });\r\n        } else {\r\n            return columns[0].map((c, i) => {\r\n                if (c.colspan && c.colspan > 1) {\r\n                    return {\r\n                        data: c,\r\n                        selectable: false,\r\n                        expanded: true,\r\n                        children: this.getChilds(columns, 1, 0, c.colspan, forSort)\r\n                    };\r\n                } else {\r\n                    return {\r\n                        data: c,\r\n                        selectable: forSort ? !!c.sortable : true\r\n                    };\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    private checkViewTreeNodes(treeNodes: TreeNode[]) {\r\n        treeNodes.forEach((tn: TreeNode) => {\r\n            if (!tn.children || !tn.children.length) {\r\n                tn.selectable = true;\r\n            } else {\r\n                tn.selectable = false;\r\n                this.checkViewTreeNodes(tn.children);\r\n            }\r\n        });\r\n    }\r\n\r\n    private _convertColumnsToSimple(gridInstance: any) {\r\n\r\n        let cols = gridInstance.columns;\r\n        // éç½®åé¡ºåºä¸ºæåè®¾è®¡æ¶çé¡ºåº\r\n        const gridOpts = gridInstance.dfs._state.initialOptions;\r\n        if (gridOpts.columnFields) {\r\n            let desginCols = gridOpts.columnFields;\r\n            const newColumns = [];\r\n\r\n            desginCols.forEach(c => {\r\n                if (c.field !== '_datagrid-setting-control_') {\r\n                    const col = gridInstance.columns[0].find((n: any) => n.field === c.field);\r\n                    if (col) {\r\n                        newColumns.push(col);\r\n                    }\r\n                }\r\n            });\r\n\r\n            cols = [newColumns];\r\n        }\r\n\r\n        return cols;\r\n    }\r\n\r\n    convertColumnsToSimple(cols: any) {\r\n        return cols.map( (_cols: DataColumn[]) => {\r\n            return _cols.map( (c: DataColumn) => {\r\n                if (c.field !== '_datagrid-setting-control_') {\r\n                    return {\r\n                        field: c.field,\r\n                        title: c.title,\r\n                        colspan: c.colspan,\r\n                        rowspan: c.rowspan,\r\n                        sortable: c.sortable,\r\n                        order: c.order,\r\n                        halign: c.halign || 'left',\r\n                        align: c.align || 'left',\r\n                        visible: c.visible,\r\n                        allowGrouping: c.allowGrouping,\r\n                        groupFooter: c.groupFooter,\r\n                        footer: c.footer,\r\n                        width: c.width || 100,\r\n                        dataType: c.dataType || 'string'\r\n                    };\r\n                }\r\n            }).filter(n => n);\r\n        });\r\n    }\r\n\r\n    private resetGridView(gridInstance: any) {\r\n        if (!gridInstance) {\r\n            return;\r\n        }\r\n        const dfs = gridInstance.dfs;\r\n        if (dfs) {\r\n            const options = dfs['_state'].initialOptions;\r\n\r\n            if (options.sort) {\r\n                if (options.sort.sortName) {\r\n                    gridInstance.sortName = options.sort.sortName;\r\n                }\r\n                if (options.sort.sortOrder) {\r\n                    gridInstance.sortOrder = options.sort.sortOrder;\r\n                }\r\n            }\r\n\r\n            gridInstance.groupField = options.groupField || '';\r\n            // TODO: è¿éè¦ä¿®æ­£é»è®¤åçæ¾ç¤ºé¡ºåº\r\n            if (options.columnFields && options.columnFields.length) {\r\n\r\n                const newColumns = [];\r\n                options.columnFields.forEach(c => {\r\n                    const col = gridInstance.columns[0].find((n: any) => n.field === c.field);\r\n                    if (col) {\r\n                        col.visible = c.visible;\r\n                        col.halign = c.halign;\r\n                        col.align = c.align;\r\n                        col.width = c.width;\r\n                        col.footer = c.footer;\r\n                        col.groupFooter = c.groupFooter;\r\n                        newColumns.push(col);\r\n                    }\r\n                });\r\n\r\n                gridInstance.columns[0] = newColumns;\r\n            }\r\n\r\n            // gridInstance['checkOptions']();\r\n            gridInstance['columnsChanged']();\r\n        }\r\n    }\r\n\r\n    private updateGridView(modalRef, gridInstance, btn = null) {\r\n        const settings = modalRef.content;\r\n\r\n        if (settings) {\r\n            const { sortInfo, viewColumns, columnFormat, groupField, groupRowState } = settings;\r\n            const _colformats = columnFormat ? this.convertColumnsToSimple([columnFormat])[0] : [];\r\n\r\n            this.updateActiveSchemeItemSettings(gridInstance.id, {sortInfo, viewColumns, columnFormat: _colformats, groupField});\r\n\r\n            this.saving = true;\r\n\r\n            let _groupField = '';\r\n            if (gridInstance.groupRows && groupField && groupField.length) {\r\n                _groupField = groupField.join(',') ;\r\n\r\n                gridInstance.expandGroupRows = groupRowState;\r\n            }\r\n            gridInstance.groupField = _groupField;\r\n            const saveData = { sortInfo, viewColumns, groupField: _groupField, columnFormat: _colformats, expandGroupRows: groupRowState };\r\n            this.setUserConfig(gridInstance.id, saveData).subscribe( () => {\r\n                if (btn) {\r\n                    btn.disabled = false;\r\n                }\r\n                this.saving = false;\r\n                if (viewColumns && viewColumns.length) {\r\n                    gridInstance.columns = gridInstance.columns.map(cols => {\r\n                        this.updateColumnFormat(cols, columnFormat, gridInstance);\r\n                        return this.newVisibleOrderColumns(cols, viewColumns, columnFormat, gridInstance);\r\n                    });\r\n                }\r\n\r\n                gridInstance.columnsChanged(true);\r\n                if (sortInfo && Object.keys(sortInfo).length) {\r\n                    const { sortName, sortOrder } = sortInfo;\r\n                    if (sortName && sortName.length) {\r\n                        gridInstance.sort(sortName.join(','), sortOrder.join(','));\r\n                    } else {\r\n                        gridInstance.clearSort();\r\n                    }\r\n                } else {\r\n                    gridInstance.clearSort();\r\n                }\r\n\r\n                modalRef.close();\r\n            });\r\n        } else {\r\n            modalRef.close();\r\n        }\r\n    }\r\n\r\n\r\n    newVisibleOrderColumns(cols: any, viewColumns: any, columnFormat: any, gridInstance: any) {\r\n        const hideColumns = [];\r\n        cols.forEach((element, index) => {\r\n            if (this.isNewAddColumn(element.field, columnFormat) && element.field !== '_datagrid-setting-control_' && !gridInstance.enableScheme) {\r\n                viewColumns.push(element.field);\r\n            } else {\r\n                element.visible = viewColumns.includes(element.field);\r\n                if (!element.visible) {\r\n                    hideColumns.push(element);\r\n                }\r\n            }\r\n        });\r\n\r\n        // æ¸çä¸å­å¨çå\r\n        let newCols = viewColumns.map( field => {\r\n            return cols.find(c => c.field === field);\r\n        }).filter(n => n);\r\n\r\n        if (hideColumns.length) {\r\n            newCols = newCols.concat(hideColumns);\r\n        }\r\n\r\n        return newCols.filter(c => c && c.field && c.field !== '_datagrid-setting-control_' );\r\n    }\r\n\r\n    /**\r\n     * æ¯å¦ä¸ºæ°å¢å çå­æ®µ\r\n     * æ°å¢çå­æ®µï¼éè¦å¨åè¡¨ä¸­å±ç¤ºåºæ¥ï¼å¹¶ä¿å­å°ä¸ªæ§åè®¾ç½®ä¸­\r\n     */\r\n    private isNewAddColumn(field: any, columns: any) {\r\n        columns = columns || [];\r\n        return !columns.find(c => c.field === field);\r\n    }\r\n\r\n\r\n    updateColumnFormat(cols: any[], columnFormat: any[], gridInstance) {\r\n        if (columnFormat && columnFormat.length) {\r\n            cols.forEach(col => {\r\n                const formatCol = columnFormat.find(f=> f.field === col.field);\r\n                if (formatCol) {\r\n                    col.width = formatCol.width;\r\n                    col.halign = formatCol.halign || 'left';\r\n                    col.align = formatCol.align || 'left';\r\n\r\n                    if (gridInstance.groupRows && (col.allowGrouping || col.allowGrouping === undefined)) {\r\n                        if (!col.groupFooter) {\r\n                            col.groupFooter = formatCol.groupFooter;\r\n                        }\r\n\r\n                        if (col.groupFooter && col.groupFooter.options) {\r\n                            col.groupFooter.options.text = formatCol.groupFooter.options.text || '';\r\n                            col.groupFooter.options.calculationType =\r\n                                formatCol.groupFooter.options.calculationType !== undefined &&\r\n                                formatCol.groupFooter.options.calculationType !== null ?\r\n                                parseInt(formatCol.groupFooter.options.calculationType, 10) : -1;\r\n                        }\r\n                    }\r\n\r\n                    if (gridInstance.showFooter && !gridInstance.footerTemplate) {\r\n                        if (!col.footer) {\r\n                            col.footer = formatCol.footer;\r\n                        }\r\n\r\n                        if (col.footer && col.footer.options) {\r\n                            col.footer.options.text = formatCol.footer.options.text || '';\r\n                            col.footer.options.calculationType =\r\n                                formatCol.footer.options.calculationType !== undefined &&\r\n                                formatCol.footer.options.calculationType !== null ?\r\n                                parseInt(formatCol.footer.options.calculationType, 10) : -1;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // åå»ºå¯ä¸key, ç±uri + gridId ç»æï¼å¹¶æ··æ·\r\n    private createConfigKey(gridId: string) {\r\n        const grid = this.getGridInstance(gridId);\r\n        if (grid) {\r\n            return grid.dgs.createConfigKey(gridId);\r\n        } else {\r\n            this.writeDebugMsg('DatagridSettingService: Can not find the grid instance.');\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private getCurrentUserSettings(gridId: string) {\r\n        const gridInstance = this.getGridInstance(gridId);\r\n        const config = {sortInfo: {}, viewColumns: [], groupField: '', columnFormat: []};\r\n\r\n        if (gridInstance) {\r\n            const { sortName, sortOrder, columns} = gridInstance;\r\n            if (sortName) {\r\n                const sortInfo = {\r\n                    sortName: sortName.split(','),\r\n                    sortOrder: sortOrder.split(',')\r\n                };\r\n\r\n                config.sortInfo = sortInfo;\r\n            }\r\n\r\n            const viewColumns = columns[0].filter(n => n.visible || n.visible === undefined).map(n => n.field);\r\n            config.viewColumns = viewColumns;\r\n            config.columnFormat = this.convertColumnsToSimple(this._convertColumnsToSimple(gridInstance))[0];\r\n\r\n            if (gridInstance.groupRows) {\r\n                config.groupField = gridInstance.groupField;\r\n            }\r\n        }\r\n        return config;\r\n    }\r\n\r\n\r\n    saveUserConfig(gridId: string) {\r\n        const config = this.getCurrentUserSettings(gridId);\r\n        return this.setUserConfig(gridId, config);\r\n    }\r\n\r\n    setUserConfig(gridId: string, config: any ): Observable<any> {\r\n        const key = this.createConfigKey(gridId);\r\n        const LOCALEID = this.localeSer.localeId;\r\n        const currentConfig = localStorage.getItem(key);\r\n        const _config = (currentConfig ? JSON.parse(currentConfig) : { }) || {};\r\n        if (config) {\r\n            if (_config) {\r\n                _config[LOCALEID] = config;\r\n            }\r\n\r\n            localStorage.setItem(key, JSON.stringify(_config));\r\n        } else {\r\n            localStorage.removeItem(key);\r\n        }\r\n        if (this.httpRestService) {\r\n            const gridIns = this.getGridInstance(gridId);\r\n            if (gridIns && gridIns.enableScheme) {\r\n                const activeScheme = this.getActiveSchemeItem(gridId);\r\n                if (activeScheme) {\r\n                    // return this.updateScheme(gridId, config);\r\n                    if (activeScheme.type === 'private') {\r\n                        return this.schemeService.saveScheme(activeScheme, gridId, true)\r\n                    } else {\r\n                        return this.schemeService.checkAuthority().pipe(\r\n                            switchMap((t: SchemeAuthModel) => {\r\n                                if (t.success) {\r\n                                    const hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;\r\n                                    if (activeScheme.type === 'public' || (activeScheme.type === 'org' && hasOrgAuthority)) {\r\n                                        return this.schemeService.saveScheme(activeScheme, gridId, true);\r\n                                    }\r\n                                }\r\n\r\n                                return of(true);\r\n                            }),\r\n                        )\r\n                    }\r\n                } else {\r\n                    return of(true);\r\n                }\r\n            }\r\n            // ä¿å­è³æ°æ®åº\r\n            return this._saveUserConfig(key,  config ? _config :  '');\r\n        }\r\n\r\n        return of(true);\r\n    }\r\n\r\n    getUserConfig(key): Observable<any> {\r\n        if (this.httpRestService) {\r\n            return this._getUserConfig(key);\r\n        } else {\r\n            const config = localStorage.getItem(key);\r\n            if (config) {\r\n                const con = JSON.parse(config);\r\n                if (con[this.localeSer.localeId]) {\r\n                    return of(con[this.localeSer.localeId]);\r\n                } else {\r\n                    if (Object.keys(con).indexOf('viewColumns') > -1) {\r\n                        return of(con);\r\n                    }\r\n                    return null;\r\n                }\r\n            } else {\r\n                return of(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getDefaultScheme(schemeList: Array<DatagridSchemeModel>) {\r\n        // 1ãæä¸ªäººé»è®¤çè¿åä¸ªäººé»è®¤æ¹æ¡\r\n        // 2ãæ²¡æä¸ªäººé»è®¤æ¹æ¡çï¼è¿åå¬å±æ¹æ¡ç¬¬1ä¸ª\r\n        // 3ãæ²¡æå¬å±æ¹æ¡ï¼è¿åç»ç»æ¹æ¡ç¬¬1ä¸ª\r\n        // 4ãæ²¡æç»ç»æ¹æ¡ç, è¿åä¸ªäººæ¹æ¡ç¬¬1ä¸ª\r\n        // 5ãæ²¡æä¸ªäººæ¹æ¡çï¼è¿åç³»ç»é¢å¶ï¼å³è¡¨åè®¾è®¡æ¶çæ ¼å¼\r\n\r\n        let defaultScheme = null;\r\n        if (!schemeList || !schemeList.length) {\r\n            return defaultScheme;\r\n        } else {\r\n            defaultScheme = schemeList.find(n => n.isDefault);\r\n            if (!defaultScheme) {\r\n                let publicSchemes = schemeList.filter(n => n.type === 'public');\r\n\r\n                if (!publicSchemes.length) {\r\n                    publicSchemes = schemeList.filter(n => n.type === 'org');\r\n                }\r\n\r\n                if (publicSchemes.length) {\r\n                    defaultScheme = publicSchemes[0];\r\n                } else {\r\n                    defaultScheme = schemeList[0];\r\n                }\r\n            }\r\n        }\r\n\r\n        return defaultScheme;\r\n    }\r\n\r\n\r\n    getSettings(gridId: string) {\r\n        const key = this.createConfigKey(gridId);\r\n        const gridIns = this.getGridInstance(gridId);\r\n\r\n        let schemeList$ = of([]);\r\n        if (gridIns && gridIns.enableScheme) {\r\n            schemeList$ = this.getSchemeList(gridId);\r\n        }\r\n\r\n        return forkJoin(schemeList$, this.getUserConfig(key), this.schemeService.getLanguages()).pipe(\r\n            map(([schemeList, userSetting, supportedLanguages]) => {\r\n                schemeList = schemeList || [];\r\n                this.languages = supportedLanguages;\r\n                if (!schemeList.length) {\r\n                    return userSetting;\r\n                } else {\r\n                    // ç¼å­æ¹æ¡åè¡¨\r\n                    this.setSchemeList(schemeList, gridId);\r\n                    // æ¥æ¾é»è®¤æ¹æ¡\r\n                    const defaultScheme: DatagridSchemeModel = this.getDefaultScheme(schemeList);\r\n                    if (!defaultScheme) {\r\n                        return userSetting;\r\n                    } else {\r\n                        this.setActiveSchemeItem(gridId, defaultScheme);\r\n                        let userSettings = null;\r\n                        if (defaultScheme.queryConditionString) {\r\n                            userSettings = JSON.parse(defaultScheme.queryConditionString);\r\n                        }\r\n                        if (userSettings) {\r\n                            const localeId = this.localeSer.localeId;\r\n                            if (userSettings[localeId]) {\r\n                                localStorage.setItem(key, JSON.stringify(userSettings));\r\n                                return userSettings[localeId];\r\n                            } else {\r\n                                userSettings[localeId] = null;\r\n                                localStorage.setItem(key, JSON.stringify(userSettings));\r\n                                return null;\r\n                            }\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n\r\n    private _saveUserConfig(key, config) {\r\n        try {\r\n            const userConfigSetting = {\r\n                configkey1: key,\r\n                configkey2: '',\r\n                configkey3: '',\r\n                textvalue: config ? JSON.stringify(config) :  ''\r\n            };\r\n\r\n            return this.httpRestService.saveUserSettings(userConfigSetting);\r\n        } catch (e) {\r\n            this.writeDebugMsg(e, 'error');\r\n        }\r\n    }\r\n\r\n    resetUserConfig(gridInstance, modalRef) {\r\n        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || 'ç¡®è®¤è¦æ¢å¤é»è®¤è®¾ç½®åï¼';\r\n        this.messager.confirm(restorDefaultText).pipe(\r\n            switchMap( (t: boolean) => {\r\n                if (t) {\r\n                    return this.setUserConfig(gridInstance.id, '');\r\n                }\r\n                return of(t);\r\n            })\r\n        ).subscribe((t: boolean) => {\r\n            if (t) {\r\n                this.resetGridView(gridInstance);\r\n                modalRef.close();\r\n            }\r\n        });\r\n    }\r\n\r\n    private _getUserConfig(key) {\r\n        try {\r\n            return this.httpRestService.getUserSettings(key).pipe(\r\n                map((ucs: any) => {\r\n                    if (ucs && ucs.textValue) {\r\n                        const c = JSON.parse(ucs.textValue);\r\n                        if (c) {\r\n                            if (c[this.localeSer.localeId]) {\r\n                                localStorage.setItem(key, ucs.textValue);\r\n                                return c[this.localeSer.localeId];\r\n                            } else {\r\n                                c[this.localeSer.localeId] = null;\r\n                                localStorage.setItem(key, JSON.stringify(c));\r\n                                // if (Object.keys(c).indexOf('viewColumns') > -1) {\r\n                                //     return c;\r\n                                // }\r\n                                return null;\r\n                            }\r\n\r\n                        }\r\n                        return null;\r\n                    }\r\n                    return null;\r\n                })\r\n            );\r\n        } catch (e) {\r\n            if (this.debugSer) {\r\n                this.debugSer.error(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    private buildSubmitData(gridId: string, settings = null) {\r\n        const LOCALEID = this.localeSer.localeId;\r\n        if (!settings) {\r\n            settings = this.getCurrentUserSettings(gridId);\r\n        }\r\n        const localeKey = this.createConfigKey(gridId);\r\n        const currentConfig = localStorage.getItem(localeKey);\r\n        const _config = (currentConfig ? JSON.parse(currentConfig) : { }) || {};\r\n        if (_config) {\r\n            _config[LOCALEID] = settings;\r\n        }\r\n\r\n        return _config;\r\n    }\r\n\r\n// ----------------------------------------------------------------------------------------------- \\\\\r\n\r\n    private showSchemeListDialog(gridInstance: any, schemeList: any, authInfo: SchemeAuthModel, simpleRef: any) {\r\n        const modalOpts = {\r\n            width: 760, height: 577, showHeader: false, title: 'æ§å¶é¢æ¿',\r\n            initialState: {\r\n                items: schemeList || [],\r\n                removeItem: authInfo.success,\r\n                currentUserId: authInfo.currentUserId\r\n            },\r\n            showButtons: false\r\n        };\r\n\r\n        const schemeListDlg = this.modalSer.show(SchemeListComponent, modalOpts);\r\n        schemeListDlg.dialog.location.nativeElement.style.zIndex = 2031;\r\n\r\n        const instance = schemeListDlg.content as SchemeListComponent;\r\n        instance.closeModal.subscribe( () => {\r\n            schemeListDlg.close();\r\n        });\r\n\r\n        instance.submitModal.subscribe((t: any) => {\r\n            this.schemeService.updateScheme(t, gridInstance.id).subscribe((e: any) => {\r\n                if(e === false) {\r\n                    schemeListDlg.close();\r\n                    return;\r\n                }\r\n                const msg = 'åè®¾ç½®æ¹æ¡ä¿å­æåã';\r\n                if (this.notifyService) {\r\n                    this.notifyService.success(msg);\r\n                } else {\r\n                    this.messager.success(msg);\r\n                }\r\n\r\n                if(t.defaultId) {\r\n                    schemeList.forEach(n => {\r\n                        n.isDefault = false;\r\n                        if (n.id === t.defaultId) {\r\n                            n.isDefault = true;\r\n                            // this.setActiveSchemeItem(gridInstance.id, n);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                let newSchemeList = schemeList;\r\n                if (t.deletedIds && t.deletedIds.length) {\r\n                    newSchemeList = schemeList.filter(n => {\r\n                        return !t.deletedIds.includes(n.id)\r\n                    });\r\n                }\r\n\r\n                this.schemeService.setSchemeList(gridInstance.id, newSchemeList);\r\n\r\n                const currentScheme = this.getActiveSchemeItem(gridInstance.id);\r\n                if (!currentScheme) {\r\n                    this.setActiveSchemeItem(gridInstance.id, null);\r\n                    simpleRef.instance.currentSchemeItem = null;\r\n                    simpleRef.instance.reset2Default();\r\n                }\r\n\r\n                schemeListDlg.close();\r\n            });\r\n        });\r\n\r\n        const modalContainer = schemeListDlg.dialog.instance as ModalContainerComponent;\r\n        modalContainer.draggbar.handle = instance.header.nativeElement;\r\n    }\r\n\r\n    // æ°å¢æå¦å­æ¹æ¡\r\n    private showNewSchemeDialog(gridInstance, e: { type: 'new' | 'saveas'},  simpleRef: any) {\r\n        const modalOpts = {\r\n            width: 480, height: 269, showHeader: false, title: 'æ§å¶é¢æ¿',\r\n            initialState: {\r\n                languages: this.languages\r\n            },\r\n            showButtons: false,\r\n            resizable: false\r\n        };\r\n\r\n        const newSchemeDlg = this.modalSer.show(NewSchemeComponent, modalOpts);\r\n        newSchemeDlg.dialog.location.nativeElement.style.zIndex = 2031;\r\n        const instance = newSchemeDlg.content as NewSchemeComponent;\r\n        instance.closeModal.subscribe( () => {\r\n            newSchemeDlg.close();\r\n        });\r\n\r\n        instance.submitModal.pipe(\r\n            switchMap((t: any) => {\r\n                return this.createNewScheme(gridInstance.id, t, e.type === 'new', simpleRef.instance.collectSettings());\r\n            })\r\n        ).subscribe((t: any) => {\r\n            if (t.flag === false) {\r\n                const msg = t.msg;\r\n                let _msg = msg;\r\n                if (msg) {\r\n                    if (msg.indexOf('|') > -1) {\r\n                        _msg = msg.split('|').map((langcode) => {\r\n                            return this.localeSer.getValue('datagrid-settings.'+ langcode)\r\n                        }).join('');\r\n                    } else {\r\n                        _msg = this.localeSer.getValue('datagrid-settings.'+ msg );\r\n                    }\r\n                    if (this.notifyService) {\r\n                        this.notifyService.info(_msg);\r\n                    } else {\r\n                        this.messager.info(_msg);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            // æ´æ°æ¹æ¡åè¡¨\r\n            const schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];\r\n            if (t.isDefault) {\r\n                schemeList.forEach(n => {\r\n                    n.isDefault = false;\r\n                });\r\n            }\r\n            schemeList.push(t);\r\n            // this.setActiveSchemeItem(gridInstance.id, t);\r\n            this.schemeService.setSchemeList(gridInstance.id, schemeList);\r\n\r\n            // æ´æ¢ä¸ºæ°çæ¹æ¡\r\n            simpleRef.instance.onSchemeItemClick(null, t);\r\n            newSchemeDlg.close();\r\n        });\r\n\r\n        instance.checkAuthority.pipe(\r\n            switchMap((t: any) => {\r\n                return this.schemeService.checkAuthority().pipe(\r\n                    map((auth: SchemeAuthModel) => {\r\n                        return {\r\n                            type: t,\r\n                            ...auth\r\n                        }\r\n                    })\r\n                )\r\n            })\r\n        ).subscribe((t: any) => {\r\n            let hasAuthority = { public: true, org: true };\r\n            // æ¨æ²¡æå°æ¹æ¡çä½¿ç¨èå´è®¾ç½®ä¸ºå¬å±çæéã\r\n            let _msg = 'noAuth.public';\r\n            if (t.type.value === 'org') {\r\n                // æ¨æ²¡æå°æ¹æ¡çä½¿ç¨èå´è®¾ç½®ä¸ºç»ç»çæéã\r\n                _msg = 'noAuth.org';\r\n            }\r\n\r\n            const msg = this.localeSer.getValue('datagrid-settings.'+ _msg );\r\n            if (t.success) {\r\n                const hasPublicAuthority = t.authOperationData && t.authOperationData.length;\r\n                hasAuthority.public = hasPublicAuthority;\r\n                const hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;\r\n                hasAuthority.org = hasOrgAuthority;\r\n                if (t.type.value === 'public') {\r\n                    instance.schemeInfo.type = t.type.value;\r\n                } else if (t.type.value === 'org') {\r\n                    if (!hasOrgAuthority) {\r\n                        this.notifyService.warning(msg);\r\n                    }else {\r\n                        instance.schemeInfo.type = t.type.value;\r\n                        instance.schemeInfo.orgids = t.authOrganizationData.join(',')\r\n                        instance.dataPermissionIds = t.authOrganizationData;\r\n                    }\r\n                }\r\n            } else {\r\n                this.notifyService.warning(msg);\r\n                hasAuthority = { public: false, org: false };;\r\n            }\r\n            instance.refresh(hasAuthority);\r\n        })\r\n\r\n        const modalContainer = newSchemeDlg.dialog.instance as ModalContainerComponent;\r\n        modalContainer.draggbar.handle = instance.header.nativeElement;\r\n    }\r\n\r\n    getSchemeList(gridId: string) {\r\n        return this.schemeService.getSchemeList(gridId);\r\n    }\r\n\r\n    /** æ°å¢æ¹æ¡\r\n     *  isNewSchemeï¼æ¯å¦æ°å æ¹æ¡ï¼å¦åä¸ºå¦å­ä¸º\r\n     *  currentSettingsï¼ å½åéç½®ä¿¡æ¯\r\n     *  data: æ°å»ºæ¹æ¡çªå£ä¼ éæ°æ®\r\n     */\r\n    createNewScheme(gridId: string, data: any, isNewScheme = true, currentSettings: any) {\r\n        if(!data.name) {\r\n            // msg è¯·è¾å¥æ¹æ¡åç§°\r\n            return of({flag: false, msg: 'required.schemeName'});\r\n        } else {\r\n            const hasName = this.schemeService.hasSchemeName(gridId, data.name);\r\n\r\n            if (typeof hasName === 'boolean' && hasName) {\r\n                // msg 'æ¹æ¡åç§°å·²å­å¨ï¼è¯·ä¿®æ¹ã'\r\n                return of({flag: false, msg: 'has.exist'});\r\n            } else if (Array.isArray(hasName) && hasName.length) {\r\n                \r\n                const getMessageCode = (langCode) => {\r\n                    if (langCode === 'zh-CHS') {\r\n                        return 'has.chs'; // ç®ä½ä¸­æåç§°å·²å­å¨ã\r\n                    } else if(langCode === 'zh-CHT') {\r\n                        return 'has.cht'; // ç¹é«ä¸­æåç¨±å·²å­å¨ã\r\n                    } else {\r\n                        return 'has.en'; // è±æåç§°å·²å­å¨\r\n                    }\r\n                }\r\n\r\n                if (hasName.includes(this.localeSer.localeId)) {\r\n                    const msg = getMessageCode(this.localeSer.localeId);\r\n                    return of({flag: false, msg});\r\n                } else {\r\n                    const msgs = hasName.map(n => {\r\n                        return getMessageCode(n);\r\n                    });\r\n\r\n                    return of({flag: false, msg: msgs.join('|')});\r\n                }\r\n            }\r\n        }\r\n\r\n        const requiredName = [];\r\n\r\n\r\n        if (!data.name[this.localeSer.localeId]) {\r\n            requiredName.push(this.localeSer.localeId);\r\n        }\r\n\r\n        // this.languages.forEach(n => {\r\n        //     if (data.name[n.code] === '' || data.name[n.code] === undefined) {\r\n        //         requiredName.push(n.code);\r\n        //     }\r\n        // });\r\n\r\n        if (requiredName.length) {\r\n            const msgs = requiredName.map(n => {\r\n                if (n === 'zh-CHS') {\r\n                    return 'required.chs'; //'è¯·è¾å¥ç®ä½ä¸­æåç§°ã';\r\n                } else if(n === 'zh-CHT') {\r\n                    return 'required.cht'; //'è¯·è¾å¥ç¹ä½ä¸­æåç§°ã';\r\n                } else {\r\n                    return 'required.en'; // 'è¯·è¾å¥è±æåç§°ã';\r\n                }\r\n            });\r\n            return of({flag: false, msg: msgs.join('|')});\r\n        }\r\n\r\n\r\n        if (data.type && data.type === 'org' && (!data.orgids || !data.orgids.length)) {\r\n            // msg 'è¯·éæ©ç»ç»'\r\n            return of({flag: false, msg: 'required.org'});\r\n        }\r\n        let _config = null;\r\n\r\n        if (!isNewScheme) {\r\n            const LOCALEID = this.localeSer.localeId;\r\n\r\n            if (currentSettings && currentSettings.columnFormat) {\r\n                currentSettings.columnFormat = this.convertColumnsToSimple([currentSettings.columnFormat]);\r\n            }\r\n\r\n            _config ={ [LOCALEID]: currentSettings };\r\n        }\r\n\r\n        const newId = this.idService.guid();\r\n        let isDefault = data.isDefault;\r\n        if (isDefault) {\r\n            if (data.type !== 'private') {\r\n                isDefault = false;\r\n            }\r\n        }\r\n\r\n        if (data.name && typeof data.name === 'object') {\r\n            data.name = JSON.stringify(data.name);\r\n        }\r\n\r\n        const scheme: DatagridSchemeModel = {\r\n            id: newId,\r\n            belongId: '',\r\n            code: '',\r\n            name: data.name,\r\n            type: data.type,\r\n            isDefault: isDefault,\r\n            isSystem: false,\r\n            extendId: 'datagrid-settings-scheme',\r\n            extendInfo: this.buildOrgAndSchemeRelations(newId, data.orgids),\r\n            queryConditionString: _config? JSON.stringify(_config): '',\r\n        };\r\n\r\n        return this.schemeService.saveScheme(scheme, gridId).pipe(\r\n            map(() => {\r\n                return scheme;\r\n            })\r\n        );\r\n    }\r\n\r\n    setSchemeList(schemeList: DatagridSchemeModel[], gridId: string) {\r\n        this.schemeService.update({list: schemeList}, gridId);\r\n    }\r\n\r\n    private buildOrgAndSchemeRelations(schemeId: string, orgIds: any) {\r\n        if (!orgIds || !orgIds.length) {\r\n            return  [];\r\n        }\r\n        \r\n        if (typeof orgIds === 'string') {\r\n            orgIds = orgIds.split(',');\r\n        }\r\n\r\n        return orgIds.map(n => {\r\n            return {\r\n                id: this.idService.guid(),\r\n                orgId: n,\r\n                relatedId: schemeId\r\n            }\r\n        });\r\n    }\r\n\r\n    private getCurrentSchemeSettings(gridId: string): SettingModel {\r\n        const activeScheme = this.getActiveSchemeItem(gridId) as DatagridSchemeModel;\r\n        if (activeScheme && activeScheme.queryConditionString) {\r\n            return JSON.parse(activeScheme.queryConditionString);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","import { OnInit, Component, Input, ViewChild, Injector, EventEmitter, Output, ChangeDetectorRef } from '@angular/core';\r\nimport { MultiSelectComponent } from '@farris/ui-multi-select';\r\n\r\n@Component({\r\n    selector: 'sort-setting',\r\n    templateUrl: './datagrid-sort-setting.component.html'\r\n})\r\nexport class DatagridSortSettingComponent implements OnInit {\r\n\r\n    @Input() idField = 'field';\r\n    @Input() valueField = 'field';\r\n    @Input() textField = 'title';\r\n    @Input() selectedIds = [];\r\n\r\n    @Input() treeData = [];\r\n    @ViewChild('ms') ms: MultiSelectComponent;\r\n\r\n    @Output() sortInfoChange = new EventEmitter();\r\n\r\n    constructor(private injector: Injector, private cd: ChangeDetectorRef) {}\r\n\r\n\r\n    ngOnInit() {}\r\n\r\n    setFieldSortOrder($event: MouseEvent, data: any, order: string) {\r\n        $event.stopPropagation();\r\n        data.sortable = true;\r\n        data.order = order;\r\n\r\n        if (!order) {\r\n            this.ms.moveToLeft(data);\r\n        }\r\n\r\n        this.cd.detectChanges();\r\n        this.onSelectionsChange(null);\r\n        return false;\r\n    }\r\n\r\n    getSortInfo() {\r\n        if (this.ms.selections) {\r\n            const names = [];\r\n            const orders = [];\r\n            this.ms.selections.forEach(col => {\r\n                col.order = col.order || 'asc';\r\n                names.push(col.field);\r\n                orders.push(col.order);\r\n            });\r\n\r\n            return { sortName: names, sortOrder: orders };\r\n        }\r\n        return '';\r\n    }\r\n\r\n    onSelectionsChange($event) {\r\n        const si = this.getSortInfo();\r\n        this.sortInfoChange.emit(si);\r\n    }\r\n\r\n    onBeforeMove($event) {\r\n        const items: any = $event.items as any;\r\n        if ($event.target.indexOf('rightAll') > -1) {\r\n            for (const id in items) {\r\n                if ($event.items[id]) {\r\n                    $event.items[id].order = 'asc';\r\n                }\r\n            }\r\n        } else {\r\n            if ($event.target === 'right') {\r\n                for (const id in items) {\r\n                    if ($event.items[id]) {\r\n                        $event.items[id].order = 'asc';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { OnInit, Component, Input, ViewChild, Injector, EventEmitter,\r\n    Output, ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { MultiSelectComponent } from '@farris/ui-multi-select';\r\n@Component({\r\n    selector: 'view-columns',\r\n    templateUrl: './datagrid-view-columns.component.html',\r\n})\r\nexport class DatagridViewColumnsComponent implements OnInit, OnChanges {\r\n    @Input() idField = 'field';\r\n    @Input() valueField = 'field';\r\n    @Input() textField = 'title';\r\n\r\n\r\n    private _selectedIds = [];\r\n    get selectedIds() {\r\n        return this._selectedIds;\r\n    }\r\n    @Input() set selectedIds(vals) {\r\n        this._selectedIds = vals;\r\n        this.selectedIdsChange.emit(vals);\r\n    }\r\n\r\n    @Input() treeData = [];\r\n    @ViewChild('ms') ms: MultiSelectComponent;\r\n\r\n    @Output() selectedIdsChange = new EventEmitter();\r\n\r\n    constructor(private injector: Injector, private cd: ChangeDetectorRef) {}\r\n\r\n\r\n    ngOnInit() {}\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n\r\n    }\r\n\r\n    onBeforeMove($event) {\r\n\r\n    }\r\n\r\n    hiddenColumn($event: MouseEvent, column: any) {\r\n        $event.stopPropagation();\r\n        this.ms.moveToLeft(column);\r\n    }\r\n}\r\n","import { LocaleService } from '@farris/ui-locale';\r\nimport { Component, Input, OnInit, Injector, ViewChild, Output, EventEmitter, ChangeDetectorRef, OnChanges, SimpleChanges, ViewEncapsulation } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { DatagridSettingsComponent } from '../datagrid-settings.component';\r\n\r\n@Component({\r\n    selector: 'column-format-setting',\r\n    templateUrl: './column-format-setting.component.html',\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ColumnFormatSettingComponent implements OnInit, OnChanges {\r\n    @Input() columns = [];\r\n    @Input() fields = [];\r\n\r\n    @ViewChild('colformatform') colForm: NgForm;\r\n\r\n    @Output() formatChange = new EventEmitter();\r\n    @Output() fieldsChange = new EventEmitter();\r\n\r\n    allCols = [];\r\n\r\n    /** format Data */\r\n    formatData = [];\r\n    columnType = 'all';\r\n    activeField = null;\r\n    showGridFooter = false;\r\n\r\n    searchItems = [];\r\n    alignItems = [];\r\n    summaryItems = [];\r\n    summaryItems2 = [];\r\n    localeSer: LocaleService;\r\n    isEn = false;\r\n\r\n    switchValue = false;\r\n\r\n    _searchResult = 0;\r\n\r\n    constructor(private injector: Injector, public gridSettingComponentRef: DatagridSettingsComponent, private cd: ChangeDetectorRef) {\r\n        this.showGridFooter = this.gridSettingComponentRef.gridInstance.showFooter &&\r\n                                !this.gridSettingComponentRef.gridInstance.footerTemplate;\r\n        this.localeSer = this.injector.get(LocaleService, null);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.columns && !changes.columns.isFirstChange()) {\r\n            this.setFormatData();\r\n            this.allCols = this.columns[0];\r\n            this.activeField = this.columns[0][0];\r\n            this.checkColumnOptions();\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        this.isEn = this.localeSer.localeId === 'en';\r\n\r\n        this.initData();\r\n\r\n        if (this.colForm) {\r\n            this.colForm.valueChanges.subscribe(v => {\r\n                if (!this.colForm.pristine) {\r\n                    this.formatChange.emit(this.formatData);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private setFormatData() {\r\n        // this.formatData = this.fields.map(n => {\r\n        //     return this.columns[0].find(col => col.field === n);\r\n        // });\r\n        this.formatData =  this.columns[0];\r\n    }\r\n\r\n    private initData() {\r\n\r\n        this.alignItems = this.gridSettingComponentRef.alignItems;\r\n        this.searchItems = this.gridSettingComponentRef.searchItems;\r\n        this.summaryItems = this.gridSettingComponentRef.summaryItems;\r\n        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;\r\n\r\n\r\n        this.setFormatData();\r\n        this.allCols = this.columns[0];\r\n        this.activeField = this.columns[0][0];\r\n        this.checkColumnOptions();\r\n    }\r\n\r\n    private checkColumnOptions() {\r\n        if (this.activeField) {\r\n            if (this.activeField.allowGrouping === undefined) {\r\n                this.activeField.allowGrouping = true;\r\n            }\r\n\r\n            if (this.activeField.groupFooter === undefined) {\r\n                this.activeField.groupFooter = { options: {calculationType: -1} };\r\n            } else {\r\n                this.activeField.groupFooter.options = this.activeField.groupFooter.options || {calculationType: -1};\r\n                if (this.activeField.groupFooter.options.calculationType === undefined) {\r\n                    this.activeField.groupFooter.options.calculationType = -1;\r\n                }\r\n            }\r\n\r\n            if (this.activeField.footer === undefined) {\r\n                this.activeField.footer =  { options: {calculationType: -1} };\r\n            } else {\r\n                this.activeField.footer.options = this.activeField.footer.options || {calculationType: -1};\r\n                if (this.activeField.footer.options.calculationType === undefined) {\r\n                    this.activeField.footer.options.calculationType = -1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // æ ¹æ®åçç±»åè¿è¡ç­éè¿æ»¤ï¼\r\n    // all ææå\r\n    // visible å¯è§å\r\n    // hidden éèå\r\n    // group åç»å\r\n    filterColumns( searchWords = '') {\r\n        let cols = [];\r\n     \r\n        if (this.switchValue) {\r\n            cols = this.columns[0].filter(n => this.fields.indexOf(n.field) > -1);\r\n        } else {\r\n            cols = this.columns[0];\r\n        }\r\n\r\n\r\n        if (searchWords) {\r\n            cols = cols.filter(c => c.title.toLowerCase().indexOf(searchWords) > -1);\r\n        }\r\n\r\n        this.allCols = cols;\r\n        this._searchResult = this.allCols.filter(n => n.visible).length;\r\n    }\r\n\r\n    onFieldClick(col, $event) {\r\n        this.activeField = col;\r\n        this.checkColumnOptions();\r\n    }\r\n\r\n\r\n    private onFieldsChanged() {\r\n        this.setFormatData();\r\n        this.fieldsChange.emit(this.fields);\r\n    }\r\n\r\n    onDblClick($event, col) {\r\n        this.onCheckboxClick($event, col);\r\n    }\r\n\r\n    onCheckboxClick($event, col) {\r\n        $event.stopPropagation();\r\n        const index = this.fields.indexOf(col.field);\r\n        if (index === -1) {\r\n            this.fields.push(col.field);\r\n        } else {\r\n            this.fields.splice(index, 1);\r\n        }\r\n\r\n        this.columns[0].forEach(f => {\r\n            f.visible = this.fields.indexOf(f.field) > -1;\r\n        });\r\n\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n\r\n        this.onFieldsChanged();\r\n    }\r\n\r\n    searchColumn($event) {\r\n        const txt = $event.target.value;\r\n        this.filterColumns(txt);\r\n    }\r\n\r\n    onFieldDrop(fieldInfo, txt, ulElRef: any) {\r\n        const { removedIndex, addedIndex } = fieldInfo;\r\n\r\n        const moveItem = this.allCols[removedIndex];\r\n        const targetItem = this.allCols[addedIndex];\r\n\r\n        const moveItemIndex = this.columns[0].findIndex(n => n.field === moveItem.field);\r\n        const targetItemIndex = this.columns[0].findIndex(n => n.field === targetItem.field);\r\n\r\n        const removedItem = this.columns[0].splice(moveItemIndex, 1);\r\n        this.columns[0].splice(targetItemIndex, 0, ...removedItem);\r\n\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n        this.onFieldsChanged();\r\n\r\n        this.filterColumns(txt);\r\n\r\n        // if (ulElRef) {\r\n        //     ulElRef.querySelectorAll('li .field-drag-handle').forEach(el => {\r\n        //         el.style.cursor = 'grab';\r\n        //     });\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * 0: 1ä¸ªä¹æ²¡æéä¸­ï¼ 1: å¨é¨éä¸­ï¼ 2: æéä¸­çä¹ææ²¡éä¸­ç\r\n     */\r\n    private getCheckAllState(search = false) {\r\n        if (this.fields.length === 0) {\r\n            return 0;\r\n        } else {\r\n            if (search) {\r\n                if (this._searchResult === this.allCols.length) {\r\n                    return 1;\r\n                }\r\n            } else {\r\n                if (this.fields.length === this.columns[0].length) {\r\n                    return 1;\r\n                }\r\n            }\r\n            return 2;\r\n        }\r\n    }\r\n\r\n    onCheckAllClick($event, txt) {\r\n        const state = this.getCheckAllState(txt);\r\n        const isVisible = state === 0 || state === 2;\r\n        if (txt == '') {\r\n            if (isVisible) {\r\n                // æ§è¡å¨é\r\n                this.columns[0].forEach(n => n.visible = true);\r\n                this.fields = this.columns[0].map(n => n.field);\r\n            } else {\r\n                // åæ¶å¨é\r\n                this.columns[0].forEach(n => n.visible = false);\r\n                this.fields = [];\r\n            }\r\n        } else {\r\n            this.allCols.forEach(c => {\r\n                const col = this.columns[0].find(n => c.field === n.field);\r\n                col.visible = isVisible;\r\n                c.visible = isVisible;\r\n            });\r\n            this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n        }\r\n\r\n        this.onFieldsChanged();\r\n        this.filterColumns(txt);\r\n    }\r\n\r\n     // ä»æ¾ç¤ºå¯è§å\r\n     onlySeeVisibleColumns($event, txt) {\r\n        this.switchValue = $event;\r\n        this.filterColumns(txt);\r\n    }\r\n\r\n    clearSearch($event, searchInput) {\r\n        if (searchInput && searchInput.value) {\r\n            this.filterColumns('');\r\n            searchInput.value = '';\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit, Input, Injector, ChangeDetectorRef, ElementRef, ViewChild, EventEmitter, Output, OnChanges, SimpleChanges, ViewEncapsulation } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { DatagridSettingsComponent } from '../datagrid-settings.component';\r\n\r\n@Component({\r\n    selector: 'column-group-setting',\r\n    templateUrl: './column-group.component.html',\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ColumnGroupSettingComponent implements OnInit, OnChanges {\r\n    @Input() columns;\r\n    @Input() fields = [];\r\n    @Input() formatColumns = [];\r\n\r\n    @Input() groupFields = [];\r\n    @Input() groupRowState = true;\r\n\r\n    @Output() groupFieldsChange = new EventEmitter();\r\n    @Output() formatColumnsChange = new EventEmitter();\r\n    @Output() groupRowStateChange = new EventEmitter();\r\n\r\n    @ViewChild('groupingSetting') groupingSettingEl: ElementRef;\r\n    @ViewChild('selectcolumnspanel') selectcolumnspanel: ElementRef;\r\n    @ViewChild('groupSumform') colForm: NgForm;\r\n\r\n    groupColumns = [];\r\n    allowGroupColumns = [];\r\n    activeCalculationCol = null;\r\n\r\n\r\n    showSelectColumnsPanel = false;\r\n    summaryItems = [];\r\n    summaryItems2 = [];\r\n    constructor(private injector: Injector, public gridSettingComponentRef: DatagridSettingsComponent, private cd: ChangeDetectorRef) { }\r\n\r\n    ngOnInit(): void {\r\n\r\n        this.summaryItems = this.gridSettingComponentRef.summaryItems;\r\n        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;\r\n\r\n        this.setGroupColumns();\r\n        this.registerEventHandle();\r\n        this.initCalculationColumns();\r\n\r\n        if (this.colForm) {\r\n            this.colForm.valueChanges.subscribe(v => {\r\n                if (!this.colForm.pristine) {\r\n                    this.formatColumnsChange.emit(this.formatColumns);\r\n                }\r\n            });\r\n        }\r\n        \r\n        this.formatColumns.forEach(n => {\r\n            this.checkColumnOptions(n);\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.formatColumns && !changes.formatColumns.isFirstChange()) {\r\n            this.formatColumns.forEach(n => {\r\n                this.checkColumnOptions(n);\r\n            });\r\n            this.setGroupColumns();\r\n            this.initCalculationColumns();\r\n        }\r\n    }\r\n\r\n    private initCalculationColumns() {\r\n        if (this.formatColumns) {\r\n            this.activeCalculationCol = this.formatColumns[0];\r\n        }\r\n    }\r\n\r\n    private registerEventHandle() {\r\n        this.groupingSettingEl.nativeElement.addEventListener('click', (e) => {\r\n            if (e.target  !== this.selectcolumnspanel.nativeElement) {\r\n                this.showSelectColumnsPanel = false;\r\n            }\r\n        }, false);\r\n    }\r\n\r\n    private setGroupColumns() {\r\n        if (this.groupFields && this.groupFields.length) {\r\n            this.groupColumns = this.groupFields.map( f => {\r\n                return this.columns[0].find(col => col.field === f);\r\n            }).filter(n => n);\r\n        } else {\r\n            this.groupColumns = [];\r\n        }\r\n        this.onGroupFieldsChange();\r\n    }\r\n\r\n    private getAllowGroupingColumns() {\r\n        return this.columns[0].filter(n => {\r\n            if (n.field.indexOf('farris-datagrid-column_') > -1) {\r\n                return false;\r\n            }\r\n            return  n.allowGrouping || n.allowGrouping === undefined \r\n        });\r\n    }\r\n\r\n    private onGroupFieldsChange() {\r\n        this.groupFieldsChange.emit(this.groupFields);\r\n    }\r\n\r\n    private checkColumnOptions(col) {\r\n        if (col) {\r\n\r\n            if (col.groupFooter === undefined) {\r\n                col.groupFooter = { options: {calculationType: -1} };\r\n            } else {\r\n                col.groupFooter.options = col.groupFooter.options || {calculationType: -1};\r\n                if (col.groupFooter.options.calculationType === undefined) {\r\n                    col.groupFooter.options.calculationType = -1;\r\n                }\r\n            }\r\n\r\n            // if (this.activeField.footer === undefined) {\r\n            //     this.activeField.footer =  { options: {calculationType: -1} };\r\n            // } else {\r\n            //     this.activeField.footer.options = this.activeField.footer.options || {calculationType: -1};\r\n            //     if (this.activeField.footer.options.calculationType === undefined) {\r\n            //         this.activeField.footer.options.calculationType = -1;\r\n            //     }\r\n            // }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * æ¾ç¤ºæéèå­æ®µéåé¢æ¿\r\n     */\r\n    toggleGroupingColumnPanel($event) {\r\n        $event.stopPropagation();\r\n        this.showSelectColumnsPanel = !this.showSelectColumnsPanel;\r\n        this.allowGroupColumns = this.getAllowGroupingColumns();\r\n    }\r\n\r\n    /** æ·»å åç»å­æ®µ */\r\n    addGroupColumn($event, col) {\r\n        $event.stopPropagation();\r\n        if (this.groupFields.indexOf(col.field) === -1) {\r\n            this.groupColumns = [...this.groupColumns, col];\r\n            this.groupFields = this.groupColumns.map(n => n.field);\r\n            this.onGroupFieldsChange();\r\n            this.showSelectColumnsPanel = false;\r\n        }\r\n    }\r\n\r\n    /** ç§»é¤åç»å­æ®µ */\r\n    onRemoveGroupingField($event, col) {\r\n        $event.stopPropagation();\r\n        this.groupFields = this.groupFields.filter(n => n !== col.field);\r\n        this.setGroupColumns();\r\n    }\r\n\r\n    /** æå¨åç»å­æ®µè¿è¡æåº */\r\n    onGroupingFieldDropped($event) {\r\n        const { removedIndex, addedIndex } = $event;\r\n\r\n        const removedItem = this.groupFields.splice(removedIndex, 1);\r\n        this.groupFields.splice(addedIndex, 0, ...removedItem);\r\n        this.setGroupColumns();\r\n    }\r\n\r\n    onFieldClick($event, col) {\r\n        this.activeCalculationCol = col;\r\n    }\r\n}\r\n","\r\nimport { Directive, NgZone, Injector, Renderer2, ElementRef, AfterViewInit, Input,\r\n        OnChanges, SimpleChanges, Output, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { dropHandlers, smoothDnD as SmoothDndForVisible, DropResult, ContainerOptions, constants } from '@farris/smooth-dnd';\r\n\r\n\r\nconst { wrapperClass, animationClass } = constants;\r\nSmoothDndForVisible.dropHandler = dropHandlers.reactDropHandler().handler;\r\nSmoothDndForVisible.wrapChild = false;\r\n\r\nexport interface DragStartEndInfo {\r\n    isSource: boolean;\r\n    payload: any;\r\n    willAcceptDrop: boolean;\r\n}\r\n\r\n@Directive({\r\n    selector: '[column-visible-drag]',\r\n})\r\nexport class ColumnVisibleDragDirective implements AfterViewInit, OnDestroy {\r\n    private container: any;\r\n    @Output() drop = new EventEmitter();\r\n    @Input() options: ContainerOptions = {\r\n        behaviour: 'move',\r\n        dragHandleSelector: '.field-drag-handle',\r\n        dropPlaceholder: {\r\n            className: 'drop-group-field',\r\n        },\r\n        getGhostParent: () => {\r\n            return document.body;\r\n        },\r\n        getChildPayload: this.getChildPayload.bind(this),\r\n        shouldAcceptDrop: (sourceContainerOptions, payload) => {\r\n            return true;\r\n        },\r\n        onDropReady: (dropResult: DropResult) => {\r\n            this.ngzone.run(() => {\r\n                this.onDropReady(dropResult);\r\n            });\r\n        },\r\n        onDrop: (dropResult: DropResult) => {\r\n            this.ngzone.run(() => {\r\n                this.drop.emit(dropResult);\r\n            });\r\n        },\r\n        onDragEnter: () => {\r\n            this.ngzone.run(() => {\r\n                this.onDragEnter();\r\n            });\r\n        },\r\n        onDragStart: (info: DragStartEndInfo) => {\r\n            this.ngzone.run(() => {\r\n                this.onDragStart(info);\r\n            });\r\n        },\r\n        onDragEnd: (info: DragStartEndInfo) => {\r\n            this.ngzone.run(() => {\r\n                this.onDragEnd(info);\r\n            });\r\n        }\r\n    };\r\n\r\n    constructor(private ngzone: NgZone, private injector: Injector, private render: Renderer2, private el: ElementRef) { }\r\n    ngAfterViewInit() {\r\n        this.initDnD();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.disposeDnd();\r\n    }\r\n\r\n    private disposeDnd() {\r\n        if (this.container) {\r\n            this.container.dispose();\r\n            this.container = null;\r\n        }\r\n    }\r\n\r\n    private initDnD() {\r\n        this.disposeDnd();\r\n        this.container = SmoothDndForVisible(\r\n            this.el.nativeElement,\r\n            this.options\r\n        );\r\n    }\r\n\r\n    private getChildPayload(index) {\r\n        return index;\r\n    }\r\n\r\n    private onDropReady(dropResult) {\r\n    }\r\n\r\n    private onDragStart(info) {\r\n\r\n    }\r\n\r\n    private onDragEnd(info) {\r\n\r\n    }\r\n\r\n\r\n    private onDragEnter() {\r\n\r\n    }\r\n\r\n}\r\n","import { Directive, NgZone, Injector, Renderer2, ElementRef, AfterViewInit, Input,  Output, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { dropHandlers, smoothDnD as SmoothDndForGroupingField, DropResult, ContainerOptions, constants } from '@farris/smooth-dnd';\r\n\r\nSmoothDndForGroupingField.dropHandler = dropHandlers.reactDropHandler().handler;\r\nSmoothDndForGroupingField.wrapChild = false;\r\n\r\n@Directive({\r\n    selector: '[column-group-drag]',\r\n})\r\nexport class ColumnGroupDragDirective implements AfterViewInit, OnDestroy {\r\n    private container: any;\r\n    @Output() drop = new EventEmitter();\r\n    @Input() options: ContainerOptions = {\r\n        orientation: 'horizontal',\r\n        behaviour: 'move',\r\n        dropPlaceholder: {\r\n            className: 'drop-group-field',\r\n        },\r\n        getGhostParent: () => {\r\n            return document.body;\r\n        },\r\n        getChildPayload: this.getChildPayload.bind(this),\r\n        shouldAcceptDrop: (sourceContainerOptions, payload) => {\r\n            return true;\r\n        },\r\n        onDropReady: (dropResult: DropResult) => {\r\n            this.ngzone.run(() => {\r\n                this.onDropReady(dropResult);\r\n            });\r\n        },\r\n        onDrop: (dropResult: DropResult) => {\r\n            this.ngzone.run(() => {\r\n                this.drop.emit(dropResult);\r\n            });\r\n        },\r\n        onDragEnter: () => {\r\n            this.ngzone.run(() => {\r\n                this.onDragEnter();\r\n            });\r\n        },\r\n        onDragStart: (info) => {\r\n            this.ngzone.run(() => {\r\n                this.onDragStart(info);\r\n            });\r\n        },\r\n        onDragEnd: (info) => {\r\n            this.ngzone.run(() => {\r\n                this.onDragEnd(info);\r\n            });\r\n        }\r\n    };\r\n\r\n    constructor(private ngzone: NgZone, private injector: Injector, private render: Renderer2, private el: ElementRef) { }\r\n    ngAfterViewInit() {\r\n        this.initDnD();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.disposeDnd();\r\n    }\r\n\r\n    private disposeDnd() {\r\n        if (this.container) {\r\n            this.container.dispose();\r\n            this.container = null;\r\n        }\r\n    }\r\n\r\n\r\n    private initDnD() {\r\n        this.disposeDnd();\r\n        this.container = SmoothDndForGroupingField(\r\n            this.el.nativeElement,\r\n            this.options\r\n        );\r\n    }\r\n\r\n    private getChildPayload(index) {\r\n        return index;\r\n    }\r\n\r\n    private onDropReady(dropResult) {\r\n    }\r\n\r\n    private onDragStart(info) {\r\n    }\r\n\r\n    private onDragEnd(info) {\r\n    }\r\n\r\n\r\n    private onDragEnter() {\r\n    }\r\n}\r\n","\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { ModalModule } from '@farris/ui-modal';\r\nimport { GRID_SETTINGS_SERVICE, DatagridModule} from '@farris/ui-datagrid';\r\nimport { MultiSelectModule } from '@farris/ui-multi-select';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { ComboListModule } from '@farris/ui-combo-list';\r\nimport { SwitchModule } from '@farris/ui-switch';\r\nimport { FarrisTooltipModule } from '@farris/ui-tooltip';\r\nimport { NotifyModule } from '@farris/ui-notify';\r\nimport { OrganizationSelectorModule } from '@farris/ui-organization-selector';\r\n\r\nimport { DatagridSettingsComponent } from './datagrid-settings.component';\r\n\r\nimport { DatagridSettingsService } from './datagrid-settings.service';\r\nimport { DatagridSortSettingComponent } from './datagrid-sort-setting.component';\r\nimport { DatagridViewColumnsComponent } from './datagrid-view-columns.component';\r\nimport { ColumnFormatSettingComponent } from './column-format-setting/column-format-setting.component';\r\nimport { ColumnGroupSettingComponent } from './column-group/column-group.component';\r\nimport { ColumnVisibleDragDirective } from './column-format-setting/column-visible-drag.directive';\r\nimport { ColumnGroupDragDirective } from './column-group/column-group-drag.directive';\r\nimport { SimpleColumnsComponent } from './simple-mode/simple-columns.component';\r\nimport { NewSchemeComponent } from './scheme/newscheme.component';\r\nimport { SchemeListComponent } from './scheme/scheme-list.component';\r\nimport { LanguageTextboxModule } from '@farris/ui-language-textbox';\r\n@NgModule({\r\n    declarations: [\r\n        DatagridSettingsComponent,\r\n        DatagridSortSettingComponent,\r\n        DatagridViewColumnsComponent,\r\n        ColumnFormatSettingComponent,\r\n        ColumnGroupSettingComponent,\r\n        ColumnVisibleDragDirective,\r\n        ColumnGroupDragDirective,\r\n        SimpleColumnsComponent,\r\n        NewSchemeComponent,\r\n        SchemeListComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        MultiSelectModule,\r\n        ComboListModule,\r\n        DatagridModule,\r\n        FarrisCommonModule.forRoot(),\r\n        MessagerModule.forRoot(),\r\n        LocaleModule.forRoot(),\r\n        ModalModule.forRoot(),\r\n        SwitchModule,\r\n        FarrisTooltipModule,\r\n        NotifyModule.forRoot(),\r\n        OrganizationSelectorModule,\r\n        LanguageTextboxModule,\r\n    ],\r\n    entryComponents: [\r\n        DatagridSettingsComponent,\r\n        SimpleColumnsComponent,\r\n        NewSchemeComponent,\r\n        SchemeListComponent\r\n    ],\r\n    exports: [\r\n        DatagridSettingsComponent,\r\n        SimpleColumnsComponent,\r\n        NewSchemeComponent,\r\n        SchemeListComponent\r\n    ]\r\n})\r\nexport class DatagridSettingsModule {\r\n    static forRoot(apiUri = ''): ModuleWithProviders {\r\n        return {\r\n            ngModule: DatagridSettingsModule,\r\n            providers: [\r\n                { provide: GRID_SETTINGS_SERVICE, useClass: DatagridSettingsService }\r\n            ]\r\n        };\r\n    }\r\n}\r\n"]}