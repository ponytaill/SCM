{"version":3,"sources":["ng://@farris/ui-layout/lib/layout.component.ts","ng://@farris/ui-layout/lib/panels/layout-panel.component.ts","ng://@farris/ui-layout/lib/layout.module.ts"],"names":["LayoutComponent","prototype","ngOnInit","this","init","ngAfterContentInit","_this","checkPanels","panels","forEach","p","split","margin","region","render2","setStyle","getPanel","el","nativeElement","ngZone","runOutsideAngular","setTimeout","setPanelMaxSize","direction","myclass","fill","isInLayoutPanel","addClass","parentElement","width","height","getLayoutSize","clientWidth","clientHeight","layoutSize","east","maxWidth","west","south","maxHeight","north","find","length","regions","map","unique","Error","r","arr","tmp","Set","Array","from","attributes","Component","args","selector","template","encapsulation","ViewEncapsulation","Emulated","ElementRef","Renderer2","Injector","Input","HostBinding","injector","showBorder","get","NgZone","LayoutPanelComponent","Object","defineProperty","_resizable","val","setStyles","rect","getBoundingClientRect","panel","resetFlex","getrzHandler","rzdir","rzHandler","isCenterPanel","ngOnChanges","changes","isFirstChange","getBsClass","classList","c","indexOf","hasBsClass","undefined","initSize","initClass","overflow","bsColClass","layout","push","onResizeStart","$event","resize","size","onResized","onReizing","updatePanelSize","resizing","emit","target","resized","Output","ViewChild","AngularResizableDirective","minHeight","minWidth","title","iconCls","EventEmitter","LayoutPanelTitleComponent","LayoutModule","NgModule","imports","CommonModule","AngularDraggableModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["import { LayoutPanelComponent } from './panels/layout-panel.component';\r\nimport { Injector, ContentChildren, ViewEncapsulation, Output, EventEmitter, Inject, forwardRef, NgZone } from '@angular/core';\r\n/*\r\n * @Author: ç¯çç§æ(lucas huang)\r\n * @Date: 2018-11-24 15:58:04\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-04-08 19:02:25\r\n * @Company: Inspur\r\n * @Version: v0.0.1\r\n */\r\nimport {\r\n    Component, OnInit, Input, QueryList, ViewChildren, HostBinding,\r\n    ElementRef, Renderer2, Directive, AfterContentInit, ViewChild\r\n} from '@angular/core';\r\n\r\n\r\n@Component({\r\n    selector: 'farrisui-layout,farris-layout,layout',\r\n    templateUrl: 'layout.component.html',\r\n    styles: [\r\n        `\r\n        :host.layout-fill {position: absolute; top: 0; right: 0;bottom: 0;left: 0;}\r\n        `\r\n    ],\r\n    encapsulation: ViewEncapsulation.Emulated\r\n})\r\nexport class LayoutComponent implements OnInit, AfterContentInit {\r\n\r\n    @Input() width: number;\r\n    @Input() height: number;\r\n    @Input() showBorder = true;\r\n\r\n    // h: æ°´å¹³æå; v: åç´æå\r\n    @Input() direction: 'h' | 'v' = 'h';\r\n\r\n    @Input() fill = false;\r\n\r\n    @HostBinding('class') myclass = 'd-flex';\r\n\r\n    panels: LayoutPanelComponent[] = [];\r\n\r\n    private ngZone: NgZone;\r\n\r\n    constructor(private el: ElementRef, private render2: Renderer2, private injector: Injector) {\r\n        this.ngZone = this.injector.get(NgZone);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.checkPanels();\r\n\r\n        this.panels.forEach(p => {\r\n            if (p.split) {\r\n                let margin = '';\r\n                switch (p.region) {\r\n                    case 'north':\r\n                        margin = 'marginTop';\r\n                        break;\r\n                    case 'south':\r\n                        margin = 'marginBottom';\r\n                        break;\r\n                    case 'west':\r\n                        margin = 'marginLeft';\r\n                        break;\r\n                    case 'east':\r\n                        margin = 'marginRight';\r\n                        break;\r\n                }\r\n                this.render2.setStyle(this.getPanel('center').el.nativeElement, margin, '5px');\r\n            }\r\n        });\r\n        this.ngZone.runOutsideAngular(() => {\r\n            setTimeout(() => this.setPanelMaxSize());\r\n        });\r\n    }\r\n\r\n    private init() {\r\n        if (this.direction === 'h') {\r\n            this.myclass += ' flex-row';\r\n        } else {\r\n            this.myclass += ' flex-column';\r\n        }\r\n\r\n        if (this.fill) {\r\n            if (this.isInLayoutPanel()) {\r\n                this.myclass += ' flex-fill';\r\n                this.render2.addClass(this.el.nativeElement.parentElement, 'd-flex');\r\n            } else {\r\n                this.myclass += ' layout-fill';\r\n            }\r\n        } else {\r\n            if (this.width) {\r\n                this.render2.setStyle(this.el.nativeElement, 'width', this.width + 'px');\r\n            }\r\n\r\n            if (this.height) {\r\n                this.render2.setStyle(this.el.nativeElement, 'height', this.height + 'px');\r\n            }\r\n        }\r\n    }\r\n\r\n    private getLayoutSize() {\r\n        const size = {\r\n            width: this.el.nativeElement.clientWidth,\r\n            height: this.el.nativeElement.clientHeight\r\n        };\r\n        return size;\r\n    }\r\n\r\n    setPanelMaxSize() {\r\n        const layoutSize = this.getLayoutSize();\r\n        this.panels.forEach(p => {\r\n            if (p.region !== 'center') {\r\n                if (p.region === 'west' && layoutSize.width) {\r\n                    const east = this.getPanel('east');\r\n                    if (!east) {\r\n                        p.maxWidth = layoutSize.width - 100;\r\n                    } else {\r\n                        p.maxWidth = layoutSize.width - east.width - 100;\r\n                    }\r\n                }\r\n\r\n                if (p.region === 'east' && layoutSize.width) {\r\n                    const west = this.getPanel('west');\r\n                    if (!west) {\r\n                        p.maxWidth = layoutSize.width - 100;\r\n                    } else {\r\n                        p.maxWidth = layoutSize.width - west.width - 100;\r\n                    }\r\n                }\r\n\r\n                if (p.region === 'north' && layoutSize.height) {\r\n                    const south = this.getPanel('south');\r\n                    if (!south) {\r\n                        p.maxHeight = layoutSize.height - 100;\r\n                    } else {\r\n                        p.maxHeight = layoutSize.height - south.height - 100;\r\n                    }\r\n                }\r\n\r\n                if (p.region === 'south' && layoutSize.height) {\r\n                    const north = this.getPanel('north');\r\n                    if (!north) {\r\n                        p.maxHeight = layoutSize.height - 100;\r\n                    } else {\r\n                        p.maxHeight = layoutSize.height - north.height - 100;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getPanel(region: string) {\r\n        return this.panels.find(p => p.region === region);\r\n    }\r\n\r\n    private checkPanels() {\r\n        if (this.panels && this.panels.length) {\r\n            const regions = this.panels.map(p => p.region);\r\n            if (this.unique(regions).length === regions.length) {\r\n                if (this.direction === 'h') {\r\n                    if (regions.find(r => r === 'north' || r === 'south')) {\r\n                        throw new Error('æ°´å¹³æ¹åæåæ¶ï¼åªè½åå« east æè west');\r\n                    }\r\n                } else {\r\n                    if (regions.find(r => r === 'west' || r === 'east')) {\r\n                        throw new Error('æ°´å¹³æ¹åæåæ¶ï¼åªè½åå« north æè south');\r\n                    }\r\n                }\r\n                return true;\r\n            } else {\r\n                throw new Error('layout å¸å±å®¹å¨ä¸­å·æéå¤çpanelã');\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private unique(arr: string[]) {\r\n        const tmp = new Set(arr);\r\n        return Array.from(tmp);\r\n    }\r\n\r\n    private isInLayoutPanel() {\r\n        return !!this.el.nativeElement.parentElement.attributes['layout-panel'];\r\n    }\r\n}\r\n\r\n\r\n","import {\r\n    Component, OnInit, Input, ElementRef, Renderer2, ViewChild,\r\n    Output, EventEmitter, Inject, forwardRef, SimpleChanges, OnChanges, NgZone\r\n} from '@angular/core';\r\nimport { AngularResizableDirective } from '@farris/ui-draggable';\r\nimport { LayoutComponent } from './../layout.component';\r\n\r\n@Component({\r\n    selector: 'layout-panel',\r\n    template: `\r\n        <div #panel #ngResizable class=\"layout-panel\"\r\n            [ngResizable]=\"split\" [attr.region]=\"region\"\r\n            [rzHandles]=\"rzHandler\"\r\n            [rzMinWidth]=\"minWidth\"\r\n            [rzMaxWidth]=\"maxWidth\"\r\n            [rzMinHeight]=\"minHeight\"\r\n            [rzMaxHeight]=\"maxHeight\"\r\n            (rzResizing)=\"onReizing($event)\"\r\n            (rzStop) = \"onResized($event)\"\r\n            (rzStart) =\"onResizeStart($event)\" >\r\n\r\n            <layout-panel-title *ngIf=\"title\" [title]=\"title\"></layout-panel-title>\r\n\r\n            <ng-content></ng-content>\r\n        <div>\r\n    `,\r\n    styleUrls: ['./layout-panel.css']\r\n})\r\nexport class LayoutPanelComponent implements OnInit, OnChanges {\r\n    @Input() region: string;\r\n    @Input() height: number;\r\n    @Input() width: number;\r\n    @Input() minHeight = 50;\r\n    @Input() minWidth = 50;\r\n    @Input() maxHeight: number;\r\n    @Input() maxWidth: number;\r\n    @Input() title = '';\r\n    @Input() iconCls = '';\r\n    @Input() overflow = 'auto';\r\n\r\n    private _resizable = true;\r\n    rzHandler: string;\r\n    private bsColClass = '';\r\n    @Input() get split() {\r\n        return this._resizable;\r\n    }\r\n\r\n    set split(val: boolean) {\r\n        this._resizable = val;\r\n    }\r\n\r\n\r\n    @Input() showBorder = true;\r\n\r\n    @Output() resizing = new EventEmitter();\r\n    @Output() resized = new EventEmitter();\r\n    @ViewChild('panel') panel: ElementRef;\r\n    @ViewChild(AngularResizableDirective) ngResizable: AngularResizableDirective;\r\n\r\n    private setStyles() {\r\n        // this.ngZone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                let width, height;\r\n                const rect = this.el.nativeElement.getBoundingClientRect();\r\n\r\n                if (this.height) {\r\n                    height = this.height;\r\n                    this.render2.setStyle(this.el.nativeElement, 'height', height + 'px');\r\n                    this.render2.setStyle(this.panel.nativeElement, 'height', height + 'px');\r\n                }\r\n                if (this.width) {\r\n                    width = this.width;\r\n                    if (rect.width > this.width) {\r\n                        width = rect.width;\r\n                        this.width = width;\r\n                    }\r\n                    this.render2.setStyle(this.el.nativeElement, 'width', width + 'px');\r\n                    this.render2.setStyle(this.panel.nativeElement, 'width', width + 'px');\r\n\r\n                    this.resetFlex();\r\n                }\r\n            });\r\n        // });\r\n    }\r\n\r\n    private getrzHandler() {\r\n        if (this.region) {\r\n            let rzdir = '';\r\n            switch (this.region) {\r\n                case 'west':\r\n                    rzdir = 'e';\r\n                    break;\r\n                case 'east':\r\n                    rzdir = 'w';\r\n                    break;\r\n                case 'north':\r\n                    rzdir = 's';\r\n                    break;\r\n                case 'south':\r\n                    rzdir = 'n';\r\n                    break;\r\n            }\r\n\r\n            this.rzHandler = rzdir;\r\n        } else {\r\n            this.rzHandler = '';\r\n        }\r\n    }\r\n\r\n    isCenterPanel() {\r\n        return this.region === 'center';\r\n    }\r\n\r\n    constructor(public el: ElementRef, private render2: Renderer2, private layout: LayoutComponent, private ngZone: NgZone) { }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.width && !changes.width.isFirstChange()) {\r\n            this.setStyles();\r\n        }\r\n    }\r\n\r\n    private getBsClass() {\r\n        return Array.from<string>(this.el.nativeElement.classList).find((c: string) => c.indexOf('col-') > -1);\r\n    }\r\n    private hasBsClass() {\r\n        return this.getBsClass() !== undefined;\r\n    }\r\n\r\n    private initSize() {\r\n        this.setStyles();\r\n\r\n        if (this.region) {\r\n            if (this.region === 'west' || this.region === 'east') {\r\n                this.render2.setStyle(this.panel.nativeElement, 'height', '100%');\r\n            }\r\n        }\r\n    }\r\n\r\n    private initClass() {\r\n        if (this.isCenterPanel()) {\r\n            this.render2.addClass(this.panel.nativeElement, this.overflow == 'auto' ?'flex-fill': 'f-utils-fill');\r\n            if (this.el.nativeElement.parentElement.attributes['layout-panel']) {\r\n                this.render2.addClass(this.el.nativeElement.parentElement, 'd-flex');\r\n            }\r\n\r\n            this.render2.addClass(this.el.nativeElement, 'd-flex');\r\n            this.render2.addClass(this.el.nativeElement, 'f-utils-fill');\r\n        }\r\n\r\n        if (this.showBorder) {\r\n            this.render2.addClass(this.panel.nativeElement, 'layout-border');\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initSize();\r\n        this.initClass();\r\n        this.getrzHandler();\r\n\r\n        this.bsColClass = this.getBsClass();\r\n\r\n        this.layout.panels.push(this);\r\n    }\r\n\r\n    onResizeStart($event: any) {\r\n        this.resetFlex();\r\n    }\r\n\r\n    private resetFlex() {\r\n        if (this.region === 'west' || this.region === 'east') {\r\n            this.render2.setStyle(this.el.nativeElement, 'flex', 'none');\r\n            this.render2.setStyle(this.el.nativeElement, 'max-width', 'none');\r\n        }\r\n    }\r\n\r\n    resize(size: { width?: number, height?: number }) {\r\n        this.setStyles();\r\n        this.onResized({ size });\r\n    }\r\n\r\n    onReizing($event: any) {\r\n        this.updatePanelSize($event);\r\n        // console.log($event);\r\n        this.resizing.emit({ target: this, size: $event.size });\r\n    }\r\n\r\n    private updatePanelSize($event: any) {\r\n        if (this.region === 'south') {\r\n            this.render2.setStyle(this.panel.nativeElement, 'top', 0);\r\n        }\r\n        if (this.region === 'east') {\r\n            this.render2.setStyle(this.panel.nativeElement, 'left', 0);\r\n        }\r\n        if (this.region === 'south' || this.region === 'north') {\r\n            this.render2.setStyle(this.el.nativeElement, 'height', $event.size.height + 'px');\r\n        }\r\n        if (this.region === 'west' || this.region === 'east') {\r\n            this.render2.setStyle(this.el.nativeElement, 'width', $event.size.width + 'px');\r\n        }\r\n    }\r\n\r\n    onResized($event: any) {\r\n        if (this.region === 'south' || this.region === 'north') {\r\n            this.height = $event.size.height;\r\n        }\r\n\r\n        if (this.region === 'west' || this.region === 'east') {\r\n            this.width = $event.size.width;\r\n        }\r\n\r\n        this.updatePanelSize($event);\r\n\r\n        this.layout.setPanelMaxSize();\r\n        this.resized.emit($event.size);\r\n        this.layout.getPanel('center').resized.emit($event.size);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'layout-panel-title',\r\n    template: `\r\n        <div class=\"d-flex flex-row\" style=\"height: 28px; line-height: 28px\">\r\n            <div class=\"layout-panel-title\">\r\n                <span *ngIf=\"iconCls\" [class]=\"iconCls\"></span>\r\n                {{ title }}\r\n            </div>\r\n            <div class=\"layout-panel-title-tools flex-fill\">\r\n\r\n            </div>\r\n        </div>\r\n    `\r\n})\r\nexport class LayoutPanelTitleComponent {\r\n    @Input() title = '';\r\n    @Input() iconCls = '';\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AngularDraggableModule } from '@farris/ui-draggable';\r\n\r\nimport { LayoutPanelComponent, LayoutPanelTitleComponent } from './panels/layout-panel.component';\r\nimport { LayoutComponent } from './layout.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        AngularDraggableModule\r\n    ],\r\n    declarations: [LayoutComponent, LayoutPanelComponent, LayoutPanelTitleComponent],\r\n    exports: [LayoutComponent, AngularDraggableModule, LayoutPanelComponent],\r\n    providers: [],\r\n})\r\nexport class LayoutModule { }\r\n"]}