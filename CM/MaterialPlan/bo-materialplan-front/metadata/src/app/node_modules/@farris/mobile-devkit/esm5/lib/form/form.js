import { MetadataUtil } from '../core/index';
import { FormControl } from './form_control';
import { FORM_CONTROL_PROP_META } from './decorators';
import { Subject } from 'rxjs';
import { ValidatorFactory } from '../validator';
/**
 * Form抽象类
 */
var Form = /** @class */ (function () {
    /**
     * 构造函数
     */
    function Form(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.formControlConfigs = [];
        this.validateformControls = [];
        this.validateformControlPathMap = new Map;
        this.changes = new Subject();
    }
    /**
     * 初始化
     */
    Form.prototype.init = function () {
        this.collectMetadatas();
        this.createFormControls();
    };
    /**
     * 全部校验
     *  formControlConfigs 上所有的formControl的存在方法调用一遍 将错误信息集中返回
     */
    Form.prototype.validateFields = function () {
        var _this = this;
        var validationResult = [];
        if (this.validateformControls.length === 0) {
            return validationResult;
        }
        this.validateformControls.forEach(function (formControl) {
            _this[formControl]['validationResult'] = ValidatorFactory.executeValidator(_this[formControl]['validatorFn'], _this[formControl]['value']);
            !_this[formControl]['validationResult'].passing && validationResult.push(_this[formControl]);
        });
        this.changes.next({ type: 'validateFieldsFinished' });
        return validationResult;
    };
    /**
     * 获取某一个得校验错误信息
     * @param name 属性名称
     */
    Form.prototype.getFieldError = function (name) {
        if (this.validateformControls.length === 0) {
            return {};
        }
        var index = this.validateformControls.findIndex(function (item) {
            return item === name;
        });
        if (index === -1) {
            return {};
        }
        else {
            var result = ValidatorFactory.executeValidator(this[name]['validatorFn'], this[name]['value']);
            this[name]['validationResult'] = result;
            this.changes.next({ type: 'validateFieldsFinished', value: name });
            return result;
        }
    };
    /**
   * 根据form元数据中的path获取某一个得校验错误信息
   * @param path 属性名称数组
   */
    Form.prototype.getFieldErrorByPath = function (path) {
        if (this.validateformControls.length === 0) {
            return {};
        }
        var pathName = path[0];
        if (path && path.length >= 2) {
            pathName = path.join('.');
        }
        var index = this.validateformControlPathMap.has(pathName);
        if (!index) {
            return {};
        }
        else {
            var result = ValidatorFactory.executeValidator(this[this.validateformControlPathMap.get(pathName)]['validatorFn'], this[this.validateformControlPathMap.get(pathName)]['value']);
            this[this.validateformControlPathMap.get(pathName)]['validationResult'] = result;
            this.changes.next({ type: 'validateFieldsFinished', value: this.validateformControlPathMap.get(pathName) });
            return result;
        }
    };
    /**
     * 清除一组字段验证状态
     * @param fields 字段的数组
     */
    Form.prototype.resetFieldsValidate = function (fields) {
        var _this = this;
        if (this.validateformControls.length === 0) {
            return true;
        }
        else {
            if (fields && fields.length > 0) {
                var sa = new Set(this.validateformControls);
                var sb_1 = new Set(fields);
                // 交集
                var intersect = this.validateformControls.filter(function (x) { return sb_1.has(x); });
                // 遍历清空所有校验结果数据
                intersect.forEach(function (item) {
                    _this[item]['validationResult'] = {};
                });
            }
            else {
                // 没传数据全部清除
                this.validateformControls.forEach(function (item) {
                    _this[item]['validationResult'] = {};
                });
            }
            this.changes.next({ type: 'validateFieldsFinished' });
        }
    };
    /**
     * 创建FormControls
     */
    Form.prototype.createFormControls = function () {
        var _this = this;
        this.formControlConfigs.forEach(function (formControlConfig) {
            var name = formControlConfig.name;
            var formControl = new FormControl(formControlConfig, _this.viewModelContext);
            _this[name] = formControl;
        });
    };
    /**
     * 收集元数据
     */
    Form.prototype.collectMetadatas = function () {
        var _this = this;
        var formControlMetadatas = MetadataUtil.getPropsMetadatasByName(this.constructor, FORM_CONTROL_PROP_META);
        Object.keys(formControlMetadatas).forEach(function (name) {
            var formControlMetadata = formControlMetadatas[name];
            if (formControlMetadata.validRules) {
                _this.validateformControls.push(name);
                _this.validateformControlPathMap.set(formControlMetadata.bindingPath, name);
            }
            var formControlConfig = {
                name: name,
                bindingType: formControlMetadata.bindingType,
                bindingPath: formControlMetadata.bindingPath,
                valueConverter: formControlMetadata.valueConverter,
                valueChanging: formControlMetadata.valueChanging,
                valueChanged: formControlMetadata.valueChanged,
                validRules: formControlMetadata.validRules
            };
            _this.formControlConfigs.push(formControlConfig);
        });
    };
    Form.prototype.getEntityValueChangingListeners = function () {
        var listeners = {};
        this.formControlConfigs.forEach(function (formControl) {
            if (formControl.valueChanging) {
                listeners[formControl.bindingPath] = formControl.valueChanging;
            }
        });
        return listeners;
    };
    Form.prototype.getEntityValueChangedListeners = function () {
        var listeners = {};
        this.formControlConfigs.forEach(function (formControl) {
            if (formControl.valueChanged) {
                listeners[formControl.bindingPath] = formControl.valueChanged;
            }
        });
        return listeners;
    };
    return Form;
}());
export { Form };
//# sourceMappingURL=data:application/json;base64,