/**
 * 应用上下文
 * @author Witt<jiwt@inspur.com>
 * @todo
 * 1、parnet和AppContextManager是否必要？按理说就是应该隔离上下文，表单之间通过事件通讯进行交互；
 */
import { Injectable, Injector, Optional, SkipSelf } from '@angular/core';
import { Router } from '@angular/router';
import { Context } from '../context/index';
import { BindingData, BindingDataFactory } from '../binding-data';
import { FrameContextManager } from './frame_contex_manager';
import { FrameComponentRefresher } from './frame_component_refresher';
import { RepositoryManager } from './repository_mananger';
import { BindingDataManager } from './binding_data_manager';
import { ChangeDetectionController } from './change_detection_controller';
import { AppContextManager } from './app_context_manager';
import { Subject } from 'rxjs';
import { ComponentManager } from './component_manager';
import { UID } from '../misc/uid';
import { FORM_ID } from './tokens';
import { ContextMetadataBuilder } from './app_metadata_collector';
import { StateMachine } from '../state-machine';
import { CommandVariableParser, DataVariableParser, FrameIdVariableParser, StateMachineVariableParser, UIStateVariableParser, VariableParseService } from '../variable';
import { ViewModelManager } from './view_model_manager';
import { Repository } from '../repository';
import { UIState } from '../ui-state';
import { ContextMetadataManager } from './render_context_metadata_manager';
import { Form } from '../form';
import { ViewModel } from '../view-model';
import { FrameContext } from '../frame/frame_context';
import { NAMESPACE, FRAME_ID } from '../frame/tokens';
import { DEVKIT_RUN_MODE, RunMode } from '../core';
import { RunModeService } from '../misc/run_mode_service';
class AppContext extends Context {
    /**
     * 构造函数
     */
    constructor(injector, appContextManager, parent) {
        super();
        this.typeName = 'AppContext';
        /**
         * 是否已经销毁
         */
        this.isFormDestoryed = false;
        /**
         * 应用程序标识
         */
        this.applicationId = null;
        this.token = null;
        /**
         * 是否使用独立的eventBus
         * @memberof AppContext
         */
        this.useIsoluteEventBus = false;
        /**
         * 应用上下文元数据描述
         */
        this.metadata = {};
        this.disposed = false;
        this.destorySignal = new Subject();
        this.injector = injector;
        this.appContextManager = appContextManager;
        this.formId = this.injector && this.injector.get(FORM_ID, null) || null;
        // 默认运行模式为兼容模式
        this.runMode = this.injector && this.injector.get(DEVKIT_RUN_MODE, RunMode.compatible) || RunMode.compatible;
        RunModeService.setRunMode(this.runMode);
        this.params.set('formId', this.formId);
        this.params.set('appId', this.ApplicationId);
        this.params.set('token', this.Token);
        // 确定父子关系
        if (!parent) {
            this.parent = null;
            this.root = this;
        }
        else {
            this.parent = parent;
            this.root = parent.root;
        }
        this.registerToManager();
        this.frameContextManager = new FrameContextManager(this);
        this.frameComponentRefresher = new FrameComponentRefresher();
        this.repositoryManager = new RepositoryManager();
        this.bindingDataManager = new BindingDataManager();
        this.changeDetectionController = new ChangeDetectionController(this.frameContextManager);
        this.messagePipe = new Subject();
        this.componentRefs = new Map();
        this.componentManager = new ComponentManager(this);
        this.contextMetadataManager = new ContextMetadataManager();
        this.opened = false;
        // this.sortConditionManager = new SortConditionManager();
        // this.filterConditionManager = new FilterConditionManager();
        this.router = this.injector && this.injector.get(Router);
        this.viewModelManager = new ViewModelManager();
        this.contextMetadataBuilder = new ContextMetadataBuilder();
        this.variableParseService = new VariableParseService([
            new FrameIdVariableParser(),
            new DataVariableParser(),
            new UIStateVariableParser(),
            new StateMachineVariableParser(),
            new CommandVariableParser()
        ]);
    }
    /**
     * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。
     * @deprecated
     * @summary
     * 已经有运行时直接用中括号访问该属性的场景，虽然是private，但要进行兼容。
     */
    get frameContexts() {
        return this.frameContextManager.getFrameContextMap();
    }
    get formModule() {
        return this.formMetadataContent ? this.formMetadataContent.module : null;
    }
    dispose(options) {
        if (this.disposed) {
            return;
        }
        this.isFormDestoryed = true;
        this.disposed = true;
        this.router = null;
        this.unregisterFromManager();
        this.componentRefs.clear();
        if (this.stateMachine) {
            this.stateMachine.dispose();
            this.stateMachine = null;
        }
        this.frameComponentRefresher.dispose();
        this.frameContextManager.dispose();
        this.repositoryManager.dispose();
        this.viewModelManager.dispose();
        this.bindingDataManager.dispose();
        if (this.messagePipe) {
            this.messagePipe.complete();
            this.messagePipe = null;
        }
        this.injector = null;
        if (this.destorySignal) {
            this.destorySignal.next();
            this.destorySignal.complete();
        }
    }
    ngOnDestroy() {
        this.dispose();
    }
    /**
     * 由表单元数据、状态机元数据、前端构件元数据初始化解析型应用上下文
     * @param formMetadataContent 表单元数据
     * @param stateMachineMetadata 状态机元数据
     * @param controllers 前端构件元数据
     */
    initializeByMetadata(formMetadataContent, stateMachineMetadata, controllers, options) {
        this.metadata = this.contextMetadataBuilder.buildAppContextMetadata(formMetadataContent, stateMachineMetadata);
        if (!this.stateMachine) {
            // 避免由于组合表单，获取到父级状态机实例的问题
            // this.stateMachine = this.injector.get(StateMachine, new StateMachine());
            this.stateMachine = new StateMachine();
        }
        this.formMetadataContent = formMetadataContent;
        this.controllers = controllers;
        this.dynamicOptions = options;
    }
    /**
     * Register current AppContext instance to AppContextManager
     */
    registerToManager() {
        if (!this.appContextManager) {
            return;
        }
        this.appContextManager.registerAppContext(this);
    }
    /**
     * Unregister current AppContext instance from AppContextManager
     */
    unregisterFromManager() {
        if (!this.appContextManager) {
            return;
        }
        this.appContextManager.unregisterAppContext(this);
    }
    /**
     * 注册FrameContext
     */
    regFrameContext(frameContext) {
        const repository = frameContext.repository;
        const repositoryName = repository.name;
        // Repository
        if (this.repositoryManager.ifRepositoryExits(repositoryName) === false) {
            this.repositoryManager.regRepository(repositoryName, repository);
        }
        // BindingData
        if (this.bindingDataManager.ifBindingDataExits(repositoryName) === false) {
            let bindingData = null;
            // 仅高速模式下使用bindingDataManager
            if (this.runMode === RunMode.highSpeed) {
                bindingData = BindingDataFactory.createFromRepository(repository, '/');
                this.bindingDataManager.regBindingData(repositoryName, bindingData);
            }
        }
        // 考虑路由再次进入的时候，AppContext没有被注销，但Component被再次构造的场景
        this.frameContextManager.regFrameContext(frameContext);
    }
    regContextMetadata(componentId, contextMetadata) {
        if (!this.contextMetadataManager.exsit(componentId)) {
            this.contextMetadataManager.register(componentId, contextMetadata);
        }
    }
    /**
     * 获取整个表单的AppContext
     */
    getFormAppContext() {
        return this;
    }
    /**
     * 销毁表单
     * @todo: 临时解决表单关闭后对象没有销毁亦获取不到销毁时机的问题,应依赖angular本身的销毁机制
     */
    destory() {
        this.dispose();
    }
    get isDestoryed() {
        return this.isFormDestoryed;
    }
    /**
     * 应用id
     */
    get ApplicationId() {
        if (!!this.applicationId) {
            return this.applicationId;
        }
        this.applicationId = UID.create();
        return this.applicationId;
    }
    set ApplicationId(appId) {
        this.applicationId = appId;
    }
    get Token() {
        if (!!this.token) {
            return this.token;
        }
        this.token = UID.create();
        return this.token;
    }
    set Token(token) {
        this.token = token;
    }
    // #region 弃用的老方法
    /**
     * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。
     * @deprecated
     */
    registerCommandHandler(frameId, component) {
        this.frameComponentRefresher.regFrameComponent(frameId, component);
    }
    /**
     * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。
     * @deprecated
     */
    refresh() {
        this.frameComponentRefresher.refreshComponents();
    }
    /**
     * 已废弃：请使用FrameContextManager的getFrameContextById方法代替。
     * @deprecated
     */
    getFrameContext(frameId) {
        return this.frameContextManager.getFrameContextById(frameId);
    }
    getContextById(identify) {
        const context = this.frameContextManager.getFrameContextById(identify);
        return context;
    }
    /**
     * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。
     * @deprecated
     */
    getAllFrameContexts() {
        return this.frameContextManager.getFrameContextMap();
    }
    /**
     * 处理行变更
     */
    handleSelectChange(change, srcFrameContext) {
        const force = change.force || false;
        this.frameContexts.forEach((targetFrameContext) => {
            // 相同的FrameCotnext或者Repository不一致的情况下，不同步
            if (targetFrameContext === srcFrameContext
                || targetFrameContext.repository !== srcFrameContext.repository) {
                return;
            }
            const bindingData = targetFrameContext.bindingData;
            const bindingList = bindingData.getValue(change.path);
            const currentId = change.value['id'];
            if (bindingList && bindingList.currentId !== currentId || force) {
                // 设置当前行，但不对外广播
                bindingList.setCurrentId(currentId, true, false, force);
            }
        });
    }
    // #endregion
    buildRenderViewContext(componentId) {
        // 提取视图模型集合
        const viewModels = this.formModule.viewmodels;
        // 提取组件描述集合
        const viewComponents = this.formModule.components;
        // 提取schema节点
        const schema = this.formModule.schemas[0];
        // 查找匹配指定标识的组件节点
        const matchedComponent = viewComponents.find(component => component.id === componentId);
        // 匹配指定组件的视图模型节点
        const matchedViewModel = viewModels.find(viewModel => matchedComponent.viewModel === viewModel.id);
        // 查找匹配视图模型的父节点
        const parentViewModel = viewModels.find(viewModel => viewModel.id === matchedViewModel.parent);
        let parentComponentId = '';
        // 如果匹配上上级视图模型，提上级视图标识
        if (parentViewModel) {
            const parentComponent = viewComponents.find(component => component.viewModel === parentViewModel.id);
            if (parentComponent) {
                parentComponentId = parentComponent.id;
            }
        }
        // 如果存在上级组件，提取器上下文对象。
        // const parentViewContext = parentComponentId ? this.getContextById(parentComponentId) : null;
        // this.buildRenderViewContextRecursively(matchedViewModel, parentViewContext, schema);
        this.buildRenderViewContextRecursively(matchedViewModel, schema);
    }
    buildRenderViewContextRecursively(viewModel, schema) {
        const controllers = this.controllers;
        const viewComponents = this.formModule.components;
        const matchedComponent = viewComponents.find(component => component.viewModel === viewModel.id);
        const contextMetadata = this.contextMetadataBuilder.buildViewContextMetadata(matchedComponent, viewModel, schema, controllers, this.dynamicOptions);
        // const commandHandlers: CommandHandler[] = this.buildCommandHandlers(viewModel.commands, controllers);
        // const commandHandlerExtends: CommandHandlerExtender[] = [];
        // const viewContext = new ViewComponentContext();
        //   contextMetadata,
        //   this,
        //   parent,
        //   this.injector
        // );
        // this.regFrameContext(viewContext);
        // viewContext.init();
        const contextMetadataId = (this.namespace ? (this.namespace + '_') : '') + matchedComponent.id;
        contextMetadata.namespace = this.namespace || '';
        this.regContextMetadata(contextMetadataId, contextMetadata);
        const viewModels = this.formModule.viewmodels;
        const subViewModels = viewModels.filter(subViewModel => subViewModel.parent === viewModel.id);
        if (subViewModels && subViewModels.length) {
            subViewModels.forEach(subViewModel => {
                this.buildRenderViewContextRecursively(subViewModel, schema);
            });
        }
    }
    getComponentProviders(componentId) {
        const contextMetadata = this.contextMetadataManager.getContextMetadataByName(componentId);
        const bindingData = new BindingData();
        const form = new Form();
        const namespace = contextMetadata.namespace;
        const repository = this.repository || this.injector.get(Repository, null);
        const stateMachine = this.stateMachine;
        const uiState = new UIState();
        const viewModel = new ViewModel();
        viewModel.setMetadata(contextMetadata);
        return [
            { provide: FRAME_ID, useValue: componentId },
            { provide: NAMESPACE, useValue: namespace },
            { provide: FrameContext, useClass: FrameContext },
            { provide: AppContext, useValue: this },
            { provide: BindingData, useValue: bindingData },
            { provide: Form, useValue: form },
            { provide: Repository, useValue: repository },
            { provide: StateMachine, useValue: stateMachine },
            { provide: UIState, useValue: uiState },
            { provide: ViewModel, useValue: viewModel },
            {
                provide: VariableParseService, useValue: new VariableParseService([
                    new FrameIdVariableParser(),
                    new DataVariableParser(),
                    new UIStateVariableParser(),
                    new StateMachineVariableParser(),
                    new CommandVariableParser()
                ])
            }
        ];
    }
}
AppContext.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AppContext.ctorParameters = () => [
    { type: Injector, decorators: [{ type: Optional }] },
    { type: AppContextManager, decorators: [{ type: Optional }] },
    { type: AppContext, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
export { AppContext };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwX2NvbnRleHQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9hcHAvYXBwX2NvbnRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0dBS0c7QUFDSCxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUEwQixNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsa0JBQWtCLEVBQXVCLE1BQU0saUJBQWlCLENBQUM7QUFDdkYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDMUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbkMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHbEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWhELE9BQU8sRUFD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SUFBSSxFQUFFO1lBQ2pDLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFO1lBQzdDLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFO1lBQ2pELEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFO1lBQ3ZDLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFO1lBQzNDO2dCQUNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxRQUFRLEVBQUUsSUFBSSxvQkFBb0IsQ0FBQztvQkFDaEUsSUFBSSxxQkFBcUIsRUFBRTtvQkFDM0IsSUFBSSxrQkFBa0IsRUFBRTtvQkFDeEIsSUFBSSxxQkFBcUIsRUFBRTtvQkFDM0IsSUFBSSwwQkFBMEIsRUFBRTtvQkFDaEMsSUFBSSxxQkFBcUIsRUFBRTtpQkFDNUIsQ0FBQzthQUNIO1NBQ0YsQ0FBQztJQUNKLENBQUM7OztZQXpmRixVQUFVOzs7O1lBdENVLFFBQVEsdUJBaU14QixRQUFRO1lBeExKLGlCQUFpQix1QkF5THJCLFFBQVE7WUFDdUIsVUFBVSx1QkFBekMsUUFBUSxZQUFJLFFBQVE7O0FBK1Z6QixPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog5bqU55So5LiK5LiL5paHXHJcbiAqIEBhdXRob3IgV2l0dDxqaXd0QGluc3B1ci5jb20+XHJcbiAqIEB0b2RvXHJcbiAqIDHjgIFwYXJuZXTlkoxBcHBDb250ZXh0TWFuYWdlcuaYr+WQpuW/heimge+8n+aMieeQhuivtOWwseaYr+W6lOivpemalOemu+S4iuS4i+aWh++8jOihqOWNleS5i+mXtOmAmui/h+S6i+S7tumAmuiur+i/m+ihjOS6pOS6ku+8m1xyXG4gKi9cclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIE9wdGlvbmFsLCBTa2lwU2VsZiwgSW5qZWN0RmxhZ3MsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9pbmRleCc7XHJcbmltcG9ydCB7IEJpbmRpbmdEYXRhLCBCaW5kaW5nRGF0YUZhY3RvcnksIEJpbmRpbmdMaXN0LCBDaGFuZ2UgfSBmcm9tICcuLi9iaW5kaW5nLWRhdGEnO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHRNYW5hZ2VyIH0gZnJvbSAnLi9mcmFtZV9jb250ZXhfbWFuYWdlcic7XHJcbmltcG9ydCB7IEZyYW1lQ29tcG9uZW50UmVmcmVzaGVyIH0gZnJvbSAnLi9mcmFtZV9jb21wb25lbnRfcmVmcmVzaGVyJztcclxuaW1wb3J0IHsgUmVwb3NpdG9yeU1hbmFnZXIgfSBmcm9tICcuL3JlcG9zaXRvcnlfbWFuYW5nZXInO1xyXG5pbXBvcnQgeyBCaW5kaW5nRGF0YU1hbmFnZXIgfSBmcm9tICcuL2JpbmRpbmdfZGF0YV9tYW5hZ2VyJztcclxuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uQ29udHJvbGxlciB9IGZyb20gJy4vY2hhbmdlX2RldGVjdGlvbl9jb250cm9sbGVyJztcclxuaW1wb3J0IHsgQXBwQ29udGV4dE1hbmFnZXIgfSBmcm9tICcuL2FwcF9jb250ZXh0X21hbmFnZXInO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IENvbXBvbmVudE1hbmFnZXIgfSBmcm9tICcuL2NvbXBvbmVudF9tYW5hZ2VyJztcclxuaW1wb3J0IHsgVUlEIH0gZnJvbSAnLi4vbWlzYy91aWQnO1xyXG5pbXBvcnQgeyBGT1JNX0lEIH0gZnJvbSAnLi90b2tlbnMnO1xyXG5pbXBvcnQgeyBDb250ZXh0TWV0YWRhdGFCdWlsZGVyIH0gZnJvbSAnLi9hcHBfbWV0YWRhdGFfY29sbGVjdG9yJztcclxuaW1wb3J0IHsgRm9ybU1vZHVsZSwgSUZvcm1WaWV3TW9kZWwsIElTdGF0ZU1hY2hpbmUgfSBmcm9tICcuLi9zY2hlbWEvZm9ybS1tZXRhZGF0YSc7XHJcbmltcG9ydCB7IENvbW1hbmRDb250cm9sbGVyIH0gZnJvbSAnLi4vY29tbWFuZCc7XHJcbmltcG9ydCB7IFN0YXRlTWFjaGluZSB9IGZyb20gJy4uL3N0YXRlLW1hY2hpbmUnO1xyXG5pbXBvcnQgeyBJQ29udGV4dE1ldGFkYXRhIH0gZnJvbSAnLi9hcHBfbWV0YWRhdGEnO1xyXG5pbXBvcnQge1xyXG4gIENvbW1hbmRWYXJpYWJsZVBhcnNlciwgRGF0YVZhcmlhYmxlUGFyc2VyLCBGcmFtZUlkVmFyaWFibGVQYXJzZXIsXHJcbiAgU3RhdGVNYWNoaW5lVmFyaWFibGVQYXJzZXIsIFVJU3RhdGVWYXJpYWJsZVBhcnNlciwgVmFyaWFibGVQYXJzZVNlcnZpY2VcclxufSBmcm9tICcuLi92YXJpYWJsZSc7XHJcbmltcG9ydCB7IFZpZXdNb2RlbE1hbmFnZXIgfSBmcm9tICcuL3ZpZXdfbW9kZWxfbWFuYWdlcic7XHJcbmltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tICcuLi9yZXBvc2l0b3J5JztcclxuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi4vZW50aXR5JztcclxuaW1wb3J0IHsgVUlTdGF0ZSB9IGZyb20gJy4uL3VpLXN0YXRlJztcclxuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSAnLi4vc2NoZW1hJztcclxuaW1wb3J0IHsgQ29udGV4dE1ldGFkYXRhTWFuYWdlciB9IGZyb20gJy4vcmVuZGVyX2NvbnRleHRfbWV0YWRhdGFfbWFuYWdlcic7XHJcbmltcG9ydCB7IEZvcm0gfSBmcm9tICcuLi9mb3JtJztcclxuaW1wb3J0IHsgVmlld01vZGVsIH0gZnJvbSAnLi4vdmlldy1tb2RlbCc7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCB9IGZyb20gJy4uL2ZyYW1lL2ZyYW1lX2NvbnRleHQnO1xyXG5pbXBvcnQgeyBOQU1FU1BBQ0UsIEZSQU1FX0lEIH0gZnJvbSAnLi4vZnJhbWUvdG9rZW5zJztcclxuaW1wb3J0IHsgRXZlbnRCdXMgfSBmcm9tICcuLi9ldmVudC1idXMtbmV3JztcclxuaW1wb3J0IHsgREVWS0lUX1JVTl9NT0RFLCBSdW5Nb2RlIH0gZnJvbSAnLi4vY29yZSc7XHJcbmltcG9ydCB7IFJ1bk1vZGVTZXJ2aWNlIH0gZnJvbSAnLi4vbWlzYy9ydW5fbW9kZV9zZXJ2aWNlJztcclxuaW1wb3J0IHsgSURpc3Bvc2FibGUgfSBmcm9tICcuLi9jb3JlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuY2xhc3MgQXBwQ29udGV4dCBleHRlbmRzIENvbnRleHQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIElEaXNwb3NhYmxlIHtcclxuICBwdWJsaWMgdHlwZU5hbWUgPSAnQXBwQ29udGV4dCc7XHJcbiAgLyoqXHJcbiAgICog5rOo5YWl5ZmoXHJcbiAgICovXHJcbiAgcHVibGljIGluamVjdG9yOiBJbmplY3RvcjtcclxuICAvKipcclxuICAgKiDmoLnlupTnlKjkuIrkuIvmlodcclxuICAgKi9cclxuICBwdWJsaWMgcm9vdDogQXBwQ29udGV4dDtcclxuICAvKipcclxuICAgKiDkuIrnuqflupTnlKjkuIrkuIvmlodcclxuICAgKi9cclxuICBwdWJsaWMgcGFyZW50OiBBcHBDb250ZXh0O1xyXG4gIC8qKlxyXG4gICAqIOW6lOeUqOS4iuS4i+aWh+euoeeQhuWZqFxyXG4gICAqL1xyXG4gIHB1YmxpYyBhcHBDb250ZXh0TWFuYWdlcjogQXBwQ29udGV4dE1hbmFnZXI7XHJcbiAgLyoqXHJcbiAgICogRnJhbWVDb250ZXh0566h55CG5ZmoXHJcbiAgICovXHJcbiAgcHVibGljIGZyYW1lQ29udGV4dE1hbmFnZXI6IEZyYW1lQ29udGV4dE1hbmFnZXI7XHJcbiAgLyoqXHJcbiAgICogRnJhbWVDb21wb25lbnTliLfmlrDlmahcclxuICAgKi9cclxuICBwdWJsaWMgZnJhbWVDb21wb25lbnRSZWZyZXNoZXI6IEZyYW1lQ29tcG9uZW50UmVmcmVzaGVyO1xyXG4gIC8qKlxyXG4gICAqIFJlcG9zaXRvcnnnrqHnkIblmahcclxuICAgKi9cclxuICBwdWJsaWMgcmVwb3NpdG9yeU1hbmFnZXI6IFJlcG9zaXRvcnlNYW5hZ2VyO1xyXG4gIC8qKlxyXG4gICAqIOe7keWumuaVsOaNrueuoeeQhuWZqFxyXG4gICAqL1xyXG4gIHB1YmxpYyBiaW5kaW5nRGF0YU1hbmFnZXI6IEJpbmRpbmdEYXRhTWFuYWdlcjtcclxuICAvKipcclxuICAgKiDop4blm77mqKHlnovnrqHnkIblmahcclxuICAgKi9cclxuICBwdWJsaWMgdmlld01vZGVsTWFuYWdlcjogVmlld01vZGVsTWFuYWdlcjtcclxuXHJcbiAgcHVibGljIGNvbnRleHRNZXRhZGF0YU1hbmFnZXI6IENvbnRleHRNZXRhZGF0YU1hbmFnZXI7XHJcbiAgLyoqXHJcbiAgICog5Y+Y5pu05qOA5rWL5o6n5Yi25ZmoXHJcbiAgICovXHJcbiAgcHVibGljIGNoYW5nZURldGVjdGlvbkNvbnRyb2xsZXI6IENoYW5nZURldGVjdGlvbkNvbnRyb2xsZXI7XHJcbiAgLyoqXHJcbiAgICog5piv5ZCm5bey57uP6ZSA5q+BXHJcbiAgICovXHJcbiAgcHVibGljIGlzRm9ybURlc3RvcnllZCA9IGZhbHNlO1xyXG4gIC8qKlxyXG4gICAqIOW6lOeUqOeoi+W6j+agh+ivhlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhcHBsaWNhdGlvbklkOiBzdHJpbmcgPSBudWxsO1xyXG5cclxuICBwcml2YXRlIHRva2VuOiBzdHJpbmcgPSBudWxsO1xyXG4gIC8qKlxyXG4gICAqIOaYr+WQpuS9v+eUqOeLrOeri+eahGV2ZW50QnVzXHJcbiAgICogQG1lbWJlcm9mIEFwcENvbnRleHRcclxuICAgKi9cclxuICBwdWJsaWMgdXNlSXNvbHV0ZUV2ZW50QnVzID0gZmFsc2U7XHJcblxyXG4gIC8qKlxyXG4gICAqIOeLrOeri+eahGV2ZW50QnVz5a6e5L6LXHJcbiAgICpcclxuICAgKiBAdHlwZSB7RXZlbnRCdXN9XHJcbiAgICogQG1lbWJlcm9mIEFwcENvbnRleHRcclxuICAgKi9cclxuICBwdWJsaWMgaXNvbHV0ZUV2ZW50QnVzOiBFdmVudEJ1cztcclxuICAvKipcclxuICAgKiDlt7Llup/lvIPvvJror7fkvb/nlKhGcmFtZUNvbnRleHRNYW5hZ2Vy55qEZ2V0RnJhbWVDb250ZXh0TWFw5pa55rOV5Luj5pu/44CCXHJcbiAgICogQGRlcHJlY2F0ZWRcclxuICAgKiBAc3VtbWFyeVxyXG4gICAqIOW3sue7j+aciei/kOihjOaXtuebtOaOpeeUqOS4reaLrOWPt+iuv+mXruivpeWxnuaAp+eahOWcuuaZr++8jOiZveeEtuaYr3ByaXZhdGXvvIzkvYbopoHov5vooYzlhbzlrrnjgIJcclxuICAgKi9cclxuICBwcml2YXRlIGdldCBmcmFtZUNvbnRleHRzKCk6IE1hcDxzdHJpbmcsIGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRNYXAoKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5raI5oGv566h6YGTXHJcbiAgICovXHJcbiAgcHVibGljIG1lc3NhZ2VQaXBlOiBTdWJqZWN0PGFueT47XHJcbiAgLyoqXHJcbiAgICog6KGo5Y2VSWRcclxuICAgKi9cclxuICBwdWJsaWMgZm9ybUlkOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICog57uE5Lu25a6e5L6L5pWw57uEXHJcbiAgICovXHJcbiAgcHVibGljIGNvbXBvbmVudFJlZnM6IE1hcDxzdHJpbmcsIE1hcDxzdHJpbmcsIGFueT4+O1xyXG4gIC8qKlxyXG4gICAqIOinhuWbvue7hOS7tueuoeeQhuWZqFxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb21wb25lbnRNYW5hZ2VyOiBDb21wb25lbnRNYW5hZ2VyO1xyXG4gIC8qKlxyXG4gICAqIOiusOW9lWNvbmZpcm3lvLnnqpfmmK/lkKbmiZPlvIBcclxuICAgKi9cclxuICBwdWJsaWMgb3BlbmVkOiBib29sZWFuO1xyXG4gIC8qKlxyXG4gICAqIOaOkuW6j+adoeS7tueuoeeQhuWZqFxyXG4gICAqL1xyXG4gIC8vIHB1YmxpYyBzb3J0Q29uZGl0aW9uTWFuYWdlcjogU29ydENvbmRpdGlvbk1hbmFnZXI7XHJcbiAgLyoqXHJcbiAgICog6L+H5ruk5p2h5Lu2566h55CG5ZmoXHJcbiAgICovXHJcbiAgLy8gcHVibGljIGZpbHRlckNvbmRpdGlvbk1hbmFnZXI6IEZpbHRlckNvbmRpdGlvbk1hbmFnZXI7XHJcblxyXG4gIHByb3RlY3RlZCBjb250ZXh0TWV0YWRhdGFCdWlsZGVyOiBDb250ZXh0TWV0YWRhdGFCdWlsZGVyO1xyXG4gIC8qKlxyXG4gICAqIOW6lOeUqOS4iuS4i+aWh+WFg+aVsOaNruaPj+i/sFxyXG4gICAqL1xyXG4gIHB1YmxpYyBtZXRhZGF0YTogSUNvbnRleHRNZXRhZGF0YSA9IHt9O1xyXG4gIC8qKlxyXG4gICAqIOW6lOeUqOeoi+W6j+S4iuS4i+aWh+WFqOWxgOeKtuaAgVxyXG4gICAqL1xyXG4gIHB1YmxpYyB1aVN0YXRlOiBVSVN0YXRlO1xyXG4gIC8qKlxyXG4gICAqIOWunuS9k+S7k+W6k1xyXG4gICAqL1xyXG4gIHB1YmxpYyByZXBvc2l0b3J5OiBSZXBvc2l0b3J5PEVudGl0eT47XHJcblxyXG4gIC8qKlxyXG4gICAqIOeKtuaAgeaculxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0ZU1hY2hpbmU6IFN0YXRlTWFjaGluZTtcclxuXHJcbiAgcHVibGljIHZhcmlhYmxlUGFyc2VTZXJ2aWNlOiBWYXJpYWJsZVBhcnNlU2VydmljZTtcclxuXHJcbiAgcHVibGljIG5hbWVzcGFjZTogc3RyaW5nO1xyXG5cclxuICBwdWJsaWMgcm91dGVyOiBSb3V0ZXI7XHJcblxyXG4gIHB1YmxpYyBmb3JtTWV0YWRhdGFDb250ZW50OiBhbnk7XHJcbiAgLyoqXHJcbiAgICog5o6n5Yi25Zmo6L+Q6KGM5qih5byP77yM5pSv5oyBY29tcGF0aWJsZSB8IGhpZ2hTcGVlZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBydW5Nb2RlOiBSdW5Nb2RlO1xyXG5cclxuICBwdWJsaWMgZ2V0IGZvcm1Nb2R1bGUoKTogRm9ybU1vZHVsZSB7XHJcbiAgICByZXR1cm4gdGhpcy5mb3JtTWV0YWRhdGFDb250ZW50ID8gdGhpcy5mb3JtTWV0YWRhdGFDb250ZW50Lm1vZHVsZSA6IG51bGw7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY29udHJvbGxlcnM6IHsgW2lkOiBzdHJpbmddOiBDb21tYW5kQ29udHJvbGxlciB9O1xyXG5cclxuICAvKipcclxuICAgKiDlupTnlKjkuIrkuIvmlofplIDmr4Hkv6Hlj7dcclxuICAgKi9cclxuICBwdWJsaWMgZGVzdG9yeVNpZ25hbDogU3ViamVjdDxhbnk+O1xyXG4gIHB1YmxpYyBkaXNwb3NlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICBwcml2YXRlIGR5bmFtaWNPcHRpb25zOiBhbnk7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgQE9wdGlvbmFsKCkgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgQE9wdGlvbmFsKCkgYXBwQ29udGV4dE1hbmFnZXI6IEFwcENvbnRleHRNYW5hZ2VyLFxyXG4gICAgQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgcGFyZW50OiBBcHBDb250ZXh0XHJcbiAgKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5kZXN0b3J5U2lnbmFsID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gICAgdGhpcy5pbmplY3RvciA9IGluamVjdG9yO1xyXG4gICAgdGhpcy5hcHBDb250ZXh0TWFuYWdlciA9IGFwcENvbnRleHRNYW5hZ2VyO1xyXG4gICAgdGhpcy5mb3JtSWQgPSB0aGlzLmluamVjdG9yICYmIHRoaXMuaW5qZWN0b3IuZ2V0KEZPUk1fSUQsIG51bGwpIHx8IG51bGw7XHJcbiAgICAvLyDpu5jorqTov5DooYzmqKHlvI/kuLrlhbzlrrnmqKHlvI9cclxuICAgIHRoaXMucnVuTW9kZSA9IHRoaXMuaW5qZWN0b3IgJiYgdGhpcy5pbmplY3Rvci5nZXQ8UnVuTW9kZT4oREVWS0lUX1JVTl9NT0RFLCBSdW5Nb2RlLmNvbXBhdGlibGUpIHx8IFJ1bk1vZGUuY29tcGF0aWJsZTtcclxuICAgIFJ1bk1vZGVTZXJ2aWNlLnNldFJ1bk1vZGUodGhpcy5ydW5Nb2RlKTtcclxuICAgIHRoaXMucGFyYW1zLnNldCgnZm9ybUlkJywgdGhpcy5mb3JtSWQpO1xyXG4gICAgdGhpcy5wYXJhbXMuc2V0KCdhcHBJZCcsIHRoaXMuQXBwbGljYXRpb25JZCk7XHJcbiAgICB0aGlzLnBhcmFtcy5zZXQoJ3Rva2VuJywgdGhpcy5Ub2tlbik7XHJcbiAgICAvLyDnoa7lrprniLblrZDlhbPns7tcclxuICAgIGlmICghcGFyZW50KSB7XHJcbiAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcclxuICAgICAgdGhpcy5yb290ID0gdGhpcztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG4gICAgICB0aGlzLnJvb3QgPSBwYXJlbnQucm9vdDtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnJlZ2lzdGVyVG9NYW5hZ2VyKCk7XHJcblxyXG4gICAgdGhpcy5mcmFtZUNvbnRleHRNYW5hZ2VyID0gbmV3IEZyYW1lQ29udGV4dE1hbmFnZXIodGhpcyk7XHJcbiAgICB0aGlzLmZyYW1lQ29tcG9uZW50UmVmcmVzaGVyID0gbmV3IEZyYW1lQ29tcG9uZW50UmVmcmVzaGVyKCk7XHJcbiAgICB0aGlzLnJlcG9zaXRvcnlNYW5hZ2VyID0gbmV3IFJlcG9zaXRvcnlNYW5hZ2VyKCk7XHJcbiAgICB0aGlzLmJpbmRpbmdEYXRhTWFuYWdlciA9IG5ldyBCaW5kaW5nRGF0YU1hbmFnZXIoKTtcclxuICAgIHRoaXMuY2hhbmdlRGV0ZWN0aW9uQ29udHJvbGxlciA9IG5ldyBDaGFuZ2VEZXRlY3Rpb25Db250cm9sbGVyKHRoaXMuZnJhbWVDb250ZXh0TWFuYWdlcik7XHJcbiAgICB0aGlzLm1lc3NhZ2VQaXBlID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gICAgdGhpcy5jb21wb25lbnRSZWZzID0gbmV3IE1hcDxzdHJpbmcsIE1hcDxzdHJpbmcsIGFueT4+KCk7XHJcbiAgICB0aGlzLmNvbXBvbmVudE1hbmFnZXIgPSBuZXcgQ29tcG9uZW50TWFuYWdlcih0aGlzKTtcclxuICAgIHRoaXMuY29udGV4dE1ldGFkYXRhTWFuYWdlciA9IG5ldyBDb250ZXh0TWV0YWRhdGFNYW5hZ2VyKCk7XHJcblxyXG4gICAgdGhpcy5vcGVuZWQgPSBmYWxzZTtcclxuICAgIC8vIHRoaXMuc29ydENvbmRpdGlvbk1hbmFnZXIgPSBuZXcgU29ydENvbmRpdGlvbk1hbmFnZXIoKTtcclxuICAgIC8vIHRoaXMuZmlsdGVyQ29uZGl0aW9uTWFuYWdlciA9IG5ldyBGaWx0ZXJDb25kaXRpb25NYW5hZ2VyKCk7XHJcbiAgICB0aGlzLnJvdXRlciA9IHRoaXMuaW5qZWN0b3IgJiYgdGhpcy5pbmplY3Rvci5nZXQoUm91dGVyKTtcclxuICAgIHRoaXMudmlld01vZGVsTWFuYWdlciA9IG5ldyBWaWV3TW9kZWxNYW5hZ2VyKCk7XHJcbiAgICB0aGlzLmNvbnRleHRNZXRhZGF0YUJ1aWxkZXIgPSBuZXcgQ29udGV4dE1ldGFkYXRhQnVpbGRlcigpO1xyXG4gICAgdGhpcy52YXJpYWJsZVBhcnNlU2VydmljZSA9IG5ldyBWYXJpYWJsZVBhcnNlU2VydmljZShbXHJcbiAgICAgIG5ldyBGcmFtZUlkVmFyaWFibGVQYXJzZXIoKSxcclxuICAgICAgbmV3IERhdGFWYXJpYWJsZVBhcnNlcigpLFxyXG4gICAgICBuZXcgVUlTdGF0ZVZhcmlhYmxlUGFyc2VyKCksXHJcbiAgICAgIG5ldyBTdGF0ZU1hY2hpbmVWYXJpYWJsZVBhcnNlcigpLFxyXG4gICAgICBuZXcgQ29tbWFuZFZhcmlhYmxlUGFyc2VyKClcclxuICAgIF0pO1xyXG4gIH1cclxuICBkaXNwb3NlKG9wdGlvbnM/OiBhbnkpIHtcclxuICAgIGlmICh0aGlzLmRpc3Bvc2VkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuaXNGb3JtRGVzdG9yeWVkID0gdHJ1ZTtcclxuICAgIHRoaXMuZGlzcG9zZWQgPSB0cnVlO1xyXG4gICAgdGhpcy5yb3V0ZXIgPSBudWxsO1xyXG4gICAgdGhpcy51bnJlZ2lzdGVyRnJvbU1hbmFnZXIoKTtcclxuICAgIHRoaXMuY29tcG9uZW50UmVmcy5jbGVhcigpO1xyXG4gICAgaWYgKHRoaXMuc3RhdGVNYWNoaW5lKSB7XHJcbiAgICAgIHRoaXMuc3RhdGVNYWNoaW5lLmRpc3Bvc2UoKTtcclxuICAgICAgdGhpcy5zdGF0ZU1hY2hpbmUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZnJhbWVDb21wb25lbnRSZWZyZXNoZXIuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy5mcmFtZUNvbnRleHRNYW5hZ2VyLmRpc3Bvc2UoKTtcclxuICAgIHRoaXMucmVwb3NpdG9yeU1hbmFnZXIuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy52aWV3TW9kZWxNYW5hZ2VyLmRpc3Bvc2UoKTtcclxuICAgIHRoaXMuYmluZGluZ0RhdGFNYW5hZ2VyLmRpc3Bvc2UoKTtcclxuICAgIGlmICh0aGlzLm1lc3NhZ2VQaXBlKSB7XHJcbiAgICAgIHRoaXMubWVzc2FnZVBpcGUuY29tcGxldGUoKTtcclxuICAgICAgdGhpcy5tZXNzYWdlUGlwZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICB0aGlzLmluamVjdG9yID0gbnVsbDtcclxuICAgIGlmICh0aGlzLmRlc3RvcnlTaWduYWwpIHtcclxuICAgICAgdGhpcy5kZXN0b3J5U2lnbmFsLm5leHQoKTtcclxuICAgICAgdGhpcy5kZXN0b3J5U2lnbmFsLmNvbXBsZXRlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog55Sx6KGo5Y2V5YWD5pWw5o2u44CB54q25oCB5py65YWD5pWw5o2u44CB5YmN56uv5p6E5Lu25YWD5pWw5o2u5Yid5aeL5YyW6Kej5p6Q5Z6L5bqU55So5LiK5LiL5paHXHJcbiAgICogQHBhcmFtIGZvcm1NZXRhZGF0YUNvbnRlbnQg6KGo5Y2V5YWD5pWw5o2uXHJcbiAgICogQHBhcmFtIHN0YXRlTWFjaGluZU1ldGFkYXRhIOeKtuaAgeacuuWFg+aVsOaNrlxyXG4gICAqIEBwYXJhbSBjb250cm9sbGVycyDliY3nq6/mnoTku7blhYPmlbDmja5cclxuICAgKi9cclxuICBwdWJsaWMgaW5pdGlhbGl6ZUJ5TWV0YWRhdGEoXHJcbiAgICBmb3JtTWV0YWRhdGFDb250ZW50OiBhbnksXHJcbiAgICBzdGF0ZU1hY2hpbmVNZXRhZGF0YTogSVN0YXRlTWFjaGluZSxcclxuICAgIGNvbnRyb2xsZXJzOiB7IFtpZDogc3RyaW5nXTogQ29tbWFuZENvbnRyb2xsZXIgfSxcclxuICAgIG9wdGlvbnM6IHtcclxuICAgICAgdmFsdWVDb252ZXJ0ZXJNYXA/OiBhbnlcclxuICAgIH1cclxuICApIHtcclxuICAgIHRoaXMubWV0YWRhdGEgPSB0aGlzLmNvbnRleHRNZXRhZGF0YUJ1aWxkZXIuYnVpbGRBcHBDb250ZXh0TWV0YWRhdGEoZm9ybU1ldGFkYXRhQ29udGVudCwgc3RhdGVNYWNoaW5lTWV0YWRhdGEpO1xyXG4gICAgaWYgKCF0aGlzLnN0YXRlTWFjaGluZSkge1xyXG4gICAgICAvLyDpgb/lhY3nlLHkuo7nu4TlkIjooajljZXvvIzojrflj5bliLDniLbnuqfnirbmgIHmnLrlrp7kvovnmoTpl67pophcclxuICAgICAgLy8gdGhpcy5zdGF0ZU1hY2hpbmUgPSB0aGlzLmluamVjdG9yLmdldChTdGF0ZU1hY2hpbmUsIG5ldyBTdGF0ZU1hY2hpbmUoKSk7XHJcbiAgICAgIHRoaXMuc3RhdGVNYWNoaW5lID0gbmV3IFN0YXRlTWFjaGluZSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5mb3JtTWV0YWRhdGFDb250ZW50ID0gZm9ybU1ldGFkYXRhQ29udGVudDtcclxuICAgIHRoaXMuY29udHJvbGxlcnMgPSBjb250cm9sbGVycztcclxuICAgIHRoaXMuZHluYW1pY09wdGlvbnMgPSBvcHRpb25zO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVnaXN0ZXIgY3VycmVudCBBcHBDb250ZXh0IGluc3RhbmNlIHRvIEFwcENvbnRleHRNYW5hZ2VyXHJcbiAgICovXHJcbiAgcHVibGljIHJlZ2lzdGVyVG9NYW5hZ2VyKCkge1xyXG4gICAgaWYgKCF0aGlzLmFwcENvbnRleHRNYW5hZ2VyKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuYXBwQ29udGV4dE1hbmFnZXIucmVnaXN0ZXJBcHBDb250ZXh0KHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVW5yZWdpc3RlciBjdXJyZW50IEFwcENvbnRleHQgaW5zdGFuY2UgZnJvbSBBcHBDb250ZXh0TWFuYWdlclxyXG4gICAqL1xyXG4gIHB1YmxpYyB1bnJlZ2lzdGVyRnJvbU1hbmFnZXIoKSB7XHJcbiAgICBpZiAoIXRoaXMuYXBwQ29udGV4dE1hbmFnZXIpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hcHBDb250ZXh0TWFuYWdlci51bnJlZ2lzdGVyQXBwQ29udGV4dCh0aGlzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOazqOWGjEZyYW1lQ29udGV4dFxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWdGcmFtZUNvbnRleHQoZnJhbWVDb250ZXh0OiBhbnkpOiB2b2lkIHtcclxuICAgIGNvbnN0IHJlcG9zaXRvcnkgPSBmcmFtZUNvbnRleHQucmVwb3NpdG9yeTtcclxuICAgIGNvbnN0IHJlcG9zaXRvcnlOYW1lID0gcmVwb3NpdG9yeS5uYW1lO1xyXG5cclxuICAgIC8vIFJlcG9zaXRvcnlcclxuICAgIGlmICh0aGlzLnJlcG9zaXRvcnlNYW5hZ2VyLmlmUmVwb3NpdG9yeUV4aXRzKHJlcG9zaXRvcnlOYW1lKSA9PT0gZmFsc2UpIHtcclxuICAgICAgdGhpcy5yZXBvc2l0b3J5TWFuYWdlci5yZWdSZXBvc2l0b3J5KHJlcG9zaXRvcnlOYW1lLCByZXBvc2l0b3J5KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBCaW5kaW5nRGF0YVxyXG4gICAgaWYgKHRoaXMuYmluZGluZ0RhdGFNYW5hZ2VyLmlmQmluZGluZ0RhdGFFeGl0cyhyZXBvc2l0b3J5TmFtZSkgPT09IGZhbHNlKSB7XHJcbiAgICAgIGxldCBiaW5kaW5nRGF0YSA9IG51bGw7XHJcbiAgICAgIC8vIOS7hemrmOmAn+aooeW8j+S4i+S9v+eUqGJpbmRpbmdEYXRhTWFuYWdlclxyXG4gICAgICBpZiAodGhpcy5ydW5Nb2RlID09PSBSdW5Nb2RlLmhpZ2hTcGVlZCkge1xyXG4gICAgICAgIGJpbmRpbmdEYXRhID0gQmluZGluZ0RhdGFGYWN0b3J5LmNyZWF0ZUZyb21SZXBvc2l0b3J5KHJlcG9zaXRvcnksICcvJyk7XHJcbiAgICAgICAgdGhpcy5iaW5kaW5nRGF0YU1hbmFnZXIucmVnQmluZGluZ0RhdGEocmVwb3NpdG9yeU5hbWUsIGJpbmRpbmdEYXRhKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOiAg+iZkei3r+eUseWGjeasoei/m+WFpeeahOaXtuWAme+8jEFwcENvbnRleHTmsqHmnInooqvms6jplIDvvIzkvYZDb21wb25lbnTooqvlho3mrKHmnoTpgKDnmoTlnLrmma9cclxuICAgIHRoaXMuZnJhbWVDb250ZXh0TWFuYWdlci5yZWdGcmFtZUNvbnRleHQoZnJhbWVDb250ZXh0KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZWdDb250ZXh0TWV0YWRhdGEoY29tcG9uZW50SWQ6IHN0cmluZywgY29udGV4dE1ldGFkYXRhOiBJQ29udGV4dE1ldGFkYXRhKSB7XHJcbiAgICBpZiAoIXRoaXMuY29udGV4dE1ldGFkYXRhTWFuYWdlci5leHNpdChjb21wb25lbnRJZCkpIHtcclxuICAgICAgdGhpcy5jb250ZXh0TWV0YWRhdGFNYW5hZ2VyLnJlZ2lzdGVyKGNvbXBvbmVudElkLCBjb250ZXh0TWV0YWRhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5bmlbTkuKrooajljZXnmoRBcHBDb250ZXh0XHJcbiAgICovXHJcbiAgcHVibGljIGdldEZvcm1BcHBDb250ZXh0KCkge1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOmUgOavgeihqOWNlVxyXG4gICAqIEB0b2RvOiDkuLTml7bop6PlhrPooajljZXlhbPpl63lkI7lr7nosaHmsqHmnInplIDmr4Hkuqbojrflj5bkuI3liLDplIDmr4Hml7bmnLrnmoTpl67popgs5bqU5L6d6LWWYW5ndWxhcuacrOi6q+eahOmUgOavgeacuuWItlxyXG4gICAqL1xyXG4gIHB1YmxpYyBkZXN0b3J5KCkge1xyXG4gICAgdGhpcy5kaXNwb3NlKCk7XHJcbiAgfVxyXG4gIHB1YmxpYyBnZXQgaXNEZXN0b3J5ZWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5pc0Zvcm1EZXN0b3J5ZWQ7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOW6lOeUqGlkXHJcbiAgICovXHJcbiAgcHVibGljIGdldCBBcHBsaWNhdGlvbklkKCkge1xyXG4gICAgaWYgKCEhdGhpcy5hcHBsaWNhdGlvbklkKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmFwcGxpY2F0aW9uSWQ7XHJcbiAgICB9XHJcbiAgICB0aGlzLmFwcGxpY2F0aW9uSWQgPSBVSUQuY3JlYXRlKCk7XHJcbiAgICByZXR1cm4gdGhpcy5hcHBsaWNhdGlvbklkO1xyXG4gIH1cclxuICBwdWJsaWMgc2V0IEFwcGxpY2F0aW9uSWQoYXBwSWQ6IHN0cmluZykge1xyXG4gICAgdGhpcy5hcHBsaWNhdGlvbklkID0gYXBwSWQ7XHJcbiAgfVxyXG4gIHB1YmxpYyBnZXQgVG9rZW4oKSB7XHJcbiAgICBpZiAoISF0aGlzLnRva2VuKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnRva2VuO1xyXG4gICAgfVxyXG4gICAgdGhpcy50b2tlbiA9IFVJRC5jcmVhdGUoKTtcclxuICAgIHJldHVybiB0aGlzLnRva2VuO1xyXG4gIH1cclxuICBwdWJsaWMgc2V0IFRva2VuKHRva2VuOiBzdHJpbmcpIHtcclxuICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcclxuICB9XHJcbiAgLy8gI3JlZ2lvbiDlvIPnlKjnmoTogIHmlrnms5VcclxuXHJcbiAgLyoqXHJcbiAgICog5bey5bqf5byD77ya6K+35L2/55SoRnJhbWVDb21wb25lbnRSZWZyZXNoZXLnmoRyZWZyZXNoQ29tcG9uZW505pa55rOV5Luj5pu/44CCXHJcbiAgICogQGRlcHJlY2F0ZWRcclxuICAgKi9cclxuICBwdWJsaWMgcmVnaXN0ZXJDb21tYW5kSGFuZGxlcihmcmFtZUlkOiBzdHJpbmcsIGNvbXBvbmVudDogYW55KSB7XHJcbiAgICB0aGlzLmZyYW1lQ29tcG9uZW50UmVmcmVzaGVyLnJlZ0ZyYW1lQ29tcG9uZW50KGZyYW1lSWQsIGNvbXBvbmVudCk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOW3suW6n+W8g++8muivt+S9v+eUqEZyYW1lQ29tcG9uZW50UmVmcmVzaGVy55qEcmVmcmVzaENvbXBvbmVudOaWueazleS7o+abv+OAglxyXG4gICAqIEBkZXByZWNhdGVkXHJcbiAgICovXHJcbiAgcHVibGljIHJlZnJlc2goKSB7XHJcbiAgICB0aGlzLmZyYW1lQ29tcG9uZW50UmVmcmVzaGVyLnJlZnJlc2hDb21wb25lbnRzKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlt7Llup/lvIPvvJror7fkvb/nlKhGcmFtZUNvbnRleHRNYW5hZ2Vy55qEZ2V0RnJhbWVDb250ZXh0QnlJZOaWueazleS7o+abv+OAglxyXG4gICAqIEBkZXByZWNhdGVkXHJcbiAgICovXHJcbiAgcHVibGljIGdldEZyYW1lQ29udGV4dChmcmFtZUlkOiBzdHJpbmcpOiBhbnkge1xyXG4gICAgcmV0dXJuIHRoaXMuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldENvbnRleHRCeUlkKGlkZW50aWZ5OiBzdHJpbmcpOiBhbnkge1xyXG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRCeUlkKGlkZW50aWZ5KTtcclxuICAgIHJldHVybiBjb250ZXh0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5bey5bqf5byD77ya6K+35L2/55SoRnJhbWVDb250ZXh0TWFuYWdlcueahGdldEZyYW1lQ29udGV4dE1hcOaWueazleS7o+abv+OAglxyXG4gICAqIEBkZXByZWNhdGVkXHJcbiAgICovXHJcbiAgcHVibGljIGdldEFsbEZyYW1lQ29udGV4dHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mcmFtZUNvbnRleHRNYW5hZ2VyLmdldEZyYW1lQ29udGV4dE1hcCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5aSE55CG6KGM5Y+Y5pu0XHJcbiAgICovXHJcbiAgcHVibGljIGhhbmRsZVNlbGVjdENoYW5nZShjaGFuZ2U6IENoYW5nZSwgc3JjRnJhbWVDb250ZXh0OiBhbnkpIHtcclxuICAgIGNvbnN0IGZvcmNlID0gY2hhbmdlLmZvcmNlIHx8IGZhbHNlO1xyXG4gICAgdGhpcy5mcmFtZUNvbnRleHRzLmZvckVhY2goKHRhcmdldEZyYW1lQ29udGV4dCkgPT4ge1xyXG4gICAgICAvLyDnm7jlkIznmoRGcmFtZUNvdG5leHTmiJbogIVSZXBvc2l0b3J55LiN5LiA6Ie055qE5oOF5Ya15LiL77yM5LiN5ZCM5q2lXHJcbiAgICAgIGlmICh0YXJnZXRGcmFtZUNvbnRleHQgPT09IHNyY0ZyYW1lQ29udGV4dFxyXG4gICAgICAgIHx8IHRhcmdldEZyYW1lQ29udGV4dC5yZXBvc2l0b3J5ICE9PSBzcmNGcmFtZUNvbnRleHQucmVwb3NpdG9yeSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgYmluZGluZ0RhdGEgPSB0YXJnZXRGcmFtZUNvbnRleHQuYmluZGluZ0RhdGE7XHJcbiAgICAgIGNvbnN0IGJpbmRpbmdMaXN0OiBCaW5kaW5nTGlzdCA9IGJpbmRpbmdEYXRhLmdldFZhbHVlKGNoYW5nZS5wYXRoKTtcclxuICAgICAgY29uc3QgY3VycmVudElkID0gY2hhbmdlLnZhbHVlWydpZCddO1xyXG4gICAgICBpZiAoYmluZGluZ0xpc3QgJiYgYmluZGluZ0xpc3QuY3VycmVudElkICE9PSBjdXJyZW50SWQgfHwgZm9yY2UpIHtcclxuXHJcbiAgICAgICAgLy8g6K6+572u5b2T5YmN6KGM77yM5L2G5LiN5a+55aSW5bm/5pKtXHJcbiAgICAgICAgYmluZGluZ0xpc3Quc2V0Q3VycmVudElkKGN1cnJlbnRJZCwgdHJ1ZSwgZmFsc2UsIGZvcmNlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyAjZW5kcmVnaW9uXHJcblxyXG4gIHB1YmxpYyBidWlsZFJlbmRlclZpZXdDb250ZXh0KGNvbXBvbmVudElkOiBzdHJpbmcpIHtcclxuXHJcbiAgICAvLyDmj5Dlj5bop4blm77mqKHlnovpm4blkIhcclxuICAgIGNvbnN0IHZpZXdNb2RlbHMgPSB0aGlzLmZvcm1Nb2R1bGUudmlld21vZGVscztcclxuICAgIC8vIOaPkOWPlue7hOS7tuaPj+i/sOmbhuWQiFxyXG4gICAgY29uc3Qgdmlld0NvbXBvbmVudHMgPSB0aGlzLmZvcm1Nb2R1bGUuY29tcG9uZW50cztcclxuICAgIC8vIOaPkOWPlnNjaGVtYeiKgueCuVxyXG4gICAgY29uc3Qgc2NoZW1hID0gdGhpcy5mb3JtTW9kdWxlLnNjaGVtYXNbMF07XHJcbiAgICAvLyDmn6Xmib7ljLnphY3mjIflrprmoIfor4bnmoTnu4Tku7boioLngrlcclxuICAgIGNvbnN0IG1hdGNoZWRDb21wb25lbnQgPSB2aWV3Q29tcG9uZW50cy5maW5kKGNvbXBvbmVudCA9PiBjb21wb25lbnQuaWQgPT09IGNvbXBvbmVudElkKTtcclxuICAgIC8vIOWMuemFjeaMh+Wumue7hOS7tueahOinhuWbvuaooeWei+iKgueCuVxyXG4gICAgY29uc3QgbWF0Y2hlZFZpZXdNb2RlbCA9IHZpZXdNb2RlbHMuZmluZCh2aWV3TW9kZWwgPT4gbWF0Y2hlZENvbXBvbmVudC52aWV3TW9kZWwgPT09IHZpZXdNb2RlbC5pZCk7XHJcbiAgICAvLyDmn6Xmib7ljLnphY3op4blm77mqKHlnovnmoTniLboioLngrlcclxuICAgIGNvbnN0IHBhcmVudFZpZXdNb2RlbCA9IHZpZXdNb2RlbHMuZmluZCh2aWV3TW9kZWwgPT4gdmlld01vZGVsLmlkID09PSBtYXRjaGVkVmlld01vZGVsLnBhcmVudCk7XHJcbiAgICBsZXQgcGFyZW50Q29tcG9uZW50SWQgPSAnJztcclxuICAgIC8vIOWmguaenOWMuemFjeS4iuS4iue6p+inhuWbvuaooeWei++8jOaPkOS4iue6p+inhuWbvuagh+ivhlxyXG4gICAgaWYgKHBhcmVudFZpZXdNb2RlbCkge1xyXG4gICAgICBjb25zdCBwYXJlbnRDb21wb25lbnQgPSB2aWV3Q29tcG9uZW50cy5maW5kKGNvbXBvbmVudCA9PiBjb21wb25lbnQudmlld01vZGVsID09PSBwYXJlbnRWaWV3TW9kZWwuaWQpO1xyXG4gICAgICBpZiAocGFyZW50Q29tcG9uZW50KSB7XHJcbiAgICAgICAgcGFyZW50Q29tcG9uZW50SWQgPSBwYXJlbnRDb21wb25lbnQuaWQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIOWmguaenOWtmOWcqOS4iue6p+e7hOS7tu+8jOaPkOWPluWZqOS4iuS4i+aWh+WvueixoeOAglxyXG4gICAgLy8gY29uc3QgcGFyZW50Vmlld0NvbnRleHQgPSBwYXJlbnRDb21wb25lbnRJZCA/IHRoaXMuZ2V0Q29udGV4dEJ5SWQocGFyZW50Q29tcG9uZW50SWQpIDogbnVsbDtcclxuICAgIC8vIHRoaXMuYnVpbGRSZW5kZXJWaWV3Q29udGV4dFJlY3Vyc2l2ZWx5KG1hdGNoZWRWaWV3TW9kZWwsIHBhcmVudFZpZXdDb250ZXh0LCBzY2hlbWEpO1xyXG4gICAgdGhpcy5idWlsZFJlbmRlclZpZXdDb250ZXh0UmVjdXJzaXZlbHkobWF0Y2hlZFZpZXdNb2RlbCwgc2NoZW1hKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYnVpbGRSZW5kZXJWaWV3Q29udGV4dFJlY3Vyc2l2ZWx5KHZpZXdNb2RlbDogSUZvcm1WaWV3TW9kZWwsIHNjaGVtYTogU2NoZW1hKSB7XHJcbiAgICBjb25zdCBjb250cm9sbGVycyA9IHRoaXMuY29udHJvbGxlcnM7XHJcbiAgICBjb25zdCB2aWV3Q29tcG9uZW50cyA9IHRoaXMuZm9ybU1vZHVsZS5jb21wb25lbnRzO1xyXG4gICAgY29uc3QgbWF0Y2hlZENvbXBvbmVudCA9IHZpZXdDb21wb25lbnRzLmZpbmQoY29tcG9uZW50ID0+IGNvbXBvbmVudC52aWV3TW9kZWwgPT09IHZpZXdNb2RlbC5pZCk7XHJcbiAgICBjb25zdCBjb250ZXh0TWV0YWRhdGEgPSB0aGlzLmNvbnRleHRNZXRhZGF0YUJ1aWxkZXIuYnVpbGRWaWV3Q29udGV4dE1ldGFkYXRhKG1hdGNoZWRDb21wb25lbnQsIHZpZXdNb2RlbCwgc2NoZW1hLCBjb250cm9sbGVycyx0aGlzLmR5bmFtaWNPcHRpb25zKTtcclxuICAgIC8vIGNvbnN0IGNvbW1hbmRIYW5kbGVyczogQ29tbWFuZEhhbmRsZXJbXSA9IHRoaXMuYnVpbGRDb21tYW5kSGFuZGxlcnModmlld01vZGVsLmNvbW1hbmRzLCBjb250cm9sbGVycyk7XHJcbiAgICAvLyBjb25zdCBjb21tYW5kSGFuZGxlckV4dGVuZHM6IENvbW1hbmRIYW5kbGVyRXh0ZW5kZXJbXSA9IFtdO1xyXG4gICAgLy8gY29uc3Qgdmlld0NvbnRleHQgPSBuZXcgVmlld0NvbXBvbmVudENvbnRleHQoKTtcclxuICAgIC8vICAgY29udGV4dE1ldGFkYXRhLFxyXG4gICAgLy8gICB0aGlzLFxyXG4gICAgLy8gICBwYXJlbnQsXHJcbiAgICAvLyAgIHRoaXMuaW5qZWN0b3JcclxuICAgIC8vICk7XHJcbiAgICAvLyB0aGlzLnJlZ0ZyYW1lQ29udGV4dCh2aWV3Q29udGV4dCk7XHJcbiAgICAvLyB2aWV3Q29udGV4dC5pbml0KCk7XHJcblxyXG4gICAgY29uc3QgY29udGV4dE1ldGFkYXRhSWQgPSAodGhpcy5uYW1lc3BhY2UgPyAodGhpcy5uYW1lc3BhY2UgKyAnXycpIDogJycpICsgbWF0Y2hlZENvbXBvbmVudC5pZDtcclxuICAgIGNvbnRleHRNZXRhZGF0YS5uYW1lc3BhY2UgPSB0aGlzLm5hbWVzcGFjZSB8fCAnJztcclxuICAgIHRoaXMucmVnQ29udGV4dE1ldGFkYXRhKGNvbnRleHRNZXRhZGF0YUlkLCBjb250ZXh0TWV0YWRhdGEpO1xyXG5cclxuICAgIGNvbnN0IHZpZXdNb2RlbHMgPSB0aGlzLmZvcm1Nb2R1bGUudmlld21vZGVscztcclxuICAgIGNvbnN0IHN1YlZpZXdNb2RlbHMgPSB2aWV3TW9kZWxzLmZpbHRlcihzdWJWaWV3TW9kZWwgPT4gc3ViVmlld01vZGVsLnBhcmVudCA9PT0gdmlld01vZGVsLmlkKTtcclxuICAgIGlmIChzdWJWaWV3TW9kZWxzICYmIHN1YlZpZXdNb2RlbHMubGVuZ3RoKSB7XHJcbiAgICAgIHN1YlZpZXdNb2RlbHMuZm9yRWFjaChzdWJWaWV3TW9kZWwgPT4ge1xyXG4gICAgICAgIHRoaXMuYnVpbGRSZW5kZXJWaWV3Q29udGV4dFJlY3Vyc2l2ZWx5KHN1YlZpZXdNb2RlbCwgc2NoZW1hKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0Q29tcG9uZW50UHJvdmlkZXJzKGNvbXBvbmVudElkOiBzdHJpbmcpOiBhbnlbXSB7XHJcbiAgICBjb25zdCBjb250ZXh0TWV0YWRhdGEgPSB0aGlzLmNvbnRleHRNZXRhZGF0YU1hbmFnZXIuZ2V0Q29udGV4dE1ldGFkYXRhQnlOYW1lKGNvbXBvbmVudElkKTtcclxuICAgIGNvbnN0IGJpbmRpbmdEYXRhID0gbmV3IEJpbmRpbmdEYXRhKCk7XHJcbiAgICBjb25zdCBmb3JtID0gbmV3IEZvcm0oKTtcclxuICAgIGNvbnN0IG5hbWVzcGFjZSA9IGNvbnRleHRNZXRhZGF0YS5uYW1lc3BhY2U7XHJcbiAgICBjb25zdCByZXBvc2l0b3J5ID0gdGhpcy5yZXBvc2l0b3J5IHx8IHRoaXMuaW5qZWN0b3IuZ2V0KFJlcG9zaXRvcnksIG51bGwpO1xyXG4gICAgY29uc3Qgc3RhdGVNYWNoaW5lID0gdGhpcy5zdGF0ZU1hY2hpbmU7XHJcbiAgICBjb25zdCB1aVN0YXRlID0gbmV3IFVJU3RhdGUoKTtcclxuICAgIGNvbnN0IHZpZXdNb2RlbCA9IG5ldyBWaWV3TW9kZWwoKTtcclxuICAgIHZpZXdNb2RlbC5zZXRNZXRhZGF0YShjb250ZXh0TWV0YWRhdGEpO1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgeyBwcm92aWRlOiBGUkFNRV9JRCwgdXNlVmFsdWU6IGNvbXBvbmVudElkIH0sXHJcbiAgICAgIHsgcHJvdmlkZTogTkFNRVNQQUNFLCB1c2VWYWx1ZTogbmFtZXNwYWNlIH0sXHJcbiAgICAgIHsgcHJvdmlkZTogRnJhbWVDb250ZXh0LCB1c2VDbGFzczogRnJhbWVDb250ZXh0IH0sXHJcbiAgICAgIHsgcHJvdmlkZTogQXBwQ29udGV4dCwgdXNlVmFsdWU6IHRoaXMgfSxcclxuICAgICAgeyBwcm92aWRlOiBCaW5kaW5nRGF0YSwgdXNlVmFsdWU6IGJpbmRpbmdEYXRhIH0sXHJcbiAgICAgIHsgcHJvdmlkZTogRm9ybSwgdXNlVmFsdWU6IGZvcm0gfSxcclxuICAgICAgeyBwcm92aWRlOiBSZXBvc2l0b3J5LCB1c2VWYWx1ZTogcmVwb3NpdG9yeSB9LFxyXG4gICAgICB7IHByb3ZpZGU6IFN0YXRlTWFjaGluZSwgdXNlVmFsdWU6IHN0YXRlTWFjaGluZSB9LFxyXG4gICAgICB7IHByb3ZpZGU6IFVJU3RhdGUsIHVzZVZhbHVlOiB1aVN0YXRlIH0sXHJcbiAgICAgIHsgcHJvdmlkZTogVmlld01vZGVsLCB1c2VWYWx1ZTogdmlld01vZGVsIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBwcm92aWRlOiBWYXJpYWJsZVBhcnNlU2VydmljZSwgdXNlVmFsdWU6IG5ldyBWYXJpYWJsZVBhcnNlU2VydmljZShbXHJcbiAgICAgICAgICBuZXcgRnJhbWVJZFZhcmlhYmxlUGFyc2VyKCksXHJcbiAgICAgICAgICBuZXcgRGF0YVZhcmlhYmxlUGFyc2VyKCksXHJcbiAgICAgICAgICBuZXcgVUlTdGF0ZVZhcmlhYmxlUGFyc2VyKCksXHJcbiAgICAgICAgICBuZXcgU3RhdGVNYWNoaW5lVmFyaWFibGVQYXJzZXIoKSxcclxuICAgICAgICAgIG5ldyBDb21tYW5kVmFyaWFibGVQYXJzZXIoKVxyXG4gICAgICAgIF0pXHJcbiAgICAgIH1cclxuICAgIF07XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBBcHBDb250ZXh0IH07XHJcbiJdfQ==