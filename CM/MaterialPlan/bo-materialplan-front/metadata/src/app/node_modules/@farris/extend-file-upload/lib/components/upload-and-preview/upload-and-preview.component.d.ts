import { OnInit, AfterViewInit, ElementRef, EventEmitter, TemplateRef, NgZone, ChangeDetectorRef, OnChanges, SimpleChanges } from "@angular/core";
import { NotifyService } from "@farris/ui-notify";
import { BsModalService } from "@farris/ui-modal";
import { FFileUploadAPIService, FFileUploaderService } from "../../service/index";
import { FFileSelectDirective } from "../../directive/index";
import { UploadOutput, UploadInput, UploadFile, UploaderOptions, FUploadFileExtend, DocMetaProperty } from "../../model/index";
import { Observable } from "rxjs";
export declare type CanEditableFn = (fileInfo: any) => boolean;
export declare type FileCanEditable = CanEditableFn | boolean;
export declare enum DocModeType {
    Normal = "normal",
    RevisionOnly = "revisionOnly",
    Admin = "admin"
}
export declare class UploadAndPreviewComponent implements OnInit, AfterViewInit, OnChanges {
    private el;
    private uploadAPISer;
    private fileUploaderSer;
    private notifyService;
    private ngZone;
    private modalSer;
    private cd;
    cls: boolean;
    readonly fillState: boolean;
    previewFileNameTmpl: TemplateRef<void>;
    fileSizeTmpl: TemplateRef<void>;
    uapStateTmpl: TemplateRef<void>;
    previewActionTmpl: TemplateRef<void>;
    previewDateTmpl: TemplateRef<void>;
    uploadFileNameTmpl: TemplateRef<void>;
    /**
     * 每个组可以设置特殊服务参数，来覆盖默认的统一模块级配置
     */
    extendServerConfig: any;
    contentFill: boolean;
    /** 启用手动调整展示顺序 */
    enableOrder: boolean;
    /** 排序字段 */
    orderField: string;
    /** 是否允许编辑文档，默认为 false */
    editfile: FileCanEditable;
    private _docMode;
    docMode: any;
    private _renameFromDialog;
    private _previewColumnsFields;
    private _presetPreviewColumns;
    private _previewColumns;
    previewColumns: any;
    private _fileInfos;
    fileInfos: FUploadFileExtend[];
    /**
     * 附件预览配置---------------------------------------开始
     */
    previewDateFormat: string;
    previewReadonly: boolean;
    previewVisible: boolean;
    previewEnableMulti: boolean;
    previewShowType: string;
    previewEnableRename: boolean;
    previewDefaultRename: string;
    filePreviewEvent: EventEmitter<FUploadFileExtend>;
    fileDownloadEvent: EventEmitter<{
        fileInfos: FUploadFileExtend[];
        name: string;
    }>;
    fPreviewMultiSelectedEvent: EventEmitter<FUploadFileExtend[]>;
    fileRemoveEvent: EventEmitter<FUploadFileExtend[]>;
    previewSelectAllBtnChecked: boolean;
    previewMultiSelected: FUploadFileExtend[];
    readonly previewSettings: {
        readonly: boolean;
        visible: boolean;
        enableMulti: boolean;
        enableRename: boolean;
    };
    /**
     * 附件预览配置---------------------------------------结束
     */
    /**
     * 附件上传配置---------------------------------------开始
     */
    fileUpload: FFileSelectDirective;
    uploadDisabled: boolean;
    private tUploadVisible;
    uploadVisible: any;
    uploadNeedReset: Observable<any>;
    uploadEnableSelect: boolean;
    uploadSelectText: string;
    uploadEnableMulti: boolean;
    uploadedCount: number;
    extendDatas: {
        [key: string]: any;
        extProperty?: DocMetaProperty | null;
    };
    /** 整个控件禁用 */
    disabled: boolean;
    /** 禁止下载 */
    noDownload: boolean;
    /** 禁止预览 */
    noPreview: boolean;
    uploadOptions: UploaderOptions;
    customInfo: any;
    fUploadDoneEvent: EventEmitter<FUploadFileExtend[]>;
    fUploadRemovedEvent: EventEmitter<FUploadFileExtend[]>;
    /** 文件放下事件 */
    afterOrdered: EventEmitter<{}>;
    uploadAndPreviewTbodyRef: ElementRef<any>;
    private uploadAndPreviewTableHeader;
    private uploadAndPreviewTableHeaderCreated$;
    uploadAndPreviewTheadRef: ElementRef;
    readonly uploadSettings: {
        disabled: boolean;
        visible: boolean;
        enableMulti: boolean;
        extendDatas: {
            [key: string]: any;
            extProperty?: DocMetaProperty;
        };
    };
    allowedContentTypes: string;
    maxUploads: number;
    maxFileSize: string;
    uploadFiles: UploadOutput[];
    uploadSelectInput: EventEmitter<UploadInput>;
    private selfUploadOpts;
    private ro;
    private localSer;
    private dateHlp;
    tips: {
        download: string;
        preview: string;
        remove: string;
        edit: string;
        notedit: string;
    };
    /**
     * 附件上传配置---------------------------------------结束
     */
    /**
     *
     * @param el
     * @param uploadAPISer
     * @param fileUploaderSer
     * @param notifyService
     * @param ngZone
     */
    constructor(el: ElementRef, uploadAPISer: FFileUploadAPIService, fileUploaderSer: FFileUploaderService, notifyService: NotifyService, ngZone: NgZone, modalSer: BsModalService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * 选择或取消所有
     * @param ev
     */
    selectOrCancelAllHandler(ev: any): void;
    /**
     * 格式化文件大小
     * @param bytes
     */
    formateBytes(bytes: any): string;
    /**
     * 获取文档类型对应的class
     * @param fileName
     */
    getFileTypeClassName(fileName: any): string;
    /**
     * 格式化预览数据
     * @param val
     */
    private formatPreviewDatas;
    private getValue;
    private sortPreviewData;
    /**
     * 格式化处理数据
     */
    private getFieldsFromColumns;
    /**
     * 根据列获取对应的列模板
     * @param columnInfo
     */
    getColumnTemplate(columnInfo: any, type?: string): any;
    /**
     * 多选变更
     */
    previewMultiSelectChange(ev: any): void;
    /**处理附件上传---------------------------------------------------------开始-- */
    /**
     * 统一触发 附件选择和拖拽附件的事件
     * @param ev
     */
    private inputUploadEventEmit;
    /**单个文件上传 */
    startUpload(file: UploadFile): void;
    uploadReset(): void;
    /**
     * 触发绑定
     */
    triggerFileSelect(ev: any): boolean;
    /**
     * 选择附件按钮，处理抛出事件
     * @param output
     */
    selectUploadOutput(output: UploadOutput): void;
    /**
     * allAddedToQueue 选中文件追加到队列
     * @param output
     */
    private uploadOutputHandler;
    /**
     * 临时删除附件
     * @param output
     */
    private hideAfterLoaded;
    /**
     * 处理上传
     * @param output
     */
    private showNotify;
    /**
     * 更新附件的状态
     * @param output
     * @param eventType
     */
    private updateFilesState;
    /**
     * 是否判断有类型限制
     */
    judgeContentTypeLimit(): boolean;
    /**
     * 判断是否有文件大小的限制
     */
    judegeFileSizeLimit(): boolean;
    /**
     * 获取上传进度
     */
    getUploadProgress(uploadInfo: UploadOutput): number;
    /**
     * 处理显示
     * @param ev
     * @param fileInfo
     */
    getUploadFileSizeProgress(uploadInfo: UploadOutput): string;
    /**处理附件上传---------------------------------------------------------结束-- */
    /**
     * 预览
     * @param ev
     * @param fileInfo
     */
    filePreviewHandler(ev: Event, fileInfo: FUploadFileExtend): void;
    /**
     * 下载
     * @param ev
     * @param fileInfo
     */
    fileDownloadHandler(ev: Event, fileInfo: FUploadFileExtend): void;
    /**
     * 删除数据
     * @param ev
     * @param fileInfo
     */
    fileRemoveHandler(ev: Event, fileInfo: FUploadFileExtend): void;
    /**
     * 批量删除
     * @param ev
     */
    multiFileRemoveHandler(ev: Event): void;
    fileMultiDownloadHandler(ev: Event): void;
    private getName;
    showPreviewStateColumn(columnInfo: any): boolean;
    /** 拖拽排序后事件 */
    onOrderFileDrop($event: any): void;
    private setColumnWidth;
    editFileHandler($event: any, fileInfo: FUploadFileExtend): void;
    canEdit(fileInfo: FUploadFileExtend): boolean;
}
