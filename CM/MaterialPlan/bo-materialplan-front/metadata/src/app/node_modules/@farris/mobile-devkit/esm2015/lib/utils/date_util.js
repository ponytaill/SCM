import { format, isDate, parseISO, isEqual, compareAsc } from 'date-fns';
import dayjs from 'dayjs';
import IsBetween from 'dayjs/plugin/IsBetween';
import relativeTime from 'dayjs/plugin/relativeTime';
import Calendar from 'dayjs/plugin/calendar';
import 'dayjs/locale/zh-cn';
dayjs.locale('zh-cn');
/**
 * 日期处理类
 */
class DateUtil {
    /**
     * 将日期（或日期字符串）转换为完整的的ISO格式的字符串
     */
    static formatISO(dateOrDateString) {
        if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
            return this.emptyISODateTimeString;
        }
        const dateObj = this.parse(dateOrDateString);
        return format(dateObj, this.defaultISOFormat);
    }
    /**
     * 将日期（或日期字符串）转换为指定格式的字符串
     * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串
     * @param dateFormat 日期格式字符串
     */
    static format(dateOrDateString, dateFormat) {
        if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
            return this.emptyISODateTimeString;
        }
        const dateObj = this.parse(dateOrDateString);
        dateFormat = dateFormat ? dateFormat : this.defaultDisplayFormat;
        return format(dateObj, dateFormat);
    }
    static dateShow(dateOrDateString, type) {
        if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
            return this.emptyISODateTimeString;
        }
        if (!type || "" === type) {
            return;
        }
        return this[type] && this[type](dateOrDateString);
    }
    static dateOperation(dateOrDateString, options) {
        if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
            return this.emptyISODateTimeString;
        }
        const { type = "", option } = options;
        if (!type || "" === type) {
            return;
        }
        if ('isSame' === type) {
            return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity']);
        }
        if ('isBefore' === type) {
            return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity']);
        }
        if ('isAfter' === type) {
            return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity']);
        }
        if ('isBetween' === type) {
            return this[type] && this[type](dateOrDateString, options['targetDate'], options['targetDate2'], options['granularity'], options['contains']);
        }
        if (!option) {
            return this[type] && this[type](dateOrDateString);
        }
        return this[type] && this[type](dateOrDateString, option);
    }
    static relativeTime(dateOrDateString, option) {
        dayjs.extend(relativeTime);
        const dateObj = dayjs(dateOrDateString);
        if (!option) {
            return dayjs(dateObj).fromNow();
        }
        return dayjs(dateObj).fromNow(option);
    }
    static isToday(dateOrDateString) {
        const todayDate = new Date();
        const dateObj = dayjs(dateOrDateString);
        return this.isSame(dateObj, todayDate, 'date');
    }
    static calendar(dateOrDateString, option) {
        const dateObj = dayjs(dateOrDateString);
        dayjs.extend(Calendar);
        if (option) {
            return dayjs().calendar(dateObj, Object.assign({}, option));
        }
        return dayjs().calendar(dateObj, {
            sameDay: '[今天] HH:mm',
            nextDay: '[明天] HH:mm',
            lastDay: '[昨天] HH:mm',
            sameElse: 'YYYY-MM-DD'
        });
    }
    /**
     * 创建日期
     * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串
     */
    static parse(dateOrDateString) {
        if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
            return null;
        }
        if (this.isDate(dateOrDateString) === true) {
            return dateOrDateString;
        }
        return parseISO(dateOrDateString);
    }
    /**
     * 是否是日期对象
     */
    static isDate(date) {
        return isDate(date);
    }
    /**
     * 是否是空日期或者空日期字符串
     * @param dateOrDateString 日期或日期字符串
     */
    static isEmptyDateOrDateString(dateOrDateString) {
        if (this.isDate(dateOrDateString) === true) {
            return this.isEmptyDate(dateOrDateString);
        }
        return this.isEmptyDateString(dateOrDateString);
    }
    /**
     * 是否为空日期字符串
     * @param date 日期对象
     */
    static isEmptyDate(date) {
        if (!date) {
            return true;
        }
        return false;
    }
    /**
     * 是否是空日期字符串
     * @param dateString 日期字符串
     */
    static isEmptyDateString(dateString) {
        if (!dateString || dateString.startsWith('0001-01-01') === true) {
            return true;
        }
        return false;
    }
    /**
     * 两个日期是否相等
     * @param dateOrDateString1 日期对象或字符串
     * @param dateOrDateString1 日期对象或字符串
     * @return 相等返回true，否则返回false
     */
    static isEqual(dateOrDateString1, dateOrDateString2) {
        const dateObj1 = this.parse(dateOrDateString1);
        const dateObj2 = this.parse(dateOrDateString2);
        if (dateObj1 === dateObj2) {
            return true;
        }
        return isEqual(dateObj1, dateObj2);
    }
    /**
     * 两个日期是否相等
     * @param dateOrDateString1 日期对象或字符串
     * @param dateOrDateString1 日期对象或字符串
     * @return 返回-1、0、1
     */
    static compare(dateOrDateString1, dateOrDateString2) {
        const dateObj1 = this.parse(dateOrDateString1);
        const dateObj2 = this.parse(dateOrDateString2);
        if (this.isEqual(dateObj1, dateObj2) === true) {
            return 0;
        }
        // 处理解析后为null的场景，null比所有有效日期小
        if (!dateObj1 && this.isDate(dateObj2) === true) {
            return -1;
        }
        if (!dateObj2 && this.isDate(dateObj1) === true) {
            return 1;
        }
        return compareAsc(dateObj1, dateObj2);
    }
    /**
     *
     * @param currentDate 当前日期
     * @param targetDate 目标日期
     * @param type 比较类型 date	D	天00:00 day	d	星期00:00 month	M	月第一天00:00 year	y	1月1日00点 week	w	周第一天00:00hour	h	00:00:00minute	m	00:00second	s	00millisecond	ms	0
     * @returns
     */
    static isSame(currentDate, targetDate, type) {
        if (type) {
            return dayjs(currentDate).isSame(dayjs(targetDate), type);
        }
        return dayjs(currentDate).isSame(dayjs(targetDate));
    }
    /**
     *
     * @param currentDate 当前日期
     * @param targetDate 目标日期
     * @returns boolean
     */
    static isBefore(currentDate, targetDate, type) {
        if (type) {
            return dayjs(currentDate).isBefore(dayjs(targetDate), type);
        }
        return dayjs(currentDate).isBefore(dayjs(targetDate));
    }
    /**
   *
   * @param currentDate 当前日期
   * @param targetDate 目标日期
   * @returns boolean
   */
    static isAfter(currentDate, targetDate, type) {
        if (type) {
            return dayjs(currentDate).isAfter(dayjs(targetDate), type);
        }
        return dayjs(currentDate).isAfter(dayjs(targetDate));
    }
    /**
     *
     * @param currentDate
     * @param targetDate1
     * @param targetDate2
     * @returns
     */
    static isBetween(currentDate, targetDate1, targetDate2, type, contains) {
        dayjs.extend(IsBetween);
        if (type) {
            return dayjs(currentDate).isBetween(dayjs(targetDate1), dayjs(targetDate2), type, contains);
        }
        return dayjs(currentDate).isBetween(dayjs(targetDate1), dayjs(targetDate2), null, contains);
    }
}
/**
 * 空日期字符串（N版）
 * @todo：兼容服务器端，不应该在devkit体现这种兼容，待移除
 */
// static emptyDateTimeString = '0001-01-01T00:00:00';
DateUtil.emptyDateTimeString = null;
/**
 * 默认空日期字符串（ISO标准格式）
 */
// static emptyISODateTimeString = '0001-01-01T00:00:00+00:00';
DateUtil.emptyISODateTimeString = null;
/**
 * 默认日期听格式
 */
DateUtil.defaultISOFormat = `yyyy-MM-dd'T'HH:mm:ssxxx`;
DateUtil.defaultDisplayFormat = 'yyyy-MM-dd HH:mm:ss';
DateUtil.defaultDateFormat = 'yyyy-MM-dd';
DateUtil.defaultTimeFormat = 'HH:mm:ss';
export { DateUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZV91dGlsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2RhdGVfdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN6RSxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDMUIsT0FBTyxTQUFTLE1BQU0sd0JBQXdCLENBQUM7QUFDL0MsT0FBTyxZQUFZLE1BQU0sMkJBQTJCLENBQUM7QUFDckQsT0FBTyxRQUFRLE1BQU0sdUJBQXVCLENBQUM7QUFDN0MsT0FBTyxvQkFBb0IsQ0FBQztBQUM1QixLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3RCOztHQUVHO0FBQ0gsTUFBTSxRQUFRO0lBMEJaOztPQUVHO0lBQ0gsTUFBTSxDQUFDLFNBQVMsQ0FBQyxnQkFBK0I7UUFDOUMsSUFBSSxJQUFJLENBQUMsdUJBQXVCLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDM0QsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUM7U0FDcEM7UUFDRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDN0MsT0FBTyxNQUFNLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLE1BQU0sQ0FBQyxnQkFBK0IsRUFBRSxVQUFtQjtRQUNoRSxJQUFJLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUMzRCxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztTQUNwQztRQUNELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENB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Q0FBQztBQUVsQzs7R0FFRztBQUNILCtEQUErRDtBQUN4RCwrQkFBc0IsR0FBRyxJQUFJLENBQUM7QUFFckM7O0dBRUc7QUFDSSx5QkFBZ0IsR0FBRywwQkFBMEIsQ0FBQztBQUU5Qyw2QkFBb0IsR0FBRyxxQkFBcUIsQ0FBQztBQUU3QywwQkFBaUIsR0FBRyxZQUFZLENBQUM7QUFFakMsMEJBQWlCLEdBQUcsVUFBVSxDQUFDO0FBd1B4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmb3JtYXQsIGlzRGF0ZSwgcGFyc2VJU08sIGlzRXF1YWwsIGNvbXBhcmVBc2MgfSBmcm9tICdkYXRlLWZucyc7XHJcbmltcG9ydCBkYXlqcyBmcm9tICdkYXlqcyc7XHJcbmltcG9ydCBJc0JldHdlZW4gZnJvbSAnZGF5anMvcGx1Z2luL0lzQmV0d2Vlbic7XHJcbmltcG9ydCByZWxhdGl2ZVRpbWUgZnJvbSAnZGF5anMvcGx1Z2luL3JlbGF0aXZlVGltZSc7XHJcbmltcG9ydCBDYWxlbmRhciBmcm9tICdkYXlqcy9wbHVnaW4vY2FsZW5kYXInO1xyXG5pbXBvcnQgJ2RheWpzL2xvY2FsZS96aC1jbic7XHJcbmRheWpzLmxvY2FsZSgnemgtY24nKTtcclxuLyoqXHJcbiAqIOaXpeacn+WkhOeQhuexu1xyXG4gKi9cclxuY2xhc3MgRGF0ZVV0aWwge1xyXG5cclxuICAvKipcclxuICAgKiDnqbrml6XmnJ/lrZfnrKbkuLLvvIhO54mI77yJXHJcbiAgICogQHRvZG/vvJrlhbzlrrnmnI3liqHlmajnq6/vvIzkuI3lupTor6XlnKhkZXZraXTkvZPnjrDov5nnp43lhbzlrrnvvIzlvoXnp7vpmaRcclxuICAgKi9cclxuICAvLyBzdGF0aWMgZW1wdHlEYXRlVGltZVN0cmluZyA9ICcwMDAxLTAxLTAxVDAwOjAwOjAwJztcclxuICBzdGF0aWMgZW1wdHlEYXRlVGltZVN0cmluZyA9IG51bGw7XHJcblxyXG4gIC8qKlxyXG4gICAqIOm7mOiupOepuuaXpeacn+Wtl+espuS4su+8iElTT+agh+WHhuagvOW8j++8iVxyXG4gICAqL1xyXG4gIC8vIHN0YXRpYyBlbXB0eUlTT0RhdGVUaW1lU3RyaW5nID0gJzAwMDEtMDEtMDFUMDA6MDA6MDArMDA6MDAnO1xyXG4gIHN0YXRpYyBlbXB0eUlTT0RhdGVUaW1lU3RyaW5nID0gbnVsbDtcclxuXHJcbiAgLyoqXHJcbiAgICog6buY6K6k5pel5pyf5ZCs5qC85byPXHJcbiAgICovXHJcbiAgc3RhdGljIGRlZmF1bHRJU09Gb3JtYXQgPSBgeXl5eS1NTS1kZCdUJ0hIOm1tOnNzeHh4YDtcclxuXHJcbiAgc3RhdGljIGRlZmF1bHREaXNwbGF5Rm9ybWF0ID0gJ3l5eXktTU0tZGQgSEg6bW06c3MnO1xyXG5cclxuICBzdGF0aWMgZGVmYXVsdERhdGVGb3JtYXQgPSAneXl5eS1NTS1kZCc7XHJcblxyXG4gIHN0YXRpYyBkZWZhdWx0VGltZUZvcm1hdCA9ICdISDptbTpzcyc7XHJcblxyXG4gIC8qKlxyXG4gICAqIOWwhuaXpeacn++8iOaIluaXpeacn+Wtl+espuS4su+8iei9rOaNouS4uuWujOaVtOeahOeahElTT+agvOW8j+eahOWtl+espuS4slxyXG4gICAqL1xyXG4gIHN0YXRpYyBmb3JtYXRJU08oZGF0ZU9yRGF0ZVN0cmluZzogc3RyaW5nIHwgRGF0ZSk6IHN0cmluZyB7XHJcbiAgICBpZiAodGhpcy5pc0VtcHR5RGF0ZU9yRGF0ZVN0cmluZyhkYXRlT3JEYXRlU3RyaW5nKSA9PT0gdHJ1ZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5lbXB0eUlTT0RhdGVUaW1lU3RyaW5nO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGF0ZU9iaiA9IHRoaXMucGFyc2UoZGF0ZU9yRGF0ZVN0cmluZyk7XHJcbiAgICByZXR1cm4gZm9ybWF0KGRhdGVPYmosIHRoaXMuZGVmYXVsdElTT0Zvcm1hdCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlsIbml6XmnJ/vvIjmiJbml6XmnJ/lrZfnrKbkuLLvvInovazmjaLkuLrmjIflrprmoLzlvI/nmoTlrZfnrKbkuLJcclxuICAgKiBAcGFyYW0gZGF0ZU9yRGF0ZVN0cmluZyDml6XmnJ/lr7nosaHmiJbnrKblkIhJU084NjAx6KeE6IyD55qE5pel5pyf5a2X56ym5LiyXHJcbiAgICogQHBhcmFtIGRhdGVGb3JtYXQg5pel5pyf5qC85byP5a2X56ym5LiyXHJcbiAgICovXHJcbiAgc3RhdGljIGZvcm1hdChkYXRlT3JEYXRlU3RyaW5nOiBzdHJpbmcgfCBEYXRlLCBkYXRlRm9ybWF0Pzogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGlmICh0aGlzLmlzRW1wdHlEYXRlT3JEYXRlU3RyaW5nKGRhdGVPckRhdGVTdHJpbmcpID09PSB0cnVlKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmVtcHR5SVNPRGF0ZVRpbWVTdHJpbmc7XHJcbiAgICB9XHJcbiAgICBjb25zdCBkYXRlT2JqID0gdGhpcy5wYXJzZShkYXRlT3JEYXRlU3RyaW5nKTtcclxuICAgIGRhdGVGb3JtYXQgPSBkYXRlRm9ybWF0ID8gZGF0ZUZvcm1hdCA6IHRoaXMuZGVmYXVsdERpc3BsYXlGb3JtYXQ7XHJcbiAgICByZXR1cm4gZm9ybWF0KGRhdGVPYmosIGRhdGVGb3JtYXQpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRhdGVTaG93KGRhdGVPckRhdGVTdHJpbmc6IHN0cmluZyB8IERhdGUsIHR5cGU6IHN0cmluZykge1xyXG4gICAgaWYgKHRoaXMuaXNFbXB0eURhdGVPckRhdGVTdHJpbmcoZGF0ZU9yRGF0ZVN0cmluZykgPT09IHRydWUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZW1wdHlJU09EYXRlVGltZVN0cmluZztcclxuICAgIH1cclxuICAgIGlmICghdHlwZSB8fCBcIlwiID09PSB0eXBlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzW3R5cGVdICYmIHRoaXNbdHlwZV0oZGF0ZU9yRGF0ZVN0cmluZylcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkYXRlT3BlcmF0aW9uKGRhdGVPckRhdGVTdHJpbmc6IHN0cmluZyB8IERhdGUsIG9wdGlvbnMpIHtcclxuICAgIGlmICh0aGlzLmlzRW1wdHlEYXRlT3JEYXRlU3RyaW5nKGRhdGVPckRhdGVTdHJpbmcpID09PSB0cnVlKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmVtcHR5SVNPRGF0ZVRpbWVTdHJpbmc7XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IHR5cGUgPSBcIlwiLCBvcHRpb24gfSA9IG9wdGlvbnM7XHJcbiAgICBpZiAoIXR5cGUgfHwgXCJcIiA9PT0gdHlwZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoJ2lzU2FtZScgPT09IHR5cGUpIHtcclxuICAgICAgcmV0dXJuIHRoaXNbdHlwZV0gJiYgdGhpc1t0eXBlXShkYXRlT3JEYXRlU3RyaW5nLCBvcHRpb25zWyd0YXJnZXREYXRlJ10sIG9wdGlvbnNbJ2dyYW51bGFyaXR5J10pXHJcbiAgICB9XHJcbiAgICBpZiAoJ2lzQmVmb3JlJyA9PT0gdHlwZSkge1xyXG4gICAgICByZXR1cm4gdGhpc1t0eXBlXSAmJiB0aGlzW3R5cGVdKGRhdGVPckRhdGVTdHJpbmcsIG9wdGlvbnNbJ3RhcmdldERhdGUnXSwgb3B0aW9uc1snZ3JhbnVsYXJpdHknXSlcclxuICAgIH1cclxuICAgIGlmICgnaXNBZnRlcicgPT09IHR5cGUpIHtcclxuICAgICAgcmV0dXJuIHRoaXNbdHlwZV0gJiYgdGhpc1t0eXBlXShkYXRlT3JEYXRlU3RyaW5nLCBvcHRpb25zWyd0YXJnZXREYXRlJ10sIG9wdGlvbnNbJ2dyYW51bGFyaXR5J10pXHJcbiAgICB9XHJcbiAgICBpZiAoJ2lzQmV0d2VlbicgPT09IHR5cGUgKSB7XHJcbiAgICAgIHJldHVybiB0aGlzW3R5cGVdICYmIHRoaXNbdHlwZV0oZGF0ZU9yRGF0ZVN0cmluZywgb3B0aW9uc1sndGFyZ2V0RGF0ZSddLCBvcHRpb25zWyd0YXJnZXREYXRlMiddLCBvcHRpb25zWydncmFudWxhcml0eSddLCBvcHRpb25zWydjb250YWlucyddKVxyXG4gICAgfVxyXG4gICAgaWYgKCFvcHRpb24pIHtcclxuICAgICAgcmV0dXJuIHRoaXNbdHlwZV0gJiYgdGhpc1t0eXBlXShkYXRlT3JEYXRlU3RyaW5nKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXNbdHlwZV0gJiYgdGhpc1t0eXBlXShkYXRlT3JEYXRlU3RyaW5nLCBvcHRpb24pXHJcbiAgfVxyXG5cclxuXHJcblxyXG4gIHN0YXRpYyByZWxhdGl2ZVRpbWUoZGF0ZU9yRGF0ZVN0cmluZzogc3RyaW5nIHwgRGF0ZSwgb3B0aW9uKSB7XHJcbiAgICBkYXlqcy5leHRlbmQocmVsYXRpdmVUaW1lKVxyXG4gICAgY29uc3QgZGF0ZU9iaiA9IGRheWpzKGRhdGVPckRhdGVTdHJpbmcpO1xyXG4gICAgaWYgKCFvcHRpb24pIHtcclxuICAgICAgcmV0dXJuIGRheWpzKGRhdGVPYmopLmZyb21Ob3coKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRheWpzKGRhdGVPYmopLmZyb21Ob3cob3B0aW9uKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGlzVG9kYXkoZGF0ZU9yRGF0ZVN0cmluZzogc3RyaW5nIHwgRGF0ZSkge1xyXG4gICAgY29uc3QgdG9kYXlEYXRlID0gbmV3IERhdGUoKTtcclxuICAgIGNvbnN0IGRhdGVPYmogPSBkYXlqcyhkYXRlT3JEYXRlU3RyaW5nKTtcclxuICAgIHJldHVybiB0aGlzLmlzU2FtZShkYXRlT2JqLCB0b2RheURhdGUsICdkYXRlJyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2FsZW5kYXIoZGF0ZU9yRGF0ZVN0cmluZzogc3RyaW5nIHwgRGF0ZSwgb3B0aW9uKSB7XHJcbiAgICBjb25zdCBkYXRlT2JqID0gZGF5anMoZGF0ZU9yRGF0ZVN0cmluZyk7XHJcbiAgICBkYXlqcy5leHRlbmQoQ2FsZW5kYXIpXHJcbiAgICBpZiAob3B0aW9uKSB7XHJcbiAgICAgIHJldHVybiBkYXlqcygpLmNhbGVuZGFyKGRhdGVPYmosIHsgLi4ub3B0aW9uIH0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGF5anMoKS5jYWxlbmRhcihkYXRlT2JqLCB7XHJcbiAgICAgIHNhbWVEYXk6ICdb5LuK5aSpXSBISDptbScsXHJcbiAgICAgIG5leHREYXk6ICdb5piO5aSpXSBISDptbScsXHJcbiAgICAgIGxhc3REYXk6ICdb5pio5aSpXSBISDptbScsXHJcbiAgICAgIHNhbWVFbHNlOiAnWVlZWS1NTS1ERCdcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICog5Yib5bu65pel5pyfXHJcbiAgICogQHBhcmFtIGRhdGVPckRhdGVTdHJpbmcg5pel5pyf5a+56LGh5oiW56ym5ZCISVNPODYwMeinhOiMg+eahOaXpeacn+Wtl+espuS4slxyXG4gICAqL1xyXG4gIHN0YXRpYyBwYXJzZShkYXRlT3JEYXRlU3RyaW5nOiBzdHJpbmcgfCBEYXRlKTogRGF0ZSB7XHJcbiAgICBpZiAodGhpcy5pc0VtcHR5RGF0ZU9yRGF0ZVN0cmluZyhkYXRlT3JEYXRlU3RyaW5nKSA9PT0gdHJ1ZSkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5pc0RhdGUoZGF0ZU9yRGF0ZVN0cmluZykgPT09IHRydWUpIHtcclxuICAgICAgcmV0dXJuIGRhdGVPckRhdGVTdHJpbmcgYXMgRGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcGFyc2VJU08oZGF0ZU9yRGF0ZVN0cmluZyBhcyBzdHJpbmcpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5piv5ZCm5piv5pel5pyf5a+56LGhXHJcbiAgICovXHJcbiAgc3RhdGljIGlzRGF0ZShkYXRlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBpc0RhdGUoZGF0ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmmK/lkKbmmK/nqbrml6XmnJ/miJbogIXnqbrml6XmnJ/lrZfnrKbkuLJcclxuICAgKiBAcGFyYW0gZGF0ZU9yRGF0ZVN0cmluZyDml6XmnJ/miJbml6XmnJ/lrZfnrKbkuLJcclxuICAgKi9cclxuICBzdGF0aWMgaXNFbXB0eURhdGVPckRhdGVTdHJpbmcoZGF0ZU9yRGF0ZVN0cmluZzogc3RyaW5nIHwgRGF0ZSkge1xyXG4gICAgaWYgKHRoaXMuaXNEYXRlKGRhdGVPckRhdGVTdHJpbmcpID09PSB0cnVlKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmlzRW1wdHlEYXRlKGRhdGVPckRhdGVTdHJpbmcgYXMgRGF0ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5pc0VtcHR5RGF0ZVN0cmluZyhkYXRlT3JEYXRlU3RyaW5nIGFzIHN0cmluZyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmmK/lkKbkuLrnqbrml6XmnJ/lrZfnrKbkuLJcclxuICAgKiBAcGFyYW0gZGF0ZSDml6XmnJ/lr7nosaFcclxuICAgKi9cclxuICBzdGF0aWMgaXNFbXB0eURhdGUoZGF0ZTogRGF0ZSkge1xyXG4gICAgaWYgKCFkYXRlKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5piv5ZCm5piv56m65pel5pyf5a2X56ym5LiyXHJcbiAgICogQHBhcmFtIGRhdGVTdHJpbmcg5pel5pyf5a2X56ym5LiyXHJcbiAgICovXHJcbiAgc3RhdGljIGlzRW1wdHlEYXRlU3RyaW5nKGRhdGVTdHJpbmc6IHN0cmluZykge1xyXG4gICAgaWYgKCFkYXRlU3RyaW5nIHx8IGRhdGVTdHJpbmcuc3RhcnRzV2l0aCgnMDAwMS0wMS0wMScpID09PSB0cnVlKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Lik5Liq5pel5pyf5piv5ZCm55u4562JXHJcbiAgICogQHBhcmFtIGRhdGVPckRhdGVTdHJpbmcxIOaXpeacn+WvueixoeaIluWtl+espuS4slxyXG4gICAqIEBwYXJhbSBkYXRlT3JEYXRlU3RyaW5nMSDml6XmnJ/lr7nosaHmiJblrZfnrKbkuLJcclxuICAgKiBAcmV0dXJuIOebuOetiei/lOWbnnRydWXvvIzlkKbliJnov5Tlm55mYWxzZVxyXG4gICAqL1xyXG4gIHN0YXRpYyBpc0VxdWFsKGRhdGVPckRhdGVTdHJpbmcxOiBzdHJpbmcgfCBEYXRlLCBkYXRlT3JEYXRlU3RyaW5nMjogc3RyaW5nIHwgRGF0ZSk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgZGF0ZU9iajEgPSB0aGlzLnBhcnNlKGRhdGVPckRhdGVTdHJpbmcxKTtcclxuICAgIGNvbnN0IGRhdGVPYmoyID0gdGhpcy5wYXJzZShkYXRlT3JEYXRlU3RyaW5nMik7XHJcbiAgICBpZiAoZGF0ZU9iajEgPT09IGRhdGVPYmoyKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlzRXF1YWwoZGF0ZU9iajEsIGRhdGVPYmoyKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOS4pOS4quaXpeacn+aYr+WQpuebuOetiVxyXG4gICAqIEBwYXJhbSBkYXRlT3JEYXRlU3RyaW5nMSDml6XmnJ/lr7nosaHmiJblrZfnrKbkuLJcclxuICAgKiBAcGFyYW0gZGF0ZU9yRGF0ZVN0cmluZzEg5pel5pyf5a+56LGh5oiW5a2X56ym5LiyXHJcbiAgICogQHJldHVybiDov5Tlm54tMeOAgTDjgIExXHJcbiAgICovXHJcbiAgc3RhdGljIGNvbXBhcmUoZGF0ZU9yRGF0ZVN0cmluZzE6IHN0cmluZyB8IERhdGUsIGRhdGVPckRhdGVTdHJpbmcyOiBzdHJpbmcgfCBEYXRlKSB7XHJcbiAgICBjb25zdCBkYXRlT2JqMSA9IHRoaXMucGFyc2UoZGF0ZU9yRGF0ZVN0cmluZzEpO1xyXG4gICAgY29uc3QgZGF0ZU9iajIgPSB0aGlzLnBhcnNlKGRhdGVPckRhdGVTdHJpbmcyKTtcclxuICAgIGlmICh0aGlzLmlzRXF1YWwoZGF0ZU9iajEsIGRhdGVPYmoyKSA9PT0gdHJ1ZSkge1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyDlpITnkIbop6PmnpDlkI7kuLpudWxs55qE5Zy65pmv77yMbnVsbOavlOaJgOacieacieaViOaXpeacn+Wwj1xyXG4gICAgaWYgKCFkYXRlT2JqMSAmJiB0aGlzLmlzRGF0ZShkYXRlT2JqMikgPT09IHRydWUpIHtcclxuICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkYXRlT2JqMiAmJiB0aGlzLmlzRGF0ZShkYXRlT2JqMSkgPT09IHRydWUpIHtcclxuICAgICAgcmV0dXJuIDE7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNvbXBhcmVBc2MoZGF0ZU9iajEsIGRhdGVPYmoyKTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBcclxuICAgKiBAcGFyYW0gY3VycmVudERhdGUg5b2T5YmN5pel5pyfXHJcbiAgICogQHBhcmFtIHRhcmdldERhdGUg55uu5qCH5pel5pyfXHJcbiAgICogQHBhcmFtIHR5cGUg5q+U6L6D57G75Z6LIGRhdGVcdERcdOWkqTAwOjAwIGRheVx0ZFx05pif5pyfMDA6MDAgbW9udGhcdE1cdOaciOesrOS4gOWkqTAwOjAwIHllYXJcdHlcdDHmnIgx5pelMDDngrkgd2Vla1x0d1x05ZGo56ys5LiA5aSpMDA6MDBob3VyXHRoXHQwMDowMDowMG1pbnV0ZVx0bVx0MDA6MDBzZWNvbmRcdHNcdDAwbWlsbGlzZWNvbmRcdG1zXHQwXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgc3RhdGljIGlzU2FtZShjdXJyZW50RGF0ZSwgdGFyZ2V0RGF0ZSwgdHlwZT8pIHtcclxuICAgIGlmICh0eXBlKSB7XHJcbiAgICAgIHJldHVybiBkYXlqcyhjdXJyZW50RGF0ZSkuaXNTYW1lKGRheWpzKHRhcmdldERhdGUpLCB0eXBlKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRheWpzKGN1cnJlbnREYXRlKS5pc1NhbWUoZGF5anModGFyZ2V0RGF0ZSkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogXHJcbiAgICogQHBhcmFtIGN1cnJlbnREYXRlIOW9k+WJjeaXpeacn1xyXG4gICAqIEBwYXJhbSB0YXJnZXREYXRlIOebruagh+aXpeacn1xyXG4gICAqIEByZXR1cm5zIGJvb2xlYW5cclxuICAgKi9cclxuICBzdGF0aWMgaXNCZWZvcmUoY3VycmVudERhdGUsIHRhcmdldERhdGUsIHR5cGU/KSB7XHJcbiAgICBpZiAodHlwZSkge1xyXG4gICAgICByZXR1cm4gZGF5anMoY3VycmVudERhdGUpLmlzQmVmb3JlKGRheWpzKHRhcmdldERhdGUpLCB0eXBlKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRheWpzKGN1cnJlbnREYXRlKS5pc0JlZm9yZShkYXlqcyh0YXJnZXREYXRlKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICogXHJcbiAqIEBwYXJhbSBjdXJyZW50RGF0ZSDlvZPliY3ml6XmnJ9cclxuICogQHBhcmFtIHRhcmdldERhdGUg55uu5qCH5pel5pyfXHJcbiAqIEByZXR1cm5zIGJvb2xlYW5cclxuICovXHJcbiAgc3RhdGljIGlzQWZ0ZXIoY3VycmVudERhdGUsIHRhcmdldERhdGUsIHR5cGU/KSB7XHJcbiAgICBpZiAodHlwZSkge1xyXG4gICAgICByZXR1cm4gZGF5anMoY3VycmVudERhdGUpLmlzQWZ0ZXIoZGF5anModGFyZ2V0RGF0ZSksIHR5cGUpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGF5anMoY3VycmVudERhdGUpLmlzQWZ0ZXIoZGF5anModGFyZ2V0RGF0ZSkpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSBjdXJyZW50RGF0ZSBcclxuICAgKiBAcGFyYW0gdGFyZ2V0RGF0ZTEgXHJcbiAgICogQHBhcmFtIHRhcmdldERhdGUyIFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHN0YXRpYyBpc0JldHdlZW4oY3VycmVudERhdGUsIHRhcmdldERhdGUxLCB0YXJnZXREYXRlMiwgdHlwZSwgY29udGFpbnMpIHtcclxuICAgIGRheWpzLmV4dGVuZChJc0JldHdlZW4pXHJcbiAgICBpZiAodHlwZSkge1xyXG4gICAgICByZXR1cm4gZGF5anMoY3VycmVudERhdGUpLmlzQmV0d2VlbihkYXlqcyh0YXJnZXREYXRlMSksIGRheWpzKHRhcmdldERhdGUyKSwgdHlwZSwgY29udGFpbnMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRheWpzKGN1cnJlbnREYXRlKS5pc0JldHdlZW4oZGF5anModGFyZ2V0RGF0ZTEpLCBkYXlqcyh0YXJnZXREYXRlMiksIG51bGwsIGNvbnRhaW5zKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IERhdGVVdGlsIH07XHJcblxyXG4iXX0=