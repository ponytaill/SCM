/*
 * @Author: Witt
 * @Date: 2018-10-12 15:37:11
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2019-09-03 19:10:44
 * @todo 待优化问题
 * 1、apiUrl是否应该在基类中，子类中的api如何传递给基类；
 */
import * as tslib_1 from "tslib";
import { DataTypeInfo } from '../entity/index';
import { createEntity, createEntities } from '../entity/index';
import { EntityCollection } from './entity_collection';
import { PaginationManager } from './pagination_manager';
import { DataChangeHistory } from './data_change_history';
var Repository = /** @class */ (function () {
    /**
     * 构造函数
     */
    function Repository() {
        /**
         * 用户分页配置信息
         */
        this.paginationInfo = null;
    }
    Repository.prototype.init = function () {
        this.entityTypeInfo = new DataTypeInfo(this.entityType);
        this.entityCollection = new EntityCollection(this.entityType);
        this.dataChangeHistory = new DataChangeHistory();
    };
    Object.defineProperty(Repository.prototype, "primaryKey", {
        /**
         * 实体主键
         */
        get: function () {
            return this.entityCollection.primaryKey;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Repository.prototype, "entityCollectionChange", {
        /**
         * 实体变更集合
         */
        get: function () {
            return this.entityCollection.collectionChanged;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 重置状态
     */
    Repository.prototype.reset = function () {
        this.entityCollection.clear();
    };
    /**
     * 创建实体
     */
    Repository.prototype.buildEntity = function (data) {
        var entity = createEntity(this.entityType, data);
        return entity;
    };
    /**
     * 批量创建实体
     */
    Repository.prototype.buildEntities = function (listData) {
        var entities = createEntities(this.entityType, listData);
        return entities;
    };
    /**
     * 初始化分页配置
     * @param config 用户分页配置
     */
    Repository.prototype.setPaginationConfig = function (config) {
        this.paginationManager = new PaginationManager(this.entityType, config);
        var _a = (this.paginationManager.getPaginationConfigByPath('/') || {}).pageSize, pageSize = _a === void 0 ? 0 : _a;
        // tslint:disable-next-line: max-line-length
        this.entityCollection.paginationInfo = Object.assign({ pageSize: pageSize }, this.entityCollection.paginationInfo, this.paginationManager.pagination);
        // 无需再单独设置一次pageSize，减少一次变更
        // this.entityCollection.pageSize = pageSize;
    };
    /**
     * 设置分页
     */
    Repository.prototype.setPaginationInfo = function (paginationInfo) {
        this.paginationInfo = tslib_1.__assign({}, this.paginationInfo, paginationInfo);
    };
    return Repository;
}());
export { Repository };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9yZXBvc2l0b3J5L3JlcG9zaXRvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7R0FPRzs7QUFLSCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFJL0MsT0FBTyxFQUFVLFlBQVksRUFBRSxjQUFjLEVBQXFCLE1BQU0saUJBQWlCLENBQUM7QUFFMUYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFMUQ7SUF3Q0U7O09BRUc7SUFDSDtRQXJCQTs7V0FFRztRQUNJLG1CQUFjLEdBQVEsSUFBSSxDQUFDO0lBbUJsQyxDQUFDO0lBRVMseUJBQUksR0FBZDtRQUNFLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLGdCQUFnQixDQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO0lBQ25ELENBQUM7SUFLRCxzQkFBVyxrQ0FBVTtRQUhyQjs7V0FFRzthQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDO1FBQzFDLENBQUM7OztPQUFBO0lBS0Qsc0JBQVcsOENBQXNCO1FBSGpDOztXQUVHO2FBQ0g7WUFDRSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQztRQUNqRCxDQUFDOzs7T0FBQTtJQUVEOztPQUVHO0lBQ0ksMEJBQUssR0FBWjtRQUNFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxnQ0FBVyxHQUFsQixVQUFtQixJQUFTO1FBQzFCLElBQU0sTUFBTSxHQUFHLFlBQVksQ0FBSSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3RELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7T0FFRztJQUNJLGtDQUFhLEdBQXBCLFVBQXFCLFFBQWU7UUFDbEMsSUFBTSxRQUFRLEdBQVEsY0FBYyxDQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbkUsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILHdDQUFtQixHQUFuQixVQUFvQixNQUFXO1FBQzdCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDaEUsSUFBQSwyRUFBWSxFQUFaLGlDQUFZLENBQWlFO1FBQ3JGLDRDQUE0QztRQUM1QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLFVBQUEsRUFBRSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTVJLDJCQUEyQjtRQUMzQiw2Q0FBNkM7SUFDL0MsQ0FBQztJQUVEOztPQUVHO0lBQ0ksc0NBQWlCLEdBQXhCLFVBQXlCLGNBQW1CO1FBQzFDLElBQUksQ0FBQyxjQUFjLHdCQUFRLElBQUksQ0FBQyxjQUFjLEVBQUssY0FBYyxDQUFFLENBQUM7SUFDdEUsQ0FBQztJQUVILGlCQUFDO0FBQUQsQ0FBQyxBQTlHRCxJQThHQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEBBdXRob3I6IFdpdHRcclxuICogQERhdGU6IDIwMTgtMTAtMTIgMTU6Mzc6MTFcclxuICogQExhc3QgTW9kaWZpZWQgYnk6IGFhbGl6endlbGxcclxuICogQExhc3QgTW9kaWZpZWQgdGltZTogMjAxOS0wOS0wMyAxOToxMDo0NFxyXG4gKiBAdG9kbyDlvoXkvJjljJbpl67pophcclxuICogMeOAgWFwaVVybOaYr+WQpuW6lOivpeWcqOWfuuexu+S4re+8jOWtkOexu+S4reeahGFwaeWmguS9leS8oOmAkue7meWfuuexu++8m1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IFR5cGUgfSBmcm9tICcuLi9jb3JlL2luZGV4JztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgRGF0YVR5cGVJbmZvIH0gZnJvbSAnLi4vZW50aXR5L2luZGV4JztcclxuaW1wb3J0IHsgR3VpZCB9IGZyb20gJy4uL3V0aWxzL2luZGV4JztcclxuaW1wb3J0IHsgTW9kaWZpY2F0aW9uIH0gZnJvbSAnLi4vY2hhbmdlc2V0L2luZGV4JztcclxuaW1wb3J0IHsgTWV0YWRhdGFVdGlsIH0gZnJvbSAnLi4vY29yZS9pbmRleCc7XHJcbmltcG9ydCB7IEVudGl0eSwgY3JlYXRlRW50aXR5LCBjcmVhdGVFbnRpdGllcywgRmllbGRNZXRhZGF0YVV0aWwgfSBmcm9tICcuLi9lbnRpdHkvaW5kZXgnO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5TWV0YSB9IGZyb20gJy4vZGVjb3JhdG9ycyc7XHJcbmltcG9ydCB7IEVudGl0eUNvbGxlY3Rpb24gfSBmcm9tICcuL2VudGl0eV9jb2xsZWN0aW9uJztcclxuaW1wb3J0IHsgUGFnaW5hdGlvbk1hbmFnZXIgfSBmcm9tICcuL3BhZ2luYXRpb25fbWFuYWdlcic7XHJcbmltcG9ydCB7IERhdGFDaGFuZ2VIaXN0b3J5IH0gZnJvbSAnLi9kYXRhX2NoYW5nZV9oaXN0b3J5JztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSZXBvc2l0b3J5PFQgZXh0ZW5kcyBFbnRpdHk+IHtcclxuXHJcbiAgLyoqXHJcbiAgICog5ZCN56ewXHJcbiAgICovXHJcbiAgYWJzdHJhY3QgbmFtZTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiDlrp7kvZPnsbvlnotcclxuICAgKi9cclxuICBwdWJsaWMgZW50aXR5VHlwZTogVHlwZTxUPjtcclxuXHJcbiAgLyoqXHJcbiAgICog5a6e5L2T57G75Z6L5L+h5oGvXHJcbiAgICovXHJcbiAgcHVibGljIGVudGl0eVR5cGVJbmZvOiBEYXRhVHlwZUluZm87XHJcblxyXG4gIC8qKlxyXG4gICAqIOWunuS9k+mbhuWQiFxyXG4gICAqL1xyXG4gIHB1YmxpYyBlbnRpdHlDb2xsZWN0aW9uOiBFbnRpdHlDb2xsZWN0aW9uPFQ+O1xyXG5cclxuICAvKipcclxuICAgKiDnlKjmiLfliIbpobXphY3nva7kv6Hmga9cclxuICAgKi9cclxuICBwdWJsaWMgcGFnaW5hdGlvbkluZm86IGFueSA9IG51bGw7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaVsOaNruWPmOabtOWOhuWPslxyXG4gICAqIEBzdW1tYXJ5XHJcbiAgICog5LuF6ZKI5a+55Li76KGo5aKe5Yqg44CB5LuO6KGo5Yig6ZmkXHJcbiAgICovXHJcbiAgcHVibGljIGRhdGFDaGFuZ2VIaXN0b3J5OiBEYXRhQ2hhbmdlSGlzdG9yeTtcclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIOWIhumhteeuoeeQhuWZqFxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYWdpbmF0aW9uTWFuYWdlcjogUGFnaW5hdGlvbk1hbmFnZXI8VD47XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGluaXQoKSB7XHJcbiAgICB0aGlzLmVudGl0eVR5cGVJbmZvID0gbmV3IERhdGFUeXBlSW5mbyh0aGlzLmVudGl0eVR5cGUpO1xyXG4gICAgdGhpcy5lbnRpdHlDb2xsZWN0aW9uID0gbmV3IEVudGl0eUNvbGxlY3Rpb248VD4odGhpcy5lbnRpdHlUeXBlKTtcclxuICAgIHRoaXMuZGF0YUNoYW5nZUhpc3RvcnkgPSBuZXcgRGF0YUNoYW5nZUhpc3RvcnkoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWunuS9k+S4u+mUrlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgcHJpbWFyeUtleSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuZW50aXR5Q29sbGVjdGlvbi5wcmltYXJ5S2V5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5a6e5L2T5Y+Y5pu06ZuG5ZCIXHJcbiAgICovXHJcbiAgcHVibGljIGdldCBlbnRpdHlDb2xsZWN0aW9uQ2hhbmdlKCk6IFN1YmplY3Q8TW9kaWZpY2F0aW9uPiB7XHJcbiAgICByZXR1cm4gdGhpcy5lbnRpdHlDb2xsZWN0aW9uLmNvbGxlY3Rpb25DaGFuZ2VkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6YeN572u54q25oCBXHJcbiAgICovXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5lbnRpdHlDb2xsZWN0aW9uLmNsZWFyKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJvlu7rlrp7kvZNcclxuICAgKi9cclxuICBwdWJsaWMgYnVpbGRFbnRpdHkoZGF0YTogYW55KTogVCB7XHJcbiAgICBjb25zdCBlbnRpdHkgPSBjcmVhdGVFbnRpdHk8VD4odGhpcy5lbnRpdHlUeXBlLCBkYXRhKTtcclxuICAgIHJldHVybiBlbnRpdHk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmibnph4/liJvlu7rlrp7kvZNcclxuICAgKi9cclxuICBwdWJsaWMgYnVpbGRFbnRpdGllcyhsaXN0RGF0YTogYW55W10pOiBUW10ge1xyXG4gICAgY29uc3QgZW50aXRpZXM6IFRbXSA9IGNyZWF0ZUVudGl0aWVzPFQ+KHRoaXMuZW50aXR5VHlwZSwgbGlzdERhdGEpO1xyXG4gICAgcmV0dXJuIGVudGl0aWVzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yid5aeL5YyW5YiG6aG16YWN572uXHJcbiAgICogQHBhcmFtIGNvbmZpZyDnlKjmiLfliIbpobXphY3nva5cclxuICAgKi9cclxuICBzZXRQYWdpbmF0aW9uQ29uZmlnKGNvbmZpZzogYW55KSB7XHJcbiAgICB0aGlzLnBhZ2luYXRpb25NYW5hZ2VyID0gbmV3IFBhZ2luYXRpb25NYW5hZ2VyKHRoaXMuZW50aXR5VHlwZSwgY29uZmlnKTtcclxuICAgIGNvbnN0IHsgcGFnZVNpemUgPSAwIH0gPSB0aGlzLnBhZ2luYXRpb25NYW5hZ2VyLmdldFBhZ2luYXRpb25Db25maWdCeVBhdGgoJy8nKSB8fCB7fTtcclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbWF4LWxpbmUtbGVuZ3RoXHJcbiAgICB0aGlzLmVudGl0eUNvbGxlY3Rpb24ucGFnaW5hdGlvbkluZm8gPSBPYmplY3QuYXNzaWduKHsgcGFnZVNpemUgfSwgdGhpcy5lbnRpdHlDb2xsZWN0aW9uLnBhZ2luYXRpb25JbmZvLCB0aGlzLnBhZ2luYXRpb25NYW5hZ2VyLnBhZ2luYXRpb24pO1xyXG5cclxuICAgIC8vIOaXoOmcgOWGjeWNleeLrOiuvue9ruS4gOasoXBhZ2VTaXpl77yM5YeP5bCR5LiA5qyh5Y+Y5pu0XHJcbiAgICAvLyB0aGlzLmVudGl0eUNvbGxlY3Rpb24ucGFnZVNpemUgPSBwYWdlU2l6ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiuvue9ruWIhumhtVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRQYWdpbmF0aW9uSW5mbyhwYWdpbmF0aW9uSW5mbzogYW55KSB7XHJcbiAgICB0aGlzLnBhZ2luYXRpb25JbmZvID0geyAuLi50aGlzLnBhZ2luYXRpb25JbmZvLCAuLi5wYWdpbmF0aW9uSW5mbyB9O1xyXG4gIH1cclxuICBcclxufVxyXG4iXX0=