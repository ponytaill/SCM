import { HttpClient } from "@angular/common/http";
import { Inject, Injectable, Injector } from "@angular/core";
import { FORM_PATH_TOKEN } from "@farris/devkit";
import { share } from "rxjs/operators";
var FormManifestService = /** @class */ (function () {
    function FormManifestService(injector, modulePath, httpClient) {
        this.injector = injector;
        this.modulePath = modulePath;
        this.httpClient = httpClient;
    }
    FormManifestService.prototype.load = function () {
        if (this.modulePath.endsWith('\/')) {
            this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);
        }
        var formManifestPath = this.modulePath + "/expressions/form.manifest.json?version=" + new Date().valueOf().toString();
        var request$ = FormManifestService.mainfests.get(this.modulePath);
        if (request$) {
            return request$;
        }
        else {
            var req$ = this.httpClient.get(formManifestPath, { responseType: 'json' }).pipe(share());
            FormManifestService.mainfests.set(this.modulePath, req$);
            return req$;
        }
    };
    FormManifestService.mainfests = new Map();
    FormManifestService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FormManifestService.ctorParameters = function () { return [
        { type: Injector },
        { type: undefined, decorators: [{ type: Inject, args: [FORM_PATH_TOKEN,] }] },
        { type: HttpClient }
    ]; };
    return FormManifestService;
}());
export { FormManifestService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybV9tYW5pZmVzdF9zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL21hbmlmZXN0L2Zvcm1fbWFuaWZlc3Rfc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdELE9BQU8sRUFBRSxlQUFlLEVBQXNDLE1BQU0sZ0JBQWdCLENBQUM7QUFDckYsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXZDO0lBR0UsNkJBQ1UsUUFBa0IsRUFDTyxVQUFVLEVBQ25DLFVBQXNCO1FBRnRCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDTyxlQUFVLEdBQVYsVUFBVSxDQUFBO1FBQ25DLGVBQVUsR0FBVixVQUFVLENBQVk7SUFDNUIsQ0FBQztJQUNFLGtDQUFJLEdBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzVFO1FBQ0QsSUFBTSxnQkFBZ0IsR0FBTSxJQUFJLENBQUMsVUFBVSxnREFBMkMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUksQ0FBQztRQUN4SCxJQUFNLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRSxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sUUFBUSxDQUFDO1NBQ2pCO2FBQU07WUFDTCxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBZSxnQkFBZ0IsRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ3pHLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6RCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQW5CYyw2QkFBUyxHQUFHLElBQUksR0FBRyxFQUFvQyxDQUFDOztnQkFGeEUsVUFBVTs7OztnQkFMa0IsUUFBUTtnREFVaEMsTUFBTSxTQUFDLGVBQWU7Z0JBWGxCLFVBQVU7O0lBNEJuQiwwQkFBQztDQUFBLEFBdEJELElBc0JDO1NBckJZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uL2h0dHBcIjtcclxuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBGT1JNX1BBVEhfVE9LRU4sIEZvcm1NYW5pZmVzdCwgSUZvcm1NYW5pZmVzdFNlcnZpY2UgfSBmcm9tIFwiQGZhcnJpcy9kZXZraXRcIjtcclxuaW1wb3J0IHsgc2hhcmUgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEZvcm1NYW5pZmVzdFNlcnZpY2UgaW1wbGVtZW50cyBJRm9ybU1hbmlmZXN0U2VydmljZSB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgbWFpbmZlc3RzID0gbmV3IE1hcDxzdHJpbmcsIE9ic2VydmFibGU8Rm9ybU1hbmlmZXN0Pj4oKTtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgQEluamVjdChGT1JNX1BBVEhfVE9LRU4pIHByaXZhdGUgbW9kdWxlUGF0aCxcclxuICAgIHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudFxyXG4gICkgeyB9XHJcbiAgcHVibGljIGxvYWQoKTogT2JzZXJ2YWJsZTxGb3JtTWFuaWZlc3Q+IHtcclxuICAgIGlmICh0aGlzLm1vZHVsZVBhdGguZW5kc1dpdGgoJ1xcLycpKSB7XHJcbiAgICAgIHRoaXMubW9kdWxlUGF0aCA9IHRoaXMubW9kdWxlUGF0aC5zdWJzdHJpbmcoMCwgdGhpcy5tb2R1bGVQYXRoLmxlbmd0aCAtIDEpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZm9ybU1hbmlmZXN0UGF0aCA9IGAke3RoaXMubW9kdWxlUGF0aH0vZXhwcmVzc2lvbnMvZm9ybS5tYW5pZmVzdC5qc29uP3ZlcnNpb249JHtuZXcgRGF0ZSgpLnZhbHVlT2YoKS50b1N0cmluZygpfWA7XHJcbiAgICBjb25zdCByZXF1ZXN0JCA9IEZvcm1NYW5pZmVzdFNlcnZpY2UubWFpbmZlc3RzLmdldCh0aGlzLm1vZHVsZVBhdGgpO1xyXG4gICAgaWYgKHJlcXVlc3QkKSB7XHJcbiAgICAgIHJldHVybiByZXF1ZXN0JDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHJlcSQgPSB0aGlzLmh0dHBDbGllbnQuZ2V0PEZvcm1NYW5pZmVzdD4oZm9ybU1hbmlmZXN0UGF0aCwgeyByZXNwb25zZVR5cGU6ICdqc29uJyB9KS5waXBlKHNoYXJlKCkpO1xyXG4gICAgICBGb3JtTWFuaWZlc3RTZXJ2aWNlLm1haW5mZXN0cy5zZXQodGhpcy5tb2R1bGVQYXRoLCByZXEkKTtcclxuICAgICAgcmV0dXJuIHJlcSQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==