(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@angular/common'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-view-change', ['exports', 'rxjs', '@angular/common', '@angular/core'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-view-change'] = {}),global.rxjs,global.ng.common,global.ng.core));
}(this, (function (exports,rxjs,common,i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ViewChangeService = /** @class */ (function () {
        function ViewChangeService() {
            /**
             * 默认视图切换分组名称
             */
            this.defaultId = 'default';
            //当前显示视图
            this.currentViewType = {};
            /**
             * contents
             */
            this.viewContainers = {};
            this.changeCurrentViewId = new rxjs.BehaviorSubject(null);
        }
        /**
         * @param {?} itemId
         * @param {?=} viewContainerId
         * @return {?}
         */
        ViewChangeService.prototype.addViewItem = /**
         * @param {?} itemId
         * @param {?=} viewContainerId
         * @return {?}
         */
            function (itemId, viewContainerId) {
                if (viewContainerId === void 0) {
                    viewContainerId = this.defaultId;
                }
                if (this.viewContainers[viewContainerId]) {
                    if (this.hasElement(itemId, viewContainerId)) {
                        return;
                    }
                    else {
                        this.viewContainers[viewContainerId].items.push(itemId);
                    }
                }
                else {
                    this.viewContainers[viewContainerId] = ( /** @type {?} */({
                        items: []
                    }));
                    this.viewContainers[viewContainerId].items.push(itemId);
                }
            };
        /**
         * @param {?} itemId
         * @param {?=} viewContainerId
         * @return {?}
         */
        ViewChangeService.prototype.removeViewItem = /**
         * @param {?} itemId
         * @param {?=} viewContainerId
         * @return {?}
         */
            function (itemId, viewContainerId) {
                if (viewContainerId === void 0) {
                    viewContainerId = this.defaultId;
                }
                delete this.viewContainers[viewContainerId];
                if (this.viewContainers && this.viewContainers[viewContainerId]) {
                    /** @type {?} */
                    var items = this.viewContainers[viewContainerId].items.filter(( /**
                     * @param {?} el
                     * @return {?}
                     */function (el) {
                        return el !== itemId;
                    }));
                    if (!items.length) {
                        delete this.viewContainers[viewContainerId];
                        return;
                    }
                    this.viewContainers[viewContainerId].items = items;
                }
            };
        /**存储currentpageid */
        /**
         * 存储currentpageid
         * @param {?} type
         * @param {?=} viewContainerId
         * @return {?}
         */
        ViewChangeService.prototype.updateCurrentViewId = /**
         * 存储currentpageid
         * @param {?} type
         * @param {?=} viewContainerId
         * @return {?}
         */
            function (type, viewContainerId) {
                if (viewContainerId === void 0) {
                    viewContainerId = this.defaultId;
                }
                this.currentViewType[viewContainerId] = type;
                /** @type {?} */
                var changeView = {};
                changeView[viewContainerId] = type;
                this.changeCurrentViewId.next(changeView);
            };
        /**
         * @return {?}
         */
        ViewChangeService.prototype.getChangeCurrentViewId = /**
         * @return {?}
         */
            function () {
                return this.changeCurrentViewId;
            };
        /**
         * @private
         * @param {?} itemId
         * @param {?} groupId
         * @return {?}
         */
        ViewChangeService.prototype.hasElement = /**
         * @private
         * @param {?} itemId
         * @param {?} groupId
         * @return {?}
         */
            function (itemId, groupId) {
                return this.viewContainers[groupId].items.some(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item === itemId; }));
            };
        ViewChangeService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ViewChangeService.ctorParameters = function () { return []; };
        /** @nocollapse */ ViewChangeService.ngInjectableDef = i0.defineInjectable({ factory: function ViewChangeService_Factory() { return new ViewChangeService(); }, token: ViewChangeService, providedIn: "root" });
        return ViewChangeService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ViewChangeComponent = /** @class */ (function () {
        function ViewChangeComponent(_renderer, viewChangeService) {
            this._renderer = _renderer;
            this.viewChangeService = viewChangeService;
            this.viewType = 'tile';
            this.viewGroupId = 'default';
            this.toolTypeChange = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        ViewChangeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.toolbarData && this.toolbarData.length) {
                    if (this.defaultType) {
                        /** @type {?} */
                        var item = this.toolbarData.find(( /**
                         * @param {?} bar
                         * @return {?}
                         */function (bar) {
                            return bar['type'] === _this.defaultType;
                        }));
                        this.activeTypeItem = item;
                        this.toolTypeChange.emit(this.activeTypeItem);
                    }
                    else {
                        this.activeTypeItem = this.toolbarData[0];
                        this.toolTypeChange.emit(this.activeTypeItem);
                    }
                }
            };
        /**
         * @return {?}
         */
        ViewChangeComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (!this.viewChangeService) {
                    this.viewChangeService = new ViewChangeService();
                }
                this.viewChangeService.updateCurrentViewId(this.activeTypeItem['type'], this.viewGroupId);
            };
        /**
         * @param {?} item
         * @return {?}
         */
        ViewChangeComponent.prototype.listItemClick = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (item.disable || this.activeTypeItem['type'] === item['type']) {
                    return;
                }
                this.activeTypeItem = item;
                if (!this.viewChangeService) {
                    this.viewChangeService = new ViewChangeService();
                }
                this.viewChangeService.updateCurrentViewId(this.activeTypeItem['type'], this.viewGroupId);
                this.toolTypeChange.emit(item);
                if (this.typelist) {
                    this._renderer.setStyle(this.typelist.nativeElement, 'display', 'none');
                }
            };
        /**
         * @return {?}
         */
        ViewChangeComponent.prototype.dropdownMouseEnter = /**
         * @return {?}
         */
            function () {
                this._renderer.setStyle(this.typelist.nativeElement, 'display', 'block');
            };
        /**
         * @return {?}
         */
        ViewChangeComponent.prototype.dropdownMouseLeave = /**
         * @return {?}
         */
            function () {
                this._renderer.setStyle(this.typelist.nativeElement, 'display', 'none');
            };
        ViewChangeComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'farris-view-change',
                        template: "<div class=\"f-view-change\">\r\n    <div class=\"f-view-change-tile\" *ngIf=\"viewType === 'tile'; else dropdown\">\r\n        <div class=\"f-view-change-tile-btn\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'tile-btn-active': item.type === activeTypeItem.type,'tile-btn-disable': item.disable}\" (click)=\"listItemClick(item)\" [title]=\"item.title\">\r\n            <span class=\"tile-btn-icon {{item.iconName}}\"></span>\r\n        </div>\r\n    </div>\r\n    <ng-template #dropdown>\r\n        <div class=\"f-view-change-dropdown\" \r\n        (mouseenter)=\"dropdownMouseEnter()\"\r\n        (mouseleave)=\"dropdownMouseLeave()\"> \r\n            <div class=\"f-view-change-toggle\" *ngIf=\"this.toolbarData.length\">\r\n                <span class=\"toggle-btn-icon {{activeTypeItem.iconName}}\"></span>\r\n            </div>\r\n            <div class=\"f-view-change-typelist\" #typelist>\r\n                <div class=\"f-view-change-typelist-content\">\r\n                    <div class=\"f-view-change-typelist-arrow\"></div>\r\n                    <ul class=\"f-view-change-typelist-list\">\r\n                        <li class=\"typelist-item\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'typelist-item-active': item.type === activeTypeItem.type,'typelist-item-disable': item.disable}\" (click)=\"listItemClick(item)\">\r\n                                <span class=\"typelist-item-icon {{item.iconName}}\"></span>\r\n                                <span class=\"typelist-item-title\">{{item.title}}</span>\r\n                            </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <!-- <ul class=\"f-view-change-typelist\" #typelist>\r\n                <li class=\"f-view-change-typelist-arrow\"></li>\r\n                <li class=\"typelist-item\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'typelist-item-active': item.type === activeTypeItem.type,'typelist-item-disable': item.disable}\" (click)=\"listItemClick(item)\">\r\n                    <span class=\"typelist-item-icon {{item.iconName}}\"></span>\r\n                    <span class=\"typelist-item-title\">{{item.title}}</span>\r\n                </li>\r\n            </ul> -->\r\n        </div>\r\n    </ng-template>\r\n</div>",
                        encapsulation: i0.ViewEncapsulation.None
                        // providers:[ ViewChangeService ]
                        ,
                        styles: [".f-viewchange-view-none{display:none!important}"]
                    }] }
        ];
        /** @nocollapse */
        ViewChangeComponent.ctorParameters = function () {
            return [
                { type: i0.Renderer2 },
                { type: ViewChangeService }
            ];
        };
        ViewChangeComponent.propDecorators = {
            toolbarData: [{ type: i0.Input }],
            viewType: [{ type: i0.Input }],
            defaultType: [{ type: i0.Input }],
            viewGroupId: [{ type: i0.Input }],
            toolTypeChange: [{ type: i0.Output }],
            typelist: [{ type: i0.ViewChild, args: ['typelist',] }]
        };
        return ViewChangeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //视图区域
    var FarrisViewItemDirective = /** @class */ (function () {
        function FarrisViewItemDirective(elementRef, viewChangeService, render) {
            this.elementRef = elementRef;
            this.viewChangeService = viewChangeService;
            this.render = render;
            this.fViewGroupId = 'default';
        }
        /**
         * @return {?}
         */
        FarrisViewItemDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.viewChangeService.addViewItem(this.viewItemType, this.fViewGroupId);
                this.viewChangeService.getChangeCurrentViewId().subscribe(( /**
                 * @param {?} currentViewType
                 * @return {?}
                 */function (currentViewType) {
                    if (!currentViewType)
                        return;
                    if (!currentViewType[_this.fViewGroupId]) {
                        return;
                    }
                    else if (currentViewType[_this.fViewGroupId] == _this.viewItemType) {
                        // this.render.setStyle(this.elementRef.nativeElement,'display','');
                        _this.render.removeClass(_this.elementRef.nativeElement, 'f-viewchange-view-none');
                    }
                    else {
                        // this.render.setStyle(this.elementRef.nativeElement,'display','none',0);
                        _this.render.addClass(_this.elementRef.nativeElement, 'f-viewchange-view-none');
                    }
                }));
            };
        /**
         * @return {?}
         */
        FarrisViewItemDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.viewChangeService.removeViewItem(this.viewItemType, this.fViewGroupId);
            };
        FarrisViewItemDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[fViewItem]'
                    },] }
        ];
        /** @nocollapse */
        FarrisViewItemDirective.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: ViewChangeService },
                { type: i0.Renderer2 }
            ];
        };
        FarrisViewItemDirective.propDecorators = {
            viewItemType: [{ type: i0.Input, args: ['fViewItem',] }],
            fViewGroupId: [{ type: i0.Input, args: ['fViewGroupId',] }]
        };
        return FarrisViewItemDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ViewChangeModule = /** @class */ (function () {
        function ViewChangeModule() {
        }
        ViewChangeModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [ViewChangeComponent, FarrisViewItemDirective],
                        imports: [
                            common.CommonModule
                        ],
                        exports: [ViewChangeComponent, FarrisViewItemDirective]
                    },] }
        ];
        return ViewChangeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ViewChangeService = ViewChangeService;
    exports.ViewChangeComponent = ViewChangeComponent;
    exports.ViewChangeModule = ViewChangeModule;
    exports.FarrisViewItemDirective = FarrisViewItemDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-view-change.umd.js.map