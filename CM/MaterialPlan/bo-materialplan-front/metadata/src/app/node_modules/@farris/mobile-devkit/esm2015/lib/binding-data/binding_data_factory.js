import { PropertyUtil as BindingPropertyUtil } from './property_util';
import { EntityUtil as EntityLoadUtil } from './entity_util';
import { BindingListFactory } from './binding_list_factory';
import { BindingData } from './binding_data';
class BindingDataFactory {
    /**
     * 根据Repository创建一个BindingData
     */
    static createFromRepository(repository, bindingPath) {
        const bindingData = new BindingData();
        const bindingProperties = BindingPropertyUtil.getProperties(repository.entityType);
        const bindingList = BindingListFactory.create(bindingProperties);
        bindingData.initByBindingList(bindingList, null);
        EntityLoadUtil.loadRepository(repository, bindingList);
        // 从repository初始化bindingData
        bindingData.pagingInfo = repository.entityCollection.paginationInfo;
        return bindingData;
    }
    /**
     * 根据EntityManager创建BindingData，并建立双向关联（请勿使用）
     * @internal
     * @summary
     * 1、该方法暂时仅供内部单元测试使用；
     * 2、该方法暂时只创建BindingData，不建立双向关联
     */
    static createFromEntityManager(entityManager, bindingPath) {
        const bindingData = new BindingData();
        const bindingProperties = BindingPropertyUtil.getProperties(entityManager.entityType);
        const bindingList = BindingListFactory.create(bindingProperties);
        bindingData.initByBindingList(bindingList, null);
        // 初始化数据
        const entities = entityManager.getEntitiesByPath([]);
        EntityLoadUtil.loadEntities(entities, bindingList);
        return bindingData;
    }
    /**
     * 根据已经存在的BindingData创建一个新的BindingData
     */
    static createFromExistingBindingData(existingBindingData, bindingPath) {
        const bindingData = new BindingData();
        bindingData.initByBindingList(existingBindingData.list, null);
        return bindingData;
    }
}
export { BindingDataFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19kYXRhX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvYmluZGluZy1kYXRhL2JpbmRpbmdfZGF0YV9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxZQUFZLElBQUksbUJBQW1CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsVUFBVSxJQUFJLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHN0MsTUFBTSxrQkFBa0I7SUFFdEI7O09BRUc7SUFDSSxNQUFNLENBQUMsb0JBQW9CLENBQUMsVUFBOEIsRUFBRSxXQUFtQjtRQUNwRixNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ3RDLE1BQU0saUJBQWlCLEdBQUcsbUJBQW1CLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuRixNQUFNLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNqRSxXQUFXLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2pELGNBQWMsQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRXZELDRCQUE0QjtRQUM1QixXQUFXLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUM7UUFDcEUsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxhQUFvQyxFQUFFLFdBQW1CO1FBQzdGLE1BQU0sV0FBVyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFDdEMsTUFBTSxpQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RGLE1BQU0sV0FBVyxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2pFLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFakQsUUFBUTtRQUNSLE1BQU0sUUFBUSxHQUFhLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvRCxjQUFjLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUVuRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsNkJBQTZCLENBQUMsbUJBQWdDLEVBQUUsV0FBbUI7UUFDL0YsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUN0QyxXQUFXLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7Q0FDRjtBQUVELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi4vZW50aXR5L2luZGV4JztcclxuaW1wb3J0IHsgUmVwb3NpdG9yeSwgRW50aXR5TWFuYWdlciB9IGZyb20gJy4uL3JlcG9zaXRvcnkvaW5kZXgnO1xyXG5pbXBvcnQgeyBQcm9wZXJ0eVV0aWwgYXMgQmluZGluZ1Byb3BlcnR5VXRpbCB9IGZyb20gJy4vcHJvcGVydHlfdXRpbCc7XHJcbmltcG9ydCB7IEVudGl0eVV0aWwgYXMgRW50aXR5TG9hZFV0aWwgfSBmcm9tICcuL2VudGl0eV91dGlsJztcclxuaW1wb3J0IHsgQmluZGluZ0xpc3RGYWN0b3J5IH0gZnJvbSAnLi9iaW5kaW5nX2xpc3RfZmFjdG9yeSc7XHJcbmltcG9ydCB7IEJpbmRpbmdEYXRhIH0gZnJvbSAnLi9iaW5kaW5nX2RhdGEnO1xyXG5cclxuXHJcbmNsYXNzIEJpbmRpbmdEYXRhRmFjdG9yeSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOagueaNrlJlcG9zaXRvcnnliJvlu7rkuIDkuKpCaW5kaW5nRGF0YVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlRnJvbVJlcG9zaXRvcnkocmVwb3NpdG9yeTogUmVwb3NpdG9yeTxFbnRpdHk+LCBiaW5kaW5nUGF0aDogc3RyaW5nKTogQmluZGluZ0RhdGEge1xyXG4gICAgY29uc3QgYmluZGluZ0RhdGEgPSBuZXcgQmluZGluZ0RhdGEoKTtcclxuICAgIGNvbnN0IGJpbmRpbmdQcm9wZXJ0aWVzID0gQmluZGluZ1Byb3BlcnR5VXRpbC5nZXRQcm9wZXJ0aWVzKHJlcG9zaXRvcnkuZW50aXR5VHlwZSk7XHJcbiAgICBjb25zdCBiaW5kaW5nTGlzdCA9IEJpbmRpbmdMaXN0RmFjdG9yeS5jcmVhdGUoYmluZGluZ1Byb3BlcnRpZXMpO1xyXG4gICAgYmluZGluZ0RhdGEuaW5pdEJ5QmluZGluZ0xpc3QoYmluZGluZ0xpc3QsIG51bGwpO1xyXG4gICAgRW50aXR5TG9hZFV0aWwubG9hZFJlcG9zaXRvcnkocmVwb3NpdG9yeSwgYmluZGluZ0xpc3QpO1xyXG5cclxuICAgIC8vIOS7jnJlcG9zaXRvcnnliJ3lp4vljJZiaW5kaW5nRGF0YVxyXG4gICAgYmluZGluZ0RhdGEucGFnaW5nSW5mbyA9IHJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi5wYWdpbmF0aW9uSW5mbztcclxuICAgIHJldHVybiBiaW5kaW5nRGF0YTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOagueaNrkVudGl0eU1hbmFnZXLliJvlu7pCaW5kaW5nRGF0Ye+8jOW5tuW7uueri+WPjOWQkeWFs+iBlO+8iOivt+WLv+S9v+eUqO+8iVxyXG4gICAqIEBpbnRlcm5hbFxyXG4gICAqIEBzdW1tYXJ5XHJcbiAgICogMeOAgeivpeaWueazleaaguaXtuS7heS+m+WGhemDqOWNleWFg+a1i+ivleS9v+eUqO+8m1xyXG4gICAqIDLjgIHor6Xmlrnms5XmmoLml7blj6rliJvlu7pCaW5kaW5nRGF0Ye+8jOS4jeW7uueri+WPjOWQkeWFs+iBlFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlRnJvbUVudGl0eU1hbmFnZXIoZW50aXR5TWFuYWdlcjogRW50aXR5TWFuYWdlcjxFbnRpdHk+LCBiaW5kaW5nUGF0aDogc3RyaW5nKTogQmluZGluZ0RhdGEge1xyXG4gICAgY29uc3QgYmluZGluZ0RhdGEgPSBuZXcgQmluZGluZ0RhdGEoKTtcclxuICAgIGNvbnN0IGJpbmRpbmdQcm9wZXJ0aWVzID0gQmluZGluZ1Byb3BlcnR5VXRpbC5nZXRQcm9wZXJ0aWVzKGVudGl0eU1hbmFnZXIuZW50aXR5VHlwZSk7XHJcbiAgICBjb25zdCBiaW5kaW5nTGlzdCA9IEJpbmRpbmdMaXN0RmFjdG9yeS5jcmVhdGUoYmluZGluZ1Byb3BlcnRpZXMpO1xyXG4gICAgYmluZGluZ0RhdGEuaW5pdEJ5QmluZGluZ0xpc3QoYmluZGluZ0xpc3QsIG51bGwpO1xyXG5cclxuICAgIC8vIOWIneWni+WMluaVsOaNrlxyXG4gICAgY29uc3QgZW50aXRpZXM6IEVudGl0eVtdID0gZW50aXR5TWFuYWdlci5nZXRFbnRpdGllc0J5UGF0aChbXSk7XHJcbiAgICBFbnRpdHlMb2FkVXRpbC5sb2FkRW50aXRpZXMoZW50aXRpZXMsIGJpbmRpbmdMaXN0KTtcclxuXHJcbiAgICByZXR1cm4gYmluZGluZ0RhdGE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmoLnmja7lt7Lnu4/lrZjlnKjnmoRCaW5kaW5nRGF0YeWIm+W7uuS4gOS4quaWsOeahEJpbmRpbmdEYXRhXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGVGcm9tRXhpc3RpbmdCaW5kaW5nRGF0YShleGlzdGluZ0JpbmRpbmdEYXRhOiBCaW5kaW5nRGF0YSwgYmluZGluZ1BhdGg6IHN0cmluZykge1xyXG4gICAgY29uc3QgYmluZGluZ0RhdGEgPSBuZXcgQmluZGluZ0RhdGEoKTtcclxuICAgIGJpbmRpbmdEYXRhLmluaXRCeUJpbmRpbmdMaXN0KGV4aXN0aW5nQmluZGluZ0RhdGEubGlzdCwgbnVsbCk7XHJcbiAgICByZXR1cm4gYmluZGluZ0RhdGE7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBCaW5kaW5nRGF0YUZhY3RvcnkgfTtcclxuIl19