/**
 * @fileoverview added by tsickle
 * Generated from: utils/api-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
var ApiLocalService = /** @class */ (function () {
    function ApiLocalService(http) {
        this.http = http;
    }
    /**
     * @param {?} param
     * @return {?}
     */
    ApiLocalService.prototype.filterGroupLeader = /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        /** @type {?} */
        var url = '/api/runtime/sys/v1.0/absRecentContacts/modify';
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.post(url, param, options);
    };
    /**
     * @param {?} param
     * @return {?}
     */
    ApiLocalService.prototype.getGroupLeaderStatus = /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        /** @type {?} */
        var url = '/api/runtime/sys/v1.0/absRecentContacts/getRecentContacts';
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.post(url, param, options);
    };
    /**
     * 获取行政组织
     * @returns observable
     */
    /**
     * 获取行政组织
     * @param {?} url
     * @param {?} param
     * @return {?} observable
     */
    ApiLocalService.prototype.getOrganization = /**
     * 获取行政组织
     * @param {?} url
     * @param {?} param
     * @return {?} observable
     */
    function (url, param) {
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.post(url + '/org', param, options);
    };
    /**
     * 获取系统用户分组
     * @returns observable
     */
    /**
     * 获取系统用户分组
     * @param {?} param
     * @return {?} observable
     */
    ApiLocalService.prototype.getSysUserGroup = /**
     * 获取系统用户分组
     * @param {?} param
     * @return {?} observable
     */
    function (param) {
        /** @type {?} */
        var url = '/api/runtime/sys/v1.0/usergroups';
        /** @type {?} */
        var paramStr = JSON.stringify(param);
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
            params: {
                param: paramStr,
            }
        };
        return this.http.get(url, options);
    };
    /**
     *
     * @param url url地址
     * @param absOrgType 系统组织
     * @param orgId 组织id
     * @param requestParam 请求参数
     * @returns observable
     */
    /**
     *
     * @param {?} url url地址
     * @param {?} absOrgType 系统组织
     * @param {?} orgId 组织id
     * @param {?} requestParam 请求参数
     * @return {?} observable
     */
    ApiLocalService.prototype.getPersonnelByOrgId = /**
     *
     * @param {?} url url地址
     * @param {?} absOrgType 系统组织
     * @param {?} orgId 组织id
     * @param {?} requestParam 请求参数
     * @return {?} observable
     */
    function (url, absOrgType, orgId, requestParam) {
        /** @type {?} */
        var body = {
            absOrgType: absOrgType,
            // 组织类型，默认为系统组织
            pageIndex: requestParam.pageIndex,
            // 当前页
            pageSize: requestParam.pageSize,
            // 每页记录数
            getUserInfo: true,
            orgId: orgId,
            // 组织id，获取当前组织下的用户
            withAllOrg: requestParam.withAllOrg,
            // 获取组织及其所有下级组织下的用户，默认false
            notGetStopUser: requestParam.notGetStopUser,
            // 是否获取停用用户，默认为false，
            notGetCurrentUser: requestParam.notGetCurrentUser,
            // 是否获取当前用户，默认为true，
            orderField: requestParam.orderField,
            // 排序
            userTypeMode: requestParam.userTypeMode,
            filterId: requestParam.filterId,
            posId: requestParam.posId,
            withPermission: requestParam.withPermission,
            authOp: requestParam.authOp
        };
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        return this.http.post(url + '/user', body, options);
    };
    // 根据系统用户分组id获取分组下成员
    // 根据系统用户分组id获取分组下成员
    /**
     * @param {?} url
     * @param {?} requestParam
     * @return {?}
     */
    ApiLocalService.prototype.getPersonnelByUserGroupId = 
    // 根据系统用户分组id获取分组下成员
    /**
     * @param {?} url
     * @param {?} requestParam
     * @return {?}
     */
    function (url, requestParam) {
        /** @type {?} */
        var body = {
            pageIndex: requestParam.pageIndex,
            // 当前页
            pageSize: requestParam.pageSize,
            // 每页记录数
            getUserInfo: true,
            // 是否获取用户头像
            withAllGroup: requestParam.withAllGroup,
            notGetStopUser: requestParam.notGetStopUser,
            // 是否获取停用用户，默认为false，
            notGetCurrentUser: requestParam.notGetCurrentUser,
            // 是否获取当前用户，默认为true，
            orderField: requestParam.orderField,
            // 排序
            userTypeMode: requestParam.userTypeMode,
            filterId: requestParam.filterId,
            groupId: requestParam.groupId,
        };
        // 需要根据组织进行人员二次过滤
        if (requestParam.orgId) {
            body['orgId'] = requestParam.orgId;
        }
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        return this.http.post(url + '/user', body, options);
    };
    /**
     * 查询行政人员（根据人员id返回相关数据）
     * @param url url地址
     * @param absOrgType 系统类型
     * @param ids 人员id
     * @returns observable
     */
    /**
     * 查询行政人员（根据人员id返回相关数据）
     * @param {?} url url地址
     * @param {?} absOrgType 系统类型
     * @param {?} ids 人员id
     * @return {?} observable
     */
    ApiLocalService.prototype.getPersonnelByUserIds = /**
     * 查询行政人员（根据人员id返回相关数据）
     * @param {?} url url地址
     * @param {?} absOrgType 系统类型
     * @param {?} ids 人员id
     * @return {?} observable
     */
    function (url, absOrgType, ids) {
        /** @type {?} */
        var idsArr = [];
        if (!!ids) {
            /** @type {?} */
            var lastChar = ids.substring(ids.length - 1);
            ids = lastChar === ',' ? ids.substring(0, ids.length - 1) : ids;
            idsArr = ids.split(',');
        }
        /** @type {?} */
        var urls = url + '/user/' + absOrgType;
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        return this.http.post(urls, idsArr, options);
    };
    /**
     * 搜索行政人员（根据名称、编号搜索）
     * @param url 传入的url
     * @param absOrgType 数据源类型
     * @param codeOrName 传入的搜索内容
     * @param requestParam 请求参数
     * @returns observable
     */
    /**
     * 搜索行政人员（根据名称、编号搜索）
     * @param {?} url 传入的url
     * @param {?} absOrgType 数据源类型
     * @param {?} codeOrName 传入的搜索内容
     * @param {?} requestParam 请求参数
     * @return {?} observable
     */
    ApiLocalService.prototype.getPersonnelBySearch = /**
     * 搜索行政人员（根据名称、编号搜索）
     * @param {?} url 传入的url
     * @param {?} absOrgType 数据源类型
     * @param {?} codeOrName 传入的搜索内容
     * @param {?} requestParam 请求参数
     * @return {?} observable
     */
    function (url, absOrgType, codeOrName, requestParam) {
        /** @type {?} */
        var body = {
            absOrgType: absOrgType,
            // 组织类型，默认为系统组织
            getUserInfo: true,
            codeOrName: codeOrName,
            // 搜索内容
            withAllOrg: requestParam.withAllOrg,
            // 获取组织及其所有下级组织下的用户，默认false
            notGetStopUser: requestParam.notGetStopUser,
            // 是否获取停用用户，默认为false，
            notGetCurrentUser: requestParam.notGetCurrentUser,
            // 是否获取当前用户，默认为true，
            orderField: requestParam.orderField,
            // 排序
            userTypeMode: requestParam.userTypeMode,
            searchMode: 'or',
            pinyin: codeOrName,
            initials: codeOrName,
            filterId: requestParam.filterId
        };
        if (requestParam.orgId) {
            body.orgId = requestParam.orgId;
        }
        if (requestParam.pageSize) {
            body.pageSize = requestParam.pageSize;
        }
        if (requestParam.pageIndex) {
            body.pageIndex = requestParam.pageIndex;
        }
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        return this.http.post(url + '/user', body, options);
    };
    /**
     * 获取群组信息
     * @param url 接口地址
     * @returns observable
     */
    /**
     * 获取群组信息
     * @param {?} url 接口地址
     * @param {?=} param
     * @return {?} observable
     */
    ApiLocalService.prototype.getGroupOrGroupPersonnel = /**
     * 获取群组信息
     * @param {?} url 接口地址
     * @param {?=} param
     * @return {?} observable
     */
    function (url, param) {
        /** @type {?} */
        var baseUrl = url;
        if (param.parentid) {
            baseUrl += '?iseanble=' + param.isenable + '&parentid=' + param.parentid;
        }
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        return this.http.get(baseUrl, options);
    };
    // 获取选人组件全局配置参数
    // 获取选人组件全局配置参数
    /**
     * @param {?} url
     * @return {?}
     */
    ApiLocalService.prototype.getGlobalParamConfig = 
    // 获取选人组件全局配置参数
    /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        return this.http.post(url, options);
    };
    // 获取组织架构下所有成员所属的岗位，用于人员二次过滤
    // 获取组织架构下所有成员所属的岗位，用于人员二次过滤
    /**
     * @param {?} url
     * @param {?} absOrgType
     * @param {?} requestParam
     * @return {?}
     */
    ApiLocalService.prototype.getFilterPosition = 
    // 获取组织架构下所有成员所属的岗位，用于人员二次过滤
    /**
     * @param {?} url
     * @param {?} absOrgType
     * @param {?} requestParam
     * @return {?}
     */
    function (url, absOrgType, requestParam) {
        /** @type {?} */
        var body = {
            absOrgType: absOrgType,
            withAllOrg: requestParam.withAllOrg,
            getUserInfo: requestParam.getUserInfo,
            notGetStopUser: requestParam.notGetStopUser,
            notGetCurrentUser: requestParam.notGetCurrentUser,
            orderField: requestParam.orderField,
            userTypeMode: requestParam.userTypeMode,
            filterId: requestParam.filterId,
            curUser: false,
            orgId: requestParam.orgId,
        };
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        return this.http.post(url, body, options);
    };
    // 获取用户分组下所有成员所属的组织，用于人员二次过滤
    // 获取用户分组下所有成员所属的组织，用于人员二次过滤
    /**
     * @param {?} url
     * @param {?} absOrgType
     * @param {?} requestParam
     * @return {?}
     */
    ApiLocalService.prototype.getFilterOrganization = 
    // 获取用户分组下所有成员所属的组织，用于人员二次过滤
    /**
     * @param {?} url
     * @param {?} absOrgType
     * @param {?} requestParam
     * @return {?}
     */
    function (url, absOrgType, requestParam) {
        /** @type {?} */
        var body = {
            absOrgType: absOrgType,
            withAllOrg: requestParam.withAllOrg,
            getUserInfo: requestParam.getUserInfo,
            notGetStopUser: requestParam.notGetStopUser,
            notGetCurrentUser: requestParam.notGetCurrentUser,
            orderField: requestParam.orderField,
            userTypeMode: requestParam.userTypeMode,
            filterId: requestParam.filterId,
            curUser: false,
            groupId: requestParam.groupId,
        };
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            })
        };
        return this.http.post(url, body, options);
    };
    ApiLocalService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ApiLocalService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return ApiLocalService;
}());
export { ApiLocalService };
if (false) {
    /** @type {?} */
    ApiLocalService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,