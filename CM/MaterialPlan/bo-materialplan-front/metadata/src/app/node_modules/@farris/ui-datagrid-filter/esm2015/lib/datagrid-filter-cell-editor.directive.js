/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FormGroup } from '@angular/forms';
import { Directive, Input, Injector, ComponentFactoryResolver, ViewContainerRef, Renderer2 } from '@angular/core';
import { ColumnFilterType } from '@farris/ui-datagrid';
import { FilterTextboxComponent } from './filter-editors/filter-row-textbox.component';
import { FilterCheckboxComponent } from './filter-editors/filter-row-checkbox.component';
export class FilterCellEditorDirective {
    /**
     * @param {?} injector
     * @param {?} resolver
     * @param {?} container
     * @param {?} render
     */
    constructor(injector, resolver, container, render) {
        this.injector = injector;
        this.resolver = resolver;
        this.container = container;
        this.render = render;
        this.delay = 300;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createFilterEditor();
    }
    /**
     * @private
     * @return {?}
     */
    createFilterEditor() {
        if (this.column.filter) {
            /** @type {?} */
            const columnFilter = (/** @type {?} */ (this.column.filter));
            columnFilter.type = columnFilter.type || ColumnFilterType.string;
            /** @type {?} */
            let constructorCmp = FilterTextboxComponent;
            switch (columnFilter.type) {
                case ColumnFilterType.boolean:
                    constructorCmp = FilterCheckboxComponent;
                    break;
                // case ColumnFilterType.enum:
                //     constructorCmp = FilterEnumComponent;
                //     break;
            }
            /** @type {?} */
            const factory = this.resolver.resolveComponentFactory(constructorCmp);
            this.componentRef = this.container.createComponent(factory);
            this.componentRef.instance.column = this.column;
            this.componentRef.instance.group = this.group;
            this.componentRef.instance.gridInstance = this.gridInstance;
            this.componentRef.instance.disabled = columnFilter.type >= 3;
            this.componentRef.instance.delay = this.delay;
            if (this.gridInstance.conditions && Object.keys(this.gridInstance.conditions).length) {
                // console.log(this.gridInstance.conditions);
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.componentRef.instance.initFilter(this.gridInstance.conditions[this.column.field]);
                }), 100);
            }
        }
    }
    /**
     * @return {?}
     */
    clearValue() {
        if (this.componentRef) {
            this.componentRef.instance.clearValue();
        }
    }
}
FilterCellEditorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[filter-cell-editor]',
            },] }
];
/** @nocollapse */
FilterCellEditorDirective.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: Renderer2 }
];
FilterCellEditorDirective.propDecorators = {
    column: [{ type: Input }],
    group: [{ type: Input }],
    gridInstance: [{ type: Input }],
    delay: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FilterCellEditorDirective.prototype.column;
    /** @type {?} */
    FilterCellEditorDirective.prototype.group;
    /** @type {?} */
    FilterCellEditorDirective.prototype.gridInstance;
    /** @type {?} */
    FilterCellEditorDirective.prototype.delay;
    /** @type {?} */
    FilterCellEditorDirective.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    FilterCellEditorDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FilterCellEditorDirective.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    FilterCellEditorDirective.prototype.container;
    /**
     * @type {?}
     * @private
     */
    FilterCellEditorDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZmlsdGVyLWNlbGwtZWRpdG9yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtZmlsdGVyLyIsInNvdXJjZXMiOlsibGliL2RhdGFncmlkLWZpbHRlci1jZWxsLWVkaXRvci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsd0JBQXdCLEVBQUUsZ0JBQWdCLEVBQXdCLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SSxPQUFPLEVBQTRCLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDdkYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFLekYsTUFBTSxPQUFPLHlCQUF5Qjs7Ozs7OztJQU1sQyxZQUNZLFFBQWtCLEVBQ2xCLFFBQWtDLEVBQ2xDLFNBQTJCLEVBQzNCLE1BQWlCO1FBSGpCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7UUFDbEMsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDM0IsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQU5wQixVQUFLLEdBQUcsR0FBRyxDQUFDO0lBTVcsQ0FBQzs7OztJQUVqQyxRQUFRO1FBQ0osSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDOUIsQ0FBQzs7Ozs7SUFFTyxrQkFBa0I7UUFFdEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTs7a0JBQ2QsWUFBWSxHQUFHLG1CQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFnQjtZQUN2RCxZQUFZLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQyxJQUFJLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDOztnQkFDN0QsY0FBYyxHQUFRLHNCQUFzQjtZQUNoRCxRQUFRLFlBQVksQ0FBQyxJQUFJLEVBQUU7Z0JBQ3ZCLEtBQUssZ0JBQWdCLENBQUMsT0FBTztvQkFDekIsY0FBYyxHQUFHLHVCQUF1QixDQUFDO29CQUN6QyxNQUFNO2dCQUNWLDhCQUE4QjtnQkFDOUIsNENBQTRDO2dCQUM1QyxhQUFhO2FBQ2hCOztrQkFDSyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBRSxjQUFjLENBQUU7WUFDdkUsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1RCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNoRCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUM5QyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUM1RCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7WUFDN0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFFOUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxFQUFHO2dCQUNuRiw2Q0FBNkM7Z0JBQzdDLFVBQVU7OztnQkFBQyxHQUFHLEVBQUU7b0JBQ1osSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDM0YsQ0FBQyxHQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQ1g7U0FDSjtJQUVMLENBQUM7Ozs7SUFFRCxVQUFVO1FBQ04sSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ25CLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQzNDO0lBQ0wsQ0FBQzs7O1lBdkRKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsc0JBQXNCO2FBQ25DOzs7O1lBUDBCLFFBQVE7WUFBRSx3QkFBd0I7WUFBRSxnQkFBZ0I7WUFBd0IsU0FBUzs7O3FCQVMzRyxLQUFLO29CQUNMLEtBQUs7MkJBQ0wsS0FBSztvQkFDTCxLQUFLOzs7O0lBSE4sMkNBQTRCOztJQUM1QiwwQ0FBMEI7O0lBQzFCLGlEQUEyQjs7SUFDM0IsMENBQXFCOztJQUNyQixpREFBZ0M7Ozs7O0lBRTVCLDZDQUEwQjs7Ozs7SUFDMUIsNkNBQTBDOzs7OztJQUMxQyw4Q0FBbUM7Ozs7O0lBQ25DLDJDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgSW5qZWN0b3IsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgVmlld0NvbnRhaW5lclJlZiwgT25Jbml0LCBDb21wb25lbnRSZWYsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhQ29sdW1uLCBDb2x1bW5GaWx0ZXIsIENvbHVtbkZpbHRlclR5cGUgfSBmcm9tICdAZmFycmlzL3VpLWRhdGFncmlkJztcclxuaW1wb3J0IHsgRmlsdGVyVGV4dGJveENvbXBvbmVudCB9IGZyb20gJy4vZmlsdGVyLWVkaXRvcnMvZmlsdGVyLXJvdy10ZXh0Ym94LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEZpbHRlckNoZWNrYm94Q29tcG9uZW50IH0gZnJvbSAnLi9maWx0ZXItZWRpdG9ycy9maWx0ZXItcm93LWNoZWNrYm94LmNvbXBvbmVudCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2ZpbHRlci1jZWxsLWVkaXRvcl0nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmlsdGVyQ2VsbEVkaXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBASW5wdXQoKSBjb2x1bW46IERhdGFDb2x1bW47XHJcbiAgICBASW5wdXQoKSBncm91cDogRm9ybUdyb3VwO1xyXG4gICAgQElucHV0KCkgZ3JpZEluc3RhbmNlOiBhbnk7XHJcbiAgICBASW5wdXQoKSBkZWxheSA9IDMwMDtcclxuICAgIGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPGFueT47XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgICAgICBwcml2YXRlIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICAgICAgcHJpdmF0ZSBjb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICAgICAgcHJpdmF0ZSByZW5kZXI6IFJlbmRlcmVyMikge31cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLmNyZWF0ZUZpbHRlckVkaXRvcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlRmlsdGVyRWRpdG9yKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5jb2x1bW4uZmlsdGVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtbkZpbHRlciA9IHRoaXMuY29sdW1uLmZpbHRlciBhcyBDb2x1bW5GaWx0ZXI7XHJcbiAgICAgICAgICAgIGNvbHVtbkZpbHRlci50eXBlID0gY29sdW1uRmlsdGVyLnR5cGUgfHwgQ29sdW1uRmlsdGVyVHlwZS5zdHJpbmc7XHJcbiAgICAgICAgICAgIGxldCBjb25zdHJ1Y3RvckNtcDogYW55ID0gRmlsdGVyVGV4dGJveENvbXBvbmVudDtcclxuICAgICAgICAgICAgc3dpdGNoIChjb2x1bW5GaWx0ZXIudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBDb2x1bW5GaWx0ZXJUeXBlLmJvb2xlYW46XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3JDbXAgPSBGaWx0ZXJDaGVja2JveENvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIC8vIGNhc2UgQ29sdW1uRmlsdGVyVHlwZS5lbnVtOlxyXG4gICAgICAgICAgICAgICAgLy8gICAgIGNvbnN0cnVjdG9yQ21wID0gRmlsdGVyRW51bUNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgIC8vICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeSggY29uc3RydWN0b3JDbXAgKTtcclxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRSZWYgPSB0aGlzLmNvbnRhaW5lci5jcmVhdGVDb21wb25lbnQoZmFjdG9yeSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmNvbHVtbiA9IHRoaXMuY29sdW1uO1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5ncm91cCA9IHRoaXMuZ3JvdXA7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmdyaWRJbnN0YW5jZSA9IHRoaXMuZ3JpZEluc3RhbmNlO1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5kaXNhYmxlZCA9IGNvbHVtbkZpbHRlci50eXBlID49IDM7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmRlbGF5ID0gdGhpcy5kZWxheTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdyaWRJbnN0YW5jZS5jb25kaXRpb25zICYmIE9iamVjdC5rZXlzKHRoaXMuZ3JpZEluc3RhbmNlLmNvbmRpdGlvbnMpLmxlbmd0aCApIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuZ3JpZEluc3RhbmNlLmNvbmRpdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuaW5pdEZpbHRlcih0aGlzLmdyaWRJbnN0YW5jZS5jb25kaXRpb25zW3RoaXMuY29sdW1uLmZpZWxkXSk7XHJcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBjbGVhclZhbHVlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudFJlZikge1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5jbGVhclZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=