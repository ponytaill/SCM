/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, Renderer2, ElementRef, NgZone, Injector } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { ComboLookupComponent } from '@farris/ui-combo-lookup';
import { ComboLookupDefaultOptions } from '../editor-default-options';
var DatagridCombolookupComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatagridCombolookupComponent, _super);
    function DatagridCombolookupComponent(render, el, ngzone, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.ngzone = ngzone;
        _this.injector = injector;
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, ComboLookupDefaultOptions, this.options);
        if (this.options.panelWidth === 'auto') {
            this.options.autoWidth = true;
        }
        if (this.options.multiSelect === undefined) {
            if (this.options.singleSelect !== undefined && this.options.singleSelect !== null) {
                this.options.multiSelect = !this.options.singleSelect;
            }
        }
        if (this.formControl && this.formControl.value) {
            this.options.selectedValues = this.formControl.value;
        }
    };
    /**
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.inputElement = this.instance.input.textbox.nativeElement;
        _super.prototype.ngAfterViewInit.call(this);
    };
    // onBeforeShow = () => {
    //     if (this.options.beforeShow) {
    //         return this.options.beforeShow(this);
    //     }
    //     return of(true);
    // }
    // onBeforeHide = () => {
    //     if (this.options.beforeHide) {
    //         return this.options.beforeHide(this);
    //     }
    //     return of(true);
    // }
    // onBeforeShow = () => {
    //     if (this.options.beforeShow) {
    //         return this.options.beforeShow(this);
    //     }
    //     return of(true);
    // }
    // onBeforeHide = () => {
    //     if (this.options.beforeHide) {
    //         return this.options.beforeHide(this);
    //     }
    //     return of(true);
    // }
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.onShowPanel = 
    // onBeforeShow = () => {
    //     if (this.options.beforeShow) {
    //         return this.options.beforeShow(this);
    //     }
    //     return of(true);
    // }
    // onBeforeHide = () => {
    //     if (this.options.beforeHide) {
    //         return this.options.beforeHide(this);
    //     }
    //     return of(true);
    // }
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.showPanel) {
            this.options.showPanel(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.onHidePanel = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.hidePanel) {
            this.options.hidePanel(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.onClear = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.clear) {
            this.options.clear(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.onValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.onSelectChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.selectChange) {
            this.options.selectChange(this.eventPrams($event));
        }
    };
    /**
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.instance.hide();
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.eventPrams = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    };
    DatagridCombolookupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-combolookup',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n        <datagrid-tooltip [control]=\"formControl\" [tooltipPosition]=\"'top-left'\" [message]=\"errorMessage\">\n            <farris-combo-lookup style=\"width: 100%\"\n                #cmblookup\n                [formControlName]=\"column.field\"\n                [idField]=\"options.idField\"\n                [textField]=\"options.textField\"\n                [displayType]=\"options.displayType\"\n                [multiSelect]=\"options.multiSelect\"\n                [mapFields]=\"options.mapFields\"\n                [uri]=\"options.uri\"\n                [nosearch]=\"options.nosearch\"\n                [maxLength]=\"options?.maxLength\"\n                [readonly]= \"options.readonly\"\n                [editable]= \"options.editable\"\n                [autoWidth]=\"options.autoWidth\"\n                [panelWidth]=\"options.panelWidth\"\n                [panelHeight]=\"options.panelHeight\"\n                [enableCancelSelected]=\"options.enableCancelSelected\"\n                [beforeShow]=\"options?.beforeShow\"\n                [beforeHide]=\"options?.beforeHide\"\n                [context]=\"options?.context\"\n                [enableClear]=\"options.enableClear\"\n                [showHeader]=\"options.showHeader\"\n                (showPanel)=\"onShowPanel($event)\"\n                (hidePanel)=\"onHidePanel($event)\"\n                (clear)=\"onClear($event)\"\n                (valueChange)=\"onValueChange($event)\"\n                (selectChange)=\"onSelectChange($event)\"\n                [data]=\"options?.data\"\n                [useTreeView]=\"options?.useTreeView\"\n                [columns]=\"options?.columns\"\n                [enableFullTree]=\"options?.enableFullTree\"\n                [treeToList]=\"options?.treeToList\"\n                [navTreeToList]=\"options?.navTreeToList\"\n            ></farris-combo-lookup>\n        </datagrid-tooltip>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridCombolookupComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    DatagridCombolookupComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['cmblookup',] }]
    };
    return DatagridCombolookupComponent;
}(DatagridBaseEditorDirective));
export { DatagridCombolookupComponent };
if (false) {
    /** @type {?} */
    DatagridCombolookupComponent.prototype.instance;
    /**
     * @type {?}
     * @private
     */
    DatagridCombolookupComponent.prototype.ngzone;
    /** @type {?} */
    DatagridCombolookupComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,