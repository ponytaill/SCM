(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/operators'), require('rxjs'), require('@angular/core'), require('@farris/ui-modal'), require('@farris/ui-messager'), require('@farris/ui-locale'), require('lodash-es'), require('@farris/ui-common'), require('@farris/ui-datagrid'), require('@farris/ui-notify'), require('@farris/ui-multi-select'), require('@angular/forms'), require('@angular/common'), require('@farris/ui-combo-list'), require('@farris/ui-switch'), require('@farris/ui-tooltip'), require('@farris/ui-organization-selector'), require('@farris/smooth-dnd'), require('@farris/ui-language-textbox')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-datagrid-settings', ['exports', 'rxjs/operators', 'rxjs', '@angular/core', '@farris/ui-modal', '@farris/ui-messager', '@farris/ui-locale', 'lodash-es', '@farris/ui-common', '@farris/ui-datagrid', '@farris/ui-notify', '@farris/ui-multi-select', '@angular/forms', '@angular/common', '@farris/ui-combo-list', '@farris/ui-switch', '@farris/ui-tooltip', '@farris/ui-organization-selector', '@farris/smooth-dnd', '@farris/ui-language-textbox'], factory) :
    (global = global || self, factory((global.farris = global.farris || {}, global.farris['ui-datagrid-settings'] = {}), global.rxjs.operators, global.rxjs, global.ng.core, global.uiModal, global.uiMessager, global.uiLocale, global.lodashEs, global.uiCommon, global.uiDatagrid, global.uiNotify, global.uiMultiSelect, global.ng.forms, global.ng.common, global.uiComboList, global.uiSwitch, global.uiTooltip, global.uiOrganizationSelector, global.smoothDnd, global.uiLanguageTextbox));
}(this, function (exports, operators, rxjs, core, uiModal, uiMessager, uiLocale, lodashEs, uiCommon, uiDatagrid, uiNotify, uiMultiSelect, forms, common, uiComboList, uiSwitch, uiTooltip, uiOrganizationSelector, smoothDnd, uiLanguageTextbox) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DatagridSettingsComponent = /** @class */ (function () {
        function DatagridSettingsComponent(cd, inject) {
            this.cd = cd;
            this.inject = inject;
            this.activeTabIndex = 1;
            /**
             * 排序列数据
             */
            this.sortTreeData = [];
            this.sortNames = [];
            this.sortInfo = {};
            /**
             * 显示列数据
             */
            this.viewTreeData = [];
            this.viewColumns = [];
            this.columnFormat = [];
            this.groupField = [];
            this.canSetColumnSort = true;
            this.canSetColumnVisible = true;
            this.enableReset = false;
            this.cancelHandle = new core.EventEmitter();
            this.submitHandle = new core.EventEmitter();
            this.reset = new core.EventEmitter();
            this.concise = new core.EventEmitter();
            this.schemeInfo = null;
            this.searchItems = [];
            this.alignItems = [];
            this.summaryItems = [];
            this.summaryItems2 = [];
            this.messager = this.inject.get(uiMessager.MessagerService, null);
            this.localeSer = this.inject.get(uiLocale.LocaleService);
            this.searchItems = [
                { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
                { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
                { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
            ];
            this.alignItems = [
                { value: 'left', title: this.localeSer.getValue('datagrid.settings.alignLeft') },
                { value: 'center', title: this.localeSer.getValue('datagrid.settings.alignCenter') },
                { value: 'right', title: this.localeSer.getValue('datagrid.settings.alignRight') },
            ];
            this.summaryItems = [
                { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },
                { value: 2, title: this.localeSer.getValue('datagrid.settings.summarySum') },
                { value: 0, title: this.localeSer.getValue('datagrid.settings.summaryMax') },
                { value: 1, title: this.localeSer.getValue('datagrid.settings.summaryMin') },
                { value: 3, title: this.localeSer.getValue('datagrid.settings.summaryAverage') },
                { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },
            ];
            this.summaryItems2 = [
                { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },
                { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },
            ];
        }
        /**
         * @private
         * @return {?}
         */
        DatagridSettingsComponent.prototype.initData = /**
         * @private
         * @return {?}
         */
        function () {
            this.sortNames = this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [];
            this.viewColumns = this.getViewColumns();
            this.sortInfo = this.gridInstance['__sortInfo'] || {};
            this.columnFormat = __spread(this.columns[0]);
            this.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];
        };
        /**
         * @return {?}
         */
        DatagridSettingsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            if (!this.gridInstance.enableScheme) {
                this.initData();
            }
            else {
                if (this.schemeInfo) {
                    this.sortInfo = this.schemeInfo.sortInfo || {};
                    if (this.sortInfo) {
                        this.sortNames = this.sortInfo.sortName || '';
                    }
                    this.viewColumns = this.schemeInfo.viewColumns;
                    this.columnFormat = this.schemeInfo.columnFormat;
                    if (!this.columnFormat) {
                        this.columnFormat = __spread(this.columns[0]);
                    }
                    if (this.schemeInfo.groupField) {
                        if (typeof this.schemeInfo.groupField === 'string') {
                            this.groupField = ((/** @type {?} */ (this.schemeInfo.groupField))).split(',');
                        }
                        else {
                            this.groupField = this.schemeInfo.groupField || [];
                        }
                    }
                    else {
                        this.groupField = [];
                    }
                    return;
                }
                this.initData();
            }
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        DatagridSettingsComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.columns && !changes.columns.isFirstChange()) ;
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        DatagridSettingsComponent.prototype.close = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            $event.stopPropagation();
            if (this.modalRef) {
                this.modalRef.close();
            }
        };
        /**
         * @param {?} $event
         * @param {?} idx
         * @return {?}
         */
        DatagridSettingsComponent.prototype.changeTabs = /**
         * @param {?} $event
         * @param {?} idx
         * @return {?}
         */
        function ($event, idx) {
            $event.stopPropagation();
            this.activeTabIndex = idx;
        };
        /**
         * @param {?} sortInfo
         * @return {?}
         */
        DatagridSettingsComponent.prototype.onSortInfoChange = /**
         * @param {?} sortInfo
         * @return {?}
         */
        function (sortInfo) {
            this.sortInfo = sortInfo;
        };
        /**
         * @private
         * @return {?}
         */
        DatagridSettingsComponent.prototype.getViewColumns = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            // 多表头
            /** @type {?} */
            var visibleCls = [];
            if (this.columns.length > 1) {
                this.columns.forEach((/**
                 * @param {?} cols
                 * @return {?}
                 */
                function (cols) {
                    visibleCls = visibleCls.concat(_this._getViewColumns(cols));
                }));
            }
            else {
                visibleCls = this.columns[0].filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return (n.visible || n.visible === undefined); }));
            }
            return visibleCls.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field; }));
        };
        /**
         * @private
         * @param {?} cols
         * @return {?}
         */
        DatagridSettingsComponent.prototype._getViewColumns = /**
         * @private
         * @param {?} cols
         * @return {?}
         */
        function (cols) {
            return cols.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return !c.colspan && (c.visible || c.visible === undefined); }));
        };
        /**
         * @private
         * @return {?}
         */
        DatagridSettingsComponent.prototype.mergeColumnFormats = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.sortInfo && Object.keys(this.sortInfo).length && this.columnFormat && this.columnFormat.length) {
                var _a = this.sortInfo, sortName = _a.sortName, sortOrder_1 = _a.sortOrder;
                if (sortName && sortName.length) {
                    sortName.forEach((/**
                     * @param {?} n
                     * @param {?} i
                     * @return {?}
                     */
                    function (n, i) {
                        /** @type {?} */
                        var col = _this.columnFormat.find((/**
                         * @param {?} col
                         * @return {?}
                         */
                        function (col) {
                            return col.field === n;
                        }));
                        if (col) {
                            col.sortable = true;
                            col.order = sortOrder_1[i] || 'asc';
                        }
                    }));
                }
            }
        };
        /**
         * @param {?} colFormatData
         * @return {?}
         */
        DatagridSettingsComponent.prototype.onColumnFormatChange = /**
         * @param {?} colFormatData
         * @return {?}
         */
        function (colFormatData) {
            this.columnFormat = colFormatData;
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        DatagridSettingsComponent.prototype.onSubmitClick = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.mergeColumnFormats();
            this.submitHandle.emit($event);
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        DatagridSettingsComponent.prototype.onCancelClick = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.cancelHandle.emit($event);
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        DatagridSettingsComponent.prototype.onSettingReset = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            var _this = this;
            // this.reset.emit($event);
            /** @type {?} */
            var restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
            this.messager.confirm(restorDefaultText).subscribe((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                if (t) {
                    _this.reset2Default();
                }
            }));
        };
        /**
         * @private
         * @return {?}
         */
        DatagridSettingsComponent.prototype.reset2Default = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var options = this.gridInstance.dfs['_state'].initialOptions;
            if (options.columnFields && options.columnFields.length) {
                /** @type {?} */
                var newColumns_1 = [];
                options.columnFields.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    if (c.field !== '_datagrid-setting-control_') {
                        /** @type {?} */
                        var col = _this.gridInstance.columns[0].find((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.field === c.field; }));
                        if (col) {
                            col.visible = c.visible;
                            col.halign = c.halign;
                            col.align = c.align;
                            col.width = c.width;
                            col.footer = __assign({}, c.footer || {});
                            col.groupFooter = __assign({}, c.groupFooter || {});
                            newColumns_1.push(col);
                        }
                    }
                }));
                this.columns = [newColumns_1];
            }
            this.viewColumns = this.getViewColumns();
            if (options.sort) {
                /** @type {?} */
                var sortOrders = options.sort.sortOrder ? options.sort.sortOrder.split(',') : [];
                this.sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];
                this.sortInfo = { sortName: this.sortNames, sortOrder: sortOrders };
            }
            else {
                this.sortNames = [];
                this.sortInfo = {};
            }
            this.columnFormat = __spread(this.columns[0]);
            this.groupField = options.groupField ? options.groupField.split(',') : [];
        };
        /** 显示简洁模式窗口 */
        /**
         * 显示简洁模式窗口
         * @param {?} $event
         * @return {?}
         */
        DatagridSettingsComponent.prototype.showConcise = /**
         * 显示简洁模式窗口
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if ($event) {
                $event.stopPropagation();
            }
            this.mergeColumnFormats();
            this.concise.emit();
        };
        DatagridSettingsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'datagrid-settings',
                        template: "<div class=\"f-datagrid-settings d-flex flex-column\" style=\"height: 100%;\">\r\n\r\n    <div class=\"d-flex justify-content-between header\" #header>\r\n        <div class=\"title\">{{'datagrid.settings.title' | locale}}</div>\r\n\r\n        <div style=\"width: 100%;\" class=\"tabs\">\r\n            <div class=\"d-flex justify-content-center\">\r\n                <div class=\"d-flex tabs-labels\" (mousedown)=\"$event.stopPropagation()\">\r\n                    <div class=\"navitem\" [class.active]=\"activeTabIndex === 1\" (click)=\"changeTabs($event, 1)\"\r\n                        style=\"border: 0;\">\r\n                        <span style=\"padding: 0 14px;display: block;\">\r\n                            {{'datagrid.settings.visible' | locale}}\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"navitem\" *ngIf=\"canSetColumnSort\" [class.active]=\"activeTabIndex === 2 && canSetColumnSort\" (click)=\"changeTabs($event, 2)\" style=\"border: 0;\">\r\n                        <span style=\"padding: 0 14px;display: block;\">\r\n                            {{'datagrid.settings.sortting' | locale}}\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"navitem\" *ngIf=\"gridInstance?.groupRows\"\r\n                        [class.active]=\"activeTabIndex === 3\" (click)=\"changeTabs($event, 3)\" style=\"border: 0;\">\r\n                        <span style=\"padding: 0 14px; display: block;\">\r\n                            {{'datagrid.settings.groupping' | locale}}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"close\">\r\n            <span class=\"f-icon modal_close\" (click)=\"close($event)\"></span>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-utils-fill tabs-container\" [ngSwitch]=\"activeTabIndex\" >\r\n        <ng-container *ngSwitchCase=\"1\">\r\n            <column-format-setting [(fields)]=\"viewColumns\" [columns]=\"columns\"\r\n                (formatChange)=\"onColumnFormatChange($event)\"></column-format-setting>\r\n        </ng-container>\r\n        <ng-container *ngSwitchCase=\"2\">\r\n            <sort-setting [treeData]=\"sortTreeData\" [selectedIds]=\"sortNames\"\r\n                (sortInfoChange)=\"onSortInfoChange($event)\"></sort-setting>\r\n        </ng-container>\r\n\r\n        <ng-container *ngSwitchCase=\"3\">\r\n            <column-group-setting [(groupFields)]=\"groupField\" [fields]=\"viewColumns\" [columns]=\"columns\"\r\n                [(formatColumns)]=\"columnFormat\"></column-group-setting>\r\n        </ng-container>\r\n    </div>\r\n\r\n    <div class=\"buttons\">\r\n        <button class=\"btn btn-link\" (click)=\"showConcise($event)\" *ngIf=\"gridInstance.enableSimpleMode\"\r\n            style=\"width: 66px;height: 32px; float: left;\">{{ 'datagrid.settings.conciseMode' | locale: '\u7B80\u6D01\u6A21\u5F0F' }}</button>\r\n        <button class=\"btn btn-link reset\" (click)=\"onSettingReset($event)\"\r\n            *ngIf=\"enableReset\">{{ 'datagrid.settings.reset' | locale: '\u6062\u590D\u9ED8\u8BA4' }}</button>\r\n        <button class=\"btn btn-secondary cancel\"\r\n            (click)=\"onCancelClick($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n        <button class=\"btn btn-primary ok\"\r\n            (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n    </div>\r\n\r\n</div>",
                        encapsulation: core.ViewEncapsulation.None,
                        styles: ["\n\n        .f-datagrid-settings .header {\n            position:relative;width:100%; height: 56px;padding: 0 24px;border:0px\n        }\n\n        .f-datagrid-settings .header .title {\n            display: block; white-space: nowrap; font-size: 17px; line-height: 56px;\n        }\n        .f-datagrid-settings .header .tabs {\n            height: 32px;\n            top: 12px; font-size: 14px;\n            position: relative;\n            line-height: 32px;\n        }\n        .f-datagrid-settings .header .tabs .tabs-labels {\n            background: #EFF5FF;border-radius: 17px;color:#6080AD\n        }\n\n        .f-datagrid-settings .header .tabs .tabs-labels .navitem.active {\n            line-height: 28px;\n            margin: 2px;\n            height: 28px;\n            background: rgb(246 250 255);\n            border-radius: 15px;\n            box-shadow: 0 4px 18px 0 rgb(2 75 193 / 20%)\n        }\n        .f-datagrid-settings .header .close {\n            line-height: 56px;padding: 0;width: 20px\n        }\n        .f-datagrid-settings .tabs-container {\n            height: 100%;overflow: hidden; position: relative; margin: 0 24px; border: 1px solid #DEE1EA; border-radius: 8px;\n        }\n        .f-datagrid-settings .buttons\n        {\n            height: 66px;text-align: right;padding: 14px 24px 20px 24px;\n        }\n\n        .f-datagrid-settings .buttons button {\n            width: 66px;height: 32px;\n        }\n        .f-datagrid-settings .buttons .cancel {\n            margin-left: 12px;margin-right: 8px;\n        }\n        .f-datagrid-settings .buttons .ok {\n            width: 100px;\n        }\n\n        .f-datagrid-settings .dg-column-format-setting>div{\n            width: 360px; min-width:260px;overflow: hidden;background:#ffffff;padding: 10px 5px 10px 8px;border-right: 1px solid #DEE1EA\n        }\n\n        .f-datagrid-settings .dg-column-format-setting .checkbox, .format-setting-column .checkbox{\n            margin-right: 5px; font-size: 14px;color: #0089FF;\n        }\n\n        .f-datagrid-settings  .column-group-setting .title{\n            height: 36px; line-height: 36px; color: #59a1ff\n        }\n\n        .f-datagrid-settings  .column-group-setting .all-fields {\n            background-color:#fff;padding-top: 0px!important;\n        }\n\n        .f-datagrid-settings  .column-group-setting .group-sum-fields {\n            height: 36px; line-height: 36px; border-top: 1px solid #e4e7ef; color: #59a1ff\n        }\n\n\n        .smooth-dnd-ghost.format-setting-column {\n            border: 1px solid #2a87ff;\n            z-index: 999999999 !important;\n            background-color: #e7f1ff;;\n            padding: 4px 8px;\n            color: rgb(0 0 0);\n        }\n\n        .smooth-dnd-ghost.format-setting-column .field-drag-handle {\n            float: right;\n        }\n\n        .dg-column-format-setting  .smooth-dnd-drop-preview-constant-class {\n            background-color: #dee1ea;\n        }\n        .dg-column-format-setting .format-setting-column {\n            background: #fafbfd;\n            padding: 4px 8px;\n            margin-bottom: 5px;\n            border: 1px solid #f2f4f8;\n            border-radius: 5px;\n        }\n        .dg-column-format-setting .format-setting-column.active {\n            color: rgb(0 0 0);\n            border: 1px solid #2a87ff;\n            background: #e7f1ff;\n            border-top: 1px solid #2a87ff!important;\n            border-bottom: 1px solid #2a87ff!important;\n        }\n\n        .dg-column-format-setting .format-setting-column .field-drag-handle{\n            float: right;\n            cursor: grab;\n        }\n\n        .dg-column-format-setting .format-setting-column .field-drag-handle:active{\n            cursor: grabbing;\n        }\n\n        "]
                    }] }
        ];
        /** @nocollapse */
        DatagridSettingsComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: core.Injector }
        ]; };
        DatagridSettingsComponent.propDecorators = {
            enableReset: [{ type: core.Input }],
            columns: [{ type: core.Input }],
            cancelHandle: [{ type: core.Output }],
            submitHandle: [{ type: core.Output }],
            reset: [{ type: core.Output }],
            concise: [{ type: core.Output }],
            schemeInfo: [{ type: core.Input }],
            header: [{ type: core.ViewChild, args: ['header',] }]
        };
        return DatagridSettingsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} valObj
     * @param {?} localeId
     * @return {?}
     */
    function getMultilingualValue(valObj, localeId) {
        if (valObj && typeof valObj === 'object' && Object.keys(valObj).length > 0) {
            localeId = localeId || 'zh-CHS';
            /** @type {?} */
            var val = valObj[localeId];
            if (val !== undefined) {
                return val;
            }
            else {
                console.log("can not find '" + localeId + "' in ", valObj);
                return '';
            }
        }
        else {
            return '';
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SimpleColumnsComponent = /** @class */ (function () {
        function SimpleColumnsComponent(injector, cd) {
            this.injector = injector;
            this.cd = cd;
            this.enableScheme = false;
            this.seartTypes = [];
            /**
             * 所有列
             */
            this.columns = [];
            /**
             * 显示的列
             */
            this.fields = [];
            /**
             * 点击侧边样式以外的区域隐藏面板。默认为 true
             */
            this.clickToHidden = true;
            this.top = 0;
            this._schemeList = [];
            this.cls = 'f-datagrid-settings-simple-host';
            this.formatChange = new core.EventEmitter();
            this.fieldsChange = new core.EventEmitter();
            this.submit = new core.EventEmitter();
            this.closed = new core.EventEmitter();
            this.advanced = new core.EventEmitter();
            this.addNewScheme = new core.EventEmitter();
            this.showSchemeList = new core.EventEmitter();
            this.activeItemChange = new core.EventEmitter();
            this.allCols = [];
            this.columnType = 'all';
            this.isEn = false;
            this.showSchemePanel = false;
            this.switchValue = false;
            // 当前方案
            this.currentSchemeItem = null;
            this.searchResultIsVisibleAll = false;
            this.defaultSchemeName = '系统预制';
            this.settings = {};
            this.localeSer = this.injector.get(uiLocale.LocaleService, null);
            this.messager = this.injector.get(uiMessager.MessagerService, null);
        }
        Object.defineProperty(SimpleColumnsComponent.prototype, "schemeList", {
            get: /**
             * @return {?}
             */
            function () {
                return this._schemeList;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                var _this = this;
                if (val && val.length) {
                    val.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        n['_title_'] = getMultilingualValue(JSON.parse(n.name), _this.localeSer.localeId);
                    }));
                }
                this._schemeList = val || [];
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} $event
         * @return {?}
         */
        SimpleColumnsComponent.prototype.onClick = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            // console.log($event);
            $event.stopPropagation();
            /** @type {?} */
            var clsname = $event.target['className'] || '';
            if (clsname.indexOf('f-datagrid-settings-simple-host') > -1) {
                // 隐藏侧边栏；
                if (this.clickToHidden) {
                    this.close();
                }
            }
            this.showSchemePanel = false;
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        SimpleColumnsComponent.prototype.onEscKeydown = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            $event.stopPropagation();
            if (!document.querySelector('modal-container')) {
                this.close();
            }
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        SimpleColumnsComponent.prototype.onEnterKeydown = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            $event.stopPropagation();
            if (!document.querySelector('modal-container')) {
                this.onSubmitClick();
            }
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        SimpleColumnsComponent.prototype.onControlGKeydown = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if ($event.ctrlKey && !document.querySelector('modal-container')) {
                $event.preventDefault();
                $event.stopPropagation();
                if ($event.key.toLowerCase() === 'g') {
                    this.showAdvanced($event);
                }
                else if ($event.key.toLowerCase() === 'r') {
                    this.onSettingReset();
                }
                else if ($event.key.toLowerCase() === 's') {
                    this.searchInput.nativeElement.focus();
                }
            }
        };
        /**
         * @private
         * @return {?}
         */
        SimpleColumnsComponent.prototype.getCurrentSchemeSettings = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.currentSchemeItem) {
                /** @type {?} */
                var schemeSettings = JSON.parse(this.currentSchemeItem.queryConditionString);
                return (/** @type {?} */ (schemeSettings[this.localeSer.localeId]));
            }
            return null;
        };
        /**
         * @return {?}
         */
        SimpleColumnsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.allCols = this.columns[0];
            if (this.gridInstance.enableScheme && this.currentSchemeItem) {
                this.settings = this.getCurrentSchemeSettings() || {};
            }
            if (this.settings && this.settings.viewColumns && this.settings.viewColumns.length) {
                this.fields = this.settings.viewColumns;
                this.dirtySettings(true);
            }
            else {
                this.fields = this.getViewColumns();
            }
            this.container.nativeElement.focus();
            this.defaultSchemeName = this.localeSer.getValue('datagrid.scheme.syspreset') || this.gridInstance.defaultSchemeName;
        };
        /**
         * @private
         * @return {?}
         */
        SimpleColumnsComponent.prototype.getViewColumns = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            // 多表头
            /** @type {?} */
            var visibleCls = [];
            if (this.columns.length > 1) {
                this.columns.forEach((/**
                 * @param {?} cols
                 * @return {?}
                 */
                function (cols) {
                    visibleCls = visibleCls.concat(_this._getViewColumns(cols));
                }));
            }
            else {
                visibleCls = this.columns[0].filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return (n.visible || n.visible === undefined); }));
            }
            return visibleCls.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field; }));
        };
        /**
         * @private
         * @param {?} cols
         * @return {?}
         */
        SimpleColumnsComponent.prototype._getViewColumns = /**
         * @private
         * @param {?} cols
         * @return {?}
         */
        function (cols) {
            return cols.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return !c.colspan && (c.visible || c.visible === undefined); }));
        };
        // 根据列的类型进行筛选过滤，
        // all 所有列
        // visible 可见列
        // hidden 隐藏列
        // group 分组列
        // 根据列的类型进行筛选过滤，
        // all 所有列
        // visible 可见列
        // hidden 隐藏列
        // group 分组列
        /**
         * @param {?=} searchWords
         * @return {?}
         */
        SimpleColumnsComponent.prototype.filterColumns = 
        // 根据列的类型进行筛选过滤，
        // all 所有列
        // visible 可见列
        // hidden 隐藏列
        // group 分组列
        /**
         * @param {?=} searchWords
         * @return {?}
         */
        function (searchWords) {
            var _this = this;
            if (searchWords === void 0) { searchWords = ''; }
            /** @type {?} */
            var cols = [];
            if (this.switchValue) {
                cols = this.columns[0].filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return _this.fields.indexOf(n.field) > -1; }));
            }
            else {
                cols = this.columns[0];
            }
            if (searchWords) {
                cols = cols.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.title.toLowerCase().indexOf(searchWords.toLowerCase()) > -1; }));
            }
            this.allCols = cols;
        };
        /**
         * @private
         * @return {?}
         */
        SimpleColumnsComponent.prototype.onFieldsChanged = /**
         * @private
         * @return {?}
         */
        function () {
            if (!this.gridInstance.enableScheme) {
                this.fieldsChange.emit(this.fields);
            }
        };
        /**
         * @param {?} $event
         * @param {?} col
         * @return {?}
         */
        SimpleColumnsComponent.prototype.onDblClick = /**
         * @param {?} $event
         * @param {?} col
         * @return {?}
         */
        function ($event, col) {
            // console.log('显示与隐藏切换事件', col);
            this.onCheckboxClick($event, col);
        };
        /**
         * @param {?} $event
         * @param {?} col
         * @return {?}
         */
        SimpleColumnsComponent.prototype.onCheckboxClick = /**
         * @param {?} $event
         * @param {?} col
         * @return {?}
         */
        function ($event, col) {
            // console.log('显示与隐藏切换事件', col);
            $event.stopPropagation();
            this.showSchemePanel = false;
            /** @type {?} */
            var checked = false;
            /** @type {?} */
            var index = this.fields.indexOf(col.field);
            if (index === -1) {
                this.fields.push(col.field);
                checked = true;
            }
            else {
                this.fields.splice(index, 1);
                checked = false;
            }
            /** @type {?} */
            var item = this.columns[0].find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field === col.field; }));
            if (item) {
                item.visible = checked;
            }
            // this.columns[0].forEach(f => {
            //     f.visible = this.fields.indexOf(f.field) > -1;
            // });
            this.fields = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible; })).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field; }));
            this.searchResultIsVisibleAll = this.allCols.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible; })).length === this.allCols.length;
            this.dirtySettings(true);
            this.onFieldsChanged();
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        SimpleColumnsComponent.prototype.searchColumn = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            /** @type {?} */
            var txt = $event.target.value;
            this.filterColumns(txt);
        };
        /**
         * @param {?} fieldInfo
         * @param {?} txt
         * @param {?} ulElRef
         * @return {?}
         */
        SimpleColumnsComponent.prototype.onFieldDrop = /**
         * @param {?} fieldInfo
         * @param {?} txt
         * @param {?} ulElRef
         * @return {?}
         */
        function (fieldInfo, txt, ulElRef) {
            var _a;
            this.showSchemePanel = false;
            // console.log('drop', fieldInfo);
            var removedIndex = fieldInfo.removedIndex, addedIndex = fieldInfo.addedIndex;
            /** @type {?} */
            var moveItem = this.allCols[removedIndex];
            /** @type {?} */
            var targetItem = this.allCols[addedIndex];
            /** @type {?} */
            var moveItemIndex = this.columns[0].findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field === moveItem.field; }));
            /** @type {?} */
            var targetItemIndex = this.columns[0].findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field === targetItem.field; }));
            /** @type {?} */
            var removedItem = this.columns[0].splice(moveItemIndex, 1);
            (_a = this.columns[0]).splice.apply(_a, __spread([targetItemIndex, 0], removedItem));
            this.fields = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible; })).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field; }));
            this.onFieldsChanged();
            this.filterColumns(txt);
        };
        /**
         * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
         */
        /**
         * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
         * @private
         * @return {?}
         */
        SimpleColumnsComponent.prototype.getCheckAllState = /**
         * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
         * @private
         * @return {?}
         */
        function () {
            if (!this.searchInput.nativeElement.value) {
                if (this.fields.length === 0) {
                    return 0;
                }
                else {
                    if (this.fields.length === this.columns[0].length) {
                        return 1;
                    }
                    return 2;
                }
            }
            else {
                /** @type {?} */
                var visibleLen = this.allCols.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.visible; })).length;
                if (visibleLen === this.allCols.length) {
                    return 1;
                }
                else {
                    if (visibleLen < this.allCols.length) {
                        if (visibleLen === 0) {
                            return 0;
                        }
                        return 1;
                    }
                }
            }
        };
        // 全选
        // 全选
        /**
         * @param {?} $event
         * @param {?} txt
         * @return {?}
         */
        SimpleColumnsComponent.prototype.onCheckAllClick = 
        // 全选
        /**
         * @param {?} $event
         * @param {?} txt
         * @return {?}
         */
        function ($event, txt) {
            var _this = this;
            $event.stopPropagation();
            this.showSchemePanel = false;
            /** @type {?} */
            var state = this.getCheckAllState();
            /** @type {?} */
            var isCheckAll = state === 0 || state === 2;
            if (!txt) {
                this.columns[0].forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.visible = isCheckAll; }));
            }
            else {
                this.columns[0].forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    /** @type {?} */
                    var item = _this.allCols.find((/**
                     * @param {?} a
                     * @return {?}
                     */
                    function (a) { return n.field == a.field; }));
                    if (item) {
                        n.visible = isCheckAll;
                        item.visible = isCheckAll;
                    }
                }));
            }
            this.fields = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible; })).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field; }));
            this.searchResultIsVisibleAll = this.allCols.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible; })).length === this.allCols.length;
            this.dirtySettings(true);
            this.onFieldsChanged();
            this.filterColumns(txt);
        };
        /**
         * @param {?=} $event
         * @return {?}
         */
        SimpleColumnsComponent.prototype.close = /**
         * @param {?=} $event
         * @return {?}
         */
        function ($event) {
            if ($event) {
                $event.stopPropagation();
            }
            this.closed.emit();
        };
        // 打开高级设置窗口
        // 打开高级设置窗口
        /**
         * @param {?} $event
         * @return {?}
         */
        SimpleColumnsComponent.prototype.showAdvanced = 
        // 打开高级设置窗口
        /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.close($event);
            this.advanced.emit({ viewFields: this.fields });
        };
        // 恢复默认
        // 恢复默认
        /**
         * @param {?=} $event
         * @return {?}
         */
        SimpleColumnsComponent.prototype.onSettingReset = 
        // 恢复默认
        /**
         * @param {?=} $event
         * @return {?}
         */
        function ($event) {
            var _this = this;
            if ($event) {
                $event.stopPropagation();
            }
            this.showSchemePanel = false;
            /** @type {?} */
            var restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
            this.messager.confirm(restorDefaultText).subscribe((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                if (t) {
                    _this.reset2Default();
                    _this.dirtySettings(true);
                }
            }));
        };
        /**
         * @private
         * @return {?}
         */
        SimpleColumnsComponent.prototype.reset2Default = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var options = this.gridInstance.dfs['_state'].initialOptions;
            if (options.columnFields && options.columnFields.length) {
                /** @type {?} */
                var newColumns_1 = [];
                options.columnFields.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    if (c.field !== '_datagrid-setting-control_') {
                        /** @type {?} */
                        var col = _this.gridInstance.columns[0].find((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.field === c.field; }));
                        if (col) {
                            col.visible = c.visible;
                            col.halign = c.halign;
                            col.align = c.align;
                            col.width = c.width;
                            col.footer = __assign({}, c.footer || {});
                            col.groupFooter = __assign({}, c.groupFooter || {});
                            newColumns_1.push(col);
                        }
                    }
                }));
                this.columns = [newColumns_1];
            }
            this.allCols = this.columns[0];
            this.settings = {};
            this.fields = this.getViewColumns();
            this.settings.viewColumns = this.fields;
            this.settings.columnFormat = __spread(this.columns[0]);
            if (options.sort) {
                /** @type {?} */
                var sortOrders = options.sort.sortOrder ? options.sort.sortOrder.split(',') : [];
                /** @type {?} */
                var sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];
                this.settings.sortInfo = { sortName: sortNames, sortOrder: sortOrders };
            }
            else {
                this.settings.sortInfo = {};
            }
            this.settings.groupField = options.groupField ? options.groupField.split(',') : [];
        };
        // 确定按钮点击事件
        // 确定按钮点击事件
        /**
         * @param {?=} $event
         * @return {?}
         */
        SimpleColumnsComponent.prototype.onSubmitClick = 
        // 确定按钮点击事件
        /**
         * @param {?=} $event
         * @return {?}
         */
        function ($event) {
            if ($event) {
                $event.stopPropagation();
            }
            this.showSchemePanel = false;
            this.settings.viewColumns = this.fields;
            if (!this.enableScheme || !this.currentSchemeItem) {
                if (!this.settings.columnFormat) {
                    this.settings.columnFormat = __spread(this.columns[0]);
                }
                if (!this.settings.sortInfo) {
                    this.settings.sortInfo = {
                        sortName: this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [],
                        sortOrder: this.gridInstance.sortOrder ? this.gridInstance.sortOrder.split(',') : []
                    };
                }
                if (this.settings.groupField === undefined) {
                    this.settings.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];
                }
            }
            else {
                /** @type {?} */
                var _settings = this.getCurrentSchemeSettings();
                if (_settings) {
                    this.settings = Object.assign(_settings || {}, this.settings);
                }
            }
            // this.activeItemChange.emit(this.activeSchemeItem);
            this.submit.emit({ content: this.settings, close: this.close.bind(this), target: this.btnOk.nativeElement, currentScheme: this.currentSchemeItem });
        };
        // 显示下拉方案列表
        // 显示下拉方案列表
        /**
         * @param {?} $event
         * @return {?}
         */
        SimpleColumnsComponent.prototype.onChooseScheme = 
        // 显示下拉方案列表
        /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            var _this = this;
            if ($event) {
                $event.stopPropagation();
            }
            this.showSchemePanel = !this.showSchemePanel;
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.schemeitemsEleRef && _this.currentSchemeItem) {
                    /** @type {?} */
                    var itemEl = _this.schemeitemsEleRef.nativeElement.querySelector("#schemeitem_" + _this.currentSchemeItem.id);
                    if (itemEl) {
                        if (itemEl.scrollIntoViewIfNeeded) {
                            itemEl.scrollIntoViewIfNeeded();
                        }
                        else {
                            itemEl.scrollIntoView();
                        }
                    }
                }
            }));
        };
        // 仅显示可见列
        // 仅显示可见列
        /**
         * @param {?} $event
         * @return {?}
         */
        SimpleColumnsComponent.prototype.onlySeeVisibleColumns = 
        // 仅显示可见列
        /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.switchValue = $event;
            this.filterColumns();
        };
        // 新增方案
        // 新增方案
        /**
         * @param {?} $event
         * @return {?}
         */
        SimpleColumnsComponent.prototype.onNewSchemeClick = 
        // 新增方案
        /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if ($event) {
                $event.stopPropagation();
            }
            this.showSchemePanel = false;
            this.addNewScheme.emit();
        };
        // 显示方案列表管理窗口
        // 显示方案列表管理窗口
        /**
         * @param {?} $event
         * @return {?}
         */
        SimpleColumnsComponent.prototype.onShowSchemeList = 
        // 显示方案列表管理窗口
        /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if ($event) {
                $event.stopPropagation();
            }
            this.showSchemePanel = false;
            this.showSchemeList.emit();
        };
        // 方案点击
        // 方案点击
        /**
         * @param {?} $event
         * @param {?} item
         * @return {?}
         */
        SimpleColumnsComponent.prototype.onSchemeItemClick = 
        // 方案点击
        /**
         * @param {?} $event
         * @param {?} item
         * @return {?}
         */
        function ($event, item) {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.currentSchemeItem = item;
                _this.showSchemePanel = false;
                /** @type {?} */
                var schemeSettings = null;
                if (item) {
                    schemeSettings = JSON.parse(item.queryConditionString);
                    schemeSettings = schemeSettings[_this.localeSer.localeId];
                    if (!schemeSettings) {
                        _this.reset2Default();
                    }
                    else {
                        _this.settings = schemeSettings;
                        _this.fields = schemeSettings.viewColumns;
                    }
                }
                else {
                    _this.reset2Default();
                }
                _this.cd.detectChanges();
            }));
        };
        /**
         * @param {?} flag
         * @return {?}
         */
        SimpleColumnsComponent.prototype.dirtySettings = /**
         * @param {?} flag
         * @return {?}
         */
        function (flag) {
            // this.isChanged = flag;
        };
        SimpleColumnsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'datagrid-settings-simple',
                        template: "<div class=\"d-flex flex-column f-datagrid-settings-simple\" tabindex=\"0\" #colcontainer\r\n    [style.top.px]=\"top\" [style.height]=\"'calc(100vh - ' +  top + 'px)'\" >\r\n\r\n    <div class=\"header d-flex\">\r\n        <div class=\"f-utils-fill title d-flex flex-row\"> {{ 'datagrid.settings.simple.title' | locale }} \r\n            <button #btnSchemeName class=\"btn ml-3 px-2 scheme-name d-flex flex-row\"  *ngIf=\"enableScheme\" (click)=\"onChooseScheme($event)\">\r\n                <!-- <span *ngIf=\"isChanged\">*</span> -->\r\n                <span>{{ currentSchemeItem? currentSchemeItem._title_ : defaultSchemeName }}</span>\r\n                <span class=\"f-icon f-icon-arrow-s ml-2\" style=\"font-size: 12px;\"></span>\r\n            </button>\r\n        </div>\r\n        <div class=\"closed\" (click)=\"close($event)\">\r\n            <span class=\"f-icon f-icon-close\" style=\"font-size: 20px;\"></span>\r\n        </div>\r\n    </div>\r\n    <div class=\"scheme-manager-dropdown\" [style.display]=\"showSchemePanel? '': 'none'\" [style.left.px]=\"btnRef? btnRef.nativeElement.offsetLeft : 97\"  (click)=\"$event.stopPropagation()\">\r\n        <div class=\"f-utils-fill f-utils-flex-column m-2\">\r\n            <div class=\"pb-2\" style=\"max-height: calc(100vh - 300px);overflow: auto\">\r\n                <ul #schemeitems>\r\n                    <li class=\"scheme-manager__item\" [class.active]=\"!currentSchemeItem\" (click)=\"onSchemeItemClick($event, null)\"> \r\n                        <!-- <span *ngIf=\"isChanged && !activeSchemeItem\">*</span> -->\r\n                        {{'datagrid.scheme.syspreset' | locale}}\r\n                    </li>\r\n                    <li [attr.id]=\"'schemeitem_'+ item.id\" class=\"scheme-manager__item d-flex flex-row\" \r\n                        [class.active]=\"currentSchemeItem && currentSchemeItem?.id === item.id\"  \r\n                        *ngFor=\"let item of schemeList\" (click)=\"onSchemeItemClick($event, item)\" title=\"{{item._title_}}\">\r\n                        <!-- <span *ngIf=\"isChanged && activeSchemeItem?.id==item.id\">*</span> -->\r\n                        <span class=\"f-utils-fill mr-1\" style=\"text-overflow: ellipsis;\">{{item._title_}}</span>\r\n                        <span class=\"scheme-manager__label default\" *ngIf=\"item.isDefault\">{{'datagrid.scheme.isDefault' | locale}}</span>\r\n                        <span class=\"scheme-manager__label public\" *ngIf=\"item.type === 'public'\">{{'datagrid.scheme.isPublic' | locale}}</span>\r\n                        <span class=\"scheme-manager__label private\" *ngIf=\"!item.isDefault && item.type === 'private'\">{{'datagrid.scheme.isPrivate' | locale}}</span>\r\n                        <span class=\"scheme-manager__label org\" *ngIf=\"item.type === 'org'\">{{'datagrid.scheme.isOrg' | locale}}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div class=\"d-flex scheme-manager__button-add\">\r\n                <button (click)=\"onNewSchemeClick($event)\">\r\n                    <span class=\"f-icon f-icon-plus\"></span>{{'datagrid.scheme.newScheme' | locale}}\r\n                </button>\r\n            </div>\r\n\r\n            <div class=\"p-2 mt-2\">\r\n                <div class=\"btn-toolbar\" style=\"justify-content: flex-end;\">\r\n                    <button class=\"btn btn-link mr-3\" (click)=\"onShowSchemeList($event)\">{{'datagrid.scheme.mgrScheme' | locale}}</button>\r\n                    <button class=\"btn btn-primary mr-1\" (click)=\"onNewSchemeClick($event)\">{{'datagrid.scheme.saveas' | locale}} </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"f-utils-fill content d-flex flex-column\">\r\n        <div>\r\n            <div class=\"d-flex flex-row mb-2\" style=\"align-items: center;\">\r\n                <h5 class=\"count f-utils-fill m-0\" [innerHTML]=\"'datagrid.settings.simple.count' | locale | replaceX: fields.length\"></h5>\r\n                <div class=\"d-flex flex-row\">{{'datagrid.scheme.onlyshowcolumns' | locale}} \r\n                    <farris-switch style=\"position: relative;\r\n                    top: 2px;\r\n                    margin-left: 5px;\"\r\n                    id=\"only-visible-columns\"\r\n                    [square]=\"false\" [size]=\"'small'\"\r\n                    [ngModel]=\"switchValue\" \r\n                    (valueChange)=\"onlySeeVisibleColumns($event)\"\r\n                    ></farris-switch></div>\r\n            </div>\r\n\r\n            <div class=\"tip\">\r\n                {{ 'datagrid.settings.simple.tip' | locale }}\r\n            </div>\r\n            <div class=\"input-group mb-2 scheme-manager__search-box\">\r\n                <input #inputWord type=\"text\" class=\"form-control\" placeholder=\"{{'datagrid.settings.searchPlaceholder' | locale}}\"\r\n                (input)=\"searchColumn($event)\" style=\"height: 26px;\">\r\n                <div  class=\"input-group-append\">\r\n                    <span  class=\"fa f-icon-search\"></span>\r\n                </div>\r\n            </div>\r\n            \r\n\r\n            <div style=\"padding: 5px 0px;\">\r\n                <button class=\"btn btn-link \" style=\"height: 32px;padding-left: 4px;\" (click)=\"onCheckAllClick($event,inputWord.value)\">\r\n                    <span class=\"f-icon f-icon-minus-outline checkall\" [class.f-icon-checkbox]=\"!fields.length\"\r\n                        [class.f-icon-checkbox-checked]=\" searchInput.nativeElement.value ?  searchResultIsVisibleAll : fields.length === allCols.length\"></span>\r\n                    {{ 'datagrid.settings.checkall' | locale }}\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <div style=\"overflow: auto;padding-right:3px\" class=\"f-utils-fill\">\r\n            <ul class=\"list-group list-group-flush\" #ul column-visible-drag (drop)=\"onFieldDrop($event, inputWord.value, ul)\">\r\n                <li class=\"list-group-item list-group-item-action smooth-dnd-draggable-wrapper format-setting-column\" *ngFor=\"let col of allCols\" \r\n                    (click)=\"onDblClick($event, col)\">\r\n                    <span class=\"f-icon checkbox\"\r\n                        [class.f-icon-checkbox-checked]=\"fields.indexOf(col.field) > -1\"\r\n                        [class.f-icon-checkbox]=\"fields.indexOf(col.field) == -1\"\r\n                        (click)=\"onCheckboxClick($event, col)\"></span>\r\n                    {{ col.title}} \r\n\r\n                    <span class=\"f-icon f-icon-drag-vertical field-drag-handle\"></span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n    </div>\r\n    <div class=\"footer\">\r\n\r\n        <div class=\"buttons\">\r\n            <button class=\"btn btn-link advanced\" (click)=\"showAdvanced($event)\">{{ 'datagrid.settings.advancedMode' | locale: '\u9AD8\u7EA7\u6A21\u5F0F' }}</button>\r\n            <button class=\"btn btn-link reset\" (click)=\"onSettingReset($event)\">{{ 'datagrid.settings.reset' | locale: '\u6062\u590D\u9ED8\u8BA4' }}</button>\r\n            <button class=\"btn btn-secondary cancel\"\r\n                (click)=\"close($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n            <button class=\"btn btn-primary ok\" #okbtn\r\n                (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n",
                        encapsulation: core.ViewEncapsulation.None,
                        styles: [".f-datagrid-settings-simple{position:fixed;top:100px;right:-500px;z-index:10000;height:calc(100vh - 100px);width:468px;background:#fff;border:1px solid #e6e9f0;border-radius:10px 0 0 10px;transition:right .3s}.f-datagrid-settings-simple:focus{outline:0}.f-datagrid-settings-simple .header{height:50px;line-height:50px;border-bottom:1px solid #eaedf3;font-size:18px;color:#2d2f33}.f-datagrid-settings-simple .header .scheme-name{border-radius:6px;color:#2a87ff;background:#ebf4ff;height:28px;align-items:center}.f-datagrid-settings-simple .header .title{padding-left:21px;font-weight:700;align-items:center}.f-datagrid-settings-simple .header .closed{width:50px;text-align:center;cursor:pointer}.f-datagrid-settings-simple .content .count{font-size:14px;color:#2d2f33}.f-datagrid-settings-simple .content .tip{background:#f7faff;border-radius:6px;line-height:20px;margin-bottom:10px;min-height:42px;align-items:center;display:flex;padding:5px}.f-datagrid-settings-simple .content .checkall{margin-left:5px;font-size:14px;color:#0089ff;margin-right:5px}.f-datagrid-settings-simple .content{margin:20px 24px}.f-datagrid-settings-simple .footer{height:32px;margin:20px}.smooth-dnd-ghost.format-setting-column{z-index:999999999!important;padding:4px 8px;background-color:#e7f1ff;border:1px solid #2a87ff}.smooth-dnd-ghost.format-setting-column .field-drag-handle{float:right}.f-datagrid-settings-simple .smooth-dnd-drop-preview-constant-class{background-color:#dee1ea}.f-datagrid-settings-simple .format-setting-column{background:#fafbfd;padding:4px 8px;margin-bottom:5px;border:1px solid #f2f4f8;border-radius:5px;color:#000}.f-datagrid-settings-simple .format-setting-column.active{border:1px solid #2a87ff;background:#e7f1ff;border-top:1px solid #2a87ff!important;border-bottom:1px solid #2a87ff!important}.format-setting-column .checkbox{font-size:14px;color:#0089ff;margin-right:5px;cursor:pointer}.f-datagrid-settings-simple .format-setting-column .field-drag-handle{float:right;cursor:-webkit-grab;cursor:grab}.f-datagrid-settings-simple .format-setting-column .field-drag-handle:active{cursor:-webkit-grabbing;cursor:grabbing}.f-datagrid-settings-simple .list-group-flush:last-child .list-group-item:last-child{border-bottom:1px solid #f2f4f8}.f-datagrid-settings-simple .list-group-flush:first-child .list-group-item:first-child{border-top:1px solid #f2f4f8}.f-datagrid-settings-simple .buttons{text-align:right}.f-datagrid-settings-simple .buttons button{width:66px;height:32px}.f-datagrid-settings-simple .buttons .cancel{margin-left:12px;margin-right:8px}.f-datagrid-settings-simple .buttons .ok{width:100px}.f-datagrid-settings-simple .buttons .advanced{width:66px;height:32px;float:left}.f-datagrid-settings-simple-host{width:100%;height:100%;position:absolute;top:0;left:0;z-index:1000}.f-datagrid-settings-simple .visible-cols-count{font-size:18px;font-weight:500}.scheme-manager-dropdown{z-index:1000;position:absolute;top:50px;width:230px;border-radius:10px;background-color:#fff;border:1px solid #eaedf3;left:95px;box-shadow:0 2px 12px 0 #d8dce6}.scheme-manager-dropdown::before{content:\"\";position:absolute;border:10px solid #0000;bottom:100%;left:20px;border-bottom-color:#e3e3e3}.scheme-manager-dropdown::after{content:\"\";position:absolute;border:10px solid #0000;bottom:100%;left:20px;border-bottom-color:#fff;margin-bottom:-1px}.scheme-manager__button-add{align-items:center;justify-content:center}.scheme-manager__button-add>button{background:#fff;width:100%;height:32px;border:1px dashed #2a87ff40;border-radius:6px;cursor:pointer}.scheme-manager__button-add>button:focus{outline:0}.scheme-manager__button-add>button>span.f-icon{position:relative;top:2px}.scheme-manager__button-add>button:hover{background:#2a87ff;color:#fff}.scheme-manager__search-box{border-radius:5px}.scheme-manager__search-box .input-group-append{width:30px;background:0 0;color:#b4bccc;display:flex;align-items:center;justify-content:center}.scheme-manager__item{line-height:30px;padding:2px 10px;font-size:13px;border-radius:6px;cursor:pointer;align-items:center}.scheme-manager__item:hover{background-color:#f7f8fb}.scheme-manager__item.active{background:#cbe1ff;color:#1564cb}#only-visible-columns .switch-small{min-width:1.88rem;height:.85rem}#only-visible-columns .switch-small small{width:.775rem;height:.775rem;left:1px;top:0}#only-visible-columns .switch.switch-small.checked small{right:1px;left:auto}.f-datagrid-save-scheme .header{height:50px;align-items:center;cursor:move;border-bottom:0}.f-datagrid-save-scheme .header .title{font-size:17px;color:#2d2f33;font-weight:500;margin-left:20px}.f-datagrid_scheme-switch .switch-medium{min-width:1.88rem!important;height:.85rem!important}.scheme-manager__label{border-radius:4px;font-size:12px;height:18px;min-width:32px;align-items:end;line-height:16px;text-align:center}.scheme-manager__label.default{border:1px solid green;color:green;background:#f0f9f2}.scheme-manager__label.public{border:1px solid #4075fa;color:#4075fa;background:#ecf2ff}.scheme-manager__label.private{border:1px solid #d8dce6;color:#878d99;background:#f7f8fb}.scheme-manager__label.org{border:1px solid #f4883e;color:#e46700;background:#fff9eb}.scheme-org-tip{padding-left:5px;color:#878d99;font-size:12px}"]
                    }] }
        ];
        /** @nocollapse */
        SimpleColumnsComponent.ctorParameters = function () { return [
            { type: core.Injector },
            { type: core.ChangeDetectorRef }
        ]; };
        SimpleColumnsComponent.propDecorators = {
            enableScheme: [{ type: core.Input }],
            seartTypes: [{ type: core.Input }],
            columns: [{ type: core.Input }],
            fields: [{ type: core.Input }],
            clickToHidden: [{ type: core.Input }],
            top: [{ type: core.Input }],
            schemeList: [{ type: core.Input }],
            cls: [{ type: core.HostBinding, args: ['class',] }],
            container: [{ type: core.ViewChild, args: ['colcontainer',] }],
            btnOk: [{ type: core.ViewChild, args: ['okbtn',] }],
            searchInput: [{ type: core.ViewChild, args: ['inputWord',] }],
            schemeitemsEleRef: [{ type: core.ViewChild, args: ['schemeitems',] }],
            btnRef: [{ type: core.ViewChild, args: ['btnSchemeName',] }],
            formatChange: [{ type: core.Output }],
            fieldsChange: [{ type: core.Output }],
            submit: [{ type: core.Output }],
            closed: [{ type: core.Output }],
            advanced: [{ type: core.Output }],
            addNewScheme: [{ type: core.Output }],
            showSchemeList: [{ type: core.Output }],
            activeItemChange: [{ type: core.Output }],
            onClick: [{ type: core.HostListener, args: ['click', ['$event'],] }],
            onEscKeydown: [{ type: core.HostListener, args: ['window:keydown.esc', ['$event'],] }],
            onEnterKeydown: [{ type: core.HostListener, args: ['window:keydown.enter', ['$event'],] }],
            onControlGKeydown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }]
        };
        return SimpleColumnsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 保存方案API
     * @type {?}
     */
    var SCHEME_WEBAPI = '/api/runtime/sys/v1.0/querysolution';
    /**
     * 获取方案列表API
     * @type {?}
     */
    var SCHEME_WEBAPI_QUERY = SCHEME_WEBAPI + "/belongId/";
    /**
     * 方案列表管理- 设默认、删除 API
     * @type {?}
     */
    var SCHEME_WEBAPI_UPDATE = SCHEME_WEBAPI + "/batch";
    /**
     * 权限验证
     * @type {?}
     */
    var SCHEME_WEBAPI_Auth = '/api/runtime/sys/v1.0/querysolution/componentType/Datagrid';
    /** @type {?} */
    var LANGUAGE_WEBAPI = '/api/runtime/sys/v1.0/loginInfo?infoType=supportedLanguage';
    var DatagridSchemeService = /** @class */ (function () {
        function DatagridSchemeService() {
            this.restService = null;
            this.state = {};
            this.schemeList$ = new rxjs.Subject();
        }
        /**
         * @param {?} d
         * @param {?} gridId
         * @return {?}
         */
        DatagridSchemeService.prototype.update = /**
         * @param {?} d
         * @param {?} gridId
         * @return {?}
         */
        function (d, gridId) {
            if (!this.state[gridId]) {
                this.state[gridId] = {};
            }
            this.state[gridId] = Object.assign(this.state[gridId], d);
        };
        /**
         * @param {?} httpSer
         * @return {?}
         */
        DatagridSchemeService.prototype.setRestService = /**
         * @param {?} httpSer
         * @return {?}
         */
        function (httpSer) {
            if (httpSer && httpSer['befRepository']) {
                this.restService = httpSer['befRepository']['restService'];
            }
        };
        /**
         * @private
         * @return {?}
         */
        DatagridSchemeService.prototype.getWebFormKey = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var webformHash = window.location.hash.split('?')[0];
            return webformHash.substring(webformHash.lastIndexOf('/') + 1);
        };
        /**
         * @param {?} gridId
         * @return {?}
         */
        DatagridSchemeService.prototype.getSchemeKey = /**
         * @param {?} gridId
         * @return {?}
         */
        function (gridId) {
            /** @type {?} */
            var formKey = this.getWebFormKey();
            return formKey + "_DatagridScheme_" + gridId;
        };
        /**
         * @param {?} gridID
         * @return {?}
         */
        DatagridSchemeService.prototype.getSchemeList = /**
         * @param {?} gridID
         * @return {?}
         */
        function (gridID) {
            /** @type {?} */
            var uri = SCHEME_WEBAPI_QUERY + this.getSchemeKey(gridID);
            if (this.restService) {
                return this.restService.invoke(uri, 'GET', null, null, false);
            }
        };
        /**
         * @param {?} scheme
         * @param {?} gridID
         * @param {?=} isUpdate
         * @return {?}
         */
        DatagridSchemeService.prototype.saveScheme = /**
         * @param {?} scheme
         * @param {?} gridID
         * @param {?=} isUpdate
         * @return {?}
         */
        function (scheme, gridID, isUpdate) {
            if (isUpdate === void 0) { isUpdate = false; }
            if (this.restService) {
                /** @type {?} */
                var httpMethod = isUpdate ? 'PUT' : 'POST';
                scheme.belongId = this.getSchemeKey(gridID);
                return this.restService.invoke(SCHEME_WEBAPI, httpMethod, null, { body: scheme }, false);
            }
        };
        /**
         * @param {?} param
         * @param {?} gridID
         * @return {?}
         */
        DatagridSchemeService.prototype.updateScheme = /**
         * @param {?} param
         * @param {?} gridID
         * @return {?}
         */
        function (param, gridID) {
            if (!param) {
                return rxjs.of(false);
            }
            /** @type {?} */
            var belongId = this.getSchemeKey(gridID);
            param.belongId = belongId;
            if (param.belongId) {
                return this.restService.invoke(SCHEME_WEBAPI_UPDATE, 'PUT', null, { body: param }, false);
            }
        };
        /**
         * @param {?} gridId
         * @param {...?} statePro
         * @return {?}
         */
        DatagridSchemeService.prototype.getStateValue = /**
         * @param {?} gridId
         * @param {...?} statePro
         * @return {?}
         */
        function (gridId) {
            var statePro = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                statePro[_i - 1] = arguments[_i];
            }
            /** @type {?} */
            var dgState = this.state[gridId];
            if (dgState) {
                if (statePro && statePro.length) {
                    return statePro.reduce((/**
                     * @param {?} r
                     * @param {?} c
                     * @return {?}
                     */
                    function (r, c) {
                        return r[c];
                    }), dgState);
                }
                return dgState;
            }
            return null;
        };
        /**
         * @private
         * @param {?} gridId
         * @param {?} propertyName
         * @param {?} value
         * @return {?}
         */
        DatagridSchemeService.prototype.updateStateValue = /**
         * @private
         * @param {?} gridId
         * @param {?} propertyName
         * @param {?} value
         * @return {?}
         */
        function (gridId, propertyName, value) {
            var _a;
            this.update((_a = {}, _a[propertyName] = value, _a), gridId);
        };
        /**
         * @param {?} gridId
         * @param {?} newSchemeList
         * @return {?}
         */
        DatagridSchemeService.prototype.setSchemeList = /**
         * @param {?} gridId
         * @param {?} newSchemeList
         * @return {?}
         */
        function (gridId, newSchemeList) {
            this.updateStateValue(gridId, 'list', newSchemeList);
            this.schemeList$.next(newSchemeList);
        };
        /**
         * @param {?} gridId
         * @param {?} schemeName
         * @return {?}
         */
        DatagridSchemeService.prototype.hasSchemeName = /**
         * @param {?} gridId
         * @param {?} schemeName
         * @return {?}
         */
        function (gridId, schemeName) {
            /** @type {?} */
            var schemeList = this.getStateValue(gridId, 'list');
            if (!schemeList || !schemeList.length) {
                return false;
            }
            if (typeof schemeName === 'string') {
                return !!schemeList.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.name === schemeName.trim(); }));
            }
            else {
                if (typeof schemeName === 'object') {
                    /** @type {?} */
                    var replayNames_1 = [];
                    schemeList.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        /** @type {?} */
                        var currentNames = Object.values(n.name);
                        for (var k in schemeName) {
                            if (currentNames.includes(schemeName[k])) {
                                replayNames_1.push(k);
                            }
                        }
                    }));
                    return replayNames_1;
                }
            }
        };
        /**
         * @return {?}
         */
        DatagridSchemeService.prototype.checkAuthority = /**
         * @return {?}
         */
        function () {
            return this.restService.invoke(SCHEME_WEBAPI_Auth, 'GET', null, null, false);
        };
        /**
         * @return {?}
         */
        DatagridSchemeService.prototype.getLanguages = /**
         * @return {?}
         */
        function () {
            return this.restService.invoke(LANGUAGE_WEBAPI, 'GET', null, null, false);
        };
        return DatagridSchemeService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NewSchemeComponent = /** @class */ (function () {
        function NewSchemeComponent(cd) {
            this.cd = cd;
            this.dataPermissionIds = [];
            this.closeModal = new core.EventEmitter();
            this.submitModal = new core.EventEmitter();
            this.checkAuthority = new core.EventEmitter();
            this.schemeInfo = {
                name: '',
                isDefault: false,
                type: 'private',
                orgids: ''
            };
            this.schemeType = 'private';
            this.noPublicAuthority = false;
            this.noOrgAuthority = false;
            this.languages = [{ code: 'zh-CHS', name: '中文简体', default: true }, { code: 'en', name: 'English' }, { code: 'zh-CHT', name: '中文繁体' }];
            this.nameMaxLength = { 'zh-CHS': 9, 'zh-CHT': 9, en: 50 };
        }
        /**
         * @return {?}
         */
        NewSchemeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        NewSchemeComponent.prototype.close = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.closeModal.emit();
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        NewSchemeComponent.prototype.submit = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.submitModal.emit(this.schemeInfo);
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        NewSchemeComponent.prototype.onCancelClick = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.close($event);
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        NewSchemeComponent.prototype.onSelectedOrg = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if ($event.selections && $event.selections.length) {
                /** @type {?} */
                var orgids = $event.selections.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.orgId; }));
                this.schemeInfo.orgids = orgids;
            }
        };
        /**
         * @param {?} $event
         * @param {?} val
         * @return {?}
         */
        NewSchemeComponent.prototype.onSetRangeType = /**
         * @param {?} $event
         * @param {?} val
         * @return {?}
         */
        function ($event, val) {
            $event.stopPropagation();
            this.schemeType = val;
            if (val === 'public' || val === 'org') {
                this.checkAuthority.emit({ value: val, schemeInfo: this.schemeInfo });
            }
            else {
                this.schemeInfo.type = val;
            }
            // console.log($event, this.schemeInfo.type);
        };
        /**
         * @param {?=} hasAuthority
         * @return {?}
         */
        NewSchemeComponent.prototype.refresh = /**
         * @param {?=} hasAuthority
         * @return {?}
         */
        function (hasAuthority) {
            if (hasAuthority === void 0) { hasAuthority = { public: true, org: true }; }
            this.schemeInfo = __assign({}, this.schemeInfo);
            this.schemeType = this.schemeInfo.type;
            this.noPublicAuthority = !hasAuthority.public;
            this.noOrgAuthority = !hasAuthority.org;
            this.cd.detectChanges();
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        NewSchemeComponent.prototype.getSelectedId = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            console.log($event);
            if ($event.selections && $event.selections.length) {
                this.schemeInfo.orgids = $event.selections.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.orgId; }));
            }
            else {
                this.schemeInfo.orgids = '';
            }
        };
        /**
         * @return {?}
         */
        NewSchemeComponent.prototype.clearAllOrgs = /**
         * @return {?}
         */
        function () {
            this.schemeInfo.orgids = '';
        };
        NewSchemeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'new-scheme',
                        template: "\r\n\r\n\r\n<div class=\"f-datagrid-save-scheme d-flex flex-column\" style=\"height: 100%;\">\r\n\r\n    <div class=\"d-flex justify-content-between header\" #header >\r\n        <div class=\"title\">{{'datagrid.scheme.saveTitle' | locale}}</div>\r\n        <div class=\"close\" style=\"margin-right: 20px;\">\r\n            <span class=\"f-icon modal_close\" (click)=\"close($event)\"></span>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-utils-fill  mx-3 p-3 mt-1\" >\r\n        <!-- <div class=\"input-group mb-3 scheme-manager__search-box\">\r\n            <input #schemeName type=\"text\" class=\"form-control\" maxlength=\"9\" placeholder=\"{{'datagrid.scheme.namePlaceholder' | locale}}\" style=\"height: 26px;\" name=\"name\" [(ngModel)]=\"schemeInfo.name\">\r\n        </div> -->\r\n        <div class=\" mb-3\">\r\n            <language-textbox [(ngModel)]=\"schemeInfo.name\"  [languages]=\"languages\" [maxWords]=\"nameMaxLength\"></language-textbox>\r\n        </div>\r\n            \r\n    \r\n        <div class=\"input-group mb-2\" style=\"border: 0;\">\r\n          \r\n            <div class=\"custom-control custom-radio  custom-control-inline \" style=\"align-items: center\">\r\n                <input class=\"custom-control-input\" type=\"radio\" id=\"private-scheme\"  name=\"schemeType\"  (click)=\"onSetRangeType($event, 'private')\" value=\"private\" [checked]=\"schemeType === 'private'\">\r\n                <label class=\"custom-control-label\" for=\"private-scheme\">{{'datagrid.scheme.setPrivate' | locale}}</label>\r\n                <span class=\"icon-question\" farrisTooltip [placement]=\"'right'\" [delay]=\"500\" [content]=\"'datagrid.scheme.privateTip' | locale\">?</span>\r\n            </div>\r\n            <div class=\"custom-control custom-radio  custom-control-inline \" style=\"align-items: center\">\r\n                <input class=\"custom-control-input\" type=\"radio\" id=\"public-scheme\" name=\"schemeType\" (click)=\"onSetRangeType($event, 'public')\" value=\"public\" [checked]=\"schemeType === 'public'\" [disabled]=\"noPublicAuthority\">\r\n                <label class=\"custom-control-label\" for=\"public-scheme\">{{'datagrid.scheme.setPublic' | locale}}</label>\r\n                <span class=\"icon-question\" farrisTooltip [placement]=\"'right'\" [delay]=\"500\" [content]=\"'datagrid.scheme.publicTip' | locale\">?</span>\r\n            </div>\r\n            <div class=\"custom-control custom-radio  custom-control-inline \" style=\"align-items: center\">\r\n                <input class=\"custom-control-input\" type=\"radio\" id=\"org-scheme\" name=\"schemeType\" (click)=\"onSetRangeType($event, 'org')\"  value=\"org\" [checked]=\"schemeType === 'org'\" [disabled]=\"noOrgAuthority\">\r\n                <label class=\"custom-control-label\" for=\"org-scheme\">{{'datagrid.scheme.setOrg' | locale}}</label>\r\n                <span class=\"icon-question\" farrisTooltip [placement]=\"'right'\" [delay]=\"500\" [content]=\"'datagrid.scheme.orgTip' | locale\">?</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"input-group mb-2\" style=\"border: 0;\" *ngIf=\"schemeInfo.type === 'private'\">\r\n            <div class=\"custom-control custom-checkbox  custom-control-inline \" style=\"align-items: center\">\r\n                <input class=\"custom-control-input\" type=\"checkbox\" id=\"default-scheme\" name=\"isDefault\" [(ngModel)]=\"schemeInfo.isDefault\">\r\n                <label class=\"custom-control-label\" for=\"default-scheme\">{{'datagrid.scheme.setDefault' | locale}} <i class=\"scheme-org-tip\">({{'datagrid.scheme.defaultTip' | locale}})</i></label>\r\n                <!-- <span class=\"icon-question\" farrisTooltip [placement]=\"'right'\" [delay]=\"500\" [content]=\"'\u4E0B\u6B21\u8FDB\u5165\u6B64\u529F\u80FD\u65F6\uFF0C\u9ED8\u8BA4\u52A0\u8F7D\u8BE5\u65B9\u6848'\">?</span> -->\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"input-group mb-2\" style=\"border: 0;\" *ngIf=\"schemeInfo.type === 'org' && !noOrgAuthority\">\r\n            <div class=\"input-group mb-3\">\r\n                <farris-organization-selector\r\n                    [primaryField]=\"'orgId'\" [displayField]=\"'name'\"\r\n                    [absOrgType]=\"'System_organization'\"\r\n                    [layer]=\"1\" [multiSelect]=\"true\" [showTabIds]=\"'organization'\"\r\n                    [enableHierarchicalLoading]=\"false\" [cascadeCheck]=\"true\" [cascadeDown]=\"true\"\r\n                    (selectionsChange)=\"onSelectedOrg($event)\"\r\n                    [cascadeUp]=\"false\"\r\n                    [orgIds]=\"dataPermissionIds\"\r\n                    (inputClear)=\"clearAllOrgs()\" (tagRemoved)=\"getSelectedId($event)\"\r\n                    [dataPermission]=\"true\" [dataPermissionIds]=\"dataPermissionIds\" \r\n                ></farris-organization-selector>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"p-3 mb-3\" style=\"height: 50px;text-align: right;\">\r\n        <button class=\"btn btn-secondary cancel btn-lg mr-3\" style=\"width: 70px\"\r\n            (click)=\"onCancelClick($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n        <button class=\"btn btn-primary ok btn-lg\" style=\"width: 70px\"\r\n            (click)=\"submit($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n    </div>\r\n\r\n</div>",
                        styles: ["\n        .icon-question {\n            width: 16px;\n            border-radius: 20px;\n            height: 16px;\n            text-align: center;\n            vertical-align: middle;\n            line-height: 15px;\n            font-size: 10px;\n            margin-left: 10px;\n            background: #EAF4FF;\n            color: #2A87FF;\n            cursor: pointer\n        }\n\n        .icon-question:hover {\n            background: #2A87FF;\n            color: #fff;\n        }\n        "]
                    }] }
        ];
        /** @nocollapse */
        NewSchemeComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        NewSchemeComponent.propDecorators = {
            header: [{ type: core.ViewChild, args: ['header',] }],
            dataPermissionIds: [{ type: core.Input }],
            closeModal: [{ type: core.Output }],
            submitModal: [{ type: core.Output }],
            checkAuthority: [{ type: core.Output }]
        };
        return NewSchemeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SchemeListComponent = /** @class */ (function () {
        function SchemeListComponent(cd, localeSer, injector) {
            this.cd = cd;
            this.localeSer = localeSer;
            this.injector = injector;
            this.items = [];
            this.closeModal = new core.EventEmitter();
            this.submitModal = new core.EventEmitter();
            this.removeItem = true;
            this.columns = [];
            this.changes = null;
        }
        /**
         * @return {?}
         */
        SchemeListComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var colName = this.localeSer.getValue('datagrid.scheme.columns.name') || '名称';
            /** @type {?} */
            var colType = this.localeSer.getValue('datagrid.scheme.columns.type') || '属性';
            /** @type {?} */
            var colDefault = this.localeSer.getValue('datagrid.scheme.columns.isDefault') || '默认';
            /** @type {?} */
            var colCreator = this.localeSer.getValue('datagrid.scheme.columns.username') || '创建人';
            /** @type {?} */
            var colMgr = this.localeSer.getValue('datagrid.scheme.columns.mgr') || '管理';
            /** @type {?} */
            var publicTxt = this.localeSer.getValue('datagrid.scheme.isPublic') || '公共';
            /** @type {?} */
            var privateTxt = this.localeSer.getValue('datagrid.scheme.isPrivate') || '个人';
            /** @type {?} */
            var orgTxt = this.localeSer.getValue('datagrid.scheme.isOrg') || '组织';
            this.columns = [
                // {field: 'name', title: '名称', width: 150, template: this.schemeName},
                { field: 'name', title: colName, width: 150, formatter: (/**
                     * @param {?} v
                     * @return {?}
                     */
                    function (v) {
                        return getMultilingualValue(JSON.parse(v), _this.localeSer.localeId);
                    }) },
                { field: 'type', title: colType, width: 50, halign: 'center', align: 'center', formatter: (/**
                     * @param {?} v
                     * @param {?} d
                     * @return {?}
                     */
                    function (v, d) {
                        switch (v) {
                            case 'public':
                                return '<span class="scheme-manager__label px-1 public">' + publicTxt + '</span>';
                            case 'org':
                                return '<span class="scheme-manager__label px-1 org">' + orgTxt + '</span>';
                            case 'private':
                            default:
                                return '<span class="scheme-manager__label px-1 private">' + privateTxt + '</span>';
                        }
                    }) },
                { field: 'isDefault', title: colDefault, width: 50, halign: 'center', align: 'center', template: this.schemeIsDefault },
                { field: 'userName', title: colCreator, width: 80 },
                { title: colMgr, width: 50, template: this.btnDel, halign: 'center', align: 'center', }
            ];
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        SchemeListComponent.prototype.onClose = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.closeModal.emit();
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        SchemeListComponent.prototype.onSubmitClick = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.submitModal.emit(this.changes);
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        SchemeListComponent.prototype.onCancelClick = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.closeModal.emit();
        };
        /**
         * @param {?} $event
         * @param {?} ctx
         * @return {?}
         */
        SchemeListComponent.prototype.setDefault = /**
         * @param {?} $event
         * @param {?} ctx
         * @return {?}
         */
        function ($event, ctx) {
            /** @type {?} */
            var r = $event == '1';
            // $event.stopPropagation();
            this.items.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                n.isDefault = false;
                if (n.id === ctx.rowData.id && r) {
                    n.isDefault = r;
                }
            }));
            this.items = __spread(this.items);
            /** @type {?} */
            var defaultItem = this.items.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.isDefault; }));
            if (defaultItem) {
                this.changes = this.changes || {};
                this.changes.defaultId = defaultItem.id;
            }
            // this.cd.detectChanges();
        };
        /**
         * @param {?} $event
         * @param {?} ctx
         * @return {?}
         */
        SchemeListComponent.prototype.onSchemeDel = /**
         * @param {?} $event
         * @param {?} ctx
         * @return {?}
         */
        function ($event, ctx) {
            if (!this.removeItem) {
                return;
            }
            $event.stopPropagation();
            /** @type {?} */
            var id = ctx.rowData.id;
            this.items = this.items.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.id !== id; }));
            this.changes = this.changes || {};
            this.changes.deletedIds = __spread((this.changes.deletedIds || []), [id]);
            if (id === this.changes.defaultId) {
                this.changes.defaultId = '';
                delete this.changes.defaultId;
            }
        };
        SchemeListComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'scheme-list',
                        template: "\r\n<div class=\"f-datagrid-save-scheme d-flex flex-column\" style=\"height: 100%;\">\r\n    <div class=\"d-flex justify-content-between header\" #header >\r\n        <div class=\"title\">{{'datagrid.scheme.schemeList' | locale}}</div>\r\n        <div class=\"close\" style=\"margin-right: 20px;\">\r\n            <span class=\"f-icon modal_close\" (click)=\"onClose($event)\"></span>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-utils-fill mx-3 mt-1\" >\r\n        <farris-datagrid #dg\r\n            [columns]=\"columns\"\r\n            [data]=\"items\"\r\n            [fit]=\"true\"\r\n            [fitColumns]=\"true\"\r\n            [pagination]=\"false\"\r\n            [editable]=\"false\">\r\n        </farris-datagrid>\r\n    </div>\r\n\r\n    <div class=\"p-3 mb-3\" style=\"height: 50px;text-align: right;\">\r\n        <button class=\"btn btn-secondary cancel btn-lg mr-3\" style=\"width: 70px\"\r\n            (click)=\"onCancelClick($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n        <button class=\"btn btn-primary ok btn-lg\" style=\"width: 70px\"\r\n            (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #schemeName let-ctx>\r\n    <div class=\"input-group\">\r\n        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"ctx.rowData['name']\">\r\n    </div>\r\n</ng-template>\r\n<ng-template #schemeIsDefault let-ctx>\r\n    <div class=\"f-datagrid-cell-formgroup farris-group-auto f-datagrid_scheme-switch\" [style.opacity]=\"ctx.rowData['type'] !== 'private' ? 0.6: 1\" style=\"line-height:100%\" #ctrlbox hidefocus=\"true\">\r\n        <farris-switch [(ngModel)]=\"ctx.rowData['isDefault']\" trueValue=\"1\" falseValue=\"0\"\r\n        (valueChange)=\"setDefault($event, ctx)\"  [disabled]=\"ctx.rowData['type'] !== 'private' || ctx.rowData['isDefault']\"></farris-switch>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template let-ctx #btnDel>\r\n    <a href=\"javascript:void(0)\" (click)=\"onSchemeDel($event, ctx)\" title=\"{{'datagrid.scheme.delete' | locale}}\" *ngIf=\"removeItem\">\r\n        <span class=\"f-icon f-icon-yxs_delete\"></span>\r\n    </a>\r\n</ng-template>"
                    }] }
        ];
        /** @nocollapse */
        SchemeListComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef },
            { type: uiLocale.LocaleService },
            { type: core.Injector }
        ]; };
        SchemeListComponent.propDecorators = {
            items: [{ type: core.Input }],
            closeModal: [{ type: core.Output }],
            submitModal: [{ type: core.Output }],
            removeItem: [{ type: core.Input }],
            header: [{ type: core.ViewChild, args: ['header',] }],
            schemeName: [{ type: core.ViewChild, args: ['schemeName',] }],
            schemeIsDefault: [{ type: core.ViewChild, args: ['schemeIsDefault',] }],
            btnDel: [{ type: core.ViewChild, args: ['btnDel',] }],
            dg: [{ type: core.ViewChild, args: ['dg',] }]
        };
        return SchemeListComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var GRID_SETTINGS_WEBAPI = new core.InjectionToken(' Farris DataGrid User Setting WebApi URI.');
    var DatagridSettingsService = /** @class */ (function () {
        function DatagridSettingsService(injector, modalSer, messager, idService, localeSer) {
            this.injector = injector;
            this.modalSer = modalSer;
            this.messager = messager;
            this.idService = idService;
            this.localeSer = localeSer;
            this.multiSortMsg = '列表中未开启多列排序的功能。 请检查！';
            this.columnsSortableMsg = '未开启列的排序功能。请检查！';
            this.notSupportHeaderGroupMsg = '暂不支持多表头设置';
            this.notShowDialog = '多表头暂不支持列显示设置；同时未启用列排序功能。';
            this._httpRestService = null;
            this.languages = [];
            this.gridRefs = null;
            this.activeSchemeItem = null;
            this.saving = false;
            this.cfr = null;
            this.app = null;
            this.schemeListSubscription = null;
            this.cfr = this.injector.get(core.ComponentFactoryResolver);
            this.app = this.injector.get(core.ApplicationRef);
            this.notifyService = this.injector.get(uiNotify.NotifyService, null);
            this.schemeService = new DatagridSchemeService();
        }
        Object.defineProperty(DatagridSettingsService.prototype, "httpRestService", {
            get: /**
             * @return {?}
             */
            function () {
                return this._httpRestService;
            },
            set: /**
             * @param {?} httpSer
             * @return {?}
             */
            function (httpSer) {
                this._httpRestService = httpSer;
                if (this.schemeService) {
                    this.schemeService.setRestService(httpSer);
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?=} id
         * @return {?}
         */
        DatagridSettingsService.prototype.destroy = /**
         * @param {?=} id
         * @return {?}
         */
        function (id) {
            if (id && this.gridRefs && this.gridRefs[id]) {
                delete this.gridRefs[id];
            }
            else {
                this.gridRefs = null;
            }
            this.saving = false;
            this.setActiveSchemeItem(id, null);
        };
        /**
         * @param {?} dg
         * @return {?}
         */
        DatagridSettingsService.prototype.registerGridInstance = /**
         * @param {?} dg
         * @return {?}
         */
        function (dg) {
            if (!dg) {
                console.log('DatagridSettingService: grid instance is null.');
                return;
            }
            /** @type {?} */
            var id = dg.id;
            this.gridRefs = this.gridRefs || {};
            if (!this.gridRefs[id]) {
                this.gridRefs[id] = dg;
            }
        };
        /**
         * @param {?} dgID
         * @return {?}
         */
        DatagridSettingsService.prototype.getGridInstance = /**
         * @param {?} dgID
         * @return {?}
         */
        function (dgID) {
            return this.gridRefs ? this.gridRefs[dgID] : null;
        };
        /** 更新方案中的配置数据 */
        /**
         * 更新方案中的配置数据
         * @private
         * @param {?} schemeItem
         * @param {?} settings
         * @return {?}
         */
        DatagridSettingsService.prototype.updateSchemeSettings = /**
         * 更新方案中的配置数据
         * @private
         * @param {?} schemeItem
         * @param {?} settings
         * @return {?}
         */
        function (schemeItem, settings) {
            if (schemeItem && settings) {
                /** @type {?} */
                var schemeContentObj = JSON.parse(schemeItem.queryConditionString);
                if (schemeContentObj) {
                    if (schemeContentObj[this.localeSer.localeId]) {
                        /** @type {?} */
                        var schemeSettings = schemeContentObj[this.localeSer.localeId];
                        schemeContentObj[this.localeSer.localeId] = Object.assign(schemeSettings, settings);
                    }
                    else {
                        schemeContentObj[this.localeSer.localeId] = settings;
                    }
                    schemeItem.queryConditionString = JSON.stringify(schemeContentObj);
                }
            }
        };
        /** 更新当前方案配置数据 */
        /**
         * 更新当前方案配置数据
         * @param {?} dgId
         * @param {?} settings
         * @return {?}
         */
        DatagridSettingsService.prototype.updateActiveSchemeItemSettings = /**
         * 更新当前方案配置数据
         * @param {?} dgId
         * @param {?} settings
         * @return {?}
         */
        function (dgId, settings) {
            /** @type {?} */
            var schemeItem = this.getActiveSchemeItem(dgId);
            this.updateSchemeSettings(schemeItem, settings);
        };
        /** 设置活动的方案 */
        /**
         * 设置活动的方案
         * @param {?} dgId
         * @param {?} activeItem
         * @return {?}
         */
        DatagridSettingsService.prototype.setActiveSchemeItem = /**
         * 设置活动的方案
         * @param {?} dgId
         * @param {?} activeItem
         * @return {?}
         */
        function (dgId, activeItem) {
            /** @type {?} */
            var schemekey = this.schemeService.getSchemeKey(dgId);
            this.activeSchemeItem = this.activeSchemeItem || {};
            this.activeSchemeItem[schemekey] = activeItem;
        };
        /** 获取当前活动的方案 */
        /**
         * 获取当前活动的方案
         * @param {?} dgId
         * @return {?}
         */
        DatagridSettingsService.prototype.getActiveSchemeItem = /**
         * 获取当前活动的方案
         * @param {?} dgId
         * @return {?}
         */
        function (dgId) {
            /** @type {?} */
            var schemekey = this.schemeService.getSchemeKey(dgId);
            return this.activeSchemeItem ? this.activeSchemeItem[schemekey] : null;
        };
        /**
         * @return {?}
         */
        DatagridSettingsService.prototype.getSearchTypes = /**
         * @return {?}
         */
        function () {
            return [
                { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
                { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
                { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
            ];
        };
        /**
         * @param {?} gridInstance
         * @param {?=} settings
         * @param {?=} selectedSchemeItem
         * @return {?}
         */
        DatagridSettingsService.prototype.showSimple = /**
         * @param {?} gridInstance
         * @param {?=} settings
         * @param {?=} selectedSchemeItem
         * @return {?}
         */
        function (gridInstance, settings, selectedSchemeItem) {
            var _this = this;
            /** @type {?} */
            var columns = this.convertColumnsToSimple(gridInstance.columns);
            columns[0] = columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field && n.field !== gridInstance.ControlPanelFeild; }));
            /** @type {?} */
            var searchTypes = this.getSearchTypes();
            if (this.cfr) {
                /** @type {?} */
                var cmpFactory = this.cfr.resolveComponentFactory(SimpleColumnsComponent);
                /** @type {?} */
                var simpleRef_1 = cmpFactory.create(this.injector);
                this.app.attachView(simpleRef_1.hostView);
                simpleRef_1.instance.columns = columns;
                simpleRef_1.instance.seartTypes = searchTypes;
                simpleRef_1.instance.gridInstance = gridInstance;
                if (document.querySelector('#page-wrapper')) {
                    simpleRef_1.instance.top = 76;
                }
                simpleRef_1.instance.enableScheme = gridInstance.enableScheme;
                if (gridInstance.enableScheme) {
                    if (settings) {
                        if (selectedSchemeItem) {
                            this.updateSchemeSettings(selectedSchemeItem, settings);
                            simpleRef_1.instance.currentSchemeItem = selectedSchemeItem;
                        }
                        else {
                            simpleRef_1.instance.currentSchemeItem = null;
                            simpleRef_1.instance.settings = settings;
                        }
                    }
                    else {
                        /** @type {?} */
                        var _currentSchemtItem = this.getActiveSchemeItem(gridInstance.id);
                        simpleRef_1.instance.currentSchemeItem = _currentSchemtItem;
                    }
                }
                document.body.appendChild(simpleRef_1.location.nativeElement);
                simpleRef_1.instance.closed.pipe(operators.switchMap((/**
                 * @return {?}
                 */
                function () {
                    simpleRef_1.instance.container.nativeElement.style.right = '-500px';
                    return rxjs.timer(500);
                }))).subscribe((/**
                 * @return {?}
                 */
                function () {
                    simpleRef_1.location.nativeElement.remove();
                    simpleRef_1.destroy();
                    simpleRef_1 = null;
                    if (_this.schemeListSubscription) {
                        _this.schemeListSubscription.unsubscribe();
                    }
                }));
                simpleRef_1.instance.advanced.subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var viewFields = _a.viewFields;
                    if (viewFields && viewFields.length) {
                        _this.updateSchemeSettings(simpleRef_1.instance.currentSchemeItem, { viewColumns: viewFields });
                    }
                    _this.showAdvanced(gridInstance, null, simpleRef_1.instance.currentSchemeItem);
                }));
                simpleRef_1.instance.submit.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    e.target.disabled = true;
                    if (_this.saving) {
                        return;
                    }
                    if (!_this.saving) {
                        if (e.currentScheme) {
                            _this.setActiveSchemeItem(gridInstance.id, e.currentScheme);
                        }
                        _this.updateGridView(e, gridInstance, e.target);
                    }
                }));
                simpleRef_1.instance.fieldsChange.subscribe((/**
                 * @param {?} visibleFields
                 * @return {?}
                 */
                function (visibleFields) {
                    _this.updateActiveSchemeItemSettings(gridInstance.id, { viewColumns: visibleFields });
                }));
                // 打开新增方案窗口
                simpleRef_1.instance.addNewScheme.subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.showNewSchemeDialog(gridInstance, simpleRef_1);
                }));
                simpleRef_1.instance.schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];
                // 打开方案管理列表窗口
                simpleRef_1.instance.showSchemeList.subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.schemeService.getSchemeList(gridInstance.id).pipe(operators.switchMap((/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        return _this.schemeService.checkAuthority().pipe(operators.map((/**
                         * @param {?} auth
                         * @return {?}
                         */
                        function (auth) {
                            return __assign({ list: t }, auth);
                        })));
                    }))).subscribe((/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        _this.schemeService.setSchemeList(gridInstance.id, t.list || []);
                        _this.showSchemeListDialog(gridInstance, lodashEs.cloneDeep(t.list || []), t.success);
                    }));
                }));
                this.schemeListSubscription = this.schemeService.schemeList$.subscribe((/**
                 * @param {?} list
                 * @return {?}
                 */
                function (list) {
                    simpleRef_1.instance.schemeList = list;
                    if (!list || !list.length) {
                        _this.setActiveSchemeItem(gridInstance.id, null);
                        return;
                    }
                    /** @type {?} */
                    var _activeSchemeItem = _this.getActiveSchemeItem(gridInstance.id);
                    if (_activeSchemeItem) {
                        /** @type {?} */
                        var hasActiveItem = list.find((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.id === _activeSchemeItem.id; }));
                        if (!hasActiveItem) {
                            hasActiveItem = _this.getDefaultScheme(list); // 获取设置为当前方案的项
                            _this.setActiveSchemeItem(gridInstance.id, hasActiveItem || null);
                        }
                        simpleRef_1.instance.currentSchemeItem = hasActiveItem;
                    }
                }));
                // 切换方案
                simpleRef_1.instance.activeItemChange.subscribe((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) {
                    _this.setActiveSchemeItem(gridInstance.id, r);
                }));
                simpleRef_1.hostView.detectChanges();
                simpleRef_1.instance.container.nativeElement.style.right = '0px';
                return simpleRef_1;
            }
        };
        /**
         * @param {?} gridInstance
         * @param {?=} opts
         * @return {?}
         */
        DatagridSettingsService.prototype.show = /**
         * @param {?} gridInstance
         * @param {?=} opts
         * @return {?}
         */
        function (gridInstance, opts) {
            this.registerGridInstance(gridInstance);
            if (gridInstance.enableSimpleMode) {
                return this.showSimple(gridInstance);
            }
            else {
                return this.showAdvanced(gridInstance, opts);
            }
        };
        /**
         * @private
         * @param {?} gridInstance
         * @param {?=} opts
         * @param {?=} selectedSchemeItem
         * @return {?}
         */
        DatagridSettingsService.prototype.showAdvanced = /**
         * @private
         * @param {?} gridInstance
         * @param {?=} opts
         * @param {?=} selectedSchemeItem
         * @return {?}
         */
        function (gridInstance, opts, selectedSchemeItem) {
            var _this = this;
            /** @type {?} */
            var _editColSortInfo = true;
            /** @type {?} */
            var editColSortInfo = this.canSetColumnSort(gridInstance);
            if (editColSortInfo !== true) {
                // this.messager.warning(msg);
                // return;
                _editColSortInfo = false;
            }
            /** @type {?} */
            var showSetColumnsTab = !this.isHeaderGroup(gridInstance);
            /** @type {?} */
            var getActiveTabIndex = (/**
             * @return {?}
             */
            function () {
                if (showSetColumnsTab) {
                    return 1;
                }
                else {
                    if (_editColSortInfo) {
                        return 2;
                    }
                    else {
                        return -1;
                    }
                }
            });
            /** @type {?} */
            var activeTabIndex = getActiveTabIndex();
            if (activeTabIndex === -1) {
                this.messager.warning(this.notShowDialog);
                return;
            }
            /** @type {?} */
            var columns = this.convertColumnsToSimple(gridInstance.columns);
            // 获取当前方案中当前语言的配置数据
            /** @type {?} */
            var currentSettings = null;
            if (selectedSchemeItem && selectedSchemeItem.queryConditionString) {
                currentSettings = JSON.parse(selectedSchemeItem.queryConditionString)[this.localeSer.localeId];
                if (currentSettings.columnFormat && currentSettings.columnFormat.length) {
                    columns[0] = columns[0].map((/**
                     * @param {?} col
                     * @return {?}
                     */
                    function (col) {
                        /** @type {?} */
                        var fcol = currentSettings.columnFormat.find((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.field === col.field; }));
                        if (fcol) {
                            col = Object.assign(col, fcol);
                        }
                        return col;
                    }));
                }
            }
            columns[0] = columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field && n.field !== gridInstance.ControlPanelFeild; }));
            /** @type {?} */
            var treeData = this.convertColumns2TreeData(lodashEs.cloneDeep(columns), true);
            /** @type {?} */
            var viewColumnsTreeData = this.convertColumns2TreeData(lodashEs.cloneDeep(columns), false);
            this.checkViewTreeNodes(viewColumnsTreeData);
            /** @type {?} */
            var modalRef = null;
            /** @type {?} */
            var okText = this.localeSer.getValue('datagrid.settings.ok') || '确定';
            /** @type {?} */
            var cancelText = this.localeSer.getValue('datagrid.settings.cancel') || '取消';
            /** @type {?} */
            var resetText = this.localeSer.getValue('datagrid.settings.reset') || '重置';
            /** @type {?} */
            var defaultOpts = {
                width: 760, height: 560, showHeader: false, title: '控制面板',
                initialState: {
                    columns: columns,
                    sortTreeData: treeData,
                    viewTreeData: viewColumnsTreeData,
                    gridInstance: gridInstance,
                    canSetColumnSort: _editColSortInfo,
                    canSetColumnVisible: showSetColumnsTab,
                    activeTabIndex: activeTabIndex,
                    schemeInfo: currentSettings
                },
                showButtons: false
            };
            /** @type {?} */
            var modalOpts = Object.assign(defaultOpts, opts || {});
            modalRef = this.modalSer.show(DatagridSettingsComponent, modalOpts);
            /** @type {?} */
            var instance = (/** @type {?} */ (modalRef.content));
            instance.enableReset = true;
            instance.modalRef = modalRef;
            instance.canSetColumnSort = _editColSortInfo;
            instance.canSetColumnVisible = !this.isHeaderGroup(gridInstance);
            instance.submitHandle.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.target.disabled = true;
                if (_this.saving) {
                    return;
                }
                if (!_this.saving) {
                    if (selectedSchemeItem) {
                        _this.setActiveSchemeItem(gridInstance.id, selectedSchemeItem);
                    }
                    _this.updateGridView(modalRef, gridInstance, e.target);
                }
            }));
            instance.cancelHandle.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                modalRef.close();
            }));
            // 切换到侧边栏简洁模式
            instance.concise.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                modalRef.close();
                /** @type {?} */
                var settings = modalRef.content;
                var sortInfo = settings.sortInfo, viewColumns = settings.viewColumns, columnFormat = settings.columnFormat, groupField = settings.groupField;
                _this.showSimple(gridInstance, { sortInfo: sortInfo, viewColumns: viewColumns, columnFormat: columnFormat, groupField: groupField }, selectedSchemeItem);
            }));
            /** @type {?} */
            var modalContainer = (/** @type {?} */ (modalRef.dialog.instance));
            modalContainer.draggbar.handle = instance.header.nativeElement;
            return modalRef;
        };
        /**
         * @private
         * @param {?} gridInstance
         * @return {?}
         */
        DatagridSettingsService.prototype.canSetColumnSort = /**
         * @private
         * @param {?} gridInstance
         * @return {?}
         */
        function (gridInstance) {
            if (gridInstance.multiSort && this.hasEnableSortColumns(gridInstance)) {
                return true;
            }
            else {
                if (!this.hasEnableSortColumns(gridInstance)) {
                    return this.columnsSortableMsg;
                }
                else if (!gridInstance.multiSort) {
                    return this.multiSortMsg;
                }
            }
        };
        /**
         * @private
         * @param {?} gridInstance
         * @return {?}
         */
        DatagridSettingsService.prototype.hasEnableSortColumns = /**
         * @private
         * @param {?} gridInstance
         * @return {?}
         */
        function (gridInstance) {
            /** @type {?} */
            var sortColumnsCount = gridInstance.flatColumns.reduce((/**
             * @param {?} c
             * @param {?} r
             * @return {?}
             */
            function (c, r) {
                if (r.sortable) {
                    return c + 1;
                }
                return c;
            }), 0);
            return sortColumnsCount > 0;
        };
        /**
         * @private
         * @param {?} grid
         * @return {?}
         */
        DatagridSettingsService.prototype.isHeaderGroup = /**
         * @private
         * @param {?} grid
         * @return {?}
         */
        function (grid) {
            /** @type {?} */
            var flag = grid.columns.length > 1;
            if (flag) {
                return this.notSupportHeaderGroupMsg;
            }
            return flag;
        };
        /**
         * @private
         * @param {?} cols
         * @param {?} rowIndex
         * @param {?} colStartIndex
         * @param {?} colCount
         * @param {?=} forSort
         * @return {?}
         */
        DatagridSettingsService.prototype.getChilds = /**
         * @private
         * @param {?} cols
         * @param {?} rowIndex
         * @param {?} colStartIndex
         * @param {?} colCount
         * @param {?=} forSort
         * @return {?}
         */
        function (cols, rowIndex, colStartIndex, colCount, forSort) {
            var _this = this;
            if (forSort === void 0) { forSort = false; }
            /** @type {?} */
            var childCols = [];
            /** @type {?} */
            var _count = colStartIndex;
            if (!cols[rowIndex]) {
                return [];
            }
            cols[rowIndex].slice().forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _count = _count + element.colspan;
                if (_count <= colCount) {
                    childCols.push(element);
                }
            }));
            cols[rowIndex].splice(0, childCols.length);
            return childCols.map((/**
             * @param {?} c
             * @param {?} i
             * @return {?}
             */
            function (c, i) {
                /** @type {?} */
                var n = {
                    data: c,
                    selectable: forSort ? !!c.sortable : true
                };
                if (c.colspan && c.colspan > 1) {
                    n = {
                        data: c,
                        selectable: false,
                        expanded: true,
                        children: _this.getChilds(cols, rowIndex + 1, 0, c.colspan)
                    };
                }
                return n;
            }));
        };
        /**
         * @param {?} cols
         * @param {?=} forSort
         * @return {?}
         */
        DatagridSettingsService.prototype.convertColumns2TreeData = /**
         * @param {?} cols
         * @param {?=} forSort
         * @return {?}
         */
        function (cols, forSort) {
            var _this = this;
            if (forSort === void 0) { forSort = false; }
            /** @type {?} */
            var columns = cols.map((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                c.map((/**
                 * @param {?} _
                 * @return {?}
                 */
                function (_) {
                    _.colspan = _.colspan || 1;
                    return _;
                }));
                return c;
            }));
            if (columns.length === 1) {
                return columns[0].map((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    return {
                        data: c,
                        selectable: forSort ? !!c.sortable : true
                    };
                }));
            }
            else {
                return columns[0].map((/**
                 * @param {?} c
                 * @param {?} i
                 * @return {?}
                 */
                function (c, i) {
                    if (c.colspan && c.colspan > 1) {
                        return {
                            data: c,
                            selectable: false,
                            expanded: true,
                            children: _this.getChilds(columns, 1, 0, c.colspan, forSort)
                        };
                    }
                    else {
                        return {
                            data: c,
                            selectable: forSort ? !!c.sortable : true
                        };
                    }
                }));
            }
        };
        /**
         * @private
         * @param {?} treeNodes
         * @return {?}
         */
        DatagridSettingsService.prototype.checkViewTreeNodes = /**
         * @private
         * @param {?} treeNodes
         * @return {?}
         */
        function (treeNodes) {
            var _this = this;
            treeNodes.forEach((/**
             * @param {?} tn
             * @return {?}
             */
            function (tn) {
                if (!tn.children || !tn.children.length) {
                    tn.selectable = true;
                }
                else {
                    tn.selectable = false;
                    _this.checkViewTreeNodes(tn.children);
                }
            }));
        };
        /**
         * @private
         * @param {?} cols
         * @return {?}
         */
        DatagridSettingsService.prototype.convertColumnsToSimple = /**
         * @private
         * @param {?} cols
         * @return {?}
         */
        function (cols) {
            // 移除设置列
            return cols.map((/**
             * @param {?} _cols
             * @return {?}
             */
            function (_cols) {
                return _cols.map((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    if (c.field !== '_datagrid-setting-control_') {
                        return {
                            field: c.field,
                            title: c.title,
                            colspan: c.colspan,
                            rowspan: c.rowspan,
                            sortable: c.sortable,
                            order: c.order,
                            halign: c.halign || 'left',
                            align: c.align || 'left',
                            visible: c.visible,
                            allowGrouping: c.allowGrouping,
                            groupFooter: c.groupFooter,
                            footer: c.footer,
                            width: c.width || 100,
                            dataType: c.dataType || 'string'
                        };
                    }
                })).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
            }));
        };
        /**
         * @private
         * @param {?} gridInstance
         * @return {?}
         */
        DatagridSettingsService.prototype.resetGridView = /**
         * @private
         * @param {?} gridInstance
         * @return {?}
         */
        function (gridInstance) {
            if (!gridInstance) {
                return;
            }
            /** @type {?} */
            var dfs = gridInstance.dfs;
            if (dfs) {
                /** @type {?} */
                var options = dfs['_state'].initialOptions;
                if (options.sort) {
                    if (options.sort.sortName) {
                        gridInstance.sortName = options.sort.sortName;
                    }
                    if (options.sort.sortOrder) {
                        gridInstance.sortOrder = options.sort.sortOrder;
                    }
                }
                gridInstance.groupField = options.groupField || '';
                // TODO: 还需要修正默认列的显示顺序
                if (options.columnFields && options.columnFields.length) {
                    /** @type {?} */
                    var newColumns_1 = [];
                    options.columnFields.forEach((/**
                     * @param {?} c
                     * @return {?}
                     */
                    function (c) {
                        /** @type {?} */
                        var col = gridInstance.columns[0].find((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.field === c.field; }));
                        if (col) {
                            col.visible = c.visible;
                            col.halign = c.halign;
                            col.align = c.align;
                            col.width = c.width;
                            col.footer = c.footer;
                            col.groupFooter = c.groupFooter;
                            newColumns_1.push(col);
                        }
                    }));
                    gridInstance.columns[0] = newColumns_1;
                }
                // gridInstance['checkOptions']();
                gridInstance['columnsChanged']();
            }
        };
        /**
         * @private
         * @param {?} modalRef
         * @param {?} gridInstance
         * @param {?=} btn
         * @return {?}
         */
        DatagridSettingsService.prototype.updateGridView = /**
         * @private
         * @param {?} modalRef
         * @param {?} gridInstance
         * @param {?=} btn
         * @return {?}
         */
        function (modalRef, gridInstance, btn) {
            var _this = this;
            if (btn === void 0) { btn = null; }
            /** @type {?} */
            var settings = modalRef.content;
            if (settings) {
                var sortInfo_1 = settings.sortInfo, viewColumns_1 = settings.viewColumns, columnFormat_1 = settings.columnFormat, groupField = settings.groupField;
                this.updateActiveSchemeItemSettings(gridInstance.id, { sortInfo: sortInfo_1, viewColumns: viewColumns_1, columnFormat: columnFormat_1, groupField: groupField });
                this.saving = true;
                /** @type {?} */
                var _groupField = '';
                if (gridInstance.groupRows && groupField && groupField.length) {
                    _groupField = groupField.join(',');
                }
                gridInstance.groupField = _groupField;
                /** @type {?} */
                var _colformats = columnFormat_1 ? this.convertColumnsToSimple([columnFormat_1])[0] : [];
                /** @type {?} */
                var saveData = { sortInfo: sortInfo_1, viewColumns: viewColumns_1, groupField: _groupField, columnFormat: _colformats };
                this.setUserConfig(gridInstance.id, saveData).subscribe((/**
                 * @return {?}
                 */
                function () {
                    if (btn) {
                        btn.disabled = false;
                    }
                    _this.saving = false;
                    if (viewColumns_1 && viewColumns_1.length) {
                        gridInstance.columns = gridInstance.columns.map((/**
                         * @param {?} cols
                         * @return {?}
                         */
                        function (cols) {
                            _this.updateColumnFormat(cols, columnFormat_1, gridInstance);
                            return _this.newVisibleOrderColumns(cols, viewColumns_1, columnFormat_1, gridInstance);
                        }));
                    }
                    gridInstance.columnsChanged(true);
                    if (sortInfo_1 && Object.keys(sortInfo_1).length) {
                        var sortName = sortInfo_1.sortName, sortOrder = sortInfo_1.sortOrder;
                        if (sortName && sortName.length) {
                            gridInstance.sort(sortName.join(','), sortOrder.join(','));
                        }
                        else {
                            gridInstance.clearSort();
                        }
                    }
                    else {
                        gridInstance.clearSort();
                    }
                    modalRef.close();
                }));
            }
            else {
                modalRef.close();
            }
        };
        /**
         * @param {?} cols
         * @param {?} viewColumns
         * @param {?} columnFormat
         * @param {?} gridInstance
         * @return {?}
         */
        DatagridSettingsService.prototype.newVisibleOrderColumns = /**
         * @param {?} cols
         * @param {?} viewColumns
         * @param {?} columnFormat
         * @param {?} gridInstance
         * @return {?}
         */
        function (cols, viewColumns, columnFormat, gridInstance) {
            var _this = this;
            /** @type {?} */
            var hideColumns = [];
            cols.forEach((/**
             * @param {?} element
             * @param {?} index
             * @return {?}
             */
            function (element, index) {
                if (_this.isNewAddColumn(element.field, columnFormat) && element.field !== '_datagrid-setting-control_' && !gridInstance.enableScheme) {
                    viewColumns.push(element.field);
                }
                else {
                    element.visible = viewColumns.includes(element.field);
                    if (!element.visible) {
                        hideColumns.push(element);
                    }
                }
            }));
            // 清理不存在的列
            /** @type {?} */
            var newCols = viewColumns.map((/**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                return cols.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.field === field; }));
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n; }));
            if (hideColumns.length) {
                newCols = newCols.concat(hideColumns);
            }
            return newCols.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c && c.field && c.field !== '_datagrid-setting-control_'; }));
        };
        /**
         * 是否为新增加的字段
         * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
         */
        /**
         * 是否为新增加的字段
         * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
         * @private
         * @param {?} field
         * @param {?} columns
         * @return {?}
         */
        DatagridSettingsService.prototype.isNewAddColumn = /**
         * 是否为新增加的字段
         * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
         * @private
         * @param {?} field
         * @param {?} columns
         * @return {?}
         */
        function (field, columns) {
            columns = columns || [];
            return !columns.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field === field; }));
        };
        /**
         * @param {?} cols
         * @param {?} columnFormat
         * @param {?} gridInstance
         * @return {?}
         */
        DatagridSettingsService.prototype.updateColumnFormat = /**
         * @param {?} cols
         * @param {?} columnFormat
         * @param {?} gridInstance
         * @return {?}
         */
        function (cols, columnFormat, gridInstance) {
            if (columnFormat && columnFormat.length) {
                cols.forEach((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) {
                    /** @type {?} */
                    var formatCol = columnFormat.find((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) { return f.field === col.field; }));
                    if (formatCol) {
                        col.width = formatCol.width;
                        col.halign = formatCol.halign || 'left';
                        col.align = formatCol.align || 'left';
                        if (gridInstance.groupRows && (col.allowGrouping || col.allowGrouping === undefined)) {
                            if (!col.groupFooter) {
                                col.groupFooter = formatCol.groupFooter;
                            }
                            if (col.groupFooter && col.groupFooter.options) {
                                col.groupFooter.options.text = formatCol.groupFooter.options.text || '';
                                col.groupFooter.options.calculationType =
                                    formatCol.groupFooter.options.calculationType !== undefined &&
                                        formatCol.groupFooter.options.calculationType !== null ?
                                        parseInt(formatCol.groupFooter.options.calculationType, 10) : -1;
                            }
                        }
                        if (gridInstance.showFooter && !gridInstance.footerTemplate) {
                            if (!col.footer) {
                                col.footer = formatCol.footer;
                            }
                            if (col.footer && col.footer.options) {
                                col.footer.options.text = formatCol.footer.options.text || '';
                                col.footer.options.calculationType =
                                    formatCol.footer.options.calculationType !== undefined &&
                                        formatCol.footer.options.calculationType !== null ?
                                        parseInt(formatCol.footer.options.calculationType, 10) : -1;
                            }
                        }
                    }
                }));
            }
        };
        // 创建唯一key, 由uri + gridId 组成，并混淆
        // 创建唯一key, 由uri + gridId 组成，并混淆
        /**
         * @private
         * @param {?} gridId
         * @return {?}
         */
        DatagridSettingsService.prototype.createConfigKey = 
        // 创建唯一key, 由uri + gridId 组成，并混淆
        /**
         * @private
         * @param {?} gridId
         * @return {?}
         */
        function (gridId) {
            /** @type {?} */
            var grid = this.getGridInstance(gridId);
            if (grid) {
                return grid.dgs.createConfigKey(gridId);
            }
            else {
                console.log('DatagridSettingService: Can not find the grid instance.');
            }
        };
        /**
         * @private
         * @param {?} gridId
         * @return {?}
         */
        DatagridSettingsService.prototype.getCurrentUserSettings = /**
         * @private
         * @param {?} gridId
         * @return {?}
         */
        function (gridId) {
            /** @type {?} */
            var gridInstance = this.getGridInstance(gridId);
            /** @type {?} */
            var config = { sortInfo: {}, viewColumns: [], groupField: '', columnFormat: [] };
            if (gridInstance) {
                var sortName = gridInstance.sortName, sortOrder = gridInstance.sortOrder, columns = gridInstance.columns;
                if (sortName) {
                    /** @type {?} */
                    var sortInfo = {
                        sortName: sortName.split(','),
                        sortOrder: sortOrder.split(',')
                    };
                    config.sortInfo = sortInfo;
                }
                /** @type {?} */
                var viewColumns = columns[0].filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.visible || n.visible === undefined; })).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.field; }));
                config.viewColumns = viewColumns;
                config.columnFormat = this.convertColumnsToSimple(columns)[0];
                if (gridInstance.groupRows) {
                    config.groupField = gridInstance.groupField;
                }
            }
            return config;
        };
        /**
         * @param {?} gridId
         * @return {?}
         */
        DatagridSettingsService.prototype.saveUserConfig = /**
         * @param {?} gridId
         * @return {?}
         */
        function (gridId) {
            /** @type {?} */
            var config = this.getCurrentUserSettings(gridId);
            return this.setUserConfig(gridId, config);
        };
        /**
         * @param {?} gridId
         * @param {?} config
         * @return {?}
         */
        DatagridSettingsService.prototype.setUserConfig = /**
         * @param {?} gridId
         * @param {?} config
         * @return {?}
         */
        function (gridId, config) {
            var _this = this;
            /** @type {?} */
            var key = this.createConfigKey(gridId);
            /** @type {?} */
            var LOCALEID = this.localeSer.localeId;
            /** @type {?} */
            var currentConfig = localStorage.getItem(key);
            /** @type {?} */
            var _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
            if (config) {
                if (_config) {
                    _config[LOCALEID] = config;
                }
                localStorage.setItem(key, JSON.stringify(_config));
            }
            else {
                localStorage.removeItem(key);
            }
            if (this.httpRestService) {
                /** @type {?} */
                var gridIns = this.getGridInstance(gridId);
                if (gridIns && gridIns.enableScheme) {
                    /** @type {?} */
                    var activeScheme_1 = this.getActiveSchemeItem(gridId);
                    if (activeScheme_1) {
                        // return this.updateScheme(gridId, config);
                        if (activeScheme_1.type === 'private') {
                            return this.schemeService.saveScheme(activeScheme_1, gridId, true);
                        }
                        else {
                            return this.schemeService.checkAuthority().pipe(operators.switchMap((/**
                             * @param {?} t
                             * @return {?}
                             */
                            function (t) {
                                if (t.success) {
                                    /** @type {?} */
                                    var hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;
                                    if (activeScheme_1.type === 'public' || (activeScheme_1.type === 'org' && hasOrgAuthority)) {
                                        return _this.schemeService.saveScheme(activeScheme_1, gridId, true);
                                    }
                                }
                                return rxjs.of(true);
                            })));
                        }
                    }
                    else {
                        return rxjs.of(true);
                    }
                }
                // 保存至数据库
                return this._saveUserConfig(key, config ? _config : '');
            }
            return rxjs.of(true);
        };
        /**
         * @param {?} key
         * @return {?}
         */
        DatagridSettingsService.prototype.getUserConfig = /**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (this.httpRestService) {
                return this._getUserConfig(key);
            }
            else {
                /** @type {?} */
                var config = localStorage.getItem(key);
                if (config) {
                    /** @type {?} */
                    var con = JSON.parse(config);
                    if (con[this.localeSer.localeId]) {
                        return rxjs.of(con[this.localeSer.localeId]);
                    }
                    else {
                        if (Object.keys(con).indexOf('viewColumns') > -1) {
                            return rxjs.of(con);
                        }
                        return null;
                    }
                }
                else {
                    return rxjs.of(null);
                }
            }
        };
        /**
         * @private
         * @param {?} schemeList
         * @return {?}
         */
        DatagridSettingsService.prototype.getDefaultScheme = /**
         * @private
         * @param {?} schemeList
         * @return {?}
         */
        function (schemeList) {
            // 1、有个人默认的返回个人默认方案
            // 2、没有个人默认方案的，返回公共方案第1个
            // 3、没有公共方案，返回组织方案第1个
            // 4、没有组织方案的, 返回个人方案第1个
            // 5、没有个人方案的，返回系统预制，即表单设计时的格式
            // 1、有个人默认的返回个人默认方案
            // 2、没有个人默认方案的，返回公共方案第1个
            // 3、没有公共方案，返回组织方案第1个
            // 4、没有组织方案的, 返回个人方案第1个
            // 5、没有个人方案的，返回系统预制，即表单设计时的格式
            /** @type {?} */
            var defaultScheme = null;
            if (!schemeList || !schemeList.length) {
                return defaultScheme;
            }
            else {
                defaultScheme = schemeList.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.isDefault; }));
                if (!defaultScheme) {
                    /** @type {?} */
                    var publicSchemes = schemeList.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.type === 'public'; }));
                    if (!publicSchemes.length) {
                        publicSchemes = schemeList.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.type === 'org'; }));
                    }
                    if (publicSchemes.length) {
                        defaultScheme = publicSchemes[0];
                    }
                    else {
                        defaultScheme = schemeList[0];
                    }
                }
            }
            return defaultScheme;
        };
        /**
         * @param {?} gridId
         * @return {?}
         */
        DatagridSettingsService.prototype.getSettings = /**
         * @param {?} gridId
         * @return {?}
         */
        function (gridId) {
            var _this = this;
            /** @type {?} */
            var key = this.createConfigKey(gridId);
            /** @type {?} */
            var gridIns = this.getGridInstance(gridId);
            /** @type {?} */
            var schemeList$ = rxjs.of([]);
            if (gridIns && gridIns.enableScheme) {
                schemeList$ = this.getSchemeList(gridId);
            }
            return rxjs.forkJoin(schemeList$, this.getUserConfig(key), this.schemeService.getLanguages()).pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 3), schemeList = _b[0], userSetting = _b[1], supportedLanguages = _b[2];
                schemeList = schemeList || [];
                _this.languages = supportedLanguages;
                if (!schemeList.length) {
                    return userSetting;
                }
                else {
                    // 缓存方案列表
                    _this.setSchemeList(schemeList, gridId);
                    // 查找默认方案
                    /** @type {?} */
                    var defaultScheme = _this.getDefaultScheme(schemeList);
                    if (!defaultScheme) {
                        return userSetting;
                    }
                    else {
                        _this.setActiveSchemeItem(gridId, defaultScheme);
                        /** @type {?} */
                        var userSettings = JSON.parse(defaultScheme.queryConditionString);
                        if (userSettings) {
                            /** @type {?} */
                            var localeId = _this.localeSer.localeId;
                            if (userSettings[localeId]) {
                                localStorage.setItem(key, JSON.stringify(userSettings));
                                return userSettings[localeId];
                            }
                            else {
                                userSettings[localeId] = null;
                                localStorage.setItem(key, JSON.stringify(userSettings));
                                return null;
                            }
                        }
                        else {
                            return null;
                        }
                    }
                }
            })));
        };
        /**
         * @private
         * @param {?} key
         * @param {?} config
         * @return {?}
         */
        DatagridSettingsService.prototype._saveUserConfig = /**
         * @private
         * @param {?} key
         * @param {?} config
         * @return {?}
         */
        function (key, config) {
            try {
                /** @type {?} */
                var userConfigSetting = {
                    configkey1: key,
                    configkey2: '',
                    configkey3: '',
                    textvalue: config ? JSON.stringify(config) : ''
                };
                return this.httpRestService.saveUserSettings(userConfigSetting);
            }
            catch (e) {
                console.error(e);
            }
        };
        /**
         * @param {?} gridInstance
         * @param {?} modalRef
         * @return {?}
         */
        DatagridSettingsService.prototype.resetUserConfig = /**
         * @param {?} gridInstance
         * @param {?} modalRef
         * @return {?}
         */
        function (gridInstance, modalRef) {
            var _this = this;
            /** @type {?} */
            var restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
            this.messager.confirm(restorDefaultText).pipe(operators.switchMap((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                if (t) {
                    return _this.setUserConfig(gridInstance.id, '');
                }
                return rxjs.of(t);
            }))).subscribe((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                if (t) {
                    _this.resetGridView(gridInstance);
                    modalRef.close();
                }
            }));
        };
        /**
         * @private
         * @param {?} key
         * @return {?}
         */
        DatagridSettingsService.prototype._getUserConfig = /**
         * @private
         * @param {?} key
         * @return {?}
         */
        function (key) {
            var _this = this;
            try {
                return this.httpRestService.getUserSettings(key).pipe(operators.map((/**
                 * @param {?} ucs
                 * @return {?}
                 */
                function (ucs) {
                    if (ucs && ucs.textValue) {
                        /** @type {?} */
                        var c = JSON.parse(ucs.textValue);
                        if (c) {
                            if (c[_this.localeSer.localeId]) {
                                localStorage.setItem(key, ucs.textValue);
                                return c[_this.localeSer.localeId];
                            }
                            else {
                                c[_this.localeSer.localeId] = null;
                                localStorage.setItem(key, JSON.stringify(c));
                                // if (Object.keys(c).indexOf('viewColumns') > -1) {
                                //     return c;
                                // }
                                return null;
                            }
                        }
                        return null;
                    }
                    return null;
                })));
            }
            catch (e) {
                console.error(e);
            }
        };
        /**
         * @private
         * @param {?} gridId
         * @param {?=} settings
         * @return {?}
         */
        DatagridSettingsService.prototype.buildSubmitData = /**
         * @private
         * @param {?} gridId
         * @param {?=} settings
         * @return {?}
         */
        function (gridId, settings) {
            if (settings === void 0) { settings = null; }
            /** @type {?} */
            var LOCALEID = this.localeSer.localeId;
            if (!settings) {
                settings = this.getCurrentUserSettings(gridId);
            }
            /** @type {?} */
            var localeKey = this.createConfigKey(gridId);
            /** @type {?} */
            var currentConfig = localStorage.getItem(localeKey);
            /** @type {?} */
            var _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
            if (_config) {
                _config[LOCALEID] = settings;
            }
            return _config;
        };
        // ----------------------------------------------------------------------------------------------- \\
        // ----------------------------------------------------------------------------------------------- \\
        /**
         * @private
         * @param {?} gridInstance
         * @param {?} schemeList
         * @param {?=} canDel
         * @return {?}
         */
        DatagridSettingsService.prototype.showSchemeListDialog = 
        // ----------------------------------------------------------------------------------------------- \\
        /**
         * @private
         * @param {?} gridInstance
         * @param {?} schemeList
         * @param {?=} canDel
         * @return {?}
         */
        function (gridInstance, schemeList, canDel) {
            var _this = this;
            if (canDel === void 0) { canDel = true; }
            /** @type {?} */
            var modalOpts = {
                width: 760, height: 577, showHeader: false, title: '控制面板',
                initialState: {
                    items: schemeList || [],
                    removeItem: canDel
                },
                showButtons: false
            };
            /** @type {?} */
            var schemeListDlg = this.modalSer.show(SchemeListComponent, modalOpts);
            /** @type {?} */
            var instance = (/** @type {?} */ (schemeListDlg.content));
            instance.closeModal.subscribe((/**
             * @return {?}
             */
            function () {
                schemeListDlg.close();
            }));
            instance.submitModal.subscribe((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                _this.schemeService.updateScheme(t, gridInstance.id).subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    if (e === false) {
                        schemeListDlg.close();
                        return;
                    }
                    /** @type {?} */
                    var msg = '列设置方案保存成功。';
                    if (_this.notifyService) {
                        _this.notifyService.success(msg);
                    }
                    else {
                        _this.messager.success(msg);
                    }
                    /** @type {?} */
                    var schemeList = _this.schemeService.getStateValue(gridInstance.id, 'list');
                    if (t.defaultId) {
                        schemeList.forEach((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) {
                            n.isDefault = false;
                            if (n.id === t.defaultId) {
                                n.isDefault = true;
                                // this.setActiveSchemeItem(gridInstance.id, n);
                            }
                        }));
                    }
                    /** @type {?} */
                    var newSchemeList = schemeList;
                    if (t.deletedIds && t.deletedIds.length) {
                        newSchemeList = schemeList.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) {
                            return !t.deletedIds.includes(n.id);
                        }));
                    }
                    _this.schemeService.setSchemeList(gridInstance.id, newSchemeList);
                    schemeListDlg.close();
                }));
            }));
            /** @type {?} */
            var modalContainer = (/** @type {?} */ (schemeListDlg.dialog.instance));
            modalContainer.draggbar.handle = instance.header.nativeElement;
        };
        // 新增或另存方案
        // 新增或另存方案
        /**
         * @private
         * @param {?} gridInstance
         * @param {?} simpleRef
         * @return {?}
         */
        DatagridSettingsService.prototype.showNewSchemeDialog = 
        // 新增或另存方案
        /**
         * @private
         * @param {?} gridInstance
         * @param {?} simpleRef
         * @return {?}
         */
        function (gridInstance, simpleRef) {
            var _this = this;
            /** @type {?} */
            var modalOpts = {
                width: 480, height: 269, showHeader: false, title: '控制面板',
                initialState: {
                    languages: this.languages
                },
                showButtons: false,
                resizable: false
            };
            /** @type {?} */
            var newSchemeDlg = this.modalSer.show(NewSchemeComponent, modalOpts);
            /** @type {?} */
            var instance = (/** @type {?} */ (newSchemeDlg.content));
            instance.closeModal.subscribe((/**
             * @return {?}
             */
            function () {
                newSchemeDlg.close();
            }));
            instance.submitModal.pipe(operators.switchMap((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                return _this.createNewScheme(gridInstance.id, t);
            }))).subscribe((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                if (t.flag === false) {
                    /** @type {?} */
                    var msg = t.msg || '请输入方案名称';
                    if (_this.notifyService) {
                        _this.notifyService.info(msg);
                    }
                    else {
                        _this.messager.info(msg);
                    }
                    return;
                }
                // 更新方案列表
                /** @type {?} */
                var schemeList = _this.schemeService.getStateValue(gridInstance.id, 'list') || [];
                if (t.isDefault) {
                    schemeList.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        n.isDefault = false;
                    }));
                }
                schemeList.push(t);
                _this.setActiveSchemeItem(gridInstance.id, t);
                _this.schemeService.setSchemeList(gridInstance.id, schemeList);
                newSchemeDlg.close();
            }));
            instance.checkAuthority.pipe(operators.switchMap((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                return _this.schemeService.checkAuthority().pipe(operators.map((/**
                 * @param {?} auth
                 * @return {?}
                 */
                function (auth) {
                    return __assign({ type: t }, auth);
                })));
            }))).subscribe((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                /** @type {?} */
                var hasAuthority = { public: true, org: true };
                /** @type {?} */
                var msg = '您没有将方案的使用范围设置为公共的权限。';
                if (t.type.value === 'org') {
                    msg = '您没有将方案的使用范围设置为组织的权限。';
                }
                if (t.success) {
                    /** @type {?} */
                    var hasPublicAuthority = t.authOperationData && t.authOperationData.length;
                    hasAuthority.public = hasPublicAuthority;
                    /** @type {?} */
                    var hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;
                    hasAuthority.org = hasOrgAuthority;
                    if (t.type.value === 'public') {
                        instance.schemeInfo.type = t.type.value;
                    }
                    else if (t.type.value === 'org') {
                        if (!hasOrgAuthority) {
                            _this.notifyService.warning(msg);
                        }
                        else {
                            instance.schemeInfo.type = t.type.value;
                            instance.schemeInfo.orgids = t.authOrganizationData.join(',');
                            instance.dataPermissionIds = t.authOrganizationData;
                        }
                    }
                }
                else {
                    _this.notifyService.warning(msg);
                    hasAuthority = { public: false, org: false };
                }
                instance.refresh(hasAuthority);
            }));
            /** @type {?} */
            var modalContainer = (/** @type {?} */ (newSchemeDlg.dialog.instance));
            modalContainer.draggbar.handle = instance.header.nativeElement;
        };
        /**
         * @param {?} gridId
         * @return {?}
         */
        DatagridSettingsService.prototype.getSchemeList = /**
         * @param {?} gridId
         * @return {?}
         */
        function (gridId) {
            return this.schemeService.getSchemeList(gridId);
        };
        /**
         * @param {?} gridId
         * @param {?} data
         * @return {?}
         */
        DatagridSettingsService.prototype.createNewScheme = /**
         * @param {?} gridId
         * @param {?} data
         * @return {?}
         */
        function (gridId, data) {
            if (!data.name) {
                return rxjs.of({ flag: false, msg: '请输入方案名称' });
            }
            else {
                /** @type {?} */
                var hasName = this.schemeService.hasSchemeName(gridId, data.name);
                if (typeof hasName === 'boolean' && hasName) {
                    return rxjs.of({ flag: false, msg: '方案名称已存在，请修改。' });
                }
                else if (Array.isArray(hasName) && hasName.length) {
                    /** @type {?} */
                    var msgs = hasName.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        if (n === 'zh-CHS') {
                            return '简体中文名称已存在。';
                        }
                        else if (n === 'zh-CHT') {
                            return '繁体中文名称已存在。';
                        }
                        else {
                            return '英文名称已存在。';
                        }
                    }));
                    return rxjs.of({ flag: false, msg: msgs.join('') });
                }
            }
            /** @type {?} */
            var requiredName = [];
            this.languages.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                if (data.name[n.code] === '' || data.name[n.code] === undefined) {
                    requiredName.push(n.code);
                }
            }));
            if (requiredName.length) {
                /** @type {?} */
                var msgs = requiredName.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    if (n === 'zh-CHS') {
                        return '请输入简体中文名称。';
                    }
                    else if (n === 'zh-CHT') {
                        return '请输入繁体中文名称。';
                    }
                    else {
                        return '请输入英文名称。';
                    }
                }));
                return rxjs.of({ flag: false, msg: msgs.join('') });
            }
            if (data.type && data.type === 'org' && (!data.orgids || !data.orgids.length)) {
                return rxjs.of({ flag: false, msg: '请选择组织' });
            }
            /** @type {?} */
            var _config = null;
            /** @type {?} */
            var selectedSettings = this.getCurrentSchemeSettings(gridId);
            if (selectedSettings) {
                _config = selectedSettings;
            }
            else {
                // 收集当前方案配置数据
                _config = this.buildSubmitData(gridId);
            }
            /** @type {?} */
            var newId = this.idService.guid();
            /** @type {?} */
            var isDefault = data.isDefault;
            if (isDefault) {
                if (data.type !== 'private') {
                    isDefault = false;
                }
            }
            if (data.name && typeof data.name === 'object') {
                data.name = JSON.stringify(data.name);
            }
            /** @type {?} */
            var scheme = {
                id: newId,
                belongId: '',
                code: '',
                name: data.name,
                type: data.type,
                isDefault: isDefault,
                isSystem: false,
                extendId: 'datagrid-settings-scheme',
                extendInfo: this.buildOrgAndSchemeRelations(newId, data.orgids),
                queryConditionString: _config ? JSON.stringify(_config) : '',
            };
            return this.schemeService.saveScheme(scheme, gridId).pipe(operators.map((/**
             * @return {?}
             */
            function () {
                return scheme;
            })));
        };
        /**
         * @param {?} schemeList
         * @param {?} gridId
         * @return {?}
         */
        DatagridSettingsService.prototype.setSchemeList = /**
         * @param {?} schemeList
         * @param {?} gridId
         * @return {?}
         */
        function (schemeList, gridId) {
            this.schemeService.update({ list: schemeList }, gridId);
        };
        /**
         * @private
         * @param {?} schemeId
         * @param {?} orgIds
         * @return {?}
         */
        DatagridSettingsService.prototype.buildOrgAndSchemeRelations = /**
         * @private
         * @param {?} schemeId
         * @param {?} orgIds
         * @return {?}
         */
        function (schemeId, orgIds) {
            var _this = this;
            if (!orgIds || !orgIds.length) {
                return [];
            }
            return orgIds.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return {
                    id: _this.idService.guid(),
                    orgId: n,
                    relatedId: schemeId
                };
            }));
        };
        /**
         * @private
         * @param {?} gridId
         * @return {?}
         */
        DatagridSettingsService.prototype.getCurrentSchemeSettings = /**
         * @private
         * @param {?} gridId
         * @return {?}
         */
        function (gridId) {
            /** @type {?} */
            var activeScheme = (/** @type {?} */ (this.getActiveSchemeItem(gridId)));
            if (activeScheme && activeScheme.queryConditionString) {
                return JSON.parse(activeScheme.queryConditionString);
            }
            return null;
        };
        DatagridSettingsService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        DatagridSettingsService.ctorParameters = function () { return [
            { type: core.Injector },
            { type: uiModal.BsModalService },
            { type: uiMessager.MessagerService },
            { type: uiCommon.IdService },
            { type: uiLocale.LocaleService }
        ]; };
        return DatagridSettingsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DatagridSortSettingComponent = /** @class */ (function () {
        function DatagridSortSettingComponent(injector, cd) {
            this.injector = injector;
            this.cd = cd;
            this.idField = 'field';
            this.valueField = 'field';
            this.textField = 'title';
            this.selectedIds = [];
            this.treeData = [];
            this.sortInfoChange = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        DatagridSortSettingComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () { };
        /**
         * @param {?} $event
         * @param {?} data
         * @param {?} order
         * @return {?}
         */
        DatagridSortSettingComponent.prototype.setFieldSortOrder = /**
         * @param {?} $event
         * @param {?} data
         * @param {?} order
         * @return {?}
         */
        function ($event, data, order) {
            $event.stopPropagation();
            data.sortable = true;
            data.order = order;
            if (!order) {
                this.ms.moveToLeft(data);
            }
            this.cd.detectChanges();
            this.onSelectionsChange(null);
            return false;
        };
        /**
         * @return {?}
         */
        DatagridSortSettingComponent.prototype.getSortInfo = /**
         * @return {?}
         */
        function () {
            if (this.ms.selections) {
                /** @type {?} */
                var names_1 = [];
                /** @type {?} */
                var orders_1 = [];
                this.ms.selections.forEach((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) {
                    col.order = col.order || 'asc';
                    names_1.push(col.field);
                    orders_1.push(col.order);
                }));
                return { sortName: names_1, sortOrder: orders_1 };
            }
            return '';
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        DatagridSortSettingComponent.prototype.onSelectionsChange = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            /** @type {?} */
            var si = this.getSortInfo();
            this.sortInfoChange.emit(si);
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        DatagridSortSettingComponent.prototype.onBeforeMove = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            /** @type {?} */
            var items = (/** @type {?} */ ($event.items));
            if ($event.target.indexOf('rightAll') > -1) {
                for (var id in items) {
                    if ($event.items[id]) {
                        $event.items[id].order = 'asc';
                    }
                }
            }
            else {
                if ($event.target === 'right') {
                    for (var id in items) {
                        if ($event.items[id]) {
                            $event.items[id].order = 'asc';
                        }
                    }
                }
            }
        };
        DatagridSortSettingComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sort-setting',
                        template: "<div style=\"padding: 10px;height: 100%;\">\r\n<multi-select [dataSource]=\"treeData\" [idField]=\"idField\" [valueField]=\"valueField\"\r\n[textField]=\"textField\" [displayType]=\"'Tree'\" style=\"height: 100%\" [height]=\"0\" [showCheckbox]=\"false\"\r\n[(selectedId)]=\"selectedIds\" [leftTitle]=\"'datagrid.settings.canchoose'|locale\" [rightTitle]=\"'datagrid.settings.choosed'|locale\" #ms (dataChange)=\"onSelectionsChange($event)\" (beforeMove)=\"onBeforeMove($event)\">\r\n    <ng-template farrisTemplate=\"text\" let-data let-side=\"side\" let-selected=\"selected\" >\r\n        <ng-container *ngIf=\"side === 'L'\">\r\n            {{ data[textField] }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"side === 'R' \">\r\n            <!-- <span class=\"f-icon f-icon-sort-asc-sm sort-label\" title=\"\u5347\u5E8F\" *ngIf=\"data.sortable && data.order === 'asc'\"></span>\r\n            <span class=\"f-icon f-icon-sort-desc-sm  sort-label\" title=\"\u964D\u5E8F\" *ngIf=\"data.sortable && data.order === 'desc'\"></span> -->\r\n            <div class=\"d-flex\">\r\n                <div style=\"width: 120px;white-space: nowrap;min-width: 60px\">\r\n                    {{ data[textField] }} \r\n                </div>\r\n                <div class=\"farris-input-wrap  farris-checkradio-hor flex-fill\" style=\"justify-content: right;flex-wrap:nowrap\">\r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext mr-2\" style=\"font-size: 12px;\" (click)=\"setFieldSortOrder($event, data, 'asc')\">\r\n                        <span class=\"f-icon\" [class.f-icon-radiobutton]=\" data.order && data.order !== 'asc'\" [class.f-icon-check-circle]=\"!data.order || data.order === 'asc'\"></span>\r\n                        {{'datagrid.settings.asc'|locale}}\r\n                    </button>\r\n                    \r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext mr-2\" style=\"font-size: 12px;\" (click)=\"setFieldSortOrder($event, data, 'desc')\">\r\n                        <span class=\"f-icon\" [class.f-icon-radiobutton]=\"data.order !== 'desc'\" [class.f-icon-check-circle]=\"data.order === 'desc'\"></span>\r\n                        {{'datagrid.settings.desc'|locale}}\r\n                    </button>\r\n\r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext sort-btns\" style=\"font-size: 12px;\" style=\"margin-right: 0;\" (click)=\"setFieldSortOrder($event, data, '')\" title=\"{{'datagrid.settings.cancelSort'|locale}}\">\r\n                        <span class=\"f-icon  f-icon-unsort\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        </ng-container>\r\n    </ng-template>\r\n</multi-select>\r\n</div>"
                    }] }
        ];
        /** @nocollapse */
        DatagridSortSettingComponent.ctorParameters = function () { return [
            { type: core.Injector },
            { type: core.ChangeDetectorRef }
        ]; };
        DatagridSortSettingComponent.propDecorators = {
            idField: [{ type: core.Input }],
            valueField: [{ type: core.Input }],
            textField: [{ type: core.Input }],
            selectedIds: [{ type: core.Input }],
            treeData: [{ type: core.Input }],
            ms: [{ type: core.ViewChild, args: ['ms',] }],
            sortInfoChange: [{ type: core.Output }]
        };
        return DatagridSortSettingComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DatagridViewColumnsComponent = /** @class */ (function () {
        function DatagridViewColumnsComponent(injector, cd) {
            this.injector = injector;
            this.cd = cd;
            this.idField = 'field';
            this.valueField = 'field';
            this.textField = 'title';
            this._selectedIds = [];
            this.treeData = [];
            this.selectedIdsChange = new core.EventEmitter();
        }
        Object.defineProperty(DatagridViewColumnsComponent.prototype, "selectedIds", {
            get: /**
             * @return {?}
             */
            function () {
                return this._selectedIds;
            },
            set: /**
             * @param {?} vals
             * @return {?}
             */
            function (vals) {
                this._selectedIds = vals;
                this.selectedIdsChange.emit(vals);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DatagridViewColumnsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () { };
        /**
         * @param {?} changes
         * @return {?}
         */
        DatagridViewColumnsComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        DatagridViewColumnsComponent.prototype.onBeforeMove = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
        };
        /**
         * @param {?} $event
         * @param {?} column
         * @return {?}
         */
        DatagridViewColumnsComponent.prototype.hiddenColumn = /**
         * @param {?} $event
         * @param {?} column
         * @return {?}
         */
        function ($event, column) {
            $event.stopPropagation();
            this.ms.moveToLeft(column);
        };
        DatagridViewColumnsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'view-columns',
                        template: "<multi-select [dataSource]=\"treeData\" [idField]=\"idField\" [valueField]=\"valueField\"\r\n[textField]=\"textField\" [displayType]=\"'Tree'\" style=\"height: 100%\" [height]=\"0\" [showCheckbox]=\"false\"\r\n[(selectedId)]=\"selectedIds\" [leftTitle]=\"'datagrid.settings.canchoose'|locale\" \r\n[rightTitle]=\"'datagrid.settings.choosed'|locale\" #ms (beforeMove)=\"onBeforeMove($event)\">\r\n    <ng-template farrisTemplate=\"text\" let-data let-side=\"side\" let-selected=\"selected\">\r\n        <ng-container *ngIf=\"side === 'L'\">\r\n            {{ data[textField] }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"side === 'R' \">\r\n\r\n            {{ data[textField] }} \r\n\r\n\r\n            <span class=\"sort-btns\" >\r\n                <a href=\"javascript: void(0)\" class=\" p-1\" (click)=\"hiddenColumn($event, data)\">\r\n                    <span class=\"f-icon f-icon-close\"></span>\r\n                </a>\r\n            </span>\r\n\r\n        </ng-container>\r\n    </ng-template>\r\n</multi-select>"
                    }] }
        ];
        /** @nocollapse */
        DatagridViewColumnsComponent.ctorParameters = function () { return [
            { type: core.Injector },
            { type: core.ChangeDetectorRef }
        ]; };
        DatagridViewColumnsComponent.propDecorators = {
            idField: [{ type: core.Input }],
            valueField: [{ type: core.Input }],
            textField: [{ type: core.Input }],
            selectedIds: [{ type: core.Input }],
            treeData: [{ type: core.Input }],
            ms: [{ type: core.ViewChild, args: ['ms',] }],
            selectedIdsChange: [{ type: core.Output }]
        };
        return DatagridViewColumnsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ColumnFormatSettingComponent = /** @class */ (function () {
        function ColumnFormatSettingComponent(injector, gridSettingComponentRef, cd) {
            this.injector = injector;
            this.gridSettingComponentRef = gridSettingComponentRef;
            this.cd = cd;
            this.columns = [];
            this.fields = [];
            this.formatChange = new core.EventEmitter();
            this.fieldsChange = new core.EventEmitter();
            this.allCols = [];
            /**
             * format Data
             */
            this.formatData = [];
            this.columnType = 'all';
            this.activeField = null;
            this.showGridFooter = false;
            this.searchItems = [];
            this.alignItems = [];
            this.summaryItems = [];
            this.summaryItems2 = [];
            this.isEn = false;
            this.showGridFooter = this.gridSettingComponentRef.gridInstance.showFooter &&
                !this.gridSettingComponentRef.gridInstance.footerTemplate;
            this.localeSer = this.injector.get(uiLocale.LocaleService, null);
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ColumnFormatSettingComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.columns && !changes.columns.isFirstChange()) {
                this.setFormatData();
                this.allCols = this.columns[0];
                this.activeField = this.columns[0][0];
                this.checkColumnOptions();
            }
        };
        /**
         * @return {?}
         */
        ColumnFormatSettingComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.isEn = this.localeSer.localeId === 'en';
            this.initData();
            if (this.colForm) {
                this.colForm.valueChanges.subscribe((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    if (!_this.colForm.pristine) {
                        _this.formatChange.emit(_this.formatData);
                    }
                }));
            }
        };
        /**
         * @private
         * @return {?}
         */
        ColumnFormatSettingComponent.prototype.setFormatData = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.formatData = this.fields.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return _this.columns[0].find((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) { return col.field === n; }));
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ColumnFormatSettingComponent.prototype.initData = /**
         * @private
         * @return {?}
         */
        function () {
            this.alignItems = this.gridSettingComponentRef.alignItems;
            this.searchItems = this.gridSettingComponentRef.searchItems;
            this.summaryItems = this.gridSettingComponentRef.summaryItems;
            this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;
            this.setFormatData();
            this.allCols = this.columns[0];
            this.activeField = this.columns[0][0];
            this.checkColumnOptions();
        };
        /**
         * @private
         * @return {?}
         */
        ColumnFormatSettingComponent.prototype.checkColumnOptions = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.activeField) {
                if (this.activeField.allowGrouping === undefined) {
                    this.activeField.allowGrouping = true;
                }
                if (this.activeField.groupFooter === undefined) {
                    this.activeField.groupFooter = { options: { calculationType: -1 } };
                }
                else {
                    this.activeField.groupFooter.options = this.activeField.groupFooter.options || { calculationType: -1 };
                    if (this.activeField.groupFooter.options.calculationType === undefined) {
                        this.activeField.groupFooter.options.calculationType = -1;
                    }
                }
                if (this.activeField.footer === undefined) {
                    this.activeField.footer = { options: { calculationType: -1 } };
                }
                else {
                    this.activeField.footer.options = this.activeField.footer.options || { calculationType: -1 };
                    if (this.activeField.footer.options.calculationType === undefined) {
                        this.activeField.footer.options.calculationType = -1;
                    }
                }
            }
        };
        // 根据列的类型进行筛选过滤，
        // all 所有列
        // visible 可见列
        // hidden 隐藏列
        // group 分组列
        // 根据列的类型进行筛选过滤，
        // all 所有列
        // visible 可见列
        // hidden 隐藏列
        // group 分组列
        /**
         * @param {?} ct
         * @param {?=} searchWords
         * @return {?}
         */
        ColumnFormatSettingComponent.prototype.filterColumns = 
        // 根据列的类型进行筛选过滤，
        // all 所有列
        // visible 可见列
        // hidden 隐藏列
        // group 分组列
        /**
         * @param {?} ct
         * @param {?=} searchWords
         * @return {?}
         */
        function (ct, searchWords) {
            var _this = this;
            if (searchWords === void 0) { searchWords = ''; }
            /** @type {?} */
            var cols = [];
            switch (ct) {
                case 'visible':
                    cols = this.formatData;
                    break;
                case 'hidden':
                    cols = this.columns[0].filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return _this.fields.indexOf(n.field) === -1; }));
                    break;
                case 'all':
                default:
                    cols = this.columns[0];
                    break;
            }
            if (searchWords) {
                cols = cols.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.title.toLowerCase().indexOf(searchWords) > -1; }));
            }
            this.allCols = cols;
        };
        /**
         * @param {?} col
         * @param {?} $event
         * @return {?}
         */
        ColumnFormatSettingComponent.prototype.onFieldClick = /**
         * @param {?} col
         * @param {?} $event
         * @return {?}
         */
        function (col, $event) {
            this.activeField = col;
            this.checkColumnOptions();
        };
        /**
         * @private
         * @return {?}
         */
        ColumnFormatSettingComponent.prototype.onFieldsChanged = /**
         * @private
         * @return {?}
         */
        function () {
            this.setFormatData();
            this.fieldsChange.emit(this.fields);
        };
        /**
         * @param {?} $event
         * @param {?} col
         * @return {?}
         */
        ColumnFormatSettingComponent.prototype.onDblClick = /**
         * @param {?} $event
         * @param {?} col
         * @return {?}
         */
        function ($event, col) {
            // console.log('显示与隐藏切换事件', col);
            this.onCheckboxClick($event, col);
        };
        /**
         * @param {?} $event
         * @param {?} col
         * @return {?}
         */
        ColumnFormatSettingComponent.prototype.onCheckboxClick = /**
         * @param {?} $event
         * @param {?} col
         * @return {?}
         */
        function ($event, col) {
            var _this = this;
            // console.log('显示与隐藏切换事件', col);
            $event.stopPropagation();
            /** @type {?} */
            var index = this.fields.indexOf(col.field);
            if (index === -1) {
                this.fields.push(col.field);
            }
            else {
                this.fields.splice(index, 1);
            }
            this.columns[0].forEach((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                f.visible = _this.fields.indexOf(f.field) > -1;
            }));
            this.fields = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible; })).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field; }));
            this.onFieldsChanged();
        };
        /**
         * @param {?} $event
         * @param {?} ct
         * @return {?}
         */
        ColumnFormatSettingComponent.prototype.searchColumn = /**
         * @param {?} $event
         * @param {?} ct
         * @return {?}
         */
        function ($event, ct) {
            /** @type {?} */
            var txt = $event.target.value;
            this.filterColumns(ct, txt);
        };
        /**
         * @param {?} fieldInfo
         * @param {?} ct
         * @param {?} txt
         * @param {?} ulElRef
         * @return {?}
         */
        ColumnFormatSettingComponent.prototype.onFieldDrop = /**
         * @param {?} fieldInfo
         * @param {?} ct
         * @param {?} txt
         * @param {?} ulElRef
         * @return {?}
         */
        function (fieldInfo, ct, txt, ulElRef) {
            var _a;
            // console.log('drop', fieldInfo);
            var removedIndex = fieldInfo.removedIndex, addedIndex = fieldInfo.addedIndex;
            /** @type {?} */
            var moveItem = this.allCols[removedIndex];
            /** @type {?} */
            var targetItem = this.allCols[addedIndex];
            /** @type {?} */
            var moveItemIndex = this.columns[0].findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field === moveItem.field; }));
            /** @type {?} */
            var targetItemIndex = this.columns[0].findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field === targetItem.field; }));
            /** @type {?} */
            var removedItem = this.columns[0].splice(moveItemIndex, 1);
            (_a = this.columns[0]).splice.apply(_a, __spread([targetItemIndex, 0], removedItem));
            this.fields = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible; })).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field; }));
            this.onFieldsChanged();
            this.filterColumns(ct, txt);
            // if (ulElRef) {
            //     ulElRef.querySelectorAll('li .field-drag-handle').forEach(el => {
            //         el.style.cursor = 'grab';
            //     });
            // }
        };
        /**
         * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
         */
        /**
         * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
         * @private
         * @return {?}
         */
        ColumnFormatSettingComponent.prototype.getCheckAllState = /**
         * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
         * @private
         * @return {?}
         */
        function () {
            if (this.fields.length === 0) {
                return 0;
            }
            else {
                if (this.fields.length === this.columns[0].length) {
                    return 1;
                }
                return 2;
            }
        };
        /**
         * @param {?} $event
         * @param {?} ct
         * @param {?} txt
         * @return {?}
         */
        ColumnFormatSettingComponent.prototype.onCheckAllClick = /**
         * @param {?} $event
         * @param {?} ct
         * @param {?} txt
         * @return {?}
         */
        function ($event, ct, txt) {
            /** @type {?} */
            var state = this.getCheckAllState();
            if (state === 0 || state === 2) {
                // 执行全选
                this.columns[0].forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.visible = true; }));
                this.fields = this.columns[0].map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.field; }));
            }
            else {
                // 取消全选
                this.columns[0].forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.visible = false; }));
                this.fields = [];
            }
            this.onFieldsChanged();
            this.filterColumns(ct, txt);
        };
        ColumnFormatSettingComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'column-format-setting',
                        template: "<div class=\"d-flex flex-row flex-fill dg-column-format-setting\" style=\"height: 100%\">\r\n    <div region=\"west\" class=\"west d-flex flex-column \">\r\n        <div style=\"margin: 0 6px;\">\r\n            <input #inputWord type=\"text\" class=\"form-control\" placeholder=\"{{'datagrid.settings.searchPlaceholder' | locale}}\" (input)=\"searchColumn($event, ct.selectedValues)\" style=\"height: 30px;\">\r\n            <div style=\"padding: 5px 0px;background-color: #fff;\">\r\n                <button class=\"btn btn-link\" \r\n                    style=\"height: 32px;padding-left: 4px;\" (click)=\"onCheckAllClick($event, ct.selectedValues, inputWord.value)\">\r\n                    <span class=\"f-icon f-icon-minus-outline checkbox\" [class.f-icon-checkbox]=\"!fields.length\"\r\n                        [class.f-icon-checkbox-checked]=\"fields.length === columns[0].length\"></span>\r\n                    {{ 'datagrid.settings.checkall' | locale }}\r\n                </button>\r\n\r\n                <farris-combo-list #ct \r\n                [data]=\"searchItems\" \r\n                [editable]=\"false\"\r\n                [ngModel]=\"'all'\" [idField]=\"'value'\"\r\n                [textField]=\"'title'\"\r\n                [enableClear]=\"false\"\r\n                (valueChange)=\"filterColumns(ct.selectedValues, inputWord.value)\"\r\n                style=\"float: right;\" [style.width.px]=\"isEn ? 120: 80\"\r\n                class=\"format-setting-searchitem\"></farris-combo-list>\r\n            </div>\r\n        </div>\r\n        <div style=\"overflow: auto;padding-right:3px\" class=\"flex-fill\">\r\n            <ul class=\"list-group  list-group-flush\" #ul column-visible-drag (drop)=\"onFieldDrop($event, ct.selectedValues, inputWord.value, ul)\">\r\n                <li class=\"list-group-item list-group-item-action smooth-dnd-draggable-wrapper format-setting-column\" *ngFor=\"let col of allCols\" \r\n                    (click)=\"onFieldClick(col, $event)\" [class.active]=\"activeField && activeField.field === col.field\"\r\n                    (dblclick)=\"onDblClick($event, col)\">\r\n                    <span class=\"f-icon checkbox\"\r\n                        [class.f-icon-checkbox-checked]=\"fields.indexOf(col.field) > -1\"\r\n                        [class.f-icon-checkbox]=\"fields.indexOf(col.field) == -1\"\r\n                        (click)=\"onCheckboxClick($event, col)\"></span>\r\n                    {{ col.title}} \r\n\r\n                    <span class=\"f-icon f-icon-drag-vertical field-drag-handle\"></span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n      \r\n    </div>\r\n    <div region=\"center\" class=\"center flex-fill\" style=\"overflow:auto;padding: 0 10px; padding-left: 20px;border-right: 0;\">\r\n\r\n        <h6 style=\"margin: 15px 0px;font-weight: bold;\">{{ 'datagrid.settings.properties' | locale }}</h6>\r\n\r\n        <form #colformatform=\"ngForm\" style=\"margin-top: 5px;\">\r\n            <div class=\"farris-group-wrap mb-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\" >{{ 'datagrid.settings.headeralign' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n\r\n                        <farris-combo-list name=\"halign\" \r\n                        [data]=\"alignItems\" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField!.halign\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"farris-group-wrap  mb-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.dataalign' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n\r\n                        <farris-combo-list name=\"align\" \r\n                        [data]=\"alignItems\" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField!.align\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"farris-group-wrap  mb-3\" *ngIf=\"showGridFooter\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.summarytype' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap \">\r\n                       \r\n                        <farris-combo-list name=\"footer.options.calculationType\" \r\n                        [data]=\" activeField.dataType === 'number'?  summaryItems : summaryItems2 \" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField.footer.options.calculationType\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap  mb-3\" *ngIf=\"showGridFooter && (!activeField.footer.options.calculationType || activeField.footer.options.calculationType == -1)\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.summarytext' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                        <input type=\"input\" name=\"footer.options.text\" class=\"form-control\" [(ngModel)]=\"activeField.footer.options.text\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </form>\r\n    </div>\r\n   \r\n</div>",
                        encapsulation: core.ViewEncapsulation.None
                    }] }
        ];
        /** @nocollapse */
        ColumnFormatSettingComponent.ctorParameters = function () { return [
            { type: core.Injector },
            { type: DatagridSettingsComponent },
            { type: core.ChangeDetectorRef }
        ]; };
        ColumnFormatSettingComponent.propDecorators = {
            columns: [{ type: core.Input }],
            fields: [{ type: core.Input }],
            colForm: [{ type: core.ViewChild, args: ['colformatform',] }],
            formatChange: [{ type: core.Output }],
            fieldsChange: [{ type: core.Output }]
        };
        return ColumnFormatSettingComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ColumnGroupSettingComponent = /** @class */ (function () {
        function ColumnGroupSettingComponent(injector, gridSettingComponentRef, cd) {
            this.injector = injector;
            this.gridSettingComponentRef = gridSettingComponentRef;
            this.cd = cd;
            this.fields = [];
            this.formatColumns = [];
            this.groupFields = [];
            this.groupFieldsChange = new core.EventEmitter();
            this.formatColumnsChange = new core.EventEmitter();
            this.groupColumns = [];
            this.allowGroupColumns = [];
            this.activeCalculationCol = null;
            this.showSelectColumnsPanel = false;
            this.summaryItems = [];
            this.summaryItems2 = [];
        }
        /**
         * @return {?}
         */
        ColumnGroupSettingComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.summaryItems = this.gridSettingComponentRef.summaryItems;
            this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;
            this.setGroupColumns();
            this.registerEventHandle();
            this.initCalculationColumns();
            if (this.colForm) {
                this.colForm.valueChanges.subscribe((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    if (!_this.colForm.pristine) {
                        _this.formatColumnsChange.emit(_this.formatColumns);
                    }
                }));
            }
            this.formatColumns.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                _this.checkColumnOptions(n);
            }));
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        ColumnGroupSettingComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            if (changes.formatColumns && !changes.formatColumns.isFirstChange()) {
                this.formatColumns.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    _this.checkColumnOptions(n);
                }));
                this.setGroupColumns();
                this.initCalculationColumns();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ColumnGroupSettingComponent.prototype.initCalculationColumns = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.formatColumns) {
                this.activeCalculationCol = this.formatColumns[0];
            }
        };
        /**
         * @private
         * @return {?}
         */
        ColumnGroupSettingComponent.prototype.registerEventHandle = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.groupingSettingEl.nativeElement.addEventListener('click', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e.target !== _this.selectcolumnspanel.nativeElement) {
                    _this.showSelectColumnsPanel = false;
                }
            }), false);
        };
        /**
         * @private
         * @return {?}
         */
        ColumnGroupSettingComponent.prototype.setGroupColumns = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.groupFields && this.groupFields.length) {
                this.groupColumns = this.groupFields.map((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) {
                    return _this.columns[0].find((/**
                     * @param {?} col
                     * @return {?}
                     */
                    function (col) { return col.field === f; }));
                })).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
            }
            else {
                this.groupColumns = [];
            }
            this.onGroupFieldsChange();
        };
        /**
         * @private
         * @return {?}
         */
        ColumnGroupSettingComponent.prototype.getAllowGroupingColumns = /**
         * @private
         * @return {?}
         */
        function () {
            return this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.allowGrouping || n.allowGrouping === undefined; }));
        };
        /**
         * @private
         * @return {?}
         */
        ColumnGroupSettingComponent.prototype.onGroupFieldsChange = /**
         * @private
         * @return {?}
         */
        function () {
            this.groupFieldsChange.emit(this.groupFields);
        };
        /**
         * @private
         * @param {?} col
         * @return {?}
         */
        ColumnGroupSettingComponent.prototype.checkColumnOptions = /**
         * @private
         * @param {?} col
         * @return {?}
         */
        function (col) {
            if (col) {
                if (col.groupFooter === undefined) {
                    col.groupFooter = { options: { calculationType: -1 } };
                }
                else {
                    col.groupFooter.options = col.groupFooter.options || { calculationType: -1 };
                    if (col.groupFooter.options.calculationType === undefined) {
                        col.groupFooter.options.calculationType = -1;
                    }
                }
                // if (this.activeField.footer === undefined) {
                //     this.activeField.footer =  { options: {calculationType: -1} };
                // } else {
                //     this.activeField.footer.options = this.activeField.footer.options || {calculationType: -1};
                //     if (this.activeField.footer.options.calculationType === undefined) {
                //         this.activeField.footer.options.calculationType = -1;
                //     }
                // }
            }
        };
        /**
         * 显示或隐藏字段选取面板
         */
        /**
         * 显示或隐藏字段选取面板
         * @param {?} $event
         * @return {?}
         */
        ColumnGroupSettingComponent.prototype.toggleGroupingColumnPanel = /**
         * 显示或隐藏字段选取面板
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            $event.stopPropagation();
            this.showSelectColumnsPanel = !this.showSelectColumnsPanel;
            this.allowGroupColumns = this.getAllowGroupingColumns();
        };
        /** 添加分组字段 */
        /**
         * 添加分组字段
         * @param {?} $event
         * @param {?} col
         * @return {?}
         */
        ColumnGroupSettingComponent.prototype.addGroupColumn = /**
         * 添加分组字段
         * @param {?} $event
         * @param {?} col
         * @return {?}
         */
        function ($event, col) {
            $event.stopPropagation();
            if (this.groupFields.indexOf(col.field) === -1) {
                this.groupColumns = __spread(this.groupColumns, [col]);
                this.groupFields = this.groupColumns.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.field; }));
                this.onGroupFieldsChange();
                this.showSelectColumnsPanel = false;
            }
        };
        /** 移除分组字段 */
        /**
         * 移除分组字段
         * @param {?} $event
         * @param {?} col
         * @return {?}
         */
        ColumnGroupSettingComponent.prototype.onRemoveGroupingField = /**
         * 移除分组字段
         * @param {?} $event
         * @param {?} col
         * @return {?}
         */
        function ($event, col) {
            $event.stopPropagation();
            this.groupFields = this.groupFields.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n !== col.field; }));
            this.setGroupColumns();
        };
        /** 拖动分组字段进行排序 */
        /**
         * 拖动分组字段进行排序
         * @param {?} $event
         * @return {?}
         */
        ColumnGroupSettingComponent.prototype.onGroupingFieldDropped = /**
         * 拖动分组字段进行排序
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            var _a;
            console.log('grouping field droped.', $event);
            var removedIndex = $event.removedIndex, addedIndex = $event.addedIndex;
            /** @type {?} */
            var removedItem = this.groupFields.splice(removedIndex, 1);
            (_a = this.groupFields).splice.apply(_a, __spread([addedIndex, 0], removedItem));
            this.setGroupColumns();
        };
        /**
         * @param {?} $event
         * @param {?} col
         * @return {?}
         */
        ColumnGroupSettingComponent.prototype.onFieldClick = /**
         * @param {?} $event
         * @param {?} col
         * @return {?}
         */
        function ($event, col) {
            this.activeCalculationCol = col;
        };
        ColumnGroupSettingComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'column-group-setting',
                        template: "<div #groupingSetting class=\"d-flex flex-column flex-fill column-group-setting\">\r\n\r\n    <div region=\"north\" class=\"north d-flex flex-column group-fields\" style=\"height: 78px; \">\r\n        <div class=\"title\">\r\n            {{'datagrid.settings.grouppingField' | locale }}\r\n            <span class=\"text-warning\"> ({{'datagrid.settings.moreGrouppingFieldWarningMessage' | locale }})</span>\r\n        </div>\r\n        <div #groupfieldcontainer class=\"flex-fill p-2 all-fields\">\r\n            <ul class=\"list-group\" style=\"display: inline-block;\"  column-group-drag (drop)=\"onGroupingFieldDropped($event)\">\r\n                <li class=\"list-group-item list-group-item-action btn btn-light smooth-dnd-draggable-wrapper group-field\"\r\n                *ngFor=\"let item of groupColumns\">\r\n                    {{ item.title }}\r\n                    <span class=\"f-icon f-icon-close\" style=\"cursor: pointer;\" title=\"{{'datagrid.settings.removeGrouppingFieldTip' | locale }}\" (click)=\"onRemoveGroupingField($event, item)\"></span>\r\n                </li>\r\n\r\n                <li class=\"list-group-item list-group-item-action btn btn-light btn-add-groupfield\" title=\"{{'datagrid.settings.addGrouppingFieldTip' | locale }}\"\r\n                    *ngIf=\"!groupFields || groupFields.length < 3\" (click)=\"toggleGroupingColumnPanel($event)\">\r\n                   <span class=\"f-icon f-icon-add\" style=\"font-size: 24px;\"></span>\r\n                </li>\r\n            </ul>\r\n            <div #selectcolumnspanel class=\"group-field-panel\" [style.display]=\"showSelectColumnsPanel? '': 'none'\"\r\n            [style.width.px]=\"groupfieldcontainer.offsetWidth - 16\">\r\n                <ul class=\"list-group\">\r\n                    <li class=\"list-group-item list-group-item-action btn btn-light\" *ngFor=\"let item of allowGroupColumns\"\r\n                    (click)=\"addGroupColumn($event, item)\" [style.display]=\"groupFields?.indexOf(item.field) > -1 ? 'none': ''\">\r\n                        {{ item.title }}\r\n                    </li>\r\n                </ul>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n    <div region=\"center\" class=\"center  d-flex flex-column flex-fill\" style=\"overflow:hidden;\">\r\n        <div class=\"group-sum-fields\">\r\n            {{'datagrid.settings.grouppingSummary' | locale}}\r\n        </div>\r\n        <div class=\"flex-fill p-2\" style=\" background-color: #fff; overflow: auto;\">\r\n            <div class=\"d-flex flex-row flex-fill dg-column-format-setting\" style=\"height: 100%\">\r\n                <div region=\"west\" class=\"west d-flex flex-column\" style=\"width: 360px; min-width:260px;overflow: hidden;\">\r\n                    <div style=\"overflow: auto;padding-right: 5px;\" class=\"flex-fill\">\r\n                        <ul class=\"list-group  list-group-flush\">\r\n                            <li class=\"list-group-item list-group-item-action format-setting-column\"\r\n                            *ngFor=\"let item of formatColumns\"\r\n                            [class.active]=\"activeCalculationCol && activeCalculationCol.field === item.field\"\r\n                            (click)=\"onFieldClick($event, item)\"\r\n                             >\r\n                                {{ item.title }}\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                 \r\n                </div>\r\n                <div region=\"center\" class=\"center flex-fill\" style=\"overflow:auto;padding: 0 10px; padding-left: 20px\">\r\n                    <form #groupSumform=\"ngForm\">\r\n                        <div class=\"farris-group-wrap\">\r\n                            <div class=\"form-group farris-form-group\">\r\n                                <label for=\"hpinput01\" class=\"col-form-label\">\r\n                                    <span class=\"farris-label-text\">{{'datagrid.settings.grouppingSummaryType' | locale}}</span>\r\n                                </label>\r\n                                <div class=\"farris-input-wrap\">\r\n                                   \r\n                                    <farris-combo-list name=\"groupFooter.options.calculationType\" \r\n                                    [data]=\" activeCalculationCol?.dataType === 'number'?  summaryItems : summaryItems2 \" \r\n                                    [editable]=\"false\"\r\n                                    [(ngModel)]=\"activeCalculationCol?.groupFooter.options.calculationType\"\r\n                                    [idField]=\"'value'\"\r\n                                    [textField]=\"'title'\"\r\n                                    [enableClear]=\"false\"></farris-combo-list>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"farris-group-wrap\" *ngIf=\"activeCalculationCol?.groupFooter.options.calculationType == -1\">\r\n                            <div class=\"form-group farris-form-group\">\r\n                                <label for=\"hpinput01\" class=\"col-form-label\">\r\n                                    <span class=\"farris-label-text\">{{'datagrid.settings.grouppingSummaryText' | locale}}</span>\r\n                                </label>\r\n                                <div class=\"farris-input-wrap\">\r\n                                    <input type=\"input\" name=\"groupFooter.options.text\" class=\"form-control\" [(ngModel)]=\"activeCalculationCol?.groupFooter.options.text\">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n               \r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    </div>\r\n\r\n</div>",
                        styles: ["\n        .column-group-setting{ height: 100%; background-color: #ffffff; padding: 0 10px 10px 10px}\n        .smooth-dnd-ghost.group-field {\n            z-index: 999999999 !important;\n        }\n        .active {\n            background-color: rgb(231 241 255);\n            color: rgb(0 0 0);\n        }\n        .column-group-setting .group-field {\n            float: left;max-width: 200px;margin-right: 10px;\n            width: auto; padding: 5px;padding-right: 30px;\n            border-radius: 20px;padding-left: 10px; cursor:move\n        }\n        .group-field .f-icon { position: absolute;right: 2px;top: 7px; }\n        .btn-add-groupfield{float: left;width: 32px;padding: 0px;padding-top: 3px; border-radius: 20px;}\n        .group-field-panel{\n            height: 260px; border-radius: 5px; z-index: 3;position: absolute;\n            background: rgb(255 255 255); box-shadow: 1px 1px 4px rgb(156 155 155 / 75%);\n            overflow: hidden;\n            overflow-y: auto;\n        }\n        .group-field-panel ul {\n            display: inline-block;margin: 20px;margin-top: 5px;\n        }\n        .group-field-panel li {\n            float: left; cursor: pointer;max-width: 200px;margin-right: 10px;width: auto;\n            padding: 10px; min-width: 80px; margin-top: 15px; text-align: center;\n        }\n        .format-setting-column {\n            background: rgba(247,248,251,0.6);\n            padding: 7px 10px;\n            margin-bottom: 5px;\n            border: 1px solid rgba(233,236,243,0.45);\n            border-radius: 5px;\n        }\n        .format-setting-column.active {\n            border: 1px solid rgb(42 135 255);\n            background: rgb(239 247 255);\n            border-top: 1px solid rgb(42 135 255)!important;\n            border-bottom: 1px solid rgb(42 135 255)!important;\n        }\n\n        "]
                    }] }
        ];
        /** @nocollapse */
        ColumnGroupSettingComponent.ctorParameters = function () { return [
            { type: core.Injector },
            { type: DatagridSettingsComponent },
            { type: core.ChangeDetectorRef }
        ]; };
        ColumnGroupSettingComponent.propDecorators = {
            columns: [{ type: core.Input }],
            fields: [{ type: core.Input }],
            formatColumns: [{ type: core.Input }],
            groupFields: [{ type: core.Input }],
            groupFieldsChange: [{ type: core.Output }],
            formatColumnsChange: [{ type: core.Output }],
            groupingSettingEl: [{ type: core.ViewChild, args: ['groupingSetting',] }],
            selectcolumnspanel: [{ type: core.ViewChild, args: ['selectcolumnspanel',] }],
            colForm: [{ type: core.ViewChild, args: ['groupSumform',] }]
        };
        return ColumnGroupSettingComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var wrapperClass = smoothDnd.constants.wrapperClass, animationClass = smoothDnd.constants.animationClass;
    smoothDnd.smoothDnD.dropHandler = smoothDnd.dropHandlers.reactDropHandler().handler;
    smoothDnd.smoothDnD.wrapChild = false;
    var ColumnVisibleDragDirective = /** @class */ (function () {
        function ColumnVisibleDragDirective(ngzone, injector, render, el) {
            var _this = this;
            this.ngzone = ngzone;
            this.injector = injector;
            this.render = render;
            this.el = el;
            this.drop = new core.EventEmitter();
            this.options = {
                behaviour: 'move',
                dragHandleSelector: '.field-drag-handle',
                dropPlaceholder: {
                    className: 'drop-group-field',
                },
                getGhostParent: (/**
                 * @return {?}
                 */
                function () {
                    return document.body;
                }),
                getChildPayload: this.getChildPayload.bind(this),
                shouldAcceptDrop: (/**
                 * @param {?} sourceContainerOptions
                 * @param {?} payload
                 * @return {?}
                 */
                function (sourceContainerOptions, payload) {
                    return true;
                }),
                onDropReady: (/**
                 * @param {?} dropResult
                 * @return {?}
                 */
                function (dropResult) {
                    _this.ngzone.run((/**
                     * @return {?}
                     */
                    function () {
                        _this.onDropReady(dropResult);
                    }));
                }),
                onDrop: (/**
                 * @param {?} dropResult
                 * @return {?}
                 */
                function (dropResult) {
                    _this.ngzone.run((/**
                     * @return {?}
                     */
                    function () {
                        _this.drop.emit(dropResult);
                    }));
                }),
                onDragEnter: (/**
                 * @return {?}
                 */
                function () {
                    _this.ngzone.run((/**
                     * @return {?}
                     */
                    function () {
                        _this.onDragEnter();
                    }));
                }),
                onDragStart: (/**
                 * @param {?} info
                 * @return {?}
                 */
                function (info) {
                    _this.ngzone.run((/**
                     * @return {?}
                     */
                    function () {
                        _this.onDragStart(info);
                    }));
                }),
                onDragEnd: (/**
                 * @param {?} info
                 * @return {?}
                 */
                function (info) {
                    _this.ngzone.run((/**
                     * @return {?}
                     */
                    function () {
                        _this.onDragEnd(info);
                    }));
                })
            };
        }
        /**
         * @return {?}
         */
        ColumnVisibleDragDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.initDnD();
        };
        /**
         * @return {?}
         */
        ColumnVisibleDragDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.disposeDnd();
        };
        /**
         * @private
         * @return {?}
         */
        ColumnVisibleDragDirective.prototype.disposeDnd = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.container) {
                this.container.dispose();
                this.container = null;
            }
        };
        /**
         * @private
         * @return {?}
         */
        ColumnVisibleDragDirective.prototype.initDnD = /**
         * @private
         * @return {?}
         */
        function () {
            this.disposeDnd();
            this.container = smoothDnd.smoothDnD(this.el.nativeElement, this.options);
        };
        /**
         * @private
         * @param {?} index
         * @return {?}
         */
        ColumnVisibleDragDirective.prototype.getChildPayload = /**
         * @private
         * @param {?} index
         * @return {?}
         */
        function (index) {
            return index;
        };
        /**
         * @private
         * @param {?} dropResult
         * @return {?}
         */
        ColumnVisibleDragDirective.prototype.onDropReady = /**
         * @private
         * @param {?} dropResult
         * @return {?}
         */
        function (dropResult) {
            // console.log('DROP READY', dropResult);
        };
        /**
         * @private
         * @param {?} info
         * @return {?}
         */
        ColumnVisibleDragDirective.prototype.onDragStart = /**
         * @private
         * @param {?} info
         * @return {?}
         */
        function (info) {
            console.log('DRAG START', info);
        };
        /**
         * @private
         * @param {?} info
         * @return {?}
         */
        ColumnVisibleDragDirective.prototype.onDragEnd = /**
         * @private
         * @param {?} info
         * @return {?}
         */
        function (info) {
            // console.log('DRAG END', info);
        };
        /**
         * @private
         * @return {?}
         */
        ColumnVisibleDragDirective.prototype.onDragEnter = /**
         * @private
         * @return {?}
         */
        function () {
            // console.log('DRAG ENTER');
        };
        ColumnVisibleDragDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[column-visible-drag]',
                    },] }
        ];
        /** @nocollapse */
        ColumnVisibleDragDirective.ctorParameters = function () { return [
            { type: core.NgZone },
            { type: core.Injector },
            { type: core.Renderer2 },
            { type: core.ElementRef }
        ]; };
        ColumnVisibleDragDirective.propDecorators = {
            drop: [{ type: core.Output }],
            options: [{ type: core.Input }]
        };
        return ColumnVisibleDragDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    smoothDnd.smoothDnD.dropHandler = smoothDnd.dropHandlers.reactDropHandler().handler;
    smoothDnd.smoothDnD.wrapChild = false;
    var ColumnGroupDragDirective = /** @class */ (function () {
        function ColumnGroupDragDirective(ngzone, injector, render, el) {
            var _this = this;
            this.ngzone = ngzone;
            this.injector = injector;
            this.render = render;
            this.el = el;
            this.drop = new core.EventEmitter();
            this.options = {
                orientation: 'horizontal',
                behaviour: 'move',
                dropPlaceholder: {
                    className: 'drop-group-field',
                },
                getGhostParent: (/**
                 * @return {?}
                 */
                function () {
                    return document.body;
                }),
                getChildPayload: this.getChildPayload.bind(this),
                shouldAcceptDrop: (/**
                 * @param {?} sourceContainerOptions
                 * @param {?} payload
                 * @return {?}
                 */
                function (sourceContainerOptions, payload) {
                    return true;
                }),
                onDropReady: (/**
                 * @param {?} dropResult
                 * @return {?}
                 */
                function (dropResult) {
                    _this.ngzone.run((/**
                     * @return {?}
                     */
                    function () {
                        _this.onDropReady(dropResult);
                    }));
                }),
                onDrop: (/**
                 * @param {?} dropResult
                 * @return {?}
                 */
                function (dropResult) {
                    _this.ngzone.run((/**
                     * @return {?}
                     */
                    function () {
                        _this.drop.emit(dropResult);
                    }));
                }),
                onDragEnter: (/**
                 * @return {?}
                 */
                function () {
                    _this.ngzone.run((/**
                     * @return {?}
                     */
                    function () {
                        _this.onDragEnter();
                    }));
                }),
                onDragStart: (/**
                 * @param {?} info
                 * @return {?}
                 */
                function (info) {
                    _this.ngzone.run((/**
                     * @return {?}
                     */
                    function () {
                        _this.onDragStart(info);
                    }));
                }),
                onDragEnd: (/**
                 * @param {?} info
                 * @return {?}
                 */
                function (info) {
                    _this.ngzone.run((/**
                     * @return {?}
                     */
                    function () {
                        _this.onDragEnd(info);
                    }));
                })
            };
        }
        /**
         * @return {?}
         */
        ColumnGroupDragDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.initDnD();
        };
        /**
         * @return {?}
         */
        ColumnGroupDragDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.disposeDnd();
        };
        /**
         * @private
         * @return {?}
         */
        ColumnGroupDragDirective.prototype.disposeDnd = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.container) {
                this.container.dispose();
                this.container = null;
            }
        };
        /**
         * @private
         * @return {?}
         */
        ColumnGroupDragDirective.prototype.initDnD = /**
         * @private
         * @return {?}
         */
        function () {
            this.disposeDnd();
            this.container = smoothDnd.smoothDnD(this.el.nativeElement, this.options);
        };
        /**
         * @private
         * @param {?} index
         * @return {?}
         */
        ColumnGroupDragDirective.prototype.getChildPayload = /**
         * @private
         * @param {?} index
         * @return {?}
         */
        function (index) {
            return index;
        };
        /**
         * @private
         * @param {?} dropResult
         * @return {?}
         */
        ColumnGroupDragDirective.prototype.onDropReady = /**
         * @private
         * @param {?} dropResult
         * @return {?}
         */
        function (dropResult) {
            // console.log('DROP READY', dropResult);
        };
        /**
         * @private
         * @param {?} info
         * @return {?}
         */
        ColumnGroupDragDirective.prototype.onDragStart = /**
         * @private
         * @param {?} info
         * @return {?}
         */
        function (info) {
            // console.log('DRAG START', info);
        };
        /**
         * @private
         * @param {?} info
         * @return {?}
         */
        ColumnGroupDragDirective.prototype.onDragEnd = /**
         * @private
         * @param {?} info
         * @return {?}
         */
        function (info) {
            // console.log('DRAG END', info);
        };
        /**
         * @private
         * @return {?}
         */
        ColumnGroupDragDirective.prototype.onDragEnter = /**
         * @private
         * @return {?}
         */
        function () {
            // console.log('DRAG ENTER');
        };
        ColumnGroupDragDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[column-group-drag]',
                    },] }
        ];
        /** @nocollapse */
        ColumnGroupDragDirective.ctorParameters = function () { return [
            { type: core.NgZone },
            { type: core.Injector },
            { type: core.Renderer2 },
            { type: core.ElementRef }
        ]; };
        ColumnGroupDragDirective.propDecorators = {
            drop: [{ type: core.Output }],
            options: [{ type: core.Input }]
        };
        return ColumnGroupDragDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DatagridSettingsModule = /** @class */ (function () {
        function DatagridSettingsModule() {
        }
        /**
         * @param {?=} apiUri
         * @return {?}
         */
        DatagridSettingsModule.forRoot = /**
         * @param {?=} apiUri
         * @return {?}
         */
        function (apiUri) {
            return {
                ngModule: DatagridSettingsModule,
                providers: [
                    { provide: uiDatagrid.GRID_SETTINGS_SERVICE, useClass: DatagridSettingsService }
                ]
            };
        };
        DatagridSettingsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            DatagridSettingsComponent,
                            DatagridSortSettingComponent,
                            DatagridViewColumnsComponent,
                            ColumnFormatSettingComponent,
                            ColumnGroupSettingComponent,
                            ColumnVisibleDragDirective,
                            ColumnGroupDragDirective,
                            SimpleColumnsComponent,
                            NewSchemeComponent,
                            SchemeListComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            uiMultiSelect.MultiSelectModule,
                            uiComboList.ComboListModule,
                            uiDatagrid.DatagridModule,
                            uiCommon.FarrisCommonModule.forRoot(),
                            uiMessager.MessagerModule.forRoot(),
                            uiLocale.LocaleModule.forRoot(),
                            uiModal.ModalModule.forRoot(),
                            uiSwitch.SwitchModule,
                            uiTooltip.FarrisTooltipModule,
                            uiNotify.NotifyModule.forRoot(),
                            uiOrganizationSelector.OrganizationSelectorModule,
                            uiLanguageTextbox.LanguageTextboxModule
                        ],
                        entryComponents: [
                            DatagridSettingsComponent,
                            SimpleColumnsComponent,
                            NewSchemeComponent,
                            SchemeListComponent
                        ],
                        exports: [
                            DatagridSettingsComponent,
                            SimpleColumnsComponent,
                            NewSchemeComponent,
                            SchemeListComponent
                        ]
                    },] }
        ];
        return DatagridSettingsModule;
    }());

    exports.ColumnFormatSettingComponent = ColumnFormatSettingComponent;
    exports.ColumnGroupDragDirective = ColumnGroupDragDirective;
    exports.ColumnGroupSettingComponent = ColumnGroupSettingComponent;
    exports.ColumnVisibleDragDirective = ColumnVisibleDragDirective;
    exports.DatagridSettingsComponent = DatagridSettingsComponent;
    exports.DatagridSettingsModule = DatagridSettingsModule;
    exports.DatagridSettingsService = DatagridSettingsService;
    exports.DatagridSortSettingComponent = DatagridSortSettingComponent;
    exports.DatagridViewColumnsComponent = DatagridViewColumnsComponent;
    exports.GRID_SETTINGS_WEBAPI = GRID_SETTINGS_WEBAPI;
    exports.NewSchemeComponent = NewSchemeComponent;
    exports.SchemeListComponent = SchemeListComponent;
    exports.SimpleColumnsComponent = SimpleColumnsComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=farris-ui-datagrid-settings.umd.js.map
