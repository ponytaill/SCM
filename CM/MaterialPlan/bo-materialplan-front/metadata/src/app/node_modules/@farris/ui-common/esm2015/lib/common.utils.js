/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ColumnFormatService } from '@farris/ui-common/column';
import * as i0 from "@angular/core";
export class CommonUtils {
    constructor() {
        this.cfs = null;
        if (!this.cfs) {
            this.cfs = new ColumnFormatService(null, null);
        }
    }
    /**
     * 获取对象中指定字段的值。 field: 可以为带有层级结构的路径，如： user.firstName | name 等
     * data: 获取字段的数据源，一般为JSON对象
     * safe: 为true, 将html字符进行转码输出，默认为 false
     * @param {?} field
     * @param {?} data
     * @param {?=} safe
     * @return {?}
     */
    getValue(field, data, safe = false) {
        if (!data) {
            return '';
        }
        /** @type {?} */
        let resultVal = '';
        if (field.indexOf('.') === -1 && data.hasOwnProperty(field)) {
            resultVal = data[field];
        }
        else {
            resultVal = field.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), data);
        }
        if (safe) {
            return this.formatterValue(resultVal);
        }
        else {
            return resultVal;
        }
    }
    /**
     * 更新指定对象中某个字段的值
     * @param {?} obj 被更新对象
     * @param {?} field 被更新字段
     * @param {?} val 新值
     * @param {?=} nest 是否为嵌套，默认为 true
     * @return {?}
     */
    setValue(obj, field, val, nest = true) {
        if (field) {
            if (field.indexOf('.') > -1 && nest) {
                /** @type {?} */
                let lastObj = null;
                /** @type {?} */
                const _fields = field.split('.');
                _fields.reduce((/**
                 * @param {?} c
                 * @param {?} p
                 * @return {?}
                 */
                (c, p) => {
                    lastObj = c;
                    return c[p];
                }), obj);
                if (lastObj) {
                    lastObj[_fields.pop()] = val;
                }
            }
            else {
                obj[field] = val;
            }
        }
    }
    /**
     * @param {?} value
     * @param {?} enumData
     * @param {?} valueField
     * @return {?}
     */
    getEnumItem(value, enumData, valueField) {
        /** @type {?} */
        const item = enumData.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n[valueField] == value));
        return item;
    }
    /**
     * @private
     * @param {?} value
     * @param {?} col
     * @return {?}
     */
    _getEnumTitleFromColumn(value, col) {
        /** @type {?} */
        const _col = (/** @type {?} */ (col));
        /** @type {?} */
        const formatter = (/** @type {?} */ (_col.formatter));
        if (formatter && typeof formatter === 'object') {
            if (formatter.type === 'enum' && formatter.options) {
                return this.getEnumTitleFromColumnOptions(value, formatter.options);
            }
        }
        return value;
    }
    /**
     * @param {?} col
     * @param {?} data
     * @return {?}
     */
    getEnumTitle(col, data) {
        /** @type {?} */
        const val = this.getValue(col.field, data);
        return this._getEnumTitleFromColumn(val, col);
    }
    /**
     * @param {?} value
     * @param {?} opts
     * @return {?}
     */
    getEnumTitleFromColumnOptions(value, opts) {
        const { data, valueField, textField } = opts;
        /** @type {?} */
        const item = this.getEnumItem(value, data, valueField);
        if (item) {
            return item[textField];
        }
        else {
            return value;
        }
    }
    /**
     * @param {?} str
     * @return {?}
     */
    escapeHtml(str) {
        if (str === null || str === undefined) {
            return '';
        }
        return str
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/\"/g, '&quot;')
            .replace(/\'/g, '&#39;')
            .replace(/\//g, '&#x2F;');
    }
    /**
     * @param {?} str
     * @return {?}
     */
    unescapeHtml(str) {
        if (str === null || str === undefined) {
            return '';
        }
        return str
            .replace(/&amp;/g, '&')
            .replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>')
            .replace(/&quot;/g, '"')
            .replace(/&#39;/g, '\'')
            .replace(/&#x2F;/g, '/');
    }
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    formatterValue(val) {
        if (val === null || val === undefined || val === '') {
            return '';
        }
        if (typeof val === 'string') {
            return this.escapeHtml(val);
        }
        return val;
    }
    /**
     * 获取字符串在页面中的真实宽度
     * @param {?} txt
     * @param {?} font
     * @return {?}
     */
    getTextWidth(txt, font) {
        // const frag = document.createDocumentFragment();
        /** @type {?} */
        const canvas = document.createElement('canvas');
        /** @type {?} */
        const context = canvas.getContext('2d');
        context.font = font;
        /** @type {?} */
        const metrics = context.measureText(txt);
        return Math.round(metrics.width);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    removeStyleSheet(id) {
        /** @type {?} */
        const styleElement = document.querySelector('#' + id);
        if (styleElement) {
            styleElement.remove();
        }
    }
    /**
     * @param {?} styleSheetId
     * @return {?}
     */
    createStyleSheet(styleSheetId) {
        /** @type {?} */
        const htmlHead = document.querySelector('head');
        /** @type {?} */
        const styleEleId = styleSheetId;
        /** @type {?} */
        let styleElement = null;
        if (document.querySelector('#' + styleEleId)) {
            styleElement = document.querySelector('#' + styleEleId);
            styleElement.innerText = '';
        }
        else {
            styleElement = document.createElement('style');
            styleElement.id = styleEleId;
            htmlHead.appendChild(styleElement);
        }
        return styleElement;
    }
    /**
     * @param {?} styleSheetId
     * @return {?}
     */
    getStyleSheet(styleSheetId) {
        /** @type {?} */
        const styleSheets = (/** @type {?} */ (document.styleSheets));
        /** @type {?} */
        let styleSheet = null;
        for (const stylesheet of styleSheets) {
            if ((stylesheet.ownerNode || stylesheet['owningElement']).id === styleSheetId) {
                styleSheet = stylesheet;
                break;
            }
        }
        return styleSheet;
    }
    /**
     * 与现有样式合并
     * @param {?} rules
     * @param {?} styleSheet
     * @return {?}
     */
    appendCssRules(rules, styleSheet) {
        for (const rule of rules) {
            /** @type {?} */
            const ruleName = rule.slice(0, rule.indexOf('{'));
            /** @type {?} */
            const removedCssRule = this.removeCssRule(ruleName, styleSheet);
            /** @type {?} */
            let cssText = '';
            if (removedCssRule) {
                cssText += removedCssRule.cssText.slice(removedCssRule.cssText.indexOf('{') + 1, removedCssRule.cssText.indexOf('}'));
            }
            cssText += rule.slice(rule.indexOf('{') + 1, rule.indexOf('}')).replace(/"/g, '').replace(/,/g, ';') + ';';
            if (styleSheet.addRule) {
                styleSheet.addRule(ruleName, cssText, 0);
            }
            else {
                /** @type {?} */
                const _newRule = `${ruleName}{ ${cssText} }`;
                styleSheet.insertRule(_newRule, 0);
            }
        }
    }
    /**
     * 覆盖现有的样式
     * @param {?} rules
     * @param {?} styleSheet
     * @return {?}
     */
    appendCssRules2(rules, styleSheet) {
        for (const rule of rules) {
            /** @type {?} */
            const ruleName = rule.slice(0, rule.indexOf('{'));
            /** @type {?} */
            const removedCssRule = this.removeCssRule(ruleName, styleSheet);
            /** @type {?} */
            const cssText = rule.slice(rule.indexOf('{') + 1, rule.indexOf('}')).replace(/"/g, '').replace(/,/g, ';') + ';';
            if (styleSheet.addRule) {
                styleSheet.addRule(ruleName, cssText, 0);
            }
            else {
                /** @type {?} */
                const _newRule = `${ruleName}{ ${cssText} }`;
                styleSheet.insertRule(_newRule, 0);
            }
        }
    }
    /**
     * @param {?} ruleName
     * @param {?} styleSheet
     * @return {?}
     */
    getCssRule(ruleName, styleSheet) {
        /** @type {?} */
        const cssRules = (/** @type {?} */ ((styleSheet.cssRules || styleSheet.rules)));
        /** @type {?} */
        let r = null;
        for (const rule of cssRules) {
            if (rule.selectorText == ruleName) {
                r = rule;
            }
        }
        return r;
    }
    /**
     * @param {?} ruleName
     * @param {?} styleSheet
     * @return {?}
     */
    removeCssRule(ruleName, styleSheet) {
        /** @type {?} */
        const cssRules = (/** @type {?} */ ((styleSheet.cssRules || styleSheet.rules)));
        /** @type {?} */
        let ii = 0;
        /** @type {?} */
        let cssRule = false;
        do {
            cssRule = cssRules[ii];
            if (cssRule) {
                if (cssRule.selectorText.toLowerCase() == ruleName.toLowerCase()) {
                    if (styleSheet.cssRules) {
                        styleSheet.deleteRule(ii);
                    }
                    else {
                        styleSheet.removeRule(ii);
                    }
                    return cssRule;
                }
            }
            ii++;
        } while (cssRule);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    isNullOrUndefined(val) {
        return val === null || val === undefined;
    }
    /**
     * @return {?}
     */
    isIE() {
        /** @type {?} */
        const uA = window.navigator.userAgent;
        return /msie\s|trident\/|edge\//i.test(uA) && !!('uniqueID' in document || 'documentMode' in document || ('ActiveXObject' in window) || 'MSInputMethodContext' in window);
    }
    /**
     * @param {?} sorts
     * @return {?}
     */
    buildSortString(sorts) {
        return this.cfs.buildSortString(sorts);
    }
    /**
     * @param {?} conditions
     * @return {?}
     */
    buildSqlWhere(conditions) {
        return this.cfs.buildSqlWhere(conditions);
    }
    /**
     * @return {?}
     */
    getBrowserType() {
        /** @type {?} */
        const ua = navigator.userAgent.toLowerCase();
        // 获取用户端信息
        /** @type {?} */
        const info = {
            ie: /msie/.test(ua) && !/opera/.test(ua),
            //  匹配IE浏览器
            op: /opera/.test(ua),
            //  匹配Opera浏览器
            sa: /version.*safari/.test(ua),
            // 匹配Safari浏览器
            ch: /chrome/.test(ua),
            //  匹配Chrome浏览器
            ff: /gecko/.test(ua) && !/webkit/.test(ua) // 匹配Firefox浏览器
        };
        return info;
    }
    /**
     * @return {?}
     */
    getFFVer() {
        /** @type {?} */
        const ua = navigator.userAgent;
        /** @type {?} */
        const b = ua.indexOf('Firefox/');
        if (b < 0) {
            return 0;
        }
        return parseFloat(ua.substring(b + 8, ua.lastIndexOf('\.')));
    }
    /**
     * @param {?} name
     * @param {?=} locationSearch
     * @return {?}
     */
    getQueryString(name, locationSearch = '') {
        /** @type {?} */
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
        /** @type {?} */
        let _search = window.location.search;
        if (locationSearch) {
            _search = locationSearch;
        }
        /** @type {?} */
        var r = _search.substring(1).match(reg);
        if (r != null)
            return (r[2]);
        return null;
    }
    /**
     * 获取页面中body下所有元素的zIndex, 并返回下个浮层的新zindex
     * @param {?=} upperLayers
     * @return {?}
     */
    getFloatingLayerIndex(upperLayers = 1) {
        /** @type {?} */
        const overlays = Array.from(document.body.querySelectorAll('body>div, body>farris-dialog>.farris-modal,body>.farris-modal')).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return parseInt(window.getComputedStyle(n).zIndex, 10);
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n));
        /** @type {?} */
        const maxZindex = Math.max(...overlays);
        return maxZindex + upperLayers;
    }
}
CommonUtils.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
CommonUtils.ctorParameters = () => [];
/** @nocollapse */ CommonUtils.ngInjectableDef = i0.defineInjectable({ factory: function CommonUtils_Factory() { return new CommonUtils(); }, token: CommonUtils, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    CommonUtils.prototype.cfs;
}
//# sourceMappingURL=data:application/json;base64,