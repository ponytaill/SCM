{"version":3,"sources":["ng://@farris/ui-view-change/lib/view-change.service.ts","ng://@farris/ui-view-change/lib/view-change.component.ts","ng://@farris/ui-view-change/lib/view-change.directive.ts","ng://@farris/ui-view-change/lib/view-change.module.ts"],"names":["ViewChangeService","prototype","addViewItem","itemId","viewContainerId","this","defaultId","viewContainers","hasElement","items","push","removeViewItem","filter","el","length","updateCurrentViewId","type","currentViewType","changeView","changeCurrentViewId","next","getChangeCurrentViewId","groupId","some","item","Injectable","args","providedIn","BehaviorSubject","ViewChangeComponent","ngOnInit","_this","toolbarData","defaultType","find","bar","activeTypeItem","toolTypeChange","emit","ngAfterViewInit","viewChangeService","viewGroupId","listItemClick","disable","typelist","_renderer","setStyle","nativeElement","dropdownMouseEnter","dropdownMouseLeave","Component","selector","template","encapsulation","ViewEncapsulation","None","Renderer2","Input","Output","ViewChild","viewType","EventEmitter","FarrisViewItemDirective","viewItemType","fViewGroupId","subscribe","render","removeClass","elementRef","addClass","ngOnDestroy","Directive","ElementRef","ViewChangeModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"4YAAA,IAAAA,GA0BEA,EAAAC,UAAAC,YAAA,SAAYC,EAAeC,GACzB,QADyB,IAAAA,IAAAA,EAAkBC,KAAKC,WAC7CD,KAAKE,eAAeH,GAAiB,CACtC,GAAIC,KAAKG,WAAWL,EAAQC,GAC1B,OAGAC,KAAKE,eAAeH,GAAiBK,MAAMC,KAAKP,QAIlDE,KAAKE,eAAeH,GAAgB,CAClCK,MAAO,IAETJ,KAAKE,eAAeH,GAAiBK,MAAMC,KAAKP,IAIpDH,EAAAC,UAAAU,eAAA,SAAeR,EAAQC,GAErB,QAFqB,IAAAA,IAAAA,EAAkBC,KAAKC,kBACrCD,KAAKE,eAAeH,GACxBC,KAAKE,gBAAkBF,KAAKE,eAAeH,GAAiB,KACvDK,EAAQJ,KAAKE,eAAeH,GAAiBK,MAAMG,OAAM,SAACC,GAC9D,OAAOA,IAAOV,IAEhB,IAAKM,EAAMK,OAET,mBADOT,KAAKE,eAAeH,GAG7BC,KAAKE,eAAeH,GAAiBK,MAAQA,IAKjDT,EAAAC,UAAAc,oBAAA,SAAoBC,EAAaZ,QAAA,IAAAA,IAAAA,EAAkBC,KAAKC,WACtDD,KAAKY,gBAAgBb,GAAmBY,MACpCE,EAAW,GACfA,EAAWd,GAAiBY,EAC5BX,KAAKc,oBAAoBC,KAAKF,IAEhClB,EAAAC,UAAAoB,uBAAA,WACE,OAAOhB,KAAKc,qBAENnB,EAAAC,UAAAO,WAAR,SAAmBL,EAAgBmB,GACjC,OAAOjB,KAAKE,eAAee,GAASb,MAAMc,KAAI,SAAEC,GAAkB,OAAAA,IAASrB,yBA1D9EsB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,uJAaZ,SAAA3B,IATiBK,KAAAC,UAAmB,UAEpCD,KAAAY,gBAAsB,GAGtBZ,KAAAE,eAA+B,GAE/BF,KAAAc,oBAA4C,IAAIS,EAAAA,gBAAqB,MCtBvE,IAAAC,GAyBEA,EAAA5B,UAAA6B,SAAA,WAAA,IAAAC,EAAA1B,KACE,GAAIA,KAAK2B,aAAe3B,KAAK2B,YAAYlB,OACvC,GAAIT,KAAK4B,YAAa,KAChBT,EAAOnB,KAAK2B,YAAYE,KAAI,SAAEC,GAChC,OAAOA,EAAU,OAAMJ,EAAKE,cAE9B5B,KAAK+B,eAAiBZ,EACtBnB,KAAKgC,eAAeC,KAAKjC,KAAK+B,qBAG9B/B,KAAK+B,eAAiB/B,KAAK2B,YAAY,GACvC3B,KAAKgC,eAAeC,KAAKjC,KAAK+B,iBAMpCP,EAAA5B,UAAAsC,gBAAA,WACMlC,KAAKmC,oBACPnC,KAAKmC,kBAAoB,IAAIxC,GAE/BK,KAAKmC,kBAAkBzB,oBAAoBV,KAAK+B,eAAqB,KAAE/B,KAAKoC,cAG9EZ,EAAA5B,UAAAyC,cAAA,SAAclB,GACRA,EAAKmB,SAAWtC,KAAK+B,eAAqB,OAAMZ,EAAW,OAG/DnB,KAAK+B,eAAiBZ,EAClBnB,KAAKmC,oBACPnC,KAAKmC,kBAAoB,IAAIxC,GAE/BK,KAAKmC,kBAAkBzB,oBAAoBV,KAAK+B,eAAqB,KAAE/B,KAAKoC,aAC5EpC,KAAKgC,eAAeC,KAAKd,GACrBnB,KAAKuC,UACPvC,KAAKwC,UAAUC,SACbzC,KAAKuC,SAASG,cACd,UACA,UAKNlB,EAAA5B,UAAA+C,mBAAA,WACE3C,KAAKwC,UAAUC,SACbzC,KAAKuC,SAASG,cACd,UACA,UAGJlB,EAAA5B,UAAAgD,mBAAA,WACE5C,KAAKwC,UAAUC,SACbzC,KAAKuC,SAASG,cACd,UACA,6BA5ELG,EAAAA,UAASxB,KAAA,CAAC,CACTyB,SAAU,qBACVC,SAAA,srEAEAC,cAAeC,EAAAA,kBAAkBC,6GAP6CC,EAAAA,iBACvExD,0CAWNyD,EAAAA,wBACAA,EAAAA,2BACAA,EAAAA,2BACAA,EAAAA,8BAGAC,EAAAA,yBAEAC,EAAAA,UAASjC,KAAA,CAAC,eA+DbG,GA7DE,SAAAA,EAAoBgB,EACVL,GADUnC,KAAAwC,UAAAA,EACVxC,KAAAmC,kBAAAA,EAVDnC,KAAAuD,SAAmB,OAEnBvD,KAAAoC,YAAqB,UAGpBpC,KAAAgC,eAAiB,IAAIwB,EAAAA,aCdjC,IAAAC,GAgBWA,EAAA7D,UAAA6B,SAAP,WAAA,IAAAC,EAAA1B,KACIA,KAAKmC,kBAAkBtC,YAAYG,KAAK0D,aAAc1D,KAAK2D,cAC3D3D,KAAKmC,kBAAkBnB,yBAAyB4C,UAAS,SAAEhD,GACnDA,GACAA,EAAgBc,EAAKiC,gBAGjB/C,EAAgBc,EAAKiC,eAAiBjC,EAAKgC,aAE/ChC,EAAKmC,OAAOC,YAAYpC,EAAKqC,WAAWrB,cAAe,0BAIvDhB,EAAKmC,OAAOG,SAAStC,EAAKqC,WAAWrB,cAAe,8BAKzDe,EAAA7D,UAAAqE,YAAP,WACIjE,KAAKmC,kBAAkB7B,eAAeN,KAAK0D,aAAc1D,KAAK2D,mCAnCrEO,EAAAA,UAAS7C,KAAA,CAAC,CACPyB,SAAU,2DAJ+CqB,EAAAA,kBACpDxE,SADmHwD,EAAAA,mDAQvHC,EAAAA,MAAK/B,KAAA,CAAC,mCACN+B,EAAAA,MAAK/B,KAAA,CAAC,mBA+BToC,GA7BE,SAAAA,EACUM,EACA5B,EACA0B,GAFA7D,KAAA+D,WAAAA,EACA/D,KAAAmC,kBAAAA,EACAnC,KAAA6D,OAAAA,EALa7D,KAAA2D,aAAuB,UCVlD,IAAAS,uBAKCC,EAAAA,SAAQhD,KAAA,CAAC,CACRiD,aAAc,CAAC9C,EAAoBiC,GACnCc,QAAS,CACPC,EAAAA,cAEFC,QAAS,CAACjD,EAAoBiC,OAEAW,GAPhC,SAAAA","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject, BehaviorSubject } from 'rxjs';\r\n\r\ninterface ViewItems {\r\n  items: Array<string>;\r\n}\r\ninterface viewContainer {\r\n  [viewGroupIdId: string]: ViewItems;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ViewChangeService {\r\n  /**é»è®¤è§å¾åæ¢åç»åç§° */\r\n  private readonly defaultId:string = 'default';\r\n  //å½åæ¾ç¤ºè§å¾\r\n  currentViewType:any = {};\r\n\r\n  /**contents */\r\n  viewContainers:viewContainer = {};\r\n\r\n  changeCurrentViewId: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n\r\n  constructor() { }\r\n\r\n  addViewItem(itemId:string, viewContainerId = this.defaultId){\r\n    if(this.viewContainers[viewContainerId]){\r\n      if (this.hasElement(itemId, viewContainerId)) {\r\n        return;\r\n      }\r\n      else{\r\n        this.viewContainers[viewContainerId].items.push(itemId);\r\n      }\r\n    }\r\n    else{\r\n      this.viewContainers[viewContainerId] = {\r\n        items: []\r\n      } as ViewItems;\r\n      this.viewContainers[viewContainerId].items.push(itemId);\r\n    }\r\n  }\r\n\r\n  removeViewItem(itemId, viewContainerId = this.defaultId){\r\n    delete this.viewContainers[viewContainerId];\r\n    if(this.viewContainers && this.viewContainers[viewContainerId]){\r\n      const items = this.viewContainers[viewContainerId].items.filter(el=>{\r\n        return el !== itemId;\r\n      })\r\n      if (!items.length) {\r\n        delete this.viewContainers[viewContainerId];\r\n        return;\r\n      }\r\n      this.viewContainers[viewContainerId].items = items;\r\n    }\r\n  }\r\n\r\n  /**å­å¨currentpageid */\r\n  updateCurrentViewId(type:string, viewContainerId = this.defaultId){\r\n    this.currentViewType[viewContainerId] = type ;\r\n    let changeView={};\r\n    changeView[viewContainerId]=type;\r\n    this.changeCurrentViewId.next(changeView);\r\n  }\r\n  getChangeCurrentViewId(){\r\n    return this.changeCurrentViewId;\r\n  }\r\n  private hasElement(itemId: string, groupId: string): boolean {\r\n    return this.viewContainers[groupId].items.some((item): boolean => item === itemId);\r\n  }\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, ElementRef, ViewChild, Renderer2, AfterViewInit, ViewEncapsulation } from '@angular/core';\r\nimport { ViewChangeService } from './view-change.service';\r\n\r\n@Component({\r\n  selector: 'farris-view-change',\r\n  templateUrl: './view-change.component.html',\r\n  styleUrls: ['./view-change.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n  // providers:[ ViewChangeService ]\r\n})\r\nexport class ViewChangeComponent implements OnInit ,AfterViewInit{\r\n\r\n  @Input() toolbarData;\r\n  @Input() viewType: string = 'tile';\r\n  @Input() defaultType: string;\r\n  @Input() viewGroupId:string = 'default';\r\n  activeTypeItem;\r\n\r\n  @Output() toolTypeChange = new EventEmitter();\r\n\r\n  @ViewChild('typelist') typelist: ElementRef;\r\n\r\n  constructor(private _renderer: Renderer2,\r\n    private viewChangeService: ViewChangeService) { }\r\n\r\n  ngOnInit() {\r\n    if (this.toolbarData && this.toolbarData.length) {\r\n      if (this.defaultType) {\r\n        let item = this.toolbarData.find((bar) => {\r\n          return bar['type'] === this.defaultType;\r\n        })\r\n        this.activeTypeItem = item;\r\n        this.toolTypeChange.emit(this.activeTypeItem);\r\n      }\r\n      else {\r\n        this.activeTypeItem = this.toolbarData[0];\r\n        this.toolTypeChange.emit(this.activeTypeItem);\r\n      }\r\n\r\n      \r\n    }\r\n  }\r\n  ngAfterViewInit(): void {\r\n    if(!this.viewChangeService){\r\n      this.viewChangeService = new ViewChangeService();\r\n    }\r\n    this.viewChangeService.updateCurrentViewId(this.activeTypeItem['type'],this.viewGroupId);\r\n  }\r\n\r\n  listItemClick(item) {\r\n    if (item.disable || this.activeTypeItem['type'] === item['type']) {\r\n      return;\r\n    }\r\n    this.activeTypeItem = item;\r\n    if(!this.viewChangeService){\r\n      this.viewChangeService = new ViewChangeService();\r\n    }\r\n    this.viewChangeService.updateCurrentViewId(this.activeTypeItem['type'],this.viewGroupId);\r\n    this.toolTypeChange.emit(item);\r\n    if (this.typelist) {\r\n      this._renderer.setStyle(\r\n        this.typelist.nativeElement,\r\n        'display',\r\n        'none'\r\n      );\r\n    }\r\n  }\r\n\r\n  dropdownMouseEnter() {\r\n    this._renderer.setStyle(\r\n      this.typelist.nativeElement,\r\n      'display',\r\n      'block'\r\n    );\r\n  }\r\n  dropdownMouseLeave() {\r\n    this._renderer.setStyle(\r\n      this.typelist.nativeElement,\r\n      'display',\r\n      'none'\r\n    );\r\n  }\r\n\r\n}\r\n","import { style } from '@angular/animations';\r\nimport { Directive, Injectable, Input, EventEmitter, Output, ElementRef, OnInit, OnDestroy, ChangeDetectorRef, HostBinding, Renderer2, RendererStyleFlags2 } from '@angular/core';\r\nimport { ViewChangeService } from './view-change.service';\r\n//è§å¾åºå\r\n@Directive({\r\n    selector: '[fViewItem]'\r\n})\r\nexport class FarrisViewItemDirective implements OnInit, OnDestroy {\r\n\r\n    @Input('fViewItem') viewItemType: string;\r\n    @Input('fViewGroupId') fViewGroupId: string = 'default';\r\n  \r\n    constructor(\r\n      private elementRef: ElementRef,\r\n      private viewChangeService: ViewChangeService,\r\n      private render : Renderer2\r\n    ) {\r\n        \r\n    }\r\n  \r\n    public ngOnInit(): void {\r\n        this.viewChangeService.addViewItem(this.viewItemType, this.fViewGroupId);\r\n        this.viewChangeService.getChangeCurrentViewId().subscribe((currentViewType: any): void => {\r\n            if(!currentViewType) return;\r\n            if(!currentViewType[this.fViewGroupId]){\r\n                return;\r\n            }\r\n            else if(currentViewType[this.fViewGroupId] == this.viewItemType){\r\n                // this.render.setStyle(this.elementRef.nativeElement,'display','');\r\n                this.render.removeClass(this.elementRef.nativeElement, 'f-viewchange-view-none');\r\n            }\r\n            else{\r\n                // this.render.setStyle(this.elementRef.nativeElement,'display','none',0);\r\n                this.render.addClass(this.elementRef.nativeElement, 'f-viewchange-view-none');\r\n            }\r\n        });\r\n    }\r\n  \r\n    public ngOnDestroy(): void {\r\n        this.viewChangeService.removeViewItem(this.viewItemType, this.fViewGroupId);\r\n    }\r\n  }","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ViewChangeComponent } from './view-change.component';\r\nimport { FarrisViewItemDirective } from './view-change.directive';\r\n\r\n@NgModule({\r\n  declarations: [ViewChangeComponent,FarrisViewItemDirective],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [ViewChangeComponent,FarrisViewItemDirective]\r\n})\r\nexport class ViewChangeModule { }\r\n"]}