/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Injector, Input } from '@angular/core';
import { DatagridComponent } from '../../datagrid.component';
export class FooterCellStylerDirective {
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} inject
     * @param {?} dg
     */
    constructor(el, render, inject, dg) {
        this.el = el;
        this.render = render;
        this.inject = inject;
        this.dg = dg;
        this.isGroupFooter = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.isGroupFooter) {
            this.setGroupFooterCellStyle(this.column);
        }
        else {
            this.buildCustomCellStyle(this.column, this.rowData);
        }
    }
    /**
     * @private
     * @param {?} column
     * @param {?} rowData
     * @return {?}
     */
    buildCustomCellStyle(column, rowData) {
        /** @type {?} */
        const tr = this.el.nativeElement.parentNode;
        if (!tr.id) {
            tr.id = 'footer-row-' + this.dg.dfs.primaryId(rowData);
        }
        if (!this.el.nativeElement.id) {
            this.el.nativeElement.id = 'footer-td_' + this.rowIndex + '_' + this.column.field;
        }
        if (column && column.footer && column.footer.styler) {
            /** @type {?} */
            const _rd = rowData;
            /** @type {?} */
            const styler = column.footer.styler;
            /** @type {?} */
            const cs = styler(_rd[column.field], _rd);
            if (cs && Object.keys(cs).length) {
                this.dg.renderCustomStyle(cs, this.el.nativeElement);
            }
            else {
                this.dg.dgs.removeCssRule('#' + this.el.nativeElement.id);
            }
        }
    }
    /**
     * @private
     * @param {?} col
     * @return {?}
     */
    setGroupFooterCellStyle(col) {
        // 分组合计行自定义样式 20210909
        if (col.groupFooter && col.groupFooter.styler) {
            /** @type {?} */
            const val = this.dg.commonUtils.getValue(col.field, this.rowData);
            /** @type {?} */
            const _customStyles = this.dg.dgs.getCustomStyle(col.groupFooter.styler, [val, this.rowData]);
            if (_customStyles) {
                this.dg.renderCustomCls(_customStyles.cls, this.el.nativeElement);
                if (_customStyles.style) {
                    Object.keys(_customStyles.style).forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        this.el.nativeElement.style[n] = _customStyles.style[n];
                    }));
                }
            }
        }
    }
}
FooterCellStylerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[footer-cell-styler]',
            },] }
];
/** @nocollapse */
FooterCellStylerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector },
    { type: DatagridComponent }
];
FooterCellStylerDirective.propDecorators = {
    column: [{ type: Input }],
    rowData: [{ type: Input }],
    rowIndex: [{ type: Input }],
    isGroupFooter: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FooterCellStylerDirective.prototype.column;
    /** @type {?} */
    FooterCellStylerDirective.prototype.rowData;
    /** @type {?} */
    FooterCellStylerDirective.prototype.rowIndex;
    /** @type {?} */
    FooterCellStylerDirective.prototype.isGroupFooter;
    /**
     * @type {?}
     * @private
     */
    FooterCellStylerDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FooterCellStylerDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    FooterCellStylerDirective.prototype.inject;
    /** @type {?} */
    FooterCellStylerDirective.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZm9vdGVyLWNlbGwuc3R5bGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9mb290ZXIvZGF0YWdyaWQtZm9vdGVyLWNlbGwuc3R5bGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQXlCLE1BQU0sZUFBZSxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBSzdELE1BQU0sT0FBTyx5QkFBeUI7Ozs7Ozs7SUFNbEMsWUFBb0IsRUFBYyxFQUFVLE1BQWlCLEVBQVUsTUFBZ0IsRUFBUyxFQUFxQjtRQUFqRyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUFVLFdBQU0sR0FBTixNQUFNLENBQVU7UUFBUyxPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUY1RyxrQkFBYSxHQUFHLEtBQUssQ0FBQztJQUUwRixDQUFDOzs7O0lBRzFILFFBQVE7SUFDUixDQUFDOzs7O0lBRUQsZUFBZTtRQUNYLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNwQixJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzdDO2FBQU07WUFDSCxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEQ7SUFDTCxDQUFDOzs7Ozs7O0lBRU8sb0JBQW9CLENBQUMsTUFBTSxFQUFFLE9BQU87O2NBRWxDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVO1FBQzNDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ1IsRUFBRSxDQUFDLEVBQUUsR0FBRyxhQUFhLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzFEO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRTtZQUMzQixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEdBQUcsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ3JGO1FBRUQsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTs7a0JBQzNDLEdBQUcsR0FBRyxPQUFPOztrQkFDYixNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNOztrQkFDN0IsRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQztZQUN6QyxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRTtnQkFDOUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUN4RDtpQkFBTTtnQkFDSCxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQzdEO1NBQ0o7SUFDTCxDQUFDOzs7Ozs7SUFHTyx1QkFBdUIsQ0FBQyxHQUFRO1FBQ3BDLHNCQUFzQjtRQUN0QixJQUFJLEdBQUcsQ0FBQyxXQUFXLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7O2tCQUNyQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQzs7a0JBQzNELGFBQWEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzdGLElBQUksYUFBYSxFQUFFO2dCQUNmLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDbEUsSUFBSSxhQUFhLENBQUMsS0FBSyxFQUFFO29CQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPOzs7O29CQUFDLENBQUMsQ0FBQyxFQUFFO3dCQUN6QyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDNUQsQ0FBQyxFQUFDLENBQUM7aUJBQ047YUFDSjtTQUNKO0lBQ0wsQ0FBQzs7O1lBN0RKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsc0JBQXNCO2FBQ25DOzs7O1lBTG1CLFVBQVU7WUFBRSxTQUFTO1lBQUUsUUFBUTtZQUMxQyxpQkFBaUI7OztxQkFNckIsS0FBSztzQkFDTCxLQUFLO3VCQUNMLEtBQUs7NEJBQ0wsS0FBSzs7OztJQUhOLDJDQUFxQjs7SUFDckIsNENBQXNCOztJQUN0Qiw2Q0FBdUI7O0lBQ3ZCLGtEQUErQjs7Ozs7SUFFbkIsdUNBQXNCOzs7OztJQUFFLDJDQUF5Qjs7Ozs7SUFBRSwyQ0FBd0I7O0lBQUUsdUNBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIEluamVjdG9yLCBJbnB1dCwgT25Jbml0LCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFncmlkQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZGF0YWdyaWQuY29tcG9uZW50JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbZm9vdGVyLWNlbGwtc3R5bGVyXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGb290ZXJDZWxsU3R5bGVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuICAgIEBJbnB1dCgpIGNvbHVtbjogYW55O1xyXG4gICAgQElucHV0KCkgcm93RGF0YTogYW55O1xyXG4gICAgQElucHV0KCkgcm93SW5kZXg6IGFueTtcclxuICAgIEBJbnB1dCgpIGlzR3JvdXBGb290ZXIgPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyLCBwcml2YXRlIGluamVjdDogSW5qZWN0b3IsIHB1YmxpYyBkZzogRGF0YWdyaWRDb21wb25lbnQpIHsgfVxyXG5cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNHcm91cEZvb3Rlcikge1xyXG4gICAgICAgICAgICB0aGlzLnNldEdyb3VwRm9vdGVyQ2VsbFN0eWxlKHRoaXMuY29sdW1uKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmJ1aWxkQ3VzdG9tQ2VsbFN0eWxlKHRoaXMuY29sdW1uLCB0aGlzLnJvd0RhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGJ1aWxkQ3VzdG9tQ2VsbFN0eWxlKGNvbHVtbiwgcm93RGF0YSkge1xyXG5cclxuICAgICAgICBjb25zdCB0ciA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5wYXJlbnROb2RlO1xyXG4gICAgICAgIGlmICghdHIuaWQpIHtcclxuICAgICAgICAgICAgdHIuaWQgPSAnZm9vdGVyLXJvdy0nICsgdGhpcy5kZy5kZnMucHJpbWFyeUlkKHJvd0RhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuaWQpIHtcclxuICAgICAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmlkID0gJ2Zvb3Rlci10ZF8nICsgdGhpcy5yb3dJbmRleCArICdfJyArIHRoaXMuY29sdW1uLmZpZWxkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNvbHVtbiAmJiBjb2x1bW4uZm9vdGVyICYmIGNvbHVtbi5mb290ZXIuc3R5bGVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IF9yZCA9IHJvd0RhdGE7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlciA9IGNvbHVtbi5mb290ZXIuc3R5bGVyO1xyXG4gICAgICAgICAgICBjb25zdCBjcyA9IHN0eWxlcihfcmRbY29sdW1uLmZpZWxkXSwgX3JkKTtcclxuICAgICAgICAgICAgaWYgKGNzICYmIE9iamVjdC5rZXlzKGNzKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGcucmVuZGVyQ3VzdG9tU3R5bGUoY3MsIHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRnLmRncy5yZW1vdmVDc3NSdWxlKCcjJyArIHRoaXMuZWwubmF0aXZlRWxlbWVudC5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgc2V0R3JvdXBGb290ZXJDZWxsU3R5bGUoY29sOiBhbnkpIHtcclxuICAgICAgICAvLyDliIbnu4TlkIjorqHooYzoh6rlrprkuYnmoLflvI8gMjAyMTA5MDlcclxuICAgICAgICBpZiAoY29sLmdyb3VwRm9vdGVyICYmIGNvbC5ncm91cEZvb3Rlci5zdHlsZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgdmFsID0gdGhpcy5kZy5jb21tb25VdGlscy5nZXRWYWx1ZShjb2wuZmllbGQsIHRoaXMucm93RGF0YSk7XHJcbiAgICAgICAgICAgIGNvbnN0IF9jdXN0b21TdHlsZXMgPSB0aGlzLmRnLmRncy5nZXRDdXN0b21TdHlsZShjb2wuZ3JvdXBGb290ZXIuc3R5bGVyLCBbdmFsLCB0aGlzLnJvd0RhdGFdKTtcclxuICAgICAgICAgICAgaWYgKF9jdXN0b21TdHlsZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGcucmVuZGVyQ3VzdG9tQ2xzKF9jdXN0b21TdHlsZXMuY2xzLCB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKF9jdXN0b21TdHlsZXMuc3R5bGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhfY3VzdG9tU3R5bGVzLnN0eWxlKS5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuc3R5bGVbbl0gPSBfY3VzdG9tU3R5bGVzLnN0eWxlW25dO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==