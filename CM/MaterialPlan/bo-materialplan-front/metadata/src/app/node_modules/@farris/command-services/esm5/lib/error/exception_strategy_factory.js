import { Optional, Injectable } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { LanguageService } from '../languag.service';
import { InfoExceptionStrategy, WarningExceptionStrategy, ErrorExceptionStrategy, FatalExceptionStrategy } from './exception_strategy';
var ExceptionFactory = /** @class */ (function () {
    /**
     * 构造函数
     * @param messagerService 消息服务
     * @param languageService 多语言服务
     */
    function ExceptionFactory(messagerService, languageService) {
        this.messagerService = messagerService;
        this.languageService = languageService;
    }
    /**
     * 获取工厂实例
     * @param messagerService 消息服务
     * @param languageService 多语言服务
     */
    ExceptionFactory.getInstance = function (messagerService, languageService) {
        if (!this.exceptionFactory) {
            this.exceptionFactory = new ExceptionFactory(messagerService, languageService);
        }
        return this.exceptionFactory;
    };
    /**
     * 获取异常处理策略
     * @param exceptionLevel 异常等级
     */
    ExceptionFactory.prototype.getExceptionHandleStrategy = function (exceptionLevel) {
        var exceptionStrategy;
        switch (exceptionLevel) {
            case 0 /* Info */:
                exceptionStrategy = new InfoExceptionStrategy(this.messagerService, this.languageService);
                break;
            case 1 /* Warning */:
                exceptionStrategy = new WarningExceptionStrategy(this.messagerService, this.languageService);
                break;
            case 2 /* Error */:
                exceptionStrategy = new ErrorExceptionStrategy(this.messagerService, this.languageService);
                break;
            case 3 /* Fatal */:
                exceptionStrategy = new FatalExceptionStrategy(this.messagerService, this.languageService);
                break;
            default:
                // 默认异常等级是错误
                exceptionStrategy = new ErrorExceptionStrategy(this.messagerService, this.languageService);
                break;
        }
        return exceptionStrategy;
    };
    /**
     * 异常工厂实例
     */
    ExceptionFactory.exceptionFactory = null;
    ExceptionFactory.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ExceptionFactory.ctorParameters = function () { return [
        { type: MessagerService },
        { type: LanguageService, decorators: [{ type: Optional }] }
    ]; };
    return ExceptionFactory;
}());
export { ExceptionFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZXB0aW9uX3N0cmF0ZWd5X2ZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZXJyb3IvZXhjZXB0aW9uX3N0cmF0ZWd5X2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVyRCxPQUFPLEVBQ2UscUJBQXFCLEVBQUUsd0JBQXdCLEVBQUUsc0JBQXNCLEVBQUUsc0JBQXNCLEVBQ3BILE1BQU0sc0JBQXNCLENBQUM7QUFHOUI7SUFRRTs7OztPQUlHO0lBQ0gsMEJBQ1MsZUFBZ0MsRUFDbkIsZUFBZ0M7UUFEN0Msb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQ25CLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtJQUd0RCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNXLDRCQUFXLEdBQXpCLFVBQTBCLGVBQWdDLEVBQUUsZUFBZ0M7UUFDMUYsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUMxQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxlQUFlLEVBQUUsZUFBZSxDQUFDLENBQUM7U0FDaEY7UUFFRCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUMvQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0kscURBQTBCLEdBQWpDLFVBQWtDLGNBQThCO1FBQzlELElBQUksaUJBQXFDLENBQUM7UUFFMUMsUUFBUSxjQUFjLEVBQUU7WUFDdEI7Z0JBQ0UsaUJBQWlCLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDMUYsTUFBTTtZQUNSO2dCQUNFLGlCQUFpQixHQUFHLElBQUksd0JBQXdCLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQzdGLE1BQU07WUFDUjtnQkFDRSxpQkFBaUIsR0FBRyxJQUFJLHNCQUFzQixDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUMzRixNQUFNO1lBQ1I7Z0JBQ0UsaUJBQWlCLEdBQUcsSUFBSSxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDM0YsTUFBTTtZQUNSO2dCQUVFLFlBQVk7Z0JBQ1osaUJBQWlCLEdBQUcsSUFBSSxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDM0YsTUFBTTtTQUNUO1FBRUQsT0FBTyxpQkFBaUIsQ0FBQztJQUMzQixDQUFDO0lBMUREOztPQUVHO0lBQ1ksaUNBQWdCLEdBQXFCLElBQUksQ0FBQzs7Z0JBTjFELFVBQVU7Ozs7Z0JBUkYsZUFBZTtnQkFDZixlQUFlLHVCQXNCbkIsUUFBUTs7SUErQ2IsdUJBQUM7Q0FBQSxBQTlERCxJQThEQztTQTdEWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcHRpb25hbCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWVzc2FnZXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XG5pbXBvcnQgeyBMYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi9sYW5ndWFnLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2VydmVyRXhjZXB0aW9uRW50aXR5LCBFeGNlcHRpb25MZXZlbCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgSUV4Y2VwdGlvblN0cmF0ZWd5LCBJbmZvRXhjZXB0aW9uU3RyYXRlZ3ksIFdhcm5pbmdFeGNlcHRpb25TdHJhdGVneSwgRXJyb3JFeGNlcHRpb25TdHJhdGVneSwgRmF0YWxFeGNlcHRpb25TdHJhdGVneVxufSBmcm9tICcuL2V4Y2VwdGlvbl9zdHJhdGVneSc7XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEV4Y2VwdGlvbkZhY3Rvcnkge1xuXG4gIC8qKlxuICAgKiDlvILluLjlt6XljoLlrp7kvotcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGV4Y2VwdGlvbkZhY3Rvcnk6IEV4Y2VwdGlvbkZhY3RvcnkgPSBudWxsO1xuXG4gIC8qKlxuICAgKiDmnoTpgKDlh73mlbBcbiAgICogQHBhcmFtIG1lc3NhZ2VyU2VydmljZSDmtojmga/mnI3liqFcbiAgICogQHBhcmFtIGxhbmd1YWdlU2VydmljZSDlpJror63oqIDmnI3liqFcbiAgICovXG4gIHByaXZhdGUgY29uc3RydWN0b3IoXG4gICAgcHVibGljIG1lc3NhZ2VyU2VydmljZTogTWVzc2FnZXJTZXJ2aWNlLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBMYW5ndWFnZVNlcnZpY2UsXG4gICkge1xuXG4gIH1cblxuICAvKipcbiAgICog6I635Y+W5bel5Y6C5a6e5L6LXG4gICAqIEBwYXJhbSBtZXNzYWdlclNlcnZpY2Ug5raI5oGv5pyN5YqhXG4gICAqIEBwYXJhbSBsYW5ndWFnZVNlcnZpY2Ug5aSa6K+t6KiA5pyN5YqhXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKG1lc3NhZ2VyU2VydmljZTogTWVzc2FnZXJTZXJ2aWNlLCBsYW5ndWFnZVNlcnZpY2U6IExhbmd1YWdlU2VydmljZSk6IEV4Y2VwdGlvbkZhY3Rvcnkge1xuICAgIGlmICghdGhpcy5leGNlcHRpb25GYWN0b3J5KSB7XG4gICAgICB0aGlzLmV4Y2VwdGlvbkZhY3RvcnkgPSBuZXcgRXhjZXB0aW9uRmFjdG9yeShtZXNzYWdlclNlcnZpY2UsIGxhbmd1YWdlU2VydmljZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZXhjZXB0aW9uRmFjdG9yeTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5blvILluLjlpITnkIbnrZbnlaVcbiAgICogQHBhcmFtIGV4Y2VwdGlvbkxldmVsIOW8guW4uOetiee6p1xuICAgKi9cbiAgcHVibGljIGdldEV4Y2VwdGlvbkhhbmRsZVN0cmF0ZWd5KGV4Y2VwdGlvbkxldmVsOiBFeGNlcHRpb25MZXZlbCk6IElFeGNlcHRpb25TdHJhdGVneSB7XG4gICAgbGV0IGV4Y2VwdGlvblN0cmF0ZWd5OiBJRXhjZXB0aW9uU3RyYXRlZ3k7XG5cbiAgICBzd2l0Y2ggKGV4Y2VwdGlvbkxldmVsKSB7XG4gICAgICBjYXNlIEV4Y2VwdGlvbkxldmVsLkluZm86XG4gICAgICAgIGV4Y2VwdGlvblN0cmF0ZWd5ID0gbmV3IEluZm9FeGNlcHRpb25TdHJhdGVneSh0aGlzLm1lc3NhZ2VyU2VydmljZSwgdGhpcy5sYW5ndWFnZVNlcnZpY2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRXhjZXB0aW9uTGV2ZWwuV2FybmluZzpcbiAgICAgICAgZXhjZXB0aW9uU3RyYXRlZ3kgPSBuZXcgV2FybmluZ0V4Y2VwdGlvblN0cmF0ZWd5KHRoaXMubWVzc2FnZXJTZXJ2aWNlLCB0aGlzLmxhbmd1YWdlU2VydmljZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBFeGNlcHRpb25MZXZlbC5FcnJvcjpcbiAgICAgICAgZXhjZXB0aW9uU3RyYXRlZ3kgPSBuZXcgRXJyb3JFeGNlcHRpb25TdHJhdGVneSh0aGlzLm1lc3NhZ2VyU2VydmljZSwgdGhpcy5sYW5ndWFnZVNlcnZpY2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRXhjZXB0aW9uTGV2ZWwuRmF0YWw6XG4gICAgICAgIGV4Y2VwdGlvblN0cmF0ZWd5ID0gbmV3IEZhdGFsRXhjZXB0aW9uU3RyYXRlZ3kodGhpcy5tZXNzYWdlclNlcnZpY2UsIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuXG4gICAgICAgIC8vIOm7mOiupOW8guW4uOetiee6p+aYr+mUmeivr1xuICAgICAgICBleGNlcHRpb25TdHJhdGVneSA9IG5ldyBFcnJvckV4Y2VwdGlvblN0cmF0ZWd5KHRoaXMubWVzc2FnZXJTZXJ2aWNlLCB0aGlzLmxhbmd1YWdlU2VydmljZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBleGNlcHRpb25TdHJhdGVneTtcbiAgfVxufVxuIl19