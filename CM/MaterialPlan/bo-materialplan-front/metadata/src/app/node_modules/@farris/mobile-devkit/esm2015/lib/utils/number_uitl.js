class NumberUtil {
    /**
       * 数字格式化
       * {
       *   precision: 2,
       *   decimal: true,
       *   thousand: ','
       *   prefix: '',
       *   suffix: ''
       * }
       */
    static format(value, options) {
        // 参数处理
        let decimals = (options.precision || options.precision === 0) ? options.precision : 2;
        let decimalPoint = options.decimal || '.';
        let thousandsSep = options.thousand || '';
        let prefix = options.prefix || '';
        let suffix = options.suffix || '';
        let prefixType = options.prefixType;
        if (prefixType == "dynamic" && options.prefix) {
            // 表示前缀为一个函数  那么执行函数定义
            let prefixFunc = new Function("return " + options.prefix);
            prefix = prefixFunc()(options.sourceData);
        }
        value = (value + '').replace(/[^0-9+-Ee.]/g, '');
        let s;
        // 处理精度
        let toFixedFix = function (n, prec) {
            var k = Math.pow(10, prec);
            return '' + parseFloat(Math.round(parseFloat((n * k).toFixed(prec * 2))).toFixed(prec * 2)) / k;
        };
        s = ((decimals || decimals === 0) ? toFixedFix(value, decimals) : '' + Math.round(value)).split('.');
        // 处理千分位
        if (thousandsSep) {
            let pattern = /(-?\d+)(\d{3})/;
            while (pattern.test(s[0])) {
                s[0] = s[0].replace(pattern, "$1" + thousandsSep + "$2");
            }
            if ((s[1] || '').length < decimals) {
                s[1] = s[1] || '';
                s[1] += new Array(decimals - s[1].length + 1).join('0');
            }
        }
        let formatedValue = s.join(decimalPoint);
        formatedValue = `${prefix}${formatedValue}${suffix}`;
        return formatedValue;
    }
}
export { NumberUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyX3VpdGwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvbnVtYmVyX3VpdGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVO0lBRWQ7Ozs7Ozs7OztTQVNLO0lBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsT0FBTztRQUVqQyxPQUFPO1FBQ1AsSUFBSSxRQUFRLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RixJQUFJLFlBQVksR0FBRyxPQUFPLENBQUMsT0FBTyxJQUFJLEdBQUcsQ0FBQztRQUMxQyxJQUFJLFlBQVksR0FBRyxPQUFPLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQztRQUMxQyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUNsQyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUVsQyxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQ3BDLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQzdDLHNCQUFzQjtZQUN0QixJQUFJLFVBQVUsR0FBRyxJQUFJLFFBQVEsQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzFELE1BQU0sR0FBRyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDM0M7UUFFRCxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsQ0FBQztRQUVOLE9BQU87UUFDUCxJQUFJLFVBQVUsR0FBRyxVQUFVLENBQUMsRUFBRSxJQUFJO1lBQ2hDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzNCLE9BQU8sRUFBRSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xHLENBQUMsQ0FBQztRQUNGLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxJQUFJLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFckcsUUFBUTtRQUNSLElBQUksWUFBWSxFQUFFO1lBQ2hCLElBQUksT0FBTyxHQUFHLGdCQUFnQixDQUFDO1lBQy9CLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDekIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksR0FBRyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUM7YUFDMUQ7WUFDRCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxRQUFRLEVBQUU7Z0JBQ2xDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNsQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3pEO1NBQ0Y7UUFFRCxJQUFJLGFBQWEsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3pDLGFBQWEsR0FBRyxHQUFHLE1BQU0sR0FBRyxhQUFhLEdBQUcsTUFBTSxFQUFFLENBQUM7UUFDckQsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQztDQUVGO0FBRUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgTnVtYmVyVXRpbCB7XHJcblxyXG4gIC8qKlxyXG4gICAgICog5pWw5a2X5qC85byP5YyWXHJcbiAgICAgKiB7XHJcbiAgICAgKiAgIHByZWNpc2lvbjogMixcclxuICAgICAqICAgZGVjaW1hbDogdHJ1ZSxcclxuICAgICAqICAgdGhvdXNhbmQ6ICcsJ1xyXG4gICAgICogICBwcmVmaXg6ICcnLFxyXG4gICAgICogICBzdWZmaXg6ICcnXHJcbiAgICAgKiB9XHJcbiAgICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGZvcm1hdCh2YWx1ZSwgb3B0aW9ucykge1xyXG5cclxuICAgIC8vIOWPguaVsOWkhOeQhlxyXG4gICAgbGV0IGRlY2ltYWxzID0gKG9wdGlvbnMucHJlY2lzaW9uIHx8IG9wdGlvbnMucHJlY2lzaW9uID09PSAwKSA/IG9wdGlvbnMucHJlY2lzaW9uIDogMjtcclxuICAgIGxldCBkZWNpbWFsUG9pbnQgPSBvcHRpb25zLmRlY2ltYWwgfHwgJy4nO1xyXG4gICAgbGV0IHRob3VzYW5kc1NlcCA9IG9wdGlvbnMudGhvdXNhbmQgfHwgJyc7XHJcbiAgICBsZXQgcHJlZml4ID0gb3B0aW9ucy5wcmVmaXggfHwgJyc7XHJcbiAgICBsZXQgc3VmZml4ID0gb3B0aW9ucy5zdWZmaXggfHwgJyc7XHJcblxyXG4gICAgbGV0IHByZWZpeFR5cGUgPSBvcHRpb25zLnByZWZpeFR5cGU7XHJcbiAgICBpZiAocHJlZml4VHlwZSA9PSBcImR5bmFtaWNcIiAmJiBvcHRpb25zLnByZWZpeCkge1xyXG4gICAgICAvLyDooajnpLrliY3nvIDkuLrkuIDkuKrlh73mlbAgIOmCo+S5iOaJp+ihjOWHveaVsOWumuS5iVxyXG4gICAgICBsZXQgcHJlZml4RnVuYyA9IG5ldyBGdW5jdGlvbihcInJldHVybiBcIiArIG9wdGlvbnMucHJlZml4KTtcclxuICAgICAgcHJlZml4ID0gcHJlZml4RnVuYygpKG9wdGlvbnMuc291cmNlRGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFsdWUgPSAodmFsdWUgKyAnJykucmVwbGFjZSgvW14wLTkrLUVlLl0vZywgJycpO1xyXG4gICAgbGV0IHM7XHJcblxyXG4gICAgLy8g5aSE55CG57K+5bqmXHJcbiAgICBsZXQgdG9GaXhlZEZpeCA9IGZ1bmN0aW9uIChuLCBwcmVjKSB7XHJcbiAgICAgIHZhciBrID0gTWF0aC5wb3coMTAsIHByZWMpO1xyXG4gICAgICByZXR1cm4gJycgKyBwYXJzZUZsb2F0KE1hdGgucm91bmQocGFyc2VGbG9hdCgobiAqIGspLnRvRml4ZWQocHJlYyAqIDIpKSkudG9GaXhlZChwcmVjICogMikpIC8gaztcclxuICAgIH07XHJcbiAgICBzID0gKChkZWNpbWFscyB8fCBkZWNpbWFscyA9PT0gMCkgPyB0b0ZpeGVkRml4KHZhbHVlLCBkZWNpbWFscykgOiAnJyArIE1hdGgucm91bmQodmFsdWUpKS5zcGxpdCgnLicpO1xyXG5cclxuICAgIC8vIOWkhOeQhuWNg+WIhuS9jVxyXG4gICAgaWYgKHRob3VzYW5kc1NlcCkge1xyXG4gICAgICBsZXQgcGF0dGVybiA9IC8oLT9cXGQrKShcXGR7M30pLztcclxuICAgICAgd2hpbGUgKHBhdHRlcm4udGVzdChzWzBdKSkge1xyXG4gICAgICAgIHNbMF0gPSBzWzBdLnJlcGxhY2UocGF0dGVybiwgXCIkMVwiICsgdGhvdXNhbmRzU2VwICsgXCIkMlwiKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoKHNbMV0gfHwgJycpLmxlbmd0aCA8IGRlY2ltYWxzKSB7XHJcbiAgICAgICAgc1sxXSA9IHNbMV0gfHwgJyc7XHJcbiAgICAgICAgc1sxXSArPSBuZXcgQXJyYXkoZGVjaW1hbHMgLSBzWzFdLmxlbmd0aCArIDEpLmpvaW4oJzAnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCBmb3JtYXRlZFZhbHVlID0gcy5qb2luKGRlY2ltYWxQb2ludCk7XHJcbiAgICBmb3JtYXRlZFZhbHVlID0gYCR7cHJlZml4fSR7Zm9ybWF0ZWRWYWx1ZX0ke3N1ZmZpeH1gO1xyXG4gICAgcmV0dXJuIGZvcm1hdGVkVmFsdWU7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgTnVtYmVyVXRpbCB9OyJdfQ==