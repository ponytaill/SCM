/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef, ViewChild, Renderer2, ViewEncapsulation } from '@angular/core';
import { ViewChangeService } from './view-change.service';
export class ViewChangeComponent {
    /**
     * @param {?} _renderer
     * @param {?} viewChangeService
     */
    constructor(_renderer, viewChangeService) {
        this._renderer = _renderer;
        this.viewChangeService = viewChangeService;
        this.viewType = 'tile';
        this.viewGroupId = 'default';
        this.toolTypeChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.toolbarData && this.toolbarData.length) {
            if (this.defaultType) {
                /** @type {?} */
                let item = this.toolbarData.find((/**
                 * @param {?} bar
                 * @return {?}
                 */
                (bar) => {
                    return bar['type'] === this.defaultType;
                }));
                this.activeTypeItem = item;
                this.toolTypeChange.emit(this.activeTypeItem);
            }
            else {
                this.activeTypeItem = this.toolbarData[0];
                this.toolTypeChange.emit(this.activeTypeItem);
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.viewChangeService) {
            this.viewChangeService = new ViewChangeService();
        }
        this.viewChangeService.updateCurrentViewId(this.activeTypeItem['type'], this.viewGroupId);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    listItemClick(item) {
        if (item.disable || this.activeTypeItem['type'] === item['type']) {
            return;
        }
        this.activeTypeItem = item;
        if (!this.viewChangeService) {
            this.viewChangeService = new ViewChangeService();
        }
        this.viewChangeService.updateCurrentViewId(this.activeTypeItem['type'], this.viewGroupId);
        this.toolTypeChange.emit(item);
        if (this.typelist) {
            this._renderer.setStyle(this.typelist.nativeElement, 'display', 'none');
        }
    }
    /**
     * @return {?}
     */
    dropdownMouseEnter() {
        this._renderer.setStyle(this.typelist.nativeElement, 'display', 'block');
    }
    /**
     * @return {?}
     */
    dropdownMouseLeave() {
        this._renderer.setStyle(this.typelist.nativeElement, 'display', 'none');
    }
}
ViewChangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-view-change',
                template: "<div class=\"f-view-change\">\r\n    <div class=\"f-view-change-tile\" *ngIf=\"viewType === 'tile'; else dropdown\">\r\n        <div class=\"f-view-change-tile-btn\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'tile-btn-active': item.type === activeTypeItem.type,'tile-btn-disable': item.disable}\" (click)=\"listItemClick(item)\" [title]=\"item.title\">\r\n            <span class=\"tile-btn-icon {{item.iconName}}\"></span>\r\n        </div>\r\n    </div>\r\n    <ng-template #dropdown>\r\n        <div class=\"f-view-change-dropdown\" \r\n        (mouseenter)=\"dropdownMouseEnter()\"\r\n        (mouseleave)=\"dropdownMouseLeave()\"> \r\n            <div class=\"f-view-change-toggle\" *ngIf=\"this.toolbarData.length\">\r\n                <span class=\"toggle-btn-icon {{activeTypeItem.iconName}}\"></span>\r\n            </div>\r\n            <div class=\"f-view-change-typelist\" #typelist>\r\n                <div class=\"f-view-change-typelist-content\">\r\n                    <div class=\"f-view-change-typelist-arrow\"></div>\r\n                    <ul class=\"f-view-change-typelist-list\">\r\n                        <li class=\"typelist-item\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'typelist-item-active': item.type === activeTypeItem.type,'typelist-item-disable': item.disable}\" (click)=\"listItemClick(item)\">\r\n                                <span class=\"typelist-item-icon {{item.iconName}}\"></span>\r\n                                <span class=\"typelist-item-title\">{{item.title}}</span>\r\n                            </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <!-- <ul class=\"f-view-change-typelist\" #typelist>\r\n                <li class=\"f-view-change-typelist-arrow\"></li>\r\n                <li class=\"typelist-item\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'typelist-item-active': item.type === activeTypeItem.type,'typelist-item-disable': item.disable}\" (click)=\"listItemClick(item)\">\r\n                    <span class=\"typelist-item-icon {{item.iconName}}\"></span>\r\n                    <span class=\"typelist-item-title\">{{item.title}}</span>\r\n                </li>\r\n            </ul> -->\r\n        </div>\r\n    </ng-template>\r\n</div>",
                encapsulation: ViewEncapsulation.None
                // providers:[ ViewChangeService ]
                ,
                styles: [".f-viewchange-view-none{display:none!important}"]
            }] }
];
/** @nocollapse */
ViewChangeComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ViewChangeService }
];
ViewChangeComponent.propDecorators = {
    toolbarData: [{ type: Input }],
    viewType: [{ type: Input }],
    defaultType: [{ type: Input }],
    viewGroupId: [{ type: Input }],
    toolTypeChange: [{ type: Output }],
    typelist: [{ type: ViewChild, args: ['typelist',] }]
};
if (false) {
    /** @type {?} */
    ViewChangeComponent.prototype.toolbarData;
    /** @type {?} */
    ViewChangeComponent.prototype.viewType;
    /** @type {?} */
    ViewChangeComponent.prototype.defaultType;
    /** @type {?} */
    ViewChangeComponent.prototype.viewGroupId;
    /** @type {?} */
    ViewChangeComponent.prototype.activeTypeItem;
    /** @type {?} */
    ViewChangeComponent.prototype.toolTypeChange;
    /** @type {?} */
    ViewChangeComponent.prototype.typelist;
    /**
     * @type {?}
     * @private
     */
    ViewChangeComponent.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    ViewChangeComponent.prototype.viewChangeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy1jaGFuZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS12aWV3LWNoYW5nZS8iLCJzb3VyY2VzIjpbImxpYi92aWV3LWNoYW5nZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQWlCLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25KLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBUzFELE1BQU0sT0FBTyxtQkFBbUI7Ozs7O0lBWTlCLFlBQW9CLFNBQW9CLEVBQzlCLGlCQUFvQztRQUQxQixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQzlCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFWckMsYUFBUSxHQUFXLE1BQU0sQ0FBQztRQUUxQixnQkFBVyxHQUFVLFNBQVMsQ0FBQztRQUc5QixtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFLSSxDQUFDOzs7O0lBRW5ELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDL0MsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFOztvQkFDaEIsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSTs7OztnQkFBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO29CQUN2QyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsV0FBVyxDQUFDO2dCQUMxQyxDQUFDLEVBQUM7Z0JBQ0YsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQzthQUMvQztpQkFDSTtnQkFDSCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQzthQUMvQztTQUdGO0lBQ0gsQ0FBQzs7OztJQUNELGVBQWU7UUFDYixJQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFDO1lBQ3pCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixFQUFFLENBQUM7U0FDbEQ7UUFDRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0YsQ0FBQzs7Ozs7SUFFRCxhQUFhLENBQUMsSUFBSTtRQUNoQixJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDaEUsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDM0IsSUFBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBQztZQUN6QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO1NBQ2xEO1FBQ0QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pGLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9CLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQzNCLFNBQVMsRUFDVCxNQUFNLENBQ1AsQ0FBQztTQUNIO0lBQ0gsQ0FBQzs7OztJQUVELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQzNCLFNBQVMsRUFDVCxPQUFPLENBQ1IsQ0FBQztJQUNKLENBQUM7Ozs7SUFDRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUMzQixTQUFTLEVBQ1QsTUFBTSxDQUNQLENBQUM7SUFDSixDQUFDOzs7WUE5RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLDZ1RUFBMkM7Z0JBRTNDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxrQ0FBa0M7OzthQUNuQzs7OztZQVQrRSxTQUFTO1lBQ2hGLGlCQUFpQjs7OzBCQVd2QixLQUFLO3VCQUNMLEtBQUs7MEJBQ0wsS0FBSzswQkFDTCxLQUFLOzZCQUdMLE1BQU07dUJBRU4sU0FBUyxTQUFDLFVBQVU7Ozs7SUFSckIsMENBQXFCOztJQUNyQix1Q0FBbUM7O0lBQ25DLDBDQUE2Qjs7SUFDN0IsMENBQXdDOztJQUN4Qyw2Q0FBZTs7SUFFZiw2Q0FBOEM7O0lBRTlDLHVDQUE0Qzs7Ozs7SUFFaEMsd0NBQTRCOzs7OztJQUN0QyxnREFBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBWaWV3Q2hpbGQsIFJlbmRlcmVyMiwgQWZ0ZXJWaWV3SW5pdCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVmlld0NoYW5nZVNlcnZpY2UgfSBmcm9tICcuL3ZpZXctY2hhbmdlLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdmYXJyaXMtdmlldy1jaGFuZ2UnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi92aWV3LWNoYW5nZS5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vdmlldy1jaGFuZ2UuY29tcG9uZW50LnNjc3MnXSxcclxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXHJcbiAgLy8gcHJvdmlkZXJzOlsgVmlld0NoYW5nZVNlcnZpY2UgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgVmlld0NoYW5nZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCAsQWZ0ZXJWaWV3SW5pdHtcclxuXHJcbiAgQElucHV0KCkgdG9vbGJhckRhdGE7XHJcbiAgQElucHV0KCkgdmlld1R5cGU6IHN0cmluZyA9ICd0aWxlJztcclxuICBASW5wdXQoKSBkZWZhdWx0VHlwZTogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIHZpZXdHcm91cElkOnN0cmluZyA9ICdkZWZhdWx0JztcclxuICBhY3RpdmVUeXBlSXRlbTtcclxuXHJcbiAgQE91dHB1dCgpIHRvb2xUeXBlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBAVmlld0NoaWxkKCd0eXBlbGlzdCcpIHR5cGVsaXN0OiBFbGVtZW50UmVmO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyLFxyXG4gICAgcHJpdmF0ZSB2aWV3Q2hhbmdlU2VydmljZTogVmlld0NoYW5nZVNlcnZpY2UpIHsgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIGlmICh0aGlzLnRvb2xiYXJEYXRhICYmIHRoaXMudG9vbGJhckRhdGEubGVuZ3RoKSB7XHJcbiAgICAgIGlmICh0aGlzLmRlZmF1bHRUeXBlKSB7XHJcbiAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLnRvb2xiYXJEYXRhLmZpbmQoKGJhcikgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIGJhclsndHlwZSddID09PSB0aGlzLmRlZmF1bHRUeXBlO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy5hY3RpdmVUeXBlSXRlbSA9IGl0ZW07XHJcbiAgICAgICAgdGhpcy50b29sVHlwZUNoYW5nZS5lbWl0KHRoaXMuYWN0aXZlVHlwZUl0ZW0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlVHlwZUl0ZW0gPSB0aGlzLnRvb2xiYXJEYXRhWzBdO1xyXG4gICAgICAgIHRoaXMudG9vbFR5cGVDaGFuZ2UuZW1pdCh0aGlzLmFjdGl2ZVR5cGVJdGVtKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgXHJcbiAgICB9XHJcbiAgfVxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgIGlmKCF0aGlzLnZpZXdDaGFuZ2VTZXJ2aWNlKXtcclxuICAgICAgdGhpcy52aWV3Q2hhbmdlU2VydmljZSA9IG5ldyBWaWV3Q2hhbmdlU2VydmljZSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy52aWV3Q2hhbmdlU2VydmljZS51cGRhdGVDdXJyZW50Vmlld0lkKHRoaXMuYWN0aXZlVHlwZUl0ZW1bJ3R5cGUnXSx0aGlzLnZpZXdHcm91cElkKTtcclxuICB9XHJcblxyXG4gIGxpc3RJdGVtQ2xpY2soaXRlbSkge1xyXG4gICAgaWYgKGl0ZW0uZGlzYWJsZSB8fCB0aGlzLmFjdGl2ZVR5cGVJdGVtWyd0eXBlJ10gPT09IGl0ZW1bJ3R5cGUnXSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLmFjdGl2ZVR5cGVJdGVtID0gaXRlbTtcclxuICAgIGlmKCF0aGlzLnZpZXdDaGFuZ2VTZXJ2aWNlKXtcclxuICAgICAgdGhpcy52aWV3Q2hhbmdlU2VydmljZSA9IG5ldyBWaWV3Q2hhbmdlU2VydmljZSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy52aWV3Q2hhbmdlU2VydmljZS51cGRhdGVDdXJyZW50Vmlld0lkKHRoaXMuYWN0aXZlVHlwZUl0ZW1bJ3R5cGUnXSx0aGlzLnZpZXdHcm91cElkKTtcclxuICAgIHRoaXMudG9vbFR5cGVDaGFuZ2UuZW1pdChpdGVtKTtcclxuICAgIGlmICh0aGlzLnR5cGVsaXN0KSB7XHJcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKFxyXG4gICAgICAgIHRoaXMudHlwZWxpc3QubmF0aXZlRWxlbWVudCxcclxuICAgICAgICAnZGlzcGxheScsXHJcbiAgICAgICAgJ25vbmUnXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkcm9wZG93bk1vdXNlRW50ZXIoKSB7XHJcbiAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZShcclxuICAgICAgdGhpcy50eXBlbGlzdC5uYXRpdmVFbGVtZW50LFxyXG4gICAgICAnZGlzcGxheScsXHJcbiAgICAgICdibG9jaydcclxuICAgICk7XHJcbiAgfVxyXG4gIGRyb3Bkb3duTW91c2VMZWF2ZSgpIHtcclxuICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKFxyXG4gICAgICB0aGlzLnR5cGVsaXN0Lm5hdGl2ZUVsZW1lbnQsXHJcbiAgICAgICdkaXNwbGF5JyxcclxuICAgICAgJ25vbmUnXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn1cclxuIl19