/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic_bef_repository.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { DataTypeInfo, EntityCollection } from '@farris/devkit';
import { BefDataService } from './bef_data_service';
import { BefEntityManager } from './bef_entity_manager';
import { BefProxy } from './bef_proxy';
import { BefRepository } from './bef_repository';
import { BE_SERVER_URI_TOKEN } from './tokens';
import { UriService } from './uri_service';
/**
 * @template T
 */
var /**
 * @template T
 */
DynamicBefRepository = /** @class */ (function (_super) {
    tslib_1.__extends(DynamicBefRepository, _super);
    // public paginationInfo = {
    //   Entity: {
    //     pageSize: 20,
    //   },
    // };
    function DynamicBefRepository(injector, name, entityType, serverUri, apiUri) {
        var _this = _super.call(this, injector) || this;
        _this.name = name;
        _this.entityType = entityType;
        _this.serverUri = serverUri;
        _this.apiUri = apiUri;
        _this.apiUri = apiUri;
        /** @type {?} */
        var paginationInfo = {};
        paginationInfo[entityType.typeName] = { pageSize: 20 };
        _this.paginationInfo = paginationInfo;
        _this.entityTypeInfo = new DataTypeInfo(_this.entityType);
        _this.entityCollection = new EntityCollection(_this.entityType);
        // 初始化实体管理器
        _this.entityManager = new BefEntityManager(_this.entityCollection);
        /** @type {?} */
        var httpClient = injector.get(HttpClient);
        /** @type {?} */
        var uriService = new UriService(serverUri);
        /** @type {?} */
        var proxy = new BefProxy(httpClient, uriService);
        /** @type {?} */
        var baseUri = uriService.extendUri(apiUri);
        proxy.setBaseUri(baseUri);
        _this.dataService = new BefDataService(injector, _this);
        _this.serverUri = injector.get(BE_SERVER_URI_TOKEN);
        return _this;
    }
    /**
     * @param {?} defaultValues
     * @return {?}
     */
    DynamicBefRepository.prototype.batchAppend = /**
     * @param {?} defaultValues
     * @return {?}
     */
    function (defaultValues) {
        throw new Error('Method not implemented.');
    };
    return DynamicBefRepository;
}(BefRepository));
if (false) {
    /** @type {?} */
    DynamicBefRepository.prototype.name;
    /** @type {?} */
    DynamicBefRepository.prototype.entityType;
    /** @type {?} */
    DynamicBefRepository.prototype.serverUri;
    /** @type {?} */
    DynamicBefRepository.prototype.apiUri;
}
export { DynamicBefRepository };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pY19iZWZfcmVwb3NpdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvYmVmLyIsInNvdXJjZXMiOlsibGliL2R5bmFtaWNfYmVmX3JlcG9zaXRvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWxELE9BQU8sRUFBRSxZQUFZLEVBQVUsZ0JBQWdCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFFM0M7Ozs7SUFBcUQsZ0RBQWdCO0lBTW5FLDRCQUE0QjtJQUM1QixjQUFjO0lBQ2Qsb0JBQW9CO0lBQ3BCLE9BQU87SUFDUCxLQUFLO0lBRUwsOEJBQVksUUFBa0IsRUFBUyxJQUFZLEVBQVMsVUFBZSxFQUFTLFNBQWlCLEVBQVMsTUFBYztRQUE1SCxZQUNFLGtCQUFNLFFBQVEsQ0FBQyxTQWtCaEI7UUFuQnNDLFVBQUksR0FBSixJQUFJLENBQVE7UUFBUyxnQkFBVSxHQUFWLFVBQVUsQ0FBSztRQUFTLGVBQVMsR0FBVCxTQUFTLENBQVE7UUFBUyxZQUFNLEdBQU4sTUFBTSxDQUFRO1FBRTFILEtBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDOztZQUNmLGNBQWMsR0FBRyxFQUFFO1FBQ3pCLGNBQWMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDdkQsS0FBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsS0FBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLFlBQVksQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEQsS0FBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksZ0JBQWdCLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzlELFdBQVc7UUFDWCxLQUFJLENBQUMsYUFBYSxHQUFHLElBQUksZ0JBQWdCLENBQUMsS0FBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7O1lBRTNELFVBQVUsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQzs7WUFDckMsVUFBVSxHQUFHLElBQUksVUFBVSxDQUFDLFNBQVMsQ0FBQzs7WUFDdEMsS0FBSyxHQUFHLElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUM7O1lBQzVDLE9BQU8sR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUM1QyxLQUFLLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTFCLEtBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxjQUFjLENBQUMsUUFBUSxFQUFFLEtBQUksQ0FBQyxDQUFDO1FBQ3RELEtBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBUyxtQkFBbUIsQ0FBQyxDQUFDOztJQUM3RCxDQUFDOzs7OztJQTdCRCwwQ0FBVzs7OztJQUFYLFVBQVksYUFBb0I7UUFDOUIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUE0QkgsMkJBQUM7QUFBRCxDQUFDLEFBaENELENBQXFELGFBQWEsR0FnQ2pFOzs7SUFwQmlDLG9DQUFtQjs7SUFBRSwwQ0FBc0I7O0lBQUUseUNBQXdCOztJQUFFLHNDQUFxQjs7QUFzQjlILE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0YVR5cGVJbmZvLCBFbnRpdHksIEVudGl0eUNvbGxlY3Rpb24gfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQmVmRGF0YVNlcnZpY2UgfSBmcm9tICcuL2JlZl9kYXRhX3NlcnZpY2UnO1xyXG5pbXBvcnQgeyBCZWZFbnRpdHlNYW5hZ2VyIH0gZnJvbSAnLi9iZWZfZW50aXR5X21hbmFnZXInO1xyXG5pbXBvcnQgeyBCZWZQcm94eSB9IGZyb20gJy4vYmVmX3Byb3h5JztcclxuaW1wb3J0IHsgQmVmUmVwb3NpdG9yeSB9IGZyb20gJy4vYmVmX3JlcG9zaXRvcnknO1xyXG5pbXBvcnQgeyBCRV9TRVJWRVJfVVJJX1RPS0VOIH0gZnJvbSAnLi90b2tlbnMnO1xyXG5pbXBvcnQgeyBVcmlTZXJ2aWNlIH0gZnJvbSAnLi91cmlfc2VydmljZSc7XHJcblxyXG5jbGFzcyBEeW5hbWljQmVmUmVwb3NpdG9yeTxUIGV4dGVuZHMgRW50aXR5PiBleHRlbmRzIEJlZlJlcG9zaXRvcnk8VD4ge1xyXG5cclxuICBiYXRjaEFwcGVuZChkZWZhdWx0VmFsdWVzOiBhbnlbXSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XHJcbiAgfVxyXG5cclxuICAvLyBwdWJsaWMgcGFnaW5hdGlvbkluZm8gPSB7XHJcbiAgLy8gICBFbnRpdHk6IHtcclxuICAvLyAgICAgcGFnZVNpemU6IDIwLFxyXG4gIC8vICAgfSxcclxuICAvLyB9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihpbmplY3RvcjogSW5qZWN0b3IsIHB1YmxpYyBuYW1lOiBzdHJpbmcsIHB1YmxpYyBlbnRpdHlUeXBlOiBhbnksIHB1YmxpYyBzZXJ2ZXJVcmk6IHN0cmluZywgcHVibGljIGFwaVVyaTogc3RyaW5nKSB7XHJcbiAgICBzdXBlcihpbmplY3Rvcik7XHJcbiAgICB0aGlzLmFwaVVyaSA9IGFwaVVyaTtcclxuICAgIGNvbnN0IHBhZ2luYXRpb25JbmZvID0ge307XHJcbiAgICBwYWdpbmF0aW9uSW5mb1tlbnRpdHlUeXBlLnR5cGVOYW1lXSA9IHsgcGFnZVNpemU6IDIwIH07XHJcbiAgICB0aGlzLnBhZ2luYXRpb25JbmZvID0gcGFnaW5hdGlvbkluZm87XHJcbiAgICB0aGlzLmVudGl0eVR5cGVJbmZvID0gbmV3IERhdGFUeXBlSW5mbyh0aGlzLmVudGl0eVR5cGUpO1xyXG4gICAgdGhpcy5lbnRpdHlDb2xsZWN0aW9uID0gbmV3IEVudGl0eUNvbGxlY3Rpb24odGhpcy5lbnRpdHlUeXBlKTtcclxuICAgIC8vIOWIneWni+WMluWunuS9k+euoeeQhuWZqFxyXG4gICAgdGhpcy5lbnRpdHlNYW5hZ2VyID0gbmV3IEJlZkVudGl0eU1hbmFnZXIodGhpcy5lbnRpdHlDb2xsZWN0aW9uKTtcclxuXHJcbiAgICBjb25zdCBodHRwQ2xpZW50ID0gaW5qZWN0b3IuZ2V0KEh0dHBDbGllbnQpO1xyXG4gICAgY29uc3QgdXJpU2VydmljZSA9IG5ldyBVcmlTZXJ2aWNlKHNlcnZlclVyaSk7XHJcbiAgICBjb25zdCBwcm94eSA9IG5ldyBCZWZQcm94eShodHRwQ2xpZW50LCB1cmlTZXJ2aWNlKTtcclxuICAgIGNvbnN0IGJhc2VVcmkgPSB1cmlTZXJ2aWNlLmV4dGVuZFVyaShhcGlVcmkpO1xyXG4gICAgcHJveHkuc2V0QmFzZVVyaShiYXNlVXJpKTtcclxuXHJcbiAgICB0aGlzLmRhdGFTZXJ2aWNlID0gbmV3IEJlZkRhdGFTZXJ2aWNlKGluamVjdG9yLCB0aGlzKTtcclxuICAgIHRoaXMuc2VydmVyVXJpID0gaW5qZWN0b3IuZ2V0PHN0cmluZz4oQkVfU0VSVkVSX1VSSV9UT0tFTik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBEeW5hbWljQmVmUmVwb3NpdG9yeSB9O1xyXG4iXX0=