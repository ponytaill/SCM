/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { cloneDeep } from 'lodash-es';
import { IdService } from '@farris/ui-common';
import { Component, ViewChild, TemplateRef, Renderer2, ElementRef, NgZone, Injector, Input, HostListener, Optional } from '@angular/core';
import { FilterPanelService } from '@farris/ui-filter-panel';
import { DatagridComponent } from '../../datagrid.component';
import { DatagridSmartFilterService } from '../../services/datagrid-smart-filter.service';
var DatagridSmartFilterComponent = /** @class */ (function () {
    function DatagridSmartFilterComponent(render, el, zone, inject, filterPanelService, smartFilterSer, dg) {
        this.render = render;
        this.el = el;
        this.zone = zone;
        this.inject = inject;
        this.filterPanelService = filterPanelService;
        this.smartFilterSer = smartFilterSer;
        this.dg = dg;
        this.filterData = null;
        this.disabled = false;
        this.smartFilterDataChanged$ = null;
        this.removeFilter$ = null;
        this.clearAllFilter$ = null;
        this.smartFilterEvents = [];
        this.idService = this.inject.get(IdService, null);
    }
    /**
     * @return {?}
     */
    DatagridSmartFilterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.removeFilter$) {
            this.removeFilter$ = this.smartFilterSer.removeFilter.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e && e.labelCode === _this.column.field) {
                    _this.filterData = null;
                    _this.render.removeClass(_this.el.nativeElement, 'active');
                }
            }));
            this.smartFilterEvents.push(this.removeFilter$);
        }
        if (!this.clearAllFilter$) {
            this.clearAllFilter$ = this.smartFilterSer.clearAllFilter.subscribe((/**
             * @return {?}
             */
            function () {
                _this.filterData = null;
                _this.render.removeClass(_this.el.nativeElement, 'active');
            }));
            this.smartFilterEvents.push(this.clearAllFilter$);
        }
        if (this.dg && !this.smartFilterDataChanged$) {
            this.smartFilterDataChanged$ = this.dg.dgs['smartFilterDataChange'].subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e && _this.column.field === e.fieldCode) {
                    _this.filterData.value = e.value;
                    _this.filterData.control.single = e.control.single;
                }
            }));
            this.smartFilterEvents.push(this.smartFilterDataChanged$);
        }
        this.dg.dgs.clearFilter.subscribe((/**
         * @return {?}
         */
        function () {
            _this.filterData = null;
            _this.dg.smartFilterResult = { controlData: [], conditions: [] };
            _this.smartFilterSer.clearAll();
            _this.render.removeClass(_this.el.nativeElement, 'active');
        }));
    };
    /**
     * @return {?}
     */
    DatagridSmartFilterComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.filterPanelRef) {
            this.filterPanelService.hidePanel();
            this.filterPanelRef = null;
        }
        if (this.smartFilterEvents && this.smartFilterEvents.length) {
            this.smartFilterEvents.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                n.unsubscribe();
                n = null;
            }));
            this.smartFilterEvents = [];
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridSmartFilterComponent.prototype.getFilterData = /**
     * @private
     * @return {?}
     */
    function () {
        var _a = this.column, field = _a.field, title = _a.title;
        if (!this.filterData) {
            this.filterData = this.smartFilterSer.controlData.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.id === field; }));
        }
        if (!this.filterData) {
            this.filterData = {
                id: field,
                labelCode: field,
                code: field,
                name: title,
                control: this.smartFilterSer.getColumnFilterData(this.column),
                placeHolder: '',
                value: {
                    value: ''
                }
            };
        }
        return cloneDeep(this.filterData);
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    DatagridSmartFilterComponent.prototype.getPanelPosition = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var x = $event.pageX - 33;
        /** @type {?} */
        var y = $event.pageY + 9;
        /** @type {?} */
        var targetRect = $event.target.getBoundingClientRect();
        /** @type {?} */
        var moveArrow = 0;
        if (window.innerWidth - x < 380) {
            /** @type {?} */
            var i = 380 - (window.innerWidth - x);
            x = x - i - 20;
            moveArrow = targetRect.left - x;
        }
        return { x: x, y: y, moveArrow: moveArrow };
    };
    /**
     * @private
     * @return {?}
     */
    DatagridSmartFilterComponent.prototype.hideFilterPanel = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.filterPanelRef) {
            this.filterPanelService.hidePanel();
            this.filterPanelRef = null;
            if (!this.filterData || (this.filterData.control.controltype === 'bool-check' ? !this.filterData.value.value : !this.filterData.valueText)) {
                this.render.removeClass(this.el.nativeElement, 'active');
            }
        }
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    DatagridSmartFilterComponent.prototype.clearColumnFilter = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.filterData = null;
        this.hideFilterPanel();
        this.smartFilterSer.removeCondition(e);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSmartFilterComponent.prototype.showFilterPanel = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        $event.stopPropagation();
        this.render.addClass(this.el.nativeElement, 'active');
        var _a = this.getPanelPosition($event), x = _a.x, y = _a.y, moveArrow = _a.moveArrow;
        this.filterPanelRef = this.filterPanelService.showPanel({
            left: x,
            top: y,
            item: this.getFilterData(),
            panelExtendTemplate: this.column.sortable ? this.sortTmp : null,
            localStorageKey: 'smartfilter_' + this.dg.dgs.createConfigKey(this.dg.id),
            target: $event.target
        });
        if (moveArrow) {
            /** @type {?} */
            var arrowEl = this.filterPanelRef['el'].querySelector('.f-filter-panel-arrow');
            if (arrowEl) {
                this.render.setStyle(arrowEl, 'left', moveArrow + "px");
            }
        }
        this.filterPanelRef.dataChange.subscribe((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (_this.filterData && _this.filterData.id == item.id) {
                if (item.value && item.value.single !== undefined) {
                    _this.filterData.value = item.value;
                    _this.filterData.control.single = item.value.single;
                }
            }
        }));
        this.filterPanelRef.hidePanel.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.hideFilterPanel();
        }));
        this.filterPanelRef.filterSubmit.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e.filter && e.filter.length) {
                _this.filterData = e.item || null;
                _this.hideFilterPanel();
                _this.smartFilterSer.filterConditionChanged({ conditions: e.filter, controlData: e.item, from: 'panel' });
            }
            else {
                _this.clearColumnFilter(e.item);
            }
        }));
        this.filterPanelRef.clearFilter.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.clearColumnFilter(e);
        }));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSmartFilterComponent.prototype.onClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        if (this.disabled) {
            return;
        }
        this.showFilterPanel($event);
        return false;
    };
    /**
     * @param {?} $event
     * @param {?} order
     * @return {?}
     */
    DatagridSmartFilterComponent.prototype.onSort = /**
     * @param {?} $event
     * @param {?} order
     * @return {?}
     */
    function ($event, order) {
        var _this = this;
        $event.stopPropagation();
        if (this.column.order === order) {
            this.column.order = '';
        }
        else {
            this.column.order = order;
        }
        /** @type {?} */
        var sortName = this.dg.sortName;
        /** @type {?} */
        var sortOrder = this.dg.sortOrder;
        /** @type {?} */
        var sortFields = [];
        /** @type {?} */
        var sortOrders = [];
        if (sortName) {
            sortFields = sortName.split(',');
            sortOrders = sortOrder.split(',');
        }
        /** @type {?} */
        var newOrder = this.column.order;
        /** @type {?} */
        var i = sortFields.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n === _this.column.field; }));
        if (i >= 0) {
            if (newOrder === '') {
                newOrder = undefined;
                sortFields.splice(i, 1);
                sortOrders.splice(i, 1);
            }
            else {
                sortOrders[i] = newOrder;
            }
        }
        else {
            if (this.dg.multiSort) {
                sortFields.push(this.column.field);
                sortOrders.push(newOrder);
            }
            else {
                sortFields = [this.column.field];
                sortOrders = [newOrder];
            }
        }
        this.hideFilterPanel();
        this.dg.sortName = sortFields.join(',');
        this.dg.sortOrder = sortOrders.join(',');
        this.dg.dfs.setSortInfo(this.dg.sortName, this.dg.sortOrder);
        this.dg.beforeSortColumn(this.dg.sortName, this.dg.sortOrder, this.dg).subscribe((/**
         * @return {?}
         */
        function () {
            _this.dg.onColumnSorted();
        }));
    };
    DatagridSmartFilterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-smart-filter, [datagrid-smart-filter]',
                    template: "<ng-template #sort>\r\n    <div class=\"f-filter-panel-sort-wrapper f-filter-panel-sort-wrapper-hasfilter\">\r\n        <div class=\"f-filter-panel-sort\">\r\n            <div class=\"panel-sort-up panel-sort-item\" [class.active]=\"column?.order === 'asc'\" (click)=\"onSort($event, 'asc')\">\r\n                <span class=\"panel-sort-item-icon f-icon f-icon-col-ascendingorder\"></span>\r\n                <span class=\"panel-sort-item-text\">{{ 'datagrid.settings.asc' | locale: '\u5347\u5E8F' }}</span>\r\n            </div>\r\n            <div class=\"panel-sort-down panel-sort-item\" [class.active]=\"column?.order === 'desc'\"  (click)=\"onSort($event, 'desc')\">\r\n                <span class=\"panel-sort-item-icon f-icon f-icon-col-descendingorder\"></span>\r\n                <span class=\"panel-sort-item-text\">{{ 'datagrid.settings.desc' | locale: '\u964D\u5E8F' }}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</ng-template>",
                    providers: [
                        FilterPanelService
                    ]
                }] }
    ];
    /** @nocollapse */
    DatagridSmartFilterComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector },
        { type: FilterPanelService },
        { type: DatagridSmartFilterService },
        { type: DatagridComponent, decorators: [{ type: Optional }] }
    ]; };
    DatagridSmartFilterComponent.propDecorators = {
        column: [{ type: Input }],
        filterData: [{ type: Input }],
        disabled: [{ type: Input }],
        sortTmp: [{ type: ViewChild, args: ['sort',] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return DatagridSmartFilterComponent;
}());
export { DatagridSmartFilterComponent };
if (false) {
    /** @type {?} */
    DatagridSmartFilterComponent.prototype.column;
    /** @type {?} */
    DatagridSmartFilterComponent.prototype.filterData;
    /** @type {?} */
    DatagridSmartFilterComponent.prototype.disabled;
    /** @type {?} */
    DatagridSmartFilterComponent.prototype.sortTmp;
    /** @type {?} */
    DatagridSmartFilterComponent.prototype.filterPanelRef;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.idService;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.smartFilterDataChanged$;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.removeFilter$;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.clearAllFilter$;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.smartFilterEvents;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.inject;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.filterPanelService;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.smartFilterSer;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,