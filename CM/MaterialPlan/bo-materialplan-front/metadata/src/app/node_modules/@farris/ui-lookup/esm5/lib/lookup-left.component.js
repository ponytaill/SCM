/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
* @Author: 疯狂秀才(Lucas Huang)
* @Date: 2018-12-14 14:40:48
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-09-25 18:10:29
* @Company: Inspur
* @Version: v0.0.1
*/
import { Component, ViewChild, ViewContainerRef, EventEmitter, Output, ComponentFactoryResolver, ChangeDetectorRef } from '@angular/core';
import { of } from 'rxjs';
import { DataTableComponent } from '@farris/ui-datatable';
import { TreeTableComponent } from '@farris/ui-treetable';
var LookupLeftComponent = /** @class */ (function () {
    function LookupLeftComponent(cfr, cd) {
        this.cfr = cfr;
        this.cd = cd;
        this.selected = new EventEmitter();
        this.unselected = new EventEmitter();
        this.search = new EventEmitter();
        this.pageChanged = new EventEmitter();
        this._searchState = null;
        this.allData = null;
    }
    /**
     * @return {?}
     */
    LookupLeftComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    LookupLeftComponent.prototype.createComponent = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dtFac = null;
        if (!this.isTreeList()) {
            dtFac = this.cfr.resolveComponentFactory(DataTableComponent);
        }
        else {
            dtFac = this.cfr.resolveComponentFactory(TreeTableComponent);
        }
        this.navOptions['keepSelect'] = false;
        // 左侧查询过滤条，隐藏掉；
        this.navOptions['showFilterBar'] = true;
        // if (this.navOptions.width) {
        //     this.navOptions.width = this.navOptions.width - 2;
        // }
        this.navOptions.width = this.lookupCmp.leftPanelWidth - 2;
        // const injector: Injector = ReflectiveInjector.resolveAndCreate([
        //     { provide: DataTableService, useFactory: () => { new DataTableService()}}
        // ]);
        this.cmpRef = this.cmpContainer.createComponent(dtFac);
        if (!this.isTreeList()) {
            this.navOptions['fill'] = true;
            this.cmpRef.instance.maxSize = 5;
            this.cmpRef.instance.fill = true;
        }
        else {
            this.navOptions['fit'] = true;
        }
        // this.cmpRef.instance.fit = true;
        if (this.navOptions.pageInfo) {
            if (this.navOptions.pageInfo.pageList) {
                this.navOptions.pageList = this.navOptions.pageInfo.pageList;
            }
            this.navOptions.pagination = this.navOptions.pageInfo.enablePager;
            this.navOptions.pageIndex = this.navOptions.pageInfo.pageIndex;
            this.navOptions.pageSize = this.navOptions.pageInfo.pageSize;
        }
        else {
            this.navOptions.pagination = false;
        }
        Object.assign(this.cmpRef.instance, this.navOptions);
        this.loadData();
        return of(this.cmpRef);
    };
    /**
     * @return {?}
     */
    LookupLeftComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        this.cd.detectChanges();
    };
    /**
     * @param {?=} size
     * @return {?}
     */
    LookupLeftComponent.prototype.resize = /**
     * @param {?=} size
     * @return {?}
     */
    function (size) {
        if (size) {
            size.width = size.width - 2;
            // if (this.cmpRef.instance instanceof TreeTableComponent) {
            //     size.height += 46;
            // }
            this.cmpRef.instance.resize(size);
        }
    };
    /**
     * @return {?}
     */
    LookupLeftComponent.prototype.isTreeList = /**
     * @return {?}
     */
    function () {
        return this.navOptions.displayType.toLowerCase() === 'treelist';
    };
    /**
     * @private
     * @param {?} items
     * @param {?} dt
     * @return {?}
     */
    LookupLeftComponent.prototype.selectLeftDataTableRow = /**
     * @private
     * @param {?} items
     * @param {?} dt
     * @return {?}
     */
    function (items, dt) {
        var _this = this;
        if (items && items.length) {
            /** @type {?} */
            var item = null;
            if (this.lookupCmp.navSelectedIds) {
                item = items.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[dt.idField] == _this.lookupCmp.navSelectedIds; }));
            }
            else {
                if (this.lookupCmp.selectFirstInNav) {
                    item = items[0];
                }
            }
            if (item) {
                dt.dtBody.selectedRowIndex = -1;
                dt.dtBody.selectedRow('', 0, item);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupLeftComponent.prototype.closeLoading = /**
     * @private
     * @return {?}
     */
    function () {
        this.lookupCmp.closeLoading();
    };
    /**
     * @private
     * @param {?} dt
     * @return {?}
     */
    LookupLeftComponent.prototype.initDataTable = /**
     * @private
     * @param {?} dt
     * @return {?}
     */
    function (dt) {
        var _this = this;
        dt.loadData({
            pageSize: this.navOptions.pageSize,
            pageIndex: this.navOptions.pageIndex,
            total: this.navOptions.total,
            data: this.navOptions.items,
        });
        dt.resize({ width: 320, height: this.navOptions.height });
        // 行选中
        dt.selectedRow.subscribe((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.selected.emit({ data: d.data });
        }));
        dt.unSelectRow.subscribe((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.selected.emit(null);
        }));
        /** @type {?} */
        var p = { pageInfo: { pageIndex: 1, pageSize: this.navOptions.pageSize }, search: '' };
        /** @type {?} */
        var loadTableData = {
            next: (/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.closeLoading();
                dataTableReLoad(data);
            }),
            error: (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.closeLoading();
            })
        };
        // 查询
        dt.search.subscribe((/**
         * @param {?} searchData
         * @return {?}
         */
        function (searchData) {
            _this._searchState = searchData;
            _this.search.emit(searchData);
            p.search = searchData;
            p.pageInfo.pageSize = dt.pageSize;
            _this.lookupCmp.navigationFilter = null;
            _this.lookupCmp.httpMgr.getData(p, 'navsearch').subscribe(loadTableData);
        }));
        /** @type {?} */
        var dataTableReLoad = (/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            dt.loadData({
                pageSize: data.pageInfo.pageSize,
                pageIndex: data.pageInfo.pageIndex,
                total: data.total,
                data: data.items,
            });
            _this.selectLeftDataTableRow(data.items, dt);
            dt.cd.markForCheck();
        });
        // 分页
        dt.pageChanged.subscribe((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.pageChanged.emit(d);
            _this.lookupCmp.navigationFilter = null;
            _this.lookupCmp.httpMgr.getData(d, 'navsearch').subscribe(loadTableData);
        }));
        dt.pageSizeChanged.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.lookupCmp.navigationFilter = null;
            _this.lookupCmp.httpMgr.getData(e, 'navsearch').subscribe(loadTableData);
        }));
        dt.columnSorted.subscribe((/**
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            var _a = tslib_1.__assign({}, sort), sortName = _a.sortName, sortOrder = _a.sortOrder;
            _this.lookupCmp.navigationFilter = null;
            /** @type {?} */
            var param = Object.assign({ sortName: sortName, sortOrder: sortOrder }, _this._searchState);
            _this.lookupCmp.httpMgr.getData(param, 'navsearch').subscribe(loadTableData);
        }));
        dt.clearSearchValue.subscribe((/**
         * @return {?}
         */
        function () {
            _this._searchState = null;
        }));
        this.selectLeftDataTableRow(this.navOptions.items, dt);
    };
    /**
     * @private
     * @param {?} tt
     * @return {?}
     */
    LookupLeftComponent.prototype.initTreeTable = /**
     * @private
     * @param {?} tt
     * @return {?}
     */
    function (tt) {
        var _this = this;
        tt.virtualized = true;
        tt.nodeSelected.subscribe((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.selected.emit({ data: d.node.data });
        }));
        tt.nodeUnSelect.subscribe((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.selected.emit(null);
        }));
        tt.fixedHeader = true;
        // tt.fit = true;
        this.lookupCmp.treeNodeHelper.updateTreeNodeExpanded(this.navOptions.items, this.navOptions.treeInfo);
        tt.loadDataType = this.navOptions.treeInfo.loadDataType;
        // 检查完整树过滤条件 By Lucas 20200302
        this.navOptions.items = this.lookupCmp.checkNodeCanBeSelect(this.navOptions.items, this.navOptions.treeInfo.loadDataType === 'all');
        tt.loadData(this.navOptions.items);
        if (this.lookupCmp.navSelectedIds) {
            tt.selectNode(this.lookupCmp.navSelectedIds);
        }
        else if (this.lookupCmp.selectFirstInNav) {
            tt.selectFirstNode();
        }
        this.allData = this.navOptions.items;
        /** @type {?} */
        var loadTreeData = {
            next: (/**
             * @param {?} resData
             * @return {?}
             */
            function (resData) {
                _this.closeLoading();
                tt.clearAll();
                /** @type {?} */
                var items = _this.lookupCmp.checkNodeCanBeSelect(resData.items, _this.navOptions.treeInfo.loadDataType === 'all');
                tt.loadData(items);
                tt.resize();
            }),
            error: (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.closeLoading();
            })
        };
        tt.search.subscribe((/**
         * @param {?} search
         * @return {?}
         */
        function (search) {
            _this._searchState = search;
            _this.lookupCmp.navigationFilter = null;
            _this.lookupCmp.httpMgr.getData({ search: search }, 'navsearch').subscribe(loadTreeData);
        }));
        tt.columnSorted.subscribe((/**
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            _this.lookupCmp.navigationFilter = null;
            if (tt.loadDataType === 'all') {
                tt.clientSort();
            }
            else {
                var _a = tslib_1.__assign({}, sort), sortName = _a.sortName, sortOrder = _a.sortOrder;
                /** @type {?} */
                var param = Object.assign({ sortName: sortName, sortOrder: sortOrder }, _this._searchState);
                _this.lookupCmp.httpMgr.getData(param, 'nav').subscribe(loadTreeData);
            }
        }));
        tt.clearSearchValue.subscribe((/**
         * @return {?}
         */
        function () {
            _this._searchState = null;
            tt.loadData(_this.allData);
        }));
        tt.expand.subscribe((/**
         * @param {?} tn
         * @return {?}
         */
        function (tn) {
            _this.onNodeExpanded(tn, tt);
        }));
    };
    /**
     * @private
     * @param {?} tn
     * @param {?} tt
     * @return {?}
     */
    LookupLeftComponent.prototype.onNodeExpanded = /**
     * @private
     * @param {?} tn
     * @param {?} tt
     * @return {?}
     */
    function (tn, tt) {
        if (tn.leaf) {
            return;
        }
        if (!tn.children || !tn.children.length) {
            /** @type {?} */
            var treeInfo = this.navOptions.treeInfo;
            if (this.navOptions.treeInfo.loadDataType === 'async') {
                /** @type {?} */
                var parentPath = '';
                /** @type {?} */
                var parentLayer = -1;
                var _a = tslib_1.__assign({}, tt.searchData), _b = _a.field, field = _b === void 0 ? '*' : _b, _c = _a.value, value = _c === void 0 ? '' : _c;
                tn['showLoading'] = true;
                tt.detectChanges();
                if (treeInfo.layerType === 'parentId') {
                    // 父ID加载方式
                    parentPath = tn['id'];
                }
                else {
                    /** @type {?} */
                    var treeInfoField = treeInfo.dataField;
                    if (treeInfoField) {
                        parentPath = tn.data[treeInfoField][treeInfo.pathField];
                        parentLayer = tn.data[treeInfoField][treeInfo.layerField];
                    }
                    else {
                        console.log('未找到分级信息。');
                    }
                }
                if (!this.lookupCmp.uri) {
                    this.lookupCmp.expandTreeNode.emit({
                        instance: tt, node: tn,
                        parentIdOrPath: parentPath, parentLayer: parentLayer, search: { value: value, field: field }
                    });
                    return;
                }
                this.getChildren(parentPath, parentLayer, { searchField: field === '*' ? '*' : field, searchValue: value }, tt).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    if (tt) {
                        if (tn && data.items && data.items.length) {
                            tt.appendChildren(data.items, tn);
                        }
                        tn['showLoading'] = false;
                        tt.detectChanges();
                    }
                }));
            }
        }
    };
    /**
     * @private
     * @param {?} parentPath
     * @param {?} parentLayer
     * @param {?} searchData
     * @param {?} tt
     * @return {?}
     */
    LookupLeftComponent.prototype.getChildren = /**
     * @private
     * @param {?} parentPath
     * @param {?} parentLayer
     * @param {?} searchData
     * @param {?} tt
     * @return {?}
     */
    function (parentPath, parentLayer, searchData, tt) {
        /** @type {?} */
        var uri = this.lookupCmp.gridOptions.uri;
        /** @type {?} */
        var search = tslib_1.__assign({ parentLayer: parentLayer, category: 'nav' }, searchData);
        if (this.navOptions.treeInfo.layerType === 'parentId') {
            search['parentId'] = parentPath;
        }
        else {
            search['parentPath'] = parentPath;
        }
        /** @type {?} */
        var param = {
            searchValue: JSON.stringify(search),
            customData: this.lookupCmp.customData,
            enableFullTree: false,
            loadTreeDataType: 'layerload'
        };
        if (this.lookupCmp.helpId) {
            param['helpId'] = this.lookupCmp.helpId;
        }
        if (tt && tt.sortName) {
            Object.assign(param, {
                sortName: tt.sortName,
                sortOrder: tt.sortOrder
            });
        }
        return this.lookupCmp.http.getData(uri, param);
    };
    /**
     * @return {?}
     */
    LookupLeftComponent.prototype.loadData = /**
     * @return {?}
     */
    function () {
        this.cmpRef.instance.allColumnsTitle = this.lookupCmp.allColumnsTitle;
        if (!this.isTreeList()) {
            /** @type {?} */
            var dt = (/** @type {?} */ (this.cmpRef.instance));
            this.initDataTable(dt);
        }
        else {
            /** @type {?} */
            var tt = (/** @type {?} */ (this.cmpRef.instance));
            this.initTreeTable(tt);
        }
    };
    LookupLeftComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lookup-left',
                    template: "<div style=\"height: 100%;position: relative;\">\r\n    <ng-container #container></ng-container>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    LookupLeftComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ChangeDetectorRef }
    ]; };
    LookupLeftComponent.propDecorators = {
        cmpContainer: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
        selected: [{ type: Output }],
        unselected: [{ type: Output }],
        search: [{ type: Output }],
        pageChanged: [{ type: Output }]
    };
    return LookupLeftComponent;
}());
export { LookupLeftComponent };
if (false) {
    /** @type {?} */
    LookupLeftComponent.prototype.cmpRef;
    /** @type {?} */
    LookupLeftComponent.prototype.navOptions;
    /** @type {?} */
    LookupLeftComponent.prototype.lookupCmp;
    /** @type {?} */
    LookupLeftComponent.prototype.cmpContainer;
    /** @type {?} */
    LookupLeftComponent.prototype.selected;
    /** @type {?} */
    LookupLeftComponent.prototype.unselected;
    /** @type {?} */
    LookupLeftComponent.prototype.search;
    /** @type {?} */
    LookupLeftComponent.prototype.pageChanged;
    /**
     * @type {?}
     * @private
     */
    LookupLeftComponent.prototype._searchState;
    /**
     * @type {?}
     * @private
     */
    LookupLeftComponent.prototype.allData;
    /**
     * @type {?}
     * @private
     */
    LookupLeftComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    LookupLeftComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,