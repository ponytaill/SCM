/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-04-08 16:51:39
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-09-23 16:51:21
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Input, EventEmitter, Output, ElementRef, Renderer2, ViewChild } from '@angular/core';
import { deepCopy, convertColumns } from '../datatable-column';
import { DataTableService } from '../datatable.service';
import { CommonUtils } from '@farris/ui-common';
import { DataTableComponent } from '../datatable.component';
import { DTCheckboxComponent } from '../datatable-checkbox.component';
export class DataTableHeaderComponent {
    /**
     * @param {?} el
     * @param {?} dataService
     * @param {?} render
     * @param {?} utils
     * @param {?} dt
     */
    constructor(el, dataService, render, utils, dt) {
        this.el = el;
        this.dataService = dataService;
        this.render = render;
        this.utils = utils;
        this.dt = dt;
        this.columns = [];
        this.singleSelect = true;
        this.checkedAll = new EventEmitter();
        this.rowsChange = new EventEmitter();
        this.loadData = new EventEmitter();
        this.sortType = {};
        this.filterFields = {};
        this.clickedUp = false;
        this.clickedDown = false;
        this.isCheckAll = false;
        this.allClass = ' ';
        this.width = '100%';
        this.allClass += this.el.nativeElement.classList.value;
        this.dataService.updateCheckAllStatus.subscribe((/**
         * @param {?} n
         * @return {?}
         */
        (n) => {
            if (n !== 2) {
                this.isCheckAll = n ? true : false;
                // this.checkallEl.elementRef.nativeElement.checked = this.isCheckAll;
            }
            else {
                this.isCheckAll = false;
                // this.checkallEl.elementRef.nativeElement.checked = false;
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.fixed === 'left') {
            this.columns = convertColumns(this.columns, 'left');
        }
        if (this.fixed === 'right') {
            this.columns = convertColumns(this.columns, 'right');
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() { }
    /**
     * @param {?} $event
     * @return {?}
     */
    onCheckedChange($event) {
        this.isCheckAll = $event.checked;
        this.checkedAll.emit($event.checked);
    }
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    createRowClassName(row, index) {
        return this.rowClassName ? this.rowClassName(row, index) : '';
    }
    /**
     * @private
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    compare(a, b) {
        if (typeof a === 'string') {
            return a.localeCompare(b);
        }
        else {
            return a === b ? 0 : (a > b ? 1 : -1);
        }
    }
    /**
     * @private
     * @param {?} r1
     * @param {?} r2
     * @return {?}
     */
    _sort(r1, r2) {
        /** @type {?} */
        let r = 0;
        /** @type {?} */
        const sortFields = this.dt.sortName.split(',');
        /** @type {?} */
        const orders = this.dt.sortOrder.split(',');
        if (!this.dt.sortName) {
            return r;
        }
        for (let i = 0; i < sortFields.length; i++) {
            /** @type {?} */
            const sn = sortFields[i];
            /** @type {?} */
            const so = orders[i];
            /** @type {?} */
            const col = this.columns.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.field === sn));
            /** @type {?} */
            const orderby = col['sorter'] || this.compare;
            /** @type {?} */
            let v1 = this.utils.getValue(sn, r1);
            if (v1 === null || v1 === undefined) {
                v1 = '';
            }
            /** @type {?} */
            let v2 = this.utils.getValue(sn, r2);
            if (v2 === null || v2 === undefined) {
                v2 = '';
            }
            r = orderby(v1, v2);
            if (r !== 0) {
                return r * (so === 'asc' ? 1 : -1);
            }
        }
        return r;
    }
    /**
     * @private
     * @return {?}
     */
    clientSort() {
        /** @type {?} */
        const sortedData = this.data.sort(this._sort.bind(this));
        this.loadData.emit(sortedData);
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onSortColumnClick($event, col) {
        if (!col.sortable) {
            return;
        }
        /** @type {?} */
        const sortName = this.dt.sortName;
        /** @type {?} */
        const sortOrder = this.dt.sortOrder;
        /** @type {?} */
        let sortFields = [];
        /** @type {?} */
        let sortOrders = [];
        if (sortName) {
            sortFields = sortName.split(',');
            sortOrders = sortOrder.split(',');
        }
        /** @type {?} */
        const colOrder = col.order || 'asc';
        /** @type {?} */
        let newOrder = colOrder;
        /** @type {?} */
        const i = sortFields.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n === col.field));
        if (i >= 0) {
            /** @type {?} */
            const _order = sortOrders[i] === 'asc' ? 'desc' : 'asc';
            newOrder = _order;
            // if (this.dt.multiSort && newOrder === 'asc') {
            if (newOrder === 'asc') {
                newOrder = undefined;
                sortFields.splice(i, 1);
                sortOrders.splice(i, 1);
                // if (sortFields.length === 0) {
                //     sortFields.push(col.field);
                //     sortOrders.push('asc');
                //     newOrder = 'asc';
                // }
            }
            else {
                sortOrders[i] = _order;
            }
        }
        else {
            if (this.dt.multiSort) {
                sortFields.push(col.field);
                sortOrders.push(colOrder);
            }
            else {
                sortFields = [col.field];
                sortOrders = [colOrder];
            }
        }
        col.order = newOrder;
        this.dt.sortName = sortFields.join(',');
        this.dt.sortOrder = sortOrders.join(',');
        // this.dfs.setSortInfo(this.dg.sortName, this.dg.sortOrder);
        if (!this.dt.multiSort) {
            /** @type {?} */
            const updateFieldOrder = (/**
             * @param {?} cols
             * @return {?}
             */
            (cols) => {
                if (!cols || !cols.length) {
                    return;
                }
                cols.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => {
                    c.order = undefined;
                    /** @type {?} */
                    const k = sortFields.findIndex((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => f === c.field));
                    if (k >= 0) {
                        c.order = sortOrders[k];
                    }
                }));
            });
            updateFieldOrder(this.columns);
            // this.cdRef.detectChanges();
        }
        this.dt.beforeSortColumn(this.dt.sortName, this.dt.sortOrder).subscribe((/**
         * @return {?}
         */
        () => {
            if (this.dt.remoteSort) {
                // this.reload();
            }
            else {
                this.clientSort();
            }
            this.dt.columnSorted.emit({ sortName: this.dt.sortName, sortOrder: this.dt.sortOrder });
        }));
    }
    /**
     * @return {?}
     */
    deepCopyData() {
        /** @type {?} */
        const copyColumns = deepCopy(this.columns);
        /** @type {?} */
        const copyRows = deepCopy(this.rows);
        copyColumns.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            element.sortType = 'normal';
        }));
        return {
            copyColumns,
            copyRows
        };
    }
    /* 若存在筛选条件 保存按钮可点击
         */
    /**
     * @param {?} col
     * @return {?}
     */
    hasChecked(col) {
        if (this.filterFields.hasOwnProperty(col.field)) {
            this.filterFields[col.field].some((/**
             * @param {?} ele
             * @return {?}
             */
            ele => {
                return ele.checked;
            }));
        }
        return false;
    }
}
DataTableHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'datatable-header',
                template: `
        <table class="table" [class.table-sm]="size === 'small'">
            <colgroup>
                <col class="dt-checkbox-cell" *ngIf="!singleSelect" />
                <col *ngFor="let col of columns" [style.width]="col.width + 'px'" />
            </colgroup>
            <thead>
                <tr>
                    <th drag-column class="dt-checkbox-cell" *ngIf="!singleSelect">
                        <dt-checkbox #checkall [checked]="isCheckAll" (checkedChange)="onCheckedChange($event)"></dt-checkbox>
                    </th>
                    <th drag-column *ngFor="let col of columns; let i = index" #dragbar="resizeRef"
                        [class.resizable-column]="dt.resizableColumns && !dt.hasFixed"
                        [style.textAlign]="col.hAlign || 'left'" [class.datatable-fixed-right]="col['fixed'] === 'right'">
                        <span [style.marginRight.px]="col.sortable ? 10: 0">{{ col.title }}</span>
                        <ng-container *ngIf="col.sortable">
                            <span *ngIf="col.order" class="f-datatable-sort"
                                [ngClass]="{
                                  'f-datatable-sort-asc':col.order === 'asc',
                                  'f-datatable-sort-desc':col.order === 'desc'
                                }"
                                (click)="onSortColumnClick($event, col)">
                            </span>
                            <span *ngIf="!col.order" class="f-datatable-sort" (click)="onSortColumnClick($event, col)"></span>
                        </ng-container>
                        <span class="column-resizer" (mousedown)="dragbar.onMouseDown($event)" *ngIf="dt.resizableColumns && !dt.hasFixed"></span>
                    </th>
                </tr>
            </thead>
        </table>
    `,
                styles: ["th>div{display:inline-block;float:right;width:20%;height:0;margin-right:5%}th>div>span.sort-container{position:relative;display:inline-block;width:100%;height:1rem}th span.farris-icon{position:absolute;left:0;opacity:.5;cursor:pointer}th span.k-i-arrow-60-up{top:0}th span.k-i-arrow-60-down{top:.5em}th span.k-i-filter{top:-.5rem}th span.clicked,th span.k-i-filter:hover{opacity:1}.farris-table-header{overflow:auto}.datatable-fixed-right{right:0;position:-webkit-sticky;position:sticky;background-color:#f1f3f7}"]
            }] }
];
/** @nocollapse */
DataTableHeaderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: DataTableService },
    { type: Renderer2 },
    { type: CommonUtils },
    { type: DataTableComponent }
];
DataTableHeaderComponent.propDecorators = {
    size: [{ type: Input }],
    hover: [{ type: Input }],
    columns: [{ type: Input }],
    singleSelect: [{ type: Input }],
    fixed: [{ type: Input }],
    rows: [{ type: Input }],
    data: [{ type: Input }],
    rowClassName: [{ type: Input }],
    checkedAll: [{ type: Output }],
    rowsChange: [{ type: Output }],
    loadData: [{ type: Output }],
    checkallEl: [{ type: ViewChild, args: ['checkall',] }]
};
if (false) {
    /** @type {?} */
    DataTableHeaderComponent.prototype.size;
    /** @type {?} */
    DataTableHeaderComponent.prototype.hover;
    /** @type {?} */
    DataTableHeaderComponent.prototype.columns;
    /** @type {?} */
    DataTableHeaderComponent.prototype.singleSelect;
    /** @type {?} */
    DataTableHeaderComponent.prototype.fixed;
    /** @type {?} */
    DataTableHeaderComponent.prototype.rows;
    /** @type {?} */
    DataTableHeaderComponent.prototype.data;
    /** @type {?} */
    DataTableHeaderComponent.prototype.rowClassName;
    /** @type {?} */
    DataTableHeaderComponent.prototype.checkedAll;
    /** @type {?} */
    DataTableHeaderComponent.prototype.rowsChange;
    /** @type {?} */
    DataTableHeaderComponent.prototype.loadData;
    /** @type {?} */
    DataTableHeaderComponent.prototype.checkallEl;
    /** @type {?} */
    DataTableHeaderComponent.prototype.sortType;
    /** @type {?} */
    DataTableHeaderComponent.prototype.filterFields;
    /** @type {?} */
    DataTableHeaderComponent.prototype.clickedUp;
    /** @type {?} */
    DataTableHeaderComponent.prototype.clickedDown;
    /** @type {?} */
    DataTableHeaderComponent.prototype.copyColumns;
    /** @type {?} */
    DataTableHeaderComponent.prototype.copyRows;
    /** @type {?} */
    DataTableHeaderComponent.prototype.originRows;
    /** @type {?} */
    DataTableHeaderComponent.prototype.isCheckAll;
    /** @type {?} */
    DataTableHeaderComponent.prototype.allClass;
    /** @type {?} */
    DataTableHeaderComponent.prototype.width;
    /** @type {?} */
    DataTableHeaderComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DataTableHeaderComponent.prototype.dataService;
    /**
     * @type {?}
     * @private
     */
    DataTableHeaderComponent.prototype.render;
    /** @type {?} */
    DataTableHeaderComponent.prototype.utils;
    /** @type {?} */
    DataTableHeaderComponent.prototype.dt;
}
//# sourceMappingURL=data:application/json;base64,