/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter, RendererFactory2, NgZone } from '@angular/core';
import { ModalBackdropComponent } from './modal-backdrop.component';
import { ModalContainerComponent } from './modal-container.component';
import { CLASS_NAME, modalConfigDefaults, ModalOptions, TRANSITION_DURATIONS } from './modal-options.class';
import { BsModalRef } from './bs-modal-ref.service';
import { Utils } from '@farris/ui-modal/utils';
import { ComponentLoaderFactory } from '@farris/ui-modal/component-loader';
export class BsModalService {
    /**
     * @param {?} rendererFactory
     * @param {?} clf
     * @param {?} ngZone
     */
    constructor(rendererFactory, clf, ngZone) {
        this.clf = clf;
        this.ngZone = ngZone;
        this.version = '0.0.6';
        this.config = modalConfigDefaults;
        this.onShow = new EventEmitter();
        this.onShown = new EventEmitter();
        this.onHide = new EventEmitter();
        this.onHidden = new EventEmitter();
        this.isBodyOverflowing = false;
        this.originalBodyPadding = 0;
        this.scrollbarWidth = 0;
        this.modalsCount = 0;
        this.lastDismissReason = '';
        this.loaders = [];
        this._documentMouseDownHandler = null;
        this._renderer = rendererFactory.createRenderer(null, null);
        this._backdropLoader = this.clf.createLoader(null, null, this._renderer);
    }
    /**
     * @private
     * @return {?}
     */
    clearDocumentEvents() {
        if (this._documentMouseDownHandler) {
            document.body.removeEventListener('mousedown', this._documentMouseDownHandler);
        }
        this._documentMouseDownHandler = null;
    }
    /**
     * Shows a modal
     * @param {?} content
     * @param {?=} config
     * @return {?}
     */
    show(content, config) {
        this.modalsCount++;
        this._createLoaders();
        this.config = Object.assign({}, modalConfigDefaults, config);
        this.checkDialogSize();
        this._showBackdrop();
        this.lastDismissReason = null;
        /** @type {?} */
        const modal = this._showModal(content);
        return modal;
    }
    /**
     * @param {?} level
     * @return {?}
     */
    hide(level) {
        if (this.modalsCount === 1) {
            this._hideBackdrop();
            this.resetScrollbar();
        }
        this.modalsCount = this.modalsCount >= 1 ? this.modalsCount - 1 : 0;
        // this.ngZone.runOutsideAngular(() => {
        //     setTimeout(() => {
        // this._hideModal(level);
        // this.removeLoaders(level);
        //     }, this.config.animated ? TRANSITION_DURATIONS.BACKDROP : 0);
        // });
        this._hideModal(level);
        this.removeLoaders(level);
        this.clearDocumentEvents();
    }
    /**
     * @return {?}
     */
    _showBackdrop() {
        /** @type {?} */
        const isBackdropEnabled = this.config.backdrop || this.config.backdrop === 'static';
        /** @type {?} */
        const isBackdropInDOM = !this.backdropRef || !this.backdropRef.instance.isShown;
        if (this.modalsCount === 1) {
            this.removeBackdrop();
            if (isBackdropEnabled && isBackdropInDOM) {
                this._backdropLoader
                    .attach(ModalBackdropComponent)
                    .to('body')
                    .show({ isAnimated: this.config.animated });
                this.backdropRef = this._backdropLoader._componentRef;
            }
        }
    }
    /**
     * @return {?}
     */
    _hideBackdrop() {
        if (!this.backdropRef) {
            return;
        }
        this.backdropRef.instance.isShown = false;
        /** @type {?} */
        const duration = this.config.animated ? TRANSITION_DURATIONS.BACKDROP : 0;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => this.removeBackdrop()), duration);
        }));
    }
    /**
     * @private
     * @param {?} _modal
     * @return {?}
     */
    updateZindex(_modal) {
        /** @type {?} */
        const overlays = Array.from(document.body.querySelectorAll('body>div, body>farris-dialog>.farris-modal,body>.farris-modal')).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return window.getComputedStyle(n).zIndex;
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n && n !== 'auto')).map((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return parseInt(n, 10);
        }));
        /** @type {?} */
        const maxZindex = Math.max(...overlays);
        _modal.dialog.location.nativeElement.style.zIndex = maxZindex + 1;
    }
    /**
     * @param {?} content
     * @return {?}
     */
    _showModal(content) {
        /** @type {?} */
        const modalLoader = this.loaders[this.loaders.length - 1];
        /** @type {?} */
        const bsModalRef = new BsModalRef();
        /** @type {?} */
        const modalContainerRef = modalLoader
            .provide({ provide: ModalOptions, useValue: this.config })
            .provide({ provide: BsModalRef, useValue: bsModalRef })
            .attach(ModalContainerComponent)
            .to('body')
            .show({ content, isAnimated: this.config.animated,
            initialState: this.config.initialState,
            bsModalService: this
        });
        modalContainerRef.instance.level = this.getModalsCount();
        modalContainerRef.instance.dialogType = this.config.dialogType;
        modalContainerRef.instance.iframe = '';
        if (this.config.dialogType === 'iframe') {
            modalContainerRef.instance.iframe = content;
        }
        bsModalRef.close = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            modalContainerRef.instance.close(e);
            this.clearDocumentEvents();
        });
        // 如果是消息类型的，出现滚动条就不响应动画了
        if (!this.config.fitContent) {
            modalContainerRef.instance.toCenter();
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                document.body.addEventListener('mousedown', this._documentMouseDownHandler = (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => { this._onMouseDown(e); }));
            }));
        }
        bsModalRef.content = modalLoader.getInnerComponent() || null;
        bsModalRef.dialog = modalContainerRef;
        bsModalRef.buttons = modalContainerRef.instance.buttons;
        modalContainerRef.instance['modalRef'] = bsModalRef;
        if (this.config.opened) {
            this.config.opened({ instance: bsModalRef });
        }
        this.updateZindex(bsModalRef);
        return bsModalRef;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    _onMouseDown(e) {
        if (e.target.localName === 'modal-container' || e.target.classList.contains('farris-modal')) {
            this._renderer.addClass(e.target, 'animated');
            this._renderer.addClass(e.target, 'shake');
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this._renderer.removeClass(e.target, 'animated');
                    this._renderer.removeClass(e.target, 'shake');
                }), 650);
            }));
            return false;
        }
    }
    /**
     * @param {?} level
     * @return {?}
     */
    _hideModal(level) {
        /** @type {?} */
        const modalLoader = this.loaders[level - 1];
        if (modalLoader) {
            modalLoader.hide();
        }
    }
    /**
     * @return {?}
     */
    getModalsCount() {
        return this.modalsCount;
    }
    /**
     * @return {?}
     */
    getCurrentModalContainer() {
        return this.loaders[this.getModalsCount() - 1];
    }
    /**
     * @param {?} reason
     * @return {?}
     */
    setDismissReason(reason) {
        this.lastDismissReason = reason;
    }
    /**
     * @return {?}
     */
    removeBackdrop() {
        this._backdropLoader.hide();
        this.backdropRef = null;
    }
    /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */
    /** Scroll bar tricks */
    /**
     * \@internal
     * @return {?}
     */
    checkScrollbar() {
        this.isBodyOverflowing = document.body.clientWidth < window.innerWidth;
        this.scrollbarWidth = this.getScrollbarWidth();
    }
    /**
     * @return {?}
     */
    setScrollbar() {
        if (!document) {
            return;
        }
        this.originalBodyPadding = parseInt(window
            .getComputedStyle(document.body)
            .getPropertyValue('padding-right') || '0', 10);
        if (this.isBodyOverflowing) {
            document.body.style.paddingRight = `${this.originalBodyPadding +
                this.scrollbarWidth}px`;
        }
    }
    /**
     * @private
     * @return {?}
     */
    resetScrollbar() {
        document.body.style.paddingRight = `${this.originalBodyPadding}px`;
    }
    // thx d.walsh
    /**
     * @private
     * @return {?}
     */
    getScrollbarWidth() {
        /** @type {?} */
        const scrollDiv = this._renderer.createElement('div');
        this._renderer.addClass(scrollDiv, CLASS_NAME.SCROLLBAR_MEASURER);
        this._renderer.appendChild(document.body, scrollDiv);
        /** @type {?} */
        const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        this._renderer.removeChild(document.body, scrollDiv);
        return scrollbarWidth;
    }
    /**
     * @private
     * @return {?}
     */
    _createLoaders() {
        /** @type {?} */
        const loader = this.clf.createLoader(null, null, this._renderer);
        this.copyEvent(loader.onBeforeShow, this.onShow);
        this.copyEvent(loader.onShown, this.onShown);
        this.copyEvent(loader.onBeforeHide, this.onHide);
        this.copyEvent(loader.onHidden, this.onHidden);
        this.loaders.push(loader);
    }
    /**
     * @private
     * @param {?} level
     * @return {?}
     */
    removeLoaders(level) {
        this.loaders.splice(level - 1, 1);
        this.loaders.forEach((/**
         * @param {?} loader
         * @param {?} i
         * @return {?}
         */
        (loader, i) => {
            loader.instance.level = i + 1;
        }));
    }
    /**
     * @private
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    copyEvent(from, to) {
        from.subscribe((/**
         * @return {?}
         */
        () => {
            to.emit(this.lastDismissReason);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    checkDialogSize() {
        /** @type {?} */
        const newSize = Utils.checkDialogSize(this.config.width, this.config.height);
        if (this.config.width !== newSize.width) {
            this.config.width = newSize.width - 20;
        }
        if (this.config.height !== newSize.height) {
            this.config.height = newSize.height - 20;
        }
    }
}
BsModalService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BsModalService.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: ComponentLoaderFactory },
    { type: NgZone }
];
if (false) {
    /** @type {?} */
    BsModalService.prototype.version;
    /** @type {?} */
    BsModalService.prototype.config;
    /** @type {?} */
    BsModalService.prototype.onShow;
    /** @type {?} */
    BsModalService.prototype.onShown;
    /** @type {?} */
    BsModalService.prototype.onHide;
    /** @type {?} */
    BsModalService.prototype.onHidden;
    /**
     * @type {?}
     * @protected
     */
    BsModalService.prototype.isBodyOverflowing;
    /**
     * @type {?}
     * @protected
     */
    BsModalService.prototype.originalBodyPadding;
    /**
     * @type {?}
     * @protected
     */
    BsModalService.prototype.scrollbarWidth;
    /**
     * @type {?}
     * @protected
     */
    BsModalService.prototype.backdropRef;
    /**
     * @type {?}
     * @private
     */
    BsModalService.prototype._backdropLoader;
    /**
     * @type {?}
     * @private
     */
    BsModalService.prototype.modalsCount;
    /**
     * @type {?}
     * @private
     */
    BsModalService.prototype.lastDismissReason;
    /**
     * @type {?}
     * @private
     */
    BsModalService.prototype.loaders;
    /**
     * @type {?}
     * @private
     */
    BsModalService.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    BsModalService.prototype._documentMouseDownHandler;
    /**
     * @type {?}
     * @private
     */
    BsModalService.prototype.clf;
    /** @type {?} */
    BsModalService.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,