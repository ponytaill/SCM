/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, EventEmitter, HostListener, Injector, Input, Output } from '@angular/core';
export class LookupQuickSelectPanelComponent {
    /**
     * @param {?} injector
     * @param {?} cdr
     */
    constructor(injector, cdr) {
        this.injector = injector;
        this.cdr = cdr;
        this.showMore = true;
        this.data = [];
        this.textField = '';
        this.moreClcik = new EventEmitter();
        this.itemClick = new EventEmitter();
        this.activeIndex = -1;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} items
     * @return {?}
     */
    loadData(items) {
        this.data = items;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMoreClick($event) {
        $event.stopPropagation();
        this.moreClcik.emit($event);
    }
    /**
     * @param {?} rowObj
     * @return {?}
     */
    formatData(rowObj) {
        return this.formatter(rowObj);
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onItemClick($event, item) {
        this.itemClick.emit({ data: item, evnet: $event });
    }
    /**
     * @param {?} index
     * @return {?}
     */
    setActiveItem(index) {
        this.activeIndex = index;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    }
}
LookupQuickSelectPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'lookup-quick-select-panel',
                template: "<div class=\"d-flex flex-column\" style=\"width: 100%;height: 100%;padding-top: 5px\">\r\n    <!-- <div class=\"header\"></div> -->\r\n    <div class=\"list f-utils-fill f-datalist\" style=\"overflow: auto;\">\r\n        <ul class=\"list-group list-group-flush p-0\"  [class.h-100]=\"!data || !data.length\">\r\n            <li class=\"list-group-item list-group-item-action\" [class.active]=\"activeIndex === i\" *ngFor=\"let item of data; index as i\" (click)=\"onItemClick($event, item)\">\r\n                <span *ngIf=\"!formatter\">{{ item[textField] }}</span> \r\n                <span *ngIf=\"formatter\" [innerHTML]=\"formatData(item) | safe:'html'\"></span>\r\n            </li>\r\n\r\n            <li class=\"norecord\" *ngIf=\"!data || !data.length\">\r\n                \u672A\u627E\u5230\u641C\u7D22\u5185\u5BB9\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <div class=\"more\" *ngIf=\"showMore && data && data.length\">\r\n        <button class=\"btn btn-link\" (click)=\"onMoreClick($event)\">\u663E\u793A\u66F4\u591A</button>\r\n    </div>\r\n     <!-- <div class=\"footer\"></div> -->\r\n</div>"
            }] }
];
/** @nocollapse */
LookupQuickSelectPanelComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
LookupQuickSelectPanelComponent.propDecorators = {
    showMore: [{ type: Input }],
    data: [{ type: Input }],
    textField: [{ type: Input }],
    formatter: [{ type: Input }],
    moreClcik: [{ type: Output }],
    itemClick: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['mousedown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    LookupQuickSelectPanelComponent.prototype.showMore;
    /** @type {?} */
    LookupQuickSelectPanelComponent.prototype.data;
    /** @type {?} */
    LookupQuickSelectPanelComponent.prototype.textField;
    /** @type {?} */
    LookupQuickSelectPanelComponent.prototype.formatter;
    /** @type {?} */
    LookupQuickSelectPanelComponent.prototype.moreClcik;
    /** @type {?} */
    LookupQuickSelectPanelComponent.prototype.itemClick;
    /** @type {?} */
    LookupQuickSelectPanelComponent.prototype.activeIndex;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectPanelComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectPanelComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpY2stc2VsZWN0LXBhbmVsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbG9va3VwLyIsInNvdXJjZXMiOlsibGliL3F1aWNrLXNlbGVjdC9xdWljay1zZWxlY3QtcGFuZWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBZSxZQUFZLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFPdkksTUFBTSxPQUFPLCtCQUErQjs7Ozs7SUFZeEMsWUFBb0IsUUFBa0IsRUFBVSxHQUFzQjtRQUFsRCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFWN0QsYUFBUSxHQUFHLElBQUksQ0FBQztRQUNoQixTQUFJLEdBQWUsRUFBRSxDQUFDO1FBQ3RCLGNBQVMsR0FBVyxFQUFFLENBQUM7UUFHdEIsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDL0IsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFekMsZ0JBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUV5RCxDQUFDOzs7OztJQUczRSxPQUFPLENBQUMsTUFBa0I7UUFDdEIsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxRQUFRLEtBQUssQ0FBQzs7Ozs7SUFFZCxRQUFRLENBQUMsS0FBVTtRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDNUI7SUFDTCxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxNQUFrQjtRQUMxQixNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsTUFBVztRQUNsQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7Ozs7O0lBRUQsV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJO1FBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDOzs7OztJQUVELGFBQWEsQ0FBQyxLQUFhO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDNUI7SUFDTCxDQUFDOzs7WUFuREosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLGtuQ0FBa0Q7YUFDckQ7Ozs7WUFMK0UsUUFBUTtZQUEvRSxpQkFBaUI7Ozt1QkFTckIsS0FBSzttQkFDTCxLQUFLO3dCQUNMLEtBQUs7d0JBQ0wsS0FBSzt3QkFFTCxNQUFNO3dCQUNOLE1BQU07c0JBTU4sWUFBWSxTQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7OztJQVpyQyxtREFBeUI7O0lBQ3pCLCtDQUErQjs7SUFDL0Isb0RBQWdDOztJQUNoQyxvREFBNEM7O0lBRTVDLG9EQUF5Qzs7SUFDekMsb0RBQXlDOztJQUV6QyxzREFBaUI7Ozs7O0lBRUwsbURBQTBCOzs7OztJQUFFLDhDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciwgSW5qZWN0b3IsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2xvb2t1cC1xdWljay1zZWxlY3QtcGFuZWwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL3F1aWNrLXNlbGVjdC1wYW5lbC5jb21wb25lbnQuaHRtbCdcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBMb29rdXBRdWlja1NlbGVjdFBhbmVsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgICBASW5wdXQoKSBzaG93TW9yZSA9IHRydWU7XHJcbiAgICBASW5wdXQoKSBkYXRhOiBBcnJheTxhbnk+ID0gW107XHJcbiAgICBASW5wdXQoKSB0ZXh0RmllbGQ6IHN0cmluZyA9ICcnO1xyXG4gICAgQElucHV0KCkgZm9ybWF0dGVyOiAocm93T2JqOiBhbnkpID0+IHN0cmluZztcclxuXHJcbiAgICBAT3V0cHV0KCkgbW9yZUNsY2lrID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIGl0ZW1DbGljayA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBhY3RpdmVJbmRleCA9IC0xO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHsgfVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ21vdXNlZG93bicsIFsnJGV2ZW50J10pXHJcbiAgICBvbkNsaWNrKCRldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHsgfVxyXG5cclxuICAgIGxvYWREYXRhKGl0ZW1zOiBhbnkpIHtcclxuICAgICAgICB0aGlzLmRhdGEgPSBpdGVtcztcclxuICAgICAgICBpZiAoIXRoaXMuY2RyWydkZXN0cm95ZWQnXSkge1xyXG4gICAgICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uTW9yZUNsaWNrKCRldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB0aGlzLm1vcmVDbGNpay5lbWl0KCRldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9ybWF0RGF0YShyb3dPYmo6IGFueSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdHRlcihyb3dPYmopO1xyXG4gICAgfVxyXG5cclxuICAgIG9uSXRlbUNsaWNrKCRldmVudCwgaXRlbSkge1xyXG4gICAgICAgIHRoaXMuaXRlbUNsaWNrLmVtaXQoe2RhdGE6IGl0ZW0sIGV2bmV0OiAkZXZlbnR9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRBY3RpdmVJdGVtKGluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmFjdGl2ZUluZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNkclsnZGVzdHJveWVkJ10pIHtcclxuICAgICAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==