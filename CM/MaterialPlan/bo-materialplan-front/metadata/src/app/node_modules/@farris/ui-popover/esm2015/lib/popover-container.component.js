/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Input, Component, Optional, ViewChild, ElementRef } from '@angular/core';
import { PopoverConfig } from './popover.config';
import { isBs3 } from '@farris/ui-modal/utils';
import { Subject } from 'rxjs';
export class PopoverContainerComponent {
    /**
     * @param {?} config
     * @param {?} el
     */
    constructor(config, el) {
        this.el = el;
        this.mounseState = new Subject();
        Object.assign(this, config);
    }
    /**
     * @return {?}
     */
    get isBs3() {
        return isBs3();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.el) {
            this.mouseenterEvent = this.changeMouseState.bind(this, true);
            this.mouseleaveEvent = this.changeMouseState.bind(this, false);
            this.el.nativeElement.addEventListener('mouseenter', this.mouseenterEvent);
            this.el.nativeElement.addEventListener('mouseleave', this.mouseleaveEvent);
        }
    }
    /**
     * 获取鼠标变化状态
     * @return {?}
     */
    getMouseState() {
        return this.mounseState;
    }
    /**
     * 绑定的事件
     * @private
     * @param {?} state
     * @return {?}
     */
    changeMouseState(state) {
        this.mounseState.next(state);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.mouseenterEvent) {
            this.el.nativeElement.removeEventListener('mouseenter', this.mouseenterEvent);
        }
        if (this.mouseleaveEvent) {
            this.el.nativeElement.removeEventListener('mouseleave', this.mouseleaveEvent);
        }
        this.mounseState.unsubscribe();
    }
}
PopoverContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-popover',
                changeDetection: ChangeDetectionStrategy.OnPush,
                // tslint:disable-next-line
                host: {
                    '[class]': '"popover in popover-" + placement + " " + "bs-popover-" + placement + " " + placement + " " + containerClass',
                    '[class.show]': '!isBs3',
                    '[class.bs3]': 'isBs3',
                    role: 'tooltip',
                    style: 'display:block;'
                },
                template: "<div class=\"popover-arrow arrow\"></div>\r\n<h3 class=\"popover-title popover-header\" *ngIf=\"title\">{{ title }}</h3>\r\n<div #innerEle class=\"popover-content popover-body\" [ngClass]=\"containerClass\">\r\n  <ng-content></ng-content>\r\n</div>\r\n",
                styles: [`
    :host.bs3.popover-top {
      margin-bottom: 10px;
    }
    :host.bs3.popover.top>.arrow {
      margin-left: -2px;
    }
    :host.bs3.popover.top {
      margin-bottom: 10px;
    }
    :host.popover.bottom>.arrow {
      margin-left: -4px;
    }
    :host.bs3.bs-popover-left {
      margin-right: .5rem;
    }
    :host.bs3.bs-popover-right .arrow, :host.bs3.bs-popover-left .arrow{
      margin: .3rem 0;
    }
    :host.arrow-left .arrow {
        left: calc(50% - 10px);
    }
    `]
            }] }
];
/** @nocollapse */
PopoverContainerComponent.ctorParameters = () => [
    { type: PopoverConfig },
    { type: ElementRef, decorators: [{ type: Optional }] }
];
PopoverContainerComponent.propDecorators = {
    innerNode: [{ type: ViewChild, args: ['innerEle', { read: ElementRef },] }],
    placement: [{ type: Input }],
    title: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PopoverContainerComponent.prototype.innerNode;
    /** @type {?} */
    PopoverContainerComponent.prototype.placement;
    /** @type {?} */
    PopoverContainerComponent.prototype.title;
    /** @type {?} */
    PopoverContainerComponent.prototype.containerClass;
    /**
     * @type {?}
     * @private
     */
    PopoverContainerComponent.prototype.mouseenterEvent;
    /**
     * @type {?}
     * @private
     */
    PopoverContainerComponent.prototype.mouseleaveEvent;
    /**
     * @type {?}
     * @private
     */
    PopoverContainerComponent.prototype.mounseState;
    /**
     * @type {?}
     * @private
     */
    PopoverContainerComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1jb250YWluZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1wb3BvdmVyLyIsInNvdXJjZXMiOlsibGliL3BvcG92ZXItY29udGFpbmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQThDLE1BQU0sZUFBZSxDQUFDO0FBQ3RKLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0MsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQXlDM0MsTUFBTSxPQUFPLHlCQUF5Qjs7Ozs7SUFhcEMsWUFBWSxNQUFxQixFQUFxQixFQUFhO1FBQWIsT0FBRSxHQUFGLEVBQUUsQ0FBVztRQU4zRCxnQkFBVyxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7UUFPM0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7OztJQU5ELElBQUksS0FBSztRQUNQLE9BQU8sS0FBSyxFQUFFLENBQUM7SUFDakIsQ0FBQzs7OztJQU1ELGVBQWU7UUFDYixJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDWCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzlELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDL0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUMzRSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQzVFO0lBQ0gsQ0FBQzs7Ozs7SUFJRCxhQUFhO1FBQ1gsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7Ozs7Ozs7SUFLTyxnQkFBZ0IsQ0FBQyxLQUFLO1FBQzVCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDL0U7UUFDRCxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDeEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUMvRTtRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDakMsQ0FBQzs7O1lBdEZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7Z0JBRS9DLElBQUksRUFBRTtvQkFDSixTQUFTLEVBQ1AsOEdBQThHO29CQUNoSCxjQUFjLEVBQUUsUUFBUTtvQkFDeEIsYUFBYSxFQUFFLE9BQU87b0JBQ3RCLElBQUksRUFBRSxTQUFTO29CQUNmLEtBQUssRUFBRSxnQkFBZ0I7aUJBQ3hCO2dCQTBCRCx3UUFBaUQ7eUJBeEIvQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXNCQzthQUdKOzs7O1lBMUNRLGFBQWE7WUFEa0QsVUFBVSx1QkF5RDdDLFFBQVE7Ozt3QkFaMUMsU0FBUyxTQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7d0JBQzFDLEtBQUs7b0JBQ0wsS0FBSzs7OztJQUZOLDhDQUFtRTs7SUFDbkUsOENBQTJCOztJQUMzQiwwQ0FBdUI7O0lBQ3ZCLG1EQUF1Qjs7Ozs7SUFDdkIsb0RBQTZCOzs7OztJQUM3QixvREFBNkI7Ozs7O0lBQzdCLGdEQUE2Qzs7Ozs7SUFNWCx1Q0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgSW5wdXQsIENvbXBvbmVudCxPcHRpb25hbCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBBZnRlclZpZXdDaGVja2VkLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUG9wb3ZlckNvbmZpZyB9IGZyb20gJy4vcG9wb3Zlci5jb25maWcnO1xyXG5pbXBvcnQgeyBpc0JzMyB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwvdXRpbHMnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2ZhcnJpcy1wb3BvdmVyJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICBob3N0OiB7XHJcbiAgICAnW2NsYXNzXSc6XHJcbiAgICAgICdcInBvcG92ZXIgaW4gcG9wb3Zlci1cIiArIHBsYWNlbWVudCArIFwiIFwiICsgXCJicy1wb3BvdmVyLVwiICsgcGxhY2VtZW50ICsgXCIgXCIgKyBwbGFjZW1lbnQgKyBcIiBcIiArIGNvbnRhaW5lckNsYXNzJyxcclxuICAgICdbY2xhc3Muc2hvd10nOiAnIWlzQnMzJyxcclxuICAgICdbY2xhc3MuYnMzXSc6ICdpc0JzMycsXHJcbiAgICByb2xlOiAndG9vbHRpcCcsXHJcbiAgICBzdHlsZTogJ2Rpc3BsYXk6YmxvY2s7J1xyXG4gIH0sXHJcbiAgc3R5bGVzOiBbXHJcbiAgICBgXHJcbiAgICA6aG9zdC5iczMucG9wb3Zlci10b3Age1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG4gICAgfVxyXG4gICAgOmhvc3QuYnMzLnBvcG92ZXIudG9wPi5hcnJvdyB7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiAtMnB4O1xyXG4gICAgfVxyXG4gICAgOmhvc3QuYnMzLnBvcG92ZXIudG9wIHtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICAgIH1cclxuICAgIDpob3N0LnBvcG92ZXIuYm90dG9tPi5hcnJvdyB7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiAtNHB4O1xyXG4gICAgfVxyXG4gICAgOmhvc3QuYnMzLmJzLXBvcG92ZXItbGVmdCB7XHJcbiAgICAgIG1hcmdpbi1yaWdodDogLjVyZW07XHJcbiAgICB9XHJcbiAgICA6aG9zdC5iczMuYnMtcG9wb3Zlci1yaWdodCAuYXJyb3csIDpob3N0LmJzMy5icy1wb3BvdmVyLWxlZnQgLmFycm93e1xyXG4gICAgICBtYXJnaW46IC4zcmVtIDA7XHJcbiAgICB9XHJcbiAgICA6aG9zdC5hcnJvdy1sZWZ0IC5hcnJvdyB7XHJcbiAgICAgICAgbGVmdDogY2FsYyg1MCUgLSAxMHB4KTtcclxuICAgIH1cclxuICAgIGBcclxuICBdLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9wb3BvdmVyLWNvbnRhaW5lci5jb21wb25lbnQuaHRtbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFBvcG92ZXJDb250YWluZXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xyXG4gIEBWaWV3Q2hpbGQoJ2lubmVyRWxlJywgeyByZWFkOiBFbGVtZW50UmVmIH0pIGlubmVyTm9kZTogRWxlbWVudFJlZjtcclxuICBASW5wdXQoKSBwbGFjZW1lbnQ6IHN0cmluZztcclxuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xyXG4gIGNvbnRhaW5lckNsYXNzOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBtb3VzZWVudGVyRXZlbnQ6IGFueTtcclxuICBwcml2YXRlIG1vdXNlbGVhdmVFdmVudDogYW55O1xyXG4gIHByaXZhdGUgbW91bnNlU3RhdGUgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xyXG5cclxuICBnZXQgaXNCczMoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gaXNCczMoKTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUG9wb3ZlckNvbmZpZyxAT3B0aW9uYWwoKSBwcml2YXRlIGVsOkVsZW1lbnRSZWYpIHtcclxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgY29uZmlnKTtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIGlmICh0aGlzLmVsKSB7XHJcbiAgICAgIHRoaXMubW91c2VlbnRlckV2ZW50ID0gdGhpcy5jaGFuZ2VNb3VzZVN0YXRlLmJpbmQodGhpcywgdHJ1ZSk7XHJcbiAgICAgIHRoaXMubW91c2VsZWF2ZUV2ZW50ID0gdGhpcy5jaGFuZ2VNb3VzZVN0YXRlLmJpbmQodGhpcywgZmFsc2UpO1xyXG4gICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIHRoaXMubW91c2VlbnRlckV2ZW50KTtcclxuICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLm1vdXNlbGVhdmVFdmVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlum8oOagh+WPmOWMlueKtuaAgVxyXG4gICAqL1xyXG4gIGdldE1vdXNlU3RhdGUoKXtcclxuICAgIHJldHVybiB0aGlzLm1vdW5zZVN0YXRlO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDnu5HlrprnmoTkuovku7ZcclxuICAgKiBAcGFyYW0gc3RhdGUgXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjaGFuZ2VNb3VzZVN0YXRlKHN0YXRlKSB7XHJcbiAgICB0aGlzLm1vdW5zZVN0YXRlLm5leHQoc3RhdGUpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICBpZiAodGhpcy5tb3VzZWVudGVyRXZlbnQpIHtcclxuICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLm1vdXNlZW50ZXJFdmVudCk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5tb3VzZWxlYXZlRXZlbnQpIHtcclxuICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLm1vdXNlbGVhdmVFdmVudCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLm1vdW5zZVN0YXRlLnVuc3Vic2NyaWJlKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==