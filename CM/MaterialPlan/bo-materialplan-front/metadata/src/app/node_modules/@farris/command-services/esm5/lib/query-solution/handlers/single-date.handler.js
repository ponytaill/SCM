import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
import { format, addDays, addWeeks, addMonths, addYears, startOfMonth, endOfMonth, startOfYear, endOfYear, startOfWeek, endOfWeek, getDay } from 'date-fns';
function getDate(dateValue, dtvFormat) {
    var today = new Date();
    // today.toLocaleString()
    var result = [];
    //首先判断哪些是单个日期，使用equal存入一个日期即可
    if (dateValue.isFirstDay || dateValue.isLastDay) {
        var switchValue = dateValue.dateType + '-' + (dateValue.isFirstDay ? 'first' : 'last');
        switch (switchValue) {
            case 'week-first':
                if (getDay(today) === 0) {
                    today = addDays(today, -1);
                }
                result.push(addDays(startOfWeek(today), 1));
                break;
            case 'week-last':
                if (getDay(today) === 0) {
                    today = addDays(today, -1);
                }
                result.push(addDays(endOfWeek(today), 1));
                break;
            case 'month-first':
                result.push(startOfMonth(today));
                break;
            case 'month-last':
                result.push(endOfMonth(today));
                break;
            case 'year-first':
                result.push(startOfYear(today));
                break;
            case 'year-last':
                result.push(endOfYear(today));
                break;
            default:
                result.push(today);
        }
    }
    else if (dateValue.dateType === 'day' && dateValue.period === 'present') {
        //今天
        result.push(today);
    }
    else if (dateValue.dateType === 'day' && dateValue.count === 1) {
        //昨天、明天
        var _date = addDays(today, dateValue.period === 'future' ? 1 : -1);
        result.push(_date);
    }
    else if (dateValue.period === 'present') {
        //本周、本月、本年
        switch (dateValue.dateType) {
            case 'week':
                result.push(startOfWeek(today), endOfWeek(today));
                break;
            case 'month':
                result.push(startOfMonth(today), endOfMonth(today));
                break;
            case 'year':
                result.push(startOfYear(today), endOfYear(today));
                break;
            default:
                result.push(today);
        }
    }
    else {
        var switchValue = dateValue.dateType + '-' + dateValue.period;
        switch (switchValue) {
            case 'day-previous':
                result.push(addDays(today, dateValue.count * -1), addDays(today, -1));
                break;
            case 'day-future':
                result.push(addDays(today, 1), addDays(today, dateValue.count));
                break;
            case 'week-previous':
                result.push(addWeeks(today, dateValue.count * -1), addDays(today, -1));
                break;
            case 'week-future':
                result.push(addDays(today, 1), addWeeks(today, dateValue.count));
                break;
            case 'month-previous':
                result.push(addMonths(today, dateValue.count * -1), addDays(today, -1));
                break;
            case 'month-future':
                result.push(addDays(today, 1), addMonths(today, dateValue.count));
                break;
            case 'year-previous':
                result.push(addYears(today, dateValue.count * -1), addDays(today, -1));
                break;
            case 'year-future':
                result.push(addDays(today, 1), addYears(today, dateValue.count));
                break;
            default:
                result.push(today);
        }
    }
    result = result.map(function (item) { return format(item, dtvFormat.returnFormat || 'yyyy-MM-dd'); });
    return result;
}
;
var SingleDateHandler = /** @class */ (function () {
    function SingleDateHandler() {
    }
    SingleDateHandler.prototype.convert = function (qc) {
        var arr = [];
        var dtv = qc.value;
        if (typeof (dtv.dateValue) !== 'string') {
            var _dateValue = getDate(dtv.dateValue, qc.control);
            _dateValue.length === 1 && arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Equal,
                'Value': _dateValue[0],
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            _dateValue.length === 2 && arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.GreaterOrEqual,
                'Value': _dateValue[0],
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            }, {
                'FilterField': qc.fieldCode,
                'Compare': CompareType.LessOrEqual,
                'Value': _dateValue[1],
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
        }
        else {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Equal,
                'Value': dtv.dateValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
        }
        return arr;
    };
    return SingleDateHandler;
}());
export { SingleDateHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLWRhdGUuaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9xdWVyeS1zb2x1dGlvbi9oYW5kbGVycy9zaW5nbGUtZGF0ZS5oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzFELE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUMzSixTQUFTLE9BQU8sQ0FBQyxTQUFTLEVBQUUsU0FBUztJQUNqQyxJQUFJLEtBQUssR0FBRyxJQUFJLElBQUksRUFBRSxDQUFBO0lBQ3RCLHlCQUF5QjtJQUN6QixJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUE7SUFDZiw2QkFBNkI7SUFDN0IsSUFBSSxTQUFTLENBQUMsVUFBVSxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUU7UUFFN0MsSUFBSSxXQUFXLEdBQUcsU0FBUyxDQUFDLFFBQVEsR0FBRyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3RGLFFBQVEsV0FBVyxFQUFFO1lBQ2pCLEtBQUssWUFBWTtnQkFDYixJQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ3BCLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENB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Q0FBQztnQkFDaEMsYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO2dCQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLGNBQWM7Z0JBQ3RDLE9BQU8sRUFBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUN2QixVQUFVLEVBQUcsWUFBWSxDQUFDLEdBQUc7Z0JBQzdCLGFBQWEsRUFBRSxTQUFTLENBQUMsS0FBSzthQUNqQyxFQUFFO2dCQUNDLGFBQWEsRUFBRyxFQUFFLENBQUMsU0FBUztnQkFDNUIsU0FBUyxFQUFHLFdBQVcsQ0FBQyxXQUFXO2dCQUNuQyxPQUFPLEVBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDdkIsVUFBVSxFQUFHLFlBQVksQ0FBQyxHQUFHO2dCQUM3QixhQUFhLEVBQUUsU0FBUyxDQUFDLEtBQUs7YUFDakMsQ0FBQyxDQUFDO1NBRU47YUFBTTtZQUNILEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQ0wsYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO2dCQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLEtBQUs7Z0JBQzdCLE9BQU8sRUFBRyxHQUFHLENBQUMsU0FBUztnQkFDdkIsVUFBVSxFQUFHLFlBQVksQ0FBQyxHQUFHO2dCQUM3QixhQUFhLEVBQUMsU0FBUyxDQUFDLEtBQUs7YUFDaEMsQ0FBQyxDQUFBO1NBQ0w7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDTCx3QkFBQztBQUFELENBQUMsQUF0Q0QsSUFzQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJUXVlcnlDb25kaXRpb25IYW5kbGVyIH0gZnJvbSBcIi4vaXF1ZXJ5Y29uZGl0aW9uLmhhbmRsZXJcIjtcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb24sIFNpbmdsZURhdGVWYWx1ZSB9IGZyb20gXCJAZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvblwiO1xyXG5pbXBvcnQgeyBDb21wYXJlVHlwZSB9IGZyb20gJy4uL2VudW0vY29tcGFyZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBWYWx1ZVR5cGUgfSBmcm9tICcuLi9lbnVtL3ZhbHVlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFJlbGF0aW9uVHlwZSB9IGZyb20gJy4uL2VudW0vcmVsYXRpb24tdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgZm9ybWF0LCBhZGREYXlzLCBhZGRXZWVrcywgYWRkTW9udGhzLCBhZGRZZWFycywgc3RhcnRPZk1vbnRoLCBlbmRPZk1vbnRoLCBzdGFydE9mWWVhciwgZW5kT2ZZZWFyLCBzdGFydE9mV2VlaywgZW5kT2ZXZWVrLCBnZXREYXkgfSBmcm9tICdkYXRlLWZucydcclxuZnVuY3Rpb24gZ2V0RGF0ZShkYXRlVmFsdWUsIGR0dkZvcm1hdCkge1xyXG4gICAgbGV0IHRvZGF5ID0gbmV3IERhdGUoKVxyXG4gICAgLy8gdG9kYXkudG9Mb2NhbGVTdHJpbmcoKVxyXG4gICAgbGV0IHJlc3VsdCA9IFtdXHJcbiAgICAvL+mmluWFiOWIpOaWreWTquS6m+aYr+WNleS4quaXpeacn++8jOS9v+eUqGVxdWFs5a2Y5YWl5LiA5Liq5pel5pyf5Y2z5Y+vXHJcbiAgICBpZiAoZGF0ZVZhbHVlLmlzRmlyc3REYXkgfHwgZGF0ZVZhbHVlLmlzTGFzdERheSkge1xyXG5cclxuICAgICAgICBsZXQgc3dpdGNoVmFsdWUgPSBkYXRlVmFsdWUuZGF0ZVR5cGUgKyAnLScgKyAoZGF0ZVZhbHVlLmlzRmlyc3REYXkgPyAnZmlyc3QnIDogJ2xhc3QnKVxyXG4gICAgICAgIHN3aXRjaCAoc3dpdGNoVmFsdWUpIHtcclxuICAgICAgICAgICAgY2FzZSAnd2Vlay1maXJzdCc6XHJcbiAgICAgICAgICAgICAgICBpZihnZXREYXkodG9kYXkpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9kYXkgPSBhZGREYXlzKHRvZGF5LCAtMSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFkZERheXMoc3RhcnRPZldlZWsodG9kYXkpLCAxKSlcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd3ZWVrLWxhc3QnOlxyXG4gICAgICAgICAgICAgICAgaWYoZ2V0RGF5KHRvZGF5KSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvZGF5ID0gYWRkRGF5cyh0b2RheSwgLTEpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChhZGREYXlzKGVuZE9mV2Vlayh0b2RheSksIDEpKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoLWZpcnN0JzpcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHN0YXJ0T2ZNb250aCh0b2RheSkpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbW9udGgtbGFzdCc6XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChlbmRPZk1vbnRoKHRvZGF5KSlcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd5ZWFyLWZpcnN0JzpcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHN0YXJ0T2ZZZWFyKHRvZGF5KSlcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd5ZWFyLWxhc3QnOlxyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZW5kT2ZZZWFyKHRvZGF5KSlcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godG9kYXkpXHJcblxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoZGF0ZVZhbHVlLmRhdGVUeXBlID09PSAnZGF5JyAmJiBkYXRlVmFsdWUucGVyaW9kID09PSAncHJlc2VudCcpIHtcclxuICAgICAgICAvL+S7iuWkqVxyXG4gICAgICAgIHJlc3VsdC5wdXNoKHRvZGF5KVxyXG4gICAgfSBlbHNlIGlmIChkYXRlVmFsdWUuZGF0ZVR5cGUgPT09ICdkYXknICYmIGRhdGVWYWx1ZS5jb3VudCA9PT0gMSkge1xyXG4gICAgICAgIC8v5pio5aSp44CB5piO5aSpXHJcbiAgICAgICAgbGV0IF9kYXRlID0gYWRkRGF5cyh0b2RheSwgZGF0ZVZhbHVlLnBlcmlvZCA9PT0gJ2Z1dHVyZScgPyAxIDogLTEpXHJcbiAgICAgICAgcmVzdWx0LnB1c2goX2RhdGUpXHJcbiAgICB9IGVsc2UgaWYgKGRhdGVWYWx1ZS5wZXJpb2QgPT09ICdwcmVzZW50Jykge1xyXG4gICAgICAgIC8v5pys5ZGo44CB5pys5pyI44CB5pys5bm0XHJcbiAgICAgICAgc3dpdGNoIChkYXRlVmFsdWUuZGF0ZVR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzdGFydE9mV2Vlayh0b2RheSksIGVuZE9mV2Vlayh0b2RheSkpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc3RhcnRPZk1vbnRoKHRvZGF5KSwgZW5kT2ZNb250aCh0b2RheSkpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAneWVhcic6XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzdGFydE9mWWVhcih0b2RheSksIGVuZE9mWWVhcih0b2RheSkpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRvZGF5KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxldCBzd2l0Y2hWYWx1ZSA9IGRhdGVWYWx1ZS5kYXRlVHlwZSArICctJyArIGRhdGVWYWx1ZS5wZXJpb2RcclxuICAgICAgICBzd2l0Y2ggKHN3aXRjaFZhbHVlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2RheS1wcmV2aW91cyc6XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChhZGREYXlzKHRvZGF5LCBkYXRlVmFsdWUuY291bnQgKiAtMSksIGFkZERheXModG9kYXksIC0xKSlcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdkYXktZnV0dXJlJzpcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFkZERheXModG9kYXksIDEpLCBhZGREYXlzKHRvZGF5LCBkYXRlVmFsdWUuY291bnQpKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3dlZWstcHJldmlvdXMnOlxyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goYWRkV2Vla3ModG9kYXksIGRhdGVWYWx1ZS5jb3VudCAqIC0xKSwgYWRkRGF5cyh0b2RheSwgLTEpKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3dlZWstZnV0dXJlJzpcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFkZERheXModG9kYXksIDEpLCBhZGRXZWVrcyh0b2RheSwgZGF0ZVZhbHVlLmNvdW50KSlcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdtb250aC1wcmV2aW91cyc6XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChhZGRNb250aHModG9kYXksIGRhdGVWYWx1ZS5jb3VudCAqIC0xKSwgYWRkRGF5cyh0b2RheSwgLTEpKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoLWZ1dHVyZSc6XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChhZGREYXlzKHRvZGF5LCAxKSwgYWRkTW9udGhzKHRvZGF5LCBkYXRlVmFsdWUuY291bnQpKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3llYXItcHJldmlvdXMnOlxyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goYWRkWWVhcnModG9kYXksIGRhdGVWYWx1ZS5jb3VudCAqIC0xKSwgYWRkRGF5cyh0b2RheSwgLTEpKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3llYXItZnV0dXJlJzpcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFkZERheXModG9kYXksIDEpLCBhZGRZZWFycyh0b2RheSwgZGF0ZVZhbHVlLmNvdW50KSlcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godG9kYXkpXHJcbiAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlc3VsdCA9IHJlc3VsdC5tYXAoaXRlbSA9PiBmb3JtYXQoaXRlbSwgZHR2Rm9ybWF0LnJldHVybkZvcm1hdCB8fCAneXl5eS1NTS1kZCcpKVxyXG4gICAgcmV0dXJuIHJlc3VsdFxyXG5cclxufTtcclxuZXhwb3J0IGNsYXNzIFNpbmdsZURhdGVIYW5kbGVyIGltcGxlbWVudHMgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlcntcclxuICAgIGNvbnZlcnQocWM6IFF1ZXJ5Q29uZGl0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgYXJyID0gW11cclxuICAgICAgICBjb25zdCBkdHYgPSAocWMudmFsdWUgYXMgU2luZ2xlRGF0ZVZhbHVlKTtcclxuICAgICAgICBpZih0eXBlb2YoZHR2LmRhdGVWYWx1ZSkgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGxldCBfZGF0ZVZhbHVlID0gZ2V0RGF0ZShkdHYuZGF0ZVZhbHVlLCBxYy5jb250cm9sKVxyXG4gICAgICAgICAgICBfZGF0ZVZhbHVlLmxlbmd0aCA9PT0gMSAmJiBhcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMuZmllbGRDb2RlLFxyXG4gICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogQ29tcGFyZVR5cGUuRXF1YWwsXHJcbiAgICAgICAgICAgICAgICAnVmFsdWUnIDogX2RhdGVWYWx1ZVswXSxcclxuICAgICAgICAgICAgICAgICdSZWxhdGlvbicgOiBSZWxhdGlvblR5cGUuQW5kLCAvL2FuZCB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgICdFeHByZXNzdHlwZSc6VmFsdWVUeXBlLlZhbHVlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIF9kYXRlVmFsdWUubGVuZ3RoID09PSAyICYmIGFyci5wdXNoKHtcclxuICAgICAgICAgICAgICAgICdGaWx0ZXJGaWVsZCcgOiBxYy5maWVsZENvZGUsXHJcbiAgICAgICAgICAgICAgICAnQ29tcGFyZScgOiBDb21wYXJlVHlwZS5HcmVhdGVyT3JFcXVhbCwgLy9HcmVhdGVyT3JFcXVhbFxyXG4gICAgICAgICAgICAgICAgJ1ZhbHVlJyA6IF9kYXRlVmFsdWVbMF0sXHJcbiAgICAgICAgICAgICAgICAnUmVsYXRpb24nIDogUmVsYXRpb25UeXBlLkFuZCwgLy9hbmRcclxuICAgICAgICAgICAgICAgICdFeHByZXNzdHlwZSc6IFZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMuZmllbGRDb2RlLFxyXG4gICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogQ29tcGFyZVR5cGUuTGVzc09yRXF1YWwsIC8vTGVzc09yRXF1YWxcclxuICAgICAgICAgICAgICAgICdWYWx1ZScgOiBfZGF0ZVZhbHVlWzFdLFxyXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5BbmQsLy9hbmRcclxuICAgICAgICAgICAgICAgICdFeHByZXNzdHlwZSc6IFZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYXJyLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgJ0ZpbHRlckZpZWxkJyA6IHFjLmZpZWxkQ29kZSxcclxuICAgICAgICAgICAgICAgICdDb21wYXJlJyA6IENvbXBhcmVUeXBlLkVxdWFsLFxyXG4gICAgICAgICAgICAgICAgJ1ZhbHVlJyA6IGR0di5kYXRlVmFsdWUsXHJcbiAgICAgICAgICAgICAgICAnUmVsYXRpb24nIDogUmVsYXRpb25UeXBlLkFuZCwgLy9hbmQgdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOlZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgfVxyXG59Il19