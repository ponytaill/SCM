/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/f-file-uploader.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Optional } from "@angular/core";
import { Observable, Subject } from "rxjs";
import { mergeMap, finalize } from "rxjs/operators";
import { FFileUtils } from "../utils/index";
import { UploadStatus, UploadServerService, } from "../model/index";
var FFileUploaderService = /** @class */ (function () {
    function FFileUploaderService(uploadServerSer) {
        var _this = this;
        this.uploadServerSer = uploadServerSer;
        this.allowedContentTypes = ["*"];
        //默认不限制,0代表不限制 Number.POSITIVE_INFINITY
        this.maxUploads = 0;
        /**
         * 单位M，默认是12M,0代表不限制
         */
        this.maxFileSize = 12;
        this.concurrency = Number.POSITIVE_INFINITY;
        this.uploadedCount = 0;
        this.extendServerConfig = null;
        this.queue = [];
        this.serviceEvents = new EventEmitter();
        this.uploadScheduler = new Subject();
        this.subs = [];
        this.uploadScheduler
            .pipe(mergeMap((/**
         * @param {?} upload
         * @return {?}
         */
        function (upload) {
            return _this.serverMethod(upload);
        }), this.concurrency))
            .subscribe((/**
         * @param {?} uploadOutput
         * @return {?}
         */
        function (uploadOutput) {
            // if (uploadOutput.type == 'removed' || uploadOutput.type == 'done') {
            //   // 删除或者done移除
            //   const subIndex = this.subs.findIndex(sub => sub.id === uploadOutput.file.id);
            //   if (subIndex > -1 && this.subs[subIndex].sub) {
            //     this.subs[subIndex].sub.unsubscribe();
            //   }
            //   this.subs.splice(subIndex, 1);
            // }
            if (uploadOutput.type == "removed") {
                // 事件中返回的都是
                _this.queue = _this.queue.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.progress.status !== UploadStatus.Remove; }));
                if (!uploadOutput.hasOwnProperty("message")) {
                    uploadOutput["message"] = "被删除";
                }
            }
            if (uploadOutput.type == "error") {
                // 上传失败的附件移除
                _this.queue = _this.queue.filter((/**
                 * @param {?} queueItem
                 * @return {?}
                 */
                function (queueItem) {
                    return (uploadOutput.files.findIndex((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) { return queueItem.id == item.id; })) <
                        0);
                }));
            }
            _this.serviceEvents.emit(uploadOutput);
        }));
    }
    /**
     * @param {?} options
     * @return {?}
     */
    FFileUploaderService.prototype.setOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        // 重置文件大小、类型、个数限制
        if (options) {
            for (var prop in options) {
                this[prop] = options[prop];
            }
        }
    };
    /**
     * @param {?} incomingFiles
     * @return {?}
     */
    FFileUploaderService.prototype.handleFiles = /**
     * @param {?} incomingFiles
     * @return {?}
     */
    function (incomingFiles) {
        var _this = this;
        /** @type {?} */
        var allowedIncomingFiles = [].reduce.call(incomingFiles, (/**
         * @param {?} acc
         * @param {?} checkFile
         * @param {?} i
         * @return {?}
         */
        function (acc, checkFile, i) {
            /** @type {?} */
            var futureQueueLength = acc.length + _this.queue.length + 1;
            /** @type {?} */
            var judgeResult = _this.rejectedReason(checkFile.name, checkFile.type, futureQueueLength, checkFile.size);
            if (judgeResult.allowed) {
                acc = acc.concat(checkFile);
            }
            else {
                // 不符合当前文件类型或者内容超出限制，抛出事件
                /** @type {?} */
                var rejectedFile = FFileUtils.makeUploadFile(checkFile, i);
                _this.serviceEvents.emit({
                    type: "rejected",
                    file: rejectedFile,
                    message: judgeResult.message,
                });
            }
            return acc;
        }), []);
        // 构造文件结构，并单个抛出事件
        [].map.call(allowedIncomingFiles, (/**
         * @param {?} file
         * @param {?} i
         * @return {?}
         */
        function (file, i) {
            /** @type {?} */
            var uploadFile = FFileUtils.makeUploadFile(file, i);
            _this.queue.push(uploadFile);
            _this.serviceEvents.emit({ type: "addedToQueue", file: uploadFile });
        }));
        // 所有的文件都已经添加，抛出事件
        this.serviceEvents.emit({ type: "allAddedToQueue" });
    };
    /**
     * @private
     * @param {?} name
     * @param {?} type
     * @param {?} queuelength
     * @param {?} size
     * @return {?}
     */
    FFileUploaderService.prototype.rejectedReason = /**
     * @private
     * @param {?} name
     * @param {?} type
     * @param {?} queuelength
     * @param {?} size
     * @return {?}
     */
    function (name, type, queuelength, size) {
        /** @type {?} */
        var allowed = false;
        /** @type {?} */
        var message = "";
        // 已存在同名文件
        /** @type {?} */
        var findDuplicateIndex = this.queue.findIndex((/**
         * @param {?} file
         * @return {?}
         */
        function (file) { return file.name == name; }));
        if (findDuplicateIndex > -1) {
            message = "上传失败：已存在同名文件";
        }
        else if (!this.isContentTypeAllowed(name)) {
            message =
                "上传失败：只允许上传" +
                    this.allowedContentTypes.join(",") +
                    "类型的文档";
        }
        else if (this.maxUploads > 0 &&
            (this.maxUploads <= this.uploadedCount ||
                queuelength + this.uploadedCount > this.maxUploads)) {
            message = "上传失败：文件总个数超出" + this.maxUploads + "限制";
        }
        else if (!this.isFileSizeAllowed(size)) {
            message = "上传失败：单个文件大小超出" + this.maxFileSize + "MB的限制";
        }
        else if (size == 0) {
            message = "上传失败：不允许文件为空";
        }
        else {
            allowed = true;
        }
        return {
            allowed: allowed,
            message: message,
        };
    };
    /**
     * 从前端传来事件，进行服务器端方法类型判断
     * @param input
     */
    /**
     * 从前端传来事件，进行服务器端方法类型判断
     * @param {?} input
     * @return {?}
     */
    FFileUploaderService.prototype.initInputEvents = /**
     * 从前端传来事件，进行服务器端方法类型判断
     * @param {?} input
     * @return {?}
     */
    function (input) {
        var _this = this;
        //debugger
        return input.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            //debugger
            switch (event.type) {
                case 'sliceUpload':
                    /** @type {?} */
                    var _files = _this.queue.filter((/**
                     * @param {?} file
                     * @return {?}
                     */
                    function (file) { return file.progress.status === UploadStatus.Queue && (!event.file || file.fileIndex === event.file.fileIndex); }));
                    if (_files.length > 0) {
                        _this.uploadScheduler.next({
                            files: _files,
                            event: event,
                            file: null,
                        });
                    }
                    break;
                case "upload":
                case "multipartUpload":
                    /** @type {?} */
                    var uploadFileIndex = _this.queue.findIndex((/**
                     * @param {?} file
                     * @return {?}
                     */
                    function (file) { return file === event.file; }));
                    if (uploadFileIndex !== -1 && event.file) {
                        _this.uploadScheduler.next({
                            files: [_this.queue[uploadFileIndex]],
                            event: event,
                            file: null,
                        });
                    }
                    break;
                case "uploadAll":
                    /** @type {?} */
                    var files = _this.queue.filter((/**
                     * @param {?} file
                     * @return {?}
                     */
                    function (file) { return file.progress.status === UploadStatus.Queue; }));
                    if (files.length > 0) {
                        event.type = "upload";
                        _this.uploadScheduler.next({
                            files: files,
                            event: event,
                            file: null,
                        });
                    }
                    break;
                case "cancel":
                    /** @type {?} */
                    var id_1 = event.id || null;
                    if (!id_1) {
                        return;
                    }
                    /** @type {?} */
                    var fileIndex = _this.queue.findIndex((/**
                     * @param {?} file
                     * @return {?}
                     */
                    function (file) { return file.id === id_1; }));
                    if (fileIndex !== -1) {
                        _this.serviceEvents.emit({
                            type: "cancelled",
                            files: [_this.queue[fileIndex]],
                            message: "已取消附件上传",
                        });
                        _this.queue.splice(fileIndex, 1);
                    }
                    break;
                    // case 'cancel':
                    // debugger
                    // const id = event.id || null;
                    // if (!id) {
                    //   return;
                    // }
                    // const subs = this.subs.filter(sub => sub.id === id);
                    // subs.forEach(sub => {
                    //   if (sub.sub) {
                    //     sub.sub.unsubscribe();
                    //     const fileIndex = this.queue.findIndex(file => file.id === id);
                    //     if (fileIndex !== -1) {
                    //       this.queue[fileIndex].progress.status = UploadStatus.Cancelled;
                    //       this.serviceEvents.emit({ type: 'cancelled', file: this.queue[fileIndex] });
                    //     }
                    //   }
                    // });
                    break;
                // case 'cancelAll':
                //   this.subs.forEach(sub => {
                //     if (sub.sub) {
                //       sub.sub.unsubscribe();
                //     }
                //     const file = this.queue.find(uploadFile => uploadFile.id === sub.id);
                //     if (file) {
                //       file.progress.status = UploadStatus.Cancelled;
                //       this.serviceEvents.emit({ type: 'cancelled', file: file });
                //     }
                //   });
                //   break;
                case "hide":
                    if (!event.id) {
                        return;
                    }
                    /** @type {?} */
                    var ids_1 = event.id.split(",");
                    _this.queue = _this.queue.filter((/**
                     * @param {?} file
                     * @return {?}
                     */
                    function (file) {
                        /** @type {?} */
                        var tIndex = ids_1.findIndex((/**
                         * @param {?} tId
                         * @return {?}
                         */
                        function (tId) { return tId == file.id; }));
                        return tIndex > -1 ? false : true;
                    }));
                    break;
                case "cancelAll":
                    // 取消，直接从队列中移除，不用修改状态
                    /** @type {?} */
                    var queueFiles = _this.queue.filter((/**
                     * @param {?} uploadFile
                     * @return {?}
                     */
                    function (uploadFile) { return uploadFile.progress.status === UploadStatus.Queue; }));
                    if (queueFiles.length) {
                        _this.serviceEvents.emit({
                            type: "cancelled",
                            files: queueFiles,
                            message: "已取消附件上传",
                        });
                        _this.queue = _this.queue.filter((/**
                         * @param {?} uploadFile
                         * @return {?}
                         */
                        function (uploadFile) { return uploadFile.progress.status != UploadStatus.Queue; }));
                    }
                    break;
                case "remove":
                    if (!event.id) {
                        return;
                    }
                    /** @type {?} */
                    var removeIndex = _this.queue.findIndex((/**
                     * @param {?} file
                     * @return {?}
                     */
                    function (file) { return file.id === event.id; }));
                    if (removeIndex !== -1) {
                        // 得有个开始删除和已经删除
                        _this.queue[removeIndex].progress.status = UploadStatus.Remove;
                        _this.uploadScheduler.next({
                            files: [_this.queue[removeIndex]],
                            event: event,
                            file: null,
                        });
                    }
                    break;
                case "removeAll":
                    /** @type {?} */
                    var removeQueueFiles = _this.queue.filter((/**
                     * @param {?} uploadFile
                     * @return {?}
                     */
                    function (uploadFile) { return uploadFile.progress.status === UploadStatus.Queue; }));
                    if (removeQueueFiles.length) {
                        _this.serviceEvents.emit({
                            type: "cancelled",
                            files: removeQueueFiles,
                            message: "删除附件成功",
                        });
                        _this.queue = _this.queue.filter((/**
                         * @param {?} uploadFile
                         * @return {?}
                         */
                        function (uploadFile) { return uploadFile.progress.status != UploadStatus.Queue; }));
                    }
                    // 正在上传的附件是如何处理
                    // const doneFiles = this.queue.filter(uploadFile => uploadFile.progress.status === UploadStatus.Done);
                    if (_this.queue.length) {
                        event.type = "remove";
                        _this.queue.map((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) { return (item.progress.status = UploadStatus.Remove); }));
                        _this.uploadScheduler.next({
                            files: _this.queue,
                            event: event,
                            file: null,
                        });
                    }
                    break;
            }
        }));
    };
    /**
     * @param {?} extendSer
     * @return {?}
     */
    FFileUploaderService.prototype.setExtendServerConfig = /**
     * @param {?} extendSer
     * @return {?}
     */
    function (extendSer) {
        this.extendServerConfig = extendSer;
    };
    /**
     * @param {?} upload
     * @return {?}
     */
    FFileUploaderService.prototype.serverMethod = /**
     * @param {?} upload
     * @return {?}
     */
    function (upload) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var sub;
            /** @type {?} */
            var ids = upload.files.map((/**
             * @param {?} fileItem
             * @return {?}
             */
            function (fileItem) { return fileItem.id; }));
            switch (upload.event.type) {
                case 'sliceUpload':
                    sub = _this.upload(upload.files, upload.event);
                    break;
                case "upload":
                    sub = _this.upload(upload.files, upload.event);
                    break;
                case "multipartUpload":
                    sub = _this.multipartUpload(upload.files[0], upload.event);
                    break;
                // case 'uploadAll':
                //   ids = upload.files.map(fileItem => fileItem.id);
                //   sub = this.uploadAll(upload.files, upload.event);
                //   break;
                case "remove":
                    sub = _this.remove(upload.files, upload.event);
                    break;
                // case 'removeAll':
                //   ids = upload.files.map(fileItem => fileItem.id);
                //   sub = this.removeAll(upload.files, upload.event);
                //   break;
                default:
                    sub = null;
            }
            if (!sub) {
                return;
            }
            sub.pipe(finalize((/**
             * @return {?}
             */
            function () {
                // debugger;
                if (!observer.closed) {
                    observer.complete();
                }
            }))).subscribe((/**
             * @param {?} output
             * @return {?}
             */
            function (output) {
                // debugger;
                observer.next(output);
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                observer.next(err);
            }), (/**
             * @return {?}
             */
            function () {
                observer.complete();
            }));
            _this.subs.push({ ids: ids, sub: sub, id: "" });
            // switch (upload.event.type) {
            //   case 'uploadAll':
            //     this.subs.push({ ids: ids, sub: sub, id: '' });
            //     break;
            //   case 'removeAll':
            //     this.subs.push({ ids: ids, sub: sub, id: '' });
            //     break;
            //   default:
            // }
        }));
    };
    /**
     * 单个文件上传
     * @param file
     * @param event
     */
    // uploadFile(file: UploadFile, event: UploadInput): Observable<UploadOutput> {
    //   const uploadFile = <BlobFile>file.nativeFile;
    //   const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);
    //   // 已经被取消的不能被上传
    //   if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {
    //     return new Observable(observer => {
    //       observer.complete();
    //     });
    //   }
    //   // 抛出开始上传的事件
    //   this.serviceEvents.emit({ type: 'start', files: [file] });
    //   return this.uploadServerSer.upload(file, event, this.extendServerConfig);
    // }
    /**
     * 单个文件上传
     * @param {?} file
     * @param {?} event
     * @return {?}
     */
    // uploadFile(file: UploadFile, event: UploadInput): Observable<UploadOutput> {
    //   const uploadFile = <BlobFile>file.nativeFile;
    //   const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);
    //   // 已经被取消的不能被上传
    //   if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {
    //     return new Observable(observer => {
    //       observer.complete();
    //     });
    //   }
    //   // 抛出开始上传的事件
    //   this.serviceEvents.emit({ type: 'start', files: [file] });
    //   return this.uploadServerSer.upload(file, event, this.extendServerConfig);
    // }
    FFileUploaderService.prototype.multipartUpload = /**
     * 单个文件上传
     * @param {?} file
     * @param {?} event
     * @return {?}
     */
    // uploadFile(file: UploadFile, event: UploadInput): Observable<UploadOutput> {
    //   const uploadFile = <BlobFile>file.nativeFile;
    //   const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);
    //   // 已经被取消的不能被上传
    //   if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {
    //     return new Observable(observer => {
    //       observer.complete();
    //     });
    //   }
    //   // 抛出开始上传的事件
    //   this.serviceEvents.emit({ type: 'start', files: [file] });
    //   return this.uploadServerSer.upload(file, event, this.extendServerConfig);
    // }
    function (file, event) {
        // 抛出开始上传的事件
        this.serviceEvents.emit({ type: "start", files: [file] });
        return this.uploadServerSer.multipartUpload(file, event, this.extendServerConfig);
    };
    /**
     * @param {?} files
     * @param {?} event
     * @return {?}
     */
    FFileUploaderService.prototype.upload = /**
     * @param {?} files
     * @param {?} event
     * @return {?}
     */
    function (files, event) {
        // 抛出开始上传的事件
        this.serviceEvents.emit({ type: "start", files: files });
        return this.uploadServerSer.upload(files, event, this.extendServerConfig);
    };
    /**
     * @param {?} files
     * @param {?} event
     * @return {?}
     */
    FFileUploaderService.prototype.remove = /**
     * @param {?} files
     * @param {?} event
     * @return {?}
     */
    function (files, event) {
        return this.uploadServerSer.remove(files, event, this.extendServerConfig);
    };
    // removeAll(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {
    //   return this.uploadServerSer.removeAll(files, event, this.extendServerConfig);
    // }
    // 重置
    // removeAll(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {
    //   return this.uploadServerSer.removeAll(files, event, this.extendServerConfig);
    // }
    // 重置
    /**
     * @return {?}
     */
    FFileUploaderService.prototype.reset = 
    // removeAll(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {
    //   return this.uploadServerSer.removeAll(files, event, this.extendServerConfig);
    // }
    // 重置
    /**
     * @return {?}
     */
    function () {
        this.queue = [];
        //this.uploadScheduler = new Subject();
        // this.subs.forEach(sub => {
        //   if (sub.sub) {
        //     sub.sub.unsubscribe();
        //   }
        // });
        this.subs = [];
    };
    // 暂时
    // 暂时
    /**
     * @param {?} contentTypes
     * @return {?}
     */
    FFileUploaderService.prototype.setContentTypes = 
    // 暂时
    /**
     * @param {?} contentTypes
     * @return {?}
     */
    function (contentTypes) {
        if (typeof contentTypes !== "undefined" && contentTypes instanceof Array) {
            if (contentTypes.find((/**
             * @param {?} type
             * @return {?}
             */
            function (type) { return type === "*"; })) !== undefined) {
                this.allowedContentTypes = ["*"];
            }
            else {
                this.allowedContentTypes = contentTypes;
            }
            return;
        }
        this.allowedContentTypes = ["*"];
    };
    /**
     * @return {?}
     */
    FFileUploaderService.prototype.allContentTypesAllowed = /**
     * @return {?}
     */
    function () {
        return (this.allowedContentTypes.find((/**
         * @param {?} type
         * @return {?}
         */
        function (type) { return type === "*"; })) !==
            undefined);
    };
    /**
     *
     * @param name
     */
    /**
     *
     * @param {?} name
     * @return {?}
     */
    FFileUploaderService.prototype.isContentTypeAllowed = /**
     *
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (this.allContentTypesAllowed()) {
            return true;
        }
        // 附件没有后缀
        if (name.lastIndexOf(".") < 0) {
            return false;
        }
        /** @type {?} */
        var namesuffix = name.substr(name.lastIndexOf("."));
        // 简化计算
        return (this.allowedContentTypes.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.toLowerCase() == namesuffix.toLowerCase(); })) > -1);
    };
    /**
     * @param {?} fileSize
     * @return {?}
     */
    FFileUploaderService.prototype.isFileSizeAllowed = /**
     * @param {?} fileSize
     * @return {?}
     */
    function (fileSize) {
        if (!this.maxFileSize) {
            return true;
        }
        // fileSize是b单位 maxFileSize是MB单位
        return fileSize <= this.maxFileSize * 1024 * 1024; // * 8
    };
    /** @nocollapse */
    FFileUploaderService.ctorParameters = function () { return [
        { type: UploadServerService, decorators: [{ type: Optional }] }
    ]; };
    return FFileUploaderService;
}());
export { FFileUploaderService };
if (false) {
    /** @type {?} */
    FFileUploaderService.prototype.queue;
    /** @type {?} */
    FFileUploaderService.prototype.serviceEvents;
    /** @type {?} */
    FFileUploaderService.prototype.uploadScheduler;
    /** @type {?} */
    FFileUploaderService.prototype.subs;
    /** @type {?} */
    FFileUploaderService.prototype.allowedContentTypes;
    /** @type {?} */
    FFileUploaderService.prototype.maxUploads;
    /**
     * 单位M，默认是12M,0代表不限制
     * @type {?}
     */
    FFileUploaderService.prototype.maxFileSize;
    /** @type {?} */
    FFileUploaderService.prototype.concurrency;
    /** @type {?} */
    FFileUploaderService.prototype.uploadedCount;
    /**
     * @type {?}
     * @private
     */
    FFileUploaderService.prototype.extendServerConfig;
    /**
     * @type {?}
     * @private
     */
    FFileUploaderService.prototype.uploadServerSer;
}
//# sourceMappingURL=data:application/json;base64,