import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var CheckBoxHandler = /** @class */ (function () {
    function CheckBoxHandler() {
    }
    CheckBoxHandler.prototype.convert = function (qc) {
        var arr = [];
        var tv = qc.value;
        if (tv.value.length == 1)
            return [{
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.Equal,
                    'Value': tv.value[0],
                    'Relation': RelationType.And,
                    'Expresstype': ValueType.Value
                }];
        tv.value.forEach(function (tvv) {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Equal,
                'Value': tvv,
                'Relation': RelationType.Or,
                'Expresstype': ValueType.Value
            });
        });
        arr[0]['Lbracket'] = '(';
        arr[arr.length - 1]['Rbracket'] = ')';
        arr[arr.length - 1]['Relation'] = RelationType.And;
        return arr;
    };
    return CheckBoxHandler;
}());
export { CheckBoxHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9xdWVyeS1zb2x1dGlvbi9oYW5kbGVycy9jaGVja2JveC5oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTFEO0lBQUE7SUEwQkEsQ0FBQztJQXpCRyxpQ0FBTyxHQUFQLFVBQVEsRUFBa0I7UUFDdEIsSUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2YsSUFBTSxFQUFFLEdBQUksRUFBRSxDQUFDLEtBQXVCLENBQUM7UUFDdkMsSUFBRyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDO1lBQ25CLE9BQU8sQ0FBQztvQkFDSixhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7b0JBQzVCLFNBQVMsRUFBRyxXQUFXLENBQUMsS0FBSztvQkFDN0IsT0FBTyxFQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUNyQixVQUFVLEVBQUcsWUFBWSxDQUFDLEdBQUc7b0JBQzdCLGFBQWEsRUFBQyxTQUFTLENBQUMsS0FBSztpQkFDaEMsQ0FBQyxDQUFDO1FBQ1AsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHO1lBQ2hCLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQ0wsYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO2dCQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLEtBQUs7Z0JBQzdCLE9BQU8sRUFBRyxHQUFHO2dCQUNiLFVBQVUsRUFBRyxZQUFZLENBQUMsRUFBRTtnQkFDNUIsYUFBYSxFQUFDLFNBQVMsQ0FBQyxLQUFLO2FBQ2hDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO1FBQ0gsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUN6QixHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDckMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQztRQUNsRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDTCxzQkFBQztBQUFELENBQUMsQUExQkQsSUEwQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJUXVlcnlDb25kaXRpb25IYW5kbGVyIH0gZnJvbSBcIi4vaXF1ZXJ5Y29uZGl0aW9uLmhhbmRsZXJcIjtcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb24sIENoZWNrQm94VmFsdWUgfSBmcm9tIFwiQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb25cIjtcclxuaW1wb3J0IHsgQ29tcGFyZVR5cGUgfSBmcm9tICcuLi9lbnVtL2NvbXBhcmUtdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgVmFsdWVUeXBlIH0gZnJvbSAnLi4vZW51bS92YWx1ZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBSZWxhdGlvblR5cGUgfSBmcm9tICcuLi9lbnVtL3JlbGF0aW9uLXR5cGUuZW51bSc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2hlY2tCb3hIYW5kbGVyIGltcGxlbWVudHMgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlcntcclxuICAgIGNvbnZlcnQocWM6IFF1ZXJ5Q29uZGl0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgYXJyID0gW107XHJcbiAgICAgICAgY29uc3QgdHYgPSAocWMudmFsdWUgYXMgQ2hlY2tCb3hWYWx1ZSk7XHJcbiAgICAgICAgaWYodHYudmFsdWUubGVuZ3RoID09IDEpXHJcbiAgICAgICAgICAgIHJldHVybiBbe1xyXG4gICAgICAgICAgICAgICAgJ0ZpbHRlckZpZWxkJyA6IHFjLmZpZWxkQ29kZSxcclxuICAgICAgICAgICAgICAgICdDb21wYXJlJyA6IENvbXBhcmVUeXBlLkVxdWFsLFxyXG4gICAgICAgICAgICAgICAgJ1ZhbHVlJyA6IHR2LnZhbHVlWzBdLFxyXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5BbmQsXHJcbiAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOlZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICB9XTtcclxuICAgICAgICB0di52YWx1ZS5mb3JFYWNoKHR2diA9PiB7XHJcbiAgICAgICAgICAgIGFyci5wdXNoKHtcclxuICAgICAgICAgICAgICAgICdGaWx0ZXJGaWVsZCcgOiBxYy5maWVsZENvZGUsXHJcbiAgICAgICAgICAgICAgICAnQ29tcGFyZScgOiBDb21wYXJlVHlwZS5FcXVhbCxcclxuICAgICAgICAgICAgICAgICdWYWx1ZScgOiB0dnYsXHJcbiAgICAgICAgICAgICAgICAnUmVsYXRpb24nIDogUmVsYXRpb25UeXBlLk9yLFxyXG4gICAgICAgICAgICAgICAgJ0V4cHJlc3N0eXBlJzpWYWx1ZVR5cGUuVmFsdWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYXJyWzBdWydMYnJhY2tldCddID0gJygnO1xyXG4gICAgICAgIGFyclthcnIubGVuZ3RoIC0xXVsnUmJyYWNrZXQnXSA9ICcpJztcclxuICAgICAgICBhcnJbYXJyLmxlbmd0aCAtMV1bJ1JlbGF0aW9uJ10gPSBSZWxhdGlvblR5cGUuQW5kO1xyXG4gICAgICAgIHJldHVybiBhcnI7XHJcbiAgICB9XHJcbn0iXX0=