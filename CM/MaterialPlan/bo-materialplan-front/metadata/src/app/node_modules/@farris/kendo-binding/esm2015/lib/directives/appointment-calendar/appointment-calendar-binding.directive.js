import { Directive, HostListener, Injector, Input } from '@angular/core';
import { ChangeType, FrameContext } from '@farris/devkit';
import { AppointmentCalendarComponent } from '@farris/appointment-calendar';
import { ViewType } from './types';
export class AppointmentCalendarBindingDirective {
    constructor(injector, frameContext, calendarComponent) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.calendarComponent = calendarComponent;
        /**
         * 房间列表api url
         */
        this.url = null;
        /**
         * http method, default PUT
         */
        this.method = 'PUT';
        this.startDateVariable = 'startDate';
        this.endDateVariable = 'endDate';
        this.viewTypeVariable = 'viewType';
    }
    get bindingData() {
        return this.frameContext.bindingData;
    }
    get viewModel() {
        return this.frameContext.viewModel;
    }
    restService() {
        return this.frameContext.repository.restService;
    }
    /**
     * 获取绑定数据
     */
    get bindingList() {
        // 根实体
        if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
            return this.bindingData.list;
        }
        // 子实体
        let bindingPath = this.viewModel.bindingPath.substr(1);
        bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
        const paths = bindingPath.split('/');
        const filteredPaths = paths.filter((part) => {
            return part !== '';
        });
        return this.bindingData.getValue(filteredPaths);
    }
    ngOnInit() {
        this.loadPlacements();
        this.registerBindingDataChangeEvent();
    }
    ngOnChanges(changes) {
    }
    ngOnDestroy() {
        this.unRegisterBindingDataChangeEvent();
    }
    bindData(change) {
        // 再toJSON
        let data = this.bindingList.toJSON();
        this.calendarComponent.loadReserveData(data);
    }
    onBindingDataChange(change) {
        this.bindData(change);
        this.updateSelectedRow(change);
    }
    registerBindingDataChangeEvent() {
        this.bindingDataChangeEvent = this.bindingData.changes.subscribe((change) => {
            this.onBindingDataChange(change);
        });
    }
    /**
     * 取消bindingdata变化订阅
     */
    unRegisterBindingDataChangeEvent() {
        if (this.bindingDataChangeEvent && typeof (this.bindingDataChangeEvent.unsubscribe) === 'function') {
            this.bindingDataChangeEvent.unsubscribe();
        }
    }
    loadPlacements() {
        if (!this.url) {
            console.log('无法加载房间信息，请配置房间列表api地址');
            return;
        }
        const requestInfo = this.restService().buildRequestInfo();
        const options = {
            body: {
                requestInfo
            }
        };
        this.restService().request(this.url, this.method, null, options).subscribe((returnValue) => {
            this.bindPlacements(returnValue);
        });
    }
    bindPlacements(placments) {
        this.calendarComponent.loadPlaceData(placments);
    }
    updateState(startDate, endDate, viewType) {
        this.viewModel.uiState.setPropertyValue(this.startDateVariable, startDate);
        this.viewModel.uiState.setPropertyValue(this.endDateVariable, endDate);
        this.viewModel.uiState.setPropertyValue(this.viewTypeVariable, viewType);
    }
    updateSelectedRow(change) {
        if (!this.bindingList || !this.bindingList.currentId) {
            return;
        }
        // 页码切换时不执行当前行切换
        if (change && change.type === ChangeType.PaginationInfoChange) {
            return;
        }
        if (this.viewModel && this.viewModel.frameContext.bindingData.rowSelectedEventSuspend === true) {
            return;
        }
        const id = this.calendarComponent.selectedId;
        const currentId = this.bindingList.currentId;
        // grid当前行与bingingList当前行一致，无须切换
        if (id === currentId) {
            return;
        }
        this.selectCalendarRow(this.bindingList.currentId);
    }
    selectCalendarRow(id) {
        this.calendarComponent.selectItem(id);
    }
    filterChanged(event) {
        const { dateValue = null, place = null, viewType = null } = event || {};
        let startDate = null;
        let endDate = null;
        if (!dateValue) {
            return;
        }
        if (viewType === ViewType.day) {
            startDate = `${dateValue} 00:00:00`;
            endDate = `${dateValue} 23:59:59`;
        }
        else if (viewType === ViewType.week && dateValue.indexOf('~') !== -1) {
            const sections = dateValue.split('~');
            startDate = `${sections[0]} 00:00:00`;
            endDate = `${sections[1]} 23:59:59`;
        }
        this.updateState(startDate, endDate, viewType);
    }
    setSelectionIdToBindingData(id) {
        // 如果当前行不存在，则强制设置
        if (this.bindingList.currentId !== id) {
            this.bindingList.setCurrentId(id, true);
        }
    }
    selectChange(event) {
        const { item: { id = null } } = event;
        this.setSelectionIdToBindingData(id);
    }
}
AppointmentCalendarBindingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-appointment-calendar-binding]'
            },] }
];
/** @nocollapse */
AppointmentCalendarBindingDirective.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext },
    { type: AppointmentCalendarComponent }
];
AppointmentCalendarBindingDirective.propDecorators = {
    url: [{ type: Input }],
    method: [{ type: Input }],
    startDateVariable: [{ type: Input }],
    endDateVariable: [{ type: Input }],
    viewTypeVariable: [{ type: Input }],
    filterChanged: [{ type: HostListener, args: ['filterChange', ['$event'],] }],
    selectChange: [{ type: HostListener, args: ['selectChange', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,