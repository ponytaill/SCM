/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
var DebugService = /** @class */ (function () {
    function DebugService() {
        this.isDebug = false;
        this.destroy$ = new Subject();
        this.debugSub = null;
    }
    /**
     * @return {?}
     */
    DebugService.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    /**
     * @private
     * @param {?} type
     * @param {...?} msg
     * @return {?}
     */
    DebugService.prototype.writeMessage = /**
     * @private
     * @param {?} type
     * @param {...?} msg
     * @return {?}
     */
    function (type) {
        var msg = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            msg[_i - 1] = arguments[_i];
        }
        if (this.isDebug) {
            console[type].apply(console, tslib_1.__spread(msg));
        }
    };
    /**
     * @param {...?} msg
     * @return {?}
     */
    DebugService.prototype.log = /**
     * @param {...?} msg
     * @return {?}
     */
    function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        this.writeMessage('log', msg);
    };
    /**
     * @param {...?} msg
     * @return {?}
     */
    DebugService.prototype.warn = /**
     * @param {...?} msg
     * @return {?}
     */
    function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        this.writeMessage('warn', msg);
    };
    /**
     * @param {...?} msg
     * @return {?}
     */
    DebugService.prototype.error = /**
     * @param {...?} msg
     * @return {?}
     */
    function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        this.writeMessage('error', msg);
    };
    /**
     * @param {...?} msg
     * @return {?}
     */
    DebugService.prototype.info = /**
     * @param {...?} msg
     * @return {?}
     */
    function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        this.writeMessage('info', msg);
    };
    /**
     * @return {?}
     */
    DebugService.prototype.useDebugMode = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.debugSub) {
            this.debugSub = fromEvent(document.body, 'keydown').pipe(takeUntil(this.destroy$)).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e.ctrlKey && e.shiftKey && e.key === 'D') {
                    e.preventDefault();
                    e.stopPropagation();
                    _this.isDebug = !_this.isDebug;
                    console.log("\uD83E\uDEB2%cFarris debug mode is " + (_this.isDebug ? 'startting' : 'stopped') + ".\uD83E\uDEB2", 'color: blue; font-weight:bold;font-size:16px');
                }
            }));
        }
        return this.debugSub;
    };
    DebugService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DebugService.ctorParameters = function () { return []; };
    /** @nocollapse */ DebugService.ngInjectableDef = i0.defineInjectable({ factory: function DebugService_Factory() { return new DebugService(); }, token: DebugService, providedIn: "root" });
    return DebugService;
}());
export { DebugService };
if (false) {
    /** @type {?} */
    DebugService.prototype.isDebug;
    /**
     * @type {?}
     * @private
     */
    DebugService.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    DebugService.prototype.debugSub;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvZGVidWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBRzNDO0lBU0k7UUFMQSxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBRVIsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDekIsYUFBUSxHQUFpQixJQUFJLENBQUM7SUFHdEMsQ0FBQzs7OztJQUVELDhCQUFPOzs7SUFBUDtRQUNJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7Ozs7O0lBRU8sbUNBQVk7Ozs7OztJQUFwQixVQUFzQixJQUF1QztRQUFFLGFBQVc7YUFBWCxVQUFXLEVBQVgscUJBQVcsRUFBWCxJQUFXO1lBQVgsNEJBQVc7O1FBQ3RFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNkLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBYixPQUFPLG1CQUFVLEdBQUcsR0FBRTtTQUN6QjtJQUNMLENBQUM7Ozs7O0lBRUQsMEJBQUc7Ozs7SUFBSDtRQUFJLGFBQVc7YUFBWCxVQUFXLEVBQVgscUJBQVcsRUFBWCxJQUFXO1lBQVgsd0JBQVc7O1FBQ1gsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7Ozs7SUFFRCwyQkFBSTs7OztJQUFKO1FBQUssYUFBVzthQUFYLFVBQVcsRUFBWCxxQkFBVyxFQUFYLElBQVc7WUFBWCx3QkFBVzs7UUFDWixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7OztJQUVELDRCQUFLOzs7O0lBQUw7UUFBTSxhQUFXO2FBQVgsVUFBVyxFQUFYLHFCQUFXLEVBQVgsSUFBVztZQUFYLHdCQUFXOztRQUNiLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Ozs7O0lBRUQsMkJBQUk7Ozs7SUFBSjtRQUFLLGFBQVc7YUFBWCxVQUFXLEVBQVgscUJBQVcsRUFBWCxJQUFXO1lBQVgsd0JBQVc7O1FBQ1osSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7OztJQUVELG1DQUFZOzs7SUFBWjtRQUFBLGlCQWVDO1FBZEcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQ3BELFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQzNCLENBQUMsU0FBUzs7OztZQUFFLFVBQUMsQ0FBZ0I7Z0JBQzFCLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxFQUFFO29CQUMxQyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7b0JBQ25CLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztvQkFDcEIsS0FBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUM7b0JBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMseUNBQTZCLEtBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUyxtQkFBSyxFQUFFLDhDQUE4QyxDQUFDLENBQUE7aUJBQ3hJO1lBQ0wsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN6QixDQUFDOztnQkF0REosVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7Ozs7dUJBUkQ7Q0E2REMsQUF2REQsSUF1REM7U0FwRFksWUFBWTs7O0lBQ3JCLCtCQUFnQjs7Ozs7SUFFaEIsZ0NBQWlDOzs7OztJQUNqQyxnQ0FBc0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBmcm9tRXZlbnQsIFN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEZWJ1Z1NlcnZpY2Uge1xyXG4gICAgaXNEZWJ1ZyA9IGZhbHNlO1xyXG4gICAgXHJcbiAgICBwcml2YXRlIGRlc3Ryb3kkID0gbmV3IFN1YmplY3QoKTtcclxuICAgIHByaXZhdGUgZGVidWdTdWI6IFN1YnNjcmlwdGlvbiA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcclxuICAgICAgICB0aGlzLmRlc3Ryb3kkLmNvbXBsZXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB3cml0ZU1lc3NhZ2UoIHR5cGU6ICdsb2cnIHwgJ3dhcm4nIHwgJ2Vycm9yJyB8ICdpbmZvJywgLi4ubXNnOiBhbnkpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0RlYnVnKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGVbdHlwZV0oLi4ubXNnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbG9nKC4uLm1zZzogYW55KSB7XHJcbiAgICAgICAgdGhpcy53cml0ZU1lc3NhZ2UoJ2xvZycsIG1zZyk7XHJcbiAgICB9XHJcblxyXG4gICAgd2FybiguLi5tc2c6IGFueSkge1xyXG4gICAgICAgIHRoaXMud3JpdGVNZXNzYWdlKCd3YXJuJywgbXNnKTtcclxuICAgIH1cclxuXHJcbiAgICBlcnJvciguLi5tc2c6IGFueSkge1xyXG4gICAgICAgIHRoaXMud3JpdGVNZXNzYWdlKCdlcnJvcicsIG1zZyk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5mbyguLi5tc2c6IGFueSkge1xyXG4gICAgICAgIHRoaXMud3JpdGVNZXNzYWdlKCdpbmZvJywgbXNnKTtcclxuICAgIH1cclxuXHJcbiAgICB1c2VEZWJ1Z01vZGUoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRlYnVnU3ViKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVidWdTdWIgPSBmcm9tRXZlbnQoZG9jdW1lbnQuYm9keSwgJ2tleWRvd24nKS5waXBlKFxyXG4gICAgICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveSQpXHJcbiAgICAgICAgICAgICkuc3Vic2NyaWJlKCAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuY3RybEtleSAmJiBlLnNoaWZ0S2V5ICYmIGUua2V5ID09PSAnRCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRGVidWcgPSAhdGhpcy5pc0RlYnVnO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGDwn6qyJWNGYXJyaXMgZGVidWcgbW9kZSBpcyAkeyB0aGlzLmlzRGVidWcgPyAnc3RhcnR0aW5nJyA6ICdzdG9wcGVkJ30u8J+qsmAsICdjb2xvcjogYmx1ZTsgZm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MTZweCcpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVidWdTdWI7XHJcbiAgICB9XHJcbn1cclxuIl19