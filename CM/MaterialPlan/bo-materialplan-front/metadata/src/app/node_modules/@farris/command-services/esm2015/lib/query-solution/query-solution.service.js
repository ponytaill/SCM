import { Injectable } from '@angular/core';
import { QueryConditionHandlerFactory } from './querycondition.handler.factory';
import { FrameContext } from '@farris/devkit';
import { FrameworkSessionService } from '@farris/bef';
export class QuerySolutionService {
    constructor(frameContext, frameworkSessionService) {
        this.frameContext = frameContext;
        this.frameworkSessionService = frameworkSessionService;
    }
    getUserSessionId() {
        return this.frameworkSessionService.getUserSessionId();
    }
    setFilterConditions(params) {
        let queryConditionHandler;
        const filterConditionList = [];
        params.forEach(qc => {
            if (!qc.value.isEmpty()) {
                queryConditionHandler = QueryConditionHandlerFactory.getInstance().getHandler(qc.control.getControlType());
                queryConditionHandler && filterConditionList.push(...queryConditionHandler.convert(qc));
            }
        });
        //设置到NgCommand params.filter属性上：{UISTATE~/root-component/filterConditionList}
        this.frameContext.uiState['filterConditionList'] = JSON.stringify(filterConditionList);
        // const originalConditions = this.getOriginalQueryConditions(filterConditionList);
        this.frameContext.uiState['originalFilterConditionList'] = JSON.stringify(filterConditionList);
    }
    setCurrentQueryConditions(conditions) {
        this.frameContext.uiState['currentQueryConditions'] = conditions;
    }
}
QuerySolutionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
QuerySolutionService.ctorParameters = () => [
    { type: FrameContext },
    { type: FrameworkSessionService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktc29sdXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9xdWVyeS1zb2x1dGlvbi9xdWVyeS1zb2x1dGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDaEYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTlDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUd0RCxNQUFNLE9BQU8sb0JBQW9CO0lBRS9CLFlBQ1UsWUFBMEIsRUFDMUIsdUJBQWdEO1FBRGhELGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7SUFHMUQsQ0FBQztJQUVELGdCQUFnQjtRQUNkLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDekQsQ0FBQztJQUVNLG1CQUFtQixDQUFDLE1BQTZCO1FBQ3RELElBQUkscUJBQTZDLENBQUM7UUFDbEQsTUFBTSxtQkFBbUIsR0FBRyxFQUFFLENBQUM7UUFDL0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNsQixJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDdkIscUJBQXFCLEdBQUcsNEJBQTRCLENBQUMsV0FBVyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztnQkFDM0cscUJBQXFCLElBQUksbUJBQW1CLENBQUMsSUFBSSxDQUFDLEdBQUcscUJBQXFCLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDekY7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILDZFQUE2RTtRQUM3RSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN2RixtRkFBbUY7UUFDbkYsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsNkJBQTZCLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVNLHlCQUF5QixDQUFDLFVBQTRCO1FBQzNELElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLEdBQUcsVUFBVSxDQUFDO0lBQ25FLENBQUM7OztZQS9CRixVQUFVOzs7O1lBSkYsWUFBWTtZQUVaLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uIH0gZnJvbSAnQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb24nO1xuaW1wb3J0IHsgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlciB9IGZyb20gJy4vaGFuZGxlcnMvaXF1ZXJ5Y29uZGl0aW9uLmhhbmRsZXInO1xuaW1wb3J0IHsgUXVlcnlDb25kaXRpb25IYW5kbGVyRmFjdG9yeSB9IGZyb20gJy4vcXVlcnljb25kaXRpb24uaGFuZGxlci5mYWN0b3J5JztcbmltcG9ydCB7IEZyYW1lQ29udGV4dCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcbmltcG9ydCB7IElRdWVyeVNvbHV0aW9uSGFuZGxlcixRdWVyeVNvbHV0aW9uQ29tcG9uZW50IH0gZnJvbSAnQGdzcC1jbXAvcXVlcnlzb2x1dGlvbic7XG5pbXBvcnQgeyBGcmFtZXdvcmtTZXNzaW9uU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvYmVmJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFF1ZXJ5U29sdXRpb25TZXJ2aWNlIGltcGxlbWVudHMgSVF1ZXJ5U29sdXRpb25IYW5kbGVyIHtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LFxuICAgIHByaXZhdGUgZnJhbWV3b3JrU2Vzc2lvblNlcnZpY2U6IEZyYW1ld29ya1Nlc3Npb25TZXJ2aWNlXG4gICkge1xuXG4gIH1cblxuICBnZXRVc2VyU2Vzc2lvbklkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZnJhbWV3b3JrU2Vzc2lvblNlcnZpY2UuZ2V0VXNlclNlc3Npb25JZCgpO1xuICB9XG5cbiAgcHVibGljIHNldEZpbHRlckNvbmRpdGlvbnMocGFyYW1zOiBBcnJheTxRdWVyeUNvbmRpdGlvbj4pOiB2b2lkIHtcbiAgICBsZXQgcXVlcnlDb25kaXRpb25IYW5kbGVyOiBJUXVlcnlDb25kaXRpb25IYW5kbGVyO1xuICAgIGNvbnN0IGZpbHRlckNvbmRpdGlvbkxpc3QgPSBbXTtcbiAgICBwYXJhbXMuZm9yRWFjaChxYyA9PiB7XG4gICAgICBpZiAoIXFjLnZhbHVlLmlzRW1wdHkoKSkge1xuICAgICAgICBxdWVyeUNvbmRpdGlvbkhhbmRsZXIgPSBRdWVyeUNvbmRpdGlvbkhhbmRsZXJGYWN0b3J5LmdldEluc3RhbmNlKCkuZ2V0SGFuZGxlcihxYy5jb250cm9sLmdldENvbnRyb2xUeXBlKCkpO1xuICAgICAgICBxdWVyeUNvbmRpdGlvbkhhbmRsZXIgJiYgZmlsdGVyQ29uZGl0aW9uTGlzdC5wdXNoKC4uLnF1ZXJ5Q29uZGl0aW9uSGFuZGxlci5jb252ZXJ0KHFjKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy/orr7nva7liLBOZ0NvbW1hbmQgcGFyYW1zLmZpbHRlcuWxnuaAp+S4iu+8mntVSVNUQVRFfi9yb290LWNvbXBvbmVudC9maWx0ZXJDb25kaXRpb25MaXN0fVxuICAgIHRoaXMuZnJhbWVDb250ZXh0LnVpU3RhdGVbJ2ZpbHRlckNvbmRpdGlvbkxpc3QnXSA9IEpTT04uc3RyaW5naWZ5KGZpbHRlckNvbmRpdGlvbkxpc3QpO1xuICAgIC8vIGNvbnN0IG9yaWdpbmFsQ29uZGl0aW9ucyA9IHRoaXMuZ2V0T3JpZ2luYWxRdWVyeUNvbmRpdGlvbnMoZmlsdGVyQ29uZGl0aW9uTGlzdCk7XG4gICAgdGhpcy5mcmFtZUNvbnRleHQudWlTdGF0ZVsnb3JpZ2luYWxGaWx0ZXJDb25kaXRpb25MaXN0J10gPSBKU09OLnN0cmluZ2lmeShmaWx0ZXJDb25kaXRpb25MaXN0KTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRDdXJyZW50UXVlcnlDb25kaXRpb25zKGNvbmRpdGlvbnM6IFF1ZXJ5Q29uZGl0aW9uW10pOiB2b2lkIHtcbiAgICB0aGlzLmZyYW1lQ29udGV4dC51aVN0YXRlWydjdXJyZW50UXVlcnlDb25kaXRpb25zJ10gPSBjb25kaXRpb25zO1xuICB9XG4gIC8qKlxuICAgKiDov5jljp/ov4fmu6TmnaHku7bkuK3nmoRlbmNvZGVcbiAgICogQHBhcmFtIGNvbmRpdGlvbnMg5p+l6K+i5pa55qGI5p6E6YCg5a6M55qE6L+H5ruk5p2h5Lu2XG4gICAqL1xuICAvLyBwcml2YXRlIGdldE9yaWdpbmFsUXVlcnlDb25kaXRpb25zKGNvbmRpdGlvbnM6IEFycmF5PGFueT4pOiBBcnJheTxhbnk+IHtcbiAgLy8gICBjb25kaXRpb25zID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjb25kaXRpb25zKSk7XG4gIC8vICAgaWYgKGNvbmRpdGlvbnMgJiYgQXJyYXkuaXNBcnJheShjb25kaXRpb25zKSAmJiBjb25kaXRpb25zLmxlbmd0aCA+IDApIHtcbiAgLy8gICAgIGNvbmRpdGlvbnMgPSBjb25kaXRpb25zLm1hcCgoaXRlbSkgPT4ge1xuICAvLyAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnVmFsdWUnKSkge1xuICAvLyAgICAgICAgIGl0ZW0uVmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQoaXRlbS5WYWx1ZSk7XG4gIC8vICAgICAgIH0gZWxzZSBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xuICAvLyAgICAgICAgIGNvbnN0IHZhbHVlID0gaXRlbS52YWx1ZTtcbiAgLy8gICAgICAgICBkZWxldGUgaXRlbS52YWx1ZTtcbiAgLy8gICAgICAgICBpdGVtLlZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgLy8gICAgICAgfVxuICAvLyAgICAgICByZXR1cm4gaXRlbTtcbiAgLy8gICAgIH0pO1xuICAvLyAgIH1cbiAgLy8gICByZXR1cm4gY29uZGl0aW9ucztcbiAgLy8gfVxuXG59XG4iXX0=