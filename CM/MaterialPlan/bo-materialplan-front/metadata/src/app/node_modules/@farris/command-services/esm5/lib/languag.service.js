import { Injectable, LOCALE_ID, Optional, Inject } from '@angular/core';
import { LanguageMessageFactory } from './languages/index';
/**
 * 多语言服务
 * @scope FormModule
 */
var LanguageService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function LanguageService(localeId) {
        // #endregion
        /**
         * 当前语言
         */
        this.language = 'zh-CHS';
        this.language = localeId || 'zh-CHS';
        this.extendProperties();
        LanguageService.innerInstance = this;
    }
    Object.defineProperty(LanguageService.prototype, "languageMessage", {
        /**
         * 当前语言包
         */
        get: function () {
            return LanguageMessageFactory.create(this.language);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取实例
     */
    LanguageService.getInstance = function () {
        if (this.innerInstance) {
            return this.innerInstance;
        }
        var instance = new LanguageService('zh-CHS');
        LanguageService.innerInstance = instance;
        return instance;
    };
    /**
     * 扩展属性
     */
    LanguageService.prototype.extendProperties = function () {
        var _this = this;
        Object.keys(this.languageMessage).forEach(function (propName) {
            Object.defineProperty(_this, propName, {
                get: function () {
                    return _this.languageMessage[propName];
                }
            });
        });
    };
    /**
     * 单例对象
     */
    LanguageService.innerInstance = null;
    LanguageService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LanguageService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return LanguageService;
}());
export { LanguageService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2xhbmd1YWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBbUIsc0JBQXNCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUc1RTs7O0dBR0c7QUFDSDtJQWdHRTs7T0FFRztJQUNILHlCQUEyQyxRQUFpQjtRQWpCNUQsYUFBYTtRQUViOztXQUVHO1FBQ08sYUFBUSxHQUFHLFFBQVEsQ0FBQztRQWE1QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsSUFBSSxRQUFRLENBQUM7UUFDckMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDeEIsZUFBZSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7SUFDdkMsQ0FBQztJQVhELHNCQUFjLDRDQUFlO1FBSDdCOztXQUVHO2FBQ0g7WUFDRSxPQUFPLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEQsQ0FBQzs7O09BQUE7SUFXRDs7T0FFRztJQUNXLDJCQUFXLEdBQXpCO1FBQ0UsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztTQUMzQjtRQUNELElBQU0sUUFBUSxHQUFHLElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9DLGVBQWUsQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDO1FBQ3pDLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFRDs7T0FFRztJQUNLLDBDQUFnQixHQUF4QjtRQUFBLGlCQVFDO1FBUEMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsUUFBZ0I7WUFDekQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFJLEVBQUUsUUFBUSxFQUFFO2dCQUNwQyxHQUFHLEVBQUU7b0JBQ0gsT0FBTyxLQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN4QyxDQUFDO2FBQ0YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBN0hEOztPQUVHO0lBQ1ksNkJBQWEsR0FBb0IsSUFBSSxDQUFDOztnQkFOdEQsVUFBVTs7Ozs2Q0FtR0ksUUFBUSxZQUFJLE1BQU0sU0FBQyxTQUFTOztJQThCM0Msc0JBQUM7Q0FBQSxBQWpJRCxJQWlJQztBQUVELE9BQU8sRUFBRSxlQUFlLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIExPQ0FMRV9JRCwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGFuZ3VhZ2VNZXNzYWdlLCBMYW5ndWFnZU1lc3NhZ2VGYWN0b3J5IH0gZnJvbSAnLi9sYW5ndWFnZXMvaW5kZXgnO1xuXG5cbi8qKlxuICog5aSa6K+t6KiA5pyN5YqhXG4gKiBAc2NvcGUgRm9ybU1vZHVsZVxuICovXG5ASW5qZWN0YWJsZSgpXG5jbGFzcyBMYW5ndWFnZVNlcnZpY2UgaW1wbGVtZW50cyBMYW5ndWFnZU1lc3NhZ2Uge1xuXG4gIC8qKlxuICAgKiDljZXkvovlr7nosaFcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGlubmVySW5zdGFuY2U6IExhbmd1YWdlU2VydmljZSA9IG51bGw7XG5cbiAgLy8gI3JlZ2lvbiDlrp7njrBMYW5ndWFnZU1lc3NhZ2XmjqXlj6PvvIzmlrnkvr/kuablhplcbiAgcHVibGljIHllczogc3RyaW5nO1xuICBwdWJsaWMgbm86IHN0cmluZztcbiAgcHVibGljIHVuc2F2ZU5vdGlmeVRpdGxlOiBzdHJpbmc7XG4gIHB1YmxpYyBjbGllbnROb3RpZnlUaXRsZTogc3RyaW5nO1xuICBwdWJsaWMgc2VydmVyTm90aWZ5VGl0bGU6IHN0cmluZztcbiAgcHVibGljIGNhbmNlbEFwcHJvdmVTdWNjZXNzOiBzdHJpbmc7XG4gIHB1YmxpYyBjYW5jZWxBcHByb3ZlRmFpbGVkOiBzdHJpbmc7XG4gIHB1YmxpYyB1bmFsbG93RW1wdHlQcm9jZXNzSW5zdGFuY2VOYW1lOiBzdHJpbmc7XG4gIHB1YmxpYyB1bmFsbG93RW1wdHlCaXpCaWxsSWQ6IHN0cmluZztcbiAgcHVibGljIHVuYWxsb3dFbXB0eUNoaWxkQml6QmlsbElkOiBzdHJpbmc7XG4gIHB1YmxpYyBiaXpEZWZLZXlSZXF1aXJlZDogc3RyaW5nO1xuICBwdWJsaWMgcHJvY0luc0lkUmVxdWlyZWQ6IHN0cmluZztcbiAgcHVibGljIGFkZENoaWxkRmFpbGVkOiBzdHJpbmc7XG4gIHB1YmxpYyBhZGRTaWJsaW5nRmFpbGVkOiBzdHJpbmc7XG4gIHB1YmxpYyBhZGRTdWJDaGlsZEZhaWxlZDogc3RyaW5nO1xuICBwdWJsaWMgYWRkU3ViU2libGluZ0ZhaWxlZDogc3RyaW5nO1xuICBwdWJsaWMgZGVsZXRlRmFpbGVkOiBzdHJpbmc7XG4gIHB1YmxpYyBtdWx0aVNhdmVGYWlsZWQ6IHN0cmluZztcbiAgcHVibGljIGFwcGVuZEZhaWxlZDogc3RyaW5nO1xuICBwdWJsaWMgcXVlcnlGYWlsZWQ6IHN0cmluZztcbiAgcHVibGljIGNhbmNlbEZhaWxlZDogc3RyaW5nO1xuICBwdWJsaWMgdXBkYXRlRmFpbGVkOiBzdHJpbmc7XG4gIHB1YmxpYyBhZGRGYWlsZWQ6IHN0cmluZztcbiAgcHVibGljIGxvYWRGYWlsZWQ6IHN0cmluZztcbiAgcHVibGljIHNhdmVTdWNjZXNzOiBzdHJpbmc7XG4gIHB1YmxpYyBzYXZlRmFpbGVkOiBzdHJpbmc7XG4gIHB1YmxpYyBkZWxldGVTdWNjZXNzOiBzdHJpbmc7XG4gIHB1YmxpYyBkZWxldGVGYWlsZDogc3RyaW5nO1xuICBwdWJsaWMgY29uZmlybURlbGV0aW9uOiBzdHJpbmc7XG4gIHB1YmxpYyBzdWJtaXRTdWNjZXNzOiBzdHJpbmc7XG4gIHB1YmxpYyBzdWJtaXRGYWlsZDogc3RyaW5nO1xuICBwdWJsaWMgbm90aWZ5VGl0bGU6IHN0cmluZztcbiAgcHVibGljIGh0dHBFcnJvcjogc3RyaW5nO1xuICBwdWJsaWMgZ3JpZERhdGFOb3RTYXZlOiBzdHJpbmc7XG4gIHB1YmxpYyBleGl0V2l0aG91dFNhdmU6IHN0cmluZztcbiAgcHVibGljIG5vdFN1cHBvcnRNZW51VHlwZTogc3RyaW5nO1xuICBwdWJsaWMgY2FuY2VsV2l0aG91dFNhdmU6IHN0cmluZztcbiAgcHVibGljIHBsc1NlbGVjdERlbGV0ZURhdGE6IHN0cmluZztcbiAgcHVibGljIGVycm9ySGllcmFyY2h5S2V5OiBzdHJpbmc7XG4gIHB1YmxpYyBwbHNTZWxlY3RQYXJlbnROb2RlOiBzdHJpbmc7XG4gIHB1YmxpYyBkZWxldGVDaGlsZEZpcnN0OiBzdHJpbmc7XG4gIHB1YmxpYyBpbmNvcnJlY3RIaWVyYXJjaHlDb25maWc6IHN0cmluZztcbiAgcHVibGljIG9wZXJhdGlvbkZhaWxlZDogc3RyaW5nO1xuICBwdWJsaWMgcGxzU2VsZWN0RWRpdERhdGE6IHN0cmluZztcbiAgcHVibGljIHBsc1NlbGVjdFZpZXdEYXRhOiBzdHJpbmc7XG4gIHB1YmxpYyBwbHNVcGxvYWRGaXJzdDogc3RyaW5nO1xuICBwdWJsaWMgZGVmYXVsdERpYWxvZ1RpdGxlOiBzdHJpbmc7XG4gIHB1YmxpYyBjaGFuZ2VUb0ZpcnN0OiBzdHJpbmc7XG4gIHB1YmxpYyBjaGFuZ2VUb0xhc3Q6IHN0cmluZztcbiAgcHVibGljIG5vUHJvY2Vzc0luc3RhbmNlSWQ6IHN0cmluZztcbiAgcHVibGljIG5vRGF0YUV4aXN0OiBzdHJpbmc7XG4gIHB1YmxpYyBub0F0dGFjaG1lbnQ6IHN0cmluZztcbiAgcHVibGljIGNvbmZpcm06IHN0cmluZztcbiAgcHVibGljIGNhbmNlbDogc3RyaW5nO1xuICBwdWJsaWMgcGxzU2VsZWN0Q29weURhdGE6IHN0cmluZztcbiAgcHVibGljIGNvcHlGaWVsZHNSZXF1aXJlZDogc3RyaW5nO1xuICBwdWJsaWMgcGF0aElzUmVxdWlyZWQ6IHN0cmluZztcbiAgcHVibGljIHByb3BzSXNFbXB0eTogc3RyaW5nO1xuICBwdWJsaWMgaGlzdG9yeUF0dGFjaG1lbnQ6IHN0cmluZztcbiAgcHVibGljIHBsc1NlbGVjdERvd25sb2FkQXR0OiBzdHJpbmc7XG4gIHB1YmxpYyBub0Rvd25sb2FkQXR0OiBzdHJpbmc7XG4gIHB1YmxpYyBwbHNDaGVja0JhdGNoRWRpdFJvd3M6IHN0cmluZztcbiAgcHVibGljIHBsc1NlbGVjdERldGFpbEZvcm1EYXRhOiBzdHJpbmc7XG4gIHB1YmxpYyBkYXRhQW5kU3RhdGVDaGFuZ2VkOiBzdHJpbmc7XG4gIHB1YmxpYyBkYXRhQ2hhbmdlZDogc3RyaW5nO1xuICBwdWJsaWMgc3RhdGVDaGFuZ2VkOiBzdHJpbmc7XG4gIHB1YmxpYyBkZWZhdWx0U3RhdGVOYW1lOiBzdHJpbmc7XG4gIHB1YmxpYyBjb3B5OiBzdHJpbmc7XG4gIHB1YmxpYyBjb3B5U3VjY2Vzczogc3RyaW5nO1xuICBwdWJsaWMgY29weUZhaWxlZDogc3RyaW5nO1xuICBwdWJsaWMgcm9nZXI6IHN0cmluZztcbiAgcHVibGljIGFwcE9yRnVuY0lkUmVxdWlyZWQ6IHN0cmluZztcbiAgcHVibGljIHRhYmxlQ2FuTm90RW1wdHk6IHN0cmluZztcbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8qKlxuICAgKiDlvZPliY3or63oqIBcbiAgICovXG4gIHByb3RlY3RlZCBsYW5ndWFnZSA9ICd6aC1DSFMnO1xuXG4gIC8qKlxuICAgKiDlvZPliY3or63oqIDljIVcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgbGFuZ3VhZ2VNZXNzYWdlKCk6IExhbmd1YWdlTWVzc2FnZSB7XG4gICAgcmV0dXJuIExhbmd1YWdlTWVzc2FnZUZhY3RvcnkuY3JlYXRlKHRoaXMubGFuZ3VhZ2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIOaehOmAoOWHveaVsFxuICAgKi9cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChMT0NBTEVfSUQpIGxvY2FsZUlkPzogc3RyaW5nKSB7XG4gICAgdGhpcy5sYW5ndWFnZSA9IGxvY2FsZUlkIHx8ICd6aC1DSFMnO1xuICAgIHRoaXMuZXh0ZW5kUHJvcGVydGllcygpO1xuICAgIExhbmd1YWdlU2VydmljZS5pbm5lckluc3RhbmNlID0gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5blrp7kvotcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XG4gICAgaWYgKHRoaXMuaW5uZXJJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5uZXJJbnN0YW5jZTtcbiAgICB9XG4gICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgTGFuZ3VhZ2VTZXJ2aWNlKCd6aC1DSFMnKTtcbiAgICBMYW5ndWFnZVNlcnZpY2UuaW5uZXJJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmianlsZXlsZ7mgKdcbiAgICovXG4gIHByaXZhdGUgZXh0ZW5kUHJvcGVydGllcygpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLmxhbmd1YWdlTWVzc2FnZSkuZm9yRWFjaCgocHJvcE5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHByb3BOYW1lLCB7XG4gICAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLmxhbmd1YWdlTWVzc2FnZVtwcm9wTmFtZV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IExhbmd1YWdlU2VydmljZSB9O1xuIl19