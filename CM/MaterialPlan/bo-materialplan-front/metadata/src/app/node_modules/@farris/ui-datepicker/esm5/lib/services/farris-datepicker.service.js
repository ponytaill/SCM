/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PX, EMPTY_STR } from '../constants/constants';
import { Year } from '../enums/year.enum';
import { UtilService } from './farris-datepicker.util.service';
var DatePickerService = /** @class */ (function () {
    function DatePickerService(opts) {
        this._mouseWheelHandle = null;
        this._mouseScrollHandle = null;
        this.opts = opts;
        this.utilService = new UtilService();
    }
    /**
     * @param {?} opts
     * @param {?} defaultOpts
     * @return {?}
     */
    DatePickerService.parseOptions = /**
     * @param {?} opts
     * @param {?} defaultOpts
     * @return {?}
     */
    function (opts, defaultOpts) {
        if (defaultOpts !== undefined) {
            Object.keys(defaultOpts).forEach((/**
             * @param {?} k
             * @return {?}
             */
            function (k) {
                if (defaultOpts[k] !== undefined && defaultOpts[k] !== '') {
                    ((/** @type {?} */ (opts)))[k] = defaultOpts[k];
                }
            }));
        }
        if (opts.minYear < Year.min) {
            opts.minYear = Year.min;
        }
        if (opts.maxYear > Year.max) {
            opts.maxYear = Year.max;
        }
        return opts;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DatePickerService.prototype.validate = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var dateRange = this.opts.dateRange;
        /** @type {?} */
        var valid = false;
        if (!dateRange) {
            /** @type {?} */
            var date = this.utilService.isDateValid(value, this.opts);
            valid = this.utilService.isInitializedDate(date);
        }
        else {
            /** @type {?} */
            var _dateRange = this.utilService.isDateValidDateRange(value, this.opts);
            var begin = _dateRange.begin, end = _dateRange.end;
            valid = this.utilService.isInitializedDate(begin) && this.utilService.isInitializedDate(end);
        }
        return valid;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DatePickerService.prototype.registerScrollEvent = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._mouseScrollHandle = fn;
        document.addEventListener('scroll', this._mouseScrollHandle);
    };
    /**
     * @return {?}
     */
    DatePickerService.prototype.removeMouseEvent = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var container = document.querySelector('.date-overlay-container');
        if (container) {
            container.removeEventListener('mousewheel', this._mouseWheelHandle);
        }
        document.removeEventListener('scroll', this._mouseScrollHandle);
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    DatePickerService.prototype.appendSelector = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        /** @type {?} */
        var container = document.querySelector('.date-overlay-container');
        if (container) {
            if (container.hasChildNodes()) {
                container.childNodes.forEach((/**
                 * @param {?} el
                 * @return {?}
                 */
                function (el) {
                    if (el !== elem) {
                        container.removeChild(el);
                    }
                }));
            }
        }
        else {
            container = document.createElement('div');
            container.classList.add('date-overlay-container');
            container.classList.add('overlay-container');
            document.body.appendChild(container);
        }
        container.addEventListener('mousewheel', this._mouseWheelHandle = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var target = (/** @type {?} */ (e.target));
            if (!target.closest('.calendar-time-picker-select')) {
                e.preventDefault();
            }
            return;
        }));
        container.appendChild(elem);
    };
    /**
     * @param {?} elem
     * @param {?=} calendarRef
     * @return {?}
     */
    DatePickerService.prototype.getSelectorPosition = /**
     * @param {?} elem
     * @param {?=} calendarRef
     * @return {?}
     */
    function (elem, calendarRef) {
        if (calendarRef === void 0) { calendarRef = null; }
        /** @type {?} */
        var top = 0;
        /** @type {?} */
        var left = 0;
        /** @type {?} */
        var _selectorHeight = 0;
        /** @type {?} */
        var _selectorWidth = 0;
        var _a = this.opts, selectorHeight = _a.selectorHeight, selectorWidth = _a.selectorWidth, showTime = _a.showTime, dateRange = _a.dateRange, showType = _a.showType, enableDynamic = _a.enableDynamic, showPresent = _a.showPresent;
        /** @type {?} */
        var b = document.body.getBoundingClientRect();
        /** @type {?} */
        var e = elem.getBoundingClientRect();
        top = e.top - b.top;
        left = e.left - b.left;
        /** @type {?} */
        var position = 'bottom';
        if (dateRange && showType !== 4) {
            _selectorWidth = this.getSelectorDimension(selectorWidth) * 2;
        }
        else {
            _selectorWidth = this.getSelectorDimension(selectorWidth);
        }
        _selectorHeight = this.getSelectorDimension(selectorHeight);
        // if (showTime || enableDynamic) {
        //     top = top - 6;
        // }
        top = top - 6;
        if ((showPresent && (!dateRange || showType === 4)) || showTime || enableDynamic) {
            _selectorHeight += 45;
        }
        if (top + elem.offsetHeight + _selectorHeight > window.innerHeight && top - _selectorHeight - 2 > 0) {
            top = top - _selectorHeight - 2;
            position = 'top';
        }
        else {
            top = top + elem.offsetHeight + 2;
        }
        if (window.innerHeight - top < _selectorHeight) {
            top = top - (_selectorHeight - (window.innerHeight - e.top - e.height - 15));
            if (calendarRef) {
                /** @type {?} */
                var calendarElem = calendarRef.location.nativeElement;
                /** @type {?} */
                var arrow = calendarElem.querySelector('.arrow');
                if (arrow) {
                    arrow.style.display = 'none';
                }
            }
        }
        if (left + _selectorWidth > b.width) {
            left = b.width - _selectorWidth - 15;
        }
        left = left > 0 ? left : 0;
        /** @type {?} */
        var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
        top -= scrollTop;
        return { top: top, left: left, position: position };
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    DatePickerService.prototype.getSelectorDimension = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return Number(value.replace(PX, EMPTY_STR));
    };
    return DatePickerService;
}());
export { DatePickerService };
if (false) {
    /** @type {?} */
    DatePickerService.prototype.opts;
    /** @type {?} */
    DatePickerService.prototype.utilService;
    /**
     * @type {?}
     * @private
     */
    DatePickerService.prototype._mouseWheelHandle;
    /**
     * @type {?}
     * @private
     */
    DatePickerService.prototype._mouseScrollHandle;
}
//# sourceMappingURL=data:application/json;base64,