/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, EventEmitter, HostBinding, Injector, Input, Output, ViewEncapsulation, HostListener, ViewChild, ElementRef } from '@angular/core';
import { LocaleService } from '@farris/ui-locale';
import { MessagerService } from '@farris/ui-messager';
import { getMultilingualValue } from '../getValueWithLocaleId';
import { NotifyService } from '@farris/ui-notify';
var SimpleColumnsComponent = /** @class */ (function () {
    function SimpleColumnsComponent(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.enableScheme = false;
        this.seartTypes = [];
        /**
         * 所有列
         */
        this.columns = [];
        /**
         * 显示的列
         */
        this.fields = [];
        /**
         * 点击侧边样式以外的区域隐藏面板。默认为 true
         */
        this.clickToHidden = true;
        this.top = 0;
        this._schemeList = [];
        this.cls = 'f-datagrid-settings-simple-host';
        this.formatChange = new EventEmitter();
        this.fieldsChange = new EventEmitter();
        this.submit = new EventEmitter();
        this.closed = new EventEmitter();
        this.advanced = new EventEmitter();
        this.addNewScheme = new EventEmitter();
        this.showSchemeList = new EventEmitter();
        this.activeItemChange = new EventEmitter();
        this.schemeChanged = new EventEmitter();
        this.allCols = [];
        this.columnType = 'all';
        this.isEn = false;
        this.showSchemePanel = false;
        this.switchValue = false;
        // 当前方案
        this.currentSchemeItem = null;
        this.searchResultIsVisibleAll = false;
        this.defaultSchemeName = '系统预制';
        this.settings = {};
        this.localeSer = this.injector.get(LocaleService, null);
        this.messager = this.injector.get(MessagerService, null);
        this.notify = this.injector.get(NotifyService, null);
    }
    Object.defineProperty(SimpleColumnsComponent.prototype, "schemeList", {
        get: /**
         * @return {?}
         */
        function () {
            return this._schemeList;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            var _this = this;
            if (val && val.length) {
                val.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    n['_title_'] = getMultilingualValue(JSON.parse(n.name), _this.localeSer.localeId);
                }));
            }
            this._schemeList = val || [];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        /** @type {?} */
        var clsname = $event.target['className'] || '';
        if (clsname.indexOf('f-datagrid-settings-simple-host') > -1) {
            // 隐藏侧边栏；
            if (this.clickToHidden) {
                this.close();
            }
        }
        this.showSchemePanel = false;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onEscKeydown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        if (!document.querySelector('modal-container')) {
            this.close();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onEnterKeydown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        if (!document.querySelector('modal-container')) {
            this.onSubmitClick();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onControlGKeydown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event.ctrlKey && !document.querySelector('modal-container')) {
            $event.preventDefault();
            $event.stopPropagation();
            if ($event.key.toLowerCase() === 'g') {
                this.showAdvanced($event);
            }
            else if ($event.key.toLowerCase() === 'r') {
                this.onSettingReset();
            }
            else if ($event.key.toLowerCase() === 's') {
                this.searchInput.nativeElement.focus();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    SimpleColumnsComponent.prototype.getCurrentSchemeSettings = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.currentSchemeItem && this.currentSchemeItem.queryConditionString) {
            /** @type {?} */
            var schemeSettings = JSON.parse(this.currentSchemeItem.queryConditionString);
            return (/** @type {?} */ (schemeSettings[this.localeSer.localeId]));
        }
        return null;
    };
    /**
     * @return {?}
     */
    SimpleColumnsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.allCols = this.columns[0];
        if (this.gridInstance.enableScheme && this.currentSchemeItem) {
            this.settings = this.getCurrentSchemeSettings() || {};
        }
        if (this.settings && this.settings.viewColumns && this.settings.viewColumns.length) {
            this.fields = this.settings.viewColumns;
            this.dirtySettings(true);
        }
        else {
            this.fields = this.getViewColumns();
        }
        this.container.nativeElement.focus();
        this.defaultSchemeName = this.localeSer.getValue('datagrid-scheme.syspreset') || this.gridInstance.defaultSchemeName;
    };
    /**
     * @private
     * @return {?}
     */
    SimpleColumnsComponent.prototype.getViewColumns = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // 多表头
        /** @type {?} */
        var visibleCls = [];
        if (this.columns.length > 1) {
            this.columns.forEach((/**
             * @param {?} cols
             * @return {?}
             */
            function (cols) {
                visibleCls = visibleCls.concat(_this._getViewColumns(cols));
            }));
        }
        else {
            visibleCls = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return (n.visible || n.visible === undefined); }));
        }
        return visibleCls.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field; }));
    };
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    SimpleColumnsComponent.prototype._getViewColumns = /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    function (cols) {
        return cols.filter((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return !c.colspan && (c.visible || c.visible === undefined); }));
    };
    // 根据列的类型进行筛选过滤，
    // all 所有列
    // visible 可见列
    // hidden 隐藏列
    // group 分组列
    // 根据列的类型进行筛选过滤，
    // all 所有列
    // visible 可见列
    // hidden 隐藏列
    // group 分组列
    /**
     * @param {?=} searchWords
     * @return {?}
     */
    SimpleColumnsComponent.prototype.filterColumns = 
    // 根据列的类型进行筛选过滤，
    // all 所有列
    // visible 可见列
    // hidden 隐藏列
    // group 分组列
    /**
     * @param {?=} searchWords
     * @return {?}
     */
    function (searchWords) {
        var _this = this;
        if (searchWords === void 0) { searchWords = ''; }
        /** @type {?} */
        var cols = [];
        if (this.switchValue) {
            cols = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return _this.fields.indexOf(n.field) > -1; }));
        }
        else {
            cols = this.columns[0];
        }
        if (searchWords) {
            cols = cols.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.title.toLowerCase().indexOf(searchWords.toLowerCase()) > -1; }));
        }
        this.allCols = cols;
        this.searchResultIsVisibleAll = this.allCols.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.visible; })).length === this.allCols.length;
    };
    /**
     * @private
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onFieldsChanged = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.gridInstance.enableScheme) {
            this.fieldsChange.emit(this.fields);
        }
    };
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onDblClick = /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    function ($event, col) {
        this.onCheckboxClick($event, col);
    };
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onCheckboxClick = /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    function ($event, col) {
        var _this = this;
        $event.stopPropagation();
        this.showSchemePanel = false;
        /** @type {?} */
        var checked = false;
        /** @type {?} */
        var index = this.fields.indexOf(col.field);
        if (index === -1) {
            this.fields.push(col.field);
            checked = true;
        }
        else {
            this.fields.splice(index, 1);
            checked = false;
        }
        this.columns[0].forEach((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            f.visible = _this.fields.indexOf(f.field) > -1;
        }));
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.visible; })).map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field; }));
        this.searchResultIsVisibleAll = this.allCols.length === this.fields.length;
        this.dirtySettings(true);
        this.onFieldsChanged();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.searchColumn = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var txt = $event.target.value;
        this.filterColumns(txt);
    };
    /**
     * @param {?} fieldInfo
     * @param {?} txt
     * @param {?} ulElRef
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onFieldDrop = /**
     * @param {?} fieldInfo
     * @param {?} txt
     * @param {?} ulElRef
     * @return {?}
     */
    function (fieldInfo, txt, ulElRef) {
        var _a;
        this.showSchemePanel = false;
        var removedIndex = fieldInfo.removedIndex, addedIndex = fieldInfo.addedIndex;
        /** @type {?} */
        var moveItem = this.allCols[removedIndex];
        /** @type {?} */
        var targetItem = this.allCols[addedIndex];
        /** @type {?} */
        var moveItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field === moveItem.field; }));
        /** @type {?} */
        var targetItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field === targetItem.field; }));
        /** @type {?} */
        var removedItem = this.columns[0].splice(moveItemIndex, 1);
        (_a = this.columns[0]).splice.apply(_a, tslib_1.__spread([targetItemIndex, 0], removedItem));
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.visible; })).map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field; }));
        this.onFieldsChanged();
        this.filterColumns(txt);
    };
    /**
     * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
     */
    /**
     * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
     * @private
     * @return {?}
     */
    SimpleColumnsComponent.prototype.getCheckAllState = /**
     * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
     * @private
     * @return {?}
     */
    function () {
        if (!this.searchInput.nativeElement.value) {
            if (this.fields.length === 0) {
                return 0;
            }
            else {
                if (this.fields.length === this.columns[0].length) {
                    return 1;
                }
                return 2;
            }
        }
        else {
            /** @type {?} */
            var visibleLen = this.allCols.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible; })).length;
            if (visibleLen === this.allCols.length) {
                return 1;
            }
            else {
                if (visibleLen < this.allCols.length) {
                    if (visibleLen === 0) {
                        return 0;
                    }
                    return 1;
                }
            }
        }
    };
    // 全选
    // 全选
    /**
     * @param {?} $event
     * @param {?} txt
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onCheckAllClick = 
    // 全选
    /**
     * @param {?} $event
     * @param {?} txt
     * @return {?}
     */
    function ($event, txt) {
        var _this = this;
        $event.stopPropagation();
        this.showSchemePanel = false;
        /** @type {?} */
        var state = this.getCheckAllState();
        /** @type {?} */
        var isCheckAll = state === 0 || state === 2;
        if (!txt) {
            this.columns[0].forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible = isCheckAll; }));
        }
        else {
            this.columns[0].forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                /** @type {?} */
                var item = _this.allCols.find((/**
                 * @param {?} a
                 * @return {?}
                 */
                function (a) { return n.field == a.field; }));
                if (item) {
                    n.visible = isCheckAll;
                    item.visible = isCheckAll;
                }
            }));
        }
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.visible; })).map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field; }));
        this.searchResultIsVisibleAll = this.allCols.length === this.fields.length;
        this.dirtySettings(true);
        this.onFieldsChanged();
        this.filterColumns(txt);
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.close = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.closed.emit();
    };
    // 打开高级设置窗口
    // 打开高级设置窗口
    /**
     * @param {?} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.showAdvanced = 
    // 打开高级设置窗口
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.close($event);
        this.advanced.emit({ viewFields: this.fields });
    };
    // 恢复默认
    // 恢复默认
    /**
     * @param {?=} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onSettingReset = 
    // 恢复默认
    /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if ($event) {
            $event.stopPropagation();
        }
        this.showSchemePanel = false;
        /** @type {?} */
        var restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '您确定要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText, 2035).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t) {
                _this.reset2Default();
                _this.dirtySettings(true);
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    SimpleColumnsComponent.prototype.reset2Default = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var options = this.gridInstance.dfs['_state'].initialOptions;
        if (options.columnFields && options.columnFields.length) {
            /** @type {?} */
            var newColumns_1 = [];
            options.columnFields.forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                if (c.field !== '_datagrid-setting-control_') {
                    /** @type {?} */
                    var col = _this.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === c.field; }));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = tslib_1.__assign({}, c.footer || {});
                        col.groupFooter = tslib_1.__assign({}, c.groupFooter || {});
                        newColumns_1.push(col);
                    }
                }
            }));
            this.columns = [newColumns_1];
        }
        this.allCols = this.columns[0];
        this.settings = {};
        this.fields = this.getViewColumns();
        this.settings.viewColumns = this.fields;
        this.settings.columnFormat = tslib_1.__spread(this.columns[0]);
        if (options.sort) {
            /** @type {?} */
            var sortOrders = options.sort.sortOrder ? options.sort.sortOrder.split(',') : [];
            /** @type {?} */
            var sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];
            this.settings.sortInfo = { sortName: sortNames, sortOrder: sortOrders };
        }
        else {
            this.settings.sortInfo = {};
        }
        this.settings.groupField = options.groupField ? options.groupField.split(',') : [];
    };
    // 确定按钮点击事件
    // 确定按钮点击事件
    /**
     * @param {?=} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onSubmitClick = 
    // 确定按钮点击事件
    /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        if ($event) {
            $event.stopPropagation();
        }
        if (!this.fields || !this.fields.length) {
            this.notify.warning('请选择要显示的字段');
            return;
        }
        this.showSchemePanel = false;
        this.settings.viewColumns = this.fields;
        if (!this.enableScheme || !this.currentSchemeItem) {
            if (!this.settings.columnFormat) {
                this.settings.columnFormat = tslib_1.__spread(this.columns[0]);
            }
            if (!this.settings.sortInfo) {
                this.settings.sortInfo = {
                    sortName: this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [],
                    sortOrder: this.gridInstance.sortOrder ? this.gridInstance.sortOrder.split(',') : []
                };
            }
            if (this.settings.groupField === undefined) {
                this.settings.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];
            }
        }
        else {
            /** @type {?} */
            var _settings = this.getCurrentSchemeSettings();
            if (_settings) {
                this.settings = Object.assign(_settings || {}, this.settings);
            }
        }
        // this.activeItemChange.emit(this.activeSchemeItem);
        this.submit.emit({ content: this.settings, close: this.close.bind(this), target: this.btnOk.nativeElement, currentScheme: this.currentSchemeItem });
    };
    /**
     * @return {?}
     */
    SimpleColumnsComponent.prototype.collectSettings = /**
     * @return {?}
     */
    function () {
        this.settings.viewColumns = this.fields;
        if (!this.settings.columnFormat) {
            this.settings.columnFormat = tslib_1.__spread(this.columns[0]);
        }
        if (!this.settings.sortInfo) {
            this.settings.sortInfo = {
                sortName: this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [],
                sortOrder: this.gridInstance.sortOrder ? this.gridInstance.sortOrder.split(',') : []
            };
        }
        if (this.settings.groupField === undefined) {
            this.settings.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];
        }
        return tslib_1.__assign({}, this.settings);
    };
    // 显示下拉方案列表
    // 显示下拉方案列表
    /**
     * @param {?} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onChooseScheme = 
    // 显示下拉方案列表
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if ($event) {
            $event.stopPropagation();
        }
        this.showSchemePanel = !this.showSchemePanel;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.schemeitemsEleRef && _this.currentSchemeItem) {
                /** @type {?} */
                var itemEl = _this.schemeitemsEleRef.nativeElement.querySelector("#schemeitem_" + _this.currentSchemeItem.id);
                if (itemEl) {
                    if (itemEl.scrollIntoViewIfNeeded) {
                        itemEl.scrollIntoViewIfNeeded();
                    }
                    else {
                        itemEl.scrollIntoView();
                    }
                }
            }
        }));
    };
    // 仅显示可见列
    // 仅显示可见列
    /**
     * @param {?} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onlySeeVisibleColumns = 
    // 仅显示可见列
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.switchValue = $event;
        this.filterColumns();
    };
    /**
     * @return {?}
     */
    SimpleColumnsComponent.prototype.refresh = /**
     * @return {?}
     */
    function () {
        if (!this.cd['destroyed']) {
            this.cd.detectChanges();
        }
    };
    /**
     * @return {?}
     */
    SimpleColumnsComponent.prototype.hidePanel = /**
     * @return {?}
     */
    function () {
        this.showSchemePanel = false;
        this.refresh();
    };
    // 新增方案
    // 新增方案
    /**
     * @param {?} $event
     * @param {?=} saveas
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onNewSchemeClick = 
    // 新增方案
    /**
     * @param {?} $event
     * @param {?=} saveas
     * @return {?}
     */
    function ($event, saveas) {
        if (saveas === void 0) { saveas = 'new'; }
        if ($event) {
            $event.stopPropagation();
        }
        this.hidePanel();
        this.addNewScheme.emit({ type: saveas || 'new' });
    };
    // 显示方案列表管理窗口
    // 显示方案列表管理窗口
    /**
     * @param {?} $event
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onShowSchemeList = 
    // 显示方案列表管理窗口
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.hidePanel();
        this.showSchemeList.emit();
    };
    // 方案点击
    // 方案点击
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    SimpleColumnsComponent.prototype.onSchemeItemClick = 
    // 方案点击
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    function ($event, item) {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.currentSchemeItem = item;
            _this.showSchemePanel = false;
            /** @type {?} */
            var schemeSettings = null;
            if (item && item.queryConditionString) {
                schemeSettings = JSON.parse(item.queryConditionString);
                schemeSettings = schemeSettings[_this.localeSer.localeId];
                if (!schemeSettings) {
                    _this.reset2Default();
                }
                else {
                    _this.settings = schemeSettings;
                    _this.fields = schemeSettings.viewColumns;
                    _this.columns[0].forEach((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) {
                        f.visible = _this.fields.indexOf(f.field) > -1;
                    }));
                }
            }
            else {
                _this.reset2Default();
            }
            _this.schemeChanged.emit(item);
            _this.refresh();
        }));
    };
    /**
     * @param {?} flag
     * @return {?}
     */
    SimpleColumnsComponent.prototype.dirtySettings = /**
     * @param {?} flag
     * @return {?}
     */
    function (flag) {
        // this.isChanged = flag;
    };
    /**
     * @param {?} $event
     * @param {?} input
     * @return {?}
     */
    SimpleColumnsComponent.prototype.clearSearch = /**
     * @param {?} $event
     * @param {?} input
     * @return {?}
     */
    function ($event, input) {
        if (input && input.value) {
            this.filterColumns('');
            input.value = '';
        }
    };
    SimpleColumnsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-settings-simple',
                    template: "<div class=\"d-flex flex-column f-datagrid-settings-simple\" tabindex=\"0\" #colcontainer\r\n    [style.top.px]=\"top\" [style.height]=\"'calc(100vh - ' +  top + 'px)'\" >\r\n\r\n    <div class=\"header d-flex\">\r\n        <div class=\"f-utils-fill title d-flex flex-row\"> {{ 'datagrid.settings.simple.title' | locale }} \r\n            <button #btnSchemeName class=\"btn ml-3 px-2 scheme-name d-flex flex-row\"  *ngIf=\"enableScheme\" (click)=\"onChooseScheme($event)\">\r\n                <!-- <span *ngIf=\"isChanged\">*</span> -->\r\n                <span>{{ currentSchemeItem? currentSchemeItem._title_ : defaultSchemeName }}</span>\r\n                <span class=\"f-icon f-icon-arrow-s ml-2\" style=\"font-size: 12px;\"></span>\r\n            </button>\r\n        </div>\r\n        <div class=\"closed\" (click)=\"close($event)\">\r\n            <span class=\"f-icon f-icon-close\" style=\"font-size: 20px;\"></span>\r\n        </div>\r\n    </div>\r\n    <div class=\"scheme-manager-dropdown\" [style.display]=\"showSchemePanel? '': 'none'\" [style.left.px]=\"btnRef? btnRef.nativeElement.offsetLeft : 97\"  (click)=\"$event.stopPropagation()\">\r\n        <div class=\"f-utils-fill f-utils-flex-column m-2\">\r\n            <div class=\"pb-2\" style=\"max-height: calc(100vh - 300px);overflow: auto\">\r\n                <ul #schemeitems>\r\n                    <li class=\"scheme-manager__item\" [class.active]=\"!currentSchemeItem\" (click)=\"onSchemeItemClick($event, null)\"> \r\n                        <!-- <span *ngIf=\"isChanged && !activeSchemeItem\">*</span> -->\r\n                        {{'datagrid-scheme.syspreset' | locale}}\r\n                    </li>\r\n                    <li [attr.id]=\"'schemeitem_'+ item.id\" class=\"scheme-manager__item d-flex flex-row\" \r\n                        [class.active]=\"currentSchemeItem && currentSchemeItem?.id === item.id\"  \r\n                        *ngFor=\"let item of schemeList\" (click)=\"onSchemeItemClick($event, item)\" title=\"{{item._title_}}\">\r\n                        <!-- <span *ngIf=\"isChanged && activeSchemeItem?.id==item.id\">*</span> -->\r\n                        <span class=\"f-utils-fill mr-1\" style=\"text-overflow: ellipsis;\">{{item._title_}}</span>\r\n                        <span class=\"scheme-manager__label default\" *ngIf=\"item.isDefault\">{{'datagrid-scheme.isDefault' | locale}}</span>\r\n                        <span class=\"scheme-manager__label public\" *ngIf=\"item.type === 'public'\">{{'datagrid-scheme.isPublic' | locale}}</span>\r\n                        <span class=\"scheme-manager__label private\" *ngIf=\"!item.isDefault && item.type === 'private'\">{{'datagrid-scheme.isPrivate' | locale}}</span>\r\n                        <span class=\"scheme-manager__label org\" *ngIf=\"item.type === 'org'\">{{'datagrid-scheme.isOrg' | locale}}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div class=\"d-flex scheme-manager__button-add\">\r\n                <button (click)=\"onNewSchemeClick($event)\">\r\n                    <span class=\"f-icon f-icon-plus\"></span>{{'datagrid-scheme.newScheme' | locale}}\r\n                </button>\r\n            </div>\r\n\r\n            <div class=\"p-2 mt-2\">\r\n                <div class=\"btn-toolbar\" style=\"justify-content: flex-end;\">\r\n                    <button class=\"btn btn-link mr-3\" (click)=\"onShowSchemeList($event)\">{{'datagrid-scheme.mgrScheme' | locale}}</button>\r\n                    <button class=\"btn btn-primary mr-1\" (click)=\"onNewSchemeClick($event, 'saveas')\">{{'datagrid-scheme.saveas' | locale}} </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"f-utils-fill content d-flex flex-column\">\r\n        <div>\r\n            <div class=\"d-flex flex-row mb-2\" style=\"align-items: center;\">\r\n                <h5 class=\"count f-utils-fill m-0\" [innerHTML]=\"'datagrid.settings.simple.count' | locale | replaceX: fields.length\"></h5>\r\n                <div class=\"d-flex flex-row\">{{'datagrid-scheme.onlyshowcolumns' | locale}} \r\n                    <farris-switch style=\"position: relative;\r\n                    top: 2px;\r\n                    margin-left: 5px;\"\r\n                    id=\"only-visible-columns\"\r\n                    [square]=\"false\" [size]=\"'small'\"\r\n                    [ngModel]=\"switchValue\" \r\n                    (valueChange)=\"onlySeeVisibleColumns($event)\"\r\n                    ></farris-switch>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"tip\">\r\n                {{ 'datagrid.settings.simple.tip' | locale }}\r\n            </div>\r\n            <div class=\"input-group mb-2 scheme-manager__search-box\">\r\n                <input #inputWord type=\"text\" class=\"form-control\" placeholder=\"{{'datagrid.settings.searchPlaceholder' | locale}}\"\r\n                (input)=\"searchColumn($event)\" style=\"height: 26px;\">\r\n                <div  class=\"input-group-append\" style=\"cursor: pointer\">\r\n                    <span  class=\"fa f-icon-search\" [class.f-icon-close]=\"inputWord.value\" (click)=\"clearSearch($event, inputWord)\"></span>\r\n                </div>\r\n            </div>\r\n            \r\n\r\n            <div style=\"padding: 5px 0px;\">\r\n                <button class=\"btn btn-link \" style=\"height: 32px;padding-left: 4px;\" (click)=\"onCheckAllClick($event,inputWord.value)\">\r\n                    <span class=\"f-icon f-icon-minus-outline checkall\" [class.f-icon-checkbox]=\" inputWord.value ? !searchResultIsVisibleAll : !fields.length\"\r\n                        [class.f-icon-checkbox-checked]=\" searchInput.nativeElement.value ?  searchResultIsVisibleAll : fields.length && fields.length === allCols.length\"></span>\r\n                    {{ 'datagrid.settings.checkall' | locale }}\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <div style=\"overflow: auto;padding-right:3px\" class=\"f-utils-fill\">\r\n            <ul class=\"list-group list-group-flush\" #ul column-visible-drag (drop)=\"onFieldDrop($event, inputWord.value, ul)\">\r\n                <li class=\"list-group-item list-group-item-action smooth-dnd-draggable-wrapper format-setting-column\" *ngFor=\"let col of allCols\" \r\n                    (click)=\"onDblClick($event, col)\">\r\n                    <span class=\"f-icon checkbox\"\r\n                        [class.f-icon-checkbox-checked]=\"fields.length && fields.indexOf(col.field) > -1\"\r\n                        [class.f-icon-checkbox]=\"!fields.length || fields.indexOf(col.field) == -1\"\r\n                        (click)=\"onCheckboxClick($event, col)\"></span>\r\n                    {{ col.title}} \r\n\r\n                    <span class=\"f-icon f-icon-drag-vertical field-drag-handle\" *ngIf=\"!inputWord.value\"></span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n    </div>\r\n    <div class=\"footer\">\r\n\r\n        <div class=\"buttons\">\r\n            <button class=\"btn btn-link advanced\" (click)=\"showAdvanced($event)\">{{ 'datagrid.settings.advancedMode' | locale: '\u9AD8\u7EA7\u6A21\u5F0F' }}</button>\r\n            <button class=\"btn btn-link reset\" (click)=\"onSettingReset($event)\">{{ 'datagrid.settings.reset' | locale: '\u6062\u590D\u9ED8\u8BA4' }}</button>\r\n            <button class=\"btn btn-secondary cancel\"\r\n                (click)=\"close($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n            <button class=\"btn btn-primary ok\" #okbtn\r\n                (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    SimpleColumnsComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef }
    ]; };
    SimpleColumnsComponent.propDecorators = {
        enableScheme: [{ type: Input }],
        seartTypes: [{ type: Input }],
        columns: [{ type: Input }],
        fields: [{ type: Input }],
        clickToHidden: [{ type: Input }],
        top: [{ type: Input }],
        schemeList: [{ type: Input }],
        cls: [{ type: HostBinding, args: ['class',] }],
        container: [{ type: ViewChild, args: ['colcontainer',] }],
        btnOk: [{ type: ViewChild, args: ['okbtn',] }],
        searchInput: [{ type: ViewChild, args: ['inputWord',] }],
        schemeitemsEleRef: [{ type: ViewChild, args: ['schemeitems',] }],
        btnRef: [{ type: ViewChild, args: ['btnSchemeName',] }],
        formatChange: [{ type: Output }],
        fieldsChange: [{ type: Output }],
        submit: [{ type: Output }],
        closed: [{ type: Output }],
        advanced: [{ type: Output }],
        addNewScheme: [{ type: Output }],
        showSchemeList: [{ type: Output }],
        activeItemChange: [{ type: Output }],
        schemeChanged: [{ type: Output }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
        onEscKeydown: [{ type: HostListener, args: ['window:keydown.esc', ['$event'],] }],
        onEnterKeydown: [{ type: HostListener, args: ['window:keydown.enter', ['$event'],] }],
        onControlGKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return SimpleColumnsComponent;
}());
export { SimpleColumnsComponent };
if (false) {
    /** @type {?} */
    SimpleColumnsComponent.prototype.enableScheme;
    /** @type {?} */
    SimpleColumnsComponent.prototype.seartTypes;
    /**
     * 所有列
     * @type {?}
     */
    SimpleColumnsComponent.prototype.columns;
    /**
     * 显示的列
     * @type {?}
     */
    SimpleColumnsComponent.prototype.fields;
    /**
     * 点击侧边样式以外的区域隐藏面板。默认为 true
     * @type {?}
     */
    SimpleColumnsComponent.prototype.clickToHidden;
    /** @type {?} */
    SimpleColumnsComponent.prototype.top;
    /**
     * @type {?}
     * @private
     */
    SimpleColumnsComponent.prototype._schemeList;
    /** @type {?} */
    SimpleColumnsComponent.prototype.cls;
    /** @type {?} */
    SimpleColumnsComponent.prototype.container;
    /** @type {?} */
    SimpleColumnsComponent.prototype.btnOk;
    /** @type {?} */
    SimpleColumnsComponent.prototype.searchInput;
    /** @type {?} */
    SimpleColumnsComponent.prototype.schemeitemsEleRef;
    /** @type {?} */
    SimpleColumnsComponent.prototype.btnRef;
    /** @type {?} */
    SimpleColumnsComponent.prototype.formatChange;
    /** @type {?} */
    SimpleColumnsComponent.prototype.fieldsChange;
    /** @type {?} */
    SimpleColumnsComponent.prototype.submit;
    /** @type {?} */
    SimpleColumnsComponent.prototype.closed;
    /** @type {?} */
    SimpleColumnsComponent.prototype.advanced;
    /** @type {?} */
    SimpleColumnsComponent.prototype.addNewScheme;
    /** @type {?} */
    SimpleColumnsComponent.prototype.showSchemeList;
    /** @type {?} */
    SimpleColumnsComponent.prototype.activeItemChange;
    /** @type {?} */
    SimpleColumnsComponent.prototype.schemeChanged;
    /** @type {?} */
    SimpleColumnsComponent.prototype.allCols;
    /** @type {?} */
    SimpleColumnsComponent.prototype.columnType;
    /** @type {?} */
    SimpleColumnsComponent.prototype.gridInstance;
    /** @type {?} */
    SimpleColumnsComponent.prototype.localeSer;
    /** @type {?} */
    SimpleColumnsComponent.prototype.isEn;
    /** @type {?} */
    SimpleColumnsComponent.prototype.showSchemePanel;
    /** @type {?} */
    SimpleColumnsComponent.prototype.switchValue;
    /** @type {?} */
    SimpleColumnsComponent.prototype.currentSchemeItem;
    /** @type {?} */
    SimpleColumnsComponent.prototype.searchResultIsVisibleAll;
    /** @type {?} */
    SimpleColumnsComponent.prototype.defaultSchemeName;
    /**
     * @type {?}
     * @private
     */
    SimpleColumnsComponent.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    SimpleColumnsComponent.prototype.notify;
    /** @type {?} */
    SimpleColumnsComponent.prototype.settings;
    /**
     * @type {?}
     * @private
     */
    SimpleColumnsComponent.prototype.injector;
    /** @type {?} */
    SimpleColumnsComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,