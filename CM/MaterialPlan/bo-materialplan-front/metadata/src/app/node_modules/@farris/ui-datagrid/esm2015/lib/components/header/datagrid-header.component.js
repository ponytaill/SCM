/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
* @Author: 疯狂秀才(Lucas Huang)
* @Date: 2019-08-06 07:43:53
* @LastEditors: 疯狂秀才(Lucas Huang)
* @LastEditTime: 2019-11-20 20:14:11
* @QQ: 1055818239
* @Version: v0.0.1
*/
import { ComponentFactoryResolver, ViewContainerRef } from '@angular/core';
import { Component, Input, Renderer2, ViewChild, ElementRef, ViewEncapsulation, Injector, ChangeDetectorRef, Directive, Optional, NgZone } from '@angular/core';
import { DatagridService } from '../../services/datagrid.service';
import { SCROLL_X_ACTION, FIXED_LEFT_SHADOW_CLS, SCROLL_X_REACH_START_ACTION, FIXED_RIGHT_SHADOW_CLS, SCROLL_X_REACH_END_ACTION, GRID_FILTER_ROW } from '../../types/constant';
import { DatagridComponent } from '../../datagrid.component';
import { DatagridFacadeService } from '../../services/datagrid-facade.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class DatagridHeaderComponent {
    /**
     * @param {?} render2
     * @param {?} injector
     * @param {?} dg
     * @param {?} ngZone
     */
    constructor(render2, injector, dg, ngZone) {
        this.render2 = render2;
        this.injector = injector;
        this.dg = dg;
        this.ngZone = ngZone;
        this.height = 35;
        this.columns = [];
        this.enableDragColumn = false;
        this.wrapHeader = false;
        this.enableFilterRow = false;
        this.scrollbarMode = 'auto';
        /**
         * 启用性能优化版
         */
        this.fast = false;
        this.ro = null;
        this.rightFixedColumnWidth = 0;
        this.normalColumnWidth = 0;
        this.showOverlay = false;
        this.disableSort = false;
        this.scrollX = 0;
        this.showShadowCls = false;
        this.top = 0;
        this.hasFixedLeftColumns = false;
        this.destroy$ = new Subject();
        this.lineNumberTitle = '序号';
        this.dfs = this.injector.get(DatagridFacadeService);
        this.dgs = this.injector.get(DatagridService);
        this.cfr = this.injector.get(ComponentFactoryResolver);
        this.cd = this.injector.get(ChangeDetectorRef);
        this.el = this.injector.get(ElementRef);
        this.dfrs = this.dg.clientFilterService;
        this.dgs.scorll$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (d.type === SCROLL_X_ACTION || d.type === SCROLL_X_REACH_END_ACTION || d.type === SCROLL_X_REACH_START_ACTION) {
                this.scrollX = d.x;
                this.render2.setStyle(this.headerColumnsTable.nativeElement, 'transform', `translate3d(-${d.x}px, 0px, 0px)`);
                if (!this.dg.groupRows) {
                    if (this.fixedLeft) {
                        if (d.x) {
                            this.render2.addClass(this.fixedLeft.nativeElement, FIXED_LEFT_SHADOW_CLS);
                        }
                        else {
                            this.render2.removeClass(this.fixedLeft.nativeElement, FIXED_LEFT_SHADOW_CLS);
                        }
                    }
                }
            }
            if (d.type === SCROLL_X_REACH_START_ACTION) {
                if (this.fixedLeft) {
                    this.render2.removeClass(this.fixedLeft.nativeElement, FIXED_LEFT_SHADOW_CLS);
                }
            }
        }));
        this.dgs.showFixedShadow.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.fixedRight) {
                this.setFixedColumnPosition(e.showRightShadow, e.x);
            }
        }));
        this.dgs.disableHeader.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} flag
         * @return {?}
         */
        (flag) => {
            this.showOverlay = flag;
            this.disableSort = flag;
            this.cd.detectChanges();
        }));
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set chkAll(v) {
        this._chkall = v;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set fr(val) {
        if (val) {
            this.fixedRight = val;
        }
    }
    // 行号 、 复选框，在多表头下的合并行数
    /**
     * @return {?}
     */
    get rowSpan() {
        // TFS 495872
        // return this.columns.length + (this.dg.enableFilterRow ? 1 : 0);
        return this.columns.length;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dgs.checkedRowsTotalChanged$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        () => {
            if (this._chkall) {
                /** @type {?} */
                const checkedsCount = this.dfs.getCurrentPageCheckeds().length;
                /** @type {?} */
                const isCheckAll = this.dfs.isCheckAll();
                /** @type {?} */
                const isIndeterminate = isCheckAll || !checkedsCount;
                this._chkall.chk.nativeElement.indeterminate = !isIndeterminate;
                /** @type {?} */
                const _checked = isCheckAll && checkedsCount > 0;
                this._chkall.updateStatus(_checked);
            }
        }));
        this.dgs.uncheckAll.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        () => {
            if (this.dg.showAllCheckbox && this._chkall) {
                this._chkall.chk.nativeElement.indeterminate = false;
                this._chkall.chk.nativeElement.checked = false;
            }
        }));
        this.dgs.checkAll.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        () => {
            if (this._chkall) {
                this._chkall.chk.nativeElement.checked = true;
            }
        }));
        this.dgs.scrollbarUpdate.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} ps
         * @return {?}
         */
        (ps) => {
            this.ps = ps.scrollbarRef;
            /** @type {?} */
            const rw = ps.rightWidth || 0;
            if (!rw) {
                this.rightFixedColumnWidth = this.getRightFixedColWidth(this.ps);
            }
            else {
                this.rightFixedColumnWidth = rw;
            }
            if (this.fixedRight) {
                this.setFixedColumnPosition(this.showShadowCls, 0);
            }
            this.cd.detectChanges();
        }));
        this.dgs.showGridHeader.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        () => {
            this.setHeaderPosition();
        }));
        this.dgs.smartFilterBarExpand.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        () => {
            this.setHeaderPosition();
        }));
        this.rightFixedColumnWidth = this.getRightFixedColWidth(this.ps);
        this.hasFixedLeftColumns = this.columnsGroup && this.columnsGroup.leftFixed && !!this.columnsGroup.leftFixed.length;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.setHeaderPosition();
        }));
        this.lineNumberTitle = this.getLineNumberTitle();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // if (changes.scrollbarMode && !changes.scrollbarMode.isFirstChange()) {
        //     this.rightFixedColumnWidth = this.getRightFixedColWidth(this.ps);
        //     this.cd.detectChanges();
        // }
        if (changes.columnsGroup && !changes.columnsGroup.isFirstChange()) {
            this.rightFixedColumnWidth = this.getRightFixedColWidth(this.ps);
            this.hasFixedLeftColumns = this.columnsGroup && this.columnsGroup.leftFixed && !!this.columnsGroup.leftFixed.length;
            // if (!this.dg.useControlPanel) {
            //     this.fixedRight = null;
            // }
            this.cd.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        this.fixedRight = null;
    }
    /**
     * @private
     * @return {?}
     */
    getLineNumberTitle() {
        if (this.dg.lineNumberTitle) {
            return this.dg.lineNumberTitle;
        }
        else {
            return this.dg.localeService.getValue('datagrid.lineNumberTitle');
        }
    }
    /**
     * @private
     * @param {?=} ps
     * @return {?}
     */
    getRightFixedColWidth(ps = null) {
        if (!this.columnsGroup) {
            return 0;
        }
        /** @type {?} */
        let w = this.columnsGroup.rightFixedWidth;
        if (!ps) {
            ps = this.dg.scrollInstance.instance;
        }
        if (ps && ps.scrollbarYActive && this.scrollbarMode === 'allways') {
            return w += this.showShadowCls ? 18 : 0;
        }
        return w;
    }
    /**
     * @private
     * @return {?}
     */
    setHeaderPosition() {
        /** @type {?} */
        let top = 0;
        if ((this.dg.enableFilterRow || this.dg.enableSmartFilter) && this.dg.showFilterBar) {
            top += this.dg.filterBarHeight;
        }
        if (this.dg.showRowGroupPanel) {
            top += this.dg.rowGroupPanelHeight;
        }
        this.top = top;
        this.render2.setStyle(this.el.nativeElement, 'top', `${top}px`);
    }
    /**
     * @param {?} fixedLeftWidth
     * @return {?}
     */
    isShowShadow(fixedLeftWidth) {
        /** @type {?} */
        const dgContainerWidth = this.dg.dgContainer.nativeElement.offsetWidth;
        return dgContainerWidth < this.dg.colGroup.totalWidth;
    }
    /**
     * @param {?} left
     * @param {?} right
     * @param {?} col
     * @param {?=} isdatafield
     * @return {?}
     */
    isColspan(left, right, col, isdatafield = false) {
        // if (this.fast) {
        //     if (isdatafield) {
        //         return !col.colspan;
        //     } else {
        //         return col.colspan;
        //     }
        // }
        if (!left && !right) {
            if (isdatafield) {
                return !col.colspan && (!col.fixed || col.fixed === 'none');
            }
            else {
                return col.colspan && (!col.fixed || col.fixed === 'none');
            }
        }
        else if (left) {
            if (isdatafield) {
                return !col.colspan && col.fixed && col.fixed === 'left';
            }
            else {
                return col.colspan && col.fixed && col.fixed === 'left';
            }
        }
        else if (right) {
            if (isdatafield) {
                return !col.colspan && col.fixed && col.fixed === 'right';
            }
            else {
                return col.colspan && col.fixed && col.fixed === 'right';
            }
        }
    }
    /**
     * @param {?} isShow
     * @param {?} scrollLeft
     * @return {?}
     */
    setFixedColumnPosition(isShow, scrollLeft) {
        this.showShadowCls = isShow;
        /** @type {?} */
        const method = isShow ? 'addClass' : 'removeClass';
        this.render2[method](this.fixedRight.nativeElement, FIXED_RIGHT_SHADOW_CLS);
        /** @type {?} */
        const realWidth = this.columnsGroup.leftFixedWidth + this.columnsGroup.normalWidth + this.rightFixedColumnWidth;
        /** @type {?} */
        const gridWidth = this.dg.width;
        /** @type {?} */
        let l = this.dg.width - (this.dg.showBorder ? 2 : 1) - this.rightFixedColumnWidth;
        if (gridWidth > realWidth) {
            l = this.columnsGroup.leftFixedWidth + this.columnsGroup.normalWidth;
        }
        this.render2.setStyle(this.fixedRight.nativeElement, 'left', l + 'px');
    }
    /**
     * @param {?} e
     * @param {?} rntd
     * @return {?}
     */
    onRowNumerColumnDblClick(e, rntd) {
        /** @type {?} */
        let maxRowNumber = this.dg.getRows().length;
        if (this.dg.pagination) {
            /** @type {?} */
            const pageSize = this.dg.pageSize;
            /** @type {?} */
            const pageIndex = this.dg.pageIndex;
            maxRowNumber = pageSize * pageIndex + pageSize;
        }
        this.dg.longTextArea.nativeElement.innerHTML = maxRowNumber;
        /** @type {?} */
        const w1 = this.dg.longTextArea.nativeElement.offsetWidth;
        /** @type {?} */
        const currentWidth = rntd.offsetWidth;
        if (w1 > currentWidth) {
            this.dg.lineNumberWidth = w1 + 10;
            this.dfs.updateProperty('lineNumberWidth', this.dg.lineNumberWidth);
            this.dfs.resizeColumns();
        }
    }
    /**
     * @param {?} e
     * @param {?} col
     * @return {?}
     */
    onSortColumnClick(e, col) {
        if (this.disableSort) {
            return;
        }
        if (!col.sortable) {
            return;
        }
        // 结束编辑
        this.dg.cancelEdit(null);
        /** @type {?} */
        const sortName = this.dg.sortName;
        /** @type {?} */
        const sortOrder = this.dg.sortOrder;
        /** @type {?} */
        let sortFields = [];
        /** @type {?} */
        let sortOrders = [];
        if (sortName) {
            sortFields = sortName.split(',');
            sortOrders = sortOrder.split(',');
        }
        /** @type {?} */
        const colOrder = col.order || 'asc';
        /** @type {?} */
        let newOrder = colOrder;
        /** @type {?} */
        const i = sortFields.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n === col.field));
        if (i >= 0) {
            /** @type {?} */
            const _order = sortOrders[i] === 'asc' ? 'desc' : 'asc';
            newOrder = _order;
            // if (this.dg.multiSort && newOrder === 'asc') {
            if (newOrder === 'asc') {
                newOrder = undefined;
                sortFields.splice(i, 1);
                sortOrders.splice(i, 1);
            }
            else {
                sortOrders[i] = _order;
            }
        }
        else {
            if (this.dg.multiSort) {
                sortFields.push(col.field);
                sortOrders.push(colOrder);
            }
            else {
                sortFields = [col.field];
                sortOrders = [colOrder];
            }
        }
        col.order = newOrder;
        this.dg.sortName = sortFields.join(',');
        this.dg.sortOrder = sortOrders.join(',');
        this.dfs.setSortInfo(this.dg.sortName, this.dg.sortOrder);
        this.dg.beforeSortColumn(this.dg.sortName, this.dg.sortOrder, this.dg).subscribe((/**
         * @return {?}
         */
        () => {
            this.dg.onColumnSorted();
        }));
    }
}
DatagridHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-header',
                template: "<!--\r\n * @Author: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @Date: 2019-08-06 07:43:53\r\n * @LastEditors: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @LastEditTime: 2019-11-05 08:53:26\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n -->\r\n <!-- [style.maxWidth.px]=\"col.width - 44\"   =>  style=\"width: 100%\"    -->\r\n<ng-template #filterAndSort let-col>\r\n    <ng-container *ngIf=\"col.filter\">\r\n        <span style=\"width: 100%\" class=\"f-datagrid-header-cell-title\">\r\n            <span class=\"text-danger\" *ngIf=\" col.validators | showStar \">*</span>\r\n            {{ col.title }}\r\n        </span>\r\n        <ng-container *ngIf=\"col.sortable \">\r\n            <span class=\"f-datagrid-sort\" [class.f-datagrid-filter-sort-asc]=\"col.order === 'asc'\"\r\n                [class.f-datagrid-filter-sort-desc]=\"col.order === 'desc'\"\r\n                [style.cursor]=\"disableSort ? 'not-allowed': 'pointer'\" *ngIf=\"col.order\"\r\n                datagrid-smart-filter [disabled]=\"disableSort\" [column]=\"col\"> </span>\r\n            <span class=\"f-datagrid-sort f-datagrid-filter-sort\" [style.cursor]=\"disableSort ? 'not-allowed': 'pointer'\"\r\n                datagrid-smart-filter [disabled]=\"disableSort\" [column]=\"col\" *ngIf=\"!col.order\"></span>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!col.sortable\">\r\n            <span class=\"f-datagrid-sort f-datagrid-filter\" datagrid-smart-filter  [disabled]=\"disableSort\"  [column]=\"col\"></span>\r\n        </ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!col.filter\" [ngTemplateOutlet]=\"column_title\" [ngTemplateOutletContext]=\"{$implicit: col}\">\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #column_title let-col>\r\n    <ng-container *ngIf=\"!col.sortable\">\r\n        <span [style.width.px]=\"col.width - 20\" class=\"f-datagrid-header-cell-title\" *ngIf=\"col.field !== dg.ControlPanelFeild\">\r\n            <span class=\"text-danger\" *ngIf=\" col.validators | showStar \">*</span>\r\n            {{ col.title }}\r\n        </span>\r\n        <span *ngIf=\"col.field === dg.ControlPanelFeild\" class=\"f-datagrid-header-cell-title\"\r\n            style=\"position: absolute; left: 3px; top: 0; cursor: pointer;\"\r\n            (click)=\"dg.showControlPanel($event)\">\r\n            <span class=\"f-icon f-icon-home-setup\"></span>\r\n        </span>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"col.sortable\">\r\n        <span style=\"width: 100%\"  class=\"f-datagrid-header-cell-title\">\r\n            <span class=\"text-danger\" *ngIf=\" col.validators | showStar \">*</span>\r\n            {{ col.title }}\r\n        </span>\r\n        <span class=\"f-datagrid-sort\" [class.f-datagrid-sort-asc]=\"col.order === 'asc'\"\r\n            [class.f-datagrid-sort-desc]=\"col.order === 'desc'\"\r\n            [style.cursor]=\"disableSort ? 'not-allowed': 'pointer'\"\r\n            (click)=\"onSortColumnClick($event, col)\" *ngIf=\"col.order\"> </span>\r\n        <span class=\"f-datagrid-sort\" [style.cursor]=\"disableSort ? 'not-allowed': 'pointer'\"\r\n            (click)=\"onSortColumnClick($event, col)\" *ngIf=\"!col.order \"></span>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<!-- \u4F7F\u7528\u8868\u5934\u6A21\u677F\u65F6\uFF0C\u6392\u5E8F\u6A21\u677F -->\r\n<ng-template #column_sort let-col>\r\n    <ng-container *ngIf=\"!col.sortable\">\r\n        <span *ngIf=\"col.field === dg.ControlPanelFeild\" class=\"f-datagrid-header-cell-title\"\r\n            style=\"position: absolute; left: 3px; top: 0; cursor: pointer;\"\r\n            (click)=\"dg.showControlPanel($event)\">\r\n            <span class=\"f-icon f-icon-home-setup\"></span>\r\n        </span>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"col.sortable\">\r\n        <span class=\"f-datagrid-sort\" [class.f-datagrid-sort-asc]=\"col.order === 'asc'\"\r\n            [class.f-datagrid-sort-desc]=\"col.order === 'desc'\"\r\n            [style.cursor]=\"disableSort ? 'not-allowed': 'pointer'\"\r\n            (click)=\"onSortColumnClick($event, col)\" *ngIf=\"col.order\"> </span>\r\n        <span class=\"f-datagrid-sort\" [style.cursor]=\"disableSort ? 'not-allowed': 'pointer'\"\r\n            (click)=\"onSortColumnClick($event, col)\" *ngIf=\"!col.order \"></span>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<!-- \u4F7F\u7528\u8868\u5934\u6A21\u677F\u65F6\uFF0C\u667A\u80FD\u8FC7\u6EE4\u6A21\u677F -->\r\n<ng-template #smartfilter let-col>\r\n    <ng-container *ngIf=\"col.filter\">\r\n        <ng-container *ngIf=\"col.sortable \">\r\n            <span class=\"f-datagrid-sort\" [class.f-datagrid-filter-sort-asc]=\"col.order === 'asc'\"\r\n                [class.f-datagrid-filter-sort-desc]=\"col.order === 'desc'\"\r\n                [style.cursor]=\"disableSort ? 'not-allowed': 'pointer'\" *ngIf=\"col.order\"\r\n                datagrid-smart-filter [disabled]=\"disableSort\" [column]=\"col\"> </span>\r\n            <span class=\"f-datagrid-sort f-datagrid-filter-sort\" [style.cursor]=\"disableSort ? 'not-allowed': 'pointer'\"\r\n                datagrid-smart-filter [disabled]=\"disableSort\" [column]=\"col\" *ngIf=\"!col.order\"></span>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!col.sortable\">\r\n            <span class=\"f-datagrid-sort f-datagrid-filter\" datagrid-smart-filter  [disabled]=\"disableSort\"  [column]=\"col\"></span>\r\n        </ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!col.filter\" [ngTemplateOutlet]=\"column_sort\" [ngTemplateOutletContext]=\"{$implicit: col}\"></ng-container>\r\n</ng-template>\r\n\r\n\r\n<ng-template #column_template let-col let-left=\"left\" let-right=\"right\">\r\n    <ng-container *ngIf=\"isColspan(left, right, col, false) \">\r\n        <td [resize-column]=\"col\" class=\"f-datagrid-header-cell f-datagrid-header-cell-group\" [attr.align]=\"col.halign\"\r\n            [attr.colspan]=\"col.colspan\" [attr.title]=\"col.title\"\r\n            [class.r-shadow-col]=\"col.rightShadowCol\"\r\n            [class.l-shadow-col]=\"col.leftShadowCol\">\r\n            <div class=\"f-datagrid-header-cell-content\" [header-style]=\"col\">\r\n                {{ col.title }}\r\n            </div>\r\n        </td>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"isColspan(left, right, col, true)\">\r\n        <td [resize-column]=\"col\" class=\"f-datagrid-header-cell\" [attr.align]=\"col.halign\" [attr.field]=\"col.field\"\r\n            [attr.rowspan]=\"col.rowspan\" [attr.title]=\"col.title\"\r\n            *ngIf=\"dg.columnIsVisible(col)\"\r\n            [style.display]=\"dg.columnIsVisible(col) ? '': 'none'\"\r\n            [class.f-datagrid-header-cell-sort]=\"col.sortable\"\r\n            [class.smooth-dnd-draggable-wrapper]=\"enableDragColumn && col.field !== dg.ControlPanelFeild \"\r\n            >\r\n            <div class=\"f-datagrid-header-cell-content\" [header-style]=\"col\" [style.width.px]=\"col.width\">\r\n                <span class=\"drag-column-bar f-icon f-icon-more-vertical\" *ngIf=\"col.field !== dg.ControlPanelFeild && enableDragColumn && !dg.editable\"></span>\r\n                <ng-container *ngIf=\"col.headerTemplate\">\r\n                    <ng-container [ngTemplateOutlet]=\"col.headerTemplate\" [ngTemplateOutletContext]=\"{$implicit: col}\"></ng-container>\r\n                    <ng-container [ngTemplateOutlet]=\" !dg.enableSmartFilter ? column_sort : smartfilter \" [ngTemplateOutletContext]=\"{$implicit: col}\"></ng-container>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"!col.headerTemplate\" [ngTemplateOutlet]=\" !dg.enableSmartFilter ? column_title : filterAndSort \" [ngTemplateOutletContext]=\"{$implicit: col}\"></ng-container>\r\n            </div>\r\n        </td>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #header_template_inner let-columns let-left=\"left\" let-right=\"right\" let-groupCols=\"groupCols\">\r\n    <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" style=\"height: 100%\">\r\n        <colgroup>\r\n            <col width=\"36px\" *ngIf=\"dg.showCheckbox && left\">\r\n            <col [width]=\"dg?.lineNumberWidth + 'px'\" *ngIf=\"dg.showLineNumber && left\">\r\n            <ng-container *ngFor=\"let col of groupCols\">\r\n                <col [width]=\"col.width + 'px'\" *ngIf=\"col.width && col.field\">\r\n            </ng-container>\r\n        </colgroup>\r\n        <thead [class.header-wrap]=\"wrapHeader\">\r\n            <tr class=\"f-datagrid-header-row\" *ngFor=\"let cols of columns; index as colsIdx; first as isFirst\"\r\n                [drag-column]=\"enableDragColumn\" [groupName]=\"left?'left': right ? 'right': 'center'\">\r\n                <!-- \u590D\u9009\u6846 -->\r\n                <td *ngIf=\"dg.showCheckbox && isFirst && left\" #chktd\r\n                    class=\"f-datagrid-header-cell f-datagrid-header-checkbox\" \r\n                    [attr.rowspan]=\"rowSpan\">\r\n                    <div class=\"f-datagrid-header-cell-content\" style=\"width: 36px; text-align: center;overflow:hidden; \">\r\n                        <datagrid-header-checkbox #chkAll *ngIf=\"dg.showAllCheckbox && dg.multiSelect\" ></datagrid-header-checkbox>\r\n                    </div>\r\n                </td>\r\n                <!-- \u884C\u53F7 -->\r\n                <td *ngIf=\"dg.showLineNumber && isFirst && left\" #rntd\r\n                    class=\"f-datagrid-header-cell f-datagrid-cell-rownumber\" [attr.rowspan]=\"rowSpan\"\r\n                    (dblclick)=\"onRowNumerColumnDblClick($event, rntd)\">\r\n                    <div class=\"f-datagrid-header-cell-content\" style=\"padding: 0px;\"  [style.width.px]=\"dg?.lineNumberWidth\">\r\n                        \r\n                        <span style=\"width: 100%\" class=\"f-datagrid-header-cell-title\">\r\n                            {{ lineNumberTitle }}\r\n                        </span>\r\n                    </div>\r\n                </td>\r\n                <ng-container *ngFor=\"let col of cols; last as isLast\">\r\n                    <ng-container\r\n                        *ngTemplateOutlet=\"column_template; context: {$implicit: col, left: left, right: right}\">\r\n                    </ng-container>\r\n                </ng-container>\r\n            </tr>\r\n            <tr *ngIf=\"enableFilterRow\" [style.height.px]=\"dg.filterRowHeight\" class=\"f-datagrid-header-row f-datagrid-filter-row\">\r\n                <!-- \u590D\u9009\u6846 -->\r\n                <td *ngIf=\"dg.showCheckbox && left\" class=\"f-datagrid-header-cell f-datagrid-header-checkbox\" >\r\n                </td>\r\n                <!-- \u884C\u53F7 -->\r\n                <td *ngIf=\"dg.showLineNumber && left\" class=\"f-datagrid-header-cell f-datagrid-cell-rownumber\" >\r\n                </td>\r\n                \r\n                <ng-container filter-row-creator [left]=\"left\" [right]=\"right\">\r\n                </ng-container>\r\n            </tr>\r\n        </thead>\r\n    </table>\r\n</ng-template>\r\n\r\n\r\n\r\n<div class=\"f-datagrid-header\" style=\"width: 100%;\" #header>\r\n\r\n            \r\n        <!--\u5DE6\u4FA7\u56FA\u5B9A\u5217-->\r\n        <div #fixedLeft class=\"f-datagrid-header-fixed-left\"\r\n            *ngIf=\"columnsGroup?.leftFixed && columnsGroup?.leftFixed.length  || dg?.showLineNumber || dg?.showCheckbox \"\r\n            [style.width.px]=\"columnsGroup?.leftFixedWidth\"\r\n            [style.height.px]=\"height\">\r\n            <ng-container *ngTemplateOutlet=\"header_template_inner; context: { $implicit: columns, left: true, right: false,\r\n                groupCols:  columnsGroup?.leftFixed}\">\r\n            </ng-container>\r\n        </div>\r\n\r\n        <!--\u6B63\u5E38\u5217-->\r\n        <div #headerContainer class=\"f-datagrid-header-center\" \r\n            [style.left.px]=\"columnsGroup?.leftFixedWidth\"\r\n            [style.width.px]=\"columnsGroup?.normalWidth\"\r\n            style=\"position: absolute;height: 100%\">\r\n            <ng-container *ngTemplateOutlet=\"header_template_inner; context: {$implicit: columns, left: false, right: false,\r\n                groupCols:  columnsGroup?.normalColumns}\">\r\n            </ng-container>\r\n        </div>\r\n        <!--\u53F3\u4FA7\u56FA\u5B9A\u5217-->\r\n        <div #fixedRight class=\"f-datagrid-header-fixed-right\"\r\n            *ngIf=\"columnsGroup?.rightFixed && columnsGroup?.rightFixed.length\"\r\n            [style.width.px]=\" dg.showBorder?  rightFixedColumnWidth : rightFixedColumnWidth + 1\"\r\n            [style.height.px]=\"height\" style=\"border: 0\">\r\n            <ng-container *ngTemplateOutlet=\"header_template_inner; context: {$implicit: columns, left: false, right: true,\r\n                groupCols: columnsGroup?.rightFixed}\">\r\n            </ng-container>\r\n        </div>\r\n\r\n    <div class=\"filter-row-disabled\"\r\n        style=\"position: absolute;background: rgb(255, 255, 255);width: 100%;z-index: 9;height: 40px; bottom:0;opacity: 0;\"\r\n        [style.left.px]=\"dg.showAllCheckbox ? 36 : 0\" *ngIf=\"showOverlay && dg.enableFilterRow\">\r\n    </div>\r\n</div>\r\n\r\n",
                encapsulation: ViewEncapsulation.None,
                exportAs: 'dgHeader'
            }] }
];
/** @nocollapse */
DatagridHeaderComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: Injector },
    { type: DatagridComponent, decorators: [{ type: Optional }] },
    { type: NgZone }
];
DatagridHeaderComponent.propDecorators = {
    height: [{ type: Input }],
    columns: [{ type: Input }],
    columnsGroup: [{ type: Input }],
    enableDragColumn: [{ type: Input }],
    wrapHeader: [{ type: Input }],
    enableFilterRow: [{ type: Input }],
    scrollbarMode: [{ type: Input }],
    fast: [{ type: Input }],
    header: [{ type: ViewChild, args: ['header',] }],
    headerColumnsTable: [{ type: ViewChild, args: ['headerContainer',] }],
    fixedLeft: [{ type: ViewChild, args: ['fixedLeft',] }],
    chkAll: [{ type: ViewChild, args: ['chkAll',] }],
    fr: [{ type: ViewChild, args: ['fixedRight',] }]
};
if (false) {
    /** @type {?} */
    DatagridHeaderComponent.prototype.height;
    /** @type {?} */
    DatagridHeaderComponent.prototype.columns;
    /** @type {?} */
    DatagridHeaderComponent.prototype.columnsGroup;
    /** @type {?} */
    DatagridHeaderComponent.prototype.enableDragColumn;
    /** @type {?} */
    DatagridHeaderComponent.prototype.wrapHeader;
    /** @type {?} */
    DatagridHeaderComponent.prototype.enableFilterRow;
    /** @type {?} */
    DatagridHeaderComponent.prototype.scrollbarMode;
    /**
     * 启用性能优化版
     * @type {?}
     */
    DatagridHeaderComponent.prototype.fast;
    /** @type {?} */
    DatagridHeaderComponent.prototype.header;
    /** @type {?} */
    DatagridHeaderComponent.prototype.headerColumnsTable;
    /** @type {?} */
    DatagridHeaderComponent.prototype.fixedLeft;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype._chkall;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.fixedRight;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.dgs;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.dfrs;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.el;
    /** @type {?} */
    DatagridHeaderComponent.prototype.rightFixedColumnWidth;
    /** @type {?} */
    DatagridHeaderComponent.prototype.normalColumnWidth;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.cd;
    /** @type {?} */
    DatagridHeaderComponent.prototype.showOverlay;
    /** @type {?} */
    DatagridHeaderComponent.prototype.disableSort;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.scrollX;
    /** @type {?} */
    DatagridHeaderComponent.prototype.showShadowCls;
    /** @type {?} */
    DatagridHeaderComponent.prototype.top;
    /** @type {?} */
    DatagridHeaderComponent.prototype.hasFixedLeftColumns;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.ps;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.destroy$;
    /** @type {?} */
    DatagridHeaderComponent.prototype.lineNumberTitle;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.render2;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.injector;
    /** @type {?} */
    DatagridHeaderComponent.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderComponent.prototype.ngZone;
}
export class FilterRowCreateDirective {
    /**
     * @param {?} vc
     * @param {?} injector
     * @param {?} dg
     * @param {?} ngZone
     */
    constructor(vc, injector, dg, ngZone) {
        this.vc = vc;
        this.injector = injector;
        this.dg = dg;
        this.ngZone = ngZone;
        this.dfs = this.injector.get(DatagridFacadeService);
        this.dgs = this.injector.get(DatagridService);
        this.cfr = this.injector.get(ComponentFactoryResolver);
        this.cd = this.injector.get(ChangeDetectorRef);
        this.dfrs = this.dg.clientFilterService;
        this.filterRowType = this.injector.get(GRID_FILTER_ROW, null);
        this.dgs.clearFilter.subscribe((/**
         * @return {?}
         */
        () => {
            if (this.filterRowRef) {
                this.filterRowRef.instance.clearFilterValue(false);
            }
        }));
        this.dgs.columnsChanged.subscribe((/**
         * @return {?}
         */
        () => {
            this.createFilterRow(true);
        }));
        if (this.dfrs) {
            this.dfrs.removeField.subscribe((/**
             * @param {?} f
             * @return {?}
             */
            (f) => {
                if (this.filterRowRef && f) {
                    /** @type {?} */
                    let flag = false;
                    /** @type {?} */
                    let _cols = [];
                    if (this.left) {
                        _cols = this.dg.colGroup.leftFixed || [];
                    }
                    else if (this.right) {
                        _cols = this.dg.colGroup.rightFixed || [];
                    }
                    else {
                        _cols = this.dg.colGroup.normalColumns || [];
                    }
                    flag = !!_cols.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.field === f));
                    if (flag) {
                        this.filterRowRef.instance.removeField(f);
                    }
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createFilterRow(true);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * 过滤行
     * @param {?=} rebuild
     * @return {?}
     */
    createFilterRow(rebuild = false) {
        if (rebuild && this.filterRowRef) {
            this.filterRowRef.destroy();
            this.filterRowRef = null;
        }
        if (this['_FILTERROW_CREATE_TIMER_']) {
            clearTimeout(this['_FILTERROW_CREATE_TIMER_']);
        }
        this['_FILTERROW_CREATE_TIMER_'] = setTimeout((/**
         * @return {?}
         */
        () => {
            this._createFilterRow();
            if (rebuild) {
                this.cd.detectChanges();
            }
        }), 50);
    }
    /**
     * @private
     * @return {?}
     */
    _createFilterRow() {
        if (this.dg.enableFilterRow) {
            if (!this.filterRowType) {
                return;
            }
            /** @type {?} */
            let columnsData = this.dg.colGroup.normalColumns;
            if (this.left) {
                columnsData = this.dg.colGroup.leftFixed;
            }
            else if (this.right) {
                columnsData = this.dg.colGroup.rightFixed;
            }
            if (!this.filterRowRef && this.vc) {
                /** @type {?} */
                const cf = this.cfr.resolveComponentFactory(this.filterRowType);
                this.filterRowRef = this.vc.createComponent(cf);
                this.filterRowRef.instance.fixedLeft = this.left;
                this.filterRowRef.instance.columns = columnsData;
                this.filterRowRef.instance.gridInstance = this.dg;
                this.filterRowRef.instance.conditionChange.subscribe((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    /** @type {?} */
                    const conditions = this.mergeFilterConditions(n || {});
                    this.dgs.onFilterChanged.emit(conditions);
                }));
            }
        }
    }
    /**
     * @private
     * @param {?} conditions
     * @return {?}
     */
    mergeFilterConditions(conditions) {
        /** @type {?} */
        const _conditions = Object.assign(this.dg.conditions || {}, conditions || {});
        Object.keys(_conditions).forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            if (_conditions[n] === null) {
                delete _conditions[n];
            }
        }));
        return _conditions;
    }
}
FilterRowCreateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[filter-row-creator]'
            },] }
];
/** @nocollapse */
FilterRowCreateDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Injector },
    { type: DatagridComponent },
    { type: NgZone }
];
FilterRowCreateDirective.propDecorators = {
    left: [{ type: Input }],
    right: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FilterRowCreateDirective.prototype.left;
    /** @type {?} */
    FilterRowCreateDirective.prototype.right;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.dgs;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.dfrs;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.filterRowType;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.filterRowRef;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.vc;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.injector;
    /** @type {?} */
    FilterRowCreateDirective.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    FilterRowCreateDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,