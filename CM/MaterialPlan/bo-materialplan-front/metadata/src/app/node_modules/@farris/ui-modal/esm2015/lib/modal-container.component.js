/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, HostListener, Renderer2, ViewChild, Output, EventEmitter, TemplateRef, Input, ViewChildren, QueryList, HostBinding } from '@angular/core';
import { AngularDraggableDirective } from '@farris/ui-draggable';
import { DomSanitizer } from "@angular/platform-browser";
import { CLASS_NAME, DISMISS_REASONS, ModalOptions, TRANSITION_DURATIONS } from './modal-options.class';
import { isBs3 } from '@farris/ui-modal/utils';
import { ModalButtonDirective } from './modal-button.directive';
import { fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
export class ModalContainerComponent {
    /**
     * @param {?} options
     * @param {?} el
     * @param {?} _renderer
     * @param {?} sanitizer
     */
    constructor(options, el, _renderer, sanitizer) {
        this.el = el;
        this._renderer = _renderer;
        this.sanitizer = sanitizer;
        this.isShown = false;
        this.isModalHiding = false;
        // 记录上次的高度
        this.isMax = false;
        this.closed = new EventEmitter();
        this.opened = new EventEmitter();
        this.resized = new EventEmitter();
        this.modalID = `MODALID_${Date.now().toPrecision()}`;
        this._windowResizeToMax = false;
        this.windowResize$ = null;
        this.config = Object.assign({}, options);
        if (!this.config.buttons) {
            this.config.buttons = [
                {
                    text: '取消',
                    cls: 'btn btn-light',
                    iconCls: 'k-icon k-i-close',
                    handle: (/**
                     * @return {?}
                     */
                    () => {
                        this.close();
                    })
                },
                {
                    text: '确定',
                    cls: 'btn btn-primary',
                    iconCls: 'k-icon k-i-check',
                    handle: (/**
                     * @return {?}
                     */
                    () => { alert('好(｡･∀･)ﾉﾞ嗨哟!!'); })
                }
            ];
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set iframe(value) {
        if (this.sanitizer) {
            this.iframeSrc = this.sanitizer.bypassSecurityTrustResourceUrl(value);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.boundsElement = this.el.nativeElement;
        if (this.config.fitContent) {
            this._renderer.addClass(this.el.nativeElement, 'f-modal-fitContent');
        }
        if (this.isAnimated) {
            this._renderer.addClass(this.el.nativeElement, CLASS_NAME.FADE);
        }
        // this.ngZone.runOutsideAngular(() => {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.isShown = true;
            this._renderer.addClass(this.el.nativeElement, isBs3() ? CLASS_NAME.IN : CLASS_NAME.SHOW);
            this._renderer.setStyle(this.el.nativeElement, 'display', 'block');
            if (this.config.fitContent && this.el.nativeElement.className.indexOf('f-modal-fitContent-scroll') > -1) {
                this.el.nativeElement.scrollTop = 0;
            }
            if (document && document.body) {
                /** @type {?} */
                const modalLen = this.bsModalService.getModalsCount();
                if (modalLen === 1) {
                    this.bsModalService.checkScrollbar();
                    this.bsModalService.setScrollbar();
                }
                if (!document.body.classList.contains(CLASS_NAME.OPEN)) {
                    this._renderer.addClass(document.body, CLASS_NAME.OPEN);
                }
            }
            this.opened.emit({ modal: this });
        }), this.isAnimated ? TRANSITION_DURATIONS.BACKDROP : 0);
        // });
        if (this.el.nativeElement) {
            this.el.nativeElement.focus();
        }
        this.dlgHeaderLineHeight = this.getDialogHeaderLineHeight() + 'px';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.
        // Add 'implements AfterViewInit' to the class.
        this._renderer.setStyle(this.el.nativeElement, 'display', 'block');
        // 如果内容适应宽度
        if (this.config.fitContent) {
            /** @type {?} */
            let initElRect = this.el.nativeElement.getBoundingClientRect();
            /** @type {?} */
            let initBodySize = this.getContainerSize();
            if (initElRect.height < initBodySize.height + 30) {
                this._renderer.addClass(this.el.nativeElement, 'f-modal-fitContent-scroll');
            }
        }
        this.originalHeight = this.config.height;
        this.originalWidth = this.config.width;
        this.windowResize$ = fromEvent(window, 'resize').pipe(debounceTime(50)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            /** @type {?} */
            const winWidth = window.innerWidth - 20;
            /** @type {?} */
            const winHeight = window.innerHeight - 20;
            if (this.config.width <= winWidth && this.config.height <= winHeight) {
                if (this._windowResizeToMax) {
                    this.revertDialog();
                    this._windowResizeToMax = false;
                }
                else {
                    if (this.isMax) {
                        this.maxDialog(false);
                    }
                }
            }
            else {
                if (!this.isMax) {
                    this._windowResizeToMax = true;
                    this.maxDialog();
                }
                else {
                    this.maxDialog(false);
                }
            }
            this.toCenter();
            this.moveTo(0, 0);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getDlgElement() {
        return this.el.nativeElement.querySelector('.modal-dialog');
    }
    /**
     * @private
     * @return {?}
     */
    getDialogHeaderLineHeight() {
        if (this.config.showHeader) {
            /** @type {?} */
            const modalHeaderStyles = window.getComputedStyle(this.modalHeader.nativeElement);
            /** @type {?} */
            const paddingTop = parseInt(modalHeaderStyles.paddingTop.replace('px', ''), 10);
            /** @type {?} */
            const paddingBottom = parseInt(modalHeaderStyles.paddingBottom.replace('px', ''), 10);
            return this.config.dialogHeaderHeight - paddingTop - paddingBottom;
        }
        else {
            return 0;
        }
    }
    // 获取内容区域的尺寸
    /**
     * @return {?}
     */
    getContainerSize() {
        /** @type {?} */
        const bodyTarget = this.el.nativeElement.querySelector('.modal-body');
        /** @type {?} */
        const height = bodyTarget.offsetHeight;
        /** @type {?} */
        const width = bodyTarget.offsetWidth;
        return { width, height };
    }
    /**
     * @return {?}
     */
    buildFooterStyles() {
        /** @type {?} */
        let styles = {};
        if (this.config.dialogFooterStyles) {
            styles = Object.assign({}, styles, this.config.dialogFooterStyles);
        }
        return styles;
    }
    /**
     * @return {?}
     */
    useButtonsTemplate() {
        return this.config.buttons instanceof TemplateRef;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        /** @type {?} */
        const tag = (/** @type {?} */ (event.target));
        // if (tag.localName === 'label') {
        //     if (tag.className) {
        //         const clsList = tag.className.split(' ');
        //         if (
        //             clsList.indexOf('k-radio-label') > -1 ||
        //             clsList.indexOf('k-checkbox-label') > -1 ||
        //             clsList.indexOf('custom-control-label') > -1
        //         ) {
        //             return;
        //         }
        //     }
        // }
        // if (tag.localName === 'input' && (tag.type === 'checkbox' || tag.type === 'radio' || tag.type === 'file')) {
        //     return;
        // }
        if (this.config.ignoreBackdropClick || this.config.backdrop === 'static' || event.target !== this.el.nativeElement) {
            event.stopPropagation();
            return;
        }
        this.bsModalService.setDismissReason(DISMISS_REASONS.BACKRDOP);
        this.close();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEsc(event) {
        if (!this.isShown) {
            return;
        }
        if (event.keyCode === 27) {
            event.preventDefault();
        }
        if (this.config.keyboard &&
            this.level === this.bsModalService.getModalsCount()) {
            this.bsModalService.setDismissReason(DISMISS_REASONS.ESC);
            this.close(event);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.isShown) {
            this.close();
        }
        if (this.windowResize$) {
            this.windowResize$.unsubscribe();
            this.windowResize$ = null;
        }
    }
    /**
     * @param {?=} e
     * @param {?=} isCloseButton
     * @return {?}
     */
    close(e, isCloseButton = false) {
        if (e && e.stopPropagation) {
            e.stopPropagation();
        }
        if (this.isModalHiding || !this.isShown) {
            return;
        }
        this.config.beforeClose(this, { event: e }).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            if (!r) {
                return false;
            }
            this.isModalHiding = true;
            this._renderer.removeClass(this.el.nativeElement, isBs3() ? CLASS_NAME.IN : CLASS_NAME.SHOW);
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.isShown = false;
                if (document &&
                    document.body) {
                    if (this.bsModalService.getModalsCount() === 1) {
                        this._renderer.removeClass(document.body, CLASS_NAME.OPEN);
                    }
                }
                this.bsModalService.hide(this.level);
                this.isModalHiding = false;
                if (this.config.closed) {
                    this.config.closed(isCloseButton, { modalRef: this, event: e });
                }
                this.closed.emit(this.level);
            }), this.isAnimated ? TRANSITION_DURATIONS.MODAL : 0);
            // });
        }));
    }
    /**
     * @return {?}
     */
    toCenter() {
        /** @type {?} */
        const marginLeft = Number.parseInt('' + -this.config.width / 2);
        /** @type {?} */
        const marginTop = Number.parseInt('' + -this.config.height / 2);
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        /** @type {?} */
        const contentEl = this.el.nativeElement.querySelector('.modal-body');
        // this._renderer.setStyle(dialogEl, 'margin-left', marginLeft);
        // this._renderer.setStyle(dialogEl, 'margin-top', marginTop);
        this._renderer.setStyle(dialogEl, 'left', `${window.innerWidth / 2 + marginLeft}px`);
        this._renderer.setStyle(dialogEl, 'top', `${window.innerHeight / 2 + marginTop}px`);
        /** @type {?} */
        let contentHeight = this.config.height - 38;
        if (this.config.showButtons) {
            contentHeight = contentHeight - 50;
        }
        if (!this.config.fitContent) {
            this._renderer.setStyle(contentEl, 'height', contentHeight + 'px');
        }
        this._renderer.setStyle(contentEl, 'overflow', 'hidden');
        this._renderer.setStyle(dialogEl, 'transform', `translate3d(0px, 0px, 0px)`);
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const container = this.getContainerSize();
            const { width: containerWidth, height: containerHeight } = container;
            this.resized.emit({ width: this.config.width, height: this.config.height, containerWidth, containerHeight });
        }));
    }
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    moveTo(x, y) {
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.setStyle(dialogEl, 'transform', `translate3d(${x}px, ${y}px, 0px)`);
        // this._renderer.setStyle(dialogEl, 'top', '50%');
        // this._renderer.setStyle(dialogEl, 'left', '50%');
        // const marginLeft = Number.parseInt('' + -this.config.width / 2);
        // const marginTop = Number.parseInt('' + -this.config.height / 2);
        // this._renderer.setStyle(dialogEl, 'left', `${window.innerWidth / 2 + marginLeft}px`);
        // this._renderer.setStyle(dialogEl, 'top',  `${window.innerHeight / 2 + marginTop}px`);
        this.draggbar.position = { x, y };
        this.draggbar.resetPosition();
    }
    /**
     * @param {?=} rememberPrevSize
     * @return {?}
     */
    maxDialog(rememberPrevSize = true) {
        if (rememberPrevSize) {
            this.prevWidth = this.config.width;
            this.prevHeight = this.config.height;
        }
        // this.config.width = (document.scrollingElement?document.scrollingElement:document.documentElement)['clientWidth'] - 20;
        // this.config.height = (document.scrollingElement?document.scrollingElement:document.documentElement)['clientHeight'] - 20;
        this.config.width = window.innerWidth - 20;
        this.config.height = window.innerHeight - 20;
        this.config.draggable = false;
        this.config.resizable = false;
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.addClass(dialogEl, 'model-dialog-maximize');
        this._renderer.setStyle(dialogEl, 'top', '50%');
        this._renderer.setStyle(dialogEl, 'left', '50%');
        this.isMax = true;
        this.toCenter();
        this.moveTo(0, 0);
    }
    /**
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    resize(width, height) {
        if (width) {
            this.config.width = width;
        }
        if (height) {
            this.config.height = height;
        }
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.removeClass(dialogEl, 'model-dialog-maximize');
        this.toCenter();
        this.draggbar.resetPosition();
    }
    /**
     * @param {?} el
     * @return {?}
     */
    dropdown(el) {
        // const rect = el.getBoundingClientRect();
        // this._renderer.removeStyle(el, 'margin-top');
        // this._renderer.removeStyle(el, 'margin-left');
        // this._renderer.setStyle(el, 'top', `${rect.top}px`);
        // this._renderer.setStyle(el, 'left', `${rect.left}px`);
        // this._renderer.removeStyle(el, 'transform');
        // this._renderer.removeStyle(el, '-webkit-transform');
        // this._renderer.removeStyle(el, '-ms-transform');
        // this._renderer.removeStyle(el, '-moz-transform');
        // this._renderer.removeStyle(el, '-o-transform');
    }
    /**
     * @return {?}
     */
    revertDialog() {
        this.isMax = false;
        /** @type {?} */
        const ww = window.innerWidth - 20;
        /** @type {?} */
        const wh = window.innerHeight - 20;
        this.config.width = this.prevWidth == ww ? this.originalWidth : this.prevWidth;
        this.config.height = this.prevHeight == wh ? this.originalHeight : this.prevHeight;
        if (this.config.width > ww) {
            this.config.width = ww;
        }
        if (this.config.height > wh) {
            this.config.height = wh;
        }
        this.config.draggable = true;
        this.config.resizable = true;
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.removeClass(dialogEl, 'model-dialog-maximize');
        this.toCenter();
        this.draggbar.resetPosition();
    }
    /**
     * @return {?}
     */
    changeDialogSize() {
        if (this.isMax) {
            this.revertDialog();
        }
        else {
            this.maxDialog();
        }
        this._windowResizeToMax = false;
    }
    /**
     * @param {?} opts
     * @return {?}
     */
    resizeStop(opts) {
        // console.log('resizeStop');
        this.config.width = opts.size.width;
        this.config.height = opts.size.height;
        /** @type {?} */
        const container = this.getContainerSize();
        const { width: containerWidth, height: containerHeight } = container;
        this.resized.emit(Object.assign({}, opts.size, { containerWidth, containerHeight }));
    }
}
ModalContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'modal-container',
                template: `
    <div [attr.id]="modalID"

        [ngDraggable]="config.draggable"
        [ngResizable]="config.resizable"
        [rzMinWidth]="config.minWidth"
        [rzMaxWidth]="config.maxWidth"
        [rzMinHeight]="config.minHeight"
        [rzMaxHeight]="config.maxHeight"
        rzHandles="all" [handle]="config.showHeader ? header:dragEl"
        (stopped)="dropdown($event)"
        (rzStop)="resizeStop($event)"
        [inBounds]="true" [bounds]="boundsElement" [rzContainment]="boundsElement"
        [class]="'modal-dialog' + (config.class ? ' ' + config.class : '')" role="document"
        [style.width]="config.width + 'px'" [style.height]="config.fitContent?'auto':(config.height + 'px')"
        style="position: absolute;top: 50%;left: 50%;">
        <div class="modal-content" [ngClass]="{'modal-content--has-header':config.showHeader}">
            <div #header class="modal-header" [style.display]="config.showHeader ? '': 'none'">
                <div class="modal-title">
                    <span *ngIf="config.iconCls" [class]="config.iconCls" style="margin-right: 8px"></span>
                    <span class="modal-title-label">{{ config.title }}</span>
                </div>
                <div class="actions">
                    <ul>
                        <li *ngIf="config.showMinButton" class="f-btn-icon f-bare">
                            <span class="f-icon modal_minimize"></span></li>
                        <li *ngIf="config.showMaxButton" (click)="changeDialogSize()" class="f-btn-icon f-bare">
                            <span class="f-icon modal_maximize" [class.modalrevert]="isMax"></span>
                        </li>
                        <li *ngIf="config.showCloseButton" (click)="close($event, true)" class="f-btn-icon f-bare">
                             <span class="f-icon modal_close"></span>
                        </li>
                    </ul>
                </div>
            </div>
        <div #dragEl class="f-utils-absolute-all" style="height:10px;z-index: 1;" [style.display]="config.showHeader ? 'none': ''"></div>
            <div class="modal-body" [class.f-utils-flex-column]="dialogType === 'iframe'"   [f-area-response]="config.areaResponse">
                <perfect-scrollbar [config]="{}" [disabled]="!config.enableScroll||config.fitContent"  *ngIf="!dialogType || dialogType === 'default'">
                    <ng-content ></ng-content>
                </perfect-scrollbar>
                <iframe *ngIf="dialogType === 'iframe'" class="f-utils-fill" width="100%" frameborder="0" [src]="iframeSrc"></iframe>
            </div>

            <div [style.textAlign]="config.buttonAlign" class="modal-footer" [ngStyle]="buildFooterStyles()" *ngIf="config.showButtons && config.buttons">
                <ng-container [ngTemplateOutlet]="useButtonsTemplate() ? config.buttons : defaultButtonRef"></ng-container>
            </div>
        </div>
    </div>

    <ng-template #defaultButtonRef>

        <ng-container *ngFor="let btn of config.buttons; last as isLast">
            <button type="button" modal-button  *ngIf="btn.display === undefined && btn.tipsEnable === undefined"
                [class]="btn.cls"
                (click)="btn.handle && btn.handle($event) ">
                <span [class]="btn.iconCls" *ngIf="btn.iconCls"></span> {{ btn.text }}
            </button>

            <button type="button" modal-button  *ngIf="btn.display !== undefined || btn.tipsEnable !== undefined"
                [class]="btn.cls"
                (click)="btn.handle && btn.handle($event) " 
                [style.display]="(btn.display === true || btn.display === undefined) ? '' : 'none'"
                [farrisTooltip]="btn?.tipsEnable" [placement]="'top'" [delay]="500" [content]="btn?.tipsText">
                <span [class]="btn.iconCls" *ngIf="btn.iconCls"></span> {{ btn.text }}
            </button>

        </ng-container>

    </ng-template>
  `,
                host: {
                    class: 'modal farris-modal',
                    role: 'dialog',
                    tabindex: '-1',
                    '[attr.aria-modal]': 'true'
                }
            }] }
];
/** @nocollapse */
ModalContainerComponent.ctorParameters = () => [
    { type: ModalOptions },
    { type: ElementRef },
    { type: Renderer2 },
    { type: DomSanitizer }
];
ModalContainerComponent.propDecorators = {
    iframe: [{ type: Input }],
    draggbar: [{ type: ViewChild, args: [AngularDraggableDirective,] }],
    modalHeader: [{ type: ViewChild, args: ['header',] }],
    closed: [{ type: Output }],
    opened: [{ type: Output }],
    resized: [{ type: Output }],
    modalID: [{ type: HostBinding, args: ['id',] }],
    buttons: [{ type: ViewChildren, args: [ModalButtonDirective,] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onEsc: [{ type: HostListener, args: ['window:keydown.esc', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    ModalContainerComponent.prototype.config;
    /** @type {?} */
    ModalContainerComponent.prototype.isShown;
    /** @type {?} */
    ModalContainerComponent.prototype.level;
    /** @type {?} */
    ModalContainerComponent.prototype.isAnimated;
    /** @type {?} */
    ModalContainerComponent.prototype.bsModalService;
    /** @type {?} */
    ModalContainerComponent.prototype.dialogType;
    /** @type {?} */
    ModalContainerComponent.prototype.iframeSrc;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.isModalHiding;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.originalWidth;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.originalHeight;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.prevWidth;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.prevHeight;
    /** @type {?} */
    ModalContainerComponent.prototype.isMax;
    /** @type {?} */
    ModalContainerComponent.prototype.draggbar;
    /** @type {?} */
    ModalContainerComponent.prototype.modalHeader;
    /** @type {?} */
    ModalContainerComponent.prototype.boundsElement;
    /** @type {?} */
    ModalContainerComponent.prototype.closed;
    /** @type {?} */
    ModalContainerComponent.prototype.opened;
    /** @type {?} */
    ModalContainerComponent.prototype.resized;
    /** @type {?} */
    ModalContainerComponent.prototype.modalID;
    /** @type {?} */
    ModalContainerComponent.prototype.buttons;
    /** @type {?} */
    ModalContainerComponent.prototype.dlgHeaderLineHeight;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype._windowResizeToMax;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.windowResize$;
    /**
     * @type {?}
     * @protected
     */
    ModalContainerComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,