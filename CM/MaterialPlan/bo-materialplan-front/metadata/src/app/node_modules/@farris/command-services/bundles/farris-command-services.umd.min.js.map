{"version":3,"sources":["ng://@farris/command-services/lib/form-loading/hide-event.service.ts","ng://@farris/command-services/lib/form-loading/form-loading.service.ts","ng://@farris/command-services/lib/languages/language-message-en.ts","ng://@farris/command-services/lib/languages/language-message-zh.ts","ng://@farris/command-services/lib/languages/language-message-zhft.ts","ng://@farris/command-services/lib/languages/language-message-factory.ts","ng://@farris/command-services/lib/languag.service.ts","node_modules/tslib/tslib.es6.js","ng://@farris/command-services/lib/util/device-ability.ts","ng://@farris/command-services/lib/error/exception_strategy.ts","ng://@farris/command-services/lib/error/exception_strategy_factory.ts","ng://@farris/command-services/lib/util/http.ts","ng://@farris/command-services/lib/error/form-error.service.ts","ng://@farris/command-services/lib/form-message.service.ts","ng://@farris/command-services/lib/form-notify.service.ts","ng://@farris/command-services/lib/form-wizard.service.ts","ng://@farris/command-services/lib/check.service.ts","ng://@farris/command-services/lib/data-check.service.ts","ng://@farris/command-services/lib/event.service.ts","ng://@farris/command-services/lib/menu-state.service.ts","ng://@farris/command-services/lib/router.service.ts","ng://@farris/command-services/lib/types.ts","ng://@farris/command-services/lib/querystring.ts","ng://@farris/command-services/lib/rtf-service.ts","ng://@farris/command-services/lib/navigation-event.service.ts","ng://@farris/command-services/lib/farris-form.service.ts","ng://@farris/command-services/lib/navigation.service.ts","ng://@farris/command-services/lib/data-services/utils/edit-state.util.ts","ng://@farris/command-services/lib/form-notify-strategy.service.ts","ng://@farris/command-services/lib/command-service.ts","ng://@farris/command-services/lib/validation.service.ts","ng://@farris/command-services/lib/data-services/card-data.service.ts","ng://@farris/command-services/lib/navigation-middleware.service.ts","ng://@farris/command-services/lib/grid.middleware.service.ts","ng://@farris/command-services/lib/param.service.ts","ng://@farris/command-services/lib/keybinding-service.ts","ng://@farris/command-services/lib/filter-condition.service.ts","ng://@farris/command-services/lib/ui-state.service.ts","ng://@farris/command-services/lib/state-machine.service.ts","ng://@farris/command-services/lib/binding-data.service.ts","ng://@farris/command-services/lib/application-param.service.ts","ng://@farris/command-services/lib/entity-services/entity-traversing.service.ts","ng://@farris/command-services/lib/entity-services/entity-manipulation.service.ts","ng://@farris/command-services/lib/entity-services/entity-aggregation.service.ts","ng://@farris/command-services/lib/entity-services/entity-list.service.ts","ng://@farris/command-services/lib/entity-services/entity.service.ts","ng://@farris/command-services/lib/binding-path.service.ts","ng://@farris/command-services/lib/form-control.service.ts","ng://@farris/command-services/lib/frame-context.service.ts","ng://@farris/command-services/lib/focus-invalid.service.ts","ng://@farris/command-services/lib/change-item.service.ts","ng://@farris/command-services/lib/data-services/list-data.service.ts","ng://@farris/command-services/lib/data-services/sub-list-data.service.ts","ng://@farris/command-services/lib/data-services/base-data.service.ts","ng://@farris/command-services/lib/data-services/tree-table/util/parent-tree.util.ts","ng://@farris/command-services/lib/data-services/tree-table/util/path-tree.util.ts","ng://@farris/command-services/lib/data-services/tree-table/util/tree-util-factory.ts","ng://@farris/command-services/lib/data-services/tree-table/repository/parent-tree-repository.ts","ng://@farris/command-services/lib/data-services/tree-table/repository/path-tree-repository.ts","ng://@farris/command-services/lib/data-services/tree-table/repository/tree-repository-factory.ts","ng://@farris/command-services/lib/data-services/tree-data.service.ts","ng://@farris/command-services/lib/data-services/filter-condition-data.service.ts","ng://@farris/command-services/lib/data-services/edit-data.service.ts","ng://@farris/command-services/lib/data-services/remove-data.service.ts","ng://@farris/command-services/lib/data-services/save-data.service.ts","ng://@farris/command-services/lib/data-services/sub-tree-data-service.ts","ng://@farris/command-services/lib/be-action.service.ts","ng://@farris/command-services/lib/approve.service.ts","ng://@farris/command-services/lib/print.service.ts","ng://@farris/command-services/lib/attachment/types.ts","ng://@farris/command-services/lib/attachment/attachment.util.ts","ng://@farris/command-services/lib/attachment/attachment-data.service.ts","ng://@farris/command-services/lib/attachment/attachment.service.ts","ng://@farris/command-services/lib/attachment/file.service.ts","ng://@farris/command-services/lib/dialog.service.ts","ng://@farris/command-services/lib/sidebar-service.ts","ng://@farris/command-services/lib/filter-service.ts","ng://@farris/command-services/lib/component-manager.service.ts","ng://@farris/command-services/lib/authority/authority.service.ts","ng://@farris/command-services/lib/authority/authority.ts","ng://@farris/command-services/lib/exception.handler.ts","ng://@farris/command-services/lib/providers/legacy_providers.ts","ng://@farris/command-services/lib/user-settings.service.ts","ng://@farris/command-services/lib/work-flow/work-flow-message.service.ts","ng://@farris/command-services/lib/work-flow/work-flow-message.ts","ng://@farris/command-services/lib/work-flow/work-flow-message.handler.ts","ng://@farris/command-services/lib/providers/module_providers.ts","ng://@farris/command-services/lib/query-solution/enum/compare-type.enum.ts","ng://@farris/command-services/lib/query-solution/enum/value-type.enum.ts","ng://@farris/command-services/lib/query-solution/enum/relation-type.enum.ts","ng://@farris/command-services/lib/query-solution/handlers/text.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/daterage.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/dropdown.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/numberrage.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/smarthelp.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/single-year.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/checkbox.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/single-month.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/monthrange.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/single-date-time.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/single-number.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/single-date.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/combolookup.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/radio.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/inputgroup.handler.ts","ng://@farris/command-services/lib/query-solution/querycondition.handler.factory.ts","ng://@farris/command-services/lib/query-solution/query-solution.service.ts","ng://@farris/command-services/lib/end-edit.service.ts","ng://@farris/command-services/lib/remote-summary.service.ts","ng://@farris/command-services/lib/batch-edit.service.ts","ng://@farris/command-services/lib/discussion-group.service.ts","ng://@farris/command-services/lib/list-filter/list-filter.service.ts","ng://@farris/command-services/lib/manifest/form_manifest_service.ts","ng://@farris/command-services/lib/manifest/form_expression_manifest_service.ts","ng://@farris/command-services/lib/localization.service.ts","ng://@farris/command-services/lib/service.ts","ng://@farris/command-services/lib/data-grid.service.ts","ng://@farris/command-services/lib/form-attention.service.ts","ng://@farris/command-services/lib/feature-edit/types.ts","ng://@farris/command-services/lib/feature-edit/feature-repository.ts","ng://@farris/command-services/lib/feature-edit/feature-data.service.ts","ng://@farris/command-services/lib/feature-edit/feature-edit.service.ts","ng://@farris/command-services/lib/expression_service.ts","ng://@farris/command-services/lib/dirty-checking.service.ts","ng://@farris/command-services/lib/pop_up.service.ts","ng://@farris/command-services/lib/form.service.ts","ng://@farris/command-services/lib/view-model.service.ts","ng://@farris/command-services/lib/pagination.service.ts","ng://@farris/command-services/lib/providers/frame_providers.ts","ng://@farris/command-services/lib/providers/dynamic_providers.ts","ng://@farris/command-services/lib/command-services-module.ts","ng://@farris/command-services/lib/rtf-message/message-pipe.ts","ng://@farris/command-services/lib/rtf-message/message-pipe-service.ts","ng://@farris/command-services/lib/back_end_message_handler.ts"],"names":["HideEventService","Injectable","this","hideEvent","Subject","FormLoadingService","prototype","setSuspend","flag","isSuspend","show","configOrMessage","loadingCmp","close","registerService","loadingConfig","buildLoadingConfig","loadingService","showLoadingWithDelay","delayTime","_this","timerId","setTimeout","loadingTimerIds","push","hideDelayLoading","timerIdToClear","clearLoadingTimer","hide","message","hasOwnProperty","delay","clearAll","window","clearAllLoadingTimers","destroy","clearTimeout","filter","forEach","services","Array","isArray","length","service","LoadingService","decorators","type","Optional","AppContext","hideEventService","applicationContext","subscribe","result","LanguageMessageForEn","yes","no","unsaveNotifyTitle","clientNotifyTitle","serverNotifyTitle","cancelApproveSuccess","cancelApproveFailed","unallowEmptyProcessInstanceName","unallowEmptyBizBillId","unallowEmptyChildBizBillId","bizDefKeyRequired","procInsIdRequired","addChildFailed","addSiblingFailed","addSubChildFailed","addSubSiblingFailed","deleteFailed","multiSaveFailed","appendFailed","queryFailed","cancelFailed","updateFailed","addFailed","loadFailed","saveSuccess","saveFailed","deleteSuccess","deleteFaild","confirmDeletion","submitSuccess","submitFaild","notifyTitle","httpError","gridDataNotSave","exitWithoutSave","notSupportMenuType","cancelWithoutSave","plsSelectDeleteData","errorHierarchyKey","plsSelectParentNode","deleteChildFirst","incorrectHierarchyConfig","operationFailed","plsSelectEditData","plsSelectViewData","plsUploadFirst","defaultDialogTitle","changeToFirst","changeToLast","noProcessInstanceId","noDataExist","noAttachment","confirm","cancel","plsSelectCopyData","copyFieldsRequired","pathIsRequired","propsIsEmpty","historyAttachment","plsSelectDownloadAtt","noDownloadAtt","plsCheckBatchEditRows","plsSelectDetailFormData","dataAndStateChanged","dataChanged","stateChanged","defaultStateName","copy","copySuccess","copyFailed","roger","appOrFuncIdRequired","tableCanNotEmpty","LanguageMessageForZh","LanguageMessageForZhft","LanguageMessageFactory","create","language","languageMessageMap","has","get","languageMessage","set","Map","LanguageService","Object","defineProperty","getInstance","innerInstance","instance","extendProperties","keys","propName","Inject","args","LOCALE_ID","localeId","extendStatics","d","b","setPrototypeOf","__proto__","p","__extends","__","constructor","__assign","assign","t","s","i","n","arguments","call","apply","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","error","__spread","concat","DeviceAbility","copyToClipboard","text","windowRef","clipboardData","setData","document","queryCommandSupported","textarea","createElement","textContent","style","position","body","appendChild","select","execCommand","ex","removeChild","ExceptionStrategy","MessagerService","messagerService","languageService","_super","InfoExceptionStrategy","tslib_1.__extends","handleException","info","Message","WarningExceptionStrategy","warning","ErrorExceptionStrategy","handleErrorLevel","bsModalRef","exceptionMsg","date","Date","localDate","moment","format","detail","Detail","innerMessage","options","showMaxButton","buttons","langService","cls","handle","width","height","safeHtml","exception","copyButton","onClick","content","showMiniNotify","displayError","console","FatalExceptionStrategy","HttpStatusType","ExceptionFactory","exceptionFactory","getExceptionHandleStrategy","exceptionLevel","exceptionStrategy","HttpUtil","getHttpStatusType","httpResponseSatus","statusType","Info","Success","Redirect","ClientError","ServerError","FormErrorService","isHttpErrorResponse","httpErrorHandler","commonErrorHandler","status","msgService","http401Error","httpErrorInClient","httpErrorInServer","Error","errorMsg","name","HttpErrorResponse","FormMessageService","question","confirmResult$","confirmPromise","from","question2","promise$","Promise","resolve","reject","dialogRef","defaultFocus","prompt","title","JSON","parse","Level","undefined","replace","showHeader","dialogShownKey","i18n","en","sessionInvalid","ok","zh-CHS","curLanguage","messageOptions","initialState","okText","okHandle","modalRef","redirectUri","redirect_uri","location","href","cancelText","cancelHandle","fitContent","dialog","closed","FormNotifyService","default","notifyService","msg","timeout","notifyOptions","hideTitle","success","NotifyService","FormWizardService","preStep","currentPageId","wizardSer","getCurrentPageId","updateWizardState","WizardEventType","Prev","nextStep","Next","cancelWizard","finishWizard","WizardService","CheckService","checkEmpty","DataCheckService","checkBeforeEdit","idToEdit","ifSkipCheck","formNotifyService","empty","checkBeforeView","idToView","id","params","command","messageService","EventService","trigger","eventType","eventData","frameIds","eventBus","FrameEventBus","MenuStateService","getState","data","sessionStorage","getItem","COMMAND_SERVICE_LINK_STORAGE_KEY","setState","links","setItem","stringify","addMenuState","parentMenuId","childMenuId","state","isParentExist","childItem","find","item","getMenuState","parentMenu","childMenu","updateMenuState","key","removeMenu","menuId","removeParentMenu","removeChildMenu","childMenus","child","index","splice","RouterService","route","url","router","createUrlTree","toString","setParams","navigateByUrl","registerEvent","getParams","hash","getAppId","getFuncId","frameworkService","eventListner","FuncSwitch","getOriginalId","tabId","menuState","menuStateService","formReload","lastSwitchId","FuncClosed","onClosed","removeMenuState","lastCloseId","indexOf","split","_a","openMenu","funcId","reload","paramsMap","buildParamMap","openFuncWithParam","openApp","appId","appEntrance","paramMap","appService","closeMenu","findDialog","isDialogComponent","rootComponent","closeFunc","getAppEntrance","closeApp","frameContext","parentFrameContext","object","path","defaultVal","PATH","shift","paramsObj","routerParamService","decodeURLParams","getParentMenuId","WEB_FORM_ROUTER_PARENT_ID","query","search","slice","reduce","val","decodeURIComponent","queryString","Router","RouterParamService","FrameworkService","AppService","TAB_EVENT","onTabClosed","onTabClosing","onTabSwitched","QuerystringService","RuntimeFrameworkService","getService","env","top","isSameOrigin","parent","rtfService","func","openMenu$","openMenuByStream","EMPTY","getEntityParam","callback","once","beforeCloseMenu","beforeClose","getMenuParams","addEventListener","token","handler","frmEvent","eventListener","getMenuSwitchControlEvent","subject","tabId_1","options_1","response","menuSwitchControl","subjectRegister","code","broadcast","subjectRemove","subjectNotify","notify","subjectResponse","observerToken","UID","responseUnSubscribe","environment","host","NavigationEventService","querystringService","formToken","runtimeFrameworkService","querystrings","handleTabSwitchEvent","handleTabClosedEvent","handleTabClosingEvent","eventTabId","fireTabSwitchEvent","onTabSwitchListeners","size","map","fireTabClosingEvent","formEventServices","delete","appContext","dispose","onClosingListeners","of","listeners","values","result$","userRejected","pipe","concatMap","take","tap","switchMap","every","fireTabClosedEvent","onClosedListeners","removeEventListener","clearEventListener","clear","FARRIS_FORM_COMPONENTS","InjectionToken","FarrisFormService","append","cmpIns","controls","getControls","warn","initCtrls","APP_CONTEXT_MANAGER","NavigationService","context","navigationEventService","injector","FrameContext","formAppContext","ApplicationId","appContextManager","registerDestroyEvent","destorySignal","enableRefresh","tabName","destructuring","translate","queryStringParams","convertToBoolean","buildParam","currentTabId","appType","AppType","Menu","entityParams","isReload","openMenuWithDimension","dim1","dim2","metadataId","App","openApp$","isInDialog","destory","parseParams","open","mode","modalId","configs","tabType","funcOrAppId","pageModalService","FEPageModalService","uiStateConfig","getObjectTypeConfig","modalConfig","buildConfigs","dialogType","pageModalRef","farrisFormService","componentType","componentRef","createComponentRef","showByUrl","isDialogRootComponent","header","el","nativeElement","querySelector","draggbar","cursor","navigate","commands","activatedRoute","ActivatedRoute","queryParams","lodash","merge","extras","skipLocationChange","relativeTo","String","translateService","TranslateToken","startsWith","endsWith","trim","transform","config","defaultConfigs","showButtons","objectTypeConfig","onClosingHandler","refresh","refreshCommandName","commandName","refreshFrameId","frameId","cancelChanges","ref","refreshForm","component","repository","frameContextManager","getFrameContextById","viewModel","uiStateObject","getFrameContext","componentFactoryResolver","getComponentFactoryResolver","contentCmptFactory","resolveComponentFactory","modalContentInjector","ReflectiveInjector","resolveAndCreate","uiState","setPropertyValue","ComponentFactoryResolver","Injector","IS_ADD","LAST_MODIFIED_ID","EditStateUtil","getLastModifiedId","virtualRootFrameContext","getVirtualRootFrameContext","lastModifiedId","getParam","setLastModifiedId","setParam","getAddState","setAddState","cancelAddState","setEditState","FormNotifyStrategyService","querystring","odocDisableNotification","toLowerCase","urlSearchParams","URLSearchParams","CommandService","innerContext","execute","waitForBeSession","restService","sessionService","getBeSessionId","beSessionId","extractResult","taskName","results","suspendFrameContextRowSelectedEvent","bindingData","rowSelectedEventSuspend","resumeFrameContextRowSelectedEvent","ViewModel","ValidationService","validate","getList","result_1","tslib_1.__values","result_1_1","isValid","alert","validationResults","validateCurrentRow","entityTypeInfo","primaryValue","list","currentId","entity","entityCollection","getEntityById","validateEntityAllowEmptyRule","entities","namespace","frameContexts","getFrameContextsByNamespace","getFrameContexts","isModal","hasOwnVerifyDetailService","rootViewModel","root","toValidate","formErrors","form","enableValidate","verifyInformations","formValid","formValidationRules","formContext","bindingObject","getObject","setShowValidationMsg","getValidationRules","rules","rule","isFormValid","observableList","getIndexById","zip","resultList","handleErrors","errors","validationError","children","errMsgObj","findId","target","PARENT_CLASS","parentPathData","isUdt","isGrid","getPaths","join","constraints","paths","property","changes","ChangeType","UpdateErrors","x","isValidated","collectValidationErrors","verifycationChanged","validateAll","getAllEntities","isMultiEntityValiate","getNotAllowEmptyBindingPaths","invalidPaths","bindingPaths","bindingList","getValue","tableNames_1","viewModelName","getViewModelNameByBindingPaths","bindingPath","formGroupName","deepFirstTraversalEntityTypeInfo","previousValue","isAllowEmpty","entityInfo","allowEmpty","getPropInfosByGroup","DataPropGroup","List","propInfo","typeInfo","nodeCode","pop","getFrameContextByBindingPath","caller","frameComponent","Function","validationResultTypes","offset","findIndex","targetField","field","propertyName","fullPath","resetValidation","isDialog","namespace_1","VerifyDetailService","filterDataGridComponent","Repository","validationAllResult","CardDataService","load","loadingTimerId","getById","formErrorService","onLoading","transitionActionParamName","skip","listening","sync","action_1","action","ngCommand","metadatas","actionName","formPrimaryValue","formState","stateMachine","stateName","ngAction","actions","transitTo","states","primaryValueChanged","showLoadingConfirm","resetForm","add","cascadeAdd","currentNamespace","currentFormFrameContexts","childFrameContexts","childBindingPaths","sort","a","rid","fpath","getPath","appendByPath","last","edit","update","update$","updateById","updateWithoutEmpty","checkBeforeUpdate","updateWithNotify","loadPaged","save","successMsg","updateChangesById","save$","applyChangesById","updateResult","showMessage","cancelWithCheck","revert","cancelWithoutCheck","BefRepositoryUtil","isExistUnsaveData","formMessageService","ifCancel","loadEntities","subPaths","subPath","subData","validationService","commandService","NavigationMiddlewareService","onClosing","navigationService","isChanged","opened","beforeCloseHandle","selectedChange","conform","cardDataService","getTabId","targetId","befRepository","getFormAppContext","GridMiddlewareService","onPageChanging","filters","eventParam","pageIndex","filterConditionManager","setConditions","ParamService","parseMapParams","asObservable","param","KeybindingService","bind","keybindingMap","keyBinding","method","register","binding","combo","_getCombo","keyMap","ctrlKey","altKey","shiftKey","bindingProvider","_dispatch","unregister","unbind","repeat","ready","keyInfo","charCodeAt","metaKey","Mousetrap.default","FilterConditionService","UIStateService","componentId","StateMachineService","transit","_currentFrameContext","_initLoad","initFormState","currentRootFrameContext","getCurrentRootFrameContext","toggleFormState","currentFrameContext","getAllRootFrameContext","rootFc","getFrameContextManagerMap","getFrameContextMap","rootFrameContextArr","ElementRef","className","includes","_clsDefaultName","addCssClass","removeCssClass","elementRef","originalClassName","getFormRootComponent","viewContext","virtualRootContext","StateMachine","BindingDataService","setCurrentId","getAllFrameContexts","setCurrentRow","BindingData","ApplicationParamService","highOrderInvoke","paramService","setupParams","setQueryParams","setStaticParams","parsedQueryParams","innerData","paramName","updateUIState","staicParams","staticParamsObj","mapStaticParamsToObject","staticParams","inDialog","sessionInfo","setSessionInfo","sessionId","Token","setBeSessionId","webFormRouteParams","decodeURI","encodeURI","prop","controlEvent","isObservable","event","EntityTraversingService","getPropValue","getEntityData","bindingListOrObject","BindingList","currentItem","toJSON","getEntityListData","EntityManipulationService","setPropValue","setValue","EntityAggregationService","count","splitedPath","splitPath","traversingService","listPath","sum","accTotal","entityData","propValue","parseFloat","propPath","isNaN","avg","total","max","accMax","min","accMin","currentData","pathItem","currentNode","propPathItem","unshift","EntityListService","pageSize","EntityService","manipulationService","aggregationService","BindingPathService","getBindingPathsByFrameContext","getBindingPathsByTableName","dataTypeInfo","tableName","level","originalCode","props","propInfoMap","idx","dataTypeInfo_1","getBindingPathsByPath","nodeCodes","getPropInfoByPath","group","getPathInfo","entityPath","propertyNames","FormControlService","getFormControlsByFrameContext","ngFormControls","getFormControlByBinding","ngFormControl","getFormControlIndexByFullPath","bindings","formControlBindingPaths","getFormControlIndexByBinding","FrameContextService","getFrameContextsByTableName","bindingPathService","getFrameContextsByPropertyPath","propertyPath","separtor","formControls","formControl","getFrameContextsByColumnName","columnName","getTypeInfoByPath","columnPropInfo","getPropInfos","dataPropInfo","metadataInfo","originalDataField","dataField","formControlService","getFrameContextsByBindingPath","FocusInvalidService","focusInvalidInput","rootElement","firstVerifyInformation","selectFirstVerifyInformation","focusElement","focusGridCell","focusableDataGrid","disabled","editCell","updateVerifyInformationsIndex","verifyInformation","tabIndex","input","getInputElementById","getAttribute","Number","frameIndex","domIndex","getFieldIndex","rowIndex","isGridComponent","getColumnIndex","dataGridColumnsName","columns","column","fields","fixed_1","fixed","fixedColumns","fixedColumnIndex","this_1","getIndexFromColumns","v1","v2","element","ownerDocument","getElementById","tagName","inputs","getElementsByTagName","getFormControlIndexByBindingPath","elementId","focused","elementToFocus","elements","querySelectorAll","subElements","focus","grid_1","getGridRef","frameElement_1","getComponentRef","focusById","matchedFrameContexts","componentsMap","componentManager","getComponentsByFrameId","datagridComponent","frameContextService","POSTER","RECEIVER","REPOSITORY","TAB_ID","ChangeItemService","init","changeItem","setBykey","getByKey","setIframePoster","itemChangePoster","getIframePoster","itemChangeReceiver","parentId","Observable","subscriber","getNextItemByCurrentId","setRepository","paginationInfo","currentIdx","nextIdx","getEntities","ListDataService","mergeFilterConditions","mergeSortConditions","fireQueryEvent","queryChild","fullPaths","EntityPathConverter","toEntityPathArray","substr","parentPaths","configPath","getPaginationConfigByPath","_b","messagePipe","messageType","insert","updateChanges","updateAllChanges","applyChanges","remove","ifSave","breakable","remove$","removeById","removeRows","ids","deleteCurrentRowIfNoChecks","removeByIds","refreshAfterRemoving","loadCmdName","loadCmdFrameId","_cancel","originalConditions","getFilters","conditions","lastFilter","Relation","relation","sorts","sortConditionManager","getConditionsByBindingPath","direction","filterConditionService","SubListDataService","insertByPath","innerRemove","removeWithoutConfirm","removeChildrenByIds","batchRemoveByPath","isConfirm","removeByPath","removeAndSave","fid","move","targets","findById","exchangeRowIndex","exchangeRowId","getIdByIndex","exchangeRow","exchangeRowPosition","isNullOrEmpty","swapById","BaseDataService","ParentTreeNodeUtil","selectFirstRootNode","hierarchyInfoKey","treeNodesData","firstRootNodeId","getFirstNodeId","selectedNode","selectNodeByBindingList","selectedNodeId","selectedNodeData","getNodeDataById","hasChildNodes","rootData","itemData","rootLayer_1","getRootLayer","layer","layers","minLayer","Math","getNextNodeId","currentNodeData","fLayer","fParentElement","siblingtreeNodesData","getChildNodesData","getNextSiblingNodeId","parentData","currentIndex","parentElement","nodeData","PathTreeNodeUtil","currentPath","fPath","substring","TreeUtilFactory","treeType","util","ParentTreeRepository","addSibling","addSiblingUri","baseUri","dataID","requestInfo","buildRequestInfo","headers","HttpHeaders","Content-Type","invoke","responseInfo","buildEntity","returnValue","addEntity","addChild","addChildUri","addSubSibling","nodes","addSubSiblingUri","entityManager","appendEntityByPath","addSubChild","addSubChildUri","loadByParentId","frozenCurrentRow","pagination","localEntities","getChildren","parentHierarchyInfo","getHierarchyInfoById","originalHierarchyInfoKey","getOriginalHierarchyInfoKey","entityFilter","FilterConditions","buildFiltersWithParent","SortConditions","IsUsePagination","Pagination","PageIndex","PageSize","PageCount","TotalCount","extendQuery","getPaginationInfo","updatePaginationInfoByPath","clearDescendantEntities","listData","buildEntities","addData","isTreeNodeLoadScene","addEntities","loadFullTree","fullTreeType","loadType","queryUrl","dataId","isUsePagination","virtualPropertyName","buildEntityFilter","selectedRowId","selectedRowId_1","hierarchyInfo","primaryKey","getAllParentIds","filterArray","relationType","parentLayer","parentFilterArray","FilterField","Value","Lbracket","Rbracket","Expresstype","Compare","hierarchyInfokey","getChildNodes","removeEntities","removeData","fparentElement","flayer","childHierarchyInfo","childs","getHierarchyInfo","FieldMetadataUtil","getNgObjects","entityType","findParent","currentHierarchyInfo","PathTreeRepository","pathHierarchyInfo","parentPath","TreeRepositoryFactory","TreeDataService","filtersArray","parseConditions","sortsArray","correctSelectedNode","hierarchyType","getHierarchyType","treeNodeUtil","errorService","loadByLevel","setLoadByLevelState","getIdToExpand","buildPaginationInfo","currentRowId","primaryKeyValue","firstChildId","expandNodes","idToExpand","setIdToExpand","conditionsString","reloadChild$","reloadByLevel","addChild$","nextNodeId","enableNodePagination","nodePageSize","nodePageIndex","isAdd","removeEntityById","getTreeNodeUtil","getNextNodeIdAfterRemoving","idToRemove","setNextNodeAfterRemoving","selectFirstRow","hierarchyInfoNgObjectInfo","FilterConditionDataService","EditDataService","editEntityById","RemoveDataService","enableRemoveAndSave","innerRemoveById","removeAndSaveById","removeAndSaveByIdForTree","checkIdsToRemove","treeDataService","removeAndSaveByIds","confirm$","confirmToRemove","removeEntityAndSaveById","ifRemove","listDataService","SaveDataService","SubTreeDataService","hierarchyInfoField","nodeCodeArray","BeActionService","invokeAction","actionUri","httpMethod","httpHeaders","innerInvokeAction","executeAction","buildQueryParams","queryParamsString","getRestService","hasRequestInfo","fullActionUri","ApproveService","submitApproveWithInteraction","bizBillID","submitApprove","interactionResult","beActionService","bizInstID","procDefId","processDefinitionId","formLoadingService","excutionResponse","procInstId","needInteraction","submitter","excute","interactionResponse","catchError","submitApproveWithBizDefKey","bizDefKey","approvePayload","startProcessPayload","variables","processDefinitionKey","submitApproveWithBizDefKeyUseControl","payload","wfTaskHandlerService","startProcess","childSubmitApproveWithBizDefKey","bizId","childBizId","cancelApprove","cancelSubmit","viewProcess","flowchartService","viewFlowChart","switchPrefixLetter","jsonObj","toUpper","_c","toUpperCase","WFSubmiteService","WFFlowchartService","WfTaskHandlerService","PrintService","printSingle","beMetaId","bizBillId","printArray","showWarning","printByIds","dataIds","printByIdsWithDimension","billCategoryId","sourceOptions","buildSourceOptions","sourceId","outputOptions","buildOutputOptions","FirstDimensionVal","SecondDimensionVal","printService","outputBEData","printMulti","filterCondition","sortCondition","includeChildData","entryFilter","filterConditions","sortConditions","sourceFilterOptions","buildSourceFilterOptions","outputBEDataWithFilter","printMultiWithDimension","sfo","DataIds","SourceId","RetrieveParam","retrieveParam","FormatId","formatId","ServiceUnit","serviceUnit","currentPage","pageRowCount","queryType","queryServiceId","queryParam","OutputType","outputType","PRINT","FileType","fileType","Html5","Path","DeviceId","deviceId","printJob","printerName","printSetting","printType","PrintType","Form","EntityFilter","commandContext","CloudprintService","ATTACHMENT_ORDER_FIELD","AttachmentUtil","convertToAttachmentInfos","fileInfos","fileInfo","convertToAttachmentInfo","attachmentId","fileName","getFirstAttachmentInfo","attachmentInfos","peekAttachmentIds","attachmentInfo","AttachmentDataService","updateRow","attachmentInfoFieldPath","updateUri","updateAttachInfo","createUpdateAttachInfo","syncAttachmentInfosToClient","updateRowWithPropertyName","updateRows","serverAttachInfo","createBatchCreateAttachInfo","isRootEntity","NodeCodes","batchUploadInfo","appendAttachmentInfosToClient","updateRowsWithConfigs","appendAttachmentInfos","updateRowsWithPropertyName","parentBindingPathArray","BindingPathConverter","toBindingPathArray","BefDataPathUtil","convertToObjectCodes","HiretryIds","convertToDataIdsForUpdate","AttachmentIds","AttachmentId","attachmentIds","convertToDataIdsForAdd","rootDataId","updateEntityById","keyValues","updateEntities","updateEntity","setValueByPath","prev","AttachmentService","setLanguageService","InjectFlags","uploadAndUpdateRow","rootDirId","parentDirName","rootId","defaultRootDirId","formId","defaultParentDirName","uploadLimit","UploadLimit","fileCount","attachmentIdList","getSpecialRow","getCurrentRow","getAttachmentIdsByPathAndDataIds","uploadDialogService","uploadFileWithLimit","FileState","New","firstAttachmentInfo","attachDataService","uploadAndUpdateRowWithPropertyName","uploadAndBatchAddRows","uploadAndBatchAddRowsWithPropertyName","download","attachId","getDownloadUrl","batchDownload","attachIds","metadataidlist","downloadService","attachIdsString","getMultipleDownloadUrl","downloadByDataId","batchDownloadByDataIds","previewByAttachmentInfoFieldPath","previewByAttachmentIds","previewByAttachmentInfoFieldPathWithIndex","currentRow","attachmentFieldName","getCurrentAttachmentId","previewFileListWithIndex","previewBySubDirName","subDirName","fileViewerService","viewerFormFile","previewBySubDirNameWithIndex","viewerFormFileWithIndex","viewerFileList","viewerFileListWithIndex","genVersion","versions","updateAttachmentVersion","versionField","historyField","attachmentFieldPath","attachmentField","attachmentBindingList","DataPathCreator","createByShortPathFromRoot","toArray","attachments_1","versionedRows","row","getEntityByPath","version","isAttachmentCanDelete","updateAttachmentHistory","fileNameMap_1","paths_1","array","y","xVersion","parseInt","entityListData","entityService","filteredEntityListData","UploadDialogService","DownloadService","FileViewerService","FileService","addFileRows","fileInfoFieldPath","getAttachmentInfosToAddFromContext","addFileRowsWithConfigs","process","attachmentInfos_1","mapFields","fileExtends","getFileExtendsFromContext","fUploadOutPut","extend","removeFileRows","getDataIdsToRemoveFromContext","isSublist","removeObservables","removeObservable","subListDataService","forkJoin","fileExtendFieldPath","fileExtend","fileId","convertFileIdToDataId","fileBindingPath","fileFieldName","fileListBindingPath","updateOrder","attachment","debounceTime","DialogService","createModalComponentRef","_providers","modalService","openModal","configObj","innerCompopnent","remote","useIsolateJs","parameter","dialogServiceInstance","componentCallback","componentModify","modalInstanceCallback","createRemoteForm","cmpRef","uistate","openHelpModal","events","editor","_d","_e","areaResponse","mapFields_1","valueOf","modals","openCallbackableModal","subject_1","frameId_1","_f","handle_1","_g","currentRow_1","formCmp","selectedItems","frameComtext","rows","mapFields_2","_h","event_1","_j","context_1","selectedItems_1","k","sourceKeyArray","targetValue","bindingPaths_1","targetPath","closeModal","moduleName_1","moduleName","System","import","then","module","moduleRef","entryComponent","componentRef_1","BsModalService","_componentFactoryResolver","SidebarService","openSidebar","sidebarUIService","sendIsOpen","closeSidebar","confirmBeforeClosingSidebar","checkAllEntityChanges","confirmResult","continueClosingSidebar","stopClosingSidebar","FarrisSidebarService","FilterService","stripFiltersWithSpecialValue","specialValues","strippedFilterArray","filterValue","getFilterValue","ComponentManagerService","appendControl","getControl","AuthorityService","queryOperationAuthority","operationIds","queryResult","j","dummyResult","Authority","setLabelMap","labelMap","operationLabelMap","opId","label","initialize","authorityService","operationAuth","authOfLabel","hasOperation","ExceptionHandler","setContext","FARRIS_COMMAND_SERVICE_PROVIDERS","UserSettingsService","timezone","baseOffset","i18nSetting","defaultLanguage","userDateFormat","userTimeFormat","userNumberFormat","negativeSign","numberDecimalDigits","numberDecimalSeparator","numberGroupSeparator","userRegionCode","frmI18nSettingService","getSetting","userSettings","FrmI18nSettingService","WorkFlowMessageService","listen","messageHandler","send","win","postMessage","sender","source","WorkFlowMessage","setup","workFlowMessageService","ceil","random","eventId","WorkFlowMessageHandler","onComponentInit","workFlowMessage","frameContextDestroySignal","appContextDestroySignal","resultTask","formFrameContexts","getFormFrameContexts","validation","message_1","buildMessage","throwIfEmpty","AppContextManager","appContexts","getAppContexts","contexts","frame","CompareType","ValueType","RelationType","FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS","provide","UserSettingsToken","useClass","TextHandler","convert","qc","tv","fieldCode","Like","And","DateRangeHandler","arr","drv","startTime","GreaterOrEqual","endTime","LessOrEqual","DropDownHandler","ddv","dv","Equal","Or","NumberRangeHandler","nrv","startValue","endValue","SmartHelpHandler","shv","isInputText","valueField","textValue","getOriginalValue","SingleYearHandler","yv","yearValue","CheckBoxHandler","tvv","SingleMonthHandler","mv","monthValue","MonthRangeHandler","mrv","SingleDateTimeHandler","dtv","datetimeValue","SingleNumberHandler","numValue","SingleDateHandler","_dateValue","getDate","dateValue","dtvFormat","today","isFirstDay","isLastDay","dateType","getDay","addDays","startOfWeek","endOfWeek","startOfMonth","endOfMonth","startOfYear","endOfYear","period","_date","addWeeks","addMonths","addYears","returnFormat","control","ComboLookUpHandler","cluv","arr_1","RadioHandler","rv","InputGroupHandler","igv","textField","itemValue","QueryConditionHandlerFactory","_instance","getHandler","controlType","queryConditionHandlerMapping","ControlType","Text","InputGroup","DateRange","DateTimeRange","DropDownList","NumberRange","SmartHelp","SingleYear","BoolCheck","SingleMonth","MonthRange","SingleDateTime","SingleNumber","SingleDate","ComboLookUp","Radio","QuerySolutionService","getUserSessionId","frameworkSessionService","setFilterConditions","queryConditionHandler","filterConditionList","isEmpty","getControlType","setCurrentQueryConditions","FrameworkSessionService","EndEditService","endEdit","RemoteSummaryService","summary","methodName","proxy","BatchEditService","openBatchEditDialog","batchEditDialogService","gridViewModel","ids_1","dialogRef_1","batchEdit","onConfirm","changeDetectionController","detach","updateBindingData","reattach","openHiddenHelp","helpId","componentManagerService","showDialog","clearHelpSelections","helpElement","displayValue","checkCurrentRow","mappings","getValueByPath","batchAppend","mappings_1","defaultValues_1","defaultValue","batchAppendByPathBasedOnHelpSelections","mappings_2","defaultValues_2","buildPath","batchAppendByPath","batchAppendBasedOnRowHelpSelections","bindingPath_1","defaultValues_3","bindingList_1","currentEntity","headItem","mappingRow","idMapField","sourceItemId_1","emptyRows_1","targetItem","request","clone","buildIds","copyRow","ignoreFields","ignoreFieldsArray","sources","action$","extractedFields","current","loadChild","afterIncrementalSelectHelpClose","associatedField","foreignKey","rootFrameContext","currentData_1","currentDataArray_1","appends","itemId","removes","selectItem","addAction$","removeAction$","removeEntityByPath","beforeMultiSelectHelpOpen","afterMultiSelectHelpClose","commandFrameId","onHelpClose","onHelpCloseHandler","path_1","createByPath","newEntity","suspendFrameContextEvent","resumeFrameContextEvent","suspend","updateLookupField","updateSimpleField","currentColumnType","dataType","dateStr","dateService","formatTo","updateBindingList","helpData","helpFields","idIndex","helpField","helpValue","targetBindingObject_1","fpaths","targetPropertyName","getBindingPathArray","f","filteredPaths","part","tailPath","EntityList","currentItemId","Entity","BatchEditDialogService","DateTimeHelperService","DiscussionGroupService","addComment","configId","visibility","buildAddCommentParam","queryComments","buildQueryCommentsUrl","queryAllOrgs","queryFrequentAtUsers","buildQueryFrequentAtUsersUrl","queryAtUsers","user","buildQueryAtUsersUrl","serverUri","bill","billId","comment","ListFilterConditionsService","setCurrentFilterConditions","FormManifestService","modulePath","formManifestPath","request$","mainfests","req$","httpClient","responseType","share","FORM_PATH_TOKEN","HttpClient","FormExpressionManifestService","formManifestService","formManifest","expressionManifest","expressions","ns","expressionPath","FORM_MANIFEST_SERVICE_TOKEN","LocalizationService","dateFormat","timeFormat","dateTimeFormat","numberFormat","date$$1","number","localize","transformDate","transformDateTime","transformNumber","getFormat","localizationType","formats","parseDateFormat","dateTime","parseTimeFormat","bigNumber","BigNumber","isBigNumber","isNegative","buildNumberFormat","prefix","absoluteValue","toFormat","groupSize","decimalSeparator","groupSeparator","Service","DataGridService","clearChecks","gridComponents","getFormGridComponents","gridComponent","clearSelections","clearCheckeds","uncheckDeletedRows","frameContextsInCurrentBindingPath","gridInCurrentFrame","getGridComponentByFrameContexts","grid","unCheckRows","childrenFrameContexts","childrenGridComponents","checkedRows","uncheckRows","grids","componentRefs","DatagridComponent","componentsRef","FormAttentionService","blink","duration","idOrEl","attentionService","catchAttention","AttentionService","Prop","InputType","FeatureRepository","getFeaturesByMaterialId","materialId","materialID","getConfigedValueByFeatureId","configID","configType","objType","objID","applyFeatures","charactValue","getHelpInfo","helpid","httpParams","condition","searchValue","helpID","filterStr","FeatureDataService","propset","propsets","translateName","inputtype","enum","enuminfo","isreadonly","isrequired","FeatureEditService","materialFeatureId","featureDataService","featureEditorService","buildFeatures","featureSet","featureTemplate","mergeFeatures","FeatureEditorService","ExpressionService","expression","customContext","deps","resolveService","groupDependencies","ExpressionUtil","getGroupFunctionDependency","entityContext","buildEntityContext","stateContext","buildStateContext","entityOriginalNodeCode","bignumber_js","expressionExecutor","eval","executeAsync","isGroupdMainEntity","dep","isEntityDependency","isGroupDependency","getEntity","collection","ENTITY_TEMPLATE","childrenEntityPaths","getChildrenEntityPaths","getCurrentRowByPaths","parent_1","node","__items__","__type__","uiState_1","getOwnPropertyNames","match","ResolveService","ExpressionExecutor","DirtyCheckingService","detectChanges","global","appRef","tick","cd","detectChangesAfter","ChangeDetectorRef","ApplicationRef","PopUpService","longPaths","entityListPaths","originalData","entityList_1","getEntityNodeByPath","item_1","entity_1","updateCurrentRow","getRootFrameContext","paths_2","modalBindingList","closeCheck","entityList","FormService","getIndex","ViewModelService","getGridColumns","PaginationService","resetChildrenPagination","childrenEntityCodes","getPropNamesByGroup","pageCount","FARRIS_COMMAND_SERVICE_FRAME_PROVIDERS","QUERYSOLUTION_HANDLER_TOKEN","LISTFILTER_HANDLER_TOKEN","FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN","MESSAGE_SERVICE_TOKEN","NOTIFY_SERVICE_TOKEN","FRAME_COMPONENT_INIT_HANDLER_TOKEN","multi","DYNAMIC_FARRIS_COMMAND_SERVICE_PROVIDERS","NgModule","providers","imports","WfTaskHandlerModule","exports","CommandServicesModule","MessagePipe","sendMessage","MessagePipeService","pipeName","useFormContext","pipeType","BackEndMessageHandler","isException","hasThrowError","collect","updateFormErrors","resetFormMessage","targetFrameContext","findTargetFrameContext","all","backEndMessage","bizMessages","hasFormlessError","bizMessage","location_1","getBindingPath","getFrameContextsByBindingPathAndColumnName","isDataGridComponent","isReadonlyDataGrid","isCurrentRow","getFormControlByColumnName","domPropertyName","mergeMessage","primary_1","buildItemTitle","defaultI18nValue","columns_1","columns_1_1","rows_1","rows_1_1","bizMessages_1","bizMessages_1_1","post","formItems","isPropertyExist","backend-message-1","template","zh-CHT","currentLanguage","getCurrentLanguage","getBindingPathByTableName","entityPropertyInfo","entityPropertyName_1","randomFrameContext","mappingName_1","entries","clearBackendError","virtualRootComponent","TabId","AppId","AppEntrance","FuncId"],"mappings":"s2FAQA,IAAAA,uBAACC,EAAAA,aAGDD,GAHA,SAAAA,IAEWE,KAAAC,UAAY,IAAIC,EAAAA,QCA3B,IAAAC,GAkCSA,EAAAC,UAAAC,WAAP,SAAkBC,GAChBH,EAAmBI,UAAYD,GAK1BH,EAAAC,UAAAI,KAAP,SAAYC,GACV,IAAqC,IAAjCN,EAAmBI,UAAvB,CAGIP,KAAKU,aACPV,KAAKU,WAAWC,QAChBX,KAAKU,WAAa,MAEpBV,KAAKY,kBACL,IAAMC,EAAgBb,KAAKc,mBAAmBL,GAE9C,OADAT,KAAKU,WAAaV,KAAKe,eAAeP,KAAKK,GACpCb,KAAKU,aAMPP,EAAAC,UAAAY,qBAAP,SAA4BC,EAAmBR,GAA/C,IAAAS,EAAAlB,KAEQmB,EAAUC,WAAW,WACzBF,EAAKV,KAAKC,IACTQ,GAGH,OAFAjB,KAAKqB,gBAAgBC,KAAKH,GAC1BnB,KAAKY,kBACEO,GAMFhB,EAAAC,UAAAmB,iBAAP,SAAwBC,GACtBxB,KAAKyB,kBAAkBD,GACvBxB,KAAK0B,QAOCvB,EAAAC,UAAAU,mBAAR,SAA2BL,GACzB,IAAII,EAaJ,OAVIA,EAFEJ,EAC2B,iBAApBA,EACOA,EAEA,CAAEkB,QAAWlB,GAGf,IAECmB,eAAe,WAChCf,EAAcgB,MAAQ,GAEjBhB,GAMFV,EAAAC,UAAA0B,SAAP,WAAA,IAAAZ,EAAAlB,KACEG,EAAmBI,WAAY,EAC/BwB,OAAOX,WAAW,WAChBF,EAAKH,eAAee,YACnB,KACH9B,KAAKU,WAAa,KAClBV,KAAKgC,wBACLhC,KAAKiC,WAMC9B,EAAAC,UAAAqB,kBAAR,SAA0BD,GACxBU,aAAaV,GACbxB,KAAKqB,gBAAkBrB,KAAKqB,gBAAgBc,OAAO,SAAChB,GAClD,OAAOA,IAAYK,KAOfrB,EAAAC,UAAA4B,sBAAR,WAAA,IAAAd,EAAAlB,KACEA,KAAKqB,gBAAgBe,QAAQ,SAACjB,GAC5BD,EAAKO,kBAAkBN,MAOpBhB,EAAAC,UAAAsB,KAAP,WACO1B,KAAKU,YAI2B,IAAjCP,EAAmBI,YAGvBP,KAAKU,WAAWC,QAChBX,KAAKU,WAAa,KAClBV,KAAKiC,WARHjC,KAAKiC,WAaF9B,EAAAC,UAAA6B,QAAP,WACE,IAAqC,IAAjC9B,EAAmBI,UAAvB,CAGA,IAAM8B,EAAkBN,OAA+B,wBAAK,GACxDM,GAAYC,MAAMC,QAAQF,IAA+B,EAAlBA,EAASG,QAClDH,EAASD,QAAQ,SAACK,GACZA,IACFA,EAAQT,wBACJS,EAAQ/B,aACV+B,EAAQ/B,WAAWC,QACnB8B,EAAQ/B,WAAa,SAK7BqB,OAA+B,uBAAI,KAM7B5B,EAAAC,UAAAQ,gBAAR,WACE,IAAMyB,EAAkBN,OAA+B,wBAAK,GAC5DM,EAASf,KAAKtB,MACd+B,OAA+B,uBAAIM,GAzKtBlC,EAAAI,WAAY,sBAF5BR,EAAAA,sDATQ2C,EAAAA,sBACA5C,EAAgB6C,WAAA,CAAA,CAAAC,KA+BpBC,EAAAA,kBA9BIC,EAAAA,WAAUH,WAAA,CAAA,CAAAC,KA+BdC,EAAAA,cAqJL1C,GAxJE,SAAAA,EACUY,EACYgC,EACAC,GAHtB,IAAA9B,EAAAlB,KACUA,KAAAe,eAAAA,EACYf,KAAA+C,iBAAAA,EACA/C,KAAAgD,mBAAAA,EAbdhD,KAAAqB,gBAAyB,GAe3B0B,GACF/C,KAAK+C,iBAAiB9C,UAAUgD,UAC9B,SAAAC,GACEhC,EAAKQ,SCjCf,IAAAyB,EAAA,SAAAA,KACEnD,KAAAoD,IAAM,MACNpD,KAAAqD,GAAK,KACLrD,KAAAsD,kBAAoB,iDACpBtD,KAAAuD,kBAAoB,gCACpBvD,KAAAwD,kBAAoB,+BACpBxD,KAAAyD,qBAAuB,yBACvBzD,KAAA0D,oBAAsB,wBACtB1D,KAAA2D,gCAAkC,yCAClC3D,KAAA4D,sBAAwB,+BACxB5D,KAAA6D,2BAA6B,qCAC7B7D,KAAA8D,kBAAoB,8BACpB9D,KAAA+D,kBAAoB,sCACpB/D,KAAAgE,eAAiB,mBACjBhE,KAAAiE,iBAAmB,qBACnBjE,KAAAkE,kBAAoB,uBACpBlE,KAAAmE,oBAAsB,yBACtBnE,KAAAoE,aAAe,gBACfpE,KAAAqE,gBAAkB,mBAClBrE,KAAAsE,aAAe,gBACftE,KAAAuE,YAAc,eACdvE,KAAAwE,aAAe,gBACfxE,KAAAyE,aAAe,gBACfzE,KAAA0E,UAAY,aACZ1E,KAAA2E,WAAa,cACb3E,KAAA4E,YAAc,sBACd5E,KAAA6E,WAAa,eACb7E,KAAA8E,cAAgB,wBAChB9E,KAAA+E,YAAc,oBACd/E,KAAAgF,gBAAkB,oBAClBhF,KAAAiF,cAAgB,uBAChBjF,KAAAkF,YAAc,iBACdlF,KAAAmF,YAAc,gBACdnF,KAAAoF,UAAY,qDACZpF,KAAAqF,gBAAkB,2HAClBrF,KAAAsF,gBAAkB,0DAClBtF,KAAAuF,mBAAqB,2BACrBvF,KAAAwF,kBAAoB,0CACpBxF,KAAAyF,oBAAsB,oCACtBzF,KAAA0F,kBAAoB,yBACpB1F,KAAA2F,oBAAsB,6BACtB3F,KAAA4F,iBAAmB,uCACnB5F,KAAA6F,yBAA2B,iCAC3B7F,KAAA8F,gBAAkB,wBAClB9F,KAAA+F,kBAAoB,2CACpB/F,KAAAgG,kBAAoB,2CACpBhG,KAAAiG,eAAiB,kCACjBjG,KAAAkG,mBAAqB,SACdlG,KAAAmG,cAAgB,kBAChBnG,KAAAoG,aAAe,iBACfpG,KAAAqG,oBAAsB,0CACtBrG,KAAAsG,YAAc,gDACdtG,KAAAuG,aAAe,uCACfvG,KAAAwG,QAAU,UACVxG,KAAAyG,OAAS,SACTzG,KAAA0G,kBAAoB,2CACpB1G,KAAA2G,mBAAqB,kCACrB3G,KAAA4G,eAAiB,kCACjB5G,KAAA6G,aAAe,6BACf7G,KAAA8G,kBAAoB,0CACpB9G,KAAA+G,qBAAuB,qDACvB/G,KAAAgH,cAAgB,wCAChBhH,KAAAiH,sBAAwB,0CACxBjH,KAAAkH,wBAA0B,0CAC1BlH,KAAAmH,oBAAsB,qEACtBnH,KAAAoH,YAAc,gFACdpH,KAAAqH,aAAe,4CACfrH,KAAAsH,iBAAmB,OACnBtH,KAAAuH,KAAO,sBACPvH,KAAAwH,YAAc,eACdxH,KAAAyH,WAAa,cACbzH,KAAA0H,MAAQ,QACR1H,KAAA2H,oBAAsB,2FACtB3H,KAAA4H,iBAAmB,kBC1E5BC,EAAA,SAAAA,KACS7H,KAAAoD,IAAM,IACNpD,KAAAqD,GAAK,IACLrD,KAAAsD,kBAAoB,iBACpBtD,KAAAuD,kBAAoB,SACpBvD,KAAAwD,kBAAoB,WACpBxD,KAAAyD,qBAAuB,UACvBzD,KAAA0D,oBAAsB,UACtB1D,KAAA2D,gCAAkC,aAClC3D,KAAA4D,sBAAwB,UACxB5D,KAAA8D,kBAAoB,WACpB9D,KAAA6D,2BAA6B,gBAC7B7D,KAAA+D,kBAAoB,cACpB/D,KAAAgE,eAAiB,SACjBhE,KAAAiE,iBAAmB,SACnBjE,KAAAkE,kBAAoB,WACpBlE,KAAAmE,oBAAsB,WACtBnE,KAAAoE,aAAe,OACfpE,KAAAqE,gBAAkB,SAClBrE,KAAAsE,aAAe,OACftE,KAAAuE,YAAc,OACdvE,KAAAwE,aAAe,OACfxE,KAAAyE,aAAe,OACfzE,KAAA0E,UAAY,OACZ1E,KAAA2E,WAAa,OACb3E,KAAA4E,YAAc,QACd5E,KAAA6E,WAAa,QACb7E,KAAA8E,cAAgB,QAChB9E,KAAA+E,YAAc,QACd/E,KAAAgF,gBAAkB,QAClBhF,KAAAiF,cAAgB,UAChBjF,KAAAkF,YAAc,UACdlF,KAAAmF,YAAc,OACdnF,KAAAoF,UAAY,yBACZpF,KAAAqF,gBAAkB,6BAClBrF,KAAAsF,gBAAkB,mBAClBtF,KAAAuF,mBAAqB,iBACrBvF,KAAAwF,kBAAoB,iBACpBxF,KAAAyF,oBAAsB,aACtBzF,KAAA0F,kBAAoB,SACpB1F,KAAA2F,oBAAsB,SACtB3F,KAAA4F,iBAAmB,UACnB5F,KAAA6F,yBAA2B,YAC3B7F,KAAA8F,gBAAkB,UAClB9F,KAAA+F,kBAAoB,aACpB/F,KAAAgG,kBAAoB,aACpBhG,KAAAiG,eAAiB,UACjBjG,KAAAkG,mBAAqB,KACrBlG,KAAAmG,cAAgB,WAChBnG,KAAAoG,aAAe,YACfpG,KAAAqG,oBAAsB,aACtBrG,KAAAsG,YAAc,sBACdtG,KAAAuG,aAAe,aACfvG,KAAAwG,QAAU,KACVxG,KAAAyG,OAAS,KACTzG,KAAA0G,kBAAoB,aACpB1G,KAAA2G,mBAAqB,cACrB3G,KAAA4G,eAAiB,YACjB5G,KAAA6G,aAAe,eACf7G,KAAA8G,kBAAoB,cACpB9G,KAAA+G,qBAAuB,aACvB/G,KAAAgH,cAAgB,aAChBhH,KAAAiH,sBAAwB,cACxBjH,KAAAkH,wBAA0B,cAC1BlH,KAAAmH,oBAAsB,mBACtBnH,KAAAoH,YAAc,kBACdpH,KAAAqH,aAAe,cACfrH,KAAAsH,iBAAmB,KACnBtH,KAAAuH,KAAO,SACPvH,KAAAwH,YAAc,OACdxH,KAAAyH,WAAa,OACbzH,KAAA0H,MAAQ,MACR1H,KAAA2H,oBAAsB,uBACtB3H,KAAA4H,iBAAmB,SCzE5BE,EAAA,SAAAA,KACS9H,KAAAoD,IAAM,IACNpD,KAAAqD,GAAK,IACLrD,KAAAsD,kBAAoB,iBACpBtD,KAAAuD,kBAAoB,SACpBvD,KAAAwD,kBAAoB,WACpBxD,KAAAyD,qBAAuB,UACvBzD,KAAA0D,oBAAsB,UACtB1D,KAAA2D,gCAAkC,aAClC3D,KAAA4D,sBAAwB,UACxB5D,KAAA8D,kBAAoB,WACpB9D,KAAA6D,2BAA6B,gBAC7B7D,KAAA+D,kBAAoB,cACpB/D,KAAAgE,eAAiB,SACjBhE,KAAAiE,iBAAmB,SACnBjE,KAAAkE,kBAAoB,WACpBlE,KAAAmE,oBAAsB,WACtBnE,KAAAoE,aAAe,OACfpE,KAAAqE,gBAAkB,SAClBrE,KAAAsE,aAAe,OACftE,KAAAuE,YAAc,OACdvE,KAAAwE,aAAe,OACfxE,KAAAyE,aAAe,OACfzE,KAAA0E,UAAY,OACZ1E,KAAA2E,WAAa,OACb3E,KAAA4E,YAAc,QACd5E,KAAA6E,WAAa,QACb7E,KAAA8E,cAAgB,QAChB9E,KAAA+E,YAAc,QACd/E,KAAAgF,gBAAkB,QAClBhF,KAAAiF,cAAgB,UAChBjF,KAAAkF,YAAc,UACdlF,KAAAmF,YAAc,OACdnF,KAAAoF,UAAY,yBACZpF,KAAAqF,gBAAkB,6BAClBrF,KAAAsF,gBAAkB,mBAClBtF,KAAAuF,mBAAqB,iBACrBvF,KAAAwF,kBAAoB,iBACpBxF,KAAAyF,oBAAsB,aACtBzF,KAAA0F,kBAAoB,SACpB1F,KAAA2F,oBAAsB,SACtB3F,KAAA4F,iBAAmB,UACnB5F,KAAA6F,yBAA2B,YAC3B7F,KAAA8F,gBAAkB,UAClB9F,KAAA+F,kBAAoB,aACpB/F,KAAAgG,kBAAoB,aACpBhG,KAAAiG,eAAiB,UACjBjG,KAAAkG,mBAAqB,KACrBlG,KAAAmG,cAAgB,WAChBnG,KAAAoG,aAAe,YACfpG,KAAAqG,oBAAsB,aACtBrG,KAAAsG,YAAc,sBACdtG,KAAAuG,aAAe,aACfvG,KAAAwG,QAAU,KACVxG,KAAAyG,OAAS,KACTzG,KAAA0G,kBAAoB,aACpB1G,KAAA2G,mBAAqB,cACrB3G,KAAA4G,eAAiB,YACjB5G,KAAA6G,aAAe,eACf7G,KAAA8G,kBAAoB,cACpB9G,KAAA+G,qBAAuB,aACvB/G,KAAAgH,cAAgB,aAChBhH,KAAAiH,sBAAwB,cACxBjH,KAAAkH,wBAA0B,cAC1BlH,KAAAmH,oBAAsB,mBACtBnH,KAAAoH,YAAc,kBACdpH,KAAAqH,aAAe,cACfrH,KAAAsH,iBAAmB,KACnBtH,KAAAuH,KAAO,SACPvH,KAAAwH,YAAc,OACdxH,KAAAyH,WAAa,OACbzH,KAAA0H,MAAQ,MACR1H,KAAA2H,oBAAsB,uBACtB3H,KAAA4H,iBAAmB,SC1E5BG,GAOgBA,EAAAC,OAAd,SAAqBC,GACnB,IAA8C,IAA1CjI,KAAKkI,mBAAmBC,IAAIF,GAC9B,OAAOjI,KAAKkI,mBAAmBE,IAAIH,GAGrC,IAAII,EACJ,OAAQJ,GACN,IAAK,SACHI,EAAkB,IAAIR,EACtB,MACF,IAAK,KACHQ,EAAkB,IAAIlF,EACtB,MACF,IAAK,SACHkF,EAAkB,IAAIP,EACtB,MACF,QACEO,EAAkB,IAAIR,EAK1B,OAFA7H,KAAKkI,mBAAmBI,IAAIL,EAAUI,GAE/BA,GA3BMN,EAAAG,mBAAmD,IAAIK,IA6BxER,GA/BA,SAAAA,KCIA,IAAAS,GA4FEC,OAAAC,eAAcF,EAAApI,UAAA,kBAAe,KAA7B,WACE,OAAO2H,EAAuBC,OAAOhI,KAAKiI,2CAe9BO,EAAAG,YAAd,WACE,GAAI3I,KAAK4I,cACP,OAAO5I,KAAK4I,cAEd,IAAMC,EAAW,IAAIL,EAAgB,UAErC,OADAA,EAAgBI,cAAgBC,GAO1BL,EAAApI,UAAA0I,iBAAR,WAAA,IAAA5H,EAAAlB,KACEyI,OAAOM,KAAK/I,KAAKqI,iBAAiBjG,QAAQ,SAAC4G,GACzCP,OAAOC,eAAexH,EAAM8H,EAAU,CACpCZ,IAAK,WACH,OAAOlH,EAAKmH,gBAAgBW,SAtHrBR,EAAAI,cAAiC,yBANjD7I,EAAAA,+EAmGc8C,EAAAA,UAAQ,CAAAD,KAAIqG,EAAAA,OAAMC,KAAA,CAACC,EAAAA,gBA8BlCX,GA9BE,SAAAA,EAA2CY,GAZjCpJ,KAAAiI,SAAW,SAanBjI,KAAKiI,SAAWmB,GAAY,SAC5BpJ,KAAK8I,mBACLN,EAAgBI,cAAgB5I,KC9FpC,IAAIqJ,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBZ,OAAOe,gBAClB,CAAEC,UAAW,cAAgBnH,OAAS,SAAUgH,EAAGC,GAAKD,EAAEG,UAAYF,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIG,KAAKH,EAAOA,EAAE3H,eAAe8H,KAAIJ,EAAEI,GAAKH,EAAEG,MACpDJ,EAAGC,IAG5B,SAAgBI,EAAUL,EAAGC,GAEzB,SAASK,IAAO5J,KAAK6J,YAAcP,EADnCD,EAAcC,EAAGC,GAEjBD,EAAElJ,UAAkB,OAANmJ,EAAad,OAAOT,OAAOuB,IAAMK,EAAGxJ,UAAYmJ,EAAEnJ,UAAW,IAAIwJ,GAG5E,IAAIE,EAAW,WAQlB,OAPAA,EAAWrB,OAAOsB,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAU5H,OAAQ0H,EAAIC,EAAGD,IAE5C,IAAK,IAAIR,KADTO,EAAIG,UAAUF,GACOzB,OAAOrI,UAAUwB,eAAeyI,KAAKJ,EAAGP,KAAIM,EAAEN,GAAKO,EAAEP,IAE9E,OAAOM,IAEKM,MAAMtK,KAAMoK,YAGhC,SAoEgBG,GAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWT,EAAI,EAChE,OAAIO,EAAUA,EAAEJ,KAAKG,GACd,CACHI,KAAM,WAEF,OADIJ,GAAKN,GAAKM,EAAEhI,SAAQgI,OAAI,GACrB,CAAEK,MAAOL,GAAKA,EAAEN,KAAMY,MAAON,KAKhD,SAAgBO,GAAOP,EAAGL,GACtB,IAAIM,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBQ,EAAYC,EAA3Bf,EAAIO,EAAEJ,KAAKG,GAAOU,EAAK,GAC3B,IACI,WAAc,IAANf,GAAsB,EAANA,QAAca,EAAId,EAAEU,QAAQE,MAAMI,EAAG5J,KAAK0J,EAAEH,OAExE,MAAOM,GAASF,EAAI,CAAEE,MAAOA,WAEzB,IACQH,IAAMA,EAAEF,OAASL,EAAIP,EAAU,YAAIO,EAAEJ,KAAKH,WAExC,GAAIe,EAAG,MAAMA,EAAEE,OAE7B,OAAOD,EAGX,SAAgBE,KACZ,IAAK,IAAIF,EAAK,GAAIhB,EAAI,EAAGA,EAAIE,UAAU5H,OAAQ0H,IAC3CgB,EAAKA,EAAGG,OAAON,GAAOX,UAAUF,KACpC,OAAOgB,EC3IX,IAAAI,IAMgBA,GAAAC,gBAAd,SAA8BC,GAC5B,IAAMC,EAAiB1J,OACvB,GAAI0J,EAAUC,eAAiBD,EAAUC,cAAcC,QACrD,OAAOF,EAAUC,cAAcC,QAAQ,OAAQH,GAC1C,GAAII,SAASC,uBAAyBD,SAASC,sBAAsB,QAAS,CACnF,IAAIC,EAAWF,SAASG,cAAc,YACtCD,EAASE,YAAcR,EACvBM,EAASG,MAAMC,SAAW,QAC1BN,SAASO,KAAKC,YAAYN,GAC1BA,EAASO,SACT,IACE,OAAOT,SAASU,YAAY,QAC5B,MAAOC,YAEPX,SAASO,KAAKK,YAAYV,IAG9B,OAAO,GAEXR,IAzBA,SAAAA,MCqBA,IAAAmB,8CAnBSC,EAAAA,uBACAlE,EAAe7F,WAAA,CAAA,CAAAC,KAqBnBC,EAAAA,cAEL4J,IAJE,SAAAA,GACSE,EACYC,GADZ5M,KAAA2M,gBAAAA,EACY3M,KAAA4M,gBAAAA,EAOvB,IAAAC,GAAAC,IAA2CC,EAAAA,GAA3CF,GAA2CJ,IAOlCK,GAAA1M,UAAA4M,gBAAP,SAAuB7B,GAChBA,GAILnL,KAAK2M,gBAAgBM,KAAK9B,EAAM+B,oDAzC3BR,EAAAA,uBACAlE,EAAe7F,WAAA,CAAA,CAAAC,KA+BnBC,EAAAA,cAWLiK,IAbE,SAAAA,GACEH,EACYC,UACZC,GAAAxC,KAAArK,KAAM2M,EAAiBC,IAAgB5M,KAgB3C,IAAA6M,GAAAM,IAA8CJ,EAAAA,GAA9CF,GAA8CJ,IAOrCU,GAAA/M,UAAA4M,gBAAP,SAAuB7B,GAChBA,GAILnL,KAAK2M,gBAAgBS,QAAQjC,EAAM+B,oDA7D9BR,EAAAA,uBACAlE,EAAe7F,WAAA,CAAA,CAAAC,KAmDnBC,EAAAA,cAWLsK,IAbE,SAAAA,GACER,EACYC,UACZC,GAAAxC,KAAArK,KAAM2M,EAAiBC,IAAgB5M,KAgB3C,IAAA6M,GAAAQ,IAA4CN,EAAAA,GAA5CF,GAA4CJ,IAanCY,GAAAjN,UAAA4M,gBAAP,SAAuB7B,GAChBA,GAILnL,KAAKsN,iBAAiBnC,IAGhBkC,GAAAjN,UAAAkN,iBAAR,SAAyBnC,GAAzB,IAOMoC,EAPNrM,EAAAlB,KACQwN,EAAerC,EAAM+B,SAAW,GAChCO,EAAOtC,EAAMsC,MAAQ,IAAIC,KACzBC,EAAYC,EAAOH,GAAMI,OAAO,uBAChCC,EAAS3C,EAAM4C,QAAa5C,EAAM+B,QAAO,YAAYS,EAAS,YAAYxC,EAAM6C,cAAkB,GAElGA,EAAe7C,EAAM6C,cAAgB,KAErCC,EAAU,CAEdC,eAAe,EACfC,QAAS,CACP,CACE3C,KAAMxL,KAAKoO,YAAY1G,MACvB2G,IAAK,yBACLC,OAAQ,WACNf,EAAW5M,WAKjB4N,MAAO,IACPC,OAAQ,IACRC,UAAU,EACVC,UAAW,CACTjB,KAAME,EACNhM,QAASqM,EACTW,WAAY,CACVnD,KAAMxL,KAAKoO,YAAY7G,KACvBqH,QAAS,SAAC3D,GACR,IACMO,EADSF,GAAcC,gBAAgBuC,GACvB5M,EAAKkN,YAAY5G,YAActG,EAAKkN,YAAY3G,WACtE8F,EAAWsB,QAAQC,eAAetD,EAAM,UAKhDxL,KAAK+O,aAAa5D,GAClBoC,EAAavN,KAAK2M,gBAAgBnM,KAAK,YAAagN,EAAcS,IAK5DZ,GAAAjN,UAAA2O,aAAR,SAAqB5D,GACdA,GAGA6D,SAAYA,QAAQ7D,OAGzB6D,QAAQ7D,MAAMA,8CA5ITuB,EAAAA,uBACAlE,EAAe7F,WAAA,CAAA,CAAAC,KAwEnBC,EAAAA,cAqELwK,IAvEE,SAAAA,GACEV,EACYC,GAFd,IAAA1L,EAGE2L,GAAAxC,KAAArK,KAAM2M,EAAiBC,IAAgB5M,YAJjCkB,EAAAkN,YAA+B,KAKrClN,EAAKkN,YAAcxB,EACd1L,EAAKkN,cACRlN,EAAKkN,YAAc,IAAI5F,KAsE7B,IAAAqE,GAAAoC,IAA4ClC,EAAAA,GAA5CF,GAA4CJ,IAOnCwC,GAAA7O,UAAA4M,gBAAP,SAAuB7B,GAChBA,GAILnL,KAAK2M,gBAAgBxB,MAAMA,EAAM+B,oDA/J5BR,EAAAA,uBACAlE,EAAe7F,WAAA,CAAA,CAAAC,KAqJnBC,EAAAA,cAWLoM,IAbE,SAAAA,GACEtC,EACYC,UACZC,GAAAxC,KAAArK,KAAM2M,EAAiBC,IAAgB5M,KChJ3C,ICRKkP,GAAAA,GDQLC,IAyBgBA,GAAAxG,YAAd,SAA0BgE,EAAkCC,GAK1D,OAJK5M,KAAKoP,mBACRpP,KAAKoP,iBAAmB,IAAID,GAAiBxC,EAAiBC,IAGzD5M,KAAKoP,kBAOPD,GAAA/O,UAAAiP,2BAAP,SAAkCC,GAChC,IAAIC,EAEJ,OAAQD,GACN,KAAA,EACEC,EAAoB,IAAIzC,GAAsB9M,KAAK2M,gBAAiB3M,KAAK4M,iBACzE,MACF,KAAA,EACE2C,EAAoB,IAAIpC,GAAyBnN,KAAK2M,gBAAiB3M,KAAK4M,iBAC5E,MACF,KAAA,EACE2C,EAAoB,IAAIlC,GAAuBrN,KAAK2M,gBAAiB3M,KAAK4M,iBAC1E,MACF,KAAA,EACE2C,EAAoB,IAAIN,GAAuBjP,KAAK2M,gBAAiB3M,KAAK4M,iBAC1E,MACF,QAGE2C,EAAoB,IAAIlC,GAAuBrN,KAAK2M,gBAAiB3M,KAAK4M,iBAI9E,OAAO2C,GAtDMJ,GAAAC,iBAAqC,0BANrDrP,EAAAA,uDARQ2M,EAAAA,uBACAlE,EAAe7F,WAAA,CAAA,CAAAC,KAsBnBC,EAAAA,cA+CLsM,IAjDE,SAAAA,GACSxC,EACaC,GADb5M,KAAA2M,gBAAAA,EACa3M,KAAA4M,gBAAAA,GCvBnBsC,GAAAA,GAAAA,IAAc,IACfA,GAAA,KAAA,GAAA,OACAA,GAAAA,GAAA,QAAA,GAAA,UACAA,GAAAA,GAAA,SAAA,GAAA,WACAA,GAAAA,GAAA,YAAA,GAAA,cACAA,GAAAA,GAAA,YAAA,GAAA,cAMJ,IAAAM,IAOkBA,GAAAC,kBAAd,SAAgCC,GAC5B,IAAKA,EACD,OAAO,KAGX,IAAIC,EAAa,KAgBjB,OAdID,EAAoB,KAA2B,IAApBA,EAC3BC,EAAa,KACe,KAArBD,GAA4BA,EAAoB,IACvDC,EAAaT,GAAeU,KACA,KAArBF,GAA4BA,EAAoB,IACvDC,EAAaT,GAAeW,QACA,KAArBH,GAA4BA,EAAoB,IACvDC,EAAaT,GAAeY,SACA,KAArBJ,GAA4BA,EAAoB,IACvDC,EAAaT,GAAea,YACA,KAArBL,GAA4BA,EAAoB,MACvDC,EAAaT,GAAec,aAGzBL,GAEfH,IA9BA,SAAAA,MCDA,IAAAS,IAYSA,GAAA7P,UAAAsO,UAAP,SAAiB/M,EAAiBwJ,GAE5BA,GAASA,EAAMvJ,eAAe,aAAmC,IAArBuJ,EAAe,UAG3DA,GAASnL,KAAKkQ,oBAAoB/E,GACpCnL,KAAKmQ,iBAAiBhF,GAItBnL,KAAKoQ,mBAAmBzO,KAOrBsO,GAAA7P,UAAA+P,iBAAP,SAAwB/K,GACtB,GAAKA,EAML,OAFmBoK,GAASC,kBAAkBrK,EAAUiL,SAGtD,KAAKnB,GAAea,YAClB,GAAyB,MAArB3K,EAAUiL,OAAgB,CAC5BrQ,KAAKsQ,WAAWC,aAAanL,GAC7B,MAGFpF,KAAKsQ,WAAWE,kBAAkBpL,GAClC,MACF,KAAK8J,GAAec,YAClBhQ,KAAKsQ,WAAWG,kBAAkBrL,GAClC,MACF,QACE,MAAM,IAAIsL,MAAM,iEAIdT,GAAA7P,UAAAgQ,mBAAR,SAA2BO,GACpBA,GAGL3Q,KAAKsQ,WAAWnF,MAAMwF,IAMhBV,GAAA7P,UAAA8P,oBAAR,SAA4B/E,GAC1B,QAAKA,GAGgB,iBAAVA,MAGQ,sBAAfA,EAAMyF,OAAgCzF,EAAMvJ,eAAe,YAAauJ,EAAMvJ,eAAe,WAG7FuJ,aAAiB0F,EAAAA,yCAzExB9Q,EAAAA,uDARQ+Q,UACAtI,EAAe7F,WAAA,CAAA,CAAAC,KAYnBC,EAAAA,cAyELoN,IA3EE,SAAAA,GACUK,EACY1D,GADZ5M,KAAAsQ,WAAAA,EACYtQ,KAAA4M,gBAAAA,ECAxB,IAAAkE,IAiBSA,GAAA1Q,UAAA2Q,SAAP,SAAgBlC,GACd,IAAMmC,EAAmChR,KAAKiR,eAAepC,GAC7D,OAAOqC,EAAAA,KAAKF,IAOPF,GAAA1Q,UAAA+Q,UAAP,SAAiBtC,GAAjB,IAAA3N,EAAAlB,KACQoR,EAA6B,IAAIC,QAAQ,SAACC,EAASC,GACvD,IAAMC,EAAYtQ,EAAKyL,gBAAgBwE,UACrCtC,EACA,CACE,CACErD,KAAMtK,EAAK0L,gBAAgBvJ,GAC3BgL,IAAK,oBACLC,OAAQ,WACNgD,GAAQ,GACRE,EAAU7Q,UAGd,CACE6K,KAAMtK,EAAK0L,gBAAgBxJ,IAC3BiL,IAAK,kBACLoD,cAAc,EACdnD,OAAQ,WACNgD,GAAQ,GACRE,EAAU7Q,cAKpB,OAAOuQ,EAAAA,KAAKE,IAOPN,GAAA1Q,UAAAsR,OAAP,SAAcC,GACZ,OAAO3R,KAAK2M,gBAAgB+E,OAAOC,IAO7Bb,GAAA1Q,UAAA6Q,eAAR,SAAuBpC,GAAvB,IAAA3N,EAAAlB,KACE,OAAO,IAAIqR,QAAQ,SAACC,EAASC,GAC3BrQ,EAAKyL,gBAAgBoE,SACnBlC,EACA,WAAQyC,GAAQ,IAChB,WAAQA,GAAQ,QASfR,GAAA1Q,UAAAoG,QAAP,SAAeqI,GACb,OAAO7O,KAAK2M,gBAAgBnG,QAAQqI,IAM/BiC,GAAA1Q,UAAA6M,KAAP,SAAY4B,GACV7O,KAAK2M,gBAAgBM,KAAK4B,IAMrBiC,GAAA1Q,UAAA+K,MAAP,SAAa0D,GACX7O,KAAK2M,gBAAgBxB,MAAM0D,IAMtBiC,GAAA1Q,UAAAgN,QAAP,SAAeyB,GACb7O,KAAK2M,gBAAgBS,QAAQyB,IAMxBiC,GAAA1Q,UAAAqQ,kBAAP,SAAyBrL,GACvB,IAAI+F,EAA+B/F,EAAU+F,MAC7C,GAAuB,iBAAnB,EACF,IACEA,EAAQyG,KAAKC,MAAM1G,GACnB,MAAOF,IAENE,GAAwB,MAAfA,EAAM2G,OAAiB3G,EAAM2G,OAASC,UAIN5C,GAAiBxG,YAAY3I,KAAK2M,gBAAiB3M,KAAK4M,iBAAiByC,2BAA2BlE,EAAM2G,OACtI9E,gBAAgB7B,GAJhCnL,KAAK2M,gBAAgBxB,MAAM/F,EAAUzD,UAUlCmP,GAAA1Q,UAAAoQ,kBAAP,SAAyBpL,GACvB,GAAKA,EAAL,CAGA,IACMoI,EADUpI,EAAU+F,OAAS/F,EAAU+F,MAAMA,OAAS/F,EAAU+F,MAAMA,MAAMxJ,SAClDyD,EAAUzD,SAAWyD,EAAUzD,QAAQqQ,QAAQ,6BAA8B,IAU7GhS,KAAK2M,gBAAgBnM,KAAK,QAASgN,EATnB,CAGdyE,YAAY,EACZ1D,MAAO,IACPC,OAAQ,IACRC,UAAU,MAWPqC,GAAA1Q,UAAAmQ,aAAP,SAAoBnL,GAClB,IAAM8M,EAAiB,oBAEvB,GAAK9M,IAAarD,OAAOmQ,GAAzB,CAIA,IAAMC,EAAO,CACXC,GAAI,CACFT,MAAO,UACPU,eAAgB,8CAChBC,GAAI,KACJ7L,OAAQ,UAEV8L,SAAU,CACRZ,MAAO,KACPU,eAAgB,oBAChBC,GAAI,KACJ7L,OAAQ,OAGZzG,KAAKwS,YAAcxS,KAAKwS,aAAe,SAEvC,IAAMC,EAAiB,CACrBd,MAAOQ,EAAKnS,KAAKwS,aAAab,MAC9Be,aAAc,CACZC,OAAQR,EAAKnS,KAAKwS,aAAaF,GAC/BM,SAAU,WACRC,EAASlS,QACToB,OAAOmQ,IAAkB,EACzB,IACMY,GADc1N,GAAaA,EAAU+F,OAAS,IACpB4H,cAAgB,cAChDhR,OAAOiR,SAASC,KAAO,sDAAsDH,GAE/EI,WAAYf,EAAKnS,KAAKwS,aAAa/L,OACnC0M,aAAc,WACZN,EAASlS,QACToB,OAAOmQ,IAAkB,IAG7BD,YAAY,EACZ1D,MAAO,IACPC,OAAQ,IACR4E,YAAY,GAERP,EAAW7S,KAAK2M,gBAAgBnM,KAAK,WAAY2R,EAAKnS,KAAKwS,aAAaH,eAAgBI,GAC9F1Q,OAAOmQ,IAAkB,EACrBW,GAAYA,EAASQ,QAAUR,EAASQ,OAAOxK,SAASyK,QAC1DT,EAASQ,OAAOxK,SAASyK,OAAOrQ,UAAU,WACxClB,OAAOmQ,IAAkB,2BArMhCnS,EAAAA,uDAbQ2M,EAAAA,uBAEAlE,EAAe7F,WAAA,CAAA,CAAAC,KAoBnBC,EAAAA,2CACAoG,EAAAA,OAAMC,KAAA,CAACC,EAAAA,gBAgMZ2H,IAnME,SAAAA,GACUnE,EACYC,EACO4F,GAFnBxS,KAAA2M,gBAAAA,EACY3M,KAAA4M,gBAAAA,EACO5M,KAAAwS,YAAAA,EAE3BxS,KAAK4M,gBAAkB5M,KAAK4M,iBAAmBpE,EAAgBG,cClBnE,IAAA4K,IAmBSA,GAAAnT,UAAAoT,WAAP,SAAe3E,GACb,OAAO7O,KAAKyT,cAAcD,WAAuB,CAC/C7B,MAAO3R,KAAK4M,gBAAgBzH,YAC5BuO,IAAK7E,EACL8E,QAAS,OAQNJ,GAAAnT,UAAA6M,KAAP,SAAY4B,EAAiBZ,GAC3B,IAAM2F,EAA+B,CACnCjC,MAAO3R,KAAK4M,gBAAgBzH,YAC5BuO,IAAK7E,EACL8E,QAAS,KAKX,OAHI1F,GAAWA,EAAQ4F,kBACdD,EAAcjC,MAEhB3R,KAAKyT,cAAcxG,KAAK2G,IAQ1BL,GAAAnT,UAAA0T,QAAP,SAAejF,EAAiBZ,GAC9B,IAAM2F,EAA+B,CACnCjC,MAAO3R,KAAK4M,gBAAgBzH,YAC5BuO,IAAK7E,EACL8E,QAAS,KAEP1F,GAAWA,EAAQ4F,kBACdD,EAAcjC,MAEvB3R,KAAKyT,cAAcK,QAAQF,IAQtBL,GAAAnT,UAAAgN,QAAP,SAAeyB,EAAiBZ,GAC9B,IAAM2F,EAA+B,CACnCjC,MAAO3R,KAAK4M,gBAAgBzH,YAC5BuO,IAAK7E,EACL8E,QAAS,KAEP1F,GAAWA,EAAQ4F,kBACdD,EAAcjC,MAEvB3R,KAAKyT,cAAcrG,QAAQwG,IAOtBL,GAAAnT,UAAA+K,MAAP,SAAa0D,EAAiBZ,GAC5B,IAAM2F,EAA+B,CACnCjC,MAAO3R,KAAK4M,gBAAgBzH,YAC5BuO,IAAK7E,EACL8E,QAAS,KAEP1F,GAAWA,EAAQ4F,kBACdD,EAAcjC,MAEvB3R,KAAKyT,cAActI,MAAMyI,yBA1F5B7T,EAAAA,uDATQgU,EAAAA,qBACAvL,EAAe7F,WAAA,CAAA,CAAAC,KAgBnBC,EAAAA,cAoFL0Q,IArFE,SAAAA,GAAoBE,EACE7G,GADF5M,KAAAyT,cAAAA,GACEzT,KAAA4M,gBAAAA,KAGlB5M,KAAK4M,gBAAkBpE,EAAgBG,uBCXlCqL,GAAA5T,UAAA6T,QAAP,WACI,IAAMC,EAAgBlU,KAAKmU,UAAUC,mBACrCpU,KAAKmU,UAAUE,kBAAkBC,EAAAA,gBAAgBC,KAAML,IAEpDF,GAAA5T,UAAAoU,SAAP,WACI,IAAMN,EAAgBlU,KAAKmU,UAAUC,mBACrCpU,KAAKmU,UAAUE,kBAAkBC,EAAAA,gBAAgBG,KAAMP,IAEpDF,GAAA5T,UAAAsU,aAAP,WACI1U,KAAKmU,UAAUO,gBAGZV,GAAA5T,UAAAuU,aAAP,WACI3U,KAAKmU,UAAUQ,qCAnBtB5U,EAAAA,uDAHQ6U,EAAAA,iBAwBTZ,IAnBI,SAAAA,GACYG,GAAAnU,KAAAmU,UAAAA,ECDhB,IAAAU,IASSA,GAAAzU,UAAA0U,WAAP,SAAkBjK,GAChB,QAASA,wBAVZ9K,EAAAA,oDAYD8U,IATE,SAAAA,MCCF,IAAAE,IAgBSA,GAAA3U,UAAA4U,gBAAP,SAAuBC,GAGrB,OAAoB,IADAjV,KAAKkV,YAAYD,MAKjCA,IAIJjV,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAgB7G,kBAAmB,CAAE8N,WAAW,IAC7EuB,EAAAA,UAMFL,GAAA3U,UAAAiV,gBAAP,SAAuBC,GAErB,OAAoB,IADAtV,KAAKkV,YAAYI,MAKjCA,IAIJtV,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAgB5G,kBAAmB,CAAE6N,WAAW,IAC7EuB,EAAAA,UAMFL,GAAA3U,UAAA8U,YAAP,SAAmBK,GACjB,IACMC,EADUxV,KAAc,QACPyV,QAAQD,OAG/B,OAA0C,IAAtCA,EAAO5T,eAAe,cAA+D,IAAtC4T,EAAO5T,eAAe,aAM9D,KAAP2T,wBA9DPxV,EAAAA,uDAPQ+Q,UACAyC,UACA/K,EAAe7F,WAAA,CAAA,CAAAC,KAWnBC,EAAAA,cA8DLkS,IAjEE,SAAAA,GACUW,EACAP,EACYvI,GAFZ5M,KAAA0V,eAAAA,EACA1V,KAAAmV,kBAAAA,EACYnV,KAAA4M,gBAAAA,EAEf5M,KAAK4M,kBACR5M,KAAK4M,gBAAkBpE,EAAgBG,eCZ7C,IAAAgN,IAMEA,GAAAvV,UAAAwV,QAAA,SAAQC,EAAmBC,EAAiBC,GAC1C/V,KAAKgW,SAASJ,QAAQC,EAAWC,EAAWC,yBAP/ChW,EAAAA,uDANQkW,EAAAA,iBAeTN,IANE,SAAAA,GAAoBK,GAAAhW,KAAAgW,SAAAA,ECJtB,IAAAE,IAGYA,GAAA9V,UAAA+V,SAAR,WACI,IAAMC,IAASC,gBAAkBA,eAAeC,QAAQtW,KAAKuW,mCAAqC,KAClG,OAAMH,EACKxE,KAAKC,MAAMuE,GAEf,IAEHF,GAAA9V,UAAAoW,SAAR,SAAiBC,GACXJ,gBAAkBA,eAAeK,QAAQ1W,KAAKuW,iCAAkC3E,KAAK+E,UAAUF,KAE9FP,GAAA9V,UAAAwW,aAAP,SAAoBC,EAAsBC,EAAqBzG,GAC3D,QAD2D,IAAAA,IAAAA,GAAA,GACtDyG,EAAL,CAGA,IAAMC,EAAQ/W,KAAKmW,WACba,IAAkBD,GAASA,EAAMnV,eAAeiV,GAChDI,EAAY,CAAE1B,GAAIuB,EAAazG,OAAMA,GACvC2G,EACeD,EAAMF,GACWK,KAAK,SAAAC,GAAQ,OAAAA,EAAK5B,KAAOuB,KAErDC,EAAMF,GAAcvV,KAAK2V,GAG7BF,EAAMF,GAAgB,CAACI,GAE3BjX,KAAKwW,SAASO,KAEXb,GAAA9V,UAAAgX,aAAP,SAAoBP,EAAsBC,GACtC,IAAMC,EAAQ/W,KAAKmW,WACnB,GAAc,OAAVY,EACA,OAAO,KAGX,IADsBA,EAAMnV,eAAeiV,GAEvC,OAAO,KAEX,IAAMQ,EAAaN,EAAMF,GACnBS,EAAYD,EAAWlV,OAAO,SAAAgV,GAAQ,OAAgB,IAAhBA,EAAK9G,SACjD,YAA2B,IAAhByG,GAA+BA,EAAYtU,OAAS,EACpD8U,EAEJD,EAAWlV,OAAO,SAAAgV,GAAQ,OAAAA,EAAK9G,QAAU8G,EAAK5B,KAAOuB,KAEzDZ,GAAA9V,UAAAmX,gBAAP,SAAuBT,EAAqBzG,GACxC,IAAM0G,EAAQ/W,KAAKmW,WACL,OAAVY,IAGJtO,OAAOM,KAAKgO,GAAO3U,QAAQ,SAAAoV,GACvB,IAAMF,EAAYP,EAAMS,GAAKN,KAAK,SAAAC,GAAQ,OAAAA,EAAK5B,KAAOuB,IAChDQ,IACFA,EAAUjH,OAASA,KAG3BrQ,KAAKwW,SAASO,KAEXb,GAAA9V,UAAAqX,WAAP,SAAkBC,GACd1X,KAAK2X,iBAAiBD,GACtB1X,KAAK4X,gBAAgBF,IAEjBxB,GAAA9V,UAAAuX,iBAAR,SAAyBD,GACrB,IAAMX,EAAQ/W,KAAKmW,WACnB,GAAc,OAAVY,EACA,OAAO,KAEXtO,OAAOM,KAAKgO,GAAO3U,QAAQ,SAAA+U,GACnBA,IAASO,GAAUX,EAAMW,GAAQlV,OAAS,UACnCuU,EAAMI,KAGrBnX,KAAKwW,SAASO,IAEVb,GAAA9V,UAAAwX,gBAAR,SAAwBF,GACpB,IAAMX,EAAQ/W,KAAKmW,WACL,OAAVY,IAGJtO,OAAOM,KAAKgO,GAAO3U,QAAQ,SAAAyU,GACvB,IAAMgB,EAAad,EAAMF,GACrBgB,GAAkC,EAApBA,EAAWrV,QACzBqV,EAAWzV,QAAQ,SAAC0V,EAAOC,GACnBD,EAAMvC,KAAOmC,GACbG,EAAWG,OAAOD,EAAO,OAKzC/X,KAAKwW,SAASO,0BA3FrBhX,EAAAA,aA6FDmW,IA7FA,SAAAA,KAEqBlW,KAAAuW,iCAAmC,mCCYxD,IAAA0B,IAmCSA,GAAA7X,UAAA8X,MAAP,SAAaC,EAAa3C,GACxB2C,EAAMnY,KAAKoY,OAAOC,cAAc,CAACF,IAAMG,WACvCtY,KAAKuY,UAAUJ,EAAK3C,GACpBxV,KAAKoY,OAAOI,cAAcL,IAKrBF,GAAA7X,UAAAqY,cAAP,WAAA,IAAAvX,EAAAlB,KACQwV,EAAcxV,KAAK0Y,UAAU3W,OAAOiR,SAAS2F,MAC7CjB,EAAS1X,KAAK4Y,YAAc5Y,KAAK6Y,YACvC7Y,KAAK8Y,iBAAiBC,aAAa/Y,KAAK8Y,iBAAiBE,WAAY,SAAA/N,GACnE,GAAKA,EAAL,CAGA,IAAMsK,EAAKrU,EAAK+X,cAAchO,EAAEsK,KAAOtK,EAAEiO,MACnCC,EAAYjY,EAAKkY,iBAAiBhC,aAAa7B,GAC/CA,GAAMmC,IAAWnC,GAAQ4D,GAAgC,EAAnBA,EAAU3W,SACpDtB,EAAKmY,aACLnY,EAAKoY,aAAe/D,KAErBC,GAEHxV,KAAK8Y,iBAAiBC,aAAa/Y,KAAK8Y,iBAAiBS,WAAY,SAAAtO,GACnE,GAAKA,EAAL,CAGA/J,EAAKsY,SAAS5O,KAAKK,GACnB,IAAMsK,EAAKrU,EAAK+X,cAAchO,EAAEsK,KAAOtK,EAAEiO,MACzC,GAAIxB,IAAWnC,EAAf,CAGA,IAAM4D,EAAYjY,EAAKkY,iBAAiBhC,aAAaM,EAAQnC,GAEvDA,GAAQ4D,GAAgC,EAAnBA,EAAU3W,SACnCtB,EAAKuY,gBAAgBlE,GACrBrU,EAAKmY,aACLnY,EAAKwY,YAAcnE,MAEpBC,IAGGyC,GAAA7X,UAAAqZ,gBAAR,SAAwBP,GAClBlZ,KAAc,SAChBA,KAAKoZ,iBAAiB3B,WAAWyB,IAO7BjB,GAAA7X,UAAA6Y,cAAR,SAAsB1D,GACpB,OAAKA,IAGoB,IAArBA,EAAGoE,QAAQ,OACbpE,EAAKA,EAAGqE,MAAM,KAAK,IAEdrE,GAKD0C,GAAA7X,UAAAiZ,WAAR,WACE,IACErZ,KAAc,QAAgB,aAAc,WAAW,UACvD,MAAA6Z,MAOG5B,GAAA7X,UAAA0Z,SAAP,SAAgBC,EAAgBvE,EAAawE,QACrB,IAAXA,GAA4C,kBAAXA,IAC1CA,GAAS,GAEX,IAAMC,EAAYja,KAAKka,cAAc1E,GAC/BqB,EAAe7W,KAAK6Y,aAAe7Y,KAAK4Y,WAC9C5Y,KAAKoZ,iBAAiBxC,aAAaC,EAAckD,GACjDE,EAAU3R,IAAI,4BAA6BuO,GAC3C7W,KAAK8Y,iBAAiBqB,kBAAkBJ,EAAQE,EAAWD,IAStD/B,GAAA7X,UAAAga,QAAP,SAAeC,EAAeC,EAAqB9E,EAAawE,QACxC,IAAXA,GAA4C,kBAAXA,IAC1CA,GAAS,GAEX,IAAMO,EAAWva,KAAKka,cAAc1E,GAC9BqB,EAAe7W,KAAK4Y,YAAc5Y,KAAK6Y,YAC7C7Y,KAAKoZ,iBAAiBxC,aAAaC,EAAcwD,GACjDE,EAASjS,IAAI,4BAA6BuO,GACpC7W,KAAKwa,YACTxa,KAAKwa,WAAWJ,QAAQC,EAAOC,EAAaC,EAAUP,IAOlD/B,GAAA7X,UAAA8Z,cAAR,SAAsB1E,IAChB,MAAOA,GAAgE,iBAAXA,GAAuBA,EAAOhT,OAAS,KACrGgT,EAAS,IAEX,IAAM+E,EAAW,IAAIhS,IAMrB,MALsB,iBAAXiN,IACTA,EAAS5D,KAAK+E,UAAUnB,IAE1BA,EAASzT,OAA2B,mBAAEyT,GACtC+E,EAASjS,IAAI,wBAAyBkN,GAC/B+E,GAMFtC,GAAA7X,UAAAqa,UAAP,WACE,IAAMV,EAAwB/Z,KAAK6Y,YAC7BwB,EAAuBra,KAAK4Y,WAC5BiB,EAAA7Z,KAAA0a,aAAEC,EAAAd,EAAAc,kBAAmBC,EAAAf,EAAAe,cAC3B,GAAID,EACe3a,KAAKoI,IAAIwS,EAAe,aACzB,aAIlB,GAAe,OAAXb,GAAqC,iBAAXA,GAAuC,EAAhBA,EAAOvX,OAC1DxC,KAAK6a,UAAUd,QACV,GAAc,OAAVM,GAAmC,iBAAVA,GAAqC,EAAfA,EAAM7X,OAAY,CAC1E,IAAM8X,EAActa,KAAK8a,iBACzB9a,KAAK+a,SAASV,EAAOC,QAErBtL,QAAQ7D,MAAMnL,KAAK4M,gBAAoC,qBAOnDqL,GAAA7X,UAAAsa,WAAR,WAKE,IAJA,IAAIM,EAAehb,KAAKoI,IAAIpI,KAAM,wBAC9B2a,EAAoB3a,KAAKoI,IAAI4S,EAAc,wCAAwC,GAEnFC,EAAqBjb,KAAKoI,IAAI4S,EAAc,UACnB,MAAtBC,IAA+BN,GACpCK,EAAehb,KAAKoI,IAAI4S,EAAc,UACtCC,EAAqBjb,KAAKoI,IAAI6S,EAAoB,UAClDN,EAAoB3a,KAAKoI,IAAI4S,EAAc,wCAAwC,GAGrF,MAAO,CAAEL,kBAAiBA,EAAEC,cADN5a,KAAKoI,IAAI4S,EAAc,oBAWvC/C,GAAA7X,UAAAgI,IAAR,SAAY8S,EAAaC,EAA8BC,QAAA,IAAAA,IAAAA,EAAA,MACrD,IAAMC,EAAO/Y,MAAMC,QAAQ4Y,GACvBA,EACAA,EAAKvB,MAAM,KAAKzX,OAAO,SAAA+H,GAAK,OAAAA,EAAE1H,SAClC,OAAK6Y,EAAK7Y,OAIK,OAAX0Y,GAAmBA,IAAWnJ,WAA0C,oBAArBmJ,EAAOG,EAAK,IAC1DD,EAGFpb,KAAKoI,IAAI8S,EAAOG,EAAKC,SAAUD,EAAMD,GAPnCF,IAAWnJ,UAAYqJ,EAAaF,GAcxCjD,GAAA7X,UAAAya,UAAP,SAAiBd,GAEbA,EADGA,GACM/Z,KAAK6Y,YAEV7Y,KAAK8Y,kBACT9Y,KAAK8Y,iBAAiB+B,UAAUd,GAAQ9W,aAQrCgV,GAAA7X,UAAA2a,SAAP,SAAgBV,EAAgBC,GAE5BD,EADGA,GACKra,KAAK4Y,gBAEY,IAAhB0B,IACTA,EAActa,KAAK8a,kBAEf9a,KAAKwa,YACTxa,KAAKwa,WAAWO,SAASV,EAAOC,GAAarX,aAQzCgV,GAAA7X,UAAAmY,UAAR,SAAkBJ,EAAa3C,GAC7B,IAAI+F,EAEFA,EADoB,iBAAX/F,GAAkC,KAAXA,EACpB5D,KAAKC,MAAM2D,GAEXA,GAAU,GAIxBxV,KAAKwb,mBAAmBjD,UAAUJ,EAAKoD,IAMjCtD,GAAA7X,UAAAyY,UAAR,WACE,IAAMF,EAAO5W,OAAOiR,SAAS2F,KAC7B,IAAKA,EACH,OAAO,KAET,IAAMnD,EAASxV,KAAKyb,gBAAgB9C,GACpC,OAAInD,GAAUA,EAAO5T,eAAe,UAC3B4T,EAAOuE,OAEP,MAOH9B,GAAA7X,UAAAwY,SAAR,WACE,IAAMD,EAAO5W,OAAOiR,SAAS2F,KAC7B,IAAKA,EACH,OAAO,KAET,IAAMnD,EAASxV,KAAKyb,gBAAgB9C,GACpC,OAAInD,GAAUA,EAAO5T,eAAe,SAC3B4T,EAAO6E,MAEP,MAIHpC,GAAA7X,UAAAsb,gBAAR,WACE,IAAM/C,EAAO5W,OAAOiR,SAAS2F,KAC7B,IAAKA,EACH,OAAO,KAET,IAAMnD,EAASxV,KAAKyb,gBAAgB9C,GACpC,OAAInD,GAAUA,EAAO5T,eAAe,6BAC3B4T,EAAOmG,0BAEP,MAMH1D,GAAA7X,UAAA0a,eAAR,WACE,IAAMnC,EAAO5W,OAAOiR,SAAS2F,KAC7B,IAAKA,EACH,OAAO,KAET,IAAMnD,EAASxV,KAAKyb,gBAAgB9C,GACpC,OAAInD,GAAUA,EAAO5T,eAAe,eAC3B4T,EAAO8E,YAEP,MAOHrC,GAAA7X,UAAAqb,gBAAR,SAAwBG,GAKtB,YAJqB,IAAVA,IACTA,EAAQ7Z,OAAOiR,SAAS2F,MAAQ5W,OAAOiR,SAAS6I,QAEnCD,EAAME,MAAMF,EAAMjC,QAAQ,KAAO,GAAGC,MAAM,KAC3CmC,OAAO,SAACvG,EAAQmD,SACtBiB,EAAQjB,EAAKgB,QAAQ,KACrBnC,EAAMmB,EAAKmD,MAAM,EAAGlC,GACpBoC,EAAMrD,EAAKmD,MAAMlC,EAAQ,GAC/B,OAAOnR,OAAOsB,OAAOyL,IAAMqE,EAAA,IAAKrC,GAAMyE,mBAAmBD,GAAInC,KAC5D,KAEG5B,GAAA7X,UAAAsY,UAAR,SAAkBwD,GAChB,OAAKA,EAGUA,EAAYJ,MAAMI,EAAYvC,QAAQ,KAAO,GAAGC,MAAM,KACvDmC,OAAO,SAACvG,EAAQmD,SACtBiB,EAAQjB,EAAKgB,QAAQ,KACrBnC,EAAMmB,EAAKmD,MAAM,EAAGlC,GACpBoC,EAAMrD,EAAKmD,MAAMlC,EAAQ,GAC/B,OAAOnR,OAAOsB,OAAOyL,IAAMqE,EAAA,IAAKrC,GAAMyE,mBAAmBD,GAAInC,KAC5D,IARM,yBAlVZ9Z,EAAAA,uDAZQoc,EAAAA,cACAC,EAAAA,0BACAC,EAAAA,wBAAkBC,EAAAA,WAAU3Z,WAAA,CAAA,CAAAC,KA0BhCC,EAAAA,kBAzBIqT,GAAgBvT,WAAA,CAAA,CAAAC,KA0BpBC,EAAAA,kBAxBI2F,EAAe7F,WAAA,CAAA,CAAAC,KAyBnBC,EAAAA,cA0ULoV,IAhVE,SAAAA,GACUG,EACAoD,EACA1C,EACY0B,EACApB,EACAxM,GALZ5M,KAAAoY,OAAAA,EACApY,KAAAwb,mBAAAA,EACAxb,KAAA8Y,iBAAAA,EACY9Y,KAAAwa,WAAAA,EACAxa,KAAAoZ,iBAAAA,EACApZ,KAAA4M,gBAAAA,EAbd5M,KAAAsZ,aAAuB,KAIvBtZ,KAAA0Z,YAAsB,KAEvB1Z,KAAAwZ,SAAyB,KASzBxZ,KAAKoZ,mBACRpZ,KAAKoZ,iBAAmB,IAAIlD,IAEzBlW,KAAK4M,kBACR5M,KAAK4M,gBAAkBpE,EAAgBG,eAEzC3I,KAAKwZ,SAAW,IAAItZ,EAAAA,QACpBF,KAAKyY,gBC7CT,IAAa8D,GAAY,CAIrBC,YAAa,aAIbC,aAAc,uBAIdC,cAAe,mBCRnBC,IAMWA,GAAAvc,UAAAyR,MAAP,SAAaqK,GACT,OAAKA,EAGUA,EAAYJ,MAAMI,EAAYvC,QAAQ,KAAO,GAAGC,MAAM,KACvDmC,OAAO,SAACvG,EAAQmD,SACpBiB,EAAQjB,EAAKgB,QAAQ,KACrBnC,EAAMmB,EAAKmD,MAAM,EAAGlC,GACpBoC,EAAMrD,EAAKmD,MAAMlC,EAAQ,GAC/B,OAAOnR,OAAOsB,OAAOyL,IAAMqE,EAAA,IAAKrC,GAAMyE,mBAAmBD,GAAInC,KAC9D,IARQ,yBARlB9Z,EAAAA,aAkBD4c,IAlBA,SAAAA,MCWA,IAAAC,IASUA,GAAAxc,UAAAyc,WAAR,WAEE,IADA,IAAIC,EAAc/a,QACV+a,EAAyB,qBAAKA,IAAQ/a,OAAOgb,KAAO/c,KAAKgd,aAAaF,IAC5EA,EAAMA,EAAIG,OAEZ,OAAOH,EAAyB,qBAAKA,EAAyB,oBAAO,KAAK,IAO5EF,GAAAxc,UAAA0Z,SAAA,SAAS7L,GACHjO,KAAKkd,YAAcld,KAAKkd,WAAWtb,eAAe,SAA0D,mBAAxC5B,KAAKkd,WAAiB,KAAY,UACxGld,KAAKkd,WAAWC,KAAKrD,SAAS7L,IAOlC2O,GAAAxc,UAAAgd,UAAA,SAAUnP,GACR,OAAIjO,KAAKkd,YAAcld,KAAKkd,WAAWtb,eAAe,SAAkE,mBAAhD5B,KAAKkd,WAAiB,KAAoB,iBACzGld,KAAKkd,WAAWC,KAAKE,iBAAiBpP,GAExCqP,EAAAA,OAQTV,GAAAxc,UAAAmd,eAAA,SAAerE,EAAesE,EAAeC,QAAA,IAAAA,IAAAA,GAAA,GACvCzd,KAAKkd,YAAcld,KAAKkd,WAAWtb,eAAe,SAAgE,mBAA9C5B,KAAKkd,WAAiB,KAAkB,gBAC9Gld,KAAKkd,WAAWC,KAAKI,eAAerE,EAAOsE,EAAUC,IAOzDb,GAAAxc,UAAAsd,gBAAA,SAAgBzP,GACVjO,KAAKkd,YAAcld,KAAKkd,WAAWtb,eAAe,SAA6D,mBAA3C5B,KAAKkd,WAAiB,KAAe,aAC3Gld,KAAKkd,WAAWC,KAAKQ,YAAY1P,IAOrC2O,GAAAxc,UAAAqa,UAAA,SAAUxM,GACJjO,KAAKkd,YAAcld,KAAKkd,WAAWtb,eAAe,SAAuD,mBAArC5B,KAAKkd,WAAiB,KAAS,OACrGld,KAAKkd,WAAWC,KAAKxc,MAAMsN,IAQ/B2O,GAAAxc,UAAAwd,cAAA,SAAc7D,EAAgByD,GACxBxd,KAAKkd,YAAcld,KAAKkd,WAAWtb,eAAe,SAA+D,mBAA7C5B,KAAKkd,WAAiB,KAAiB,eAC7Gld,KAAKkd,WAAWC,KAAKS,cAAc7D,EAAQyD,IAM/CZ,GAAAxc,UAAAyd,iBAAA,SAAiBC,EAAeC,EAA+B9P,GACzDjO,KAAKkd,YAAcld,KAAKkd,WAAWtb,eAAe,aAAuE,mBAAjD5B,KAAKkd,WAAqB,SAAiB,eACrHld,KAAKkd,WAAWc,SAASC,cAAcH,EAAOC,EAAS9P,IAOpD2O,GAAAxc,UAAA8d,0BAAP,WACE,IAAMC,EAAU,IAAIje,EAAAA,QACd8d,EAAWhe,KAAKkd,YAAcld,KAAKkd,WAAWc,UAAY,KAChE,GAAIA,EAAU,CACZ,IAAMI,EAAQpe,KAAKkZ,MACbmF,EAAUre,KAAKwV,OACrBzT,OAAOX,WAAW,WAChB4c,EAASC,cAAcG,EAAO,SAACE,GAC7B,IAAMC,EAAoBD,GAAYA,EAASC,mBAAqB,KAChEA,GAAqBA,EAAkB/G,MAAQ4G,EACjDD,EAAQvT,KAAK2T,EAAkB1T,OAE/BsT,EAAQvT,KAAK,OAEdyT,IACF,GAEL,OAAOF,GAKT1V,OAAAC,eAAWkU,GAAAxc,UAAA,SAAM,KAAjB,WACE,OAAIJ,KAAKkd,YAAcld,KAAKkd,WAAWtb,eAAe,YAAyE,mBAApD5B,KAAKkd,WAAoB,QAAqB,kBAChHld,KAAKkd,WAAoB,QAAqB,oBAEhD,sCAKTzU,OAAAC,eAAWkU,GAAAxc,UAAA,QAAK,KAAhB,WACE,OAAOJ,KAAKwV,QAAUxV,KAAKwV,OAAc,OAAK,sCAKhD/M,OAAAC,eAAWkU,GAAAxc,UAAA,YAAS,KAApB,WACE,OAAOJ,KAAKwV,QAAUxV,KAAKwV,OAAkB,WAAK,sCAKpD/M,OAAAC,eAAWkU,GAAAxc,UAAA,SAAM,KAAjB,WACE,OAAOJ,KAAKwV,QAAUxV,KAAKwV,OAAe,QAAK,sCAY1CoH,GAAAxc,UAAAoe,gBAAP,SAAuBC,EAAcxQ,EAAckQ,GACjD,OAAIne,KAAKkd,YAAcld,KAAKkd,WAAWtb,eAAe,cAA2E,mBAApD5B,KAAKkd,WAAsB,UAAmB,gBAClHld,KAAKkd,WAAWwB,UAAUF,gBAAgBC,EAAMxQ,EAASkQ,GAE3D,MAMFvB,GAAAxc,UAAAue,cAAP,SAAqBb,GACf9d,KAAKkd,YAAcld,KAAKkd,WAAWtb,eAAe,cAAyE,mBAAlD5B,KAAKkd,WAAsB,UAAiB,eACvHld,KAAKkd,WAAWwB,UAAUC,cAAcb,IAQrClB,GAAAxc,UAAAwe,cAAP,SAAqBd,EAAe7Q,GAC9BjN,KAAKkd,YAAcld,KAAKkd,WAAWtb,eAAe,cAAkE,mBAA3C5B,KAAKkd,WAAsB,UAAU,QAChHld,KAAKkd,WAAWwB,UAAUG,OAAOf,EAAO7Q,IAWrC2P,GAAAxc,UAAA0e,gBAAP,SAAuBhB,EAAeC,EAA8BgB,GAClE,GAAI/e,KAAKkd,YAAcld,KAAKkd,WAAWtb,eAAe,cAAoE,mBAA7C5B,KAAKkd,WAAsB,UAAY,SAAkB,CACpI,IAAIuB,EAAOM,EAKX,YAJ6B,IAAlBA,IAAkCA,GAAiBA,EAAcvc,OAAS,KACnFic,EAAOO,EAAAA,IAAIhX,UAEbhI,KAAKkd,WAAWwB,UAAUJ,SAASR,EAAOW,EAAMV,GACzCU,EAET,OAAO,MAOF7B,GAAAxc,UAAA6e,oBAAP,SAA2BnB,EAAeiB,GACpC/e,KAAKkd,YAAcld,KAAKkd,WAAWtb,eAAe,cAA+E,mBAAxD5B,KAAKkd,WAAsB,UAAuB,qBAC7Hld,KAAKkd,WAAWwB,UAAUO,oBAAoBnB,EAAOiB,IAUjDnC,GAAAxc,UAAA4c,aAAR,SAAqBkC,GACnB,IAAMC,EAAOpd,OAAOiR,SAASmM,KAC7B,IACE,GAAID,GAAeA,EAAYlM,UAAiD,oBAA9BkM,EAAYlM,SAASmM,KACrE,OAAOD,EAAYlM,SAASmM,OAASA,EAEvC,MAAOlU,GACP,OAAO,EAGT,OAAO,wBAtNVlL,EAAAA,oDAyND6c,IAtNE,SAAAA,KACE5c,KAAKkd,WAAald,KAAK6c,aCP3B,IAAAuC,IAuBE3W,OAAAC,eAAY0W,GAAAhf,UAAA,eAAY,KAAxB,WACE,IAAMoV,EAASxV,KAAKqf,mBAAmBxN,MAAM9P,OAAOiR,SAAS2F,MAK7D,OAHInD,IACFA,EAAO8J,UAAYtf,KAAKuf,wBAAwBD,WAE3C9J,mCAKF4J,GAAAhf,UAAAqY,cAAP,WAAA,IAAAvX,EAAAlB,KACQiO,EAAUjO,KAAKwf,aACrBxf,KAAKwV,OAASvH,EAEdjO,KAAKuf,wBAAwB1B,iBAAiBtB,GAAUG,cAAe,SAACzR,GAAM,OAAA/J,EAAKue,qBAAqBxU,IAAIgD,GAE5GjO,KAAKuf,wBAAwB1B,iBAAiBtB,GAAUC,YAAa,SAACvR,GAAM,OAAA/J,EAAKwe,qBAAqBzU,IAAIgD,GAE1GjO,KAAKuf,wBAAwB1B,iBAAiBtB,GAAUE,aAAc,SAACxR,GAAM,OAAA/J,EAAKye,sBAAsB1U,IAAIgD,IAKtGmR,GAAAhf,UAAAqf,qBAAR,SAA6BxU,GAC3B,GAAKA,EAAL,CAIA,IAAM2U,EAAa3U,EAAEiO,OAASjO,EAAEsK,IAAM,KACtC,GAAKqK,EAAL,CAGA,IAAM3R,EAAUjO,KAAKwV,OACf0D,EAAQjL,EAAQiL,OAASjL,EAAQ8L,QAAU9L,EAAQoM,MACnDlB,EAAYnZ,KAAKoZ,iBAAiBhC,aAAawI,GAC/C1G,GAASA,IAAU0G,GAAgBzG,GAAgC,EAAnBA,EAAU3W,QAC9DxC,KAAKqZ,aAEPrZ,KAAK6f,mBAAmB5U,MAMlBmU,GAAAhf,UAAAyf,mBAAR,SAA2B5U,IACpBjL,KAAK8f,sBAAwB9f,KAAK8f,qBAAqBC,KAAO,GAGnE/f,KAAK8f,qBAAqB1d,QAAQ,SAACkM,EAAQkJ,EAAKwI,GACxB,mBAAX1R,GACTA,EAAOrD,MAOLmU,GAAAhf,UAAAuf,sBAAR,SAA8B1U,GAA9B,IAAA/J,EAAAlB,KACE,GAAKiL,EAAL,CAIA,IAAM2U,EAAa3U,EAAEiO,OAASjO,EAAEsK,IAAM,KAChCtH,EAAUjO,KAAKwV,OACf0D,EAAQjL,EAAQiL,OAASjL,EAAQ8L,QAAU9L,EAAQoM,MACnDuF,GAAgB1G,GAASA,IAAU0G,GACvC5f,KAAKigB,oBAAoBhV,GAAGhI,UAAU,SAAAC,GACpC,GAAIA,EAAQ,CACV9B,WAAW,WAAM,OAAAF,EAAKuY,gBAAgBmG,IAAa,KACnD,IAAMM,EAAsCne,OAA0B,kBAClEme,EAAkB/X,IAAIyX,KACxBM,EAAkBC,UAAOP,GACzB7d,OAA0B,kBAAIme,GAE1BjV,GAAKA,EAAErJ,eAAe,WAC1BqJ,EAAIxC,OAAOsB,OAAO,GAAIkB,EAAG,CAAE6S,MAAO7P,EAAQqR,aAExCpe,EAAK8Z,cAAgB9Z,EAAK8Z,aAAaoF,YACzClf,EAAK8Z,aAAaoF,WAAWC,UAE/Bnf,EAAKqe,wBAAwB9E,UAAUxP,QAQvCmU,GAAAhf,UAAA6f,oBAAR,SAA4BhV,GAC1B,IAAKjL,KAAKsgB,oBAAsBtgB,KAAKsgB,mBAAmBP,KAAO,EAC7D,OAAOQ,EAAAA,IAAG,GAEZ,IAAMC,EAAYxgB,KAAKsgB,mBAAmBG,SACpCC,EAAUxP,EAAAA,KAAKsP,GAEjBG,GAAe,EACnB,OAAOD,EAAQE,KACbC,EAAAA,UAAU,SAAAvS,GACR,OAAIqS,EACKrD,EAAAA,MAEFhP,EAAOrD,GAAG2V,KACfE,EAAAA,KAAK,GACLC,EAAAA,IAAI,SAAA7d,GAAU,OAAAyd,GAAgBzd,IAC9B8d,EAAAA,UAAU,SAAA9d,GAAU,OAAAqd,EAAAA,GAAGrd,QAG3B+d,EAAAA,MAAM,SAAA/d,GAAU,OAAAA,MAMZkc,GAAAhf,UAAAsf,qBAAR,SAA6BzU,GAC3B,GAAKA,EAAL,CAGA,IAAMgD,EAAUjO,KAAKwV,OACf0D,EAAQjL,EAAQiL,OAASjL,EAAQ8L,QAAU9L,EAAQoM,MACnDuF,EAAa3U,EAAEiO,OAASjO,EAAEsK,IAAM,KACtC,GAAI2D,IAAU0G,EAAd,CAGA,IAAMzG,EAAYnZ,KAAKoZ,iBAAiBhC,aAAa8B,EAAO0G,GACtDA,GAAgBzG,GAAgC,EAAnBA,EAAU3W,SAC3CxC,KAAKyZ,gBAAgBmG,GACrB5f,KAAKqZ,cAEPrZ,KAAKkhB,mBAAmBjW,MAElBmU,GAAAhf,UAAAqZ,gBAAR,SAAwBP,GAClBlZ,KAAc,SAChBA,KAAKoZ,iBAAiB3B,WAAWyB,IAO7BkG,GAAAhf,UAAA8gB,mBAAR,SAA2BjW,IACpBjL,KAAKmhB,mBAAqBnhB,KAAKmhB,kBAAkBpB,KAAO,GAG7D/f,KAAKmhB,kBAAkB/e,QAAQ,SAACkM,EAAQkJ,EAAKwI,GACrB,mBAAX1R,GACTA,EAAOrD,MAUNmU,GAAAhf,UAAAyd,iBAAP,SAAwBhI,EAAmBkI,GACzC,IAAMvG,EAAMwH,EAAAA,IAAIhX,SAChB,OAAI6N,IAAc0G,GAAUC,aAC1Bxc,KAAKmhB,kBAAkB7Y,IAAIkP,EAAKuG,GACzBvG,GACE3B,IAAc0G,GAAUE,cACjCzc,KAAKsgB,mBAAmBhY,IAAIkP,EAAKuG,GAC1BvG,GACE3B,IAAc0G,GAAUG,eACjC1c,KAAK8f,qBAAqBxX,IAAIkP,EAAKuG,GAC5BvG,GAEF,MAOF4H,GAAAhf,UAAAghB,oBAAP,SAA2BvL,EAAmB2B,GAC5C,OAAI3B,IAAc0G,GAAUC,YACnBxc,KAAKmhB,kBAAkBhB,UAAO3I,GAC5B3B,IAAc0G,GAAUE,cAC1Bzc,KAAKsgB,mBAAmBH,UAAO3I,IAQnC4H,GAAAhf,UAAAihB,mBAAP,SAA0BxL,GACpBA,IAAc0G,GAAUC,YAC1Bxc,KAAKmhB,kBAAkBG,QACdzL,IAAc0G,GAAUE,cACjCzc,KAAKsgB,mBAAmBgB,SAMpBlC,GAAAhf,UAAAiZ,WAAR,WACE,IAEErZ,KAAc,QAAgB,aAAc,WAAW,UACvD,MAAA6Z,2BAhOL9Z,EAAAA,uDAVQ6c,UACA1G,UAEAyG,MAyOTyC,IApNE,SAAAA,GACUG,EACAnG,EACAiG,GAFArf,KAAAuf,wBAAAA,EACAvf,KAAAoZ,iBAAAA,EACApZ,KAAAqf,mBAAAA,EAERrf,KAAKmhB,kBAAoB,IAAI5Y,IAC7BvI,KAAKsgB,mBAAqB,IAAI/X,IAC9BvI,KAAK8f,qBAAuB,IAAIvX,QClCvBgZ,GAAyB,IAAIC,EAAAA,eAAqC,iBAM/EC,IAYIA,GAAArhB,UAAAshB,OAAA,SAAOlK,EAAamK,GAChB3hB,KAAK4hB,SAASpK,GAAOmK,GAGzBF,GAAArhB,UAAAyhB,YAAA,SAAYrK,GACR,OAAIxX,KAAK4hB,SAASpK,GACPxX,KAAK4hB,SAASpK,IAErBxI,QAAQ8S,KAAK,UAAUtK,EAAG,QACnB,4BArBlBzX,EAAAA,mFAKgB8C,EAAAA,UAAQ,CAAAD,KAAGqG,EAAAA,OAAMC,KAAA,CAACqY,SAoBnCE,IApBI,SAAAA,GAAuDM,QAA3C,IAAAA,IAAAA,EAAA,IAFJ/hB,KAAA4hB,SAAkC,GAItCG,EADGA,GACS,GAEd/hB,KAAK4hB,SAAQ9X,EAAA,GAAQiY,GCO3B,IAAMC,GAAsB,6BAK5BC,IA6CExZ,OAAAC,eAAWuZ,GAAA7hB,UAAA,UAAO,KAAlB,SAAmB8hB,GACjBliB,KAAKmiB,uBAAgC,QAAID,EACzCliB,KAAqB,eAAIkiB,mCAK3BzZ,OAAAC,eAAYuZ,GAAA7hB,UAAA,iBAAc,KAA1B,WACE,GAAIJ,KAAKgb,aAAc,CAGrB,IAFA,IAAIoF,EAAapgB,KAAKgb,aAAaoF,WAE5BA,GAAcA,EAAWnD,QAAUmD,EAAWnD,OAAOmF,UAAmE,OAAvDhC,EAAWnD,OAAOmF,SAASha,IAAIia,EAAAA,aAAc,OACnHjC,EAAaA,EAAWnD,OAE1B,OAAOmD,EAET,OAAO,sCAET3X,OAAAC,eAAYuZ,GAAA7hB,UAAA,eAAY,KAAxB,WACE,IAAIuY,EAAO5W,OAAOiR,SAAS2F,KACrB0B,EAAQra,KAAKsiB,gBAAkBtiB,KAAKsiB,eAAeC,cACzD,GAAIlI,EAAO,CACT,IAAMmI,EAAoBzgB,OAAOigB,IAC3B5B,EAAaoC,GAAqBA,EAAkBpa,IAAIiS,GAC9D1B,EAAOyH,GAAcA,EAAWzH,MAAQA,EAE1C,IAAMnD,EAASxV,KAAKqf,mBAAmBxN,MAAM8G,GAI7C,OAHInD,IACFA,EAAO8J,UAAYtf,KAAKuf,wBAAwBD,WAE3C9J,mCAKT/M,OAAAC,eAAYuZ,GAAA7hB,UAAA,oBAAiB,KAA7B,WACE,OAAOJ,KAAKoiB,UAAYpiB,KAAKoiB,SAASha,IAAuBmL,GAAmB,uCAM1E0O,GAAA7hB,UAAAqiB,qBAAR,SAA6BvJ,GAA7B,IAAAhY,EAAAlB,KACMA,KAAKgb,cAAgBhb,KAAKgb,aAAa0H,eACzC1iB,KAAKgb,aAAa0H,cAAczf,UAAU,WACxC/B,EAAKihB,uBAAyB,OAG9BniB,KAAKgb,cAAgBhb,KAAKgb,aAAaoF,YAAcpgB,KAAKgb,aAAaoF,WAAWsC,eACpF1iB,KAAKgb,aAAaoF,WAAWsC,cAAczf,UAAU,WACnD,IAAMid,EAAoBne,OAA0B,kBAChDme,GACFA,EAAkBC,UAAOjH,GAE3B,IAAMsJ,EAAoBzgB,OAAOigB,IAC7BQ,GACFA,EAAkBrC,UAAOjH,MAiB1B+I,GAAA7hB,UAAA0Z,SAAP,SAAgBZ,EAAea,EAAgBvE,EAAawE,EAAkB2I,EAAqBC,EAAkBC,GACnH,IAAK9I,GAAU/Z,KAAKmV,kBAElB,OADAnV,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAgBjF,oBAAqB,CAAEkM,WAAW,IAC/EyJ,EAAAA,MAGPsF,EADEA,GACQ5iB,KAAK8iB,UAAUF,GAG3B,IAAIG,EAAoB/iB,KAAKka,cAAc1E,IAErB,KADtBqN,EAAgB7iB,KAAKgjB,iBAAiBH,GAAe,MAEnDE,EAAoB/iB,KAAKijB,WAAWzN,IAEtC,IAAMyE,EAAYja,KAAKka,cAAc1E,GAC/B0N,EAAeljB,KAAKwf,aAAatG,OAASlZ,KAAKwf,aAAazF,QAAU/Z,KAAKwf,aAAanF,MACxFpM,EAAsB,CAC1BiL,MAAKA,EACLa,OAAMA,EACNoJ,QAASC,EAAAA,QAAQC,KACjBN,kBAAmBA,EACnBO,aAAcrJ,EACdI,MAAOtI,UACPuI,YAAavI,UACbwR,SAAUvJ,EACV4I,QAASA,GAAW,OAMA,KADtBD,EAAgB3iB,KAAKgjB,iBAAiBL,GAAe,KAEnD3iB,KAAKoZ,iBAAiBxC,aAAasM,EAAchK,GAEnDlZ,KAAKuf,wBAAwBzF,SAAS7L,IAWjCgU,GAAA7hB,UAAAgd,UAAP,SAAiBlE,EAAea,EAAgBvE,EAAawE,EAAkB2I,EAAqBC,EAAkBC,GACpH,IAAK9I,GAAU/Z,KAAKmV,kBAElB,OADAnV,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAgBjF,oBAAqB,CAAEkM,WAAW,IAC/EyJ,EAAAA,MAGPsF,EADEA,GACQ5iB,KAAK8iB,UAAUF,GAE3B,IAAIG,EAAoB/iB,KAAKka,cAAc1E,IAErB,KADtBqN,EAAgB7iB,KAAKgjB,iBAAiBH,GAAe,MAEnDE,EAAoB/iB,KAAKijB,WAAWzN,IAEtC,IAAMyE,EAAYja,KAAKka,cAAc1E,GAC/B0N,EAAeljB,KAAKwf,aAAatG,OAASlZ,KAAKwf,aAAazF,QAAU/Z,KAAKwf,aAAanF,MACxFpM,EAAsB,CAC1BiL,MAAKA,EACLa,OAAMA,EACNoJ,QAASC,EAAAA,QAAQC,KACjBN,kBAAmBA,EACnBO,aAAcrJ,EACdI,MAAOtI,UACPuI,YAAavI,UACbwR,SAAUvJ,EACV4I,QAASA,GAAW,MAOtB,OAHsB,KADtBD,EAAgB3iB,KAAKgjB,iBAAiBL,GAAe,KAEnD3iB,KAAKoZ,iBAAiBxC,aAAasM,EAAchK,GAE5ClZ,KAAKuf,wBAAwBnC,UAAUnP,IAazCgU,GAAA7hB,UAAAojB,sBAAP,SAA6BtK,EAAea,EAAgBvE,EAAamN,EAAqBc,EAAYC,EAAYd,EAAkBe,EAAqBd,GAC3J,IAAK9I,GAAU/Z,KAAKmV,kBAElB,OADAnV,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAgBjF,oBAAqB,CAAEkM,WAAW,IAC/EyJ,EAAAA,MAGPsF,EADEA,GACQ5iB,KAAK8iB,UAAUF,GAEvBe,IAAe5R,WAA4B,OAAf4R,IAC9BA,EAAa,IAEf,IAAIZ,EAAoB/iB,KAAKka,cAAc1E,IAErB,KADtBqN,EAAgB7iB,KAAKgjB,iBAAiBH,GAAe,MAEnDE,EAAoB/iB,KAAKijB,WAAWzN,IAGtC,IAAMyE,EAAYja,KAAKka,cAAc1E,GACrCuN,EAAkBza,IAAI,OAAQmb,GAAc,UAC5CV,EAAkBza,IAAI,OAAQob,GAAc,UAC5CX,EAAkBza,IAAI,aAAcqb,GACpCZ,EAAkBza,IAAI,QAAS,KAC/Bya,EAAkBza,IAAI,iBAAkB,QACxC,IAAM4a,EAAeljB,KAAKwf,aAAatG,OAASlZ,KAAKwf,aAAazF,QAAU/Z,KAAKwf,aAAanF,MACxFpM,EAAsB,CAC1BiL,MAAKA,EACLa,OAAMA,EACNoJ,QAASC,EAAAA,QAAQC,KACjBN,kBAAmBA,EACnBO,aAAcrJ,EACdI,MAAOtI,UACPuI,YAAavI,UACbwR,UAAU,EACVX,QAASA,GAAW,OAMA,KADtBD,EAAgB3iB,KAAKgjB,iBAAiBL,GAAe,KAEnD3iB,KAAKoZ,iBAAiBxC,aAAasM,EAAchK,GAEnDlZ,KAAKuf,wBAAwBzF,SAAS7L,IAcjCgU,GAAA7hB,UAAAga,QAAP,SAAelB,EAAemB,EAAeC,EAAqB9E,EAAawE,EAAkB4I,EAAkBD,EAAqBE,GACtI,IAAKxI,GAASra,KAAKmV,kBAEjB,OADAnV,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAgBjF,oBAAqB,CAAEkM,WAAW,IAC/EyJ,EAAAA,MAGPsF,EADEA,GACQ5iB,KAAK8iB,UAAUF,GAE3B,IAAIG,EAAoB/iB,KAAKka,cAAc1E,IAErB,KADtBqN,EAAgB7iB,KAAKgjB,iBAAiBH,GAAe,MAEnDE,EAAoB/iB,KAAKijB,WAAWzN,IAEtC,IAAMyE,EAAYja,KAAKka,cAAc1E,GAC/B0N,EAAeljB,KAAKwf,aAAatG,OAASlZ,KAAKwf,aAAazF,QAAU/Z,KAAKwf,aAAanF,MACxFpM,EAAsB,CAC1BiL,MAAKA,EACLmB,MAAKA,EACLC,YAAWA,EACXP,OAAQhI,UACRoR,QAASC,EAAAA,QAAQQ,IACjBb,kBAAmBA,EACnBO,aAAcrJ,EACdsJ,SAAUvJ,EACV4I,QAASA,GAAW,OAGA,KADtBD,EAAgB3iB,KAAKgjB,iBAAiBL,GAAe,KAEnD3iB,KAAKoZ,iBAAiBxC,aAAasM,EAAchK,GAEnDlZ,KAAKuf,wBAAwBzF,SAAS7L,IAajCgU,GAAA7hB,UAAAyjB,SAAP,SAAgB3K,EAAemB,EAAeC,EAAqB9E,EAAawE,EAAkB4I,EAAkBD,EAAqBE,GACvI,IAAKxI,GAASra,KAAKmV,kBAEjB,OADAnV,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAgBjF,oBAAqB,CAAEkM,WAAW,IAC/EyJ,EAAAA,MAGPsF,EADEA,GACQ5iB,KAAK8iB,UAAUF,GAE3B,IAAIG,EAAoB/iB,KAAKka,cAAc1E,IAErB,KADtBqN,EAAgB7iB,KAAKgjB,iBAAiBH,GAAe,MAEnDE,EAAoB/iB,KAAKijB,WAAWzN,IAEtC,IAAMyE,EAAYja,KAAKka,cAAc1E,GAC/B0N,EAAeljB,KAAKwf,aAAatG,OAASlZ,KAAKwf,aAAazF,QAAU/Z,KAAKwf,aAAanF,MACxFpM,EAAsB,CAC1BiL,MAAKA,EACLmB,MAAKA,EACLC,YAAWA,EACXP,OAAQhI,UACRoR,QAASC,EAAAA,QAAQQ,IACjBb,kBAAmBA,EACnBO,aAAcrJ,EACdsJ,SAAUvJ,EACV4I,QAASA,GAAW,MAMtB,OAHsB,KADtBD,EAAgB3iB,KAAKgjB,iBAAiBL,GAAe,KAEnD3iB,KAAKoZ,iBAAiBxC,aAAasM,EAAchK,GAE5ClZ,KAAKuf,wBAAwBnC,UAAUnP,IAMzCgU,GAAA7hB,UAAAO,MAAP,WACE,IAAMsN,EAAUjO,KAAKwf,aACf3F,EAAA7Z,KAAA0a,aAAEoJ,EAAAjK,EAAAc,kBAA+BC,EAAAf,EAAAe,cACnCkJ,EACe9jB,KAAKoI,IAAIwS,EAAe,aACzB,SAGlB3M,EAAQ6P,MAAQ7P,EAAQqR,UACxBtf,KAAKuf,wBAAwB7B,gBAAgBzP,KAKxCgU,GAAA7hB,UAAA2jB,QAAP,WACE,IAAM9V,EAAUjO,KAAKwf,aACrBvR,EAAQ6P,MAAQ7P,EAAQqR,UACxBtf,KAAKuf,wBAAwB9E,UAAUxM,IAOjCgU,GAAA7hB,UAAA4jB,YAAR,SAAoBxO,IACd,MAAOA,GAAgE,iBAAXA,GAAuBA,EAAOhT,OAAS,KACrGgT,EAAS,IAEX,IAAM+E,EAAW,IAAIhS,IAMrB,MALsB,iBAAXiN,IACTA,EAAS5D,KAAK+E,UAAUnB,IAE1BA,EAASzT,OAA2B,mBAAEyT,GACtC+E,EAASjS,IAAI,wBAAyBkN,GAC/B+E,GAQF0H,GAAA7hB,UAAAyd,iBAAP,SAAwBhI,EAAmBkI,GACzC,OAAO/d,KAAKmiB,uBAAuBtE,iBAAiBhI,EAAWkI,IAO1DkE,GAAA7hB,UAAAghB,oBAAP,SAA2BvL,EAAmB2B,GAC5C,OAAOxX,KAAKmiB,uBAAuBf,oBAAoBvL,EAAW2B,IAM7DyK,GAAA7hB,UAAAihB,mBAAP,SAA0BxL,GACxB7V,KAAKmiB,uBAAuBd,mBAAmBxL,IAiB1CoM,GAAA7hB,UAAA6jB,KAAP,SAAYC,EAAmCC,EAAkBhM,EAAciM,EAAelL,EAAgBmL,EAA0BC,EAAsBhK,EAAsB9E,EAAcoN,EAAkBD,EAAqBE,GACvO,IAAM0B,EAAmBvkB,KAAKoiB,SAASha,IAAwBoc,EAAAA,mBAAoB,MACnF,IAAKD,EACH,MAAM,IAAI7T,MAAM,kCAGlB,IAAKwT,EACH,MAAM,IAAIxT,MAAM,yCAElB,GAAa,UAATwT,GAA6B,YAATA,EAAoB,CAC1C,IAAKC,IAAYhM,EACf,MAAM,IAAIzH,MAAM,+BAElB,GAAIyT,GAAWhM,EACb,MAAM,IAAIzH,MAAM,+BAElB,IAAM+T,EAAgBzkB,KAAK0kB,oBAAoBlP,GACzCmP,EAAc3kB,KAAK4kB,aAAaR,GACzB,YAATF,IACFS,EAAYE,WAAaX,GAE3B,IAAIY,EAAe,KACnB,GAAIX,EAAS,CACX,IAAMY,EAAoB/kB,KAAKoiB,SAASha,IAAuBqZ,GAAmB,MAClF,IAAKsD,EACH,OAEF,IAAIC,EAAgBD,EAAkBlD,YAAYsC,GAC5Cc,EAAejlB,KAAKklB,mBAAmBF,EAAeP,GAC5DK,EAAeP,EAAiB/jB,KAAKykB,EAAcN,QAC1CxM,IACT2M,EAAeP,EAAiBY,UAAUhN,EAAKwM,IAEjD,GAAIG,GAAkBA,EAAajW,QAAS,CAC1CiW,EAAajW,QAAQuW,uBAAwB,EAE7C,IAAMC,GADNP,EAAajW,QAAQ2C,UAAYsT,GACLzR,QAAUyR,EAAazR,OAAOxK,UAAYic,EAAazR,OAAOxK,SAASyc,IAAMR,EAAazR,OAAOxK,SAASyc,GAAGC,eAAiBT,EAAazR,OAAOxK,SAASyc,GAAGC,cAAcC,cAAc,kBAClNH,GAAUP,EAAazR,OAAOxK,SAAS4c,YACzCX,EAAazR,OAAOxK,SAAS4c,SAASnX,OAAS+W,GACxCpZ,MAAMyZ,OAAS,aAGrB,CAAA,GAAa,QAATxB,EAgBT,MAAM,IAAIxT,MAAM,WAfhB,IAAKwI,IAAUmL,IAAYC,EAIzB,MAHItkB,KAAKmV,mBACPnV,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAgBjF,oBAAqB,CAAEkM,WAAW,IAElF,IAAInD,MAAM,kCAElB,GAAgB,QAAZ2T,IAAsB/J,EACxB,MAAM,IAAI5J,MAAM,qBAEH,OAAX2T,EACFrkB,KAAKoa,QAAQlB,EAAOoL,EAAahK,EAAa9E,GAAQ,EAAOoN,EAASD,EAAeE,GAChE,SAAZwB,GACTrkB,KAAK8Z,SAASZ,EAAOoL,EAAa9O,GAAQ,EAAOmN,EAAeC,EAASC,KAkBxEZ,GAAA7hB,UAAAulB,SAAP,SAAgBC,EAAiB3X,GAC/B,IAAMmK,EAASpY,KAAKoiB,UAAYpiB,KAAKoiB,SAASha,IAAY+T,EAAAA,OAAQ,MAC5D0J,EAAiB7lB,KAAKoiB,UAAYpiB,KAAKoiB,SAASha,IAAoB0d,EAAAA,eAAgB,MACpFC,EAAcC,EAAOC,MAAM,GAAIjmB,KAAKwf,aAAcvR,GAAWA,EAAQ8X,aAAe,IACtF9X,GAAWA,EAAQrM,eAAe,uBAC7BqM,EAAQ8X,YAEjB,IAAMG,EAASF,EAAOC,MAAM,CAAEE,oBAAoB,EAAOC,WAAYP,EAAgBE,YAAWA,GAAI9X,GAAW,IAC/G,OAAImK,EACKA,EAAOuN,SAASC,EAAUM,GAE1B,MAYHjE,GAAA7hB,UAAA8Z,cAAR,SAAsB1E,EAAavH,IAC7B,MAAOuH,GAAgE,iBAAXA,GAAuBA,EAAOhT,OAAS,KACrGgT,EAAS,IAEX,IAAM+E,EAAW,IAAIhS,IACjB0F,GAAyC,EAA9BxF,OAAOM,KAAKkF,GAASzL,SACZ,iBAAXgT,IACTA,EAAS5D,KAAKC,MAAM2D,IAEtBA,EAASwQ,EAAOC,MAAMzQ,EAAQvH,IAEV,iBAAXuH,IACTA,EAAS5D,KAAK+E,UAAUnB,IAE1B,IAAM0N,EAAeljB,KAAKwf,aAAatG,OAASlZ,KAAKwf,aAAazF,QAAU/Z,KAAKwf,aAAanF,MAI9F,OAHA7E,EAASzT,OAA2B,mBAAEyT,GACtC+E,EAASjS,IAAI,wBAAyBkN,GACtC+E,EAASjS,IAAI,4BAA6B4a,GACnC3I,GAED0H,GAAA7hB,UAAA6iB,WAAR,SAAmBzN,EAAQvH,IACrB,MAAOuH,GAAgE,iBAAXA,GAAuBA,EAAOhT,OAAS,KACrGgT,EAAS,IAEX,IAAM+E,EAAW,IAAIhS,IACjB0F,GAAyC,EAA9BxF,OAAOM,KAAKkF,GAASzL,SACZ,iBAAXgT,IACTA,EAAS5D,KAAKC,MAAM2D,IAEtBA,EAASwQ,EAAOC,MAAMzQ,EAAQvH,IAEV,iBAAXuH,IACTA,EAAS5D,KAAKC,MAAM2D,IAEtB/M,OAAOM,KAAKyM,GAAQpT,QAAQ,SAAAoV,GAC1B+C,EAASjS,IAAIkP,EAAKhC,EAAOgC,MAE3B,IAAM0L,EAAeljB,KAAKwf,aAAatG,OAASlZ,KAAKwf,aAAazF,QAAU/Z,KAAKwf,aAAanF,MAI9F,OAHA7E,EAASzT,OAA2B,mBAAEyT,GACtC+E,EAASjS,IAAI,wBAAyBkN,GACtC+E,EAASjS,IAAI,4BAA6B4a,GACnC3I,GAKD0H,GAAA7hB,UAAAsa,WAAR,WAKE,IAJA,IAAIM,EAAehb,KAAKoI,IAAIpI,KAAM,+BAC9B2a,EAAoB3a,KAAKoI,IAAI4S,EAAc,wCAAwC,GAEnFC,EAAqBjb,KAAKoI,IAAI4S,EAAc,UACnB,MAAtBC,IAA+BN,GACpCK,EAAehb,KAAKoI,IAAI4S,EAAc,UACtCC,EAAqBjb,KAAKoI,IAAI6S,EAAoB,UAClDN,EAAoB3a,KAAKoI,IAAI4S,EAAc,wCAAwC,GAGrF,MAAO,CAAEL,kBAAiBA,EAAEC,cADN5a,KAAKoI,IAAI4S,EAAc,oBAUvCiH,GAAA7hB,UAAAgI,IAAR,SAAY8S,EAAaC,EAA8BC,QAAA,IAAAA,IAAAA,EAAA,MACrD,IAAMC,EAAO/Y,MAAMC,QAAQ4Y,GACvBA,EACAA,EAAKvB,MAAM,KAAKzX,OAAO,SAAA+H,GAAK,OAAAA,EAAE1H,SAClC,OAAK6Y,EAAK7Y,OAIK,OAAX0Y,GAAmBA,IAAWnJ,WAA0C,oBAArBmJ,EAAOG,EAAK,IAC1DD,EAGFpb,KAAKoI,IAAI8S,EAAOG,EAAKC,SAAUD,EAAMD,GAPnCF,IAAWnJ,UAAYqJ,EAAaF,GASvC+G,GAAA7hB,UAAA4iB,iBAAR,SAAyBnY,EAAYuQ,GAQnC,YARmC,IAAAA,IAAAA,GAAA,GAC/B,MAAOvQ,IACTA,EAAQuQ,GAEW,iBAAVvQ,IAETA,EAAkB,UADVA,GAASwb,OAAOjL,KAGnBvQ,GAMDoX,GAAA7hB,UAAA0iB,UAAR,SAAkBtL,GAChB,IAAM8O,EAAmBtmB,KAAKoiB,UAAYpiB,KAAKoiB,SAASha,IAAeme,EAAAA,eAAgB,OAAS,KAChG,OAAID,GAAoB9O,GAAOA,EAAIgP,WAAW,OAAShP,EAAIiP,SAAS,OAClEjP,EAAMA,EAAIxF,QAAQ,KAAM,IAAIA,QAAQ,KAAM,IAAI0U,OACvCJ,EAAiBK,UAAUnP,EAAK,OAElCA,GAKDyK,GAAA7hB,UAAAwkB,aAAR,SAAqBgC,GAArB,IAAA1lB,EAAAlB,KACM4M,EAAkB5M,KAAKoiB,SAASha,IAAqBI,EAAiB,MAKpEqe,EAAsB,CAC1BlV,OAJA/E,EADGA,GACepE,EAAgBG,gBAIRiE,EAAgB1G,oBAAsB,GAChEqI,MAAO,IACPC,OAAQ,IACRsY,aAAa,GAETC,EAAmB/mB,KAAK0kB,oBAAoBkC,GAC5CxC,EAAU3b,OAAOsB,OAAO8c,EAAgBE,GACxCC,EAAmB5C,EAAQzG,YAC3BsJ,EAAU7C,EAAiB,SAAK,GAChC8C,EAAqBD,GAAWA,EAAQE,aAAe,KACvDC,EAAiBH,GAAWA,EAAQI,SAAW,KAE/CC,EAAgBlD,EAAuB,gBAAK,EA0BlD,OAzBAA,EAAQzG,YAAc,SAAC4J,GACrB,OAAMP,GAAgD,mBAArBA,EACxBA,EAAiBO,GAAK3G,KAC3BI,EAAAA,UAAU,SAAA9d,GACR,OAAIA,GACEokB,EACKpmB,EAAKomB,cAAcC,GAAK3G,KAC7BI,EAAAA,UAAU,WAAM,OAAA9f,EAAKsmB,YAAYN,EAAoBE,MAIpD7G,EAAAA,GAAGrd,MAIVokB,EACKpmB,EAAKomB,cAAcC,GAAK3G,KAC7BI,EAAAA,UAAU,WAAM,OAAA9f,EAAKsmB,YAAYN,EAAoBE,MAGhD7G,EAAAA,IAAG,IAKT6D,GAEDnC,GAAA7hB,UAAAskB,oBAAR,SAA4BkC,GAC1B,IAAIG,EAIJ,QAHsB,IAAXH,IACTA,EAAS,IAEW,iBAAXA,EACT,GAAIA,EAAOpkB,OACT,IACEukB,EAAmBnV,KAAKC,MAAM+U,GAC9B,MAAA/M,GACA,MAAM,IAAInJ,MAAMkW,EAAS,qBAG3BG,EAAmB,OAEhB,CAAA,GAAsB,iBAAXH,EAGhB,MAAM,IAAIlW,MAAM,kBAFhBqW,EAAmBte,OAAOsB,OAAO,GAAI6c,GAIvC,OAAOG,GAKD9E,GAAA7hB,UAAAknB,cAAR,SAAsBC,GACpB,GAAIA,GAAOA,EAAI1U,UAAY0U,EAAI1U,SAAShE,QAAS,CAC/C,IAAM4Y,EAA4BF,EAAI1U,SAAShE,QAC/C,GAAI4Y,GAAaA,EAAUvF,QAAS,CAClC,IAAMwF,EAAaD,EAAUvF,QAAQwF,YAAc,KACnD,GAAIA,EACF,OAAOA,EAAWJ,gBAAgB1G,KAAKI,EAAAA,UAAU,WAAM,OAAAT,EAAAA,IAAG,OAIhE,OAAOA,EAAAA,IAAG,IAEJ0B,GAAA7hB,UAAAonB,YAAR,SAAoBN,EAA4BE,GAC9C,GAAIF,GAAsBE,EAAgB,CACxC,IAAMpM,EAAehb,KAAKgb,aAAaoF,WAAWuH,oBAAoBC,oBAAoBR,GAC1F,GAAIpM,EAEF,OADkBA,EAAa6M,UACdX,KAAsBtG,KACrCZ,EAAAA,IAAI,WAAM,OAAA,KAIhB,OAAOO,EAAAA,IAAG,IAEJ0B,GAAA7hB,UAAA8kB,mBAAR,SAA2BF,EAAoB8C,GAC7C,IAAI7C,EACEjK,EAAehb,KAAK+nB,kBACpBC,EAA2BhoB,KAAKioB,8BACtC,GAAIjN,GAAgBgN,EAA0B,CAC5C,IAAME,EAAqBF,EAAyBG,wBAAwBnD,GACtEoD,EAAuBC,EAAAA,mBAAmBC,iBAAiB,GAAItN,EAAaoH,WAClF6C,EAAeiD,EAAmBlgB,OAAOogB,KACrBnD,EAAapc,UAAYoc,EAAapc,SAASgf,WAAa5C,EAAapc,SAASgf,UAAUU,UACjF,iBAAlBT,GAA8Brf,OAAOM,KAAK+e,GAAetlB,QAClEiG,OAAOM,KAAK+e,GAAe1lB,QAAQ,SAAA+U,GACjC8N,EAAapc,SAASgf,UAAUU,QAAQC,iBAAiBrR,EAAM2Q,EAAc3Q,MAIjF8N,EAAapc,SAASgf,UAAUU,QAAQC,iBAAiB,iBAAiB,IAG9E,OAAOvD,GAKDhD,GAAA7hB,UAAA2nB,gBAAR,WACE,OAAI/nB,KAAKgb,aACAhb,KAAKgb,aAEVhb,KAAc,SAAKA,KAAc,QAAgB,aAC5CA,KAAc,QAAgB,aAEhC,MAKDiiB,GAAA7hB,UAAA6nB,4BAAR,WACE,IACID,EADEhN,EAAehb,KAAK+nB,kBAK1B,OAHI/M,IACFgN,EAA2BhN,EAAaoH,SAASha,IAAIqgB,EAAAA,2BAEhDT,wBAnvBVjoB,EAAAA,uDApBQ6c,UAEA1G,UACAkJ,UACAzC,UACA0F,EAAAA,aAAY1f,WAAA,CAAA,CAAAC,KAsBhBC,EAAAA,kBA7B0B6lB,EAAAA,SAAQ/lB,WAAA,CAAA,CAAAC,KA8BlCC,EAAAA,kBAnBI2F,EAAe7F,WAAA,CAAA,CAAAC,KAoBnBC,EAAAA,cA6uBLof,IApvBE,SAAAA,GACU1C,EACAnG,EACA+I,EACA9C,EACYrE,EACAoH,EACAxV,GANZ5M,KAAAuf,wBAAAA,EACAvf,KAAAoZ,iBAAAA,EACApZ,KAAAmiB,uBAAAA,EACAniB,KAAAqf,mBAAAA,EACYrf,KAAAgb,aAAAA,EACAhb,KAAAoiB,SAAAA,EACApiB,KAAA4M,gBAAAA,EAMpB,IAAMyN,EAAQra,KAAKsiB,gBAAkBtiB,KAAKsiB,eAAeC,cACrDrJ,EAAQlZ,KAAKwf,aAAatG,OAASlZ,KAAKwf,aAAazF,QAAU/Z,KAAKwf,aAAanF,MAErF,GAAIA,EAAO,CACT,IAAMmI,EAAoBzgB,OAAOigB,KAAwB,IAAIzZ,IACzDia,IAAsBA,EAAkBra,IAAIkS,KAC9CmI,EAAkBla,IAAI+R,EAAO,CAAE1B,KAAM5W,OAAOiR,SAAS2F,OACrD5W,OAAOigB,IAAuBQ,GAGlC,GAAItJ,EAAO,CACT,IAAMgH,EAAsCne,OAA0B,mBAAK,IAAIwG,IAE3E8R,IACFnB,EAAQmB,GAEN6F,GAAqBA,EAAkB/X,IAAI+Q,GAC7ClZ,KAAKmiB,uBAAyBjC,EAAkB9X,IAAI8Q,IAEpDlZ,KAAKmiB,uBAAuB1J,gBAC5ByH,EAAkB5X,IAAI4Q,EAAOlZ,KAAKmiB,wBAClCniB,KAAKmiB,uBAAuBnH,aAAehb,KAAKgb,aAChDjZ,OAA0B,kBAAIme,GAEhClgB,KAAKyiB,qBAAqBvJ,GAEvBtM,IACH5M,KAAK4M,gBAAkB,IAAIpE,GCnEjC,IAAMmgB,GAAS,SACTC,GAAmB,mBAMzBC,IAKkBA,GAAAC,kBAAd,SAAgC9N,GAE5B,IAAM+N,EAA0B/N,EAAagO,6BACzCC,EAAiB,KACrB,OAAIF,GACAE,EAAiBF,EAAwBG,SAASN,MACT,KAEtCK,GAMGJ,GAAAM,kBAAd,SAAgCnO,EAA4BiO,GAExD,IAAMF,EAA0B/N,EAAagO,6BACzCD,GACAA,EAAwBK,SAASR,GAAkBK,IAO7CJ,GAAAQ,YAAd,SAA0BrO,GAEtB,IAAM+N,EAA0B/N,EAAagO,6BAC7C,GAAID,EACA,OAAOA,EAAwBG,SAASP,KAOlCE,GAAAS,YAAd,SAA0BtO,EAA4BiO,GAElD,IAAMF,EAA0B/N,EAAagO,6BACzCD,GACAA,EAAwBK,SAAST,IAAQ,GAE7C3oB,KAAKmpB,kBAAkBnO,EAAciO,IAM3BJ,GAAAU,eAAd,SAA6BvO,GAEzB,IAAM+N,EAA0B/N,EAAagO,6BACzCD,GACAA,EAAwBK,SAAST,IAAQ,IAOnCE,GAAAW,aAAd,SAA2BxO,EAA4BzF,GAEnD,IAAMwT,EAA0B/N,EAAagO,6BACzCD,GACAA,EAAwBK,SAAST,IAAQ,GAE7C3oB,KAAKmpB,kBAAkBnO,EAAczF,IAE7CsT,IAxEA,SAAAA,cCFgBY,GAAAxc,KAAd,SAAmBkI,EAAsCtG,GACvD,IAAMgN,EAAS9Z,OAAOiR,SAAS2F,KACvBkB,EAAA4P,GAAAC,YAAA7N,GAAA8N,wBAAAA,OAAA,IAAA9P,EAAA,GAAAA,EACJ8P,GAAqE,SAA1CA,EAAwBC,eAGvDzU,EAAkBlI,KAAK4B,EAAS,CAAEgF,WAAW,KAOjC4V,GAAA3V,QAAd,SAAsBqB,EAAsCtG,GAC1D,IAAMgN,EAAS9Z,OAAOiR,SAAS2F,KACvBkB,EAAA4P,GAAAC,YAAA7N,GAAA8N,wBAAAA,OAAA,IAAA9P,EAAA,GAAAA,EACJ8P,GAAqE,SAA1CA,EAAwBC,eAGvDzU,EAAkBrB,QAAQjF,EAAS,CAAEgF,WAAW,KAEnC4V,GAAAC,YAAf,SAA2BA,GACzB,IAAMG,EAAkB,IAAIC,gBAAgBJ,GACtCxmB,EAAS,GAIf,OAHA2mB,EAAgBznB,QAAQ,SAACyI,EAAe2M,GACtCtU,EAAOsU,GAAO3M,IAET3H,GAEXumB,IAnCA,SAAAA,MCQA,IAAAM,IAWEthB,OAAAC,eAAWqhB,GAAA3pB,UAAA,UAAO,KAAlB,WACE,OAAOJ,KAAKgqB,kBAMd,SAAmB9H,GACjBliB,KAAKgqB,aAAe9H,mCAaf6H,GAAA3pB,UAAA6pB,QAAP,SAAe9C,EAAqBE,GAClC,GAAKF,GAA+B,KAAhBA,GAAsC,cAAhBA,EAA1C,CAGA,IAAIU,EAAY7nB,KAAK6nB,UAKrB,OAJIR,IAEFQ,EADsB7nB,KAAKogB,WAAWuH,oBAAoBC,oBAAoBP,GACpDQ,WAErBA,EAAUV,OAOZ4C,GAAA3pB,UAAA8pB,iBAAP,WAIE,OAHqBlqB,KAAKkiB,QAAQlH,aACC0M,WACEyC,YAAYC,eAC3BC,iBAAiBzJ,KACrCze,EAAAA,OAAO,SAACmoB,GACN,OAAuB,OAAhBA,IAETxJ,EAAAA,KAAK,KASFiJ,GAAA3pB,UAAAmqB,cAAP,SAAqBC,GAEnB,OADgBxqB,KAAKkiB,QAAQuI,QACdD,IAKVT,GAAA3pB,UAAAsqB,oCAAP,SAA2CrD,GACzC,IAAIrM,EAA6Bhb,KAAK6nB,UAAU7M,aAC5CqM,IACFrM,EAAehb,KAAK6nB,UAAU7M,aAAaoF,WAAWuH,oBAAoBC,oBAAoBP,IAE5FrM,IACFA,EAAa2P,YAAYC,yBAA0B,IAIhDb,GAAA3pB,UAAAyqB,mCAAP,SAA0CxD,GACxC,IAAIrM,EAA6Bhb,KAAK6nB,UAAU7M,aAC5CqM,IACFrM,EAAehb,KAAK6nB,UAAU7M,aAAaoF,WAAWuH,oBAAoBC,oBAAoBP,IAE5FrM,IACFA,EAAa2P,YAAYC,yBAA0B,yBAxFxD7qB,EAAAA,uDAPoB+qB,EAAAA,iBAAZhoB,EAAAA,cAkGTinB,IArEE,SAAAA,GACUlC,EACAzH,GADApgB,KAAA6nB,UAAAA,EACA7nB,KAAAogB,WAAAA,ECjBZ,IAAA2K,IAsBSA,GAAA3qB,UAAA4qB,SAAP,WAAA,IAAA9pB,EAAAlB,KAaE,OAZAA,KAAK0nB,WAAWuD,UAAUhoB,UACxB,SAACC,eACC,IAAqB,IAAAgoB,EAAAC,GAAAjoB,GAAMkoB,EAAAF,EAAAtgB,QAAAwgB,EAAAtgB,KAAAsgB,EAAAF,EAAAtgB,OAAVwgB,EAAAvgB,MACRmgB,WAAW/nB,UAAU,SAACC,GACtBA,EAAOmoB,UACVC,MAAMpoB,EAAOvB,SACbT,EAAKqqB,kBAAkB3gB,KAAK1H,6GAM/BlD,KAAKurB,mBAKPR,GAAA3qB,UAAAorB,mBAAP,WAAA,IAAAtqB,EAAAlB,KACQyrB,EAAiBzrB,KAAK0nB,WAAW+D,eAEjCC,EAAe1rB,KAAKgb,aAAa2P,YAAYgB,KAAKC,UACxD,IAAKF,EACH,OAAOnL,EAAAA,IAAG,GAGZ,IAAMsL,EAAS7rB,KAAK0nB,WAAWoE,iBAAiBC,cAAcL,GAC9D,IAAKG,EACH,OAAOtL,EAAAA,IAAG,GAGZ,IADsBvgB,KAAKgsB,6BAA6BP,GAEtD,OAAOnO,EAAAA,MAET,IAAM2O,EAAqB,CAACJ,GACtBK,EAAYlsB,KAAKgb,aAAakR,UAChCC,EAAgB,GAKlBA,EAFgB,OAAdD,EAEclsB,KAAKgb,aAAaoF,WAAWuH,oBAAoByE,4BAA4BF,GAG7ElsB,KAAKgb,aAAaoF,WAAWuH,oBAAoB0E,mBAGnE,IAAMC,EAAUtsB,KAAK8jB,aACfyI,EAA4BvsB,KAAKusB,4BACnCC,EAAgBxsB,KAAKgb,aAAayR,KAAK5E,UACvCyE,GAAWC,IACbC,EAAgBxsB,KAAKgb,aAAagO,6BAA6BnB,WAGjE,IAAI6E,GAAa,EACXC,EAAa,GAMnB,GALAR,EAAc/pB,QAAQ,SAAC4Y,GACjBA,EAAa4R,MAAQ5R,EAAa4R,KAAKC,iBACzCH,GAAa,MAGZA,GAAcT,EAASzpB,OAAS,EACnC,OAAO+d,EAAAA,IAAG,GAEZiM,EAAcM,mBAAqB,GACnC,IAAIC,GAAY,EAEVC,EAAsB,IAAIzkB,IAChC4jB,EAAc/pB,QAAQ,SAAC6qB,GACrB,IAAMC,EAAgBD,EAAYtC,YAAYwC,YAE9CD,GAAiBA,EAAcE,sBAAqB,GAChDH,EAAYL,MAAQK,EAAYL,KAAKC,iBAEJI,EAAYL,KAAKS,qBACzBjrB,QAAQ,SAACkrB,EAAOnS,GACrC6R,EAAoB7kB,IAAIgT,GAC1BmS,EAAMlrB,QAAQ,SAAAmrB,GAAQ,OAAAP,EAAoB5kB,IAAI+S,GAAM7Z,KAAKisB,KAEzDP,EAAoB1kB,IAAI6S,EAAI/P,GAAMkiB,MAGtCL,EAAYL,KAAKQ,sBAAqB,GAEjCH,EAAYL,KAAKY,gBACpBb,EAAWrrB,KAAK2rB,EAAYL,MAC5BG,GAAY,MAMlB,IAAMU,EAAiBxB,EAASjM,IAAI,SAAC6L,GAEnC,OADc3qB,EAAK8Z,aAAa2P,YAAYgB,KAAK+B,aAAa7B,EAAOH,cAC9DG,EAAOb,SAASjZ,UAAWA,UAAWib,EAAqB,KAAM9rB,EAAK8Z,gBAoI/E,OAlIgB2S,EAAAA,IAAGrjB,WAAA,EAAAc,GAAIqiB,IAAgB7M,KACrCG,EAAAA,IAAI,SAAC6M,GACHzB,EAAc/pB,QAAQ,SAAC6qB,GACrB,GAAKA,EAAYL,KAAKC,eAAtB,CAGA,IAAMgB,EAAe,SAACC,GACpBA,EAAO1rB,QAAQ,SAAC2rB,GACVA,EAAgBC,UAAYD,EAAgBC,SAASxrB,QACvDqrB,EAAaE,EAAgBC,UAE/B,IAAMC,EAAY,GACd1Y,EAAK,GACH2Y,EAAS,SAACC,GACVA,GAAUA,EAAO/X,MAAQ+X,EAAO/X,KAAKb,GACvCA,EAAK4Y,EAAO/X,KAAKb,GAER4Y,EAAOC,EAAAA,eAChBF,EAAOC,EAAOC,EAAAA,gBAGlBF,EAAOH,EAAgBI,QAIvB,IAAIE,EAAiB,CACnBlT,KAAM,GACNmT,OAAO,EACPC,QAAQ,GAENR,EAAgBI,SAClBE,EAAiBN,EAAgBI,OAAOK,YAEhBH,EAAelT,KAAKsT,KAAK,KAC/CV,EAAgBW,aAClBjmB,OAAOM,KAAKglB,EAAgBW,aAAatsB,QAAQ,SAAAoV,GAC/CyW,EAAUzW,GAAO,CACf5G,KAAMmd,EAAgBW,YAAYlX,MAYxC,IAAMmX,EAAQN,EAAelT,KAAK9P,OAAO0iB,EAAgBa,UAIzD3B,EAAYtC,YAAYkE,QAAQjkB,KAAK,CACnChI,KAAMksB,EAAAA,WAAWC,aACjBxZ,GAAEA,EACF4F,KAAMwT,EACNL,MAAOD,EAAeC,MACtBC,OAAQF,EAAeE,OACvB1jB,MAAOkjB,EAAgBljB,MACvBijB,OAAQG,OASd,GAHoBL,EAAW5N,IAAI,SAAC9c,GAA6B,OAAAA,EAAOmoB,UAGxDlpB,OAAO,SAAA6sB,GAAK,OAAAA,IAAGxsB,SAAWirB,EAAejrB,QAOvD,GALAyqB,EAAYtC,YAAYkE,QAAQjkB,KAAK,CACnChI,KAAMksB,EAAAA,WAAWC,aACjB5T,KAAM,KAGJ4R,EAAW,CACb,IAAMG,EAAgBD,EAAYtC,YAAYwC,YAC9CD,GAAiBA,EAAcE,sBAAqB,GACpD,IAAMR,EAAOK,EAAYL,KACrBA,GACFA,EAAKQ,sBAAqB,SAM9BQ,EAAWxrB,QAAQ,SAACc,GACdA,EAAOmoB,QAET4B,EAAYtC,YAAYkE,QAAQjkB,KAAK,CACnChI,KAAMksB,EAAAA,WAAWC,aACjB5T,KAAM,KAGR0S,EAAa3qB,EAAO4qB,eAM9B9M,EAAAA,UAAU,SAAC4M,GACT,IAAIqB,GAAc,EACZnB,EAAS,GACfF,EAAWxrB,QAAQ,SAACc,GACbA,EAAOmoB,UACV4D,GAAc,GAEhBnB,EAAOxsB,KAAIgJ,MAAXwjB,EAAM1iB,GAASlI,EAAO4qB,WAEJ,EAAhBA,EAAOtrB,QACTtB,EAAKguB,wBAAwB1C,EAAesB,EAAQ5sB,EAAK8Z,aAAakR,WAGxE,IAAIY,EAAqBN,EAAcM,mBASvC,OARIR,GAAWC,IACbO,EAAqBN,EAAcM,mBAAmB3qB,OAAO,SAAAgV,GAAQ,OAAAA,EAAK+U,YAAcA,KAE1FM,EAAc2C,oBAAoBvkB,KAAKkiB,GACnCmC,IAAgBlC,GAElB/d,QAAQ8S,KAAK,2BAEXmN,GAAelC,EACVxM,EAAAA,IAAG,GAEHnL,EAAAA,YASf2V,GAAA3qB,UAAAgvB,YAAA,WAAA,IAAAluB,EAAAlB,KACQyrB,EAAiBzrB,KAAK0nB,WAAW+D,eAEjCQ,EAAqBjsB,KAAK0nB,WAAWoE,iBAAiBuD,iBACtDnD,EAAYlsB,KAAKgb,aAAakR,UAChCC,EAAgB,GASpB,GANEA,EAFgB,OAAdD,EAEclsB,KAAKgb,aAAaoF,WAAWuH,oBAAoByE,4BAA4BF,GAG7ElsB,KAAKgb,aAAaoF,WAAWuH,oBAAoB0E,oBAE7CrsB,KAAKgsB,6BAA6BP,GAEtD,OAAOnO,EAAAA,MAET,IAAIoP,GAAa,EACXC,EAAa,GAMnB,GALAR,EAAc/pB,QAAQ,SAAC4Y,GACjBA,EAAa4R,MAAQ5R,EAAa4R,KAAKC,iBACzCH,GAAa,MAGZA,GAAcT,EAASzpB,OAAS,EACnC,OAAO+d,EAAAA,IAAG,GAEZ,IAAM+L,EAAUtsB,KAAK8jB,aACfyI,EAA4BvsB,KAAKusB,4BACnCC,EAAgBxsB,KAAKgb,aAAayR,KAAK5E,UACvCyE,GAAWC,IACbC,EAAgBxsB,KAAKgb,aAAagO,6BAA6BnB,WAGjE,IAAIkF,GAAY,EAEVC,EAAsB,IAAIzkB,IAChC4jB,EAAc/pB,QAAQ,SAAC6qB,GACrB,IAAMC,EAAgBD,EAAYtC,YAAYwC,YAE9CD,GAAiBA,EAAcE,sBAAqB,GAChDH,EAAYL,MAAQK,EAAYL,KAAKC,iBAEJI,EAAYL,KAAKS,qBACzBjrB,QAAQ,SAACkrB,EAAOnS,GACrC6R,EAAoB7kB,IAAIgT,GAC1BmS,EAAMlrB,QAAQ,SAAAmrB,GAAQ,OAAAP,EAAoB5kB,IAAI+S,GAAM7Z,KAAKisB,KAEzDP,EAAoB1kB,IAAI6S,EAAI/P,GAAMkiB,MAGtCL,EAAYL,KAAKQ,sBAAqB,GAEjCH,EAAYL,KAAKY,gBACpBb,EAAWrrB,KAAK2rB,EAAYL,MAC5BG,GAAY,MAKlB,IAAMuC,EAAyC,EAAlBrD,EAASzpB,OAGhCirB,EAAiBxB,EAASjM,IAAI,SAAC6L,EAAgB9T,GACnD,OAAA8T,EAAOb,SAASjZ,UAAWA,UAAWib,EAAqBsC,EAAuBvX,EAAQ,KAAM7W,EAAK8Z,gBAkIvG,OAjIgB2S,EAAAA,IAAGrjB,WAAA,EAAAc,GAAIqiB,IAAgB7M,KACrCG,EAAAA,IAAI,SAAC6M,GACHzB,EAAc/pB,QAAQ,SAAC6qB,GACrB,GAAKA,EAAYL,KAAKC,eAAtB,CAGA,IAAMgB,EAAe,SAACC,GACpBA,EAAO1rB,QAAQ,SAAC2rB,GACVA,EAAgBC,UAAYD,EAAgBC,SAASxrB,QACvDqrB,EAAaE,EAAgBC,UAE/B,IAAMC,EAAY,GACd1Y,EAAK,GACH2Y,EAAS,SAACC,GACVA,GAAUA,EAAO/X,MAAQ+X,EAAO/X,KAAKb,GACvCA,EAAK4Y,EAAO/X,KAAKb,GAER4Y,EAAOC,EAAAA,eAChBF,EAAOC,EAAOC,EAAAA,gBAGlBF,EAAOH,EAAgBI,QAIvB,IAAIE,EAAiB,CACnBlT,KAAM,GACNmT,OAAO,EACPC,QAAQ,GAENR,EAAgBI,SAClBE,EAAiBN,EAAgBI,OAAOK,YAEhBH,EAAelT,KAAKsT,KAAK,KAC/CV,EAAgBW,aAClBjmB,OAAOM,KAAKglB,EAAgBW,aAAatsB,QAAQ,SAAAoV,GAC/CyW,EAAUzW,GAAO,CACf5G,KAAMmd,EAAgBW,YAAYlX,MAYxC,IAAMmX,EAAQN,EAAelT,KAAK9P,OAAO0iB,EAAgBa,UAIzD3B,EAAYtC,YAAYkE,QAAQjkB,KAAK,CACnChI,KAAMksB,EAAAA,WAAWC,aACjBxZ,GAAEA,EACF4F,KAAMwT,EACNL,MAAOD,EAAeC,MACtBC,OAAQF,EAAeE,OACvB1jB,MAAOkjB,EAAgBljB,MACvBijB,OAAQG,OASd,GAHoBL,EAAW5N,IAAI,SAAC9c,GAA6B,OAAAA,EAAOmoB,UAGxDlpB,OAAO,SAAA6sB,GAAK,OAAAA,IAAGxsB,SAAWirB,EAAejrB,QAOvD,GALAyqB,EAAYtC,YAAYkE,QAAQjkB,KAAK,CACnChI,KAAMksB,EAAAA,WAAWC,aACjB5T,KAAM,KAGJ4R,EAAW,CACb,IAAMG,EAAgBD,EAAYtC,YAAYwC,YAC9CD,GAAiBA,EAAcE,sBAAqB,GACpD,IAAMR,EAAOK,EAAYL,KACrBA,GACFA,EAAKQ,sBAAqB,SAM9BQ,EAAWxrB,QAAQ,SAACc,GACdA,EAAOmoB,QAET4B,EAAYtC,YAAYkE,QAAQjkB,KAAK,CACnChI,KAAMksB,EAAAA,WAAWC,aACjB5T,KAAM,KAGR0S,EAAa3qB,EAAO4qB,eAM9B9M,EAAAA,UAAU,SAAC4M,GACT,IAAIqB,GAAc,EACZnB,EAAS,GACfF,EAAWxrB,QAAQ,SAACc,GACbA,EAAOmoB,UACV4D,GAAc,GAEhBnB,EAAOxsB,KAAIgJ,MAAXwjB,EAAM1iB,GAASlI,EAAO4qB,WAEJ,EAAhBA,EAAOtrB,QACTtB,EAAKguB,wBAAwB1C,EAAesB,EAAQ5sB,EAAK8Z,aAAakR,WAExE,IAAIY,EAAqBN,EAAcM,mBASvC,OARIR,GAAWC,IACbO,EAAqBN,EAAcM,mBAAmB3qB,OAAO,SAAAgV,GAAQ,OAAAA,EAAK+U,YAAcA,KAGtF+C,GAAelC,IACjBD,EAAqBN,EAAcM,mBAAqB,IAE1DN,EAAc2C,oBAAoBvkB,KAAKkiB,GACnCmC,GAAelC,EACVxM,EAAAA,IAAG,GAEHnL,EAAAA,YAUP2V,GAAA3qB,UAAA4rB,6BAAR,SAAqCP,GAArC,IAAAvqB,EAAAlB,KAEQ2uB,EAAQ3uB,KAAKuvB,6BAA6B9D,GAChD,IAAKkD,GAASA,EAAMnsB,OAAS,EAC3B,OAAO,EAGT,IAAMgtB,EAAeb,EAAMxsB,OAAO,SAACgZ,GACjC,IAAMsU,EAAetU,EAAKvB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC3CgmB,EAAcxuB,EAAK8Z,aAAa2P,YAAYgF,SAASF,GAC3D,OAAKC,GAAeA,EAAYltB,OAAS,IAM3C,GAA0B,EAAtBgtB,EAAahtB,OAAY,CAC3B,IAAMotB,EAAa,GAcnB,OAbAJ,EAAaptB,QAAQ,SAAC+Y,GAMpB,IAAM0U,EAAgB3uB,EAAK4uB,+BAA+B3U,EAAKvB,MAAM,OAAS,OAAOuB,EACrFyU,EAAWtuB,KAAKuuB,KAGd7vB,KAAKyT,eACPzT,KAAKyT,cAActI,MAASykB,EAAWnB,KAAK,KAAI,IAAIzuB,KAAK4M,gBAAgBhF,iBAAoB,CAAEiM,WAAW,KAErG,EAET,OAAO,GAMDkX,GAAA3qB,UAAA0vB,+BAAR,SAAuCL,GACrC,IAAMvD,EAAYlsB,KAAKgb,aAAakR,UAChCC,EAAgC,KAGlCA,EAFgB,OAAdD,EAEclsB,KAAKgb,aAAaoF,WAAWuH,oBAAoByE,4BAA4BF,GAG7ElsB,KAAKgb,aAAaoF,WAAWuH,oBAAoB0E,mBAEnE,IAAM0D,EAAcN,EAAattB,OAAO,SAAAuH,GAAK,OAAAA,IAAG+kB,KAAK,KAC/CzT,EAAemR,EAAcjV,KAAK,SAAC8D,GAA+B,OAAAA,EAAa6M,WAAa7M,EAAa6M,UAAUkI,YAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAAG+kB,KAAK,OAASsB,IAE7K,OADsB/U,GAAgBA,EAAa4R,MAAQ5R,EAAa4R,KAAKoD,eAAiB,IASxFjF,GAAA3qB,UAAAmvB,6BAAR,SAAqC9D,EAA8BhB,GACjE,QADiE,IAAAA,IAAAA,EAAA,IAC5DgB,EAIL,OADAzrB,KAAKiwB,iCAAiCxE,EAAgBhB,GAC/CA,GAEDM,GAAA3qB,UAAA6vB,iCAAR,SAAyCxE,EAA8BvoB,EAAuBgtB,GAA9F,IAAAhvB,EAAAlB,UAAuE,IAAAkD,IAAAA,EAAA,SAAuB,IAAAgtB,IAAAA,EAAA,KAGvE,IADAlwB,KAAKmwB,aAAa1E,EAAe2E,WAAWC,WAAYH,KAEvEA,EAAc1tB,OAAS,EACzBU,EAAO5B,KAAK,IAEZ4B,EAAO5B,KAAK4uB,EAAczB,KAAK,OAInC,IAAM9C,EAAOF,EAAe6E,oBAAoBC,EAAAA,cAAcC,MAC1D7E,GAAsB,EAAdA,EAAKnpB,QACfmpB,EAAKvpB,QAAQ,SAACquB,GACZ,IAAMC,EAAWD,EAASC,SACtBA,GAAYA,EAASN,aACvBF,EAAc5uB,KAAKovB,EAASN,WAAWO,UACvCzvB,EAAK+uB,iCAAiCS,EAAUxtB,EAAQgtB,MAK1DA,GAAwC,EAAvBA,EAAc1tB,QACjC0tB,EAAcU,OAGV7F,GAAA3qB,UAAA+vB,aAAR,SAAqBtlB,EAAyB8jB,GAC5C,GAAI9jB,IAAUkH,YAAuB,IAAVlH,GAA4B,KAAVA,EAC3C,OAAO,EAGT,IAAMshB,EAAgBnsB,KAAK6wB,6BAA6BlC,GACpDmC,EAAS9wB,KAAKgb,aAAa+V,eAO/B,OANK5E,GAAiBA,EAAc3pB,OAAS,EAE3CwM,QAAQ8S,KAAK,QAAQ6M,EAAMF,KAAK,KAAI,4CAEpCqC,EAAS3E,EAAcyE,MAAMG,eAEV,kBAAVlmB,EACFA,EACmB,iBAAVA,GAChBA,EAAQA,EAAM6b,OAAOF,WAAW,UAAY3b,EAAQ,UAAUA,EAC9C,IAAImmB,SAAS,wIAIzBnmB,EAAK,YAEMP,MAAMwmB,SAErB9hB,QAAQ8S,KAAK,aAGjBiJ,GAAA3qB,UAAA8uB,wBAAA,SAAwB1C,EAA0BsB,EAA2B5B,EAAmB/pB,GAAhG,IAAAjB,EAAAlB,UAAgG,IAAAmC,IAAAA,GAAA,GAC1FA,IACFqqB,EAAcM,mBAAqBN,EAAcM,mBAAmB3qB,OAAO,SAAAgV,GAAQ,OAAAA,EAAK+U,YAAcA,KAExG4B,EAAO1rB,QAAQ,SAAC2rB,GACVA,EAAgBC,UAAYD,EAAgBC,SAASxrB,QACvDtB,EAAKguB,wBAAwB1C,EAAeuB,EAAgBC,SAAU9B,GAAW,GAEnF,IAAI3W,EAAK,GACH2Y,EAAS,SAACC,GACVA,GAAUA,EAAO/X,MAAQ+X,EAAO/X,KAAKb,GACvCA,EAAK4Y,EAAO/X,KAAKb,GAER4Y,EAAOC,EAAAA,eAChBF,EAAOC,EAAOC,EAAAA,gBAIlB,GADAF,EAAOH,EAAgBI,QACnBJ,EAAgBW,YAAa,CAC/B,IAAMuC,EAAwBxoB,OAAOM,KAAKglB,EAAgBW,aAC1D,GAAIuC,EAAsBzuB,OAAQ,CAChC,IAAM0uB,EAAS1E,EAAcM,mBAAmB3qB,OAAO,SAAAgV,GAAQ,OAAAA,EAAK+U,YAAcA,IAAW1pB,OACzFuV,EAAQyU,EAAcM,mBAAmBqE,UAAU,SAAAha,GAAQ,OAAAA,EAAK+U,YAAcA,IAClFnU,GAAmB,IAAXA,EAAe,EAAIA,EAAQmZ,EACnC1E,EAAcM,mBAAmB9U,OAAOD,EAAO,EAAG,CAChDxC,GAAIA,EACJ2W,UAASA,EACTkF,YAAarD,EAAgBsD,MAC7BtZ,MAAOgW,EAAgBhW,MACvBpG,MAAOoc,EAAgBuD,aACvB5d,IAAKqa,EAAgBW,YAAYuC,EAAsB,IACvDjW,aAAc+S,EAAgB/S,aAC9BuW,SAAUxD,EAAgBwD,SAC1B3uB,KAAmC,aAA7BquB,EAAsB,GAAoB,QAAU,eAS7DlG,GAAA3qB,UAAAoxB,gBAAP,WACE,IAAMC,EAAWzxB,KAAK8jB,aAClB0I,EAAgBxsB,KAAKgb,aAAayR,KAAK5E,UACvC4J,IACFjF,EAAgBxsB,KAAKgb,aAAagO,6BAA6BnB,WAEjE,IAAIiF,EAAqBN,EAAcM,mBACvC,GAAIA,EAAmBtqB,OAAQ,CAC7B,IAAMkvB,EAAY1xB,KAAKgb,aAAakR,UAClB,OAAdwF,IACF5E,EAAqBN,EAAcM,mBAAmB3qB,OAAO,SAAAgV,GAAQ,OAAAA,EAAK+U,YAAcwF,KAE1FlF,EAAcM,mBAAqBA,EAMrC,OAHIN,GAAiBA,EAAc2C,qBACjC3C,EAAc2C,oBAAoBvkB,KAAKkiB,GAElCvM,EAAAA,GAAG,OAKJwK,GAAA3qB,UAAA0jB,WAAR,WACE,OAAO9jB,KAAKgb,cAAgBhb,KAAKgb,aAAagO,8BAAgChpB,KAAKgb,aAAagO,6BAA6B+H,gBAAkB/wB,KAAKgb,aAAagO,6BAA6B+H,eAAsC,wBAAK,GAKnOhG,GAAA3qB,UAAAmsB,0BAAR,WACE,OAAOvsB,KAAKgb,aAAaoH,SAASha,IAAyBupB,EAAAA,oBAAqB,QAAU3xB,KAAKgb,aAAayR,KAAKrM,WAAWgC,SAASha,IAAyBupB,EAAAA,oBAAqB,OAO7K5G,GAAA3qB,UAAAywB,6BAAR,SAAqCpB,GACnC,IAAMM,EAAcN,EAAattB,OAAO,SAAAuH,GAAK,OAAAA,IAAG+kB,KAAK,KACrD,OAAOzuB,KAAKgb,aAAaoF,WAAWuH,oBAAoB0E,mBAAmBlqB,OAAO,SAAA6Y,GAAgB,OAAAA,EAAa6M,UAAUkI,YAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAAG+kB,KAAK,OAASsB,KAEvKhF,GAAA3qB,UAAAwxB,wBAAR,kCAjpBD7xB,EAAAA,uDAfQ8xB,EAAAA,kBAAoBxP,EAAAA,oBAOpB9O,GAAiB5Q,WAAA,CAAA,CAAAC,KAmBrBC,EAAAA,kBAlBI2F,EAAe7F,WAAA,CAAA,CAAAC,KAmBnBC,EAAAA,cAsoBLkoB,IA1oBE,SAAAA,GACUrD,EACA1M,EACYvH,EACA7G,GAHZ5M,KAAA0nB,WAAAA,EACA1nB,KAAAgb,aAAAA,EACYhb,KAAAyT,cAAAA,EACAzT,KAAA4M,gBAAAA,EATd5M,KAAAurB,kBAAoB,IAAIrrB,EAAAA,QACxBF,KAAA8xB,oBAAsB,IAAI5xB,EAAAA,QAU3BF,KAAK4M,kBACR5M,KAAK4M,gBAAkB,IAAIpE,GCXjC,IAAAupB,IAsCSA,GAAA3xB,UAAA4xB,KAAP,SAAYzc,GAAZ,IAAArU,EAAAlB,KACQiyB,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAIhE,OAHAhB,KAAKgb,aAAaoF,WAAW5K,OAAOlN,IAAI,eAAe,GACvDtI,KAAKgb,aAAaoF,WAAW5K,OAAO2K,UAAO,cAC9BngB,KAAK0nB,WAAWwK,QAAQ3c,GACzBqL,KACVG,EAAAA,IACE,WACE7f,EAAKH,eAAeQ,iBAAiB0wB,IAEvC,SAAC9mB,GACCjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBjI,WAAYwG,OAWlE4mB,GAAA3xB,UAAAgyB,UAAP,SAAiBC,GAAjB,IAAAnxB,EAAAlB,KACQkZ,EAAQlZ,KAAKuf,yBAA2Bvf,KAAKuf,wBAAwBrG,OAAS,KACpF,GAAKA,EAAL,CAGA,IAAIoZ,GAAO,EACLC,EAAYvyB,KAAKgb,aAAaoF,WAAW5K,OAAOpN,IAAI8Q,KAAU,EACpEmZ,EAA4BA,GAA6B,mBACpDE,IACHvyB,KAAKgb,aAAaoF,WAAW5K,OAAOlN,IAAI4Q,GAAO,GAC/ClZ,KAAKuf,wBAAwBhC,eAAerE,EAAO,SAACjL,GAClD,GAAIqkB,EACFA,GAAO,MADT,CAIA,IAAM9c,EAAStU,EAAK8iB,YAAY/V,GAChC,GAAIuH,GAAUA,EAAOgd,KAAM,CACzB,IAAMC,EAASjd,EAAOkd,OAChBnd,EAAKC,EAAOD,GACZod,EAAYzxB,EAAK8Z,cAAgB9Z,EAAK8Z,aAAa6M,WAAa3mB,EAAK8Z,aAAa6M,UAAU+K,WAAa1xB,EAAK8Z,aAAa6M,UAAU+K,UAAUH,GAC/II,EAAaF,EAAUnd,QAAUmd,EAAUnd,OAAO6c,IAA8B,KAChFS,EAAmB5xB,EAAK8Z,aAAa2P,YAAYgB,KAAKC,UACtDmH,EAAY7xB,EAAK8Z,aAAagY,aAAa9Q,QAAQnL,MACrDA,EAAQ,KACRkc,OAAS,EACb,GAAKJ,EAIA,CACH,IAAMK,EAAWhyB,EAAK8Z,cAAgB9Z,EAAK8Z,aAAagY,cAAgB9xB,EAAK8Z,aAAagY,aAAaJ,WAAa1xB,EAAK8Z,aAAagY,aAAaJ,UAAUO,SAAWjyB,EAAK8Z,aAAagY,aAAaJ,UAAUO,QAAQN,GAGzN,GAFA9b,EAAQmc,GAAYA,EAASE,WAAaL,GAC1CE,EAAY/xB,EAAK8Z,cAAgB9Z,EAAK8Z,aAAagY,cAAgB9xB,EAAK8Z,aAAagY,aAAaJ,WAAa1xB,EAAK8Z,aAAagY,aAAaJ,WAAa1xB,EAAK8Z,aAAagY,aAAaJ,UAAUS,OAAOtc,IAAU7V,EAAK8Z,aAAagY,aAAaJ,UAAUS,OAAOtc,GAAOnG,MAAQ1P,EAAK0L,gBAAgBtF,mBACxR2rB,EAAUzM,WAAW,OAASyM,EAAUxM,SAAS,MAAO,CACvE,IAAMjP,EAAMyb,EAAUjhB,QAAQ,KAAM,IAAIA,QAAQ,KAAM,IACtDihB,EAAY/xB,EAAK8Z,aAAa8H,UAAU6D,UAAUnP,EAAK,YARzDT,EAAQgc,EAWV,IAAMO,EAAsBR,IAAqBvd,EAC3ClO,EAAe0rB,IAAchc,EAEnC,GAAIuc,GAAuBjsB,EAAc,CAEvC,IAAM1F,EAAUT,EAAK0L,gBAAgBzF,oBAAoB6K,QAAQ,OAAQihB,GACzE/xB,EAAKqyB,mBAAmB5xB,GAASif,KAAKI,EAAAA,UAAU,WAC9C,OAAO9f,EAAKsyB,UAAUf,MACpBxvB,iBACC,GAAIqwB,EAETpyB,EAAKqyB,mBAAmBryB,EAAK0L,gBAAgBxF,aAAawZ,KAAKI,EAAAA,UAAU,WACvE,OAAO9f,EAAKsyB,UAAUf,MACpBxvB,gBACC,CAAA,IAAIoE,EAQT,OAAOkZ,EAAAA,IAAG,GANJ5e,EAAUT,EAAK0L,gBAAgBvF,aAAa2K,QAAQ,OAAQihB,GAClE/xB,EAAKqyB,mBAAmB5xB,GAASif,KAAKI,EAAAA,UAAU,WAC9C,OAAO9f,EAAKsyB,UAAUf,MACpBxvB,iBAMP,MAOA8uB,GAAA3xB,UAAAqzB,IAAP,WAAA,IAAAvyB,EAAAlB,KACQipB,EAAiBjpB,KAAK2qB,YAAYgB,KAAKC,UAEvCqG,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAEhE,OADgBhB,KAAK0nB,WAAW1f,SACjB4Y,KACbG,EAAAA,IACE,WACE8H,GAAcW,aAAatoB,EAAK8Z,aAAciO,GAC9C/nB,EAAKH,eAAeQ,iBAAiB0wB,IAEvC,SAAC9mB,GACCjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBlI,UAAWyG,OAQjE4mB,GAAA3xB,UAAAszB,WAAP,WAAA,IAAAxyB,EAAAlB,KACQme,EAAU,IAAIje,EAAAA,QAEdisB,EAAgBnsB,KAAKgb,aAAaoF,WAAWuH,oBAAoB0E,mBAEjEsH,EAAmB3zB,KAAKgb,aAAagO,6BAA6BkD,UAElE0H,EAA2BzH,EAAchqB,OAAO,SAAC+f,GAA0B,OAAAA,EAAQgK,YAAcyH,KAAqB,GACxHlE,EAAe,GACnB,GAAImE,GAA8D,EAAlCA,EAAyBpxB,OAAY,CAEnE,IAAMqxB,EAAqBD,EAAyBzxB,OAAO,SAAC+f,GAA0B,OAAAA,EAAQ2F,UAAUkI,aAAiD,MAAlC7N,EAAQ2F,UAAUkI,cACzI,GAAI8D,GAAkD,EAA5BA,EAAmBrxB,OAAY,CACvD,IAAMsxB,EAAoBD,EAAmB7T,IAAI,SAACkC,GAA0B,OAAAA,EAAQ2F,UAAUkI,cAC1F+D,GAAgD,EAA3BA,EAAkBtxB,SACzCitB,EAAeqE,EAAkB9T,IAAI,SAAA7E,GAAQ,OAAAA,EAAKvB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,MAAIqqB,KAAK,SAACC,EAAGzqB,GAAM,OAAAyqB,EAAExxB,OAAS+G,EAAE/G,WA4B/G,OAxBAxC,KAAKe,eAAeP,OACpBR,KAAK0nB,WAAW1f,SAAS4Y,KACvBI,EAAAA,UAAU,SAAC6K,GACT,IAAMoI,EAAMpI,EAAOH,aACnB,OAAI+D,GAAsC,EAAtBA,EAAajtB,OACxB0O,EAAAA,KAAKue,GAAc7O,KACxBC,EAAAA,UAAU,SAACkP,GACT,IAAMmE,EAAQhzB,EAAKizB,QAAQjzB,EAAK8Z,aAAa6M,UAAW,IAAMkI,EAAYtB,KAAK,KAAMwF,GACrF,OAAO/yB,EAAKwmB,WAAW0M,aAAaF,MAIjC3T,EAAAA,GAAGsL,MAGdjL,KAAKyT,EAAAA,QAAQpxB,UACb,WACE/B,EAAKH,eAAeW,OACpByc,EAAQvT,QAEV,SAACO,GACCjK,EAAKH,eAAeW,OACpBR,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBlI,UAAWyG,KAE7DgT,GAMF4T,GAAA3xB,UAAAk0B,KAAP,SAAY/e,GAAZ,IAAArU,EAAAlB,KAEE,OADgBA,KAAKu0B,SACN3T,KACbG,EAAAA,IAAI,WACF,IAAM6K,EAAY1qB,EAAKypB,YAAYgB,KAAKC,UACxC/C,GAAcW,aAAatoB,EAAK8Z,aAAc4Q,OAU7CmG,GAAA3xB,UAAAm0B,OAAP,SAAchf,GAAd,IAAArU,EAAAlB,KAGE,KADAuV,EAAKvV,KAAK2qB,YAAYgB,KAAKC,WAEzB,OAAOxW,EAAAA,QAET,IAAM6c,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAC1DwzB,EAAUx0B,KAAK0nB,WAAW+M,WAAWlf,GAE3C,OADAvV,KAAKgb,aAAaoF,WAAW5K,OAAOlN,IAAI,eAAe,GAChDksB,EAAQ5T,KACbG,EAAAA,IAAI,WACF7f,EAAKH,eAAeQ,iBAAiB0wB,IAErC,SAAA9mB,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBnI,aAAc0G,OAKpE4mB,GAAA3xB,UAAAs0B,mBAAP,WAGE,OADW10B,KAAK2qB,YAAYgB,KAAKC,UAIxB5rB,KAAKu0B,SAFLhU,EAAAA,GAAG,OASPwR,GAAA3xB,UAAAu0B,kBAAP,WACE,IAAMjF,EAAc1vB,KAAKgb,aAAa2P,YAAYgB,KAElD,OADW+D,GAAeA,EAAY9D,UAK/BrL,EAAAA,IAAG,IAHRvgB,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAgBtG,YAAa,CAAEuN,WAAW,IACvEyJ,EAAAA,QAQJyU,GAAA3xB,UAAAw0B,iBAAP,WAGE,OADW50B,KAAK2qB,YAAYgB,KAAKC,UAKxB5rB,KAAKu0B,UAHZv0B,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAgBtG,YAAa,CAAEuN,WAAW,IACvEyJ,EAAAA,QASJyU,GAAA3xB,UAAAy0B,UAAP,SAAiB1yB,EAAiB4xB,GAAlC,IAAA7yB,EAAAlB,KAGE,IADWA,KAAK2qB,YAAYgB,KAAKC,UAE/B,OAAOtO,EAAAA,MAGT,IAAM2U,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAGhE,OADgBuf,EAAAA,GAAG,MACJK,KACbG,EAAAA,IAAI,WACF7f,EAAKH,eAAeQ,iBAAiB0wB,IAErC,SAAA9mB,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBnI,aAAc0G,OAQpE4mB,GAAA3xB,UAAA00B,KAAP,SAAYC,GAAZ,IAAA7zB,EAAAlB,KAEQuV,EAAKvV,KAAK2qB,YAAYgB,KAAKC,UACjC,IAAKrW,EACH,OAAOgL,EAAAA,IAAG,GAGZ,IAAM0R,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAC1DwzB,EAAUx0B,KAAK0nB,WAAWsN,kBAAkBzf,GAC5C0f,EAAQj1B,KAAK0nB,WAAWwN,iBAAiB3f,GA4C/C,OA3CgBif,EAAQ5T,KAGtBI,EAAAA,UAAU,SAACmU,GACT,OAAqB,IAAjBA,EACK5U,EAAAA,IAAG,GAEH0U,IAKXlU,EAAAA,IAAI,WAMF,GAHA8H,GAAcW,aAAatoB,EAAK8Z,aAAczF,GAC9CrU,EAAKH,eAAeQ,iBAAiB0wB,GAEjC8C,GAAcA,EAAWrO,OAAQ,CACnC,IAAI0O,GAAuB,EAC3B,GAAIL,EAAWvO,WAAW,MAAQuO,EAAWtO,SAAS,KACpD,IACE,IAAMxY,EAAU2D,KAAKC,MAAMkjB,GACvB9mB,IAAmC,IAAxBA,EAAQmnB,cACrBA,GAAc,GAEhB,MAAAvb,KAEgB,IAAhBub,GACFl0B,EAAKiU,kBAAkBrB,QAAQihB,EAAY,CAAElhB,WAAW,SAG1D4V,GAA0B3V,QAAQ5S,EAAKiU,kBAAmBjU,EAAK0L,gBAAgBhI,cAIjF,SAAAuG,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgB/H,WAAYsG,OAclE4mB,GAAA3xB,UAAAqG,OAAP,WACE,OAAOzG,KAAKq1B,mBAOPtD,GAAA3xB,UAAAk1B,OAAP,SAAcrnB,GACZ,OAAOjO,KAAKu1B,mBAAmBtnB,IAa1B8jB,GAAA3xB,UAAAi1B,gBAAP,WAAA,IAAAn0B,EAAAlB,KAIE,OAD0Bw1B,EAAAA,kBAAkBC,kBAAkBz1B,KAAK0nB,YAMlD1nB,KAAK01B,mBAAmB3kB,SAAS/Q,KAAK4M,gBAAmC,mBACjEgU,KACvBI,EAAAA,UAAU,SAAC2U,GACT,OAAiB,IAAbA,EACKrY,EAAAA,MAEFpc,EAAKomB,mBAVPtnB,KAAKsnB,iBAoBTyK,GAAA3xB,UAAAm1B,mBAAP,SAA0BtnB,GACxB,OAAOjO,KAAKsnB,cAAcrZ,IAMpB8jB,GAAA3xB,UAAAknB,cAAR,SAAsBrZ,GAAtB,IAAA/M,EAAAlB,KACQiyB,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAEhE,OADgBhB,KAAK0nB,WAAWJ,cAAcrZ,GAC/B2S,KACbG,EAAAA,IACE,WACE8H,GAAcW,aAAatoB,EAAK8Z,aAAc,IAC9C9Z,EAAKH,eAAeQ,iBAAiB0wB,IAEvC,SAAA9mB,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBpI,aAAc2G,OAYpE4mB,GAAA3xB,UAAA4Z,OAAP,WACE,IACIzE,EAOJ,GALEA,GADY,IAFAsT,GAAcQ,YAAYrpB,KAAKgb,cAGtC6N,GAAcC,kBAAkB9oB,KAAKgb,cAErChb,KAAK2qB,YAAYgB,KAAKC,UAQ7B,OAAO5rB,KAAKgyB,KAAKzc,GAJfvV,KAAK0nB,WAAWoE,iBAAiB8J,aAAa,KAM1C7D,GAAA3xB,UAAA+zB,QAAR,SAAgBtM,EAAsBkI,EAAqBkE,GACzD,IAAI9Y,EAAO,IAAM8Y,EAEX4B,EAAW9F,EAAYnW,MAAM,KACnC,GAAsB,EAAlBic,EAASrzB,OAGX,IAAK,IAAIuV,EAAQ,EAAGA,EAAQ8d,EAASrzB,OAAS,EAAGuV,IAAS,CACxD,IAAM+d,EAAUD,EAAS9d,GACnBge,EAAUlO,EAAU8C,YAAYmL,GACtC,IAAKC,IAAYA,EAAQnK,UACvB,MAAMlb,MAAM,iBAAiBqlB,EAAO,qBAEtC5a,GAAQ,IAAI2a,EAAO,IAAIC,EAAQnK,UAKnC,OAFAzQ,GAAQ,IAAM0a,EAASA,EAASrzB,OAAS,IAInCuvB,GAAA3xB,UAAAozB,UAAR,SAAkBd,GAAlB,IAAAxxB,EAAAlB,KACQg2B,EAAoBh2B,KAAKgb,aAAaoH,SAASha,IAAuB2iB,GAAmB,MAC/F,OAAO/qB,KAAKgb,aAAa0M,WAAWJ,gBAAgB1G,KAClDI,EAAAA,UAAU,WAAM,OAAA9f,EAAK+0B,eAAehM,QAAQyI,GAAQ9R,KAAKI,EAAAA,UAAU,WACjE,OAAOgV,GAAqBA,EAAkBxE,mBAAqBjR,EAAAA,GAAG,aAGpEwR,GAAA3xB,UAAA4jB,YAAR,SAAoB/V,GAClB,GAAIA,GAAkD,iBAAvCxF,OAAOrI,UAAUkY,SAASjO,KAAK4D,GAA2B,CACvE,IAAIuH,EAASvH,EAAQ7F,IVxdc,yBUydnC,GAAIoN,GAA4B,iBAAXA,EAKnB,OAJAA,EAASyG,mBAAmBzG,IACjBgR,WAAW,MAAQhR,EAAOiR,SAAS,OAC5CjR,EAAS5D,KAAKC,MAAM2D,IAEf,CACLkd,OAAQld,EAAOkd,OACfnd,GAAIC,EAAOF,UAAYE,EAAOP,UAAYO,EAAOD,GACjDid,KAAMhd,EAAOgd,OAAQ,GAI3B,OAAO,MAEDT,GAAA3xB,UAAAmzB,mBAAR,SAA2B5xB,GACzB,OAAO3B,KAAK01B,mBAAmBlvB,QAAQ7E,GAASif,KAC9CI,EAAAA,UAAU,SAAC9d,GACT,OAAe,IAAXA,EACKqd,EAAAA,IAAG,GAEHjD,EAAAA,+BAzfhBvd,EAAAA,uDAbQ+Q,UAPqBuR,EAAAA,oBAIrBliB,SAEAoT,UADA/K,EAAe7F,WAAA,CAAA,CAAAC,KAoCnBC,EAAAA,kBAjCIoN,UAGA2M,UAEAmN,MAqgBTgI,IA9eE,SAAAA,GACU2D,EACA1a,EACAja,EACAoU,EACYvI,EACZulB,EACA5S,EACA0W,GAPAj2B,KAAA01B,mBAAAA,EACA11B,KAAAgb,aAAAA,EACAhb,KAAAe,eAAAA,EACAf,KAAAmV,kBAAAA,EACYnV,KAAA4M,gBAAAA,EACZ5M,KAAAmyB,iBAAAA,EACAnyB,KAAAuf,wBAAAA,EACAvf,KAAAi2B,eAAAA,EAEHrpB,IACH5M,KAAK4M,gBAAkBpE,EAAgBG,eAEzC3I,KAAK0nB,WAAa1nB,KAAKgb,aAAa0M,WACpC1nB,KAAK2qB,YAAc3qB,KAAKgb,aAAa2P,YCpCzC,IAAAuL,IAuBSA,GAAA91B,UAAA+1B,UAAP,WAAA,IAAAj1B,EAAAlB,KACMA,KAAK8jB,cAGT9jB,KAAKo2B,kBAAkBvY,iBAAiBtB,GAAUE,aAAc,SAACxO,GAC/D,IAAI/M,EAAKm1B,WAAcn1B,EAAKkf,WAAWkW,OAuBhC,OAAIp1B,EAAKm1B,WAAan1B,EAAKkf,WAAWkW,OACpC/V,EAAAA,IAAG,GAEHA,EAAAA,IAAG,GAxBNtS,GAAWA,EAAQsoB,mBAA0D,mBAA9BtoB,EAAQsoB,mBACzDtoB,EAAQsoB,kBAAkB,CAAEC,gBAAgB,IAE9C,IAAMC,EAAUv1B,EAAKoP,WAAWS,SAAS7P,EAAK0L,gBAAiC,iBAG/E,OADA1L,EAAKkf,WAAWkW,QAAS,EAClBG,EAAQ7V,KACbI,EAAAA,UAAU,SAAC9d,GAET,OADAhC,EAAKkf,WAAWkW,QAAS,EACrBpzB,GAEIhC,EAAKw1B,gBACOx1B,EAAKw1B,gBAAgBpB,OAAOrnB,GAC7B2S,KACbI,EAAAA,UAAU,WAAM,OAAAT,EAAAA,GAAGrd,MAIlBqd,EAAAA,GAAGrd,SAaZgzB,GAAA91B,UAAA0jB,WAAR,WAGE,IAFA,IAAI9I,EAAehb,KAAKgb,aACpBoK,EAAwBpK,EAAa+V,eAAsC,wBAAK,EACrD,OAAxB/V,EAAaiC,SAAoBmI,GAEtCA,GADApK,EAAeA,EAAaiC,QACS8T,eAAsC,sBAE7E,OAAO3L,GAQF8Q,GAAA91B,UAAAu2B,SAAP,SAAgBnhB,EAAgBohB,GAC9B,GAAMA,EACJ,OAAOA,EAET,IAAIrb,EAAiB,KAUrB,OATM/F,GAAUA,EAAOgR,WAAW,MAAQhR,EAAOiR,SAAS,OACxDlL,EAAY3J,KAAKC,MAAM2D,IAGrB+F,GAAaA,EAAU3Z,eAAe,OAAW2Z,EAAUhG,GACnDgG,EAAUhG,GAEVyJ,EAAAA,IAAIhX,UAOlBS,OAAAC,eAAYwtB,GAAA91B,UAAA,YAAS,KAArB,WACE,IAAMy2B,EAAgB72B,KAAK0nB,WAC3B,OAAO8N,EAAAA,kBAAkBC,kBAAkBoB,yDAjG9C92B,EAAAA,uDAVQkiB,UACAI,EAAAA,oBACAvR,UACAtI,EAAe7F,WAAA,CAAA,CAAAC,KAgBnBC,EAAAA,kBAfIkvB,MAyGTmE,IA9FE,SAAAA,GACUE,EACApb,EACA1K,EACY1D,EACZ8pB,GAJA12B,KAAAo2B,kBAAAA,EACAp2B,KAAAgb,aAAAA,EACAhb,KAAAsQ,WAAAA,EACYtQ,KAAA4M,gBAAAA,EACZ5M,KAAA02B,gBAAAA,EAER12B,KAAK0nB,WAAa1M,EAAa0M,WAC1B1nB,KAAK4M,kBACR5M,KAAK4M,gBAAkBpE,EAAgBG,eAErC3I,KAAKgb,eACPhb,KAAKogB,WAAapgB,KAAKgb,aAAa8b,qBAAuB,MCXjE,IAAAC,IAmBSA,GAAA32B,UAAA42B,eAAP,WACE,OAAIh3B,KAAKq2B,UACAr2B,KAAKsQ,WAAWS,SAAS/Q,KAAK4M,gBAAiC,iBAAGgU,KACvEI,EAAAA,UAAU,SAAC9d,GACT,OAAKA,EAGIqd,EAAAA,IAAG,GAFHjD,EAAAA,SAONiD,EAAAA,IAAG,IASPwW,GAAA32B,UAAA+B,OAAP,SAAcglB,EAAqBE,GACjC,IACI4P,EADcj3B,KACCkiB,SADDliB,KACiBkiB,QAAQgV,YAAc,GAOzD,MANyB,iBAArB,IACFD,EAAUrlB,KAAKC,MAAMolB,IAGvBj3B,KAAK6nB,UAAU7M,aAAa0M,WAAWoE,iBAAiBqL,UAAY,EACpEn3B,KAAK6nB,UAAU7M,aAAa0M,WAAW0P,uBAAuBC,cAAcr3B,KAAK6nB,UAAUkI,YAAakH,GACjGj3B,KAAKi2B,eAAehM,QAAQ9C,EAAaE,IAKlD5e,OAAAC,eAAYquB,GAAA32B,UAAA,YAAS,KAArB,WACE,IAAMy2B,EAAgB72B,KAAK0nB,WAC3B,OAAO8N,EAAAA,kBAAkBC,kBAAkBoB,yDAxD9C92B,EAAAA,uDAXQsiB,EAAAA,oBACAvR,UACAtI,EAAe7F,WAAA,CAAA,CAAAC,KAgBnBC,EAAAA,kBAlB8BioB,EAAAA,iBAI1Bf,MAiETgN,IAtDE,SAAAA,GACU/b,EACA1K,EACY1D,EACZib,EACAoO,GAJAj2B,KAAAgb,aAAAA,EACAhb,KAAAsQ,WAAAA,EACYtQ,KAAA4M,gBAAAA,EACZ5M,KAAA6nB,UAAAA,EACA7nB,KAAAi2B,eAAAA,EAERj2B,KAAK0nB,WAAa1nB,KAAKgb,aAAa0M,WAC/B1nB,KAAK4M,kBACR5M,KAAK4M,gBAAkBpE,EAAgBG,eCxB7C,IAAA2uB,IASE7uB,OAAAC,eAAW4uB,GAAAl3B,UAAA,SAAM,KAAjB,WAAA,IAAAc,EAAAlB,KAEQ2Y,EAAO5W,OAAOiR,SAAS2F,KACvBnD,EAASxV,KAAKqf,mBAAmBxN,MAAM8G,GAiBvCO,EAAQ1D,EAAO0D,MACrB,IAAKA,EAEH,OAAOqH,EAAAA,GAAG/K,GAEZ,IAAM2I,EAAU,IAAIje,EAAAA,QAiBpB,OAfAF,KAAKuf,wBAAwB1B,iBAAiB3E,EAAO,SAACjO,GACpD,IAAI+U,EAAM,IACN/U,aAAa1C,KAAQ0C,GAA2B,mBAAdA,EAAQ,KAA4C,mBAAjBA,EAAW,WAClF+U,EAAM9e,EAAKq2B,eAAetsB,IAE5B,IAAI/B,EAAO,GAETA,EADE+B,aAAa1C,KAAQ0C,GAA2B,mBAAdA,EAAQ,KAA4C,mBAAjBA,EAAW,QAC3E,IAAI1C,IAAI0C,GAERxC,OAAOsB,OAAO,GAAIkB,GAE3B7J,WAAW,WACT+c,EAAQvT,KAAKnC,OAAOsB,OAAO,GAAIb,EAAM8W,EAAKxK,KACzC,IACFA,GACI2I,EAAQqZ,gDAMTF,GAAAl3B,UAAAm3B,eAAR,SAAuB/hB,GACrB,IAAMwK,EAAM,GAOZ,OANAA,EAA2B,sBAAI/D,mBAAmBzG,EAAOpN,IAAI,0BAC7DoN,EAAOpT,QAAQ,SAACyI,EAAO2M,GACT,0BAARA,IACFwI,EAAIxI,GAAO3M,KAGRmV,GAMFsX,GAAAl3B,UAAAgI,IAAP,SAAWqvB,GACT,OAAOz3B,KAAKwV,OAAOoL,KACjBI,EAAAA,UAAU,SAAA/S,GACR,OAAMA,GAAWA,EAAQrM,eAAe61B,GAC/BlX,EAAAA,GAAGtS,EAAQwpB,OAEXlX,EAAAA,GAAGxO,eAQXulB,GAAAl3B,UAAAyR,MAAP,WACE,OAAO7R,KAAKwV,OAAOoL,KACjBI,EAAAA,UAAU,SAAA/S,GACR,OAAOsS,EAAAA,GAAGtS,4BAxFjBlO,EAAAA,uDATQ4c,UACAC,MAoGT0a,IA1FE,SAAAA,GACUjY,EACAE,GADAvf,KAAAqf,mBAAAA,EACArf,KAAAuf,wBAAAA,EC+DZ,IAAAmY,IAgBSA,GAAAt3B,UAAAu3B,KAAP,SAAY9P,GAAZ,IAAA3mB,EAAAlB,KACE6nB,EAAU+P,cAAcx1B,QAAQ,SAACy1B,EAAYC,GAC3C52B,EAAK62B,SAASF,EAAY,WACxB,OAAOhQ,EAAUiQ,UAUhBJ,GAAAt3B,UAAA23B,SAAP,SAAgBC,EAAqBja,GACnC,IAAIka,EAAQj4B,KAAKk4B,UAAUF,GACvBC,IACFj4B,KAAKm4B,OAAO7vB,IAAI2vB,EAAOla,GACnBia,EAAQI,SAAWJ,EAAQK,SAAWL,EAAQM,SAEhDt4B,KAAKu4B,gBAAgBZ,KAAKM,EAAOj4B,KAAKw4B,UAAUb,KAAK33B,MAAO,SAE5DA,KAAKu4B,gBAAgBZ,KAAKM,EAAOj4B,KAAKw4B,UAAUb,KAAK33B,SASpD03B,GAAAt3B,UAAAq4B,WAAP,SAAkBT,GAChB,IAAIC,EAAQj4B,KAAKk4B,UAAUF,GACvBC,IACFj4B,KAAKm4B,OAAOhY,UAAO8X,GACnBj4B,KAAKu4B,gBAAgBG,OAAOT,KAIxBP,GAAAt3B,UAAAo4B,UAAR,SAAkBvtB,GAAlB,IAAA/J,EAAAlB,KACE,GAAIiL,EAAE0tB,OAAQ,OAAO,EACrB,GAAI34B,KAAK44B,MAAO,CACd,IAAIX,EAAQj4B,KAAKk4B,UAAUjtB,GACvBgtB,GAASj4B,KAAKm4B,OAAOhwB,IAAI8vB,KAC3Bj4B,KAAK44B,OAAQ,EACb54B,KAAKm4B,OAAO/vB,IAAI6vB,EAAhBj4B,GAAyBiD,UAAU,WACjC/B,EAAK03B,OAAQ,GACZ,SAACztB,GACFjK,EAAK03B,OAAQ,GACZ,WACD13B,EAAK03B,OAAQ,KAInB,OAAO,GAODlB,GAAAt3B,UAAA83B,UAAR,SAAkBW,GAChB,IAAIrhB,EAAMqhB,EAAQrhB,IAAIoS,cACtB,GAAkB,GAAdpS,EAAIhV,QAAegV,EAAIshB,WAAW,GAAE,IAAkC,IAAjBthB,EAAIshB,WAAW,GAEtE,OADA9pB,QAAQ8S,KAAK,eACN,KAET,IAAImW,GAASY,EAAQT,QAAU,QAAU,KACpCS,EAAQP,SAAW,SAAW,KAC9BO,EAAQR,OAAS,OAAS,KAC1BQ,EAAQE,QAAU,QAAU,IAC7BvhB,EAEJ,OAAoB,GAAhBygB,EAAMz1B,QACRwM,QAAQ8S,KAAK,sBACN,MAGFmW,wBA7FVl4B,EAAAA,oDA+FD23B,IAzFE,SAAAA,KACE13B,KAAKm4B,OAAS,IAAI5vB,IAClBvI,KAAKu4B,gBAAkBS,EACvBh5B,KAAK44B,OAAQ,EChFjB,IAAAK,yBAACl5B,EAAAA,aAEDk5B,IAFA,SAAAA,MCAA,IAAAC,IAMEA,GAAA94B,UAAA+V,SAAA,SAASgjB,EAAqBlG,GAC5B,MAAM,IAAIviB,MAAM,oBAGlBwoB,GAAA94B,UAAAoW,SAAA,SAAS2iB,EAAqBlG,EAAmBpoB,GAC/C,MAAM,IAAI6F,MAAM,yCAXnB3Q,EAAAA,oDAaDm5B,IAVE,SAAAA,MCFF,IAAAE,IAiBEA,GAAAh5B,UAAAi5B,QAAA,SAAQ3G,GACN,GAAIA,GAA+C,mBAA9B1yB,KAAKgzB,aAAaN,GAAwB,CAO7D,GANA1yB,KAAKgzB,aAAaN,KAClB1yB,KAAKs5B,qBAAuBt5B,KAAc,SAAKA,KAAc,QAAgB,aACzEA,KAAKu5B,YACPv5B,KAAKw5B,gBACLx5B,KAAKu5B,WAAY,IAEdv5B,KAAKs5B,qBACR,OAEF,IAAMG,EAA0Bz5B,KAAK05B,2BAA2B15B,KAAKs5B,sBAC/DG,GACJz5B,KAAK25B,gBAAgBjH,EAAQ+G,KAK3BL,GAAAh5B,UAAAs5B,2BAAR,SAAmCE,GACjC,IAAIH,EAMJ,OALAz5B,KAAK65B,yBAAyBz3B,QAAQ,SAAC03B,GACjCF,EAAoB1N,YAAc4N,EAAO5N,YAC3CuN,EAA0BK,KAGvBL,GAGDL,GAAAh5B,UAAA25B,0BAAR,WACE,GAAI/5B,KAAKgzB,cAAgBhzB,KAAKgzB,aAAahY,aAAc,CACvD,IAAMoF,EAAapgB,KAAKgzB,aAAahY,aAAaoF,WAClD,GAAIA,EAEF,OAD4BA,EAAWuH,oBACZqS,qBAG/B,OAAO,MAIDZ,GAAAh5B,UAAAy5B,uBAAR,WACE,IAAMI,EAAsB,GACtB9N,EAAgBnsB,KAAK+5B,4BAQ3B,OAPI5N,GACFA,EAAc/pB,QAAQ,SAAA+U,IACO,KAAtBA,EAAgB,WAA+B,OAAnBA,EAAa,QAAmC,OAAnBA,EAAa,QAAcA,EAAgB,YAAMA,EAAa,OAAa,YACvI8iB,EAAoB34B,KAAK6V,KAIxB8iB,GAGDb,GAAAh5B,UAAAo5B,cAAR,WAAA,IAAAt4B,EAAAlB,KACOA,KAAK+5B,6BAGV/5B,KAAK65B,yBAAyBz3B,QAAQ,SAAC03B,GACrC,IAAMlf,EAAgBkf,EAAO1X,SAASha,IAAgB8xB,EAAAA,WAAY,OAAS,KACtEtf,GAAkBA,EAAc2K,gBAGhC3K,EAAc2K,cAAc4U,UAAUC,SAASl5B,EAAKm5B,kBAAqBzf,EAAc2K,cAAc4U,UAAUC,SAAS,wBAA2Bxf,EAAc2K,cAAc4U,UAAUC,SAAS,sBACrMl5B,EAAKo5B,YAAY1f,EAAe1Z,EAAKm5B,qBAKnCjB,GAAAh5B,UAAAu5B,gBAAR,SAAwBjH,EAAgB1X,GAAxC,IAAA9Z,EAAAlB,KACQ4a,EAAgBI,EAAaoH,SAASha,IAAgB8xB,EAAAA,WAAY,OAAS,KAC5Etf,GAAkBA,EAAc2K,eAAkBmN,KAGvDA,EAASA,EAAO9I,gBACF,CAAC,SAAU,QAAQwQ,SAAS1H,IACzB,WAAXA,EACF1yB,KAAKs6B,YAAY1f,EAAe,uBACZ,SAAX8X,GACT1yB,KAAKs6B,YAAY1f,EAAe,qBAElC5a,KAAKu6B,eAAe3f,EAAe5a,KAAKq6B,mBAExC,CAAC,sBAAuB,qBAAqBj4B,QAAQ,SAAA+U,GAAQ,OAAAjW,EAAKq5B,eAAe3f,EAAezD,KAChGnX,KAAKs6B,YAAY1f,EAAe5a,KAAKq6B,oBAGjCjB,GAAAh5B,UAAAk6B,YAAR,SAAoBE,EAAwBL,GAC1C,GAAKK,GAAeL,GAAcK,EAAWjV,cAA7C,CAGA,IAAMkV,EAA4BD,EAAWjV,cAAc4U,WAAa,GACnEM,EAAkBL,SAASD,KAC9BK,EAAWjV,cAAc4U,UAAeM,EAAiB,IAAIN,KAGzDf,GAAAh5B,UAAAm6B,eAAR,SAAuBC,EAAwBL,GAC7C,GAAKK,GAAeL,GAAcK,EAAWjV,cAA7C,CAGA,IAAMkV,EAA4BD,EAAWjV,cAAc4U,WAAa,GACpEM,EAAkBL,SAASD,KAC7BK,EAAWjV,cAAc4U,UAAYM,EAAkB7gB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,GAAKA,IAAMywB,IAAW1L,KAAK,QAGrG2K,GAAAh5B,UAAAs6B,qBAAR,WACE,GAAI16B,KAAKgzB,cAAgBhzB,KAAKgzB,aAAahY,aAAc,CACvD,IAAM2f,EAAc36B,KAAKgzB,aAAahY,aACtC,GAAI2f,EAAa,CACf,IAAMC,EAAqBD,EAAY3R,6BACvC,GAAI4R,EAAoB,CACtB,IAAMxY,EAAWwY,EAAmBxY,SACpC,GAA4B,mBAAjBA,EAASha,IAClB,OAAOga,EAASha,IAAgB8xB,EAAAA,WAAY,QAKpD,OAAO,2BAtIVn6B,EAAAA,uDANQ86B,EAAAA,gBA+ITzB,IAtIE,SAAAA,GACUpG,GADV,IAAA9xB,EAAAlB,KACUA,KAAAgzB,aAAAA,EASFhzB,KAAAq6B,gBAAkB,uBAClBr6B,KAAAu5B,WAAY,EAR0B,SAAxCv5B,KAAKgzB,aAAatgB,aAAa9B,MACjC7O,OAAOX,WAAW,WAChBF,EAAKs4B,iBACJ,GCTT,IAAAsB,IAcEA,GAAA16B,UAAA26B,aAAA,SAAaxlB,EAAY8R,GASD/kB,MAAM4O,KAAKlR,KAAKogB,WAAW4a,sBAAsBva,UACzDre,QAAQ,SAAC4Y,GACDA,EAAa2P,YACrBgB,KAAKoP,aAAaxlB,GAAI,GAAM,MAGrCulB,GAAA16B,UAAA66B,cAAP,SAAqB1lB,EAAY8R,GAC/B,IAAIsD,EAAc3qB,KAAK2qB,YACnBtD,IAEFsD,EADsB3qB,KAAKogB,WAAW2H,gBAAgBV,GAC1BsD,aAE9BA,EAAYM,UAAU8P,aAAaxlB,yBAnCtCxV,EAAAA,uDANoBm7B,EAAAA,mBAAZp4B,EAAAA,cA2CTg4B,IA/BE,SAAAA,GACUnQ,EACAvK,GADApgB,KAAA2qB,YAAAA,EACA3qB,KAAAogB,WAAAA,ECAZ,IAAA+a,IAcSA,GAAA/6B,UAAA4jB,YAAP,SAAmB9L,EAAuBY,EAAoC+O,EAAsBrK,GAApG,IAAAtc,EAAAlB,KACQo7B,EAAkBp7B,KAAKo7B,gBAAgB5d,GACxCxd,KAAKq7B,aAMRr7B,KAAKq7B,aAAaxpB,QAAQ+O,KAAKE,EAAAA,KAAK,IAAI7d,UAAU,SAAAuS,GAChDtU,EAAKsU,OAASA,EACdtU,EAAKo6B,YAAY9lB,EAAQsD,EAAkB+O,EAAWuT,KAPxDljB,EAAM6N,YAAYnF,KAAKE,EAAAA,KAAK,IAAI7d,UAAU,SAACuS,GACzCtU,EAAKsU,OAASA,EACdtU,EAAKo6B,YAAY9lB,EAAQsD,EAAkB+O,EAAWuT,MAapDD,GAAA/6B,UAAAk7B,YAAR,SAAoB9lB,EAAQsD,EAAoC+O,EAAsBrK,GACpF,IAAMuI,EAAc/lB,KAAK0Y,UAAUlD,GACnC,GAAKuQ,EAAL,CAMA/lB,KAAKu7B,eAAexV,EAAa8B,GAEjC,IAAM9N,EAAS/Z,KAAK6Y,UAAUkN,GACxB1L,EAAQra,KAAK4Y,SAASmN,IACvBhM,GAAWM,IAKZN,EACF/Z,KAAKw7B,gBAAgBzhB,EAAQgM,EAAajN,EAAkB+O,EAAWrK,GALvEA,SAVAA,KAuBI2d,GAAA/6B,UAAAm7B,eAAR,SAAuBxV,EAAkB8B,GACvC,IAAM4T,EAAoB,GAGpB3X,EAAa9jB,KAAK8jB,WAAW+D,GAC7BU,EAAUV,GAAaA,EAAUU,SAAWV,EAAUU,QAAQmT,WAAa,GAEjFjzB,OAAOM,KAAKgd,GAAa3jB,QAAQ,SAACu5B,GAC3B7X,GAGEyE,EAAQ3mB,eAAe+5B,KAF5BF,EAAkBE,GAAa5V,EAAY4V,MAO/C37B,KAAK47B,cAAc/T,EAAW4T,IAMxBN,GAAA/6B,UAAAo7B,gBAAR,SACEzhB,EAAgBgM,EAAkBjN,EAAoC+O,EAAsBrK,GAD9F,IAAAtc,EAAAlB,KAGEA,KAAKuf,wBAAwB3B,cAAc7D,EAAQ,SAAC8hB,GAClD,IAAMC,EAAkB56B,EAAK66B,wBAAwBF,EAAa9V,EAAa8B,GAC1EiU,GAIL56B,EAAK06B,cAAc/T,EAAWiU,GAC9Bte,OASI2d,GAAA/6B,UAAA27B,wBAAR,SAAgCC,EAA6BjW,EAAkB8B,GAC7E,GAAKmU,EAAL,CAGA,IAAMC,EAAWj8B,KAAK8jB,WAAW+D,GAC3BU,EAAUV,GAAaA,EAAUU,SAAWV,EAAUU,QAAQmT,WAAa,GAC3Ex4B,EAAS,GAaf,OAZA84B,EAAa55B,QAAQ,SAACyI,EAAO2M,EAAKwI,GAC3Bic,EAMElW,EAAYnkB,eAAe4V,IAAS+Q,EAAQ3mB,eAAe4V,KAC9DtU,EAAOsU,GAAO3M,GALXkb,EAAYnkB,eAAe4V,KAC9BtU,EAAOsU,GAAO3M,KAQb3H,IAMDi4B,GAAA/6B,UAAA0jB,WAAR,SAAmB+D,GACjB,IAAI/D,GAAa,EAOjB,OANI+D,GAAaA,EAAUU,UAErBV,EAAUU,QAAQmT,WAAa7T,EAAUU,QAAQmT,UAAU95B,eAAe,kBAAoBimB,EAAUU,QAAuB,iBACjIzE,GAAa,GAGVA,GAKDqX,GAAA/6B,UAAAw7B,cAAR,SAAsB/T,EAAsBrS,GAA5C,IAAAtU,EAAAlB,KACE,GAAK6nB,GAAcrS,EAAnB,CAGA,IAAM+S,EAAUV,EAAUU,QAGJ,iBAAX/S,GAAkC,KAAXA,IAChCA,EAAS5D,KAAKC,MAAM2D,IAItB/M,OAAOM,KAAKyM,GAAQpT,QAAQ,SAAC4G,GAE3B,GADAuf,EAAQC,iBAAiBxf,EAAUwM,EAAOxM,IACtCA,GAAyB,kBAAbA,EAA8B,CAC5C,IAAIkzB,EAAc1mB,EAAOxM,GACzB9H,EAAKi7B,eAAetU,EAAWqU,QAI7Bf,GAAA/6B,UAAA+7B,eAAR,SAAuBtU,EAAsBqU,GAC3C,GAAKrU,GAAcqU,EAAnB,CAGIA,GAAsC,iBAAhBA,GAA4BA,EAAY1V,WAAW,MAAQ0V,EAAYzV,SAAS,OACxGyV,EAActqB,KAAKC,MAAMqqB,IAE3B,IAAMpe,EAAQoe,GAAeA,EAAYpe,OAAS,KAC5Cse,EAAYF,GAAeA,EAAYE,WAAa,KAI1D,GAHIte,IACF+J,EAAU7M,aAAaoF,WAAWic,MAAQve,GAExCse,EAAW,CACb,IAAMvF,EAAgBhP,EAAU7M,aAAa0M,WACzCmP,GACFA,EAAc1M,YAAYC,eAAekS,eAAeF,MAOtDjB,GAAA/6B,UAAAyY,UAAR,SAAkBkN,GAChB,GAAKA,EAGL,OAAOA,EAAoB,QAMrBoV,GAAA/6B,UAAAwY,SAAR,SAAiBmN,GACf,GAAKA,EAGL,OAAOA,EAAmB,OAEpBoV,GAAA/6B,UAAAu2B,SAAR,SAAiB5Q,GACf,GAAKA,EAGL,OAAOA,EAAmB,OAMpBoV,GAAA/6B,UAAAsY,UAAR,SAAkBqN,GAChB,IAAKA,EACH,MAAO,GAET,IAAI7iB,EAAS,GACb,GAAI6iB,EAAYnkB,eAAe,yBAA0B,CACvD,IAAI26B,EAA6BxW,EAAmC,sBAUpE,OATIwW,GAAsBA,EAAmB/V,WAAW,MAAQ+V,EAAmB9V,SAAS,OAC1F8V,EAAqBC,UAAUC,UAAUF,GAAoBvqB,QAAQ,OAAQ,OAAOA,QAAQ,OAAQ,OAAOA,QAAQ,OAAQ,QAC3H9O,EAAS0O,KAAKC,MAAM0qB,IAEtB9zB,OAAOM,KAAKgd,GAAa3jB,QAAQ,SAAAs6B,GAClB,0BAATA,IACFx5B,EAAOw5B,GAAQ3W,EAAY2W,MAGxBx5B,EAET,OAAO6iB,GAEDoV,GAAA/6B,UAAAg7B,gBAAR,SAAwB5d,GAAxB,IAAAtc,EAAAlB,KACE,OAAO,WACL,IACE,IAAM+lB,EAAc7kB,EAAKwX,UAAUxX,EAAKsU,QAExC,GADctU,EAAKy1B,SAAS5Q,GACjB,CACT,IAAM4W,EAAez7B,EAAKqe,wBAAwBrB,4BAC9Cye,GAAgBC,EAAAA,aAAaD,IAC/BA,EAAa15B,UAAU,SAAC45B,GAClBA,GACFA,EAAMjyB,KAAK,SAKnB,MAAOK,GAAK+D,QAAQ8S,KAAK7W,GACvBuS,GAAgC,mBAAbA,GACrBA,2BAlPPzd,EAAAA,uDAVQu3B,GAAY30B,WAAA,CAAA,CAAAC,KAchBC,EAAAA,kBAbI+Z,GAAuBja,WAAA,CAAA,CAAAC,KAc3BC,EAAAA,cAiPLs4B,IAnPE,SAAAA,GACsBE,EACA9b,GADAvf,KAAAq7B,aAAAA,EACAr7B,KAAAuf,wBAAAA,EAEfvf,KAAKuf,0BACRvf,KAAKuf,wBAA0B,IAAI3C,ICfzC,IAAAkgB,IAGEr0B,OAAAC,eAAYo0B,GAAA18B,UAAA,cAAW,KAAvB,WACE,OAAOJ,KAAKgb,aAAa2P,6CASpBmS,GAAA18B,UAAA28B,aAAP,SAAoB5hB,GAClB,OAAOnb,KAAK2qB,YAAYgF,SAASxU,IAM5B2hB,GAAA18B,UAAA48B,cAAP,SAAqB7hB,GACnB,IACM8hB,EAAsBj9B,KAAK2qB,YAAYgF,SAASxU,GAMtD,OALI8hB,aAA+BC,EAAAA,aAAgB,EACpCD,EAAoBE,YAEpBF,GAEGG,UAMbN,GAAA18B,UAAAi9B,kBAAP,SAAyBliB,GAEvB,OADoBnb,KAAK2qB,YAAYgF,SAASxU,GAC3BiiB,+BApCtBr9B,EAAAA,uDAPQsiB,EAAAA,gBA8CTya,IAhCE,SAAAA,GAAoB9hB,GAAAhb,KAAAgb,aAAAA,UCTpBvS,OAAAC,eAAY40B,GAAAl9B,UAAA,cAAW,KAAvB,WACE,OAAOJ,KAAKgb,aAAa2P,6CASpB2S,GAAAl9B,UAAAm9B,aAAP,SAAoBpiB,EAAgBtQ,GAGlC7K,KAAK2qB,YAAY6S,SAASriB,EAAMtQ,GAAO,GAAM,yBAhBhD9K,EAAAA,uDAFQsiB,EAAAA,gBAqBTib,IAZE,SAAAA,GAAoBtiB,GAAAhb,KAAAgb,aAAAA,ECEtB,IAAAyiB,IAGEh1B,OAAAC,eAAY+0B,GAAAr9B,UAAA,cAAW,KAAvB,WACE,OAAOJ,KAAKgb,aAAa2P,6CAYpB8S,GAAAr9B,UAAAs9B,MAAP,SAAaviB,GACX,IAAMwiB,EAAc39B,KAAK49B,UAAUziB,GAEnC,OADuBnb,KAAK69B,kBAAkBR,kBAAkBM,EAAYG,UACtDt7B,QAMjBi7B,GAAAr9B,UAAA29B,IAAP,SAAW5iB,GAAX,IAAAja,EAAAlB,KACQ29B,EAAc39B,KAAK49B,UAAUziB,GASnC,OARuBnb,KAAK69B,kBAAkBR,kBAAkBM,EAAYG,UAE/C/hB,OAAO,SAACiiB,EAAkBC,GACrD,IAAIC,EAAYC,WAAWj9B,EAAK67B,aAAakB,EAAYN,EAAYS,WAGrE,OADAJ,GADAE,EAAYG,MAAMH,GAAa,EAAIA,GAGlC,IAOET,GAAAr9B,UAAAk+B,IAAP,SAAWnjB,GACT,IAAMuiB,EAAQ19B,KAAK09B,MAAMviB,GACnBojB,EAAQv+B,KAAK+9B,IAAI5iB,GACvB,OAAiB,IAAVuiB,EAAca,EAAQb,EAAQ,GAMhCD,GAAAr9B,UAAAo+B,IAAP,SAAWrjB,GAAX,IAAAja,EAAAlB,KACQ29B,EAAc39B,KAAK49B,UAAUziB,GAG7BqjB,EAFiBx+B,KAAK69B,kBAAkBR,kBAAkBM,EAAYG,UAEhD/hB,OAAO,SAAC0iB,EAAgBR,GAClD,IAAMC,EAAYC,WAAWj9B,EAAK67B,aAAakB,EAAYN,EAAYS,WAIvE,OAHyB,IAArBC,MAAMH,MAA2BO,GAAsBA,EAAZP,KAC7CO,EAASP,GAEJO,GACN,MACH,OAAOD,GAAY,GAMdf,GAAAr9B,UAAAs+B,IAAP,SAAWvjB,GAAX,IAAAja,EAAAlB,KACQ29B,EAAc39B,KAAK49B,UAAUziB,GAG7BujB,EAFiB1+B,KAAK69B,kBAAkBR,kBAAkBM,EAAYG,UAEjD/hB,OAAO,SAAC4iB,EAAgBV,GACjD,IAAMC,EAAYC,WAAWj9B,EAAK67B,aAAakB,EAAYN,EAAYS,WAIvE,OAHyB,IAArBC,MAAMH,MAA2BS,GAAUT,EAAYS,KACzDA,EAAST,GAEJS,GACN,MACH,OAAOD,GAAY,GAMbjB,GAAAr9B,UAAA28B,aAAR,SAAqBkB,EAAiB9iB,GACpC,IAAIyjB,EAAcX,EAWlB,OAVA9iB,EAAK/Y,QAAQ,SAACy8B,GAOZD,EAJKA,EAISA,EAAYC,GAHV,OAMXD,GAODnB,GAAAr9B,UAAAw9B,UAAR,SAAkBziB,GAIhB,IAHA,IAAM2iB,EAAW3iB,EAAK9P,OAAO,IACvB+yB,EAAW,GACbU,EAAc9+B,KAAK2qB,YAAYgF,SAASmO,GACrCgB,aAAuB5B,EAAAA,aAAgB,GAAM,CAClD,IAAM6B,EAAejB,EAASlN,MAC9B,IAAKmO,EACH,OAEFX,EAASY,QAAQD,GACjBD,EAAc9+B,KAAK2qB,YAAYgF,SAASmO,GAG1C,MAAO,CACLA,SAAUA,EACVM,SAAUA,yBAtHfr+B,EAAAA,uDAXQsiB,EAAAA,gBAqITob,IAjHE,SAAAA,GAAoBziB,GAAAhb,KAAAgb,aAAAA,EAClBhb,KAAK69B,kBAAsB79B,KAAKgb,aAAaoH,SAASha,IAA6B00B,ICTvF,IAAAmC,IAQIx2B,OAAAC,eAAWu2B,GAAA7+B,UAAA,YAAS,KAApB,WACI,OAAOJ,KAAK2qB,YAAYgB,KAAKwL,2CAMjC1uB,OAAAC,eAAWu2B,GAAA7+B,UAAA,WAAQ,KAAnB,WACI,OAAOJ,KAAK2qB,YAAYgB,KAAKuT,+DAhBpCn/B,EAAAA,uDANQm7B,EAAAA,eAwBT+D,IAfE,SAAAA,GAAoBtU,GAAA3qB,KAAA2qB,YAAAA,ECNtB,IAAAwU,IAmBSA,GAAA/+B,UAAA28B,aAAP,SAAoB5hB,GAClB,OAAOnb,KAAK69B,kBAAkBd,aAAa5hB,IAMtCgkB,GAAA/+B,UAAAm9B,aAAP,SAAoBpiB,EAAgBtQ,GAClC,OAAO7K,KAAKo/B,oBAAoB7B,aAAapiB,EAAMtQ,IAM9Cs0B,GAAA/+B,UAAA48B,cAAP,SAAqB7hB,GACnB,OAAOnb,KAAK69B,kBAAkBb,cAAc7hB,IAMvCgkB,GAAA/+B,UAAAi9B,kBAAP,SAAyBliB,GACvB,OAAOnb,KAAK69B,kBAAkBR,kBAAkBliB,IAM3CgkB,GAAA/+B,UAAAs9B,MAAP,SAAaviB,GACX,OAAOnb,KAAKq/B,mBAAmB3B,MAAMviB,IAMhCgkB,GAAA/+B,UAAA29B,IAAP,SAAW5iB,GACT,OAAOnb,KAAKq/B,mBAAmBtB,IAAI5iB,IAM9BgkB,GAAA/+B,UAAAk+B,IAAP,SAAWnjB,GACT,OAAOnb,KAAKq/B,mBAAmBf,IAAInjB,IAM9BgkB,GAAA/+B,UAAAo+B,IAAP,SAAWrjB,GACT,OAAOnb,KAAKq/B,mBAAmBb,IAAIrjB,IAM9BgkB,GAAA/+B,UAAAs+B,IAAP,SAAWvjB,GACT,OAAOnb,KAAKq/B,mBAAmBX,IAAIvjB,yBA5EtCpb,EAAAA,uDATQsiB,EAAAA,gBAuFT8c,IArEE,SAAAA,GAAoBnkB,GAAAhb,KAAAgb,aAAAA,EAClB,IAAMoH,EAAWpiB,KAAKgb,aAAaoH,SACnCpiB,KAAK69B,kBAAsBzb,EAASha,IAA6B00B,IACjE98B,KAAKo/B,oBAAsBhd,EAASha,IAA+Bk1B,IACnEt9B,KAAKq/B,mBAAsBjd,EAASha,IAA8Bq1B,YCZ7D6B,GAAAl/B,UAAAm/B,8BAAP,SAAqCvkB,GACnC,OAAOA,GAAgBA,EAAa6M,WAAa7M,EAAa6M,UAAUkI,aAAe/U,EAAa6M,UAAUkI,YAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,KAAM,MAUlJ41B,GAAAl/B,UAAAo/B,2BAAP,SAAkCC,EAA4BC,EAAmB/Q,EAAsBgR,GAErG,QAF+E,IAAAhR,IAAAA,EAAA,SAAsB,IAAAgR,IAAAA,EAAA,GACrGA,IACIF,EAAarP,aAAeqP,EAAarP,WAAWO,WAAa+O,GAAaD,EAAarP,WAAWwP,eAAiBF,GAIzH,OAHc,IAAVC,GACFhR,EAAMrtB,KAAKm+B,EAAarP,WAAWO,UAE9BhC,EAET,IAAMkR,EAAQv9B,MAAM4O,KAAKuuB,EAAaK,YAAYrf,UAAUte,OAAO,SAAAuH,GAAK,OAAAA,EAAEgnB,WAC1E,GAAImP,EAAMr9B,OAAS,EAEjB,OADAmsB,EAAQ,GAGN8Q,EAAarP,YACD,IAAVuP,GACFhR,EAAMrtB,KAAKm+B,EAAarP,WAAWO,UAIvC,IAAK,IAAIoP,EAAM,EAAGA,EAAMF,EAAMr9B,OAAQu9B,IAAO,CAC3C,IAAMC,EAAeH,EAAME,GAAKrP,SAC1BvV,EAAOnb,KAAKw/B,2BAA2BQ,EAAcN,EAAW/Q,EAAOgR,GAC7E,GAAKxkB,KAAQA,EAAK3Y,OAAS,GAIzB,OADAmsB,EAAQA,EAAMtjB,OAAO8P,GAIzB,OAAO,MAQFmkB,GAAAl/B,UAAA6/B,sBAAP,SAA6BtR,EAA0BlD,GACrD,IAAIyU,EAAY,GAKhB,IAJqB,iBAAVvR,IACTA,EAAQA,EAAM/U,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,KAEvCilB,EAAQA,EAAMtjB,OAAO,IACC,EAAfsjB,EAAMnsB,QAAY,CAEvB,GAA2B,SADNipB,EAAe0U,kBAAkBxR,GACrCyR,MAAkB,CACjCF,EAAYvR,EACZ,MAEFA,EAAMiC,MAER,OAAOsP,GAOFZ,GAAAl/B,UAAAigC,YAAP,SAAmBllB,GACjB,IAAMwT,EAAQxT,EAAKvB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAEpC42B,EAAatgC,KAAKigC,sBAAsBtR,EAAO3uB,KAAK0nB,WAAW+D,gBAC/D6F,EAAe3C,EAAM7S,MAAMwkB,EAAW99B,QAAQisB,KAAK,KACzD,MAAO,CAAEsB,YAAauQ,EAAW7R,KAAK,KAAM6C,aAAYA,EAAE7B,aAAc6Q,EAAYC,cAAejP,EAAa1X,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,2BAlF1I3J,EAAAA,uDAHoB2oB,EAAAA,gBACZ5lB,EAAAA,kBAAgD+uB,EAAAA,cAsFzDyN,IAlFE,SAAAA,GAAoBld,EAA4BhC,EAAgCsH,GAA5D1nB,KAAAoiB,SAAAA,EAA4BpiB,KAAAogB,WAAAA,EAAgCpgB,KAAA0nB,WAAAA,UCCzE8Y,GAAApgC,UAAAqgC,8BAAP,SAAqCzlB,GACnC,OAAOA,GAAgBA,EAAa4R,MAAQ5R,EAAa4R,KAAK8T,gBAAkB,MAQ3EF,GAAApgC,UAAAugC,wBAAP,SAA+B3lB,EAA4Bgd,GACzD,IAAM0I,EAAiB1gC,KAAKygC,8BAA8BzlB,GAC1D,OAAK0lB,EAGEj4B,OAAOgY,OAAOigB,GAAgBxpB,KAAK,SAAC0pB,GAAiC,OAAAA,GAAiBA,EAAc5I,UAAYA,IAF9G,MAWJwI,GAAApgC,UAAAygC,8BAAP,SAAqC7lB,EAA4BuW,GAC/D,IAAMmP,EAAiB1gC,KAAKygC,8BAA8BzlB,GAC1D,IAAK0lB,EACH,OAAO,KAET,IAAMI,EAAWvP,EAAS3X,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IACjD,OAAOjB,OAAOgY,OAAOigB,GAAgBvP,UAAU,SAACyP,GAC9C,IAAKA,EACH,OAAO,EAET,IACMnR,EADczU,EAAa6M,UAAUkI,YACVnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAClDq3B,EAA0BH,EAAc5I,QAAQpe,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAE7E,OADiB+lB,EAAapkB,OAAO01B,GACrBtS,KAAK,OAASqS,EAASrS,KAAK,QASzC+R,GAAApgC,UAAA4gC,6BAAP,SAAoChmB,EAA4Bgd,GAC9D,IAAM0I,EAAiB1gC,KAAKygC,8BAA8BzlB,GAC1D,OAAK0lB,EAGEj4B,OAAOgY,OAAOigB,GAAgBvP,UAAU,SAACyP,GAAiC,OAAAA,GAAiBA,EAAc5I,UAAYA,IAFnH,2BApDZj4B,EAAAA,oDAwDDygC,IAtDE,SAAAA,cCeOS,GAAA7gC,UAAA8gC,4BAAP,SAAmCxB,GACjC,IAAKA,EACH,MAAM,IAAIhvB,MAAM,mBAElB,IAAM+uB,EAAez/B,KAAK0nB,YAAc1nB,KAAK0nB,WAAW+D,gBAAkB,KAC1E,IAAKgU,EACH,OAAO,KAET,IAAMhQ,EAAe,GACrBzvB,KAAKmhC,mBAAmB3B,2BAA2BC,EAAcC,EAAWjQ,GAC5E,IAAMtD,EAAgBnsB,KAAKogB,YAAcpgB,KAAKogB,WAAWuH,oBAAoB0E,oBAAsB,GACnG,OAAKF,GAA0C,IAAzBA,EAAc3pB,OAG7B2pB,EAAchqB,OAAO,SAAC6Y,GAA+B,OAAAA,GAAgBA,EAAa6M,WAAa7M,EAAa6M,UAAUkI,YAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAAG+kB,KAAK,OAASgB,EAAahB,KAAK,OAF1L,MAUJwS,GAAA7gC,UAAAghC,+BAAP,SAAsCC,EAAsBC,GAC1D,QAD0D,IAAAA,IAAAA,EAAA,MACrDD,EACH,MAAM,IAAI3wB,MAAM,sBAGlB,OADsB1Q,KAAKogB,YAAcpgB,KAAKogB,WAAWuH,oBAAoB0E,oBAAsB,IAC9ElqB,OAAO,SAAC6Y,GAC3B,IAAMumB,EAAevmB,GAAgBA,EAAa4R,MAAQ5R,EAAa4R,KAAK8T,gBAAkB,GACxF3Q,EAAc/U,GAAgBA,EAAa6M,WAAa7M,EAAa6M,UAAUkI,aAAe,GACpG,SAAIwR,GAAmD,EAAnC94B,OAAOM,KAAKw4B,GAAc/+B,WAChCiG,OAAOM,KAAKw4B,GAAcrqB,KAAK,SAACM,GAC1C,IAAMgqB,EAAcD,EAAa/pB,GACjC,IAAKgqB,IAAgBA,EAAYxJ,QAC/B,OAAO,EAET,IAAM8I,EAAWU,EAAYxJ,QAAQpe,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAEtD6nB,EADexB,EAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC1B2B,OAAOy1B,GACrC,OAAOO,EAAaznB,MAAM0nB,GAAUn/B,OAAO,SAAAuH,GAAK,OAAAA,IAAG+kB,KAAK,OAAS8C,EAAS9C,KAAK,UAahFwS,GAAA7gC,UAAAqhC,6BAAP,SAAoChS,EAAwBiS,GAA5D,IAAAxgC,EAAAlB,KACE,IAAKyvB,EACH,MAAM,IAAI/e,MAAM,qBAElB,IAAKgxB,EACH,MAAM,IAAIhxB,MAAM,oBAElB+e,EAAeA,EAAattB,OAAO,SAAAuH,GAAK,OAAAA,IACxC,IAAM+hB,EAAiBzrB,KAAK0nB,YAAc1nB,KAAK0nB,WAAW+D,gBAAkB,KAC5E,IAAKA,EACH,OAAO,KAET,IAAMgU,EAAehU,EAAekW,kBAAkBlS,GAEhDmS,GADgBnC,GAAgBA,EAAaoC,gBAAkB,IAChC3qB,KAAK,SAAC4qB,GAA+B,OAAAA,EAAaC,eAAiBD,EAAaC,aAAaC,oBAAsBN,GAAcI,EAAaC,aAAaE,YAAcP,KAC9M,OAAKE,GAAmBA,EAAeG,aAGjB/hC,KAAKogB,WAAWuH,oBAAoB0E,mBACrClqB,OAAO,SAAC6Y,GAC3B,IAAM0lB,EAAiBx/B,EAAKghC,mBAAmBzB,8BAA8BzlB,GAC7E,SAAK0lB,GAAkBj4B,OAAOM,KAAK23B,GAAgBl+B,OAAS,IAGhCtB,EAAKigC,mBAAmB5B,8BAA8BvkB,IAAiB,IACnDyT,KAAK,OAASgB,EAAahB,KAAK,OAI1DhmB,OAAOgY,OAAOzF,EAAa6M,UAAU+E,KAAK8T,gBAAgBxpB,KAAK,SAAAC,GAAQ,OAAAA,EAAK6gB,UAAY4J,EAAeG,aAAa5mB,UAbnI,MAuBH8lB,GAAA7gC,UAAA+hC,8BAAP,SAAqCpS,EAAgC7D,GAKpE,YALoE,IAAAA,IAAAA,EAAA,IAChE5pB,MAAMC,QAAQwtB,KAChBA,EAAcA,EAAYtB,KAAK,OAEXzuB,KAAKogB,YAAcpgB,KAAKogB,WAAWuH,oBAAoB0E,oBAAsB,IAC9ElqB,OAAO,SAAC6Y,GAA+B,OAAAA,GAAgBA,EAAakR,YAAcA,GAAalR,EAAa6M,UAAUkI,cAAgBA,0BA/G9JhwB,EAAAA,uDALoB2oB,EAAAA,gBACZ5lB,EAAAA,kBAAkCuf,EAAAA,oBAAcwP,EAAAA,kBAChDyN,UACAkB,MAmHTS,IA/GE,SAAAA,GACU7e,EACAhC,EACApF,EACA0M,EACAyZ,EACAe,GALAliC,KAAAoiB,SAAAA,EACApiB,KAAAogB,WAAAA,EACApgB,KAAAgb,aAAAA,EACAhb,KAAA0nB,WAAAA,EACA1nB,KAAAmhC,mBAAAA,EACAnhC,KAAAkiC,mBAAAA,ECRZ,IAWAE,IAgBSA,GAAAhiC,UAAAiiC,kBAAP,SAAyBvV,EAA2BwV,GAElD,GAAKxV,GAAuBA,EAAmBtqB,OAA/C,CAGA,IAAI4uB,EAAc,KACZmR,EAAyBviC,KAAKwiC,6BAA6B1V,EAAoBwV,GACjFC,IACFnR,EAAcmR,EAAuBnR,cAElBpxB,KAAKyiC,aAAarR,EAAakR,KAE9CxV,EAA4B,SAAI,KASjCsV,GAAAhiC,UAAAsiC,cAAP,SAAqB5V,EAA2B6V,GAC9C,GAAK7V,GAAuBA,EAAmBtqB,QAA2C,GAAjCsqB,EAA4B,UAA4C,IAA/B6V,EAAkBC,SAApH,CAGA,IAAIxR,EAAc,KACdwF,EAAW,KACT2L,EAAyBviC,KAAKwiC,6BAA6B1V,GAC7DyV,IACFnR,EAAcmR,EAAuBnR,YACrCwF,EAAW2L,EAAuBhtB,GAClCuX,EAA4B,SAAI,EAChC6V,EAAkBE,SAASjM,EAAUxF,MAGjCgR,GAAAhiC,UAAA0iC,8BAAR,SAAsChW,EAA2BwV,GAAjE,IAAAphC,EAAAlB,KAME,OALA8sB,EAAqBA,EAAmB3qB,OAAO,SAAC4gC,GAC9C,IAAM5W,EAAgBjrB,EAAKkgC,+BAA+B2B,EAAkBxR,SAAU,KAEtF,SADqBpF,IAAiBA,EAAchqB,OAAO,SAAA6Y,GAAgB,OAAAA,GAAgBA,EAAaqM,UAAYnmB,EAAK8Z,aAAaqM,cAG9GrH,IAAI,SAAC+iB,GAC7B,IAAIC,GAAY,EAChB,GAAID,EAAmB,CACrB,GAAIT,GAAeS,EAAkB3R,YAAa,CAChD,IAAM6R,EAAQ/hC,EAAKgiC,oBAAoBH,EAAkB3R,YAAakR,GACtEU,EAAWC,GAASA,EAAME,aAAa,cAAgB,EACvDH,EAAWI,OAAOJ,GAGpB,IAAMhoB,EAAe9Z,EAAK8Z,aACpBqoB,EAAaroB,EAAajD,MAAQ,EAKxC,GAJAgrB,EAAkBC,SAAWA,EAC7BD,EAAkBO,UAAY,EAC9BP,EAAkBM,YAAc,EAChCN,EAAkB72B,SAAW82B,EACzBhoB,EAAc,CAChB,IAAMsoB,EAAWP,EAAkBxR,UAAYrwB,EAAKqiC,cAAcvoB,EAAc+nB,EAAkBxR,WAAa,EAC/G,GAAe,EAAX+R,EAAc,CAChB,IAAME,EAAWT,EAAkBhrB,OAAS,EAC5CgrB,EAAkBO,SAAWA,EAC7BP,EAAkBM,WAAaroB,EAAajD,MAC5CgrB,EAAkB72B,SAAsB,EAAX82B,EAAeA,EAAyB,IAAbK,EAA+B,IAAXG,EAAkBF,IAIpG,OAAOP,KAGHX,GAAAhiC,UAAAqjC,gBAAR,SAAwBzoB,GACtB,OAAIA,IAC0BA,EAAa6M,UAA+B,oBAGnE9V,WAEDqwB,GAAAhiC,UAAAsjC,eAAR,SAAuB1oB,EAA4Bgd,GACjDA,EAAUA,EAAQpe,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAAG+kB,KAAK,KACjD,IAAMgB,EAAezU,EAAa6M,UAAUkI,YAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IACzEi6B,EAAsB3oB,EAAa6M,UAA+B,qBAAK,KACvEwb,EAAaroB,EAAajD,MAAQ,EACxC,IAAK4rB,EACH,OAAO5xB,UAET,IAAI6xB,EAAiB5oB,EAAa6M,UAAU8b,GAC5C,IAAKC,GAAWA,EAAQphC,OAAS,EAC/B,OAAOuP,UAGT6xB,EAAUA,EAAQ7nB,OAAO,SAAC0O,EAAgBtT,GACxC,OAAI7U,MAAMC,QAAQ4U,GACTsT,EAAQpf,OAAO8L,GAEjBsT,EAAQpf,OAAO,CAAC8L,KACtB,IAEH,IADA,IAAIjL,GAAY,aACP6L,GACP,IAAM8rB,EAAsBD,EAAQ7rB,GAC9B+rB,EAASD,GAAUA,EAAOxS,OAASwS,EAAOxS,MAAMzX,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,KAAM,KACnF,IAAKo6B,mBAGL,GAAIrU,EAAapkB,OAAOy4B,GAAQrV,KAAK,OAASuJ,EAAS,CACrD,IAAM+L,EAAQF,EAAOG,MACrB,GAAID,EAAO,CACT,IAAME,EAAeL,EAAQzhC,OAAO,SAAAgV,GAAQ,OAAAA,EAAK6sB,QAAUD,IACrDG,EAAmBC,EAAKC,oBAAoBH,EAAcjM,GAE9D9rB,EADY,SAAV63B,EAtImB,IAuIVV,EAAwCa,EAtI/B,IAwITb,EAAuC,IAAOa,OAG3Dh4B,EA3IsB,IA2IXm3B,EAAuCtrB,yBAjB/CA,EAAQ,EAAGA,EAAQ6rB,EAAQphC,oBAA3BuV,GAAmCA,KAsB5C,OAAO7L,GAEDk2B,GAAAhiC,UAAAgkC,oBAAR,SAA4BR,EAAgB5L,GAC1C,IAAMvI,EAAezvB,KAAKgb,aAAa6M,UAAUkI,YAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IACpF,OAAOk6B,EAAQzS,UAAU,SAAA0S,GACvB,IAAMC,EAASD,GAAUA,EAAOxS,OAASwS,EAAOxS,MAAMzX,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,KAAM,KACnF,QAAKo6B,GAGDrU,EAAapkB,OAAOy4B,GAAQrV,KAAK,OAASuJ,KAM1CoK,GAAAhiC,UAAAoiC,6BAAR,SAAqC1V,EAA2BwV,GAG9D,OAFAxV,EAAqB9sB,KAAK8iC,8BAA8BhW,EAAoBwV,IACzDvO,KAAK,SAACsQ,EAASC,GAAY,OAAAlB,OAAOiB,EAAGn4B,UAAYk3B,OAAOkB,EAAGp4B,YACvE4gB,GAAkD,EAA5BA,EAAmBtqB,QAAcsqB,EAAmB,IAAM,MAEjFsV,GAAAhiC,UAAA8iC,oBAAR,SAA4B9R,EAAqBkR,GAC/C,IAAIiC,EAAUjC,EAAY/c,cAAcif,cAAcC,eAAerT,IAAgB,KACrF,GAAImT,GAA+B,UAApBA,EAAQG,QAAqB,CAC1C,IAAMC,EAASJ,EAAQK,qBAAqB,SACxCD,EAAOniC,SACT+hC,EAAUI,EAAO,IAGrB,OAAOJ,GAEFnC,GAAAhiC,UAAAghC,+BAAP,SAAsCC,EAAsBC,GAC1D,YAD0D,IAAAA,IAAAA,EAAA,KACrDD,GAGiBrhC,KAAKgb,cAAgBhb,KAAKgb,aAAaoF,WAAWuH,oBAAoB0E,oBAAsB,IAC7FlqB,OAAO,SAAC6Y,GAC3B,IAAMumB,EAAevmB,GAAgBA,EAAa4R,MAAQ5R,EAAa4R,KAAK8T,gBAAkB,GACxF3Q,EAAc/U,GAAgBA,EAAa6M,WAAa7M,EAAa6M,UAAUkI,aAAe,GACpG,SAAIwR,GAAmD,EAAnC94B,OAAOM,KAAKw4B,GAAc/+B,WAChCiG,OAAOM,KAAKw4B,GAAcrqB,KAAK,SAACM,GAC1C,IAAMgqB,EAAcD,EAAa/pB,GACjC,IAAKgqB,IAAgBA,EAAYxJ,QAC/B,OAAO,EAET,IAAM8I,EAAWU,EAAYxJ,QAAQpe,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAEtD6nB,EADexB,EAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC1B2B,OAAOy1B,GACrC,OAAOO,EAAaznB,MAAM0nB,GAAUn/B,OAAO,SAAAuH,GAAK,OAAAA,IAAG+kB,KAAK,OAAS8C,EAAS9C,KAAK,SAf5E,IAsBJ2T,GAAAhiC,UAAAykC,iCAAP,SAAwC7pB,EAA4Bgd,GAClE,IAAM0I,EAAiB1gC,KAAKygC,8BAA8BzlB,GAC1D,IAAK0lB,EACH,OAAO,KAET,IAAMI,EAAW9I,EAAQpe,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAChD,OAAOjB,OAAOgY,OAAOigB,GAAgBvP,UAAU,SAACyP,GAC9C,IAAKA,EACH,OAAO,EAET,IACMnR,EADczU,EAAa6M,UAAUkI,YACVnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAClDq3B,EAA0BH,EAAc5I,QAAQpe,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAE7E,OADiB+lB,EAAapkB,OAAO01B,GACrBtS,KAAK,OAASqS,EAASrS,KAAK,QAGzC2T,GAAAhiC,UAAAmjC,cAAP,SAAqBvoB,EAA4Bgd,GAE/C,OADwBh4B,KAAKyjC,gBAAgBzoB,GAEpChb,KAAK0jC,eAAe1oB,EAAcgd,GAElCh4B,KAAK6kC,iCAAiC7pB,EAAcgd,IAGxDoK,GAAAhiC,UAAAqgC,8BAAP,SAAqCzlB,GACnC,OAAOA,GAAgBA,EAAa4R,MAAQ5R,EAAa4R,KAAK8T,gBAAkB,MAE3E0B,GAAAhiC,UAAAqiC,aAAP,SAAoBqC,EAAmBxC,GACrC,IAAIyC,GAAU,EACVC,EAAiB1C,EAAY/c,cAAcif,cAAcC,eAAeK,GAE5E,GAAIE,EAAgB,CAElB,IAAMC,EAAW3C,EAAY/c,cAAcif,cAAcU,iBAAiB,IAAIJ,GAC9E,GAAIG,GAA8B,EAAlBA,EAASziC,OACvB,OAAOuiC,EAGT,GAA+B,UAA3BC,EAAeN,QAAqB,CACtC,IAAMS,EAAcH,EAAeJ,qBAAqB,SACpDO,EAAY3iC,SACdwiC,EAAiBG,EAAY,IAGjCH,EAAeI,QACfL,GAAU,EAEZ,OAAOA,GAQF3C,GAAAhiC,UAAAglC,MAAP,SAAarC,EAAwB/nB,GACnC,GAAK+nB,EAIL,GADqD,OAA5BA,EAAkBhrB,MACrB,CACpB,IAAMstB,EAAOrlC,KAAKslC,WAAWtqB,GACzBqqB,GACFjkC,WAAW,WACTikC,EAAKxC,SAASE,EAAkBxtB,GAAIwtB,EAAkB3R,cACrD,OAEA,CACL,IAAMmU,EAAevlC,KAAKwlC,gBAAgBxqB,GACpC8pB,EAAY/B,EAAkB3R,YACpCpxB,KAAKylC,UAAUX,EAAWS,KAStBnD,GAAAhiC,UAAAqlC,UAAR,SAAkBX,EAAmBtK,GACnC,IAAM5uB,EAAgB4uB,GAAcA,EAAWjV,cAAcif,eAAiBziC,OAAO6J,SACrF,GAAIA,EAAU,CACZ,IAAM24B,EAAU34B,EAAS64B,eAAeK,GACxC,GAAwB,UAApBP,EAAQG,QAAqB,CAC/B,IAAMS,EAAcZ,EAAQK,qBAAqB,SACjD,GAAIO,EAAY3iC,OAAQ,CACtB,IAAMygC,EAAQkC,EAAY,GACtBlC,GAAgC,mBAAhBA,EAAMmC,OACxBnC,EAAMmC,cAIVb,EAAQa,UASNhD,GAAAhiC,UAAAolC,gBAAR,SAAwBxqB,GACtB,OAAOhb,KAAKgb,cAAgBhb,KAAKgb,aAAaoH,SAASha,IAAgB8xB,EAAAA,WAAY,OAAS,MAOtFkI,GAAAhiC,UAAAklC,WAAR,SAAmBtqB,GAAnB,IAAA9Z,EAAAlB,KACQksB,EAAYlR,EAAakR,UACzB6D,EAAc/U,EAAa6M,UAAUkI,YAErC2V,GADgC1lC,KAAKgb,aAAaoF,WAAWuH,oBAAoByE,4BAA4BF,IAAc,IACtF/pB,OAAO,SAAC6Y,GAA+B,OAAAA,EAAa6M,WAAa7M,EAAa6M,UAAUkI,YAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAAG4O,aAAeyX,EAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAAG4O,aAC1NpV,EAAS,KAiBb,OAhBIwiC,GACFA,EAAqBzkB,MAAM,SAACjG,GAC1B,IAAMqM,EAAUrM,EAAaqM,QACvBse,EAAgBzkC,EAAK8Z,aAAaoF,WAAWwlB,iBAAiBC,uBAAuBxe,GAC3F,IAAKse,EACH,OAAO,EAET,IAAMG,EAAoBxjC,MAAM4O,KAAKy0B,EAAcllB,UAAUvJ,KAAK,SAACuQ,GAAmB,OAAAA,GAAiD,sBAApCA,EAA8B,qBACjI,OAAIqe,IACF5iC,EAAS4iC,GACF,KAMN5iC,wBAhUVnD,EAAAA,uDAfQ8xB,EAAAA,kBAAYxP,EAAAA,oBACZ4e,UACAT,MA+UT4B,IA7TE,SAAAA,GACU1a,EACA1M,EACA+qB,EACA7D,GAHAliC,KAAA0nB,WAAAA,EACA1nB,KAAAgb,aAAAA,EACAhb,KAAA+lC,oBAAAA,EACA/lC,KAAAkiC,mBAAAA,EChBZ,IAAM8D,GAAS,eACTC,GAAW,iBACXC,GAAa,aAGbC,GAAS,SAKfC,IAmBEA,GAAAhmC,UAAAimC,KAAA,WACErmC,KAAK+c,IAAY,OAAI/c,KAAK+c,IAAY,QAAK,GAC3C/c,KAAKsmC,WAAatmC,KAAKsmC,WAAW3O,KAAK33B,OAGzComC,GAAAhmC,UAAAmmC,SAAA,SAAS/uB,EAAa3M,GACpB7K,KAAK+c,IAAY,OAAI/c,KAAK+c,IAAY,QAAK,GAC3C/c,KAAK+c,IAAY,OAAE/c,KAAKkZ,OAASlZ,KAAK+c,IAAY,OAAE/c,KAAKkZ,QAAU,GACjDlZ,KAAK+c,IAAY,OAAE/c,KAAKkZ,OAChC1B,GAAO3M,GAGnBu7B,GAAAhmC,UAAAomC,SAAA,SAAShvB,GAEP,OADkBxX,KAAK+c,IAAY,OAAE/c,KAAKkZ,QAAU,IACnC1B,IAInB4uB,GAAAhmC,UAAAqmC,gBAAA,WACMzmC,KAAKwmC,SAASR,KAGhBhmC,KAAKumC,SAASP,GAAQhmC,KAAK0mC,mBAI/BN,GAAAhmC,UAAAumC,gBAAA,WACE3mC,KAAK0mC,iBAAmB1mC,KAAKwmC,SAASP,IACtCjmC,KAAKumC,SAASN,GAAUjmC,KAAK4mC,qBAG/BR,GAAAhmC,UAAAkmC,WAAA,SAAW1jC,EAAc2S,EAAYsxB,GAArC,IAAA3lC,EAAAlB,KAIQ2a,EAF0B3a,KAAKgb,aAAagO,6BACG+H,eACiB,wBAAK,EAO3E,OALE/wB,KAAKkZ,MADHyB,EACW5Y,OAAOiR,SAAS2F,KAAKiB,MAAMusB,IAAQ,GAAGrqB,MAAM,EAAG/Z,OAAOiR,SAAS2F,KAAKiB,MAAMusB,IAAQ,GAAGxsB,QAAQ,MAE7FktB,EAEf7mC,KAAK4mC,mBAAqB5mC,KAAKwmC,SAASP,IACjCa,EAAAA,WAAW9+B,OAAO,SAAC++B,GACxB7lC,EAAK8lC,uBAAuBzxB,EAAI3S,GAAMK,UAAU,SAACC,GAC/C6jC,EAAWn8B,KAAK1H,QAMtBkjC,GAAAhmC,UAAA6mC,cAAA,WACMllC,OAAOiR,SAAS2F,KAAKyhB,SAAS+L,MAChCnmC,KAAKkZ,MAAQnX,OAAOiR,SAAS2F,KAAKiB,MAAMusB,IAAQ,GAAGrqB,MAAM,EAAG/Z,OAAOiR,SAAS2F,KAAKiB,MAAMusB,IAAQ,GAAGxsB,QAAQ,MAC1G3Z,KAAKumC,SAASL,GAAYlmC,KAAKgb,aAAa0M,YAC5C1nB,KAAKymC,kBACLzmC,KAAK2mC,oBAKTP,GAAAhmC,UAAA4mC,uBAAA,SAAuBpb,EAAmBhpB,GACxC,IAAM8kB,EAAa1nB,KAAKwmC,SAASN,IAC3BrsB,EAAA6N,EAAAoE,iBAAAob,eAAEhI,EAAArlB,EAAAqlB,SAAU/H,EAAAtd,EAAAsd,UAAWoH,EAAA1kB,EAAA0kB,MACzB4I,EAAa,KACXxb,EAAOjE,EAAWoE,iBAAiBuD,iBAOzC,GANA1D,EAAKzU,KAAK,SAAC8X,EAAQ+Q,GACb/Q,EAAEzZ,KAAOqW,IACXub,EAAapH,KAIE,OAAfoH,EAAqB,CAEvB,GAAIxb,EAAKnpB,OACP,OAAQI,GACN,IAAK,OACH,OAAO2d,EAAAA,GAAGoL,EAAKA,EAAKnpB,OAAS,GAAG+S,IAElC,IAAK,OAEH,OADAvV,KAAKyT,cAAcxG,KAAKjN,KAAK4M,gBAAgBxG,aAAc,CAAEyN,WAAW,IACjE0M,EAAAA,GAAG,MAIhB,OAAOA,EAAAA,GAAG,MAEZ,IAAI6mB,EAAUD,EACd,OAAQvkC,GACN,IAAK,OAEH,OAAmB,IAAfukC,GAAkC,IAAdhQ,EACfzP,EAAW2f,YAAY,GAAI,GAAInI,EAAU/H,EAAY,GAAGvW,KAC7DI,EAAAA,UAAU,SAAA9d,GAER,OADAkkC,EAAUlI,EAAW,EACd3e,EAAAA,GAAGrd,EAAOkkC,GAAS7xB,QAKR,IAAf4xB,GAAkC,IAAdhQ,EAC3Bn3B,KAAKyT,cAAcxG,KAAKjN,KAAK4M,gBAAgBzG,cAAe,CAAE0N,WAAW,IAKzEuzB,EAAUD,EAAa,EAJhB5mB,EAAAA,GAAGoL,EAAKyb,GAAS7xB,KAQ5B,IAAK,OAEH,OAAI4xB,EAAa,EAAI,EAAIxb,EAAKnpB,QAEtB20B,EAAY,GAAK+H,EAAWiI,EAAa,EAAK5I,EAC3C7W,EAAW2f,YAAY,GAAI,GAAInI,EAAU/H,EAAY,GAAGvW,KAAKI,EAAAA,UAAU,SAAA9d,GAC5E,OAAOqd,EAAAA,GAAGrd,EAAO,GAAGqS,QAKtBvV,KAAKyT,cAAcxG,KAAKjN,KAAK4M,gBAAgBxG,aAAc,CAAEyN,WAAW,IACjE0M,EAAAA,GAAGoL,EAAKyb,GAAS7xB,MAG1B6xB,EAAUD,EAAa,EAChB5mB,EAAAA,GAAGoL,EAAKyb,GAAS7xB,4BAhJjCxV,EAAAA,uDAlBQ8xB,EAAAA,kBAAYxP,EAAAA,oBAIZ9O,UACA/K,KAoKT49B,IA5IE,SAAAA,GACU1e,EACA1M,EACAvH,EACA7G,GAHA5M,KAAA0nB,WAAAA,EACA1nB,KAAAgb,aAAAA,EACAhb,KAAAyT,cAAAA,EACAzT,KAAA4M,gBAAAA,EAZH5M,KAAA+c,IAAMA,IAGN/c,KAAA0mC,iBAAmB,IAAIxmC,EAAAA,QACvBF,KAAA4mC,mBAAqB,IAAI1mC,EAAAA,QCTlC,IAAAonC,IAsCSA,GAAAlnC,UAAA4xB,KAAP,SAAY7vB,EAAiB4xB,GAA7B,IAAA7yB,EAAAlB,KAGEmC,EAAUA,GAAS,KACnB4xB,EAAQA,GAAO,KAEf5xB,EAASnC,KAAKunC,sBAAsBplC,GAEpC4xB,EAAO/zB,KAAKwnC,oBAAoBzT,GAEhC,IAAM9B,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAEhE,OADehB,KAAK0nB,WAAW2f,YAAYz1B,KAAKC,MAAM1P,GAASyP,KAAKC,MAAMkiB,GAAO,KAAM,MACzEnT,KACZG,EAAAA,IACE,WAEE7f,EAAKumC,eAAetlC,GACpBjB,EAAKH,eAAeQ,iBAAiB0wB,IAEvC,SAAC9mB,GACCjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBjI,WAAYwG,OAUlEm8B,GAAAlnC,UAAA+B,OAAP,SAAcA,EAAiB4xB,GAA/B,IAAA7yB,EAAAlB,KAEEmC,EAAUA,GAAS,KACnB4xB,EAAQA,GAAO,KAEf5xB,EAASnC,KAAKunC,sBAAsBplC,GAEpC4xB,EAAO/zB,KAAKwnC,oBAAoBzT,GAEhC,IAAM9B,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAEhE,OADehB,KAAK0nB,WAAWvlB,OAAOyP,KAAKC,MAAM1P,GAASyP,KAAKC,MAAMkiB,IACvDnT,KACZG,EAAAA,IACE,WAEE7f,EAAKumC,eAAetlC,GACpBjB,EAAKH,eAAeQ,iBAAiB0wB,IAEvC,SAAC9mB,GACCjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBjI,WAAYwG,OAQlEm8B,GAAAlnC,UAAAwb,MAAP,SAAazZ,EAAgB4xB,EAAcmL,EAAkB/H,GAA7D,IAAAj2B,EAAAlB,KAEEmC,EAAqB,KAAXA,EAAiB,KAAOA,EAClC4xB,EAAiB,KAATA,EAAe,KAAOA,EAE9B5xB,EAASnC,KAAKunC,sBAAsBplC,GAEpC4xB,EAAO/zB,KAAKwnC,oBAAoBzT,GAEhC,IAAM9B,EAAiBjyB,KAAKe,eAAeC,qBAAqB,GAEhE,OADehB,KAAK0nB,WAAW2f,YAAYz1B,KAAKC,MAAM1P,GAASyP,KAAKC,MAAMkiB,GAAOmL,EAAU/H,GAC7EvW,KACZG,EAAAA,IACE,WAEE7f,EAAKumC,eAAetlC,GACpBjB,EAAKH,eAAeQ,iBAAiB0wB,IAEvC,SAAC9mB,GACCjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBrI,YAAa4G,OAMnEm8B,GAAAlnC,UAAAsnC,WAAP,SAAkBvlC,EAAgB4xB,GAAlC,IAAA7yB,EAAAlB,KAMQ2nC,EAAYC,EAAAA,oBAAoBC,kBAAkB7nC,KAAK6nB,UAAUkI,YAAa/vB,KAAK2qB,aACnFgE,EAAQgZ,EAAU7rB,MAAM,EAAG6rB,EAAUnlC,OAAS,GAG9CitB,EAAezvB,KAAK6nB,UAAUkI,YAAYnW,MAAM,KAAKzX,OAAO,SAAAgV,GAAQ,OAAAA,IACpEwT,EAAc3qB,KAAK6nB,UAAU8C,YAC/BgG,EAAWlB,EAAaA,EAAajtB,OAAS,GAClDmuB,EAAWA,EAASmX,OAAO,EAAGnX,EAASnuB,OAAS,GAEhD,IAAMulC,EAActY,EAAa3T,MAAM,EAAG2T,EAAajtB,OAAS,GAEhE,GADoBmoB,EAAYgF,SAASoY,GACzC,CAGA/nC,KAAK6nB,UAAU7M,aAAaoF,WAAW5K,OAAO2K,UAAO,eACrD,IAAM6nB,EAAa,IAAIrX,EACjB/J,EAAS5mB,KAAK0nB,WAAWoE,iBAAiBmc,0BAA0BD,GAC1E,GAAIphB,EAAQ,CACF,IAAA/M,EAAA+M,EAAAuQ,UAAAA,OAAA,IAAAtd,EAAA,EAAAA,EAAequB,EAAAthB,EAAAsY,SAAAA,OAAA,IAAAgJ,EAAA,EAAAA,EAEvB,GAAiB,IAAbhJ,EAGF,OAFAl/B,KAAK6nB,UAAU7M,aAAaoF,WAAW5K,OAAOlN,IAAI,cAAc,GAC/CtI,KAAK0nB,WAAWggB,WAAW/Y,EAAOwI,EAAW+H,GAC9Cte,KACdG,EAAAA,IAAI,aACF,SAAA5V,GACEjK,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBrI,YAAa4G,SA4BvEm8B,GAAAlnC,UAAAshB,OAAP,WAAA,IAAAxgB,EAAAlB,KACQiyB,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAKhE,OAJIhB,KAAKmoC,aACPnoC,KAAKmoC,YAAYv9B,KAAK,CAAEw9B,YAAa,WAEvBpoC,KAAK0nB,WAAWhG,SACjBd,KACbG,EAAAA,IAAI,WACF7f,EAAKH,eAAeQ,iBAAiB0wB,IAErC,SAAA9mB,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBtI,aAAc6G,OASpEm8B,GAAAlnC,UAAAioC,OAAP,SAAcn8B,GAAd,IAAAhL,EAAAlB,UAAc,IAAAkM,IAAAA,GAAoB,GAChC,IAAM+lB,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAKhE,OAJIhB,KAAKmoC,aACPnoC,KAAKmoC,YAAYv9B,KAAK,CAAEw9B,YAAa,WAEvBpoC,KAAK0nB,WAAW2gB,OAAOn8B,GACxB0U,KACbG,EAAAA,IAAI,WACF7f,EAAKH,eAAeQ,iBAAiB0wB,IAErC,SAAA9mB,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBtI,aAAc6G,OASpEm8B,GAAAlnC,UAAAkoC,cAAP,WAEE,OADgBtoC,KAAK0nB,WAAW6gB,oBAQ3BjB,GAAAlnC,UAAA00B,KAAP,SAAYC,GAAZ,IAAA7zB,EAAAlB,KACMA,KAAKmoC,aACPnoC,KAAKmoC,YAAYv9B,KAAK,CAAEw9B,YAAa,SAEvC,IAAMnW,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAmBhE,OAlBchB,KAAK0nB,WAAW8gB,eACR5nB,KACpBG,EAAAA,IACE,WACE7f,EAAKH,eAAeQ,iBAAiB0wB,GACjC8C,GAAcA,EAAWrO,OAC3BxlB,EAAKiU,kBAAkBrB,QAAQihB,EAAY,CAAElhB,WAAW,IAExD3S,EAAKiU,kBAAkBrB,QAAQ5S,EAAK0L,gBAAgBhI,YAAa,CAAEiP,WAAW,KAGlF,SAAA1I,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBvI,gBAAiB8G,OAgBvEm8B,GAAAlnC,UAAAqoC,OAAP,SAAclzB,EAAYmzB,EAA2B3T,EAAqBvuB,EAAkCmiC,GAA5G,IAAAznC,EAAAlB,KAIE,YAJwE,IAAAwG,IAAAA,GAAA,QAAkC,IAAAmiC,IAAAA,GAAA,GACtG3oC,KAAKmoC,aACPnoC,KAAKmoC,YAAYv9B,KAAK,CAAEw9B,YAAa,WAElC7yB,GAKLozB,GAA2B,IAAdA,GAAqC,UAAdA,IADpCniC,GAAuB,IAAZA,GAAiC,UAAZA,GAENxG,KAAKsQ,WAAWS,SAAS/Q,KAAK4M,gBAAgB5H,iBAAmBub,EAAAA,IAAG,IAC/EK,KACbC,EAAAA,UAAU,SAAA3d,GACR,IAAKA,EACH,OAAOkS,EAAAA,QAETszB,GAAqB,IAAXA,GAA+B,UAAXA,EAC9B,IAAMzW,EAAiB/wB,EAAKH,eAAeC,qBAAqB,KAC1D4nC,EAAU1nC,EAAKwmB,WAAWmhB,WAAWtzB,EAAImzB,GAC/C,OAAKE,EAGEA,EAAQhoB,KACbG,EAAAA,IACE,WACE7f,EAAKH,eAAeQ,iBAAiB0wB,GACjC8C,GAAcA,EAAWrO,OAC3BxlB,EAAKiU,kBAAkBrB,QAAQihB,EAAY,CAAElhB,WAAW,IAExD3S,EAAKiU,kBAAkBrB,QAAQ5S,EAAK0L,gBAAgB9H,cAAe,CAAE+O,WAAW,KAGpF,SAAA1I,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBxI,aAAc+G,KAGvE6V,EAAAA,UAAU,WACR,OAAe,IAAX0nB,GAAoBC,EAIfvzB,EAAAA,QAFAmL,EAAAA,GAAG,OApBPnL,EAAAA,aAfXpV,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAqC,oBAAG,CAAEiH,WAAW,IAClFuB,EAAAA,UAkDJkyB,GAAAlnC,UAAA0oC,WAAP,SAAkBC,EAAeL,EAA2B3T,EAAqBiU,GAAjF,IAAA9nC,EAAAlB,KAKE,QAL+E,IAAAgpC,IAAAA,GAAA,GAC3EhpC,KAAKmoC,aACPnoC,KAAKmoC,YAAYv9B,KAAK,CAAEw9B,YAAa,eAEvCY,EAA6D,SAA/BA,IAAwE,IAA/BA,GAClED,GAAsB,IAAfA,EAAIvmC,OAAc,CAC5B,IAAMopB,EAAY5rB,KAAK2qB,YAAYgB,KAAKC,UACxC,IAAmC,IAA/Bod,IAAuCpd,EAIzC,OADA5rB,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAqC,oBAAG,CAAEiH,WAAW,IAClFuB,EAAAA,QAHP2zB,EAAM,CAAC/oC,KAAK2qB,YAAYgB,KAAKC,WAOjC,OADgB5rB,KAAKsQ,WAAW9J,QAAQxG,KAAK4M,gBAAgB5H,iBAC9C4b,KACbC,EAAAA,UAAU,SAAA3d,GACR,IAAKA,EACH,OAAOkS,EAAAA,aAEa,IAAXszB,IACTA,GAAS,GAEW,iBAAXA,IACTA,EAAkC,UAAzBA,EAAO9e,eAElB8e,GAAqB,IAAXA,EACV,IAAMzW,EAAiB/wB,EAAKH,eAAeC,qBAAqB,KAC1D4nC,EAAU1nC,EAAKwmB,WAAWuhB,YAAYF,EAAKL,GAEjD,OAAKE,EAIEA,EAAQhoB,KACbG,EAAAA,IACE,WACE7f,EAAKH,eAAeQ,iBAAiB0wB,GACjC8C,GAAcA,EAAWrO,OAC3BxlB,EAAKiU,kBAAkBrB,QAAQihB,EAAY,CAAElhB,WAAW,IAExD3S,EAAKiU,kBAAkBrB,QAAQ5S,EAAK0L,gBAAgB9H,cAAe,CAAE+O,WAAW,KAIpF,SAAA1I,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBxI,aAAc+G,KAGvE6V,EAAAA,UAAU,WACR,OAAOT,EAAAA,GAAG,OApBLnL,EAAAA,YA8BRkyB,GAAAlnC,UAAA8oC,qBAAP,SAA4BC,EAAqBC,GAC/C,OAAIppC,KAAK6nB,WAAashB,GAAeC,EACZppC,KAAK6nB,UAAU7M,aAAaoH,SAASha,IAAoB2hB,GAAgB,MAC1EE,QAAQkf,EAAaC,GAEtCppC,KAAKgyB,QAQPsV,GAAAlnC,UAAA6mB,QAAP,SAAekiB,EAAqBC,GAClC,OAAIppC,KAAK6nB,WAAashB,GAAeC,EACZppC,KAAK6nB,UAAU7M,aAAaoH,SAASha,IAAoB2hB,GAAgB,MAC1EE,QAAQkf,EAAaC,GAEtCppC,KAAKgyB,QAKPsV,GAAAlnC,UAAAqG,OAAP,WAAA,IAAAvF,EAAAlB,KACMA,KAAKmoC,aACPnoC,KAAKmoC,YAAYv9B,KAAK,CAAEw9B,YAAa,WAGvC,IAAMvR,EAAgB72B,KAAK0nB,WAE3B,OAAuB,IADA8N,EAAAA,kBAAkBC,kBAAkBoB,GAElD72B,KAAKqpC,UAGSrpC,KAAKsQ,WAAWS,SAAS/Q,KAAK4M,gBAAmC,mBAAGgU,KACzFI,EAAAA,UAAU,SAAC2U,GACT,OAAiB,IAAbA,EACKrY,EAAAA,MAGFpc,EAAKmoC,cAUX/B,GAAAlnC,UAAAk1B,OAAP,WACE,OAAOt1B,KAAKqpC,WAKN/B,GAAAlnC,UAAAipC,QAAR,WAAA,IAAAnoC,EAAAlB,KACQiyB,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAEhE,OADgBhB,KAAK0nB,WAAWJ,gBACjB1G,KACbG,EAAAA,IAAI,WACF7f,EAAKH,eAAeQ,iBAAiB0wB,IAErC,SAAA9mB,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBpI,aAAc2G,OAQ3E1C,OAAAC,eAAY4+B,GAAAlnC,UAAA,cAAW,KAAvB,WACE,GAAIJ,KAAK6nB,WAAa7nB,KAAK6nB,UAAU7M,aAAc,CACjD,IAAMoF,EAAapgB,KAAK6nB,UAAU7M,aAAa8b,qBAAuB,KACtE,GAAI1W,EACF,OAAOA,EAAW+nB,aAAe,KAGrC,OAAO,sCAMDb,GAAAlnC,UAAAqnC,eAAR,SAAuBxQ,GACrB,IAAMkR,EAAcnoC,KAAKmoC,YAErBA,GACFA,EAAYv9B,KAAK,CAAEhI,KAAM,WAOrB0kC,GAAAlnC,UAAAmnC,sBAAR,SAA8BplC,GACN,iBAAXA,IACTA,EAASyP,KAAKC,MAAM1P,IAAW,IAEjC,IAAM80B,EAAsB90B,EACtB4tB,EAAc/vB,KAAK6nB,WAAa7nB,KAAK6nB,UAAUkI,aAAe,KACpE,GAAIA,EAAa,CACf,IAAMuZ,EAAqBtpC,KAAK6nB,WAAa7nB,KAAK6nB,UAAU7M,aAAa0M,WAAW0P,uBAAuBmS,WAAWxZ,IAAgB,GAEhIyZ,EAAalnC,MAAM4O,KAAKo4B,GAC9B,GAAIE,GAAkC,EAApBA,EAAWhnC,OAAY,CAYvC,GAAqB,EAAjBy0B,EAAQz0B,OAAY,CAEtB,IAAMinC,EAAaxS,EAAQA,EAAQz0B,OAAS,GACxCinC,IACEA,EAAW7nC,eAAe,oBACrB6nC,EAAWC,SAEpBD,EAAWE,SAAW,GAI1B1S,EAAQ31B,KAAIgJ,MAAZ2sB,EAAO7rB,GAASo+B,KAIpB,OAAO53B,KAAK+E,UAAUsgB,IAMhBqQ,GAAAlnC,UAAAonC,oBAAR,SAA4BzT,GACN,iBAATA,IACTA,EAAOniB,KAAKC,MAAMkiB,IAAS,IAE7B,IAAM6V,EAAoB7V,EACpBhE,EAAc/vB,KAAK6nB,WAAa7nB,KAAK6nB,UAAUkI,aAAe,KACpE,GAAIA,EAAa,CAEf,IAAMuZ,EAAqBtpC,KAAK6nB,WAAa7nB,KAAK6nB,UAAU7M,aAAa0M,WAAWmiB,qBAAqBC,2BAA2B/Z,EAAa,SAACga,GAChJ,MAAkB,QAAdA,EACK,EACO,KACZ,GACAP,EAAalnC,MAAM4O,KAAKo4B,GAE9B,GAAIE,GAAkC,EAApBA,EAAWhnC,OAY3B,OAAOoP,KAAK+E,UAAU6yB,GAK1B,OAAO53B,KAAK+E,UAAUizB,yBA7iBzB7pC,EAAAA,uDATQ+Q,UALA+gB,EAAAA,kBAAYqJ,EAAAA,mBAEZ/6B,SAEAqI,EAAe7F,WAAA,CAAA,CAAAC,KA8BnBC,EAAAA,kBA/BI0Q,UAGAtD,UANiC6a,EAAAA,iBAQjCmO,MAqjBTqO,IAhiBE,SAAAA,GACUh3B,EACAoX,EACAiD,EACA5pB,EACY6L,EACZuI,EACAgd,EACAtK,EACAmiB,GARAhqC,KAAAsQ,WAAAA,EACAtQ,KAAA0nB,WAAAA,EACA1nB,KAAA2qB,YAAAA,EACA3qB,KAAAe,eAAAA,EACYf,KAAA4M,gBAAAA,EACZ5M,KAAAmV,kBAAAA,EACAnV,KAAAmyB,iBAAAA,EACAnyB,KAAA6nB,UAAAA,EACA7nB,KAAAgqC,uBAAAA,EAEHp9B,IACH5M,KAAK4M,gBAAkBpE,EAAgBG,eC/B7C,IAAAshC,IAwBEA,GAAA7pC,UAAAqzB,IAAA,WAAA,IAAAvyB,EAAAlB,KACMA,KAAKmoC,aACPnoC,KAAKmoC,YAAYv9B,KAAK,CAAEw9B,YAAa,QAEvC,IAAMjtB,EAAOnb,KAAKm0B,UACZlC,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAEhE,OADgBhB,KAAK0nB,WAAW0M,aAAajZ,GAC9ByF,KACbG,EAAAA,IAAI,WACF7f,EAAKH,eAAeQ,iBAAiB0wB,IAErC,SAAA9mB,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBlI,UAAWyG,OASjE8+B,GAAA7pC,UAAAioC,OAAP,SAAcn8B,GAAd,IAAAhL,EAAAlB,UAAc,IAAAkM,IAAAA,GAAoB,GAC5BlM,KAAKmoC,aACPnoC,KAAKmoC,YAAYv9B,KAAK,CAAEw9B,YAAa,WAEvC,IAAMjtB,EAAOnb,KAAKm0B,UACZlC,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAEhE,OADgBhB,KAAK0nB,WAAWwiB,aAAa/uB,EAAMjP,GACpC0U,KACbG,EAAAA,IAAI,WACF7f,EAAKH,eAAeQ,iBAAiB0wB,IAErC,SAAA9mB,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBlI,UAAWyG,OAQxE8+B,GAAA7pC,UAAAqoC,OAAA,SAAOlzB,EAAYwf,GACjB,IAAMrhB,EAAMqhB,GAA0B,GACtC,OAAO/0B,KAAKmqC,YAAY50B,GAAI,EAAO7B,IAMrCu2B,GAAA7pC,UAAAgqC,qBAAA,SAAqB70B,GACnB,OAAOvV,KAAKmqC,YAAY50B,GAAI,EAAM,KAQpC00B,GAAA7pC,UAAAiqC,oBAAA,SAAoBtB,EAAahU,GAAjC,IAAA7zB,EAAAlB,KACE,OAAK+oC,EAIW/oC,KAAKsQ,WAAW9J,QAAQxG,KAAK4M,gBAAgB5H,iBAC9C4b,KACbC,EAAAA,UAAU,SAAA3d,GACR,IAAKA,EACH,OAAOoa,EAAAA,MAET,IAAMnC,EAAOja,EAAKizB,UACZlC,EAAiB/wB,EAAKH,eAAeC,qBAAqB,KAEhE,OADgBE,EAAKwmB,WAAW4iB,kBAAkBnvB,EAAM4tB,GACzCnoB,KACbG,EAAAA,IAAI,WACF7f,EAAKH,eAAeQ,iBAAiB0wB,GACjC8C,GAAcA,EAAWrO,OAC3BxlB,EAAKiU,kBAAkBrB,QAAQihB,EAAY,CAAElhB,WAAW,IAExD3S,EAAKiU,kBAAkBrB,QAAQ5S,EAAK0L,gBAAgB9H,cAAe,CAAE+O,WAAW,KAIlF,SAAA1I,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBxI,aAAc+G,UAxB3EnL,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAqC,oBAAG,CAAEiH,WAAW,IAClFyJ,EAAAA,QAkCX2sB,GAAA7pC,UAAA+pC,YAAA,SAAY50B,EAAYg1B,EAAoBxV,GAA5C,IAAA7zB,EAAAlB,KAIE,OAHIA,KAAKmoC,aACPnoC,KAAKmoC,YAAYv9B,KAAK,CAAEw9B,YAAa,WAElC7yB,IAMa,IAAdg1B,EACQvqC,KAAKsQ,WAAWS,SAAS/Q,KAAK4M,gBAAgB5H,iBAE9Cub,EAAAA,IAAG,IAGAK,KACbC,EAAAA,UAAU,SAAA3d,GACR,IAAKA,EACH,OAAOkS,EAAAA,QAET,IAAM+F,EAAOja,EAAKizB,UACZlC,EAAiB/wB,EAAKH,eAAeC,qBAAqB,KAEhE,OADgBE,EAAKwmB,WAAW8iB,aAAarvB,EAAM5F,GACpCqL,KACbG,EAAAA,IAAI,WACF7f,EAAKH,eAAeQ,iBAAiB0wB,GACjC8C,GAAcA,EAAWrO,OAC3BxlB,EAAKiU,kBAAkBrB,QAAQihB,EAAY,CAAElhB,WAAW,IAExD3S,EAAKiU,kBAAkBrB,QAAQ5S,EAAK0L,gBAAgB9H,cAAe,CAAE+O,WAAW,KAIlF,SAAA1I,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBxI,aAAc+G,UA/B3EnL,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAqC,oBAAG,CAAEiH,WAAW,IAClFuB,EAAAA,UA2CX60B,GAAA7pC,UAAAqqC,cAAA,SAAcl1B,EAAYwf,GAA1B,IAAA7zB,EAAAlB,KAIE,OAHIA,KAAKmoC,aACPnoC,KAAKmoC,YAAYv9B,KAAK,CAAEw9B,YAAa,kBAElC7yB,EAIWvV,KAAKsQ,WAAW9J,QAAQxG,KAAK4M,gBAAgB5H,iBAC9C4b,KACbC,EAAAA,UAAU,SAAA3d,GACR,IAAKA,EACH,OAAOkS,EAAAA,QAIT,IAAM+F,EAAOja,EAAKizB,UACZlC,EAAiB/wB,EAAKH,eAAeC,qBAAqB,KAGhE,OAFgBE,EAAKwmB,WAAW8iB,aAAarvB,EAAM5F,GAEpCqL,KAGbI,EAAAA,UAAU,WACR,IAAM0pB,EAAMxpC,EAAK2mB,UAAU8C,YAAYgB,KAAKC,UAC5C,OAAO1qB,EAAKwmB,WAAWwN,iBAAiBwV,KAI1C3pB,EAAAA,IAAI,WACF7f,EAAKH,eAAeQ,iBAAiB0wB,GACjC8C,GAAcA,EAAWrO,OAC3BxlB,EAAKiU,kBAAkBrB,QAAQihB,EAAY,CAAElhB,WAAW,IAExD3S,EAAKiU,kBAAkBrB,QAAQ5S,EAAK0L,gBAAgB9H,cAAe,CAAE+O,WAAW,KAIlF,SAAA1I,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKixB,iBAAiBzjB,UAAUxN,EAAK0L,gBAAgBxI,aAAc+G,UAnC3EnL,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAgBnH,oBAAqB,CAAEoO,WAAW,IAC/EuB,EAAAA,UAgDJ60B,GAAA7pC,UAAAuqC,KAAP,SAAYZ,EAAmC1Y,EAAeuZ,GAA9D,IAAA1pC,EAAAlB,KACE,GAAK4qC,IAGkB,iBAAZA,IACTA,EAAUA,EAAQhxB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,KAEvB1J,KAAK6nB,WAAa7nB,KAAK6nB,UAAUkI,aACrD,CAGA,IAAML,EAAc1vB,KAAK6nB,UAAU8C,YAAYM,WAC1CyE,GAAeA,EAAYltB,OAAS,GAGzCooC,EAAQxoC,QAAQ,SAAC+rB,GACf,IAAMpW,EAAQ2X,EAAYhC,aAAaS,GACvC,IAAe,IAAXpW,EAAJ,CAGA,IAAMZ,EAAOuY,EAAYmb,SAAS1c,GAC5BjiB,EAAWiL,EAAKwY,SAAS0B,GAGzByZ,EAAmB/yB,GAFE,OAAdgyB,GAAuB,EAAI,GAGxC,KAAIe,EAAmB,GAAKA,EAAmBpb,EAAYltB,QAA3D,CAIA,IAAMuoC,EAAgBrb,EAAYsb,aAAaF,GACzCG,EAAcvb,EAAYmb,SAASE,GACnCG,EAAsBD,EAAY5Z,GAEpCnwB,EAAKiqC,cAAcj/B,IAAahL,EAAKiqC,cAAcD,KAGvDxb,EAAY0b,SAASjd,EAAQ4c,GAC7BE,EAAYzN,SAASnM,EAAOnlB,GAAS,GAAK,GAC1CiL,EAAKqmB,SAASnM,EAAO6Z,GAAoB,GAAK,UAI1CjB,GAAA7pC,UAAA+qC,cAAR,SAAsBtgC,GACpB,MAAiB,KAAVA,GAA0B,OAAVA,GAAkBA,IAAUkH,WAO7Ck4B,GAAA7pC,UAAA+zB,QAAR,WACE,IAAMpE,EAAc/vB,KAAK6nB,UAAUkI,YAE/B5U,EAAO,IADCnb,KAAK6nB,UAAU8C,YAAYgB,KAAKC,UAGtCiK,EAAW9F,EAAYnW,MAAM,KACnC,GAAsB,EAAlBic,EAASrzB,OAGX,IAAK,IAAIuV,EAAQ,EAAGA,EAAQ8d,EAASrzB,OAAS,EAAGuV,IAAS,CACxD,IAAM+d,EAAUD,EAAS9d,GACnBge,EAAU/1B,KAAK6nB,UAAU8C,YAAYmL,GAC3C,IAAKC,IAAYA,EAAQnK,UAEvB,MADA5rB,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAyC,wBAAG,CAAEiH,WAAW,IACvFnD,MAAM,iBAAiBqlB,EAAO,qBAEtC5a,GAAQ,IAAI2a,EAAO,IAAIC,EAAQnK,UAKnC,OAFAzQ,GAAQ,IAAM0a,EAASA,EAASrzB,OAAS,IAO3CiG,OAAAC,eAAYuhC,GAAA7pC,UAAA,cAAW,KAAvB,WACE,GAAIJ,KAAK6nB,WAAa7nB,KAAK6nB,UAAU7M,aAAc,CACjD,IAAMoF,EAAapgB,KAAK6nB,UAAU7M,aAAa8b,qBAAuB,KACtE,GAAI1W,EACF,OAAOA,EAAW+nB,aAAe,KAGrC,OAAO,2DAnTVpoC,EAAAA,uDANQ+Q,UAJa+gB,EAAAA,kBACb1xB,SADyB2qB,EAAAA,iBAGzBtiB,EAAe7F,WAAA,CAAA,CAAAC,KAkBnBC,EAAAA,kBAnBI0Q,UAGAtD,MA0TTg6B,IA/SE,SAAAA,GACU35B,EACAoX,EACA3mB,EACA8mB,EACYjb,EACZuI,EACAgd,GANAnyB,KAAAsQ,WAAAA,EACAtQ,KAAA0nB,WAAAA,EACA1nB,KAAAe,eAAAA,EACAf,KAAA6nB,UAAAA,EACY7nB,KAAA4M,gBAAAA,EACZ5M,KAAAmV,kBAAAA,EACAnV,KAAAmyB,iBAAAA,EAEHvlB,IACH5M,KAAK4M,gBAAkBpE,EAAgBG,eAEzC3I,KAAK6nB,UAAYA,ECxBrB,IAAAwjB,IAUE5iC,OAAAC,eAAc2iC,GAAAjrC,UAAA,aAAU,KAAxB,WACE,OAAOJ,KAAKgb,aAAa0M,4CAM3Bjf,OAAAC,eAAc2iC,GAAAjrC,UAAA,cAAW,KAAzB,WACE,OAAOJ,KAAK0nB,WAAWyC,6CAMzB1hB,OAAAC,eAAc2iC,GAAAjrC,UAAA,cAAW,KAAzB,WACE,OAAOJ,KAAKgb,aAAa2P,6CAU7B0gB,IAJE,SAAAA,GAAYrwB,GACVhb,KAAKgb,aAAeA,EClCxB,IAAAswB,IAKSA,GAAAlrC,UAAAmrC,oBAAP,SAA2B5gB,EAA0B6gB,GAEnD,IAAMC,EAAgB9gB,EAAYgB,KAAKyR,SACjCsO,EAAkB1rC,KAAK2rC,eAAeF,EAAeD,GAC3DxrC,KAAK4rC,aAAajhB,EAAa6gB,EAAkBE,IAE5CJ,GAAAlrC,UAAAyrC,wBAAP,SAA+Bnc,EAA0B8b,EAA0BM,GACjF,IAAML,EAAgB/b,EAAY0N,SAE5B2O,EAAmB/rC,KAAKgsC,gBAAgBP,EAAeK,GACzDlgB,EAAYkgB,EACXC,IACHngB,EAAY5rB,KAAK2rC,eAAeF,EAAeD,IAEjDpqC,WAAW,WACTsuB,EAAYqL,aAAanP,GAAW,GAAM,IACzC,IAKE0f,GAAAlrC,UAAAwrC,aAAP,SAAoBjhB,EAA0B6gB,EAA0BM,GACtE,IAAML,EAAgB9gB,EAAYgB,KAAKyR,SAEjC2O,EAAmB/rC,KAAKgsC,gBAAgBP,EAAeK,GACzDlgB,EAAYkgB,EACXC,IACHngB,EAAY5rB,KAAK2rC,eAAeF,EAAeD,KAEL,IAAxC7gB,EAAYC,yBAGhBxpB,WAAW,WACTupB,EAAYgB,KAAKC,UAAY,KAC7BjB,EAAYgB,KAAKoP,aAAanP,GAAW,GAAM,IAC9C,IAME0f,GAAAlrC,UAAA6rC,cAAP,SAAqBR,EAAsBD,EAA0Bd,GAMnE,OAAkB,IALA1qC,KAAKgsC,gBAAgBP,EAAef,GAE1Bc,GAA4B,UAgBlDF,GAAAlrC,UAAAurC,eAAR,SAAuBF,EAAsBD,GAC3C,IAAIU,EAAWT,EAAcv0B,KAAK,SAACi1B,GAEjC,OAAiB,IADHA,EAASX,GAAyB,QAGlD,IAAKU,EAAU,CACb,IAAME,EAAYpsC,KAAKqsC,aAAaZ,EAAeD,GACnDU,EAAWT,EAAcv0B,KAAK,SAACi1B,GAE7B,OADcA,EAASX,GAAyB,QAC/BY,IAGrB,OAAOF,EAAWA,EAAa,GAAI,IAE7BZ,GAAAlrC,UAAAisC,aAAR,SAAqBZ,EAAsBD,GACzC,IAAIc,EAAQ,KACZ,GAAIb,GAAiBnpC,MAAMC,QAAQkpC,GAAgB,CACjD,IAAMc,EAASd,EAAczrB,IAAI,SAAA7I,GAE/B,OADcA,EAAKq0B,GAAyB,QAGxCgB,EAAWC,KAAK/N,IAAIp0B,MAAMmiC,KAAMF,GACjClO,MAAMmO,KACTF,EAAQE,GAGZ,OAAOF,GAKFhB,GAAAlrC,UAAAssC,cAAP,SAAqBjB,EAAsBD,EAA0B5f,GAGnE,IAAM+gB,EAAkBlB,EAAcv0B,KAAK,SAACi1B,GAC1C,OAAOA,EAAa,KAAMvgB,IAKtBghB,EAHeD,EAAgBnB,GAAyB,MAGhC,EACxBqB,EAAiBF,EAAgBnB,GAAiC,cAGlEsB,EAAuB9sC,KAAK+sC,kBAAkBtB,EAAeD,EAAkBoB,EAAQC,GAG7F,GAAoC,IAAhCC,EAAqBtqC,OAYvB,OAAOxC,KAAKgtC,qBAAqBF,EAAsBlhB,GAXvD,IAAMqhB,EAAaxB,EAAcv0B,KAAK,SAACi1B,GACrC,OAAOA,EAAa,KAAMU,IAK5B,OAAKI,EAGEA,EAAe,GAFbjtC,KAAK2rC,eAAeF,EAAeD,IAWzCF,GAAAlrC,UAAA4sC,qBAAP,SAA4BF,EAA6BlhB,GACvD,GAAIkhB,EAAqBtqC,QAAU,EACjC,MAAO,GAGT,IAAM0qC,EAAeJ,EAAqB3b,UAAU,SAACgb,GACnD,OAAOA,EAAa,KAAMvgB,IAW5B,OAAOkhB,EANHI,IAAiBJ,EAAqBtqC,OAAS,EACrC0qC,EAAe,EAEfA,EAAe,GAGc,IAMtC5B,GAAAlrC,UAAA2sC,kBAAP,SAAyBtB,EAAsBD,EAA0BoB,EAAgBC,GAMvF,OAL2BpB,EAActpC,OAAO,SAACgqC,GAC/C,IAAMG,EAAQH,EAASX,GAAyB,MAC1C2B,EAAgBhB,EAASX,GAAiC,cAChE,OAAQc,IAAUM,EAAS,GAAMC,GAAkBM,KAQhD7B,GAAAlrC,UAAA4rC,gBAAP,SAAuBP,EAAsBl2B,GAC3C,IAAM63B,EAAW3B,EAAcv0B,KAAK,SAACi1B,GACnC,OAAOA,EAAa,KAAM52B,IAE5B,OAAO63B,GAAsB,MAEjC9B,IA5KA,SAAAA,MCAA,IAAA+B,IAKSA,GAAAjtC,UAAAmrC,oBAAP,SAA2B5gB,EAA0B6gB,GAEnD,IAAMC,EAAgB9gB,EAAYgB,KAAKyR,SACjCsO,EAAkB1rC,KAAK2rC,eAAeF,EAAeD,GAC3DxrC,KAAK4rC,aAAajhB,EAAa6gB,EAAkBE,IAE5C2B,GAAAjtC,UAAAyrC,wBAAP,SAA+Bnc,EAA0B8b,EAA0BM,GACjF,IAAML,EAAgB/b,EAAY0N,SAE5B2O,EAAmB/rC,KAAKgsC,gBAAgBP,EAAeK,GACzDlgB,EAAYkgB,EACXC,IACHngB,EAAY5rB,KAAK2rC,eAAeF,EAAeD,IAGjDpqC,WAAW,WACTsuB,EAAYqL,aAAanP,GAAW,GAAM,IACzC,IAKEyhB,GAAAjtC,UAAAwrC,aAAP,SAAoBjhB,EAA0B6gB,EAA0BM,GACtE,IAAML,EAAgB9gB,EAAYgB,KAAKyR,SAEjC2O,EAAmB/rC,KAAKgsC,gBAAgBP,EAAeK,GACzDlgB,EAAYkgB,EACXC,IACHngB,EAAY5rB,KAAK2rC,eAAeF,EAAeD,KAEL,IAAxC7gB,EAAYC,yBAGhBxpB,WAAW,WACTupB,EAAYgB,KAAKC,UAAY,KAC7BjB,EAAYgB,KAAKoP,aAAanP,GAAW,GAAM,IAC9C,IAMEyhB,GAAAjtC,UAAA6rC,cAAP,SAAqBR,EAAsBD,EAA0Bd,GAOnE,OAAkB,IANA1qC,KAAKgsC,gBAAgBP,EAAef,GAG1Bc,GAA4B,UAelD6B,GAAAjtC,UAAAurC,eAAR,SAAuBF,EAAsBD,GAC3C,IAAIU,EAAWT,EAAcv0B,KAAK,SAACi1B,GAEjC,OAAiB,IADHA,EAASX,GAAyB,QAGlD,IAAKU,EAAU,CACb,IAAME,EAAYpsC,KAAKqsC,aAAaZ,EAAeD,GACnDU,EAAWT,EAAcv0B,KAAK,SAACi1B,GAE7B,OADcA,EAASX,GAAyB,QAC/BY,IAGrB,OAAOF,EAAWA,EAAa,GAAI,IAE7BmB,GAAAjtC,UAAAisC,aAAR,SAAqBZ,EAAsBD,GACzC,IAAIc,EAAQ,KACZ,GAAIb,GAAiBnpC,MAAMC,QAAQkpC,GAAgB,CACjD,IAAMc,EAASd,EAAczrB,IAAI,SAAA7I,GAE/B,OADcA,EAAKq0B,GAAyB,QAGxCgB,EAAWC,KAAK/N,IAAIp0B,MAAMmiC,KAAMF,GACjClO,MAAMmO,KACTF,EAAQE,GAGZ,OAAOF,GAKFe,GAAAjtC,UAAAssC,cAAP,SAAqBjB,EAAsBD,EAA0B5f,GAGnE,IAAM+gB,EAAkBlB,EAAcv0B,KAAK,SAACi1B,GAC1C,OAAOA,EAAa,KAAMvgB,IAEtB0hB,EAAcX,EAAgBnB,GAAwB,KAItDoB,EAHeD,EAAgBnB,GAAyB,MAGhC,EACxB+B,EAAQD,EAAYE,UAAU,EAAGF,EAAY9qC,OAAS,GAGtDsqC,EAAuB9sC,KAAK+sC,kBAAkBtB,EAAeD,EAAkBoB,EAAQW,GAG7F,GAAoC,IAAhCT,EAAqBtqC,OAYvB,OAAOxC,KAAKgtC,qBAAqBF,EAAsBlhB,GAXvD,IAAMqhB,EAAaxB,EAAcv0B,KAAK,SAACi1B,GACrC,OAAOA,EAASX,GAAwB,OAAM+B,IAKhD,OAAKN,EAGEA,EAAe,GAFbjtC,KAAK2rC,eAAeF,EAAeD,IAWzC6B,GAAAjtC,UAAA4sC,qBAAP,SAA4BF,EAA6BlhB,GACvD,GAAIkhB,EAAqBtqC,QAAU,EACjC,MAAO,GAGT,IAAM0qC,EAAeJ,EAAqB3b,UAAU,SAACgb,GACnD,OAAOA,EAAa,KAAMvgB,IAW5B,OAAOkhB,EANHI,IAAiBJ,EAAqBtqC,OAAS,EACrC0qC,EAAe,EAEfA,EAAe,GAGc,IAMtCG,GAAAjtC,UAAA2sC,kBAAP,SAAyBtB,EAAsBD,EAA0BoB,EAAgBW,GAMvF,OAL2B9B,EAActpC,OAAO,SAACgqC,GAC/C,IAAMG,EAAQH,EAASX,GAAyB,MAC1CrwB,EAAOgxB,EAASX,GAAwB,KAC9C,OAAQc,IAAUM,EAAS,GAAMzxB,EAAKqL,WAAW+mB,MAQ9CF,GAAAjtC,UAAA4rC,gBAAP,SAAuBP,EAAsBl2B,GAC3C,IAAM63B,EAAW3B,EAAcv0B,KAAK,SAACi1B,GACnC,OAAOA,EAAa,KAAM52B,IAE5B,OAAO63B,GAAsB,MAEjCC,IA9KA,SAAAA,MCIA,IAAAI,IACSA,GAAA9kC,YAAP,SAAmB+kC,GACjB,IAAIC,EAAO,KACX,OAAQD,GACN,IAAK,OACHC,EAAO,IAAIN,GACX,MACF,IAAK,SACHM,EAAO,IAAIrC,GAIf,OAAOqC,GAEXF,IAdA,SAAAA,MCAA,IAAAG,IAKSA,GAAAxtC,UAAAytC,WAAP,SAAkBnmB,EAAmCnS,GACnD,IAAM4U,EAAczC,EAAWyC,YAEzB2jB,EADU3jB,EAAY4jB,QACI,wCAC1B5hC,EAAO,CACX6hC,OAAQz4B,EACR04B,YAAa9jB,EAAY+jB,oBAErBjgC,EAAU,CACdkgC,QAAS,IAAIC,EAAAA,YAAY,CAAEC,eAAgB,qBAC3CliC,KAAMA,GAER,OAAOge,EAAYmkB,OAAOR,EAAe,MAAO,KAAM7/B,GAAS2S,KAC7DZ,EAAAA,IAAI,SAACuuB,GACH,IAAM1iB,EAASnE,EAAW8mB,YAAYD,EAAaE,aAEnD,OADA/mB,EAAWoE,iBAAiB4iB,UAAU7iB,GAC/BA,MAQN+hB,GAAAxtC,UAAAuuC,SAAP,SAAgBjnB,EAAmCmf,GACjD,IAAM1c,EAAczC,EAAWyC,YAEzBykB,EADUzkB,EAAY4jB,QACE,2CAExB5hC,EAAO,CACX6hC,OAAQnH,EACRoH,YAAa9jB,EAAY+jB,oBAErBjgC,EAAU,CACdkgC,QAAS,IAAIC,EAAAA,YAAY,CAAEC,eAAgB,qBAC3CliC,KAAMA,GAER,OAAOge,EAAYmkB,OAAOM,EAAa,MAAO,KAAM3gC,GAAS2S,KAC3DZ,EAAAA,IAAI,SAACuuB,GACH,IAAM1iB,EAASnE,EAAW8mB,YAAYD,EAAaE,aAEnD,OADA/mB,EAAWoE,iBAAiB4iB,UAAU7iB,GAC/BA,MAQN+hB,GAAAxtC,UAAAyuC,cAAP,SAAqBnnB,EAAmConB,EAAsB/F,GAA9E,IAAA7nC,EAAAlB,KACQmqB,EAAczC,EAAWyC,YAEzB4kB,EADU5kB,EAAY4jB,QACO,iDAC7B5hC,EAAO,CACX2iC,MAAOA,EACP/F,IAAKA,EACLkF,YAAa9jB,EAAY+jB,oBAErBjgC,EAAU,CACdkgC,QAAS,IAAIC,EAAAA,YAAY,CAAEC,eAAgB,qBAC3CliC,KAAMA,GAER,OAAOge,EAAYmkB,OAAOS,EAAkB,MAAO,KAAM9gC,GAAS2S,KAChEZ,EAAAA,IAAI,SAACuuB,GACH,IAAIpzB,EAAOja,EAAKstB,SAASsgB,EAAO/F,GAEhC,OADerhB,EAAWsnB,cAAcC,mBAAmB9zB,EAAMozB,EAAaE,iBAS7Eb,GAAAxtC,UAAA8uC,YAAP,SAAmBxnB,EAAmConB,EAAsB/F,GAA5E,IAAA7nC,EAAAlB,KACQmqB,EAAczC,EAAWyC,YAEzBglB,EADUhlB,EAAY4jB,QACK,oDAE3B5hC,EAAO,CACX2iC,MAAOA,EACP/F,IAAKA,EACLkF,YAAa9jB,EAAY+jB,oBAErBjgC,EAAU,CACdkgC,QAAS,IAAIC,EAAAA,YAAY,CAAEC,eAAgB,qBAC3CliC,KAAMA,GAER,OAAOge,EAAYmkB,OAAOa,EAAgB,MAAO,KAAMlhC,GAAS2S,KAC9DZ,EAAAA,IAAI,SAACuuB,GACH,IAAI5f,EAAQztB,EAAKstB,SAASsgB,EAAO/F,GAEjC,OADerhB,EAAWsnB,cAAcC,mBAAmBtgB,EAAO4f,EAAaE,iBAM7Eb,GAAAxtC,UAAAouB,SAAR,SAAiBsgB,EAAiB/F,GAChC,IAAIpa,EAAQ,GACZ,GAAImgB,GAAwB,EAAfA,EAAMtsC,QAAcumC,GAAoB,EAAbA,EAAIvmC,OAC1C,IAAK,IAAI0H,EAAI,EAAGA,EAAI6+B,EAAIvmC,OAAQ0H,IAC1B4kC,EAAM5kC,KAERykB,GADAA,EAAQA,EAAQ,IAAIoa,EAAI7+B,IACR,IAAI4kC,EAAM5kC,GAAE,KAIlC,OAAOykB,GAOFif,GAAAxtC,UAAAgvC,eAAP,SAAsB1nB,EAAmC8jB,EAA0B3E,EAAkB5P,EAAgB2S,EAAcyF,EAAmCC,EAAsDt0B,EAA6BhB,GAAzP,IAAA9Y,EAAAlB,UAAmI,IAAAqvC,IAAAA,GAAA,QAAsH,IAAAr1B,IAAAA,GAAA,GACvP,IAAMu1B,EAAgBvvC,KAAKwvC,YAAY9nB,EAAY8jB,EAAkB3E,GACrE,GAAI0I,GAAwC,EAAvBA,EAAc/sC,SAAewX,EAChD,OAAOuG,EAAAA,GAAGgvB,GAEZ,IAAMplB,EAAczC,EAAWyC,YACzBslB,EAAsBzvC,KAAK0vC,qBAAqBhoB,EAAY8jB,EAAkB3E,GAC9E8I,EAA2B3vC,KAAK4vC,4BAA4BloB,EAAY8jB,GAIxEqE,EAAe,CACnBC,iBAJwB9vC,KAAK+vC,uBAAuBJ,EAA0BF,EAAqBxY,GAKnG+Y,eAAgBpG,EAChBqG,gBALsBX,GAAoC,EAAtBA,EAAWpQ,WAAgB,EAM/DgR,WAAY,CAAEC,UAAWb,GAAcA,EAAWnY,WAAa,EAAGiZ,SAAUd,GAAcA,EAAWpQ,UAAY,EAAGmR,UAAW,EAAGC,WAAY,IAE1IrC,EAAc9jB,EAAY+jB,mBAChC,OAAO/jB,EAAYomB,YAAYV,EAAc5B,GAAartB,KACxDZ,EAAAA,IAAI,SAACuuB,GACH,IAAMrH,EAAiBhmC,EAAKsvC,kBAAkBjC,GAC1C1H,EACEK,GAA8C,IAA5BA,EAAehI,UAAkBlkB,GACrDA,EAAaxF,OAAOlN,IAAI,SAASu+B,EAAQ,oBAAqBK,GAG5DA,GAA8C,IAA5BA,EAAehI,UAAkBlkB,GACrDA,EAAa0M,WAAWoE,iBAAiB2kB,2BAA2B,IAAKvJ,GAI7EhmC,EAAKwvC,wBAAwBhpB,EAAY8jB,EAAkBiE,EAAqBJ,GAEhF,IAAMsB,EAAWpC,EAAaE,YAAYvrC,OACpC+oB,EAAWvE,EAAWkpB,cAAcD,GAM1C,OALItB,EACF3nB,EAAWoE,iBAAiB+kB,QAAQ5kB,EAAU,CAAE6kB,qBAAqB,IAErEppB,EAAWoE,iBAAiBilB,YAAY9kB,EAAU,CAAE6kB,qBAAqB,IAEpE7kB,MAKN2hB,GAAAxtC,UAAA4wC,aAAP,SAAoBtpB,EAAmC8jB,EAA0B3E,EAAkBvV,EAAsB2f,EAAsBC,EAAkBja,EAAiB/U,GAAlL,IAAAhhB,EAAAlB,KACQmqB,EAAczC,EAAWyC,YAEzBgnB,EADUhnB,EAAY4jB,QACD,iCACrB0B,EAAsBzvC,KAAK0vC,qBAAqBhoB,EAAY8jB,EAAkB3E,GAa9E54B,EAAU,CACd9B,KAXW,CACXilC,OAAQvK,GAAY,GACpBwK,iBAAiB,EACjBC,oBAAqBhgB,EACrBge,WAAY,GACZ2B,aAAYA,EACZC,SAAQA,EACR/uC,OATmBnC,KAAKuxC,kBAAkBta,EAAS,KAAM,EAAG,GAU5DgX,YAAa9jB,EAAY+jB,qBAK3B,OAAO/jB,EAAYmkB,OAAO6C,EAAU,MAAO,KAAMljC,GAAS2S,KACxDG,EAAAA,IAAI,SAACwtB,GAEH,GAAIA,EAAaE,aAAeF,EAAaE,YAAY+C,eAAiBtvB,GAAWA,EAAQlH,aAAc,CACzG,IAAMA,EAAekH,EAAQlH,aACvB+N,EAA0B/N,GAAgBA,EAAagO,8BAAgC,KAC7F,GAAID,EAAyB,CAC3B,IAAM4C,EAAO4iB,EAAaE,YAAYvrC,OAChCuuC,EAAgBlD,EAAaE,YAAY+C,cAGzCE,EADe/lB,EAAKzU,KAAK,SAAAC,GAAQ,OAAAA,EAAKuQ,EAAWiqB,cAAgBF,IACpCjG,GAC7BzC,EAAM7nC,EAAK0wC,gBAAgBF,EAAe/lB,EAAM6f,EAAkB9jB,GACxEqB,EAAwBvT,OAAOlN,IAAI,uBAAwBygC,EAAIta,KAAK,MACpE1F,EAAwBvT,OAAOlN,IAAI,wBAAyBmpC,GAC5D1oB,EAAwBR,QAAQC,iBAAiB,wBAAyBipB,OAIhFzxB,EAAAA,IAAI,SAACuuB,GACH,IAAMc,EAAmBntB,GAAWA,EAAQmtB,mBAAoB,EAEhEnuC,EAAKwvC,wBAAwBhpB,EAAY8jB,EAAkBiE,EAAqBJ,GAEhF,IAAMsB,EAAWpC,EAAaE,YAAYvrC,OACpC+oB,EAAWvE,EAAWkpB,cAAcD,GAM1C,OALItB,EACF3nB,EAAWoE,iBAAiB+kB,QAAQ5kB,EAAU,CAAE6kB,qBAAqB,IAErEppB,EAAWoE,iBAAiBilB,YAAY9kB,EAAU,CAAE6kB,qBAAqB,IAEpE7kB,MAON2hB,GAAAxtC,UAAA2vC,uBAAP,SAA8BJ,EAAkCF,EAA0BoC,GACxF,IAAMC,EAAeD,GAAqC,GAAtBA,EAAYrvC,OAAc,EAAI,EAC5DuvC,EAActC,EAAsBA,EAA2B,MAAI,EACnEtC,EAAgBsC,EAAsBA,EAAwB,GAAI,GAElEuC,EAAoB,CACxB,CACEC,YAAkBtC,EAAwB,SAC1CuC,MAASH,EAAc,EACvBI,SAAY,KACZC,SAAY,KACZ1I,SAAY,EACZ2I,YAAe,EACfC,QAAW,IAkBf,OAfInF,EACF6E,EAAkB1wC,KAChB,CACE2wC,YAAkBtC,EAAwB,iBAC1CuC,MAAS/E,EACTgF,SAAY,KACZC,SAAY,KACZ1I,SAAYoI,EACZO,YAAe,EACfC,QAAW,IAIfN,EAAkB,GAAGtI,SAAWoI,EAE3BE,EAAkB3mC,OAAOwmC,IAE3BjE,GAAAxtC,UAAAmxC,kBAAP,SAAyBpvC,EAAe4xB,EAAamL,EAAkB/H,GAGrE,OAAKh1B,GAAW4xB,GAASmL,GAAa/H,GAOpCpD,EADGA,GACI,IAHP5xB,EADGA,GACM,KAMmB,EAAhBA,EAAOK,SACnBL,EAAOA,EAAOK,OAAS,GAAGknC,SAAW,GAElB,CACnBoG,iBAAkB3tC,EAClB6tC,eAAgBjc,EAChBkc,gBAA8B,IAAb/Q,EACjBgR,WAAY,CACVC,UAAWhZ,EACXiZ,SAAUlR,EACVmR,UAAW,EACXC,WAAY,KApBP,MA6BJ1C,GAAAxtC,UAAAswC,wBAAP,SAA+BhpB,EAAmC6qB,EAA0B9C,EAA0BJ,GAEpH,QAFoH,IAAAA,IAAAA,GAAA,GAE/GI,EAAL,CAIA,IAAMX,EAAQ9uC,KAAKwyC,cAAc9qB,EAAY6qB,EAAkB9C,GAC3DJ,EACF3nB,EAAWoE,iBAAiB2mB,eAAe,SAAC5mB,GAC1C,IAAMtW,EAAKsW,EAAOA,EAAO8lB,YACzB,OAAO7C,EAAM1U,SAAS7kB,KAGxBmS,EAAWoE,iBAAiB4mB,WAAW,SAAC7mB,GACtC,IAAMtW,EAAKsW,EAAOA,EAAO8lB,YACzB,OAAO7C,EAAM1U,SAAS7kB,UAZxBmS,EAAWoE,iBAAiBxK,SAuBxBssB,GAAAxtC,UAAAoyC,cAAR,SAAsB9qB,EAAmC6qB,EAA0B9C,GAAnF,IAAAvuC,EAAAlB,KACQ2yC,EAAiBlD,EAAoBl6B,GACrCq9B,EAASnD,EAAoBnD,MAC/BwC,EAAQ,GAgBZ,OAfApnB,EAAWoE,iBAAiBuD,iBAAiBjtB,QAAQ,SAAAypB,GACnD,IAAM6lB,EAAgB7lB,EAAO0mB,GACvBpF,EAAgBuE,EAAcvE,cAC9Bb,EAAQoF,EAAcpF,MAE5B,GADyBsG,EAAS,GAAnBtG,GAAyBa,IAAkBwF,EAC9C,CACV,IAAMp9B,EAAKsW,EAAOA,EAAO8lB,YACzB7C,EAAMxtC,KAAKiU,GACX,IAAMs9B,EAAqB3xC,EAAKwuC,qBAAqBhoB,EAAY6qB,EAAkBh9B,GAC7Eu9B,EAAS5xC,EAAKsxC,cAAc9qB,EAAY6qB,EAAkBM,GAC5DC,GAA0B,EAAhBA,EAAOtwC,SACnBssC,EAAQA,EAAMzjC,OAAOynC,OAIpBhE,GAKFlB,GAAAxtC,UAAAsvC,qBAAP,SAA4BhoB,EAAmC6qB,EAA0Bh9B,GACvF,IAAKA,EACH,OAAO,KAET,IAEMrS,EAFiBwkB,EAAWoE,iBAAiBC,cAAcxW,GACtBg9B,GACRnV,SAEnC,OADAl6B,EAAW,GAAIqS,EACRrS,GAEF0qC,GAAAxtC,UAAA2yC,iBAAP,SAAwBlnB,EAAgB0mB,GACtC,OAAO1mB,EAAO0mB,IAKT3E,GAAAxtC,UAAAwvC,4BAAP,SAAmCloB,EAAmC6qB,GAGpE,OAFkBS,EAAAA,kBAAkBC,aAAavrB,EAAWwrB,YACpBX,GACXvQ,mBAEvB4L,GAAAxtC,UAAAowC,kBAAR,SAA0BjC,GACxB,OAAOA,GAAgBA,EAAaE,aAAeF,EAAaE,YAAYa,YAAc,MAEpF1B,GAAAxtC,UAAA+yC,WAAR,SAAmBzB,EAA4E/lB,EAAa6f,GAC1G,OAAO7f,EAAKzU,KAAK,SAAAC,GACf,IAAMi8B,EAAuBj8B,EAAKq0B,GAClC,OAAO4H,EAAqB9G,QAAUoF,EAAcpF,MAAQ,GAAKoF,EAAcvE,gBAAkBiG,EAAqBjG,iBAGlHS,GAAAxtC,UAAAwxC,gBAAR,SAAwBF,EAA4E/lB,EAAa6f,EAA0B9jB,GAGzI,IAFA,IAAIvQ,EAAOnX,KAAKmzC,WAAWzB,EAAe/lB,EAAM6f,GAC1CzC,EAAM,GACL5xB,GACL4xB,EAAIznC,KAAK6V,EAAKuQ,EAAWiqB,aACzBx6B,EAAOnX,KAAKmzC,WAAWh8B,EAAKq0B,GAAmB7f,EAAM6f,GAEvD,OAAOzC,GASD6E,GAAAxtC,UAAAovC,YAAR,SAAoB9nB,EAAmC8jB,EAA0Bj2B,GAAjF,IAAArU,EAAAlB,KACQ0xC,EAAgB1xC,KAAK0vC,qBAAqBhoB,EAAY8jB,EAAkBj2B,GAC9E,IAAKm8B,EACH,OAAO,KAET,IAAMpF,EAAQoF,EAAcpF,MACtBa,EAAgBuE,EAAcvE,cAUpC,OAT2BzlB,EAAWoE,iBAAiBub,YAAY,SAACxb,GAClE,IAAM6lB,EAAgBxwC,EAAK6xC,iBAAiBlnB,EAAQ2f,GAEpD,OADgBkG,EAAcpF,QAAUA,EAAQ,GAAMoF,EAAcvE,gBAAkBA,IAAkBA,GAAkBuE,EAAcvE,eAI/H,KAFAthB,KAOf+hB,IAlZA,SAAAA,MCAA,IAAAyF,IAKSA,GAAAjzC,UAAAytC,WAAP,SAAkBnmB,EAAmCnS,GACnD,IAAM4U,EAAczC,EAAWyC,YAEzB2jB,EADU3jB,EAAY4jB,QACI,sCAC1B5hC,EAAO,CACX6hC,OAAQz4B,EACR04B,YAAa9jB,EAAY+jB,oBAErBjgC,EAAU,CACdkgC,QAAS,IAAIC,EAAAA,YAAY,CAAEC,eAAgB,qBAC3CliC,KAAMA,GAER,OAAOge,EAAYmkB,OAAOR,EAAe,MAAO,KAAM7/B,GAAS2S,KAC7DZ,EAAAA,IAAI,SAACuuB,GACH,IAAM1iB,EAASnE,EAAW8mB,YAAYD,EAAaE,aAEnD,OADA/mB,EAAWoE,iBAAiB4iB,UAAU7iB,GAC/BA,MAQNwnB,GAAAjzC,UAAAuuC,SAAP,SAAgBjnB,EAAmCmf,GACjD,IAAM1c,EAAczC,EAAWyC,YAEzBykB,EADUzkB,EAAY4jB,QACE,yCAExB5hC,EAAO,CACX6hC,OAAQnH,EACRoH,YAAa9jB,EAAY+jB,oBAErBjgC,EAAU,CACdkgC,QAAS,IAAIC,EAAAA,YAAY,CAAEC,eAAgB,qBAC3CliC,KAAMA,GAER,OAAOge,EAAYmkB,OAAOM,EAAa,MAAO,KAAM3gC,GAAS2S,KAC3DZ,EAAAA,IAAI,SAACuuB,GACH,IAAM1iB,EAASnE,EAAW8mB,YAAYD,EAAaE,aAEnD,OADA/mB,EAAWoE,iBAAiB4iB,UAAU7iB,GAC/BA,MAQNwnB,GAAAjzC,UAAAyuC,cAAP,SAAqBnnB,EAAmConB,EAAsB/F,GAA9E,IAAA7nC,EAAAlB,KACQmqB,EAAczC,EAAWyC,YAEzB4kB,EADU5kB,EAAY4jB,QACO,+CAC7B5hC,EAAO,CACX2iC,MAAOA,EACP/F,IAAKA,EACLkF,YAAa9jB,EAAY+jB,oBAErBjgC,EAAU,CACdkgC,QAAS,IAAIC,EAAAA,YAAY,CAAEC,eAAgB,qBAC3CliC,KAAMA,GAER,OAAOge,EAAYmkB,OAAOS,EAAkB,MAAO,KAAM9gC,GAAS2S,KAChEZ,EAAAA,IAAI,SAACuuB,GACH,IAAIpzB,EAAOja,EAAKstB,SAASsgB,EAAO/F,GAEhC,OADerhB,EAAWsnB,cAAcC,mBAAmB9zB,EAAMozB,EAAaE,iBAS7E4E,GAAAjzC,UAAA8uC,YAAP,SAAmBxnB,EAAmConB,EAAsB/F,GAA5E,IAAA7nC,EAAAlB,KACQmqB,EAAczC,EAAWyC,YAEzBglB,EADUhlB,EAAY4jB,QACK,kDAE3B5hC,EAAO,CACX2iC,MAAOA,EACP/F,IAAKA,EACLkF,YAAa9jB,EAAY+jB,oBAErBjgC,EAAU,CACdkgC,QAAS,IAAIC,EAAAA,YAAY,CAAEC,eAAgB,qBAC3CliC,KAAMA,GAER,OAAOge,EAAYmkB,OAAOa,EAAgB,MAAO,KAAMlhC,GAAS2S,KAC9DZ,EAAAA,IAAI,SAACuuB,GACH,IAAIpzB,EAAOja,EAAKstB,SAASsgB,EAAO/F,GAEhC,OADerhB,EAAWsnB,cAAcC,mBAAmB9zB,EAAMozB,EAAaE,iBAM5E4E,GAAAjzC,UAAAouB,SAAR,SAAiBsgB,EAAiB/F,GAChC,IAAIpa,EAAQ,GACZ,GAAImgB,GAAwB,EAAfA,EAAMtsC,QAAcumC,GAAoB,EAAbA,EAAIvmC,OAC1C,IAAK,IAAI0H,EAAI,EAAGA,EAAI6+B,EAAIvmC,OAAQ0H,IAC1B4kC,EAAM5kC,KAERykB,GADAA,EAAQA,EAAQ,IAAIoa,EAAI7+B,IACR,IAAI4kC,EAAM5kC,GAAE,KAIlC,OAAOykB,GAOF0kB,GAAAjzC,UAAAgvC,eAAP,SAAsB1nB,EAAmC8jB,EAA0B3E,EAAkB5P,EAAgB2S,EAAcyF,EAAmCC,EAAsDt0B,EAA6BhB,GAAzP,IAAA9Y,EAAAlB,UAAmI,IAAAqvC,IAAAA,GAAA,QAAsH,IAAAr1B,IAAAA,GAAA,GACvP,IAAMu1B,EAAgBvvC,KAAKwvC,YAAY9nB,EAAY8jB,EAAkB3E,GACrE,GAAI0I,GAAwC,EAAvBA,EAAc/sC,SAAewX,EAChD,OAAOuG,EAAAA,GAAGgvB,GAEZ,IAAMplB,EAAczC,EAAWyC,YACzBslB,EAAsBzvC,KAAK0vC,qBAAqBhoB,EAAY8jB,EAAkB3E,GAC9E8I,EAA2B3vC,KAAK4vC,4BAA4BloB,EAAY8jB,GAIxEqE,EAAe,CACnBC,iBAJwB9vC,KAAK+vC,uBAAuBJ,EAA0BF,EAAqBxY,GAKnG+Y,eAAgBpG,EAChBqG,gBALsBX,GAAoC,EAAtBA,EAAWpQ,WAAgB,EAM/DgR,WAAY,CAAEC,UAAWb,GAAcA,EAAWnY,WAAa,EAAGiZ,SAAUd,GAAcA,EAAWpQ,UAAY,EAAGmR,UAAW,EAAGC,WAAY,IAE1IrC,EAAc9jB,EAAY+jB,mBAChC,OAAO/jB,EAAYomB,YAAYV,EAAc5B,GAAartB,KACxDZ,EAAAA,IAAI,SAACuuB,GACH,IAAMrH,EAAiBhmC,EAAKsvC,kBAAkBjC,GAC1C1H,EACEK,GAA8C,IAA5BA,EAAehI,UAAkBlkB,GACrDA,EAAaxF,OAAOlN,IAAI,SAASu+B,EAAQ,oBAAqBK,GAG5DA,GAA8C,IAA5BA,EAAehI,UAAkBlkB,GACrDA,EAAa0M,WAAWoE,iBAAiB2kB,2BAA2B,IAAKvJ,GAI7EhmC,EAAKwvC,wBAAwBhpB,EAAY8jB,EAAkBiE,EAAqBJ,GAEhF,IAAMsB,EAAWpC,EAAaE,YAAYvrC,OACpC+oB,EAAWvE,EAAWkpB,cAAcD,GAO1C,OANItB,EACF3nB,EAAWoE,iBAAiB+kB,QAAQ5kB,EAAU,CAAE6kB,qBAAqB,IAErEppB,EAAWoE,iBAAiBilB,YAAY9kB,EAAU,CAAE6kB,qBAAqB,IAGpE7kB,MAKNonB,GAAAjzC,UAAA4wC,aAAP,SAAoBtpB,EAAmC8jB,EAA0B3E,EAAkBvV,EAAsB2f,EAAsBC,EAAkBja,EAAiB/U,GAAlL,IAAAhhB,EAAAlB,KACQmqB,EAAczC,EAAWyC,YAEzBgnB,EADUhnB,EAAY4jB,QACD,iCACrBuF,EAAoBtzC,KAAK0vC,qBAAqBhoB,EAAY8jB,EAAkB3E,GAY5E54B,EAAU,CACd9B,KAXW,CACXilC,OAAQvK,GAAY,GACpBwK,iBAAiB,EACjBC,oBAAqBhgB,EACrBge,WAAY,GACZ2B,aAAYA,EACZC,SAAQA,EACR/uC,OARmBnC,KAAKuxC,kBAAkBta,EAAS,KAAM,EAAG,GAS5DgX,YAAa9jB,EAAY+jB,qBAK3B,OAAO/jB,EAAYmkB,OAAO6C,EAAU,MAAO,KAAMljC,GAAS2S,KACxDG,EAAAA,IAAI,SAACwtB,GAEH,GAAIA,EAAaE,aAAeF,EAAaE,YAAY+C,eAAiBtvB,GAAWA,EAAQlH,aAAc,CACzG,IAAMA,EAAekH,EAAQlH,aACvB+N,EAA0B/N,GAAgBA,EAAagO,8BAAgC,KAC7F,GAAID,EAAyB,CAC3B,IAAM4C,EAAO4iB,EAAaE,YAAYvrC,OAChCuuC,EAAgBlD,EAAaE,YAAY+C,cAGzCE,EADe/lB,EAAKzU,KAAK,SAAAC,GAAQ,OAAAA,EAAKuQ,EAAWiqB,cAAgBF,IACpCjG,GAC7BzC,EAAM7nC,EAAK0wC,gBAAgBF,EAAe/lB,EAAM6f,EAAkB9jB,GACxEqB,EAAwBvT,OAAOlN,IAAI,uBAAwBygC,EAAIta,KAAK,MACpE1F,EAAwBvT,OAAOlN,IAAI,wBAAyBmpC,GAC5D1oB,EAAwBR,QAAQC,iBAAiB,wBAAyBipB,OAIhFzxB,EAAAA,IAAI,SAACuuB,GACH,IAAMc,EAA4BntB,GAAWA,EAAQmtB,mBAAoB,EAEzEnuC,EAAKwvC,wBAAwBhpB,EAAY8jB,EAAkB8H,EAAmBjE,GAE9E,IAAMsB,EAAWpC,EAAaE,YAAYvrC,OACpC+oB,EAAWvE,EAAWkpB,cAAcD,GAM1C,OALItB,EACF3nB,EAAWoE,iBAAiB+kB,QAAQ5kB,EAAU,CAAC6kB,qBAAqB,IAEpEppB,EAAWoE,iBAAiBilB,YAAY9kB,EAAU,CAAC6kB,qBAAqB,IAEnE7kB,MAONonB,GAAAjzC,UAAA2vC,uBAAP,SAA8BJ,EAAkCF,EAA0BoC,GACxF,IAAMC,EAAeD,GAAqC,GAAtBA,EAAYrvC,OAAc,EAAI,EAG5DwvC,EAAoB,CACxB,CACEC,YAAkBtC,EAAwB,SAC1CuC,OAJgBzC,EAAsBA,EAA2B,MAAI,GAI9C,EACvB0C,SAAY,KACZC,SAAY,KACZ1I,SAAY,EACZ2I,YAAe,EACfC,QAAW,IAKTiB,EAAa9D,EAAsBA,EAA0B,KAAI,GAevE,OAdI8D,EACFvB,EAAkB1wC,KAAK,CACrB2wC,YAAkBtC,EAAwB,QAC1CuC,MAASqB,EACTpB,SAAY,KACZC,SAAY,KACZ1I,SAAYoI,EACZO,YAAe,EACfC,QAAW,IAGbN,EAAkB,GAAGtI,SAAWoI,EAG3BE,EAAkB3mC,OAAOwmC,IAE3BwB,GAAAjzC,UAAAmxC,kBAAP,SAAyBpvC,EAAe4xB,EAAamL,EAAkB/H,GAGrE,OAAKh1B,GAAW4xB,GAASmL,GAAa/H,GAOpCpD,EADGA,GACI,IAHP5xB,EADGA,GACM,KAMmB,EAAhBA,EAAOK,SACnBL,EAAOA,EAAOK,OAAS,GAAGknC,SAAW,GAElB,CACnBoG,iBAAkB3tC,EAClB6tC,eAAgBjc,EAChBkc,gBAA8B,IAAb/Q,EACjBgR,WAAY,CACVC,UAAWhZ,EACXiZ,SAAUlR,EACVmR,UAAW,EACXC,WAAY,KApBP,MA4BJ+C,GAAAjzC,UAAAswC,wBAAP,SAA+BhpB,EAAmC6qB,EAA0B9C,EAA0BJ,GAGpH,QAHoH,IAAAA,IAAAA,GAAA,GAG/GI,EAAL,CAIA,IAAMlC,EAAQkC,EAAoBt0B,KAC5ByxB,EAAS6C,EAAoBnD,MAC/B+C,EACF3nB,EAAWoE,iBAAiB4mB,WAAW,SAAC7mB,GACtC,IAAM6lB,EAAgB7lB,EAAO0mB,GACvBp3B,EAAOu2B,EAAcv2B,KACrBmxB,EAAQoF,EAAcpF,MAC5B,OAAeM,EAARN,GAAkBnxB,EAAKqL,WAAW+mB,KAG3C7lB,EAAWoE,iBAAiB2mB,eAAe,SAAC5mB,GAC1C,IAAM6lB,EAAgB7lB,EAAO0mB,GACvBp3B,EAAOu2B,EAAcv2B,KACrBmxB,EAAQoF,EAAcpF,MAC5B,OAAeM,EAARN,GAAkBnxB,EAAKqL,WAAW+mB,UAjB3C7lB,EAAWoE,iBAAiBxK,SA0BzB+xB,GAAAjzC,UAAAsvC,qBAAP,SAA4BhoB,EAAmC6qB,EAA0Bh9B,GACvF,OAAKA,EAGkBmS,EAAWoE,iBAAiBC,cAAcxW,GACtBg9B,GAChBnV,SAJlB,MAUJiW,GAAAjzC,UAAAwvC,4BAAP,SAAmCloB,EAAmC6qB,GAGpE,OAFkBS,EAAAA,kBAAkBC,aAAavrB,EAAWwrB,YACpBX,GACXvQ,mBAEvBqR,GAAAjzC,UAAAowC,kBAAR,SAA0BjC,GACxB,OAAOA,GAAgBA,EAAaE,aAAeF,EAAaE,YAAYa,YAAc,MAEpF+D,GAAAjzC,UAAA+yC,WAAR,SAAmBzB,EAAmE/lB,EAAa6f,GACjG,OAAO7f,EAAKzU,KAAK,SAAAC,GACf,IAAMi8B,EAAuBj8B,EAAKq0B,GAClC,OAAO4H,EAAqB9G,QAAUoF,EAAcpF,MAAQ,GAAKoF,EAAcv2B,KAAKqL,WAAW4sB,EAAqBj4B,SAGhHk4B,GAAAjzC,UAAAwxC,gBAAR,SAAwBF,EAAmE/lB,EAAa6f,EAA0B9jB,GAGhI,IAFA,IAAIvQ,EAAOnX,KAAKmzC,WAAWzB,EAAe/lB,EAAM6f,GAC1CzC,EAAM,GACL5xB,GACL4xB,EAAIznC,KAAK6V,EAAKuQ,EAAWiqB,aACzBx6B,EAAOnX,KAAKmzC,WAAWh8B,EAAKq0B,GAAmB7f,EAAM6f,GAEvD,OAAOzC,GAEDsK,GAAAjzC,UAAA2yC,iBAAR,SAAyBlnB,EAAgB2f,GACvC,OAAO3f,EAAO2f,IASR6H,GAAAjzC,UAAAovC,YAAR,SAAoB9nB,EAAmC8jB,EAA0Bj2B,GAAjF,IAAArU,EAAAlB,KACQ0xC,EAAgB1xC,KAAK0vC,qBAAqBhoB,EAAY8jB,EAAkBj2B,GAC9E,IAAKm8B,EACH,OAAO,KAET,IAAMpF,EAAQoF,EAAcpF,MACtBnxB,EAAOu2B,EAAcv2B,KAU3B,OAT2BuM,EAAWoE,iBAAiBub,YAAY,SAACxb,GAClE,IAAM6lB,EAAgBxwC,EAAK6xC,iBAAiBlnB,EAAQ2f,GAEpD,OADgBkG,EAAcpF,QAAUA,EAAQ,GAAKoF,EAAcv2B,KAAKqL,WAAWrL,GAE1E0Q,EAEA,QAKfwnB,IA7XA,SAAAA,MCNA,IAAAG,IACWA,GAAA7qC,YAAP,SAAmB+kC,GACf,IAAIhmB,EAAW,KACf,OAAQgmB,GACJ,IAAK,OACDhmB,EAAa,IAAI2rB,GACjB,MACJ,IAAK,SACD3rB,EAAa,IAAIkmB,GAIzB,OAAOlmB,GAEf8rB,IAdA,SAAAA,MCmBA,IAAA3mC,GAAA4mC,IAC8B1mC,EAAAA,GAD9BF,GAC8Bw+B,IAK5B5iC,OAAAC,eAAY+qC,GAAArzC,UAAA,mBAAgB,KAA5B,WACE,OAAOJ,KAAK+oB,wBAAwBG,SAAS,qDAE/CzgB,OAAAC,eAAY+qC,GAAArzC,UAAA,0BAAuB,KAAnC,WACE,OAAOJ,KAAKgb,aAAagO,8DAuBpByqB,GAAArzC,UAAA4xB,KAAP,SAAYiF,EAAkB2S,GAA9B,IAAA1oC,EAAAlB,KACQ0zC,EAAe1zC,KAAK2zC,gBAAgB1c,GACpC2c,EAAa5zC,KAAK2zC,gBAAgB/J,GAClCiK,EAAmE,IAA7C7zC,KAAK0nB,WAAWoE,iBAAiB4R,QAEvDzL,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAEhE,OADehB,KAAK0nB,WAAW2f,YAAYqM,EAAcE,EAAY,KAAM,MAC7DhzB,KACZG,EAAAA,IACE,WAGE,GAA4B,GAAxB8yB,EAA8B,CAChC,IAAMC,EAAgB5yC,EAAK6yC,mBACrBC,EAAevG,GAAgB9kC,YAAYmrC,GAC5B,OAAjBE,GACFA,EAAazI,oBAAoBrqC,EAAKypB,YAAazpB,EAAKsqC,kBAI5DtqC,EAAKH,eAAeQ,iBAAiB0wB,IAEvC,SAAC9mB,GACCjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAK+yC,aAAavlC,UAAUxN,EAAK0L,gBAAgBjI,WAAYwG,OAS9DsoC,GAAArzC,UAAA8zC,YAAP,SAAmBjd,EAAkB2S,EAAgByF,GAArD,IAAAnuC,EAAAlB,KACEA,KAAKm0C,oBAAoBld,EAAS2S,GAClC,IAAM8J,EAAe1zC,KAAK2zC,gBAAgB1c,GACpC2c,EAAa5zC,KAAK2zC,gBAAgB/J,GAElC/C,EAAW7mC,KAAKo0C,gBAChBP,EAAmE,IAA7C7zC,KAAK0nB,WAAWoE,iBAAiB4R,QACzD2R,IAAqBt9B,YACvBs9B,GAAmB,GAEW,kBAArBA,IACTA,EAAwC,SAArBA,GAErB,IAAMyE,EAAgB9zC,KAAK+zC,mBACrBrsB,EAAa8rB,GAAsB7qC,YAAYmrC,GAErD,GAAmB,OAAfpsB,EACF,OAAOtS,EAAAA,QAET,IAAM6c,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAE1DsuC,EAAatvC,KAAKq0C,oBAAoBxN,GACtC7sB,EAASha,KAAKgb,aAAaxF,OAAOpN,IAAI,uBAAwB,EAEpE,OADesf,EAAW0nB,eAAepvC,KAAK0nB,WAAY1nB,KAAKwrC,iBAAkB3E,EAAU6M,EAAcE,EAAYvE,EAAkBC,EAAYtvC,KAAKgb,aAAchB,GACxJ4G,KACZG,EAAAA,IACE,SAACkL,GAGC,GAFA/qB,EAAK8Z,aAAaxF,OAAO2K,UAAO,qBAEJ,GAAxB0zB,EAA8B,CAChC,IAAMG,EAAevG,GAAgB9kC,YAAYmrC,GAC5B,OAAjBE,GACFA,EAAazI,oBAAoBrqC,EAAKypB,YAAazpB,EAAKsqC,kBAG5D,IAAM8I,EAAepzC,EAAKypB,YAAYgB,KAAKwR,YAAYoX,gBACvD,GAAIlF,IAEyBpjB,EAAS/U,KAAK,SAAAC,GAAQ,OAAAA,EAAKuU,eAAiB4oB,KAErEpzC,EAAK65B,aAAauZ,IAGfpzC,EAAKwmB,WAAWoE,iBAAiBC,cAAcuoB,IAAe,CACjE,IAAME,EAAevoB,GAAY3pB,MAAMC,QAAQ0pB,IAA+B,EAAlBA,EAASzpB,QAAcypB,EAAS,GAAGP,cAAgB,KAC3G8oB,GACFtzC,EAAK65B,aAAayZ,GAIxBtzC,EAAKH,eAAeQ,iBAAiB0wB,IAEvC,SAAA9mB,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAK+yC,aAAavlC,UAAUxN,EAAK0L,gBAAgBjI,WAAYwG,OAa9DsoC,GAAArzC,UAAA4wC,aAAP,SAAoBM,EAA6BL,EAAsBC,EAAkBja,EAAiBoY,GAA1G,IAAAnuC,EAAAlB,KACE,GAA4B,iBAAjBixC,EACT,MAAM,IAAIvgC,MAAM,4CAElB,GAAwB,iBAAbwgC,EACT,MAAM,IAAIxgC,MAAM,wCAEd2+B,IAAqBt9B,YACvBs9B,GAAmB,GAEW,kBAArBA,IACTA,EAAwC,SAArBA,GAErB,IAAMtmB,EAA0B/oB,KAAK+oB,wBAErCA,EAAwBvT,OAAO2K,UAAO,wBACtC4I,EAAwBvT,OAAO2K,UAAO,yBACtC4I,EAAwBR,QAAQC,iBAAiB,wBAAyB,MAC1E,IAAMkrB,EAAe1zC,KAAK2zC,gBAAgB1c,GACpC4P,EAAW7mC,KAAKo0C,gBAChBP,EAAmE,IAA7C7zC,KAAK0nB,WAAWoE,iBAAiB4R,QACvDoW,EAAgB9zC,KAAK+zC,mBACrBrsB,EAAa8rB,GAAsB7qC,YAAYmrC,GAErD,GAAmB,OAAfpsB,EACF,OAAOpK,EAAAA,MAET,IAAM2U,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAC1DkhB,EAAU,CACdlH,aAAchb,KAAKgb,aACnBq0B,iBAAgBA,GAIlB,OADe3nB,EAAWspB,aAAahxC,KAAK0nB,WAAY1nB,KAAKwrC,iBAAkB3E,EAAUyK,EAAqBL,EAAcC,EAAUwC,EAAcxxB,GACtItB,KACZG,EAAAA,IACE,SAACkL,GACC,IAAMulB,EAAgBzoB,EAAwBvT,OAAOpN,IAAI,yBAEzD,GAA4B,GAAxByrC,IAAiCrC,EAAe,CAClD,IAAMwC,EAAevG,GAAgB9kC,YAAYmrC,GAC5B,OAAjBE,GACFA,EAAazI,oBAAoBrqC,EAAKypB,YAAazpB,EAAKsqC,kBAG5D,IAAM8I,EAAepzC,EAAKypB,YAAYgB,KAAKwR,YAAYoX,gBACvD,GAAIlF,IAEyBpjB,EAAS/U,KAAK,SAAAC,GAAQ,OAAAA,EAAKuU,eAAiB4oB,KAErEpzC,EAAK65B,aAAauZ,IAGfpzC,EAAKwmB,WAAWoE,iBAAiBC,cAAcuoB,IAAiBroB,GAA8B,EAAlBA,EAASzpB,QAAY,CACpG,IAAMgyC,EAAevoB,GAAY3pB,MAAMC,QAAQ0pB,IAA+B,EAAlBA,EAASzpB,QAAcypB,EAAS,GAAGP,cAAgB,KAC3G8oB,GACFtzC,EAAK65B,aAAayZ,GAIxBtzC,EAAKH,eAAeQ,iBAAiB0wB,IAEvC,SAAA9mB,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAK+yC,aAAavlC,UAAUxN,EAAK0L,gBAAgBjI,WAAYwG,OAQ9DsoC,GAAArzC,UAAAg0C,cAAP,WACE,IAAMK,EAAcz0C,KAAK+oB,wBAAwBG,SAAS,4BAA8B,GAClFwrB,EAAaD,EAAY7jB,MAE/B,OADA5wB,KAAK+oB,wBAAwBK,SAAS,0BAA2BqrB,GAC1DC,GAMFjB,GAAArzC,UAAAu0C,cAAP,SAAqBD,GACnB,IAAMD,EAAcz0C,KAAK+oB,wBAAwBG,SAAS,4BAA8B,GACxFurB,EAAYnzC,KAAKozC,GACjB10C,KAAK+oB,wBAAwBK,SAAS,0BAA2BqrB,IAM5DhB,GAAArzC,UAAAuzC,gBAAP,SAAuBnK,GACrB,IAAMoL,EAAqBpL,GAA6B,KAAfA,EAA4BA,EAAP,KAC9D,OAAO53B,KAAKC,MAAM+iC,IAMbnB,GAAArzC,UAAAytC,WAAP,SAAkBt4B,GAAlB,IAAArU,EAAAlB,MAKEuV,EAAKA,GAAUvV,KAAK2qB,YAAYgB,KAAKC,YAGnB,cAAPrW,IACTA,EAAK,IAIP,IAAM0T,EAAiBjpB,KAAK2qB,YAAYgB,KAAKC,UAEvCkoB,EAAwB9zC,KAAK+zC,mBAE7B9hB,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAC1D0mB,EAAa8rB,GAAsB7qC,YAAYmrC,GACrD,IAAKpsB,EAEH,MAAM,IAAIhX,MAAM1Q,KAAK4M,gBAAmC,mBAG1D,OADgB8a,EAAWmmB,WAAW7tC,KAAK0nB,WAAYnS,GACxCqL,KACbG,EAAAA,IACE,WACE7f,EAAK6nB,wBAAwBK,SAAS,UAAU,GAChDloB,EAAK6nB,wBAAwBK,SAAS,mBAAoBH,GAC1D/nB,EAAKH,eAAeQ,iBAAiB0wB,IAEvC,SAAA9mB,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAK+yC,aAAavlC,UAAUxN,EAAK0L,gBAAgB3I,iBAAkBkH,OASpEsoC,GAAArzC,UAAAuuC,SAAP,SAAgBp5B,GAAhB,IAAArU,EAAAlB,KAME,KAHAuV,EAAKA,GAAUvV,KAAK2qB,YAAYgB,KAAKC,WAMnC,OADA5rB,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAqC,oBAAG,CAAEiH,WAAW,IAC9EuB,EAAAA,QAIT,IAAM6T,EAAiBjpB,KAAK2qB,YAAYgB,KAAKC,UAEvCkoB,EAAgB9zC,KAAK+zC,mBAErB9hB,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAGhEhB,KAAK20C,cAAcp/B,GACnB,IAAMs/B,EAAe70C,KAAK80C,gBAEpBptB,EAAa8rB,GAAsB7qC,YAAYmrC,GACrD,IAAKpsB,EACH,MAAM,IAAIhX,MAAM1Q,KAAK4M,gBAAmC,mBAE1D,IAAMmoC,EAAYrtB,EAAWinB,SAAS3uC,KAAK0nB,WAAYnS,GAiBvD,OAhBgBs/B,EAAaj0B,KAC3BI,EAAAA,UAAU,WACR,OAAO+zB,IAETh0B,EAAAA,IACE,WACE7f,EAAK6nB,wBAAwBK,SAAS,UAAU,GAChDloB,EAAK6nB,wBAAwBK,SAAS,mBAAoBH,GAC1D/nB,EAAKH,eAAeQ,iBAAiB0wB,IAEvC,SAAA9mB,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAK+yC,aAAavlC,UAAUxN,EAAK0L,gBAAgB5I,eAAgBmH,OASlEsoC,GAAArzC,UAAA00B,KAAP,WAAA,IAAA5zB,EAAAlB,KACMA,KAAKmoC,aACPnoC,KAAKmoC,YAAYv9B,KAAK,CAAEw9B,YAAa,SAEvC,IAAMnW,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAchE,OAbchB,KAAK0nB,WAAW8gB,eACR5nB,KACpBG,EAAAA,IACE,WACE7f,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAKuS,cAAcK,QAAQ5S,EAAK0L,gBAAgBhI,YAAa,CAAEiP,WAAW,KAE5E,SAAA1I,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAK+yC,aAAavlC,UAAUxN,EAAK0L,gBAAgBvI,gBAAiB8G,OASnEsoC,GAAArzC,UAAAqoC,OAAP,SAAclzB,EAAYwf,GAA1B,IAAA7zB,EAAAlB,KAME,KAHAuV,EAAKA,GAAUvV,KAAK2qB,YAAYgB,KAAKC,WAKnC,OADA5rB,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAqC,oBAAG,CAAEiH,WAAW,IAC9EuB,EAAAA,QAIT,IAAMq2B,EAAgBzrC,KAAK0nB,WAAWoE,iBAAiBsR,SACjD0W,EAAgB9zC,KAAK+zC,mBACrBC,EAAevG,GAAgB9kC,YAAYmrC,GACjD,OAAqB,OAAjBE,EACK5+B,EAAAA,SAEoE,IAAzE4+B,EAAa/H,cAAcR,EAAezrC,KAAKwrC,iBAAkBj2B,IACnEvV,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAkC,iBAAG,CAAEiH,WAAW,IAC3EuB,EAAAA,SAIOpV,KAAK0V,eAAe3E,SAAS/Q,KAAK4M,gBAAgB5H,iBACnD4b,KACbC,EAAAA,UAAU,SAAA3d,GACR,IAAKA,EACH,OAAOkS,EAAAA,QAIT,IAAM4/B,EAAahB,EAAatH,cAAcjB,EAAevqC,EAAKsqC,iBAAkBj2B,GAG9E0c,EAAiB/wB,EAAKH,eAAeC,qBAAqB,KAEhE,OADgBE,EAAK8Z,aAAa0M,WAAWmhB,WAAWtzB,GACzCqL,KACbG,EAAAA,IAAI,WAGFizB,EAAapI,aAAa1qC,EAAKypB,YAAazpB,EAAKsqC,iBAAkBwJ,GAEnE9zC,EAAKH,eAAeQ,iBAAiB0wB,GACjC8C,GAAcA,EAAWrO,OAC3BxlB,EAAKuS,cAAcK,QAAQihB,EAAY,CAAElhB,WAAW,IAEpD3S,EAAKuS,cAAcK,QAAQ5S,EAAK0L,gBAAgB9H,cAAe,CAAE+O,WAAW,KAI9E,SAAA1I,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAK+yC,aAAavlC,UAAUxN,EAAK0L,gBAAgBxI,aAAc+G,UAWpEsoC,GAAArzC,UAAAqG,OAAP,WAAA,IAAAvF,EAAAlB,KAIQ62B,EAAgB72B,KAAK0nB,WAE3B,OADuB8N,EAAAA,kBAAkBC,kBAAkBoB,GAKpC72B,KAAK0V,eAAe3E,SAAS/Q,KAAK4M,gBAAmC,mBAAGgU,KAC7FI,EAAAA,UAAU,SAAC2U,GACT,OAAiB,IAAbA,EACKrY,EAAAA,MAEFpc,EAAKmoC,aARPrpC,KAAKqpC,WAkBRoK,GAAArzC,UAAAi0C,oBAAR,SAA4BxN,GAC1B,IAAMyI,EAAkB,CAAEnY,UAAW,EAAG+H,SAAU,GAC5C+V,EAAuBj1C,KAAKgb,aAAaxF,OAAOpN,IAAI,wBAC1D,GAAKy+B,GAWH,GAAIoO,EAAsB,CACxB,IAAMC,EAAel1C,KAAKgb,aAAaxF,OAAOpN,IAAI,iBAAmB,EACjE+sC,EAAgBn1C,KAAKgb,aAAaxF,OAAOpN,IAAI,SAASy+B,EAAQ,gBAC7DsO,IACHn1C,KAAKgb,aAAaxF,OAAOlN,IAAI,SAASu+B,EAAQ,eAAgB,GAC9DsO,EAAgB,GAElB7F,EAAWnY,UAAYge,EACvB7F,EAAWpQ,SAAWgW,OAnBX,CAEb,IAAMhW,EAAWl/B,KAAK0nB,WAAWoE,iBAAiBoT,UAAY,EACxD/H,EAAYn3B,KAAK0nB,WAAWoE,iBAAiBqL,WAAa,EAE/C,IAAb+H,IACFoQ,EAAWpQ,SAAWA,EACtBoQ,EAAWnY,UAAYA,GAe3B,OAAOmY,GAMDmE,GAAArzC,UAAAipC,QAAR,WAAA,IAAAnoC,EAAAlB,KACQiyB,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAEhE,OADgBhB,KAAK0nB,WAAWJ,gBACjB1G,KACbI,EAAAA,UAAU,WACR,IAAMo0B,EAAQl0C,EAAK6nB,wBAAwBG,SAAS,UAC9CD,EAAiB/nB,EAAK6nB,wBAAwBG,SAAS,oBACvD0C,EAAY1qB,EAAKypB,YAAYgB,KAAKC,UAExC,OAAc,IAAVwpB,GACFl0C,EAAKwmB,WAAWoE,iBAAiBupB,iBAAiBzpB,GAGlD1qB,EAAK6nB,wBAAwBK,SAAS,UAAU,GAC5CH,GACF7nB,WAAW,WACTF,EAAKypB,YAAYgB,KAAKoP,aAAa9R,GAAgB,GAAM,IACxD,GAEE1I,EAAAA,GAAG,OAEHrf,EAAKwmB,WAAW+M,WAAW7I,KAGtC7K,EAAAA,IACE,WACE7f,EAAKH,eAAeQ,iBAAiB0wB,IAEvC,SAAC9mB,GACCjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAK+yC,aAAavlC,UAAUxN,EAAK0L,gBAAgBpI,aAAc2G,OAShEsoC,GAAArzC,UAAA6rC,cAAP,SAAqB12B,EAAYk2B,GAE/B,OAA6E,IADxDzrC,KAAKs1C,kBACTrJ,cAAcR,EAAezrC,KAAKwrC,iBAAkBj2B,IAShEk+B,GAAArzC,UAAAm1C,2BAAP,SAAkCC,EAAoB/J,GAGpD,OAFqBzrC,KAAKs1C,kBACM5I,cAAcjB,EAAezrC,KAAKwrC,iBAAkBgK,IAO/E/B,GAAArzC,UAAAq1C,yBAAP,SAAgCT,GACTh1C,KAAKs1C,kBACb1J,aAAa5rC,KAAK2qB,YAAa3qB,KAAKwrC,iBAAkBwJ,IAM9DvB,GAAArzC,UAAA26B,aAAP,SAAoBxlB,GAClBA,EAAKA,GAAMvV,KAAKgb,aAAagO,6BAA6BT,QAA+B,uBAAKvoB,KAAK2qB,YAAYgB,KAAKwR,YAAYoX,gBAChIv0C,KAAKgb,aAAa2P,YAAYgB,KAAKoP,aAAaxlB,GAAI,GAAM,GAAM,IAK3Dk+B,GAAArzC,UAAAs1C,eAAP,WACE,IAAM5B,EAAgB9zC,KAAK+zC,mBACrBC,EAAevG,GAAgB9kC,YAAYmrC,GAC5B,OAAjBE,GACFA,EAAazI,oBAAoBvrC,KAAK2qB,YAAa3qB,KAAKwrC,mBAMpDiI,GAAArzC,UAAAk1C,gBAAR,WACE,IAAMxB,EAAgB9zC,KAAK+zC,mBACrBC,EAAevG,GAAgB9kC,YAAYmrC,GACjD,GAAqB,OAAjBE,EACF,MAAM,IAAItjC,MAAM,MAAMojC,EAAa,SAErC,OAAOE,GASDP,GAAArzC,UAAA+zC,oBAAR,SAA4Bld,EAAiB2S,GAG3C5pC,KAAK+oB,wBAAwBK,SAAS,qBAAqB,GAC3DppB,KAAK+oB,wBAAwBK,SAAS,wBAAyB6N,GAC/Dj3B,KAAK+oB,wBAAwBK,SAAS,sBAAuBwgB,IAOvD6J,GAAArzC,UAAA00C,cAAR,WAEE,IAAsB,IADA90C,KAAK+oB,wBAAwBG,SAAS,qBAM5D,OAAO3I,EAAAA,GAAG,IAJR,IAAM0W,EAAUj3B,KAAK+oB,wBAAwBG,SAAS,yBAChD0gB,EAAQ5pC,KAAK+oB,wBAAwBG,SAAS,uBACpD,OAAOlpB,KAAKk0C,YAAYjd,EAAS2S,IAK7B6J,GAAArzC,UAAA2zC,iBAAR,WACE,IACM4B,EADY3C,EAAAA,kBAAkBC,aAAajzC,KAAK0nB,WAAWwrB,YACrBlzC,KAAKwrC,kBAC7CsI,EAAgB,OAIpB,GAHI6B,EAA0B/zC,eAAe,kBAAkE,MAA9C+zC,EAAyC,gBACxG7B,EAAgB6B,EAAyC,eAEtC,MAAjB7B,GAAyBA,EAActxC,OAAS,EAElD,MAAM,IAAIkO,MAAM1Q,KAAK4M,gBAA0C,0BAEjE,OAAOknC,GAKTrrC,OAAAC,eAAY+qC,GAAArzC,UAAA,cAAW,KAAvB,WACE,GAAIJ,KAAKgb,aAAc,CACrB,IAAMoF,EAAapgB,KAAKgb,aAAa8b,qBAAuB,KAC5D,GAAI1W,EACF,OAAOA,EAAW+nB,aAAe,KAGrC,OAAO,2DAlmBVpoC,EAAAA,uDAlBgBsiB,EAAAA,oBAMRvR,UAHA3Q,SACAoT,UAGAtD,UAFAzH,EAAe7F,WAAA,CAAA,CAAAC,KAmCnBC,EAAAA,cA8kBL4wC,IAplBE,SAAAA,GACEz4B,EACQtF,EACA3U,EACA0S,EACAwgC,EACYrnC,GANtB,IAAA1L,EAQE2L,GAAAxC,KAAArK,KAAMgb,IAAahb,YANXkB,EAAAwU,eAAAA,EACAxU,EAAAH,eAAAA,EACAG,EAAAuS,cAAAA,EACAvS,EAAA+yC,aAAAA,GACY/yC,EAAA0L,gBAAAA,KAIlB1L,EAAK0L,gBAAkBpE,EAAgBG,yBC9BlCitC,GAAAx1C,UAAA+B,OAAP,SAAcglB,EAAqBE,GAC/B,IACI4P,EADcj3B,KACCkiB,SADDliB,KACiBkiB,QAAQgV,YADzBl3B,KAC4CkiB,QAAQgV,WAAW9gB,MAAQ,GAOzF,MANyB,iBAArB,IACA6gB,EAAUrlB,KAAKC,MAAMolB,IAGzBj3B,KAAK6nB,UAAU7M,aAAa0M,WAAWoE,iBAAiBqL,UAAY,EACpEn3B,KAAK6nB,UAAU7M,aAAa0M,WAAW0P,uBAAuBC,cAAcr3B,KAAK6nB,UAAUkI,YAAakH,GACjGj3B,KAAKi2B,eAAehM,QAAQ9C,EAAaE,yBAtBvDtnB,EAAAA,uDAJQ+qB,EAAAA,iBACAmO,UACAlP,MA0BT6rB,IAtBI,SAAAA,GACY/tB,EACAmiB,EACA/T,GAFAj2B,KAAA6nB,UAAAA,EACA7nB,KAAAgqC,uBAAAA,EACAhqC,KAAAi2B,eAAAA,ECIhB,IAAA4f,IA0CSA,GAAAz1C,UAAAk0B,KAAP,SAAY/e,GAAZ,IAAArU,EAAAlB,KAGE,KADAuV,EAAKA,GAAMvV,KAAK2qB,YAAYgB,KAAKC,WAE/B,OAAOtO,EAAAA,MAGT,IAAM2U,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAchE,OAbchB,KAAK0nB,WAAWouB,eAAevgC,GACvBqL,KACpBG,EAAAA,IACE,WACE7f,EAAKH,eAAeQ,iBAAiB0wB,GACrCpJ,GAAcW,aAAatoB,EAAK8Z,aAAczF,IAEhD,SAACpK,GACCjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAK+yC,aAAavlC,UAAUxN,EAAK0L,gBAAgBnI,aAAc0G,4BA3DxEpL,EAAAA,uDAb6BsiB,EAAAA,gBA8E9BwzB,IAlCE,SAAAA,GAAoB76B,GAAAhb,KAAAgb,aAAAA,EAClBhb,KAAK0nB,WAAa1nB,KAAKgb,aAAa0M,WACpC1nB,KAAK2qB,YAAc3qB,KAAKgb,aAAa2P,YACrC3qB,KAAKe,eAAiBf,KAAKgb,aAAaoH,SAASha,IAAwBjI,EAAoB,MAC7FH,KAAK4M,gBAAkB5M,KAAKgb,aAAaoH,SAASha,IAAqBI,EAAiB,MACxFxI,KAAKi0C,aAAej0C,KAAKgb,aAAaoH,SAASha,IAAsB6H,GAAkB,MCjC3F,IAAA8lC,IAiDSA,GAAA31C,UAAAyoC,WAAP,SAAkBtzB,EAAYmzB,EAAiBsN,EAAqCjhB,QAArC,IAAAihB,IAAAA,GAAA,GAC7C,IAAMtiC,EAAMqhB,GAA0B,GACtC,OAAO/0B,KAAKi2C,gBAAgB1gC,EAAImzB,EAAQsN,EAAqBtiC,IAGxDqiC,GAAA31C,UAAA6oC,YAAP,SAAmBF,GACjB,MAAM,IAAIr4B,MAAM,oBAMXqlC,GAAA31C,UAAA81C,kBAAP,SAAyB3gC,EAAYwf,GACnC,IAAMrhB,EAAMqhB,GAA0B,GACtC,OAAO/0B,KAAKi2C,gBAAgB1gC,GAAI,GAAM,EAAM7B,IAMvCqiC,GAAA31C,UAAA+1C,yBAAP,SAAgC5gC,EAAYwf,GAA5C,IAAA7zB,EAAAlB,KACQ0T,EAAMqhB,GAA0B,GAEtC,IAAoC,IAAhC/0B,KAAKo2C,iBAAiB,CAAC7gC,IAEzB,OADAvV,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgBnH,oBAAqB,CAAEoO,WAAW,IAC3EyJ,EAAAA,MAIT,IAAMmuB,EAAgBzrC,KAAK62B,cAAc/K,iBAAiBsR,SAC1D,IAA8D,IAA1Dp9B,KAAKq2C,gBAAgBpK,cAAc12B,EAAIk2B,GAEzC,OADAzrC,KAAK0V,eAAetI,QAAQpN,KAAK4M,gBAAgBhH,kBAC1C0X,EAAAA,MAIT,IAAMsrB,EAAU5oC,KAAKi2C,gBAAgB1gC,GAAI,GAAM,EAAM7B,GAC/CshC,EAAah1C,KAAKq2C,gBAAgBd,2BAA2BhgC,EAAIk2B,GAOvE,OANgB7C,EAAQhoB,KACtBG,EAAAA,IAAI,WACF7f,EAAKm1C,gBAAgBZ,yBAAyBT,OAW7Ce,GAAA31C,UAAAk2C,mBAAP,WACE,MAAM,IAAI5lC,MAAM,oBAMXqlC,GAAA31C,UAAA8oC,qBAAP,SAA4BC,EAAqBC,GAC/C,GAAKppC,KAAKgb,cAAiBmuB,GAAgBC,EAI3C,OADuBppC,KAAKgb,aAAaoH,SAASha,IAAoB2hB,GAAgB,MAChEE,QAAQkf,EAAaC,IAarC2M,GAAA31C,UAAA61C,gBAAR,SAAwB1gC,EAAYmzB,EAAiBsN,EAA8BjhB,GAAnF,IAAA7zB,EAAAlB,KAGE,IAAoC,IAAhCA,KAAKo2C,iBAAiB,CAAC7gC,IAEzB,OADAvV,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgBnH,oBAAqB,CAAEoO,WAAW,IAC3EyJ,EAAAA,MAGT,IAAMi5B,EAAWv2C,KAAKw2C,kBAChB5N,EAAUoN,GAAuBtN,EACrC1oC,KAAK62B,cAAc4f,wBAAwBlhC,GAC3CvV,KAAK62B,cAAcgS,WAAWtzB,EAAImzB,GAoCpC,OAlCgB6N,EAAS31B,KACvBC,EAAAA,UAAU,SAAC61B,GACT,IAAiB,IAAbA,EACF,OAAOp5B,EAAAA,MAET,IAAM2U,EAAiB/wB,EAAKH,eAAeC,qBAAqB,KAChE,OAAO4nC,EAAQhoB,KACbG,EAAAA,IACE,WACE7f,EAAKH,eAAeQ,iBAAiB0wB,GACjC8C,GAAcA,EAAWrO,OAC3BxlB,EAAKuS,cAAcK,QAAQihB,EAAY,CAAElhB,WAAW,IAEpD3S,EAAKuS,cAAcK,QAAQ5S,EAAK0L,gBAAgB9H,cAAe,CAAE+O,WAAW,KAIhF,SAAC1I,GACCjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAK+yC,aAAavlC,UAAUxN,EAAK0L,gBAAgBxI,aAAc+G,KAGnE6V,EAAAA,UAAU,WAER,OADcg1B,GAAuBtN,EAI5BnoB,EAAAA,GAAG,MAFHjD,EAAAA,aAeXy4B,GAAA31C,UAAAg2C,iBAAR,SAAyBrN,GACvB,QAAKA,GAMsB,IAHPA,EAAI5mC,OAAO,SAACoT,GAC9B,QAASA,IAEK/S,QAUVuzC,GAAA31C,UAAAo2C,gBAAR,WAWE,OAViBx2C,KAAK0V,eAAe3E,SAAS/Q,KAAK4M,gBAAgB5H,iBAC1C4b,KACvBC,EAAAA,UAAU,SAAC61B,GACT,OAAiB,IAAbA,EACKp5B,EAAAA,MAEAiD,EAAAA,IAAG,4BA1MnBxgB,EAAAA,uDAdQsiB,EAAAA,gBA8NT0zB,IAvLE,SAAAA,GAAoB/6B,GAAAhb,KAAAgb,aAAAA,EAClBhb,KAAKyT,cAAgBzT,KAAKgb,aAAaoH,SAASha,IAAuBmL,GAAmB,MAC1FvT,KAAK0V,eAAiB1V,KAAKgb,aAAaoH,SAASha,IAAwB0I,GAAoB,MAC7F9Q,KAAKi0C,aAAej0C,KAAKgb,aAAaoH,SAASha,IAAsB6H,GAAkB,MACvFjQ,KAAKe,eAAiBf,KAAKgb,aAAaoH,SAASha,IAAwBjI,EAAoB,MAE7FH,KAAK4M,gBAAkB5M,KAAKgb,aAAaoH,SAASha,IAAqBI,EAAiB,MACxFxI,KAAKi2B,eAAiBj2B,KAAKgb,aAAaoH,SAASha,IAAoB2hB,GAAgB,MACrF/pB,KAAK22C,gBAAkB32C,KAAKgb,aAAaoH,SAASha,IAAqBk/B,GAAiB,MACxFtnC,KAAKq2C,gBAAkBr2C,KAAKgb,aAAaoH,SAASha,IAAqBqrC,GAAiB,MACxFzzC,KAAK62B,cAAgB72B,KAAKgb,aAAa0M,WCxC3C,IAAAkvB,yBAAC72C,EAAAA,uDAXQsiB,EAAAA,gBAqCTu0B,IAPE,SAAAA,GAAoB57B,GAAAhb,KAAAgb,aAAAA,EAClBhb,KAAKyT,cAAgBzT,KAAKgb,aAAaoH,SAASha,IAAuBmL,GAAmB,MAC1FvT,KAAK0V,eAAiB1V,KAAKgb,aAAaoH,SAASha,IAAwB0I,GAAoB,MAC7F9Q,KAAKe,eAAiBf,KAAKgb,aAAaoH,SAASha,IAAwBjI,EAAoB,MAC7FH,KAAK4M,gBAAkB5M,KAAKgb,aAAaoH,SAASha,IAAqBI,EAAiB,MACxFxI,KAAK62B,cAAgB72B,KAAKgb,aAAa0M,WCjB3C,IAAA7a,GAAAgqC,IACiC9pC,EAAAA,GADjCF,GACiCw+B,IAK/B5iC,OAAAC,eAAYmuC,GAAAz2C,UAAA,mBAAgB,KAA5B,WACE,OAAOJ,KAAK+oB,wBAAwBG,SAAS,qDAE/CzgB,OAAAC,eAAYmuC,GAAAz2C,UAAA,qBAAkB,KAA9B,WACE,OAAOJ,KAAKwrC,iBAAiB5xB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAAGknB,uCAEzDnoB,OAAAC,eAAYmuC,GAAAz2C,UAAA,0BAAuB,KAAnC,WACE,OAAOJ,KAAKgb,aAAagO,8DAqB3BvgB,OAAAC,eAAYmuC,GAAAz2C,UAAA,cAAW,KAAvB,WACE,GAAIJ,KAAK6nB,WAAa7nB,KAAK6nB,UAAU7M,aAAc,CACjD,IAAMoF,EAAapgB,KAAK6nB,UAAU7M,aAAa8b,qBAAuB,KACtE,GAAI1W,EACF,OAAOA,EAAW+nB,aAAe,KAGrC,OAAO,sCAMF0O,GAAAz2C,UAAAyuC,cAAP,WAAA,IAAA3tC,EAAAlB,KACMA,KAAKmoC,aACPnoC,KAAKmoC,YAAYv9B,KAAK,CAAEw9B,YAAa,kBAEvC,IAAI5yB,EAAiDxV,KAAK0Y,YAEpDo7B,EAAwB9zC,KAAK+zC,mBAE7B9hB,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAC1D0mB,EAAa8rB,GAAsB7qC,YAAYmrC,GACrD,IAAKpsB,EAEH,MAAM,IAAIhX,MAAM1Q,KAAK4M,gBAAmC,mBAG1D,OADgB8a,EAAWmnB,cAAc7uC,KAAK0nB,WAAYlS,EAAO0qB,UAAW1qB,EAAOuzB,KACpEnoB,KACbG,EAAAA,IACE,WACE7f,EAAKH,eAAeQ,iBAAiB0wB,IAEvC,SAAA9mB,GACEjK,EAAK+yC,aAAavlC,UAAUxN,EAAK0L,gBAAgBzI,oBAAqBgH,OASvE0rC,GAAAz2C,UAAA8uC,YAAP,WAAA,IAAAhuC,EAAAlB,KACMA,KAAKmoC,aACPnoC,KAAKmoC,YAAYv9B,KAAK,CAAEw9B,YAAa,gBAEvC,IAAI5yB,EAAiDxV,KAAK0Y,YAEpDo7B,EAAgB9zC,KAAK+zC,mBAG3B,KADoB/zC,KAAKgb,cAAgBhb,KAAKgb,aAAa2P,aAAe3qB,KAAKgb,aAAa2P,YAAYM,WAC5E,UAG1B,OADAjrB,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAqC,oBAAG,CAAEiH,WAAW,IAClFyJ,EAAAA,MAGT,IAAM2U,EAAiBjyB,KAAKe,eAAeC,qBAAqB,KAE1D0mB,EAAa8rB,GAAsB7qC,YAAYmrC,GACrD,IAAKpsB,EACH,MAAM,IAAIhX,MAAM1Q,KAAK4M,gBAAmC,mBAc1D,OAZqB8a,EAAWwnB,YAAYlvC,KAAK0nB,WAAYlS,EAAO0qB,UAAW1qB,EAAOuzB,KACzDnoB,KAC3BG,EAAAA,IACE,WACE7f,EAAKH,eAAeQ,iBAAiB0wB,IAEvC,SAAA9mB,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAK+yC,aAAavlC,UAAUxN,EAAK0L,gBAAgB1I,kBAAmBiH,OAUrE0rC,GAAAz2C,UAAAqoC,OAAP,SAAclzB,EAAYwf,GAA1B,IAAA7zB,EAAAlB,KAEE,IAAKuV,EAEH,OADAvV,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAqC,oBAAG,CAAEiH,WAAW,IAClFyJ,EAAAA,MAGT,IAAMw2B,EAAgB9zC,KAAK+zC,mBAErBtI,EAAgBzrC,KAAKgb,aAAa2P,YAAYM,UAAUmS,SACxD1N,EAAc1vB,KAAKgb,aAAa2P,YAAYM,UAC5C+oB,EAAevG,GAAgB9kC,YAAYmrC,GACjD,OAAqB,OAAjBE,EACK12B,EAAAA,OAEsE,IAA3E02B,EAAa/H,cAAcR,EAAezrC,KAAK82C,mBAAoBvhC,IACrEvV,KAAK0V,eAAetI,QAAQpN,KAAK4M,gBAAkC,kBAC5D0Q,EAAAA,OAGOtd,KAAK0V,eAAe3E,SAAS/Q,KAAK4M,gBAAgB5H,iBACnD4b,KACbC,EAAAA,UAAU,SAAA3d,GACR,IAAKA,EACH,OAAOoa,EAAAA,MAGT,IAAM03B,EAAahB,EAAatH,cAAcjB,EAAevqC,EAAK41C,mBAAoBvhC,GAGhF0c,EAAiB/wB,EAAKH,eAAeP,OACrC2a,EAAOja,EAAKizB,UAElB,OADgBjzB,EAAK8Z,aAAa0M,WAAW8iB,aAAarvB,EAAM5F,GACjDqL,KACbG,EAAAA,IAAI,WAEFizB,EAAanI,wBAAwBnc,EAAaxuB,EAAK41C,mBAAoB9B,GAC3E9zC,EAAKH,eAAeQ,iBAAiB0wB,GACjC8C,GAAcA,EAAWrO,OAC3BxlB,EAAKiU,kBAAkBrB,QAAQihB,EAAY,CAAElhB,WAAW,IAExD3S,EAAKiU,kBAAkBrB,QAAQ5S,EAAK0L,gBAAgB9H,cAAe,CAAE+O,WAAW,KAIlF,SAAA1I,GACEjK,EAAKH,eAAeQ,iBAAiB0wB,GACrC/wB,EAAK+yC,aAAavlC,UAAUxN,EAAK0L,gBAAgBxI,aAAc+G,UAQnE0rC,GAAAz2C,UAAA2zC,iBAAR,WACE,IACID,EADa9zC,KAAK0nB,WAAW+D,eAAe0U,kBAAkBngC,KAAKwrC,iBAAiB5xB,MAAM,MACjEmoB,aAA4B,eAAK,KAC9D,GAAqB,MAAjB+R,GAAyBA,EAActxC,OAAS,EAElD,MAAM,IAAIkO,MAAM1Q,KAAK4M,gBAA0C,0BAEjE,OAAOknC,GASD+C,GAAAz2C,UAAAsY,UAAR,WACE,IAAIwnB,EAAYlgC,KAAK6nB,UAAUkI,YAAY+X,OAAO,GAAGluB,MAAM,KACvDmvB,EAAM,GACNgO,EAAgB,GACd9iB,EAAMj0B,KAAK6nB,UAAU8C,YAAYgB,KAAKC,UAC5Cmd,EAAIznC,KAAK2yB,GACT,IAAI8B,EAAe/1B,KAAK6nB,UAAU8C,YAWlC,OAVuB,EAAnBuV,EAAU19B,QACZ09B,EAAUlgB,IAAI,SAAA2Q,IACZoF,EAAUA,EAAQpF,KACHoF,EAAQnK,WACrBmd,EAAIznC,KAAKy0B,EAAQnK,WAGnB+E,EAAWomB,EAAcz1C,KAAKqvB,EAAS6c,UAAU,EAAG7c,EAASnuB,OAAS,IAAMu0C,EAAcz1C,KAAKqvB,KAG5F,CAAEuP,UAAW6W,EAAehO,IAAKA,IAMlC8N,GAAAz2C,UAAA+zB,QAAR,WACE,IAAMpE,EAAc/vB,KAAK6nB,UAAUkI,YAE/B5U,EAAO,IADCnb,KAAK6nB,UAAU8C,YAAYgB,KAAKC,UAGtCiK,EAAW9F,EAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IACpD,GAAsB,EAAlBmsB,EAASrzB,OAGX,IADA,IAAIuzB,EAAe/1B,KAAK6nB,UAAU8C,YACzB5S,EAAQ,EAAGA,EAAQ8d,EAASrzB,OAAS,EAAGuV,IAAS,CACxD,IAAM+d,EAAUD,EAAS9d,GAEzB,KADAge,EAAUA,EAAQD,MACDC,EAAQnK,UACvB,MAAMlb,MAAM,iBAAiBqlB,EAAO,qBAEtC5a,GAAQ,IAAI2a,EAAO,IAAIC,EAAQnK,UAKnC,OAFAzQ,GAAQ,IAAM0a,EAASA,EAASrzB,OAAS,yBApO5CzC,EAAAA,uDAfqBsiB,EAAAA,oBAAcyI,EAAAA,iBAE3Bha,UACA3Q,SACA8P,UACAsD,UACA/K,EAAe7F,WAAA,CAAA,CAAAC,KAmCnBC,EAAAA,cA8MLg0C,IArNE,SAAAA,GACE77B,EACQ6M,EACAnS,EACA3U,EACAkzC,EACA9+B,EACYvI,GAPtB,IAAA1L,EASE2L,GAAAxC,KAAArK,KAAMgb,IAAahb,YAPXkB,EAAA2mB,UAAAA,EACA3mB,EAAAwU,eAAAA,EACAxU,EAAAH,eAAAA,EACAG,EAAA+yC,aAAAA,EACA/yC,EAAAiU,kBAAAA,GACYjU,EAAA0L,gBAAAA,KAIlB1L,EAAK0L,gBAAkBpE,EAAgBG,iBC/B7C,IAAAquC,IAsBSA,GAAA52C,UAAA62C,aAAP,SACEC,EAAmBC,EAAoBC,EAAmBrxB,EAAmB5Z,GAE7E,OAAOnM,KAAKq3C,kBAAkBH,EAAWC,EAAYC,EAAarxB,EAAa5Z,GAAM,IAUhF6qC,GAAA52C,UAAAk3C,cAAP,SACEJ,EAAmBC,EAAoBC,EAAmBrxB,EAAmB5Z,GAM7E,OAAOnM,KAAKq3C,kBAAkBH,EAAWC,EAAYC,EAAarxB,EAAa5Z,GAAM,IAMhF6qC,GAAA52C,UAAAm3C,iBAAP,SAAwBxxB,GACK,iBAAhBA,IACTA,EAAcnU,KAAKC,MAAMkU,IAG3B,IAAIyxB,EAAoB,GAKxB,OAJA/uC,OAAOM,KAAKgd,GAAa3jB,QAAQ,SAACoV,GAChCggC,GAAwBhgC,EAAG,IAAIuO,EAAYvO,KAGtCggC,GAMFR,GAAA52C,UAAAq3C,eAAP,WAEE,OADsBz3C,KAAK0nB,WACNyC,aAOf6sB,GAAA52C,UAAAi3C,kBAAR,SACEH,EAAmBC,EAAoBC,EAAmBrxB,EAAmB5Z,EAAYurC,GAD3F,IAAAx2C,EAAAlB,KAGQiO,EAAU,GACVkc,EAAcnqB,KAAKy3C,iBAIrBE,EAHYxtB,EAAY4jB,QAGE,YAAYmJ,EAC1C,GAAInxB,GAA+B,KAAhBA,EAAoB,CACrC,IAAMyxB,EAAoBx3C,KAAKu3C,iBAAiBxxB,GAChD4xB,GAAiBH,EAoCnB,OA/BIrrC,GAAiB,KAATA,IACU,iBAATA,GAAqBA,EAAKqa,WAAW,MAAQra,EAAKsa,SAAS,OACpEta,EAAOyF,KAAKC,MAAM1F,IAEpB8B,EAAc,KAAI9B,GAIhBirC,GAA+B,KAAhBA,IACjBA,EAAcxlC,KAAKC,MAAMulC,IAGR,kBACfA,EAAY,gBAAkB,oBAEhCnpC,EAAiB,QAAI,IAAImgC,EAAAA,YAAYgJ,IAErCnpC,EAAiB,QAAI,IAAImgC,EAAAA,YAAY,CAAEC,eAAgB,qBAIzDruC,KAAKe,eAAeP,OASJ2pB,EADGutB,EAAiB,SAAW,WACPC,EAAeR,EAAY,KAAMlpC,GAC1D2S,KACbG,EAAAA,IACE,WACE7f,EAAKH,eAAeW,QAEtB,SAACyJ,GACCjK,EAAKH,eAAeW,OACpB,IAAMiP,EAAWgnC,EAAgBz2C,EAAK0L,gBAAiC,gBACvE1L,EAAKixB,iBAAiBzjB,UAAUiC,EAAUxF,4BAhInDpL,EAAAA,uDAdQ8xB,EAAAA,kBAGA1xB,SACA2Q,UACAyC,UACAtD,UACAzH,EAAe7F,WAAA,CAAA,CAAAC,KAmBnBC,EAAAA,cAyHLm0C,IA/HE,SAAAA,GACUtvB,EACA3mB,EACAuP,EACAmD,EACA0e,EACYvlB,GALZ5M,KAAA0nB,WAAAA,EACA1nB,KAAAe,eAAAA,EACAf,KAAAsQ,WAAAA,EACAtQ,KAAAyT,cAAAA,EACAzT,KAAAmyB,iBAAAA,EACYnyB,KAAA4M,gBAAAA,EAEf5M,KAAK4M,kBACR5M,KAAK4M,gBAAkBpE,EAAgBG,eCZ7C,IAAAivC,IAkCEA,GAAAx3C,UAAAy3C,6BAAA,SAA6BC,GAC3B,OAAO93C,KAAK+3C,cAAcD,IAS5BF,GAAAx3C,UAAA23C,cAAA,SAAcD,EAAmBE,GAAjC,IAAA92C,EAAAlB,KACE,IAAK83C,EAGH,OADA93C,KAAKyT,cAAcxG,KAAKjN,KAAK4M,gBAAgBhJ,sBAAuB,CAAEiQ,WAAW,IAC1EuB,EAAAA,QAGT,IAIMjJ,EAA4B,CAChC8hC,YAHkBjuC,KAAKi4C,gBAAgBR,iBAGdvJ,mBACzBgK,UAAWJ,EACXE,kBAAmBA,EAAoB,CACrCG,UAAWH,EAAkBI,qBAC3B,IAYN,OATAp4C,KAAKq4C,mBAAmB73C,OAGRR,KAAKi4C,gBAAgBhB,aAfnB,0BAe2C,MAAO,KAAM,KAAM9qC,GAMjEyU,KACbZ,EAAAA,IAAI,SAAC9c,GACH,GAAIA,GAAUA,EAAOurC,aAAevrC,EAAOurC,YAAY6J,iBAErD,OADmCp1C,EAAOurC,YAAY6J,mBAI1Dt3B,EAAAA,UAAU,SAAC1C,GACT,OAAIA,GAAYA,EAASi6B,WACnBr3C,EAAKwmB,WACWxmB,EAAKwmB,WAAW+M,WAAWqjB,GAC5Bl3B,KAAKG,EAAAA,IAAI,WACxB7f,EAAKm3C,mBAAmB32C,OAExB+nB,GAA0B3V,QAAQ5S,EAAKuS,cAAevS,EAAK0L,gBAAgB3H,iBACzE+a,EAAAA,IAAI,WACN,OAAO1B,MAGTpd,EAAKm3C,mBAAmB32C,OAExB+nB,GAA0B3V,QAAQ5S,EAAKuS,cAAevS,EAAK0L,gBAAgB3H,eACpEsb,EAAAA,GAAGjC,IAGLiC,EAAAA,GAAGjC,KAGd0C,EAAAA,UAAU,SAAC1C,GACT,OAAIA,EAASk6B,gBACJtnC,EAAAA,KAAK,IAAIG,QAAQ,SAACC,GACvBpQ,EAAKu3C,UAAUC,OAAOp6B,EAAU,SAACq6B,IAE1Br6B,EAASi6B,YAAcI,EAAoBP,oBAC9Cl3C,EAAK62C,cAAcD,EAAWa,GAAqB11C,UAAU,WAC3DqO,MAGFA,SAKCiP,EAAAA,GAAG,QAGdq4B,EAAAA,WACE,SAAAztC,GAGE,OAFAjK,EAAKm3C,mBAAmB32C,OAEjB6e,EAAAA,GAAGpV,OAaXysC,GAAAx3C,UAAAy4C,2BAAP,SAAkCf,EAAmBgB,EAAmB7qC,EAAe+pC,GAAvF,IAAA92C,EAAAlB,KACE,IAAK83C,EAEH,OADA93C,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgBhJ,sBAAuB,CAAEiQ,WAAW,IAC7EyJ,EAAAA,MAET,IAAKw7B,EAEH,OADA94C,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgB9I,kBAAmB,CAAE+P,WAAW,IACzEyJ,EAAAA,MAET,IACMrP,GAAgC,iBAArB,IACbA,EAAU2D,KAAKC,MAAM5D,IAEvB,MAAOhD,GACP,MAAM,IAAIyF,MAAM,kDAGlB,IAIMvE,EAA4B,CAChC8hC,YAHkBjuC,KAAKi4C,gBAAgBR,iBAGdvJ,mBACzB6K,eAAgB,CACdC,oBAAqB,CACnBF,UAAWA,EACX1H,OAAQ0G,EACRlnC,KAAM3C,GAAWA,EAAQ2C,MAAQ,GACjCqoC,UAAWhrC,GAAWA,EAAQgrC,WAAa,MAiBjD,OAbIjB,IACF7rC,EAAK4sC,eAAeC,oBAAoBZ,oBAAsBJ,EAAkBI,oBAChFjsC,EAAK4sC,eAAeC,oBAAoBE,qBAAuBlB,EAAwC,sBAEzGh4C,KAAKq4C,mBAAmB73C,OAGRR,KAAKi4C,gBAAgBhB,aAtBnB,6BAsB2C,MAAO,KAAM,KAAM9qC,GAMjEyU,KACbZ,EAAAA,IAAI,SAAC9c,GACH,GAAIA,GAAUA,EAAOurC,aAAevrC,EAAOurC,YAAY6J,iBAErD,OADqCp1C,EAAOurC,YAAY6J,mBAI5Dt3B,EAAAA,UAAU,SAAC1C,GACT,OAAIA,GAAYA,EAASi6B,WACnBr3C,EAAKwmB,WACWxmB,EAAKwmB,WAAW+M,WAAWqjB,GAC5Bl3B,KAAKG,EAAAA,IAAI,WACxB7f,EAAKm3C,mBAAmB32C,OAExB+nB,GAA0B3V,QAAQ5S,EAAKuS,cAAevS,EAAK0L,gBAAgB3H,iBACzE+a,EAAAA,IAAI,WACN,OAAO1B,MAGTpd,EAAKm3C,mBAAmB32C,OAExB+nB,GAA0B3V,QAAQ5S,EAAKuS,cAAevS,EAAK0L,gBAAgB3H,eACpEsb,EAAAA,GAAGjC,IAGLiC,EAAAA,GAAGjC,KAGd0C,EAAAA,UAAU,SAAC1C,GACT,OAAIA,EAASk6B,gBACJtnC,EAAAA,KAAK,IAAIG,QAAQ,SAACC,GACvBpQ,EAAKu3C,UAAUC,OAAOp6B,EAAU,SAACq6B,IAE1Br6B,EAASi6B,YAAcI,EAAoBP,oBAC9Cl3C,EAAK23C,2BAA2Bf,EAAWgB,EAAW7qC,EAAS0qC,GAAqB11C,UAAU,WAC5FqO,MAGFA,SAKCiP,EAAAA,GAAG,QAGdq4B,EAAAA,WACE,SAAAztC,GAGE,OAFAjK,EAAKm3C,mBAAmB32C,OAEjB6e,EAAAA,GAAGpV,OAYXysC,GAAAx3C,UAAA+4C,qCAAP,SAA4CrB,EAAmBgB,EAAmB7qC,EAAmBgrC,GACnG,QADgF,IAAAhrC,IAAAA,EAAA,KAC3E6pC,EAEH,OADA93C,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgBhJ,sBAAuB,CAAEiQ,WAAW,IAC7EyJ,EAAAA,MAET,IAAKw7B,EAEH,OADA94C,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgB9I,kBAAmB,CAAE+P,WAAW,IACzEyJ,EAAAA,MAEJrP,GAA8B,iBAAZA,IACrBA,EAAU,IAEZ,IAAMmrC,EAAOtvC,EAAA,CACXsnC,OAAQ0G,EACRgB,UAASA,GACN7qC,GAGL,GAAIgrC,EAAW,CACb,GAAIA,EAAUzyB,WAAW,MAAQyyB,EAAUxyB,SAAS,KAClD,IACEwyB,EAAYrnC,KAAKC,MAAMonC,GACvB,MAAAp/B,GACAo/B,EAAY,GAGhBG,EAAQH,UAAYA,EAEtB,OAAOj5C,KAAKq5C,sBAAwBr5C,KAAKq5C,qBAAqBC,aAAaF,IAUtExB,GAAAx3C,UAAAm5C,gCAAP,SAAuCT,EAAmBU,EAAeC,EAAoBxrC,EAAmBgrC,GAE9G,QAF2F,IAAAhrC,IAAAA,EAAA,KAEtF6qC,EAEH,OADA94C,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgB9I,kBAAmB,CAAE+P,WAAW,IACzEyJ,EAAAA,MAGT,IAAKk8B,EAEH,OADAx5C,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgBhJ,sBAAuB,CAAEiQ,WAAW,IAC7EyJ,EAAAA,MAGT,IAAKm8B,EAEH,OADAz5C,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgB/I,2BAA4B,CAAEgQ,WAAW,IAClFyJ,EAAAA,MAEJrP,GAA8B,iBAAZA,IACrBA,EAAU,IAEZ,IAAMmrC,EAAOtvC,EAAA,CACXsnC,OAAWoI,EAAK,IAAIC,EACpBX,UAASA,GACN7qC,GAGL,GAAIgrC,EAAW,CACb,GAAIA,EAAUzyB,WAAW,MAAQyyB,EAAUxyB,SAAS,KAClD,IACEwyB,EAAYrnC,KAAKC,MAAMonC,GACvB,MAAAp/B,GACAo/B,EAAY,GAGhBG,EAAQH,UAAYA,EAEtB,OAAOj5C,KAAKq5C,sBAAwBr5C,KAAKq5C,qBAAqBC,aAAaF,IAMtExB,GAAAx3C,UAAAs5C,cAAP,SAAqB5B,GAArB,IAAA52C,EAAAlB,KACE,IAAK83C,EAEH,OADA93C,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgBhJ,sBAAuB,CAAEiQ,WAAW,IAC7EuB,EAAAA,QAGT,IAIMjJ,EAAO,CACX8hC,YAHkBjuC,KAAKi4C,gBAAgBR,iBAGdvJ,mBACzBgK,UAAWJ,GAMb,OAHA93C,KAAKq4C,mBAAmB73C,OAERR,KAAKi4C,gBAAgBX,cAXnB,yBAW4C,MAAO,KAAM,KAAMnrC,GAClEyU,KACbI,EAAAA,UAAU,WACR,OAAI9f,EAAKwmB,WACWxmB,EAAKwmB,WAAW+M,WAAWqjB,GAC5Bl3B,KAAKG,EAAAA,IAAI,WACxB7f,EAAKm3C,mBAAmB32C,OAExB+nB,GAA0B3V,QAAQ5S,EAAKuS,cAAevS,EAAK0L,gBAAgBnJ,0BAG7EvC,EAAKm3C,mBAAmB32C,OAExB+nB,GAA0B3V,QAAQ5S,EAAKuS,cAAevS,EAAK0L,gBAAgBnJ,sBACpE8c,EAAAA,QAIXq4B,EAAAA,WAAW,SAAAztC,GAGT,OAFAjK,EAAKm3C,mBAAmB32C,OAEjB6e,EAAAA,GAAGpV,OAOTysC,GAAAx3C,UAAAu5C,aAAP,SAAoBpB,GAClB,OAAKA,EAIEv4C,KAAKq5C,sBAAwBr5C,KAAKq5C,qBAAqBM,aAAa,CAAEpB,WAAYA,KAHvFv4C,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgB7I,kBAAmB,CAAE8P,WAAW,IACzEyJ,EAAAA,QAQXs6B,GAAAx3C,UAAAw5C,YAAA,SAAYrB,GACV,GAAIv4C,KAAK65C,iBACP,OAAKtB,EAIEv4C,KAAK65C,iBAAiBC,cAAcvB,QAHzCv4C,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgBvG,oBAAqB,CAAEwN,WAAW,KAahF+jC,GAAAx3C,UAAA25C,mBAAR,SAA2BC,EAAcC,WACvC,GAAyB,iBAArB,GAAmCD,EACrC,GAAI13C,MAAMC,QAAQy3C,GAChB,IAAK,IAAI9vC,EAAI,EAAGA,EAAI8vC,EAAQx3C,OAAQ0H,IAClClK,KAAK+5C,mBAAmBC,EAAQ9vC,GAAI+vC,YAGtC,IAAkB,IAAA/R,EAAA/c,GAAA1iB,OAAOM,KAAKixC,IAAQE,EAAAhS,EAAAt9B,QAAAsvC,EAAApvC,KAAAovC,EAAAhS,EAAAt9B,OAAE,CAAnC,IAAM4M,EAAG0iC,EAAArvC,MAEZmvC,GADcC,EAAUziC,EAAIg2B,UAAU,EAAG,GAAG2M,cAAgB3iC,EAAIg2B,UAAU,EAAG,GAAG5jB,eAAiBpS,EAAIg2B,UAAU,IAC7FwM,EAAQxiC,GACE,iBAAjBwiC,EAAQxiC,IACjBxX,KAAK+5C,mBAAmBC,EAAQxiC,GAAMyiC,UAEhCD,EAAQxiC,wGAItB,OAAOwiC,wBA1ZVj6C,EAAAA,uDAdQI,SAJA62C,UACAlmC,UACAyC,UACA/K,EAAe7F,WAAA,CAAA,CAAAC,KA+BnBC,EAAAA,kBA7BIoN,UAIQoS,EAAAA,oBAHR+3B,EAAAA,iBAAgBz3C,WAAA,CAAA,CAAAC,KA+BpBC,EAAAA,kBA3BIw3C,EAAAA,mBAAkB13C,WAAA,CAAA,CAAAC,KA4BtBC,EAAAA,kBA/BIy3C,EAAAA,qBAAoB33C,WAAA,CAAA,CAAAC,KAgCxBC,EAAAA,cAuYL+0C,IAjZE,SAAAA,GACUS,EACAJ,EACA3nC,EACAmD,EACY7G,EACZulB,EACAnX,EACYy9B,EACAoB,EACAR,GATZr5C,KAAAq4C,mBAAAA,EACAr4C,KAAAi4C,gBAAAA,EACAj4C,KAAAsQ,WAAAA,EACAtQ,KAAAyT,cAAAA,EACYzT,KAAA4M,gBAAAA,EACZ5M,KAAAmyB,iBAAAA,EACAnyB,KAAAgb,aAAAA,EACYhb,KAAAy4C,UAAAA,EACAz4C,KAAA65C,iBAAAA,EACA75C,KAAAq5C,qBAAAA,EAEhBr5C,KAAKgb,eACPhb,KAAK0nB,WAAa1nB,KAAKgb,aAAa0M,WAC/B1nB,KAAKq5C,uBACRr5C,KAAKq5C,qBAAuBr5C,KAAKgb,aAAaoH,SAASha,IAAIkyC,EAAAA,qBAAsB,QCjCzF,IAAAC,IAuBSA,GAAAn6C,UAAAo6C,YAAP,SAAmBC,EAAkBC,GACnC,OAAKA,EAKE16C,KAAK26C,WAAWF,EAAU,CAACC,KAHhC16C,KAAK46C,YAAY56C,KAAK4M,gBAAgBhJ,uBAC/B0Z,EAAAA,QASJi9B,GAAAn6C,UAAAy6C,WAAP,SAAkBJ,EAAkB1R,GAClC,IAAKA,EAGH,OADA/oC,KAAK46C,YAAY56C,KAAK4M,gBAAgBhJ,uBAC/B0Z,EAAAA,MAET,IAAMw9B,EAAyB/R,EAAInvB,MAAM,KAAKzX,OAAO,SAAAgV,GAAQ,OAAAA,IAC7D,OAAOnX,KAAK26C,WAAWF,EAAUK,IAU5BP,GAAAn6C,UAAA26C,wBAAP,SAA+BN,EAAkB1R,EAAatlB,EAAcC,EAAcs3B,GACxF,IAAKjS,EAGH,OADA/oC,KAAK46C,YAAY56C,KAAK4M,gBAAgBhJ,uBAC/B0Z,EAAAA,MAET,IAAMw9B,EAAyB/R,EAAInvB,MAAM,KAAKzX,OAAO,SAAAgV,GAAQ,OAAAA,IAC7D,OAAOnX,KAAK26C,WAAWF,EAAUK,EAASr3B,EAAMC,EAAMs3B,IAUjDT,GAAAn6C,UAAAu6C,WAAP,SAAkBF,EAAkBK,EAAmBr3B,EAAYC,EAAYs3B,GAC7E,IAAKF,GAA8B,IAAnBA,EAAQt4C,OAGtB,OADAxC,KAAK46C,YAAY56C,KAAK4M,gBAAgBhJ,uBAC/B0Z,EAAAA,MAET,IAAM29B,EAA+Bj7C,KAAKk7C,mBAAmB,CAC3DJ,QAASA,EACTK,SAAUV,IAGNW,EAA+Bp7C,KAAKq7C,qBAW1C,YAToB,IAAT53B,IACTw3B,EAAcK,kBAAoB73B,QAEhB,IAATC,IACTu3B,EAAcM,mBAAqB73B,QAEP,IAAnBs3B,IACTC,EAAcD,eAAiBA,GAE1Bh7C,KAAKw7C,aAAaC,aAAaR,EAAeG,EAAe,QAU/Db,GAAAn6C,UAAAs7C,WAAP,SAAkBjB,EAAkBkB,EAAyBC,EAAuBC,QAAA,IAAAA,IAAAA,GAAA,GAClF,IAAMC,EAAc,CAAEzK,iBAAmB,EAAO0K,iBAAoB,GAAIC,eAAkB,GAAI1M,WAAc,MAC5G,GAAIqM,EAAiB,CAEnB,IAAM1kB,EAAUrlB,KAAKC,MAAM8pC,GACvB1kB,GAA4B,EAAjBA,EAAQz0B,SACrBy0B,EAAQA,EAAQz0B,OAAS,GAAGknC,SAAW,GAEzCoS,EAAYC,iBAAmB9kB,EAG7B2kB,IACFE,EAAYE,eAAiBpqC,KAAKC,MAAM+pC,IAG1C,IAAMK,EAA2Cj8C,KAAKk8C,yBAAyB,CAAEf,SAAUV,EAAUqB,YAAWA,EAAED,iBAAgBA,IAC5HT,EAA+Bp7C,KAAKq7C,qBAC1C,OAAOr7C,KAAKw7C,aAAaW,uBAAuBF,EAAqBb,EAAe,QAY/Eb,GAAAn6C,UAAAg8C,wBAAP,SAA+B3B,EAAkBkB,EAAyBC,EAAuBn4B,EAAcC,EAAcs3B,EAAyBa,QAAA,IAAAA,IAAAA,GAAA,GACpJ,IAAMC,EAAc,CAAEzK,iBAAmB,EAAO0K,iBAAoB,GAAIC,eAAkB,GAAI1M,WAAc,MAC5G,GAAIqM,EAAiB,CAEnB,IAAM1kB,EAAUrlB,KAAKC,MAAM8pC,GACvB1kB,GAA4B,EAAjBA,EAAQz0B,SACrBy0B,EAAQA,EAAQz0B,OAAS,GAAGknC,SAAW,GAEzCoS,EAAYC,iBAAmB9kB,EAG7B2kB,IACFE,EAAYE,eAAiBpqC,KAAKC,MAAM+pC,IAE1C,IAAMS,EAA2Br8C,KAAKk8C,yBAAyB,CAAEf,SAAUV,EAAUqB,YAAWA,EAAED,iBAAgBA,SAC9F,IAATp4B,IACT44B,EAAIf,kBAAoB73B,QAEN,IAATC,IACT24B,EAAId,mBAAqB73B,QAEG,IAAnBs3B,IACTqB,EAAIrB,eAAiBA,GAEvB,IAAMI,EAA+Bp7C,KAAKq7C,qBAC1C,OAAOr7C,KAAKw7C,aAAaW,uBAAuBE,EAAKjB,EAAe,QAM9Db,GAAAn6C,UAAA86C,mBAAR,SAA2BjtC,GAgBzB,MAf0B,CACxBquC,QAASruC,GAAWA,EAAQ6sC,SAAW/oC,UACvCwqC,SAAUtuC,GAAWA,EAAQktC,UAAYppC,UACzCupC,kBAAmBrtC,GAAWA,EAAQwV,MAAQ1R,UAC9CwpC,mBAAoBttC,GAAWA,EAAQyV,MAAQ3R,UAC/CyqC,cAAevuC,GAAWA,EAAQwuC,eAAiB1qC,UACnD2qC,SAAUzuC,GAAWA,EAAQ0uC,UAAY5qC,UACzCipC,eAAgB/sC,GAAWA,EAAQ+sC,gBAAkBjpC,UACrD6qC,YAAa3uC,GAAWA,EAAQ4uC,aAAe9qC,UAC/C+qC,YAAa7uC,GAAWA,EAAQ6uC,aAAe/qC,UAC/CgrC,aAAc9uC,GAAWA,EAAQ8uC,cAAgBhrC,UACjDirC,UAAW/uC,GAAWA,EAAQ+uC,WAAajrC,UAC3CkrC,eAAgBhvC,GAAWA,EAAQgvC,gBAAkBlrC,UACrDmrC,WAAYjvC,GAAWA,EAAQivC,YAAcnrC,YAQzCwoC,GAAAn6C,UAAAi7C,mBAAR,SAA2BptC,GAWzB,MAV0B,CACxBkvC,WAAYlvC,GAAWA,EAAQmvC,YAAcD,EAAAA,WAAWE,MACxDC,SAAUrvC,GAAWA,EAAQsvC,UAAYD,EAAAA,SAASE,MAClDC,KAAMxvC,GAAWA,EAAQkN,MAAQpJ,UACjC2rC,SAAUzvC,GAAWA,EAAQ0vC,UAAY5rC,UACzC6rC,SAAU3vC,GAAWA,EAAQ2vC,UAAY7rC,UACzC8rC,YAAa5vC,GAAWA,EAAQ4vC,aAAe9rC,UAC/C+rC,aAAc7vC,GAAWA,EAAQ6vC,cAAgB/rC,UACjDgsC,UAAW9vC,GAAWA,EAAQ8vC,WAAaC,EAAAA,UAAUC,OAQjD1D,GAAAn6C,UAAA87C,yBAAR,SAAiCjuC,GAiB/B,MAf2D,CACzDsuC,SAAUtuC,EAAQktC,SAClB+C,aAAcjwC,GAAWA,EAAQ6tC,aAHf,CAAEzK,iBAAmB,EAAO0K,iBAAoB,GAAIC,eAAkB,GAAI1M,WAAc,MAI1GgM,kBAAmBrtC,GAAWA,EAAQwV,MAAQ1R,UAC9CwpC,mBAAoBttC,GAAWA,EAAQyV,MAAQ3R,UAC/C2qC,SAAUzuC,GAAWA,EAAQ0uC,UAAY5qC,UACzC6qC,YAAa3uC,GAAWA,EAAQ4uC,aAAe9qC,UAC/CipC,eAAgB/sC,GAAWA,EAAQ+sC,gBAAkBjpC,UACrD+qC,YAAa7uC,GAAWA,EAAQ6uC,aAAe/qC,UAC/CgrC,aAAc9uC,GAAWA,EAAQ8uC,cAAgBhrC,UACjDmrC,WAAYjvC,GAAWA,EAAQivC,YAAcnrC,UAC7CkrC,eAAgBhvC,GAAWA,EAAQgvC,gBAAkBlrC,UACrDirC,UAAW/uC,GAAWA,EAAQ+uC,WAAajrC,UAC3C8pC,kBAAkB5tC,IAAWA,EAAQrM,eAAe,qBAAsBqM,EAAQ4tC,mBAQ9EtB,GAAAn6C,UAAAw6C,YAAR,SAAoBj5C,GACd3B,KAAKyT,cACPzT,KAAKyT,cAAcrG,QAAQzL,EAAS,CAAEkS,WAAW,IACxC7T,KAAKsQ,YACdtQ,KAAKsQ,WAAWnF,MAAMxJ,IAG1B8G,OAAAC,eAAY6xC,GAAAn6C,UAAA,gBAAa,KAAzB,WACE,OAAIJ,KAAKmV,kBACAnV,KAAKmV,kBACHnV,KAAKoiB,SACPpiB,KAAKoiB,SAASha,IAAuBmL,GAAmB,MAE1D,sCAET9K,OAAAC,eAAY6xC,GAAAn6C,UAAA,iBAAc,KAA1B,WACE,OAAOJ,KAAc,SAAK,sCAE5ByI,OAAAC,eAAY6xC,GAAAn6C,UAAA,eAAY,KAAxB,WACE,OAAOJ,KAAKm+C,gBAAkBn+C,KAAKm+C,eAAenjC,cAAgB,sCAEpEvS,OAAAC,eAAY6xC,GAAAn6C,UAAA,WAAQ,KAApB,WACE,OAAOJ,KAAKgb,cAAgBhb,KAAKgb,aAAaoH,UAAY,2DAtP7DriB,EAAAA,uDAZQ+Q,UACAtI,SAGA41C,EAAAA,yBACA7qC,GAAiB5Q,WAAA,CAAA,CAAAC,KAqBrBC,EAAAA,cA0OL03C,IA9OE,SAAAA,GACUjqC,EACA1D,EACA4uC,EACYrmC,GAHZnV,KAAAsQ,WAAAA,EACAtQ,KAAA4M,gBAAAA,EACA5M,KAAAw7C,aAAAA,EACYx7C,KAAAmV,kBAAAA,ECiBxB,IAAMkpC,GAAyB,gBCvC/BC,IAKgBA,GAAAC,yBAAd,SAAuCC,GAAvC,IAAAt9C,EAAAlB,KACE,OAAKw+C,EAGqCA,EAAUx+B,IAAI,SAACy+B,GACvD,OAAOv9C,EAAKw9C,wBAAwBD,KAH7B,IAWGH,GAAAI,wBAAd,SAAsCD,GAKpC,MAJuC,CACrCE,aAAcF,EAAS96B,WACvBi7B,SAAUH,EAASG,WAQTN,GAAAO,uBAAd,SAAqCC,GACnC,GAAKA,GAA8C,IAA3BA,EAAgBt8C,OAIxC,OAD4Bs8C,EAAgB,IAOhCR,GAAAS,kBAAd,SAAgCD,GAQ9B,OANEA,EADGA,GACe,IAEkB9+B,IAAI,SAACg/B,GACzC,OAAOA,EAAeL,gBAM5BL,IAnDA,SAAAA,MCMA,IAAAW,IAMEx2C,OAAAC,eAAYu2C,GAAA7+C,UAAA,aAAU,KAAtB,WACE,OAAOJ,KAAKgb,aAAa0M,4CAM3Bjf,OAAAC,eAAYu2C,GAAA7+C,UAAA,cAAW,KAAvB,WACE,OAAOJ,KAAKgb,aAAa2P,6CASpBs0B,GAAA7+C,UAAA8+C,UAAP,SAAiBC,EAAiCH,GAAlD,IAAA99C,EAAAlB,KACQmqB,EAAcnqB,KAAK0nB,WAAWyC,YAE9Bi1B,EADUj1B,EAAY4jB,QACA,4BAMtB9/B,EAAU,CACd9B,KALW,CACXkzC,iBAFuBr/C,KAAKs/C,uBAAuBH,EAAyBH,GAG5E/Q,YAAa9jB,EAAY+jB,qBAM3B,OADAluC,KAAKe,eAAeP,OACb2pB,EAAYmkB,OAAO8Q,EAAW,MAAO,KAAMnxC,GAAS2S,KACzDI,EAAAA,UAAU,SAACutB,GACT,OAAOrtC,EAAKq+C,gCAEdx+B,EAAAA,IAAI,WACF7f,EAAKH,eAAeW,WASnBu9C,GAAA7+C,UAAAo/C,0BAAP,SAAiCL,EAAiCH,GAAlE,IAAA99C,EAAAlB,KACQmqB,EAAcnqB,KAAK0nB,WAAWyC,YAE9Bi1B,EADUj1B,EAAY4jB,QACA,0CAQtB9/B,EAAU,CACd9B,KANW,CACXkzC,iBAHuBr/C,KAAKs/C,uBAAuBH,EAAyBH,GAI5E1tB,aAHmB6tB,EAAwBvlC,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAAGknB,MAIrEqd,YAAa9jB,EAAY+jB,qBAM3B,OADAluC,KAAKe,eAAeP,OACb2pB,EAAYmkB,OAAO8Q,EAAW,MAAO,KAAMnxC,GAAS2S,KACzDI,EAAAA,UAAU,SAACutB,GACT,OAAOrtC,EAAKq+C,gCAEdx+B,EAAAA,IAAI,WACF7f,EAAKH,eAAeW,WAOnBu9C,GAAA7+C,UAAAq/C,WAAP,SAAkBN,EAAiCL,GAAnD,IAAA59C,EAAAlB,KACQmqB,EAAcnqB,KAAK0nB,WAAWyC,YAE9Bi1B,EADUj1B,EAAY4jB,QACA,iCACtB2R,EAAmB1/C,KAAK2/C,4BAA4BR,EAAyBL,GAC7Ec,EAAqD,IAAtCF,EAAiBG,UAAUr9C,OAM1CyL,EAAU,CACd9B,KALW,CACX2zC,gBAAiBJ,EACjBzR,YAAa9jB,EAAY+jB,qBAK3B,OAAO/jB,EAAYmkB,OAAO8Q,EAAW,MAAO,KAAMnxC,GAAS2S,KACzDI,EAAAA,UAAU,SAACutB,GACT,OAAOrtC,EAAK6+C,8BAA8BxR,EAAaE,YAAamR,KAEtE7+B,EAAAA,IAAI,WACF7f,EAAKH,eAAeW,WAOnBu9C,GAAA7+C,UAAA4/C,sBAAP,SAA6Bb,EAAiCL,EAAmC16B,GAAjG,IAAAljB,EAAAlB,KACQmqB,EAAcnqB,KAAK0nB,WAAWyC,YAE9Bi1B,EADUj1B,EAAY4jB,QACA,iCAQtB9/B,EAAU,CACd9B,KALW,CACX2zC,gBAJuB9/C,KAAK2/C,4BAA4BR,EAAyBL,GAKjF7Q,YAAa9jB,EAAY+jB,qBAK3B,OAAO/jB,EAAYmkB,OAAO8Q,EAAW,MAAO,KAAMnxC,GAAS2S,KACzDI,EAAAA,UAAU,SAACutB,GACT,OAAOrtC,EAAK++C,sBAAsB1R,EAAaE,YAAarqB,KAE9DrD,EAAAA,IAAI,WACF7f,EAAKH,eAAeW,WAOnBu9C,GAAA7+C,UAAA8/C,2BAAP,SAAkCf,EAAiCL,GAAnE,IAAA59C,EAAAlB,KACQmqB,EAAcnqB,KAAK0nB,WAAWyC,YAE9Bi1B,EADUj1B,EAAY4jB,QACA,+CACtB2R,EAAmB1/C,KAAK2/C,4BAA4BR,EAAyBL,GAC7Ec,EAAqD,IAAtCF,EAAiBG,UAAUr9C,OAQ1CyL,EAAU,CACd9B,KANW,CACX2zC,gBAAiBJ,EACjBpuB,aAJmB6tB,EAAwBvlC,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAAGknB,MAKrEqd,YAAa9jB,EAAY+jB,qBAK3B,OAAO/jB,EAAYmkB,OAAO8Q,EAAW,MAAO,KAAMnxC,GAAS2S,KACzDI,EAAAA,UAAU,SAACutB,GACT,OAAOrtC,EAAK6+C,8BAA8BxR,EAAaE,YAAamR,KAEtE7+B,EAAAA,IAAI,WACF7f,EAAKH,eAAeW,WAQlBu9C,GAAA7+C,UAAAk/C,uBAAR,SAA+BH,EAAiCH,GAE9D,IAAML,EAAeK,EAAeL,aAC9BwB,EAAyBC,EAAAA,qBAAqBC,mBAAmBlB,GAYvE,OAXAgB,EAAuBvvB,MAIwB,CAC7CivB,UAJgBS,EAAAA,gBAAgBC,qBAAqBJ,EAAwBngD,KAAK2qB,aAKlF61B,WAJiBF,EAAAA,gBAAgBG,0BAA0BN,EAAwBngD,KAAK2qB,aAKxF+1B,cAAe,CAAC/B,GAChBgC,aAAchC,IASVM,GAAA7+C,UAAAu/C,4BAAR,SAAoCR,EAAiCH,GACnE,IAAM4B,EAAgBtC,GAAeS,kBAAkBC,GAEjDmB,EAAyBC,EAAAA,qBAAqBC,mBAAmBlB,GAYvE,OAXAgB,EAAuBvvB,MAIE,CACvBivB,UAJgBS,EAAAA,gBAAgBC,qBAAqBJ,EAAwBngD,KAAK2qB,aAKlF61B,WAJiBF,EAAAA,gBAAgBO,uBAAuBV,EAAwBngD,KAAK2qB,aAKrF+1B,cAAeE,EACfD,aAAc,OAWX1B,GAAA7+C,UAAAm/C,4BAAP,WACE,IAAMuB,EAAa9gD,KAAK2qB,YAAYgB,KAAKC,UACzC,OAAO5rB,KAAK0nB,WAAWq5B,iBAAiBD,IAMnC7B,GAAA7+C,UAAA2/C,8BAAP,SAAqCpP,EAAiBiP,GACpD,IAAqB,IAAjBA,EAAuB,CACzB,IAAM3zB,EAAWjsB,KAAK0nB,WAAWkpB,cAAcD,GAE/C,OADA3wC,KAAK0nB,WAAWoE,iBAAiBilB,YAAY9kB,GACtC1L,EAAAA,GAAGowB,GAEV,IAAMmQ,EAAa9gD,KAAK2qB,YAAYgB,KAAKC,UACzC,OAAO5rB,KAAK0nB,WAAWq5B,iBAAiBD,GAAYlgC,KAClDZ,EAAAA,IAAI,WAAM,OAAA2wB,MAITsO,GAAA7+C,UAAA6/C,sBAAP,SAA6BtP,EAAiBqQ,GAC5C,IAAM/0B,EAAWjsB,KAAK0nB,WAAWkpB,cAAcD,GAI/C,OAHA3wC,KAAK0nB,WAAWoE,iBAAiBilB,YAAY9kB,GAE7CjsB,KAAKihD,eAAeh1B,EAAU+0B,GACvBzgC,EAAAA,GAAGowB,IAEJsO,GAAA7+C,UAAA6gD,eAAR,SAAuBh1B,EAAoB+0B,GAA3C,IAAA9/C,EAAAlB,KACEisB,EAAS7pB,QAAQ,SAACypB,GAChB3qB,EAAKggD,aAAar1B,EAAQm1B,MAGtB/B,GAAA7+C,UAAA8gD,aAAR,SAAqB/yB,EAAgB6yB,GAArC,IAAA9/C,EAAAlB,KACEyI,OAAOM,KAAKi4C,GAAW5+C,QAAQ,SAACoV,GAC9BtW,EAAKigD,eAAehzB,EAAQ3W,EAAKwpC,EAAUxpC,OAGvCynC,GAAA7+C,UAAA+gD,eAAR,SAAuBhzB,EAAgBhT,EAActQ,GACnD,GAAIsjB,EAAQ,CACV,IAAMQ,EAAQxT,EAAKvB,MAAM,KACrB+U,EAAMnsB,QAAU,EAClB2rB,EAAOhT,GAAQtQ,EAEf8jB,EAAM7S,MAAM,GAAI,GAAGC,OAAO,SAACqlC,EAAMjmC,GAI/B,OAHMimC,EAAKx/C,eAAeuZ,IAASimC,EAAgB,UAAEx/C,eAAeuZ,KAClEimC,EAAKjmC,GAAQ,IAERimC,EAAKjmC,IACXgT,GAAQQ,EAAMA,EAAMnsB,OAAS,IAAMqI,yBA1P7C9K,EAAAA,uDATQsiB,EAAAA,oBAEAliB,KAqQT8+C,IA7OE,SAAAA,GAAoBjkC,EAAoCja,GAApCf,KAAAgb,aAAAA,EAAoChb,KAAAe,eAAAA,ECZ1D,IAAAsgD,IAWE54C,OAAAC,eAAY24C,GAAAjhD,UAAA,uBAAoB,KAAhC,WACE,OAAOJ,KAAKgb,aAAa2P,YAAYgB,KAAKC,2CAM5CnjB,OAAAC,eAAY24C,GAAAjhD,UAAA,cAAW,KAAvB,WACE,OAAOJ,KAAKgb,aAAa2P,6CAuCnB02B,GAAAjhD,UAAAkhD,mBAAR,WACE,IAAMl/B,EAAWpiB,KAAKgb,aAAaoH,SACnCpiB,KAAK4M,gBAAkBwV,EAASha,IAAqBI,EAAiB,KAAM+4C,EAAAA,YAAY1+C,UACnF7C,KAAK4M,kBACR5M,KAAK4M,gBAAkBpE,EAAgBG,gBASpC04C,GAAAjhD,UAAAohD,mBAAP,SAA0BrC,EAAiCsC,EAAoBC,EAAwBnE,EAAmBhoC,GAA1H,IAAArU,EAAAlB,KACQ2hD,EAASF,GAAwBzhD,KAAK4hD,iBACtCC,EAASH,GAAgC1hD,KAAK8hD,qBACpD,IAAKH,IAAWE,EACd,MAAM,IAAInxC,MAAM,mCAGlB,IAAMqxC,EAA2B,IAAIC,EAAAA,YACrCD,EAAYE,UAAY,EACpB1E,IACFwE,EAAYxE,SAAWA,GAGzB,IAAM2E,EAAmB,GACrB/kB,EAAc,KAClB,GAAI5nB,EAAI,CAEN,IAAMma,EAA2B1vB,KAAKgb,aAAa2P,YAAYM,UAC3DyE,EAAY9D,YAAcrW,GAC5Bma,EAAYqL,aAAaxlB,GAAI,GAAM,GAGrC4nB,EAAcn9B,KAAKmiD,cAAchD,EAAyB5pC,QAG1D4nB,EAAcn9B,KAAKoiD,cAAcjD,GAEnC,GAAIhiB,GAAeA,EAAYoX,gBAAiB,CAC9C,IAAMqM,EAAgB5gD,KAAKqiD,iCAAiClD,EAAyB,CAAChiB,EAAYoX,kBAC9FqM,GAAwC,EAAvBA,EAAcp+C,QACjC0/C,EAAiB5gD,KAAKgJ,MAAM43C,EAAkBtB,GA4BlD,OAxBgB1vC,EAAAA,KAAKlR,KAAKsiD,oBAAoBC,oBAAoBV,EAAQF,EAAQI,EAAaG,IACvEthC,KACtBI,EAAAA,UAAU,SAACw9B,GACT,IAAKA,GAAkC,IAArBA,EAAUh8C,OAE1B,OADAtB,EAAKuS,cAAcrG,QAAQlM,EAAK0L,gBAAgB3G,eAAgB,CAAE4N,WAAW,IACtEuB,EAAAA,QAST,GAAyB,KANzBopC,EAAYA,EAAUr8C,OAAO,SAACs8C,GAC5B,OAAIA,EAAS78C,eAAe,UACnB68C,EAAS1nC,QAAUyrC,EAAAA,UAAUC,OAI1BjgD,OACZ,OAAO+d,EAAAA,IAAG,GAGZ,IAAMu+B,EAAkBR,GAAeC,yBAAyBC,GAC1DkE,EAAsBpE,GAAeO,uBAAuBC,GAClE,OAAO59C,EAAKyhD,kBAAkBzD,UAAUC,EAAyBuD,OAahErB,GAAAjhD,UAAAwiD,mCAAP,SAA0CzD,EAAiCsC,EAAoBC,EAAwBnE,EAAmBhoC,GAA1I,IAAArU,EAAAlB,KACQ2hD,EAASF,GAAwBzhD,KAAK4hD,iBACtCC,EAASH,GAAgC1hD,KAAK8hD,qBACpD,IAAKH,IAAWE,EACd,MAAM,IAAInxC,MAAM,mCAGlB,IAAMqxC,EAA2B,IAAIC,EAAAA,YACrCD,EAAYE,UAAY,EACpB1E,IACFwE,EAAYxE,SAAWA,GAIzB,IAAM2E,EAAmB,GACrB/kB,EAAc,KAClB,GAAI5nB,EAAI,CAEN,IAAMma,EAA2B1vB,KAAKgb,aAAa2P,YAAYM,UAC3DyE,EAAY9D,YAAcrW,GAC5Bma,EAAYqL,aAAaxlB,GAAI,GAAM,GAGrC4nB,EAAcn9B,KAAKmiD,cAAchD,EAAyB5pC,QAG1D4nB,EAAcn9B,KAAKoiD,cAAcjD,GAEnC,GAAIhiB,GAAeA,EAAYoX,gBAAiB,CAC9C,IAAMqM,EAAgB5gD,KAAKqiD,iCAAiClD,EAAyB,CAAChiB,EAAYoX,kBAC9FqM,GAAwC,EAAvBA,EAAcp+C,QACjC0/C,EAAiB5gD,KAAKgJ,MAAM43C,EAAkBtB,GA4BlD,OAxBgB1vC,EAAAA,KAAKlR,KAAKsiD,oBAAoBC,oBAAoBV,EAAQF,EAAQI,EAAaG,IACvEthC,KACtBI,EAAAA,UAAU,SAACw9B,GACT,IAAKA,GAAkC,IAArBA,EAAUh8C,OAE1B,OADAtB,EAAKuS,cAAcrG,QAAQlM,EAAK0L,gBAAgB3G,eAAgB,CAAE4N,WAAW,IACtEyJ,EAAAA,MAST,GAAyB,KANzBkhC,EAAYA,EAAUr8C,OAAO,SAACs8C,GAC5B,OAAIA,EAAS78C,eAAe,UACnB68C,EAAS1nC,QAAUyrC,EAAAA,UAAUC,OAI1BjgD,OACZ,OAAO+d,EAAAA,IAAG,GAGZ,IAAMu+B,EAAkBR,GAAeC,yBAAyBC,GAC1DkE,EAAsBpE,GAAeO,uBAAuBC,GAClE,OAAO59C,EAAKyhD,kBAAkBnD,0BAA0BL,EAAyBuD,OAShFrB,GAAAjhD,UAAAyiD,sBAAP,SAA6B1D,EAAiCsC,EAAoBC,EAAwBnE,GAA1G,IAAAr8C,EAAAlB,KACQ2hD,EAASF,GAAwBzhD,KAAK4hD,iBACtCC,EAASH,GAAgC1hD,KAAK8hD,qBACpD,IAAKH,IAAWE,EACd,MAAM,IAAInxC,MAAM,mCAGlB,IAAMqxC,EAA2B,IAAIC,EAAAA,YAyBrC,OAxBIzE,IACFwE,EAAYxE,SAAWA,GAETrsC,EAAAA,KAAKlR,KAAKsiD,oBAAoBC,oBAAoBV,EAAQF,EAAQI,IAC1DnhC,KACtBI,EAAAA,UAAU,SAACw9B,GACT,IAAKA,GAAkC,IAArBA,EAAUh8C,OAE1B,OADAtB,EAAKuS,cAAcrG,QAAQlM,EAAK0L,gBAAgB3G,eAAgB,CAAE4N,WAAW,IACtEyJ,EAAAA,MAST,GAAyB,KANzBkhC,EAAYA,EAAUr8C,OAAO,SAACs8C,GAC5B,OAAIA,EAAS78C,eAAe,UACnB68C,EAAS1nC,QAAUyrC,EAAAA,UAAUC,OAI1BjgD,OACZ,OAAO+d,EAAAA,IAAG,GAEZ,IAAMu+B,EAAkBR,GAAeC,yBAAyBC,GAChE,OAAOt9C,EAAKyhD,kBAAkBlD,WAAWN,EAAyBL,OAQjEuC,GAAAjhD,UAAA0iD,sCAAP,SAA6C3D,EAAiCsC,EAAoBC,EAAwBnE,EAAmBhoC,GAA7I,IAAArU,EAAAlB,KACQ2hD,EAASF,GAAwBzhD,KAAK4hD,iBACtCC,EAASH,GAAgC1hD,KAAK8hD,qBACpD,IAAKH,IAAWE,EACd,MAAM,IAAInxC,MAAM,mCAElB,IAAMqxC,EAA2B,IAAIC,EAAAA,YAIrC,GAHIzE,IACFwE,EAAYxE,SAAWA,GAErBhoC,EAAI,CAEN,IAAMma,EAA2B1vB,KAAKgb,aAAa2P,YAAYM,UAC3DyE,EAAY9D,YAAcrW,GAC5Bma,EAAYqL,aAAaxlB,GAAI,GAAM,GAwBvC,OArBgBrE,EAAAA,KAAKlR,KAAKsiD,oBAAoBC,oBAAoBV,EAAQF,EAAQI,IAC1DnhC,KACtBI,EAAAA,UAAU,SAACw9B,GACT,IAAKA,GAAkC,IAArBA,EAAUh8C,OAE1B,OADAtB,EAAKuS,cAAcrG,QAAQlM,EAAK0L,gBAAgB3G,eAAgB,CAAE4N,WAAW,IACtEyJ,EAAAA,MAST,GAAyB,KANzBkhC,EAAYA,EAAUr8C,OAAO,SAACs8C,GAC5B,OAAIA,EAAS78C,eAAe,UACnB68C,EAAS1nC,QAAUyrC,EAAAA,UAAUC,OAI1BjgD,OACZ,OAAO+d,EAAAA,IAAG,GAEZ,IAAMu+B,EAAkBR,GAAeC,yBAAyBC,GAChE,OAAOt9C,EAAKyhD,kBAAkBzC,2BAA2Bf,EAAyBL,OAQjFuC,GAAAjhD,UAAA2iD,SAAP,SAAgBC,EAAkBrB,GAChC,IAAKqB,EAEH,OADAhjD,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgB7F,qBAAsB,CAAE8M,WAAW,IAC5EyJ,EAAAA,MAETqkC,EAASA,GAAU,eACnB,IAAMxpC,EAAMnY,KAAKijD,eAAe,CAACD,GAAWrB,GAQ5C,OADA5/C,OAAOkiB,KAAK9L,GACLoI,EAAAA,IAAG,IAKL8gC,GAAAjhD,UAAA8iD,cAAP,SAAqBC,EAAqBxB,GACxC,IAAKwB,GAAkC,IAArBA,EAAU3gD,OAE1B,OADAxC,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgB7F,qBAAsB,CAAE8M,WAAW,IAC5EyJ,EAAAA,MAGT,GAAyB,IAArB6lC,EAAU3gD,OACZ,OAAOxC,KAAK+iD,SAASI,EAAU,GAAIxB,GAIrC,IAAMxpC,EAAMnY,KAAKijD,eAAeE,EAAWxB,GAE3C,OADA5/C,OAAOkiB,KAAK9L,GACLoI,EAAAA,IAAG,IAOJ8gC,GAAAjhD,UAAA6iD,eAAR,SAAuBG,EAA+BzB,GAEpD,GADAA,EAASA,GAAU,eACf3hD,KAAKqjD,gBAAiB,CACxB,GAA8B,IAA1BD,EAAe5gD,OACjB,OAAOxC,KAAKqjD,gBAAgBJ,eAAeG,EAAe,GAAIzB,GAE9D,IAAM2B,EAAkB1xC,KAAK+E,UAAUysC,GACvC,OAAOpjD,KAAKqjD,gBAAgBE,uBAAuBD,EAAiB3B,GAItE,OADA3yC,QAAQ8S,KAAK,mCACiB,IAA1BshC,EAAe5gD,OACV,wDAAwD4gD,EAAe,GAAE,WAAWzB,EAGpF,mEADD2B,EAAkB1xC,KAAK+E,UAAUysC,IACiD,WAAWzB,GAOlGN,GAAAjhD,UAAAojD,iBAAP,SAAwBpS,EAAgB+N,EAAiCwC,GACvE,IAAKvQ,EAEH,OADApxC,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgB7F,qBAAsB,CAAE8M,WAAW,IAC5EyJ,EAAAA,MAGT,IAAMw9B,EAAU,CAAC1J,GACX+R,EAAYnjD,KAAKqiD,iCAAiClD,EAAyBrE,GACjF,GAAyB,IAArBqI,EAAU3gD,OAEZ,OADAxC,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgB5F,cAAe,CAAE6M,WAAW,IACrEyJ,EAAAA,MAGT,IAAM0lC,EAAWG,EAAU,GAC3B,OAAOnjD,KAAK+iD,SAASC,IAMhB3B,GAAAjhD,UAAAqjD,uBAAP,SAA8B3I,EAA4BqE,EAAiCwC,GAIzF,GAHuB,iBAAZ7G,GAAwBA,GAA4B,EAAjBA,EAAQt4C,SACpDs4C,EAAUA,EAAQlhC,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,MAEtCoxC,IAAsC,IAA3Bx4C,MAAMC,QAAQu4C,IAAyC,IAAnBA,EAAQt4C,OAE1D,OADAxC,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgB7F,qBAAsB,CAAE8M,WAAW,IAC5EyJ,EAAAA,MAET,IAAMyrB,EAAM,GAAG19B,OAAOyvC,GAChBqI,EAAYnjD,KAAKqiD,iCAAiClD,EAAyBpW,GACjF,OAAyB,IAArBoa,EAAU3gD,QACZxC,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgB5F,cAAe,CAAE6M,WAAW,IACrEyJ,EAAAA,OAGFtd,KAAKkjD,cAAcC,EAAWxB,IAShCN,GAAAjhD,UAAAsjD,iCAAP,SAAwCvE,EAAiCsC,EAAmB1Y,GAC1F,IAAKoW,IAA4BsC,EAC/B,MAAM,IAAI/wC,MAAM,6CAElB,IAAIyyC,EAAY,GACZrI,EAAU,GAWd,OAJEqI,EANEpa,GAAoB,EAAbA,EAAIvmC,QACQ,iBAAjB,EACFs4C,EAAQx5C,KAAKynC,GAEb+R,EAAU/R,EAEA/oC,KAAKqiD,iCAAiClD,EAAyBrE,IAE/D96C,KAAKqiD,iCAAiClD,EAAyB,QAEvC,IAArBgE,EAAU3gD,QACzBxC,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgBrG,aAAc,CAAEsN,WAAW,IACpEyJ,EAAAA,OAEFtd,KAAK2jD,uBAAuBR,EAAW1B,IAOzCJ,GAAAjhD,UAAAwjD,0CAAP,SAAiDzE,EAAiCsC,GAChF,IAAKtC,IAA4BsC,EAC/B,MAAM,IAAI/wC,MAAM,6CAElB,IAAMmzC,EAAa7jD,KAAKoiD,cAAcjD,GAEhC2E,EADyB1D,EAAAA,qBAAqBC,mBAAmBlB,GACpBvuB,MACnD,IAAKizB,EAAWC,KAAyBD,EAAWC,GAAmC,aAErF,OADA9jD,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgBrG,aAAc,CAAEsN,WAAW,IACpEyJ,EAAAA,MAET,IAAM6lC,EAAYnjD,KAAKqiD,iCAAiClD,EAAyB,MACjF,GAAIgE,GAAkC,IAArBA,EAAU3gD,OAEzB,OADAxC,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgBrG,aAAc,CAAEsN,WAAW,IACpEyJ,EAAAA,MAET,IAAMqhC,EAAe3+C,KAAK+jD,uBAAuB5E,GACjD,GAAKR,EAGH,OAAO3+C,KAAKgkD,yBAAyBb,EAAW1B,EAAW9C,GAF3D,MAAM,IAAIjuC,MAAM,oBAUb2wC,GAAAjhD,UAAA6jD,oBAAP,SAA2BC,EAAoBzC,GAC7C,IAAKyC,IAAezC,EAClB,MAAM,IAAI/wC,MAAM,gCAGlB,OADgBQ,EAAAA,KAAKlR,KAAKmkD,kBAAkBC,eAAeF,EAAYzC,KASlEJ,GAAAjhD,UAAAikD,6BAAP,SAAoClF,EAAiC+E,EAAoBzC,GACvF,IAAKyC,IAAezC,EAClB,MAAM,IAAI/wC,MAAM,gCAGlB,IAAMiuC,EAAe3+C,KAAK+jD,uBAAuB5E,GACjD,OAAKR,EAIWztC,EAAAA,KAAKlR,KAAKmkD,kBAAkBG,wBAAwBJ,EAAYzC,EAAW9C,KAHzF3+C,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgBrG,aAAc,CAAEsN,WAAW,IACpEyJ,EAAAA,QAUJ+jC,GAAAjhD,UAAAujD,uBAAP,SAA8B/C,EAAyBa,GAErD,OADgBvwC,EAAAA,KAAKlR,KAAKmkD,kBAAkBI,eAAe3D,EAAea,KASrEJ,GAAAjhD,UAAA4jD,yBAAP,SAAgCpD,EAAyBa,EAAmB9C,GAE1E,OADgBztC,EAAAA,KAAKlR,KAAKmkD,kBAAkBK,wBAAwB5D,EAAea,EAAW9C,KAQzF0C,GAAAjhD,UAAAqkD,WAAP,SAAkBC,GAKhB,MAAO,MAHLA,EADGA,GACQ,IAEaliD,OAAS,GAChB,MAQd6+C,GAAAjhD,UAAAukD,wBAAP,SAA+BC,EAAsBC,EAAsBC,GAA3E,IAAA5jD,EAAAlB,KAUQyvB,EAAeq1B,EAAoBlrC,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAE1Dq7C,EAAkBt1B,EAAamB,MAE/Bo0B,EAAwBhlD,KAAKgb,aAAa2P,YAAYgF,SAASF,GAE/Duf,EADgBhvC,KAAKgb,aAAa0M,WACJsnB,cAE9BrgB,EADWs2B,EAAAA,gBAAgBC,0BAA0Bz1B,EAAcuf,EAAehvC,KAAKgb,aAAa2P,aACnFw6B,UAAUnlC,IAAI,SAAC7E,GACpC,OAAIA,EAAKqL,WAAW,aACXrL,EAAKvB,MAAM,KAAK,GAEhBuB,IAGX,GAAI6pC,EAAuB,CACzB,IAAMI,EAAcJ,EAAsB5nB,SAEtCgoB,GACsBA,EAAYjjD,OAAO,SAAAgV,GAAQ,OAACA,EAAKytC,KACzCxiD,QAAQ,SAAA+U,GACtB,IAAMynC,EAAWznC,EAAK4tC,GAA2B,SAC3CM,EAAgBD,EAAYjjD,OAAO,SAAAmjD,GAAO,OAAAA,EAAIP,GAA2B,WAAMnG,GAAY0G,EAAIV,KACrGj2B,EAAMiC,MACNjC,EAAMrtB,KAAK,UAAU6V,EAAK6tC,EAAsBrT,aAChD,IAAI9lB,EAAS3qB,EAAK8Z,aAAa0M,WAAWoE,iBAAiBy5B,gBAAgB52B,GACrE62B,EAAUtkD,EAAKujD,WAAWY,GAChCx5B,EAAO+4B,GAAgBY,EACvB35B,EAAOg5B,IAAgB,EAEvBQ,EAAcjjD,QAAQ,SAAAkjD,GACpB32B,EAAMiC,MACNjC,EAAMrtB,KAAK,UAAUgkD,EAAIN,EAAsBrT,cAC/C9lB,EAAS3qB,EAAK8Z,aAAa0M,WAAWoE,iBAAiBy5B,gBAAgB52B,IAChEk2B,IAAgB,QAM1BxD,GAAAjhD,UAAAqlD,sBAAP,SAA6BZ,EAAsBC,GACjD,IAAMr1B,EAAeq1B,EAAoBlrC,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAKhE,GAHA+lB,EAAamB,OAGuB,IAFN5wB,KAAKgb,aAAa2P,YAAYgF,SAASF,GACzB0N,YAC1B0nB,GAEhB,OADA7kD,KAAKyT,cAAcrG,QAAQpN,KAAK4M,gBAAgB9F,kBAAmB,CAAE+M,WAAW,IACzEyJ,EAAAA,OAGJ+jC,GAAAjhD,UAAAslD,wBAAP,SAA+Bd,EAAsBC,EAAsBC,GAA3E,IAAA5jD,EAAAlB,KACQyvB,EAAeq1B,EAAoBlrC,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAE1Dq7C,EAAkBt1B,EAAamB,MAE/Bo0B,EAAwBhlD,KAAKgb,aAAa2P,YAAYgF,SAASF,GAGrE,GAAIu1B,EAAuB,CACzB,IACMK,EADcL,EAAsB5nB,SACRj7B,OAAO,SAAAgV,GAAQ,OAAAA,EAAKytC,KAChDe,EAAc,IAAIp9C,IAElBymC,EADgBhvC,KAAKgb,aAAa0M,WACJsnB,cAE9B4W,EADWX,EAAAA,gBAAgBC,0BAA0Bz1B,EAAcuf,EAAehvC,KAAKgb,aAAa2P,aACnFw6B,UAAUnlC,IAAI,SAAC7E,GACpC,OAAIA,EAAKqL,WAAW,aACXrL,EAAKvB,MAAM,KAAK,GAEhBuB,IAGXkqC,EAAcjjD,QAAQ,SAAA+U,GACpB,IAAMynC,EAAWznC,EAAK4tC,GAA2B,SAC7CY,EAAYx9C,IAAIy2C,GAClB+G,EAAYv9C,IAAIw2C,GAAUt9C,KAAK6V,GAE/BwuC,EAAYr9C,IAAIs2C,EAAU,CAACznC,MAG/B7U,MAAM4O,KAAKy0C,EAAYllC,UAAUre,QAAQ,SAACyjD,GACxCA,EAAM9xB,KAAK,SAAC/E,EAAG82B,GACb,IAAMC,EAAWC,SAASh3B,EAAE41B,GAAc5yC,QAAQ,cAAe,KAEjE,OADiBg0C,SAASF,EAAElB,GAAc5yC,QAAQ,cAAe,KAC/C+zC,IAEpB,IAAMT,EAAMO,EAAM,GAClBD,EAAMh1B,MACNg1B,EAAMtkD,KAAK,UAAUgkD,EAAIN,EAAsBrT,aAChCzwC,EAAK8Z,aAAa0M,WAAWoE,iBAAiBy5B,gBAAgBK,GACtEf,IAAgB,MAQrBxD,GAAAjhD,UAAA2jD,uBAAR,SAA+B5E,GAC7B,IAAMgB,EAAyBC,EAAAA,qBAAqBC,mBAAmBlB,GACjE2E,EAAsB3D,EAAuBvvB,MAE7CuM,EAD2Bn9B,KAAKgb,aAAa2P,YAAYgF,SAASwwB,GACxChjB,YAChC,OAAIA,GAAeA,EAAYoX,iBACtBpX,EAAY2mB,IAAwB3mB,EAAY2mB,GAAmC,cAEnF,MAOHzC,GAAAjhD,UAAAgiD,cAAR,SAAsBjD,GACpB,IAAMgB,EAAyBC,EAAAA,qBAAqBC,mBAAmBlB,GACvEgB,EAAuBvvB,MACvB,IAAMlB,EAA2B1vB,KAAKgb,aAAa2P,YAAYgF,SAASwwB,GAExE,OADoBzwB,GAAeA,EAAYyN,aASzCkkB,GAAAjhD,UAAA+hD,cAAR,SAAsBhD,EAAiCzzB,GACrD,IAAMy0B,EAAyBC,EAAAA,qBAAqBC,mBAAmBlB,GACvEgB,EAAuBvvB,MACvB,IAAMlB,EAA2B1vB,KAAKgb,aAAa2P,YAAYgF,SAASwwB,GAExE,OADoBzwB,GAAeA,EAAYmb,SAASnf,IAMlD21B,GAAAjhD,UAAAiiD,iCAAR,SAAyClD,EAAiCrE,GAGxE,IAAMqF,EAAyBC,EAAAA,qBAAqBC,mBAAmBlB,GACjE2E,EAAsB3D,EAAuBvvB,MAG7Cq1B,EAAiBjmD,KAAKkmD,cAAc7oB,kBAAkB8iB,GACxDgG,EAAyB,GAE3BA,EADErL,IAAsC,IAA3Bx4C,MAAMC,QAAQu4C,GACFmL,EAAe9jD,OAAO,SAAC87B,GAC9C,OAAyC,EAAlC6c,EAAQnhC,QAAQskB,EAAW1oB,MAGX0wC,EAI3B,IAAMrF,EAAgB,GAUtB,OATAuF,EAAuB/jD,QAAQ,SAAC67B,GAC9B,GAAIA,EAAW6lB,GAAsB,CACnC,IAAMnF,EAAe1gB,EAAW6lB,GAAmC,aAC/DnF,GACFiC,EAAct/C,KAAKq9C,MAKlBiC,wBAxqBV7gD,EAAAA,uDAZQsiB,EAAAA,oBAGA48B,UAFA1rC,UAHA6yC,EAAAA,2BAAkDC,EAAAA,gBAAe1jD,WAAA,CAAA,CAAAC,KA2DrEC,EAAAA,cA6nBLw+C,IAloBE,SAAAA,GACUrmC,EACA2nC,EACAlvC,EACA6uC,EACYe,GAJZrjD,KAAAgb,aAAAA,EACAhb,KAAA2iD,kBAAAA,EACA3iD,KAAAyT,cAAAA,EACAzT,KAAAsiD,oBAAAA,EACYtiD,KAAAqjD,gBAAAA,EAvCdrjD,KAAA4hD,iBAAmB,GAyCzB5hD,KAAKshD,qBACLthD,KAAKmkD,kBAAoBnkD,KAAKgb,aAAaoH,SAASha,IAAuBk+C,EAAAA,kBAAmB,KAAM/E,EAAAA,YAAY1+C,UAChH7C,KAAKkmD,cAAgBlmD,KAAKgb,aAAaoH,SAASha,IAAmB+2B,GAAe,KAAMoiB,EAAAA,YAAY1+C,UAC/F7C,KAAKqjD,iBAA8C,oBAApBgD,EAAAA,kBAClCrmD,KAAKqjD,gBAAkBrjD,KAAKgb,aAAaoH,SAASha,IAAqBi+C,EAAAA,gBAAiB,OChD9F,IAAAE,IA6BSA,GAAAnmD,UAAAomD,YAAP,SAAmBC,GACjB,IAAM3H,EAAkB9+C,KAAK0mD,qCAI7B,OAH+B,IAA3B5H,EAAgBt8C,QAClBxC,KAAKyT,cAAcxG,KAAK,UAEnBjN,KAAK2iD,kBAAkBlD,WAAWgH,EAAmB3H,IAQvDyH,GAAAnmD,UAAAumD,uBAAP,SAA8BF,EAA2BriC,GACvD,IAAM06B,EAAkB9+C,KAAK0mD,qCACE,IAA3B5H,EAAgBt8C,QAClBxC,KAAKyT,cAAcxG,KAAK,UAgB1BjN,KAAK8+C,gBAAkB9+C,KAAK8+C,gBAAgBzzC,OAAOyzC,GACnD9+C,KAAKme,QAAQvT,KAAK,CAAE67C,kBAAiBA,EAAEriC,QAAOA,KAGxCmiC,GAAAnmD,UAAAwmD,QAAR,SAAgBH,EAA2BriC,GAA3C,IAAAljB,EAAAlB,KACE,GAAIA,KAAK8+C,iBAAiD,EAA9B9+C,KAAK8+C,gBAAgBt8C,OAAY,CAC3D,IAAMqkD,EAAkB7mD,KAAK8+C,gBAAgBzzC,OAAO,IAChDy7C,EAAY,KAKhB,GAJuB,iBAAZ1iC,IAETA,EAAUA,EAAQsC,SAEhBtC,EAAQoC,WAAW,OAAQpC,EAAQqC,SAAS,KAO9C,MAAM,IAAI/V,MAAM,yBANhB,IACEo2C,EAAYl1C,KAAKC,MAAMuS,GACvB,MAAAvK,GACA,MAAM,IAAInJ,MAAM,yBAKpB1Q,KAAK2iD,kBAAkB3C,sBAAsByG,EAAmBI,EAAiBC,GAAWlmC,KAC1FG,EAAAA,IAAI,WACF7f,EAAK49C,gBAAkB59C,EAAK49C,gBAAgB38C,OAAO,SAAAgV,GAAQ,OAAC0vC,EAAgB3vC,KAAK,SAAA8nC,GAAkB,OAAAA,EAAeL,eAAiBxnC,EAAKwnC,iBACtG,EAA9Bz9C,EAAK49C,gBAAgBt8C,QACvBtB,EAAK0lD,QAAQH,EAAmBriC,MAGpCnhB,cAQEsjD,GAAAnmD,UAAAsmD,mCAAR,WACE,IAAMK,EAAc/mD,KAAKgnD,4BAEzB,OADwBhnD,KAAKu+C,yBAAyBwI,IAOhDR,GAAAnmD,UAAAm+C,yBAAR,SAAiCwI,GAC/B,IAAKA,EACH,MAAO,GAGT,IAAMjI,EAAoC,GAQ1C,OAPAiI,EAAY3kD,QAAQ,SAAC6kD,GACnB,IAAMjI,EAAiC,CACrCL,aAAcsI,EAAcC,OAAOvjC,WACnCi7B,SAAUqI,EAAcC,OAAOtI,UAEjCE,EAAgBx9C,KAAK09C,KAEhBF,GAWFyH,GAAAnmD,UAAA+mD,eAAP,SAAsBV,GAAtB,IAAAvlD,EAAAlB,KACQ86C,EAAU96C,KAAKonD,8BAA8BX,GAC5B,IAAnB3L,EAAQt4C,QACVxC,KAAKyT,cAAcxG,KAAK,aAE1B,IAAMo6C,EAAkE,GAAtDZ,EAAkB7sC,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAAGlH,OACxD8kD,EAAuC,GAC7C,OAAID,GACFvM,EAAQ14C,QAAQ,SAACgvC,GACf,IAAImW,EACJA,EAAmBrmD,EAAKsmD,mBAAmBpd,qBAAqBgH,GAChEkW,EAAkBhmD,KAAKimD,KAElBE,EAAAA,SAASH,IAETtnD,KAAK22C,gBAAgB7N,WAAWgS,GAAS,EAAO,MAAM,IAOzDyL,GAAAnmD,UAAAgnD,8BAAR,SAAsCM,GAAtC,IAAAxmD,EAAAlB,KAGQ+mD,EAAc/mD,KAAKgnD,4BAGnBlM,EAAoB,GAQ1B,OAPAiM,EAAY3kD,QAAQ,SAACulD,GAGnB,IAAMC,EAASD,EAAWT,OAAOvjC,WAC3BytB,EAASlwC,EAAK2mD,sBAAsBD,EAAQF,GAClD5M,EAAQx5C,KAAK8vC,KAER0J,GAODyL,GAAAnmD,UAAAynD,sBAAR,SAA8BD,EAAgBF,GAG5C,IAAMI,EAAkB1H,EAAAA,qBAAqBC,mBAAmBqH,GAC1DK,EAAgBD,EAAgBl3B,MAChCo3B,EAAsBF,EAa5B,OAVuB9nD,KAAKkmD,cAAc7oB,kBAAkB2qB,GACpB9wC,KAAK,SAAC+mB,GAC5C,GAAIA,EAAW8pB,IACQ9pB,EAAW8pB,GAA6B,eACxCH,EACnB,OAAO,IAKWryC,IAUnBgxC,GAAAnmD,UAAA6nD,YAAP,SAAmB9I,EAAiCpW,GAClD,IAAKoW,EACH,MAAM,IAAIzuC,MAAM,mBAGlB,IAAKq4B,EAAK,CAER,IAAMoV,EAAiBn+C,KAAc,QAErC+oC,EAAMoV,GAAkBA,EAAejnB,YAAcinB,EAAejnB,WAAW9gB,KAGjF,GAAK2yB,GAAQzmC,MAAMC,QAAQwmC,GAA3B,CAIA,IAAMrZ,EAA2B1vB,KAAKgb,aAAa2P,YAAYM,UAE/D,GAAKyE,KAAeA,EAAYltB,OAAS,GAAzC,CAIA,IACMuiD,EADyB3E,EAAAA,qBAAqBC,mBAAmBlB,GACxBvuB,MAE/C,IAAKm0B,EACH,MAAM,IAAIr0C,MAAM,mDAElB,IAAM0F,EAAOsZ,EAAY0N,SAEzB2L,EAAI3mC,QAAQ,SAACmT,EAAYwC,GACvB,IAAMZ,EAAOf,EAAKc,KAAK,SAAAC,GAAQ,OAAAA,GAAQA,EAAK4tC,IAAoB5tC,EAAK4tC,GAA+B,eAAMxvC,IACpGg/B,EAAkBp9B,GAAQA,EAAK5B,GACrC,GAAKg/B,EAAL,CAGA,IAAMrnB,EAAgBwC,EAAYmb,SAAS0J,GAC3C,GAAIrnB,EAAe,CAEjB,IAAMg7B,EAAah7B,EAAc63B,GAC7BmD,GAEYA,EAAWv4B,SAAS0uB,MACpBtmC,GAEZmwC,EAAW1qB,SAAS6gB,GAAwBtmC,GAAO,GAAM,UAe3DwuC,GAAAnmD,UAAA4mD,0BAAR,WAEE,IACM9vB,EADiBl3B,KAAc,QACHk3B,WAClC,OAAKA,GAK6B,IAA9B50B,MAAMC,QAAQ20B,GACF,CAACA,GAEDA,EAAW7rB,OAAO,IAPzB,yBA1QZtL,EAAAA,uDAjBQsiB,EAAAA,oBAGA48B,UAEA9f,UACiB8K,UALjB12B,UAGA/K,SAEA8+B,UACAnnC,EAAkBwC,WAAA,CAAA,CAAAC,KAyBtBC,EAAAA,cAwQL0jD,IAhRE,SAAAA,GACUvrC,EACA2nC,EACAuD,EACAsB,EACA/zC,EACA7G,EACA+pC,EACY0B,GARtB,IAAAn3C,EAAAlB,KACUA,KAAAgb,aAAAA,EACAhb,KAAA2iD,kBAAAA,EACA3iD,KAAAkmD,cAAAA,EACAlmD,KAAAwnD,mBAAAA,EACAxnD,KAAAyT,cAAAA,EACAzT,KAAA4M,gBAAAA,EACA5M,KAAA22C,gBAAAA,EACY32C,KAAAq4C,mBAAAA,EAEpBr4C,KAAKme,QAAU,IAAIje,EAAAA,QACnBF,KAAKme,QAAQyC,KAAKunC,EAAAA,aAAa,MAAMllD,UAAU,SAACmT,GAC9ClV,EAAK0lD,QAAQxwC,EAAKqwC,kBAAmBrwC,EAAKgO,WAE5CpkB,KAAK8+C,gBAAkB,GC7B3B,IAAAsJ,IAsBUA,GAAAhoD,UAAAkhD,mBAAR,WAIE,GADqBthD,KAAK+nB,kBACR,CAChB,IAAM3F,EAAWpiB,KAAKgb,aAAaoH,SACnCpiB,KAAK4M,gBAAkBwV,EAASha,IAAqBI,EAAiB,KAAM+4C,EAAAA,YAAY1+C,UAGrF7C,KAAK4M,kBACR5M,KAAK4M,gBAAkBpE,EAAgBG,gBAOnCy/C,GAAAhoD,UAAA2nB,gBAAR,WACE,OAAI/nB,KAAKgb,aACAhb,KAAKgb,aAEVhb,KAAc,SAAKA,KAAc,QAAgB,aAC5CA,KAAc,QAAgB,aAEhC,MAKDooD,GAAAhoD,UAAA6nB,4BAAR,WACE,IACID,EADEhN,EAAehb,KAAK+nB,kBAK1B,OAHI/M,IACFgN,EAA2BhN,EAAaoH,SAASha,IAAIqgB,EAAAA,2BAEhDT,GAODogC,GAAAhoD,UAAAskB,oBAAR,SAA4BkC,GAC1B,IAAIG,EACJ,GAAsB,iBAAXH,EACT,GAAIA,EAAOpkB,OACT,IACEukB,EAAmBnV,KAAKC,MAAM+U,GAC9B,MAAA/M,GACA,MAAM,IAAInJ,MAAMkW,EAAS,qBAG3BG,EAAmB,OAEhB,CAAA,GAAsB,iBAAXH,EAGhB,MAAM,IAAIlW,MAAM,kBAFhBqW,EAAmBte,OAAOsB,OAAO,GAAI6c,GAIvC,OAAOG,GASDqhC,GAAAhoD,UAAAioD,wBAAR,SAAgCzhC,EAAaa,EAAgBK,GAC3D,IAAI7C,EACApS,EACEmI,EAAehb,KAAK+nB,kBACpBC,EAA2BhoB,KAAKioB,8BACtC,GAAIjN,GAAgBgN,EAA0B,CAC5C,IAAME,EAAqBF,EAAyBG,wBAAwBV,GACtEW,EAAuBC,EAAAA,mBAAmBC,iBAAgBld,GAAKpL,KAAKsoD,YAAattC,EAAaoH,WACpG6C,EAAeiD,EAAmBlgB,OAAOogB,KACrBnD,EAAapc,UAAYoc,EAAapc,SAASgf,WAAa5C,EAAapc,SAASgf,UAAUU,UACjF,iBAAlBT,GAA8Brf,OAAOM,KAAK+e,GAAetlB,QAClEiG,OAAOM,KAAK+e,GAAe1lB,QAAQ,SAAA+U,GACjC8N,EAAapc,SAASgf,UAAUU,QAAQC,iBAAiBrR,EAAM2Q,EAAc3Q,MAIjF8N,EAAapc,SAASgf,UAAUU,QAAQC,iBAAiB,iBAAiB,IAE5E3V,EAAW7S,KAAKuoD,aAAa/nD,KAAKykB,EAAc2B,QAEhD/T,EAAW7S,KAAKuoD,aAAa/nD,KAAKinB,EAAWb,GAE/C,OAAO/T,GAQFu1C,GAAAhoD,UAAAooD,UAAP,SAAiB5hC,EAAkBzC,EAAiBM,EAAyBjH,GAA7E,IAAAtc,EAAAlB,UAAiB,IAAA4mB,IAAAA,EAAA,SAAmC,IAAAnC,IAAAA,EAAA,IAElD,IAGI5R,EAHE41C,EAAYzoD,KAAK0kB,oBAAoBkC,GACrCkB,EAAgB9nB,KAAK0kB,oBAAoBD,GAC3CikC,EAAkB1oD,KAAK+kB,kBAAkBlD,YAAYsC,GAErDQ,EAAmB,CACrBhT,MAAO3R,KAAK4M,gBAAgB1G,mBAC5BqI,MAAO,IACPC,OAAQ,IACRsY,aAAa,GAGTE,GADNrC,EAAclc,OAAOsB,OAAO4a,EAAa8jC,IACJ9qC,YAE/B2J,EAAgB3C,EAA2B,gBAAK,EAwBtD,GAvBAA,EAAYhH,YAAc,SAAC4J,GAIzB,OAAMP,GAAgD,mBAArBA,EACxBA,EAAiBO,GAAK3G,KAC3BI,EAAAA,UAAU,SAAA9d,GACR,OAAIA,GACEokB,EACKpmB,EAAKomB,cAAcC,GAGvBhH,EAAAA,GAAGrd,MAIZokB,EACKpmB,EAAKomB,cAAcC,GAEnBhH,EAAAA,IAAG,KAGCoE,EAAYgkC,OAYpB,CACL,IAAKD,EAEH,YADA15C,QAAQ7D,MAAM,kBAAkBgZ,GAGlC,GAA+B,iBAApBukC,EACT/jC,EAAYE,WAAa,SACzBhS,EAAW7S,KAAKuoD,aAAa/nD,KAAKkoD,EAAiB/jC,QAC9C,GAA+B,mBAApB+jC,EAChB71C,EAAW7S,KAAKqoD,wBAAwB1jC,EAAa+jC,EAAiB5gC,QACjE,GAA+B,iBAApB4gC,EAA8B,CAG9C,GAAIA,EAAgBE,aAAc,CAChC,IAAMC,EAAY,CAChBzmC,SAAUpiB,KAAKoiB,SACfmG,QAAST,EACTygC,aAAcvoD,KAAKuoD,aACnBO,sBAAuB9oD,KACvBgW,SAAUhW,KAAKgb,aAAagO,6BAA6BhT,SACzD+yC,kBAAmB/oD,KAAKgpD,gBACxBC,sBAAuBjpD,KAAKipD,uBAG9B,OAAOP,EAA+B,cAAE/jC,EAAakkC,GAGrDh2C,EAAW7S,KAAKuoD,aAAa/nD,KAAKkoD,EAAiB/jC,GASvD,OALA3kB,KAAK6S,SAAWA,IACEA,EAAShE,UACzBgE,EAAShE,QAAQuW,uBAAwB,EACzCvS,EAAShE,QAAQ2C,UAAYqB,GAExBA,EA9CP7S,KAAKkpD,iBAAiBvkC,EAAamD,GAAe7kB,UAChD,SAAC4P,IACC3R,EAAK2R,SAAWA,IACEA,EAAShE,UACzBgE,EAAShE,QAAQuW,uBAAwB,EACzCvS,EAAShE,QAAQ2C,UAAYqB,GAE/B2K,EAAS3K,MA2CTu1C,GAAAhoD,UAAA4oD,gBAAR,SAAwBG,EAAaN,GAG/BM,GAAUA,EAAOtgD,UAAYsgD,EAAOtgD,SAASgf,WAAashC,EAAOtgD,SAASgf,UAAUU,UAClFsgC,EAAUO,SAAwC,iBAAtBP,EAAUO,UACxCP,EAAUO,QAAUx3C,KAAKC,MAAMg3C,EAAUO,UAEV,iBAAtBP,EAAUO,SAAwB3gD,OAAOM,KAAK8/C,EAAUO,SAAS5mD,QAC1EiG,OAAOM,KAAK8/C,EAAUO,SAAShnD,QAAQ,SAAA+U,GACrCgyC,EAAOtgD,SAASgf,UAAUU,QAAQC,iBAAiBrR,EAAM0xC,EAAUO,QAAQjyC,MAI/EgyC,EAAOtgD,SAASgf,UAAUU,QAAQC,iBAAiB,iBAAiB,KAIhE4/B,GAAAhoD,UAAA6oD,sBAAR,SAA8BE,EAAal7C,EAAc46C,GACvD,GAAIA,GAAaA,EAAUN,aAAc,CACvC,IAAM11C,EAAWg2C,EAAUN,aAAa/nD,KAAK2oD,EAAQl7C,GAKrD,OAJI4E,GAAcA,EAAShE,UACzBgE,EAAShE,QAAQuW,uBAAwB,EACzCvS,EAAShE,QAAQ2C,UAAYqB,GAExBA,IAWJu1C,GAAAhoD,UAAAipD,cAAP,SAAqBhiC,EAAiB7R,EAAgB4O,GAAtD,IAAAljB,EAAAlB,KACQspD,EAAStpD,KAAc,QAAc,YAAK,GAE1C68B,EAAQysB,EAAOzsB,OAASysB,EACxBr7C,EAAUq7C,EAAOr7C,SAAWq7C,EAAOC,QAAUD,EAAOC,OAAOt7C,SAAW,GACtEiU,EAAUonC,GAAUA,EAAOpnC,QAC3B/D,EAAU,IAAIje,EAAAA,QAEZ2Z,EAAA5L,EAAAkW,QAAAA,OAAA,IAAAtK,EAAA,KAAAA,EAIe,iBAFrBuK,EADGA,GACO,OAEwC,EAAjBA,EAAQ5hB,SACzC4hB,EAAUxS,KAAKC,MAAMuS,IAEjB,IAAA8jB,EAAA9jB,GAAA,GAAE81B,EAAAhS,EAAAygB,OAAAA,OAAA,IAAAzO,GAAAA,EAAgBsP,EAAAthB,EAAA2b,WAAAA,OAAA,IAAA2F,GAAAA,EAAoBC,EAAAvhB,EAAAwhB,aAAAA,OAAA,IAAAD,EAAA13C,UAAA03C,EAK5C,GAHIC,IAAiB33C,WAAa9D,EAAQy7C,eAAiB33C,YACzD9D,EAAQy7C,aAAeA,GAErBf,EAAQ,CACV,IAAMgB,EAAYvlC,EAAQ0iC,WAAa,GACvC74C,EAAQ06C,OAASA,EAAS,OAAQ,IAAIj7C,MAAOk8C,UAC7C5pD,KAAKwoD,UAAUv6C,EAASkW,EAAS3O,EAAQ,SAAChE,GAExCtQ,EAAK2oD,OAAO1lC,GAAW,CAAEhG,QAAOA,EAAEkJ,QAASA,EAASy/B,UAAS6C,EAAEn4C,UAASA,EAAEqyC,WAAUA,EAAEhnB,MAAOA,EAAO3a,QAAOA,SAExG,CACL,IAAM1Q,EAAYxR,KAAKwoD,UAAUv6C,EAASkW,EAAS3O,GAC7CsxC,EAAY74C,EAAQ64C,WAAa,GACvC9mD,KAAK6pD,OAAO1lC,GAAW,CAAEhG,QAAOA,EAAEkJ,QAASA,EAASy/B,UAASA,EAAEt1C,UAASA,EAAEqyC,WAAUA,EAAEhnB,MAAOA,EAAO3a,QAAOA,GAE7G,OAAO/D,GAUFiqC,GAAAhoD,UAAA0pD,sBAAP,SAA6BziC,EAAiB7R,EAAiB4O,GAA/D,IAAAljB,EAAAlB,KAIyB,iBAFrBokB,EADGA,GACO,QAGVA,EAAUxS,KAAKC,MAAMuS,IAEvB,IAAMklC,EAAStpD,KAAc,SAAKA,KAAc,QAAc,YAAK,GAC7DiO,EAAUq7C,EAAOr7C,QACvBA,EAAQ6Y,aAAc,EACtB7Y,EAAQE,QAAU,CAChB,CACE3C,KAAMxL,KAAK4M,gBAAgBpG,QAAS6H,IAAK,kBAAmBC,OAAQ,SAACuuB,GAC3D,IAAAhjB,GAAA5L,GAAA,IAAAkW,QAAAA,OAAA,IAAAtK,EAAA,KAAAA,EACR,GAAIsK,EAAS,CACX,IACM+jB,EADQhnC,EAAK2oD,OAAO1lC,IACpB,GAAE+1B,EAAAhS,EAAA/pB,QAAA4rC,OAAA,IAAA7P,EAAA,KAAAA,EAAgBsP,EAAAthB,EAAA12B,UAAAA,OAAA,IAAAg4C,EAAA,KAAAA,EAAkBC,EAAAvhB,EAAA7gB,QAAA2iC,OAAA,IAAAP,EAAA,KAAAA,EAAgBQ,EAAA/hB,EAAA55B,OAAA47C,OAAA,IAAAD,EAAA,KAAAA,EAAeE,EAAAjiB,EAAA2b,WAAAuG,OAAA,IAAAD,GAAAA,EACnEE,EAAU74C,EAAU3C,QAC1B,IAAKw7C,EACH,MAAM,IAAI35C,MAAM,YAElB,IAAI45C,EAAgB,GACpB,IAAmB,IAAfF,EAAqB,CACvB,IAAIG,OAAY,EAOhB,KALEA,EADEF,EAAQnoC,QACKmoC,EAAQnoC,QAAQ9B,WAAWuH,oBAAoBC,oBAAoBoiC,GAEnEK,EAAQjqC,WAAWuH,oBAAoBC,oBAAoBoiC,IAI1E,MAAM,IAAIt5C,MAAM,cAAcs5C,EAAO,qBAEvC,IAAMt6B,EAAc66B,EAAa5/B,YAAYM,UAE7Cq/B,EAAgB,CADH56B,GAAeA,EAAYyN,aAAezN,EAAYyN,YAAYC,cAE1E,CACL,IAAIotB,OAAI,EAGNA,EADEH,EAAQnoC,QACHmoC,EAAQnoC,QAAQ9B,WAAWuH,oBAAoBC,oBAAoBoiC,GAASzhC,QAAQiiC,MAAQ,IAAIjiD,IAEhG8hD,EAAQjqC,WAAWuH,oBAAoBC,oBAAoBoiC,GAASzhC,QAAQiiC,MAAQ,IAAIjiD,IAGjG+hD,EAAgBhoD,MAAM4O,KAAKs5C,EAAK/pC,UAEZ,mBAAXypC,GACTA,EAAOI,GAELP,GACFA,EAAQn/C,OAEV4G,EAAU7Q,MAAMsN,MAItB,CAAEzC,KAAMxL,KAAK4M,gBAAgBnG,OAAQ4H,IAAK,MAAOC,OAAQ,SAACuuB,GAAe,OAAA37B,EAAKuF,OAAOwH,MAGvF,IAAMkQ,EAAU,IAAIje,EAAAA,QACZ2Z,EAAA5L,EAAAkW,QAAAA,OAAA,IAAAtK,EAAA,KAAAA,EACAquB,EAAA9jB,EAAAukC,OAAAA,OAAA,IAAAzgB,EAAA,KAAAA,EAAegS,EAAA91B,EAAAy/B,WAAAA,OAAA,IAAA3J,GAAAA,EAAoBsP,EAAAplC,EAAAslC,aAAAA,OAAA,IAAAF,EAAAz3C,UAAAy3C,EACrCl7C,EAASL,EAAQK,OAKvB,GAHIo7C,IAAiB33C,WAAa9D,EAAQy7C,eAAiB33C,YACzD9D,EAAQy7C,aAAeA,GAErBf,EACF16C,EAAQ06C,OAASA,EAAS,OAAQ,IAAIj7C,MAAOk8C,UAC7C5pD,KAAKwoD,UAAUv6C,EAASkW,EAAS3O,EAAQ,SAAChE,GACxCtQ,EAAK2oD,OAAO1lC,GAAW,CAAEhG,QAAOA,EAAEkJ,QAASA,EAAS7V,UAASA,EAAElD,OAAMA,EAAEu1C,WAAUA,EAAEhnB,MAAOysB,EAAOzsB,aAE9F,CACL,IAAMrrB,EAAYxR,KAAKwoD,UAAUv6C,EAASkW,EAAS3O,GACnDxV,KAAK6pD,OAAO1lC,GAAW,CAAEhG,QAAOA,EAAEkJ,QAASA,EAAS7V,UAASA,EAAElD,OAAMA,EAAEu1C,WAAUA,EAAEhnB,MAAOysB,EAAOzsB,OAEnG,OAAO1e,GAOFiqC,GAAAhoD,UAAAoG,QAAP,WAAA,IAAAtF,EAAAlB,KAEU6Z,GADO7Z,KAAc,SAAKA,KAAc,QAAc,YAAK,IAC3D,IAAAmkB,QAAAA,OAAA,IAAAtK,EAAA,KAAAA,EACR,GAAIsK,EAAS,CACX,IACM+jB,EADQloC,KAAK6pD,OAAO1lC,IACpB,GAAE+1B,EAAAhS,EAAA/pB,QAAAA,OAAA,IAAA+7B,EAAA,KAAAA,EAAgBsP,EAAAthB,EAAA12B,UAAAA,OAAA,IAAAg4C,EAAA,KAAAA,EAAkBC,EAAAvhB,EAAA4e,UAAA2D,OAAA,IAAAhB,EAAA,GAAAA,EAAgBQ,EAAA/hB,EAAA7gB,QAAAA,OAAA,IAAA4iC,EAAA,KAAAA,EAAgBE,EAAAjiB,EAAA2b,WAAAA,OAAA,IAAAsG,GAAAA,EAAoBO,EAAAxiB,EAAArL,MAAA8tB,OAAA,IAAAD,EAAA,KAAAA,EAAcE,EAAA1iB,EAAAhmB,QAAA2oC,OAAA,IAAAD,EAAA,KAAAA,EACtGP,EAAU74C,EAAU3C,QAC1B,IAAKw7C,EACH,MAAM,IAAI35C,MAAM,YAIlB,IAAIo6C,EAAgB,GACpB,IAAmB,IAAfjH,EAAqB,CACvB,IAAM0G,EAAeF,EAAQnoC,QAAQ9B,WAAWuH,oBAAoBC,oBAAoBP,GACxF,IAAKkjC,EACH,MAAM,IAAI75C,MAAM,cAAc2W,EAAO,qBAEvC,IAAMqI,EAAc66B,EAAa5/B,YAAYM,UACvC9T,EAAOuY,GAAeA,EAAYyN,aAAezN,EAAYyN,YAAYC,SAC3EjmB,GAAmC,EAA3B1O,OAAOM,KAAKoO,GAAM3U,SAC5BsoD,EAAgB,CAAC3zC,QAEd,CACL,IAAMqzC,EAAyBH,EAAQnoC,QAAQ9B,WAAWuH,oBAAoBC,oBAAoBP,GAASkB,QAAQiiC,MAAQ,IAAIjiD,IAC/HuiD,EAAgBxoD,MAAM4O,KAAKs5C,EAAK/pC,UAKhB1O,UACd44C,GAASA,EAAMpB,QAAUoB,EAAMpB,OAAO1lB,QAC1B8mB,EAAMpB,OAAO1lB,OAAOxS,MAEhCy5B,GAAiBL,GACnBhiD,OAAOM,KAAK0hD,GAAWroD,QAAQ,SAAA2oD,GAC7B,IAAM35B,EAAsBq5B,EAAUM,GAChCC,EAAiBD,EAAEnxC,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,KAAM,GAChDuhD,EAAcH,EAAc9qC,IAAI,SAAAhV,GACpC,OAAOggD,EAAejvC,OAAO,SAACoS,EAAQ3W,GACpC,OAAI2W,IAAWA,EAAOvsB,eAAe4V,IAAQ2W,EAAkB,UAAEvsB,eAAe4V,IACvE2W,EAAO3W,GAEP,IAERxM,KACFyjB,KAAK,KACR,GAAI2C,EAAa,CACf,IAAM85B,EAAehqD,EAAK8Z,aAAa6M,UAAUkI,YAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC/D0nB,EAAYxX,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC3CtH,QAAQ,SAAA+rB,GACnB,GAAI08B,EACF3pD,EAAKigD,eAAe0J,EAAS18B,EAAQ88B,OAChC,CACL,IAAME,EAAah9B,EAAOvU,MAAM,KAChC1Y,EAAK8Z,aAAa2P,YAAY6S,SAAS0tB,EAAa7/C,OAAO8/C,GAAaF,GAAa,GAAM,SAOjG9sC,GACFA,EAAQvT,OAEV4G,EAAU7Q,UAOPynD,GAAAhoD,UAAAqG,OAAP,SAAco2B,GACZ,IACQhjB,GADOgjB,GAAS78B,KAAc,SAAKA,KAAc,QAAc,YAAK,IACpE,IAAAmkB,QAAAA,OAAA,IAAAtK,EAAA,KAAAA,EACR,GAAIsK,EAAS,CACX,IACM+jB,EADQloC,KAAK6pD,OAAO1lC,IACpB,GAAE+1B,EAAAhS,EAAA/pB,QAAAA,OAAA,IAAA+7B,EAAA,KAAAA,EAAgBsP,EAAAthB,EAAA12B,UAAAA,OAAA,IAAAg4C,EAAA,KAAAA,EACpBrrC,GACFA,EAAQvT,OAEN4G,GACFA,EAAU7Q,UAORynD,GAAAhoD,UAAAknB,cAAR,SAAsBC,GACpB,GAAIA,GAAOA,EAAI1U,UAAY0U,EAAI1U,SAAShE,QAAS,CAC/C,IAAM4Y,EAA4BF,EAAI1U,SAAShE,QAC/C,GAAI4Y,GAAaA,EAAUvF,QAAS,CAClC,IAAMwF,EAAaD,EAAUvF,QAAQwF,YAAc,KACnD,GAAIA,EACF,OAAOA,EAAWJ,gBAAgB1G,KAAKI,EAAAA,UAAU,WAAM,OAAAT,EAAAA,IAAG,OAIhE,OAAOA,EAAAA,IAAG,IAKZ6nC,GAAAhoD,UAAAgrD,WAAA,WACMprD,KAAK6S,UACP7S,KAAK6S,SAASlS,SAQVynD,GAAAhoD,UAAA8oD,iBAAR,SAAyBj7C,EAAcsa,GAAvC,IAAArnB,EAAAlB,KACQ2oD,EAAS16C,EAAQ06C,SAAU,EAC3BxqC,EAAU,IAAIje,EAAAA,QACpB,GAAIyoD,EAAQ,CACV,IAAI0C,EAAap9C,EAAQq9C,YAAc,KACvCC,OAAOC,UAAO7C,GAAQ8C,KAAK,SAACC,GAI1B,IACMC,EADgBD,EAFpBL,EADGA,GACU5iD,OAAOM,KAAK2iD,GAAQ96B,OAGH5oB,OAAO9G,EAAKkhB,UACtCwpC,EAAiBD,EAAgC,qBAAE,GACzD,IAAIC,EAgBF,MAAM,IAAIl7C,MAAM,aAfhB,IACMm7C,EADcF,EAAU3jC,yBAAyBG,wBAAwByjC,GAC3B5jD,OAAO9G,EAAKkhB,UAE5DypC,GAAgBA,EAAahjD,UAAYgjD,EAAahjD,SAASgf,WAAagkC,EAAahjD,SAASgf,UAAUU,UACvF,iBAAZA,GAAwB9f,OAAOM,KAAKwf,GAAS/lB,QACtDiG,OAAOM,KAAKwf,GAASnmB,QAAQ,SAAA+U,GAC3B00C,EAAahjD,SAASgf,UAAUU,QAAQC,iBAAiBrR,EAAMoR,EAAQpR,MAI3E00C,EAAahjD,SAASgf,UAAUU,QAAQC,iBAAiB,iBAAiB,IAE5E,IAAM3V,EAAW3R,EAAKqnD,aAAa/nD,KAAKqrD,EAAc59C,GACtDkQ,EAAQvT,KAAKiI,KAMnB,OAAOsL,GAEDiqC,GAAAhoD,UAAA+gD,eAAR,SAAuBhzB,EAAgBhT,EAActQ,GACnD,GAAIsjB,EAAQ,CACV,IAAMQ,EAAQxT,EAAKvB,MAAM,KACrB+U,EAAMnsB,QAAU,EAClB2rB,EAAOhT,GAAQtQ,EAEf8jB,EAAM7S,MAAM,GAAI,GAAGC,OAAO,SAACqlC,EAAMjmC,GAI/B,OAHMimC,EAAKx/C,eAAeuZ,IAASimC,EAAgB,UAAEx/C,eAAeuZ,KAClEimC,EAAKjmC,GAAQ,IAERimC,EAAKjmC,IACXgT,GAAQQ,EAAMA,EAAMnsB,OAAS,IAAMqI,yBAlhB7C9K,EAAAA,uDAXQ+rD,EAAAA,sBACArqC,UAFYgH,EAAAA,gCAGZpG,EAAAA,oBAHgHqG,EAAAA,SAAQ/lB,WAAA,CAAA,CAAAC,KA0B5HC,EAAAA,cAwgBLulD,IA7gBE,SAAAA,GACUG,EACAxjC,EACAgnC,EACA/wC,EACYoH,GAJZpiB,KAAAuoD,aAAAA,EACAvoD,KAAA+kB,kBAAAA,EACA/kB,KAAA+rD,0BAAAA,EACA/rD,KAAAgb,aAAAA,EACYhb,KAAAoiB,SAAAA,EAXdpiB,KAAAsoD,WAAyB,GAIzBtoD,KAAA6pD,OAAc,GASpB7pD,KAAKshD,qBCdT,IAAA0K,IAGEvjD,OAAAC,eAAYsjD,GAAA5rD,UAAA,aAAU,KAAtB,WACE,OAAOJ,KAAKgb,aAAa0M,4CAc3BskC,GAAA5rD,UAAA6rD,YAAA,WACEjsD,KAAKksD,iBAAiBC,YAAW,IAGnCH,GAAA5rD,UAAAgsD,aAAA,WACEpsD,KAAKksD,iBAAiBC,YAAW,IAMnCH,GAAA5rD,UAAAisD,4BAAA,WAIE,OADuBrsD,KAAK0nB,WAAWsnB,cAAcsd,wBAMpCtsD,KAAK0V,eAAe3E,SAAS/Q,KAAK4M,gBAAiC,iBAC3DgU,KACvBI,EAAAA,UAAU,SAACurC,GACT,OAAsB,IAAlBA,EACKhsC,EAAAA,IAAG,GAEHA,EAAAA,IAAG,MAVPA,EAAAA,IAAG,IAqBPyrC,GAAA5rD,UAAAosD,uBAAP,WACE,OAAOjsC,EAAAA,IAAG,IAMLyrC,GAAA5rD,UAAAqsD,mBAAP,WACE,OAAOlsC,EAAAA,IAAG,yBA/DbxgB,EAAAA,uDAVgBsiB,EAAAA,oBADRqqC,EAAAA,4BAGA57C,UACAtI,EAAe7F,WAAA,CAAA,CAAAC,KAkBnBC,EAAAA,cAsDLmpD,IA1DE,SAAAA,GACUhxC,EACAkxC,EACAx2C,EACY9I,GAHZ5M,KAAAgb,aAAAA,EACAhb,KAAAksD,iBAAAA,EACAlsD,KAAA0V,eAAAA,EACY1V,KAAA4M,gBAAAA,EAEf5M,KAAK4M,kBACR5M,KAAK4M,gBAAkBpE,EAAgBG,eCtB7C,IAAAgkD,IAOSA,GAAAvsD,UAAAwsD,6BAAP,SAAoC31B,EAAiB41B,GAArD,IAAA3rD,EAAAlB,KACE,IAAKi3B,IAAY41B,EACf,OAAO51B,EAGT,IACM61B,EADqBl7C,KAAKC,MAAMolB,GACE90B,OAAO,SAACA,GAC9C,IAAM4qD,EAAc7rD,EAAK8rD,eAAe7qD,GACxC,OAA+C,IAAxC0qD,EAAclzC,QAAQozC,KAG/B,OAAOn7C,KAAK+E,UAAUm2C,IAOhBH,GAAAvsD,UAAA4sD,eAAR,SAAuB7qD,GACrB,OAAOA,EAAO+vC,OAAS/vC,EAAO0I,4BA1BjC9K,EAAAA,aA4BD4sD,IA5BA,SAAAA,MCLsC,IAAInrC,EAAAA,eAAuC,iBAA1E,IAMPyrC,IAKEA,GAAA7sD,UAAA8sD,cAAA,SAAc11C,EAAamK,GACzB3hB,KAAK4hB,SAASpK,GAAOmK,GAGvBsrC,GAAA7sD,UAAA+sD,WAAA,SAAW31C,GACT,OAAIxX,KAAK4hB,SAASpK,GACTxX,KAAK4hB,SAASpK,IAErBxI,QAAQ8S,KAAK,UAAUtK,EAAG,QACnB,OAGJy1C,GAAA7sD,UAAAkhB,MAAP,SAAa9J,GACPA,GACFxX,KAAK4hB,SAASpK,GAAO,YACdxX,KAAK4hB,SAASpK,IAErBxX,KAAK4hB,SAAW,yBAtBrB7hB,EAAAA,aAyBDktD,IAzBA,SAAAA,KAGUjtD,KAAA4hB,SAAmC,WCPzCwrC,GAAAhtD,UAAAitD,wBAAA,SAAwBC,GAGpB,IAFA,IAAIC,EAAc,IAAIhlD,IAClB2B,EAAE,EACEsjD,EAAE,EAAGA,EAAEF,EAAa9qD,OAAQgrD,IAChCD,EAAYjlD,IAAIglD,EAAaE,GAAItjD,EAAE,GAAG,GACtCA,IAGJ,IAAIujD,EAAc,IAAIvtD,EAAAA,QAKtB,OAJAkB,WAAW,WACPqsD,EAAY7iD,KAAK2iD,IAClB,GAEIE,GAEfL,IAhBA,SAAAA,MCKA,IAAAM,IAqBcA,GAAAttD,UAAAutD,YAAV,SAAsBC,GAAtB,IAAA1sD,EAAAlB,KACI,IAAI,IAAIkK,KAAK0jD,EACT5tD,KAAK6tD,kBAAkBvlD,IAAI4B,EAAG0jD,EAAS1jD,IAE3ClK,KAAK6tD,kBAAkBzrD,QAAQ,SAAC0rD,EAAMC,GAClC7sD,EAAK6sD,IAAS,KAOtBL,GAAAttD,UAAA4tD,WAAA,SAAWC,GAAX,IAAA/sD,EAAAlB,KACI,OAAGA,KAAK6tD,mBAAiD,EAA5B7tD,KAAK6tD,kBAAkB9tC,KACzCkuC,EAAiBZ,wBAAwB/qD,MAAM4O,KAAKlR,KAAK6tD,kBAAkBptC,WAAWG,KACzFZ,EAAAA,IAAI,SAACkuC,GACDhtD,EAAK2sD,kBAAkBzrD,QAAQ,SAAC0rD,EAAMC,GAClC7sD,EAAKitD,YAAY7lD,IAAIylD,IAAOG,EAAc/lD,IAAI2lD,IAAQI,EAAc9lD,IAAI0lD,SAK7E14C,EAAAA,SAQfs4C,GAAAttD,UAAAguD,aAAA,SAAaL,GACT,OAAO/tD,KAAKmuD,YAAYhmD,IAAI4lD,IAAU/tD,KAAKmuD,YAAY/lD,IAAI2lD,IAKnEL,IAvDI,SAAAA,KACI1tD,KAAK6tD,kBAAoB,IAAItlD,IAC7BvI,KAAKmuD,YAAc,IAAI5lD,ICI/B,IAAA8lD,IAYSA,GAAAjuD,UAAAkuD,WAAP,SAAkBtrD,GAChBhD,KAAKogB,WAAapd,GAEbqrD,GAAAjuD,UAAAkO,OAAP,SAAcnD,GACNnL,KAAKmyB,kBACTnyB,KAAKmyB,iBAAiBzjB,UAAU1O,KAAK4M,gBAAgBjI,WAAYwG,yBAjBtEpL,EAAAA,uDAPQkQ,UADAzH,EAAe7F,WAAA,CAAA,CAAAC,KAanBC,EAAAA,kBAXuBC,EAAAA,cA0B5BurD,IAjBE,SAAAA,GACUl8B,EACYvlB,EACZ5J,GAFAhD,KAAAmyB,iBAAAA,EACYnyB,KAAA4M,gBAAAA,EACZ5M,KAAAgD,mBAAAA,GAJFhD,KAAAogB,WAAyB,OAM3BpgB,KAAK4M,kBACP5M,KAAK4M,gBAAkBpE,EAAgBG,eC8B7C,IAAM4lD,GAA+C,CAGnDpuD,EACA2Q,GACAyC,GACAtD,GACA4E,GACAE,GACAY,GACAg3C,GACAj1B,GACAlvB,EACA8uB,GACAphB,GACAyG,GACAC,GACAwC,GACA6C,GACAhK,GACAkjB,GAGApQ,GACAqX,GACAgE,GACAlN,GACAE,GACA0B,GACA/Q,GAGA+S,GACAQ,GACAG,GACAwB,GACAE,GAEAmI,GACAmM,GACAoD,GACA9kB,GACAkY,GAEA+M,GACAY,GACA2C,GACA0E,GACAoC,GACAnrB,GACAa,GACAi1B,GACAvqC,GACA2mC,QChGA3/C,OAAAC,eAAW8lD,GAAApuD,UAAA,WAAQ,KAAnB,WACE,OAAOJ,KAAKyuD,UAAYzuD,KAAKyuD,SAASl5C,IAAM,sCAK9C9M,OAAAC,eAAW8lD,GAAApuD,UAAA,iBAAc,KAAzB,WACE,IAAM8wB,EAASlxB,KAAKyuD,UAAYzuD,KAAKyuD,SAASC,WAC9C,OAAe,OAAXx9B,GAAmBA,IAAWnf,UACzBmf,EAEA,sCAMXzoB,OAAAC,eAAW8lD,GAAApuD,UAAA,kBAAe,KAA1B,WACE,OAAOJ,KAAK2uD,aAAe3uD,KAAK2uD,YAAYC,iBAAmB,sCAMjEnmD,OAAAC,eAAW8lD,GAAApuD,UAAA,aAAU,KAArB,WACE,OAAOJ,KAAK2uD,aAAe3uD,KAAK2uD,YAAYE,gBAAkB,sCAMhEpmD,OAAAC,eAAW8lD,GAAApuD,UAAA,aAAU,KAArB,WACE,OAAOJ,KAAK2uD,aAAe3uD,KAAK2uD,YAAYG,gBAAkB,sCAEhErmD,OAAAC,eAAW8lD,GAAApuD,UAAA,iBAAc,KAAzB,WAGE,OAFmBJ,KAAK2uD,aAAe3uD,KAAK2uD,YAAYE,gBAAkB,cAEtD,KADD7uD,KAAK2uD,aAAe3uD,KAAK2uD,YAAYG,gBAAkB,6CAM5ErmD,OAAAC,eAAW8lD,GAAApuD,UAAA,gBAAa,KAAxB,WACE,OAAO,sCAKTqI,OAAAC,eAAW8lD,GAAApuD,UAAA,eAAY,KAAvB,WACE,GAAIJ,KAAK2uD,aAAe3uD,KAAK2uD,YAAYI,iBAAkB,CACzD,IAAMA,EAAmB/uD,KAAK2uD,YAAYI,iBAO1C,MANmC,CACjCC,aAAcD,EAAiBC,cAAgB,IAC/CC,oBAAqBF,EAAiBE,qBAAuB,EAC7DC,uBAAwBH,EAAiBG,wBAA0B,IACnEC,qBAAsBJ,EAAiBI,sBAAwB,KAInE,OAAO,sCAKT1mD,OAAAC,eAAW8lD,GAAApuD,UAAA,aAAU,KAArB,WACE,OAAOJ,KAAK2uD,aAAe3uD,KAAK2uD,YAAYS,gBAAkB,sCAKhE3mD,OAAAC,eAAY8lD,GAAApuD,UAAA,eAAY,KAAxB,WAEE,OADqBJ,KAAKqvD,uBAAyBrvD,KAAKqvD,sBAAsBC,8CAGhF7mD,OAAAC,eAAY8lD,GAAApuD,UAAA,WAAQ,KAApB,WACE,OAAOJ,KAAK2uD,aAAe3uD,KAAK2uD,YAAYF,0CAE9ChmD,OAAAC,eAAY8lD,GAAApuD,UAAA,cAAW,KAAvB,WACE,OAAOJ,KAAKuvD,cAAgBvvD,KAAKuvD,aAAaZ,kEArFjD5uD,EAAAA,uDAJoB2oB,EAAAA,gBAEZ8mC,EAAAA,sBAAqB7sD,WAAA,CAAA,CAAAC,KAIaC,EAAAA,cAqF3C2rD,IArFE,SAAAA,GAAoBpsC,EAAwCitC,GAAxCrvD,KAAAoiB,SAAAA,EAAwCpiB,KAAAqvD,sBAAAA,UCkBrDI,GAAArvD,UAAAsvD,OAAP,SAAclyC,GACZxd,KAAK+d,QAAU/d,KAAK2vD,eAAenyC,GACnCzb,OAAO8b,iBAAiB,UAAW7d,KAAK+d,UAEnC0xC,GAAArvD,UAAA6B,QAAP,WACMjC,KAAK+d,SACPhc,OAAOqf,oBAAoB,UAAWphB,KAAK+d,UAQxC0xC,GAAArvD,UAAAwvD,KAAP,SAAYjuD,GACV,GAAKA,EAAL,CAGA,IAAIkuD,EAAc9tD,OACdJ,EAAQwsB,SACV0hC,EAAMluD,EAAQwsB,QAAoBpsB,cAC3BJ,EAAQwsB,QAEb0hC,GACFA,EAAIC,YAAYnuD,EAAS,4BA7C9B5B,EAAAA,oDAgDD0vD,IA5CE,SAAAA,KACEzvD,KAAK2vD,eAAiB,SAACnyC,GACrB,OAAO,SAACqf,GACN,IAAIl7B,EAAUk7B,EAAMzmB,KAChBzU,IACFA,EAAQouD,OAASlzB,EAAMmzB,QAED,mBAAbxyC,GACTA,EAAS7b,KCPnB,IAAAsuD,IAMSA,GAAA7vD,UAAA8vD,MAAP,WAAA,IAAAhvD,EAAAlB,KACOA,KAAKmwD,wBAGVnwD,KAAKmwD,uBAAuBT,OAAO,SAAC/tD,IAC7BT,EAAKsf,WAAatf,EAAKsf,UAAUT,KAAO,GAG7C7e,EAAKsf,UAAUpe,QAAQ,SAACob,EAAehG,GACb,mBAAbgG,GACTA,EAAS7b,QAKVsuD,GAAA7vD,UAAAyd,iBAAP,SAAwBL,GACtB,IAAMjI,GAAQ,IAAI7H,MAAOk8C,UAAUtxC,SAAS,IAAG,IAAIm0B,KAAK2jB,KAAqB,IAAhB3jB,KAAK4jB,UAElE,OADArwD,KAAKwgB,UAAUlY,IAAIiN,EAAIiI,GAChBjI,GAEF06C,GAAA7vD,UAAAghB,oBAAP,SAA2BkvC,IACpBtwD,KAAKwgB,WAAaxgB,KAAKwgB,UAAUT,KAAO,IAG7C/f,KAAKwgB,UAAUL,UAAOmwC,GACtBA,EAAU,4BA/BbvwD,EAAAA,uDARoB2oB,EAAAA,gBAEZ+mC,MAuCTQ,IA9BE,SAAAA,GAAoB7tC,EAA2B+tC,GAA3BnwD,KAAAoiB,SAAAA,EAA2BpiB,KAAAmwD,uBAAAA,EAC7CnwD,KAAKwgB,UAAY,IAAIjY,YCGhBgoD,GAAAnwD,UAAAowD,gBAAP,SAAuBx1C,GAAvB,IAAA9Z,EAAAlB,KACQswD,EAAUtwD,KAAKywD,gBAAgB5yC,iBAAiB7d,KAAKsO,OAAOqpB,KAAK33B,OACjE0wD,EAA4B1wD,KAAKgb,aAAa0H,cAChDguC,GACFA,EAA0BztD,UAAU,WAClC/B,EAAKuvD,gBAAgBrvC,oBAAoBkvC,KAG7C,IAAMK,EAA0B3wD,KAAKgb,aAAaoF,WAAWsC,cACzDiuC,GACFA,EAAwB1tD,UAAU,WAChC/B,EAAKuvD,gBAAgBN,uBAAuBluD,aAI3CsuD,GAAAnwD,UAAAkO,OAAP,SAAc3M,GAAd,IAAAT,EAAAlB,KACQgwD,EAASruD,EAAQouD,OACjB35C,EAAOzU,EAAQyU,KACf+Q,EAAc/Q,GAAQA,EAAKX,SAAW,KACxCm7C,EAA8B,KAClC,GAAKzpC,EAAL,CAGA,GAAmB,4BAAfA,EAA2C,CAG7C,IAAM0pC,EAAoB7wD,KAAK8wD,uBAC/BF,EAAa1/C,EAAAA,KAAK2/C,GAAmBjwC,KACnCC,EAAAA,UAAU,SAAC7F,GACT,IAAI+1C,EAAa/1C,EAAaoH,SAASha,IAAuB2iB,GAAmB,MACjF,OAAIgmC,EACKA,EAAW3hC,cAEb7O,EAAAA,IAAG,UAGT,CACL,IAAI9K,EAAUzV,KAAKgb,aAAa6M,UAAUV,GACtC1R,IACFm7C,EAAan7C,EAAQW,EAAKhM,YAG9B,GAAIwmD,EAAY,CACd,IAAMI,EAA6BhxD,KAAKixD,cAAa,EAAMjB,EAAQhwD,KAAKq2B,WACxEu6B,EAAWhwC,KAAKswC,EAAAA,gBAAgBjuD,UAAU,SAACC,GAEzChC,EAAKivD,uBAAuBP,KAAKoB,IAChC,WACDA,EAAQ56C,KAAKlT,QAAS,EACtBhC,EAAKivD,uBAAuBP,KAAKoB,QAI/BT,GAAAnwD,UAAA6wD,aAAR,SAAqB/tD,EAAiBirB,EAAa/mB,EAAsBxE,GASvE,YATuE,IAAAA,IAAAA,EAAA,WACpC,CACjCwT,KAAM,CACJlT,OAAMA,EACNkE,YAAWA,GAEbxE,KAAMA,EACNurB,OAAQA,IAIJoiC,GAAAnwD,UAAA0wD,qBAAR,WACE,IAAMtuC,EAAoBxiB,KAAKoiB,SAASha,IAAuB+oD,EAAAA,kBAAmB,MAC5EN,EAAoB,GAC1B,GAAIruC,EAAmB,CACrB,IAAM4uC,EAA4B5uC,EAAkB6uC,iBAChDD,GAAoC,EAArBA,EAAY5uD,QAC7B4uD,EAAYhvD,QAAQ,SAACge,GACmBA,EAAWuH,oBAAoB0E,mBACvDtQ,OAAO,SAACu1C,EAA0Bt2C,GAC9C,IAAMkR,EAAYlR,EAAakR,UAE/B,IAAe,IADDolC,EAASngC,UAAU,SAACogC,GAAwB,OAAAA,EAAMrlC,YAAcA,IAC5D,CAChB,IAAMO,EAAOzR,EAAagO,6BAC1BsoC,EAAShwD,KAAKmrB,GAEhB,OAAO6kC,GACNT,KAIT,OAAOA,GAKTpoD,OAAAC,eAAY6nD,GAAAnwD,UAAA,YAAS,KAArB,WACE,IAAMy2B,EAAgB72B,KAAKgb,aAAa0M,WACxC,OAAO8N,EAAAA,kBAAkBC,kBAAkBoB,yDAhG9C92B,EAAAA,uDAVoB2oB,EAAAA,gBACmBrG,EAAAA,oBAO/BotC,UADAQ,MAqGTM,IAhGE,SAAAA,GAAoBnuC,EAA4BpH,EAAoCm1C,EAAwDM,GAAxHzwD,KAAAoiB,SAAAA,EAA4BpiB,KAAAgb,aAAAA,EAAoChb,KAAAmwD,uBAAAA,EAAwDnwD,KAAAywD,gBAAAA,ECiB9I,IC1BYe,GAAAA,GCHAC,GAAAA,GCAAC,GAAAA,GH6BNC,GAA0C,CAC9CxxD,EACA2Q,GACAyC,GACAtD,GACA+D,GACAa,GACAE,GACAY,GACAs3C,GACAN,GACAj1B,GACAlvB,EACA8uB,GACAphB,GACAyG,GACAC,GACAwC,GACA6C,GACAhK,GACAkjB,GACAlC,GACA,CAAE24B,QAASC,EAAAA,kBAAmBC,SAAUtD,IACxCiB,GACAQ,KClDUuB,GAAAA,GAAAA,IAAW,IACnBA,GAAA,MAAA,GAAA,QACAA,GAAAA,GAAA,SAAA,GAAA,WACAA,GAAAA,GAAA,QAAA,GAAA,UACAA,GAAAA,GAAA,eAAA,GAAA,iBACAA,GAAAA,GAAA,KAAA,GAAA,OACAA,GAAAA,GAAA,YAAA,GAAA,cACAA,GAAAA,GAAA,KAAA,GAAA,OACAA,GAAAA,GAAA,cAAA,GAAA,gBACAA,GAAAA,GAAA,YAAA,GAAA,cACAA,GAAAA,GAAA,QAAA,GAAA,UACAA,GAAAA,GAAA,iBAAA,IAAA,mBACAA,GAAAA,GAAA,eAAA,IAAA,iBACAA,GAAAA,GAAA,GAAA,IAAA,KACAA,GAAAA,GAAA,MAAA,IAAA,QACAA,GAAAA,GAAA,GAAA,IAAA,KACAA,GAAAA,GAAA,MAAA,IAAA,SCnBQC,GAAAA,GAAAA,IAAS,IAKjBA,GAAA,MAAA,GAAA,QAKAA,GAAAA,GAAA,QAAA,GAAA,WCVQC,GAAAA,GAAAA,IAAY,IAEpBA,GAAA,MAAA,GAAA,QAMAA,GAAAA,GAAA,IAAA,GAAA,MAMAA,GAAAA,GAAA,GAAA,GAAA,KCRJ,IAAAK,IACEA,GAAA3xD,UAAA4xD,QAAA,SAAQC,GACN,IAAMC,EAAMD,EAAGpnD,MACf,MAAO,CAAC,CACNonC,YAAeggB,EAAGE,UAClB7f,QAAWkf,GAAYY,KACvBlgB,MAASggB,EAAGrnD,MACZ6+B,SAAYgoB,GAAaW,IACzBhgB,YAAeof,GAAUvf,SAG/B6f,IAXA,SAAAA,MCAA,IAAAO,IACIA,GAAAlyD,UAAA4xD,QAAA,SAAQC,GACJ,IAAMM,EAAM,GACNC,EAAOP,EAAGpnD,MAgBhB,OAfA2nD,EAAIC,WAAaF,EAAIjxD,KAAK,CACtB2wC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYkB,eACxBxgB,MAAUsgB,EAAIC,UACd/oB,SAAagoB,GAAaW,IAC1BhgB,YAAeof,GAAUvf,QAE7BsgB,EAAIG,SAAWJ,EAAIjxD,KAAK,CACpB2wC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYoB,YACxB1gB,MAAUsgB,EAAIG,QACdjpB,SAAagoB,GAAaW,IAC1BhgB,YAAeof,GAAUvf,QAGtBqgB,GAEfD,IArBA,SAAAA,MCAA,IAAAO,IACIA,GAAAzyD,UAAA4xD,QAAA,SAAQC,GACJ,IAAMa,EAAOb,EAAGpnD,MACV0nD,EAAM,GAaZ,OAZAO,EAAIjoD,MAAMzI,QAAQ,SAAA2wD,GACdR,EAAIjxD,KAAK,CACL2wC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYwB,MACxB9gB,MAAU6gB,EAAGloD,MACb6+B,SAAagoB,GAAauB,GAC1B5gB,YAAcof,GAAUvf,UAGhCqgB,EAAI,GAAa,SAAI,IACrBA,EAAIA,EAAI/vD,OAAQ,GAAa,SAAI,IACjC+vD,EAAIA,EAAI/vD,OAAQ,GAAa,SAAIkvD,GAAaW,IACvCE,GAEfM,IAlBA,SAAAA,MCAA,IAAAK,IACIA,GAAA9yD,UAAA4xD,QAAA,SAAQC,GACJ,IAAMM,EAAM,GACNY,EAAOlB,EAAGpnD,MAgBhB,OAfmB,MAAlBsoD,EAAIC,YAAuBb,EAAIjxD,KAAK,CACjC2wC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYkB,eACxBxgB,MAAUihB,EAAIC,WACd1pB,SAAagoB,GAAaW,IAC1BhgB,YAAeof,GAAUvf,QAEZ,MAAhBihB,EAAIE,UAAqBd,EAAIjxD,KAAK,CAC/B2wC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYoB,YACxB1gB,MAAUihB,EAAIE,SACd3pB,SAAagoB,GAAaW,IAC1BhgB,YAAeof,GAAUvf,QAGtBqgB,GAEfW,IArBA,SAAAA,MCAA,IAAAI,IACIA,GAAAlzD,UAAA4xD,QAAA,SAAQC,GACJ,IAAMsB,EAAOtB,EAAGpnD,MAChB,GAAuB,GAApB0oD,EAAI1oD,MAAMrI,OAAa,MAAO,GAEjC,IAAM+vD,EAAM,GACZ,OAAGgB,EAAIC,aAAiC,MAAlBD,EAAIE,YACtBlB,EAAIjxD,KAAK,CACL2wC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYY,KACxBlgB,MAAUqhB,EAAIG,UACdhqB,SAAagoB,GAAaW,IAC1BhgB,YAAcof,GAAUvf,QAErBqgB,IAEPgB,EAAII,mBAAmB/5C,MAAM,KAAKxX,QAAQ,SAAAmT,GACtCA,GAAMg9C,EAAIjxD,KAAK,CACX2wC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYwB,MACxB9gB,MAAU38B,EACVm0B,SAAagoB,GAAauB,GAC1B5gB,YAAcof,GAAUvf,UAGhB,EAAbqgB,EAAI/vD,QACH+vD,EAAI,GAAa,SAAI,IACrBA,EAAIA,EAAI/vD,OAAQ,GAAa,SAAI,IACjC+vD,EAAIA,EAAI/vD,OAAQ,GAAa,SAAIkvD,GAAaW,IACvCE,GAEA,KAIvBe,IAnCA,SAAAA,MCAA,IAAAM,IACIA,GAAAxzD,UAAA4xD,QAAA,SAAQC,GACJ,IAAM4B,EAAM5B,EAAGpnD,MACf,MAAO,CAAC,CACJonC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYwB,MACxB9gB,MAAU2hB,EAAGC,UACbpqB,SAAagoB,GAAaW,IAC1BhgB,YAAcof,GAAUvf,SAGpC0hB,IAXA,SAAAA,MCAA,IAAAG,IACIA,GAAA3zD,UAAA4xD,QAAA,SAAQC,GACJ,IAAMM,EAAM,GACNL,EAAMD,EAAGpnD,MACf,OAAsB,GAAnBqnD,EAAGrnD,MAAMrI,OACD,CAAC,CACJyvC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYwB,MACxB9gB,MAAUggB,EAAGrnD,MAAM,GACnB6+B,SAAagoB,GAAaW,IAC1BhgB,YAAcof,GAAUvf,SAEhCggB,EAAGrnD,MAAMzI,QAAQ,SAAA4xD,GACbzB,EAAIjxD,KAAK,CACL2wC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYwB,MACxB9gB,MAAU8hB,EACVtqB,SAAagoB,GAAauB,GAC1B5gB,YAAcof,GAAUvf,UAGhCqgB,EAAI,GAAa,SAAI,IACrBA,EAAIA,EAAI/vD,OAAQ,GAAa,SAAI,IACjC+vD,EAAIA,EAAI/vD,OAAQ,GAAa,SAAIkvD,GAAaW,IACvCE,IAEfwB,IA1BA,SAAAA,MCAA,IAAAE,IACIA,GAAA7zD,UAAA4xD,QAAA,SAAQC,GACJ,IAAMiC,EAAMjC,EAAGpnD,MACf,MAAO,CAAC,CACJonC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYwB,MACxB9gB,MAAUgiB,EAAGC,WACbzqB,SAAagoB,GAAaW,IAC1BhgB,YAAcof,GAAUvf,SAGpC+hB,IAXA,SAAAA,MCAA,IAAAG,IACIA,GAAAh0D,UAAA4xD,QAAA,SAAQC,GACJ,IAAMM,EAAM,GACN8B,EAAOpC,EAAGpnD,MAgBhB,OAfAwpD,EAAI5B,WAAaF,EAAIjxD,KAAK,CACtB2wC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYkB,eACxBxgB,MAAUmiB,EAAI5B,UACd/oB,SAAagoB,GAAaW,IAC1BhgB,YAAeof,GAAUvf,QAE7BmiB,EAAI1B,SAAWJ,EAAIjxD,KAAK,CACpB2wC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYoB,YACxB1gB,MAAUmiB,EAAI1B,QACdjpB,SAAagoB,GAAaW,IAC1BhgB,YAAeof,GAAUvf,QAGtBqgB,GAEf6B,IArBA,SAAAA,MCAA,IAAAE,IACIA,GAAAl0D,UAAA4xD,QAAA,SAAQC,GACJ,IAAMsC,EAAOtC,EAAGpnD,MAChB,MAAO,CAAC,CACJonC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYwB,MACxB9gB,MAAUqiB,EAAIC,cACd9qB,SAAagoB,GAAaW,IAC1BhgB,YAAcof,GAAUvf,SAGpCoiB,IAXA,SAAAA,MCAA,IAAAG,IACIA,GAAAr0D,UAAA4xD,QAAA,SAAQC,GACJ,IAAMsC,EAAOtC,EAAGpnD,MAChB,MAAO,CAAC,CACJonC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYwB,MACxB9gB,MAAUqiB,EAAIG,SACdhrB,SAAagoB,GAAaW,IAC1BhgB,YAAcof,GAAUvf,SAGpCuiB,IAXA,SAAAA,MCiGA,IAAAE,IACIA,GAAAv0D,UAAA4xD,QAAA,SAAQC,GACJ,IAAMM,EAAM,GACNgC,EAAOtC,EAAGpnD,MAChB,GAA6B,iBAAnB0pD,EAAa,UAAgB,CACnC,IAAIK,EAtGhB,SAASC,EAAQC,EAAWC,GACxB,IAAIC,EAAQ,IAAItnD,KAEZxK,EAAS,GAEb,GAAI4xD,EAAUG,YAAcH,EAAUI,UAGlC,OADkBJ,EAAUK,SAAW,KAAOL,EAAUG,WAAa,QAAU,SAE3E,IAAK,aACoB,IAAlBG,EAAAA,OAAOJ,KACNA,EAAQK,EAAAA,QAAQL,GAAQ,IAE5B9xD,EAAO5B,KAAK+zD,EAAAA,QAAQC,EAAAA,YAAYN,GAAQ,IACxC,MACJ,IAAK,YACoB,IAAlBI,EAAAA,OAAOJ,KACNA,EAAQK,EAAAA,QAAQL,GAAQ,IAE5B9xD,EAAO5B,KAAK+zD,EAAAA,QAAQE,EAAAA,UAAUP,GAAQ,IACtC,MACJ,IAAK,cACD9xD,EAAO5B,KAAKk0D,EAAAA,aAAaR,IACzB,MACJ,IAAK,aACD9xD,EAAO5B,KAAKm0D,EAAAA,WAAWT,IACvB,MACJ,IAAK,aACD9xD,EAAO5B,KAAKo0D,EAAAA,YAAYV,IACxB,MACJ,IAAK,YACD9xD,EAAO5B,KAAKq0D,EAAAA,UAAUX,IACtB,MACJ,QACI9xD,EAAO5B,KAAK0zD,QAGjB,GAA2B,QAAvBF,EAAUK,UAA2C,YAArBL,EAAUc,OAEjD1yD,EAAO5B,KAAK0zD,QACT,GAA2B,QAAvBF,EAAUK,UAA0C,IAApBL,EAAUp3B,MAAa,CAE9D,IAAIm4B,EAAQR,EAAAA,QAAQL,EAA4B,WAArBF,EAAUc,OAAsB,GAAK,GAChE1yD,EAAO5B,KAAKu0D,QACT,GAAyB,YAArBf,EAAUc,OAEjB,OAAQd,EAAUK,UACd,IAAK,OACDjyD,EAAO5B,KAAKg0D,EAAAA,YAAYN,GAAQO,EAAAA,UAAUP,IAC1C,MACJ,IAAK,QACD9xD,EAAO5B,KAAKk0D,EAAAA,aAAaR,GAAQS,EAAAA,WAAWT,IAC5C,MACJ,IAAK,OACD9xD,EAAO5B,KAAKo0D,EAAAA,YAAYV,GAAQW,EAAAA,UAAUX,IAC1C,MACJ,QACI9xD,EAAO5B,KAAK0zD,QAKpB,OADkBF,EAAUK,SAAW,IAAML,EAAUc,QAEnD,IAAK,eACD1yD,EAAO5B,KAAK+zD,EAAAA,QAAQL,GAA0B,EAAnBF,EAAUp3B,OAAa23B,EAAAA,QAAQL,GAAQ,IAClE,MACJ,IAAK,aACD9xD,EAAO5B,KAAK+zD,EAAAA,QAAQL,EAAO,GAAIK,EAAAA,QAAQL,EAAOF,EAAUp3B,QACxD,MACJ,IAAK,gBACDx6B,EAAO5B,KAAKw0D,EAAAA,SAASd,GAA0B,EAAnBF,EAAUp3B,OAAa23B,EAAAA,QAAQL,GAAQ,IACnE,MACJ,IAAK,cACD9xD,EAAO5B,KAAK+zD,EAAAA,QAAQL,EAAO,GAAIc,EAAAA,SAASd,EAAOF,EAAUp3B,QACzD,MACJ,IAAK,iBACDx6B,EAAO5B,KAAKy0D,EAAAA,UAAUf,GAA0B,EAAnBF,EAAUp3B,OAAa23B,EAAAA,QAAQL,GAAQ,IACpE,MACJ,IAAK,eACD9xD,EAAO5B,KAAK+zD,EAAAA,QAAQL,EAAO,GAAIe,EAAAA,UAAUf,EAAOF,EAAUp3B,QAC1D,MACJ,IAAK,gBACDx6B,EAAO5B,KAAK00D,EAAAA,SAAShB,GAA0B,EAAnBF,EAAUp3B,OAAa23B,EAAAA,QAAQL,GAAQ,IACnE,MACJ,IAAK,cACD9xD,EAAO5B,KAAK+zD,EAAAA,QAAQL,EAAO,GAAIgB,EAAAA,SAAShB,EAAOF,EAAUp3B,QACzD,MACJ,QACIx6B,EAAO5B,KAAK0zD,GAMxB,OADA9xD,EAASA,EAAO8c,IAAI,SAAA7I,GAAQ,OAAAtJ,EAAAA,OAAOsJ,EAAM49C,EAAUkB,cAAgB,gBAS1CpB,CAAQN,EAAIO,UAAW7C,EAAGiE,SACrB,IAAtBtB,EAAWpyD,QAAgB+vD,EAAIjxD,KAAK,CAChC2wC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYwB,MACxB9gB,MAAU0iB,EAAW,GACrBlrB,SAAagoB,GAAaW,IAC1BhgB,YAAcof,GAAUvf,QAEN,IAAtB0iB,EAAWpyD,QAAgB+vD,EAAIjxD,KAAK,CAChC2wC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYkB,eACxBxgB,MAAU0iB,EAAW,GACrBlrB,SAAagoB,GAAaW,IAC1BhgB,YAAeof,GAAUvf,OAC1B,CACCD,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYoB,YACxB1gB,MAAU0iB,EAAW,GACrBlrB,SAAagoB,GAAaW,IAC1BhgB,YAAeof,GAAUvf,aAI7BqgB,EAAIjxD,KAAK,CACL2wC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYwB,MACxB9gB,MAAUqiB,EAAIO,UACdprB,SAAagoB,GAAaW,IAC1BhgB,YAAcof,GAAUvf,QAGhC,OAAOqgB,GAEfoC,IAtCA,SAAAA,MCjGA,IAAAwB,IACIA,GAAA/1D,UAAA4xD,QAAA,SAAQC,GACJ,IAAMmE,EAAQnE,EAAGpnD,MACjB,GAAwB,GAArBurD,EAAKvrD,MAAMrI,QAAgB4zD,EAAK3C,WAE9B,CACD,IAAM4C,EAAM,GAUZ,OATAD,EAAKzC,mBAAmB/5C,MAAM,KAAKxX,QAAQ,SAAAmT,GACvCA,GAAM8gD,EAAI/0D,KAAK,CACX2wC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYwB,MACxB9gB,MAAU38B,EACVm0B,SAAagoB,GAAauB,GAC1B5gB,YAAcof,GAAUvf,UAGhB,EAAbmkB,EAAI7zD,QACH6zD,EAAI,GAAa,SAAI,IACrBA,EAAIA,EAAI7zD,OAAQ,GAAa,SAAI,IACjC6zD,EAAIA,EAAI7zD,OAAQ,GAAa,SAAIkvD,GAAaW,IACvCgE,GAEA,GAlBX,MAAO,IAsBnBF,IA1BA,SAAAA,MCAA,IAAAG,IACIA,GAAAl2D,UAAA4xD,QAAA,SAAQC,GAEJ,IAAMsE,EAAMtE,EAAGpnD,MACf,MAAO,CAAC,CACJonC,YAAgBggB,EAAGE,UACnB7f,QAAYkf,GAAYwB,MACxB9gB,MAAUqkB,EAAG1rD,MACb6+B,SAAagoB,GAAaW,IAC1BhgB,YAAcof,GAAUvf,SAGpCokB,IAZA,SAAAA,MCAA,IAAAE,IACEA,GAAAp2D,UAAA4xD,QAAA,SAAQC,GACN,IAAMwE,EAAOxE,EAAGpnD,MACV0nD,EAAM,GAEZ,OAAIkE,EAAIjD,aAAgC,MAAjBiD,EAAIC,WACzBnE,EAAIjxD,KAAK,CACP2wC,YAAeggB,EAAGE,UAClB7f,QAAWkf,GAAYY,KACvBlgB,MAASukB,EAAI/C,UACbhqB,SAAYgoB,GAAaW,IACzBhgB,YAAeof,GAAUvf,QAEpBqgB,IAGPkE,EAAI9C,mBAAmB/5C,MAAM,KAAKxX,QAAQ,SAAAu0D,GACxCA,GAAapE,EAAIjxD,KAAK,CACpB2wC,YAAeggB,EAAGE,UAClB7f,QAAWkf,GAAYwB,MACvB9gB,MAASykB,EACTjtB,SAAYgoB,GAAauB,GACzB5gB,YAAeof,GAAUvf,UAGZ,EAAbqgB,EAAI/vD,QACN+vD,EAAI,GAAa,SAAI,IACrBA,EAAIA,EAAI/vD,OAAS,GAAa,SAAI,IAClC+vD,EAAIA,EAAI/vD,OAAS,GAAa,SAAIkvD,GAAaW,IACxCE,GAEA,KAIfiE,IAnCA,SAAAA,MCYA,IAAAI,IAsBkBA,GAAAjuD,YAAd,WAII,OAHIiuD,GAA6BC,YAC7BD,GAA6BC,UAAY,IAAID,IAE1CA,GAA6BC,WAGxCD,GAAAx2D,UAAA02D,WAAA,SAAWC,GACP,OAAO/2D,KAAKg3D,6BAA6B5uD,IAAI2uD,IA5BlCH,GAAAC,UAA0C,KA8B7DD,IA5BI,SAAAA,KADQ52D,KAAAg3D,6BAAyE,IAAIzuD,IAEjFvI,KAAKg3D,6BAA6B1uD,IAAI2uD,EAAAA,YAAYC,KAAM,IAAInF,IAC5D/xD,KAAKg3D,6BAA6B1uD,IAAI2uD,EAAAA,YAAYE,WAAY,IAAIX,IAClEx2D,KAAKg3D,6BAA6B1uD,IAAI2uD,EAAAA,YAAYG,UAAW,IAAI9E,IACjEtyD,KAAKg3D,6BAA6B1uD,IAAI2uD,EAAAA,YAAYI,cAAe,IAAI/E,IACrEtyD,KAAKg3D,6BAA6B1uD,IAAI2uD,EAAAA,YAAYK,aAAc,IAAIzE,IACpE7yD,KAAKg3D,6BAA6B1uD,IAAI2uD,EAAAA,YAAYM,YAAa,IAAIrE,IACnElzD,KAAKg3D,6BAA6B1uD,IAAI2uD,EAAAA,YAAYO,UAAW,IAAIlE,IACjEtzD,KAAKg3D,6BAA6B1uD,IAAI2uD,EAAAA,YAAYQ,WAAY,IAAI7D,IAClE5zD,KAAKg3D,6BAA6B1uD,IAAI2uD,EAAAA,YAAYS,UAAW,IAAI3D,IACjE/zD,KAAKg3D,6BAA6B1uD,IAAI2uD,EAAAA,YAAYU,YAAa,IAAI1D,IACnEj0D,KAAKg3D,6BAA6B1uD,IAAI2uD,EAAAA,YAAYW,WAAY,IAAIxD,IAClEp0D,KAAKg3D,6BAA6B1uD,IAAI2uD,EAAAA,YAAYY,eAAgB,IAAIvD,IACtEt0D,KAAKg3D,6BAA6B1uD,IAAI2uD,EAAAA,YAAYa,aAAc,IAAIrD,IACpEz0D,KAAKg3D,6BAA6B1uD,IAAI2uD,EAAAA,YAAYc,WAAY,IAAIpD,IAClE30D,KAAKg3D,6BAA6B1uD,IAAI2uD,EAAAA,YAAYe,YAAa,IAAI7B,IACnEn2D,KAAKg3D,6BAA6B1uD,IAAI2uD,EAAAA,YAAYgB,MAAO,IAAI3B,YCpBnE4B,GAAA93D,UAAA+3D,iBAAA,WACE,OAAOn4D,KAAKo4D,wBAAwBD,oBAG/BD,GAAA93D,UAAAi4D,oBAAP,SAA2B7iD,GACzB,IAAI8iD,EACEC,EAAsB,GAC5B/iD,EAAOpT,QAAQ,SAAA6vD,GACRA,EAAGpnD,MAAM2tD,YACZF,EAAwB1B,GAA6BjuD,cAAcmuD,WAAW7E,EAAGiE,QAAQuC,oBAChEF,EAAoBj3D,KAAIgJ,MAAxBiuD,EAAmBntD,GAASktD,EAAsBtG,QAAQC,OAIvFjyD,KAAKgb,aAAauN,QAA6B,oBAAI3W,KAAK+E,UAAU4hD,GAElEv4D,KAAKgb,aAAauN,QAAqC,4BAAI3W,KAAK+E,UAAU4hD,IAGrEL,GAAA93D,UAAAs4D,0BAAP,SAAiClvB,GAC/BxpC,KAAKgb,aAAauN,QAAgC,uBAAIihB,wBA9BzDzpC,EAAAA,uDAJQsiB,EAAAA,oBAEAs2C,EAAAA,2BAuDTT,IAlDE,SAAAA,GACUl9C,EACAo9C,GADAp4D,KAAAgb,aAAAA,EACAhb,KAAAo4D,wBAAAA,ECLZ,IAAAQ,IAOSA,GAAAx4D,UAAAy4D,QAAP,WACE,IAAMz4C,EAAyBpgB,KAAKgb,cAAgBhb,KAAKgb,aAAa8b,oBACtE,OAAOvW,EAAAA,GAAG,MAAMK,KACdG,EAAAA,IAAI,WACEX,GACFA,EAAW+nB,YAAYv9B,KAAK,CAAEhI,KAAM,cAIxCf,EAAAA,MAAM,0BAhBX9B,EAAAA,uDAPoBsiB,EAAAA,gBA0BrBu2C,IAjBE,SAAAA,GAAoB59C,GAAAhb,KAAAgb,aAAAA,UCGb89C,GAAA14D,UAAA24D,QAAP,SAAeC,EAAoB/hC,GACjC,IAAMvP,EAAa1nB,KAAK6nB,UAAU7M,aAAa0M,YAAoC,KACnF,GAAIA,EAAY,CACd,IAAMuxC,EAAQvxC,EAAWuxC,MACzB,GAAIA,GAAsC,mBAAtBA,EAAMD,GACxB,OAAOC,EAAMD,GAAY/hC,GAG7B,OAAO1W,EAAAA,GAAG,4BAhBbxgB,EAAAA,uDAJQ+qB,EAAAA,aAsBTguC,IAhBE,SAAAA,GAAoBjxC,GAAA7nB,KAAA6nB,UAAAA,ECStB,IAAAqxC,IAgCSA,GAAA94D,UAAA+4D,oBAAP,SAA2B9xC,GAA3B,IAAAnmB,EAAAlB,KACE,IAAKqnB,EACH,MAAM,IAAI3W,MAAM,wBAElB,GAAI1Q,KAAKo5D,uBAAwB,CAC/B,IAAIx1B,EAAU,GACd,GAAI5jC,KAAK6nB,UAAW,CAClB,IACMwxC,EADiCr5D,KAAK6nB,UAAU7M,aAAayR,KAAKrM,WAAWuH,oBAAoBC,oBAAoBP,GACpFQ,UACnCwxC,GAAiBA,EAAcz3D,eAAe,uBAGhDgiC,EAAUy1B,EADkBA,EAAmC,qBAEtDA,GAAiBA,EAAcz3D,eAAe,qBACvDgiC,EAAUy1B,EAA+B,iBAE3C,IAAMC,EAAgBD,EAAc9wC,QAAa,KAAK,GACtD,IAAK+wC,GAAOA,EAAI92D,OAAS,EAEvB,OADAxC,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAgB3F,sBAAuB,CAAE4M,WAAW,IACjFyJ,EAAAA,MAET,IAAMi8C,EAAiBv5D,KAAKo5D,uBAAuBI,UAAU51B,EAAS,CACpE4mB,KAAM8O,EAAI92D,OACVi3D,UAAW,SAAC90B,GACV,GAAIriC,MAAMC,QAAQ+2D,IAAqB,EAAbA,EAAI92D,OAAY,CAExC,IAAM4d,EAAalf,EAAK2mB,UAAU7M,aAAaoF,WAC/CA,EAAWs5C,0BAA0BC,SACrCh1B,EAAOviC,QAAQ,SAAA6gC,GACb/hC,EAAK04D,kBAAkB32B,EAAOq2B,KAEhCl5C,EAAWs5C,0BAA0BG,WAEvCN,EAAU54D,cAUbu4D,GAAA94D,UAAA05D,eAAP,SAAsBC,GACpB,IAAKA,EACH,MAAM,IAAIrpD,MAAM,wCAElB,IAAMspD,EAA0Bh6D,KAAKg6D,wBAAwB7M,WAAW4M,GACxE,IAAIC,EAGF,MAAM,IAAItpD,MAAM,6BAA6BqpD,EAAM,oBAFnDC,EAAwBC,cAQrBf,GAAA94D,UAAA85D,oBAAP,WACE,IACMC,EADYn6D,KACOkiB,SADPliB,KACuBkiB,QAAQgV,YAD/Bl3B,KACkDkiB,QAAQgV,WAAWruB,UAAY,KAC/FsxD,IACFA,EAAYC,aAAe,KASxBlB,GAAA94D,UAAAi6D,gBAAP,SAAuBhzC,EAAiBy/B,EAAmBvS,GACzD,IACM4lB,EADYn6D,KACOkiB,SADPliB,KACuBkiB,QAAQgV,YAD/Bl3B,KACkDkiB,QAAQgV,WAAWruB,UAAY,KAEjG0rC,EADGA,GACe,KAEpB,IAAM+lB,EAAW1oD,KAAKC,MAAMi1C,GAC5B,GAAIqT,IACF9yC,EAAUA,GAAWrnB,KAAK6nB,UAAU7M,aAAaqM,SACpC,CACX,IAAMrM,EAAehb,KAAK4nB,oBAAoBP,GAC9C,GAAIrM,EAAc,CAChB,IAAM+U,EAAc/U,EAAa6M,UAAUkI,YAC3C,GAAIA,EAAa,CACf,IAAMN,EAAeM,EAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAElDm6C,EADc7oC,EAAa2P,YAAYgF,SAASF,GACvB0N,YACzBhiB,EAAOm/C,EAAS/lB,GACtB,GAAIp5B,EAAM,CACR,IAAMtQ,EAAQ7K,KAAKu6D,eAAe1W,EAAY1oC,GAC9Cg/C,EAAYC,aAAevvD,OAahCquD,GAAA94D,UAAAo6D,YAAP,SAAmBnzC,EAAiBy/B,GAApC,IAAA5lD,EAAAlB,KAEQkD,EADYlD,KACEkiB,SADFliB,KACkBkiB,QAAQgV,YAAc,GAC1D,IAAK4vB,EACH,MAAM,IAAIp2C,MAAM,6BAElB,GAAIxN,GAAUZ,MAAMC,QAAQW,IAA2B,EAAhBA,EAAOV,OAAY,CACxD,IAAMi4D,EAAW7oD,KAAKC,MAAMi1C,GAGtB1mC,EAAapgB,KAAKoiB,SAASha,IAAgBtF,EAAAA,WAAY,MAC7D,GAAIsd,EAAY,CACd,IAAMpF,EAAeoF,EAAWuH,oBAAoBC,oBAAoBP,GACxE,IAAIrM,EAGF,MAAM,IAAItK,MAAM,uBAFFsK,EAAa6M,UAAUkI,YAKzC,IAAM2qC,EAAgB,GAetB,OAdAx3D,EAAOd,QAAQ,SAAC+U,GACd,IAAMwjD,EAAe,GACrBlyD,OAAOM,KAAK0xD,GAAUr4D,QAAQ,SAACs6B,GAC7B,IAAM7xB,EAAQ3J,EAAKq5D,eAAepjD,EAAMulB,GACzB+9B,EAAS/9B,GACK9iB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC7CtH,QAAQ,SAAAg+B,GACb,IAAMzR,EAAQyR,EAAMxmB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC3CxI,EAAKigD,eAAewZ,EAAchsC,EAAMF,KAAK,KAAM5jB,OAGvD6vD,EAAcp5D,KAAKq5D,KAErB36D,KAAKq4C,mBAAmB73C,OACjBR,KAAK0nB,WAAW8yC,YAAYE,GAAe95C,KAChDG,EAAAA,IAAI,WAAM,OAAA7f,EAAKm3C,mBAAmB32C,SAClCse,EAAAA,IAAI,WAAM,OAAA,KAGd,OAAOO,EAAAA,IAAG,IAQL24C,GAAA94D,UAAAw6D,uCAAP,SAA8CvzC,EAAiBy/B,GAA/D,IAAA5lD,EAAAlB,KAEQkD,EADYlD,KACEkiB,SADFliB,KACkBkiB,QAAQgV,YAAc,GAC1D,IAAK4vB,EACH,MAAM,IAAIp2C,MAAM,6BAElB,GAAIxN,GAAUZ,MAAMC,QAAQW,IAA2B,EAAhBA,EAAOV,OAAY,CACxD,IAAMq4D,EAAWjpD,KAAKC,MAAMi1C,GAExB/2B,EAAc,IACZ3P,EAAapgB,KAAKoiB,SAASha,IAAgBtF,EAAAA,WAAY,MAC7D,GAAIsd,EAAY,CACd,IAAMpF,EAAeoF,EAAWuH,oBAAoBC,oBAAoBP,GACxE,IAAIrM,EAGF,MAAM,IAAItK,MAAM,uBAFhBqf,EAAc/U,EAAa6M,UAAUkI,aAAe,IAKxD,IAAM+qC,EAAgB,GACtB53D,EAAOd,QAAQ,SAAC+U,GACd,IAAMwjD,EAAe,GACrBlyD,OAAOM,KAAK8xD,GAAUz4D,QAAQ,SAACs6B,GAC7B,IAAM7xB,EAAQ3J,EAAKq5D,eAAepjD,EAAMulB,GACzBm+B,EAASn+B,GACK9iB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC7CtH,QAAQ,SAAAg+B,GACb,IAAMzR,EAAQyR,EAAMxmB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC3CxI,EAAKigD,eAAewZ,EAAchsC,EAAMF,KAAK,KAAM5jB,OAGvDiwD,EAAcx5D,KAAKq5D,KAErB36D,KAAKq4C,mBAAmB73C,OACxB,IAAM2a,EAAOnb,KAAK+6D,UAAUhrC,EAAa/vB,KAAK6nB,UAAU8C,YAAYgB,KAAKC,WACzE,OAAO5rB,KAAK0nB,WAAWszC,kBAAkB7/C,EAAM2/C,GAAel6C,KAC5DG,EAAAA,IAAI,WAAM,OAAA7f,EAAKm3C,mBAAmB32C,SAClCse,EAAAA,IAAI,WAAM,OAAA,KAGd,OAAOO,EAAAA,IAAG,IASL24C,GAAA94D,UAAA66D,oCAAP,SAA2C5zC,EAAiBy/B,GAA5D,IAAA5lD,EAAAlB,KAEMkD,EADclD,KACOkiB,SADPliB,KACuBkiB,QAAQgV,YAAc,GAC/D,IAAK4vB,EACH,OAAOvmC,EAAAA,IAAG,GAEZ,IAAM+5C,EAAW1oD,KAAKC,MAAMi1C,GAC5B,IAAKwT,IAAaA,EAAS14D,eAAe,MACxC,OAAO2e,EAAAA,IAAG,GAGZ,KADA8G,EAAUA,GAAWrnB,KAAK6nB,UAAU7M,aAAaqM,SAE/C,OAAO9G,EAAAA,IAAG,GAEZ,IAAMvF,EAAehb,KAAK4nB,oBAAoBP,GAC9C,OAAKrM,GAGL5Z,WAAW,WACTF,EAAK23D,QAAQ79C,GAAc/X,UAAU,WACnC7B,WAAW,WACT,GAAI8B,GAAUZ,MAAMC,QAAQW,IAA2B,EAAhBA,EAAOV,OAAY,CACxD,IAAM04D,EAAclgD,EAAa6M,UAAUkI,aAAe,IACpDm7B,EAAegQ,EAAYthD,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAClDyxD,EAAgB,GAEhBC,EAA2BpgD,EAAa2P,YAAYgF,SAASu7B,GAE7D5W,GADa8mB,EAAYj+B,YACVi+B,EAAYxvC,WAC3ByvC,EAAgBn6D,EAAKqkD,gBAAgBvqC,EAAckwC,EAAc5W,GACjEgnB,EAAWp4D,EAAO,GAExB,GAAsB,IAAlBA,EAAOV,OAET,OADAtB,EAAKq6D,WAAWD,EAAUhB,EAAUe,EAAeH,GAC5C36C,EAAAA,IAAG,GAEV,IAAMi7C,EAAalB,EAAa,GAC1BmB,EAAev6D,EAAKq5D,eAAec,EAAeG,GAExD,GAAKC,IAA6F,IAA7Ev4D,EAAOiuB,UAAU,SAAAha,GAAQ,OAAAA,EAAKikD,EAAYzpB,cAAgB8pB,KAIxE,GAAIA,EAAc,CACvB,IAAM1jD,EAAQ7U,EAAOiuB,UAAU,SAAAha,GAAQ,OAAAA,EAAKikD,EAAYzpB,cAAgB8pB,IAExEv6D,EAAKq6D,WAAWr4D,EAAO6U,GAAQuiD,EAAUe,EAAeH,GACxDh4D,EAAO8U,OAAOD,EAAO,SANrB7W,EAAKq6D,WAAWD,EAAUhB,EAAUe,EAAeH,GACnDh4D,EAASA,EAAO4Y,MAAM,GASxB,IAAM4/C,EAAYN,EAAYjW,UAAUhjD,OAAO,SAAA+qB,GAE7C,OADWhsB,EAAKq5D,eAAertC,EAAeotC,EAASc,EAAYzpB,eAGrE,GAAI+pB,GAAgC,EAAnBA,EAAUl5D,OAAY,CACrC,IAAIgoD,EAAOtnD,EAGTA,EAFEA,EAAOV,OAASk5D,EAAUl5D,QAC5BgoD,EAAOtnD,EAAO4Y,MAAM,EAAG4/C,EAAUl5D,QACxBU,EAAO4Y,MAAM4/C,EAAUl5D,SAEvB,GAEXgoD,EAAKpoD,QAAQ,SAAC+U,EAAMY,GAClB,IAAM4jD,EAAaD,EAAU3jD,GACvB8T,EAAS3qB,EAAKqkD,gBAAgBvqC,EAAckwC,EAAcyQ,EAAWpnB,iBAC3ErzC,EAAKq6D,WAAWpkD,EAAMmjD,EAAUzuC,EAAQqvC,KAiB5C,GAbAh4D,EAAOd,QAAQ,SAAC+U,GACd,IAAMwjD,EAAe,GACrBlyD,OAAOM,KAAKuxD,GAAUl4D,QAAQ,SAACs6B,GAC7B,IAAM7xB,EAAQ3J,EAAKq5D,eAAepjD,EAAMulB,GACzB49B,EAAS59B,GACK9iB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC7CtH,QAAQ,SAAAg+B,GACb,IAAMzR,EAAQyR,EAAMxmB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC3CxI,EAAKigD,eAAewZ,EAAchsC,EAAMF,KAAK,KAAM5jB,OAGvDswD,EAAc75D,KAAKq5D,KAEM,EAAvBQ,EAAc34D,OAAY,CAC5BtB,EAAKm3C,mBAAmB73C,OACxB,IAAM2a,EAAOja,EAAK65D,UAAUG,EAAah6D,EAAK2mB,UAAU8C,YAAYgB,KAAKC,WACzE1qB,EAAKwmB,WAAWszC,kBAAkB7/C,EAAMggD,GAAev6C,KACrDG,EAAAA,IAAI,WAAM,OAAA7f,EAAKm3C,mBAAmB32C,UAClCuB,eAIP,QAEJ,IACIsd,EAAAA,IAAG,IASL24C,GAAA94D,UAAAmH,KAAP,SAAYgO,GAAZ,IAAArU,EAAAlB,KACE,IAAKuV,EAEH,OADAvV,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAgBlG,kBAAmB,CAAEmN,WAAW,IAC7EyJ,EAAAA,MAGT,IAAMuZ,EAAgB72B,KAAK0nB,WAErBvP,EADU0e,EAAc1M,YAAY4jB,QACpB,+BAMhB9/B,EAAU,CACd9B,KALW,CACX8hC,YAFkBpX,EAAc1M,YAAY+jB,mBAG5CF,OAAQz4B,IAMV,OADAvV,KAAKq4C,mBAAmB73C,OACjBq2B,EAAcoiC,MAAM2C,QAAQzjD,EAAK,MAAO,KAAMlK,GAAS2S,KAC5DG,EAAAA,IAAI,WACF7f,EAAKm3C,mBAAmB32C,SAE1Bse,EAAAA,IAAI,SAACuuB,GACH,IAAME,EAAcF,EAAaE,YAC3B5iB,EAAS3qB,EAAKwmB,WAAW8mB,YAAYC,GAE3C,OADAvtC,EAAKwmB,WAAWoE,iBAAiB4iB,UAAU7iB,GACpCA,MAUNqtC,GAAA94D,UAAAy7D,MAAP,SAAatmD,EAAY4F,GAAzB,IAAAja,EAAAlB,KACE,IAAKuV,EAEH,OADAvV,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAgBlG,kBAAmB,CAAEmN,WAAW,IAC7EyJ,EAAAA,MAET,IAAKnC,EAEH,OADAnb,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAgBhG,eAAgB,CAAEiN,WAAW,IAC1EyJ,EAAAA,MAEJnC,EAAKqL,WAAW,OACnBrL,EAAO,IAAMA,GAEfA,EAAOA,EAAKyO,cACZ,IAAMmG,EAAc/vB,KAAK6nB,UAAUkI,YAC7B8G,EAAgB72B,KAAK0nB,WAErBvP,EAAM,GADI0e,EAAc1M,YAAY4jB,QACjB5yB,EACnB8yB,EAAcpX,EAAc1M,YAAY+jB,mBACxCnF,EAAM/oC,KAAK87D,SAAS/rC,GAC1BgZ,EAAIznC,KAAKiU,GACT,IAIMtH,EAAU,CACd9B,KALW,CACX8hC,YAAWA,EACXD,OAAQjF,EAAIta,KAAK,OAMnB,OADAzuB,KAAKq4C,mBAAmB73C,OACjBq2B,EAAcoiC,MAAM2C,QAAQzjD,EAAK,MAAO,KAAMlK,GAAS2S,KAC5DG,EAAAA,IAAI,WACF7f,EAAKm3C,mBAAmB32C,SAE1Bse,EAAAA,IAAI,SAACuuB,GACH,IAAME,EAAcF,EAAaE,YAC7B5iB,EAAS,KACb,GAAqD,IAAjDkE,EAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAAGlH,OACxCqpB,EAAS3qB,EAAKwmB,WAAW8mB,YAAYC,GACrCvtC,EAAKwmB,WAAWoE,iBAAiB4iB,UAAU7iB,GAAQ,OAC9C,CACL,IAAMqI,EAAQhzB,EAAK65D,UAAUhrC,EAAa7uB,EAAK2mB,UAAU8C,YAAYgB,KAAKC,WAC1EC,EAASgL,EAAcmY,cAAcC,mBAAmB/a,EAAOua,EAAaA,GAAa,GAE3F,OAAO5iB,MAaNqtC,GAAA94D,UAAA27D,QAAP,SAAe10C,EAAiB20C,EAAsBrjC,GAAtD,IAAAz3B,EAAAlB,KAIE,QAJoD,IAAA24B,IAAAA,EAAA,GAC9B,iBAAXA,IACTA,EAASqtB,SAASrtB,EAAQ,KAExBA,EAAS,EACX,MAAM,IAAIjoB,MAAM,mCAGlB,IAAMsK,EAAehb,KAAK6nB,UAAU7M,aAAaoF,WAAWuH,oBAAoBC,oBAAoBP,GAC9FqE,EAAe1Q,EAAa2P,YAAYgB,KAAKC,UAC7CmE,EAAc/U,EAAa6M,UAAUkI,aAAe,IACtDpF,EAAc,KACdwS,EAA6B,KACjC,GAAoB,MAAhBpN,EAEFoN,EAAcniB,EAAa2P,YAAYgB,KAAKwR,gBACvC,CAEL,IAAMxO,EAAQoB,EAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IACjDyzB,EAAeniB,EAAa2P,YAAYgF,SAAShB,GAAuBwO,YAG1E,GADAxS,EAAcwS,EAAYC,UACrBD,EAAYoX,gBAIf,OAHIv0C,KAAKmV,mBACPnV,KAAKmV,kBAAkB/H,QAAQpN,KAAK4M,gBAAgBlG,kBAAmB,CAAEmN,WAAW,IAE/EyJ,EAAAA,MAET,IAAM2+C,EAAoBD,EAAapiD,MAAM,KAAKzX,OAAO,SAAAgV,GAAQ,OAAAA,IAE3D+kD,EAAU,IAAI55D,MAAMq2B,GAC1B,OAAOznB,EAAAA,KAAKgrD,GAASt7C,KACnBC,EAAAA,UAAU,WACR,IAAIs7C,EAAU,KACd,GAAoB,MAAhBpsC,EAAqB,CACvB,IAAMwB,EAAWrwB,EAAK65D,UAAUhrC,EAAarE,GAC7CywC,EAAUj7D,EAAKwmB,WAAW0M,aAAa7C,QAEvC4qC,EAAUj7D,EAAKwmB,WAAWhG,SAE5B,OAAOy6C,EAAQv7C,KACbG,EAAAA,IAAI,SAAC8K,GAEHlB,EAAYkB,EAAO8lB,YAAc9lB,EAAOH,aAExCuwC,EAAkB75D,QAAQ,SAACivB,GACzB,IAAM+qC,EAAkB/qC,EAAMzX,MAAM,KAAKzX,OAAO,SAAAgV,GAAQ,OAAAA,IACzB,IAA3BilD,EAAgB55D,eACXmoB,EAAY0G,UAEN+qC,EAAgBtgD,MAAM,GAAI,GAAGC,OAAO,SAACqlC,EAAMib,EAAStkD,GACjE,OAAOqpC,EAAKib,IACX1xC,GACWyxC,EAAgBA,EAAgB55D,OAAS,MAEzDmoB,EAAcliB,OAAOsB,OAAO,GAAI8hB,EAAOuR,SAAUzS,GACjDkB,EAAOmG,KAAKrH,EAAa,CAAE2xC,WAAW,MAExC1jB,EAAAA,WAAW,WACT,OAAOt7B,EAAAA,aAYV47C,GAAA94D,UAAAm8D,gCAAP,SAAuCl1C,EAAiBy/B,EAAmB0V,GAA3E,IAAAt7D,EAAAlB,KAEQkD,EADYlD,KACEkiB,SADFliB,KACkBkiB,QAAQgV,YAAc,GAG1D,IAAKslC,EACH,MAAM,IAAI9rD,MAAM,oCAElB,IAAKo2C,EACH,MAAM,IAAIp2C,MAAM,6BAElB,IAAM4pD,EAAW1oD,KAAKC,MAAMi1C,GACtB2V,EAAaD,EAEbE,EAAmB18D,KAAK6nB,UAAU7M,aAAayR,KAEjDsD,EAAc,IACZ3P,EAAapgB,KAAKoiB,SAASha,IAAgBtF,EAAAA,WAAY,MAC7D,GAAIsd,EAAY,CACd,IAAMpF,EAAeoF,EAAWuH,oBAAoBC,oBAAoBP,GACxE,IAAIrM,EAGF,MAAM,IAAItK,MAAM,uBAFhBqf,EAAc/U,EAAa6M,UAAUkI,aAAe,IAOxD,IADA2sC,EAAiBn0C,QAAoB,WAAIrlB,IAC3BZ,MAAMC,QAAQW,GAAS,CAEnC,IAAMusB,EAAeM,EAAYnW,MAAM,KAAKzX,OAAO,SAAAgV,GAAQ,OAAAA,IACrDwlD,EAA2B38D,KAAK6nB,UAAU8C,YAAYgF,SAASF,GAC/DmtC,EAAmBD,EAAYxX,UAE/B0X,EAAU,GAChB35D,EAAO6Y,OAAO,SAACqlC,EAAkBjqC,GAC/B,IAAM2lD,EAAS3lD,GAAQA,EAAKwlD,EAAYhrB,aAAe,KAKvD,OAJgBirB,EAAiB1lD,KAAK,SAACgW,GAAiC,OAAAA,EAAcuvC,GAAYA,KAAgBK,KAEhH1b,EAAK9/C,KAAK6V,GAELiqC,GACNyb,GAGH,IAAME,EAAU,GAChBH,EAAiB7gD,OAAO,SAAC0O,EAActT,GAKrC,OAHe,IADDjU,EAAOiuB,UAAU,SAAA6rC,GAAc,OAAAA,EAAWL,EAAYhrB,cAAgBx6B,EAAKslD,GAAYA,MAEnGhyC,EAAQnpB,KAAK6V,EAAKo9B,iBAEb9pB,GACNsyC,GAIH,IAAME,EAAa/rD,EAAAA,KAAK2rD,GAASj8C,KAC/BC,EAAAA,UAAU,SAAA1J,GACR,IAAMgE,EAAOja,EAAK65D,UAAUhrC,EAAa7uB,EAAK2mB,UAAU8C,YAAYgB,KAAKC,WACzE,OAAO1qB,EAAKwmB,WAAW0M,aAAajZ,GAAMyF,KACxCG,EAAAA,IAAI,SAAC8K,GACHpjB,OAAOM,KAAKuxD,GAAUl4D,QAAQ,SAAAs6B,GAC5B,IAAM7xB,EAAQ3J,EAAKq5D,eAAepjD,EAAMulB,GACzB49B,EAAS59B,GACK9iB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC7CtH,QAAQ,SAAAg+B,GACb,IAAMzR,EAAQyR,EAAMxmB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC3CxI,EAAKigD,eAAet1B,EAAQ8C,EAAMF,KAAK,KAAM5jB,SAInD+tC,EAAAA,WAAW,WACT,OAAOt7B,EAAAA,YAMT4/C,EAAgBhsD,EAAAA,KAAK6rD,GAASn8C,KAClCC,EAAAA,UAAU,SAAA1J,GACR,IAAMgE,EAAOja,EAAK65D,UAAUhrC,EAAa7uB,EAAK2mB,UAAU8C,YAAYgB,KAAKC,WACzE,OAAO1qB,EAAKwmB,WAAW8iB,aAAarvB,EAAMhE,GAAMyJ,KAC9CG,EAAAA,IAAI,WACwC7f,EAAKwmB,WACjCsnB,cAAcmuB,mBAAmBhiD,EAAMhE,KAEvDyhC,EAAAA,WAAW,WACT,OAAOt7B,EAAAA,YAKf,OAAuCu/C,EAAQr6D,OAAS,GAAKu6D,GAAWA,EAAQv6D,OAAS,EAChF+d,EAAAA,IAAG,GAELlV,EAAAA,OAAO4xD,EAAYC,GAAet8C,KACvCg4B,EAAAA,WAAW,WAAM,OAAAt7B,EAAAA,SAGrB,OAAOiD,EAAAA,IAAG,IAML24C,GAAA94D,UAAAg9D,0BAAP,WACE,OAAOp9D,KAAKk6D,uBAUPhB,GAAA94D,UAAAi9D,0BAAP,SAAiCh2C,EAAiBy/B,EAAmBwW,EAAyBn2C,GAC5F,IACMjkB,EADYlD,KACEkiB,SADFliB,KACkBkiB,QAAQgV,YAAc,GAC1D,OAAIh0B,GAAUZ,MAAMC,QAAQW,MAErBA,GAAUA,EAAOV,OAAS,GAG/BxC,KAAKu9D,YAAY3yD,KAAK,CAAEyc,QAAOA,EAAEy/B,UAASA,EAAE1wC,KAAMlT,EAAQo6D,eAAcA,EAAEn2C,YAAWA,KAF5E5G,EAAAA,IAAG,IAaR24C,GAAA94D,UAAAo9D,mBAAR,SAA2Bn2C,EAAiBy/B,EAAmB5jD,GAA/D,IAAAhC,EAAAlB,KACE,IAAK8mD,EACH,MAAM,IAAIp2C,MAAM,6BAElB,IAAM4pD,EAAW1oD,KAAKC,MAAMi1C,GAExB/2B,EAAc,IACZ3P,EAAapgB,KAAKoiB,SAASha,IAAgBtF,EAAAA,WAAY,MAC7D,GAAIsd,EAAY,CACd,IAAMpF,EAAeoF,EAAWuH,oBAAoBC,oBAAoBP,GACxE,IAAIrM,EAGF,MAAM,IAAItK,MAAM,uBAFhBqf,EAAc/U,EAAa6M,UAAUkI,aAAe,IAMxD,IAAM2sC,EAAmB18D,KAAK6nB,UAAU7M,aAAayR,KAC/CoK,EAAgB72B,KAAK0nB,WACrB+H,EAAeM,EAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAGxD,IADAgzD,EAAiBn0C,QAAoB,WAAIrlB,IAC3BZ,MAAMC,QAAQW,GAAS,CACnC,IAAM+5D,EAAa/rD,EAAAA,KAAKhO,GAAQ0d,KAC9BC,EAAAA,UAAU,SAAA1J,GACR,IAAM82B,EAAcpX,EAAc1M,YAAY+jB,mBAC9C,GAA0B,EAAtBze,EAAajtB,OAAY,CAC3B,IAAMi7D,EAAOv8D,EAAK65D,UAAUhrC,EAAa7uB,EAAK2mB,UAAU8C,YAAYgB,KAAKC,WACzE,OAAOiL,EAAc1M,YAAYuzC,aAAaD,EAAMxvB,GAAartB,KAC/DG,EAAAA,IAAI,SAACwtB,GACH,IAAMn4B,EAAOm4B,EAAaE,YACpBkvB,EAAY9mC,EAAcmY,cAAcC,mBAAmBwuB,EAAMrnD,EAAMA,GAU7E,OATA3N,OAAOM,KAAKuxD,GAAUl4D,QAAQ,SAAAs6B,GAC5B,IAAM7xB,EAAQ3J,EAAKq5D,eAAepjD,EAAMulB,GACzB49B,EAAS59B,GACK9iB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC7CtH,QAAQ,SAAAg+B,GACb,IAAMzR,EAAQyR,EAAMxmB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC3CxI,EAAKigD,eAAewc,EAAWhvC,EAAMF,KAAK,KAAM5jB,OAG7C8yD,KAIX,OAAO9mC,EAAc1M,YAAYniB,OAAO,KAAMimC,GAAartB,KACzDG,EAAAA,IAAI,SAACwtB,GACH,IAAMn4B,EAAOm4B,EAAaE,YACpBkvB,EAAYz8D,EAAKwmB,WAAW8mB,YAAYp4B,GAW9C,OAVA3N,OAAOM,KAAKuxD,GAAUl4D,QAAQ,SAAAs6B,GAC5B,IAAM7xB,EAAQ3J,EAAKq5D,eAAepjD,EAAMulB,GACzB49B,EAAS59B,GACK9iB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC7CtH,QAAQ,SAAAg+B,GACb,IAAMzR,EAAQyR,EAAMxmB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC3CxI,EAAKigD,eAAewc,EAAWhvC,EAAMF,KAAK,KAAM5jB,OAGpD3J,EAAKwmB,WAAWoE,iBAAiB4iB,UAAUivB,GACpCA,QAYjB,OALI39D,KAAKq4C,qBACPr4C,KAAK49D,yBAAyBv2C,GAC9BrnB,KAAKq4C,mBAAmB73C,OACxBR,KAAKq4C,mBAAmBh4C,YAAW,IAE9B48D,EAAWr8C,KAChByT,EAAAA,QACAzT,KACAI,EAAAA,UAAU,WACR,IAAM0K,EAAexqB,EAAK2mB,UAAU8C,YAAYgB,KAAKC,UACrD,OAAIF,EACKmL,EAAc7B,kBAAkBtJ,GAEhCnL,EAAAA,GAAG,SAGdtd,UAAU,WACN/B,EAAKm3C,qBACPn3C,EAAK28D,wBAAwBx2C,GAC7BnmB,EAAKm3C,mBAAmBh4C,YAAW,GACnCa,EAAKm3C,mBAAmB32C,SAEzB,WACGR,EAAKm3C,qBACPn3C,EAAK28D,wBAAwBx2C,GAC7BnmB,EAAKm3C,mBAAmBh4C,YAAW,GACnCa,EAAKm3C,mBAAmB32C,UAI9B,OAAO6e,EAAAA,GAAG,OAEJ24C,GAAA94D,UAAAw9D,yBAAR,SAAiCv2C,GAC/B,IAAMjH,EAAapgB,KAAKoiB,SAASha,IAAgBtF,EAAAA,WAAY,MACzDsd,IACmBA,EAAWuH,oBAAoBC,oBAAoBP,GAC3Dy2C,SAAU,IAGnB5E,GAAA94D,UAAAy9D,wBAAR,SAAgCx2C,GAC9B,IAAMjH,EAAapgB,KAAKoiB,SAASha,IAAgBtF,EAAAA,WAAY,MAC7D,GAAIsd,EAAY,CACd,IAAMpF,EAAeoF,EAAWuH,oBAAoBC,oBAAoBP,GACxErM,EAAa8iD,SAAU,EACvB9iD,EAAaoF,WAAW+nB,YAAYv9B,KAAK,cAKrCsuD,GAAA94D,UAAA+gD,eAAR,SAAuBhzB,EAAgBhT,EAActQ,GACnD,GAAIsjB,EAAQ,CACV,IAAMQ,EAAQxT,EAAKvB,MAAM,KACrB+U,EAAMnsB,QAAU,EAClB2rB,EAAOhT,GAAQtQ,EAEf8jB,EAAM7S,MAAM,GAAI,GAAGC,OAAO,SAACqlC,EAAMjmC,GAI/B,OAHMimC,EAAKx/C,eAAeuZ,IAASimC,EAAgB,UAAEx/C,eAAeuZ,KAClEimC,EAAKjmC,GAAQ,IAERimC,EAAKjmC,IACXgT,GAAQQ,EAAMA,EAAMnsB,OAAS,IAAMqI,IAIpCquD,GAAA94D,UAAAm6D,eAAR,SAAuBpsC,EAAgBhT,GACrC,IAAMwT,EAAQxT,EAAKvB,MAAM,KACzB,KAAI+U,EAAMnsB,OAAS,GAAnB,CAGA,GAAqB,IAAjBmsB,EAAMnsB,OACR,OAAO2rB,EAAOhT,GAEhB,IAAIjY,EAAS,KAQb,OAPAyrB,EAAMvsB,QAAQ,SAACs6B,EAAM3kB,GAEjB7U,EADY,IAAV6U,EACOoW,GAAUA,EAAOuO,IAAS,KAE1Bx5B,GAAUA,EAAOw5B,IAAS,OAGhCx5B,IAODg2D,GAAA94D,UAAA26D,UAAR,SAAkBhrC,EAAqBxa,GACrC,IAAI4F,EAAO,IAAM5F,EACXsgB,EAAW9F,EAAYnW,MAAM,KACnC,GAAsB,EAAlBic,EAASrzB,OAGX,IAAK,IAAIuV,EAAQ,EAAGA,EAAQ8d,EAASrzB,OAAS,EAAGuV,IAAS,CACxD,IAAM+d,EAAUD,EAAS9d,GACnBge,EAAU/1B,KAAK6nB,UAAU8C,YAAYmL,GAC3C,IAAKC,IAAYA,EAAQnK,UACvB,MAAMlb,MAAM,iBAAiBqlB,EAAO,qBAEtC5a,GAAQ,IAAI2a,EAAO,IAAIC,EAAQnK,UAKnC,OAFAzQ,GAAQ,IAAM0a,EAASA,EAASrzB,OAAS,IASnC02D,GAAA94D,UAAA07D,SAAR,SAAiB/rC,GAAjB,IAAA7uB,EAAAlB,KACQyvB,EAAeM,EAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAClDgiB,EAAe1rB,KAAK6nB,UAAU8C,YAAYgB,KAAKC,UAC/C1oB,EAAS,GACTyrB,EAAQ,GAad,OAZ0B,EAAtBc,EAAajtB,SACfU,EAAO5B,KAAKoqB,GAEZ+D,EAAamB,MACbnB,EAAartB,QAAQ,SAAC+Y,GACpBwT,EAAMrtB,KAAK6Z,GACX,IAAMuU,EAAcxuB,EAAK2mB,UAAU8C,YAAYgF,SAAShB,GACpDe,GACFxsB,EAAO5B,KAAKouB,EAAY9D,cAIvB1oB,GAEDg2D,GAAA94D,UAAAw5D,kBAAR,SAA0B32B,EAAY8F,GAC9B,IAAAlvB,EAAAopB,GAAA,GAAEiF,EAAAruB,EAAAk9C,YAAAA,OAAA,IAAA7uB,EAAA,KAAAA,EAAoBgS,EAAArgC,EAAAhP,MAAAA,OAAA,IAAAqvC,EAAA,KAAAA,EAAcsP,EAAA3vC,EAAA5L,QAC1C,GAAI8oD,EAEF,GAAoB,WAAhBA,GAA4C,iBAAhBA,EAAgC,CAC9D,IAAMjQ,QAJgC,IAAA0C,EAAA,GAAAA,GAIZ1C,UAC1B9mD,KAAK+9D,kBAAkBh1B,EAAKl+B,EAAOi8C,QAEnC9mD,KAAKg+D,kBAAkBj1B,EAAKl+B,EAAOo4B,IAIjCi2B,GAAA94D,UAAA49D,kBAAR,SAA0Bj1B,EAAiBl+B,EAAYg5B,GAAvD,IAAA3iC,EAAAlB,KACE,GAAK6jC,EAAL,CAGA,IAAMo6B,EAAoBp6B,EAAOq6B,SAE7Bh7D,EAAS2H,EACb,GAA0B,SAAtBozD,EAA8B,CAChC,IAAIE,EAAUn+D,KAAKo+D,YAAYC,SAASxzD,EAAO,cAI/C3H,EAFEi7D,EADGA,GACO,0BAGmB,WAAtBF,IACT/6D,EAASkgC,OAAOv4B,IAAU,GAE5B,IAAMwmB,EAAQwS,EAAOxS,MACrB0X,EAAI3mC,QAAQ,SAAAmT,GACVrU,EAAKo9D,kBAAkB/oD,EAAI8b,EAAOnuB,OAG9Bg2D,GAAA94D,UAAA29D,kBAAR,SAA0Bh1B,EAAiBw1B,EAAezX,GAA1D,IAAA5lD,EAAAlB,KACE,GAAK8mD,EAAL,CAGA,IAAI0X,EAAa/1D,OAAOM,KAAK+9C,GACvB2X,EAAUD,EAAWrtC,UAAU,SAAAha,GAAQ,MAAS,OAATA,IACzCqnD,EAAWpkC,SAAS,OAAqB,IAAZqkC,IAC/BD,EAAWxmD,OAAOymD,EAAS,GAC3BD,EAAUpzD,GAAA,CAAI,MAASozD,IAEzBA,EAAWp8D,QAAQ,SAACs8D,GAClB,IAAIC,EAAiB,GACjBJ,IAEAI,EADEJ,aAAoBj8D,MACVi8D,EAASv+C,IAAI,SAAC7I,GACxB,OAAOjW,EAAKyuB,SAAS+uC,EAAWvnD,KAC/BsX,KAAK,KAEIvtB,EAAKyuB,SAAS+uC,EAAWH,IAGzCx1B,EAAI3mC,QAAQ,SAAAmT,GACVrU,EAAKo9D,kBAAkB/oD,EAAIuxC,EAAU4X,GAAYC,SAI/CzF,GAAA94D,UAAAk+D,kBAAR,SAA0B5yC,EAAmB4F,EAAsBzmB,GAEjE,GADkB7K,KAAK6nB,WACJyJ,EAAnB,CAIA,IAAMiP,EAAgBjP,EAAa1X,MAAM,KAAKzX,OAAO,SAAAgV,GAAQ,OAAAA,IACvD+V,EAAgBltB,KAAK0vB,YAAYmb,SAASnf,GAEhD,GAAI6U,EAAc/9B,OAAS,EACzB0qB,EAAcsQ,SAASlM,EAAczmB,GAAO,GAAM,OAC7C,CACL,IAAI+zD,EAAsB,KACpBC,EAASt+B,EAAczkB,MAAM,EAAGykB,EAAc/9B,OAAS,GACvDs8D,EAAqBv+B,EAAcA,EAAc/9B,OAAS,GAChEq8D,EAAOz8D,QAAQ,SAAAs6B,GACbkiC,EAAsBA,GAAuBA,EAAoBliC,IAASxP,EAAcwP,KAG1FkiC,EAAoBphC,SAASshC,EAAoBj0D,GAAO,GAAM,MAG1DquD,GAAA94D,UAAA2+D,oBAAR,WACE,IAAM5jD,EAAOnb,KAAK6nB,UAAUkI,YAC5B,OAAI5U,EACKA,EAAKvB,MAAM,KAAKzX,OAAO,SAAAgI,GAAK,MAAM,KAANA,IAE9B,IAED+uD,GAAA94D,UAAAuvB,SAAR,SAAiBqvC,EAAW5oD,GAU1B,OARwB,IAApB4oD,EAAErlD,QAAQ,KACNvD,EAAK4oD,GAELA,EAAEplD,MAAM,KAAKmC,OAAO,SAACiY,EAAGzqB,GAC5B,OAAOyqB,EAAEzqB,IACR6M,IAKP3N,OAAAC,eAAcwwD,GAAA94D,UAAA,cAAW,KAAzB,WAEE,GAAmC,MAA/BJ,KAAK6nB,UAAUkI,cAAwB/vB,KAAK6nB,UAAUkI,YACxD,OAAO/vB,KAAK6nB,UAAU8C,YAAYgB,KAGpC,IAAIoE,EAAc/vB,KAAK6nB,UAAUkI,YAAY+X,OAAO,GAI9Cm3B,GAHNlvC,EAAcA,EAAY,GAAGnG,cAAgBmG,EAAYyd,UAAU,EAAGzd,EAAYvtB,SACxDoX,MAAM,KAEJzX,OAAO,SAAC+8D,GAClC,MAAgB,KAATA,IAET,OAAOl/D,KAAK6nB,UAAU8C,YAAYgF,SAASsvC,oCAQrC/F,GAAA94D,UAAAm7D,WAAR,SAAmBnlD,EAAW0wC,EAAgBj7B,EAAgBkE,GAA9D,IAAA7uB,EAAAlB,KACEyI,OAAOM,KAAK+9C,GAAW1kD,QAAQ,SAACs6B,GAC9B,IAAM7xB,EAAQ3J,EAAKq5D,eAAenkD,EAAMsmB,GACzBoqB,EAAUpqB,GACI9iB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC7CtH,QAAQ,SAAAg+B,GACb,IAAMzR,EAAQyR,EAAMxmB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAC3CxI,EAAKigD,eAAet1B,EAAQ8C,EAAMF,KAAK,KAAM5jB,QAS3CquD,GAAA94D,UAAAwnB,oBAAR,SAA4BP,GAC1B,IAAKA,EACH,OAAO,KAET,IAAMjH,EAAapgB,KAAKoiB,SAASha,IAAgBtF,EAAAA,WAAY,MACzDkY,EAA6B,KAIjC,OAHIoF,IACFpF,EAAeoF,EAAWuH,oBAAoBC,oBAAoBP,IAE7DrM,GAEDk+C,GAAA94D,UAAAmlD,gBAAR,SAAwBvqC,EAA4ByU,EAAqB7D,GACvE6D,EAAYrkB,GAAOqkB,GACnB,IAAMla,EAAKyF,EAAa2P,YAAYgB,KAAKC,UAErCzU,EADmB6D,EAAa0M,WAAWoE,iBAAiBC,cAAcxW,GAExEoZ,EAAQ,GACRwwC,EAAW1vC,EAAamB,MACxB3T,EAASwS,EAAa1T,OAAO,SAACb,EAAgBC,GAElD,GADAwT,EAAMrtB,KAAK6Z,GACPD,IAAWA,EAAOtZ,eAAeuZ,IAASD,EAAkB,UAAEtZ,eAAeuZ,IAAQ,CACvF,IAAMtQ,EAAQqQ,EAAOC,GACrB,GAAItQ,GAASA,aAAiBu0D,EAAAA,WAAY,CACxC,IACMC,EADcrkD,EAAa2P,YAAYgF,SAAShB,GACpB/C,UAClC,OAAO/gB,EAAMzC,IAAIi3D,GAEjB,OAAOx0D,EAGT,OAAO,MAERsM,GACH,GAAI8F,aAAkBqiD,EAAAA,OAAQ,CAC5B,IAAM3zC,EAAO1O,EAAOkiD,GACpB,GAAIxzC,EACF,OAAOA,EAAKvjB,IAAIwjB,GAEhB,MAAM,IAAIlb,MAAM,mBAGlB,MAAM,IAAIA,MAAM,oBAGZwoD,GAAA94D,UAAAy4D,QAAR,SAAgB79C,GACd,IAAMoF,EAAyBpF,GAAgBA,EAAa8b,oBAC5D,OAAOvW,EAAAA,GAAG,MAAMK,KACdG,EAAAA,IAAI,WACEX,GACFA,EAAW+nB,YAAYv9B,KAAK,CAAEhI,KAAM,cAIxCf,EAAAA,MAAM,0BA1/BX9B,EAAAA,uDAhBoB2oB,EAAAA,gBAOZukC,UANaniC,EAAAA,iBAA0B+G,EAAAA,kBAIvC0tC,EAAAA,8BACAC,EAAAA,6BAGAh3D,SACA+K,MAmgCT2lD,IAz/BE,SAAAA,GACU92C,EACA43C,EACAnyC,EACAH,EACA0xC,EACAgF,EACAxxD,EACAuI,GARV,IAAAjU,EAAAlB,KACUA,KAAAoiB,SAAAA,EACApiB,KAAAg6D,wBAAAA,EACAh6D,KAAA6nB,UAAAA,EACA7nB,KAAA0nB,WAAAA,EACA1nB,KAAAo5D,uBAAAA,EACAp5D,KAAAo+D,YAAAA,EACAp+D,KAAA4M,gBAAAA,EACA5M,KAAAmV,kBAAAA,EAERnV,KAAKq4C,mBAAqBr4C,KAAKoiB,SAASha,IAAwBjI,EAAoB,MAC/EH,KAAK4M,kBACR5M,KAAK4M,gBAAkBpE,EAAgBG,eAEpC3I,KAAKmV,oBACRnV,KAAKmV,kBAAoBnV,KAAKoiB,SAASha,IAAuBmL,GAAmB,OAEnFvT,KAAKu9D,YAAc,IAAIr9D,EAAAA,QACvBF,KAAKu9D,YAAYt6D,UAAU,SAAAC,GACnB,IAAA2W,EAAA3W,GAAA,GAAEglC,EAAAruB,EAAAwN,QAAAA,OAAA,IAAA6gB,EAAA,GAAAA,EAAcgS,EAAArgC,EAAAitC,UAAAA,OAAA,IAAA5M,EAAA,GAAAA,EAAgBsP,EAAA3vC,EAAAzD,KAAAA,OAAA,IAAAozC,EAAA,GAAAA,EACtCtoD,EAAKs8D,mBAAmBn2C,EAASy/B,EAAW1wC,KChClD,IAAAqpD,IAKEh3D,OAAAC,eAAY+2D,GAAAr/D,UAAA,aAAU,KAAtB,WACE,OAAOJ,KAAKgb,aAAa0M,4CAK3Bjf,OAAAC,eAAY+2D,GAAAr/D,UAAA,SAAM,KAAlB,WACE,OAAOJ,KAAc,SAAKA,KAAc,QAAc,YAAK,oCAKtDy/D,GAAAr/D,UAAAs/D,WAAP,SAAkBnqD,EAAawjD,EAAkB4G,EAAmBn0D,EAAeo0D,EAAqB/4B,GAAxG,IAAA3lC,EAAAlB,KAEE,KADAuV,EAAKA,GAAMvV,KAAKgb,cAAgBhb,KAAKgb,aAAa2P,YAAYgB,KAAKC,WAAa,MAE9E,OAAOtO,EAAAA,MAET,IAAM9H,EAASxV,KAAK6/D,qBAAqBtqD,EAAI/J,EAAMq7B,EAAUkyB,EAAS6G,EAAYD,GAC5Ex1C,EAAcnqB,KAAK0nB,WAAWyC,YAE9B8jB,EAAc9jB,EAAY+jB,mBAC1BjgC,EAAU,CACd9B,KAAIrC,EAAA,CACFmkC,YAAWA,GACRz4B,IAIP,OADAxV,KAAKe,eAAeP,OACb2pB,EAAYmkB,OATP,iDASmB,OAAQ,KAAMrgC,GAAS2S,KACpDG,EAAAA,IAAI,WACF7f,EAAKH,eAAeW,WAQnB+9D,GAAAr/D,UAAA0/D,cAAP,SAAqBvqD,EAAYoqD,EAAkBxoC,EAA2B+H,GAA9E,IAAAh+B,EAAAlB,KAEE,KADAuV,EAAKA,GAAMvV,KAAKgb,cAAgBhb,KAAKgb,aAAa2P,YAAYgB,KAAKC,WAAa,MAE9E,OAAOtO,EAAAA,MAGT,IAAM6M,EAAcnqB,KAAK0nB,WAAWyC,YAE9BhS,EAAMnY,KAAK+/D,sBAAsBxqD,EAAI4hB,EAAW+H,EAAUygC,GAEhE,OADA3/D,KAAKe,eAAeP,OACb2pB,EAAYmkB,OAAOn2B,EAAK,OAAOyI,KACpCG,EAAAA,IAAI,WACF7f,EAAKH,eAAeW,WAOnB+9D,GAAAr/D,UAAA4/D,aAAP,WAAA,IAAA9+D,EAAAlB,KACQmqB,EAAcnqB,KAAK0nB,WAAWyC,YAGpC,OADAnqB,KAAKe,eAAeP,OACb2pB,EAAYmkB,OAFP,oDAEmB,OAAO1tB,KACpCG,EAAAA,IAAI,WACF7f,EAAKH,eAAeW,WASnB+9D,GAAAr/D,UAAA6/D,qBAAP,SAA4B9oC,EAA2B+H,GAAvD,IAAAh+B,EAAAlB,KACQmqB,EAAcnqB,KAAK0nB,WAAWyC,YAC9BhS,EAAMnY,KAAKkgE,6BAA6B/oC,EAAW+H,GAEzD,OADAl/B,KAAKe,eAAeP,OACb2pB,EAAYmkB,OAAOn2B,EAAK,OAAOyI,KACpCG,EAAAA,IAAI,WACF7f,EAAKH,eAAeW,WAUnB+9D,GAAAr/D,UAAA+/D,aAAP,SAAoBC,EAAejpC,EAA2B+H,GAA9D,IAAAh+B,EAAAlB,KACQmqB,EAAcnqB,KAAK0nB,WAAWyC,YAC9BhS,EAAMnY,KAAKqgE,qBAAqBD,EAAMjpC,EAAW+H,GAEvD,OADAl/B,KAAKe,eAAeP,OACb2pB,EAAYmkB,OAAOn2B,EAAK,OAAOyI,KACpCG,EAAAA,IAAI,WACF7f,EAAKH,eAAeW,WAQlB+9D,GAAAr/D,UAAA2/D,sBAAR,SAA8BxqD,EAAY4hB,EAA0B+H,EAAyBygC,GAS3F,OARI,MAAOxoC,IACTA,EAAYn3B,KAAKwV,OAAO2hB,WAAa,GAEnC,MAAO+H,IACTA,EAAWl/B,KAAKwV,OAAO0pB,UAAY,IAEnBl/B,KAAK0nB,WAAW44C,UAE3B,kEAAkEX,EAAQ,WAAWpqD,EAAE,aAAa2pB,EAAQ,cAAc/H,GAK3HsoC,GAAAr/D,UAAAigE,qBAAR,SAA6BD,EAAejpC,EAA2B+H,GACrE,IAAM1pB,EAAmB,GAYzB,OAXI,MAAO2hB,IACTA,EAAYn3B,KAAKwV,OAAO2hB,WAAa,GAEnC,MAAO+H,IACTA,EAAWl/B,KAAKwV,OAAO0pB,UAAY,KAEjCkhC,GACF5qD,EAAOlU,KAAK,SAAS8+D,GAEvB5qD,EAAOlU,KAAK,YAAY49B,GACxB1pB,EAAOlU,KAAK,aAAa61B,GAClB,iDAAiD3hB,EAAOiZ,KAAK,MAE9DgxC,GAAAr/D,UAAA8/D,6BAAR,SAAqC/oC,EAA2B+H,GAC9D,IAAM1pB,EAAmB,GASzB,OARI,MAAO2hB,IACTA,EAAYn3B,KAAKwV,OAAO2hB,WAAa,GAEnC,MAAO+H,IACTA,EAAWl/B,KAAKwV,OAAO0pB,UAAY,GAErC1pB,EAAOlU,KAAK,YAAY49B,GACxB1pB,EAAOlU,KAAK,aAAa61B,GAClB,0DAA0D3hB,EAAOiZ,KAAK,MAEvEgxC,GAAAr/D,UAAAy/D,qBAAR,SAA6BtqD,EAAY/J,EAAcq7B,EAAkBkyB,EAAiB6G,EAAoBD,GAU5G,YAToB,IAATn0D,IACTA,EAAOxL,KAAKwV,OAAOhK,WAEG,IAAbq7B,IACTA,EAAW7mC,KAAKwV,OAAOqxB,eAEC,IAAf+4B,IACTA,EAAa5/D,KAAKwV,OAAOoqD,YAEpB,CACLW,KAAQ,CACNC,OAAUjrD,EACVoqD,SAAYA,EACZ5G,QAAWA,GAEb0H,QAAW,CACTD,OAAUjrD,EACVoqD,SAAYA,EACZ94B,SAAYA,GAAY,KACxBr7B,KAAQA,EACRo0D,WAAcA,0BAzKrB7/D,EAAAA,uDARoB2oB,EAAAA,gBACZrG,EAAAA,oBAEAliB,SACAyc,MAiLT6iD,IA/JE,SAAAA,GAAoBr9C,EAA4BpH,EAAoCja,EAA4Cwe,GAA5Gvf,KAAAoiB,SAAAA,EAA4BpiB,KAAAgb,aAAAA,EAAoChb,KAAAe,eAAAA,EAA4Cf,KAAAuf,wBAAAA,UCbvHmhD,GAAAtgE,UAAAugE,2BAAP,SAAkCn3B,GAC9BxpC,KAAKgb,aAAauN,QAAiC,wBAAIihB,wBAN9DzpC,EAAAA,uDAHQsiB,EAAAA,gBAYTq+C,IANI,SAAAA,GAAoB1lD,GAAAhb,KAAAgb,aAAAA,UCOf4lD,GAAAxgE,UAAA4xB,KAAP,WACMhyB,KAAK6gE,WAAWp6C,SAAS,OAC3BzmB,KAAK6gE,WAAa7gE,KAAK6gE,WAAWrzB,UAAU,EAAGxtC,KAAK6gE,WAAWr+D,OAAS,IAE1E,IAAMs+D,EAAsB9gE,KAAK6gE,WAAU,4CAA2C,IAAInzD,MAAOk8C,UAAUtxC,WACrGyoD,EAAWH,GAAoBI,UAAU54D,IAAIpI,KAAK6gE,YACxD,GAAIE,EACF,OAAOA,EAEP,IAAME,EAAOjhE,KAAKkhE,WAAW94D,IAAkB04D,EAAkB,CAAEK,aAAc,SAAUvgD,KAAKwgD,EAAAA,SAEhG,OADAR,GAAoBI,UAAU14D,IAAItI,KAAK6gE,WAAYI,GAC5CA,GAjBIL,GAAAI,UAAY,IAAIz4D,yBAFhCxI,EAAAA,uDAL4B2oB,EAAAA,4CAUxBzf,EAAAA,OAAMC,KAAA,CAACm4D,EAAAA,0BAXHC,EAAAA,cA4BTV,IAnBE,SAAAA,GACUx+C,EACyBy+C,EACzBK,GAFAlhE,KAAAoiB,SAAAA,EACyBpiB,KAAA6gE,WAAAA,EACzB7gE,KAAAkhE,WAAAA,UCIHK,GAAAnhE,UAAA4xB,KAAP,WAAA,IAAA9wB,EAAAlB,KAKE,OAJIA,KAAK6gE,WAAWp6C,SAAS,OAC3BzmB,KAAK6gE,WAAa7gE,KAAK6gE,WAAWrzB,UAAU,EAAGxtC,KAAK6gE,WAAWr+D,OAAS,IAGnExC,KAAKwhE,oBAAoBxvC,OAAOpR,KACrCI,EAAAA,UAAU,SAACygD,GACT,IACMC,EADcD,EAAaE,YACMzqD,KAAK,SAACwqD,GAAgD,OAAAA,EAAmBE,KAAO1gE,EAAK8Z,aAAakR,YACzI,GAAIw1C,EAAoB,CACtB,IAAMG,EAAoB3gE,EAAK2/D,WAAU,gBAAgBa,EAAmBvmD,KAAI,aAAY,IAAIzN,MAAOk8C,UAAUtxC,WAC3Gd,EAAStW,EAAK2/D,WAAU,gBAAgBa,EAAmBvmD,KAC3D4lD,EAAWQ,GAA8BP,UAAU54D,IAAIoP,GAC7D,GAAIupD,EACF,OAAOA,EAEP,IAAME,EAAO//D,EAAKggE,WAAW94D,IAAIy5D,EAAgB,CAAEV,aAAc,SAAUvgD,KAAKwgD,EAAAA,SAEhF,OADAG,GAA8BP,UAAU14D,IAAIkP,EAAKypD,GAC1CA,EAGT,OAAO1gD,EAAAA,GAAG,QA7BHghD,GAAAP,UAAY,IAAIz4D,yBAFhCxI,EAAAA,uDAL4B2oB,EAAAA,gBAGHrG,EAAAA,oBAJjBi/C,EAAAA,8CAaJr4D,EAAAA,OAAMC,KAAA,CAACm4D,EAAAA,sDACPp4D,EAAAA,OAAMC,KAAA,CAAC44D,EAAAA,kCA4BZP,IAjCE,SAAAA,GACUn/C,EACApH,EACAkmD,EACyBL,EACYW,GAJrCxhE,KAAAoiB,SAAAA,EACApiB,KAAAgb,aAAAA,EACAhb,KAAAkhE,WAAAA,EACyBlhE,KAAA6gE,WAAAA,EACY7gE,KAAAwhE,oBAAAA,UCF/C/4D,OAAAC,eAAWq5D,GAAA3hE,UAAA,UAAO,KAAlB,WACQ,IAAAyZ,EAAA7Z,KAAAuvD,cAAA,GAAErnB,EAAAruB,EAAAmoD,WAAAA,OAAA,IAAA95B,EAAA,KAAAA,EAAmBgS,EAAArgC,EAAAooD,WAAAA,OAAA,IAAA/nB,EAAA,KAAAA,EACvBgoB,EAAiB,KACjBF,GAAcC,IAChBC,EAAoBF,EAAU,IAAIC,GAEpC,IAAMx0D,EAAO,CACXu0D,WAAUA,EACVC,WAAUA,EACVC,eAAcA,GAEV1Y,EAAAxpD,KAAAmiE,cAAA,GAAE1Y,EAAAD,EAAAwF,aAAqB/E,EAAAT,EAAAyF,oBAA4B9E,EAAAX,EAAA0F,uBAA+BxE,EAAAlB,EAAA2F,qBAOxF,MAAO,CAAE1hD,KAAI20D,EAAEC,OANA,CACbrT,kBAFM,IAAAvF,EAAA,KAAAA,EAGNwF,yBAH2B,IAAAhF,EAAA,KAAAA,EAI3BiF,4BAJuD,IAAA/E,EAAA,KAAAA,EAKvDgF,0BALsF,IAAAzE,EAAA,KAAAA,qCAenFqX,GAAA3hE,UAAAkiE,SAAP,SAAgBz3D,EAAYqzD,GAC1B,OAAIA,GAAYrzD,EAEG,UADjBqzD,EAAWA,EAASt0C,eAEX5pB,KAAKuiE,cAAc13D,GACJ,aAAbqzD,EACFl+D,KAAKwiE,kBAAkB33D,GACR,WAAbqzD,EACFl+D,KAAKyiE,gBAAgB53D,GAErBA,EAGFA,GAQJk3D,GAAA3hE,UAAAsiE,UAAP,SAAiBC,GAIf,MAAyB,UAFvBA,EADEA,GACiBA,EAAiB/4C,eAG7B5pB,KAAK4iE,QAAQn1D,KAAKu0D,WACK,aAArBW,EACF3iE,KAAK4iE,QAAQn1D,KAAKy0D,eAElB,IAOHH,GAAA3hE,UAAAmiE,cAAR,SAAsB13D,GACpB,IAAIm3D,EAAahiE,KAAKuvD,cAAgBvvD,KAAKuvD,aAAayS,YAAc,aACtE,IAAKA,IAAen3D,EAClB,OAAOA,EAET,IAAM4C,EAAOG,EAAO/C,GAEpB,OADgB4C,EAAK4d,WAIrB22C,EAAahiE,KAAK6iE,gBAAgBb,GAC3Bv0D,EAAKI,OAAOm0D,IAHVn3D,GAUHk3D,GAAA3hE,UAAAoiE,kBAAR,SAA0B33D,GACxB,IAAIm3D,EAAahiE,KAAKuvD,cAAgBvvD,KAAKuvD,aAAayS,YAAc,aAClEC,EAAajiE,KAAKuvD,cAAgBvvD,KAAKuvD,aAAa0S,YAAc,WACtE,IAAKD,IAAeC,EAClB,OAAOp3D,EAET,IAAMi4D,EAAWl1D,EAAO/C,GAExB,IADgBi4D,EAASz3C,UAEvB,OAAOxgB,EAQT,IAAMq3D,GALJF,EADEA,GACWhiE,KAAK6iE,gBAAgBb,IAKA,KAFlCC,EADEA,GACWjiE,KAAK+iE,gBAAgBd,IAGpC,OAAOa,EAASj1D,OAAOq0D,IAMjBH,GAAA3hE,UAAAqiE,gBAAR,SAAwB53D,GACtB,GAAc,OAAVA,GAAkBA,IAAUkH,WAAuB,KAAVlH,EAC3C,MAAO,GAET,IAAMm4D,EAAY,IAAIC,EAAAA,UAAUp4D,GAEhC,IAAKo4D,EAAAA,UAAUC,YAAYF,GACzB,OAAOn4D,EAET,IAAMs4D,EAAaH,EAAUG,aACvBt1D,EAAS7N,KAAKojE,oBACdvpD,EAAA7Z,KAAAmiE,cAAA,GAAEj6B,EAAAruB,EAAAm1C,aAAAA,OAAA,IAAA9mB,EAAA,KAAAA,EAAqBgS,EAAArgC,EAAAo1C,oBAAAA,OAAA,IAAA/U,EAAA,KAAAA,EAC7B,OAAIipB,GACmB,OAAjBnU,GACFnhD,EAAOw1D,OAASrU,EACTgU,EAAUM,gBAAgBC,SAAStU,EAAqB,KAAMphD,IAGlEm1D,EAAUO,SAAStU,EAAqB,KAAMphD,IAM/Ck0D,GAAA3hE,UAAAyiE,gBAAR,SAAwBh1D,GACtB,OAAOA,EAAOmE,QAAQ,KAAM,KAAKA,QAAQ,KAAM,MAMzC+vD,GAAA3hE,UAAA2iE,gBAAR,SAAwBl1D,GACtB,OAAOA,EAAOmE,QAAQ,KAAM,MAKtB+vD,GAAA3hE,UAAAgjE,kBAAR,WACE,GAAIpjE,KAAKmiE,aAAc,CACf,IAAAtoD,EAAA7Z,KAAAmiE,aAAEj6B,EAAAruB,EAAAq1C,uBAAAA,OAAA,IAAAhnB,EAAA,KAAAA,EAA+BgS,EAAArgC,EAAAs1C,qBAAAA,OAAA,IAAAjV,EAAA,KAAAA,EACjCrsC,EAAc,CAClB21D,UAAW,GAQb,OAN+B,OAA3BtU,IACFrhD,EAAO41D,iBAAmBvU,GAEC,OAAzBC,IACFthD,EAAO61D,eAAiBvU,GAEnBthD,IAGXpF,OAAAC,eAAYq5D,GAAA3hE,UAAA,eAAY,KAAxB,WACE,OAAOJ,KAAKuvD,cAAgBvvD,KAAKuvD,aAAa4S,cAAgB,2DArKjEpiE,EAAAA,uDAL4B2oB,EAAAA,4CAOczf,EAAAA,OAAMC,KAAA,CAAC2oD,EAAAA,wBAqKlDkQ,IArKE,SAAAA,GAAoB3/C,EAAuDmtC,GAAvDvvD,KAAAoiB,SAAAA,EAAuDpiB,KAAAuvD,aAAAA,UCA3E9mD,OAAAC,eAAWi7D,GAAAvjE,UAAA,aAAU,KAArB,WACE,OAAOJ,KAAKkiB,SAAWliB,KAAKkiB,QAAQgV,YAAc,sCAEtDysC,IARA,SAAAA,iBCIqC52D,EAAAA,MAAA42D,IAK5BC,GAAAxjE,UAAAyjE,YAAP,WAKE,IAAMC,EAAiB9jE,KAAK+jE,sBAAsB/jE,KAAKkiB,SACnD4hD,GAA0C,EAAxBA,EAAethE,QACnCshE,EAAe1hE,QAAQ,SAAC4hE,GACtB,IAAIC,GAAkB,EAClBD,EAAcpiE,eAAe,oCAC/BqiE,EAAkBD,EAA8C,gCAE9DC,GACFD,EAAcE,eAAc,MAa7BN,GAAAxjE,UAAA+jE,mBAAP,SAA0Bp7B,GAQxB,GAPmB,iBAARA,IAEPA,GADwB,IAAtBA,EAAIpvB,QAAQ,KACRovB,EAAInvB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAE3B,CAACq/B,IAGNA,KAAOA,EAAIvmC,OAAS,GAAzB,CAIA,IAAMwY,EAAehb,KAAKkiB,QAAQlH,aAClC,GAAKA,EAAL,CAGA,IAAMoF,EAAapF,EAAaoF,WAC1BwhD,EAAK5mD,EAAakR,UAClB6D,EAAc/U,EAAa6M,WAAa7M,EAAa6M,UAAUkI,YACrE,GAAK3P,EAAL,CAIA,IAAM+L,EAAgB/L,EAAWuH,oBAAoByE,4BAA4Bw1C,GAC3EwC,EAAoCj4C,EAAchqB,OAAO,SAAA6Y,GAAgB,OAAAA,GAAgBA,EAAa6M,WAAa7M,EAAa6M,UAAUkI,cAAgBA,IAE1Js0C,EAAqBrkE,KAAKskE,gCAAgCF,GAChE,GAAKC,EAAL,CAIA,IAAME,EAA0BF,EAAmBzzC,MAEhD2zC,GACDA,EAAKC,YAAYz7B,GAAK,GAGxB,IAAM07B,EAAwBt4C,EAAchqB,OAAO,SAAA6Y,GAAgB,OAAAA,EAAa6M,UAAUkI,cAAgBA,GAAe/U,EAAa6M,UAAUkI,YAAYvJ,WAAWuJ,KACjK20C,EAAyB1kE,KAAKskE,gCAAgCG,GAEhEC,GAA0D,EAAhCA,EAAuBliE,QACnDkiE,EAAuBtiE,QAAQ,SAAC4hE,GAE9BA,EAAcW,YAAc,UAS3Bf,GAAAxjE,UAAAwkE,YAAP,SAAmB77B,GAIjB,GAHmB,iBAARA,IACTA,EAAM,CAACA,IAEJA,KAAOA,EAAIvmC,OAAS,GAAzB,CAGA,IAAMshE,EAAiB9jE,KAAK+jE,sBAAsB/jE,KAAKkiB,SACnD4hD,GAA0C,EAAxBA,EAAethE,QACnCshE,EAAe1hE,QAAQ,SAAC4hE,GACtBA,EAAcQ,YAAYz7B,GAAK,OAS7B66B,GAAAxjE,UAAA2jE,sBAAR,SAA8B5lB,GAC5B,IAAI0mB,EAAQ,GACN7pD,EAAemjC,GAAkBA,EAAenjC,aAChDoF,EAAapF,GAAgBA,EAAaoF,YAAc,KAC9D,GAAIA,EAAY,CACd,IAAM0kD,EAA+C1kD,EAAW0kD,cAChDxiE,MAAM4O,KAAK4zD,EAAcrkD,UACjCre,QAAQ,SAAC+U,GACf,IAEM2sD,EAFaxhE,MAAM4O,KAAKiG,EAAKsJ,UAEDte,OAAO,SAACslB,GAAmB,OAAAA,aAAqBs9C,EAAAA,oBAClFF,EAAQA,EAAMx5D,OAAOy4D,KAGzB,OAAOe,GAEDjB,GAAAxjE,UAAAkkE,gCAAR,SAAwCn4C,GACtC,OAAOA,EAAcpQ,OAAO,SAAC7Y,EAAQ8X,GACnC,IAAMoF,EAAapF,EAAaoF,WAC1BiH,EAAUrM,EAAaqM,QAEvB29C,EAAgB5kD,EAAW0kD,cAAc18D,IAAIif,GAC7Cw9C,EAAQG,GAAiB1iE,MAAM4O,KAAK8zD,EAAcvkD,UAAUte,OAAO,SAAAslB,GAAa,OAAAA,aAAqBs9C,EAAAA,oBAI3G,OAHIF,GAAwB,EAAfA,EAAMriE,SACjBU,EAASA,EAAOmI,OAAOw5D,IAElB3hE,GACN,0BAlINnD,EAAAA,aAoID6jE,IApIA,SAAAA,8DCUSqB,GAAA7kE,UAAA8kE,MAAP,SAAan8B,EAAwBo8B,GAInC,GAHmB,iBAARp8B,IACTA,EAAMA,EAAInvB,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,MAE9BpH,MAAMC,QAAQwmC,IAAQA,EAAIvmC,OAAS,EACtC,OAAO8a,EAAAA,MAEe,iBAAb6nD,IACTA,EAAWA,EAASz+C,QAGpBy+C,EADGA,GACQ,IAEbA,EAAWnf,SAASmf,IAChB9mC,MAAM8mC,IAAaA,GAAY,KACjCA,EAAW,KAEb,IAAMlgC,EAA+B8D,EAAI/oB,IAAI,SAAC7I,GAC5C,MAAO,CACLiuD,OAAQjuD,KAKZnX,KAAKqlE,iBAAiBC,eAAergC,EAAUkgC,yBAjClDplE,EAAAA,uDANoB2oB,EAAAA,gBACZrG,EAAAA,oBAEAkjD,EAAAA,oBAsCTN,IAjCE,SAAAA,GAAoB7iD,EAA4BpH,EAAoCqqD,GAAhErlE,KAAAoiB,SAAAA,EAA4BpiB,KAAAgb,aAAAA,EAAoChb,KAAAqlE,iBAAAA,MCRrEG,GAAAA,GAwIHC,OCvHLC,GAAAtlE,UAAAulE,wBAAP,SAA+BC,GAC7B,IAIM33D,EAAU,CACd9B,KAJW,CACX05D,WAAYD,IAMd,OAD0C5lE,KAAK0nB,WAC1BuxC,MAAM2C,QARf,oEAQ4B,MAAO,KAAM3tD,IAQhDy3D,GAAAtlE,UAAA0lE,4BAAP,SAAmCF,EAAoBG,EAAkBC,QAAA,IAAAA,IAAAA,EAAA,aACvE,IAGM/3D,EAAU,CACd9B,KAHW,CAAE85D,QAASD,EAAYE,MAAON,EAAYG,SAAQA,IAK/D,OAJ0C/lE,KAAK0nB,WAI1BuxC,MAAM2C,QANf,oEAM4B,MAAO,KAAM3tD,IAShDy3D,GAAAtlE,UAAA+lE,cAAP,SAAqBP,EAAoBQ,EAAmBJ,QAAA,IAAAA,IAAAA,EAAA,aAC1D,IAEM/3D,EAAU,CACd9B,KAHW,CAAE85D,QAASD,EAAYE,MAAON,EAAYQ,aAAYA,IAKnE,OAJ0CpmE,KAAK0nB,WAI1BuxC,MAAM2C,QAAQ,oEAAqE,MAAO,KAAM3tD,IAShHy3D,GAAAtlE,UAAAimE,YAAP,SAAmBC,EAAgBnkE,EAAgBqT,GACjD,IACM+wD,EAAkB,GACpB/wD,IACEA,EAAO2hB,YACTovC,EAAsB,UAAI30D,KAAK+E,UAAUnB,EAAO2hB,UAAY,IAE1D3hB,EAAO0pB,WACTqnC,EAAqB,SAAI30D,KAAK+E,UAAUnB,EAAO0pB,SAAW,IAExD1pB,EAAOgxD,YACTD,EAAsB,UAAI30D,KAAK+E,UAAUnB,EAAOgxD,YAE9ChxD,EAAOixD,cACTF,EAAmB,OAAI/wD,EAAOixD,cAGlC,IAMMx4D,EAAU,CACd9B,KAPW,CACXu6D,OAAQJ,EACRppB,WAAYtrC,KAAK+E,UAAU4vD,GAC3BI,UAAWxkE,IAMb,OAJ0CnC,KAAK0nB,WAI1BuxC,MAAM2C,QAzBf,+DAyB4B,MAAO,KAAM3tD,yBApFxDlO,EAAAA,uDAPoB2oB,EAAAA,gBAEZmJ,EAAAA,cA2FT6zC,IApFE,SAAAA,GACUtjD,EACAsF,GADA1nB,KAAAoiB,SAAAA,EACApiB,KAAA0nB,WAAAA,EDXK89C,GAAAA,GAAAA,IAAI,IAwIPC,GAAAD,GAAAC,YAAAD,GAAAC,UAAS,KACnB,QAAA,OACAA,GAAA,OAAA,SACAA,GAAA,KAAA,OACAA,GAAA,OAAA,SACAA,GAAA,KAAA,eExHKmB,GAAAxmE,UAAAulE,wBAAP,SAA+BC,GAA/B,IAAA1kE,EAAAlB,KACE,OAAOA,KAAK0nB,WAAWi+C,wBAAwBC,GAAYhlD,KACzDZ,EAAAA,IAAI,SAAC1B,GACH,IAAKA,IAAaA,EAASmwB,YACzB,OAAO,KAET,IAAMA,EAAc78B,KAAKC,MAAMyM,EAASmwB,aAClCvrC,EAA4B,CAAE2jE,QAAS,GAAIhnC,MAAO,IAClDinC,EAAWr4B,EAAYo4B,SAAW,KAClChnC,EAAQ4O,EAAY5O,OAAS,KAuBnC,OAtBIinC,GAAYxkE,MAAMC,QAAQukE,KAC5BA,EAAS9mD,IAAI,SAAC6mD,GAEZ,OADAA,EAAQj2D,KAAO1P,EAAK6lE,cAAcF,GAC3BA,IAET3jE,EAAO2jE,QAAUC,GAEfjnC,GAASv9B,MAAMC,QAAQs9B,IAAyB,EAAfA,EAAMr9B,SACzCq9B,EAAM7f,IAAI,SAAC0c,GAUT,OARAA,EAAK9rB,KAAO1P,EAAK6lE,cAAcrqC,GAE3BA,EAAKsqC,YAAcxB,GAAKC,UAAUwB,SAAQvqC,EAAKwqC,WACjDxqC,EAAKtmB,KAAOxE,KAAKC,MAAM6qB,EAAKwqC,WAG9BxqC,EAAKyqC,WAAiC,MAApBzqC,EAAKyqC,WACvBzqC,EAAK0qC,WAAiC,MAApB1qC,EAAK0qC,WAChB1qC,IAETx5B,EAAO28B,MAAQA,GAEV38B,MAUN0jE,GAAAxmE,UAAA0lE,4BAAP,SAAmCF,EAAoBG,EAAkBC,GACvE,YADuE,IAAAA,IAAAA,EAAA,aAChEhmE,KAAK0nB,WAAWo+C,4BAA4BF,EAAYG,EAAUC,GAAYplD,KAAKZ,EAAAA,IAAI,SAAC9c,GAC7F,OAAO0O,KAAKC,MAAM3O,OAUf0jE,GAAAxmE,UAAA+lE,cAAP,SAAqBP,EAAoBQ,EAAmBJ,GAC1D,YAD0D,IAAAA,IAAAA,EAAA,aACnDhmE,KAAK0nB,WAAWy+C,cAAcP,EAAYQ,EAAcJ,GAAYplD,KAAKZ,EAAAA,IAAI,SAAC4G,GACnF,OAAOhV,KAAKC,MAAM+U,OAUfggD,GAAAxmE,UAAAimE,YAAP,SAAmBC,EAAgBnkE,EAAgBqT,GACjD,IACM+wD,EAAkB,GACpB/wD,IACEA,EAAO2hB,YACTovC,EAAsB,UAAI30D,KAAK+E,UAAUnB,EAAO2hB,UAAY,IAE1D3hB,EAAO0pB,WACTqnC,EAAqB,SAAI30D,KAAK+E,UAAUnB,EAAO0pB,SAAW,IAExD1pB,EAAOgxD,YACTD,EAAsB,UAAI30D,KAAK+E,UAAUnB,EAAOgxD,YAE9ChxD,EAAOixD,cACTF,EAAmB,OAAI/wD,EAAOixD,cAGlC,IAMMx4D,EAAU,CACd9B,KAPW,CACXu6D,OAAQJ,EACRppB,WAAYtrC,KAAK+E,UAAU4vD,GAC3BI,UAAWxkE,IAMb,OAJ0C,KAIrB82D,MAAM2C,QAzBf,+DAyB4B,MAAO,KAAM3tD,GAAS2S,KAC5DZ,EAAAA,IAAI,SAAC9c,GAAgB,OAAA0O,KAAKC,MAAM3O,OAQ5B0jE,GAAAxmE,UAAA2mE,cAAR,SAAsB7rD,GACpB,IAAKA,EACH,OAAO,KAET,IAAItK,EAAO,KACX,OAAQ5Q,KAAKoJ,UACX,IAAK,KACHwH,EAAOsK,EAAgB,QACvB,MACF,IAAK,SACHtK,EAAOsK,EAAiB,SACxB,MACF,IAAK,SACHtK,EAAOsK,EAAiB,SACxB,MACF,QAAStK,EAAOsK,EAAiB,SAEnC,OAAOtK,wBAnIV7Q,EAAAA,uDAR4B2oB,EAAAA,gBAKpBg9C,mCAQJ7iE,EAAAA,UAAQ,CAAAD,KAAIqG,EAAAA,OAAMC,KAAA,CAACC,EAAAA,gBAgIxBy9D,IAnIE,SAAAA,GACUxkD,EACAsF,EAC+Bte,GAF/BpJ,KAAAoiB,SAAAA,EACApiB,KAAA0nB,WAAAA,EAC+B1nB,KAAAoJ,SAAAA,EAEvCpJ,KAAKoJ,SAAWpJ,KAAKoJ,UAAY,iBCK5Bi+D,GAAAjnE,UAAAk0B,KAAP,SAAYsxC,EAAoB0B,EAA4Br5D,GAA5D,IAAA/M,EAAAlB,KACE,IAAK4lE,EACH,MAAM,IAAIl1D,MAAM,iCAUlB,MALuB,iBAFrBzC,EADGA,GACO,KAEuBA,EAAQuY,WAAW,MAAQvY,EAAQwY,SAAS,OAC7ExY,EAAU2D,KAAKC,MAAM5D,IAEvBA,EAAQo4D,YAAcrmE,KAAKunE,mBAAmBlB,YAC9CrmE,KAAKe,eAAeP,OACbR,KAAKunE,mBAAmB5B,wBAAwBC,GAAYhlD,KACjEG,EAAAA,IAAI,SAAC7d,GACHhC,EAAKH,eAAeW,OACpB,IAAM+sC,EAAcvrC,GAAU,KAC9B,GAAIurC,EAAa,CACf,IACM5O,EADcjuB,KAAKC,MAAM48B,GACL5O,OAAS,KACnC,IAAKA,GAASA,EAAMr9B,OAAS,EAE3B,YADAtB,EAAKuS,cAAcrG,QAAQlM,EAAK0L,gBAAgB/F,cAGlD3F,EAAKsmE,qBAAqBhnE,KAAKq/B,EAAO5xB,QAEtC/M,EAAKuS,cAActI,MAAMjK,EAAK0L,gBAAgB/F,kBAK9CwgE,GAAAjnE,UAAAqnE,cAAR,SAAsB7B,EAAoB0B,GAA1C,IAAApmE,EAAAlB,KAEE,OADkBA,KAAKunE,mBAAmB5B,wBAAwBC,GACjDhlD,KACfI,EAAAA,UAAU,SAAA0mD,GACR,OAAIJ,EACwBpmE,EAAKqmE,mBAAmBzB,4BAA4BwB,EAAmBA,GACxE1mD,KACvBZ,EAAAA,IAAI,SAAA6G,GACF,IAAM8gD,EAAkBD,EAAW7nC,MAEnC,OADiB3+B,EAAK0mE,cAAcD,EAAiB9gD,MAKlDtG,EAAAA,GAAGmnD,EAAW7nC,WAMrBwnC,GAAAjnE,UAAAwnE,cAAR,SAAsBD,EAAsB9gD,GAC1C,OAAO,2BA9DV9mB,EAAAA,uDAToB2oB,EAAAA,gBACZm/C,EAAAA,4BAIAjB,UADAzmE,SAFAoT,UAIA/K,KAmET6+D,IA9DE,SAAAA,GACUjlD,EACAolD,EACAD,EACAxmE,EACA0S,EACA7G,GALA5M,KAAAoiB,SAAAA,EACApiB,KAAAwnE,qBAAAA,EACAxnE,KAAAunE,mBAAAA,EACAvnE,KAAAe,eAAAA,EACAf,KAAAyT,cAAAA,EACAzT,KAAA4M,gBAAAA,UCHHk7D,GAAA1nE,UAAA6pB,QAAP,SAAe89C,EAAoBC,SAC3BC,EAAOjoE,KAAKkoE,eAAe52D,QAAQy2D,GACnCI,EAAoBC,EAAAA,eAAeC,2BAA2BN,EAAY/nE,KAAKgb,aAAa0M,WAAW+D,gBACvG68C,EAAgBtoE,KAAKuoE,mBAAmBN,EAAME,GAC9CK,EAAexoE,KAAKyoE,oBACpBvmD,EAAOpY,IAAA+P,EAAA,IACV7Z,KAAK0oE,wBAAyBJ,EAAazuD,GACzC2uD,EAAY,CACfvF,UAAS0F,EAAA1F,UACTjoD,aAAchb,KAAKgb,aACnB2P,YAAa3qB,KAAKgb,aAAa2P,YAC/BjD,WAAY1nB,KAAKgb,aAAa0M,YAC3BsgD,GAEL,OAAOhoE,KAAK4oE,mBAAmBC,KAAKd,EAAY7lD,IAQ3C4lD,GAAA1nE,UAAA0oE,aAAP,SAAoBf,EAAoBC,GACtC,IAAM9kE,EAASlD,KAAKiqB,QAAQ89C,EAAYC,GACxC,OAAOznD,EAAAA,GAAGrd,IASJ4kE,GAAA1nE,UAAAmoE,mBAAR,SAA2BN,EAAgBE,EAA6BjmD,GAAxE,IAAAhhB,EAAAlB,KACM+oE,GAAqB,EACzBd,EAAK7lE,QAAQ,SAAC4mE,GACZ,IAAMC,EAAqB/nE,EAAK+nE,mBAAmBD,GAC7CE,GAA2E,IAAvDf,EAAkBh3C,UAAU,SAAAha,GAAQ,OAAAA,IAAS6xD,IAGnEC,GAEEC,GAEuB,GADAF,EAAIpvD,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAAGlH,OAAS,IAG9DumE,GAAqB,KAS7B,IAAM3yD,EAAOpW,KAAKmpE,YAClB,GAAIJ,EAAoB,CACtB,IAAMK,EAAappE,KAAKgb,aAAa0M,WAAWoE,iBAAiBsR,SACjEhnB,EAAe,SAAI,OACnBA,EAAgB,UAAIgzD,EAEtB,OAAOhzD,GAOD0xD,GAAA1nE,UAAA6oE,mBAAR,SAA2BD,GACzB,OAAOA,EAAIxiD,WAAW6iD,EAAAA,kBAOjBvB,GAAA1nE,UAAA+oE,UAAP,WACE,IAAM19C,EAAiBzrB,KAAKgb,aAAa0M,WAAW+D,eAC9Cd,EAAc3qB,KAAKgb,aAAa2P,YAChC2+C,EAAsB,GAC5BlB,EAAAA,eAAemB,uBAAuB99C,EAAgB69C,GACtD,IAAMz9C,EAAS7rB,KAAKgb,aAAa2P,YAAYgB,KAAKwR,YAAYC,SAE9D,OADAvR,EAAiB,SAAI,UAChBy9C,GAAuBA,EAAoB9mE,OAAS,GAIzD8mE,EAAoBlnE,QAAQ,SAACusB,GAC3B,IAAM22B,EAAM8iB,EAAAA,eAAeoB,qBAAqB76C,EAAOhE,GACvD,GAAI26B,EAAK,CACP,IAAMh0B,EAAe3C,EAAMiC,MACvB64C,EAAS96C,EAAM5S,OAAO,SAACb,EAAaC,GACtC,OAAOD,GAAUA,EAAOC,IAAS,MAChC0Q,GACG69C,EAAI5/D,EAAA,CAAK6/D,UAASv+D,GAAMq+D,EAAOn4C,KAAmBg0B,EAAG,CAAEskB,SAAU,SACvEH,EAAOn4C,GAAgBo4C,KAXlB79C,GAmBXpjB,OAAAC,eAAco/D,GAAA1nE,UAAA,yBAAsB,KAApC,WACE,IAAMsnB,EAAa1nB,KAAKoiB,SAASha,IAAIypB,EAAAA,YACrC,OAAOnK,GAAcA,EAAW+D,gBAAkB/D,EAAW+D,eAAe2E,YAAc1I,EAAW+D,eAAe2E,WAAWwP,cAAgB,sCAO1IkoC,GAAA1nE,UAAAqoE,kBAAP,WACE,IAAM7G,EAAK5hE,KAAKgb,aAAakR,UAEvBC,EADansB,KAAKoiB,SAASha,IAAgBtF,EAAAA,WAAY,MAC5B6kB,oBAAoByE,4BAA4Bw1C,GAC3E1+D,EAAS,GACf,GAAIipB,GAAwC,EAAvBA,EAAc3pB,OAAY,CAC7C,IACMk6D,EADwBvwC,EAAc,GACGnD,6BAC/C,GAAI0zC,EAAkB,CACpB,IAAMmN,EAAUnN,EAAiB70C,UAAUU,SACrB9f,OAAOqhE,oBAAoBD,IAAY,IAC/CznE,QAAQ,SAACs6B,GACoB,OAArCA,EAAKqtC,MAAM,wBACb7mE,EAAOw5B,GAAQmtC,EAAQntC,OAK/B,OAAOx5B,wBA3IVnD,EAAAA,uDALoB2oB,EAAAA,gBAE2CshD,EAAAA,sBAA3C3nD,EAAAA,oBAA2E4nD,EAAAA,sBAgJhGnC,IA3IE,SAAAA,GAAoB1lD,EAA4B8lD,EAAwCltD,EAAoC4tD,GAAxG5oE,KAAAoiB,SAAAA,EAA4BpiB,KAAAkoE,eAAAA,EAAwCloE,KAAAgb,aAAAA,EAAoChb,KAAA4oE,mBAAAA,ECF9H,IAAAsB,IAQSA,GAAA9pE,UAAA+pE,cAAP,SAAqBC,IACnBA,GAAqB,IAAXA,GAA8B,SAAXA,IACfpqE,KAAKqqE,OACjBrqE,KAAKqqE,OAAOC,OACHtqE,KAAKuqE,IACdvqE,KAAKuqE,GAAGJ,iBAQLD,GAAA9pE,UAAAoqE,mBAAP,SAA0BrF,EAAkBiF,GAA5C,IAAAlpE,EAAAlB,KACEoqE,GAAqB,IAAXA,GAA8B,SAAXA,EACzB/rC,MAAM8mC,KAGNiF,GAAUpqE,KAAKqqE,OACjBtoE,OAAOX,WAAW,WAChBF,EAAKmpE,OAAOC,QACXnF,GACMnlE,KAAKuqE,IACdxoE,OAAOX,WAAW,WAChBF,EAAKqpE,GAAGJ,iBACPhF,0BAjCRplE,EAAAA,uDALuD2oB,EAAAA,gBAA/B+hD,EAAAA,yBAAhBC,EAAAA,kBAyCTR,IAlCE,SAAAA,GAAmB9nD,EAA4BmoD,EAA+BF,GAA3DrqE,KAAAoiB,SAAAA,EAA4BpiB,KAAAuqE,GAAAA,EAA+BvqE,KAAAqqE,OAAAA,UCUvEM,GAAAvqE,UAAAoG,QAAP,aAOOmkE,GAAAvqE,UAAAqG,OAAP,SAAc4gB,EAAiB9R,GAC7B,IAAMyF,EAAehb,KAAKgb,aAAaoF,WAAWuH,oBAAoBC,oBAAoBP,GAC1F,IAAKrM,EACH,MAAM,IAAItK,MAAM,iCAAiC2W,GAEnD,IAAMqE,EAAe1rB,KAAKgb,aAAa2P,YAAYgB,KAAKC,UAClDmE,EAAc/U,EAAa6M,UAAUkI,YACrCN,EAAeM,EAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IACxD,IAAK6L,EAAI,CACP,IAAMma,EAAc1vB,KAAKgb,aAAa2P,YAAYM,UAClD1V,EAAKma,EAAY9D,UAEnB,IAAMiL,EAAgB72B,KAAK0nB,WACrBkjD,EAAa3lB,EAAAA,gBAAgBC,0BAA0Bz1B,EAAcoH,EAAcmY,cAAehvC,KAAKgb,aAAa2P,aAA0Bw6B,UAAUnlC,IAAI,SAAC7E,GAAiB,OAAAA,EAAKvB,MAAM,KAAK,KAC9LixD,EAAkBvoE,MAAM4O,KAAK05D,GAEnCC,EAAgBj6C,MAChB,IAAMpf,EAAYxR,KAAKgb,aAAa+V,eAA0B,UAC9D,GAAI85C,EAAgBroE,OAAS,EAAG,CAE9B,IAAMqpB,EAAS7rB,KAAK0nB,WAAWoE,iBAAiBC,cAAcxW,GACxDu1D,EAAej/C,EAAqB,aAC1CA,EAAOmG,KAAK84C,EAAc,CAAExO,WAAW,QAClC,CACL,IAAMyO,EAAal0C,EAAcmY,cAAcg8B,oBAAoBH,GACnE,GAAIE,EAAY,CACd,IACME,GADAH,EAAsBC,EAAyB,cAC3B7zD,KAAK,SAAAC,GAAQ,OAAAA,EAAK5B,KAAOA,IACnD,IAAI01D,EAkBG,CAEL,IAAMrlB,EAAQ5lD,KAAK+6D,UAAUhrC,EAAarE,GAC1C,OAAO1rB,KAAK0V,eAAelP,QAAQxG,KAAK4M,gBAAgBpH,mBAAmBob,KACzEI,EAAAA,UAAU,SAAA9d,GACR,OAAIA,EACK2zB,EAAcsmC,mBAAmBvX,EAAOrwC,GAAIqL,KACjDG,EAAAA,IAAI,WACF8V,EAAcmY,cAAcmuB,mBAAmBvX,EAAOrwC,GAE3B,IAAvBw1D,EAAWrtC,SAAiBlsB,GAC9BA,EAAU7Q,WAKT2c,EAAAA,SAhCb,IAAM4tD,EAAiBr0C,EAAcmY,cAAcuW,gBAAgBqlB,GACnE,GAAIM,EAAOr8C,SAAmC,EAAxBq8C,EAAOr8C,QAAQrsB,OACnC,OAAOxC,KAAK0V,eAAelP,QAAQxG,KAAK4M,gBAAgBpH,mBAAmBob,KACzEG,EAAAA,IAAI,SAAC7d,GACCA,IACFgoE,EAAOl5C,KAAKi5C,EAAM,CAAE3O,WAAW,IAC/B4O,EAAOr8C,QAAQ7W,OAAO,EAAGkzD,EAAOr8C,QAAQrsB,YAM1CgP,GACFA,EAAU7Q,SA0BpB,OAAO4f,EAAAA,GAAG,KAKLoqD,GAAAvqE,UAAA+qE,iBAAP,SAAwB51D,GAAxB,IAAArU,EAAAlB,KACQ+vB,EAAc/vB,KAAKgb,aAAa6M,UAAUkI,YAC1CN,EAAeM,EAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAElD+iB,EAAOzsB,KAAKgb,aAAaoF,WAAWuH,oBAAoByjD,sBACxD72B,EAAkB9nB,EAAK9B,YAAYgB,KAAKC,UAE9C,GADA5rB,KAAKgb,aAAa2P,YAAYgB,KAAKoP,aAAawZ,GACtB,EAAtB9kB,EAAajtB,OAAY,CAC3B,IAAM6oE,EAAQ,GACd57C,EAAartB,QAAQ,SAAC+Y,EAAcpD,EAAe8tC,GACjDwlB,EAAM/pE,KAAK6Z,GACX,IAAMuU,EAAcjD,EAAK9B,YAAYgF,SAAS07C,GAC9C,GAAI37C,EAAa,CACf,IAAM9D,EAAY8D,EAAY9D,UACxB0/C,EAAmBpqE,EAAK8Z,aAAa2P,YAAYgF,SAAS07C,GAC5DtzD,IAAUgY,EAAYvtB,OAAS,GAAK+S,EACtC+1D,EAAiBvwC,aAAaxlB,GACrB+1D,GACTA,EAAiBvwC,aAAanP,QAMjC++C,GAAAvqE,UAAAmrE,WAAP,WACE,IAEM97C,EAFezvB,KAAKgb,aACO6M,UAAUkI,YACVnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAClDmtB,EAAgB72B,KAAK0nB,WACrBkjD,EAAa3lB,EAAAA,gBAAgBC,0BAA0Bz1B,EAAcoH,EAAcmY,cAAehvC,KAAKgb,aAAa2P,aAA0Bw6B,UAAUnlC,IAAI,SAAC7E,GAAiB,OAAAA,EAAKvB,MAAM,KAAK,KAC9LixD,EAAkBvoE,MAAM4O,KAAK05D,GACnCC,EAAgBj6C,MAChB,IAAM46C,EAAa30C,EAAcmY,cAAcg8B,oBAAoBH,GAC7Dr5D,EAAYxR,KAAKgb,aAAa+V,eAA0B,UACnC,IAAvBy6C,EAAW9tC,SAAiBlsB,GAC9BA,EAAU7Q,SAQNgqE,GAAAvqE,UAAA26D,UAAR,SAAkBhrC,EAAqBxa,GACrC,IAAI4F,EAAO,IAAM5F,EACXsgB,EAAW9F,EAAYnW,MAAM,KACnC,GAAsB,EAAlBic,EAASrzB,OAGX,IAAK,IAAIuV,EAAQ,EAAGA,EAAQ8d,EAASrzB,OAAS,EAAGuV,IAAS,CACxD,IAAM+d,EAAUD,EAAS9d,GACnBge,EAAU/1B,KAAKgb,aAAa6M,UAAU8C,YAAYmL,GACxD,IAAKC,IAAYA,EAAQnK,UACvB,MAAMlb,MAAM,iBAAiBqlB,EAAO,qBAEtC5a,GAAQ,IAAI2a,EAAO,IAAIC,EAAQnK,UAKnC,OAFAzQ,GAAQ,IAAM0a,EAASA,EAASrzB,OAAS,yBApJ5CzC,EAAAA,uDARoB2oB,EAAAA,gBAIZrG,EAAAA,oBAA+BwP,EAAAA,kBAC/BrpB,SACAsI,MA0JT65D,IAtJE,SAAAA,GACUvoD,EACApH,EACA0M,EACA9a,EACA8I,GAJA1V,KAAAoiB,SAAAA,EACApiB,KAAAgb,aAAAA,EACAhb,KAAA0nB,WAAAA,EACA1nB,KAAA4M,gBAAAA,EACA5M,KAAA0V,eAAAA,UCEH+1D,GAAArrE,UAAAsrE,SAAP,SAAgB1b,EAA2D3uB,GACzE,OAAI/+B,MAAMC,QAAQytD,GACOA,EAAOj0C,OAAO,SAAC7Y,EAAek9B,GACnD,OAAOl9B,EAAOmI,OAAO+0B,IACpB,IACYjP,UAAU,SAACha,GAAc,OAAAA,EAAKka,QAAUgQ,IACH,oBAA3C54B,OAAOrI,UAAUkY,SAASjO,KAAK2lD,GACjCvnD,OAAOM,KAAKinD,GAAQ7+B,UAAU,SAAA3Z,GAAO,OAAAw4C,EAAOx4C,GAAKwgB,UAAYqJ,SAD/D,wBApBVthC,EAAAA,uDAHoB2oB,EAAAA,gBACZ5lB,EAAAA,kBAA6E+uB,EAAAA,cA2BtF45C,IAvBE,SAAAA,GACUrpD,EACAhC,EACAsH,GAFA1nB,KAAAoiB,SAAAA,EACApiB,KAAAogB,WAAAA,EACApgB,KAAA0nB,WAAAA,UCFHikD,GAAAvrE,UAAAwrE,eAAP,SAAsB5wD,GACpB,IAAM2oB,EAAsB3oB,GAAgBA,EAAa6M,WAAa7M,EAAa6M,UAA+B,qBAAK,KACvH,OAAO8b,GAAuB3oB,EAAa6M,UAAU8b,IAAwB,yBALhF5jC,EAAAA,oDAOD4rE,IALE,SAAAA,cCIOE,GAAAzrE,UAAA0rE,wBAAP,WACE,IAAM5kC,EAAiBlnC,KAAKgb,aAAa0M,WAAWoE,iBAAiBob,gBAAkB,GACjF6kC,EAAsB/rE,KAAKgb,aAAa0M,WAAW+D,eAAeugD,oBAAoBz7C,EAAAA,cAAcC,OAAS,GAC/G0W,GAAuD,EAArCz+B,OAAOM,KAAKm+B,GAAgB1kC,SACnCiG,OAAOM,KAAKm+B,GACpB9kC,QAAQ,SAACoV,GACZ,IAAM3M,EAAQq8B,EAAe1vB,GACkB,oBAA3C/O,OAAOrI,UAAUkY,SAAShO,MAAMO,KAGdkhE,EAAoB70D,KAAK,SAACyZ,GAG9C,OADAA,EAAWA,EAAS7U,MAAM,GAAI,GACvBtE,EAAIgP,WAAcmK,EAAQ,cAG1BuW,EAAe1vB,IAEtB0vB,EAAe1vB,GAAK2f,UAAY,SACzB+P,EAAe1vB,GAAK+mB,aACpB2I,EAAe1vB,GAAKy0D,cAG/BjsE,KAAKgb,aAAa0M,WAAWoE,iBAAiB2kB,2BAA2B,IAAKvJ,0BA7BnFnnC,EAAAA,uDAHoB2oB,EAAAA,gBACGrG,EAAAA,gBAkCxBwpD,IA9BE,SAAAA,GAAoBzpD,EAA4BpH,GAA5Bhb,KAAAoiB,SAAAA,EAA4BpiB,KAAAgb,aAAAA,EC4DlD,IAAMkxD,GAAqD,CACzDnhD,GACAqX,GACAgE,GACAlN,GACAE,GACA0B,GACA/Q,GAGA+S,GACAQ,GACAG,GACAwB,GACAE,GAGAmI,GACAmM,GACAoD,GACA9kB,GACAkY,GACA8L,GACAa,GACAf,GACAD,GACAkjB,GAEA9hB,GACAY,GACA2C,GACA0E,GACAoC,GACAkF,GACArwB,GACAa,GACAi1B,GACAvqC,GACA2mC,GACAhpC,GACA6C,GACAhK,GACAm1C,GACA,CACEwE,QAASua,EAAAA,4BACTra,SAAUoG,IAEZ,CACEtG,QAASwa,EAAAA,yBACTta,SAAU4O,IAEZ9H,GACA2G,EAAAA,uBACArG,GACAuG,GACAsC,GACA6B,GACAqB,GACA4C,EAAAA,qBACAjB,GACAS,GACAS,GACA6C,GACAT,GACAuB,GACAjrC,GACAlB,GACA2B,GACA0qC,GACAE,GAEA,CAAEja,QAASkQ,EAAAA,4BAA6BhQ,SAAU8O,IAClD,CAAEhP,QAASya,EAAAA,uCAAwCva,SAAUyP,IAC7D,CAAE3P,QAAS0a,EAAAA,sBAAuBxa,SAAUhhD,IAC5C,CAAE8gD,QAAS2a,EAAAA,qBAAsBza,SAAUv+C,IAC3C,CAAEq+C,QAAS4a,EAAAA,mCAAoC1a,SAAUvB,GAAwBkc,OAAO,IClFpFC,GAAuD,CACzD,CAAE9a,QAAS,oBAAqBE,SAAU/mC,IAC1C,CAAE6mC,QAAS,sBAAuBE,SAAU1vB,IAC5C,CAAEwvB,QAAS,oBAAqBE,SAAU1rB,IAC1C,CAAEwrB,QAAS,iBAAkBE,SAAU54B,IACvC,CAAE04B,QAAS,sBAAuBE,SAAU14B,IAC5C,CAAEw4B,QAAS,qBAAsBE,SAAUh3B,IAC3C,CAAE82B,QAAS,iBAAkBE,SAAU/nC,IAGvC,CAAE6nC,QAAS,0BAA2BE,SAAUh1B,IAChD,CAAE80B,QAAS,4BAA6BE,SAAUx0B,IAClD,CAAEs0B,QAAS,2BAA4BE,SAAUr0B,IACjD,CAAEm0B,QAAS,oBAAqBE,SAAU7yB,IAC1C,CAAE2yB,QAAS,gBAAiBE,SAAU3yB,IAGtC,CAAEyyB,QAAS,kBAAmBE,SAAUxqB,IACxC,CAAEsqB,QAAS,kBAAmBE,SAAUre,IACxC,CAAEme,QAAS,qBAAsBE,SAAUjb,IAC3C,CAAE+a,QAAS,kBAAmBE,SAAU//B,IACxC,CAAE6/B,QAAS,qBAAsBE,SAAU7nB,IAC3C,CAAE2nB,QAAS,oBAAqBE,SAAU/b,IAC1C,CAAE6b,QAAS,kBAAmBE,SAAUlb,IACxC,CAAEgb,QAAS,kBAAmBE,SAAUjc,IACxC,CAAE+b,QAAS,6BAA8BE,SAAUlc,IACnD,CAAEgc,QAAS,uBAAwBE,SAAUgH,IAE7C,CAAElH,QAAS,kBAAmBE,SAAU9a,IACxC,CAAE4a,QAAS,iBAAkBE,SAAUla,IACvC,CAAEga,QAAS,eAAgBE,SAAUvX,IACrC,CAAEqX,QAAS,wBAAyBE,SAAU7S,IAC9C,CAAE2S,QAAS,oBAAqBE,SAAUzQ,IAC1C,CAAEuQ,QAAS,cAAeE,SAAUvL,IACpC,CAAEqL,QAAS,8BAA+BE,SAAU57B,IACpD,CAAE07B,QAAS,wBAAyBE,SAAU/6B,IAC9C,CAAE66B,QAAS,iBAAkBE,SAAU9F,IACvC,CAAE4F,QAAS,oBAAqBE,SAAUrwC,IAC1C,CAAEmwC,QAAS,gBAAiBE,SAAU1J,IACtC,CAAEwJ,QAAS,yBAA0BE,SAAU1yC,IAC/C,CAAEwyC,QAAS,oBAAqBE,SAAU7vC,IAC1C,CAAE2vC,QAAS,gBAAiBE,SAAU75C,IACtC,CAAE25C,QAAS,mBAAoBE,SAAU1E,IACzC,CACIwE,QAASua,EAAAA,4BACTra,SAAUoG,IAEd,CACItG,QAASwa,EAAAA,yBACTta,SAAU4O,IAEd,CAAE9O,QAAS,iBAAkBE,SAAU8G,IACvC,CAAEhH,QAAS,yBAA0BE,SAAUyN,EAAAA,wBAC/C,CAAE3N,QAAS,mBAAoBE,SAAUoH,IACzC,CAAEtH,QAAS,yBAA0BE,SAAU2N,IAC/C,CAAE7N,QAAS,sBAAuBE,SAAUiQ,IAC5C,CAAEnQ,QAAS,kBAAmBE,SAAU8R,IACxC,CAAEhS,QAAS,uBAAwBE,SAAUmT,IAE7C,CAAErT,QAASkQ,EAAAA,4BAA6BhQ,SAAU8O,IAClD,CAAEhP,QAASya,EAAAA,uCAAwCva,SAAUyP,8BCjHhEoL,EAAAA,SAAQzjE,KAAA,CAAC,CACR0jE,UAAWjb,GACXkb,QAAS,CACPC,EAAAA,qBAEFC,QAAS,CACPD,EAAAA,mEARK7c,MAiBT+c,IALE,SAAAA,GAAoBvc,GAAAzwD,KAAAywD,gBAAAA,EACdzwD,KAAKywD,iBACPzwD,KAAKywD,gBAAgBP,gBCRhB+c,GAAA7sE,UAAA8sE,YAAP,SAAmBvrE,GAEf,OADA3B,KAAKkd,WAAW0B,cAAc5e,KAAK8d,MAAOnc,GACnC3B,MAMJitE,GAAA7sE,UAAAsvD,OAAP,SAAc3xC,GAAd,IAAA7c,EAAAlB,KACU+e,EAAgBC,EAAAA,IAAIhX,SAK1B,OAJAhI,KAAKkd,WAAW4B,gBAAgB9e,KAAK8d,MAAOC,EAASgB,GACpC,WACb7d,EAAKgc,WAAW+B,oBAAoB/d,EAAK4c,MAAOiB,KAOjDkuD,GAAA7sE,UAAA2jB,QAAP,WACI/jB,KAAKkd,WAAWyB,cAAc3e,KAAK8d,QAE3CmvD,IA3BI,SAAAA,GAAmBnvD,EAAuBZ,GAAvBld,KAAA8d,MAAAA,EAAuB9d,KAAAkd,WAAAA,UCQ9BiwD,GAAA/kE,IAAd,SAAkB0V,GAEhB,OADa,IAAImvD,GAAYnvD,EAAO9d,KAAKkd,aAS7BiwD,GAAAnlE,OAAd,SAAqBolE,EAAkBC,EAAyBC,GAC9D,IAAIr/D,EAAU,KACd,GAAIo/D,EAAgB,CAClB,IAAM73D,EAASxV,KAAKqf,mBAAmBxN,MAAM9P,OAAOiR,SAAS2F,MAE7D1K,EAAU,CAAE8L,OADJvE,EAAAuE,OACYM,MADJ7E,EAAA6E,MACWC,YADJ9E,EAAA8E,aAGzB,IAAMwD,EAAQ9d,KAAKkd,WAAWsB,gBAAgB4uD,EAAUn/D,EAASq/D,GACjE,OAAKxvD,EAGQ,IAAImvD,GAAYnvD,EAAO9d,KAAKkd,YAFhC,MAzBIiwD,GAAAjwD,WAAsC,IAAIN,GAC1CuwD,GAAA9tD,mBAAyC,IAAI1C,GA6B9DwwD,IA/BA,SAAAA,MCIA,IAAAI,IAOSA,GAAAntE,UAAAkO,OAAP,SAAc3M,EAAkCugB,GAC9C,IAAMsrD,EAActrD,GAAWA,EAAQsrD,cAAe,EAChDC,EAAgBvrD,GAAWA,EAAQurD,gBAAiB,EACpDz3D,EAAWkM,GAAWA,EAAQlM,UAAY,KAC1C7K,EAAQ+W,GAAWA,EAAQ/W,OAAS,KACpCmX,EAAiBJ,GAAWA,EAAQI,gBAAkB,KACtDpf,EAASlD,KAAK0tE,QAAQ/rE,EAAS6rE,EAAaC,EAAez3D,EAAU7K,EAAOmX,GAC9Epf,GAAUA,EAAO0pB,MAA6B,EAArB1pB,EAAO0pB,KAAKpqB,OACvCU,EAAO0pB,KAAKxqB,QAAQ,SAAC+U,GACnBA,EAAK6D,aAAa6M,UAAU+E,KAAK+gD,iBAAiBx2D,EAAKxV,SAAS,EAAM,aAGxE3B,KAAK4tE,iBAAiBjsE,EAAQugB,QAAQ9B,WAAYze,EAAQugB,QAAQ0/C,IAEpE,IAAMiM,EAAmC7tE,KAAK8tE,uBAAuB9tE,KAAKgb,cACtE9X,GAAUA,EAAO6qE,KAA2B,EAApB7qE,EAAO6qE,IAAIvrE,OACrCqrE,EAAmBhmD,UAAUsH,oBAAoBvkB,KAAK1H,EAAO6qE,KAE9C,OAAX7qE,GACF2qE,EAAmBhmD,UAAUsH,oBAAoBvkB,KAAK,KAQpD2iE,GAAAntE,UAAAstE,QAAR,SAAgBM,EAAyCR,EAA8BC,EAAgCz3D,EAA2B7K,EAAmBmX,GAArK,QAAAphB,EAAAlB,UAAyD,IAAAwtE,IAAAA,GAAA,QAA8B,IAAAC,IAAAA,GAAA,QAAgC,IAAAz3D,IAAAA,EAAA,WAA2B,IAAA7K,IAAAA,EAAA,WAAmB,IAAAmX,IAAAA,EAAA,MACnK,IAAM2rD,EAAcD,GAAkBA,EAAeC,aAAe,KAC9D7tD,EAAa4tD,GAAkBA,EAAe9rD,QAAQ9B,WACtDwhD,EAAKoM,EAAe9rD,QAAQ0/C,GAClC,IAAKqM,GAAeA,EAAYzrE,OAAS,EACvC,OAAO,KAET,IAAMU,EAAS,CACb0pB,KAAM,GACNmhD,IAAK,IAEHG,GAAmB,aACdC,WACDxsE,EAAUwsE,EAAWxsE,QACrBysE,EAAWD,EAAWn7D,UAAY,KAClC4wB,EAAUwqC,GAAYA,EAASxqC,SAAW,KAC1CjT,EAAWy9C,GAAYA,EAASz9C,UAAY,KAC5C65B,EAAO4jB,GAAYA,EAAS5jB,KAC5Bz6B,EAAcoU,EAAKkqC,eAAejuD,EAAYwhD,EAAIjxC,GAClDlB,EAAeM,GAAeA,EAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAGvE,IAAK0kE,IAAaxqC,GAAWA,EAAQphC,OAAS,IAAMmuB,IAAa65B,GAAQA,EAAKhoD,OAAS,kCAI9E8iD,sBACEzhB,GAEP,IAAI1X,EAAgBgY,EAAKmqC,2CAA2CluD,EAAYwhD,EAAI7xC,EAAa8T,GACjG,IAAK1X,GAAiBA,EAAc3pB,OAAS,SAE3C0rE,GAAmB,aAIrB/hD,EAAgBA,EAAchqB,OAAO,SAAC6Y,GAEpC,OAD4B9Z,EAAKqtE,oBAAoBvzD,EAAa+V,kBAErC7vB,EAAKstE,mBAAmBxzD,EAAa+V,kBAU/CoT,EAAKsqC,aAAaruD,EAAYwhD,EAAI7xC,EAAau1B,IAK9Dn5B,GAAwC,EAAvBA,EAAc3pB,QACjC2pB,EAAc/pB,QAAQ,SAAC4Y,GAErB,IAAMumB,EAAergC,EAAKwtE,2BAA2B1zD,EAAc6oB,GAC/DtC,GAAsC,EAAtBA,EAAa/+B,QAC/B++B,EAAan/B,QAAQ,SAACyX,OAAAquB,EAAAn9B,GAAA8O,EAAA,GAAC80D,EAAAzmC,EAAA,GAAiBA,EAAA,GAEtChnC,EAAK0tE,aAAa1rE,EAAO0pB,KAAM5R,EAAc2zD,EAAiBhtE,OAYxEwqB,EAAc/pB,QAAQ,SAAC4Y,GACrB,IAAM6U,EAAgB7U,EAAa6M,UAAU+E,KAAKoD,cAC5CuR,EAAergC,EAAKwtE,2BAA2B1zD,EAAc6oB,GACnE,GAAItC,GAAsC,EAAtBA,EAAa/+B,OAAY,CACrC,IAAAqX,EAAA9O,GAAAw2B,EAAArqB,KAAA,SAAA2C,uDAAC80D,EAAA90D,EAAA,GAAiB2nB,EAAA3nB,EAAA,GAElB6V,EAAc1U,EAAa6M,UAAU8C,YAAYgF,SAASF,GAC5D1X,EAAQ2X,EAAYhC,aAAa43B,GAC/BupB,EAAavpB,EAAG,IAAIzhB,EAAM,IAAIliC,EAEpC,GAAa,GAAToW,IAA+D,IAAjD7U,EAAO6qE,IAAI58C,UAAU,SAAAznB,GAAK,OAAAA,EAAE6L,KAAOs5D,IAAiB,CAEpE,IAAM3iE,EAAYwjB,GAAoC,EAArBA,EAAYltB,OAAeuV,EAAQ,GAAM,EACpEpG,EAAQzQ,EAAK4tE,eAAej/C,EAAe2R,EAAY5wB,MAAQ4wB,EAAYutC,kBAAoBJ,EAAiBziE,GAChHiL,EAAO,CACX5B,GAAIs5D,EACJ92D,MAAKA,EACLqZ,YAAaoQ,EAAYjsB,GACzB5D,MAAKA,EACL+B,IAAK/R,EACLuqB,UAAW01C,EACX7xC,YAAWA,EACXntB,KAAM,SAERM,EAAO6qE,IAAIzsE,KAAK6V,YAtExB,IAAmB,IAAA63D,EAAA7jD,GAAAyY,GAAOqrC,EAAAD,EAAApkE,QAAAqkE,EAAAnkE,KAAAmkE,EAAAD,EAAApkE,SAAXqkE,EAAApkE,iHADjB,IAAgB,IAAAqkE,EAAA/jD,GAAAq/B,GAAI2kB,EAAAD,EAAAtkE,QAAAukE,EAAArkE,KAAAqkE,EAAAD,EAAAtkE,SAARukE,EAAAtkE,wHAdd,IAAuB,IAAAukE,EAAAjkD,GAAA8iD,GAAWoB,EAAAD,EAAAxkE,QAAAykE,EAAAvkE,KAAAukE,EAAAD,EAAAxkE,SAAfykE,EAAAxkE,2GAgGnB,OAHIqjE,GAAoBV,IAAgBC,GAAiBz3D,GACvDA,EAASs5D,KAAK,YAAa,GAAI,cAAenkE,EAAOmX,GAEhDpf,GAEDqqE,GAAAntE,UAAAwuE,aAAR,SAAqBW,EAA8Iv0D,EAA4B2zD,EAAyBhtE,WAChNg6D,EAAa4T,EAAUr4D,KAAK,SAAAC,GAAQ,OAAAA,EAAK6D,aAAaqM,UAAYrM,EAAaqM,UACrF,GAAIs0C,EAAY,CACd,IAAM6T,EAAkB7T,EAAWh6D,SAAW8G,OAAOM,KAAK4yD,EAAWh6D,SAASy4B,SAASu0C,GACjFvmC,EAAc,oBAAmB3/B,OAAOM,KAAK4yD,EAAWh6D,SAASa,OAAS,GAC5EgtE,EACF7T,EAAWh6D,QAAQgtE,GAAyB,OAAEvmC,GAAe,CAAEx3B,KAAMjP,GAErEg6D,EAAWh6D,QAAQgtE,GAAmB,CAAE7gD,QAAMjU,EAAA,GAAIA,EAACuuB,GAAc,CAAEx3B,KAAMjP,GAASkY,SAGpF01D,EAAUjuE,KAAK,CACb0Z,aAAcA,EACdrZ,SAAOumC,EAAA,GACLA,EAACymC,GAAkB,CACjB7gD,OAAQ,CACN2hD,oBAAqB,CAAE7+D,KAAMjP,WAOjC4rE,GAAAntE,UAAA0uE,eAAR,SAAuBj/C,EAAuByB,EAAsBvZ,GAClE,IAAM23D,EAAW,CACfn9D,SAAU,CACRsd,cAAe,aACf9X,MAAO,aACPuZ,aAAc,mBAEhBlf,GAAM,CACJyd,cAAe,aACf9X,MAAO,aACPuZ,aAAc,mBAEhBq+C,SAAU,CACR9/C,cAAe,aACf9X,MAAO,aACPuZ,aAAc,oBAGZs+C,EAAkB5vE,KAAK8iB,UAAU+sD,sBAAwB,SACzDluE,EAAU,GAUhB,OATIkuB,GACFluB,EAAQL,KAAKouE,EAASE,GAAgC,cAAE59D,QAAQ,aAAc6d,IAEpE,EAAR9X,GACFpW,EAAQL,KAAKouE,EAASE,GAAwB,MAAE59D,QAAQ,SAAU+F,IAEhEuZ,GACF3vB,EAAQL,KAAKouE,EAASE,GAA+B,aAAE59D,QAAQ,gBAAiBsf,IAE3E3vB,EAAQ8sB,KAAK,MAQd8+C,GAAAntE,UAAAiuE,eAAR,SAAuBjuD,EAAwBwhD,EAAYjxC,GAEzD,OADqB3wB,KAAK+nB,gBAAgB3H,EAAYwhD,GAClCl6C,WAAW+D,eAAeqkD,0BAA0Bn/C,IASlE48C,GAAAntE,UAAAkuE,2CAAR,SAAmDluD,EAAwBwhD,EAAY7xC,EAAqB2R,GAC1G,IAAIvV,EAAgB/L,EAAWuH,oBAAoB0E,mBACnD,OAAIF,GAAwC,EAAvBA,EAAc3pB,OAEjC2pB,EAAgBA,EAAchqB,OAAO,SAAC6Y,GAGpC,KAD0BA,EAAakR,YAAc01C,GAAM5mD,EAAa6M,UAAUkI,cAAgBA,GAAe/U,EAAa6M,UAAU+E,MAAQ5R,EAAa6M,UAAU+E,KAAKhL,UAAuE,EAA3DnZ,OAAOM,KAAKiS,EAAa6M,UAAU+E,KAAKhL,UAAUpf,QAExO,OAAO,EAGT,IAAMitB,EAAeM,EAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAClD+1B,EAAezkB,EAAa0M,WAAW+D,eAAekW,kBAAkBlS,GAC9E,GAAIgQ,EAAc,CAChB,IAEMswC,EAFgBztE,MAAM4O,KAAKuuB,EAAaK,YAAYrf,UAEjBvJ,KAAK,SAACuZ,GAA2B,OAAAA,EAASsR,eAAiBtR,EAASsR,aAAaC,oBAAsBN,GAAcjR,EAASsR,aAAaE,YAAcP,KAClM,GAAIquC,EAAoB,CACtB,IAAMC,EAAqBD,EAAmBn/D,KAE9C,QADsBnI,OAAOgY,OAAOzF,EAAa6M,UAAU+E,KAAK8T,gBAAgBxpB,KAAK,SAAAC,GAAQ,OAAAA,EAAK6gB,UAAYg4C,OAI/FvnE,OAAOM,KAAKiS,EAAa6M,UAAU+E,KAAK8T,gBAAgBxpB,KAAK,SAAAM,GAAO,OAAAA,IAAQw4D,IAI3F,OAAO,EAGT,OAAO,IAKN,MAMDzC,GAAAntE,UAAAmuE,oBAAR,SAA4Bx9C,GAE1B,QADoBA,EAAe7O,QAAQ2F,UAA+B,qBAQpE0lD,GAAAntE,UAAAouE,mBAAR,SAA2Bz9C,GACzB,IAAM/V,EAAe+V,EAAe7O,QAC9ByhB,EAAsB3oB,EAAa6M,UAA+B,qBAAK,KAC7E,GAAI8b,EAEF,OAD+B3oB,EAAa6M,UAAU8b,GAC/B1iB,MAAM,SAACmf,GAC5B,OAAOA,EAAMnf,MAAM,SAAA9J,GAAQ,OAACA,EAAKoyC,WAGnC,MAAM,IAAI74C,MAAM,iBAUZ68D,GAAAntE,UAAAquE,aAAR,SAAqBruD,EAAwBwhD,EAAY7xC,EAAqBxa,GAC5E,IAAMka,EAAeM,EAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAIxD,OAHqB1J,KAAK+nB,gBAAgB3H,EAAYwhD,GACrBj3C,YACDgF,SAASF,GACtB0N,YAAYoX,kBAAoBh/B,GAO7Cg4D,GAAAntE,UAAA2nB,gBAAR,SAAwB3H,EAAwBwhD,GAC9C,IAAMz1C,EAAgB/L,EAAWuH,oBAAoB0E,mBACrD,GAAIF,GAAwC,EAAvBA,EAAc3pB,OAAY,CAC7C,IAAMytE,EAAqB9jD,EAAcjV,KAAK,SAAA8D,GAAgB,OAAAA,EAAakR,YAAc01C,IACzF,GAAIqO,EAEF,OADgCA,EAAmBjnD,6BAIvD,OAAO,MAKDukD,GAAAntE,UAAAsuE,2BAAR,SAAmC1zD,EAA4B0mB,GAC7D,IAAMjS,EAAezU,EAAa6M,UAAUkI,YAAYnW,MAAM,KAAKzX,OAAO,SAAAuH,GAAK,OAAAA,IAEzEgnB,EAAW1V,EAAa0M,WAAW+D,eAAekW,kBAAkBlS,GAGpEgB,EADYnuB,MAAM4O,KAAKwf,EAASoP,YAAYrf,UACvBvJ,KAAK,SAACuZ,GAA2B,OAAAA,EAASsR,eAAiBtR,EAASsR,aAAaC,oBAAsBN,GAAcjR,EAASsR,aAAaE,YAAcP,KACpL,GAAIjR,EAAU,CACZ,IAAMy/C,EAAcz/C,EAAS7f,KACvB2wB,EAA+C94B,OAAO0nE,QAAQn1D,EAAa6M,UAAU+E,KAAK8T,gBAAgBv+B,OAAO,SAACgV,GAAS,OAAAA,EAAK,GAAG6gB,UAAYk4C,GAAe/4D,EAAK,KAAO+4D,IAEhL,GAAI3uC,EACF,OAAOA,EAGX,OAAO,MAEDgsC,GAAAntE,UAAAwtE,iBAAR,SAAyBxtD,EAAwBwhD,GACzBxhD,EAAWuH,oBAAoB0E,mBAAmBlqB,OAAO,SAAA6Y,GAAgB,OAAAA,EAAakR,YAAc01C,IAC5Gx/D,QAAQ,SAAA4Y,GAAgB,OAAAA,GAAgBA,EAAa6M,WAAa7M,EAAa6M,UAAU+E,MAAQ5R,EAAa6M,UAAU+E,KAAKwjD,uBAMrI7C,GAAAntE,UAAA0tE,uBAAR,SAA+B9yD,GAC7B,IAAM+N,EAA0B/N,EAAagO,6BACvCqnD,EAAuBtnD,EAAwBgI,eAErD,GAD0Bs/C,GAAwBA,EAA4C,sBAG5F,OAAOtnD,EAGP,IAAM9N,EAAqB8N,EAAwB9L,OACnD,OAAIhC,EACKjb,KAAK8tE,uBAAuB7yD,GAE5B8N,wBA5VdhpB,EAAAA,uDAT4B2oB,EAAAA,gBAC6DrG,EAAAA,gDAUXpZ,EAAAA,OAAMC,KAAA,CAACqd,EAAAA,qBA8VtFgnD,IA9VE,SAAAA,GAAoBnrD,EAA4BpH,EAA4D8H,GAAxF9iB,KAAAoiB,SAAAA,EAA4BpiB,KAAAgb,aAAAA,EAA4Dhb,KAAA8iB,UAAAA,mUhHM9E,CAC5BwtD,MAAO,QACPltD,QAAS,UACTmtD,MAAO,QACPC,YAAa,cACbC,OAAQ","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n/**\r\n * åéæ¶æ¯ç»FormLoadingServiceï¼\r\n * ä½¿å¶æ¥æ¶åè°ç¨hide()å½æ°\r\n * æ­¤æå¡ä»ç¨äºå¤çHttpå¼å¸¸\r\n */\r\n@Injectable()\r\nclass HideEventService {\r\n    public hideEvent = new Subject<any>();\r\n}\r\n\r\nexport { HideEventService };","import { Injectable, SkipSelf, Optional } from '@angular/core';\r\nimport { LoadingService, LoadingConfig, LoadingComponent } from '@farris/ui-loading';\r\nimport { HideEventService } from './hide-event.service';\r\nimport { AppContext, FrameContext } from '@farris/devkit';\r\n// tslint:disable: no-string-literal\r\n/**\r\n * å è½½æç¤ºHelper\r\n * 1ãåè£@farris/uiçLoadingServiceï¼\r\n * 2ãæä¾éå¯¹è¡¨åçå¿«æ·æ¹æ³ï¼\r\n */\r\n@Injectable()\r\nclass FormLoadingService {\r\n  private static isSuspend = false;\r\n  /**\r\n   * å è½½ä¸­ç»ä»¶å®ä¾\r\n   */\r\n  private loadingCmp: LoadingComponent;\r\n\r\n  /**\r\n   * å»¶è¿loadingå®æ¶å¨\r\n   */\r\n  private loadingTimerIds: any[] = [];\r\n\r\n  /**\r\n   * å¼ºå¶æ¾ç¤ºï¼ä¸è½éè\r\n   */\r\n\r\n  /**\r\n   * æé å½æ°\r\n   * æ³¨å¥@farris/uiçLoadingService\r\n   */\r\n  constructor(\r\n    private loadingService: LoadingService,\r\n    @Optional() private hideEventService: HideEventService,\r\n    @Optional() private applicationContext: AppContext,\r\n  ) {\r\n    if (hideEventService) {\r\n      this.hideEventService.hideEvent.subscribe(\r\n        result => {\r\n          this.hide();\r\n        }\r\n      );\r\n    }\r\n  }\r\n  public setSuspend(flag: boolean) {\r\n    FormLoadingService.isSuspend = flag;\r\n  }\r\n  /**\r\n   * æ¾ç¤ºå è½½ä¸­\r\n   */\r\n  public show(configOrMessage?: any): LoadingComponent {\r\n    if (FormLoadingService.isSuspend === true) {\r\n      return;\r\n    }\r\n    if (this.loadingCmp) {\r\n      this.loadingCmp.close();\r\n      this.loadingCmp = null;\r\n    }\r\n    this.registerService();\r\n    const loadingConfig = this.buildLoadingConfig(configOrMessage);\r\n    this.loadingCmp = this.loadingService.show(loadingConfig);\r\n    return this.loadingCmp;\r\n  }\r\n\r\n  /**\r\n   * å»¶è¿æ¾ç¤ºLoading\r\n   */\r\n  public showLoadingWithDelay(delayTime: number, configOrMessage?: any): any {\r\n    // this.show(configOrMessage);\r\n    const timerId = setTimeout(() => {\r\n      this.show(configOrMessage);\r\n    }, delayTime);\r\n    this.loadingTimerIds.push(timerId);\r\n    this.registerService();\r\n    return timerId;\r\n  }\r\n\r\n  /**\r\n   * éèå»¶è¿çLoading\r\n   */\r\n  public hideDelayLoading(timerIdToClear: any) {\r\n    this.clearLoadingTimer(timerIdToClear);\r\n    this.hide();\r\n  }\r\n\r\n  /**\r\n   * æé LoadingConfig\r\n   * @param configOrMessage éç½®å¯¹è±¡ææ¶æ¯å­ç¬¦ä¸²\r\n   */\r\n  private buildLoadingConfig(configOrMessage: any): LoadingConfig {\r\n    let loadingConfig: LoadingConfig;\r\n    if (!!configOrMessage) {\r\n      if (typeof configOrMessage === 'object') {\r\n        loadingConfig = configOrMessage;\r\n      } else {\r\n        loadingConfig = { 'message': configOrMessage };\r\n      }\r\n    } else {\r\n      loadingConfig = {};\r\n    }\r\n    if (!loadingConfig.hasOwnProperty('delay')) {\r\n      loadingConfig.delay = 0;\r\n    }\r\n    return loadingConfig;\r\n  }\r\n\r\n  /**\r\n   * å³é­ææloading\r\n   */\r\n  public clearAll() {\r\n    FormLoadingService.isSuspend = false;\r\n    window.setTimeout(() => {\r\n      this.loadingService.clearAll();\r\n    }, 350);\r\n    this.loadingCmp = null;\r\n    this.clearAllLoadingTimers();\r\n    this.destroy();\r\n  }\r\n\r\n  /**\r\n   * æ¸ç©ºLoadingå®æ¶å¨\r\n   */\r\n  private clearLoadingTimer(timerIdToClear: any) {\r\n    clearTimeout(timerIdToClear);\r\n    this.loadingTimerIds = this.loadingTimerIds.filter((timerId: any) => {\r\n      return timerId !== timerIdToClear;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * æ¸ç©ºææLoadingå®æ¶å¨\r\n   */\r\n  private clearAllLoadingTimers() {\r\n    this.loadingTimerIds.forEach((timerId: any) => {\r\n      this.clearLoadingTimer(timerId);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * éèå è½½ä¸­\r\n   */\r\n  public hide() {\r\n    if (!this.loadingCmp) {\r\n      this.destroy();\r\n      return;\r\n    }\r\n    if (FormLoadingService.isSuspend === true) {\r\n      return;\r\n    }\r\n    this.loadingCmp.close();\r\n    this.loadingCmp = null;\r\n    this.destroy();\r\n  }\r\n  /**\r\n   * éæ¯loadingService\r\n   */\r\n  public destroy() {\r\n    if (FormLoadingService.isSuspend === true) {\r\n      return;\r\n    }\r\n    const services: any[] = window['DEVKIT_LOADING_SERVICE'] || [];\r\n    if (services && Array.isArray(services) && services.length > 0) {\r\n      services.forEach((service: FormLoadingService) => {\r\n        if (service) {\r\n          service.clearAllLoadingTimers();\r\n          if (service.loadingCmp) {\r\n            service.loadingCmp.close();\r\n            service.loadingCmp = null;\r\n        }\r\n        }\r\n      });\r\n    }\r\n    window['DEVKIT_LOADING_SERVICE'] = [];\r\n  }\r\n\r\n  /**\r\n   * æ³¨åææçLoadingServiceå®ä¾\r\n   */\r\n  private registerService() {\r\n    const services: any[] = window['DEVKIT_LOADING_SERVICE'] || [];\r\n    services.push(this);\r\n    window['DEVKIT_LOADING_SERVICE'] = services;\r\n  }\r\n}\r\n\r\n\r\nexport { FormLoadingService };\r\n","\r\nimport { LanguageMessage } from './language-message';\r\n\r\n/**\r\n * è±æè¯­è¨æ¶æ¯\r\n */\r\nclass LanguageMessageForEn implements LanguageMessage {\r\n  yes = 'Yes';\r\n  no = 'No';\r\n  unsaveNotifyTitle = 'Exist unsave record. Do save operation or not?';\r\n  clientNotifyTitle = 'System Prompt In The Frontend';\r\n  serverNotifyTitle = 'System Prompt In The Backend';\r\n  cancelApproveSuccess = 'Cancel Approve Success';\r\n  cancelApproveFailed = 'Cancel Approve Failed';\r\n  unallowEmptyProcessInstanceName = 'Process Instance Name Can Not Be Empty';\r\n  unallowEmptyBizBillId = 'Biz Bill Id Can Not Be Empty';\r\n  unallowEmptyChildBizBillId = 'Child Biz Bill Id Can Not Be Empty';\r\n  bizDefKeyRequired = 'Biz Def Key can\\'t be empty.';\r\n  procInsIdRequired = 'Process instance Id can\\'t be empty.';\r\n  addChildFailed = 'Add Child Failed';\r\n  addSiblingFailed = 'Add Sibling Failed';\r\n  addSubChildFailed = 'Add Sub Child Failed';\r\n  addSubSiblingFailed = 'Add Sub Sibling Failed';\r\n  deleteFailed = 'Delete Failed';\r\n  multiSaveFailed = 'MultiSave Failed';\r\n  appendFailed = 'Append Failed';\r\n  queryFailed = 'Query Failed';\r\n  cancelFailed = 'Cancel Failed';\r\n  updateFailed = 'Update Failed';\r\n  addFailed = 'Add Failed';\r\n  loadFailed = 'Load Failed';\r\n  saveSuccess = 'Successfully saved!';\r\n  saveFailed = 'Save failed!';\r\n  deleteSuccess = 'Successfully deleted!';\r\n  deleteFaild = 'Failed to delete!';\r\n  confirmDeletion = 'Confirm deletion?';\r\n  submitSuccess = 'Submit successfully!';\r\n  submitFaild = 'Submit failed!';\r\n  notifyTitle = 'System prompt';\r\n  httpError = 'HTTP request error! Please check the server error!';\r\n  gridDataNotSave = 'The current page data is not saved. Turning the page will result in data loss. Do you want to continue turning the page?';\r\n  exitWithoutSave = 'There is unsaved data. Do you want to continue closing?';\r\n  notSupportMenuType = 'Not supported menu type!';\r\n  cancelWithoutSave = 'Exist unsaved change,Confirm to cancel?';\r\n  plsSelectDeleteData = 'Please select the data to delete!';\r\n  errorHierarchyKey = 'Incorrect ierarchy key';\r\n  plsSelectParentNode = 'Please select parent node!';\r\n  deleteChildFirst = 'Please delete the child nodes first!';\r\n  incorrectHierarchyConfig = 'Hierarchy config is incorrect!';\r\n  operationFailed = 'The operation failed.';\r\n  plsSelectEditData = 'Please select the data you want to edit!';\r\n  plsSelectViewData = 'Please select the data you want to view!';\r\n  plsUploadFirst = 'Please upload attachment first!';\r\n  defaultDialogTitle = 'Dialog';\r\n  public changeToFirst = 'The first data.';\r\n  public changeToLast = 'The last data.';\r\n  public noProcessInstanceId = 'Please provide the process instance id.';\r\n  public noDataExist = 'Data does not exist to access the edit state!';\r\n  public noAttachment = 'There are no attachments to preview.';\r\n  public confirm = 'Confirm';\r\n  public cancel = 'Cancel';\r\n  public plsSelectCopyData = 'Please select the data you want to copy!';\r\n  public copyFieldsRequired = 'The copy fields can`t be empty!';\r\n  public pathIsRequired = 'The request url can`t be empty!';\r\n  public propsIsEmpty = 'The material has no props!';\r\n  public historyAttachment = 'The history attachment can`t be delete!';\r\n  public plsSelectDownloadAtt = 'Please select the attachment you want to download!';\r\n  public noDownloadAtt = 'There are no attachments to download!';\r\n  public plsCheckBatchEditRows = 'Please check the rows you want to edit!';\r\n  public plsSelectDetailFormData = 'Please select a detail form data first!';\r\n  public dataAndStateChanged = 'Are you sure you want to load the new data and switch to $1 state?';\r\n  public dataChanged = 'Are you sure you want to load the data and discards the current modification?';\r\n  public stateChanged = 'Are you sure you want to switch $1 state?';\r\n  public defaultStateName = 'init';\r\n  public copy = 'Copy detail message';\r\n  public copySuccess = 'Copy success';\r\n  public copyFailed = 'Copy failed';\r\n  public roger = 'Roger';\r\n  public appOrFuncIdRequired = 'No menu or application parameters are configured, please configure them in the designer.';\r\n  public tableCanNotEmpty = 'can not empty.';\r\n}\r\n\r\nexport { LanguageMessageForEn };\r\n","import { LanguageMessage } from './language-message';\r\n\r\n/**\r\n * è±æè¯­è¨æ¶æ¯\r\n */\r\nclass LanguageMessageForZh implements LanguageMessage {\r\n  public yes = 'æ¯';\r\n  public no = 'å¦';\r\n  public unsaveNotifyTitle = 'å­å¨æªä¿å­è®°å½ãæ¯å¦è¦ä¿å­ï¼';\r\n  public clientNotifyTitle = 'åç«¯å¼å¸¸æç¤º';\r\n  public serverNotifyTitle = 'æå¡å¨ç«¯å¼å¸¸æç¤º';\r\n  public cancelApproveSuccess = 'åæ¶æäº¤æåï¼';\r\n  public cancelApproveFailed = 'åæ¶æäº¤å¤±è´¥ï¼';\r\n  public unallowEmptyProcessInstanceName = 'æµç¨å®ä¾åç§°ä¸è½ä¸ºç©º';\r\n  public unallowEmptyBizBillId = 'è¯·éæ©ä¸æ¡æ°æ®';\r\n  public bizDefKeyRequired = 'å¥å£åæ®ä¸è½ä¸ºç©º';\r\n  public unallowEmptyChildBizBillId = 'ä»è¡¨ä¸å¡åæ®ç¼å·ä¸è½ä¸ºç©ºï¼';\r\n  public procInsIdRequired = 'æµç¨å®ä¾Idä¸è½ä¸ºç©ºï¼';\r\n  public addChildFailed = 'æ°å¢å­çº§å¤±è´¥';\r\n  public addSiblingFailed = 'æ°å¢åçº§å¤±è´¥';\r\n  public addSubChildFailed = 'æ°å¢ä»è¡¨å­çº§å¤±è´¥';\r\n  public addSubSiblingFailed = 'æ°å¢ä»è¡¨åçº§å¤±è´¥';\r\n  public deleteFailed = 'å é¤å¤±è´¥';\r\n  public multiSaveFailed = 'æ¹éä¿å­å¤±è´¥';\r\n  public appendFailed = 'è¿½å å¤±è´¥';\r\n  public queryFailed = 'æ¥è¯¢å¤±è´¥';\r\n  public cancelFailed = 'åæ¶å¤±è´¥';\r\n  public updateFailed = 'æ´æ°å¤±è´¥';\r\n  public addFailed = 'æ°å¢å¤±è´¥';\r\n  public loadFailed = 'å è½½å¤±è´¥';\r\n  public saveSuccess = 'ä¿å­æåï¼';\r\n  public saveFailed = 'ä¿å­å¤±è´¥ï¼';\r\n  public deleteSuccess = 'å é¤æåï¼';\r\n  public deleteFaild = 'å é¤å¤±è´¥ï¼';\r\n  public confirmDeletion = 'ç¡®è®¤å é¤ï¼';\r\n  public submitSuccess = 'æäº¤å®¡æ¹æåï¼';\r\n  public submitFaild = 'æäº¤å®¡æ¹å¤±è´¥ï¼';\r\n  public notifyTitle = 'ç³»ç»æç¤º';\r\n  public httpError = 'HTTPè¯·æ±éè¯¯ï¼è¯·æ£æ¥Serverç«¯éè¯¯ï¼';\r\n  public gridDataNotSave = 'å½åé¡µæ°æ®æªä¿å­ï¼ç¿»é¡µå°å¯¼è´æ°æ®ä¸¢å¤±ï¼æ¯å¦ç»§ç»­ç¿»é¡µï¼';\r\n  public exitWithoutSave = 'å­å¨æªä¿å­çæ°æ®ï¼æ¯å¦ç»§ç»­å³é­ï¼';\r\n  public notSupportMenuType = 'å³é­çæ¢ä¸æ¯èåä¹ä¸æ¯åºç¨ã';\r\n  public cancelWithoutSave = 'å­å¨æªä¿å­çåæ´ï¼ç¡®è®¤åæ¶ï¼';\r\n  public plsSelectDeleteData = 'è¯·éæ©è¦å é¤çæ°æ®ï¼';\r\n  public errorHierarchyKey = 'éè¯¯çåçº§ç ';\r\n  public plsSelectParentNode = 'è¯·éæ©ç¶èç¹';\r\n  public deleteChildFirst = 'è¯·åå é¤å­èç¹';\r\n  public incorrectHierarchyConfig = 'åçº§ç éç½®ä¿¡æ¯éè¯¯';\r\n  public operationFailed = 'æä½æ§è¡å¤±è´¥ã';\r\n  public plsSelectEditData = 'è¯·éæ©è¦ç¼è¾çæ°æ®ï¼';\r\n  public plsSelectViewData = 'è¯·éæ©è¦æ¥ççæ°æ®ï¼';\r\n  public plsUploadFirst = 'è¯·åä¸ä¼ éä»¶ï¼';\r\n  public defaultDialogTitle = 'å¼¹çª';\r\n  public changeToFirst = 'å·²å°è¾¾ç¬¬ä¸æ¡æ°æ®';\r\n  public changeToLast = 'å·²å°è¾¾æåä¸æ¡æ°æ®';\r\n  public noProcessInstanceId = 'è¯·æå®æµç¨å®ä¾æ è¯ã';\r\n  public noDataExist = 'è¦ç¼è¾çæ°æ®ä¸å­å¨ï¼æ æ³è¿å¥ç¼è¾ç¶æï¼';\r\n  public noAttachment = 'æ²¡æå¯ä»¥é¢è§çéä»¶ã';\r\n  public confirm = 'ç¡®å®';\r\n  public cancel = 'åæ¶';\r\n  public plsSelectCopyData = 'è¯·éæ©è¦å¤å¶çæ°æ®ï¼';\r\n  public copyFieldsRequired = 'è¦å¤å¶çå­æ®µä¸è½ä¸ºç©ºï¼';\r\n  public pathIsRequired = 'è¯·æ±è·¯å¾ä¸è½ä¸ºç©ºï¼';\r\n  public propsIsEmpty = 'æ²¡æå¯ä»¥ç¼è¾çç©æç¹å¾ï¼';\r\n  public historyAttachment = 'åå²çæ¬éä»¶ç¦æ­¢å é¤ï¼';\r\n  public plsSelectDownloadAtt = 'è¯·éæ©è¦ä¸è½½çéä»¶!';\r\n  public noDownloadAtt = 'æ¾ä¸å°è¦ä¸è½½çéä»¶!'\r\n  public plsCheckBatchEditRows = 'è¯·å¾éè¦æ¹éç¼è¾çè¡ï¼';\r\n  public plsSelectDetailFormData = 'è¯·åéæ©ä¸æ¡ä»è¡¨æ°æ®ï¼';\r\n  public dataAndStateChanged = 'ç¡®å®è¦å è½½æ°æ®å¹¶åæ¢å°$1ç¶æï¼';\r\n  public dataChanged = 'ç¡®å®è¦å è½½æ°æ®å¹¶æ¾å¼å½åä¿®æ¹ï¼';\r\n  public stateChanged = 'ç¡®å®è¦åæ¢å°$1ç¶æï¼';\r\n  public defaultStateName = 'åå§';\r\n  public copy = 'å¤å¶è¯¦ç»ä¿¡æ¯';\r\n  public copySuccess = 'å¤å¶æå';\r\n  public copyFailed = 'å¤å¶å¤±è´¥';\r\n  public roger = 'ç¥éäº';\r\n  public appOrFuncIdRequired = 'æªéç½®èåæåºç¨åæ°ï¼è¯·å¨è®¾è®¡å¨ä¸­éç½®ã';\r\n  public tableCanNotEmpty = 'ä¸è½ä¸ºç©ºã';\r\n}\r\n\r\nexport { LanguageMessageForZh };\r\n","import { LanguageMessage } from './language-message';\r\n\r\n/**\r\n * ç¹ä½ä¸­æè¯­è¨æ¶æ¯\r\n */\r\nclass LanguageMessageForZhft implements LanguageMessage {\r\n  public yes = 'æ¯';\r\n  public no = 'å¦';\r\n  public unsaveNotifyTitle = 'å­å¨æªä¿å­è¨éãæ¯å¦è¦ä¿å­ï¼';\r\n  public clientNotifyTitle = 'åç«¯ç°å¸¸æç¤º';\r\n  public serverNotifyTitle = 'æåå¨ç«¯ç°å¸¸æç¤º';\r\n  public cancelApproveSuccess = 'åæ¶æäº¤æåï¼';\r\n  public cancelApproveFailed = 'åæ¶æäº¤å¤±æï¼';\r\n  public unallowEmptyProcessInstanceName = 'æµç¨å¯¦ä¾åç¨±ä¸è½çºç©º';\r\n  public unallowEmptyBizBillId = 'è«é¸æå£¹æ¢æ¸æ';\r\n  public bizDefKeyRequired = 'å¥å£å®æä¸è½çºç©º';\r\n  public unallowEmptyChildBizBillId = 'å¾è¡¨æ¥­åå®æç·¨èä¸è½çºç©ºï¼';\r\n  public procInsIdRequired = 'æµç¨å¯¦ä¾idä¸è½çºç©ºï¼';\r\n  public addChildFailed = 'æ°å¢å­ç´å¤±æ';\r\n  public addSiblingFailed = 'æ°å¢åç´å¤±æ';\r\n  public addSubChildFailed = 'æ°å¢å¾è¡¨å­ç´å¤±æ';\r\n  public addSubSiblingFailed = 'æ°å¢å¾è¡¨åç´å¤±æ';\r\n  public deleteFailed = 'åªé¤å¤±æ';\r\n  public multiSaveFailed = 'æ¹éä¿å­å¤±æ';\r\n  public appendFailed = 'è¿½å å¤±æ';\r\n  public queryFailed = 'æ¥è©¢å¤±æ';\r\n  public cancelFailed = 'åæ¶å¤±æ';\r\n  public updateFailed = 'æ´æ°å¤±æ';\r\n  public addFailed = 'æ°å¢å¤±æ';\r\n  public loadFailed = 'å è¼å¤±æ';\r\n  public saveSuccess = 'ä¿å­æåï¼';\r\n  public saveFailed = 'ä¿å­å¤±æï¼';\r\n  public deleteSuccess = 'åªé¤æåï¼';\r\n  public deleteFaild = 'åªé¤å¤±æï¼';\r\n  public confirmDeletion = 'ç¢ºèªåªé¤ï¼';\r\n  public submitSuccess = 'æäº¤å¯©æ¹æåï¼';\r\n  public submitFaild = 'æäº¤å¯©æ¹å¤±æï¼';\r\n  public notifyTitle = 'ç³»çµ±æç¤º';\r\n  public httpError = 'HTTPè«æ±é¯èª¤ï¼è«æª¢æ¥Serverç«¯é¯èª¤ï¼';\r\n  public gridDataNotSave = 'ç¶åé æ¸ææªä¿å­ï¼ç¿»é å°å°è´æ¸æä¸å¤±ï¼æ¯å¦ç¹¼çºç¿»é ï¼';\r\n  public exitWithoutSave = 'å­å¨æªä¿å­çæ¸æï¼æ¯å¦ç¹¼çºééï¼';\r\n  public notSupportMenuType = 'ééçæ¢ä¸æ¯èå®ä¹ä¸æ¯æç¨ã';\r\n  public cancelWithoutSave = 'å­å¨æªä¿å­çè®æ´ï¼ç¢ºèªåæ¶ï¼';\r\n  public plsSelectDeleteData = 'è«é¸æè¦åªé¤çæ¸æï¼';\r\n  public errorHierarchyKey = 'é¯èª¤çåç´ç¢¼';\r\n  public plsSelectParentNode = 'è«é¸æç¶ç¯é»';\r\n  public deleteChildFirst = 'è«ååªé¤å­ç¯é»';\r\n  public incorrectHierarchyConfig = 'åç´ç¢¼éç½®ä¿¡æ¯é¯èª¤';\r\n  public operationFailed = 'æä½å·è¡å¤±æã';\r\n  public plsSelectEditData = 'è«é¸æè¦ç·¨è¼¯çæ¸æï¼';\r\n  public plsSelectViewData = 'è«é¸æè¦æ¥ççæ¸æï¼';\r\n  public plsUploadFirst = 'è«åä¸å³éä»¶ï¼';\r\n  public defaultDialogTitle = 'å½çª';\r\n  public changeToFirst = 'å·²å°éç¬¬å£¹æ¢æ¸æ';\r\n  public changeToLast = 'å·²å°éæå¾å£¹æ¢æ¸æ';\r\n  public noProcessInstanceId = 'è«æå®æµç¨å¯¦ä¾æ¨è­ã';\r\n  public noDataExist = 'è¦ç·¨è¼¯çæ¸æä¸å­å¨ï¼ç¡æ³é²å¥ç·¨è¼¯çæï¼';\r\n  public noAttachment = 'æ²æå¯ä»¥é è¦½çéä»¶ã';\r\n  public confirm = 'ç¢ºå®';\r\n  public cancel = 'åæ¶';\r\n  public plsSelectCopyData = 'è«é¸æè¦å¾©å¶çæ¸æï¼';\r\n  public copyFieldsRequired = 'è¦å¾©å¶çå­æ®µä¸è½çºç©ºï¼';\r\n  public pathIsRequired = 'è«æ±è·¯å¾ä¸è½çºç©ºï¼';\r\n  public propsIsEmpty = 'æ²æå¯ä»¥ç·¨è¼¯çç©æç¹å¾ï¼';\r\n  public historyAttachment = 'æå²çæ¬éä»¶ç¦æ­¢åªé¤ï¼';\r\n  public plsSelectDownloadAtt = 'è«é¸æè¦ä¸è¼çéä»¶!';\r\n  public noDownloadAtt = 'æ¾ä¸å°è¦ä¸è¼çéä»¶ï¼';\r\n  public plsCheckBatchEditRows = 'è«å¾é¸è¦æ¹éç·¨è¼¯çè¡ï¼';\r\n  public plsSelectDetailFormData = 'è«åé¸æä¸æ¢å¾è¡¨æ¸æï¼';\r\n  public dataAndStateChanged = 'ç¢ºå®è¦å è¼æ¸æä¸¦åæå°$1çæï¼';\r\n  public dataChanged = 'ç¢ºå®è¦å è¼æ¸æä¸¦æ¾æ£ç¶åä¿®æ¹ï¼';\r\n  public stateChanged = 'ç¢ºå®è¦åæå°$1çæï¼';\r\n  public defaultStateName = 'åå§';\r\n  public copy = 'å¾©å¶è©³ç´°ä¿¡æ¯';\r\n  public copySuccess = 'å¾©å¶æå';\r\n  public copyFailed = 'å¾©å¶å¤±æ';\r\n  public roger = 'ç¥éäº';\r\n  public appOrFuncIdRequired = 'æªéç½®èå®ææç¨åæ¸ï¼è«å¨è¨­è¨å¨ä¸­éç½®ã';\r\n  public tableCanNotEmpty = 'ä¸è½çºç©ºã';\r\n}\r\n\r\nexport { LanguageMessageForZhft };\r\n","import { LanguageMessage } from './language-message';\r\nimport { LanguageMessageForZh } from './language-message-zh';\r\nimport { LanguageMessageForEn } from './language-message-en';\r\nimport { LanguageMessageForZhft } from './language-message-zhft';\r\nclass LanguageMessageFactory {\r\n\r\n  private static languageMessageMap: Map<string, LanguageMessage> = new Map<string, LanguageMessage>();\r\n\r\n  /**\r\n   * Create an instance by language\r\n   */\r\n  public static create(language: string): LanguageMessage {\r\n    if (this.languageMessageMap.has(language) === true) {\r\n      return this.languageMessageMap.get(language);\r\n    }\r\n\r\n    let languageMessage: LanguageMessage;\r\n    switch (language) {\r\n      case 'zh-CHS':\r\n        languageMessage = new LanguageMessageForZh();\r\n        break;\r\n      case 'en':\r\n        languageMessage = new LanguageMessageForEn();\r\n        break;\r\n      case 'zh-CHT':\r\n        languageMessage = new LanguageMessageForZhft();\r\n        break;\r\n      default:\r\n        languageMessage = new LanguageMessageForZh();\r\n        break;\r\n    }\r\n    this.languageMessageMap.set(language, languageMessage);\r\n\r\n    return languageMessage;\r\n  }\r\n}\r\n\r\nexport { LanguageMessageFactory };\r\n","import { Injectable, LOCALE_ID, Optional, Inject } from '@angular/core';\r\nimport { LanguageMessage, LanguageMessageFactory } from './languages/index';\r\n\r\n\r\n/**\r\n * å¤è¯­è¨æå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nclass LanguageService implements LanguageMessage {\r\n\r\n  /**\r\n   * åä¾å¯¹è±¡\r\n   */\r\n  private static innerInstance: LanguageService = null;\r\n\r\n  // #region å®ç°LanguageMessageæ¥å£ï¼æ¹ä¾¿ä¹¦å\r\n  public yes: string;\r\n  public no: string;\r\n  public unsaveNotifyTitle: string;\r\n  public clientNotifyTitle: string;\r\n  public serverNotifyTitle: string;\r\n  public cancelApproveSuccess: string;\r\n  public cancelApproveFailed: string;\r\n  public unallowEmptyProcessInstanceName: string;\r\n  public unallowEmptyBizBillId: string;\r\n  public unallowEmptyChildBizBillId: string;\r\n  public bizDefKeyRequired: string;\r\n  public procInsIdRequired: string;\r\n  public addChildFailed: string;\r\n  public addSiblingFailed: string;\r\n  public addSubChildFailed: string;\r\n  public addSubSiblingFailed: string;\r\n  public deleteFailed: string;\r\n  public multiSaveFailed: string;\r\n  public appendFailed: string;\r\n  public queryFailed: string;\r\n  public cancelFailed: string;\r\n  public updateFailed: string;\r\n  public addFailed: string;\r\n  public loadFailed: string;\r\n  public saveSuccess: string;\r\n  public saveFailed: string;\r\n  public deleteSuccess: string;\r\n  public deleteFaild: string;\r\n  public confirmDeletion: string;\r\n  public submitSuccess: string;\r\n  public submitFaild: string;\r\n  public notifyTitle: string;\r\n  public httpError: string;\r\n  public gridDataNotSave: string;\r\n  public exitWithoutSave: string;\r\n  public notSupportMenuType: string;\r\n  public cancelWithoutSave: string;\r\n  public plsSelectDeleteData: string;\r\n  public errorHierarchyKey: string;\r\n  public plsSelectParentNode: string;\r\n  public deleteChildFirst: string;\r\n  public incorrectHierarchyConfig: string;\r\n  public operationFailed: string;\r\n  public plsSelectEditData: string;\r\n  public plsSelectViewData: string;\r\n  public plsUploadFirst: string;\r\n  public defaultDialogTitle: string;\r\n  public changeToFirst: string;\r\n  public changeToLast: string;\r\n  public noProcessInstanceId: string;\r\n  public noDataExist: string;\r\n  public noAttachment: string;\r\n  public confirm: string;\r\n  public cancel: string;\r\n  public plsSelectCopyData: string;\r\n  public copyFieldsRequired: string;\r\n  public pathIsRequired: string;\r\n  public propsIsEmpty: string;\r\n  public historyAttachment: string;\r\n  public plsSelectDownloadAtt: string;\r\n  public noDownloadAtt: string;\r\n  public plsCheckBatchEditRows: string;\r\n  public plsSelectDetailFormData: string;\r\n  public dataAndStateChanged: string;\r\n  public dataChanged: string;\r\n  public stateChanged: string;\r\n  public defaultStateName: string;\r\n  public copy: string;\r\n  public copySuccess: string;\r\n  public copyFailed: string;\r\n  public roger: string;\r\n  public appOrFuncIdRequired: string;\r\n  public tableCanNotEmpty: string;\r\n  // #endregion\r\n\r\n  /**\r\n   * å½åè¯­è¨\r\n   */\r\n  protected language = 'zh-CHS';\r\n\r\n  /**\r\n   * å½åè¯­è¨å\r\n   */\r\n  protected get languageMessage(): LanguageMessage {\r\n    return LanguageMessageFactory.create(this.language);\r\n  }\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(@Optional() @Inject(LOCALE_ID) localeId?: string) {\r\n    this.language = localeId || 'zh-CHS';\r\n    this.extendProperties();\r\n    LanguageService.innerInstance = this;\r\n  }\r\n\r\n  /**\r\n   * è·åå®ä¾\r\n   */\r\n  public static getInstance() {\r\n    if (this.innerInstance) {\r\n      return this.innerInstance;\r\n    }\r\n    const instance = new LanguageService('zh-CHS');\r\n    LanguageService.innerInstance = instance;\r\n    return instance;\r\n  }\r\n\r\n  /**\r\n   * æ©å±å±æ§\r\n   */\r\n  private extendProperties() {\r\n    Object.keys(this.languageMessage).forEach((propName: string) => {\r\n      Object.defineProperty(this, propName, {\r\n        get: () => {\r\n          return this.languageMessage[propName];\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport { LanguageService };\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export class DeviceAbility {\r\n  /**\r\n   * å¤å¶å°ç²è´´æ¿\r\n   * @param text \r\n   * @returns \r\n   */\r\n  public static copyToClipboard(text): boolean {\r\n    const windowRef: any = window;\r\n    if (windowRef.clipboardData && windowRef.clipboardData.setData) {\r\n      return windowRef.clipboardData.setData(\"Text\", text);\r\n    } else if (document.queryCommandSupported && document.queryCommandSupported(\"copy\")) {\r\n      var textarea = document.createElement(\"textarea\");\r\n      textarea.textContent = text;\r\n      textarea.style.position = \"fixed\";\r\n      document.body.appendChild(textarea);\r\n      textarea.select();\r\n      try {\r\n        return document.execCommand(\"copy\");\r\n      } catch (ex) {\r\n      } finally {\r\n        document.body.removeChild(textarea);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}","\r\nimport { Optional } from '@angular/core';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { LanguageService } from '../languag.service';\r\nimport { ServerExceptionEntity } from './types';\r\nimport { DeviceAbility } from '../util/device-ability';\r\nimport { BsModalRef } from '@farris/ui-modal';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { FrameContext } from '@farris/devkit';\r\nimport moment from 'moment';\r\n/**\r\n * å¼å¸¸å¤çæ¥å£\r\n */\r\nexport interface IExceptionStrategy {\r\n  handleException(error: ServerExceptionEntity): void;\r\n}\r\n\r\n\r\n/**\r\n * å¼å¸¸å¤çåºç±»\r\n */\r\nexport class ExceptionStrategy {\r\n  constructor(\r\n    public messagerService: MessagerService,\r\n    @Optional() public languageService: LanguageService) {\r\n  }\r\n}\r\n\r\n/**\r\n * ä¿¡æ¯çº§å«å¼å¸¸å¤ç\r\n */\r\nexport class InfoExceptionStrategy extends ExceptionStrategy implements IExceptionStrategy {\r\n  constructor(\r\n    messagerService: MessagerService,\r\n    @Optional() languageService: LanguageService) {\r\n    super(messagerService, languageService);\r\n  }\r\n\r\n  public handleException(error: ServerExceptionEntity): void {\r\n    if (!error) {\r\n      return;\r\n    }\r\n\r\n    this.messagerService.info(error.Message);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * è­¦åçº§å«å¼å¸¸å¤ç\r\n */\r\nexport class WarningExceptionStrategy extends ExceptionStrategy implements IExceptionStrategy {\r\n  constructor(\r\n    messagerService: MessagerService,\r\n    @Optional() languageService: LanguageService) {\r\n    super(messagerService, languageService);\r\n  }\r\n\r\n  public handleException(error: ServerExceptionEntity): void {\r\n    if (!error) {\r\n      return;\r\n    }\r\n\r\n    this.messagerService.warning(error.Message);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * éè¯¯çº§å«å¼å¸¸å¤ç\r\n */\r\nexport class ErrorExceptionStrategy extends ExceptionStrategy implements IExceptionStrategy {\r\n  private langService: LanguageService = null;\r\n  constructor(\r\n    messagerService: MessagerService,\r\n    @Optional() languageService: LanguageService) {\r\n    super(messagerService, languageService);\r\n    this.langService = languageService;\r\n    if (!this.langService) {\r\n      this.langService = new LanguageService();\r\n    }\r\n\r\n  }\r\n\r\n  public handleException(error: ServerExceptionEntity): void {\r\n    if (!error) {\r\n      return;\r\n    }\r\n\r\n    this.handleErrorLevel(error);\r\n  }\r\n\r\n  private handleErrorLevel(error: ServerExceptionEntity): void {\r\n    const exceptionMsg = error.Message || '';\r\n    const date = error.date || new Date();\r\n    const localDate = moment(date).format('YYYY-MM-DD HH:mm:ss');\r\n    const detail = error.Detail || `${error.Message}\\r\\nåçæ¶é´ï¼${localDate}\\r\\nè¯¦ç»ä¿¡æ¯ï¼${error.innerMessage}` || '';\r\n\r\n    const innerMessage = error.innerMessage || null;\r\n    let bsModalRef: BsModalRef;\r\n    const options = {\r\n      // title: this.languageService.serverNotifyTitle,\r\n      showMaxButton: false,\r\n      buttons: [\r\n        {\r\n          text: this.langService.roger,\r\n          cls: 'btn btn-primary btn-lg',\r\n          handle: () => {\r\n            bsModalRef.close();\r\n          }\r\n        }\r\n      ],\r\n      // showHeader: false,\r\n      width: 440,\r\n      height: 200,\r\n      safeHtml: false,\r\n      exception: {\r\n        date: localDate,\r\n        message: innerMessage,\r\n        copyButton: {\r\n          text: this.langService.copy,\r\n          onClick: (e) => {\r\n            const result = DeviceAbility.copyToClipboard(detail);\r\n            const text = result ? this.langService.copySuccess : this.langService.copyFailed;\r\n            bsModalRef.content.showMiniNotify(text, 1500);\r\n          }\r\n        }\r\n      }\r\n    };\r\n    this.displayError(error);\r\n    bsModalRef = this.messagerService.show('exception', exceptionMsg, options);\r\n  }\r\n  /**\r\n   * å¨æ§å¶å°ä¸­æ¾ç¤ºéè¯¯ä¿¡æ¯\r\n   */\r\n  private displayError(error: ServerExceptionEntity) {\r\n    if (!error) {\r\n      return;\r\n    }\r\n    if (!console || !console.error) {\r\n      return;\r\n    }\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n/**\r\n * è´å½éè¯¯çº§å«å¼å¸¸å¤ç\r\n */\r\nexport class FatalExceptionStrategy extends ExceptionStrategy implements IExceptionStrategy {\r\n  constructor(\r\n    messagerService: MessagerService,\r\n    @Optional() languageService: LanguageService) {\r\n    super(messagerService, languageService);\r\n  }\r\n\r\n  public handleException(error: ServerExceptionEntity): void {\r\n    if (!error) {\r\n      return;\r\n    }\r\n\r\n    this.messagerService.error(error.Message);\r\n  }\r\n}\r\n","import { Optional, Injectable } from '@angular/core';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { LanguageService } from '../languag.service';\r\nimport { ServerExceptionEntity, ExceptionLevel } from './types';\r\nimport {\r\n  IExceptionStrategy, InfoExceptionStrategy, WarningExceptionStrategy, ErrorExceptionStrategy, FatalExceptionStrategy\r\n} from './exception_strategy';\r\n\r\n\r\n@Injectable()\r\nexport class ExceptionFactory {\r\n\r\n  /**\r\n   * å¼å¸¸å·¥åå®ä¾\r\n   */\r\n  private static exceptionFactory: ExceptionFactory = null;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   * @param messagerService æ¶æ¯æå¡\r\n   * @param languageService å¤è¯­è¨æå¡\r\n   */\r\n  private constructor(\r\n    public messagerService: MessagerService,\r\n    @Optional() private languageService: LanguageService,\r\n  ) {\r\n\r\n  }\r\n\r\n  /**\r\n   * è·åå·¥åå®ä¾\r\n   * @param messagerService æ¶æ¯æå¡\r\n   * @param languageService å¤è¯­è¨æå¡\r\n   */\r\n  public static getInstance(messagerService: MessagerService, languageService: LanguageService): ExceptionFactory {\r\n    if (!this.exceptionFactory) {\r\n      this.exceptionFactory = new ExceptionFactory(messagerService, languageService);\r\n    }\r\n\r\n    return this.exceptionFactory;\r\n  }\r\n\r\n  /**\r\n   * è·åå¼å¸¸å¤çç­ç¥\r\n   * @param exceptionLevel å¼å¸¸ç­çº§\r\n   */\r\n  public getExceptionHandleStrategy(exceptionLevel: ExceptionLevel): IExceptionStrategy {\r\n    let exceptionStrategy: IExceptionStrategy;\r\n\r\n    switch (exceptionLevel) {\r\n      case ExceptionLevel.Info:\r\n        exceptionStrategy = new InfoExceptionStrategy(this.messagerService, this.languageService);\r\n        break;\r\n      case ExceptionLevel.Warning:\r\n        exceptionStrategy = new WarningExceptionStrategy(this.messagerService, this.languageService);\r\n        break;\r\n      case ExceptionLevel.Error:\r\n        exceptionStrategy = new ErrorExceptionStrategy(this.messagerService, this.languageService);\r\n        break;\r\n      case ExceptionLevel.Fatal:\r\n        exceptionStrategy = new FatalExceptionStrategy(this.messagerService, this.languageService);\r\n        break;\r\n      default:\r\n\r\n        // é»è®¤å¼å¸¸ç­çº§æ¯éè¯¯\r\n        exceptionStrategy = new ErrorExceptionStrategy(this.messagerService, this.languageService);\r\n        break;\r\n    }\r\n\r\n    return exceptionStrategy;\r\n  }\r\n}\r\n","// https://github.com/typeslick/status-code-enum\r\nenum HttpStatusType {\r\n    Info = 1,\r\n    Success,\r\n    Redirect,\r\n    ClientError,\r\n    ServerError\r\n}\r\n\r\n/**\r\n * httpéç¨ç±»\r\n */\r\nclass HttpUtil {\r\n\r\n    /**\r\n     * åºäºhttpç¶æç è¿åç¶æç±»å\r\n     * @param httpResponseSatus httpè¯·æ±è¿åç¶æç \r\n     * @returns null | HttpStatusType\r\n     */\r\n    public static getHttpStatusType(httpResponseSatus: number): any {\r\n        if (!httpResponseSatus) {\r\n            return null;\r\n        }\r\n        \r\n        let statusType = null; // é»è®¤å¼ä¸ºç©º\r\n        \r\n        if (httpResponseSatus < 100 || httpResponseSatus > 600) {\r\n            statusType = null; // ä¸åçç¶æç \r\n        } else if (httpResponseSatus >= 100 && httpResponseSatus < 200) {\r\n            statusType = HttpStatusType.Info;\r\n        } else if (httpResponseSatus >= 200 && httpResponseSatus < 300) {\r\n            statusType = HttpStatusType.Success;\r\n        } else if (httpResponseSatus >= 300 && httpResponseSatus < 400) {\r\n            statusType = HttpStatusType.Redirect;\r\n        } else if (httpResponseSatus >= 400 && httpResponseSatus < 500) {\r\n            statusType = HttpStatusType.ClientError;\r\n        } else if (httpResponseSatus >= 500 && httpResponseSatus < 600) {\r\n            statusType = HttpStatusType.ServerError;\r\n        }\r\n\r\n        return statusType;\r\n    }\r\n}\r\n\r\nexport { HttpUtil, HttpStatusType };","import { Injectable, Optional } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { HttpUtil, HttpStatusType } from '../util/http';\r\n\r\n/**\r\n * è¡¨åéè¯¯æç¤ºæå¡\r\n * @description ç»ä¸å¤çååç«¯å¼å¸¸\r\n */\r\n@Injectable()\r\nclass FormErrorService {\r\n\r\n  constructor(\r\n    private msgService: FormMessageService,\r\n    @Optional() private languageService: LanguageService\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * å¼å¸¸è·¯ç±æ¹æ³\r\n   */\r\n  public exception(message: string, error: any) {\r\n    // éå¯¹sessionå¤±æåç¹æ®å¤ç\r\n    if (error && error.hasOwnProperty('expired') && error['expired'] === true) {\r\n      return;\r\n    }\r\n    if (error && this.isHttpErrorResponse(error)) {\r\n      this.httpErrorHandler(error);\r\n    } else {\r\n\r\n      // todo: ç»åå¼å¸¸å¤çåï¼ç»§ç»­æè§£è¯¥æ¹æ³\r\n      this.commonErrorHandler(message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * httpè¯·æ±å¼å¸¸å¤çå¨\r\n   */\r\n  public httpErrorHandler(httpError: HttpErrorResponse): void {\r\n    if (!httpError) {\r\n      return;\r\n    }\r\n\r\n    const statusType = HttpUtil.getHttpStatusType(httpError.status);\r\n\r\n    switch (statusType) {\r\n      case HttpStatusType.ClientError:\r\n        if (httpError.status === 401) {\r\n          this.msgService.http401Error(httpError);\r\n          break;\r\n        }\r\n\r\n        this.msgService.httpErrorInClient(httpError);\r\n        break;\r\n      case HttpStatusType.ServerError:\r\n        this.msgService.httpErrorInServer(httpError);\r\n        break;\r\n      default:\r\n        throw new Error('Get invalid status code when using httpErrorHandler method.');\r\n    }\r\n  }\r\n\r\n  private commonErrorHandler(errorMsg: string): void {\r\n    if (!errorMsg) {\r\n      return;\r\n    }\r\n    this.msgService.error(errorMsg);\r\n  }\r\n  /**\r\n   * httpErrorResponse like\r\n   * @param error å¼å¸¸\r\n   */\r\n  private isHttpErrorResponse(error) {\r\n    if (!error) {\r\n      return false;\r\n    }\r\n    if (typeof error !== 'object') {\r\n      return false;\r\n    }\r\n    if (error.name === 'HttpErrorResponse' && error.hasOwnProperty('status') && error.hasOwnProperty('error')) {\r\n      return true;\r\n    }\r\n    if (error instanceof HttpErrorResponse) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport { FormErrorService };\r\n\r\n","import { Inject, Injectable, LOCALE_ID, Optional } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, Subject, of, from } from 'rxjs';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { fromPromise } from 'rxjs/observable/fromPromise';\r\nimport { LanguageService } from './languag.service';\r\nimport { ServerExceptionEntity, ExceptionFactory, IExceptionStrategy } from './error/index';\r\nimport { BsModalRef } from '@farris/ui-modal';\r\n\r\n/**\r\n * è¡¨åæ¶æ¯æå¡\r\n * @scope FormModule\r\n * @summary\r\n * 1ãåè£@farris/uiçæ¶æ¯æå¡ï¼\r\n * 2ãæä¾éå¯¹è¡¨åçå¿«æ·æ¹æ³ï¼\r\n */\r\n@Injectable()\r\nclass FormMessageService {\r\n\r\n  /**\r\n   * æé å½æ°\r\n   * æ³¨å¥@farris/uiçLoadingService\r\n   */\r\n  constructor(\r\n    private messagerService: MessagerService,\r\n    @Optional() private languageService: LanguageService,\r\n    @Inject(LOCALE_ID) private curLanguage: string, // ä¸ºäºç¬ç«å¼¹åºéæ°ç»å½æç¤ºæ¡ï¼åæ¢å°è¿è¡æ¡æ¶httpæå¡åå¯ä»¥å é¤\r\n  ) {\r\n    this.languageService = this.languageService || LanguageService.getInstance();\r\n  }\r\n  /**\r\n   * questionå¼¹çª\r\n   */\r\n  public question(content: string): Observable<boolean> {\r\n    const confirmResult$: Promise<boolean> = this.confirmPromise(content);\r\n    return from(confirmResult$);\r\n  }\r\n\r\n  /**\r\n   * å¸¦é»è®¤ç¦ç¹çå¼¹åºæç¤º\r\n   * @param content åå®¹\r\n   */\r\n  public question2(content: string): Observable<boolean> {\r\n    const promise$: Promise<boolean> = new Promise((resolve, reject) => {\r\n      const dialogRef = this.messagerService.question2(\r\n        content,\r\n        [\r\n          {\r\n            text: this.languageService.no,\r\n            cls: 'btn btn-secondary',\r\n            handle: () => {\r\n              resolve(false);\r\n              dialogRef.close();\r\n            }\r\n          },\r\n          {\r\n            text: this.languageService.yes,\r\n            cls: 'btn btn-primary',\r\n            defaultFocus: true,\r\n            handle: () => {\r\n              resolve(true);\r\n              dialogRef.close();\r\n            }\r\n          }\r\n        ]);\r\n    });\r\n    return from(promise$);\r\n  }\r\n\r\n  /**\r\n   * å¼¹åºè¾å¥å¯¹è¯æ¡\r\n   * @param title æ é¢\r\n   */\r\n  public prompt(title: string): Observable<any> {\r\n    return this.messagerService.prompt(title);\r\n  }\r\n\r\n  /**\r\n   * ä½¿ç¨Promiseå®ä¾åè£åè°æ¹æ³ï¼ä»¥åæ­¥åè°æ¹æ³æ§è¡åç»æ\r\n   * @param content\r\n   */\r\n  private confirmPromise(content: string): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      this.messagerService.question(\r\n        content,\r\n        () => { resolve(true); },\r\n        () => { resolve(false); }\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ç¡®è®¤å¼¹æ¡\r\n   * @param content å¼¹åºåå®¹æç¤º\r\n   */\r\n  public confirm(content: string): Observable<boolean> {\r\n    return this.messagerService.confirm(content);\r\n  }\r\n\r\n  /**\r\n   * æ¶æ¯å¼¹æ¡\r\n   */\r\n  public info(content: string) {\r\n    this.messagerService.info(content);\r\n  }\r\n\r\n  /**\r\n   * éè¯¯å¼¹æ¡\r\n   */\r\n  public error(content: string) {\r\n    this.messagerService.error(content);\r\n  }\r\n\r\n  /**\r\n   * è­¦åå¼¹æ¡\r\n   */\r\n  public warning(content: string) {\r\n    this.messagerService.warning(content);\r\n  }\r\n\r\n  /**\r\n   * æå¡å¨ç«¯å¼å¸¸æç¤ºå¼¹æ¡\r\n   */\r\n  public httpErrorInServer(httpError: HttpErrorResponse): void {\r\n    let error: ServerExceptionEntity = httpError.error;\r\n    if (typeof (error) === 'string') {\r\n      try {\r\n        error = JSON.parse(error);\r\n      } catch (e) { }\r\n    }\r\n    if (!error || error.Level == null || error.Level == undefined) { // æªå°è£errorææªè®¾ç½®å¼å¸¸ç­çº§\r\n      this.messagerService.error(httpError.message);\r\n      return;\r\n    }\r\n    const exceptionStrategy: IExceptionStrategy = ExceptionFactory.getInstance(this.messagerService, this.languageService).getExceptionHandleStrategy(error.Level);\r\n    exceptionStrategy.handleException(error);\r\n  }\r\n\r\n  /**\r\n   * å®¢æ·ç«¯å¼å¸¸æç¤ºå¼¹æ¡\r\n   */\r\n  public httpErrorInClient(httpError: HttpErrorResponse): void {\r\n    if (!httpError) {\r\n      return;\r\n    }\r\n    const message = httpError.error && httpError.error.error && httpError.error.error.message;\r\n    const exceptionMsg = message || httpError.message && httpError.message.replace(/http:\\/\\/[a-zA-Z0-9.:]{1,}/, '');\r\n    const options = {\r\n      // title: this.languageService.clientNotifyTitle,\r\n      // showMaxButton: true,\r\n      showHeader: false,\r\n      width: 400,\r\n      height: 200,\r\n      safeHtml: false\r\n    };\r\n\r\n    this.messagerService.show('error', exceptionMsg, options);\r\n  }\r\n\r\n  /**\r\n   * 401å¼å¸¸å¤ç\r\n   * ä¸ºäºç¬ç«å¼¹åºéæ°ç»å½æç¤ºæ¡ï¼åæ¢å°è¿è¡æ¡æ¶httpæå¡åå¯ä»¥å é¤\r\n   * @param httpError å¼å¸¸\r\n   */\r\n  public http401Error(httpError: HttpErrorResponse): void {\r\n    const dialogShownKey = '401ErrorShownFlag';\r\n\r\n    if (!httpError || window[dialogShownKey]) {\r\n      return;\r\n    }\r\n\r\n    const i18n = {\r\n      en: {\r\n        title: 'Warning',\r\n        sessionInvalid: 'Your login has expired, please login again.',\r\n        ok: 'ok',\r\n        cancel: 'cancel'\r\n      },\r\n      'zh-CHS': {\r\n        title: 'æç¤º',\r\n        sessionInvalid: 'ç¨æ·ç»å½ä¿¡æ¯å·²å¤±æï¼æ¯å¦éæ°ç»å½?',\r\n        ok: 'ç¡®è®¤',\r\n        cancel: 'åæ¶'\r\n      }\r\n    };\r\n    this.curLanguage = this.curLanguage || 'zh-CHS';\r\n\r\n    const messageOptions = {\r\n      title: i18n[this.curLanguage].title,\r\n      initialState: {\r\n        okText: i18n[this.curLanguage].ok,\r\n        okHandle: () => {\r\n          modalRef.close();\r\n          window[dialogShownKey] = false;\r\n          const eventResult = httpError && httpError.error || {};\r\n          const redirectUri = eventResult.redirect_uri || '/login.html';\r\n          window.location.href = `/logout.html#?logout-before-redirect=true&loginUri=${redirectUri}`;\r\n        },\r\n        cancelText: i18n[this.curLanguage].cancel,\r\n        cancelHandle: () => {\r\n          modalRef.close();\r\n          window[dialogShownKey] = false;\r\n        }\r\n      },\r\n      showHeader: true,\r\n      width: 420,\r\n      height: 180,\r\n      fitContent: false\r\n    };\r\n    const modalRef = this.messagerService.show('question', i18n[this.curLanguage].sessionInvalid, messageOptions);\r\n    window[dialogShownKey] = true;\r\n    if (modalRef && modalRef.dialog && modalRef.dialog.instance.closed) {\r\n      modalRef.dialog.instance.closed.subscribe(() => {\r\n        window[dialogShownKey] = false;\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport { FormMessageService };\r\n\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { NotifyService, NotifyOptions } from '@farris/ui-notify';\r\nimport { LanguageService } from './languag.service';\r\n\r\n/**\r\n * éç¥æå¡\r\n * @scope FormModule\r\n * @description\r\n * æ¶æ¯æç¤ºä½¿ç¨ç­ç¥ï¼æåä½¿ç¨successï¼å¤±è´¥ä½¿ç¨errorï¼è­¦åä½¿ç¨warningï¼å¶ä»åºæ¯ä½¿ç¨info\r\n */\r\n@Injectable()\r\nclass FormNotifyService {\r\n\r\n  /**\r\n   * æé å½æ°\r\n   * æ³¨å¥@farris/uiçNotifyService\r\n   */\r\n  constructor(private notifyService: NotifyService,\r\n    @Optional() private languageService: LanguageService\r\n  ) {\r\n    if (!languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ä¿¡æ¯æç¤º\r\n   * @param content åå®¹\r\n   */\r\n  public default(content: string) {\r\n    return this.notifyService.default(<NotifyOptions>{\r\n      title: this.languageService.notifyTitle,\r\n      msg: content,\r\n      timeout: 3000\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ä¿¡æ¯æç¤º\r\n   * @param content åå®¹\r\n   */\r\n  public info(content: string, options?: { [prop: string]: any }) {\r\n    const notifyOptions: NotifyOptions = {\r\n      title: this.languageService.notifyTitle,\r\n      msg: content,\r\n      timeout: 3000\r\n    } as NotifyOptions;\r\n    if (options && options.hideTitle) {\r\n      delete notifyOptions.title;\r\n    }\r\n    return this.notifyService.info(notifyOptions);\r\n  }\r\n\r\n  /**\r\n   * æåæç¤º\r\n   * @param content åå®¹\r\n   * @param options? éé¡¹ {shorTitle: false}\r\n   */\r\n  public success(content: string, options?: { [prop: string]: any }) {\r\n    const notifyOptions: NotifyOptions = {\r\n      title: this.languageService.notifyTitle,\r\n      msg: content,\r\n      timeout: 3000\r\n    } as NotifyOptions;\r\n    if (options && options.hideTitle) {\r\n      delete notifyOptions.title;\r\n    }\r\n    this.notifyService.success(notifyOptions);\r\n  }\r\n\r\n  /**\r\n   * è­¦åæç¤º\r\n   * @param content åå®¹\r\n   * @param options éé¡¹\r\n   */\r\n  public warning(content: string, options?: { [prop: string]: any }) {\r\n    const notifyOptions: NotifyOptions = {\r\n      title: this.languageService.notifyTitle,\r\n      msg: content,\r\n      timeout: 3000\r\n    } as NotifyOptions;\r\n    if (options && options.hideTitle) {\r\n      delete notifyOptions.title;\r\n    }\r\n    this.notifyService.warning(notifyOptions);\r\n  }\r\n\r\n  /**\r\n   * éè¯¯æç¤º\r\n   * @param content åå®¹\r\n   */\r\n  public error(content: string, options?: { [prop: string]: any }) {\r\n    const notifyOptions: NotifyOptions = {\r\n      title: this.languageService.notifyTitle,\r\n      msg: content,\r\n      timeout: 3000\r\n    } as NotifyOptions;\r\n    if (options && options.hideTitle) {\r\n      delete notifyOptions.title;\r\n    }\r\n    this.notifyService.error(notifyOptions);\r\n  }\r\n}\r\n\r\nexport { FormNotifyService };\r\n","import { Injectable } from '@angular/core';\r\nimport { WizardService, WizardEventType } from '@farris/ui-wizard';\r\nimport { FrameContext } from '@farris/devkit';\r\n\r\n@Injectable()\r\nexport class FormWizardService {\r\n    constructor(\r\n        private wizardSer: WizardService\r\n    ) { }\r\n\r\n    public preStep() {\r\n        const currentPageId = this.wizardSer.getCurrentPageId();\r\n        this.wizardSer.updateWizardState(WizardEventType.Prev, currentPageId);\r\n    }\r\n    public nextStep() {\r\n        const currentPageId = this.wizardSer.getCurrentPageId();\r\n        this.wizardSer.updateWizardState(WizardEventType.Next, currentPageId);\r\n    }\r\n    public cancelWizard() {\r\n        this.wizardSer.cancelWizard();\r\n    }\r\n\r\n    public finishWizard() {\r\n        this.wizardSer.finishWizard();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * æ£æ¥è§å\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nclass CheckService {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * æ£æ¥æ¯å¦ä¸ºç©º\r\n   */\r\n  public checkEmpty(value: any) {\r\n    return !!value;\r\n  }\r\n}\r\n\r\nexport { CheckService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable, empty, of } from 'rxjs';\r\nimport { CommandContext } from '@farris/devkit';\r\nimport { FormMessageService } from './form-message.service';\r\nimport { FormNotifyService } from './form-notify.service';\r\nimport { LanguageService } from './languag.service';\r\n\r\n/**\r\n * æ°æ®æ£æ¥æå¡\r\n */\r\n@Injectable()\r\nclass DataCheckService {\r\n\r\n  constructor(\r\n    private messageService: FormMessageService,\r\n    private formNotifyService: FormNotifyService,\r\n    @Optional() private languageService: LanguageService,\r\n  ) {\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ç¼è¾åæ£æ¥\r\n   */\r\n  public checkBeforeEdit(idToEdit: string): any {\r\n\r\n    const ifSkipCheck = this.ifSkipCheck(idToEdit);\r\n    if (ifSkipCheck === true) {\r\n      return true;\r\n    }\r\n\r\n    if (idToEdit) {\r\n      return true;\r\n    }\r\n\r\n    this.formNotifyService.warning(this.languageService.plsSelectEditData, { hideTitle: true });\r\n    return empty();\r\n  }\r\n\r\n  /**\r\n   * æ¥çåæ£æ¥\r\n   */\r\n  public checkBeforeView(idToView: string): any {\r\n    const ifSkipCheck = this.ifSkipCheck(idToView);\r\n    if (ifSkipCheck === true) {\r\n      return true;\r\n    }\r\n\r\n    if (idToView) {\r\n      return true;\r\n    }\r\n\r\n    this.formNotifyService.warning(this.languageService.plsSelectViewData, { hideTitle: true });\r\n    return empty();\r\n  }\r\n  /**\r\n   * èè¡¨åè·³è¿æ£æ¥\r\n   * @todoï¼å¾å é¤ï¼å¼å®¹èè¡¨å\r\n   */\r\n  public ifSkipCheck(id: string): boolean {\r\n    const context = this['context'] as CommandContext;\r\n    const params = context.command.params;\r\n\r\n    // è¡¨åæ²¡æéæ°ä¿å­è¿çæåµ\r\n    if (params.hasOwnProperty('idToEdit') === false && params.hasOwnProperty('idToView') === false) {\r\n      return true;\r\n    }\r\n\r\n    // ä¿å­è¿ä½æ²¡æå¡«åæ°çæåµ\r\n    // @todo: ä¼æ¼æç©ºä¸²çæåµï¼ç®åä¸»é®è§£æçè¿åå¼æ¯undefinedï¼æä¸èèç©ºä¸²åºæ¯\r\n    if (id === '') {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nexport { DataCheckService };\r\n","import { Injectable } from '@angular/core';\r\nimport { FrameEventBus } from '@farris/devkit';\r\n\r\n/**\r\n * æ¡æ¶äºä»¶æå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nclass EventService {\r\n\r\n  constructor(private eventBus: FrameEventBus) {\r\n  }\r\n\r\n  trigger(eventType: string, eventData?: any, frameIds?: string[]) {\r\n    this.eventBus.trigger(eventType, eventData, frameIds);\r\n  }\r\n}\r\n\r\nexport { EventService };\r\n","import { Injectable } from '@angular/core';\r\n// tslint:disable: no-unused-expression\r\n/**\r\n * èåç¶ææå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nclass MenuStateService {\r\n    private readonly COMMAND_SERVICE_LINK_STORAGE_KEY = 'COMMAND_SERVICE_LINK_STORAGE_KEY';\r\n    private getState() {\r\n        const data = !!sessionStorage && sessionStorage.getItem(this.COMMAND_SERVICE_LINK_STORAGE_KEY) || null;\r\n        if (!!data) {\r\n            return JSON.parse(data);\r\n        }\r\n        return {};\r\n    }\r\n    private setState(links) {\r\n        !!sessionStorage && sessionStorage.setItem(this.COMMAND_SERVICE_LINK_STORAGE_KEY, JSON.stringify(links));\r\n    }\r\n    public addMenuState(parentMenuId: string, childMenuId: string, status: boolean = true) {\r\n        if (!childMenuId) {\r\n            return;\r\n        }\r\n        const state = this.getState();\r\n        const isParentExist = !!state && state.hasOwnProperty(parentMenuId);\r\n        const childItem = { id: childMenuId, status };\r\n        if (isParentExist) {\r\n            const parent = state[parentMenuId];\r\n            const isChildItemExist = parent.find(item => item.id === childMenuId);\r\n            if (!isChildItemExist) {\r\n                state[parentMenuId].push(childItem);\r\n            }\r\n        } else {\r\n            state[parentMenuId] = [childItem];\r\n        }\r\n        this.setState(state);\r\n    }\r\n    public getMenuState(parentMenuId: string, childMenuId?: string) {\r\n        const state = this.getState();\r\n        if (state === null) {\r\n            return null;\r\n        }\r\n        const isParentExist = state.hasOwnProperty(parentMenuId);\r\n        if (!isParentExist) {\r\n            return null;\r\n        }\r\n        const parentMenu = state[parentMenuId];\r\n        const childMenu = parentMenu.filter(item => item.status === true);\r\n        if (typeof childMenuId === 'undefined' || childMenuId.length < 1) {\r\n            return childMenu;\r\n        }\r\n        return parentMenu.filter(item => item.status && item.id === childMenuId);\r\n    }\r\n    public updateMenuState(childMenuId: string, status: boolean) {\r\n        const state = this.getState();\r\n        if (state === null) {\r\n            return;\r\n        }\r\n        Object.keys(state).forEach(key => {\r\n            const childMenu = state[key].find(item => item.id === childMenuId);\r\n            if (!!childMenu) {\r\n                childMenu.status = status;\r\n            }\r\n        });\r\n        this.setState(state);\r\n    }\r\n    public removeMenu(menuId: string) {\r\n        this.removeParentMenu(menuId);\r\n        this.removeChildMenu(menuId);\r\n    }\r\n    private removeParentMenu(menuId: string) {\r\n        const state = this.getState();\r\n        if (state === null) {\r\n            return null;\r\n        }\r\n        Object.keys(state).forEach(item => {\r\n            if (item === menuId && state[menuId].length < 1) {\r\n                delete state[item];\r\n            }\r\n        });\r\n        this.setState(state);\r\n    }\r\n    private removeChildMenu(menuId: string) {\r\n        const state = this.getState();\r\n        if (state === null) {\r\n            return;\r\n        }\r\n        Object.keys(state).forEach(parentMenuId => {\r\n            const childMenus = state[parentMenuId];\r\n            if (childMenus && childMenus.length > 0) {\r\n                childMenus.forEach((child, index) => {\r\n                    if (child.id === menuId) {\r\n                        childMenus.splice(index, 1);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        this.setState(state);\r\n    }\r\n}\r\n\r\nexport { MenuStateService };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-11-15 15:56:11\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-07-09 16:23:04\r\n */\r\n\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { RouterParamService } from '@farris/devkit';\r\nimport { FrameworkService, AppService } from '@gsp-sys/rtf-common';\r\nimport { MenuStateService } from './menu-state.service';\r\nimport { Subject } from 'rxjs';\r\nimport { LanguageService } from './languag.service';\r\n\r\n// tslint:disable: no-string-literal\r\n/**\r\n * è·¯ç±æå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nclass RouterService {\r\n  /**\r\n   * ä¸æ¬¡åæ¢çTabId\r\n   */\r\n  private lastSwitchId: string = null;\r\n  /**\r\n   * ä¸æ¬¡å³é­çTabId\r\n   */\r\n  private lastCloseId: string = null;\r\n  // private menuStateService: MenuStateService = null;\r\n  public onClosed: Subject<any> = null;\r\n  constructor(\r\n    private router: Router,\r\n    private routerParamService: RouterParamService,\r\n    private frameworkService: FrameworkService,\r\n    @Optional() private appService: AppService,\r\n    @Optional() private menuStateService: MenuStateService,\r\n    @Optional() private languageService: LanguageService,\r\n  ) {\r\n    if (!this.menuStateService) {\r\n      this.menuStateService = new MenuStateService();\r\n    }\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n    this.onClosed = new Subject<any>();\r\n    this.registerEvent();\r\n  }\r\n\r\n  /**\r\n   * åæ¢è·¯ç±\r\n   * @param url èåID\r\n   * @param params è·¯ç±åæ°\r\n   */\r\n  public route(url: string, params: any) {\r\n    url = this.router.createUrlTree([url]).toString();\r\n    this.setParams(url, params);\r\n    this.router.navigateByUrl(url);\r\n  }\r\n  /**\r\n   * æ³¨åè¿è¡æ¡æ¶äºä»¶\r\n   */\r\n  public registerEvent() {\r\n    const params: any = this.getParams(window.location.hash);\r\n    const menuId = this.getAppId() || this.getFuncId();\r\n    this.frameworkService.eventListner(this.frameworkService.FuncSwitch, e => {\r\n      if (!e) {\r\n        return;\r\n      }\r\n      const id = this.getOriginalId(e.id) || e.tabId;\r\n      const menuState = this.menuStateService.getMenuState(id);\r\n      if (!!id && menuId === id && !!menuState && menuState.length > 0) {\r\n        this.formReload();\r\n        this.lastSwitchId = id;\r\n      }\r\n    }, params);\r\n\r\n    this.frameworkService.eventListner(this.frameworkService.FuncClosed, e => {\r\n      if (!e) {\r\n        return;\r\n      }\r\n      this.onClosed.next(e);\r\n      const id = this.getOriginalId(e.id) || e.tabId;\r\n      if (menuId === id) {\r\n        return;\r\n      }\r\n      const menuState = this.menuStateService.getMenuState(menuId, id);\r\n      // && id !== this.lastCloseId\r\n      if (!!id && !!menuState && menuState.length > 0) {\r\n        this.removeMenuState(id);\r\n        this.formReload();\r\n        this.lastCloseId = id;\r\n      }\r\n    }, params);\r\n  }\r\n\r\n  private removeMenuState(tabId: string) {\r\n    if (this['context']) {\r\n      this.menuStateService.removeMenu(tabId);\r\n    }\r\n  }\r\n  /**\r\n   * è·ååå§åè½id\r\n   * @param id id\r\n   */\r\n  private getOriginalId(id: string) {\r\n    if (!id) {\r\n      return id;\r\n    }\r\n    if (id.indexOf('_') !== -1) {\r\n      id = id.split('_')[0];\r\n    }\r\n    return id;\r\n  }\r\n  /**\r\n   * å·æ°ç»ä»¶æ°æ®\r\n   */\r\n  private formReload() {\r\n    try {\r\n      this['context']['frameContext']['appContext']['refresh']();\r\n    } catch{ }\r\n  }\r\n  /**\r\n   * æå¼åè½èå\r\n   * @param funcId èååç \r\n   * @param params è·¯ç±åæ°ï¼å½¢å¦ï¼ { key1: val1, key2: value2 }\r\n   */\r\n  public openMenu(funcId: string, params: any, reload?: boolean) {\r\n    if (typeof reload === 'undefined' || typeof reload !== 'boolean') {\r\n      reload = false;\r\n    }\r\n    const paramsMap = this.buildParamMap(params);\r\n    const parentMenuId = this.getFuncId() || this.getAppId();\r\n    this.menuStateService.addMenuState(parentMenuId, funcId);\r\n    paramsMap.set('WEB_FORM_ROUTER_PARENT_ID', parentMenuId);\r\n    this.frameworkService.openFuncWithParam(funcId, paramsMap, reload);\r\n  }\r\n\r\n  /**\r\n   * æå¼åºç¨\r\n   * @param appId åºç¨åç \r\n   * @param appEntrance åºç¨å¥å£\r\n   * @param params è·¯ç±åæ°ï¼å½¢å¦ï¼ { key1: val1, key2: value2 }\r\n   */\r\n  public openApp(appId: string, appEntrance: string, params: any, reload?: boolean) {\r\n    if (typeof reload === 'undefined' || typeof reload !== 'boolean') {\r\n      reload = false;\r\n    }\r\n    const paramMap = this.buildParamMap(params);\r\n    const parentMenuId = this.getAppId() || this.getFuncId();\r\n    this.menuStateService.addMenuState(parentMenuId, appId);\r\n    paramMap.set('WEB_FORM_ROUTER_PARENT_ID', parentMenuId);\r\n    if (!!this.appService) {\r\n      this.appService.openApp(appId, appEntrance, paramMap, reload);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æé åæ°\r\n   */\r\n  private buildParamMap(params: any): Map<string, string> {\r\n    if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {\r\n      params = {};\r\n    }\r\n    const paramMap = new Map<string, any>();\r\n    if (typeof params === 'object') {\r\n      params = JSON.stringify(params);\r\n    }\r\n    params = window['encodeURIComponent'](params);\r\n    paramMap.set('WEB_FORM_ROUTE_PARAMS', params);\r\n    return paramMap;\r\n  }\r\n\r\n  /**\r\n   * å³é­åè½èå\r\n   */\r\n  public closeMenu() {\r\n    const funcId: string | null = this.getFuncId();\r\n    const appId: string | null = this.getAppId();\r\n    const { isDialogComponent, rootComponent } = this.findDialog();\r\n    if (isDialogComponent) {\r\n      const modalRef = this.get(rootComponent, 'dialogRef');\r\n      modalRef['close']();\r\n      return;\r\n    }\r\n\r\n    if (funcId !== null && typeof funcId === 'string' && funcId.length > 0) {\r\n      this.closeFunc(funcId);\r\n    } else if (appId !== null && typeof appId === 'string' && appId.length > 0) {\r\n      const appEntrance = this.getAppEntrance();\r\n      this.closeApp(appId, appEntrance);\r\n    } else {\r\n      console.error(this.languageService['notSupportMenuType']);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æ¥æ¾å¼¹çªç»ä»¶\r\n   */\r\n  private findDialog() {\r\n    let frameContext = this.get(this, 'context.frameContext');\r\n    let isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);\r\n\r\n    let parentFrameContext = this.get(frameContext, 'parent');\r\n    while (parentFrameContext != null && !isDialogComponent) {\r\n      frameContext = this.get(frameContext, 'parent');\r\n      parentFrameContext = this.get(parentFrameContext, 'parent');\r\n      isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);\r\n    }\r\n    const rootComponent = this.get(frameContext, 'frameComponent');\r\n    return { isDialogComponent, rootComponent };\r\n\r\n  }\r\n\r\n  /**\r\n   * loadsh get\r\n   * @param object å¯¹è±¡\r\n   * @param path è·¯å¾\r\n   * @param defaultVal é»è®¤å¼\r\n   */\r\n  private get(object: any, path: Array<string> | string, defaultVal: any = null) {\r\n    const PATH = Array.isArray(path)\r\n      ? path\r\n      : path.split('.').filter(i => i.length);\r\n    if (!PATH.length) {\r\n      return object === undefined ? defaultVal : object;\r\n    }\r\n\r\n    if (object === null || object === undefined || typeof (object[PATH[0]]) === 'undefined') {\r\n      return defaultVal;\r\n    }\r\n\r\n    return this.get(object[PATH.shift()], PATH, defaultVal);\r\n  }\r\n\r\n  /**\r\n   * å³é­èå\r\n   * @param funcId èåid\r\n   */\r\n  public closeFunc(funcId?: string) {\r\n    if (!funcId) {\r\n      funcId = this.getFuncId();\r\n    }\r\n    if (!!this.frameworkService) {\r\n      this.frameworkService.closeFunc(funcId).subscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * å³é­app\r\n   * @param appId åºç¨id\r\n   */\r\n  public closeApp(appId?: string, appEntrance?: string) {\r\n    if (!appId) {\r\n      appId = this.getAppId();\r\n    }\r\n    if (typeof appEntrance === 'undefined') {\r\n      appEntrance = this.getAppEntrance();\r\n    }\r\n    if (!!this.appService) {\r\n      this.appService.closeApp(appId, appEntrance).subscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®åæ°\r\n   * @param params è·¯ç±åæ°\r\n   */\r\n  private setParams(url: string, params: string | { [key: string]: any; }) {\r\n    let paramsObj;\r\n    if (typeof params === 'string' && params !== '') {\r\n      paramsObj = JSON.parse(params);\r\n    } else {\r\n      paramsObj = params || {};\r\n    }\r\n\r\n    // è®¾ç½®è·¯ç±åæ°\r\n    this.routerParamService.setParams(url, paramsObj);\r\n  }\r\n\r\n  /**\r\n   * è·åfuncId\r\n   */\r\n  private getFuncId() {\r\n    const hash = window.location.hash;\r\n    if (!hash) {\r\n      return null;\r\n    }\r\n    const params = this.decodeURLParams(hash);\r\n    if (params && params.hasOwnProperty('funcId')) {\r\n      return params.funcId;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è·åappId\r\n   */\r\n  private getAppId() {\r\n    const hash = window.location.hash;\r\n    if (!hash) {\r\n      return null;\r\n    }\r\n    const params = this.decodeURLParams(hash);\r\n    if (params && params.hasOwnProperty('appId')) {\r\n      return params.appId;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private getParentMenuId() {\r\n    const hash = window.location.hash;\r\n    if (!hash) {\r\n      return null;\r\n    }\r\n    const params = this.decodeURLParams(hash);\r\n    if (params && params.hasOwnProperty('WEB_FORM_ROUTER_PARENT_ID')) {\r\n      return params.WEB_FORM_ROUTER_PARENT_ID;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * è·ååºç¨å¥å£\r\n   */\r\n  private getAppEntrance() {\r\n    const hash = window.location.hash;\r\n    if (!hash) {\r\n      return null;\r\n    }\r\n    const params = this.decodeURLParams(hash);\r\n    if (params && params.hasOwnProperty('appEntrance')) {\r\n      return params.appEntrance;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * è§£ç åæ°\r\n   * @param query search|hash\r\n   */\r\n  private decodeURLParams(query: string): { [propName: string]: any } {\r\n    if (typeof query === 'undefined') {\r\n      query = window.location.hash || window.location.search;\r\n    }\r\n    const hashes = query.slice(query.indexOf('?') + 1).split('&');\r\n    return hashes.reduce((params, hash) => {\r\n      const split = hash.indexOf('=');\r\n      const key = hash.slice(0, split);\r\n      const val = hash.slice(split + 1);\r\n      return Object.assign(params, { [key]: decodeURIComponent(val) });\r\n    }, {});\r\n  }\r\n  private getParams(queryString: string): { [propName: string]: any } {\r\n    if (!queryString) {\r\n      return {};\r\n    }\r\n    const hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');\r\n    return hashes.reduce((params, hash) => {\r\n      const split = hash.indexOf('=');\r\n      const key = hash.slice(0, split);\r\n      const val = hash.slice(split + 1);\r\n      return Object.assign(params, { [key]: decodeURIComponent(val) });\r\n    }, {});\r\n  }\r\n}\r\n\r\nexport { RouterService };\r\n","import { RequestInfo } from '@farris/bef';\r\n// tslint:disable: unified-signatures\r\nexport const TAB_EVENT = {\r\n    /**\r\n     * Tabå³é­å\r\n     */\r\n    onTabClosed: 'FuncClosed',\r\n    /**\r\n     * Tabå³é­å\r\n     */\r\n    onTabClosing: 'beforeFuncCloseEvent',\r\n    /**\r\n     * Tabåæ¢\r\n     */\r\n    onTabSwitched: 'funcSwitchEvent'\r\n};\r\n\r\nexport const TAB_QUERY_STRING = {\r\n    TabId: 'tabId',\r\n    AppType: 'appType',\r\n    AppId: 'appId',\r\n    AppEntrance: 'appEntrance',\r\n    FuncId: 'funcId'\r\n};\r\n\r\n/**\r\n * å¸¦RequestInfoçbodyå¯¹è±¡\r\n */\r\nexport interface BodyWithRequestInfo {\r\n    requestInfo: RequestInfo;\r\n    [key: string]: any;\r\n}\r\n\r\nexport const WEB_FORM_ROUTE_PARAMS_KEY = 'WEB_FORM_ROUTE_PARAMS';\r\nexport const enum DataType{\r\n  map = '[object Map]'\r\n}\r\nexport type KeyObject<T = any> = { key: T };","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * æ¥è¯¢åæ°æå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nexport class QuerystringService {\r\n    /**\r\n     * è§£ç åæ°\r\n     * @param queryString search|hash\r\n     */\r\n    public parse(queryString: string): { [propName: string]: any } {\r\n        if (!queryString) {\r\n            return {};\r\n        }\r\n        const hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');\r\n        return hashes.reduce((params, hash) => {\r\n            const split = hash.indexOf('=');\r\n            const key = hash.slice(0, split);\r\n            const val = hash.slice(split + 1);\r\n            return Object.assign(params, { [key]: decodeURIComponent(val) });\r\n        }, {});\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EMPTY, Observable, Subject } from 'rxjs';\r\nimport { UID } from '@farris/devkit';\r\nimport { switchMap } from 'rxjs/operators';\r\n/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-07-23 15:56:11 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-11-27 15:31:36\r\n */\r\n\r\n\r\n/**\r\n * RuntimeFrameworkService\r\n * @scope @FormModule\r\n */\r\n// tslint:disable: no-string-literal disable: max-line-length\r\n@Injectable()\r\nexport class RuntimeFrameworkService {\r\n  private rtfService: any;\r\n  constructor() {\r\n    this.rtfService = this.getService();\r\n  }\r\n  /**\r\n   * éåè·årtfæå¡\r\n   */\r\n  private getService() {\r\n    let env: Window = window;\r\n    while (!env['gspframeworkService'] && env !== window.top && this.isSameOrigin(env)) {\r\n      env = env.parent;\r\n    }\r\n    return env['gspframeworkService'] && env['gspframeworkService']['rtf'] || {};\r\n  }\r\n  // #region å¯¼èªæå¡\r\n  /**\r\n   * æå¼èåæåºç¨\r\n   * @param options options\r\n   */\r\n  openMenu(options: any) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['openMenu'] === 'function') {\r\n      this.rtfService.func.openMenu(options);\r\n    }\r\n  }\r\n  /**\r\n   * æå¼èåæåºç¨\r\n   * @param options options\r\n   */\r\n  openMenu$(options: any) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['openMenuByStream'] === 'function') {\r\n      return this.rtfService.func.openMenuByStream(options);\r\n    }\r\n    return EMPTY;\r\n  }\r\n  /**\r\n   * è·åå¯¼èªå®ä½æ°æ®\r\n   * @param tabId tabid\r\n   * @param callback callback\r\n   * @param once once\r\n   */\r\n  getEntityParam(tabId: string, callback: any, once: boolean = true) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['getEntityParam'] === 'function') {\r\n      this.rtfService.func.getEntityParam(tabId, callback, once);\r\n    }\r\n  }\r\n  /**\r\n   * å°è¯å³é­èåæåºç¨\r\n   * @param options optins\r\n   */\r\n  beforeCloseMenu(options: any) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['beforeClose'] === 'function') {\r\n      this.rtfService.func.beforeClose(options);\r\n    }\r\n  }\r\n  /**\r\n   * å³é­èå\r\n   * @param options options\r\n   */\r\n  closeMenu(options: any) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['close'] === 'function') {\r\n      this.rtfService.func.close(options);\r\n    }\r\n  }\r\n  /**\r\n   * è·åèåéæåæ°\r\n   * @param funcId èåid\r\n   * @param callback åè°\r\n   */\r\n  getMenuParams(funcId: string, callback: (params) => void) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['getMenuParams'] === 'function') {\r\n      this.rtfService.func.getMenuParams(funcId, callback);\r\n    }\r\n  }\r\n  /**\r\n   * æ·»å äºä»¶çå¬\r\n   */\r\n  addEventListener(token: string, handler: (value: any) => void, options: any) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('frmEvent') && typeof this.rtfService['frmEvent']['eventListener'] === 'function') {\r\n      this.rtfService.frmEvent.eventListener(token, handler, options);\r\n    }\r\n  }\r\n  /**\r\n   * è·åè¿è¡æ¡æ¶èååæ¢æ§å¶äºä»¶\r\n   * @returns Observable<any>\r\n   */\r\n  public getMenuSwitchControlEvent(): Observable<any> {\r\n    const subject = new Subject<any>();\r\n    const frmEvent = this.rtfService && this.rtfService.frmEvent || null;\r\n    if (frmEvent) {\r\n      const tabId = this.tabId;\r\n      const options = this.params;\r\n      window.setTimeout(() => {\r\n        frmEvent.eventListener(tabId, (response: { menuSwitchControl: { key: any, value: any }, [prop: string]: any }) => {\r\n          const menuSwitchControl = response && response.menuSwitchControl || null;\r\n          if (menuSwitchControl && menuSwitchControl.key === tabId) {\r\n            subject.next(menuSwitchControl.value);\r\n          } else {\r\n            subject.next(null);\r\n          }\r\n        }, options);\r\n      }, 0);\r\n    }\r\n    return subject;\r\n  }\r\n  //#endregion\r\n\r\n  // #region ééå±å±æ§\r\n  public get params() {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('session') && typeof this.rtfService['session']['getCommonVariable'] === 'function') {\r\n      return this.rtfService['session']['getCommonVariable']();\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * è·åtabId\r\n   */\r\n  public get tabId() {\r\n    return this.params && this.params['tabId'] || null;\r\n  }\r\n  /**\r\n   * è·åformToken\r\n   */\r\n  public get formToken() {\r\n    return this.params && this.params['formToken'] || null;\r\n  }\r\n  /**\r\n   * è·åfuncId\r\n   */\r\n  public get funcId() {\r\n    return this.params && this.params['funcId'] || null;\r\n  }\r\n  // #endregion\r\n\r\n  // #region äºä»¶éä¿¡\r\n  /**\r\n   * æ³¨åä¸»é¢\r\n   * @param code ä¸»é¢çæ è¯\r\n   * @param options tokençæè§å\r\n   * @param subject èªå®ä¹ä¸»é¢ï¼é»è®¤ä½¿ç¨Subject\r\n   * @returns string æ³¨åæååè¿åä¸»é¢çå¯ä¸æ è¯\r\n   */\r\n  public subjectRegister(code: string, options: any, subject?: Subject<any>): string {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['subjectRegister'] === 'function') {\r\n      return this.rtfService.broadcast.subjectRegister(code, options, subject);\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * ç§»é¤ä¸»é¢\r\n   * @param token ä¸»é¢å¯ä¸æ è¯\r\n   */\r\n  public subjectRemove(token: string) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['subjectRemove'] === 'function') {\r\n      this.rtfService.broadcast.subjectRemove(token);\r\n    }\r\n  }\r\n  /**\r\n   * ç»ä¸»é¢åéæ¶æ¯\r\n   * @param token ä¸»é¢æ è¯\r\n   * @param info æ¶æ¯\r\n   */\r\n  public subjectNotify(token: string, info: any) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['notify'] === 'function') {\r\n      this.rtfService.broadcast.notify(token, info);\r\n    }\r\n  }\r\n  /**\r\n   * æ³¨åä¸»é¢çå¬å¨\r\n   * @param token ä¸»é¢æ è¯\r\n   * @param handler ä¸»é¢å¤çå¨\r\n   * @param observerToken çå¬å¨id(å¯é)\r\n   * @returns çå¬å¨Id\r\n   * @description çå¬ä¸»é¢æ¶æ¯ï¼çå¬æåè¿åå½åçå¬èçå¯ä¸æ è¯\r\n   */\r\n  public subjectResponse(token: string, handler: (data: any) => void, observerToken?: string): string {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['response'] === 'function') {\r\n      let code = observerToken;\r\n      if (typeof observerToken === 'undefined' || !observerToken || observerToken.length < 1) {\r\n        code = UID.create();\r\n      }\r\n      this.rtfService.broadcast.response(token, code, handler);\r\n      return code;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * åæ¶å¯¹ä¸»é¢ççå¬\r\n   * @param token ä¸»é¢æ è¯\r\n   * @param observerToken çå¬å¨æ è¯\r\n   */\r\n  public responseUnSubscribe(token: string, observerToken: string) {\r\n    if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['responseUnSubscribe'] === 'function') {\r\n      this.rtfService.broadcast.responseUnSubscribe(token, observerToken);\r\n    }\r\n  }\r\n  // #endregion\r\n\r\n  // #region å·¥å·å½æ°\r\n  /**\r\n   * æ¯å¦åæº\r\n   * @param environment window\r\n   */\r\n  private isSameOrigin(environment: Window) {\r\n    const host = window.location.host;\r\n    try {\r\n      if (environment && environment.location && typeof environment.location.host !== 'undefined') {\r\n        return environment.location.host === host;\r\n      }\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n\r\n    return false;\r\n  }\r\n  // #endregion\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable, of, from, EMPTY } from 'rxjs';\r\nimport { every, concatMap, switchMap, take, tap } from 'rxjs/operators';\r\nimport { AppOptions } from '@gsp-sys/rtf-common';\r\nimport { RuntimeFrameworkService } from './rtf-service';\r\nimport { MenuStateService } from './menu-state.service';\r\nimport { TAB_EVENT } from './types';\r\nimport { QuerystringService } from './querystring';\r\nimport { FrameContext, UID } from '@farris/devkit';\r\n\r\n/**\r\n * å¯¼èªäºä»¶æå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nexport class NavigationEventService {\r\n  public frameContext: FrameContext;\r\n  /**\r\n   * å³é­åäºä»¶å¤çå¨\r\n   */\r\n  private onClosedListeners: Map<string, (options?: AppOptions) => void>;\r\n  /**\r\n   * å³é­åå¤çå¨\r\n   */\r\n  private onClosingListeners: Map<string, (options?: AppOptions) => Observable<boolean>>;\r\n  private onTabSwitchListeners: Map<string, (options?: AppOptions) => void>;\r\n  private params: { [propName: string]: any };\r\n\r\n  constructor(\r\n    private runtimeFrameworkService: RuntimeFrameworkService,\r\n    private menuStateService: MenuStateService,\r\n    private querystringService: QuerystringService\r\n  ) {\r\n    this.onClosedListeners = new Map<string, (options?: AppOptions) => void>();\r\n    this.onClosingListeners = new Map<string, (options?: AppOptions) => Observable<boolean>>();\r\n    this.onTabSwitchListeners = new Map<string, (options?: AppOptions) => void>();\r\n  }\r\n  private get querystrings() {\r\n    const params = this.querystringService.parse(window.location.hash);\r\n    // ä¿®æ­£formToken\r\n    if (params) {\r\n      params.formToken = this.runtimeFrameworkService.formToken;\r\n    }\r\n    return params;\r\n  }\r\n  /**\r\n   * æ³¨åäºä»¶\r\n   */\r\n  public registerEvent() {\r\n    const options = this.querystrings;\r\n    this.params = options;\r\n    // æ³¨åæ ç­¾é¡µåæ¢äºä»¶\r\n    this.runtimeFrameworkService.addEventListener(TAB_EVENT.onTabSwitched, (e) => this.handleTabSwitchEvent(e), options);\r\n    // æ³¨åæ ç­¾é¡µå³é­åäºä»¶\r\n    this.runtimeFrameworkService.addEventListener(TAB_EVENT.onTabClosed, (e) => this.handleTabClosedEvent(e), options);\r\n    // æ³¨åæ ç­¾é¡µå³é­åäºä»¶\r\n    this.runtimeFrameworkService.addEventListener(TAB_EVENT.onTabClosing, (e) => this.handleTabClosingEvent(e), options);\r\n  }\r\n  /**\r\n   * å¤çæ ç­¾é¡µåæ¢äºä»¶\r\n   */\r\n  private handleTabSwitchEvent(e: any) {\r\n    if (!e) {\r\n      return;\r\n    }\r\n    // éä¸­çè¡¨åä¸ºç³»ç»è¡¨åï¼åªè½è¿åidï¼æ²¡ætabId\r\n    const eventTabId = e.tabId || e.id || null;\r\n    if (!eventTabId) {\r\n      return;\r\n    }\r\n    const options = this.params; // this.querystrings;\r\n    const tabId = options.tabId || options.funcId || options.appId;\r\n    const menuState = this.menuStateService.getMenuState(eventTabId);\r\n    if (!!tabId && tabId === eventTabId && !!menuState && menuState.length > 0) {\r\n      this.formReload();\r\n    }\r\n    this.fireTabSwitchEvent(e);\r\n  }\r\n  /**\r\n   * è§¦åtabåæ¢äºä»¶\r\n   * @param e e\r\n   */\r\n  private fireTabSwitchEvent(e: any) {\r\n    if (!this.onTabSwitchListeners || this.onTabSwitchListeners.size < 1) {\r\n      return;\r\n    }\r\n    this.onTabSwitchListeners.forEach((handle, key, map) => {\r\n      if (typeof handle === 'function') {\r\n        handle(e);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * æ ç­¾é¡µå³é­åäºä»¶\r\n   */\r\n  private handleTabClosingEvent(e: any) {\r\n    if (!e) {\r\n      return;\r\n    }\r\n    // è¦å³é­çè¡¨åä¸ºç³»ç»è¡¨åï¼åªè½è¿åidï¼æ²¡ætabId\r\n    const eventTabId = e.tabId || e.id || null;\r\n    const options = this.params; // this.querystrings;\r\n    const tabId = options.tabId || options.funcId || options.appId;\r\n    if (!!eventTabId && !!tabId && tabId === eventTabId) {\r\n      this.fireTabClosingEvent(e).subscribe(result => {\r\n        if (result) {\r\n          setTimeout(() => this.removeMenuState(eventTabId), 500);\r\n          const formEventServices: Map<string, any> = window['formEventServices'];\r\n          if (formEventServices.has(eventTabId)) {\r\n            formEventServices.delete(eventTabId);\r\n            window['formEventServices'] = formEventServices;\r\n          }\r\n          if (!(e && e.hasOwnProperty('token'))) {\r\n            e = Object.assign({}, e, { token: options.formToken });\r\n          }\r\n          if (this.frameContext && this.frameContext.appContext) {\r\n            this.frameContext.appContext.dispose();\r\n          }\r\n          this.runtimeFrameworkService.closeMenu(e);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * è§¦åå³é­åäºä»¶\r\n   */\r\n  private fireTabClosingEvent(e: any): Observable<boolean> {\r\n    if (!this.onClosingListeners || this.onClosingListeners.size < 1) {\r\n      return of(true);\r\n    }\r\n    const listeners = this.onClosingListeners.values();\r\n    const result$ = from(listeners);\r\n    // ç¨æ·æç»\r\n    let userRejected = false;\r\n    return result$.pipe(\r\n      concatMap(handle => {\r\n        if (userRejected) {\r\n          return EMPTY;\r\n        }\r\n        return handle(e).pipe(\r\n          take(1),\r\n          tap(result => userRejected = !result),\r\n          switchMap(result => of(result))\r\n        );\r\n      }),\r\n      every(result => result)\r\n    );\r\n  }\r\n  /**\r\n   * æ ç­¾é¡µå³é­åäºä»¶\r\n   */\r\n  private handleTabClosedEvent(e: any) {\r\n    if (!e) {\r\n      return;\r\n    }\r\n    const options = this.params; // this.querystrings;\r\n    const tabId = options.tabId || options.funcId || options.appId;\r\n    const eventTabId = e.tabId || e.id || null;\r\n    if (tabId === eventTabId) {\r\n      return;\r\n    }\r\n    const menuState = this.menuStateService.getMenuState(tabId, eventTabId);\r\n    if (!!eventTabId && !!menuState && menuState.length > 0) {\r\n      this.removeMenuState(eventTabId);\r\n      this.formReload();\r\n    }\r\n    this.fireTabClosedEvent(e);\r\n  }\r\n  private removeMenuState(tabId: string) {\r\n    if (this['context']) {\r\n      this.menuStateService.removeMenu(tabId);\r\n    }\r\n  }\r\n  /**\r\n   * è§¦åå³é­åäºä»¶\r\n   * @param e event\r\n   */\r\n  private fireTabClosedEvent(e: any) {\r\n    if (!this.onClosedListeners || this.onClosedListeners.size < 1) {\r\n      return;\r\n    }\r\n    this.onClosedListeners.forEach((handle, key, map) => {\r\n      if (typeof handle === 'function') {\r\n        handle(e);\r\n      }\r\n    });\r\n  }\r\n  // #endregion\r\n  /**\r\n   * æ³¨åäºä»¶çå¬å¨\r\n   * @param eventType äºä»¶ç±»å onTabClosed\r\n   * @param handler å¤çå¨\r\n   */\r\n  public addEventListener(eventType: string, handler: (options: AppOptions) => any): string {\r\n    const key = UID.create();\r\n    if (eventType === TAB_EVENT.onTabClosed) {\r\n      this.onClosedListeners.set(key, handler);\r\n      return key;\r\n    } else if (eventType === TAB_EVENT.onTabClosing) {\r\n      this.onClosingListeners.set(key, handler);\r\n      return key;\r\n    } else if (eventType === TAB_EVENT.onTabSwitched) {\r\n      this.onTabSwitchListeners.set(key, handler);\r\n      return key;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * ç§»é¤äºä»¶çå¬å¨\r\n   * @param eventType äºä»¶ç±»å\r\n   * @param key äºä»¶æ è¯\r\n   */\r\n  public removeEventListener(eventType: string, key: string) {\r\n    if (eventType === TAB_EVENT.onTabClosed) {\r\n      return this.onClosedListeners.delete(key);\r\n    } else if (eventType === TAB_EVENT.onTabClosing) {\r\n      return this.onClosingListeners.delete(key);\r\n    }\r\n    return false;\r\n  }\r\n  /**\r\n   * æ¸ç©ºäºä»¶çå¬å¨\r\n   * @param eventType äºä»¶ç±»å\r\n   */\r\n  public clearEventListener(eventType: string): void {\r\n    if (eventType === TAB_EVENT.onTabClosed) {\r\n      this.onClosedListeners.clear();\r\n    } else if (eventType === TAB_EVENT.onTabClosing) {\r\n      this.onClosingListeners.clear();\r\n    }\r\n  }\r\n  /**\r\n   * å·æ°ç»ä»¶æ°æ®\r\n   */\r\n  private formReload() {\r\n    try {\r\n      // tslint:disable-next-line: no-string-literal\r\n      this['context']['frameContext']['appContext']['refresh']();\r\n    } catch { }\r\n  }\r\n}\r\n","import { Injectable, InjectionToken, Inject, Optional } from '@angular/core';\r\nexport const FARRIS_FORM_COMPONENTS = new InjectionToken<{[key: string]: any}>('è¡¨åå¼¹åºçªå£æéèç»ä»¶åè¡¨');\r\n\r\n/**\r\n * è¡¨åæå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nexport class FarrisFormService {\r\n\r\n    private controls: { [key: string]: any} = {};\r\n\r\n    constructor(@Optional()@Inject(FARRIS_FORM_COMPONENTS) initCtrls: any = {}) {\r\n      if (!initCtrls) {\r\n        initCtrls = {};\r\n      }\r\n      this.controls = { ...initCtrls };\r\n    }\r\n\r\n    append(key: string, cmpIns: any) {\r\n        this.controls[key] = cmpIns;\r\n    }\r\n\r\n    getControls(key: string) {\r\n        if (this.controls[key]) {\r\n            return this.controls[key];\r\n        } else {\r\n            console.warn(`æªæ¾å°Keyä¸º${key}çç»ä»¶ï¼`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n * @Author: aalizzwell\r\n * @Date: 2019-08-02 15:31:34\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2020-03-03 09:33:43\r\n */\r\nimport { Injectable, Optional, Injector, ComponentFactoryResolver, ReflectiveInjector } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { RuntimeFrameworkService } from './rtf-service';\r\nimport { AppOptions, AppType } from '@gsp-sys/rtf-common';\r\nimport { MenuStateService } from './menu-state.service';\r\nimport { NavigationEventService } from './navigation-event.service';\r\nimport { QuerystringService } from './querystring';\r\nimport { FrameContext, TranslateToken, Translate, FrameComponent } from '@farris/devkit';\r\nimport { FEPageModalService } from '@farris/extend-page-modal';\r\nimport lodash from 'lodash-es';\r\nimport { FarrisFormService } from './farris-form.service';\r\nimport { LanguageService } from './languag.service';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { EMPTY, Observable, of } from 'rxjs';\r\nimport { FormNotifyService } from './form-notify.service';\r\ndeclare const System: any;\r\n// tslint:disable: no-string-literal max-line-length\r\nconst APP_CONTEXT_MANAGER = 'DEVKIT_APP_CONTEXT_MANAGER';\r\n/**\r\n * å¯¼èªæå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nexport class NavigationService {\r\n  constructor(\r\n    private runtimeFrameworkService: RuntimeFrameworkService,\r\n    private menuStateService: MenuStateService,\r\n    private navigationEventService: NavigationEventService,\r\n    private querystringService: QuerystringService,\r\n    @Optional() private frameContext: FrameContext,\r\n    @Optional() private injector: Injector,\r\n    @Optional() private languageService: LanguageService\r\n    // @Optional() private pageModalService: FEPageModalService,\r\n    // @Optional() private farrisFormService: FarrisFormService,\r\n    // @Optional() private languageService: LanguageService\r\n  ) {\r\n    // appIdä¸åäºtabIdï¼æ¯æ¬¡è¡¨åå®ä¾åæ¶é½ä¼éæ°çæ\r\n    const appId = this.formAppContext && this.formAppContext.ApplicationId;\r\n    let tabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\r\n    // å·²ç»ç¼è¯çè¡¨åï¼ä½¿ç¨appIdè®°å½hash\r\n    if (appId) {\r\n      const appContextManager = window[APP_CONTEXT_MANAGER] || new Map<string, any>();\r\n      if (appContextManager && !appContextManager.has(appId)) {\r\n        appContextManager.set(appId, { hash: window.location.hash });\r\n        window[APP_CONTEXT_MANAGER] = appContextManager;\r\n      }\r\n    }\r\n    if (tabId) {\r\n      const formEventServices: Map<string, any> = window['formEventServices'] || new Map<string, any>();\r\n      // tabIdãappIdé½å­å¨æ¶ï¼ä½¿ç¨appIdæ¿æ¢tabId\r\n      if (appId) {\r\n        tabId = appId;\r\n      }\r\n      if (formEventServices && formEventServices.has(tabId)) {\r\n        this.navigationEventService = formEventServices.get(tabId);\r\n      } else {\r\n        this.navigationEventService.registerEvent();\r\n        formEventServices.set(tabId, this.navigationEventService);\r\n        this.navigationEventService.frameContext = this.frameContext;\r\n        window['formEventServices'] = formEventServices;\r\n      }\r\n      this.registerDestroyEvent(tabId);\r\n    }\r\n    if (!languageService) {\r\n      this.languageService = new LanguageService();\r\n    }\r\n  }\r\n  public set context(context) {\r\n    this.navigationEventService['context'] = context;\r\n    this['commandContext'] = context;\r\n  }\r\n  /**\r\n   * è·åæ´ä¸ªè¡¨åçappcontextï¼é¤moduleä¸çappcontextï¼\r\n   */\r\n  private get formAppContext() {\r\n    if (this.frameContext) {\r\n      let appContext = this.frameContext.appContext;\r\n      // tslint:disable-next-line: max-line-length\r\n      while (appContext && appContext.parent && appContext.parent.injector && appContext.parent.injector.get(FrameContext, null) !== null) {\r\n        appContext = appContext.parent;\r\n      }\r\n      return appContext;\r\n    }\r\n    return null;\r\n  }\r\n  private get querystrings() {\r\n    let hash = window.location.hash;\r\n    const appId = this.formAppContext && this.formAppContext.ApplicationId;\r\n    if (appId) {\r\n      const appContextManager = window[APP_CONTEXT_MANAGER];\r\n      const appContext = appContextManager && appContextManager.get(appId);\r\n      hash = appContext && appContext.hash || hash;\r\n    }\r\n    const params = this.querystringService.parse(hash);\r\n    if (params) {\r\n      params.formToken = this.runtimeFrameworkService.formToken;\r\n    }\r\n    return params;\r\n  }\r\n  /**\r\n   * æç¤ºæå¡\r\n   */\r\n  private get formNotifyService() {\r\n    return this.injector && this.injector.get<FormNotifyService>(FormNotifyService, null);\r\n  }\r\n  /**\r\n   * æ³¨åéæ¯äºä»¶\r\n   * @param tabId \r\n   */\r\n  private registerDestroyEvent(tabId: string) {\r\n    if (this.frameContext && this.frameContext.destorySignal) {\r\n      this.frameContext.destorySignal.subscribe(() => {\r\n        this.navigationEventService = null;\r\n      });\r\n    }\r\n    if (this.frameContext && this.frameContext.appContext && this.frameContext.appContext.destorySignal) {\r\n      this.frameContext.appContext.destorySignal.subscribe(() => {\r\n        const formEventServices = window['formEventServices'] as Map<string, any>;\r\n        if (formEventServices) {\r\n          formEventServices.delete(tabId);\r\n        }\r\n        const appContextManager = window[APP_CONTEXT_MANAGER] as Map<string, any>;\r\n        if (appContextManager) {\r\n          appContextManager.delete(tabId);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  // #region æ¥å£\r\n\r\n  /**\r\n   * æå¼èå\r\n   * @param tabId æ ¹æ®TabIdå³å®æå¼æ°æ ç­¾é¡µæå®ä½ä¹åæå¼çæ ç­¾é¡µ\r\n   * @param funcId èåId\r\n   * @param params åæ°\r\n   * @param reload æ¯å¦éæ°å·æ°\r\n   * @param enableRefresh å¯ç¨æ°æ®å·æ°\r\n   * @param tabName tabæ é¢\r\n   * @param destructuring æ¯å¦è§£æåæ°\r\n   */\r\n  public openMenu(tabId: string, funcId: string, params: any, reload?: boolean, enableRefresh?: any, tabName?: string, destructuring?: any) {\r\n    if (!funcId && this.formNotifyService) {\r\n      this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    if (tabName) {\r\n      tabName = this.translate(tabName);\r\n    }\r\n\r\n    let queryStringParams = this.buildParamMap(params);\r\n    destructuring = this.convertToBoolean(destructuring, false);\r\n    if (destructuring === true) {\r\n      queryStringParams = this.buildParam(params);\r\n    }\r\n    const paramsMap = this.buildParamMap(params);\r\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\r\n    const options: AppOptions = {\r\n      tabId,\r\n      funcId,\r\n      appType: AppType.Menu,\r\n      queryStringParams: queryStringParams,\r\n      entityParams: paramsMap,\r\n      appId: undefined,\r\n      appEntrance: undefined,\r\n      isReload: reload,\r\n      tabName: tabName || null\r\n    };\r\n    // å¯ç¨æ°æ®å·æ°åæ°ä¸ºtrueæèæ²¡æå®ä¹ï¼åæå·æ°å¤ç\r\n    // æ²¡æä¼ éè¯¥åæ°æè¯¥åæ°ä¸ºç©ºï¼åè®¤ä¸ºæç§ä¹åçé»è¾å¤çï¼é»è®¤å·æ°\r\n    // null false \"false\" \"true\" undefined\r\n    enableRefresh = this.convertToBoolean(enableRefresh, true);\r\n    if (enableRefresh === true) {\r\n      this.menuStateService.addMenuState(currentTabId, tabId);\r\n    }\r\n    this.runtimeFrameworkService.openMenu(options);\r\n  }\r\n  /**\r\n   * æå¼èåï¼æµï¼\r\n   * @param tabId æ ¹æ®TabIdå³å®æå¼æ°æ ç­¾é¡µæå®ä½ä¹åæå¼çæ ç­¾é¡µ\r\n   * @param funcId èåId\r\n   * @param params åæ°\r\n   * @param reload æ¯å¦éæ°å·æ°\r\n   * @param enableRefresh å¯ç¨æ°æ®å·æ°\r\n   * @param destructuring è§£æåæ°\r\n   */\r\n  public openMenu$(tabId: string, funcId: string, params: any, reload?: boolean, enableRefresh?: any, tabName?: string, destructuring?: any) {\r\n    if (!funcId && this.formNotifyService) {\r\n      this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    if (tabName) {\r\n      tabName = this.translate(tabName);\r\n    }\r\n    let queryStringParams = this.buildParamMap(params);\r\n    destructuring = this.convertToBoolean(destructuring, false);\r\n    if (destructuring === true) {\r\n      queryStringParams = this.buildParam(params);\r\n    }\r\n    const paramsMap = this.buildParamMap(params);\r\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\r\n    const options: AppOptions = {\r\n      tabId,\r\n      funcId,\r\n      appType: AppType.Menu,\r\n      queryStringParams: queryStringParams,\r\n      entityParams: paramsMap,\r\n      appId: undefined,\r\n      appEntrance: undefined,\r\n      isReload: reload,\r\n      tabName: tabName || null\r\n    };\r\n    // å¯ç¨æ°æ®å·æ°åæ°ä¸ºtrueæèæ²¡æå®ä¹ï¼åæå·æ°å¤ç\r\n    enableRefresh = this.convertToBoolean(enableRefresh, true);\r\n    if (enableRefresh === true) {\r\n      this.menuStateService.addMenuState(currentTabId, tabId);\r\n    }\r\n    return this.runtimeFrameworkService.openMenu$(options);\r\n  }\r\n  /**\r\n   * æå¼èå(å¸¦ç»´åº¦)\r\n   * @param tabId æ ¹æ®TabIdå³å®æå¼æ°æ ç­¾é¡µæå®ä½ä¹åæå¼çæ ç­¾é¡µ\r\n   * @param funcId èåId\r\n   * @param params åæ°\r\n   * @param reload æ¯å¦éæ°å·æ°\r\n   * @param enableRefresh å¯ç¨æ°æ®å·æ°\r\n   * @param dim1 dim1\r\n   * @param dim2 dim2\r\n   * @param destructuring è§£æåæ°\r\n   */\r\n  public openMenuWithDimension(tabId: string, funcId: string, params: any, enableRefresh?: any, dim1?: any, dim2?: any, tabName?: string, metadataId?: string, destructuring?: any) {\r\n    if (!funcId && this.formNotifyService) {\r\n      this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    if (tabName) {\r\n      tabName = this.translate(tabName);\r\n    }\r\n    if (metadataId === undefined || metadataId === null) {\r\n      metadataId = '';\r\n    }\r\n    let queryStringParams = this.buildParamMap(params);\r\n    destructuring = this.convertToBoolean(destructuring, false);\r\n    if (destructuring === true) {\r\n      queryStringParams = this.buildParam(params);\r\n    }\r\n\r\n    const paramsMap = this.buildParamMap(params);\r\n    queryStringParams.set('dim1', dim1 ? dim1 : 'public');\r\n    queryStringParams.set('dim2', dim2 ? dim2 : 'public');\r\n    queryStringParams.set('metadataId', metadataId);\r\n    queryStringParams.set('isRtc', '1');\r\n    queryStringParams.set('isRootMetadata', 'true');\r\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\r\n    const options: AppOptions = {\r\n      tabId,\r\n      funcId,\r\n      appType: AppType.Menu,\r\n      queryStringParams: queryStringParams,\r\n      entityParams: paramsMap,\r\n      appId: undefined,\r\n      appEntrance: undefined,\r\n      isReload: false,\r\n      tabName: tabName || null\r\n    };\r\n    // å¯ç¨æ°æ®å·æ°åæ°ä¸ºtrueæèæ²¡æå®ä¹ï¼åæå·æ°å¤ç\r\n    // æ²¡æä¼ éè¯¥åæ°æè¯¥åæ°ä¸ºç©ºï¼åè®¤ä¸ºæç§ä¹åçé»è¾å¤çï¼é»è®¤å·æ°\r\n    // null false \"false\" \"true\" undefined\r\n    enableRefresh = this.convertToBoolean(enableRefresh, true);\r\n    if (enableRefresh === true) {\r\n      this.menuStateService.addMenuState(currentTabId, tabId);\r\n    }\r\n    this.runtimeFrameworkService.openMenu(options);\r\n  }\r\n  /**\r\n   * æå¼åºç¨\r\n   * @param tabId tabId æ ¹æ®TabIdå³å®æå¼æ°æ ç­¾é¡µæå®ä½ä¹åæå¼çæ ç­¾é¡µ\r\n   * @param appId åºç¨Id\r\n   * @param appEntrance åºç¨å¥å£\r\n   * @param params åæ°\r\n   * @param reload æ¯å¦éæ°å·æ°\r\n   * @param tabName tabæ é¢\r\n   * @param enableRefresh å¯ç¨æ°æ®å·æ°\r\n   * @param destructuring è§£æåæ°\r\n   */\r\n\r\n  public openApp(tabId: string, appId: string, appEntrance: string, params: any, reload?: boolean, tabName?: string, enableRefresh?: any, destructuring?: any) {\r\n    if (!appId && this.formNotifyService) {\r\n      this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    if (tabName) {\r\n      tabName = this.translate(tabName);\r\n    }\r\n    let queryStringParams = this.buildParamMap(params);\r\n    destructuring = this.convertToBoolean(destructuring, false);\r\n    if (destructuring === true) {\r\n      queryStringParams = this.buildParam(params);\r\n    }\r\n    const paramsMap = this.buildParamMap(params);\r\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\r\n    const options: AppOptions = {\r\n      tabId,\r\n      appId,\r\n      appEntrance,\r\n      funcId: undefined,\r\n      appType: AppType.App,\r\n      queryStringParams: queryStringParams,\r\n      entityParams: paramsMap,\r\n      isReload: reload,\r\n      tabName: tabName || null\r\n    };\r\n    enableRefresh = this.convertToBoolean(enableRefresh, true);\r\n    if (enableRefresh === true) {\r\n      this.menuStateService.addMenuState(currentTabId, tabId);\r\n    }\r\n    this.runtimeFrameworkService.openMenu(options);\r\n  }\r\n  /**\r\n   * æå¼åºç¨(æµå¼)\r\n   * @param tabId tabId æ ¹æ®TabIdå³å®æå¼æ°æ ç­¾é¡µæå®ä½ä¹åæå¼çæ ç­¾é¡µ\r\n   * @param appId åºç¨Id\r\n   * @param appEntrance åºç¨å¥å£\r\n   * @param params åæ°\r\n   * @param reload æ¯å¦éæ°å·æ°\r\n   * @param tabName tabæ é¢\r\n   * @param enableRefresh å¯ç¨æ°æ®å·æ°\r\n   * @param destructuring è§£æåæ°\r\n   */\r\n  public openApp$(tabId: string, appId: string, appEntrance: string, params: any, reload?: boolean, tabName?: string, enableRefresh?: any, destructuring?: any) {\r\n    if (!appId && this.formNotifyService) {\r\n      this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    if (tabName) {\r\n      tabName = this.translate(tabName);\r\n    }\r\n    let queryStringParams = this.buildParamMap(params);\r\n    destructuring = this.convertToBoolean(destructuring, false);\r\n    if (destructuring === true) {\r\n      queryStringParams = this.buildParam(params);\r\n    }\r\n    const paramsMap = this.buildParamMap(params);\r\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\r\n    const options: AppOptions = {\r\n      tabId,\r\n      appId,\r\n      appEntrance,\r\n      funcId: undefined,\r\n      appType: AppType.App,\r\n      queryStringParams: queryStringParams,\r\n      entityParams: paramsMap,\r\n      isReload: reload,\r\n      tabName: tabName || null\r\n    };\r\n    enableRefresh = this.convertToBoolean(enableRefresh, true);\r\n    if (enableRefresh === true) {\r\n      this.menuStateService.addMenuState(currentTabId, tabId);\r\n    }\r\n    return this.runtimeFrameworkService.openMenu$(options);\r\n  }\r\n  /**\r\n   * å³é­\r\n   * @param onCloseing å³é­åäºä»¶å¤çå¨\r\n   */\r\n  public close() {\r\n    const options = this.querystrings;\r\n    const { isDialogComponent: isInDialog, rootComponent } = this.findDialog();\r\n    if (isInDialog) {\r\n      const modalRef = this.get(rootComponent, 'dialogRef');\r\n      modalRef['close']();\r\n      return;\r\n    }\r\n    options.token = options.formToken;\r\n    this.runtimeFrameworkService.beforeCloseMenu(options);\r\n  }\r\n  /**\r\n   * å¼ºå¶å³é­\r\n   */\r\n  public destory() {\r\n    const options = this.querystrings;\r\n    options.token = options.formToken;\r\n    this.runtimeFrameworkService.closeMenu(options);\r\n  }\r\n  /**\r\n   * \r\n   * @param params params\r\n   * @deprecated å¾åºå¼ï¼ä¸buildParamMapéå¤\r\n   */\r\n  private parseParams(params: any) {\r\n    if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {\r\n      params = {};\r\n    }\r\n    const paramMap = new Map<string, any>();\r\n    if (typeof params === 'object') {\r\n      params = JSON.stringify(params);\r\n    }\r\n    params = window['encodeURIComponent'](params);\r\n    paramMap.set('WEB_FORM_ROUTE_PARAMS', params);\r\n    return paramMap;\r\n  }\r\n  /**\r\n   * æ³¨åäºä»¶çå¬å¨\r\n   * @param eventType äºä»¶ç±»å onTabClosed\r\n   * @param handler å¤çå¨\r\n   * @returns string è¿åäºä»¶æ è¯\r\n   */\r\n  public addEventListener(eventType: string, handler: (options: AppOptions) => any): string {\r\n    return this.navigationEventService.addEventListener(eventType, handler);\r\n  }\r\n  /**\r\n   * ç§»é¤äºä»¶çå¬å¨\r\n   * @param eventType äºä»¶ç±»å onTabClosed | onTabCloseing\r\n   * @param key äºä»¶æ è¯\r\n   */\r\n  public removeEventListener(eventType: string, key: string): boolean {\r\n    return this.navigationEventService.removeEventListener(eventType, key);\r\n  }\r\n  /**\r\n   * æ¸ç©ºäºä»¶çå¬å¨\r\n   * @param eventType äºä»¶ç±»å\r\n   */\r\n  public clearEventListener(eventType: string): void {\r\n    this.navigationEventService.clearEventListener(eventType);\r\n  }\r\n  /**\r\n   * ä»¥å¼¹æ¡ãä¾§è¾¹æ ææ°æ ç­¾é¡µæ¹å¼æå¼è¡¨å\r\n   * @param mode æå¼æ¹å¼ï¼æ¯æ`modal`å¼¹çªã`sidebar`ä¾§è¾¹æ ã`tab`æ°æ ç­¾é¡µ\r\n   * @param modalId å¼¹çªidï¼å¦æmode=`modal`ä¸æ²¡æurlï¼\r\n   * @param configs å¼¹çªéç½®\r\n   * @param url è¿ç«¯è¡¨åurl\r\n   * @param tabId æ ç­¾é¡µidï¼modal=tabæ¶å¿å¡«\r\n   * @param tabType æ ç­¾é¡µç±»åï¼`menu` æ`app`\r\n   * @param funcOrAppId èåæåºç¨id\r\n   * @param appEntrance åºç¨å¥å£\r\n   * @param params åæ°\r\n   * @param tabName æ°æ ç­¾é¡µåç§°\r\n   * @param enableRefresh å¯ç¨å¯å¨å·æ°\r\n   * @param destructuring æ¯å¦è§£æ\r\n   */\r\n  public open(mode: 'modal' | 'sidebar' | 'tab', modalId?: string, url?: string, configs?: any, tabId?: string, tabType?: 'menu' | 'app', funcOrAppId?: string, appEntrance?: string, params?: any, tabName?: string, enableRefresh?: any, destructuring?: any) {\r\n    const pageModalService = this.injector.get<FEPageModalService>(FEPageModalService, null);\r\n    if (!pageModalService) {\r\n      throw new Error('get FEPageModalService failed.');\r\n    }\r\n    // æ ¡éªåæ°æ¯å¦åæ³\r\n    if (!mode) {\r\n      throw new Error('[NavigationService]->open,modeåæ°ä¸è½ä¸ºç©ºï¼');\r\n    }\r\n    if (mode === 'modal' || mode === 'sidebar') {\r\n      if (!modalId && !url) {\r\n        throw new Error('å¼¹çªåä¾§è¾¹æ æ¨¡å¼æ¶å¼¹çªå®¹å¨idåè¡¨åè·¯å¾ä¸è½åæ¶ä¸ºç©ºï¼');\r\n      }\r\n      if (modalId && url) {\r\n        throw new Error('å¼¹çªåä¾§è¾¹æ æ¨¡å¼æ¶å¼¹çªå®¹å¨idåè¡¨åè·¯å¾ä¸è½åæ¶å­å¨ï¼');\r\n      }\r\n      const uiStateConfig = this.getObjectTypeConfig(params);\r\n      const modalConfig = this.buildConfigs(configs);\r\n      if (mode === 'sidebar') {\r\n        modalConfig.dialogType = mode;\r\n      }\r\n      let pageModalRef = null;\r\n      if (modalId) {\r\n        const farrisFormService = this.injector.get<FarrisFormService>(FarrisFormService, null);\r\n        if (!farrisFormService) {\r\n          return;\r\n        }\r\n        let componentType = farrisFormService.getControls(modalId);\r\n        const componentRef = this.createComponentRef(componentType, uiStateConfig);\r\n        pageModalRef = pageModalService.show(componentRef, modalConfig);\r\n      } else if (url) {\r\n        pageModalRef = pageModalService.showByUrl(url, modalConfig);\r\n      }\r\n      if (pageModalRef && !!pageModalRef.content) {\r\n        pageModalRef.content.isDialogRootComponent = true;\r\n        pageModalRef.content.dialogRef = pageModalRef;\r\n        const header = pageModalRef.dialog && pageModalRef.dialog.instance && pageModalRef.dialog.instance.el && pageModalRef.dialog.instance.el.nativeElement && pageModalRef.dialog.instance.el.nativeElement.querySelector(\".f-page-header\");\r\n        if (header && pageModalRef.dialog.instance.draggbar) {\r\n          pageModalRef.dialog.instance.draggbar.handle = header;\r\n          header.style.cursor = 'move';\r\n        }\r\n      }\r\n    } else if (mode === 'tab') {\r\n      if (!tabId || !tabType || !funcOrAppId) {\r\n        if (this.formNotifyService) {\r\n          this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });\r\n        }\r\n        throw new Error('æ°æ ç­¾æ¨¡å¼æ¶æ ç­¾é¡µidãæ ç­¾ç±»åãèåæåºç¨idåä¸è½ä¸ºç©ºï¼');\r\n      }\r\n      if (tabType === 'app' && !appEntrance) {\r\n        throw new Error('ä»¥åºç¨æ¹å¼æå¼æ¶å¥å£åºç¨ä¸è½ä¸ºç©ºï¼');\r\n      }\r\n      if (tabType == 'app') {\r\n        this.openApp(tabId, funcOrAppId, appEntrance, params, false, tabName, enableRefresh, destructuring);\r\n      } else if (tabType === 'menu') {\r\n        this.openMenu(tabId, funcOrAppId, params, false, enableRefresh, tabName, destructuring);\r\n      }\r\n    } else {\r\n      throw new Error('ä¸æ¯æçæ¨¡å¼ï¼');\r\n    }\r\n    // this.pageModalService.\r\n  }\r\n  /**\r\n   * in app navigate\r\n   * @param commands commands\r\n   */\r\n  // public navigate(commands: any[]);\r\n  /**\r\n   * in app navigate\r\n   * @param commands commands\r\n   * @param options options\r\n   * @description options:{ relativeTo: this.activatedRoute, queryParams:{a:1,b:2},etc:...}\r\n   */\r\n  public navigate(commands: any[], options?: any): Promise<boolean> {\r\n    const router = this.injector && this.injector.get<Router>(Router, null);\r\n    const activatedRoute = this.injector && this.injector.get<ActivatedRoute>(ActivatedRoute, null);\r\n    const queryParams = lodash.merge({}, this.querystrings, options && options.queryParams || {});\r\n    if (options && options.hasOwnProperty('queryParams')) {\r\n      delete options.queryParams;\r\n    }\r\n    const extras = lodash.merge({ skipLocationChange: false, relativeTo: activatedRoute, queryParams }, options || {});\r\n    if (router) {\r\n      return router.navigate(commands, extras);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  // #endregion\r\n\r\n  // #region ç§ææ¹æ³\r\n\r\n  /**\r\n   * å°è£è·¯ç±åæ°\r\n   * @param params åæ°\r\n   * @param options éç½®åæ°\r\n   */\r\n  private buildParamMap(params: any, options?: any): Map<string, string> {\r\n    if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {\r\n      params = {};\r\n    }\r\n    const paramMap = new Map<string, any>();\r\n    if (options && Object.keys(options).length > 0) {\r\n      if (typeof params !== 'object') {\r\n        params = JSON.parse(params);\r\n      }\r\n      params = lodash.merge(params, options);\r\n    }\r\n    if (typeof params === 'object') {\r\n      params = JSON.stringify(params);\r\n    }\r\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\r\n    params = window['encodeURIComponent'](params);\r\n    paramMap.set('WEB_FORM_ROUTE_PARAMS', params);\r\n    paramMap.set('WEB_FORM_ROUTER_PARENT_ID', currentTabId);\r\n    return paramMap;\r\n  }\r\n  private buildParam(params, options?: any): Map<string, string> {\r\n    if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {\r\n      params = {};\r\n    }\r\n    const paramMap = new Map<string, any>();\r\n    if (options && Object.keys(options).length > 0) {\r\n      if (typeof params !== 'object') {\r\n        params = JSON.parse(params);\r\n      }\r\n      params = lodash.merge(params, options);\r\n    }\r\n    if (typeof params !== 'object') {\r\n      params = JSON.parse(params);\r\n    }\r\n    Object.keys(params).forEach(key => {\r\n      paramMap.set(key, params[key]);\r\n    });\r\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\r\n    params = window['encodeURIComponent'](params);\r\n    paramMap.set('WEB_FORM_ROUTE_PARAMS', params);\r\n    paramMap.set('WEB_FORM_ROUTER_PARENT_ID', currentTabId);\r\n    return paramMap;\r\n  }\r\n  /**\r\n   * æ¥æ¾å¼¹çªç»ä»¶\r\n   */\r\n  private findDialog() {\r\n    let frameContext = this.get(this, 'commandContext.frameContext');\r\n    let isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);\r\n\r\n    let parentFrameContext = this.get(frameContext, 'parent');\r\n    while (parentFrameContext != null && !isDialogComponent) {\r\n      frameContext = this.get(frameContext, 'parent');\r\n      parentFrameContext = this.get(parentFrameContext, 'parent');\r\n      isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);\r\n    }\r\n    const rootComponent = this.get(frameContext, 'frameComponent');\r\n    return { isDialogComponent, rootComponent };\r\n  }\r\n\r\n  /**\r\n   * loadsh get\r\n   * @param object å¯¹è±¡\r\n   * @param path è·¯å¾\r\n   * @param defaultVal é»è®¤å¼\r\n   */\r\n  private get(object: any, path: Array<string> | string, defaultVal: any = null) {\r\n    const PATH = Array.isArray(path)\r\n      ? path\r\n      : path.split('.').filter(i => i.length);\r\n    if (!PATH.length) {\r\n      return object === undefined ? defaultVal : object;\r\n    }\r\n\r\n    if (object === null || object === undefined || typeof (object[PATH[0]]) === 'undefined') {\r\n      return defaultVal;\r\n    }\r\n\r\n    return this.get(object[PATH.shift()], PATH, defaultVal);\r\n  }\r\n  private convertToBoolean(value: any, defaultVal: boolean = false) {\r\n    if (typeof value === 'undefined' || value === null) {\r\n      value = defaultVal;\r\n    }\r\n    if (typeof value === 'string') {\r\n      value = value || String(defaultVal);\r\n      value = value === 'true' ? true : false;\r\n    }\r\n    return value;\r\n  }\r\n  /**\r\n   * ç¿»è¯èµæºé¡¹\r\n   * @param key èµæºé¡¹key\r\n   */\r\n  private translate(key: string) {\r\n    const translateService = this.injector && this.injector.get<Translate>(TranslateToken, null) || null;\r\n    if (translateService && key && key.startsWith('{{') && key.endsWith('}}')) {\r\n      key = key.replace('{{', '').replace('}}', '').trim();\r\n      return translateService.transform(key, null);\r\n    }\r\n    return key;\r\n  }\r\n  // #endregion\r\n\r\n  //#region å¼¹çªç¸å³æ¹æ³\r\n  private buildConfigs(config: any): { [prop: string]: any } {\r\n    let languageService = this.injector.get<LanguageService>(LanguageService, null);\r\n    if (!languageService) {\r\n      languageService = LanguageService.getInstance();\r\n    }\r\n\r\n    const defaultConfigs: any = {\r\n      title: languageService && languageService.defaultDialogTitle || '',\r\n      width: 800,\r\n      height: 500,\r\n      showButtons: false\r\n    };\r\n    const objectTypeConfig = this.getObjectTypeConfig(config);\r\n    const configs = Object.assign(defaultConfigs, objectTypeConfig);\r\n    const onClosingHandler = configs.beforeClose;\r\n    const refresh = configs['refresh'] || {};\r\n    const refreshCommandName = refresh && refresh.commandName || null;\r\n    const refreshFrameId = refresh && refresh.frameId || null;\r\n    // tslint:disable: no-string-literal\r\n    const cancelChanges = configs['cancelChanges'] || false;\r\n    configs.beforeClose = (ref) => {\r\n      if (!!onClosingHandler && typeof onClosingHandler === 'function') {\r\n        return onClosingHandler(ref).pipe(\r\n          switchMap(result => {\r\n            if (result) {\r\n              if (cancelChanges) {\r\n                return this.cancelChanges(ref).pipe(\r\n                  switchMap(() => this.refreshForm(refreshCommandName, refreshFrameId))\r\n                );\r\n              }\r\n            }\r\n            return of(result);\r\n          })\r\n        );\r\n      } else {\r\n        if (cancelChanges) {\r\n          return this.cancelChanges(ref).pipe(\r\n            switchMap(() => this.refreshForm(refreshCommandName, refreshFrameId))\r\n          );\r\n        } else {\r\n          return of(true);\r\n        }\r\n      }\r\n\r\n    };\r\n    return configs;\r\n  }\r\n  private getObjectTypeConfig(config: any) {\r\n    let objectTypeConfig: any\r\n    if (typeof config === 'undefined') {\r\n      config = {};\r\n    }\r\n    if (typeof config === 'string') {\r\n      if (config.length) {\r\n        try {\r\n          objectTypeConfig = JSON.parse(config);\r\n        } catch {\r\n          throw new Error(config + 'ä¸æ¯åæ³çjsonå­ç¬¦ä¸²');\r\n        }\r\n      } else {\r\n        objectTypeConfig = {};\r\n      }\r\n    } else if (typeof config === 'object') {\r\n      objectTypeConfig = Object.assign({}, config);\r\n    } else {\r\n      throw new Error('å¡«åå¯¹è±¡æ ¼å¼æjsonå­ç¬¦ä¸²');\r\n    }\r\n    return objectTypeConfig;\r\n  }\r\n  /**\r\n   * åæ¶æå¡å¨åæ´é\r\n   */\r\n  private cancelChanges(ref: any): Observable<boolean> {\r\n    if (ref && ref.modalRef && ref.modalRef.content) {\r\n      const component: FrameComponent = ref.modalRef.content as FrameComponent;\r\n      if (component && component.context) {\r\n        const repository = component.context.repository || null;\r\n        if (repository) {\r\n          return repository.cancelChanges().pipe(switchMap(() => of(true)));\r\n        }\r\n      }\r\n    }\r\n    return of(true);\r\n  }\r\n  private refreshForm(refreshCommandName: string, refreshFrameId: string): Observable<any> {\r\n    if (refreshCommandName && refreshFrameId) {\r\n      const frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(refreshFrameId);\r\n      if (frameContext) {\r\n        const viewModel = frameContext.viewModel;\r\n        return viewModel[refreshCommandName]().pipe(\r\n          map(() => true)\r\n        );\r\n      }\r\n    }\r\n    return of(true);\r\n  }\r\n  private createComponentRef(componentType: any, uiStateObject: any) {\r\n    let componentRef: any;\r\n    const frameContext = this.getFrameContext();\r\n    const componentFactoryResolver = this.getComponentFactoryResolver();\r\n    if (frameContext && componentFactoryResolver) {\r\n      const contentCmptFactory = componentFactoryResolver.resolveComponentFactory(componentType);\r\n      const modalContentInjector = ReflectiveInjector.resolveAndCreate([], frameContext.injector);\r\n      componentRef = contentCmptFactory.create(modalContentInjector);\r\n      if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {\r\n        if (typeof uiStateObject === 'object' && Object.keys(uiStateObject).length) {\r\n          Object.keys(uiStateObject).forEach(item => {\r\n            componentRef.instance.viewModel.uiState.setPropertyValue(item, uiStateObject[item]);\r\n          });\r\n        }\r\n        // éå isDialogåæ°\r\n        componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);\r\n      }\r\n    }\r\n    return componentRef;\r\n  }\r\n  /**\r\n   * å¼å®¹æ§å¼¹çªï¼è·åframeContext\r\n   */\r\n  private getFrameContext() {\r\n    if (this.frameContext) {\r\n      return this.frameContext\r\n    }\r\n    if (this['context'] && this['context']['frameContext']) {\r\n      return this['context']['frameContext'];\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * å¼å®¹æ§å¼¹çªï¼è·åComponentFactoryResolver\r\n   */\r\n  private getComponentFactoryResolver() {\r\n    const frameContext = this.getFrameContext();\r\n    let componentFactoryResolver: any;\r\n    if (frameContext) {\r\n      componentFactoryResolver = frameContext.injector.get(ComponentFactoryResolver);\r\n    }\r\n    return componentFactoryResolver;\r\n  }\r\n  //#endregion\r\n}\r\n","import { FrameContext } from '@farris/devkit';\r\nimport { AppParamUtil } from './app-param.util';\r\n\r\nconst IS_ADD = 'IS_ADD';\r\nconst LAST_MODIFIED_ID = 'LAST_MODIFIED_ID';\r\n\r\n/**\r\n * è¡¨åç¶æå·¥å·ç±»\r\n * @internal\r\n */\r\nclass EditStateUtil {\r\n\r\n    /**\r\n     * è·åå½åè¡id\r\n     */\r\n    public static getLastModifiedId(frameContext: FrameContext): string {\r\n        // const lastModifiedId = AppParamUtil.get(frameContext, LAST_MODIFIED_ID);\r\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\r\n        let lastModifiedId = null;\r\n        if (virtualRootFrameContext) {\r\n            lastModifiedId = virtualRootFrameContext.getParam(LAST_MODIFIED_ID);\r\n            return lastModifiedId ? lastModifiedId : null;\r\n        }\r\n        return lastModifiedId;\r\n    }\r\n\r\n    /**\r\n     * è®¾ç½®æåä¿®æ¹çid\r\n     */\r\n    public static setLastModifiedId(frameContext: FrameContext, lastModifiedId: string): void {\r\n        // AppParamUtil.set(frameContext, LAST_MODIFIED_ID, lastModifiedId);\r\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\r\n        if (virtualRootFrameContext) {\r\n            virtualRootFrameContext.setParam(LAST_MODIFIED_ID, lastModifiedId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * è·åæ°å¢ç¶æ\r\n     */\r\n    public static getAddState(frameContext: FrameContext, ): boolean {\r\n        // return AppParamUtil.get(frameContext, IS_ADD);\r\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\r\n        if (virtualRootFrameContext) {\r\n            return virtualRootFrameContext.getParam(IS_ADD);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * è®¾ç½®æ°å¢ç¶æ\r\n     */\r\n    public static setAddState(frameContext: FrameContext, lastModifiedId: string): void {\r\n        // AppParamUtil.set(frameContext, IS_ADD, true);\r\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\r\n        if (virtualRootFrameContext) {\r\n            virtualRootFrameContext.setParam(IS_ADD, true);\r\n        }\r\n        this.setLastModifiedId(frameContext, lastModifiedId);\r\n    }\r\n\r\n    /**\r\n     * åæ¶æ°å¢ç¶æ\r\n     */\r\n    public static cancelAddState(frameContext: FrameContext) {\r\n        // AppParamUtil.set(frameContext, IS_ADD, false);\r\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\r\n        if (virtualRootFrameContext) {\r\n            virtualRootFrameContext.setParam(IS_ADD, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * è®¾ç½®ç¼è¾ç¶æ\r\n     */\r\n    public static setEditState(frameContext: FrameContext, id: string) {\r\n        // AppParamUtil.set(frameContext, IS_ADD, false);\r\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\r\n        if (virtualRootFrameContext) {\r\n            virtualRootFrameContext.setParam(IS_ADD, false);\r\n        }\r\n        this.setLastModifiedId(frameContext, id);\r\n    }\r\n}\r\n\r\nexport { EditStateUtil };\r\n","import { FormNotifyService } from './form-notify.service';\r\n\r\nclass FormNotifyStrategyService {\r\n  /**\r\n   * æ¶æ¯æç¤º\r\n   * @param formNotifyService formNotifyService\r\n   * @param content content\r\n   */\r\n  public static info(formNotifyService: FormNotifyService, content: string) {\r\n    const search = window.location.hash;\r\n    const { odocDisableNotification = '' } = FormNotifyStrategyService.querystring(search);\r\n    if (odocDisableNotification && odocDisableNotification.toLowerCase() === 'true') {\r\n      return;\r\n    }\r\n    formNotifyService.info(content, { hideTitle: true });\r\n  }\r\n  /**\r\n   * æåæç¤º\r\n   * @param formNotifyService formNotifyService\r\n   * @param content content\r\n   */\r\n  public static success(formNotifyService: FormNotifyService, content: string) {\r\n    const search = window.location.hash;\r\n    const { odocDisableNotification = '' } = FormNotifyStrategyService.querystring(search);\r\n    if (odocDisableNotification && odocDisableNotification.toLowerCase() === 'true') {\r\n      return;\r\n    }\r\n    formNotifyService.success(content, { hideTitle: true });\r\n  }\r\n  private static querystring(querystring: string): any {\r\n    const urlSearchParams = new URLSearchParams(querystring);\r\n    const result = {};\r\n    urlSearchParams.forEach((value: string, key: string) => {\r\n      result[key] = value;\r\n    });\r\n    return result;\r\n  }\r\n}\r\nexport { FormNotifyStrategyService };\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, take } from 'rxjs/operators';\r\nimport { AppContext, ViewModel, CommandContext, Entity, FrameContext } from '@farris/devkit';\r\nimport { BefRepository } from '@farris/bef';\r\n\r\n/**\r\n * å½ä»¤æå¡\r\n * @scope FrameConmponent\r\n */\r\n@Injectable()\r\nclass CommandService {\r\n\r\n  /**\r\n   * åé¨cotnext\r\n   */\r\n  private innerContext: CommandContext;\r\n\r\n  /**\r\n   * contextåå¼æ¹æ³\r\n   */\r\n  public get context(): CommandContext {\r\n    return this.innerContext;\r\n  }\r\n\r\n  /**\r\n   * contextè®¾å¼æ¹æ³\r\n   */\r\n  public set context(context: CommandContext) {\r\n    this.innerContext = context;\r\n  }\r\n\r\n  constructor(\r\n    private viewModel: ViewModel,\r\n    private appContext: AppContext\r\n  ) { }\r\n\r\n  /**\r\n   * æ§è¡å½ä»¤\r\n   * @param commandName å½ä»¤åç§°\r\n   * @param frameId æ¡æ¶ID\r\n   */\r\n  public execute(commandName: string, frameId?: string): Observable<any> {\r\n    if (!commandName || commandName === '' || commandName === 'undefined') {\r\n      return;\r\n    }\r\n    let viewModel = this.viewModel;\r\n    if (frameId) {\r\n      const targetContext = this.appContext.frameContextManager.getFrameContextById(frameId);\r\n      viewModel = targetContext.viewModel;\r\n    }\r\n    return viewModel[commandName]();\r\n  }\r\n\r\n  /**\r\n   * ç­å¾BeSessionåå»º\r\n   * @returns ææ°åå»ºåºæ¥çBeSession\r\n   */\r\n  public waitForBeSession(): Observable<string> {\r\n    const frameContext = this.context.frameContext;\r\n    const befRepository = frameContext.repository as BefRepository<Entity>;\r\n    const sessionService = befRepository.restService.sessionService;\r\n    return sessionService.getBeSessionId().pipe(\r\n      filter((beSessionId: string) => {\r\n        return beSessionId !== null;\r\n      }),\r\n      take(1)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æåæä¸ªä»»å¡çæ§è¡ç»æ\r\n   * @param taskName ä»»å¡åç§°\r\n   * @reutrn è¿åtaskNameå¯¹åºä»»å¡çæ§è¡ç»æ\r\n   */\r\n  public extractResult(taskName: string) {\r\n    const results = this.context.results;\r\n    return results[taskName];\r\n  }\r\n  /**\r\n   * æåå½åç»ä»¶çè¡åæ¢äºä»¶æåº\r\n   */\r\n  public suspendFrameContextRowSelectedEvent(frameId?: string) {\r\n    let frameContext: FrameContext = this.viewModel.frameContext;\r\n    if (frameId) {\r\n      frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);\r\n    }\r\n    if (frameContext) {\r\n      frameContext.bindingData.rowSelectedEventSuspend = true;\r\n    }\r\n\r\n  }\r\n  public resumeFrameContextRowSelectedEvent(frameId?: string) {\r\n    let frameContext: FrameContext = this.viewModel.frameContext;\r\n    if (frameId) {\r\n      frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);\r\n    }\r\n    if (frameContext) {\r\n      frameContext.bindingData.rowSelectedEventSuspend = false;\r\n    }\r\n  }\r\n}\r\n\r\nexport { CommandService };\r\n","// tslint:disable: max-line-length\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { Repository, Entity, FrameContext, PARENT_CLASS, ChangeType, ValidationResult, ValidationError, ValidateRule, ViewModel, DataTypeInfo, DataPropGroup, DataPropInfo, BindingList, ComponentType } from '@farris/devkit';\r\nimport { tap, switchMap } from 'rxjs/operators';\r\nimport { EMPTY, Observable, Subject } from 'rxjs';\r\nimport { zip } from 'rxjs/observable/zip';\r\nimport { empty } from 'rxjs/observable/empty';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { VerifyDetailService } from '@farris/ui-verify-detail';\r\nimport { FormNotifyService } from './form-notify.service';\r\nimport { LanguageService } from './languag.service';\r\n\r\n/**\r\n * è¡¨åéªè¯æå¡\r\n * @scope FrameComponent\r\n */\r\n\r\n@Injectable()\r\nclass ValidationService {\r\n\r\n  private validationResults = new Subject<any>();\r\n  private validationAllResult = new Subject<any>();\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private repository: Repository<any>,\r\n    private frameContext: FrameContext,\r\n    @Optional() private notifyService: FormNotifyService,\r\n    @Optional() private languageService: LanguageService\r\n  ) {\r\n    if (!this.languageService) {\r\n      this.languageService = new LanguageService();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * éªè¯è¡¨ååçææè¡¨å\r\n   */\r\n  public validate() {\r\n    this.repository.getList().subscribe(\r\n      (result: Entity[]) => {\r\n        for (const entity of result) {\r\n          entity.validate().subscribe((result: ValidationResult) => {\r\n            if (!result.isValid) {\r\n              alert(result.message);\r\n              this.validationResults.next(result);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    );\r\n    return this.validationResults;\r\n  }\r\n  /**\r\n   * æ ¡éªå½åè¡\r\n   */\r\n  public validateCurrentRow(): Observable<any> {\r\n    const entityTypeInfo = this.repository.entityTypeInfo;\r\n    // ç»åè¡¨ååªæ ¡éªå½åæé®æå¨çè¡¨å\r\n    const primaryValue = this.frameContext.bindingData.list.currentId;\r\n    if (!primaryValue) {\r\n      return of(true);\r\n    }\r\n    // é¦åæ ¡éªå®ä½ä¸è½ä¸ºç©ºè§å\r\n    const entity = this.repository.entityCollection.getEntityById(primaryValue);\r\n    if (!entity) {\r\n      return of(true);\r\n    }\r\n    const isEntityValid = this.validateEntityAllowEmptyRule(entityTypeInfo);\r\n    if (!isEntityValid) {\r\n      return EMPTY;\r\n    }\r\n    const entities: Entity[] = [entity];\r\n    const namespace = this.frameContext.namespace;\r\n    let frameContexts = [];\r\n    // ä¿®å¤ä½¿ç¨ç¸åbeåå»ºçvoçç»åè¡¨åæ ¡éªæ¶å¤ä¸ªè¡¨åæ ¡éªè§åè¢«åå¹¶çé®é¢\r\n    // TODO: ç®åæªèèç»åè¡¨åç»ä¸ä¿å­çåºæ¯ï¼åç»­æ¯æç»åè¡¨åç»ä¸ä¿å­æ¶åä¿®æ¹\r\n    if (namespace !== null) {\r\n      // å­å¨å½åç©ºé´ï¼è¯´æè¡¨åè¾æ°ï¼å¯ä»¥ä¾èµè¯¥ç¹æ§\r\n      frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);\r\n    } else {\r\n      // è¡¨åè¾èï¼è·åææçä¸ä¸æï¼å¨æ ¡éªé¶æ®µè¿æ»¤è§å\r\n      frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();\r\n    }\r\n\r\n    const isModal = this.isInDialog();\r\n    const hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();\r\n    let rootViewModel = this.frameContext.root.viewModel;\r\n    if (isModal && hasOwnVerifyDetailService) {\r\n      rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;\r\n    }\r\n\r\n    let toValidate = false;\r\n    const formErrors = [];\r\n    frameContexts.forEach((frameContext: FrameContext) => {\r\n      if (frameContext.form && frameContext.form.enableValidate) {\r\n        toValidate = true;\r\n      }\r\n    });\r\n    if (!toValidate || entities.length < 1) {\r\n      return of(true);\r\n    }\r\n    rootViewModel.verifyInformations = [];\r\n    let formValid = true;\r\n    let entityValid = true;\r\n    const formValidationRules = new Map<string, ValidateRule[]>();\r\n    frameContexts.forEach((formContext: FrameContext) => {\r\n      const bindingObject = formContext.bindingData.getObject();\r\n      // éç¥ææbindingData,\r\n      bindingObject && bindingObject.setShowValidationMsg(true);\r\n      if (formContext.form && formContext.form.enableValidate) {\r\n        // è·åå½åè¡¨åä¸çææéªè¯è§å\r\n        const currentFormValidationRules = formContext.form.getValidationRules();\r\n        currentFormValidationRules.forEach((rules, path) => {\r\n          if (formValidationRules.has(path)) {\r\n            rules.forEach(rule => formValidationRules.get(path).push(rule));\r\n          } else {\r\n            formValidationRules.set(path, [...rules]);\r\n          }\r\n        });\r\n        formContext.form.setShowValidationMsg(true);\r\n        // éä¸ªè°ç¨è¡¨åçéªè¯ï¼éªè¯åç«¯è¡¨åè§å\r\n        if (!formContext.form.isFormValid()) {\r\n          formErrors.push(formContext.form);\r\n          formValid = false;\r\n        }\r\n      }\r\n    });\r\n\r\n    // éªè¯ææå®ä½\r\n    const observableList = entities.map((entity: Entity) => {\r\n      const index = this.frameContext.bindingData.list.getIndexById(entity.primaryValue);\r\n      return entity.validate(undefined, undefined, formValidationRules, null, this.frameContext);\r\n    });\r\n    const result$ = zip(...observableList).pipe(\r\n      tap((resultList) => {\r\n        frameContexts.forEach((formContext: FrameContext) => {\r\n          if (!formContext.form.enableValidate) {\r\n            return;\r\n          }\r\n          const handleErrors = (errors: ValidationError[]) => {\r\n            errors.forEach((validationError: ValidationError) => {\r\n              if (validationError.children && validationError.children.length) {\r\n                handleErrors(validationError.children);\r\n              }\r\n              const errMsgObj = {};\r\n              let id = '';\r\n              const findId = (target: any) => {\r\n                if (target && target.data && target.data.id) {\r\n                  id = target.data.id;\r\n                  return;\r\n                } else if (target[PARENT_CLASS]) {\r\n                  findId(target[PARENT_CLASS]);\r\n                }\r\n              };\r\n              findId(validationError.target);\r\n\r\n              // å®ä½éªè¯åºéï¼éè¦å°éè¯¯å±ç¤ºå°çé¢ä¸\r\n              // å®ä½ä¸ä¸å®æ¯å½åè¡\r\n              let parentPathData = {\r\n                path: [],\r\n                isUdt: false,\r\n                isGrid: false\r\n              };\r\n              if (validationError.target) {\r\n                parentPathData = validationError.target.getPaths();\r\n              }\r\n              const bindingPath = '/' + parentPathData.path.join('/');\r\n              if (validationError.constraints) {\r\n                Object.keys(validationError.constraints).forEach(key => {\r\n                  errMsgObj[key] = {\r\n                    name: validationError.constraints[key]\r\n                  };\r\n                  // if (this.frameContext.viewModel.bindingPath === bindingPath) {\r\n                  //   rootViewModel['verifyInformations'].push({\r\n                  //     id: id,\r\n                  //     title: key,\r\n                  //     msg: validationError.constraints[key],\r\n                  //     type: 'warn'\r\n                  //   })\r\n                  // }\r\n                });\r\n              }\r\n              const paths = parentPathData.path.concat(validationError.property);\r\n\r\n              //if (this.frameContext.viewModel.bindingPath === bindingPath) {\r\n              // å°éè¯¯ä¿¡æ¯æ´æ°å°formControlä¸\r\n              formContext.bindingData.changes.next({\r\n                type: ChangeType.UpdateErrors,\r\n                id,\r\n                path: paths,\r\n                isUdt: parentPathData.isUdt,\r\n                isGrid: parentPathData.isGrid,\r\n                value: validationError.value,\r\n                errors: errMsgObj\r\n              });\r\n              //}\r\n            });\r\n          };\r\n          // å±å¼éªè¯ç»æ\r\n          const isValidList = resultList.map((result: ValidationResult) => result.isValid);\r\n          // ä¿å­ååè°ç¨å®ä½ä¸çéªè¯è§åï¼å¨é¨éè¿ä¹åæä¿å­\r\n          // å®ä½éªè¯éè¿\r\n          if (isValidList.filter(x => x).length === observableList.length) {\r\n            // å°éè¯¯ä¿¡æ¯æ´æ°å°formControlä¸\r\n            formContext.bindingData.changes.next({\r\n              type: ChangeType.UpdateErrors,\r\n              path: []\r\n            });\r\n            // éªè¯æååéèè¾å¥æ¶çéªè¯\r\n            if (formValid) {\r\n              const bindingObject = formContext.bindingData.getObject();\r\n              bindingObject && bindingObject.setShowValidationMsg(false);\r\n              const form = formContext.form;\r\n              if (form) {\r\n                form.setShowValidationMsg(false);\r\n              }\r\n            }\r\n          } else {\r\n            // å®ä½éªè¯æéè¯¯\r\n            entityValid = false;\r\n            resultList.forEach((result: ValidationResult) => {\r\n              if (result.isValid) {\r\n                // æ¸é¤éªè¯éè¿çéè¯¯\r\n                formContext.bindingData.changes.next({\r\n                  type: ChangeType.UpdateErrors,\r\n                  path: []\r\n                });\r\n              } else {\r\n                handleErrors(result.errors);\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }),\r\n      switchMap((resultList) => {\r\n        let isValidated = true;\r\n        const errors = [];\r\n        resultList.forEach((result: ValidationResult) => {\r\n          if (!result.isValid) {\r\n            isValidated = false;\r\n          }\r\n          errors.push(...result.errors);\r\n        });\r\n        if (errors.length > 0) {\r\n          this.collectValidationErrors(rootViewModel, errors, this.frameContext.namespace);\r\n        }\r\n        // rootViewModel.verifycationChanged.next(rootViewModel.verifyInformations);\r\n        let verifyInformations = rootViewModel.verifyInformations;\r\n        if (isModal && hasOwnVerifyDetailService) {\r\n          verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace === namespace);\r\n        }\r\n        rootViewModel.verifycationChanged.next(verifyInformations);\r\n        if (isValidated && !formValid) {\r\n          // å®ä½æ ¡éªéè¿ä½è¡¨åæ ¡éªä¸éè¿ï¼æ­¤æ¶å®ä½åè¡¨åå­å¨æ ¡éªè§åä¸ä¸è´çæåµ\r\n          console.warn('å®ä½åæ§ä»¶æ ¡éªè§åä¸ä¸è´ï¼ä¼å¯¼è´å½ä»¤æ§è¡ä¸­æ­ï¼');\r\n        }\r\n        if (isValidated && formValid) {\r\n          return of(true);\r\n        } else {\r\n          return empty();\r\n        }\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * è°ç¨è¡¨ååå®ä½ä¸çéªè¯è§å, éè¿åè°ç¨åè°cb\r\n   */\r\n  validateAll(): Observable<any> {\r\n    const entityTypeInfo = this.repository.entityTypeInfo;\r\n    // ç»åè¡¨ååªæ ¡éªå½åæé®æå¨çè¡¨å\r\n    const entities: Entity[] = this.repository.entityCollection.getAllEntities();\r\n    const namespace = this.frameContext.namespace;\r\n    let frameContexts = [];\r\n    if (namespace !== null) {\r\n      // å­å¨å½åç©ºé´ï¼è¯´æè¡¨åè¾æ°ï¼å¯ä»¥ä¾èµè¯¥ç¹æ§\r\n      frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);\r\n    } else {\r\n      // è¡¨åè¾èï¼è·åææçä¸ä¸æï¼å¨æ ¡éªé¶æ®µè¿æ»¤è§å\r\n      frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();\r\n    }\r\n    const isEntityValid = this.validateEntityAllowEmptyRule(entityTypeInfo);\r\n    if (!isEntityValid) {\r\n      return EMPTY;\r\n    }\r\n    let toValidate = false;\r\n    const formErrors = [];\r\n    frameContexts.forEach((frameContext: FrameContext) => {\r\n      if (frameContext.form && frameContext.form.enableValidate) {\r\n        toValidate = true;\r\n      }\r\n    });\r\n    if (!toValidate || entities.length < 1) {\r\n      return of(true);\r\n    }\r\n    const isModal = this.isInDialog();\r\n    const hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();\r\n    let rootViewModel = this.frameContext.root.viewModel;\r\n    if (isModal && hasOwnVerifyDetailService) {\r\n      rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;\r\n    }\r\n\r\n    let formValid = true;\r\n    let entityValid = true;\r\n    const formValidationRules = new Map<string, ValidateRule[]>();\r\n    frameContexts.forEach((formContext: FrameContext) => {\r\n      const bindingObject = formContext.bindingData.getObject();\r\n      // éç¥ææbindingData,\r\n      bindingObject && bindingObject.setShowValidationMsg(true);\r\n      if (formContext.form && formContext.form.enableValidate) {\r\n        // è·åå½åè¡¨åä¸çææéªè¯è§å\r\n        const currentFormValidationRules = formContext.form.getValidationRules();\r\n        currentFormValidationRules.forEach((rules, path) => {\r\n          if (formValidationRules.has(path)) {\r\n            rules.forEach(rule => formValidationRules.get(path).push(rule));\r\n          } else {\r\n            formValidationRules.set(path, [...rules]);\r\n          }\r\n        });\r\n        formContext.form.setShowValidationMsg(true);\r\n        // éä¸ªè°ç¨è¡¨åçéªè¯ï¼éªè¯åç«¯è¡¨åè§å\r\n        if (!formContext.form.isFormValid()) {\r\n          formErrors.push(formContext.form);\r\n          formValid = false;\r\n        }\r\n      }\r\n    });\r\n    // è§¦åææå®ä½çvalidateäºä»¶\r\n    const isMultiEntityValiate = entities.length > 0;\r\n\r\n    // éªè¯ææå®ä½\r\n    const observableList = entities.map((entity: Entity, index: number) =>\r\n      entity.validate(undefined, undefined, formValidationRules, isMultiEntityValiate ? index : null, this.frameContext));\r\n    const result$ = zip(...observableList).pipe(\r\n      tap((resultList) => {\r\n        frameContexts.forEach((formContext: FrameContext) => {\r\n          if (!formContext.form.enableValidate) {\r\n            return;\r\n          }\r\n          const handleErrors = (errors: ValidationError[]) => {\r\n            errors.forEach((validationError: ValidationError) => {\r\n              if (validationError.children && validationError.children.length) {\r\n                handleErrors(validationError.children);\r\n              }\r\n              const errMsgObj = {};\r\n              let id = '';\r\n              const findId = (target: any) => {\r\n                if (target && target.data && target.data.id) {\r\n                  id = target.data.id;\r\n                  return;\r\n                } else if (target[PARENT_CLASS]) {\r\n                  findId(target[PARENT_CLASS]);\r\n                }\r\n              };\r\n              findId(validationError.target);\r\n\r\n              // å®ä½éªè¯åºéï¼éè¦å°éè¯¯å±ç¤ºå°çé¢ä¸\r\n              // å®ä½ä¸ä¸å®æ¯å½åè¡\r\n              let parentPathData = {\r\n                path: [],\r\n                isUdt: false,\r\n                isGrid: false\r\n              };\r\n              if (validationError.target) {\r\n                parentPathData = validationError.target.getPaths();\r\n              }\r\n              const bindingPath = '/' + parentPathData.path.join('/');\r\n              if (validationError.constraints) {\r\n                Object.keys(validationError.constraints).forEach(key => {\r\n                  errMsgObj[key] = {\r\n                    name: validationError.constraints[key]\r\n                  };\r\n                  // if (this.frameContext.viewModel.bindingPath === bindingPath) {\r\n                  //   rootViewModel['verifyInformations'].push({\r\n                  //     id: id,\r\n                  //     title: key,\r\n                  //     msg: validationError.constraints[key],\r\n                  //     type: 'warn'\r\n                  //   })\r\n                  // }\r\n                });\r\n              }\r\n              const paths = parentPathData.path.concat(validationError.property);\r\n\r\n              //if (this.frameContext.viewModel.bindingPath === bindingPath) {\r\n              // å°éè¯¯ä¿¡æ¯æ´æ°å°formControlä¸\r\n              formContext.bindingData.changes.next({\r\n                type: ChangeType.UpdateErrors,\r\n                id,\r\n                path: paths,\r\n                isUdt: parentPathData.isUdt,\r\n                isGrid: parentPathData.isGrid,\r\n                value: validationError.value,\r\n                errors: errMsgObj\r\n              });\r\n              //}\r\n            });\r\n          };\r\n          // å±å¼éªè¯ç»æ\r\n          const isValidList = resultList.map((result: ValidationResult) => result.isValid);\r\n          // ä¿å­ååè°ç¨å®ä½ä¸çéªè¯è§åï¼å¨é¨éè¿ä¹åæä¿å­\r\n          // å®ä½éªè¯éè¿\r\n          if (isValidList.filter(x => x).length === observableList.length) {\r\n            // å°éè¯¯ä¿¡æ¯æ´æ°å°formControlä¸\r\n            formContext.bindingData.changes.next({\r\n              type: ChangeType.UpdateErrors,\r\n              path: []\r\n            });\r\n            // éªè¯æååéèè¾å¥æ¶çéªè¯\r\n            if (formValid) {\r\n              const bindingObject = formContext.bindingData.getObject();\r\n              bindingObject && bindingObject.setShowValidationMsg(false);\r\n              const form = formContext.form;\r\n              if (form) {\r\n                form.setShowValidationMsg(false);\r\n              }\r\n            }\r\n          } else {\r\n            // å®ä½éªè¯æéè¯¯\r\n            entityValid = false;\r\n            resultList.forEach((result: ValidationResult) => {\r\n              if (result.isValid) {\r\n                // æ¸é¤éªè¯éè¿çéè¯¯\r\n                formContext.bindingData.changes.next({\r\n                  type: ChangeType.UpdateErrors,\r\n                  path: []\r\n                });\r\n              } else {\r\n                handleErrors(result.errors);\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }),\r\n      switchMap((resultList) => {\r\n        let isValidated = true;\r\n        const errors = [];\r\n        resultList.forEach((result: ValidationResult) => {\r\n          if (!result.isValid) {\r\n            isValidated = false;\r\n          }\r\n          errors.push(...result.errors);\r\n        });\r\n        if (errors.length > 0) {\r\n          this.collectValidationErrors(rootViewModel, errors, this.frameContext.namespace);\r\n        }\r\n        let verifyInformations = rootViewModel.verifyInformations;\r\n        if (isModal && hasOwnVerifyDetailService) {\r\n          verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace === namespace);\r\n        }\r\n        // å ä¸ºæ ¡éªç´¯å çç¼æï¼å¯¼è´ä¹åçæ ¡éªä¿¡æ¯ä¸ç´å­å¨ï¼åªè½éè¿æ ¡éªç»ææ¥ç¡®å®æ¯å¦è¿æéè¯¯ä¿¡æ¯\r\n        if (isValidated && formValid) {\r\n          verifyInformations = rootViewModel.verifyInformations = [];\r\n        }\r\n        rootViewModel.verifycationChanged.next(verifyInformations);\r\n        if (isValidated && formValid) {\r\n          return of(true);\r\n        } else {\r\n          return empty();\r\n        }\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * æ ¡éªå®ä½æ¯å¦æ»¡è¶³ä¸è½ä¸ºç©ºçè§å\r\n   * @param entity ä¸»å®ä½\r\n   */\r\n  private validateEntityAllowEmptyRule(entityTypeInfo: DataTypeInfo) {\r\n    // ç¡®è®¤å®ä½åä¸ªå±çº§ä¸­æ¯å¦å­å¨ä¸è½ä¸ºç©ºçè§å\r\n    const paths = this.getNotAllowEmptyBindingPaths(entityTypeInfo);\r\n    if (!paths || paths.length < 1) {\r\n      return true;\r\n    }\r\n    // æ¾å°ææä¸åæ³çbindingPaths\r\n    const invalidPaths = paths.filter((path: string) => {\r\n      const bindingPaths = path.split('/').filter(p => p);\r\n      const bindingList = this.frameContext.bindingData.getValue(bindingPaths) as BindingList;\r\n      if (!bindingList || bindingList.length < 1) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    // æå®ä½å¿å¡«ï¼ä½å®ä½æ°æ®ä¸ºç©º\r\n    if (invalidPaths.length > 0) {\r\n      const tableNames = [];\r\n      invalidPaths.forEach((path: string) => {\r\n        //const frameContexts = this.getFrameContextByBindingPath(path.split('/'));\r\n        //const frameComponents = frameContexts.map(frameContext => frameContext.frameComponent);\r\n        // æ¾å°ææå®¹å¨ç±»ç»ä»¶\r\n        //const containerComponents = frameComponents.filter(frameComponent => [ComponentType.farrisDataGridComponent, ComponentType.farrisTreeTalbeComponent, ComponentType.kendoGridComponent, ComponentType.primengTreeComponent].includes(frameComponent.componentType));\r\n        //if (!(!containerComponents || containerComponents.length < 1)) {\r\n        const viewModelName = this.getViewModelNameByBindingPaths(path.split('/')) || `ç»å®è·¯å¾${path}`;\r\n        tableNames.push(viewModelName);\r\n        //}\r\n      });\r\n      if (this.notifyService) {\r\n        this.notifyService.error(`${tableNames.join('ï¼')} ${this.languageService.tableCanNotEmpty}`, { hideTitle: true });\r\n      }\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  /**\r\n   * \r\n   * @param bindingPaths pathä¸è½ä¸ºç©ºæ/ï¼ä¸æ¯æä¸»è¡¨\r\n   */\r\n  private getViewModelNameByBindingPaths(bindingPaths: string[]) {\r\n    const namespace = this.frameContext.namespace;\r\n    let frameContexts: FrameContext[] = null;\r\n    if (namespace !== null) {\r\n      // å­å¨å½åç©ºé´ï¼è¯´æè¡¨åè¾æ°ï¼å¯ä»¥ä¾èµè¯¥ç¹æ§\r\n      frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);\r\n    } else {\r\n      // è¡¨åè¾èï¼è·åææçä¸ä¸æï¼å¨æ ¡éªé¶æ®µè¿æ»¤è§å\r\n      frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();\r\n    }\r\n    const bindingPath = bindingPaths.filter(p => p).join('/');\r\n    const frameContext = frameContexts.find((frameContext: FrameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPath);\r\n    const viewModelName = frameContext && frameContext.form && frameContext.form.formGroupName || '';\r\n    return viewModelName;\r\n  }\r\n  /**\r\n   * éåè·åææä¸è½ä¸ºç©ºçå®ä½çç»å®è·¯å¾\r\n   * @param entityTypeInfo \r\n   * @param results \r\n   * @returns \r\n   */\r\n  private getNotAllowEmptyBindingPaths(entityTypeInfo: DataTypeInfo, results: string[] = []): string[] {\r\n    if (!entityTypeInfo) {\r\n      return;\r\n    }\r\n    this.deepFirstTraversalEntityTypeInfo(entityTypeInfo, results);\r\n    return results;\r\n  }\r\n  private deepFirstTraversalEntityTypeInfo(entityTypeInfo: DataTypeInfo, result: string[] = [], previousValue: string[] = []) {\r\n    // ç¡®è®¤å½åå®ä½æ¯å¦å¿å¡«\r\n    const isAllowEmpty = this.isAllowEmpty(entityTypeInfo.entityInfo.allowEmpty, previousValue);\r\n    if (isAllowEmpty === false) {\r\n      if (previousValue.length < 1) {\r\n        result.push('');\r\n      } else {\r\n        result.push(previousValue.join('/'));\r\n      }\r\n    }\r\n    // è·åææå­è¡¨\r\n    const list = entityTypeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n    if (list && list.length > 0) {\r\n      list.forEach((propInfo: DataPropInfo) => {\r\n        const typeInfo = propInfo.typeInfo;\r\n        if (typeInfo && typeInfo.entityInfo) {\r\n          previousValue.push(typeInfo.entityInfo.nodeCode);\r\n          this.deepFirstTraversalEntityTypeInfo(typeInfo, result, previousValue);\r\n        }\r\n      });\r\n    }\r\n    // æ²¡æä¸çº§äºï¼æ­¤æ¶åºè¯¥æ¸ç©ºæ¸¸æ ï¼å°æ¶éå°çè·¯å¾æ¾å°ç»æéä¸­\r\n    if (previousValue && previousValue.length > 0) {\r\n      previousValue.pop();\r\n    }\r\n  }\r\n  private isAllowEmpty(value: string | boolean, paths: string[]) {\r\n    if (value === undefined || value === true || value === '') {\r\n      return true;\r\n    }\r\n    // å¼åèå®ä¹äºä¸è½ä¸ºç©ºçè§å\r\n    const frameContexts = this.getFrameContextByBindingPath(paths);\r\n    let caller = this.frameContext.frameComponent;\r\n    if (!frameContexts || frameContexts.length < 1) {\r\n      // å®ä¹äºè§åä½å¯¹åºçFrameæ²¡ææ¸²æ\r\n      console.warn(`ç»å®è·¯å¾ ${paths.join('/')} å®ä¹äºä¸è½ä¸ºç©ºçè§åï¼ä½æ¾ä¸å°è¯¥ç»å®è·¯å¾å¯¹åºçç»ä»¶ãè¯·ç¡®ä¿ç»ä»¶æ¾éä¸å¿å¡«ä¸è´ã`);\r\n    } else {\r\n      caller = frameContexts.pop().frameComponent;\r\n    }\r\n    if (typeof value === 'boolean') {\r\n      return value;\r\n    } else if (typeof value === 'string') {\r\n      value = value.trim().startsWith('return') ? value : `return ${value}`;\r\n      const factory = new Function(`\r\n        var viewModel = this.viewModel;\r\n        var bindingData = this.bindingData;\r\n        var context = this.context;\r\n        ${value}\r\n      `);\r\n      return factory.apply(caller);\r\n    } else {\r\n      console.warn(`æ æçå¿å¡«è§åã`);\r\n    }\r\n  }\r\n  collectValidationErrors(rootViewModel: ViewModel, errors: ValidationError[], namespace: string, filter: boolean = true) {\r\n    if (filter) {\r\n      rootViewModel.verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace !== namespace);\r\n    }\r\n    errors.forEach((validationError: ValidationError) => {\r\n      if (validationError.children && validationError.children.length) {\r\n        this.collectValidationErrors(rootViewModel, validationError.children, namespace, false);\r\n      }\r\n      let id = '';\r\n      const findId = (target: any) => {\r\n        if (target && target.data && target.data.id) {\r\n          id = target.data.id;\r\n          return;\r\n        } else if (target[PARENT_CLASS]) {\r\n          findId(target[PARENT_CLASS]);\r\n        }\r\n      };\r\n      findId(validationError.target);\r\n      if (validationError.constraints) {\r\n        const validationResultTypes = Object.keys(validationError.constraints);\r\n        if (validationResultTypes.length) {\r\n          const offset = rootViewModel.verifyInformations.filter(item => item.namespace === namespace).length;\r\n          let index = rootViewModel.verifyInformations.findIndex(item => item.namespace === namespace);\r\n          index = index === -1 ? 0 : index + offset;\r\n          rootViewModel.verifyInformations.splice(index, 0, {\r\n            id: id,\r\n            namespace,\r\n            targetField: validationError.field,\r\n            index: validationError.index,\r\n            title: validationError.propertyName,\r\n            msg: validationError.constraints[validationResultTypes[0]],\r\n            frameContext: validationError.frameContext,\r\n            fullPath: validationError.fullPath,\r\n            type: validationResultTypes[0] === 'required' ? 'empty' : 'error'\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * éç½®æ ¡éªä¿¡æ¯ï¼ä»å½åè¡¨åï¼\r\n   */\r\n  public resetValidation(): Observable<any> {\r\n    const isDialog = this.isInDialog();\r\n    let rootViewModel = this.frameContext.root.viewModel;\r\n    if (isDialog) {\r\n      rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;\r\n    }\r\n    let verifyInformations = rootViewModel.verifyInformations;\r\n    if (verifyInformations.length) {\r\n      const namespace = this.frameContext.namespace;\r\n      if (namespace !== null) {\r\n        verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace !== namespace);\r\n      }\r\n      rootViewModel.verifyInformations = verifyInformations;\r\n      //rootViewModel.verifyInformations.splice(0, rootViewModel.verifyInformations.length);\r\n    }\r\n    if (rootViewModel && rootViewModel.verifycationChanged) {\r\n      rootViewModel.verifycationChanged.next(verifyInformations);\r\n    }\r\n    return of(null);\r\n  }\r\n  /**\r\n   * æ¯å¦å¨å¼¹çªåé¨\r\n   */\r\n  private isInDialog() {\r\n    return this.frameContext && this.frameContext.getVirtualRootFrameContext() && this.frameContext.getVirtualRootFrameContext().frameComponent && this.frameContext.getVirtualRootFrameContext().frameComponent['isDialogRootComponent'] || false;\r\n  }\r\n  /**\r\n   * æ¥æç¬èªçæ ¡éªæç¤ºæå¡\r\n   */\r\n  private hasOwnVerifyDetailService() {\r\n    return this.frameContext.injector.get<VerifyDetailService>(VerifyDetailService, null) !== this.frameContext.root.appContext.injector.get<VerifyDetailService>(VerifyDetailService, null);;\r\n  }\r\n  /**\r\n   * éè¿bindingPathè·åææå¹éçframeContext\r\n   * @param bindingPath \r\n   * @returns \r\n   */\r\n  private getFrameContextByBindingPath(bindingPaths: string[]): FrameContext[] {\r\n    const bindingPath = bindingPaths.filter(p => p).join('/');\r\n    return this.frameContext.appContext.frameContextManager.getFrameContexts().filter(frameContext => frameContext.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPath);\r\n  }\r\n  private filterDataGridComponent() { }\r\n}\r\n\r\nexport { ValidationService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Entity, BindingData, FrameContext, ViewModel } from '@farris/devkit';\r\nimport { BefRepository, BefRepositoryUtil } from '@farris/bef';\r\nimport { Observable, of, empty, EMPTY, concat, zip, from, Subject } from 'rxjs';\r\nimport { tap, switchMap, concatMap, concatAll, takeLast, last } from 'rxjs/operators';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\nimport { EditStateUtil } from './utils/index';\r\nimport { FormNotifyStrategyService } from '../form-notify-strategy.service';\r\nimport { RuntimeFrameworkService } from '../rtf-service';\r\nimport { DataType, WEB_FORM_ROUTE_PARAMS_KEY } from '../types';\r\nimport { CommandService } from '../command-service';\r\nimport { ValidationService } from '../validation.service';\r\n// tslint:disable: no-string-literal\r\n// tslint:disable: max-line-length\r\n/**\r\n * å¡çä»åºæå¡\r\n */\r\n@Injectable()\r\nclass CardDataService {\r\n\r\n  /**\r\n   * å®ä½ä»åº\r\n   */\r\n  private repository: BefRepository<Entity>;\r\n\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private bindingData: BindingData;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private formMessageService: FormMessageService,\r\n    private frameContext: FrameContext,\r\n    private loadingService: FormLoadingService,\r\n    private formNotifyService: FormNotifyService,\r\n    @Optional() private languageService: LanguageService,\r\n    private formErrorService: FormErrorService,\r\n    private runtimeFrameworkService: RuntimeFrameworkService,\r\n    private commandService: CommandService\r\n  ) {\r\n    if (!languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n    this.repository = this.frameContext.repository as BefRepository<Entity>;\r\n    this.bindingData = this.frameContext.bindingData;\r\n  }\r\n\r\n  /**\r\n   * å è½½æ°æ®\r\n   * @param id ä¸»å®ä½id\r\n   * @param enableChildrenPagination å¯ç¨å­è¡¨åé¡µ\r\n   */\r\n  public load(id: string): Observable<Entity> {\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    this.frameContext.appContext.params.set(\"retrieveing\", true);\r\n    this.frameContext.appContext.params.delete('queryChild');\r\n    const get$ = this.repository.getById(id);\r\n    return get$.pipe(\r\n      tap(\r\n        () => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.loadFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * å è½½å\r\n   * @param id id\r\n   * @param transitionActionParamName ç¶æè¿ç§»å¨ä½åæ°ç¼å·\r\n   * @returns \r\n   */\r\n  public onLoading(transitionActionParamName: string) {\r\n    const tabId = this.runtimeFrameworkService && this.runtimeFrameworkService.tabId || null;\r\n    if (!tabId) {\r\n      return;\r\n    }\r\n    let skip = true;\r\n    const listening = this.frameContext.appContext.params.get(tabId) || false;\r\n    transitionActionParamName = transitionActionParamName || 'transitionAction';\r\n    if (!listening) {\r\n      this.frameContext.appContext.params.set(tabId, true);\r\n      this.runtimeFrameworkService.getEntityParam(tabId, (options: any) => {\r\n        if (skip) {\r\n          skip = false;\r\n          return;\r\n        }\r\n        const params = this.parseParams(options);\r\n        if (params && params.sync) {\r\n          const action = params.action;\r\n          const id = params.id;\r\n          const ngCommand = this.frameContext && this.frameContext.viewModel && this.frameContext.viewModel.metadatas && this.frameContext.viewModel.metadatas[action];\r\n          const actionName = ngCommand.params && ngCommand.params[transitionActionParamName] || null;\r\n          const formPrimaryValue = this.frameContext.bindingData.list.currentId;\r\n          const formState = this.frameContext.stateMachine.context.state;\r\n          let state = null;\r\n          let stateName: string;\r\n          if (!actionName) {\r\n            // å¯è½æ¯ç¨æ·èªå·±éç½®çå½ä»¤ï¼æ²¡æç¶ææºåæ¢ï¼æ­¤æ¶ä¸åå¤æ­ç¶ææº\r\n            state = formState;\r\n          }\r\n          else {\r\n            const ngAction = this.frameContext && this.frameContext.stateMachine && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas.actions && this.frameContext.stateMachine.metadatas.actions[actionName];\r\n            state = ngAction && ngAction.transitTo || formState;\r\n            stateName = this.frameContext && this.frameContext.stateMachine && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas.states[state] && this.frameContext.stateMachine.metadatas.states[state].name || this.languageService.defaultStateName;\r\n            if (stateName && stateName.startsWith('{{') && stateName.endsWith('}}')) {\r\n              const key = stateName.replace('{{', '').replace('}}', '');\r\n              stateName = this.frameContext.translate.transform(key, null);\r\n            }\r\n          }\r\n          const primaryValueChanged = formPrimaryValue !== id;\r\n          const stateChanged = formState !== state;\r\n\r\n          if (primaryValueChanged && stateChanged) {\r\n            // ååçåå\r\n            const message = this.languageService.dataAndStateChanged.replace(/\\$1/g, stateName);\r\n            this.showLoadingConfirm(message).pipe(switchMap(() => {\r\n              return this.resetForm(action);\r\n            })).subscribe();\r\n          } else if (primaryValueChanged) {\r\n            // ä¸»é®åçåå\r\n            this.showLoadingConfirm(this.languageService.dataChanged).pipe(switchMap(() => {\r\n              return this.resetForm(action);\r\n            })).subscribe();\r\n          } else if (stateChanged) {\r\n            // ç¶æåçåå\r\n            const message = this.languageService.stateChanged.replace(/\\$1/g, stateName);\r\n            this.showLoadingConfirm(message).pipe(switchMap(() => {\r\n              return this.resetForm(action);\r\n            })).subscribe();\r\n          } else {\r\n            // æ°æ®åç¶æåæªåçåå\r\n            return of(true);\r\n          }\r\n        }\r\n      }, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æ°å¢\r\n   */\r\n  public add(): Observable<any> {\r\n    const lastModifiedId = this.bindingData.list.currentId;\r\n\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const create$ = this.repository.create();\r\n    return create$.pipe(\r\n      tap(\r\n        () => {\r\n          EditStateUtil.setEditState(this.frameContext, lastModifiedId);\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.addFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * çº§èæ°å¢\r\n   */\r\n  public cascadeAdd(): Observable<any> {\r\n    const subject = new Subject<any>();\r\n    // æ¾å°ææviewmodel,æ¿å°äºææçframeContextï¼å¯è½æç»åè¡¨åç\r\n    const frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();\r\n    // æ¾å°å½åframeContextçå¬å±namespace\r\n    const currentNamespace = this.frameContext.getVirtualRootFrameContext().namespace;\r\n    // æ¿å°å½åå½ä»¤æå¨frameçè¡¨åçææframeContext\r\n    const currentFormFrameContexts = frameContexts.filter((context: FrameContext) => context.namespace === currentNamespace) || [];\r\n    let bindingPaths = [];\r\n    if (currentFormFrameContexts && currentFormFrameContexts.length > 0) {\r\n      // æ¾å°ææä¸çº§frameContext\r\n      const childFrameContexts = currentFormFrameContexts.filter((context: FrameContext) => context.viewModel.bindingPath && context.viewModel.bindingPath !== '/');\r\n      if (childFrameContexts && childFrameContexts.length > 0) {\r\n        const childBindingPaths = childFrameContexts.map((context: FrameContext) => context.viewModel.bindingPath);\r\n        if (childBindingPaths && childBindingPaths.length > 0) {\r\n          bindingPaths = childBindingPaths.map(path => path.split('/').filter(p => p)).sort((a, b) => a.length - b.length);\r\n        }\r\n      }\r\n    }\r\n    this.loadingService.show();\r\n    this.repository.create().pipe(\r\n      switchMap((entity: Entity) => {\r\n        const rid = entity.primaryValue;\r\n        if (bindingPaths && bindingPaths.length > 0) {\r\n          return from(bindingPaths).pipe(\r\n            concatMap((bindingPath: Array<any>) => {\r\n              const fpath = this.getPath(this.frameContext.viewModel, '/' + bindingPath.join('/'), rid);\r\n              return this.repository.appendByPath(fpath);\r\n            })\r\n          );\r\n        } else {\r\n          return of(entity);\r\n        }\r\n      })\r\n    ).pipe(last()).subscribe(\r\n      () => {\r\n        this.loadingService.hide();\r\n        subject.next();\r\n      },\r\n      (error: any) => {\r\n        this.loadingService.hide();\r\n        this.formErrorService.exception(this.languageService.addFailed, error);\r\n      });\r\n    return subject;\r\n  }\r\n\r\n  /**\r\n   * ç¼è¾ï¼æ´æ°æ°æ®å¹¶æ è®°ç¼è¾ç¶æï¼\r\n   */\r\n  public edit(id?: string): Observable<Entity> {\r\n    const update$ = this.update();\r\n    return update$.pipe(\r\n      tap(() => {\r\n        const currentId = this.bindingData.list.currentId\r\n        EditStateUtil.setEditState(this.frameContext, currentId);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ´æ°\r\n   * @param id ä¸»å®ä½id\r\n   * @param enableChildrenPagination å¯ç¨å­è¡¨åé¡µ\r\n   */\r\n  public update(id?: string): Observable<Entity> {\r\n    // è·åid\r\n    id = this.bindingData.list.currentId as string;\r\n    if (!id) {\r\n      return empty();\r\n    }\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const update$ = this.repository.updateById(id);\r\n    this.frameContext.appContext.params.set(\"retrieveing\", true);\r\n    return update$.pipe(\r\n      tap(() => {\r\n        this.loadingService.hideDelayLoading(loadingTimerId);\r\n      },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.updateFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  public updateWithoutEmpty() {\r\n    // è·åid\r\n    const id = this.bindingData.list.currentId as string;\r\n    if (!id) {\r\n      return of(null);\r\n    } else {\r\n      return this.update();\r\n    }\r\n  }\r\n  /**\r\n   * æ ¡éªå½åè¡æ¯å¦å­å¨\r\n   * @returns \r\n   */\r\n  public checkBeforeUpdate(): Observable<boolean> {\r\n    const bindingList = this.frameContext.bindingData.list;\r\n    const id = bindingList && bindingList.currentId;\r\n    if (!id) {\r\n      this.formNotifyService.warning(this.languageService.noDataExist, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    return of(true);\r\n  }\r\n  /**\r\n   * å·²åºå¼\r\n   * @returns \r\n   */\r\n  public updateWithNotify() {\r\n    // è·åid\r\n    const id = this.bindingData.list.currentId as string;\r\n    if (!id) {\r\n      this.formNotifyService.warning(this.languageService.noDataExist, { hideTitle: true });\r\n      return EMPTY;\r\n    } else {\r\n      return this.update();\r\n    }\r\n  }\r\n  /**\r\n   * å è½½å¡çæ°æ®ï¼åé¡µå è½½å­è¡¨æ°æ®ï¼\r\n   * @deprecated æ¹æ³å·²åºå¼ï¼è¯·å¿ä½¿ç¨\r\n   */\r\n  public loadPaged(filter?: string, sort?: string) {\r\n    // è·åid\r\n    const id = this.bindingData.list.currentId as string;\r\n    if (!id) {\r\n      return EMPTY;\r\n    }\r\n\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    // this.frameContext.root.params.set('updateWithPaging', true);\r\n    const update$ = of(null);//this.repository.updateEntityById(id, true);\r\n    return update$.pipe(\r\n      tap(() => {\r\n        this.loadingService.hideDelayLoading(loadingTimerId);\r\n      },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.updateFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * ä¿å­\r\n   */\r\n  public save(successMsg?: string): Observable<boolean> {\r\n    // è·åå½åè¡\r\n    const id = this.bindingData.list.currentId as string;\r\n    if (!id) {\r\n      return of(false);\r\n    }\r\n\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const update$ = this.repository.updateChangesById(id);\r\n    const save$ = this.repository.applyChangesById(id);\r\n    const result$ = update$.pipe(\r\n\r\n      // update$ => save$\r\n      switchMap((updateResult: boolean) => {\r\n        if (updateResult === false) {\r\n          return of(false);\r\n        } else {\r\n          return save$;\r\n        }\r\n      }),\r\n\r\n      // éèloading\r\n      tap(() => {\r\n\r\n        // åæ¶æ°å¢ç¶æ\r\n        EditStateUtil.setEditState(this.frameContext, id);\r\n        this.loadingService.hideDelayLoading(loadingTimerId);\r\n        // this.formNotifyService.info(this.languageService.saveSuccess);\r\n        if (successMsg && successMsg.trim()) {\r\n          let showMessage: boolean = true;\r\n          if (successMsg.startsWith('{') && successMsg.endsWith('}')) {\r\n            try {\r\n              const options = JSON.parse(successMsg);\r\n              if (options && options.showMessage === false) {\r\n                showMessage = false;\r\n              }\r\n            } catch { }\r\n          }\r\n          if (showMessage !== false) {\r\n            this.formNotifyService.success(successMsg, { hideTitle: true });\r\n          }\r\n        } else {\r\n          FormNotifyStrategyService.success(this.formNotifyService, this.languageService.saveSuccess);\r\n        }\r\n        // FormNotifyStrategyService.success(this.formNotifyService, this.languageService.saveSuccess);\r\n      },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.saveFailed, error);\r\n        }\r\n      )\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n\r\n  // #region åæ¶ç¸å³æ¹æ³\r\n\r\n  /**\r\n   * åæ¶ï¼é»è®¤åæ¶ï¼\r\n   */\r\n  public cancel(): Observable<any> {\r\n    return this.cancelWithCheck();\r\n  }\r\n\r\n  /**\r\n   * è¿ååæ´é\r\n   * @description ä¸å¸¦åæ´æ£æµæç¤º\r\n   */\r\n  public revert(options?: any): Observable<any> {\r\n    return this.cancelWithoutCheck(options);\r\n  }\r\n\r\n  /**\r\n   * åæ¶ï¼åæ¶åæ£æ¥æªä¿å­çåæ´ï¼\r\n   * @summary\r\n   * 1ãç¨æ·è¯¯æä½ï¼åªéè¦åä¸ªæç¤ºå°±å¯ä»¥äºï¼\r\n   * 2ãç¨æ·ææåæ¶ï¼ç¹å»åæ¶å°±æ¯è¦æ¾å¼ææåæ´ï¼è¿æ¶åè¯¢é®äººå®¶æ¯å¦è¦ä¿å­æèæç¤ºå­å¨åæ´æç¹å¤æ­¤ä¸ä¸¾ï¼ç¡®è®¤ä¸æå³å¯ã\r\n   * 3ãç¨æ·è¯¯æä½ï¼æ²¡æåæ´çæåµä¸ç´æ¥ç»åæ¶äºï¼ç¨æ·ä¼äº§çææï¼å ä¸ºç¨æ·ææ¶åå¹¶ä¸ç¡®å®æ¯å¦æåæ´ï¼åºè¯¥ä¹ç¡®è®¤ä¸æã\r\n   * @todo\r\n   * 1ãç±äºäº§åé¨å¾å¤ä»£ç è¯¯ç¨äºè¯¥æ¹æ³ï¼ä¾èµäºæ²¡æåæ´çæ¶åç´æ¥åæ¶ï¼ç°å¨å¼¹çªç¡®è®¤æ¡æ¥ï¼ä¸å¤ªåéï¼\r\n   * 2ãäº§åé¨éè¦ç¨cancelWithoutCheckæ¹æ³ä»£æ¿ï¼ç®ååç»å¼å®¹çï¼å¾å é¤ã\r\n   */\r\n  public cancelWithCheck() {\r\n\r\n    // @todel\r\n    const hasUnSavedChanges = BefRepositoryUtil.isExistUnsaveData(this.repository);\r\n    if (!hasUnSavedChanges) {\r\n      return this.cancelChanges();\r\n    }\r\n\r\n    // ç¡®è®¤æ¯å¦åæ¶\r\n    const confirm$ = this.formMessageService.question(this.languageService['cancelWithoutSave']);\r\n    const result$ = confirm$.pipe(\r\n      switchMap((ifCancel: boolean) => {\r\n        if (ifCancel === false) {\r\n          return EMPTY;\r\n        }\r\n        return this.cancelChanges();\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * åæ¶ï¼ç´æ¥åæ¶ï¼ä¸æ§è¡æ£æ¥ï¼\r\n   */\r\n  public cancelWithoutCheck(options?: any) {\r\n    return this.cancelChanges(options);\r\n  }\r\n\r\n  /**\r\n   * åæ¶\r\n   */\r\n  private cancelChanges(options?: any): Observable<any> {\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const cancel$ = this.repository.cancelChanges(options);\r\n    return cancel$.pipe(\r\n      tap(\r\n        () => {\r\n          EditStateUtil.setEditState(this.frameContext, '');\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.cancelFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n   * éæ°å è½½ï¼ä»ä¾å¡çåæ¶åéæ°å è½½æ°æ®ï¼å¶ä»åºæ¯è¯·å¿ä½¿ç¨ï¼\r\n   */\r\n  public reload() {\r\n    const isAdd = EditStateUtil.getAddState(this.frameContext);\r\n    let id;\r\n    if (isAdd === true) {\r\n      id = EditStateUtil.getLastModifiedId(this.frameContext);\r\n    } else {\r\n      id = this.bindingData.list.currentId as string;\r\n    }\r\n\r\n    if (!id) {\r\n      this.repository.entityCollection.loadEntities([]);\r\n      return;\r\n    }\r\n\r\n    return this.load(id);\r\n  }\r\n  private getPath(viewModel: ViewModel, bindingPath: string, rid: string): string {\r\n    let path = '/' + rid;\r\n\r\n    const subPaths = bindingPath.split('/');\r\n    if (subPaths.length > 0) {\r\n      // eg:bindingPathå½¢å¦/edus/grades,splitåæ¯['', 'edus', 'grades']\r\n      // å æ­¤indexä»1å¼å§\r\n      for (let index = 1; index < subPaths.length - 1; index++) {\r\n        const subPath = subPaths[index];\r\n        const subData = viewModel.bindingData[subPath];\r\n        if (!subData || !subData.currentId) {\r\n          throw Error(`è·åå­è¡¨å®æ´è·¯å¾åºéï¼æ¾ä¸å°${subData}å¯¹åºçå­è¡¨ï¼æå¯¹åºå­è¡¨æ²¡æå½åè¡ã`);\r\n        }\r\n        path += `/${subPath}/${subData.currentId}`;\r\n      }\r\n    }\r\n    path += '/' + subPaths[subPaths.length - 1];\r\n\r\n    return path;\r\n  }\r\n  private resetForm(action: string) {\r\n    const validationService = this.frameContext.injector.get<ValidationService>(ValidationService, null);\r\n    return this.frameContext.repository.cancelChanges().pipe(\r\n      switchMap(() => this.commandService.execute(action).pipe(switchMap(() => {\r\n        return validationService && validationService.resetValidation() || of(null);\r\n      }))));\r\n  }\r\n  private parseParams(options: any): { action: string, id: string, sync: boolean } | null {\r\n    if (options && Object.prototype.toString.call(options) === DataType.map) {\r\n      let params = options.get(WEB_FORM_ROUTE_PARAMS_KEY);\r\n      if (params && typeof params === 'string') {\r\n        params = decodeURIComponent(params);\r\n        if (params.startsWith('{') && params.endsWith('}')) {\r\n          params = JSON.parse(params);\r\n        }\r\n        return {\r\n          action: params.action,\r\n          id: params.idToView || params.idToEdit || params.id,\r\n          sync: params.sync || false\r\n        };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  private showLoadingConfirm(message: string) {\r\n    return this.formMessageService.confirm(message).pipe(\r\n      switchMap((result: boolean) => {\r\n        if (result === true) {\r\n          return of(true);\r\n        } else {\r\n          return EMPTY;\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\nexport { CardDataService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { BefRepository, BefRepositoryUtil } from '@farris/bef';\r\nimport { TAB_EVENT } from './types';\r\nimport { NavigationService } from './navigation.service';\r\nimport { FrameContext, Repository, UID } from '@farris/devkit';\r\nimport { FormMessageService } from './form-message.service';\r\nimport { LanguageService } from './languag.service';\r\nimport { CardDataService } from './data-services/card-data.service';\r\n/**\r\n * å¯¼èªä¸­é´ä»¶æå¡\r\n * @scope FrameComponent\r\n */\r\n// tslint:disable: no-string-literal\r\n@Injectable()\r\nexport class NavigationMiddlewareService {\r\n  private repository: Repository<any>;\r\n\r\n  private appContext: any;\r\n  constructor(\r\n    private navigationService: NavigationService,\r\n    private frameContext: FrameContext,\r\n    private msgService: FormMessageService,\r\n    @Optional() private languageService: LanguageService,\r\n    private cardDataService: CardDataService\r\n  ) {\r\n    this.repository = frameContext.repository;\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n    if (this.frameContext) {\r\n      this.appContext = this.frameContext.getFormAppContext() || null;\r\n    }\r\n  }\r\n  /**\r\n   * å³é­åå¤ç\r\n   */\r\n  public onClosing() {\r\n    if (this.isInDialog()) {\r\n      return;\r\n    }\r\n    this.navigationService.addEventListener(TAB_EVENT.onTabClosing, (options) => {\r\n      if (this.isChanged && !this.appContext.opened) {\r\n        // å¦æéè¦ç¨æ·ç¡®è®¤å°±åæ¢å°å½åtab\r\n        if (options && options.beforeCloseHandle && typeof options.beforeCloseHandle === 'function') {\r\n          options.beforeCloseHandle({ selectedChange: true });\r\n        }\r\n        const conform = this.msgService.question(this.languageService['exitWithoutSave']);\r\n        /*è®°å½å¼¹çªå·²æå¼*/\r\n        this.appContext.opened = true;\r\n        return conform.pipe(\r\n          switchMap((result: boolean) => {\r\n            this.appContext.opened = false;\r\n            if (result) {\r\n              /*è®°å½ç¨æ·å³é­å¼¹çª*/\r\n              if (!!this.cardDataService) {\r\n                const revert$ = this.cardDataService.revert(options);\r\n                return revert$.pipe(\r\n                  switchMap(() => of(result))\r\n                );\r\n              }\r\n            }\r\n            return of(result);\r\n          })\r\n        );\r\n      } else if (this.isChanged && this.appContext.opened) {\r\n        return of(false);\r\n      } else {\r\n        return of(true);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * æ¯å¦å¨æ¯å¼¹çªçªå£å\r\n   */\r\n  private isInDialog() {\r\n    let frameContext = this.frameContext;\r\n    let isDialogRootComponent = frameContext.frameComponent['isDialogRootComponent'] || false;\r\n    while (frameContext.parent !== null && !isDialogRootComponent) {\r\n      frameContext = frameContext.parent;\r\n      isDialogRootComponent = frameContext.frameComponent['isDialogRootComponent'];\r\n    }\r\n    return isDialogRootComponent;\r\n  }\r\n  /**\r\n   * è·åtabid,å¦ætargetIdå­å¨åç´æ¥ä½¿ç¨targetId\r\n   * @description å°ç¨æ·è¦æ¥ççæ°æ®idè½¬æ¢ä¸ºè¿è¡æ¡æ¶éè¦çtabId\r\n   * @param params routeråæ°\r\n   * @param targetId è¦ç¼è¾/æ¥ççæ°æ®id\r\n   */\r\n  public getTabId(params: string, targetId: string): any {\r\n    if (!!targetId) {\r\n      return targetId;\r\n    }\r\n    let paramsObj: any = null;\r\n    if (!!params && params.startsWith('{') && params.endsWith('}')) {\r\n      paramsObj = JSON.parse(params);\r\n    }\r\n    let paramId = null;\r\n    if (paramsObj && paramsObj.hasOwnProperty('id') && !!paramsObj.id) {\r\n      paramId = paramsObj.id;\r\n    } else {\r\n      paramId = UID.create();\r\n    }\r\n    return paramId;\r\n  }\r\n  /**\r\n   * æ¯å¦ææªä¿å­çåæ´\r\n   */\r\n  private get isChanged(): boolean {\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    return BefRepositoryUtil.isExistUnsaveData(befRepository);\r\n  }\r\n}\r\n","/*\r\n * @Author: aalizzwell\r\n * @Date: 2019-08-05 11:48:27\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-08-06 15:01:53\r\n */\r\n\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { EMPTY, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { FrameContext, Repository, ViewModel } from '@farris/devkit';\r\nimport { FormMessageService } from './form-message.service';\r\nimport { LanguageService } from './languag.service';\r\nimport { BefRepositoryUtil, BefRepository } from '@farris/bef';\r\nimport { CommandService } from './command-service';\r\n\r\n// tslint:disable: no-string-literal\r\n/**\r\n * Gridä¸­é´ä»¶æå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nexport class GridMiddlewareService {\r\n  private repository: Repository<any>;\r\n\r\n  constructor(\r\n    private frameContext: FrameContext,\r\n    private msgService: FormMessageService,\r\n    @Optional() private languageService: LanguageService,\r\n    private viewModel: ViewModel,\r\n    private commandService: CommandService\r\n  ) {\r\n    this.repository = this.frameContext.repository;\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n  /**\r\n   * é¡µç åæ¢å\r\n   */\r\n  public onPageChanging() {\r\n    if (this.isChanged) {\r\n      return this.msgService.question(this.languageService['gridDataNotSave']).pipe(\r\n        switchMap((result: boolean) => {\r\n          if (!result) {\r\n            return EMPTY;\r\n          } else {\r\n            return of(true);\r\n          }\r\n        })\r\n      );\r\n    } else {\r\n      return of(true);\r\n    }\r\n  }\r\n  /**\r\n   * è¡¨æ ¼è¿æ»¤\r\n   * @param commandName å½ä»¤åç§°\r\n   * @param frameId frameId\r\n   * @returns \r\n   */\r\n  public filter(commandName: string, frameId: string) {\r\n    const self: any = this;\r\n    let filters = self.context && self.context.eventParam || [];\r\n    if (typeof (filters) === 'string') {\r\n      filters = JSON.parse(filters);\r\n    }\r\n    // æ¥è¯¢æ¶éç½®é¡µç ä¸ºç¬¬ä¸é¡µ\r\n    this.viewModel.frameContext.repository.entityCollection.pageIndex = 1;\r\n    this.viewModel.frameContext.repository.filterConditionManager.setConditions(this.viewModel.bindingPath, filters);\r\n    return this.commandService.execute(commandName, frameId);\r\n  }\r\n  /**\r\n   * æ¯å¦ææªä¿å­çåæ´\r\n   */\r\n  private get isChanged(): boolean {\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    return BefRepositoryUtil.isExistUnsaveData(befRepository);\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { QuerystringService } from './querystring';\r\nimport { RuntimeFrameworkService } from './rtf-service';\r\nimport { of, Observable, BehaviorSubject, Subject } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n// tslint:disable: no-string-literal\r\n/**\r\n * åæ°æå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nexport class ParamService {\r\n  constructor(\r\n    private querystringService: QuerystringService,\r\n    private runtimeFrameworkService: RuntimeFrameworkService\r\n  ) { }\r\n  /**\r\n   * ééè·åææåæ°\r\n   */\r\n  public get params(): Observable<{ [propName: string]: any }> {\r\n    // åä»hashä¸­è·ååæ°\r\n    const hash = window.location.hash;\r\n    const params = this.querystringService.parse(hash);\r\n    /*\r\n    const appMode = params.appMode;\r\n    // appModeæ²¡æå®ä¹ï¼è®¤ä¸ºæ¯èè¡¨å,appMode = mdi æ spa\r\n    if (typeof appMode === 'undefined' || appMode === null) {\r\n        return of(params);\r\n    }\r\n    // appModeå­å¨ï¼ä½ä¸ºç©ºï¼ä¹è®¤ä¸ºæ¯èè¡¨å\r\n    if (appMode.length < 1) {\r\n        return of(params);\r\n    }\r\n    // æ°è¡¨åï¼ä½¿ç¨iframeæ¨¡å¼\r\n    if (appMode.toLowerCase() === 'mdi') {\r\n        return of(params);\r\n    }\r\n    */\r\n    // è·åtabIdï¼ææ°çæ¬ä¸å®ætabIdï¼å¦æåä¸å°tabIdåè®¤ä¸ºæ¯èè¡¨åï¼ç´æ¥ä»urlè·ååæ°\r\n    const tabId = params.tabId;\r\n    if (!tabId) {\r\n      // throw new Error('TabId can`t be empty!');\r\n      return of(params);\r\n    }\r\n    const subject = new Subject<any>();\r\n    // ç®¡éåæ°eå¯è½ä¸ºobjectãMapç±»å\r\n    this.runtimeFrameworkService.addEventListener(tabId, (e: any) => {\r\n      let map = {};\r\n      if (e instanceof Map || (e && typeof (e['get']) === 'function' && typeof e['entries'] === 'function')) {\r\n        map = this.parseMapParams(e);\r\n      }\r\n      let args = {};\r\n      if (e instanceof Map || (e && typeof (e['get']) === 'function' && typeof e['entries'] === 'function')) {\r\n        args = new Map(e);\r\n      } else {\r\n        args = Object.assign({}, e);\r\n      }\r\n      setTimeout(() => {\r\n        subject.next(Object.assign({}, args, map, params));\r\n      }, 0);\r\n    }, params);\r\n    return subject.asObservable();\r\n  }\r\n  /**\r\n   * è§£æmapç±»åçåæ°\r\n   * @param params params\r\n   */\r\n  private parseMapParams(params: Map<any, any>) {\r\n    const map = {};\r\n    map['WEB_FORM_ROUTE_PARAMS'] = decodeURIComponent(params.get('WEB_FORM_ROUTE_PARAMS'));\r\n    params.forEach((value, key) => {\r\n      if (key !== 'WEB_FORM_ROUTE_PARAMS') {\r\n        map[key] = value;\r\n      }\r\n    });\r\n    return map;\r\n  }\r\n  /**\r\n   * è·åparamåæ°\r\n   * @param param key\r\n   */\r\n  public get(param: string): Observable<any> {\r\n    return this.params.pipe(\r\n      switchMap(options => {\r\n        if (!!options && options.hasOwnProperty(param)) {\r\n          return of(options.param);\r\n        } else {\r\n          return of(undefined);\r\n        }\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * åæ°è½¬ä¸ºå¯¹è±¡\r\n   */\r\n  public parse(): Observable<any> {\r\n    return this.params.pipe(\r\n      switchMap(options => {\r\n        return of(options);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Keybinding, ViewModel } from '@farris/devkit'\r\nimport * as Mousetrap from 'mousetrap';\r\nimport { Observable } from 'rxjs';\r\n\r\nconst enum CharCode {\r\n\r\n  Digit0 = 48,\r\n  Digit1 = 49,\r\n  Digit2 = 50,\r\n  Digit3 = 51,\r\n  Digit4 = 52,\r\n  Digit5 = 53,\r\n  Digit6 = 54,\r\n  Digit7 = 55,\r\n  Digit8 = 56,\r\n  Digit9 = 57,\r\n\r\n  A = 65,\r\n  B = 66,\r\n  C = 67,\r\n  D = 68,\r\n  E = 69,\r\n  F = 70,\r\n  G = 71,\r\n  H = 72,\r\n  I = 73,\r\n  J = 74,\r\n  K = 75,\r\n  L = 76,\r\n  M = 77,\r\n  N = 78,\r\n  O = 79,\r\n  P = 80,\r\n  Q = 81,\r\n  R = 82,\r\n  S = 83,\r\n  T = 84,\r\n  U = 85,\r\n  V = 86,\r\n  W = 87,\r\n  X = 88,\r\n  Y = 89,\r\n  Z = 90,\r\n\r\n  a = 97,\r\n  b = 98,\r\n  c = 99,\r\n  d = 100,\r\n  e = 101,\r\n  f = 102,\r\n  g = 103,\r\n  h = 104,\r\n  i = 105,\r\n  j = 106,\r\n  k = 107,\r\n  l = 108,\r\n  m = 109,\r\n  n = 110,\r\n  o = 111,\r\n  p = 112,\r\n  q = 113,\r\n  r = 114,\r\n  s = 115,\r\n  t = 116,\r\n  u = 117,\r\n  v = 118,\r\n  w = 119,\r\n  x = 120,\r\n  y = 121,\r\n  z = 122\r\n}\r\n\r\n/**\r\n * å¿«æ·é®æå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nexport class KeybindingService {\r\n  private keyMap: Map<String, () => Observable<any>>;\r\n  private bindingProvider: Mousetrap;\r\n  private ready: boolean;\r\n\r\n  constructor() {\r\n    this.keyMap = new Map<String, () => Observable<any>>();\r\n    this.bindingProvider = Mousetrap.default;\r\n    this.ready = true;\r\n  }\r\n\r\n  /**\r\n   * å¯¹è§å¾æ¨¡åè®¾ç½®çå¿«æ·é®è¿è¡ç»å®å¤ç\r\n   * @param viewModel è§å¾æ¨¡å\r\n   */\r\n  public bind(viewModel: ViewModel) {\r\n    viewModel.keybindingMap.forEach((keyBinding, method) => {\r\n      this.register(keyBinding, () => {\r\n        return viewModel[method]();\r\n      });\r\n    });\r\n  }\r\n\r\n\t/**\r\n\t * æ³¨åå¿«æ·é®\r\n\t * @param binding é®çç»å®ä¿¡æ¯\r\n\t * @param handler ååºäºä»¶\r\n\t */\r\n  public register(binding: Keybinding, handler: () => Observable<any>) {\r\n    var combo = this._getCombo(binding);\r\n    if (combo) {\r\n      this.keyMap.set(combo, handler);\r\n      if (binding.ctrlKey && binding.altKey && !binding.shiftKey) {\r\n        // å®éåç°ï¼ctrl+altç»åï¼åªè½è§¦åkeyupäºä»¶\r\n        this.bindingProvider.bind(combo, this._dispatch.bind(this), 'keyup');\r\n      } else {\r\n        this.bindingProvider.bind(combo, this._dispatch.bind(this));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * åæ¶å¿«æ·é®æ³¨å\r\n   * @param binding é®çç»å®ä¿¡æ¯ \r\n   */\r\n  public unregister(binding: Keybinding) {\r\n    var combo = this._getCombo(binding);\r\n    if (combo) {\r\n      this.keyMap.delete(combo);\r\n      this.bindingProvider.unbind(combo);\r\n    }\r\n  }\r\n\r\n  private _dispatch(e: KeyboardEvent): boolean {\r\n    if (e.repeat) return false;\r\n    if (this.ready) {\r\n      var combo = this._getCombo(e);\r\n      if (combo && this.keyMap.has(combo)) {\r\n        this.ready = false;\r\n        this.keyMap.get(combo)().subscribe(() => {\r\n          this.ready = true;\r\n        }, (error) => {\r\n          this.ready = true;\r\n        }, () => {\r\n          this.ready = true;\r\n        });\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n\t/**\r\n\t * è¿åctrl+shift+alt+aå½¢å¼çç»åå­ç¬¦ä¸²ï¼å¨é¨ä¸ºå°å\r\n\t * @param keyInfo \r\n\t */\r\n  private _getCombo(keyInfo: Keybinding | KeyboardEvent): String | null {\r\n    var key = keyInfo.key.toLowerCase();\r\n    if (key.length != 1 || key.charCodeAt(0) < CharCode.a || key.charCodeAt(0) > CharCode.z) {\r\n      console.warn(\"å¿«æ·é®å­æ¯å½¢å¼ä¸ºa-z\");\r\n      return null;\r\n    }\r\n    var combo = (keyInfo.ctrlKey ? 'ctrl+' : '')\r\n      + (keyInfo.shiftKey ? 'shift+' : '')\r\n      + (keyInfo.altKey ? 'alt+' : '')\r\n      + (keyInfo.metaKey ? 'meta+' : '')\r\n      + key;\r\n\r\n    if (combo.length == 1) {\r\n      console.warn(\"å¿«æ·é®è³å°åå«ä¸ä¸ªModifieré®\");\r\n      return null;\r\n    }\r\n\r\n    return combo;\r\n  }\r\n}","// tslint:disable: max-line-length\r\nimport { Injectable } from '@angular/core';\r\n\r\n/**\r\n * @deprecated å·²åºé¤\r\n */\r\n@Injectable()\r\nclass FilterConditionService {\r\n}\r\nexport { FilterConditionService };\r\n","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * UIç¶ææå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass UIStateService {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  getState(componentId: string, stateName: string) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  setState(componentId: string, stateName: string, value: any) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\n\r\nexport { UIStateService };\r\n","import { Injectable, ElementRef } from '@angular/core';\r\nimport { StateMachine, FrameContext, AppContext } from '@farris/devkit';\r\n// tslint:disable: max-line-length\r\n/**\r\n * ç¶ææºæå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass StateMachineService {\r\n\r\n  constructor(\r\n    private stateMachine: StateMachine\r\n  ) {\r\n    if (this.stateMachine.initialState.name === 'init') {\r\n      window.setTimeout(() => {\r\n        this.initFormState();\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  private _clsDefaultName = 'f-form-state-default';\r\n  private _initLoad = true;\r\n  private _currentFrameContext: any\r\n\r\n  transit(action: string) {\r\n    if (action && typeof this.stateMachine[action] === 'function') {\r\n      this.stateMachine[action]();\r\n      this._currentFrameContext = this['context'] && this['context']['frameContext'];\r\n      if (this._initLoad) {\r\n        this.initFormState();\r\n        this._initLoad = false;\r\n      }\r\n      if (!this._currentFrameContext) {\r\n        return;\r\n      }\r\n      const currentRootFrameContext = this.getCurrentRootFrameContext(this._currentFrameContext);\r\n      if (!!currentRootFrameContext) {\r\n        this.toggleFormState(action, currentRootFrameContext);\r\n      }\r\n    }\r\n  }\r\n\r\n  private getCurrentRootFrameContext(currentFrameContext: FrameContext): FrameContext {\r\n    let currentRootFrameContext: FrameContext;\r\n    this.getAllRootFrameContext().forEach((rootFc: FrameContext) => {\r\n      if (currentFrameContext.namespace === rootFc.namespace) {\r\n        currentRootFrameContext = rootFc;\r\n      }\r\n    })\r\n    return currentRootFrameContext;\r\n  }\r\n\r\n  private getFrameContextManagerMap() {\r\n    if (this.stateMachine && this.stateMachine.frameContext) {\r\n      const appContext = this.stateMachine.frameContext.appContext as AppContext;\r\n      if (appContext) {\r\n        const frameContextManager = appContext.frameContextManager;\r\n        return frameContextManager.getFrameContextMap();\r\n      }\r\n    }\r\n    return null;\r\n    // return this.stateMachine && this.stateMachine.frameContext && this.stateMachine.frameContext.appContext && this.stateMachine.frameContext.appContext.frameContextManager && this.stateMachine.frameContext.appContext.frameContextManager.getFrameContextMap();\r\n  }\r\n\r\n  private getAllRootFrameContext(): any[] {\r\n    const rootFrameContextArr = [];\r\n    const frameContexts = this.getFrameContextManagerMap();\r\n    if (frameContexts) {\r\n      frameContexts.forEach(item => {\r\n        if ((item['namespace'] === '' && item['parent'] === null) || (item['parent'] !== null && item['namespace'] !== item['parent']['namespace'])) {\r\n          rootFrameContextArr.push(item);\r\n        }\r\n      })\r\n    }\r\n    return rootFrameContextArr;\r\n  }\r\n\r\n  private initFormState() {\r\n    if (!this.getFrameContextManagerMap()) {\r\n      return;\r\n    }\r\n    this.getAllRootFrameContext().forEach((rootFc: FrameContext) => {\r\n      const rootComponent = rootFc.injector.get<ElementRef>(ElementRef, null) || null;\r\n      if (!rootComponent || !rootComponent.nativeElement) {\r\n        return;\r\n      }\r\n      if (!rootComponent.nativeElement.className.includes(this._clsDefaultName) && !rootComponent.nativeElement.className.includes('f-form-state-create') && !rootComponent.nativeElement.className.includes('f-form-state-edit')) {\r\n        this.addCssClass(rootComponent, this._clsDefaultName);\r\n      }\r\n    })\r\n  }\r\n\r\n  private toggleFormState(action: string, frameContext: FrameContext) {\r\n    const rootComponent = frameContext.injector.get<ElementRef>(ElementRef, null) || null;\r\n    if (!rootComponent || !rootComponent.nativeElement || !action) {\r\n      return;\r\n    }\r\n    action = action.toLowerCase();\r\n    if (action && ['create', 'edit'].includes(action)) {\r\n      if (action === 'create') {\r\n        this.addCssClass(rootComponent, 'f-form-state-create');\r\n      } else if (action === 'edit') {\r\n        this.addCssClass(rootComponent, 'f-form-state-edit');\r\n      }\r\n      this.removeCssClass(rootComponent, this._clsDefaultName);\r\n    } else {\r\n      ['f-form-state-create', 'f-form-state-edit'].forEach(item => this.removeCssClass(rootComponent, item));\r\n      this.addCssClass(rootComponent, this._clsDefaultName);\r\n    }\r\n  }\r\n  private addCssClass(elementRef: ElementRef, className: string) {\r\n    if (!elementRef || !className || !elementRef.nativeElement) {\r\n      return;\r\n    }\r\n    const originalClassName: string = elementRef.nativeElement.className || '';\r\n    if (!originalClassName.includes(className)) {\r\n      elementRef.nativeElement.className = `${originalClassName} ${className}`;\r\n    }\r\n  }\r\n  private removeCssClass(elementRef: ElementRef, className: string) {\r\n    if (!elementRef || !className || !elementRef.nativeElement) {\r\n      return;\r\n    }\r\n    const originalClassName: string = elementRef.nativeElement.className || '';\r\n    if (originalClassName.includes(className)) {\r\n      elementRef.nativeElement.className = originalClassName.split(' ').filter(p => p && p !== className).join(' ');\r\n    }\r\n  }\r\n  private getFormRootComponent() {\r\n    if (this.stateMachine && this.stateMachine.frameContext) {\r\n      const viewContext = this.stateMachine.frameContext;\r\n      if (viewContext) {\r\n        const virtualRootContext = viewContext.getVirtualRootFrameContext();\r\n        if (virtualRootContext) {\r\n          const injector = virtualRootContext.injector;\r\n          if (typeof injector.get === 'function') {\r\n            return injector.get<ElementRef>(ElementRef, null);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n    // return this.stateMachine && this.stateMachine.frameContext && this.stateMachine.frameContext.getVirtualRootFrameContext() && this.stateMachine.frameContext.getVirtualRootFrameContext().injector && typeof this.stateMachine.frameContext.getVirtualRootFrameContext().injector.get === 'function' && this.stateMachine.frameContext.getVirtualRootFrameContext().injector.get<ElementRef>(ElementRef, null) || null;\r\n  }\r\n}\r\n\r\nexport { StateMachineService };\r\n","import { Injectable } from '@angular/core';\r\nimport { AppContext, BindingData, FrameContext } from '@farris/devkit';\r\n\r\n/**\r\n * å®ä½æå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass BindingDataService {\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private bindingData: BindingData,\r\n    private appContext: AppContext\r\n  ) { }\r\n\r\n  /**\r\n   * è®¾ç½®å½åæ¡æ¶çå½åè¡\r\n   */\r\n  setCurrentId(id: string, frameId: string) {\r\n    // let bindingData = this.bindingData;\r\n    // if (frameId) {\r\n    //   const targetContext = this.appContext.getFrameContext(frameId);\r\n    //   bindingData = targetContext.bindingData;\r\n    // }\r\n    // bindingData.list.setCurrentId(id);\r\n\r\n    // @todoï¼å¨é¨éæ°è®¾ç½®ä¸é\r\n    const frameContexts = Array.from(this.appContext.getAllFrameContexts().values());\r\n    frameContexts.forEach((frameContext: FrameContext) => {\r\n      const bindingData = frameContext.bindingData;\r\n      bindingData.list.setCurrentId(id, true, false);\r\n    });\r\n  }\r\n  public setCurrentRow(id: string, frameId: string) {\r\n    let bindingData = this.bindingData;\r\n    if (frameId) {\r\n      const targetContext = this.appContext.getFrameContext(frameId);\r\n      bindingData = targetContext.bindingData;\r\n    }\r\n    bindingData.getList().setCurrentId(id);\r\n  }\r\n}\r\n\r\nexport { BindingDataService };\r\n","import { ActivatedRoute, ParamMap } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { FrameworkService } from '@gsp-sys/rtf-common';\r\nimport { ViewModel } from '@farris/devkit';\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { ParamService } from './param.service';\r\nimport { RuntimeFrameworkService } from './rtf-service';\r\nimport { BefRepository } from '@farris/bef';\r\nimport { isObservable } from 'rxjs';\r\n\r\n/**\r\n * åºç¨åæ°æå¡\r\n * @scope FormModule\r\n */\r\n\r\n@Injectable()\r\nexport class ApplicationParamService {\r\n  private params: any;\r\n  constructor(\r\n    @Optional() private paramService: ParamService,\r\n    @Optional() private runtimeFrameworkService: RuntimeFrameworkService,\r\n  ) {\r\n    if (!this.runtimeFrameworkService) {\r\n      this.runtimeFrameworkService = new RuntimeFrameworkService();\r\n    }\r\n  }\r\n  /**\r\n   * è§£æåæ°\r\n   */\r\n  public parseParams(route: ActivatedRoute, frameworkService: FrameworkService, viewModel: ViewModel, callback: () => void) {\r\n    const highOrderInvoke = this.highOrderInvoke(callback);\r\n    if (!this.paramService) {\r\n      route.queryParams.pipe(take(1)).subscribe((params: any) => {\r\n        this.params = params;\r\n        this.setupParams(params, frameworkService, viewModel, highOrderInvoke);\r\n      });\r\n    } else {\r\n      this.paramService.parse().pipe(take(1)).subscribe(params => {\r\n        this.params = params;\r\n        this.setupParams(params, frameworkService, viewModel, highOrderInvoke);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®åæ°\r\n   */\r\n  private setupParams(params, frameworkService: FrameworkService, viewModel: ViewModel, callback: () => void) {\r\n    const queryParams = this.getParams(params);\r\n    if (!queryParams) {\r\n      callback();\r\n      return;\r\n    }\r\n\r\n    // åè®¾ç½®åæ°ï¼ä¿è¯æ®éè·¯ç±ä¹è½æ­£å¸¸æ§è¡ã\r\n    this.setQueryParams(queryParams, viewModel);\r\n\r\n    const funcId = this.getFuncId(queryParams);\r\n    const appId = this.getAppId(queryParams);\r\n    if (!funcId && !appId) {\r\n      callback();\r\n      return;\r\n    }\r\n\r\n    if (funcId) {\r\n      this.setStaticParams(funcId, queryParams, frameworkService, viewModel, callback);\r\n    } else {\r\n      callback();\r\n    }\r\n  }\r\n  /**\r\n   * è®¾ç½®æ¥è¯¢åæ°\r\n   */\r\n  private setQueryParams(queryParams: any, viewModel: ViewModel): any {\r\n    const parsedQueryParams = {};\r\n    // è®¾ç½®è¡¨ååæ°\r\n    // é¦åå¤æ­æ¯å¦ä¸ºå¼¹çª\r\n    const isInDialog = this.isInDialog(viewModel);\r\n    const uiState = viewModel && viewModel.uiState && viewModel.uiState.innerData || {};\r\n    // å¦ææ¯å¼¹çªï¼å¼¹çªå¤çåæ°ï¼æ è®ºè¡¨ååæ°æéæåæ°ï¼ä¸åºè¯¥è¦çå¼¹çªçåæ°ãå¼¹çªæå¼æ¶ä¼ éçåæ°ç¸å½äºå±é¨åéï¼ä¸åºè¢«è¦ç\r\n    Object.keys(queryParams).forEach((paramName: string) => {\r\n      if (!isInDialog) {\r\n        parsedQueryParams[paramName] = queryParams[paramName];\r\n      } else {\r\n        if (!uiState.hasOwnProperty(paramName)) {\r\n          parsedQueryParams[paramName] = queryParams[paramName];\r\n        }\r\n      }\r\n    });\r\n    this.updateUIState(viewModel, parsedQueryParams);\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®éæåæ°\r\n   */\r\n  private setStaticParams(\r\n    funcId: string, queryParams: any, frameworkService: FrameworkService, viewModel: ViewModel, callback: () => void\r\n  ) {\r\n    this.runtimeFrameworkService.getMenuParams(funcId, (staicParams) => {\r\n      const staticParamsObj = this.mapStaticParamsToObject(staicParams, queryParams, viewModel);\r\n      if (!staticParamsObj) {\r\n        callback();\r\n        return;\r\n      }\r\n      this.updateUIState(viewModel, staticParamsObj);\r\n      callback();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * å°staticParamsè½¬æ¢ä¸ºæ®éå¯¹è±¡\r\n   * @param staticParamsï¼å½¢å¦ï¼[{'name': 'key1', 'value': 'val1'}, {'name': 'key2', 'value': 'val2'}]\r\n   * @return å½¢å¦ï¼{key1: val1, key2: value2 }\r\n   */\r\n  private mapStaticParamsToObject(staticParams: Map<any, any>, queryParams: any, viewModel?: ViewModel): any {\r\n    if (!staticParams) {\r\n      return;\r\n    }\r\n    const inDialog = this.isInDialog(viewModel);\r\n    const uiState = viewModel && viewModel.uiState && viewModel.uiState.innerData || {};\r\n    const result = {};\r\n    staticParams.forEach((value, key, map) => {\r\n      if (!inDialog) {\r\n        // éæåæ°ä¸è½è¦çæ¥è¯¢åæ°\r\n        if (!queryParams.hasOwnProperty(key)) {\r\n          result[key] = value;\r\n        }\r\n      } else {\r\n        if (!queryParams.hasOwnProperty(key) && !uiState.hasOwnProperty(key)) {\r\n          result[key] = value;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * æ¯å¦å¨å¼¹çªå\r\n   * @param viewModel viewmodel\r\n   */\r\n  private isInDialog(viewModel: ViewModel) {\r\n    let isInDialog = false;\r\n    if (viewModel && viewModel.uiState) {\r\n      // tslint:disable-next-line: max-line-length\r\n      if (viewModel.uiState.innerData && viewModel.uiState.innerData.hasOwnProperty('DEVKIT_DIALOG') || viewModel.uiState['DEVKIT_DIALOG']) {\r\n        isInDialog = true;\r\n      }\r\n    }\r\n    return isInDialog;\r\n  }\r\n  /**\r\n   * æ´æ°UIState\r\n   */\r\n  private updateUIState(viewModel: ViewModel, params: any) {\r\n    if (!viewModel || !params) {\r\n      return;\r\n    }\r\n    const uiState = viewModel.uiState;\r\n\r\n    // å¼å®¹ä½¿ç¨stringä¼ éparamså¯¹è±¡çåºæ¯\r\n    if (typeof params === 'string' && params !== '') {\r\n      params = JSON.parse(params);\r\n    }\r\n\r\n    // å¨UIStateä¸ºåæ°åå»ºå±æ§\r\n    Object.keys(params).forEach((propName: string) => {\r\n      uiState.setPropertyValue(propName, params[propName]);\r\n      if (propName && propName === 'union_session') {\r\n        let sessionInfo = params[propName];\r\n        this.setSessionInfo(viewModel, sessionInfo);\r\n      }\r\n    });\r\n  }\r\n  private setSessionInfo(viewModel: ViewModel, sessionInfo: any) {\r\n    if (!viewModel || !sessionInfo) {\r\n      return;\r\n    }\r\n    if (sessionInfo && typeof sessionInfo === 'string' && sessionInfo.startsWith('{') && sessionInfo.endsWith('}')) {\r\n      sessionInfo = JSON.parse(sessionInfo);\r\n    }\r\n    const token = sessionInfo && sessionInfo.token || null;\r\n    const sessionId = sessionInfo && sessionInfo.sessionId || null;\r\n    if (token) {\r\n      viewModel.frameContext.appContext.Token = token;\r\n    }\r\n    if (sessionId) {\r\n      const befRepository = viewModel.frameContext.repository as BefRepository<any>;\r\n      if (befRepository) {\r\n        befRepository.restService.sessionService.setBeSessionId(sessionId);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * è·ååè½èåid\r\n   */\r\n  private getFuncId(queryParams: any): any {\r\n    if (!queryParams) {\r\n      return;\r\n    }\r\n    return queryParams['funcId'];\r\n  }\r\n\r\n  /**\r\n   * è·ååºç¨id\r\n   */\r\n  private getAppId(queryParams: any): any {\r\n    if (!queryParams) {\r\n      return;\r\n    }\r\n    return queryParams['appId'];\r\n  }\r\n  private getTabId(queryParams: any) {\r\n    if (!queryParams) {\r\n      return;\r\n    }\r\n    return queryParams['tabId'];\r\n  }\r\n  /**\r\n   * è·åurlåæ°å¯¹è±¡\r\n   * @param queryParams urlåæ°\r\n   */\r\n  private getParams(queryParams: any): { [propName: string]: any } {\r\n    if (!queryParams) {\r\n      return {};\r\n    }\r\n    let result = {};\r\n    if (queryParams.hasOwnProperty('WEB_FORM_ROUTE_PARAMS')) {\r\n      let webFormRouteParams: string = queryParams['WEB_FORM_ROUTE_PARAMS'];\r\n      if (webFormRouteParams && webFormRouteParams.startsWith('{') && webFormRouteParams.endsWith('}')) {\r\n        webFormRouteParams = decodeURI(encodeURI(webFormRouteParams).replace(/%0A/g, '\\\\n').replace(/%09/g, '\\\\t').replace(/%0D/g, '\\\\r'));\r\n        result = JSON.parse(webFormRouteParams);\r\n      }\r\n      Object.keys(queryParams).forEach(prop => {\r\n        if (prop !== 'WEB_FORM_ROUTE_PARAMS') {\r\n          result[prop] = queryParams[prop];\r\n        }\r\n      });\r\n      return result;\r\n    }\r\n    return queryParams;\r\n  }\r\n  private highOrderInvoke(callback) {\r\n    return () => {\r\n      try {\r\n        const queryParams = this.getParams(this.params);\r\n        const tabId = this.getTabId(queryParams);\r\n        if (tabId) {\r\n          const controlEvent = this.runtimeFrameworkService.getMenuSwitchControlEvent();\r\n          if (controlEvent && isObservable(controlEvent)) {\r\n            controlEvent.subscribe((event: any) => {\r\n              if (event) {\r\n                event.next('ok');\r\n              }\r\n            });\r\n          }\r\n        }\r\n      } catch (e) { console.warn(e); }\r\n      if (callback && typeof callback === 'function') {\r\n        callback();\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FrameContext, BindingData, BindingList, BindingObject } from '@farris/devkit';\r\n\r\n/**\r\n * å®ä½éåæå¡\r\n * @todo\r\n * å®ä½å±æ²¡æå°è£ç¸å³æ¹æ³ï¼ä¸´æ¶éè¿BindingDataæ¥è·åæ°æ®\r\n */\r\n@Injectable()\r\nclass EntityTraversingService {\r\n\r\n  private get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  constructor(private frameContext: FrameContext) {\r\n  }\r\n\r\n  /**\r\n   * è·åå¼\r\n   */\r\n  public getPropValue(path: string[]): any {\r\n    return this.bindingData.getValue(path);\r\n  }\r\n\r\n  /**\r\n   * è·åå®ä½æ°æ®\r\n   */\r\n  public getEntityData(path: string[]): any {\r\n    let bindingObj: BindingObject;\r\n    const bindingListOrObject = this.bindingData.getValue(path);\r\n    if (bindingListOrObject instanceof BindingList === true) {\r\n      bindingObj = bindingListOrObject.currentItem;\r\n    } else {\r\n      bindingObj = bindingListOrObject;\r\n    }\r\n    return bindingObj.toJSON();\r\n  }\r\n\r\n  /**\r\n   * è·åå®ä½åè¡¨æ°æ®\r\n   */\r\n  public getEntityListData(path: string[]): any[] {\r\n    const bindingList = this.bindingData.getValue(path) as BindingList;\r\n    return bindingList.toJSON();\r\n  }\r\n\r\n}\r\n\r\nexport { EntityTraversingService };\r\n","import { Injectable } from '@angular/core';\r\nimport { FrameContext, BindingData } from '@farris/devkit';\r\n\r\n@Injectable()\r\nclass EntityManipulationService {\r\n\r\n  private get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  constructor(private frameContext: FrameContext) {\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®pathå¯¹åºçå­æ®µå¼\r\n   */\r\n  public setPropValue(path: string[], value: any): any {\r\n\r\n    // å®ä½å±è¿æ²¡æå°è£ï¼ä¸´æ¶ç¨BindingDataç¸å³æ¹æ³ä»£æ¿\r\n    this.bindingData.setValue(path, value, true, true);\r\n  }\r\n\r\n}\r\n\r\nexport { EntityManipulationService };\r\n","import { Injectable } from '@angular/core';\r\nimport { FrameContext, BindingData, BindingList, BindingObject } from '@farris/devkit';\r\nimport { EntityTraversingService } from './entity-traversing.service';\r\n\r\ninterface SplitedPath {\r\n  listPath: string[];\r\n  propPath: string[];\r\n}\r\n\r\n/**\r\n * å®ä½èåæå¡\r\n */\r\n@Injectable()\r\nclass EntityAggregationService {\r\n\r\n  private get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  private traversingService: EntityTraversingService;\r\n\r\n  constructor(private frameContext: FrameContext) {\r\n    this.traversingService   = this.frameContext.injector.get<EntityTraversingService>(EntityTraversingService);\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºåè¡¨è®°å½çæ¡æ°\r\n   */\r\n  public count(path: string[]): number {\r\n    const splitedPath = this.splitPath(path);\r\n    const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);\r\n    return entityListData.length;\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºå­æ®µçå\r\n   */\r\n  public sum(path: string[]) {\r\n    const splitedPath = this.splitPath(path);\r\n    const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);\r\n\r\n    const total = entityListData.reduce((accTotal: number, entityData: any) => {\r\n      let propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));\r\n      propValue = isNaN(propValue) ? 0 : propValue;\r\n      accTotal += propValue;\r\n      return accTotal;\r\n    }, 0);\r\n    return total;\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºå­æ®µçå¹³åå¼\r\n   */\r\n  public avg(path: string[]) {\r\n    const count = this.count(path);\r\n    const total = this.sum(path);\r\n    return count !== 0 ? total / count : 0;\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºå­æ®µçæå¤§å¼\r\n   */\r\n  public max(path: string[]): number {\r\n    const splitedPath = this.splitPath(path);\r\n    const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);\r\n\r\n    const max =  entityListData.reduce((accMax: number, entityData: any) => {\r\n      const propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));\r\n      if (isNaN(propValue) === false && ( !accMax || propValue > accMax)) {\r\n        accMax = propValue;\r\n      }\r\n      return accMax;\r\n    }, null);\r\n    return max ? max : 0;\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºå­æ®µçæå°å¼\r\n   */\r\n  public min(path: string[]): number {\r\n    const splitedPath = this.splitPath(path);\r\n    const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);\r\n\r\n    const min = entityListData.reduce((accMin: number, entityData: any) => {\r\n      const propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));\r\n      if (isNaN(propValue) === false && ( !accMin || propValue < accMin)) {\r\n        accMin = propValue;\r\n      }\r\n      return accMin;\r\n    }, null);\r\n    return min ? min : 0;\r\n  }\r\n\r\n  /**\r\n   * è·åå±æ§å¼\r\n   */\r\n  private getPropValue(entityData: any, path: string[]) {\r\n    let currentData = entityData;\r\n    path.forEach((pathItem: string) => {\r\n\r\n      // æåéåºçé½éç½®ä¸ºnullï¼ä¸»è¦éå¯¹å³èå¯¹è±¡æªèµå¼åºæ¯\r\n      if (!currentData) {\r\n        currentData = null;\r\n        return;\r\n      }\r\n      currentData = currentData[pathItem];\r\n    });\r\n\r\n    return currentData;\r\n  }\r\n\r\n  /**\r\n   * åéè·¯å¾ï¼åéç¬¦åè¡¨è·¯å¾åå±æ§è·¯å¾\r\n   * @return å½¢å¦ {parentListPath: [], propertyPath: []}\r\n   */\r\n  private splitPath(path: string[]): SplitedPath {\r\n    const listPath = path.concat([]);\r\n    const propPath = [];\r\n    let currentNode = this.bindingData.getValue(listPath);\r\n    while (currentNode instanceof BindingList !== true) {\r\n      const propPathItem = listPath.pop();\r\n      if (!propPathItem) {\r\n        return;\r\n      }\r\n      propPath.unshift(propPathItem);\r\n      currentNode = this.bindingData.getValue(listPath);\r\n    }\r\n\r\n    return {\r\n      listPath: listPath,\r\n      propPath: propPath\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport { EntityAggregationService };\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-29 19:07:30 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-05-29 19:31:19\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { BindingData } from '@farris/devkit';\r\n\r\n/**\r\n * EntityListæå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass EntityListService {\r\n\r\n  constructor(private bindingData: BindingData) {}\r\n\r\n    /**\r\n     * è·åå½åé¡µç \r\n     */\r\n    public get pageIndex() {\r\n        return this.bindingData.list.pageIndex;\r\n    }\r\n\r\n    /**\r\n     * è·åå½ååé¡µå¤§å°\r\n     */\r\n    public get pageSize() {\r\n        return this.bindingData.list.pageSize;\r\n    }\r\n}\r\n\r\nexport { EntityListService };\r\n","import { Injectable } from '@angular/core';\r\nimport { FrameContext } from '@farris/devkit';\r\nimport { EntityTraversingService } from './entity-traversing.service';\r\nimport { EntityManipulationService } from './entity-manipulation.service';\r\nimport { EntityAggregationService} from './entity-aggregation.service';\r\n\r\n/**\r\n * å®ä½æå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass EntityService {\r\n\r\n  private traversingService: EntityTraversingService;\r\n\r\n  private manipulationService: EntityManipulationService;\r\n\r\n  private aggregationService: EntityAggregationService;\r\n\r\n  constructor(private frameContext: FrameContext) {\r\n    const injector = this.frameContext.injector;\r\n    this.traversingService   = injector.get<EntityTraversingService>(EntityTraversingService);\r\n    this.manipulationService = injector.get<EntityManipulationService>(EntityManipulationService);\r\n    this.aggregationService  = injector.get<EntityAggregationService>(EntityAggregationService);\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºçå±æ§å¼\r\n   */\r\n  public getPropValue(path: string[]): any {\r\n    return this.traversingService.getPropValue(path);\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®pathå¯¹åºçå±æ§å¼\r\n   */\r\n  public setPropValue(path: string[], value: any): void {\r\n    return this.manipulationService.setPropValue(path, value);\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®pathå¯¹åºçEntityæ°æ®\r\n   */\r\n  public getEntityData(path: string[]): any {\r\n    return this.traversingService.getEntityData(path);\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®pathå¯¹åºçEntityListæ°æ®\r\n   */\r\n  public getEntityListData(path: string[]): any {\r\n    return this.traversingService.getEntityListData(path);\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºEntityListè®°å½æ°\r\n   */\r\n  public count(path: string[]): number {\r\n    return this.aggregationService.count(path);\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºå±æ§çåè®¡å¼\r\n   */\r\n  public sum(path: string[]): number {\r\n    return this.aggregationService.sum(path);\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºå±æ§çå¹³åå¼\r\n   */\r\n  public avg(path: string[]): number {\r\n    return this.aggregationService.avg(path);\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºå±æ§çæå¤§å¼\r\n   */\r\n  public max(path: string[]): number {\r\n    return this.aggregationService.max(path);\r\n  }\r\n\r\n  /**\r\n   * è·åpathå¯¹åºå±æ§çæå°å¼\r\n   */\r\n  public min(path: string[]): number {\r\n    return this.aggregationService.min(path);\r\n  }\r\n}\r\n\r\nexport { EntityService };\r\n","import { Injectable, Injector } from \"@angular/core\";\r\nimport { AppContext, DataTypeInfo, Entity, FrameContext, Repository } from \"@farris/devkit\";\r\n\r\n@Injectable()\r\nexport class BindingPathService {\r\n  constructor(private injector: Injector, private appContext: AppContext, private repository: Repository<Entity>) { }\r\n  /**\r\n   * è·åç»ä»¶ä¸ä¸æçç»å®è·¯å¾\r\n   * @param frameContext ç»ä»¶ä¸ä¸æ\r\n   * @returns \r\n   */\r\n  public getBindingPathsByFrameContext(frameContext: FrameContext): string[] {\r\n    return frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath && frameContext.viewModel.bindingPath.split('/').filter(p => p) || null;\r\n  }\r\n  /**\r\n   * éè¿BEè¡¨åè·åbindingPath\r\n   * @param dataTypeInfo \r\n   * @param tableName \r\n   * @param paths \r\n   * @param level\r\n   * @returns \r\n   */\r\n  public getBindingPathsByTableName(dataTypeInfo: DataTypeInfo, tableName: string, paths: string[] = [], level: number = 0): string[] {\r\n    level++;\r\n    if (dataTypeInfo.entityInfo && (dataTypeInfo.entityInfo.nodeCode === tableName || dataTypeInfo.entityInfo.originalCode === tableName)) {\r\n      if (level !== 1) {\r\n        paths.push(dataTypeInfo.entityInfo.nodeCode);\r\n      }\r\n      return paths;\r\n    }\r\n    const props = Array.from(dataTypeInfo.propInfoMap.values()).filter(p => p.typeInfo);\r\n    if (props.length < 1) {\r\n      paths = [];\r\n      return paths;\r\n    }\r\n    if (dataTypeInfo.entityInfo) {\r\n      if (level !== 1) {\r\n        paths.push(dataTypeInfo.entityInfo.nodeCode);\r\n      }\r\n    }\r\n\r\n    for (let idx = 0; idx < props.length; idx++) {\r\n      const dataTypeInfo = props[idx].typeInfo;\r\n      const path = this.getBindingPathsByTableName(dataTypeInfo, tableName, paths, level);\r\n      if (!path || path.length < 1) {\r\n        continue;\r\n      } else {\r\n        paths = paths.concat(path);\r\n        return paths;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * è·åå±æ§è·¯å¾ä¸­çç»å®è·¯å¾\r\n   * @param paths paths\r\n   * @param entityTypeInfo \r\n   * @returns \r\n   */\r\n  public getBindingPathsByPath(paths: string[] | string, entityTypeInfo: DataTypeInfo): string[] {\r\n    let nodeCodes = [];\r\n    if (typeof paths === 'string') {\r\n      paths = paths.split('/').filter(p => p);\r\n    }\r\n    paths = paths.concat([]);\r\n    while (paths.length > 0) {\r\n      const dataPropInfo = entityTypeInfo.getPropInfoByPath(paths);\r\n      if (dataPropInfo.group === 'List') {\r\n        nodeCodes = paths;\r\n        break;\r\n      }\r\n      paths.pop();\r\n    }\r\n    return nodeCodes;\r\n  }\r\n  /**\r\n   * è·åå±æ§è·¯å¾ä¿¡æ¯\r\n   * @param path å±æ§è·¯å¾\r\n   * @returns \r\n   */\r\n  public getPathInfo(path: string): { bindingPath: string, propertyName: string, bindingPaths: string[], propertyNames: string[] } {\r\n    const paths = path.split('/').filter(p => p);\r\n    // è·åæå¤§å®ä½å±çº§ï¼å¶ä½ä¸ºå±æ§ï¼ç®åå±æ§ãudtãå³èãå³èåµå¥å³èï¼\r\n    const entityPath = this.getBindingPathsByPath(paths, this.repository.entityTypeInfo);\r\n    const propertyName = paths.slice(entityPath.length).join('/');\r\n    return { bindingPath: entityPath.join('/'), propertyName, bindingPaths: entityPath, propertyNames: propertyName.split('/').filter(p => p) };\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { FrameContext, NgFormControl } from \"@farris/devkit\";\r\n\r\n@Injectable()\r\nexport class FormControlService {\r\n  constructor() { }\r\n  public getFormControlsByFrameContext(frameContext: FrameContext): { [propertyName: string]: NgFormControl } | null {\r\n    return frameContext && frameContext.form && frameContext.form.ngFormControls || null;\r\n  }\r\n  /**\r\n   * éè¿bindingåæ°æ®è·åNgFormControl\r\n   * @param frameContext \r\n   * @param binding binding\r\n   * @returns \r\n   */\r\n  public getFormControlByBinding(frameContext: FrameContext, binding: string): NgFormControl {\r\n    const ngFormControls = this.getFormControlsByFrameContext(frameContext);\r\n    if (!ngFormControls) {\r\n      return null;\r\n    }\r\n    return Object.values(ngFormControls).find((ngFormControl: NgFormControl) => ngFormControl && ngFormControl.binding === binding);\r\n\r\n  }\r\n  /**\r\n   * \r\n   * @param frameContext frameContext\r\n   * @param fullPath \r\n   * @returns \r\n   */\r\n  public getFormControlIndexByFullPath(frameContext: FrameContext, fullPath: string): number {\r\n    const ngFormControls = this.getFormControlsByFrameContext(frameContext);\r\n    if (!ngFormControls) {\r\n      return null;\r\n    }\r\n    const bindings = fullPath.split('/').filter(p => p);\r\n    return Object.values(ngFormControls).findIndex((ngFormControl: NgFormControl) => {\r\n      if (!ngFormControl) {\r\n        return false;\r\n      }\r\n      const bindingPath = frameContext.viewModel.bindingPath;\r\n      const bindingPaths = bindingPath.split('/').filter(p => p);\r\n      const formControlBindingPaths = ngFormControl.binding.split('.').filter(p => p);\r\n      const fullPath = bindingPaths.concat(formControlBindingPaths);\r\n      return fullPath.join('/') === bindings.join('/');\r\n    });\r\n  }\r\n  /**\r\n   * éè¿bindingåæ°æ®è·åNgFormControlä½ç½®\r\n   * @param frameContext \r\n   * @param binding binding\r\n   * @returns ä»0å¼å§\r\n   */\r\n  public getFormControlIndexByBinding(frameContext: FrameContext, binding: string): number {\r\n    const ngFormControls = this.getFormControlsByFrameContext(frameContext);\r\n    if (!ngFormControls) {\r\n      return null;\r\n    }\r\n    return Object.values(ngFormControls).findIndex((ngFormControl: NgFormControl) => ngFormControl && ngFormControl.binding === binding);\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { AppContext, DataPropInfo, Entity, FrameContext, Repository } from \"@farris/devkit\";\r\nimport { BindingPathService } from \"./binding-path.service\";\r\nimport { FormControlService } from './form-control.service';\r\n\r\n@Injectable()\r\nexport class FrameContextService {\r\n  constructor(\r\n    private injector: Injector, \r\n    private appContext: AppContext, \r\n    private frameContext: FrameContext, \r\n    private repository: Repository<Entity>,\r\n    private bindingPathService: BindingPathService,\r\n    private formControlService: FormControlService\r\n    ) { }\r\n  /**\r\n     * éè¿BEè¡¨åè·åå¯¹åºçframeContext\r\n     * @param tableName \r\n     * @returns \r\n     */\r\n  public getFrameContextsByTableName(tableName: string): null | FrameContext[] {\r\n    if (!tableName) {\r\n      throw new Error('tableName ä¸è½ä¸ºç©ºã');\r\n    }\r\n    const dataTypeInfo = this.repository && this.repository.entityTypeInfo || null;\r\n    if (!dataTypeInfo) {\r\n      return null;\r\n    }\r\n    const bindingPaths = [];\r\n    this.bindingPathService.getBindingPathsByTableName(dataTypeInfo, tableName, bindingPaths);\r\n    const frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];\r\n    if (!frameContexts || frameContexts.length === 0) {\r\n      return null;\r\n    }\r\n    return frameContexts.filter((frameContext: FrameContext) => frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPaths.join('/'));\r\n  }\r\n  /**\r\n   * æ ¹æ®å­æ®µå®æ´è·¯å¾è·åæå¨çä¸ä¸æ\r\n   * @param propertyPath \r\n   * @param separtor \r\n   * @returns \r\n   */\r\n  public getFrameContextsByPropertyPath(propertyPath: string, separtor: string = '/'): FrameContext[] {\r\n    if (!propertyPath) {\r\n      throw new Error('propertyPath ä¸è½ä¸ºç©ºã');\r\n    }\r\n    const frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];\r\n    return frameContexts.filter((frameContext: FrameContext) => {\r\n      const formControls = frameContext && frameContext.form && frameContext.form.ngFormControls || {};\r\n      const bindingPath = frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath || '';\r\n      if (formControls && Object.keys(formControls).length > 0) {\r\n        const key = Object.keys(formControls).find((key: string) => {\r\n          const formControl = formControls[key];\r\n          if (!formControl || !formControl.binding) {\r\n            return false;\r\n          }\r\n          const bindings = formControl.binding.split('.').filter(p => p);\r\n          const bindingPaths = bindingPath.split('/').filter(p => p);\r\n          const fullPath = bindingPaths.concat(bindings);\r\n          return propertyPath.split(separtor).filter(p => p).join('/') === fullPath.join('/');\r\n        });\r\n        return key ? true : false;\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n  /**\r\n   * éè¿BEå­æ®µåè·åå­æ®µçbindingPath\r\n   * @param bindingPaths ç»å®è·¯å¾\r\n   * @param columnName BEå­æ®µå\r\n   * @returns \r\n   */\r\n  public getFrameContextsByColumnName(bindingPaths: string[], columnName: string): FrameContext[] | null {\r\n    if (!bindingPaths) {\r\n      throw new Error('bindingPath ä¸è½ä¸ºç©ºã');\r\n    }\r\n    if (!columnName) {\r\n      throw new Error('columnName ä¸è½ä¸ºç©ºã');\r\n    }\r\n    bindingPaths = bindingPaths.filter(p => p);\r\n    const entityTypeInfo = this.repository && this.repository.entityTypeInfo || null;\r\n    if (!entityTypeInfo) {\r\n      return null;\r\n    }\r\n    const dataTypeInfo = entityTypeInfo.getTypeInfoByPath(bindingPaths);\r\n    const dataPropInfos = dataTypeInfo && dataTypeInfo.getPropInfos() || [];\r\n    const columnPropInfo = dataPropInfos.find((dataPropInfo: DataPropInfo) => dataPropInfo.metadataInfo && (dataPropInfo.metadataInfo.originalDataField === columnName || dataPropInfo.metadataInfo.dataField === columnName));\r\n    if (!columnPropInfo || !columnPropInfo.metadataInfo) {\r\n      return null;\r\n    }\r\n    const frameContexts = this.appContext.frameContextManager.getFrameContexts();\r\n    return frameContexts.filter((frameContext: FrameContext) => {\r\n      const ngFormControls = this.formControlService.getFormControlsByFrameContext(frameContext);\r\n      if (!ngFormControls || Object.keys(ngFormControls).length < 1) {\r\n        return false;\r\n      }\r\n      const currentBindingPaths = this.bindingPathService.getBindingPathsByFrameContext(frameContext) || [];\r\n      const isValidFrameContext = currentBindingPaths.join('/') === bindingPaths.join('/');\r\n      if (!isValidFrameContext) {\r\n        return false;\r\n      }\r\n      const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === columnPropInfo.metadataInfo.path);\r\n      return ngFormControl ? true : false;\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * éè¿ç»å®è·¯å¾è·åå¯¹åºçç»ä»¶ä¸ä¸ææ°ç»\r\n   * @param bindingPath bindingPathå­ç¬¦ä¸²\r\n   * @param namespace ns,é»è®¤ä¸º''\r\n   */\r\n   public getFrameContextsByBindingPath(bindingPath: string | string[], namespace: string = ''): FrameContext[] {\r\n    if (Array.isArray(bindingPath)) {\r\n      bindingPath = bindingPath.join('/');\r\n    }\r\n    const frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];\r\n    return frameContexts.filter((frameContext: FrameContext) => frameContext && frameContext.namespace === namespace && frameContext.viewModel.bindingPath === bindingPath);\r\n  }\r\n}","import { Injectable, ElementRef } from '@angular/core';\r\nimport { Repository, FrameContext, NgFormControl } from '@farris/devkit';\r\nimport { FrameContextService } from './frame-context.service';\r\nimport { FormControlService } from './form-control.service';\r\n\r\nconst FIXED_COLUMN_START_INDEX = 5000;\r\nconst GRID_COLUMN_START_INDEX = 10000;\r\ninterface FocusableInvalidationGrid {\r\n  editCell(rowId: any, field: string): void;\r\n  disabled: boolean;\r\n}\r\n\r\n/**\r\n * è¡¨åéªè¯æå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass FocusInvalidService {\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private repository: Repository<any>,\r\n    private frameContext: FrameContext,\r\n    private frameContextService: FrameContextService,\r\n    private formControlService: FormControlService\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * åç¬¬ä¸ä¸ªéªè¯ä¸éè¿çå­æ®µè®¾ç½®ç¦ç¹\r\n   */\r\n  public focusInvalidInput(verifyInformations: any[], rootElement: ElementRef<any>) {\r\n    // æ éªè¯ä¸éè¿ä¿¡æ¯æ¶ï¼ç´æ¥è¿åã\r\n    if (!verifyInformations || !verifyInformations.length) {\r\n      return;\r\n    }\r\n    let targetField = null;\r\n    const firstVerifyInformation = this.selectFirstVerifyInformation(verifyInformations, rootElement);\r\n    if (firstVerifyInformation) {\r\n      targetField = firstVerifyInformation.targetField;\r\n      if (targetField) {\r\n        const canFocus = this.focusElement(targetField, rootElement);\r\n        if (canFocus) {\r\n          verifyInformations['focused'] = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®DataGridååæ ¼ç¦ç¹\r\n   */\r\n  public focusGridCell(verifyInformations: any[], focusableDataGrid: FocusableInvalidationGrid) {\r\n    if (!verifyInformations || !verifyInformations.length || verifyInformations['focused'] == true || focusableDataGrid.disabled === true) {\r\n      return;\r\n    }\r\n    let targetField = null;\r\n    let targetId = null;\r\n    const firstVerifyInformation = this.selectFirstVerifyInformation(verifyInformations);\r\n    if (firstVerifyInformation) {\r\n      targetField = firstVerifyInformation.targetField;\r\n      targetId = firstVerifyInformation.id;\r\n      verifyInformations['focused'] = true;\r\n      focusableDataGrid.editCell(targetId, targetField);\r\n    }\r\n  }\r\n  private updateVerifyInformationsIndex(verifyInformations: any[], rootElement?: ElementRef<any>) {\r\n    verifyInformations = verifyInformations.filter((verifyInformation: any) => {\r\n      const frameContexts = this.getFrameContextsByPropertyPath(verifyInformation.fullPath, '/');\r\n      const frameContext = frameContexts && frameContexts.filter(frameContext => frameContext && frameContext.frameId === this.frameContext.frameId);\r\n      return frameContext ? true : false;\r\n    });\r\n    return verifyInformations.map((verifyInformation: any) => {\r\n      let tabIndex = -1;\r\n      if (verifyInformation) {\r\n        if (rootElement && verifyInformation.targetField) {\r\n          const input = this.getInputElementById(verifyInformation.targetField, rootElement);\r\n          tabIndex = input && input.getAttribute('tabindex') || -1;\r\n          tabIndex = Number(tabIndex);\r\n        }\r\n        // const frameContexts = this.getFrameContextsByPropertyPath(verifyInformation.fullPath, '/');\r\n        const frameContext = this.frameContext;//frameContexts && frameContexts[0] || null;\r\n        const frameIndex = frameContext.index + 1;\r\n        verifyInformation.tabIndex = tabIndex;\r\n        verifyInformation.domIndex = -1;\r\n        verifyInformation.frameIndex = -1;\r\n        verifyInformation.position = tabIndex;\r\n        if (frameContext) {\r\n          const domIndex = verifyInformation.fullPath && this.getFieldIndex(frameContext, verifyInformation.fullPath) || 0;\r\n          if (domIndex > 0) {\r\n            const rowIndex = verifyInformation.index || 0;\r\n            verifyInformation.domIndex = domIndex;\r\n            verifyInformation.frameIndex = frameContext.index;\r\n            verifyInformation.position = tabIndex > 0 ? tabIndex : (frameIndex * 1000 + rowIndex * 1000 + domIndex);\r\n          }\r\n        }\r\n      }\r\n      return verifyInformation;\r\n    });\r\n  }\r\n  private isGridComponent(frameContext: FrameContext) {\r\n    if (frameContext) {\r\n      const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;\r\n      return dataGridColumnsName ? true : false;\r\n    }\r\n    return undefined;\r\n  }\r\n  private getColumnIndex(frameContext: FrameContext, binding: string) {\r\n    binding = binding.split('/').filter(p => p).join('/');\r\n    const bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(p => p);\r\n    const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;\r\n    const frameIndex = frameContext.index + 1;\r\n    if (!dataGridColumnsName) {\r\n      return undefined;\r\n    }\r\n    let columns: any[] = frameContext.viewModel[dataGridColumnsName];\r\n    if (!columns || columns.length < 1) {\r\n      return undefined;\r\n    }\r\n    // æå¹³columns\r\n    columns = columns.reduce((results: any[], item) => {\r\n      if (Array.isArray(item)) {\r\n        return results.concat(item);\r\n      }\r\n      return results.concat([item]);\r\n    }, []);\r\n    let position = -1;\r\n    for (let index = 0; index < columns.length; index++) {\r\n      const column: any | any[] = columns[index];\r\n      const fields = column && column.field && column.field.split('.').filter(p => p) || null;\r\n      if (!fields) {\r\n        continue;\r\n      }\r\n      if (bindingPaths.concat(fields).join('/') === binding) {\r\n        const fixed = column.fixed;\r\n        if (fixed) {\r\n          const fixedColumns = columns.filter(item => item.fixed === fixed);\r\n          const fixedColumnIndex = this.getIndexFromColumns(fixedColumns, binding);\r\n          if (fixed === 'left') {\r\n            position = frameIndex * FIXED_COLUMN_START_INDEX + fixedColumnIndex;\r\n          } else {\r\n            position = frameIndex * GRID_COLUMN_START_INDEX + 1000 + fixedColumnIndex;\r\n          }\r\n        } else {\r\n          position = frameIndex * GRID_COLUMN_START_INDEX + index;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return position;\r\n  }\r\n  private getIndexFromColumns(columns: any[], binding: string) {\r\n    const bindingPaths = this.frameContext.viewModel.bindingPath.split('/').filter(p => p);\r\n    return columns.findIndex(column => {\r\n      const fields = column && column.field && column.field.split('.').filter(p => p) || null;\r\n      if (!fields) {\r\n        return false;\r\n      }\r\n      if (bindingPaths.concat(fields).join('/') === binding) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n  private selectFirstVerifyInformation(verifyInformations: any[], rootElement?: ElementRef<any>) {\r\n    verifyInformations = this.updateVerifyInformationsIndex(verifyInformations, rootElement);\r\n    verifyInformations.sort((v1: any, v2: any) => Number(v1.position) - Number(v2.position));\r\n    return verifyInformations && verifyInformations.length > 0 && verifyInformations[0] || null;\r\n  }\r\n  private getInputElementById(targetField: string, rootElement: ElementRef<any>) {\r\n    let element = rootElement.nativeElement.ownerDocument.getElementById(targetField) || null;\r\n    if (element && element.tagName !== 'INPUT') {\r\n      const inputs = element.getElementsByTagName('input');\r\n      if (inputs.length) {\r\n        element = inputs[0];\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n  public getFrameContextsByPropertyPath(propertyPath: string, separtor: string = '/'): FrameContext[] {\r\n    if (!propertyPath) {\r\n      return [];\r\n    }\r\n    const frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContexts() || [];\r\n    return frameContexts.filter((frameContext: FrameContext) => {\r\n      const formControls = frameContext && frameContext.form && frameContext.form.ngFormControls || {};\r\n      const bindingPath = frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath || '';\r\n      if (formControls && Object.keys(formControls).length > 0) {\r\n        const key = Object.keys(formControls).find((key: string) => {\r\n          const formControl = formControls[key];\r\n          if (!formControl || !formControl.binding) {\r\n            return false;\r\n          }\r\n          const bindings = formControl.binding.split('.').filter(p => p);\r\n          const bindingPaths = bindingPath.split('/').filter(p => p);\r\n          const fullPath = bindingPaths.concat(bindings);\r\n          return propertyPath.split(separtor).filter(p => p).join('/') === fullPath.join('/');\r\n        });\r\n        return key ? true : false;\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n  public getFormControlIndexByBindingPath(frameContext: FrameContext, binding: string): number {\r\n    const ngFormControls = this.getFormControlsByFrameContext(frameContext);\r\n    if (!ngFormControls) {\r\n      return null;\r\n    }\r\n    const bindings = binding.split('/').filter(p => p);\r\n    return Object.values(ngFormControls).findIndex((ngFormControl: NgFormControl) => {\r\n      if (!ngFormControl) {\r\n        return false;\r\n      }\r\n      const bindingPath = frameContext.viewModel.bindingPath;\r\n      const bindingPaths = bindingPath.split('/').filter(p => p);\r\n      const formControlBindingPaths = ngFormControl.binding.split('.').filter(p => p);\r\n      const fullPath = bindingPaths.concat(formControlBindingPaths);\r\n      return fullPath.join('/') === bindings.join('/');\r\n    });\r\n  }\r\n  public getFieldIndex(frameContext: FrameContext, binding: string) {\r\n    const isGridComponent = this.isGridComponent(frameContext);\r\n    if (isGridComponent) {\r\n      return this.getColumnIndex(frameContext, binding);\r\n    } else {\r\n      return this.getFormControlIndexByBindingPath(frameContext, binding);\r\n    }\r\n  }\r\n  public getFormControlsByFrameContext(frameContext: FrameContext): { [propertyName: string]: NgFormControl } | null {\r\n    return frameContext && frameContext.form && frameContext.form.ngFormControls || null;\r\n  }\r\n  public focusElement(elementId: string, rootElement: ElementRef<any>): boolean {\r\n    let focused = false;\r\n    let elementToFocus = rootElement.nativeElement.ownerDocument.getElementById(elementId);\r\n    // æªè·åå°æå®å­æ®µæ¶ï¼è¿åï¼ä¸åè®¾ç½®ç¦ç¹ã\r\n    if (elementToFocus) {\r\n      // å¦ææå¤ä¸ªidéå¤çåç´ ï¼åä¸å®ä½\r\n      const elements = rootElement.nativeElement.ownerDocument.querySelectorAll(`#${elementId}`);\r\n      if (elements && elements.length > 1) {\r\n        return focused;\r\n      }\r\n      // å¦æç»å®ç®æ å­æ®µçæ§ä»¶ä¸æ¯Inputåç´ ï¼åæ¥æ¾å¶ä¸çº§èç¹ã\r\n      if (elementToFocus.tagName !== 'INPUT') {\r\n        const subElements = elementToFocus.getElementsByTagName('input');\r\n        if (subElements.length) {\r\n          elementToFocus = subElements[0];\r\n        }\r\n      }\r\n      elementToFocus.focus();\r\n      focused = true;\r\n    }\r\n    return focused;\r\n  }\r\n  /**\r\n   * è®¾ç½®ç¦ç¹\r\n   * @param verifyInformation éè¯¯ä¿¡æ¯\r\n   * @param frameContext ä¸ä¸æ\r\n   * @returns \r\n   */\r\n  public focus(verifyInformation: any, frameContext: FrameContext) {\r\n    if (!verifyInformation) {\r\n      return;\r\n    }\r\n    const isGridValidation = verifyInformation.index !== null;\r\n    if (isGridValidation) {\r\n      const grid = this.getGridRef(frameContext);\r\n      if (grid) {\r\n        setTimeout(() => {\r\n          grid.editCell(verifyInformation.id, verifyInformation.targetField);\r\n        }, 0);\r\n      }\r\n    } else {\r\n      const frameElement = this.getComponentRef(frameContext);\r\n      const elementId = verifyInformation.targetField;\r\n      this.focusById(elementId, frameElement);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * éè¿æ§ä»¶idè®¾ç½®ç¦ç¹\r\n   * @param elementId \r\n   * @param elementRef \r\n   */\r\n  private focusById(elementId: string, elementRef?: ElementRef) {\r\n    const document: any = elementRef && elementRef.nativeElement.ownerDocument || window.document;\r\n    if (document) {\r\n      const element = document.getElementById(elementId);\r\n      if (element.tagName !== 'INPUT') {\r\n        const subElements = element.getElementsByTagName('input');\r\n        if (subElements.length) {\r\n          const input = subElements[0];\r\n          if (input && typeof input.focus === 'function') {\r\n            input.focus();\r\n          }\r\n        }\r\n      } else {\r\n        element.focus();\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * è·åç»ä»¶å®ä¾\r\n   * @param frameContext \r\n   * @returns \r\n   */\r\n  private getComponentRef(frameContext: FrameContext) {\r\n    return this.frameContext && this.frameContext.injector.get<ElementRef>(ElementRef, null) || null;\r\n  }\r\n  /**\r\n   * è·ågridå®ä¾\r\n   * @param frameContext frameContext\r\n   * @returns \r\n   */\r\n  private getGridRef(frameContext: FrameContext): FocusableInvalidationGrid {\r\n    const namespace = frameContext.namespace;\r\n    const bindingPath = frameContext.viewModel.bindingPath;\r\n    const frameContexts: FrameContext[] = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace) || [];\r\n    const matchedFrameContexts = frameContexts.filter((frameContext: FrameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).toString() === bindingPath.split('/').filter(p => p).toString());\r\n    let result = null;\r\n    if (matchedFrameContexts) {\r\n      matchedFrameContexts.every((frameContext: FrameContext) => {\r\n        const frameId = frameContext.frameId;\r\n        const componentsMap = this.frameContext.appContext.componentManager.getComponentsByFrameId(frameId);\r\n        if (!componentsMap) {\r\n          return true;\r\n        }\r\n        const datagridComponent = Array.from(componentsMap.values()).find((component: any) => component && component['__component_type__'] === 'DatagridComponent');\r\n        if (datagridComponent) {\r\n          result = datagridComponent;\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nexport { FocusableInvalidationGrid, FocusInvalidService };\r\n","import { Injectable } from '@angular/core';\r\nimport { Repository, FrameContext} from '@farris/devkit';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { Observable, Subject, Subscriber } from 'rxjs';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { FormNotifyService } from './form-notify.service';\r\nimport { LanguageService } from './languag.service';\r\n\r\n\r\nconst POSTER = 'iframePoster';\r\nconst RECEIVER = 'iframeReceiver';\r\nconst REPOSITORY = 'repository';\r\n// window.hashä¸­funcIdçå±æ§å\r\nconst FUNC_ID = 'funcId=';\r\nconst TAB_ID = 'tabId=';\r\n/**\r\n * ChangeItemService\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass ChangeItemService {\r\n\r\n  public top = top;\r\n  private funcId: string;\r\n  private tabId: string;\r\n  public itemChangePoster = new Subject<any>();\r\n  public itemChangeReceiver = new Subject<any>();\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private repository: Repository<any>,\r\n    private frameContext: FrameContext,\r\n    private notifyService: FormNotifyService,\r\n    private languageService: LanguageService\r\n  ) {\r\n  }\r\n\r\n  init() {\r\n    this.top['topMap'] = this.top['topMap'] || {};\r\n    this.changeItem = this.changeItem.bind(this);\r\n  }\r\n\r\n  setBykey(key: string, value: any) {\r\n    this.top['topMap'] = this.top['topMap'] || {};\r\n    this.top['topMap'][this.tabId] = this.top['topMap'][this.tabId] || {};\r\n    const topObject = this.top['topMap'][this.tabId];\r\n    topObject[key] = value;\r\n  }\r\n\r\n  getByKey(key: string) {\r\n    const topObject = this.top['topMap'][this.tabId] || {};\r\n    return topObject[key];\r\n  }\r\n\r\n  // å»ºç«iframeéä¿¡\r\n  setIframePoster() {\r\n    if (this.getByKey[POSTER]) {\r\n      return;\r\n    } else {\r\n      this.setBykey(POSTER, this.itemChangePoster);\r\n    }\r\n  }\r\n\r\n  getIframePoster() {\r\n    this.itemChangePoster = this.getByKey(RECEIVER);\r\n    this.setBykey(RECEIVER, this.itemChangeReceiver);\r\n  }\r\n\r\n  changeItem(type: string, id: string, parentId: string) {\r\n    // æ ¹æ®æ¯å¦æ¯å¼¹åºå¼å¡çåä¸åçtabId\r\n    const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n    const virtualRootComponent = virtualRootFrameContext.frameComponent;\r\n    const isDialogComponent = virtualRootComponent['isDialogRootComponent'] || false;\r\n    if (isDialogComponent) {\r\n      this.tabId = window.location.hash.split(TAB_ID)[1].slice(0, window.location.hash.split(TAB_ID)[1].indexOf('&'));\r\n    } else {\r\n      this.tabId = parentId;\r\n    }\r\n    this.itemChangeReceiver = this.getByKey(RECEIVER);\r\n    return Observable.create((subscriber: Subscriber<any>) => {\r\n      this.getNextItemByCurrentId(id, type).subscribe((result: any) => {\r\n        subscriber.next(result);\r\n      });\r\n    });\r\n  }\r\n\r\n  // å¨liståå§åæ¶è°ç¨ï¼ç¼å­listçrepository\r\n  setRepository() {\r\n    if (window.location.hash.includes(TAB_ID)) {\r\n      this.tabId = window.location.hash.split(TAB_ID)[1].slice(0, window.location.hash.split(TAB_ID)[1].indexOf('&'));\r\n      this.setBykey(REPOSITORY, this.frameContext.repository);\r\n      this.setIframePoster();\r\n      this.getIframePoster();\r\n    }\r\n  }\r\n\r\n  // æ ¹æ®ç±»ååidè·åç¸é»çæ°æ®\r\n  getNextItemByCurrentId(currentId: string, type: string) {\r\n    const repository = this.getByKey(REPOSITORY);\r\n    const { pageSize, pageIndex, total } = repository.entityCollection.paginationInfo;\r\n    let currentIdx = null;\r\n    const list = repository.entityCollection.getAllEntities();\r\n    list.find((x: any, idx: string) => {\r\n      if (x.id === currentId) {\r\n        currentIdx = idx;\r\n      }\r\n    });\r\n    // æ²¡æå¨åè¡¨ä¸­æ¾å°æ°æ®ï¼è¿åç©º\r\n    if (currentIdx === null) {\r\n      // æ°å¢åæ¶å½åæ æ°æ®æ¶ç¹ä¸ä¸æ¡ä¸ä¸æ¡\r\n      if (list.length) {\r\n        switch (type) {\r\n          case 'prev':\r\n            return of(list[list.length - 1].id);\r\n            break;\r\n          case 'next':\r\n            this.notifyService.info(this.languageService.changeToLast, { hideTitle: true });\r\n            return of(null);\r\n            break;\r\n        }\r\n      }\r\n      return of(null);\r\n    }\r\n    let nextIdx = currentIdx;\r\n    switch (type) {\r\n      case 'prev':\r\n        // å½åé¡µç¬¬ä¸æ¡,ä¸éç¬¬ä¸é¡µ,åä¸ä¸é¡µæåä¸æ¡\r\n        if (currentIdx === 0 && pageIndex !== 1) {\r\n          return repository.getEntities([], [], pageSize, pageIndex - 1).pipe(\r\n            switchMap(result => {\r\n              nextIdx = pageSize - 1;\r\n              return of(result[nextIdx].id);\r\n            })\r\n          );\r\n        }\r\n        // ç¬¬ä¸é¡µç¬¬ä¸æ¡ï¼ä»è¿ååææ°æ®\r\n        else if (currentIdx === 0 && pageIndex === 1) {\r\n          this.notifyService.info(this.languageService.changeToFirst, { hideTitle: true });\r\n          return of(list[nextIdx].id);\r\n        }\r\n        // ä¸æ¯ç¬¬ä¸æ¡ï¼è¿åä¸ä¸æ¡\r\n        else {\r\n          nextIdx = currentIdx - 1;\r\n          return of(list[nextIdx].id);\r\n        }\r\n        break;\r\n      case 'next':\r\n        // è¶è¿å½åé¡µ\r\n        if (currentIdx + 1 + 1 > list.length) {\r\n          // ä¸éæåä¸æ¡æ°æ®,åä¸ä¸é¡µç¬¬ä¸æ¡æ°æ®\r\n          if (((pageIndex - 1) * pageSize + currentIdx + 1) < total) {\r\n            return repository.getEntities([], [], pageSize, pageIndex + 1).pipe(switchMap(result => {\r\n              return of(result[0].id);\r\n            }));\r\n          }\r\n          // æåä¸æ¡æ°æ®ï¼ä»è¿ååæ°æ®\r\n          else {\r\n            this.notifyService.info(this.languageService.changeToLast, { hideTitle: true });\r\n            return of(list[nextIdx].id);\r\n          }\r\n        } else {\r\n          nextIdx = currentIdx + 1;\r\n          return of(list[nextIdx].id);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { ChangeItemService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable, of, empty, EMPTY } from 'rxjs';\r\nimport { tap, switchMap, concatMap, catchError } from 'rxjs/operators';\r\nimport { Repository, BindingData, Entity, ViewModel, BindingList, EntityPathConverter, BindingObject } from '@farris/devkit';\r\nimport { BefRepository, BefRepositoryUtil, BefDataPathUtil } from '@farris/bef';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\nimport { CommandService } from '../command-service';\r\nimport { FilterConditionService } from '../filter-condition.service';\r\n// tslint:disable: no-string-literal max-line-length\r\n\r\n/**\r\n * åè¡¨ä»åºæå¡\r\n */\r\n@Injectable()\r\nclass ListDataService {\r\n\r\n  /**\r\n   * æé \r\n   * @param msgService msgService\r\n   * @param repository repository\r\n   * @param bindingData bindingData\r\n   * @param loadingService loadingService\r\n   * @param languageService languageService\r\n   * @param formNotifyService formNotifyService\r\n   * @param formErrorService formErrorService\r\n   * ! @param viewModel viewModel,vmæ¯åææ³¨å¥çï¼èè¡¨åè·åä¸å°ï¼ä¸å®è¦åéç©ºå¤æ­\r\n   * @param filterConditionService filterConditionService\r\n   */\r\n  constructor(\r\n    private msgService: FormMessageService,\r\n    private repository: Repository<any>,\r\n    private bindingData: BindingData,\r\n    private loadingService: FormLoadingService,\r\n    @Optional() private languageService: LanguageService,\r\n    private formNotifyService: FormNotifyService,\r\n    private formErrorService: FormErrorService,\r\n    private viewModel: ViewModel,\r\n    private filterConditionService: FilterConditionService,\r\n  ) {\r\n    if (!languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n\r\n    // if (!filterConditionService) {\r\n    //   this.filterConditionService = new FilterConditionService();\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * å è½½\r\n   */\r\n  public load(filter?: string, sort?: string): Observable<Entity[]> {\r\n\r\n    // åæ°å¤ç\r\n    filter = !filter ? '[]' : filter;\r\n    sort = !sort ? '[]' : sort;\r\n    // åå¹¶è¿æ»¤æ¡ä»¶\r\n    filter = this.mergeFilterConditions(filter);\r\n    // åå¹¶æåºæ¡ä»¶\r\n    sort = this.mergeSortConditions(sort);\r\n\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(200);\r\n    const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), null, null);\r\n    return query$.pipe(\r\n      tap(\r\n        () => {\r\n          // è§¦åè¿ç«¯åè®¡äºä»¶\r\n          this.fireQueryEvent(filter);\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.loadFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * è¿æ»¤æ°æ®\r\n   * @param filter è¿æ»¤æ¡ä»¶\r\n   * @param sort æåºæ¡ä»¶\r\n   */\r\n  public filter(filter?: string, sort?: string): Observable<Entity[]> {\r\n    // åæ°å¤ç\r\n    filter = !filter ? '[]' : filter;\r\n    sort = !sort ? '[]' : sort;\r\n    // åå¹¶è¿æ»¤æ¡ä»¶\r\n    filter = this.mergeFilterConditions(filter);\r\n    // åå¹¶æåºæ¡ä»¶\r\n    sort = this.mergeSortConditions(sort);\r\n\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(200);\r\n    const query$ = this.repository.filter(JSON.parse(filter), JSON.parse(sort));\r\n    return query$.pipe(\r\n      tap(\r\n        () => {\r\n          // è§¦åè¿ç«¯åè®¡äºä»¶\r\n          this.fireQueryEvent(filter);\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.loadFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * æ¥è¯¢\r\n   */\r\n  public query(filter: string, sort: string, pageSize: number, pageIndex: number): Observable<Entity[]> {\r\n    // åæ°å¤ç\r\n    filter = (filter === '') ? '[]' : filter;\r\n    sort = (sort === '') ? '[]' : sort;\r\n    // åå¹¶è¿æ»¤æ¡ä»¶\r\n    filter = this.mergeFilterConditions(filter);\r\n    // åå¹¶æåºæ¡ä»¶\r\n    sort = this.mergeSortConditions(sort);\r\n    // æ§è¡åæ°\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(5);\r\n    const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), pageSize, pageIndex);\r\n    return query$.pipe(\r\n      tap(\r\n        () => {\r\n          // è§¦åè¿ç«¯åè®¡äºä»¶\r\n          this.fireQueryEvent(filter);\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.queryFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  public queryChild(filter: string, sort: string) {\r\n    // const isUpdateWithPaging = this.viewModel.frameContext.root.params.get('updateWithPaging') || false;\r\n    // if (isUpdateWithPaging) {\r\n    //   return of(null);\r\n    // }\r\n    // tslint:disable-next-line: max-line-length\r\n    const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);\r\n    const paths = fullPaths.slice(0, fullPaths.length - 1);\r\n    // debug\r\n    // tslint:disable-next-line: max-line-length\r\n    const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);\r\n    const bindingData = this.viewModel.bindingData;\r\n    let nodeCode = bindingPaths[bindingPaths.length - 1];\r\n    nodeCode = nodeCode.substr(0, nodeCode.length - 1);\r\n    // è·åä¸çº§å®ä½\r\n    const parentPaths = bindingPaths.slice(0, bindingPaths.length - 1);\r\n    const BindingList = bindingData.getValue(parentPaths) as BindingList;\r\n    if (!BindingList) {\r\n      return;\r\n    }\r\n    this.viewModel.frameContext.appContext.params.delete(\"retrieveing\");\r\n    const configPath = `/${nodeCode}`;\r\n    const config = this.repository.entityCollection.getPaginationConfigByPath(configPath);\r\n    if (config) {\r\n      const { pageIndex = 1, pageSize = 0 } = config;\r\n      // pageSize = 0è¡¨ç¤ºæªåé¡µ\r\n      if (pageSize !== 0) {\r\n        this.viewModel.frameContext.appContext.params.set('queryChild', true);\r\n        const request$ = this.repository.queryChild(paths, pageIndex, pageSize);\r\n        return request$.pipe(\r\n          tap(() => { },\r\n            error => {\r\n              this.formErrorService.exception(this.languageService.queryFailed, error);\r\n            }\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * è·ååé¡µä¿¡æ¯\r\n   * @param nodeCode nodeCode\r\n   * @returns åé¡µä¿¡æ¯ï¼åæ¬ï¼åé¡µå¤§å°ãå½åé¡µç \r\n   * @description åºæ¬åé¡µä¿¡æ¯å¨åé¡µä¿¡æ¯ä¸­å­å¨æ¶keyä¸ºnodeCode\r\n   */\r\n  /*private getPagingInfo(nodeCode: string) {\r\n    const result: { pageIndex?: number, pageSize?: number } = {};\r\n    const nodeCodePath = `/${nodeCode}`;\r\n    const defaultPagingInfo = this.repository.entityCollection.getPaginationConfigByPath(nodeCodePath);\r\n    const pageSize = defaultPagingInfo && defaultPagingInfo.pageSize || 0;\r\n    const pageIndex = defaultPagingInfo && defaultPagingInfo.pageIndex || 1;\r\n    result.pageIndex = pageIndex;\r\n    result.pageSize = pageSize;\r\n    return result;\r\n  }*/\r\n  /**\r\n   * è¿½å ä¸æ¡æ°æ°æ®\r\n   */\r\n  public append(): Observable<Entity> {\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'append' });\r\n    }\r\n    const append$ = this.repository.append();\r\n    return append$.pipe(\r\n      tap(() => {\r\n        this.loadingService.hideDelayLoading(loadingTimerId);\r\n      },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.appendFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * å½åè¡åæåæå¥æ°æ®\r\n   * @param position 1 | -1\r\n   */\r\n  public insert(position: 1 | -1 = -1) {\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'insert' });\r\n    }\r\n    const append$ = this.repository.insert(position);\r\n    return append$.pipe(\r\n      tap(() => {\r\n        this.loadingService.hideDelayLoading(loadingTimerId);\r\n      },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.appendFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æäº¤åæ´ï¼æ¹éç¼è¾é¡µé¢ï¼è¡åæ¢æ¶æäº¤å¢éï¼\r\n   */\r\n  public updateChanges(): Observable<boolean> {\r\n    const update$ = this.repository.updateAllChanges();\r\n    return update$;\r\n  }\r\n\r\n  /**\r\n   * æ¹éä¿å­\r\n   * @param successMsg èªå®ä¹æç¤ºä¿¡æ¯\r\n   */\r\n  public save(successMsg?: string): Observable<boolean> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'save' });\r\n    }\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const save$ = this.repository.applyChanges();\r\n    const result$ = save$.pipe(\r\n      tap(\r\n        () => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          if (successMsg && successMsg.trim()) {\r\n            this.formNotifyService.success(successMsg, { hideTitle: true });\r\n          } else {\r\n            this.formNotifyService.success(this.languageService.saveSuccess, { hideTitle: true });\r\n          }\r\n        },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.multiSaveFailed, error);\r\n        }\r\n      )\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * å é¤\r\n   * @param id è¦å é¤çæ°æ®çid\r\n   * @param ifSave æ¯å¦ä¿å­\r\n   * @param successMsg èªå®ä¹æç¤ºä¿¡æ¯\r\n   * @param confirm æ¯å¦éè¦ç¡®è®¤\r\n   * @param breakable æ¯å¦å¯ä¸­æ­ï¼ifSaveä¸ºfalseæ¶æµä¼ä¸­æ­\r\n   */\r\n  public remove(id: string, ifSave?: boolean | string, successMsg?: string, confirm: boolean | string = true, breakable: boolean | string = true): Observable<any> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'delete' });\r\n    }\r\n    if (!id) {\r\n      this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\r\n      return empty();\r\n    }\r\n    confirm = (confirm === false || confirm === 'false') ? false : true;\r\n    breakable = (breakable === false || breakable === 'false') ? false : true;\r\n    const action$ = confirm ? this.msgService.question(this.languageService.confirmDeletion) : of(true);\r\n    return action$.pipe(\r\n      concatMap(result => {\r\n        if (!result) {\r\n          return empty();\r\n        }\r\n        ifSave = (ifSave === false || ifSave === 'false') ? false : true;\r\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n        const remove$ = this.repository.removeById(id, ifSave);\r\n        if (!remove$) {\r\n          return empty();\r\n        }\r\n        return remove$.pipe(\r\n          tap(\r\n            () => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              if (successMsg && successMsg.trim()) {\r\n                this.formNotifyService.success(successMsg, { hideTitle: true });\r\n              } else {\r\n                this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n              }\r\n            },\r\n            error => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              this.formErrorService.exception(this.languageService.deleteFailed, error);\r\n            }\r\n          ),\r\n          switchMap(() => {\r\n            if (ifSave === true || !breakable) {\r\n              // return this.load();\r\n              return of([]);\r\n            } else {\r\n              return empty();\r\n            }\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æ¹éå é¤\r\n   * @param ids ids\r\n   * @param ifSave æ¯å¦ä¿å­\r\n   * @param successMsg èªå®ä¹æç¤ºä¿¡æ¯\r\n   * @param deleteCurrentRowIfNoChecks æ²¡æå¾éæ¶å é¤å½åè¡\r\n   */\r\n  public removeRows(ids: string[], ifSave?: boolean | string, successMsg?: string, deleteCurrentRowIfNoChecks: boolean | string = false): Observable<any> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'removeRows' });\r\n    }\r\n    deleteCurrentRowIfNoChecks = (deleteCurrentRowIfNoChecks === 'true' || deleteCurrentRowIfNoChecks === true) ? true : false;\r\n    if (!ids || ids.length === 0) {\r\n      const currentId = this.bindingData.list.currentId;\r\n      if (deleteCurrentRowIfNoChecks === true && currentId) {\r\n        ids = [this.bindingData.list.currentId];\r\n      } else {\r\n        this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\r\n        return empty();\r\n      }\r\n    }\r\n    const action$ = this.msgService.confirm(this.languageService.confirmDeletion);\r\n    return action$.pipe(\r\n      concatMap(result => {\r\n        if (!result) {\r\n          return empty();\r\n        }\r\n        if (typeof ifSave === 'undefined') {\r\n          ifSave = true;\r\n        }\r\n        if (typeof ifSave === 'string') {\r\n          ifSave = ifSave.toLowerCase() === 'false' ? false : true;\r\n        }\r\n        ifSave = (ifSave === false) ? false : true;\r\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n        const remove$ = this.repository.removeByIds(ids, ifSave);\r\n\r\n        if (!remove$) {\r\n          return empty();\r\n        }\r\n\r\n        return remove$.pipe(\r\n          tap(\r\n            () => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              if (successMsg && successMsg.trim()) {\r\n                this.formNotifyService.success(successMsg, { hideTitle: true });\r\n              } else {\r\n                this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n              }\r\n              // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n            },\r\n            error => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              this.formErrorService.exception(this.languageService.deleteFailed, error);\r\n            }\r\n          ),\r\n          switchMap(() => {\r\n            return of([]);\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * å é¤åçå·æ°\r\n   */\r\n  public refreshAfterRemoving(loadCmdName: string, loadCmdFrameId: string): Observable<any> {\r\n    if (this.viewModel && loadCmdName && loadCmdFrameId) {\r\n      const commandService = this.viewModel.frameContext.injector.get<CommandService>(CommandService, null);\r\n      return commandService.execute(loadCmdName, loadCmdFrameId);\r\n    }\r\n    return this.load();\r\n  }\r\n\r\n  /**\r\n   * å·æ°\r\n   * @param loadCmdName å·æ°å½ä»¤\r\n   * @param loadCmdFrameId å·æ°å½ä»¤æå¨çframeId\r\n   */\r\n  public refresh(loadCmdName: string, loadCmdFrameId: string): Observable<any> {\r\n    if (this.viewModel && loadCmdName && loadCmdFrameId) {\r\n      const commandService = this.viewModel.frameContext.injector.get<CommandService>(CommandService, null);\r\n      return commandService.execute(loadCmdName, loadCmdFrameId);\r\n    }\r\n    return this.load();\r\n  }\r\n  /**\r\n   * åæ¶æ¶æ£æµæªä¿å­è®°å½\r\n   */\r\n  public cancel(): Observable<any> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'cancel' });\r\n    }\r\n    // æ²¡æåæ´æ¶ç´æ¥åæ¶\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    const hasUnsavedData = BefRepositoryUtil.isExistUnsaveData(befRepository);\r\n    if (hasUnsavedData === false) {\r\n      return this._cancel();\r\n    }\r\n\r\n    const confirmResult$ = this.msgService.question(this.languageService['cancelWithoutSave']).pipe(\r\n      switchMap((ifCancel: boolean) => {\r\n        if (ifCancel === false) {\r\n          return EMPTY;\r\n        }\r\n\r\n        return this._cancel();\r\n      })\r\n    );\r\n\r\n    return confirmResult$;\r\n  }\r\n  /**\r\n   * è¿ååæ´é\r\n   * @description ä¸å¸¦åæ´æ£æµæç¤º\r\n   */\r\n  public revert(): Observable<any> {\r\n    return this._cancel();\r\n  }\r\n  /**\r\n   * åæ¶ï¼åé¨åæ¶ï¼\r\n   */\r\n  private _cancel(): Observable<any> {\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const cancel$ = this.repository.cancelChanges();\r\n    return cancel$.pipe(\r\n      tap(() => {\r\n        this.loadingService.hideDelayLoading(loadingTimerId);\r\n      },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.cancelFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * è·åæ ¹ç»ä»¶appContext\r\n   */\r\n  private get messagePipe() {\r\n    if (this.viewModel && this.viewModel.frameContext) {\r\n      const appContext = this.viewModel.frameContext.getFormAppContext() || null;\r\n      if (appContext) {\r\n        return appContext.messagePipe || null;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * è§¦åæ¥è¯¢äºä»¶\r\n   * @param filters è¿æ»¤æ¡ä»¶\r\n   */\r\n  private fireQueryEvent(filters: any) {\r\n    const messagePipe = this.messagePipe;\r\n    // const frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId || null;\r\n    if (messagePipe) {\r\n      messagePipe.next({ type: 'query' });\r\n    }\r\n  }\r\n  /**\r\n   * åå¹¶è¿æ»¤æ¡ä»¶\r\n   * @param filter è¡¨åè¿æ»¤æ¡ä»¶\r\n   */\r\n  private mergeFilterConditions(filter: any) {\r\n    if (typeof filter === 'string') {\r\n      filter = JSON.parse(filter) || [];\r\n    }\r\n    const filters: Array<any> = filter;\r\n    const bindingPath = this.viewModel && this.viewModel.bindingPath || null;\r\n    if (bindingPath) {\r\n      const originalConditions = this.viewModel && this.viewModel.frameContext.repository.filterConditionManager.getFilters(bindingPath) || [];\r\n      // this.filterConditionService.getFilters(bindingPath) || [];\r\n      const conditions = Array.from(originalConditions);\r\n      if (conditions && conditions.length > 0) {\r\n        /*filters.forEach((item: any, index: number) => {\r\n          const field = item.FilterField || null;\r\n          if (field) {\r\n            const duplicateIndex = conditions.findIndex(condition => condition.FilterField === field);\r\n            if (duplicateIndex !== -1) {\r\n              filters[index] = conditions[duplicateIndex];\r\n              conditions.splice(duplicateIndex, 1);\r\n            }\r\n          }\r\n        });*/\r\n        // ä¿®æ¹å½ä»¤ä¸è¿æ»¤æ¡ä»¶çæåä¸ä¸ªæ¥è¯¢å³ç³»ä¸ºand\r\n        if (filters.length > 0) {\r\n          // æåä¸ä¸ªè¿æ»¤æ¡ä»¶\r\n          const lastFilter = filters[filters.length - 1];\r\n          if (lastFilter) {\r\n            if (lastFilter.hasOwnProperty('Relation')) {\r\n              delete lastFilter.Relation;\r\n            }\r\n            lastFilter.relation = 1;\r\n          }\r\n        }\r\n        // åå¹¶æ°çè¿æ»¤æ¡ä»¶ååæ¥å½ä»¤ä¸çè¿æ»¤æ¡ä»¶\r\n        filters.push(...conditions);\r\n      }\r\n    }\r\n\r\n    return JSON.stringify(filters);\r\n  }\r\n  /**\r\n   * åå¹¶æåºæ¡ä»¶\r\n   * @param sort æåºæ¡ä»¶\r\n   */\r\n  private mergeSortConditions(sort: any) {\r\n    if (typeof sort === 'string') {\r\n      sort = JSON.parse(sort) || [];\r\n    }\r\n    const sorts: Array<any> = sort;\r\n    const bindingPath = this.viewModel && this.viewModel.bindingPath || null;\r\n    if (bindingPath) {\r\n      // è·åå½åç»å®è·¯å¾çæææåºæ¡ä»¶\r\n      const originalConditions = this.viewModel && this.viewModel.frameContext.repository.sortConditionManager.getConditionsByBindingPath(bindingPath, (direction) => {\r\n        if (direction === 'asc') {\r\n          return 0;\r\n        } else { return 1; }\r\n      }) || [];\r\n      const conditions = Array.from(originalConditions);\r\n      // å¦æå½åç»å®è·¯å¾ææåºæ¡ä»¶ï¼åå¿½ç¥å½ä»¤ä¸é¢å¶çæåºæ¡ä»¶\r\n      if (conditions && conditions.length > 0) {\r\n        // éåå·²æçè¿æ»¤æ¡ä»¶ï¼å¦ææéå¤çfieldï¼ç¨åèçè¦çå·²æç\r\n        /*sorts.forEach((item: any, index: number) => {\r\n          const field = item.SortField || null;\r\n          if (field) {\r\n            const duplicateIndex = conditions.findIndex(condition => condition.SortField === field);\r\n            if (duplicateIndex !== -1) {\r\n              sorts[index] = conditions[duplicateIndex];\r\n              conditions.splice(duplicateIndex, 1);\r\n            }\r\n          }\r\n        });*/\r\n        return JSON.stringify(conditions);\r\n        // å°å¶ä½æåºæ¡ä»¶æ·»å å°æåºæ°ç»\r\n        // sorts.push(...conditions);\r\n      }\r\n    }\r\n    return JSON.stringify(sorts);\r\n  }\r\n}\r\nexport { ListDataService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable, empty, of, EMPTY } from 'rxjs';\r\nimport { tap, switchMap, concatMap } from 'rxjs/operators';\r\nimport { BindingList, Repository, ViewModel } from '@farris/devkit';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\n\r\n/**\r\n * å­åè¡¨åæ°æå¡\r\n */\r\n@Injectable()\r\nclass SubListDataService {\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private msgService: FormMessageService,\r\n    private repository: Repository<any>,\r\n    private loadingService: FormLoadingService,\r\n    private viewModel: ViewModel,\r\n    @Optional() private languageService: LanguageService,\r\n    private formNotifyService: FormNotifyService,\r\n    private formErrorService: FormErrorService\r\n  ) {\r\n    if (!languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n    this.viewModel = viewModel;\r\n  }\r\n\r\n  /**\r\n   * æ°å¢\r\n   */\r\n  add(): Observable<any> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'add' });\r\n    }\r\n    const path = this.getPath();\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const append$ = this.repository.appendByPath(path);\r\n    return append$.pipe(\r\n      tap(() => {\r\n        this.loadingService.hideDelayLoading(loadingTimerId);\r\n      },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.addFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * å¨æå®ä½ç½®æå¥\r\n   * @param position ä½ç½®\r\n   */\r\n  public insert(position: 1 | -1 = -1) {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'insert' });\r\n    }\r\n    const path = this.getPath();\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const append$ = this.repository.insertByPath(path, position);\r\n    return append$.pipe(\r\n      tap(() => {\r\n        this.loadingService.hideDelayLoading(loadingTimerId);\r\n      },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.formErrorService.exception(this.languageService.addFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * å é¤å­è¡¨æ°æ®\r\n   */\r\n  remove(id: string, successMsg?: string): Observable<any> {\r\n    const msg = successMsg ? successMsg : '';\r\n    return this.innerRemove(id, false, msg);\r\n  }\r\n\r\n  /**\r\n   * å é¤å­è¡¨æ°æ®ï¼ä¸ç¡®è®¤ï¼\r\n   */\r\n  removeWithoutConfirm(id: string): Observable<any> {\r\n    return this.innerRemove(id, true, '');\r\n  }\r\n\r\n  /**\r\n   * æ¹éå é¤å­è¡¨\r\n   * @param ids ids\r\n   * @param successMsg èªå®ä¹æç¤ºä¿¡æ¯\r\n   */\r\n  removeChildrenByIds(ids: string, successMsg?: string): Observable<any> {\r\n    if (!ids) {\r\n      this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    const action$ = this.msgService.confirm(this.languageService.confirmDeletion);\r\n    return action$.pipe(\r\n      concatMap(result => {\r\n        if (!result) {\r\n          return EMPTY;\r\n        }\r\n        const path = this.getPath();\r\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n        const remove$ = this.repository.batchRemoveByPath(path, ids);\r\n        return remove$.pipe(\r\n          tap(() => {\r\n            this.loadingService.hideDelayLoading(loadingTimerId);\r\n            if (successMsg && successMsg.trim()) {\r\n              this.formNotifyService.success(successMsg, { hideTitle: true });\r\n            } else {\r\n              this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n            }\r\n            // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n          },\r\n            error => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              this.formErrorService.exception(this.languageService.deleteFailed, error);\r\n            }\r\n          )\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * å é¤\r\n   */\r\n  innerRemove(id: string, isConfirm: boolean, successMsg: string): Observable<any> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'remove' });\r\n    }\r\n    if (!id) {\r\n      this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\r\n      return empty();\r\n    }\r\n\r\n    let action$: Observable<boolean>;\r\n    if (isConfirm === false) {\r\n      action$ = this.msgService.question(this.languageService.confirmDeletion);\r\n    } else {\r\n      action$ = of(true);\r\n    }\r\n\r\n    return action$.pipe(\r\n      concatMap(result => {\r\n        if (!result) {\r\n          return empty();\r\n        }\r\n        const path = this.getPath();\r\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n        const remove$ = this.repository.removeByPath(path, id);\r\n        return remove$.pipe(\r\n          tap(() => {\r\n            this.loadingService.hideDelayLoading(loadingTimerId);\r\n            if (successMsg && successMsg.trim()) {\r\n              this.formNotifyService.success(successMsg, { hideTitle: true });\r\n            } else {\r\n              this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n            }\r\n            // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n          },\r\n            error => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              this.formErrorService.exception(this.languageService.deleteFailed, error);\r\n            }\r\n          )\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * å é¤å¹¶ä¿å­\r\n   * @param id id\r\n   * @param successMsg èªå®ä¹æç¤ºä¿¡æ¯\r\n   */\r\n  removeAndSave(id: string, successMsg?: string): Observable<any> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'removeAndSave' });\r\n    }\r\n    if (!id) {\r\n      this.formNotifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });\r\n      return empty();\r\n    }\r\n    const action$ = this.msgService.confirm(this.languageService.confirmDeletion);\r\n    return action$.pipe(\r\n      concatMap(result => {\r\n        if (!result) {\r\n          return empty();\r\n        }\r\n\r\n        // å é¤å­è¡¨æ°æ®\r\n        const path = this.getPath();\r\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n        const remove$ = this.repository.removeByPath(path, id);\r\n\r\n        return remove$.pipe(\r\n\r\n          // æ§è¡ä¸»è¡¨ä¿å­\r\n          switchMap(() => {\r\n            const fid = this.viewModel.bindingData.list.currentId as string;\r\n            return this.repository.applyChangesById(fid);\r\n          }),\r\n\r\n          // éèå è½½ä¸­\r\n          tap(() => {\r\n            this.loadingService.hideDelayLoading(loadingTimerId);\r\n            if (successMsg && successMsg.trim()) {\r\n              this.formNotifyService.success(successMsg, { hideTitle: true });\r\n            } else {\r\n              this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n            }\r\n            // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n          },\r\n            error => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              this.formErrorService.exception(this.languageService.deleteFailed, error);\r\n            })\r\n        );\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * ä¸ç§»æä¸ç§»æ°æ®\r\n   * @param direction æ¹åï¼up | down\r\n   * @param field æåºå­æ®µ\r\n   * @param targets è¦ç§»å¨çæ°æ®\r\n   * @description\r\n   * ä½¿ç¨è¯¥æ¹æ³æ¶æåºå­æ®µå¿é¡»æå¼ï¼å¦åæ æ³æåº\r\n   */\r\n  public move(direction: string | 'up' | 'down', field: string, targets: Array<any> | string) {\r\n    if (!targets) {\r\n      return;\r\n    }\r\n    if (typeof targets === 'string') {\r\n      targets = targets.split(',').filter(p => p);\r\n    }\r\n    const bindingPath = this.viewModel && this.viewModel.bindingPath || null;\r\n    if (!bindingPath) {\r\n      return;\r\n    }\r\n    const bindingList = this.viewModel.bindingData.getList() as BindingList;\r\n    if (!bindingList || bindingList.length < 1) {\r\n      return;\r\n    }\r\n    targets.forEach((target) => {\r\n      const index = bindingList.getIndexById(target);\r\n      if (index === -1) {\r\n        return;\r\n      }\r\n      const item = bindingList.findById(target);\r\n      const position = item.getValue(field);\r\n      const base = direction === 'up'  ? -1 : 1;\r\n      // å¾äº¤æ¢çè¡ä¿¡æ¯\r\n      const exchangeRowIndex = index + base;\r\n      if (exchangeRowIndex < 0 || exchangeRowIndex > bindingList.length) {\r\n        // ç¬¬ä¸è¡æ æ³ä¸ç§»ï¼æåä¸è¡æ æ³ä¸ç§»\r\n        return;\r\n      }\r\n      const exchangeRowId = bindingList.getIdByIndex(exchangeRowIndex);\r\n      const exchangeRow = bindingList.findById(exchangeRowId);\r\n      const exchangeRowPosition = exchangeRow[field];\r\n      // ç§»å¨è¡åäº¤æ¢è¡é½æ²¡ææåº\r\n      if (this.isNullOrEmpty(position) && this.isNullOrEmpty(exchangeRowPosition)) {\r\n        return;\r\n      }\r\n      bindingList.swapById(target, exchangeRowId);\r\n      exchangeRow.setValue(field, position,true,true);\r\n      item.setValue(field, exchangeRowPosition,true,true);\r\n    });\r\n\r\n  }\r\n  private isNullOrEmpty(value: any) {\r\n    return value === '' || value === null || value === undefined;\r\n  }\r\n  /**\r\n   * è·åå®æ´è·¯å¾\r\n   * @todoï¼å¼ºè¯å«å°ä»è¡¨è¿ä¸çº§\r\n   * fixed by justin: æ ¹æ®bindingPathï¼å¦ææ¯ä»ä»è¡¨ï¼éè¦è·åä¸»è¡¨æ°æ®idåä»è¡¨æ°æ®id\r\n   */\r\n  private getPath(): string {\r\n    const bindingPath = this.viewModel.bindingPath;\r\n    const rid = this.viewModel.bindingData.list.currentId; // rootè¡¨æ°æ®id\r\n    let path = '/' + rid;\r\n\r\n    const subPaths = bindingPath.split('/');\r\n    if (subPaths.length > 0) {\r\n      // eg:bindingPathå½¢å¦/edus/grades,splitåæ¯['', 'edus', 'grades']\r\n      // å æ­¤indexä»1å¼å§\r\n      for (let index = 1; index < subPaths.length - 1; index++) {\r\n        const subPath = subPaths[index];\r\n        const subData = this.viewModel.bindingData[subPath];\r\n        if (!subData || !subData.currentId) {\r\n          this.formNotifyService.warning(this.languageService['plsSelectDetailFormData'], { hideTitle: true });\r\n          throw Error(`è·åå­è¡¨å®æ´è·¯å¾åºéï¼æ¾ä¸å°${subData}å¯¹åºçå­è¡¨ï¼æå¯¹åºå­è¡¨æ²¡æå½åè¡ã`);\r\n        }\r\n        path += `/${subPath}/${subData.currentId}`;\r\n      }\r\n    }\r\n    path += '/' + subPaths[subPaths.length - 1];\r\n\r\n    return path;\r\n  }\r\n  /**\r\n   * è·åæ ¹ç»ä»¶appContext\r\n   */\r\n  private get messagePipe() {\r\n    if (this.viewModel && this.viewModel.frameContext) {\r\n      const appContext = this.viewModel.frameContext.getFormAppContext() || null;\r\n      if (appContext) {\r\n        return appContext.messagePipe || null;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\nexport { SubListDataService };\r\n","\r\nimport { Entity, FrameContext, BindingData } from '@farris/devkit';\r\nimport { BefRepository, BefRestService } from '@farris/bef';\r\n\r\n/**\r\n * åºç¡æ°æ®æå¡\r\n */\r\nclass BaseDataService {\r\n\r\n  /**\r\n   * æ¡æ¶ä¸ä¸æ\r\n   */\r\n  protected frameContext: FrameContext;\r\n\r\n  /**\r\n   * å®ä½ä»åº\r\n   */\r\n  protected get repository(): BefRepository<Entity> {\r\n    return this.frameContext.repository as BefRepository<Entity>;\r\n  }\r\n\r\n  /**\r\n   * Restæå¡\r\n   */\r\n  protected get restService(): BefRestService {\r\n    return this.repository.restService;\r\n  }\r\n\r\n  /**\r\n   * æ°æ®ç»å®\r\n   */\r\n  protected get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(frameContext: FrameContext) {\r\n    this.frameContext = frameContext;\r\n  }\r\n\r\n}\r\n\r\nexport { BaseDataService };\r\n","import { BindingData, BindingList } from '@farris/devkit';\r\n\r\n/**\r\n * æ æ°æ®çå¸®å©ç±»\r\n */\r\nclass ParentTreeNodeUtil {\r\n\r\n  /**\r\n   * éä¸­ç¬¬ä¸ä¸ªæ ¹èç¹\r\n   */\r\n  public selectFirstRootNode(bindingData: BindingData, hierarchyInfoKey: string) {\r\n\r\n    const treeNodesData = bindingData.list.toJSON();\r\n    const firstRootNodeId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\r\n    this.selectedNode(bindingData, hierarchyInfoKey, firstRootNodeId);\r\n  }\r\n  public selectNodeByBindingList(bindingList: BindingList, hierarchyInfoKey: string, selectedNodeId: string): void {\r\n    const treeNodesData = bindingList.toJSON();\r\n    // å¦æè¦è®¾ç½®çèç¹ä¸å­å¨ï¼åè®¾ç½®ç¬¬1ä¸ªæ ¹èç¹\r\n    const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);\r\n    let currentId = selectedNodeId;\r\n    if (!selectedNodeData) {\r\n      currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\r\n    }\r\n    setTimeout(() => {\r\n      bindingList.setCurrentId(currentId, true, true);\r\n    }, 0);\r\n  }\r\n  /**\r\n   * éä¸­èç¹\r\n   */\r\n  public selectedNode(bindingData: BindingData, hierarchyInfoKey: string, selectedNodeId: string): void {\r\n    const treeNodesData = bindingData.list.toJSON();\r\n    // å¦æè¦è®¾ç½®çèç¹ä¸å­å¨ï¼åè®¾ç½®ç¬¬1ä¸ªæ ¹èç¹\r\n    const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);\r\n    let currentId = selectedNodeId;\r\n    if (!selectedNodeData) {\r\n      currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\r\n    }\r\n    if (bindingData.rowSelectedEventSuspend === true) {\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      bindingData.list.currentId = null;\r\n      bindingData.list.setCurrentId(currentId, true, true);\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * æ£æ¥æ¯å¦æå­èç¹\r\n   */\r\n  public hasChildNodes(treeNodesData: any[], hierarchyInfoKey: string, fid: string): boolean {\r\n    const fNodeData = this.getNodeDataById(treeNodesData, fid);\r\n    // const fLayer = fNodeData[hierarchyInfoKey]['layer'];\r\n    const fIsDetail = fNodeData[hierarchyInfoKey]['isDetail'];\r\n\r\n    // éæç»èç¹ï¼è¿åtrue\r\n    if (fIsDetail === false) {\r\n      return true;\r\n    }\r\n    return false;\r\n\r\n    // const childNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fid);\r\n    // return childNodesData.length > 0;\r\n  }\r\n\r\n  /**\r\n   * è·åæ ¹èç¹ï¼å¤ä¸ªæ ¹èç¹æ¶è·åç¬¬ä¸ä¸ªï¼\r\n   * @return æ¾ä¸å°æ¶è¿ånull\r\n   */\r\n  private getFirstNodeId(treeNodesData: any[], hierarchyInfoKey: string): string {\r\n    let rootData = treeNodesData.find((itemData: any) => {\r\n      const layer = itemData[hierarchyInfoKey]['layer'];\r\n      return layer === 1;\r\n    });\r\n    if (!rootData) {\r\n      const rootLayer = this.getRootLayer(treeNodesData, hierarchyInfoKey);\r\n      rootData = treeNodesData.find((itemData: any) => {\r\n        const layer = itemData[hierarchyInfoKey]['layer'];\r\n        return layer === rootLayer;\r\n      });\r\n    }\r\n    return rootData ? rootData['id'] : '';\r\n  }\r\n  private getRootLayer(treeNodesData: any[], hierarchyInfoKey: string) {\r\n    let layer = null;\r\n    if (treeNodesData && Array.isArray(treeNodesData)) {\r\n      const layers = treeNodesData.map(item => {\r\n        const layer = item[hierarchyInfoKey]['layer'];\r\n        return layer;\r\n      });\r\n      const minLayer = Math.min.apply(Math, layers);\r\n      if (!isNaN(minLayer)) {\r\n        layer = minLayer;\r\n      }\r\n    }\r\n    return layer;\r\n  }\r\n  /**\r\n   * è·åä¸ä¸ä¸ªèç¹ï¼å é¤åï¼\r\n   */\r\n  public getNextNodeId(treeNodesData: any[], hierarchyInfoKey: string, currentId: string): string {\r\n\r\n    // å½åèç¹ä¿¡æ¯\r\n    const currentNodeData = treeNodesData.find((itemData: any) => {\r\n      return itemData['id'] === currentId;\r\n    });\r\n    const currentLayer = currentNodeData[hierarchyInfoKey]['layer'];\r\n\r\n    // ç¶èç¹ä¿¡æ¯\r\n    const fLayer = currentLayer - 1;\r\n    const fParentElement = currentNodeData[hierarchyInfoKey]['parentElement'];\r\n\r\n    // æ¥æ¾åå¼èç¹\r\n    const siblingtreeNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fParentElement);\r\n\r\n    // å¦ææ²¡æåå¼èç¹ï¼åä¸æ¥æ¾\r\n    if (siblingtreeNodesData.length === 1) {\r\n      const parentData = treeNodesData.find((itemData: any) => {\r\n        return itemData['id'] === fParentElement;\r\n      });\r\n\r\n      // å­å¨ç¶èç¹ï¼åè®¾ç½®ç¶èç¹ï¼\r\n      // ä¸å­å¨ç¶èç¹ï¼åè®¾ç½®ç¬¬ä¸ä¸ªæ ¹èç¹ã\r\n      if (!parentData) {\r\n        return this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\r\n      }\r\n      return parentData['id'];\r\n    } else {\r\n      return this.getNextSiblingNodeId(siblingtreeNodesData, currentId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è·åä¸ä¸ªåå¼èç¹çid\r\n   */\r\n  public getNextSiblingNodeId(siblingtreeNodesData: any[], currentId: string): string {\r\n    if (siblingtreeNodesData.length <= 1) {\r\n      return '';\r\n    }\r\n\r\n    const currentIndex = siblingtreeNodesData.findIndex((itemData: any) => {\r\n      return itemData['id'] === currentId;\r\n    });\r\n\r\n    // æåä¸è¡ä¸ç§»ä¸è¡ï¼å¶ä»ä¸ç§»ä¸è¡\r\n    let nextIndex = -1;\r\n    if (currentIndex === siblingtreeNodesData.length - 1) {\r\n      nextIndex = currentIndex - 1;\r\n    } else {\r\n      nextIndex = currentIndex + 1;\r\n    }\r\n\r\n    return siblingtreeNodesData[nextIndex]['id'];\r\n  }\r\n\r\n  /**\r\n   * è·åä¸çº§èç¹çBindingObjectséå\r\n   */\r\n  public getChildNodesData(treeNodesData: any[], hierarchyInfoKey: string, fLayer: number, fParentElement: string): any[] {\r\n    const childtreeNodesData = treeNodesData.filter((itemData) => {\r\n      const layer = itemData[hierarchyInfoKey]['layer'];\r\n      const parentElement = itemData[hierarchyInfoKey]['parentElement'];\r\n      return (layer === fLayer + 1) && fParentElement == parentElement;\r\n    });\r\n    return childtreeNodesData;\r\n  }\r\n\r\n  /**\r\n   * è·åidè·åèç¹æ°æ®\r\n   */\r\n  public getNodeDataById(treeNodesData: any[], id: string): any {\r\n    const nodeData = treeNodesData.find((itemData: any) => {\r\n      return itemData['id'] === id;\r\n    });\r\n    return nodeData ? nodeData : null;\r\n  }\r\n}\r\n\r\nexport { ParentTreeNodeUtil };\r\n","import { BindingData, BindingList } from '@farris/devkit';\r\n\r\n/**\r\n * æ æ°æ®çå¸®å©ç±»\r\n */\r\nclass PathTreeNodeUtil {\r\n\r\n  /**\r\n   * éä¸­ç¬¬ä¸ä¸ªæ ¹èç¹\r\n   */\r\n  public selectFirstRootNode(bindingData: BindingData, hierarchyInfoKey: string) {\r\n\r\n    const treeNodesData = bindingData.list.toJSON();\r\n    const firstRootNodeId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\r\n    this.selectedNode(bindingData, hierarchyInfoKey, firstRootNodeId);\r\n  }\r\n  public selectNodeByBindingList(bindingList: BindingList, hierarchyInfoKey: string, selectedNodeId: string): void {\r\n    const treeNodesData = bindingList.toJSON();\r\n    // å¦æè¦è®¾ç½®çèç¹ä¸å­å¨ï¼åè®¾ç½®ç¬¬1ä¸ªæ ¹èç¹\r\n    const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);\r\n    let currentId = selectedNodeId;\r\n    if (!selectedNodeData) {\r\n      currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      bindingList.setCurrentId(currentId, true, true);\r\n    }, 0);\r\n  }\r\n  /**\r\n   * éä¸­èç¹\r\n   */\r\n  public selectedNode(bindingData: BindingData, hierarchyInfoKey: string, selectedNodeId: string): void {\r\n    const treeNodesData = bindingData.list.toJSON();\r\n    // å¦æè¦è®¾ç½®çèç¹ä¸å­å¨ï¼åè®¾ç½®ç¬¬1ä¸ªæ ¹èç¹\r\n    const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);\r\n    let currentId = selectedNodeId;\r\n    if (!selectedNodeData) {\r\n      currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\r\n    }\r\n    if (bindingData.rowSelectedEventSuspend === true) {\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      bindingData.list.currentId = null;\r\n      bindingData.list.setCurrentId(currentId, true, true);\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * æ£æ¥æ¯å¦æå­èç¹\r\n   */\r\n  public hasChildNodes(treeNodesData: any[], hierarchyInfoKey: string, fid: string): boolean {\r\n    const fNodeData = this.getNodeDataById(treeNodesData, fid);\r\n    // const fLayer = fNodeData[hierarchyInfoKey]['layer'];\r\n    // const fPath  = fNodeData[hierarchyInfoKey]['path'];\r\n    const fIsDetail = fNodeData[hierarchyInfoKey]['isDetail'];\r\n\r\n    // éæç»èç¹ï¼è¿åtrue\r\n    if (fIsDetail === false) {\r\n      return true;\r\n    }\r\n    return false;\r\n    // const childNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fPath);\r\n    // return childNodesData.length > 0;\r\n  }\r\n\r\n  /**\r\n   * è·åæ ¹èç¹ï¼å¤ä¸ªæ ¹èç¹æ¶è·åç¬¬ä¸ä¸ªï¼\r\n   * @return æ¾ä¸å°æ¶è¿ånull\r\n   */\r\n  private getFirstNodeId(treeNodesData: any[], hierarchyInfoKey: string): string {\r\n    let rootData = treeNodesData.find((itemData: any) => {\r\n      const layer = itemData[hierarchyInfoKey]['layer'];\r\n      return layer === 1;\r\n    });\r\n    if (!rootData) {\r\n      const rootLayer = this.getRootLayer(treeNodesData, hierarchyInfoKey);\r\n      rootData = treeNodesData.find((itemData: any) => {\r\n        const layer = itemData[hierarchyInfoKey]['layer'];\r\n        return layer === rootLayer;\r\n      });\r\n    }\r\n    return rootData ? rootData['id'] : '';\r\n  }\r\n  private getRootLayer(treeNodesData: any[], hierarchyInfoKey: string) {\r\n    let layer = null;\r\n    if (treeNodesData && Array.isArray(treeNodesData)) {\r\n      const layers = treeNodesData.map(item => {\r\n        const layer = item[hierarchyInfoKey]['layer'];\r\n        return layer;\r\n      });\r\n      const minLayer = Math.min.apply(Math, layers);\r\n      if (!isNaN(minLayer)) {\r\n        layer = minLayer;\r\n      }\r\n    }\r\n    return layer;\r\n  }\r\n  /**\r\n   * è·åä¸ä¸ä¸ªèç¹ï¼å é¤åï¼\r\n   */\r\n  public getNextNodeId(treeNodesData: any[], hierarchyInfoKey: string, currentId: string): string {\r\n\r\n    // å½åèç¹ä¿¡æ¯\r\n    const currentNodeData = treeNodesData.find((itemData: any) => {\r\n      return itemData['id'] === currentId;\r\n    });\r\n    const currentPath = currentNodeData[hierarchyInfoKey]['path'];\r\n    const currentLayer = currentNodeData[hierarchyInfoKey]['layer'];\r\n\r\n    // ç¶èç¹ä¿¡æ¯\r\n    const fLayer = currentLayer - 1;\r\n    const fPath = currentPath.substring(0, currentPath.length - 4);\r\n\r\n    // æ¥æ¾åå¼èç¹\r\n    const siblingtreeNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fPath);\r\n\r\n    // å¦ææ²¡æåå¼èç¹ï¼åä¸æ¥æ¾\r\n    if (siblingtreeNodesData.length === 1) {\r\n      const parentData = treeNodesData.find((itemData: any) => {\r\n        return itemData[hierarchyInfoKey]['path'] === fPath;\r\n      });\r\n\r\n      // å­å¨ç¶èç¹ï¼åè®¾ç½®ç¶èç¹ï¼\r\n      // ä¸å­å¨ç¶èç¹ï¼åè®¾ç½®ç¬¬ä¸ä¸ªæ ¹èç¹ã\r\n      if (!parentData) {\r\n        return this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\r\n      }\r\n      return parentData['id'];\r\n    } else {\r\n      return this.getNextSiblingNodeId(siblingtreeNodesData, currentId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è·åä¸ä¸ªåå¼èç¹çid\r\n   */\r\n  public getNextSiblingNodeId(siblingtreeNodesData: any[], currentId: string): string {\r\n    if (siblingtreeNodesData.length <= 1) {\r\n      return '';\r\n    }\r\n\r\n    const currentIndex = siblingtreeNodesData.findIndex((itemData: any) => {\r\n      return itemData['id'] === currentId;\r\n    });\r\n\r\n    // æåä¸è¡ä¸ç§»ä¸è¡ï¼å¶ä»ä¸ç§»ä¸è¡\r\n    let nextIndex = -1;\r\n    if (currentIndex === siblingtreeNodesData.length - 1) {\r\n      nextIndex = currentIndex - 1;\r\n    } else {\r\n      nextIndex = currentIndex + 1;\r\n    }\r\n\r\n    return siblingtreeNodesData[nextIndex]['id'];\r\n  }\r\n\r\n  /**\r\n   * è·åä¸çº§èç¹çBindingObjectséå\r\n   */\r\n  public getChildNodesData(treeNodesData: any[], hierarchyInfoKey: string, fLayer: number, fPath: string): any[] {\r\n    const childtreeNodesData = treeNodesData.filter((itemData) => {\r\n      const layer = itemData[hierarchyInfoKey]['layer'];\r\n      const path = itemData[hierarchyInfoKey]['path'];\r\n      return (layer === fLayer + 1) && path.startsWith(fPath);\r\n    });\r\n    return childtreeNodesData;\r\n  }\r\n\r\n  /**\r\n   * è·åidè·åèç¹æ°æ®\r\n   */\r\n  public getNodeDataById(treeNodesData: any[], id: string): any {\r\n    const nodeData = treeNodesData.find((itemData: any) => {\r\n      return itemData['id'] === id;\r\n    });\r\n    return nodeData ? nodeData : null;\r\n  }\r\n}\r\n\r\nexport { PathTreeNodeUtil };\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-30 14:12:39 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-05-30 16:18:47\r\n */\r\nimport { ParentTreeNodeUtil } from './parent-tree.util';\r\nimport { PathTreeNodeUtil } from './path-tree.util';\r\n\r\nexport class TreeUtilFactory {\r\n  static getInstance(treeType: string) {\r\n    let util = null;\r\n    switch (treeType) {\r\n      case 'path':\r\n        util = new PathTreeNodeUtil();\r\n        break;\r\n      case 'parent':\r\n        util = new ParentTreeNodeUtil();\r\n        break;\r\n      default: break;\r\n    }\r\n    return util;\r\n  }\r\n}","import { HttpHeaders } from '@angular/common/http';\r\nimport { of, Observable } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { Entity, FieldMetadataUtil, FrameContext, Repository } from '@farris/devkit';\r\nimport { ResponseInfo, BefRepository } from '@farris/bef';\r\n\r\n/**\r\n * ç¶å­æ ä»åº\r\n */\r\nclass ParentTreeRepository {\r\n\r\n  /**\r\n   * æ·»å åå¼èç¹\r\n   */\r\n  public addSibling(repository: BefRepository<Entity>, id: string): Observable<Entity> {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const addSiblingUri = `${baseUri}/service/parenthierarchycreatesibling`;\r\n    const body = {\r\n      dataID: id,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      body: body\r\n    };\r\n    return restService.invoke(addSiblingUri, 'PUT', null, options).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const entity = repository.buildEntity(responseInfo.returnValue);\r\n        repository.entityCollection.addEntity(entity);\r\n        return entity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ·»å åå¼èç¹\r\n   */\r\n  public addChild(repository: BefRepository<Entity>, parentId: string) {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const addChildUri = `${baseUri}/service/parenthierarchycreatechildlayer`;\r\n\r\n    const body = {\r\n      dataID: parentId,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      body: body\r\n    };\r\n    return restService.invoke(addChildUri, 'PUT', null, options).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const entity = repository.buildEntity(responseInfo.returnValue);\r\n        repository.entityCollection.addEntity(entity);\r\n        return entity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ·»å å­è¡¨åå¼èç¹\r\n   */\r\n  public addSubSibling(repository: BefRepository<Entity>, nodes: Array<string>, ids: Array<string>): Observable<Entity> {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const addSubSiblingUri = `${baseUri}/service/childnodeparenthierarchycreatesibling`;\r\n    const body = {\r\n      nodes: nodes,\r\n      ids: ids,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      body: body\r\n    };\r\n    return restService.invoke(addSubSiblingUri, 'PUT', null, options).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        let path = this.getPaths(nodes, ids);\r\n        const entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue)\r\n        return entity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ·»å å­è¡¨å­èç¹\r\n   */\r\n  public addSubChild(repository: BefRepository<Entity>, nodes: Array<string>, ids: Array<string>) {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const addSubChildUri = `${baseUri}/service/childnodeparenthierarchycreatechildlayer`;\r\n\r\n    const body = {\r\n      nodes: nodes,\r\n      ids: ids,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      body: body\r\n    };\r\n    return restService.invoke(addSubChildUri, 'PUT', null, options).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        let paths = this.getPaths(nodes, ids);\r\n        const entity = repository.entityManager.appendEntityByPath(paths, responseInfo.returnValue);\r\n        return entity;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getPaths(nodes: string[], ids: string[]) {\r\n    let paths = '';\r\n    if (nodes && nodes.length > 0 && ids && ids.length > 0) {\r\n      for (let i = 0; i < ids.length; i++) {\r\n        if (nodes[i]) {\r\n          paths = paths + `/${ids[i]}`;\r\n          paths = paths + `/${nodes[i]}s`;\r\n        }\r\n      }\r\n    }\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * å è½½ç¶èç¹\r\n   */\r\n  // tslint:disable-next-line: max-line-length\r\n  public loadByParentId(repository: BefRepository<Entity>, hierarchyInfoKey: string, parentId: string, filters: any[], sorts: any[], frozenCurrentRow: boolean = false, pagination?: { pageSize: number, pageIndex: number }, frameContext?: FrameContext, reload: boolean = false): Observable<Entity[]> {\r\n    const localEntities = this.getChildren(repository, hierarchyInfoKey, parentId);\r\n    if (localEntities && localEntities.length > 0 && !reload) {\r\n      return of(localEntities);\r\n    }\r\n    const restService = repository.restService;\r\n    const parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);\r\n    const originalHierarchyInfoKey = this.getOriginalHierarchyInfoKey(repository, hierarchyInfoKey);\r\n    const filtersWithParent = this.buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filters);\r\n    const isUsePagination = pagination && pagination.pageSize > 0 || false;\r\n    // ç»ç»EntityFilter\r\n    const entityFilter = {\r\n      FilterConditions: filtersWithParent,\r\n      SortConditions: sorts,\r\n      IsUsePagination: isUsePagination,\r\n      Pagination: { PageIndex: pagination && pagination.pageIndex || 0, PageSize: pagination && pagination.pageSize || 0, PageCount: 0, TotalCount: 0 }\r\n    };\r\n    const requestInfo = restService.buildRequestInfo();\r\n    return restService.extendQuery(entityFilter, requestInfo).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const paginationInfo = this.getPaginationInfo(responseInfo);\r\n        if (parentId) {\r\n          if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {\r\n            frameContext.params.set(`_NODE_${parentId}_PAGINATION_INFO_`, paginationInfo);\r\n          }\r\n        } else {\r\n          if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {\r\n            frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);\r\n          }\r\n        }\r\n        // åæ¸ç©ºä¸çº§å®ä½\r\n        this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);\r\n        // è¿½å ä¸çº§å®ä½\r\n        const listData = responseInfo.returnValue.result;\r\n        const entities = repository.buildEntities(listData);\r\n        if (frozenCurrentRow) {\r\n          repository.entityCollection.addData(entities, { isTreeNodeLoadScene: true });\r\n        } else {\r\n          repository.entityCollection.addEntities(entities, { isTreeNodeLoadScene: true });\r\n        }\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  // tslint:disable-next-line: max-line-length\r\n  public loadFullTree(repository: BefRepository<Entity>, hierarchyInfoKey: string, parentId: string, propertyName: string, fullTreeType: string, loadType: string, filters?: any[], context?: any): Observable<Entity[]> {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const queryUrl = `${baseUri}/service/parentidfulltreequery`;\r\n    const parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);\r\n    const entityFilter = this.buildEntityFilter(filters, null, 0, 0);\r\n\r\n    const body = {\r\n      dataId: parentId || '',\r\n      isUsePagination: false,\r\n      virtualPropertyName: propertyName,\r\n      pagination: {},\r\n      fullTreeType,\r\n      loadType,\r\n      filter: entityFilter,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      body: body\r\n    };\r\n    return restService.invoke(queryUrl, 'PUT', null, options).pipe(\r\n      tap((responseInfo: ResponseInfo) => {\r\n        // ä¿å­å±å¼çèç¹\r\n        if (responseInfo.returnValue && responseInfo.returnValue.selectedRowId && context && context.frameContext) {\r\n          const frameContext = context.frameContext as FrameContext;\r\n          const virtualRootFrameContext = frameContext && frameContext.getVirtualRootFrameContext() || null;\r\n          if (virtualRootFrameContext) {\r\n            const list = responseInfo.returnValue.result as any[];\r\n            const selectedRowId = responseInfo.returnValue.selectedRowId;\r\n            // ä»é¡¶å±å¼å§è®¡ç®ææéè¦å±å¼çèç¹\r\n            const leafNodeInfo = list.find(item => item[repository.primaryKey] === selectedRowId);\r\n            const hierarchyInfo = leafNodeInfo[hierarchyInfoKey] as { isDetail: boolean, layer: number, parentElement: string };\r\n            const ids = this.getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository);\r\n            virtualRootFrameContext.params.set('_DEVKIT_expandRowIds', ids.join(','));\r\n            virtualRootFrameContext.params.set('_DEVKIT_selectedRowId', selectedRowId);\r\n            virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', selectedRowId);\r\n          }\r\n        }\r\n      }),\r\n      map((responseInfo: ResponseInfo) => {\r\n        const frozenCurrentRow = context && context.frozenCurrentRow || false;\r\n        // åæ¸ç©ºä¸çº§å®ä½\r\n        this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);\r\n        // è¿½å ä¸çº§å®ä½\r\n        const listData = responseInfo.returnValue.result;\r\n        const entities = repository.buildEntities(listData);\r\n        if (frozenCurrentRow) {\r\n          repository.entityCollection.addData(entities, { isTreeNodeLoadScene: true });\r\n        } else {\r\n          repository.entityCollection.addEntities(entities, { isTreeNodeLoadScene: true });\r\n        }\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æå¥å¯¹ç¶èç¹çè¿æ»¤\r\n   */\r\n  public buildFiltersWithParent(originalHierarchyInfoKey: string, parentHierarchyInfo: any, filterArray: any[]): any {\r\n    const relationType = filterArray && filterArray.length >= 1 ? 1 : 0;\r\n    const parentLayer = parentHierarchyInfo ? parentHierarchyInfo['layer'] : 0;\r\n    const parentElement = parentHierarchyInfo ? parentHierarchyInfo['id'] : '';\r\n\r\n    const parentFilterArray = [\r\n      {\r\n        \"FilterField\": `${originalHierarchyInfoKey}.Layer`,\r\n        \"Value\": parentLayer + 1,\r\n        \"Lbracket\": null,\r\n        \"Rbracket\": null,\r\n        \"Relation\": 1,\r\n        \"Expresstype\": 0,\r\n        \"Compare\": 0\r\n      }\r\n    ];\r\n    if (parentElement) {\r\n      parentFilterArray.push(\r\n        {\r\n          \"FilterField\": `${originalHierarchyInfoKey}.ParentElement`,\r\n          \"Value\": parentElement,\r\n          \"Lbracket\": null,\r\n          \"Rbracket\": null,\r\n          \"Relation\": relationType,\r\n          \"Expresstype\": 0,\r\n          \"Compare\": 0\r\n        }\r\n      );\r\n    } else {\r\n      parentFilterArray[0].Relation = relationType;\r\n    }\r\n    return parentFilterArray.concat(filterArray);\r\n  }\r\n  public buildEntityFilter(filter: any[], sort: any[], pageSize: number, pageIndex: number) {\r\n\r\n    // @todoï¼ä¸´æ¶å¼å®¹èä»£ç ï¼éä½æ¹å¨å¸¦æ¥çé£é©\r\n    if (!filter && !sort && !pageSize && !pageIndex) {\r\n      return null;\r\n    }\r\n    if (!filter) {\r\n      filter = [];\r\n    }\r\n    if (!sort) {\r\n      sort = [];\r\n    }\r\n    // çº æ­£æåä¸ä¸ªè¿æ»¤æ¡ä»¶çRelation\r\n    if (filter && filter.length > 0) {\r\n      filter[filter.length - 1].Relation = 0;\r\n    }\r\n    const entityFilter = {\r\n      FilterConditions: filter,\r\n      SortConditions: sort,\r\n      IsUsePagination: pageSize === 0 ? false : true,\r\n      Pagination: {\r\n        PageIndex: pageIndex,\r\n        PageSize: pageSize,\r\n        PageCount: 0,\r\n        TotalCount: 0\r\n      }\r\n    };\r\n    return entityFilter;\r\n  }\r\n  /**\r\n   * æ¸ç©ºåä»£å®ä½\r\n   * @description parentHierarchyInfoä¸­layerä¸ºè¦æ¸ç©ºåä»£èç¹çlayerï¼ä½éé¢çparentElementä¸æ¯ç¶çº§çidï¼èæ¯è¦æ¸ç©ºåä»£èç¹çid\r\n   */\r\n  public clearDescendantEntities(repository: BefRepository<Entity>, hierarchyInfokey: string, parentHierarchyInfo: any, frozenCurrentRow: boolean = false): void {\r\n    // æ¸ç©ºæ ¹èç¹\r\n    if (!parentHierarchyInfo) {\r\n      repository.entityCollection.clear();\r\n      return;\r\n    }\r\n    const nodes = this.getChildNodes(repository, hierarchyInfokey, parentHierarchyInfo);\r\n    if (frozenCurrentRow) {\r\n      repository.entityCollection.removeEntities((entity: Entity) => {\r\n        const id = entity[entity.primaryKey];\r\n        return nodes.includes(id);\r\n      });\r\n    } else {\r\n      repository.entityCollection.removeData((entity: Entity) => {\r\n        const id = entity[entity.primaryKey];\r\n        return nodes.includes(id);\r\n      });\r\n    }\r\n\r\n  }\r\n  /**\r\n   * è·åæä¸ªèç¹çææå­èç¹\r\n   * @param repository repository\r\n   * @param hierarchyInfokey hierarchyInfokey\r\n   * @param parentHierarchyInfo parentHierarchyInfo\r\n   */\r\n  private getChildNodes(repository: BefRepository<Entity>, hierarchyInfokey: string, parentHierarchyInfo: any) {\r\n    const fparentElement = parentHierarchyInfo.id;\r\n    const flayer = parentHierarchyInfo.layer;\r\n    let nodes = [];\r\n    repository.entityCollection.getAllEntities().forEach(entity => {\r\n      const hierarchyInfo = entity[hierarchyInfokey];\r\n      const parentElement = hierarchyInfo.parentElement;\r\n      const layer = hierarchyInfo.layer;\r\n      const result = layer >= (flayer + 1) && parentElement === fparentElement;\r\n      if (result) {\r\n        const id = entity[entity.primaryKey];\r\n        nodes.push(id);\r\n        const childHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfokey, id);\r\n        const childs = this.getChildNodes(repository, hierarchyInfokey, childHierarchyInfo);\r\n        if (childs && childs.length > 0) {\r\n          nodes = nodes.concat(childs);\r\n        }\r\n      }\r\n    });\r\n    return nodes;\r\n  }\r\n  /**\r\n   * è·åå®ä½çåçº§ä¿¡æ¯\r\n   */\r\n  public getHierarchyInfoById(repository: BefRepository<Entity>, hierarchyInfokey: string, id: string): any {\r\n    if (!id) {\r\n      return null;\r\n    }\r\n    const entity: Entity = repository.entityCollection.getEntityById(id);\r\n    const hierarchyInfoEntity: Entity = entity[hierarchyInfokey];\r\n    const result = hierarchyInfoEntity.toJSON();\r\n    result['id'] = id;\r\n    return result;\r\n  }\r\n  public getHierarchyInfo(entity: Entity, hierarchyInfokey: string): { parentElement: string, layer: number, isDetail: boolean } {\r\n    return entity[hierarchyInfokey];\r\n  }\r\n  /**\r\n   * è·ååçº§ç çåå§çå­æ®µå\r\n   */\r\n  public getOriginalHierarchyInfoKey(repository: BefRepository<Entity>, hierarchyInfokey: string): string {\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(repository.entityType);\r\n    const hierarchyInfoNgObject = ngObjects[hierarchyInfokey];\r\n    return hierarchyInfoNgObject.originalDataField as string;\r\n  }\r\n  private getPaginationInfo(responseInfo: ResponseInfo) {\r\n    return responseInfo && responseInfo.returnValue && responseInfo.returnValue.pagination || null;\r\n  }\r\n  private findParent(hierarchyInfo: { isDetail: boolean, layer: number, parentElement: string }, list: any[], hierarchyInfoKey: string) {\r\n    return list.find(item => {\r\n      const currentHierarchyInfo = item[hierarchyInfoKey] as { isDetail: boolean, layer: number, parentElement: string };\r\n      return currentHierarchyInfo.layer === hierarchyInfo.layer - 1 && hierarchyInfo.parentElement === currentHierarchyInfo.parentElement;\r\n    });\r\n  }\r\n  private getAllParentIds(hierarchyInfo: { isDetail: boolean, layer: number, parentElement: string }, list: any[], hierarchyInfoKey: string, repository: Repository<any>) {\r\n    let item = this.findParent(hierarchyInfo, list, hierarchyInfoKey);\r\n    const ids = [];\r\n    while (item) {\r\n      ids.push(item[repository.primaryKey]);\r\n      item = this.findParent(item[hierarchyInfoKey], list, hierarchyInfoKey);\r\n    }\r\n    return ids;\r\n  }\r\n  /**\r\n   * æ¥æ¾èç¹ä¸ææå­çº§ï¼ç¬¬ä¸çº§ï¼\r\n   * @param repository repository\r\n   * @param hierarchyInfoKey åçº§ç å­æ®µ\r\n   * @param id id\r\n   * @returns \r\n   */\r\n  private getChildren(repository: BefRepository<Entity>, hierarchyInfoKey: string, id: string): Entity[] {\r\n    const hierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, id);\r\n    if (!hierarchyInfo) {\r\n      return null;\r\n    }\r\n    const layer = hierarchyInfo.layer;\r\n    const parentElement = hierarchyInfo.parentElement;\r\n    const entities: Entity[] = repository.entityCollection.getEntities((entity: Entity) => {\r\n      const hierarchyInfo = this.getHierarchyInfo(entity, hierarchyInfoKey);\r\n      const matched = hierarchyInfo.layer === layer + 1 && (hierarchyInfo.parentElement === parentElement || !parentElement && !hierarchyInfo.parentElement);\r\n      if (matched) {\r\n        return entity;\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n    return entities;\r\n  }\r\n}\r\n\r\nexport { ParentTreeRepository };\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { Entity, FieldMetadataUtil, FrameContext, Repository } from '@farris/devkit';\r\nimport { ResponseInfo, BefRepository } from '@farris/bef';\r\n\r\n/**\r\n * è·¯å¾æ ä»åº\r\n */\r\nclass PathTreeRepository {\r\n\r\n  /**\r\n   * æ·»å åå¼èç¹\r\n   */\r\n  public addSibling(repository: BefRepository<Entity>, id: string): Observable<Entity> {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const addSiblingUri = `${baseUri}/service/pathhierarchycreatesibling`;\r\n    const body = {\r\n      dataID: id,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      body: body\r\n    };\r\n    return restService.invoke(addSiblingUri, 'PUT', null, options).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const entity = repository.buildEntity(responseInfo.returnValue);\r\n        repository.entityCollection.addEntity(entity);\r\n        return entity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ·»å åå¼èç¹\r\n   */\r\n  public addChild(repository: BefRepository<Entity>, parentId: string) {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const addChildUri = `${baseUri}/service/pathhierarchycreatechildlayer`;\r\n\r\n    const body = {\r\n      dataID: parentId,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      body: body\r\n    };\r\n    return restService.invoke(addChildUri, 'PUT', null, options).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const entity = repository.buildEntity(responseInfo.returnValue);\r\n        repository.entityCollection.addEntity(entity);\r\n        return entity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ·»å å­è¡¨åå¼èç¹\r\n   */\r\n  public addSubSibling(repository: BefRepository<Entity>, nodes: Array<string>, ids: Array<string>): Observable<Entity> {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const addSubSiblingUri = `${baseUri}/service/childnodepathhierarchycreatesibling`;\r\n    const body = {\r\n      nodes: nodes,\r\n      ids: ids,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      body: body\r\n    };\r\n    return restService.invoke(addSubSiblingUri, 'PUT', null, options).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        let path = this.getPaths(nodes, ids);\r\n        const entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue)\r\n        return entity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n  * æ·»å å­è¡¨å­èç¹\r\n  */\r\n  public addSubChild(repository: BefRepository<Entity>, nodes: Array<string>, ids: Array<string>) {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const addSubChildUri = `${baseUri}/service/childnodepathhierarchycreatechildlayer`;\r\n\r\n    const body = {\r\n      nodes: nodes,\r\n      ids: ids,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n      body: body\r\n    };\r\n    return restService.invoke(addSubChildUri, 'PUT', null, options).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        let path = this.getPaths(nodes, ids);\r\n        const entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue)\r\n        return entity;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getPaths(nodes: string[], ids: string[]) {\r\n    let paths = '';\r\n    if (nodes && nodes.length > 0 && ids && ids.length > 0) {\r\n      for (let i = 0; i < ids.length; i++) {\r\n        if (nodes[i]) {\r\n          paths = paths + `/${ids[i]}`;\r\n          paths = paths + `/${nodes[i]}s`;\r\n        }\r\n      }\r\n    }\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * å è½½ç¶èç¹\r\n   */\r\n  // tslint:disable-next-line: max-line-length\r\n  public loadByParentId(repository: BefRepository<Entity>, hierarchyInfoKey: string, parentId: string, filters: any[], sorts: any[], frozenCurrentRow: boolean = false, pagination?: { pageSize: number, pageIndex: number }, frameContext?: FrameContext, reload: boolean = false): Observable<Entity[]> {\r\n    const localEntities = this.getChildren(repository, hierarchyInfoKey, parentId);\r\n    if (localEntities && localEntities.length > 0 && !reload) {\r\n      return of(localEntities);\r\n    }\r\n    const restService = repository.restService;\r\n    const parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);\r\n    const originalHierarchyInfoKey = this.getOriginalHierarchyInfoKey(repository, hierarchyInfoKey);\r\n    const filtersWithParent = this.buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filters);\r\n    const isUsePagination = pagination && pagination.pageSize > 0 || false;\r\n    // ç»ç»EntityFilter\r\n    const entityFilter = {\r\n      FilterConditions: filtersWithParent,\r\n      SortConditions: sorts,\r\n      IsUsePagination: isUsePagination,\r\n      Pagination: { PageIndex: pagination && pagination.pageIndex || 0, PageSize: pagination && pagination.pageSize || 0, PageCount: 0, TotalCount: 0 }\r\n    };\r\n    const requestInfo = restService.buildRequestInfo();\r\n    return restService.extendQuery(entityFilter, requestInfo).pipe(\r\n      map((responseInfo: ResponseInfo) => {\r\n        const paginationInfo = this.getPaginationInfo(responseInfo);\r\n        if (parentId) {\r\n          if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {\r\n            frameContext.params.set(`_NODE_${parentId}_PAGINATION_INFO_`, paginationInfo);\r\n          }\r\n        } else {\r\n          if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {\r\n            frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);\r\n          }\r\n        }\r\n        // åæ¸ç©ºä¸çº§å®ä½\r\n        this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);\r\n        // è¿½å ä¸çº§å®ä½\r\n        const listData = responseInfo.returnValue.result;\r\n        const entities = repository.buildEntities(listData);\r\n        if (frozenCurrentRow) {\r\n          repository.entityCollection.addData(entities, { isTreeNodeLoadScene: true });\r\n        } else {\r\n          repository.entityCollection.addEntities(entities, { isTreeNodeLoadScene: true });\r\n        }\r\n\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  // tslint:disable-next-line: max-line-length\r\n  public loadFullTree(repository: BefRepository<Entity>, hierarchyInfoKey: string, parentId: string, propertyName: string, fullTreeType: string, loadType: string, filters?: any[], context?: any): Observable<Entity[]> {\r\n    const restService = repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const queryUrl = `${baseUri}/service/parentidfulltreequery`;\r\n    const pathHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);\r\n    const entityFilter = this.buildEntityFilter(filters, null, 0, 0);\r\n    const body = {\r\n      dataId: parentId || '',\r\n      isUsePagination: false,\r\n      virtualPropertyName: propertyName,\r\n      pagination: {},\r\n      fullTreeType,\r\n      loadType,\r\n      filter: entityFilter,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      body: body\r\n    };\r\n    return restService.invoke(queryUrl, 'PUT', null, options).pipe(\r\n      tap((responseInfo: ResponseInfo) => {\r\n        // ä¿å­å±å¼çèç¹\r\n        if (responseInfo.returnValue && responseInfo.returnValue.selectedRowId && context && context.frameContext) {\r\n          const frameContext = context.frameContext as FrameContext;\r\n          const virtualRootFrameContext = frameContext && frameContext.getVirtualRootFrameContext() || null;\r\n          if (virtualRootFrameContext) {\r\n            const list = responseInfo.returnValue.result as any[];\r\n            const selectedRowId = responseInfo.returnValue.selectedRowId;\r\n            // ä»é¡¶å±å¼å§è®¡ç®ææéè¦å±å¼çèç¹\r\n            const leafNodeInfo = list.find(item => item[repository.primaryKey] === selectedRowId);\r\n            const hierarchyInfo = leafNodeInfo[hierarchyInfoKey] as { isDetail: boolean, layer: number, path: string };\r\n            const ids = this.getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository);\r\n            virtualRootFrameContext.params.set('_DEVKIT_expandRowIds', ids.join(','));\r\n            virtualRootFrameContext.params.set('_DEVKIT_selectedRowId', selectedRowId);\r\n            virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', selectedRowId);\r\n          }\r\n        }\r\n      }),\r\n      map((responseInfo: ResponseInfo) => {\r\n        const frozenCurrentRow: boolean = context && context.frozenCurrentRow || false;\r\n        // åæ¸ç©ºä¸çº§å®ä½\r\n        this.clearDescendantEntities(repository, hierarchyInfoKey, pathHierarchyInfo, frozenCurrentRow);\r\n        // è¿½å ä¸çº§å®ä½\r\n        const listData = responseInfo.returnValue.result;\r\n        const entities = repository.buildEntities(listData);\r\n        if (frozenCurrentRow) {\r\n          repository.entityCollection.addData(entities, {isTreeNodeLoadScene: true});\r\n        } else {\r\n          repository.entityCollection.addEntities(entities, {isTreeNodeLoadScene: true});\r\n        }\r\n        return entities;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æå¥å¯¹ç¶èç¹çè¿æ»¤\r\n   */\r\n  public buildFiltersWithParent(originalHierarchyInfoKey: string, parentHierarchyInfo: any, filterArray: any[]): any {\r\n    const relationType = filterArray && filterArray.length >= 1 ? 1 : 0;\r\n\r\n    const parentLayer = parentHierarchyInfo ? parentHierarchyInfo['layer'] : 0;\r\n    const parentFilterArray = [\r\n      {\r\n        \"FilterField\": `${originalHierarchyInfoKey}.Layer`,\r\n        \"Value\": parentLayer + 1,\r\n        \"Lbracket\": null,\r\n        \"Rbracket\": null,\r\n        \"Relation\": 1,\r\n        \"Expresstype\": 0,\r\n        \"Compare\": 0\r\n      }\r\n    ];\r\n\r\n    // ç¶è·¯å¾è¿æ»¤ï¼å¦æä¸ºç©ºï¼åä¸æ·»å ï¼å¼å®¹oracleåæ°ï¼\r\n    const parentPath = parentHierarchyInfo ? parentHierarchyInfo['path'] : '';\r\n    if (parentPath) {\r\n      parentFilterArray.push({\r\n        \"FilterField\": `${originalHierarchyInfoKey}.Path`,\r\n        \"Value\": parentPath,\r\n        \"Lbracket\": null,\r\n        \"Rbracket\": null,\r\n        \"Relation\": relationType,\r\n        \"Expresstype\": 0,\r\n        \"Compare\": 7\r\n      });\r\n    } else {\r\n      parentFilterArray[0].Relation = relationType;\r\n    }\r\n\r\n    return parentFilterArray.concat(filterArray);\r\n  }\r\n  public buildEntityFilter(filter: any[], sort: any[], pageSize: number, pageIndex: number) {\r\n\r\n    // @todoï¼ä¸´æ¶å¼å®¹èä»£ç ï¼éä½æ¹å¨å¸¦æ¥çé£é©\r\n    if (!filter && !sort && !pageSize && !pageIndex) {\r\n      return null;\r\n    }\r\n    if (!filter) {\r\n      filter = [];\r\n    }\r\n    if (!sort) {\r\n      sort = [];\r\n    }\r\n    // çº æ­£æåä¸ä¸ªè¿æ»¤æ¡ä»¶çRelation\r\n    if (filter && filter.length > 0) {\r\n      filter[filter.length - 1].Relation = 0;\r\n    }\r\n    const entityFilter = {\r\n      FilterConditions: filter,\r\n      SortConditions: sort,\r\n      IsUsePagination: pageSize === 0 ? false : true,\r\n      Pagination: {\r\n        PageIndex: pageIndex,\r\n        PageSize: pageSize,\r\n        PageCount: 0,\r\n        TotalCount: 0\r\n      }\r\n    };\r\n    return entityFilter;\r\n  }\r\n  /**\r\n   * æ¸ç©ºåä»£å®ä½\r\n   */\r\n  public clearDescendantEntities(repository: BefRepository<Entity>, hierarchyInfokey: string, parentHierarchyInfo: any, frozenCurrentRow: boolean = false): void {\r\n\r\n    // æ¸ç©ºæ ¹èç¹\r\n    if (!parentHierarchyInfo) {\r\n      repository.entityCollection.clear();\r\n      return;\r\n    }\r\n    const fPath = parentHierarchyInfo.path;\r\n    const fLayer = parentHierarchyInfo.layer;\r\n    if (frozenCurrentRow) {\r\n      repository.entityCollection.removeData((entity: Entity) => {\r\n        const hierarchyInfo = entity[hierarchyInfokey];\r\n        const path = hierarchyInfo.path;\r\n        const layer = hierarchyInfo.layer;\r\n        return layer > fLayer && path.startsWith(fPath);\r\n      });\r\n    } else {\r\n      repository.entityCollection.removeEntities((entity: Entity) => {\r\n        const hierarchyInfo = entity[hierarchyInfokey];\r\n        const path = hierarchyInfo.path;\r\n        const layer = hierarchyInfo.layer;\r\n        return layer > fLayer && path.startsWith(fPath);\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * è·åå®ä½çåçº§ä¿¡æ¯\r\n   */\r\n  public getHierarchyInfoById(repository: BefRepository<Entity>, hierarchyInfokey: string, id: string): any {\r\n    if (!id) {\r\n      return null;\r\n    }\r\n    const entity: Entity = repository.entityCollection.getEntityById(id);\r\n    const hierarchyInfoEntity: Entity = entity[hierarchyInfokey];\r\n    return hierarchyInfoEntity.toJSON();\r\n  }\r\n\r\n  /**\r\n   * è·ååçº§ç çåå§çå­æ®µå\r\n   */\r\n  public getOriginalHierarchyInfoKey(repository: BefRepository<Entity>, hierarchyInfokey: string): string {\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(repository.entityType);\r\n    const hierarchyInfoNgObject = ngObjects[hierarchyInfokey];\r\n    return hierarchyInfoNgObject.originalDataField as string;\r\n  }\r\n  private getPaginationInfo(responseInfo: ResponseInfo) {\r\n    return responseInfo && responseInfo.returnValue && responseInfo.returnValue.pagination || null;\r\n  }\r\n  private findParent(hierarchyInfo: { isDetail: boolean, layer: number, path: string }, list: any[], hierarchyInfoKey: string) {\r\n    return list.find(item => {\r\n      const currentHierarchyInfo = item[hierarchyInfoKey] as { isDetail: boolean, layer: number, path: string };\r\n      return currentHierarchyInfo.layer === hierarchyInfo.layer - 1 && hierarchyInfo.path.startsWith(currentHierarchyInfo.path);\r\n    });\r\n  }\r\n  private getAllParentIds(hierarchyInfo: { isDetail: boolean, layer: number, path: string }, list: any[], hierarchyInfoKey: string, repository: Repository<any>) {\r\n    let item = this.findParent(hierarchyInfo, list, hierarchyInfoKey);\r\n    const ids = [];\r\n    while (item) {\r\n      ids.push(item[repository.primaryKey]);\r\n      item = this.findParent(item[hierarchyInfoKey], list, hierarchyInfoKey);\r\n    }\r\n    return ids;\r\n  }\r\n  private getHierarchyInfo(entity: Entity, hierarchyInfoKey: string): { path: string, layer: number, isDetail: boolean } {\r\n    return entity[hierarchyInfoKey];\r\n  }\r\n  /**\r\n   * æ¥æ¾èç¹ä¸ææå­çº§ï¼ç¬¬ä¸çº§ï¼\r\n   * @param repository repository\r\n   * @param hierarchyInfoKey åçº§ç å­æ®µ\r\n   * @param id id\r\n   * @returns \r\n   */\r\n  private getChildren(repository: BefRepository<Entity>, hierarchyInfoKey: string, id: string): Entity[] {\r\n    const hierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, id);\r\n    if (!hierarchyInfo) {\r\n      return null;\r\n    }\r\n    const layer = hierarchyInfo.layer;\r\n    const path = hierarchyInfo.path;\r\n    const entities: Entity[] = repository.entityCollection.getEntities((entity: Entity) => {\r\n      const hierarchyInfo = this.getHierarchyInfo(entity, hierarchyInfoKey);\r\n      const matched = hierarchyInfo.layer === layer + 1 && hierarchyInfo.path.startsWith(path);\r\n      if (matched) {\r\n        return entity;\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n    return entities;\r\n  }\r\n}\r\n\r\nexport { PathTreeRepository };\r\n","import { ParentTreeRepository } from './parent-tree-repository';\r\nimport { PathTreeRepository } from './path-tree-repository';\r\n\r\nexport class TreeRepositoryFactory {\r\n    static getInstance(treeType: string){\r\n        let repository=null;\r\n        switch (treeType) {\r\n            case \"path\":\r\n                repository = new PathTreeRepository();\r\n                break;\r\n            case \"parent\":\r\n                repository = new ParentTreeRepository();\r\n                break;\r\n            default: break;\r\n        }\r\n        return repository;\r\n    }\r\n}","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable, of, empty, EMPTY } from 'rxjs';\r\nimport { tap, switchMap, concatMap } from 'rxjs/operators';\r\n\r\nimport { Entity, FrameContext, FieldMetadataUtil, NgFieldProperty } from '@farris/devkit';\r\nimport { BefRepository, BefRepositoryUtil } from '@farris/bef';\r\n\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\n\r\nimport { BaseDataService } from './base-data.service';\r\nimport { EditStateUtil } from './utils/index';\r\nimport { TreeUtilFactory } from './tree-table/util/tree-util-factory';\r\nimport { TreeRepositoryFactory } from './tree-table/repository/tree-repository-factory';\r\n// tslint:disable: no-string-literal\r\n\r\n/**\r\n * æ æ°æ®æå¡\r\n */\r\n@Injectable()\r\nclass TreeDataService extends BaseDataService {\r\n\r\n  /**\r\n   * åçº§ä¿¡æ¯å­æ®µå\r\n   */\r\n  private get hierarchyInfoKey(): string {\r\n    return this.virtualRootFrameContext.getParam('hierarchyInfoKey');\r\n  }\r\n  private get virtualRootFrameContext() {\r\n    return this.frameContext.getVirtualRootFrameContext();\r\n  }\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    frameContext: FrameContext,\r\n    private messageService: FormMessageService,\r\n    private loadingService: FormLoadingService,\r\n    private notifyService: FormNotifyService,\r\n    private errorService: FormErrorService,\r\n    @Optional() private languageService: LanguageService\r\n  ) {\r\n    super(frameContext);\r\n    if (!languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * å è½½æ°æ®\r\n   */\r\n  public load(filters?: string, sorts?: string): Observable<Entity[]> {\r\n    const filtersArray = this.parseConditions(filters);\r\n    const sortsArray = this.parseConditions(sorts);\r\n    const correctSelectedNode = this.repository.entityCollection.count() === 0;\r\n\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const query$ = this.repository.getEntities(filtersArray, sortsArray, null, null);\r\n    return query$.pipe(\r\n      tap(\r\n        () => {\r\n\r\n          // çº æ­£éä¸­èç¹\r\n          if (correctSelectedNode === true) {\r\n            const hierarchyType = this.getHierarchyType();\r\n            const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\r\n            if (treeNodeUtil !== null) {\r\n              treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);\r\n            }\r\n          }\r\n\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.loadFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * åå±å è½½æ°æ®\r\n   */\r\n  public loadByLevel(filters?: string, sorts?: string, frozenCurrentRow?: boolean | string): Observable<Entity[]> {\r\n    this.setLoadByLevelState(filters, sorts);\r\n    const filtersArray = this.parseConditions(filters);\r\n    const sortsArray = this.parseConditions(sorts);\r\n    // const parentId = this.bindingData.list.currentId;\r\n    const parentId = this.getIdToExpand();\r\n    const correctSelectedNode = this.repository.entityCollection.count() === 0;\r\n    if (frozenCurrentRow === undefined) {\r\n      frozenCurrentRow = false;\r\n    }\r\n    if (typeof frozenCurrentRow !== 'boolean') {\r\n      frozenCurrentRow = frozenCurrentRow === 'true' ? true : false;\r\n    }\r\n    const hierarchyType = this.getHierarchyType();\r\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\r\n\r\n    if (repository === null) {\r\n      return empty();\r\n    }\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    // æé åé¡µä¿¡æ¯\r\n    const pagination = this.buildPaginationInfo(parentId);\r\n    const reload = this.frameContext.params.get('_RELOAD_CHILDREN_') || false;\r\n    const query$ = repository.loadByParentId(this.repository, this.hierarchyInfoKey, parentId, filtersArray, sortsArray, frozenCurrentRow, pagination, this.frameContext, reload);\r\n    return query$.pipe(\r\n      tap(\r\n        (entities: Entity[]) => {\r\n          this.frameContext.params.delete('_RELOAD_CHILDREN_');\r\n          // çº æ­£éä¸­èç¹\r\n          if (correctSelectedNode === true) {\r\n            const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\r\n            if (treeNodeUtil !== null) {\r\n              treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);\r\n            }\r\n          }\r\n          const currentRowId = this.bindingData.list.currentItem.primaryKeyValue;\r\n          if (frozenCurrentRow) {\r\n            // å¦æä¸ä¸æ¬¡éä¸­è¡ä¸ºæ¬æ¬¡å è½½æ°æ®ä¸­çä¸æ¡ï¼ååºè¯¥éæ°éä¸­è¯¥è¡\r\n            const containsCurrentRow = entities.find(item => item.primaryValue === currentRowId);\r\n            if (containsCurrentRow) {\r\n              this.setCurrentId(currentRowId);\r\n            }\r\n            // åæ¥çå½åè¡ä¸å¨å·²ç»å è½½çæ°æ®ä¸­ï¼å¦å±å¼å°ç¬¬ä¸çº§ï¼å°ç¬¬ä¸çº§çæè¡è®¾ä¸ºå½åè¡ï¼å¨é¨æ¶èµ·ï¼å±å¼ç¬¬ä¸çº§\r\n            if (!this.repository.entityCollection.getEntityById(currentRowId)) {\r\n              const firstChildId = entities && Array.isArray(entities) && entities.length > 0 && entities[0].primaryValue || null;\r\n              if (firstChildId) {\r\n                this.setCurrentId(firstChildId);\r\n              }\r\n            }\r\n          }\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.loadFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * å è½½å®æ´æ \r\n   * @param virtualPropertyName èæå­æ®µ\r\n   * @param fullTreeType æ¯å¦æ¯å®æ´æ å è½½ 0ï¼å®æ´æ  1ï¼é¨åæ \r\n   * @param loadType æ¯å¦åçº§å è½½ 0ï¼å¨é¨å è½½ 1ï¼åçº§å è½½\r\n   * @param filter è¿æ»¤æ¡ä»¶\r\n   * @param frozenCurrentRow å»ç»å½åè¡\r\n   */\r\n  public loadFullTree(virtualPropertyName: string, fullTreeType: string, loadType: string, filters: string, frozenCurrentRow?: boolean | string): Observable<Entity[]> {\r\n    if (typeof fullTreeType !== 'string') {\r\n      throw new Error('ArgumentError: fullTreeType ä¸è½ä¸ºç©ºä¸å¿é¡»ä¸ºå­ç¬¦ä¸²ã');\r\n    }\r\n    if (typeof loadType !== 'string') {\r\n      throw new Error('ArgumentError: loadType ä¸è½ä¸ºç©ºä¸å¿é¡»ä¸ºå­ç¬¦ä¸²ã');\r\n    }\r\n    if (frozenCurrentRow === undefined) {\r\n      frozenCurrentRow = false;\r\n    }\r\n    if (typeof frozenCurrentRow !== 'boolean') {\r\n      frozenCurrentRow = frozenCurrentRow === 'true' ? true : false;\r\n    }\r\n    const virtualRootFrameContext = this.virtualRootFrameContext;\r\n    // è¿åä¸æ¬¡è®¾ç½®çç»æé\r\n    virtualRootFrameContext.params.delete('_DEVKIT_expandRowIds');\r\n    virtualRootFrameContext.params.delete('_DEVKIT_selectedRowId');\r\n    virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', null);\r\n    const filtersArray = this.parseConditions(filters);\r\n    const parentId = this.getIdToExpand();\r\n    const correctSelectedNode = this.repository.entityCollection.count() === 0;\r\n    const hierarchyType = this.getHierarchyType();\r\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\r\n\r\n    if (repository === null) {\r\n      return EMPTY;\r\n    }\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const context = {\r\n      frameContext: this.frameContext,\r\n      frozenCurrentRow\r\n    };\r\n    // tslint:disable-next-line: max-line-length\r\n    const query$ = repository.loadFullTree(this.repository, this.hierarchyInfoKey, parentId, virtualPropertyName, fullTreeType, loadType, filtersArray, context);\r\n    return query$.pipe(\r\n      tap(\r\n        (entities: Entity[]) => {\r\n          const selectedRowId = virtualRootFrameContext.params.get('_DEVKIT_selectedRowId');\r\n          // çº æ­£éä¸­èç¹\r\n          if (correctSelectedNode === true || !selectedRowId) {\r\n            const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\r\n            if (treeNodeUtil !== null) {\r\n              treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);\r\n            }\r\n          }\r\n          const currentRowId = this.bindingData.list.currentItem.primaryKeyValue;\r\n          if (frozenCurrentRow) {\r\n            // å¦æä¸ä¸æ¬¡éä¸­è¡ä¸ºæ¬æ¬¡å è½½æ°æ®ä¸­çä¸æ¡ï¼ååºè¯¥éæ°éä¸­è¯¥è¡\r\n            const containsCurrentRow = entities.find(item => item.primaryValue === currentRowId);\r\n            if (containsCurrentRow) {\r\n              this.setCurrentId(currentRowId);\r\n            }\r\n            // åæ¥çå½åè¡ä¸å¨å·²ç»å è½½çæ°æ®ä¸­ï¼å¦å±å¼å°ç¬¬ä¸çº§ï¼å°ç¬¬ä¸çº§çæè¡è®¾ä¸ºå½åè¡ï¼å¨é¨æ¶èµ·ï¼å±å¼ç¬¬ä¸çº§\r\n            if (!this.repository.entityCollection.getEntityById(currentRowId) && entities && entities.length > 0) {\r\n              const firstChildId = entities && Array.isArray(entities) && entities.length > 0 && entities[0].primaryValue || null;\r\n              if (firstChildId) {\r\n                this.setCurrentId(firstChildId);\r\n              }\r\n            }\r\n          }\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.loadFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * è·åææ°å±å¼çèç¹\r\n   */\r\n  public getIdToExpand() {\r\n    const expandNodes = this.virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];\r\n    const idToExpand = expandNodes.pop();\r\n    this.virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);\r\n    return idToExpand;\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®ææ°å±å¼çèç¹\r\n   */\r\n  public setIdToExpand(idToExpand: string): void {\r\n    const expandNodes = this.virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];\r\n    expandNodes.push(idToExpand);\r\n    this.virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);\r\n  }\r\n\r\n  /**\r\n   * è§£æè¿æ»¤æ¡ä»¶\r\n   */\r\n  public parseConditions(conditions?: string): any[] {\r\n    const conditionsString = (!conditions || conditions === '') ? '[]' : conditions;\r\n    return JSON.parse(conditionsString);\r\n  }\r\n\r\n  /**\r\n   * æ°å¢åçº§\r\n   */\r\n  public addSibling(id: string): Observable<any> {\r\n\r\n    // è®¾è®¡æ¶idçè·åæ¹ä¸ºä»å½ä»¤åæ°ä¸è·åï¼ä½è®¾è®¡æ¶æ²¡æåæ°å¿å¡«æ£æ¥ï¼\r\n    // å¦ææå¼è¡¨åä¿å­äºï¼å³æ´æ°äºææ°çå½ä»¤æä»¶ï¼ï¼ä½æ²¡æéç½®è¯¥åæ°ï¼å¯è½ä¼ä¼ éè¿æ¥ä¸ä¸ªç©ºå¼ï¼\r\n    // ä¸ºäºå¼å®¹æ­¤æåµï¼ä½¿ç¨å½åè¡idä½ä¸ºidçå¼\r\n    id = id ? id : this.bindingData.list.currentId;\r\n\r\n    // åæ°æ£æ¥\r\n    if (!id || id === 'undefined') {\r\n      id = '';\r\n    }\r\n\r\n    // è®°å½æè¿ä¸æ¬¡ä¿®æ¹çæ°æ®id\r\n    const lastModifiedId = this.bindingData.list.currentId;\r\n    // è·ååçº§æ¹å¼\r\n    const hierarchyType: string = this.getHierarchyType();\r\n    // æ§è¡åæ°\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\r\n    if (!repository) {\r\n      // éè¯¯çåçº§ç \r\n      throw new Error(this.languageService['errorHierarchyKey']);\r\n    }\r\n    const result$ = repository.addSibling(this.repository, id);\r\n    return result$.pipe(\r\n      tap(\r\n        () => {\r\n          this.virtualRootFrameContext.setParam('IS_ADD', true);\r\n          this.virtualRootFrameContext.setParam('LAST_MODIFIED_ID', lastModifiedId);\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.addSiblingFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ°å¢ä¸çº§\r\n   */\r\n  public addChild(id: string): Observable<any> {\r\n\r\n    // åå åaddSiblingçä¿®æ¹\r\n    id = id ? id : this.bindingData.list.currentId;\r\n\r\n    // åæ°æ£æ¥\r\n    if (!id) {\r\n      // è¯·éæ©ç¶èç¹\r\n      this.notifyService.warning(this.languageService['plsSelectParentNode'], { hideTitle: true });\r\n      return empty();\r\n    }\r\n\r\n    // è®°å½æè¿ä¸æ¬¡ä¿®æ¹çæ°æ®id\r\n    const lastModifiedId = this.bindingData.list.currentId;\r\n    // è·ååçº§æ¹å¼\r\n    const hierarchyType = this.getHierarchyType();\r\n    // æ§è¡åæ°\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n\r\n    // æ°å¢çæ¶åï¼è¦å±å¼ç¶èç¹\r\n    this.setIdToExpand(id);\r\n    const reloadChild$ = this.reloadByLevel();\r\n\r\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\r\n    if (!repository) {\r\n      throw new Error(this.languageService['errorHierarchyKey']);\r\n    }\r\n    const addChild$ = repository.addChild(this.repository, id);\r\n    const result$ = reloadChild$.pipe(\r\n      switchMap(() => {\r\n        return addChild$;\r\n      }),\r\n      tap(\r\n        () => {\r\n          this.virtualRootFrameContext.setParam('IS_ADD', true);\r\n          this.virtualRootFrameContext.setParam('LAST_MODIFIED_ID', lastModifiedId);\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.addChildFailed, error);\r\n        }\r\n      )\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * æ¹éä¿å­\r\n   */\r\n  public save(): Observable<boolean> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'save' });\r\n    }\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const save$ = this.repository.applyChanges();\r\n    const result$ = save$.pipe(\r\n      tap(\r\n        () => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.notifyService.success(this.languageService.saveSuccess, { hideTitle: true });\r\n        },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.multiSaveFailed, error);\r\n        }\r\n      )\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * å é¤\r\n   */\r\n  public remove(id: string, successMsg?: string): Observable<boolean> {\r\n\r\n    // åå åaddSibling\r\n    id = id ? id : this.bindingData.list.currentId;\r\n\r\n    // åæ°æ£æ¥\r\n    if (!id) {\r\n      this.notifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\r\n      return empty();\r\n    }\r\n\r\n    // å­å¨å­èç¹ä¸åè®¸å é¤\r\n    const treeNodesData = this.repository.entityCollection.toJSON();\r\n    const hierarchyType = this.getHierarchyType();\r\n    const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\r\n    if (treeNodeUtil === null) {\r\n      return empty();\r\n    }\r\n    if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoKey, id) === true) {\r\n      this.notifyService.warning(this.languageService['deleteChildFirst'], { hideTitle: true });\r\n      return empty();\r\n    }\r\n\r\n    // ç¡®è®¤å é¤\r\n    const action$ = this.messageService.question(this.languageService.confirmDeletion);\r\n    return action$.pipe(\r\n      concatMap(result => {\r\n        if (!result) {\r\n          return empty();\r\n        }\r\n\r\n        // è·åå é¤åè¦è®¾ç½®çèç¹id\r\n        const nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoKey, id);\r\n\r\n        // æ§è¡å é¤\r\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n        const remove$ = this.frameContext.repository.removeById(id);\r\n        return remove$.pipe(\r\n          tap(() => {\r\n\r\n            // è®¾ç½®éä¸­èç¹\r\n            treeNodeUtil.selectedNode(this.bindingData, this.hierarchyInfoKey, nextNodeId);\r\n\r\n            this.loadingService.hideDelayLoading(loadingTimerId);\r\n            if (successMsg && successMsg.trim()) {\r\n              this.notifyService.success(successMsg, { hideTitle: true });\r\n            } else {\r\n              this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n            }\r\n            // this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n          },\r\n            error => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              this.errorService.exception(this.languageService.deleteFailed, error);\r\n            }\r\n          )\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * åæ¶æ¶æ£æµæªä¿å­è®°å½\r\n   */\r\n  public cancel(): Observable<any> {\r\n\r\n    // æ²¡æåæ´æ¶ç´æ¥åæ¶\r\n    // const cardDataService = this.frameContext.injector.get<CardDataService>(CardDataService);\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    const hasUnsavedData = BefRepositoryUtil.isExistUnsaveData(befRepository);\r\n    if (!hasUnsavedData) {\r\n      return this._cancel();\r\n    }\r\n\r\n    const confirmResult$ = this.messageService.question(this.languageService['cancelWithoutSave']).pipe(\r\n      switchMap((ifCancel: boolean) => {\r\n        if (ifCancel === false) {\r\n          return EMPTY;\r\n        }\r\n        return this._cancel();\r\n      })\r\n    );\r\n    return confirmResult$;\r\n  }\r\n  /**\r\n   * æé åé¡µä¿¡æ¯\r\n   * @param parentId parentId\r\n   * @returns \r\n   */\r\n  private buildPaginationInfo(parentId: any) {\r\n    const pagination: any = { pageIndex: 0, pageSize: 0 };\r\n    const enableNodePagination = this.frameContext.params.get('enableNodePagination');\r\n    if (!parentId) {\r\n      // ä¸çº§åé¡µ\r\n      const pageSize = this.repository.entityCollection.pageSize || 0;\r\n      const pageIndex = this.repository.entityCollection.pageIndex || 0;\r\n      // å¯ç¨äºä¸çº§åé¡µ\r\n      if (pageSize !== 0) {\r\n        pagination.pageSize = pageSize;\r\n        pagination.pageIndex = pageIndex;\r\n      }\r\n    } else {\r\n      // å¦ææªå¯ç¨èç¹åé¡µæå½åä¸ºé¡¶çº§èç¹å è½½ï¼åä¸å¤çèç¹åé¡µ\r\n      if (enableNodePagination) {\r\n        const nodePageSize = this.frameContext.params.get('nodePageSize') || 0;\r\n        let nodePageIndex = this.frameContext.params.get(`_NODE_${parentId}_PAGE_INDEX_`);\r\n        if (!nodePageIndex) {\r\n          this.frameContext.params.set(`_NODE_${parentId}_PAGE_INDEX_`, 1);\r\n          nodePageIndex = 1;\r\n        }\r\n        pagination.pageIndex = nodePageIndex;\r\n        pagination.pageSize = nodePageSize;\r\n      }\r\n    }\r\n    return pagination;\r\n  }\r\n\r\n  /**\r\n   * åæ¶åæ´\r\n   */\r\n  private _cancel(): Observable<any> {\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const cancel$ = this.repository.cancelChanges();\r\n    return cancel$.pipe(\r\n      switchMap(() => {\r\n        const isAdd = this.virtualRootFrameContext.getParam('IS_ADD');\r\n        const lastModifiedId = this.virtualRootFrameContext.getParam('LAST_MODIFIED_ID');\r\n        const currentId = this.bindingData.list.currentId;\r\n\r\n        if (isAdd === true) {\r\n          this.repository.entityCollection.removeEntityById(currentId);\r\n\r\n          // éç½®ç¼è¾ç¶æ\r\n          this.virtualRootFrameContext.setParam('IS_ADD', false);\r\n          if (lastModifiedId) {\r\n            setTimeout(() => {\r\n              this.bindingData.list.setCurrentId(lastModifiedId, true, true);\r\n            }, 0);\r\n          }\r\n          return of(null);\r\n        } else {\r\n          return this.repository.updateById(currentId);\r\n        }\r\n      }),\r\n      tap(\r\n        () => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.cancelFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ£æ¥æ¯å¦å­å¨ä¸çº§èç¹ï¼åé¨æ¹æ³ï¼è¯·å¿ä½¿ç¨ï¼\r\n   */\r\n  public hasChildNodes(id: string, treeNodesData: any[]): boolean {\r\n    const treeNodeUtil = this.getTreeNodeUtil();\r\n    if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoKey, id) === true) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * è®¡ç®å é¤åçå½åèç¹idï¼åé¨æ¹æ³ï¼è¯·å¿ä½¿ç¨ï¼\r\n   */\r\n  public getNextNodeIdAfterRemoving(idToRemove: string, treeNodesData: any[]): string {\r\n    const treeNodeUtil = this.getTreeNodeUtil();\r\n    const nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoKey, idToRemove);\r\n    return nextNodeId;\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®å é¤åçå½åèç¹èç¹ï¼åé¨æ¹æ³ï¼è¯·å¿ä½¿ç¨ï¼\r\n   */\r\n  public setNextNodeAfterRemoving(nextNodeId: string): void {\r\n    const treeNodeUtil = this.getTreeNodeUtil();\r\n    treeNodeUtil.selectedNode(this.bindingData, this.hierarchyInfoKey, nextNodeId);\r\n  }\r\n  /**\r\n   * è®¾ç½®æ çå½åè¡(ç»å®æ´æ ä½¿ç¨)\r\n   * @param id id\r\n   */\r\n  public setCurrentId(id: string) {\r\n    id = id || this.frameContext.getVirtualRootFrameContext().uiState['__DEVKIT__selectedRow'] || this.bindingData.list.currentItem.primaryKeyValue;\r\n    this.frameContext.bindingData.list.setCurrentId(id, true, true, true);\r\n  }\r\n  /**\r\n   * éä¸­æ çç¬¬ä¸ä¸ªèç¹\r\n   */\r\n  public selectFirstRow() {\r\n    const hierarchyType = this.getHierarchyType();\r\n    const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\r\n    if (treeNodeUtil !== null) {\r\n      treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);\r\n    }\r\n  }\r\n  /**\r\n   * è·åæ èç¹å·¥å·ç±»å®ä¾\r\n   */\r\n  private getTreeNodeUtil(): any {\r\n    const hierarchyType = this.getHierarchyType();\r\n    const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\r\n    if (treeNodeUtil === null) {\r\n      throw new Error(`ä¸æ¯æ${hierarchyType}ç±»åçåçº§`);\r\n    }\r\n    return treeNodeUtil;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * è®°å½å è½½ç¶æ\r\n   * @todoï¼å¾å é¤\r\n   */\r\n  private setLoadByLevelState(filters: string, sorts: string) {\r\n\r\n    // @todoï¼ä¸´æ¶å¤ç\r\n    this.virtualRootFrameContext.setParam('isLoadTreeByLevel', true);\r\n    this.virtualRootFrameContext.setParam('loadTreeByLevelFilter', filters);\r\n    this.virtualRootFrameContext.setParam('loadTreeByLevelSort', sorts);\r\n  }\r\n\r\n  /**\r\n   * å±å¼å½åèç¹\r\n   * @todoï¼å¾å é¤\r\n   */\r\n  private reloadByLevel(): Observable<Entity[]> {\r\n    const isLoadByLevel = this.virtualRootFrameContext.getParam('isLoadTreeByLevel');\r\n    if (isLoadByLevel === true) {\r\n      const filters = this.virtualRootFrameContext.getParam('loadTreeByLevelFilter');\r\n      const sorts = this.virtualRootFrameContext.getParam('loadTreeByLevelSort');\r\n      return this.loadByLevel(filters, sorts);\r\n    }\r\n    return of([]);\r\n  }\r\n\r\n  private getHierarchyType() {\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.repository.entityType);\r\n    const hierarchyInfoNgObjectInfo = ngObjects[this.hierarchyInfoKey];\r\n    let hierarchyType = 'path'; // åçº§ç é»è®¤ä¸ºpathï¼å¼å®¹åè¡¨å\r\n    if (hierarchyInfoNgObjectInfo.hasOwnProperty('hierarchyType') && hierarchyInfoNgObjectInfo['hierarchyType'] != null) {\r\n      hierarchyType = hierarchyInfoNgObjectInfo['hierarchyType'] as string;\r\n    }\r\n    if (hierarchyType == null || hierarchyType.length < 1) {\r\n      // 'åçº§ç éç½®ä¿¡æ¯éè¯¯'\r\n      throw new Error(this.languageService['incorrectHierarchyConfig']);\r\n    }\r\n    return hierarchyType;\r\n  }\r\n  /**\r\n   * è·åæ ¹ç»ä»¶æ¶æ¯ç®¡é\r\n   */\r\n  private get messagePipe() {\r\n    if (this.frameContext) {\r\n      const appContext = this.frameContext.getFormAppContext() || null;\r\n      if (appContext) {\r\n        return appContext.messagePipe || null;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\nexport { TreeDataService };\r\n","import { Injectable } from '@angular/core';\r\nimport { ViewModel } from '@farris/devkit';\r\nimport { FilterConditionService } from '../filter-condition.service';\r\nimport { CommandService } from '../command-service';\r\n\r\n@Injectable()\r\nclass FilterConditionDataService {\r\n    constructor(\r\n        private viewModel: ViewModel,\r\n        private filterConditionService: FilterConditionService,\r\n        private commandService: CommandService\r\n    ) { }\r\n\r\n    /**\r\n     * æ§è¡è¿æ»¤\r\n     * @param commandName å½ä»¤åç§°\r\n     * @param frameId å½ä»¤æå¨çframeId\r\n     */\r\n    public filter(commandName: string, frameId: string) {\r\n        const self: any = this;\r\n        let filters = self.context && self.context.eventParam && self.context.eventParam.data || [];\r\n        if (typeof (filters) === 'string') {\r\n            filters = JSON.parse(filters);\r\n        }\r\n        // æ¥è¯¢æ¶éç½®é¡µç ä¸ºç¬¬ä¸é¡µ\r\n        this.viewModel.frameContext.repository.entityCollection.pageIndex = 1;\r\n        this.viewModel.frameContext.repository.filterConditionManager.setConditions(this.viewModel.bindingPath, filters);\r\n        return this.commandService.execute(commandName, frameId);\r\n    }\r\n}\r\nexport { FilterConditionDataService };\r\n","import { Injectable } from '@angular/core';\r\nimport { Entity, BindingData, FrameContext } from '@farris/devkit';\r\nimport { BefRepository } from '@farris/bef';\r\nimport { Observable, EMPTY } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\nimport { EditStateUtil } from './utils/index';\r\n\r\n\r\n/**\r\n * æ°æ®ç¼è¾æå¡\r\n */\r\n@Injectable()\r\nclass EditDataService {\r\n\r\n  /**\r\n   * å®ä½ä»åº\r\n   */\r\n  private repository: BefRepository<Entity>;\r\n\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private bindingData: BindingData;\r\n\r\n  /**\r\n   * Loadingæå¡\r\n   */\r\n  private loadingService: FormLoadingService;\r\n\r\n  /**\r\n   * è¯­è¨æå¡\r\n   */\r\n  private languageService: LanguageService;\r\n\r\n  /**\r\n   * éè¯¯å¤çæå¡\r\n   */\r\n  private errorService: FormErrorService;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(private frameContext: FrameContext) {\r\n    this.repository = this.frameContext.repository as BefRepository<Entity>;\r\n    this.bindingData = this.frameContext.bindingData;\r\n    this.loadingService = this.frameContext.injector.get<FormLoadingService>(FormLoadingService, null);\r\n    this.languageService = this.frameContext.injector.get<LanguageService>(LanguageService, null);\r\n    this.errorService = this.frameContext.injector.get<FormErrorService>(FormErrorService, null);\r\n  }\r\n\r\n  /**\r\n   * ç¼è¾ï¼æ¯æå éï¼\r\n   */\r\n  public edit(id: string): Observable<Entity> {\r\n\r\n    id = id || this.bindingData.list.currentId;\r\n    if (!id) {\r\n      return EMPTY;\r\n    }\r\n\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const edit$ = this.repository.editEntityById(id);\r\n    const result$ = edit$.pipe(\r\n      tap(\r\n        () => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          EditStateUtil.setEditState(this.frameContext, id);\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.updateFailed, error);\r\n        }\r\n      )\r\n    );\r\n    return result$;\r\n  }\r\n}\r\n\r\n\r\nexport { EditDataService };\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, EMPTY } from 'rxjs';\r\nimport { tap, switchMap, concatMap } from 'rxjs/operators';\r\nimport { FrameContext, Entity, } from '@farris/devkit';\r\nimport { BefRepository, } from '@farris/bef';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\nimport { CommandService } from '../command-service';\r\nimport { ListDataService } from './list-data.service';\r\nimport { TreeDataService } from './tree-data.service';\r\n\r\n/**\r\n * å é¤æå¡\r\n */\r\n@Injectable()\r\nclass RemoveDataService {\r\n\r\n  private notifyService: FormNotifyService;\r\n\r\n  private messageService: FormMessageService;\r\n\r\n  private loadingService: FormLoadingService;\r\n\r\n  private errorService: FormErrorService;\r\n\r\n  private languageService: LanguageService;\r\n\r\n  private befRepository: BefRepository<any>;\r\n\r\n  private commandService: CommandService;\r\n\r\n  private listDataService: ListDataService;\r\n\r\n  private treeDataService: TreeDataService;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   * @param frameContext ç»ä»¶ä¸ä¸æ\r\n   */\r\n  constructor(private frameContext: FrameContext) {\r\n    this.notifyService = this.frameContext.injector.get<FormNotifyService>(FormNotifyService, null);\r\n    this.messageService = this.frameContext.injector.get<FormMessageService>(FormMessageService, null);\r\n    this.errorService = this.frameContext.injector.get<FormErrorService>(FormErrorService, null);\r\n    this.loadingService = this.frameContext.injector.get<FormLoadingService>(FormLoadingService, null);\r\n\r\n    this.languageService = this.frameContext.injector.get<LanguageService>(LanguageService, null);\r\n    this.commandService = this.frameContext.injector.get<CommandService>(CommandService, null);\r\n    this.listDataService = this.frameContext.injector.get<ListDataService>(ListDataService, null);\r\n    this.treeDataService = this.frameContext.injector.get<TreeDataService>(TreeDataService, null);\r\n    this.befRepository = this.frameContext.repository as BefRepository<Entity>;\r\n  }\r\n\r\n  /**\r\n   * å é¤idå¯¹åºçå®ä½\r\n   * @param id è¦å é¤çæ°æ®id\r\n   * @param ifSave æ¯å¦ä¿å­\r\n   * @param enableRemoveAndSave æ¯å¦å¯ç¨å é¤å¹¶ä¿å­ï¼ä»ä¸ºå¼å®¹ï¼æ°è°ç¨è¯·å¿è®¾ç½®ï¼\r\n   * @summary\r\n   * enableRemoveAndSaveå­å¨çæä¹ï¼\r\n   * 1ãèè¡¨åçå¯è½æ²¡ædelAndSaveæ¹æ³ï¼\r\n   * 2ãä¸ºäºå°ListDataServiceä¸­çremoveæ¹æ³è¿ç§»å°æ­¤æ¹æ³ä¸ï¼æ¾ç¤ºè®¾ç½®ä¸ºfalseï¼ä¿æåä»¥åè¡ä¸ºä¸è´ï¼\r\n   * 3ãè¯¥åæ°é»è®¤ä¸ºtrueï¼å¹¶ä¸å¨WebComponentå±ä¸æ´é²ï¼æ°å½ä»¤ä¸éè¦ä¼ éï¼é»è®¤ä¸ºtrueï¼\r\n   */\r\n  public removeById(id: string, ifSave: boolean, enableRemoveAndSave: boolean = true, successMsg?: string): Observable<boolean> {\r\n    const msg = successMsg ? successMsg : '';\r\n    return this.innerRemoveById(id, ifSave, enableRemoveAndSave, msg);\r\n  }\r\n\r\n  public removeByIds(ids: string[]): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * å é¤idå¯¹åºçå®ä½ï¼å¹¶æ§è¡ä¿å­\r\n   */\r\n  public removeAndSaveById(id: string, successMsg?: string): Observable<boolean> {\r\n    const msg = successMsg ? successMsg : '';\r\n    return this.innerRemoveById(id, true, true, msg);\r\n  }\r\n\r\n  /**\r\n   * å é¤å¹¶ä¿å­æ èç¹æ°æ®\r\n   */\r\n  public removeAndSaveByIdForTree(id: string, successMsg?: string): Observable<boolean> {\r\n    const msg = successMsg ? successMsg : '';\r\n    // æ£æ¥è¦å é¤çidæ¯å¦å­å¨\r\n    if (this.checkIdsToRemove([id]) === false) {\r\n      this.notifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n\r\n    // æ£æ¥æ¯å¦æå­èç¹\r\n    const treeNodesData = this.befRepository.entityCollection.toJSON();\r\n    if (this.treeDataService.hasChildNodes(id, treeNodesData) === true) {\r\n      this.messageService.warning(this.languageService.deleteChildFirst);\r\n      return EMPTY;\r\n    }\r\n\r\n    // æ§è¡å é¤\r\n    const remove$ = this.innerRemoveById(id, true, true, msg);\r\n    const nextNodeId = this.treeDataService.getNextNodeIdAfterRemoving(id, treeNodesData);;\r\n    const result$ = remove$.pipe(\r\n      tap(() => {\r\n        this.treeDataService.setNextNodeAfterRemoving(nextNodeId);\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n\r\n  /**\r\n   * æ¹éå é¤å¹¶ä¿å­\r\n   */\r\n  public removeAndSaveByIds() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * å é¤åçå·æ°\r\n   */\r\n  public refreshAfterRemoving(loadCmdName: string, loadCmdFrameId: string): Observable<any> {\r\n    if (!this.frameContext || !loadCmdName || !loadCmdFrameId) {\r\n      return;\r\n    }\r\n    const commandService = this.frameContext.injector.get<CommandService>(CommandService, null);\r\n    return commandService.execute(loadCmdName, loadCmdFrameId);\r\n  }\r\n\r\n  /**\r\n   * å é¤idå¯¹åºçå®ä½\r\n   * @param id å®ä½id\r\n   * @param ifSave æ¯å¦ä¿å­\r\n   * @param enableRemoveAndSave æ¯å¦å¯ç¨å é¤å¹¶ä¿å­ï¼èEAPIä¸æ²¡ææ­¤æ¹æ³ï¼éè¿å¼å³è¿è¡å¼å®¹ï¼\r\n   * @summary\r\n   * enableRemoveAndSaveåæ°è¯´æï¼\r\n   * 1ãèEAPIä¸æ²¡ædelAndSaveæ¹æ³ï¼åªè½åä¸¤æ¬¡è¯·æ±ï¼å é¤åä¿å­ï¼ï¼\r\n   * 2ãæ­¤å¼å³ç¨äºéæ©ä½¿ç¨åªç§æ¹å¼ï¼å¼å®¹èè¡¨åã\r\n   */\r\n  private innerRemoveById(id: string, ifSave: boolean, enableRemoveAndSave: boolean, successMsg: string): Observable<boolean> {\r\n\r\n    // æ£æ¥è¦å é¤çidæ¯å¦å­å¨\r\n    if (this.checkIdsToRemove([id]) === false) {\r\n      this.notifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n\r\n    const confirm$ = this.confirmToRemove();\r\n    const remove$ = enableRemoveAndSave && ifSave ?\r\n      this.befRepository.removeEntityAndSaveById(id) :\r\n      this.befRepository.removeById(id, ifSave);\r\n\r\n    const result$ = confirm$.pipe(\r\n      concatMap((ifRemove: boolean) => {\r\n        if (ifRemove === false) {\r\n          return EMPTY;\r\n        }\r\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n        return remove$.pipe(\r\n          tap(\r\n            () => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              if (successMsg && successMsg.trim()) {\r\n                this.notifyService.success(successMsg, { hideTitle: true });\r\n              } else {\r\n                this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n              }\r\n              // this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n            },\r\n            (error: any) => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              this.errorService.exception(this.languageService.deleteFailed, error);\r\n            }\r\n          ),\r\n          switchMap(() => {\r\n            const saved = enableRemoveAndSave && ifSave;\r\n            if (!saved) {\r\n              return EMPTY;\r\n            } else {\r\n              return of(null);\r\n            }\r\n          })\r\n        );\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * æ£æ¥è¦å é¤çidsæ¯å¦ä¸ºç©º\r\n   */\r\n  private checkIdsToRemove(ids: string[]): boolean {\r\n    if (!ids) {\r\n      return false;\r\n    }\r\n    const filteredIds = ids.filter((id: string) => {\r\n      return !!id;\r\n    });\r\n    if (filteredIds.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * ç¡®è®¤å é¤\r\n   */\r\n  private confirmToRemove(): Observable<boolean> {\r\n    const confirm$ = this.messageService.question(this.languageService.confirmDeletion);\r\n    const result$ = confirm$.pipe(\r\n      concatMap((ifRemove: boolean) => {\r\n        if (ifRemove === false) {\r\n          return EMPTY;\r\n        } else {\r\n          return of(true);\r\n        }\r\n      }\r\n      ));\r\n    return result$;\r\n  }\r\n}\r\n\r\nexport { RemoveDataService };\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { FrameContext, Entity } from '@farris/devkit';\r\nimport { BefRepository } from '@farris/bef';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\n\r\n/**\r\n * å é¤æå¡\r\n */\r\n@Injectable()\r\nclass SaveDataService {\r\n\r\n  private notifyService: FormNotifyService;\r\n\r\n  private messageService: FormMessageService;\r\n\r\n  private loadingService: FormLoadingService;\r\n\r\n  private errorService: FormErrorService;\r\n\r\n  private languageService: LanguageService;\r\n\r\n  private befRepository: BefRepository<any>;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   * @param frameContext ç»ä»¶ä¸ä¸æ\r\n   */\r\n  constructor(private frameContext: FrameContext) {\r\n    this.notifyService = this.frameContext.injector.get<FormNotifyService>(FormNotifyService, null);\r\n    this.messageService = this.frameContext.injector.get<FormMessageService>(FormMessageService, null);\r\n    this.loadingService = this.frameContext.injector.get<FormLoadingService>(FormLoadingService, null);\r\n    this.languageService = this.frameContext.injector.get<LanguageService>(LanguageService, null);\r\n    this.befRepository = this.frameContext.repository as BefRepository<Entity>;\r\n  }\r\n}\r\n\r\nexport { SaveDataService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { tap, switchMap, concatMap } from 'rxjs/operators';\r\n\r\nimport { BindingList, FrameContext, ViewModel } from '@farris/devkit';\r\nimport { BaseDataService } from './base-data.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { TreeRepositoryFactory } from './tree-table/repository/tree-repository-factory';\r\nimport { TreeUtilFactory } from './tree-table/util/tree-util-factory';\r\n\r\n\r\n\r\n/**\r\n * æ æ°æ®æå¡\r\n */\r\n@Injectable()\r\nclass SubTreeDataService extends BaseDataService {\r\n\r\n  /**\r\n   * åçº§ç ä¿¡æ¯\r\n   */\r\n  private get hierarchyInfoKey(): string {\r\n    return this.virtualRootFrameContext.getParam('hierarchyInfoKey');\r\n  }\r\n  private get hierarchyInfoField(): string {\r\n    return this.hierarchyInfoKey.split('/').filter(p => p).pop();\r\n  }\r\n  private get virtualRootFrameContext() {\r\n    return this.frameContext.getVirtualRootFrameContext();\r\n  }\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    frameContext: FrameContext,\r\n    private viewModel: ViewModel,\r\n    private messageService: FormMessageService,\r\n    private loadingService: FormLoadingService,\r\n    private errorService: FormErrorService,\r\n    private formNotifyService: FormNotifyService,\r\n    @Optional() private languageService: LanguageService\r\n  ) {\r\n    super(frameContext);\r\n    if (!languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n\r\n  private get messagePipe() {\r\n    if (this.viewModel && this.viewModel.frameContext) {\r\n      const appContext = this.viewModel.frameContext.getFormAppContext() || null;\r\n      if (appContext) {\r\n        return appContext.messagePipe || null;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * æ°å¢å­è¡¨åçº§\r\n   */\r\n  public addSubSibling(): Observable<any> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'addSubSibling' });\r\n    }\r\n    let params: { nodeCodes: string[], ids: string[] } = this.getParams();\r\n    // è·ååçº§æ¹å¼\r\n    const hierarchyType: string = this.getHierarchyType();\r\n    // æ§è¡åæ°\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\r\n    if (!repository) {\r\n      // éè¯¯çåçº§ç \r\n      throw new Error(this.languageService['errorHierarchyKey']);\r\n    }\r\n    const result$ = repository.addSubSibling(this.repository, params.nodeCodes, params.ids);\r\n    return result$.pipe(\r\n      tap(\r\n        () => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        error => {\r\n          this.errorService.exception(this.languageService.addSubSiblingFailed, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * æ°å¢ä¸çº§\r\n   */\r\n  public addSubChild(): Observable<any> {\r\n    if (this.messagePipe) {\r\n      this.messagePipe.next({ messageType: 'addSubChild' });\r\n    }\r\n    let params: { nodeCodes: string[], ids: string[] } = this.getParams();\r\n    // è·ååçº§æ¹å¼\r\n    const hierarchyType = this.getHierarchyType();\r\n\r\n    const currentList = this.frameContext && this.frameContext.bindingData && this.frameContext.bindingData.getList();\r\n    if (!currentList['currentId']) {\r\n      // è¯·éæ©ç¶èç¹\r\n      this.formNotifyService.warning(this.languageService['plsSelectParentNode'], { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    // æ§è¡åæ°\r\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\r\n\r\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\r\n    if (!repository) {\r\n      throw new Error(this.languageService['errorHierarchyKey']);\r\n    }\r\n    const addSubChild$ = repository.addSubChild(this.repository, params.nodeCodes, params.ids);\r\n    const result$ = addSubChild$.pipe(\r\n      tap(\r\n        () => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n        },\r\n        error => {\r\n          this.loadingService.hideDelayLoading(loadingTimerId);\r\n          this.errorService.exception(this.languageService.addSubChildFailed, error);\r\n        }\r\n      )\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * å é¤å­è¡¨æ èç¹\r\n   * @param id id\r\n   */\r\n  public remove(id: string, successMsg?: string): Observable<any> {\r\n    // åæ°æ£æ¥\r\n    if (!id) {\r\n      this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    // è·ååçº§æ¹å¼\r\n    const hierarchyType = this.getHierarchyType();\r\n    // æå­èç¹æ¶ä¸åè®¸å é¤\r\n    const treeNodesData = this.frameContext.bindingData.getList().toJSON();\r\n    const bindingList = this.frameContext.bindingData.getList();\r\n    const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\r\n    if (treeNodeUtil === null) {\r\n      return EMPTY;\r\n    }\r\n    if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoField, id) === true) {\r\n      this.messageService.warning(this.languageService['deleteChildFirst']);\r\n      return EMPTY;\r\n    }\r\n    // ç¡®è®¤å é¤\r\n    const action$ = this.messageService.question(this.languageService.confirmDeletion);\r\n    return action$.pipe(\r\n      concatMap(result => {\r\n        if (!result) {\r\n          return EMPTY;\r\n        }\r\n        // è·åå é¤åè¦è®¾ç½®çèç¹id\r\n        const nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoField, id);\r\n\r\n        // æ§è¡å é¤\r\n        const loadingTimerId = this.loadingService.show();\r\n        const path = this.getPath();\r\n        const remove$ = this.frameContext.repository.removeByPath(path, id);\r\n        return remove$.pipe(\r\n          tap(() => {\r\n            // è®¾ç½®éä¸­èç¹\r\n            treeNodeUtil.selectNodeByBindingList(bindingList, this.hierarchyInfoField, nextNodeId);\r\n            this.loadingService.hideDelayLoading(loadingTimerId);\r\n            if (successMsg && successMsg.trim()) {\r\n              this.formNotifyService.success(successMsg, { hideTitle: true });\r\n            } else {\r\n              this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n            }\r\n            // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\r\n          },\r\n            error => {\r\n              this.loadingService.hideDelayLoading(loadingTimerId);\r\n              this.errorService.exception(this.languageService.deleteFailed, error);\r\n            }\r\n          )\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  private getHierarchyType() {\r\n    const propInfo = this.repository.entityTypeInfo.getPropInfoByPath(this.hierarchyInfoKey.split('/'));\r\n    let hierarchyType = propInfo.metadataInfo['hierarchyType'] || null;\r\n    if (hierarchyType == null || hierarchyType.length < 1) {\r\n      // 'åçº§ç éç½®ä¿¡æ¯éè¯¯'\r\n      throw new Error(this.languageService['incorrectHierarchyConfig']);\r\n    }\r\n    return hierarchyType;\r\n  }\r\n\r\n  /**\r\n   * è·ååæ°\r\n   * /parentId/childCodes/childId/grandsonCodes\r\n   * [childCodes, grandsonCodes]\r\n   * [parntId, childId]\r\n   */\r\n  private getParams(): { nodeCodes: string[], ids: string[] } {\r\n    let nodeCodes = this.viewModel.bindingPath.substr(1).split('/');\r\n    let ids = [];\r\n    let nodeCodeArray = [];\r\n    const rid = this.viewModel.bindingData.list.currentId; // rootè¡¨æ°æ®id\r\n    ids.push(rid);\r\n    let subData: any = this.viewModel.bindingData;\r\n    if (nodeCodes.length > 0) {\r\n      nodeCodes.map(nodeCode => {\r\n        subData = subData[nodeCode];\r\n        if (subData && subData.currentId) {\r\n          ids.push(subData.currentId);\r\n        }\r\n        //å»é¤nodeCodeçs\r\n        nodeCode ? nodeCodeArray.push(nodeCode.substring(0, nodeCode.length - 1)) : nodeCodeArray.push(nodeCode);\r\n      })\r\n    }\r\n    return { nodeCodes: nodeCodeArray, ids: ids };\r\n  }\r\n  /**\r\n   * è·åå®æ´è·¯å¾\r\n   * fixed by justin: æ ¹æ®bindingPathï¼å¦ææ¯ä»ä»è¡¨ï¼éè¦è·åä¸»è¡¨æ°æ®idåä»è¡¨æ°æ®id\r\n   */\r\n  private getPath(): string {\r\n    const bindingPath = this.viewModel.bindingPath;\r\n    const rid = this.viewModel.bindingData.list.currentId; // rootè¡¨æ°æ®id\r\n    let path = '/' + rid;\r\n\r\n    const subPaths = bindingPath.split('/').filter(p => p);\r\n    if (subPaths.length > 0) {\r\n      // eg:bindingPathå½¢å¦/edus/grades,splitåæ¯['edus', 'grades']\r\n      let subData: any = this.viewModel.bindingData;\r\n      for (let index = 1; index < subPaths.length - 1; index++) {\r\n        const subPath = subPaths[index];\r\n        subData = subData[subPath];\r\n        if (!subData || !subData.currentId) {\r\n          throw Error(`è·åå­è¡¨å®æ´è·¯å¾åºéï¼æ¾ä¸å°${subData}å¯¹åºçå­è¡¨ï¼æå¯¹åºå­è¡¨æ²¡æå½åè¡ã`);\r\n        }\r\n        path += `/${subPath}/${subData.currentId}`;\r\n      }\r\n    }\r\n    path += '/' + subPaths[subPaths.length - 1];\r\n\r\n    return path;\r\n  }\r\n}\r\nexport { SubTreeDataService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Repository } from '@farris/devkit';\r\nimport { BefRepository, BefRestService, RequestInfo, ResponseInfo } from '@farris/bef';\r\nimport { BodyWithRequestInfo } from './types';\r\nimport { FormLoadingService } from './form-loading/form-loading.service';\r\nimport { FormMessageService } from './form-message.service';\r\nimport { FormNotifyService } from './form-notify.service';\r\nimport { FormErrorService } from './error/form-error.service';\r\nimport { LanguageService } from './languag.service';\r\n// tslint:disable: no-string-literal\r\n\r\n/**\r\n * åè¡¨ä»åºæå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass BeActionService {\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private repository: Repository<any>,\r\n    private loadingService: FormLoadingService,\r\n    private msgService: FormMessageService,\r\n    private notifyService: FormNotifyService,\r\n    private formErrorService: FormErrorService,\r\n    @Optional() private languageService: LanguageService,\r\n  ) {\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æ§è¡èªå®ä¹å¨ä½\r\n   */\r\n  public invokeAction(\r\n    actionUri: string, httpMethod: string, httpHeaders?: any, queryParams?: any, body?: BodyWithRequestInfo\r\n  ): Observable<ResponseInfo> {\r\n    return this.innerInvokeAction(actionUri, httpMethod, httpHeaders, queryParams, body, true);\r\n  }\r\n\r\n  /**\r\n   * å·²å¼ç¨ï¼è¯·ä½¿ç¨invokeActionä»£æ¿\r\n   * @deprecated\r\n   * @summary\r\n   * è¿ç§»æ¶è¯·æ³¨æï¼invokeActionä¸­bodyè¯·ä¼ éæ»¡è¶³BodyWithRequestInfoæ¥å£çæ ¼å¼ï¼å½¢å¦ï¼\r\n   * { requestInfo: reqeustInfoInstance, key1: value1, key2: value2 }\r\n   */\r\n  public executeAction(\r\n    actionUri: string, httpMethod: string, httpHeaders?: any, queryParams?: any, body?: any\r\n  ): Observable<any> {\r\n\r\n    // 1ãä¸ç¡®å®bodyä¸­æ¯å¦æRequestInfoå¯¹è±¡\r\n    // 2ãrestServiceçreqeustä¼æ ¹æ®bodyä¸­æ¯å¦ækeyä¸ºReqeustInfoï¼å¤§åå¼å¤´ï¼çåæ°æ¥ç¡®å®ï¼\r\n    // 3ãå¦æbodyä¸­æ²¡ækeyä¸ºReqeustInfoçåæ°ï¼ä¸ç´æ¥è¿åResponseInfoï¼èæ¯è¿ä¸æ­¥è§£æï¼è¿åå¶ä¸­çreturnValueã\r\n    return this.innerInvokeAction(actionUri, httpMethod, httpHeaders, queryParams, body, false);\r\n  }\r\n\r\n  /**\r\n   * æé æ¥è¯¢å­ç¬¦ä¸²\r\n   */\r\n  public buildQueryParams(queryParams: string): string {\r\n    if (typeof queryParams === 'string') {\r\n      queryParams = JSON.parse(queryParams);\r\n    }\r\n\r\n    let queryParamsString = '';\r\n    Object.keys(queryParams).forEach((key: string) => {\r\n      queryParamsString += `${key}=${queryParams[key]}`;\r\n    });\r\n\r\n    return queryParamsString;\r\n  }\r\n\r\n  /**\r\n   * è·åRestæå¡\r\n   */\r\n  public getRestService(): BefRestService {\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    return befRepository.restService;\r\n  }\r\n\r\n\r\n  /**\r\n   * è°ç¨èªå®ä¹å¨ä½\r\n   */\r\n  private innerInvokeAction(\r\n    actionUri: string, httpMethod: string, httpHeaders?: any, queryParams?: any, body?: any, hasRequestInfo?: boolean\r\n  ): Observable<any>  {\r\n    const options = {};\r\n    const restService = this.getRestService();\r\n    const baseUri = restService.baseUri;\r\n\r\n    // æé url\r\n    let fullActionUri = `${baseUri}/service/${actionUri}`;\r\n    if (queryParams && queryParams !== '') {\r\n      const queryParamsString = this.buildQueryParams(queryParams);\r\n      fullActionUri += queryParamsString;\r\n    }\r\n\r\n\r\n    // bodyæé \r\n    if (body && body !== '') {\r\n      if (typeof body === 'string' && body.startsWith('{') && body.endsWith('}')) {\r\n        body = JSON.parse(body);\r\n      }\r\n      options['body'] = body;\r\n    }\r\n\r\n    // httpå¤´æé \r\n    if (httpHeaders && httpHeaders !== '') {\r\n      httpHeaders = JSON.parse(httpHeaders);\r\n\r\n      // å¦ææ²¡æè®¾ç½®Content-Typeï¼é»è®¤ç¨jsonæ ¼å¼\r\n      if (!httpHeaders['Content-Type']) {\r\n        httpHeaders['Content-Type'] = 'application/json';\r\n      }\r\n      options['headers'] = new HttpHeaders(httpHeaders);\r\n    } else {\r\n      options['headers'] = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n    }\r\n\r\n    // æ§è¡æå¡å¨ç«¯è¯·æ±\r\n    this.loadingService.show();\r\n\r\n    // invokeæ¹æ³\r\n    // 1ãRequestInfo=>æ¥é\r\n    // 2ãrequestInfo=>ResponseInfo\r\n    // requestæ¹æ³\r\n    // 1ãRequestInfo=>ResponseInfo\r\n    // 2ãrequestInfo=>returnValue\r\n    const methodName = hasRequestInfo ? 'invoke' : 'request';\r\n    const result$ = restService[methodName](fullActionUri, httpMethod, null, options);\r\n    return result$.pipe(\r\n      tap(\r\n        () => {\r\n          this.loadingService.hide();\r\n        },\r\n        (error: any) => {\r\n          this.loadingService.hide();\r\n          const errorMsg = fullActionUri + this.languageService['operationFailed'];\r\n          this.formErrorService.exception(errorMsg, error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport { BeActionService };\r\n\r\n\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable, empty, of, from, EMPTY } from 'rxjs';\r\nimport { tap, map, switchMap, catchError } from 'rxjs/operators';\r\nimport { BeActionService } from './be-action.service';\r\nimport { FormMessageService } from './form-message.service';\r\nimport { FormNotifyService } from './form-notify.service';\r\nimport { LanguageService } from './languag.service';\r\nimport { FormLoadingService } from './form-loading/form-loading.service';\r\nimport { FormErrorService } from './error/form-error.service';\r\nimport { WFSubmiteService, InteractionResponse, ExcutionResponse } from '@gsp-wf/rtdevkit';\r\nimport { WfTaskHandlerService } from '@gsp-wf/wf-task-handler';\r\nimport { BefRepository } from '@farris/bef';\r\nimport { Entity, FrameContext } from '@farris/devkit';\r\nimport { WFFlowchartService } from '@gsp-wf/ui-flowchart';\r\nimport { FormNotifyStrategyService } from './form-notify-strategy.service';\r\nimport { BodyWithRequestInfo } from './../lib/types';\r\n// tslint:disable: max-line-length\r\n/**\r\n * å®¡æ¹æå¡\r\n * @Scope FrameComponent\r\n */\r\n@Injectable()\r\nclass ApproveService {\r\n\r\n  /**\r\n   * å®ä½ä»åº\r\n   */\r\n  private repository: BefRepository<Entity>;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private formLoadingService: FormLoadingService,\r\n    private beActionService: BeActionService,\r\n    private msgService: FormMessageService,\r\n    private notifyService: FormNotifyService,\r\n    @Optional() private languageService: LanguageService,\r\n    private formErrorService: FormErrorService,\r\n    private frameContext: FrameContext,\r\n    @Optional() private submitter: WFSubmiteService,\r\n    @Optional() private flowchartService: WFFlowchartService,\r\n    @Optional() private wfTaskHandlerService: WfTaskHandlerService\r\n  ) {\r\n    if (this.frameContext) {\r\n      this.repository = this.frameContext.repository as BefRepository<Entity>;\r\n      if (!this.wfTaskHandlerService) {\r\n        this.wfTaskHandlerService = this.frameContext.injector.get(WfTaskHandlerService, null);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * å¸¦æäº¤äºçæäº¤å®¡æ¹\r\n   */\r\n  submitApproveWithInteraction(bizBillID: string) {\r\n    return this.submitApprove(bizBillID);\r\n  }\r\n\r\n  /**\r\n   * æäº¤å®¡æ¹\r\n   * @param bizBillID ä¸å¡åæ®id\r\n   * @param interactionResult åç«¯äº¤äºç»æ\r\n   * @deprecated å·²åºå¼ï¼æ¸ä½¿ç¨åå«å¥å£åæ®çå®¡æ¹\r\n   */\r\n  submitApprove(bizBillID: string, interactionResult?: InteractionResponse): Observable<any> {\r\n    if (!bizBillID) {\r\n      // this.msgService.error(this.languageService.unallowEmptyBizBillId);\r\n      this.notifyService.info(this.languageService.unallowEmptyBizBillId, { hideTitle: true });\r\n      return empty();\r\n    }\r\n\r\n    const actionUri = 'submittoapprovevoaction';\r\n\r\n    const restService = this.beActionService.getRestService();\r\n\r\n    const body: BodyWithRequestInfo = {\r\n      requestInfo: restService.buildRequestInfo(),\r\n      bizInstID: bizBillID,\r\n      interactionResult: interactionResult ? {\r\n        procDefId: interactionResult.processDefinitionId\r\n      } : {}\r\n    };\r\n\r\n    this.formLoadingService.show();\r\n\r\n    // æ·»å æç¤º\r\n    const action$ = this.beActionService.invokeAction(actionUri, 'PUT', null, null, body);\r\n    // ç®ååå«ä¸ç§æåµï¼\r\n    // 1. ç¬¬ä¸æ¬¡æäº¤æåï¼æå¡ç«¯è¿åæµç¨å®ä¾id\r\n    // 2. ç¬¬ä¸æ¬¡æäº¤æåï¼æå¡ç«¯è¿åæµç¨å®ä¾idï¼å¹¶è¿åå¤ä¸ªåä¸èï¼äº¤äºæ¶æäº¤åä¸è\r\n    // 3. ç¬¬ä¸æ¬¡æäº¤æªæåï¼æå¡ç«¯è¿åå¤ä¸ªæµç¨å®ä¹ï¼éè¦äº¤äºåç¬¬äºæ¬¡æäº¤å®¡æ¹ï¼ç¬¬äºæ¬¡æäº¤ä¼åºç°æåµ1åæåµ2\r\n\r\n    return action$.pipe(\r\n      map((result): ExcutionResponse => {\r\n        if (result && result.returnValue && result.returnValue.excutionResponse) {\r\n          var wfResponse: ExcutionResponse = result.returnValue.excutionResponse;\r\n          return wfResponse;\r\n        }\r\n      }),\r\n      switchMap((response: ExcutionResponse) => {\r\n        if (response && response.procInstId) {\r\n          if (this.repository) {\r\n            const updating$ = this.repository.updateById(bizBillID);\r\n            return updating$.pipe(tap(() => {\r\n              this.formLoadingService.hide();\r\n              // this.notifyService.info(this.languageService.submitSuccess);\r\n              FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);\r\n            }), map(() => {\r\n              return response;\r\n            }));\r\n          } else {\r\n            this.formLoadingService.hide();\r\n            // this.notifyService.info(this.languageService.submitSuccess);\r\n            FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);\r\n            return of(response);\r\n          }\r\n        } else {\r\n          return of(response);\r\n        }\r\n      }),\r\n      switchMap((response: ExcutionResponse) => {\r\n        if (response.needInteraction) {\r\n          return from(new Promise((resolve) => {\r\n            this.submitter.excute(response, (interactionResponse: InteractionResponse) => {\r\n              // å¦ææ­¤æ¬¡æªæäº¤ï¼èéæ©åå¾å°äºæµç¨å®ä¹IDï¼åå¨æ­¤æäº¤å®¡æ¹\r\n              if (!response.procInstId && interactionResponse.processDefinitionId) {\r\n                this.submitApprove(bizBillID, interactionResponse).subscribe(() => {\r\n                  resolve();\r\n                });\r\n              } else {\r\n                resolve();\r\n              }\r\n            });\r\n          }));\r\n        } else {\r\n          return of(null);\r\n        }\r\n      }),\r\n      catchError(\r\n        error => {\r\n          this.formLoadingService.hide();\r\n          // this.formErrorService.exception(this.languageService.submitFaild, error);\r\n          return of(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * æäº¤å®¡æ¹(å¸¦å¥å£åæ®)\r\n   * @param bizBillID ä¸å¡åæ®Id\r\n   * @param bizDefKey å¥å£åæ®Id\r\n   * @param options options\r\n   * @param interactionResult äº¤äºç»æ\r\n   */\r\n\r\n  public submitApproveWithBizDefKey(bizBillID: string, bizDefKey: string, options?: any, interactionResult?: InteractionResponse): Observable<any> {\r\n    if (!bizBillID) {\r\n      this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    if (!bizDefKey) {\r\n      this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    try {\r\n      if (options && typeof (options) === 'string') {\r\n        options = JSON.parse(options);\r\n      }\r\n    } catch (e) {\r\n      throw new Error('ArgumentError:options not a valid json string.');\r\n    }\r\n\r\n    const actionUri = 'submittoapprovewithpayload';\r\n\r\n    const restService = this.beActionService.getRestService();\r\n\r\n    const body: BodyWithRequestInfo = {\r\n      requestInfo: restService.buildRequestInfo(),\r\n      approvePayload: {\r\n        startProcessPayload: {\r\n          bizDefKey: bizDefKey,\r\n          dataId: bizBillID,\r\n          name: options && options.name || '',\r\n          variables: options && options.variables || {}\r\n        }\r\n      }\r\n    };\r\n    if (interactionResult) {\r\n      body.approvePayload.startProcessPayload.processDefinitionId = interactionResult.processDefinitionId;\r\n      body.approvePayload.startProcessPayload.processDefinitionKey = interactionResult['processDefinitionKey'];\r\n    }\r\n    this.formLoadingService.show();\r\n\r\n    // æ·»å æç¤º\r\n    const action$ = this.beActionService.invokeAction(actionUri, 'PUT', null, null, body);\r\n    // ç®ååå«ä¸ç§æåµï¼\r\n    // 1. ç¬¬ä¸æ¬¡æäº¤æåï¼æå¡ç«¯è¿åæµç¨å®ä¾id\r\n    // 2. ç¬¬ä¸æ¬¡æäº¤æåï¼æå¡ç«¯è¿åæµç¨å®ä¾idï¼å¹¶è¿åå¤ä¸ªåä¸èï¼äº¤äºæ¶æäº¤åä¸è\r\n    // 3. ç¬¬ä¸æ¬¡æäº¤æªæåï¼æå¡ç«¯è¿åå¤ä¸ªæµç¨å®ä¹ï¼éè¦äº¤äºåç¬¬äºæ¬¡æäº¤å®¡æ¹ï¼ç¬¬äºæ¬¡æäº¤ä¼åºç°æåµ1åæåµ2\r\n\r\n    return action$.pipe(\r\n      map((result): ExcutionResponse => {\r\n        if (result && result.returnValue && result.returnValue.excutionResponse) {\r\n          const wfResponse: ExcutionResponse = result.returnValue.excutionResponse;\r\n          return wfResponse;\r\n        }\r\n      }),\r\n      switchMap((response: ExcutionResponse) => {\r\n        if (response && response.procInstId) {\r\n          if (this.repository) {\r\n            const updating$ = this.repository.updateById(bizBillID);\r\n            return updating$.pipe(tap(() => {\r\n              this.formLoadingService.hide();\r\n              // this.notifyService.info(this.languageService.submitSuccess);\r\n              FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);\r\n            }), map(() => {\r\n              return response;\r\n            }));\r\n          } else {\r\n            this.formLoadingService.hide();\r\n            // this.notifyService.info(this.languageService.submitSuccess);\r\n            FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);\r\n            return of(response);\r\n          }\r\n        } else {\r\n          return of(response);\r\n        }\r\n      }),\r\n      switchMap((response: ExcutionResponse) => {\r\n        if (response.needInteraction) {\r\n          return from(new Promise((resolve) => {\r\n            this.submitter.excute(response, (interactionResponse: InteractionResponse) => {\r\n              // å¦ææ­¤æ¬¡æªæäº¤ï¼èéæ©åå¾å°äºæµç¨å®ä¹IDï¼åå¨æ­¤æäº¤å®¡æ¹\r\n              if (!response.procInstId && interactionResponse.processDefinitionId) {\r\n                this.submitApproveWithBizDefKey(bizBillID, bizDefKey, options, interactionResponse).subscribe(() => {\r\n                  resolve();\r\n                });\r\n              } else {\r\n                resolve();\r\n              }\r\n            });\r\n          }));\r\n        } else {\r\n          return of(null);\r\n        }\r\n      }),\r\n      catchError(\r\n        error => {\r\n          this.formLoadingService.hide();\r\n          // this.formErrorService.exception(this.languageService.submitFaild, error);\r\n          return of(error);\r\n        }\r\n      )\r\n    );\r\n  }\r\n  /**\r\n   * æäº¤å®¡æ¹(å¸¦å¥å£åæ®ä½¿ç¨wfæ§ä»¶)\r\n   * @param bizBillID ä¸å¡åæ®Id\r\n   * @param bizDefKey å¥å£åæ®Id\r\n   * @param options ä¸ä¸æåæ°\r\n   * @param variables å¯éåæ°\r\n   */\r\n  public submitApproveWithBizDefKeyUseControl(bizBillID: string, bizDefKey: string, options: any = {}, variables?: any) {\r\n    if (!bizBillID) {\r\n      this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    if (!bizDefKey) {\r\n      this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    if (!options || typeof options !== 'object') {\r\n      options = {};\r\n    }\r\n    const payload: any = {\r\n      dataId: bizBillID,\r\n      bizDefKey,\r\n      ...options\r\n    };\r\n    // å¤çvariablesåæ°\r\n    if (variables) {\r\n      if (variables.startsWith('{') && variables.endsWith('}')) {\r\n        try {\r\n          variables = JSON.parse(variables);\r\n        } catch {\r\n          variables = {};\r\n        }\r\n      }\r\n      payload.variables = variables;\r\n    }\r\n    return this.wfTaskHandlerService && this.wfTaskHandlerService.startProcess(payload);\r\n  }\r\n  /**\r\n   * å­è¡¨æäº¤å®¡æ¹\r\n   * @param bizDefKey å¥å£åæ®Id\r\n   * @param bizId ä¸å¡åæ®Idï¼ä¸»è¡¨ï¼\r\n   * @param childBizId ä¸å¡åæ®Idï¼ä»è¡¨ï¼\r\n   * @param options ä¸ä¸æåæ°\r\n   * @param variables å¯éåæ°\r\n   */\r\n  public childSubmitApproveWithBizDefKey(bizDefKey: string, bizId: string, childBizId: string, options: any = {}, variables?: any): Observable<any> {\r\n    // å¥å£åæ®ä¸è½ä¸ºç©º\r\n    if (!bizDefKey) {\r\n      this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    // ä¸»ä¸å¡åæ®Idä¸è½ä¸ºç©º\r\n    if (!bizId) {\r\n      this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    // ä»è¡¨ä¸å¡åæ®Idä¸è½ä¸ºç©º\r\n    if (!childBizId) {\r\n      this.notifyService.warning(this.languageService.unallowEmptyChildBizBillId, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    if (!options || typeof options !== 'object') {\r\n      options = {};\r\n    }\r\n    const payload: any = {\r\n      dataId: `${bizId},${childBizId}`,\r\n      bizDefKey,\r\n      ...options\r\n    };\r\n    // å¤çvariablesåæ°\r\n    if (variables) {\r\n      if (variables.startsWith('{') && variables.endsWith('}')) {\r\n        try {\r\n          variables = JSON.parse(variables);\r\n        } catch {\r\n          variables = {};\r\n        }\r\n      }\r\n      payload.variables = variables;\r\n    }\r\n    return this.wfTaskHandlerService && this.wfTaskHandlerService.startProcess(payload);\r\n  }\r\n  /**\r\n   * åæ¶å®¡æ¹\r\n   * @deprecated å·²åºå¼ï¼è¯·ä½¿ç¨cancelSubmit\r\n   */\r\n  public cancelApprove(bizBillID: string): Observable<any> {\r\n    if (!bizBillID) {\r\n      this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });\r\n      return empty();\r\n    }\r\n\r\n    const actionUri = 'canceltosubmitvoaction';\r\n\r\n    const restService = this.beActionService.getRestService();\r\n\r\n    const body = {\r\n      requestInfo: restService.buildRequestInfo(),\r\n      bizInstID: bizBillID,\r\n    };\r\n\r\n    this.formLoadingService.show();\r\n\r\n    const action$ = this.beActionService.executeAction(actionUri, 'PUT', null, null, body);\r\n    return action$.pipe(\r\n      switchMap(() => {\r\n        if (this.repository) {\r\n          const updating$ = this.repository.updateById(bizBillID);\r\n          return updating$.pipe(tap(() => {\r\n            this.formLoadingService.hide();\r\n            // this.notifyService.info(this.languageService.cancelApproveSuccess);\r\n            FormNotifyStrategyService.success(this.notifyService, this.languageService.cancelApproveSuccess);\r\n          }));\r\n        } else {\r\n          this.formLoadingService.hide();\r\n          // this.notifyService.info(this.languageService.cancelApproveSuccess);\r\n          FormNotifyStrategyService.success(this.notifyService, this.languageService.cancelApproveSuccess);\r\n          return of();\r\n        }\r\n      }\r\n      ),\r\n      catchError(error => {\r\n        this.formLoadingService.hide();\r\n        // this.formErrorService.exception(this.languageService.cancelApproveFailed, error);\r\n        return of(error);\r\n      }));\r\n  }\r\n  /**\r\n   * åæ¶å®¡æ¹(æ¯æä¸»è¡¨ãå­è¡¨)\r\n   * @param procInstId æµç¨å®ä¾Id\r\n   */\r\n  public cancelSubmit(procInstId: string): Observable<any> {\r\n    if (!procInstId) {\r\n      this.notifyService.warning(this.languageService.procInsIdRequired, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    return this.wfTaskHandlerService && this.wfTaskHandlerService.cancelSubmit({ procInstId: procInstId });\r\n  }\r\n  /**\r\n   * æ¥çæµç¨å¾\r\n   * @param procInstId æµç¨å®ä¾ID\r\n   */\r\n  viewProcess(procInstId: string) {\r\n    if (this.flowchartService) {\r\n      if (!procInstId) {\r\n        this.notifyService.warning(this.languageService.noProcessInstanceId, { hideTitle: true });\r\n        return;\r\n      }\r\n      return this.flowchartService.viewFlowChart(procInstId);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * è½¬æ¢éç½®å¤§å°å\r\n   * @param jsonObj Object\r\n   * @deprecated\r\n   */\r\n  private switchPrefixLetter(jsonObj: any, toUpper: boolean): any {\r\n    if (typeof (jsonObj) === 'object' && !!jsonObj) {\r\n      if (Array.isArray(jsonObj)) {\r\n        for (var i = 0; i < jsonObj.length; i++) {\r\n          this.switchPrefixLetter(jsonObj[i], toUpper);\r\n        }\r\n      } else {\r\n        for (const key of Object.keys(jsonObj)) {\r\n          var newKey = (toUpper ? key.substring(0, 1).toUpperCase() : key.substring(0, 1).toLowerCase()) + key.substring(1);\r\n          jsonObj[newKey] = jsonObj[key];\r\n          if (typeof jsonObj[key] === 'object') {\r\n            this.switchPrefixLetter(jsonObj[key], toUpper);\r\n          }\r\n          delete (jsonObj[key]);\r\n        }\r\n      }\r\n    }\r\n    return jsonObj;\r\n  }\r\n}\r\nexport { ApproveService };\r\n","import { Injectable, Injector, Optional } from '@angular/core';\r\nimport { EMPTY } from 'rxjs';\r\nimport { FormMessageService } from './form-message.service';\r\nimport { LanguageService } from './languag.service';\r\nimport { BefRepository } from '@farris/bef';\r\nimport { CommandContext, Entity, FrameContext } from '@farris/devkit';\r\nimport { CloudprintService, OutputOptions, SourceOptions, OutputType, FileType, SourceFilterOptions, PrintType } from '@gsp-svc/cloudprint';\r\nimport { FormNotifyService } from './form-notify.service';\r\n// tslint:disable: unified-signatures\r\n// tslint:disable: max-line-length\r\n/**\r\n * æå°æå¡\r\n * @Scope FrameComponent\r\n */\r\n@Injectable()\r\nclass PrintService {\r\n  /**\r\n   * å®ä½ä»åº\r\n   */\r\n  private repository: BefRepository<Entity>;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private msgService: FormMessageService,\r\n    private languageService: LanguageService,\r\n    private printService: CloudprintService,\r\n    @Optional() private formNotifyService: FormNotifyService,\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * æå°åæ®\r\n   * @param beMetaId BEåæ°æ®æ è¯\r\n   * @param bizBillId ä¸å¡åæ®æ è¯\r\n   */\r\n  public printSingle(beMetaId: string, bizBillId: string) {\r\n    if (!bizBillId) {\r\n      // this.msgService.error(this.languageService.unallowEmptyBizBillId);\r\n      this.showWarning(this.languageService.unallowEmptyBizBillId);\r\n      return EMPTY;\r\n    }\r\n    return this.printArray(beMetaId, [bizBillId]);\r\n  }\r\n  /**\r\n   * æå°åæ®ï¼éè¿idæidsï¼\r\n   * @param beMetaId beåæ°æ®Id\r\n   * @param ids åæ®idæids\r\n   */\r\n  public printByIds(beMetaId: string, ids: string) {\r\n    if (!ids) {\r\n      // this.msgService.error(this.languageService.unallowEmptyBizBillId);\r\n      this.showWarning(this.languageService.unallowEmptyBizBillId);\r\n      return EMPTY;\r\n    }\r\n    const dataIds: Array<string> = ids.split(',').filter(item => item);\r\n    return this.printArray(beMetaId, dataIds);\r\n  }\r\n  /**\r\n   * æå°åæ®ï¼å¸¦ç»´åº¦ï¼\r\n   * @param beMetaId beåæ°æ®Id\r\n   * @param ids åæ®idæids\r\n   * @param dim1 ç»´åº¦1å¼\r\n   * @param dim2 ç»´åº¦2å¼\r\n   * @param billCategoryId åæ®ç±»åId\r\n   */\r\n  public printByIdsWithDimension(beMetaId: string, ids: string, dim1: string, dim2: string, billCategoryId?: string) {\r\n    if (!ids) {\r\n      // this.msgService.error(this.languageService.unallowEmptyBizBillId);\r\n      this.showWarning(this.languageService.unallowEmptyBizBillId);\r\n      return EMPTY;\r\n    }\r\n    const dataIds: Array<string> = ids.split(',').filter(item => item);\r\n    return this.printArray(beMetaId, dataIds, dim1, dim2, billCategoryId);\r\n  }\r\n  /**\r\n   * æå°å¤ä¸ªåæ®\r\n   * @param beMetaId BEåæ°æ®æ è¯\r\n   * @param dataIds ä¸å¡åæ®æ è¯æ°ç»\r\n   * @param dim1 ç»´åº¦1\r\n   * @param dim2 ç»´åº¦2\r\n   * @param billCategoryId ä¸å¡åæ®ç±»åId\r\n   */\r\n  public printArray(beMetaId: string, dataIds: string[], dim1?: any, dim2?: any, billCategoryId?: string) {\r\n    if (!dataIds || dataIds.length === 0) {\r\n      // this.msgService.error(this.languageService.unallowEmptyBizBillId);\r\n      this.showWarning(this.languageService.unallowEmptyBizBillId);\r\n      return EMPTY;\r\n    }\r\n    const sourceOptions: SourceOptions = this.buildSourceOptions({\r\n      dataIds: dataIds,\r\n      sourceId: beMetaId\r\n    });\r\n\r\n    const outputOptions: OutputOptions = this.buildOutputOptions();\r\n\r\n    if (typeof dim1 !== 'undefined') {\r\n      sourceOptions.FirstDimensionVal = dim1;\r\n    }\r\n    if (typeof dim2 !== 'undefined') {\r\n      sourceOptions.SecondDimensionVal = dim2;\r\n    }\r\n    if (typeof billCategoryId !== 'undefined') {\r\n      sourceOptions.billCategoryId = billCategoryId;\r\n    }\r\n    return this.printService.outputBEData(sourceOptions, outputOptions, 'tab');\r\n  }\r\n\r\n  /**\r\n   * æç§BEåæ°æ¹å¼æ¹éæå°åæ®\r\n   * @param beMetaId BEåæ°æ®æ è¯\r\n   * @param filterCondition è¿æ»¤æ¡ä»¶\r\n   * @param sortCondition æåºæ¡ä»¶\r\n   * @param includeChildData åå«å­è¡¨æ°æ®\r\n   */\r\n  public printMulti(beMetaId: string, filterCondition: string, sortCondition: string, includeChildData: boolean = true) {\r\n    const entryFilter = { 'isUsePagination': false, 'filterConditions': [], 'sortConditions': [], 'pagination': null };\r\n    if (filterCondition) {\r\n      // ç»ä¸çº æ­£æåä¸ä¸ªè¿æ»¤æ¡ä»¶çRelation\r\n      const filters = JSON.parse(filterCondition);\r\n      if (filters && filters.length > 0) {\r\n        filters[filters.length - 1].Relation = 0;\r\n      }\r\n      entryFilter.filterConditions = filters;\r\n    }\r\n\r\n    if (sortCondition) {\r\n      entryFilter.sortConditions = JSON.parse(sortCondition);\r\n    }\r\n    // sfo:SourceFilterOptions\r\n    const sourceFilterOptions: SourceFilterOptions = this.buildSourceFilterOptions({ sourceId: beMetaId, entryFilter, includeChildData });\r\n    const outputOptions: OutputOptions = this.buildOutputOptions();\r\n    return this.printService.outputBEDataWithFilter(sourceFilterOptions, outputOptions, 'tab');\r\n  }\r\n  /**\r\n   * æç§BEåæ°æ¹å¼æ¹éæå°åæ®(å¸¦ç»´åº¦)\r\n   * @param beMetaId BEåæ°æ®æ è¯\r\n   * @param filterCondition è¿æ»¤æ¡ä»¶\r\n   * @param sortCondition æåºæ¡ä»¶\r\n   * @param dim1 ç»´åº¦1value\r\n   * @param dim2 ç»´åº¦2value\r\n   * @param billCategoryId ä¸å¡åæ®ç±»åId\r\n   * @param includeChildData åå«å­è¡¨æ°æ®\r\n   */\r\n  public printMultiWithDimension(beMetaId: string, filterCondition: string, sortCondition: string, dim1: string, dim2: string, billCategoryId?: string, includeChildData: boolean = true) {\r\n    const entryFilter = { 'isUsePagination': false, 'filterConditions': [], 'sortConditions': [], 'pagination': null };\r\n    if (filterCondition) {\r\n      // ç»ä¸çº æ­£æåä¸ä¸ªè¿æ»¤æ¡ä»¶çRelation\r\n      const filters = JSON.parse(filterCondition);\r\n      if (filters && filters.length > 0) {\r\n        filters[filters.length - 1].Relation = 0;\r\n      }\r\n      entryFilter.filterConditions = filters;\r\n    }\r\n\r\n    if (sortCondition) {\r\n      entryFilter.sortConditions = JSON.parse(sortCondition);\r\n    }\r\n    const sfo: SourceFilterOptions = this.buildSourceFilterOptions({ sourceId: beMetaId, entryFilter, includeChildData });\r\n    if (typeof dim1 !== 'undefined') {\r\n      sfo.FirstDimensionVal = dim1;\r\n    }\r\n    if (typeof dim2 !== 'undefined') {\r\n      sfo.SecondDimensionVal = dim2;\r\n    }\r\n    if (typeof billCategoryId !== 'undefined') {\r\n      sfo.billCategoryId = billCategoryId;\r\n    }\r\n    const outputOptions: OutputOptions = this.buildOutputOptions();\r\n    return this.printService.outputBEDataWithFilter(sfo, outputOptions, 'tab');\r\n  }\r\n  /**\r\n   * æé SourceOptions\r\n   * @param options options\r\n   */\r\n  private buildSourceOptions(options: { dataIds: string[], sourceId: string, [prop: string]: any }): SourceOptions {\r\n    const so: SourceOptions = {\r\n      DataIds: options && options.dataIds || undefined,\r\n      SourceId: options && options.sourceId || undefined,\r\n      FirstDimensionVal: options && options.dim1 || undefined,\r\n      SecondDimensionVal: options && options.dim2 || undefined,\r\n      RetrieveParam: options && options.retrieveParam || undefined,\r\n      FormatId: options && options.formatId || undefined,\r\n      billCategoryId: options && options.billCategoryId || undefined,\r\n      ServiceUnit: options && options.serviceUnit || undefined,\r\n      currentPage: options && options.currentPage || undefined,\r\n      pageRowCount: options && options.pageRowCount || undefined,\r\n      queryType: options && options.queryType || undefined,\r\n      queryServiceId: options && options.queryServiceId || undefined,\r\n      queryParam: options && options.queryParam || undefined\r\n    };\r\n    return so;\r\n  }\r\n  /**\r\n   * æé OutputOptions\r\n   * @param options options\r\n   */\r\n  private buildOutputOptions(options?: { [prop: string]: any }): OutputOptions {\r\n    const oo: OutputOptions = {\r\n      OutputType: options && options.outputType || OutputType.PRINT,\r\n      FileType: options && options.fileType || FileType.Html5,\r\n      Path: options && options.path || undefined,\r\n      DeviceId: options && options.deviceId || undefined,\r\n      printJob: options && options.printJob || undefined,\r\n      printerName: options && options.printerName || undefined,\r\n      printSetting: options && options.printSetting || undefined,\r\n      printType: options && options.printType || PrintType.Form\r\n    };\r\n    return oo;\r\n  }\r\n  /**\r\n   * æé SourceFilterOptions\r\n   * @param options options\r\n   */\r\n  private buildSourceFilterOptions(options: { sourceId: string, [prop: string]: any }): SourceFilterOptions {\r\n    const entryFilter = { 'isUsePagination': false, 'filterConditions': [], 'sortConditions': [], 'pagination': null };\r\n    const sfo: SourceFilterOptions & { [prop: string]: any } = {\r\n      SourceId: options.sourceId,\r\n      EntityFilter: options && options.entryFilter || entryFilter,\r\n      FirstDimensionVal: options && options.dim1 || undefined,\r\n      SecondDimensionVal: options && options.dim2 || undefined,\r\n      FormatId: options && options.formatId || undefined,\r\n      ServiceUnit: options && options.serviceUnit || undefined,\r\n      billCategoryId: options && options.billCategoryId || undefined,\r\n      currentPage: options && options.currentPage || undefined,\r\n      pageRowCount: options && options.pageRowCount || undefined,\r\n      queryParam: options && options.queryParam || undefined,\r\n      queryServiceId: options && options.queryServiceId || undefined,\r\n      queryType: options && options.queryType || undefined,\r\n      includeChildData: options && options.hasOwnProperty('includeChildData') ? options.includeChildData : true\r\n    };\r\n    return sfo;\r\n  }\r\n  /**\r\n   * å±ç¤ºéè¯¯æ¶æ¯\r\n   * @param message éè¯¯æ¶æ¯\r\n   */\r\n  private showWarning(message: string) {\r\n    if (this.notifyService) {\r\n      this.notifyService.warning(message, { hideTitle: true });\r\n    } else if (this.msgService) {\r\n      this.msgService.error(message);\r\n    }\r\n  }\r\n  private get notifyService(): FormNotifyService | null {\r\n    if (this.formNotifyService) {\r\n      return this.formNotifyService;\r\n    } else if (this.injector) {\r\n      return this.injector.get<FormNotifyService>(FormNotifyService, null);\r\n    }\r\n    return null;\r\n  }\r\n  private get commandContext(): CommandContext | null {\r\n    return this['context'] || null;\r\n  }\r\n  private get frameContext(): FrameContext | null {\r\n    return this.commandContext && this.commandContext.frameContext || null;\r\n  }\r\n  private get injector(): Injector | null {\r\n    return this.frameContext && this.frameContext.injector || null;\r\n  }\r\n}\r\n\r\nexport { PrintService };\r\n","/**\r\n * éä»¶ä¿¡æ¯å®ä¹\r\n */\r\ninterface AttachmentInfo {\r\n\r\n  /**\r\n   * éä»¶id\r\n   */\r\n  attachmentId: string;\r\n\r\n  /**\r\n   * éä»¶åç§°\r\n   */\r\n  fileName: string;\r\n}\r\n\r\n\r\n/**\r\n * æå¡å¨ç«¯æéçéä»¶ä¿¡æ¯å®ä¹\r\n */\r\ninterface ServerAttachmentInfo {\r\n\r\n  /**\r\n   * è¡¨åè·¯å¾\r\n   */\r\n  NodeCodes: string[];\r\n\r\n  /**\r\n   * ä¸»é®è·¯å¾\r\n   */\r\n  HiretryIds: string[];\r\n\r\n  /**\r\n   * éä»¶idæ°ç»ï¼æ¹éæ°å¢æ¶ä½¿ç¨ï¼\r\n   */\r\n  AttachmentIds?: string[];\r\n\r\n  /**\r\n   * éä»¶idï¼æ´æ°æ¶ä½¿ç¨ï¼\r\n   */\r\n  AttachmentId?: string;\r\n}\r\n/**\r\n * éä»¶udtæåºå­æ®µ\r\n */\r\nconst ATTACHMENT_ORDER_FIELD = 'fileSortOrder';\r\n\r\nexport { AttachmentInfo, ServerAttachmentInfo, ATTACHMENT_ORDER_FIELD };\r\n","import { UploadFileInfo } from '@gsp-svc/formdoc-upload';\r\nimport { AttachmentInfo } from './types';\r\n\r\n/**\r\n * éä»¶ä¿¡æ¯å¤çå·¥å·ç±»\r\n */\r\nclass AttachmentUtil {\r\n\r\n  /**\r\n   * è½¬æ¢ä¸ºéä»¶ä¿¡æ¯æ°ç»\r\n   */\r\n  public static convertToAttachmentInfos(fileInfos: UploadFileInfo[]): AttachmentInfo[] {\r\n    if (!fileInfos) {\r\n      return [];\r\n    }\r\n    const attachmentInfos: AttachmentInfo[] = fileInfos.map((fileInfo: UploadFileInfo) => {\r\n      return this.convertToAttachmentInfo(fileInfo);\r\n    });\r\n    return attachmentInfos;\r\n  }\r\n\r\n  /**\r\n   * è½¬æ¢ä¸ºéä»¶ä¿¡æ¯\r\n   */\r\n  public static convertToAttachmentInfo(fileInfo: UploadFileInfo): AttachmentInfo {\r\n    const attachmentInfo: AttachmentInfo = {\r\n      attachmentId: fileInfo.metadataId,\r\n      fileName: fileInfo.fileName\r\n    };\r\n    return attachmentInfo;\r\n  }\r\n\r\n  /**\r\n   * è·åéä»¶åè¡¨ä¸­çç¬¬ä¸ä¸ªéä»¶\r\n   */\r\n  public static getFirstAttachmentInfo(attachmentInfos: AttachmentInfo[]) {\r\n    if (!attachmentInfos || attachmentInfos.length === 0) {\r\n      return;\r\n    }\r\n    const firstAttachmentInfo = attachmentInfos[0];\r\n    return firstAttachmentInfo;\r\n  }\r\n\r\n  /**\r\n   * æåéä»¶idæ°ç»\r\n   */\r\n  public static peekAttachmentIds(attachmentInfos: AttachmentInfo[]) {\r\n    if (!attachmentInfos) {\r\n      attachmentInfos = [];\r\n    }\r\n    const attachmentIds = attachmentInfos.map((attachmentInfo: AttachmentInfo) => {\r\n      return attachmentInfo.attachmentId;\r\n    });\r\n\r\n    return attachmentIds;\r\n  }\r\n\r\n}\r\n\r\nexport { AttachmentUtil };\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap, switchMap, map } from 'rxjs/operators';\r\nimport { FrameContext, Entity, BindingData, BindingPathConverter } from '@farris/devkit';\r\nimport { BefRepository, BefDataPathUtil, ResponseInfo } from '@farris/bef';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { AttachmentInfo, ServerAttachmentInfo } from './types';\r\nimport { AttachmentUtil } from './attachment.util';\r\n\r\n/**\r\n * éä»¶è°ç¨\r\n */\r\n@Injectable()\r\nclass AttachmentDataService {\r\n\r\n  /**\r\n   * å®ä½ä»åº\r\n   */\r\n  private get repository(): BefRepository<Entity> {\r\n    return this.frameContext.repository as BefRepository<Entity>;\r\n  }\r\n\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  constructor(private frameContext: FrameContext, private loadingService: FormLoadingService) {\r\n  }\r\n\r\n  /**\r\n   * æ´æ°éä»¶ä¿¡æ¯\r\n   */\r\n  public updateRow(attachmentInfoFieldPath: string, attachmentInfo: AttachmentInfo): Observable<any> {\r\n    const restService = this.repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const updateUri = `${baseUri}/service/updateattachment`;\r\n    const serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);\r\n    const body = {\r\n      updateAttachInfo: serverAttachInfo,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      body: body\r\n    };\r\n    this.loadingService.show();\r\n    return restService.invoke(updateUri, 'PUT', null, options).pipe(\r\n      switchMap((responseInfo: ResponseInfo) => {\r\n        return this.syncAttachmentInfosToClient();\r\n      }),\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * éè¿å±æ§åæ´æ°éä»¶ä¿¡æ¯\r\n   * @param attachmentInfoFieldPath éä»¶å­æ®µ\r\n   * @param attachmentInfo éä»¶ä¿¡æ¯\r\n   */\r\n  public updateRowWithPropertyName(attachmentInfoFieldPath: string, attachmentInfo: AttachmentInfo): Observable<any> {\r\n    const restService = this.repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const updateUri = `${baseUri}/service/updateattachmentwithproptyname`;\r\n    const serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);\r\n    const propertyName = attachmentInfoFieldPath.split('/').filter(p => p).pop();\r\n    const body = {\r\n      updateAttachInfo: serverAttachInfo,\r\n      propertyName,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      body: body\r\n    };\r\n    this.loadingService.show();\r\n    return restService.invoke(updateUri, 'PUT', null, options).pipe(\r\n      switchMap((responseInfo: ResponseInfo) => {\r\n        return this.syncAttachmentInfosToClient();\r\n      }),\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æ¹éåå»ºéä»¶è¡æ°æ®\r\n   */\r\n  public updateRows(attachmentInfoFieldPath: string, attachmentInfos: AttachmentInfo[]): Observable<any> {\r\n    const restService = this.repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const updateUri = `${baseUri}/service/batchuploadattachment`;\r\n    const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);\r\n    const isRootEntity = serverAttachInfo.NodeCodes.length === 0;\r\n\r\n    const body = {\r\n      batchUploadInfo: serverAttachInfo,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      body: body\r\n    };\r\n    return restService.invoke(updateUri, 'PUT', null, options).pipe(\r\n      switchMap((responseInfo: ResponseInfo) => {\r\n        return this.appendAttachmentInfosToClient(responseInfo.returnValue, isRootEntity);\r\n      }),\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æ¹éåå»ºéä»¶è¡æ°æ®\r\n   */\r\n  public updateRowsWithConfigs(attachmentInfoFieldPath: string, attachmentInfos: AttachmentInfo[], configs: { [prop: string]: any }): Observable<any> {\r\n    const restService = this.repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const updateUri = `${baseUri}/service/batchuploadattachment`;\r\n    const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);\r\n    // const isRootEntity = serverAttachInfo.NodeCodes.length === 0;\r\n\r\n    const body = {\r\n      batchUploadInfo: serverAttachInfo,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      body: body\r\n    };\r\n    return restService.invoke(updateUri, 'PUT', null, options).pipe(\r\n      switchMap((responseInfo: ResponseInfo) => {\r\n        return this.appendAttachmentInfos(responseInfo.returnValue, configs);\r\n      }),\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æ ¹æ®å±æ§åæ¹éåå»ºéä»¶è¡æ°æ®\r\n   */\r\n  public updateRowsWithPropertyName(attachmentInfoFieldPath: string, attachmentInfos: AttachmentInfo[]): Observable<any> {\r\n    const restService = this.repository.restService;\r\n    const baseUri = restService.baseUri;\r\n    const updateUri = `${baseUri}/service/batchuploadattachmentwithproptyname`;\r\n    const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);\r\n    const isRootEntity = serverAttachInfo.NodeCodes.length === 0;\r\n    const propertyName = attachmentInfoFieldPath.split('/').filter(p => p).pop();\r\n\r\n    const body = {\r\n      batchUploadInfo: serverAttachInfo,\r\n      propertyName,\r\n      requestInfo: restService.buildRequestInfo()\r\n    };\r\n    const options = {\r\n      body: body\r\n    };\r\n    return restService.invoke(updateUri, 'PUT', null, options).pipe(\r\n      switchMap((responseInfo: ResponseInfo) => {\r\n        return this.appendAttachmentInfosToClient(responseInfo.returnValue, isRootEntity);\r\n      }),\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * åå»ºæå¡å¨ç«¯éè¦çæ´æ°ä¿¡æ¯\r\n   */\r\n  private createUpdateAttachInfo(attachmentInfoFieldPath: string, attachmentInfo: AttachmentInfo): ServerAttachmentInfo {\r\n\r\n    const attachmentId = attachmentInfo.attachmentId;\r\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\r\n    parentBindingPathArray.pop();\r\n    const nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);\r\n    const hiretryIds = BefDataPathUtil.convertToDataIdsForUpdate(parentBindingPathArray, this.bindingData);\r\n\r\n    const serverAttachInfo: ServerAttachmentInfo = {\r\n      NodeCodes: nodeCodes,\r\n      HiretryIds: hiretryIds,\r\n      AttachmentIds: [attachmentId],\r\n      AttachmentId: attachmentId\r\n    };\r\n\r\n    return serverAttachInfo;\r\n  }\r\n\r\n  /**\r\n   * åå»ºæå¡å¨ç«¯éè¦çæ¹éæ°å¢éä»¶ä¿¡æ¯\r\n   */\r\n  private createBatchCreateAttachInfo(attachmentInfoFieldPath: string, attachmentInfo: AttachmentInfo[]): ServerAttachmentInfo {\r\n    const attachmentIds = AttachmentUtil.peekAttachmentIds(attachmentInfo);\r\n\r\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\r\n    parentBindingPathArray.pop();\r\n    const nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);\r\n    const hiretryIds = BefDataPathUtil.convertToDataIdsForAdd(parentBindingPathArray, this.bindingData);\r\n\r\n    const serverAttachInfo = {\r\n      NodeCodes: nodeCodes,\r\n      HiretryIds: hiretryIds,\r\n      AttachmentIds: attachmentIds,\r\n      AttachmentId: null\r\n    };\r\n\r\n    return serverAttachInfo;\r\n  }\r\n\r\n  /**\r\n   * åæ­¥æå¡å¨ç«¯ææ°ä¿¡æ¯å°å®¢æ·ç«¯\r\n   * @todo:\r\n   * 1ãä¸»å¯¹è±¡æ¹éæ°å¢æ¶ä¸æ¯æ\r\n   */\r\n  public syncAttachmentInfosToClient() {\r\n    const rootDataId = this.bindingData.list.currentId;\r\n    return this.repository.updateEntityById(rootDataId);\r\n  }\r\n\r\n  /**\r\n   * è¿½å ä¸»è¡¨æ°æ®å°å®¢æ·ç«¯\r\n   */\r\n  public appendAttachmentInfosToClient(listData: any[], isRootEntity: boolean): Observable<any[]> {\r\n    if (isRootEntity === true) {\r\n      const entities = this.repository.buildEntities(listData);\r\n      this.repository.entityCollection.addEntities(entities);\r\n      return of(listData);\r\n    } else {\r\n      const rootDataId = this.bindingData.list.currentId;\r\n      return this.repository.updateEntityById(rootDataId).pipe(\r\n        map(() => listData)\r\n      );\r\n    }\r\n  }\r\n  public appendAttachmentInfos(listData: any[], keyValues: { [prop: string]: any }): Observable<any[]> {\r\n    const entities = this.repository.buildEntities(listData);\r\n    this.repository.entityCollection.addEntities(entities);\r\n    // æ´æ°å®ä½ä½¿ä¹äº§çåæ´é\r\n    this.updateEntities(entities, keyValues);\r\n    return of(listData);\r\n  }\r\n  private updateEntities(entities: Entity[], keyValues: { [prop: string]: any }) {\r\n    entities.forEach((entity: Entity) => {\r\n      this.updateEntity(entity, keyValues);\r\n    });\r\n  }\r\n  private updateEntity(target: Entity, keyValues: { [prop: string]: any }) {\r\n    Object.keys(keyValues).forEach((key: string) => {\r\n      this.setValueByPath(target, key, keyValues[key]);\r\n    });\r\n  }\r\n  private setValueByPath(target: object, path: string, value: any) {\r\n    if (target) {\r\n      const paths = path.split('.');\r\n      if (paths.length <= 1) {\r\n        target[path] = value;\r\n      } else {\r\n        paths.slice(0, -1).reduce((prev, path) => {\r\n          if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {\r\n            prev[path] = {};\r\n          }\r\n          return prev[path];\r\n        }, target)[paths[paths.length - 1]] = value;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport { AttachmentDataService };\r\n","import { Injectable, InjectFlags, Optional } from '@angular/core';\r\nimport { Observable, from, of, empty, EMPTY } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { UploadDialogService, UploadFileInfo, UploadLimit, DownloadService, FileState } from '@gsp-svc/formdoc-upload';\r\nimport { FileViewerService } from '@gsp-svc/file-viewer';\r\nimport { FrameContext, BindingData, BindingPathConverter, BindingList, DataPathUtil, DataPathCreator, EntityList, Entity } from '@farris/devkit';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { AttachmentUtil } from './attachment.util';\r\nimport { AttachmentDataService } from './attachment-data.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { EntityService } from '../entity-services/index';\r\nimport { BefRepository } from '@farris/bef';\r\n\r\n// tslint:disable: max-line-length\r\n/**\r\n * éä»¶æå¡\r\n */\r\n@Injectable()\r\nclass AttachmentService {\r\n\r\n  /**\r\n   * é»è®¤æ ¹ç®å½\r\n   */\r\n  private defaultRootDirId = '';\r\n\r\n  /**\r\n   * é»è®¤ç¶è·¯å¾\r\n   */\r\n  private get defaultParentDirName(): string {\r\n    return this.frameContext.bindingData.list.currentId;\r\n  }\r\n\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  /**\r\n   * å¤è¯­æå¡\r\n   */\r\n  private languageService: LanguageService;\r\n\r\n  /**\r\n   * éä»¶é¢è§æå¡\r\n   */\r\n  private fileViewerService: FileViewerService;\r\n\r\n  /**\r\n   * å®ä½æå¡\r\n   */\r\n  private entityService: EntityService;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private frameContext: FrameContext,\r\n    private attachDataService: AttachmentDataService,\r\n    private notifyService: FormNotifyService,\r\n    private uploadDialogService: UploadDialogService,\r\n    @Optional() private downloadService: DownloadService\r\n  ) {\r\n    this.setLanguageService();\r\n    this.fileViewerService = this.frameContext.injector.get<FileViewerService>(FileViewerService, null, InjectFlags.Optional);\r\n    this.entityService = this.frameContext.injector.get<EntityService>(EntityService, null, InjectFlags.Optional);\r\n    if (!this.downloadService && typeof DownloadService !== 'undefined') {\r\n      this.downloadService = this.frameContext.injector.get<DownloadService>(DownloadService, null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®è¯­è¨æå¡\r\n   */\r\n  private setLanguageService() {\r\n    const injector = this.frameContext.injector;\r\n    this.languageService = injector.get<LanguageService>(LanguageService, null, InjectFlags.Optional);\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ä¸ä¼ åä¸ªæä»¶\r\n   * @param attachmentIdPath éä»¶åç å­æ®µçè·¯å¾ï¼å½¢å¦/attachInfo/attachmentIdï¼\r\n   * @param attachmentNamePath éä»¶åç§°å­æ®µçè·¯å¾\r\n   */\r\n  public uploadAndUpdateRow(attachmentInfoFieldPath: string, rootDirId?: string, parentDirName?: string, fileType?: string, id?: string): Observable<any> {\r\n    const rootId = rootDirId ? rootDirId : this.defaultRootDirId;\r\n    const formId = parentDirName ? parentDirName : this.defaultParentDirName;\r\n    if (!rootId || !formId) {\r\n      throw new Error('rootDirIdåparentDirNameä¸è½ä¸ºç©ºï¼è¯·å¡«å');\r\n    }\r\n\r\n    const uploadLimit: UploadLimit = new UploadLimit();\r\n    uploadLimit.fileCount = 1;\r\n    if (fileType) {\r\n      uploadLimit.fileType = fileType;\r\n    }\r\n    // è·åèçéä»¶idæ°ç»\r\n    const attachmentIdList = [];\r\n    let currentItem = null;\r\n    if (id) {\r\n      // ä¿®æ­£å½åè¡\r\n      const bindingList: BindingList = this.frameContext.bindingData.getList();\r\n      if (bindingList.currentId !== id) {\r\n        bindingList.setCurrentId(id, true, true);\r\n      }\r\n      // å¦ææå®äºidåè·åæå®idçè¡\r\n      currentItem = this.getSpecialRow(attachmentInfoFieldPath, id);\r\n    } else {\r\n      // æ²¡ææå®åä½¿ç¨å½åè¡ï¼å¯è½å­å¨å½åè¡åäºä»¶è¡ä¸ä¸è´çæåµï¼æ­¤æ¶åºè¯¥å¨å½ä»¤ä¸­ä¼ éidåæ°\r\n      currentItem = this.getCurrentRow(attachmentInfoFieldPath);\r\n    }\r\n    if (currentItem && currentItem.primaryKeyValue) {\r\n      const attachmentIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, [currentItem.primaryKeyValue]);\r\n      if (attachmentIds && attachmentIds.length > 0) {\r\n        attachmentIdList.push.apply(attachmentIdList, attachmentIds);\r\n      }\r\n    }\r\n\r\n    const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit, attachmentIdList));\r\n    const result$ = dialog$.pipe(\r\n      switchMap((fileInfos: UploadFileInfo[]) => {\r\n        if (!fileInfos || fileInfos.length === 0) {\r\n          this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });\r\n          return empty();\r\n        }\r\n        // è¿æ»¤åºstateä¸ºæ°å¢çéä»¶\r\n        fileInfos = fileInfos.filter((fileInfo: UploadFileInfo) => {\r\n          if (fileInfo.hasOwnProperty('state')) {\r\n            return fileInfo.state === FileState.New;\r\n          }\r\n          return true;\r\n        });\r\n        if (fileInfos.length === 0) {\r\n          return of(true);\r\n        }\r\n        // æ¯å¦ä¸ä¼ å¤æ­\r\n        const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);\r\n        const firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);\r\n        return this.attachDataService.updateRow(attachmentInfoFieldPath, firstAttachmentInfo);\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n  /**\r\n   * ä¸ä¼ åä¸ªæä»¶ï¼æ¯æå¤åï¼\r\n   * @param attachmentInfoFieldPath éä»¶åç å­æ®µçè·¯å¾ï¼å½¢å¦/attachInfo/attachmentIdï¼\r\n   * @param rootDirId éä»¶å­å¨æ ¹ç®å½\r\n   * @param parentDirName éä»¶å­å¨ç®å½\r\n   * @param fileType æä»¶ç±»åï¼like .txt,.docx\r\n   */\r\n  public uploadAndUpdateRowWithPropertyName(attachmentInfoFieldPath: string, rootDirId?: string, parentDirName?: string, fileType?: string, id?: string): Observable<any> {\r\n    const rootId = rootDirId ? rootDirId : this.defaultRootDirId;\r\n    const formId = parentDirName ? parentDirName : this.defaultParentDirName;\r\n    if (!rootId || !formId) {\r\n      throw new Error('rootDirIdåparentDirNameä¸è½ä¸ºç©ºï¼è¯·å¡«å');\r\n    }\r\n\r\n    const uploadLimit: UploadLimit = new UploadLimit();\r\n    uploadLimit.fileCount = 1;\r\n    if (fileType) {\r\n      uploadLimit.fileType = fileType;\r\n    }\r\n\r\n    // è·åèçéä»¶idæ°ç»\r\n    const attachmentIdList = [];\r\n    let currentItem = null;\r\n    if (id) {\r\n      // ä¿®æ­£å½åè¡\r\n      const bindingList: BindingList = this.frameContext.bindingData.getList();\r\n      if (bindingList.currentId !== id) {\r\n        bindingList.setCurrentId(id, true, true);\r\n      }\r\n      // å¦ææå®äºidåè·åæå®idçè¡\r\n      currentItem = this.getSpecialRow(attachmentInfoFieldPath, id);\r\n    } else {\r\n      // æ²¡ææå®åä½¿ç¨å½åè¡ï¼å¯è½å­å¨å½åè¡åäºä»¶è¡ä¸ä¸è´çæåµï¼æ­¤æ¶åºè¯¥å¨å½ä»¤ä¸­ä¼ éidåæ°\r\n      currentItem = this.getCurrentRow(attachmentInfoFieldPath);\r\n    }\r\n    if (currentItem && currentItem.primaryKeyValue) {\r\n      const attachmentIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, [currentItem.primaryKeyValue]);\r\n      if (attachmentIds && attachmentIds.length > 0) {\r\n        attachmentIdList.push.apply(attachmentIdList, attachmentIds);\r\n      }\r\n    }\r\n\r\n    const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit, attachmentIdList));\r\n    const result$ = dialog$.pipe(\r\n      switchMap((fileInfos: UploadFileInfo[]) => {\r\n        if (!fileInfos || fileInfos.length === 0) {\r\n          this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });\r\n          return EMPTY;\r\n        }\r\n        // è¿æ»¤åºstateä¸ºæ°å¢çéä»¶\r\n        fileInfos = fileInfos.filter((fileInfo: UploadFileInfo) => {\r\n          if (fileInfo.hasOwnProperty('state')) {\r\n            return fileInfo.state === FileState.New;\r\n          }\r\n          return true;\r\n        });\r\n        if (fileInfos.length === 0) {\r\n          return of(true);\r\n        }\r\n        // æ¯å¦ä¸ä¼ å¤æ­\r\n        const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);\r\n        const firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);\r\n        return this.attachDataService.updateRowWithPropertyName(attachmentInfoFieldPath, firstAttachmentInfo);\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n  /**\r\n   * ä¸ä¼ å¤ä¸ªæä»¶\r\n   */\r\n  public uploadAndBatchAddRows(attachmentInfoFieldPath: string, rootDirId?: string, parentDirName?: string, fileType?: string): Observable<any> {\r\n    const rootId = rootDirId ? rootDirId : this.defaultRootDirId;\r\n    const formId = parentDirName ? parentDirName : this.defaultParentDirName;\r\n    if (!rootId || !formId) {\r\n      throw new Error('rootDirIdåparentDirNameä¸è½ä¸ºç©ºï¼è¯·å¡«å');\r\n    }\r\n\r\n    const uploadLimit: UploadLimit = new UploadLimit();\r\n    if (fileType) {\r\n      uploadLimit.fileType = fileType;\r\n    }\r\n    const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit));\r\n    const result$ = dialog$.pipe(\r\n      switchMap((fileInfos: UploadFileInfo[]) => {\r\n        if (!fileInfos || fileInfos.length === 0) {\r\n          this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });\r\n          return EMPTY;\r\n        }\r\n        // è¿æ»¤åºstateä¸ºæ°å¢çéä»¶\r\n        fileInfos = fileInfos.filter((fileInfo: UploadFileInfo) => {\r\n          if (fileInfo.hasOwnProperty('state')) {\r\n            return fileInfo.state === FileState.New;\r\n          }\r\n          return true;\r\n        });\r\n        if (fileInfos.length === 0) {\r\n          return of(true);\r\n        }\r\n        const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);\r\n        return this.attachDataService.updateRows(attachmentInfoFieldPath, attachmentInfos);\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * ä¸ä¼ å¤ä¸ªæä»¶\r\n   */\r\n  public uploadAndBatchAddRowsWithPropertyName(attachmentInfoFieldPath: string, rootDirId?: string, parentDirName?: string, fileType?: string, id?: string): Observable<any> {\r\n    const rootId = rootDirId ? rootDirId : this.defaultRootDirId;\r\n    const formId = parentDirName ? parentDirName : this.defaultParentDirName;\r\n    if (!rootId || !formId) {\r\n      throw new Error('rootDirIdåparentDirNameä¸è½ä¸ºç©ºï¼è¯·å¡«å');\r\n    }\r\n    const uploadLimit: UploadLimit = new UploadLimit();\r\n    if (fileType) {\r\n      uploadLimit.fileType = fileType;\r\n    }\r\n    if (id) {\r\n      // ä¿®æ­£å½åè¡\r\n      const bindingList: BindingList = this.frameContext.bindingData.getList();\r\n      if (bindingList.currentId !== id) {\r\n        bindingList.setCurrentId(id, true, true);\r\n      }\r\n    }\r\n    const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit));\r\n    const result$ = dialog$.pipe(\r\n      switchMap((fileInfos: UploadFileInfo[]) => {\r\n        if (!fileInfos || fileInfos.length === 0) {\r\n          this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });\r\n          return EMPTY;\r\n        }\r\n        // è¿æ»¤åºstateä¸ºæ°å¢çéä»¶\r\n        fileInfos = fileInfos.filter((fileInfo: UploadFileInfo) => {\r\n          if (fileInfo.hasOwnProperty('state')) {\r\n            return fileInfo.state === FileState.New;\r\n          }\r\n          return true;\r\n        });\r\n        if (fileInfos.length === 0) {\r\n          return of(true);\r\n        }\r\n        const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);\r\n        return this.attachDataService.updateRowsWithPropertyName(attachmentInfoFieldPath, attachmentInfos);\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n  /**\r\n   * ä¸è½½éä»¶ï¼æ ¹æ®éä»¶idï¼\r\n   */\r\n  public download(attachId: string, rootId?: string): any {\r\n    if (!attachId) {\r\n      this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    rootId = rootId || 'default-root';\r\n    const url = this.getDownloadUrl([attachId], rootId);\r\n    // let url = '';\r\n    // if (rootId) {\r\n    //   url = `/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${attachId}&rootid=${rootId}`;\r\n    // } else {\r\n    //   url = `/api/runtime/dfs/v1.0/formdoc/download/${attachId}`;\r\n    // }\r\n    window.open(url);\r\n    return of(true);\r\n  }\r\n  /**\r\n   * æ¹éä¸è½½éä»¶ï¼æ ¹æ®éä»¶idæ°ç»ï¼\r\n   */\r\n  public batchDownload(attachIds: string[], rootId: string): any {\r\n    if (!attachIds || attachIds.length === 0) {\r\n      this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    // åªéæ©ä¸ä¸ªéä»¶æ¶æåä¸ªéä»¶ä¸è½½å¤ç\r\n    if (attachIds.length === 1) {\r\n      return this.download(attachIds[0], rootId);\r\n    }\r\n    // const attachIdsString = JSON.stringify(attachIds);\r\n    // const url = `/api/runtime/dfs/v1.0/formdoc/multiple/download?metadataidlist=${attachIdsString}&rootid=${rootId}`;\r\n    const url = this.getDownloadUrl(attachIds, rootId);\r\n    window.open(url);\r\n    return of(true);\r\n  }\r\n  /**\r\n   * è·åä¸è½½è·¯å¾\r\n   * @param metadataidlist éä»¶idæ°ç»\r\n   * @param rootId rootId\r\n   */\r\n  private getDownloadUrl(metadataidlist: Array<string>, rootId: string): string {\r\n    rootId = rootId || 'default-root';\r\n    if (this.downloadService) {\r\n      if (metadataidlist.length === 1) {\r\n        return this.downloadService.getDownloadUrl(metadataidlist[0], rootId);\r\n      } else {\r\n        const attachIdsString = JSON.stringify(metadataidlist);\r\n        return this.downloadService.getMultipleDownloadUrl(attachIdsString, rootId);\r\n      }\r\n    } else {\r\n      console.warn('å å®å¨é®é¢ï¼éä»¶ä¸è½½æä¾å®å¨æ ¡éªæºå¶ï¼éä»¶ä¸è½½åè½ééæ°ç¼è¯ã');\r\n      if (metadataidlist.length === 1) {\r\n        return `/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${metadataidlist[0]}&rootid=${rootId}`;\r\n      } else {\r\n        const attachIdsString = JSON.stringify(metadataidlist);\r\n        return `/api/runtime/dfs/v1.0/formdoc/multiple/download?metadataidlist=${attachIdsString}&rootid=${rootId}`;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * ä¸è½½ï¼æ ¹æ®æ°æ®idï¼\r\n   */\r\n  public downloadByDataId(dataId: string, attachmentInfoFieldPath: string, rootId: string): Observable<any> {\r\n    if (!dataId) {\r\n      this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n\r\n    const dataIds = [dataId];\r\n    const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);\r\n    if (attachIds.length === 0) {\r\n      this.notifyService.warning(this.languageService.noDownloadAtt, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n\r\n    const attachId = attachIds[0];\r\n    return this.download(attachId);\r\n  }\r\n\r\n  /**\r\n   * æ¹éä¸è½½éä»¶\r\n   */\r\n  public batchDownloadByDataIds(dataIds: string[] | string, attachmentInfoFieldPath: string, rootId: string): Observable<any> {\r\n    if (typeof dataIds === 'string' && dataIds && dataIds.length > 0) {\r\n      dataIds = dataIds.split(',').filter(p => p);\r\n    }\r\n    if (!dataIds || Array.isArray(dataIds) === false || dataIds.length === 0) {\r\n      this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    const ids = [].concat(dataIds);\r\n    const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, ids);\r\n    if (attachIds.length === 0) {\r\n      this.notifyService.warning(this.languageService.noDownloadAtt, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n\r\n    return this.batchDownload(attachIds, rootId);\r\n  }\r\n\r\n  /**\r\n   * æ ¹æ®éä»¶UDTå­æ®µçè·¯å¾é¢è§éä»¶\r\n   * @param attachmentInfoFieldPath éä»¶UDTå­æ®µpath\r\n   * @param rootDirId è·ç®å½id\r\n   * @param ids éä»¶id\r\n   */\r\n  public previewByAttachmentInfoFieldPath(attachmentInfoFieldPath: string, rootDirId: string, ids?: any) {\r\n    if (!attachmentInfoFieldPath || !rootDirId) {\r\n      throw new Error('attachmentInfoFieldPathårootDirIdä¸è½ä¸ºç©ºï¼è¯·å¡«å');\r\n    }\r\n    let attachIds = [];\r\n    let dataIds = [];\r\n    if (ids && ids.length > 0) {\r\n      if (typeof (ids) === 'string') {\r\n        dataIds.push(ids);\r\n      } else {\r\n        dataIds = ids;\r\n      }\r\n      attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);\r\n    } else {\r\n      attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);\r\n    }\r\n    if (attachIds && attachIds.length === 0) {\r\n      this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    return this.previewByAttachmentIds(attachIds, rootDirId);\r\n  }\r\n  /**\r\n   * æ ¹æ®éä»¶UDTå­æ®µçè·¯å¾é¢è§å½åè¡çéä»¶\r\n   * @param attachmentInfoFieldPath éä»¶UDTå­æ®µpath\r\n   * @param rootDirId æ ¹ç®å½id\r\n   */\r\n  public previewByAttachmentInfoFieldPathWithIndex(attachmentInfoFieldPath: string, rootDirId: string): Observable<any> {\r\n    if (!attachmentInfoFieldPath || !rootDirId) {\r\n      throw new Error('attachmentInfoFieldPathårootDirIdä¸è½ä¸ºç©ºï¼è¯·å¡«å');\r\n    }\r\n    const currentRow = this.getCurrentRow(attachmentInfoFieldPath);\r\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\r\n    const attachmentFieldName = parentBindingPathArray.pop();\r\n    if (!currentRow[attachmentFieldName] || !currentRow[attachmentFieldName]['attachmentId']) {\r\n      this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);\r\n    if (attachIds && attachIds.length === 0) {\r\n      this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    const attachmentId = this.getCurrentAttachmentId(attachmentInfoFieldPath);\r\n    if (!attachmentId) {\r\n      throw new Error('è¦é¢è§çéä»¶idä¸å­å¨ï¼è¯·ç¡®è®¤');\r\n    } else {\r\n      return this.previewFileListWithIndex(attachIds, rootDirId, attachmentId);\r\n    }\r\n  }\r\n  /**\r\n   * æ ¹æ®ç®å½é¢è§éä»¶\r\n   * @param subDirName ç¶ç®å½åç§°\r\n   * @param rootDirId æ ¹ç®å½id\r\n   */\r\n  public previewBySubDirName(subDirName: string, rootDirId: string): Observable<any> {\r\n    if (!subDirName || !rootDirId) {\r\n      throw new Error('subDirNameårootDirIdä¸è½ä¸ºç©ºï¼è¯·å¡«å');\r\n    }\r\n    const viewer$ = from(this.fileViewerService.viewerFormFile(subDirName, rootDirId));\r\n    return viewer$;\r\n  }\r\n  /**\r\n   * æ ¹æ®ç®å½é¢è§æå®ç´¢å¼çéä»¶\r\n   * @param attachmentInfoFieldPath éä»¶UDTå­æ®µpath\r\n   * @param subDirName å­ç®å½åç§°\r\n   * @param rootDirId æ ¹ç®å½id\r\n   */\r\n  public previewBySubDirNameWithIndex(attachmentInfoFieldPath: string, subDirName: string, rootDirId: string): Observable<any> {\r\n    if (!subDirName || !rootDirId) {\r\n      throw new Error('subDirNameårootDirIdä¸è½ä¸ºç©ºï¼è¯·å¡«å');\r\n    }\r\n    // const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);\r\n    const attachmentId = this.getCurrentAttachmentId(attachmentInfoFieldPath);\r\n    if (!attachmentId) {\r\n      this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    const viewer$ = from(this.fileViewerService.viewerFormFileWithIndex(subDirName, rootDirId, attachmentId));\r\n    return viewer$;\r\n  }\r\n  /**\r\n   * æ ¹æ®éä»¶idæ°ç»é¢è§éä»¶\r\n   * @param attachmentIds éä»¶idæ°ç»\r\n   * @param rootDirId æ ¹ç®å½id\r\n   */\r\n  public previewByAttachmentIds(attachmentIds: string[], rootDirId: string): Observable<any> {\r\n    const viewer$ = from(this.fileViewerService.viewerFileList(attachmentIds, rootDirId));\r\n    return viewer$;\r\n  }\r\n  /**\r\n   * æ ¹æ®éä»¶idæ°ç»é¢è§æå®ç´¢å¼çéä»¶\r\n   * @param attachmentIds éä»¶idæ°ç»\r\n   * @param rootDirId æ ¹ç®å½id\r\n   * @param attachmentId éä»¶Id\r\n   */\r\n  public previewFileListWithIndex(attachmentIds: string[], rootDirId: string, attachmentId: string) {\r\n    const viewer$ = from(this.fileViewerService.viewerFileListWithIndex(attachmentIds, rootDirId, attachmentId));\r\n    return viewer$;\r\n  }\r\n  /**\r\n   * çæçæ¬å·\r\n   * @param versions åå²çæ¬å·\r\n   * @description é»è®¤ç¼ç è§åv1.0 v2.0 ...\r\n   */\r\n  public genVersion(versions: string[]) {\r\n    if (!versions) {\r\n      versions = [];\r\n    }\r\n    const mainCode = versions.length + 1;\r\n    return `V${mainCode}.0`;\r\n  }\r\n  /**\r\n   * æ´æ°éä»¶çæ¬ä¿¡æ¯\r\n   * @param versionField éä»¶çæ¬å­æ®µ\r\n   * @param historyField æ¯å¦åå²çæ¬å­æ®µ\r\n   * @param attachmentFieldPath éä»¶udtå­æ®µè·¯å¾\r\n   */\r\n  public updateAttachmentVersion(versionField: string, historyField: string, attachmentFieldPath: string) {\r\n    /**\r\n     * éåææéä»¶è¡\r\n     * æ¾å°æææ²¡æéä»¶çæ¬çè¡\r\n     * éåè¿äºè¡\r\n     * éè¿æä»¶åå»æ¥æ¾ååçä¸æéä»¶çæ¬å·çè¡ \r\n     * è¿äºè¡åå²çæ¬å­æ®µç½®ä¸ºtrue\r\n     * æ çæ¬å·çè¡ï¼çæ¬= ä¸è¡æ° + 1\r\n     * \r\n     */\r\n    const bindingPaths = attachmentFieldPath.split('/').filter(p => p);\r\n    // å¼¹åºéä»¶udtå­æ®µ\r\n    const attachmentField = bindingPaths.pop();\r\n    // è·åå°ææçéä»¶\r\n    const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths) as BindingList;\r\n    const befRepository = this.frameContext.repository as BefRepository<any>;\r\n    const entityManager = befRepository.entityManager;\r\n    const dataPath = DataPathCreator.createByShortPathFromRoot(bindingPaths, entityManager, this.frameContext.bindingData);\r\n    const paths = dataPath.toArray().map((path: string) => {\r\n      if (path.startsWith('PropName:')) {\r\n        return path.split(':')[1];\r\n      } else {\r\n        return path;\r\n      }\r\n    });\r\n    if (attachmentBindingList) {\r\n      const attachments = attachmentBindingList.toJSON();\r\n      // åªå¤çæéä»¶çæåµ\r\n      if (attachments) {\r\n        const versionLessRows = attachments.filter(item => !item[versionField]);\r\n        versionLessRows.forEach(item => {\r\n          const fileName = item[attachmentField]['fileName'];\r\n          const versionedRows = attachments.filter(row => row[attachmentField]['fileName'] === fileName && row[versionField]);\r\n          paths.pop();\r\n          paths.push(`DataId:${item[attachmentBindingList.primaryKey]}`);\r\n          let entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);\r\n          const version = this.genVersion(versionedRows);\r\n          entity[versionField] = version;\r\n          entity[historyField] = false;\r\n          // å¤çåå²è®°å½\r\n          versionedRows.forEach(row => {\r\n            paths.pop();\r\n            paths.push(`DataId:${row[attachmentBindingList.primaryKey]}`);\r\n            entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);\r\n            entity[historyField] = true;\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n  public isAttachmentCanDelete(historyField: string, attachmentFieldPath: string) {\r\n    const bindingPaths = attachmentFieldPath.split('/').filter(p => p);\r\n    // å¼¹åºéä»¶udtå­æ®µ\r\n    bindingPaths.pop();\r\n    const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths) as BindingList;\r\n    const bindingObject = attachmentBindingList.currentItem;\r\n    if (bindingObject[historyField] === true) {\r\n      this.notifyService.warning(this.languageService.historyAttachment, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n  }\r\n  public updateAttachmentHistory(versionField: string, historyField: string, attachmentFieldPath: string) {\r\n    const bindingPaths = attachmentFieldPath.split('/').filter(p => p);\r\n    // å¼¹åºéä»¶udtå­æ®µ\r\n    const attachmentField = bindingPaths.pop();\r\n    // è·åå°ææçéä»¶\r\n    const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths) as BindingList;\r\n    // const befRepository = this.frameContext.repository as BefRepository<any>;\r\n    // const entityManager = befRepository.entityManager;\r\n    if (attachmentBindingList) {\r\n      const attachments = attachmentBindingList.toJSON();\r\n      const versionedRows = attachments.filter(item => item[versionField]);\r\n      const fileNameMap = new Map<string, Array<any>>();\r\n      const befRepository = this.frameContext.repository as BefRepository<any>;\r\n      const entityManager = befRepository.entityManager;\r\n      const dataPath = DataPathCreator.createByShortPathFromRoot(bindingPaths, entityManager, this.frameContext.bindingData);\r\n      const paths = dataPath.toArray().map((path: string) => {\r\n        if (path.startsWith('PropName:')) {\r\n          return path.split(':')[1];\r\n        } else {\r\n          return path;\r\n        }\r\n      });\r\n      versionedRows.forEach(item => {\r\n        const fileName = item[attachmentField]['fileName'];\r\n        if (fileNameMap.has(fileName)) {\r\n          fileNameMap.get(fileName).push(item);\r\n        } else {\r\n          fileNameMap.set(fileName, [item]);\r\n        }\r\n      });\r\n      Array.from(fileNameMap.values()).forEach((array: Array<any>) => {\r\n        array.sort((x, y) => {\r\n          const xVersion = parseInt(x[versionField].replace(/[a-zA-Z\\.]/g, ''));\r\n          const yVersion = parseInt(y[versionField].replace(/[a-zA-Z\\.]/g, ''));\r\n          return yVersion - xVersion;\r\n        });\r\n        const row = array[0];\r\n        paths.pop();\r\n        paths.push(`DataId:${row[attachmentBindingList.primaryKey]}`);\r\n        const entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);\r\n        entity[historyField] = false;\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * è·åå½åè§å¾æ¨¡åå½åè¡çéä»¶id\r\n   * @param attachmentInfoFieldPath éä»¶udtå­æ®µ\r\n   */\r\n  private getCurrentAttachmentId(attachmentInfoFieldPath: string) {\r\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\r\n    const attachmentFieldName = parentBindingPathArray.pop();\r\n    const bindingList: BindingList = this.frameContext.bindingData.getValue(parentBindingPathArray) as BindingList;\r\n    const currentItem = bindingList.currentItem;\r\n    if (currentItem && currentItem.primaryKeyValue) {\r\n      return currentItem[attachmentFieldName] && currentItem[attachmentFieldName]['attachmentId'] || null;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * è·åå½åè¡\r\n   * @param attachmentInfoFieldPath udtå­æ®µ\r\n   */\r\n  private getCurrentRow(attachmentInfoFieldPath: string) {\r\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\r\n    parentBindingPathArray.pop();\r\n    const bindingList: BindingList = this.frameContext.bindingData.getValue(parentBindingPathArray) as BindingList;\r\n    const currentItem = bindingList && bindingList.currentItem;\r\n    return currentItem;\r\n  }\r\n  /**\r\n   * è·åæå®éä»¶ä¿¡æ¯è¡¨çæå®è¡\r\n   * @param attachmentInfoFieldPath \r\n   * @param primaryValue \r\n   * @returns \r\n   */\r\n  private getSpecialRow(attachmentInfoFieldPath: string, primaryValue: string) {\r\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\r\n    parentBindingPathArray.pop();\r\n    const bindingList: BindingList = this.frameContext.bindingData.getValue(parentBindingPathArray) as BindingList;\r\n    const currentItem = bindingList && bindingList.findById(primaryValue);\r\n    return currentItem;\r\n  }\r\n  /**\r\n   * è·ådataIdså¯¹åºEntityä¸çéä»¶idæ°ç»\r\n   */\r\n  private getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath: string, dataIds?: string[]): string[] {\r\n\r\n    // è§£æè·¯å¾\r\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\r\n    const attachmentFieldName = parentBindingPathArray.pop();\r\n\r\n    // è·åéä»¶æå¨å®ä½çæ°æ®åè¡¨ï¼ä¸ä¼ édataIdsåæ°ï¼åè¿åå¨é¨\r\n    const entityListData = this.entityService.getEntityListData(parentBindingPathArray);\r\n    let filteredEntityListData = [];\r\n    if (dataIds && Array.isArray(dataIds) === true) {\r\n      filteredEntityListData = entityListData.filter((entityData: any) => {\r\n        return dataIds.indexOf(entityData.id) > -1;\r\n      });\r\n    } else {\r\n      filteredEntityListData = entityListData;\r\n    }\r\n\r\n    // è½¬æ¢ä¸ºéä»¶Idæ°ç»\r\n    const attachmentIds = [];\r\n    filteredEntityListData.forEach((entityData: any) => {\r\n      if (entityData[attachmentFieldName]) {\r\n        const attachmentId = entityData[attachmentFieldName]['attachmentId'];\r\n        if (attachmentId) {\r\n          attachmentIds.push(attachmentId);\r\n        }\r\n      }\r\n    });\r\n\r\n    return attachmentIds;\r\n  }\r\n}\r\n\r\nexport { AttachmentService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable, forkJoin, Subject } from 'rxjs';\r\nimport { FUploadFileExtend } from '@farris/extend-file-upload';\r\nimport { FrameContext, CommandContext, BindingPathConverter, BindingList, BindingObject } from '@farris/devkit';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { AttachmentInfo, ATTACHMENT_ORDER_FIELD } from './types';\r\nimport { AttachmentDataService } from './attachment-data.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { EntityService } from '../entity-services/index';\r\nimport { ListDataService, SubListDataService } from '../data-services/index';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\n\r\n/**\r\n * éä»¶ä¸ä¼ \r\n * @summary\r\n * fileExtendï¼å½åæä»¶ä¸ä¼ æé¢è§ç»ä»¶ä¼ éè¿æ¥çæ°æ®ï¼\r\n * fileExtendFieldPathï¼å½åéä»¶UDTçå­æ®µè·¯å¾ï¼\r\n * attachmentInfoï¼å½åéä»¶UDTæéçä¿¡æ¯ï¼\r\n */\r\n@Injectable()\r\nclass FileService {\r\n  private subject: Subject<{ fileInfoFieldPath: string, configs: string }>;\r\n  private attachmentInfos: AttachmentInfo[];\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private frameContext: FrameContext,\r\n    private attachDataService: AttachmentDataService,\r\n    private entityService: EntityService,\r\n    private subListDataService: SubListDataService,\r\n    private notifyService: FormNotifyService,\r\n    private languageService: LanguageService,\r\n    private listDataService: ListDataService,\r\n    @Optional() private formLoadingService: FormLoadingService\r\n  ) {\r\n    this.subject = new Subject<{ fileInfoFieldPath: string, configs: string }>();\r\n    this.subject.pipe(debounceTime(500)).subscribe((data: { fileInfoFieldPath: string, configs: string }) => {\r\n      this.process(data.fileInfoFieldPath, data.configs);\r\n    });\r\n    this.attachmentInfos = [];\r\n  }\r\n\r\n  // #region ä¸ä¼ æä»¶\r\n\r\n  /**\r\n   * æ¹éæ·»å éä»¶è¡\r\n   */\r\n  public addFileRows(fileInfoFieldPath: string) {\r\n    const attachmentInfos = this.getAttachmentInfosToAddFromContext();\r\n    if (attachmentInfos.length === 0) {\r\n      this.notifyService.info('è¯·åä¸ä¼ éä»¶');\r\n    }\r\n    return this.attachDataService.updateRows(fileInfoFieldPath, attachmentInfos);\r\n  }\r\n  /**\r\n   * æ¹éæ·»å å¸¦éä»¶ç±»åçéä»¶è¡\r\n   * @param fileInfoFieldPath éä»¶udtå­æ®µ\r\n   * @param configs éä»¶æ©å±ä¿¡æ¯éç½® \r\n   * @description configséç½®å¦{\"billId\":\"{UISTATE~/root/billId}\",\"rowId\":\"{UISTATE~/root/rowId}\",\"attachmentType\":\"xueli\"}\r\n   */\r\n  public addFileRowsWithConfigs(fileInfoFieldPath: string, configs: string) {\r\n    const attachmentInfos = this.getAttachmentInfosToAddFromContext();\r\n    if (attachmentInfos.length === 0) {\r\n      this.notifyService.info('è¯·åä¸ä¼ éä»¶');\r\n    }\r\n    // let mapFields = null;\r\n    // if (typeof configs === 'string') {\r\n    //   // å»æé¦å°¾ç©ºæ ¼\r\n    //   configs = configs.trim();\r\n    // }\r\n    // if (configs.startsWith('{') && configs.endsWith('}')) {\r\n    //   try {\r\n    //     mapFields = JSON.parse(configs);\r\n    //   } catch {\r\n    //     throw new Error('éä»¶æ©å±ä¿¡æ¯éç½®ä¸æ¯åæ³çjsonå­ç¬¦ä¸²ã');\r\n    //   }\r\n    // } else {\r\n    //   throw new Error('éä»¶æ©å±ä¿¡æ¯éç½®ä¸æ¯åæ³çjsonå­ç¬¦ä¸²ã');\r\n    // }\r\n    this.attachmentInfos = this.attachmentInfos.concat(attachmentInfos);\r\n    this.subject.next({ fileInfoFieldPath, configs });\r\n    //return this.attachDataService.updateRowsWithConfigs(fileInfoFieldPath, attachmentInfos, mapFields);\r\n  }\r\n  private process(fileInfoFieldPath: string, configs: string) {\r\n    if (this.attachmentInfos && this.attachmentInfos.length > 0) {\r\n      const attachmentInfos = this.attachmentInfos.concat([]);\r\n      let mapFields = null;\r\n      if (typeof configs === 'string') {\r\n        // å»æé¦å°¾ç©ºæ ¼\r\n        configs = configs.trim();\r\n      }\r\n      if (configs.startsWith('{') && configs.endsWith('}')) {\r\n        try {\r\n          mapFields = JSON.parse(configs);\r\n        } catch {\r\n          throw new Error('éä»¶æ©å±ä¿¡æ¯éç½®ä¸æ¯åæ³çjsonå­ç¬¦ä¸²ã');\r\n        }\r\n      } else {\r\n        throw new Error('éä»¶æ©å±ä¿¡æ¯éç½®ä¸æ¯åæ³çjsonå­ç¬¦ä¸²ã');\r\n      }\r\n      this.attachDataService.updateRowsWithConfigs(fileInfoFieldPath, attachmentInfos, mapFields).pipe(\r\n        tap(() => {\r\n          this.attachmentInfos = this.attachmentInfos.filter(item => !attachmentInfos.find(attachmentInfo => attachmentInfo.attachmentId === item.attachmentId));\r\n          if (this.attachmentInfos.length > 0) {\r\n            this.process(fileInfoFieldPath, configs);\r\n          }\r\n        })\r\n      ).subscribe();\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * è·åè¦æ·»å çéä»¶ä¿¡æ¯æ°ç»\r\n   */\r\n  private getAttachmentInfosToAddFromContext(): AttachmentInfo[] {\r\n    const fileExtends = this.getFileExtendsFromContext();\r\n    const attachmentInfos = this.convertToAttachmentInfos(fileExtends);\r\n    return attachmentInfos;\r\n  }\r\n\r\n  /**\r\n   * å°éä»¶ä¸ä¼ ç»ä»¶è¿åçéä»¶ä¿¡æ¯è½¬æ¢ä¸ºæå¡å¨ç«¯éè¦çæ ¼å¼\r\n   */\r\n  private convertToAttachmentInfos(fileExtends: FUploadFileExtend[]): AttachmentInfo[] {\r\n    if (!fileExtends) {\r\n      return [];\r\n    }\r\n\r\n    const attachmentInfos: AttachmentInfo[] = [];\r\n    fileExtends.forEach((fUploadOutPut: FUploadFileExtend) => {\r\n      const attachmentInfo: AttachmentInfo = {\r\n        attachmentId: fUploadOutPut.extend.metadataId,\r\n        fileName: fUploadOutPut.extend.fileName,\r\n      };\r\n      attachmentInfos.push(attachmentInfo);\r\n    });\r\n    return attachmentInfos;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region å é¤æä»¶\r\n\r\n  /**\r\n   * å é¤éä»¶è¡\r\n   */\r\n  public removeFileRows(fileInfoFieldPath: string): Observable<any> {\r\n    const dataIds = this.getDataIdsToRemoveFromContext(fileInfoFieldPath);\r\n    if (dataIds.length === 0) {\r\n      this.notifyService.info('è¯·éæ©è¦å é¤çéä»¶');\r\n    }\r\n    const isSublist = fileInfoFieldPath.split('/').filter(p => p).length >= 2;\r\n    const removeObservables: Observable<any>[] = [];\r\n    if (isSublist) {\r\n      dataIds.forEach((dataId: string) => {\r\n        let removeObservable;\r\n        removeObservable = this.subListDataService.removeWithoutConfirm(dataId);\r\n        removeObservables.push(removeObservable);\r\n      });\r\n      return forkJoin(removeObservables);\r\n    } else {\r\n      return this.listDataService.removeRows(dataIds, false, null, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è·åè¦å é¤çæ°æ®\r\n   */\r\n  private getDataIdsToRemoveFromContext(fileExtendFieldPath: string): string[] {\r\n\r\n    // ä»ä¸ä¸æä¸­è·åè¦å¤ççéä»¶ä¿¡æ¯æ°ç»\r\n    const fileExtends = this.getFileExtendsFromContext();\r\n\r\n    // å°éä»¶æ°ç»è½¬æ¢ä¸ºå¯¹åºçæ°æ®id\r\n    const dataIds: string[] = [];\r\n    fileExtends.forEach((fileExtend: FUploadFileExtend) => {\r\n\r\n      // ä¸ä¼ å é¤åé¢è§å é¤ä¼ éè¿æ¥çfileIdçkeyå¯è½ä¸ä¸è´ï¼è¦åå¼å®¹\r\n      const fileId = fileExtend.extend.metadataId;\r\n      const dataId = this.convertFileIdToDataId(fileId, fileExtendFieldPath);\r\n      dataIds.push(dataId);\r\n    });\r\n    return dataIds;\r\n  }\r\n\r\n  /**\r\n   * æ ¹æ®è·¯å¾è·åéä»¶å­æ®µå¼æ°ç»\r\n   * @param fieldPath å­æ®µè·¯å¾\r\n   */\r\n  private convertFileIdToDataId(fileId: string, fileExtendFieldPath: string): string {\r\n\r\n    // è§£æè·¯å¾\r\n    const fileBindingPath = BindingPathConverter.toBindingPathArray(fileExtendFieldPath);\r\n    const fileFieldName = fileBindingPath.pop();\r\n    const fileListBindingPath = fileBindingPath;\r\n\r\n    // è·åéä»¶idæ°ç»\r\n    const entityListData = this.entityService.getEntityListData(fileListBindingPath);\r\n    const targetEntityData = entityListData.find((entityData: any) => {\r\n      if (entityData[fileFieldName]) {\r\n        const attachmentId = entityData[fileFieldName]['attachmentId'];\r\n        if (attachmentId === fileId) {\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return targetEntityData.id;\r\n  }\r\n\r\n  // #endregion\r\n  //#region æä»¶æåº\r\n  /**\r\n   * æ´æ°éä»¶æåº\r\n   * @param attachmentInfoFieldPath éä»¶udtå­æ®µè·¯å¾\r\n   * @param ids éä»¶æåºåçéä»¶idæ°ç»\r\n   */\r\n  public updateOrder(attachmentInfoFieldPath: string, ids: string[]) {\r\n    if (!attachmentInfoFieldPath) {\r\n      throw new Error('éä»¶udtå­æ®µè·¯å¾åæ°ä¸è½ä¸ºç©º');\r\n    }\r\n    // æ¯æä»ä»£ç ä¸­ç´æ¥è°ç¨ï¼å¦æåæ°ä¸­ä¼ éäºidsåä½¿ç¨ï¼å¦åä½¿ç¨å½ä»¤ä¸ä¸æä¸­çäºä»¶åæ°\r\n    if (!ids) {\r\n      // è·åäºä»¶åæ°\r\n      const commandContext = this['context'] as CommandContext;\r\n      // ä¸ç»ä»¶çº¦å®äºä»¶åæ°ä¸ºæ°æ®ä¸»é®æ°ç»\r\n      ids = commandContext && commandContext.eventParam && commandContext.eventParam.data;\r\n    }\r\n    // å¯¹æ¶éçä¸»é®æ°ç»è¿è¡å¤æ­\r\n    if (!ids || !Array.isArray(ids)) {\r\n      return;\r\n    }\r\n    // å½åå½ä»¤æå¨ç»ä»¶çç»å®æ°æ®\r\n    const bindingList: BindingList = this.frameContext.bindingData.getList();\r\n    // æ ç»å®æ°æ®æ¶ä¸å¤ç\r\n    if (!bindingList || bindingList.length < 1) {\r\n      return;\r\n    }\r\n    // ç»ä¸è·åéä»¶udtä¿¡æ¯\r\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\r\n    const attachmentField = parentBindingPathArray.pop();\r\n    // åºç°udtå­æ®µä¸å­å¨çæåµï¼è¯´æå½ä»¤ä¸­éä»¶udtå­æ®µéç½®éè¯¯ævoä¸­æ²¡æéä»¶udtãæ§å¶å¨ä¸å¼å®¹éè¯¯ï¼æ­¤å¤å¤æ­åªä¸ºé»æ­¢åç»­çéå\r\n    if (!attachmentField) {\r\n      throw new Error('æ æ³è·åéä»¶udtå­æ®µï¼è¯·ç¡®è®¤å½ä»¤ä¸­éä»¶udtå­æ®µè·¯å¾éç½®æ­£ç¡®ï¼ä¸è§å¾æ¨¡åä¸­å­å¨éä»¶udtå­æ®µ');\r\n    }\r\n    const data = bindingList.toJSON();\r\n    // æ´æ°ç»å®æ°æ®ä¸­éä»¶udtå­æ®µä¸­æåºå­æ®µçå¼,ä»æ´æ°æéä»¶çè¡\r\n    ids.forEach((id: string, index: number) => {\r\n      const item = data.find(item => item && item[attachmentField] && item[attachmentField]['attachmentId'] === id);\r\n      const primaryKeyValue = item && item.id;\r\n      if (!primaryKeyValue) {\r\n        return;\r\n      }\r\n      const bindingObject = bindingList.findById(primaryKeyValue);\r\n      if (bindingObject) {\r\n        // éä»¶udtå¯¹è±¡\r\n        const attachment = bindingObject[attachmentField] as BindingObject;\r\n        if (attachment) {\r\n          // è·åæ§å¼\r\n          const order = attachment.getValue(ATTACHMENT_ORDER_FIELD);\r\n          if (order !== index) {\r\n            // æ´æ°æåº\r\n            attachment.setValue(ATTACHMENT_ORDER_FIELD, index, true, true);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n  //#endregion\r\n\r\n  // #region å¶ä»å·¥å·æ¹æ³\r\n\r\n  /**\r\n   * ä»ä¸ä¸æä¸­è·åè¦å¤ççéä»¶ä¿¡æ¯æ°ç»\r\n   * @summary\r\n   * ä¸ºäºç»ä¸åä¸ªåå¤ä¸ªéä»¶çå¤çæ¹å¼ï¼ç»ä¸åè£ä¸ºæ°ç»\r\n   */\r\n  private getFileExtendsFromContext(): FUploadFileExtend[] {\r\n\r\n    const commandContext = this['context'] as CommandContext;\r\n    const eventParam = commandContext.eventParam;\r\n    if (!eventParam) {\r\n      return [];\r\n    }\r\n\r\n    let fileExtends: any[];\r\n    if (Array.isArray(eventParam) === false) {\r\n      fileExtends = [eventParam];\r\n    } else {\r\n      fileExtends = eventParam.concat([]);\r\n    }\r\n\r\n    return fileExtends as FUploadFileExtend[];\r\n  }\r\n  // #endregion\r\n}\r\n\r\nexport { FileService };\r\n","import { Injectable, ComponentFactoryResolver, ReflectiveInjector, Provider, ComponentRef, InjectFlags, NgModuleFactory, Injector, Optional } from '@angular/core';\r\nimport { BsModalService, ModalOptions } from '@farris/ui-modal';\r\nimport { FarrisFormService } from './farris-form.service';\r\nimport { FrameContext, FrameComponent, BindingList } from '@farris/devkit';\r\nimport { of, Observable, Subject } from 'rxjs';\r\nimport { LanguageService } from './languag.service';\r\nimport { switchMap } from 'rxjs/operators';\r\ndeclare const System: any;\r\n/**\r\n * å¼¹çªæå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nclass DialogService {\r\n\r\n  private _providers: Provider[] = [];\r\n\r\n  private languageService: LanguageService;\r\n  private modalRef: any;\r\n  private modals: any = {};\r\n\r\n  constructor(\r\n    private modalService: BsModalService,\r\n    private farrisFormService: FarrisFormService,\r\n    private _componentFactoryResolver: ComponentFactoryResolver,\r\n    private frameContext?: FrameContext,\r\n    @Optional() private injector?: Injector\r\n  ) {\r\n    this.setLanguageService();\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®è¯­è¨æå¡\r\n   */\r\n  private setLanguageService() {\r\n\r\n    // FrameContextä¸ä¸å®å­å¨ï¼ä¸è½ç´æ¥ç¨\r\n    const frameContext = this.getFrameContext();\r\n    if (frameContext) {\r\n      const injector = this.frameContext.injector;\r\n      this.languageService = injector.get<LanguageService>(LanguageService, null, InjectFlags.Optional);\r\n    }\r\n\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * å¼å®¹æ§å¼¹çªï¼è·åframeContext\r\n   */\r\n  private getFrameContext() {\r\n    if (this.frameContext) {\r\n      return this.frameContext\r\n    }\r\n    if (this['context'] && this['context']['frameContext']) {\r\n      return this['context']['frameContext'];\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * å¼å®¹æ§å¼¹çªï¼è·åComponentFactoryResolver\r\n   */\r\n  private getComponentFactoryResolver() {\r\n    const frameContext = this.getFrameContext();\r\n    let componentFactoryResolver: any;\r\n    if (frameContext) {\r\n      componentFactoryResolver = frameContext.injector.get(ComponentFactoryResolver);\r\n    }\r\n    return componentFactoryResolver;\r\n  }\r\n\r\n  /**\r\n   * è·åconfigè½¬æ¢æå¯¹è±¡ç±»åçéç½®\r\n   * @param config éç½®é¡¹\r\n   */\r\n  private getObjectTypeConfig(config: any) {\r\n    let objectTypeConfig: any\r\n    if (typeof config === 'string') {\r\n      if (config.length) {\r\n        try {\r\n          objectTypeConfig = JSON.parse(config);\r\n        } catch {\r\n          throw new Error(config + 'ä¸æ¯åæ³çjsonå­ç¬¦ä¸²');\r\n        }\r\n      } else {\r\n        objectTypeConfig = {};\r\n      }\r\n    } else if (typeof config === 'object') {\r\n      objectTypeConfig = Object.assign({}, config);\r\n    } else {\r\n      throw new Error('å¡«åå¯¹è±¡æ ¼å¼æjsonå­ç¬¦ä¸²');\r\n    }\r\n    return objectTypeConfig;\r\n  }\r\n\r\n  /**\r\n   * åå»ºæ¨¡ææ¡åç»ä»¶å®ä¾ï¼å¹¶è¿åæ¨¡ææ¡å®ä¾ï¼åäºå¼å®¹èè¡¨åå¤ç\r\n   * @param config å¼¹çªéç½®\r\n   * @param compnent å¼¹çªåç»ä»¶\r\n   * @param uiStateObject ç»å®å¼¹çªåç»ä»¶uiState\r\n   */\r\n  private createModalComponentRef(config: any, component: any, uiStateObject: any) {\r\n    let componentRef: any;\r\n    let modalRef: any;\r\n    const frameContext = this.getFrameContext();\r\n    const componentFactoryResolver = this.getComponentFactoryResolver();\r\n    if (frameContext && componentFactoryResolver) {\r\n      const contentCmptFactory = componentFactoryResolver.resolveComponentFactory(component);\r\n      const modalContentInjector = ReflectiveInjector.resolveAndCreate([...this._providers], frameContext.injector);\r\n      componentRef = contentCmptFactory.create(modalContentInjector);\r\n      if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {\r\n        if (typeof uiStateObject === 'object' && Object.keys(uiStateObject).length) {\r\n          Object.keys(uiStateObject).forEach(item => {\r\n            componentRef.instance.viewModel.uiState.setPropertyValue(item, uiStateObject[item]);\r\n          });\r\n        }\r\n        // éå isDialogåæ°\r\n        componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);\r\n      }\r\n      modalRef = this.modalService.show(componentRef, config);\r\n    } else {\r\n      modalRef = this.modalService.show(component, config);\r\n    }\r\n    return modalRef;\r\n  }\r\n  /**\r\n   * \r\n   * @param config æ¨¡ææ¡æ¬èº«éç½®\r\n   * @param modalId æ¨¡ææ¡åç»ä»¶çid\r\n   * @param uiStateConfig æ¨¡ææ¡åç»ä»¶uiStateä¸çå­æ®µåå¼\r\n   */\r\n  public openModal(config: any = {}, modalId: string, uiStateConfig: any = {}, callback?: (modalRef: any) => any) {\r\n\r\n    const configObj = this.getObjectTypeConfig(config);\r\n    const uiStateObject = this.getObjectTypeConfig(uiStateConfig);\r\n    let innerCompopnent = this.farrisFormService.getControls(modalId);\r\n    let modalRef: any;\r\n    let modalConfig: any = {\r\n      title: this.languageService.defaultDialogTitle,\r\n      width: 760,\r\n      height: 450,\r\n      showButtons: false\r\n    };\r\n    modalConfig = Object.assign(modalConfig, configObj);\r\n    const onClosingHandler = modalConfig.beforeClose;\r\n    // tslint:disable: no-string-literal\r\n    const cancelChanges = modalConfig['cancelChanges'] || false;\r\n    modalConfig.beforeClose = (ref) => {\r\n      // if (ref && ref.modalRef && ref.modalRef.content) {\r\n      //   ref.modalRef.content.isDialogRootComponent = false;\r\n      // }\r\n      if (!!onClosingHandler && typeof onClosingHandler === 'function') {\r\n        return onClosingHandler(ref).pipe(\r\n          switchMap(result => {\r\n            if (result) {\r\n              if (cancelChanges) {\r\n                return this.cancelChanges(ref);\r\n              }\r\n            }\r\n            return of(result);\r\n          })\r\n        );\r\n      }\r\n      if (cancelChanges) {\r\n        return this.cancelChanges(ref);\r\n      } else {\r\n        return of(true);\r\n      }\r\n    };\r\n    const remote = modalConfig.remote || false;\r\n    if (remote) {\r\n      this.createRemoteForm(modalConfig, uiStateObject).subscribe(\r\n        (modalRef: any) => {\r\n          this.modalRef = modalRef;\r\n          if (modalRef && !!modalRef.content) {\r\n            modalRef.content.isDialogRootComponent = true;\r\n            modalRef.content.dialogRef = modalRef;\r\n          }\r\n          callback(modalRef);\r\n        }\r\n      );\r\n    } else {\r\n      if (!innerCompopnent) {\r\n        console.error(`è·åæ§ä»¶å¤±è´¥ï¼modalId=${modalId}`);\r\n        return;\r\n      }\r\n      if (typeof innerCompopnent === 'string') {\r\n        modalConfig.dialogType = 'iframe';\r\n        modalRef = this.modalService.show(innerCompopnent, modalConfig);\r\n      } else if (typeof innerCompopnent === 'function') {\r\n        modalRef = this.createModalComponentRef(modalConfig, innerCompopnent, uiStateObject);\r\n      } else if (typeof innerCompopnent === 'object') {\r\n        // å¦ææ¯å¯¹è±¡ ä¸ä½¿ç¨ç¬ç«jså è½½\r\n        // {\"useIsolateJs\":true,\"modalInstance\":f()}\r\n        if (innerCompopnent.useIsolateJs) {\r\n          const parameter = {\r\n            injector: this.injector,\r\n            uiState: uiStateObject,\r\n            modalService: this.modalService,\r\n            dialogServiceInstance: this,\r\n            eventBus: this.frameContext.getVirtualRootFrameContext().eventBus,\r\n            componentCallback: this.componentModify,\r\n            modalInstanceCallback: this.modalInstanceCallback\r\n          };\r\n          // ä¼å¨åé¨è¿è¡\r\n          return innerCompopnent[\"modalInstance\"](modalConfig, parameter);\r\n\r\n        } else {\r\n          modalRef = this.modalService.show(innerCompopnent, modalConfig);\r\n        }\r\n      }\r\n\r\n      this.modalRef = modalRef;\r\n      if (modalRef && !!modalRef.content) {\r\n        modalRef.content.isDialogRootComponent = true;\r\n        modalRef.content.dialogRef = modalRef;\r\n      }\r\n      return modalRef;\r\n    }\r\n  }\r\n\r\n  private componentModify(cmpRef: any, parameter: {\r\n    uistate: any\r\n  }) {\r\n    if (cmpRef && cmpRef.instance && cmpRef.instance.viewModel && cmpRef.instance.viewModel.uiState) {\r\n      if (parameter.uistate && typeof parameter.uistate === \"string\") {\r\n        parameter.uistate = JSON.parse(parameter.uistate);\r\n      }\r\n      if (typeof parameter.uistate === 'object' && Object.keys(parameter.uistate).length) {\r\n        Object.keys(parameter.uistate).forEach(item => {\r\n          cmpRef.instance.viewModel.uiState.setPropertyValue(item, parameter.uistate[item]);\r\n        });\r\n      }\r\n      // éå isDialogåæ°\r\n      cmpRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);\r\n    }\r\n  }\r\n\r\n  private modalInstanceCallback(cmpRef: any, options: any, parameter: any) {\r\n    if (parameter && parameter.modalService) {\r\n      const modalRef = parameter.modalService.show(cmpRef, options);\r\n      if (modalRef && !!modalRef.content) {\r\n        modalRef.content.isDialogRootComponent = true;\r\n        modalRef.content.dialogRef = modalRef;\r\n      }\r\n      return modalRef;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æå¼ç±»å¸®å©è¡¨å\r\n   * @param frameId \r\n   * @param params \r\n   * @param configs \r\n   * @description å¼¹åºè¡¨ååå¼¹åºè¿ç«¯è¡¨ååºå«ä¸ºå¼¹åºè¡¨åéè¦éç½®å­æ®µæ å°\r\n   */\r\n  public openHelpModal(frameId: string, params: string, configs?: any) {\r\n    const events = this['context']['eventParam'] || {};\r\n    // å¡çåºæ¯ä¼ éè¿æ¥çäºä»¶æ¯èªå®ä¹å¯¹è±¡ï¼åå«eventåoptionsãåè¡¨åºæ¯ä¼ éè¿æ¥çäºä»¶åæ°æ¯æ®éäºä»¶åæ°ï¼å¨åæ°ä¸­æºå¸¦äºeditor.options\r\n    const event = events.event || events;\r\n    const options = events.options || events.editor && events.editor.options || {};\r\n    const context = events && events.context;\r\n    const subject = new Subject<any>();\r\n    // modalIdå¨ä¸¤ç§åºæ¯ä¸é½éè¦ï¼ç¨æ¥åºåå®ä¾\r\n    const { modalId = null } = options;\r\n    if (!configs) {\r\n      configs = '{}';\r\n    }\r\n    if (typeof configs === 'string' && configs.length > 0) {\r\n      configs = JSON.parse(configs);\r\n    }\r\n    const { remote = false, currentRow = false, areaResponse = undefined } = configs || {};\r\n    // æ¯æareaResponseéç½®\r\n    if (areaResponse !== undefined && options.areaResponse === undefined) {\r\n      options.areaResponse = areaResponse;\r\n    }\r\n    if (remote) {\r\n      const mapFields = configs.mapFields || {};\r\n      options.remote = remote + '?v=' + new Date().valueOf();\r\n      this.openModal(options, modalId, params, (dialogRef: any) => {\r\n        // æ°å¢eventåæ°ï¼ä¸ºäºä»¥åè°ç¨eventä¸­çformControlä»¥ééåè¡¨ä¸­çæºè½è¾å¥æ¡å¼¹åºè¡¨åï¼\r\n        this.modals[modalId] = { subject, frameId: frameId, mapFields, dialogRef, currentRow, event: event, context };\r\n      });\r\n    } else {\r\n      const dialogRef = this.openModal(options, modalId, params);\r\n      const mapFields = options.mapFields || {};\r\n      this.modals[modalId] = { subject, frameId: frameId, mapFields, dialogRef, currentRow, event: event, context };\r\n    }\r\n    return subject;\r\n  }\r\n\r\n  /**\r\n   * æå¼å¸¦åè°çå¼¹çª\r\n   * @param frameId frameId\r\n   * @param params åæ°\r\n   * @param configs éç½®\r\n   * @returns \r\n   */\r\n  public openCallbackableModal(frameId: string, params?: string, configs?: any) {\r\n    if (!configs) {\r\n      configs = '{}';\r\n    }\r\n    if (typeof configs === 'string') {\r\n      configs = JSON.parse(configs);\r\n    }\r\n    const events = this['context'] && this['context']['eventParam'] || {};\r\n    const options = events.options;\r\n    options.showButtons = true;\r\n    options.buttons = [\r\n      {\r\n        text: this.languageService.confirm, cls: 'btn btn-primary', handle: (event: any) => {\r\n          const { modalId = null } = options || {};\r\n          if (modalId) {\r\n            const modal = this.modals[modalId];\r\n            const { subject = null, dialogRef = null, frameId = null, handle = null, currentRow = false } = modal || {};\r\n            const formCmp = dialogRef.content; // å¼¹çªè¡¨åå®ä¾\r\n            if (!formCmp) {\r\n              throw new Error('ä¸æ¯æçè¡¨åç±»å');\r\n            }\r\n            let selectedItems = [];\r\n            if (currentRow === true) {\r\n              let frameComtext: FrameContext;\r\n              if (formCmp.context) {\r\n                frameComtext = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId) as FrameContext;\r\n              } else {\r\n                frameComtext = formCmp.appContext.frameContextManager.getFrameContextById(frameId) as FrameContext;\r\n              }\r\n\r\n              if (!frameComtext) {\r\n                throw new Error(`æ æçframeIdï¼${frameId}ï¼è¯·ç¡®è®¤å½ä»¤ä¸­frameIdæ­£ç¡®ã`);\r\n              }\r\n              const bindingList = frameComtext.bindingData.getList() as BindingList;\r\n              const item = bindingList && bindingList.currentItem && bindingList.currentItem.toJSON();\r\n              selectedItems = [item];\r\n            } else {\r\n              let rows: Map<string, any>;\r\n              // å¦æcontextä¸ºç©º é£ä¹å°è¯ä»å¯¹åºçappcontextè¯»åï¼ä¸»è¦ç®çæ¯ä¸ºäºè§£æè¡¨åçå¼¹åº\r\n              if (formCmp.context) {\r\n                rows = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.rows || new Map<string, any>();\r\n              } else {\r\n                rows = formCmp.appContext.frameContextManager.getFrameContextById(frameId).uiState.rows || new Map<string, any>();\r\n              }\r\n\r\n              selectedItems = Array.from(rows.values());\r\n            }\r\n            if (typeof handle === 'function') {\r\n              handle(selectedItems);\r\n            }\r\n            if (subject) {\r\n              subject.next();\r\n            }\r\n            dialogRef.close(options);\r\n          }\r\n        }\r\n      },\r\n      { text: this.languageService.cancel, cls: 'btn', handle: (event: any) => this.cancel(options) }\r\n    ];\r\n\r\n    const subject = new Subject<any>();\r\n    const { modalId = null } = options;\r\n    const { remote = null, currentRow = false, areaResponse = undefined } = configs;\r\n    const handle = options.handle;\r\n    // æ¯æareaResponseéç½®\r\n    if (areaResponse !== undefined && options.areaResponse === undefined) {\r\n      options.areaResponse = areaResponse;\r\n    }\r\n    if (remote) {\r\n      options.remote = remote + '?v=' + new Date().valueOf();\r\n      this.openModal(options, modalId, params, (dialogRef: any) => {\r\n        this.modals[modalId] = { subject, frameId: frameId, dialogRef, handle, currentRow, event: events.event };\r\n      });\r\n    } else {\r\n      const dialogRef = this.openModal(options, modalId, params);\r\n      this.modals[modalId] = { subject, frameId: frameId, dialogRef, handle, currentRow, event: events.event };\r\n    }\r\n    return subject;\r\n  }\r\n\r\n  /**\r\n   * ç¡®è®¤æé®äºä»¶\r\n   * @param args \r\n   */\r\n  public confirm() {\r\n    const events = this['context'] && this['context']['eventParam'] || {};\r\n    const { modalId = null } = events || {};\r\n    if (modalId) {\r\n      const modal = this.modals[modalId];\r\n      const { subject = null, dialogRef = null, mapFields = {}, frameId = null, currentRow = false, event = null, context = null } = modal || {};\r\n      const formCmp = dialogRef.content; // å¼¹çªè¡¨åå®ä¾\r\n      if (!formCmp) {\r\n        throw new Error('ä¸æ¯æçè¡¨åç±»å');\r\n      }\r\n      // const selectedIds = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.ids;\r\n\r\n      let selectedItems = [];\r\n      if (currentRow === true) {\r\n        const frameComtext = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId) as FrameContext;\r\n        if (!frameComtext) {\r\n          throw new Error(`æ æçframeIdï¼${frameId}ï¼è¯·ç¡®è®¤å½ä»¤ä¸­frameIdæ­£ç¡®ã`);\r\n        }\r\n        const bindingList = frameComtext.bindingData.getList() as BindingList;\r\n        const item = bindingList && bindingList.currentItem && bindingList.currentItem.toJSON();\r\n        if (item && Object.keys(item).length > 0) {\r\n          selectedItems = [item];\r\n        }\r\n      } else {\r\n        const rows: Map<string, any> = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.rows || new Map<string, any>();\r\n        selectedItems = Array.from(rows.values());\r\n      }\r\n\r\n      // æ å°å­æ®µæ°æ®\r\n      // è·åè§¦åå¼¹æ¡çç¼è¾å¨çå­æ®µåç§°\r\n      let editorField = undefined;\r\n      if (event && event.editor && event.editor.column) {\r\n        editorField = event.editor.column.field;\r\n      }\r\n      if (selectedItems && mapFields) {\r\n        Object.keys(mapFields).forEach(k => {\r\n          const targetField: string = mapFields[k];\r\n          const sourceKeyArray = k.split('.').filter(p => p) || [];\r\n          const targetValue = selectedItems.map(r => {\r\n            return sourceKeyArray.reduce((target, key) => {\r\n              if (target && (target.hasOwnProperty(key) || target['__proto__'].hasOwnProperty(key))) {\r\n                return target[key];\r\n              } else {\r\n                return '';\r\n              }\r\n            }, r);\r\n          }).join(',');\r\n          if (targetField) {\r\n            const bindingPaths = this.frameContext.viewModel.bindingPath.split('/').filter(p => p);\r\n            const targetFields = targetField.split(',').filter(p => p);\r\n            targetFields.forEach(target => {\r\n              if (context) {\r\n                this.setValueByPath(context, target, targetValue);\r\n              } else {\r\n                const targetPath = target.split('.');\r\n                this.frameContext.bindingData.setValue(bindingPaths.concat(targetPath), targetValue, true, true);\r\n              }\r\n\r\n            });\r\n          }\r\n        })\r\n      }\r\n      if (subject) {\r\n        subject.next();\r\n      }\r\n      dialogRef.close();\r\n    }\r\n  }\r\n  /**\r\n   * åæ¶æé®äºä»¶\r\n   * @param args \r\n   */\r\n  public cancel(event?: any) {\r\n    const events = event || this['context'] && this['context']['eventParam'] || {};\r\n    const { modalId = null } = events || {};\r\n    if (modalId) {\r\n      const modal = this.modals[modalId];\r\n      const { subject = null, dialogRef = null } = modal || {};\r\n      if (subject) {\r\n        subject.next();\r\n      }\r\n      if (dialogRef) {\r\n        dialogRef.close();\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * åæ¶æå¡å¨åæ´é\r\n   */\r\n  private cancelChanges(ref: any): Observable<boolean> {\r\n    if (ref && ref.modalRef && ref.modalRef.content) {\r\n      const component: FrameComponent = ref.modalRef.content as FrameComponent;\r\n      if (component && component.context) {\r\n        const repository = component.context.repository || null;\r\n        if (repository) {\r\n          return repository.cancelChanges().pipe(switchMap(() => of(true)));\r\n        }\r\n      }\r\n    }\r\n    return of(true);\r\n  }\r\n  /**\r\n   * å³é­è¯¥å¼¹çª\r\n   */\r\n  closeModal() {\r\n    if (this.modalRef) {\r\n      this.modalRef.close();\r\n    }\r\n  }\r\n  /**\r\n   * åå»ºè¿ç¨è¡¨åå®ä¾\r\n   * @param options dialogéç½®\r\n   * @param uiState uistate\r\n   */\r\n  private createRemoteForm(options: any, uiState: any): Subject<any> {\r\n    const remote = options.remote || false;\r\n    const subject = new Subject<any>();\r\n    if (remote) {\r\n      let moduleName = options.moduleName || null;\r\n      System.import(remote).then((module: any) => {\r\n        if (!moduleName) {\r\n          moduleName = Object.keys(module).pop();\r\n        }\r\n        const moduleFactory = module[moduleName] as NgModuleFactory<any>;\r\n        const moduleRef = moduleFactory.create(this.injector);\r\n        const entryComponent = moduleRef['_bootstrapComponents'][0];\r\n        if (entryComponent) {\r\n          const compFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(entryComponent);\r\n          const componentRef: ComponentRef<any> = compFactory.create(this.injector);\r\n\r\n          if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {\r\n            if (typeof uiState === 'object' && Object.keys(uiState).length) {\r\n              Object.keys(uiState).forEach(item => {\r\n                componentRef.instance.viewModel.uiState.setPropertyValue(item, uiState[item]);\r\n              });\r\n            }\r\n            // éå isDialogåæ°\r\n            componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);\r\n          }\r\n          const modalRef = this.modalService.show(componentRef, options);\r\n          subject.next(modalRef);\r\n        } else {\r\n          throw new Error(`æ æ³æ¾å°å¥å£è¡¨åï¼`);\r\n        }\r\n      });\r\n    }\r\n    return subject;\r\n  }\r\n  private setValueByPath(target: object, path: string, value: any) {\r\n    if (target) {\r\n      const paths = path.split('.');\r\n      if (paths.length <= 1) {\r\n        target[path] = value;\r\n      } else {\r\n        paths.slice(0, -1).reduce((prev, path) => {\r\n          if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {\r\n            prev[path] = {};\r\n          }\r\n          return prev[path];\r\n        }, target)[paths[paths.length - 1]] = value;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { DialogService };\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { FarrisSidebarService } from '@farris/ui-sidebar';\r\nimport { Entity, FrameContext } from '@farris/devkit';\r\nimport { BefRepository } from '@farris/bef';\r\nimport { FormMessageService } from './form-message.service';\r\nimport { LanguageService } from './languag.service';\r\n\r\n\r\n/**\r\n * ä¾§è¾¹æ æå¡\r\n * @scope FrameComponent\r\n */\r\n@Injectable()\r\nclass SidebarService {\r\n\r\n  private get repository(): BefRepository<Entity> {\r\n    return this.frameContext.repository as BefRepository<Entity>;\r\n  }\r\n\r\n  constructor(\r\n    private frameContext: FrameContext,\r\n    private sidebarUIService: FarrisSidebarService,\r\n    private messageService: FormMessageService,\r\n    @Optional() private languageService: LanguageService,\r\n  ) {\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n\r\n  openSidebar() {\r\n    this.sidebarUIService.sendIsOpen(true);\r\n  }\r\n\r\n  closeSidebar() {\r\n    this.sidebarUIService.sendIsOpen(false);\r\n  }\r\n\r\n  /**\r\n   * å³é­åååæ¶åæ´\r\n   */\r\n  confirmBeforeClosingSidebar(): Observable<boolean> {\r\n\r\n    // æ£æ¥æ¯å¦æåæ´ï¼æ²¡æåæ´ç´æ¥å³é­\r\n    const ifChangesExist = this.repository.entityManager.checkAllEntityChanges();\r\n    if (!ifChangesExist) {\r\n      return of(true);\r\n    }\r\n\r\n    // ç¡®è®¤æ¯å¦å³é­\r\n    const confirm$ = this.messageService.question(this.languageService['exitWithoutSave']);\r\n    const result$ = confirm$.pipe(\r\n      switchMap((confirmResult: boolean) => {\r\n        if (confirmResult === false) {\r\n          return of(false);\r\n        } else {\r\n          return of(true);\r\n        }\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * ç»§ç»­å³é­ä¾§è¾¹æ \r\n   */\r\n  public continueClosingSidebar(): Observable<boolean> {\r\n    return of(true);\r\n  }\r\n\r\n  /**\r\n   * é»æ­¢ä¾§è¾¹æ å³é­\r\n   */\r\n  public stopClosingSidebar(): Observable<boolean> {\r\n    return of(false);\r\n  }\r\n}\r\n\r\nexport { SidebarService };\r\n","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * è¿æ»¤æ¡ä»¶æå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nclass FilterService {\r\n\r\n  /**\r\n   * ç§»é¤åå«ç¹æ®å¼çè¿æ»¤æ¡ä»¶\r\n   * @todoï¼åå®filtersä¸ºå­ç¬¦ä¸²ï¼å¾è®¾è®¡æ¶æ¯ææ°ç»åæ°åä¸èµ·è°æ´\r\n   */\r\n  public stripFiltersWithSpecialValue(filters: string, specialValues: string): string {\r\n    if (!filters || !specialValues) {\r\n      return filters;\r\n    }\r\n\r\n    const filterArray: any[] = JSON.parse(filters);\r\n    const strippedFilterArray = filterArray.filter((filter: any) => {\r\n      const filterValue = this.getFilterValue(filter);\r\n      return specialValues.indexOf(filterValue) === -1;\r\n    });\r\n\r\n    return JSON.stringify(strippedFilterArray);\r\n  }\r\n\r\n  /**\r\n   * è·åè¿æ»¤æ¡ä»¶çå¼\r\n   * @todoï¼æ²¡æFilteræ¥å£å®ä¹ï¼ç®åäº§åé¨å¤§å°åä¸ä¸è´ã\r\n   */\r\n  private getFilterValue(filter: any) {\r\n    return filter.Value || filter.value;\r\n  }\r\n}\r\n\r\nexport { FilterService };\r\n","import { Injectable, InjectionToken, Inject, Optional } from '@angular/core';\r\nexport const FARRIS_FORM_COMPONENTS = new InjectionToken<{ [key: string]: any }>('è¡¨åå¼¹åºçªå£æéèç»ä»¶åè¡¨');\r\n\r\n/**\r\n * è¡¨åæå¡\r\n * @scope FormModule\r\n */\r\n@Injectable()\r\nexport class ComponentManagerService {\r\n\r\n  private controls: { [key: string]: any } = {};\r\n\r\n  appendControl(key: string, cmpIns: any) {\r\n    this.controls[key] = cmpIns;\r\n  }\r\n\r\n  getControl(key: string) {\r\n    if (this.controls[key]) {\r\n      return this.controls[key];\r\n    } else {\r\n      console.warn(`æªæ¾å°Keyä¸º${key}çç»ä»¶ï¼`);\r\n      return null;\r\n    }\r\n  }\r\n  public clear(key?: string) {\r\n    if (key) {\r\n      this.controls[key] = null;\r\n      delete this.controls[key];\r\n    } else {\r\n      this.controls = {};\r\n    }\r\n  }\r\n}\r\n","import { Observable, of,Subject } from \"rxjs\";\r\n\r\nexport class AuthorityService {\r\n    queryOperationAuthority(operationIds: Array<string>): Observable<Map<string, boolean>>{\r\n        var queryResult = new Map<string, boolean>();\r\n        var i=0;\r\n        for(var j=0; j<operationIds.length; j++) {\r\n            queryResult.set(operationIds[j], i%2==0? true:false);\r\n            i++;            \r\n        }\r\n\r\n        var dummyResult = new Subject<Map<string, boolean>>();\r\n        setTimeout(() => {\r\n            dummyResult.next(queryResult);\r\n        }, 0);\r\n\r\n        return dummyResult;\r\n    }\r\n}\r\n","import { AuthorityService } from './authority.service';\r\nimport {Observable, empty} from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n/**\r\n * æé\r\n */\r\nexport class Authority {\r\n    \r\n    constructor() {\r\n        this.operationLabelMap = new Map<string, string>();\r\n        this.authOfLabel = new Map<string, boolean>();\r\n    }\r\n\r\n    /**\r\n     * ä»labelå°æä½æéIDçæ å°ï¼labelå¯ä»¥æ¯button idç­\r\n     */\r\n    private operationLabelMap: Map<string, string>;\r\n\r\n    /**\r\n     * è®°å½labelå¯¹äºçæä½æéï¼æ¯å¦éè¿\r\n     */\r\n    private authOfLabel: Map<string, boolean>;\r\n\r\n    /**\r\n     * è®¾ç½®labelå°operation idçæ å°\r\n     * @param labelMap \r\n     */\r\n    protected setLabelMap(labelMap: Object) {\r\n        for(var i in labelMap) {\r\n            this.operationLabelMap.set(i, labelMap[i]);\r\n        }\r\n        this.operationLabelMap.forEach((opId, label) => {\r\n            this[label] = false;\r\n        });        \r\n    }\r\n    \r\n    /**\r\n     * åå§åæéçå¼\r\n     */\r\n    initialize(authorityService: AuthorityService): Observable<void> {\r\n        if(this.operationLabelMap && this.operationLabelMap.size>0) {\r\n            return authorityService.queryOperationAuthority(Array.from(this.operationLabelMap.values())).pipe(\r\n                map((operationAuth) => {\r\n                    this.operationLabelMap.forEach((opId, label) => {\r\n                        this.authOfLabel.set(label, operationAuth.has(opId) ? operationAuth.get(opId) : false);\r\n                    });\r\n                })\r\n            );\r\n        }else{\r\n            return empty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * è¿åæä½æéï¼å³ç¨æ·æ¯å¦æ¥æLabelæå¯¹åºçæé\r\n     * @param label æ ç­¾ï¼å¯ä»¥æ¯button idç­\r\n     */\r\n    hasOperation(label:string) {        \r\n        return this.authOfLabel.has(label) && this.authOfLabel.get(label);\r\n    }\r\n\r\n    // è¿åå­æ®µæé\r\n    // hasField(field:string)\r\n}","/*\r\n * @Author: aalizzwell\r\n * @Date: 2019-05-30 10:35:09\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-15 19:22:13\r\n */\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { LanguageService } from './languag.service';\r\nimport { FormErrorService } from './error/form-error.service';\r\nimport { IExceptionHandler, AppContext } from '@farris/devkit';\r\n\r\n/**\r\n * é»è®¤å¼å¸¸å¤çå¨\r\n * @scope æ²¡ææä¾å¯¹åºProvider\r\n */\r\n@Injectable()\r\nclass ExceptionHandler implements IExceptionHandler {\r\n  private appContext: AppContext = null;\r\n  constructor(\r\n    private formErrorService: FormErrorService,\r\n    @Optional() private languageService: LanguageService,\r\n    private applicationContext: AppContext,\r\n  ) {\r\n    if (this.languageService == null) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n  }\r\n  public setContext(applicationContext: AppContext) {\r\n    this.appContext = applicationContext;\r\n  }\r\n  public handle(error: any) {\r\n    if (!!this.formErrorService) {\r\n      this.formErrorService.exception(this.languageService.loadFailed, error);\r\n    }\r\n  }\r\n}\r\n\r\nexport { ExceptionHandler };\r\n","import { Provider } from '@angular/core';\r\nimport { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { HideEventService } from '../form-loading/hide-event.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\nimport { CheckService } from '../check.service';\r\nimport { DataCheckService } from '../data-check.service';\r\n\r\nimport { EventService } from '../event.service';\r\nimport { MenuStateService } from '../menu-state.service';\r\nimport { RouterService } from '../router.service';\r\nimport { UIStateService } from '../ui-state.service';\r\nimport { StateMachineService } from '../state-machine.service';\r\nimport { ValidationService } from '../validation.service';\r\nimport { BindingDataService } from '../binding-data.service';\r\nimport { CommandService } from '../command-service';\r\n\r\nimport { QuerystringService } from '../querystring';\r\nimport { RuntimeFrameworkService } from '../rtf-service';\r\nimport { NavigationEventService } from '../navigation-event.service';\r\nimport { NavigationService } from '../navigation.service';\r\nimport { NavigationMiddlewareService } from '../navigation-middleware.service';\r\nimport { GridMiddlewareService } from '../grid.middleware.service';\r\nimport { ParamService } from '../param.service';\r\n\r\nimport { BeActionService } from '../be-action.service';\r\nimport { ApproveService } from '../approve.service';\r\nimport { PrintService } from '../print.service';\r\nimport { AttachmentDataService, AttachmentService } from '../attachment/index';\r\nimport { ApplicationParamService } from '../application-param.service';\r\nimport {\r\n  EntityTraversingService, EntityManipulationService, EntityAggregationService,\r\n  EntityListService, EntityService\r\n} from '../entity-services/index';\r\nimport { LanguageService } from '../languag.service';\r\nimport { DialogService } from '../dialog.service';\r\nimport { SidebarService } from '../sidebar-service';\r\nimport { FarrisFormService } from '../farris-form.service';\r\nimport { FilterService } from '../filter-service';\r\nimport { ChangeItemService } from '../change-item.service';\r\n\r\n// data-services\r\nimport { ListDataService } from '../data-services/list-data.service';\r\nimport { TreeDataService } from '../data-services/tree-data.service';\r\nimport { CardDataService } from '../data-services/card-data.service';\r\nimport { SubListDataService } from '../data-services/sub-list-data.service';\r\nimport { KeybindingService } from '../keybinding-service';\r\nimport { FocusInvalidService } from '../focus-invalid.service';\r\nimport { SubTreeDataService } from '../data-services/sub-tree-data-service';\r\n\r\n/**\r\n * éççèProviders\r\n */\r\nconst FARRIS_COMMAND_SERVICE_PROVIDERS: Provider[] = [\r\n\r\n  // è¡¨åæ¨¡åæ³¨å¥ï¼18ä¸ªï¼\r\n  FormLoadingService,\r\n  FormMessageService,\r\n  FormNotifyService,\r\n  FormErrorService,\r\n  CheckService,\r\n  DataCheckService,\r\n  EventService,\r\n  FilterService,\r\n  KeybindingService,\r\n  LanguageService,\r\n  ParamService,\r\n  MenuStateService,\r\n  QuerystringService,\r\n  RuntimeFrameworkService,\r\n  NavigationEventService,\r\n  NavigationService,\r\n  RouterService,\r\n  ApplicationParamService,\r\n\r\n  // FrameComponentï¼20ä¸ªï¼\r\n  ValidationService,\r\n  FocusInvalidService,\r\n  ChangeItemService,\r\n  UIStateService,\r\n  StateMachineService,\r\n  BindingDataService,\r\n  CommandService,\r\n\r\n  // entity-services\r\n  EntityTraversingService,\r\n  EntityManipulationService,\r\n  EntityAggregationService,\r\n  EntityListService,\r\n  EntityService,\r\n\r\n  ListDataService,\r\n  TreeDataService,\r\n  SubTreeDataService,\r\n  CardDataService,\r\n  SubListDataService,\r\n\r\n  BeActionService,\r\n  ApproveService,\r\n  PrintService,\r\n  AttachmentDataService,\r\n  AttachmentService,\r\n  NavigationMiddlewareService,\r\n  GridMiddlewareService,\r\n  SidebarService,\r\n  FarrisFormService,\r\n  DialogService,\r\n];\r\n\r\nexport { FARRIS_COMMAND_SERVICE_PROVIDERS };\r\n","import { Injectable, Injector, Optional } from '@angular/core';\r\nimport { NumberFormat, UserSettings } from '@farris/devkit';\r\nimport { FrmI18nSettingService } from '@gsp-sys/rtf-common';\r\n\r\n@Injectable()\r\nexport class UserSettingsService implements UserSettings {\r\n  constructor(private injector: Injector, @Optional() private frmI18nSettingService: FrmI18nSettingService) { }\r\n\r\n  /**\r\n   * ç¨æ·æ¶åºå­ç¬¦ä¸²\r\n   */\r\n  public get timeZone(): string {\r\n    return this.timezone && this.timezone.id || null;\r\n  }\r\n  /**\r\n   * æ¶åºåç§»\r\n   */\r\n  public get timeZoneOffset(): number {\r\n    const offset = this.timezone && this.timezone.baseOffset;\r\n    if (offset !== null && offset !== undefined) {\r\n      return offset;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * é»è®¤è¯­è¨\r\n   */\r\n  public get defaultLanguage(): string {\r\n    return this.i18nSetting && this.i18nSetting.defaultLanguage || null;\r\n  }\r\n  /**\r\n   * æ¥ææ ¼å¼åå­ç¬¦ä¸²\r\n   * like: yyyy-MM-dd\r\n   */\r\n  public get dateFormat(): string {\r\n    return this.i18nSetting && this.i18nSetting.userDateFormat || null;\r\n  }\r\n  /**\r\n   * æ¶é´æ ¼å¼\r\n   * like: HH:MM:ss\r\n   */\r\n  public get timeFormat(): string {\r\n    return this.i18nSetting && this.i18nSetting.userTimeFormat || null;\r\n  }\r\n  public get dateTimeFormat(): string {\r\n    const dateFormat = this.i18nSetting && this.i18nSetting.userDateFormat || 'yyyy-MM-dd';\r\n    const timeFormat = this.i18nSetting && this.i18nSetting.userTimeFormat || 'HH:mm:ss';\r\n    return `${dateFormat} ${timeFormat}`;\r\n  }\r\n  /**\r\n   * å°åæ ¼å¼\r\n   */\r\n  public get addressFormat(): any {\r\n    return null;\r\n  }\r\n  /**\r\n   * æ°å­æ ¼å¼\r\n   */\r\n  public get numberFormat(): NumberFormat {\r\n    if (this.i18nSetting && this.i18nSetting.userNumberFormat) {\r\n      const userNumberFormat = this.i18nSetting.userNumberFormat;\r\n      const numberFormat: NumberFormat = {\r\n        negativeSign: userNumberFormat.negativeSign || '-',\r\n        numberDecimalDigits: userNumberFormat.numberDecimalDigits || 2,\r\n        numberDecimalSeparator: userNumberFormat.numberDecimalSeparator || '.',\r\n        numberGroupSeparator: userNumberFormat.numberGroupSeparator || ','\r\n      };\r\n      return numberFormat;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * åºåä»£ç \r\n   */\r\n  public get regionCode(): string {\r\n    return this.i18nSetting && this.i18nSetting.userRegionCode || null;\r\n  }\r\n  /**\r\n   * ç¨æ·éç½®\r\n   */\r\n  private get userSettings(): any {\r\n    const userSettings = this.frmI18nSettingService && this.frmI18nSettingService.getSetting();\r\n    return userSettings;\r\n  }\r\n  private get timezone() {\r\n    return this.i18nSetting && this.i18nSetting.timezone;\r\n  }\r\n  private get i18nSetting() {\r\n    return this.userSettings && this.userSettings.i18nSetting;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { WorkFlow } from \"./types\";\r\n\r\n@Injectable()\r\nexport class WorkFlowMessageService {\r\n  private messageHandler: (callback: (e: WorkFlow.IMessage) => void) => (event: any) => void;\r\n  private handler: (event: any) => void;\r\n  constructor() {\r\n    this.messageHandler = (callback: (e: WorkFlow.IMessage) => void) => {\r\n      return (event: any) => {\r\n        var message = event.data as WorkFlow.IMessage;\r\n        if (message) {\r\n          message.sender = event.source;\r\n        }\r\n        if (typeof callback === 'function') {\r\n          callback(message);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * çå¬å·¥ä½æµæ¶æ¯\r\n   * @param callback åè°\r\n   */\r\n  public listen(callback: (e: WorkFlow.IMessage) => void) {\r\n    this.handler = this.messageHandler(callback);\r\n    window.addEventListener('message', this.handler);\r\n  }\r\n  public destroy() {\r\n    if (this.handler) {\r\n      window.removeEventListener('message', this.handler);\r\n    }\r\n\r\n  }\r\n  /**\r\n   * ç»å·¥ä½æµè¡¨ååéæ¶æ¯\r\n   * @param message \r\n   */\r\n  public send(message: WorkFlow.IMessage): void {\r\n    if (!message) {\r\n      return;\r\n    }\r\n    let win: Window = window;\r\n    if (message.target) {\r\n      win = message.target as Window || window;\r\n      delete message.target;\r\n    }\r\n    if (win) {\r\n      win.postMessage(message, '*');\r\n    }\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { WorkFlow } from \"./types\";\r\nimport { WorkFlowMessageService } from \"./work-flow-message.service\";\r\n\r\n/**\r\n * å·¥ä½æµæ¶æ¯\r\n * @warning ç¦æ­¢ä½¿ç¨è¡¨åä¸ä¸æï¼ææä¸ä¸æå¿é¡»ä»å¤é¨ä¼ å¥\r\n */\r\n@Injectable()\r\nexport class WorkFlowMessage {\r\n  private listeners: Map<string, any>;\r\n  constructor(private injector: Injector, public workFlowMessageService: WorkFlowMessageService) {\r\n    this.listeners = new Map<string, any>();\r\n  }\r\n  public setup() {\r\n    if (!this.workFlowMessageService) {\r\n      return;\r\n    }\r\n    this.workFlowMessageService.listen((message: WorkFlow.IMessage) => {\r\n      if (!this.listeners || this.listeners.size < 1) {\r\n        return;\r\n      }\r\n      this.listeners.forEach((callback: any, key: string) => {\r\n        if (typeof callback === 'function') {\r\n          callback(message);\r\n        }\r\n      })\r\n    });\r\n  }\r\n  public addEventListener(callback: (event: MessageEvent) => void): string {\r\n    const id = `${new Date().valueOf().toString(16)}-${Math.ceil(Math.random() * 100)}`;\r\n    this.listeners.set(id, callback);\r\n    return id;\r\n  }\r\n  public removeEventListener(eventId: string): void {\r\n    if (!this.listeners || this.listeners.size < 1) {\r\n      return;\r\n    }\r\n    this.listeners.delete(eventId);\r\n    eventId = null;\r\n  }\r\n}\r\n","import { Injectable, Injector } from \"@angular/core\";\r\nimport { AppContext, AppContextManager, FrameContext, onFrameComponentInit } from \"@farris/devkit\";\r\nimport { from, Observable, of } from \"rxjs\";\r\nimport { BefRepository, BefRepositoryUtil } from '@farris/bef';\r\nimport { concatMap, throwIfEmpty } from \"rxjs/operators\";\r\nimport { ValidationService } from \"../validation.service\";\r\nimport { WorkFlow } from \"./types\";\r\nimport { WorkFlowMessage } from \"./work-flow-message\";\r\nimport { WorkFlowMessageService } from \"./work-flow-message.service\";\r\n\r\n@Injectable()\r\nexport class WorkFlowMessageHandler implements onFrameComponentInit {\r\n  constructor(private injector: Injector, private frameContext: FrameContext, private workFlowMessageService: WorkFlowMessageService, private workFlowMessage: WorkFlowMessage) {\r\n\r\n  }\r\n  public onComponentInit(frameContext: FrameContext) {\r\n    const eventId = this.workFlowMessage.addEventListener(this.handle.bind(this));\r\n    const frameContextDestroySignal = this.frameContext.destorySignal;\r\n    if (frameContextDestroySignal) {\r\n      frameContextDestroySignal.subscribe(() => {\r\n        this.workFlowMessage.removeEventListener(eventId);\r\n      });\r\n    }\r\n    const appContextDestroySignal = this.frameContext.appContext.destorySignal;\r\n    if (appContextDestroySignal) {\r\n      appContextDestroySignal.subscribe(() => {\r\n        this.workFlowMessage.workFlowMessageService.destroy();\r\n      });\r\n    }\r\n  }\r\n  public handle(message: WorkFlow.IMessage): void {\r\n    const source = message.sender as Window;\r\n    const data = message.data as WorkFlow.IMessageBody;\r\n    const commandName = data && data.command || null;\r\n    let resultTask: Observable<any> = null;\r\n    if (!commandName) {\r\n      return;\r\n    }\r\n    if (commandName == 'wf-required-verification') {\r\n      // å·¥ä½æµçå¿å¡«æ ¡éª\r\n      // å¦æ­¤è·åçæ¯å½åç»ä»¶çæ ¡éªæå¡ï¼åºè¯¥ænamespaceæ¥åºåï¼ä¸åçnamespaceéè¦åå«æ§è¡æ ¡éª\r\n      const formFrameContexts = this.getFormFrameContexts();\r\n      resultTask = from(formFrameContexts).pipe(\r\n        concatMap((frameContext: FrameContext) => {\r\n          var validation = frameContext.injector.get<ValidationService>(ValidationService, null);\r\n          if (validation) {\r\n            return validation.validateAll();\r\n          }\r\n          return of(true);\r\n        })\r\n      );\r\n    } else {\r\n      var command = this.frameContext.viewModel[commandName];\r\n      if (command) {\r\n        resultTask = command(data.arguments);\r\n      }\r\n    }\r\n    if (resultTask) {\r\n      const message: WorkFlow.IMessage = this.buildMessage(true, source, this.isChanged);\r\n      resultTask.pipe(throwIfEmpty()).subscribe((result) => {\r\n        // åæ¥æºæ¹åä¼ æ¶æ¯\r\n        this.workFlowMessageService.send(message);\r\n      }, () => {\r\n        message.data.result = false;\r\n        this.workFlowMessageService.send(message);\r\n      });\r\n    }\r\n  }\r\n  private buildMessage(result: boolean, target: any, dataChanged: boolean, type: string = 'message') {\r\n    const message: WorkFlow.IMessage = {\r\n      data: {\r\n        result,\r\n        dataChanged\r\n      },\r\n      type: type,\r\n      target: target,\r\n    };\r\n    return message;\r\n  }\r\n  private getFormFrameContexts(): FrameContext[] {\r\n    const appContextManager = this.injector.get<AppContextManager>(AppContextManager, null);\r\n    const formFrameContexts = [];\r\n    if (appContextManager) {\r\n      const appContexts: AppContext[] = appContextManager.getAppContexts();\r\n      if (appContexts && appContexts.length > 0) {\r\n        appContexts.forEach((appContext: AppContext) => {\r\n          const frameContexts: FrameContext[] = appContext.frameContextManager.getFrameContexts();\r\n          frameContexts.reduce((contexts: FrameContext[], frameContext: FrameContext) => {\r\n            const namespace = frameContext.namespace;\r\n            const index = contexts.findIndex((frame: FrameContext) => frame.namespace === namespace);\r\n            if (index === -1) {\r\n              const root = frameContext.getVirtualRootFrameContext();\r\n              contexts.push(root);\r\n            }\r\n            return contexts;\r\n          }, formFrameContexts);\r\n        });\r\n      }\r\n    }\r\n    return formFrameContexts;\r\n  }\r\n  /**\r\n   * æ¯å¦ææªä¿å­çåæ´\r\n   */\r\n  private get isChanged(): boolean {\r\n    const befRepository = this.frameContext.repository as BefRepository<any>;\r\n    return BefRepositoryUtil.isExistUnsaveData(befRepository);\r\n  }\r\n}","import { FormLoadingService } from '../form-loading/form-loading.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { FormErrorService } from '../error/form-error.service';\r\nimport { FormWizardService } from '../form-wizard.service';\r\n\r\nimport { CheckService } from '../check.service';\r\nimport { DataCheckService } from '../data-check.service';\r\nimport { EventService } from '../event.service';\r\nimport { ComponentManagerService } from '../component-manager.service';\r\nimport { FilterService } from '../filter-service';\r\nimport { KeybindingService } from '../keybinding-service';\r\nimport { LanguageService } from '../languag.service';\r\n\r\nimport { MenuStateService } from '../menu-state.service';\r\nimport { QuerystringService } from '../querystring';\r\nimport { RuntimeFrameworkService } from '../rtf-service';\r\nimport { NavigationEventService } from '../navigation-event.service';\r\nimport { NavigationService } from '../navigation.service';\r\nimport { ParamService } from '../param.service';\r\nimport { RouterService } from '../router.service';\r\nimport { ApplicationParamService } from '../application-param.service';\r\nimport { FilterConditionService } from '../filter-condition.service';\r\nimport { UserSettingsService } from '../user-settings.service';\r\nimport { UserSettingsToken } from '@farris/devkit';\r\nimport { WorkFlowMessage, WorkFlowMessageService } from '../work-flow/index';\r\n/**\r\n * æ¨¡åçº§æ³¨å¥(å±20ä¸ª)\r\n */\r\nconst FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS = [\r\n  FormLoadingService,\r\n  FormMessageService,\r\n  FormNotifyService,\r\n  FormErrorService,\r\n  FormWizardService,\r\n  CheckService,\r\n  DataCheckService,\r\n  EventService,\r\n  ComponentManagerService,\r\n  FilterService,\r\n  KeybindingService,\r\n  LanguageService,\r\n  ParamService,\r\n  MenuStateService,\r\n  QuerystringService,\r\n  RuntimeFrameworkService,\r\n  NavigationEventService,\r\n  NavigationService,\r\n  RouterService,\r\n  ApplicationParamService,\r\n  FilterConditionService,\r\n  { provide: UserSettingsToken, useClass: UserSettingsService },\r\n  WorkFlowMessageService,\r\n  WorkFlowMessage\r\n];\r\n\r\nexport { FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS }\r\n","/**\r\n * æ¯è¾ç¬¦\r\n */\r\nexport enum CompareType{\r\n    Equal = 0,\r\n    NotEqual = 1,\r\n    Greater = 2,\r\n    GreaterOrEqual = 3,\r\n    Less = 4,\r\n    LessOrEqual = 5,\r\n    Like = 6,\r\n    LikeStartWith = 7,\r\n    LikeEndWith = 8,\r\n    NotLike = 9,\r\n    NotLikeStartWith = 10,\r\n    NotLikeEndWith = 11,\r\n    Is = 12,\r\n    IsNot = 13,\r\n    In = 14,\r\n    NotIn = 15\r\n}","export enum ValueType{\r\n\r\n    /**\r\n     *å¼ç±»å\r\n     */\r\n    Value = 0,\r\n\r\n    /**\r\n     * è¡¨è¾¾å¼\r\n     */\r\n    Express = 1\r\n}","export enum RelationType{\r\n\r\n    Empty = 0,\r\n\r\n    /**\r\n     * ä¸\r\n     */\r\n    // And=0,\r\n    And = 1,\r\n\r\n    /**\r\n     * æ\r\n     */\r\n    // Or=1\r\n    Or = 2\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, TextValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class TextHandler implements IQueryConditionHandler {\r\n  convert(qc: QueryCondition) {\r\n    const tv = (qc.value as TextValue);\r\n    return [{\r\n      'FilterField': qc.fieldCode,\r\n      'Compare': CompareType.Like,\r\n      'Value': tv.value, // jsonè½¬ä¹ä¸encodeUriComponentä¸åï¼ä¸åºå¨æ­¤è½¬ä¹ï¼ç±jsonåé¨è½¬ä¹å³å¯\r\n      'Relation': RelationType.And,\r\n      'Expresstype': ValueType.Value\r\n    }];\r\n  }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, DateRangeValue} from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class DateRangeHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const arr = [];\r\n        const drv = (qc.value as DateRangeValue);\r\n        drv.startTime && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.GreaterOrEqual, //GreaterOrEqual\r\n            'Value' : drv.startTime,\r\n            'Relation' : RelationType.And, //and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n        drv.endTime && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.LessOrEqual, //LessOrEqual\r\n            'Value' : drv.endTime,\r\n            'Relation' : RelationType.And,//and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n\r\n        return arr;\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, DropDownListValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class DropDownHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const ddv = (qc.value as DropDownListValue);\r\n        const arr = [];\r\n        ddv.value.forEach(dv => {\r\n            arr.push({\r\n                'FilterField' : qc.fieldCode,\r\n                'Compare' : CompareType.Equal,\r\n                'Value' : dv.value,\r\n                'Relation' : RelationType.Or,\r\n                'Expresstype':ValueType.Value\r\n            });\r\n        });\r\n        arr[0]['Lbracket'] = '(';\r\n        arr[arr.length -1]['Rbracket'] = ')';\r\n        arr[arr.length -1]['Relation'] = RelationType.And;\r\n        return arr;\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, NumberRangeValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class NumberRangeHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const arr = [];\r\n        const nrv = (qc.value as NumberRangeValue);\r\n        (nrv.startValue != null) && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.GreaterOrEqual, //GreaterOrEqual\r\n            'Value' : nrv.startValue,\r\n            'Relation' : RelationType.And, //and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n        (nrv.endValue != null) && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.LessOrEqual, //LessOrEqual\r\n            'Value' : nrv.endValue,\r\n            'Relation' : RelationType.And,//and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n\r\n        return arr;\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, SmartHelpValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class SmartHelpHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const shv = (qc.value as SmartHelpValue);\r\n        if(shv.value.length == 0) return [];\r\n\r\n        const arr = [];\r\n        if(shv.isInputText || shv.valueField == null){\r\n            arr.push({\r\n                'FilterField' : qc.fieldCode,\r\n                'Compare' : CompareType.Like,\r\n                'Value' : shv.textValue,\r\n                'Relation' : RelationType.And,\r\n                'Expresstype':ValueType.Value\r\n            });\r\n            return arr;\r\n        }else{\r\n            shv.getOriginalValue().split(',').forEach(id => {\r\n                id && arr.push({\r\n                    'FilterField' : qc.fieldCode,\r\n                    'Compare' : CompareType.Equal,\r\n                    'Value' : id,\r\n                    'Relation' : RelationType.Or,\r\n                    'Expresstype':ValueType.Value\r\n                });\r\n            });\r\n            if(arr.length > 0){\r\n                arr[0]['Lbracket'] = '(';\r\n                arr[arr.length -1]['Rbracket'] = ')';\r\n                arr[arr.length -1]['Relation'] = RelationType.And;\r\n                return arr;\r\n            }else{\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, SingleYearValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class SingleYearHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const yv = (qc.value as SingleYearValue);\r\n        return [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.Equal,\r\n            'Value' : yv.yearValue,\r\n            'Relation' : RelationType.And, //and undefined\r\n            'Expresstype':ValueType.Value\r\n        }];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, CheckBoxValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class CheckBoxHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const arr = [];\r\n        const tv = (qc.value as CheckBoxValue);\r\n        if(tv.value.length == 1)\r\n            return [{\r\n                'FilterField' : qc.fieldCode,\r\n                'Compare' : CompareType.Equal,\r\n                'Value' : tv.value[0],\r\n                'Relation' : RelationType.And,\r\n                'Expresstype':ValueType.Value\r\n            }];\r\n        tv.value.forEach(tvv => {\r\n            arr.push({\r\n                'FilterField' : qc.fieldCode,\r\n                'Compare' : CompareType.Equal,\r\n                'Value' : tvv,\r\n                'Relation' : RelationType.Or,\r\n                'Expresstype':ValueType.Value\r\n            });\r\n        });\r\n        arr[0]['Lbracket'] = '(';\r\n        arr[arr.length -1]['Rbracket'] = ')';\r\n        arr[arr.length -1]['Relation'] = RelationType.And;\r\n        return arr;\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, SingleMonthValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class SingleMonthHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const mv = (qc.value as SingleMonthValue);\r\n        return [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.Equal,\r\n            'Value' : mv.monthValue,\r\n            'Relation' : RelationType.And, //and undefined\r\n            'Expresstype':ValueType.Value\r\n        }];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, MonthRangeValue} from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class MonthRangeHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const arr = [];\r\n        const mrv = (qc.value as MonthRangeValue);\r\n        mrv.startTime && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.GreaterOrEqual, //GreaterOrEqual\r\n            'Value' : mrv.startTime,\r\n            'Relation' : RelationType.And, //and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n        mrv.endTime && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.LessOrEqual, //LessOrEqual\r\n            'Value' : mrv.endTime,\r\n            'Relation' : RelationType.And,//and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n\r\n        return arr;\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, SingleDateTimeValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class SingleDateTimeHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const dtv = (qc.value as SingleDateTimeValue);\r\n        return [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.Equal,\r\n            'Value' : dtv.datetimeValue,\r\n            'Relation' : RelationType.And, //and undefined\r\n            'Expresstype':ValueType.Value\r\n        }];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, SingleNumberValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class SingleNumberHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const dtv = (qc.value as SingleNumberValue);\r\n        return [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.Equal,\r\n            'Value' : dtv.numValue,\r\n            'Relation' : RelationType.And, //and undefined\r\n            'Expresstype':ValueType.Value\r\n        }];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, SingleDateValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\nimport { format, addDays, addWeeks, addMonths, addYears, startOfMonth, endOfMonth, startOfYear, endOfYear, startOfWeek, endOfWeek, getDay } from 'date-fns'\r\nfunction getDate(dateValue, dtvFormat) {\r\n    let today = new Date()\r\n    // today.toLocaleString()\r\n    let result = []\r\n    //é¦åå¤æ­åªäºæ¯åä¸ªæ¥æï¼ä½¿ç¨equalå­å¥ä¸ä¸ªæ¥æå³å¯\r\n    if (dateValue.isFirstDay || dateValue.isLastDay) {\r\n\r\n        let switchValue = dateValue.dateType + '-' + (dateValue.isFirstDay ? 'first' : 'last')\r\n        switch (switchValue) {\r\n            case 'week-first':\r\n                if(getDay(today) === 0) {\r\n                    today = addDays(today, -1)\r\n                }\r\n                result.push(addDays(startOfWeek(today), 1))\r\n                break;\r\n            case 'week-last':\r\n                if(getDay(today) === 0) {\r\n                    today = addDays(today, -1)\r\n                }\r\n                result.push(addDays(endOfWeek(today), 1))\r\n                break;\r\n            case 'month-first':\r\n                result.push(startOfMonth(today))\r\n                break;\r\n            case 'month-last':\r\n                result.push(endOfMonth(today))\r\n                break;\r\n            case 'year-first':\r\n                result.push(startOfYear(today))\r\n                break;\r\n            case 'year-last':\r\n                result.push(endOfYear(today))\r\n                break;\r\n            default:\r\n                result.push(today)\r\n\r\n        }\r\n    } else if (dateValue.dateType === 'day' && dateValue.period === 'present') {\r\n        //ä»å¤©\r\n        result.push(today)\r\n    } else if (dateValue.dateType === 'day' && dateValue.count === 1) {\r\n        //æ¨å¤©ãæå¤©\r\n        let _date = addDays(today, dateValue.period === 'future' ? 1 : -1)\r\n        result.push(_date)\r\n    } else if (dateValue.period === 'present') {\r\n        //æ¬å¨ãæ¬æãæ¬å¹´\r\n        switch (dateValue.dateType) {\r\n            case 'week':\r\n                result.push(startOfWeek(today), endOfWeek(today))\r\n                break;\r\n            case 'month':\r\n                result.push(startOfMonth(today), endOfMonth(today))\r\n                break;\r\n            case 'year':\r\n                result.push(startOfYear(today), endOfYear(today))\r\n                break;\r\n            default:\r\n                result.push(today)\r\n        }\r\n\r\n    } else {\r\n        let switchValue = dateValue.dateType + '-' + dateValue.period\r\n        switch (switchValue) {\r\n            case 'day-previous':\r\n                result.push(addDays(today, dateValue.count * -1), addDays(today, -1))\r\n                break;\r\n            case 'day-future':\r\n                result.push(addDays(today, 1), addDays(today, dateValue.count))\r\n                break;\r\n            case 'week-previous':\r\n                result.push(addWeeks(today, dateValue.count * -1), addDays(today, -1))\r\n                break;\r\n            case 'week-future':\r\n                result.push(addDays(today, 1), addWeeks(today, dateValue.count))\r\n                break;\r\n            case 'month-previous':\r\n                result.push(addMonths(today, dateValue.count * -1), addDays(today, -1))\r\n                break;\r\n            case 'month-future':\r\n                result.push(addDays(today, 1), addMonths(today, dateValue.count))\r\n                break;\r\n            case 'year-previous':\r\n                result.push(addYears(today, dateValue.count * -1), addDays(today, -1))\r\n                break;\r\n            case 'year-future':\r\n                result.push(addDays(today, 1), addYears(today, dateValue.count))\r\n                break;\r\n            default:\r\n                result.push(today)\r\n        \r\n        }\r\n    }\r\n\r\n    result = result.map(item => format(item, dtvFormat.returnFormat || 'yyyy-MM-dd'))\r\n    return result\r\n\r\n};\r\nexport class SingleDateHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const arr = []\r\n        const dtv = (qc.value as SingleDateValue);\r\n        if(typeof(dtv.dateValue) !== 'string') {\r\n            let _dateValue = getDate(dtv.dateValue, qc.control)\r\n            _dateValue.length === 1 && arr.push({\r\n                'FilterField' : qc.fieldCode,\r\n                'Compare' : CompareType.Equal,\r\n                'Value' : _dateValue[0],\r\n                'Relation' : RelationType.And, //and undefined\r\n                'Expresstype':ValueType.Value\r\n            })\r\n            _dateValue.length === 2 && arr.push({\r\n                'FilterField' : qc.fieldCode,\r\n                'Compare' : CompareType.GreaterOrEqual, //GreaterOrEqual\r\n                'Value' : _dateValue[0],\r\n                'Relation' : RelationType.And, //and\r\n                'Expresstype': ValueType.Value\r\n            }, {\r\n                'FilterField' : qc.fieldCode,\r\n                'Compare' : CompareType.LessOrEqual, //LessOrEqual\r\n                'Value' : _dateValue[1],\r\n                'Relation' : RelationType.And,//and\r\n                'Expresstype': ValueType.Value\r\n            });\r\n            \r\n        } else {\r\n            arr.push({\r\n                'FilterField' : qc.fieldCode,\r\n                'Compare' : CompareType.Equal,\r\n                'Value' : dtv.dateValue,\r\n                'Relation' : RelationType.And, //and undefined\r\n                'Expresstype':ValueType.Value\r\n            })\r\n        }\r\n        return arr;\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, ComboLookUpValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class ComboLookUpHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const cluv = (qc.value as ComboLookUpValue);\r\n        if(cluv.value.length == 0 || !cluv.valueField){\r\n            return [];\r\n        }else{\r\n            const arr = [];\r\n            cluv.getOriginalValue().split(',').forEach(id => {\r\n                id && arr.push({\r\n                    'FilterField' : qc.fieldCode,\r\n                    'Compare' : CompareType.Equal,\r\n                    'Value' : id,\r\n                    'Relation' : RelationType.Or,\r\n                    'Expresstype':ValueType.Value\r\n                });\r\n            });\r\n            if(arr.length > 0){\r\n                arr[0]['Lbracket'] = '(';\r\n                arr[arr.length -1]['Rbracket'] = ')';\r\n                arr[arr.length -1]['Relation'] = RelationType.And;\r\n                return arr;\r\n            }else{\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, RadioValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class RadioHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const arr = [];\r\n        const rv = (qc.value as RadioValue);\r\n        return [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.Equal,\r\n            'Value' : rv.value,\r\n            'Relation' : RelationType.And,\r\n            'Expresstype':ValueType.Value\r\n        }];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\nimport { QueryCondition, InputGroupValue } from \"@farris/component-querycondition\";\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\n\r\nexport class InputGroupHandler implements IQueryConditionHandler {\r\n  convert(qc: QueryCondition) {\r\n    const igv = (qc.value as InputGroupValue);\r\n    const arr = [];\r\n\r\n    if (igv.isInputText || igv.textField == null) {\r\n      arr.push({\r\n        'FilterField': qc.fieldCode,\r\n        'Compare': CompareType.Like,\r\n        'Value': igv.textValue,//encodeURIComponent(igv.textValue),\r\n        'Relation': RelationType.And,\r\n        'Expresstype': ValueType.Value\r\n      });\r\n      return arr;\r\n    }\r\n    else {\r\n      igv.getOriginalValue().split(',').forEach(itemValue => {\r\n        itemValue && arr.push({\r\n          'FilterField': qc.fieldCode,\r\n          'Compare': CompareType.Equal,\r\n          'Value': itemValue,\r\n          'Relation': RelationType.Or,\r\n          'Expresstype': ValueType.Value\r\n        });\r\n      });\r\n      if (arr.length > 0) {\r\n        arr[0]['Lbracket'] = '(';\r\n        arr[arr.length - 1]['Rbracket'] = ')';\r\n        arr[arr.length - 1]['Relation'] = RelationType.And;\r\n        return arr;\r\n      } else {\r\n        return [];\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { ControlType } from \"@farris/component-querycondition\";\r\nimport { IQueryConditionHandler } from \"./handlers/iquerycondition.handler\";\r\nimport { TextHandler } from \"./handlers/text.handler\";\r\nimport { DateRangeHandler } from \"./handlers/daterage.handler\";\r\nimport { DropDownHandler } from \"./handlers/dropdown.handler\";\r\nimport { NumberRangeHandler } from \"./handlers/numberrage.handler\";\r\nimport { SmartHelpHandler } from \"./handlers/smarthelp.handler\";\r\nimport { SingleYearHandler } from './handlers/single-year.handler';\r\nimport { CheckBoxHandler } from './handlers/checkbox.handler';\r\nimport { SingleMonthHandler } from './handlers/single-month.handler';\r\nimport { MonthRangeHandler } from './handlers/monthrange.handler';\r\nimport { SingleDateTimeHandler } from './handlers/single-date-time.handler';\r\nimport { SingleNumberHandler } from './handlers/single-number.handler';\r\nimport { SingleDateHandler } from './handlers/single-date.handler';\r\nimport { ComboLookUpHandler } from './handlers/combolookup.handler';\r\nimport { RadioHandler } from './handlers/radio.handler';\r\nimport { InputGroupHandler } from './handlers/inputgroup.handler';\r\n\r\nexport class QueryConditionHandlerFactory {\r\n\r\n    private static _instance: QueryConditionHandlerFactory = null;\r\n    private queryConditionHandlerMapping: Map<ControlType, IQueryConditionHandler> = new Map<ControlType, IQueryConditionHandler>();\r\n    private constructor(){\r\n        this.queryConditionHandlerMapping.set(ControlType.Text, new TextHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.InputGroup, new InputGroupHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.DateRange, new DateRangeHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.DateTimeRange, new DateRangeHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.DropDownList, new DropDownHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.NumberRange, new NumberRangeHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.SmartHelp, new SmartHelpHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.SingleYear, new SingleYearHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.BoolCheck, new CheckBoxHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.SingleMonth, new SingleMonthHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.MonthRange, new MonthRangeHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.SingleDateTime, new SingleDateTimeHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.SingleNumber, new SingleNumberHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.SingleDate, new SingleDateHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.ComboLookUp, new ComboLookUpHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.Radio, new RadioHandler());\r\n    }\r\n    public static getInstance(){\r\n        if(!QueryConditionHandlerFactory._instance){\r\n            QueryConditionHandlerFactory._instance = new QueryConditionHandlerFactory();\r\n        }\r\n        return QueryConditionHandlerFactory._instance;\r\n    }\r\n\r\n    getHandler(controlType: ControlType): IQueryConditionHandler{\r\n        return this.queryConditionHandlerMapping.get(controlType);\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { QueryCondition } from '@farris/component-querycondition';\r\nimport { IQueryConditionHandler } from './handlers/iquerycondition.handler';\r\nimport { QueryConditionHandlerFactory } from './querycondition.handler.factory';\r\nimport { FrameContext } from '@farris/devkit';\r\nimport { IQuerySolutionHandler,QuerySolutionComponent } from '@gsp-cmp/querysolution';\r\nimport { FrameworkSessionService } from '@farris/bef';\r\n\r\n@Injectable()\r\nexport class QuerySolutionService implements IQuerySolutionHandler {\r\n\r\n  constructor(\r\n    private frameContext: FrameContext,\r\n    private frameworkSessionService: FrameworkSessionService\r\n  ) {\r\n\r\n  }\r\n\r\n  getUserSessionId(): string {\r\n    return this.frameworkSessionService.getUserSessionId();\r\n  }\r\n\r\n  public setFilterConditions(params: Array<QueryCondition>): void {\r\n    let queryConditionHandler: IQueryConditionHandler;\r\n    const filterConditionList = [];\r\n    params.forEach(qc => {\r\n      if (!qc.value.isEmpty()) {\r\n        queryConditionHandler = QueryConditionHandlerFactory.getInstance().getHandler(qc.control.getControlType());\r\n        queryConditionHandler && filterConditionList.push(...queryConditionHandler.convert(qc));\r\n      }\r\n    });\r\n    //è®¾ç½®å°NgCommand params.filterå±æ§ä¸ï¼{UISTATE~/root-component/filterConditionList}\r\n    this.frameContext.uiState['filterConditionList'] = JSON.stringify(filterConditionList);\r\n    // const originalConditions = this.getOriginalQueryConditions(filterConditionList);\r\n    this.frameContext.uiState['originalFilterConditionList'] = JSON.stringify(filterConditionList);\r\n  }\r\n\r\n  public setCurrentQueryConditions(conditions: QueryCondition[]): void {\r\n    this.frameContext.uiState['currentQueryConditions'] = conditions;\r\n  }\r\n  /**\r\n   * è¿åè¿æ»¤æ¡ä»¶ä¸­çencode\r\n   * @param conditions æ¥è¯¢æ¹æ¡æé å®çè¿æ»¤æ¡ä»¶\r\n   */\r\n  // private getOriginalQueryConditions(conditions: Array<any>): Array<any> {\r\n  //   conditions = JSON.parse(JSON.stringify(conditions));\r\n  //   if (conditions && Array.isArray(conditions) && conditions.length > 0) {\r\n  //     conditions = conditions.map((item) => {\r\n  //       if (item.hasOwnProperty('Value')) {\r\n  //         item.Value = decodeURIComponent(item.Value);\r\n  //       } else if (item.hasOwnProperty('value')) {\r\n  //         const value = item.value;\r\n  //         delete item.value;\r\n  //         item.Value = decodeURIComponent(value);\r\n  //       }\r\n  //       return item;\r\n  //     });\r\n  //   }\r\n  //   return conditions;\r\n  // }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AppContext, FrameContext } from '@farris/devkit';\r\nimport { of } from 'rxjs';\r\nimport { concatMap, tap, delay } from 'rxjs/operators';\r\n\r\n/**\r\n * ç»æè¡¨åç¼è¾ç¶ææå¡\r\n */\r\n@Injectable()\r\nclass EndEditService {\r\n  constructor(private frameContext: FrameContext) {\r\n  }\r\n  /**\r\n   * ç»æç¼è¾\r\n   */\r\n  public endEdit() {\r\n    const appContext: AppContext = this.frameContext && this.frameContext.getFormAppContext();\r\n    return of(null).pipe(\r\n      tap(() => {\r\n        if (appContext) {\r\n          appContext.messagePipe.next({ type: 'endEdit' });\r\n        }\r\n      }),\r\n      // todo: ä¸åºè¯¥ä½¿ç¨delayï¼åºè¯¥ä¸²æµ\r\n      delay(5)\r\n    );\r\n  }\r\n}\r\nexport { EndEditService };\r\n","import { Injectable } from '@angular/core';\r\nimport { ViewModel } from '@farris/devkit';\r\nimport { BefRepository } from '@farris/bef';\r\nimport { of, Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class RemoteSummaryService {\r\n  constructor(private viewModel: ViewModel) { }\r\n  /**\r\n   * æå¡å¨ç«¯åè®¡\r\n   * @param methodName æå¡å¨ç«¯åè®¡èªå®ä¹å¨ä½åç§°\r\n   * @param filters è¿æ»¤æ¡ä»¶\r\n   */\r\n  public summary(methodName: string, filters: any) {\r\n    const repository = this.viewModel.frameContext.repository as BefRepository<any> || null;\r\n    if (repository) {\r\n      const proxy = repository.proxy;\r\n      if (proxy && typeof proxy[methodName] === 'function') {\r\n        return proxy[methodName](filters) as Observable<any>;\r\n      }\r\n    }\r\n    return of(null);\r\n  }\r\n}\r\n","import { Injectable, Injector, Optional } from '@angular/core';\r\nimport { BindingList, ViewModel, BindingObject, Repository, Entity, FrameContext, BindingData, AppContext, BindingProperty, DataTypeInfo, createEntities, EntityList } from '@farris/devkit';\r\nimport { from, EMPTY, concat, of, Subject, Observable } from 'rxjs';\r\nimport { concatMap, catchError, tap, switchMap, last, map, delay } from 'rxjs/operators';\r\nimport { BefRepository, ResponseInfo } from '@farris/bef';\r\nimport { BatchEditDialogService } from '@farris/ui-batch-edit-dialog';\r\nimport { DateTimeHelperService } from '@farris/ui-common/date';\r\nimport { ComponentManagerService } from './component-manager.service';\r\nimport { FormLoadingService } from './form-loading/form-loading.service';\r\nimport { LanguageService } from './languag.service';\r\nimport { FormNotifyService } from './form-notify.service';\r\n\r\n// tslint:disable: max-line-length\r\n/**\r\n * æ¹éç¼è¾æå¡\r\n */\r\n@Injectable()\r\nexport class BatchEditService {\r\n  private formLoadingService: FormLoadingService;\r\n  private onHelpClose: Subject<any>;\r\n  constructor(\r\n    private injector: Injector,\r\n    private componentManagerService: ComponentManagerService,\r\n    private viewModel: ViewModel,\r\n    private repository: Repository<any>,\r\n    private batchEditDialogService: BatchEditDialogService,\r\n    private dateService: DateTimeHelperService,\r\n    private languageService: LanguageService,\r\n    private formNotifyService: FormNotifyService\r\n  ) {\r\n    this.formLoadingService = this.injector.get<FormLoadingService>(FormLoadingService, null);\r\n    if (!this.languageService) {\r\n      this.languageService = LanguageService.getInstance();\r\n    }\r\n    if (!this.formNotifyService) {\r\n      this.formNotifyService = this.injector.get<FormNotifyService>(FormNotifyService, null);\r\n    }\r\n    this.onHelpClose = new Subject<any>();\r\n    this.onHelpClose.subscribe(result => {\r\n      const { frameId = '', mapFields = '', data = [] } = result || {};\r\n      this.onHelpCloseHandler(frameId, mapFields, data);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * æå¼æ¹éç¼è¾å¯¹è¯æ¡\r\n   * @param frameId frameId\r\n   */\r\n  public openBatchEditDialog(frameId: string) {\r\n    if (!frameId) {\r\n      throw new Error('frameId is required.');\r\n    }\r\n    if (this.batchEditDialogService) {\r\n      let columns = [];\r\n      if (this.viewModel) {\r\n        const gridFrameContext: FrameContext = this.viewModel.frameContext.root.appContext.frameContextManager.getFrameContextById(frameId);\r\n        const gridViewModel = gridFrameContext.viewModel;\r\n        if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumnsName')) {\r\n          // tslint:disable-next-line: no-string-literal\r\n          const gridColumnsAttrName = gridViewModel['dataGridColumnsName'];\r\n          columns = gridViewModel[gridColumnsAttrName];\r\n        } else if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumns')) {\r\n          columns = gridViewModel['dataGridColumns'];\r\n        }\r\n        const ids: string[] = gridViewModel.uiState['ids'] || [];\r\n        if (!ids || ids.length < 1) {\r\n          this.formNotifyService.warning(this.languageService.plsCheckBatchEditRows, { hideTitle: true });\r\n          return EMPTY;\r\n        }\r\n        const dialogRef: any = this.batchEditDialogService.batchEdit(columns, {\r\n          rows: ids.length,\r\n          onConfirm: (inputs: Array<any>) => {\r\n            if (Array.isArray(ids) && ids.length > 0) {\r\n              // console.log('openBatchEditDialog', inputs);\r\n              const appContext = this.viewModel.frameContext.appContext;\r\n              appContext.changeDetectionController.detach();\r\n              inputs.forEach(input => {\r\n                this.updateBindingData(input, ids);\r\n              });\r\n              appContext.changeDetectionController.reattach();\r\n            }\r\n            dialogRef.close();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * æå¼éèå¸®å©\r\n   * @param helpId å¸®å©id\r\n   */\r\n  public openHiddenHelp(helpId: string) {\r\n    if (!helpId) {\r\n      throw new Error('Argument error,helpId can`t be empty');\r\n    }\r\n    const componentManagerService = this.componentManagerService.getControl(helpId);\r\n    if (componentManagerService) {\r\n      componentManagerService.showDialog();\r\n    } else {\r\n      throw new Error(`the component which id is ${helpId} can't be found!`);\r\n    }\r\n  }\r\n  /**\r\n   * æ¸ç©ºå¸®å©å¾éï¼åªè½æè½½å°å¸®å©åäºä»¶ï¼\r\n   */\r\n  public clearHelpSelections() {\r\n    const self: any = this;\r\n    const helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;\r\n    if (helpElement) {\r\n      helpElement.displayValue = '';\r\n    }\r\n  }\r\n  /**\r\n   * å¾éå½åè¡\r\n   * @param frameId frameId\r\n   * @param mapFields å­æ®µæ å°\r\n   * @param primaryKeyValue å¸®å©ä¸»é®å­æ®µ\r\n   */\r\n  public checkCurrentRow(frameId: string, mapFields: string, primaryKeyValue: string) {\r\n    const self: any = this;\r\n    const helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;\r\n    if (!primaryKeyValue) {\r\n      primaryKeyValue = 'id';\r\n    }\r\n    const mappings = JSON.parse(mapFields);\r\n    if (helpElement) {\r\n      frameId = frameId || this.viewModel.frameContext.frameId;\r\n      if (frameId) {\r\n        const frameContext = this.getFrameContextById(frameId);\r\n        if (frameContext) {\r\n          const bindingPath = frameContext.viewModel.bindingPath;\r\n          if (bindingPath) {\r\n            const bindingPaths = bindingPath.split('/').filter(p => p);\r\n            const bindingList = frameContext.bindingData.getValue(bindingPaths) as BindingList;\r\n            const currentRow = bindingList.currentItem;\r\n            const path = mappings[primaryKeyValue];\r\n            if (path) {\r\n              const value = this.getValueByPath(currentRow, path);\r\n              helpElement.displayValue = value;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * ä»¥å¸®å©å¾éæ°æ®ä½ä¸ºä¾æ®ï¼æ¹éæ°å¢ä¸»è¡¨æ°æ®\r\n   * @param frameId ä¸»è¡¨æå¨frameçid\r\n   * @param mapFields å¸®å©å­æ®µä¸ä¸»è¡¨å­æ®µæ å°\r\n   * @description ä»¥å¸®å©å¾éæ°æ®ä½ä¸ºä¾æ®ï¼æ¹éæ°å¢ä¸»è¡¨æ°æ®\r\n   */\r\n  public batchAppend(frameId: string, mapFields: string) {\r\n    const self: any = this;\r\n    const result = self.context && self.context.eventParam || [];\r\n    if (!mapFields) {\r\n      throw new Error('mapFields can`t be empty.');\r\n    }\r\n    if (result && Array.isArray(result) && result.length > 0) {\r\n      const mappings = JSON.parse(mapFields);\r\n      // ä¸æ¯bindingPathåæframeIdå¤ç\r\n      let bindingPath = '/';\r\n      const appContext = this.injector.get<AppContext>(AppContext, null);\r\n      if (appContext) {\r\n        const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\r\n        if (frameContext) {\r\n          bindingPath = frameContext.viewModel.bindingPath || '/';\r\n        } else {\r\n          throw new Error('frameId is invalid!');\r\n        }\r\n      }\r\n      const defaultValues = [];\r\n      result.forEach((item) => {\r\n        const defaultValue = {};\r\n        Object.keys(mappings).forEach((prop: string) => {\r\n          const value = this.getValueByPath(item, prop);\r\n          const fields = mappings[prop];\r\n          const groups: any[] = fields.split(',').filter(p => p);\r\n          groups.forEach(group => {\r\n            const paths = group.split('.').filter(p => p);\r\n            this.setValueByPath(defaultValue, paths.join('.'), value);\r\n          });\r\n        });\r\n        defaultValues.push(defaultValue);\r\n      });\r\n      this.formLoadingService.show();\r\n      return this.repository.batchAppend(defaultValues).pipe(\r\n        tap(() => this.formLoadingService.hide()),\r\n        map(() => true)\r\n      );\r\n    }\r\n    return of(true);\r\n  }\r\n  /**\r\n   * ä»¥å¸®å©å¾éæ°æ®ä½ä¸ºä¾æ®ï¼æ¹éæ°å¢ä»è¡¨/ä»ä»è¡¨\r\n   * @param frameId ä»è¡¨/ä»ä»è¡¨æå¨frameçid\r\n   * @param mapFields å¸®å©å­æ®µä¸ä»è¡¨/ä»ä»è¡¨å­æ®µæ å°\r\n   * @description ä»¥å¸®å©å¾éæ°æ®ä½ä¸ºä¾æ®ï¼æ¹éæ°å¢ä»è¡¨/ä»ä»è¡¨\r\n   */\r\n  public batchAppendByPathBasedOnHelpSelections(frameId: string, mapFields: string) {\r\n    const self: any = this;\r\n    const result = self.context && self.context.eventParam || [];\r\n    if (!mapFields) {\r\n      throw new Error('mapFields can`t be empty.');\r\n    }\r\n    if (result && Array.isArray(result) && result.length > 0) {\r\n      const mappings = JSON.parse(mapFields);\r\n      // ä¸æ¯bindingPathåæframeIdå¤ç\r\n      let bindingPath = '/';\r\n      const appContext = this.injector.get<AppContext>(AppContext, null);\r\n      if (appContext) {\r\n        const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\r\n        if (frameContext) {\r\n          bindingPath = frameContext.viewModel.bindingPath || '/';\r\n        } else {\r\n          throw new Error('frameId is invalid!');\r\n        }\r\n      }\r\n      const defaultValues = [];\r\n      result.forEach((item) => {\r\n        const defaultValue = {};\r\n        Object.keys(mappings).forEach((prop: string) => {\r\n          const value = this.getValueByPath(item, prop);\r\n          const fields = mappings[prop];\r\n          const groups: any[] = fields.split(',').filter(p => p);\r\n          groups.forEach(group => {\r\n            const paths = group.split('.').filter(p => p);\r\n            this.setValueByPath(defaultValue, paths.join('.'), value);\r\n          });\r\n        });\r\n        defaultValues.push(defaultValue);\r\n      });\r\n      this.formLoadingService.show();\r\n      const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\r\n      return this.repository.batchAppendByPath(path, defaultValues).pipe(\r\n        tap(() => this.formLoadingService.hide()),\r\n        map(() => true)\r\n      );\r\n    }\r\n    return of(true);\r\n  }\r\n  /**\r\n   * è¡åå¸®å©å¤éæ¹éæ°å¢ææ¿æ¢å­è¡¨æ°æ®\r\n   * @param frameId frameId, optional,ä¸ºç©ºæ¶ä½¿ç¨å½ä»¤æ§è¡æ¶æå¨çä¸ä¸æ\r\n   * @param mapFields å­æ®µæ å°\r\n   * @param primaryKey å¸®å©ä¸»é®å­æ®µï¼é»è®¤ä¸ºid\r\n   * @returns \r\n   */\r\n  public batchAppendBasedOnRowHelpSelections(frameId: string, mapFields: string) {\r\n    const self: any = this;\r\n    let result: any[] = self.context && self.context.eventParam || [];\r\n    if (!mapFields) {\r\n      return of(true);\r\n    }\r\n    const mappings = JSON.parse(mapFields);\r\n    if (!mappings || !mappings.hasOwnProperty('id')) {\r\n      return of(true);\r\n    }\r\n    frameId = frameId || this.viewModel.frameContext.frameId;\r\n    if (!frameId) {\r\n      return of(true);\r\n    }\r\n    const frameContext = this.getFrameContextById(frameId);\r\n    if (!frameContext) {\r\n      return of(true);\r\n    }\r\n    setTimeout(() => {\r\n      this.endEdit(frameContext).subscribe(() => {\r\n        setTimeout(() => {\r\n          if (result && Array.isArray(result) && result.length > 0) {\r\n            const bindingPath = frameContext.viewModel.bindingPath || '/';\r\n            const bindingPaths = bindingPath.split('/').filter(p => p);\r\n            const defaultValues = [];\r\n            // è·åå½åè¡\r\n            const bindingList: BindingList = frameContext.bindingData.getValue(bindingPaths) as BindingList;\r\n            const currentRow = bindingList.currentItem;\r\n            const currentRowId = bindingList.currentId;\r\n            const currentEntity = this.getEntityByPath(frameContext, bindingPaths, currentRowId);\r\n            const headItem = result[0];\r\n            // å¦æä»å¾éä¸æ¡ï¼ååºæ¿æ¢å½åè¡çæ å°\r\n            if (result.length === 1) {\r\n              this.mappingRow(headItem, mappings, currentEntity, bindingPath);\r\n              return of(true);\r\n            } else {\r\n              const idMapField = mappings['id'];\r\n              const sourceItemId = this.getValueByPath(currentEntity, idMapField);\r\n              // å¦æå½åè¡æ²¡ææ å°æå¾éç»æä¸­æ¾ä¸å°å½åè¡çæ å°\r\n              if (!sourceItemId || result.findIndex(item => item[bindingList.primaryKey] === sourceItemId) === -1) {\r\n                // éæ°æ å°å½åè¡\r\n                this.mappingRow(headItem, mappings, currentEntity, bindingPath);\r\n                result = result.slice(1);\r\n              } else if (sourceItemId) {\r\n                const index = result.findIndex(item => item[bindingList.primaryKey] === sourceItemId);\r\n                // éæ°æ å°å½åè¡\r\n                this.mappingRow(result[index], mappings, currentEntity, bindingPath);\r\n                result.splice(index, 1);\r\n              }\r\n              // å½åè¡å¤çå®æ\r\n              // å¤çæªæ å°çè¡\r\n              const emptyRows = bindingList.toArray().filter(bindingObject => {\r\n                const id = this.getValueByPath(bindingObject, mappings[bindingList.primaryKey]);\r\n                return !id;\r\n              });\r\n              if (emptyRows && emptyRows.length > 0) {\r\n                let rows = result;\r\n                if (result.length > emptyRows.length) {\r\n                  rows = result.slice(0, emptyRows.length);\r\n                  result = result.slice(emptyRows.length);\r\n                } else {\r\n                  result = [];\r\n                }\r\n                rows.forEach((item, index) => {\r\n                  const targetItem = emptyRows[index];\r\n                  const entity = this.getEntityByPath(frameContext, bindingPaths, targetItem.primaryKeyValue);\r\n                  this.mappingRow(item, mappings, entity, bindingPath);\r\n                });\r\n              }\r\n              // å¤çå©ä½å¾é\r\n              result.forEach((item) => {\r\n                const defaultValue = {};\r\n                Object.keys(mappings).forEach((prop: string) => {\r\n                  const value = this.getValueByPath(item, prop);\r\n                  const fields = mappings[prop];\r\n                  const groups: any[] = fields.split(',').filter(p => p);\r\n                  groups.forEach(group => {\r\n                    const paths = group.split('.').filter(p => p);\r\n                    this.setValueByPath(defaultValue, paths.join('.'), value);\r\n                  });\r\n                });\r\n                defaultValues.push(defaultValue);\r\n              });\r\n              if (defaultValues.length > 0) {\r\n                this.formLoadingService.show();\r\n                const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\r\n                this.repository.batchAppendByPath(path, defaultValues).pipe(\r\n                  tap(() => this.formLoadingService.hide())\r\n                ).subscribe();\r\n              }\r\n            }\r\n          }\r\n        }, 350);\r\n      });\r\n    }, 50);\r\n    return of(true);\r\n  }\r\n  /**\r\n   * å¤å¶ä¸»è¡¨æ°æ®\r\n   * @param id è¦å¤å¶çæ°æ®id\r\n   * @param fields è¦å¤å¶çå­æ®µ\r\n   * @description ä»æ¯æå¤å¶ä¸»è¡¨æ°æ®\r\n   * @deprecated è¯¥æ¹æ³å·²è¢«åºå¼ï¼è¯·ä½¿ç¨cloneæ¹æ³æ¿ä»£ã\r\n   */\r\n  public copy(id: string): Observable<any> {\r\n    if (!id) {\r\n      this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    const baseUri = befRepository.restService.baseUri;\r\n    const url = `${baseUri}/service/copymainobjvoaction`;\r\n    const requestInfo = befRepository.restService.buildRequestInfo();\r\n    const body = {\r\n      requestInfo,\r\n      dataID: id\r\n    };\r\n    const options = {\r\n      body\r\n    };\r\n    this.formLoadingService.show();\r\n    return befRepository.proxy.request(url, 'PUT', null, options).pipe(\r\n      tap(() => {\r\n        this.formLoadingService.hide();\r\n      }),\r\n      map((responseInfo: ResponseInfo) => {\r\n        const returnValue = responseInfo.returnValue;\r\n        const entity = this.repository.buildEntity(returnValue);\r\n        this.repository.entityCollection.addEntity(entity);\r\n        return entity;\r\n      }),\r\n    );\r\n  }\r\n  /**\r\n   * å¤å¶æ°æ®ï¼æ¯æä¸»è¡¨ãä»è¡¨ãä»ä»è¡¨ï¼\r\n   * @param id è¦å¤å¶çè¡\r\n   * @param path è¯·æ±è·¯å¾\r\n   * @returns \r\n   */\r\n  public clone(id: string, path: string) {\r\n    if (!id) {\r\n      this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    if (!path) {\r\n      this.formNotifyService.warning(this.languageService.pathIsRequired, { hideTitle: true });\r\n      return EMPTY;\r\n    }\r\n    if (!path.startsWith('/')) {\r\n      path = '/' + path;\r\n    }\r\n    path = path.toLowerCase();\r\n    const bindingPath = this.viewModel.bindingPath;\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    const baseUri = befRepository.restService.baseUri;\r\n    const url = `${baseUri}${path}`;\r\n    const requestInfo = befRepository.restService.buildRequestInfo();\r\n    const ids = this.buildIds(bindingPath);\r\n    ids.push(id);\r\n    const body = {\r\n      requestInfo,\r\n      dataID: ids.join(',')\r\n    };\r\n    const options = {\r\n      body\r\n    };\r\n    this.formLoadingService.show();\r\n    return befRepository.proxy.request(url, 'PUT', null, options).pipe(\r\n      tap(() => {\r\n        this.formLoadingService.hide();\r\n      }),\r\n      map((responseInfo: ResponseInfo) => {\r\n        const returnValue = responseInfo.returnValue;\r\n        let entity = null;\r\n        if (bindingPath.split('/').filter(p => p).length === 0) {\r\n          entity = this.repository.buildEntity(returnValue);\r\n          this.repository.entityCollection.addEntity(entity, true);\r\n        } else {\r\n          const fpath = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\r\n          entity = befRepository.entityManager.appendEntityByPath(fpath, returnValue, returnValue, true);\r\n        }\r\n        return entity;\r\n      }),\r\n    );\r\n  }\r\n\r\n  //#region æ§çå®ç°\r\n\r\n  /**\r\n   * å¤å¶è¡\r\n   * @param frameId frameId\r\n   * @param ignoreFields å¤å¶æ¶å¿½ç¥å­æ®µ\r\n   * @param repeat éå¤å¤å¶æ¬¡æ°ï¼é»è®¤ä¸º1\r\n   */\r\n  public copyRow(frameId: string, ignoreFields: string, repeat: number = 1) {\r\n    if (typeof repeat !== 'number') {\r\n      repeat = parseInt(repeat, 10);\r\n    }\r\n    if (repeat < 1) {\r\n      throw new Error('ArgumentError: repeat must >= 1');\r\n    }\r\n    // è·åå½åè¡\r\n    const frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);\r\n    const primaryValue = frameContext.bindingData.list.currentId;\r\n    const bindingPath = frameContext.viewModel.bindingPath || '/';\r\n    let bindingData = null;\r\n    let currentItem: BindingObject = null;\r\n    if (bindingPath === '/') {\r\n      // ä¸»è¡¨ç´æ¥åå½åè¡\r\n      currentItem = frameContext.bindingData.list.currentItem;\r\n    } else {\r\n      // åä»è¡¨/ä»ä»è¡¨å½åè¡\r\n      const paths = bindingPath.split('/').filter(p => p);\r\n      currentItem = (frameContext.bindingData.getValue(paths) as BindingList).currentItem;\r\n    }\r\n    bindingData = currentItem.toJSON();\r\n    if (!currentItem.primaryKeyValue) {\r\n      if (this.formNotifyService) {\r\n        this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });\r\n      }\r\n      return EMPTY;\r\n    }\r\n    const ignoreFieldsArray = ignoreFields.split(',').filter(item => item);\r\n\r\n    const sources = new Array(repeat);\r\n    return from(sources).pipe(\r\n      concatMap(() => {\r\n        let action$ = null;\r\n        if (bindingPath !== '/') {\r\n          const fullPath = this.buildPath(bindingPath, primaryValue);\r\n          action$ = this.repository.appendByPath(fullPath);\r\n        } else {\r\n          action$ = this.repository.append();\r\n        }\r\n        return action$.pipe(\r\n          tap((entity: Entity) => {\r\n            // ä¿®æ­£å®ä½ä¸»é®\r\n            bindingData[entity.primaryKey] = entity.primaryValue;\r\n            // å¿½ç¥æå®å­æ®µ\r\n            ignoreFieldsArray.forEach((field: string) => {\r\n              const extractedFields = field.split('.').filter(item => item);\r\n              if (extractedFields.length === 1) {\r\n                delete bindingData[field];\r\n              }\r\n              const parent = extractedFields.slice(0, -1).reduce((prev, current, index) => {\r\n                return prev[current];\r\n              }, bindingData);\r\n              delete parent[extractedFields[extractedFields.length - 1]];\r\n            });\r\n            bindingData = Object.assign({}, entity.toJSON(), bindingData);\r\n            entity.load(bindingData, { loadChild: false });\r\n          }),\r\n          catchError(() => {\r\n            return EMPTY;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * å¢éå¤éå¸®å©æ¹éèµå¼å¸®å©åäºä»¶\r\n   * @param frameId frameId\r\n   * @param mapFields å­æ®µæ å°\r\n   * @param associatedField å³èå­æ®µ\r\n   */\r\n  public afterIncrementalSelectHelpClose(frameId: string, mapFields: string, associatedField: string) {\r\n    const self: any = this;\r\n    const result = self.context && self.context.eventParam || [];\r\n    // tslint:disable-next-line: max-line-length\r\n    // const mapping = '{\"id\":\"userRef.userRef\", \"name\":\"name\", \"sex\":\"sex\",\"age\":\"userRef.userRef_Age\",\"address\":\"userRef.userRef_Address\",\"birthday\":\"userRef.userRef_Birthday\",\"height\":\"userRef.userRef_Height\",\"isMarried\":\"userRef.userRef_IsMarried\"}';\r\n    if (!associatedField) {\r\n      throw new Error('associated field can`t be empty.');\r\n    }\r\n    if (!mapFields) {\r\n      throw new Error('mapFields can`t be empty.');\r\n    }\r\n    const mappings = JSON.parse(mapFields);\r\n    const foreignKey = associatedField;\r\n    // å°éæ©äººåä¿å­å°uistateä¸­\r\n    const rootFrameContext = this.viewModel.frameContext.root;\r\n    // ä¸æ¯bindingPathåæframeIdå¤ç\r\n    let bindingPath = '/';\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    if (appContext) {\r\n      const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\r\n      if (frameContext) {\r\n        bindingPath = frameContext.viewModel.bindingPath || '/';\r\n      } else {\r\n        throw new Error('frameId is invalid!');\r\n      }\r\n    }\r\n    // tslint:disable-next-line: no-string-literal\r\n    rootFrameContext.uiState['selections'] = result;\r\n    if (result && Array.isArray(result)) {\r\n      // æ ¹æ®bindingPathè·åbindingdataä¸­ç°ææ°æ®\r\n      const bindingPaths = bindingPath.split('/').filter(item => item);\r\n      const currentData: BindingList = this.viewModel.bindingData.getValue(bindingPaths);\r\n      const currentDataArray = currentData.toArray();\r\n      // æ¾å°resultä¸­æï¼ä½bindingDataä¸­æ²¡æçï¼ä¸ºå¾æ°å¢é¡¹\r\n      const appends = [];\r\n      result.reduce((prev: Array<any>, item) => {\r\n        const itemId = item && item[currentData.primaryKey] || null;\r\n        const isExist = currentDataArray.find((bindingObject: BindingObject) => bindingObject[foreignKey][foreignKey] === itemId);\r\n        if (!isExist) {\r\n          prev.push(item);\r\n        }\r\n        return prev;\r\n      }, appends);\r\n\r\n      // æ¾å°bindingDataä¸­æï¼resultä¸­æ²¡æçï¼ä¸ºå¾å é¤é¡¹\r\n      const removes = [];\r\n      currentDataArray.reduce((results: any, item: BindingObject) => {\r\n        const index = result.findIndex(selectItem => selectItem[currentData.primaryKey] === item[foreignKey][foreignKey]);\r\n        if (index === -1) {\r\n          results.push(item.primaryKeyValue);\r\n        }\r\n        return results;\r\n      }, removes);\r\n\r\n      // console.log('addItems', appends, 'removeItems', removes);\r\n      // è°ç¨åç«¯æ¥å£æ°å¢æ°æ®\r\n      const addAction$ = from(appends).pipe(\r\n        concatMap(item => {\r\n          const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\r\n          return this.repository.appendByPath(path).pipe(\r\n            tap((entity: Entity) => {\r\n              Object.keys(mappings).forEach(prop => {\r\n                const value = this.getValueByPath(item, prop);\r\n                const fields = mappings[prop];\r\n                const groups: any[] = fields.split(',').filter(p => p);\r\n                groups.forEach(group => {\r\n                  const paths = group.split('.').filter(p => p);\r\n                  this.setValueByPath(entity, paths.join('.'), value);\r\n                });\r\n              });\r\n            }),\r\n            catchError(() => {\r\n              return EMPTY;\r\n            })\r\n          );\r\n        })\r\n      );\r\n\r\n      const removeAction$ = from(removes).pipe(\r\n        concatMap(item => {\r\n          const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\r\n          return this.repository.removeByPath(path, item).pipe(\r\n            tap(() => {\r\n              const befRepository: BefRepository<any> = this.repository as BefRepository<any>;\r\n              befRepository.entityManager.removeEntityByPath(path, item);\r\n            }),\r\n            catchError(() => {\r\n              return EMPTY;\r\n            })\r\n          );\r\n        })\r\n      );\r\n      if (!appends && !removes || appends && appends.length < 1 && removes && removes.length < 1) {\r\n        return of(true);\r\n      }\r\n      return concat(addAction$, removeAction$).pipe(\r\n        catchError(() => EMPTY)\r\n      );\r\n    }\r\n    return of(true);\r\n  }\r\n  // todo:æ¨¡æç¨æ·æä½ï¼å¾åç«¯æ¥å£æ¯æä¸»è¡¨æ¹éæ°å¢åéå\r\n  /**\r\n   * å¤éå¸®å©æ¹éèµå¼å¸®å©åäºä»¶\r\n   */\r\n  public beforeMultiSelectHelpOpen() {\r\n    return this.clearHelpSelections();\r\n  }\r\n  /**\r\n   * å¤éå¸®å©æ¹éèµå¼å¸®å©åäºä»¶\r\n   * @param frameId ç»å®è·¯å¾\r\n   * @param mapFields å­æ®µæ å°\r\n   * @param commandFrameId åè°å½ä»¤æå¨frameId\r\n   * @param commandName åè°å½ä»¤\r\n   * @deprecated æ¨¡æç¨æ·æä½ï¼å¾æ¹éèµå¼æ¯æä¸»è¡¨ååºå¼\r\n   */\r\n  public afterMultiSelectHelpClose(frameId: string, mapFields: string, commandFrameId?: string, commandName?: string) {\r\n    const self: any = this;\r\n    const result = self.context && self.context.eventParam || [];\r\n    if (result && Array.isArray(result)) {\r\n      // è°ç¨åç«¯æ¥å£æ°å¢æ°æ®\r\n      if (!result || result.length < 1) {\r\n        return of(true);\r\n      }\r\n      this.onHelpClose.next({ frameId, mapFields, data: result, commandFrameId, commandName });\r\n      return of(true);\r\n    }\r\n    return of(true);\r\n  }\r\n  /**\r\n    * å¸®å©å³é­åå¤çå¨\r\n    * @param frameId frameid\r\n    * @param mapFields mapFields\r\n    * @param result å¸®å©æ°æ®ç»æ\r\n    */\r\n  private onHelpCloseHandler(frameId: string, mapFields: string, result: any[]) {\r\n    if (!mapFields) {\r\n      throw new Error('mapFields can`t be empty.');\r\n    }\r\n    const mappings = JSON.parse(mapFields);\r\n    // ä¸æ¯bindingPathåæframeIdå¤ç\r\n    let bindingPath = '/';\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    if (appContext) {\r\n      const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\r\n      if (frameContext) {\r\n        bindingPath = frameContext.viewModel.bindingPath || '/';\r\n      } else {\r\n        throw new Error('frameId is invalid!');\r\n      }\r\n    }\r\n    // å°éæ©äººåä¿å­å°uistateä¸­\r\n    const rootFrameContext = this.viewModel.frameContext.root;\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    const bindingPaths = bindingPath.split('/').filter(p => p);\r\n    // tslint:disable-next-line: no-string-literal\r\n    rootFrameContext.uiState['selections'] = result;\r\n    if (result && Array.isArray(result)) {\r\n      const addAction$ = from(result).pipe(\r\n        concatMap(item => {\r\n          const requestInfo = befRepository.restService.buildRequestInfo();\r\n          if (bindingPaths.length > 0) {\r\n            const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\r\n            return befRepository.restService.createByPath(path, requestInfo).pipe(\r\n              tap((responseInfo: ResponseInfo) => {\r\n                const data = responseInfo.returnValue;\r\n                const newEntity = befRepository.entityManager.appendEntityByPath(path, data, data);\r\n                Object.keys(mappings).forEach(prop => {\r\n                  const value = this.getValueByPath(item, prop);\r\n                  const fields = mappings[prop];\r\n                  const groups: any[] = fields.split(',').filter(p => p);\r\n                  groups.forEach(group => {\r\n                    const paths = group.split('.').filter(p => p);\r\n                    this.setValueByPath(newEntity, paths.join('.'), value);\r\n                  });\r\n                });\r\n                return newEntity;\r\n              })\r\n            );\r\n          } else {\r\n            return befRepository.restService.create(null, requestInfo).pipe(\r\n              tap((responseInfo: ResponseInfo) => {\r\n                const data = responseInfo.returnValue;\r\n                const newEntity = this.repository.buildEntity(data);\r\n                Object.keys(mappings).forEach(prop => {\r\n                  const value = this.getValueByPath(item, prop);\r\n                  const fields = mappings[prop];\r\n                  const groups: any[] = fields.split(',').filter(p => p);\r\n                  groups.forEach(group => {\r\n                    const paths = group.split('.').filter(p => p);\r\n                    this.setValueByPath(newEntity, paths.join('.'), value);\r\n                  });\r\n                });\r\n                this.repository.entityCollection.addEntity(newEntity);\r\n                return newEntity;\r\n              })\r\n            );\r\n          }\r\n        })\r\n      );\r\n      // const formLoadingService = this.injector.get<FormLoadingService>(FormLoadingService, null);\r\n      if (this.formLoadingService) {\r\n        this.suspendFrameContextEvent(frameId);\r\n        this.formLoadingService.show();\r\n        this.formLoadingService.setSuspend(true);\r\n      }\r\n      return addAction$.pipe(\r\n        last(),\r\n      ).pipe(\r\n        switchMap(() => {\r\n          const primaryValue = this.viewModel.bindingData.list.currentId;\r\n          if (primaryValue) {\r\n            return befRepository.updateChangesById(primaryValue);\r\n          } else {\r\n            return of(null);\r\n          }\r\n        })\r\n      ).subscribe(() => {\r\n        if (this.formLoadingService) {\r\n          this.resumeFrameContextEvent(frameId);\r\n          this.formLoadingService.setSuspend(false);\r\n          this.formLoadingService.hide();\r\n        }\r\n      }, () => {\r\n        if (this.formLoadingService) {\r\n          this.resumeFrameContextEvent(frameId);\r\n          this.formLoadingService.setSuspend(false);\r\n          this.formLoadingService.hide();\r\n        }\r\n      });\r\n    }\r\n    return of(null);\r\n  }\r\n  private suspendFrameContextEvent(frameId: string) {\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    if (appContext) {\r\n      const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\r\n      frameContext.suspend = true;\r\n    }\r\n  }\r\n  private resumeFrameContextEvent(frameId: string) {\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    if (appContext) {\r\n      const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\r\n      frameContext.suspend = false;\r\n      frameContext.appContext.messagePipe.next('bindData');\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n  private setValueByPath(target: object, path: string, value: any) {\r\n    if (target) {\r\n      const paths = path.split('.');\r\n      if (paths.length <= 1) {\r\n        target[path] = value;\r\n      } else {\r\n        paths.slice(0, -1).reduce((prev, path) => {\r\n          if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {\r\n            prev[path] = {};\r\n          }\r\n          return prev[path];\r\n        }, target)[paths[paths.length - 1]] = value;\r\n      }\r\n    }\r\n  }\r\n  private getValueByPath(target: object, path: string) {\r\n    const paths = path.split('.');\r\n    if (paths.length < 1) {\r\n      return;\r\n    }\r\n    if (paths.length === 1) {\r\n      return target[path];\r\n    }\r\n    let result = null;\r\n    paths.forEach((prop, index) => {\r\n      if (index === 0) {\r\n        result = target && target[prop] || null;\r\n      } else {\r\n        result = result && result[prop] || null;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * æé å­è¡¨è·¯å¾\r\n   * @param bindingPath ç»å®è·¯å¾\r\n   * @param id id\r\n   */\r\n  private buildPath(bindingPath: string, id: any) {\r\n    let path = '/' + id;\r\n    const subPaths = bindingPath.split('/');\r\n    if (subPaths.length > 0) {\r\n      // eg:bindingPathå½¢å¦/edus/grades,splitåæ¯['', 'edus', 'grades']\r\n      // å æ­¤indexä»1å¼å§\r\n      for (let index = 1; index < subPaths.length - 1; index++) {\r\n        const subPath = subPaths[index];\r\n        const subData = this.viewModel.bindingData[subPath];\r\n        if (!subData || !subData.currentId) {\r\n          throw Error(`è·åå­è¡¨å®æ´è·¯å¾åºéï¼æ¾ä¸å°${subData}å¯¹åºçå­è¡¨ï¼æå¯¹åºå­è¡¨æ²¡æå½åè¡ã`);\r\n        }\r\n        path += `/${subPath}/${subData.currentId}`;\r\n      }\r\n    }\r\n    path += '/' + subPaths[subPaths.length - 1];\r\n\r\n    return path;\r\n  }\r\n  /**\r\n   * è·åç»å®è·¯å¾çå½åè¡æ°ç»\r\n   * @param bindingPath bindingPath\r\n   * @returns \r\n   */\r\n  private buildIds(bindingPath: string): string[] {\r\n    const bindingPaths = bindingPath.split('/').filter(p => p);\r\n    const primaryValue = this.viewModel.bindingData.list.currentId;\r\n    const result = [];\r\n    const paths = [];\r\n    if (bindingPaths.length > 0) {\r\n      result.push(primaryValue);\r\n      // ä»è¡¨æä»ä»è¡¨è¦å¤å¶çè¡ä¸ä¸å®æ¯å½åè¡ï¼ç¨æ·å¯ä»¥æå®\r\n      bindingPaths.pop();\r\n      bindingPaths.forEach((path: string) => {\r\n        paths.push(path);\r\n        const bindingList = this.viewModel.bindingData.getValue(paths) as BindingList;\r\n        if (bindingList) {\r\n          result.push(bindingList.currentId);\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n  private updateBindingData(input: any, ids: Array<any>) {\r\n    const { controlType = null, value = null, options = {}, dataType = null } = input || {};\r\n    if (controlType) {\r\n      // å¯¹å¸®å©åç¹æ®å¤ç\r\n      if (controlType === 'lookup' || controlType === 'combo-lookup') {\r\n        const mapFields = options.mapFields;\r\n        this.updateLookupField(ids, value, mapFields);\r\n      } else {\r\n        this.updateSimpleField(ids, value, input);\r\n      }\r\n    }\r\n  }\r\n  private updateSimpleField(ids: Array<any>, value: any, column: any) {\r\n    if (!column) {\r\n      return;\r\n    }\r\n    const currentColumnType = column.dataType;\r\n    // å­å¨è¡ç¼è¾å¨\r\n    let result = value;\r\n    if (currentColumnType === 'date') {\r\n      let dateStr = this.dateService.formatTo(value, 'yyyy-MM-dd');\r\n      if (!dateStr) {\r\n        dateStr = '0001-01-01T00:00:00';\r\n      }\r\n      result = dateStr;\r\n    } else if (currentColumnType === 'number') {\r\n      result = Number(value) || 0;\r\n    }\r\n    const field = column.field;\r\n    ids.forEach(id => {\r\n      this.updateBindingList(id, field, result);\r\n    });\r\n  }\r\n  private updateLookupField(ids: Array<any>, helpData: any, mapFields: any) {\r\n    if (!mapFields) {\r\n      return;\r\n    }\r\n    let helpFields = Object.keys(mapFields);\r\n    const idIndex = helpFields.findIndex(item => item === 'id');\r\n    if (helpFields.includes('id') && idIndex !== 0) {\r\n      helpFields.splice(idIndex, 1);\r\n      helpFields = ['id', ...helpFields];\r\n    }\r\n    helpFields.forEach((helpField: any) => {\r\n      let helpValue: any = '';\r\n      if (helpData) {\r\n        if (helpData instanceof Array) {\r\n          helpValue = helpData.map((item: any) => {\r\n            return this.getValue(helpField, item);\r\n          }).join(',');\r\n        } else {\r\n          helpValue = this.getValue(helpField, helpData);\r\n        }\r\n      }\r\n      ids.forEach(id => {\r\n        this.updateBindingList(id, mapFields[helpField], helpValue);\r\n      });\r\n    });\r\n  }\r\n  private updateBindingList(primaryValue: any, propertyName: string, value: any) {\r\n    const viewModel = this.viewModel || null;\r\n    if (!viewModel || !propertyName) {\r\n      return;\r\n    }\r\n    // æ´æ°ä¸»è¡¨é¨åè¡çå­æ®µ\r\n    const propertyNames = propertyName.split('.').filter(item => item);\r\n    const bindingObject = this.bindingList.findById(primaryValue);\r\n\r\n    if (propertyNames.length < 2) {\r\n      bindingObject.setValue(propertyName, value, true, true);\r\n    } else {\r\n      let targetBindingObject = null;\r\n      const fpaths = propertyNames.slice(0, propertyNames.length - 1);\r\n      const targetPropertyName = propertyNames[propertyNames.length - 1];\r\n      fpaths.forEach(prop => {\r\n        targetBindingObject = targetBindingObject && targetBindingObject[prop] || bindingObject[prop];\r\n      });\r\n      // todo:éè¦æ·»å å¼ååäºä»¶\r\n      targetBindingObject.setValue(targetPropertyName, value, true, true);\r\n    }\r\n  }\r\n  private getBindingPathArray(): any[] {\r\n    const path = this.viewModel.bindingPath;\r\n    if (path) {\r\n      return path.split('/').filter(n => n !== '');\r\n    }\r\n    return [];\r\n  }\r\n  private getValue(f: string, data: any) {\r\n    let val = '';\r\n    if (f.indexOf('.') === -1) {\r\n      val = data[f];\r\n    } else {\r\n      val = f.split('.').reduce((a, b) => {\r\n        return a[b];\r\n      }, data);\r\n    }\r\n\r\n    return val;\r\n  }\r\n  protected get bindingList(): BindingList {\r\n    // æ ¹å®ä½\r\n    if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {\r\n      return this.viewModel.bindingData.list;\r\n    }\r\n    // å­å®ä½\r\n    let bindingPath = this.viewModel.bindingPath.substr(1);\r\n    bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);\r\n    const paths = bindingPath.split('/');\r\n\r\n    const filteredPaths = paths.filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return this.viewModel.bindingData.getValue(filteredPaths);\r\n  }\r\n  /**\r\n   * æ ¹æ®æ å°å°æ°æ®èµå¼ç»bindingData\r\n   * @param data \r\n   * @param mapFields \r\n   * @param bindingData \r\n   */\r\n  private mappingRow(data: any, mapFields: any, entity: Entity, bindingPath: string) {\r\n    Object.keys(mapFields).forEach((prop: string) => {\r\n      const value = this.getValueByPath(data, prop);\r\n      const fields = mapFields[prop];\r\n      const groups: any[] = fields.split(',').filter(p => p);\r\n      groups.forEach(group => {\r\n        const paths = group.split('.').filter(p => p);\r\n        this.setValueByPath(entity, paths.join('.'), value);\r\n      });\r\n    });\r\n  }\r\n  /**\r\n   * éè¿frameIdè·åå¯¹åºçç»ä»¶ä¸ä¸æ\r\n   * @param frameId frameId\r\n   * @returns \r\n   */\r\n  private getFrameContextById(frameId: string): FrameContext | null {\r\n    if (!frameId) {\r\n      return null;\r\n    }\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    let frameContext: FrameContext = null;\r\n    if (appContext) {\r\n      frameContext = appContext.frameContextManager.getFrameContextById(frameId);\r\n    }\r\n    return frameContext;\r\n  }\r\n  private getEntityByPath(frameContext: FrameContext, bindingPaths: any[], currentId: string) {\r\n    bindingPaths = [...bindingPaths];\r\n    const id = frameContext.bindingData.list.currentId;\r\n    const entity: Entity = frameContext.repository.entityCollection.getEntityById(id) as Entity;\r\n    let item: Entity = entity;\r\n    const paths = [];\r\n    const tailPath = bindingPaths.pop();\r\n    const parent = bindingPaths.reduce((object: Entity, path: string) => {\r\n      paths.push(path);\r\n      if (object && (object.hasOwnProperty(path) || object['__proto__'].hasOwnProperty(path))) {\r\n        const value = object[path];\r\n        if (value && value instanceof EntityList) {\r\n          const bindingList = frameContext.bindingData.getValue(paths) as BindingList;\r\n          const currentItemId = bindingList.currentId;\r\n          return value.get(currentItemId);\r\n        } else {\r\n          return value;\r\n        }\r\n      } else {\r\n        return null;\r\n      }\r\n    }, item);\r\n    if (parent instanceof Entity) {\r\n      const list = parent[tailPath] as EntityList<any>;\r\n      if (list) {\r\n        return list.get(currentId);\r\n      } else {\r\n        throw new Error(`æ æçbindingPath.`);\r\n      }\r\n    } else {\r\n      throw new Error(`æ æçbindingPath.`);\r\n    }\r\n  }\r\n  private endEdit(frameContext: FrameContext) {\r\n    const appContext: AppContext = frameContext && frameContext.getFormAppContext();\r\n    return of(null).pipe(\r\n      tap(() => {\r\n        if (appContext) {\r\n          appContext.messagePipe.next({ type: 'endEdit' });\r\n        }\r\n      }),\r\n      // todo: ä¸åºè¯¥ä½¿ç¨delayï¼åºè¯¥ä¸²æµ\r\n      delay(5)\r\n    );\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { FrameContext, Entity } from '@farris/devkit';\r\nimport { BefRepository } from '@farris/bef';\r\nimport { FormLoadingService } from './form-loading/form-loading.service';\r\nimport { RuntimeFrameworkService } from './rtf-service';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Observable, of, EMPTY } from 'rxjs';\r\n// tslint:disable: max-line-length\r\n@Injectable()\r\nexport class DiscussionGroupService {\r\n  /**\r\n   * å®ä½ä»åº\r\n   */\r\n  private get repository(): BefRepository<Entity> {\r\n    return this.frameContext.repository as BefRepository<Entity>;\r\n  }\r\n  /**\r\n   * å½ä»¤åæ°\r\n   */\r\n  private get params() {\r\n    return this['context'] && this['context']['eventParam'] || {};\r\n  }\r\n  constructor(private injector: Injector, private frameContext: FrameContext, private loadingService: FormLoadingService, private runtimeFrameworkService: RuntimeFrameworkService) {\r\n  }\r\n\r\n  public addComment(id?: string, summary?: string, configId?: string, text?: string, visibility?: string, parentId?: string): Observable<any> {\r\n    id = id || this.frameContext && this.frameContext.bindingData.list.currentId || null;\r\n    if (!id) {\r\n      return EMPTY;\r\n    }\r\n    const params = this.buildAddCommentParam(id, text, parentId, summary, visibility, configId);\r\n    const restService = this.repository.restService;\r\n    const url = '/api/runtime/comment/v1.0/bill-comment/comment';\r\n    const requestInfo = restService.buildRequestInfo();\r\n    const options = {\r\n      body: {\r\n        requestInfo,\r\n        ...params\r\n      }\r\n    };\r\n    this.loadingService.show();\r\n    return restService.invoke(url, 'POST', null, options).pipe(\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æ¥è¯¢è¯è®º\r\n   * @param id id\r\n   */\r\n  public queryComments(id: string, configId: string, pageIndex?: number | null, pageSize?: number | null): Observable<any> {\r\n    id = id || this.frameContext && this.frameContext.bindingData.list.currentId || null;\r\n    if (!id) {\r\n      return EMPTY;\r\n    }\r\n\r\n    const restService = this.repository.restService;\r\n\r\n    const url = this.buildQueryCommentsUrl(id, pageIndex, pageSize, configId);\r\n    this.loadingService.show();\r\n    return restService.invoke(url, 'GET').pipe(\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æ¥è¯¢ææé¨é¨ä¿¡æ¯\r\n   */\r\n  public queryAllOrgs() {\r\n    const restService = this.repository.restService;\r\n    const url = '/api/runtime/sys/v1.0/sysOrgs?param={\"layer\":\"1\"}';\r\n    this.loadingService.show();\r\n    return restService.invoke(url, 'GET').pipe(\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æ¥è¯¢å¸¸ç¨@ç¨æ· \r\n   * @param pageIndex \r\n   * @param pageSize \r\n   */\r\n  public queryFrequentAtUsers(pageIndex?: number | null, pageSize?: number | null) {\r\n    const restService = this.repository.restService;\r\n    const url = this.buildQueryFrequentAtUsersUrl(pageIndex, pageSize);\r\n    this.loadingService.show();\r\n    return restService.invoke(url, 'GET').pipe(\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * è·åatç¨æ·åè¡¨\r\n   * @param user ç¨æ·ç¼å·æèç¨æ·åç§°ï¼è¿æ»¤ä½¿ç¨ï¼\r\n   * @param pageIndex pageIndex\r\n   * @param pageSize pageSize\r\n   */\r\n  public queryAtUsers(user?: string, pageIndex?: number | null, pageSize?: number | null) {\r\n    const restService = this.repository.restService;\r\n    const url = this.buildQueryAtUsersUrl(user, pageIndex, pageSize);\r\n    this.loadingService.show();\r\n    return restService.invoke(url, 'GET').pipe(\r\n      tap(() => {\r\n        this.loadingService.hide();\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æé è·åè¯è®ºåè¡¨çurl\r\n   * @param id id\r\n   */\r\n  private buildQueryCommentsUrl(id: string, pageIndex: number | null, pageSize: number | null, configId: string) {\r\n    if (typeof pageIndex === 'undefined' || pageIndex === null) {\r\n      pageIndex = this.params.pageIndex || 0;\r\n    }\r\n    if (typeof pageSize === 'undefined' || pageSize === null) {\r\n      pageSize = this.params.pageSize || 10;\r\n    }\r\n    const serverUri = this.repository.serverUri;\r\n    // const funcId = this.runtimeFrameworkService && this.runtimeFrameworkService.funcId || '';\r\n    return `/api/runtime/comment/v1.0/bill-comment/comment/byBill?configId=${configId}&billId=${id}&pageSize=${pageSize}&pageIndex=${pageIndex}`;\r\n  }\r\n  /**\r\n   * æé è·å@ç¨æ·url\r\n   */\r\n  private buildQueryAtUsersUrl(user?: string, pageIndex?: number | null, pageSize?: number | null) {\r\n    const params: string[] = [];\r\n    if (typeof pageIndex === 'undefined' || pageIndex === null) {\r\n      pageIndex = this.params.pageIndex || 0;\r\n    }\r\n    if (typeof pageSize === 'undefined' || pageSize === null) {\r\n      pageSize = this.params.pageSize || 1000;\r\n    }\r\n    if (user) {\r\n      params.push(`param=${user}`);\r\n    }\r\n    params.push(`pageSize=${pageSize}`);\r\n    params.push(`pageIndex=${pageIndex}`);\r\n    return `/api/runtime/comment/v1.0/bill-comment/atUser?${params.join('&')}`;\r\n  }\r\n  private buildQueryFrequentAtUsersUrl(pageIndex?: number | null, pageSize?: number | null) {\r\n    const params: string[] = [];\r\n    if (typeof pageIndex === 'undefined' || pageIndex === null) {\r\n      pageIndex = this.params.pageIndex || 0;\r\n    }\r\n    if (typeof pageSize === 'undefined' || pageSize === null) {\r\n      pageSize = this.params.pageSize || 6;\r\n    }\r\n    params.push(`pageSize=${pageSize}`);\r\n    params.push(`pageIndex=${pageIndex}`);\r\n    return `/api/runtime/comment/v1.0/bill-comment/frequentAtUsers?${params.join('&')}`;\r\n  }\r\n  private buildAddCommentParam(id: string, text: string, parentId: string, summary: string, visibility: string, configId: string) {\r\n    if (typeof text === 'undefined') {\r\n      text = this.params.text;\r\n    }\r\n    if (typeof parentId === 'undefined') {\r\n      parentId = this.params.parentId;\r\n    }\r\n    if (typeof visibility === 'undefined') {\r\n      visibility = this.params.visibility;\r\n    }\r\n    return {\r\n      'bill': {\r\n        'billId': id,\r\n        'configId': configId,\r\n        'summary': summary\r\n      },\r\n      'comment': {\r\n        'billId': id,\r\n        'configId': configId,\r\n        'parentId': parentId || null,\r\n        'text': text,\r\n        'visibility': visibility\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FrameContext } from '@farris/devkit';\r\nimport { ListFilterHandler, QueryCondition } from '@farris/ui-list-filter';\r\n\r\n@Injectable()\r\nexport class ListFilterConditionsService implements ListFilterHandler {\r\n\r\n    constructor(private frameContext: FrameContext) { }\r\n\r\n    public setCurrentFilterConditions(conditions: QueryCondition[]): void {\r\n        this.frameContext.uiState['currentFilterConditions'] = conditions;\r\n    }\r\n\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { Inject, Injectable, Injector } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { FORM_PATH_TOKEN, FormManifest, IFormManifestService } from \"@farris/devkit\";\r\nimport { share } from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class FormManifestService implements IFormManifestService {\r\n  private static mainfests = new Map<string, Observable<FormManifest>>();\r\n  constructor(\r\n    private injector: Injector,\r\n    @Inject(FORM_PATH_TOKEN) private modulePath,\r\n    private httpClient: HttpClient\r\n  ) { }\r\n  public load(): Observable<FormManifest> {\r\n    if (this.modulePath.endsWith('\\/')) {\r\n      this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);\r\n    }\r\n    const formManifestPath = `${this.modulePath}/expressions/form.manifest.json?version=${new Date().valueOf().toString()}`;\r\n    const request$ = FormManifestService.mainfests.get(this.modulePath);\r\n    if (request$) {\r\n      return request$;\r\n    } else {\r\n      const req$ = this.httpClient.get<FormManifest>(formManifestPath, { responseType: 'json' }).pipe(share());\r\n      FormManifestService.mainfests.set(this.modulePath, req$);\r\n      return req$;\r\n    }\r\n  }\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { Inject, Injectable, Injector } from \"@angular/core\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { share, switchMap } from \"rxjs/operators\";\r\nimport { FORM_PATH_TOKEN, FrameContext, FormExpressionsManifest, FormManifest, IFormExpressionManifestService, FORM_MANIFEST_SERVICE_TOKEN, IFormManifestService } from \"@farris/devkit\";\r\n\r\n@Injectable()\r\nexport class FormExpressionManifestService implements IFormExpressionManifestService {\r\n  private static mainfests = new Map<string, Observable<any>>();\r\n  constructor(\r\n    private injector: Injector,\r\n    private frameContext: FrameContext,\r\n    private httpClient: HttpClient,\r\n    @Inject(FORM_PATH_TOKEN) private modulePath,\r\n    @Inject(FORM_MANIFEST_SERVICE_TOKEN) private formManifestService: IFormManifestService) { }\r\n\r\n  public load(): Observable<any> {\r\n    if (this.modulePath.endsWith('\\/')) {\r\n      this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);\r\n    }\r\n\r\n    return this.formManifestService.load().pipe(\r\n      switchMap((formManifest: FormManifest) => {\r\n        const expressions = formManifest.expressions;\r\n        const expressionManifest = expressions.find((expressionManifest: FormExpressionsManifest) => expressionManifest.ns === this.frameContext.namespace);\r\n        if (expressionManifest) {\r\n          const expressionPath = `${this.modulePath}/expressions/${expressionManifest.path}?version=${new Date().valueOf().toString()}`;\r\n          const key = `${this.modulePath}/expressions/${expressionManifest.path}`;\r\n          const request$ = FormExpressionManifestService.mainfests.get(key);\r\n          if (request$) {\r\n            return request$;\r\n          } else {\r\n            const req$ = this.httpClient.get(expressionPath, { responseType: 'json' }).pipe(share());\r\n            FormExpressionManifestService.mainfests.set(key, req$);\r\n            return req$;\r\n          }\r\n        } else {\r\n          return of({});\r\n        }\r\n      })\r\n    );\r\n  }\r\n}","import { Inject, Injectable, Injector } from \"@angular/core\";\r\nimport { BigNumber } from 'bignumber.js';\r\nimport moment from 'moment';\r\nimport { NumberFormat, UserSettings, UserSettingsToken } from \"@farris/devkit\";\r\n\r\n@Injectable()\r\nexport class LocalizationService {\r\n  constructor(private injector: Injector, @Inject(UserSettingsToken) private userSettings: UserSettings) { }\r\n\r\n  /**\r\n   * ç¨æ·éç½®æ ¼å¼\r\n   */\r\n  public get formats(): { date: { dateFormat: string, timeFormat: string, dateTimeFormat: string }, number: { negativeSign: string, numberDecimalDigits: number, numberDecimalSeparator: string, numberGroupSeparator: string }, [prop: string]: any } {\r\n    const { dateFormat = null, timeFormat = null } = this.userSettings || {};\r\n    let dateTimeFormat = null;\r\n    if (dateFormat && timeFormat) {\r\n      dateTimeFormat = `${dateFormat} ${timeFormat}`;\r\n    }\r\n    const date = {\r\n      dateFormat,\r\n      timeFormat,\r\n      dateTimeFormat\r\n    };\r\n    const { negativeSign = null, numberDecimalDigits = null, numberDecimalSeparator = null, numberGroupSeparator = null } = this.numberFormat || {};\r\n    const number = {\r\n      negativeSign,\r\n      numberDecimalDigits,\r\n      numberDecimalSeparator,\r\n      numberGroupSeparator\r\n    };\r\n    return { date, number };\r\n  }\r\n  /**\r\n   * æ ¹æ®æ°æ®ç±»åæ¬å°åæ°æ®\r\n   * @param value value\r\n   * @param dataType æ°æ®ç±»å\r\n   * @returns string\r\n   */\r\n  public localize(value: any, dataType: string): string {\r\n    if (dataType && value) {\r\n      dataType = dataType.toLowerCase();\r\n      if (dataType === 'date') {\r\n        return this.transformDate(value);\r\n      } else if (dataType === 'datetime') {\r\n        return this.transformDateTime(value);\r\n      } else if (dataType === 'number') {\r\n        return this.transformNumber(value);\r\n      } else {\r\n        return value;\r\n      }\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n  /**\r\n   * æ ¹æ®å½éåç±»åè·åæ ¼å¼åå­ç¬¦ä¸²\r\n   * @param localizationType å½éåç±»å\r\n   * @returns \r\n   */\r\n  public getFormat(localizationType: string): string {\r\n    if (localizationType) {\r\n      localizationType = localizationType.toLowerCase();\r\n    }\r\n    if (localizationType === 'date') {\r\n      return this.formats.date.dateFormat;\r\n    } else if (localizationType === 'datetime') {\r\n      return this.formats.date.dateTimeFormat;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥æ\r\n   * @param value value\r\n   */\r\n  private transformDate(value: any) {\r\n    let dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';\r\n    if (!dateFormat || !value) {\r\n      return value;\r\n    }\r\n    const date = moment(value);\r\n    const isValid = date.isValid();\r\n    if (!isValid) {\r\n      return value;\r\n    }\r\n    dateFormat = this.parseDateFormat(dateFormat);\r\n    return date.format(dateFormat);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥ææ¶é´\r\n   * @param value value\r\n   * todo: ç®åæ æ³å®ä¹æ¥ææ¶é´æ ¼å¼\r\n   */\r\n  private transformDateTime(value: any) {\r\n    let dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';\r\n    let timeFormat = this.userSettings && this.userSettings.timeFormat || 'HH:mm:ss';\r\n    if (!dateFormat || !timeFormat) {\r\n      return value;\r\n    }\r\n    const dateTime = moment(value);\r\n    const isValid = dateTime.isValid();\r\n    if (!isValid) {\r\n      return value;\r\n    }\r\n    if (dateFormat) {\r\n      dateFormat = this.parseDateFormat(dateFormat);\r\n    }\r\n    if (timeFormat) {\r\n      timeFormat = this.parseTimeFormat(timeFormat);\r\n    }\r\n    const dateTimeFormat = dateFormat + ' ' + timeFormat;\r\n    return dateTime.format(dateTimeFormat);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ°å­\r\n   * @param value value\r\n   */\r\n  private transformNumber(value): string {\r\n    if (value === null || value === undefined || value === '') {\r\n      return '';\r\n    }\r\n    const bigNumber = new BigNumber(value);\r\n    // å¦æä¸æ¯æ°å­ï¼ä¸åä»»ä½å¤ç\r\n    if (!BigNumber.isBigNumber(bigNumber)) {\r\n      return value;\r\n    }\r\n    const isNegative = bigNumber.isNegative();\r\n    const format = this.buildNumberFormat();\r\n    const { negativeSign = null, numberDecimalDigits = null } = this.numberFormat || {};\r\n    if (isNegative) {\r\n      if (negativeSign !== null) {\r\n        format.prefix = negativeSign;\r\n        return bigNumber.absoluteValue().toFormat(numberDecimalDigits, null, format);\r\n      }\r\n    }\r\n    return bigNumber.toFormat(numberDecimalDigits, null, format);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥ææ ¼å¼è§åä¸ºmomentçformatè§å\r\n   * @param format format\r\n   */\r\n  private parseDateFormat(format: string) {\r\n    return format.replace(/y/g, 'Y').replace(/d/g, 'D');\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¶é´æ ¼å¼è§åä¸ºmomentçformatè§å\r\n   * @param format format\r\n   */\r\n  private parseTimeFormat(format: string) {\r\n    return format.replace(/M/g, 'm');\r\n  }\r\n  /**\r\n   * æé bignumberæ°å­æ ¼å¼åéé¡¹\r\n   */\r\n  private buildNumberFormat() {\r\n    if (this.numberFormat) {\r\n      const { numberDecimalSeparator = null, numberGroupSeparator = null } = this.numberFormat;\r\n      const format: any = {\r\n        groupSize: 3,\r\n      };\r\n      if (numberDecimalSeparator !== null) {\r\n        format.decimalSeparator = numberDecimalSeparator;\r\n      }\r\n      if (numberGroupSeparator !== null) {\r\n        format.groupSeparator = numberGroupSeparator;\r\n      }\r\n      return format;\r\n    }\r\n  }\r\n  private get numberFormat(): NumberFormat {\r\n    return this.userSettings && this.userSettings.numberFormat || null;\r\n  }\r\n}","import { CommandContext } from \"@farris/devkit\";\r\n\r\nexport abstract class Service {\r\n  public context: CommandContext;\r\n  /**\r\n   * å½ä»¤åæ°\r\n   */\r\n  public get eventParam(){\r\n    return this.context && this.context.eventParam || null;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Service } from \"./service\";\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\nimport { QueryCondition } from '@farris/component-querycondition';\r\nimport { CommandContext, FrameContext } from \"@farris/devkit\";\r\n@Injectable()\r\nexport class DataGridService extends Service {\r\n  /**\r\n   * æ¸ç©ºææå¾éè¡\r\n   * @description åæ¶å¾éå½åè¡¨åææå¾éè¡\r\n   */\r\n  public clearChecks() {\r\n    // const params = this.eventParam;\r\n    // if (params && Array.isArray(params)) {\r\n    // const param = params[0];\r\n    // if (param instanceof QueryCondition) {\r\n    const gridComponents = this.getFormGridComponents(this.context);\r\n    if (gridComponents && gridComponents.length > 0) {\r\n      gridComponents.forEach((gridComponent: DatagridComponent) => {\r\n        let clearSelections = true;\r\n        if (gridComponent.hasOwnProperty('clearSelectionsWhenDataIsEmpty')) {\r\n          clearSelections = gridComponent['clearSelectionsWhenDataIsEmpty'];\r\n        }\r\n        if (clearSelections) {\r\n          gridComponent.clearCheckeds(true);\r\n        }\r\n      });\r\n    }\r\n    // }\r\n    // }\r\n  }\r\n  /**\r\n   * åæ¶å¾éå é¤çè¡\r\n   * @param ids ids\r\n   * @returns \r\n   * @description åæ¶å¾éå½åç»å®è·¯å¾ä¸æå®æ°æ®ï¼æ¸ç©ºä¸çº§è¡¨æ ¼ä¸­ææå¾éè¡ï¼ä»ä¾å é¤åºæ¯ä½¿ç¨\r\n   */\r\n  public uncheckDeletedRows(ids: any) {\r\n    if (typeof ids === 'string') {\r\n      if (ids.indexOf(',') !== -1) {\r\n        ids = ids.split(',').filter(p => p);\r\n      } else {\r\n        ids = [ids];\r\n      }\r\n    }\r\n    if (!ids || ids.length < 1) {\r\n      return;\r\n    }\r\n    // è·åbindingPathåns\r\n    const frameContext = this.context.frameContext;\r\n    if (!frameContext) {\r\n      return;\r\n    }\r\n    const appContext = frameContext.appContext;\r\n    const ns = frameContext.namespace;\r\n    const bindingPath = frameContext.viewModel && frameContext.viewModel.bindingPath;\r\n    if (!appContext) {\r\n      return;\r\n    }\r\n    // æ ¹æ®bindingPathè·åææå¯è½çframeContext\r\n    const frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);\r\n    const frameContextsInCurrentBindingPath = frameContexts.filter(frameContext => frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath === bindingPath);\r\n    // è·åè¿äºframeä¸­ææçè¡¨æ ¼ç»ä»¶map\r\n    const gridInCurrentFrame = this.getGridComponentByFrameContexts(frameContextsInCurrentBindingPath);\r\n    if (!gridInCurrentFrame) {\r\n      return;\r\n    }\r\n    // ä¸ä¸ªbindingPathä¸åºè¯¥åªæä¸ä¸ªgrid\r\n    const grid: DatagridComponent = gridInCurrentFrame.pop();\r\n    // æ¸ç©ºå½ä»¤æå¨çframeä¸è¡¨æ ¼çæå®å¾é\r\n    if(grid){\r\n      grid.unCheckRows(ids, true);\r\n    }\r\n    // æ¸ç©ºä¸çº§è¡¨æ ¼çææå¾éè¡æ°æ®\r\n    const childrenFrameContexts = frameContexts.filter(frameContext => frameContext.viewModel.bindingPath !== bindingPath && frameContext.viewModel.bindingPath.startsWith(bindingPath));\r\n    const childrenGridComponents = this.getGridComponentByFrameContexts(childrenFrameContexts);\r\n    // æ¸ç©ºå½ä»¤æå¨frame\r\n    if (childrenGridComponents && childrenGridComponents.length > 0) {\r\n      childrenGridComponents.forEach((gridComponent: DatagridComponent) => {\r\n        // æ¸ç©ºææå¾é\r\n        gridComponent.checkedRows = [];\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * åæ¶å¾éè¡\r\n   * @param ids ids\r\n   * @returns \r\n   */\r\n  public uncheckRows(ids: any) {\r\n    if (typeof ids === 'string') {\r\n      ids = [ids];\r\n    }\r\n    if (!ids || ids.length < 1) {\r\n      return;\r\n    }\r\n    const gridComponents = this.getFormGridComponents(this.context);\r\n    if (gridComponents && gridComponents.length > 0) {\r\n      gridComponents.forEach((gridComponent: DatagridComponent) => {\r\n        gridComponent.unCheckRows(ids, true);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * æ ¹æ®å½ä»¤ä¸ä¸æè·åå½åå½ä»¤æå¨ç»ä»¶çè¡¨æ ¼å®ä¾\r\n   * @param commandContext å½ä»¤ä¸ä¸æ\r\n   * @returns \r\n   */\r\n  private getFormGridComponents(commandContext: CommandContext) {\r\n    let grids = [];\r\n    const frameContext = commandContext && commandContext.frameContext;\r\n    const appContext = frameContext && frameContext.appContext || null;\r\n    if (appContext) {\r\n      const componentRefs: Map<string, Map<string, any>> = appContext.componentRefs;\r\n      const collect = Array.from(componentRefs.values());// [Map<string,any>,Map<string,any>]\r\n      collect.forEach((item: Map<string, any>) => {\r\n        const components = Array.from(item.values());\r\n        const bindingPath = frameContext\r\n        const gridComponents = components.filter((component: any) => component instanceof DatagridComponent);\r\n        grids = grids.concat(gridComponents);\r\n      });\r\n    }\r\n    return grids;\r\n  }\r\n  private getGridComponentByFrameContexts(frameContexts: FrameContext[]) {\r\n    return frameContexts.reduce((result, frameContext) => {\r\n      const appContext = frameContext.appContext;\r\n      const frameId = frameContext.frameId;\r\n      // è·åå½åç»ä»¶ä¸ææçç»ä»¶å®ä¾\r\n      const componentsRef = appContext.componentRefs.get(frameId);\r\n      const grids = componentsRef && Array.from(componentsRef.values()).filter(component => component instanceof DatagridComponent);\r\n      if (grids && grids.length > 0) {\r\n        result = result.concat(grids);\r\n      }\r\n      return result;\r\n    }, []);\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { EMPTY } from \"rxjs\";\r\nimport { AttentionService, AttentionElement } from '@farris/ui-tooltip';\r\n\r\n\r\n@Injectable()\r\nexport class FormAttentionService {\r\n  constructor(private injector: Injector, private frameContext: FrameContext, private attentionService: AttentionService) { }\r\n  /**\r\n   * éªçæé®\r\n   * @param ids idå­ç¬¦ä¸²ææ°ç»\r\n   * @param duration æ¶é´é´é\r\n   * @returns \r\n   */\r\n  public blink(ids: string | string[], duration?: any) {\r\n    if (typeof ids === 'string') {\r\n      ids = ids.split(',').filter(p => p);\r\n    }\r\n    if (!Array.isArray(ids) || ids.length < 1) {\r\n      return EMPTY;\r\n    }\r\n    if (typeof duration === 'string') {\r\n      duration = duration.trim();\r\n    }\r\n    if (!duration) {\r\n      duration = 600;\r\n    }\r\n    duration = parseInt(duration);\r\n    if (isNaN(duration) || duration <= 0) {\r\n      duration = 600;\r\n    }\r\n    const elements: AttentionElement[] = ids.map((item: string) => {\r\n      return {\r\n        idOrEl: item,\r\n        // type:'',\r\n        // class:''\r\n      };\r\n    });\r\n    this.attentionService.catchAttention(elements, duration);\r\n  }\r\n}","export namespace Prop {\r\n  /**\r\n   * ç¹å¾é\r\n   */\r\n  export interface IPropSet {\r\n    id: string;\r\n    /**\r\n     * ç¹å¾éç¼å·\r\n     */\r\n    code: string;\r\n    /**\r\n     * å¨æå­æ®µï¼è¿åå¼ä¸­ä¸å­å¨ï¼ç¨äºå±ç¤ºå½åè¯­è¨çææ¬\r\n     */\r\n    name?: string;\r\n    /**\r\n     * ç¹å¾éåç§°-è±æ\r\n     */\r\n    name_en: string;\r\n    /**\r\n     * ç¹å¾éåç§°-ç®ä½\r\n     */\r\n    name_chs: string;\r\n    /**\r\n     * ç¹å¾éåç§°-ç¹ä½\r\n     */\r\n    name_cht: string;\r\n  }\r\n  /**\r\n   * ç¹å¾é¡¹\r\n   */\r\n  export interface IProp {\r\n    /**\r\n     * ç¹å¾é¡¹id\r\n     */\r\n    id: string;\r\n    /**\r\n     * ç¹å¾é¡¹ç¼å·\r\n     */\r\n    code: string;\r\n    /**\r\n     * ç¼å·å­æ®µï¼æä¸ä½¿ç¨ï¼\r\n     */\r\n    codefield: string;\r\n    /**\r\n     * å¨æå­æ®µ\r\n     */\r\n    name?: string;\r\n    /**\r\n     * ç¹å¾é¡¹åç§°-è±æ\r\n     */\r\n    name_en: string;\r\n    /**\r\n     * ç¹å¾é¡¹ç¼å·-ç®ä½\r\n     */\r\n    name_chs: string;\r\n    /**\r\n     * ç¹å¾é¡¹ç¼å·-ç¹ä½\r\n     */\r\n    name_cht: string;\r\n    /**\r\n     * ç¹å¾å¼\r\n     */\r\n    value: any;\r\n    /**\r\n     * å¼å­æ®µ\r\n     */\r\n    valuefield: string;\r\n    /**\r\n     * ç¹å¾é¡¹å¯¹åºçè¾å¥æ§ä»¶ç±»å\r\n     */\r\n    inputtype: string;\r\n    /**\r\n     * æ°å­ç²¾åº¦\r\n     */\r\n    digitalaccuracy: number;\r\n    /**\r\n     * ç¹å¾éid\r\n     */\r\n    setid: string;\r\n    helpid: string;\r\n    /**\r\n     * æä¸¾æ°æ®æº\r\n     * @attention æ¥å£è¿åç»æä¸ºå­ç¬¦ä¸²\r\n     */\r\n    enuminfo: string;\r\n    /**\r\n     * æä¸¾æ°æ®æº\r\n     */\r\n    data: IEnumInfo[];\r\n    /**\r\n     * æ åä»£ç éæ¯å¦ä¸ºæ \r\n     */\r\n    setistree: string;\r\n    /**\r\n     * æ åä»£ç éid\r\n     */\r\n    codesetid: string;\r\n    /**\r\n     * ææ¬å­æ®µ\r\n     */\r\n    textfield: string;\r\n    /**\r\n     * è¿æ»¤æ¡ä»¶\r\n     */\r\n    filtercondition: any;\r\n    /**\r\n     * å¿å¡«\r\n     */\r\n    isrequired: string | boolean;\r\n    /**\r\n     * åªè¯»\r\n     */\r\n    isreadonly: string | boolean;\r\n    /**\r\n     * æåº\r\n     */\r\n    sortorder: number;\r\n\r\n    timestamp_createdon: string;\r\n    timestamp_lastchangedon: string;\r\n\r\n    timestamp_createdby: string;\r\n    timestamp_lastchangedby: string;\r\n\r\n  }\r\n  /**\r\n   * æä¸¾æ°æ®æºæ ¼å¼\r\n   */\r\n  export interface IEnumInfo {\r\n    id: string;\r\n    text: string;\r\n  }\r\n  export interface IReturnValue {\r\n    propset: IPropSet[],\r\n    props: IProp[]\r\n  }\r\n  export enum InputType {\r\n    enum = 'Enum',\r\n    string = 'String',\r\n    help = 'Help',\r\n    number = 'Number',\r\n    date = 'Date'\r\n  }\r\n}\r\n","import { Injectable, Injector } from \"@angular/core\";\r\nimport { BefRepository, ResponseInfo } from \"@farris/bef\";\r\nimport { Repository } from '@farris/devkit';\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { Prop } from \"./types\";\r\n\r\n@Injectable()\r\nexport class FeatureRepository {\r\n  constructor(\r\n    private injector: Injector,\r\n    private repository: Repository<any>,\r\n  ) { }\r\n  /**\r\n   * æ ¹æ®ç©æidè·åç©æç¹å¾é¡¹åç¹å¾å¼ï¼å¬å±é»è®¤å¼ï¼\r\n   * @param materialId ç©æid\r\n   */\r\n  public getFeaturesByMaterialId(materialId: string): Observable<ResponseInfo> {\r\n    const url = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/getmaterialprops';\r\n    const body = {\r\n      materialID: materialId\r\n    };\r\n    const options = {\r\n      body\r\n    };\r\n    const befRepository: BefRepository<any> = this.repository as BefRepository<any>;\r\n    return befRepository.proxy.request(url, 'put', null, options);\r\n  }\r\n  /**\r\n   * æ ¹æ®ç©æidåç©æç¹å¾ä¿å­åçhashè·åè¯¥ç©æå·²ç»å­å¨çç¹å¾é¡¹å¼\r\n   * @param materialId ç©æId\r\n   * @param configID å¯¹åºè¯¥ç©æçç¹å¾é¡¹hash\r\n   * @returns \r\n   */\r\n  public getConfigedValueByFeatureId(materialId: string, configID: string, configType: string = 'Materials'): Observable<ResponseInfo> {\r\n    const url = '/api/bf/df/v1.0/charactconfigservice/service/getcharactconfiginfo';\r\n    const body = { objType: configType, objID: materialId, configID };\r\n    const befRepository: BefRepository<any> = this.repository as BefRepository<any>;\r\n    const options = {\r\n      body\r\n    };\r\n    return befRepository.proxy.request(url, 'put', null, options);\r\n  }\r\n  /**\r\n   * ä¿å­ç©æç¹å¾é¡¹\r\n   * @param materialId ç©æid\r\n   * @param charactValue ç¹å¾å¼\r\n   * @param configType éç½®ç±»å\r\n   * @returns \r\n   */\r\n  public applyFeatures(materialId: string, charactValue: any, configType: string = 'Materials') {\r\n    const body = { objType: configType, objID: materialId, charactValue };\r\n    const befRepository: BefRepository<any> = this.repository as BefRepository<any>;\r\n    const options = {\r\n      body\r\n    };\r\n    return befRepository.proxy.request('/api/bf/df/v1.0/charactconfigservice/service/matchcharactconfigid', 'put', null, options);\r\n  }\r\n  /**\r\n   * è·åå¸®å©ä¿¡æ¯\r\n   * @param helpid å¸®å©id\r\n   * @param filter è¿æ»¤æ¡ä»¶\r\n   * @param params åæ°\r\n   * @returns \r\n   */\r\n  public getHelpInfo(helpid: string, filter: string, params: any): Observable<any> {\r\n    const url = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata';\r\n    const httpParams: any = {};\r\n    if (params) {\r\n      if (params.pageIndex) {\r\n        httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);\r\n      }\r\n      if (params.pageSize) {\r\n        httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);\r\n      }\r\n      if (params.condition) {\r\n        httpParams['condition'] = JSON.stringify(params.condition);\r\n      }\r\n      if (params.searchValue) {\r\n        httpParams['search'] = params.searchValue;\r\n      }\r\n    }\r\n    const body = {\r\n      helpID: helpid,\r\n      queryParam: JSON.stringify(httpParams),\r\n      filterStr: filter\r\n    };\r\n    const befRepository: BefRepository<any> = this.repository as BefRepository<any>;\r\n    const options = {\r\n      body\r\n    };\r\n    return befRepository.proxy.request(url, 'put', null, options);\r\n  }\r\n}","import { Inject, Injectable, Injector, LOCALE_ID, Optional } from \"@angular/core\";\r\nimport { BefRepository, ResponseInfo } from \"@farris/bef\";\r\nimport { FrameContext, RestfulService, Repository } from '@farris/devkit';\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { FeatureRepository } from \"./feature-repository\";\r\nimport { Prop } from \"./types\";\r\n\r\n@Injectable()\r\nexport class FeatureDataService {\r\n  constructor(\r\n    private injector: Injector,\r\n    private repository: FeatureRepository,\r\n    @Optional() @Inject(LOCALE_ID) private localeId?: string\r\n  ) {\r\n    this.localeId = this.localeId || 'zh-CHS';\r\n  }\r\n  /**\r\n   * æ ¹æ®ç©æidè·åç©æç¹å¾é¡¹åç¹å¾å¼ï¼å¬å±é»è®¤å¼ï¼\r\n   * @param materialId ç©æid\r\n   */\r\n  public getFeaturesByMaterialId(materialId: string): Observable<Prop.IReturnValue> {\r\n    return this.repository.getFeaturesByMaterialId(materialId).pipe(\r\n      map((response: ResponseInfo) => {\r\n        if (!response || !response.returnValue) {\r\n          return null;\r\n        }\r\n        const returnValue = JSON.parse(response.returnValue);\r\n        const result: Prop.IReturnValue = { propset: [], props: [] };\r\n        const propsets = returnValue.propset || null;\r\n        const props = returnValue.props || null;\r\n        if (propsets && Array.isArray(propsets)) {\r\n          propsets.map((propset: Prop.IPropSet) => {\r\n            propset.name = this.translateName(propset);\r\n            return propset;\r\n          });\r\n          result.propset = propsets;\r\n        }\r\n        if (props && Array.isArray(props) && props.length > 0) {\r\n          props.map((prop: Prop.IProp) => {\r\n            // å¤çå¤è¯­\r\n            prop.name = this.translateName(prop);\r\n            // å¤çæä¸¾\r\n            if (prop.inputtype === Prop.InputType.enum && prop.enuminfo) {\r\n              prop.data = JSON.parse(prop.enuminfo);\r\n            }\r\n            // å¤çå¿å¡«ååªè¯»\r\n            prop.isreadonly = prop.isreadonly === '1' ? true : false;\r\n            prop.isrequired = prop.isrequired === '1' ? true : false;\r\n            return prop;\r\n          });\r\n          result.props = props;\r\n        }\r\n        return result;\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * æ ¹æ®ç©æidåç©æç¹å¾ä¿å­åçhashè·åè¯¥ç©æå·²ç»å­å¨çç¹å¾é¡¹å¼\r\n   * @param materialId ç©æId\r\n   * @param configID å¯¹åºè¯¥ç©æçç¹å¾é¡¹hash\r\n   * @returns \r\n   */\r\n  public getConfigedValueByFeatureId(materialId: string, configID: string, configType: string = 'Materials'): Observable<any> {\r\n    return this.repository.getConfigedValueByFeatureId(materialId, configID, configType).pipe(map((result: any) => {\r\n      return JSON.parse(result);\r\n    }));\r\n  }\r\n  /**\r\n   * ä¿å­ç©æç¹å¾é¡¹\r\n   * @param materialId ç©æid\r\n   * @param charactValue ç¹å¾å¼\r\n   * @param configType éç½®ç±»å\r\n   * @returns \r\n   */\r\n  public applyFeatures(materialId: string, charactValue: any, configType: string = 'Materials') {\r\n    return this.repository.applyFeatures(materialId, charactValue, configType).pipe(map((config: any) => {\r\n      return JSON.parse(config);\r\n    }));\r\n  }\r\n  /**\r\n   * è·åå¸®å©ä¿¡æ¯\r\n   * @param helpid å¸®å©id\r\n   * @param filter è¿æ»¤æ¡ä»¶\r\n   * @param params åæ°\r\n   * @returns \r\n   */\r\n  public getHelpInfo(helpid: string, filter: string, params: any): Observable<any> {\r\n    const url = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata';\r\n    const httpParams: any = {};\r\n    if (params) {\r\n      if (params.pageIndex) {\r\n        httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);\r\n      }\r\n      if (params.pageSize) {\r\n        httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);\r\n      }\r\n      if (params.condition) {\r\n        httpParams['condition'] = JSON.stringify(params.condition);\r\n      }\r\n      if (params.searchValue) {\r\n        httpParams['search'] = params.searchValue;\r\n      }\r\n    }\r\n    const body = {\r\n      helpID: helpid,\r\n      queryParam: JSON.stringify(httpParams),\r\n      filterStr: filter\r\n    };\r\n    const befRepository: BefRepository<any> = null;//this.repository as BefRepository<any>;\r\n    const options = {\r\n      body\r\n    };\r\n    return befRepository.proxy.request(url, 'put', null, options).pipe(\r\n      map((result: any) => JSON.parse(result))\r\n    );\r\n  }\r\n  /**\r\n   * å½éåç¹å¾é¡¹æç¹å¾éåç§°\r\n   * @param object ç¹å¾éæç¹å¾é¡¹å¯¹è±¡\r\n   * @returns \r\n   */\r\n  private translateName(object: Prop.IPropSet | Prop.IProp): string {\r\n    if (!object) {\r\n      return null;\r\n    }\r\n    let name = null;\r\n    switch (this.localeId) {\r\n      case 'en': {\r\n        name = object['name_en'];\r\n      } break;\r\n      case 'zh-CHS': {\r\n        name = object['name_chs'];\r\n      } break;\r\n      case 'zh-CHT': {\r\n        name = object['name_cht'];\r\n      } break;\r\n      default: name = object['name_chs'];\r\n    }\r\n    return name;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { FeatureEditorService } from '@farris/ui-feature-editor';\r\nimport { FormNotifyService } from \"../form-notify.service\";\r\nimport { map, switchMap, tap } from \"rxjs/operators\";\r\nimport { FormLoadingService } from \"../form-loading/form-loading.service\";\r\nimport { FeatureDataService } from './feature-data.service';\r\nimport { LanguageService } from '../languag.service';\r\nimport { of } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class FeatureEditService {\r\n  constructor(\r\n    private injector: Injector,\r\n    private featureEditorService: FeatureEditorService,\r\n    private featureDataService: FeatureDataService,\r\n    private loadingService: FormLoadingService,\r\n    private notifyService: FormNotifyService,\r\n    private languageService: LanguageService,\r\n  ) { }\r\n\r\n  public edit(materialId: string, materialFeatureId?: string, options?: any) {\r\n    if (!materialId) {\r\n      throw new Error('[FeatureEditService]ç©æidä¸è½ä¸ºç©ºï¼');\r\n    }\r\n    if (!options) {\r\n      options = {};\r\n    }\r\n    if (typeof options === 'string' && options.startsWith('{') && options.endsWith('}')) {\r\n      options = JSON.parse(options);\r\n    }\r\n    options.getHelpInfo = this.featureDataService.getHelpInfo;\r\n    this.loadingService.show();\r\n    return this.featureDataService.getFeaturesByMaterialId(materialId).pipe(\r\n      tap((result: any) => {\r\n        this.loadingService.hide();\r\n        const returnValue = result || null;\r\n        if (returnValue) {\r\n          const featureInfo = JSON.parse(returnValue);\r\n          const props = featureInfo.props || null;\r\n          if (!props || props.length < 1) {\r\n            this.notifyService.warning(this.languageService.propsIsEmpty);\r\n            return;\r\n          }\r\n          this.featureEditorService.show(props, options);\r\n        } else {\r\n          this.notifyService.error(this.languageService.propsIsEmpty);\r\n        }\r\n      })\r\n    );\r\n  }\r\n  private buildFeatures(materialId: string, materialFeatureId?: string) {\r\n    const features$ = this.featureDataService.getFeaturesByMaterialId(materialId);\r\n    return features$.pipe(\r\n      switchMap(featureSet => {\r\n        if (materialFeatureId) {\r\n          const configedFeatures$ = this.featureDataService.getConfigedValueByFeatureId(materialFeatureId, materialFeatureId);\r\n          return configedFeatures$.pipe(\r\n            map(defaultConfigs => {\r\n              const featureTemplate = featureSet.props;\r\n              const features = this.mergeFeatures(featureTemplate, defaultConfigs);\r\n              return features;\r\n            })\r\n          );\r\n        } else {\r\n          return of(featureSet.props);\r\n        }\r\n      })\r\n    );\r\n\r\n  }\r\n  private mergeFeatures(featureTemplate: any, defaultConfigs: any) {\r\n    return null;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { AppContext, FrameContext, Repository, ENTITY_TEMPLATE, ResolveService, ExpressionUtil, ExpressionExecutor } from \"@farris/devkit\";\r\nimport { Observable, of } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class ExpressionService {\r\n  constructor(private injector: Injector, private resolveService: ResolveService, private frameContext: FrameContext, private expressionExecutor: ExpressionExecutor) { }\r\n  /**\r\n   * æ§è¡è¡¨è¾¾å¼è®¡ç®\r\n   * @param expression è¡¨è¾¾å¼\r\n   * @param customContext èªå®ä¹ä¸ä¸æ\r\n   * @returns \r\n   */\r\n  public execute(expression: string, customContext?: { [prop: string]: any }): any {\r\n    const deps = this.resolveService.resolve(expression);\r\n    const groupDependencies = ExpressionUtil.getGroupFunctionDependency(expression, this.frameContext.repository.entityTypeInfo);\r\n    const entityContext = this.buildEntityContext(deps, groupDependencies);\r\n    const stateContext = this.buildStateContext();\r\n    const context = {\r\n      [this.entityOriginalNodeCode]: entityContext,\r\n      ...stateContext,\r\n      BigNumber,\r\n      frameContext: this.frameContext,\r\n      bindingData: this.frameContext.bindingData,\r\n      repository: this.frameContext.repository,\r\n      ...customContext\r\n    }\r\n    return this.expressionExecutor.eval(expression, context);\r\n  }\r\n  /**\r\n   * æ§è¡è¡¨è¾¾å¼ï¼è¿åå¯è§å¯å¯¹è±¡ï¼\r\n   * @param expression è¡¨è¾¾å¼\r\n   * @param customContext èªå®ä¹ä¸ä¸æ\r\n   * @returns \r\n   */\r\n  public executeAsync(expression: string, customContext?: { [prop: string]: any }): Observable<any> {\r\n    const result = this.execute(expression, customContext);\r\n    return of(result);\r\n  }\r\n  /**\r\n   * æé å®ä½ä¸ä¸æ\r\n   * @param deps \r\n   * @param groupDependencies \r\n   * @param context \r\n   * @returns \r\n   */\r\n  private buildEntityContext(deps: string[], groupDependencies: string[], context?: { [prop: string]: any }) {\r\n    let isGroupdMainEntity = false;\r\n    deps.forEach((dep: string) => {\r\n      const isEntityDependency = this.isEntityDependency(dep);\r\n      const isGroupDependency = groupDependencies.findIndex(item => item === dep) !== -1;\r\n      // å¦æä¾èµçæ¯stateï¼æ éå¤çï¼ç°å¨éè¦ç¡®å®çæ¯è¿åå¤å°å®ä½çé®é¢ï¼åstateæ²¡æå³ç³»\r\n      // è¡¨è¾¾å¼ä¾èµäºå®ä½\r\n      if (isEntityDependency) {\r\n        // æ¯èåä¾èµ\r\n        if (isGroupDependency) {\r\n          const dependencyLength = dep.split('/').filter(p => p).length - 1;\r\n          if (dependencyLength === 1) {\r\n            // èåäºä¸»è¡¨å­æ®µï¼ææä¸»è¡¨æ°æ®é½éè¦åä¸è¿ç®ï¼æ­¤æ¶å·²ç»ç¡®å®è®¡ç®çå®ä½ä¸ä¸æäºã\r\n            isGroupdMainEntity = true;\r\n          } else {\r\n            // èåäºå­è¡¨å­æ®µï¼åªéè¦ä¼ éå½åå®ä½\r\n          }\r\n        } else {\r\n          // å½åä¾èµä¸æ¯èåï¼åªéè¦ä¼ éå½åå®ä½\r\n        }\r\n      }\r\n    });\r\n    const data = this.getEntity();\r\n    if (isGroupdMainEntity) {\r\n      const collection = this.frameContext.repository.entityCollection.toJSON();\r\n      data['__type__'] = 'List';\r\n      data['__items__'] = collection;\r\n    }\r\n    return data;\r\n  }\r\n  /**\r\n   * æ¯å¦ä¸ºå®ä½ä¾èµ\r\n   * @param dep \r\n   * @returns \r\n   */\r\n  private isEntityDependency(dep: string) {\r\n    return dep.startsWith(ENTITY_TEMPLATE);\r\n  }\r\n  /**\r\n   * è·åå®ä½\r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getEntity() {\r\n    const entityTypeInfo = this.frameContext.repository.entityTypeInfo;\r\n    const bindingData = this.frameContext.bindingData;\r\n    const childrenEntityPaths = [];\r\n    ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);\r\n    const entity = this.frameContext.bindingData.list.currentItem.toJSON();\r\n    entity['__type__'] = 'Entity';\r\n    if (!childrenEntityPaths || childrenEntityPaths.length < 1) {\r\n      return entity;\r\n    }\r\n    // æ¾å°ææå­è¡¨\r\n    childrenEntityPaths.forEach((paths: string[]) => {\r\n      const row = ExpressionUtil.getCurrentRowByPaths(paths, bindingData);\r\n      if (row) {\r\n        const propertyName = paths.pop();\r\n        let parent = paths.reduce((object: any, path: string) => {\r\n          return object && object[path] || null;\r\n        }, entity);\r\n        const node = { __items__: [...parent[propertyName]], ...row, __type__: 'List' };\r\n        parent[propertyName] = node;\r\n      }\r\n    });\r\n    return entity;\r\n  }\r\n  /**\r\n   * è·åä¸»å®ä½åå§å­æ®µå\r\n   */\r\n  protected get entityOriginalNodeCode(): string {\r\n    const repository = this.injector.get(Repository);\r\n    return repository && repository.entityTypeInfo && repository.entityTypeInfo.entityInfo && repository.entityTypeInfo.entityInfo.originalCode || null;\r\n  }\r\n  /**\r\n   * æé åéä¸ä¸æ\r\n   * @param event \r\n   * @returns \r\n   */\r\n  public buildStateContext() {\r\n    const ns = this.frameContext.namespace;\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    const frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);\r\n    const result = {};\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      const anonymousFrameContext = frameContexts[0];\r\n      const rootFrameContext = anonymousFrameContext.getVirtualRootFrameContext();\r\n      if (rootFrameContext) {\r\n        const uiState = rootFrameContext.viewModel.uiState;\r\n        const propertyNames = Object.getOwnPropertyNames(uiState) || [];\r\n        propertyNames.forEach((prop: string) => {\r\n          if (prop.match(/^[a-zA-Z0-9_\\$]+$/g) !== null) {\r\n            result[prop] = uiState[prop];\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}","import { ApplicationRef, ChangeDetectorRef, Injectable, Injector } from \"@angular/core\";\r\n\r\n/**\r\n * angular èå¼æ£æ¥æå¡\r\n */\r\n@Injectable()\r\nexport class DirtyCheckingService {\r\n  constructor(public injector: Injector, private cd: ChangeDetectorRef, private appRef: ApplicationRef) {\r\n  }\r\n  /**\r\n   * Checks this view and its children. \r\n   * @param global æ¯å¦å¨å±æ£æ¥\r\n   */\r\n  public detectChanges(global?: boolean | string) {\r\n    global = (global === true || global === 'true') ? true : false;\r\n    if (global && this.appRef) {\r\n      this.appRef.tick();\r\n    } else if (this.cd) {\r\n      this.cd.detectChanges();\r\n    }\r\n  }\r\n  /**\r\n   * å¨æå®æ¶é´ï¼msï¼åè§¦åAngularèå¼æ£æ¥\r\n   * @param duration è¶æ¶æ¶é´(ms)\r\n   * @param global æ¯å¦å¨å±æ£æ¥\r\n   */\r\n  public detectChangesAfter(duration: number, global?: boolean | string) {\r\n    global = (global === true || global === 'true') ? true : false;\r\n    if (isNaN(duration)) {\r\n      return;\r\n    }\r\n    if (global && this.appRef) {\r\n      window.setTimeout(() => {\r\n        this.appRef.tick();\r\n      }, duration);\r\n    } else if (this.cd) {\r\n      window.setTimeout(() => {\r\n        this.cd.detectChanges();\r\n      }, duration);\r\n    }\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { EMPTY, of } from \"rxjs\";\r\nimport { switchMap, tap } from \"rxjs/operators\";\r\nimport { BefRepository } from \"@farris/bef\";\r\nimport { FrameContext, DataPathCreator, Repository, DataPath, EntityList, BindingList, Entity } from \"@farris/devkit\";\r\nimport { LanguageService } from \"./languag.service\";\r\nimport { FormMessageService } from \"./form-message.service\";\r\n\r\n@Injectable()\r\nexport class PopUpService {\r\n  constructor(\r\n    private injector: Injector,\r\n    private frameContext: FrameContext,\r\n    private repository: Repository<any>,\r\n    private languageService: LanguageService,\r\n    private messageService: FormMessageService\r\n  ) { }\r\n  public confirm() { }\r\n  /**\r\n   * åæ¶åæ´\r\n   * @param frameId \r\n   * @param id \r\n   * @returns \r\n   */\r\n  public cancel(frameId: string, id?: string) {\r\n    const frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(frameId);\r\n    if (!frameContext) {\r\n      throw new Error(`[PopUpService]Invalid frameId ${frameId}`);\r\n    }\r\n    const primaryValue = this.frameContext.bindingData.list.currentId;\r\n    const bindingPath = frameContext.viewModel.bindingPath;\r\n    const bindingPaths = bindingPath.split('/').filter(p => p);\r\n    if (!id) {\r\n      const bindingList = this.frameContext.bindingData.getList() as BindingList;\r\n      id = bindingList.currentId;\r\n    }\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    const longPaths = (DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData) as DataPath).toArray().map((path: string) => path.split(':')[1]);\r\n    const entityListPaths = Array.from(longPaths);\r\n    //èå¼å½åè¡¨å½åè¡\r\n    entityListPaths.pop();\r\n    const dialogRef = this.frameContext.frameComponent['dialogRef'];\r\n    if (entityListPaths.length < 1) {\r\n      // ä¸»è¡¨\r\n      const entity = this.repository.entityCollection.getEntityById(id) as Entity;\r\n      const originalData = entity['originalData'];\r\n      entity.load(originalData, { loadChild: false });\r\n    } else {\r\n      const entityList = befRepository.entityManager.getEntityNodeByPath(entityListPaths) as EntityList<any>;\r\n      if (entityList) {\r\n        const originalData: any[] = entityList['originalData'];\r\n        const item = originalData.find(item => item.id === id);\r\n        if (item) {\r\n          // å·²ææ°æ®ï¼è¿ååæ´\r\n          const entity: Entity = befRepository.entityManager.getEntityByPath(longPaths) as Entity;\r\n          if (entity.changes && entity.changes.length > 0) {\r\n            return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(\r\n              tap((result: boolean) => {\r\n                if (result) {\r\n                  entity.load(item, { loadChild: false });\r\n                  entity.changes.splice(0, entity.changes.length);\r\n                }\r\n              })\r\n            );\r\n          } else {\r\n            // æ²¡æä¿®æ¹ï¼ç´æ¥å³é­\r\n            if (dialogRef) {\r\n              dialogRef.close();\r\n            }\r\n          }\r\n        } else {\r\n          // æ°å¢çæ°æ®ï¼å é¤\r\n          const paths = this.buildPath(bindingPath, primaryValue);\r\n          return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(\r\n            switchMap(result => {\r\n              if (result) {\r\n                return befRepository.removeEntityByPath(paths, id).pipe(\r\n                  tap(() => {\r\n                    befRepository.entityManager.removeEntityByPath(paths, id);\r\n\r\n                    if (entityList.count() === 0 && dialogRef) {\r\n                      dialogRef.close();\r\n                    }\r\n                  })\r\n                );\r\n              } else {\r\n                return EMPTY;\r\n              }\r\n            })\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return of([]);\r\n  }\r\n  /**\r\n   * åæ­¥å½åè¡\r\n   */\r\n  public updateCurrentRow(id?: string) {\r\n    const bindingPath = this.frameContext.viewModel.bindingPath;\r\n    const bindingPaths = bindingPath.split('/').filter(p => p);\r\n    // const frameId = this.frameContext.frameId;\r\n    const root = this.frameContext.appContext.frameContextManager.getRootFrameContext();\r\n    const primaryKeyValue = root.bindingData.list.currentId;\r\n    this.frameContext.bindingData.list.setCurrentId(primaryKeyValue);\r\n    if (bindingPaths.length > 0) {\r\n      const paths = [];\r\n      bindingPaths.forEach((path: string, index: number, array) => {\r\n        paths.push(path);\r\n        const bindingList = root.bindingData.getValue(paths) as BindingList;\r\n        if (bindingList) {\r\n          const currentId = bindingList.currentId;\r\n          const modalBindingList = this.frameContext.bindingData.getValue(paths) as BindingList;\r\n          if (index === bindingPath.length - 1 && id) {\r\n            modalBindingList.setCurrentId(id);\r\n          } else if (modalBindingList) {\r\n            modalBindingList.setCurrentId(currentId);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n  public closeCheck() {\r\n    const frameContext = this.frameContext;\r\n    const bindingPath = frameContext.viewModel.bindingPath;\r\n    const bindingPaths = bindingPath.split('/').filter(p => p);\r\n    const befRepository = this.repository as BefRepository<any>;\r\n    const longPaths = (DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData) as DataPath).toArray().map((path: string) => path.split(':')[1]);\r\n    const entityListPaths = Array.from(longPaths);\r\n    entityListPaths.pop();\r\n    const entityList = befRepository.entityManager.getEntityNodeByPath(entityListPaths) as EntityList<any>;\r\n    const dialogRef = this.frameContext.frameComponent['dialogRef'];\r\n    if (entityList.count() === 0 && dialogRef) {\r\n      dialogRef.close();\r\n    }\r\n  }\r\n  /**\r\n   * æé å­è¡¨è·¯å¾\r\n   * @param bindingPath ç»å®è·¯å¾\r\n   * @param id id\r\n   */\r\n  private buildPath(bindingPath: string, id: any) {\r\n    let path = '/' + id;\r\n    const subPaths = bindingPath.split('/');\r\n    if (subPaths.length > 0) {\r\n      // eg:bindingPathå½¢å¦/edus/grades,splitåæ¯['', 'edus', 'grades']\r\n      // å æ­¤indexä»1å¼å§\r\n      for (let index = 1; index < subPaths.length - 1; index++) {\r\n        const subPath = subPaths[index];\r\n        const subData = this.frameContext.viewModel.bindingData[subPath];\r\n        if (!subData || !subData.currentId) {\r\n          throw Error(`è·åå­è¡¨å®æ´è·¯å¾åºéï¼æ¾ä¸å°${subData}å¯¹åºçå­è¡¨ï¼æå¯¹åºå­è¡¨æ²¡æå½åè¡ã`);\r\n        }\r\n        path += `/${subPath}/${subData.currentId}`;\r\n      }\r\n    }\r\n    path += '/' + subPaths[subPaths.length - 1];\r\n\r\n    return path;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { AppContext, DataPropInfo, DataTypeInfo, Entity, FrameContext, NgFormControl, Repository } from \"@farris/devkit\";\r\n\r\n@Injectable()\r\nexport class FormService {\r\n  constructor(\r\n    private injector: Injector,\r\n    private appContext: AppContext,\r\n    private repository: Repository<Entity>\r\n  ) {\r\n  }\r\n  /**\r\n   * æ ¹æ®å­æ®µè·¯å¾è·åè¯¥å­æ®µå¨å¡çæè¡¨æ ¼ä¸­çç´¢å¼\r\n   * @param source ngFormControlsæany[][]\r\n   * @param propertyPath å­æ®µé¤bindingPathä¹å¤çå®æ´è·¯å¾\r\n   * @returns \r\n   */\r\n  public getIndex(source: { [propertyName: string]: NgFormControl } | any[], propertyPath: string) {\r\n    if (Array.isArray(source)) {\r\n      const combine: any[] = source.reduce((result: any[], group: any[]) => {\r\n        return result.concat(group);\r\n      }, []);\r\n      return combine.findIndex((item: any) => item.field === propertyPath);\r\n    } else if (Object.prototype.toString.call(source) === '[object Object]') {\r\n      return Object.keys(source).findIndex(key => source[key].binding === propertyPath);\r\n    }\r\n  }\r\n  \r\n}","import { Injectable } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\n\r\n@Injectable()\r\nexport class ViewModelService {\r\n  constructor() { }\r\n  public getGridColumns(frameContext: FrameContext): any[] {\r\n    const dataGridColumnsName = frameContext && frameContext.viewModel && frameContext.viewModel['dataGridColumnsName'] || null;\r\n    return dataGridColumnsName && frameContext.viewModel[dataGridColumnsName] || [];\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { DataPropGroup, FrameContext } from \"@farris/devkit\";\r\n\r\n@Injectable()\r\nexport class PaginationService {\r\n  constructor(private injector: Injector, private frameContext: FrameContext) { }\r\n  /**\r\n   * éç½®å­è¡¨åé¡µä¿¡æ¯\r\n   */\r\n  public resetChildrenPagination() {\r\n    const paginationInfo = this.frameContext.repository.entityCollection.paginationInfo || {};\r\n    const childrenEntityCodes = this.frameContext.repository.entityTypeInfo.getPropNamesByGroup(DataPropGroup.List) || [];\r\n    if (paginationInfo && Object.keys(paginationInfo).length > 0) {\r\n      const keys = Object.keys(paginationInfo);\r\n      keys.forEach((key: string) => {\r\n        const value = paginationInfo[key];\r\n        if (Object.prototype.toString.apply(value) !== '[object Object]') {\r\n          return;\r\n        }\r\n        const rowPagination = childrenEntityCodes.find((nodeCode: string) => {\r\n          // å»æs\r\n          nodeCode = nodeCode.slice(0, -1);\r\n          return key.startsWith(`${nodeCode}_`);\r\n        });\r\n        if (rowPagination) {\r\n          delete paginationInfo[key];\r\n        } else {\r\n          paginationInfo[key].pageIndex = 1;\r\n          delete paginationInfo[key].total;\r\n          delete paginationInfo[key].pageCount;\r\n        }\r\n      });\r\n      this.frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);\r\n    }\r\n  }\r\n}","import { Provider } from '@angular/core';\r\n\r\nimport { UIStateService } from '../ui-state.service';\r\nimport { StateMachineService } from '../state-machine.service';\r\nimport { ValidationService } from '../validation.service';\r\nimport { BindingDataService } from '../binding-data.service';\r\nimport { CommandService } from '../command-service';\r\nimport { NavigationMiddlewareService } from '../navigation-middleware.service';\r\nimport { GridMiddlewareService } from '../grid.middleware.service';\r\nimport { BeActionService } from '../be-action.service';\r\nimport { ApproveService } from '../approve.service';\r\nimport { PrintService } from '../print.service';\r\nimport { AttachmentDataService, AttachmentService, FileService } from '../attachment/index';\r\nimport {\r\n  EntityTraversingService, EntityManipulationService, EntityAggregationService,\r\n  EntityListService, EntityService\r\n} from '../entity-services/index';\r\nimport { SidebarService } from '../sidebar-service';\r\nimport { ChangeItemService } from '../change-item.service';\r\n\r\nimport {\r\n  ListDataService, CardDataService, SubListDataService, TreeDataService,\r\n  RemoveDataService, SaveDataService, EditDataService, SubTreeDataService\r\n} from '../data-services/index';\r\n\r\nimport { FarrisFormService } from '../farris-form.service';\r\nimport { DialogService } from '../dialog.service';\r\nimport { NavigationEventService } from '../navigation-event.service';\r\nimport { NavigationService } from '../navigation.service';\r\nimport { RouterService } from '../router.service';\r\nimport { AuthorityService } from '../authority/authority.service';\r\n\r\nimport { QuerySolutionService } from '../query-solution/query-solution.service';\r\nimport { QUERYSOLUTION_HANDLER_TOKEN } from '@gsp-cmp/querysolution';\r\nimport { FilterConditionDataService } from '../data-services/filter-condition-data.service';\r\nimport { FocusInvalidService } from '../focus-invalid.service';\r\nimport { EndEditService } from '../end-edit.service';\r\nimport { RemoteSummaryService } from '../remote-summary.service';\r\nimport { BatchEditService } from '../batch-edit.service';\r\nimport { BatchEditDialogService } from '@farris/ui-batch-edit-dialog';\r\nimport { FeatureEditorService } from '@farris/ui-feature-editor';\r\nimport { DiscussionGroupService } from '../discussion-group.service';\r\nimport { ListFilterConditionsService } from '../list-filter/list-filter.service';\r\nimport { LISTFILTER_HANDLER_TOKEN } from '@farris/ui-list-filter';\r\nimport { FORM_MANIFEST_SERVICE_TOKEN, FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN, FRAME_COMPONENT_INIT_HANDLER_TOKEN } from '@farris/devkit';\r\nimport { FormManifestService, FormExpressionManifestService } from '../manifest/index';\r\nimport { LocalizationService } from '../localization.service';\r\nimport { DataGridService } from '../data-grid.service';\r\nimport { FormAttentionService } from '../form-attention.service';\r\nimport { FeatureDataService, FeatureEditService } from '../feature-edit/index';\r\nimport { ExpressionService } from '../expression_service';\r\nimport { DirtyCheckingService } from '../dirty-checking.service';\r\nimport { FormMessageService } from '../form-message.service';\r\nimport { FormNotifyService } from '../form-notify.service';\r\nimport { PopUpService } from '../pop_up.service';\r\nimport { WorkFlowMessageHandler } from '../work-flow/index';\r\nimport { FormService } from '../form.service';\r\nimport { FormControlService } from '../form-control.service';\r\nimport { BindingPathService } from '../binding-path.service';\r\nimport { FrameContextService } from '../frame-context.service';\r\nimport { ViewModelService } from '../view-model.service';\r\nimport { PaginationService } from '../pagination.service';\r\n/**\r\n * ç»ä»¶çº§æ³¨å¥æ³¨å¥(å±23ä¸ª)\r\n */\r\nconst FARRIS_COMMAND_SERVICE_FRAME_PROVIDERS: Provider[] = [\r\n  ValidationService,\r\n  FocusInvalidService,\r\n  ChangeItemService,\r\n  UIStateService,\r\n  StateMachineService,\r\n  BindingDataService,\r\n  CommandService,\r\n\r\n  // entity-services\r\n  EntityTraversingService,\r\n  EntityManipulationService,\r\n  EntityAggregationService,\r\n  EntityListService,\r\n  EntityService,\r\n\r\n  // data-services\r\n  ListDataService,\r\n  TreeDataService,\r\n  SubTreeDataService,\r\n  CardDataService,\r\n  SubListDataService,\r\n  RemoveDataService,\r\n  SaveDataService,\r\n  EditDataService,\r\n  FilterConditionDataService,\r\n  RemoteSummaryService,\r\n\r\n  BeActionService,\r\n  ApproveService,\r\n  PrintService,\r\n  AttachmentDataService,\r\n  AttachmentService,\r\n  FileService,\r\n  NavigationMiddlewareService,\r\n  GridMiddlewareService,\r\n  SidebarService,\r\n  FarrisFormService,\r\n  DialogService,\r\n  NavigationEventService,\r\n  NavigationService,\r\n  RouterService,\r\n  AuthorityService,\r\n  {\r\n    provide: QUERYSOLUTION_HANDLER_TOKEN,\r\n    useClass: QuerySolutionService\r\n  },\r\n  {\r\n    provide: LISTFILTER_HANDLER_TOKEN,\r\n    useClass: ListFilterConditionsService\r\n  },\r\n  EndEditService,\r\n  BatchEditDialogService,\r\n  BatchEditService,\r\n  DiscussionGroupService,\r\n  LocalizationService,\r\n  DataGridService,\r\n  FormAttentionService,\r\n  FeatureEditorService,\r\n  FeatureDataService,\r\n  FeatureEditService,\r\n  ExpressionService,\r\n  PopUpService,\r\n  DirtyCheckingService,\r\n  FormService,\r\n  FormControlService,\r\n  BindingPathService,\r\n  FrameContextService,\r\n  ViewModelService,\r\n  PaginationService,\r\n  // è¡¨è¾¾å¼\r\n  { provide: FORM_MANIFEST_SERVICE_TOKEN, useClass: FormManifestService },\r\n  { provide: FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, useClass: FormExpressionManifestService },\r\n  { provide: MESSAGE_SERVICE_TOKEN, useClass: FormMessageService },\r\n  { provide: NOTIFY_SERVICE_TOKEN, useClass: FormNotifyService },\r\n  { provide: FRAME_COMPONENT_INIT_HANDLER_TOKEN, useClass: WorkFlowMessageHandler, multi: true }\r\n];\r\n\r\nexport { FARRIS_COMMAND_SERVICE_FRAME_PROVIDERS };\r\n","import { Provider } from '@angular/core';\r\n\r\nimport { RouterService } from '../router.service';\r\nimport { UIStateService } from '../ui-state.service';\r\nimport { StateMachineService } from '../state-machine.service';\r\nimport { ValidationService } from '../validation.service';\r\nimport { BindingDataService } from '../binding-data.service';\r\nimport { CommandService } from '../command-service';\r\n\r\nimport { NavigationEventService } from '../navigation-event.service';\r\nimport { NavigationService } from '../navigation.service';\r\nimport { NavigationMiddlewareService } from '../navigation-middleware.service';\r\nimport { GridMiddlewareService } from '../grid.middleware.service';\r\n\r\nimport { BeActionService } from '../be-action.service';\r\nimport { ApproveService } from '../approve.service';\r\nimport { PrintService } from '../print.service';\r\nimport { AttachmentDataService, AttachmentService, FileService } from '../attachment/index';\r\nimport {\r\n    EntityTraversingService, EntityManipulationService, EntityAggregationService,\r\n    EntityListService, EntityService\r\n} from '../entity-services/index';\r\nimport { DialogService } from '../dialog.service';\r\nimport { SidebarService } from '../sidebar-service';\r\nimport { FarrisFormService } from '../farris-form.service';\r\nimport { ChangeItemService } from '../change-item.service';\r\n\r\n// data-services\r\nimport { ListDataService } from '../data-services/list-data.service';\r\nimport { TreeDataService } from '../data-services/tree-data.service';\r\nimport { CardDataService } from '../data-services/card-data.service';\r\nimport { SubListDataService } from '../data-services/sub-list-data.service';\r\nimport { FocusInvalidService } from '../focus-invalid.service';\r\nimport { SubTreeDataService } from '../data-services/sub-tree-data-service';\r\nimport { RemoveDataService } from '../data-services/remove-data.service';\r\nimport { SaveDataService } from '../data-services/save-data.service';\r\nimport { EditDataService } from '../data-services/edit-data.service';\r\nimport { FilterConditionDataService } from '../data-services/filter-condition-data.service';\r\nimport { RemoteSummaryService } from '../remote-summary.service';\r\nimport { AuthorityService } from '../authority/authority.service';\r\nimport { EndEditService } from '../end-edit.service';\r\nimport { BatchEditService } from '../batch-edit.service';\r\nimport { DiscussionGroupService } from '../discussion-group.service';\r\nimport { LocalizationService } from '../localization.service';\r\nimport { DataGridService } from '../data-grid.service';\r\nimport { FormAttentionService } from '../form-attention.service';\r\nimport { FormManifestService } from '../manifest/form_manifest_service';\r\nimport { FormExpressionManifestService } from '../manifest/form_expression_manifest_service';\r\nimport { ListFilterConditionsService } from '../list-filter/list-filter.service';\r\nimport { QuerySolutionService } from '../query-solution/query-solution.service';\r\nimport { BatchEditDialogService } from '@farris/ui-batch-edit-dialog';\r\nimport { FORM_MANIFEST_SERVICE_TOKEN, FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN } from '@farris/devkit';\r\nimport { QUERYSOLUTION_HANDLER_TOKEN } from '@gsp-cmp/querysolution';\r\nimport { LISTFILTER_HANDLER_TOKEN } from '@farris/ui-list-filter';\r\n\r\n/**\r\n * ç»ä»¶çº§æ³¨å¥æ³¨å¥(å±23ä¸ª)\r\n */\r\nconst DYNAMIC_FARRIS_COMMAND_SERVICE_PROVIDERS: Provider[] = [\r\n    { provide: 'ValidationService', useClass: ValidationService },\r\n    { provide: 'FocusInvalidService', useClass: FocusInvalidService },\r\n    { provide: 'ChangeItemService', useClass: ChangeItemService },\r\n    { provide: 'UIStateService', useClass: UIStateService },\r\n    { provide: 'StateMachineService', useClass: StateMachineService },\r\n    { provide: 'BindingDataService', useClass: BindingDataService },\r\n    { provide: 'CommandService', useClass: CommandService },\r\n\r\n    // entity-services\r\n    { provide: 'EntityTraversingService', useClass: EntityTraversingService },\r\n    { provide: 'EntityManipulationService', useClass: EntityManipulationService },\r\n    { provide: 'EntityAggregationService', useClass: EntityAggregationService },\r\n    { provide: 'EntityListService', useClass: EntityListService },\r\n    { provide: 'EntityService', useClass: EntityService },\r\n\r\n    // data-services\r\n    { provide: 'ListDataService', useClass: ListDataService },\r\n    { provide: 'TreeDataService', useClass: TreeDataService },\r\n    { provide: 'SubTreeDataService', useClass: SubTreeDataService },\r\n    { provide: 'CardDataService', useClass: CardDataService },\r\n    { provide: 'SubListDataService', useClass: SubListDataService },\r\n    { provide: 'RemoveDataService', useClass: RemoveDataService },\r\n    { provide: 'SaveDataService', useClass: SaveDataService },\r\n    { provide: 'EditDataService', useClass: EditDataService },\r\n    { provide: 'FilterConditionDataService', useClass: FilterConditionDataService },\r\n    { provide: 'RemoteSummaryService', useClass: RemoteSummaryService },\r\n\r\n    { provide: 'BeActionService', useClass: BeActionService },\r\n    { provide: 'ApproveService', useClass: ApproveService },\r\n    { provide: 'PrintService', useClass: PrintService },\r\n    { provide: 'AttachmentDataService', useClass: AttachmentDataService },\r\n    { provide: 'AttachmentService', useClass: AttachmentService },\r\n    { provide: 'FileService', useClass: FileService },\r\n    { provide: 'NavigationMiddlewareService', useClass: NavigationMiddlewareService },\r\n    { provide: 'GridMiddlewareService', useClass: GridMiddlewareService },\r\n    { provide: 'SidebarService', useClass: SidebarService },\r\n    { provide: 'FarrisFormService', useClass: FarrisFormService },\r\n    { provide: 'DialogService', useClass: DialogService },\r\n    { provide: 'NavigationEventService', useClass: NavigationEventService },\r\n    { provide: 'NavigationService', useClass: NavigationService },\r\n    { provide: 'RouterService', useClass: RouterService },\r\n    { provide: 'AuthorityService', useClass: AuthorityService },\r\n    {\r\n        provide: QUERYSOLUTION_HANDLER_TOKEN,\r\n        useClass: QuerySolutionService\r\n    },\r\n    {\r\n        provide: LISTFILTER_HANDLER_TOKEN,\r\n        useClass: ListFilterConditionsService\r\n    },\r\n    { provide: 'EndEditService', useClass: EndEditService },\r\n    { provide: 'BatchEditDialogService', useClass: BatchEditDialogService },\r\n    { provide: 'BatchEditService', useClass: BatchEditService },\r\n    { provide: 'DiscussionGroupService', useClass: DiscussionGroupService },\r\n    { provide: 'LocalizationService', useClass: LocalizationService },\r\n    { provide: 'DataGridService', useClass: DataGridService },\r\n    { provide: 'FormAttentionService', useClass: FormAttentionService },\r\n    // è¡¨è¾¾å¼\r\n    { provide: FORM_MANIFEST_SERVICE_TOKEN, useClass: FormManifestService },\r\n    { provide: FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, useClass: FormExpressionManifestService }\r\n];\r\n\r\n\r\nexport { DYNAMIC_FARRIS_COMMAND_SERVICE_PROVIDERS };\r\n","import { NgModule } from '@angular/core';\r\nimport { FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS } from './providers/index';\r\nimport { WfTaskHandlerModule } from '@gsp-wf/wf-task-handler';\r\nimport { WorkFlowMessage } from './work-flow/index';\r\n\r\n@NgModule({\r\n  providers: FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS,\r\n  imports: [\r\n    WfTaskHandlerModule\r\n  ],\r\n  exports: [\r\n    WfTaskHandlerModule\r\n  ]\r\n})\r\nclass CommandServicesModule {\r\n  constructor(private workFlowMessage: WorkFlowMessage) {\r\n    if (this.workFlowMessage) {\r\n      this.workFlowMessage.setup();\r\n    }\r\n  }\r\n}\r\n\r\nexport { CommandServicesModule };\r\n","import { RuntimeFrameworkService } from '../rtf-service';\r\nimport { UID } from '@farris/devkit';\r\n\r\nexport class MessagePipe {\r\n    constructor(public token: string, private rtfService: RuntimeFrameworkService) { }\r\n    /**\r\n     * åç®¡éåéæ¶æ¯\r\n     * @param message æ¶æ¯\r\n     */\r\n    public sendMessage(message: any) {\r\n        this.rtfService.subjectNotify(this.token, message);\r\n        return this;\r\n    }\r\n    /**\r\n     * çå¬ç®¡éæ¶æ¯\r\n     * @param handler æ¶æ¯å¤çå¨\r\n     */\r\n    public listen(handler: (data: any) => void): () => void {\r\n        const observerToken = UID.create();\r\n        this.rtfService.subjectResponse(this.token, handler, observerToken);\r\n        const unListen = () => {\r\n            this.rtfService.responseUnSubscribe(this.token, observerToken);\r\n        };\r\n        return unListen;\r\n    }\r\n    /**\r\n     * éæ¯ç®¡é\r\n     */\r\n    public destory() {\r\n        this.rtfService.subjectRemove(this.token);\r\n    }\r\n}\r\n","import { MessagePipe } from './message-pipe';\r\nimport { RuntimeFrameworkService } from '../rtf-service';\r\nimport { Subject } from 'rxjs';\r\nimport { QuerystringService } from '../querystring';\r\n\r\nexport class MessagePipeService {\r\n  private static rtfService: RuntimeFrameworkService = new RuntimeFrameworkService();\r\n  private static querystringService: QuerystringService = new QuerystringService();\r\n  /**\r\n   * éè¿tokenè·åæ¶æ¯ç®¡é\r\n   * @param token æ¶æ¯ç®¡éæ è¯\r\n   */\r\n  public static get(token: string): MessagePipe {\r\n    const pipe = new MessagePipe(token, this.rtfService);\r\n    return pipe;\r\n  }\r\n  /**\r\n   * åå»ºæ¶æ¯ç®¡é\r\n   * @param pipeName ç®¡éåç§°\r\n   * @param useFormContext æ¯å¦ä½¿ç¨è¡¨åä¸ä¸æåå»ºç®¡éæ è¯\r\n   * @param pipeType ç®¡éç±»å(å¯é)ï¼é»è®¤Subject<any>\r\n   */\r\n  public static create(pipeName: string, useFormContext: boolean, pipeType?: Subject<any>): MessagePipe {\r\n    let options = null;\r\n    if (useFormContext) {\r\n      const params = this.querystringService.parse(window.location.hash);\r\n      const { funcId, appId, appEntrance } = params;\r\n      options = { funcId, appId, appEntrance };\r\n    }\r\n    const token = this.rtfService.subjectRegister(pipeName, options, pipeType);\r\n    if (!token) {\r\n      return null;\r\n    }\r\n    const pipe = new MessagePipe(token, this.rtfService);\r\n    return pipe;\r\n  }\r\n}\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { AppContext, BackEndMessage, BindingList, DataPropInfo, EventBus, FrameComponent, FrameContext, NgFormControl, Translate, TranslateToken } from '@farris/devkit';\r\n/**\r\n * åç«¯æ¶æ¯å¤çæå¡\r\n * @description\r\n * ### æå¡æ³¨å¥ä½ç½®\r\n *  1ãæ´ä¸ªè¡¨åçroot-component \r\n *  2ãå¼¹åºçªå£çroot-component \r\n */\r\n@Injectable()\r\nexport class BackEndMessageHandler implements BackEndMessage.IBackEndMessageHandler {\r\n  constructor(private injector: Injector, private frameContext: FrameContext, @Inject(TranslateToken) private translate: Translate) { }\r\n  /**\r\n   * å¤çåç«¯è¿åçæ¶æ¯æéè¯¯\r\n   * @param message æ¶æ¯æéè¯¯\r\n   */\r\n  public handle(message: BackEndMessage.IMessage, context: any) {\r\n    const isException = context && context.isException || false;\r\n    const hasThrowError = context && context.hasThrowError || false;\r\n    const eventBus = context && context.eventBus || null;\r\n    const error = context && context.error || null;\r\n    const formAppContext = context && context.formAppContext || null;\r\n    const result = this.collect(message, isException, hasThrowError, eventBus, error, formAppContext);\r\n    if (result && result.form && result.form.length > 0) {\r\n      result.form.forEach((item: { frameContext: FrameContext, message: any }) => {\r\n        item.frameContext.viewModel.form.updateFormErrors(item.message, true, 'backend');\r\n      });\r\n    } else {\r\n      this.resetFormMessage(message.context.appContext, message.context.ns);\r\n    }\r\n    const targetFrameContext: FrameContext = this.findTargetFrameContext(this.frameContext);\r\n    if (result && result.all && result.all.length > 0) {\r\n      targetFrameContext.viewModel.verifycationChanged.next(result.all);\r\n    } else {\r\n      if (result !== null) {\r\n        targetFrameContext.viewModel.verifycationChanged.next([]);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * æ¶éæ±æ»ä¿¡æ¯åformä¿¡æ¯\r\n   * @param backEndMessage \r\n   */\r\n  private collect(backEndMessage: BackEndMessage.IMessage, isException: boolean = false, hasThrowError: boolean = false, eventBus: EventBus = null, error: any = null, formAppContext: AppContext = null): { form: { frameContext: FrameContext, message: any }[], all: any[] } {\r\n    const bizMessages = backEndMessage && backEndMessage.bizMessages || null;\r\n    const appContext = backEndMessage && backEndMessage.context.appContext;\r\n    const ns = backEndMessage.context.ns;\r\n    if (!bizMessages || bizMessages.length < 1) {\r\n      return null;\r\n    }\r\n    const result = {\r\n      form: [],\r\n      all: []\r\n    };\r\n    let hasFormlessError = false;\r\n    for (let bizMessage of bizMessages) {\r\n      const message = bizMessage.message;\r\n      const location = bizMessage.location || null;\r\n      const columns = location && location.columns || null;\r\n      const nodeCode = location && location.nodeCode || null;\r\n      const rows = location && location.rows;\r\n      const bindingPath = this.getBindingPath(appContext, ns, nodeCode);\r\n      const bindingPaths = bindingPath && bindingPath.split('/').filter(p => p);\r\n\r\n      // ç®åä»å¤çælocationï¼ä¸æidãååãè¡¨åçã\r\n      if (!location || !columns || columns.length < 1 || !nodeCode || !rows || rows.length < 1) {\r\n        continue;\r\n      }\r\n      // éåæ°æ®è¡\r\n      for (let row of rows) {\r\n        for (let column of columns) {\r\n          // è·åå°ææç»å®è¯¥åæ°æ®çframeContext\r\n          let frameContexts = this.getFrameContextsByBindingPathAndColumnName(appContext, ns, bindingPath, column);\r\n          if (!frameContexts || frameContexts.length < 1) {\r\n            // æ²¡æä»»ä½ä¸ä¸ªç»ä»¶ç»å®è¯¥åçæ°æ®\r\n            hasFormlessError = true;\r\n            continue;\r\n          }\r\n          // æé¤æåªè¯»datagrid\r\n          frameContexts = frameContexts.filter((frameContext: FrameContext) => {\r\n            const isDataGridComponent = this.isDataGridComponent(frameContext.frameComponent);\r\n            if (isDataGridComponent) {\r\n              const isReadonlyDataGrid = this.isReadonlyDataGrid(frameContext.frameComponent);\r\n              if (isReadonlyDataGrid) {\r\n                return false;\r\n              } else {\r\n                return true;\r\n              }\r\n            }\r\n            return true;\r\n          });\r\n          // éåçè¡æ¯å¦ä¸ºå½åè¡\r\n          const isCurrentRow = this.isCurrentRow(appContext, ns, bindingPath, row);\r\n          // å¦ææ¯å½åè¡çè¯éè¦å°éè¯¯ä¿¡æ¯æ¾å°formä¸­\r\n          if (isCurrentRow) {\r\n            // å¿½ç¥grid\r\n            // const formFrameContexts = frameContexts.filter(frameContext => !this.isGridComponent(frameContext.frameComponent));\r\n            if (frameContexts && frameContexts.length > 0) {\r\n              frameContexts.forEach((frameContext: FrameContext) => {\r\n                // åªå¤çäºä¸ä¸ªç»ä»¶ä¸­ååªç»å®å°ä¸ä¸ªåç«¯æ§ä»¶çåºæ¯\r\n                const formControls = this.getFormControlByColumnName(frameContext, column);\r\n                if (formControls && formControls.length > 0) {\r\n                  formControls.forEach(([domPropertyName, formControl]) => {\r\n                    //const domPropertyName = formControl && formControl. || null;\r\n                    this.mergeMessage(result.form, frameContext, domPropertyName, message);\r\n                  });\r\n                }\r\n\r\n                //if (formControl && domPropertyName) {\r\n\r\n                //}\r\n              });\r\n            } else {\r\n            }\r\n          }\r\n          // å°éè¯¯ä¿¡æ¯æ¾å°æ±æ»ä¸­\r\n          frameContexts.forEach((frameContext: FrameContext) => {\r\n            const viewModelName = frameContext.viewModel.form.formGroupName;\r\n            const formControls = this.getFormControlByColumnName(frameContext, column);\r\n            if (formControls && formControls.length > 0) {\r\n              const [domPropertyName, formControl] = formControls.find(([propertyName, formControl]) => propertyName && propertyName.length > 0);\r\n              // const domPropertyName = domProperty && domProperty.propertyName;\r\n              const bindingList = frameContext.viewModel.bindingData.getValue(bindingPaths) as BindingList;\r\n              let index = bindingList.getIndexById(row);\r\n              const primary = `${row}_${column}_${message}`;\r\n              // TODO:è½ç¶è½çº æ­£æ±æ»æ¶æ¯æ¾ç¤ºéå¤çé®é¢ï¼ä½å¯è½å¯¼è´ç¹å»éè¯¯æ æ³å®ä½å°å¯¹åºæ§ä»¶çé®é¢ï¼å¾åç»­ä¼å\r\n              if (index >= 0 && result.all.findIndex(p => p.id === primary) === -1) {\r\n                // æ°æ®æºä¸­æå¤äº1è¡æ¶æ¾ç¤ºç´¢å¼\r\n                const position = (bindingList && bindingList.length > 1) ? (index + 1) : -1;\r\n                const title = this.buildItemTitle(viewModelName, formControl.name || formControl.defaultI18nValue || domPropertyName, position);\r\n                const item = {\r\n                  id: primary,\r\n                  index,\r\n                  targetField: formControl.id,\r\n                  title,\r\n                  msg: message,\r\n                  namespace: ns,\r\n                  bindingPath,\r\n                  type: 'error'\r\n                };\r\n                result.all.push(item);\r\n              }\r\n            }\r\n\r\n          });\r\n        }\r\n      }\r\n    }\r\n    if (hasFormlessError && isException && !hasThrowError && eventBus) {\r\n      eventBus.post('Exception', '', 'onException', error, formAppContext);\r\n    }\r\n    return result;\r\n  }\r\n  private mergeMessage(formItems: { frameContext: FrameContext, message: { [domPropertyName: string]: { errors: { [messageType: string]: { name: string } } } } }[], frameContext: FrameContext, domPropertyName: string, message: string) {\r\n    const targetItem = formItems.find(item => item.frameContext.frameId === frameContext.frameId);\r\n    if (targetItem) {\r\n      const isPropertyExist = targetItem.message && Object.keys(targetItem.message).includes(domPropertyName);\r\n      const messageType = `backend-message-${Object.keys(targetItem.message).length + 1}`;\r\n      if (isPropertyExist) {\r\n        targetItem.message[domPropertyName]['errors'][messageType] = { name: message };\r\n      } else {\r\n        targetItem.message[domPropertyName] = { errors: { [messageType]: { name: message } } };\r\n      }\r\n    } else {\r\n      formItems.push({\r\n        frameContext: frameContext,\r\n        message: {\r\n          [domPropertyName]: {\r\n            errors: {\r\n              'backend-message-1': { name: message }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n  private buildItemTitle(viewModelName: string, propertyName: string, index: any) {\r\n    const template = {\r\n      'zh-CHS': {\r\n        viewModelName: `$viewModel`,\r\n        index: `ç¬¬ $index è¡`,\r\n        propertyName: `- $propertyName`\r\n      },\r\n      'en': {\r\n        viewModelName: `$viewModel`,\r\n        index: `row $index`,\r\n        propertyName: `- $propertyName`\r\n      },\r\n      'zh-CHT': {\r\n        viewModelName: `$viewModel`,\r\n        index: `ç¬¬ $index è¡`,\r\n        propertyName: `- $propertyName`\r\n      }\r\n    };\r\n    const currentLanguage = this.translate.getCurrentLanguage() || 'zh-CHS';\r\n    const message = [];\r\n    if (viewModelName) {\r\n      message.push(template[currentLanguage]['viewModelName'].replace('$viewModel', viewModelName));\r\n    }\r\n    if (index > 0) {\r\n      message.push(template[currentLanguage]['index'].replace('$index', index));\r\n    }\r\n    if (propertyName) {\r\n      message.push(template[currentLanguage]['propertyName'].replace('$propertyName', propertyName));\r\n    }\r\n    return message.join(' ');\r\n  }\r\n  /**\r\n   * æ ¹æ®è¡¨åænodeCodeè·åç»å®è·¯å¾\r\n   * @param appContext appContext\r\n   * @param ns ns\r\n   * @param nodeCode è¡¨å\r\n   */\r\n  private getBindingPath(appContext: AppContext, ns: string, nodeCode: string) {\r\n    const frameContext = this.getFrameContext(appContext, ns);\r\n    return frameContext.repository.entityTypeInfo.getBindingPathByTableName(nodeCode);\r\n  }\r\n  /**\r\n   * éè¿ç»å®è·¯å¾åååæ¾å°ææç¬¦åæ¡ä»¶çè§å¾æ¨¡å(åæ¬gridåform)\r\n   * @param appContext appContext\r\n   * @param ns namespace\r\n   * @param bindingPath ç»å®è·¯å¾\r\n   * @param columnName åå\r\n   */\r\n  private getFrameContextsByBindingPathAndColumnName(appContext: AppContext, ns: string, bindingPath: string, columnName: string): FrameContext[] {\r\n    let frameContexts = appContext.frameContextManager.getFrameContexts();\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      // æ¾å°formä¸­ææ§ä»¶çframeContext\r\n      frameContexts = frameContexts.filter((frameContext: FrameContext) => {\r\n        // åºæ¬æ¡ä»¶æ¯å¦æ»¡è¶³\r\n        let isValidFrameContext = frameContext.namespace === ns && frameContext.viewModel.bindingPath === bindingPath && frameContext.viewModel.form && frameContext.viewModel.form.controls && Object.keys(frameContext.viewModel.form.controls).length > 0;\r\n        if (!isValidFrameContext) {\r\n          return false;\r\n        }\r\n        // åéè¿ååè¿æ»¤\r\n        const bindingPaths = bindingPath.split('/').filter(p => p);\r\n        const dataTypeInfo = frameContext.repository.entityTypeInfo.getTypeInfoByPath(bindingPaths);\r\n        if (dataTypeInfo) {\r\n          const dataPropInfos = Array.from(dataTypeInfo.propInfoMap.values());\r\n          // ä»å½åå®ä½å±æ§ä¸­æ¾å°æ°æ®å­æ®µä¸ºååçå±æ§\r\n          const entityPropertyInfo = dataPropInfos.find((propInfo: DataPropInfo) => propInfo.metadataInfo && (propInfo.metadataInfo.originalDataField === columnName || propInfo.metadataInfo.dataField === columnName));\r\n          if (entityPropertyInfo) {\r\n            const entityPropertyName = entityPropertyInfo.name;\r\n            const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === entityPropertyName);\r\n            if (ngFormControl) {\r\n              return true;\r\n            } else {\r\n              const item = Object.keys(frameContext.viewModel.form.ngFormControls).find(key => key === entityPropertyName);\r\n              return item ? true : false;\r\n            }\r\n          } else {\r\n            return false;\r\n          }\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n      return frameContexts;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * æ¯å¦ä¸ºdatagridç»ä»¶\r\n   * @param frameComponent component\r\n   */\r\n  private isDataGridComponent(frameComponent: FrameComponent) {\r\n    const columnNames = frameComponent.context.viewModel['dataGridColumnsName'] || null;\r\n    return columnNames ? true : false;\r\n  }\r\n  /**\r\n   * gridç»ä»¶æ¯å¦æ¯åªè¯»ç\r\n   * @param frameComponent frameComponent\r\n   * @returns \r\n   */\r\n  private isReadonlyDataGrid(frameComponent: FrameComponent) {\r\n    const frameContext = frameComponent.context;\r\n    const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;\r\n    if (dataGridColumnsName) {\r\n      const datagridColumns: any[] = frameContext.viewModel[dataGridColumnsName];\r\n      return datagridColumns.every((group: Array<any>) => {\r\n        return group.every(item => !item.editor);\r\n      });\r\n    } else {\r\n      throw new Error(`ä¼ å¥çç»ä»¶ä¸æ¯ä¸ä¸ªè¡¨æ ¼ï¼`);\r\n    }\r\n  }\r\n  /**\r\n   * idæ¯å¦ä¸ºå½åè¡\r\n   * @param appContext appContext\r\n   * @param ns namespace\r\n   * @param bindingPath bindingPath\r\n   * @param id id\r\n   */\r\n  private isCurrentRow(appContext: AppContext, ns: string, bindingPath: string, id: string) {\r\n    const bindingPaths = bindingPath.split('/').filter(p => p);\r\n    const frameContext = this.getFrameContext(appContext, ns);\r\n    const bindingData = frameContext.bindingData;\r\n    const bindingList = bindingData.getValue(bindingPaths) as BindingList;\r\n    return bindingList.currentItem.primaryKeyValue === id;\r\n  }\r\n  /**\r\n   * è·åå½ånsä¸çrootFrameContext\r\n   * @param appContext appcontext\r\n   * @param ns namespace\r\n   */\r\n  private getFrameContext(appContext: AppContext, ns: string) {\r\n    const frameContexts = appContext.frameContextManager.getFrameContexts();\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      const randomFrameContext = frameContexts.find(frameContext => frameContext.namespace === ns);\r\n      if (randomFrameContext) {\r\n        const virtualRootFrameContext = randomFrameContext.getVirtualRootFrameContext();\r\n        return virtualRootFrameContext;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * éè¿ç»å®è·¯å¾åååè·åç»å®å°è¯¥åçformControl\r\n   */\r\n  private getFormControlByColumnName(frameContext: FrameContext, columnName: string): Array<[string, NgFormControl]> {\r\n    const bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(p => p);\r\n    // éè¿bindingPathæ¾å°å¯¹åºçå®ä½ä¿¡æ¯\r\n    const typeInfo = frameContext.repository.entityTypeInfo.getTypeInfoByPath(bindingPaths);\r\n\r\n    const propsInfo = Array.from(typeInfo.propInfoMap.values());\r\n    const propInfo = propsInfo.find((propInfo: DataPropInfo) => propInfo.metadataInfo && (propInfo.metadataInfo.originalDataField === columnName || propInfo.metadataInfo.dataField === columnName));\r\n    if (propInfo) {\r\n      const mappingName = propInfo.name;\r\n      const formControls: Array<[string, NgFormControl]> = Object.entries(frameContext.viewModel.form.ngFormControls).filter((item) => item[1].binding === mappingName || item[0] === mappingName);\r\n      // const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === mappingName);\r\n      if (formControls) {\r\n        return formControls;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  private resetFormMessage(appContext: AppContext, ns: string) {\r\n    const frameContexts = appContext.frameContextManager.getFrameContexts().filter(frameContext => frameContext.namespace === ns);\r\n    frameContexts.forEach(frameContext => frameContext && frameContext.viewModel && frameContext.viewModel.form && frameContext.viewModel.form.clearBackendError());\r\n  }\r\n  /**\r\n   * éå½æ¾å°å±ç¤ºæ¶æ¯çç»ä»¶ä¸ä¸æ\r\n   * @param frameContext frameContext\r\n   */\r\n  private findTargetFrameContext(frameContext: FrameContext): FrameContext {\r\n    const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\r\n    const virtualRootComponent = virtualRootFrameContext.frameComponent;\r\n    const isDialogComponent = virtualRootComponent && virtualRootComponent['isDialogRootComponent'] || false;\r\n    if (isDialogComponent) {\r\n      // å¦ææ¶æ¯å¤çæå¡æ¯å¼¹çªåçï¼åæ¶æ¯æç¤ºå±ç¤ºå¨å¼¹çªå\r\n      return virtualRootFrameContext;\r\n    } else {\r\n      // å½åæ¶æ¯æå¡ä¸å¨å¼¹çªåï¼éå½åä¸æ¥æ¾ï¼æ¾å°ç¬¬ä¸ä¸ªå¼¹çªï¼å¦ææ¾ä¸å°åæ¾å°æä¸çroot-component\r\n      const parentFrameContext = virtualRootFrameContext.parent;\r\n      if (parentFrameContext) {\r\n        return this.findTargetFrameContext(parentFrameContext);\r\n      } else {\r\n        return virtualRootFrameContext;\r\n      }\r\n    }\r\n  }\r\n}"]}