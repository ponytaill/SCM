import { VariableParseService } from '../variable/index';
/**
 * 状态机上下文
 */
export class StateMachineContext {
    /**
     * 构造函数
     * @param stateMachine 状态机实例
     * @param initialState 初始状态
     */
    constructor(stateMachine, initialState) {
        this.stateMachine = stateMachine;
        this.state = initialState.name;
    }
    /**
     * 初始化
     */
    init(frameContext) {
        this.viewModelContext = frameContext;
        this.parser = this.viewModelContext.injector.get(VariableParseService);
        this.stateMachineWatcher = this.stateMachine.stateMachineWatcher;
    }
    /**
     * 状态迁移
     * @param stateName 下一状态的名称
     */
    transitTo(stateName) {
        const nextState = this.stateMachine.states[stateName];
        if (nextState) {
            this.state = nextState.name;
            this.stateMachine.render();
        }
    }
    /**
     * 获取expression对应的UIState值
     * @param expression UIState表达式
     */
    getUIState(expression) {
        if (!expression) {
            return;
        }
        const viewModelContext = this.stateMachineWatcher.getViewModelContext(expression);
        if (!viewModelContext) {
            return;
        }
        this.stateMachineWatcher.subscribeUIStateChange(viewModelContext, expression);
        if (this.parser) {
            const value = this.parser.parse(expression, viewModelContext);
            if (value === null) {
                return null;
            }
            if (typeof value === 'object' && Object.keys(value).length === 0) {
                return null;
            }
            return value;
        }
        else {
            throw new Error('未初始化变量解析器。');
        }
    }
    /**
     * 获取数据的值
     */
    getData(expression) {
        if (!expression) {
            return;
        }
        const viewModelContext = this.stateMachineWatcher.getViewModelContext(expression);
        if (!viewModelContext) {
            return;
        }
        this.stateMachineWatcher.subscribeEntityChange(viewModelContext, expression);
        if (this.parser) {
            const value = this.parser.parse(expression, viewModelContext);
            if (value === null) {
                return null;
            }
            if (typeof value === 'object' && Object.keys(value).length === 0) {
                return null;
            }
            return value;
        }
        else {
            throw new Error('未初始化变量解析器。');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGVfbWFjaGluZV9jb250ZXh0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3N0YXRlLW1hY2hpbmUvc3RhdGVfbWFjaGluZV9jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBSXpEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG1CQUFtQjtJQTJCOUI7Ozs7T0FJRztJQUNILFlBQW1CLFlBQTBCLEVBQUUsWUFBbUI7UUFBL0MsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDM0MsSUFBSSxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7T0FFRztJQUNJLElBQUksQ0FBQyxZQUE4QjtRQUN4QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsWUFBWSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQztJQUNuRSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksU0FBUyxDQUFDLFNBQWlCO1FBQ2hDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RELElBQUksU0FBUyxFQUFFO1lBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQzVCLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksVUFBVSxDQUFDLFVBQWtCO1FBQ2xDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDZixPQUFPO1NBQ1I7UUFDRCxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNsRixJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDckIsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLHNCQUFzQixDQUFDLGdCQUFnQixFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRTlFLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQzlELElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtnQkFDbEIsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUNELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDaEUsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUNELE9BQU8sS0FBSyxDQUFDO1NBQ2Q7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDL0I7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxPQUFPLENBQUMsVUFBa0I7UUFDL0IsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLE9BQU87U0FDUjtRQUNELE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2xGLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUNyQixPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsbUJBQW1CLENBQUMscUJBQXFCLENBQUMsZ0JBQWdCLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFN0UsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFDOUQsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO2dCQUNsQixPQUFPLElBQUksQ0FBQzthQUNiO1lBQ0QsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUNoRSxPQUFPLElBQUksQ0FBQzthQUNiO1lBQ0QsT0FBTyxLQUFLLENBQUM7U0FDZDthQUFNO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMvQjtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YXRlTWFjaGluZSB9IGZyb20gJy4vc3RhdGVfbWFjaGluZSc7XHJcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IENvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L2NvbnRleHQnO1xyXG5pbXBvcnQgeyBWYXJpYWJsZVBhcnNlU2VydmljZSB9IGZyb20gJy4uL3ZhcmlhYmxlL2luZGV4JztcclxuaW1wb3J0IHsgVmlld01vZGVsQ29udGV4dCB9IGZyb20gJy4uL3ZpZXctbW9kZWwvaW5kZXgnO1xyXG5pbXBvcnQgeyBTdGF0ZU1hY2hpbmVXYXRjaGVyIH0gZnJvbSAnLi9zdGF0ZV9tYWNoaW5lX3dhdGNoZXInO1xyXG5cclxuLyoqXHJcbiAqIOeKtuaAgeacuuS4iuS4i+aWh1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN0YXRlTWFjaGluZUNvbnRleHQge1xyXG5cclxuICAvKipcclxuICAgKiDlvZPliY3nirbmgIHlkI3np7BcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGU6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICog54i2Q29udGV4dFxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYXJlbnQ6IENvbnRleHQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIOWPmOmHj+ino+aekOWZqFxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYXJzZXI6IGFueTtcclxuXHJcbiAgLyoqXHJcbiAgICogVmlld01vZGVs5LiK5LiL5paHXHJcbiAgICovXHJcbiAgcHVibGljIHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIOeKtuaAgeacuuS6i+S7tuebkeWQrFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0ZU1hY2hpbmVXYXRjaGVyOiBTdGF0ZU1hY2hpbmVXYXRjaGVyO1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKiBAcGFyYW0gc3RhdGVNYWNoaW5lIOeKtuaAgeacuuWunuS+i1xyXG4gICAqIEBwYXJhbSBpbml0aWFsU3RhdGUg5Yid5aeL54q25oCBXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IocHVibGljIHN0YXRlTWFjaGluZTogU3RhdGVNYWNoaW5lLCBpbml0aWFsU3RhdGU6IFN0YXRlKSB7XHJcbiAgICB0aGlzLnN0YXRlID0gaW5pdGlhbFN0YXRlLm5hbWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJ3lp4vljJZcclxuICAgKi9cclxuICBwdWJsaWMgaW5pdChmcmFtZUNvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQpIHtcclxuICAgIHRoaXMudmlld01vZGVsQ29udGV4dCA9IGZyYW1lQ29udGV4dDtcclxuICAgIHRoaXMucGFyc2VyID0gdGhpcy52aWV3TW9kZWxDb250ZXh0LmluamVjdG9yLmdldChWYXJpYWJsZVBhcnNlU2VydmljZSk7XHJcbiAgICB0aGlzLnN0YXRlTWFjaGluZVdhdGNoZXIgPSB0aGlzLnN0YXRlTWFjaGluZS5zdGF0ZU1hY2hpbmVXYXRjaGVyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog54q25oCB6L+B56e7XHJcbiAgICogQHBhcmFtIHN0YXRlTmFtZSDkuIvkuIDnirbmgIHnmoTlkI3np7BcclxuICAgKi9cclxuICBwdWJsaWMgdHJhbnNpdFRvKHN0YXRlTmFtZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBuZXh0U3RhdGUgPSB0aGlzLnN0YXRlTWFjaGluZS5zdGF0ZXNbc3RhdGVOYW1lXTtcclxuICAgIGlmIChuZXh0U3RhdGUpIHtcclxuICAgICAgdGhpcy5zdGF0ZSA9IG5leHRTdGF0ZS5uYW1lO1xyXG4gICAgICB0aGlzLnN0YXRlTWFjaGluZS5yZW5kZXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlmV4cHJlc3Npb27lr7nlupTnmoRVSVN0YXRl5YC8XHJcbiAgICogQHBhcmFtIGV4cHJlc3Npb24gVUlTdGF0ZeihqOi+vuW8j1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRVSVN0YXRlKGV4cHJlc3Npb246IHN0cmluZyk6IGFueSB7XHJcbiAgICBpZiAoIWV4cHJlc3Npb24pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgdmlld01vZGVsQ29udGV4dCA9IHRoaXMuc3RhdGVNYWNoaW5lV2F0Y2hlci5nZXRWaWV3TW9kZWxDb250ZXh0KGV4cHJlc3Npb24pO1xyXG4gICAgaWYgKCF2aWV3TW9kZWxDb250ZXh0KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnN0YXRlTWFjaGluZVdhdGNoZXIuc3Vic2NyaWJlVUlTdGF0ZUNoYW5nZSh2aWV3TW9kZWxDb250ZXh0LCBleHByZXNzaW9uKTtcclxuXHJcbiAgICBpZiAodGhpcy5wYXJzZXIpIHtcclxuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnBhcnNlci5wYXJzZShleHByZXNzaW9uLCB2aWV3TW9kZWxDb250ZXh0KTtcclxuICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcign5pyq5Yid5aeL5YyW5Y+Y6YeP6Kej5p6Q5Zmo44CCJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bmlbDmja7nmoTlgLxcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RGF0YShleHByZXNzaW9uOiBzdHJpbmcpOiBhbnkge1xyXG4gICAgaWYgKCFleHByZXNzaW9uKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHZpZXdNb2RlbENvbnRleHQgPSB0aGlzLnN0YXRlTWFjaGluZVdhdGNoZXIuZ2V0Vmlld01vZGVsQ29udGV4dChleHByZXNzaW9uKTtcclxuICAgIGlmICghdmlld01vZGVsQ29udGV4dCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zdGF0ZU1hY2hpbmVXYXRjaGVyLnN1YnNjcmliZUVudGl0eUNoYW5nZSh2aWV3TW9kZWxDb250ZXh0LCBleHByZXNzaW9uKTtcclxuXHJcbiAgICBpZiAodGhpcy5wYXJzZXIpIHtcclxuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnBhcnNlci5wYXJzZShleHByZXNzaW9uLCB2aWV3TW9kZWxDb250ZXh0KTtcclxuICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcign5pyq5Yid5aeL5YyW5Y+Y6YeP6Kej5p6Q5Zmo44CCJyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==