import { Injectable, Optional } from '@angular/core';
import { of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { BefRepositoryUtil } from '@farris/bef';
import { TAB_EVENT } from './types';
import { NavigationService } from './navigation.service';
import { FrameContext, UID } from '@farris/devkit';
import { FormMessageService } from './form-message.service';
import { LanguageService } from './languag.service';
import { CardDataService } from './data-services/card-data.service';
/**
 * 导航中间件服务
 * @scope FrameComponent
 */
// tslint:disable: no-string-literal
export class NavigationMiddlewareService {
    constructor(navigationService, frameContext, msgService, languageService, cardDataService) {
        this.navigationService = navigationService;
        this.frameContext = frameContext;
        this.msgService = msgService;
        this.languageService = languageService;
        this.cardDataService = cardDataService;
        this.repository = frameContext.repository;
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
        if (this.frameContext) {
            this.appContext = this.frameContext.getFormAppContext() || null;
        }
    }
    /**
     * 关闭前处理
     */
    onClosing() {
        if (this.isInDialog()) {
            return;
        }
        this.navigationService.addEventListener(TAB_EVENT.onTabClosing, (options) => {
            if (this.isChanged && !this.appContext.opened) {
                // 如果需要用户确认就切换到当前tab
                if (options && options.beforeCloseHandle && typeof options.beforeCloseHandle === 'function') {
                    options.beforeCloseHandle({ selectedChange: true });
                }
                const conform = this.msgService.question(this.languageService['exitWithoutSave']);
                /*记录弹窗已打开*/
                this.appContext.opened = true;
                return conform.pipe(switchMap((result) => {
                    this.appContext.opened = false;
                    if (result) {
                        /*记录用户关闭弹窗*/
                        if (!!this.cardDataService) {
                            const revert$ = this.cardDataService.revert(options);
                            return revert$.pipe(switchMap(() => of(result)));
                        }
                    }
                    return of(result);
                }));
            }
            else if (this.isChanged && this.appContext.opened) {
                return of(false);
            }
            else {
                return of(true);
            }
        });
    }
    /**
     * 是否在是弹窗窗口内
     */
    isInDialog() {
        let frameContext = this.frameContext;
        let isDialogRootComponent = frameContext.frameComponent['isDialogRootComponent'] || false;
        while (frameContext.parent !== null && !isDialogRootComponent) {
            frameContext = frameContext.parent;
            isDialogRootComponent = frameContext.frameComponent['isDialogRootComponent'];
        }
        return isDialogRootComponent;
    }
    /**
     * 获取tabid,如果targetId存在则直接使用targetId
     * @description 将用户要查看的数据id转换为运行框架需要的tabId
     * @param params router参数
     * @param targetId 要编辑/查看的数据id
     */
    getTabId(params, targetId) {
        if (!!targetId) {
            return targetId;
        }
        let paramsObj = null;
        if (!!params && params.startsWith('{') && params.endsWith('}')) {
            paramsObj = JSON.parse(params);
        }
        let paramId = null;
        if (paramsObj && paramsObj.hasOwnProperty('id') && !!paramsObj.id) {
            paramId = paramsObj.id;
        }
        else {
            paramId = UID.create();
        }
        return paramId;
    }
    /**
     * 是否有未保存的变更
     */
    get isChanged() {
        const befRepository = this.repository;
        return BefRepositoryUtil.isExistUnsaveData(befRepository);
    }
}
NavigationMiddlewareService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NavigationMiddlewareService.ctorParameters = () => [
    { type: NavigationService },
    { type: FrameContext },
    { type: FormMessageService },
    { type: LanguageService, decorators: [{ type: Optional }] },
    { type: CardDataService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdGlvbi1taWRkbGV3YXJlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvbmF2aWdhdGlvbi1taWRkbGV3YXJlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMxQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFpQixpQkFBaUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMvRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQWMsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNwRTs7O0dBR0c7QUFDSCxvQ0FBb0M7QUFFcEMsTUFBTSxPQUFPLDJCQUEyQjtJQUl0QyxZQUNVLGlCQUFvQyxFQUNwQyxZQUEwQixFQUMxQixVQUE4QixFQUNsQixlQUFnQyxFQUM1QyxlQUFnQztRQUpoQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLGVBQVUsR0FBVixVQUFVLENBQW9CO1FBQ2xCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUM1QyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFFeEMsSUFBSSxDQUFDLFVBQVUs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UUFDRCxJQUFJLFNBQVMsR0FBUSxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM5RCxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNoQztRQUNELElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFO1lBQ2pFLE9BQU8sR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDO1NBQ3hCO2FBQU07WUFDTCxPQUFPLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3hCO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUNEOztPQUVHO0lBQ0gsSUFBWSxTQUFTO1FBQ25CLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFnQyxDQUFDO1FBQzVELE9BQU8saUJBQWlCLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDNUQsQ0FBQzs7O1lBbEdGLFVBQVU7Ozs7WUFWRixpQkFBaUI7WUFDakIsWUFBWTtZQUNaLGtCQUFrQjtZQUNsQixlQUFlLHVCQWdCbkIsUUFBUTtZQWZKLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEJlZlJlcG9zaXRvcnksIEJlZlJlcG9zaXRvcnlVdGlsIH0gZnJvbSAnQGZhcnJpcy9iZWYnO1xyXG5pbXBvcnQgeyBUQUJfRVZFTlQgfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgTmF2aWdhdGlvblNlcnZpY2UgfSBmcm9tICcuL25hdmlnYXRpb24uc2VydmljZSc7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCwgUmVwb3NpdG9yeSwgVUlEIH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBGb3JtTWVzc2FnZVNlcnZpY2UgfSBmcm9tICcuL2Zvcm0tbWVzc2FnZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9sYW5ndWFnLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDYXJkRGF0YVNlcnZpY2UgfSBmcm9tICcuL2RhdGEtc2VydmljZXMvY2FyZC1kYXRhLnNlcnZpY2UnO1xyXG4vKipcclxuICog5a+86Iiq5Lit6Ze05Lu25pyN5YqhXHJcbiAqIEBzY29wZSBGcmFtZUNvbXBvbmVudFxyXG4gKi9cclxuLy8gdHNsaW50OmRpc2FibGU6IG5vLXN0cmluZy1saXRlcmFsXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE5hdmlnYXRpb25NaWRkbGV3YXJlU2VydmljZSB7XHJcbiAgcHJpdmF0ZSByZXBvc2l0b3J5OiBSZXBvc2l0b3J5PGFueT47XHJcblxyXG4gIHByaXZhdGUgYXBwQ29udGV4dDogYW55O1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBuYXZpZ2F0aW9uU2VydmljZTogTmF2aWdhdGlvblNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LFxyXG4gICAgcHJpdmF0ZSBtc2dTZXJ2aWNlOiBGb3JtTWVzc2FnZVNlcnZpY2UsXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBjYXJkRGF0YVNlcnZpY2U6IENhcmREYXRhU2VydmljZVxyXG4gICkge1xyXG4gICAgdGhpcy5yZXBvc2l0b3J5ID0gZnJhbWVDb250ZXh0LnJlcG9zaXRvcnk7XHJcbiAgICBpZiAoIXRoaXMubGFuZ3VhZ2VTZXJ2aWNlKSB7XHJcbiAgICAgIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlID0gTGFuZ3VhZ2VTZXJ2aWNlLmdldEluc3RhbmNlKCk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5mcmFtZUNvbnRleHQpIHtcclxuICAgICAgdGhpcy5hcHBDb250ZXh0ID0gdGhpcy5mcmFtZUNvbnRleHQuZ2V0Rm9ybUFwcENvbnRleHQoKSB8fCBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDlhbPpl63liY3lpITnkIZcclxuICAgKi9cclxuICBwdWJsaWMgb25DbG9zaW5nKCkge1xyXG4gICAgaWYgKHRoaXMuaXNJbkRpYWxvZygpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMubmF2aWdhdGlvblNlcnZpY2UuYWRkRXZlbnRMaXN0ZW5lcihUQUJfRVZFTlQub25UYWJDbG9zaW5nLCAob3B0aW9ucykgPT4ge1xyXG4gICAgICBpZiAodGhpcy5pc0NoYW5nZWQgJiYgIXRoaXMuYXBwQ29udGV4dC5vcGVuZWQpIHtcclxuICAgICAgICAvLyDlpoLmnpzpnIDopoHnlKjmiLfnoa7orqTlsLHliIfmjaLliLDlvZPliY10YWJcclxuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmJlZm9yZUNsb3NlSGFuZGxlICYmIHR5cGVvZiBvcHRpb25zLmJlZm9yZUNsb3NlSGFuZGxlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICBvcHRpb25zLmJlZm9yZUNsb3NlSGFuZGxlKHsgc2VsZWN0ZWRDaGFuZ2U6IHRydWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvbmZvcm0gPSB0aGlzLm1zZ1NlcnZpY2UucXVlc3Rpb24odGhpcy5sYW5ndWFnZVNlcnZpY2VbJ2V4aXRXaXRob3V0U2F2ZSddKTtcclxuICAgICAgICAvKuiusOW9leW8ueeql+W3suaJk+W8gCovXHJcbiAgICAgICAgdGhpcy5hcHBDb250ZXh0Lm9wZW5lZCA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuIGNvbmZvcm0ucGlwZShcclxuICAgICAgICAgIHN3aXRjaE1hcCgocmVzdWx0OiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwQ29udGV4dC5vcGVuZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgIC8q6K6w5b2V55So5oi35YWz6Zet5by556qXKi9cclxuICAgICAgICAgICAgICBpZiAoISF0aGlzLmNhcmREYXRhU2VydmljZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmV2ZXJ0JCA9IHRoaXMuY2FyZERhdGFTZXJ2aWNlLnJldmVydChvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXZlcnQkLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoKSA9PiBvZihyZXN1bHQpKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG9mKHJlc3VsdCk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0NoYW5nZWQgJiYgdGhpcy5hcHBDb250ZXh0Lm9wZW5lZCkge1xyXG4gICAgICAgIHJldHVybiBvZihmYWxzZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5piv5ZCm5Zyo5piv5by556qX56qX5Y+j5YaFXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpc0luRGlhbG9nKCkge1xyXG4gICAgbGV0IGZyYW1lQ29udGV4dCA9IHRoaXMuZnJhbWVDb250ZXh0O1xyXG4gICAgbGV0IGlzRGlhbG9nUm9vdENvbXBvbmVudCA9IGZyYW1lQ29udGV4dC5mcmFtZUNvbXBvbmVudFsnaXNEaWFsb2dSb290Q29tcG9uZW50J10gfHwgZmFsc2U7XHJcbiAgICB3aGlsZSAoZnJhbWVDb250ZXh0LnBhcmVudCAhPT0gbnVsbCAmJiAhaXNEaWFsb2dSb290Q29tcG9uZW50KSB7XHJcbiAgICAgIGZyYW1lQ29udGV4dCA9IGZyYW1lQ29udGV4dC5wYXJlbnQ7XHJcbiAgICAgIGlzRGlhbG9nUm9vdENvbXBvbmVudCA9IGZyYW1lQ29udGV4dC5mcmFtZUNvbXBvbmVudFsnaXNEaWFsb2dSb290Q29tcG9uZW50J107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXNEaWFsb2dSb290Q29tcG9uZW50O1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5Z0YWJpZCzlpoLmnpx0YXJnZXRJZOWtmOWcqOWImeebtOaOpeS9v+eUqHRhcmdldElkXHJcbiAgICogQGRlc2NyaXB0aW9uIOWwhueUqOaIt+imgeafpeeci+eahOaVsOaNrmlk6L2s5o2i5Li66L+Q6KGM5qGG5p626ZyA6KaB55qEdGFiSWRcclxuICAgKiBAcGFyYW0gcGFyYW1zIHJvdXRlcuWPguaVsFxyXG4gICAqIEBwYXJhbSB0YXJnZXRJZCDopoHnvJbovpEv5p+l55yL55qE5pWw5o2uaWRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0VGFiSWQocGFyYW1zOiBzdHJpbmcsIHRhcmdldElkOiBzdHJpbmcpOiBhbnkge1xyXG4gICAgaWYgKCEhdGFyZ2V0SWQpIHtcclxuICAgICAgcmV0dXJuIHRhcmdldElkO1xyXG4gICAgfVxyXG4gICAgbGV0IHBhcmFtc09iajogYW55ID0gbnVsbDtcclxuICAgIGlmICghIXBhcmFtcyAmJiBwYXJhbXMuc3RhcnRzV2l0aCgneycpICYmIHBhcmFtcy5lbmRzV2l0aCgnfScpKSB7XHJcbiAgICAgIHBhcmFtc09iaiA9IEpTT04ucGFyc2UocGFyYW1zKTtcclxuICAgIH1cclxuICAgIGxldCBwYXJhbUlkID0gbnVsbDtcclxuICAgIGlmIChwYXJhbXNPYmogJiYgcGFyYW1zT2JqLmhhc093blByb3BlcnR5KCdpZCcpICYmICEhcGFyYW1zT2JqLmlkKSB7XHJcbiAgICAgIHBhcmFtSWQgPSBwYXJhbXNPYmouaWQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBwYXJhbUlkID0gVUlELmNyZWF0ZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhcmFtSWQ7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOaYr+WQpuacieacquS/neWtmOeahOWPmOabtFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0IGlzQ2hhbmdlZCgpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IGJlZlJlcG9zaXRvcnkgPSB0aGlzLnJlcG9zaXRvcnkgYXMgQmVmUmVwb3NpdG9yeTxhbnk+O1xyXG4gICAgcmV0dXJuIEJlZlJlcG9zaXRvcnlVdGlsLmlzRXhpc3RVbnNhdmVEYXRhKGJlZlJlcG9zaXRvcnkpO1xyXG4gIH1cclxufVxyXG4iXX0=