/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { ModalModule } from '@farris/ui-modal';
import { GRID_SETTINGS_SERVICE, DatagridModule } from '@farris/ui-datagrid';
import { MultiSelectModule } from '@farris/ui-multi-select';
import { FarrisCommonModule } from '@farris/ui-common';
import { LocaleModule } from '@farris/ui-locale';
import { MessagerModule } from '@farris/ui-messager';
import { ComboListModule } from '@farris/ui-combo-list';
import { SwitchModule } from '@farris/ui-switch';
import { FarrisTooltipModule } from '@farris/ui-tooltip';
import { NotifyModule } from '@farris/ui-notify';
import { OrganizationSelectorModule } from '@farris/ui-organization-selector';
import { DatagridSettingsComponent } from './datagrid-settings.component';
import { DatagridSettingsService } from './datagrid-settings.service';
import { DatagridSortSettingComponent } from './datagrid-sort-setting.component';
import { DatagridViewColumnsComponent } from './datagrid-view-columns.component';
import { ColumnFormatSettingComponent } from './column-format-setting/column-format-setting.component';
import { ColumnGroupSettingComponent } from './column-group/column-group.component';
import { ColumnVisibleDragDirective } from './column-format-setting/column-visible-drag.directive';
import { ColumnGroupDragDirective } from './column-group/column-group-drag.directive';
import { SimpleColumnsComponent } from './simple-mode/simple-columns.component';
import { NewSchemeComponent } from './scheme/newscheme.component';
import { SchemeListComponent } from './scheme/scheme-list.component';
import { LanguageTextboxModule } from '@farris/ui-language-textbox';
var DatagridSettingsModule = /** @class */ (function () {
    function DatagridSettingsModule() {
    }
    /**
     * @param {?=} apiUri
     * @return {?}
     */
    DatagridSettingsModule.forRoot = /**
     * @param {?=} apiUri
     * @return {?}
     */
    function (apiUri) {
        if (apiUri === void 0) { apiUri = ''; }
        return {
            ngModule: DatagridSettingsModule,
            providers: [
                { provide: GRID_SETTINGS_SERVICE, useClass: DatagridSettingsService }
            ]
        };
    };
    DatagridSettingsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        DatagridSettingsComponent,
                        DatagridSortSettingComponent,
                        DatagridViewColumnsComponent,
                        ColumnFormatSettingComponent,
                        ColumnGroupSettingComponent,
                        ColumnVisibleDragDirective,
                        ColumnGroupDragDirective,
                        SimpleColumnsComponent,
                        NewSchemeComponent,
                        SchemeListComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        MultiSelectModule,
                        ComboListModule,
                        DatagridModule,
                        FarrisCommonModule.forRoot(),
                        MessagerModule.forRoot(),
                        LocaleModule.forRoot(),
                        ModalModule.forRoot(),
                        SwitchModule,
                        FarrisTooltipModule,
                        NotifyModule.forRoot(),
                        OrganizationSelectorModule,
                        LanguageTextboxModule,
                    ],
                    entryComponents: [
                        DatagridSettingsComponent,
                        SimpleColumnsComponent,
                        NewSchemeComponent,
                        SchemeListComponent
                    ],
                    exports: [
                        DatagridSettingsComponent,
                        SimpleColumnsComponent,
                        NewSchemeComponent,
                        SchemeListComponent
                    ]
                },] }
    ];
    return DatagridSettingsModule;
}());
export { DatagridSettingsModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtc2V0dGluZ3MubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC1zZXR0aW5ncy8iLCJzb3VyY2VzIjpbImxpYi9kYXRhZ3JpZC1zZXR0aW5ncy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxjQUFjLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUMzRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2pELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRTlFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRTFFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBQ3ZHLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3BGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQ25HLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3BFO0lBQUE7SUFtREEsQ0FBQzs7Ozs7SUFSVSw4QkFBTzs7OztJQUFkLFVBQWUsTUFBVztRQUFYLHVCQUFBLEVBQUEsV0FBVztRQUN0QixPQUFPO1lBQ0gsUUFBUSxFQUFFLHNCQUFzQjtZQUNoQyxTQUFTLEVBQUU7Z0JBQ1AsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLHVCQUF1QixFQUFFO2FBQ3hFO1NBQ0osQ0FBQztJQUNOLENBQUM7O2dCQWxESixRQUFRLFNBQUM7b0JBQ04sWUFBWSxFQUFFO3dCQUNWLHlCQUF5Qjt3QkFDekIsNEJBQTRCO3dCQUM1Qiw0QkFBNEI7d0JBQzVCLDRCQUE0Qjt3QkFDNUIsMkJBQTJCO3dCQUMzQiwwQkFBMEI7d0JBQzFCLHdCQUF3Qjt3QkFDeEIsc0JBQXNCO3dCQUN0QixrQkFBa0I7d0JBQ2xCLG1CQUFtQjtxQkFDdEI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNMLFlBQVk7d0JBQ1osV0FBVzt3QkFDWCxpQkFBaUI7d0JBQ2pCLGVBQWU7d0JBQ2YsY0FBYzt3QkFDZCxrQkFBa0IsQ0FBQyxPQUFPLEVBQUU7d0JBQzVCLGNBQWMsQ0FBQyxPQUFPLEVBQUU7d0JBQ3hCLFlBQVksQ0FBQyxPQUFPLEVBQUU7d0JBQ3RCLFdBQVcsQ0FBQyxPQUFPLEVBQUU7d0JBQ3JCLFlBQVk7d0JBQ1osbUJBQW1CO3dCQUNuQixZQUFZLENBQUMsT0FBTyxFQUFFO3dCQUN0QiwwQkFBMEI7d0JBQzFCLHFCQUFxQjtxQkFDeEI7b0JBQ0QsZUFBZSxFQUFFO3dCQUNiLHlCQUF5Qjt3QkFDekIsc0JBQXNCO3dCQUN0QixrQkFBa0I7d0JBQ2xCLG1CQUFtQjtxQkFDdEI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNMLHlCQUF5Qjt3QkFDekIsc0JBQXNCO3dCQUN0QixrQkFBa0I7d0JBQ2xCLG1CQUFtQjtxQkFDdEI7aUJBQ0o7O0lBVUQsNkJBQUM7Q0FBQSxBQW5ERCxJQW1EQztTQVRZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTW9kYWxNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW1vZGFsJztcclxuaW1wb3J0IHsgR1JJRF9TRVRUSU5HU19TRVJWSUNFLCBEYXRhZ3JpZE1vZHVsZX0gZnJvbSAnQGZhcnJpcy91aS1kYXRhZ3JpZCc7XHJcbmltcG9ydCB7IE11bHRpU2VsZWN0TW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1tdWx0aS1zZWxlY3QnO1xyXG5pbXBvcnQgeyBGYXJyaXNDb21tb25Nb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbic7XHJcbmltcG9ydCB7IExvY2FsZU1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9jYWxlJztcclxuaW1wb3J0IHsgTWVzc2FnZXJNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW1lc3NhZ2VyJztcclxuaW1wb3J0IHsgQ29tYm9MaXN0TW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21iby1saXN0JztcclxuaW1wb3J0IHsgU3dpdGNoTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1zd2l0Y2gnO1xyXG5pbXBvcnQgeyBGYXJyaXNUb29sdGlwTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS10b29sdGlwJztcclxuaW1wb3J0IHsgTm90aWZ5TW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBPcmdhbml6YXRpb25TZWxlY3Rvck1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktb3JnYW5pemF0aW9uLXNlbGVjdG9yJztcclxuXHJcbmltcG9ydCB7IERhdGFncmlkU2V0dGluZ3NDb21wb25lbnQgfSBmcm9tICcuL2RhdGFncmlkLXNldHRpbmdzLmNvbXBvbmVudCc7XHJcblxyXG5pbXBvcnQgeyBEYXRhZ3JpZFNldHRpbmdzU2VydmljZSB9IGZyb20gJy4vZGF0YWdyaWQtc2V0dGluZ3Muc2VydmljZSc7XHJcbmltcG9ydCB7IERhdGFncmlkU29ydFNldHRpbmdDb21wb25lbnQgfSBmcm9tICcuL2RhdGFncmlkLXNvcnQtc2V0dGluZy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZFZpZXdDb2x1bW5zQ29tcG9uZW50IH0gZnJvbSAnLi9kYXRhZ3JpZC12aWV3LWNvbHVtbnMuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ29sdW1uRm9ybWF0U2V0dGluZ0NvbXBvbmVudCB9IGZyb20gJy4vY29sdW1uLWZvcm1hdC1zZXR0aW5nL2NvbHVtbi1mb3JtYXQtc2V0dGluZy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDb2x1bW5Hcm91cFNldHRpbmdDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbi1ncm91cC9jb2x1bW4tZ3JvdXAuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ29sdW1uVmlzaWJsZURyYWdEaXJlY3RpdmUgfSBmcm9tICcuL2NvbHVtbi1mb3JtYXQtc2V0dGluZy9jb2x1bW4tdmlzaWJsZS1kcmFnLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IENvbHVtbkdyb3VwRHJhZ0RpcmVjdGl2ZSB9IGZyb20gJy4vY29sdW1uLWdyb3VwL2NvbHVtbi1ncm91cC1kcmFnLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IFNpbXBsZUNvbHVtbnNDb21wb25lbnQgfSBmcm9tICcuL3NpbXBsZS1tb2RlL3NpbXBsZS1jb2x1bW5zLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE5ld1NjaGVtZUNvbXBvbmVudCB9IGZyb20gJy4vc2NoZW1lL25ld3NjaGVtZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTY2hlbWVMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9zY2hlbWUvc2NoZW1lLWxpc3QuY29tcG9uZW50JztcclxuaW1wb3J0IHsgTGFuZ3VhZ2VUZXh0Ym94TW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1sYW5ndWFnZS10ZXh0Ym94JztcclxuQE5nTW9kdWxlKHtcclxuICAgIGRlY2xhcmF0aW9uczogW1xyXG4gICAgICAgIERhdGFncmlkU2V0dGluZ3NDb21wb25lbnQsXHJcbiAgICAgICAgRGF0YWdyaWRTb3J0U2V0dGluZ0NvbXBvbmVudCxcclxuICAgICAgICBEYXRhZ3JpZFZpZXdDb2x1bW5zQ29tcG9uZW50LFxyXG4gICAgICAgIENvbHVtbkZvcm1hdFNldHRpbmdDb21wb25lbnQsXHJcbiAgICAgICAgQ29sdW1uR3JvdXBTZXR0aW5nQ29tcG9uZW50LFxyXG4gICAgICAgIENvbHVtblZpc2libGVEcmFnRGlyZWN0aXZlLFxyXG4gICAgICAgIENvbHVtbkdyb3VwRHJhZ0RpcmVjdGl2ZSxcclxuICAgICAgICBTaW1wbGVDb2x1bW5zQ29tcG9uZW50LFxyXG4gICAgICAgIE5ld1NjaGVtZUNvbXBvbmVudCxcclxuICAgICAgICBTY2hlbWVMaXN0Q29tcG9uZW50XHJcbiAgICBdLFxyXG4gICAgaW1wb3J0czogW1xyXG4gICAgICAgIENvbW1vbk1vZHVsZSxcclxuICAgICAgICBGb3Jtc01vZHVsZSxcclxuICAgICAgICBNdWx0aVNlbGVjdE1vZHVsZSxcclxuICAgICAgICBDb21ib0xpc3RNb2R1bGUsXHJcbiAgICAgICAgRGF0YWdyaWRNb2R1bGUsXHJcbiAgICAgICAgRmFycmlzQ29tbW9uTW9kdWxlLmZvclJvb3QoKSxcclxuICAgICAgICBNZXNzYWdlck1vZHVsZS5mb3JSb290KCksXHJcbiAgICAgICAgTG9jYWxlTW9kdWxlLmZvclJvb3QoKSxcclxuICAgICAgICBNb2RhbE1vZHVsZS5mb3JSb290KCksXHJcbiAgICAgICAgU3dpdGNoTW9kdWxlLFxyXG4gICAgICAgIEZhcnJpc1Rvb2x0aXBNb2R1bGUsXHJcbiAgICAgICAgTm90aWZ5TW9kdWxlLmZvclJvb3QoKSxcclxuICAgICAgICBPcmdhbml6YXRpb25TZWxlY3Rvck1vZHVsZSxcclxuICAgICAgICBMYW5ndWFnZVRleHRib3hNb2R1bGUsXHJcbiAgICBdLFxyXG4gICAgZW50cnlDb21wb25lbnRzOiBbXHJcbiAgICAgICAgRGF0YWdyaWRTZXR0aW5nc0NvbXBvbmVudCxcclxuICAgICAgICBTaW1wbGVDb2x1bW5zQ29tcG9uZW50LFxyXG4gICAgICAgIE5ld1NjaGVtZUNvbXBvbmVudCxcclxuICAgICAgICBTY2hlbWVMaXN0Q29tcG9uZW50XHJcbiAgICBdLFxyXG4gICAgZXhwb3J0czogW1xyXG4gICAgICAgIERhdGFncmlkU2V0dGluZ3NDb21wb25lbnQsXHJcbiAgICAgICAgU2ltcGxlQ29sdW1uc0NvbXBvbmVudCxcclxuICAgICAgICBOZXdTY2hlbWVDb21wb25lbnQsXHJcbiAgICAgICAgU2NoZW1lTGlzdENvbXBvbmVudFxyXG4gICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0YWdyaWRTZXR0aW5nc01vZHVsZSB7XHJcbiAgICBzdGF0aWMgZm9yUm9vdChhcGlVcmkgPSAnJyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5nTW9kdWxlOiBEYXRhZ3JpZFNldHRpbmdzTW9kdWxlLFxyXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogR1JJRF9TRVRUSU5HU19TRVJWSUNFLCB1c2VDbGFzczogRGF0YWdyaWRTZXR0aW5nc1NlcnZpY2UgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4iXX0=