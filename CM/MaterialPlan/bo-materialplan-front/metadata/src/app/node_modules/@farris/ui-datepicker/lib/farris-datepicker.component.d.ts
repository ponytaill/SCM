import { DateTimeHelperService } from '@farris/ui-common/date';
import { OnInit, EventEmitter, SimpleChanges, ElementRef, OnChanges, Injector, ViewContainerRef, OnDestroy, AfterViewInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { FarrisDatePickerDirective } from './farris-datepicker.input';
import { IMyOptions, IMyDate, IMyDateModel, IMyShortcuts } from './interfaces/public-api';
import { ShowType } from './enums/public-api';
import { UtilService, DefaultConfigService, DatepickerLocaleService } from './services/public-api';
import { LocaleService } from '@farris/ui-locale';
import { ViewType } from './interfaces/my-options.interface';
export declare class FarrisDatepickerComponent implements OnInit, ControlValueAccessor, OnChanges, OnDestroy, AfterViewInit {
    private el;
    private utilService;
    private defaultConfigService;
    private injector;
    cls: string;
    viewType: ViewType;
    disabled: boolean;
    readonly: boolean;
    editable: boolean;
    dateRange: boolean;
    showTime: boolean;
    showType: ShowType;
    locale: string;
    dateFormat: string;
    useDefault: boolean;
    returnType: 'Object' | 'Date' | 'String';
    returnFormat: string;
    placeholder: string;
    beginPlaceholder: string;
    endPlaceholder: string;
    /** 输入值变化后关闭选择面板。 默认为 true */
    whenValueChangedThenCloseSelectorPanel: boolean;
    minDate: any;
    maxDate: any;
    highlightDates: Array<IMyDate>;
    disableDateRangesBegin: IMyDate;
    disableDateRangesEnd: IMyDate;
    disableDates: Array<IMyDate>;
    disableWeekdays: Array<string>;
    markDates: Array<IMyDate>;
    markDatesColor: string;
    showWeekNumbers: boolean;
    isMarkWeekends: boolean;
    markWeekendsColor: string;
    dateRangeDatesDelimiter: string;
    shortcuts: Array<IMyShortcuts>;
    monthRangeValue: number;
    beginValue: string | Date;
    endValue: string | Date;
    clear: EventEmitter<{}>;
    valueChange: EventEmitter<{}>;
    focus: EventEmitter<{}>;
    blur: EventEmitter<{}>;
    beginValueChange: EventEmitter<{}>;
    endValueChange: EventEmitter<{}>;
    PrevFocus: EventEmitter<{}>;
    NextFocus: EventEmitter<{}>;
    close: EventEmitter<{}>;
    dp: FarrisDatePickerDirective;
    clearIcon: ElementRef;
    calendarRef: ViewContainerRef;
    PFocus: ElementRef;
    NFocus: ElementRef;
    dateInput: ElementRef;
    private cRef;
    private _timeFormat;
    private _value;
    _beginValue: string;
    _endValue: string;
    private _initFinished;
    private _timer;
    private _dateFormat;
    private _minDate;
    private _maxDate;
    value: any;
    dateOpts: IMyOptions;
    defaultConfig: IMyOptions;
    localDateOpts: IMyOptions;
    localeConfig: DatepickerLocaleService;
    localeService: LocaleService;
    beginFocus: boolean;
    endFocus: boolean;
    totalFocus: boolean;
    originTime: any;
    isActiveTip: boolean;
    private vcRef;
    private cfr;
    private renderer;
    private datePicekrService;
    private _realValue;
    private _realRangeValue;
    private notifySer;
    private formatedValue;
    dtService: DateTimeHelperService;
    private _applicationRef;
    private _ngControl;
    _updateOn: string;
    private _valueChangeEmitted;
    private _mousedownEvent;
    private closeCalendarHandler;
    private cdr;
    /** 缓存通过点击日历的数据，用于的格式化格式不标准时，格式化数据。 */
    private _SELECT_DATE_;
    onModelChange: (obj: any) => void;
    onModelTouched: () => void;
    private overLayService;
    constructor(el: ElementRef, utilService: UtilService, defaultConfigService: DefaultConfigService, injector: Injector);
    ngOnInit(): void;
    private initPlaceholder;
    private mergeDateOptions;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    onMouseEnter(event: any): void;
    onMouseLeave(event: any): void;
    onBlur(e: any): void;
    onFocus(e: any): void;
    onInputClick(event: any): void;
    private registerMouseDownHandle;
    setDefaultValue(): void;
    clearDate($event?: MouseEvent): void;
    onSingleInputNgModelChange($event: any): void;
    onNgModelChange(value: any, realdate?: any, emitValueChange?: boolean): void;
    private _onModelChange;
    private getRealReturnFormatted;
    onDateRangeInputBlur(event: any): void;
    openCalendar(): void;
    closeSelector(reason?: number): void;
    toggleCalendar(close: boolean, emit?: boolean): void;
    onDateChanged(event: IMyDateModel): void;
    buildOptions(): any;
    dateTo(d: any): string;
    dateFrom(str: any, ignorRange?: boolean): string | Date;
    transform(value: any, _fmt?: string): any;
    setValue(value: string): void;
    updateValue(value: string): void;
    getValueByType(val: any): any;
    writeValue(val: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    onPrevFocus(value: boolean): void;
    onNextFocus(value: boolean): void;
    private _convert2dateString;
    private _isValid;
    private _isValid2;
}
