import { DynamicCommandHandler } from '../command';
import { DomService } from '../schema';
import { SchemaService } from '../schema/schema.service';
export class ContextMetadataBuilder {
    constructor() {
    }
    /**
     * 构造应用程序上下文元数据
     * @param formMetadataContent 表单元数据
     * @param stateMachineMetadata 状态机元数
     * @returns 应用程序上下文元数据
     */
    buildAppContextMetadata(formMetadataContent, stateMachineMetadata) {
        const module = formMetadataContent.module;
        const uiStates = module.states;
        const appContextMetadata = {
            identify: module.code,
            namespace: '',
            stateMachine: this.buildStataMachineMetadata(stateMachineMetadata),
            uiStates: this.buildUiStateMetadata(uiStates)
        };
        return appContextMetadata;
    }
    /**
     * 构造视图上下文元数据
     * @param componentId 组件标识
     * @param viewModel 视图模型元数据
     * @param declarations 外部接口定义
     * @param subscriptions 事件订阅定义
     * @returns 视图上下文元数据
     */
    buildViewContextMetadata(component, viewModel, schema, controllers) {
        const contextMetadata = {
            identify: component.id,
            namespace: '',
            commands: this.buildCommand(viewModel.commands),
            commandHandlers: this.buildCommandHandlers(viewModel.commands, controllers),
            commandHandlerExtends: [],
            form: this.buildFormMetadata(viewModel),
            formControls: this.buildFormControlMetadata(viewModel.fields, viewModel, schema, component),
            subForms: null,
            uiStates: this.buildUiStateMetadata(viewModel.states),
            bindingTo: viewModel.bindTo,
            viewModelCode: viewModel.code
        };
        return contextMetadata;
    }
    buildCommand(commandMetadataArray) {
        const commands = {};
        commandMetadataArray.reduce((previousValue, commandMetadata) => {
            const ngCommand = {
                name: commandMetadata.code,
                params: {},
                paramDescriptions: {}
            };
            commandMetadata.params.reduce((previousCommand, param) => {
                previousCommand.params[param.name] = param.value;
                previousCommand.paramDescriptions[param.name] = { type: 'string' };
                return previousCommand;
            }, ngCommand);
            previousValue[commandMetadata.code] = ngCommand;
            return previousValue;
        }, commands);
        return commands;
    }
    buildFormMetadata(viewModel) {
        return {
            formGroupName: viewModel.name,
            enableValidate: viewModel.enableValidation
        };
    }
    buildFormControlMetadata(formFields, viewModel, schema, component) {
        const formControls = {};
        const formFieldIds = formFields.map(formField => formField.id);
        const schemaService = new SchemaService();
        const formFieldsMap = schemaService.getFieldsByIds(formFieldIds, schema, viewModel);
        const domService = new DomService();
        formFields.reduce((previousValue, field) => {
            const schemaEntityField = formFieldsMap.has(field.id) ? formFieldsMap.get(field.id) : null;
            const binding = schemaEntityField ? schemaEntityField.bindingPath : '';
            const domElements = domService.getElementByBinding(component.contents, field.id);
            const validRules = [];
            const matchedElement = domElements[0];
            if (matchedElement) {
                const keys = 'maxValue,minValue,required,require';
                Object.keys(matchedElement).forEach(key => {
                    if (keys.includes(key)) {
                        if (key === 'maxValue' && (matchedElement[key] !== null && matchedElement[key] !== undefined)) {
                            // 把最大值属性转换成validRule
                            validRules.push({ type: 'maxValue', constraints: [matchedElement[key]] });
                        }
                        else if (key === 'minValue' && (matchedElement[key] !== null && matchedElement[key] !== undefined)) {
                            // 把最小值属性转换成validRule
                            validRules.push({ type: 'minValue', constraints: [matchedElement[key]] });
                        }
                        else if (key === 'required' || key === 'require') {
                            // 把必填属性转换成validRule
                            // 必填表达式可以为状态机
                            if (matchedElement[key] === 'true' || matchedElement[key] === true) {
                                validRules.push({ type: 'required', constraints: [true] });
                            }
                        }
                    }
                });
            }
            previousValue[field.fieldName] = {
                /** 控件标识 */
                id: `${field.fieldName}_${field.id.substr(0, 13).replace('-', '_')}`,
                /** 控件名称 todo: 需要支持多语言 */
                name: matchedElement ? matchedElement.title : field.fieldName,
                /** 绑定字段路径 */
                binding,
                /** 控件值更新时机 */
                updateOn: field.updateOn,
                /** 控件默认名称 */
                defaultI18nValue: matchedElement ? matchedElement.title : field.fieldName,
                /** 验证规则 */
                validRules
            };
            return previousValue;
        }, formControls);
        return formControls;
    }
    /**
     * 由状态机元数据创建状态机上下文描述
     * @param stateMachineMetadata 状态机元数据
     * @returns 状态机上下文描述
     */
    buildStataMachineMetadata(stateMachineMetadata) {
        // 声明状态机上下文元数据
        const stateMachine = {
            states: {},
            renderStates: {},
            actions: {}
        };
        if (!stateMachineMetadata) {
            return stateMachine;
        }
        // 由状态机元数据构造NgState
        stateMachineMetadata.state.reduce((previousValue, state) => {
            previousValue.states[state.state] = {
                initialState: state.state === stateMachineMetadata.initialState
            };
            return previousValue;
        }, stateMachine);
        // 由状态机元数据构造NgRenderState
        Object.keys(stateMachineMetadata.renderState)
            .reduce((previousValue, renderStateName) => {
            const renderStateMetadata = stateMachineMetadata.renderState[renderStateName];
            const renderFunction = this.buildRenderFunction(renderStateMetadata);
            previousValue.renderStates[renderStateName] = {
                render: renderFunction
            };
            // previousValue.renderStates[renderStateName] = {
            //   render: (context: StateMachineContext) => {
            //     return context.parser.parse(renderStateMetadata.condition, this);
            //   }
            // };
            return previousValue;
        }, stateMachine);
        // 由状态机元数据构造NgAction
        Object.keys(stateMachineMetadata.action)
            .reduce((previousValue, actionName) => {
            const actionMetadata = stateMachineMetadata.action[actionName];
            previousValue.actions[actionName] = {
                precondition: actionMetadata.precondition,
                transitTo: actionMetadata.transitTo
            };
            return previousValue;
        }, stateMachine);
        // 返回状态机元数据
        return stateMachine;
    }
    buildUiStateMetadata(states) {
        const uiStates = {};
        states.reduce((previousValue, uiState) => {
            previousValue[uiState.code] = {
                stateName: uiState.code
            };
            return previousValue;
        }, uiStates);
        return uiStates;
    }
    buildRenderFunction(renderStateMetadata) {
        if (renderStateMetadata && renderStateMetadata.condition.length) {
            const renderFunctionString = renderStateMetadata.condition.reduce((previousFunctionString, condition) => {
                let conditionTarget = condition.target;
                if (!conditionTarget.startsWith('\'')) {
                    conditionTarget = `'${conditionTarget}`;
                }
                if (!conditionTarget.endsWith('\'')) {
                    conditionTarget = `${conditionTarget}'`;
                }
                let conditionSource = condition.source;
                if (conditionSource.indexOf('\'') < 0) {
                    conditionSource = `'${conditionSource}'`;
                }
                if (conditionSource.indexOf('getUIState') > -1) {
                    conditionSource = conditionSource.replace('getUIState', 'context.getUIState');
                }
                if (conditionSource.indexOf('getData') > -1) {
                    conditionSource = conditionSource.replace('getData', 'context.getData');
                }
                // tslint:disable-next-line: max-line-length
                let functionString = `${condition.lBracket || ''}context.parse(${conditionSource},'source')${condition.compare}context.parse(${condition.target},'target')${condition.rBracket || ''}`;
                if (condition.relation) {
                    switch (condition.relation.trim().toLocaleLowerCase()) {
                        case 'or':
                            functionString += '||';
                            break;
                        case 'and':
                            functionString += '&&';
                            break;
                    }
                }
                return previousFunctionString + functionString;
            }, '');
            if (renderFunctionString) {
                return new Function('context', `return ${renderFunctionString};`);
            }
        }
        return new Function('context', 'return true;');
    }
    buildCommandHandlers(commandMetadataArray, controllers) {
        const commandHandlers = [];
        commandMetadataArray.reduce((previousValue, commandReference) => {
            const commandName = commandReference.code;
            const controllerId = commandReference.cmpId;
            const controller = controllers[controllerId];
            const method = Object.assign({}, controller.methods[commandReference.handlerName]);
            method.params = method.params && method.params.map(param => Object.assign({}, param));
            if (method.params && method.params.length) {
                commandReference.params.reduce((previousMethodValue, param) => {
                    const methodParam = previousMethodValue.params.find(value => value.name === param.name);
                    if (methodParam) {
                        methodParam.expression = param.value;
                    }
                    return previousMethodValue;
                }, method);
            }
            const commandHandler = new DynamicCommandHandler(commandName, method);
            previousValue.push(commandHandler);
            return previousValue;
        }, commandHandlers);
        return commandHandlers;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwX21ldGFkYXRhX2NvbGxlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2FwcC9hcHBfbWV0YWRhdGFfY29sbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBK0UscUJBQXFCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFHaEksT0FBTyxFQUFFLFVBQVUsRUFBNkIsTUFBTSxXQUFXLENBQUM7QUFLbEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBS3pELE1BQU0sT0FBTyxzQkFBc0I7SUFFakM7SUFFQSxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSx1QkFBdUIsQ0FBQyxtQkFBd0IsRUFBRSxvQkFBbUM7UUFDMUYsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDO1FBQzFDLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDL0IsTUFBTSxrQkFBa0IsR0FBRztZQUN6QixRQUFRLEVBQUUsTUFBTSxDQUFDLElBQUk7WUFDckIsU0FBUyxFQUFFLEVBQUU7WUFDYixZQUFZLEVBQUUsSUFBSSxDQUFDLHlCQUF5QixDQUFDLG9CQUFvQixDQUFDO1lBQ2xFLFFBQVEsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDO1NBQzlDLENBQUM7UUFDRixPQUFPLGtCQUFrQixDQUFDO0lBQzVCLENBQUM7SUFHRDs7Ozs7OztPQU9HO0lBQ0ksd0JBQXdCLENBQzdCLFNBQWMsRUFDZCxTQUF5QixFQUN6QixNQUFjLEVBQ2QsV0FBZ0Q7UUFFaEQsTUFBTSxlQUFlLEdBQUc7WUFDdEIsUUFBUSxFQUFFLFNBQVMsQ0FBQyxFQUFFO1lBQ3RCLFNBQVMsRUFBRSxFQUFFO1lBQ2IsUUFBUSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztZQUMvQyxlQUFlLEVBQUUsSUFBSSxDQUFDLG9C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TSxDQUFDLENBQUM7YUFDWjtZQUNELE1BQU0sY0FBYyxHQUFHLElBQUkscUJBQXFCLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3RFLGFBQWEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDbkMsT0FBTyxhQUFhLENBQUM7UUFDdkIsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3BCLE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBDb21tYW5kQ29udHJvbGxlciwgQ29tbWFuZEhhbmRsZXIsIENvbW1hbmRIYW5kbGVyRXh0ZW5kZXIsIENvbnRyb2xsZXJNZXRob2QsIER5bmFtaWNDb21tYW5kSGFuZGxlciB9IGZyb20gJy4uL2NvbW1hbmQnO1xyXG5pbXBvcnQgeyBWYWxpZGF0ZVJ1bGUgfSBmcm9tICcuLi9lbnRpdHknO1xyXG5pbXBvcnQgeyBOZ0Zvcm1Db250cm9sLCBOZ1ZhbGlkYXRlRm9ybSB9IGZyb20gJy4uL2Zvcm0nO1xyXG5pbXBvcnQgeyBEb21TZXJ2aWNlLCBTY2hlbWEsIFNjaGVtYUVudGl0eUZpZWxkIH0gZnJvbSAnLi4vc2NoZW1hJztcclxuaW1wb3J0IHtcclxuICBJRm9ybVZpZXdNb2RlbCwgSUZvcm1WaWV3TW9kZWxDb21tYW5kLCBJRm9ybVZpZXdNb2RlbENvbW1hbmRQYXJhbSwgSUZvcm1WaWV3TW9kZWxGaWVsZCxcclxuICBJRm9ybVZpZXdNb2RlbFVpU3RhdGUsIElSZW5kZXJTdGF0ZSwgSVN0YXRlTWFjaGluZVxyXG59IGZyb20gJy4uL3NjaGVtYS9mb3JtLW1ldGFkYXRhJztcclxuaW1wb3J0IHsgU2NoZW1hU2VydmljZSB9IGZyb20gJy4uL3NjaGVtYS9zY2hlbWEuc2VydmljZSc7XHJcbmltcG9ydCB7IE5nUGFyYW0gfSBmcm9tICcuLi91aS1zdGF0ZSc7XHJcbmltcG9ydCB7IE5nQ29tbWFuZCB9IGZyb20gJy4uL3ZpZXctbW9kZWwnO1xyXG5pbXBvcnQgeyBJQ29udGV4dE1ldGFkYXRhLCBJQ29udGV4dFN0YXRlTWFjaGluZU1ldGFkYXRhIH0gZnJvbSAnLi9hcHBfbWV0YWRhdGEnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbnRleHRNZXRhZGF0YUJ1aWxkZXIge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlupTnlKjnqIvluo/kuIrkuIvmloflhYPmlbDmja5cclxuICAgKiBAcGFyYW0gZm9ybU1ldGFkYXRhQ29udGVudCDooajljZXlhYPmlbDmja5cclxuICAgKiBAcGFyYW0gc3RhdGVNYWNoaW5lTWV0YWRhdGEg54q25oCB5py65YWD5pWwXHJcbiAgICogQHJldHVybnMg5bqU55So56iL5bqP5LiK5LiL5paH5YWD5pWw5o2uXHJcbiAgICovXHJcbiAgcHVibGljIGJ1aWxkQXBwQ29udGV4dE1ldGFkYXRhKGZvcm1NZXRhZGF0YUNvbnRlbnQ6IGFueSwgc3RhdGVNYWNoaW5lTWV0YWRhdGE6IElTdGF0ZU1hY2hpbmUpOiBJQ29udGV4dE1ldGFkYXRhIHtcclxuICAgIGNvbnN0IG1vZHVsZSA9IGZvcm1NZXRhZGF0YUNvbnRlbnQubW9kdWxlO1xyXG4gICAgY29uc3QgdWlTdGF0ZXMgPSBtb2R1bGUuc3RhdGVzO1xyXG4gICAgY29uc3QgYXBwQ29udGV4dE1ldGFkYXRhID0ge1xyXG4gICAgICBpZGVudGlmeTogbW9kdWxlLmNvZGUsXHJcbiAgICAgIG5hbWVzcGFjZTogJycsXHJcbiAgICAgIHN0YXRlTWFjaGluZTogdGhpcy5idWlsZFN0YXRhTWFjaGluZU1ldGFkYXRhKHN0YXRlTWFjaGluZU1ldGFkYXRhKSxcclxuICAgICAgdWlTdGF0ZXM6IHRoaXMuYnVpbGRVaVN0YXRlTWV0YWRhdGEodWlTdGF0ZXMpXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGFwcENvbnRleHRNZXRhZGF0YTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDop4blm77kuIrkuIvmloflhYPmlbDmja5cclxuICAgKiBAcGFyYW0gY29tcG9uZW50SWQg57uE5Lu25qCH6K+GXHJcbiAgICogQHBhcmFtIHZpZXdNb2RlbCDop4blm77mqKHlnovlhYPmlbDmja5cclxuICAgKiBAcGFyYW0gZGVjbGFyYXRpb25zIOWklumDqOaOpeWPo+WumuS5iVxyXG4gICAqIEBwYXJhbSBzdWJzY3JpcHRpb25zIOS6i+S7tuiuoumYheWumuS5iVxyXG4gICAqIEByZXR1cm5zIOinhuWbvuS4iuS4i+aWh+WFg+aVsOaNrlxyXG4gICAqL1xyXG4gIHB1YmxpYyBidWlsZFZpZXdDb250ZXh0TWV0YWRhdGEoXHJcbiAgICBjb21wb25lbnQ6IGFueSxcclxuICAgIHZpZXdNb2RlbDogSUZvcm1WaWV3TW9kZWwsXHJcbiAgICBzY2hlbWE6IFNjaGVtYSxcclxuICAgIGNvbnRyb2xsZXJzOiB7IFtpZDogc3RyaW5nXTogQ29tbWFuZENvbnRyb2xsZXIgfVxyXG4gICk6IElDb250ZXh0TWV0YWRhdGEge1xyXG4gICAgY29uc3QgY29udGV4dE1ldGFkYXRhID0ge1xyXG4gICAgICBpZGVudGlmeTogY29tcG9uZW50LmlkLFxyXG4gICAgICBuYW1lc3BhY2U6ICcnLFxyXG4gICAgICBjb21tYW5kczogdGhpcy5idWlsZENvbW1hbmQodmlld01vZGVsLmNvbW1hbmRzKSxcclxuICAgICAgY29tbWFuZEhhbmRsZXJzOiB0aGlzLmJ1aWxkQ29tbWFuZEhhbmRsZXJzKHZpZXdNb2RlbC5jb21tYW5kcywgY29udHJvbGxlcnMpLFxyXG4gICAgICBjb21tYW5kSGFuZGxlckV4dGVuZHM6IFtdLFxyXG4gICAgICBmb3JtOiB0aGlzLmJ1aWxkRm9ybU1ldGFkYXRhKHZpZXdNb2RlbCksXHJcbiAgICAgIGZvcm1Db250cm9sczogdGhpcy5idWlsZEZvcm1Db250cm9sTWV0YWRhdGEodmlld01vZGVsLmZpZWxkcywgdmlld01vZGVsLCBzY2hlbWEsIGNvbXBvbmVudCksXHJcbiAgICAgIHN1YkZvcm1zOiBudWxsLFxyXG4gICAgICB1aVN0YXRlczogdGhpcy5idWlsZFVpU3RhdGVNZXRhZGF0YSh2aWV3TW9kZWwuc3RhdGVzKSxcclxuICAgICAgYmluZGluZ1RvOiB2aWV3TW9kZWwuYmluZFRvLFxyXG4gICAgICB2aWV3TW9kZWxDb2RlOiB2aWV3TW9kZWwuY29kZVxyXG4gICAgfTtcclxuICAgIHJldHVybiBjb250ZXh0TWV0YWRhdGE7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGJ1aWxkQ29tbWFuZChjb21tYW5kTWV0YWRhdGFBcnJheTogSUZvcm1WaWV3TW9kZWxDb21tYW5kW10pOiB7IFtjb21tYW5kTmFtZTogc3RyaW5nXTogTmdDb21tYW5kIH0ge1xyXG4gICAgY29uc3QgY29tbWFuZHMgPSB7fTtcclxuICAgIGNvbW1hbmRNZXRhZGF0YUFycmF5LnJlZHVjZTx7IFtjb21tYW5kTmFtZTogc3RyaW5nXTogTmdDb21tYW5kIH0+KChwcmV2aW91c1ZhbHVlLCBjb21tYW5kTWV0YWRhdGE6IElGb3JtVmlld01vZGVsQ29tbWFuZCkgPT4ge1xyXG4gICAgICBjb25zdCBuZ0NvbW1hbmQ6IE5nQ29tbWFuZCA9IHtcclxuICAgICAgICBuYW1lOiBjb21tYW5kTWV0YWRhdGEuY29kZSxcclxuICAgICAgICBwYXJhbXM6IHt9LFxyXG4gICAgICAgIHBhcmFtRGVzY3JpcHRpb25zOiB7fVxyXG4gICAgICB9O1xyXG4gICAgICBjb21tYW5kTWV0YWRhdGEucGFyYW1zLnJlZHVjZTxOZ0NvbW1hbmQ+KChwcmV2aW91c0NvbW1hbmQsIHBhcmFtKSA9PiB7XHJcbiAgICAgICAgcHJldmlvdXNDb21tYW5kLnBhcmFtc1twYXJhbS5uYW1lXSA9IHBhcmFtLnZhbHVlO1xyXG4gICAgICAgIHByZXZpb3VzQ29tbWFuZC5wYXJhbURlc2NyaXB0aW9uc1twYXJhbS5uYW1lXSA9IHsgdHlwZTogJ3N0cmluZycgfTtcclxuICAgICAgICByZXR1cm4gcHJldmlvdXNDb21tYW5kO1xyXG4gICAgICB9LCBuZ0NvbW1hbmQpO1xyXG4gICAgICBwcmV2aW91c1ZhbHVlW2NvbW1hbmRNZXRhZGF0YS5jb2RlXSA9IG5nQ29tbWFuZDtcclxuICAgICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XHJcbiAgICB9LCBjb21tYW5kcyk7XHJcbiAgICByZXR1cm4gY29tbWFuZHM7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGJ1aWxkRm9ybU1ldGFkYXRhKHZpZXdNb2RlbDogSUZvcm1WaWV3TW9kZWwpOiBOZ1ZhbGlkYXRlRm9ybSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBmb3JtR3JvdXBOYW1lOiB2aWV3TW9kZWwubmFtZSxcclxuICAgICAgZW5hYmxlVmFsaWRhdGU6IHZpZXdNb2RlbC5lbmFibGVWYWxpZGF0aW9uXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBidWlsZEZvcm1Db250cm9sTWV0YWRhdGEoZm9ybUZpZWxkczogSUZvcm1WaWV3TW9kZWxGaWVsZFtdLCB2aWV3TW9kZWw6IElGb3JtVmlld01vZGVsLCBzY2hlbWE6IFNjaGVtYSwgY29tcG9uZW50OiBhbnkpXHJcbiAgICA6IHsgW2NvbnRyb2xOYW1lOiBzdHJpbmddOiBOZ0Zvcm1Db250cm9sIH0ge1xyXG4gICAgY29uc3QgZm9ybUNvbnRyb2xzOiB7IFtjb250cm9sTmFtZTogc3RyaW5nXTogTmdGb3JtQ29udHJvbCB9ID0ge307XHJcbiAgICBjb25zdCBmb3JtRmllbGRJZHMgPSBmb3JtRmllbGRzLm1hcChmb3JtRmllbGQgPT4gZm9ybUZpZWxkLmlkKTtcclxuICAgIGNvbnN0IHNjaGVtYVNlcnZpY2UgPSBuZXcgU2NoZW1hU2VydmljZSgpO1xyXG4gICAgY29uc3QgZm9ybUZpZWxkc01hcCA9IHNjaGVtYVNlcnZpY2UuZ2V0RmllbGRzQnlJZHMoZm9ybUZpZWxkSWRzLCBzY2hlbWEsIHZpZXdNb2RlbCk7XHJcbiAgICBjb25zdCBkb21TZXJ2aWNlID0gbmV3IERvbVNlcnZpY2UoKTtcclxuXHJcbiAgICBmb3JtRmllbGRzLnJlZHVjZTx7IFtjb250cm9sTmFtZTogc3RyaW5nXTogTmdGb3JtQ29udHJvbCB9PigocHJldmlvdXNWYWx1ZSwgZmllbGQpID0+IHtcclxuICAgICAgY29uc3Qgc2NoZW1hRW50aXR5RmllbGQ6IFNjaGVtYUVudGl0eUZpZWxkID0gZm9ybUZpZWxkc01hcC5oYXMoZmllbGQuaWQpID8gZm9ybUZpZWxkc01hcC5nZXQoZmllbGQuaWQpIDogbnVsbDtcclxuICAgICAgY29uc3QgYmluZGluZyA9IHNjaGVtYUVudGl0eUZpZWxkID8gc2NoZW1hRW50aXR5RmllbGQuYmluZGluZ1BhdGggOiAnJztcclxuICAgICAgY29uc3QgZG9tRWxlbWVudHMgPSBkb21TZXJ2aWNlLmdldEVsZW1lbnRCeUJpbmRpbmcoY29tcG9uZW50LmNvbnRlbnRzLCBmaWVsZC5pZCk7XHJcbiAgICAgIGNvbnN0IHZhbGlkUnVsZXM6IFZhbGlkYXRlUnVsZVtdID0gW107XHJcbiAgICAgIGNvbnN0IG1hdGNoZWRFbGVtZW50ID0gZG9tRWxlbWVudHNbMF07XHJcbiAgICAgIGlmIChtYXRjaGVkRWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSAnbWF4VmFsdWUsbWluVmFsdWUscmVxdWlyZWQscmVxdWlyZSc7XHJcbiAgICAgICAgT2JqZWN0LmtleXMobWF0Y2hlZEVsZW1lbnQpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgIGlmIChrZXlzLmluY2x1ZGVzKGtleSkpIHtcclxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ21heFZhbHVlJyAmJiAobWF0Y2hlZEVsZW1lbnRba2V5XSAhPT0gbnVsbCAmJiBtYXRjaGVkRWxlbWVudFtrZXldICE9PSB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgICAgICAgLy8g5oqK5pyA5aSn5YC85bGe5oCn6L2s5o2i5oiQdmFsaWRSdWxlXHJcbiAgICAgICAgICAgICAgdmFsaWRSdWxlcy5wdXNoKHsgdHlwZTogJ21heFZhbHVlJywgY29uc3RyYWludHM6IFttYXRjaGVkRWxlbWVudFtrZXldXSB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdtaW5WYWx1ZScgJiYgKG1hdGNoZWRFbGVtZW50W2tleV0gIT09IG51bGwgJiYgbWF0Y2hlZEVsZW1lbnRba2V5XSAhPT0gdW5kZWZpbmVkKSkge1xyXG4gICAgICAgICAgICAgIC8vIOaKiuacgOWwj+WAvOWxnuaAp+i9rOaNouaIkHZhbGlkUnVsZVxyXG4gICAgICAgICAgICAgIHZhbGlkUnVsZXMucHVzaCh7IHR5cGU6ICdtaW5WYWx1ZScsIGNvbnN0cmFpbnRzOiBbbWF0Y2hlZEVsZW1lbnRba2V5XV0gfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAncmVxdWlyZWQnIHx8IGtleSA9PT0gJ3JlcXVpcmUnKSB7XHJcbiAgICAgICAgICAgICAgLy8g5oqK5b+F5aGr5bGe5oCn6L2s5o2i5oiQdmFsaWRSdWxlXHJcbiAgICAgICAgICAgICAgLy8g5b+F5aGr6KGo6L6+5byP5Y+v5Lul5Li654q25oCB5py6XHJcbiAgICAgICAgICAgICAgaWYgKG1hdGNoZWRFbGVtZW50W2tleV0gPT09ICd0cnVlJyB8fCBtYXRjaGVkRWxlbWVudFtrZXldID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZFJ1bGVzLnB1c2goeyB0eXBlOiAncmVxdWlyZWQnLCBjb25zdHJhaW50czogW3RydWVdIH0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHByZXZpb3VzVmFsdWVbZmllbGQuZmllbGROYW1lXSA9IHtcclxuICAgICAgICAvKiog5o6n5Lu25qCH6K+GICovXHJcbiAgICAgICAgaWQ6IGAke2ZpZWxkLmZpZWxkTmFtZX1fJHtmaWVsZC5pZC5zdWJzdHIoMCwgMTMpLnJlcGxhY2UoJy0nLCAnXycpfWAsXHJcbiAgICAgICAgLyoqIOaOp+S7tuWQjeensCB0b2RvOiDpnIDopoHmlK/mjIHlpJror63oqIAgKi9cclxuICAgICAgICBuYW1lOiBtYXRjaGVkRWxlbWVudCA/IG1hdGNoZWRFbGVtZW50LnRpdGxlIDogZmllbGQuZmllbGROYW1lLFxyXG4gICAgICAgIC8qKiDnu5HlrprlrZfmrrXot6/lvoQgKi9cclxuICAgICAgICBiaW5kaW5nLFxyXG4gICAgICAgIC8qKiDmjqfku7blgLzmm7TmlrDml7bmnLogKi9cclxuICAgICAgICB1cGRhdGVPbjogZmllbGQudXBkYXRlT24sXHJcbiAgICAgICAgLyoqIOaOp+S7tum7mOiupOWQjeensCAqL1xyXG4gICAgICAgIGRlZmF1bHRJMThuVmFsdWU6IG1hdGNoZWRFbGVtZW50ID8gbWF0Y2hlZEVsZW1lbnQudGl0bGUgOiBmaWVsZC5maWVsZE5hbWUsXHJcbiAgICAgICAgLyoqIOmqjOivgeinhOWImSAqL1xyXG4gICAgICAgIHZhbGlkUnVsZXNcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XHJcbiAgICB9LCBmb3JtQ29udHJvbHMpO1xyXG4gICAgcmV0dXJuIGZvcm1Db250cm9scztcclxuICB9XHJcbiAgLyoqXHJcbiAgICog55Sx54q25oCB5py65YWD5pWw5o2u5Yib5bu654q25oCB5py65LiK5LiL5paH5o+P6L+wXHJcbiAgICogQHBhcmFtIHN0YXRlTWFjaGluZU1ldGFkYXRhIOeKtuaAgeacuuWFg+aVsOaNrlxyXG4gICAqIEByZXR1cm5zIOeKtuaAgeacuuS4iuS4i+aWh+aPj+i/sFxyXG4gICAqL1xyXG4gIHByaXZhdGUgYnVpbGRTdGF0YU1hY2hpbmVNZXRhZGF0YShzdGF0ZU1hY2hpbmVNZXRhZGF0YTogSVN0YXRlTWFjaGluZSk6IElDb250ZXh0U3RhdGVNYWNoaW5lTWV0YWRhdGEge1xyXG4gICAgLy8g5aOw5piO54q25oCB5py65LiK5LiL5paH5YWD5pWw5o2uXHJcbiAgICBjb25zdCBzdGF0ZU1hY2hpbmU6IElDb250ZXh0U3RhdGVNYWNoaW5lTWV0YWRhdGEgPSB7XHJcbiAgICAgIHN0YXRlczoge30sXHJcbiAgICAgIHJlbmRlclN0YXRlczoge30sXHJcbiAgICAgIGFjdGlvbnM6IHt9XHJcbiAgICB9O1xyXG5cclxuICAgIGlmICghc3RhdGVNYWNoaW5lTWV0YWRhdGEpIHtcclxuICAgICAgcmV0dXJuIHN0YXRlTWFjaGluZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDnlLHnirbmgIHmnLrlhYPmlbDmja7mnoTpgKBOZ1N0YXRlXHJcbiAgICBzdGF0ZU1hY2hpbmVNZXRhZGF0YS5zdGF0ZS5yZWR1Y2U8SUNvbnRleHRTdGF0ZU1hY2hpbmVNZXRhZGF0YT4oKHByZXZpb3VzVmFsdWUsIHN0YXRlKSA9PiB7XHJcbiAgICAgIHByZXZpb3VzVmFsdWUuc3RhdGVzW3N0YXRlLnN0YXRlXSA9IHtcclxuICAgICAgICBpbml0aWFsU3RhdGU6IHN0YXRlLnN0YXRlID09PSBzdGF0ZU1hY2hpbmVNZXRhZGF0YS5pbml0aWFsU3RhdGVcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XHJcbiAgICB9LCBzdGF0ZU1hY2hpbmUpO1xyXG4gICAgLy8g55Sx54q25oCB5py65YWD5pWw5o2u5p6E6YCgTmdSZW5kZXJTdGF0ZVxyXG4gICAgT2JqZWN0LmtleXMoc3RhdGVNYWNoaW5lTWV0YWRhdGEucmVuZGVyU3RhdGUpXHJcbiAgICAgIC5yZWR1Y2U8SUNvbnRleHRTdGF0ZU1hY2hpbmVNZXRhZGF0YT4oKHByZXZpb3VzVmFsdWUsIHJlbmRlclN0YXRlTmFtZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlbmRlclN0YXRlTWV0YWRhdGEgPSBzdGF0ZU1hY2hpbmVNZXRhZGF0YS5yZW5kZXJTdGF0ZVtyZW5kZXJTdGF0ZU5hbWVdO1xyXG4gICAgICAgIGNvbnN0IHJlbmRlckZ1bmN0aW9uID0gdGhpcy5idWlsZFJlbmRlckZ1bmN0aW9uKHJlbmRlclN0YXRlTWV0YWRhdGEpO1xyXG4gICAgICAgIHByZXZpb3VzVmFsdWUucmVuZGVyU3RhdGVzW3JlbmRlclN0YXRlTmFtZV0gPSB7XHJcbiAgICAgICAgICByZW5kZXI6IHJlbmRlckZ1bmN0aW9uXHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBwcmV2aW91c1ZhbHVlLnJlbmRlclN0YXRlc1tyZW5kZXJTdGF0ZU5hbWVdID0ge1xyXG4gICAgICAgIC8vICAgcmVuZGVyOiAoY29udGV4dDogU3RhdGVNYWNoaW5lQ29udGV4dCkgPT4ge1xyXG4gICAgICAgIC8vICAgICByZXR1cm4gY29udGV4dC5wYXJzZXIucGFyc2UocmVuZGVyU3RhdGVNZXRhZGF0YS5jb25kaXRpb24sIHRoaXMpO1xyXG4gICAgICAgIC8vICAgfVxyXG4gICAgICAgIC8vIH07XHJcbiAgICAgICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XHJcbiAgICAgIH0sIHN0YXRlTWFjaGluZSk7XHJcbiAgICAvLyDnlLHnirbmgIHmnLrlhYPmlbDmja7mnoTpgKBOZ0FjdGlvblxyXG4gICAgT2JqZWN0LmtleXMoc3RhdGVNYWNoaW5lTWV0YWRhdGEuYWN0aW9uKVxyXG4gICAgICAucmVkdWNlPElDb250ZXh0U3RhdGVNYWNoaW5lTWV0YWRhdGE+KChwcmV2aW91c1ZhbHVlLCBhY3Rpb25OYW1lKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYWN0aW9uTWV0YWRhdGEgPSBzdGF0ZU1hY2hpbmVNZXRhZGF0YS5hY3Rpb25bYWN0aW9uTmFtZV07XHJcbiAgICAgICAgcHJldmlvdXNWYWx1ZS5hY3Rpb25zW2FjdGlvbk5hbWVdID0ge1xyXG4gICAgICAgICAgcHJlY29uZGl0aW9uOiBhY3Rpb25NZXRhZGF0YS5wcmVjb25kaXRpb24sXHJcbiAgICAgICAgICB0cmFuc2l0VG86IGFjdGlvbk1ldGFkYXRhLnRyYW5zaXRUb1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XHJcbiAgICAgIH0sIHN0YXRlTWFjaGluZSk7XHJcbiAgICAvLyDov5Tlm57nirbmgIHmnLrlhYPmlbDmja5cclxuICAgIHJldHVybiBzdGF0ZU1hY2hpbmU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGJ1aWxkVWlTdGF0ZU1ldGFkYXRhKHN0YXRlczogSUZvcm1WaWV3TW9kZWxVaVN0YXRlW10pOiB7IFtzdGF0ZU5hbWU6IHN0cmluZ106IE5nUGFyYW0gfSB7XHJcbiAgICBjb25zdCB1aVN0YXRlczogeyBbc3RhdGVOYW1lOiBzdHJpbmddOiBOZ1BhcmFtIH0gPSB7fTtcclxuICAgIHN0YXRlcy5yZWR1Y2U8eyBbc3RhdGVOYW1lOiBzdHJpbmddOiBOZ1BhcmFtIH0+KChwcmV2aW91c1ZhbHVlLCB1aVN0YXRlKSA9PiB7XHJcbiAgICAgIHByZXZpb3VzVmFsdWVbdWlTdGF0ZS5jb2RlXSA9IHtcclxuICAgICAgICBzdGF0ZU5hbWU6IHVpU3RhdGUuY29kZVxyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcclxuICAgIH0sIHVpU3RhdGVzKTtcclxuICAgIHJldHVybiB1aVN0YXRlcztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYnVpbGRSZW5kZXJGdW5jdGlvbihyZW5kZXJTdGF0ZU1ldGFkYXRhOiBJUmVuZGVyU3RhdGUpOiBhbnkge1xyXG4gICAgaWYgKHJlbmRlclN0YXRlTWV0YWRhdGEgJiYgcmVuZGVyU3RhdGVNZXRhZGF0YS5jb25kaXRpb24ubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnN0IHJlbmRlckZ1bmN0aW9uU3RyaW5nID0gcmVuZGVyU3RhdGVNZXRhZGF0YS5jb25kaXRpb24ucmVkdWNlPHN0cmluZz4oKHByZXZpb3VzRnVuY3Rpb25TdHJpbmcsIGNvbmRpdGlvbikgPT4ge1xyXG4gICAgICAgIGxldCBjb25kaXRpb25UYXJnZXQgPSBjb25kaXRpb24udGFyZ2V0O1xyXG4gICAgICAgIGlmICghY29uZGl0aW9uVGFyZ2V0LnN0YXJ0c1dpdGgoJ1xcJycpKSB7XHJcbiAgICAgICAgICBjb25kaXRpb25UYXJnZXQgPSBgJyR7Y29uZGl0aW9uVGFyZ2V0fWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghY29uZGl0aW9uVGFyZ2V0LmVuZHNXaXRoKCdcXCcnKSkge1xyXG4gICAgICAgICAgY29uZGl0aW9uVGFyZ2V0ID0gYCR7Y29uZGl0aW9uVGFyZ2V0fSdgO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgY29uZGl0aW9uU291cmNlID0gY29uZGl0aW9uLnNvdXJjZTtcclxuICAgICAgICBpZiAoY29uZGl0aW9uU291cmNlLmluZGV4T2YoJ1xcJycpIDwgMCkge1xyXG4gICAgICAgICAgY29uZGl0aW9uU291cmNlID0gYCcke2NvbmRpdGlvblNvdXJjZX0nYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbmRpdGlvblNvdXJjZS5pbmRleE9mKCdnZXRVSVN0YXRlJykgPiAtMSkge1xyXG4gICAgICAgICAgY29uZGl0aW9uU291cmNlID0gY29uZGl0aW9uU291cmNlLnJlcGxhY2UoJ2dldFVJU3RhdGUnLCAnY29udGV4dC5nZXRVSVN0YXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb25kaXRpb25Tb3VyY2UuaW5kZXhPZignZ2V0RGF0YScpID4gLTEpIHtcclxuICAgICAgICAgIGNvbmRpdGlvblNvdXJjZSA9IGNvbmRpdGlvblNvdXJjZS5yZXBsYWNlKCdnZXREYXRhJywgJ2NvbnRleHQuZ2V0RGF0YScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG1heC1saW5lLWxlbmd0aFxyXG4gICAgICAgIGxldCBmdW5jdGlvblN0cmluZyA9IGAke2NvbmRpdGlvbi5sQnJhY2tldCB8fCAnJ31jb250ZXh0LnBhcnNlKCR7Y29uZGl0aW9uU291cmNlfSwnc291cmNlJykke2NvbmRpdGlvbi5jb21wYXJlfWNvbnRleHQucGFyc2UoJHtjb25kaXRpb24udGFyZ2V0fSwndGFyZ2V0Jykke2NvbmRpdGlvbi5yQnJhY2tldCB8fCAnJ31gO1xyXG4gICAgICAgIGlmIChjb25kaXRpb24ucmVsYXRpb24pIHtcclxuICAgICAgICAgIHN3aXRjaCAoY29uZGl0aW9uLnJlbGF0aW9uLnRyaW0oKS50b0xvY2FsZUxvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ29yJzpcclxuICAgICAgICAgICAgICBmdW5jdGlvblN0cmluZyArPSAnfHwnO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdhbmQnOlxyXG4gICAgICAgICAgICAgIGZ1bmN0aW9uU3RyaW5nICs9ICcmJic7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwcmV2aW91c0Z1bmN0aW9uU3RyaW5nICsgZnVuY3Rpb25TdHJpbmc7XHJcbiAgICAgIH0sICcnKTtcclxuICAgICAgaWYgKHJlbmRlckZ1bmN0aW9uU3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbignY29udGV4dCcsIGByZXR1cm4gJHtyZW5kZXJGdW5jdGlvblN0cmluZ307YCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oJ2NvbnRleHQnLCAncmV0dXJuIHRydWU7Jyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGJ1aWxkQ29tbWFuZEhhbmRsZXJzKGNvbW1hbmRNZXRhZGF0YUFycmF5OiBJRm9ybVZpZXdNb2RlbENvbW1hbmRbXSwgY29udHJvbGxlcnM6IHsgW2lkOiBzdHJpbmddOiBDb21tYW5kQ29udHJvbGxlciB9KVxyXG4gICAgOiBDb21tYW5kSGFuZGxlcltdIHtcclxuICAgIGNvbnN0IGNvbW1hbmRIYW5kbGVyczogQ29tbWFuZEhhbmRsZXJbXSA9IFtdO1xyXG4gICAgY29tbWFuZE1ldGFkYXRhQXJyYXkucmVkdWNlPENvbW1hbmRIYW5kbGVyW10+KChwcmV2aW91c1ZhbHVlOiBDb21tYW5kSGFuZGxlcltdLCBjb21tYW5kUmVmZXJlbmNlOiBJRm9ybVZpZXdNb2RlbENvbW1hbmQpID0+IHtcclxuICAgICAgY29uc3QgY29tbWFuZE5hbWUgPSBjb21tYW5kUmVmZXJlbmNlLmNvZGU7XHJcbiAgICAgIGNvbnN0IGNvbnRyb2xsZXJJZCA9IGNvbW1hbmRSZWZlcmVuY2UuY21wSWQ7XHJcbiAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1tjb250cm9sbGVySWRdO1xyXG4gICAgICBjb25zdCBtZXRob2QgPSBPYmplY3QuYXNzaWduKHt9LCBjb250cm9sbGVyLm1ldGhvZHNbY29tbWFuZFJlZmVyZW5jZS5oYW5kbGVyTmFtZV0pO1xyXG4gICAgICBtZXRob2QucGFyYW1zID0gbWV0aG9kLnBhcmFtcyAmJiBtZXRob2QucGFyYW1zLm1hcChwYXJhbSA9PiBPYmplY3QuYXNzaWduKHt9LCBwYXJhbSkpO1xyXG4gICAgICBpZiAobWV0aG9kLnBhcmFtcyAmJiBtZXRob2QucGFyYW1zLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbW1hbmRSZWZlcmVuY2UucGFyYW1zLnJlZHVjZTxDb250cm9sbGVyTWV0aG9kPigocHJldmlvdXNNZXRob2RWYWx1ZTogQ29udHJvbGxlck1ldGhvZCwgcGFyYW06IElGb3JtVmlld01vZGVsQ29tbWFuZFBhcmFtKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBtZXRob2RQYXJhbSA9IHByZXZpb3VzTWV0aG9kVmFsdWUucGFyYW1zLmZpbmQodmFsdWUgPT4gdmFsdWUubmFtZSA9PT0gcGFyYW0ubmFtZSk7XHJcbiAgICAgICAgICBpZiAobWV0aG9kUGFyYW0pIHtcclxuICAgICAgICAgICAgbWV0aG9kUGFyYW0uZXhwcmVzc2lvbiA9IHBhcmFtLnZhbHVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIHByZXZpb3VzTWV0aG9kVmFsdWU7XHJcbiAgICAgICAgfSwgbWV0aG9kKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBjb21tYW5kSGFuZGxlciA9IG5ldyBEeW5hbWljQ29tbWFuZEhhbmRsZXIoY29tbWFuZE5hbWUsIG1ldGhvZCk7XHJcbiAgICAgIHByZXZpb3VzVmFsdWUucHVzaChjb21tYW5kSGFuZGxlcik7XHJcbiAgICAgIHJldHVybiBwcmV2aW91c1ZhbHVlO1xyXG4gICAgfSwgY29tbWFuZEhhbmRsZXJzKTtcclxuICAgIHJldHVybiBjb21tYW5kSGFuZGxlcnM7XHJcbiAgfVxyXG59XHJcbiJdfQ==