/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, Injector, ApplicationRef } from '@angular/core';
import { FilterPanelComponent } from './filter-panel.component';
import * as i0 from "@angular/core";
export class FilterPanelService {
    // private instanceMap = new Map();
    /**
     * @param {?} cfr
     * @param {?} injector
     * @param {?} appRef
     */
    constructor(cfr, injector, appRef) {
        this.cfr = cfr;
        this.injector = injector;
        this.appRef = appRef;
    }
    /**
     * @param {?} option
     * @return {?}
     */
    showPanel(option) {
        /** @type {?} */
        const instanceID = option.localStorageKey;
        this.hidePanel();
        /** @type {?} */
        const containerFac = this.cfr.resolveComponentFactory(FilterPanelComponent);
        /** @type {?} */
        const filterPanelContainer = containerFac.create(this.injector);
        this.appRef.attachView(filterPanelContainer.hostView);
        document.querySelector('body').appendChild(filterPanelContainer.location.nativeElement);
        filterPanelContainer.instance.option = option;
        filterPanelContainer.instance.injector = this.injector;
        // filterPanelContainer.instance.clear.subscribe((event)=>{
        //   this.clear();
        // });
        filterPanelContainer.changeDetectorRef.markForCheck();
        filterPanelContainer.changeDetectorRef.detectChanges();
        // if (!this.instanceMap.has(instanceID)) {
        //     this.instanceMap.set(instanceID, filterPanelContainer);
        // }
        this.filterPanelContainer = filterPanelContainer;
        return filterPanelContainer.instance;
    }
    /**
     * @return {?}
     */
    hidePanel() {
        //  const filterPanelContainer = this.instanceMap.get(id);
        if (this.filterPanelContainer) {
            this.filterPanelContainer.instance.hide = true;
            this.filterPanelContainer.destroy();
            this.filterPanelContainer = null;
            // this.instanceMap.delete(id);
        }
    }
}
FilterPanelService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FilterPanelService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ApplicationRef }
];
/** @nocollapse */ FilterPanelService.ngInjectableDef = i0.defineInjectable({ factory: function FilterPanelService_Factory() { return new FilterPanelService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR), i0.inject(i0.ApplicationRef)); }, token: FilterPanelService, providedIn: "root" });
if (false) {
    /** @type {?} */
    FilterPanelService.prototype.filterPanelContainer;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.appRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXBhbmVsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1wYW5lbC8iLCJzb3VyY2VzIjpbImxpYi9maWx0ZXItcGFuZWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSx3QkFBd0IsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUE4QyxNQUFNLGVBQWUsQ0FBQztBQUMzSSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7QUFNaEUsTUFBTSxPQUFPLGtCQUFrQjs7Ozs7OztJQU8zQixZQUNZLEdBQTZCLEVBQzdCLFFBQWtCLEVBQ2xCLE1BQXNCO1FBRnRCLFFBQUcsR0FBSCxHQUFHLENBQTBCO1FBQzdCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7SUFDOUIsQ0FBQzs7Ozs7SUFFTCxTQUFTLENBQUMsTUFBeUI7O2NBQ3pCLFVBQVUsR0FBRyxNQUFNLENBQUMsZUFBZTtRQUN6QyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7O2NBQ1gsWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsb0JBQW9CLENBQUM7O2NBQ3JFLG9CQUFvQixHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUMvRCxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV0RCxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDeEYsb0JBQW9CLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDOUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3ZELDJEQUEyRDtRQUMzRCxrQkFBa0I7UUFDbEIsTUFBTTtRQUNOLG9CQUFvQixDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3RELG9CQUFvQixDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3ZELDJDQUEyQztRQUMzQyw4REFBOEQ7UUFDOUQsSUFBSTtRQUNKLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQztRQUNqRCxPQUFPLG9CQUFvQixDQUFDLFFBQVEsQ0FBQztJQUN6QyxDQUFDOzs7O0lBRU0sU0FBUztRQUNaLDBEQUEwRDtRQUUxRCxJQUFJLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtZQUMzQixJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDL0MsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3BDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUM7WUFDakMsK0JBQStCO1NBQ2xDO0lBQ0wsQ0FBQzs7O1lBL0NKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7OztZQU5vQix3QkFBd0I7WUFBRSxRQUFRO1lBQUUsY0FBYzs7Ozs7SUFTbkUsa0RBQXlEOzs7OztJQU1yRCxpQ0FBcUM7Ozs7O0lBQ3JDLHNDQUEwQjs7Ozs7SUFDMUIsb0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBJbmplY3RvciwgQXBwbGljYXRpb25SZWYsIENvbXBvbmVudFJlZiwgVmlld0NvbnRhaW5lclJlZiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGaWx0ZXJQYW5lbENvbXBvbmVudCB9IGZyb20gJy4vZmlsdGVyLXBhbmVsLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEZpbHRlclBhbmVsT3B0aW9uIH0gZnJvbSAnLi9maWx0ZXItcGFuZWwuaW50ZXJmYWNlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRmlsdGVyUGFuZWxTZXJ2aWNlIHtcclxuXHJcbiAgICBmaWx0ZXJQYW5lbENvbnRhaW5lcjogQ29tcG9uZW50UmVmPEZpbHRlclBhbmVsQ29tcG9uZW50PjtcclxuXHJcbiAgICAvLyBwcml2YXRlIGluc3RhbmNlTWFwID0gbmV3IE1hcCgpO1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgICAgIHByaXZhdGUgYXBwUmVmOiBBcHBsaWNhdGlvblJlZixcclxuICAgICkgeyB9XHJcblxyXG4gICAgc2hvd1BhbmVsKG9wdGlvbjogRmlsdGVyUGFuZWxPcHRpb24pIHtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZUlEID0gb3B0aW9uLmxvY2FsU3RvcmFnZUtleTtcclxuICAgICAgICB0aGlzLmhpZGVQYW5lbCgpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lckZhYyA9IHRoaXMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KEZpbHRlclBhbmVsQ29tcG9uZW50KTtcclxuICAgICAgICBjb25zdCBmaWx0ZXJQYW5lbENvbnRhaW5lciA9IGNvbnRhaW5lckZhYy5jcmVhdGUodGhpcy5pbmplY3Rvcik7XHJcbiAgICAgICAgdGhpcy5hcHBSZWYuYXR0YWNoVmlldyhmaWx0ZXJQYW5lbENvbnRhaW5lci5ob3N0Vmlldyk7XHJcblxyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5hcHBlbmRDaGlsZChmaWx0ZXJQYW5lbENvbnRhaW5lci5sb2NhdGlvbi5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICBmaWx0ZXJQYW5lbENvbnRhaW5lci5pbnN0YW5jZS5vcHRpb24gPSBvcHRpb247XHJcbiAgICAgICAgZmlsdGVyUGFuZWxDb250YWluZXIuaW5zdGFuY2UuaW5qZWN0b3IgPSB0aGlzLmluamVjdG9yO1xyXG4gICAgICAgIC8vIGZpbHRlclBhbmVsQ29udGFpbmVyLmluc3RhbmNlLmNsZWFyLnN1YnNjcmliZSgoZXZlbnQpPT57XHJcbiAgICAgICAgLy8gICB0aGlzLmNsZWFyKCk7XHJcbiAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgZmlsdGVyUGFuZWxDb250YWluZXIuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XHJcbiAgICAgICAgZmlsdGVyUGFuZWxDb250YWluZXIuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIC8vIGlmICghdGhpcy5pbnN0YW5jZU1hcC5oYXMoaW5zdGFuY2VJRCkpIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5pbnN0YW5jZU1hcC5zZXQoaW5zdGFuY2VJRCwgZmlsdGVyUGFuZWxDb250YWluZXIpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICB0aGlzLmZpbHRlclBhbmVsQ29udGFpbmVyID0gZmlsdGVyUGFuZWxDb250YWluZXI7XHJcbiAgICAgICAgcmV0dXJuIGZpbHRlclBhbmVsQ29udGFpbmVyLmluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBoaWRlUGFuZWwoKSB7XHJcbiAgICAgICAgLy8gIGNvbnN0IGZpbHRlclBhbmVsQ29udGFpbmVyID0gdGhpcy5pbnN0YW5jZU1hcC5nZXQoaWQpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlclBhbmVsQ29udGFpbmVyLmluc3RhbmNlLmhpZGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlclBhbmVsQ29udGFpbmVyLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lciA9IG51bGw7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuaW5zdGFuY2VNYXAuZGVsZXRlKGlkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19