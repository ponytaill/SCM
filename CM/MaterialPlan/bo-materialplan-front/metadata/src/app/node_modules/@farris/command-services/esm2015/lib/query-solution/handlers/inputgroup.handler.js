import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
export class InputGroupHandler {
    convert(qc) {
        const igv = qc.value;
        const arr = [];
        if (igv.isInputText || igv.textField == null) {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Like,
                'Value': igv.textValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        }
        else {
            igv.getOriginalValue().split(',').forEach(itemValue => {
                itemValue && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.Equal,
                    'Value': itemValue,
                    'Relation': RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            });
            if (arr.length > 0) {
                arr[0]['Lbracket'] = '(';
                arr[arr.length - 1]['Rbracket'] = ')';
                arr[arr.length - 1]['Relation'] = RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRncm91cC5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3F1ZXJ5LXNvbHV0aW9uL2hhbmRsZXJzL2lucHV0Z3JvdXAuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUUxRCxNQUFNLE9BQU8saUJBQWlCO0lBQzVCLE9BQU8sQ0FBQyxFQUFrQjtRQUN4QixNQUFNLEdBQUcsR0FBSSxFQUFFLENBQUMsS0FBeUIsQ0FBQztRQUMxQyxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFFZixJQUFJLEdBQUcsQ0FBQyxXQUFXLElBQUksR0FBRyxDQUFDLFNBQVMsSUFBSSxJQUFJLEVBQUU7WUFDNUMsR0FBRyxDQUFDLElBQUksQ0FBQztnQkFDUCxhQUFhLEVBQUUsRUFBRSxDQUFDLFNBQVM7Z0JBQzNCLFNBQVMsRUFBRSxXQUFXLENBQUMsSUFBSTtnQkFDM0IsT0FBTyxFQUFFLEdBQUcsQ0FBQyxTQUFTO2dCQUN0QixVQUFVLEVBQUUsWUFBWSxDQUFDLEdBQUc7Z0JBQzVCLGFBQWEsRUFBRSxTQUFTLENBQUMsS0FBSzthQUMvQixDQUFDLENBQUM7WUFDSCxPQUFPLEdBQUcsQ0FBQztTQUNaO2FBQ0k7WUFDSCxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUNwRCxTQUFTLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQztvQkFDcEIsYUFBYSxFQUFFLEVBQUUsQ0FBQyxTQUFTO29CQUMzQixTQUFTLEVBQUUsV0FBVyxDQUFDLEtBQUs7b0JBQzVCLE9BQU8sRUFBRSxTQUFTO29CQUNsQixVQUFVLEVBQUUsWUFBWSxDQUFDLEVBQUU7b0JBQzNCLGFBQWEsRUFBRSxTQUFTLENBQUMsS0FBSztpQkFDL0IsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUN6QixHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ3RDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUM7Z0JBQ25ELE9BQU8sR0FBRyxDQUFDO2FBQ1o7aUJBQU07Z0JBQ0wsT0FBTyxFQUFFLENBQUM7YUFDWDtTQUNGO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlciB9IGZyb20gXCIuL2lxdWVyeWNvbmRpdGlvbi5oYW5kbGVyXCI7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uLCBJbnB1dEdyb3VwVmFsdWUgfSBmcm9tIFwiQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb25cIjtcclxuaW1wb3J0IHsgQ29tcGFyZVR5cGUgfSBmcm9tICcuLi9lbnVtL2NvbXBhcmUtdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgVmFsdWVUeXBlIH0gZnJvbSAnLi4vZW51bS92YWx1ZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBSZWxhdGlvblR5cGUgfSBmcm9tICcuLi9lbnVtL3JlbGF0aW9uLXR5cGUuZW51bSc7XHJcblxyXG5leHBvcnQgY2xhc3MgSW5wdXRHcm91cEhhbmRsZXIgaW1wbGVtZW50cyBJUXVlcnlDb25kaXRpb25IYW5kbGVyIHtcclxuICBjb252ZXJ0KHFjOiBRdWVyeUNvbmRpdGlvbikge1xyXG4gICAgY29uc3QgaWd2ID0gKHFjLnZhbHVlIGFzIElucHV0R3JvdXBWYWx1ZSk7XHJcbiAgICBjb25zdCBhcnIgPSBbXTtcclxuXHJcbiAgICBpZiAoaWd2LmlzSW5wdXRUZXh0IHx8IGlndi50ZXh0RmllbGQgPT0gbnVsbCkge1xyXG4gICAgICBhcnIucHVzaCh7XHJcbiAgICAgICAgJ0ZpbHRlckZpZWxkJzogcWMuZmllbGRDb2RlLFxyXG4gICAgICAgICdDb21wYXJlJzogQ29tcGFyZVR5cGUuTGlrZSxcclxuICAgICAgICAnVmFsdWUnOiBpZ3YudGV4dFZhbHVlLC8vZW5jb2RlVVJJQ29tcG9uZW50KGlndi50ZXh0VmFsdWUpLFxyXG4gICAgICAgICdSZWxhdGlvbic6IFJlbGF0aW9uVHlwZS5BbmQsXHJcbiAgICAgICAgJ0V4cHJlc3N0eXBlJzogVmFsdWVUeXBlLlZhbHVlXHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gYXJyO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGlndi5nZXRPcmlnaW5hbFZhbHVlKCkuc3BsaXQoJywnKS5mb3JFYWNoKGl0ZW1WYWx1ZSA9PiB7XHJcbiAgICAgICAgaXRlbVZhbHVlICYmIGFyci5wdXNoKHtcclxuICAgICAgICAgICdGaWx0ZXJGaWVsZCc6IHFjLmZpZWxkQ29kZSxcclxuICAgICAgICAgICdDb21wYXJlJzogQ29tcGFyZVR5cGUuRXF1YWwsXHJcbiAgICAgICAgICAnVmFsdWUnOiBpdGVtVmFsdWUsXHJcbiAgICAgICAgICAnUmVsYXRpb24nOiBSZWxhdGlvblR5cGUuT3IsXHJcbiAgICAgICAgICAnRXhwcmVzc3R5cGUnOiBWYWx1ZVR5cGUuVmFsdWVcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICAgIGlmIChhcnIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGFyclswXVsnTGJyYWNrZXQnXSA9ICcoJztcclxuICAgICAgICBhcnJbYXJyLmxlbmd0aCAtIDFdWydSYnJhY2tldCddID0gJyknO1xyXG4gICAgICAgIGFyclthcnIubGVuZ3RoIC0gMV1bJ1JlbGF0aW9uJ10gPSBSZWxhdGlvblR5cGUuQW5kO1xyXG4gICAgICAgIHJldHVybiBhcnI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==