/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Directive, TemplateRef, ContentChild, ElementRef, HostBinding, ViewEncapsulation, Output, EventEmitter, ChangeDetectionStrategy, ViewChild } from '@angular/core';
import { DataListFacadeService } from './core/datalist-facade.service';
var DataListItemTemplateDirective = /** @class */ (function () {
    function DataListItemTemplateDirective(template) {
        this.template = template;
    }
    DataListItemTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[list-item-tmp]'
                },] }
    ];
    /** @nocollapse */
    DataListItemTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return DataListItemTemplateDirective;
}());
export { DataListItemTemplateDirective };
if (false) {
    /** @type {?} */
    DataListItemTemplateDirective.prototype.template;
}
var DatalistComponent = /** @class */ (function () {
    function DatalistComponent(el, store) {
        this.el = el;
        this.store = store;
        this.cls = true;
        this.fit = true;
        this.width = 300;
        this.height = 400;
        this.multiSelect = false;
        this.disabled = false;
        this.showHeader = false;
        this.showCheckBox = false;
        this.headerHeight = 40;
        this.enableCancelSelected = true;
        /**
         * 分隔符，默认为 ,
         */
        this.separator = ',';
        this.selected = new EventEmitter();
        this.unSelected = new EventEmitter();
        this.selectedValuesChange = new EventEmitter();
        this.scrollbarHeight$ = this.store.containerHeight$;
        // tslint:disable-next-line:variable-name
        this._options$ = this.store.options$;
        this.data$ = this.store.data$;
    }
    Object.defineProperty(DatalistComponent.prototype, "fluid", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height === 'auto' ? false : this.fit;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    DatalistComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes && changes.data && !changes.data.isFirstChange()) {
            this.initCtrlState();
        }
        if (changes.selectedValues && !changes.selectedValues.isFirstChange()) {
            if (this.selectedValues !== '' && this.selectedValues !== undefined && this.selectedValues !== null) {
                this.store.setSelections(this.selectedValues, this.separator);
            }
            else {
                this.clearSelections();
            }
        }
    };
    /**
     * @return {?}
     */
    DatalistComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._height = this.height;
        this.initCtrlState();
    };
    /**
     * @return {?}
     */
    DatalistComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.selectedValues && _this.height !== 'auto') {
                /** @type {?} */
                var val_1 = _this.selectedValues;
                if (_this.selectedValues.indexOf(_this.separator) > -1) {
                    val_1 = _this.selectedValues.indexOf(_this.separator)[0];
                }
                /** @type {?} */
                var index = _this.data.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[_this.idField] == val_1; }));
                /** @type {?} */
                var ulEl = _this.el.nativeElement.querySelector('ul.list-group');
                if (ulEl.children[index]) {
                    ulEl.children[index].scrollIntoView({ block: 'nearest' });
                }
            }
        }), 10);
    };
    /**
     * @private
     * @return {?}
     */
    DatalistComponent.prototype.loadData = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.data) {
            this.store.loadData(this.data, this.selectedValues, this.separator);
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatalistComponent.prototype.initCtrlState = /**
     * @private
     * @return {?}
     */
    function () {
        var _a = tslib_1.__assign({}, this), title = _a.title, textField = _a.textField, fit = _a.fit, idField = _a.idField, valueField = _a.valueField, width = _a.width, height = _a.height, multiSelect = _a.multiSelect, disabled = _a.disabled, headerHeight = _a.headerHeight, separator = _a.separator;
        this.store.initState({
            title: title,
            textField: textField,
            valueField: valueField,
            fit: fit,
            idField: idField,
            width: width,
            height: height,
            multiSelect: multiSelect,
            disabled: disabled,
            headerHeight: headerHeight,
            separator: separator
        });
        this.loadData();
    };
    /**
     * @return {?}
     */
    DatalistComponent.prototype.clearSelections = /**
     * @return {?}
     */
    function () {
        this.store.clearSelections();
    };
    /**
     * @return {?}
     */
    DatalistComponent.prototype.resize = /**
     * @return {?}
     */
    function () {
        if (this.fit) {
            /** @type {?} */
            var container = this.el.nativeElement.parentElement;
            /** @type {?} */
            var width = container.offsetWidth;
            /** @type {?} */
            var height = container.offsetHeight;
            this.store.updateContainerSize(width, height);
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatalistComponent.prototype.updateSelectValues = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.selectedValues = this.store.getSelections().map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return item[_this.valueField];
        })).join(this.separator);
        this.selectedValuesChange.emit(this.selectedValues);
    };
    /**
     * @param {?} event
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    DatalistComponent.prototype.onSelectHandler = /**
     * @param {?} event
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    function (event, index, item) {
        event.stopPropagation();
        if (this.disabled) {
            return false;
        }
        var data = tslib_1.__assign({}, item).data;
        if (!this.store.isSelect(item.id)) {
            this.store.selectItem(data, index);
            this.updateSelectValues();
            this.selected.emit({ index: index, data: data });
        }
        else {
            if (this.enableCancelSelected) {
                this.store.unSelectItem(data);
                this.updateSelectValues();
                this.unSelected.emit({ index: index, data: data });
            }
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatalistComponent.prototype.onCheckedChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var index = $event.index, row = $event.row, originalEvent = $event.originalEvent;
        this.onSelectHandler(originalEvent, index, row);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    DatalistComponent.prototype.isChecked = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this = this;
        /** @type {?} */
        var val = this.selectedValues;
        if (this.selectedValues === null && this.selectedValues === undefined) {
            val = '';
        }
        if (typeof val === 'boolean') {
            val = '' + val;
        }
        if (val) {
            /** @type {?} */
            var _vals = [];
            if (this.multiSelect) {
                _vals = val.split(this.separator);
            }
            else {
                _vals = [val];
            }
            return _vals.some((/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return v == '' + item.data[_this.valueField]; }));
        }
        return false;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    DatalistComponent.prototype.isSelected = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.isChecked(item);
    };
    /**
     * @return {?}
     */
    DatalistComponent.prototype.selectAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.selectedValues = this.data.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item[_this.valueField]; })).join(this.separator);
        this.store.selectAll();
    };
    /**
     * @return {?}
     */
    DatalistComponent.prototype.unSelectAll = /**
     * @return {?}
     */
    function () {
        this.selectedValues = '';
        this.store.clearSelections();
    };
    DatalistComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-datalist',
                    template: "<div *ngIf=\"_options$ | async as opts\" class=\"card\" [style.width.%]=\"100\" [style.height]=\"opts.height === 'auto' ? 'auto' : opts.height + 'px'\" style=\"min-height: 10px;\">\r\n    <div class=\"card-header\" *ngIf=\"opts.showHeader\">\r\n        {{ opts.title }}\r\n    </div>\r\n    <!-- <perfect-scrollbar #ps *ngIf=\"opts.height && opts.height !== 'auto'\" [style.width.%]=\"100\" [style.height.px]=\"scrollbarHeight$ | async\"> -->\r\n    <div *ngIf=\"opts.height && opts.height !== 'auto' && (data$ | async).length > 0\" style=\"overflow: auto;\" [style.width.%]=\"100\" [style.height.px]=\"scrollbarHeight$ | async\">\r\n        <ul class=\"list-group list-group-flush\">\r\n            <li style=\"cursor: default;\" [farrist-datalist-item]=\"item\" [style.height.px]=\"itemHeight\"\r\n                [class.active]=\"store.isSelect(item.id)\" class=\"list-group-item list-group-item-action\"\r\n                *ngFor=\"let item of data$ | async; let i = index\" title=\"{{item.data[textField]}}\" (click)=\"onSelectHandler( $event, i, item)\">\r\n                <dl-checkbox *ngIf=\"multiSelect\" [checked]=\"isChecked(item)\" [index]=\"i\" [row]=\"item\"\r\n                    (checkedChange)=\"onCheckedChange($event)\"></dl-checkbox>\r\n                <ng-container *ngIf=\"!itemTemplate\">\r\n                    <span class=\"f-datalist-item-text\">{{ item.data[textField] }}</span>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"itemTemplate\" [ngTemplateOutlet]=\"itemTemplate\"\r\n                    [ngTemplateOutletContext]=\"{ data: item, index: i }\">\r\n                </ng-container>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <!-- </perfect-scrollbar> -->\r\n    <div *ngIf=\"opts.height === 'auto' && (data$ | async).length > 0\" >\r\n        <ul class=\"list-group list-group-flush\">\r\n            <li style=\"cursor: default;\" [farrist-datalist-item]=\"item\" [style.height.px]=\"itemHeight\"\r\n                [class.active]=\"isSelected(item)\" class=\"list-group-item list-group-item-action\"\r\n                *ngFor=\"let item of data$ | async; let i = index\" title=\"{{item.data[textField]}}\" (click)=\"onSelectHandler( $event, i, item)\">\r\n                <dl-checkbox *ngIf=\"multiSelect\" [checked]=\"isChecked(item)\" [index]=\"i\" [row]=\"item\"\r\n                    (checkedChange)=\"onCheckedChange($event)\"></dl-checkbox>\r\n                <ng-container *ngIf=\"!itemTemplate\">\r\n                    <span class=\"f-datalist-item-text\">{{ item.data[textField] }}</span>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"itemTemplate\" [ngTemplateOutlet]=\"itemTemplate\"\r\n                    [ngTemplateOutletContext]=\"{ data: item, index: i }\">\r\n                </ng-container>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <div *ngIf=\"(data$ | async).length === 0\" style=\"height: 200px;\">\r\n        <div class=\"f-table-norecords-content\">\u6682\u65E0\u6570\u636E</div>\r\n    </div>\r\n</div>",
                    providers: [DataListFacadeService],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["\n            .ps__rail-x,\n            .ps__rail-y {\n                z-index: 9;\n            }\n            .norecords-content {\n                height: 8.125rem;\n                padding: 7.8125rem 0 0;\n                width: 100%;\n                text-align: center;\n                font-size: 1rem;\n                color: rgba(0,0,0,.25);\n                background: url(imgs/table-norecords.png) top center no-repeat;\n                margin: -4.0625rem 0 0 -.625rem;\n                line-height: 2.5rem;\n            }\n        "]
                }] }
    ];
    /** @nocollapse */
    DatalistComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DataListFacadeService }
    ]; };
    DatalistComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class.f-datalist',] }],
        fluid: [{ type: HostBinding, args: ['class.farris-main-area',] }],
        itemHeight: [{ type: Input }],
        title: [{ type: Input }],
        data: [{ type: Input }],
        textField: [{ type: Input }],
        valueField: [{ type: Input }],
        idField: [{ type: Input }],
        fit: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        multiSelect: [{ type: Input }],
        disabled: [{ type: Input }],
        showHeader: [{ type: Input }],
        showCheckBox: [{ type: Input }],
        headerHeight: [{ type: Input }],
        selectedValues: [{ type: Input }],
        enableCancelSelected: [{ type: Input }],
        separator: [{ type: Input }],
        itemTemplate: [{ type: ContentChild, args: [DataListItemTemplateDirective, { read: TemplateRef },] }],
        selected: [{ type: Output }],
        unSelected: [{ type: Output }],
        selectedValuesChange: [{ type: Output }]
    };
    return DatalistComponent;
}());
export { DatalistComponent };
if (false) {
    /** @type {?} */
    DatalistComponent.prototype.cls;
    /** @type {?} */
    DatalistComponent.prototype.itemHeight;
    /** @type {?} */
    DatalistComponent.prototype.title;
    /** @type {?} */
    DatalistComponent.prototype.data;
    /** @type {?} */
    DatalistComponent.prototype.textField;
    /** @type {?} */
    DatalistComponent.prototype.valueField;
    /** @type {?} */
    DatalistComponent.prototype.idField;
    /** @type {?} */
    DatalistComponent.prototype.fit;
    /** @type {?} */
    DatalistComponent.prototype.width;
    /** @type {?} */
    DatalistComponent.prototype.height;
    /** @type {?} */
    DatalistComponent.prototype.multiSelect;
    /** @type {?} */
    DatalistComponent.prototype.disabled;
    /** @type {?} */
    DatalistComponent.prototype.showHeader;
    /** @type {?} */
    DatalistComponent.prototype.showCheckBox;
    /** @type {?} */
    DatalistComponent.prototype.headerHeight;
    /** @type {?} */
    DatalistComponent.prototype.selectedValues;
    /** @type {?} */
    DatalistComponent.prototype.enableCancelSelected;
    /**
     * 分隔符，默认为 ,
     * @type {?}
     */
    DatalistComponent.prototype.separator;
    /** @type {?} */
    DatalistComponent.prototype.itemTemplate;
    /** @type {?} */
    DatalistComponent.prototype.selected;
    /** @type {?} */
    DatalistComponent.prototype.unSelected;
    /** @type {?} */
    DatalistComponent.prototype.selectedValuesChange;
    /** @type {?} */
    DatalistComponent.prototype.scrollbarHeight$;
    /** @type {?} */
    DatalistComponent.prototype._options$;
    /** @type {?} */
    DatalistComponent.prototype.data$;
    /**
     * @type {?}
     * @private
     */
    DatalistComponent.prototype._height;
    /** @type {?} */
    DatalistComponent.prototype.el;
    /** @type {?} */
    DatalistComponent.prototype.store;
}
var DataListItemComponentDirective = /** @class */ (function () {
    function DataListItemComponentDirective(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    DataListItemComponentDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    DataListItemComponentDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[farrist-datalist-item]'
                },] }
    ];
    /** @nocollapse */
    DataListItemComponentDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    DataListItemComponentDirective.propDecorators = {
        data: [{ type: Input, args: ['farrist-datalist-item',] }]
    };
    return DataListItemComponentDirective;
}());
export { DataListItemComponentDirective };
if (false) {
    /** @type {?} */
    DataListItemComponentDirective.prototype.data;
    /**
     * @type {?}
     * @private
     */
    DataListItemComponentDirective.prototype.el;
}
/**
 * 表体checkbox 组件
 */
var DataListCheckboxComponent = /** @class */ (function () {
    function DataListCheckboxComponent() {
        this.checkedChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    DataListCheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} event
     * @return {?}
     */
    DataListCheckboxComponent.prototype.handleClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.checked = !this.checked;
        this.checkedChange.emit({ originalEvent: event, index: this.index, row: this.row, state: this.checked });
        event.stopPropagation();
    };
    DataListCheckboxComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'dl-checkbox',
                    template: "\n        <div class=\"custom-control custom-checkbox  custom-control-inline dl-checkbox\">\n            <input type=\"checkbox\" #chk class=\"custom-control-input\" [disabled]=\"disabled\" [checked]=\"checked\" />\n            <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\n        </div>\n    ",
                    styles: ["\n            :host .custom-checkbox {\n                opacity: 1;\n                float: none;\n                margin: 0;\n                vertical-align: top;\n                padding-right: 0px;\n            }\n        "]
                }] }
    ];
    /** @nocollapse */
    DataListCheckboxComponent.ctorParameters = function () { return []; };
    DataListCheckboxComponent.propDecorators = {
        checked: [{ type: Input }],
        disabled: [{ type: Input }],
        index: [{ type: Input }],
        row: [{ type: Input }],
        checkedChange: [{ type: Output }],
        chk: [{ type: ViewChild, args: ['chk',] }]
    };
    return DataListCheckboxComponent;
}());
export { DataListCheckboxComponent };
if (false) {
    /** @type {?} */
    DataListCheckboxComponent.prototype.checked;
    /** @type {?} */
    DataListCheckboxComponent.prototype.disabled;
    /** @type {?} */
    DataListCheckboxComponent.prototype.index;
    /** @type {?} */
    DataListCheckboxComponent.prototype.row;
    /** @type {?} */
    DataListCheckboxComponent.prototype.checkedChange;
    /** @type {?} */
    DataListCheckboxComponent.prototype.chk;
}
//# sourceMappingURL=data:application/json;base64,