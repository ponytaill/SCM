import * as tslib_1 from "tslib";
import { Injector, Injectable, Optional, SkipSelf, InjectFlags } from '@angular/core';
import { Repository } from '../repository/index';
import { BindingData } from '../binding-data/index';
import { UIState, PARAM_TYPE_TRANSFORM_TOKEN } from '../ui-state/index';
import { Form } from '../form/index';
import { StateMachine } from '../state-machine/index';
import { ViewModel } from '../view-model/index';
import { CommandBus, CommandHandlerExtenderRegistry, CommandHandlerFactory, CommandHandlerRegistry } from '../command/index';
import { Context } from '../context/index';
import { AppContext } from '../app/index';
import { RouterParamService } from '../misc/index';
import { FRAME_ID, NAMESPACE } from './tokens';
import { ChangeType } from '../binding-data/index';
import { EventBus } from '../event-bus-new/index';
import { EXCEPTION_HANDLER } from '../exception/tokens';
import { EntityUtil } from '../binding-data/entity_util';
import { TranslateToken } from '../i18n/translate_token';
import { VariableParseService } from '../variable/variable_parse_service';
import { TranslateService } from '../i18n/translate_service';
import { UserSettingsToken } from '../i18n/tokens';
import { UserSettingsService } from '../i18n/user_settings_service';
import { ExpressionEngineImpl } from '../expression/expression_engine_impl';
import { ExpressionManager } from '../expression/expression_manager';
import { ExpressionResult } from '../expression/expression_result';
import { ExpressionResultFactory } from '../expression/expression_result_factory';
import { CommandVariableParser, DataVariableParser, FrameIdVariableParser, StateMachineVariableParser, UIStateVariableParser } from '../variable';
import { CHANGE_SET_POLICY_TOKEN, RunMode } from '../core';
import { Subject } from 'rxjs';
import { ComponentRefManager } from './component_ref_manager';
/**
 * 组件上下文
 * @description
 * # 上下文
 * ## Overview
 *
 * 每个组件（FrameComponent）都有自己的上下文（FrameContext）,通过上下文可以获取控制器的所有属性，如常用的`frameId`、`BindingData`、`Repository`、`ViewModel`、`StateMachine`、 * `UIState`等。上下文在内存中呈树形结构，依附于FrameComponent。结构如下：
 *
 * ![image-20210806204755378](https://open.inspuronline.com/iGIX/assets/cloudplus/igix_2110/farris/devkit/guide/images/image-20210806204755378.png)
 *
 * 从上图我们可以看出每个上下文都有自己的`ViewModel`、`UIState`，那么如何确定一个命令在执行时用的是哪个上下文呢？其实无论命令在哪个地方被调用，上下文都是命令所在的组件的上下文。即，如果 * 命令挂载到了`detail-form-component`的视图模型，但命令最终被`root-component`上的按钮调用了，其上下文仍然是`detail-from-component`组件的上下文。之所以出现这种现象和Angular的依赖注 * 入密不可分，由于Angular在查找`provider`的时候总是从自己的组件开始向上找，如果在组件内部找到了则不再继续查找，如果找不到则会继续向上，如果查找到最上级依然找不到就会报`No provider  * for xx`错误。
 *
 * 既然如此，如果我们在`detail-form-component`中想要获取`root-component`中定义的变量（UIState）该如何做呢？答案是切换上下文，可以通过以下方式实现：
 *
 * ```typescript
 * // 方法1
 * const rootFrameContext = this.frameContext.root;
 * // 方法2
 * const rootFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('root-component');
 * ```
 *
 * 通常在编写`Web构件`时先引入FrameContext，如：
 *
 * ```javascript
 * import {FrameContext,BindingData,Repository} from '@farris/devkit';
 *
 * constructor(private frameContext:FrameContext){}
 *
 * public method(){
 *     const bindingData: BindingData = this.frameContext.bindingData;
 *     const repository: Repository = this.frameContext.repository;
 * }
 * ```
 *
 * > `FrameContext`称为`ViewModelContext`更合适，可以理解为`MVVM`架构中`VM`的上下文。
 *
 * 控制器中亦存在`ViewModel`的概念。和`MVVM`架构中的的VM一致，所以也可以从`VM`访问常用的属性。如：
 *
 * ```typescript
 * import {BindingData,Repository,ViewModel} from '@farris/devkit';
 *
 * constructor(private viewModel:ViewModel){}
 *
 * public method(){
 *     const bindingData: BindingData = this.viewModel.bindingData;
 *     const repository: Repository = this.viewModel.repository;
 * }
 * ```
 *
 *
 *
 * ## 常用操作
 *
 * ### 获取当前上下文所属的组件
 *
 * ```typescript
 * this.frameContext.frameComponent;
 * ```
 *
 * ### 获取当前上下文的根上下文
 *
 * ```typescript
 * this.frameContext.root;
 * ```
 *
 * ### 获取当前上下文的appContext
 *
 * ```typescript
 * this.frameContext.appContext;
 * ```
 *
 * ### 获取指定frameId的上下文
 *
 * ```typescript
 * this.frameContext.appContext.frameContextManager.getFrameContextById('data-grid-component');
 * ```
 *
 * ### 获取表单所有上下文
 *
 * ```typescript
 * this.frameContext.appContext.frameContextManager.getFrameContexts();
 * ```
 *
 *
 *
 * ## 常用属性
 *
 * ### BindingData
 *
 * [参考]([浪潮企业云开放平台 (inspuronline.com)](https://open.inspuronline.com/iGIX/#/document/mddoc/igix-2103%2Ffarris%2Fdevkit%2Fguide%2F绑定数据.md))
 *
 * ### Repository
 *
 * [参考]([浪潮企业云开放平台 (inspuronline.com)](https://open.inspuronline.com/iGIX/#/document/mddoc/igix-2103%2Ffarris%2Fdevkit%2Fguide%2F仓库.md))
 *
 * ### ViewModel
 *
 * 控制器中ViewMode同MVVM架构中的VM，和FrameContext类似，可以通过ViewModel拿到FrameContext，同样的也可以通过FrameContext拿到ViewModel。
 *
 * ### namespace
 *
 * 命名空间，主要在组合表单场景用到，每一个表单都有自己的命名空间，被组合进来的表单其命名空间是相同的，如A表单组合了B表单，则B表单具有相同的命名空间，命名空间主要用于表单隔离。
 *
 * ### root
 *
 * 获取整个表单的根上下文
 *
 * ### uiState
 *
 * 获取当前组件的变量
 *
 * ### frameId
 *
 * 上下文标识。
 */
var FrameContext = /** @class */ (function (_super) {
    tslib_1.__extends(FrameContext, _super);
    /**
     * 构造函数
     * @param injector 注入器
     */
    function FrameContext(injector, parent) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.typeName = 'FrameContext';
        _this.isDestoried = false;
        _this.isDisposed = false;
        _this.metadata = {
            identify: '',
            namespace: '',
            commands: null,
            form: null,
            formControls: null,
            subForms: null,
            stateMachine: null,
            uiStates: null,
            bindingTo: ''
        };
        /**
         * 组件引用管理
         */
        _this.componentRefManager = new ComponentRefManager();
        // 在解析模式下，通过依赖注入获取不到AppContext时，返回null，在子类中进行赋值。
        _this.appContext = injector.get(AppContext);
        _this.destorySignal = new Subject();
        // 确定父子关系
        // 必须对appContext进行判断，原因如下：
        // 1、否则会导致动态路由表单中，被路由的表单的RootFrameContext变成主表单的RootFrameContext；
        // 2、进而导致从RootFrameContext上拿VO变量拿不到。
        if (!parent || parent.appContext !== _this.appContext) { // 取消 appContext 的判断
            _this.parent = null;
            _this.root = _this;
        }
        else {
            _this.parent = parent;
            _this.root = parent.root;
        }
        _this.frameId = injector.get(FRAME_ID);
        if (_this.appContext.contextMetadataManager.exsit(_this.frameId)) {
            _this.metadata = _this.appContext.contextMetadataManager.getContextMetadataByName(_this.frameId);
        }
        _this.namespace = injector.get(NAMESPACE, null);
        _this.bindingData = _this.injector.get(BindingData, new BindingData());
        if (!_this.appContext.useIsoluteEventBus || (_this.appContext.useIsoluteEventBus && !_this.appContext.isoluteEventBus)) {
            _this.eventBus = _this.injector.get(EventBus, null, InjectFlags.Optional);
        }
        else {
            _this.eventBus = _this.appContext.isoluteEventBus;
        }
        _this.form = _this.injector.get(Form, new Form());
        _this.repository = _this.injector.get(Repository, _this.appContext.repository);
        // 获取变更集策略，默认只提交合法的变更
        var changeSetPolicy = _this.injector.get(CHANGE_SET_POLICY_TOKEN, 'valid');
        if (_this.repository) {
            _this.repository.entityCollection.changeSetPolicy = changeSetPolicy;
        }
        _this.uiState = _this.injector.get(UIState, new UIState());
        var defaultViewModel = new ViewModel();
        defaultViewModel.setMetadata(_this.metadata);
        _this.viewModel = _this.injector.get(ViewModel, defaultViewModel);
        _this.variableParseService = injector.get(VariableParseService, new VariableParseService([
            new FrameIdVariableParser(),
            new DataVariableParser(),
            new UIStateVariableParser(),
            new StateMachineVariableParser(),
            new CommandVariableParser()
        ]));
        // 注入exceptionHandler
        _this.exceptionHandler = injector.get(EXCEPTION_HANDLER, null, InjectFlags.Optional);
        // 初始化多语服务
        var translate = injector.get(TranslateToken, null);
        _this.translate = translate;
        TranslateService.setTranslate(translate);
        // 初始化用户配置
        var userSettings = injector.get(UserSettingsToken, null);
        UserSettingsService.setUserSettings(userSettings);
        _this.initializeRepository();
        _this.appContext.regFrameContext(_this);
        _this.registerAppContextDestroyEvent();
        return _this;
    }
    FrameContext.prototype.dispose = function (options) {
        var _this = this;
        if (this.isDisposed) {
            return;
        }
        this.isDestoried = true;
        this.isDisposed = true;
        if (this.destorySignal) {
            this.destorySignal.next();
            this.destorySignal.complete();
        }
        if (this.appContext) {
            this.appContext.frameContextManager.unregFrameContext(this);
            this.appContext.frameComponentRefresher.unregFrameContext(this);
        }
        if (this.appContext && this.isRootFrameContext() === true) {
            var viewModelNames = this['viewModelNames'];
            if (viewModelNames && Array.isArray(viewModelNames)) {
                viewModelNames.forEach(function (name) {
                    _this[name] = null;
                });
            }
            this.appContext.unregisterFromManager();
        }
        if (this.bindingData) {
            this.bindingData.dispose();
            // this.bindingData = null;
        }
        if (this.viewModel) {
            this.viewModel.dispose();
        }
        if (this.form) {
            this.form.dispose();
            this.form = null;
        }
        if (this.commandBus) {
            this.commandBus.dispose();
            this.commandBus = null;
        }
        TranslateService.dispose();
        // this.root = null;
        // this.parent = null;
        // this.uiState = null;
        this.frameComponent = null;
        this.repository = null;
        // this.stateMachine = null;
        // this.appContext = null;
        this.exceptionHandler = null;
        this.expressionManager = null;
        this.expressionEngineImpl = null;
        this.variableParseService = null;
        this.eventBus = null;
        this.translate = null;
        this.injector = null;
        this.expressionResult = null;
        UserSettingsService.setUserSettings(null);
    };
    FrameContext.prototype.ngOnDestroy = function () {
        this.dispose();
    };
    /**
     * 通过组件标识获取对应的组件实例
     * @param id 组件标识
     * @returns
     */
    FrameContext.prototype.getComponentById = function (id) {
        var components = this.componentRefManager.get(id);
        if (components && components.length > 0) {
            var component = components[0];
            return component;
        }
        return null;
    };
    /**
     * 获取指定标识的所有组件
     * @param id 组件标识
     */
    FrameContext.prototype.getComponentsById = function (id) {
        return this.componentRefManager.get(id);
    };
    FrameContext.prototype.bindInjector = function (componentInjector) {
        this.injector = componentInjector;
    };
    // #region 初始化
    /**
     * 初始化
     * @todo:
     * 1、CommandHandler中的服务可能会注入Context，所以CommandHandler创建时必须已经存在ComponentContext
     * 2、ViewModel的buildCommands中会使用CommandBus，为了保证顺序，将ViewModel的创建也放在init中。
     */
    FrameContext.prototype.init = function (frameComponent) {
        this.frameComponent = frameComponent;
        this.initializeBindingData();
        this.initializeStateMachine();
        this.initializeUiState();
        this.initializeForm();
        this.initializeCommandBus();
        this.initializeViewModel();
        this.registerExceptionHandler();
        this.initExpression();
        this.appContext.frameComponentRefresher.regFrameComponent(this.frameId, this.frameComponent);
    };
    FrameContext.prototype.initExpression = function () {
        this.expressionEngineImpl = this.injector.get(ExpressionEngineImpl, null);
        this.expressionManager = this.injector.get(ExpressionManager, null);
        var expressionResultFactory = this.injector.get(ExpressionResultFactory, null);
        this.expressionResult = this.injector.get(ExpressionResult, null);
    };
    /**
     * 订阅异常消息
     */
    FrameContext.prototype.registerExceptionHandler = function () {
        var _this = this;
        // tslint:disable: no-string-literal
        var formAppContext = this.getFormAppContext();
        var applicationId = formAppContext.ApplicationId;
        window[window.location.href] = applicationId;
        if (this.exceptionHandler !== null) {
            var applicationContext = window[applicationId] = window[applicationId] || {};
            if (this.eventBus !== null && this.isRootFrameContext()) {
                applicationContext.isExceptionHandlerExist = true;
                this.exceptionHandler.setContext(this.appContext);
                this.eventBus.on('Exception', '', 'onException', formAppContext, function (error) {
                    if (_this.isDestoried === true) {
                        return;
                    }
                    if (error && error.error) {
                        try {
                            error.error.__frame_context__ = _this;
                        }
                        catch (_a) { }
                    }
                    _this.exceptionHandler.handle(error);
                });
            }
            this.destorySignal.subscribe(function () {
                _this.eventBus.off('Exception', '', 'onException', formAppContext);
            });
        }
    };
    FrameContext.prototype.registerAppContextDestroyEvent = function () {
        var _this = this;
        if (this.appContext && this.appContext.destorySignal) {
            this.appContext.destorySignal.subscribe(function () {
                if (_this.stateMachine) {
                    _this.stateMachine.dispose();
                    _this.stateMachine = null;
                }
                if (_this.repository) {
                    _this.repository.dispose();
                }
            });
        }
    };
    /**
     * 获取表单appcontext，即最上层appcontext
     */
    FrameContext.prototype.getFormAppContext = function () {
        return this.appContext;
    };
    /**
     * 获取frameId
     * @description 获取完整的FrameId，在非普通表单中该值等于frameId，在组合表单中该值为namespace_frameId
     */
    FrameContext.prototype.getFrameId = function (relativeFrameId) {
        if (!relativeFrameId) {
            return this.frameId;
        }
        if (this.namespace && this.namespace.length > 0) {
            return this.namespace + "_" + relativeFrameId;
        }
        else {
            return relativeFrameId;
        }
    };
    /**
     * 初始化Repository
     */
    FrameContext.prototype.initializeRepository = function () {
        this.repository.setPaginationConfig(this.repository.paginationInfo);
    };
    FrameContext.prototype.initializeForm = function () {
        // 设置Form语言服务
        // this.form.setTranslateService(translateService);
        // 初始化Form，提取FormControl定义，添加FormControl
        // this.form.init(this.bindingData, this.metadata.bindingTo, this);
        // Form
        this.form = this.injector.get(Form, null);
        if (this.form) {
            // 设置Form语言服务
            this.form.setTranslateService(this.injector.get(TranslateToken, null));
            // 初始化Form，提取FormControl定义，添加FormControl
            var bindingPath = this.viewModel.bindingPath || this.metadata.bindingTo;
            this.form.init(this.bindingData, bindingPath, this);
        }
    };
    FrameContext.prototype.initializeStateMachine = function () {
        // StateMachine 状态机需要在绑定数据之后加载
        this.stateMachine = this.injector.get(StateMachine, null);
        if (this.stateMachine) {
            this.stateMachine.initialize(this, this.variableParseService);
        }
    };
    FrameContext.prototype.initializeCommandBus = function () {
        var handlerRegistry = this.injector.get(CommandHandlerRegistry, new CommandHandlerRegistry(this.metadata.commandHandlers));
        var extendsRegistry = this.injector.get(CommandHandlerExtenderRegistry, new CommandHandlerExtenderRegistry(this.metadata.commandHandlerExtends));
        var commandHandlerFactory = new CommandHandlerFactory(handlerRegistry, extendsRegistry, this, this.variableParseService);
        this.commandBus = new CommandBus(commandHandlerFactory);
    };
    /**
     * 初始化ViewModel
     * @todo
     * 1、需要按照一定的顺序进行初始化，否则依赖无法正确处理；
     * 2、暂时使用init解决Context和其他部分的循环依赖问题，待优化；
     */
    FrameContext.prototype.initializeViewModel = function () {
        if (!this.metadata.bindingTo) {
            this.metadata.bindingTo = this.viewModel.bindingPath;
        }
        this.viewModel.init(this);
        this.regViewModel(this.viewModel);
    };
    /**
     * 初始化BindingData
     * @summary
     * 老表单：repositoryName为空，复制当前Repository里的数据；
     * 新表单：repositoryName有值，引用全局BindingData里的数据；
     */
    FrameContext.prototype.initializeBindingData = function () {
        var _this = this;
        var repositoryName = this.repository.name;
        var isRunAtHighSpeedMode = this.appContext.runMode === RunMode.highSpeed;
        if (repositoryName && isRunAtHighSpeedMode) {
            var repositoryBindingData = this.appContext.bindingDataManager.getBindingDataByName(repositoryName);
            this.bindingData.initByBindingList(repositoryBindingData.list, this.viewModel.bindingPath);
            this.bindingData.pagingInfo = repositoryBindingData.pagingInfo;
            this.bindingData.setDataTypeInfo(this.repository.entityTypeInfo);
            EntityUtil.watchReposiroty(this.repository, this.bindingData);
        }
        else {
            this.bindingData.initByRepository(this.repository, this.viewModel.bindingPath);
            EntityUtil.watchReposiroty(this.repository, this.bindingData);
            this.bindingData.changes.subscribe(function (change) {
                if (change.type === ChangeType.GlobalSelectionChanged) {
                    _this.appContext.handleSelectChange(change, _this);
                }
            });
        }
    };
    /**
     * 初始化UIState
     * 合并路由参数到UIState中
     */
    FrameContext.prototype.initializeUiState = function () {
        var _this = this;
        var isInFramework = window.location.href.indexOf('platform') > -1;
        var paramTypeTransform = this.injector.get(PARAM_TYPE_TRANSFORM_TOKEN, false);
        // 获取UIState
        this.uiState = this.injector.get(UIState, null);
        if (!this.uiState) {
            return;
        }
        this.uiState.paramTypeTransform = paramTypeTransform;
        this.uiState.initialize(this);
        // 获取路由参数
        var url = (this.appContext && this.appContext.router && this.appContext.router.url) || '';
        var routerParamService = new RouterParamService();
        var routerParams = routerParamService.getParams(url);
        // 在UIState为路由参数创建属性
        Object.keys(routerParams).forEach(function (propName) {
            Object.defineProperty(_this.uiState, propName, {
                get: function () {
                    return routerParams[propName];
                }
            });
        });
    };
    /**
     * 注册子ViewModel
     * @todo
     * 1、propName写死了
     */
    FrameContext.prototype.regViewModel = function (viewModel) {
        if (this.appContext && this.appContext.viewModelManager.exsit(viewModel.name) === false) {
            this.appContext.viewModelManager.register(viewModel.name, viewModel);
        }
        var className = viewModel.constructor.name;
        var parentContext = this.parent;
        var parentViewModel = null;
        if (parentContext && parentContext.viewModel) {
            parentViewModel = parentContext.viewModel;
        }
        if (!parentViewModel) {
            return;
        }
        // 优先使用生成器生成的name
        var childViewModels = parentViewModel['childViewModels'];
        var viewModelName = null;
        if (childViewModels) {
            var name_1 = viewModel.constructor.name;
            viewModelName = childViewModels[viewModel.name] || childViewModels[name_1];
        }
        else if (className.length === 1) {
            var classNameTokens = viewModel.name.split('-').map(function (nameToken, index) {
                if (index > 0 && nameToken.length) {
                    var pasicalName = nameToken.charAt(0).toLocaleUpperCase() + nameToken.substr(1, nameToken.length - 1);
                    return pasicalName;
                }
                else if (index === 0 && nameToken.length) {
                    var camelName = nameToken.charAt(0).toLocaleLowerCase() + nameToken.substr(1, nameToken.length - 1);
                    return camelName;
                }
                return nameToken;
            });
            viewModelName = classNameTokens.join('');
        }
        else if (viewModel["relateChildName"]) {
            // 增加该参数的目的  是为了解析表单可以进行和生成型相同的层级结构
            viewModelName = viewModel["relateChildName"];
        }
        // 兼容产品部老表单的写法，如果需要vm name统一，应按照此规则
        if (!viewModelName) {
            viewModelName = className[0].toLowerCase() + className.substring(1, className.length);
        }
        parentViewModel['viewModelNames'] = parentViewModel['viewModelNames'] || [];
        parentViewModel[viewModelName] = viewModel;
        parentViewModel['viewModelNames'].push(viewModelName);
        viewModel.bindToParent(parentViewModel);
    };
    // #endregion
    /**
     * 检查是否为根FrameContext
     * @summary
     * 检查该FrameContext是不是所在AppContext中的根FrameContext
     */
    FrameContext.prototype.isRootFrameContext = function () {
        return this.parent === null || (this.appContext.runMode === RunMode.highSpeed && this.getVirtualRootFrameContext().frameComponent['isDialogRootComponent'] === true);
    };
    /**
     * 通过namespace获取当前表单的root-framecontext(非整个表单)
     * @description
     * 如果为组合表单，其当前表单的root-framecontext为单个表单的framecontext，而非整个表单的framecontext
     */
    FrameContext.prototype.getVirtualRootFrameContext = function () {
        var formFrameContext = this;
        var parent = this.parent;
        while (parent) {
            // 兼容没有重新编译的表单，如果判断parent.namespace存在会导致获取不到root-framecontext
            if (parent.namespace === this.namespace) {
                formFrameContext = parent;
                parent = parent.parent;
            }
            else {
                break;
            }
        }
        return formFrameContext;
    };
    FrameContext.prototype.getContextById = function (identify) {
        return this.appContext.getContextById(identify);
    };
    FrameContext.prototype.getViewModel = function (viewModelName) {
        var renderAppContext = this.appContext;
        if (renderAppContext) {
            return renderAppContext.viewModelManager.getViewModelByName(viewModelName);
        }
        return null;
    };
    FrameContext.prototype.attachViewComponent = function (viewComponent) {
        this.frameComponent = viewComponent;
        this.appContext.frameComponentRefresher.regFrameComponent(this.frameId, this.frameComponent);
    };
    FrameContext.prototype.invoke = function (actionPath, $event) {
        var actionBindingPath = actionPath.split('.');
        var actionName = actionBindingPath[actionBindingPath.length - 1];
        var bindingViewModel = actionBindingPath.length === 1 ? this.viewModel :
            this.getViewModel(actionBindingPath[actionBindingPath.length - 2]);
        if (!bindingViewModel) {
            alert("\u672A\u5339\u914D\u5230'" + actionPath + "'\u547D\u4EE4\u7684\u89C6\u56FE\u6A21\u578B\uFF0C\u8BF7\u68C0\u67E5\u4E8B\u4EF6\u662F\u5426\u914D\u7F6E\u6B63\u786E\u3002");
        }
        return bindingViewModel[actionName]($event);
    };
    FrameContext.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FrameContext.ctorParameters = function () { return [
        { type: Injector },
        { type: FrameContext, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    return FrameContext;
}(Context));
export { FrameContext };
//# sourceMappingURL=data:application/json;base64,