import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var InputGroupHandler = /** @class */ (function () {
    function InputGroupHandler() {
    }
    InputGroupHandler.prototype.convert = function (qc) {
        var igv = qc.value;
        var arr = [];
        if (igv.isInputText || igv.textField == null) {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Like,
                'Value': igv.textValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        }
        else {
            igv.getOriginalValue().split(',').forEach(function (itemValue) {
                itemValue && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.Equal,
                    'Value': itemValue,
                    'Relation': RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            });
            if (arr.length > 0) {
                arr[0]['Lbracket'] = '(';
                arr[arr.length - 1]['Rbracket'] = ')';
                arr[arr.length - 1]['Relation'] = RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    };
    return InputGroupHandler;
}());
export { InputGroupHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRncm91cC5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3F1ZXJ5LXNvbHV0aW9uL2hhbmRsZXJzL2lucHV0Z3JvdXAuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUUxRDtJQUFBO0lBbUNBLENBQUM7SUFsQ0MsbUNBQU8sR0FBUCxVQUFRLEVBQWtCO1FBQ3hCLElBQU0sR0FBRyxHQUFJLEVBQUUsQ0FBQyxLQUF5QixDQUFDO1FBQzFDLElBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUVmLElBQUksR0FBRyxDQUFDLFdBQVcsSUFBSSxHQUFHLENBQUMsU0FBUyxJQUFJLElBQUksRUFBRTtZQUM1QyxHQUFHLENBQUMsSUFBSSxDQUFDO2dCQUNQLGFBQWEsRUFBRSxFQUFFLENBQUMsU0FBUztnQkFDM0IsU0FBUyxFQUFFLFdBQVcsQ0FBQyxJQUFJO2dCQUMzQixPQUFPLEVBQUUsR0FBRyxDQUFDLFNBQVM7Z0JBQ3RCLFVBQVUsRUFBRSxZQUFZLENBQUMsR0FBRztnQkFDNUIsYUFBYSxFQUFFLFNBQVMsQ0FBQyxLQUFLO2FBQy9CLENBQUMsQ0FBQztZQUNILE9BQU8sR0FBRyxDQUFDO1NBQ1o7YUFDSTtZQUNILEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxTQUFTO2dCQUNqRCxTQUFTLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQztvQkFDcEIsYUFBYSxFQUFFLEVBQUUsQ0FBQyxTQUFTO29CQUMzQixTQUFTLEVBQUUsV0FBVyxDQUFDLEtBQUs7b0JBQzVCLE9BQU8sRUFBRSxTQUFTO29CQUNsQixVQUFVLEVBQUUsWUFBWSxDQUFDLEVBQUU7b0JBQzNCLGFBQWEsRUFBRSxTQUFTLENBQUMsS0FBSztpQkFDL0IsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUN6QixHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ3RDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUM7Z0JBQ25ELE9BQU8sR0FBRyxDQUFDO2FBQ1o7aUJBQU07Z0JBQ0wsT0FBTyxFQUFFLENBQUM7YUFDWDtTQUNGO0lBQ0gsQ0FBQztJQUNILHdCQUFDO0FBQUQsQ0FBQyxBQW5DRCxJQW1DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElRdWVyeUNvbmRpdGlvbkhhbmRsZXIgfSBmcm9tIFwiLi9pcXVlcnljb25kaXRpb24uaGFuZGxlclwiO1xuaW1wb3J0IHsgUXVlcnlDb25kaXRpb24sIElucHV0R3JvdXBWYWx1ZSB9IGZyb20gXCJAZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvblwiO1xuaW1wb3J0IHsgQ29tcGFyZVR5cGUgfSBmcm9tICcuLi9lbnVtL2NvbXBhcmUtdHlwZS5lbnVtJztcbmltcG9ydCB7IFZhbHVlVHlwZSB9IGZyb20gJy4uL2VudW0vdmFsdWUtdHlwZS5lbnVtJztcbmltcG9ydCB7IFJlbGF0aW9uVHlwZSB9IGZyb20gJy4uL2VudW0vcmVsYXRpb24tdHlwZS5lbnVtJztcblxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBIYW5kbGVyIGltcGxlbWVudHMgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlciB7XG4gIGNvbnZlcnQocWM6IFF1ZXJ5Q29uZGl0aW9uKSB7XG4gICAgY29uc3QgaWd2ID0gKHFjLnZhbHVlIGFzIElucHV0R3JvdXBWYWx1ZSk7XG4gICAgY29uc3QgYXJyID0gW107XG5cbiAgICBpZiAoaWd2LmlzSW5wdXRUZXh0IHx8IGlndi50ZXh0RmllbGQgPT0gbnVsbCkge1xuICAgICAgYXJyLnB1c2goe1xuICAgICAgICAnRmlsdGVyRmllbGQnOiBxYy5maWVsZENvZGUsXG4gICAgICAgICdDb21wYXJlJzogQ29tcGFyZVR5cGUuTGlrZSxcbiAgICAgICAgJ1ZhbHVlJzogaWd2LnRleHRWYWx1ZSwvL2VuY29kZVVSSUNvbXBvbmVudChpZ3YudGV4dFZhbHVlKSxcbiAgICAgICAgJ1JlbGF0aW9uJzogUmVsYXRpb25UeXBlLkFuZCxcbiAgICAgICAgJ0V4cHJlc3N0eXBlJzogVmFsdWVUeXBlLlZhbHVlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWd2LmdldE9yaWdpbmFsVmFsdWUoKS5zcGxpdCgnLCcpLmZvckVhY2goaXRlbVZhbHVlID0+IHtcbiAgICAgICAgaXRlbVZhbHVlICYmIGFyci5wdXNoKHtcbiAgICAgICAgICAnRmlsdGVyRmllbGQnOiBxYy5maWVsZENvZGUsXG4gICAgICAgICAgJ0NvbXBhcmUnOiBDb21wYXJlVHlwZS5FcXVhbCxcbiAgICAgICAgICAnVmFsdWUnOiBpdGVtVmFsdWUsXG4gICAgICAgICAgJ1JlbGF0aW9uJzogUmVsYXRpb25UeXBlLk9yLFxuICAgICAgICAgICdFeHByZXNzdHlwZSc6IFZhbHVlVHlwZS5WYWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGFyci5sZW5ndGggPiAwKSB7XG4gICAgICAgIGFyclswXVsnTGJyYWNrZXQnXSA9ICcoJztcbiAgICAgICAgYXJyW2Fyci5sZW5ndGggLSAxXVsnUmJyYWNrZXQnXSA9ICcpJztcbiAgICAgICAgYXJyW2Fyci5sZW5ndGggLSAxXVsnUmVsYXRpb24nXSA9IFJlbGF0aW9uVHlwZS5BbmQ7XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=