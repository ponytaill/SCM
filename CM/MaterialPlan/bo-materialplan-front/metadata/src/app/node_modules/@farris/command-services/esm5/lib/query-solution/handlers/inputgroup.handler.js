import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var InputGroupHandler = /** @class */ (function () {
    function InputGroupHandler() {
    }
    InputGroupHandler.prototype.convert = function (qc) {
        var igv = qc.value;
        var arr = [];
        if (igv.isInputText || igv.textField == null) {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Like,
                'Value': igv.textValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        }
        else {
            igv.getOriginalValue().split(',').forEach(function (itemValue) {
                itemValue && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.Equal,
                    'Value': itemValue,
                    'Relation': RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            });
            if (arr.length > 0) {
                arr[0]['Lbracket'] = '(';
                arr[arr.length - 1]['Rbracket'] = ')';
                arr[arr.length - 1]['Relation'] = RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    };
    return InputGroupHandler;
}());
export { InputGroupHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRncm91cC5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3F1ZXJ5LXNvbHV0aW9uL2hhbmRsZXJzL2lucHV0Z3JvdXAuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUUxRDtJQUFBO0lBbUNBLENBQUM7SUFsQ0MsbUNBQU8sR0FBUCxVQUFRLEVBQWtCO1FBQ3hCLElBQU0sR0FBRyxHQUFJLEVBQUUsQ0FBQyxLQUF5QixDQUFDO1FBQzFDLElBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUVmLElBQUksR0FBRyxDQUFDLFdBQVcsSUFBSSxHQUFHLENBQUMsU0FBUyxJQUFJLElBQUksRUFBRTtZQUM1QyxHQUFHLENBQUMsSUFBSSxDQUFDO2dCQUNQLGFBQWEsRUFBRSxFQUFFLENBQUMsU0FBUztnQkFDM0IsU0FBUyxFQUFFLFdBQVcsQ0FBQyxJQUFJO2dCQUMzQixPQUFPLEVBQUUsR0FBRyxDQUFDLFNBQVM7Z0JBQ3RCLFVBQVUsRUFBRSxZQUFZLENBQUMsR0FBRztnQkFDNUIsYUFBYSxFQUFFLFNBQVMsQ0FBQyxLQUFLO2FBQy9CLENBQUMsQ0FBQztZQUNILE9BQU8sR0FBRyxDQUFDO1NBQ1o7YUFDSTtZQUNILEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxTQUFTO2dCQUNqRCxTQUFTLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQztvQkFDcEIsYUFBYSxFQUFFLEVBQUUsQ0FBQyxTQUFTO29CQUMzQixTQUFTLEVBQUUsV0FBVyxDQUFDLEtBQUs7b0JBQzVCLE9BQU8sRUFBRSxTQUFTO29CQUNsQixVQUFVLEVBQUUsWUFBWSxDQUFDLEVBQUU7b0JBQzNCLGFBQWEsRUFBRSxTQUFTLENBQUMsS0FBSztpQkFDL0IsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUN6QixHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ3RDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUM7Z0JBQ25ELE9BQU8sR0FBRyxDQUFDO2FBQ1o7aUJBQU07Z0JBQ0wsT0FBTyxFQUFFLENBQUM7YUFDWDtTQUNGO0lBQ0gsQ0FBQztJQUNILHdCQUFDO0FBQUQsQ0FBQyxBQW5DRCxJQW1DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElRdWVyeUNvbmRpdGlvbkhhbmRsZXIgfSBmcm9tIFwiLi9pcXVlcnljb25kaXRpb24uaGFuZGxlclwiO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbiwgSW5wdXRHcm91cFZhbHVlIH0gZnJvbSBcIkBmYXJyaXMvY29tcG9uZW50LXF1ZXJ5Y29uZGl0aW9uXCI7XHJcbmltcG9ydCB7IENvbXBhcmVUeXBlIH0gZnJvbSAnLi4vZW51bS9jb21wYXJlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFZhbHVlVHlwZSB9IGZyb20gJy4uL2VudW0vdmFsdWUtdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgUmVsYXRpb25UeXBlIH0gZnJvbSAnLi4vZW51bS9yZWxhdGlvbi10eXBlLmVudW0nO1xyXG5cclxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBIYW5kbGVyIGltcGxlbWVudHMgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlciB7XHJcbiAgY29udmVydChxYzogUXVlcnlDb25kaXRpb24pIHtcclxuICAgIGNvbnN0IGlndiA9IChxYy52YWx1ZSBhcyBJbnB1dEdyb3VwVmFsdWUpO1xyXG4gICAgY29uc3QgYXJyID0gW107XHJcblxyXG4gICAgaWYgKGlndi5pc0lucHV0VGV4dCB8fCBpZ3YudGV4dEZpZWxkID09IG51bGwpIHtcclxuICAgICAgYXJyLnB1c2goe1xyXG4gICAgICAgICdGaWx0ZXJGaWVsZCc6IHFjLmZpZWxkQ29kZSxcclxuICAgICAgICAnQ29tcGFyZSc6IENvbXBhcmVUeXBlLkxpa2UsXHJcbiAgICAgICAgJ1ZhbHVlJzogaWd2LnRleHRWYWx1ZSwvL2VuY29kZVVSSUNvbXBvbmVudChpZ3YudGV4dFZhbHVlKSxcclxuICAgICAgICAnUmVsYXRpb24nOiBSZWxhdGlvblR5cGUuQW5kLFxyXG4gICAgICAgICdFeHByZXNzdHlwZSc6IFZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIGFycjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZ3YuZ2V0T3JpZ2luYWxWYWx1ZSgpLnNwbGl0KCcsJykuZm9yRWFjaChpdGVtVmFsdWUgPT4ge1xyXG4gICAgICAgIGl0ZW1WYWx1ZSAmJiBhcnIucHVzaCh7XHJcbiAgICAgICAgICAnRmlsdGVyRmllbGQnOiBxYy5maWVsZENvZGUsXHJcbiAgICAgICAgICAnQ29tcGFyZSc6IENvbXBhcmVUeXBlLkVxdWFsLFxyXG4gICAgICAgICAgJ1ZhbHVlJzogaXRlbVZhbHVlLFxyXG4gICAgICAgICAgJ1JlbGF0aW9uJzogUmVsYXRpb25UeXBlLk9yLFxyXG4gICAgICAgICAgJ0V4cHJlc3N0eXBlJzogVmFsdWVUeXBlLlZhbHVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAoYXJyLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBhcnJbMF1bJ0xicmFja2V0J10gPSAnKCc7XHJcbiAgICAgICAgYXJyW2Fyci5sZW5ndGggLSAxXVsnUmJyYWNrZXQnXSA9ICcpJztcclxuICAgICAgICBhcnJbYXJyLmxlbmd0aCAtIDFdWydSZWxhdGlvbiddID0gUmVsYXRpb25UeXBlLkFuZDtcclxuICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=