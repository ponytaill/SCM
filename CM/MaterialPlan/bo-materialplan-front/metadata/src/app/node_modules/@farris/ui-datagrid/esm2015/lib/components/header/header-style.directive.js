/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Injector, Input } from '@angular/core';
export class HeaderStyleDirective {
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} inject
     */
    constructor(el, render, inject) {
        this.el = el;
        this.render = render;
        this.inject = inject;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.renderCss2Element();
    }
    /**
     * @private
     * @return {?}
     */
    renderCss2Element() {
        if (this.column && this.column.headerStyler) {
            /** @type {?} */
            const styler = this.column.headerStyler;
            /** @type {?} */
            const dom = this.el.nativeElement;
            /** @type {?} */
            const st = typeof this.column.headerStyler;
            if (st === 'string') {
                this.render.addClass(this.el.nativeElement, (/** @type {?} */ (styler)));
            }
            else if (st === 'function') {
                /** @type {?} */
                const r = ((/** @type {?} */ (this.column.headerStyler)))(this.column);
                if (r.cls) {
                    this.render.addClass(this.el.nativeElement, r.cls);
                }
                if (r.style) {
                    this.renderStyle(dom, r.style);
                }
            }
            else if (st === 'object' && Object.keys(st).length) {
                this.renderStyle(dom, styler);
            }
        }
    }
    /**
     * @private
     * @param {?} targetEl
     * @param {?} styleObj
     * @return {?}
     */
    renderStyle(targetEl, styleObj) {
        /** @type {?} */
        const cssKeys = Object.keys(styleObj);
        cssKeys.forEach((/**
         * @param {?} k
         * @return {?}
         */
        k => {
            this.render.setStyle(targetEl, k, styleObj[k]);
        }));
    }
}
HeaderStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[header-style]',
                exportAs: 'HeaderStyler'
            },] }
];
/** @nocollapse */
HeaderStyleDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector }
];
HeaderStyleDirective.propDecorators = {
    column: [{ type: Input, args: ['header-style',] }]
};
if (false) {
    /** @type {?} */
    HeaderStyleDirective.prototype.column;
    /**
     * @type {?}
     * @private
     */
    HeaderStyleDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    HeaderStyleDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    HeaderStyleDirective.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLXN0eWxlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9oZWFkZXIvaGVhZGVyLXN0eWxlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFPMUYsTUFBTSxPQUFPLG9CQUFvQjs7Ozs7O0lBRzdCLFlBQW9CLEVBQWMsRUFBVSxNQUFpQixFQUFVLE1BQWdCO1FBQW5FLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVTtJQUFHLENBQUM7Ozs7SUFFM0YsUUFBUTtRQUNKLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBRU8saUJBQWlCO1FBQ3JCLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRTs7a0JBQ25DLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVk7O2tCQUNqQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhOztrQkFDM0IsRUFBRSxHQUFHLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZO1lBRTFDLElBQUksRUFBRSxLQUFLLFFBQVEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsbUJBQUEsTUFBTSxFQUFVLENBQUMsQ0FBQzthQUNqRTtpQkFBTSxJQUFJLEVBQUUsS0FBSyxVQUFVLEVBQUU7O3NCQUNwQixDQUFDLEdBQUcsQ0FBQyxtQkFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBaUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7Z0JBQ2xFLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRTtvQkFDUCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3REO2dCQUNELElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRTtvQkFDVCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ2xDO2FBQ0o7aUJBQU0sSUFBSSxFQUFFLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFO2dCQUNsRCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQzthQUNqQztTQUNKO0lBQ0wsQ0FBQzs7Ozs7OztJQUVPLFdBQVcsQ0FBQyxRQUFhLEVBQUUsUUFBYTs7Y0FDdEMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3JDLE9BQU8sQ0FBQyxPQUFPOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7OztZQXhDSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsUUFBUSxFQUFFLGNBQWM7YUFDM0I7Ozs7WUFObUIsVUFBVTtZQUFFLFNBQVM7WUFBRSxRQUFROzs7cUJBUTlDLEtBQUssU0FBQyxjQUFjOzs7O0lBQXJCLHNDQUEwQzs7Ozs7SUFFOUIsa0NBQXNCOzs7OztJQUFFLHNDQUF5Qjs7Ozs7SUFBRSxzQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgSW5qZWN0b3IsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0YUNvbHVtbiwgSGVhZGVyU3R5bGVGbiB9IGZyb20gJy4vLi4vLi4vdHlwZXMvZGF0YS1jb2x1bW4nO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1toZWFkZXItc3R5bGVdJyxcclxuICAgIGV4cG9ydEFzOiAnSGVhZGVyU3R5bGVyJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSGVhZGVyU3R5bGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgQElucHV0KCdoZWFkZXItc3R5bGUnKSBjb2x1bW46IERhdGFDb2x1bW47XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBpbmplY3Q6IEluamVjdG9yKSB7fVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMucmVuZGVyQ3NzMkVsZW1lbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbmRlckNzczJFbGVtZW50KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbHVtbiAmJiB0aGlzLmNvbHVtbi5oZWFkZXJTdHlsZXIpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3R5bGVyID0gdGhpcy5jb2x1bW4uaGVhZGVyU3R5bGVyO1xyXG4gICAgICAgICAgICBjb25zdCBkb20gPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0ID0gdHlwZW9mIHRoaXMuY29sdW1uLmhlYWRlclN0eWxlcjtcclxuXHJcbiAgICAgICAgICAgIGlmIChzdCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgc3R5bGVyIGFzIHN0cmluZyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3QgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSAodGhpcy5jb2x1bW4uaGVhZGVyU3R5bGVyIGFzIEhlYWRlclN0eWxlRm4pKHRoaXMuY29sdW1uKTtcclxuICAgICAgICAgICAgICAgIGlmIChyLmNscykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgci5jbHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHIuc3R5bGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclN0eWxlKGRvbSwgci5zdHlsZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3QgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKHN0KS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyU3R5bGUoZG9tLCBzdHlsZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVuZGVyU3R5bGUodGFyZ2V0RWw6IGFueSwgc3R5bGVPYmo6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IGNzc0tleXMgPSBPYmplY3Qua2V5cyhzdHlsZU9iaik7XHJcbiAgICAgICAgY3NzS2V5cy5mb3JFYWNoKGsgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0YXJnZXRFbCwgaywgc3R5bGVPYmpba10pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=