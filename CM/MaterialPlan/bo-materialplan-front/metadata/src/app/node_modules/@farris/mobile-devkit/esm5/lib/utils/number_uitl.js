var NumberUtil = /** @class */ (function () {
    function NumberUtil() {
    }
    /**
       * 数字格式化
       * {
       *   precision: 2,
       *   decimal: true,
       *   thousand: ','
       *   prefix: '',
       *   suffix: ''
       * }
       */
    NumberUtil.format = function (value, options) {
        // 参数处理
        var decimals = (options.precision || options.precision === 0) ? options.precision : 2;
        var decimalPoint = options.decimal || '.';
        var thousandsSep = options.thousand || '';
        var prefix = options.prefix || '';
        var suffix = options.suffix || '';
        var prefixType = options.prefixType;
        if (prefixType == "dynamic" && options.prefix) {
            // 表示前缀为一个函数  那么执行函数定义
            var prefixFunc = new Function("return " + options.prefix);
            prefix = prefixFunc()(options.sourceData);
        }
        value = (value + '').replace(/[^0-9+-Ee.]/g, '');
        var s;
        // 处理精度
        var toFixedFix = function (n, prec) {
            var k = Math.pow(10, prec);
            return '' + parseFloat(Math.round(parseFloat((n * k).toFixed(prec * 2))).toFixed(prec * 2)) / k;
        };
        s = ((decimals || decimals === 0) ? toFixedFix(value, decimals) : '' + Math.round(value)).split('.');
        // 处理千分位
        if (thousandsSep) {
            var pattern = /(-?\d+)(\d{3})/;
            while (pattern.test(s[0])) {
                s[0] = s[0].replace(pattern, "$1" + thousandsSep + "$2");
            }
            if ((s[1] || '').length < decimals) {
                s[1] = s[1] || '';
                s[1] += new Array(decimals - s[1].length + 1).join('0');
            }
        }
        var formatedValue = s.join(decimalPoint);
        formatedValue = "" + prefix + formatedValue + suffix;
        return formatedValue;
    };
    return NumberUtil;
}());
export { NumberUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyX3VpdGwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvbnVtYmVyX3VpdGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFBQTtJQXVEQSxDQUFDO0lBckRDOzs7Ozs7Ozs7U0FTSztJQUNTLGlCQUFNLEdBQXBCLFVBQXFCLEtBQUssRUFBRSxPQUFPO1FBRWpDLE9BQU87UUFDUCxJQUFJLFFBQVEsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksT0FBTyxDQUFDLFNBQVMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RGLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDO1FBQzFDLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO1FBQzFDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ2xDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO1FBRWxDLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDcEMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDN0Msc0JBQXNCO1lBQ3RCLElBQUksVUFBVSxHQUFHLElBQUksUUFBUSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDMUQsTUFBTSxHQUFHLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUMzQztRQUVELEtBQUssR0FBRyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxDQUFDO1FBRU4sT0FBTztRQUNQLElBQUksVUFBVSxHQUFHLFVBQVUsQ0FBQyxFQUFFLElBQUk7WUFDaEMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDM0IsT0FBTyxFQUFFLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEcsQ0FBQyxDQUFDO1FBQ0YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLElBQUksUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVyRyxRQUFRO1FBQ1IsSUFBSSxZQUFZLEVBQUU7WUFDaEIsSUFBSSxPQUFPLEdBQUcsZ0JBQWdCLENBQUM7WUFDL0IsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUN6QixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxHQUFHLFlBQVksR0FBRyxJQUFJLENBQUMsQ0FBQzthQUMxRDtZQUNELElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxHQUFHLFFBQVEsRUFBRTtnQkFDbEMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2xCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDekQ7U0FDRjtRQUVELElBQUksYUFBYSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDekMsYUFBYSxHQUFHLEtBQUcsTUFBTSxHQUFHLGFBQWEsR0FBRyxNQUFRLENBQUM7UUFDckQsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQztJQUVILGlCQUFDO0FBQUQsQ0FBQyxBQXZERCxJQXVEQztBQUVELE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE51bWJlclV0aWwge1xyXG5cclxuICAvKipcclxuICAgICAqIOaVsOWtl+agvOW8j+WMllxyXG4gICAgICoge1xyXG4gICAgICogICBwcmVjaXNpb246IDIsXHJcbiAgICAgKiAgIGRlY2ltYWw6IHRydWUsXHJcbiAgICAgKiAgIHRob3VzYW5kOiAnLCdcclxuICAgICAqICAgcHJlZml4OiAnJyxcclxuICAgICAqICAgc3VmZml4OiAnJ1xyXG4gICAgICogfVxyXG4gICAgICovXHJcbiAgcHVibGljIHN0YXRpYyBmb3JtYXQodmFsdWUsIG9wdGlvbnMpIHtcclxuXHJcbiAgICAvLyDlj4LmlbDlpITnkIZcclxuICAgIGxldCBkZWNpbWFscyA9IChvcHRpb25zLnByZWNpc2lvbiB8fCBvcHRpb25zLnByZWNpc2lvbiA9PT0gMCkgPyBvcHRpb25zLnByZWNpc2lvbiA6IDI7XHJcbiAgICBsZXQgZGVjaW1hbFBvaW50ID0gb3B0aW9ucy5kZWNpbWFsIHx8ICcuJztcclxuICAgIGxldCB0aG91c2FuZHNTZXAgPSBvcHRpb25zLnRob3VzYW5kIHx8ICcnO1xyXG4gICAgbGV0IHByZWZpeCA9IG9wdGlvbnMucHJlZml4IHx8ICcnO1xyXG4gICAgbGV0IHN1ZmZpeCA9IG9wdGlvbnMuc3VmZml4IHx8ICcnO1xyXG5cclxuICAgIGxldCBwcmVmaXhUeXBlID0gb3B0aW9ucy5wcmVmaXhUeXBlO1xyXG4gICAgaWYgKHByZWZpeFR5cGUgPT0gXCJkeW5hbWljXCIgJiYgb3B0aW9ucy5wcmVmaXgpIHtcclxuICAgICAgLy8g6KGo56S65YmN57yA5Li65LiA5Liq5Ye95pWwICDpgqPkuYjmiafooYzlh73mlbDlrprkuYlcclxuICAgICAgbGV0IHByZWZpeEZ1bmMgPSBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gXCIgKyBvcHRpb25zLnByZWZpeCk7XHJcbiAgICAgIHByZWZpeCA9IHByZWZpeEZ1bmMoKShvcHRpb25zLnNvdXJjZURhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbHVlID0gKHZhbHVlICsgJycpLnJlcGxhY2UoL1teMC05Ky1FZS5dL2csICcnKTtcclxuICAgIGxldCBzO1xyXG5cclxuICAgIC8vIOWkhOeQhueyvuW6plxyXG4gICAgbGV0IHRvRml4ZWRGaXggPSBmdW5jdGlvbiAobiwgcHJlYykge1xyXG4gICAgICB2YXIgayA9IE1hdGgucG93KDEwLCBwcmVjKTtcclxuICAgICAgcmV0dXJuICcnICsgcGFyc2VGbG9hdChNYXRoLnJvdW5kKHBhcnNlRmxvYXQoKG4gKiBrKS50b0ZpeGVkKHByZWMgKiAyKSkpLnRvRml4ZWQocHJlYyAqIDIpKSAvIGs7XHJcbiAgICB9O1xyXG4gICAgcyA9ICgoZGVjaW1hbHMgfHwgZGVjaW1hbHMgPT09IDApID8gdG9GaXhlZEZpeCh2YWx1ZSwgZGVjaW1hbHMpIDogJycgKyBNYXRoLnJvdW5kKHZhbHVlKSkuc3BsaXQoJy4nKTtcclxuXHJcbiAgICAvLyDlpITnkIbljYPliIbkvY1cclxuICAgIGlmICh0aG91c2FuZHNTZXApIHtcclxuICAgICAgbGV0IHBhdHRlcm4gPSAvKC0/XFxkKykoXFxkezN9KS87XHJcbiAgICAgIHdoaWxlIChwYXR0ZXJuLnRlc3Qoc1swXSkpIHtcclxuICAgICAgICBzWzBdID0gc1swXS5yZXBsYWNlKHBhdHRlcm4sIFwiJDFcIiArIHRob3VzYW5kc1NlcCArIFwiJDJcIik7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKChzWzFdIHx8ICcnKS5sZW5ndGggPCBkZWNpbWFscykge1xyXG4gICAgICAgIHNbMV0gPSBzWzFdIHx8ICcnO1xyXG4gICAgICAgIHNbMV0gKz0gbmV3IEFycmF5KGRlY2ltYWxzIC0gc1sxXS5sZW5ndGggKyAxKS5qb2luKCcwJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgZm9ybWF0ZWRWYWx1ZSA9IHMuam9pbihkZWNpbWFsUG9pbnQpO1xyXG4gICAgZm9ybWF0ZWRWYWx1ZSA9IGAke3ByZWZpeH0ke2Zvcm1hdGVkVmFsdWV9JHtzdWZmaXh9YDtcclxuICAgIHJldHVybiBmb3JtYXRlZFZhbHVlO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IE51bWJlclV0aWwgfTsiXX0=