/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * @Author: 疯狂秀才(lucas huang)
 * @Date: 2018-11-13 14:55:34
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-30 10:18:12
 * @Company: Inspur
 * @Version: v0.0.1
 */
import { Component, ElementRef, Renderer2, ViewChild, Input, EventEmitter, Output } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { LeftBracket, RighttBracket, Relation, CompareOperators, Compare, FilterRelation, ExpressValueType } from '@farris/ui-common/types';
import { FilterService } from './../services/filter.service';
import { PerfectScrollbarComponent } from '@farris/ui-perfect-scrollbar';
var FilterGridComponent = /** @class */ (function () {
    function FilterGridComponent(el, render, filterService, messagerService) {
        this.el = el;
        this.render = render;
        this.filterService = filterService;
        this.messagerService = messagerService;
        this.LeftBracketData = LeftBracket;
        this.RighttBracketData = RighttBracket;
        this.relationData = Relation;
        this.operators = CompareOperators;
        this.columnSizeData = [60, 50, 120, 100, 60, 120, 50, 50];
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.conditions = [];
        this.columns = [];
        this.enableExpress = false;
        this.enableFrontExpress = false;
        this.insertType = 'below';
        this.defulatRelation = FilterRelation.And;
        this.showExpress = new EventEmitter();
        this.currentCondition = null;
        this.newCondition = {
            filterField: '',
            value: '',
            lbracket: '',
            rbracket: '',
            relation: FilterRelation.Empty,
            compare: Compare.Equal,
            expresstype: ExpressValueType.Value
        };
        this.localeService = null;
        this.localeService = this.messagerService['localeService'];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    FilterGridComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @return {?}
     */
    FilterGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.fieldEditor) {
            this.fieldEditor = { type: 'select', options: {} };
        }
        this.initRelationData();
        this.newCondition.relation = this.defulatRelation || FilterRelation.And;
        if (!this.conditions || !this.conditions.length) {
            /** @type {?} */
            var firstCon = Object.assign({}, this.newCondition);
            this.conditions = [firstCon];
            this.changeConditionList();
        }
        // 默认选中第1行
        this.currentCondition = { index: 0, condition: this.conditions[0] };
    };
    /**
     * @private
     * @return {?}
     */
    FilterGridComponent.prototype.initRelationData = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.localeService) {
            /** @type {?} */
            var andStr = this.localeService.getValue('filterEditor.relationValue.and');
            /** @type {?} */
            var orStr = this.localeService.getValue('filterEditor.relationValue.or');
            this.relationData = [
                { label: '', value: 0 },
                { label: andStr, value: 1 },
                { label: orStr, value: 2 }
            ];
        }
    };
    /**
     * @private
     * @return {?}
     */
    FilterGridComponent.prototype.psUpdate = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.psRef && this.psRef.directiveRef) {
            this.psRef.directiveRef.update();
        }
    };
    /**
     * @private
     * @return {?}
     */
    FilterGridComponent.prototype.itemIntoView = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.tablebodybox) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var tr = _this.tablebodybox.nativeElement.querySelector('tr.selected');
                if (tr) {
                    if (tr.scrollIntoViewIfNeeded) {
                        tr.scrollIntoViewIfNeeded(false);
                    }
                    else {
                        tr.scrollIntoView({ block: 'nearest' });
                    }
                }
            }), 50);
        }
    };
    /**
     * @param {?} index
     * @param {?=} $event
     * @return {?}
     */
    FilterGridComponent.prototype.insertCondition = /**
     * @param {?} index
     * @param {?=} $event
     * @return {?}
     */
    function (index, $event) {
        if ($event) {
            $event.stopPropagation();
        }
        /** @type {?} */
        var _newCondition = Object.assign({}, this.newCondition);
        if (this.insertType === 'above') {
            if (index === 0) {
                this.conditions.unshift(_newCondition);
            }
            else {
                this.conditions.splice(index, 0, _newCondition);
            }
        }
        else {
            this.conditions.splice(index + 1, 0, _newCondition);
        }
        this.changeConditionList();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    FilterGridComponent.prototype.removeCondition = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.conditions.splice(index, 1);
        this.changeConditionList();
        if (this.currentCondition) {
            if (index === this.currentCondition.index) {
                if (this.conditions[index]) {
                    this.currentCondition = { index: index, condition: this.conditions[index] };
                }
                else {
                    if (this.conditions[index - 1]) {
                        this.currentCondition = { index: index - 1, condition: this.conditions[index - 1] };
                    }
                    else {
                        this.currentCondition = null;
                    }
                }
            }
            else {
                if (!this.conditions[this.currentCondition.index]) {
                    if (this.currentCondition.index > index) {
                        this.currentCondition.index = this.currentCondition.index - 1;
                    }
                    else {
                        this.currentCondition.index = this.currentCondition.index + 1;
                    }
                }
            }
        }
    };
    /**
     * @return {?}
     */
    FilterGridComponent.prototype.onAddFilter = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newItem = Object.assign({}, this.newCondition);
        this.conditions = tslib_1.__spread(this.conditions, [newItem]);
        this.changeConditionList();
        /** @type {?} */
        var newIdx = this.conditions.length - 1;
        this.currentCondition = { index: newIdx, condition: newItem };
    };
    /**
     * @return {?}
     */
    FilterGridComponent.prototype.onClear = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.messagerService.question('确认要清空当前所有条件吗？', (/**
         * @return {?}
         */
        function () {
            _this.conditions = [];
            _this.changeConditionList();
        }));
    };
    /**
     * @return {?}
     */
    FilterGridComponent.prototype.onMoveTop = /**
     * @return {?}
     */
    function () {
        if (this.currentCondition) {
            this.conditions.unshift(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index + 1, 1);
            this.currentCondition.index = 0;
            this.changeConditionList();
        }
    };
    /**
     * @return {?}
     */
    FilterGridComponent.prototype.onMovePrev = /**
     * @return {?}
     */
    function () {
        var _a;
        if (this.currentCondition) {
            /** @type {?} */
            var index = this.currentCondition.index;
            /** @type {?} */
            var tempArr = this.conditions.splice(index, 1);
            (_a = this.conditions).splice.apply(_a, tslib_1.__spread([index - 1, 0], tempArr));
            this.currentCondition.index = index - 1;
            this.changeConditionList();
        }
    };
    /**
     * @return {?}
     */
    FilterGridComponent.prototype.onMoveNext = /**
     * @return {?}
     */
    function () {
        var _a;
        if (this.currentCondition) {
            /** @type {?} */
            var index = this.currentCondition.index;
            /** @type {?} */
            var tempArr = this.conditions.splice(index, 1);
            (_a = this.conditions).splice.apply(_a, tslib_1.__spread([index + 1, 0], tempArr));
            this.currentCondition.index = index + 1;
            this.changeConditionList();
        }
    };
    /**
     * @return {?}
     */
    FilterGridComponent.prototype.onMoveBottom = /**
     * @return {?}
     */
    function () {
        if (this.currentCondition) {
            this.conditions.push(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index, 1);
            this.currentCondition.index = this.conditions.length - 1;
            this.changeConditionList();
        }
    };
    /**
     * @private
     * @return {?}
     */
    FilterGridComponent.prototype.changeConditionList = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.filterService.conditionsChanged.next(this.conditions);
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.psUpdate();
            _this.itemIntoView();
        }));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FilterGridComponent.prototype.selected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // console.log($event);
        this.currentCondition = $event;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FilterGridComponent.prototype.isSelected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.currentCondition) {
            return this.currentCondition.index === $event;
        }
        return false;
    };
    /**
     * @param {?} $event
     * @param {?} condition
     * @param {?} value
     * @return {?}
     */
    FilterGridComponent.prototype.showExpressDialog = /**
     * @param {?} $event
     * @param {?} condition
     * @param {?} value
     * @return {?}
     */
    function ($event, condition, value) {
        /** @type {?} */
        var type = condition.expresstype === 1 ? 'express' : 'frontExpress';
        this.showExpress.emit({ event: $event, condition: condition, value: value, type: type });
    };
    /**
     * @param {?} $event
     * @param {?} condition
     * @return {?}
     */
    FilterGridComponent.prototype.onComboSelectChange = /**
     * @param {?} $event
     * @param {?} condition
     * @return {?}
     */
    function ($event, condition) {
        if ($event) {
            var data = $event.data;
            if (data) {
                condition.filterField = data['value'];
            }
        }
    };
    /**
     * @return {?}
     */
    FilterGridComponent.prototype.validation = /**
     * @return {?}
     */
    function () {
        return this.filterService.isValid(this.conditions, this.localeService);
    };
    FilterGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter-grid',
                    template: "<div class=\"table-header \">\r\n    <table class=\"table table-bordered\" style=\"margin-bottom: 0\">\r\n        <colgroup>\r\n            <col *ngFor=\"let s of columnSizeData\" [style.width]=\" s + 'px'\">\r\n        </colgroup>\r\n        <thead>\r\n            <tr>\r\n                <th></th>\r\n                <th><b>{{ 'filterEditor.leftBrackets' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.field' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.operator' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.valueType' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.value' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.rightBrackets' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.relation' | locale }}</b></th>\r\n            </tr>\r\n        </thead>\r\n    </table>\r\n</div>\r\n<div class=\"table-body flex-fill\" style=\"overflow: hidden\" #tablebodybox>\r\n    <perfect-scrollbar [config]=\"{}\" #ps>\r\n        <table class=\"table table-bordered\" style=\"margin-bottom: 0;\">\r\n            <colgroup>\r\n                <col *ngFor=\"let s of columnSizeData\" [style.width]=\" s + 'px'\">\r\n            </colgroup>\r\n            <tbody>\r\n                <tr *ngFor=\"let condition of conditions; let index=index;\" (click)=\"selected({'index':index, 'condition': condition})\" [class.selected]=\"isSelected(index)\" >\r\n                    <td style=\"text-overflow: unset;\">\r\n                        <button type=\"button\" (click)=\"insertCondition(index, $event)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-plus\"></span></button>\r\n                        <button type=\"button\" (click)=\"removeCondition(index)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-minus\"></span></button>\r\n                    </td>\r\n                    <td>\r\n                        <select class=\"form-control filter-select\" [(ngModel)]=\"condition.lbracket\" name=\"lbracket\">\r\n                            <option *ngFor=\"let item of LeftBracketData\" [value]=\"item\">{{ item }}</option>\r\n                        </select>\r\n                    </td>\r\n                    <td>\r\n                        <select *ngIf=\"fieldEditor.type === 'select'\" class=\"form-control filter-select\" [(ngModel)]=\"condition.filterField\" name=\"filterField\">\r\n                            <option *ngFor=\"let col of columns\" [value]=\"col.value\">{{ col.label }}</option>\r\n                        </select>\r\n\r\n                        <farris-combo-lookup *ngIf=\"fieldEditor.type === 'combo-tree'\" name=\"filterField\"\r\n                            [idField]=\"fieldEditor?.options?.idField ||'value'\"\r\n                            [textField]=\"fieldEditor?.options?.textField ||'label'\"\r\n                            [displayType]=\"'LOOKUPTREELIST'\" [useValue]=\"true\"\r\n                            [useTreeView]=\"true\"\r\n                            [columns]=\"fieldEditor?.options?.columns || []\"\r\n                            [data]=\"columns\"\r\n                            [(ngModel)]=\"condition.filterField\"\r\n                            [remoteSearch]=\"false\"\r\n                            [autoWidth]=\"fieldEditor?.options?.autoWidth\"\r\n                            [panelWidth]=\"fieldEditor?.options?.panelWidth || 200\">\r\n                        </farris-combo-lookup>\r\n\r\n\r\n                    </td>\r\n                    <td>\r\n                        <select class=\"form-control filter-select\" name=\"compare\" [(ngModel)]=\"condition.compare\">\r\n                            <option *ngFor=\"let item of operators\" [value]=\"item.value\">{{item.label}}</option>\r\n                        </select>\r\n                    </td>\r\n                    <td>\r\n                        <select class=\"form-control filter-select\" name=\"expresstype\" [(ngModel)]=\"condition.expresstype\">\r\n                            <option [value]=\"0\">{{'filterEditor.expressType.value' | locale }}</option>\r\n                            <option [value]=\"1\" *ngIf=\"enableExpress\" >{{'filterEditor.expressType.express' | locale }}</option>\r\n                            <option [value]=\"'frontExpress'\" *ngIf=\"enableFrontExpress\" >{{'filterEditor.expressType.frontExpress' | locale }}</option>\r\n                        </select>\r\n                    </td>\r\n                    <td>\r\n                        <input-group name=\"value\" [(ngModel)]=\"condition.value\" [groupText]=\"condition.expresstype == 1||condition.expresstype==='frontExpress'?groupIcon: ''\"\r\n                        (clickHandle)=\"showExpressDialog($event, condition, condition.value)\"></input-group>\r\n                    </td>\r\n                    <td>\r\n                        <select class=\"form-control filter-select\"  [(ngModel)]=\"condition.rbracket\" name=\"rbracket\">\r\n                            <option *ngFor=\"let item of RighttBracketData\" [value]=\"item\">{{ item }}</option>\r\n                        </select>\r\n                    </td>\r\n                    <td>\r\n                        <select class=\"form-control filter-select\" [(ngModel)]=\"condition.relation\" name=\"relation\">\r\n                            <option *ngFor=\"let item of relationData\" [value]=\"item.value\">{{ item.label }}</option>\r\n                        </select>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </perfect-scrollbar>\r\n</div>\r\n<div style=\"flex-shrink: 0;\">\r\n<filter-footer\r\n(addFilter)=\"onAddFilter()\"\r\n(clearFilter)=\"onClear()\"\r\n(moveTop)=\"onMoveTop()\"\r\n(movePrev)=\"onMovePrev()\"\r\n(moveNext)=\"onMoveNext()\"\r\n(moveBottom)=\"onMoveBottom()\"></filter-footer>\r\n</div>\r\n",
                    styles: ["\n        .filter-select { width:100%; padding-left: 0; padding-right: 0; }\n        .selected { background: #c2e4ff; }\n        "]
                }] }
    ];
    /** @nocollapse */
    FilterGridComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: FilterService },
        { type: MessagerService }
    ]; };
    FilterGridComponent.propDecorators = {
        conditions: [{ type: Input }],
        columns: [{ type: Input }],
        enableExpress: [{ type: Input }],
        enableFrontExpress: [{ type: Input }],
        height: [{ type: Input }],
        fieldEditor: [{ type: Input }],
        insertType: [{ type: Input }],
        defulatRelation: [{ type: Input }],
        showExpress: [{ type: Output }],
        tablebodybox: [{ type: ViewChild, args: ['tablebodybox',] }],
        psRef: [{ type: ViewChild, args: ['ps',] }]
    };
    return FilterGridComponent;
}());
export { FilterGridComponent };
if (false) {
    /** @type {?} */
    FilterGridComponent.prototype.LeftBracketData;
    /** @type {?} */
    FilterGridComponent.prototype.RighttBracketData;
    /** @type {?} */
    FilterGridComponent.prototype.relationData;
    /** @type {?} */
    FilterGridComponent.prototype.operators;
    /** @type {?} */
    FilterGridComponent.prototype.columnSizeData;
    /** @type {?} */
    FilterGridComponent.prototype.groupIcon;
    /** @type {?} */
    FilterGridComponent.prototype.conditions;
    /** @type {?} */
    FilterGridComponent.prototype.columns;
    /** @type {?} */
    FilterGridComponent.prototype.enableExpress;
    /** @type {?} */
    FilterGridComponent.prototype.enableFrontExpress;
    /** @type {?} */
    FilterGridComponent.prototype.height;
    /** @type {?} */
    FilterGridComponent.prototype.fieldEditor;
    /** @type {?} */
    FilterGridComponent.prototype.insertType;
    /** @type {?} */
    FilterGridComponent.prototype.defulatRelation;
    /** @type {?} */
    FilterGridComponent.prototype.showExpress;
    /** @type {?} */
    FilterGridComponent.prototype.tablebodybox;
    /** @type {?} */
    FilterGridComponent.prototype.psRef;
    /** @type {?} */
    FilterGridComponent.prototype.currentCondition;
    /**
     * @type {?}
     * @private
     */
    FilterGridComponent.prototype.newCondition;
    /** @type {?} */
    FilterGridComponent.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    FilterGridComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FilterGridComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    FilterGridComponent.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    FilterGridComponent.prototype.messagerService;
}
//# sourceMappingURL=data:application/json;base64,