/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Injector, Input } from '@angular/core';
import { DatagridComponent } from '../../datagrid.component';
var FooterCellStylerDirective = /** @class */ (function () {
    function FooterCellStylerDirective(el, render, inject, dg) {
        this.el = el;
        this.render = render;
        this.inject = inject;
        this.dg = dg;
        this.isGroupFooter = false;
    }
    /**
     * @return {?}
     */
    FooterCellStylerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    FooterCellStylerDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.isGroupFooter) {
            this.setGroupFooterCellStyle(this.column);
        }
        else {
            this.buildCustomCellStyle(this.column, this.rowData);
        }
    };
    /**
     * @private
     * @param {?} column
     * @param {?} rowData
     * @return {?}
     */
    FooterCellStylerDirective.prototype.buildCustomCellStyle = /**
     * @private
     * @param {?} column
     * @param {?} rowData
     * @return {?}
     */
    function (column, rowData) {
        /** @type {?} */
        var tr = this.el.nativeElement.parentNode;
        if (!tr.id) {
            tr.id = 'footer-row-' + this.dg.dfs.primaryId(rowData);
        }
        if (!this.el.nativeElement.id) {
            this.el.nativeElement.id = 'footer-td_' + this.rowIndex + '_' + this.column.field;
        }
        if (column && column.footer && column.footer.styler) {
            /** @type {?} */
            var _rd = rowData;
            /** @type {?} */
            var styler = column.footer.styler;
            /** @type {?} */
            var cs = styler(_rd[column.field], _rd);
            if (cs && Object.keys(cs).length) {
                this.dg.renderCustomStyle(cs, this.el.nativeElement);
            }
            else {
                this.dg.dgs.removeCssRule('#' + this.el.nativeElement.id);
            }
        }
    };
    /**
     * @private
     * @param {?} col
     * @return {?}
     */
    FooterCellStylerDirective.prototype.setGroupFooterCellStyle = /**
     * @private
     * @param {?} col
     * @return {?}
     */
    function (col) {
        var _this = this;
        // 分组合计行自定义样式 20210909
        if (col.groupFooter && col.groupFooter.styler) {
            /** @type {?} */
            var val = this.dg.commonUtils.getValue(col.field, this.rowData);
            /** @type {?} */
            var _customStyles_1 = this.dg.dgs.getCustomStyle(col.groupFooter.styler, [val, this.rowData]);
            if (_customStyles_1) {
                this.dg.renderCustomCls(_customStyles_1.cls, this.el.nativeElement);
                if (_customStyles_1.style) {
                    Object.keys(_customStyles_1.style).forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        _this.el.nativeElement.style[n] = _customStyles_1.style[n];
                    }));
                }
            }
        }
    };
    FooterCellStylerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[footer-cell-styler]',
                },] }
    ];
    /** @nocollapse */
    FooterCellStylerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: Injector },
        { type: DatagridComponent }
    ]; };
    FooterCellStylerDirective.propDecorators = {
        column: [{ type: Input }],
        rowData: [{ type: Input }],
        rowIndex: [{ type: Input }],
        isGroupFooter: [{ type: Input }]
    };
    return FooterCellStylerDirective;
}());
export { FooterCellStylerDirective };
if (false) {
    /** @type {?} */
    FooterCellStylerDirective.prototype.column;
    /** @type {?} */
    FooterCellStylerDirective.prototype.rowData;
    /** @type {?} */
    FooterCellStylerDirective.prototype.rowIndex;
    /** @type {?} */
    FooterCellStylerDirective.prototype.isGroupFooter;
    /**
     * @type {?}
     * @private
     */
    FooterCellStylerDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FooterCellStylerDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    FooterCellStylerDirective.prototype.inject;
    /** @type {?} */
    FooterCellStylerDirective.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZm9vdGVyLWNlbGwuc3R5bGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9mb290ZXIvZGF0YWdyaWQtZm9vdGVyLWNlbGwuc3R5bGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQXlCLE1BQU0sZUFBZSxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTdEO0lBU0ksbUNBQW9CLEVBQWMsRUFBVSxNQUFpQixFQUFVLE1BQWdCLEVBQVMsRUFBcUI7UUFBakcsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVc7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFVO1FBQVMsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFGNUcsa0JBQWEsR0FBRyxLQUFLLENBQUM7SUFFMEYsQ0FBQzs7OztJQUcxSCw0Q0FBUTs7O0lBQVI7SUFDQSxDQUFDOzs7O0lBRUQsbURBQWU7OztJQUFmO1FBQ0ksSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3BCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDN0M7YUFBTTtZQUNILElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN4RDtJQUNMLENBQUM7Ozs7Ozs7SUFFTyx3REFBb0I7Ozs7OztJQUE1QixVQUE2QixNQUFNLEVBQUUsT0FBTzs7WUFFbEMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVU7UUFDM0MsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVB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b250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBJbmplY3RvciwgSW5wdXQsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2RhdGFncmlkLmNvbXBvbmVudCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2Zvb3Rlci1jZWxsLXN0eWxlcl0nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRm9vdGVyQ2VsbFN0eWxlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICBASW5wdXQoKSBjb2x1bW46IGFueTtcclxuICAgIEBJbnB1dCgpIHJvd0RhdGE6IGFueTtcclxuICAgIEBJbnB1dCgpIHJvd0luZGV4OiBhbnk7XHJcbiAgICBASW5wdXQoKSBpc0dyb3VwRm9vdGVyID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBpbmplY3Q6IEluamVjdG9yLCBwdWJsaWMgZGc6IERhdGFncmlkQ29tcG9uZW50KSB7IH1cclxuXHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzR3JvdXBGb290ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRHcm91cEZvb3RlckNlbGxTdHlsZSh0aGlzLmNvbHVtbik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5idWlsZEN1c3RvbUNlbGxTdHlsZSh0aGlzLmNvbHVtbiwgdGhpcy5yb3dEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBidWlsZEN1c3RvbUNlbGxTdHlsZShjb2x1bW4sIHJvd0RhdGEpIHtcclxuXHJcbiAgICAgICAgY29uc3QgdHIgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgICAgICBpZiAoIXRyLmlkKSB7XHJcbiAgICAgICAgICAgIHRyLmlkID0gJ2Zvb3Rlci1yb3ctJyArIHRoaXMuZGcuZGZzLnByaW1hcnlJZChyb3dEYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5lbC5uYXRpdmVFbGVtZW50LmlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5pZCA9ICdmb290ZXItdGRfJyArIHRoaXMucm93SW5kZXggKyAnXycgKyB0aGlzLmNvbHVtbi5maWVsZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb2x1bW4gJiYgY29sdW1uLmZvb3RlciAmJiBjb2x1bW4uZm9vdGVyLnN0eWxlcikge1xyXG4gICAgICAgICAgICBjb25zdCBfcmQgPSByb3dEYXRhO1xyXG4gICAgICAgICAgICBjb25zdCBzdHlsZXIgPSBjb2x1bW4uZm9vdGVyLnN0eWxlcjtcclxuICAgICAgICAgICAgY29uc3QgY3MgPSBzdHlsZXIoX3JkW2NvbHVtbi5maWVsZF0sIF9yZCk7XHJcbiAgICAgICAgICAgIGlmIChjcyAmJiBPYmplY3Qua2V5cyhjcykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRnLnJlbmRlckN1c3RvbVN0eWxlKGNzLCB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZy5kZ3MucmVtb3ZlQ3NzUnVsZSgnIycgKyB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIHNldEdyb3VwRm9vdGVyQ2VsbFN0eWxlKGNvbDogYW55KSB7XHJcbiAgICAgICAgLy8g5YiG57uE5ZCI6K6h6KGM6Ieq5a6a5LmJ5qC35byPIDIwMjEwOTA5XHJcbiAgICAgICAgaWYgKGNvbC5ncm91cEZvb3RlciAmJiBjb2wuZ3JvdXBGb290ZXIuc3R5bGVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IHRoaXMuZGcuY29tbW9uVXRpbHMuZ2V0VmFsdWUoY29sLmZpZWxkLCB0aGlzLnJvd0RhdGEpO1xyXG4gICAgICAgICAgICBjb25zdCBfY3VzdG9tU3R5bGVzID0gdGhpcy5kZy5kZ3MuZ2V0Q3VzdG9tU3R5bGUoY29sLmdyb3VwRm9vdGVyLnN0eWxlciwgW3ZhbCwgdGhpcy5yb3dEYXRhXSk7XHJcbiAgICAgICAgICAgIGlmIChfY3VzdG9tU3R5bGVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRnLnJlbmRlckN1c3RvbUNscyhfY3VzdG9tU3R5bGVzLmNscywgdGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGlmIChfY3VzdG9tU3R5bGVzLnN0eWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoX2N1c3RvbVN0eWxlcy5zdHlsZSkuZm9yRWFjaChuID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnN0eWxlW25dID0gX2N1c3RvbVN0eWxlcy5zdHlsZVtuXTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=