import { Injectable, Optional } from '@angular/core';
import { empty } from 'rxjs';
import { FormMessageService } from './form-message.service';
import { FormNotifyService } from './form-notify.service';
import { LanguageService } from './languag.service';
/**
 * 数据检查服务
 */
var DataCheckService = /** @class */ (function () {
    function DataCheckService(messageService, formNotifyService, languageService) {
        this.messageService = messageService;
        this.formNotifyService = formNotifyService;
        this.languageService = languageService;
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 编辑前检查
     */
    DataCheckService.prototype.checkBeforeEdit = function (idToEdit) {
        var ifSkipCheck = this.ifSkipCheck(idToEdit);
        if (ifSkipCheck === true) {
            return true;
        }
        if (idToEdit) {
            return true;
        }
        this.formNotifyService.warning(this.languageService.plsSelectEditData, { hideTitle: true });
        return empty();
    };
    /**
     * 查看前检查
     */
    DataCheckService.prototype.checkBeforeView = function (idToView) {
        var ifSkipCheck = this.ifSkipCheck(idToView);
        if (ifSkipCheck === true) {
            return true;
        }
        if (idToView) {
            return true;
        }
        this.formNotifyService.warning(this.languageService.plsSelectViewData, { hideTitle: true });
        return empty();
    };
    /**
     * 老表单跳过检查
     * @todo：待删除，兼容老表单
     */
    DataCheckService.prototype.ifSkipCheck = function (id) {
        var context = this['context'];
        var params = context.command.params;
        // 表单没有重新保存过的情况
        if (params.hasOwnProperty('idToEdit') === false && params.hasOwnProperty('idToView') === false) {
            return true;
        }
        // 保存过但没有填参数的情况
        // @todo: 会漏掉空串的情况，目前主键解析的返回值是undefined，暂不考虑空串场景
        if (id === '') {
            return true;
        }
        return false;
    };
    DataCheckService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DataCheckService.ctorParameters = function () { return [
        { type: FormMessageService },
        { type: FormNotifyService },
        { type: LanguageService, decorators: [{ type: Optional }] }
    ]; };
    return DataCheckService;
}());
export { DataCheckService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1jaGVjay5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2RhdGEtY2hlY2suc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQWMsS0FBSyxFQUFNLE1BQU0sTUFBTSxDQUFDO0FBRTdDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVwRDs7R0FFRztBQUNIO0lBR0UsMEJBQ1UsY0FBa0MsRUFDbEMsaUJBQW9DLEVBQ3hCLGVBQWdDO1FBRjVDLG1CQUFjLEdBQWQsY0FBYyxDQUFvQjtRQUNsQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3hCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUVwRCxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN6QixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN0RDtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNJLDBDQUFlLEdBQXRCLFVBQXVCLFFBQWdCO1FBRXJDLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0MsSUFBSSxXQUFXLEtBQUssSUFBSSxFQUFFO1lBQ3hCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM1RixPQUFPLEtBQUssRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7T0FFRztJQUNJLDBDQUFlLEdBQXRCLFVBQXVCLFFBQWdCO1FBQ3JDLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0MsSUFBSSxXQUFXLEtBQUssSUFBSSxFQUFFO1lBQ3hCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM1RixPQUFPLEtBQUssRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFDRDs7O09BR0c7SUFDSSxzQ0FBVyxHQUFsQixVQUFtQixFQUFVO1FBQzNCLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQW1CLENBQUM7UUFDbEQsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFFdEMsZUFBZTtRQUNmLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsS0FBSyxLQUFLLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsS0FBSyxLQUFLLEVBQUU7WUFDOUYsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELGVBQWU7UUFDZixnREFBZ0Q7UUFDaEQsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2IsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Z0JBbkVGLFVBQVU7Ozs7Z0JBUEYsa0JBQWtCO2dCQUNsQixpQkFBaUI7Z0JBQ2pCLGVBQWUsdUJBV25CLFFBQVE7O0lBOERiLHVCQUFDO0NBQUEsQUFwRUQsSUFvRUM7QUFFRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBlbXB0eSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENvbW1hbmRDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xuaW1wb3J0IHsgRm9ybU1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9mb3JtLW1lc3NhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBGb3JtTm90aWZ5U2VydmljZSB9IGZyb20gJy4vZm9ybS1ub3RpZnkuc2VydmljZSc7XG5pbXBvcnQgeyBMYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuL2xhbmd1YWcuc2VydmljZSc7XG5cbi8qKlxuICog5pWw5o2u5qOA5p+l5pyN5YqhXG4gKi9cbkBJbmplY3RhYmxlKClcbmNsYXNzIERhdGFDaGVja1NlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbWVzc2FnZVNlcnZpY2U6IEZvcm1NZXNzYWdlU2VydmljZSxcbiAgICBwcml2YXRlIGZvcm1Ob3RpZnlTZXJ2aWNlOiBGb3JtTm90aWZ5U2VydmljZSxcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlLFxuICApIHtcbiAgICBpZiAoIXRoaXMubGFuZ3VhZ2VTZXJ2aWNlKSB7XG4gICAgICB0aGlzLmxhbmd1YWdlU2VydmljZSA9IExhbmd1YWdlU2VydmljZS5nZXRJbnN0YW5jZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDnvJbovpHliY3mo4Dmn6VcbiAgICovXG4gIHB1YmxpYyBjaGVja0JlZm9yZUVkaXQoaWRUb0VkaXQ6IHN0cmluZyk6IGFueSB7XG5cbiAgICBjb25zdCBpZlNraXBDaGVjayA9IHRoaXMuaWZTa2lwQ2hlY2soaWRUb0VkaXQpO1xuICAgIGlmIChpZlNraXBDaGVjayA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlkVG9FZGl0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLndhcm5pbmcodGhpcy5sYW5ndWFnZVNlcnZpY2UucGxzU2VsZWN0RWRpdERhdGEsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xuICAgIHJldHVybiBlbXB0eSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOafpeeci+WJjeajgOafpVxuICAgKi9cbiAgcHVibGljIGNoZWNrQmVmb3JlVmlldyhpZFRvVmlldzogc3RyaW5nKTogYW55IHtcbiAgICBjb25zdCBpZlNraXBDaGVjayA9IHRoaXMuaWZTa2lwQ2hlY2soaWRUb1ZpZXcpO1xuICAgIGlmIChpZlNraXBDaGVjayA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlkVG9WaWV3KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLndhcm5pbmcodGhpcy5sYW5ndWFnZVNlcnZpY2UucGxzU2VsZWN0Vmlld0RhdGEsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xuICAgIHJldHVybiBlbXB0eSgpO1xuICB9XG4gIC8qKlxuICAgKiDogIHooajljZXot7Pov4fmo4Dmn6VcbiAgICogQHRvZG/vvJrlvoXliKDpmaTvvIzlhbzlrrnogIHooajljZVcbiAgICovXG4gIHB1YmxpYyBpZlNraXBDaGVjayhpZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgY29udGV4dCA9IHRoaXNbJ2NvbnRleHQnXSBhcyBDb21tYW5kQ29udGV4dDtcbiAgICBjb25zdCBwYXJhbXMgPSBjb250ZXh0LmNvbW1hbmQucGFyYW1zO1xuXG4gICAgLy8g6KGo5Y2V5rKh5pyJ6YeN5paw5L+d5a2Y6L+H55qE5oOF5Ya1XG4gICAgaWYgKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgnaWRUb0VkaXQnKSA9PT0gZmFsc2UgJiYgcGFyYW1zLmhhc093blByb3BlcnR5KCdpZFRvVmlldycpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8g5L+d5a2Y6L+H5L2G5rKh5pyJ5aGr5Y+C5pWw55qE5oOF5Ya1XG4gICAgLy8gQHRvZG86IOS8mua8j+aOieepuuS4sueahOaDheWGte+8jOebruWJjeS4u+mUruino+aekOeahOi/lOWbnuWAvOaYr3VuZGVmaW5lZO+8jOaaguS4jeiAg+iZkeepuuS4suWcuuaZr1xuICAgIGlmIChpZCA9PT0gJycpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgeyBEYXRhQ2hlY2tTZXJ2aWNlIH07XG4iXX0=