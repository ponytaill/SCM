/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, EventEmitter, RendererFactory2, NgZone } from '@angular/core';
import { ModalBackdropComponent } from './modal-backdrop.component';
import { ModalContainerComponent } from './modal-container.component';
import { CLASS_NAME, modalConfigDefaults, ModalOptions, TRANSITION_DURATIONS } from './modal-options.class';
import { BsModalRef } from './bs-modal-ref.service';
import { Utils } from '@farris/ui-modal/utils';
import { ComponentLoaderFactory } from '@farris/ui-modal/component-loader';
var BsModalService = /** @class */ (function () {
    function BsModalService(rendererFactory, clf, ngZone) {
        this.clf = clf;
        this.ngZone = ngZone;
        this.version = '0.0.6';
        this.config = modalConfigDefaults;
        this.onShow = new EventEmitter();
        this.onShown = new EventEmitter();
        this.onHide = new EventEmitter();
        this.onHidden = new EventEmitter();
        this.isBodyOverflowing = false;
        this.originalBodyPadding = 0;
        this.scrollbarWidth = 0;
        this.modalsCount = 0;
        this.lastDismissReason = '';
        this.loaders = [];
        this._documentMouseDownHandler = null;
        this._renderer = rendererFactory.createRenderer(null, null);
        this._backdropLoader = this.clf.createLoader(null, null, this._renderer);
    }
    /**
     * @private
     * @return {?}
     */
    BsModalService.prototype.clearDocumentEvents = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._documentMouseDownHandler) {
            document.body.removeEventListener('mousedown', this._documentMouseDownHandler);
        }
        this._documentMouseDownHandler = null;
    };
    /** Shows a modal */
    /**
     * Shows a modal
     * @param {?} content
     * @param {?=} config
     * @return {?}
     */
    BsModalService.prototype.show = /**
     * Shows a modal
     * @param {?} content
     * @param {?=} config
     * @return {?}
     */
    function (content, config) {
        this.modalsCount++;
        this._createLoaders();
        this.config = Object.assign({}, modalConfigDefaults, config);
        this.checkDialogSize();
        this._showBackdrop();
        this.lastDismissReason = null;
        /** @type {?} */
        var modal = this._showModal(content);
        return modal;
    };
    /**
     * @param {?} level
     * @return {?}
     */
    BsModalService.prototype.hide = /**
     * @param {?} level
     * @return {?}
     */
    function (level) {
        if (this.modalsCount === 1) {
            this._hideBackdrop();
            this.resetScrollbar();
        }
        this.modalsCount = this.modalsCount >= 1 ? this.modalsCount - 1 : 0;
        // this.ngZone.runOutsideAngular(() => {
        //     setTimeout(() => {
        // this._hideModal(level);
        // this.removeLoaders(level);
        //     }, this.config.animated ? TRANSITION_DURATIONS.BACKDROP : 0);
        // });
        this._hideModal(level);
        this.removeLoaders(level);
        this.clearDocumentEvents();
    };
    /**
     * @return {?}
     */
    BsModalService.prototype._showBackdrop = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var isBackdropEnabled = this.config.backdrop || this.config.backdrop === 'static';
        /** @type {?} */
        var isBackdropInDOM = !this.backdropRef || !this.backdropRef.instance.isShown;
        if (this.modalsCount === 1) {
            this.removeBackdrop();
            if (isBackdropEnabled && isBackdropInDOM) {
                this._backdropLoader
                    .attach(ModalBackdropComponent)
                    .to('body')
                    .show({ isAnimated: this.config.animated });
                this.backdropRef = this._backdropLoader._componentRef;
            }
        }
    };
    /**
     * @return {?}
     */
    BsModalService.prototype._hideBackdrop = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.backdropRef) {
            return;
        }
        this.backdropRef.instance.isShown = false;
        /** @type {?} */
        var duration = this.config.animated ? TRANSITION_DURATIONS.BACKDROP : 0;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.removeBackdrop(); }), duration);
        }));
    };
    /**
     * @private
     * @param {?} _modal
     * @return {?}
     */
    BsModalService.prototype.updateZindex = /**
     * @private
     * @param {?} _modal
     * @return {?}
     */
    function (_modal) {
        /** @type {?} */
        var overlays = Array.from(document.body.querySelectorAll('body>div, body>farris-dialog>.farris-modal,body>.farris-modal')).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n; })).map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return window.getComputedStyle(n).zIndex;
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n && n !== 'auto'; })).map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return parseInt(n, 10);
        }));
        /** @type {?} */
        var maxZindex = Math.max.apply(Math, tslib_1.__spread(overlays));
        _modal.dialog.location.nativeElement.style.zIndex = maxZindex + 1;
    };
    /**
     * @param {?} content
     * @return {?}
     */
    BsModalService.prototype._showModal = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        var _this = this;
        /** @type {?} */
        var modalLoader = this.loaders[this.loaders.length - 1];
        /** @type {?} */
        var bsModalRef = new BsModalRef();
        /** @type {?} */
        var modalContainerRef = modalLoader
            .provide({ provide: ModalOptions, useValue: this.config })
            .provide({ provide: BsModalRef, useValue: bsModalRef })
            .attach(ModalContainerComponent)
            .to('body')
            .show({ content: content, isAnimated: this.config.animated,
            initialState: this.config.initialState,
            bsModalService: this
        });
        modalContainerRef.instance.level = this.getModalsCount();
        modalContainerRef.instance.dialogType = this.config.dialogType;
        modalContainerRef.instance.iframe = '';
        if (this.config.dialogType === 'iframe') {
            modalContainerRef.instance.iframe = content;
        }
        bsModalRef.close = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            modalContainerRef.instance.close(e);
            _this.clearDocumentEvents();
        });
        // 如果是消息类型的，出现滚动条就不响应动画了
        if (!this.config.fitContent) {
            modalContainerRef.instance.toCenter();
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                document.body.addEventListener('mousedown', _this._documentMouseDownHandler = (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) { _this._onMouseDown(e); }));
            }));
        }
        bsModalRef.content = modalLoader.getInnerComponent() || null;
        bsModalRef.dialog = modalContainerRef;
        bsModalRef.buttons = modalContainerRef.instance.buttons;
        modalContainerRef.instance['modalRef'] = bsModalRef;
        if (this.config.opened) {
            this.config.opened({ instance: bsModalRef });
        }
        this.updateZindex(bsModalRef);
        return bsModalRef;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    BsModalService.prototype._onMouseDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        if (e.target.localName === 'modal-container' || e.target.classList.contains('farris-modal')) {
            this._renderer.addClass(e.target, 'animated');
            this._renderer.addClass(e.target, 'shake');
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this._renderer.removeClass(e.target, 'animated');
                    _this._renderer.removeClass(e.target, 'shake');
                }), 650);
            }));
            return false;
        }
    };
    /**
     * @param {?} level
     * @return {?}
     */
    BsModalService.prototype._hideModal = /**
     * @param {?} level
     * @return {?}
     */
    function (level) {
        /** @type {?} */
        var modalLoader = this.loaders[level - 1];
        if (modalLoader) {
            modalLoader.hide();
        }
    };
    /**
     * @return {?}
     */
    BsModalService.prototype.getModalsCount = /**
     * @return {?}
     */
    function () {
        return this.modalsCount;
    };
    /**
     * @return {?}
     */
    BsModalService.prototype.getCurrentModalContainer = /**
     * @return {?}
     */
    function () {
        return this.loaders[this.getModalsCount() - 1];
    };
    /**
     * @param {?} reason
     * @return {?}
     */
    BsModalService.prototype.setDismissReason = /**
     * @param {?} reason
     * @return {?}
     */
    function (reason) {
        this.lastDismissReason = reason;
    };
    /**
     * @return {?}
     */
    BsModalService.prototype.removeBackdrop = /**
     * @return {?}
     */
    function () {
        this._backdropLoader.hide();
        this.backdropRef = null;
    };
    /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */
    /** Scroll bar tricks */
    /** @internal */
    /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */
    /** Scroll bar tricks */
    /**
     * \@internal
     * @return {?}
     */
    BsModalService.prototype.checkScrollbar = /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */
    /** Scroll bar tricks */
    /**
     * \@internal
     * @return {?}
     */
    function () {
        this.isBodyOverflowing = document.body.clientWidth < window.innerWidth;
        this.scrollbarWidth = this.getScrollbarWidth();
    };
    /**
     * @return {?}
     */
    BsModalService.prototype.setScrollbar = /**
     * @return {?}
     */
    function () {
        if (!document) {
            return;
        }
        this.originalBodyPadding = parseInt(window
            .getComputedStyle(document.body)
            .getPropertyValue('padding-right') || '0', 10);
        if (this.isBodyOverflowing) {
            document.body.style.paddingRight = this.originalBodyPadding +
                this.scrollbarWidth + "px";
        }
    };
    /**
     * @private
     * @return {?}
     */
    BsModalService.prototype.resetScrollbar = /**
     * @private
     * @return {?}
     */
    function () {
        document.body.style.paddingRight = this.originalBodyPadding + "px";
    };
    // thx d.walsh
    // thx d.walsh
    /**
     * @private
     * @return {?}
     */
    BsModalService.prototype.getScrollbarWidth = 
    // thx d.walsh
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var scrollDiv = this._renderer.createElement('div');
        this._renderer.addClass(scrollDiv, CLASS_NAME.SCROLLBAR_MEASURER);
        this._renderer.appendChild(document.body, scrollDiv);
        /** @type {?} */
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        this._renderer.removeChild(document.body, scrollDiv);
        return scrollbarWidth;
    };
    /**
     * @private
     * @return {?}
     */
    BsModalService.prototype._createLoaders = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var loader = this.clf.createLoader(null, null, this._renderer);
        this.copyEvent(loader.onBeforeShow, this.onShow);
        this.copyEvent(loader.onShown, this.onShown);
        this.copyEvent(loader.onBeforeHide, this.onHide);
        this.copyEvent(loader.onHidden, this.onHidden);
        this.loaders.push(loader);
    };
    /**
     * @private
     * @param {?} level
     * @return {?}
     */
    BsModalService.prototype.removeLoaders = /**
     * @private
     * @param {?} level
     * @return {?}
     */
    function (level) {
        this.loaders.splice(level - 1, 1);
        this.loaders.forEach((/**
         * @param {?} loader
         * @param {?} i
         * @return {?}
         */
        function (loader, i) {
            loader.instance.level = i + 1;
        }));
    };
    /**
     * @private
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    BsModalService.prototype.copyEvent = /**
     * @private
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    function (from, to) {
        var _this = this;
        from.subscribe((/**
         * @return {?}
         */
        function () {
            to.emit(_this.lastDismissReason);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    BsModalService.prototype.checkDialogSize = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newSize = Utils.checkDialogSize(this.config.width, this.config.height);
        if (this.config.width !== newSize.width) {
            this.config.width = newSize.width - 20;
        }
        if (this.config.height !== newSize.height) {
            this.config.height = newSize.height - 20;
        }
    };
    BsModalService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BsModalService.ctorParameters = function () { return [
        { type: RendererFactory2 },
        { type: ComponentLoaderFactory },
        { type: NgZone }
    ]; };
    return BsModalService;
}());
export { BsModalService };
if (false) {
    /** @type {?} */
    BsModalService.prototype.version;
    /** @type {?} */
    BsModalService.prototype.config;
    /** @type {?} */
    BsModalService.prototype.onShow;
    /** @type {?} */
    BsModalService.prototype.onShown;
    /** @type {?} */
    BsModalService.prototype.onHide;
    /** @type {?} */
    BsModalService.prototype.onHidden;
    /**
     * @type {?}
     * @protected
     */
    BsModalService.prototype.isBodyOverflowing;
    /**
     * @type {?}
     * @protected
     */
    BsModalService.prototype.originalBodyPadding;
    /**
     * @type {?}
     * @protected
     */
    BsModalService.prototype.scrollbarWidth;
    /**
     * @type {?}
     * @protected
     */
    BsModalService.prototype.backdropRef;
    /**
     * @type {?}
     * @private
     */
    BsModalService.prototype._backdropLoader;
    /**
     * @type {?}
     * @private
     */
    BsModalService.prototype.modalsCount;
    /**
     * @type {?}
     * @private
     */
    BsModalService.prototype.lastDismissReason;
    /**
     * @type {?}
     * @private
     */
    BsModalService.prototype.loaders;
    /**
     * @type {?}
     * @private
     */
    BsModalService.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    BsModalService.prototype._documentMouseDownHandler;
    /**
     * @type {?}
     * @private
     */
    BsModalService.prototype.clf;
    /** @type {?} */
    BsModalService.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,