/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffilepreview-adapt-unifile.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Input } from '@angular/core';
import { FfilepreviewAdaptUnifileService } from './ffilepreview-adapt-unifile.service';
var FFilePreviewAdaptUnifileDirective = /** @class */ (function () {
    function FFilePreviewAdaptUnifileDirective(previewSer) {
        this.previewSer = previewSer;
        /**
         * 处理扩展的服务器端配置
         */
        this._extendServeConfig = null;
    }
    /**
     * 捕获预览事件
     * @param fileInfo
     */
    /**
     * 捕获预览事件
     * @param {?} fileInfo
     * @return {?}
     */
    FFilePreviewAdaptUnifileDirective.prototype.filePreviewEventHandler = /**
     * 捕获预览事件
     * @param {?} fileInfo
     * @return {?}
     */
    function (fileInfo) {
        /** @type {?} */
        var previewOpts = Object.assign(this.extendServerConfig || {});
        previewOpts.options = Object.assign(previewOpts.options || {}, { showDownload: !!fileInfo.showDownload });
        if (previewOpts.options.showHeader === undefined) {
            previewOpts.options.showHeader = true;
        }
        if (previewOpts.options.showFileList === undefined) {
            previewOpts.options.showFileList = true;
        }
        // 文件扩展名
        /** @type {?} */
        var extendName = fileInfo.name.substr(fileInfo.name.lastIndexOf('.') + 1).toLowerCase();
        /** @type {?} */
        var enablePreviews = ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'jpg', 'jpeg', 'png', 'gif', 'bmp', 'pdf', 'txt'];
        if (enablePreviews.includes(extendName)) {
            this.previewSer.previewFile(fileInfo, previewOpts);
        }
        else {
            /** @type {?} */
            var msg = '此文件不支持预览';
            if (this.previewSer.notifySer) {
                this.previewSer.notifySer.warning('此文件不支持预览');
            }
            else {
                alert(msg);
            }
        }
    };
    /**
     * 捕获下载事件
     * @param fileInfo
     */
    /**
     * 捕获下载事件
     * @param {?} downloadEv
     * @return {?}
     */
    FFilePreviewAdaptUnifileDirective.prototype.fileDownloadEventHandler = /**
     * 捕获下载事件
     * @param {?} downloadEv
     * @return {?}
     */
    function (downloadEv) {
        // 如果是批量下载, downloadEv={fileInfos:[],name:}
        if (downloadEv && downloadEv['fileInfos'].length > 0) {
            if (downloadEv['fileInfos'].length > 1) {
                this.previewSer.multiDownloadFilesWidthName(downloadEv['fileInfos'], downloadEv['name'], this.extendServerConfig);
            }
            else {
                this.previewSer.downloadFile(downloadEv['fileInfos'][0], this.extendServerConfig);
            }
        }
    };
    Object.defineProperty(FFilePreviewAdaptUnifileDirective.prototype, "extendServerConfig", {
        get: /**
         * @return {?}
         */
        function () {
            return this._extendServeConfig;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._extendServeConfig = value;
            this.previewSer.setPreviwExtendServerConfig(value);
        },
        enumerable: true,
        configurable: true
    });
    FFilePreviewAdaptUnifileDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fFilePreviewAdaptUnifile]',
                    providers: [FfilepreviewAdaptUnifileService]
                },] }
    ];
    /** @nocollapse */
    FFilePreviewAdaptUnifileDirective.ctorParameters = function () { return [
        { type: FfilepreviewAdaptUnifileService }
    ]; };
    FFilePreviewAdaptUnifileDirective.propDecorators = {
        filePreviewEventHandler: [{ type: HostListener, args: ['filePreviewEvent', ['$event'],] }],
        fileDownloadEventHandler: [{ type: HostListener, args: ['fileDownloadEvent', ['$event'],] }],
        extendServerConfig: [{ type: Input }]
    };
    return FFilePreviewAdaptUnifileDirective;
}());
export { FFilePreviewAdaptUnifileDirective };
if (false) {
    /**
     * 处理扩展的服务器端配置
     * @type {?}
     * @private
     */
    FFilePreviewAdaptUnifileDirective.prototype._extendServeConfig;
    /**
     * @type {?}
     * @private
     */
    FFilePreviewAdaptUnifileDirective.prototype.previewSer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmZpbGVwcmV2aWV3LWFkYXB0LXVuaWZpbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9leHRlbmQtZmlsZXVwbG9hZC1hZGFwdC11bmlmaWxlLyIsInNvdXJjZXMiOlsibGliL2ZmaWxlcHJldmlldy1hZGFwdC11bmlmaWxlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUV6RSxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUV2RjtJQWlFSSwyQ0FBb0IsVUFBMkM7UUFBM0MsZUFBVSxHQUFWLFVBQVUsQ0FBaUM7Ozs7UUFUdkQsdUJBQWtCLEdBQUMsSUFBSSxDQUFDO0lBV2hDLENBQUM7SUE5REQ7OztPQUdHOzs7Ozs7SUFFSCxtRUFBdUI7Ozs7O0lBRHZCLFVBQ3dCLFFBQVE7O1lBQ3RCLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLENBQUM7UUFDaEUsV0FBVyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLElBQUksRUFBRSxFQUFFLEVBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFDLENBQUMsQ0FBQztRQUV4RyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxLQUFLLFNBQVMsRUFBRTtZQUM5QyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7U0FDekM7UUFFRCxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsWUFBWSxLQUFLLFNBQVMsRUFBRTtZQUNoRCxXQUFXLENBQUMsT0FBTyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7U0FDM0M7OztZQUdLLFVBQVUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUU7O1lBQ25GLGNBQWMsR0FBRyxDQUFFLEtBQUssRUFBQyxNQUFNLEVBQUMsS0FBSyxFQUFDLE1BQU0sRUFBQyxLQUFLLEVBQUMsTUFBTSxFQUFDLEtBQUssRUFBQyxNQUFNLEVBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBRTtRQUVoSCxJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ3REO2FBQU07O2dCQUNHLEdBQUcsR0FBRyxVQUFVO1lBQ3RCLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUU7Z0JBQzNCLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUNqRDtpQkFBTTtnQkFDSCxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDZDtTQUNKO0lBQ0wsQ0FBQztJQUNEOzs7T0FHRzs7Ozs7O0lBRUgsb0VBQXdCOzs7OztJQUR4QixVQUN5QixVQUFVO1FBQy9CLDJDQUEyQztRQUMzQyxJQUFJLFVBQVUsSUFBRSxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNoRCxJQUFJLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNwQyxJQUFJLENBQUMsVUFBVSxDQUFDLDJCQUEyQixDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7YUFDcEg7aUJBQUk7Z0JBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2FBQ3JGO1NBQ0o7SUFDTCxDQUFDO0lBTUQsc0JBQ0ksaUVBQWtCOzs7O1FBSXRCO1lBQ0ksT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7UUFDbkMsQ0FBQzs7Ozs7UUFQRCxVQUN1QixLQUFLO1lBQ3hCLElBQUksQ0FBQyxrQkFBa0IsR0FBQyxLQUFLLENBQUM7WUFDOUIsSUFBSSxDQUFDLFVBQVUsQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2RCxDQUFDOzs7T0FBQTs7Z0JBN0RKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsNEJBQTRCO29CQUN0QyxTQUFTLEVBQUMsQ0FBQywrQkFBK0IsQ0FBQztpQkFDOUM7Ozs7Z0JBTFEsK0JBQStCOzs7MENBV25DLFlBQVksU0FBQyxrQkFBa0IsRUFBRSxDQUFDLFFBQVEsQ0FBQzsyQ0FnQzNDLFlBQVksU0FBQyxtQkFBbUIsRUFBRSxDQUFDLFFBQVEsQ0FBQztxQ0FnQjVDLEtBQUs7O0lBWVYsd0NBQUM7Q0FBQSxBQXJFRCxJQXFFQztTQWpFWSxpQ0FBaUM7Ozs7Ozs7SUFvRDFDLCtEQUFnQzs7Ozs7SUFTcEIsdURBQW1EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOb3RpZnlTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBGZmlsZXByZXZpZXdBZGFwdFVuaWZpbGVTZXJ2aWNlIH0gZnJvbSAnLi9mZmlsZXByZXZpZXctYWRhcHQtdW5pZmlsZS5zZXJ2aWNlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbZkZpbGVQcmV2aWV3QWRhcHRVbmlmaWxlXScsXHJcbiAgICBwcm92aWRlcnM6W0ZmaWxlcHJldmlld0FkYXB0VW5pZmlsZVNlcnZpY2VdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGRmlsZVByZXZpZXdBZGFwdFVuaWZpbGVEaXJlY3RpdmUge1xyXG4gICAgLyoqXHJcbiAgICAgKiDmjZXojrfpooTop4jkuovku7ZcclxuICAgICAqIEBwYXJhbSBmaWxlSW5mbyBcclxuICAgICAqL1xyXG4gICAgQEhvc3RMaXN0ZW5lcignZmlsZVByZXZpZXdFdmVudCcsIFsnJGV2ZW50J10pXHJcbiAgICBmaWxlUHJldmlld0V2ZW50SGFuZGxlcihmaWxlSW5mbykge1xyXG4gICAgICAgIGNvbnN0IHByZXZpZXdPcHRzID0gT2JqZWN0LmFzc2lnbih0aGlzLmV4dGVuZFNlcnZlckNvbmZpZyB8fCB7fSk7XHJcbiAgICAgICAgcHJldmlld09wdHMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24ocHJldmlld09wdHMub3B0aW9ucyB8fCB7fSwge3Nob3dEb3dubG9hZDogISFmaWxlSW5mby5zaG93RG93bmxvYWR9KTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAocHJldmlld09wdHMub3B0aW9ucy5zaG93SGVhZGVyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcHJldmlld09wdHMub3B0aW9ucy5zaG93SGVhZGVyID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwcmV2aWV3T3B0cy5vcHRpb25zLnNob3dGaWxlTGlzdCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHByZXZpZXdPcHRzLm9wdGlvbnMuc2hvd0ZpbGVMaXN0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOaWh+S7tuaJqeWxleWQjVxyXG4gICAgICAgIGNvbnN0IGV4dGVuZE5hbWUgPSBmaWxlSW5mby5uYW1lLnN1YnN0cihmaWxlSW5mby5uYW1lLmxhc3RJbmRleE9mKCcuJykgKyAxKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGNvbnN0IGVuYWJsZVByZXZpZXdzID0gWyAnZG9jJywnZG9jeCcsJ3hscycsJ3hsc3gnLCdwcHQnLCdwcHR4JywnanBnJywnanBlZycsJ3BuZycsICdnaWYnLCAnYm1wJywgJ3BkZicsICd0eHQnIF07XHJcblxyXG4gICAgICAgIGlmIChlbmFibGVQcmV2aWV3cy5pbmNsdWRlcyhleHRlbmROYW1lKSkge1xyXG4gICAgICAgICAgICB0aGlzLnByZXZpZXdTZXIucHJldmlld0ZpbGUoZmlsZUluZm8sIHByZXZpZXdPcHRzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBtc2cgPSAn5q2k5paH5Lu25LiN5pSv5oyB6aKE6KeIJztcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJldmlld1Nlci5ub3RpZnlTZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJldmlld1Nlci5ub3RpZnlTZXIud2FybmluZygn5q2k5paH5Lu25LiN5pSv5oyB6aKE6KeIJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydChtc2cpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDmjZXojrfkuIvovb3kuovku7ZcclxuICAgICAqIEBwYXJhbSBmaWxlSW5mbyBcclxuICAgICAqL1xyXG4gICAgQEhvc3RMaXN0ZW5lcignZmlsZURvd25sb2FkRXZlbnQnLCBbJyRldmVudCddKVxyXG4gICAgZmlsZURvd25sb2FkRXZlbnRIYW5kbGVyKGRvd25sb2FkRXYpIHtcclxuICAgICAgICAvLyDlpoLmnpzmmK/mibnph4/kuIvovb0sIGRvd25sb2FkRXY9e2ZpbGVJbmZvczpbXSxuYW1lOn1cclxuICAgICAgICBpZiAoZG93bmxvYWRFdiYmZG93bmxvYWRFdlsnZmlsZUluZm9zJ10ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBpZiAoZG93bmxvYWRFdlsnZmlsZUluZm9zJ10ubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2aWV3U2VyLm11bHRpRG93bmxvYWRGaWxlc1dpZHRoTmFtZShkb3dubG9hZEV2WydmaWxlSW5mb3MnXSxkb3dubG9hZEV2WyduYW1lJ10sIHRoaXMuZXh0ZW5kU2VydmVyQ29uZmlnKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByZXZpZXdTZXIuZG93bmxvYWRGaWxlKGRvd25sb2FkRXZbJ2ZpbGVJbmZvcyddWzBdLCB0aGlzLmV4dGVuZFNlcnZlckNvbmZpZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9ICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWkhOeQhuaJqeWxleeahOacjeWKoeWZqOerr+mFjee9rlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9leHRlbmRTZXJ2ZUNvbmZpZz1udWxsO1xyXG4gICAgQElucHV0KCkgXHJcbiAgICBzZXQgZXh0ZW5kU2VydmVyQ29uZmlnKHZhbHVlKXtcclxuICAgICAgICB0aGlzLl9leHRlbmRTZXJ2ZUNvbmZpZz12YWx1ZTtcclxuICAgICAgICB0aGlzLnByZXZpZXdTZXIuc2V0UHJldml3RXh0ZW5kU2VydmVyQ29uZmlnKHZhbHVlKTtcclxuICAgIH0gXHJcbiAgICBnZXQgZXh0ZW5kU2VydmVyQ29uZmlnKCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4dGVuZFNlcnZlQ29uZmlnO1xyXG4gICAgfVxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwcmV2aWV3U2VyOiBGZmlsZXByZXZpZXdBZGFwdFVuaWZpbGVTZXJ2aWNlICkge1xyXG5cclxuICAgIH1cclxuXHJcbn1cclxuIl19