import { Injectable, Optional } from '@angular/core';
import { empty, of, EMPTY } from 'rxjs';
import { tap, switchMap, concatMap } from 'rxjs/operators';
import { Repository, ViewModel } from '@farris/devkit';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { FormNotifyService } from '../form-notify.service';
import { LanguageService } from '../languag.service';
import { FormMessageService } from '../form-message.service';
import { FormErrorService } from '../error/form-error.service';
/**
 * 子列表取数服务
 */
var SubListDataService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function SubListDataService(msgService, repository, loadingService, viewModel, languageService, formNotifyService, formErrorService) {
        this.msgService = msgService;
        this.repository = repository;
        this.loadingService = loadingService;
        this.viewModel = viewModel;
        this.languageService = languageService;
        this.formNotifyService = formNotifyService;
        this.formErrorService = formErrorService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
        this.viewModel = viewModel;
    }
    /**
     * 新增
     */
    SubListDataService.prototype.add = function () {
        var _this = this;
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'add' });
        }
        var path = this.getPath();
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var append$ = this.repository.appendByPath(path);
        return append$.pipe(tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.addFailed, error);
        }));
    };
    /**
     * 在指定位置插入
     * @param position 位置
     */
    SubListDataService.prototype.insert = function (position) {
        var _this = this;
        if (position === void 0) { position = -1; }
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'insert' });
        }
        var path = this.getPath();
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var append$ = this.repository.insertByPath(path, position);
        return append$.pipe(tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.addFailed, error);
        }));
    };
    /**
     * 删除子表数据
     */
    SubListDataService.prototype.remove = function (id, successMsg) {
        var msg = successMsg ? successMsg : '';
        return this.innerRemove(id, false, msg);
    };
    /**
     * 删除子表数据（不确认）
     */
    SubListDataService.prototype.removeWithoutConfirm = function (id) {
        return this.innerRemove(id, true, '');
    };
    /**
     * 批量删除子表
     * @param ids ids
     * @param successMsg 自定义提示信息
     */
    SubListDataService.prototype.removeChildrenByIds = function (ids, successMsg) {
        var _this = this;
        if (!ids) {
            this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return EMPTY;
        }
        var action$ = this.msgService.confirm(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(function (result) {
            if (!result) {
                return EMPTY;
            }
            var path = _this.getPath();
            var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
            var remove$ = _this.repository.batchRemoveByPath(path, ids);
            return remove$.pipe(tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    _this.formNotifyService.success(successMsg, { hideTitle: true });
                }
                else {
                    _this.formNotifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.deleteFailed, error);
            }));
        }));
    };
    /**
     * 删除
     */
    SubListDataService.prototype.innerRemove = function (id, isConfirm, successMsg) {
        var _this = this;
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'remove' });
        }
        if (!id) {
            this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return empty();
        }
        var action$;
        if (isConfirm === false) {
            action$ = this.msgService.question(this.languageService.confirmDeletion);
        }
        else {
            action$ = of(true);
        }
        return action$.pipe(concatMap(function (result) {
            if (!result) {
                return empty();
            }
            var path = _this.getPath();
            var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
            var remove$ = _this.repository.removeByPath(path, id);
            return remove$.pipe(tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    _this.formNotifyService.success(successMsg, { hideTitle: true });
                }
                else {
                    _this.formNotifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.deleteFailed, error);
            }));
        }));
    };
    /**
     * 删除并保存
     * @param id id
     * @param successMsg 自定义提示信息
     */
    SubListDataService.prototype.removeAndSave = function (id, successMsg) {
        var _this = this;
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'removeAndSave' });
        }
        if (!id) {
            this.formNotifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });
            return empty();
        }
        var action$ = this.msgService.confirm(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(function (result) {
            if (!result) {
                return empty();
            }
            // 删除子表数据
            var path = _this.getPath();
            var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
            var remove$ = _this.repository.removeByPath(path, id);
            return remove$.pipe(
            // 执行主表保存
            switchMap(function () {
                var fid = _this.viewModel.bindingData.list.currentId;
                return _this.repository.applyChangesById(fid);
            }), 
            // 隐藏加载中
            tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    _this.formNotifyService.success(successMsg, { hideTitle: true });
                }
                else {
                    _this.formNotifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.deleteFailed, error);
            }));
        }));
    };
    /**
     * 上移或下移数据
     * @param direction 方向，up | down
     * @param field 排序字段
     * @param targets 要移动的数据
     * @description
     * 使用该方法时排序字段必须有值，否则无法排序
     */
    SubListDataService.prototype.move = function (direction, field, targets) {
        var _this = this;
        if (!targets) {
            return;
        }
        if (typeof targets === 'string') {
            targets = targets.split(',').filter(function (p) { return p; });
        }
        var bindingPath = this.viewModel && this.viewModel.bindingPath || null;
        if (!bindingPath) {
            return;
        }
        var bindingList = this.viewModel.bindingData.getList();
        if (!bindingList || bindingList.length < 1) {
            return;
        }
        targets.forEach(function (target) {
            var index = bindingList.getIndexById(target);
            if (index === -1) {
                return;
            }
            var item = bindingList.findById(target);
            var position = item.getValue(field);
            var base = direction === 'up' ? -1 : 1;
            // 待交换的行信息
            var exchangeRowIndex = index + base;
            if (exchangeRowIndex < 0 || exchangeRowIndex > bindingList.length) {
                // 第一行无法上移，最后一行无法下移
                return;
            }
            var exchangeRowId = bindingList.getIdByIndex(exchangeRowIndex);
            var exchangeRow = bindingList.findById(exchangeRowId);
            var exchangeRowPosition = exchangeRow[field];
            // 移动行和交换行都没有排序
            if (_this.isNullOrEmpty(position) && _this.isNullOrEmpty(exchangeRowPosition)) {
                return;
            }
            bindingList.swapById(target, exchangeRowId);
            exchangeRow.setValue(field, position, true, true);
            item.setValue(field, exchangeRowPosition, true, true);
        });
    };
    SubListDataService.prototype.isNullOrEmpty = function (value) {
        return value === '' || value === null || value === undefined;
    };
    /**
     * 获取完整路径
     * @todo：强识别到从表这一级
     * fixed by justin: 根据bindingPath，如果是从从表，需要获取主表数据id和从表数据id
     */
    SubListDataService.prototype.getPath = function () {
        var bindingPath = this.viewModel.bindingPath;
        var rid = this.viewModel.bindingData.list.currentId; // root表数据id
        var path = '/' + rid;
        var subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (var index = 1; index < subPaths.length - 1; index++) {
                var subPath = subPaths[index];
                var subData = this.viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    this.formNotifyService.warning(this.languageService['plsSelectDetailFormData'], { hideTitle: true });
                    throw Error("\u83B7\u53D6\u5B50\u8868\u5B8C\u6574\u8DEF\u5F84\u51FA\u9519\uFF0C\u627E\u4E0D\u5230" + subData + "\u5BF9\u5E94\u7684\u5B50\u8868\uFF0C\u6216\u5BF9\u5E94\u5B50\u8868\u6CA1\u6709\u5F53\u524D\u884C\u3002");
                }
                path += "/" + subPath + "/" + subData.currentId;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    };
    Object.defineProperty(SubListDataService.prototype, "messagePipe", {
        /**
         * 获取根组件appContext
         */
        get: function () {
            if (this.viewModel && this.viewModel.frameContext) {
                var appContext = this.viewModel.frameContext.getFormAppContext() || null;
                if (appContext) {
                    return appContext.messagePipe || null;
                }
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    SubListDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SubListDataService.ctorParameters = function () { return [
        { type: FormMessageService },
        { type: Repository },
        { type: FormLoadingService },
        { type: ViewModel },
        { type: LanguageService, decorators: [{ type: Optional }] },
        { type: FormNotifyService },
        { type: FormErrorService }
    ]; };
    return SubListDataService;
}());
export { SubListDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViLWxpc3QtZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2RhdGEtc2VydmljZXMvc3ViLWxpc3QtZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBYyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzRCxPQUFPLEVBQWUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzNELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUUvRDs7R0FFRztBQUNIO0lBR0U7O09BRUc7SUFDSCw0QkFDVSxVQUE4QixFQUM5QixVQUEyQixFQUMzQixjQUFrQyxFQUNsQyxTQUFvQixFQUNSLGVBQWdDLEVBQzVDLGlCQUFvQyxFQUNwQyxnQkFBa0M7UUFObEMsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFDOUIsZUFBVSxHQUFWLFVBQVUsQ0FBaUI7UUFDM0IsbUJBQWMsR0FBZCxjQUFjLENBQW9CO1FBQ2xDLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDUixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDNUMsc0JBQWlCLEdBQWpCLGlCQUFp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QUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7b0JBQ3JHLE1BQU0sS0FBSyxDQUFDLHlGQUFpQixPQUFPLDJHQUFtQixDQUFDLENBQUM7aUJBQzFEO2dCQUNELElBQUksSUFBSSxNQUFJLE9BQU8sU0FBSSxPQUFPLENBQUMsU0FBVyxDQUFDO2FBQzVDO1NBQ0Y7UUFDRCxJQUFJLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRTVDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUlELHNCQUFZLDJDQUFXO1FBSHZCOztXQUVHO2FBQ0g7WUFDRSxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUU7Z0JBQ2pELElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLElBQUksSUFBSSxDQUFDO2dCQUMzRSxJQUFJLFVBQVUsRUFBRTtvQkFDZCxPQUFPLFVBQVUsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDO2lCQUN2QzthQUNGO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDOzs7T0FBQTs7Z0JBcFRGLFVBQVU7Ozs7Z0JBTkYsa0JBQWtCO2dCQUpMLFVBQVU7Z0JBQ3ZCLGtCQUFrQjtnQkFETyxTQUFTO2dCQUdsQyxlQUFlLHVCQWtCbkIsUUFBUTtnQkFuQkosaUJBQWlCO2dCQUdqQixnQkFBZ0I7O0lBMFR6Qix5QkFBQztDQUFBLEFBclRELElBcVRDO0FBQ0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBlbXB0eSwgb2YsIEVNUFRZIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRhcCwgc3dpdGNoTWFwLCBjb25jYXRNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEJpbmRpbmdMaXN0LCBSZXBvc2l0b3J5LCBWaWV3TW9kZWwgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IEZvcm1Mb2FkaW5nU2VydmljZSB9IGZyb20gJy4uL2Zvcm0tbG9hZGluZy9mb3JtLWxvYWRpbmcuc2VydmljZSc7XHJcbmltcG9ydCB7IEZvcm1Ob3RpZnlTZXJ2aWNlIH0gZnJvbSAnLi4vZm9ybS1ub3RpZnkuc2VydmljZSc7XHJcbmltcG9ydCB7IExhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uL2xhbmd1YWcuc2VydmljZSc7XHJcbmltcG9ydCB7IEZvcm1NZXNzYWdlU2VydmljZSB9IGZyb20gJy4uL2Zvcm0tbWVzc2FnZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRm9ybUVycm9yU2VydmljZSB9IGZyb20gJy4uL2Vycm9yL2Zvcm0tZXJyb3Iuc2VydmljZSc7XHJcblxyXG4vKipcclxuICog5a2Q5YiX6KGo5Y+W5pWw5pyN5YqhXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIFN1Ykxpc3REYXRhU2VydmljZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBtc2dTZXJ2aWNlOiBGb3JtTWVzc2FnZVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8YW55PixcclxuICAgIHByaXZhdGUgbG9hZGluZ1NlcnZpY2U6IEZvcm1Mb2FkaW5nU2VydmljZSxcclxuICAgIHByaXZhdGUgdmlld01vZGVsOiBWaWV3TW9kZWwsXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBmb3JtTm90aWZ5U2VydmljZTogRm9ybU5vdGlmeVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGZvcm1FcnJvclNlcnZpY2U6IEZvcm1FcnJvclNlcnZpY2VcclxuICApIHtcclxuICAgIGlmICghbGFuZ3VhZ2VTZXJ2aWNlKSB7XHJcbiAgICAgIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlID0gTGFuZ3VhZ2VTZXJ2aWNlLmdldEluc3RhbmNlKCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnZpZXdNb2RlbCA9IHZpZXdNb2RlbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaWsOWinlxyXG4gICAqL1xyXG4gIGFkZCgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKHRoaXMubWVzc2FnZVBpcGUpIHtcclxuICAgICAgdGhpcy5tZXNzYWdlUGlwZS5uZXh0KHsgbWVzc2FnZVR5cGU6ICdhZGQnIH0pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGF0aCA9IHRoaXMuZ2V0UGF0aCgpO1xyXG4gICAgY29uc3QgbG9hZGluZ1RpbWVySWQgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3dMb2FkaW5nV2l0aERlbGF5KDUwMCk7XHJcbiAgICBjb25zdCBhcHBlbmQkID0gdGhpcy5yZXBvc2l0b3J5LmFwcGVuZEJ5UGF0aChwYXRoKTtcclxuICAgIHJldHVybiBhcHBlbmQkLnBpcGUoXHJcbiAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcclxuICAgICAgfSxcclxuICAgICAgICBlcnJvciA9PiB7XHJcbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xyXG4gICAgICAgICAgdGhpcy5mb3JtRXJyb3JTZXJ2aWNlLmV4Y2VwdGlvbih0aGlzLmxhbmd1YWdlU2VydmljZS5hZGRGYWlsZWQsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWcqOaMh+WumuS9jee9ruaPkuWFpVxyXG4gICAqIEBwYXJhbSBwb3NpdGlvbiDkvY3nva5cclxuICAgKi9cclxuICBwdWJsaWMgaW5zZXJ0KHBvc2l0aW9uOiAxIHwgLTEgPSAtMSkge1xyXG4gICAgaWYgKHRoaXMubWVzc2FnZVBpcGUpIHtcclxuICAgICAgdGhpcy5tZXNzYWdlUGlwZS5uZXh0KHsgbWVzc2FnZVR5cGU6ICdpbnNlcnQnIH0pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGF0aCA9IHRoaXMuZ2V0UGF0aCgpO1xyXG4gICAgY29uc3QgbG9hZGluZ1RpbWVySWQgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3dMb2FkaW5nV2l0aERlbGF5KDUwMCk7XHJcbiAgICBjb25zdCBhcHBlbmQkID0gdGhpcy5yZXBvc2l0b3J5Lmluc2VydEJ5UGF0aChwYXRoLCBwb3NpdGlvbik7XHJcbiAgICByZXR1cm4gYXBwZW5kJC5waXBlKFxyXG4gICAgICB0YXAoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XHJcbiAgICAgIH0sXHJcbiAgICAgICAgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcclxuICAgICAgICAgIHRoaXMuZm9ybUVycm9yU2VydmljZS5leGNlcHRpb24odGhpcy5sYW5ndWFnZVNlcnZpY2UuYWRkRmFpbGVkLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICApXHJcbiAgICApO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDliKDpmaTlrZDooajmlbDmja5cclxuICAgKi9cclxuICByZW1vdmUoaWQ6IHN0cmluZywgc3VjY2Vzc01zZz86IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBtc2cgPSBzdWNjZXNzTXNnID8gc3VjY2Vzc01zZyA6ICcnO1xyXG4gICAgcmV0dXJuIHRoaXMuaW5uZXJSZW1vdmUoaWQsIGZhbHNlLCBtc2cpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yig6Zmk5a2Q6KGo5pWw5o2u77yI5LiN56Gu6K6k77yJXHJcbiAgICovXHJcbiAgcmVtb3ZlV2l0aG91dENvbmZpcm0oaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5pbm5lclJlbW92ZShpZCwgdHJ1ZSwgJycpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5om56YeP5Yig6Zmk5a2Q6KGoXHJcbiAgICogQHBhcmFtIGlkcyBpZHNcclxuICAgKiBAcGFyYW0gc3VjY2Vzc01zZyDoh6rlrprkuYnmj5DnpLrkv6Hmga9cclxuICAgKi9cclxuICByZW1vdmVDaGlsZHJlbkJ5SWRzKGlkczogc3RyaW5nLCBzdWNjZXNzTXNnPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGlmICghaWRzKSB7XHJcbiAgICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZVsncGxzU2VsZWN0RGVsZXRlRGF0YSddLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcclxuICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYWN0aW9uJCA9IHRoaXMubXNnU2VydmljZS5jb25maXJtKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmNvbmZpcm1EZWxldGlvbik7XHJcbiAgICByZXR1cm4gYWN0aW9uJC5waXBlKFxyXG4gICAgICBjb25jYXRNYXAocmVzdWx0ID0+IHtcclxuICAgICAgICBpZiAoIXJlc3VsdCkge1xyXG4gICAgICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYXRoID0gdGhpcy5nZXRQYXRoKCk7XHJcbiAgICAgICAgY29uc3QgbG9hZGluZ1RpbWVySWQgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3dMb2FkaW5nV2l0aERlbGF5KDUwMCk7XHJcbiAgICAgICAgY29uc3QgcmVtb3ZlJCA9IHRoaXMucmVwb3NpdG9yeS5iYXRjaFJlbW92ZUJ5UGF0aChwYXRoLCBpZHMpO1xyXG4gICAgICAgIHJldHVybiByZW1vdmUkLnBpcGUoXHJcbiAgICAgICAgICB0YXAoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xyXG4gICAgICAgICAgICBpZiAoc3VjY2Vzc01zZyAmJiBzdWNjZXNzTXNnLnRyaW0oKSkge1xyXG4gICAgICAgICAgICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uuc3VjY2VzcyhzdWNjZXNzTXNnLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLnN1Y2Nlc3ModGhpcy5sYW5ndWFnZVNlcnZpY2UuZGVsZXRlU3VjY2VzcywgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdGhpcy5mb3JtTm90aWZ5U2VydmljZS5zdWNjZXNzKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmRlbGV0ZVN1Y2Nlc3MsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5mb3JtRXJyb3JTZXJ2aWNlLmV4Y2VwdGlvbih0aGlzLmxhbmd1YWdlU2VydmljZS5kZWxldGVGYWlsZWQsIGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yig6ZmkXHJcbiAgICovXHJcbiAgaW5uZXJSZW1vdmUoaWQ6IHN0cmluZywgaXNDb25maXJtOiBib29sZWFuLCBzdWNjZXNzTXNnOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKHRoaXMubWVzc2FnZVBpcGUpIHtcclxuICAgICAgdGhpcy5tZXNzYWdlUGlwZS5uZXh0KHsgbWVzc2FnZVR5cGU6ICdyZW1vdmUnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKCFpZCkge1xyXG4gICAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLndhcm5pbmcodGhpcy5sYW5ndWFnZVNlcnZpY2VbJ3Bsc1NlbGVjdERlbGV0ZURhdGEnXSwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgIHJldHVybiBlbXB0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBhY3Rpb24kOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG4gICAgaWYgKGlzQ29uZmlybSA9PT0gZmFsc2UpIHtcclxuICAgICAgYWN0aW9uJCA9IHRoaXMubXNnU2VydmljZS5xdWVzdGlvbih0aGlzLmxhbmd1YWdlU2VydmljZS5jb25maXJtRGVsZXRpb24pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWN0aW9uJCA9IG9mKHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhY3Rpb24kLnBpcGUoXHJcbiAgICAgIGNvbmNhdE1hcChyZXN1bHQgPT4ge1xyXG4gICAgICAgIGlmICghcmVzdWx0KSB7XHJcbiAgICAgICAgICByZXR1cm4gZW1wdHkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuZ2V0UGF0aCgpO1xyXG4gICAgICAgIGNvbnN0IGxvYWRpbmdUaW1lcklkID0gdGhpcy5sb2FkaW5nU2VydmljZS5zaG93TG9hZGluZ1dpdGhEZWxheSg1MDApO1xyXG4gICAgICAgIGNvbnN0IHJlbW92ZSQgPSB0aGlzLnJlcG9zaXRvcnkucmVtb3ZlQnlQYXRoKHBhdGgsIGlkKTtcclxuICAgICAgICByZXR1cm4gcmVtb3ZlJC5waXBlKFxyXG4gICAgICAgICAgdGFwKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcclxuICAgICAgICAgICAgaWYgKHN1Y2Nlc3NNc2cgJiYgc3VjY2Vzc01zZy50cmltKCkpIHtcclxuICAgICAgICAgICAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLnN1Y2Nlc3Moc3VjY2Vzc01zZywgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5mb3JtTm90aWZ5U2VydmljZS5zdWNjZXNzKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmRlbGV0ZVN1Y2Nlc3MsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uuc3VjY2Vzcyh0aGlzLmxhbmd1YWdlU2VydmljZS5kZWxldGVTdWNjZXNzLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xyXG4gICAgICAgICAgICAgIHRoaXMuZm9ybUVycm9yU2VydmljZS5leGNlcHRpb24odGhpcy5sYW5ndWFnZVNlcnZpY2UuZGVsZXRlRmFpbGVkLCBlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIoOmZpOW5tuS/neWtmFxyXG4gICAqIEBwYXJhbSBpZCBpZFxyXG4gICAqIEBwYXJhbSBzdWNjZXNzTXNnIOiHquWumuS5ieaPkOekuuS/oeaBr1xyXG4gICAqL1xyXG4gIHJlbW92ZUFuZFNhdmUoaWQ6IHN0cmluZywgc3VjY2Vzc01zZz86IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBpZiAodGhpcy5tZXNzYWdlUGlwZSkge1xyXG4gICAgICB0aGlzLm1lc3NhZ2VQaXBlLm5leHQoeyBtZXNzYWdlVHlwZTogJ3JlbW92ZUFuZFNhdmUnIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKCFpZCkge1xyXG4gICAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLndhcm5pbmcodGhpcy5sYW5ndWFnZVNlcnZpY2UucGxzU2VsZWN0RGVsZXRlRGF0YSwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgIHJldHVybiBlbXB0eSgpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYWN0aW9uJCA9IHRoaXMubXNnU2VydmljZS5jb25maXJtKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmNvbmZpcm1EZWxldGlvbik7XHJcbiAgICByZXR1cm4gYWN0aW9uJC5waXBlKFxyXG4gICAgICBjb25jYXRNYXAocmVzdWx0ID0+IHtcclxuICAgICAgICBpZiAoIXJlc3VsdCkge1xyXG4gICAgICAgICAgcmV0dXJuIGVtcHR5KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDliKDpmaTlrZDooajmlbDmja5cclxuICAgICAgICBjb25zdCBwYXRoID0gdGhpcy5nZXRQYXRoKCk7XHJcbiAgICAgICAgY29uc3QgbG9hZGluZ1RpbWVySWQgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3dMb2FkaW5nV2l0aERlbGF5KDUwMCk7XHJcbiAgICAgICAgY29uc3QgcmVtb3ZlJCA9IHRoaXMucmVwb3NpdG9yeS5yZW1vdmVCeVBhdGgocGF0aCwgaWQpO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVtb3ZlJC5waXBlKFxyXG5cclxuICAgICAgICAgIC8vIOaJp+ihjOS4u+ihqOS/neWtmFxyXG4gICAgICAgICAgc3dpdGNoTWFwKCgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZmlkID0gdGhpcy52aWV3TW9kZWwuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQgYXMgc3RyaW5nO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5LmFwcGx5Q2hhbmdlc0J5SWQoZmlkKTtcclxuICAgICAgICAgIH0pLFxyXG5cclxuICAgICAgICAgIC8vIOmakOiXj+WKoOi9veS4rVxyXG4gICAgICAgICAgdGFwKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcclxuICAgICAgICAgICAgaWYgKHN1Y2Nlc3NNc2cgJiYgc3VjY2Vzc01zZy50cmltKCkpIHtcclxuICAgICAgICAgICAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLnN1Y2Nlc3Moc3VjY2Vzc01zZywgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5mb3JtTm90aWZ5U2VydmljZS5zdWNjZXNzKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmRlbGV0ZVN1Y2Nlc3MsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uuc3VjY2Vzcyh0aGlzLmxhbmd1YWdlU2VydmljZS5kZWxldGVTdWNjZXNzLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xyXG4gICAgICAgICAgICAgIHRoaXMuZm9ybUVycm9yU2VydmljZS5leGNlcHRpb24odGhpcy5sYW5ndWFnZVNlcnZpY2UuZGVsZXRlRmFpbGVkLCBlcnJvcik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOS4iuenu+aIluS4i+enu+aVsOaNrlxyXG4gICAqIEBwYXJhbSBkaXJlY3Rpb24g5pa55ZCR77yMdXAgfCBkb3duXHJcbiAgICogQHBhcmFtIGZpZWxkIOaOkuW6j+Wtl+autVxyXG4gICAqIEBwYXJhbSB0YXJnZXRzIOimgeenu+WKqOeahOaVsOaNrlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIOS9v+eUqOivpeaWueazleaXtuaOkuW6j+Wtl+auteW/hemhu+acieWAvO+8jOWQpuWImeaXoOazleaOkuW6j1xyXG4gICAqL1xyXG4gIHB1YmxpYyBtb3ZlKGRpcmVjdGlvbjogc3RyaW5nIHwgJ3VwJyB8ICdkb3duJywgZmllbGQ6IHN0cmluZywgdGFyZ2V0czogQXJyYXk8YW55PiB8IHN0cmluZykge1xyXG4gICAgaWYgKCF0YXJnZXRzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgdGFyZ2V0cyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgdGFyZ2V0cyA9IHRhcmdldHMuc3BsaXQoJywnKS5maWx0ZXIocCA9PiBwKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGJpbmRpbmdQYXRoID0gdGhpcy52aWV3TW9kZWwgJiYgdGhpcy52aWV3TW9kZWwuYmluZGluZ1BhdGggfHwgbnVsbDtcclxuICAgIGlmICghYmluZGluZ1BhdGgpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYmluZGluZ0xpc3QgPSB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YS5nZXRMaXN0KCkgYXMgQmluZGluZ0xpc3Q7XHJcbiAgICBpZiAoIWJpbmRpbmdMaXN0IHx8IGJpbmRpbmdMaXN0Lmxlbmd0aCA8IDEpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IHtcclxuICAgICAgY29uc3QgaW5kZXggPSBiaW5kaW5nTGlzdC5nZXRJbmRleEJ5SWQodGFyZ2V0KTtcclxuICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBpdGVtID0gYmluZGluZ0xpc3QuZmluZEJ5SWQodGFyZ2V0KTtcclxuICAgICAgY29uc3QgcG9zaXRpb24gPSBpdGVtLmdldFZhbHVlKGZpZWxkKTtcclxuICAgICAgY29uc3QgYmFzZSA9IGRpcmVjdGlvbiA9PT0gJ3VwJyAgPyAtMSA6IDE7XHJcbiAgICAgIC8vIOW+heS6pOaNoueahOihjOS/oeaBr1xyXG4gICAgICBjb25zdCBleGNoYW5nZVJvd0luZGV4ID0gaW5kZXggKyBiYXNlO1xyXG4gICAgICBpZiAoZXhjaGFuZ2VSb3dJbmRleCA8IDAgfHwgZXhjaGFuZ2VSb3dJbmRleCA+IGJpbmRpbmdMaXN0Lmxlbmd0aCkge1xyXG4gICAgICAgIC8vIOesrOS4gOihjOaXoOazleS4iuenu++8jOacgOWQjuS4gOihjOaXoOazleS4i+enu1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBleGNoYW5nZVJvd0lkID0gYmluZGluZ0xpc3QuZ2V0SWRCeUluZGV4KGV4Y2hhbmdlUm93SW5kZXgpO1xyXG4gICAgICBjb25zdCBleGNoYW5nZVJvdyA9IGJpbmRpbmdMaXN0LmZpbmRCeUlkKGV4Y2hhbmdlUm93SWQpO1xyXG4gICAgICBjb25zdCBleGNoYW5nZVJvd1Bvc2l0aW9uID0gZXhjaGFuZ2VSb3dbZmllbGRdO1xyXG4gICAgICAvLyDnp7vliqjooYzlkozkuqTmjaLooYzpg73msqHmnInmjpLluo9cclxuICAgICAgaWYgKHRoaXMuaXNOdWxsT3JFbXB0eShwb3NpdGlvbikgJiYgdGhpcy5pc051bGxPckVtcHR5KGV4Y2hhbmdlUm93UG9zaXRpb24pKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGJpbmRpbmdMaXN0LnN3YXBCeUlkKHRhcmdldCwgZXhjaGFuZ2VSb3dJZCk7XHJcbiAgICAgIGV4Y2hhbmdlUm93LnNldFZhbHVlKGZpZWxkLCBwb3NpdGlvbix0cnVlLHRydWUpO1xyXG4gICAgICBpdGVtLnNldFZhbHVlKGZpZWxkLCBleGNoYW5nZVJvd1Bvc2l0aW9uLHRydWUsdHJ1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG4gIHByaXZhdGUgaXNOdWxsT3JFbXB0eSh2YWx1ZTogYW55KSB7XHJcbiAgICByZXR1cm4gdmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQ7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWujOaVtOi3r+W+hFxyXG4gICAqIEB0b2Rv77ya5by66K+G5Yir5Yiw5LuO6KGo6L+Z5LiA57qnXHJcbiAgICogZml4ZWQgYnkganVzdGluOiDmoLnmja5iaW5kaW5nUGF0aO+8jOWmguaenOaYr+S7juS7juihqO+8jOmcgOimgeiOt+WPluS4u+ihqOaVsOaNrmlk5ZKM5LuO6KGo5pWw5o2uaWRcclxuICAgKi9cclxuICBwcml2YXRlIGdldFBhdGgoKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGJpbmRpbmdQYXRoID0gdGhpcy52aWV3TW9kZWwuYmluZGluZ1BhdGg7XHJcbiAgICBjb25zdCByaWQgPSB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZDsgLy8gcm9vdOihqOaVsOaNrmlkXHJcbiAgICBsZXQgcGF0aCA9ICcvJyArIHJpZDtcclxuXHJcbiAgICBjb25zdCBzdWJQYXRocyA9IGJpbmRpbmdQYXRoLnNwbGl0KCcvJyk7XHJcbiAgICBpZiAoc3ViUGF0aHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAvLyBlZzpiaW5kaW5nUGF0aOW9ouWmgi9lZHVzL2dyYWRlcyxzcGxpdOWQjuaYr1snJywgJ2VkdXMnLCAnZ3JhZGVzJ11cclxuICAgICAgLy8g5Zug5q2kaW5kZXjku44x5byA5aeLXHJcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMTsgaW5kZXggPCBzdWJQYXRocy5sZW5ndGggLSAxOyBpbmRleCsrKSB7XHJcbiAgICAgICAgY29uc3Qgc3ViUGF0aCA9IHN1YlBhdGhzW2luZGV4XTtcclxuICAgICAgICBjb25zdCBzdWJEYXRhID0gdGhpcy52aWV3TW9kZWwuYmluZGluZ0RhdGFbc3ViUGF0aF07XHJcbiAgICAgICAgaWYgKCFzdWJEYXRhIHx8ICFzdWJEYXRhLmN1cnJlbnRJZCkge1xyXG4gICAgICAgICAgdGhpcy5mb3JtTm90aWZ5U2VydmljZS53YXJuaW5nKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlWydwbHNTZWxlY3REZXRhaWxGb3JtRGF0YSddLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcclxuICAgICAgICAgIHRocm93IEVycm9yKGDojrflj5blrZDooajlrozmlbTot6/lvoTlh7rplJnvvIzmib7kuI3liLAke3N1YkRhdGF95a+55bqU55qE5a2Q6KGo77yM5oiW5a+55bqU5a2Q6KGo5rKh5pyJ5b2T5YmN6KGM44CCYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBhdGggKz0gYC8ke3N1YlBhdGh9LyR7c3ViRGF0YS5jdXJyZW50SWR9YDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcGF0aCArPSAnLycgKyBzdWJQYXRoc1tzdWJQYXRocy5sZW5ndGggLSAxXTtcclxuXHJcbiAgICByZXR1cm4gcGF0aDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5qC557uE5Lu2YXBwQ29udGV4dFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0IG1lc3NhZ2VQaXBlKCkge1xyXG4gICAgaWYgKHRoaXMudmlld01vZGVsICYmIHRoaXMudmlld01vZGVsLmZyYW1lQ29udGV4dCkge1xyXG4gICAgICBjb25zdCBhcHBDb250ZXh0ID0gdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0LmdldEZvcm1BcHBDb250ZXh0KCkgfHwgbnVsbDtcclxuICAgICAgaWYgKGFwcENvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gYXBwQ29udGV4dC5tZXNzYWdlUGlwZSB8fCBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuZXhwb3J0IHsgU3ViTGlzdERhdGFTZXJ2aWNlIH07XHJcbiJdfQ==