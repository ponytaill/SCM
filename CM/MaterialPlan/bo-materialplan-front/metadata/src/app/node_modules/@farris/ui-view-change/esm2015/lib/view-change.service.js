/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @record
 */
function ViewItems() { }
if (false) {
    /** @type {?} */
    ViewItems.prototype.items;
}
/**
 * @record
 */
function viewContainer() { }
export class ViewChangeService {
    constructor() {
        /**
         * 默认视图切换分组名称
         */
        this.defaultId = 'default';
        //当前显示视图
        this.currentViewType = {};
        /**
         * contents
         */
        this.viewContainers = {};
        this.changeCurrentViewId = new BehaviorSubject(null);
    }
    /**
     * @param {?} itemId
     * @param {?=} viewContainerId
     * @return {?}
     */
    addViewItem(itemId, viewContainerId = this.defaultId) {
        if (this.viewContainers[viewContainerId]) {
            if (this.hasElement(itemId, viewContainerId)) {
                return;
            }
            else {
                this.viewContainers[viewContainerId].items.push(itemId);
            }
        }
        else {
            this.viewContainers[viewContainerId] = (/** @type {?} */ ({
                items: []
            }));
            this.viewContainers[viewContainerId].items.push(itemId);
        }
    }
    /**
     * @param {?} itemId
     * @param {?=} viewContainerId
     * @return {?}
     */
    removeViewItem(itemId, viewContainerId = this.defaultId) {
        delete this.viewContainers[viewContainerId];
        if (this.viewContainers && this.viewContainers[viewContainerId]) {
            /** @type {?} */
            const items = this.viewContainers[viewContainerId].items.filter((/**
             * @param {?} el
             * @return {?}
             */
            el => {
                return el !== itemId;
            }));
            if (!items.length) {
                delete this.viewContainers[viewContainerId];
                return;
            }
            this.viewContainers[viewContainerId].items = items;
        }
    }
    /**
     * 存储currentpageid
     * @param {?} type
     * @param {?=} viewContainerId
     * @return {?}
     */
    updateCurrentViewId(type, viewContainerId = this.defaultId) {
        this.currentViewType[viewContainerId] = type;
        /** @type {?} */
        let changeView = {};
        changeView[viewContainerId] = type;
        this.changeCurrentViewId.next(changeView);
    }
    /**
     * @return {?}
     */
    getChangeCurrentViewId() {
        return this.changeCurrentViewId;
    }
    /**
     * @private
     * @param {?} itemId
     * @param {?} groupId
     * @return {?}
     */
    hasElement(itemId, groupId) {
        return this.viewContainers[groupId].items.some((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item === itemId));
    }
}
ViewChangeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ViewChangeService.ctorParameters = () => [];
/** @nocollapse */ ViewChangeService.ngInjectableDef = i0.defineInjectable({ factory: function ViewChangeService_Factory() { return new ViewChangeService(); }, token: ViewChangeService, providedIn: "root" });
if (false) {
    /**
     * 默认视图切换分组名称
     * @type {?}
     * @private
     */
    ViewChangeService.prototype.defaultId;
    /** @type {?} */
    ViewChangeService.prototype.currentViewType;
    /**
     * contents
     * @type {?}
     */
    ViewChangeService.prototype.viewContainers;
    /** @type {?} */
    ViewChangeService.prototype.changeCurrentViewId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy1jaGFuZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktdmlldy1jaGFuZ2UvIiwic291cmNlcyI6WyJsaWIvdmlldy1jaGFuZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQVcsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7OztBQUVoRCx3QkFFQzs7O0lBREMsMEJBQXFCOzs7OztBQUV2Qiw0QkFFQztBQUtELE1BQU0sT0FBTyxpQkFBaUI7SUFXNUI7Ozs7UUFUaUIsY0FBUyxHQUFVLFNBQVMsQ0FBQzs7UUFFOUMsb0JBQWUsR0FBTyxFQUFFLENBQUM7Ozs7UUFHekIsbUJBQWMsR0FBaUIsRUFBRSxDQUFDO1FBRWxDLHdCQUFtQixHQUF5QixJQUFJLGVBQWUsQ0FBTSxJQUFJLENBQUMsQ0FBQztJQUUzRCxDQUFDOzs7Ozs7SUFFakIsV0FBVyxDQUFDLE1BQWEsRUFBRSxlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQVM7UUFDekQsSUFBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxFQUFDO1lBQ3RDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLEVBQUU7Z0JBQzVDLE9BQU87YUFDUjtpQkFDRztnQkFDRixJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDekQ7U0FDRjthQUNHO1lBQ0YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsR0FBRyxtQkFBQTtnQkFDckMsS0FBSyxFQUFFLEVBQUU7YUFDVixFQUFhLENBQUM7WUFDZixJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekQ7SUFDSCxDQUFDOzs7Ozs7SUFFRCxjQUFjLENBQUMsTUFBTSxFQUFFLGVBQWUsR0FBRyxJQUFJLENBQUMsU0FBUztRQUNyRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDNUMsSUFBRyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLEVBQUM7O2tCQUN2RCxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTTs7OztZQUFDLEVBQUUsQ0FBQSxFQUFFO2dCQUNsRSxPQUFPLEVBQUUsS0FBSyxNQUFNLENBQUM7WUFDdkIsQ0FBQyxFQUFDO1lBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7Z0JBQ2pCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDNUMsT0FBTzthQUNSO1lBQ0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQ3BEO0lBQ0gsQ0FBQzs7Ozs7OztJQUdELG1CQUFtQixDQUFDLElBQVcsRUFBRSxlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQVM7UUFDL0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsR0FBRyxJQUFJLENBQUU7O1lBQzFDLFVBQVUsR0FBQyxFQUFFO1FBQ2pCLFVBQVUsQ0FBQyxlQUFlLENBQUMsR0FBQyxJQUFJLENBQUM7UUFDakMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM1QyxDQUFDOzs7O0lBQ0Qsc0JBQXNCO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDO0lBQ2xDLENBQUM7Ozs7Ozs7SUFDTyxVQUFVLENBQUMsTUFBYyxFQUFFLE9BQWU7UUFDaEQsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJOzs7O1FBQUMsQ0FBQyxJQUFJLEVBQVcsRUFBRSxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUMsQ0FBQztJQUNyRixDQUFDOzs7WUEzREYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7Ozs7Ozs7OztJQUdDLHNDQUE4Qzs7SUFFOUMsNENBQXlCOzs7OztJQUd6QiwyQ0FBa0M7O0lBRWxDLGdEQUEyRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3ViamVjdCwgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbnRlcmZhY2UgVmlld0l0ZW1zIHtcclxuICBpdGVtczogQXJyYXk8c3RyaW5nPjtcclxufVxyXG5pbnRlcmZhY2Ugdmlld0NvbnRhaW5lciB7XHJcbiAgW3ZpZXdHcm91cElkSWQ6IHN0cmluZ106IFZpZXdJdGVtcztcclxufVxyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgVmlld0NoYW5nZVNlcnZpY2Uge1xyXG4gIC8qKum7mOiupOinhuWbvuWIh+aNouWIhue7hOWQjeensCAqL1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGVmYXVsdElkOnN0cmluZyA9ICdkZWZhdWx0JztcclxuICAvL+W9k+WJjeaYvuekuuinhuWbvlxyXG4gIGN1cnJlbnRWaWV3VHlwZTphbnkgPSB7fTtcclxuXHJcbiAgLyoqY29udGVudHMgKi9cclxuICB2aWV3Q29udGFpbmVyczp2aWV3Q29udGFpbmVyID0ge307XHJcblxyXG4gIGNoYW5nZUN1cnJlbnRWaWV3SWQ6IEJlaGF2aW9yU3ViamVjdDxhbnk+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxhbnk+KG51bGwpO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICBhZGRWaWV3SXRlbShpdGVtSWQ6c3RyaW5nLCB2aWV3Q29udGFpbmVySWQgPSB0aGlzLmRlZmF1bHRJZCl7XHJcbiAgICBpZih0aGlzLnZpZXdDb250YWluZXJzW3ZpZXdDb250YWluZXJJZF0pe1xyXG4gICAgICBpZiAodGhpcy5oYXNFbGVtZW50KGl0ZW1JZCwgdmlld0NvbnRhaW5lcklkKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBlbHNle1xyXG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lcnNbdmlld0NvbnRhaW5lcklkXS5pdGVtcy5wdXNoKGl0ZW1JZCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2V7XHJcbiAgICAgIHRoaXMudmlld0NvbnRhaW5lcnNbdmlld0NvbnRhaW5lcklkXSA9IHtcclxuICAgICAgICBpdGVtczogW11cclxuICAgICAgfSBhcyBWaWV3SXRlbXM7XHJcbiAgICAgIHRoaXMudmlld0NvbnRhaW5lcnNbdmlld0NvbnRhaW5lcklkXS5pdGVtcy5wdXNoKGl0ZW1JZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW1vdmVWaWV3SXRlbShpdGVtSWQsIHZpZXdDb250YWluZXJJZCA9IHRoaXMuZGVmYXVsdElkKXtcclxuICAgIGRlbGV0ZSB0aGlzLnZpZXdDb250YWluZXJzW3ZpZXdDb250YWluZXJJZF07XHJcbiAgICBpZih0aGlzLnZpZXdDb250YWluZXJzICYmIHRoaXMudmlld0NvbnRhaW5lcnNbdmlld0NvbnRhaW5lcklkXSl7XHJcbiAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy52aWV3Q29udGFpbmVyc1t2aWV3Q29udGFpbmVySWRdLml0ZW1zLmZpbHRlcihlbD0+e1xyXG4gICAgICAgIHJldHVybiBlbCAhPT0gaXRlbUlkO1xyXG4gICAgICB9KVxyXG4gICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLnZpZXdDb250YWluZXJzW3ZpZXdDb250YWluZXJJZF07XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMudmlld0NvbnRhaW5lcnNbdmlld0NvbnRhaW5lcklkXS5pdGVtcyA9IGl0ZW1zO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoq5a2Y5YKoY3VycmVudHBhZ2VpZCAqL1xyXG4gIHVwZGF0ZUN1cnJlbnRWaWV3SWQodHlwZTpzdHJpbmcsIHZpZXdDb250YWluZXJJZCA9IHRoaXMuZGVmYXVsdElkKXtcclxuICAgIHRoaXMuY3VycmVudFZpZXdUeXBlW3ZpZXdDb250YWluZXJJZF0gPSB0eXBlIDtcclxuICAgIGxldCBjaGFuZ2VWaWV3PXt9O1xyXG4gICAgY2hhbmdlVmlld1t2aWV3Q29udGFpbmVySWRdPXR5cGU7XHJcbiAgICB0aGlzLmNoYW5nZUN1cnJlbnRWaWV3SWQubmV4dChjaGFuZ2VWaWV3KTtcclxuICB9XHJcbiAgZ2V0Q2hhbmdlQ3VycmVudFZpZXdJZCgpe1xyXG4gICAgcmV0dXJuIHRoaXMuY2hhbmdlQ3VycmVudFZpZXdJZDtcclxuICB9XHJcbiAgcHJpdmF0ZSBoYXNFbGVtZW50KGl0ZW1JZDogc3RyaW5nLCBncm91cElkOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnZpZXdDb250YWluZXJzW2dyb3VwSWRdLml0ZW1zLnNvbWUoKGl0ZW0pOiBib29sZWFuID0+IGl0ZW0gPT09IGl0ZW1JZCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==