/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ComponentFactoryResolver, Directive, HostListener, Injector, Input, NgZone, Renderer2 } from '@angular/core';
import { reqAnimFrame } from '@farris/ui-common';
import { InputGroupComponent } from '@farris/ui-input-group';
import { debounceTime, filter, map } from 'rxjs/operators';
import { LookupGridDisplayType } from '../lookup-displaytype';
import { LookupGridComponent } from '../lookup-grid.component';
import { LookupQuickSelectPanelComponent } from './quick-select-panel.component';
var LookupQuickSelectDirective = /** @class */ (function () {
    function LookupQuickSelectDirective(injector, ngzone, render, inputRef, lookupRef, cfr) {
        this.injector = injector;
        this.ngzone = ngzone;
        this.render = render;
        this.inputRef = inputRef;
        this.lookupRef = lookupRef;
        this.cfr = cfr;
        this.data = [];
    }
    /**
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.options && this.options.enable) {
            this.inputRef.inputClick.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                if (!_this.panelElement) {
                    // 执行帮助前
                    _this.lookupRef.dictPicking({
                        instance: _this,
                    }).subscribe((/**
                     * @param {?} pr
                     * @return {?}
                     */
                    function (pr) {
                        if (_this.lookupRef.displayType === LookupGridDisplayType.TreeList || (!_this.lookupRef.singleSelect && _this.lookupRef.viewType === 'text')) {
                            return;
                        }
                        var _a = _this.lookupRef.dialogMgr.checkDictPickingResult(pr), show = _a.show, customData = _a.customData, message = _a.message;
                        _this.lookupRef.customData = customData;
                        if (show) {
                            _this.createDataPanel();
                        }
                        else {
                            if (message) {
                                _this.lookupRef.notifyService.warning(message);
                            }
                        }
                    }));
                }
            }));
            this.inputRef.valueChange.pipe(debounceTime(200)).subscribe((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                _this.lookupRef.dictPicking({ instance: _this }).subscribe((/**
                 * @param {?} pr
                 * @return {?}
                 */
                function (pr) {
                    if (_this.lookupRef.displayType === LookupGridDisplayType.TreeList || (!_this.lookupRef.singleSelect && _this.lookupRef.viewType === 'text')) {
                        return;
                    }
                    var _a = _this.lookupRef.dialogMgr.checkDictPickingResult(pr), show = _a.show, customData = _a.customData, message = _a.message;
                    _this.lookupRef.customData = customData;
                    if (!_this.panelElement) {
                        _this.createDataPanel();
                    }
                    else {
                        _this.panelElement.style.overflow = 'hidden';
                        _this.setPanelPosition(false);
                        _this.loadData();
                    }
                }));
            }));
            this.inputRef.keydownHandle.pipe(filter((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                return event.key === 'Escape' || event.key === 'Tab' || event.key === 'F2';
            }))).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.hide(e);
            }));
        }
    };
    /**
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.lookupRef.overLayService.destory(this.lookupRef.el.nativeElement);
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.removePanelElement = /**
     * @private
     * @return {?}
     */
    function () {
        document.body.removeChild(this.panelElement);
        this.panelElement = null;
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.clearSearchValue = /**
     * @private
     * @return {?}
     */
    function () {
        this.lookupRef._searchState = {
            field: '*',
            //"*",
            value: ''
        };
    };
    /**
     * @param {?=} e
     * @param {?=} isMoreClick
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.hide = /**
     * @param {?=} e
     * @param {?=} isMoreClick
     * @return {?}
     */
    function (e, isMoreClick) {
        var _this = this;
        if (isMoreClick === void 0) { isMoreClick = false; }
        reqAnimFrame((/**
         * @return {?}
         */
        function () {
            if (_this.panelElement) {
                if (e && (e.type === 'mousewheel' || e.type === 'wheel')) {
                    _this.removePanelElement();
                }
                else {
                    _this.panelElement.classList.remove('f-area-show');
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.removePanelElement();
                    }), 120);
                }
                _this.lookupRef.overLayService.destory(_this.lookupRef.el.nativeElement);
                if (isMoreClick) {
                    return;
                }
                if (_this.lookupRef.tagInput) {
                    // this.lookupRef.tagInput.value = '';
                    _this.inputRef.value = '';
                    _this.clearSearchValue();
                }
                if (e && (e.key === 'F2' || _this.lookupRef.el.nativeElement.contains(e.target))) {
                    if (_this.data && _this.data.length) {
                        return;
                    }
                    else {
                        _this.clearSearchValue();
                    }
                }
                if (!_this.lookupRef.nosearch && _this.lookupRef.displayText !== _this.lookupRef.originalText) {
                    _this.lookupRef.onChanges(_this.lookupRef.originalText);
                }
            }
        }));
    };
    /**
     * @private
     * @param {?=} updateTopPosition
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.setPanelPosition = /**
     * @private
     * @param {?=} updateTopPosition
     * @return {?}
     */
    function (updateTopPosition) {
        if (updateTopPosition === void 0) { updateTopPosition = true; }
        if (this.panelElement) {
            var _a = this.getPanelSize(), width = _a.width, left = _a.left, top_1 = _a.top, height = _a.height;
            this.panelElement.style.width = width + "px";
            this.panelElement.style.maxHeight = height + "px";
            if (updateTopPosition) {
                this.panelElement.style.top = top_1 + "px";
            }
            this.panelElement.style.left = left + "px";
            this.panelElement.style.zIndex = '10001';
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.createDataPanel = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.panelElement = document.createElement('div');
        this.panelElement.classList.add('overlay-pane', 'f-lookup_quick-panel', 'f-area-hide');
        document.body.appendChild(this.panelElement);
        this.setPanelPosition();
        this.panelElement.style.overflow = 'hidden';
        // this.panelElement.style.height = 'auto';
        // 创建数据展示组件
        /** @type {?} */
        var cmpFact = this.cfr.resolveComponentFactory(LookupQuickSelectPanelComponent);
        this.cmpRef = cmpFact.create(this.injector);
        this.cmpRef.instance.showMore = this.options.showMore;
        this.cmpRef.instance.textField = this.lookupRef.textField;
        this.cmpRef.instance.formatter = this.options.formatter;
        this.cmpRef.instance.maxItems = this.options.showItemsCount;
        // cmpRef.location.nativeElement.classList.add('farris-main-area');
        this.panelElement.appendChild(this.cmpRef.location.nativeElement);
        this.lookupRef.selectionMgr.initDisplayValue();
        this.cmpRef.changeDetectorRef.detectChanges();
        // more clicked 打开帮助窗口
        this.cmpRef.instance.moreClcik.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.hide(e, true);
            _this.lookupRef.showDialog();
        }));
        this.cmpRef.instance.itemClick.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            var data = e.data;
            _this.selectItem(data);
        }));
        // 注册鼠标滚轮，点击事件，用于隐藏Panel
        this.lookupRef.overLayService.registerMouseEvent(this.lookupRef.el.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!_this.panelElement || e.target['closest']('.f-lookup_quick-panel')) {
                return;
            }
            if (_this.lookupRef.inputGroup && _this.lookupRef.inputGroup.textbox.nativeElement === e.target) {
                return false;
            }
            if (_this.lookupRef.tagInput && _this.lookupRef.tagInput.textbox.nativeElement === e.target) {
                return false;
            }
            if (_this.cmpRef) {
                _this.cmpRef.destroy();
                _this.cmpRef = null;
            }
            _this.clearSearchValue();
            _this.hide(e);
        }));
        this.panelElement.classList.add('f-area-show');
        this.loadData();
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.selectItem = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (!data) {
            return;
        }
        if (this.lookupRef.viewType === 'tag') {
            /** @type {?} */
            var isSelect = this.lookupRef.selections.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this.lookupRef.idField] === data[_this.lookupRef.idField]; }));
            if (!isSelect) {
                /** @type {?} */
                var selectItems = tslib_1.__spread(this.lookupRef.selections, [data]);
                this.lookupRef.selectItem(selectItems);
                this.lookupRef.lookupSelectionSer.loadSelections(selectItems);
            }
        }
        else {
            this.lookupRef.selectItem(data);
        }
        this.hide();
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.calculationPanelHeight = /**
     * @private
     * @return {?}
     */
    function () {
        return this.options.showItemsCount * 30 + (this.options.showMore ? 50 : 0) + (this.options.footerHeight || 0) + 5;
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.getInputSizeInfo = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var el = this.lookupRef.viewType === 'text' ? this.inputRef.inputGroup : this.lookupRef.tagbox;
        return el.nativeElement.getBoundingClientRect();
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.getPanelSize = /**
     * @private
     * @return {?}
     */
    function () {
        var _a = this.getInputSizeInfo(), width = _a.width, height = _a.height, top = _a.top, left = _a.left;
        /** @type {?} */
        var bottom = window.innerHeight - height - top;
        /** @type {?} */
        var panelHeight = this.calculationPanelHeight();
        /** @type {?} */
        var h = top > bottom ? top : bottom;
        if (bottom > panelHeight) {
            top = top + height;
            // 面板由上向下展开
            this.panelElement.style.transformOrigin = '100% top';
        }
        else {
            if (top > bottom) {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                    top = 10;
                }
                else {
                    top = top - parseInt('' + panelHeight, 10) - 5;
                }
                // 面板由下向上展开
                this.panelElement.style.transformOrigin = '100% bottom';
            }
            else {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                }
                top = top + height;
            }
        }
        /** @type {?} */
        var minWidth = this.options.minWidth || 200;
        /** @type {?} */
        var _width = width < minWidth ? minWidth : width;
        if (window.innerWidth - left < _width) {
            left = left + width - _width;
        }
        return { width: _width, top: top, height: panelHeight, left: left };
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.getData = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var p = {
            pageInfo: {
                pageSize: this.options.showItemsCount,
                pageIndex: 1,
            },
        };
        /** @type {?} */
        var t = "all";
        if (this.lookupRef.isTextChange) {
            this.lookupRef._searchState = {
                field: this.lookupRef.textField,
                //"*",
                value: this.lookupRef.displayText
            };
            p['search'] = this.lookupRef._searchState;
            t = 'search';
        }
        else {
            this.lookupRef._searchState = null;
        }
        if (this.lookupRef.viewType === 'tag') {
            if (this.lookupRef.tagInput.value !== '') {
                this.lookupRef._searchState = {
                    field: this.lookupRef.textField,
                    //"*",
                    value: this.lookupRef.tagInput.value
                };
                p['search'] = this.lookupRef._searchState;
                t = 'search';
            }
            else {
                this.lookupRef._searchState = null;
            }
            /** @type {?} */
            var vals = this.lookupRef.selectionMgr.getSelectedIds();
            if (vals && vals.length) {
                p["selectedInfo"] = {
                    selected: true,
                    selectedIds: vals,
                };
            }
        }
        return this.lookupRef.httpMgr.lookupRequest(p, t, true).pipe(map((/**
         * @param {?} restData
         * @return {?}
         */
        function (restData) {
            /** @type {?} */
            var _items = _this.lookupRef.items || [];
            if (restData) {
                if (_this.lookupRef.viewType === 'tag') {
                    _this.lookupRef.lookupSelectionSer.loadSelections(restData["selectedData"] || []);
                }
                _items = restData.items || [];
            }
            if (_this.lookupRef.displayText && _this.lookupRef.isTextChange) {
                /** @type {?} */
                var items = _items.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return n[_this.lookupRef.textField].indexOf(_this.lookupRef.displayText) > -1;
                })).slice(0, _this.options.showItemsCount);
                _items = items;
            }
            if (restData.displayType.toLowerCase().indexOf('treelist') > -1 && _items.length && _items[0].data) {
                return _items.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.data; })).slice(0, _this.options.showItemsCount);
            }
            return _items.slice(0, _this.options.showItemsCount);
        })));
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.loadData = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var loadingRef = this.lookupRef.loadingService.show({ container: this.panelElement });
        this.getData().subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            loadingRef.close();
            if (_this.cmpRef && _this.cmpRef.instance) {
                _this.cmpRef.instance.loadData(data);
                if (data.length < _this.options.showItemsCount) {
                    // let newHeight = data.length * 30 + (this.options.showMore ? 50: 0) + (this.options.footerHeight||0) + 5;
                    _this.data = data;
                    /** @type {?} */
                    var newHeight = _this.cmpRef.instance.itemsContainer.nativeElement.querySelector('ul').offsetHeight + 10;
                    if (!data || !data.length) {
                        newHeight = 55;
                    }
                    _this.cmpRef.instance.itemsContainer.nativeElement.style.height = newHeight + "px";
                    if (_this.panelElement) {
                        if (_this.panelElement.style.transformOrigin.indexOf('bottom') > -1) {
                            _this.panelElement.style.top = _this.getInputSizeInfo().top - newHeight - 5 + "px";
                        }
                        _this.panelElement.style.height = 'auto';
                    }
                }
                else {
                    _this.setPanelPosition();
                    _this.cmpRef.instance.itemsContainer.nativeElement.style.height = '100%';
                    if (_this.panelElement) {
                        _this.render.removeStyle(_this.panelElement, 'height');
                    }
                }
                if ((_this.lookupRef.isTextChange || (_this.lookupRef.tagInput && _this.lookupRef.tagInput.value !== '') ||
                    (_this.lookupRef.inputGroup && _this.lookupRef.inputGroup.value !== '' && _this.lookupRef.isTextChange)) && data && data.length) {
                    _this.cmpRef.instance.setActiveItem(0);
                }
                _this.panelElement.style.overflow = 'auto';
            }
        }));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.registerKeyboardEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if (!this.lookupRef.singleSelect && this.lookupRef.viewType !== 'tag') {
            return;
        }
        /** @type {?} */
        var rows = [];
        if (this.cmpRef) {
            rows = this.cmpRef.instance.data;
        }
        if (!rows || !rows.length) {
            return;
        }
        if ($event.code === 'ArrowUp' || $event.code === 'ArrowDown') {
            $event.preventDefault();
            $event.stopPropagation();
        }
        if ($event.code === 'Backspace' && this.lookupRef.viewType === 'tag' &&
            this.lookupRef.selections && this.lookupRef.selections.length &&
            this.lookupRef.tagInput && !this.lookupRef.tagInput.value && this.lookupRef.quickSelect.enableBackspace) {
            $event.preventDefault();
            $event.stopPropagation();
            /** @type {?} */
            var newdata = this.lookupRef.selections.slice(0, this.lookupRef.selections.length - 1);
            if (!newdata || !newdata.length) {
                this.lookupRef.clearValue(true);
            }
            else {
                this.lookupRef.selectItem(newdata);
            }
            this.lookupRef.lookupSelectionSer.loadSelections(newdata);
            this.setPanelPosition();
            return;
        }
        /** @type {?} */
        var idx = this.cmpRef.instance.activeIndex;
        /** @type {?} */
        var activeIndex = idx;
        /** @type {?} */
        var setActiveItem = (/**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            activeIndex = index;
            _this.cmpRef.instance.setActiveItem(index);
        });
        if ($event.code === 'ArrowUp') { // up
            if (idx > -1) {
                /** @type {?} */
                var prevIdx = idx - 1;
                if (prevIdx < 0) {
                    prevIdx = rows.length - 1;
                }
                setActiveItem(prevIdx);
            }
            else {
                setActiveItem(rows.length - 1);
            }
        }
        if ($event.code === 'ArrowDown') { // down
            // down
            /** @type {?} */
            var nextIdx = idx + 1;
            if (nextIdx >= rows.length) {
                nextIdx = 0;
            }
            setActiveItem(nextIdx);
        }
        if ($event.key === 'Enter') {
            if (rows && rows.length && this.panelElement) {
                /** @type {?} */
                var data = rows[idx];
                this.selectItem(data);
            }
            else {
                this.inputRef.inputClick.emit($event);
            }
        }
    };
    LookupQuickSelectDirective.decorators = [
        { type: Directive, args: [{ selector: '[quick-select]' },] }
    ];
    /** @nocollapse */
    LookupQuickSelectDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: NgZone },
        { type: Renderer2 },
        { type: InputGroupComponent },
        { type: LookupGridComponent },
        { type: ComponentFactoryResolver }
    ]; };
    LookupQuickSelectDirective.propDecorators = {
        options: [{ type: Input, args: ['quick-select',] }],
        registerKeyboardEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return LookupQuickSelectDirective;
}());
export { LookupQuickSelectDirective };
if (false) {
    /** @type {?} */
    LookupQuickSelectDirective.prototype.options;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.panelElement;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.cmpRef;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.data;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.inputRef;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.lookupRef;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.cfr;
}
//# sourceMappingURL=data:application/json;base64,