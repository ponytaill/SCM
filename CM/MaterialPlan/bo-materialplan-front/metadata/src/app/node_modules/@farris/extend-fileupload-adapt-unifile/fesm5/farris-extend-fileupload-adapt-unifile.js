import { InjectionToken, Injectable, Optional, Inject, defineInjectable, inject, Directive, Input, HostListener, Component, ElementRef, HostBinding, NgModule } from '@angular/core';
import { NotifyService } from '@farris/ui-notify';
import { FileViewerService, FileListModule } from '@gsp-svc/file-viewer';
import { DownloadService, GspFormRemoveListEntity, GspFormUploadListEntity, GspFormUploadEntity, OperatingModes, GspFormDocInfo, UploadService, UploadDialogMoudle } from '@gsp-svc/formdoc-upload';
import { __extends, __assign, __spread } from 'tslib';
import { UploadStatus, UploadServerService, FFileUploadModule } from '@farris/extend-file-upload';
import { Observable, forkJoin, Subject, concat, of, EMPTY } from 'rxjs';
import { switchMap, catchError, delay, map, expand, last } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffileupload-adapt-unifile.config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function FFileUploadAdaptUnifileConfig() { }
if (false) {
    /** @type {?|undefined} */
    FFileUploadAdaptUnifileConfig.prototype.rootId;
    /** @type {?|undefined} */
    FFileUploadAdaptUnifileConfig.prototype.formId;
    /** @type {?|undefined} */
    FFileUploadAdaptUnifileConfig.prototype.mode;
    /** @type {?|undefined} */
    FFileUploadAdaptUnifileConfig.prototype.options;
}
/** @type {?} */
var FFileUploadAdaptUnifileConfigToken = new InjectionToken('MFFileUploadAdaptUnifileConfig');
var FFileUploadAdaptUnifileConfigService = /** @class */ (function () {
    function FFileUploadAdaptUnifileConfigService(exConfig) {
        this.config = (/** @type {?} */ ({
            rootId: '',
            formId: '',
            mode: 0
        }));
        if (exConfig) {
            Object.assign(this.config, exConfig);
        }
    }
    /**
     * 获取config属性的值
     */
    /**
     * 获取config属性的值
     * @return {?}
     */
    FFileUploadAdaptUnifileConfigService.prototype.getConfig = /**
     * 获取config属性的值
     * @return {?}
     */
    function () {
        return this.config;
    };
    /**
     * 设置config的属性值
     * @param key
     * @param value
     */
    /**
     * 设置config的属性值
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    FFileUploadAdaptUnifileConfigService.prototype.setConfig = /**
     * 设置config的属性值
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        this.config[key] = value;
    };
    FFileUploadAdaptUnifileConfigService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FFileUploadAdaptUnifileConfigService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FFileUploadAdaptUnifileConfigToken,] }] }
    ]; };
    /** @nocollapse */ FFileUploadAdaptUnifileConfigService.ngInjectableDef = defineInjectable({ factory: function FFileUploadAdaptUnifileConfigService_Factory() { return new FFileUploadAdaptUnifileConfigService(inject(FFileUploadAdaptUnifileConfigToken, 8)); }, token: FFileUploadAdaptUnifileConfigService, providedIn: "root" });
    return FFileUploadAdaptUnifileConfigService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    FFileUploadAdaptUnifileConfigService.prototype.config;
}
;

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffilepreview-adapt-unifile.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FfilepreviewAdaptUnifileService = /** @class */ (function () {
    function FfilepreviewAdaptUnifileService(fileviewSer, configSer, downloadSer) {
        this.fileviewSer = fileviewSer;
        this.configSer = configSer;
        this.downloadSer = downloadSer;
        // 暂时用于简单合并
        this.previewExtendServerConfig = null;
        this.notifySer = null;
        this.extendData = this.configSer.getConfig();
        this.notifySer = this.fileviewSer['injector'].get(NotifyService, null);
    }
    /**
     * 返回最终属性值
     * @param key
     * @param configValue
     * @param extendValue
     */
    /**
     * 返回最终属性值
     * @private
     * @param {?} key
     * @param {?} extendValue
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.getFinallyConfig = /**
     * 返回最终属性值
     * @private
     * @param {?} key
     * @param {?} extendValue
     * @return {?}
     */
    function (key, extendValue) {
        if (extendValue && extendValue.hasOwnProperty(key)) {
            return extendValue[key];
        }
        // 避免下载等其他指令再传入扩展配置
        if (this.previewExtendServerConfig && this.previewExtendServerConfig.hasOwnProperty(key)) {
            return this.previewExtendServerConfig[key];
        }
        // 来自module中forRoot的配置
        if (this.extendData.hasOwnProperty(key)) {
            return this.extendData[key];
        }
        return null;
    };
    /**
     * 预览单个文件
     * @param info
     */
    /**
     * 预览单个文件
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.previewFile = /**
     * 预览单个文件
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    function (info, extendService) {
        return this.previewFileList([info], extendService);
    };
    /**
     * 预览整个列表
     * @param infos
     */
    /**
     * 预览整个列表
     * @param {?} infos
     * @param {?} extendService
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.previewFileList = /**
     * 预览整个列表
     * @param {?} infos
     * @param {?} extendService
     * @return {?}
     */
    function (infos, extendService) {
        //metadataIdList: string[]
        /** @type {?} */
        var rootId = this.getFinallyConfig('rootId', extendService);
        /** @type {?} */
        var metadataIdList = [];
        infos.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            metadataIdList.push(item.extend['metadataId']);
        }));
        /** @type {?} */
        var options = this.getFinallyConfig('options', extendService);
        if (options) {
            return this.fileviewSer.viewerFileList(metadataIdList, rootId, options);
        }
        else {
            return this.fileviewSer.viewerFileList(metadataIdList, rootId);
        }
    };
    /**
     * 下载附件
     * @param info
     */
    /**
     * 下载附件
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.downloadFile = /**
     * 下载附件
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    function (info, extendService) {
        if (!info.id) {
            throw new Error('请设置要下载的附件');
        }
        window.open(this.getImgSrc(info, extendService));
    };
    /**
   * 下载附件
   * @param info
   */
    /**
     * 下载附件
     * @param {?} infos
     * @param {?} extendService
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.multiDownloadFiles = /**
     * 下载附件
     * @param {?} infos
     * @param {?} extendService
     * @return {?}
     */
    function (infos, extendService) {
        //metadataIdList: string[]
        if (infos.length == 1) {
            this.downloadFile(infos[0], extendService);
        }
        else {
            /** @type {?} */
            var rootId = this.getFinallyConfig('rootId', extendService);
            /** @type {?} */
            var metadataIdList_1 = [];
            infos.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                metadataIdList_1.push(item.extend['metadataId']);
            }));
            /** @type {?} */
            var url = this.downloadSer.getMultipleDownloadUrl(JSON.stringify(metadataIdList_1), rootId);
            window.open(url);
        }
    };
    /**
     * @param {?} infos
     * @param {?=} name
     * @param {?=} extendService
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.multiDownloadFilesWidthName = /**
     * @param {?} infos
     * @param {?=} name
     * @param {?=} extendService
     * @return {?}
     */
    function (infos, name, extendService) {
        if (name === void 0) { name = ""; }
        //metadataIdList: string[]
        if (infos.length == 1) {
            this.downloadFile(infos[0], extendService);
        }
        else {
            /** @type {?} */
            var rootId = this.getFinallyConfig('rootId', extendService);
            /** @type {?} */
            var metadataIdList_2 = [];
            infos.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                metadataIdList_2.push(item.extend['metadataId']);
            }));
            /** @type {?} */
            var url = this.downloadSer.getMultipleDownloadUrlWithName(JSON.stringify(metadataIdList_2), rootId, name);
            window.open(url);
        }
    };
    /**
     * 获取下载链接
    */
    /**
     * 获取下载链接
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.getImgSrc = /**
     * 获取下载链接
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    function (info, extendService) {
        if (!info.id) {
            throw new Error('请设置要下载的附件');
        }
        /** @type {?} */
        var url = '';
        /** @type {?} */
        var attachId = info.extend['metadataId'];
        /** @type {?} */
        var rootId = this.getFinallyConfig('rootId', extendService);
        // 文档服务服务单元名进行规范性调整，由document修改为dfs
        if (this.downloadSer) {
            if (rootId) {
                url = this.downloadSer.getDownloadUrl(attachId, rootId);
            }
        }
        else if (rootId) {
            console.warn('因为安全问题，附件下载提供安全校验机制，附件下载功能需要重新编译');
            url = "/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=" + attachId + "&rootid=" + rootId;
        }
        return url;
    };
    /**
     * 根据预览指令的扩展配置获取
     * @param value
     */
    /**
     * 根据预览指令的扩展配置获取
     * @param {?} value
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.setPreviwExtendServerConfig = /**
     * 根据预览指令的扩展配置获取
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.previewExtendServerConfig = value;
    };
    /**
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.getPreviewExtendServerConfig = /**
     * @return {?}
     */
    function () {
        return this.previewExtendServerConfig;
    };
    FfilepreviewAdaptUnifileService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FfilepreviewAdaptUnifileService.ctorParameters = function () { return [
        { type: FileViewerService },
        { type: FFileUploadAdaptUnifileConfigService },
        { type: DownloadService, decorators: [{ type: Optional }] }
    ]; };
    /** @nocollapse */ FfilepreviewAdaptUnifileService.ngInjectableDef = defineInjectable({ factory: function FfilepreviewAdaptUnifileService_Factory() { return new FfilepreviewAdaptUnifileService(inject(FileViewerService), inject(FFileUploadAdaptUnifileConfigService), inject(DownloadService, 8)); }, token: FfilepreviewAdaptUnifileService, providedIn: "root" });
    return FfilepreviewAdaptUnifileService;
}());
if (false) {
    /** @type {?} */
    FfilepreviewAdaptUnifileService.prototype.extendData;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.previewExtendServerConfig;
    /** @type {?} */
    FfilepreviewAdaptUnifileService.prototype.notifySer;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.fileviewSer;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.configSer;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.downloadSer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffilepreview-adapt-unifile-simple.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FFileAdaptPreviewFileDirective = /** @class */ (function () {
    function FFileAdaptPreviewFileDirective(previewSer) {
        this.previewSer = previewSer;
        // 是否禁用预览
        this.viewDisabled = false;
        // 处理扩展的服务器端配置
        this.extendServerConfig = null;
    }
    /**
     * 捕获预览事件
     * @param fileInfo
     */
    /**
     * 捕获预览事件
     * @return {?}
     */
    FFileAdaptPreviewFileDirective.prototype.filePreviewEventHandler = /**
     * 捕获预览事件
     * @return {?}
     */
    function () {
        if (!this.fileInfo || this.viewDisabled) {
            return;
        }
        this.previewSer.previewFile(this.fileInfo, this.extendServerConfig);
    };
    FFileAdaptPreviewFileDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fFileAdaptPreviewFile]'
                },] }
    ];
    /** @nocollapse */
    FFileAdaptPreviewFileDirective.ctorParameters = function () { return [
        { type: FfilepreviewAdaptUnifileService }
    ]; };
    FFileAdaptPreviewFileDirective.propDecorators = {
        fileInfo: [{ type: Input, args: ['fFileAdaptPreviewFile',] }],
        filePreviewEventHandler: [{ type: HostListener, args: ['click', ['$event'],] }],
        viewDisabled: [{ type: Input }],
        extendServerConfig: [{ type: Input }]
    };
    return FFileAdaptPreviewFileDirective;
}());
if (false) {
    /** @type {?} */
    FFileAdaptPreviewFileDirective.prototype.fileInfo;
    /** @type {?} */
    FFileAdaptPreviewFileDirective.prototype.viewDisabled;
    /** @type {?} */
    FFileAdaptPreviewFileDirective.prototype.extendServerConfig;
    /**
     * @type {?}
     * @private
     */
    FFileAdaptPreviewFileDirective.prototype.previewSer;
}
var FFileAdaptDownloadFileDirective = /** @class */ (function () {
    function FFileAdaptDownloadFileDirective(previewSer) {
        this.previewSer = previewSer;
        //重命名
        this.zipName = '';
        // 是否禁用下载
        this.downloadDisabled = false;
        // 处理扩展的服务器端配置
        this.extendServerConfig = null;
        // 是否启用批量下载
        this.enableMulti = false;
    }
    /**
     * 捕获预览事件
     * @param fileInfo
     */
    /**
     * 捕获预览事件
     * @return {?}
     */
    FFileAdaptDownloadFileDirective.prototype.filePreviewEventHandler = /**
     * 捕获预览事件
     * @return {?}
     */
    function () {
        if (!this.fileInfo || this.downloadDisabled) {
            return;
        }
        if (this.enableMulti && this.fileInfo instanceof Array) {
            this.previewSer.multiDownloadFilesWidthName(this.fileInfo, this.zipName, this.extendServerConfig);
        }
        else {
            this.previewSer.downloadFile(this.fileInfo, this.extendServerConfig);
        }
    };
    FFileAdaptDownloadFileDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fFileAdaptDownloadFile]'
                },] }
    ];
    /** @nocollapse */
    FFileAdaptDownloadFileDirective.ctorParameters = function () { return [
        { type: FfilepreviewAdaptUnifileService }
    ]; };
    FFileAdaptDownloadFileDirective.propDecorators = {
        fileInfo: [{ type: Input, args: ['fFileAdaptDownloadFile',] }],
        filePreviewEventHandler: [{ type: HostListener, args: ['click', ['$event'],] }],
        zipName: [{ type: Input }],
        downloadDisabled: [{ type: Input }],
        extendServerConfig: [{ type: Input }],
        enableMulti: [{ type: Input }]
    };
    return FFileAdaptDownloadFileDirective;
}());
if (false) {
    /** @type {?} */
    FFileAdaptDownloadFileDirective.prototype.fileInfo;
    /** @type {?} */
    FFileAdaptDownloadFileDirective.prototype.zipName;
    /** @type {?} */
    FFileAdaptDownloadFileDirective.prototype.downloadDisabled;
    /** @type {?} */
    FFileAdaptDownloadFileDirective.prototype.extendServerConfig;
    /** @type {?} */
    FFileAdaptDownloadFileDirective.prototype.enableMulti;
    /**
     * @type {?}
     * @private
     */
    FFileAdaptDownloadFileDirective.prototype.previewSer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffilepreview-adapt-seeimg/ffilepreview-adapt-seeimg.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FfilepreviewAdaptSeeimgComponent = /** @class */ (function () {
    function FfilepreviewAdaptSeeimgComponent(adpSer, elementRef) {
        this.adpSer = adpSer;
        this.elementRef = elementRef;
        this.cls = true;
        // 是否启用图片的缩略图，默认为false；如果启用，图片类型会出现缩略图；不启用，根据类型显示图标
        this.enableThumbnail = false;
        // 图标的样式前缀
        this.clsPrefix = 'ffilepreview--filetype';
        // 显示缩略图中时，定义哪些后缀属于图片;
        this.supportImgSuffix = 'jpeg,jpg,gif,png,bmp';
        this.iconWidth = 38;
        // 缩略图的最大宽度
        this.maxThumbnailWidth = '100%';
        // 缩略图的最小宽度
        this.maxThumbnailHeight = '100%';
        // 处理扩展的服务器端配置，这样可以支持每个指令预览不同的目录，比如{'rootId':'default-root','formId':'formId'}
        this.extendServerConfig = null;
    }
    /**
     * @return {?}
     */
    FfilepreviewAdaptSeeimgComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * 获取图片的链接
     */
    /**
     * 获取图片的链接
     * @return {?}
     */
    FfilepreviewAdaptSeeimgComponent.prototype.imgSrc = /**
     * 获取图片的链接
     * @return {?}
     */
    function () {
        return this.adpSer.getImgSrc(this.fileInfo, this.extendServerConfig);
    };
    /**
     * 判断是否是图片
     */
    /**
     * 判断是否是图片
     * @return {?}
     */
    FfilepreviewAdaptSeeimgComponent.prototype.isImage = /**
     * 判断是否是图片
     * @return {?}
     */
    function () {
        // 没有数据
        if (!this.fileInfo) {
            return false;
        }
        // 没有名称
        /** @type {?} */
        var fileName = this.fileInfo.name;
        if (!fileName) {
            return false;
        }
        /** @type {?} */
        var lastDotIndex = fileName.lastIndexOf(".");
        /** @type {?} */
        var fileSuffix = '';
        if (lastDotIndex > -1) {
            fileSuffix = fileName.substring(lastDotIndex + 1).toLocaleLowerCase();
        }
        if (!fileSuffix) {
            return false;
        }
        /** @type {?} */
        var tImgSuffixArray = this.supportImgSuffix.split(',');
        /** @type {?} */
        var tIndex = tImgSuffixArray.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return item == fileSuffix;
        }));
        if (tIndex > -1) {
            return true;
        }
        return false;
    };
    /**
     * 获取文件类型样式
     */
    /**
     * 获取文件类型样式
     * @return {?}
     */
    FfilepreviewAdaptSeeimgComponent.prototype.getFileTypeClassName = /**
     * 获取文件类型样式
     * @return {?}
     */
    function () {
        /** @type {?} */
        var clsName = this.clsPrefix;
        // 如果名称为空
        if (!this.fileInfo || !this.fileInfo['name']) {
            return clsName + '-any';
        }
        /** @type {?} */
        var fileName = this.fileInfo['name'];
        /** @type {?} */
        var lastDotIndex = fileName.lastIndexOf(".");
        /** @type {?} */
        var fileSuffix = '';
        if (lastDotIndex > -1) {
            fileSuffix = fileName.substring(lastDotIndex + 1).toLocaleLowerCase();
        }
        switch (fileSuffix) {
            case 'pdf':
                clsName += '-pdf';
                break;
            case 'jpeg':
            case 'jpg':
            case 'gif':
            case 'png':
            case 'bmp':
                clsName += '-img';
                break;
            case 'ppt':
                clsName += '-ppt';
                break;
            case 'doc':
            case 'docx':
                clsName += '-doc';
                break;
            case 'xls':
            case 'xlsx':
                clsName += '-xls';
                break;
            case 'txt':
                clsName += '-txt';
                break;
            case 'zip':
                clsName += '-zip';
                break;
            default:
                clsName += '-any';
        }
        return clsName;
    };
    FfilepreviewAdaptSeeimgComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ffilepreview-adapt-seeimg',
                    template: "<div class=\"ffilepreview-seeimg--wrapper\" [ngClass]=\"{'ffilepreview-seeimg--thumbnail':enableThumbnail}\">\r\n  <ng-container *ngIf=\"enableThumbnail&&isImage();else notImage\">\r\n    <img class=\"ffilepreview-seeimg--img\" [src]=\"imgSrc()\" [ngStyle]=\"{'maxWidth':maxThumbnailWidth,'maxHeight':maxThumbnailHeight}\"/>\r\n  </ng-container>\r\n</div>\r\n<ng-template #notImage>\r\n  <span class=\"ffilepreview--filetype-icon\" [ngClass]=\"getFileTypeClassName()\" [ngStyle]=\"{'width':iconWidth+'px','height':iconWidth+'px'}\"></span>\r\n</ng-template>",
                    styles: [":host{height:100%;width:100%;position:relative}.ffilepreview-seeimg--thumbnail{top:0;bottom:0;position:absolute;right:0;left:0;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center}.ffilepreview-seeimg--wrapper:hover{opacity:.8}.ffilepreview-seeimg--img{max-width:100%;max-height:100%;border-radius:4px}"]
                }] }
    ];
    /** @nocollapse */
    FfilepreviewAdaptSeeimgComponent.ctorParameters = function () { return [
        { type: FfilepreviewAdaptUnifileService },
        { type: ElementRef }
    ]; };
    FfilepreviewAdaptSeeimgComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class.ffilepreview-adapt-seeimg',] }],
        enableThumbnail: [{ type: Input }],
        clsPrefix: [{ type: Input }],
        supportImgSuffix: [{ type: Input }],
        fileInfo: [{ type: Input }],
        iconWidth: [{ type: Input }],
        maxThumbnailWidth: [{ type: Input }],
        maxThumbnailHeight: [{ type: Input }],
        extendServerConfig: [{ type: Input }]
    };
    return FfilepreviewAdaptSeeimgComponent;
}());
if (false) {
    /** @type {?} */
    FfilepreviewAdaptSeeimgComponent.prototype.cls;
    /** @type {?} */
    FfilepreviewAdaptSeeimgComponent.prototype.enableThumbnail;
    /** @type {?} */
    FfilepreviewAdaptSeeimgComponent.prototype.clsPrefix;
    /** @type {?} */
    FfilepreviewAdaptSeeimgComponent.prototype.supportImgSuffix;
    /** @type {?} */
    FfilepreviewAdaptSeeimgComponent.prototype.fileInfo;
    /** @type {?} */
    FfilepreviewAdaptSeeimgComponent.prototype.iconWidth;
    /** @type {?} */
    FfilepreviewAdaptSeeimgComponent.prototype.maxThumbnailWidth;
    /** @type {?} */
    FfilepreviewAdaptSeeimgComponent.prototype.maxThumbnailHeight;
    /** @type {?} */
    FfilepreviewAdaptSeeimgComponent.prototype.extendServerConfig;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptSeeimgComponent.prototype.adpSer;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptSeeimgComponent.prototype.elementRef;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffileupload-adapt-unifile.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FfileuploadAdaptUnifileService = /** @class */ (function (_super) {
    __extends(FfileuploadAdaptUnifileService, _super);
    function FfileuploadAdaptUnifileService(uploadSer, configSer) {
        var _this = _super.call(this) || this;
        _this.uploadSer = uploadSer;
        _this.configSer = configSer;
        // 暂时用于简单合并
        _this.bufferSize = 1024 * 1024;
        _this.uploadedChunk = {};
        _this.fileTotalChunk = {};
        _this.extendData = _this.configSer.getConfig();
        return _this;
    }
    /**
     * @private
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.uuid = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var S4 = (/**
         * @return {?}
         */
        function () {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        });
        /** @type {?} */
        var nGuid = S4() + S4() + S4() + S4() + S4() + S4() + S4() + S4();
        return nGuid;
    };
    /**
     * 删除文件
     * @param file
     * @param event
     */
    /**
     * 删除文件
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.remove = /**
     * 删除文件
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (files, event, extendService) {
        return this.innerRemoveList(files, event, extendService);
    };
    /**
     * @private
     * @param {?} files
     * @param {?} event
     * @param {?=} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.innerRemoveList = /**
     * @private
     * @param {?} files
     * @param {?} event
     * @param {?=} extendService
     * @return {?}
     */
    function (files, event, extendService) {
        var _this = this;
        if (extendService === void 0) { extendService = null; }
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var removeFileInfo = new GspFormRemoveListEntity;
            /** @type {?} */
            var metadataIdList = [];
            files.forEach((/**
             * @param {?} fileItem
             * @return {?}
             */
            function (fileItem) {
                if (fileItem['response']) {
                    metadataIdList.push(fileItem['response']['metadataId']);
                }
            }));
            removeFileInfo.mode = _this.getFinallyConfig('mode', extendService);
            /** @type {?} */
            var rootId = _this.getFinallyConfig('rootId', extendService);
            removeFileInfo.metadataIdList = [].concat(metadataIdList);
            _this.uploadSer.removeList(metadataIdList, rootId).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                // 没有需要整合的服务器端返回数据
                observer.next({ type: 'removed', files: files });
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                observer.error(error);
                observer.complete();
            }), (/**
             * @return {?}
             */
            function () {
                observer.complete();
            }));
        }));
    };
    /**
     * 上传文件
     * @param file
     * @param event
     */
    /**
     * 上传文件
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.upload = /**
     * 上传文件
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (files, event, extendService) {
        if (event.type == 'sliceUpload') {
            return this.uploadBigFile(files, event, extendService);
        }
        return this.innerUploadList(files, event, extendService);
    };
    /**
     * 内部上传方式
     * @param files
     * @param event
     * @param extendService
     */
    /**
     * 内部上传方式
     * @private
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.innerUploadList = /**
     * 内部上传方式
     * @private
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (files, event, extendService) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var uploadInfo = new GspFormUploadListEntity;
            uploadInfo.formId = _this.getFinallyConfig('formId', extendService);
            uploadInfo.mode = _this.getFinallyConfig('mode', extendService);
            /** @type {?} */
            var rootId = _this.getFinallyConfig('rootId', extendService);
            uploadInfo.docInfoList = [];
            /** @type {?} */
            var readerObserable = [];
            files.forEach((/**
             * @param {?} fileItem
             * @return {?}
             */
            function (fileItem) {
                /** @type {?} */
                var sub = new Observable((/**
                 * @param {?} obser
                 * @return {?}
                 */
                function (obser) {
                    /** @type {?} */
                    var reader = new FileReader();
                    // 暂不处理异常
                    reader.readAsBinaryString(fileItem.nativeFile);
                    reader.onload = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        /** @type {?} */
                        var info = (/** @type {?} */ ({ 'fileName': '', 'fileContent': '' }));
                        info['fileName'] = fileItem.name;
                        info['fileContent'] = btoa(reader.result.toString());
                        // 如果data里有数据，并且属性是配置的扩展属性
                        if (event.hasOwnProperty('data') && event['data'] && event['data'].hasOwnProperty('extProperty')) {
                            // 
                            info['extProperty'] = event['data']['extProperty'];
                        }
                        uploadInfo.docInfoList.push(info);
                        obser.next();
                        obser.complete();
                    });
                }));
                readerObserable.push(sub);
            }));
            forkJoin(readerObserable).subscribe((/**
             * @param {?} datas
             * @return {?}
             */
            function (datas) {
                //     metadataId: string;
                //  fileName: string;
                _this.uploadSer.uploadList(uploadInfo, rootId).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result.error) {
                        // 此接口一旦出现问题，所有附件都上传不通过
                        observer.error(_this.errorInfoFormat(result.error, files));
                        observer.complete();
                        return;
                    }
                    // 合并返回结果到此处
                    result.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) {
                        /** @type {?} */
                        var findIndex = _this.findFileIndexByFileName(files, item.fileName);
                        if (findIndex > -1) {
                            files[findIndex]['response'] = item;
                            files[findIndex]['progress']['status'] = UploadStatus.Done;
                        }
                    }));
                    observer.next({ type: 'done', files: files });
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    observer.error(_this.errorInfoFormat(error, files));
                    observer.complete();
                }), (/**
                 * @return {?}
                 */
                function () {
                    observer.complete();
                }));
            }));
        }));
    };
    ;
    /**
     * 分片加载
     * @param file
     * @param event
     * @param extendService
     */
    /**
     * 分片加载
     * @param {?} file
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.multipartUpload = /**
     * 分片加载
     * @param {?} file
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (file, event, extendService) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            // let fileInfo: FileInfo;
            /** @type {?} */
            var uuid = _this.uuid();
            // let uuid = UUID.UUID();
            //reader.readAsBinaryString(selectedFile);
            //reader.onload = (e) => {
            /** @type {?} */
            var fileName = file.name;
            // fileInfo = {
            //   id: uuid,
            //   name: fileName,
            //   type: file.type,
            //   source: "",
            //   size: this.formatFileSize(file.size),
            //   fileSize: file.size,
            //   picListDisplayName: this.getMultipartDisplayName(fileName),
            //   queueListDisplayName: fileName,
            //   //content: reader.result.toString(),
            //   hasUploaded: false,
            //   mouseOn: false,
            //   selectd: false,
            //   isUploading: true,
            //   uploadResult: false,
            //   uploadProcess: 0,
            //   errorMessage: "",
            //   extensionDropListId: 0,
            //   extensionName: ""
            // }
            /** @type {?} */
            var chunkTotal = Math.ceil(file.size / _this.bufferSize);
            // 标记当前附件总的分片数
            _this.fileTotalChunk[uuid] = chunkTotal;
            /** @type {?} */
            var chunkIndex = 0;
            // 标记当前附件成功的分片数
            _this.uploadedChunk[uuid] = 0;
            var _loop_1 = function () {
                /** @type {?} */
                var uploadInfo = new GspFormUploadEntity;
                uploadInfo.mode = OperatingModes.Temp;
                uploadInfo.formId = _this.getFinallyConfig('formId', extendService);
                uploadInfo.rootId = _this.getFinallyConfig('rootId', extendService);
                /** @type {?} */
                var docInfo = new GspFormDocInfo;
                docInfo.fileName = fileName;
                docInfo.metadataId = uuid;
                docInfo.total = chunkTotal;
                // 如果data里有数据，并且属性是配置的扩展属性
                if (event.hasOwnProperty('data') && event['data'] && event['data'].hasOwnProperty('extProperty')) {
                    docInfo['extProperty'] = (/** @type {?} */ (event['data']['extProperty']));
                }
                // 下一个文件大小
                /** @type {?} */
                var nextSize = Math.min((chunkIndex + 1) * _this.bufferSize, file.size);
                // File类型
                /** @type {?} */
                var fileData = file['nativeFile'].slice(chunkIndex * _this.bufferSize, nextSize);
                // 读取文件
                /** @type {?} */
                var reader = new FileReader();
                reader.readAsBinaryString(fileData);
                /** @type {?} */
                var innerIndex = chunkIndex;
                reader.onload = (/**
                 * @return {?}
                 */
                function () {
                    // 附件上传
                    docInfo.fileContent = btoa(reader.result.toString());
                    docInfo.index = innerIndex;
                    uploadInfo.docInfo = docInfo;
                    /** @type {?} */
                    var info = uploadInfo;
                    _this.uploadSer.uploadFile(info).subscribe((/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        if (result && result.error) {
                            // 分片上传有返回结果就是报错了
                            observer.error(_this.errorInfoFormat(result.error, [file]));
                            observer.complete();
                            return;
                        }
                        else {
                            _this.uploadedChunk[uuid]++;
                            if (_this.uploadedChunk[docInfo.metadataId] == _this.fileTotalChunk[docInfo.metadataId]) {
                                // 判断是所有分片都上传完成
                                file.progress = {
                                    status: UploadStatus.Done,
                                    data: {
                                        percentage: 100
                                    }
                                };
                                file.response = docInfo;
                                delete _this.uploadedChunk[uuid];
                                delete _this.fileTotalChunk[uuid];
                                observer.next({ type: 'done', files: [file] });
                                observer.complete();
                            }
                            else {
                                // 分片上传正常
                                /** @type {?} */
                                var percentage = Number.parseInt((_this.uploadedChunk[uuid] / _this.fileTotalChunk[uuid] * 100).toFixed(0));
                                // 判断未上传完成
                                file.progress = {
                                    status: UploadStatus.Uploading,
                                    data: {
                                        percentage: percentage
                                    }
                                };
                                observer.next({ type: 'uploading', files: [file] });
                            }
                        }
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        delete _this.uploadedChunk[uuid];
                        delete _this.fileTotalChunk[uuid];
                        observer.error(_this.errorInfoFormat(error, [file]));
                        observer.complete();
                    }));
                });
                chunkIndex = chunkIndex + 1;
            };
            while (chunkIndex < chunkTotal) {
                _loop_1();
            }
        }));
    };
    /**
     * 获取分片的附件大小
     * @param size
     */
    /**
     * 获取分片的附件大小
     * @private
     * @param {?} size
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.formatFileSize = /**
     * 获取分片的附件大小
     * @private
     * @param {?} size
     * @return {?}
     */
    function (size) {
        if (size < 102400)
            return (size / 1024).toFixed(1) + "K";
        else if (size < 1024 * 1024)
            return (size / 1024).toFixed(0) + "K";
        else if (size < 100 * 1024 * 1024)
            return (size / 1024 / 1024).toFixed(1) + "M";
        else if (size < 1024 * 1024 * 1024)
            return (size / 1024 / 1024).toFixed(0) + "M";
        else
            return (size / 1024 / 1024 / 1024).toFixed(1) + "G";
    };
    /**
     * 获取分片的 附件名称
     * @param fileName
     */
    /**
     * 获取分片的 附件名称
     * @private
     * @param {?} fileName
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.getMultipartDisplayName = /**
     * 获取分片的 附件名称
     * @private
     * @param {?} fileName
     * @return {?}
     */
    function (fileName) {
        if (fileName.length <= 10)
            return fileName;
        else {
            /** @type {?} */
            var headContent = fileName.substring(0, 2);
            /** @type {?} */
            var tailContent = fileName.substring(fileName.lastIndexOf('.') - 2);
            return headContent + "…" + tailContent;
        }
    };
    /**
     * @private
     * @param {?} error
     * @param {?} files
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.errorInfoFormat = /**
     * @private
     * @param {?} error
     * @param {?} files
     * @return {?}
     */
    function (error, files) {
        // 
        /** @type {?} */
        var errorFiles = files.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return { id: item.id, name: item.name };
        }));
        if (error) {
            return Object.assign(error, { files: errorFiles }, { message: error['Message'] || error['extensionMessage'] || '上传失败', type: 'error' });
        }
        else {
            return Object.assign({ files: errorFiles }, { message: '上传失败', type: 'error' });
        }
    };
    /**
     * 返回最终属性值
     * @param key
     * @param configValue
     * @param extendValue
     */
    /**
     * 返回最终属性值
     * @private
     * @param {?} key
     * @param {?} extendValue
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.getFinallyConfig = /**
     * 返回最终属性值
     * @private
     * @param {?} key
     * @param {?} extendValue
     * @return {?}
     */
    function (key, extendValue) {
        if (extendValue && extendValue.hasOwnProperty(key)) {
            return extendValue[key];
        }
        return this.extendData[key];
    };
    /**
     * @private
     * @param {?} files
     * @param {?} fileName
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.findFileIndexByFileName = /**
     * @private
     * @param {?} files
     * @param {?} fileName
     * @return {?}
     */
    function (files, fileName) {
        // 按照肯定能找到文件来处理
        /** @type {?} */
        var findIndex = files.findIndex((/**
         * @param {?} file
         * @return {?}
         */
        function (file) { return file.name == fileName; }));
        return findIndex;
    };
    //#region 大文件分片上传
    //#region 大文件分片上传
    /**
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.uploadBigFile = 
    //#region 大文件分片上传
    /**
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (files, event, extendService) {
        var _this = this;
        /** @type {?} */
        var uploadChunks$ = new Subject();
        /** @type {?} */
        var _files = files.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var chunks = _this._getBigFileChunks(n, event, extendService);
            return __assign({}, n, chunks);
        }));
        /** @type {?} */
        var uploadchunks$ = _files.map((/**
         * @param {?} f
         * @return {?}
         */
        function (f) { return _this.uploadChunks(f, uploadChunks$); }));
        concat.apply(void 0, __spread(uploadchunks$)).subscribe((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            // console.log(`file: ${f.name} - upload complete`);
            f.progress = {
                status: UploadStatus.Done,
                data: {
                    percentage: 100
                }
            };
            f.response = JSON.parse(f.chunks[0].get('docInfo'));
            uploadChunks$.next({ type: 'done', files: [f] });
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            uploadChunks$.error(_this.errorInfoFormat(error, files));
            uploadChunks$.complete();
        }), (/**
         * @return {?}
         */
        function () {
            uploadChunks$.complete();
            // console.log("all files uploaded")
        }));
        return uploadChunks$.asObservable();
    };
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.uploadFileChunk = /**
     * @private
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var url = "/api/runtime/dfs/v1.0/formdoc/slice";
        return this.uploadSer['http']['http'].post(url, file.chunks[file.total]).pipe(switchMap((/**
         * @return {?}
         */
        function () {
            return of(file);
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @private
     * @param {?} file
     * @param {?} upChunk$
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.uploadChunks = /**
     * @private
     * @param {?} file
     * @param {?} upChunk$
     * @return {?}
     */
    function (file, upChunk$) {
        var _this = this;
        /** @type {?} */
        var doChunksRemain = (/**
         * @param {?} i
         * @return {?}
         */
        function (i) { return i > -1; });
        /** @type {?} */
        var completeUpload = (/**
         * @param {?} f
         * @return {?}
         */
        function (f) { return of(f); });
        /** @type {?} */
        var uploadChunk = (/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            return _this.uploadFileChunk(f).pipe(delay(100), map((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                // 块数为0 时，即为此文件的所有块均上传成功
                f.progress = {
                    status: UploadStatus.Uploading,
                    data: {
                        percentage: (f.total / f.chunks.length * 100).toFixed(0)
                    }
                };
                upChunk$.next({ type: 'uploading', files: [f] });
                return f;
            })));
        });
        /** @type {?} */
        var createMultipartUpload = (/**
         * @param {?} f
         * @return {?}
         */
        function (f) { return of(f); });
        return createMultipartUpload(file).pipe(
        // tap((f) => console.log("upload file", f.name)),
        expand((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            if (doChunksRemain(--file.total)) {
                return uploadChunk(file);
            }
            return EMPTY;
        })), 
        // tap((f: any) => {
        //     console.log(`file: ${f.name} - remaining chunks: ${f.total}`);
        // }),
        last(), switchMap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return completeUpload(file);
        })));
    };
    /**
     * @private
     * @param {?} file
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype._getBigFileChunks = /**
     * @private
     * @param {?} file
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (file, event, extendService) {
        /** @type {?} */
        var uuid = this.uuid();
        /** @type {?} */
        var chunkTotal = Math.ceil(file.size / this.bufferSize * (event.chunkSize || 1));
        /** @type {?} */
        var chunkIndex = 0;
        /** @type {?} */
        var fileChunks = { chunks: [], total: chunkTotal };
        while (chunkIndex < chunkTotal) {
            /** @type {?} */
            var uploadInfo = new GspFormUploadEntity;
            uploadInfo.mode = OperatingModes.Temp;
            uploadInfo.formId = this.getFinallyConfig('formId', extendService);
            uploadInfo.rootId = this.getFinallyConfig('rootId', extendService);
            /** @type {?} */
            var docInfo = new GspFormDocInfo;
            docInfo.fileName = file.name;
            docInfo.metadataId = uuid;
            docInfo.total = chunkTotal;
            /** @type {?} */
            var nextSize = Math.min((chunkIndex + 1) * this.bufferSize, file.size);
            // File类型
            /** @type {?} */
            var fileData = file['nativeFile'].slice(chunkIndex * this.bufferSize, nextSize);
            docInfo.size = file.size;
            docInfo.index = chunkIndex;
            docInfo.fileContent = "";
            // 如果data里有数据，并且属性是配置的扩展属性
            if (event.hasOwnProperty('data') && event['data'] && event['data'].hasOwnProperty('extProperty')) {
                docInfo['extProperty'] = (/** @type {?} */ (event['data']['extProperty']));
            }
            uploadInfo.docInfo = docInfo;
            //封装请求formdata
            /** @type {?} */
            var formData = new FormData();
            formData.append('uploadInfo', JSON.stringify(uploadInfo));
            formData.append('docInfo', JSON.stringify(docInfo));
            formData.append('file', fileData);
            fileChunks.chunks.push(formData);
            chunkIndex = chunkIndex + 1;
        }
        return fileChunks;
    };
    FfileuploadAdaptUnifileService.previous = 0;
    FfileuploadAdaptUnifileService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FfileuploadAdaptUnifileService.ctorParameters = function () { return [
        { type: UploadService },
        { type: FFileUploadAdaptUnifileConfigService }
    ]; };
    /** @nocollapse */ FfileuploadAdaptUnifileService.ngInjectableDef = defineInjectable({ factory: function FfileuploadAdaptUnifileService_Factory() { return new FfileuploadAdaptUnifileService(inject(UploadService), inject(FFileUploadAdaptUnifileConfigService)); }, token: FfileuploadAdaptUnifileService, providedIn: "root" });
    return FfileuploadAdaptUnifileService;
}(UploadServerService));
if (false) {
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.previous;
    /** @type {?} */
    FfileuploadAdaptUnifileService.prototype.extendData;
    /** @type {?} */
    FfileuploadAdaptUnifileService.prototype.bufferSize;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.uploadedChunk;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.fileTotalChunk;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.uploadSer;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.configSer;
    /* Skipping unhandled member: ;*/
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffilepreview-adapt-unifile.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FFilePreviewAdaptUnifileDirective = /** @class */ (function () {
    function FFilePreviewAdaptUnifileDirective(previewSer) {
        this.previewSer = previewSer;
        /**
         * 处理扩展的服务器端配置
         */
        this._extendServeConfig = null;
    }
    /**
     * 捕获预览事件
     * @param fileInfo
     */
    /**
     * 捕获预览事件
     * @param {?} fileInfo
     * @return {?}
     */
    FFilePreviewAdaptUnifileDirective.prototype.filePreviewEventHandler = /**
     * 捕获预览事件
     * @param {?} fileInfo
     * @return {?}
     */
    function (fileInfo) {
        /** @type {?} */
        var previewOpts = Object.assign(this.extendServerConfig || {});
        previewOpts.options = Object.assign(previewOpts.options || {}, { showDownload: !!fileInfo.showDownload });
        if (previewOpts.options.showHeader === undefined) {
            previewOpts.options.showHeader = true;
        }
        if (previewOpts.options.showFileList === undefined) {
            previewOpts.options.showFileList = true;
        }
        // 文件扩展名
        /** @type {?} */
        var extendName = fileInfo.name.substr(fileInfo.name.lastIndexOf('.') + 1).toLowerCase();
        /** @type {?} */
        var enablePreviews = ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'jpg', 'jpeg', 'png', 'gif', 'bmp', 'pdf', 'txt'];
        if (enablePreviews.includes(extendName)) {
            this.previewSer.previewFile(fileInfo, previewOpts);
        }
        else {
            /** @type {?} */
            var msg = '此文件不支持预览';
            if (this.previewSer.notifySer) {
                this.previewSer.notifySer.warning('此文件不支持预览');
            }
            else {
                alert(msg);
            }
        }
    };
    /**
     * 捕获下载事件
     * @param fileInfo
     */
    /**
     * 捕获下载事件
     * @param {?} downloadEv
     * @return {?}
     */
    FFilePreviewAdaptUnifileDirective.prototype.fileDownloadEventHandler = /**
     * 捕获下载事件
     * @param {?} downloadEv
     * @return {?}
     */
    function (downloadEv) {
        // 如果是批量下载, downloadEv={fileInfos:[],name:}
        if (downloadEv && downloadEv['fileInfos'].length > 0) {
            if (downloadEv['fileInfos'].length > 1) {
                this.previewSer.multiDownloadFilesWidthName(downloadEv['fileInfos'], downloadEv['name'], this.extendServerConfig);
            }
            else {
                this.previewSer.downloadFile(downloadEv['fileInfos'][0], this.extendServerConfig);
            }
        }
    };
    Object.defineProperty(FFilePreviewAdaptUnifileDirective.prototype, "extendServerConfig", {
        get: /**
         * @return {?}
         */
        function () {
            return this._extendServeConfig;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._extendServeConfig = value;
            this.previewSer.setPreviwExtendServerConfig(value);
        },
        enumerable: true,
        configurable: true
    });
    FFilePreviewAdaptUnifileDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fFilePreviewAdaptUnifile]',
                    providers: [FfilepreviewAdaptUnifileService]
                },] }
    ];
    /** @nocollapse */
    FFilePreviewAdaptUnifileDirective.ctorParameters = function () { return [
        { type: FfilepreviewAdaptUnifileService }
    ]; };
    FFilePreviewAdaptUnifileDirective.propDecorators = {
        filePreviewEventHandler: [{ type: HostListener, args: ['filePreviewEvent', ['$event'],] }],
        fileDownloadEventHandler: [{ type: HostListener, args: ['fileDownloadEvent', ['$event'],] }],
        extendServerConfig: [{ type: Input }]
    };
    return FFilePreviewAdaptUnifileDirective;
}());
if (false) {
    /**
     * 处理扩展的服务器端配置
     * @type {?}
     * @private
     */
    FFilePreviewAdaptUnifileDirective.prototype._extendServeConfig;
    /**
     * @type {?}
     * @private
     */
    FFilePreviewAdaptUnifileDirective.prototype.previewSer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffileupload-adapt-unifile.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FfileuploadAdaptUnifileModule = /** @class */ (function () {
    function FfileuploadAdaptUnifileModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    FfileuploadAdaptUnifileModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: FfileuploadAdaptUnifileModule,
            providers: [
                { provide: FFileUploadAdaptUnifileConfigToken, useValue: config },
                FFileUploadAdaptUnifileConfigService,
                FfilepreviewAdaptUnifileService,
                FileViewerService
            ]
        };
    };
    FfileuploadAdaptUnifileModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [FFilePreviewAdaptUnifileDirective, FfilepreviewAdaptSeeimgComponent, FFileAdaptDownloadFileDirective, FFileAdaptPreviewFileDirective],
                    imports: [
                        CommonModule,
                        UploadDialogMoudle,
                        FileListModule,
                        FFileUploadModule.forRoot(null, FfileuploadAdaptUnifileService)
                    ],
                    exports: [
                        FFileUploadModule,
                        FFilePreviewAdaptUnifileDirective,
                        FfilepreviewAdaptSeeimgComponent,
                        FFileAdaptDownloadFileDirective,
                        FFileAdaptPreviewFileDirective
                    ],
                    providers: [
                        FFileUploadAdaptUnifileConfigService,
                        FfilepreviewAdaptUnifileService,
                        FileViewerService
                    ]
                },] }
    ];
    return FfileuploadAdaptUnifileModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: farris-extend-fileupload-adapt-unifile.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FFileAdaptDownloadFileDirective, FFileAdaptPreviewFileDirective, FFilePreviewAdaptUnifileDirective, FFileUploadAdaptUnifileConfigService, FFileUploadAdaptUnifileConfigToken, FfilepreviewAdaptSeeimgComponent, FfilepreviewAdaptUnifileService, FfileuploadAdaptUnifileModule, FfileuploadAdaptUnifileService };
//# sourceMappingURL=farris-extend-fileupload-adapt-unifile.js.map
