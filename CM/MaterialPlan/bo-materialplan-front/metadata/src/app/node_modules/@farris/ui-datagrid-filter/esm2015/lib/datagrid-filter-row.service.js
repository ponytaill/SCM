/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
import { ColumnFilterType, DatagridUtils } from '@farris/ui-datagrid';
import { FilterOperator } from './operations/operators';
export class DatagridFilterRowService {
    constructor() {
        this.columnConditionSubject = new Subject();
        this.filterRowConditions$ = this.columnConditionSubject.asObservable();
        this.columnConditions = {};
        this.filterTextboxChanged = new EventEmitter();
        this.removeField = new EventEmitter();
    }
    /**
     * @param {?} frp
     * @return {?}
     */
    setFilterPanel(frp) {
        this.currentFilterPanel = frp;
    }
    /**
     * @return {?}
     */
    hasFilterPanel() {
        return !!this.currentFilterPanel;
    }
    /**
     * @return {?}
     */
    closeFilterPanel() {
        if (this.hasFilterPanel()) {
            if (this.currentFilterPanel.instance.documentClickHandle) {
                this.currentFilterPanel.instance.documentClickHandle();
            }
            document.body.removeChild(this.currentFilterPanel.location.nativeElement);
            this.currentFilterPanel.destroy();
            this.currentFilterPanel = null;
            document.body.style.overflow = 'auto';
        }
    }
    /**
     * @param {?=} emitEvent
     * @return {?}
     */
    clear(emitEvent = true) {
        this.columnConditions = {};
        if (emitEvent) {
            this.columnConditionSubject.next({});
        }
    }
    /**
     * @param {?} field
     * @param {?=} opts
     * @return {?}
     */
    removeFilterField(field, opts) {
        if (this.columnConditions) {
            delete this.columnConditions[field];
            if (!opts || (opts && opts.emitEvent)) {
                this.emitColumnConditionChanged(this.columnConditions);
            }
            this.removeField.emit(field);
        }
    }
    /**
     * @param {?} field
     * @param {?} colCondition
     * @return {?}
     */
    _updateColumnConditions(field, colCondition) {
        /** @type {?} */
        const currentCondition = this.columnConditions[field];
        if (!currentCondition) {
            this.columnConditions = Object.assign(this.columnConditions, { [field]: colCondition });
        }
        else {
            if (JSON.stringify(currentCondition) !== JSON.stringify(colCondition)) {
                this.columnConditions = Object.assign(this.columnConditions, { [field]: colCondition });
            }
        }
        // 值为 ‘’ ，则代表着不参与查询
        Object.keys(this.columnConditions).forEach((/**
         * @param {?} k
         * @return {?}
         */
        k => {
            if (!this.columnConditions[k]) {
                // delete this.columnConditions[k];
                this.columnConditions[k] = null;
            }
        }));
    }
    /**
     * @param {?} field
     * @param {?} colCondition
     * @return {?}
     */
    updateColumnConditions(field, colCondition) {
        this._updateColumnConditions(field, colCondition);
        this.emitColumnConditionChanged(this.columnConditions);
    }
    /**
     * @private
     * @param {?} conditions
     * @return {?}
     */
    emitColumnConditionChanged(conditions) {
        // const farr = this.gridInstance.remoteFilter ? this.convert2FilterArray(this.columnConditions) : this.columnConditions;
        this.columnConditionSubject.next(conditions);
    }
    // 获取过滤行显示文本
    /**
     * @param {?} column
     * @param {?} condition
     * @return {?}
     */
    condition2string(column, condition) {
        if (!condition || typeof condition === 'string') {
            return '';
        }
        /** @type {?} */
        const andText = this.gridInstance.localeService.getValue('datagrid.filter.and');
        /** @type {?} */
        const orText = this.gridInstance.localeService.getValue('datagrid.filter.or');
        /** @type {?} */
        const getRelationLabel = (/**
         * @param {?} r
         * @return {?}
         */
        (r) => {
            if (r === 'and') {
                return andText;
            }
            else if (r === 'or') {
                return orText;
            }
            else {
                return '';
            }
        });
        /** @type {?} */
        let filterPreViewString = '';
        if (column.filter.type === ColumnFilterType.fromdata) {
            filterPreViewString = `(${condition.value1.length})`;
            if (condition.value1) {
                filterPreViewString += ` ${condition.value1.join(',')}`;
            }
        }
        else if (column.filter.type === ColumnFilterType.enum) {
            /** @type {?} */
            const enumOpts = (/** @type {?} */ (this.getEnumOptions(column)));
            const { valueField, textField, data } = enumOpts;
            filterPreViewString = `(${condition.value1.length})`;
            if (condition.value1) {
                filterPreViewString += ` ${condition.value1.map((/**
                 * @param {?} v
                 * @return {?}
                 */
                v => {
                    /** @type {?} */
                    const enumItem = data.find((/**
                     * @param {?} d
                     * @return {?}
                     */
                    d => d[valueField] == v));
                    return enumItem[textField];
                })).join(',')}`;
            }
        }
        else {
            if (condition) {
                /** @type {?} */
                const operator1Label = this.getOperatorLabel(condition.operator1);
                if (!this.isEmpty(condition.value1)) {
                    filterPreViewString = `${operator1Label} ${condition.value1}`;
                    /** @type {?} */
                    const operator2Label = this.getOperatorLabel(condition.operator2);
                    if (!this.isEmpty(condition.value2)) {
                        filterPreViewString += ` ${getRelationLabel(condition.relation)} ${operator2Label} ${condition.value2}`;
                    }
                    else {
                        if (condition.operator2 !== undefined) {
                            /** @type {?} */
                            const op2 = parseInt('' + condition.operator2, 10);
                            if (op2 === FilterOperator.Empty || op2 === FilterOperator.NotEmpty) {
                                filterPreViewString += ` ${getRelationLabel(condition.relation)} ${operator2Label}`;
                            }
                        }
                    }
                }
                else {
                    /** @type {?} */
                    const op1 = parseInt('' + condition.operator1, 10);
                    if (op1 === FilterOperator.Empty || op1 === FilterOperator.NotEmpty) {
                        filterPreViewString = `${operator1Label}`;
                    }
                }
            }
        }
        return filterPreViewString;
    }
    /**
     * @private
     * @param {?} v
     * @return {?}
     */
    isEmpty(v) {
        return v === '' || v === undefined || v === null;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    getEnumOptions(column) {
        /** @type {?} */
        const colFilter = (/** @type {?} */ (column.filter));
        /** @type {?} */
        const datatype = colFilter.type;
        /** @type {?} */
        let enumSetting = null;
        if (datatype === ColumnFilterType.enum) {
            /** @type {?} */
            const fmt = (/** @type {?} */ (column.formatter));
            if (fmt) {
                enumSetting = fmt.options;
            }
            else {
                if (colFilter.options) {
                    enumSetting = colFilter.options;
                }
            }
        }
        else { // enum 数据源来自grid 数据列表
            // enum 数据源来自grid 数据列表
            /** @type {?} */
            const columnData = this.gridInstance.dfs.getData(true).map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return DatagridUtils.getValue(column.field, n);
            }));
            // 去除重复
            /** @type {?} */
            const enumData = Array.from(new Set(columnData)).map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return {
                    value: n, label: n
                };
            }));
            enumSetting = {
                valueField: 'value', textField: 'label', data: enumData, idField: 'value'
            };
        }
        return enumSetting;
    }
    // 获取操作符标签
    /**
     * @param {?} code
     * @return {?}
     */
    getOperatorLabel(code) {
        /** @type {?} */
        const strOper = FilterOperator[code];
        if (strOper) {
            /** @type {?} */
            const operName = strOper[0].toLowerCase() + strOper.substr(1);
            /** @type {?} */
            const key = `datagrid.filter.operators.${operName}`;
            return this.gridInstance.localeService.getValue(key);
        }
        return '';
    }
}
DatagridFilterRowService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DatagridFilterRowService.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridFilterRowService.prototype.columnConditionSubject;
    /** @type {?} */
    DatagridFilterRowService.prototype.filterRowConditions$;
    /** @type {?} */
    DatagridFilterRowService.prototype.columnConditions;
    /** @type {?} */
    DatagridFilterRowService.prototype.currentFilterPanel;
    /** @type {?} */
    DatagridFilterRowService.prototype.gridInstance;
    /** @type {?} */
    DatagridFilterRowService.prototype.filterTextboxChanged;
    /** @type {?} */
    DatagridFilterRowService.prototype.removeField;
}
//# sourceMappingURL=data:application/json;base64,