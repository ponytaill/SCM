/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Injector, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { LocaleService } from '@farris/ui-locale';
import { getMultilingualValue } from '../getValueWithLocaleId';
var SchemeListComponent = /** @class */ (function () {
    function SchemeListComponent(cd, localeSer, injector) {
        this.cd = cd;
        this.localeSer = localeSer;
        this.injector = injector;
        this.items = [];
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.removeItem = true;
        this.columns = [];
        this.currentUserId = '';
        this.changes = null;
    }
    /**
     * @return {?}
     */
    SchemeListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var colName = this.localeSer.getValue('datagrid-scheme.columns.name') || '名称';
        /** @type {?} */
        var colType = this.localeSer.getValue('datagrid-scheme.columns.type') || '属性';
        /** @type {?} */
        var colDefault = this.localeSer.getValue('datagrid-scheme.columns.isDefault') || '默认';
        /** @type {?} */
        var colCreator = this.localeSer.getValue('datagrid-scheme.columns.username') || '创建人';
        /** @type {?} */
        var colMgr = this.localeSer.getValue('datagrid-scheme.columns.mgr') || '管理';
        /** @type {?} */
        var publicTxt = this.localeSer.getValue('datagrid-scheme.isPublic') || '公共';
        /** @type {?} */
        var privateTxt = this.localeSer.getValue('datagrid-scheme.isPrivate') || '个人';
        /** @type {?} */
        var orgTxt = this.localeSer.getValue('datagrid-scheme.isOrg') || '组织';
        this.columns = [
            // {field: 'name', title: '名称', width: 150, template: this.schemeName},
            { field: 'name', title: colName, width: 150, formatter: (/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    return getMultilingualValue(JSON.parse(v), _this.localeSer.localeId);
                }) },
            { field: 'type', title: colType, width: 50, halign: 'center', align: 'center', formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @return {?}
                 */
                function (v, d) {
                    switch (v) {
                        case 'public':
                            return '<span class="scheme-manager__label px-1 public">' + publicTxt + '</span>';
                        case 'org':
                            return '<span class="scheme-manager__label px-1 org">' + orgTxt + '</span>';
                        case 'private':
                        default:
                            return '<span class="scheme-manager__label px-1 private">' + privateTxt + '</span>';
                    }
                }) },
            { field: 'isDefault', title: colDefault, width: 50, halign: 'center', align: 'center', template: this.schemeIsDefault },
            { field: 'userName', title: colCreator, width: 80 },
            { title: colMgr, width: 50, template: this.btnDel, halign: 'center', align: 'center', }
        ];
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SchemeListComponent.prototype.onClose = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.closeModal.emit();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SchemeListComponent.prototype.onSubmitClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.submitModal.emit(this.changes);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SchemeListComponent.prototype.onCancelClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.closeModal.emit();
    };
    /**
     * @param {?} $event
     * @param {?} ctx
     * @return {?}
     */
    SchemeListComponent.prototype.setDefault = /**
     * @param {?} $event
     * @param {?} ctx
     * @return {?}
     */
    function ($event, ctx) {
        /** @type {?} */
        var r = $event == '1';
        // $event.stopPropagation();
        this.items.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            n.isDefault = false;
            if (n.id === ctx.rowData.id && r) {
                n.isDefault = r;
            }
        }));
        this.items = tslib_1.__spread(this.items);
        /** @type {?} */
        var defaultItem = this.items.find((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.isDefault; }));
        if (defaultItem) {
            this.changes = this.changes || {};
            this.changes.defaultId = defaultItem.id;
        }
        // this.cd.detectChanges();
    };
    /**
     * @param {?} $event
     * @param {?} ctx
     * @return {?}
     */
    SchemeListComponent.prototype.onSchemeDel = /**
     * @param {?} $event
     * @param {?} ctx
     * @return {?}
     */
    function ($event, ctx) {
        if ((this.currentUserId === ctx.rowData["userId"] && ctx.rowData['type'] == 'private') || this.removeItem) {
            $event.stopPropagation();
            /** @type {?} */
            var id_1 = ctx.rowData.id;
            this.items = this.items.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.id !== id_1; }));
            this.changes = this.changes || {};
            this.changes.deletedIds = tslib_1.__spread((this.changes.deletedIds || []), [id_1]);
            if (id_1 === this.changes.defaultId) {
                this.changes.defaultId = '';
                delete this.changes.defaultId;
            }
        }
    };
    SchemeListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'scheme-list',
                    template: "\r\n<div class=\"f-datagrid-save-scheme d-flex flex-column\" style=\"height: 100%;\">\r\n    <div class=\"d-flex justify-content-between header\" #header >\r\n        <div class=\"title\">{{'datagrid-scheme.schemeList' | locale}}</div>\r\n        <div class=\"close\" style=\"margin-right: 20px;\">\r\n            <span class=\"f-icon modal_close\" (click)=\"onClose($event)\"></span>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-utils-fill mx-3 mt-1\" >\r\n        <farris-datagrid #dg\r\n            [columns]=\"columns\"\r\n            [data]=\"items\"\r\n            [fit]=\"true\"\r\n            [fitColumns]=\"true\"\r\n            [pagination]=\"false\"\r\n            [editable]=\"false\">\r\n        </farris-datagrid>\r\n    </div>\r\n\r\n    <div class=\"p-3 mb-3\" style=\"height: 50px;text-align: right;\">\r\n        <button class=\"btn btn-secondary cancel btn-lg mr-3\" style=\"width: 70px\"\r\n            (click)=\"onCancelClick($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n        <button class=\"btn btn-primary ok btn-lg\" style=\"width: 70px\"\r\n            (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #schemeName let-ctx>\r\n    <div class=\"input-group\">\r\n        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"ctx.rowData['name']\">\r\n    </div>\r\n</ng-template>\r\n<ng-template #schemeIsDefault let-ctx>\r\n    <div class=\"f-datagrid-cell-formgroup farris-group-auto f-datagrid_scheme-switch\" [style.opacity]=\"ctx.rowData['type'] !== 'private' ? 0.6: 1\" style=\"line-height:100%\" #ctrlbox hidefocus=\"true\">\r\n        <farris-switch [(ngModel)]=\"ctx.rowData['isDefault']\" trueValue=\"1\" falseValue=\"0\"\r\n        (valueChange)=\"setDefault($event, ctx)\"  [disabled]=\"ctx.rowData['type'] !== 'private' || ctx.rowData['isDefault']\"></farris-switch>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template let-ctx #btnDel>\r\n    <a href=\"javascript:void(0)\" (click)=\"onSchemeDel($event, ctx)\" title=\"{{'datagrid-scheme.delete' | locale}}\" *ngIf=\"removeItem || (ctx.rowData['userId'] === currentUserId && ctx.rowData['type']=='private')\">\r\n        <span class=\"f-icon f-icon-yxs_delete\"></span>\r\n    </a>\r\n</ng-template>"
                }] }
    ];
    /** @nocollapse */
    SchemeListComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: LocaleService },
        { type: Injector }
    ]; };
    SchemeListComponent.propDecorators = {
        items: [{ type: Input }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        removeItem: [{ type: Input }],
        header: [{ type: ViewChild, args: ['header',] }],
        schemeName: [{ type: ViewChild, args: ['schemeName',] }],
        schemeIsDefault: [{ type: ViewChild, args: ['schemeIsDefault',] }],
        btnDel: [{ type: ViewChild, args: ['btnDel',] }],
        dg: [{ type: ViewChild, args: ['dg',] }]
    };
    return SchemeListComponent;
}());
export { SchemeListComponent };
if (false) {
    /** @type {?} */
    SchemeListComponent.prototype.items;
    /** @type {?} */
    SchemeListComponent.prototype.closeModal;
    /** @type {?} */
    SchemeListComponent.prototype.submitModal;
    /** @type {?} */
    SchemeListComponent.prototype.removeItem;
    /** @type {?} */
    SchemeListComponent.prototype.header;
    /** @type {?} */
    SchemeListComponent.prototype.schemeName;
    /** @type {?} */
    SchemeListComponent.prototype.schemeIsDefault;
    /** @type {?} */
    SchemeListComponent.prototype.btnDel;
    /** @type {?} */
    SchemeListComponent.prototype.dg;
    /** @type {?} */
    SchemeListComponent.prototype.columns;
    /** @type {?} */
    SchemeListComponent.prototype.currentUserId;
    /**
     * @type {?}
     * @private
     */
    SchemeListComponent.prototype.changes;
    /**
     * @type {?}
     * @private
     */
    SchemeListComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    SchemeListComponent.prototype.localeSer;
    /**
     * @type {?}
     * @private
     */
    SchemeListComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1lLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC1zZXR0aW5ncy8iLCJzb3VyY2VzIjpbImxpYi9zY2hlbWUvc2NoZW1lLWxpc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEosT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRS9EO0lBNkJJLDZCQUFvQixFQUFxQixFQUFVLFNBQXdCLEVBQVUsUUFBa0I7UUFBbkYsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFlO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQXRCOUYsVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUVWLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2hDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVsQyxlQUFVLEdBQUcsSUFBSSxDQUFDO1FBUzNCLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFFYixrQkFBYSxHQUFHLEVBQUUsQ0FBQztRQUVYLFlBQU8sR0FHWCxJQUFJLENBQUM7SUFDa0csQ0FBQzs7OztJQUU1RyxzQ0FBUTs7O0lBQVI7UUFBQSxpQkFrQ0M7O1lBaENTLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyw4QkFBOEIsQ0FBQyxJQUFJLElBQUk7O1lBQ3pFLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FB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clJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEluamVjdG9yLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0YWdyaWRDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWRhdGFncmlkJztcclxuaW1wb3J0IHsgTG9jYWxlU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9jYWxlJztcclxuaW1wb3J0IHsgZ2V0TXVsdGlsaW5ndWFsVmFsdWUgfSBmcm9tICcuLi9nZXRWYWx1ZVdpdGhMb2NhbGVJZCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnc2NoZW1lLWxpc3QnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICdzY2hlbWUtbGlzdC5jb21wb25lbnQuaHRtbCdcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBTY2hlbWVMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgICBASW5wdXQoKSBpdGVtcyA9IFtdO1xyXG4gICAgXHJcbiAgICBAT3V0cHV0KCkgY2xvc2VNb2RhbCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBzdWJtaXRNb2RhbCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBASW5wdXQoKSByZW1vdmVJdGVtID0gdHJ1ZTtcclxuXHJcbiAgICBcclxuICAgIEBWaWV3Q2hpbGQoJ2hlYWRlcicpIGhlYWRlcjogRWxlbWVudFJlZjxhbnk+O1xyXG4gICAgQFZpZXdDaGlsZCgnc2NoZW1lTmFtZScpIHNjaGVtZU5hbWU6IFRlbXBsYXRlUmVmPGFueT47XHJcbiAgICBAVmlld0NoaWxkKCdzY2hlbWVJc0RlZmF1bHQnKSBzY2hlbWVJc0RlZmF1bHQ6IFRlbXBsYXRlUmVmPGFueT47XHJcbiAgICBAVmlld0NoaWxkKCdidG5EZWwnKSBidG5EZWw6IFRlbXBsYXRlUmVmPGFueT47XHJcbiAgICBAVmlld0NoaWxkKCdkZycpIGRnOiBEYXRhZ3JpZENvbXBvbmVudDtcclxuXHJcbiAgICBjb2x1bW5zID0gW107XHJcblxyXG4gICAgY3VycmVudFVzZXJJZCA9ICcnO1xyXG4gICBcclxuICAgIHByaXZhdGUgY2hhbmdlczoge1xyXG4gICAgICAgIGRlZmF1bHRJZD86IHN0cmluZyxcclxuICAgICAgICBkZWxldGVkSWRzPzogYW55W11cclxuICAgIH0gPSBudWxsO1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIHByaXZhdGUgbG9jYWxlU2VyOiBMb2NhbGVTZXJ2aWNlLCBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcikgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbE5hbWUgPSB0aGlzLmxvY2FsZVNlci5nZXRWYWx1ZSgnZGF0YWdyaWQtc2NoZW1lLmNvbHVtbnMubmFtZScpIHx8ICflkI3np7AnO1xyXG4gICAgICAgIGNvbnN0IGNvbFR5cGUgPSB0aGlzLmxvY2FsZVNlci5nZXRWYWx1ZSgnZGF0YWdyaWQtc2NoZW1lLmNvbHVtbnMudHlwZScpIHx8ICflsZ7mgKcnO1xyXG4gICAgICAgIGNvbnN0IGNvbERlZmF1bHQgPSB0aGlzLmxvY2FsZVNlci5nZXRWYWx1ZSgnZGF0YWdyaWQtc2NoZW1lLmNvbHVtbnMuaXNEZWZhdWx0JykgfHwgJ+m7mOiupCc7XHJcbiAgICAgICAgY29uc3QgY29sQ3JlYXRvciA9IHRoaXMubG9jYWxlU2VyLmdldFZhbHVlKCdkYXRhZ3JpZC1zY2hlbWUuY29sdW1ucy51c2VybmFtZScpIHx8ICfliJvlu7rkuronO1xyXG4gICAgICAgIGNvbnN0IGNvbE1nciA9IHRoaXMubG9jYWxlU2VyLmdldFZhbHVlKCdkYXRhZ3JpZC1zY2hlbWUuY29sdW1ucy5tZ3InKSB8fCAn566h55CGJztcclxuXHJcbiAgICAgICAgY29uc3QgcHVibGljVHh0ID0gdGhpcy5sb2NhbGVTZXIuZ2V0VmFsdWUoJ2RhdGFncmlkLXNjaGVtZS5pc1B1YmxpYycpIHx8ICflhazlhbEnO1xyXG4gICAgICAgIGNvbnN0IHByaXZhdGVUeHQgPSB0aGlzLmxvY2FsZVNlci5nZXRWYWx1ZSgnZGF0YWdyaWQtc2NoZW1lLmlzUHJpdmF0ZScpIHx8ICfkuKrkuronO1xyXG4gICAgICAgIGNvbnN0IG9yZ1R4dCA9IHRoaXMubG9jYWxlU2VyLmdldFZhbHVlKCdkYXRhZ3JpZC1zY2hlbWUuaXNPcmcnKSB8fCAn57uE57uHJztcclxuXHJcblxyXG4gICAgICAgIHRoaXMuY29sdW1ucyA9IFtcclxuICAgICAgICAgICAgLy8ge2ZpZWxkOiAnbmFtZScsIHRpdGxlOiAn5ZCN56ewJywgd2lkdGg6IDE1MCwgdGVtcGxhdGU6IHRoaXMuc2NoZW1lTmFtZX0sXHJcbiAgICAgICAgICAgIHtmaWVsZDogJ25hbWUnLCB0aXRsZTogY29sTmFtZSwgd2lkdGg6IDE1MCwgZm9ybWF0dGVyOiAodikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldE11bHRpbGluZ3VhbFZhbHVlKEpTT04ucGFyc2UodiksIHRoaXMubG9jYWxlU2VyLmxvY2FsZUlkKTtcclxuICAgICAgICAgICAgfX0sXHJcbiAgICAgICAgICAgIHtmaWVsZDogJ3R5cGUnLCB0aXRsZTogY29sVHlwZSwgd2lkdGg6IDUwLCBoYWxpZ246ICdjZW50ZXInLCBhbGlnbjogJ2NlbnRlcicsIGZvcm1hdHRlcjogKHYsIGQpID0+IHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCh2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncHVibGljJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8c3BhbiBjbGFzcz1cInNjaGVtZS1tYW5hZ2VyX19sYWJlbCBweC0xIHB1YmxpY1wiPicrIHB1YmxpY1R4dCArJzwvc3Bhbj4nO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ29yZyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnPHNwYW4gY2xhc3M9XCJzY2hlbWUtbWFuYWdlcl9fbGFiZWwgcHgtMSBvcmdcIj4nKyBvcmdUeHQgKyc8L3NwYW4+JztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdwcml2YXRlJzpcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxzcGFuIGNsYXNzPVwic2NoZW1lLW1hbmFnZXJfX2xhYmVsIHB4LTEgcHJpdmF0ZVwiPicrIHByaXZhdGVUeHQgKyc8L3NwYW4+JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfX0sXHJcbiAgICAgICAgICAgIHtmaWVsZDogJ2lzRGVmYXVsdCcsIHRpdGxlOiBjb2xEZWZhdWx0LCB3aWR0aDogNTAsIGhhbGlnbjogJ2NlbnRlcicsIGFsaWduOiAnY2VudGVyJywgdGVtcGxhdGU6IHRoaXMuc2NoZW1lSXNEZWZhdWx0IH0sXHJcbiAgICAgICAgICAgIHtmaWVsZDogJ3VzZXJOYW1lJywgdGl0bGU6IGNvbENyZWF0b3IsIHdpZHRoOiA4MH0sXHJcbiAgICAgICAgICAgIHt0aXRsZTogY29sTWdyLCB3aWR0aDogNTAsIHRlbXBsYXRlOiB0aGlzLmJ0bkRlbCwgaGFsaWduOiAnY2VudGVyJywgYWxpZ246ICdjZW50ZXInLH1cclxuICAgICAgICBdO1xyXG4gICAgXHJcbiAgICB9XHJcblxyXG4gICAgb25DbG9zZSgkZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmNsb3NlTW9kYWwuZW1pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uU3VibWl0Q2xpY2soJGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5zdWJtaXRNb2RhbC5lbWl0KCB0aGlzLmNoYW5nZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2FuY2VsQ2xpY2soJGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZU1vZGFsLmVtaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXREZWZhdWx0KCRldmVudDogYW55LCBjdHgpIHtcclxuICAgICAgICBjb25zdCByID0gJGV2ZW50ID09ICcxJztcclxuICAgICAgICAvLyAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICBuLmlzRGVmYXVsdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAobi5pZCA9PT0gY3R4LnJvd0RhdGEuaWQgJiYgcikge1xyXG4gICAgICAgICAgICAgICAgbi5pc0RlZmF1bHQgPSByO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuaXRlbXMgPSBbLi4udGhpcy5pdGVtc107XHJcblxyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRJdGVtID0gdGhpcy5pdGVtcy5maW5kKG4gPT4gbi5pc0RlZmF1bHQpO1xyXG4gICAgICAgIGlmIChkZWZhdWx0SXRlbSkge1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZXMgPSB0aGlzLmNoYW5nZXMgfHwge307XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlcy5kZWZhdWx0SWQgPSBkZWZhdWx0SXRlbS5pZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25TY2hlbWVEZWwoJGV2ZW50LCBjdHgpIHtcclxuICAgICAgICBpZiAoKHRoaXMuY3VycmVudFVzZXJJZCA9PT0gY3R4LnJvd0RhdGFbXCJ1c2VySWRcIl0gJiYgIGN0eC5yb3dEYXRhWyd0eXBlJ109PSdwcml2YXRlJykgfHwgdGhpcy5yZW1vdmVJdGVtKSB7XHJcbiAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgY29uc3QgaWQgPSBjdHgucm93RGF0YS5pZDtcclxuICAgICAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXMuZmlsdGVyKG4gPT4gbi5pZCAhPT0gaWQpO1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZXMgPSB0aGlzLmNoYW5nZXMgfHwge307XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlcy5kZWxldGVkSWRzID0gWy4uLih0aGlzLmNoYW5nZXMuZGVsZXRlZElkcyB8fCBbXSksIGlkXTtcclxuICAgICAgICAgICAgaWYgKGlkID09PSB0aGlzLmNoYW5nZXMuZGVmYXVsdElkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZXMuZGVmYXVsdElkID0gJyc7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5jaGFuZ2VzLmRlZmF1bHRJZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==