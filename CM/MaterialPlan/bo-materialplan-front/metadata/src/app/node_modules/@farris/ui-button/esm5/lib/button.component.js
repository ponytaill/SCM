/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output } from '@angular/core';
var FarrisButtonComponent = /** @class */ (function () {
    function FarrisButtonComponent() {
        this.size = 'small';
        this.type = 'primary';
        this.click = new EventEmitter();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    FarrisButtonComponent.prototype.clickEvent = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.stopPropagation();
        if (this.disabled) {
            return;
        }
        this.click.emit(e);
    };
    FarrisButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-button',
                    template: "\n    <button [class]=\"(size === 'large'?'btn-lg ':'btn-sm ')+\n    'btn '+ (type?'btn-'+type+' ':'')\"\n    [class.disabled]=\"disabled\" (click)=\"clickEvent($event)\">\n      <ng-content></ng-content>\n    </button>\n  "
                }] }
    ];
    /** @nocollapse */
    FarrisButtonComponent.ctorParameters = function () { return []; };
    FarrisButtonComponent.propDecorators = {
        text: [{ type: Input }],
        size: [{ type: Input }],
        type: [{ type: Input }],
        disabled: [{ type: Input }],
        click: [{ type: Output }]
    };
    return FarrisButtonComponent;
}());
export { FarrisButtonComponent };
if (false) {
    /** @type {?} */
    FarrisButtonComponent.prototype.text;
    /** @type {?} */
    FarrisButtonComponent.prototype.size;
    /** @type {?} */
    FarrisButtonComponent.prototype.type;
    /** @type {?} */
    FarrisButtonComponent.prototype.disabled;
    /** @type {?} */
    FarrisButtonComponent.prototype.click;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktYnV0dG9uLyIsInNvdXJjZXMiOlsibGliL2J1dHRvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkU7SUFtQkU7UUFOUyxTQUFJLEdBQUcsT0FBTyxDQUFDO1FBQ2YsU0FBSSxHQUFHLFNBQVMsQ0FBQztRQUdoQixVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQUUxQixDQUFDOzs7OztJQUVqQiwwQ0FBVTs7OztJQUFWLFVBQVcsQ0FBTTtRQUNmLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUNwQixJQUFHLElBQUksQ0FBQyxRQUFRLEVBQUM7WUFDZixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyQixDQUFDOztnQkEzQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixRQUFRLEVBQUUsaU9BTVQ7aUJBRUY7Ozs7O3VCQUVFLEtBQUs7dUJBQ0wsS0FBSzt1QkFDTCxLQUFLOzJCQUNMLEtBQUs7d0JBRUwsTUFBTTs7SUFXVCw0QkFBQztDQUFBLEFBNUJELElBNEJDO1NBakJZLHFCQUFxQjs7O0lBQ2hDLHFDQUFzQjs7SUFDdEIscUNBQXdCOztJQUN4QixxQ0FBMEI7O0lBQzFCLHlDQUEyQjs7SUFFM0Isc0NBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZmFycmlzLWJ1dHRvbicsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxidXR0b24gW2NsYXNzXT1cIihzaXplID09PSAnbGFyZ2UnPydidG4tbGcgJzonYnRuLXNtICcpK1xyXG4gICAgJ2J0biAnKyAodHlwZT8nYnRuLScrdHlwZSsnICc6JycpXCJcclxuICAgIFtjbGFzcy5kaXNhYmxlZF09XCJkaXNhYmxlZFwiIChjbGljayk9XCJjbGlja0V2ZW50KCRldmVudClcIj5cclxuICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG4gICAgPC9idXR0b24+XHJcbiAgYCxcclxuICBzdHlsZXM6IFtdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYXJyaXNCdXR0b25Db21wb25lbnQge1xyXG4gIEBJbnB1dCgpIHRleHQ6IHN0cmluZztcclxuICBASW5wdXQoKSBzaXplID0gJ3NtYWxsJztcclxuICBASW5wdXQoKSB0eXBlID0gJ3ByaW1hcnknO1xyXG4gIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuO1xyXG5cclxuICBAT3V0cHV0KCkgY2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgY2xpY2tFdmVudChlOiBhbnkpIHtcclxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICBpZih0aGlzLmRpc2FibGVkKXtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jbGljay5lbWl0KGUpO1xyXG4gIH1cclxufVxyXG4iXX0=