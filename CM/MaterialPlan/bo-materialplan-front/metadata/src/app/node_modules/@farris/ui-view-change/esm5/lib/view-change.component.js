/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef, ViewChild, Renderer2, ViewEncapsulation } from '@angular/core';
import { ViewChangeService } from './view-change.service';
var ViewChangeComponent = /** @class */ (function () {
    function ViewChangeComponent(_renderer, viewChangeService) {
        this._renderer = _renderer;
        this.viewChangeService = viewChangeService;
        this.viewType = 'tile';
        this.viewGroupId = 'default';
        this.toolTypeChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.toolbarData && this.toolbarData.length) {
            if (this.defaultType) {
                /** @type {?} */
                var item = this.toolbarData.find((/**
                 * @param {?} bar
                 * @return {?}
                 */
                function (bar) {
                    return bar['type'] === _this.defaultType;
                }));
                this.activeTypeItem = item;
                this.toolTypeChange.emit(this.activeTypeItem);
            }
            else {
                this.activeTypeItem = this.toolbarData[0];
                this.toolTypeChange.emit(this.activeTypeItem);
            }
        }
    };
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!this.viewChangeService) {
            this.viewChangeService = new ViewChangeService();
        }
        this.viewChangeService.updateCurrentViewId(this.activeTypeItem['type'], this.viewGroupId);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ViewChangeComponent.prototype.listItemClick = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item.disable || this.activeTypeItem['type'] === item['type']) {
            return;
        }
        this.activeTypeItem = item;
        if (!this.viewChangeService) {
            this.viewChangeService = new ViewChangeService();
        }
        this.viewChangeService.updateCurrentViewId(this.activeTypeItem['type'], this.viewGroupId);
        this.toolTypeChange.emit(item);
        if (this.typelist) {
            this._renderer.setStyle(this.typelist.nativeElement, 'display', 'none');
        }
    };
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.dropdownMouseEnter = /**
     * @return {?}
     */
    function () {
        this._renderer.setStyle(this.typelist.nativeElement, 'display', 'block');
    };
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.dropdownMouseLeave = /**
     * @return {?}
     */
    function () {
        this._renderer.setStyle(this.typelist.nativeElement, 'display', 'none');
    };
    ViewChangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-view-change',
                    template: "<div class=\"f-view-change\">\r\n    <div class=\"f-view-change-tile\" *ngIf=\"viewType === 'tile'; else dropdown\">\r\n        <div class=\"f-view-change-tile-btn\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'tile-btn-active': item.type === activeTypeItem.type,'tile-btn-disable': item.disable}\" (click)=\"listItemClick(item)\" [title]=\"item.title\">\r\n            <span class=\"tile-btn-icon {{item.iconName}}\"></span>\r\n        </div>\r\n    </div>\r\n    <ng-template #dropdown>\r\n        <div class=\"f-view-change-dropdown\" \r\n        (mouseenter)=\"dropdownMouseEnter()\"\r\n        (mouseleave)=\"dropdownMouseLeave()\"> \r\n            <div class=\"f-view-change-toggle\" *ngIf=\"this.toolbarData.length\">\r\n                <span class=\"toggle-btn-icon {{activeTypeItem.iconName}}\"></span>\r\n            </div>\r\n            <div class=\"f-view-change-typelist\" #typelist>\r\n                <div class=\"f-view-change-typelist-content\">\r\n                    <div class=\"f-view-change-typelist-arrow\"></div>\r\n                    <ul class=\"f-view-change-typelist-list\">\r\n                        <li class=\"typelist-item\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'typelist-item-active': item.type === activeTypeItem.type,'typelist-item-disable': item.disable}\" (click)=\"listItemClick(item)\">\r\n                                <span class=\"typelist-item-icon {{item.iconName}}\"></span>\r\n                                <span class=\"typelist-item-title\">{{item.title}}</span>\r\n                            </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <!-- <ul class=\"f-view-change-typelist\" #typelist>\r\n                <li class=\"f-view-change-typelist-arrow\"></li>\r\n                <li class=\"typelist-item\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'typelist-item-active': item.type === activeTypeItem.type,'typelist-item-disable': item.disable}\" (click)=\"listItemClick(item)\">\r\n                    <span class=\"typelist-item-icon {{item.iconName}}\"></span>\r\n                    <span class=\"typelist-item-title\">{{item.title}}</span>\r\n                </li>\r\n            </ul> -->\r\n        </div>\r\n    </ng-template>\r\n</div>",
                    encapsulation: ViewEncapsulation.None
                    // providers:[ ViewChangeService ]
                    ,
                    styles: [".f-viewchange-view-none{display:none!important}"]
                }] }
    ];
    /** @nocollapse */
    ViewChangeComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ViewChangeService }
    ]; };
    ViewChangeComponent.propDecorators = {
        toolbarData: [{ type: Input }],
        viewType: [{ type: Input }],
        defaultType: [{ type: Input }],
        viewGroupId: [{ type: Input }],
        toolTypeChange: [{ type: Output }],
        typelist: [{ type: ViewChild, args: ['typelist',] }]
    };
    return ViewChangeComponent;
}());
export { ViewChangeComponent };
if (false) {
    /** @type {?} */
    ViewChangeComponent.prototype.toolbarData;
    /** @type {?} */
    ViewChangeComponent.prototype.viewType;
    /** @type {?} */
    ViewChangeComponent.prototype.defaultType;
    /** @type {?} */
    ViewChangeComponent.prototype.viewGroupId;
    /** @type {?} */
    ViewChangeComponent.prototype.activeTypeItem;
    /** @type {?} */
    ViewChangeComponent.prototype.toolTypeChange;
    /** @type {?} */
    ViewChangeComponent.prototype.typelist;
    /**
     * @type {?}
     * @private
     */
    ViewChangeComponent.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    ViewChangeComponent.prototype.viewChangeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy1jaGFuZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS12aWV3LWNoYW5nZS8iLCJzb3VyY2VzIjpbImxpYi92aWV3LWNoYW5nZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQWlCLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25KLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTFEO0lBbUJFLDZCQUFvQixTQUFvQixFQUM5QixpQkFBb0M7UUFEMUIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUM5QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBVnJDLGFBQVEsR0FBVyxNQUFNLENBQUM7UUFFMUIsZ0JBQVcsR0FBVSxTQUFTLENBQUM7UUFHOUIsbUJBQWMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBS0ksQ0FBQzs7OztJQUVuRCxzQ0FBUTs7O0lBQVI7UUFBQSxpQkFnQkM7UUFmQyxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDL0MsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFOztvQkFDaEIsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSTs7OztnQkFBQyxVQUFDLEdBQUc7b0JBQ25DLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUksQ0FBQyxXQUFXLENBQUM7Z0JBQzFDLENBQUMsRUFBQztnQkFDRixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztnQkFDM0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2FBQy9DO2lCQUNJO2dCQUNILElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDMUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2FBQy9DO1NBR0Y7SUFDSCxDQUFDOzs7O0lBQ0QsNkNBQWU7OztJQUFmO1FBQ0UsSUFBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBQztZQUN6QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO1NBQ2xEO1FBQ0QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzNGLENBQUM7Ozs7O0lBRUQsMkNBQWE7Ozs7SUFBYixVQUFjLElBQUk7UUFDaEIsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2hFLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUM7WUFDekIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQztTQUNsRDtRQUNELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxFQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN6RixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUMzQixTQUFTLEVBQ1QsTUFBTSxDQUNQLENBQUM7U0FDSDtJQUNILENBQUM7Ozs7SUFFRCxnREFBa0I7OztJQUFsQjtRQUNFLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFDM0IsU0FBUyxFQUNULE9BQU8sQ0FDUixDQUFDO0lBQ0osQ0FBQzs7OztJQUNELGdEQUFrQjs7O0lBQWxCO1FBQ0UsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUMzQixTQUFTLEVBQ1QsTUFBTSxDQUNQLENBQUM7SUFDSixDQUFDOztnQkE5RUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLDZ1RUFBMkM7b0JBRTNDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxrQ0FBa0M7OztpQkFDbkM7Ozs7Z0JBVCtFLFNBQVM7Z0JBQ2hGLGlCQUFpQjs7OzhCQVd2QixLQUFLOzJCQUNMLEtBQUs7OEJBQ0wsS0FBSzs4QkFDTCxLQUFLO2lDQUdMLE1BQU07MkJBRU4sU0FBUyxTQUFDLFVBQVU7O0lBK0R2QiwwQkFBQztDQUFBLEFBaEZELElBZ0ZDO1NBekVZLG1CQUFtQjs7O0lBRTlCLDBDQUFxQjs7SUFDckIsdUNBQW1DOztJQUNuQywwQ0FBNkI7O0lBQzdCLDBDQUF3Qzs7SUFDeEMsNkNBQWU7O0lBRWYsNkNBQThDOztJQUU5Qyx1Q0FBNEM7Ozs7O0lBRWhDLHdDQUE0Qjs7Ozs7SUFDdEMsZ0RBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgVmlld0NoaWxkLCBSZW5kZXJlcjIsIEFmdGVyVmlld0luaXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFZpZXdDaGFuZ2VTZXJ2aWNlIH0gZnJvbSAnLi92aWV3LWNoYW5nZS5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZmFycmlzLXZpZXctY2hhbmdlJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vdmlldy1jaGFuZ2UuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3ZpZXctY2hhbmdlLmNvbXBvbmVudC5zY3NzJ10sXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxyXG4gIC8vIHByb3ZpZGVyczpbIFZpZXdDaGFuZ2VTZXJ2aWNlIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIFZpZXdDaGFuZ2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQgLEFmdGVyVmlld0luaXR7XHJcblxyXG4gIEBJbnB1dCgpIHRvb2xiYXJEYXRhO1xyXG4gIEBJbnB1dCgpIHZpZXdUeXBlOiBzdHJpbmcgPSAndGlsZSc7XHJcbiAgQElucHV0KCkgZGVmYXVsdFR5cGU6IHN0cmluZztcclxuICBASW5wdXQoKSB2aWV3R3JvdXBJZDpzdHJpbmcgPSAnZGVmYXVsdCc7XHJcbiAgYWN0aXZlVHlwZUl0ZW07XHJcblxyXG4gIEBPdXRwdXQoKSB0b29sVHlwZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgQFZpZXdDaGlsZCgndHlwZWxpc3QnKSB0eXBlbGlzdDogRWxlbWVudFJlZjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMixcclxuICAgIHByaXZhdGUgdmlld0NoYW5nZVNlcnZpY2U6IFZpZXdDaGFuZ2VTZXJ2aWNlKSB7IH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBpZiAodGhpcy50b29sYmFyRGF0YSAmJiB0aGlzLnRvb2xiYXJEYXRhLmxlbmd0aCkge1xyXG4gICAgICBpZiAodGhpcy5kZWZhdWx0VHlwZSkge1xyXG4gICAgICAgIGxldCBpdGVtID0gdGhpcy50b29sYmFyRGF0YS5maW5kKChiYXIpID0+IHtcclxuICAgICAgICAgIHJldHVybiBiYXJbJ3R5cGUnXSA9PT0gdGhpcy5kZWZhdWx0VHlwZTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIHRoaXMuYWN0aXZlVHlwZUl0ZW0gPSBpdGVtO1xyXG4gICAgICAgIHRoaXMudG9vbFR5cGVDaGFuZ2UuZW1pdCh0aGlzLmFjdGl2ZVR5cGVJdGVtKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLmFjdGl2ZVR5cGVJdGVtID0gdGhpcy50b29sYmFyRGF0YVswXTtcclxuICAgICAgICB0aGlzLnRvb2xUeXBlQ2hhbmdlLmVtaXQodGhpcy5hY3RpdmVUeXBlSXRlbSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIFxyXG4gICAgfVxyXG4gIH1cclxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICBpZighdGhpcy52aWV3Q2hhbmdlU2VydmljZSl7XHJcbiAgICAgIHRoaXMudmlld0NoYW5nZVNlcnZpY2UgPSBuZXcgVmlld0NoYW5nZVNlcnZpY2UoKTtcclxuICAgIH1cclxuICAgIHRoaXMudmlld0NoYW5nZVNlcnZpY2UudXBkYXRlQ3VycmVudFZpZXdJZCh0aGlzLmFjdGl2ZVR5cGVJdGVtWyd0eXBlJ10sdGhpcy52aWV3R3JvdXBJZCk7XHJcbiAgfVxyXG5cclxuICBsaXN0SXRlbUNsaWNrKGl0ZW0pIHtcclxuICAgIGlmIChpdGVtLmRpc2FibGUgfHwgdGhpcy5hY3RpdmVUeXBlSXRlbVsndHlwZSddID09PSBpdGVtWyd0eXBlJ10pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hY3RpdmVUeXBlSXRlbSA9IGl0ZW07XHJcbiAgICBpZighdGhpcy52aWV3Q2hhbmdlU2VydmljZSl7XHJcbiAgICAgIHRoaXMudmlld0NoYW5nZVNlcnZpY2UgPSBuZXcgVmlld0NoYW5nZVNlcnZpY2UoKTtcclxuICAgIH1cclxuICAgIHRoaXMudmlld0NoYW5nZVNlcnZpY2UudXBkYXRlQ3VycmVudFZpZXdJZCh0aGlzLmFjdGl2ZVR5cGVJdGVtWyd0eXBlJ10sdGhpcy52aWV3R3JvdXBJZCk7XHJcbiAgICB0aGlzLnRvb2xUeXBlQ2hhbmdlLmVtaXQoaXRlbSk7XHJcbiAgICBpZiAodGhpcy50eXBlbGlzdCkge1xyXG4gICAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZShcclxuICAgICAgICB0aGlzLnR5cGVsaXN0Lm5hdGl2ZUVsZW1lbnQsXHJcbiAgICAgICAgJ2Rpc3BsYXknLFxyXG4gICAgICAgICdub25lJ1xyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZHJvcGRvd25Nb3VzZUVudGVyKCkge1xyXG4gICAgdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUoXHJcbiAgICAgIHRoaXMudHlwZWxpc3QubmF0aXZlRWxlbWVudCxcclxuICAgICAgJ2Rpc3BsYXknLFxyXG4gICAgICAnYmxvY2snXHJcbiAgICApO1xyXG4gIH1cclxuICBkcm9wZG93bk1vdXNlTGVhdmUoKSB7XHJcbiAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZShcclxuICAgICAgdGhpcy50eXBlbGlzdC5uYXRpdmVFbGVtZW50LFxyXG4gICAgICAnZGlzcGxheScsXHJcbiAgICAgICdub25lJ1xyXG4gICAgKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==