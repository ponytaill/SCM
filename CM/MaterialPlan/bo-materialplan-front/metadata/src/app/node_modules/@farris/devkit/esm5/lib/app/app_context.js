import * as tslib_1 from "tslib";
/**
 * 应用上下文
 * @author Witt<jiwt@inspur.com>
 * @todo
 * 1、parnet和AppContextManager是否必要？按理说就是应该隔离上下文，表单之间通过事件通讯进行交互；
 */
import { Injectable, Injector, Optional, SkipSelf } from '@angular/core';
import { Router } from '@angular/router';
import { Context } from '../context/index';
import { BindingData, BindingDataFactory } from '../binding-data';
import { FrameContextManager } from './frame_contex_manager';
import { FrameComponentRefresher } from './frame_component_refresher';
import { RepositoryManager } from './repository_mananger';
import { BindingDataManager } from './binding_data_manager';
import { ChangeDetectionController } from './change_detection_controller';
import { AppContextManager } from './app_context_manager';
import { Subject } from 'rxjs';
import { ComponentManager } from './component_manager';
import { UID } from '../misc/uid';
import { FORM_ID } from './tokens';
import { ContextMetadataBuilder } from './app_metadata_collector';
import { StateMachine } from '../state-machine';
import { CommandVariableParser, DataVariableParser, FrameIdVariableParser, StateMachineVariableParser, UIStateVariableParser, VariableParseService } from '../variable';
import { ViewModelManager } from './view_model_manager';
import { Repository } from '../repository';
import { UIState } from '../ui-state';
import { ContextMetadataManager } from './render_context_metadata_manager';
import { Form } from '../form';
import { ViewModel } from '../view-model';
import { FrameContext } from '../frame/frame_context';
import { NAMESPACE, FRAME_ID } from '../frame/tokens';
import { DEVKIT_RUN_MODE, RunMode } from '../core';
import { RunModeService } from '../misc/run_mode_service';
var AppContext = /** @class */ (function (_super) {
    tslib_1.__extends(AppContext, _super);
    /**
     * 构造函数
     */
    function AppContext(injector, appContextManager, parent) {
        var _this = _super.call(this) || this;
        _this.typeName = 'AppContext';
        /**
         * 是否已经销毁
         */
        _this.isFormDestoryed = false;
        /**
         * 应用程序标识
         */
        _this.applicationId = null;
        _this.token = null;
        /**
         * 是否使用独立的eventBus
         * @memberof AppContext
         */
        _this.useIsoluteEventBus = false;
        /**
         * 应用上下文元数据描述
         */
        _this.metadata = {};
        _this.disposed = false;
        _this.destorySignal = new Subject();
        _this.injector = injector;
        _this.appContextManager = appContextManager;
        _this.formId = _this.injector && _this.injector.get(FORM_ID, null) || null;
        // 默认运行模式为兼容模式
        _this.runMode = _this.injector && _this.injector.get(DEVKIT_RUN_MODE, RunMode.compatible) || RunMode.compatible;
        RunModeService.setRunMode(_this.runMode);
        _this.params.set('formId', _this.formId);
        _this.params.set('appId', _this.ApplicationId);
        _this.params.set('token', _this.Token);
        // 确定父子关系
        if (!parent) {
            _this.parent = null;
            _this.root = _this;
        }
        else {
            _this.parent = parent;
            _this.root = parent.root;
        }
        _this.registerToManager();
        _this.frameContextManager = new FrameContextManager(_this);
        _this.frameComponentRefresher = new FrameComponentRefresher();
        _this.repositoryManager = new RepositoryManager();
        _this.bindingDataManager = new BindingDataManager();
        _this.changeDetectionController = new ChangeDetectionController(_this.frameContextManager);
        _this.messagePipe = new Subject();
        _this.componentRefs = new Map();
        _this.componentManager = new ComponentManager(_this);
        _this.contextMetadataManager = new ContextMetadataManager();
        _this.opened = false;
        // this.sortConditionManager = new SortConditionManager();
        // this.filterConditionManager = new FilterConditionManager();
        _this.router = _this.injector && _this.injector.get(Router);
        _this.viewModelManager = new ViewModelManager();
        _this.contextMetadataBuilder = new ContextMetadataBuilder();
        _this.variableParseService = new VariableParseService([
            new FrameIdVariableParser(),
            new DataVariableParser(),
            new UIStateVariableParser(),
            new StateMachineVariableParser(),
            new CommandVariableParser()
        ]);
        return _this;
    }
    Object.defineProperty(AppContext.prototype, "frameContexts", {
        /**
         * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。
         * @deprecated
         * @summary
         * 已经有运行时直接用中括号访问该属性的场景，虽然是private，但要进行兼容。
         */
        get: function () {
            return this.frameContextManager.getFrameContextMap();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppContext.prototype, "formModule", {
        get: function () {
            return this.formMetadataContent ? this.formMetadataContent.module : null;
        },
        enumerable: true,
        configurable: true
    });
    AppContext.prototype.dispose = function (options) {
        if (this.disposed) {
            return;
        }
        this.isFormDestoryed = true;
        this.disposed = true;
        this.router = null;
        this.unregisterFromManager();
        this.componentRefs.clear();
        if (this.stateMachine) {
            this.stateMachine.dispose();
            this.stateMachine = null;
        }
        this.frameComponentRefresher.dispose();
        this.frameContextManager.dispose();
        this.repositoryManager.dispose();
        this.viewModelManager.dispose();
        this.bindingDataManager.dispose();
        if (this.messagePipe) {
            this.messagePipe.complete();
            this.messagePipe = null;
        }
        this.injector = null;
        if (this.destorySignal) {
            this.destorySignal.next();
            this.destorySignal.complete();
        }
    };
    AppContext.prototype.ngOnDestroy = function () {
        this.dispose();
    };
    /**
     * 由表单元数据、状态机元数据、前端构件元数据初始化解析型应用上下文
     * @param formMetadataContent 表单元数据
     * @param stateMachineMetadata 状态机元数据
     * @param controllers 前端构件元数据
     */
    AppContext.prototype.initializeByMetadata = function (formMetadataContent, stateMachineMetadata, controllers, options) {
        this.metadata = this.contextMetadataBuilder.buildAppContextMetadata(formMetadataContent, stateMachineMetadata);
        if (!this.stateMachine) {
            // 避免由于组合表单，获取到父级状态机实例的问题
            // this.stateMachine = this.injector.get(StateMachine, new StateMachine());
            this.stateMachine = new StateMachine();
        }
        this.formMetadataContent = formMetadataContent;
        this.controllers = controllers;
        this.dynamicOptions = options;
    };
    /**
     * Register current AppContext instance to AppContextManager
     */
    AppContext.prototype.registerToManager = function () {
        if (!this.appContextManager) {
            return;
        }
        this.appContextManager.registerAppContext(this);
    };
    /**
     * Unregister current AppContext instance from AppContextManager
     */
    AppContext.prototype.unregisterFromManager = function () {
        if (!this.appContextManager) {
            return;
        }
        this.appContextManager.unregisterAppContext(this);
    };
    /**
     * 注册FrameContext
     */
    AppContext.prototype.regFrameContext = function (frameContext) {
        var repository = frameContext.repository;
        var repositoryName = repository.name;
        // Repository
        if (this.repositoryManager.ifRepositoryExits(repositoryName) === false) {
            this.repositoryManager.regRepository(repositoryName, repository);
        }
        // BindingData
        if (this.bindingDataManager.ifBindingDataExits(repositoryName) === false) {
            var bindingData = null;
            // 仅高速模式下使用bindingDataManager
            if (this.runMode === RunMode.highSpeed) {
                bindingData = BindingDataFactory.createFromRepository(repository, '/');
                this.bindingDataManager.regBindingData(repositoryName, bindingData);
            }
        }
        // 考虑路由再次进入的时候，AppContext没有被注销，但Component被再次构造的场景
        this.frameContextManager.regFrameContext(frameContext);
    };
    AppContext.prototype.regContextMetadata = function (componentId, contextMetadata) {
        if (!this.contextMetadataManager.exsit(componentId)) {
            this.contextMetadataManager.register(componentId, contextMetadata);
        }
    };
    /**
     * 获取整个表单的AppContext
     */
    AppContext.prototype.getFormAppContext = function () {
        return this;
    };
    /**
     * 销毁表单
     * @todo: 临时解决表单关闭后对象没有销毁亦获取不到销毁时机的问题,应依赖angular本身的销毁机制
     */
    AppContext.prototype.destory = function () {
        this.dispose();
    };
    Object.defineProperty(AppContext.prototype, "isDestoryed", {
        get: function () {
            return this.isFormDestoryed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppContext.prototype, "ApplicationId", {
        /**
         * 应用id
         */
        get: function () {
            if (!!this.applicationId) {
                return this.applicationId;
            }
            this.applicationId = UID.create();
            return this.applicationId;
        },
        set: function (appId) {
            this.applicationId = appId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppContext.prototype, "Token", {
        get: function () {
            if (!!this.token) {
                return this.token;
            }
            this.token = UID.create();
            return this.token;
        },
        set: function (token) {
            this.token = token;
        },
        enumerable: true,
        configurable: true
    });
    // #region 弃用的老方法
    /**
     * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。
     * @deprecated
     */
    AppContext.prototype.registerCommandHandler = function (frameId, component) {
        this.frameComponentRefresher.regFrameComponent(frameId, component);
    };
    /**
     * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。
     * @deprecated
     */
    AppContext.prototype.refresh = function () {
        this.frameComponentRefresher.refreshComponents();
    };
    /**
     * 已废弃：请使用FrameContextManager的getFrameContextById方法代替。
     * @deprecated
     */
    AppContext.prototype.getFrameContext = function (frameId) {
        return this.frameContextManager.getFrameContextById(frameId);
    };
    AppContext.prototype.getContextById = function (identify) {
        var context = this.frameContextManager.getFrameContextById(identify);
        return context;
    };
    /**
     * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。
     * @deprecated
     */
    AppContext.prototype.getAllFrameContexts = function () {
        return this.frameContextManager.getFrameContextMap();
    };
    /**
     * 处理行变更
     */
    AppContext.prototype.handleSelectChange = function (change, srcFrameContext) {
        var force = change.force || false;
        this.frameContexts.forEach(function (targetFrameContext) {
            // 相同的FrameCotnext或者Repository不一致的情况下，不同步
            if (targetFrameContext === srcFrameContext
                || targetFrameContext.repository !== srcFrameContext.repository) {
                return;
            }
            var bindingData = targetFrameContext.bindingData;
            var bindingList = bindingData.getValue(change.path);
            var currentId = change.value['id'];
            if (bindingList && bindingList.currentId !== currentId || force) {
                // 设置当前行，但不对外广播
                bindingList.setCurrentId(currentId, true, false, force);
            }
        });
    };
    // #endregion
    AppContext.prototype.buildRenderViewContext = function (componentId) {
        // 提取视图模型集合
        var viewModels = this.formModule.viewmodels;
        // 提取组件描述集合
        var viewComponents = this.formModule.components;
        // 提取schema节点
        var schema = this.formModule.schemas[0];
        // 查找匹配指定标识的组件节点
        var matchedComponent = viewComponents.find(function (component) { return component.id === componentId; });
        // 匹配指定组件的视图模型节点
        var matchedViewModel = viewModels.find(function (viewModel) { return matchedComponent.viewModel === viewModel.id; });
        // 查找匹配视图模型的父节点
        var parentViewModel = viewModels.find(function (viewModel) { return viewModel.id === matchedViewModel.parent; });
        var parentComponentId = '';
        // 如果匹配上上级视图模型，提上级视图标识
        if (parentViewModel) {
            var parentComponent = viewComponents.find(function (component) { return component.viewModel === parentViewModel.id; });
            if (parentComponent) {
                parentComponentId = parentComponent.id;
            }
        }
        // 如果存在上级组件，提取器上下文对象。
        // const parentViewContext = parentComponentId ? this.getContextById(parentComponentId) : null;
        // this.buildRenderViewContextRecursively(matchedViewModel, parentViewContext, schema);
        this.buildRenderViewContextRecursively(matchedViewModel, schema);
    };
    AppContext.prototype.buildRenderViewContextRecursively = function (viewModel, schema) {
        var _this = this;
        var controllers = this.controllers;
        var viewComponents = this.formModule.components;
        var matchedComponent = viewComponents.find(function (component) { return component.viewModel === viewModel.id; });
        var contextMetadata = this.contextMetadataBuilder.buildViewContextMetadata(matchedComponent, viewModel, schema, controllers, this.dynamicOptions);
        // const commandHandlers: CommandHandler[] = this.buildCommandHandlers(viewModel.commands, controllers);
        // const commandHandlerExtends: CommandHandlerExtender[] = [];
        // const viewContext = new ViewComponentContext();
        //   contextMetadata,
        //   this,
        //   parent,
        //   this.injector
        // );
        // this.regFrameContext(viewContext);
        // viewContext.init();
        var contextMetadataId = (this.namespace ? (this.namespace + '_') : '') + matchedComponent.id;
        contextMetadata.namespace = this.namespace || '';
        this.regContextMetadata(contextMetadataId, contextMetadata);
        var viewModels = this.formModule.viewmodels;
        var subViewModels = viewModels.filter(function (subViewModel) { return subViewModel.parent === viewModel.id; });
        if (subViewModels && subViewModels.length) {
            subViewModels.forEach(function (subViewModel) {
                _this.buildRenderViewContextRecursively(subViewModel, schema);
            });
        }
    };
    AppContext.prototype.getComponentProviders = function (componentId) {
        var contextMetadata = this.contextMetadataManager.getContextMetadataByName(componentId);
        var bindingData = new BindingData();
        var form = new Form();
        var namespace = contextMetadata.namespace;
        var repository = this.repository || this.injector.get(Repository, null);
        var stateMachine = this.stateMachine;
        var uiState = new UIState();
        var viewModel = new ViewModel();
        viewModel.setMetadata(contextMetadata);
        return [
            { provide: FRAME_ID, useValue: componentId },
            { provide: NAMESPACE, useValue: namespace },
            { provide: FrameContext, useClass: FrameContext },
            { provide: AppContext, useValue: this },
            { provide: BindingData, useValue: bindingData },
            { provide: Form, useValue: form },
            { provide: Repository, useValue: repository },
            { provide: StateMachine, useValue: stateMachine },
            { provide: UIState, useValue: uiState },
            { provide: ViewModel, useValue: viewModel },
            {
                provide: VariableParseService, useValue: new VariableParseService([
                    new FrameIdVariableParser(),
                    new DataVariableParser(),
                    new UIStateVariableParser(),
                    new StateMachineVariableParser(),
                    new CommandVariableParser()
                ])
            }
        ];
    };
    AppContext.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AppContext.ctorParameters = function () { return [
        { type: Injector, decorators: [{ type: Optional }] },
        { type: AppContextManager, decorators: [{ type: Optional }] },
        { type: AppContext, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    return AppContext;
}(Context));
export { AppContext };
//# sourceMappingURL=data:application/json;base64,