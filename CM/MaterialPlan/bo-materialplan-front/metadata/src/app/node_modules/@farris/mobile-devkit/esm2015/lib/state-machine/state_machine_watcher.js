/**
 * 状态机事件，监听uistate的变化和entity的变化
 */
export class StateMachineWatcher {
    constructor(stateMachine) {
        this.stateMachine = stateMachine;
        /**
         * 所有UIStatePath数组
         */
        this.uiStatePathList = [];
        /**
         * 所有DataStatePath数组
         */
        this.dataStatePathList = [];
        this.viewModelContextAndUIStatePathsMap = new Map();
        this.viewModelContextAndDataStatePathsMap = new Map();
    }
    /**
     * 初始化
     * @param viewModelContext 当前视图上下文
     */
    init(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * 返回表达式中ViewModelId对应的ViewModelContext
     */
    getViewModelContext(expression) {
        const viewModelId = this.extractPaths(expression).split('/')[1];
        return this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId);
    }
    /**
     * 监听UIState变更
     * @param viewModelContext ViewModel上下文
     * @param expression UIState表达式
     */
    subscribeUIStateChange(viewModelContext, expression) {
        const uiStatePath = this.getStatePath(expression);
        if (this.viewModelContextAndUIStatePathsMap.has(viewModelContext) === false) {
            this.viewModelContextAndUIStatePathsMap.set(viewModelContext, this.uiStatePathList);
            viewModelContext.uiState.changes.subscribe((uiStateChange) => {
                const uiStatePathList = this.viewModelContextAndUIStatePathsMap.get(viewModelContext);
                if (uiStateChange.field && uiStatePathList.indexOf(uiStateChange.field) > -1) {
                    this.stateMachine.render();
                }
            });
        }
        if (this.viewModelContextAndUIStatePathsMap.get(viewModelContext).indexOf(uiStatePath) === -1) {
            this.uiStatePathList.push(uiStatePath);
        }
    }
    /**
     * 监听实体变更
     */
    subscribeEntityChange(viewModelContext, expression) {
        if (this.viewModelContextAndDataStatePathsMap.has(viewModelContext) === false) {
            this.viewModelContextAndDataStatePathsMap.set(viewModelContext, this.dataStatePathList);
            viewModelContext.bindingData.changes.subscribe((change) => {
                if (change.type === 'Load' || change.type === 'SelectionChanged') {
                    this.stateMachine.render();
                }
                const dataPathList = this.viewModelContextAndDataStatePathsMap.get(viewModelContext);
                if (change.path.join() && this.isAccordingPath(dataPathList, change.path.join('/'))) {
                    this.stateMachine.render();
                }
            });
        }
        if (this.viewModelContextAndDataStatePathsMap.get(viewModelContext).indexOf(expression) === -1) {
            this.dataStatePathList.push(expression);
        }
    }
    /**
     * 根据表达式获取对应的StatePath（移除了ViewModelId之外的部分）
     * @param expression 变量表达式
     */
    getStatePath(expression) {
        return this.extractPaths(expression).split('/')[2];
    }
    /**
     * 判断是否监听范围内的变更路径
     */
    isAccordingPath(dataStatePaths, dataStatePath) {
        const targetPath = dataStatePaths.find((item) => {
            return item.indexOf(dataStatePath) > -1;
        });
        return targetPath === undefined ? false : true;
    }
    /**
     * 暂时把这个方法放了这个地方，等季老师共用方法调整后，直接引用他的方法，该方法可删除
     * @param expression 变量表达式
     */
    extractPaths(expression) {
        let path;
        const UI_STATE_PATTERN_G = /\{UISTATE~(\S+?)\}/g;
        const DATA_PATTERN_G = /\{DATA~(\S+?)\}/g;
        const uiStateVariables = expression.match(UI_STATE_PATTERN_G);
        const dataVariables = expression.match(DATA_PATTERN_G);
        if (uiStateVariables !== null) {
            const UI_STATE_PATTERN = /\{UISTATE~(\S+?)\}/;
            uiStateVariables.forEach((uiStateVariable) => {
                const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);
                if (pathMatches != null && pathMatches.length === 2) {
                    path = pathMatches[1];
                }
            });
        }
        if (dataVariables !== null) {
            const DATA_PATTERN = /\{DATA~(\S+?)\}/;
            dataVariables.forEach((dataVariable) => {
                const pathMatches = dataVariable.match(DATA_PATTERN);
                if (pathMatches != null && pathMatches.length === 2) {
                    path = pathMatches[1];
                }
            });
        }
        return path;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGVfbWFjaGluZV93YXRjaGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3N0YXRlLW1hY2hpbmUvc3RhdGVfbWFjaGluZV93YXRjaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG1CQUFtQjtJQTJCOUIsWUFBbUIsWUFBMEI7UUFBMUIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFWN0M7O1dBRUc7UUFDSyxvQkFBZSxHQUFrQixFQUFFLENBQUM7UUFFNUM7O1dBRUc7UUFDSyxzQkFBaUIsR0FBa0IsRUFBRSxDQUFDO1FBRzVDLElBQUksQ0FBQyxrQ0FBa0MsR0FBRyxJQUFJLEdBQUcsRUFBeUIsQ0FBQztRQUMzRSxJQUFJLENBQUMsb0NBQW9DLEdBQUcsSUFBSSxHQUFHLEVBQXlCLENBQUM7SUFDL0UsQ0FBQztJQUVEOzs7T0FHRztJQUNJLElBQUksQ0FBQyxnQkFBa0M7UUFDNUMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO0lBQzNDLENBQUM7SUFFRDs7T0FFRztJQUNJLG1CQUFtQixDQUFDLFVBQWU7UUFDeEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEUsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM5RixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLHNCQUFzQixDQUFDLGdCQUFrQyxFQUFFLFVBQWU7UUFDL0UsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVsRCxJQUFJLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxLQUFLLEVBQUU7WUFDM0UsSUFBSSxDQUFDLGtDQUFrQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDcEYsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRTtnQkFDM0QsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGtDQUFrQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUN0RixJQUFJLGFBQWEsQ0FBQyxLQUFLLElBQUksZUFBZSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7b0JBQzVFLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUM7aUJBQzVCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksSUFBSSxDQUFDLGtDQUFrQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUM3RixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN4QztJQUNILENBQUM7SUFFRDs7T0FFRztJQUNJLHFCQUFxQixDQUFDLGdCQUFrQyxFQUFFLFVBQWU7UUFFOUUsSUFBSSxJQUFJLENBQUMsb0NBQW9DLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEtBQUssS0FBSyxFQUFFO1lBQzdFLElBQUksQ0FBQyxvQ0FBb0MsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDeEYsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFjLEVBQUUsRUFBRTtnQkFFaEUsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLGtCQUFrQixFQUFFO29CQUNoRSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDO2lCQUM1QjtnQkFFRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsb0NBQW9DLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3JGLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO29CQUNuRixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDO2lCQUM1QjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxJQUFJLElBQUksQ0FBQyxvQ0FBb0MsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDOUYsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN6QztJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDSyxZQUFZLENBQUMsVUFBZTtRQUNsQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRDs7T0FFRztJQUNJLGVBQWUsQ0FBQyxjQUFtQixFQUFFLGFBQXFCO1FBQy9ELE1BQU0sVUFBVSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUM5QyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLFVBQVUsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2pELENBQUM7SUFFRDs7O09BR0c7SUFDSyxZQUFZLENBQUMsVUFBa0I7UUFDckMsSUFBSSxJQUFZLENBQUM7UUFDakIsTUFBTSxrQkFBa0IsR0FBRyxxQkFBcUIsQ0FBQztRQUNqRCxNQUFNLGNBQWMsR0FBRyxrQkFBa0IsQ0FBQztRQUMxQyxNQUFNLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUM5RCxNQUFNLGFBQWEsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3ZELElBQUksZ0JBQWdCLEtBQUssSUFBSSxFQUFFO1lBQzdCLE1BQU0sZ0JBQWdCLEdBQUcsb0JBQW9CLENBQUM7WUFDOUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsZUFBdUIsRUFBRSxFQUFFO2dCQUNuRCxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQzVELElBQUksV0FBVyxJQUFJLElBQUksSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtvQkFDbkQsSUFBSSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDdkI7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsSUFBSSxhQUFhLEtBQUssSUFBSSxFQUFFO1lBQzFCLE1BQU0sWUFBWSxHQUFHLGlCQUFpQixDQUFDO1lBQ3ZDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFvQixFQUFFLEVBQUU7Z0JBQzdDLE1BQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ3JELElBQUksV0FBVyxJQUFJLElBQUksSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtvQkFDbkQsSUFBSSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDdkI7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGF0ZU1hY2hpbmUgfSBmcm9tICcuL3N0YXRlX21hY2hpbmUnO1xyXG5pbXBvcnQgeyBWaWV3TW9kZWxDb250ZXh0IH0gZnJvbSAnLi4vdmlldy1tb2RlbC9pbmRleCc7XHJcbmltcG9ydCB7IENoYW5nZSB9IGZyb20gJy4uL2JpbmRpbmctZGF0YS9jaGFuZ2VzJztcclxuXHJcblxyXG4vKipcclxuICog54q25oCB5py65LqL5Lu277yM55uR5ZCsdWlzdGF0ZeeahOWPmOWMluWSjGVudGl0eeeahOWPmOWMllxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN0YXRlTWFjaGluZVdhdGNoZXIge1xyXG5cclxuICAvKipcclxuICAgKiDlvZPliY1WaWV3TW9kZWzkuIrkuIvmlodcclxuICAgKi9cclxuICBwcml2YXRlIHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIHZpZXdNb2RlbD0+VUlTdGF0ZVBhaHRz5a2X5YW4XHJcbiAgICovXHJcbiAgcHJpdmF0ZSB2aWV3TW9kZWxDb250ZXh0QW5kVUlTdGF0ZVBhdGhzTWFwOiBNYXA8Vmlld01vZGVsQ29udGV4dCwgQXJyYXk8c3RyaW5nPj47XHJcblxyXG4gIC8qKlxyXG4gICAqIHZpZXdNb2RlbD0+RGF0YVN0YXRlUGFodHPlrZflhbhcclxuICAgKi9cclxuICBwcml2YXRlIHZpZXdNb2RlbENvbnRleHRBbmREYXRhU3RhdGVQYXRoc01hcDogTWFwPFZpZXdNb2RlbENvbnRleHQsIEFycmF5PHN0cmluZz4+O1xyXG5cclxuICAvKipcclxuICAgKiDmiYDmnIlVSVN0YXRlUGF0aOaVsOe7hFxyXG4gICAqL1xyXG4gIHByaXZhdGUgdWlTdGF0ZVBhdGhMaXN0OiBBcnJheTxzdHJpbmc+ID0gW107XHJcblxyXG4gIC8qKlxyXG4gICAqIOaJgOaciURhdGFTdGF0ZVBhdGjmlbDnu4RcclxuICAgKi9cclxuICBwcml2YXRlIGRhdGFTdGF0ZVBhdGhMaXN0OiBBcnJheTxzdHJpbmc+ID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBzdGF0ZU1hY2hpbmU6IFN0YXRlTWFjaGluZSkge1xyXG4gICAgdGhpcy52aWV3TW9kZWxDb250ZXh0QW5kVUlTdGF0ZVBhdGhzTWFwID0gbmV3IE1hcDxWaWV3TW9kZWxDb250ZXh0LCBhbnk+KCk7XHJcbiAgICB0aGlzLnZpZXdNb2RlbENvbnRleHRBbmREYXRhU3RhdGVQYXRoc01hcCA9IG5ldyBNYXA8Vmlld01vZGVsQ29udGV4dCwgYW55PigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yid5aeL5YyWXHJcbiAgICogQHBhcmFtIHZpZXdNb2RlbENvbnRleHQg5b2T5YmN6KeG5Zu+5LiK5LiL5paHXHJcbiAgICovXHJcbiAgcHVibGljIGluaXQodmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dCkge1xyXG4gICAgdGhpcy52aWV3TW9kZWxDb250ZXh0ID0gdmlld01vZGVsQ29udGV4dDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOi/lOWbnuihqOi+vuW8j+S4rVZpZXdNb2RlbElk5a+55bqU55qEVmlld01vZGVsQ29udGV4dFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRWaWV3TW9kZWxDb250ZXh0KGV4cHJlc3Npb246IGFueSk6IFZpZXdNb2RlbENvbnRleHQge1xyXG4gICAgY29uc3Qgdmlld01vZGVsSWQgPSB0aGlzLmV4dHJhY3RQYXRocyhleHByZXNzaW9uKS5zcGxpdCgnLycpWzFdO1xyXG4gICAgcmV0dXJuIHRoaXMudmlld01vZGVsQ29udGV4dC5hcHBDb250ZXh0LnZpZXdNb2RlbENvbnRleHRNYW5hZ2VyLmdldENvbnRleHRCeUlkKHZpZXdNb2RlbElkKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOebkeWQrFVJU3RhdGXlj5jmm7RcclxuICAgKiBAcGFyYW0gdmlld01vZGVsQ29udGV4dCBWaWV3TW9kZWzkuIrkuIvmlodcclxuICAgKiBAcGFyYW0gZXhwcmVzc2lvbiBVSVN0YXRl6KGo6L6+5byPXHJcbiAgICovXHJcbiAgcHVibGljIHN1YnNjcmliZVVJU3RhdGVDaGFuZ2Uodmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dCwgZXhwcmVzc2lvbjogYW55KSB7XHJcbiAgICBjb25zdCB1aVN0YXRlUGF0aCA9IHRoaXMuZ2V0U3RhdGVQYXRoKGV4cHJlc3Npb24pO1xyXG5cclxuICAgIGlmICh0aGlzLnZpZXdNb2RlbENvbnRleHRBbmRVSVN0YXRlUGF0aHNNYXAuaGFzKHZpZXdNb2RlbENvbnRleHQpID09PSBmYWxzZSkge1xyXG4gICAgICB0aGlzLnZpZXdNb2RlbENvbnRleHRBbmRVSVN0YXRlUGF0aHNNYXAuc2V0KHZpZXdNb2RlbENvbnRleHQsIHRoaXMudWlTdGF0ZVBhdGhMaXN0KTtcclxuICAgICAgdmlld01vZGVsQ29udGV4dC51aVN0YXRlLmNoYW5nZXMuc3Vic2NyaWJlKCh1aVN0YXRlQ2hhbmdlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdWlTdGF0ZVBhdGhMaXN0ID0gdGhpcy52aWV3TW9kZWxDb250ZXh0QW5kVUlTdGF0ZVBhdGhzTWFwLmdldCh2aWV3TW9kZWxDb250ZXh0KTtcclxuICAgICAgICBpZiAodWlTdGF0ZUNoYW5nZS5maWVsZCAmJiB1aVN0YXRlUGF0aExpc3QuaW5kZXhPZih1aVN0YXRlQ2hhbmdlLmZpZWxkKSA+IC0xKSB7XHJcbiAgICAgICAgICB0aGlzLnN0YXRlTWFjaGluZS5yZW5kZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLnZpZXdNb2RlbENvbnRleHRBbmRVSVN0YXRlUGF0aHNNYXAuZ2V0KHZpZXdNb2RlbENvbnRleHQpLmluZGV4T2YodWlTdGF0ZVBhdGgpID09PSAtMSkge1xyXG4gICAgICB0aGlzLnVpU3RhdGVQYXRoTGlzdC5wdXNoKHVpU3RhdGVQYXRoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOebkeWQrOWunuS9k+WPmOabtFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdWJzY3JpYmVFbnRpdHlDaGFuZ2Uodmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dCwgZXhwcmVzc2lvbjogYW55KSB7XHJcblxyXG4gICAgaWYgKHRoaXMudmlld01vZGVsQ29udGV4dEFuZERhdGFTdGF0ZVBhdGhzTWFwLmhhcyh2aWV3TW9kZWxDb250ZXh0KSA9PT0gZmFsc2UpIHtcclxuICAgICAgdGhpcy52aWV3TW9kZWxDb250ZXh0QW5kRGF0YVN0YXRlUGF0aHNNYXAuc2V0KHZpZXdNb2RlbENvbnRleHQsIHRoaXMuZGF0YVN0YXRlUGF0aExpc3QpO1xyXG4gICAgICB2aWV3TW9kZWxDb250ZXh0LmJpbmRpbmdEYXRhLmNoYW5nZXMuc3Vic2NyaWJlKChjaGFuZ2U6IENoYW5nZSkgPT4ge1xyXG5cclxuICAgICAgICBpZiAoY2hhbmdlLnR5cGUgPT09ICdMb2FkJyB8fCBjaGFuZ2UudHlwZSA9PT0gJ1NlbGVjdGlvbkNoYW5nZWQnKSB7XHJcbiAgICAgICAgICB0aGlzLnN0YXRlTWFjaGluZS5yZW5kZXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGRhdGFQYXRoTGlzdCA9IHRoaXMudmlld01vZGVsQ29udGV4dEFuZERhdGFTdGF0ZVBhdGhzTWFwLmdldCh2aWV3TW9kZWxDb250ZXh0KTtcclxuICAgICAgICBpZiAoY2hhbmdlLnBhdGguam9pbigpICYmIHRoaXMuaXNBY2NvcmRpbmdQYXRoKGRhdGFQYXRoTGlzdCwgY2hhbmdlLnBhdGguam9pbignLycpKSkge1xyXG4gICAgICAgICAgdGhpcy5zdGF0ZU1hY2hpbmUucmVuZGVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy52aWV3TW9kZWxDb250ZXh0QW5kRGF0YVN0YXRlUGF0aHNNYXAuZ2V0KHZpZXdNb2RlbENvbnRleHQpLmluZGV4T2YoZXhwcmVzc2lvbikgPT09IC0xKSB7XHJcbiAgICAgIHRoaXMuZGF0YVN0YXRlUGF0aExpc3QucHVzaChleHByZXNzaW9uKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOagueaNruihqOi+vuW8j+iOt+WPluWvueW6lOeahFN0YXRlUGF0aO+8iOenu+mZpOS6hlZpZXdNb2RlbElk5LmL5aSW55qE6YOo5YiG77yJXHJcbiAgICogQHBhcmFtIGV4cHJlc3Npb24g5Y+Y6YeP6KGo6L6+5byPXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRTdGF0ZVBhdGgoZXhwcmVzc2lvbjogYW55KSB7XHJcbiAgICByZXR1cm4gdGhpcy5leHRyYWN0UGF0aHMoZXhwcmVzc2lvbikuc3BsaXQoJy8nKVsyXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIpOaWreaYr+WQpuebkeWQrOiMg+WbtOWGheeahOWPmOabtOi3r+W+hFxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc0FjY29yZGluZ1BhdGgoZGF0YVN0YXRlUGF0aHM6IGFueSwgZGF0YVN0YXRlUGF0aDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCB0YXJnZXRQYXRoID0gZGF0YVN0YXRlUGF0aHMuZmluZCgoaXRlbSkgPT4ge1xyXG4gICAgICByZXR1cm4gaXRlbS5pbmRleE9mKGRhdGFTdGF0ZVBhdGgpID4gLTE7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdGFyZ2V0UGF0aCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5pqC5pe25oqK6L+Z5Liq5pa55rOV5pS+5LqG6L+Z5Liq5Zyw5pa577yM562J5a2j6ICB5biI5YWx55So5pa55rOV6LCD5pW05ZCO77yM55u05o6l5byV55So5LuW55qE5pa55rOV77yM6K+l5pa55rOV5Y+v5Yig6ZmkXHJcbiAgICogQHBhcmFtIGV4cHJlc3Npb24g5Y+Y6YeP6KGo6L6+5byPXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBleHRyYWN0UGF0aHMoZXhwcmVzc2lvbjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGxldCBwYXRoOiBzdHJpbmc7XHJcbiAgICBjb25zdCBVSV9TVEFURV9QQVRURVJOX0cgPSAvXFx7VUlTVEFURX4oXFxTKz8pXFx9L2c7XHJcbiAgICBjb25zdCBEQVRBX1BBVFRFUk5fRyA9IC9cXHtEQVRBfihcXFMrPylcXH0vZztcclxuICAgIGNvbnN0IHVpU3RhdGVWYXJpYWJsZXMgPSBleHByZXNzaW9uLm1hdGNoKFVJX1NUQVRFX1BBVFRFUk5fRyk7XHJcbiAgICBjb25zdCBkYXRhVmFyaWFibGVzID0gZXhwcmVzc2lvbi5tYXRjaChEQVRBX1BBVFRFUk5fRyk7XHJcbiAgICBpZiAodWlTdGF0ZVZhcmlhYmxlcyAhPT0gbnVsbCkge1xyXG4gICAgICBjb25zdCBVSV9TVEFURV9QQVRURVJOID0gL1xce1VJU1RBVEV+KFxcUys/KVxcfS87XHJcbiAgICAgIHVpU3RhdGVWYXJpYWJsZXMuZm9yRWFjaCgodWlTdGF0ZVZhcmlhYmxlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBjb25zdCBwYXRoTWF0Y2hlcyA9IHVpU3RhdGVWYXJpYWJsZS5tYXRjaChVSV9TVEFURV9QQVRURVJOKTtcclxuICAgICAgICBpZiAocGF0aE1hdGNoZXMgIT0gbnVsbCAmJiBwYXRoTWF0Y2hlcy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgIHBhdGggPSBwYXRoTWF0Y2hlc1sxXTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKGRhdGFWYXJpYWJsZXMgIT09IG51bGwpIHtcclxuICAgICAgY29uc3QgREFUQV9QQVRURVJOID0gL1xce0RBVEF+KFxcUys/KVxcfS87XHJcbiAgICAgIGRhdGFWYXJpYWJsZXMuZm9yRWFjaCgoZGF0YVZhcmlhYmxlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBjb25zdCBwYXRoTWF0Y2hlcyA9IGRhdGFWYXJpYWJsZS5tYXRjaChEQVRBX1BBVFRFUk4pO1xyXG4gICAgICAgIGlmIChwYXRoTWF0Y2hlcyAhPSBudWxsICYmIHBhdGhNYXRjaGVzLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgcGF0aCA9IHBhdGhNYXRjaGVzWzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGF0aDtcclxuICB9XHJcbn0iXX0=