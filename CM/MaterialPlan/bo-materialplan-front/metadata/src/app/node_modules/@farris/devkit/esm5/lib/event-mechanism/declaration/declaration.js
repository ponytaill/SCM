import { Injectable } from '@angular/core';
import { MetadataUtil } from '../../metadata/index';
import { NG_DECLARATION } from './declaration_decorator';
import { VariableParseService } from '../../variable/index';
import { EventTypeEnum } from './event-type';
var Declaration = /** @class */ (function () {
    function Declaration() {
    }
    /**
     * 初始化
     */
    Declaration.prototype.init = function (frameComponent) {
        if (!frameComponent) {
            return;
        }
        this.bindDeclaration(frameComponent, null);
    };
    /**
     *  依据定义列表进行初始化
     * @param frameComponent 表单component实例
     * @param ngDeclarations 事件定义列表信息
     */
    Declaration.prototype.initWithDeclarations = function (frameComponent, ngDeclarations) {
        if (!frameComponent) {
            return;
        }
        this.bindDeclaration(frameComponent, null);
    };
    /**
     * 基于事件元数据构建事件
     * 调整访问级别 便于解析表单进行初始化动作
     * @param context 框架上下文
     */
    Declaration.prototype.bindDeclaration = function (frameComponent, ngDeclarations) {
        var _this = this;
        var context = frameComponent.context;
        if (!context) {
            return;
        }
        var ngPublicEventProps = ngDeclarations ? ngDeclarations : this.getNgPublicEvent();
        if (!ngPublicEventProps) {
            return;
        }
        Object.keys(ngPublicEventProps).forEach(function (propertyName) {
            var ngExportEvent = ngPublicEventProps[propertyName];
            Object.defineProperty(_this, propertyName, {
                value: function () {
                    // 获取命令处理上下文
                    var targetContext = context;
                    // todo: 给ngExportEvent添加frameId（保证框架之间的事件隔离）
                    // if (ngExportEvent.frameId) {
                    //   targetContext = context.appContext.getFrameContext(ngExportEvent.frameId);
                    // }
                    var root = targetContext.root;
                    var emitter = ngExportEvent.token;
                    var tokenValue = ngExportEvent.token;
                    var eventName = ngExportEvent.name;
                    var eventArgs = JSON.parse(JSON.stringify(ngExportEvent.params));
                    var eventType = ngExportEvent.type;
                    var eventBus = targetContext.eventBus || root.eventBus;
                    if (!eventBus) {
                        return;
                    }
                    var injector = targetContext.injector || root.injector;
                    var variableParseService = injector.get(VariableParseService);
                    // 执行参数解析
                    setTimeout(function () {
                        eventArgs = variableParseService.parse(eventArgs, targetContext);
                        var eventSender = targetContext.frameComponent;
                        var currentContext = targetContext;
                        var eventId = new Date().valueOf();
                        if (eventType && eventType === EventTypeEnum.ROUTE) {
                            // 事件依次向上冒泡
                            while (currentContext) {
                                currentContext.eventBus.post(emitter, tokenValue, eventName, eventArgs, eventSender, eventType, eventId);
                                // currentContext = currentContext.parent;
                                currentContext = _this.getParentContext(currentContext);
                            }
                        }
                        else {
                            eventBus.post(emitter, tokenValue, eventName, eventArgs, eventSender);
                        }
                    }, 0);
                }
            });
        });
    };
    /**
     * 获取事件定义列表
     * @returns  事件定义
     */
    Declaration.prototype.getNgPublicEvent = function () {
        return MetadataUtil.getPropsMetadatasByName(this.constructor, NG_DECLARATION);
    };
    /**
     * 获取父Context
     * @param context 当前上下文
     */
    Declaration.prototype.getParentContext = function (context) {
        // 首先查找直接上级FrameContext
        if (context.parent) {
            return context.parent;
        }
        // 到了AppContext边界，返回上级AppContext的根FrameContext
        var parentAppContext = context.appContext.parent;
        if (parentAppContext) {
            return parentAppContext.frameContextManager.getRootFrameContext();
        }
        return null;
    };
    Declaration.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    Declaration.ctorParameters = function () { return []; };
    return Declaration;
}());
export { Declaration };
//# sourceMappingURL=data:application/json;base64,