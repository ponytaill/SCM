/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ViewChild } from '@angular/core';
import { LocaleService } from '@farris/ui-locale';
import { NumberRangeComponent, NumberSpinnerComponent } from '@farris/ui-number-spinner';
var PanelFlexibleNumberComponent = /** @class */ (function () {
    function PanelFlexibleNumberComponent(localeService) {
        this.localeService = localeService;
        this.itemChange = new EventEmitter();
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.canNull = true;
    }
    Object.defineProperty(PanelFlexibleNumberComponent.prototype, "item", {
        get: /**
         * @return {?}
         */
        function () {
            return this._item;
        },
        set: /**
         * @param {?} nr
         * @return {?}
         */
        function (nr) {
            this._item = nr;
            if (this._item) {
                if (!this._item.hasOwnProperty('value')) {
                    this._item.value = {
                        startValue: null,
                        endValue: null,
                        value: null,
                        single: true
                    };
                }
                if (!this._item.control.hasOwnProperty('single')) {
                    this._item.control.single = true;
                }
                this.beginPlaceHolder = (this._item.hasOwnProperty('beginPlaceHolder') && this._item.beginPlaceHolder) ? this._item.beginPlaceHolder : this.localeService.getValue('filterPanel.beginPlaceHolder');
                this.endPlaceHolder = (this._item.hasOwnProperty('endPlaceHolder') && this._item.beginPlaceHolder) ? this._item.endPlaceHolder : this.localeService.getValue('filterPanel.endPlaceHolder');
                this.placeholder = (this._item.hasOwnProperty('placeHolder') && this._item.placeHolder) ? this._item.placeHolder : '';
                this.single = this._item.control.single;
            }
            this.precision = nr.control.precision;
            this.bigNumber = nr.control.bigNumber;
            if (!this.bigNumber) {
                this.min = -2147483648;
                this.max = 2147483647;
            }
            this.constructMultiFieldNumberRange(nr.value);
            this.numberSubmitChange();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PanelFlexibleNumberComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    PanelFlexibleNumberComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.changeFocus();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PanelFlexibleNumberComponent.prototype.constructMultiFieldNumberRange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.single) {
            this.value = value.value == null ? null : value.value;
        }
        else {
            this.beginValue = value.startValue == null ? null : value.startValue;
            this.endValue = value.endValue == null ? null : value.endValue;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelFlexibleNumberComponent.prototype.numberChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._item.value.value = event;
        if (Object.keys(this._item.value).length === 0) {
            this._item.valueText = '';
        }
        else {
            this._item.valueText = '' + this._item.value.value;
        }
        this.searchHandle.emit();
        this.numberSubmitChange();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelFlexibleNumberComponent.prototype.beginValueChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._item.value.startValue = event;
        this.setValueText();
        this.numberSubmitChange();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelFlexibleNumberComponent.prototype.endValueChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._item.value.endValue = event;
        this.setValueText();
        this.numberSubmitChange();
    };
    /**
     * @return {?}
     */
    PanelFlexibleNumberComponent.prototype.setValueText = /**
     * @return {?}
     */
    function () {
        //console.log(this._item.value.startValue,this._item.value.endValue);
        if (Object.keys(this._item.value).length === 0 || (this._item.value.startValue == null && this._item.value.endValue == null)) {
            this._item.valueText = '';
        }
        else if (this._item.value.startValue == null) {
            this._item.valueText = '~' + this._item.value.endValue;
        }
        else if (this._item.value.endValue == null) {
            this._item.valueText = this._item.value.startValue + '~';
        }
        else {
            this._item.valueText = this._item.value.startValue + '~' + this._item.value.endValue;
        }
    };
    /**
     * @return {?}
     */
    PanelFlexibleNumberComponent.prototype.numberSubmitChange = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var val = this._item.value;
        if (this.single) {
            if (Object.keys(val).length < 0 || (val.value == null || val.value === '' || val === undefined)) {
                this.submitChange.emit(false);
            }
            else {
                this.submitChange.emit(true);
            }
        }
        else {
            if (Object.keys(val).length === 0 || ((val.startValue === '' || val.startValue == null) && (val.endValue == null || val.endValue === ''))) {
                this.submitChange.emit(false);
            }
            else {
                this.submitChange.emit(true);
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelFlexibleNumberComponent.prototype.onChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.single = !event;
        this._item.control.single = this.single;
        this._item.value.single = this.single;
        this.changeFocus();
        this.itemChange.emit(this.item);
        this.numberSubmitChange();
    };
    /**
     * @return {?}
     */
    PanelFlexibleNumberComponent.prototype.changeFocus = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.beginNumberText)
                _this.beginNumberText.input.nativeElement.focus();
            if (_this.numberText)
                _this.numberText.input.nativeElement.focus();
        }), 0);
    };
    PanelFlexibleNumberComponent.decorators = [
        { type: Component, args: [{
                    selector: 'panel-filter-flexiblenumber',
                    template: "<div class=\"f-panel-filter-tip\">\r\n    <span class=\"panel-filter-tip-text\">{{ 'filterPanel.intervalFilter' | locale }}</span>\r\n    <farris-switch size=\"small\" [checked]=\"!single\" (valueChange)=\"onChange($event)\"></farris-switch>\r\n</div>\r\n<div class=\"f-panel-filter-content\">\r\n    <ng-container *ngIf=\"single; else elseTemplate\">\r\n        <farris-number-spinner\r\n            class=\"f-utils-fill-flex-row\"\r\n            [(ngModel)]=\"value\"\r\n            [canNull]=\"canNull\"\r\n            [precision]=\"precision\"\r\n            [bigNumber]=\"bigNumber\"\r\n            [min]=\"min\" \r\n            [max]=\"max\"\r\n            [placeholder]=\"placeholder\"\r\n            (valueChange)=\"numberChange($event)\"\r\n            #numberText\r\n        ></farris-number-spinner>\r\n    </ng-container>\r\n    <ng-template #elseTemplate>\r\n        <div class=\"d-flex panel-flexible-range-wrapper\">\r\n            <farris-number-spinner\r\n                [(ngModel)]=\"beginValue\"\r\n                [canNull]=\"canNull\"\r\n                [precision]=\"precision\"\r\n                [bigNumber]=\"bigNumber\"\r\n                [min]=\"min\" \r\n                [max]=\"endValue?endValue:max\"\r\n                [placeholder]=\"beginPlaceHolder\"\r\n                (valueChange)=\"beginValueChange($event)\"\r\n                #beginNumberText\r\n            ></farris-number-spinner>\r\n            <span class=\"f-icon f-icon-orientation-arrow\"></span>\r\n            <farris-number-spinner\r\n                [(ngModel)]=\"endValue\"\r\n                [canNull]=\"canNull\"\r\n                [precision]=\"precision\"\r\n                [bigNumber]=\"bigNumber\"\r\n                [min]=\"beginValue?beginValue:min\" \r\n                [max]=\"max\"\r\n                [placeholder]=\"endPlaceHolder\"\r\n                (valueChange)=\"endValueChange($event)\"\r\n            ></farris-number-spinner>\r\n        </div>\r\n    </ng-template>\r\n    \r\n</div>"
                }] }
    ];
    /** @nocollapse */
    PanelFlexibleNumberComponent.ctorParameters = function () { return [
        { type: LocaleService }
    ]; };
    PanelFlexibleNumberComponent.propDecorators = {
        itemChange: [{ type: Output }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        submitChange: [{ type: Output, args: ['submitChange',] }],
        item: [{ type: Input }],
        beginNumberText: [{ type: ViewChild, args: ['beginNumberText',] }],
        numberText: [{ type: ViewChild, args: ['numberText',] }]
    };
    return PanelFlexibleNumberComponent;
}());
export { PanelFlexibleNumberComponent };
if (false) {
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.itemChange;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.searchHandle;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.submitChange;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.canNull;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.number;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.value;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.beginValue;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.endValue;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.precision;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.placeholder;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.beginPlaceHolder;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.endPlaceHolder;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.bigNumber;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.max;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.min;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.single;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype._item;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.numberRange;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.beginNumberText;
    /** @type {?} */
    PanelFlexibleNumberComponent.prototype.numberText;
    /**
     * @type {?}
     * @private
     */
    PanelFlexibleNumberComponent.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,