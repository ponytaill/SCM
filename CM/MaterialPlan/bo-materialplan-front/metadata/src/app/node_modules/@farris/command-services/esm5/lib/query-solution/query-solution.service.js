import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { QueryConditionHandlerFactory } from './querycondition.handler.factory';
import { FrameContext } from '@farris/devkit';
import { FrameworkSessionService } from '@farris/bef';
var QuerySolutionService = /** @class */ (function () {
    function QuerySolutionService(frameContext, frameworkSessionService) {
        this.frameContext = frameContext;
        this.frameworkSessionService = frameworkSessionService;
    }
    QuerySolutionService.prototype.getUserSessionId = function () {
        return this.frameworkSessionService.getUserSessionId();
    };
    QuerySolutionService.prototype.setFilterConditions = function (params) {
        var queryConditionHandler;
        var filterConditionList = [];
        params.forEach(function (qc) {
            if (!qc.value.isEmpty()) {
                queryConditionHandler = QueryConditionHandlerFactory.getInstance().getHandler(qc.control.getControlType());
                queryConditionHandler && filterConditionList.push.apply(filterConditionList, tslib_1.__spread(queryConditionHandler.convert(qc)));
            }
        });
        //设置到NgCommand params.filter属性上：{UISTATE~/root-component/filterConditionList}
        this.frameContext.uiState['filterConditionList'] = JSON.stringify(filterConditionList);
        // const originalConditions = this.getOriginalQueryConditions(filterConditionList);
        this.frameContext.uiState['originalFilterConditionList'] = JSON.stringify(filterConditionList);
    };
    QuerySolutionService.prototype.setCurrentQueryConditions = function (conditions) {
        this.frameContext.uiState['currentQueryConditions'] = conditions;
    };
    QuerySolutionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    QuerySolutionService.ctorParameters = function () { return [
        { type: FrameContext },
        { type: FrameworkSessionService }
    ]; };
    return QuerySolutionService;
}());
export { QuerySolutionService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktc29sdXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9xdWVyeS1zb2x1dGlvbi9xdWVyeS1zb2x1dGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU5QyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFdEQ7SUFHRSw4QkFDVSxZQUEwQixFQUMxQix1QkFBZ0Q7UUFEaEQsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtJQUcxRCxDQUFDO0lBRUQsK0NBQWdCLEdBQWhCO1FBQ0UsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUN6RCxDQUFDO0lBRU0sa0RBQW1CLEdBQTFCLFVBQTJCLE1BQTZCO1FBQ3RELElBQUkscUJBQTZDLENBQUM7UUFDbEQsSUFBTSxtQkFBbUIsR0FBRyxFQUFFLENBQUM7UUFDL0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEVBQUU7WUFDZixJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDdkIscUJBQXFCLEdBQUcsNEJBQTRCLENBQUMsV0FBVyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztnQkFDM0cscUJBQXFCLElBQUksbUJBQW1CLENBQUMsSUFBSSxPQUF4QixtQkFBbUIsbUJBQVMscUJBQXFCLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUM7YUFDekY7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILDZFQUE2RTtRQUM3RSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN2RixtRkFBbUY7UUFDbkYsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsNkJBQTZCLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVNLHdEQUF5QixHQUFoQyxVQUFpQyxVQUE0QjtRQUMzRCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLFVBQVUsQ0FBQztJQUNuRSxDQUFDOztnQkEvQkYsVUFBVTs7OztnQkFKRixZQUFZO2dCQUVaLHVCQUF1Qjs7SUF1RGhDLDJCQUFDO0NBQUEsQUFyREQsSUFxREM7U0FwRFksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUXVlcnlDb25kaXRpb24gfSBmcm9tICdAZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvbic7XG5pbXBvcnQgeyBJUXVlcnlDb25kaXRpb25IYW5kbGVyIH0gZnJvbSAnLi9oYW5kbGVycy9pcXVlcnljb25kaXRpb24uaGFuZGxlcic7XG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbkhhbmRsZXJGYWN0b3J5IH0gZnJvbSAnLi9xdWVyeWNvbmRpdGlvbi5oYW5kbGVyLmZhY3RvcnknO1xuaW1wb3J0IHsgRnJhbWVDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xuaW1wb3J0IHsgSVF1ZXJ5U29sdXRpb25IYW5kbGVyLFF1ZXJ5U29sdXRpb25Db21wb25lbnQgfSBmcm9tICdAZ3NwLWNtcC9xdWVyeXNvbHV0aW9uJztcbmltcG9ydCB7IEZyYW1ld29ya1Nlc3Npb25TZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy9iZWYnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUXVlcnlTb2x1dGlvblNlcnZpY2UgaW1wbGVtZW50cyBJUXVlcnlTb2x1dGlvbkhhbmRsZXIge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsXG4gICAgcHJpdmF0ZSBmcmFtZXdvcmtTZXNzaW9uU2VydmljZTogRnJhbWV3b3JrU2Vzc2lvblNlcnZpY2VcbiAgKSB7XG5cbiAgfVxuXG4gIGdldFVzZXJTZXNzaW9uSWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5mcmFtZXdvcmtTZXNzaW9uU2VydmljZS5nZXRVc2VyU2Vzc2lvbklkKCk7XG4gIH1cblxuICBwdWJsaWMgc2V0RmlsdGVyQ29uZGl0aW9ucyhwYXJhbXM6IEFycmF5PFF1ZXJ5Q29uZGl0aW9uPik6IHZvaWQge1xuICAgIGxldCBxdWVyeUNvbmRpdGlvbkhhbmRsZXI6IElRdWVyeUNvbmRpdGlvbkhhbmRsZXI7XG4gICAgY29uc3QgZmlsdGVyQ29uZGl0aW9uTGlzdCA9IFtdO1xuICAgIHBhcmFtcy5mb3JFYWNoKHFjID0+IHtcbiAgICAgIGlmICghcWMudmFsdWUuaXNFbXB0eSgpKSB7XG4gICAgICAgIHF1ZXJ5Q29uZGl0aW9uSGFuZGxlciA9IFF1ZXJ5Q29uZGl0aW9uSGFuZGxlckZhY3RvcnkuZ2V0SW5zdGFuY2UoKS5nZXRIYW5kbGVyKHFjLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSk7XG4gICAgICAgIHF1ZXJ5Q29uZGl0aW9uSGFuZGxlciAmJiBmaWx0ZXJDb25kaXRpb25MaXN0LnB1c2goLi4ucXVlcnlDb25kaXRpb25IYW5kbGVyLmNvbnZlcnQocWMpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvL+iuvue9ruWIsE5nQ29tbWFuZCBwYXJhbXMuZmlsdGVy5bGe5oCn5LiK77yae1VJU1RBVEV+L3Jvb3QtY29tcG9uZW50L2ZpbHRlckNvbmRpdGlvbkxpc3R9XG4gICAgdGhpcy5mcmFtZUNvbnRleHQudWlTdGF0ZVsnZmlsdGVyQ29uZGl0aW9uTGlzdCddID0gSlNPTi5zdHJpbmdpZnkoZmlsdGVyQ29uZGl0aW9uTGlzdCk7XG4gICAgLy8gY29uc3Qgb3JpZ2luYWxDb25kaXRpb25zID0gdGhpcy5nZXRPcmlnaW5hbFF1ZXJ5Q29uZGl0aW9ucyhmaWx0ZXJDb25kaXRpb25MaXN0KTtcbiAgICB0aGlzLmZyYW1lQ29udGV4dC51aVN0YXRlWydvcmlnaW5hbEZpbHRlckNvbmRpdGlvbkxpc3QnXSA9IEpTT04uc3RyaW5naWZ5KGZpbHRlckNvbmRpdGlvbkxpc3QpO1xuICB9XG5cbiAgcHVibGljIHNldEN1cnJlbnRRdWVyeUNvbmRpdGlvbnMoY29uZGl0aW9uczogUXVlcnlDb25kaXRpb25bXSk6IHZvaWQge1xuICAgIHRoaXMuZnJhbWVDb250ZXh0LnVpU3RhdGVbJ2N1cnJlbnRRdWVyeUNvbmRpdGlvbnMnXSA9IGNvbmRpdGlvbnM7XG4gIH1cbiAgLyoqXG4gICAqIOi/mOWOn+i/h+a7pOadoeS7tuS4reeahGVuY29kZVxuICAgKiBAcGFyYW0gY29uZGl0aW9ucyDmn6Xor6LmlrnmoYjmnoTpgKDlroznmoTov4fmu6TmnaHku7ZcbiAgICovXG4gIC8vIHByaXZhdGUgZ2V0T3JpZ2luYWxRdWVyeUNvbmRpdGlvbnMoY29uZGl0aW9uczogQXJyYXk8YW55Pik6IEFycmF5PGFueT4ge1xuICAvLyAgIGNvbmRpdGlvbnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNvbmRpdGlvbnMpKTtcbiAgLy8gICBpZiAoY29uZGl0aW9ucyAmJiBBcnJheS5pc0FycmF5KGNvbmRpdGlvbnMpICYmIGNvbmRpdGlvbnMubGVuZ3RoID4gMCkge1xuICAvLyAgICAgY29uZGl0aW9ucyA9IGNvbmRpdGlvbnMubWFwKChpdGVtKSA9PiB7XG4gIC8vICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdWYWx1ZScpKSB7XG4gIC8vICAgICAgICAgaXRlbS5WYWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChpdGVtLlZhbHVlKTtcbiAgLy8gICAgICAgfSBlbHNlIGlmIChpdGVtLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XG4gIC8vICAgICAgICAgY29uc3QgdmFsdWUgPSBpdGVtLnZhbHVlO1xuICAvLyAgICAgICAgIGRlbGV0ZSBpdGVtLnZhbHVlO1xuICAvLyAgICAgICAgIGl0ZW0uVmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICAvLyAgICAgICB9XG4gIC8vICAgICAgIHJldHVybiBpdGVtO1xuICAvLyAgICAgfSk7XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiBjb25kaXRpb25zO1xuICAvLyB9XG5cbn1cbiJdfQ==