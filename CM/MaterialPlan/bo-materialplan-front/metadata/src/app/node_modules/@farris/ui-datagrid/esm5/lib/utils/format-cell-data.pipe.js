/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DatagridComponent } from './../datagrid.component';
import { LocaleService } from '@farris/ui-locale';
import { Pipe, Injector, Optional, ElementRef, LOCALE_ID } from '@angular/core';
import { Utils } from './utils';
import { ColumnFormatService } from '@farris/ui-common/column';
var FormatCellDataPipe = /** @class */ (function () {
    function FormatCellDataPipe(cfs, injector) {
        this.cfs = cfs;
        this.injector = injector;
        this.localeId = 'ZH-CHS';
        this.localeId = this.injector.get(LOCALE_ID);
    }
    /**
     * @param {?} col
     * @param {?} rowData
     * @param {?=} groupFooter
     * @param {?=} footer
     * @return {?}
     */
    FormatCellDataPipe.prototype.transform = /**
     * @param {?} col
     * @param {?} rowData
     * @param {?=} groupFooter
     * @param {?=} footer
     * @return {?}
     */
    function (col, rowData, groupFooter, footer) {
        if (groupFooter === void 0) { groupFooter = false; }
        if (footer === void 0) { footer = false; }
        if (rowData && col && col.field) {
            /** @type {?} */
            var value = Utils.getValue(col.field, rowData);
            if (col.editor && col.editor.options && col.editor.options.isPassword && !col.formatter) {
                return value ? '******' : '';
            }
            /** @type {?} */
            var formatterFn = col.formatter;
            if (groupFooter) {
                formatterFn = col.groupFooter ? col.groupFooter.formatter : undefined;
            }
            else if (footer) {
                formatterFn = col.footer ? col.footer.formatter : undefined;
                if (typeof formatterFn === 'object') {
                    if (!formatterFn.options) {
                        /** @type {?} */
                        var opts = { type: formatterFn.type, options: formatterFn };
                        formatterFn = opts;
                    }
                }
            }
            if (!formatterFn) {
                /** @type {?} */
                var resoultStr = value;
                if (col.isMultilingualField) {
                    resoultStr = this.getMultilingualValue(value);
                }
                else {
                    if (value !== null && value !== undefined && value !== '0' && typeof value === 'string') {
                        if (value.indexOf('\n') > -1) {
                            // return value.replace(/\n/g, '<br>');
                            this.getDatagridInstance();
                            if (this.dataGrid && this.dataGrid.nowrap) {
                                resoultStr = value.replace(/\n/g, ' ');
                            }
                        }
                    }
                    // value.replace(/ /g, '&ensp;');
                }
                return this.setPlaceHolderWhenEnableEditCellStyle(col, resoultStr, rowData, groupFooter || footer);
            }
            else {
                if (formatterFn) {
                    if (formatterFn.type === 'number') {
                        if (!formatterFn.options || !Object.keys(formatterFn.options).length) {
                            formatterFn.options = {
                                thousand: ',',
                                precision: 2
                            };
                        }
                    }
                    if (formatterFn.type === 'datetime') {
                        if (formatterFn.options) {
                            if (col.editor && col.editor.options) {
                                var _a = col.editor.options, dateRange = _a.dateRange, dateRangeDatesDelimiter = _a.dateRangeDatesDelimiter;
                                formatterFn.options = Object.assign({ dateRange: dateRange, dateRangeDatesDelimiter: dateRangeDatesDelimiter }, formatterFn.options);
                            }
                        }
                    }
                    if (formatterFn.type === 'timeago') {
                        if (formatterFn.options) {
                            formatterFn.options.locale = formatterFn.options.locale || this.localeId;
                        }
                        else {
                            formatterFn.options = {
                                locale: this.localeId
                            };
                        }
                    }
                }
                this.getDatagridInstance();
                if (this.dataGrid) {
                    /** @type {?} */
                    var r = this.cfs.format(value, rowData, formatterFn, { utils: this.dataGrid.commonUtils, locale: this.localeId });
                    return this.setPlaceHolderWhenEnableEditCellStyle(col, r, rowData, groupFooter || footer);
                }
                else {
                    return this.cfs.format(value, rowData, formatterFn, { locale: this.localeId });
                }
            }
        }
        return '';
    };
    // 获取多语数据
    // 获取多语数据
    /**
     * @private
     * @param {?} valObj
     * @return {?}
     */
    FormatCellDataPipe.prototype.getMultilingualValue = 
    // 获取多语数据
    /**
     * @private
     * @param {?} valObj
     * @return {?}
     */
    function (valObj) {
        if (valObj && typeof valObj === 'object' && Object.keys(valObj).length > 0) {
            if (this.injector) {
                this.localeService = this.injector.get(LocaleService);
            }
            if (this.localeService) {
                /** @type {?} */
                var localeId = this.localeService.localeId;
                return Utils.getMultilingualValue(valObj, localeId);
            }
            else {
                return valObj['zh-CHS'];
            }
        }
        else {
            return '';
        }
    };
    // 启用标识可编辑单元格时，内容为空时设置提示语
    // 启用标识可编辑单元格时，内容为空时设置提示语
    /**
     * @private
     * @param {?} col
     * @param {?} val
     * @param {?} rowData
     * @param {?} isFooter
     * @return {?}
     */
    FormatCellDataPipe.prototype.setPlaceHolderWhenEnableEditCellStyle = 
    // 启用标识可编辑单元格时，内容为空时设置提示语
    /**
     * @private
     * @param {?} col
     * @param {?} val
     * @param {?} rowData
     * @param {?} isFooter
     * @return {?}
     */
    function (col, val, rowData, isFooter) {
        this.getDatagridInstance();
        if (this.dataGrid) {
            /*
            if (!this.dataGrid.editable || (val !== null && val !== undefined && val !== '') || isFooter || this.cellIsReadOnly(col, rowData)) {
                if (this.elRef) {
                    const span = this.elRef.nativeElement.querySelector('.cell-text-box');
                    if (span && span.className.indexOf('cell-empty') > -1) {
                        span.className = span.className.replace('cell-empty', ' ');
                    }
                }

                return val;
            }
*/
            if (this.dataGrid.enableEditCellStyle) {
                if (!this.dataGrid.editable || (val !== null && val !== undefined && val !== '') || isFooter || this.cellIsReadOnly(col, rowData)) {
                    if (this.elRef) {
                        /** @type {?} */
                        var span = this.elRef.nativeElement.querySelector('.cell-text-box');
                        if (span && span.className.indexOf('cell-empty') > -1) {
                            span.className = span.className.replace('cell-empty', ' ');
                        }
                    }
                    return val;
                }
                if (this.elRef) {
                    /** @type {?} */
                    var span = this.elRef.nativeElement.querySelector('.cell-text-box');
                    if (span && span.className.indexOf('cell-empty') === -1) {
                        span.className = span.className + ' cell-empty';
                    }
                }
                return Utils.getWhenEmptyText(col, this.localeId);
            }
            return val;
        }
        return val;
    };
    /**
     * @private
     * @return {?}
     */
    FormatCellDataPipe.prototype.getDatagridInstance = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.dataGrid) {
            this.dataGrid = this.injector.get(DatagridComponent, null);
        }
        if (!this.elRef) {
            this.elRef = this.injector.get(ElementRef, null);
        }
    };
    /**
     * @param {?} col
     * @param {?} rowData
     * @return {?}
     */
    FormatCellDataPipe.prototype.cellIsReadOnly = /**
     * @param {?} col
     * @param {?} rowData
     * @return {?}
     */
    function (col, rowData) {
        return this.dataGrid.cellIsReadOnly(col, rowData);
    };
    FormatCellDataPipe.decorators = [
        { type: Pipe, args: [{ name: 'formatCellData', pure: false },] }
    ];
    /** @nocollapse */
    FormatCellDataPipe.ctorParameters = function () { return [
        { type: ColumnFormatService },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    return FormatCellDataPipe;
}());
export { FormatCellDataPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FormatCellDataPipe.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    FormatCellDataPipe.prototype.dataGrid;
    /**
     * @type {?}
     * @private
     */
    FormatCellDataPipe.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    FormatCellDataPipe.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    FormatCellDataPipe.prototype.cfs;
    /**
     * @type {?}
     * @private
     */
    FormatCellDataPipe.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,