import { Directive, Injector, Input } from "@angular/core";
import { ChangeType, FrameContext, VariableParseService } from "@farris/devkit";
import { PortletComponent } from '@gspwidget/portlet';
import { Subject } from "rxjs";
import { filter } from "rxjs/operators";
import { ExpressionType } from "./types";
var DATA_PATTERN = /\{:?DATA~(\S+?)\}/;
var DATA_PATTERN_GLOBAL = new RegExp(DATA_PATTERN, 'g');
var UI_STATE_PATTERN = /\{:?UISTATE~(\S+?)\}/;
var UI_STATE_PATTERN_GLOBAL = new RegExp(UI_STATE_PATTERN, 'g');
var PortletFilterBindingDirective = /** @class */ (function () {
    function PortletFilterBindingDirective(injector, portletComponent, frameContext, variableParseService) {
        this.injector = injector;
        this.portletComponent = portletComponent;
        this.frameContext = frameContext;
        this.variableParseService = variableParseService;
        this.subject = new Subject();
        this.FilterFieldKey = 'dpId';
        this.FilterValueKey = 'value';
    }
    Object.defineProperty(PortletFilterBindingDirective.prototype, "changes", {
        get: function () {
            return this.subject;
        },
        enumerable: true,
        configurable: true
    });
    PortletFilterBindingDirective.prototype.ngOnInit = function () {
        var _this = this;
        // 监听数据变化，执行第一次的绑定
        this.frameContext.bindingData.changes.pipe(filter(function (change) {
            return (change.type === ChangeType.Load || change.type === ChangeType.Remove || change.type === ChangeType.Update || change.type === ChangeType.SelectionChanged) && (!change.path || change.path.length < 1);
        })).subscribe(function (change) {
            _this.filter();
        });
        this.changes.subscribe(function () {
            _this.filter();
        });
        this.observeChanges();
    };
    PortletFilterBindingDirective.prototype.filter = function () {
        var filters = this.buildFilters();
        this.portletComponent.widget.handleFilterChange(filters);
    };
    PortletFilterBindingDirective.prototype.deserializeFilter = function () {
        if (!this.filters) {
            return [];
        }
        var filters = [];
        if (typeof this.filters === 'string') {
            filters = JSON.parse(this.filters);
        }
        else if (Array.isArray(this.filters)) {
            filters = this.filters;
        }
        else {
            console.error('invalid filters');
        }
        return filters;
    };
    /**
     * 将表单配置的过滤条件转换为小部件支持的过滤条件
     * @returns
     */
    PortletFilterBindingDirective.prototype.buildFilters = function () {
        var _this = this;
        var filters = this.deserializeFilter();
        var result = [];
        if (!filters || filters.length < 1) {
            return result;
        }
        filters.forEach(function (filter) {
            result.push({
                dpId: filter[_this.FilterFieldKey],
                value: _this.variableParseService.parse(filter[_this.FilterValueKey], _this.frameContext)
            });
        });
        return result;
    };
    PortletFilterBindingDirective.prototype.collectDependencies = function (expression) {
        var bindingDataDependencies = this.getBindingDataDependencies(expression);
        var uistateDependencies = this.getUIstateDependencies(expression);
        return bindingDataDependencies.concat(uistateDependencies);
    };
    PortletFilterBindingDirective.prototype.getBindingDataDependencies = function (expression) {
        var matchs = expression.match(DATA_PATTERN_GLOBAL);
        return this.buildDependencies(matchs, DATA_PATTERN, ExpressionType.BindingData);
    };
    PortletFilterBindingDirective.prototype.getUIstateDependencies = function (expression) {
        var matchs = expression.match(UI_STATE_PATTERN_GLOBAL);
        return this.buildDependencies(matchs, UI_STATE_PATTERN, ExpressionType.UIState);
    };
    PortletFilterBindingDirective.prototype.buildDependencies = function (expressions, expr, expressionType) {
        var _this = this;
        var dependencies = [];
        expressions && expressions.forEach(function (expression) {
            var pathMatches = expression.match(expr);
            var dependency = _this.buildDependency(pathMatches, expressionType);
            dependencies.push(dependency);
        });
        return dependencies;
    };
    PortletFilterBindingDirective.prototype.buildDependency = function (matchs, expressionType) {
        if (matchs && matchs.length === 2) {
            var exps = matchs[1].split('/').filter(function (p) { return p; });
            var frameId = exps.shift();
            var paths = exps;
            var dependency = {
                type: expressionType,
                frameId: frameId,
                paths: paths
            };
            return dependency;
        }
    };
    PortletFilterBindingDirective.prototype.getFrameContext = function (frameId) {
        frameId = this.frameContext.getFrameId(frameId);
        return this.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
    };
    PortletFilterBindingDirective.prototype.observeChanges = function () {
        var _this = this;
        var filters = this.deserializeFilter();
        filters && filters.forEach(function (filter) {
            var dependencies = _this.collectDependencies(filter[_this.FilterValueKey]);
            if (dependencies && dependencies.length > 0) {
                dependencies.forEach(function (dep) {
                    var frameContext = _this.getFrameContext(dep.frameId);
                    if (dep.type === ExpressionType.BindingData) {
                        _this.observeBindingDataChange(frameContext, dep.paths);
                    }
                    else if (dep.type === ExpressionType.UIState) {
                        _this.observeUIStateChange(frameContext, dep.paths.pop());
                    }
                });
            }
        });
    };
    PortletFilterBindingDirective.prototype.observeUIStateChange = function (frameContext, path) {
        var _this = this;
        frameContext.uiState.changes.subscribe(function (change) {
            if (change.field === path) {
                _this.subject.next();
            }
        });
    };
    PortletFilterBindingDirective.prototype.observeBindingDataChange = function (frameContext, paths) {
        var _this = this;
        frameContext.bindingData.changes.pipe(
        // 只监听主表变化
        filter(function (change) { return change.type === ChangeType.ValueChanged; })).subscribe(function (change) {
            if (change.path.join('/') === paths.join('/')) {
                _this.subject.next();
            }
        });
    };
    PortletFilterBindingDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[portlet-filter-binding]"
                },] }
    ];
    /** @nocollapse */
    PortletFilterBindingDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: PortletComponent },
        { type: FrameContext },
        { type: VariableParseService }
    ]; };
    PortletFilterBindingDirective.propDecorators = {
        filters: [{ type: Input, args: ["portlet-filter-binding",] }]
    };
    return PortletFilterBindingDirective;
}());
export { PortletFilterBindingDirective };
//# sourceMappingURL=data:application/json;base64,