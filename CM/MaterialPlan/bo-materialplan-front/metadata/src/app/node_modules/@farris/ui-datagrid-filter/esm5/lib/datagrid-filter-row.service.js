/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
import { ColumnFilterType, DatagridUtils } from '@farris/ui-datagrid';
import { FilterOperator } from './operations/operators';
var DatagridFilterRowService = /** @class */ (function () {
    function DatagridFilterRowService() {
        this.columnConditionSubject = new Subject();
        this.filterRowConditions$ = this.columnConditionSubject.asObservable();
        this.columnConditions = {};
        this.filterTextboxChanged = new EventEmitter();
        this.removeField = new EventEmitter();
    }
    /**
     * @param {?} frp
     * @return {?}
     */
    DatagridFilterRowService.prototype.setFilterPanel = /**
     * @param {?} frp
     * @return {?}
     */
    function (frp) {
        this.currentFilterPanel = frp;
    };
    /**
     * @return {?}
     */
    DatagridFilterRowService.prototype.hasFilterPanel = /**
     * @return {?}
     */
    function () {
        return !!this.currentFilterPanel;
    };
    /**
     * @return {?}
     */
    DatagridFilterRowService.prototype.closeFilterPanel = /**
     * @return {?}
     */
    function () {
        if (this.hasFilterPanel()) {
            if (this.currentFilterPanel.instance.documentClickHandle) {
                this.currentFilterPanel.instance.documentClickHandle();
            }
            document.body.removeChild(this.currentFilterPanel.location.nativeElement);
            this.currentFilterPanel.destroy();
            this.currentFilterPanel = null;
            document.body.style.overflow = 'auto';
        }
    };
    /**
     * @param {?=} emitEvent
     * @return {?}
     */
    DatagridFilterRowService.prototype.clear = /**
     * @param {?=} emitEvent
     * @return {?}
     */
    function (emitEvent) {
        if (emitEvent === void 0) { emitEvent = true; }
        this.columnConditions = {};
        if (emitEvent) {
            this.columnConditionSubject.next({});
        }
    };
    /**
     * @param {?} field
     * @param {?=} opts
     * @return {?}
     */
    DatagridFilterRowService.prototype.removeFilterField = /**
     * @param {?} field
     * @param {?=} opts
     * @return {?}
     */
    function (field, opts) {
        if (this.columnConditions) {
            delete this.columnConditions[field];
            if (!opts || (opts && opts.emitEvent)) {
                this.emitColumnConditionChanged(this.columnConditions);
            }
            this.removeField.emit(field);
        }
    };
    /**
     * @param {?} field
     * @param {?} colCondition
     * @return {?}
     */
    DatagridFilterRowService.prototype._updateColumnConditions = /**
     * @param {?} field
     * @param {?} colCondition
     * @return {?}
     */
    function (field, colCondition) {
        var _this = this;
        var _a, _b;
        /** @type {?} */
        var currentCondition = this.columnConditions[field];
        if (!currentCondition) {
            this.columnConditions = Object.assign(this.columnConditions, (_a = {}, _a[field] = colCondition, _a));
        }
        else {
            if (JSON.stringify(currentCondition) !== JSON.stringify(colCondition)) {
                this.columnConditions = Object.assign(this.columnConditions, (_b = {}, _b[field] = colCondition, _b));
            }
        }
        // 值为 ‘’ ，则代表着不参与查询
        Object.keys(this.columnConditions).forEach((/**
         * @param {?} k
         * @return {?}
         */
        function (k) {
            if (!_this.columnConditions[k]) {
                // delete this.columnConditions[k];
                _this.columnConditions[k] = null;
            }
        }));
    };
    /**
     * @param {?} field
     * @param {?} colCondition
     * @return {?}
     */
    DatagridFilterRowService.prototype.updateColumnConditions = /**
     * @param {?} field
     * @param {?} colCondition
     * @return {?}
     */
    function (field, colCondition) {
        this._updateColumnConditions(field, colCondition);
        this.emitColumnConditionChanged(this.columnConditions);
    };
    /**
     * @private
     * @param {?} conditions
     * @return {?}
     */
    DatagridFilterRowService.prototype.emitColumnConditionChanged = /**
     * @private
     * @param {?} conditions
     * @return {?}
     */
    function (conditions) {
        // const farr = this.gridInstance.remoteFilter ? this.convert2FilterArray(this.columnConditions) : this.columnConditions;
        this.columnConditionSubject.next(conditions);
    };
    // 获取过滤行显示文本
    // 获取过滤行显示文本
    /**
     * @param {?} column
     * @param {?} condition
     * @return {?}
     */
    DatagridFilterRowService.prototype.condition2string = 
    // 获取过滤行显示文本
    /**
     * @param {?} column
     * @param {?} condition
     * @return {?}
     */
    function (column, condition) {
        if (!condition || typeof condition === 'string') {
            return '';
        }
        /** @type {?} */
        var andText = this.gridInstance.localeService.getValue('datagrid.filter.and');
        /** @type {?} */
        var orText = this.gridInstance.localeService.getValue('datagrid.filter.or');
        /** @type {?} */
        var getRelationLabel = (/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            if (r === 'and') {
                return andText;
            }
            else if (r === 'or') {
                return orText;
            }
            else {
                return '';
            }
        });
        /** @type {?} */
        var filterPreViewString = '';
        if (column.filter.type === ColumnFilterType.fromdata) {
            filterPreViewString = "(" + condition.value1.length + ")";
            if (condition.value1) {
                filterPreViewString += " " + condition.value1.join(',');
            }
        }
        else if (column.filter.type === ColumnFilterType.enum) {
            /** @type {?} */
            var enumOpts = (/** @type {?} */ (this.getEnumOptions(column)));
            var valueField_1 = enumOpts.valueField, textField_1 = enumOpts.textField, data_1 = enumOpts.data;
            filterPreViewString = "(" + condition.value1.length + ")";
            if (condition.value1) {
                filterPreViewString += " " + condition.value1.map((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    /** @type {?} */
                    var enumItem = data_1.find((/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) { return d[valueField_1] == v; }));
                    return enumItem[textField_1];
                })).join(',');
            }
        }
        else {
            if (condition) {
                /** @type {?} */
                var operator1Label = this.getOperatorLabel(condition.operator1);
                if (!this.isEmpty(condition.value1)) {
                    filterPreViewString = operator1Label + " " + condition.value1;
                    /** @type {?} */
                    var operator2Label = this.getOperatorLabel(condition.operator2);
                    if (!this.isEmpty(condition.value2)) {
                        filterPreViewString += " " + getRelationLabel(condition.relation) + " " + operator2Label + " " + condition.value2;
                    }
                    else {
                        if (condition.operator2 !== undefined) {
                            /** @type {?} */
                            var op2 = parseInt('' + condition.operator2, 10);
                            if (op2 === FilterOperator.Empty || op2 === FilterOperator.NotEmpty) {
                                filterPreViewString += " " + getRelationLabel(condition.relation) + " " + operator2Label;
                            }
                        }
                    }
                }
                else {
                    /** @type {?} */
                    var op1 = parseInt('' + condition.operator1, 10);
                    if (op1 === FilterOperator.Empty || op1 === FilterOperator.NotEmpty) {
                        filterPreViewString = "" + operator1Label;
                    }
                }
            }
        }
        return filterPreViewString;
    };
    /**
     * @private
     * @param {?} v
     * @return {?}
     */
    DatagridFilterRowService.prototype.isEmpty = /**
     * @private
     * @param {?} v
     * @return {?}
     */
    function (v) {
        return v === '' || v === undefined || v === null;
    };
    /**
     * @param {?} column
     * @return {?}
     */
    DatagridFilterRowService.prototype.getEnumOptions = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        /** @type {?} */
        var colFilter = (/** @type {?} */ (column.filter));
        /** @type {?} */
        var datatype = colFilter.type;
        /** @type {?} */
        var enumSetting = null;
        if (datatype === ColumnFilterType.enum) {
            /** @type {?} */
            var fmt = (/** @type {?} */ (column.formatter));
            if (fmt) {
                enumSetting = fmt.options;
            }
            else {
                if (colFilter.options) {
                    enumSetting = colFilter.options;
                }
            }
        }
        else { // enum 数据源来自grid 数据列表
            // enum 数据源来自grid 数据列表
            /** @type {?} */
            var columnData = this.gridInstance.dfs.getData(true).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return DatagridUtils.getValue(column.field, n);
            }));
            // 去除重复
            /** @type {?} */
            var enumData = Array.from(new Set(columnData)).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return {
                    value: n, label: n
                };
            }));
            enumSetting = {
                valueField: 'value', textField: 'label', data: enumData, idField: 'value'
            };
        }
        return enumSetting;
    };
    // 获取操作符标签
    // 获取操作符标签
    /**
     * @param {?} code
     * @return {?}
     */
    DatagridFilterRowService.prototype.getOperatorLabel = 
    // 获取操作符标签
    /**
     * @param {?} code
     * @return {?}
     */
    function (code) {
        /** @type {?} */
        var strOper = FilterOperator[code];
        if (strOper) {
            /** @type {?} */
            var operName = strOper[0].toLowerCase() + strOper.substr(1);
            /** @type {?} */
            var key = "datagrid.filter.operators." + operName;
            return this.gridInstance.localeService.getValue(key);
        }
        return '';
    };
    DatagridFilterRowService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DatagridFilterRowService.ctorParameters = function () { return []; };
    return DatagridFilterRowService;
}());
export { DatagridFilterRowService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridFilterRowService.prototype.columnConditionSubject;
    /** @type {?} */
    DatagridFilterRowService.prototype.filterRowConditions$;
    /** @type {?} */
    DatagridFilterRowService.prototype.columnConditions;
    /** @type {?} */
    DatagridFilterRowService.prototype.currentFilterPanel;
    /** @type {?} */
    DatagridFilterRowService.prototype.gridInstance;
    /** @type {?} */
    DatagridFilterRowService.prototype.filterTextboxChanged;
    /** @type {?} */
    DatagridFilterRowService.prototype.removeField;
}
//# sourceMappingURL=data:application/json;base64,