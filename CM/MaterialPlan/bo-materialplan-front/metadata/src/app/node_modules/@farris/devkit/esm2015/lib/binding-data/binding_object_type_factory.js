import { BindingPropertyType } from './binding_property';
import { PropertyUtil } from './property_util';
import { BaseBindingObject } from './base_binding_object';
import { BindingListFactory } from './binding_list_factory';
import { TranslateService } from '../i18n/translate_service';
// import { BindingObjectFactory } from './binding_object_factory';
/**
 * BindingObjectTypeFactory
 */
export class BindingObjectTypeFactory {
    /**
     * 创建BindingObject
     * @param properties
     * @param data
     * @returns
     */
    static create(properties /*, data?: any*/) {
        const bindingObjectType = this.getType(properties);
        return new bindingObjectType();
    }
    /**
     * 创建原型类型
     * @param properties
     * @returns
     */
    static createType(properties) {
        // 继承原绑定对象所有属性
        const bindingObjectType = class BindingObjectType extends BaseBindingObject {
            constructor() {
                super();
                // this.innerValues = ImmutableMap(Object.assign({}, data));
            }
        };
        // 获取主键
        const primaryKey = PropertyUtil.getPrimaryKey(properties);
        // 设置主键
        bindingObjectType.prototype.primaryKey = primaryKey;
        bindingObjectType.prototype.properties = properties;
        // 将属性扩展到原型对象上
        this.extendProperties(bindingObjectType.prototype, properties);
        return bindingObjectType;
    }
    /**
     * 扩展原型属性
     * @param typePrototype
     * @param properties
     */
    static extendProperties(typePrototype, properties) {
        // 扩展BindingObject属性
        properties.forEach((property) => {
            if (property.type === BindingPropertyType.List) {
                this.extendListProperty(typePrototype, property);
            }
            else if (property.type === BindingPropertyType.Object) {
                this.extendObjectProperty(typePrototype, property);
            }
            else if (property.type === BindingPropertyType.Dynamic) {
                this.extendDynamicObjectProperty(typePrototype, property);
            }
            else {
                this.extendPlainProperty(typePrototype, property);
            }
        });
    }
    /**
     * 扩展原型列表属性
     * @param typePrototype
     * @param property
     */
    static extendListProperty(typePrototype, property) {
        const propertyName = property.name;
        const childListProperties = PropertyUtil.getProperties(property.entityType);
        const key = `_${propertyName}_`;
        // 将子的BindingList实例赋值给当前属性
        Object.defineProperty(typePrototype, propertyName, {
            get: function () {
                let bindingList = this[key];
                if (!bindingList) {
                    bindingList = BindingListFactory.create(childListProperties);
                    this[key] = bindingList;
                    // 加载数据
                    const data = this.getValue(propertyName);
                    if (data) {
                        const bindingObjects = data.map(item => {
                            const bindingObject = BindingObjectTypeFactory.create(childListProperties);
                            return bindingObject;
                        });
                        bindingList.load(bindingObjects);
                    }
                    // 指定子List的parent、监听子List的changes事件
                    bindingList.parent = this;
                    bindingList.changes.subscribe((change) => {
                        change.path.unshift(propertyName);
                        this.changes.next(change);
                    });
                }
                return bindingList;
            },
            set: function (bindingList) {
                this[key] = bindingList;
            }
        });
    }
    /**
     * 扩展原型对象属性
     * @param typePrototype
     * @param property
     */
    static extendObjectProperty(typePrototype, property) {
        const propertyName = property.name;
        const childObjectProperties = PropertyUtil.getProperties(property.entityType);
        const key = `_${propertyName}_`;
        Object.defineProperty(typePrototype, propertyName, {
            get: function () {
                let bindingObject = this[key];
                if (!bindingObject) {
                    const value = this.getValue(propertyName) || {};
                    bindingObject = BindingObjectTypeFactory.create(childObjectProperties);
                    this[key] = bindingObject;
                    // 指定子Object的parent、监听子Object的changes事件
                    bindingObject.parent = this;
                    bindingObject.changes.subscribe((change) => {
                        change.path.unshift(propertyName);
                        this.changes.next(change);
                    });
                }
                return bindingObject;
            },
            set: function (value) {
                this[key] = value;
            }
        });
    }
    /**
     * 扩展原型动态属性
     * @param typePrototype
     * @param property
     */
    static extendDynamicObjectProperty(typePrototype, property) {
        const propertyName = property.name;
        // Object.defineProperty(typePrototype, propertyName, {
        //   value: null
        // });
        typePrototype[propertyName] = null;
    }
    /**
     * 扩展原型简单属性
     * @param typePrototype
     * @param property
     */
    static extendPlainProperty(typePrototype, property) {
        const propertyName = property.name;
        Object.defineProperty(typePrototype, propertyName, {
            get: function () {
                if (property.enableMultiLangInput === true) {
                    let value = this.getValue(propertyName, false);
                    if (!value) {
                        value = this.getValue(propertyName, false);
                        const langCode = TranslateService.getCurrentLanguage();
                        return { [langCode]: value };
                    }
                    return value;
                }
                else {
                    const value = this.getValue(propertyName);
                    return value;
                }
            },
            set: function (value) {
                const oldValue = this.getValue(propertyName);
                if (value === oldValue) {
                    return;
                }
                this.setValue(propertyName, value, true, true);
            }
        });
    }
    /**
     * 获取缓存的bindingList模板类
     * @param properties bindingList属性
     * @returns
     */
    static getType(properties) {
        if (this.provider.has(properties)) {
            return this.provider.get(properties);
        }
        const bindingObjectType = this.createType(properties);
        this.provider.set(properties, bindingObjectType);
        return bindingObjectType;
    }
}
BindingObjectTypeFactory.provider = new Map();
//# sourceMappingURL=data:application/json;base64,