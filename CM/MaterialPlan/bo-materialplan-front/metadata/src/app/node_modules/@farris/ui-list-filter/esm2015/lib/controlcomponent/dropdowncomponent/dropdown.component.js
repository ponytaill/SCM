/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, EventEmitter, Output } from '@angular/core';
import { ControlType } from '../../entity/controltype';
import { EnumType } from '../../entity/controltype/dropdownlist/enumtype';
import { EnumIntegerValue } from '../../entity/controltype/dropdownlist/integerenumvalue';
import { EnumStringValue } from '../../entity/controltype/dropdownlist/stringenumvalue';
import { EnumBoolValue } from '../../entity/controltype/dropdownlist/boolenumvalue';
import { SolutionService } from '../../service/solution.service';
export class DropDownComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        this.dropDownListDataSource = new Array();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.getDataSource();
        // const initialValue = this.item.value as DropDownListValue;
        // initialValue.value && (this.selectedItemId = initialValue.value.getEnumValue());
        if (this.item) {
            /** @type {?} */
            const type = Object.prototype.toString.call(this.item.placeHolder);
            if (type == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.placeholder = this.item.control.placeholder;
                }
            }
            else {
                this.placeholder = this.item.placeHolder;
            }
        }
        this.getDataSource();
        /** @type {?} */
        const initialValue = (/** @type {?} */ (this.item.value));
        initialValue.value && (this.selectedItemId = initialValue.value);
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
        ((/** @type {?} */ (this.item.value))).clear$.subscribe((/**
         * @return {?}
         */
        () => {
            this.selectedItemId = '';
        }));
        // this.testId = this.solutionService.getGuid();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.getDataSource();
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.selectedItemId = ((/** @type {?} */ (this.item.value))).value;
            }
        }
        //console.log(this.dropDownListDataSource);
    }
    /**
     * @return {?}
     */
    getDataSource() {
        if (this.item && this.item.value
            && this.item.control && this.item.control.getControlType() == ControlType.DropDown) {
            /** @type {?} */
            let dropDownList = ((/** @type {?} */ (this.item.control)));
            if (dropDownList.valueType == EnumType.BoolType) {
                this.dropDownListDataSource = Array();
                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                    dropDownList.enumValues.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    element => {
                        this.dropDownListDataSource.push(Object.assign(new EnumBoolValue(), element));
                    }));
                }
            }
            else if (dropDownList.valueType == EnumType.IntType) {
                this.dropDownListDataSource = Array();
                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                    dropDownList.enumValues.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    element => {
                        this.dropDownListDataSource.push(Object.assign(new EnumIntegerValue(), element));
                    }));
                }
            }
            else if (dropDownList.valueType == EnumType.StringType) {
                this.dropDownListDataSource = Array();
                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                    dropDownList.enumValues.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    element => {
                        this.dropDownListDataSource.push(Object.assign(new EnumStringValue(), element));
                    }));
                }
            }
        }
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearch(event) {
        if (event) {
            ((/** @type {?} */ (this.item.value))).value = event.data.value;
        }
        else {
            ((/** @type {?} */ (this.item.value))).value = '';
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClear(event) {
        ((/** @type {?} */ (this.item.value))).value = '';
        this.searchHandle.emit();
    }
}
DropDownComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-dropdown',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <farris-combo-list\r\n        [idField]=\"'value'\"\r\n        [textField]=\"'name'\"\r\n        [data]=\"dropDownListDataSource\"\r\n        [(ngModel)]=\"selectedItemId\"\r\n        [readonly]=\"disabled\"\r\n        [editable]=\"false\"\r\n        (selectChange)=\"onSearch($event)\"\r\n        (clear)=\"onClear($event)\"\r\n        [placeholder]=\"placeholder\"\r\n    ></farris-combo-list>\r\n\r\n</div>\r\n\r\n<!-- (valueChange)=\"onSearch($event)\" -->"
            }] }
];
/** @nocollapse */
DropDownComponent.ctorParameters = () => [
    { type: SolutionService }
];
DropDownComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
    changeFields: [{ type: Input }]
};
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    DropDownComponent.prototype.item;
    /** @type {?} */
    DropDownComponent.prototype.autoLabel;
    /** @type {?} */
    DropDownComponent.prototype.disabled;
    /** @type {?} */
    DropDownComponent.prototype.searchHandle;
    /** @type {?} */
    DropDownComponent.prototype.dropDownListDataSource;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    DropDownComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    DropDownComponent.prototype.showlabel;
    /** @type {?} */
    DropDownComponent.prototype.selectedItemId;
    /** @type {?} */
    DropDownComponent.prototype.placeholder;
    /**
     * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
     * @type {?}
     */
    DropDownComponent.prototype.changeFields;
    /**
     * @type {?}
     * @private
     */
    DropDownComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,