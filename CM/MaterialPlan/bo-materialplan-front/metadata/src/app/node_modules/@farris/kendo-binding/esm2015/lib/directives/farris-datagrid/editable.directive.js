import { Directive, Input, Injector, NgZone, } from '@angular/core';
import { of } from 'rxjs';
import { BindingData, ViewModel } from '@farris/devkit';
import { DatagridComponent } from '@farris/ui-datagrid';
import { isNumber } from 'lodash-es';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { RuntimeStateService } from '@farris/ui-common';
import { DialogService } from '@farris/ui-dialog';
export class EditableDirective {
    constructor(bindingData, viewModel, grid, dateService, injector, rts, dialogSer, ngZone) {
        this.bindingData = bindingData;
        this.viewModel = viewModel;
        this.grid = grid;
        this.dateService = dateService;
        this.injector = injector;
        this.rts = rts;
        this.dialogSer = dialogSer;
        this.ngZone = ngZone;
        /**
         * 编辑时取消分组
         */
        this.disableGroupOnEditing = true;
        /**
         * 临时记录grid分组字段
         */
        this.groupFields = [];
    }
    get bindingList() {
        // 根实体
        if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
            return this.bindingData.list;
        }
        // 子实体
        let bindingPath = this.viewModel.bindingPath.substr(1);
        bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
        const paths = bindingPath.split('/');
        const filteredPaths = paths.filter((part) => {
            return part !== '';
        });
        return this.bindingData.getValue(filteredPaths);
    }
    ngOnInit() {
        this.apply();
    }
    ngOnChanges(changes) {
        this.apply();
    }
    ngOnDestroy() {
        this.detach();
    }
    /**
     * 应用属性
     */
    apply() {
        if (!this.grid) {
            return;
        }
        this.handleGroupStatus();
        if (this.gridEditable) {
            // if(!this.grid.remoteFilter){
            //   this.grid.clearCondition();
            // }
            this.grid.editable = true;
            this.grid.disableHeader(true);
            this.handleBeginEditEvent();
            this.handleAfterEditEvent();
            this.handleEndEditEvent();
        }
        else {
            this.grid.editable = false;
            this.grid.disableHeader(false);
            if (this.grid && typeof this.grid.sort === 'function' && this.grid.sortName) {
                this.grid.sort();
            }
            this.detach();
        }
    }
    /**
     * 编辑时取消分组
     */
    handleGroupStatus() {
        if (this.disableGroupOnEditing === false) {
            return;
        }
        const groupField = this.grid && this.grid.groupField || null;
        if (groupField) {
            if (this.gridEditable) {
                this.groupFields = [groupField];
                this.grid.setGroupFields('');
            }
        }
        else {
            if (this.groupFields && this.groupFields.length > 0) {
                const groupField = this.groupFields.pop();
                if (this.groupFields.length > 0) {
                    this.groupFields = [];
                }
                this.grid.setGroupFields(groupField);
            }
        }
    }
    /**
     * 处理开始编辑事件
     */
    handleBeginEditEvent() {
        this.beginEditSubscription = this.grid.beginEdit.subscribe((e) => {
            if (!e) {
                return;
            }
            const column = e.column;
            if (column && column.editor) {
                const editorInstance = e.editor.componentRef.instance;
                if (!editorInstance || !editorInstance.instance) {
                    return;
                }
                let mapFields = editorInstance.instance.mapFields;
                if (column.editor.type === 'lookup' || column.editor.type === 'PersonnelSelector'
                    || column.editor.type === 'OrganizationSelector' || column.editor.type === 'external-integration' || 'EmployeeSelector' === column.editor.type || 'EmployeeOrgSelector' === column.editor.type) {
                    const subject = editorInstance.instance.selectedData;
                    if (subject) {
                        subject.subscribe((data) => {
                            mapFields = editorInstance.instance.mapFields;
                            this.lookupMapping(data, mapFields);
                        });
                    }
                    const clearMappings = editorInstance.instance.clearMappings;
                    if (clearMappings) {
                        clearMappings.subscribe((result) => {
                            const mapFields = Object.assign({}, editorInstance.instance.mapFields);
                            const value = result && result.value || null;
                            const binding = editorInstance.column && editorInstance.column.field;
                            const lookupTextField = editorInstance.instance.textField;
                            const data = {};
                            if (binding) {
                                const textFieldMapping = mapFields[lookupTextField];
                                if (textFieldMapping) {
                                    mapFields[lookupTextField] = textFieldMapping.split(',').filter(item => item !== binding).join(',');
                                }
                                const parentPaths = this.getBindingPathArray();
                                this.bindingData.setValue(parentPaths.concat(binding.split('.')), value, true, true);
                            }
                            // this.setValue(data, lookupTextField.split('.'), value);
                            Object.keys(mapFields).forEach(field => {
                                this.setValue(data, field.split('.'), '');
                            });
                            this.lookupMapping(data, mapFields, true);
                        });
                    }
                }
                if (column.editor.type === 'combo-lookup') {
                    editorInstance.instance.valueChange.subscribe((e) => {
                        mapFields = editorInstance.instance.mapFields;
                        this.lookupMapping(e.selections || [], mapFields);
                    });
                }
                if (['combo-lookup', 'combolist', 'lookup', 'PersonnelSelector', 'OrganizationSelector', 'external-integration', 'EmployeeSelector', 'EmployeeOrgSelector'].includes(column.editor.type)) {
                    if (editorInstance.instance.clear && editorInstance.instance.clear.subscribe) {
                        editorInstance.instance.clear.subscribe(() => {
                            this.lookupMapping(null, mapFields);
                        });
                    }
                }
                if (column.editor.type === 'combolist') {
                    if (mapFields) {
                        editorInstance.instance.valueChange.subscribe(e => {
                            const pathArr = this.getBindingPathArray();
                            this.viewModel.bindingData.setValue(pathArr.concat(mapFields.split('.')), editorInstance.instance.selectedValues, true, true);
                        });
                    }
                }
            }
        });
    }
    /**
     * 处理编辑事件
     */
    handleAfterEditEvent() {
        this.grid.afterEdit = (rowIndex, rowData, column, editor) => {
            if (this.dialogSer.hasDialogOpened()) {
                return of(false);
            }
            if (this.rts) {
                // 帮助组件文本变化后去查询
                if (this.rts.getFormState('lookup.pending')) {
                    return of(false);
                }
            }
            // 更新数据源
            if (!editor || !editor.formControl) {
                return of(false);
            }
            return of(true);
        };
    }
    /**
     * 处理结束编辑事件
     */
    handleEndEditEvent() {
        this.endEditSubscription = this.grid && this.grid.endEdit && this.grid.endEdit.subscribe((event) => {
            const { value = undefined, column = undefined, rowData = {} } = event || {};
            const primaryValue = rowData && rowData[this.grid.idField] || null;
            this.updateBindingData(value, column, primaryValue);
        });
    }
    /*
     * 给列表赋值 或给formcontrol赋值
     */
    updateBindingData(value, column, primaryValue) {
        if (!column) {
            return;
        }
        const currentColumnType = column.dataType;
        // 同时判断gridOption的列对象
        const fieldPaths = column.field.split('.');
        // 是否为大数
        const isBigNumber = column && column.editor && column.editor.options && column.editor.options.bigNumber;
        // 存在行编辑器
        if (currentColumnType === 'date') {
            let result;
            if (value) {
                result = this.dateService.formatTo(value, 'yyyy-MM-dd');
            }
            else {
                result = value;
            }
            this.updateBindingList(primaryValue, fieldPaths.join('.'), result);
        }
        else if (currentColumnType === 'datetime') {
            // if (!value) {
            //   value = '0001-01-01T00:00:00';
            // }
            this.updateBindingList(primaryValue, fieldPaths.join('.'), value);
        }
        else if (currentColumnType === 'number' && !isBigNumber) {
            if (value === null || value === undefined) {
                this.updateBindingList(primaryValue, fieldPaths.join('.'), null);
            }
            else {
                this.updateBindingList(primaryValue, fieldPaths.join('.'), Number(value));
            }
        }
        else {
            this.updateBindingList(primaryValue, fieldPaths.join('.'), value);
        }
    }
    updateBindingList(primaryValue, propertyName, value) {
        const viewModel = this.viewModel || null;
        if (!viewModel || !propertyName) {
            return;
        }
        // 更新主表部分行的字段
        const propertyNames = propertyName.split('.').filter(item => item);
        const bindingPath = this.getBindingPathArray();
        // 取出来的一定是bindingList
        const list = this.bindingData.getValue(bindingPath);
        // 修改的是当前行
        if (list && primaryValue === list.currentItem.primaryKeyValue) {
            const paths = bindingPath.concat(propertyNames);
            this.bindingData.setValue(paths, value, true, true);
            return;
        }
        const bindingObject = this.bindingList.findById(primaryValue);
        if (!bindingObject) {
            return;
        }
        if (propertyNames.length < 2) {
            bindingObject.setValue(propertyName, value, true, true);
        }
        else {
            let targetBindingObject = null;
            const fpaths = propertyNames.slice(0, propertyNames.length - 1);
            const targetPropertyName = propertyNames[propertyNames.length - 1];
            fpaths.forEach(prop => {
                targetBindingObject = targetBindingObject && targetBindingObject[prop] || bindingObject[prop];
            });
            // todo:需要添加值变化事件
            targetBindingObject.setValue(targetPropertyName, value, true, true);
        }
    }
    detach() {
        if (this.beginEditSubscription && typeof this.beginEditSubscription.unsubscribe === 'function') {
            this.beginEditSubscription.unsubscribe();
        }
        if (this.endEditSubscription && typeof this.endEditSubscription.unsubscribe === 'function') {
            this.endEditSubscription.unsubscribe();
        }
    }
    //#region 帮助字段映射
    lookupMapping(helpData, mapFields, asClear = false) {
        if (!mapFields) {
            return;
        }
        // 关闭变更检测
        const appContext = this.viewModel.frameContext.appContext;
        appContext.changeDetectionController.detach();
        const pathArr = this.getBindingPathArray();
        let helpFields = Object.keys(mapFields);
        const primaryInfo = this.getMapFieldsPrimaryKey(mapFields, pathArr);
        let primaryKeys = primaryInfo && primaryInfo.map(item => item.primaryKey) || [];
        const primaryFields = primaryInfo && primaryInfo.map(item => item.primaryField) || [];
        // 去重
        if (primaryKeys && primaryKeys.length > 0) {
            primaryKeys = [...new Set(primaryKeys)];
            helpFields = this.sortMapFieldKeys(helpFields, primaryKeys);
        }
        if (!helpData || asClear) {
            helpFields.reverse();
        }
        helpFields.forEach((f) => {
            let val = '';
            if (helpData) {
                if (helpData instanceof Array) {
                    val = helpData.map((h) => {
                        return this.getValue(f, h);
                    }).join(',');
                }
                else {
                    val = this.getValue(f, helpData);
                }
            }
            let mappings = mapFields[f].split(',');
            const headMappings = mappings.filter(p => primaryFields.includes(p));
            const leftMappings = mappings.filter(p => !primaryFields.includes(p));
            if (!helpData) {
                mappings = [].concat(leftMappings).concat(headMappings);
            }
            else {
                mappings = [].concat(headMappings).concat(leftMappings);
            }
            mappings.forEach((ff) => {
                if (!helpData) {
                    this.viewModel.bindingData.clearValue(pathArr.concat(ff.split('.')), true, true);
                }
                else {
                    this.viewModel.bindingData.setValue(pathArr.concat(ff.split('.')), val, true, true);
                }
            });
        });
        // 重新打开变更检测
        appContext.changeDetectionController.reattach();
    }
    getValue(f, data) {
        let val = '';
        if (f.indexOf('.') === -1) {
            val = data[f];
        }
        else {
            val = f.split('.').reduce((a, b) => {
                return a[b];
            }, data);
        }
        return val;
    }
    getBindingPathArray() {
        const path = this.viewModel.bindingPath;
        if (path) {
            return path.split('/').filter(n => n !== '');
        }
        return [];
    }
    isNumberValue(field, data) {
        const currentVal = this.getValue(field, data);
        return isNumber(currentVal);
    }
    //#endregion
    /**
     *
     * @param mapFields  格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"} 或者 {id:'vid',code:'code',name:'name'}
     */
    getMapFieldsPrimaryKey(mapFields, bindingPaths) {
        if (!mapFields || Object.keys(mapFields).length < 1) {
            return null;
        }
        const results = [];
        // let primaryField = null;
        try {
            const entityTypeInfo = this.viewModel.frameContext.repository.entityTypeInfo;
            Object.keys(mapFields).forEach((key) => {
                const mapField = mapFields[key];
                if (mapField && typeof mapField === 'string') {
                    const mappings = mapField.split(',').filter(p => p);
                    mappings.forEach((item) => {
                        let paths = item.split('.');
                        if (bindingPaths && bindingPaths.length > 0) {
                            paths = bindingPaths.concat(paths);
                        }
                        const propInfo = entityTypeInfo.getPropInfoByPath(paths);
                        if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.primary === true) {
                            results.push({
                                primaryKey: key,
                                primaryField: item
                            });
                        }
                    });
                }
            });
        }
        catch (e) {
            console.error(e);
        }
        return results;
    }
    setValue(target, paths, value) {
        if (target) {
            if (paths.length <= 1) {
                target[paths[0]] = value;
            }
            else {
                paths.slice(0, -1).reduce((prev, path) => {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    }
    sortMapFieldKeys(keys, primaryKeys) {
        if (!primaryKeys || primaryKeys.length < 1 || !keys || keys.length < 1) {
            return keys;
        }
        // 过滤出非主键映射字段
        keys = keys.filter(p => !primaryKeys.includes(p));
        return [].concat(primaryKeys).concat(keys);
    }
}
EditableDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-datagrid-editable]'
            },] }
];
/** @nocollapse */
EditableDirective.ctorParameters = () => [
    { type: BindingData },
    { type: ViewModel },
    { type: DatagridComponent },
    { type: DateTimeHelperService },
    { type: Injector },
    { type: RuntimeStateService },
    { type: DialogService },
    { type: NgZone }
];
EditableDirective.propDecorators = {
    gridEditable: [{ type: Input, args: ['farris-datagrid-editable',] }],
    disableGroupOnEditing: [{ type: Input, args: ['disableGroupOnEditing',] }]
};
//# sourceMappingURL=data:application/json;base64,