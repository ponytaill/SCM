/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injector, ViewEncapsulation, NgZone } from '@angular/core';
/*
 * @Author: 疯狂秀才(lucas huang)
 * @Date: 2018-11-24 15:58:04
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-04-08 19:02:25
 * @Company: Inspur
 * @Version: v0.0.1
 */
import { Component, Input, HostBinding, ElementRef, Renderer2 } from '@angular/core';
export class LayoutComponent {
    /**
     * @param {?} el
     * @param {?} render2
     * @param {?} injector
     */
    constructor(el, render2, injector) {
        this.el = el;
        this.render2 = render2;
        this.injector = injector;
        this.showBorder = true;
        // h: 水平排列; v: 垂直排列
        this.direction = 'h';
        this.fill = false;
        this.myclass = 'd-flex';
        this.panels = [];
        this.ngZone = this.injector.get(NgZone);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.checkPanels();
        this.panels.forEach((/**
         * @param {?} p
         * @return {?}
         */
        p => {
            if (p.split) {
                /** @type {?} */
                let margin = '';
                switch (p.region) {
                    case 'north':
                        margin = 'marginTop';
                        break;
                    case 'south':
                        margin = 'marginBottom';
                        break;
                    case 'west':
                        margin = 'marginLeft';
                        break;
                    case 'east':
                        margin = 'marginRight';
                        break;
                }
                this.render2.setStyle(this.getPanel('center').el.nativeElement, margin, '5px');
            }
        }));
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => this.setPanelMaxSize()));
        }));
    }
    /**
     * @private
     * @return {?}
     */
    init() {
        if (this.direction === 'h') {
            this.myclass += ' flex-row';
        }
        else {
            this.myclass += ' flex-column';
        }
        if (this.fill) {
            if (this.isInLayoutPanel()) {
                this.myclass += ' flex-fill';
                this.render2.addClass(this.el.nativeElement.parentElement, 'd-flex');
            }
            else {
                this.myclass += ' layout-fill';
            }
        }
        else {
            if (this.width) {
                this.render2.setStyle(this.el.nativeElement, 'width', this.width + 'px');
            }
            if (this.height) {
                this.render2.setStyle(this.el.nativeElement, 'height', this.height + 'px');
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getLayoutSize() {
        /** @type {?} */
        const size = {
            width: this.el.nativeElement.clientWidth,
            height: this.el.nativeElement.clientHeight
        };
        return size;
    }
    /**
     * @return {?}
     */
    setPanelMaxSize() {
        /** @type {?} */
        const layoutSize = this.getLayoutSize();
        this.panels.forEach((/**
         * @param {?} p
         * @return {?}
         */
        p => {
            if (p.region !== 'center') {
                if (p.region === 'west' && layoutSize.width) {
                    /** @type {?} */
                    const east = this.getPanel('east');
                    if (!east) {
                        p.maxWidth = layoutSize.width - 100;
                    }
                    else {
                        p.maxWidth = layoutSize.width - east.width - 100;
                    }
                }
                if (p.region === 'east' && layoutSize.width) {
                    /** @type {?} */
                    const west = this.getPanel('west');
                    if (!west) {
                        p.maxWidth = layoutSize.width - 100;
                    }
                    else {
                        p.maxWidth = layoutSize.width - west.width - 100;
                    }
                }
                if (p.region === 'north' && layoutSize.height) {
                    /** @type {?} */
                    const south = this.getPanel('south');
                    if (!south) {
                        p.maxHeight = layoutSize.height - 100;
                    }
                    else {
                        p.maxHeight = layoutSize.height - south.height - 100;
                    }
                }
                if (p.region === 'south' && layoutSize.height) {
                    /** @type {?} */
                    const north = this.getPanel('north');
                    if (!north) {
                        p.maxHeight = layoutSize.height - 100;
                    }
                    else {
                        p.maxHeight = layoutSize.height - north.height - 100;
                    }
                }
            }
        }));
    }
    /**
     * @param {?} region
     * @return {?}
     */
    getPanel(region) {
        return this.panels.find((/**
         * @param {?} p
         * @return {?}
         */
        p => p.region === region));
    }
    /**
     * @private
     * @return {?}
     */
    checkPanels() {
        if (this.panels && this.panels.length) {
            /** @type {?} */
            const regions = this.panels.map((/**
             * @param {?} p
             * @return {?}
             */
            p => p.region));
            if (this.unique(regions).length === regions.length) {
                if (this.direction === 'h') {
                    if (regions.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => r === 'north' || r === 'south'))) {
                        throw new Error('水平方向排列时，只能包含 east 或者 west');
                    }
                }
                else {
                    if (regions.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => r === 'west' || r === 'east'))) {
                        throw new Error('水平方向排列时，只能包含 north 或者 south');
                    }
                }
                return true;
            }
            else {
                throw new Error('layout 布局容器中具有重复的panel。');
            }
        }
        return true;
    }
    /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    unique(arr) {
        /** @type {?} */
        const tmp = new Set(arr);
        return Array.from(tmp);
    }
    /**
     * @private
     * @return {?}
     */
    isInLayoutPanel() {
        return !!this.el.nativeElement.parentElement.attributes['layout-panel'];
    }
}
LayoutComponent.decorators = [
    { type: Component, args: [{
                selector: 'farrisui-layout,farris-layout,layout',
                template: "<ng-container *ngIf=\"direction==='v'\">\r\n    <ng-content select=\"[region='north']\"></ng-content>\r\n</ng-container>\r\n<ng-container *ngIf=\"direction==='h'\">\r\n    <ng-content select=\"[region='west']\"></ng-content>\r\n</ng-container>\r\n\r\n\r\n<ng-content></ng-content>\r\n\r\n<ng-container  *ngIf=\"direction==='v'\">\r\n    <ng-content select=\"[region='south']\"></ng-content>\r\n</ng-container>\r\n<ng-container *ngIf=\"direction==='h'\">\r\n    <ng-content select=\"[region='east']\"></ng-content>\r\n</ng-container>",
                encapsulation: ViewEncapsulation.Emulated,
                styles: [`
        :host.layout-fill {position: absolute; top: 0; right: 0;bottom: 0;left: 0;}
        `]
            }] }
];
/** @nocollapse */
LayoutComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector }
];
LayoutComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    showBorder: [{ type: Input }],
    direction: [{ type: Input }],
    fill: [{ type: Input }],
    myclass: [{ type: HostBinding, args: ['class',] }]
};
if (false) {
    /** @type {?} */
    LayoutComponent.prototype.width;
    /** @type {?} */
    LayoutComponent.prototype.height;
    /** @type {?} */
    LayoutComponent.prototype.showBorder;
    /** @type {?} */
    LayoutComponent.prototype.direction;
    /** @type {?} */
    LayoutComponent.prototype.fill;
    /** @type {?} */
    LayoutComponent.prototype.myclass;
    /** @type {?} */
    LayoutComponent.prototype.panels;
    /**
     * @type {?}
     * @private
     */
    LayoutComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    LayoutComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    LayoutComponent.prototype.render2;
    /**
     * @type {?}
     * @private
     */
    LayoutComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbGF5b3V0LyIsInNvdXJjZXMiOlsibGliL2xheW91dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQW1CLGlCQUFpQixFQUE0QyxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7OztBQVMvSCxPQUFPLEVBQ0gsU0FBUyxFQUFVLEtBQUssRUFBMkIsV0FBVyxFQUM5RCxVQUFVLEVBQUUsU0FBUyxFQUN4QixNQUFNLGVBQWUsQ0FBQztBQWF2QixNQUFNLE9BQU8sZUFBZTs7Ozs7O0lBaUJ4QixZQUFvQixFQUFjLEVBQVUsT0FBa0IsRUFBVSxRQUFrQjtRQUF0RSxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBVztRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFiakYsZUFBVSxHQUFHLElBQUksQ0FBQzs7UUFHbEIsY0FBUyxHQUFjLEdBQUcsQ0FBQztRQUUzQixTQUFJLEdBQUcsS0FBSyxDQUFDO1FBRUEsWUFBTyxHQUFHLFFBQVEsQ0FBQztRQUV6QyxXQUFNLEdBQTJCLEVBQUUsQ0FBQztRQUtoQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ0osSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hCLENBQUM7Ozs7SUFFRCxrQkFBa0I7UUFDZCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDcEIsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFOztvQkFDTCxNQUFNLEdBQUcsRUFBRTtnQkFDZixRQUFRLENBQUMsQ0FBQyxNQUFNLEVBQUU7b0JBQ2Qs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QUFNLENBQUMsR0FBYTs7Y0FDbEIsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQztRQUN4QixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7Ozs7SUFFTyxlQUFlO1FBQ25CLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDNUUsQ0FBQzs7O1lBNUtKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsc0NBQXNDO2dCQUNoRCxnaUJBQW9DO2dCQU1wQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsUUFBUTt5QkFKckM7O1NBRUM7YUFHUjs7OztZQWJHLFVBQVU7WUFBRSxTQUFTO1lBWGhCLFFBQVE7OztvQkEyQlosS0FBSztxQkFDTCxLQUFLO3lCQUNMLEtBQUs7d0JBR0wsS0FBSzttQkFFTCxLQUFLO3NCQUVMLFdBQVcsU0FBQyxPQUFPOzs7O0lBVHBCLGdDQUF1Qjs7SUFDdkIsaUNBQXdCOztJQUN4QixxQ0FBMkI7O0lBRzNCLG9DQUFvQzs7SUFFcEMsK0JBQXNCOztJQUV0QixrQ0FBeUM7O0lBRXpDLGlDQUFvQzs7Ozs7SUFFcEMsaUNBQXVCOzs7OztJQUVYLDZCQUFzQjs7Ozs7SUFBRSxrQ0FBMEI7Ozs7O0lBQUUsbUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGF5b3V0UGFuZWxDb21wb25lbnQgfSBmcm9tICcuL3BhbmVscy9sYXlvdXQtcGFuZWwuY29tcG9uZW50JztcclxuaW1wb3J0IHsgSW5qZWN0b3IsIENvbnRlbnRDaGlsZHJlbiwgVmlld0VuY2Fwc3VsYXRpb24sIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBJbmplY3QsIGZvcndhcmRSZWYsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG4vKlxyXG4gKiBAQXV0aG9yOiDnlq/ni4Lnp4DmiY0obHVjYXMgaHVhbmcpXHJcbiAqIEBEYXRlOiAyMDE4LTExLTI0IDE1OjU4OjA0XHJcbiAqIEBMYXN0RWRpdG9yczog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTA0LTA4IDE5OjAyOjI1XHJcbiAqIEBDb21wYW55OiBJbnNwdXJcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuaW1wb3J0IHtcclxuICAgIENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgUXVlcnlMaXN0LCBWaWV3Q2hpbGRyZW4sIEhvc3RCaW5kaW5nLFxyXG4gICAgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBEaXJlY3RpdmUsIEFmdGVyQ29udGVudEluaXQsIFZpZXdDaGlsZFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdmYXJyaXN1aS1sYXlvdXQsZmFycmlzLWxheW91dCxsYXlvdXQnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICdsYXlvdXQuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVzOiBbXHJcbiAgICAgICAgYFxyXG4gICAgICAgIDpob3N0LmxheW91dC1maWxsIHtwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsgcmlnaHQ6IDA7Ym90dG9tOiAwO2xlZnQ6IDA7fVxyXG4gICAgICAgIGBcclxuICAgIF0sXHJcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5FbXVsYXRlZFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTGF5b3V0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0IHtcclxuXHJcbiAgICBASW5wdXQoKSB3aWR0aDogbnVtYmVyO1xyXG4gICAgQElucHV0KCkgaGVpZ2h0OiBudW1iZXI7XHJcbiAgICBASW5wdXQoKSBzaG93Qm9yZGVyID0gdHJ1ZTtcclxuXHJcbiAgICAvLyBoOiDmsLTlubPmjpLliJc7IHY6IOWeguebtOaOkuWIl1xyXG4gICAgQElucHV0KCkgZGlyZWN0aW9uOiAnaCcgfCAndicgPSAnaCc7XHJcblxyXG4gICAgQElucHV0KCkgZmlsbCA9IGZhbHNlO1xyXG5cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MnKSBteWNsYXNzID0gJ2QtZmxleCc7XHJcblxyXG4gICAgcGFuZWxzOiBMYXlvdXRQYW5lbENvbXBvbmVudFtdID0gW107XHJcblxyXG4gICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcjI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgICAgICB0aGlzLm5nWm9uZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KE5nWm9uZSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tQYW5lbHMoKTtcclxuXHJcbiAgICAgICAgdGhpcy5wYW5lbHMuZm9yRWFjaChwID0+IHtcclxuICAgICAgICAgICAgaWYgKHAuc3BsaXQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBtYXJnaW4gPSAnJztcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAocC5yZWdpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdub3J0aCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbiA9ICdtYXJnaW5Ub3AnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzb3V0aCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbiA9ICdtYXJnaW5Cb3R0b20nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICd3ZXN0JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luID0gJ21hcmdpbkxlZnQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdlYXN0JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luID0gJ21hcmdpblJpZ2h0JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcjIuc2V0U3R5bGUodGhpcy5nZXRQYW5lbCgnY2VudGVyJykuZWwubmF0aXZlRWxlbWVudCwgbWFyZ2luLCAnNXB4Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZXRQYW5lbE1heFNpemUoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ2gnKSB7XHJcbiAgICAgICAgICAgIHRoaXMubXljbGFzcyArPSAnIGZsZXgtcm93JztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm15Y2xhc3MgKz0gJyBmbGV4LWNvbHVtbic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5maWxsKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSW5MYXlvdXRQYW5lbCgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm15Y2xhc3MgKz0gJyBmbGV4LWZpbGwnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudC5wYXJlbnRFbGVtZW50LCAnZC1mbGV4Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm15Y2xhc3MgKz0gJyBsYXlvdXQtZmlsbCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy53aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIyLnNldFN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3dpZHRoJywgdGhpcy53aWR0aCArICdweCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5oZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyMi5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdoZWlnaHQnLCB0aGlzLmhlaWdodCArICdweCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0TGF5b3V0U2l6ZSgpIHtcclxuICAgICAgICBjb25zdCBzaXplID0ge1xyXG4gICAgICAgICAgICB3aWR0aDogdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNsaWVudFdpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuZWwubmF0aXZlRWxlbWVudC5jbGllbnRIZWlnaHRcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBzaXplO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFBhbmVsTWF4U2l6ZSgpIHtcclxuICAgICAgICBjb25zdCBsYXlvdXRTaXplID0gdGhpcy5nZXRMYXlvdXRTaXplKCk7XHJcbiAgICAgICAgdGhpcy5wYW5lbHMuZm9yRWFjaChwID0+IHtcclxuICAgICAgICAgICAgaWYgKHAucmVnaW9uICE9PSAnY2VudGVyJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHAucmVnaW9uID09PSAnd2VzdCcgJiYgbGF5b3V0U2l6ZS53aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVhc3QgPSB0aGlzLmdldFBhbmVsKCdlYXN0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlYXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAubWF4V2lkdGggPSBsYXlvdXRTaXplLndpZHRoIC0gMTAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAubWF4V2lkdGggPSBsYXlvdXRTaXplLndpZHRoIC0gZWFzdC53aWR0aCAtIDEwMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHAucmVnaW9uID09PSAnZWFzdCcgJiYgbGF5b3V0U2l6ZS53aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdlc3QgPSB0aGlzLmdldFBhbmVsKCd3ZXN0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF3ZXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAubWF4V2lkdGggPSBsYXlvdXRTaXplLndpZHRoIC0gMTAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAubWF4V2lkdGggPSBsYXlvdXRTaXplLndpZHRoIC0gd2VzdC53aWR0aCAtIDEwMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHAucmVnaW9uID09PSAnbm9ydGgnICYmIGxheW91dFNpemUuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc291dGggPSB0aGlzLmdldFBhbmVsKCdzb3V0aCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc291dGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcC5tYXhIZWlnaHQgPSBsYXlvdXRTaXplLmhlaWdodCAtIDEwMDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwLm1heEhlaWdodCA9IGxheW91dFNpemUuaGVpZ2h0IC0gc291dGguaGVpZ2h0IC0gMTAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocC5yZWdpb24gPT09ICdzb3V0aCcgJiYgbGF5b3V0U2l6ZS5oZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBub3J0aCA9IHRoaXMuZ2V0UGFuZWwoJ25vcnRoJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub3J0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwLm1heEhlaWdodCA9IGxheW91dFNpemUuaGVpZ2h0IC0gMTAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAubWF4SGVpZ2h0ID0gbGF5b3V0U2l6ZS5oZWlnaHQgLSBub3J0aC5oZWlnaHQgLSAxMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UGFuZWwocmVnaW9uOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYW5lbHMuZmluZChwID0+IHAucmVnaW9uID09PSByZWdpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tQYW5lbHMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGFuZWxzICYmIHRoaXMucGFuZWxzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCByZWdpb25zID0gdGhpcy5wYW5lbHMubWFwKHAgPT4gcC5yZWdpb24pO1xyXG4gICAgICAgICAgICBpZiAodGhpcy51bmlxdWUocmVnaW9ucykubGVuZ3RoID09PSByZWdpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSAnaCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVnaW9ucy5maW5kKHIgPT4gciA9PT0gJ25vcnRoJyB8fCByID09PSAnc291dGgnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+awtOW5s+aWueWQkeaOkuWIl+aXtu+8jOWPquiDveWMheWQqyBlYXN0IOaIluiAhSB3ZXN0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVnaW9ucy5maW5kKHIgPT4gciA9PT0gJ3dlc3QnIHx8IHIgPT09ICdlYXN0JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfmsLTlubPmlrnlkJHmjpLliJfml7bvvIzlj6rog73ljIXlkKsgbm9ydGgg5oiW6ICFIHNvdXRoJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2xheW91dCDluIPlsYDlrrnlmajkuK3lhbfmnInph43lpI3nmoRwYW5lbOOAgicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVuaXF1ZShhcnI6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgY29uc3QgdG1wID0gbmV3IFNldChhcnIpO1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRtcCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc0luTGF5b3V0UGFuZWwoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQuYXR0cmlidXRlc1snbGF5b3V0LXBhbmVsJ107XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iXX0=