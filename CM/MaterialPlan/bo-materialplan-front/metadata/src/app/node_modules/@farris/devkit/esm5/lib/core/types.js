import { InjectionToken } from '@angular/core';
// export type ClassType = new (...args: any[]) => any;
export var BigNumberType = 'BigNumber';
export var DataChangeType;
(function (DataChangeType) {
    DataChangeType[DataChangeType["Add"] = 0] = "Add";
    DataChangeType[DataChangeType["Delete"] = 1] = "Delete";
})(DataChangeType || (DataChangeType = {}));
export var HttpMethod;
(function (HttpMethod) {
    HttpMethod["GET"] = "GET";
    HttpMethod["POST"] = "POST";
    HttpMethod["PUT"] = "PUT";
    HttpMethod["DELETE"] = "DELETE";
})(HttpMethod || (HttpMethod = {}));
/**
 * 后端消息
 */
// tslint:disable-next-line: no-namespace
export var BackEndMessage;
(function (BackEndMessage) {
    /**
     * 消息级别
     */
    var Level;
    (function (Level) {
        Level["Error"] = "Error";
        Level["Info"] = "Info";
        Level["Warning"] = "Warning";
    })(Level = BackEndMessage.Level || (BackEndMessage.Level = {}));
    /**
     * 消息
     * @description 接口执行成功，但有info/warning级别的消息
     */
    var Message = /** @class */ (function () {
        function Message(bizMessages, context) {
            this.bizMessages = bizMessages;
            this.context = context;
        }
        return Message;
    }());
    BackEndMessage.Message = Message;
})(BackEndMessage || (BackEndMessage = {}));
export var RunMode;
(function (RunMode) {
    RunMode["compatible"] = "compatible";
    RunMode["highSpeed"] = "highSpeed";
})(RunMode || (RunMode = {}));
/**
 * 控制器运行模式，compatible | highSpeed
 */
export var DEVKIT_RUN_MODE = new InjectionToken('@farris/devkit_run_mode');
/**
 * 组件类型
 */
export var ComponentType;
(function (ComponentType) {
    ComponentType["farrisDataGridComponent"] = "farrisDatagridComponent";
    ComponentType["farrisTreeTalbeComponent"] = "farrisTreeTalbeComponent";
    ComponentType["primengTreeComponent"] = "primengTreeComponent";
    ComponentType["kendoGridComponent"] = "kendoGridComponent";
})(ComponentType || (ComponentType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL3R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHL0MsdURBQXVEO0FBQ3ZELE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FBRyxXQUFXLENBQUM7QUFXekMsTUFBTSxDQUFOLElBQVksY0FBOEI7QUFBMUMsV0FBWSxjQUFjO0lBQUcsaURBQUcsQ0FBQTtJQUFFLHVEQUFNLENBQUE7QUFBQyxDQUFDLEVBQTlCLGNBQWMsS0FBZCxjQUFjLFFBQWdCO0FBVzFDLE1BQU0sQ0FBTixJQUFZLFVBS1g7QUFMRCxXQUFZLFVBQVU7SUFDcEIseUJBQVcsQ0FBQTtJQUNYLDJCQUFhLENBQUE7SUFDYix5QkFBVyxDQUFBO0lBQ1gsK0JBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQUxXLFVBQVUsS0FBVixVQUFVLFFBS3JCO0FBRUQ7O0dBRUc7QUFDSCx5Q0FBeUM7QUFDekMsTUFBTSxLQUFXLGNBQWMsQ0EyRTlCO0FBM0VELFdBQWlCLGNBQWM7SUFDN0I7O09BRUc7SUFDSCxJQUFZLEtBSVg7SUFKRCxXQUFZLEtBQUs7UUFDZix3QkFBZSxDQUFBO1FBQ2Ysc0JBQWEsQ0FBQTtRQUNiLDRCQUFtQixDQUFBO0lBQ3JCLENBQUMsRUFKVyxLQUFLLEdBQUwsb0JBQUssS0FBTCxvQkFBSyxRQUloQjtJQWlERDs7O09BR0c7SUFDSDtRQUdFLGlCQUFZLFdBQTBCLEVBQUUsT0FBd0I7WUFDOUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7WUFDL0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDekIsQ0FBQztRQUNILGNBQUM7SUFBRCxDQUFDLEFBUEQsSUFPQztJQVBZLHNCQUFPLFVBT25CLENBQUE7QUFPSCxDQUFDLEVBM0VnQixjQUFjLEtBQWQsY0FBYyxRQTJFOUI7QUE4Q0QsTUFBTSxDQUFOLElBQVksT0FHWDtBQUhELFdBQVksT0FBTztJQUNqQixvQ0FBeUIsQ0FBQTtJQUN6QixrQ0FBdUIsQ0FBQTtBQUN6QixDQUFDLEVBSFcsT0FBTyxLQUFQLE9BQU8sUUFHbEI7QUFDRDs7R0FFRztBQUNILE1BQU0sQ0FBQyxJQUFNLGVBQWUsR0FBRyxJQUFJLGNBQWMsQ0FBVSx5QkFBeUIsQ0FBQyxDQUFDO0FBSXRGOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksYUFLWDtBQUxELFdBQVksYUFBYTtJQUN2QixvRUFBbUQsQ0FBQTtJQUNuRCxzRUFBcUQsQ0FBQTtJQUNyRCw4REFBNkMsQ0FBQTtJQUM3QywwREFBeUMsQ0FBQTtBQUMzQyxDQUFDLEVBTFcsYUFBYSxLQUFiLGFBQWEsUUFLeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBcHBDb250ZXh0IH0gZnJvbSAnLi4vYXBwL2luZGV4JztcclxuXHJcbi8vIGV4cG9ydCB0eXBlIENsYXNzVHlwZSA9IG5ldyAoLi4uYXJnczogYW55W10pID0+IGFueTtcclxuZXhwb3J0IGNvbnN0IEJpZ051bWJlclR5cGUgPSAnQmlnTnVtYmVyJztcclxuZXhwb3J0IGludGVyZmFjZSBQYWdpbmF0aW9uIHtcclxuICBwYWdlU2l6ZTogbnVtYmVyO1xyXG4gIHBhZ2VJbmRleDogbnVtYmVyO1xyXG4gIHRvdGFsOiBudW1iZXI7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBSZXN1bHREYXRhIHtcclxuICBkYXRhPzogYW55W107XHJcbiAgcGFnaW5hdGlvbj86IFBhZ2luYXRpb247XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIERhdGFDaGFuZ2VUeXBlIHsgQWRkLCBEZWxldGUgfVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEYXRhQ2hhbmdlIHtcclxuICAvKipcclxuICAgKiDlj5jmm7Tot6/lvoTvvIzkuLvopoHpkojlr7nluKbku47ooajnmoTmg4XlhrVcclxuICAgKi9cclxuICBmcGF0aD86IHN0cmluZztcclxuICBkYXRhSWQ6IHN0cmluZztcclxuICBjaGFuZ2VUeXBlOiBEYXRhQ2hhbmdlVHlwZTtcclxuICBbcHJvcDogc3RyaW5nXTogYW55O1xyXG59XHJcbmV4cG9ydCBlbnVtIEh0dHBNZXRob2Qge1xyXG4gIEdFVCA9ICdHRVQnLFxyXG4gIFBPU1QgPSAnUE9TVCcsXHJcbiAgUFVUID0gJ1BVVCcsXHJcbiAgREVMRVRFID0gJ0RFTEVURSdcclxufVxyXG5cclxuLyoqXHJcbiAqIOWQjuerr+a2iOaBr1xyXG4gKi9cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1uYW1lc3BhY2VcclxuZXhwb3J0IG5hbWVzcGFjZSBCYWNrRW5kTWVzc2FnZSB7XHJcbiAgLyoqXHJcbiAgICog5raI5oGv57qn5YirXHJcbiAgICovXHJcbiAgZXhwb3J0IGVudW0gTGV2ZWwge1xyXG4gICAgRXJyb3IgPSAnRXJyb3InLFxyXG4gICAgSW5mbyA9ICdJbmZvJyxcclxuICAgIFdhcm5pbmcgPSAnV2FybmluZydcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5ZCO56uv5raI5oGv5a+56LGhXHJcbiAgICovXHJcbiAgZXhwb3J0IGludGVyZmFjZSBJTWVzc2FnZSB7XHJcbiAgICBjb250ZXh0OiBJTWVzc2FnZUNvbnRleHQ7XHJcbiAgICBiaXpNZXNzYWdlczogSUJpek1lc3NhZ2VbXTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5raI5oGv5L2N572uXHJcbiAgICovXHJcbiAgZXhwb3J0IGludGVyZmFjZSBJTG9jYXRpb24ge1xyXG4gICAgLyoqXHJcbiAgICAgKiDooajlkI1cclxuICAgICAqL1xyXG4gICAgbm9kZUNvZGU6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICog5a+55bqU55qE6KGMXHJcbiAgICAgKi9cclxuICAgIHJvd3M/OiBzdHJpbmdbXTtcclxuICAgIC8qKlxyXG4gICAgICog5a+55bqU55qE5YiXXHJcbiAgICAgKi9cclxuICAgIGNvbHVtbnM/OiBzdHJpbmdbXTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5raI5oGv57uT5p6EXHJcbiAgICovXHJcbiAgZXhwb3J0IGludGVyZmFjZSBJQml6TWVzc2FnZSB7XHJcbiAgICAvKipcclxuICAgICAqIOa2iOaBr+S9jee9rlxyXG4gICAgICovXHJcbiAgICBsb2NhdGlvbj86IElMb2NhdGlvbjtcclxuICAgIC8qKlxyXG4gICAgICog5raI5oGv5YaF5a65XHJcbiAgICAgKi9cclxuICAgIG1lc3NhZ2U6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICog5raI5oGv57qn5YirXHJcbiAgICAgKi9cclxuICAgIGxldmVsOiBMZXZlbDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5raI5oGv5LiK5LiL5paHXHJcbiAgICovXHJcbiAgZXhwb3J0IGludGVyZmFjZSBJTWVzc2FnZUNvbnRleHQge1xyXG4gICAgbnM6IHN0cmluZztcclxuICAgIGFwcENvbnRleHQ6IEFwcENvbnRleHQ7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOa2iOaBr1xyXG4gICAqIEBkZXNjcmlwdGlvbiDmjqXlj6PmiafooYzmiJDlip/vvIzkvYbmnIlpbmZvL3dhcm5pbmfnuqfliKvnmoTmtojmga9cclxuICAgKi9cclxuICBleHBvcnQgY2xhc3MgTWVzc2FnZSBpbXBsZW1lbnRzIElNZXNzYWdlIHtcclxuICAgIHB1YmxpYyBjb250ZXh0OiBJTWVzc2FnZUNvbnRleHQ7XHJcbiAgICBwdWJsaWMgYml6TWVzc2FnZXM6IElCaXpNZXNzYWdlW107XHJcbiAgICBjb25zdHJ1Y3RvcihiaXpNZXNzYWdlczogSUJpek1lc3NhZ2VbXSwgY29udGV4dDogSU1lc3NhZ2VDb250ZXh0KSB7XHJcbiAgICAgIHRoaXMuYml6TWVzc2FnZXMgPSBiaXpNZXNzYWdlcztcclxuICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog5raI5oGv5aSE55CG56iL5bqPXHJcbiAgICovXHJcbiAgZXhwb3J0IGludGVyZmFjZSBJQmFja0VuZE1lc3NhZ2VIYW5kbGVyIHtcclxuICAgIGhhbmRsZShtZXNzYWdlOiBJTWVzc2FnZSwgY29udGV4dD86IGFueSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElNZXNzYWdlU2VydmljZSB7XHJcbiAgLyoqXHJcbiAgICog5o+Q56S6XHJcbiAgICogQHBhcmFtIG1lc3NhZ2UgXHJcbiAgICovXHJcbiAgaW5mbyhtZXNzYWdlOiBzdHJpbmcpO1xyXG4gIC8qKlxyXG4gICAqIOmUmeivr1xyXG4gICAqIEBwYXJhbSBtZXNzYWdlIFxyXG4gICAqL1xyXG4gIGVycm9yKG1lc3NhZ2U6IHN0cmluZyk7XHJcbiAgLyoqXHJcbiAgICog6K2m5ZGKXHJcbiAgICogQHBhcmFtIG1lc3NhZ2UgXHJcbiAgICovXHJcbiAgd2FybmluZyhtZXNzYWdlOiBzdHJpbmcpO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElOb3RpZnlTZXJ2aWNlIHtcclxuICAvKipcclxuICAgKiDmj5DnpLpcclxuICAgKiBAcGFyYW0gbWVzc2FnZSBcclxuICAgKiBAcGFyYW0gb3B0aW9ucyBcclxuICAgKi9cclxuICBpbmZvKG1lc3NhZ2U6IHN0cmluZywgb3B0aW9ucz86IHsgW3Byb3A6IHN0cmluZ106IGFueSB9KTtcclxuICAvKipcclxuICAgKiBcclxuICAgKiBAcGFyYW0gY29udGVudCDmiJDlip/mj5DnpLpcclxuICAgKiBAcGFyYW0gb3B0aW9ucyBcclxuICAgKi9cclxuICBzdWNjZXNzKGNvbnRlbnQ6IHN0cmluZywgb3B0aW9ucz86IHsgW3Byb3A6IHN0cmluZ106IGFueSB9KTtcclxuICAvKipcclxuICAgKiDorablkYrmj5DnpLpcclxuICAgKiBAcGFyYW0gY29udGVudCBcclxuICAgKi9cclxuICB3YXJuaW5nKGNvbnRlbnQ6IHN0cmluZyk7XHJcbiAgLyoqXHJcbiAgICog6ZSZ6K+v5o+Q56S6XHJcbiAgICogQHBhcmFtIGNvbnRlbnQgXHJcbiAgICogQHBhcmFtIG9wdGlvbnMgXHJcbiAgICovXHJcbiAgZXJyb3IoY29udGVudDogc3RyaW5nLCBvcHRpb25zPzogeyBbcHJvcDogc3RyaW5nXTogYW55IH0pO1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBSdW5Nb2RlIHtcclxuICBjb21wYXRpYmxlID0gJ2NvbXBhdGlibGUnLFxyXG4gIGhpZ2hTcGVlZCA9ICdoaWdoU3BlZWQnXHJcbn1cclxuLyoqXHJcbiAqIOaOp+WItuWZqOi/kOihjOaooeW8j++8jGNvbXBhdGlibGUgfCBoaWdoU3BlZWRcclxuICovXHJcbmV4cG9ydCBjb25zdCBERVZLSVRfUlVOX01PREUgPSBuZXcgSW5qZWN0aW9uVG9rZW48UnVuTW9kZT4oJ0BmYXJyaXMvZGV2a2l0X3J1bl9tb2RlJyk7XHJcbmV4cG9ydCBpbnRlcmZhY2UgSURpc3Bvc2FibGUge1xyXG4gIGRpc3Bvc2Uob3B0aW9ucz86IGFueSk7XHJcbn1cclxuLyoqXHJcbiAqIOe7hOS7tuexu+Wei1xyXG4gKi9cclxuZXhwb3J0IGVudW0gQ29tcG9uZW50VHlwZSB7XHJcbiAgZmFycmlzRGF0YUdyaWRDb21wb25lbnQgPSAnZmFycmlzRGF0YWdyaWRDb21wb25lbnQnLFxyXG4gIGZhcnJpc1RyZWVUYWxiZUNvbXBvbmVudCA9ICdmYXJyaXNUcmVlVGFsYmVDb21wb25lbnQnLFxyXG4gIHByaW1lbmdUcmVlQ29tcG9uZW50ID0gJ3ByaW1lbmdUcmVlQ29tcG9uZW50JyxcclxuICBrZW5kb0dyaWRDb21wb25lbnQgPSAna2VuZG9HcmlkQ29tcG9uZW50J1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBDaGFuZ2VTZXRQb2xpY3kgPSAnZW50aXJlJyB8ICd2YWxpZCc7Il19