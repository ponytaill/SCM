/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NotifyService } from '@farris/ui-notify';
import { Input, Output, EventEmitter, ElementRef, ChangeDetectorRef, Renderer2, ViewChild, Inject, Injector, NgZone } from '@angular/core';
import { Subject, interval, of, fromEvent } from 'rxjs';
import { NgControl } from '@angular/forms';
import { DOCUMENT } from '@angular/common';
import { takeUntil, filter, skip, debounceTime, throttle, take, throwIfEmpty } from 'rxjs/operators';
import { ComboService } from './combo.service';
import { InputGroupComponent } from '@farris/ui-input-group';
import { ComboLocaleService } from './services/combo.locale.service';
import { CommonUtils, reqAnimFrame } from '@farris/ui-common';
import { EventManager } from '@angular/platform-browser';
import ResizeObserver from 'resize-observer-polyfill';
/** @type {?} */
var nextUniqueId = 0;
var BaseComboComponent = /** @class */ (function () {
    function BaseComboComponent(el, cdr, document, render, comboService, injector) {
        var _this = this;
        this.el = el;
        this.cdr = cdr;
        this.document = document;
        this.render = render;
        this.comboService = comboService;
        this.injector = injector;
        this.disabled = false;
        this.readonly = false;
        this.editable = true;
        this.placeholder = '';
        this.panelWidth = 300;
        this.panelHeight = 'auto';
        /**
         * 下拉面反宽度与输入框宽度保持一至， 默认为 true
         */
        this.autoWidth = true;
        this.enableClear = true;
        /**
         * 禁用只读时显示 placeholder
         */
        this.forcePlaceholder = false;
        /**
         * 任意输入 20210202
         */
        this.nosearch = false;
        // 鼠标滑过显示文本内容
        this.enableTitle = true;
        /**
         * 展示类型： text文本，tag标签。 默认 text
         */
        this.viewType = 'text';
        this.displayText = '';
        this.maxHeight = 200;
        this.enableCancelSelected = false;
        // 如果面板已打开， 点击清空按钮时是否关闭面板。true: 关闭； false: 不关闭；
        this.hidePanelOnClear = false;
        /**
         * 开启后，ngModel 的值为 valueField or  idField; 否则为textField的值
         */
        this.useValue = false;
        this.separator = ',';
        this.treeToList = false;
        this.navTreeToList = false;
        this.showPanel = new EventEmitter();
        this.hidePanel = new EventEmitter();
        this.clear = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.selectChange = new EventEmitter();
        this.isOpen = false;
        this.comPosition = {};
        this.destroy$ = new Subject();
        this.ngControl = null;
        this.groupIcon = '<span class="f-icon f-icon-arrow-60-down"></span>';
        this._cmbPanel = null;
        this._comboPanelCreated$ = new Subject();
        // private _hasPosited = false;
        // private _container: Element;
        this.willHide$ = new Subject();
        this.panelListener = null;
        this.ngZone = null;
        this.mouseWheelEvent = null;
        this.textChangeSubject = new Subject();
        this.initdataSubscription = null;
        this.customData = null;
        this.originalText = '';
        this.isTextChange = false;
        this.treeClientSearch = new Subject();
        this.ro = null;
        this.onChange = (/**
         * @return {?}
         */
        function () { return null; });
        this.onTouched = (/**
         * @return {?}
         */
        function () { return null; });
        this.initToggleAction();
        this.initSelectionsChangeAction();
        this.initDatasChangeAction();
        this.commonUtils = this.injector.get(CommonUtils, null);
        this.willHide$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!_this.nosearch && _this.displayText !== _this.originalText) {
                _this.displayText = _this.originalText;
                if (_this.isLookup()) {
                    _this.onChange(_this.displayText);
                }
                else {
                    /** @type {?} */
                    var _displayText = _this.comboService.getValue(_this.textField);
                    _this.onValueChange({ text: _displayText, value: _this.selectedValues, selections: _this.selections });
                }
            }
            _this['_searchKeyWords'] = '';
            _this.onTouched();
            _this.hidePanel.emit(_this);
        }));
        this.ngZone = this.injector.get(NgZone);
        this.eventMgr = this.injector.get(EventManager);
        this.emitTextChange();
        this.notifySer = this.injector.get(NotifyService, null);
    }
    Object.defineProperty(BaseComboComponent.prototype, "context", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.comboService.context = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "mappingField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.mapFields;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.mapFields = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.data;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.data = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "idField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.idField;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.idField = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "valueField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.valueField ? this.comboService.valueField : this.idField;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.valueField = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "textField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.textField;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.textField = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "multiSelect", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.multiSelect;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.multiSelect = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "uri", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.uri;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.uri = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "selectedValues", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.selectedValues;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.selectedValues = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "selectedValuesStr", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.selectedValues === null || this.selectedValues === undefined) {
                this.selectedValues = '';
            }
            return (this.selectedValues) + '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "remoteSearch", {
        /** 远端过滤 */
        get: /**
         * 远端过滤
         * @return {?}
         */
        function () {
            return this.comboService.remoteSearch;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.remoteSearch = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "cmbPanel", {
        set: /**
         * @param {?} cmp
         * @return {?}
         */
        function (cmp) {
            if (cmp) {
                this._cmbPanel = cmp;
                this.ro.observe(cmp.nativeElement);
                this._comboPanelCreated$.next(cmp);
            }
            else {
                this._cmbPanel = null;
                // this.ro.unobserve(this.el.nativeElement);
                if (this.ro) {
                    this.ro.disconnect();
                }
                this._comboPanelCreated$.next(null);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseComboComponent.prototype, "selections", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.comboService.selections) {
                return this.comboService.selections.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n !== null && n !== undefined; }));
            }
            return [];
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.comboService.selections = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.localeService = this.injector.get(ComboLocaleService, '');
        if (this.localeService) {
            /** @type {?} */
            var localConfig = this.localeService.getLocaleConfig();
            if (localConfig) {
                if (!this.placeholder) {
                    this.placeholder = localConfig['placeholder'] || '请选择';
                }
            }
        }
        this.comboService.separator = this.separator;
        this.comboService['treeToList'] = this.treeToList;
        this.comboService['navTreeToList'] = this.navTreeToList;
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var that = this;
        this.ngControl = this.injector.get(NgControl, null);
        fromEvent(window, 'resize').pipe(takeUntil(this.destroy$)).pipe(debounceTime(100), throttle((/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) { return interval(100); }))).subscribe((/**
         * @return {?}
         */
        function () {
            _this.updatePanelWidth();
            if (_this.isOpen) {
                _this.comboService.isOpen$.next(false);
                _this.willHide$.next();
            }
        }));
        if (this.ngZone) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    that.updatePanelWidth();
                }));
            }));
            /** @type {?} */
            var reszieTimer_1 = null;
            this.ro = new ResizeObserver((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () {
                    if (reszieTimer_1) {
                        clearTimeout(reszieTimer_1);
                    }
                    reszieTimer_1 = setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        if (that._cmbPanel && that.panelElement) {
                            reqAnimFrame((/**
                             * @return {?}
                             */
                            function () {
                                that.updatePosition(that._cmbPanel.nativeElement);
                                if (that._cmbPanel.nativeElement.className.indexOf('f-area-show') === -1) {
                                    that.render.addClass(that._cmbPanel.nativeElement, 'f-area-show');
                                }
                            }));
                        }
                    }), 10);
                }));
            }));
        }
        this.comboService.injectService();
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
        this.comboService.serachValue$.unsubscribe();
        if (this.mouseWheelEvent) {
            this.mouseWheelEvent();
        }
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.updatePanelWidth = /**
     * @private
     * @return {?}
     */
    function () {
        var width = this.getInputSizeInfo().width;
        this.panelWidth = this.autoWidth ? width : this.panelWidth;
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    BaseComboComponent.prototype.onClick = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        if ($event === void 0) { $event = null; }
        if ($event) {
            if ($event.stopPropagation) {
                $event.stopPropagation();
            }
            else {
                if ($event.originalEvent) {
                    $event.originalEvent.stopPropagation();
                }
            }
        }
        // 重复执行面板关闭事件 故注释掉 20220917
        // if (this.isOpen) {
        //     this.willHide$.next();
        // } else {
        //     this.comboService.isOpen$.next(!this.isOpen);
        // }
        this.comboService.isOpen$.next(!this.isOpen);
        if (this.input && this.input.textbox) {
            this.input.textbox.nativeElement.focus();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BaseComboComponent.prototype.onBlur = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onTouched();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BaseComboComponent.prototype.onFocus = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // // 启用任意输入后，文本框得到焦点后不弹出下拉面板。2021/02/19
        // if (this.nosearch) {
        //     return ;
        // }
        // if (!this.isOpen) {
        //     this.comboService.isOpen$.next(true);
        //     // 延迟执行变更检测 更新弹出框位置
        // of('').pipe(debounceTime(0)).subscribe(() => {
        //     this.cdr.detectChanges();
        // });
        // } else {
        //     this.hide();
        // }
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    BaseComboComponent.prototype.onInputclick = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        if ($event && $event.stopPropagation) {
            $event.stopPropagation();
        }
        this.comboService.isOpen$.next(!this.isOpen);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BaseComboComponent.prototype.onEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) { };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.blur = /**
     * @return {?}
     */
    function () {
        this.input.textbox.nativeElement.blur();
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.focus = /**
     * @return {?}
     */
    function () {
        this.input.textbox.nativeElement.focus();
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.onClear = /**
     * @return {?}
     */
    function () {
        this.selectedValues = '';
        this.selections = [];
        this.onValueChange({ text: '', value: '', selections: [] });
        this.clear.emit();
        if (this.isOpen && this.hidePanelOnClear) {
            // this.comboService.isOpen$.next(false);
            this.willHide$.next();
        }
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.getInputSizeInfo = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var el = this.viewType === 'text' ? this.input.inputGroup : this.input2;
        return el.nativeElement.getBoundingClientRect();
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.emitTextChange = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        return this.textChangeSubject.pipe(debounceTime(200)).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            /** @type {?} */
            var _selectedValues = _this.selectedValues;
            /** @type {?} */
            var val = r ? r : _this.displayText;
            if (r === '') {
                _this.onClear();
            }
            else if (_this.nosearch) {
                _this.onValueChange({ text: r, value: '', selections: _this.selections, nosearch: true });
            }
            if (!_this.remoteSearch) {
                if (!_this.multiSelect) {
                    if (_this.comboService.displayType === 'LOOKUPTREELIST') {
                        _this.treeClientSearch.next(val);
                    }
                    else {
                        _this.comboService.serachValue$.next(val);
                    }
                }
                else {
                    /** @type {?} */
                    var valArr = (val + '').split(_this.separator);
                    /** @type {?} */
                    var appendVal = valArr[valArr.length - 1] ? valArr[valArr.length - 1] : '';
                    _this.comboService.serachValue$.next(appendVal);
                }
                // if (_selectedValues !== this.selectedValues) {
                //     this.onValueChange({ text: this.displayText, value: this.selectedValues, selections: this.selections });
                // }
            }
            else {
                _this.filterDataOnServer(val, '*');
            }
        }));
    };
    /**
     * @private
     * @param {?} value
     * @param {?=} searchParam
     * @return {?}
     */
    BaseComboComponent.prototype.__createPanel = /**
     * @private
     * @param {?} value
     * @param {?=} searchParam
     * @return {?}
     */
    function (value, searchParam) {
        var _this = this;
        if (searchParam === void 0) { searchParam = null; }
        /** @type {?} */
        var params = {};
        /** @type {?} */
        var method = 'get';
        if (value instanceof Object) {
            var _p = value.params, data = value.data, _m = value.method, showDialog = value.showDialog;
            if (showDialog === false) {
                return;
            }
            if (data) {
                params = { data: data };
                this.customData = data;
            }
            else {
                if (_p) {
                    params = { data: _p };
                    this.customData = _p;
                }
                else {
                    this.customData = null;
                }
            }
            if (_m) {
                method = _m;
            }
        }
        else if (typeof value === 'boolean') {
            if (value === false) {
                return;
            }
        }
        this.initCreatPanelAction();
        if (this.uri) {
            this.updateSelectedValues();
            if (this.isLookup()) {
                this.isOpen = true;
            }
        }
        else {
            this.isOpen = true;
        }
        if (this.comboService.displayType === 'LOOKUPTREELIST') {
            params.enableFullTree = this['enableFullTree'];
            params.loadTreeDataType = this['loadTreeDataType'];
        }
        if (this.isLookup() && this.input && this.nosearch) {
            this.input.textbox.nativeElement.disabled = true;
        }
        /** @type {?} */
        var focusInput = (/**
         * @return {?}
         */
        function () {
            if (_this.isLookup() && _this.input && _this.nosearch) {
                _this.input.textbox.nativeElement.disabled = false;
                _this.input.focus();
            }
        });
        if (searchParam) {
            params.searchValue = searchParam.searchValue;
        }
        this.initdataSubscription = this.comboService.initData(params, method, this.selectedValues).pipe(throwIfEmpty(focusInput)).subscribe((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (!_this.isOpen) {
                _this.isOpen = true;
            }
            focusInput();
            _this.cdr.detectChanges();
        }));
        // 禁止滚动
        // this.render.setStyle(this.containerElement, 'pointer-events', 'auto');
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.registerDocumentEvent();
        }));
    };
    // 显示前事件
    // 显示前事件
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.onBeforeShow = 
    // 显示前事件
    /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.beforeShow) {
            this.beforeShow = (/**
             * @return {?}
             */
            function () { return of(''); });
        }
        return this.beforeShow(this).pipe(take(1));
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.isLookup = /**
     * @private
     * @return {?}
     */
    function () {
        return this.comboService.displayType.indexOf('LOOKUP') > -1;
    };
    // 隐藏前事件
    // 隐藏前事件
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.onBeforeHide = 
    // 隐藏前事件
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.beforeHide) {
            this.beforeHide = (/**
             * @return {?}
             */
            function () { return of(''); });
        }
        this.beforeHide(this)
            .pipe(take(1))
            .subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (typeof value === 'boolean') {
                if (value) {
                    _this.hide(true);
                }
            }
            else if (typeof value === 'object') {
                if (value.hide) {
                    _this.hide(true);
                }
                else {
                    if (value.message) {
                        if (_this.notifySer) {
                            _this.notifySer.warning(value.message);
                        }
                        else {
                            // console.info(value.message);
                        }
                    }
                }
            }
            else {
                _this.hide(true);
            }
        }));
    };
    // 显示或隐藏下拉框
    // 显示或隐藏下拉框
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.initToggleAction = 
    // 显示或隐藏下拉框
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.comboService.isOpen$.pipe(debounceTime(20), takeUntil(this.destroy$), skip(1)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (_this.readonly || _this.disabled) {
                return;
            }
            /** @type {?} */
            var open = value;
            /** @type {?} */
            var searchParam = null;
            if (typeof value === 'object') {
                open = value.isOpen;
                searchParam = value.search;
            }
            if (open) {
                _this.onBeforeShow().subscribe((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    _this.__createPanel(v, searchParam);
                }));
                return;
            }
            else {
                _this.onBeforeHide();
            }
            _this.cdr.detectChanges();
        }));
        this._comboPanelCreated$.pipe(takeUntil(this.destroy$), filter((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return !!value; }))).subscribe((/**
         * @param {?} cmp
         * @return {?}
         */
        function (cmp) {
            cmp.nativeElement.style.display = '';
            _this.initCreatPanelAction();
            _this.panelElement.appendChild(cmp.nativeElement);
            /** @type {?} */
            var transitionFlag = true;
            cmp.nativeElement.addEventListener('transitionend', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e.target === e.currentTarget && transitionFlag) {
                    transitionFlag = false;
                    _this.showPanel.emit(_this);
                }
            }));
            if (_this.isLookup()) {
                cmp.nativeElement.style.width = _this.panelWidth + "px";
                cmp.nativeElement.style.height = _this.panelHeight + "px";
                _this.render.addClass(cmp.nativeElement, 'f-area-show');
            }
            // this.updatePosition(cmp.nativeElement);
            // this.cdr.detectChanges();
        }));
        this.destroy$.pipe(take(1)).subscribe((/**
         * @return {?}
         */
        function () {
            _this.comboService.closeLoading();
            nextUniqueId = 0;
            if (_this.panelListener) {
                _this.panelListener();
            }
            if (_this.initdataSubscription) {
                _this.initdataSubscription.unsubscribe();
                _this.initdataSubscription = null;
            }
            _this.removePanelElement();
        }));
    };
    /**
     * @private
     * @param {?} action
     * @return {?}
     */
    BaseComboComponent.prototype.iframeEventHandle = /**
     * @private
     * @param {?} action
     * @return {?}
     */
    function (action) {
        var e_1, _a;
        /** @type {?} */
        var iframes = Array.from(document.querySelectorAll('iframe'));
        if (iframes && iframes.length) {
            try {
                for (var iframes_1 = tslib_1.__values(iframes), iframes_1_1 = iframes_1.next(); !iframes_1_1.done; iframes_1_1 = iframes_1.next()) {
                    var iframe = iframes_1_1.value;
                    /** @type {?} */
                    var iframeDoc = iframe.contentDocument;
                    if (iframeDoc) {
                        iframeDoc[action]('mousedown', this._documentClickEvent);
                        iframeDoc[action]('mousewheel', this._documentClickEvent);
                        iframeDoc[action]('DOMMouseScroll', this._documentClickEvent);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (iframes_1_1 && !iframes_1_1.done && (_a = iframes_1.return)) _a.call(iframes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.removeDocumentListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._documentClickEvent) {
            document.removeEventListener('mousedown', this._documentClickEvent, true);
            document.removeEventListener('mousewheel', this._documentClickEvent, true);
            document.removeEventListener('DOMMouseScroll', this._documentClickEvent, true);
            if (top !== window) {
                top.document.body.removeEventListener('mousedown', this._documentClickEvent, true);
            }
            this.iframeEventHandle('removeEventListener');
            this._documentClickEvent = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.registerDocumentEvent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // 注册 mousedown 事件 隐藏panel
        document.addEventListener('mousedown', (this._documentClickEvent = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.type === 'mousewheel' && _this.el.nativeElement.contains(event.target)) {
                _this.comboService.isOpen$.next(false);
                return;
            }
            if (!_this.el.nativeElement.contains(event.target) && _this._cmbPanel && !_this.contains(_this._cmbPanel, event)) {
                _this.comboService.isOpen$.next(false);
                // this.willHide$.next();
            }
        })), true);
        document.addEventListener('mousewheel', this._documentClickEvent, true);
        document.addEventListener('DOMMouseScroll', this._documentClickEvent, true);
        if (top !== window) {
            top.document.body.addEventListener('mousedown', this._documentClickEvent, true);
        }
        this.iframeEventHandle('addEventListener');
    };
    // 创建下拉面板时事件
    // 创建下拉面板时事件
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.initCreatPanelAction = 
    // 创建下拉面板时事件
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.panelElement) {
            return;
        }
        this.createPanel(document.body);
        this.panelListener = this.render.listen(this.panelElement, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.removePanelElement = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        reqAnimFrame((/**
         * @return {?}
         */
        function () {
            if (_this.panelElement) {
                document.body.removeChild(_this.panelElement);
                _this.panelElement = null;
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.initSelectionsChangeAction = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.comboService.selections$.pipe(takeUntil(this.destroy$), debounceTime(100)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value.action === 'initData') {
                _this.onSelectionsChange(_this.selections);
            }
            else {
                _this.onSelectionsChangeDefault();
            }
        }));
    };
    /**
     * @protected
     * @return {?}
     */
    BaseComboComponent.prototype.initDatasChangeAction = /**
     * @protected
     * @return {?}
     */
    function () { };
    // canNull 解决取消选中时依然显示
    // canNull 解决取消选中时依然显示
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.onSelectionsChangeDefault = 
    // canNull 解决取消选中时依然显示
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var _displayText = this.comboService.getValue(this.textField);
        /** @type {?} */
        var _selectedValues = this.comboService.getValue(this.idField);
        if (this.displayText !== _displayText && !this.nosearch) {
            this.displayText = _displayText || this.displayText;
            this.displayText = this.displayText || '';
            this.originalText = _selectedValues ? _displayText : this.displayText;
        }
        if (this.input) {
            this.input.textbox.nativeElement.value = this.displayText;
        }
        this.selectedValues =
            (_selectedValues !== '' && _selectedValues !== undefined && _selectedValues !== null) ? _selectedValues : this.selectedValues;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    };
    /**
     * @protected
     * @param {?} v
     * @return {?}
     */
    BaseComboComponent.prototype.onSelectionsChange = /**
     * @protected
     * @param {?} v
     * @return {?}
     */
    function (v) { };
    /**
     * @param {?=} clearMapFields
     * @return {?}
     */
    BaseComboComponent.prototype.updateMappingFieldValue = /**
     * @param {?=} clearMapFields
     * @return {?}
     */
    function (clearMapFields) {
        if (clearMapFields === void 0) { clearMapFields = false; }
        if (this.mappingField &&
            this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData = this.ngControl.formDirective.form.bindingData;
            if (clearMapFields) {
                this.selectedValues = '';
            }
            if (bindingData.setValue) {
                /** @type {?} */
                var bindingPath = this.ngControl.formDirective.form.bindingPath;
                /** @type {?} */
                var pathArr = [];
                if (bindingPath) {
                    pathArr = bindingPath.split('/').filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n !== ''; }));
                }
                /** @type {?} */
                var mappingField = this.mappingField ? this.mappingField : '';
                bindingData.setValue(pathArr.concat(mappingField.split('.')), this.selectedValues, true, true);
            }
            else if (this.commonUtils) {
                this.commonUtils.setValue(bindingData, this.mappingField, this.selectedValues);
            }
            // if (!bindingData.setValue && this.commonUtils) {
            //     this.commonUtils.setValue(bindingData, this.mappingField, this.selectedValues);
            // }
        }
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.updateSelectedValues = /**
     * @return {?}
     */
    function () {
        if (this.mappingField &&
            this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData = this.ngControl.formDirective.form.bindingData;
            if (bindingData.getValue) {
                /** @type {?} */
                var bindingPath = this.ngControl.formDirective.form.bindingPath;
                /** @type {?} */
                var pathArr = [];
                if (bindingPath) {
                    pathArr = bindingPath.split('/').filter((/**
                     * @param {?} value
                     * @return {?}
                     */
                    function (value) { return value !== ''; }));
                }
                /** @type {?} */
                var mappingField = this.mappingField ? this.mappingField : '';
                this.selectedValues = bindingData.getValue(pathArr.concat(mappingField.split('.')));
            }
            else if (this.commonUtils) {
                this.selectedValues = this.commonUtils.getValue(this.mappingField, bindingData);
            }
        }
        else if (!this.mappingField) {
            // this.selectedValues = this.displayText
        }
    };
    /**
     * @param {?=} val
     * @return {?}
     */
    BaseComboComponent.prototype.onTextChange = /**
     * @param {?=} val
     * @return {?}
     */
    function (val) {
        this.isTextChange = true;
        if (this.nosearch) {
            this.selectedValues = val;
            this.updateMappingFieldValue(this.isLookup());
            this.onChange(val);
        }
        this.textChangeSubject.next(val);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    BaseComboComponent.prototype.onValueChange = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.displayText = changes.text;
        this.originalText = this.displayText;
        if (!this.uri && this.data && this.data.length > 0 && (!this['displayType'] || this.useValue)) {
            this.onChange(this.selectedValues);
        }
        else {
            this.onChange(this.displayText);
        }
        // if (!changes.nosearch) {
        // }
        this.valueChange.emit(changes);
        this.updateMappingFieldValue();
        this.onTouched();
        // if (this.isOpen && changes.emitHidePanel) { this.willHide$.next(); }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    BaseComboComponent.prototype.onSelect = /**
     * @param {?} item
     * @return {?}
     */
    function (item) { };
    /**
     * @param {?} item
     * @return {?}
     */
    BaseComboComponent.prototype.onUnSelected = /**
     * @param {?} item
     * @return {?}
     */
    function (item) { };
    /**
     * emit: 默认为 true;
     */
    /**
     * emit: 默认为 true;
     * @param {?=} emit
     * @return {?}
     */
    BaseComboComponent.prototype.hide = /**
     * emit: 默认为 true;
     * @param {?=} emit
     * @return {?}
     */
    function (emit) {
        if (emit === void 0) { emit = true; }
        if (!this.isOpen) {
            return;
        }
        this.removeDocumentListener();
        this.isOpen = false;
        if (emit) {
            this.willHide$.next();
        }
        if (this.initdataSubscription) {
            this.initdataSubscription.unsubscribe();
            this.initdataSubscription = null;
        }
        this.removePanelElement();
    };
    /**
     * @return {?}
     */
    BaseComboComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isOpen) {
            return;
        }
        this.onBeforeShow().subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.__createPanel(value);
        }));
        this.cdr.detectChanges();
    };
    /**
     * @private
     * @param {?} host
     * @return {?}
     */
    BaseComboComponent.prototype.createPanel = /**
     * @private
     * @param {?} host
     * @return {?}
     */
    function (host) {
        this.panelElement = this.document.createElement('div');
        this.panelElement.id = "overlay-" + nextUniqueId++;
        this.panelElement.classList.add('overlay-pane');
        this.panelElement.style.display = 'none';
        host.appendChild(this.panelElement);
        this.comboService.panelElement = this.panelElement;
        if (this.isLookup()) {
            var _a = this.getPanelSize(), panelWidth = _a.panelWidth, top_1 = _a.top, left = _a.left;
            this.panelElement.style.width = panelWidth + "px";
            this.panelElement.style.height = this.panelHeight + "px";
            this.panelElement.style.top = top_1 + "px";
            this.panelElement.style.left = left + "px";
            this.panelElement.style.zIndex = 10001;
            this.panelElement.classList.add('f-combo-lookup');
        }
        else {
            this.panelElement.style.overflow = 'hidden';
            this.render.setStyle(this.panelElement, 'top', '0');
            this.render.setStyle(this.panelElement, 'left', '0');
            this.panelElement.classList.add('f-combo-lookup');
        }
        this.panelElement.style.display = '';
    };
    /**
     * @private
     * @param {?=} target
     * @return {?}
     */
    BaseComboComponent.prototype.getPanelSize = /**
     * @private
     * @param {?=} target
     * @return {?}
     */
    function (target) {
        /** @type {?} */
        var panelHeight = this.panelHeight;
        this.innerPanelHeight = 202;
        if (this.autoWidth) {
            var width = this.getInputSizeInfo().width;
            this.panelWidth = width ? width : this.panelWidth;
        }
        // 如果taget高度存在 修改pnaelHeight 用于重定位弹出框位置
        if (target && target.tagName && panelHeight === 'auto') {
            /** @type {?} */
            var targetHeight = target.scrollHeight;
            /** @type {?} */
            var isNoRecord = !!target.querySelector('.f-table-norecords-content');
            // if (this.uri) {
            //     if (this.data && this.data.length) {
            //         if (this.comboService.displayType === 'LIST' && target.querySelector('.list-group')) {
            //             this.innerPanelHeight = target.querySelector('.list-group')['offsetHeight'] + 2;
            //         } else {
            //             this.innerPanelHeight = targetHeight;
            //         }
            //     }
            // } else {
            //     this.innerPanelHeight = targetHeight && targetHeight > 10 && !isNoRecord ? Math.floor(targetHeight) : this.panelHeight;
            // }
            if (this.data && this.data.length) {
                if (this.comboService.displayType === 'LIST' && target.querySelector('.list-group')) {
                    this.innerPanelHeight = target.querySelector('.list-group')['offsetHeight'] + 2;
                }
                else {
                    this.innerPanelHeight = targetHeight;
                }
            }
        }
        else if (target && target.tagName && panelHeight && !String(panelHeight).includes('px')) {
            panelHeight = panelHeight;
        }
        var _a = this.el.nativeElement.getBoundingClientRect(), top = _a.top, height = _a.height, left = _a.left, right = _a.right;
        height = height + 1;
        /** @type {?} */
        var bottom = window.innerHeight - height - top;
        if (panelHeight === 'auto') {
            if (this.maxHeight && this.maxHeight > this.innerPanelHeight) {
                panelHeight = this.innerPanelHeight;
            }
            else {
                panelHeight = this.maxHeight;
            }
        }
        /** @type {?} */
        var h = top > bottom ? top : bottom;
        /** @type {?} */
        var below = h === bottom;
        /** @type {?} */
        var fx = 'top';
        if (bottom > panelHeight) {
            top = top + height;
        }
        else {
            if (top > bottom) {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                    top = 10;
                }
                else {
                    top = top - parseInt('' + panelHeight, 10) - 5;
                }
                fx = 'bottom';
            }
            else {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                }
                top = top + height;
            }
        }
        /** @type {?} */
        var panelWidth = this.panelWidth;
        if (window.innerWidth - left < this.panelWidth) {
            // left = right - 400;
            if (left + this.el.nativeElement.offsetWidth > this.panelWidth) {
                left = left + this.el.nativeElement.offsetWidth - this.panelWidth;
            }
            else {
                left = 0;
                panelWidth = window.innerWidth > this.panelWidth ? this.panelWidth : window.innerWidth - 10;
            }
        }
        return { panelWidth: panelWidth, panelHeight: panelHeight, top: top, left: left, below: below, fx: fx };
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.compatibleScrollTop = /**
     * @private
     * @return {?}
     */
    function () {
        if (document.scrollingElement) {
            return document.scrollingElement.scrollTop;
        }
        return Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop);
    };
    /**
     * @private
     * @return {?}
     */
    BaseComboComponent.prototype.compatibleScrollLeft = /**
     * @private
     * @return {?}
     */
    function () {
        if (document.scrollingElement) {
            return document.scrollingElement.scrollLeft;
        }
        return Math.max(window.pageXOffset, document.documentElement.scrollLeft, document.body.scrollLeft);
    };
    // 设置弹出框位置
    // 设置弹出框位置
    /**
     * @param {?} target
     * @return {?}
     */
    BaseComboComponent.prototype.updatePosition = 
    // 设置弹出框位置
    /**
     * @param {?} target
     * @return {?}
     */
    function (target) {
        var _this = this;
        var _a = this.getPanelSize(target), panelHeight = _a.panelHeight, left = _a.left, top = _a.top, below = _a.below, fx = _a.fx;
        if (!this.isLookup()) {
            /** @type {?} */
            var _top = top;
            /** @type {?} */
            var _height = panelHeight;
            if (top < 0) {
                _height = this.innerPanelHeight + top - 10;
                _top = 10;
            }
            _top += this.compatibleScrollTop();
            if (this.panelHeight !== 'auto') {
                if (this.maxHeight < _height) {
                    this.maxHeight = (/** @type {?} */ (_height));
                }
            }
            this.comPosition = {
                'left': left + this.compatibleScrollLeft(),
                'top': _top,
                'width': this.panelWidth,
                height: _height === 'auto' ? 'auto' : _height,
                'max-height': this.maxHeight
            };
        }
        else {
            this.comPosition = {
                'width': this.panelWidth,
                'height': panelHeight
            };
        }
        this.panelElement.style.overflow = '';
        target['style'].display = '';
        Object.keys(this.comPosition).forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var val = _this.comPosition[n];
            if (val !== 'auto') {
                val += 'px';
            }
            _this.render.setStyle(target, n, val);
        }));
        target.style.transformOrigin = '100% ' + fx;
        // target['style'].visibility = 'visible';
        return this.comPosition;
    };
    /**
     * @param {?} el
     * @param {?} event
     * @return {?}
     */
    BaseComboComponent.prototype.contains = /**
     * @param {?} el
     * @param {?} event
     * @return {?}
     */
    function (el, event) {
        return el.nativeElement.contains(event.target);
    };
    /**
     * @protected
     * @param {?} value
     * @param {?} data
     * @return {?}
     */
    BaseComboComponent.prototype.filterSelections = /**
     * @protected
     * @param {?} value
     * @param {?} data
     * @return {?}
     */
    function (value, data) {
        var _this = this;
        /** @type {?} */
        var selectedItems = String(value)
            .split(this.separator)
            .map((/**
         * @param {?} selectedItem
         * @return {?}
         */
        function (selectedItem) {
            /** @type {?} */
            var item = data.find((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return selectedItem == _this.commonUtils.getValue(_this.idField, val) + ''; }));
            return item ? _this.commonUtils.getValue(_this.textField, item) : '';
        }));
        return selectedItems.filter((/**
         * @param {?} el
         * @return {?}
         */
        function (el) { return el; }));
    };
    /**
     * @protected
     * @param {?} selectedValues
     * @param {?} data
     * @return {?}
     */
    BaseComboComponent.prototype.updateSelections = /**
     * @protected
     * @param {?} selectedValues
     * @param {?} data
     * @return {?}
     */
    function (selectedValues, data) {
        var _this = this;
        if (selectedValues === null || selectedValues === undefined) {
            this.selections = [];
        }
        if (typeof selectedValues === 'boolean' || typeof selectedValues === 'number') {
            selectedValues = '' + selectedValues;
        }
        /** @type {?} */
        var selectedItems = selectedValues ? String(selectedValues).split(this.separator).map((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (_this.comboService.displayType === 'LOOKUPTREELIST') {
                return _this.comboService.treeNodeToFlatData(data, val, _this.idField);
            }
            return data.find((/**
             * @param {?} _data
             * @return {?}
             */
            function (_data) { return '' + val == _this.commonUtils.getValue(_this.idField, _data) + ''; }));
        })) : [];
        this.selections = selectedItems || [];
    };
    /**
     * @private
     * @param {?} value
     * @param {?} data
     * @return {?}
     */
    BaseComboComponent.prototype.getDisplayText = /**
     * @private
     * @param {?} value
     * @param {?} data
     * @return {?}
     */
    function (value, data) {
        if (value !== null && value !== undefined) {
            /** @type {?} */
            var selectedItems = this.filterSelections(value, data);
            if (!selectedItems || !selectedItems.length) {
                return value;
            }
            else {
                return selectedItems.filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) { return !!v; })).join(this.separator);
            }
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    BaseComboComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var data = [];
        if (this.data instanceof Array) {
            data = this.data;
        }
        else if (this.data) {
            data = ((/** @type {?} */ (this.data['items']))) instanceof Array ? this.data['items'] : data;
        }
        this.originalText = value;
        this.selectedValues = '';
        if (!this.uri && data && data.length > 0) {
            this.selectedValues = value;
            this.updateSelections(value, data);
            this.displayText = this.getDisplayText(value, this.selections || []);
            this.originalText = this.displayText;
        }
        else {
            // this.displayText = this.getDisplayText(value, this.selections);
            this.displayText = value;
            this.updateSelectedValues();
            if (!this.selectedValues) {
                this.selectedValues = value;
            }
            if (this.viewType === 'tag' && this.multiSelect && (this.displayText !== null && this.displayText !== undefined)) {
                /** @type {?} */
                var txtArr = this.displayText.split(this.separator).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
                this.selections = txtArr.reduce((/**
                 * @param {?} r
                 * @param {?} c
                 * @param {?} i
                 * @return {?}
                 */
                function (r, c, i) {
                    var _a;
                    r.push((_a = {}, _a[_this.textField] = c, _a));
                    return r;
                }), []);
            }
        }
        this.cdr.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    BaseComboComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    BaseComboComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    BaseComboComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    };
    /**
     * @param {?} searchValue
     * @param {?} searchField
     * @return {?}
     */
    BaseComboComponent.prototype.filterDataOnServer = /**
     * @param {?} searchValue
     * @param {?} searchField
     * @return {?}
     */
    function (searchValue, searchField) {
    };
    /** @nocollapse */
    BaseComboComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Renderer2 },
        { type: ComboService },
        { type: Injector }
    ]; };
    BaseComboComponent.propDecorators = {
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        editable: [{ type: Input }],
        placeholder: [{ type: Input }],
        panelWidth: [{ type: Input }],
        panelHeight: [{ type: Input }],
        autoWidth: [{ type: Input }],
        enableClear: [{ type: Input }],
        mapFields: [{ type: Input }],
        forcePlaceholder: [{ type: Input }],
        nosearch: [{ type: Input }],
        maxLength: [{ type: Input }],
        enableTitle: [{ type: Input }],
        viewType: [{ type: Input }],
        context: [{ type: Input }],
        mappingField: [{ type: Input }],
        data: [{ type: Input }],
        idField: [{ type: Input }],
        valueField: [{ type: Input }],
        textField: [{ type: Input }],
        multiSelect: [{ type: Input }],
        uri: [{ type: Input }],
        selectedValues: [{ type: Input }],
        displayText: [{ type: Input }],
        maxHeight: [{ type: Input }],
        enableCancelSelected: [{ type: Input }],
        remoteSearch: [{ type: Input }],
        beforeShow: [{ type: Input }],
        beforeHide: [{ type: Input }],
        hidePanelOnClear: [{ type: Input }],
        useValue: [{ type: Input }],
        separator: [{ type: Input }],
        treeToList: [{ type: Input }],
        navTreeToList: [{ type: Input }],
        showPanel: [{ type: Output }],
        hidePanel: [{ type: Output }],
        clear: [{ type: Output }],
        valueChange: [{ type: Output }],
        selectChange: [{ type: Output }],
        cmbPanel: [{ type: ViewChild, args: ['comboPanel',] }],
        input: [{ type: ViewChild, args: ['input',] }],
        input2: [{ type: ViewChild, args: ['input2',] }]
    };
    return BaseComboComponent;
}());
export { BaseComboComponent };
if (false) {
    /** @type {?} */
    BaseComboComponent.prototype.disabled;
    /** @type {?} */
    BaseComboComponent.prototype.readonly;
    /** @type {?} */
    BaseComboComponent.prototype.editable;
    /** @type {?} */
    BaseComboComponent.prototype.placeholder;
    /** @type {?} */
    BaseComboComponent.prototype.panelWidth;
    /** @type {?} */
    BaseComboComponent.prototype.panelHeight;
    /**
     * 下拉面反宽度与输入框宽度保持一至， 默认为 true
     * @type {?}
     */
    BaseComboComponent.prototype.autoWidth;
    /** @type {?} */
    BaseComboComponent.prototype.enableClear;
    /** @type {?} */
    BaseComboComponent.prototype.mapFields;
    /**
     * 禁用只读时显示 placeholder
     * @type {?}
     */
    BaseComboComponent.prototype.forcePlaceholder;
    /**
     * 任意输入 20210202
     * @type {?}
     */
    BaseComboComponent.prototype.nosearch;
    /**
     * 允许最大输入长度
     * @type {?}
     */
    BaseComboComponent.prototype.maxLength;
    /** @type {?} */
    BaseComboComponent.prototype.enableTitle;
    /**
     * 展示类型： text文本，tag标签。 默认 text
     * @type {?}
     */
    BaseComboComponent.prototype.viewType;
    /** @type {?} */
    BaseComboComponent.prototype.displayText;
    /** @type {?} */
    BaseComboComponent.prototype.maxHeight;
    /** @type {?} */
    BaseComboComponent.prototype.enableCancelSelected;
    /** @type {?} */
    BaseComboComponent.prototype.beforeShow;
    /** @type {?} */
    BaseComboComponent.prototype.beforeHide;
    /** @type {?} */
    BaseComboComponent.prototype.hidePanelOnClear;
    /**
     * 开启后，ngModel 的值为 valueField or  idField; 否则为textField的值
     * @type {?}
     */
    BaseComboComponent.prototype.useValue;
    /** @type {?} */
    BaseComboComponent.prototype.separator;
    /** @type {?} */
    BaseComboComponent.prototype.treeToList;
    /** @type {?} */
    BaseComboComponent.prototype.navTreeToList;
    /** @type {?} */
    BaseComboComponent.prototype.showPanel;
    /** @type {?} */
    BaseComboComponent.prototype.hidePanel;
    /** @type {?} */
    BaseComboComponent.prototype.clear;
    /** @type {?} */
    BaseComboComponent.prototype.valueChange;
    /** @type {?} */
    BaseComboComponent.prototype.selectChange;
    /** @type {?} */
    BaseComboComponent.prototype.input;
    /** @type {?} */
    BaseComboComponent.prototype.input2;
    /** @type {?} */
    BaseComboComponent.prototype.isOpen;
    /** @type {?} */
    BaseComboComponent.prototype.comPosition;
    /** @type {?} */
    BaseComboComponent.prototype.destroy$;
    /** @type {?} */
    BaseComboComponent.prototype.ngControl;
    /** @type {?} */
    BaseComboComponent.prototype.groupIcon;
    /** @type {?} */
    BaseComboComponent.prototype.localeService;
    /** @type {?} */
    BaseComboComponent.prototype.innerPanelHeight;
    /** @type {?} */
    BaseComboComponent.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype._cmbPanel;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype._comboPanelCreated$;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.willHide$;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.containerElement;
    /**
     * overlay
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.panelElement;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype._documentClickEvent;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.panelListener;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.mouseWheelEvent;
    /** @type {?} */
    BaseComboComponent.prototype.textChangeSubject;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.initdataSubscription;
    /** @type {?} */
    BaseComboComponent.prototype.customData;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.originalText;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.isTextChange;
    /** @type {?} */
    BaseComboComponent.prototype.treeClientSearch;
    /** @type {?} */
    BaseComboComponent.prototype.eventMgr;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.notifySer;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.ro;
    /** @type {?} */
    BaseComboComponent.prototype.onChange;
    /** @type {?} */
    BaseComboComponent.prototype.onTouched;
    /** @type {?} */
    BaseComboComponent.prototype.el;
    /** @type {?} */
    BaseComboComponent.prototype.cdr;
    /** @type {?} */
    BaseComboComponent.prototype.document;
    /** @type {?} */
    BaseComboComponent.prototype.render;
    /** @type {?} */
    BaseComboComponent.prototype.comboService;
    /** @type {?} */
    BaseComboComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jb21iby5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWNvbWJvLWxpc3QvIiwic291cmNlcyI6WyJsaWIvYmFzZS1jb21iby5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUNLLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxpQkFBaUIsRUFDbEUsU0FBUyxFQUFFLFNBQVMsRUFBNEIsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQzNFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBNEIsU0FBUyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xGLE9BQU8sRUFBd0IsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBYSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoSCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFN0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDckUsT0FBTyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDekQsT0FBTyxjQUFjLE1BQU0sMEJBQTBCLENBQUM7O0lBRWxELFlBQVksR0FBRyxDQUFDO0FBQ3BCO0lBeUxJLDRCQUNX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SUFXakMsMkNBQTZCOzs7OztJQUU3QixvQ0FBOEI7Ozs7O0lBQzlCLDZDQUErQjs7SUFDL0IsK0NBQWtDOzs7OztJQUNsQyxrREFBa0Q7O0lBRWxELHdDQUFrQjs7Ozs7SUFFbEIsMENBQTBCOzs7OztJQUMxQiwwQ0FBNkI7O0lBRTdCLDhDQUFpQzs7SUFFakMsc0NBQXVCOzs7OztJQUN2Qix1Q0FBaUM7Ozs7O0lBQ2pDLGdDQUF5Qzs7SUFDekMsc0NBQTBEOztJQUMxRCx1Q0FBbUM7O0lBRy9CLGdDQUFxQjs7SUFDckIsaUNBQTZCOztJQUM3QixzQ0FBc0M7O0lBQ3RDLG9DQUF3Qjs7SUFDeEIsMENBQWlDOztJQUNqQyxzQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb3RpZnlTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQge1xyXG4gICAgT25Jbml0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgUmVuZGVyZXIyLCBWaWV3Q2hpbGQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgSW5qZWN0LCBJbmplY3RvciwgTmdab25lXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YmplY3QsIGludGVydmFsLCBvZiwgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uLCBmcm9tRXZlbnQgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyB0YWtlVW50aWwsIGZpbHRlciwgc2tpcCwgZGVib3VuY2VUaW1lLCB0aHJvdHRsZSwgdGFrZSwgZGVsYXlXaGVuLCB0aHJvd0lmRW1wdHkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IENvbWJvU2VydmljZSB9IGZyb20gJy4vY29tYm8uc2VydmljZSc7XHJcbmltcG9ydCB7IElucHV0R3JvdXBDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWlucHV0LWdyb3VwJztcclxuaW1wb3J0IHsgU2VsZWN0SXRlbSwgTm9ybWFsT2JqZWN0LCBDb21ib0NoYW5nZXMgfSBmcm9tICcuL2NvbWJvLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IENvbWJvTG9jYWxlU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvY29tYm8ubG9jYWxlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDb21tb25VdGlscywgcmVxQW5pbUZyYW1lIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5pbXBvcnQgeyBFdmVudE1hbmFnZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IFJlc2l6ZU9ic2VydmVyIGZyb20gJ3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbCc7XHJcblxyXG5sZXQgbmV4dFVuaXF1ZUlkID0gMDtcclxuZXhwb3J0IGNsYXNzIEJhc2VDb21ib0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XHJcbiAgICBASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgQElucHV0KCkgcmVhZG9ubHkgPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpIGVkaXRhYmxlID0gdHJ1ZTtcclxuICAgIEBJbnB1dCgpIHBsYWNlaG9sZGVyID0gJyc7XHJcbiAgICBASW5wdXQoKSBwYW5lbFdpZHRoID0gMzAwO1xyXG4gICAgQElucHV0KCkgcGFuZWxIZWlnaHQ6IG51bWJlciB8IHN0cmluZyA9ICdhdXRvJztcclxuICAgIC8qKiDkuIvmi4npnaLlj43lrr3luqbkuI7ovpPlhaXmoYblrr3luqbkv53mjIHkuIDoh7PvvIwg6buY6K6k5Li6IHRydWUgKi9cclxuICAgIEBJbnB1dCgpIGF1dG9XaWR0aCA9IHRydWU7XHJcbiAgICBASW5wdXQoKSBlbmFibGVDbGVhciA9IHRydWU7XHJcbiAgICBASW5wdXQoKSBtYXBGaWVsZHM6IGFueTtcclxuICAgIC8qKiDnpoHnlKjlj6ror7vml7bmmL7npLogcGxhY2Vob2xkZXIgKi9cclxuICAgIEBJbnB1dCgpIGZvcmNlUGxhY2Vob2xkZXIgPSBmYWxzZTtcclxuXHJcbiAgICAvKiog5Lu75oSP6L6T5YWlIDIwMjEwMjAyICovXHJcbiAgICBASW5wdXQoKSBub3NlYXJjaCA9IGZhbHNlO1xyXG4gICAgLyoqIOWFgeiuuOacgOWkp+i+k+WFpemVv+W6piAqL1xyXG4gICAgQElucHV0KCkgbWF4TGVuZ3RoO1xyXG5cclxuICAgIC8vIOm8oOagh+a7kei/h+aYvuekuuaWh+acrOWGheWuuVxyXG4gICAgQElucHV0KCkgZW5hYmxlVGl0bGUgPSB0cnVlO1xyXG4gICAgLyoqIOWxleekuuexu+Wei++8miB0ZXh05paH5pys77yMdGFn5qCH562+44CCIOm7mOiupCB0ZXh0ICovXHJcbiAgICBASW5wdXQoKSB2aWV3VHlwZTogJ3RleHQnIHwgJ3RhZycgPSAndGV4dCc7XHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IGNvbnRleHQodmFsdWUpIHtcclxuICAgICAgICB0aGlzLmNvbWJvU2VydmljZS5jb250ZXh0ID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IG1hcHBpbmdGaWVsZCh2OiBhbnkpIHtcclxuICAgICAgICB0aGlzLm1hcEZpZWxkcyA9IHY7XHJcbiAgICB9XHJcbiAgICBnZXQgbWFwcGluZ0ZpZWxkKCk6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwRmllbGRzO1xyXG4gICAgfVxyXG4gICAgQElucHV0KClcclxuICAgIHNldCBkYXRhKHZhbDogTm9ybWFsT2JqZWN0W10pIHtcclxuICAgICAgICB0aGlzLmNvbWJvU2VydmljZS5kYXRhID0gdmFsO1xyXG4gICAgfVxyXG4gICAgZ2V0IGRhdGEoKTogTm9ybWFsT2JqZWN0W10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJvU2VydmljZS5kYXRhO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IGlkRmllbGQodmFsOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmNvbWJvU2VydmljZS5pZEZpZWxkID0gdmFsO1xyXG4gICAgfVxyXG4gICAgZ2V0IGlkRmllbGQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21ib1NlcnZpY2UuaWRGaWVsZDtcclxuICAgIH1cclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgdmFsdWVGaWVsZCh2YWw6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuY29tYm9TZXJ2aWNlLnZhbHVlRmllbGQgPSB2YWw7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWVGaWVsZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJvU2VydmljZS52YWx1ZUZpZWxkID8gdGhpcy5jb21ib1NlcnZpY2UudmFsdWVGaWVsZCA6IHRoaXMuaWRGaWVsZDtcclxuICAgIH1cclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgdGV4dEZpZWxkKHZhbDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5jb21ib1NlcnZpY2UudGV4dEZpZWxkID0gdmFsO1xyXG4gICAgfVxyXG4gICAgZ2V0IHRleHRGaWVsZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJvU2VydmljZS50ZXh0RmllbGQ7XHJcbiAgICB9XHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IG11bHRpU2VsZWN0KHZhbDogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuY29tYm9TZXJ2aWNlLm11bHRpU2VsZWN0ID0gdmFsO1xyXG4gICAgfVxyXG4gICAgZ2V0IG11bHRpU2VsZWN0KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJvU2VydmljZS5tdWx0aVNlbGVjdDtcclxuICAgIH1cclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgdXJpKHZhbDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5jb21ib1NlcnZpY2UudXJpID0gdmFsO1xyXG4gICAgfVxyXG4gICAgZ2V0IHVyaSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJvU2VydmljZS51cmk7XHJcbiAgICB9XHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IHNlbGVjdGVkVmFsdWVzKHZhbDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5jb21ib1NlcnZpY2Uuc2VsZWN0ZWRWYWx1ZXMgPSB2YWw7XHJcbiAgICB9XHJcbiAgICBnZXQgc2VsZWN0ZWRWYWx1ZXMoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21ib1NlcnZpY2Uuc2VsZWN0ZWRWYWx1ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNlbGVjdGVkVmFsdWVzU3RyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVmFsdWVzID09PSBudWxsIHx8IHRoaXMuc2VsZWN0ZWRWYWx1ZXMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWVzID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAodGhpcy5zZWxlY3RlZFZhbHVlcykgKyAnJztcclxuICAgIH1cclxuICAgIEBJbnB1dCgpIGRpc3BsYXlUZXh0ID0gJyc7XHJcbiAgICBASW5wdXQoKSBtYXhIZWlnaHQgPSAyMDA7XHJcbiAgICBASW5wdXQoKSBlbmFibGVDYW5jZWxTZWxlY3RlZCA9IGZhbHNlO1xyXG5cclxuICAgIC8qKiDov5znq6/ov4fmu6QgKi9cclxuICAgIEBJbnB1dCgpIGdldCByZW1vdGVTZWFyY2goKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tYm9TZXJ2aWNlLnJlbW90ZVNlYXJjaDtcclxuICAgIH1cclxuICAgIHNldCByZW1vdGVTZWFyY2godmFsOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5jb21ib1NlcnZpY2UucmVtb3RlU2VhcmNoID0gdmFsO1xyXG4gICAgfVxyXG4gICAgQElucHV0KCkgYmVmb3JlU2hvdzogKGluc3RhbmNlPzogdGhpcykgPT4gT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgQElucHV0KCkgYmVmb3JlSGlkZTogKGluc3RhbmNlPzogdGhpcykgPT4gT2JzZXJ2YWJsZTxhbnk+O1xyXG5cclxuICAgIC8vIOWmguaenOmdouadv+W3suaJk+W8gO+8jCDngrnlh7vmuIXnqbrmjInpkq7ml7bmmK/lkKblhbPpl63pnaLmnb/jgIJ0cnVlOiDlhbPpl63vvJsgZmFsc2U6IOS4jeWFs+mXre+8m1xyXG4gICAgQElucHV0KCkgaGlkZVBhbmVsT25DbGVhciA9IGZhbHNlO1xyXG4gICAgLyoqIOW8gOWQr+WQju+8jG5nTW9kZWwg55qE5YC85Li6IHZhbHVlRmllbGQgb3IgIGlkRmllbGQ7IOWQpuWImeS4unRleHRGaWVsZOeahOWAvCAqL1xyXG4gICAgQElucHV0KCkgdXNlVmFsdWUgPSBmYWxzZTtcclxuXHJcbiAgICBASW5wdXQoKSBzZXBhcmF0b3IgPSAnLCc7XHJcblxyXG4gICAgQElucHV0KCkgdHJlZVRvTGlzdCA9IGZhbHNlO1xyXG4gICAgQElucHV0KCkgbmF2VHJlZVRvTGlzdCA9IGZhbHNlO1xyXG5cclxuICAgIEBPdXRwdXQoKSBzaG93UGFuZWwgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgaGlkZVBhbmVsID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIGNsZWFyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIHZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxDb21ib0NoYW5nZXM+KCk7XHJcbiAgICBAT3V0cHV0KCkgc2VsZWN0Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxTZWxlY3RJdGVtPigpO1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ2NvbWJvUGFuZWwnKSBzZXQgY21iUGFuZWwoY21wOiBFbGVtZW50UmVmKSB7XHJcbiAgICAgICAgaWYgKGNtcCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jbWJQYW5lbCA9IGNtcDtcclxuICAgICAgICAgICAgdGhpcy5yby5vYnNlcnZlKGNtcC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICAgICAgdGhpcy5fY29tYm9QYW5lbENyZWF0ZWQkLm5leHQoY21wKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9jbWJQYW5lbCA9IG51bGw7XHJcbiAgICAgICAgICAgIC8vIHRoaXMucm8udW5vYnNlcnZlKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJvKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9jb21ib1BhbmVsQ3JlYXRlZCQubmV4dChudWxsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgQFZpZXdDaGlsZCgnaW5wdXQnKSBpbnB1dDogSW5wdXRHcm91cENvbXBvbmVudDtcclxuICAgIEBWaWV3Q2hpbGQoJ2lucHV0MicpIGlucHV0MjogRWxlbWVudFJlZjtcclxuICAgIHB1YmxpYyBpc09wZW4gPSBmYWxzZTtcclxuICAgIHB1YmxpYyBjb21Qb3NpdGlvbiA9IHt9O1xyXG4gICAgcHVibGljIGRlc3Ryb3kkID0gbmV3IFN1YmplY3QoKTtcclxuICAgIHB1YmxpYyBuZ0NvbnRyb2w6IE5nQ29udHJvbCB8IGFueSA9IG51bGw7XHJcbiAgICBwdWJsaWMgZ3JvdXBJY29uID0gJzxzcGFuIGNsYXNzPVwiZi1pY29uIGYtaWNvbi1hcnJvdy02MC1kb3duXCI+PC9zcGFuPic7XHJcbiAgICBwdWJsaWMgbG9jYWxlU2VydmljZTogQ29tYm9Mb2NhbGVTZXJ2aWNlO1xyXG4gICAgcHVibGljIGlubmVyUGFuZWxIZWlnaHQ6IGFueTtcclxuICAgIHB1YmxpYyBjb21tb25VdGlsczogQ29tbW9uVXRpbHM7XHJcbiAgICBwcml2YXRlIF9jbWJQYW5lbDogRWxlbWVudFJlZiA9IG51bGw7XHJcbiAgICBwcml2YXRlIF9jb21ib1BhbmVsQ3JlYXRlZCQgPSBuZXcgU3ViamVjdCgpO1xyXG4gICAgLy8gcHJpdmF0ZSBfaGFzUG9zaXRlZCA9IGZhbHNlO1xyXG4gICAgLy8gcHJpdmF0ZSBfY29udGFpbmVyOiBFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSB3aWxsSGlkZSQ6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdCgpO1xyXG4gICAgcHJpdmF0ZSBjb250YWluZXJFbGVtZW50OiBhbnk7XHJcbiAgICAvKiogb3ZlcmxheSAqL1xyXG4gICAgcHJpdmF0ZSBwYW5lbEVsZW1lbnQ6IGFueTtcclxuICAgIHByaXZhdGUgX2RvY3VtZW50Q2xpY2tFdmVudDogYW55O1xyXG4gICAgc2V0IHNlbGVjdGlvbnModmFsdWU6IE5vcm1hbE9iamVjdFtdKSB7XHJcbiAgICAgICAgdGhpcy5jb21ib1NlcnZpY2Uuc2VsZWN0aW9ucyA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgZ2V0IHNlbGVjdGlvbnMoKTogTm9ybWFsT2JqZWN0W10ge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbWJvU2VydmljZS5zZWxlY3Rpb25zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbWJvU2VydmljZS5zZWxlY3Rpb25zLmZpbHRlcihuID0+IG4gIT09IG51bGwgJiYgbiAhPT0gdW5kZWZpbmVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcGFuZWxMaXN0ZW5lciA9IG51bGw7XHJcblxyXG4gICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSA9IG51bGw7XHJcbiAgICBwcml2YXRlIG1vdXNlV2hlZWxFdmVudCA9IG51bGw7XHJcbiAgICB0ZXh0Q2hhbmdlU3ViamVjdCA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICBwcml2YXRlIGluaXRkYXRhU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24gPSBudWxsO1xyXG5cclxuICAgIGN1c3RvbURhdGEgPSBudWxsO1xyXG5cclxuICAgIHByaXZhdGUgb3JpZ2luYWxUZXh0ID0gJyc7XHJcbiAgICBwcml2YXRlIGlzVGV4dENoYW5nZSA9IGZhbHNlO1xyXG5cclxuICAgIHRyZWVDbGllbnRTZWFyY2ggPSBuZXcgU3ViamVjdCgpO1xyXG5cclxuICAgIGV2ZW50TWdyOiBFdmVudE1hbmFnZXI7XHJcbiAgICBwcml2YXRlIG5vdGlmeVNlcjogTm90aWZ5U2VydmljZTtcclxuICAgIHByaXZhdGUgcm86IFJlc2l6ZU9ic2VydmVyIHwgbnVsbCA9IG51bGw7XHJcbiAgICBvbkNoYW5nZTogKHZhbHVlOiBzdHJpbmcgfCBzdHJpbmdbXSkgPT4gdm9pZCA9ICgpID0+IG51bGw7XHJcbiAgICBvblRvdWNoZWQ6ICgpID0+IHZvaWQgPSAoKSA9PiBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyBlbDogRWxlbWVudFJlZixcclxuICAgICAgICBwdWJsaWMgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBwdWJsaWMgZG9jdW1lbnQ6IGFueSxcclxuICAgICAgICBwdWJsaWMgcmVuZGVyOiBSZW5kZXJlcjIsXHJcbiAgICAgICAgcHVibGljIGNvbWJvU2VydmljZTogQ29tYm9TZXJ2aWNlLFxyXG4gICAgICAgIHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3JcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMuaW5pdFRvZ2dsZUFjdGlvbigpO1xyXG4gICAgICAgIHRoaXMuaW5pdFNlbGVjdGlvbnNDaGFuZ2VBY3Rpb24oKTtcclxuICAgICAgICB0aGlzLmluaXREYXRhc0NoYW5nZUFjdGlvbigpO1xyXG5cclxuICAgICAgICB0aGlzLmNvbW1vblV0aWxzID0gdGhpcy5pbmplY3Rvci5nZXQoQ29tbW9uVXRpbHMsIG51bGwpO1xyXG4gICAgICAgIHRoaXMud2lsbEhpZGUkLnBpcGUoXHJcbiAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKVxyXG4gICAgICAgICkuc3Vic2NyaWJlKGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMubm9zZWFyY2ggJiYgdGhpcy5kaXNwbGF5VGV4dCAhPT0gdGhpcy5vcmlnaW5hbFRleHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheVRleHQgPSB0aGlzLm9yaWdpbmFsVGV4dDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0xvb2t1cCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNoYW5nZSh0aGlzLmRpc3BsYXlUZXh0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgX2Rpc3BsYXlUZXh0ID0gdGhpcy5jb21ib1NlcnZpY2UuZ2V0VmFsdWUodGhpcy50ZXh0RmllbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25WYWx1ZUNoYW5nZSh7IHRleHQ6IF9kaXNwbGF5VGV4dCwgdmFsdWU6IHRoaXMuc2VsZWN0ZWRWYWx1ZXMsIHNlbGVjdGlvbnM6IHRoaXMuc2VsZWN0aW9ucyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpc1snX3NlYXJjaEtleVdvcmRzJ10gPSAnJztcclxuICAgICAgICAgICAgdGhpcy5vblRvdWNoZWQoKTtcclxuICAgICAgICAgICAgdGhpcy5oaWRlUGFuZWwuZW1pdCh0aGlzKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5uZ1pvbmUgPSB0aGlzLmluamVjdG9yLmdldChOZ1pvbmUpO1xyXG4gICAgICAgIHRoaXMuZXZlbnRNZ3IgPSB0aGlzLmluamVjdG9yLmdldChFdmVudE1hbmFnZXIpO1xyXG4gICAgICAgIHRoaXMuZW1pdFRleHRDaGFuZ2UoKTtcclxuXHJcbiAgICAgICAgdGhpcy5ub3RpZnlTZXIgPSB0aGlzLmluamVjdG9yLmdldChOb3RpZnlTZXJ2aWNlLCBudWxsKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5sb2NhbGVTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoQ29tYm9Mb2NhbGVTZXJ2aWNlLCAnJyk7XHJcbiAgICAgICAgaWYgKHRoaXMubG9jYWxlU2VydmljZSkge1xyXG4gICAgICAgICAgICBjb25zdCBsb2NhbENvbmZpZyA9IHRoaXMubG9jYWxlU2VydmljZS5nZXRMb2NhbGVDb25maWcoKTtcclxuICAgICAgICAgICAgaWYgKGxvY2FsQ29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucGxhY2Vob2xkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVyID0gbG9jYWxDb25maWdbJ3BsYWNlaG9sZGVyJ10gfHwgJ+ivt+mAieaLqSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29tYm9TZXJ2aWNlLnNlcGFyYXRvciA9IHRoaXMuc2VwYXJhdG9yO1xyXG4gICAgICAgIHRoaXMuY29tYm9TZXJ2aWNlWyd0cmVlVG9MaXN0J10gPSB0aGlzLnRyZWVUb0xpc3Q7XHJcbiAgICAgICAgdGhpcy5jb21ib1NlcnZpY2VbJ25hdlRyZWVUb0xpc3QnXSA9IHRoaXMubmF2VHJlZVRvTGlzdDtcclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5uZ0NvbnRyb2wgPSB0aGlzLmluamVjdG9yLmdldChOZ0NvbnRyb2wsIG51bGwpO1xyXG4gICAgICAgIGZyb21FdmVudCh3aW5kb3csICdyZXNpemUnKS5waXBlKFxyXG4gICAgICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JClcclxuICAgICAgICApLnBpcGUoXHJcbiAgICAgICAgICAgIGRlYm91bmNlVGltZSgxMDApLFxyXG4gICAgICAgICAgICB0aHJvdHRsZShldiA9PiBpbnRlcnZhbCgxMDApKSxcclxuICAgICAgICApLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUGFuZWxXaWR0aCgpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc09wZW4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29tYm9TZXJ2aWNlLmlzT3BlbiQubmV4dChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndpbGxIaWRlJC5uZXh0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMubmdab25lKSB7XHJcbiAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQudXBkYXRlUGFuZWxXaWR0aCgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgbGV0IHJlc3ppZVRpbWVyID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5ybyA9IG5ldyBSZXNpemVPYnNlcnZlcigoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN6aWVUaW1lcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQocmVzemllVGltZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXN6aWVUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5fY21iUGFuZWwgJiYgdGhhdC5wYW5lbEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcUFuaW1GcmFtZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC51cGRhdGVQb3NpdGlvbih0aGF0Ll9jbWJQYW5lbC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5fY21iUGFuZWwubmF0aXZlRWxlbWVudC5jbGFzc05hbWUuaW5kZXhPZignZi1hcmVhLXNob3cnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5yZW5kZXIuYWRkQ2xhc3ModGhhdC5fY21iUGFuZWwubmF0aXZlRWxlbWVudCwgJ2YtYXJlYS1zaG93Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LCAxMCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNvbWJvU2VydmljZS5pbmplY3RTZXJ2aWNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XHJcbiAgICAgICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xyXG4gICAgICAgIHRoaXMuY29tYm9TZXJ2aWNlLnNlcmFjaFZhbHVlJC51bnN1YnNjcmliZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5tb3VzZVdoZWVsRXZlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZVdoZWVsRXZlbnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVQYW5lbFdpZHRoKCkge1xyXG4gICAgICAgIGNvbnN0IHsgd2lkdGggfSA9IHRoaXMuZ2V0SW5wdXRTaXplSW5mbygpO1xyXG4gICAgICAgIHRoaXMucGFuZWxXaWR0aCA9IHRoaXMuYXV0b1dpZHRoID8gd2lkdGggOiB0aGlzLnBhbmVsV2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgb25DbGljaygkZXZlbnQ6IGFueSA9IG51bGwpIHtcclxuICAgICAgICBpZiAoJGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmICgkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJGV2ZW50Lm9yaWdpbmFsRXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkZXZlbnQub3JpZ2luYWxFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g6YeN5aSN5omn6KGM6Z2i5p2/5YWz6Zet5LqL5Lu2IOaVheazqOmHiuaOiSAyMDIyMDkxN1xyXG4gICAgICAgIC8vIGlmICh0aGlzLmlzT3Blbikge1xyXG4gICAgICAgIC8vICAgICB0aGlzLndpbGxIaWRlJC5uZXh0KCk7XHJcbiAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5jb21ib1NlcnZpY2UuaXNPcGVuJC5uZXh0KCF0aGlzLmlzT3Blbik7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICB0aGlzLmNvbWJvU2VydmljZS5pc09wZW4kLm5leHQoIXRoaXMuaXNPcGVuKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW5wdXQgJiYgdGhpcy5pbnB1dC50ZXh0Ym94KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5wdXQudGV4dGJveC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uQmx1cihldmVudDogRXZlbnQpIHtcclxuICAgICAgICB0aGlzLm9uVG91Y2hlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRm9jdXMoZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICAgICAgLy8gLy8g5ZCv55So5Lu75oSP6L6T5YWl5ZCO77yM5paH5pys5qGG5b6X5Yiw54Sm54K55ZCO5LiN5by55Ye65LiL5ouJ6Z2i5p2/44CCMjAyMS8wMi8xOVxyXG4gICAgICAgIC8vIGlmICh0aGlzLm5vc2VhcmNoKSB7XHJcbiAgICAgICAgLy8gICAgIHJldHVybiA7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAvLyBpZiAoIXRoaXMuaXNPcGVuKSB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuY29tYm9TZXJ2aWNlLmlzT3BlbiQubmV4dCh0cnVlKTtcclxuICAgICAgICAvLyAgICAgLy8g5bu26L+f5omn6KGM5Y+Y5pu05qOA5rWLIOabtOaWsOW8ueWHuuahhuS9jee9rlxyXG4gICAgICAgIC8vIG9mKCcnKS5waXBlKGRlYm91bmNlVGltZSgwKSkuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICAvLyAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgICAgIC8vIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICBvbklucHV0Y2xpY2soJGV2ZW50PzogYW55KSB7XHJcbiAgICAgICAgaWYgKCRldmVudCAmJiAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XHJcbiAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb21ib1NlcnZpY2UuaXNPcGVuJC5uZXh0KCF0aGlzLmlzT3Blbik7XHJcbiAgICB9XHJcblxyXG4gICAgb25FbnRlcihldmVudDogRXZlbnQpIHsgfVxyXG5cclxuICAgIGJsdXIoKSB7XHJcbiAgICAgICAgdGhpcy5pbnB1dC50ZXh0Ym94Lm5hdGl2ZUVsZW1lbnQuYmx1cigpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvY3VzKCkge1xyXG4gICAgICAgIHRoaXMuaW5wdXQudGV4dGJveC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25DbGVhcigpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWVzID0gJyc7XHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25zID0gW107XHJcbiAgICAgICAgdGhpcy5vblZhbHVlQ2hhbmdlKHsgdGV4dDogJycsIHZhbHVlOiAnJywgc2VsZWN0aW9uczogW10gfSk7XHJcbiAgICAgICAgdGhpcy5jbGVhci5lbWl0KCk7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNPcGVuICYmIHRoaXMuaGlkZVBhbmVsT25DbGVhcikge1xyXG4gICAgICAgICAgICAvLyB0aGlzLmNvbWJvU2VydmljZS5pc09wZW4kLm5leHQoZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLndpbGxIaWRlJC5uZXh0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0SW5wdXRTaXplSW5mbygpIHtcclxuICAgICAgICBjb25zdCBlbDogYW55ID0gdGhpcy52aWV3VHlwZSA9PT0gJ3RleHQnID8gdGhpcy5pbnB1dC5pbnB1dEdyb3VwIDogdGhpcy5pbnB1dDI7XHJcbiAgICAgICAgcmV0dXJuIGVsLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgZW1pdFRleHRDaGFuZ2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dENoYW5nZVN1YmplY3QucGlwZShcclxuICAgICAgICAgICAgZGVib3VuY2VUaW1lKDIwMClcclxuICAgICAgICApLnN1YnNjcmliZSgocjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IF9zZWxlY3RlZFZhbHVlcyA9IHRoaXMuc2VsZWN0ZWRWYWx1ZXM7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IHIgPyByIDogdGhpcy5kaXNwbGF5VGV4dDtcclxuXHJcbiAgICAgICAgICAgIGlmIChyID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkNsZWFyKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5ub3NlYXJjaCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblZhbHVlQ2hhbmdlKHsgdGV4dDogciwgdmFsdWU6ICcnLCBzZWxlY3Rpb25zOiB0aGlzLnNlbGVjdGlvbnMsIG5vc2VhcmNoOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMucmVtb3RlU2VhcmNoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubXVsdGlTZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb21ib1NlcnZpY2UuZGlzcGxheVR5cGUgPT09ICdMT09LVVBUUkVFTElTVCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmVlQ2xpZW50U2VhcmNoLm5leHQodmFsKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbWJvU2VydmljZS5zZXJhY2hWYWx1ZSQubmV4dCh2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsQXJyID0gKHZhbCArICcnKS5zcGxpdCh0aGlzLnNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXBwZW5kVmFsID0gdmFsQXJyW3ZhbEFyci5sZW5ndGggLSAxXSA/IHZhbEFyclt2YWxBcnIubGVuZ3RoIC0gMV0gOiAnJztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbWJvU2VydmljZS5zZXJhY2hWYWx1ZSQubmV4dChhcHBlbmRWYWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gaWYgKF9zZWxlY3RlZFZhbHVlcyAhPT0gdGhpcy5zZWxlY3RlZFZhbHVlcykge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIHRoaXMub25WYWx1ZUNoYW5nZSh7IHRleHQ6IHRoaXMuZGlzcGxheVRleHQsIHZhbHVlOiB0aGlzLnNlbGVjdGVkVmFsdWVzLCBzZWxlY3Rpb25zOiB0aGlzLnNlbGVjdGlvbnMgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJEYXRhT25TZXJ2ZXIodmFsLCAnKicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgX19jcmVhdGVQYW5lbCh2YWx1ZTogYW55LCBzZWFyY2hQYXJhbSA9IG51bGwpIHtcclxuICAgICAgICBsZXQgcGFyYW1zOiBhbnkgPSB7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZXQgbWV0aG9kID0gJ2dldCc7XHJcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgcGFyYW1zOiBfcCwgZGF0YSwgbWV0aG9kOiBfbSwgc2hvd0RpYWxvZyB9ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGlmIChzaG93RGlhbG9nID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zID0ge2RhdGF9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXN0b21EYXRhID0gZGF0YTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChfcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IHtkYXRhOiBfcH07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXN0b21EYXRhID0gX3A7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VzdG9tRGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChfbSkge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kID0gX207XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHRoaXMuaW5pdENyZWF0UGFuZWxBY3Rpb24oKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudXJpKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRWYWx1ZXMoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzTG9va3VwKCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNPcGVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNPcGVuID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5jb21ib1NlcnZpY2UuZGlzcGxheVR5cGUgPT09ICdMT09LVVBUUkVFTElTVCcpIHtcclxuICAgICAgICAgICAgcGFyYW1zLmVuYWJsZUZ1bGxUcmVlID0gdGhpc1snZW5hYmxlRnVsbFRyZWUnXTtcclxuICAgICAgICAgICAgcGFyYW1zLmxvYWRUcmVlRGF0YVR5cGUgPSB0aGlzWydsb2FkVHJlZURhdGFUeXBlJ107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pc0xvb2t1cCgpICYmIHRoaXMuaW5wdXQgJiYgdGhpcy5ub3NlYXJjaCkge1xyXG4gICAgICAgICAgICB0aGlzLmlucHV0LnRleHRib3gubmF0aXZlRWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBmb2N1c0lucHV0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0xvb2t1cCgpICYmIHRoaXMuaW5wdXQgICYmIHRoaXMubm9zZWFyY2gpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQudGV4dGJveC5uYXRpdmVFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0LmZvY3VzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAoc2VhcmNoUGFyYW0pIHtcclxuICAgICAgICAgICAgcGFyYW1zLnNlYXJjaFZhbHVlID0gc2VhcmNoUGFyYW0uc2VhcmNoVmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5pbml0ZGF0YVN1YnNjcmlwdGlvbiA9IHRoaXMuY29tYm9TZXJ2aWNlLmluaXREYXRhKHBhcmFtcywgbWV0aG9kLCB0aGlzLnNlbGVjdGVkVmFsdWVzKS5waXBlKFxyXG4gICAgICAgICAgICB0aHJvd0lmRW1wdHkoZm9jdXNJbnB1dClcclxuICAgICAgICApLnN1YnNjcmliZShuID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzT3Blbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc09wZW4gPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvY3VzSW5wdXQoKTtcclxuICAgICAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyDnpoHmraLmu5rliqhcclxuICAgICAgICAvLyB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmNvbnRhaW5lckVsZW1lbnQsICdwb2ludGVyLWV2ZW50cycsICdhdXRvJyk7XHJcbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyRG9jdW1lbnRFdmVudCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOaYvuekuuWJjeS6i+S7tlxyXG4gICAgcHJpdmF0ZSBvbkJlZm9yZVNob3coKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmJlZm9yZVNob3cpIHtcclxuICAgICAgICAgICAgdGhpcy5iZWZvcmVTaG93ID0gKCkgPT4gb2YoJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5iZWZvcmVTaG93KHRoaXMpLnBpcGUodGFrZSgxKSk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGlzTG9va3VwKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJvU2VydmljZS5kaXNwbGF5VHlwZS5pbmRleE9mKCdMT09LVVAnKSA+IC0xO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOmakOiXj+WJjeS6i+S7tlxyXG4gICAgcHJpdmF0ZSBvbkJlZm9yZUhpZGUoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmJlZm9yZUhpZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5iZWZvcmVIaWRlID0gKCkgPT4gb2YoJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmJlZm9yZUhpZGUodGhpcylcclxuICAgICAgICAgICAgLnBpcGUodGFrZSgxKSlcclxuICAgICAgICAgICAgLnN1YnNjcmliZSh2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5oaWRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubm90aWZ5U2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnlTZXIud2FybmluZyh2YWx1ZS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5pbmZvKHZhbHVlLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOaYvuekuuaIlumakOiXj+S4i+aLieahhlxyXG4gICAgcHJpdmF0ZSBpbml0VG9nZ2xlQWN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuY29tYm9TZXJ2aWNlLmlzT3BlbiQucGlwZShcclxuICAgICAgICAgICAgZGVib3VuY2VUaW1lKDIwKSxcclxuICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveSQpLFxyXG4gICAgICAgICAgICBza2lwKDEpKS5zdWJzY3JpYmUodmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVhZG9ubHkgfHwgdGhpcy5kaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgb3BlbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNlYXJjaFBhcmFtID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3BlbiA9IHZhbHVlLmlzT3BlbjtcclxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hQYXJhbSA9IHZhbHVlLnNlYXJjaDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3Blbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25CZWZvcmVTaG93KCkuc3Vic2NyaWJlKCh2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19jcmVhdGVQYW5lbCh2LCBzZWFyY2hQYXJhbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQmVmb3JlSGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbWJvUGFuZWxDcmVhdGVkJC5waXBlKFxyXG4gICAgICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JCksXHJcbiAgICAgICAgICAgIGZpbHRlcih2YWx1ZSA9PiAhIXZhbHVlKVxyXG4gICAgICAgICkuc3Vic2NyaWJlKChjbXA6IEVsZW1lbnRSZWYpID0+IHtcclxuICAgICAgICAgICAgY21wLm5hdGl2ZUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pbml0Q3JlYXRQYW5lbEFjdGlvbigpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIHRoaXMucGFuZWxFbGVtZW50LmFwcGVuZENoaWxkKGNtcC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICAgICAgbGV0IHRyYW5zaXRpb25GbGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgY21wLm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIChlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0ICYmIHRyYW5zaXRpb25GbGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbkZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dQYW5lbC5lbWl0KHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzTG9va3VwKCkpIHtcclxuICAgICAgICAgICAgICAgIGNtcC5uYXRpdmVFbGVtZW50LnN0eWxlLndpZHRoID0gYCR7dGhpcy5wYW5lbFdpZHRofXB4YDtcclxuICAgICAgICAgICAgICAgIGNtcC5uYXRpdmVFbGVtZW50LnN0eWxlLmhlaWdodCA9IGAke3RoaXMucGFuZWxIZWlnaHR9cHhgO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIuYWRkQ2xhc3MoY21wLm5hdGl2ZUVsZW1lbnQsICdmLWFyZWEtc2hvdycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyB0aGlzLnVwZGF0ZVBvc2l0aW9uKGNtcC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICAgICAgLy8gdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmRlc3Ryb3kkLnBpcGUodGFrZSgxKSkuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jb21ib1NlcnZpY2UuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgIG5leHRVbmlxdWVJZCA9IDA7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBhbmVsTGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFuZWxMaXN0ZW5lcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmluaXRkYXRhU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRkYXRhU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRkYXRhU3Vic2NyaXB0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZVBhbmVsRWxlbWVudCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaWZyYW1lRXZlbnRIYW5kbGUoYWN0aW9uOiAnYWRkRXZlbnRMaXN0ZW5lcicgfCAncmVtb3ZlRXZlbnRMaXN0ZW5lcicpIHtcclxuICAgICAgICBjb25zdCBpZnJhbWVzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpZnJhbWUnKSk7XHJcbiAgICAgICAgaWYgKGlmcmFtZXMgJiYgaWZyYW1lcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBpZnJhbWUgb2YgaWZyYW1lcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaWZyYW1lRG9jID0gaWZyYW1lLmNvbnRlbnREb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGlmIChpZnJhbWVEb2MpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZnJhbWVEb2NbYWN0aW9uXSgnbW91c2Vkb3duJywgdGhpcy5fZG9jdW1lbnRDbGlja0V2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBpZnJhbWVEb2NbYWN0aW9uXSgnbW91c2V3aGVlbCcsIHRoaXMuX2RvY3VtZW50Q2xpY2tFdmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWZyYW1lRG9jW2FjdGlvbl0oJ0RPTU1vdXNlU2Nyb2xsJywgdGhpcy5fZG9jdW1lbnRDbGlja0V2ZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbW92ZURvY3VtZW50TGlzdGVuZXIoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2RvY3VtZW50Q2xpY2tFdmVudCkge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLl9kb2N1bWVudENsaWNrRXZlbnQsIHRydWUpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXdoZWVsJywgdGhpcy5fZG9jdW1lbnRDbGlja0V2ZW50LCB0cnVlKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NTW91c2VTY3JvbGwnLCB0aGlzLl9kb2N1bWVudENsaWNrRXZlbnQsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRvcCAhPT0gd2luZG93KSB7XHJcbiAgICAgICAgICAgICAgICB0b3AuZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLl9kb2N1bWVudENsaWNrRXZlbnQsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmlmcmFtZUV2ZW50SGFuZGxlKCdyZW1vdmVFdmVudExpc3RlbmVyJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2RvY3VtZW50Q2xpY2tFdmVudCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVnaXN0ZXJEb2N1bWVudEV2ZW50KCkge1xyXG4gICAgICAgIC8vIOazqOWGjCBtb3VzZWRvd24g5LqL5Lu2IOmakOiXj3BhbmVsXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKHRoaXMuX2RvY3VtZW50Q2xpY2tFdmVudCA9IGV2ZW50ID0+IHtcclxuXHJcbiAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAnbW91c2V3aGVlbCcgJiYgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29tYm9TZXJ2aWNlLmlzT3BlbiQubmV4dChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICF0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSAmJiB0aGlzLl9jbWJQYW5lbCAmJiAhdGhpcy5jb250YWlucyh0aGlzLl9jbWJQYW5lbCwgZXZlbnQpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb21ib1NlcnZpY2UuaXNPcGVuJC5uZXh0KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMud2lsbEhpZGUkLm5leHQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLCB0cnVlKTtcclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V3aGVlbCcsIHRoaXMuX2RvY3VtZW50Q2xpY2tFdmVudCwgdHJ1ZSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NTW91c2VTY3JvbGwnLCB0aGlzLl9kb2N1bWVudENsaWNrRXZlbnQsIHRydWUpO1xyXG5cclxuICAgICAgICBpZiAodG9wICE9PSB3aW5kb3cpIHtcclxuICAgICAgICAgICAgdG9wLmRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5fZG9jdW1lbnRDbGlja0V2ZW50LCB0cnVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaWZyYW1lRXZlbnRIYW5kbGUoJ2FkZEV2ZW50TGlzdGVuZXInKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8g5Yib5bu65LiL5ouJ6Z2i5p2/5pe25LqL5Lu2XHJcbiAgICBwcml2YXRlIGluaXRDcmVhdFBhbmVsQWN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnBhbmVsRWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY3JlYXRlUGFuZWwoZG9jdW1lbnQuYm9keSk7XHJcbiAgICAgICAgdGhpcy5wYW5lbExpc3RlbmVyID0gdGhpcy5yZW5kZXIubGlzdGVuKHRoaXMucGFuZWxFbGVtZW50LCAnY2xpY2snLCAoZTogRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbW92ZVBhbmVsRWxlbWVudCgpIHtcclxuICAgICAgICByZXFBbmltRnJhbWUoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wYW5lbEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5wYW5lbEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYW5lbEVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0U2VsZWN0aW9uc0NoYW5nZUFjdGlvbigpIHtcclxuICAgICAgICB0aGlzLmNvbWJvU2VydmljZS5zZWxlY3Rpb25zJC5waXBlKFxyXG4gICAgICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JCksXHJcbiAgICAgICAgICAgIGRlYm91bmNlVGltZSgxMDApXHJcbiAgICAgICAgKS5zdWJzY3JpYmUodmFsdWUgPT4ge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUuYWN0aW9uID09PSAnaW5pdERhdGEnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uU2VsZWN0aW9uc0NoYW5nZSh0aGlzLnNlbGVjdGlvbnMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblNlbGVjdGlvbnNDaGFuZ2VEZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgaW5pdERhdGFzQ2hhbmdlQWN0aW9uKCkgeyB9XHJcblxyXG4gICAgLy8gY2FuTnVsbCDop6PlhrPlj5bmtojpgInkuK3ml7bkvp3nhLbmmL7npLpcclxuICAgIHByaXZhdGUgb25TZWxlY3Rpb25zQ2hhbmdlRGVmYXVsdCgpIHtcclxuXHJcbiAgICAgICAgY29uc3QgX2Rpc3BsYXlUZXh0ID0gdGhpcy5jb21ib1NlcnZpY2UuZ2V0VmFsdWUodGhpcy50ZXh0RmllbGQpO1xyXG4gICAgICAgIGNvbnN0IF9zZWxlY3RlZFZhbHVlcyA9IHRoaXMuY29tYm9TZXJ2aWNlLmdldFZhbHVlKHRoaXMuaWRGaWVsZCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRpc3BsYXlUZXh0ICE9PSBfZGlzcGxheVRleHQgJiYgIXRoaXMubm9zZWFyY2gpIHtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCA9IF9kaXNwbGF5VGV4dCB8fCB0aGlzLmRpc3BsYXlUZXh0O1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0ID0gdGhpcy5kaXNwbGF5VGV4dCB8fCAnJztcclxuICAgICAgICAgICAgdGhpcy5vcmlnaW5hbFRleHQgPSBfc2VsZWN0ZWRWYWx1ZXMgPyBfZGlzcGxheVRleHQgOiB0aGlzLmRpc3BsYXlUZXh0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW5wdXQpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnB1dC50ZXh0Ym94Lm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB0aGlzLmRpc3BsYXlUZXh0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFZhbHVlcyA9XHJcbiAgICAgICAgICAgIChfc2VsZWN0ZWRWYWx1ZXMgIT09ICcnICYmIF9zZWxlY3RlZFZhbHVlcyAhPT0gdW5kZWZpbmVkICYmIF9zZWxlY3RlZFZhbHVlcyAhPT0gbnVsbCkgPyBfc2VsZWN0ZWRWYWx1ZXMgOiB0aGlzLnNlbGVjdGVkVmFsdWVzO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuY2RyWydkZXN0cm95ZWQnXSkge1xyXG4gICAgICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvblNlbGVjdGlvbnNDaGFuZ2UodjogYW55W10pIHsgfVxyXG5cclxuICAgIHVwZGF0ZU1hcHBpbmdGaWVsZFZhbHVlKGNsZWFyTWFwRmllbGRzID0gZmFsc2UpIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHRoaXMubWFwcGluZ0ZpZWxkICYmXHJcbiAgICAgICAgICAgIHRoaXMubmdDb250cm9sICYmXHJcbiAgICAgICAgICAgIHRoaXMubmdDb250cm9sLmZvcm1EaXJlY3RpdmUgJiZcclxuICAgICAgICAgICAgdGhpcy5uZ0NvbnRyb2wuZm9ybURpcmVjdGl2ZS5mb3JtICYmXHJcbiAgICAgICAgICAgIHRoaXMubmdDb250cm9sLmZvcm1EaXJlY3RpdmUuZm9ybS5iaW5kaW5nRGF0YVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBjb25zdCBiaW5kaW5nRGF0YSA9IHRoaXMubmdDb250cm9sLmZvcm1EaXJlY3RpdmUuZm9ybS5iaW5kaW5nRGF0YTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjbGVhck1hcEZpZWxkcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFZhbHVlcyA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYmluZGluZ0RhdGEuc2V0VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJpbmRpbmdQYXRoID0gdGhpcy5uZ0NvbnRyb2wuZm9ybURpcmVjdGl2ZS5mb3JtLmJpbmRpbmdQYXRoO1xyXG4gICAgICAgICAgICAgICAgbGV0IHBhdGhBcnI6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgICAgICAgICBpZiAoYmluZGluZ1BhdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRoQXJyID0gYmluZGluZ1BhdGguc3BsaXQoJy8nKS5maWx0ZXIobiA9PiBuICE9PSAnJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXBwaW5nRmllbGQgPSB0aGlzLm1hcHBpbmdGaWVsZCA/IHRoaXMubWFwcGluZ0ZpZWxkIDogJyc7XHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nRGF0YS5zZXRWYWx1ZShwYXRoQXJyLmNvbmNhdChtYXBwaW5nRmllbGQuc3BsaXQoJy4nKSksIHRoaXMuc2VsZWN0ZWRWYWx1ZXMsIHRydWUsIHRydWUpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY29tbW9uVXRpbHMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29tbW9uVXRpbHMuc2V0VmFsdWUoYmluZGluZ0RhdGEsIHRoaXMubWFwcGluZ0ZpZWxkLCB0aGlzLnNlbGVjdGVkVmFsdWVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBpZiAoIWJpbmRpbmdEYXRhLnNldFZhbHVlICYmIHRoaXMuY29tbW9uVXRpbHMpIHtcclxuICAgICAgICAgICAgLy8gICAgIHRoaXMuY29tbW9uVXRpbHMuc2V0VmFsdWUoYmluZGluZ0RhdGEsIHRoaXMubWFwcGluZ0ZpZWxkLCB0aGlzLnNlbGVjdGVkVmFsdWVzKTtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTZWxlY3RlZFZhbHVlcygpIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHRoaXMubWFwcGluZ0ZpZWxkICYmXHJcbiAgICAgICAgICAgIHRoaXMubmdDb250cm9sICYmXHJcbiAgICAgICAgICAgIHRoaXMubmdDb250cm9sLmZvcm1EaXJlY3RpdmUgJiZcclxuICAgICAgICAgICAgdGhpcy5uZ0NvbnRyb2wuZm9ybURpcmVjdGl2ZS5mb3JtICYmXHJcbiAgICAgICAgICAgIHRoaXMubmdDb250cm9sLmZvcm1EaXJlY3RpdmUuZm9ybS5iaW5kaW5nRGF0YVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBjb25zdCBiaW5kaW5nRGF0YSA9IHRoaXMubmdDb250cm9sLmZvcm1EaXJlY3RpdmUuZm9ybS5iaW5kaW5nRGF0YTtcclxuICAgICAgICAgICAgaWYgKGJpbmRpbmdEYXRhLmdldFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiaW5kaW5nUGF0aCA9IHRoaXMubmdDb250cm9sLmZvcm1EaXJlY3RpdmUuZm9ybS5iaW5kaW5nUGF0aDtcclxuICAgICAgICAgICAgICAgIGxldCBwYXRoQXJyOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJpbmRpbmdQYXRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aEFyciA9IGJpbmRpbmdQYXRoLnNwbGl0KCcvJykuZmlsdGVyKHZhbHVlID0+IHZhbHVlICE9PSAnJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXBwaW5nRmllbGQgPSB0aGlzLm1hcHBpbmdGaWVsZCA/IHRoaXMubWFwcGluZ0ZpZWxkIDogJyc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWVzID0gYmluZGluZ0RhdGEuZ2V0VmFsdWUocGF0aEFyci5jb25jYXQobWFwcGluZ0ZpZWxkLnNwbGl0KCcuJykpKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbW1vblV0aWxzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWVzID0gdGhpcy5jb21tb25VdGlscy5nZXRWYWx1ZSh0aGlzLm1hcHBpbmdGaWVsZCwgYmluZGluZ0RhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5tYXBwaW5nRmllbGQpIHtcclxuICAgICAgICAgICAgLy8gdGhpcy5zZWxlY3RlZFZhbHVlcyA9IHRoaXMuZGlzcGxheVRleHRcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvblRleHRDaGFuZ2UodmFsPzogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5pc1RleHRDaGFuZ2UgPSB0cnVlO1xyXG4gICAgICAgIGlmICh0aGlzLm5vc2VhcmNoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZXMgPSB2YWw7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTWFwcGluZ0ZpZWxkVmFsdWUodGhpcy5pc0xvb2t1cCgpKTtcclxuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZSh2YWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRleHRDaGFuZ2VTdWJqZWN0Lm5leHQodmFsKTtcclxuICAgIH1cclxuXHJcbiAgICBvblZhbHVlQ2hhbmdlKGNoYW5nZXM6IENvbWJvQ2hhbmdlcykge1xyXG4gICAgICAgIHRoaXMuZGlzcGxheVRleHQgPSBjaGFuZ2VzLnRleHQ7XHJcbiAgICAgICAgdGhpcy5vcmlnaW5hbFRleHQgPSB0aGlzLmRpc3BsYXlUZXh0O1xyXG4gICAgICAgIGlmICghdGhpcy51cmkgJiYgdGhpcy5kYXRhICYmIHRoaXMuZGF0YS5sZW5ndGggPiAwICYmICghdGhpc1snZGlzcGxheVR5cGUnXSB8fCB0aGlzLnVzZVZhbHVlKSApIHtcclxuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZSh0aGlzLnNlbGVjdGVkVmFsdWVzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMuZGlzcGxheVRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpZiAoIWNoYW5nZXMubm9zZWFyY2gpIHtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZS5lbWl0KGNoYW5nZXMpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlTWFwcGluZ0ZpZWxkVmFsdWUoKTtcclxuICAgICAgICB0aGlzLm9uVG91Y2hlZCgpO1xyXG4gICAgICAgIC8vIGlmICh0aGlzLmlzT3BlbiAmJiBjaGFuZ2VzLmVtaXRIaWRlUGFuZWwpIHsgdGhpcy53aWxsSGlkZSQubmV4dCgpOyB9XHJcbiAgICB9XHJcblxyXG4gICAgb25TZWxlY3QoaXRlbTogYW55KSB7IH1cclxuICAgIG9uVW5TZWxlY3RlZChpdGVtOiBhbnkpIHsgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZW1pdDog6buY6K6k5Li6IHRydWU7XHJcbiAgICAgKi9cclxuICAgIGhpZGUoZW1pdCA9IHRydWUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNPcGVuKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZW1vdmVEb2N1bWVudExpc3RlbmVyKCk7XHJcbiAgICAgICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcclxuICAgICAgICBpZiAoZW1pdCkge1xyXG4gICAgICAgICAgICB0aGlzLndpbGxIaWRlJC5uZXh0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pbml0ZGF0YVN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLmluaXRkYXRhU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGRhdGFTdWJzY3JpcHRpb24gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlbW92ZVBhbmVsRWxlbWVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3coKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNPcGVuKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vbkJlZm9yZVNob3coKS5zdWJzY3JpYmUoKHZhbHVlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fX2NyZWF0ZVBhbmVsKHZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGVQYW5lbChob3N0OiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMucGFuZWxFbGVtZW50ID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICAgICAgdGhpcy5wYW5lbEVsZW1lbnQuaWQgPSBgb3ZlcmxheS0ke25leHRVbmlxdWVJZCsrfWA7XHJcbiAgICAgICAgdGhpcy5wYW5lbEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnb3ZlcmxheS1wYW5lJyk7XHJcblxyXG4gICAgICAgIHRoaXMucGFuZWxFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgIGhvc3QuYXBwZW5kQ2hpbGQodGhpcy5wYW5lbEVsZW1lbnQpO1xyXG5cclxuICAgICAgICB0aGlzLmNvbWJvU2VydmljZS5wYW5lbEVsZW1lbnQgPSB0aGlzLnBhbmVsRWxlbWVudDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNMb29rdXAoKSkge1xyXG4gICAgICAgICAgICBjb25zdCB7IHBhbmVsV2lkdGgsIHRvcCwgbGVmdCB9ID0gdGhpcy5nZXRQYW5lbFNpemUoKTtcclxuICAgICAgICAgICAgdGhpcy5wYW5lbEVsZW1lbnQuc3R5bGUud2lkdGggPSBgJHtwYW5lbFdpZHRofXB4YDtcclxuICAgICAgICAgICAgdGhpcy5wYW5lbEVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYCR7dGhpcy5wYW5lbEhlaWdodH1weGA7XHJcbiAgICAgICAgICAgIHRoaXMucGFuZWxFbGVtZW50LnN0eWxlLnRvcCA9IGAke3RvcH1weGA7XHJcbiAgICAgICAgICAgIHRoaXMucGFuZWxFbGVtZW50LnN0eWxlLmxlZnQgPSBgJHtsZWZ0fXB4YDtcclxuICAgICAgICAgICAgdGhpcy5wYW5lbEVsZW1lbnQuc3R5bGUuekluZGV4ID0gMTAwMDE7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBhbmVsRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdmLWNvbWJvLWxvb2t1cCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFuZWxFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHRoaXMucGFuZWxFbGVtZW50LCAndG9wJywgJzAnKTtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXIuc2V0U3R5bGUodGhpcy5wYW5lbEVsZW1lbnQsICdsZWZ0JywgJzAnKTtcclxuICAgICAgICAgICAgdGhpcy5wYW5lbEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZi1jb21iby1sb29rdXAnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucGFuZWxFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFBhbmVsU2l6ZSh0YXJnZXQ/OiBFbGVtZW50KSB7XHJcbiAgICAgICAgbGV0IHBhbmVsSGVpZ2h0ID0gdGhpcy5wYW5lbEhlaWdodDtcclxuICAgICAgICB0aGlzLmlubmVyUGFuZWxIZWlnaHQgPSAyMDI7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmF1dG9XaWR0aCkge1xyXG4gICAgICAgICAgICBjb25zdCB7IHdpZHRoIH0gPSB0aGlzLmdldElucHV0U2l6ZUluZm8oKTtcclxuICAgICAgICAgICAgdGhpcy5wYW5lbFdpZHRoID0gd2lkdGggPyB3aWR0aCA6IHRoaXMucGFuZWxXaWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5aaC5p6cdGFnZXTpq5jluqblrZjlnKgg5L+u5pS5cG5hZWxIZWlnaHQg55So5LqO6YeN5a6a5L2N5by55Ye65qGG5L2N572uXHJcbiAgICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQudGFnTmFtZSAmJiBwYW5lbEhlaWdodCA9PT0gJ2F1dG8nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldEhlaWdodCA9IHRhcmdldC5zY3JvbGxIZWlnaHQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzTm9SZWNvcmQgPSAhIXRhcmdldC5xdWVyeVNlbGVjdG9yKCcuZi10YWJsZS1ub3JlY29yZHMtY29udGVudCcpO1xyXG4gICAgICAgICAgICAvLyBpZiAodGhpcy51cmkpIHtcclxuICAgICAgICAgICAgLy8gICAgIGlmICh0aGlzLmRhdGEgJiYgdGhpcy5kYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIGlmICh0aGlzLmNvbWJvU2VydmljZS5kaXNwbGF5VHlwZSA9PT0gJ0xJU1QnICYmIHRhcmdldC5xdWVyeVNlbGVjdG9yKCcubGlzdC1ncm91cCcpKSB7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIHRoaXMuaW5uZXJQYW5lbEhlaWdodCA9IHRhcmdldC5xdWVyeVNlbGVjdG9yKCcubGlzdC1ncm91cCcpWydvZmZzZXRIZWlnaHQnXSArIDI7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgdGhpcy5pbm5lclBhbmVsSGVpZ2h0ID0gdGFyZ2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gICAgIHRoaXMuaW5uZXJQYW5lbEhlaWdodCA9IHRhcmdldEhlaWdodCAmJiB0YXJnZXRIZWlnaHQgPiAxMCAmJiAhaXNOb1JlY29yZCA/IE1hdGguZmxvb3IodGFyZ2V0SGVpZ2h0KSA6IHRoaXMucGFuZWxIZWlnaHQ7XHJcbiAgICAgICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGEgJiYgdGhpcy5kYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29tYm9TZXJ2aWNlLmRpc3BsYXlUeXBlID09PSAnTElTVCcgJiYgdGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJy5saXN0LWdyb3VwJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlubmVyUGFuZWxIZWlnaHQgPSB0YXJnZXQucXVlcnlTZWxlY3RvcignLmxpc3QtZ3JvdXAnKVsnb2Zmc2V0SGVpZ2h0J10gKyAyO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlubmVyUGFuZWxIZWlnaHQgPSB0YXJnZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgJiYgdGFyZ2V0LnRhZ05hbWUgJiYgcGFuZWxIZWlnaHQgJiYgIVN0cmluZyhwYW5lbEhlaWdodCkuaW5jbHVkZXMoJ3B4JykpIHtcclxuICAgICAgICAgICAgcGFuZWxIZWlnaHQgPSBwYW5lbEhlaWdodDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHsgdG9wLCBoZWlnaHQsIGxlZnQsIHJpZ2h0IH0gPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0ICsgMTtcclxuICAgICAgICBjb25zdCBib3R0b20gPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSBoZWlnaHQgLSB0b3A7XHJcbiAgICAgICAgaWYgKHBhbmVsSGVpZ2h0ID09PSAnYXV0bycpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubWF4SGVpZ2h0ICYmIHRoaXMubWF4SGVpZ2h0ID4gdGhpcy5pbm5lclBhbmVsSGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICBwYW5lbEhlaWdodCA9IHRoaXMuaW5uZXJQYW5lbEhlaWdodDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBhbmVsSGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGggPSB0b3AgPiBib3R0b20gPyB0b3AgOiBib3R0b207XHJcbiAgICAgICAgY29uc3QgYmVsb3cgPSBoID09PSBib3R0b207XHJcblxyXG4gICAgICAgIGxldCBmeCA9ICd0b3AnO1xyXG4gICAgICAgIGlmIChib3R0b20gPiBwYW5lbEhlaWdodCkge1xyXG4gICAgICAgICAgICB0b3AgPSB0b3AgKyBoZWlnaHQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRvcCA+IGJvdHRvbSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGggPCBwYW5lbEhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhbmVsSGVpZ2h0ID0gaCAtIDEwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IDEwO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3AgPSB0b3AgLSBwYXJzZUludCgnJyArIHBhbmVsSGVpZ2h0LCAxMCkgLSA1O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZnggPSAnYm90dG9tJ1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGggPCBwYW5lbEhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhbmVsSGVpZ2h0ID0gaCAtIDEwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdG9wID0gdG9wICsgaGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBwYW5lbFdpZHRoID0gdGhpcy5wYW5lbFdpZHRoO1xyXG4gICAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCAtIGxlZnQgPCB0aGlzLnBhbmVsV2lkdGgpIHtcclxuICAgICAgICAgICAgLy8gbGVmdCA9IHJpZ2h0IC0gNDAwO1xyXG4gICAgICAgICAgICBpZiAobGVmdCArIHRoaXMuZWwubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCA+IHRoaXMucGFuZWxXaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgbGVmdCA9IGxlZnQgKyB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGggLSB0aGlzLnBhbmVsV2lkdGg7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZWZ0ID0gMDtcclxuICAgICAgICAgICAgICAgIHBhbmVsV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aD4gdGhpcy5wYW5lbFdpZHRoID8gdGhpcy5wYW5lbFdpZHRoIDogd2luZG93LmlubmVyV2lkdGggLSAxMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHsgcGFuZWxXaWR0aCwgcGFuZWxIZWlnaHQsIHRvcCwgbGVmdCwgYmVsb3csIGZ4IH07XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGNvbXBhdGlibGVTY3JvbGxUb3AoKSB7XHJcbiAgICAgICAgaWYgKGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQuc2Nyb2xsVG9wO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KHdpbmRvdy5wYWdlWU9mZnNldCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3ApO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBjb21wYXRpYmxlU2Nyb2xsTGVmdCgpIHtcclxuICAgICAgICBpZiAoZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KHdpbmRvdy5wYWdlWE9mZnNldCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQsIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCk7XHJcbiAgICB9XHJcbiAgICAvLyDorr7nva7lvLnlh7rmoYbkvY3nva5cclxuICAgIHVwZGF0ZVBvc2l0aW9uKHRhcmdldDogYW55KSB7XHJcbiAgICAgICAgY29uc3QgeyBwYW5lbEhlaWdodCwgbGVmdCwgdG9wLCBiZWxvdywgZnggfSA9IHRoaXMuZ2V0UGFuZWxTaXplKHRhcmdldCk7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5pc0xvb2t1cCgpKSB7XHJcbiAgICAgICAgICAgIGxldCBfdG9wID0gdG9wO1xyXG4gICAgICAgICAgICBsZXQgX2hlaWdodCA9IHBhbmVsSGVpZ2h0O1xyXG4gICAgICAgICAgICBpZiAodG9wIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgX2hlaWdodCA9IHRoaXMuaW5uZXJQYW5lbEhlaWdodCArIHRvcCAtIDEwO1xyXG4gICAgICAgICAgICAgICAgX3RvcCA9IDEwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90b3AgKz0gdGhpcy5jb21wYXRpYmxlU2Nyb2xsVG9wKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5wYW5lbEhlaWdodCAhPT0gJ2F1dG8nKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXhIZWlnaHQgPCBfaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXhIZWlnaHQgPSBfaGVpZ2h0IGFzIG51bWJlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jb21Qb3NpdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgICdsZWZ0JzogbGVmdCArIHRoaXMuY29tcGF0aWJsZVNjcm9sbExlZnQoKSxcclxuICAgICAgICAgICAgICAgICd0b3AnOiBfdG9wLFxyXG4gICAgICAgICAgICAgICAgJ3dpZHRoJzogdGhpcy5wYW5lbFdpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBfaGVpZ2h0ID09PSAnYXV0bycgPyAnYXV0bycgOiBfaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgJ21heC1oZWlnaHQnOiB0aGlzLm1heEhlaWdodFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29tUG9zaXRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICAnd2lkdGgnOiB0aGlzLnBhbmVsV2lkdGgsXHJcbiAgICAgICAgICAgICAgICAnaGVpZ2h0JzogcGFuZWxIZWlnaHRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wYW5lbEVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSAnJztcclxuICAgICAgICB0YXJnZXRbJ3N0eWxlJ10uZGlzcGxheSA9ICcnO1xyXG5cclxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmNvbVBvc2l0aW9uKS5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICBsZXQgdmFsID0gdGhpcy5jb21Qb3NpdGlvbltuXTtcclxuICAgICAgICAgICAgaWYgKHZhbCAhPT0gJ2F1dG8nKSB7XHJcbiAgICAgICAgICAgICAgICB2YWwgKz0gJ3B4JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0YXJnZXQsIG4sIHZhbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGFyZ2V0LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9ICcxMDAlICcgKyBmeDtcclxuICAgICAgICAvLyB0YXJnZXRbJ3N0eWxlJ10udmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21Qb3NpdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBjb250YWlucyhlbDogRWxlbWVudFJlZiwgZXZlbnQ6IGFueSkge1xyXG4gICAgICAgIHJldHVybiBlbC5uYXRpdmVFbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGZpbHRlclNlbGVjdGlvbnModmFsdWU6IHN0cmluZywgZGF0YTogYW55W10pIHtcclxuICAgICAgICBjb25zdCBzZWxlY3RlZEl0ZW1zID0gU3RyaW5nKHZhbHVlKVxyXG4gICAgICAgICAgICAuc3BsaXQodGhpcy5zZXBhcmF0b3IpXHJcbiAgICAgICAgICAgIC5tYXAoc2VsZWN0ZWRJdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBkYXRhLmZpbmQodmFsID0+IHNlbGVjdGVkSXRlbSA9PSB0aGlzLmNvbW1vblV0aWxzLmdldFZhbHVlKHRoaXMuaWRGaWVsZCwgdmFsKSArICcnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtID8gdGhpcy5jb21tb25VdGlscy5nZXRWYWx1ZSh0aGlzLnRleHRGaWVsZCwgaXRlbSkgOiAnJztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkSXRlbXMuZmlsdGVyKGVsID0+IGVsKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgdXBkYXRlU2VsZWN0aW9ucyhzZWxlY3RlZFZhbHVlczogc3RyaW5nLCBkYXRhOiBhbnlbXSkge1xyXG4gICAgICAgIGlmIChzZWxlY3RlZFZhbHVlcyA9PT0gbnVsbCB8fCBzZWxlY3RlZFZhbHVlcyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IFtdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxlY3RlZFZhbHVlcyA9PT0gJ2Jvb2xlYW4nIHx8IHR5cGVvZiBzZWxlY3RlZFZhbHVlcyA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgc2VsZWN0ZWRWYWx1ZXMgPSAnJyArIHNlbGVjdGVkVmFsdWVzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRJdGVtcyA9IHNlbGVjdGVkVmFsdWVzID8gU3RyaW5nKHNlbGVjdGVkVmFsdWVzKS5zcGxpdCh0aGlzLnNlcGFyYXRvcikubWFwKHZhbCA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbWJvU2VydmljZS5kaXNwbGF5VHlwZSA9PT0gJ0xPT0tVUFRSRUVMSVNUJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tYm9TZXJ2aWNlLnRyZWVOb2RlVG9GbGF0RGF0YShkYXRhLCB2YWwsIHRoaXMuaWRGaWVsZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGRhdGEuZmluZChfZGF0YSA9PiAnJyArIHZhbCA9PSB0aGlzLmNvbW1vblV0aWxzLmdldFZhbHVlKHRoaXMuaWRGaWVsZCwgX2RhdGEpICsgJycpO1xyXG5cclxuICAgICAgICB9KSA6IFtdO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IHNlbGVjdGVkSXRlbXMgfHwgW107XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXREaXNwbGF5VGV4dCh2YWx1ZSwgZGF0YSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkSXRlbXMgPSB0aGlzLmZpbHRlclNlbGVjdGlvbnModmFsdWUsIGRhdGEpO1xyXG4gICAgICAgICAgICBpZiAoIXNlbGVjdGVkSXRlbXMgfHwgIXNlbGVjdGVkSXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRJdGVtcy5maWx0ZXIodiA9PiAhIXYpLmpvaW4odGhpcy5zZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBsZXQgZGF0YSA9IFtdO1xyXG4gICAgICAgIGlmICh0aGlzLmRhdGEgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICBkYXRhID0gdGhpcy5kYXRhO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSAodGhpcy5kYXRhWydpdGVtcyddIGFzIGFueSkgaW5zdGFuY2VvZiBBcnJheSA/IHRoaXMuZGF0YVsnaXRlbXMnXSA6IGRhdGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm9yaWdpbmFsVGV4dCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZXMgPSAnJztcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLnVyaSAmJiBkYXRhICYmIGRhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWVzID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2VsZWN0aW9ucyh2YWx1ZSwgZGF0YSk7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVRleHQgPSB0aGlzLmdldERpc3BsYXlUZXh0KHZhbHVlLCB0aGlzLnNlbGVjdGlvbnMgfHwgW10pO1xyXG4gICAgICAgICAgICB0aGlzLm9yaWdpbmFsVGV4dCA9IHRoaXMuZGlzcGxheVRleHQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdGhpcy5kaXNwbGF5VGV4dCA9IHRoaXMuZ2V0RGlzcGxheVRleHQodmFsdWUsIHRoaXMuc2VsZWN0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVRleHQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZFZhbHVlcygpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuc2VsZWN0ZWRWYWx1ZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZXMgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMudmlld1R5cGUgPT09ICd0YWcnICYmIHRoaXMubXVsdGlTZWxlY3QgJiYgKHRoaXMuZGlzcGxheVRleHQgIT09IG51bGwgJiYgdGhpcy5kaXNwbGF5VGV4dCAhPT0gdW5kZWZpbmVkKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdHh0QXJyID0gdGhpcy5kaXNwbGF5VGV4dC5zcGxpdCh0aGlzLnNlcGFyYXRvcikuZmlsdGVyKG4gPT4gbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbnMgPSB0eHRBcnIucmVkdWNlKChyLCBjLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgci5wdXNoKHsgW3RoaXMudGV4dEZpZWxkXTogYyB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcjtcclxuICAgICAgICAgICAgICAgIH0sIFtdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcclxuICAgIH1cclxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcclxuICAgIH1cclxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xyXG4gICAgfVxyXG4gICAgc2V0RGlzYWJsZWRTdGF0ZT8oaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xyXG4gICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbHRlckRhdGFPblNlcnZlcihzZWFyY2hWYWx1ZSwgc2VhcmNoRmllbGQpIHtcclxuICAgIH1cclxufVxyXG4iXX0=