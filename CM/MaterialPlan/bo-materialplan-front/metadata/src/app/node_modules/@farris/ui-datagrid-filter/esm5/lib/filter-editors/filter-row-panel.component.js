/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, NgZone, ElementRef, Renderer2, Output, EventEmitter, Injector } from '@angular/core';
import { ColumnFilterType } from '@farris/ui-datagrid';
import { DatagridFilterRowService } from '../datagrid-filter-row.service';
var FilterRowPanelComponent = /** @class */ (function () {
    function FilterRowPanelComponent(ngzone, el, render, dfrs, inject) {
        this.ngzone = ngzone;
        this.el = el;
        this.render = render;
        this.dfrs = dfrs;
        this.inject = inject;
        this.width = 240;
        this.height = 250;
        this.datatype = ColumnFilterType.string;
        this.conditionChange = new EventEmitter();
        this.gridInstance = null;
        this.enumSetting = {};
        this.condition = {
            operator1: 1,
            value1: '',
            relation: '',
            operator2: 1,
            value2: ''
        };
        this.documentClickHandle = null;
        this.ro = null;
        this.zone = null;
        this.zone = this.inject.get(NgZone);
    }
    /**
     * @return {?}
     */
    FilterRowPanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.render.listen(_this.el.nativeElement, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                return false;
            }));
        }));
        this.initEnumSetting();
        this.documentClickHandle = this.render.listen(document, 'click', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.close(event);
        }));
    };
    /**
     * @return {?}
     */
    FilterRowPanelComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.target) {
            // const panelDiv = this.el.nativeElement.querySelector('div');
            // const panelRect = panelDiv.getBoundingClientRect();
            // const h = panelRect.height;
            // const rect = this.target.target.getBoundingClientRect();
            // if (window['innerHeight'] - panelRect.top < h) {
            //     let top = 0;
            //     if (rect.top > h) {
            //         top = rect.top - h - 14;
            //     } else {
            //         top = 32;
            //     }
            //     panelDiv.style.top = top + 'px';
            // }
            this.resetPanelPosition();
            /** @type {?} */
            var panelDiv = this.el.nativeElement.querySelector('div');
            panelDiv.style.transition = 'top 0.2s ease 0.05s';
        }
    };
    /**
     * @return {?}
     */
    FilterRowPanelComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.documentClickHandle) {
            this.documentClickHandle();
            this.documentClickHandle = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    FilterRowPanelComponent.prototype.resetPanelPosition = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var panelDiv = this.el.nativeElement.querySelector('div');
        /** @type {?} */
        var h = panelDiv.querySelector('.panel-content').clientHeight + 36;
        /** @type {?} */
        var rect = this.target.target.parentElement.getBoundingClientRect();
        /** @type {?} */
        var downAreaHeight = window['innerHeight'] - rect.top;
        if (downAreaHeight < h) {
            /** @type {?} */
            var top_1 = window['innerHeight'] - h - 10;
            panelDiv.style.top = top_1 + 'px';
        }
        else {
            panelDiv.style.top = rect.top + 'px';
        }
    };
    /**
     * @return {?}
     */
    FilterRowPanelComponent.prototype.onPanelHeightChanged = /**
     * @return {?}
     */
    function () {
        this.resetPanelPosition();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FilterRowPanelComponent.prototype.close = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.dfrs.closeFilterPanel();
    };
    /**
     * @param {?} condition
     * @return {?}
     */
    FilterRowPanelComponent.prototype.onValueChange = /**
     * @param {?} condition
     * @return {?}
     */
    function (condition) {
        this.conditionChange.emit(condition);
    };
    /**
     * @private
     * @return {?}
     */
    FilterRowPanelComponent.prototype.initEnumSetting = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.datatype > 5) {
            this.enumSetting = this.dfrs.getEnumOptions(this.column);
            /** @type {?} */
            var currentColumnCondition = (/** @type {?} */ (this.dfrs.columnConditions[this.column.field]));
            if (currentColumnCondition && currentColumnCondition.value1) {
                this.selectedValues = currentColumnCondition.value1.join(',');
            }
        }
    };
    FilterRowPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter-row-panel',
                    template: "<div class=\"f-datagrid-filter-panel d-flex flex-column\" [style.width.px]=\"width\" style=\"z-index: 6666;\">\r\n    <div class=\"panel-header\">\r\n        <div (click)=\"close($event)\" class=\"panel-icon\" style=\"text-align: center; cursor: pointer;\">\r\n            <span class=\"f-icon f-icon-filter-sm\"></span>\r\n        </div> \r\n    </div>\r\n    <div class=\"panel-content flex-fill\">\r\n        <condition-editor *ngIf=\"datatype < 6\"\r\n            [datatype]=\"datatype\"\r\n            [condition]=\"condition\"\r\n            [operators]=\"operators\"\r\n            [filterOptions]=\"column.filter.options\"\r\n            (conditionChange)=\"onValueChange($event)\"\r\n            (panelHeightChange)=\"onPanelHeightChanged()\"></condition-editor>\r\n            \r\n\r\n        <filter-datalist *ngIf=\"datatype === 6 || datatype === 7\" \r\n            [data]=\"enumSetting?.data\" [valueField]=\"enumSetting?.valueField\"\r\n            [textField]=\"enumSetting?.textField\" [idField]=\"enumSetting?.valueField\"\r\n            [selectedValues]=\"selectedValues\"\r\n            (valueChange)=\"onValueChange($event)\"></filter-datalist>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"filter-panel-overlay\" style=\"position: absolute;\r\nposition: absolute;\r\nz-index: 4444;\r\nwidth: 100%;\r\ntop: 0;\r\nheight: 100%;\r\nbackground: rgb(255, 255, 255);\r\nopacity: 0;\" (click)=\"close($event)\"></div>\r\n"
                }] }
    ];
    /** @nocollapse */
    FilterRowPanelComponent.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef },
        { type: Renderer2 },
        { type: DatagridFilterRowService },
        { type: Injector }
    ]; };
    FilterRowPanelComponent.propDecorators = {
        width: [{ type: Input }],
        height: [{ type: Input }],
        column: [{ type: Input }],
        operators: [{ type: Input }],
        datatype: [{ type: Input }],
        conditionChange: [{ type: Output }]
    };
    return FilterRowPanelComponent;
}());
export { FilterRowPanelComponent };
if (false) {
    /** @type {?} */
    FilterRowPanelComponent.prototype.width;
    /** @type {?} */
    FilterRowPanelComponent.prototype.height;
    /** @type {?} */
    FilterRowPanelComponent.prototype.column;
    /** @type {?} */
    FilterRowPanelComponent.prototype.operators;
    /** @type {?} */
    FilterRowPanelComponent.prototype.datatype;
    /** @type {?} */
    FilterRowPanelComponent.prototype.conditionChange;
    /** @type {?} */
    FilterRowPanelComponent.prototype.gridInstance;
    /** @type {?} */
    FilterRowPanelComponent.prototype.enumSetting;
    /** @type {?} */
    FilterRowPanelComponent.prototype.selectedValues;
    /** @type {?} */
    FilterRowPanelComponent.prototype.condition;
    /** @type {?} */
    FilterRowPanelComponent.prototype.documentClickHandle;
    /** @type {?} */
    FilterRowPanelComponent.prototype.target;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.render;
    /** @type {?} */
    FilterRowPanelComponent.prototype.dfrs;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,