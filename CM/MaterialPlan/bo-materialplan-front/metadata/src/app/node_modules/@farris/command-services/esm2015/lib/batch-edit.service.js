import { Injectable, Injector } from '@angular/core';
import { ViewModel, Repository, Entity, AppContext, EntityList } from '@farris/devkit';
import { from, EMPTY, concat, of, Subject } from 'rxjs';
import { concatMap, catchError, tap, switchMap, last, map, delay } from 'rxjs/operators';
import { BatchEditDialogService } from '@farris/ui-batch-edit-dialog';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { ComponentManagerService } from './component-manager.service';
import { FormLoadingService } from './form-loading/form-loading.service';
import { LanguageService } from './languag.service';
import { FormNotifyService } from './form-notify.service';
// tslint:disable: max-line-length
/**
 * 批量编辑服务
 */
export class BatchEditService {
    constructor(injector, componentManagerService, viewModel, repository, batchEditDialogService, dateService, languageService, formNotifyService) {
        this.injector = injector;
        this.componentManagerService = componentManagerService;
        this.viewModel = viewModel;
        this.repository = repository;
        this.batchEditDialogService = batchEditDialogService;
        this.dateService = dateService;
        this.languageService = languageService;
        this.formNotifyService = formNotifyService;
        this.formLoadingService = this.injector.get(FormLoadingService, null);
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
        if (!this.formNotifyService) {
            this.formNotifyService = this.injector.get(FormNotifyService, null);
        }
        this.onHelpClose = new Subject();
        this.onHelpClose.subscribe(result => {
            const { frameId = '', mapFields = '', data = [] } = result || {};
            this.onHelpCloseHandler(frameId, mapFields, data);
        });
    }
    /**
     * 打开批量编辑对话框
     * @param frameId frameId
     */
    openBatchEditDialog(frameId) {
        if (!frameId) {
            throw new Error('frameId is required.');
        }
        if (this.batchEditDialogService) {
            let columns = [];
            if (this.viewModel) {
                const gridFrameContext = this.viewModel.frameContext.root.appContext.frameContextManager.getFrameContextById(frameId);
                const gridViewModel = gridFrameContext.viewModel;
                if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumnsName')) {
                    // tslint:disable-next-line: no-string-literal
                    const gridColumnsAttrName = gridViewModel['dataGridColumnsName'];
                    columns = gridViewModel[gridColumnsAttrName];
                }
                else if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumns')) {
                    columns = gridViewModel['dataGridColumns'];
                }
                const ids = gridViewModel.uiState['ids'] || [];
                if (!ids || ids.length < 1) {
                    this.formNotifyService.warning(this.languageService.plsCheckBatchEditRows, { hideTitle: true });
                    return EMPTY;
                }
                const dialogRef = this.batchEditDialogService.batchEdit(columns, {
                    rows: ids.length,
                    onConfirm: (inputs) => {
                        if (Array.isArray(ids) && ids.length > 0) {
                            // console.log('openBatchEditDialog', inputs);
                            const appContext = this.viewModel.frameContext.appContext;
                            appContext.changeDetectionController.detach();
                            inputs.forEach(input => {
                                this.updateBindingData(input, ids);
                            });
                            appContext.changeDetectionController.reattach();
                        }
                        dialogRef.close();
                    }
                });
            }
        }
    }
    /**
     * 打开隐藏帮助
     * @param helpId 帮助id
     */
    openHiddenHelp(helpId) {
        if (!helpId) {
            throw new Error('Argument error,helpId can`t be empty');
        }
        const componentManagerService = this.componentManagerService.getControl(helpId);
        if (componentManagerService) {
            componentManagerService.showDialog();
        }
        else {
            throw new Error(`the component which id is ${helpId} can't be found!`);
        }
    }
    /**
     * 清空帮助勾选（只能挂载到帮助前事件）
     */
    clearHelpSelections() {
        const self = this;
        const helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;
        if (helpElement) {
            helpElement.displayValue = '';
        }
    }
    /**
     * 勾选当前行
     * @param frameId frameId
     * @param mapFields 字段映射
     * @param primaryKeyValue 帮助主键字段
     */
    checkCurrentRow(frameId, mapFields, primaryKeyValue) {
        const self = this;
        const helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;
        if (!primaryKeyValue) {
            primaryKeyValue = 'id';
        }
        const mappings = JSON.parse(mapFields);
        if (helpElement) {
            frameId = frameId || this.viewModel.frameContext.frameId;
            if (frameId) {
                const frameContext = this.getFrameContextById(frameId);
                if (frameContext) {
                    const bindingPath = frameContext.viewModel.bindingPath;
                    if (bindingPath) {
                        const bindingPaths = bindingPath.split('/').filter(p => p);
                        const bindingList = frameContext.bindingData.getValue(bindingPaths);
                        const currentRow = bindingList.currentItem;
                        const path = mappings[primaryKeyValue];
                        if (path) {
                            const value = this.getValueByPath(currentRow, path);
                            helpElement.displayValue = value;
                        }
                    }
                }
            }
        }
    }
    /**
     * 以帮助勾选数据作为依据，批量新增主表数据
     * @param frameId 主表所在frame的id
     * @param mapFields 帮助字段与主表字段映射
     * @description 以帮助勾选数据作为依据，批量新增主表数据
     */
    batchAppend(frameId, mapFields) {
        const self = this;
        const result = self.context && self.context.eventParam || [];
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        if (result && Array.isArray(result) && result.length > 0) {
            const mappings = JSON.parse(mapFields);
            // 不是bindingPath则按frameId处理
            let bindingPath = '/';
            const appContext = this.injector.get(AppContext, null);
            if (appContext) {
                const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                if (frameContext) {
                    bindingPath = frameContext.viewModel.bindingPath || '/';
                }
                else {
                    throw new Error('frameId is invalid!');
                }
            }
            const defaultValues = [];
            result.forEach((item) => {
                const defaultValue = {};
                Object.keys(mappings).forEach((prop) => {
                    const value = this.getValueByPath(item, prop);
                    const fields = mappings[prop];
                    const groups = fields.split(',').filter(p => p);
                    groups.forEach(group => {
                        const paths = group.split('.').filter(p => p);
                        this.setValueByPath(defaultValue, paths.join('.'), value);
                    });
                });
                defaultValues.push(defaultValue);
            });
            this.formLoadingService.show();
            return this.repository.batchAppend(defaultValues).pipe(tap(() => this.formLoadingService.hide()), map(() => true));
        }
        return of(true);
    }
    /**
     * 以帮助勾选数据作为依据，批量新增从表/从从表
     * @param frameId 从表/从从表所在frame的id
     * @param mapFields 帮助字段与从表/从从表字段映射
     * @description 以帮助勾选数据作为依据，批量新增从表/从从表
     */
    batchAppendByPathBasedOnHelpSelections(frameId, mapFields) {
        const self = this;
        const result = self.context && self.context.eventParam || [];
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        if (result && Array.isArray(result) && result.length > 0) {
            const mappings = JSON.parse(mapFields);
            // 不是bindingPath则按frameId处理
            let bindingPath = '/';
            const appContext = this.injector.get(AppContext, null);
            if (appContext) {
                const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                if (frameContext) {
                    bindingPath = frameContext.viewModel.bindingPath || '/';
                }
                else {
                    throw new Error('frameId is invalid!');
                }
            }
            const defaultValues = [];
            result.forEach((item) => {
                const defaultValue = {};
                Object.keys(mappings).forEach((prop) => {
                    const value = this.getValueByPath(item, prop);
                    const fields = mappings[prop];
                    const groups = fields.split(',').filter(p => p);
                    groups.forEach(group => {
                        const paths = group.split('.').filter(p => p);
                        this.setValueByPath(defaultValue, paths.join('.'), value);
                    });
                });
                defaultValues.push(defaultValue);
            });
            this.formLoadingService.show();
            const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
            return this.repository.batchAppendByPath(path, defaultValues).pipe(tap(() => this.formLoadingService.hide()), map(() => true));
        }
        return of(true);
    }
    /**
     * 行内帮助多选批量新增或替换子表数据
     * @param frameId frameId, optional,为空时使用命令执行时所在的上下文
     * @param mapFields 字段映射
     * @param primaryKey 帮助主键字段，默认为id
     * @returns
     */
    batchAppendBasedOnRowHelpSelections(frameId, mapFields) {
        const self = this;
        let result = self.context && self.context.eventParam || [];
        if (!mapFields) {
            return of(true);
        }
        const mappings = JSON.parse(mapFields);
        if (!mappings || !mappings.hasOwnProperty('id')) {
            return of(true);
        }
        frameId = frameId || this.viewModel.frameContext.frameId;
        if (!frameId) {
            return of(true);
        }
        const frameContext = this.getFrameContextById(frameId);
        if (!frameContext) {
            return of(true);
        }
        setTimeout(() => {
            this.endEdit(frameContext).subscribe(() => {
                setTimeout(() => {
                    if (result && Array.isArray(result) && result.length > 0) {
                        const bindingPath = frameContext.viewModel.bindingPath || '/';
                        const bindingPaths = bindingPath.split('/').filter(p => p);
                        const defaultValues = [];
                        // 获取当前行
                        const bindingList = frameContext.bindingData.getValue(bindingPaths);
                        const currentRow = bindingList.currentItem;
                        const currentRowId = bindingList.currentId;
                        const currentEntity = this.getEntityByPath(frameContext, bindingPaths, currentRowId);
                        const headItem = result[0];
                        // 如果仅勾选一条，则应替换当前行的映射
                        if (result.length === 1) {
                            this.mappingRow(headItem, mappings, currentEntity, bindingPath);
                            return of(true);
                        }
                        else {
                            const idMapField = mappings['id'];
                            const sourceItemId = this.getValueByPath(currentEntity, idMapField);
                            // 如果当前行没有映射或勾选结果中找不到当前行的映射
                            if (!sourceItemId || result.findIndex(item => item[bindingList.primaryKey] === sourceItemId) === -1) {
                                // 重新映射当前行
                                this.mappingRow(headItem, mappings, currentEntity, bindingPath);
                                result = result.slice(1);
                            }
                            else if (sourceItemId) {
                                const index = result.findIndex(item => item[bindingList.primaryKey] === sourceItemId);
                                // 重新映射当前行
                                this.mappingRow(result[index], mappings, currentEntity, bindingPath);
                                result.splice(index, 1);
                            }
                            // 当前行处理完成
                            // 处理未映射的行
                            const emptyRows = bindingList.toArray().filter(bindingObject => {
                                const id = this.getValueByPath(bindingObject, mappings[bindingList.primaryKey]);
                                return !id;
                            });
                            if (emptyRows && emptyRows.length > 0) {
                                let rows = result;
                                if (result.length > emptyRows.length) {
                                    rows = result.slice(0, emptyRows.length);
                                    result = result.slice(emptyRows.length);
                                }
                                else {
                                    result = [];
                                }
                                rows.forEach((item, index) => {
                                    const targetItem = emptyRows[index];
                                    const entity = this.getEntityByPath(frameContext, bindingPaths, targetItem.primaryKeyValue);
                                    this.mappingRow(item, mappings, entity, bindingPath);
                                });
                            }
                            // 处理剩余勾选
                            result.forEach((item) => {
                                const defaultValue = {};
                                Object.keys(mappings).forEach((prop) => {
                                    const value = this.getValueByPath(item, prop);
                                    const fields = mappings[prop];
                                    const groups = fields.split(',').filter(p => p);
                                    groups.forEach(group => {
                                        const paths = group.split('.').filter(p => p);
                                        this.setValueByPath(defaultValue, paths.join('.'), value);
                                    });
                                });
                                defaultValues.push(defaultValue);
                            });
                            if (defaultValues.length > 0) {
                                this.formLoadingService.show();
                                const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                                this.repository.batchAppendByPath(path, defaultValues).pipe(tap(() => this.formLoadingService.hide())).subscribe();
                            }
                        }
                    }
                }, 350);
            });
        }, 50);
        return of(true);
    }
    /**
     * 复制主表数据
     * @param id 要复制的数据id
     * @param fields 要复制的字段
     * @description 仅支持复制主表数据
     * @deprecated 该方法已被废弃，请使用clone方法替代。
     */
    copy(id) {
        if (!id) {
            this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
            return EMPTY;
        }
        const befRepository = this.repository;
        const baseUri = befRepository.restService.baseUri;
        const url = `${baseUri}/service/copymainobjvoaction`;
        const requestInfo = befRepository.restService.buildRequestInfo();
        const body = {
            requestInfo,
            dataID: id
        };
        const options = {
            body
        };
        this.formLoadingService.show();
        return befRepository.proxy.request(url, 'PUT', null, options).pipe(tap(() => {
            this.formLoadingService.hide();
        }), map((responseInfo) => {
            const returnValue = responseInfo.returnValue;
            const entity = this.repository.buildEntity(returnValue);
            this.repository.entityCollection.addEntity(entity);
            return entity;
        }));
    }
    /**
     * 复制数据（支持主表、从表、从从表）
     * @param id 要复制的行
     * @param path 请求路径
     * @returns
     */
    clone(id, path) {
        if (!id) {
            this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
            return EMPTY;
        }
        if (!path) {
            this.formNotifyService.warning(this.languageService.pathIsRequired, { hideTitle: true });
            return EMPTY;
        }
        if (!path.startsWith('/')) {
            path = '/' + path;
        }
        path = path.toLowerCase();
        const bindingPath = this.viewModel.bindingPath;
        const befRepository = this.repository;
        const baseUri = befRepository.restService.baseUri;
        const url = `${baseUri}${path}`;
        const requestInfo = befRepository.restService.buildRequestInfo();
        const ids = this.buildIds(bindingPath);
        ids.push(id);
        const body = {
            requestInfo,
            dataID: ids.join(',')
        };
        const options = {
            body
        };
        this.formLoadingService.show();
        return befRepository.proxy.request(url, 'PUT', null, options).pipe(tap(() => {
            this.formLoadingService.hide();
        }), map((responseInfo) => {
            const returnValue = responseInfo.returnValue;
            let entity = null;
            if (bindingPath.split('/').filter(p => p).length === 0) {
                entity = this.repository.buildEntity(returnValue);
                this.repository.entityCollection.addEntity(entity, true);
            }
            else {
                const fpath = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                entity = befRepository.entityManager.appendEntityByPath(fpath, returnValue, returnValue, true);
            }
            return entity;
        }));
    }
    //#region 旧的实现
    /**
     * 复制行
     * @param frameId frameId
     * @param ignoreFields 复制时忽略字段
     * @param repeat 重复复制次数，默认为1
     */
    copyRow(frameId, ignoreFields, repeat = 1) {
        if (typeof repeat !== 'number') {
            repeat = parseInt(repeat, 10);
        }
        if (repeat < 1) {
            throw new Error('ArgumentError: repeat must >= 1');
        }
        // 获取当前行
        const frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        const primaryValue = frameContext.bindingData.list.currentId;
        const bindingPath = frameContext.viewModel.bindingPath || '/';
        let bindingData = null;
        let currentItem = null;
        if (bindingPath === '/') {
            // 主表直接取当前行
            currentItem = frameContext.bindingData.list.currentItem;
        }
        else {
            // 取从表/从从表当前行
            const paths = bindingPath.split('/').filter(p => p);
            currentItem = frameContext.bindingData.getValue(paths).currentItem;
        }
        bindingData = currentItem.toJSON();
        if (!currentItem.primaryKeyValue) {
            if (this.formNotifyService) {
                this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
            }
            return EMPTY;
        }
        const ignoreFieldsArray = ignoreFields.split(',').filter(item => item);
        const sources = new Array(repeat);
        return from(sources).pipe(concatMap(() => {
            let action$ = null;
            if (bindingPath !== '/') {
                const fullPath = this.buildPath(bindingPath, primaryValue);
                action$ = this.repository.appendByPath(fullPath);
            }
            else {
                action$ = this.repository.append();
            }
            return action$.pipe(tap((entity) => {
                // 修正实体主键
                bindingData[entity.primaryKey] = entity.primaryValue;
                // 忽略指定字段
                ignoreFieldsArray.forEach((field) => {
                    const extractedFields = field.split('.').filter(item => item);
                    if (extractedFields.length === 1) {
                        delete bindingData[field];
                    }
                    const parent = extractedFields.slice(0, -1).reduce((prev, current, index) => {
                        return prev[current];
                    }, bindingData);
                    delete parent[extractedFields[extractedFields.length - 1]];
                });
                bindingData = Object.assign({}, entity.toJSON(), bindingData);
                entity.load(bindingData, { loadChild: false });
            }), catchError(() => {
                return EMPTY;
            }));
        }));
    }
    /**
     * 增量多选帮助批量赋值帮助后事件
     * @param frameId frameId
     * @param mapFields 字段映射
     * @param associatedField 关联字段
     */
    afterIncrementalSelectHelpClose(frameId, mapFields, associatedField) {
        const self = this;
        const result = self.context && self.context.eventParam || [];
        // tslint:disable-next-line: max-line-length
        // const mapping = '{"id":"userRef.userRef", "name":"name", "sex":"sex","age":"userRef.userRef_Age","address":"userRef.userRef_Address","birthday":"userRef.userRef_Birthday","height":"userRef.userRef_Height","isMarried":"userRef.userRef_IsMarried"}';
        if (!associatedField) {
            throw new Error('associated field can`t be empty.');
        }
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        const mappings = JSON.parse(mapFields);
        const foreignKey = associatedField;
        // 将选择人员保存到uistate中
        const rootFrameContext = this.viewModel.frameContext.root;
        // 不是bindingPath则按frameId处理
        let bindingPath = '/';
        const appContext = this.injector.get(AppContext, null);
        if (appContext) {
            const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            if (frameContext) {
                bindingPath = frameContext.viewModel.bindingPath || '/';
            }
            else {
                throw new Error('frameId is invalid!');
            }
        }
        // tslint:disable-next-line: no-string-literal
        rootFrameContext.uiState['selections'] = result;
        if (result && Array.isArray(result)) {
            // 根据bindingPath获取bindingdata中现有数据
            const bindingPaths = bindingPath.split('/').filter(item => item);
            const currentData = this.viewModel.bindingData.getValue(bindingPaths);
            const currentDataArray = currentData.toArray();
            // 找到result中有，但bindingData中没有的，为待新增项
            const appends = [];
            result.reduce((prev, item) => {
                const itemId = item && item[currentData.primaryKey] || null;
                const isExist = currentDataArray.find((bindingObject) => bindingObject[foreignKey][foreignKey] === itemId);
                if (!isExist) {
                    prev.push(item);
                }
                return prev;
            }, appends);
            // 找到bindingData中有，result中没有的，为待删除项
            const removes = [];
            currentDataArray.reduce((results, item) => {
                const index = result.findIndex(selectItem => selectItem[currentData.primaryKey] === item[foreignKey][foreignKey]);
                if (index === -1) {
                    results.push(item.primaryKeyValue);
                }
                return results;
            }, removes);
            // console.log('addItems', appends, 'removeItems', removes);
            // 调用后端接口新增数据
            const addAction$ = from(appends).pipe(concatMap(item => {
                const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                return this.repository.appendByPath(path).pipe(tap((entity) => {
                    Object.keys(mappings).forEach(prop => {
                        const value = this.getValueByPath(item, prop);
                        const fields = mappings[prop];
                        const groups = fields.split(',').filter(p => p);
                        groups.forEach(group => {
                            const paths = group.split('.').filter(p => p);
                            this.setValueByPath(entity, paths.join('.'), value);
                        });
                    });
                }), catchError(() => {
                    return EMPTY;
                }));
            }));
            const removeAction$ = from(removes).pipe(concatMap(item => {
                const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                return this.repository.removeByPath(path, item).pipe(tap(() => {
                    const befRepository = this.repository;
                    befRepository.entityManager.removeEntityByPath(path, item);
                }), catchError(() => {
                    return EMPTY;
                }));
            }));
            if (!appends && !removes || appends && appends.length < 1 && removes && removes.length < 1) {
                return of(true);
            }
            return concat(addAction$, removeAction$).pipe(catchError(() => EMPTY));
        }
        return of(true);
    }
    // todo:模拟用户操作，待后端接口支持主表批量新增后重写
    /**
     * 多选帮助批量赋值帮助前事件
     */
    beforeMultiSelectHelpOpen() {
        return this.clearHelpSelections();
    }
    /**
     * 多选帮助批量赋值帮助后事件
     * @param frameId 绑定路径
     * @param mapFields 字段映射
     * @param commandFrameId 回调命令所在frameId
     * @param commandName 回调命令
     * @deprecated 模拟用户操作，待批量赋值支持主表后废弃
     */
    afterMultiSelectHelpClose(frameId, mapFields, commandFrameId, commandName) {
        const self = this;
        const result = self.context && self.context.eventParam || [];
        if (result && Array.isArray(result)) {
            // 调用后端接口新增数据
            if (!result || result.length < 1) {
                return of(true);
            }
            this.onHelpClose.next({ frameId, mapFields, data: result, commandFrameId, commandName });
            return of(true);
        }
        return of(true);
    }
    /**
      * 帮助关闭后处理器
      * @param frameId frameid
      * @param mapFields mapFields
      * @param result 帮助数据结果
      */
    onHelpCloseHandler(frameId, mapFields, result) {
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        const mappings = JSON.parse(mapFields);
        // 不是bindingPath则按frameId处理
        let bindingPath = '/';
        const appContext = this.injector.get(AppContext, null);
        if (appContext) {
            const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            if (frameContext) {
                bindingPath = frameContext.viewModel.bindingPath || '/';
            }
            else {
                throw new Error('frameId is invalid!');
            }
        }
        // 将选择人员保存到uistate中
        const rootFrameContext = this.viewModel.frameContext.root;
        const befRepository = this.repository;
        const bindingPaths = bindingPath.split('/').filter(p => p);
        // tslint:disable-next-line: no-string-literal
        rootFrameContext.uiState['selections'] = result;
        if (result && Array.isArray(result)) {
            const addAction$ = from(result).pipe(concatMap(item => {
                const requestInfo = befRepository.restService.buildRequestInfo();
                if (bindingPaths.length > 0) {
                    const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
                    return befRepository.restService.createByPath(path, requestInfo).pipe(tap((responseInfo) => {
                        const data = responseInfo.returnValue;
                        const newEntity = befRepository.entityManager.appendEntityByPath(path, data, data);
                        Object.keys(mappings).forEach(prop => {
                            const value = this.getValueByPath(item, prop);
                            const fields = mappings[prop];
                            const groups = fields.split(',').filter(p => p);
                            groups.forEach(group => {
                                const paths = group.split('.').filter(p => p);
                                this.setValueByPath(newEntity, paths.join('.'), value);
                            });
                        });
                        return newEntity;
                    }));
                }
                else {
                    return befRepository.restService.create(null, requestInfo).pipe(tap((responseInfo) => {
                        const data = responseInfo.returnValue;
                        const newEntity = this.repository.buildEntity(data);
                        Object.keys(mappings).forEach(prop => {
                            const value = this.getValueByPath(item, prop);
                            const fields = mappings[prop];
                            const groups = fields.split(',').filter(p => p);
                            groups.forEach(group => {
                                const paths = group.split('.').filter(p => p);
                                this.setValueByPath(newEntity, paths.join('.'), value);
                            });
                        });
                        this.repository.entityCollection.addEntity(newEntity);
                        return newEntity;
                    }));
                }
            }));
            // const formLoadingService = this.injector.get<FormLoadingService>(FormLoadingService, null);
            if (this.formLoadingService) {
                this.suspendFrameContextEvent(frameId);
                this.formLoadingService.show();
                this.formLoadingService.setSuspend(true);
            }
            return addAction$.pipe(last()).pipe(switchMap(() => {
                const primaryValue = this.viewModel.bindingData.list.currentId;
                if (primaryValue) {
                    return befRepository.updateChangesById(primaryValue);
                }
                else {
                    return of(null);
                }
            })).subscribe(() => {
                if (this.formLoadingService) {
                    this.resumeFrameContextEvent(frameId);
                    this.formLoadingService.setSuspend(false);
                    this.formLoadingService.hide();
                }
            }, () => {
                if (this.formLoadingService) {
                    this.resumeFrameContextEvent(frameId);
                    this.formLoadingService.setSuspend(false);
                    this.formLoadingService.hide();
                }
            });
        }
        return of(null);
    }
    suspendFrameContextEvent(frameId) {
        const appContext = this.injector.get(AppContext, null);
        if (appContext) {
            const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            frameContext.suspend = true;
        }
    }
    resumeFrameContextEvent(frameId) {
        const appContext = this.injector.get(AppContext, null);
        if (appContext) {
            const frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            frameContext.suspend = false;
            frameContext.appContext.messagePipe.next('bindData');
        }
    }
    //#endregion
    setValueByPath(target, path, value) {
        if (target) {
            const paths = path.split('.');
            if (paths.length <= 1) {
                target[path] = value;
            }
            else {
                paths.slice(0, -1).reduce((prev, path) => {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    }
    getValueByPath(target, path) {
        const paths = path.split('.');
        if (paths.length < 1) {
            return;
        }
        if (paths.length === 1) {
            return target[path];
        }
        let result = null;
        paths.forEach((prop, index) => {
            if (index === 0) {
                result = target && target[prop] || null;
            }
            else {
                result = result && result[prop] || null;
            }
        });
        return result;
    }
    /**
     * 构造子表路径
     * @param bindingPath 绑定路径
     * @param id id
     */
    buildPath(bindingPath, id) {
        let path = '/' + id;
        const subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (let index = 1; index < subPaths.length - 1; index++) {
                const subPath = subPaths[index];
                const subData = this.viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);
                }
                path += `/${subPath}/${subData.currentId}`;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    }
    /**
     * 获取绑定路径的当前行数组
     * @param bindingPath bindingPath
     * @returns
     */
    buildIds(bindingPath) {
        const bindingPaths = bindingPath.split('/').filter(p => p);
        const primaryValue = this.viewModel.bindingData.list.currentId;
        const result = [];
        const paths = [];
        if (bindingPaths.length > 0) {
            result.push(primaryValue);
            // 从表或从从表要复制的行不一定是当前行，用户可以指定
            bindingPaths.pop();
            bindingPaths.forEach((path) => {
                paths.push(path);
                const bindingList = this.viewModel.bindingData.getValue(paths);
                if (bindingList) {
                    result.push(bindingList.currentId);
                }
            });
        }
        return result;
    }
    updateBindingData(input, ids) {
        const { controlType = null, value = null, options = {}, dataType = null } = input || {};
        if (controlType) {
            // 对帮助做特殊处理
            if (controlType === 'lookup' || controlType === 'combo-lookup') {
                const mapFields = options.mapFields;
                this.updateLookupField(ids, value, mapFields);
            }
            else {
                this.updateSimpleField(ids, value, input);
            }
        }
    }
    updateSimpleField(ids, value, column) {
        if (!column) {
            return;
        }
        const currentColumnType = column.dataType;
        // 存在行编辑器
        let result = value;
        if (currentColumnType === 'date') {
            let dateStr = this.dateService.formatTo(value, 'yyyy-MM-dd');
            if (!dateStr) {
                dateStr = '0001-01-01T00:00:00';
            }
            result = dateStr;
        }
        else if (currentColumnType === 'number') {
            result = Number(value) || 0;
        }
        const field = column.field;
        ids.forEach(id => {
            this.updateBindingList(id, field, result);
        });
    }
    updateLookupField(ids, helpData, mapFields) {
        if (!mapFields) {
            return;
        }
        let helpFields = Object.keys(mapFields);
        const idIndex = helpFields.findIndex(item => item === 'id');
        if (helpFields.includes('id') && idIndex !== 0) {
            helpFields.splice(idIndex, 1);
            helpFields = ['id', ...helpFields];
        }
        helpFields.forEach((helpField) => {
            let helpValue = '';
            if (helpData) {
                if (helpData instanceof Array) {
                    helpValue = helpData.map((item) => {
                        return this.getValue(helpField, item);
                    }).join(',');
                }
                else {
                    helpValue = this.getValue(helpField, helpData);
                }
            }
            ids.forEach(id => {
                this.updateBindingList(id, mapFields[helpField], helpValue);
            });
        });
    }
    updateBindingList(primaryValue, propertyName, value) {
        const viewModel = this.viewModel || null;
        if (!viewModel || !propertyName) {
            return;
        }
        // 更新主表部分行的字段
        const propertyNames = propertyName.split('.').filter(item => item);
        const bindingObject = this.bindingList.findById(primaryValue);
        if (propertyNames.length < 2) {
            bindingObject.setValue(propertyName, value, true, true);
        }
        else {
            let targetBindingObject = null;
            const fpaths = propertyNames.slice(0, propertyNames.length - 1);
            const targetPropertyName = propertyNames[propertyNames.length - 1];
            fpaths.forEach(prop => {
                targetBindingObject = targetBindingObject && targetBindingObject[prop] || bindingObject[prop];
            });
            // todo:需要添加值变化事件
            targetBindingObject.setValue(targetPropertyName, value, true, true);
        }
    }
    getBindingPathArray() {
        const path = this.viewModel.bindingPath;
        if (path) {
            return path.split('/').filter(n => n !== '');
        }
        return [];
    }
    getValue(f, data) {
        let val = '';
        if (f.indexOf('.') === -1) {
            val = data[f];
        }
        else {
            val = f.split('.').reduce((a, b) => {
                return a[b];
            }, data);
        }
        return val;
    }
    get bindingList() {
        // 根实体
        if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
            return this.viewModel.bindingData.list;
        }
        // 子实体
        let bindingPath = this.viewModel.bindingPath.substr(1);
        bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
        const paths = bindingPath.split('/');
        const filteredPaths = paths.filter((part) => {
            return part !== '';
        });
        return this.viewModel.bindingData.getValue(filteredPaths);
    }
    /**
     * 根据映射将数据赋值给bindingData
     * @param data
     * @param mapFields
     * @param bindingData
     */
    mappingRow(data, mapFields, entity, bindingPath) {
        Object.keys(mapFields).forEach((prop) => {
            const value = this.getValueByPath(data, prop);
            const fields = mapFields[prop];
            const groups = fields.split(',').filter(p => p);
            groups.forEach(group => {
                const paths = group.split('.').filter(p => p);
                this.setValueByPath(entity, paths.join('.'), value);
            });
        });
    }
    /**
     * 通过frameId获取对应的组件上下文
     * @param frameId frameId
     * @returns
     */
    getFrameContextById(frameId) {
        if (!frameId) {
            return null;
        }
        const appContext = this.injector.get(AppContext, null);
        let frameContext = null;
        if (appContext) {
            frameContext = appContext.frameContextManager.getFrameContextById(frameId);
        }
        return frameContext;
    }
    getEntityByPath(frameContext, bindingPaths, currentId) {
        bindingPaths = [...bindingPaths];
        const id = frameContext.bindingData.list.currentId;
        const entity = frameContext.repository.entityCollection.getEntityById(id);
        let item = entity;
        const paths = [];
        const tailPath = bindingPaths.pop();
        const parent = bindingPaths.reduce((object, path) => {
            paths.push(path);
            if (object && (object.hasOwnProperty(path) || object['__proto__'].hasOwnProperty(path))) {
                const value = object[path];
                if (value && value instanceof EntityList) {
                    const bindingList = frameContext.bindingData.getValue(paths);
                    const currentItemId = bindingList.currentId;
                    return value.get(currentItemId);
                }
                else {
                    return value;
                }
            }
            else {
                return null;
            }
        }, item);
        if (parent instanceof Entity) {
            const list = parent[tailPath];
            if (list) {
                return list.get(currentId);
            }
            else {
                throw new Error(`无效的bindingPath.`);
            }
        }
        else {
            throw new Error(`无效的bindingPath.`);
        }
    }
    endEdit(frameContext) {
        const appContext = frameContext && frameContext.getFormAppContext();
        return of(null).pipe(tap(() => {
            if (appContext) {
                appContext.messagePipe.next({ type: 'endEdit' });
            }
        }), 
        // todo: 不应该使用delay，应该串流
        delay(5));
    }
}
BatchEditService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BatchEditService.ctorParameters = () => [
    { type: Injector },
    { type: ComponentManagerService },
    { type: ViewModel },
    { type: Repository },
    { type: BatchEditDialogService },
    { type: DateTimeHelperService },
    { type: LanguageService },
    { type: FormNotifyService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2gtZWRpdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2JhdGNoLWVkaXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUMvRCxPQUFPLEVBQWUsU0FBUyxFQUFpQixVQUFVLEVBQUUsTUFBTSxFQUE2QixVQUFVLEVBQWlELFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdMLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6RixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN0RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUN6RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFMUQsa0NBQWtDO0FBQ2xDOztHQUVHO0FBRUgsTUFBTSxPQUFPLGdCQUFnQjtJQUczQixZQUNVLFFBQWtCLEVBQ2xCLHVCQUFnRCxFQUNoRCxTQUFvQixFQUNwQixVQUEyQixFQUMzQixzQkFBOEMsRUFDOUMsV0FBa0MsRUFDbEMsZUFBZ0MsRUFDaEMsaUJBQW9DO1FBUHBDLGFB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b3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQmluZGluZ0xpc3QsIFZpZXdNb2RlbCwgQmluZGluZ09iamVjdCwgUmVwb3NpdG9yeSwgRW50aXR5LCBGcmFtZUNvbnRleHQsIEJpbmRpbmdEYXRhLCBBcHBDb250ZXh0LCBCaW5kaW5nUHJvcGVydHksIERhdGFUeXBlSW5mbywgY3JlYXRlRW50aXRpZXMsIEVudGl0eUxpc3QgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IGZyb20sIEVNUFRZLCBjb25jYXQsIG9mLCBTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGNvbmNhdE1hcCwgY2F0Y2hFcnJvciwgdGFwLCBzd2l0Y2hNYXAsIGxhc3QsIG1hcCwgZGVsYXkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEJlZlJlcG9zaXRvcnksIFJlc3BvbnNlSW5mbyB9IGZyb20gJ0BmYXJyaXMvYmVmJztcclxuaW1wb3J0IHsgQmF0Y2hFZGl0RGlhbG9nU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktYmF0Y2gtZWRpdC1kaWFsb2cnO1xyXG5pbXBvcnQgeyBEYXRlVGltZUhlbHBlclNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbi9kYXRlJztcclxuaW1wb3J0IHsgQ29tcG9uZW50TWFuYWdlclNlcnZpY2UgfSBmcm9tICcuL2NvbXBvbmVudC1tYW5hZ2VyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBGb3JtTG9hZGluZ1NlcnZpY2UgfSBmcm9tICcuL2Zvcm0tbG9hZGluZy9mb3JtLWxvYWRpbmcuc2VydmljZSc7XHJcbmltcG9ydCB7IExhbmd1YWdlU2VydmljZSB9IGZyb20gJy4vbGFuZ3VhZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRm9ybU5vdGlmeVNlcnZpY2UgfSBmcm9tICcuL2Zvcm0tbm90aWZ5LnNlcnZpY2UnO1xyXG5cclxuLy8gdHNsaW50OmRpc2FibGU6IG1heC1saW5lLWxlbmd0aFxyXG4vKipcclxuICog5om56YeP57yW6L6R5pyN5YqhXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCYXRjaEVkaXRTZXJ2aWNlIHtcclxuICBwcml2YXRlIGZvcm1Mb2FkaW5nU2VydmljZTogRm9ybUxvYWRpbmdTZXJ2aWNlO1xyXG4gIHByaXZhdGUgb25IZWxwQ2xvc2U6IFN1YmplY3Q8YW55PjtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgcHJpdmF0ZSBjb21wb25lbnRNYW5hZ2VyU2VydmljZTogQ29tcG9uZW50TWFuYWdlclNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHZpZXdNb2RlbDogVmlld01vZGVsLFxyXG4gICAgcHJpdmF0ZSByZXBvc2l0b3J5OiBSZXBvc2l0b3J5PGFueT4sXHJcbiAgICBwcml2YXRlIGJhdGNoRWRpdERpYWxvZ1NlcnZpY2U6IEJhdGNoRWRpdERpYWxvZ1NlcnZpY2UsXHJcbiAgICBwcml2YXRlIGRhdGVTZXJ2aWNlOiBEYXRlVGltZUhlbHBlclNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBmb3JtTm90aWZ5U2VydmljZTogRm9ybU5vdGlmeVNlcnZpY2VcclxuICApIHtcclxuICAgIHRoaXMuZm9ybUxvYWRpbmdTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQ8Rm9ybUxvYWRpbmdTZXJ2aWNlPihGb3JtTG9hZGluZ1NlcnZpY2UsIG51bGwpO1xyXG4gICAgaWYgKCF0aGlzLmxhbmd1YWdlU2VydmljZSkge1xyXG4gICAgICB0aGlzLmxhbmd1YWdlU2VydmljZSA9IExhbmd1YWdlU2VydmljZS5nZXRJbnN0YW5jZSgpO1xyXG4gICAgfVxyXG4gICAgaWYgKCF0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlKSB7XHJcbiAgICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldDxGb3JtTm90aWZ5U2VydmljZT4oRm9ybU5vdGlmeVNlcnZpY2UsIG51bGwpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5vbkhlbHBDbG9zZSA9IG5ldyBTdWJqZWN0PGFueT4oKTtcclxuICAgIHRoaXMub25IZWxwQ2xvc2Uuc3Vic2NyaWJlKHJlc3VsdCA9PiB7XHJcbiAgICAgIGNvbnN0IHsgZnJhbWVJZCA9ICcnLCBtYXBGaWVsZHMgPSAnJywgZGF0YSA9IFtdIH0gPSByZXN1bHQgfHwge307XHJcbiAgICAgIHRoaXMub25IZWxwQ2xvc2VIYW5kbGVyKGZyYW1lSWQsIG1hcEZpZWxkcywgZGF0YSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaJk+W8gOaJuemHj+e8lui+keWvueivneahhlxyXG4gICAqIEBwYXJhbSBmcmFtZUlkIGZyYW1lSWRcclxuICAgKi9cclxuICBwdWJsaWMgb3BlbkJhdGNoRWRpdERpYWxvZyhmcmFtZUlkOiBzdHJpbmcpIHtcclxuICAgIGlmICghZnJhbWVJZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZyYW1lSWQgaXMgcmVxdWlyZWQuJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5iYXRjaEVkaXREaWFsb2dTZXJ2aWNlKSB7XHJcbiAgICAgIGxldCBjb2x1bW5zID0gW107XHJcbiAgICAgIGlmICh0aGlzLnZpZXdNb2RlbCkge1xyXG4gICAgICAgIGNvbnN0IGdyaWRGcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCA9IHRoaXMudmlld01vZGVsLmZyYW1lQ29udGV4dC5yb290LmFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQpO1xyXG4gICAgICAgIGNvbnN0IGdyaWRWaWV3TW9kZWwgPSBncmlkRnJhbWVDb250ZXh0LnZpZXdNb2RlbDtcclxuICAgICAgICBpZiAoZ3JpZFZpZXdNb2RlbCAmJiBncmlkVmlld01vZGVsLmhhc093blByb3BlcnR5KCdkYXRhR3JpZENvbHVtbnNOYW1lJykpIHtcclxuICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tc3RyaW5nLWxpdGVyYWxcclxuICAgICAgICAgIGNvbnN0IGdyaWRDb2x1bW5zQXR0ck5hbWUgPSBncmlkVmlld01vZGVsWydkYXRhR3JpZENvbHVtbnNOYW1lJ107XHJcbiAgICAgICAgICBjb2x1bW5zID0gZ3JpZFZpZXdNb2RlbFtncmlkQ29sdW1uc0F0dHJOYW1lXTtcclxuICAgICAgICB9IGVsc2UgaWYgKGdyaWRWaWV3TW9kZWwgJiYgZ3JpZFZpZXdNb2RlbC5oYXNPd25Qcm9wZXJ0eSgnZGF0YUdyaWRDb2x1bW5zJykpIHtcclxuICAgICAgICAgIGNvbHVtbnMgPSBncmlkVmlld01vZGVsWydkYXRhR3JpZENvbHVtbnMnXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaWRzOiBzdHJpbmdbXSA9IGdyaWRWaWV3TW9kZWwudWlTdGF0ZVsnaWRzJ10gfHwgW107XHJcbiAgICAgICAgaWYgKCFpZHMgfHwgaWRzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZS5wbHNDaGVja0JhdGNoRWRpdFJvd3MsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkaWFsb2dSZWY6IGFueSA9IHRoaXMuYmF0Y2hFZGl0RGlhbG9nU2VydmljZS5iYXRjaEVkaXQoY29sdW1ucywge1xyXG4gICAgICAgICAgcm93czogaWRzLmxlbmd0aCxcclxuICAgICAgICAgIG9uQ29uZmlybTogKGlucHV0czogQXJyYXk8YW55PikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpZHMpICYmIGlkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ29wZW5CYXRjaEVkaXREaWFsb2cnLCBpbnB1dHMpO1xyXG4gICAgICAgICAgICAgIGNvbnN0IGFwcENvbnRleHQgPSB0aGlzLnZpZXdNb2RlbC5mcmFtZUNvbnRleHQuYXBwQ29udGV4dDtcclxuICAgICAgICAgICAgICBhcHBDb250ZXh0LmNoYW5nZURldGVjdGlvbkNvbnRyb2xsZXIuZGV0YWNoKCk7XHJcbiAgICAgICAgICAgICAgaW5wdXRzLmZvckVhY2goaW5wdXQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVCaW5kaW5nRGF0YShpbnB1dCwgaWRzKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBhcHBDb250ZXh0LmNoYW5nZURldGVjdGlvbkNvbnRyb2xsZXIucmVhdHRhY2goKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkaWFsb2dSZWYuY2xvc2UoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDmiZPlvIDpmpDol4/luK7liqlcclxuICAgKiBAcGFyYW0gaGVscElkIOW4ruWKqWlkXHJcbiAgICovXHJcbiAgcHVibGljIG9wZW5IaWRkZW5IZWxwKGhlbHBJZDogc3RyaW5nKSB7XHJcbiAgICBpZiAoIWhlbHBJZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50IGVycm9yLGhlbHBJZCBjYW5gdCBiZSBlbXB0eScpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY29tcG9uZW50TWFuYWdlclNlcnZpY2UgPSB0aGlzLmNvbXBvbmVudE1hbmFnZXJTZXJ2aWNlLmdldENvbnRyb2woaGVscElkKTtcclxuICAgIGlmIChjb21wb25lbnRNYW5hZ2VyU2VydmljZSkge1xyXG4gICAgICBjb21wb25lbnRNYW5hZ2VyU2VydmljZS5zaG93RGlhbG9nKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHRoZSBjb21wb25lbnQgd2hpY2ggaWQgaXMgJHtoZWxwSWR9IGNhbid0IGJlIGZvdW5kIWApO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDmuIXnqbrluK7liqnli77pgInvvIjlj6rog73mjILovb3liLDluK7liqnliY3kuovku7bvvIlcclxuICAgKi9cclxuICBwdWJsaWMgY2xlYXJIZWxwU2VsZWN0aW9ucygpIHtcclxuICAgIGNvbnN0IHNlbGY6IGFueSA9IHRoaXM7XHJcbiAgICBjb25zdCBoZWxwRWxlbWVudCA9IHNlbGYuY29udGV4dCAmJiBzZWxmLmNvbnRleHQuZXZlbnRQYXJhbSAmJiBzZWxmLmNvbnRleHQuZXZlbnRQYXJhbS5pbnN0YW5jZSB8fCBudWxsO1xyXG4gICAgaWYgKGhlbHBFbGVtZW50KSB7XHJcbiAgICAgIGhlbHBFbGVtZW50LmRpc3BsYXlWYWx1ZSA9ICcnO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDli77pgInlvZPliY3ooYxcclxuICAgKiBAcGFyYW0gZnJhbWVJZCBmcmFtZUlkXHJcbiAgICogQHBhcmFtIG1hcEZpZWxkcyDlrZfmrrXmmKDlsIRcclxuICAgKiBAcGFyYW0gcHJpbWFyeUtleVZhbHVlIOW4ruWKqeS4u+mUruWtl+autVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjaGVja0N1cnJlbnRSb3coZnJhbWVJZDogc3RyaW5nLCBtYXBGaWVsZHM6IHN0cmluZywgcHJpbWFyeUtleVZhbHVlOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHNlbGY6IGFueSA9IHRoaXM7XHJcbiAgICBjb25zdCBoZWxwRWxlbWVudCA9IHNlbGYuY29udGV4dCAmJiBzZWxmLmNvbnRleHQuZXZlbnRQYXJhbSAmJiBzZWxmLmNvbnRleHQuZXZlbnRQYXJhbS5pbnN0YW5jZSB8fCBudWxsO1xyXG4gICAgaWYgKCFwcmltYXJ5S2V5VmFsdWUpIHtcclxuICAgICAgcHJpbWFyeUtleVZhbHVlID0gJ2lkJztcclxuICAgIH1cclxuICAgIGNvbnN0IG1hcHBpbmdzID0gSlNPTi5wYXJzZShtYXBGaWVsZHMpO1xyXG4gICAgaWYgKGhlbHBFbGVtZW50KSB7XHJcbiAgICAgIGZyYW1lSWQgPSBmcmFtZUlkIHx8IHRoaXMudmlld01vZGVsLmZyYW1lQ29udGV4dC5mcmFtZUlkO1xyXG4gICAgICBpZiAoZnJhbWVJZCkge1xyXG4gICAgICAgIGNvbnN0IGZyYW1lQ29udGV4dCA9IHRoaXMuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKTtcclxuICAgICAgICBpZiAoZnJhbWVDb250ZXh0KSB7XHJcbiAgICAgICAgICBjb25zdCBiaW5kaW5nUGF0aCA9IGZyYW1lQ29udGV4dC52aWV3TW9kZWwuYmluZGluZ1BhdGg7XHJcbiAgICAgICAgICBpZiAoYmluZGluZ1BhdGgpIHtcclxuICAgICAgICAgICAgY29uc3QgYmluZGluZ1BhdGhzID0gYmluZGluZ1BhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgICAgICAgICAgY29uc3QgYmluZGluZ0xpc3QgPSBmcmFtZUNvbnRleHQuYmluZGluZ0RhdGEuZ2V0VmFsdWUoYmluZGluZ1BhdGhzKSBhcyBCaW5kaW5nTGlzdDtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudFJvdyA9IGJpbmRpbmdMaXN0LmN1cnJlbnRJdGVtO1xyXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gbWFwcGluZ3NbcHJpbWFyeUtleVZhbHVlXTtcclxuICAgICAgICAgICAgaWYgKHBhdGgpIHtcclxuICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWVCeVBhdGgoY3VycmVudFJvdywgcGF0aCk7XHJcbiAgICAgICAgICAgICAgaGVscEVsZW1lbnQuZGlzcGxheVZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog5Lul5biu5Yqp5Yu+6YCJ5pWw5o2u5L2c5Li65L6d5o2u77yM5om56YeP5paw5aKe5Li76KGo5pWw5o2uXHJcbiAgICogQHBhcmFtIGZyYW1lSWQg5Li76KGo5omA5ZyoZnJhbWXnmoRpZFxyXG4gICAqIEBwYXJhbSBtYXBGaWVsZHMg5biu5Yqp5a2X5q615LiO5Li76KGo5a2X5q615pig5bCEXHJcbiAgICogQGRlc2NyaXB0aW9uIOS7peW4ruWKqeWLvumAieaVsOaNruS9nOS4uuS+neaNru+8jOaJuemHj+aWsOWinuS4u+ihqOaVsOaNrlxyXG4gICAqL1xyXG4gIHB1YmxpYyBiYXRjaEFwcGVuZChmcmFtZUlkOiBzdHJpbmcsIG1hcEZpZWxkczogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBzZWxmOiBhbnkgPSB0aGlzO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gc2VsZi5jb250ZXh0ICYmIHNlbGYuY29udGV4dC5ldmVudFBhcmFtIHx8IFtdO1xyXG4gICAgaWYgKCFtYXBGaWVsZHMpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXBGaWVsZHMgY2FuYHQgYmUgZW1wdHkuJyk7XHJcbiAgICB9XHJcbiAgICBpZiAocmVzdWx0ICYmIEFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQubGVuZ3RoID4gMCkge1xyXG4gICAgICBjb25zdCBtYXBwaW5ncyA9IEpTT04ucGFyc2UobWFwRmllbGRzKTtcclxuICAgICAgLy8g5LiN5pivYmluZGluZ1BhdGjliJnmjIlmcmFtZUlk5aSE55CGXHJcbiAgICAgIGxldCBiaW5kaW5nUGF0aCA9ICcvJztcclxuICAgICAgY29uc3QgYXBwQ29udGV4dCA9IHRoaXMuaW5qZWN0b3IuZ2V0PEFwcENvbnRleHQ+KEFwcENvbnRleHQsIG51bGwpO1xyXG4gICAgICBpZiAoYXBwQ29udGV4dCkge1xyXG4gICAgICAgIGNvbnN0IGZyYW1lQ29udGV4dCA9IGFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQpO1xyXG4gICAgICAgIGlmIChmcmFtZUNvbnRleHQpIHtcclxuICAgICAgICAgIGJpbmRpbmdQYXRoID0gZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5iaW5kaW5nUGF0aCB8fCAnLyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZnJhbWVJZCBpcyBpbnZhbGlkIScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBkZWZhdWx0VmFsdWVzID0gW107XHJcbiAgICAgIHJlc3VsdC5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0ge307XHJcbiAgICAgICAgT2JqZWN0LmtleXMobWFwcGluZ3MpLmZvckVhY2goKHByb3A6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldFZhbHVlQnlQYXRoKGl0ZW0sIHByb3ApO1xyXG4gICAgICAgICAgY29uc3QgZmllbGRzID0gbWFwcGluZ3NbcHJvcF07XHJcbiAgICAgICAgICBjb25zdCBncm91cHM6IGFueVtdID0gZmllbGRzLnNwbGl0KCcsJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAgICAgICBncm91cHMuZm9yRWFjaChncm91cCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhdGhzID0gZ3JvdXAuc3BsaXQoJy4nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZUJ5UGF0aChkZWZhdWx0VmFsdWUsIHBhdGhzLmpvaW4oJy4nKSwgdmFsdWUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZGVmYXVsdFZhbHVlcy5wdXNoKGRlZmF1bHRWYWx1ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLmZvcm1Mb2FkaW5nU2VydmljZS5zaG93KCk7XHJcbiAgICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkuYmF0Y2hBcHBlbmQoZGVmYXVsdFZhbHVlcykucGlwZShcclxuICAgICAgICB0YXAoKCkgPT4gdGhpcy5mb3JtTG9hZGluZ1NlcnZpY2UuaGlkZSgpKSxcclxuICAgICAgICBtYXAoKCkgPT4gdHJ1ZSlcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBvZih0cnVlKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5Lul5biu5Yqp5Yu+6YCJ5pWw5o2u5L2c5Li65L6d5o2u77yM5om56YeP5paw5aKe5LuO6KGoL+S7juS7juihqFxyXG4gICAqIEBwYXJhbSBmcmFtZUlkIOS7juihqC/ku47ku47ooajmiYDlnKhmcmFtZeeahGlkXHJcbiAgICogQHBhcmFtIG1hcEZpZWxkcyDluK7liqnlrZfmrrXkuI7ku47ooagv5LuO5LuO6KGo5a2X5q615pig5bCEXHJcbiAgICogQGRlc2NyaXB0aW9uIOS7peW4ruWKqeWLvumAieaVsOaNruS9nOS4uuS+neaNru+8jOaJuemHj+aWsOWinuS7juihqC/ku47ku47ooahcclxuICAgKi9cclxuICBwdWJsaWMgYmF0Y2hBcHBlbmRCeVBhdGhCYXNlZE9uSGVscFNlbGVjdGlvbnMoZnJhbWVJZDogc3RyaW5nLCBtYXBGaWVsZHM6IHN0cmluZykge1xyXG4gICAgY29uc3Qgc2VsZjogYW55ID0gdGhpcztcclxuICAgIGNvbnN0IHJlc3VsdCA9IHNlbGYuY29udGV4dCAmJiBzZWxmLmNvbnRleHQuZXZlbnRQYXJhbSB8fCBbXTtcclxuICAgIGlmICghbWFwRmllbGRzKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignbWFwRmllbGRzIGNhbmB0IGJlIGVtcHR5LicpO1xyXG4gICAgfVxyXG4gICAgaWYgKHJlc3VsdCAmJiBBcnJheS5pc0FycmF5KHJlc3VsdCkgJiYgcmVzdWx0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgbWFwcGluZ3MgPSBKU09OLnBhcnNlKG1hcEZpZWxkcyk7XHJcbiAgICAgIC8vIOS4jeaYr2JpbmRpbmdQYXRo5YiZ5oyJZnJhbWVJZOWkhOeQhlxyXG4gICAgICBsZXQgYmluZGluZ1BhdGggPSAnLyc7XHJcbiAgICAgIGNvbnN0IGFwcENvbnRleHQgPSB0aGlzLmluamVjdG9yLmdldDxBcHBDb250ZXh0PihBcHBDb250ZXh0LCBudWxsKTtcclxuICAgICAgaWYgKGFwcENvbnRleHQpIHtcclxuICAgICAgICBjb25zdCBmcmFtZUNvbnRleHQgPSBhcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKTtcclxuICAgICAgICBpZiAoZnJhbWVDb250ZXh0KSB7XHJcbiAgICAgICAgICBiaW5kaW5nUGF0aCA9IGZyYW1lQ29udGV4dC52aWV3TW9kZWwuYmluZGluZ1BhdGggfHwgJy8nO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZyYW1lSWQgaXMgaW52YWxpZCEnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgZGVmYXVsdFZhbHVlcyA9IFtdO1xyXG4gICAgICByZXN1bHQuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IHt9O1xyXG4gICAgICAgIE9iamVjdC5rZXlzKG1hcHBpbmdzKS5mb3JFYWNoKChwcm9wOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRWYWx1ZUJ5UGF0aChpdGVtLCBwcm9wKTtcclxuICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IG1hcHBpbmdzW3Byb3BdO1xyXG4gICAgICAgICAgY29uc3QgZ3JvdXBzOiBhbnlbXSA9IGZpZWxkcy5zcGxpdCgnLCcpLmZpbHRlcihwID0+IHApO1xyXG4gICAgICAgICAgZ3JvdXBzLmZvckVhY2goZ3JvdXAgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwYXRocyA9IGdyb3VwLnNwbGl0KCcuJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVCeVBhdGgoZGVmYXVsdFZhbHVlLCBwYXRocy5qb2luKCcuJyksIHZhbHVlKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRlZmF1bHRWYWx1ZXMucHVzaChkZWZhdWx0VmFsdWUpO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5mb3JtTG9hZGluZ1NlcnZpY2Uuc2hvdygpO1xyXG4gICAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGgoYmluZGluZ1BhdGgsIHRoaXMudmlld01vZGVsLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkKTtcclxuICAgICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeS5iYXRjaEFwcGVuZEJ5UGF0aChwYXRoLCBkZWZhdWx0VmFsdWVzKS5waXBlKFxyXG4gICAgICAgIHRhcCgoKSA9PiB0aGlzLmZvcm1Mb2FkaW5nU2VydmljZS5oaWRlKCkpLFxyXG4gICAgICAgIG1hcCgoKSA9PiB0cnVlKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDooYzlhoXluK7liqnlpJrpgInmibnph4/mlrDlop7miJbmm7/mjaLlrZDooajmlbDmja5cclxuICAgKiBAcGFyYW0gZnJhbWVJZCBmcmFtZUlkLCBvcHRpb25hbCzkuLrnqbrml7bkvb/nlKjlkb3ku6TmiafooYzml7bmiYDlnKjnmoTkuIrkuIvmlodcclxuICAgKiBAcGFyYW0gbWFwRmllbGRzIOWtl+auteaYoOWwhFxyXG4gICAqIEBwYXJhbSBwcmltYXJ5S2V5IOW4ruWKqeS4u+mUruWtl+aute+8jOm7mOiupOS4umlkXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGJhdGNoQXBwZW5kQmFzZWRPblJvd0hlbHBTZWxlY3Rpb25zKGZyYW1lSWQ6IHN0cmluZywgbWFwRmllbGRzOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHNlbGY6IGFueSA9IHRoaXM7XHJcbiAgICBsZXQgcmVzdWx0OiBhbnlbXSA9IHNlbGYuY29udGV4dCAmJiBzZWxmLmNvbnRleHQuZXZlbnRQYXJhbSB8fCBbXTtcclxuICAgIGlmICghbWFwRmllbGRzKSB7XHJcbiAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG1hcHBpbmdzID0gSlNPTi5wYXJzZShtYXBGaWVsZHMpO1xyXG4gICAgaWYgKCFtYXBwaW5ncyB8fCAhbWFwcGluZ3MuaGFzT3duUHJvcGVydHkoJ2lkJykpIHtcclxuICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgfVxyXG4gICAgZnJhbWVJZCA9IGZyYW1lSWQgfHwgdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0LmZyYW1lSWQ7XHJcbiAgICBpZiAoIWZyYW1lSWQpIHtcclxuICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZnJhbWVDb250ZXh0ID0gdGhpcy5nZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQpO1xyXG4gICAgaWYgKCFmcmFtZUNvbnRleHQpIHtcclxuICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgfVxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHRoaXMuZW5kRWRpdChmcmFtZUNvbnRleHQpLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICBpZiAocmVzdWx0ICYmIEFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBiaW5kaW5nUGF0aCA9IGZyYW1lQ29udGV4dC52aWV3TW9kZWwuYmluZGluZ1BhdGggfHwgJy8nO1xyXG4gICAgICAgICAgICBjb25zdCBiaW5kaW5nUGF0aHMgPSBiaW5kaW5nUGF0aC5zcGxpdCgnLycpLmZpbHRlcihwID0+IHApO1xyXG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWVzID0gW107XHJcbiAgICAgICAgICAgIC8vIOiOt+WPluW9k+WJjeihjFxyXG4gICAgICAgICAgICBjb25zdCBiaW5kaW5nTGlzdDogQmluZGluZ0xpc3QgPSBmcmFtZUNvbnRleHQuYmluZGluZ0RhdGEuZ2V0VmFsdWUoYmluZGluZ1BhdGhzKSBhcyBCaW5kaW5nTGlzdDtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudFJvdyA9IGJpbmRpbmdMaXN0LmN1cnJlbnRJdGVtO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Um93SWQgPSBiaW5kaW5nTGlzdC5jdXJyZW50SWQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRFbnRpdHkgPSB0aGlzLmdldEVudGl0eUJ5UGF0aChmcmFtZUNvbnRleHQsIGJpbmRpbmdQYXRocywgY3VycmVudFJvd0lkKTtcclxuICAgICAgICAgICAgY29uc3QgaGVhZEl0ZW0gPSByZXN1bHRbMF07XHJcbiAgICAgICAgICAgIC8vIOWmguaenOS7heWLvumAieS4gOadoe+8jOWImeW6lOabv+aNouW9k+WJjeihjOeahOaYoOWwhFxyXG4gICAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgIHRoaXMubWFwcGluZ1JvdyhoZWFkSXRlbSwgbWFwcGluZ3MsIGN1cnJlbnRFbnRpdHksIGJpbmRpbmdQYXRoKTtcclxuICAgICAgICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgaWRNYXBGaWVsZCA9IG1hcHBpbmdzWydpZCddO1xyXG4gICAgICAgICAgICAgIGNvbnN0IHNvdXJjZUl0ZW1JZCA9IHRoaXMuZ2V0VmFsdWVCeVBhdGgoY3VycmVudEVudGl0eSwgaWRNYXBGaWVsZCk7XHJcbiAgICAgICAgICAgICAgLy8g5aaC5p6c5b2T5YmN6KGM5rKh5pyJ5pig5bCE5oiW5Yu+6YCJ57uT5p6c5Lit5om+5LiN5Yiw5b2T5YmN6KGM55qE5pig5bCEXHJcbiAgICAgICAgICAgICAgaWYgKCFzb3VyY2VJdGVtSWQgfHwgcmVzdWx0LmZpbmRJbmRleChpdGVtID0+IGl0ZW1bYmluZGluZ0xpc3QucHJpbWFyeUtleV0gPT09IHNvdXJjZUl0ZW1JZCkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDph43mlrDmmKDlsITlvZPliY3ooYxcclxuICAgICAgICAgICAgICAgIHRoaXMubWFwcGluZ1JvdyhoZWFkSXRlbSwgbWFwcGluZ3MsIGN1cnJlbnRFbnRpdHksIGJpbmRpbmdQYXRoKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgxKTtcclxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZUl0ZW1JZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSByZXN1bHQuZmluZEluZGV4KGl0ZW0gPT4gaXRlbVtiaW5kaW5nTGlzdC5wcmltYXJ5S2V5XSA9PT0gc291cmNlSXRlbUlkKTtcclxuICAgICAgICAgICAgICAgIC8vIOmHjeaWsOaYoOWwhOW9k+WJjeihjFxyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXBwaW5nUm93KHJlc3VsdFtpbmRleF0sIG1hcHBpbmdzLCBjdXJyZW50RW50aXR5LCBiaW5kaW5nUGF0aCk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgLy8g5b2T5YmN6KGM5aSE55CG5a6M5oiQXHJcbiAgICAgICAgICAgICAgLy8g5aSE55CG5pyq5pig5bCE55qE6KGMXHJcbiAgICAgICAgICAgICAgY29uc3QgZW1wdHlSb3dzID0gYmluZGluZ0xpc3QudG9BcnJheSgpLmZpbHRlcihiaW5kaW5nT2JqZWN0ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gdGhpcy5nZXRWYWx1ZUJ5UGF0aChiaW5kaW5nT2JqZWN0LCBtYXBwaW5nc1tiaW5kaW5nTGlzdC5wcmltYXJ5S2V5XSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIWlkO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIGlmIChlbXB0eVJvd3MgJiYgZW1wdHlSb3dzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGxldCByb3dzID0gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiBlbXB0eVJvd3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJvd3MgPSByZXN1bHQuc2xpY2UoMCwgZW1wdHlSb3dzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZShlbXB0eVJvd3MubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcm93cy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRJdGVtID0gZW1wdHlSb3dzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5nZXRFbnRpdHlCeVBhdGgoZnJhbWVDb250ZXh0LCBiaW5kaW5nUGF0aHMsIHRhcmdldEl0ZW0ucHJpbWFyeUtleVZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5tYXBwaW5nUm93KGl0ZW0sIG1hcHBpbmdzLCBlbnRpdHksIGJpbmRpbmdQYXRoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAvLyDlpITnkIbliankvZnli77pgIlcclxuICAgICAgICAgICAgICByZXN1bHQuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0ge307XHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhtYXBwaW5ncykuZm9yRWFjaCgocHJvcDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRWYWx1ZUJ5UGF0aChpdGVtLCBwcm9wKTtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRzID0gbWFwcGluZ3NbcHJvcF07XHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwczogYW55W10gPSBmaWVsZHMuc3BsaXQoJywnKS5maWx0ZXIocCA9PiBwKTtcclxuICAgICAgICAgICAgICAgICAgZ3JvdXBzLmZvckVhY2goZ3JvdXAgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhdGhzID0gZ3JvdXAuc3BsaXQoJy4nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlQnlQYXRoKGRlZmF1bHRWYWx1ZSwgcGF0aHMuam9pbignLicpLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWVzLnB1c2goZGVmYXVsdFZhbHVlKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBpZiAoZGVmYXVsdFZhbHVlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1Mb2FkaW5nU2VydmljZS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gdGhpcy5idWlsZFBhdGgoYmluZGluZ1BhdGgsIHRoaXMudmlld01vZGVsLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVwb3NpdG9yeS5iYXRjaEFwcGVuZEJ5UGF0aChwYXRoLCBkZWZhdWx0VmFsdWVzKS5waXBlKFxyXG4gICAgICAgICAgICAgICAgICB0YXAoKCkgPT4gdGhpcy5mb3JtTG9hZGluZ1NlcnZpY2UuaGlkZSgpKVxyXG4gICAgICAgICAgICAgICAgKS5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9LCAzNTApO1xyXG4gICAgICB9KTtcclxuICAgIH0sIDUwKTtcclxuICAgIHJldHVybiBvZih0cnVlKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5aSN5Yi25Li76KGo5pWw5o2uXHJcbiAgICogQHBhcmFtIGlkIOimgeWkjeWItueahOaVsOaNrmlkXHJcbiAgICogQHBhcmFtIGZpZWxkcyDopoHlpI3liLbnmoTlrZfmrrVcclxuICAgKiBAZGVzY3JpcHRpb24g5LuF5pSv5oyB5aSN5Yi25Li76KGo5pWw5o2uXHJcbiAgICogQGRlcHJlY2F0ZWQg6K+l5pa55rOV5bey6KKr5bqf5byD77yM6K+35L2/55SoY2xvbmXmlrnms5Xmm7/ku6PjgIJcclxuICAgKi9cclxuICBwdWJsaWMgY29weShpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGlmICghaWQpIHtcclxuICAgICAgdGhpcy5mb3JtTm90aWZ5U2VydmljZS53YXJuaW5nKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnBsc1NlbGVjdENvcHlEYXRhLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcclxuICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGJlZlJlcG9zaXRvcnkgPSB0aGlzLnJlcG9zaXRvcnkgYXMgQmVmUmVwb3NpdG9yeTxhbnk+O1xyXG4gICAgY29uc3QgYmFzZVVyaSA9IGJlZlJlcG9zaXRvcnkucmVzdFNlcnZpY2UuYmFzZVVyaTtcclxuICAgIGNvbnN0IHVybCA9IGAke2Jhc2VVcml9L3NlcnZpY2UvY29weW1haW5vYmp2b2FjdGlvbmA7XHJcbiAgICBjb25zdCByZXF1ZXN0SW5mbyA9IGJlZlJlcG9zaXRvcnkucmVzdFNlcnZpY2UuYnVpbGRSZXF1ZXN0SW5mbygpO1xyXG4gICAgY29uc3QgYm9keSA9IHtcclxuICAgICAgcmVxdWVzdEluZm8sXHJcbiAgICAgIGRhdGFJRDogaWRcclxuICAgIH07XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBib2R5XHJcbiAgICB9O1xyXG4gICAgdGhpcy5mb3JtTG9hZGluZ1NlcnZpY2Uuc2hvdygpO1xyXG4gICAgcmV0dXJuIGJlZlJlcG9zaXRvcnkucHJveHkucmVxdWVzdCh1cmwsICdQVVQnLCBudWxsLCBvcHRpb25zKS5waXBlKFxyXG4gICAgICB0YXAoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZm9ybUxvYWRpbmdTZXJ2aWNlLmhpZGUoKTtcclxuICAgICAgfSksXHJcbiAgICAgIG1hcCgocmVzcG9uc2VJbmZvOiBSZXNwb25zZUluZm8pID0+IHtcclxuICAgICAgICBjb25zdCByZXR1cm5WYWx1ZSA9IHJlc3BvbnNlSW5mby5yZXR1cm5WYWx1ZTtcclxuICAgICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLnJlcG9zaXRvcnkuYnVpbGRFbnRpdHkocmV0dXJuVmFsdWUpO1xyXG4gICAgICAgIHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmFkZEVudGl0eShlbnRpdHkpO1xyXG4gICAgICAgIHJldHVybiBlbnRpdHk7XHJcbiAgICAgIH0pLFxyXG4gICAgKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5aSN5Yi25pWw5o2u77yI5pSv5oyB5Li76KGo44CB5LuO6KGo44CB5LuO5LuO6KGo77yJXHJcbiAgICogQHBhcmFtIGlkIOimgeWkjeWItueahOihjFxyXG4gICAqIEBwYXJhbSBwYXRoIOivt+axgui3r+W+hFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBjbG9uZShpZDogc3RyaW5nLCBwYXRoOiBzdHJpbmcpIHtcclxuICAgIGlmICghaWQpIHtcclxuICAgICAgdGhpcy5mb3JtTm90aWZ5U2VydmljZS53YXJuaW5nKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnBsc1NlbGVjdENvcHlEYXRhLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcclxuICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgfVxyXG4gICAgaWYgKCFwYXRoKSB7XHJcbiAgICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZS5wYXRoSXNSZXF1aXJlZCwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuICAgIGlmICghcGF0aC5zdGFydHNXaXRoKCcvJykpIHtcclxuICAgICAgcGF0aCA9ICcvJyArIHBhdGg7XHJcbiAgICB9XHJcbiAgICBwYXRoID0gcGF0aC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgY29uc3QgYmluZGluZ1BhdGggPSB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nUGF0aDtcclxuICAgIGNvbnN0IGJlZlJlcG9zaXRvcnkgPSB0aGlzLnJlcG9zaXRvcnkgYXMgQmVmUmVwb3NpdG9yeTxhbnk+O1xyXG4gICAgY29uc3QgYmFzZVVyaSA9IGJlZlJlcG9zaXRvcnkucmVzdFNlcnZpY2UuYmFzZVVyaTtcclxuICAgIGNvbnN0IHVybCA9IGAke2Jhc2VVcml9JHtwYXRofWA7XHJcbiAgICBjb25zdCByZXF1ZXN0SW5mbyA9IGJlZlJlcG9zaXRvcnkucmVzdFNlcnZpY2UuYnVpbGRSZXF1ZXN0SW5mbygpO1xyXG4gICAgY29uc3QgaWRzID0gdGhpcy5idWlsZElkcyhiaW5kaW5nUGF0aCk7XHJcbiAgICBpZHMucHVzaChpZCk7XHJcbiAgICBjb25zdCBib2R5ID0ge1xyXG4gICAgICByZXF1ZXN0SW5mbyxcclxuICAgICAgZGF0YUlEOiBpZHMuam9pbignLCcpXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgYm9keVxyXG4gICAgfTtcclxuICAgIHRoaXMuZm9ybUxvYWRpbmdTZXJ2aWNlLnNob3coKTtcclxuICAgIHJldHVybiBiZWZSZXBvc2l0b3J5LnByb3h5LnJlcXVlc3QodXJsLCAnUFVUJywgbnVsbCwgb3B0aW9ucykucGlwZShcclxuICAgICAgdGFwKCgpID0+IHtcclxuICAgICAgICB0aGlzLmZvcm1Mb2FkaW5nU2VydmljZS5oaWRlKCk7XHJcbiAgICAgIH0pLFxyXG4gICAgICBtYXAoKHJlc3BvbnNlSW5mbzogUmVzcG9uc2VJbmZvKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmV0dXJuVmFsdWUgPSByZXNwb25zZUluZm8ucmV0dXJuVmFsdWU7XHJcbiAgICAgICAgbGV0IGVudGl0eSA9IG51bGw7XHJcbiAgICAgICAgaWYgKGJpbmRpbmdQYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICBlbnRpdHkgPSB0aGlzLnJlcG9zaXRvcnkuYnVpbGRFbnRpdHkocmV0dXJuVmFsdWUpO1xyXG4gICAgICAgICAgdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uYWRkRW50aXR5KGVudGl0eSwgdHJ1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnN0IGZwYXRoID0gdGhpcy5idWlsZFBhdGgoYmluZGluZ1BhdGgsIHRoaXMudmlld01vZGVsLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkKTtcclxuICAgICAgICAgIGVudGl0eSA9IGJlZlJlcG9zaXRvcnkuZW50aXR5TWFuYWdlci5hcHBlbmRFbnRpdHlCeVBhdGgoZnBhdGgsIHJldHVyblZhbHVlLCByZXR1cm5WYWx1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbnRpdHk7XHJcbiAgICAgIH0pLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vI3JlZ2lvbiDml6fnmoTlrp7njrBcclxuXHJcbiAgLyoqXHJcbiAgICog5aSN5Yi26KGMXHJcbiAgICogQHBhcmFtIGZyYW1lSWQgZnJhbWVJZFxyXG4gICAqIEBwYXJhbSBpZ25vcmVGaWVsZHMg5aSN5Yi25pe25b+955Wl5a2X5q61XHJcbiAgICogQHBhcmFtIHJlcGVhdCDph43lpI3lpI3liLbmrKHmlbDvvIzpu5jorqTkuLoxXHJcbiAgICovXHJcbiAgcHVibGljIGNvcHlSb3coZnJhbWVJZDogc3RyaW5nLCBpZ25vcmVGaWVsZHM6IHN0cmluZywgcmVwZWF0OiBudW1iZXIgPSAxKSB7XHJcbiAgICBpZiAodHlwZW9mIHJlcGVhdCAhPT0gJ251bWJlcicpIHtcclxuICAgICAgcmVwZWF0ID0gcGFyc2VJbnQocmVwZWF0LCAxMCk7XHJcbiAgICB9XHJcbiAgICBpZiAocmVwZWF0IDwgMSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50RXJyb3I6IHJlcGVhdCBtdXN0ID49IDEnKTtcclxuICAgIH1cclxuICAgIC8vIOiOt+WPluW9k+WJjeihjFxyXG4gICAgY29uc3QgZnJhbWVDb250ZXh0ID0gdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0LmFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQpO1xyXG4gICAgY29uc3QgcHJpbWFyeVZhbHVlID0gZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkO1xyXG4gICAgY29uc3QgYmluZGluZ1BhdGggPSBmcmFtZUNvbnRleHQudmlld01vZGVsLmJpbmRpbmdQYXRoIHx8ICcvJztcclxuICAgIGxldCBiaW5kaW5nRGF0YSA9IG51bGw7XHJcbiAgICBsZXQgY3VycmVudEl0ZW06IEJpbmRpbmdPYmplY3QgPSBudWxsO1xyXG4gICAgaWYgKGJpbmRpbmdQYXRoID09PSAnLycpIHtcclxuICAgICAgLy8g5Li76KGo55u05o6l5Y+W5b2T5YmN6KGMXHJcbiAgICAgIGN1cnJlbnRJdGVtID0gZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudEl0ZW07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyDlj5bku47ooagv5LuO5LuO6KGo5b2T5YmN6KGMXHJcbiAgICAgIGNvbnN0IHBhdGhzID0gYmluZGluZ1BhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgICAgY3VycmVudEl0ZW0gPSAoZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhLmdldFZhbHVlKHBhdGhzKSBhcyBCaW5kaW5nTGlzdCkuY3VycmVudEl0ZW07XHJcbiAgICB9XHJcbiAgICBiaW5kaW5nRGF0YSA9IGN1cnJlbnRJdGVtLnRvSlNPTigpO1xyXG4gICAgaWYgKCFjdXJyZW50SXRlbS5wcmltYXJ5S2V5VmFsdWUpIHtcclxuICAgICAgaWYgKHRoaXMuZm9ybU5vdGlmeVNlcnZpY2UpIHtcclxuICAgICAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLndhcm5pbmcodGhpcy5sYW5ndWFnZVNlcnZpY2UucGxzU2VsZWN0Q29weURhdGEsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuICAgIGNvbnN0IGlnbm9yZUZpZWxkc0FycmF5ID0gaWdub3JlRmllbGRzLnNwbGl0KCcsJykuZmlsdGVyKGl0ZW0gPT4gaXRlbSk7XHJcblxyXG4gICAgY29uc3Qgc291cmNlcyA9IG5ldyBBcnJheShyZXBlYXQpO1xyXG4gICAgcmV0dXJuIGZyb20oc291cmNlcykucGlwZShcclxuICAgICAgY29uY2F0TWFwKCgpID0+IHtcclxuICAgICAgICBsZXQgYWN0aW9uJCA9IG51bGw7XHJcbiAgICAgICAgaWYgKGJpbmRpbmdQYXRoICE9PSAnLycpIHtcclxuICAgICAgICAgIGNvbnN0IGZ1bGxQYXRoID0gdGhpcy5idWlsZFBhdGgoYmluZGluZ1BhdGgsIHByaW1hcnlWYWx1ZSk7XHJcbiAgICAgICAgICBhY3Rpb24kID0gdGhpcy5yZXBvc2l0b3J5LmFwcGVuZEJ5UGF0aChmdWxsUGF0aCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFjdGlvbiQgPSB0aGlzLnJlcG9zaXRvcnkuYXBwZW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhY3Rpb24kLnBpcGUoXHJcbiAgICAgICAgICB0YXAoKGVudGl0eTogRW50aXR5KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIOS/ruato+WunuS9k+S4u+mUrlxyXG4gICAgICAgICAgICBiaW5kaW5nRGF0YVtlbnRpdHkucHJpbWFyeUtleV0gPSBlbnRpdHkucHJpbWFyeVZhbHVlO1xyXG4gICAgICAgICAgICAvLyDlv73nlaXmjIflrprlrZfmrrVcclxuICAgICAgICAgICAgaWdub3JlRmllbGRzQXJyYXkuZm9yRWFjaCgoZmllbGQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IGV4dHJhY3RlZEZpZWxkcyA9IGZpZWxkLnNwbGl0KCcuJykuZmlsdGVyKGl0ZW0gPT4gaXRlbSk7XHJcbiAgICAgICAgICAgICAgaWYgKGV4dHJhY3RlZEZpZWxkcy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBiaW5kaW5nRGF0YVtmaWVsZF07XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGV4dHJhY3RlZEZpZWxkcy5zbGljZSgwLCAtMSkucmVkdWNlKChwcmV2LCBjdXJyZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXZbY3VycmVudF07XHJcbiAgICAgICAgICAgICAgfSwgYmluZGluZ0RhdGEpO1xyXG4gICAgICAgICAgICAgIGRlbGV0ZSBwYXJlbnRbZXh0cmFjdGVkRmllbGRzW2V4dHJhY3RlZEZpZWxkcy5sZW5ndGggLSAxXV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBiaW5kaW5nRGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIGVudGl0eS50b0pTT04oKSwgYmluZGluZ0RhdGEpO1xyXG4gICAgICAgICAgICBlbnRpdHkubG9hZChiaW5kaW5nRGF0YSwgeyBsb2FkQ2hpbGQ6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgfSksXHJcbiAgICAgICAgICBjYXRjaEVycm9yKCgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5aKe6YeP5aSa6YCJ5biu5Yqp5om56YeP6LWL5YC85biu5Yqp5ZCO5LqL5Lu2XHJcbiAgICogQHBhcmFtIGZyYW1lSWQgZnJhbWVJZFxyXG4gICAqIEBwYXJhbSBtYXBGaWVsZHMg5a2X5q615pig5bCEXHJcbiAgICogQHBhcmFtIGFzc29jaWF0ZWRGaWVsZCDlhbPogZTlrZfmrrVcclxuICAgKi9cclxuICBwdWJsaWMgYWZ0ZXJJbmNyZW1lbnRhbFNlbGVjdEhlbHBDbG9zZShmcmFtZUlkOiBzdHJpbmcsIG1hcEZpZWxkczogc3RyaW5nLCBhc3NvY2lhdGVkRmllbGQ6IHN0cmluZykge1xyXG4gICAgY29uc3Qgc2VsZjogYW55ID0gdGhpcztcclxuICAgIGNvbnN0IHJlc3VsdCA9IHNlbGYuY29udGV4dCAmJiBzZWxmLmNvbnRleHQuZXZlbnRQYXJhbSB8fCBbXTtcclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbWF4LWxpbmUtbGVuZ3RoXHJcbiAgICAvLyBjb25zdCBtYXBwaW5nID0gJ3tcImlkXCI6XCJ1c2VyUmVmLnVzZXJSZWZcIiwgXCJuYW1lXCI6XCJuYW1lXCIsIFwic2V4XCI6XCJzZXhcIixcImFnZVwiOlwidXNlclJlZi51c2VyUmVmX0FnZVwiLFwiYWRkcmVzc1wiOlwidXNlclJlZi51c2VyUmVmX0FkZHJlc3NcIixcImJpcnRoZGF5XCI6XCJ1c2VyUmVmLnVzZXJSZWZfQmlydGhkYXlcIixcImhlaWdodFwiOlwidXNlclJlZi51c2VyUmVmX0hlaWdodFwiLFwiaXNNYXJyaWVkXCI6XCJ1c2VyUmVmLnVzZXJSZWZfSXNNYXJyaWVkXCJ9JztcclxuICAgIGlmICghYXNzb2NpYXRlZEZpZWxkKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignYXNzb2NpYXRlZCBmaWVsZCBjYW5gdCBiZSBlbXB0eS4nKTtcclxuICAgIH1cclxuICAgIGlmICghbWFwRmllbGRzKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignbWFwRmllbGRzIGNhbmB0IGJlIGVtcHR5LicpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbWFwcGluZ3MgPSBKU09OLnBhcnNlKG1hcEZpZWxkcyk7XHJcbiAgICBjb25zdCBmb3JlaWduS2V5ID0gYXNzb2NpYXRlZEZpZWxkO1xyXG4gICAgLy8g5bCG6YCJ5oup5Lq65ZGY5L+d5a2Y5YiwdWlzdGF0ZeS4rVxyXG4gICAgY29uc3Qgcm9vdEZyYW1lQ29udGV4dCA9IHRoaXMudmlld01vZGVsLmZyYW1lQ29udGV4dC5yb290O1xyXG4gICAgLy8g5LiN5pivYmluZGluZ1BhdGjliJnmjIlmcmFtZUlk5aSE55CGXHJcbiAgICBsZXQgYmluZGluZ1BhdGggPSAnLyc7XHJcbiAgICBjb25zdCBhcHBDb250ZXh0ID0gdGhpcy5pbmplY3Rvci5nZXQ8QXBwQ29udGV4dD4oQXBwQ29udGV4dCwgbnVsbCk7XHJcbiAgICBpZiAoYXBwQ29udGV4dCkge1xyXG4gICAgICBjb25zdCBmcmFtZUNvbnRleHQgPSBhcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKTtcclxuICAgICAgaWYgKGZyYW1lQ29udGV4dCkge1xyXG4gICAgICAgIGJpbmRpbmdQYXRoID0gZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5iaW5kaW5nUGF0aCB8fCAnLyc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmcmFtZUlkIGlzIGludmFsaWQhJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tc3RyaW5nLWxpdGVyYWxcclxuICAgIHJvb3RGcmFtZUNvbnRleHQudWlTdGF0ZVsnc2VsZWN0aW9ucyddID0gcmVzdWx0O1xyXG4gICAgaWYgKHJlc3VsdCAmJiBBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcclxuICAgICAgLy8g5qC55o2uYmluZGluZ1BhdGjojrflj5ZiaW5kaW5nZGF0YeS4reeOsOacieaVsOaNrlxyXG4gICAgICBjb25zdCBiaW5kaW5nUGF0aHMgPSBiaW5kaW5nUGF0aC5zcGxpdCgnLycpLmZpbHRlcihpdGVtID0+IGl0ZW0pO1xyXG4gICAgICBjb25zdCBjdXJyZW50RGF0YTogQmluZGluZ0xpc3QgPSB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YS5nZXRWYWx1ZShiaW5kaW5nUGF0aHMpO1xyXG4gICAgICBjb25zdCBjdXJyZW50RGF0YUFycmF5ID0gY3VycmVudERhdGEudG9BcnJheSgpO1xyXG4gICAgICAvLyDmib7liLByZXN1bHTkuK3mnInvvIzkvYZiaW5kaW5nRGF0YeS4reayoeacieeahO+8jOS4uuW+heaWsOWinumhuVxyXG4gICAgICBjb25zdCBhcHBlbmRzID0gW107XHJcbiAgICAgIHJlc3VsdC5yZWR1Y2UoKHByZXY6IEFycmF5PGFueT4sIGl0ZW0pID0+IHtcclxuICAgICAgICBjb25zdCBpdGVtSWQgPSBpdGVtICYmIGl0ZW1bY3VycmVudERhdGEucHJpbWFyeUtleV0gfHwgbnVsbDtcclxuICAgICAgICBjb25zdCBpc0V4aXN0ID0gY3VycmVudERhdGFBcnJheS5maW5kKChiaW5kaW5nT2JqZWN0OiBCaW5kaW5nT2JqZWN0KSA9PiBiaW5kaW5nT2JqZWN0W2ZvcmVpZ25LZXldW2ZvcmVpZ25LZXldID09PSBpdGVtSWQpO1xyXG4gICAgICAgIGlmICghaXNFeGlzdCkge1xyXG4gICAgICAgICAgcHJldi5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJldjtcclxuICAgICAgfSwgYXBwZW5kcyk7XHJcblxyXG4gICAgICAvLyDmib7liLBiaW5kaW5nRGF0YeS4reacie+8jHJlc3VsdOS4reayoeacieeahO+8jOS4uuW+heWIoOmZpOmhuVxyXG4gICAgICBjb25zdCByZW1vdmVzID0gW107XHJcbiAgICAgIGN1cnJlbnREYXRhQXJyYXkucmVkdWNlKChyZXN1bHRzOiBhbnksIGl0ZW06IEJpbmRpbmdPYmplY3QpID0+IHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHJlc3VsdC5maW5kSW5kZXgoc2VsZWN0SXRlbSA9PiBzZWxlY3RJdGVtW2N1cnJlbnREYXRhLnByaW1hcnlLZXldID09PSBpdGVtW2ZvcmVpZ25LZXldW2ZvcmVpZ25LZXldKTtcclxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICByZXN1bHRzLnB1c2goaXRlbS5wcmltYXJ5S2V5VmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0cztcclxuICAgICAgfSwgcmVtb3Zlcyk7XHJcblxyXG4gICAgICAvLyBjb25zb2xlLmxvZygnYWRkSXRlbXMnLCBhcHBlbmRzLCAncmVtb3ZlSXRlbXMnLCByZW1vdmVzKTtcclxuICAgICAgLy8g6LCD55So5ZCO56uv5o6l5Y+j5paw5aKe5pWw5o2uXHJcbiAgICAgIGNvbnN0IGFkZEFjdGlvbiQgPSBmcm9tKGFwcGVuZHMpLnBpcGUoXHJcbiAgICAgICAgY29uY2F0TWFwKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoKGJpbmRpbmdQYXRoLCB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZCk7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5LmFwcGVuZEJ5UGF0aChwYXRoKS5waXBlKFxyXG4gICAgICAgICAgICB0YXAoKGVudGl0eTogRW50aXR5KSA9PiB7XHJcbiAgICAgICAgICAgICAgT2JqZWN0LmtleXMobWFwcGluZ3MpLmZvckVhY2gocHJvcCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWVCeVBhdGgoaXRlbSwgcHJvcCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZHMgPSBtYXBwaW5nc1twcm9wXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwczogYW55W10gPSBmaWVsZHMuc3BsaXQoJywnKS5maWx0ZXIocCA9PiBwKTtcclxuICAgICAgICAgICAgICAgIGdyb3Vwcy5mb3JFYWNoKGdyb3VwID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aHMgPSBncm91cC5zcGxpdCgnLicpLmZpbHRlcihwID0+IHApO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFZhbHVlQnlQYXRoKGVudGl0eSwgcGF0aHMuam9pbignLicpLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnN0IHJlbW92ZUFjdGlvbiQgPSBmcm9tKHJlbW92ZXMpLnBpcGUoXHJcbiAgICAgICAgY29uY2F0TWFwKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoKGJpbmRpbmdQYXRoLCB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZCk7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5LnJlbW92ZUJ5UGF0aChwYXRoLCBpdGVtKS5waXBlKFxyXG4gICAgICAgICAgICB0YXAoKCkgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IGJlZlJlcG9zaXRvcnk6IEJlZlJlcG9zaXRvcnk8YW55PiA9IHRoaXMucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PGFueT47XHJcbiAgICAgICAgICAgICAgYmVmUmVwb3NpdG9yeS5lbnRpdHlNYW5hZ2VyLnJlbW92ZUVudGl0eUJ5UGF0aChwYXRoLCBpdGVtKTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuICAgICAgaWYgKCFhcHBlbmRzICYmICFyZW1vdmVzIHx8IGFwcGVuZHMgJiYgYXBwZW5kcy5sZW5ndGggPCAxICYmIHJlbW92ZXMgJiYgcmVtb3Zlcy5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBjb25jYXQoYWRkQWN0aW9uJCwgcmVtb3ZlQWN0aW9uJCkucGlwZShcclxuICAgICAgICBjYXRjaEVycm9yKCgpID0+IEVNUFRZKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gIH1cclxuICAvLyB0b2RvOuaooeaLn+eUqOaIt+aTjeS9nO+8jOW+heWQjuerr+aOpeWPo+aUr+aMgeS4u+ihqOaJuemHj+aWsOWinuWQjumHjeWGmVxyXG4gIC8qKlxyXG4gICAqIOWkmumAieW4ruWKqeaJuemHj+i1i+WAvOW4ruWKqeWJjeS6i+S7tlxyXG4gICAqL1xyXG4gIHB1YmxpYyBiZWZvcmVNdWx0aVNlbGVjdEhlbHBPcGVuKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY2xlYXJIZWxwU2VsZWN0aW9ucygpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDlpJrpgInluK7liqnmibnph4/otYvlgLzluK7liqnlkI7kuovku7ZcclxuICAgKiBAcGFyYW0gZnJhbWVJZCDnu5Hlrprot6/lvoRcclxuICAgKiBAcGFyYW0gbWFwRmllbGRzIOWtl+auteaYoOWwhFxyXG4gICAqIEBwYXJhbSBjb21tYW5kRnJhbWVJZCDlm57osIPlkb3ku6TmiYDlnKhmcmFtZUlkXHJcbiAgICogQHBhcmFtIGNvbW1hbmROYW1lIOWbnuiwg+WRveS7pFxyXG4gICAqIEBkZXByZWNhdGVkIOaooeaLn+eUqOaIt+aTjeS9nO+8jOW+heaJuemHj+i1i+WAvOaUr+aMgeS4u+ihqOWQjuW6n+W8g1xyXG4gICAqL1xyXG4gIHB1YmxpYyBhZnRlck11bHRpU2VsZWN0SGVscENsb3NlKGZyYW1lSWQ6IHN0cmluZywgbWFwRmllbGRzOiBzdHJpbmcsIGNvbW1hbmRGcmFtZUlkPzogc3RyaW5nLCBjb21tYW5kTmFtZT86IHN0cmluZykge1xyXG4gICAgY29uc3Qgc2VsZjogYW55ID0gdGhpcztcclxuICAgIGNvbnN0IHJlc3VsdCA9IHNlbGYuY29udGV4dCAmJiBzZWxmLmNvbnRleHQuZXZlbnRQYXJhbSB8fCBbXTtcclxuICAgIGlmIChyZXN1bHQgJiYgQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XHJcbiAgICAgIC8vIOiwg+eUqOWQjuerr+aOpeWPo+aWsOWinuaVsOaNrlxyXG4gICAgICBpZiAoIXJlc3VsdCB8fCByZXN1bHQubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLm9uSGVscENsb3NlLm5leHQoeyBmcmFtZUlkLCBtYXBGaWVsZHMsIGRhdGE6IHJlc3VsdCwgY29tbWFuZEZyYW1lSWQsIGNvbW1hbmROYW1lIH0pO1xyXG4gICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAgKiDluK7liqnlhbPpl63lkI7lpITnkIblmahcclxuICAgICogQHBhcmFtIGZyYW1lSWQgZnJhbWVpZFxyXG4gICAgKiBAcGFyYW0gbWFwRmllbGRzIG1hcEZpZWxkc1xyXG4gICAgKiBAcGFyYW0gcmVzdWx0IOW4ruWKqeaVsOaNrue7k+aenFxyXG4gICAgKi9cclxuICBwcml2YXRlIG9uSGVscENsb3NlSGFuZGxlcihmcmFtZUlkOiBzdHJpbmcsIG1hcEZpZWxkczogc3RyaW5nLCByZXN1bHQ6IGFueVtdKSB7XHJcbiAgICBpZiAoIW1hcEZpZWxkcykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcEZpZWxkcyBjYW5gdCBiZSBlbXB0eS4nKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG1hcHBpbmdzID0gSlNPTi5wYXJzZShtYXBGaWVsZHMpO1xyXG4gICAgLy8g5LiN5pivYmluZGluZ1BhdGjliJnmjIlmcmFtZUlk5aSE55CGXHJcbiAgICBsZXQgYmluZGluZ1BhdGggPSAnLyc7XHJcbiAgICBjb25zdCBhcHBDb250ZXh0ID0gdGhpcy5pbmplY3Rvci5nZXQ8QXBwQ29udGV4dD4oQXBwQ29udGV4dCwgbnVsbCk7XHJcbiAgICBpZiAoYXBwQ29udGV4dCkge1xyXG4gICAgICBjb25zdCBmcmFtZUNvbnRleHQgPSBhcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKTtcclxuICAgICAgaWYgKGZyYW1lQ29udGV4dCkge1xyXG4gICAgICAgIGJpbmRpbmdQYXRoID0gZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5iaW5kaW5nUGF0aCB8fCAnLyc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmcmFtZUlkIGlzIGludmFsaWQhJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIOWwhumAieaLqeS6uuWRmOS/neWtmOWIsHVpc3RhdGXkuK1cclxuICAgIGNvbnN0IHJvb3RGcmFtZUNvbnRleHQgPSB0aGlzLnZpZXdNb2RlbC5mcmFtZUNvbnRleHQucm9vdDtcclxuICAgIGNvbnN0IGJlZlJlcG9zaXRvcnkgPSB0aGlzLnJlcG9zaXRvcnkgYXMgQmVmUmVwb3NpdG9yeTxhbnk+O1xyXG4gICAgY29uc3QgYmluZGluZ1BhdGhzID0gYmluZGluZ1BhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tc3RyaW5nLWxpdGVyYWxcclxuICAgIHJvb3RGcmFtZUNvbnRleHQudWlTdGF0ZVsnc2VsZWN0aW9ucyddID0gcmVzdWx0O1xyXG4gICAgaWYgKHJlc3VsdCAmJiBBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcclxuICAgICAgY29uc3QgYWRkQWN0aW9uJCA9IGZyb20ocmVzdWx0KS5waXBlKFxyXG4gICAgICAgIGNvbmNhdE1hcChpdGVtID0+IHtcclxuICAgICAgICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gYmVmUmVwb3NpdG9yeS5yZXN0U2VydmljZS5idWlsZFJlcXVlc3RJbmZvKCk7XHJcbiAgICAgICAgICBpZiAoYmluZGluZ1BhdGhzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuYnVpbGRQYXRoKGJpbmRpbmdQYXRoLCB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZCk7XHJcbiAgICAgICAgICAgIHJldHVybiBiZWZSZXBvc2l0b3J5LnJlc3RTZXJ2aWNlLmNyZWF0ZUJ5UGF0aChwYXRoLCByZXF1ZXN0SW5mbykucGlwZShcclxuICAgICAgICAgICAgICB0YXAoKHJlc3BvbnNlSW5mbzogUmVzcG9uc2VJbmZvKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2VJbmZvLnJldHVyblZhbHVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3RW50aXR5ID0gYmVmUmVwb3NpdG9yeS5lbnRpdHlNYW5hZ2VyLmFwcGVuZEVudGl0eUJ5UGF0aChwYXRoLCBkYXRhLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG1hcHBpbmdzKS5mb3JFYWNoKHByb3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWVCeVBhdGgoaXRlbSwgcHJvcCk7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IG1hcHBpbmdzW3Byb3BdO1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCBncm91cHM6IGFueVtdID0gZmllbGRzLnNwbGl0KCcsJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAgICAgICAgICAgICAgIGdyb3Vwcy5mb3JFYWNoKGdyb3VwID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRocyA9IGdyb3VwLnNwbGl0KCcuJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZUJ5UGF0aChuZXdFbnRpdHksIHBhdGhzLmpvaW4oJy4nKSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0VudGl0eTtcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJlZlJlcG9zaXRvcnkucmVzdFNlcnZpY2UuY3JlYXRlKG51bGwsIHJlcXVlc3RJbmZvKS5waXBlKFxyXG4gICAgICAgICAgICAgIHRhcCgocmVzcG9uc2VJbmZvOiBSZXNwb25zZUluZm8pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZUluZm8ucmV0dXJuVmFsdWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdFbnRpdHkgPSB0aGlzLnJlcG9zaXRvcnkuYnVpbGRFbnRpdHkoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhtYXBwaW5ncykuZm9yRWFjaChwcm9wID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldFZhbHVlQnlQYXRoKGl0ZW0sIHByb3ApO1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCBmaWVsZHMgPSBtYXBwaW5nc1twcm9wXTtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgZ3JvdXBzOiBhbnlbXSA9IGZpZWxkcy5zcGxpdCgnLCcpLmZpbHRlcihwID0+IHApO1xyXG4gICAgICAgICAgICAgICAgICBncm91cHMuZm9yRWFjaChncm91cCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aHMgPSBncm91cC5zcGxpdCgnLicpLmZpbHRlcihwID0+IHApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVCeVBhdGgobmV3RW50aXR5LCBwYXRocy5qb2luKCcuJyksIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmFkZEVudGl0eShuZXdFbnRpdHkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0VudGl0eTtcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgICAgIC8vIGNvbnN0IGZvcm1Mb2FkaW5nU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0PEZvcm1Mb2FkaW5nU2VydmljZT4oRm9ybUxvYWRpbmdTZXJ2aWNlLCBudWxsKTtcclxuICAgICAgaWYgKHRoaXMuZm9ybUxvYWRpbmdTZXJ2aWNlKSB7XHJcbiAgICAgICAgdGhpcy5zdXNwZW5kRnJhbWVDb250ZXh0RXZlbnQoZnJhbWVJZCk7XHJcbiAgICAgICAgdGhpcy5mb3JtTG9hZGluZ1NlcnZpY2Uuc2hvdygpO1xyXG4gICAgICAgIHRoaXMuZm9ybUxvYWRpbmdTZXJ2aWNlLnNldFN1c3BlbmQodHJ1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGFkZEFjdGlvbiQucGlwZShcclxuICAgICAgICBsYXN0KCksXHJcbiAgICAgICkucGlwZShcclxuICAgICAgICBzd2l0Y2hNYXAoKCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgcHJpbWFyeVZhbHVlID0gdGhpcy52aWV3TW9kZWwuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQ7XHJcbiAgICAgICAgICBpZiAocHJpbWFyeVZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBiZWZSZXBvc2l0b3J5LnVwZGF0ZUNoYW5nZXNCeUlkKHByaW1hcnlWYWx1ZSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmZvcm1Mb2FkaW5nU2VydmljZSkge1xyXG4gICAgICAgICAgdGhpcy5yZXN1bWVGcmFtZUNvbnRleHRFdmVudChmcmFtZUlkKTtcclxuICAgICAgICAgIHRoaXMuZm9ybUxvYWRpbmdTZXJ2aWNlLnNldFN1c3BlbmQoZmFsc2UpO1xyXG4gICAgICAgICAgdGhpcy5mb3JtTG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmZvcm1Mb2FkaW5nU2VydmljZSkge1xyXG4gICAgICAgICAgdGhpcy5yZXN1bWVGcmFtZUNvbnRleHRFdmVudChmcmFtZUlkKTtcclxuICAgICAgICAgIHRoaXMuZm9ybUxvYWRpbmdTZXJ2aWNlLnNldFN1c3BlbmQoZmFsc2UpO1xyXG4gICAgICAgICAgdGhpcy5mb3JtTG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgfVxyXG4gIHByaXZhdGUgc3VzcGVuZEZyYW1lQ29udGV4dEV2ZW50KGZyYW1lSWQ6IHN0cmluZykge1xyXG4gICAgY29uc3QgYXBwQ29udGV4dCA9IHRoaXMuaW5qZWN0b3IuZ2V0PEFwcENvbnRleHQ+KEFwcENvbnRleHQsIG51bGwpO1xyXG4gICAgaWYgKGFwcENvbnRleHQpIHtcclxuICAgICAgY29uc3QgZnJhbWVDb250ZXh0ID0gYXBwQ29udGV4dC5mcmFtZUNvbnRleHRNYW5hZ2VyLmdldEZyYW1lQ29udGV4dEJ5SWQoZnJhbWVJZCk7XHJcbiAgICAgIGZyYW1lQ29udGV4dC5zdXNwZW5kID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcbiAgcHJpdmF0ZSByZXN1bWVGcmFtZUNvbnRleHRFdmVudChmcmFtZUlkOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGFwcENvbnRleHQgPSB0aGlzLmluamVjdG9yLmdldDxBcHBDb250ZXh0PihBcHBDb250ZXh0LCBudWxsKTtcclxuICAgIGlmIChhcHBDb250ZXh0KSB7XHJcbiAgICAgIGNvbnN0IGZyYW1lQ29udGV4dCA9IGFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQpO1xyXG4gICAgICBmcmFtZUNvbnRleHQuc3VzcGVuZCA9IGZhbHNlO1xyXG4gICAgICBmcmFtZUNvbnRleHQuYXBwQ29udGV4dC5tZXNzYWdlUGlwZS5uZXh0KCdiaW5kRGF0YScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8jZW5kcmVnaW9uXHJcbiAgcHJpdmF0ZSBzZXRWYWx1ZUJ5UGF0aCh0YXJnZXQ6IG9iamVjdCwgcGF0aDogc3RyaW5nLCB2YWx1ZTogYW55KSB7XHJcbiAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgIGNvbnN0IHBhdGhzID0gcGF0aC5zcGxpdCgnLicpO1xyXG4gICAgICBpZiAocGF0aHMubGVuZ3RoIDw9IDEpIHtcclxuICAgICAgICB0YXJnZXRbcGF0aF0gPSB2YWx1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwYXRocy5zbGljZSgwLCAtMSkucmVkdWNlKChwcmV2LCBwYXRoKSA9PiB7XHJcbiAgICAgICAgICBpZiAoIShwcmV2Lmhhc093blByb3BlcnR5KHBhdGgpIHx8IHByZXZbJ19fcHJvdG9fXyddLmhhc093blByb3BlcnR5KHBhdGgpKSkge1xyXG4gICAgICAgICAgICBwcmV2W3BhdGhdID0ge307XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gcHJldltwYXRoXTtcclxuICAgICAgICB9LCB0YXJnZXQpW3BhdGhzW3BhdGhzLmxlbmd0aCAtIDFdXSA9IHZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0VmFsdWVCeVBhdGgodGFyZ2V0OiBvYmplY3QsIHBhdGg6IHN0cmluZykge1xyXG4gICAgY29uc3QgcGF0aHMgPSBwYXRoLnNwbGl0KCcuJyk7XHJcbiAgICBpZiAocGF0aHMubGVuZ3RoIDwgMSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAocGF0aHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIHJldHVybiB0YXJnZXRbcGF0aF07XHJcbiAgICB9XHJcbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcclxuICAgIHBhdGhzLmZvckVhY2goKHByb3AsIGluZGV4KSA9PiB7XHJcbiAgICAgIGlmIChpbmRleCA9PT0gMCkge1xyXG4gICAgICAgIHJlc3VsdCA9IHRhcmdldCAmJiB0YXJnZXRbcHJvcF0gfHwgbnVsbDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXN1bHQgPSByZXN1bHQgJiYgcmVzdWx0W3Byb3BdIHx8IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5a2Q6KGo6Lev5b6EXHJcbiAgICogQHBhcmFtIGJpbmRpbmdQYXRoIOe7keWumui3r+W+hFxyXG4gICAqIEBwYXJhbSBpZCBpZFxyXG4gICAqL1xyXG4gIHByaXZhdGUgYnVpbGRQYXRoKGJpbmRpbmdQYXRoOiBzdHJpbmcsIGlkOiBhbnkpIHtcclxuICAgIGxldCBwYXRoID0gJy8nICsgaWQ7XHJcbiAgICBjb25zdCBzdWJQYXRocyA9IGJpbmRpbmdQYXRoLnNwbGl0KCcvJyk7XHJcbiAgICBpZiAoc3ViUGF0aHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAvLyBlZzpiaW5kaW5nUGF0aOW9ouWmgi9lZHVzL2dyYWRlcyxzcGxpdOWQjuaYr1snJywgJ2VkdXMnLCAnZ3JhZGVzJ11cclxuICAgICAgLy8g5Zug5q2kaW5kZXjku44x5byA5aeLXHJcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMTsgaW5kZXggPCBzdWJQYXRocy5sZW5ndGggLSAxOyBpbmRleCsrKSB7XHJcbiAgICAgICAgY29uc3Qgc3ViUGF0aCA9IHN1YlBhdGhzW2luZGV4XTtcclxuICAgICAgICBjb25zdCBzdWJEYXRhID0gdGhpcy52aWV3TW9kZWwuYmluZGluZ0RhdGFbc3ViUGF0aF07XHJcbiAgICAgICAgaWYgKCFzdWJEYXRhIHx8ICFzdWJEYXRhLmN1cnJlbnRJZCkge1xyXG4gICAgICAgICAgdGhyb3cgRXJyb3IoYOiOt+WPluWtkOihqOWujOaVtOi3r+W+hOWHuumUme+8jOaJvuS4jeWIsCR7c3ViRGF0YX3lr7nlupTnmoTlrZDooajvvIzmiJblr7nlupTlrZDooajmsqHmnInlvZPliY3ooYzjgIJgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGF0aCArPSBgLyR7c3ViUGF0aH0vJHtzdWJEYXRhLmN1cnJlbnRJZH1gO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBwYXRoICs9ICcvJyArIHN1YlBhdGhzW3N1YlBhdGhzLmxlbmd0aCAtIDFdO1xyXG5cclxuICAgIHJldHVybiBwYXRoO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5bnu5Hlrprot6/lvoTnmoTlvZPliY3ooYzmlbDnu4RcclxuICAgKiBAcGFyYW0gYmluZGluZ1BhdGggYmluZGluZ1BhdGhcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwcml2YXRlIGJ1aWxkSWRzKGJpbmRpbmdQYXRoOiBzdHJpbmcpOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBiaW5kaW5nUGF0aHMgPSBiaW5kaW5nUGF0aC5zcGxpdCgnLycpLmZpbHRlcihwID0+IHApO1xyXG4gICAgY29uc3QgcHJpbWFyeVZhbHVlID0gdGhpcy52aWV3TW9kZWwuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQ7XHJcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgIGNvbnN0IHBhdGhzID0gW107XHJcbiAgICBpZiAoYmluZGluZ1BhdGhzLmxlbmd0aCA+IDApIHtcclxuICAgICAgcmVzdWx0LnB1c2gocHJpbWFyeVZhbHVlKTtcclxuICAgICAgLy8g5LuO6KGo5oiW5LuO5LuO6KGo6KaB5aSN5Yi255qE6KGM5LiN5LiA5a6a5piv5b2T5YmN6KGM77yM55So5oi35Y+v5Lul5oyH5a6aXHJcbiAgICAgIGJpbmRpbmdQYXRocy5wb3AoKTtcclxuICAgICAgYmluZGluZ1BhdGhzLmZvckVhY2goKHBhdGg6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIHBhdGhzLnB1c2gocGF0aCk7XHJcbiAgICAgICAgY29uc3QgYmluZGluZ0xpc3QgPSB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YS5nZXRWYWx1ZShwYXRocykgYXMgQmluZGluZ0xpc3Q7XHJcbiAgICAgICAgaWYgKGJpbmRpbmdMaXN0KSB7XHJcbiAgICAgICAgICByZXN1bHQucHVzaChiaW5kaW5nTGlzdC5jdXJyZW50SWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuICBwcml2YXRlIHVwZGF0ZUJpbmRpbmdEYXRhKGlucHV0OiBhbnksIGlkczogQXJyYXk8YW55Pikge1xyXG4gICAgY29uc3QgeyBjb250cm9sVHlwZSA9IG51bGwsIHZhbHVlID0gbnVsbCwgb3B0aW9ucyA9IHt9LCBkYXRhVHlwZSA9IG51bGwgfSA9IGlucHV0IHx8IHt9O1xyXG4gICAgaWYgKGNvbnRyb2xUeXBlKSB7XHJcbiAgICAgIC8vIOWvueW4ruWKqeWBmueJueauiuWkhOeQhlxyXG4gICAgICBpZiAoY29udHJvbFR5cGUgPT09ICdsb29rdXAnIHx8IGNvbnRyb2xUeXBlID09PSAnY29tYm8tbG9va3VwJykge1xyXG4gICAgICAgIGNvbnN0IG1hcEZpZWxkcyA9IG9wdGlvbnMubWFwRmllbGRzO1xyXG4gICAgICAgIHRoaXMudXBkYXRlTG9va3VwRmllbGQoaWRzLCB2YWx1ZSwgbWFwRmllbGRzKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZVNpbXBsZUZpZWxkKGlkcywgdmFsdWUsIGlucHV0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBwcml2YXRlIHVwZGF0ZVNpbXBsZUZpZWxkKGlkczogQXJyYXk8YW55PiwgdmFsdWU6IGFueSwgY29sdW1uOiBhbnkpIHtcclxuICAgIGlmICghY29sdW1uKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGN1cnJlbnRDb2x1bW5UeXBlID0gY29sdW1uLmRhdGFUeXBlO1xyXG4gICAgLy8g5a2Y5Zyo6KGM57yW6L6R5ZmoXHJcbiAgICBsZXQgcmVzdWx0ID0gdmFsdWU7XHJcbiAgICBpZiAoY3VycmVudENvbHVtblR5cGUgPT09ICdkYXRlJykge1xyXG4gICAgICBsZXQgZGF0ZVN0ciA9IHRoaXMuZGF0ZVNlcnZpY2UuZm9ybWF0VG8odmFsdWUsICd5eXl5LU1NLWRkJyk7XHJcbiAgICAgIGlmICghZGF0ZVN0cikge1xyXG4gICAgICAgIGRhdGVTdHIgPSAnMDAwMS0wMS0wMVQwMDowMDowMCc7XHJcbiAgICAgIH1cclxuICAgICAgcmVzdWx0ID0gZGF0ZVN0cjtcclxuICAgIH0gZWxzZSBpZiAoY3VycmVudENvbHVtblR5cGUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgIHJlc3VsdCA9IE51bWJlcih2YWx1ZSkgfHwgMDtcclxuICAgIH1cclxuICAgIGNvbnN0IGZpZWxkID0gY29sdW1uLmZpZWxkO1xyXG4gICAgaWRzLmZvckVhY2goaWQgPT4ge1xyXG4gICAgICB0aGlzLnVwZGF0ZUJpbmRpbmdMaXN0KGlkLCBmaWVsZCwgcmVzdWx0KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBwcml2YXRlIHVwZGF0ZUxvb2t1cEZpZWxkKGlkczogQXJyYXk8YW55PiwgaGVscERhdGE6IGFueSwgbWFwRmllbGRzOiBhbnkpIHtcclxuICAgIGlmICghbWFwRmllbGRzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBoZWxwRmllbGRzID0gT2JqZWN0LmtleXMobWFwRmllbGRzKTtcclxuICAgIGNvbnN0IGlkSW5kZXggPSBoZWxwRmllbGRzLmZpbmRJbmRleChpdGVtID0+IGl0ZW0gPT09ICdpZCcpO1xyXG4gICAgaWYgKGhlbHBGaWVsZHMuaW5jbHVkZXMoJ2lkJykgJiYgaWRJbmRleCAhPT0gMCkge1xyXG4gICAgICBoZWxwRmllbGRzLnNwbGljZShpZEluZGV4LCAxKTtcclxuICAgICAgaGVscEZpZWxkcyA9IFsnaWQnLCAuLi5oZWxwRmllbGRzXTtcclxuICAgIH1cclxuICAgIGhlbHBGaWVsZHMuZm9yRWFjaCgoaGVscEZpZWxkOiBhbnkpID0+IHtcclxuICAgICAgbGV0IGhlbHBWYWx1ZTogYW55ID0gJyc7XHJcbiAgICAgIGlmIChoZWxwRGF0YSkge1xyXG4gICAgICAgIGlmIChoZWxwRGF0YSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICBoZWxwVmFsdWUgPSBoZWxwRGF0YS5tYXAoKGl0ZW06IGFueSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZShoZWxwRmllbGQsIGl0ZW0pO1xyXG4gICAgICAgICAgfSkuam9pbignLCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBoZWxwVmFsdWUgPSB0aGlzLmdldFZhbHVlKGhlbHBGaWVsZCwgaGVscERhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZHMuZm9yRWFjaChpZCA9PiB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVCaW5kaW5nTGlzdChpZCwgbWFwRmllbGRzW2hlbHBGaWVsZF0sIGhlbHBWYWx1ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHByaXZhdGUgdXBkYXRlQmluZGluZ0xpc3QocHJpbWFyeVZhbHVlOiBhbnksIHByb3BlcnR5TmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XHJcbiAgICBjb25zdCB2aWV3TW9kZWwgPSB0aGlzLnZpZXdNb2RlbCB8fCBudWxsO1xyXG4gICAgaWYgKCF2aWV3TW9kZWwgfHwgIXByb3BlcnR5TmFtZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyDmm7TmlrDkuLvooajpg6jliIbooYznmoTlrZfmrrVcclxuICAgIGNvbnN0IHByb3BlcnR5TmFtZXMgPSBwcm9wZXJ0eU5hbWUuc3BsaXQoJy4nKS5maWx0ZXIoaXRlbSA9PiBpdGVtKTtcclxuICAgIGNvbnN0IGJpbmRpbmdPYmplY3QgPSB0aGlzLmJpbmRpbmdMaXN0LmZpbmRCeUlkKHByaW1hcnlWYWx1ZSk7XHJcblxyXG4gICAgaWYgKHByb3BlcnR5TmFtZXMubGVuZ3RoIDwgMikge1xyXG4gICAgICBiaW5kaW5nT2JqZWN0LnNldFZhbHVlKHByb3BlcnR5TmFtZSwgdmFsdWUsIHRydWUsIHRydWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGV0IHRhcmdldEJpbmRpbmdPYmplY3QgPSBudWxsO1xyXG4gICAgICBjb25zdCBmcGF0aHMgPSBwcm9wZXJ0eU5hbWVzLnNsaWNlKDAsIHByb3BlcnR5TmFtZXMubGVuZ3RoIC0gMSk7XHJcbiAgICAgIGNvbnN0IHRhcmdldFByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZXNbcHJvcGVydHlOYW1lcy5sZW5ndGggLSAxXTtcclxuICAgICAgZnBhdGhzLmZvckVhY2gocHJvcCA9PiB7XHJcbiAgICAgICAgdGFyZ2V0QmluZGluZ09iamVjdCA9IHRhcmdldEJpbmRpbmdPYmplY3QgJiYgdGFyZ2V0QmluZGluZ09iamVjdFtwcm9wXSB8fCBiaW5kaW5nT2JqZWN0W3Byb3BdO1xyXG4gICAgICB9KTtcclxuICAgICAgLy8gdG9kbzrpnIDopoHmt7vliqDlgLzlj5jljJbkuovku7ZcclxuICAgICAgdGFyZ2V0QmluZGluZ09iamVjdC5zZXRWYWx1ZSh0YXJnZXRQcm9wZXJ0eU5hbWUsIHZhbHVlLCB0cnVlLCB0cnVlKTtcclxuICAgIH1cclxuICB9XHJcbiAgcHJpdmF0ZSBnZXRCaW5kaW5nUGF0aEFycmF5KCk6IGFueVtdIHtcclxuICAgIGNvbnN0IHBhdGggPSB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nUGF0aDtcclxuICAgIGlmIChwYXRoKSB7XHJcbiAgICAgIHJldHVybiBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKG4gPT4gbiAhPT0gJycpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuICBwcml2YXRlIGdldFZhbHVlKGY6IHN0cmluZywgZGF0YTogYW55KSB7XHJcbiAgICBsZXQgdmFsID0gJyc7XHJcbiAgICBpZiAoZi5pbmRleE9mKCcuJykgPT09IC0xKSB7XHJcbiAgICAgIHZhbCA9IGRhdGFbZl07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YWwgPSBmLnNwbGl0KCcuJykucmVkdWNlKChhLCBiKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGFbYl07XHJcbiAgICAgIH0sIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2YWw7XHJcbiAgfVxyXG4gIHByb3RlY3RlZCBnZXQgYmluZGluZ0xpc3QoKTogQmluZGluZ0xpc3Qge1xyXG4gICAgLy8g5qC55a6e5L2TXHJcbiAgICBpZiAodGhpcy52aWV3TW9kZWwuYmluZGluZ1BhdGggPT09ICcvJyB8fCAhdGhpcy52aWV3TW9kZWwuYmluZGluZ1BhdGgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmlld01vZGVsLmJpbmRpbmdEYXRhLmxpc3Q7XHJcbiAgICB9XHJcbiAgICAvLyDlrZDlrp7kvZNcclxuICAgIGxldCBiaW5kaW5nUGF0aCA9IHRoaXMudmlld01vZGVsLmJpbmRpbmdQYXRoLnN1YnN0cigxKTtcclxuICAgIGJpbmRpbmdQYXRoID0gYmluZGluZ1BhdGhbMF0udG9Mb3dlckNhc2UoKSArIGJpbmRpbmdQYXRoLnN1YnN0cmluZygxLCBiaW5kaW5nUGF0aC5sZW5ndGgpO1xyXG4gICAgY29uc3QgcGF0aHMgPSBiaW5kaW5nUGF0aC5zcGxpdCgnLycpO1xyXG5cclxuICAgIGNvbnN0IGZpbHRlcmVkUGF0aHMgPSBwYXRocy5maWx0ZXIoKHBhcnQ6IHN0cmluZykgPT4ge1xyXG4gICAgICByZXR1cm4gcGFydCAhPT0gJyc7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YS5nZXRWYWx1ZShmaWx0ZXJlZFBhdGhzKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5qC55o2u5pig5bCE5bCG5pWw5o2u6LWL5YC857uZYmluZGluZ0RhdGFcclxuICAgKiBAcGFyYW0gZGF0YSBcclxuICAgKiBAcGFyYW0gbWFwRmllbGRzIFxyXG4gICAqIEBwYXJhbSBiaW5kaW5nRGF0YSBcclxuICAgKi9cclxuICBwcml2YXRlIG1hcHBpbmdSb3coZGF0YTogYW55LCBtYXBGaWVsZHM6IGFueSwgZW50aXR5OiBFbnRpdHksIGJpbmRpbmdQYXRoOiBzdHJpbmcpIHtcclxuICAgIE9iamVjdC5rZXlzKG1hcEZpZWxkcykuZm9yRWFjaCgocHJvcDogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRWYWx1ZUJ5UGF0aChkYXRhLCBwcm9wKTtcclxuICAgICAgY29uc3QgZmllbGRzID0gbWFwRmllbGRzW3Byb3BdO1xyXG4gICAgICBjb25zdCBncm91cHM6IGFueVtdID0gZmllbGRzLnNwbGl0KCcsJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAgIGdyb3Vwcy5mb3JFYWNoKGdyb3VwID0+IHtcclxuICAgICAgICBjb25zdCBwYXRocyA9IGdyb3VwLnNwbGl0KCcuJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAgICAgdGhpcy5zZXRWYWx1ZUJ5UGF0aChlbnRpdHksIHBhdGhzLmpvaW4oJy4nKSwgdmFsdWUpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDpgJrov4dmcmFtZUlk6I635Y+W5a+55bqU55qE57uE5Lu25LiK5LiL5paHXHJcbiAgICogQHBhcmFtIGZyYW1lSWQgZnJhbWVJZFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkOiBzdHJpbmcpOiBGcmFtZUNvbnRleHQgfCBudWxsIHtcclxuICAgIGlmICghZnJhbWVJZCkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGNvbnN0IGFwcENvbnRleHQgPSB0aGlzLmluamVjdG9yLmdldDxBcHBDb250ZXh0PihBcHBDb250ZXh0LCBudWxsKTtcclxuICAgIGxldCBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCA9IG51bGw7XHJcbiAgICBpZiAoYXBwQ29udGV4dCkge1xyXG4gICAgICBmcmFtZUNvbnRleHQgPSBhcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmcmFtZUNvbnRleHQ7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0RW50aXR5QnlQYXRoKGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LCBiaW5kaW5nUGF0aHM6IGFueVtdLCBjdXJyZW50SWQ6IHN0cmluZykge1xyXG4gICAgYmluZGluZ1BhdGhzID0gWy4uLmJpbmRpbmdQYXRoc107XHJcbiAgICBjb25zdCBpZCA9IGZyYW1lQ29udGV4dC5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZDtcclxuICAgIGNvbnN0IGVudGl0eTogRW50aXR5ID0gZnJhbWVDb250ZXh0LnJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi5nZXRFbnRpdHlCeUlkKGlkKSBhcyBFbnRpdHk7XHJcbiAgICBsZXQgaXRlbTogRW50aXR5ID0gZW50aXR5O1xyXG4gICAgY29uc3QgcGF0aHMgPSBbXTtcclxuICAgIGNvbnN0IHRhaWxQYXRoID0gYmluZGluZ1BhdGhzLnBvcCgpO1xyXG4gICAgY29uc3QgcGFyZW50ID0gYmluZGluZ1BhdGhzLnJlZHVjZSgob2JqZWN0OiBFbnRpdHksIHBhdGg6IHN0cmluZykgPT4ge1xyXG4gICAgICBwYXRocy5wdXNoKHBhdGgpO1xyXG4gICAgICBpZiAob2JqZWN0ICYmIChvYmplY3QuaGFzT3duUHJvcGVydHkocGF0aCkgfHwgb2JqZWN0WydfX3Byb3RvX18nXS5oYXNPd25Qcm9wZXJ0eShwYXRoKSkpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IG9iamVjdFtwYXRoXTtcclxuICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBFbnRpdHlMaXN0KSB7XHJcbiAgICAgICAgICBjb25zdCBiaW5kaW5nTGlzdCA9IGZyYW1lQ29udGV4dC5iaW5kaW5nRGF0YS5nZXRWYWx1ZShwYXRocykgYXMgQmluZGluZ0xpc3Q7XHJcbiAgICAgICAgICBjb25zdCBjdXJyZW50SXRlbUlkID0gYmluZGluZ0xpc3QuY3VycmVudElkO1xyXG4gICAgICAgICAgcmV0dXJuIHZhbHVlLmdldChjdXJyZW50SXRlbUlkKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfSwgaXRlbSk7XHJcbiAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgRW50aXR5KSB7XHJcbiAgICAgIGNvbnN0IGxpc3QgPSBwYXJlbnRbdGFpbFBhdGhdIGFzIEVudGl0eUxpc3Q8YW55PjtcclxuICAgICAgaWYgKGxpc3QpIHtcclxuICAgICAgICByZXR1cm4gbGlzdC5nZXQoY3VycmVudElkKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYOaXoOaViOeahGJpbmRpbmdQYXRoLmApO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYOaXoOaViOeahGJpbmRpbmdQYXRoLmApO1xyXG4gICAgfVxyXG4gIH1cclxuICBwcml2YXRlIGVuZEVkaXQoZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQpIHtcclxuICAgIGNvbnN0IGFwcENvbnRleHQ6IEFwcENvbnRleHQgPSBmcmFtZUNvbnRleHQgJiYgZnJhbWVDb250ZXh0LmdldEZvcm1BcHBDb250ZXh0KCk7XHJcbiAgICByZXR1cm4gb2YobnVsbCkucGlwZShcclxuICAgICAgdGFwKCgpID0+IHtcclxuICAgICAgICBpZiAoYXBwQ29udGV4dCkge1xyXG4gICAgICAgICAgYXBwQ29udGV4dC5tZXNzYWdlUGlwZS5uZXh0KHsgdHlwZTogJ2VuZEVkaXQnIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSksXHJcbiAgICAgIC8vIHRvZG86IOS4jeW6lOivpeS9v+eUqGRlbGF577yM5bqU6K+l5Liy5rWBXHJcbiAgICAgIGRlbGF5KDUpXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=