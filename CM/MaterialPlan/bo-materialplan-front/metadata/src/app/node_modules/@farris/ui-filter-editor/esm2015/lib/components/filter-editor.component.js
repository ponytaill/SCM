/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @Company: Inspur
 * @Version: v0.0.1
 * @Date: 2019-04-09 11:03:49
 * @LastEditTime: 2019-11-30 10:15:14
 */
import { Component, HostBinding, Input, Output, EventEmitter, Injector, Optional } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { FilterService } from './../services/filter.service';
import { Compare } from '@farris/ui-common/types';
import { LocaleService } from '@farris/ui-locale';
export class FilterEditorComponent {
    /**
     * @param {?} sanitizer
     * @param {?} filterService
     * @param {?} injector
     */
    constructor(sanitizer, filterService, injector) {
        this.sanitizer = sanitizer;
        this.filterService = filterService;
        this.injector = injector;
        this.tabIndex = 0;
        this.columns = [];
        this.conditions = [];
        this.showCode = false;
        this.showSql = false;
        this.enableExpress = false;
        this.enableFrontExpress = false;
        this.fieldEditor = { type: 'select', options: {} };
        this.insertType = 'below';
        this.showExpress = new EventEmitter();
        this.cls = 'f-utils-flex-column f-utils-absolute-all';
        this.localeService = null;
        this.filterService.conditionsChanged.subscribe((/**
         * @param {?} conditionList
         * @return {?}
         */
        conditionList => {
            this.conditions = conditionList;
        }));
        if (this.injector) {
            this.localeService = this.injector.get(LocaleService, null);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.conditions && this.conditions.length) {
            this.conditions = this.conditions.map((/**
             * @param {?} con
             * @return {?}
             */
            con => {
                /** @type {?} */
                const cp = parseInt('' + con.compare, 10);
                if (cp === Compare.In || cp === Compare.NotIn) {
                    con.value = con.value.replace(/\r\n/g, ',');
                }
                return con;
            }));
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    onTabChange(index) {
        this.tabIndex = index;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onShowExpress($event) {
        this.showExpress.emit($event);
    }
    /**
     * @return {?}
     */
    validation() {
        return this.filterService.isValid(this.conditions, this.localeService);
    }
}
FilterEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-editor',
                template: `
        <filter-tabs
            class="f-utils-fill-flex-column"
            [showCode]="showCode"
            [showSql]="showSql"
            [columns]="columns"
            [height]="height"
            [enableExpress]="enableExpress"
            [enableFrontExpress]="enableFrontExpress"
            [conditions]="conditions"
            [fieldEditor]="fieldEditor"
            (showExpress)="onShowExpress($event)"
            (selectTabChange)="onTabChange($event)"
            [insertType]="insertType">
        </filter-tabs>
    `
            }] }
];
/** @nocollapse */
FilterEditorComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: FilterService },
    { type: Injector, decorators: [{ type: Optional }] }
];
FilterEditorComponent.propDecorators = {
    columns: [{ type: Input }],
    conditions: [{ type: Input }],
    height: [{ type: Input }],
    showCode: [{ type: Input }],
    showSql: [{ type: Input }],
    enableExpress: [{ type: Input }],
    enableFrontExpress: [{ type: Input }],
    fieldEditor: [{ type: Input }],
    insertType: [{ type: Input }],
    showExpress: [{ type: Output }],
    cls: [{ type: HostBinding, args: ['class',] }]
};
if (false) {
    /** @type {?} */
    FilterEditorComponent.prototype.tabIndex;
    /** @type {?} */
    FilterEditorComponent.prototype.columns;
    /** @type {?} */
    FilterEditorComponent.prototype.conditions;
    /** @type {?} */
    FilterEditorComponent.prototype.height;
    /** @type {?} */
    FilterEditorComponent.prototype.showCode;
    /** @type {?} */
    FilterEditorComponent.prototype.showSql;
    /** @type {?} */
    FilterEditorComponent.prototype.enableExpress;
    /** @type {?} */
    FilterEditorComponent.prototype.enableFrontExpress;
    /** @type {?} */
    FilterEditorComponent.prototype.fieldEditor;
    /** @type {?} */
    FilterEditorComponent.prototype.insertType;
    /** @type {?} */
    FilterEditorComponent.prototype.showExpress;
    /** @type {?} */
    FilterEditorComponent.prototype.cls;
    /** @type {?} */
    FilterEditorComponent.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    FilterEditorComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    FilterEditorComponent.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    FilterEditorComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWVkaXRvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9maWx0ZXItZWRpdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFTQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hILE9BQU8sRUFBRSxZQUFZLEVBQWEsTUFBTSwyQkFBMkIsQ0FBQztBQUVwRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDN0QsT0FBTyxFQUFtQixPQUFPLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFzQmxELE1BQU0sT0FBTyxxQkFBcUI7Ozs7OztJQWlCOUIsWUFBb0IsU0FBdUIsRUFBVSxhQUE0QixFQUFzQixRQUFrQjtRQUFyRyxjQUFTLEdBQVQsU0FBUyxDQUFjO1FBQVUsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFBc0IsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQWhCekgsYUFBUSxHQUFHLENBQUMsQ0FBQztRQUNKLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFDYixlQUFVLEdBQXNCLEVBQUUsQ0FBQztRQUVuQyxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFDaEIsa0JBQWEsR0FBRyxLQUFLLENBQUM7UUFDdEIsdUJBQWtCLEdBQUcsS0FBSyxDQUFDO1FBQzNCLGdCQUFXLEdBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUMsQ0FBQztRQUM5QyxlQUFVLEdBQW9CLE9BQU8sQ0FBQztRQUVyQyxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDckIsUUFBRyxHQUFHLDBDQUEwQyxDQUFDO1FBRXZFLGtCQUFhLEdBQWtCLElBQUksQ0FBQztRQUdoQyxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLFNBQVM7Ozs7UUFBQyxhQUFhLENBQUMsRUFBRTtZQUMzRCxJQUFJLENBQUMsVUFBVSxHQUFHLGFBQWEsQ0FBQztRQUNwQyxDQUFDLEVBQUMsQ0FBQztRQUVILElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNmLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQy9EO0lBQ0wsQ0FBQzs7OztJQUVELFFBQVE7UUFDSixJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUU7WUFDM0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUc7Ozs7WUFBQyxHQUFHLENBQUMsRUFBRTs7c0JBQ2xDLEVBQUUsR0FBRyxRQUFRLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDO2dCQUN6QyxJQUFJLEVBQUUsS0FBSyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxPQUFPLENBQUMsS0FBSyxFQUFFO29CQUMzQyxHQUFHLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztpQkFDL0M7Z0JBQ0QsT0FBTyxHQUFHLENBQUM7WUFDZixDQUFDLEVBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7Ozs7SUFHRCxXQUFXLENBQUMsS0FBYTtRQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDOzs7OztJQUVELGFBQWEsQ0FBQyxNQUFNO1FBQ2hCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Ozs7SUFFRCxVQUFVO1FBQ04sT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMzRSxDQUFDOzs7WUF0RUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxlQUFlO2dCQUN6QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7OztLQWVUO2FBQ0o7Ozs7WUF4QlEsWUFBWTtZQUVaLGFBQWE7WUFIZ0QsUUFBUSx1QkE0Q1UsUUFBUTs7O3NCQWYzRixLQUFLO3lCQUNMLEtBQUs7cUJBQ0wsS0FBSzt1QkFDTCxLQUFLO3NCQUNMLEtBQUs7NEJBQ0wsS0FBSztpQ0FDTCxLQUFLOzBCQUNMLEtBQUs7eUJBQ0wsS0FBSzswQkFFTCxNQUFNO2tCQUNOLFdBQVcsU0FBQyxPQUFPOzs7O0lBWnBCLHlDQUFhOztJQUNiLHdDQUFzQjs7SUFDdEIsMkNBQTRDOztJQUM1Qyx1Q0FBd0I7O0lBQ3hCLHlDQUEwQjs7SUFDMUIsd0NBQXlCOztJQUN6Qiw4Q0FBK0I7O0lBQy9CLG1EQUFvQzs7SUFDcEMsNENBQXVEOztJQUN2RCwyQ0FBK0M7O0lBRS9DLDRDQUEyQzs7SUFDM0Msb0NBQXVFOztJQUV2RSw4Q0FBb0M7Ozs7O0lBRXhCLDBDQUErQjs7Ozs7SUFBRSw4Q0FBb0M7Ozs7O0lBQUUseUNBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQENvbXBhbnk6IEluc3B1clxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqIEBEYXRlOiAyMDE5LTA0LTA5IDExOjAzOjQ5XHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMTEtMzAgMTA6MTU6MTRcclxuICovXHJcblxyXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSG9zdEJpbmRpbmcsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSW5qZWN0b3IsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZVN0eWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcblxyXG5pbXBvcnQgeyBGaWx0ZXJTZXJ2aWNlIH0gZnJvbSAnLi8uLi9zZXJ2aWNlcy9maWx0ZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IEZpbHRlckNvbmRpdGlvbiwgQ29tcGFyZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uL3R5cGVzJztcclxuaW1wb3J0IHsgTG9jYWxlU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9jYWxlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdmaWx0ZXItZWRpdG9yJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICAgICAgPGZpbHRlci10YWJzXHJcbiAgICAgICAgICAgIGNsYXNzPVwiZi11dGlscy1maWxsLWZsZXgtY29sdW1uXCJcclxuICAgICAgICAgICAgW3Nob3dDb2RlXT1cInNob3dDb2RlXCJcclxuICAgICAgICAgICAgW3Nob3dTcWxdPVwic2hvd1NxbFwiXHJcbiAgICAgICAgICAgIFtjb2x1bW5zXT1cImNvbHVtbnNcIlxyXG4gICAgICAgICAgICBbaGVpZ2h0XT1cImhlaWdodFwiXHJcbiAgICAgICAgICAgIFtlbmFibGVFeHByZXNzXT1cImVuYWJsZUV4cHJlc3NcIlxyXG4gICAgICAgICAgICBbZW5hYmxlRnJvbnRFeHByZXNzXT1cImVuYWJsZUZyb250RXhwcmVzc1wiXHJcbiAgICAgICAgICAgIFtjb25kaXRpb25zXT1cImNvbmRpdGlvbnNcIlxyXG4gICAgICAgICAgICBbZmllbGRFZGl0b3JdPVwiZmllbGRFZGl0b3JcIlxyXG4gICAgICAgICAgICAoc2hvd0V4cHJlc3MpPVwib25TaG93RXhwcmVzcygkZXZlbnQpXCJcclxuICAgICAgICAgICAgKHNlbGVjdFRhYkNoYW5nZSk9XCJvblRhYkNoYW5nZSgkZXZlbnQpXCJcclxuICAgICAgICAgICAgW2luc2VydFR5cGVdPVwiaW5zZXJ0VHlwZVwiPlxyXG4gICAgICAgIDwvZmlsdGVyLXRhYnM+XHJcbiAgICBgXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgRmlsdGVyRWRpdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIHRhYkluZGV4ID0gMDtcclxuICAgIEBJbnB1dCgpIGNvbHVtbnMgPSBbXTtcclxuICAgIEBJbnB1dCgpIGNvbmRpdGlvbnM6IEZpbHRlckNvbmRpdGlvbltdID0gW107XHJcbiAgICBASW5wdXQoKSBoZWlnaHQ6IG51bWJlcjtcclxuICAgIEBJbnB1dCgpIHNob3dDb2RlID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBzaG93U3FsID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBlbmFibGVFeHByZXNzID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBlbmFibGVGcm9udEV4cHJlc3MgPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpIGZpZWxkRWRpdG9yICA9IHsgdHlwZTogJ3NlbGVjdCcsIG9wdGlvbnM6IHt9fTtcclxuICAgIEBJbnB1dCgpIGluc2VydFR5cGU6ICdhYm92ZSd8J2JlbG93JyA9ICdiZWxvdyc7XHJcblxyXG4gICAgQE91dHB1dCgpIHNob3dFeHByZXNzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIGNscyA9ICdmLXV0aWxzLWZsZXgtY29sdW1uIGYtdXRpbHMtYWJzb2x1dGUtYWxsJztcclxuXHJcbiAgICBsb2NhbGVTZXJ2aWNlOiBMb2NhbGVTZXJ2aWNlID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNhbml0aXplcjogRG9tU2FuaXRpemVyLCBwcml2YXRlIGZpbHRlclNlcnZpY2U6IEZpbHRlclNlcnZpY2UsIEBPcHRpb25hbCgpIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJTZXJ2aWNlLmNvbmRpdGlvbnNDaGFuZ2VkLnN1YnNjcmliZShjb25kaXRpb25MaXN0ID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jb25kaXRpb25zID0gY29uZGl0aW9uTGlzdDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW5qZWN0b3IpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2NhbGVTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoTG9jYWxlU2VydmljZSwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmRpdGlvbnMgJiYgdGhpcy5jb25kaXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmRpdGlvbnMgPSB0aGlzLmNvbmRpdGlvbnMubWFwKGNvbiA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjcCA9IHBhcnNlSW50KCcnICsgY29uLmNvbXBhcmUsIDEwKTtcclxuICAgICAgICAgICAgICAgIGlmIChjcCA9PT0gQ29tcGFyZS5JbiB8fCBjcCA9PT0gQ29tcGFyZS5Ob3RJbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbi52YWx1ZSA9IGNvbi52YWx1ZS5yZXBsYWNlKC9cXHJcXG4vZywgJywnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjb247XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgb25UYWJDaGFuZ2UoaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMudGFiSW5kZXggPSBpbmRleDtcclxuICAgIH1cclxuXHJcbiAgICBvblNob3dFeHByZXNzKCRldmVudCkge1xyXG4gICAgICAgIHRoaXMuc2hvd0V4cHJlc3MuZW1pdCgkZXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbGlkYXRpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyU2VydmljZS5pc1ZhbGlkKHRoaXMuY29uZGl0aW9ucywgdGhpcy5sb2NhbGVTZXJ2aWNlKTtcclxuICAgIH1cclxufVxyXG4iXX0=