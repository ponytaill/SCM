import { Injectable } from "@angular/core";
var WorkFlowMessageService = /** @class */ (function () {
    function WorkFlowMessageService() {
        this.messageHandler = function (callback) {
            return function (event) {
                var message = event.data;
                if (message) {
                    message.sender = event.source;
                }
                if (typeof callback === 'function') {
                    callback(message);
                }
            };
        };
    }
    /**
     * 监听工作流消息
     * @param callback 回调
     */
    WorkFlowMessageService.prototype.listen = function (callback) {
        this.handler = this.messageHandler(callback);
        window.addEventListener('message', this.handler);
    };
    WorkFlowMessageService.prototype.destroy = function () {
        if (this.handler) {
            window.removeEventListener('message', this.handler);
        }
    };
    /**
     * 给工作流表单发送消息
     * @param message
     */
    WorkFlowMessageService.prototype.send = function (message) {
        if (!message) {
            return;
        }
        var win = window;
        if (message.target) {
            win = message.target || window;
            delete message.target;
        }
        if (win) {
            win.postMessage(message, '*');
        }
    };
    WorkFlowMessageService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    WorkFlowMessageService.ctorParameters = function () { return []; };
    return WorkFlowMessageService;
}());
export { WorkFlowMessageService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29yay1mbG93LW1lc3NhZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi93b3JrLWZsb3cvd29yay1mbG93LW1lc3NhZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDO0lBSUU7UUFDRSxJQUFJLENBQUMsY0FBYyxHQUFHLFVBQUMsUUFBd0M7WUFDN0QsT0FBTyxVQUFDLEtBQVU7Z0JBQ2hCLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUF5QixDQUFDO2dCQUM5QyxJQUFJLE9BQU8sRUFBRTtvQkFDWCxPQUFPLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7aUJBQy9CO2dCQUNELElBQUksT0FBTyxRQUFRLEtBQUssVUFBVSxFQUFFO29CQUNsQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQ25CO1lBQ0gsQ0FBQyxDQUFBO1FBQ0gsQ0FBQyxDQUFBO0lBQ0gsQ0FBQztJQUNEOzs7T0FHRztJQUNJLHVDQUFNLEdBQWIsVUFBYyxRQUF3QztRQUNwRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0MsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUNNLHdDQUFPLEdBQWQ7UUFDRSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDckQ7SUFFSCxDQUFDO0lBQ0Q7OztPQUdHO0lBQ0kscUNBQUksR0FBWCxVQUFZLE9BQTBCO1FBQ3BDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixPQUFPO1NBQ1I7UUFDRCxJQUFJLEdBQUcsR0FBVyxNQUFNLENBQUM7UUFDekIsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ2xCLEdBQUcsR0FBRyxPQUFPLENBQUMsTUFBZ0IsSUFBSSxNQUFNLENBQUM7WUFDekMsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxHQUFHLEVBQUU7WUFDUCxHQUFHLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztTQUMvQjtJQUNILENBQUM7O2dCQS9DRixVQUFVOzs7O0lBZ0RYLDZCQUFDO0NBQUEsQUFoREQsSUFnREM7U0EvQ1ksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBXb3JrRmxvdyB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBXb3JrRmxvd01lc3NhZ2VTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBtZXNzYWdlSGFuZGxlcjogKGNhbGxiYWNrOiAoZTogV29ya0Zsb3cuSU1lc3NhZ2UpID0+IHZvaWQpID0+IChldmVudDogYW55KSA9PiB2b2lkO1xuICBwcml2YXRlIGhhbmRsZXI6IChldmVudDogYW55KSA9PiB2b2lkO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm1lc3NhZ2VIYW5kbGVyID0gKGNhbGxiYWNrOiAoZTogV29ya0Zsb3cuSU1lc3NhZ2UpID0+IHZvaWQpID0+IHtcbiAgICAgIHJldHVybiAoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICB2YXIgbWVzc2FnZSA9IGV2ZW50LmRhdGEgYXMgV29ya0Zsb3cuSU1lc3NhZ2U7XG4gICAgICAgIGlmIChtZXNzYWdlKSB7XG4gICAgICAgICAgbWVzc2FnZS5zZW5kZXIgPSBldmVudC5zb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNhbGxiYWNrKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiDnm5HlkKzlt6XkvZzmtYHmtojmga9cbiAgICogQHBhcmFtIGNhbGxiYWNrIOWbnuiwg1xuICAgKi9cbiAgcHVibGljIGxpc3RlbihjYWxsYmFjazogKGU6IFdvcmtGbG93LklNZXNzYWdlKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5oYW5kbGVyID0gdGhpcy5tZXNzYWdlSGFuZGxlcihjYWxsYmFjayk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLmhhbmRsZXIpO1xuICB9XG4gIHB1YmxpYyBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXIpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5oYW5kbGVyKTtcbiAgICB9XG5cbiAgfVxuICAvKipcbiAgICog57uZ5bel5L2c5rWB6KGo5Y2V5Y+R6YCB5raI5oGvXG4gICAqIEBwYXJhbSBtZXNzYWdlIFxuICAgKi9cbiAgcHVibGljIHNlbmQobWVzc2FnZTogV29ya0Zsb3cuSU1lc3NhZ2UpOiB2b2lkIHtcbiAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHdpbjogV2luZG93ID0gd2luZG93O1xuICAgIGlmIChtZXNzYWdlLnRhcmdldCkge1xuICAgICAgd2luID0gbWVzc2FnZS50YXJnZXQgYXMgV2luZG93IHx8IHdpbmRvdztcbiAgICAgIGRlbGV0ZSBtZXNzYWdlLnRhcmdldDtcbiAgICB9XG4gICAgaWYgKHdpbikge1xuICAgICAgd2luLnBvc3RNZXNzYWdlKG1lc3NhZ2UsICcqJyk7XG4gICAgfVxuICB9XG59Il19