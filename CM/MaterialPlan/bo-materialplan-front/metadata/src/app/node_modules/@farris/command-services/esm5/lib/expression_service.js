import * as tslib_1 from "tslib";
import { Injectable, Injector } from "@angular/core";
import { BigNumber } from 'bignumber.js';
import { AppContext, FrameContext, Repository, ENTITY_TEMPLATE, ResolveService, ExpressionUtil, ExpressionExecutor } from "@farris/devkit";
import { of } from "rxjs";
var ExpressionService = /** @class */ (function () {
    function ExpressionService(injector, resolveService, frameContext, expressionExecutor) {
        this.injector = injector;
        this.resolveService = resolveService;
        this.frameContext = frameContext;
        this.expressionExecutor = expressionExecutor;
    }
    /**
     * 执行表达式计算
     * @param expression 表达式
     * @param customContext 自定义上下文
     * @returns
     */
    ExpressionService.prototype.execute = function (expression, customContext) {
        var _a;
        var deps = this.resolveService.resolve(expression);
        var groupDependencies = ExpressionUtil.getGroupFunctionDependency(expression, this.frameContext.repository.entityTypeInfo);
        var entityContext = this.buildEntityContext(deps, groupDependencies);
        var stateContext = this.buildStateContext();
        var context = tslib_1.__assign((_a = {}, _a[this.entityOriginalNodeCode] = entityContext, _a), stateContext, { BigNumber: BigNumber, frameContext: this.frameContext, bindingData: this.frameContext.bindingData, repository: this.frameContext.repository }, customContext);
        return this.expressionExecutor.eval(expression, context);
    };
    /**
     * 执行表达式（返回可观察对象）
     * @param expression 表达式
     * @param customContext 自定义上下文
     * @returns
     */
    ExpressionService.prototype.executeAsync = function (expression, customContext) {
        var result = this.execute(expression, customContext);
        return of(result);
    };
    /**
     * 构造实体上下文
     * @param deps
     * @param groupDependencies
     * @param context
     * @returns
     */
    ExpressionService.prototype.buildEntityContext = function (deps, groupDependencies, context) {
        var _this = this;
        var isGroupdMainEntity = false;
        deps.forEach(function (dep) {
            var isEntityDependency = _this.isEntityDependency(dep);
            var isGroupDependency = groupDependencies.findIndex(function (item) { return item === dep; }) !== -1;
            // 如果依赖的是state，无需处理，现在需要确定的是返回多少实体的问题，和state没有关系
            // 表达式依赖了实体
            if (isEntityDependency) {
                // 是聚合依赖
                if (isGroupDependency) {
                    var dependencyLength = dep.split('/').filter(function (p) { return p; }).length - 1;
                    if (dependencyLength === 1) {
                        // 聚合了主表字段，所有主表数据都需要参与运算，此时已经确定计算的实体上下文了。
                        isGroupdMainEntity = true;
                    }
                    else {
                        // 聚合了子表字段，只需要传递当前实体
                    }
                }
                else {
                    // 当前依赖不是聚合，只需要传递当前实体
                }
            }
        });
        var data = this.getEntity();
        if (isGroupdMainEntity) {
            var collection = this.frameContext.repository.entityCollection.toJSON();
            data['__type__'] = 'List';
            data['__items__'] = collection;
        }
        return data;
    };
    /**
     * 是否为实体依赖
     * @param dep
     * @returns
     */
    ExpressionService.prototype.isEntityDependency = function (dep) {
        return dep.startsWith(ENTITY_TEMPLATE);
    };
    /**
     * 获取实体
     * @param event
     * @returns
     */
    ExpressionService.prototype.getEntity = function () {
        var entityTypeInfo = this.frameContext.repository.entityTypeInfo;
        var bindingData = this.frameContext.bindingData;
        var childrenEntityPaths = [];
        ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);
        var entity = this.frameContext.bindingData.list.currentItem.toJSON();
        entity['__type__'] = 'Entity';
        if (!childrenEntityPaths || childrenEntityPaths.length < 1) {
            return entity;
        }
        // 找到所有子表
        childrenEntityPaths.forEach(function (paths) {
            var row = ExpressionUtil.getCurrentRowByPaths(paths, bindingData);
            if (row) {
                var propertyName = paths.pop();
                var parent_1 = paths.reduce(function (object, path) {
                    return object && object[path] || null;
                }, entity);
                var node = tslib_1.__assign({ __items__: tslib_1.__spread(parent_1[propertyName]) }, row, { __type__: 'List' });
                parent_1[propertyName] = node;
            }
        });
        return entity;
    };
    Object.defineProperty(ExpressionService.prototype, "entityOriginalNodeCode", {
        /**
         * 获取主实体原始字段名
         */
        get: function () {
            var repository = this.injector.get(Repository);
            return repository && repository.entityTypeInfo && repository.entityTypeInfo.entityInfo && repository.entityTypeInfo.entityInfo.originalCode || null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 构造变量上下文
     * @param event
     * @returns
     */
    ExpressionService.prototype.buildStateContext = function () {
        var ns = this.frameContext.namespace;
        var appContext = this.injector.get(AppContext, null);
        var frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);
        var result = {};
        if (frameContexts && frameContexts.length > 0) {
            var anonymousFrameContext = frameContexts[0];
            var rootFrameContext = anonymousFrameContext.getVirtualRootFrameContext();
            if (rootFrameContext) {
                var uiState_1 = rootFrameContext.viewModel.uiState;
                var propertyNames = Object.getOwnPropertyNames(uiState_1) || [];
                propertyNames.forEach(function (prop) {
                    if (prop.match(/^[a-zA-Z0-9_\$]+$/g) !== null) {
                        result[prop] = uiState_1[prop];
                    }
                });
            }
        }
        return result;
    };
    ExpressionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ExpressionService.ctorParameters = function () { return [
        { type: Injector },
        { type: ResolveService },
        { type: FrameContext },
        { type: ExpressionExecutor }
    ]; };
    return ExpressionService;
}());
export { ExpressionService };
//# sourceMappingURL=data:application/json;base64,