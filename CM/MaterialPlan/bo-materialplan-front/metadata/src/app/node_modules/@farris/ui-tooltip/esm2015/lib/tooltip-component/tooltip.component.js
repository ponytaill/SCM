/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, TemplateRef, ElementRef, ViewChild, ViewContainerRef, ViewEncapsulation, Renderer2 } from '@angular/core';
export class TooltipComponent {
    /**
     * @param {?} el
     * @param {?} render
     */
    constructor(el, render) {
        this.el = el;
        this.render = render;
        this.contentIsString = true;
        this._tipWidth = '';
        this._tipCls = '';
        /* 位置 */
        this.placement = 'top';
        this.rectifyPlacement = 'top';
        this.rectifyGutter = 20;
        /* 位置样式 */
        this.positionStyle = {};
    }
    /* 普通文本内容 */
    /**
     * @param {?} value
     * @return {?}
     */
    set content(value) {
        if (value instanceof TemplateRef) {
            this.contentIsString = false;
            this.contentViewf.createEmbeddedView(value);
        }
        else {
            this.contentIsString = true;
            this.nfContent = value;
        }
    }
    /**
     * @return {?}
     */
    get content() {
        return this.nfContent;
    }
    /**
     * 因为表单生成没有排除factory,不能使用模板
     * @param {?} value
     * @return {?}
     */
    set tipWidth(value) {
        if (value != this._tipWidth) {
            if (value) {
                this.render.setStyle(this.innerNode.nativeElement, 'width', value);
                this.render.setStyle(this.innerNode.nativeElement, 'max-width', 'none');
            }
            else {
                this.render.removeStyle(this.innerNode.nativeElement, 'width');
                this.render.removeStyle(this.innerNode.nativeElement, 'max-width');
            }
            this._tipWidth = value;
        }
    }
    /**
     * @return {?}
     */
    get tipWidth() {
        return this._tipWidth;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set tipCls(value) {
        if (value != this._tipCls) {
            //移除旧样式
            this._tipCls && this.render.removeClass(this.el.nativeElement, this._tipCls);
            //追加新样式
            value && this.render.addClass(this.el.nativeElement, value);
            this._tipCls = value;
        }
    }
    /**
     * @return {?}
     */
    get tipCls() {
        return this._tipCls;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.hostBoundingClientRect) {
            this.judgeWidth();
            this.autoRectifyDirection();
            this.calculatePosition(this.hostBoundingClientRect);
        }
    }
    /**
     * 规则判断默认样式下出现滚动条，尺寸从默认变成大号
     * @return {?}
     */
    judgeWidth() {
        if (this.innerNode.nativeElement.scrollHeight > this.innerNode.nativeElement.clientHeight) {
            this.render.addClass(this.innerNode.nativeElement, 'tooltip-inner-lg');
        }
    }
    // 自动纠正方向
    /**
     * @private
     * @return {?}
     */
    autoRectifyDirection() {
        // 标记默认值
        this.rectifyPlacement = this.placement;
        // 整个提示位置
        /** @type {?} */
        const tooltipSize = this.tooltipNode.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const arrowSize = this.arrowNode.nativeElement.getBoundingClientRect();
        /*不考虑，提示框太大的情况,只考虑一次转换位置，
        太复杂的场景，实际项目中不会出现，简化处理此问题
        if(this.referenceBoundingRect.width>tooltipSize){
        }*/
        switch (this.placement) {
            case 'top':
            case 'top-left':
            case 'top-right':
                if (Math.abs(this.hostBoundingClientRect.top - this.referenceBoundingRect.top) < tooltipSize.height + arrowSize.height) {
                    // 高度放不开，转向
                    this.rectifyPlacement = this.rectifyPlacement.replace('top', 'bottom');
                }
                break;
            case 'bottom':
            case 'bottom-left':
            case 'bottom-right':
                if (Math.abs(this.hostBoundingClientRect.bottom - this.referenceBoundingRect.bottom) < tooltipSize.height + arrowSize.height) {
                    // 高度放不开，转向
                    this.rectifyPlacement = this.rectifyPlacement.replace('bottom', 'top');
                }
                break;
            case 'right':
            case 'right-top':
            case 'right-bottom':
                if (Math.abs(this.hostBoundingClientRect.right - this.referenceBoundingRect.right) < tooltipSize.width + arrowSize.width) {
                    // 宽度放不开，转向
                    this.rectifyPlacement = this.rectifyPlacement.replace('right', 'left');
                }
                break;
            case 'left':
            case 'left-top':
            case 'left-bottom':
                if (Math.abs(this.hostBoundingClientRect.left - this.referenceBoundingRect.left) < tooltipSize.width + arrowSize.width) {
                    // 宽度放不开，转向
                    this.rectifyPlacement = this.rectifyPlacement.replace('left', 'right');
                }
                break;
        }
        if (this.rectifyPlacement != this.placement) {
            this.tooltipNode.nativeElement.classList.remove('bs-tooltip-' + this.offsetDirection(this.placement));
            this.tooltipNode.nativeElement.classList.add('bs-tooltip-' + this.offsetDirection(this.rectifyPlacement));
        }
    }
    /**
     * 判断是否超出边界
     * @private
     * @param {?} rect
     * @param {?} value
     * @return {?}
     */
    isOverBounding(rect, value) {
        /** @type {?} */
        let isOver = false;
        /** @type {?} */
        let newValue = 0;
        switch (rect) {
            case 'left':
                if (value <= this.referenceBoundingRect.left) {
                    isOver = true;
                    newValue = this.referenceBoundingRect.left + this.rectifyGutter;
                }
                break;
            case 'right':
                if (value >= this.referenceBoundingRect.right) {
                    isOver = true;
                    newValue = this.referenceBoundingRect.right - this.rectifyGutter;
                }
                break;
            case 'top':
                if (value <= this.referenceBoundingRect.top) {
                    isOver = true;
                    newValue = this.referenceBoundingRect.top + this.rectifyGutter;
                }
                break;
            case 'bottom':
                if (value >= this.referenceBoundingRect.bottom) {
                    isOver = true;
                    newValue = this.referenceBoundingRect.bottom - this.rectifyGutter;
                }
                break;
        }
        return { isOver, newValue };
    }
    /**
     * @private
     * @param {?} datas
     * @param {?=} specialEl
     * @return {?}
     */
    containsEl(datas, specialEl = '') {
        if (!specialEl) {
            specialEl = this.rectifyPlacement;
        }
        for (var i = 0; i < datas.length; i++) {
            if (datas[i] == specialEl)
                return true;
        }
        return false;
    }
    /* 计算tooltip最新位置 */
    /**
     * @param {?} hostPosition
     * @return {?}
     */
    calculatePosition(hostPosition) {
        /** @type {?} */
        let top = 0;
        /** @type {?} */
        let left = 0;
        /** @type {?} */
        let right = 0;
        /** @type {?} */
        let bottom = 0;
        // 整个提示位置
        /** @type {?} */
        const tooltipSize = this.tooltipNode.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const arrowSize = this.arrowNode.nativeElement.getBoundingClientRect();
        switch (this.rectifyPlacement) {
            case 'top':
                top = hostPosition.top - tooltipSize.height - 2;
                left = hostPosition.left + (hostPosition.width - tooltipSize.width) / 2;
                right = left + tooltipSize.width;
                break;
            case 'left':
                top = hostPosition.top + (hostPosition.height - tooltipSize.height) / 2;
                left = hostPosition.left - tooltipSize.width - 2;
                break;
            case 'right':
                top = hostPosition.top + (hostPosition.height - tooltipSize.height) / 2;
                left = hostPosition.right + 2;
                break;
            case 'bottom':
                top = hostPosition.bottom + arrowSize.height + 2;
                left = hostPosition.left + (hostPosition.width - tooltipSize.width) / 2;
                right = left + tooltipSize.width;
                break;
            case 'top-left':
                top = hostPosition.top - tooltipSize.height - 2;
                left = hostPosition.left;
                right = left + tooltipSize.width;
                break;
            case 'top-right':
                top = hostPosition.top - tooltipSize.height - 2;
                left = hostPosition.right - tooltipSize.width;
                right = hostPosition.right;
                break;
            case 'right-top':
                top = hostPosition.top;
                left = hostPosition.right + 2;
                this.arrowNode.nativeElement.style.top = '10%';
                break;
            case 'right-bottom':
                top = hostPosition.bottom - tooltipSize.height;
                left = hostPosition.right + 2;
                this.arrowNode.nativeElement.style.bottom = '10%';
                break;
            case 'bottom-left':
                top = hostPosition.bottom + arrowSize.height + 2;
                left = hostPosition.left;
                right = left + tooltipSize.width;
                break;
            case 'bottom-right':
                top = hostPosition.bottom + arrowSize.height + 2;
                left = hostPosition.right - tooltipSize.width;
                right = hostPosition.right;
                break;
            case 'left-top':
                top = hostPosition.top;
                left = hostPosition.left - tooltipSize.width - 2;
                this.arrowNode.nativeElement.style.top = '10%';
                break;
            case 'left-bottom':
                top = hostPosition.bottom - tooltipSize.height;
                left = hostPosition.left - tooltipSize.width - 2;
                this.arrowNode.nativeElement.style.bottom = '10%';
        }
        /** @type {?} */
        let overResult;
        /** @type {?} */
        let arrowLeft = 0;
        /** @type {?} */
        let arrowTop = 0;
        switch (this.rectifyPlacement) {
            case 'top':
            case 'top-left':
            case 'top-right':
            case 'bottom':
            case 'bottom-left':
            case 'bottom-right':
                overResult = this.isOverBounding('left', left);
                if (overResult.isOver) {
                    left = overResult.newValue;
                }
                else {
                    overResult = this.isOverBounding('right', right);
                    if (overResult.isOver) {
                        left = overResult.newValue - tooltipSize.width;
                    }
                }
                arrowLeft = left - hostPosition.left - hostPosition.width * 0.5 + arrowSize.width * 0.5;
                if (this.rectifyPlacement.indexOf('-left') > 0) {
                    arrowLeft += hostPosition.width * 0.4;
                }
                else if (this.rectifyPlacement.indexOf('-right') > 0) {
                    arrowLeft -= hostPosition.width * 0.4;
                }
                this.arrowNode.nativeElement.style.left = Math.abs(arrowLeft) + 'px';
                break;
            default:
                overResult = this.isOverBounding('top', top);
                if (overResult.isOver) {
                    top = overResult.newValue;
                }
                else {
                    overResult = this.isOverBounding('bottom', bottom);
                    if (overResult.isOver) {
                        top = overResult.newValue - tooltipSize.height;
                    }
                }
                arrowTop = top - hostPosition.top - hostPosition.height * 0.5 + arrowSize.height * 0.5;
                ;
                if (this.rectifyPlacement.indexOf('-top') > 0) {
                    arrowTop += hostPosition.height * 0.4;
                }
                else if (this.rectifyPlacement.indexOf('-bottom') > 0) {
                    arrowTop -= hostPosition.height * 0.4;
                }
                this.arrowNode.nativeElement.style.top = Math.abs(arrowTop) + 'px';
        }
        this.tooltipNode.nativeElement.style.top = top + 'px';
        this.tooltipNode.nativeElement.style.left = left + 'px';
    }
    /*
        *12个位置名解析
        * 因表单生成没有排除factory,而且使用了[class],只能在此处变更
        */
    /**
     * @param {?=} tplacement
     * @return {?}
     */
    offsetDirection(tplacement = '') {
        if (!tplacement) {
            tplacement = this.placement;
        }
        if (tplacement.indexOf('-') !== -1) {
            /** @type {?} */
            const index = tplacement.indexOf('-');
            return tplacement.substring(0, index);
        }
        return tplacement;
    }
}
TooltipComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-tooltip',
                template: "<div #tooltipEle [class]=\"('bs-tooltip-'+offsetDirection())+' tooltip show'\">\r\n    <div #arrowEle class=\"arrow\"></div>\r\n    <div #innerEle class=\"tooltip-inner\">\r\n        <div #contentViewf class=\"tooltip-tmpl\">\r\n            <div *ngIf=\"contentIsString\" class=\"tooltip-text\" [innerHtml]=\"nfContent|tooltipHtml\"></div>\r\n            <ng-container *ngIf=\"!contentIsString\"> {{nfContent}}</ng-container>\r\n        </div>       \r\n    </div>\r\n</div>",
                encapsulation: ViewEncapsulation.None,
                styles: [".bs-tooltip-bottom .arrow,.bs-tooltip-top .arrow{left:50%}.bs-tooltip-left .arrow,.bs-tooltip-right .arrow{top:25%}"]
            }] }
];
/** @nocollapse */
TooltipComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
TooltipComponent.propDecorators = {
    contentViewf: [{ type: ViewChild, args: ['contentViewf', { read: ViewContainerRef },] }],
    tooltipNode: [{ type: ViewChild, args: ['tooltipEle', { read: ElementRef },] }],
    arrowNode: [{ type: ViewChild, args: ['arrowEle', { read: ElementRef },] }],
    innerNode: [{ type: ViewChild, args: ['innerEle', { read: ElementRef },] }],
    content: [{ type: Input }],
    tipWidth: [{ type: Input }],
    tipCls: [{ type: Input }],
    placement: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TooltipComponent.prototype.contentViewf;
    /** @type {?} */
    TooltipComponent.prototype.tooltipNode;
    /** @type {?} */
    TooltipComponent.prototype.arrowNode;
    /** @type {?} */
    TooltipComponent.prototype.innerNode;
    /** @type {?} */
    TooltipComponent.prototype.contentIsString;
    /**
     * @type {?}
     * @private
     */
    TooltipComponent.prototype._tipWidth;
    /**
     * @type {?}
     * @private
     */
    TooltipComponent.prototype._tipCls;
    /** @type {?} */
    TooltipComponent.prototype.placement;
    /**
     * @type {?}
     * @private
     */
    TooltipComponent.prototype.rectifyPlacement;
    /** @type {?} */
    TooltipComponent.prototype.hostBoundingClientRect;
    /** @type {?} */
    TooltipComponent.prototype.referenceBoundingRect;
    /**
     * @type {?}
     * @private
     */
    TooltipComponent.prototype.rectifyGutter;
    /** @type {?} */
    TooltipComponent.prototype.nfContent;
    /** @type {?} */
    TooltipComponent.prototype.positionStyle;
    /** @type {?} */
    TooltipComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TooltipComponent.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXRvb2x0aXAvIiwic291cmNlcyI6WyJsaWIvdG9vbHRpcC1jb21wb25lbnQvdG9vbHRpcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQ3pDLFNBQVMsRUFBRSxnQkFBZ0IsRUFBZSxpQkFBaUIsRUFBaUIsU0FBUyxFQUN4RixNQUFNLGVBQWUsQ0FBQztBQVN2QixNQUFNLE9BQU8sZ0JBQWdCOzs7OztJQXFFekIsWUFDVyxFQUFjLEVBQ2IsTUFBaUI7UUFEbEIsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNiLFdBQU0sR0FBTixNQUFNLENBQVc7UUEvRDdCLG9CQUFlLEdBQUcsSUFBSSxDQUFDO1FBZWYsY0FBUyxHQUFHLEVBQUUsQ0FBQztRQWtCZixZQUFPLEdBQUcsRUFBRSxDQUFDOztRQWVaLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbkIscUJBQWdCLEdBQUcsS0FBSyxDQUFDO1FBS3pCLGtCQUFhLEdBQUcsRUFBRSxDQUFDOztRQUszQixrQkFBYSxHQUFHLEVBQUUsQ0FBQztJQU1uQixDQUFDOzs7Ozs7SUEvREQsSUFDSSxPQUFPLENBQUMsS0FBZ0M7UUFDeEMsSUFBSSxLQUFLLFlBQVksV0FBVyxFQUFFO1lBQzlCLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1lBQzdCLElBQUksQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0M7YUFBTTtZQUNILElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1lBQzVCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1NBQzFCO0lBQ0wsQ0FBQzs7OztJQUNELElBQUksT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDOzs7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QUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFOztrQkFDMUIsS0FBSyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQ3JDLE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDekM7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUN0QixDQUFDOzs7WUF6VUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLHNlQUF1QztnQkFFdkMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2FBQ3hDOzs7O1lBVGtDLFVBQVU7WUFDbUMsU0FBUzs7OzJCQVlwRixTQUFTLFNBQUMsY0FBYyxFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFOzBCQUVwRCxTQUFTLFNBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTt3QkFDNUMsU0FBUyxTQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7d0JBQzFDLFNBQVMsU0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO3NCQUkxQyxLQUFLO3VCQWVMLEtBQUs7cUJBaUJMLEtBQUs7d0JBY0wsS0FBSzs7OztJQXRETix3Q0FBc0Y7O0lBRXRGLHVDQUF1RTs7SUFDdkUscUNBQW1FOztJQUNuRSxxQ0FBbUU7O0lBRW5FLDJDQUF1Qjs7Ozs7SUFldkIscUNBQXVCOzs7OztJQWtCdkIsbUNBQXFCOztJQWVyQixxQ0FBMkI7Ozs7O0lBQzNCLDRDQUFpQzs7SUFFakMsa0RBQTRCOztJQUU1QixpREFBMkI7Ozs7O0lBQzNCLHlDQUEyQjs7SUFFM0IscUNBQXFDOztJQUdyQyx5Q0FBbUI7O0lBR2YsOEJBQXFCOzs7OztJQUNyQixrQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQ29tcG9uZW50LCBJbnB1dCwgVGVtcGxhdGVSZWYsIEVsZW1lbnRSZWYsIE9uSW5pdCxcclxuICAgIFZpZXdDaGlsZCwgVmlld0NvbnRhaW5lclJlZiwgSG9zdEJpbmRpbmcsIFZpZXdFbmNhcHN1bGF0aW9uLCBTaW1wbGVDaGFuZ2VzLCBSZW5kZXJlcjIsIE5nWm9uZVxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdmYXJyaXMtdG9vbHRpcCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vdG9vbHRpcC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBzdHlsZVVybHM6IFsnLi90b29sdGlwLmNvbXBvbmVudC5zY3NzJ10sXHJcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgVG9vbHRpcENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcblxyXG4gICAgQFZpZXdDaGlsZCgnY29udGVudFZpZXdmJywgeyByZWFkOiBWaWV3Q29udGFpbmVyUmVmIH0pIGNvbnRlbnRWaWV3ZjogVmlld0NvbnRhaW5lclJlZjtcclxuXHJcbiAgICBAVmlld0NoaWxkKCd0b29sdGlwRWxlJywgeyByZWFkOiBFbGVtZW50UmVmIH0pIHRvb2x0aXBOb2RlOiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgnYXJyb3dFbGUnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgYXJyb3dOb2RlOiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgnaW5uZXJFbGUnLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgaW5uZXJOb2RlOiBFbGVtZW50UmVmO1xyXG5cclxuICAgIGNvbnRlbnRJc1N0cmluZyA9IHRydWU7XHJcbiAgICAvKiDmma7pgJrmlofmnKzlhoXlrrkgKi9cclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgY29udGVudCh2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55Pikge1xyXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudElzU3RyaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudFZpZXdmLmNyZWF0ZUVtYmVkZGVkVmlldyh2YWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50SXNTdHJpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLm5mQ29udGVudCA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCBjb250ZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5mQ29udGVudDtcclxuICAgIH1cclxuICAgIHByaXZhdGUgX3RpcFdpZHRoID0gJyc7XHJcbiAgICAvKirlm6DkuLrooajljZXnlJ/miJDmsqHmnInmjpLpmaRmYWN0b3J5LOS4jeiDveS9v+eUqOaooeadvyAqL1xyXG4gICAgQElucHV0KClcclxuICAgIHNldCB0aXBXaWR0aCh2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPSB0aGlzLl90aXBXaWR0aCkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHRoaXMuaW5uZXJOb2RlLm5hdGl2ZUVsZW1lbnQsICd3aWR0aCcsIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHRoaXMuaW5uZXJOb2RlLm5hdGl2ZUVsZW1lbnQsICdtYXgtd2lkdGgnLCAnbm9uZScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIucmVtb3ZlU3R5bGUodGhpcy5pbm5lck5vZGUubmF0aXZlRWxlbWVudCwgJ3dpZHRoJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5yZW1vdmVTdHlsZSh0aGlzLmlubmVyTm9kZS5uYXRpdmVFbGVtZW50LCAnbWF4LXdpZHRoJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fdGlwV2lkdGggPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQgdGlwV2lkdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpcFdpZHRoO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBfdGlwQ2xzID0gJyc7XHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IHRpcENscyh2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPSB0aGlzLl90aXBDbHMpIHtcclxuICAgICAgICAgICAgLy/np7vpmaTml6fmoLflvI9cclxuICAgICAgICAgICAgdGhpcy5fdGlwQ2xzICYmIHRoaXMucmVuZGVyLnJlbW92ZUNsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgdGhpcy5fdGlwQ2xzKTtcclxuICAgICAgICAgICAgLy/ov73liqDmlrDmoLflvI9cclxuICAgICAgICAgICAgdmFsdWUgJiYgdGhpcy5yZW5kZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpcENscyA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCB0aXBDbHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpcENscztcclxuICAgIH1cclxuICAgIC8qIOS9jee9riAqL1xyXG4gICAgQElucHV0KCkgcGxhY2VtZW50ID0gJ3RvcCc7XHJcbiAgICBwcml2YXRlIHJlY3RpZnlQbGFjZW1lbnQgPSAndG9wJztcclxuICAgIC8vIOeureWktOS9jee9ruWPgueFp1xyXG4gICAgaG9zdEJvdW5kaW5nQ2xpZW50UmVjdDogYW55O1xyXG4gICAgLy8g6L6555WM5L2N572u5Y+C54WnXHJcbiAgICByZWZlcmVuY2VCb3VuZGluZ1JlY3Q6IGFueTtcclxuICAgIHByaXZhdGUgcmVjdGlmeUd1dHRlciA9IDIwO1xyXG5cclxuICAgIG5mQ29udGVudDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PjtcclxuXHJcbiAgICAvKiDkvY3nva7moLflvI8gKi9cclxuICAgIHBvc2l0aW9uU3R5bGUgPSB7fTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgZWw6IEVsZW1lbnRSZWYsXHJcbiAgICAgICAgcHJpdmF0ZSByZW5kZXI6IFJlbmRlcmVyMlxyXG4gICAgKSB7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICB9XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaG9zdEJvdW5kaW5nQ2xpZW50UmVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLmp1ZGdlV2lkdGgoKTtcclxuICAgICAgICAgICAgdGhpcy5hdXRvUmVjdGlmeURpcmVjdGlvbigpO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVBvc2l0aW9uKHRoaXMuaG9zdEJvdW5kaW5nQ2xpZW50UmVjdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDop4TliJnliKTmlq3pu5jorqTmoLflvI/kuIvlh7rnjrDmu5rliqjmnaHvvIzlsLrlr7jku47pu5jorqTlj5jmiJDlpKflj7dcclxuICAgICAqL1xyXG4gICAganVkZ2VXaWR0aCgpIHtcclxuICAgICAgICBpZiAodGhpcy5pbm5lck5vZGUubmF0aXZlRWxlbWVudC5zY3JvbGxIZWlnaHQgPiB0aGlzLmlubmVyTm9kZS5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlci5hZGRDbGFzcyh0aGlzLmlubmVyTm9kZS5uYXRpdmVFbGVtZW50LCAndG9vbHRpcC1pbm5lci1sZycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIOiHquWKqOe6oOato+aWueWQkVxyXG4gICAgcHJpdmF0ZSBhdXRvUmVjdGlmeURpcmVjdGlvbigpIHtcclxuICAgICAgICAvLyDmoIforrDpu5jorqTlgLxcclxuICAgICAgICB0aGlzLnJlY3RpZnlQbGFjZW1lbnQgPSB0aGlzLnBsYWNlbWVudDtcclxuICAgICAgICAvLyDmlbTkuKrmj5DnpLrkvY3nva5cclxuICAgICAgICBjb25zdCB0b29sdGlwU2l6ZSA9IHRoaXMudG9vbHRpcE5vZGUubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCBhcnJvd1NpemUgPSB0aGlzLmFycm93Tm9kZS5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIC8q5LiN6ICD6JmR77yM5o+Q56S65qGG5aSq5aSn55qE5oOF5Ya1LOWPquiAg+iZkeS4gOasoei9rOaNouS9jee9ru+8jFxyXG4gICAgICAgIOWkquWkjeadgueahOWcuuaZr++8jOWunumZhemhueebruS4reS4jeS8muWHuueOsO+8jOeugOWMluWkhOeQhuatpOmXrumimFxyXG4gICAgICAgIGlmKHRoaXMucmVmZXJlbmNlQm91bmRpbmdSZWN0LndpZHRoPnRvb2x0aXBTaXplKXtcclxuICAgICAgICB9Ki9cclxuICAgICAgICBzd2l0Y2ggKHRoaXMucGxhY2VtZW50KSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ3RvcC1sZWZ0JzpcclxuICAgICAgICAgICAgY2FzZSAndG9wLXJpZ2h0JzpcclxuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh0aGlzLmhvc3RCb3VuZGluZ0NsaWVudFJlY3QudG9wIC0gdGhpcy5yZWZlcmVuY2VCb3VuZGluZ1JlY3QudG9wKSA8IHRvb2x0aXBTaXplLmhlaWdodCArIGFycm93U2l6ZS5oZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDpq5jluqbmlL7kuI3lvIDvvIzovazlkJFcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY3RpZnlQbGFjZW1lbnQgPSB0aGlzLnJlY3RpZnlQbGFjZW1lbnQucmVwbGFjZSgndG9wJywgJ2JvdHRvbScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XHJcbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbS1sZWZ0JzpcclxuICAgICAgICAgICAgY2FzZSAnYm90dG9tLXJpZ2h0JzpcclxuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh0aGlzLmhvc3RCb3VuZGluZ0NsaWVudFJlY3QuYm90dG9tIC0gdGhpcy5yZWZlcmVuY2VCb3VuZGluZ1JlY3QuYm90dG9tKSA8IHRvb2x0aXBTaXplLmhlaWdodCArIGFycm93U2l6ZS5oZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDpq5jluqbmlL7kuI3lvIDvvIzovazlkJFcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY3RpZnlQbGFjZW1lbnQgPSB0aGlzLnJlY3RpZnlQbGFjZW1lbnQucmVwbGFjZSgnYm90dG9tJywgJ3RvcCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcclxuICAgICAgICAgICAgY2FzZSAncmlnaHQtdG9wJzpcclxuICAgICAgICAgICAgY2FzZSAncmlnaHQtYm90dG9tJzpcclxuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh0aGlzLmhvc3RCb3VuZGluZ0NsaWVudFJlY3QucmlnaHQgLSB0aGlzLnJlZmVyZW5jZUJvdW5kaW5nUmVjdC5yaWdodCkgPCB0b29sdGlwU2l6ZS53aWR0aCArIGFycm93U2l6ZS53aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWuveW6puaUvuS4jeW8gO+8jOi9rOWQkVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVjdGlmeVBsYWNlbWVudCA9IHRoaXMucmVjdGlmeVBsYWNlbWVudC5yZXBsYWNlKCdyaWdodCcsICdsZWZ0Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbGVmdCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ2xlZnQtdG9wJzpcclxuICAgICAgICAgICAgY2FzZSAnbGVmdC1ib3R0b20nOlxyXG4gICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMuaG9zdEJvdW5kaW5nQ2xpZW50UmVjdC5sZWZ0IC0gdGhpcy5yZWZlcmVuY2VCb3VuZGluZ1JlY3QubGVmdCkgPCB0b29sdGlwU2l6ZS53aWR0aCArIGFycm93U2l6ZS53aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWuveW6puaUvuS4jeW8gO+8jOi9rOWQkVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVjdGlmeVBsYWNlbWVudCA9IHRoaXMucmVjdGlmeVBsYWNlbWVudC5yZXBsYWNlKCdsZWZ0JywgJ3JpZ2h0Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnJlY3RpZnlQbGFjZW1lbnQgIT0gdGhpcy5wbGFjZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy50b29sdGlwTm9kZS5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2JzLXRvb2x0aXAtJyArIHRoaXMub2Zmc2V0RGlyZWN0aW9uKHRoaXMucGxhY2VtZW50KSk7XHJcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcE5vZGUubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdicy10b29sdGlwLScgKyB0aGlzLm9mZnNldERpcmVjdGlvbih0aGlzLnJlY3RpZnlQbGFjZW1lbnQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOWIpOaWreaYr+WQpui2heWHuui+ueeVjFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGlzT3ZlckJvdW5kaW5nKHJlY3QsIHZhbHVlKSB7XHJcbiAgICAgICAgbGV0IGlzT3ZlciA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBuZXdWYWx1ZSA9IDA7XHJcbiAgICAgICAgc3dpdGNoIChyZWN0KSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlIDw9IHRoaXMucmVmZXJlbmNlQm91bmRpbmdSZWN0LmxlZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc092ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gdGhpcy5yZWZlcmVuY2VCb3VuZGluZ1JlY3QubGVmdCArIHRoaXMucmVjdGlmeUd1dHRlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdyaWdodCc6XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPj0gdGhpcy5yZWZlcmVuY2VCb3VuZGluZ1JlY3QucmlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc092ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gdGhpcy5yZWZlcmVuY2VCb3VuZGluZ1JlY3QucmlnaHQgLSB0aGlzLnJlY3RpZnlHdXR0ZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndG9wJzpcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA8PSB0aGlzLnJlZmVyZW5jZUJvdW5kaW5nUmVjdC50b3ApIHtcclxuICAgICAgICAgICAgICAgICAgICBpc092ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gdGhpcy5yZWZlcmVuY2VCb3VuZGluZ1JlY3QudG9wICsgdGhpcy5yZWN0aWZ5R3V0dGVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPj0gdGhpcy5yZWZlcmVuY2VCb3VuZGluZ1JlY3QuYm90dG9tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNPdmVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IHRoaXMucmVmZXJlbmNlQm91bmRpbmdSZWN0LmJvdHRvbSAtIHRoaXMucmVjdGlmeUd1dHRlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyBpc092ZXIsIG5ld1ZhbHVlIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb250YWluc0VsKGRhdGFzLCBzcGVjaWFsRWwgPSAnJykge1xyXG4gICAgICAgIGlmICghc3BlY2lhbEVsKSB7XHJcbiAgICAgICAgICAgIHNwZWNpYWxFbCA9IHRoaXMucmVjdGlmeVBsYWNlbWVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZGF0YXNbaV0gPT0gc3BlY2lhbEVsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiDorqHnrpd0b29sdGlw5pyA5paw5L2N572uICovXHJcbiAgICBjYWxjdWxhdGVQb3NpdGlvbihob3N0UG9zaXRpb246IGFueSkge1xyXG4gICAgICAgIGxldCB0b3AgPSAwO1xyXG4gICAgICAgIGxldCBsZWZ0ID0gMDtcclxuICAgICAgICBsZXQgcmlnaHQgPSAwO1xyXG4gICAgICAgIGxldCBib3R0b20gPSAwO1xyXG4gICAgICAgIC8vIOaVtOS4quaPkOekuuS9jee9rlxyXG4gICAgICAgIGNvbnN0IHRvb2x0aXBTaXplID0gdGhpcy50b29sdGlwTm9kZS5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IGFycm93U2l6ZSA9IHRoaXMuYXJyb3dOb2RlLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgICAgIHN3aXRjaCAodGhpcy5yZWN0aWZ5UGxhY2VtZW50KSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3RvcCc6XHJcbiAgICAgICAgICAgICAgICB0b3AgPSBob3N0UG9zaXRpb24udG9wIC0gdG9vbHRpcFNpemUuaGVpZ2h0IC0gMjtcclxuICAgICAgICAgICAgICAgIGxlZnQgPSBob3N0UG9zaXRpb24ubGVmdCArIChob3N0UG9zaXRpb24ud2lkdGggLSB0b29sdGlwU2l6ZS53aWR0aCkgLyAyO1xyXG4gICAgICAgICAgICAgICAgcmlnaHQgPSBsZWZ0ICsgdG9vbHRpcFNpemUud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnbGVmdCc6XHJcbiAgICAgICAgICAgICAgICB0b3AgPSBob3N0UG9zaXRpb24udG9wICsgKGhvc3RQb3NpdGlvbi5oZWlnaHQgLSB0b29sdGlwU2l6ZS5oZWlnaHQpIC8gMjtcclxuICAgICAgICAgICAgICAgIGxlZnQgPSBob3N0UG9zaXRpb24ubGVmdCAtIHRvb2x0aXBTaXplLndpZHRoIC0gMjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdyaWdodCc6XHJcbiAgICAgICAgICAgICAgICB0b3AgPSBob3N0UG9zaXRpb24udG9wICsgKGhvc3RQb3NpdGlvbi5oZWlnaHQgLSB0b29sdGlwU2l6ZS5oZWlnaHQpIC8gMjtcclxuICAgICAgICAgICAgICAgIGxlZnQgPSBob3N0UG9zaXRpb24ucmlnaHQgKyAyO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XHJcbiAgICAgICAgICAgICAgICB0b3AgPSBob3N0UG9zaXRpb24uYm90dG9tICsgYXJyb3dTaXplLmhlaWdodCArIDI7XHJcbiAgICAgICAgICAgICAgICBsZWZ0ID0gaG9zdFBvc2l0aW9uLmxlZnQgKyAoaG9zdFBvc2l0aW9uLndpZHRoIC0gdG9vbHRpcFNpemUud2lkdGgpIC8gMjtcclxuICAgICAgICAgICAgICAgIHJpZ2h0ID0gbGVmdCArIHRvb2x0aXBTaXplLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3RvcC1sZWZ0JzpcclxuICAgICAgICAgICAgICAgIHRvcCA9IGhvc3RQb3NpdGlvbi50b3AgLSB0b29sdGlwU2l6ZS5oZWlnaHQgLSAyO1xyXG4gICAgICAgICAgICAgICAgbGVmdCA9IGhvc3RQb3NpdGlvbi5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgcmlnaHQgPSBsZWZ0ICsgdG9vbHRpcFNpemUud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndG9wLXJpZ2h0JzpcclxuICAgICAgICAgICAgICAgIHRvcCA9IGhvc3RQb3NpdGlvbi50b3AgLSB0b29sdGlwU2l6ZS5oZWlnaHQgLSAyO1xyXG4gICAgICAgICAgICAgICAgbGVmdCA9IGhvc3RQb3NpdGlvbi5yaWdodCAtIHRvb2x0aXBTaXplLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgcmlnaHQgPSBob3N0UG9zaXRpb24ucmlnaHQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAncmlnaHQtdG9wJzpcclxuICAgICAgICAgICAgICAgIHRvcCA9IGhvc3RQb3NpdGlvbi50b3A7XHJcbiAgICAgICAgICAgICAgICBsZWZ0ID0gaG9zdFBvc2l0aW9uLnJpZ2h0ICsgMjtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXJyb3dOb2RlLm5hdGl2ZUVsZW1lbnQuc3R5bGUudG9wID0gJzEwJSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAncmlnaHQtYm90dG9tJzpcclxuICAgICAgICAgICAgICAgIHRvcCA9IGhvc3RQb3NpdGlvbi5ib3R0b20gLSB0b29sdGlwU2l6ZS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBsZWZ0ID0gaG9zdFBvc2l0aW9uLnJpZ2h0ICsgMjtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXJyb3dOb2RlLm5hdGl2ZUVsZW1lbnQuc3R5bGUuYm90dG9tID0gJzEwJSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnYm90dG9tLWxlZnQnOlxyXG4gICAgICAgICAgICAgICAgdG9wID0gaG9zdFBvc2l0aW9uLmJvdHRvbSArIGFycm93U2l6ZS5oZWlnaHQgKyAyO1xyXG4gICAgICAgICAgICAgICAgbGVmdCA9IGhvc3RQb3NpdGlvbi5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgcmlnaHQgPSBsZWZ0ICsgdG9vbHRpcFNpemUud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnYm90dG9tLXJpZ2h0JzpcclxuICAgICAgICAgICAgICAgIHRvcCA9IGhvc3RQb3NpdGlvbi5ib3R0b20gKyBhcnJvd1NpemUuaGVpZ2h0ICsgMjtcclxuICAgICAgICAgICAgICAgIGxlZnQgPSBob3N0UG9zaXRpb24ucmlnaHQgLSB0b29sdGlwU2l6ZS53aWR0aDtcclxuICAgICAgICAgICAgICAgIHJpZ2h0ID0gaG9zdFBvc2l0aW9uLnJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2xlZnQtdG9wJzpcclxuICAgICAgICAgICAgICAgIHRvcCA9IGhvc3RQb3NpdGlvbi50b3A7XHJcbiAgICAgICAgICAgICAgICBsZWZ0ID0gaG9zdFBvc2l0aW9uLmxlZnQgLSB0b29sdGlwU2l6ZS53aWR0aCAtIDI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFycm93Tm9kZS5uYXRpdmVFbGVtZW50LnN0eWxlLnRvcCA9ICcxMCUnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2xlZnQtYm90dG9tJzpcclxuICAgICAgICAgICAgICAgIHRvcCA9IGhvc3RQb3NpdGlvbi5ib3R0b20gLSB0b29sdGlwU2l6ZS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBsZWZ0ID0gaG9zdFBvc2l0aW9uLmxlZnQgLSB0b29sdGlwU2l6ZS53aWR0aCAtIDI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFycm93Tm9kZS5uYXRpdmVFbGVtZW50LnN0eWxlLmJvdHRvbSA9ICcxMCUnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgb3ZlclJlc3VsdDtcclxuICAgICAgICBsZXQgYXJyb3dMZWZ0ID0gMDtcclxuICAgICAgICBsZXQgYXJyb3dUb3AgPSAwXHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnJlY3RpZnlQbGFjZW1lbnQpIHtcclxuICAgICAgICAgICAgY2FzZSAndG9wJzpcclxuICAgICAgICAgICAgY2FzZSAndG9wLWxlZnQnOlxyXG4gICAgICAgICAgICBjYXNlICd0b3AtcmlnaHQnOlxyXG4gICAgICAgICAgICBjYXNlICdib3R0b20nOlxyXG4gICAgICAgICAgICBjYXNlICdib3R0b20tbGVmdCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbS1yaWdodCc6XHJcbiAgICAgICAgICAgICAgICBvdmVyUmVzdWx0ID0gdGhpcy5pc092ZXJCb3VuZGluZygnbGVmdCcsIGxlZnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG92ZXJSZXN1bHQuaXNPdmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IG92ZXJSZXN1bHQubmV3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG92ZXJSZXN1bHQgPSB0aGlzLmlzT3ZlckJvdW5kaW5nKCdyaWdodCcsIHJpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3ZlclJlc3VsdC5pc092ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA9IG92ZXJSZXN1bHQubmV3VmFsdWUgLSB0b29sdGlwU2l6ZS53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhcnJvd0xlZnQgPSBsZWZ0IC0gaG9zdFBvc2l0aW9uLmxlZnQgLSBob3N0UG9zaXRpb24ud2lkdGggKiAwLjUgKyBhcnJvd1NpemUud2lkdGggKiAwLjU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWN0aWZ5UGxhY2VtZW50LmluZGV4T2YoJy1sZWZ0JykgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dMZWZ0ICs9IGhvc3RQb3NpdGlvbi53aWR0aCAqIDAuNDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yZWN0aWZ5UGxhY2VtZW50LmluZGV4T2YoJy1yaWdodCcpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycm93TGVmdCAtPSBob3N0UG9zaXRpb24ud2lkdGggKiAwLjQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFycm93Tm9kZS5uYXRpdmVFbGVtZW50LnN0eWxlLmxlZnQgPSBNYXRoLmFicyhhcnJvd0xlZnQpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgb3ZlclJlc3VsdCA9IHRoaXMuaXNPdmVyQm91bmRpbmcoJ3RvcCcsIHRvcCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG92ZXJSZXN1bHQuaXNPdmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wID0gb3ZlclJlc3VsdC5uZXdWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3ZlclJlc3VsdCA9IHRoaXMuaXNPdmVyQm91bmRpbmcoJ2JvdHRvbScsIGJvdHRvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG92ZXJSZXN1bHQuaXNPdmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCA9IG92ZXJSZXN1bHQubmV3VmFsdWUgLSB0b29sdGlwU2l6ZS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYXJyb3dUb3AgPSB0b3AgLSBob3N0UG9zaXRpb24udG9wIC0gaG9zdFBvc2l0aW9uLmhlaWdodCAqIDAuNSArIGFycm93U2l6ZS5oZWlnaHQgKiAwLjU7O1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVjdGlmeVBsYWNlbWVudC5pbmRleE9mKCctdG9wJykgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dUb3AgKz0gaG9zdFBvc2l0aW9uLmhlaWdodCAqIDAuNDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yZWN0aWZ5UGxhY2VtZW50LmluZGV4T2YoJy1ib3R0b20nKSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnJvd1RvcCAtPSBob3N0UG9zaXRpb24uaGVpZ2h0ICogMC40O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5hcnJvd05vZGUubmF0aXZlRWxlbWVudC5zdHlsZS50b3AgPSBNYXRoLmFicyhhcnJvd1RvcCkgKyAncHgnO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRvb2x0aXBOb2RlLm5hdGl2ZUVsZW1lbnQuc3R5bGUudG9wID0gdG9wICsgJ3B4JztcclxuICAgICAgICB0aGlzLnRvb2x0aXBOb2RlLm5hdGl2ZUVsZW1lbnQuc3R5bGUubGVmdCA9IGxlZnQgKyAncHgnO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKiBcclxuICAgICoxMuS4quS9jee9ruWQjeino+aekCBcclxuICAgICog5Zug6KGo5Y2V55Sf5oiQ5rKh5pyJ5o6S6ZmkZmFjdG9yeSzogIzkuJTkvb/nlKjkuoZbY2xhc3NdLOWPquiDveWcqOatpOWkhOWPmOabtFxyXG4gICAgKi9cclxuICAgIG9mZnNldERpcmVjdGlvbih0cGxhY2VtZW50ID0gJycpIHtcclxuICAgICAgICBpZiAoIXRwbGFjZW1lbnQpIHtcclxuICAgICAgICAgICAgdHBsYWNlbWVudCA9IHRoaXMucGxhY2VtZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHBsYWNlbWVudC5pbmRleE9mKCctJykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdHBsYWNlbWVudC5pbmRleE9mKCctJyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cGxhY2VtZW50LnN1YnN0cmluZygwLCBpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cGxhY2VtZW50O1xyXG4gICAgfVxyXG59XHJcbiJdfQ==