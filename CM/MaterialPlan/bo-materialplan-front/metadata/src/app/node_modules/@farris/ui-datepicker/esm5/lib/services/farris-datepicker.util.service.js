/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-09-04 07:40:04
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-09-04 15:21:46
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Injectable } from '@angular/core';
import { KeyCode, KeyName, ShowType } from '../enums/public-api';
import { D, DD, M, MM, MMM, YYYY, SU, MO, TU, WE, TH, FR, SA, ZERO_STR, EMPTY_STR } from '../constants/constants';
var UtilService = /** @class */ (function () {
    function UtilService() {
        this.weekDays = [SU, MO, TU, WE, TH, FR, SA];
    }
    /**
     * @param {?} dateStr
     * @param {?} options
     * @param {?=} isReturn
     * @return {?}
     */
    UtilService.prototype.isDateValid = /**
     * @param {?} dateStr
     * @param {?} options
     * @param {?=} isReturn
     * @return {?}
     */
    function (dateStr, options, isReturn) {
        if (isReturn === void 0) { isReturn = false; }
        // tslint:disable-next-line:one-variable-per-declaration
        /** @type {?} */
        var _dateStr;
        /** @type {?} */
        var hour = 0;
        /** @type {?} */
        var minute = 0;
        /** @type {?} */
        var second = 0;
        /** @type {?} */
        var returnDate = this.resetDate();
        if (!dateStr || !dateStr.length) {
            return returnDate;
        }
        var dateFormat = options.dateFormat, minYear = options.minYear, maxYear = options.maxYear, monthLabels = options.monthLabels, showTime = options.showTime, returnFormat = options.returnFormat, showType = options.showType;
        /** @type {?} */
        var _st = showTime;
        /** @type {?} */
        var formatStr = dateFormat;
        if (isReturn) {
            formatStr = returnFormat.replace(/[年,月]/g, '-').replace(/[日]/, '').replace(/[时,分]/g, ':').replace(/[秒]/g, '');
            dateStr = dateStr.replace(/[年,月]/g, '-').replace(/[日]/, '').replace(/[时,分]/g, ':').replace(/[秒]/g, '');
            if (dateStr[dateStr.length - 1] === '-' || dateStr[dateStr.length - 1] === ':') {
                dateStr = dateStr.substring(0, dateStr.length - 1);
            }
            if (!showTime && returnFormat.toLocaleLowerCase().indexOf('hh:mm') > -1) {
                _st = true;
            }
        }
        /** @type {?} */
        var daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        /** @type {?} */
        var isMonthStr = formatStr.indexOf(MMM) !== -1;
        /** @type {?} */
        var delimeters = formatStr.match(/[^(DdMmYy)]{1,}/g);
        if (_st && dateStr) {
            _dateStr = dateStr.split(' ')[0];
            Object.assign(returnDate, { hour: 0, minute: 0, second: 0 });
            /** @type {?} */
            var timeStr = dateStr.split(' ')[1];
            if (timeStr) {
                /** @type {?} */
                var _timer = timeStr.replace('时', ':').replace('分', ':').replace('秒', '').split(':');
                if (_timer[0]) {
                    hour = Number(_timer[0].substr(0, 2));
                    hour = isNaN(hour) ? 0 : hour;
                }
                if (_timer[1]) {
                    minute = Number(_timer[1].substr(0, 2));
                    minute = isNaN(minute) ? 0 : minute;
                }
                if (_timer[2]) {
                    second = Number(_timer[2].substr(0, 2));
                    second = isNaN(second) ? 0 : second;
                }
            }
            else {
                delimeters = undefined;
                /** @type {?} */
                var reg = /^\d{1,}$/;
                if (reg.test(dateStr)) { // 验证传入的格式为 yyyyMMddHHmmss
                    // 验证传入的格式为 yyyyMMddHHmmss
                    /** @type {?} */
                    var df = formatStr;
                    _dateStr = dateStr.substr(0, 8);
                    /** @type {?} */
                    var _timer = dateStr.substr(8);
                    if (_timer) {
                        if (df.includes('HH')) {
                            if (_timer) {
                                hour = +_timer.slice(0, 2);
                                _timer = _timer.slice(2);
                            }
                        }
                        if (df.includes('mm')) {
                            if (_timer) {
                                minute = +_timer.slice(0, 2);
                                _timer = _timer.slice(2);
                            }
                        }
                        if (df.includes('ss')) {
                            if (_timer) {
                                second = +_timer.slice(0, 2);
                            }
                        }
                    }
                }
            }
        }
        else {
            _dateStr = dateStr ? dateStr.split(' ')[0] : '';
        }
        /** @type {?} */
        var dateValue = this.getDateValue(_dateStr, formatStr, delimeters);
        /** @type {?} */
        var year = this.getNumberByValue(dateValue[0]);
        /** @type {?} */
        var month = isMonthStr
            ? this.getMonthNumberByMonthName(dateValue[1], monthLabels)
            : this.getNumberByValue(dateValue[1]);
        /** @type {?} */
        var day = this.getNumberByValue(dateValue[2]);
        if (showType === ShowType.noDateAndMonth) {
            return { year: year, month: 1, day: 1 };
        }
        if (month !== -1 && day !== -1 && year !== -1) {
            if (year < minYear || year > maxYear || month < 1 || month > 12) {
                return returnDate;
            }
            /** @type {?} */
            var date = _st ? { year: year, month: month, day: day, hour: hour, minute: minute, second: second } : { year: year, month: month, day: day };
            if (this.isDisabledDate(date, options)) {
                return returnDate;
            }
            if (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) {
                daysInMonth[1] = 29;
            }
            if (day < 1 || day > daysInMonth[month - 1]) {
                return returnDate;
            }
            // Valid date
            if (options.showType === ShowType.noDate) {
                return { year: date.year, month: date.month };
            }
            else if (options.showType === ShowType.noDateAndMonth) {
                return { year: date.year };
            }
            else {
                return date;
            }
        }
        return returnDate;
    };
    /**
     * @param {?} dateRangeStr
     * @param {?} options
     * @return {?}
     */
    UtilService.prototype.isDateValidDateRange = /**
     * @param {?} dateRangeStr
     * @param {?} options
     * @return {?}
     */
    function (dateRangeStr, options) {
        /** @type {?} */
        var dateRange = {
            begin: this.resetDate(),
            end: this.resetDate()
        };
        if (dateRangeStr && dateRangeStr.length) {
            /** @type {?} */
            var dates = dateRangeStr.split(options.dateRangeDatesDelimiter);
            if (dates && dates.length === 2) {
                var _a = tslib_1.__read(dates, 2), beginDate = _a[0], endDate = _a[1];
                /** @type {?} */
                var begin = this.isDateValid(beginDate, options, true);
                if (this.isInitializedDate(begin)) {
                    /** @type {?} */
                    var end = this.isDateValid(endDate, options, true);
                    if (this.isInitializedDate(end) && this.isDateSameOrEarlier(begin, end)) {
                        dateRange = { begin: begin, end: end };
                    }
                }
            }
        }
        return dateRange;
    };
    /**
     * @param {?} dateStr
     * @param {?} dateFormat
     * @param {?} delimeters
     * @return {?}
     */
    UtilService.prototype.getDateValue = /**
     * @param {?} dateStr
     * @param {?} dateFormat
     * @param {?} delimeters
     * @return {?}
     */
    function (dateStr, dateFormat, delimeters) {
        /** @type {?} */
        var da = [];
        if (delimeters) {
            /** @type {?} */
            var del = delimeters[0];
            if (delimeters[0] !== delimeters[1]) {
                del = delimeters[0] + delimeters[1];
                if (delimeters[2] && delimeters[1] !== delimeters[2]) {
                    del = del + delimeters[2];
                }
            }
            /** @type {?} */
            var re = new RegExp('[' + del + ']');
            /** @type {?} */
            var ds = dateStr.split(re);
            /** @type {?} */
            var df = dateFormat.split(re);
            for (var i = 0; i < df.length; i++) {
                if (df[i].indexOf(YYYY) !== -1) {
                    da[0] = { value: ds[i], format: df[i] };
                }
                if (df[i].indexOf(M) !== -1) {
                    da[1] = ds[i] === undefined ? { value: '1', format: df[i] } : { value: ds[i], format: df[i] };
                }
                if (df[i].indexOf(D) !== -1) {
                    da[2] = ds[i] === undefined ? { value: '1', format: df[i] } : { value: ds[i], format: df[i] };
                }
            }
        }
        else {
            /** @type {?} */
            var yearIndex = (dateFormat + '').indexOf(YYYY);
            /** @type {?} */
            var monthIndex = (dateFormat + '').indexOf(MM);
            /** @type {?} */
            var dayIndex = (dateFormat + '').indexOf(DD);
            if (yearIndex >= 0) {
                da[0] = { value: dateStr.substring(yearIndex, yearIndex + 4), format: dateFormat.substring(yearIndex, yearIndex + 4) };
            }
            if (monthIndex >= 0) {
                da[1] = { value: dateStr.substring(monthIndex, monthIndex + 2), format: dateFormat.substring(monthIndex, monthIndex + 2) };
            }
            if (dayIndex >= 0) {
                da[2] = { value: dateStr.substring(dayIndex, dayIndex + 2), format: dateFormat.substring(dayIndex, dayIndex + 2) };
            }
        }
        return da;
    };
    /**
     * @param {?} df
     * @param {?} monthLabels
     * @return {?}
     */
    UtilService.prototype.getMonthNumberByMonthName = /**
     * @param {?} df
     * @param {?} monthLabels
     * @return {?}
     */
    function (df, monthLabels) {
        if (df.value) {
            for (var key = 1; key <= 12; key++) {
                if (df.value.toLowerCase() === monthLabels[key].toLowerCase()) {
                    return key;
                }
            }
        }
        return -1;
    };
    /**
     * @param {?} df
     * @return {?}
     */
    UtilService.prototype.getNumberByValue = /**
     * @param {?} df
     * @return {?}
     */
    function (df) {
        if (!df) {
            return 1;
        }
        if (!/^\d+$/.test(df.value)) {
            return -1;
        }
        /** @type {?} */
        var nbr = Number(df.value);
        if ((df.format.length === 1 && df.value.length !== 1 && nbr < 10) ||
            (df.format.length === 1 && df.value.length !== 2 && nbr >= 10)) {
            nbr = -1;
        }
        else if (df.format.length === 2 && df.value.length > 2) {
            nbr = -1;
        }
        return nbr;
    };
    /**
     * @param {?} monthString
     * @return {?}
     */
    UtilService.prototype.parseDefaultMonth = /**
     * @param {?} monthString
     * @return {?}
     */
    function (monthString) {
        /** @type {?} */
        var month = { monthTxt: EMPTY_STR, monthNbr: 0, year: 0 };
        if (monthString !== EMPTY_STR) {
            /** @type {?} */
            var split = monthString.split(monthString.match(/[^0-9]/)[0]);
            month.monthNbr = split[0].length === 2 ? Number(split[0]) : Number(split[1]);
            month.year = split[0].length === 2 ? Number(split[1]) : Number(split[0]);
        }
        return month;
    };
    /**
     * @param {?} date
     * @param {?} options
     * @return {?}
     */
    UtilService.prototype.isDisabledDate = /**
     * @param {?} date
     * @param {?} options
     * @return {?}
     */
    function (date, options) {
        var e_1, _a, e_2, _b, e_3, _c;
        var minYear = options.minYear, maxYear = options.maxYear, disableUntil = options.disableUntil, disableSince = options.disableSince, disableWeekends = options.disableWeekends, disableDates = options.disableDates, disableDateRanges = options.disableDateRanges, disableWeekdays = options.disableWeekdays, enableDates = options.enableDates;
        // for (const d of enableDates) {
        //     if (
        //         (d.year === 0 || d.year === date.year) &&
        //         (d.month === 0 || d.month === date.month) &&
        //         d.day === date.day
        //     ) {
        //         return false;
        //     }
        // }
        if ((date.year < minYear && date.month === 12) || (date.year > maxYear && date.month === 1)) {
            return true;
        }
        /** @type {?} */
        var dateMs = this.getTimeInMilliseconds(date);
        if (this.isInitializedDate(disableUntil) && (dateMs + 24 * 60 * 60 * 1000 - 1) < this.getTimeInMilliseconds(disableUntil)) {
            return true;
        }
        if (this.isInitializedDate(disableSince) && dateMs > this.getTimeInMilliseconds(disableSince)) {
            return true;
        }
        if (disableWeekends) {
            /** @type {?} */
            var dayNbr = this.getDayNumber(date);
            if (dayNbr === 0 || dayNbr === 6) {
                return true;
            }
        }
        /** @type {?} */
        var dn = this.getDayNumber(date);
        if (disableWeekdays.length > 0) {
            try {
                for (var disableWeekdays_1 = tslib_1.__values(disableWeekdays), disableWeekdays_1_1 = disableWeekdays_1.next(); !disableWeekdays_1_1.done; disableWeekdays_1_1 = disableWeekdays_1.next()) {
                    var wd = disableWeekdays_1_1.value;
                    if (dn === this.getWeekdayIndex(wd)) {
                        return true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (disableWeekdays_1_1 && !disableWeekdays_1_1.done && (_a = disableWeekdays_1.return)) _a.call(disableWeekdays_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        try {
            for (var disableDates_1 = tslib_1.__values(disableDates), disableDates_1_1 = disableDates_1.next(); !disableDates_1_1.done; disableDates_1_1 = disableDates_1.next()) {
                var d = disableDates_1_1.value;
                if ((d.year === 0 || d.year === date.year) &&
                    (d.month === 0 || d.month === date.month) &&
                    d.day === date.day) {
                    return true;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (disableDates_1_1 && !disableDates_1_1.done && (_b = disableDates_1.return)) _b.call(disableDates_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            for (var disableDateRanges_1 = tslib_1.__values(disableDateRanges), disableDateRanges_1_1 = disableDateRanges_1.next(); !disableDateRanges_1_1.done; disableDateRanges_1_1 = disableDateRanges_1.next()) {
                var d = disableDateRanges_1_1.value;
                if (this.isInitializedDate(d.begin) &&
                    this.isInitializedDate(d.end) &&
                    dateMs >= this.getTimeInMilliseconds(d.begin) &&
                    dateMs <= this.getTimeInMilliseconds(d.end)) {
                    return true;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (disableDateRanges_1_1 && !disableDateRanges_1_1.done && (_c = disableDateRanges_1.return)) _c.call(disableDateRanges_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return false;
    };
    /**
     * @param {?} date
     * @param {?} markedDates
     * @param {?} markWeekends
     * @return {?}
     */
    UtilService.prototype.isMarkedDate = /**
     * @param {?} date
     * @param {?} markedDates
     * @param {?} markWeekends
     * @return {?}
     */
    function (date, markedDates, markWeekends) {
        var e_4, _a, e_5, _b;
        try {
            for (var markedDates_1 = tslib_1.__values(markedDates), markedDates_1_1 = markedDates_1.next(); !markedDates_1_1.done; markedDates_1_1 = markedDates_1.next()) {
                var md = markedDates_1_1.value;
                try {
                    for (var _c = tslib_1.__values(md.dates), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var d = _d.value;
                        if ((d.year === 0 || d.year === date.year) &&
                            (d.month === 0 || d.month === date.month) &&
                            d.day === date.day) {
                            return { marked: true, color: md.color };
                        }
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (markedDates_1_1 && !markedDates_1_1.done && (_a = markedDates_1.return)) _a.call(markedDates_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        if (markWeekends && markWeekends.marked) {
            /** @type {?} */
            var dayNbr = this.getDayNumber(date);
            if (dayNbr === 0 || dayNbr === 6) {
                return { marked: true, color: markWeekends.color };
            }
        }
        return { marked: false, color: EMPTY_STR };
    };
    /**
     * @param {?} date
     * @param {?} sunHighlight
     * @param {?} satHighlight
     * @param {?} highlightDates
     * @return {?}
     */
    UtilService.prototype.isHighlightedDate = /**
     * @param {?} date
     * @param {?} sunHighlight
     * @param {?} satHighlight
     * @param {?} highlightDates
     * @return {?}
     */
    function (date, sunHighlight, satHighlight, highlightDates) {
        var e_6, _a;
        /** @type {?} */
        var dayNbr = this.getDayNumber(date);
        if ((sunHighlight && dayNbr === 0) || (satHighlight && dayNbr === 6)) {
            return true;
        }
        try {
            for (var highlightDates_1 = tslib_1.__values(highlightDates), highlightDates_1_1 = highlightDates_1.next(); !highlightDates_1_1.done; highlightDates_1_1 = highlightDates_1.next()) {
                var d = highlightDates_1_1.value;
                if ((d.year === 0 || d.year === date.year) &&
                    (d.month === 0 || d.month === date.month) &&
                    d.day === date.day) {
                    return true;
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (highlightDates_1_1 && !highlightDates_1_1.done && (_a = highlightDates_1.return)) _a.call(highlightDates_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return false;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    UtilService.prototype.getWeekNumber = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var d = new Date(date.year, date.month - 1, date.day, 0, 0, 0, 0);
        d.setDate(d.getDate() + (d.getDay() === 0 ? -3 : 4 - d.getDay()));
        return Math.round((d.getTime() - new Date(d.getFullYear(), 0, 4).getTime()) / 86400000 / 7) + 1;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    UtilService.prototype.getNowWeekTime = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        date.setDate(date.getDate() - ((date.getDay() + 6) % 7));
        /** @type {?} */
        var begin = {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate()
        };
        date.setDate(date.getDate() + 6);
        /** @type {?} */
        var end = {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate()
        };
        return { begin: begin, end: end };
    };
    /**
     * @param {?} date
     * @param {?} disableUntil
     * @return {?}
     */
    UtilService.prototype.isMonthDisabledByDisableUntil = /**
     * @param {?} date
     * @param {?} disableUntil
     * @return {?}
     */
    function (date, disableUntil) {
        return (this.isInitializedDate(disableUntil) &&
            this.getTimeInMilliseconds(date) <= this.getTimeInMilliseconds(disableUntil));
    };
    /**
     * @param {?} date
     * @param {?} disableSince
     * @return {?}
     */
    UtilService.prototype.isMonthDisabledByDisableSince = /**
     * @param {?} date
     * @param {?} disableSince
     * @return {?}
     */
    function (date, disableSince) {
        return (this.isInitializedDate(disableSince) &&
            this.getTimeInMilliseconds(date) >= this.getTimeInMilliseconds(disableSince));
    };
    /**
     * @param {?} date
     * @param {?} dateRange
     * @param {?} dateFormat
     * @param {?} monthLabels
     * @param {?} rangeDelimiter
     * @param {?} returnFormat
     * @param {?=} dateStr
     * @return {?}
     */
    UtilService.prototype.getDateModel = /**
     * @param {?} date
     * @param {?} dateRange
     * @param {?} dateFormat
     * @param {?} monthLabels
     * @param {?} rangeDelimiter
     * @param {?} returnFormat
     * @param {?=} dateStr
     * @return {?}
     */
    function (date, dateRange, dateFormat, monthLabels, rangeDelimiter, returnFormat, dateStr) {
        if (dateStr === void 0) { dateStr = EMPTY_STR; }
        /** @type {?} */
        var singleDateModel = null;
        /** @type {?} */
        var dateRangeModel = null;
        if (date) {
            singleDateModel = {
                date: date,
                jsDate: this.getDate2(date),
                formatted: dateStr.length ? dateStr : this.formatDate(date, dateFormat, monthLabels),
                returnFormatted: this.formatDate(date, returnFormat, monthLabels),
                epoc: this.getEpocTime(date)
            };
        }
        else {
            dateRangeModel = {
                beginDate: dateRange.begin,
                beginJsDate: this.getDate(dateRange.begin),
                beginEpoc: this.getEpocTime(dateRange.begin),
                endDate: dateRange.end,
                endJsDate: this.getDate(dateRange.end),
                endEpoc: this.getEpocTime(dateRange.end),
                formatted: this.formatDate(dateRange.begin, dateFormat, monthLabels) +
                    rangeDelimiter +
                    this.formatDate(dateRange.end, dateFormat, monthLabels),
                returnFormatted: this.formatDate(dateRange.begin, returnFormat, monthLabels) +
                    rangeDelimiter +
                    this.formatDate(dateRange.end, returnFormat, monthLabels),
            };
        }
        return {
            isRange: date === null,
            singleDate: singleDateModel,
            dateRange: dateRangeModel
        };
    };
    /**
     * @param {?} date
     * @param {?} dateFormat
     * @param {?} monthLabels
     * @return {?}
     */
    UtilService.prototype.formatDate = /**
     * @param {?} date
     * @param {?} dateFormat
     * @param {?} monthLabels
     * @return {?}
     */
    function (date, dateFormat, monthLabels) {
        if (!date.month && dateFormat.indexOf(MM) === -1) {
            dateFormat = this.delete(dateFormat, MM);
        }
        if (!date.day && dateFormat.indexOf(DD) === -1) {
            dateFormat = this.delete(dateFormat, DD);
        }
        /** @type {?} */
        var formatted = dateFormat.replace(YYYY, String(date.year));
        if (dateFormat.indexOf(M) === -1) {
            formatted = formatted.replace(MM, '01');
        }
        else {
            if (dateFormat.indexOf(MMM) !== -1) {
                formatted = formatted.replace(MMM, monthLabels[date.month]);
            }
            else if (dateFormat.indexOf(MM) !== -1) {
                formatted = formatted.replace(MM, this.preZero(date.month || 1));
            }
            else {
                formatted = formatted.replace(M, String(date.month || 1));
            }
        }
        if (dateFormat.indexOf(DD) === -1) {
            formatted = formatted.replace(DD, '01');
        }
        else if (dateFormat.indexOf(DD) !== -1) {
            formatted = formatted.replace(DD, this.preZero(date.day || 1));
        }
        else {
            formatted = formatted.replace(D, String(date.day || 1));
        }
        formatted = formatted.replace('MM', 'mm').replace('HH', this.preZero(date.hour || 0))
            .replace('mm', this.preZero(date.minute || 0))
            .replace('ss', this.preZero(date.second || 0));
        return formatted && formatted.length > 2 ? formatted : '';
    };
    /**
     * @param {?} format
     * @param {?} delStr
     * @return {?}
     */
    UtilService.prototype.delete = /**
     * @param {?} format
     * @param {?} delStr
     * @return {?}
     */
    function (format, delStr) {
        /** @type {?} */
        var re = format.match(/[^(DdMmYy)]{1,}/g);
        /** @type {?} */
        var index = format.indexOf(delStr);
        if (index < 0) {
            return format;
        }
        else if (index === 0) {
            if (re) {
                return format.substring(3);
            }
            else {
                return format.substring(2);
            }
        }
        else if (index + 2 === format.length) {
            if (re) {
                return format.substring(0, format.length - 3);
            }
            else {
                return format.substring(0, format.length - 2);
            }
        }
        else {
            if (re) {
                return format.substring(0, index) + format.substring(index + 3);
            }
            else {
                return format.substring(0, index) + format.substring(index + 2);
            }
        }
    };
    /**
     * @param {?} model
     * @return {?}
     */
    UtilService.prototype.getFormattedDate = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        return !model.isRange ? model.singleDate.formatted : model.dateRange.formatted;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    UtilService.prototype.preZero = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        return val < 10 ? ZERO_STR + Number(val) : String(val);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    UtilService.prototype.isInitializedDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return date && date.year !== 0 && date.month !== 0 && date.day !== 0;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    UtilService.prototype.isInitializedMonth = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return date && date.year !== 0 && date.month !== 0;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    UtilService.prototype.isInitializedYear = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return date && date.year !== 0;
    };
    /**
     * @param {?} firstDate
     * @param {?} secondDate
     * @return {?}
     */
    UtilService.prototype.isDateEarlier = /**
     * @param {?} firstDate
     * @param {?} secondDate
     * @return {?}
     */
    function (firstDate, secondDate) {
        return this.getTimeInMilliseconds(firstDate) < this.getTimeInMilliseconds(secondDate);
    };
    /**
     * @param {?} firstDate
     * @param {?} secondDate
     * @return {?}
     */
    UtilService.prototype.isDateSameOrEarlier = /**
     * @param {?} firstDate
     * @param {?} secondDate
     * @return {?}
     */
    function (firstDate, secondDate) {
        return this.getTimeInMilliseconds(firstDate) <= this.getTimeInMilliseconds(secondDate);
    };
    /**
     * @param {?} firstDate
     * @param {?} secondDate
     * @return {?}
     */
    UtilService.prototype.isDateSame = /**
     * @param {?} firstDate
     * @param {?} secondDate
     * @return {?}
     */
    function (firstDate, secondDate) {
        return this.getTimeInMilliseconds(firstDate) === this.getTimeInMilliseconds(secondDate);
    };
    /**
     * @param {?} dateRange
     * @param {?} date
     * @return {?}
     */
    UtilService.prototype.isDateRangeBeginOrEndSame = /**
     * @param {?} dateRange
     * @param {?} date
     * @return {?}
     */
    function (dateRange, date) {
        /** @type {?} */
        var dateMs = this.getTimeInMilliseconds(date);
        return (this.getTimeInMilliseconds(dateRange.begin) === dateMs ||
            this.getTimeInMilliseconds(dateRange.end) === dateMs);
    };
    /**
     * @param {?} date
     * @param {?} dateRange
     * @return {?}
     */
    UtilService.prototype.isDateInRange = /**
     * @param {?} date
     * @param {?} dateRange
     * @return {?}
     */
    function (date, dateRange) {
        if (!this.isInitializedDate(dateRange.begin) || !this.isInitializedDate(dateRange.end)) {
            return false;
        }
        return this.isDateSameOrEarlier(dateRange.begin, date) && this.isDateSameOrEarlier(date, dateRange.end);
    };
    /**
     * @return {?}
     */
    UtilService.prototype.resetDate = /**
     * @return {?}
     */
    function () {
        return { year: 0, month: 0, day: 0 };
    };
    /**
     * @param {?} date
     * @return {?}
     */
    UtilService.prototype.getTimeInMilliseconds = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.getDate(date).getTime();
    };
    /**
     * @param {?} date
     * @return {?}
     */
    UtilService.prototype.getDate2 = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var now = new Date();
        if (!date.year) {
            date.year = now.getFullYear();
        }
        if (!date.month) {
            date.month = now.getMonth() + 1;
        }
        if (!date.day) {
            date.day = 1;
        }
        return new Date(date.year, date.month - 1, date.day, date.hour ? date.hour : 0, date.minute ? date.minute : 0, date.second ? date.second : 0, 0);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    UtilService.prototype.getDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return new Date(date.year || 0, date.month ? date.month - 1 : 0, date.day || 0, date.hour ? date.hour : 0, date.minute ? date.minute : 0, date.second ? date.second : 0, 0);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    UtilService.prototype.getDayNumber = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return new Date(date.year, date.month - 1, date.day, date.hour ? date.hour : 0, date.minute ? date.minute : 0, date.second ? date.second : 0, 0).getDay();
    };
    /**
     * @param {?} wd
     * @return {?}
     */
    UtilService.prototype.getWeekdayIndex = /**
     * @param {?} wd
     * @return {?}
     */
    function (wd) {
        return this.weekDays.indexOf(wd);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    UtilService.prototype.getEpocTime = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return Math.round(this.getTimeInMilliseconds(date) / 1000.0);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    UtilService.prototype.getKeyCodeFromEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var key = event.key || event.keyCode;
        if (key === KeyName.enter || key === KeyCode.enter) {
            return KeyCode.enter;
        }
        else if (key === KeyName.esc || key === KeyCode.esc) {
            return KeyCode.esc;
        }
        else if (key === KeyName.space || key === KeyCode.space) {
            return KeyCode.space;
        }
        else if (key === KeyName.leftArrow || key === KeyCode.leftArrow) {
            return KeyCode.leftArrow;
        }
        else if (key === KeyName.upArrow || key === KeyCode.upArrow) {
            return KeyCode.upArrow;
        }
        else if (key === KeyName.rightArrow || key === KeyCode.rightArrow) {
            return KeyCode.rightArrow;
        }
        else if (key === KeyName.downArrow || key === KeyCode.downArrow) {
            return KeyCode.downArrow;
        }
        else if (key === KeyName.tab || key === KeyCode.tab) {
            return KeyCode.tab;
        }
        else if (key === KeyName.shift || key === KeyCode.shift) {
            return KeyCode.shift;
        }
        else {
            return null;
        }
    };
    /**
     * @param {?} now
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    UtilService.prototype.getNearDate = /**
     * @param {?} now
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    function (now, min, max) {
        /** @type {?} */
        var minMilliseconds = this.getTimeInMilliseconds(min);
        /** @type {?} */
        var maxMilliseconds = this.getTimeInMilliseconds(max);
        /** @type {?} */
        var nowMilliseconds = this.getTimeInMilliseconds(now);
        if (maxMilliseconds - nowMilliseconds > nowMilliseconds - minMilliseconds) {
            return min;
        }
        else {
            return max;
        }
    };
    // 禁用时间对应的小时
    // 选中日期等于左区间日期时，禁用左端点的左部分[0，minHour）
    // 选中日期等于右区间日期时，禁用右端点的右部分(maxHour,23]
    // 禁用时间对应的小时
    // 选中日期等于左区间日期时，禁用左端点的左部分[0，minHour）
    // 选中日期等于右区间日期时，禁用右端点的右部分(maxHour,23]
    /**
     * @param {?} min
     * @param {?} max
     * @param {?} currentDate
     * @return {?}
     */
    UtilService.prototype.disabledHours = 
    // 禁用时间对应的小时
    // 选中日期等于左区间日期时，禁用左端点的左部分[0，minHour）
    // 选中日期等于右区间日期时，禁用右端点的右部分(maxHour,23]
    /**
     * @param {?} min
     * @param {?} max
     * @param {?} currentDate
     * @return {?}
     */
    function (min, max, currentDate) {
        /** @type {?} */
        var minHour = min.hour;
        /** @type {?} */
        var maxHour = max.hour;
        /** @type {?} */
        var res = [];
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: min.year, month: min.month, day: min.day })) {
            while (minHour-- >= 0) {
                res.push(minHour);
            }
        }
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: max.year, month: max.month, day: max.day })) {
            while (maxHour++ < 24) {
                res.push(maxHour);
            }
        }
        return res;
    };
    //禁用时间对应的分钟 
    //选中日期等于左区间日期时，禁用左端点的左部分[0，minMinute）
    //选中日期等于右区间日期时，禁用右端点的右部分（maxMinute，59]
    //禁用时间对应的分钟 
    //选中日期等于左区间日期时，禁用左端点的左部分[0，minMinute）
    //选中日期等于右区间日期时，禁用右端点的右部分（maxMinute，59]
    /**
     * @param {?} min
     * @param {?} max
     * @param {?} _hour
     * @param {?} currentDate
     * @return {?}
     */
    UtilService.prototype.disabledMinutes = 
    //禁用时间对应的分钟 
    //选中日期等于左区间日期时，禁用左端点的左部分[0，minMinute）
    //选中日期等于右区间日期时，禁用右端点的右部分（maxMinute，59]
    /**
     * @param {?} min
     * @param {?} max
     * @param {?} _hour
     * @param {?} currentDate
     * @return {?}
     */
    function (min, max, _hour, currentDate) {
        /** @type {?} */
        var maxHour = max.hour;
        /** @type {?} */
        var maxMinute = max.minute;
        /** @type {?} */
        var minHour = min.hour;
        /** @type {?} */
        var minMinute = min.minute;
        /** @type {?} */
        var res = [];
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: min.year, month: min.month, day: min.day })) {
            if (_hour == minHour) {
                while (minMinute-- >= 0) {
                    res.push(minMinute);
                }
            }
        }
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: max.year, month: max.month, day: max.day })) {
            if (_hour == maxHour) {
                while (maxMinute++ < 60) {
                    res.push(maxMinute);
                }
            }
        }
        return res;
    };
    //禁用时间对应的秒 
    //选中日期等于左区间日期时，禁用左端点的左部分[0，minSecond）
    //选中日期等于右区间日期时，禁用右端点的右部分（maxSecond，59]
    //禁用时间对应的秒 
    //选中日期等于左区间日期时，禁用左端点的左部分[0，minSecond）
    //选中日期等于右区间日期时，禁用右端点的右部分（maxSecond，59]
    /**
     * @param {?} min
     * @param {?} max
     * @param {?} _hour
     * @param {?} _minute
     * @param {?} currentDate
     * @return {?}
     */
    UtilService.prototype.disabledSeconds = 
    //禁用时间对应的秒 
    //选中日期等于左区间日期时，禁用左端点的左部分[0，minSecond）
    //选中日期等于右区间日期时，禁用右端点的右部分（maxSecond，59]
    /**
     * @param {?} min
     * @param {?} max
     * @param {?} _hour
     * @param {?} _minute
     * @param {?} currentDate
     * @return {?}
     */
    function (min, max, _hour, _minute, currentDate) {
        /** @type {?} */
        var maxHour = max.hour;
        /** @type {?} */
        var maxMinute = max.minute;
        /** @type {?} */
        var maxSecond = max.second;
        /** @type {?} */
        var minHour = min.hour;
        /** @type {?} */
        var minMinute = min.minute;
        /** @type {?} */
        var minSecond = min.second;
        /** @type {?} */
        var res = [];
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: min.year, month: min.month, day: min.day })) {
            if (_hour == minHour && _minute == minMinute) {
                while (minSecond-- >= 0) {
                    res.push(minSecond);
                }
            }
        }
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: max.year, month: max.month, day: max.day })) {
            if (_hour == maxHour && _minute == maxMinute) {
                while (maxSecond++ < 60) {
                    res.push(maxSecond);
                }
            }
        }
        return res;
    };
    /**
     * @private
     * @param {?} dt
     * @param {?} dynamicLocale
     * @return {?}
     */
    UtilService.prototype.getDateTypeString = /**
     * @private
     * @param {?} dt
     * @param {?} dynamicLocale
     * @return {?}
     */
    function (dt, dynamicLocale) {
        switch (dt) {
            case 'week':
                return dynamicLocale.week || '周';
            case 'day':
                return dynamicLocale.day || '天';
            case 'month':
                return dynamicLocale.month || '月';
            case 'year':
                return dynamicLocale.year || '年';
        }
    };
    /**
     * @param {?} val
     * @param {?} dynamicLocale
     * @return {?}
     */
    UtilService.prototype.formatDynamicValue = /**
     * @param {?} val
     * @param {?} dynamicLocale
     * @return {?}
     */
    function (val, dynamicLocale) {
        if (val) {
            /** @type {?} */
            var fval = '';
            switch (val.name) {
                case 'present_day': // 今天
                    fval = dynamicLocale.today || '今天';
                    break;
                case 'present_month': // 本月
                    fval = dynamicLocale.presentMonth || '本月';
                    break;
                case 'present_year':
                    fval = dynamicLocale.presentYear || '本年';
                    break;
                case 'previou':
                    fval = (dynamicLocale.previous || '过去') + ' ' + val.count + ' ' + this.getDateTypeString(val.dateType, dynamicLocale);
                    break;
                case 'future':
                    fval = (dynamicLocale.future || '未来') + ' ' + val.count + ' ' + this.getDateTypeString(val.dateType, dynamicLocale);
                    break;
                case 'present_first':
                    fval = (dynamicLocale.current || '本') + this.getDateTypeString(val.dateType, dynamicLocale) + (dynamicLocale.first || '第 1 天');
                    break;
                case 'present_last':
                    fval = (dynamicLocale.current || '本') + this.getDateTypeString(val.dateType, dynamicLocale) + (dynamicLocale.last || '最后 1 天');
                    break;
            }
            return fval;
        }
        else {
            return '';
        }
    };
    UtilService.decorators = [
        { type: Injectable }
    ];
    return UtilService;
}());
export { UtilService };
if (false) {
    /** @type {?} */
    UtilService.prototype.weekDays;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzLWRhdGVwaWNrZXIudXRpbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRlcGlja2VyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2ZhcnJpcy1kYXRlcGlja2VyLnV0aWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQWMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUdsSDtJQUFBO1FBRUksYUFBUSxHQUFrQixDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBc3ZCM0QsQ0FBQzs7Ozs7OztJQXB2QkcsaUNBQVc7Ozs7OztJQUFYLFVBQVksT0FBZSxFQUFFLE9BQW1CLEVBQUUsUUFBZ0I7UUFBaEIseUJBQUEsRUFBQSxnQkFBZ0I7OztZQUUxRCxRQUFnQjs7WUFBRSxJQUFJLEdBQUcsQ0FBQzs7WUFBRSxNQUFNLEdBQUcsQ0FBQzs7WUFBRSxNQUFNLEdBQUcsQ0FBQzs7WUFFaEQsVUFBVSxHQUFZLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFFNUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDN0IsT0FBTyxVQUFVLENBQUM7U0FDckI7UUFFTyxJQUFBLCtCQUFVLEVBQUUs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QVEsRUFBRSxhQUFhLENBQUMsQ0FBQztvQkFDdEgsTUFBTTtnQkFDVixLQUFLLFFBQVE7b0JBQ1QsSUFBSSxHQUFHLENBQUMsYUFBYSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUUsR0FBRyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7b0JBQ2xILE1BQU07Z0JBQ1YsS0FBSyxlQUFlO29CQUNoQixJQUFJLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTyxJQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUssSUFBRSxPQUFPLENBQUMsQ0FBQztvQkFDM0gsTUFBTTtnQkFDVixLQUFLLGNBQWM7b0JBQ2YsSUFBSSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sSUFBRSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLElBQUUsUUFBUSxDQUFDLENBQUM7b0JBQzNILE1BQU07YUFDVDtZQUVELE9BQU8sSUFBSSxDQUFDO1NBQ2Y7YUFBTTtZQUNILE9BQU8sRUFBRSxDQUFDO1NBQ2I7SUFDTCxDQUFDOztnQkF2dkJKLFVBQVU7O0lBd3ZCWCxrQkFBQztDQUFBLEFBeHZCRCxJQXd2QkM7U0F2dkJZLFdBQVc7OztJQUNwQiwrQkFBdUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBAQXV0aG9yOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBEYXRlOiAyMDE5LTA5LTA0IDA3OjQwOjA0XHJcbiAqIEBMYXN0RWRpdG9yczog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTA5LTA0IDE1OjIxOjQ2XHJcbiAqIEBRUTogMTA1NTgxODIzOVxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqL1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgICBJTXlEYXRlTW9kZWwsXHJcbiAgICBJTXlTaW5nbGVEYXRlTW9kZWwsXHJcbiAgICBJTXlEYXRlUmFuZ2VNb2RlbCxcclxuICAgIElNeURhdGUsXHJcbiAgICBJTXlEYXRlUmFuZ2UsXHJcbiAgICBJTXlNb250aCxcclxuICAgIElNeU1vbnRoTGFiZWxzLFxyXG4gICAgSU15TWFya2VkRGF0ZXMsXHJcbiAgICBJTXlNYXJrZWREYXRlLFxyXG4gICAgSU15RGF0ZUZvcm1hdCxcclxuICAgIElNeU9wdGlvbnNcclxufSBmcm9tICcuLi9pbnRlcmZhY2VzL3B1YmxpYy1hcGknO1xyXG5pbXBvcnQgeyBLZXlDb2RlLCBLZXlOYW1lLCBTaG93VHlwZSB9IGZyb20gJy4uL2VudW1zL3B1YmxpYy1hcGknO1xyXG5pbXBvcnQgeyBELCBERCwgTSwgTU0sIE1NTSwgWVlZWSwgU1UsIE1PLCBUVSwgV0UsIFRILCBGUiwgU0EsIFpFUk9fU1RSLCBFTVBUWV9TVFIgfSBmcm9tICcuLi9jb25zdGFudHMvY29uc3RhbnRzJztcclxuaW1wb3J0IHsgRHluYW1pY0RhdGEsIER5bmFtaWNEYXRlVHlwZSB9IGZyb20gJy4uL2ludGVyZmFjZXMvZHluYW1pYy1kYXRhLXR5cGUuaW50ZXJmYWNlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFV0aWxTZXJ2aWNlIHtcclxuICAgIHdlZWtEYXlzOiBBcnJheTxzdHJpbmc+ID0gW1NVLCBNTywgVFUsIFdFLCBUSCwgRlIsIFNBXTtcclxuXHJcbiAgICBpc0RhdGVWYWxpZChkYXRlU3RyOiBzdHJpbmcsIG9wdGlvbnM6IElNeU9wdGlvbnMsIGlzUmV0dXJuID0gZmFsc2UpOiBJTXlEYXRlIHtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6b25lLXZhcmlhYmxlLXBlci1kZWNsYXJhdGlvblxyXG4gICAgICAgIGxldCBfZGF0ZVN0cjogc3RyaW5nLCBob3VyID0gMCwgbWludXRlID0gMCwgc2Vjb25kID0gMDtcclxuXHJcbiAgICAgICAgY29uc3QgcmV0dXJuRGF0ZTogSU15RGF0ZSA9IHRoaXMucmVzZXREYXRlKCk7XHJcblxyXG4gICAgICAgIGlmICghZGF0ZVN0ciB8fCAhZGF0ZVN0ci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJldHVybkRhdGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB7IGRhdGVGb3JtYXQsIG1pblllYXIsIG1heFllYXIsIG1vbnRoTGFiZWxzLCBzaG93VGltZSwgcmV0dXJuRm9ybWF0LCBzaG93VHlwZSB9ID0gb3B0aW9ucztcclxuICAgICAgICBsZXQgX3N0ID0gc2hvd1RpbWU7XHJcbiAgICAgICAgbGV0IGZvcm1hdFN0ciA9IGRhdGVGb3JtYXQ7XHJcbiAgICAgICAgaWYgKGlzUmV0dXJuKSB7XHJcbiAgICAgICAgICAgIGZvcm1hdFN0ciA9IHJldHVybkZvcm1hdC5yZXBsYWNlKC9b5bm0LOaciF0vZywgJy0nKS5yZXBsYWNlKC9b5pelXS8sICcnKS5yZXBsYWNlKC9b5pe2LOWIhl0vZywgJzonKS5yZXBsYWNlKC9b56eSXS9nLCAnJyk7XHJcbiAgICAgICAgICAgIGRhdGVTdHIgPSBkYXRlU3RyLnJlcGxhY2UoL1vlubQs5pyIXS9nLCAnLScpLnJlcGxhY2UoL1vml6VdLywgJycpLnJlcGxhY2UoL1vml7Ys5YiGXS9nLCAnOicpLnJlcGxhY2UoL1vnp5JdL2csICcnKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRlU3RyW2RhdGVTdHIubGVuZ3RoIC0gMV0gPT09ICctJyB8fCBkYXRlU3RyW2RhdGVTdHIubGVuZ3RoIC0gMV0gPT09ICc6Jykge1xyXG4gICAgICAgICAgICAgICAgZGF0ZVN0ciA9IGRhdGVTdHIuc3Vic3RyaW5nKDAsIGRhdGVTdHIubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghc2hvd1RpbWUgJiYgcmV0dXJuRm9ybWF0LnRvTG9jYWxlTG93ZXJDYXNlKCkuaW5kZXhPZignaGg6bW0nKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBfc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBkYXlzSW5Nb250aDogQXJyYXk8bnVtYmVyPiA9IFszMSwgMjgsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXTtcclxuICAgICAgICBjb25zdCBpc01vbnRoU3RyOiBib29sZWFuID0gZm9ybWF0U3RyLmluZGV4T2YoTU1NKSAhPT0gLTE7XHJcbiAgICAgICAgbGV0IGRlbGltZXRlcnM6IEFycmF5PHN0cmluZz4gPSBmb3JtYXRTdHIubWF0Y2goL1teKERkTW1ZeSldezEsfS9nKTtcclxuICAgICAgICBpZiAoX3N0ICYmIGRhdGVTdHIpIHtcclxuICAgICAgICAgICAgX2RhdGVTdHIgPSBkYXRlU3RyLnNwbGl0KCcgJylbMF07XHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmV0dXJuRGF0ZSwgeyBob3VyOiAwLCBtaW51dGU6IDAsIHNlY29uZDogMCB9KTtcclxuICAgICAgICAgICAgY29uc3QgdGltZVN0ciA9IGRhdGVTdHIuc3BsaXQoJyAnKVsxXTtcclxuICAgICAgICAgICAgaWYgKHRpbWVTdHIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IF90aW1lciA9IHRpbWVTdHIucmVwbGFjZSgn5pe2JywgJzonKS5yZXBsYWNlKCfliIYnLCAnOicpLnJlcGxhY2UoJ+enkicsICcnKS5zcGxpdCgnOicpO1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aW1lclswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvdXIgPSBOdW1iZXIoX3RpbWVyWzBdLnN1YnN0cigwLCAyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaG91ciA9IGlzTmFOKGhvdXIpID8gMCA6IGhvdXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RpbWVyWzFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWludXRlID0gTnVtYmVyKF90aW1lclsxXS5zdWJzdHIoMCwgMikpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbnV0ZSA9IGlzTmFOKG1pbnV0ZSkgPyAwIDogbWludXRlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfdGltZXJbMl0pIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWNvbmQgPSBOdW1iZXIoX3RpbWVyWzJdLnN1YnN0cigwLCAyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kID0gaXNOYU4oc2Vjb25kKSA/IDAgOiBzZWNvbmQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkZWxpbWV0ZXJzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVnID0gL15cXGR7MSx9JC87XHJcbiAgICAgICAgICAgICAgICBpZiAocmVnLnRlc3QoZGF0ZVN0cikpIHsgLy8g6aqM6K+B5Lyg5YWl55qE5qC85byP5Li6IHl5eXlNTWRkSEhtbXNzXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGYgPSBmb3JtYXRTdHI7XHJcbiAgICAgICAgICAgICAgICAgICAgX2RhdGVTdHIgPSBkYXRlU3RyLnN1YnN0cigwLCA4KTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgX3RpbWVyID0gZGF0ZVN0ci5zdWJzdHIoOCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aW1lcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGYuaW5jbHVkZXMoJ0hIJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGltZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3VyID0gK190aW1lci5zbGljZSgwLCAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGltZXIgPSBfdGltZXIuc2xpY2UoMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRmLmluY2x1ZGVzKCdtbScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RpbWVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlID0gK190aW1lci5zbGljZSgwLCAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGltZXIgPSBfdGltZXIuc2xpY2UoMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRmLmluY2x1ZGVzKCdzcycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RpbWVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kID0gK190aW1lci5zbGljZSgwLCAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF9kYXRlU3RyID0gZGF0ZVN0ciA/IGRhdGVTdHIuc3BsaXQoJyAnKVswXSA6ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkYXRlVmFsdWU6IEFycmF5PElNeURhdGVGb3JtYXQ+ID0gdGhpcy5nZXREYXRlVmFsdWUoX2RhdGVTdHIsIGZvcm1hdFN0ciwgZGVsaW1ldGVycyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHllYXI6IG51bWJlciA9IHRoaXMuZ2V0TnVtYmVyQnlWYWx1ZShkYXRlVmFsdWVbMF0pO1xyXG4gICAgICAgIGNvbnN0IG1vbnRoOiBudW1iZXIgPSBpc01vbnRoU3RyXHJcbiAgICAgICAgICAgID8gdGhpcy5nZXRNb250aE51bWJlckJ5TW9udGhOYW1lKGRhdGVWYWx1ZVsxXSwgbW9udGhMYWJlbHMpXHJcbiAgICAgICAgICAgIDogdGhpcy5nZXROdW1iZXJCeVZhbHVlKGRhdGVWYWx1ZVsxXSk7XHJcbiAgICAgICAgY29uc3QgZGF5OiBudW1iZXIgPSB0aGlzLmdldE51bWJlckJ5VmFsdWUoZGF0ZVZhbHVlWzJdKTtcclxuXHJcbiAgICAgICAgaWYgKHNob3dUeXBlID09PSBTaG93VHlwZS5ub0RhdGVBbmRNb250aCkge1xyXG4gICAgICAgICAgICByZXR1cm4geyB5ZWFyLCBtb250aDogMSwgZGF5OiAxIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobW9udGggIT09IC0xICYmIGRheSAhPT0gLTEgJiYgeWVhciAhPT0gLTEpIHtcclxuICAgICAgICAgICAgaWYgKHllYXIgPCBtaW5ZZWFyIHx8IHllYXIgPiBtYXhZZWFyIHx8IG1vbnRoIDwgMSB8fCBtb250aCA+IDEyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXJuRGF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBkYXRlOiBJTXlEYXRlID0gX3N0ID8geyB5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCB9IDogeyB5ZWFyLCBtb250aCwgZGF5IH07XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0Rpc2FibGVkRGF0ZShkYXRlLCBvcHRpb25zKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldHVybkRhdGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh5ZWFyICUgNDAwID09PSAwIHx8ICh5ZWFyICUgMTAwICE9PSAwICYmIHllYXIgJSA0ID09PSAwKSkge1xyXG4gICAgICAgICAgICAgICAgZGF5c0luTW9udGhbMV0gPSAyOTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGRheSA8IDEgfHwgZGF5ID4gZGF5c0luTW9udGhbbW9udGggLSAxXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldHVybkRhdGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFZhbGlkIGRhdGVcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvd1R5cGUgPT09IFNob3dUeXBlLm5vRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgeWVhcjogZGF0ZS55ZWFyLCBtb250aDogZGF0ZS5tb250aCB9O1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuc2hvd1R5cGUgPT09IFNob3dUeXBlLm5vRGF0ZUFuZE1vbnRoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyB5ZWFyOiBkYXRlLnllYXIgfTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXR1cm5EYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRGF0ZVZhbGlkRGF0ZVJhbmdlKGRhdGVSYW5nZVN0cjogc3RyaW5nLCBvcHRpb25zOiBJTXlPcHRpb25zKTogSU15RGF0ZVJhbmdlIHtcclxuICAgICAgICBsZXQgZGF0ZVJhbmdlOiBJTXlEYXRlUmFuZ2UgPSB7XHJcbiAgICAgICAgICAgIGJlZ2luOiB0aGlzLnJlc2V0RGF0ZSgpLFxyXG4gICAgICAgICAgICBlbmQ6IHRoaXMucmVzZXREYXRlKClcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChkYXRlUmFuZ2VTdHIgJiYgZGF0ZVJhbmdlU3RyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRlczogQXJyYXk8c3RyaW5nPiA9IGRhdGVSYW5nZVN0ci5zcGxpdChvcHRpb25zLmRhdGVSYW5nZURhdGVzRGVsaW1pdGVyKTtcclxuICAgICAgICAgICAgaWYgKGRhdGVzICYmIGRhdGVzLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW2JlZ2luRGF0ZSwgZW5kRGF0ZV0gPSBkYXRlcztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJlZ2luOiBJTXlEYXRlID0gdGhpcy5pc0RhdGVWYWxpZChiZWdpbkRhdGUsIG9wdGlvbnMsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNJbml0aWFsaXplZERhdGUoYmVnaW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kOiBJTXlEYXRlID0gdGhpcy5pc0RhdGVWYWxpZChlbmREYXRlLCBvcHRpb25zLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNJbml0aWFsaXplZERhdGUoZW5kKSAmJiB0aGlzLmlzRGF0ZVNhbWVPckVhcmxpZXIoYmVnaW4sIGVuZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZVJhbmdlID0geyBiZWdpbiwgZW5kIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkYXRlUmFuZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGF0ZVZhbHVlKGRhdGVTdHI6IHN0cmluZywgZGF0ZUZvcm1hdDogc3RyaW5nLCBkZWxpbWV0ZXJzOiBBcnJheTxzdHJpbmc+KTogQXJyYXk8SU15RGF0ZUZvcm1hdD4ge1xyXG4gICAgICAgIGNvbnN0IGRhOiBBcnJheTxJTXlEYXRlRm9ybWF0PiA9IFtdO1xyXG5cclxuICAgICAgICBpZiAoZGVsaW1ldGVycykge1xyXG4gICAgICAgICAgICBsZXQgZGVsOiBzdHJpbmcgPSBkZWxpbWV0ZXJzWzBdO1xyXG4gICAgICAgICAgICBpZiAoZGVsaW1ldGVyc1swXSAhPT0gZGVsaW1ldGVyc1sxXSkge1xyXG4gICAgICAgICAgICAgICAgZGVsID0gZGVsaW1ldGVyc1swXSArIGRlbGltZXRlcnNbMV07XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVsaW1ldGVyc1syXSAmJiBkZWxpbWV0ZXJzWzFdICE9PSBkZWxpbWV0ZXJzWzJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsID0gZGVsICsgZGVsaW1ldGVyc1syXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCByZTogYW55ID0gbmV3IFJlZ0V4cCgnWycgKyBkZWwgKyAnXScpO1xyXG4gICAgICAgICAgICBjb25zdCBkczogQXJyYXk8c3RyaW5nPiA9IGRhdGVTdHIuc3BsaXQocmUpO1xyXG4gICAgICAgICAgICBjb25zdCBkZjogQXJyYXk8c3RyaW5nPiA9IGRhdGVGb3JtYXQuc3BsaXQocmUpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRmLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGZbaV0uaW5kZXhPZihZWVlZKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBkYVswXSA9IHsgdmFsdWU6IGRzW2ldLCBmb3JtYXQ6IGRmW2ldIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGZbaV0uaW5kZXhPZihNKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBkYVsxXSA9IGRzW2ldID09PSB1bmRlZmluZWQgPyB7IHZhbHVlOiAnMScsIGZvcm1hdDogZGZbaV0gfSA6IHsgdmFsdWU6IGRzW2ldLCBmb3JtYXQ6IGRmW2ldIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGZbaV0uaW5kZXhPZihEKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBkYVsyXSA9IGRzW2ldID09PSB1bmRlZmluZWQgPyB7IHZhbHVlOiAnMScsIGZvcm1hdDogZGZbaV0gfSA6IHsgdmFsdWU6IGRzW2ldLCBmb3JtYXQ6IGRmW2ldIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB5ZWFySW5kZXggPSAoZGF0ZUZvcm1hdCArICcnKS5pbmRleE9mKFlZWVkpO1xyXG4gICAgICAgICAgICBjb25zdCBtb250aEluZGV4ID0gKGRhdGVGb3JtYXQgKyAnJykuaW5kZXhPZihNTSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRheUluZGV4ID0gKGRhdGVGb3JtYXQgKyAnJykuaW5kZXhPZihERCk7XHJcbiAgICAgICAgICAgIGlmICh5ZWFySW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgZGFbMF0gPSB7IHZhbHVlOiBkYXRlU3RyLnN1YnN0cmluZyh5ZWFySW5kZXgsIHllYXJJbmRleCArIDQpLCBmb3JtYXQ6IGRhdGVGb3JtYXQuc3Vic3RyaW5nKHllYXJJbmRleCwgeWVhckluZGV4ICsgNCkgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobW9udGhJbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBkYVsxXSA9IHsgdmFsdWU6IGRhdGVTdHIuc3Vic3RyaW5nKG1vbnRoSW5kZXgsIG1vbnRoSW5kZXggKyAyKSwgZm9ybWF0OiBkYXRlRm9ybWF0LnN1YnN0cmluZyhtb250aEluZGV4LCBtb250aEluZGV4ICsgMikgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGF5SW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgZGFbMl0gPSB7IHZhbHVlOiBkYXRlU3RyLnN1YnN0cmluZyhkYXlJbmRleCwgZGF5SW5kZXggKyAyKSwgZm9ybWF0OiBkYXRlRm9ybWF0LnN1YnN0cmluZyhkYXlJbmRleCwgZGF5SW5kZXggKyAyKSB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkYTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRNb250aE51bWJlckJ5TW9udGhOYW1lKGRmOiBJTXlEYXRlRm9ybWF0LCBtb250aExhYmVsczogSU15TW9udGhMYWJlbHMpOiBudW1iZXIge1xyXG4gICAgICAgIGlmIChkZi52YWx1ZSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgPSAxOyBrZXkgPD0gMTI7IGtleSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGYudmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gbW9udGhMYWJlbHNba2V5XS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TnVtYmVyQnlWYWx1ZShkZjogSU15RGF0ZUZvcm1hdCk6IG51bWJlciB7XHJcbiAgICAgICAgaWYgKCFkZikge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCEvXlxcZCskLy50ZXN0KGRmLnZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbmJyOiBudW1iZXIgPSBOdW1iZXIoZGYudmFsdWUpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgKGRmLmZvcm1hdC5sZW5ndGggPT09IDEgJiYgZGYudmFsdWUubGVuZ3RoICE9PSAxICYmIG5iciA8IDEwKSB8fFxyXG4gICAgICAgICAgICAoZGYuZm9ybWF0Lmxlbmd0aCA9PT0gMSAmJiBkZi52YWx1ZS5sZW5ndGggIT09IDIgJiYgbmJyID49IDEwKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBuYnIgPSAtMTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRmLmZvcm1hdC5sZW5ndGggPT09IDIgJiYgZGYudmFsdWUubGVuZ3RoID4gMikge1xyXG4gICAgICAgICAgICBuYnIgPSAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5icjtcclxuICAgIH1cclxuXHJcbiAgICBwYXJzZURlZmF1bHRNb250aChtb250aFN0cmluZzogc3RyaW5nKTogSU15TW9udGgge1xyXG4gICAgICAgIGNvbnN0IG1vbnRoOiBJTXlNb250aCA9IHsgbW9udGhUeHQ6IEVNUFRZX1NUUiwgbW9udGhOYnI6IDAsIHllYXI6IDAgfTtcclxuICAgICAgICBpZiAobW9udGhTdHJpbmcgIT09IEVNUFRZX1NUUikge1xyXG4gICAgICAgICAgICBjb25zdCBzcGxpdCA9IG1vbnRoU3RyaW5nLnNwbGl0KG1vbnRoU3RyaW5nLm1hdGNoKC9bXjAtOV0vKVswXSk7XHJcbiAgICAgICAgICAgIG1vbnRoLm1vbnRoTmJyID0gc3BsaXRbMF0ubGVuZ3RoID09PSAyID8gTnVtYmVyKHNwbGl0WzBdKSA6IE51bWJlcihzcGxpdFsxXSk7XHJcbiAgICAgICAgICAgIG1vbnRoLnllYXIgPSBzcGxpdFswXS5sZW5ndGggPT09IDIgPyBOdW1iZXIoc3BsaXRbMV0pIDogTnVtYmVyKHNwbGl0WzBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1vbnRoO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRGlzYWJsZWREYXRlKGRhdGU6IElNeURhdGUsIG9wdGlvbnM6IElNeU9wdGlvbnMpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCB7XHJcbiAgICAgICAgICAgIG1pblllYXIsXHJcbiAgICAgICAgICAgIG1heFllYXIsXHJcbiAgICAgICAgICAgIGRpc2FibGVVbnRpbCxcclxuICAgICAgICAgICAgZGlzYWJsZVNpbmNlLFxyXG4gICAgICAgICAgICBkaXNhYmxlV2Vla2VuZHMsXHJcbiAgICAgICAgICAgIGRpc2FibGVEYXRlcyxcclxuICAgICAgICAgICAgZGlzYWJsZURhdGVSYW5nZXMsXHJcbiAgICAgICAgICAgIGRpc2FibGVXZWVrZGF5cyxcclxuICAgICAgICAgICAgZW5hYmxlRGF0ZXNcclxuICAgICAgICB9ID0gb3B0aW9ucztcclxuXHJcbiAgICAgICAgLy8gZm9yIChjb25zdCBkIG9mIGVuYWJsZURhdGVzKSB7XHJcbiAgICAgICAgLy8gICAgIGlmIChcclxuICAgICAgICAvLyAgICAgICAgIChkLnllYXIgPT09IDAgfHwgZC55ZWFyID09PSBkYXRlLnllYXIpICYmXHJcbiAgICAgICAgLy8gICAgICAgICAoZC5tb250aCA9PT0gMCB8fCBkLm1vbnRoID09PSBkYXRlLm1vbnRoKSAmJlxyXG4gICAgICAgIC8vICAgICAgICAgZC5kYXkgPT09IGRhdGUuZGF5XHJcbiAgICAgICAgLy8gICAgICkge1xyXG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICBpZiAoKGRhdGUueWVhciA8IG1pblllYXIgJiYgZGF0ZS5tb250aCA9PT0gMTIpIHx8IChkYXRlLnllYXIgPiBtYXhZZWFyICYmIGRhdGUubW9udGggPT09IDEpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkYXRlTXM6IG51bWJlciA9IHRoaXMuZ2V0VGltZUluTWlsbGlzZWNvbmRzKGRhdGUpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGl6ZWREYXRlKGRpc2FibGVVbnRpbCkgJiYgKGRhdGVNcyArIDI0ICogNjAgKiA2MCAqIDEwMDAgLSAxKSA8IHRoaXMuZ2V0VGltZUluTWlsbGlzZWNvbmRzKGRpc2FibGVVbnRpbCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGl6ZWREYXRlKGRpc2FibGVTaW5jZSkgJiYgZGF0ZU1zID4gdGhpcy5nZXRUaW1lSW5NaWxsaXNlY29uZHMoZGlzYWJsZVNpbmNlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkaXNhYmxlV2Vla2VuZHMpIHtcclxuICAgICAgICAgICAgY29uc3QgZGF5TmJyID0gdGhpcy5nZXREYXlOdW1iZXIoZGF0ZSk7XHJcbiAgICAgICAgICAgIGlmIChkYXlOYnIgPT09IDAgfHwgZGF5TmJyID09PSA2KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZG4gPSB0aGlzLmdldERheU51bWJlcihkYXRlKTtcclxuICAgICAgICBpZiAoZGlzYWJsZVdlZWtkYXlzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCB3ZCBvZiBkaXNhYmxlV2Vla2RheXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkbiA9PT0gdGhpcy5nZXRXZWVrZGF5SW5kZXgod2QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgZCBvZiBkaXNhYmxlRGF0ZXMpIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgKGQueWVhciA9PT0gMCB8fCBkLnllYXIgPT09IGRhdGUueWVhcikgJiZcclxuICAgICAgICAgICAgICAgIChkLm1vbnRoID09PSAwIHx8IGQubW9udGggPT09IGRhdGUubW9udGgpICYmXHJcbiAgICAgICAgICAgICAgICBkLmRheSA9PT0gZGF0ZS5kYXlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBkIG9mIGRpc2FibGVEYXRlUmFuZ2VzKSB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNJbml0aWFsaXplZERhdGUoZC5iZWdpbikgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNJbml0aWFsaXplZERhdGUoZC5lbmQpICYmXHJcbiAgICAgICAgICAgICAgICBkYXRlTXMgPj0gdGhpcy5nZXRUaW1lSW5NaWxsaXNlY29uZHMoZC5iZWdpbikgJiZcclxuICAgICAgICAgICAgICAgIGRhdGVNcyA8PSB0aGlzLmdldFRpbWVJbk1pbGxpc2Vjb25kcyhkLmVuZClcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaXNNYXJrZWREYXRlKGRhdGU6IElNeURhdGUsIG1hcmtlZERhdGVzOiBBcnJheTxJTXlNYXJrZWREYXRlcz4sIG1hcmtXZWVrZW5kczogSU15TWFya2VkRGF0ZSk6IElNeU1hcmtlZERhdGUge1xyXG4gICAgICAgIGZvciAoY29uc3QgbWQgb2YgbWFya2VkRGF0ZXMpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBkIG9mIG1kLmRhdGVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgKGQueWVhciA9PT0gMCB8fCBkLnllYXIgPT09IGRhdGUueWVhcikgJiZcclxuICAgICAgICAgICAgICAgICAgICAoZC5tb250aCA9PT0gMCB8fCBkLm1vbnRoID09PSBkYXRlLm1vbnRoKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGQuZGF5ID09PSBkYXRlLmRheVxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgbWFya2VkOiB0cnVlLCBjb2xvcjogbWQuY29sb3IgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobWFya1dlZWtlbmRzICYmIG1hcmtXZWVrZW5kcy5tYXJrZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgZGF5TmJyID0gdGhpcy5nZXREYXlOdW1iZXIoZGF0ZSk7XHJcbiAgICAgICAgICAgIGlmIChkYXlOYnIgPT09IDAgfHwgZGF5TmJyID09PSA2KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBtYXJrZWQ6IHRydWUsIGNvbG9yOiBtYXJrV2Vla2VuZHMuY29sb3IgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyBtYXJrZWQ6IGZhbHNlLCBjb2xvcjogRU1QVFlfU1RSIH07XHJcbiAgICB9XHJcblxyXG4gICAgaXNIaWdobGlnaHRlZERhdGUoXHJcbiAgICAgICAgZGF0ZTogSU15RGF0ZSxcclxuICAgICAgICBzdW5IaWdobGlnaHQ6IGJvb2xlYW4sXHJcbiAgICAgICAgc2F0SGlnaGxpZ2h0OiBib29sZWFuLFxyXG4gICAgICAgIGhpZ2hsaWdodERhdGVzOiBBcnJheTxJTXlEYXRlPlxyXG4gICAgKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgZGF5TmJyOiBudW1iZXIgPSB0aGlzLmdldERheU51bWJlcihkYXRlKTtcclxuICAgICAgICBpZiAoKHN1bkhpZ2hsaWdodCAmJiBkYXlOYnIgPT09IDApIHx8IChzYXRIaWdobGlnaHQgJiYgZGF5TmJyID09PSA2KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBkIG9mIGhpZ2hsaWdodERhdGVzKSB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIChkLnllYXIgPT09IDAgfHwgZC55ZWFyID09PSBkYXRlLnllYXIpICYmXHJcbiAgICAgICAgICAgICAgICAoZC5tb250aCA9PT0gMCB8fCBkLm1vbnRoID09PSBkYXRlLm1vbnRoKSAmJlxyXG4gICAgICAgICAgICAgICAgZC5kYXkgPT09IGRhdGUuZGF5XHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFdlZWtOdW1iZXIoZGF0ZTogSU15RGF0ZSk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgZDogRGF0ZSA9IG5ldyBEYXRlKGRhdGUueWVhciwgZGF0ZS5tb250aCAtIDEsIGRhdGUuZGF5LCAwLCAwLCAwLCAwKTtcclxuICAgICAgICBkLnNldERhdGUoZC5nZXREYXRlKCkgKyAoZC5nZXREYXkoKSA9PT0gMCA/IC0zIDogNCAtIGQuZ2V0RGF5KCkpKTtcclxuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgoZC5nZXRUaW1lKCkgLSBuZXcgRGF0ZShkLmdldEZ1bGxZZWFyKCksIDAsIDQpLmdldFRpbWUoKSkgLyA4NjQwMDAwMCAvIDcpICsgMTtcclxuICAgIH1cclxuICAgIGdldE5vd1dlZWtUaW1lKGRhdGU6IERhdGUpOiBJTXlEYXRlUmFuZ2Uge1xyXG4gICAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtICgoZGF0ZS5nZXREYXkoKSArIDYpICUgNykpO1xyXG4gICAgICAgIGNvbnN0IGJlZ2luID0ge1xyXG4gICAgICAgICAgICB5ZWFyOiBkYXRlLmdldEZ1bGxZZWFyKCksXHJcbiAgICAgICAgICAgIG1vbnRoOiBkYXRlLmdldE1vbnRoKCkgKyAxLFxyXG4gICAgICAgICAgICBkYXk6IGRhdGUuZ2V0RGF0ZSgpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyA2KTtcclxuICAgICAgICBjb25zdCBlbmQgPSB7XHJcbiAgICAgICAgICAgIHllYXI6IGRhdGUuZ2V0RnVsbFllYXIoKSxcclxuICAgICAgICAgICAgbW9udGg6IGRhdGUuZ2V0TW9udGgoKSArIDEsXHJcbiAgICAgICAgICAgIGRheTogZGF0ZS5nZXREYXRlKClcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB7IGJlZ2luLCBlbmQgfTtcclxuICAgIH1cclxuXHJcbiAgICBpc01vbnRoRGlzYWJsZWRCeURpc2FibGVVbnRpbChkYXRlOiBJTXlEYXRlLCBkaXNhYmxlVW50aWw6IElNeURhdGUpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICB0aGlzLmlzSW5pdGlhbGl6ZWREYXRlKGRpc2FibGVVbnRpbCkgJiZcclxuICAgICAgICAgICAgdGhpcy5nZXRUaW1lSW5NaWxsaXNlY29uZHMoZGF0ZSkgPD0gdGhpcy5nZXRUaW1lSW5NaWxsaXNlY29uZHMoZGlzYWJsZVVudGlsKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNNb250aERpc2FibGVkQnlEaXNhYmxlU2luY2UoZGF0ZTogSU15RGF0ZSwgZGlzYWJsZVNpbmNlOiBJTXlEYXRlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgdGhpcy5pc0luaXRpYWxpemVkRGF0ZShkaXNhYmxlU2luY2UpICYmXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0VGltZUluTWlsbGlzZWNvbmRzKGRhdGUpID49IHRoaXMuZ2V0VGltZUluTWlsbGlzZWNvbmRzKGRpc2FibGVTaW5jZSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERhdGVNb2RlbChcclxuICAgICAgICBkYXRlOiBJTXlEYXRlLFxyXG4gICAgICAgIGRhdGVSYW5nZTogSU15RGF0ZVJhbmdlLFxyXG4gICAgICAgIGRhdGVGb3JtYXQ6IHN0cmluZyxcclxuICAgICAgICBtb250aExhYmVsczogSU15TW9udGhMYWJlbHMsXHJcbiAgICAgICAgcmFuZ2VEZWxpbWl0ZXI6IHN0cmluZyxcclxuICAgICAgICByZXR1cm5Gb3JtYXQ6IHN0cmluZyxcclxuICAgICAgICBkYXRlU3RyOiBzdHJpbmcgPSBFTVBUWV9TVFJcclxuICAgICk6IElNeURhdGVNb2RlbCB7XHJcbiAgICAgICAgbGV0IHNpbmdsZURhdGVNb2RlbDogSU15U2luZ2xlRGF0ZU1vZGVsID0gbnVsbDtcclxuICAgICAgICBsZXQgZGF0ZVJhbmdlTW9kZWw6IElNeURhdGVSYW5nZU1vZGVsID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKGRhdGUpIHtcclxuICAgICAgICAgICAgc2luZ2xlRGF0ZU1vZGVsID0ge1xyXG4gICAgICAgICAgICAgICAgZGF0ZSxcclxuICAgICAgICAgICAgICAgIGpzRGF0ZTogdGhpcy5nZXREYXRlMihkYXRlKSxcclxuICAgICAgICAgICAgICAgIGZvcm1hdHRlZDogZGF0ZVN0ci5sZW5ndGggPyBkYXRlU3RyIDogdGhpcy5mb3JtYXREYXRlKGRhdGUsIGRhdGVGb3JtYXQsIG1vbnRoTGFiZWxzKSxcclxuICAgICAgICAgICAgICAgIHJldHVybkZvcm1hdHRlZDogdGhpcy5mb3JtYXREYXRlKGRhdGUsIHJldHVybkZvcm1hdCwgbW9udGhMYWJlbHMpLFxyXG4gICAgICAgICAgICAgICAgZXBvYzogdGhpcy5nZXRFcG9jVGltZShkYXRlKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRhdGVSYW5nZU1vZGVsID0ge1xyXG4gICAgICAgICAgICAgICAgYmVnaW5EYXRlOiBkYXRlUmFuZ2UuYmVnaW4sXHJcbiAgICAgICAgICAgICAgICBiZWdpbkpzRGF0ZTogdGhpcy5nZXREYXRlKGRhdGVSYW5nZS5iZWdpbiksXHJcbiAgICAgICAgICAgICAgICBiZWdpbkVwb2M6IHRoaXMuZ2V0RXBvY1RpbWUoZGF0ZVJhbmdlLmJlZ2luKSxcclxuICAgICAgICAgICAgICAgIGVuZERhdGU6IGRhdGVSYW5nZS5lbmQsXHJcbiAgICAgICAgICAgICAgICBlbmRKc0RhdGU6IHRoaXMuZ2V0RGF0ZShkYXRlUmFuZ2UuZW5kKSxcclxuICAgICAgICAgICAgICAgIGVuZEVwb2M6IHRoaXMuZ2V0RXBvY1RpbWUoZGF0ZVJhbmdlLmVuZCksXHJcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtYXREYXRlKGRhdGVSYW5nZS5iZWdpbiwgZGF0ZUZvcm1hdCwgbW9udGhMYWJlbHMpICtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZURlbGltaXRlciArXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtYXREYXRlKGRhdGVSYW5nZS5lbmQsIGRhdGVGb3JtYXQsIG1vbnRoTGFiZWxzKSxcclxuICAgICAgICAgICAgICAgIHJldHVybkZvcm1hdHRlZDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm1hdERhdGUoZGF0ZVJhbmdlLmJlZ2luLCByZXR1cm5Gb3JtYXQsIG1vbnRoTGFiZWxzKSArXHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VEZWxpbWl0ZXIgK1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybWF0RGF0ZShkYXRlUmFuZ2UuZW5kLCByZXR1cm5Gb3JtYXQsIG1vbnRoTGFiZWxzKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaXNSYW5nZTogZGF0ZSA9PT0gbnVsbCxcclxuICAgICAgICAgICAgc2luZ2xlRGF0ZTogc2luZ2xlRGF0ZU1vZGVsLFxyXG4gICAgICAgICAgICBkYXRlUmFuZ2U6IGRhdGVSYW5nZU1vZGVsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmb3JtYXREYXRlKGRhdGU6IElNeURhdGUsIGRhdGVGb3JtYXQ6IHN0cmluZywgbW9udGhMYWJlbHM6IElNeU1vbnRoTGFiZWxzKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoIWRhdGUubW9udGggJiYgZGF0ZUZvcm1hdC5pbmRleE9mKE1NKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgZGF0ZUZvcm1hdCA9IHRoaXMuZGVsZXRlKGRhdGVGb3JtYXQsIE1NKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFkYXRlLmRheSAmJiBkYXRlRm9ybWF0LmluZGV4T2YoREQpID09PSAtMSkge1xyXG4gICAgICAgICAgICBkYXRlRm9ybWF0ID0gdGhpcy5kZWxldGUoZGF0ZUZvcm1hdCwgREQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZm9ybWF0dGVkOiBzdHJpbmcgPSBkYXRlRm9ybWF0LnJlcGxhY2UoWVlZWSwgU3RyaW5nKGRhdGUueWVhcikpO1xyXG5cclxuICAgICAgICBpZiAoZGF0ZUZvcm1hdC5pbmRleE9mKE0pID09PSAtMSkge1xyXG4gICAgICAgICAgICBmb3JtYXR0ZWQgPSBmb3JtYXR0ZWQucmVwbGFjZShNTSwgJzAxJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGRhdGVGb3JtYXQuaW5kZXhPZihNTU0pICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVkID0gZm9ybWF0dGVkLnJlcGxhY2UoTU1NLCBtb250aExhYmVsc1tkYXRlLm1vbnRoXSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0ZUZvcm1hdC5pbmRleE9mKE1NKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGZvcm1hdHRlZCA9IGZvcm1hdHRlZC5yZXBsYWNlKE1NLCB0aGlzLnByZVplcm8oZGF0ZS5tb250aCB8fCAxKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWQgPSBmb3JtYXR0ZWQucmVwbGFjZShNLCBTdHJpbmcoZGF0ZS5tb250aCB8fCAxKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkYXRlRm9ybWF0LmluZGV4T2YoREQpID09PSAtMSkge1xyXG4gICAgICAgICAgICBmb3JtYXR0ZWQgPSBmb3JtYXR0ZWQucmVwbGFjZShERCwgJzAxJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkYXRlRm9ybWF0LmluZGV4T2YoREQpICE9PSAtMSkge1xyXG4gICAgICAgICAgICBmb3JtYXR0ZWQgPSBmb3JtYXR0ZWQucmVwbGFjZShERCwgdGhpcy5wcmVaZXJvKGRhdGUuZGF5IHx8IDEpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3JtYXR0ZWQgPSBmb3JtYXR0ZWQucmVwbGFjZShELCBTdHJpbmcoZGF0ZS5kYXkgfHwgMSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9ybWF0dGVkID0gZm9ybWF0dGVkLnJlcGxhY2UoJ01NJywgJ21tJykucmVwbGFjZSgnSEgnLCB0aGlzLnByZVplcm8oZGF0ZS5ob3VyIHx8IDApKVxyXG4gICAgICAgIC5yZXBsYWNlKCdtbScsIHRoaXMucHJlWmVybyhkYXRlLm1pbnV0ZSB8fCAwKSlcclxuICAgICAgICAucmVwbGFjZSgnc3MnLCB0aGlzLnByZVplcm8oZGF0ZS5zZWNvbmQgfHwgMCkpO1xyXG5cclxuICAgICAgICByZXR1cm4gZm9ybWF0dGVkICYmIGZvcm1hdHRlZC5sZW5ndGggPiAyID8gZm9ybWF0dGVkIDogJyc7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlKGZvcm1hdDogc3RyaW5nLCBkZWxTdHI6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHJlID0gZm9ybWF0Lm1hdGNoKC9bXihEZE1tWXkpXXsxLH0vZyk7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBmb3JtYXQuaW5kZXhPZihkZWxTdHIpO1xyXG5cclxuICAgICAgICBpZiAoaW5kZXggPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICBpZiAocmUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXQuc3Vic3RyaW5nKDMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdC5zdWJzdHJpbmcoMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGluZGV4ICsgMiA9PT0gZm9ybWF0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAocmUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXQuc3Vic3RyaW5nKDAsIGZvcm1hdC5sZW5ndGggLSAzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXQuc3Vic3RyaW5nKDAsIGZvcm1hdC5sZW5ndGggLSAyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChyZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdC5zdWJzdHJpbmcoMCwgaW5kZXgpICsgZm9ybWF0LnN1YnN0cmluZyhpbmRleCArIDMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdC5zdWJzdHJpbmcoMCwgaW5kZXgpICsgZm9ybWF0LnN1YnN0cmluZyhpbmRleCArIDIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0Rm9ybWF0dGVkRGF0ZShtb2RlbDogSU15RGF0ZU1vZGVsKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gIW1vZGVsLmlzUmFuZ2UgPyBtb2RlbC5zaW5nbGVEYXRlLmZvcm1hdHRlZCA6IG1vZGVsLmRhdGVSYW5nZS5mb3JtYXR0ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJlWmVybyh2YWw6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHZhbCA8IDEwID8gWkVST19TVFIgKyBOdW1iZXIodmFsKSA6IFN0cmluZyh2YWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzSW5pdGlhbGl6ZWREYXRlKGRhdGU6IElNeURhdGUpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gZGF0ZSAmJiBkYXRlLnllYXIgIT09IDAgJiYgZGF0ZS5tb250aCAhPT0gMCAmJiBkYXRlLmRheSAhPT0gMDtcclxuICAgIH1cclxuXHJcbiAgICBpc0luaXRpYWxpemVkTW9udGgoZGF0ZTogSU15RGF0ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBkYXRlICYmIGRhdGUueWVhciAhPT0gMCAmJiBkYXRlLm1vbnRoICE9PSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlzSW5pdGlhbGl6ZWRZZWFyKGRhdGU6IElNeURhdGUpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gZGF0ZSAmJiBkYXRlLnllYXIgIT09IDA7XHJcbiAgICB9XHJcblxyXG4gICAgaXNEYXRlRWFybGllcihmaXJzdERhdGU6IElNeURhdGUsIHNlY29uZERhdGU6IElNeURhdGUpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRUaW1lSW5NaWxsaXNlY29uZHMoZmlyc3REYXRlKSA8IHRoaXMuZ2V0VGltZUluTWlsbGlzZWNvbmRzKHNlY29uZERhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRGF0ZVNhbWVPckVhcmxpZXIoZmlyc3REYXRlOiBJTXlEYXRlLCBzZWNvbmREYXRlOiBJTXlEYXRlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGltZUluTWlsbGlzZWNvbmRzKGZpcnN0RGF0ZSkgPD0gdGhpcy5nZXRUaW1lSW5NaWxsaXNlY29uZHMoc2Vjb25kRGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNEYXRlU2FtZShmaXJzdERhdGU6IElNeURhdGUsIHNlY29uZERhdGU6IElNeURhdGUpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRUaW1lSW5NaWxsaXNlY29uZHMoZmlyc3REYXRlKSA9PT0gdGhpcy5nZXRUaW1lSW5NaWxsaXNlY29uZHMoc2Vjb25kRGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNEYXRlUmFuZ2VCZWdpbk9yRW5kU2FtZShkYXRlUmFuZ2U6IElNeURhdGVSYW5nZSwgZGF0ZTogSU15RGF0ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGRhdGVNczogbnVtYmVyID0gdGhpcy5nZXRUaW1lSW5NaWxsaXNlY29uZHMoZGF0ZSk7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgdGhpcy5nZXRUaW1lSW5NaWxsaXNlY29uZHMoZGF0ZVJhbmdlLmJlZ2luKSA9PT0gZGF0ZU1zIHx8XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0VGltZUluTWlsbGlzZWNvbmRzKGRhdGVSYW5nZS5lbmQpID09PSBkYXRlTXNcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRGF0ZUluUmFuZ2UoZGF0ZTogSU15RGF0ZSwgZGF0ZVJhbmdlOiBJTXlEYXRlUmFuZ2UpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZERhdGUoZGF0ZVJhbmdlLmJlZ2luKSB8fCAhdGhpcy5pc0luaXRpYWxpemVkRGF0ZShkYXRlUmFuZ2UuZW5kKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmlzRGF0ZVNhbWVPckVhcmxpZXIoZGF0ZVJhbmdlLmJlZ2luLCBkYXRlKSAmJiB0aGlzLmlzRGF0ZVNhbWVPckVhcmxpZXIoZGF0ZSwgZGF0ZVJhbmdlLmVuZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzZXREYXRlKCk6IElNeURhdGUge1xyXG4gICAgICAgIHJldHVybiB7IHllYXI6IDAsIG1vbnRoOiAwLCBkYXk6IDAgfTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUaW1lSW5NaWxsaXNlY29uZHMoZGF0ZTogSU15RGF0ZSk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0ZShkYXRlKS5nZXRUaW1lKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGF0ZTIoZGF0ZTogSU15RGF0ZSk6IERhdGUge1xyXG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XHJcblxyXG4gICAgICAgIGlmICghZGF0ZS55ZWFyKSB7XHJcbiAgICAgICAgICAgIGRhdGUueWVhciA9IG5vdy5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFkYXRlLm1vbnRoKSB7XHJcbiAgICAgICAgICAgIGRhdGUubW9udGggPSBub3cuZ2V0TW9udGgoKSArIDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWRhdGUuZGF5KSB7XHJcbiAgICAgICAgICAgIGRhdGUuZGF5ID0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShcclxuICAgICAgICAgICAgZGF0ZS55ZWFyLFxyXG4gICAgICAgICAgICBkYXRlLm1vbnRoIC0gMSxcclxuICAgICAgICAgICAgZGF0ZS5kYXksXHJcbiAgICAgICAgICAgIGRhdGUuaG91ciA/IGRhdGUuaG91ciA6IDAsXHJcbiAgICAgICAgICAgIGRhdGUubWludXRlID8gZGF0ZS5taW51dGUgOiAwLFxyXG4gICAgICAgICAgICBkYXRlLnNlY29uZCA/IGRhdGUuc2Vjb25kIDogMCxcclxuICAgICAgICAgICAgMFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGF0ZShkYXRlOiBJTXlEYXRlKTogRGF0ZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKFxyXG4gICAgICAgICAgICBkYXRlLnllYXIgfHwgMCxcclxuICAgICAgICAgICAgZGF0ZS5tb250aCA/IGRhdGUubW9udGggLSAxIDogMCxcclxuICAgICAgICAgICAgZGF0ZS5kYXkgfHwgMCxcclxuICAgICAgICAgICAgZGF0ZS5ob3VyID8gZGF0ZS5ob3VyIDogMCxcclxuICAgICAgICAgICAgZGF0ZS5taW51dGUgPyBkYXRlLm1pbnV0ZSA6IDAsXHJcbiAgICAgICAgICAgIGRhdGUuc2Vjb25kID8gZGF0ZS5zZWNvbmQgOiAwLFxyXG4gICAgICAgICAgICAwXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXREYXlOdW1iZXIoZGF0ZTogSU15RGF0ZSk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKFxyXG4gICAgICAgICAgICBkYXRlLnllYXIsXHJcbiAgICAgICAgICAgIGRhdGUubW9udGggLSAxLFxyXG4gICAgICAgICAgICBkYXRlLmRheSxcclxuICAgICAgICAgICAgZGF0ZS5ob3VyID8gZGF0ZS5ob3VyIDogMCxcclxuICAgICAgICAgICAgZGF0ZS5taW51dGUgPyBkYXRlLm1pbnV0ZSA6IDAsXHJcbiAgICAgICAgICAgIGRhdGUuc2Vjb25kID8gZGF0ZS5zZWNvbmQgOiAwLFxyXG4gICAgICAgICAgICAwXHJcbiAgICAgICAgKS5nZXREYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRXZWVrZGF5SW5kZXgod2Q6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndlZWtEYXlzLmluZGV4T2Yod2QpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEVwb2NUaW1lKGRhdGU6IElNeURhdGUpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHRoaXMuZ2V0VGltZUluTWlsbGlzZWNvbmRzKGRhdGUpIC8gMTAwMC4wKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRLZXlDb2RlRnJvbUV2ZW50KGV2ZW50OiBhbnkpOiBudW1iZXIge1xyXG4gICAgICAgIGNvbnN0IGtleTogYW55ID0gZXZlbnQua2V5IHx8IGV2ZW50LmtleUNvZGU7XHJcblxyXG4gICAgICAgIGlmIChrZXkgPT09IEtleU5hbWUuZW50ZXIgfHwga2V5ID09PSBLZXlDb2RlLmVudGVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLZXlDb2RlLmVudGVyO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBLZXlOYW1lLmVzYyB8fCBrZXkgPT09IEtleUNvZGUuZXNjKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLZXlDb2RlLmVzYztcclxuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gS2V5TmFtZS5zcGFjZSB8fCBrZXkgPT09IEtleUNvZGUuc3BhY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtleUNvZGUuc3BhY2U7XHJcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IEtleU5hbWUubGVmdEFycm93IHx8IGtleSA9PT0gS2V5Q29kZS5sZWZ0QXJyb3cpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtleUNvZGUubGVmdEFycm93O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBLZXlOYW1lLnVwQXJyb3cgfHwga2V5ID09PSBLZXlDb2RlLnVwQXJyb3cpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtleUNvZGUudXBBcnJvdztcclxuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gS2V5TmFtZS5yaWdodEFycm93IHx8IGtleSA9PT0gS2V5Q29kZS5yaWdodEFycm93KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLZXlDb2RlLnJpZ2h0QXJyb3c7XHJcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IEtleU5hbWUuZG93bkFycm93IHx8IGtleSA9PT0gS2V5Q29kZS5kb3duQXJyb3cpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtleUNvZGUuZG93bkFycm93O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBLZXlOYW1lLnRhYiB8fCBrZXkgPT09IEtleUNvZGUudGFiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLZXlDb2RlLnRhYjtcclxuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gS2V5TmFtZS5zaGlmdCB8fCBrZXkgPT09IEtleUNvZGUuc2hpZnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtleUNvZGUuc2hpZnQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0TmVhckRhdGUobm93OiBJTXlEYXRlLCBtaW46IElNeURhdGUsIG1heDogSU15RGF0ZSkge1xyXG4gICAgICAgIGNvbnN0IG1pbk1pbGxpc2Vjb25kcyA9IHRoaXMuZ2V0VGltZUluTWlsbGlzZWNvbmRzKG1pbilcclxuICAgICAgICBjb25zdCBtYXhNaWxsaXNlY29uZHMgPSB0aGlzLmdldFRpbWVJbk1pbGxpc2Vjb25kcyhtYXgpXHJcbiAgICAgICAgY29uc3Qgbm93TWlsbGlzZWNvbmRzID0gdGhpcy5nZXRUaW1lSW5NaWxsaXNlY29uZHMobm93KVxyXG4gICAgICAgIGlmIChtYXhNaWxsaXNlY29uZHMgLSBub3dNaWxsaXNlY29uZHMgPiBub3dNaWxsaXNlY29uZHMgLSBtaW5NaWxsaXNlY29uZHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1pbjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbWF4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIOemgeeUqOaXtumXtOWvueW6lOeahOWwj+aXtlxyXG4gICAgLy8g6YCJ5Lit5pel5pyf562J5LqO5bem5Yy66Ze05pel5pyf5pe277yM56aB55So5bem56uv54K555qE5bem6YOo5YiGWzDvvIxtaW5Ib3Vy77yJXHJcbiAgICAvLyDpgInkuK3ml6XmnJ/nrYnkuo7lj7PljLrpl7Tml6XmnJ/ml7bvvIznpoHnlKjlj7Pnq6/ngrnnmoTlj7Ppg6jliIYobWF4SG91ciwyM11cclxuICAgIGRpc2FibGVkSG91cnMobWluOiBJTXlEYXRlLCBtYXg6IElNeURhdGUsIGN1cnJlbnREYXRlOiBJTXlEYXRlKSB7XHJcbiAgICAgICAgbGV0IG1pbkhvdXIgPSBtaW4uaG91cjtcclxuICAgICAgICBsZXQgbWF4SG91ciA9IG1heC5ob3VyO1xyXG4gICAgICAgIGxldCByZXMgPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5pc0RhdGVTYW1lKHsgeWVhcjogY3VycmVudERhdGUueWVhciwgbW9udGg6IGN1cnJlbnREYXRlLm1vbnRoLCBkYXk6IGN1cnJlbnREYXRlLmRheSB9LCB7IHllYXI6IG1pbi55ZWFyLCBtb250aDogbWluLm1vbnRoLCBkYXk6IG1pbi5kYXkgfSkpIHtcclxuICAgICAgICAgICAgd2hpbGUgKG1pbkhvdXItLSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXMucHVzaChtaW5Ib3VyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNEYXRlU2FtZSh7IHllYXI6IGN1cnJlbnREYXRlLnllYXIsIG1vbnRoOiBjdXJyZW50RGF0ZS5tb250aCwgZGF5OiBjdXJyZW50RGF0ZS5kYXkgfSwgeyB5ZWFyOiBtYXgueWVhciwgbW9udGg6IG1heC5tb250aCwgZGF5OiBtYXguZGF5IH0pKSB7XHJcbiAgICAgICAgICAgIHdoaWxlIChtYXhIb3VyKysgPCAyNCkge1xyXG4gICAgICAgICAgICAgICAgcmVzLnB1c2gobWF4SG91cik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIC8v56aB55So5pe26Ze05a+55bqU55qE5YiG6ZKfIFxyXG4gICAgLy/pgInkuK3ml6XmnJ/nrYnkuo7lt6bljLrpl7Tml6XmnJ/ml7bvvIznpoHnlKjlt6bnq6/ngrnnmoTlt6bpg6jliIZbMO+8jG1pbk1pbnV0Ze+8iVxyXG4gICAgLy/pgInkuK3ml6XmnJ/nrYnkuo7lj7PljLrpl7Tml6XmnJ/ml7bvvIznpoHnlKjlj7Pnq6/ngrnnmoTlj7Ppg6jliIbvvIhtYXhNaW51dGXvvIw1OV1cclxuICAgIGRpc2FibGVkTWludXRlcyhtaW46IElNeURhdGUsIG1heDogSU15RGF0ZSwgX2hvdXI6IG51bWJlciwgY3VycmVudERhdGU6IElNeURhdGUpIHtcclxuICAgICAgICBsZXQgbWF4SG91ciA9IG1heC5ob3VyO1xyXG4gICAgICAgIGxldCBtYXhNaW51dGUgPSBtYXgubWludXRlO1xyXG4gICAgICAgIGxldCBtaW5Ib3VyID0gbWluLmhvdXI7XHJcbiAgICAgICAgbGV0IG1pbk1pbnV0ZSA9IG1pbi5taW51dGU7XHJcbiAgICAgICAgbGV0IHJlcyA9IFtdO1xyXG4gICAgICAgIGlmICh0aGlzLmlzRGF0ZVNhbWUoeyB5ZWFyOiBjdXJyZW50RGF0ZS55ZWFyLCBtb250aDogY3VycmVudERhdGUubW9udGgsIGRheTogY3VycmVudERhdGUuZGF5IH0sIHsgeWVhcjogbWluLnllYXIsIG1vbnRoOiBtaW4ubW9udGgsIGRheTogbWluLmRheSB9KSkge1xyXG4gICAgICAgICAgICBpZiAoX2hvdXIgPT0gbWluSG91cikge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG1pbk1pbnV0ZS0tID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChtaW5NaW51dGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNEYXRlU2FtZSh7IHllYXI6IGN1cnJlbnREYXRlLnllYXIsIG1vbnRoOiBjdXJyZW50RGF0ZS5tb250aCwgZGF5OiBjdXJyZW50RGF0ZS5kYXkgfSwgeyB5ZWFyOiBtYXgueWVhciwgbW9udGg6IG1heC5tb250aCwgZGF5OiBtYXguZGF5IH0pKSB7XHJcbiAgICAgICAgICAgIGlmIChfaG91ciA9PSBtYXhIb3VyKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobWF4TWludXRlKysgPCA2MCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKG1heE1pbnV0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXM7XHJcblxyXG4gICAgfVxyXG4gICAgLy/npoHnlKjml7bpl7Tlr7nlupTnmoTnp5IgXHJcbiAgICAvL+mAieS4reaXpeacn+etieS6juW3puWMuumXtOaXpeacn+aXtu+8jOemgeeUqOW3puerr+eCueeahOW3pumDqOWIhlsw77yMbWluU2Vjb25k77yJXHJcbiAgICAvL+mAieS4reaXpeacn+etieS6juWPs+WMuumXtOaXpeacn+aXtu+8jOemgeeUqOWPs+err+eCueeahOWPs+mDqOWIhu+8iG1heFNlY29uZO+8jDU5XVxyXG4gICAgZGlzYWJsZWRTZWNvbmRzKG1pbjogSU15RGF0ZSwgbWF4OiBJTXlEYXRlLCBfaG91cjogbnVtYmVyLCBfbWludXRlOiBudW1iZXIsIGN1cnJlbnREYXRlOiBJTXlEYXRlKSB7XHJcbiAgICAgICAgbGV0IG1heEhvdXIgPSBtYXguaG91cjtcclxuICAgICAgICBsZXQgbWF4TWludXRlID0gbWF4Lm1pbnV0ZTtcclxuICAgICAgICBsZXQgbWF4U2Vjb25kID0gbWF4LnNlY29uZDtcclxuICAgICAgICBsZXQgbWluSG91ciA9IG1pbi5ob3VyO1xyXG4gICAgICAgIGxldCBtaW5NaW51dGUgPSBtaW4ubWludXRlO1xyXG4gICAgICAgIGxldCBtaW5TZWNvbmQgPSBtaW4uc2Vjb25kO1xyXG4gICAgICAgIGxldCByZXMgPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5pc0RhdGVTYW1lKHsgeWVhcjogY3VycmVudERhdGUueWVhciwgbW9udGg6IGN1cnJlbnREYXRlLm1vbnRoLCBkYXk6IGN1cnJlbnREYXRlLmRheSB9LCB7IHllYXI6IG1pbi55ZWFyLCBtb250aDogbWluLm1vbnRoLCBkYXk6IG1pbi5kYXkgfSkpIHtcclxuICAgICAgICAgICAgaWYgKF9ob3VyID09IG1pbkhvdXIgJiYgX21pbnV0ZSA9PSBtaW5NaW51dGUpIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChtaW5TZWNvbmQtLSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2gobWluU2Vjb25kKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNEYXRlU2FtZSh7IHllYXI6IGN1cnJlbnREYXRlLnllYXIsIG1vbnRoOiBjdXJyZW50RGF0ZS5tb250aCwgZGF5OiBjdXJyZW50RGF0ZS5kYXkgfSwgeyB5ZWFyOiBtYXgueWVhciwgbW9udGg6IG1heC5tb250aCwgZGF5OiBtYXguZGF5IH0pKSB7XHJcbiAgICAgICAgICAgIGlmIChfaG91ciA9PSBtYXhIb3VyICYmIF9taW51dGUgPT0gbWF4TWludXRlKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobWF4U2Vjb25kKysgPCA2MCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKG1heFNlY29uZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHByaXZhdGUgZ2V0RGF0ZVR5cGVTdHJpbmcoZHQ6IER5bmFtaWNEYXRlVHlwZSwgZHluYW1pY0xvY2FsZSkge1xyXG4gICAgICAgIHN3aXRjaChkdCkge1xyXG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBkeW5hbWljTG9jYWxlLndlZWsgfHwgJ+WRqCc7XHJcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZHluYW1pY0xvY2FsZS5kYXkgfHwgJ+WkqSc7XHJcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBkeW5hbWljTG9jYWxlLm1vbnRoIHx8ICfmnIgnO1xyXG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBkeW5hbWljTG9jYWxlLnllYXIgfHwgJ+W5tCc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvcm1hdER5bmFtaWNWYWx1ZSh2YWw6IER5bmFtaWNEYXRhLCBkeW5hbWljTG9jYWxlKSB7XHJcbiAgICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgICAgICBsZXQgZnZhbCA9ICcnO1xyXG4gICAgICAgICAgICBzd2l0Y2godmFsLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3ByZXNlbnRfZGF5JzogLy8g5LuK5aSpXHJcbiAgICAgICAgICAgICAgICBmdmFsID0gZHluYW1pY0xvY2FsZS50b2RheSB8fCAn5LuK5aSpJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdwcmVzZW50X21vbnRoJzogLy8g5pys5pyIXHJcbiAgICAgICAgICAgICAgICBmdmFsID0gZHluYW1pY0xvY2FsZS5wcmVzZW50TW9udGggfHwgJ+acrOaciCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAncHJlc2VudF95ZWFyJzpcclxuICAgICAgICAgICAgICAgIGZ2YWwgPSBkeW5hbWljTG9jYWxlLnByZXNlbnRZZWFyIHx8J+acrOW5tCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAncHJldmlvdSc6XHJcbiAgICAgICAgICAgICAgICBmdmFsID0gIChkeW5hbWljTG9jYWxlLnByZXZpb3VzfHwgJ+i/h+WOuycpICsgJyAnICsgdmFsLmNvdW50ICsgJyAnICsgdGhpcy5nZXREYXRlVHlwZVN0cmluZyh2YWwuZGF0ZVR5cGUsIGR5bmFtaWNMb2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2Z1dHVyZSc6XHJcbiAgICAgICAgICAgICAgICBmdmFsID0gKGR5bmFtaWNMb2NhbGUuZnV0dXJlIHx8ICfmnKrmnaUnKSArICcgJysgdmFsLmNvdW50ICsgJyAnICt0aGlzLmdldERhdGVUeXBlU3RyaW5nKHZhbC5kYXRlVHlwZSwgZHluYW1pY0xvY2FsZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAncHJlc2VudF9maXJzdCc6XHJcbiAgICAgICAgICAgICAgICBmdmFsID0gKGR5bmFtaWNMb2NhbGUuY3VycmVudHx8J+acrCcpICsgdGhpcy5nZXREYXRlVHlwZVN0cmluZyh2YWwuZGF0ZVR5cGUsIGR5bmFtaWNMb2NhbGUpICsgKGR5bmFtaWNMb2NhbGUuZmlyc3R8fCfnrKwgMSDlpKknKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdwcmVzZW50X2xhc3QnOlxyXG4gICAgICAgICAgICAgICAgZnZhbCA9IChkeW5hbWljTG9jYWxlLmN1cnJlbnR8fCfmnKwnKSArIHRoaXMuZ2V0RGF0ZVR5cGVTdHJpbmcodmFsLmRhdGVUeXBlLCBkeW5hbWljTG9jYWxlKSArIChkeW5hbWljTG9jYWxlLmxhc3R8fCfmnIDlkI4gMSDlpKknKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZnZhbDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==