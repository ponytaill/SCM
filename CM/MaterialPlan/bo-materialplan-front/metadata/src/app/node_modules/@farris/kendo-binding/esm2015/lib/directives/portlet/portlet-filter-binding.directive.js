import { Directive, Injector, Input } from "@angular/core";
import { ChangeType, FrameContext, VariableParseService } from "@farris/devkit";
import { PortletComponent } from '@gspwidget/portlet';
import { Subject } from "rxjs";
import { filter } from "rxjs/operators";
import { ExpressionType } from "./types";
const DATA_PATTERN = /\{:?DATA~(\S+?)\}/;
const DATA_PATTERN_GLOBAL = new RegExp(DATA_PATTERN, 'g');
const UI_STATE_PATTERN = /\{:?UISTATE~(\S+?)\}/;
const UI_STATE_PATTERN_GLOBAL = new RegExp(UI_STATE_PATTERN, 'g');
export class PortletFilterBindingDirective {
    constructor(injector, portletComponent, frameContext, variableParseService) {
        this.injector = injector;
        this.portletComponent = portletComponent;
        this.frameContext = frameContext;
        this.variableParseService = variableParseService;
        this.subject = new Subject();
        this.FilterFieldKey = 'dpId';
        this.FilterValueKey = 'value';
    }
    get changes() {
        return this.subject;
    }
    ngOnInit() {
        // 监听数据变化，执行第一次的绑定
        this.frameContext.bindingData.changes.pipe(filter((change) => {
            return (change.type === ChangeType.Load || change.type === ChangeType.Remove || change.type === ChangeType.Update || change.type === ChangeType.SelectionChanged) && (!change.path || change.path.length < 1);
        })).subscribe((change) => {
            this.filter();
        });
        this.changes.subscribe(() => {
            this.filter();
        });
        this.observeChanges();
    }
    filter() {
        const filters = this.buildFilters();
        this.portletComponent.widget.handleFilterChange(filters);
    }
    deserializeFilter() {
        if (!this.filters) {
            return [];
        }
        let filters = [];
        if (typeof this.filters === 'string') {
            filters = JSON.parse(this.filters);
        }
        else if (Array.isArray(this.filters)) {
            filters = this.filters;
        }
        else {
            console.error('invalid filters');
        }
        return filters;
    }
    /**
     * 将表单配置的过滤条件转换为小部件支持的过滤条件
     * @returns
     */
    buildFilters() {
        const filters = this.deserializeFilter();
        const result = [];
        if (!filters || filters.length < 1) {
            return result;
        }
        filters.forEach(filter => {
            result.push({
                dpId: filter[this.FilterFieldKey],
                value: this.variableParseService.parse(filter[this.FilterValueKey], this.frameContext)
            });
        });
        return result;
    }
    collectDependencies(expression) {
        const bindingDataDependencies = this.getBindingDataDependencies(expression);
        const uistateDependencies = this.getUIstateDependencies(expression);
        return bindingDataDependencies.concat(uistateDependencies);
    }
    getBindingDataDependencies(expression) {
        const matchs = expression.match(DATA_PATTERN_GLOBAL);
        return this.buildDependencies(matchs, DATA_PATTERN, ExpressionType.BindingData);
    }
    getUIstateDependencies(expression) {
        const matchs = expression.match(UI_STATE_PATTERN_GLOBAL);
        return this.buildDependencies(matchs, UI_STATE_PATTERN, ExpressionType.UIState);
    }
    buildDependencies(expressions, expr, expressionType) {
        const dependencies = [];
        expressions && expressions.forEach((expression) => {
            const pathMatches = expression.match(expr);
            const dependency = this.buildDependency(pathMatches, expressionType);
            dependencies.push(dependency);
        });
        return dependencies;
    }
    buildDependency(matchs, expressionType) {
        if (matchs && matchs.length === 2) {
            const exps = matchs[1].split('/').filter(p => p);
            const frameId = exps.shift();
            const paths = exps;
            const dependency = {
                type: expressionType,
                frameId,
                paths
            };
            return dependency;
        }
    }
    getFrameContext(frameId) {
        frameId = this.frameContext.getFrameId(frameId);
        return this.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
    }
    observeChanges() {
        const filters = this.deserializeFilter();
        filters && filters.forEach((filter) => {
            const dependencies = this.collectDependencies(filter[this.FilterValueKey]);
            if (dependencies && dependencies.length > 0) {
                dependencies.forEach((dep) => {
                    const frameContext = this.getFrameContext(dep.frameId);
                    if (dep.type === ExpressionType.BindingData) {
                        this.observeBindingDataChange(frameContext, dep.paths);
                    }
                    else if (dep.type === ExpressionType.UIState) {
                        this.observeUIStateChange(frameContext, dep.paths.pop());
                    }
                });
            }
        });
    }
    observeUIStateChange(frameContext, path) {
        frameContext.uiState.changes.subscribe((change) => {
            if (change.field === path) {
                this.subject.next();
            }
        });
    }
    observeBindingDataChange(frameContext, paths) {
        frameContext.bindingData.changes.pipe(
        // 只监听主表变化
        filter((change) => change.type === ChangeType.ValueChanged)).subscribe((change) => {
            if (change.path.join('/') === paths.join('/')) {
                this.subject.next();
            }
        });
    }
}
PortletFilterBindingDirective.decorators = [
    { type: Directive, args: [{
                selector: "[portlet-filter-binding]"
            },] }
];
/** @nocollapse */
PortletFilterBindingDirective.ctorParameters = () => [
    { type: Injector },
    { type: PortletComponent },
    { type: FrameContext },
    { type: VariableParseService }
];
PortletFilterBindingDirective.propDecorators = {
    filters: [{ type: Input, args: ["portlet-filter-binding",] }]
};
//# sourceMappingURL=data:application/json;base64,