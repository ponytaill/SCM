import { ReflectiveInjector } from '@angular/core';
import { isObservable, of, Subject } from 'rxjs';
import { CommandHandler } from './command_handler';
export class DynamicCommandHandler extends CommandHandler {
    constructor(commandName, method) {
        super();
        this.commandName = commandName;
        this.method = method;
    }
    dynamicInvoke(serviceTocken, method, args, context) {
        const serviceInstance = context.frameContext.injector.get(serviceTocken, null);
        if (serviceInstance) {
            this.setContextToServiceInstance(serviceInstance, context);
            const parsedStageParams = this.parseService.parse(args, context);
            const parsedArgs = parsedStageParams.map(param => param.expression);
            // tslint:disable-next-line: ban-types
            const serviceMethod = serviceInstance[method];
            return serviceMethod.apply(serviceInstance, parsedArgs);
        }
    }
    dynamicInvoke2(methodObject, context) {
        const { source: serviceUri, service: serviceName, method } = methodObject;
        const args = methodObject.params.map(stageParam => {
            return Object.assign({}, stageParam);
        });
        const result$ = new Subject();
        // const serviceSpecifer = controllerMap.imports[serviceUri] || serviceUri;
        const serviceSpecifer = serviceUri && serviceUri.toLowerCase();
        if (serviceSpecifer) {
            System.import(serviceSpecifer)
                .then((serviceModule) => {
                const serviceConstructor = serviceModule[serviceName];
                if (serviceConstructor) {
                    const originalContextInjector = context.frameContext.injector;
                    let serviceInstance;
                    // const resolvedReflectiveProviders = ReflectiveInjector.resolve([{ provide: serviceName, useClass: serviceConstructor }]);
                    if (context.frameContext.injector.get(serviceName, null)) {
                        serviceInstance = context.frameContext.injector.get(serviceName);
                    }
                    else {
                        const resolvedReflectiveProviders = this.loadProvidersFromModule(serviceModule);
                        const reflectiveInjector = ReflectiveInjector.fromResolvedProviders(resolvedReflectiveProviders, context.frameContext.injector);
                        context.frameContext.injector = reflectiveInjector;
                        serviceInstance = reflectiveInjector.get(serviceName, null);
                    }
                    if (serviceInstance) {
                        this.setContextToServiceInstance(serviceInstance, context);
                        const parsedStageParams = this.parseService.parse(args, context);
                        const parsedArgs = parsedStageParams.map(param => param.expression);
                        // tslint:disable-next-line: ban-types
                        const serviceMethod = serviceInstance[method];
                        const serviceMethodResult = serviceMethod.apply(serviceInstance, parsedArgs);
                        const result$$ = isObservable(serviceMethodResult) ? serviceMethodResult : of(serviceMethodResult);
                        result$$.subscribe({
                            next: (result) => {
                                result$.next(result);
                            },
                            error: (error) => {
                                result$.error(error);
                            },
                            complete: () => {
                                result$.complete();
                                context.frameContext.injector = originalContextInjector;
                            },
                        });
                        // return serviceMethod.apply(serviceInstance, parsedArgs);
                    }
                }
            });
        }
        return result$;
    }
    schedule() {
        this.scheduleStages(this.method.stages, null);
        // this.method.stages.reduce((preStage: MethodStage, currentStage: MethodStage) => {
        //   if (currentStage.type === '0') {
        //     this.addTask(currentStage.name, (context: CommandContext) => {
        //       return this.dynamicInvoke2(currentStage as ExecutingStage, context);
        //     });
        //     if (preStage) {
        //       this.addLink(preStage.name, currentStage.name, `1===1`);
        //     }
        //   } else if (currentStage.type === '2') {
        //   } else {
        //     throw new Error(`unknow method stage type, the ${currentStage.name}'s type is ${currentStage.type}`);
        //   }
        //   return currentStage;
        // }, null);
    }
    scheduleStages(stages, initialStage) {
        stages.reduce((preStage, currentStage) => {
            if (currentStage.type === 'executing') {
                this.addTask(currentStage.name, (context) => {
                    return this.dynamicInvoke2(currentStage, context);
                });
            }
            else if (currentStage.type === 'fork') {
                const forkStages = currentStage.stages;
                forkStages.forEach(forkStage => {
                    this.scheduleStages(forkStage.stages, forkStage);
                });
                this.scheduleStages(currentStage.stages, currentStage);
            }
            else if (currentStage.type === 'determing') {
                this.addTask(currentStage.name, (context) => {
                    return of(true);
                });
            }
            else {
                throw new Error(`unknow method stage type, the ${currentStage.name}'s type is ${currentStage.type}`);
            }
            if (preStage) {
                const condition = preStage.type === 'determing' ? preStage.condition : `1===1`;
                this.addLink(preStage.name, currentStage.name, condition);
            }
            return currentStage;
        }, initialStage);
    }
    loadProvidersFromModule(serviceModule) {
        const providerArray = [];
        for (const propertyName in serviceModule) {
            if (Object.prototype.hasOwnProperty.call(serviceModule, propertyName)) {
                const propertyValue = serviceModule[propertyName];
                if (this.isInjectableService(propertyValue)) {
                    // const providerName = propertyValue.name === 'e' ? propertyName : propertyValue.name;
                    const providerName = propertyName;
                    providerArray.push({ provide: providerName, useClass: propertyValue });
                    providerArray.push(propertyValue);
                }
            }
        }
        const resolvedReflectiveProviders = ReflectiveInjector.resolve(providerArray);
        return resolvedReflectiveProviders;
    }
    isInjectableService(propertyValue) {
        let hasInjectableDecorator = false;
        const isFunction = propertyValue instanceof Function;
        if (isFunction && propertyValue.hasOwnProperty('decorators')) {
            const decorators = propertyValue.decorators;
            const injectableDecorators = decorators.filter(decorator => {
                if (decorator.type && decorator.type.prototype && decorator.type.prototype.ngMetadataName === 'Injectable') {
                    return decorator;
                }
            });
            hasInjectableDecorator = injectableDecorators && injectableDecorators.length > 0;
        }
        else if (isFunction && propertyValue.hasOwnProperty('__annotations__')) {
            const decorators = propertyValue.__annotations__;
            const injectableDecorators = decorators.filter(decoratorFactory => {
                if (decoratorFactory && decoratorFactory.ngMetadataName && decoratorFactory.ngMetadataName === 'Injectable') {
                    return decoratorFactory;
                }
            });
            hasInjectableDecorator = injectableDecorators && injectableDecorators.length > 0;
        }
        return hasInjectableDecorator;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pY19jb21tYW5kX2hhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2RldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kL2R5bmFtaWNfY29tbWFuZF9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFakQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBd0ZuRCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsY0FBYztJQUV2RCxZQUFtQixXQUFtQixFQUFVLE1BQXdCO1FBQ3RFLEtBQUssRUFBRSxDQUFDO1FBRFMsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFrQjtJQUV4RSxDQUFDO0lBRU0sYUFBYSxDQUFDLGFBQXFCLEVBQUUsTUFBYyxFQUFFLElBQWtCLEVBQUUsT0FBdUI7UUFDckcsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMvRSxJQUFJLGVBQWUsRUFBRTtZQUNuQixJQUFJLENBQUMsMkJBQTJCLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzNELE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBaUIsQ0FBQztZQUNqRixNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDcEUsc0NBQXNDO1lBQ3RDLE1BQU0sYUFBYSxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQWEsQ0FBQztZQUMxRCxP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QyxlQUF3QixDQUFDO1lBQzFELE1BQU0sb0JBQW9CLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO2dCQUNoRSxJQUFJLGdCQUFnQixJQUFJLGdCQUFnQixDQUFDLGNBQWMsSUFBSSxnQkFBZ0IsQ0FBQyxjQUFjLEtBQUssWUFBWSxFQUFFO29CQUMzRyxPQUFPLGdCQUFnQixDQUFDO2lCQUN6QjtZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsc0JBQXNCLEdBQUcsb0JBQW9CLElBQUksb0JBQW9CLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztTQUNsRjtRQUNELE9BQU8sc0JBQXNCLENBQUM7SUFDaEMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVmbGVjdGl2ZUluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGlzT2JzZXJ2YWJsZSwgb2YsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQ29tbWFuZENvbnRleHQgfSBmcm9tICcuL2NvbW1hbmRfY29udGV4dCc7XHJcbmltcG9ydCB7IENvbW1hbmRIYW5kbGVyIH0gZnJvbSAnLi9jb21tYW5kX2hhbmRsZXInO1xyXG5pbXBvcnQge1xyXG4gIENvbnRyb2xsZXJNZXRob2QsIERldGVybWluaW5nU3RhZ2UsIEV4ZWN1dGluZ1N0YWdlLFxyXG4gIEZvcmtTdGFnZSwgTWV0aG9kU3RhZ2UsIFN0YWdlUGFyYW1cclxufSBmcm9tICcuL2R5bmFtaWNfY29tbWFuZF9oYW5kbGVyX21ldGFkYXRhJztcclxuXHJcbi8qKlxyXG4gKiBASW5qZWN0YWJsZSgpXHJcbiAqIEBOZ0NvbW1hbmRIYW5kbGVyKHtcclxuICogICAgIGNvbW1hbmROYW1lOiAnYWRkMSdcclxuICogfSlcclxuICogZXhwb3J0IGNsYXNzIGFkZDFIYW5kbGVyIGV4dGVuZHMgQ29tbWFuZEhhbmRsZXIge1xyXG4gKiAgICAgY29uc3RydWN0b3IoXHJcbiAqICAgICAgICAgcHVibGljIF9MaXN0RGF0YVNlcnZpY2UxOiBMaXN0RGF0YVNlcnZpY2UxLFxyXG4gKiAgICAgICAgIHB1YmxpYyBfU3RhdGVNYWNoaW5lU2VydmljZTE6IFN0YXRlTWFjaGluZVNlcnZpY2UxXHJcbiAqICAgICApIHtcclxuICogICAgICAgICBzdXBlcigpO1xyXG4gKiAgICAgfVxyXG4gKlxyXG4gKiAgICAgc2NoZWR1bGUoKSB7XHJcbiAqICAgICAgICAgdGhpcy5hZGRUYXNrKCdhcHBlbmQnLCAoY29udGV4dDogQ29tbWFuZENvbnRleHQpID0+IHtcclxuICogICAgICAgICAgICAgY29uc3QgYXJncyA9IFtdO1xyXG4gKiAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnZva2UodGhpcy5fTGlzdERhdGFTZXJ2aWNlMSwgJ2FwcGVuZCcsIGFyZ3MsIGNvbnRleHQpO1xyXG4gKiAgICAgICAgIH0pO1xyXG4gKlxyXG4gKiAgICAgICAgIHRoaXMuYWRkVGFzaygndHJhbnNpdCcsIChjb250ZXh0OiBDb21tYW5kQ29udGV4dCkgPT4ge1xyXG4gKiAgICAgICAgICAgICBjb25zdCBhcmdzID0gW1xyXG4gKiAgICAgICAgICAgICAgICAgJ0NyZWF0ZSdcclxuICogICAgICAgICAgICAgICAgICAgICBdO1xyXG4gKiAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnZva2UodGhpcy5fU3RhdGVNYWNoaW5lU2VydmljZTEsICd0cmFuc2l0JywgYXJncywgY29udGV4dCk7XHJcbiAqICAgICAgICAgfSk7XHJcbiAqXHJcbiAqICAgICAgICAgdGhpcy5hZGRMaW5rKCdhcHBlbmQnLCAndHJhbnNpdCcsIGAxPT0xYCk7XHJcbiAqICAgICB9XHJcbiAqIH1cclxuICovXHJcblxyXG4vLyBjb25zdCBjb250cm9sbGVyTWFwID0ge1xyXG4vLyAgIGltcG9ydHM6IHtcclxuLy8gICAgIFZhbGlkYXRpb25TZXJ2aWNlOiAnL3BsYXRmb3JtL2NvbW1vbi93ZWIvQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLmpzJyxcclxuLy8gICAgIEZvY3VzSW52YWxpZFNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgQ2hhbmdlSXRlbVNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgVUlTdGF0ZVNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgU3RhdGVNYWNoaW5lU2VydmljZTogJy9wbGF0Zm9ybS9jb21tb24vd2ViL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy5qcycsXHJcbi8vICAgICBCaW5kaW5nRGF0YVNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgQ29tbWFuZFNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgRW50aXR5VHJhdmVyc2luZ1NlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgRW50aXR5TWFuaXB1bGF0aW9uU2VydmljZTogJy9wbGF0Zm9ybS9jb21tb24vd2ViL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy5qcycsXHJcbi8vICAgICBFbnRpdHlBZ2dyZWdhdGlvblNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgRW50aXR5TGlzdFNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgRW50aXR5U2VydmljZTogJy9wbGF0Zm9ybS9jb21tb24vd2ViL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy5qcycsXHJcbi8vICAgICBMaXN0RGF0YVNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgVHJlZURhdGFTZXJ2aWNlOiAnL3BsYXRmb3JtL2NvbW1vbi93ZWIvQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLmpzJyxcclxuLy8gICAgIFN1YlRyZWVEYXRhU2VydmljZTogJy9wbGF0Zm9ybS9jb21tb24vd2ViL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy5qcycsXHJcbi8vICAgICBDYXJkRGF0YVNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgU3ViTGlzdERhdGFTZXJ2aWNlOiAnL3BsYXRmb3JtL2NvbW1vbi93ZWIvQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLmpzJyxcclxuLy8gICAgIFJlbW92ZURhdGFTZXJ2aWNlOiAnL3BsYXRmb3JtL2NvbW1vbi93ZWIvQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLmpzJyxcclxuLy8gICAgIFNhdmVEYXRhU2VydmljZTogJy9wbGF0Zm9ybS9jb21tb24vd2ViL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy5qcycsXHJcbi8vICAgICBFZGl0RGF0YVNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgRmlsdGVyQ29uZGl0aW9uRGF0YVNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgUmVtb3RlU3VtbWFyeVNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgQmVBY3Rpb25TZXJ2aWNlOiAnL3BsYXRmb3JtL2NvbW1vbi93ZWIvQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLmpzJyxcclxuLy8gICAgIEFwcHJvdmVTZXJ2aWNlOiAnL3BsYXRmb3JtL2NvbW1vbi93ZWIvQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLmpzJyxcclxuLy8gICAgIFByaW50U2VydmljZTogJy9wbGF0Zm9ybS9jb21tb24vd2ViL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy5qcycsXHJcbi8vICAgICBBdHRhY2htZW50RGF0YVNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgQXR0YWNobWVudFNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgRmlsZVNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgTmF2aWdhdGlvbk1pZGRsZXdhcmVTZXJ2aWNlOiAnL3BsYXRmb3JtL2NvbW1vbi93ZWIvQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLmpzJyxcclxuLy8gICAgIEdyaWRNaWRkbGV3YXJlU2VydmljZTogJy9wbGF0Zm9ybS9jb21tb24vd2ViL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy5qcycsXHJcbi8vICAgICBTaWRlYmFyU2VydmljZTogJy9wbGF0Zm9ybS9jb21tb24vd2ViL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy5qcycsXHJcbi8vICAgICBGYXJyaXNGb3JtU2VydmljZTogJy9wbGF0Zm9ybS9jb21tb24vd2ViL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy5qcycsXHJcbi8vICAgICBEaWFsb2dTZXJ2aWNlOiAnL3BsYXRmb3JtL2NvbW1vbi93ZWIvQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLmpzJyxcclxuLy8gICAgIE5hdmlnYXRpb25FdmVudFNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgTmF2aWdhdGlvblNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgUm91dGVyU2VydmljZTogJy9wbGF0Zm9ybS9jb21tb24vd2ViL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy5qcycsXHJcbi8vICAgICBBdXRob3JpdHlTZXJ2aWNlOiAnL3BsYXRmb3JtL2NvbW1vbi93ZWIvQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLmpzJyxcclxuLy8gICAgIEVuZEVkaXRTZXJ2aWNlOiAnL3BsYXRmb3JtL2NvbW1vbi93ZWIvQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLmpzJyxcclxuLy8gICAgIEJhdGNoRWRpdERpYWxvZ1NlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgQmF0Y2hFZGl0U2VydmljZTogJy9wbGF0Zm9ybS9jb21tb24vd2ViL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy5qcycsXHJcbi8vICAgICBEaXNjdXNzaW9uR3JvdXBTZXJ2aWNlOiAnL3BsYXRmb3JtL2NvbW1vbi93ZWIvQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLmpzJyxcclxuLy8gICAgIExvY2FsaXphdGlvblNlcnZpY2U6ICcvcGxhdGZvcm0vY29tbW9uL3dlYi9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMuanMnLFxyXG4vLyAgICAgRGF0YUdyaWRTZXJ2aWNlOiAnL3BsYXRmb3JtL2NvbW1vbi93ZWIvQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLmpzJyxcclxuLy8gICAgIEZvcm1BdHRlbnRpb25TZXJ2aWNlOiAnL3BsYXRmb3JtL2NvbW1vbi93ZWIvQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLmpzJyxcclxuLy8gICB9XHJcbi8vIH07XHJcblxyXG5kZWNsYXJlIGNvbnN0IFN5c3RlbTogYW55O1xyXG5cclxuZXhwb3J0IGNsYXNzIER5bmFtaWNDb21tYW5kSGFuZGxlciBleHRlbmRzIENvbW1hbmRIYW5kbGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIGNvbW1hbmROYW1lOiBzdHJpbmcsIHByaXZhdGUgbWV0aG9kOiBDb250cm9sbGVyTWV0aG9kKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGR5bmFtaWNJbnZva2Uoc2VydmljZVRvY2tlbjogc3RyaW5nLCBtZXRob2Q6IHN0cmluZywgYXJnczogU3RhZ2VQYXJhbVtdLCBjb250ZXh0OiBDb21tYW5kQ29udGV4dCkge1xyXG4gICAgY29uc3Qgc2VydmljZUluc3RhbmNlID0gY29udGV4dC5mcmFtZUNvbnRleHQuaW5qZWN0b3IuZ2V0KHNlcnZpY2VUb2NrZW4sIG51bGwpO1xyXG4gICAgaWYgKHNlcnZpY2VJbnN0YW5jZSkge1xyXG4gICAgICB0aGlzLnNldENvbnRleHRUb1NlcnZpY2VJbnN0YW5jZShzZXJ2aWNlSW5zdGFuY2UsIGNvbnRleHQpO1xyXG4gICAgICBjb25zdCBwYXJzZWRTdGFnZVBhcmFtcyA9IHRoaXMucGFyc2VTZXJ2aWNlLnBhcnNlKGFyZ3MsIGNvbnRleHQpIGFzIFN0YWdlUGFyYW1bXTtcclxuICAgICAgY29uc3QgcGFyc2VkQXJncyA9IHBhcnNlZFN0YWdlUGFyYW1zLm1hcChwYXJhbSA9PiBwYXJhbS5leHByZXNzaW9uKTtcclxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBiYW4tdHlwZXNcclxuICAgICAgY29uc3Qgc2VydmljZU1ldGhvZCA9IHNlcnZpY2VJbnN0YW5jZVttZXRob2RdIGFzIEZ1bmN0aW9uO1xyXG4gICAgICByZXR1cm4gc2VydmljZU1ldGhvZC5hcHBseShzZXJ2aWNlSW5zdGFuY2UsIHBhcnNlZEFyZ3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGR5bmFtaWNJbnZva2UyKG1ldGhvZE9iamVjdDogRXhlY3V0aW5nU3RhZ2UsIGNvbnRleHQ6IENvbW1hbmRDb250ZXh0KSB7XHJcbiAgICBjb25zdCB7IHNvdXJjZTogc2VydmljZVVyaSwgc2VydmljZTogc2VydmljZU5hbWUsIG1ldGhvZCB9ID0gbWV0aG9kT2JqZWN0O1xyXG4gICAgY29uc3QgYXJncyA9IG1ldGhvZE9iamVjdC5wYXJhbXMubWFwKHN0YWdlUGFyYW0gPT4ge1xyXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhZ2VQYXJhbSk7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHJlc3VsdCQgPSBuZXcgU3ViamVjdCgpO1xyXG4gICAgLy8gY29uc3Qgc2VydmljZVNwZWNpZmVyID0gY29udHJvbGxlck1hcC5pbXBvcnRzW3NlcnZpY2VVcmldIHx8IHNlcnZpY2VVcmk7XHJcbiAgICBjb25zdCBzZXJ2aWNlU3BlY2lmZXIgPSBzZXJ2aWNlVXJpICYmIHNlcnZpY2VVcmkudG9Mb3dlckNhc2UoKTtcclxuICAgIGlmIChzZXJ2aWNlU3BlY2lmZXIpIHtcclxuICAgICAgU3lzdGVtLmltcG9ydChzZXJ2aWNlU3BlY2lmZXIpXHJcbiAgICAgICAgLnRoZW4oKHNlcnZpY2VNb2R1bGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgY29uc3Qgc2VydmljZUNvbnN0cnVjdG9yID0gc2VydmljZU1vZHVsZVtzZXJ2aWNlTmFtZV07XHJcbiAgICAgICAgICBpZiAoc2VydmljZUNvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsQ29udGV4dEluamVjdG9yID0gY29udGV4dC5mcmFtZUNvbnRleHQuaW5qZWN0b3I7XHJcbiAgICAgICAgICAgIGxldCBzZXJ2aWNlSW5zdGFuY2U7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IHJlc29sdmVkUmVmbGVjdGl2ZVByb3ZpZGVycyA9IFJlZmxlY3RpdmVJbmplY3Rvci5yZXNvbHZlKFt7IHByb3ZpZGU6IHNlcnZpY2VOYW1lLCB1c2VDbGFzczogc2VydmljZUNvbnN0cnVjdG9yIH1dKTtcclxuICAgICAgICAgICAgaWYgKGNvbnRleHQuZnJhbWVDb250ZXh0LmluamVjdG9yLmdldChzZXJ2aWNlTmFtZSwgbnVsbCkpIHtcclxuICAgICAgICAgICAgICBzZXJ2aWNlSW5zdGFuY2UgPSBjb250ZXh0LmZyYW1lQ29udGV4dC5pbmplY3Rvci5nZXQoc2VydmljZU5hbWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkUmVmbGVjdGl2ZVByb3ZpZGVycyA9IHRoaXMubG9hZFByb3ZpZGVyc0Zyb21Nb2R1bGUoc2VydmljZU1vZHVsZSk7XHJcbiAgICAgICAgICAgICAgY29uc3QgcmVmbGVjdGl2ZUluamVjdG9yID0gUmVmbGVjdGl2ZUluamVjdG9yLmZyb21SZXNvbHZlZFByb3ZpZGVycyhyZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcnMsIGNvbnRleHQuZnJhbWVDb250ZXh0LmluamVjdG9yKTtcclxuICAgICAgICAgICAgICBjb250ZXh0LmZyYW1lQ29udGV4dC5pbmplY3RvciA9IHJlZmxlY3RpdmVJbmplY3RvcjtcclxuICAgICAgICAgICAgICBzZXJ2aWNlSW5zdGFuY2UgPSByZWZsZWN0aXZlSW5qZWN0b3IuZ2V0KHNlcnZpY2VOYW1lLCBudWxsKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHNlcnZpY2VJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgIHRoaXMuc2V0Q29udGV4dFRvU2VydmljZUluc3RhbmNlKHNlcnZpY2VJbnN0YW5jZSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgY29uc3QgcGFyc2VkU3RhZ2VQYXJhbXMgPSB0aGlzLnBhcnNlU2VydmljZS5wYXJzZShhcmdzLCBjb250ZXh0KSBhcyBTdGFnZVBhcmFtW107XHJcbiAgICAgICAgICAgICAgY29uc3QgcGFyc2VkQXJncyA9IHBhcnNlZFN0YWdlUGFyYW1zLm1hcChwYXJhbSA9PiBwYXJhbS5leHByZXNzaW9uKTtcclxuICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGJhbi10eXBlc1xyXG4gICAgICAgICAgICAgIGNvbnN0IHNlcnZpY2VNZXRob2QgPSBzZXJ2aWNlSW5zdGFuY2VbbWV0aG9kXSBhcyBGdW5jdGlvbjtcclxuICAgICAgICAgICAgICBjb25zdCBzZXJ2aWNlTWV0aG9kUmVzdWx0ID0gc2VydmljZU1ldGhvZC5hcHBseShzZXJ2aWNlSW5zdGFuY2UsIHBhcnNlZEFyZ3MpO1xyXG4gICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCQkID0gaXNPYnNlcnZhYmxlKHNlcnZpY2VNZXRob2RSZXN1bHQpID8gc2VydmljZU1ldGhvZFJlc3VsdCA6IG9mKHNlcnZpY2VNZXRob2RSZXN1bHQpO1xyXG4gICAgICAgICAgICAgIHJlc3VsdCQkLnN1YnNjcmliZSh7XHJcbiAgICAgICAgICAgICAgICBuZXh0OiAocmVzdWx0OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgcmVzdWx0JC5uZXh0KHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IChlcnJvcjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHJlc3VsdCQuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHJlc3VsdCQuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgICAgY29udGV4dC5mcmFtZUNvbnRleHQuaW5qZWN0b3IgPSBvcmlnaW5hbENvbnRleHRJbmplY3RvcjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgLy8gcmV0dXJuIHNlcnZpY2VNZXRob2QuYXBwbHkoc2VydmljZUluc3RhbmNlLCBwYXJzZWRBcmdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdCQ7XHJcbiAgfVxyXG5cclxuICBzY2hlZHVsZSgpIHtcclxuICAgIHRoaXMuc2NoZWR1bGVTdGFnZXModGhpcy5tZXRob2Quc3RhZ2VzLCBudWxsKTtcclxuICAgIC8vIHRoaXMubWV0aG9kLnN0YWdlcy5yZWR1Y2UoKHByZVN0YWdlOiBNZXRob2RTdGFnZSwgY3VycmVudFN0YWdlOiBNZXRob2RTdGFnZSkgPT4ge1xyXG4gICAgLy8gICBpZiAoY3VycmVudFN0YWdlLnR5cGUgPT09ICcwJykge1xyXG4gICAgLy8gICAgIHRoaXMuYWRkVGFzayhjdXJyZW50U3RhZ2UubmFtZSwgKGNvbnRleHQ6IENvbW1hbmRDb250ZXh0KSA9PiB7XHJcbiAgICAvLyAgICAgICByZXR1cm4gdGhpcy5keW5hbWljSW52b2tlMihjdXJyZW50U3RhZ2UgYXMgRXhlY3V0aW5nU3RhZ2UsIGNvbnRleHQpO1xyXG4gICAgLy8gICAgIH0pO1xyXG4gICAgLy8gICAgIGlmIChwcmVTdGFnZSkge1xyXG4gICAgLy8gICAgICAgdGhpcy5hZGRMaW5rKHByZVN0YWdlLm5hbWUsIGN1cnJlbnRTdGFnZS5uYW1lLCBgMT09PTFgKTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgIH0gZWxzZSBpZiAoY3VycmVudFN0YWdlLnR5cGUgPT09ICcyJykge1xyXG5cclxuICAgIC8vICAgfSBlbHNlIHtcclxuICAgIC8vICAgICB0aHJvdyBuZXcgRXJyb3IoYHVua25vdyBtZXRob2Qgc3RhZ2UgdHlwZSwgdGhlICR7Y3VycmVudFN0YWdlLm5hbWV9J3MgdHlwZSBpcyAke2N1cnJlbnRTdGFnZS50eXBlfWApO1xyXG4gICAgLy8gICB9XHJcbiAgICAvLyAgIHJldHVybiBjdXJyZW50U3RhZ2U7XHJcbiAgICAvLyB9LCBudWxsKTtcclxuICB9XHJcblxyXG4gIHNjaGVkdWxlU3RhZ2VzKHN0YWdlczogTWV0aG9kU3RhZ2VbXSwgaW5pdGlhbFN0YWdlOiBNZXRob2RTdGFnZSkge1xyXG4gICAgc3RhZ2VzLnJlZHVjZSgocHJlU3RhZ2U6IE1ldGhvZFN0YWdlLCBjdXJyZW50U3RhZ2U6IE1ldGhvZFN0YWdlKSA9PiB7XHJcbiAgICAgIGlmIChjdXJyZW50U3RhZ2UudHlwZSA9PT0gJ2V4ZWN1dGluZycpIHtcclxuICAgICAgICB0aGlzLmFkZFRhc2soY3VycmVudFN0YWdlLm5hbWUsIChjb250ZXh0OiBDb21tYW5kQ29udGV4dCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZHluYW1pY0ludm9rZTIoY3VycmVudFN0YWdlIGFzIEV4ZWN1dGluZ1N0YWdlLCBjb250ZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIGlmIChjdXJyZW50U3RhZ2UudHlwZSA9PT0gJ2ZvcmsnKSB7XHJcbiAgICAgICAgY29uc3QgZm9ya1N0YWdlcyA9IChjdXJyZW50U3RhZ2UgYXMgRm9ya1N0YWdlKS5zdGFnZXM7XHJcbiAgICAgICAgZm9ya1N0YWdlcy5mb3JFYWNoKGZvcmtTdGFnZSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnNjaGVkdWxlU3RhZ2VzKGZvcmtTdGFnZS5zdGFnZXMsIGZvcmtTdGFnZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zY2hlZHVsZVN0YWdlcygoY3VycmVudFN0YWdlIGFzIERldGVybWluaW5nU3RhZ2UpLnN0YWdlcywgY3VycmVudFN0YWdlKTtcclxuICAgICAgfSBlbHNlIGlmIChjdXJyZW50U3RhZ2UudHlwZSA9PT0gJ2RldGVybWluZycpIHtcclxuICAgICAgICB0aGlzLmFkZFRhc2soY3VycmVudFN0YWdlLm5hbWUsIChjb250ZXh0OiBDb21tYW5kQ29udGV4dCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5rbm93IG1ldGhvZCBzdGFnZSB0eXBlLCB0aGUgJHtjdXJyZW50U3RhZ2UubmFtZX0ncyB0eXBlIGlzICR7Y3VycmVudFN0YWdlLnR5cGV9YCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHByZVN0YWdlKSB7XHJcbiAgICAgICAgY29uc3QgY29uZGl0aW9uID0gcHJlU3RhZ2UudHlwZSA9PT0gJ2RldGVybWluZycgPyAocHJlU3RhZ2UgYXMgRGV0ZXJtaW5pbmdTdGFnZSkuY29uZGl0aW9uIDogYDE9PT0xYDtcclxuICAgICAgICB0aGlzLmFkZExpbmsocHJlU3RhZ2UubmFtZSwgY3VycmVudFN0YWdlLm5hbWUsIGNvbmRpdGlvbik7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGN1cnJlbnRTdGFnZTtcclxuICAgIH0sIGluaXRpYWxTdGFnZSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGxvYWRQcm92aWRlcnNGcm9tTW9kdWxlKHNlcnZpY2VNb2R1bGU6IHsgW3Byb3BlcnR5TmFtZTogc3RyaW5nXTogYW55IH0pIHtcclxuICAgIGNvbnN0IHByb3ZpZGVyQXJyYXkgPSBbXTtcclxuICAgIGZvciAoY29uc3QgcHJvcGVydHlOYW1lIGluIHNlcnZpY2VNb2R1bGUpIHtcclxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzZXJ2aWNlTW9kdWxlLCBwcm9wZXJ0eU5hbWUpKSB7XHJcbiAgICAgICAgY29uc3QgcHJvcGVydHlWYWx1ZSA9IHNlcnZpY2VNb2R1bGVbcHJvcGVydHlOYW1lXTtcclxuICAgICAgICBpZiAodGhpcy5pc0luamVjdGFibGVTZXJ2aWNlKHByb3BlcnR5VmFsdWUpKSB7XHJcbiAgICAgICAgICAvLyBjb25zdCBwcm92aWRlck5hbWUgPSBwcm9wZXJ0eVZhbHVlLm5hbWUgPT09ICdlJyA/IHByb3BlcnR5TmFtZSA6IHByb3BlcnR5VmFsdWUubmFtZTtcclxuICAgICAgICAgIGNvbnN0IHByb3ZpZGVyTmFtZSA9IHByb3BlcnR5TmFtZTtcclxuICAgICAgICAgIHByb3ZpZGVyQXJyYXkucHVzaCh7IHByb3ZpZGU6IHByb3ZpZGVyTmFtZSwgdXNlQ2xhc3M6IHByb3BlcnR5VmFsdWUgfSk7XHJcbiAgICAgICAgICBwcm92aWRlckFycmF5LnB1c2gocHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCByZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcnMgPSBSZWZsZWN0aXZlSW5qZWN0b3IucmVzb2x2ZShwcm92aWRlckFycmF5KTtcclxuICAgIHJldHVybiByZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcnM7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGlzSW5qZWN0YWJsZVNlcnZpY2UocHJvcGVydHlWYWx1ZTogYW55KSB7XHJcbiAgICBsZXQgaGFzSW5qZWN0YWJsZURlY29yYXRvciA9IGZhbHNlO1xyXG4gICAgY29uc3QgaXNGdW5jdGlvbiA9IHByb3BlcnR5VmFsdWUgaW5zdGFuY2VvZiBGdW5jdGlvbjtcclxuICAgIGlmIChpc0Z1bmN0aW9uICYmIHByb3BlcnR5VmFsdWUuaGFzT3duUHJvcGVydHkoJ2RlY29yYXRvcnMnKSkge1xyXG4gICAgICBjb25zdCBkZWNvcmF0b3JzID0gcHJvcGVydHlWYWx1ZS5kZWNvcmF0b3JzIGFzIGFueVtdO1xyXG4gICAgICBjb25zdCBpbmplY3RhYmxlRGVjb3JhdG9ycyA9IGRlY29yYXRvcnMuZmlsdGVyKGRlY29yYXRvciA9PiB7XHJcbiAgICAgICAgaWYgKGRlY29yYXRvci50eXBlICYmIGRlY29yYXRvci50eXBlLnByb3RvdHlwZSAmJiBkZWNvcmF0b3IudHlwZS5wcm90b3R5cGUubmdNZXRhZGF0YU5hbWUgPT09ICdJbmplY3RhYmxlJykge1xyXG4gICAgICAgICAgcmV0dXJuIGRlY29yYXRvcjtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBoYXNJbmplY3RhYmxlRGVjb3JhdG9yID0gaW5qZWN0YWJsZURlY29yYXRvcnMgJiYgaW5qZWN0YWJsZURlY29yYXRvcnMubGVuZ3RoID4gMDtcclxuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbiAmJiBwcm9wZXJ0eVZhbHVlLmhhc093blByb3BlcnR5KCdfX2Fubm90YXRpb25zX18nKSkge1xyXG4gICAgICBjb25zdCBkZWNvcmF0b3JzID0gcHJvcGVydHlWYWx1ZS5fX2Fubm90YXRpb25zX18gYXMgYW55W107XHJcbiAgICAgIGNvbnN0IGluamVjdGFibGVEZWNvcmF0b3JzID0gZGVjb3JhdG9ycy5maWx0ZXIoZGVjb3JhdG9yRmFjdG9yeSA9PiB7XHJcbiAgICAgICAgaWYgKGRlY29yYXRvckZhY3RvcnkgJiYgZGVjb3JhdG9yRmFjdG9yeS5uZ01ldGFkYXRhTmFtZSAmJiBkZWNvcmF0b3JGYWN0b3J5Lm5nTWV0YWRhdGFOYW1lID09PSAnSW5qZWN0YWJsZScpIHtcclxuICAgICAgICAgIHJldHVybiBkZWNvcmF0b3JGYWN0b3J5O1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGhhc0luamVjdGFibGVEZWNvcmF0b3IgPSBpbmplY3RhYmxlRGVjb3JhdG9ycyAmJiBpbmplY3RhYmxlRGVjb3JhdG9ycy5sZW5ndGggPiAwO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGhhc0luamVjdGFibGVEZWNvcmF0b3I7XHJcbiAgfVxyXG59XHJcbiJdfQ==