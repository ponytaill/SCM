{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@farris/ui-multi-select/lib/multi-select.component.ts","ng://@farris/ui-multi-select/lib/multi-select.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","defineProperty","MultiSelectComponent","_ds","val","_this_1","searchValue","toJSON","copyDataSource","map","cloneDeep","setTimeout","initRightData","selectedId","_rightData","cd","detectChanges","_searchValue","undefined","leftCheckitems_1","_leftCheckeds","displayType","tt","selections","forEach","id","data","dataSource","ids","keys","checkedNodes","newDataSource","getTreeDataBySearch","allTreeNodes","loadData","getListDataBySearch","updateTimer1","clearTimeout","canCheckLength","getCanCheckLength","ngOnInit","emptyData","localeService","getValue","moveItem","ngAfterViewInit","elt","el","nativeElement","render","addClass","fit","setStyle","height","noDataMoveMessage","ngAfterContentInit","templates","item","getType","displayTemplate","template","ngOnChanges","changes","isFirstChange","cv","currentValue","pv","previousValue","JSON","stringify","total","isTree","serializedValue","rn","node","selectable","canChecked","d","leftCount","result","Array","txt","textField","getText","valueField","indexOf","getTreeDataByRecursive","newData","children","getTreeRootNode","rootData","parent","rootNodes","nodes","finalRes","uniqueId","some","clearRight","idField","convertTreeDataToPlainData","getTreeSelectionsById","getListSelectionsById","moveAllToLeft","checkLeftData","checkeds","reduce","find","updateAllTreeNodes","updateTimer2","state","rowNodes","_this","reusltObj","isArray","filter","isChecked","direction","keyVal","_rightCheckeds","findIndex","c","onCheckValueChange","leftDataChecked","hasCheckeds","dir","rightDataChecked","emit","rightSelectedItem","isCheck","showCheckbox","selected","selectItem","clearSelections","beforeMove","subscribe","obj","items","target","toString","clearAll","v","findRowNodes","unCheckedNodes","selectionsChange","changeSelectIds","afterMove","values","moveToRight","moveData","_a","mesagerSer","warning","moveAllToRight","_dataSource","visible","moveToLeft","_getSelectInfo","key_1","index","key","moveTop","unshift","splice","moveUp","tempArr","moveDown","len","moveBottom","number","selectedIdChange","join","rightActiveDom","querySelector","scrollIntoViewIfNeeded","scrollIntoView","dataChange","commonUtils","Component","args","selector","MessagerService","Injector","ChangeDetectorRef","Input","Output","ContentChildren","FarrisTemplateDirective","ViewChild","injector","enableTargetSort","showCascadeControl","leftTitle","rightTitle","enableSearch","EventEmitter","sortMove","enableCascase","trackByItems","get","ElementRef","Renderer2","LocaleService","CommonUtils","DisplayTextComponent","_getText","ms","side","MultiSelectModule","NgModule","imports","CommonModule","PerfectScrollbarModule","FarrisCommonModule","TreeTableModule","LocaleModule","FormsModule","MessagerModule","forRoot","declarations","exports","providers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { cloneDeep } from 'lodash-es';\r\n/*\r\n* @Author: ç¯çç§æ(lucas huang)\r\n* @Date: 2018-10-27 10:55:02\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-10-16 14:14:14\r\n* @Company: Inspur\r\n* @Version: v0.0.1\r\n*/\r\n\r\nimport {\r\n    Component, OnInit, Input, ViewChild, Output, EventEmitter,\r\n    TemplateRef, ContentChildren, QueryList, AfterContentInit, AfterViewInit,\r\n    OnChanges, SimpleChanges, Injector, ChangeDetectorRef, ElementRef, Renderer2\r\n} from '@angular/core';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { TreeTableComponent, TreeNode } from '@farris/ui-treetable';\r\nimport { CommonUtils, FarrisTemplateDirective } from '@farris/ui-common';\r\nimport { LocaleService } from '@farris/ui-locale';\r\n\r\n@Component({\r\n    selector: 'multi-select',\r\n    templateUrl: './multi-select.component.html',\r\n    styleUrls: [\r\n        './multi-select.css'\r\n    ]\r\n})\r\n\r\nexport class MultiSelectComponent implements OnInit, OnChanges, AfterViewInit, AfterContentInit {\r\n\r\n    private allTreeNodes = [];\r\n    private _ds: any = [];\r\n    get dataSource() {\r\n        return this._ds;\r\n    }\r\n    @Input() set dataSource(val: any) {\r\n        val = val  || [];\r\n        this._ds = val;\r\n        if (!this.searchValue) {\r\n            if (val.length) {\r\n                if (val[0].toJSON) {\r\n                    this.copyDataSource = val.map(n => n.toJSON());\r\n                } else {\r\n                    this.copyDataSource = cloneDeep(val);\r\n                }\r\n            }\r\n\r\n            setTimeout(() => {\r\n                this.initRightData(this.selectedId, false);\r\n            });\r\n        }\r\n    }\r\n\r\n    @Input() displayType: 'List' | 'Tree' = 'List';\r\n    /** æ¾ç¤ºå³ä¾§ä¸ç§»ä¸ç§»æé® */\r\n    @Input() enableTargetSort = true;\r\n\r\n    @Input() idField: string;\r\n\r\n    @Input() textField: string;\r\n    @Input() valueField: string;\r\n\r\n    @Input() height = 445;\r\n    @Input() fit = true;\r\n    @Input() noDataMoveMessage = 'è¯·éæ©è¦ç§»å¨çæ°æ®ã';\r\n    /** æ ç»ææ¶ï¼æ¯å¦æ¾ç¤ºçº§èéæ©æ§å¶éé¡¹ */\r\n    @Input() showCascadeControl = false;\r\n\r\n    @Input() leftTitle = 'æªéæ©';\r\n    @Input() rightTitle = 'å·²éæ©';\r\n    @Input() selectedId: any;\r\n    @Input() enableSearch = true;\r\n    /** ç®æ æ°æ®æºæ¾ç¤ºcheckbox åè®¸å¤é */\r\n    @Input() showCheckbox = false;\r\n   \r\n\r\n    @Output() dataChange = new EventEmitter();\r\n    @Output() selected = new EventEmitter();\r\n    @Output() selectedIdChange = new EventEmitter();\r\n\r\n    @Output() beforeMove = new EventEmitter();\r\n    @Output() afterMove = new EventEmitter();\r\n\r\n    @Output() sortMove = new EventEmitter();\r\n\r\n    @ContentChildren(FarrisTemplateDirective) templates: QueryList<FarrisTemplateDirective>;\r\n    @ViewChild('tt') tt: TreeTableComponent;\r\n\r\n\r\n    // å³ä¾§éä¸­çæ°æ® { [keyVal]: obj, [keyVal]: obj ... }\r\n    _rightCheckeds: any;\r\n    // å·¦ä¾§éä¸­çæ°æ® { [keyVal]: obj, [keyVal]: obj ... }\r\n    _leftCheckeds: any = {};\r\n\r\n    // å³ä¾§æ°æ®\r\n    _rightData = [];\r\n    get selections() {\r\n        return this._rightData;\r\n    }\r\n    set selections(val: any) {\r\n        this._rightData = val;\r\n        this.cd.detectChanges();\r\n    }\r\n    get searchValue() {\r\n        return this._searchValue;\r\n    }\r\n    set searchValue(value: string) {\r\n        this._searchValue = value;\r\n\r\n        // this.copyDataSource = [...this.dataSource];\r\n\r\n        if (value === undefined || value === null || value === '') {\r\n            let leftCheckitems = {...this._leftCheckeds};\r\n\r\n            if (this.displayType === 'Tree') {\r\n                this.tt.selections.forEach(n => {\r\n                    leftCheckitems[n.id] = n.data;\r\n                });\r\n            }\r\n            this.dataSource = this.copyDataSource;\r\n\r\n\r\n            if (this.displayType === 'Tree') {\r\n                setTimeout(() => {\r\n                    const ids = Object.keys(leftCheckitems);\r\n                    if (ids && ids.length) {\r\n                        this.tt.checkedNodes(ids);\r\n                    }\r\n                });\r\n            } else  {\r\n                this._leftCheckeds = {...leftCheckitems};\r\n            }\r\n            \r\n            return;\r\n        }\r\n        if (this.displayType === 'Tree') {\r\n            const newDataSource = this.getTreeDataBySearch(this._searchValue, this.allTreeNodes);\r\n            this.tt.loadData(newDataSource);\r\n        } else {\r\n            this.dataSource = this.getListDataBySearch(this._searchValue, this.copyDataSource);\r\n        }\r\n\r\n        if (this.updateTimer1) {\r\n            clearTimeout(this.updateTimer1);\r\n        }\r\n        this.updateTimer1 = setTimeout(() => {\r\n            this.canCheckLength = this.getCanCheckLength();\r\n        });\r\n    }\r\n\r\n    canCheckLength = 0;\r\n    leftCount = 0;\r\n    _searchValue = '';\r\n    // å¤å¶ä¸ä»½æ°æ®æº\r\n    private copyDataSource: any;\r\n    // æ å½¢ç»æçæ°æ®length\r\n    treeDataLength: number;\r\n    displayTemplate: TemplateRef<any>;\r\n\r\n\r\n    emptyData;\r\n    el: ElementRef;\r\n    render: Renderer2;\r\n    localeService: LocaleService;\r\n    commonUtils: CommonUtils;\r\n    // çº§èéæ©æ§å¶éé¡¹\r\n    enableCascase = true;\r\n\r\n    private updateTimer1 = null;\r\n    private updateTimer2 = null;\r\n\r\n    rightSelectedItem = null;\r\n\r\n    constructor(private mesagerSer: MessagerService, private injector: Injector, private cd: ChangeDetectorRef) {\r\n        if (!Object.values) {\r\n            Object.values = function (obj) {\r\n                return Object.keys(obj).map(function (e) {\r\n                    return obj[e];\r\n                });\r\n            };\r\n        }\r\n        this.el = this.injector.get<ElementRef>(ElementRef);\r\n        this.render = this.injector.get(Renderer2);\r\n        this.localeService = this.injector.get(LocaleService);\r\n\r\n        this.commonUtils = this.injector.get(CommonUtils, null);\r\n    }\r\n\r\n    ngOnInit() {\r\n        // this.copyDataSource = this.dataSource ? [...this.dataSource] : [];\r\n        this.emptyData = this.localeService.getValue('multiSelect.emptyData') || 'ææ æ°æ®';\r\n        this.initRightData(this.selectedId);\r\n        this.moveItem();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        const elt = this.el.nativeElement;\r\n        this.render.addClass(elt, 'row');\r\n        this.render.addClass(elt, 'f-multi-select');\r\n        if (this.fit === true) {\r\n            this.render.addClass(elt, 'f-utils-fill');\r\n            this.render.setStyle(elt, 'height', '100%');\r\n        } else {\r\n            if (!!this.height) {\r\n                this.render.setStyle(elt, 'height', this.height + 'px');\r\n            }\r\n        }\r\n\r\n        this.noDataMoveMessage =\r\n            this.noDataMoveMessage === 'è¯·éæ©è¦ç§»å¨çæ°æ®ã' ? this.localeService.getValue('multiSelect.noDataMoveMessage') : this.noDataMoveMessage;\r\n\r\n        if (this.tt && this.selectedId) {\r\n            this.tt.checkedNodes(this.selectedId);\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch (item.getType()) {\r\n                case 'text':\r\n                    this.displayTemplate = item.template;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.dataSource && !changes.dataSource.isFirstChange()) {\r\n            this._leftCheckeds = {};\r\n            this._rightData = [];\r\n        }\r\n\r\n        if (changes.selectedId && !changes.selectedId.isFirstChange()) {\r\n            const cv = changes.selectedId.currentValue || [];\r\n            const pv = changes.selectedId.previousValue || [];\r\n            if (cv.length != pv.length || JSON.stringify(cv) !== JSON.stringify(pv)) {\r\n                this.initRightData(changes.selectedId.currentValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    getCanCheckLength() {\r\n        let n = 0;\r\n        let total = 0;\r\n        if (this.isTree()) {\r\n            this.tt.serializedValue.forEach(rn => {\r\n                if (rn.node.selectable) {\r\n                    if (this.canChecked(rn.node)) {\r\n                        n++;\r\n                    }\r\n                }\r\n            });\r\n            total = this.tt.serializedValue.length;\r\n        } else {\r\n            this.dataSource.forEach(d => {\r\n                if (this.canChecked(d)) {\r\n                    n++;\r\n                }\r\n            });\r\n            total = this.dataSource.length;\r\n        }\r\n        this.leftCount = total;\r\n        return n;\r\n    }\r\n\r\n    /**\r\n     * è·åæç´¢çæ°æ®ï¼Listç»æ\r\n     * @param value æç´¢çå­ç¬¦\r\n     * @param data æ°æ®\r\n     */\r\n    private getListDataBySearch(value: string, data: any[]): any[] {\r\n        const result = [];\r\n        value = '' + value;\r\n        if (data instanceof Array) {\r\n            data.forEach(item => {\r\n\r\n                let txt = '';\r\n                let val = '';\r\n\r\n                if (this.textField) {\r\n                    txt = '' + this.getText(item);\r\n                }\r\n\r\n                if (this.valueField) {\r\n                    val = '' + this.getValue(item);\r\n                }\r\n\r\n                if (this.textField && this.valueField) {\r\n                    if (txt.indexOf(value) !== -1 || val.indexOf(value) !== -1) {\r\n                        result.push(item);\r\n                    }\r\n                } else if (this.textField && !this.valueField) {\r\n                    if (txt.indexOf(value) !== -1) {\r\n                        result.push(item);\r\n                    }\r\n                } else if (!this.textField && this.valueField) {\r\n                    if (val.indexOf(value) !== -1) {\r\n                        result.push(item);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * è·ååå«valueå¼å¾èç¹\r\n     */\r\n    private getTreeDataByRecursive(value: string, data: any[], newData: any[]) {\r\n        value = '' + value;\r\n        data.forEach(item => {\r\n\r\n            let txt = '';\r\n            let val = '';\r\n\r\n            if (this.textField) {\r\n                txt = '' + this.getText(item.data);\r\n            }\r\n\r\n            if (this.valueField) {\r\n                val = '' + this.getValue(item.data);\r\n            }\r\n\r\n            if (this.textField && this.valueField) {\r\n                if (txt.indexOf(value) !== -1 || val.indexOf(value) !== -1) {\r\n                    newData.push(item);\r\n                }\r\n            } else if (this.textField && !this.valueField) {\r\n                if (txt.indexOf(value) !== -1) {\r\n                    newData.push(item);\r\n                }\r\n            } else if (!this.textField && this.valueField) {\r\n                if (val.indexOf(value) !== -1) {\r\n                    newData.push(item);\r\n                }\r\n            }\r\n            if (item.children && item.children.length) {\r\n                this.getTreeDataByRecursive(value, item.children, newData);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * è·åæ ¹èç¹\r\n     */\r\n    private getTreeRootNode(data: any[], rootData: any[]) {\r\n        data.forEach(item => {\r\n            if (item.parent === null) {\r\n                rootData.push(item);\r\n            } else {\r\n                this.getTreeRootNode(new Array(item.parent), rootData);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * è·åæç´¢çæ°æ®ï¼Treeç»æ\r\n     * @param value æç´¢çå­ç¬¦\r\n     * @param data æ°æ®\r\n     */\r\n    private getTreeDataBySearch(value: string, data: any[]): any[] {\r\n        const rootNodes = [];\r\n        const nodes = [];\r\n        const finalRes = [];\r\n        const uniqueId = [];\r\n        // è·ååå«valueå¼å¾èç¹\r\n        this.getTreeDataByRecursive(value, data, nodes);\r\n        // è·åæ ¹èç¹\r\n        this.getTreeRootNode(nodes, rootNodes);\r\n        // å»é\r\n        rootNodes.forEach(node => {\r\n            if (!uniqueId.some(item => item == node.id)) {\r\n                finalRes.push(node);\r\n                uniqueId.push(node.id);\r\n            }\r\n        });\r\n        return finalRes;\r\n    }\r\n\r\n    private initRightData(ids, clearRight = true) {\r\n        let dataSource: any = [];\r\n\r\n        if (!ids || !ids.length ) {\r\n            ids = this.selections.map(i => {\r\n                return i[this.idField];\r\n            });\r\n        }\r\n    \r\n\r\n        if (ids && ids.length) {\r\n            if (this.isTree()) {\r\n                this.convertTreeDataToPlainData(this.copyDataSource, dataSource);\r\n                this._rightData = this.getTreeSelectionsById(ids, dataSource);\r\n            } else {\r\n                this._rightData = this.getListSelectionsById(ids, this.copyDataSource);\r\n            }\r\n          \r\n        } else {\r\n            if (clearRight) {\r\n                this.moveAllToLeft();\r\n            }\r\n        }\r\n\r\n        this.checkLeftData(ids);\r\n    }\r\n\r\n    checkLeftData(ids: any) {\r\n        if (ids && ids.length) {\r\n            const checkeds = {...this._leftCheckeds};\r\n            this._leftCheckeds = ids.reduce((r, id) => {\r\n                r[id] = this._rightData.find(n => n[this.idField] == id);\r\n                return r;\r\n            }, {});\r\n\r\n            this._leftCheckeds = Object.assign({}, checkeds, this._leftCheckeds);\r\n        }\r\n\r\n        this.updateAllTreeNodes(ids);\r\n    }\r\n\r\n    private updateAllTreeNodes(ids) {\r\n        if (this.updateTimer2) {\r\n            clearTimeout(this.updateTimer2);\r\n        }\r\n\r\n        this.updateTimer2 = setTimeout(() => {\r\n            this.canCheckLength = this.getCanCheckLength();\r\n            if (this.tt) {\r\n                if (ids && ids.length) {\r\n                    this.tt.checkedNodes(ids, true, false, true);\r\n                }\r\n                this.allTreeNodes = cloneDeep(this.tt.state.rowNodes.map(n => n.node));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param ids éä¸­æ°æ®çid\r\n     * @param dataSource åå§æ°æ®\r\n     */\r\n    private getListSelectionsById(ids: any, dataSource: any) {\r\n        let result = [];\r\n        const _this = this;\r\n        if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {\r\n            const reusltObj = dataSource.find(item => {\r\n                return item[_this.idField] === ids;\r\n            });\r\n            if (reusltObj) {\r\n                result.push(reusltObj);\r\n            }\r\n        } else if (Array.isArray(ids)) {\r\n            if (Array.isArray(dataSource)) {\r\n                result = ids.map(id => dataSource.find(item => item[this.idField] === id)).filter(n => n);\r\n            } else {\r\n                result = [];\r\n            }\r\n        } else {\r\n            result = [];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param ids éä¸­æ°æ®çid\r\n     * @param dataSource åå§æ°æ®\r\n     */\r\n    private getTreeSelectionsById(ids: any, dataSource: any) {\r\n        let result = [];\r\n        const _this = this;\r\n        if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {\r\n            const reusltObj = dataSource.find(item => {\r\n                return item.data[_this.idField] === ids;\r\n            });\r\n            if (reusltObj && reusltObj.data) {\r\n                result.push(reusltObj.data);\r\n            }\r\n        } else if (Array.isArray(ids)) {\r\n            if (Array.isArray(dataSource)) {\r\n                result = ids.map(id => {\r\n                    return dataSource.find(item => item.data[this.idField] === id);\r\n                }).filter(n => n).map(n => n.data);\r\n            } else {\r\n                result = [];\r\n            }\r\n        } else {\r\n            result = [];\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * å¤æ­æ¯å¦éä¸­\r\n     * @param data è¦éªè¯çæ°æ®\r\n     * @param direction éªè¯çæ°æ®æå¨çä½ç½® L: å·¦ä¾§ï¼R: å³ä¾§\r\n     */\r\n    isChecked(data: any, direction: 'L' | 'R'): boolean {\r\n        const keyVal = data[this.idField];\r\n        if (direction === 'L') {\r\n            return (this._leftCheckeds && this._leftCheckeds[keyVal] !== undefined); // || !this.canChecked(data);\r\n        } else {\r\n            if (this._rightCheckeds) {\r\n                return this._rightCheckeds[keyVal] !== undefined;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    canChecked(item: any) {\r\n        let data = item;\r\n\r\n        if (this.isTree()) {\r\n            data = item.data;\r\n\r\n            if (item.selectable !== undefined && !item.selectable) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (!this.selections || this.selections.length === 0) {\r\n            return true;\r\n        }\r\n        return this.selections.findIndex(c => c[this.idField] === data[this.idField]) === -1;\r\n    }\r\n\r\n    onCheckValueChange(ids: string[]) {\r\n        \r\n    }\r\n\r\n    isTree(): any {\r\n        return this.displayType === 'Tree';\r\n    }\r\n\r\n    leftDataChecked(data: any[]) {\r\n        if (data && data.length) {\r\n            data.forEach(node => {\r\n                let d = node;\r\n                if (this.isTree()) {\r\n                    d = node.data;\r\n                }\r\n                if (this.canChecked(node)) {\r\n                    if (this.isChecked(d, 'L')) {\r\n                        delete this._leftCheckeds[d[this.idField]];\r\n                    } else {\r\n                        if (!this._leftCheckeds) {\r\n                            this._leftCheckeds = {};\r\n                        }\r\n                        this._leftCheckeds[d[this.idField]] = d;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    hasCheckeds(dir: 'L' | 'R') {\r\n        if (dir === 'L') {\r\n            if (this.isTree()) {\r\n                return this.tt.checkeds && this.tt.checkeds.length || ( this.tt.selections && this.tt.selections.length);\r\n            }\r\n\r\n            if (this._leftCheckeds) {\r\n                return Object.keys(this._leftCheckeds).length > 0;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            if (this._rightCheckeds) {\r\n                return Object.keys(this._rightCheckeds).length > 0;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    rightDataChecked(item, emit = true) {\r\n        this.rightSelectedItem = item;\r\n        const isCheck = this.isChecked(item, 'R');\r\n        if (isCheck) {\r\n            if (this.showCheckbox) {\r\n                delete this._rightCheckeds[item[this.idField]];\r\n            } else {\r\n                this._rightCheckeds = {};\r\n            }\r\n            return;\r\n        } else {\r\n            if (this.showCheckbox) {\r\n                this._rightCheckeds = this._rightCheckeds || {};\r\n            } else {\r\n                this._rightCheckeds = {};\r\n            }\r\n            this._rightCheckeds[item[this.idField]] = item;\r\n        }\r\n        this.cd.detectChanges();\r\n        this.selected.emit({ selected: !isCheck, data: item });\r\n    }\r\n\r\n    selectItem(id, emit = true) {\r\n        if (this.selections && this.selections.length) {\r\n            const item = this.selections.find(n => n[this.idField] === id);\r\n            if (item) {\r\n                this.rightDataChecked(item, emit);\r\n            }\r\n        }\r\n    }\r\n\r\n    private clearSelections() {\r\n\r\n    }\r\n\r\n    /**\r\n     * å°æ ç»ææ°æ®è½¬æ¢ä¸ºæå¹³æ°ç»\r\n     * @param nodes æ èç¹æ°ç»\r\n     * @param r æ°çç©ºæ°ç»\r\n     */\r\n    private convertTreeDataToPlainData(nodes: TreeNode[], r: any[] = []) {\r\n        if (nodes) {\r\n            nodes.forEach(n => {\r\n                r.push(n);\r\n                if (n.children) {\r\n                    this.convertTreeDataToPlainData(n.children, r);\r\n                }\r\n            });\r\n        }\r\n\r\n        return r;\r\n    }\r\n\r\n    //#region å·¦å³ç§»å¨\r\n\r\n    private moveItem() {\r\n        this.beforeMove.subscribe((obj: any) => {\r\n            const items = obj.items;\r\n            const ids = Object.keys(items);\r\n            let direction = 1;\r\n            switch (obj.target) {\r\n                case 'right':\r\n                    Object.keys(items).forEach(id => {\r\n                        if (!this._rightData.find(n => n[this.idField].toString() === id)) {\r\n                            this._rightData.push(items[id]);\r\n                        }\r\n                    });\r\n                    this._rightData = [...this._rightData];\r\n                    if (this.isTree()) {\r\n                        this.tt.clearAll();\r\n                    }\r\n                    direction = 1;\r\n                    break;\r\n                case 'rightAll':\r\n                    items.forEach(data => {\r\n                        if (this._rightData.findIndex(n => n[this.idField] === data[this.idField]) === -1) {\r\n                            this._rightData.push(data);\r\n                        }\r\n                    });\r\n                    if (this.isTree()) {\r\n                        this.tt.clearAll();\r\n                    }\r\n\r\n                    direction = 1;\r\n                    break;\r\n                case 'left':\r\n                    this._rightData = this._rightData.filter(v => {\r\n                        return ids.indexOf('' + v[this.idField]) === -1;\r\n                    });\r\n                    this._rightCheckeds = {};\r\n                    ids.forEach(id => {\r\n                        delete this._leftCheckeds[id];\r\n                    });\r\n                    direction = -1;\r\n\r\n                    if (this.isTree()) {\r\n                        this.tt.findRowNodes(ids).forEach(n => {\r\n                            n.node.selectable = true;\r\n                        });\r\n                        this.tt.unCheckedNodes(ids, true);\r\n                    }\r\n\r\n                    break;\r\n                case 'leftAll':\r\n                    this._rightCheckeds = {};\r\n                    this._rightData = [];\r\n                    direction = -1;\r\n                    this._leftCheckeds = {};\r\n                    if (this.isTree() && this.tt) {\r\n                        this.tt.clearAll();\r\n                        this.tt.findRowNodes(ids).forEach(n => {\r\n                            n.node.selectable = true;\r\n                        });\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            this.selectionsChange();\r\n            this.changeSelectIds(direction);\r\n\r\n            this.afterMove.emit(Object.values(items));\r\n        });\r\n    }\r\n\r\n\r\n    /** å³ç§» */\r\n    moveToRight(moveData?: any) {\r\n\r\n        if (moveData) {\r\n            this.beforeMove.emit({ items: { [moveData[this.idField]]: moveData }, target: 'right' });\r\n        } else {\r\n            if (this.hasCheckeds('L')) {\r\n                if (this.isTree()) {\r\n                    this._leftCheckeds = {};\r\n\r\n                    if (!this.tt.checkeds.filter(n => this._rightData.findIndex(r => r.id === n.id) === -1 ).length) {\r\n                        this.mesagerSer.warning(this.noDataMoveMessage);\r\n                        return;        \r\n                    }\r\n\r\n                    this.tt.checkeds.forEach(n => {\r\n                        this._leftCheckeds[n.data[this.idField]] = n.data;\r\n                    });\r\n\r\n                    this.tt.selections.forEach(n => {\r\n                        this._leftCheckeds[n.id] = n.data;\r\n                    });\r\n\r\n                } else {\r\n                    const newCheckeds = Object.keys(this._leftCheckeds).filter(id => {\r\n                        return this._rightData.findIndex(n => n.id === id) === -1\r\n                    });\r\n                    if (!newCheckeds.length) {\r\n                        this.mesagerSer.warning(this.noDataMoveMessage);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                this.beforeMove.emit({ items: this._leftCheckeds, target: 'right' });\r\n            } else {\r\n                this.mesagerSer.warning(this.noDataMoveMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** å¨é¨å³ç§» */\r\n    moveAllToRight() {\r\n        if (this.searchValue === '') {\r\n            this._rightData = [];\r\n        }\r\n        if (this.displayType === 'List') {\r\n            const items = this.dataSource;\r\n            // if (this.searchValue && this._leftCheckeds) {\r\n            //     const checkids = Object.keys(this._leftCheckeds);\r\n            //     if (checkids.length) {\r\n            //         checkids.forEach(id => {\r\n            //             if (!items.find(n => n[this.idField] === id)) {\r\n            //                 items.push(this._leftCheckeds[id]);\r\n            //             }\r\n            //         });\r\n            //     }\r\n            // }\r\n            this.beforeMove.emit({ items , target: 'rightAll' });\r\n        } else {\r\n            if (!this.searchValue) {\r\n                let _dataSource = [];\r\n                this.convertTreeDataToPlainData(this.dataSource, _dataSource);\r\n                _dataSource = _dataSource.filter(n => n.selectable && (n.visible || n.visible === undefined)).map(n => n.data);\r\n\r\n                this.beforeMove.emit({ items: _dataSource, target: 'rightAll' });\r\n            } else {\r\n                const _dataSource = this.tt.serializedValue.map(n => n.node.data);\r\n                this.beforeMove.emit({ items: _dataSource, target: 'rightAll' });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /** å·¦ç§» */\r\n    moveToLeft(moveData?: any) {\r\n\r\n        if (moveData) {\r\n            this.beforeMove.emit({ items: { [moveData[this.idField]]: moveData }, target: 'left' });\r\n        } else {\r\n            if (this.hasCheckeds('R')) {\r\n                this.beforeMove.emit({ items: this._rightCheckeds, target: 'left' });\r\n            } else {\r\n                this.mesagerSer.warning(this.noDataMoveMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** å¨é¨å·¦ç§» */\r\n    moveAllToLeft() {\r\n        this.beforeMove.emit({ items: this._rightData, target: 'leftAll' });\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region ä¸ä¸ç§»å¨æ¾ç¤ºåé¡ºåº\r\n\r\n    _getSelectInfo() {\r\n        if (this.rightSelectedItem) {\r\n            // const key = Object.keys(this._rightCheckeds)[0];\r\n            const key = this.rightSelectedItem[this.idField];\r\n            const index = this._rightData.findIndex(c => '' + c[this.idField] ==  key);\r\n            return {\r\n                key, index\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n    /** ç½®é¡¶ */\r\n    moveTop() {\r\n        const obj = this._getSelectInfo();\r\n        if (obj) {\r\n            this._rightData.unshift(this._rightData[obj.index]);\r\n            this._rightData.splice(obj.index + 1, 1);\r\n            this.selectionsChange();\r\n            this.changeSelectIds(0);\r\n        } else {\r\n            this.mesagerSer.warning(this.noDataMoveMessage);\r\n        }\r\n    }\r\n\r\n    /** ä¸ç§» */\r\n    moveUp() {\r\n        const obj = this._getSelectInfo();\r\n        if (obj) {\r\n            const index = obj.index;\r\n            if (index !== 0) {\r\n                const tempArr = this._rightData.splice(index, 1);\r\n                this._rightData.splice(index - 1, 0, ...tempArr);\r\n            }\r\n            this.selectionsChange();\r\n            this.changeSelectIds(0);\r\n        } else {\r\n        this.mesagerSer.warning(this.noDataMoveMessage);\r\n        }\r\n    }\r\n\r\n    /** ä¸ç§» */\r\n    moveDown() {\r\n        const obj = this._getSelectInfo();\r\n        if (obj) {\r\n            const len = this._rightData.length;\r\n            const index = obj.index;\r\n            if (index === 0 || index !== len - 1) {\r\n                const tempArr = this._rightData.splice(index, 1);\r\n                this._rightData.splice(index + 1, 0, ...tempArr);\r\n            }\r\n            this.selectionsChange();\r\n            this.changeSelectIds(0);\r\n        } else {\r\n            this.mesagerSer.warning(this.noDataMoveMessage);\r\n        }\r\n    }\r\n\r\n    /** ç½®åº */\r\n    moveBottom() {\r\n        const obj = this._getSelectInfo();\r\n        if (obj) {\r\n            this._rightData.push(this._rightData[obj.index]);\r\n            this._rightData.splice(obj.index, 1);\r\n            this.selectionsChange();\r\n            this.changeSelectIds(0);\r\n        } else {\r\n            this.mesagerSer.warning(this.noDataMoveMessage);\r\n        }\r\n    }\r\n    /**\r\n     * è§¦åéæ©ä¸­id\r\n     * @param number 1ä»£è¡¨å·¦ä¾§æ°æ®å³ç§»ï¼-1,ä»£è¡¨æ°æ®å·¦ç§»ï¼0ä»£è¡¨ä¸ç§»ä¸ç§»\r\n     */\r\n    private changeSelectIds(number: number) {\r\n        const ids = this._rightData.map(item => {\r\n            return item[this.idField];\r\n        });\r\n\r\n        if (number === 0) {\r\n            if (typeof this.selectedId === 'string') {\r\n                this.selectedId = ids.join(',');\r\n            } else if (Array.isArray(this.selectedId)) {\r\n                this.selectedId = ids;\r\n            }\r\n            this.selectedIdChange.emit(this.selectedId);\r\n\r\n            const rightActiveDom = this.el.nativeElement.querySelector('.f-multi-select-list-group--right li.active');\r\n            if (rightActiveDom) {\r\n                if (rightActiveDom.scrollIntoViewIfNeeded) {\r\n                    rightActiveDom.scrollIntoViewIfNeeded();\r\n                } else {\r\n                    rightActiveDom.scrollIntoView();\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (!this.selectedId) {\r\n            this.selectedId = [];\r\n        }\r\n\r\n        if (number === 1 || number === -1) {\r\n            if (!ids.length) {\r\n                this.selectedId = [];\r\n            } else {\r\n                this.selectedId = ids;\r\n            }\r\n\r\n            if (this.isTree()) {\r\n                if (ids && ids.length) {\r\n                    this.tt.checkedNodes(ids, true, false, true);\r\n                }\r\n            }\r\n        }\r\n        this.canCheckLength = this.getCanCheckLength();\r\n        this.selectedIdChange.emit(this.selectedId);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    private selectionsChange() {\r\n        this.dataChange.emit(this._rightData);\r\n        this.cd.detectChanges();\r\n    }\r\n\r\n    getText(item, textField = this.textField) {\r\n        if (item) {\r\n            if (this.commonUtils && this.commonUtils.getValue && textField) {\r\n                return this.commonUtils.getValue(textField, item);\r\n            } else {\r\n                return item[textField];\r\n            }\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    getValue(item, valueField = this.valueField) {\r\n        if (item) {\r\n            if (this.commonUtils && this.commonUtils.getValue && valueField) {\r\n                return this.commonUtils.getValue(valueField, item);\r\n            } else {\r\n                return item[valueField];\r\n            }\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    trackByItems = (index, item) => {\r\n        return index;\r\n    }\r\n\r\n}\r\n\r\n\r\n@Component({\r\n    selector: 'display-text',\r\n    template: `\r\n        <ng-container *ngIf=\"template\" >\r\n            <ng-container\r\n                *ngTemplateOutlet=\"template; context: {$implicit: data,instance: ms, side: side, selected: ms.isChecked(data, 'R') }\">\r\n            </ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!template\">\r\n            {{ _getText(data) }}\r\n        </ng-container>\r\n    `\r\n})\r\nexport class DisplayTextComponent implements OnInit {\r\n    @Input() template: TemplateRef<any>;\r\n    @Input() data: any;\r\n    @Input() side = 'L';\r\n\r\n    constructor(public ms: MultiSelectComponent) { }\r\n\r\n    ngOnInit() {\r\n        // console.log(this.data);\r\n    }\r\n\r\n    _getText(item) {\r\n        return this.ms.getText(item);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';\r\nimport { TreeTableModule } from '@farris/ui-treetable';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MultiSelectComponent, DisplayTextComponent } from './multi-select.component';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        PerfectScrollbarModule,\r\n        FarrisCommonModule,\r\n        TreeTableModule,\r\n        LocaleModule,\r\n        FormsModule,\r\n        MessagerModule.forRoot()\r\n    ],\r\n    declarations: [MultiSelectComponent, DisplayTextComponent],\r\n    exports: [\r\n        MultiSelectComponent,\r\n        DisplayTextComponent,\r\n        FarrisCommonModule\r\n    ],\r\n    providers: [],\r\n})\r\nexport class MultiSelectModule { }\r\n"]}