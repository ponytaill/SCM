/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InputGroupComponent } from '@farris/ui-input-group';
import { ChangeDetectorRef } from '@angular/core';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-07-10 11:44:49
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-05 11:44:18
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, ViewChild, ElementRef, Input, ContentChild, TemplateRef, QueryList, ContentChildren, Output, EventEmitter, ViewEncapsulation, NgZone } from '@angular/core';
import { of } from 'rxjs';
import { PerfectScrollbarComponent } from '@farris/ui-perfect-scrollbar';
import { PaginationControlsComponent } from '@farris/ui-pagination';
import { IdService } from '@farris/ui-common';
import { deepCopy } from './datatable-column';
import { ColumnDirective } from './datatable-column.component';
import { DataTableService } from './datatable.service';
import { DataTableHeaderComponent } from './table/datatable-header.component';
export class DataTableComponent {
    /**
     * @param {?} dataService
     * @param {?} idService
     * @param {?} el
     * @param {?} cd
     * @param {?} ngZone
     */
    constructor(dataService, idService, el, cd, ngZone) {
        this.dataService = dataService;
        this.idService = idService;
        this.el = el;
        this.cd = cd;
        this.ngZone = ngZone;
        this.searchButtonText = '<i class="f-icon f-icon-search"></i>';
        this.keydownEnterEdit = false;
        this.allColumnsTitle = '所有列';
        // 数据表高度
        // 是否填充
        this.fill = false;
        // 默认分页
        this.pagination = true;
        this.pagerOnServer = true;
        this.pageSize = 10;
        this.pageIndex = 1;
        this.showPageInfo = true;
        this.showPageNumber = true;
        this.showPageList = true;
        this.pagerViewMode = 'default';
        /**
         * 显示表头
         */
        this.showHeader = true;
        this._pageList = [10, 20, 30, 50, 100];
        this.total = 0;
        // 可筛选
        this.showFilterBar = false;
        // table  数据
        this._data = [];
        this.remote = 'client';
        /**
         * 启用远端排序
         */
        this.remoteSort = true;
        /**
         * 允许多列排序
         */
        this.multiSort = false;
        // 多选  单选
        this.singleSelect = true;
        this.idField = 'id';
        // 显示鼠标悬停高亮
        this.hover = true;
        // 分页事件
        this.pageChanged = new EventEmitter();
        this.pageSizeChanged = new EventEmitter();
        this.search = new EventEmitter();
        this.columnSorted = new EventEmitter();
        this.rowDblClick = new EventEmitter();
        this.selectedRow = new EventEmitter();
        // 兼容
        this.selectRows = new EventEmitter();
        this.unSelectRow = new EventEmitter();
        this.cellClick = new EventEmitter();
        this.clearSearchValue = new EventEmitter();
        this.checkAll = new EventEmitter();
        this.searchValueChange = new EventEmitter();
        this.sortChange = new EventEmitter();
        // 是否可拖拽  默认可以
        this.resizableColumns = true;
        /**
         * 针对同一条记录，单选时，多次单击后不取消选中。
         */
        this.keepSelect = true;
        // 是否有行模板
        this.hasRowTepml = false;
        // 设置拖拽停止器
        this.moveable = false;
        this.searchData = { field: '*', value: '' };
        // 事件订阅存储  便于销毁
        this.subscription = [];
        // 原数据
        this.filter = '';
        this.maxSize = 7;
        this.directionLinks = true;
        this.autoHide = false;
        this.responsive = true;
        this.paginationOptions = {
            id: 'Farris-DataTable-Pagination',
            itemsPerPage: this.pageSize,
            currentPage: this.pageIndex,
            pageList: this.pageList,
            totalItems: this.total,
            remote: this.pagerOnServer
        };
        this.labels = {
            previousLabel: ' ',
            nextLabel: ' ',
            screenReaderPaginationLabel: 'Pagination',
            screenReaderPageLabel: 'page',
            screenReaderCurrentLabel: `You're on page`
        };
        this._currentRowIndex = -1;
        this._currentRow = undefined;
        this.isCheckAll = (/**
         * @return {?}
         */
        () => {
            if (!this.selections || !this.selections.length) {
                return false;
            }
            if (!this.data || !this.data.length) {
                return false;
            }
            /** @type {?} */
            let total = 0;
            this.selections.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (this.data.find((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => d[this.idField] === n[this.idField]))) {
                    total += 1;
                }
            }));
            return this.data.length === total;
        });
        this.mouseEnterOnPager = null;
        this.mouseLeaveOnPager = null;
        this.mouseWheelOnPager = null;
        this.trackByRows = (/**
         * @param {?} index
         * @param {?} row
         * @return {?}
         */
        (index, row) => {
            return row[this.idField];
        });
        this.dataService.selectedRow.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.singleSelect) {
                this._currentRowIndex = e.rowIndex;
                this._currentRow = e.rowData;
            }
            else {
                if (this.selections) {
                    this.dtHeader.isCheckAll = this.isCheckAll();
                }
            }
        }));
        this.dataService.unSelectedRow.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.singleSelect) {
                this._currentRow = undefined;
                this._currentRowIndex = -1;
            }
            else {
                this.dtHeader.isCheckAll = false;
            }
        }));
    }
    /**
     * @return {?}
     */
    get pageList() {
        return this._pageList;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set pageList(val) {
        this._pageList = val;
        if (this.pager) {
            this.pager.setPageList(val);
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        this._data = data;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set selections(v) {
        this.dtBody.selections = v ? v : {};
    }
    /**
     * @return {?}
     */
    get selections() {
        return this.dtBody.selections;
    }
    /**
     * @return {?}
     */
    get currentRowIndex() {
        return this._currentRowIndex;
    }
    /**
     * @return {?}
     */
    get currentRow() {
        return this._currentRow;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.setBodyHeight(false);
            this.ps = this.perfectScrollbar.directiveRef.ps();
        }));
        if (!this.id) {
            this.id = `datatable_${this.idService.generate()}`;
        }
        this.paginationOptions.id = this.paginationOptions.id + this.id;
        this.copyData = deepCopy(this.data);
        if (!this.beforeSortColumn) {
            this.beforeSortColumn = (/**
             * @return {?}
             */
            () => of(true));
        }
    }
    /**
     * @private
     * @param {?=} refresh
     * @return {?}
     */
    setBodyHeight(refresh = true) {
        /** @type {?} */
        let _tableheight = this.height;
        if (this.showFilterBar) {
            _tableheight = this.height - 46;
        }
        this.tableHeight = _tableheight;
        /** @type {?} */
        let _scorllableBodyHeight = 0;
        if (this.showHeader) {
            _scorllableBodyHeight = this.tableHeight - this.tableHeader.nativeElement.clientHeight;
        }
        if (this.pagination) {
            _scorllableBodyHeight = this.scorllableBodyHeight - 50;
        }
        this.scorllableBodyHeight = _scorllableBodyHeight;
        if (refresh && this.cd && !this.cd['destroyed']) {
            this.cd.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    onClearSearchValue() {
        this.searchData.value = '';
        this.cd.detectChanges();
        this.clearSearchValue.emit();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.height && !changes.height.isFirstChange()) {
            this.setBodyHeight();
        }
        if (changes.total && !changes.total.isFirstChange()) {
            this.paginationOptions.totalItems = changes.total.currentValue;
        }
        if (changes.pageSize) {
            this.paginationOptions.itemsPerPage = changes.pageSize.currentValue;
        }
        if (changes.pageIndex && !changes.pageIndex.isFirstChange()) {
            this.paginationOptions.currentPage = changes.pageIndex.currentValue;
        }
        if (changes.data && !changes.data.isFirstChange()) {
            /** @type {?} */
            const rows = changes.data.currentValue;
            this.updateCheckboxState(rows);
            this.paginationOptions = Object.assign({}, this.paginationOptions);
            this.dataService.loadSuccess.next(changes.data.currentValue);
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // 支持列组件写入
        if (!this.columns) {
            if (this.columnsRef && this.columnsRef.length) {
                this.columns = this.columnsRef.map((/**
                 * @param {?} col
                 * @return {?}
                 */
                col => {
                    return {
                        width: col.width,
                        title: col.title,
                        field: col.field,
                        align: col.align,
                        fixed: col.fixed,
                        className: col.className,
                        multipleFilter: col.multipleFilter,
                        filter: col.filter,
                        media: col.media,
                        sortable: col.sortable,
                        edit: col.edit
                    };
                }));
            }
        }
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.tablePager) {
                this.tablePager.nativeElement.addEventListener('mouseenter', this.mouseEnterOnPager = (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    /** @type {?} */
                    let overflowX = 'auto';
                    if (e.target.className.indexOf('pg-pagelist') > -1 || e.target.closest('.pg-pagelist')) {
                        overflowX = "unset";
                        this.pgScrollbar.nativeElement.scrollLeft = 0;
                    }
                    this.pgScrollbar.nativeElement.style.overflowX = overflowX;
                }), true);
                this.tablePager.nativeElement.addEventListener('mouseleave', this.mouseLeaveOnPager = (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    this.pgScrollbar.nativeElement.style.overflowX = "hidden";
                }));
                this.tablePager.nativeElement.addEventListener('wheel', this.mouseWheelOnPager = (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    /** @type {?} */
                    const box = this.tablePager.nativeElement;
                    /** @type {?} */
                    const sw = this.pgScrollbar.nativeElement.scrollWidth;
                    /** @type {?} */
                    const ow = box.offsetWidth;
                    if (sw > ow) {
                        /** @type {?} */
                        const right = sw - ow;
                        /** @type {?} */
                        const sl = Math.abs(this.pgScrollbar.nativeElement.scrollLeft);
                        if (sl < right && e.deltaY > 0) {
                            e.preventDefault();
                            this.pgScrollbar.nativeElement.scrollLeft = sl + 50;
                        }
                        if (sl > 0 && e.deltaY < 0) {
                            e.preventDefault();
                            this.pgScrollbar.nativeElement.scrollLeft = sl - 50;
                        }
                    }
                }));
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscription.forEach((/**
         * @param {?} sub
         * @return {?}
         */
        sub => {
            sub.unsubscribe();
        }));
        this.subscription = [];
        this.pager = null;
        if (this.tablePager && this.tablePager.nativeElement) {
            this.tablePager.nativeElement.removeEventListener('mouseenter', this.mouseEnterOnPager);
            this.tablePager.nativeElement.removeEventListener('mouseleave', this.mouseLeaveOnPager);
            this.tablePager.nativeElement.removeEventListener('wheel', this.mouseWheelOnPager);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // 获取表格容器  即表格
        this.datatableContainer = this.el.nativeElement.querySelector('.farris-datatable');
        // this.headerTr = this.tableHeader.nativeElement.querySelectorAll('tr');
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    updateCheckboxState(rows) {
        /** @type {?} */
        const updateCheckAllStatus = (/**
         * @param {?} f
         * @return {?}
         */
        (f) => {
            if (this.showHeader && this.dtHeader) {
                this.dtHeader.isCheckAll = f;
            }
        });
        if (rows && rows.length) {
            if (this.selections) {
                /** @type {?} */
                const keys = Object.keys(this.dtBody._selections);
                if (keys.length) {
                    /** @type {?} */
                    let count = 0;
                    /** @type {?} */
                    const ids = rows.map((/**
                     * @param {?} row
                     * @return {?}
                     */
                    (row) => {
                        return row[this.idField].toString();
                    }));
                    keys.forEach((/**
                     * @param {?} id
                     * @return {?}
                     */
                    id => {
                        if (ids.indexOf(id) > -1) {
                            count++;
                        }
                    }));
                    updateCheckAllStatus(ids.length === count);
                }
                else {
                    updateCheckAllStatus(false);
                }
            }
            else {
                updateCheckAllStatus(false);
            }
        }
        else {
            updateCheckAllStatus(false);
        }
    }
    /**
     * 获取表格容器的位置  距离左边视口和上边视口的距离  如果页面有滚动条  需要加上滚动条滚动的数值
     * @return {?}
     */
    getContainerOffset() {
        /** @type {?} */
        const rect = this.datatableContainer.getBoundingClientRect();
        return {
            left: rect.left + document.body.scrollLeft,
            top: rect.top + document.body.scrollTop,
            right: rect.right,
            bottom: rect.bottom,
        };
    }
    /**
     *  鼠标按下  开始记录拖拽线的位置  拖拽线到达当前鼠标位置
     * @param {?} e 鼠标对象
     * @return {?}
     */
    beginDrag(e) {
        this.dragLineX = e.pageX;
        event.preventDefault();
    }
    /**
     * 鼠标移动 移动拖拽线位置变动
     * @param {?} e 鼠标对象
     * @return {?}
     */
    moveDrag(e) {
        // 获取表格的左边距离
        /** @type {?} */
        const containerLeft = this.getContainerOffset().left;
        // 设置拖拽线的高度  即获取表头+表内容+表尾的高度  此表格结构包含了分页  因此要去掉分页的高度
        if (this.tablePager) {
            this.dragLine.nativeElement.style.height = this.datatableContainer.offsetHeight -
                this.tablePager.nativeElement.offsetHeight + 'px';
        }
        else {
            // const headerHeight = this.el.nativeElement.querySelector('.farris-table-header');
            // const bodyHeight = this.el.nativeElement.querySelector('.ps-content');
            this.dragLine.nativeElement.style.height = this.datatableContainer.offsetHeight + 'px';
        }
        // 设置拖拽线的高度 拖拽线相对于表格relative定位是absolute，因此是0
        this.dragLine.nativeElement.style.top = 0 + 'px';
        // 鼠标移动时，拖拽线相对于表格的位置
        this.dragLine.nativeElement.style.left = (e.pageX - containerLeft) + 'px';
        // 鼠标移动  设置拖拽线总是可见
        this.dragLine.nativeElement.style.display = 'block';
    }
    // 重新计算表格宽度
    /**
     * 鼠标抬起 重新计算单元格宽度
     * 鼠标对象
     * @param {?} e
     * @param {?} column
     * @return {?}
     */
    stopDrag(e, column) {
        this.resizeColumn(e, column);
    }
    /**
     * @param {?} e
     * @param {?} column
     * @return {?}
     */
    resizeColumn(e, column) {
        if (this.isCheckBox(column, 'dt-checkbox-cell')) {
            this.dragLine.nativeElement.style.display = 'none';
            return;
        }
        // 偏移量
        /** @type {?} */
        const delta = e.pageX - this.dragLineX;
        // 拖拽前列宽
        /** @type {?} */
        const columnWidth = column.offsetWidth;
        // 拖拽后列宽
        /** @type {?} */
        let newColumnWidth = columnWidth + delta;
        // 最小宽度
        /** @type {?} */
        const minWidth = column.style.minWidth || 30;
        // 新宽度大于或等于最小宽度时
        newColumnWidth = newColumnWidth > minWidth ? newColumnWidth : minWidth;
        // 重新设置宽度
        /** @type {?} */
        let colIndex = -1;
        /** @type {?} */
        const othersCol = [];
        /** @type {?} */
        const cols = this.tableHeader.nativeElement.querySelectorAll('th');
        // 父节点宽度
        /** @type {?} */
        const parentWidth = column.parentElement.offsetWidth;
        // 判断是不是有checkbox
        /** @type {?} */
        const firstElement = column.parentElement.firstElementChild;
        /** @type {?} */
        const checkBoxWidth = this.isCheckBox(firstElement, 'dt-checkbox-cell') ? firstElement.offsetWidth : 0;
        // 其他列宽度
        /** @type {?} */
        let othersWidth = parentWidth - columnWidth - checkBoxWidth;
        /** @type {?} */
        let newOthersWidth = parentWidth - newColumnWidth - checkBoxWidth;
        for (let i = 0; i < cols.length; i++) {
            if (cols[i] === column) {
                colIndex = i;
            }
            else {
                if (this.isCheckBox(cols[i], 'dt-checkbox-cell')) {
                    continue;
                }
                /** @type {?} */
                const rate = cols[i].offsetWidth / othersWidth;
                if (rate > 1) {
                    // console.log(cols[i]);
                }
                /** @type {?} */
                let colWidth = newOthersWidth * rate;
                if (newOthersWidth * rate > 15) {
                    colWidth = newOthersWidth * rate;
                }
                else {
                    colWidth = 15;
                    othersWidth = othersWidth - colWidth;
                    newOthersWidth = newOthersWidth - colWidth;
                    newColumnWidth = newColumnWidth - 15 + newOthersWidth * rate;
                }
                othersCol.push({ colIndex: i, colWidth });
            }
        }
        this.resizeColGroup(this.dtHeader.el.nativeElement, colIndex, newColumnWidth, othersCol);
        this.resizeColGroup(this.dtBody.el.nativeElement, colIndex, newColumnWidth, othersCol);
        // 计算宽度完毕  设置拖拽线隐藏
        this.dragLine.nativeElement.style.display = 'none';
    }
    /**
     * @param {?} elements
     * @param {?} cName
     * @return {?}
     */
    isCheckBox(elements, cName) {
        return !!elements.className.match(new RegExp('(\\s|^)' + cName + '(\\s|$)'));
    }
    /**
     * @param {?} table
     * @param {?} resizeColumnIndex
     * @param {?} newColumnWidth
     * @param {?} othersColumn
     * @return {?}
     */
    resizeColGroup(table, resizeColumnIndex, newColumnWidth, othersColumn) {
        if (table) {
            // 此处要视不同的表格结构来确定 本组件中  header和body结构相同
            /** @type {?} */
            const colGroup = table.childNodes[0].children[0].nodeName === 'COLGROUP' ?
                table.childNodes[0].children[0] : null;
            if (colGroup) {
                /** @type {?} */
                const col = colGroup.children[resizeColumnIndex];
                col.style.width = newColumnWidth + 'px';
                for (let i = 0; i < othersColumn.length; i++) {
                    /** @type {?} */
                    const otherCol = colGroup.children[othersColumn[i].colIndex];
                    if (otherCol && othersColumn[i].colWidth) {
                        otherCol.style.width = othersColumn[i].colWidth + 'px';
                    }
                }
            }
            else {
                throw new Error('Scrollable tables require a colgroup to support resizable columns');
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onScrollX(e) {
        // 横向滚动 非固定表头滚动
        /** @type {?} */
        const x = e.srcElement.scrollLeft;
        this.tableHeader.nativeElement.scrollTo(x, 0);
    }
    /**
     * 滚动条纵向滚动
     * @param {?} e
     * @return {?}
     */
    onScrollY(e) {
        if (!this.hasFixed) {
            return;
        }
        /** @type {?} */
        const y = e.srcElement.scrollTop;
        this.dtLeftFixed.nativeElement.style.top = -y + 'px';
        this.dtRightFixed.nativeElement.style.top = -y + 'px';
    }
    /**
     * @param {?} page
     * @return {?}
     */
    onPageChange(page) {
        if (this.pageIndex !== page.pageIndex) {
            this.pageIndex = page.pageIndex;
            this.paginationOptions.currentPage = page.pageIndex;
            this.pageChanged.emit({ pageInfo: page, search: this.searchData, sortName: this.sortName, sortOrder: this.sortOrder });
        }
    }
    /**
     * @param {?} pageSize
     * @return {?}
     */
    onPageSizeChange(pageSize) {
        if (this.pageSize !== pageSize && this.total) {
            this.paginationOptions.itemsPerPage = pageSize;
            this.pageSize = pageSize;
            /** @type {?} */
            const total = this.total;
            /** @type {?} */
            let pageLength = Math.floor(total / pageSize);
            if (total % pageSize > 0) {
                pageLength += 1;
            }
            if (pageLength && this.pageIndex > pageLength) {
                this.pageIndex = pageLength;
                this.paginationOptions.currentPage = this.pageIndex;
            }
            this.pageSizeChanged.emit({
                pageInfo: { pageIndex: this.pageIndex, pageSize },
                search: this.searchData, sortName: this.sortName, sortOrder: this.sortOrder
            });
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSearch($event) {
        if ($event.originalEvent) {
            $event.originalEvent.stopPropagation();
        }
        this.search.emit(this.searchData);
    }
    /**
     * @param {?} state
     * @return {?}
     */
    onCheckAll(state) {
        this.dataService.selectedAll.next(state);
        this.checkAll.emit(state);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onSelectedRow(e) {
        this.selectedRow.emit({ data: e.rowData, index: e.rowIndex });
        // 兼容
        this.selectRows.emit({ data: e.rowData, index: e.rowIndex });
    }
    // tslint:disable-next-line:no-shadowed-variable
    /**
     * @param {?} size
     * @return {?}
     */
    resize(size) {
        if (!size) {
            return;
        }
        if (this.width !== size.width || this.height !== size.height) {
            this.width = size.width;
            this.height = size.height;
            this.setBodyHeight();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    loadData(e) {
        this.data = e.data;
        if (this.pagination) {
            const { total = 0, pageSize = 20, pageIndex = 1 } = Object.assign({}, e);
            this.paginationOptions.totalItems = total;
            this.paginationOptions.itemsPerPage = pageSize;
            this.paginationOptions.currentPage = pageIndex;
            this.paginationOptions.pageList = this.pageList;
            this.paginationOptions = Object.assign({}, this.paginationOptions);
            this.total = total;
            this.pageSize = pageSize;
            this.pageIndex = pageIndex;
        }
        this.cd.detectChanges();
        this.updateCheckboxState(this.data);
    }
    /*
         */
    /**
     * @param {?} e
     * @return {?}
     */
    onCellClick(e) {
        this.cellClick.emit(e);
    }
    /* 添加行 */
    /**
     * @param {?} dataItem
     * @return {?}
     */
    addRows(dataItem) {
        this.data = this.data.concat(dataItem);
    }
    /* 删除行 */
    /**
     * @return {?}
     */
    removeRows() {
        /** @type {?} */
        const SELECTIONS = this.selections;
        if (this.singleSelect) {
            for (let i = 0; i < this.data.length; i++) {
                if (this.data[i] === SELECTIONS) {
                    this.data.splice(i, 1);
                }
            }
        }
        else {
            for (let i = 0; i < SELECTIONS.length; i++) {
                for (let j = 0; j < this.data.length; j++) {
                    if (SELECTIONS[i][this.idField] === this.data[j][this.idField]) {
                        this.data.splice(j, 1);
                    }
                }
            }
        }
    }
    /**
     * @param {?} rid
     * @param {?=} emit
     * @return {?}
     */
    checkRow(rid, emit = false) {
        /** @type {?} */
        let rowIndex = -1;
        /** @type {?} */
        const rowData = this.data.find((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        (n, i) => {
            if (n[this.idField] == rid) {
                rowIndex = i;
                return true;
            }
        }));
        if (!rowData) {
            return;
        }
        if (!this.selections) {
            this.selections = { [rid]: rowData };
        }
        else {
            this.selections = Object.assign({ [rid]: rowData }, this.selections.reduce((/**
             * @param {?} r
             * @param {?} n
             * @return {?}
             */
            (r, n) => {
                r[n[this.idField]] = n;
                return r;
            }), {}));
        }
        this.dataService.selectedRow.next({
            rowIndex,
            rowData
        });
        if (emit) {
            /** @type {?} */
            const p = { data: rowData, index: rowIndex };
            this.selectedRow.emit(p);
            // 兼容
            this.selectRows.emit(p);
        }
    }
    /**
     * @param {?} rid
     * @param {?=} emit
     * @return {?}
     */
    unCheckRow(rid, emit = false) {
        /** @type {?} */
        let rowIndex = -1;
        /** @type {?} */
        const rowData = this.data.find((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        (n, i) => {
            if (n[this.idField] == rid) {
                rowIndex = i;
                return true;
            }
        }));
        if (this.selections) {
            this.selections = this.selections.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.idField] != rid)).reduce((/**
             * @param {?} r
             * @param {?} n
             * @return {?}
             */
            (r, n) => {
                r[n[this.idField]] = n;
                return r;
            }), {});
            this.dataService.unSelectedRow.next({
                rowIndex,
                rowData
            });
            if (emit) {
                this.unSelectRow.emit({ data: rowData, index: rowIndex });
            }
        }
    }
    /**
     * @return {?}
     */
    clearSelections() {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onKeydownEvent($event) {
        if (!$event || !this.singleSelect || !this.data || !this.data.length) {
            return;
        }
        if (!['ArrowDown', 'ArrowUp'].includes($event.code)) {
            return;
        }
        /** @type {?} */
        let newIdx;
        if ($event.code === 'ArrowDown') {
            newIdx = this._currentRowIndex + 1;
            if (newIdx >= this.data.length) {
                newIdx = 0;
            }
        }
        else if ($event.code === 'ArrowUp') {
            if (this._currentRowIndex !== -1) {
                newIdx = this._currentRowIndex - 1;
            }
        }
        if (newIdx >= 0) {
            this.dtBody.selectedRow($event, newIdx, this.data[newIdx]);
        }
        setTimeout((/**
         * @return {?}
         */
        () => {
            // scroll intoView
            /** @type {?} */
            const trDoms = this.dtBody.el.nativeElement.querySelectorAll('.ui-table-tbody tr');
            if (trDoms && trDoms[this._currentRowIndex]) {
                trDoms[this._currentRowIndex].scrollIntoView({ block: 'nearest' });
            }
        }));
    }
}
DataTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'farrisui-datatable,farris-datatable',
                template: "<div class=\"filter-row\" [style.width]=\"width + 'px'\" *ngIf=\"showFilterBar\">\r\n    <form style=\"display: flex; width: 100%;\">\r\n        <div class=\"search-fields\">\r\n            <select class=\"custom-select\" [(ngModel)]=\"searchData.field\" name=\"field\">\r\n                <option value=\"*\">{{allColumnsTitle}}</option>\r\n                <option *ngFor=\"let col of searchFields\" value=\"{{col.value}}\">{{ col.label }}</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"search-text flex-fill\">\r\n            <input-group [groupText]=\"searchButtonText\" name=\"searchValue\" (clear)=\"onClearSearchValue()\" #inputgroup\r\n                [(ngModel)]=\"searchData.value\" (clickHandle)=\"onSearch($event)\" (enterHandle)=\"onSearch($event)\"\r\n                (keydownHandle)=\"onKeydownEvent($event)\" (valueChange)=\"searchValueChange.emit(searchData)\"></input-group>\r\n        </div>\r\n    </form>\r\n</div>\r\n<div [ngStyle]=\"{'height': tableHeight +'px', 'width': width +'px' }\" class=\"farris-datatable-container\">\r\n    <div class=\"farris-datatable\">\r\n        <div #tableHeader class=\"farris-table-header\" [style.display]=\"showHeader? '': 'none'\">\r\n            <datatable-header #dtHeader [size]=\"size\" [columns]=\"columns\" [singleSelect]=\"singleSelect\" [data]=\"data\"\r\n                (loadData)=\"loadData\" (checkedAll)=\"onCheckAll($event)\">\r\n                <ng-content select=\"data-columns\"></ng-content>\r\n            </datatable-header>\r\n        </div>\r\n        <div #scorllableBody class=\"farris-table-scorllable-body\" [style.height]=\"scorllableBodyHeight + 'px'\">\r\n            <perfect-scrollbar #perfectScrollbar [config]=\"{}\" (psScrollX)=\"onScrollX($event)\" (psScrollY)=\"onScrollY($event)\">\r\n                <ng-container [style.display]=\"data && data.length ? 'block': 'none'\">\r\n                    <datatable-body #dtBody [rows]=\"pagination ? (data | paginate: paginationOptions) : data\" [size]=\"size\" [columns]=\"columns\" [striped]=\"striped\"\r\n                        [bordered]=\"bordered\" [rowClassName]=\"rowClassName\" [cellClassName]=\"cellClassName\" (cellClick)=\"onCellClick($event)\">\r\n                    </datatable-body>\r\n                </ng-container>\r\n                <!-- <ng-container *ngIf=\"!(data && data.length)\">\r\n                    <h1 style=\"text-align:center;color:#ccc; margin-top: 50px;\"></h1>\r\n                </ng-container> -->\r\n            </perfect-scrollbar>\r\n        </div>\r\n        <div class=\"farris-table-header\" *ngIf=\"footer\">\r\n            <ng-template [ngTemplateOutlet]=\"footer\">\r\n            </ng-template>\r\n        </div>\r\n        <div *ngIf=\"pagination\" #tablePager class=\"farris-table-pager\" >\r\n            <div #pgScrollbar style=\"width: 100%;position: absolute;overflow-x: unset;\">\r\n                <pagination-controls #pager [id]=\"paginationOptions.id\" [maxSize]=\"maxSize\" [directionLinks]=\"directionLinks\"\r\n                    [autoHide]=\"autoHide\" [responsive]=\"responsive\" [previousLabel]=\"labels.previousLabel\" [nextLabel]=\"labels.nextLabel\"\r\n                    [screenReaderPaginationLabel]=\"labels.screenReaderPaginationLabel\" [screenReaderPageLabel]=\"labels.screenReaderPageLabel\"\r\n                    [screenReaderCurrentLabel]=\"labels.screenReaderCurrentLabel\" (pageChange)=\"onPageChange($event)\"\r\n                    (pageSizeChange)=\"onPageSizeChange($event)\" [viewMode]=\"pagerViewMode\" [showGoToFirst]=\"true\" [showGoToLast]=\"true\"\r\n                    [showPageInfo]=\"showPageInfo\" [showPageNumber]=\"showPageNumber\" [showPageList]=\"showPageList\" style=\"position: relative;\"\r\n                >\r\n                </pagination-controls>\r\n            </div>\r\n        </div>\r\n        <div #dragLine *ngIf=\"resizableColumns\" class=\"column-resizer-helper\"></div>\r\n    </div>\r\n</div>",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    DataTableService
                ],
                styles: [".farris-ui-datatable{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;height:100%;font-size:13px}.farris-ui-datatable table{border-collapse:collapse;width:100%;table-layout:fixed}.farris-ui-datatable .farris-table-footer,.farris-ui-datatable .farris-table-header{position:relative;min-height:34px}.farris-ui-datatable .farris-table-footer thead>tr>th,.farris-ui-datatable .farris-table-header thead>tr>th{padding:.571em .857em;border:1px solid #c8c8c8;font-weight:700;color:#333;background-color:#fff;border-top:0;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.farris-ui-datatable .farris-table-footer thead>tr>th .tt-checkbox,.farris-ui-datatable .farris-table-header thead>tr>th .tt-checkbox{margin-right:0;vertical-align:top;min-height:1rem}.farris-ui-datatable .farris-table-footer thead>tr>th:first-child,.farris-ui-datatable .farris-table-header thead>tr>th:first-child{border-left:0}.farris-ui-datatable .farris-table-footer thead>tr>th:last-child,.farris-ui-datatable .farris-table-header thead>tr>th:last-child{border-right:0}.farris-ui-datatable .farris-table-footer .checkbox-cell,.farris-ui-datatable .farris-table-header .checkbox-cell{width:40px}.farris-ui-datatable .farris-table-scorllable-body{overflow:hidden}.farris-ui-datatable .farris-table-scorllable-body .ui-table-tbody tr>td{background:inherit;border:1px solid #c8c8c8;padding:6px 10px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.farris-ui-datatable .farris-table-scorllable-body .ui-table-tbody .tt-checkbox{margin-right:0;vertical-align:top}.farris-ui-datatable .farris-table-scorllable-body .ui-table-tbody .checkbox-cell{width:40px}.farris-ui-datatable .farris-table-scorllable-body .row-hight-light{background-color:#b7d7ff;color:#000}.farris-ui-datatable .farris-table-scorllable-body .ui-table-tbody tr:not(.row-hight-light):hover{cursor:pointer;background-color:#e7f2ff}.farris-ui-datatable .farris-table-scorllable-body .ui-table-tbody>tr:first-child>td{border-top:0}.farris-ui-datatable .farris-table-scorllable-body table>.ui-table-tbody>tr>td:last-child{border-right:0}.farris-ui-datatable .farris-table-scorllable-body table>.ui-table-tbody>tr>td:first-child{border-left:0}.farris-ui-datatable .farris-table-pager{background-color:#f3f3f3;height:50px;min-height:50px;width:100%;border-top:1px solid #c8c8c8}.filter-row{display:-webkit-box;display:flex;margin:10px 0}.filter-row .search-fields{min-width:140px}.filter-row .search-text{-webkit-box-flex:1;flex:1;margin-left:10px}.filter-row .search-text .btn-outline-secondary{border-color:#ced4da}.filter-row .search-text .btn-outline-secondary:active,.filter-row .search-text .btn-outline-secondary:focus{box-shadow:none}.filter-row .form-control:focus{border-color:#ced4da;box-shadow:none}.filter-row .custom-select:focus{box-shadow:none}.farris-datatable{position:relative}.resizable-column{background-clip:padding-box;position:relative}.column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5em;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.column-resizer-helper{width:1px;position:absolute;z-index:10;display:none;background-color:#6c757d;opacity:.6}.farris-table-fixed-body,.farris-table-fixed-header{position:absolute;top:0;left:0;overflow:hidden;box-shadow:2px 0 6px -2px rgba(0,0,0,.2)}.farris-table-fixed-right-body,.farris-table-fixed-right-header{position:absolute;top:0;right:0;overflow:hidden;box-shadow:-2px 0 6px -2px rgba(0,0,0,.2)}.td-hidden{visibility:hidden}@media (min-width:576px){.td-sm-hidden{visibility:hidden!important}.td-sm-visible{visibility:visible!important}}@media (min-width:768px){.td-md-hidden{visibility:hidden!important}.td-md-visible{visibility:visible!important}}@media (min-width:992px){.td-lg-hidden{visibility:hidden!important}.td-lg-visible{visibility:visible!important}}@media (min-width:1200px){.td-xl-hidden{visibility:hidden!important}.td-xl-visible{visibility:visible!important}}"]
            }] }
];
/** @nocollapse */
DataTableComponent.ctorParameters = () => [
    { type: DataTableService },
    { type: IdService },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: NgZone }
];
DataTableComponent.propDecorators = {
    keydownEnterEdit: [{ type: Input }],
    id: [{ type: Input }],
    size: [{ type: Input }],
    allColumnsTitle: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    fill: [{ type: Input }],
    pagination: [{ type: Input }],
    pagerOnServer: [{ type: Input }],
    pageSize: [{ type: Input }],
    pageIndex: [{ type: Input }],
    showPageInfo: [{ type: Input }],
    showPageNumber: [{ type: Input }],
    showPageList: [{ type: Input }],
    pagerViewMode: [{ type: Input }],
    showHeader: [{ type: Input }],
    pageList: [{ type: Input }],
    total: [{ type: Input }],
    columns: [{ type: Input }],
    searchFields: [{ type: Input }],
    showFilterBar: [{ type: Input }],
    data: [{ type: Input }],
    remote: [{ type: Input }],
    remoteSort: [{ type: Input }],
    sortName: [{ type: Input }],
    sortOrder: [{ type: Input }],
    multiSort: [{ type: Input }],
    beforeSortColumn: [{ type: Input }],
    singleSelect: [{ type: Input }],
    idField: [{ type: Input }],
    hover: [{ type: Input }],
    striped: [{ type: Input }],
    bordered: [{ type: Input }],
    rowClassName: [{ type: Input }],
    cellClassName: [{ type: Input }],
    rowStyler: [{ type: Input }],
    cellStyler: [{ type: Input }],
    selections: [{ type: Input }],
    scorllableBody: [{ type: ViewChild, args: ['scorllableBody',] }],
    tableHeader: [{ type: ViewChild, args: ['tableHeader',] }],
    tablePager: [{ type: ViewChild, args: ['tablePager',] }],
    dtHeader: [{ type: ViewChild, args: ['dtHeader',] }],
    dtBody: [{ type: ViewChild, args: ['dtBody',] }],
    dtLeftBody: [{ type: ViewChild, args: ['dtLeftBody',] }],
    dtRightBody: [{ type: ViewChild, args: ['dtRightBody',] }],
    dtLeftFixed: [{ type: ViewChild, args: ['dtLeftFixed',] }],
    dtRightFixed: [{ type: ViewChild, args: ['dtRightFixed',] }],
    pager: [{ type: ViewChild, args: ['pager',] }],
    inputGroup: [{ type: ViewChild, args: ['inputgroup',] }],
    pgScrollbar: [{ type: ViewChild, args: ['pgScrollbar',] }],
    pageChanged: [{ type: Output }],
    pageSizeChanged: [{ type: Output }],
    search: [{ type: Output }],
    columnSorted: [{ type: Output }],
    rowDblClick: [{ type: Output }],
    selectedRow: [{ type: Output }],
    selectRows: [{ type: Output }],
    unSelectRow: [{ type: Output }],
    cellClick: [{ type: Output }],
    clearSearchValue: [{ type: Output }],
    checkAll: [{ type: Output }],
    searchValueChange: [{ type: Output }],
    sortChange: [{ type: Output }],
    columnsRef: [{ type: ContentChildren, args: [ColumnDirective,] }],
    footer: [{ type: ContentChild, args: ['footer',] }],
    dragLine: [{ type: ViewChild, args: ['dragLine',] }],
    resizableColumns: [{ type: Input }],
    keepSelect: [{ type: Input }],
    perfectScrollbar: [{ type: ViewChild, args: ['perfectScrollbar',] }]
};
if (false) {
    /** @type {?} */
    DataTableComponent.prototype.searchButtonText;
    /** @type {?} */
    DataTableComponent.prototype.keydownEnterEdit;
    /** @type {?} */
    DataTableComponent.prototype.id;
    /** @type {?} */
    DataTableComponent.prototype.size;
    /** @type {?} */
    DataTableComponent.prototype.allColumnsTitle;
    /** @type {?} */
    DataTableComponent.prototype.width;
    /** @type {?} */
    DataTableComponent.prototype.height;
    /** @type {?} */
    DataTableComponent.prototype.tableHeight;
    /** @type {?} */
    DataTableComponent.prototype.fill;
    /** @type {?} */
    DataTableComponent.prototype.pagination;
    /** @type {?} */
    DataTableComponent.prototype.pagerOnServer;
    /** @type {?} */
    DataTableComponent.prototype.pageSize;
    /** @type {?} */
    DataTableComponent.prototype.pageIndex;
    /** @type {?} */
    DataTableComponent.prototype.showPageInfo;
    /** @type {?} */
    DataTableComponent.prototype.showPageNumber;
    /** @type {?} */
    DataTableComponent.prototype.showPageList;
    /** @type {?} */
    DataTableComponent.prototype.pagerViewMode;
    /**
     * 显示表头
     * @type {?}
     */
    DataTableComponent.prototype.showHeader;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype._pageList;
    /** @type {?} */
    DataTableComponent.prototype.total;
    /** @type {?} */
    DataTableComponent.prototype.columns;
    /** @type {?} */
    DataTableComponent.prototype.searchFields;
    /** @type {?} */
    DataTableComponent.prototype.showFilterBar;
    /** @type {?} */
    DataTableComponent.prototype._data;
    /** @type {?} */
    DataTableComponent.prototype.copyData;
    /** @type {?} */
    DataTableComponent.prototype.remote;
    /**
     * 启用远端排序
     * @type {?}
     */
    DataTableComponent.prototype.remoteSort;
    /**
     * 排序字段
     * @type {?}
     */
    DataTableComponent.prototype.sortName;
    /**
     * 排序方式 asc | desc
     * @type {?}
     */
    DataTableComponent.prototype.sortOrder;
    /**
     * 允许多列排序
     * @type {?}
     */
    DataTableComponent.prototype.multiSort;
    /** @type {?} */
    DataTableComponent.prototype.beforeSortColumn;
    /** @type {?} */
    DataTableComponent.prototype.singleSelect;
    /** @type {?} */
    DataTableComponent.prototype.idField;
    /** @type {?} */
    DataTableComponent.prototype.hover;
    /** @type {?} */
    DataTableComponent.prototype.striped;
    /** @type {?} */
    DataTableComponent.prototype.bordered;
    /** @type {?} */
    DataTableComponent.prototype.rowClassName;
    /** @type {?} */
    DataTableComponent.prototype.cellClassName;
    /** @type {?} */
    DataTableComponent.prototype.rowStyler;
    /** @type {?} */
    DataTableComponent.prototype.cellStyler;
    /** @type {?} */
    DataTableComponent.prototype.scorllableBody;
    /** @type {?} */
    DataTableComponent.prototype.tableHeader;
    /** @type {?} */
    DataTableComponent.prototype.tablePager;
    /** @type {?} */
    DataTableComponent.prototype.dtHeader;
    /** @type {?} */
    DataTableComponent.prototype.dtBody;
    /** @type {?} */
    DataTableComponent.prototype.dtLeftBody;
    /** @type {?} */
    DataTableComponent.prototype.dtRightBody;
    /** @type {?} */
    DataTableComponent.prototype.dtLeftFixed;
    /** @type {?} */
    DataTableComponent.prototype.dtRightFixed;
    /** @type {?} */
    DataTableComponent.prototype.pager;
    /** @type {?} */
    DataTableComponent.prototype.inputGroup;
    /** @type {?} */
    DataTableComponent.prototype.pgScrollbar;
    /** @type {?} */
    DataTableComponent.prototype.pageChanged;
    /** @type {?} */
    DataTableComponent.prototype.pageSizeChanged;
    /** @type {?} */
    DataTableComponent.prototype.search;
    /** @type {?} */
    DataTableComponent.prototype.columnSorted;
    /** @type {?} */
    DataTableComponent.prototype.rowDblClick;
    /** @type {?} */
    DataTableComponent.prototype.selectedRow;
    /** @type {?} */
    DataTableComponent.prototype.selectRows;
    /** @type {?} */
    DataTableComponent.prototype.unSelectRow;
    /** @type {?} */
    DataTableComponent.prototype.cellClick;
    /** @type {?} */
    DataTableComponent.prototype.clearSearchValue;
    /** @type {?} */
    DataTableComponent.prototype.checkAll;
    /** @type {?} */
    DataTableComponent.prototype.searchValueChange;
    /** @type {?} */
    DataTableComponent.prototype.sortChange;
    /** @type {?} */
    DataTableComponent.prototype.columnsRef;
    /** @type {?} */
    DataTableComponent.prototype.footer;
    /** @type {?} */
    DataTableComponent.prototype.dragLine;
    /** @type {?} */
    DataTableComponent.prototype.resizableColumns;
    /**
     * 针对同一条记录，单选时，多次单击后不取消选中。
     * @type {?}
     */
    DataTableComponent.prototype.keepSelect;
    /** @type {?} */
    DataTableComponent.prototype.hasRowTepml;
    /** @type {?} */
    DataTableComponent.prototype.datatableContainer;
    /** @type {?} */
    DataTableComponent.prototype.dragLineX;
    /** @type {?} */
    DataTableComponent.prototype.moveable;
    /** @type {?} */
    DataTableComponent.prototype.currentColumn;
    /** @type {?} */
    DataTableComponent.prototype.hasFixed;
    /** @type {?} */
    DataTableComponent.prototype.fixedLeftWidth;
    /** @type {?} */
    DataTableComponent.prototype.fixedRightWidth;
    /** @type {?} */
    DataTableComponent.prototype.searchData;
    /** @type {?} */
    DataTableComponent.prototype.subscription;
    /** @type {?} */
    DataTableComponent.prototype.headerTr;
    /** @type {?} */
    DataTableComponent.prototype.leftFixedHeaderTr;
    /** @type {?} */
    DataTableComponent.prototype.rightFixedHeaderTr;
    /** @type {?} */
    DataTableComponent.prototype.filter;
    /** @type {?} */
    DataTableComponent.prototype.maxSize;
    /** @type {?} */
    DataTableComponent.prototype.directionLinks;
    /** @type {?} */
    DataTableComponent.prototype.autoHide;
    /** @type {?} */
    DataTableComponent.prototype.responsive;
    /** @type {?} */
    DataTableComponent.prototype.paginationOptions;
    /** @type {?} */
    DataTableComponent.prototype.labels;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype._currentRowIndex;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype._currentRow;
    /** @type {?} */
    DataTableComponent.prototype.perfectScrollbar;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype.isCheckAll;
    /** @type {?} */
    DataTableComponent.prototype.scorllableBodyHeight;
    /** @type {?} */
    DataTableComponent.prototype.mouseEnterOnPager;
    /** @type {?} */
    DataTableComponent.prototype.mouseLeaveOnPager;
    /** @type {?} */
    DataTableComponent.prototype.mouseWheelOnPager;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype.ps;
    /** @type {?} */
    DataTableComponent.prototype.trackByRows;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype.dataService;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype.idService;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype.el;
    /** @type {?} */
    DataTableComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXRhYmxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YXRhYmxlLyIsInNvdXJjZXMiOlsibGliL2RhdGF0YWJsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzdELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7O0FBVWxELE9BQU8sRUFDSCxTQUFTLEVBQVUsU0FBUyxFQUFFLFVBQVUsRUFBYSxLQUFLLEVBQWlCLFlBQVksRUFBRSxXQUFXLEVBQ3BHLFNBQVMsRUFBbUMsZUFBZSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQXFCLE1BQU0sRUFDbEksTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUE0QixFQUFFLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFFL0QsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDekUsT0FBTyxFQUFzQiwyQkFBMkIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3hGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUc5QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDOUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBZTlFLE1BQU0sT0FBTyxrQkFBa0I7Ozs7Ozs7O0lBeU4zQixZQUFvQixXQUE2QixFQUFVLFNBQW9CLEVBQVUsRUFBYyxFQUM1RixFQUFxQixFQUFVLE1BQWM7UUFEcEMsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO1FBQVUsY0FBUyxHQUFULFNBQVMs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aEQsdUNBQThDOztJQUM5Qyw4Q0FBZ0Q7O0lBQ2hELHNDQUE2Qzs7SUFDN0MsK0NBQXNEOztJQUd0RCx3Q0FBMEM7O0lBRTFDLHdDQUF5RTs7SUFFekUsb0NBQWlEOztJQUdqRCxzQ0FBNEM7O0lBRTVDLDhDQUFpQzs7Ozs7SUFHakMsd0NBQTJCOztJQUczQix5Q0FBb0I7O0lBRXBCLGdEQUFtQzs7SUFFbkMsdUNBQWtCOztJQUVsQixzQ0FBaUI7O0lBRWpCLDJDQUFtQjs7SUFFbkIsc0NBQWtCOztJQUNsQiw0Q0FBdUI7O0lBRXZCLDZDQUF3Qjs7SUFDeEIsd0NBQXVDOztJQUV2QywwQ0FBa0M7O0lBRWxDLHNDQUFjOztJQUNkLCtDQUF1Qjs7SUFDdkIsZ0RBQXdCOztJQUd4QixvQ0FBbUI7O0lBQ25CLHFDQUFtQjs7SUFDbkIsNENBQTZCOztJQUM3QixzQ0FBd0I7O0lBQ3hCLHdDQUF5Qjs7SUFDekIsK0NBT0U7O0lBQ0Ysb0NBTUU7Ozs7O0lBRUYsOENBQThCOzs7OztJQUs5Qix5Q0FBZ0M7O0lBS2hDLDhDQUEyRTs7Ozs7SUFFM0Usd0NBaUJDOztJQUVELGtEQUE2Qjs7SUFDN0IsK0NBQXlCOztJQUN6QiwrQ0FBeUI7O0lBQ3pCLCtDQUF5Qjs7Ozs7SUEwQnpCLGdDQUE2Qjs7SUFpRDdCLHlDQUVDOzs7OztJQTNFVyx5Q0FBcUM7Ozs7O0lBQUUsdUNBQTRCOzs7OztJQUFFLGdDQUFzQjs7SUFDbkcsZ0NBQTRCOzs7OztJQUFFLG9DQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0R3JvdXBDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWlucHV0LWdyb3VwJztcclxuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOS0wNy0xMCAxMTo0NDo0OVxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0xMS0wNSAxMTo0NDoxOFxyXG4gKiBAUVE6IDEwNTU4MTgyMzlcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuXHJcbmltcG9ydCB7XHJcbiAgICBDb21wb25lbnQsIE9uSW5pdCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIElucHV0LCBTaW1wbGVDaGFuZ2VzLCBDb250ZW50Q2hpbGQsIFRlbXBsYXRlUmVmLFxyXG4gICAgUXVlcnlMaXN0LCBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdJbml0LCBDb250ZW50Q2hpbGRyZW4sIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBWaWV3RW5jYXBzdWxhdGlvbiwgT25EZXN0cm95LCBJbmplY3QsIE5nWm9uZVxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uLCBPYnNlcnZhYmxlLCBvZiwgZnJvbUV2ZW50IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCBQZXJmZWN0U2Nyb2xsYmFyIGZyb20gJ3BlcmZlY3Qtc2Nyb2xsYmFyJztcclxuaW1wb3J0IHsgUGVyZmVjdFNjcm9sbGJhckNvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktcGVyZmVjdC1zY3JvbGxiYXInO1xyXG5pbXBvcnQgeyBQYWdpbmF0aW9uSW5zdGFuY2UsIFBhZ2luYXRpb25Db250cm9sc0NvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktcGFnaW5hdGlvbic7XHJcbmltcG9ydCB7IElkU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uJztcclxuaW1wb3J0IHsgRGF0YUNvbHVtbiB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uL2NvbHVtbic7XHJcblxyXG5pbXBvcnQgeyBkZWVwQ29weSB9IGZyb20gJy4vZGF0YXRhYmxlLWNvbHVtbic7XHJcbmltcG9ydCB7IENvbHVtbkRpcmVjdGl2ZSB9IGZyb20gJy4vZGF0YXRhYmxlLWNvbHVtbi5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBEYXRhVGFibGVTZXJ2aWNlIH0gZnJvbSAnLi9kYXRhdGFibGUuc2VydmljZSc7XHJcbmltcG9ydCB7IERhdGFUYWJsZUhlYWRlckNvbXBvbmVudCB9IGZyb20gJy4vdGFibGUvZGF0YXRhYmxlLWhlYWRlci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBkZWxheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcblxyXG5cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdmYXJyaXN1aS1kYXRhdGFibGUsZmFycmlzLWRhdGF0YWJsZScsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGF0YXRhYmxlLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL2RhdGF0YWJsZS5zY3NzJ10sXHJcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgRGF0YVRhYmxlU2VydmljZVxyXG4gICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0YVRhYmxlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICBzZWFyY2hCdXR0b25UZXh0ID0gJzxpIGNsYXNzPVwiZi1pY29uIGYtaWNvbi1zZWFyY2hcIj48L2k+JztcclxuICAgIEBJbnB1dCgpIGtleWRvd25FbnRlckVkaXQgPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpIGlkOiBzdHJpbmc7XHJcbiAgICBASW5wdXQoKSBzaXplOiBzdHJpbmc7XHJcbiAgICBASW5wdXQoKSBhbGxDb2x1bW5zVGl0bGUgPSAn5omA5pyJ5YiXJztcclxuICAgIC8vIHRhYmxlIOWwuuWvuFxyXG4gICAgQElucHV0KCkgd2lkdGg7XHJcbiAgICAvLyDnu4Tku7bnuqfpq5jluqbljIXmi6zov4fmu6TmnaHpq5jluqZcclxuICAgIEBJbnB1dCgpIGhlaWdodDtcclxuXHJcbiAgICB0YWJsZUhlaWdodDogbnVtYmVyOyAvLyDmlbDmja7ooajpq5jluqZcclxuICAgIC8vIOaYr+WQpuWhq+WFhVxyXG4gICAgQElucHV0KCkgZmlsbCA9IGZhbHNlO1xyXG4gICAgLy8g6buY6K6k5YiG6aG1XHJcbiAgICBASW5wdXQoKSBwYWdpbmF0aW9uID0gdHJ1ZTtcclxuICAgIEBJbnB1dCgpIHBhZ2VyT25TZXJ2ZXIgPSB0cnVlO1xyXG4gICAgQElucHV0KCkgcGFnZVNpemUgPSAxMDtcclxuICAgIEBJbnB1dCgpIHBhZ2VJbmRleCA9IDE7XHJcbiAgICBASW5wdXQoKSBzaG93UGFnZUluZm8gPSB0cnVlO1xyXG4gICAgQElucHV0KCkgc2hvd1BhZ2VOdW1iZXIgPSB0cnVlO1xyXG4gICAgQElucHV0KCkgc2hvd1BhZ2VMaXN0ID0gdHJ1ZTtcclxuICAgIEBJbnB1dCgpIHBhZ2VyVmlld01vZGUgPSAnZGVmYXVsdCc7XHJcbiAgICAvKiog5pi+56S66KGo5aS0ICovXHJcbiAgICBASW5wdXQoKSBzaG93SGVhZGVyID0gdHJ1ZTtcclxuXHJcbiAgICBwcml2YXRlIF9wYWdlTGlzdCA9IFsxMCwgMjAsIDMwLCA1MCwgMTAwXTtcclxuXHJcbiAgICBnZXQgcGFnZUxpc3QoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhZ2VMaXN0O1xyXG4gICAgfVxyXG4gICAgQElucHV0KCkgc2V0IHBhZ2VMaXN0KHZhbCkge1xyXG4gICAgICAgIHRoaXMuX3BhZ2VMaXN0ID0gdmFsO1xyXG4gICAgICAgIGlmICh0aGlzLnBhZ2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFnZXIuc2V0UGFnZUxpc3QodmFsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KCkgdG90YWwgPSAwO1xyXG4gICAgLy8g5YiXIOaVsOaNrlxyXG4gICAgQElucHV0KCkgY29sdW1uczogRGF0YUNvbHVtbltdO1xyXG4gICAgQElucHV0KCkgc2VhcmNoRmllbGRzOiB7IGxhYmVsOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfVtdO1xyXG4gICAgLy8g5Y+v562b6YCJXHJcbiAgICBASW5wdXQoKSBzaG93RmlsdGVyQmFyID0gZmFsc2U7XHJcbiAgICAvLyB0YWJsZSAg5pWw5o2uXHJcbiAgICBfZGF0YSA9IFtdO1xyXG4gICAgQElucHV0KClcclxuICAgIGdldCBkYXRhKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhO1xyXG4gICAgfVxyXG4gICAgc2V0IGRhdGEoZGF0YTogQXJyYXk8YW55Pikge1xyXG4gICAgICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xyXG4gICAgfVxyXG4gICAgLy8g5rex5ou36LSdZGF0YSDmlbDmja5cclxuICAgIGNvcHlEYXRhOiBhbnk7XHJcblxyXG4gICAgQElucHV0KCkgcmVtb3RlID0gJ2NsaWVudCc7XHJcblxyXG4gICAgLyoqIOWQr+eUqOi/nOerr+aOkuW6jyAqL1xyXG4gICAgQElucHV0KCkgcmVtb3RlU29ydCA9IHRydWU7XHJcbiAgICAvKiog5o6S5bqP5a2X5q61ICovXHJcbiAgICBASW5wdXQoKSBzb3J0TmFtZTogc3RyaW5nO1xyXG4gICAgLyoqIOaOkuW6j+aWueW8jyBhc2MgfCBkZXNjICovXHJcbiAgICBASW5wdXQoKSBzb3J0T3JkZXI6IHN0cmluZztcclxuICAgIC8qKiDlhYHorrjlpJrliJfmjpLluo8gKi9cclxuICAgIEBJbnB1dCgpIG11bHRpU29ydCA9IGZhbHNlO1xyXG4gICAgQElucHV0KCkgYmVmb3JlU29ydENvbHVtbjogKGZpZWxkOiBzdHJpbmcsIG9yZGVyOiBzdHJpbmcpID0+IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcblxyXG4gICAgLy8g5aSa6YCJICDljZXpgIlcclxuICAgIEBJbnB1dCgpIHNpbmdsZVNlbGVjdCA9IHRydWU7XHJcbiAgICBASW5wdXQoKSBpZEZpZWxkID0gJ2lkJztcclxuICAgIC8vIOaYvuekuum8oOagh+aCrOWBnOmrmOS6rlxyXG4gICAgQElucHV0KCkgaG92ZXIgPSB0cnVlO1xyXG4gICAgLy8g5paR6ams57q/XHJcbiAgICBASW5wdXQoKSBzdHJpcGVkOiBib29sZWFuO1xyXG4gICAgLy8g6L655qGGXHJcbiAgICBASW5wdXQoKSBib3JkZXJlZDogYm9vbGVhbjtcclxuICAgIC8vIOaUr+aMgea3u+WKoOihjCDljZXlhYPmoLwg57G75qC35byPXHJcbiAgICBASW5wdXQoKSByb3dDbGFzc05hbWU6IChyb3c6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gc3RyaW5nO1xyXG4gICAgQElucHV0KCkgY2VsbENsYXNzTmFtZTogKHZhbHVlOiBhbnksIGNvbDogYW55KSA9PiBzdHJpbmc7XHJcblxyXG4gICAgQElucHV0KCkgcm93U3R5bGVyOiAoYXJnczogYW55KSA9PiBhbnk7XHJcbiAgICBASW5wdXQoKSBjZWxsU3R5bGVyOiAodmFsOiBhbnkgKSA9PiBhbnk7XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHNldCBzZWxlY3Rpb25zKHYpIHtcclxuICAgICAgICB0aGlzLmR0Qm9keS5zZWxlY3Rpb25zID0gdiA/IHYgOiB7fTtcclxuICAgIH1cclxuICAgIGdldCBzZWxlY3Rpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmR0Qm9keS5zZWxlY3Rpb25zO1xyXG4gICAgfVxyXG4gICAgLy8g5rua5Yqo5p2h5byV55SoXHJcbiAgICBAVmlld0NoaWxkKCdzY29ybGxhYmxlQm9keScpIHNjb3JsbGFibGVCb2R5OiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgndGFibGVIZWFkZXInKSB0YWJsZUhlYWRlcjogRWxlbWVudFJlZjtcclxuICAgIEBWaWV3Q2hpbGQoJ3RhYmxlUGFnZXInKSB0YWJsZVBhZ2VyOiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgnZHRIZWFkZXInKSBkdEhlYWRlcjogRGF0YVRhYmxlSGVhZGVyQ29tcG9uZW50O1xyXG4gICAgQFZpZXdDaGlsZCgnZHRCb2R5JykgZHRCb2R5OiBhbnk7XHJcbiAgICBAVmlld0NoaWxkKCdkdExlZnRCb2R5JykgZHRMZWZ0Qm9keTogYW55O1xyXG4gICAgQFZpZXdDaGlsZCgnZHRSaWdodEJvZHknKSBkdFJpZ2h0Qm9keTogYW55O1xyXG4gICAgQFZpZXdDaGlsZCgnZHRMZWZ0Rml4ZWQnKSBkdExlZnRGaXhlZDogRWxlbWVudFJlZjtcclxuICAgIEBWaWV3Q2hpbGQoJ2R0UmlnaHRGaXhlZCcpIGR0UmlnaHRGaXhlZDogRWxlbWVudFJlZjtcclxuICAgIEBWaWV3Q2hpbGQoJ3BhZ2VyJykgcGFnZXI6IFBhZ2luYXRpb25Db250cm9sc0NvbXBvbmVudDtcclxuICAgIEBWaWV3Q2hpbGQoJ2lucHV0Z3JvdXAnKSBpbnB1dEdyb3VwOiBJbnB1dEdyb3VwQ29tcG9uZW50O1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ3BnU2Nyb2xsYmFyJykgcGdTY3JvbGxiYXI6IEVsZW1lbnRSZWY7XHJcblxyXG4gICAgLy8g5YiG6aG15LqL5Lu2XHJcbiAgICBAT3V0cHV0KCkgcGFnZUNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgcGFnZVNpemVDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIHNlYXJjaCA9IG5ldyBFdmVudEVtaXR0ZXI8eyBmaWVsZDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIH0+KCk7XHJcbiAgICBAT3V0cHV0KCkgY29sdW1uU29ydGVkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgICBAT3V0cHV0KCkgcm93RGJsQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICAgIEBPdXRwdXQoKSBzZWxlY3RlZFJvdyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gICAgLy8g5YW85a65XHJcbiAgICBAT3V0cHV0KCkgc2VsZWN0Um93cyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gICAgQE91dHB1dCgpIHVuU2VsZWN0Um93ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgICBAT3V0cHV0KCkgY2VsbENsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgICBAT3V0cHV0KCkgY2xlYXJTZWFyY2hWYWx1ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBjaGVja0FsbCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gICAgQE91dHB1dCgpIHNlYXJjaFZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG5cclxuICAgIEBPdXRwdXQoKSBzb3J0Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIEBDb250ZW50Q2hpbGRyZW4oQ29sdW1uRGlyZWN0aXZlKSBjb2x1bW5zUmVmOiBRdWVyeUxpc3Q8Q29sdW1uRGlyZWN0aXZlPjtcclxuICAgIC8vIOihqOWwvlxyXG4gICAgQENvbnRlbnRDaGlsZCgnZm9vdGVyJykgZm9vdGVyOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgLy8g6KGo5qC85Y+v5ouW5ou95a695bqm57O75YiXXHJcbiAgICAvLyDmi5bmi73nur9cclxuICAgIEBWaWV3Q2hpbGQoJ2RyYWdMaW5lJykgZHJhZ0xpbmU6IEVsZW1lbnRSZWY7XHJcbiAgICAvLyDmmK/lkKblj6/mi5bmi70gIOm7mOiupOWPr+S7pVxyXG4gICAgQElucHV0KCkgcmVzaXphYmxlQ29sdW1ucyA9IHRydWU7XHJcblxyXG4gICAgLyoqIOmSiOWvueWQjOS4gOadoeiusOW9le+8jOWNlemAieaXtu+8jOWkmuasoeWNleWHu+WQjuS4jeWPlua2iOmAieS4reOAgiAqL1xyXG4gICAgQElucHV0KCkga2VlcFNlbGVjdCA9IHRydWU7XHJcblxyXG4gICAgLy8g5piv5ZCm5pyJ6KGM5qih5p2/XHJcbiAgICBoYXNSb3dUZXBtbCA9IGZhbHNlO1xyXG4gICAgLy8g55So5oi36I635Y+W6KGo5aS0K+ihqOagvOWGheWuueeahOmrmOW6piAg5a695bqmICDnrYlcclxuICAgIGRhdGF0YWJsZUNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XHJcbiAgICAvLyDmi5bmi73nur/liJ3lp4vljJbkvY3nva5cclxuICAgIGRyYWdMaW5lWDogbnVtYmVyO1xyXG4gICAgLy8g6K6+572u5ouW5ou95YGc5q2i5ZmoXHJcbiAgICBtb3ZlYWJsZSA9IGZhbHNlO1xyXG4gICAgLy9cclxuICAgIGN1cnJlbnRDb2x1bW46IGFueTtcclxuICAgIC8vIOiuvue9ruW3puWbuuWumuWIl1xyXG4gICAgaGFzRml4ZWQ6IGJvb2xlYW47XHJcbiAgICBmaXhlZExlZnRXaWR0aDogc3RyaW5nO1xyXG4gICAgLy8g6K6+572u5Y+z5Zu65a6a5YiXXHJcbiAgICBmaXhlZFJpZ2h0V2lkdGg6IHN0cmluZztcclxuICAgIHNlYXJjaERhdGEgPSB7IGZpZWxkOiAnKicsIHZhbHVlOiAnJyB9O1xyXG4gICAgLy8g5LqL5Lu26K6i6ZiF5a2Y5YKoICDkvr/kuo7plIDmr4FcclxuICAgIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uW10gPSBbXTtcclxuICAgIC8vIOWbuuWumuWIl+aXtiAg5ZCM5LiA6KGM55qEdHIgaG92ZXLkuovku7ZcclxuICAgIGhlYWRlclRyOiBhbnk7XHJcbiAgICBsZWZ0Rml4ZWRIZWFkZXJUcjogYW55O1xyXG4gICAgcmlnaHRGaXhlZEhlYWRlclRyOiBhbnk7XHJcblxyXG4gICAgLy8g5Y6f5pWw5o2uXHJcbiAgICBwdWJsaWMgZmlsdGVyID0gJyc7XHJcbiAgICBwdWJsaWMgbWF4U2l6ZSA9IDc7XHJcbiAgICBwdWJsaWMgZGlyZWN0aW9uTGlua3MgPSB0cnVlO1xyXG4gICAgcHVibGljIGF1dG9IaWRlID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgcmVzcG9uc2l2ZSA9IHRydWU7XHJcbiAgICBwdWJsaWMgcGFnaW5hdGlvbk9wdGlvbnM6IFBhZ2luYXRpb25JbnN0YW5jZSA9IHtcclxuICAgICAgICBpZDogJ0ZhcnJpcy1EYXRhVGFibGUtUGFnaW5hdGlvbicsXHJcbiAgICAgICAgaXRlbXNQZXJQYWdlOiB0aGlzLnBhZ2VTaXplLFxyXG4gICAgICAgIGN1cnJlbnRQYWdlOiB0aGlzLnBhZ2VJbmRleCxcclxuICAgICAgICBwYWdlTGlzdDogdGhpcy5wYWdlTGlzdCxcclxuICAgICAgICB0b3RhbEl0ZW1zOiB0aGlzLnRvdGFsLFxyXG4gICAgICAgIHJlbW90ZTogdGhpcy5wYWdlck9uU2VydmVyXHJcbiAgICB9O1xyXG4gICAgcHVibGljIGxhYmVsczogYW55ID0ge1xyXG4gICAgICAgIHByZXZpb3VzTGFiZWw6ICcgJyxcclxuICAgICAgICBuZXh0TGFiZWw6ICcgJyxcclxuICAgICAgICBzY3JlZW5SZWFkZXJQYWdpbmF0aW9uTGFiZWw6ICdQYWdpbmF0aW9uJyxcclxuICAgICAgICBzY3JlZW5SZWFkZXJQYWdlTGFiZWw6ICdwYWdlJyxcclxuICAgICAgICBzY3JlZW5SZWFkZXJDdXJyZW50TGFiZWw6IGBZb3UncmUgb24gcGFnZWBcclxuICAgIH07XHJcblxyXG4gICAgcHJpdmF0ZSBfY3VycmVudFJvd0luZGV4ID0gLTE7XHJcbiAgICBnZXQgY3VycmVudFJvd0luZGV4KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRSb3dJbmRleDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jdXJyZW50Um93ID0gdW5kZWZpbmVkO1xyXG4gICAgZ2V0IGN1cnJlbnRSb3coKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRSb3c7XHJcbiAgICB9XHJcblxyXG4gICAgQFZpZXdDaGlsZCgncGVyZmVjdFNjcm9sbGJhcicpIHBlcmZlY3RTY3JvbGxiYXI6IFBlcmZlY3RTY3JvbGxiYXJDb21wb25lbnQ7XHJcblxyXG4gICAgcHJpdmF0ZSBpc0NoZWNrQWxsID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICghdGhpcy5zZWxlY3Rpb25zIHx8ICF0aGlzLnNlbGVjdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5kYXRhIHx8ICF0aGlzLmRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0b3RhbCA9IDA7XHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25zLmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuZmluZChkID0+IGRbdGhpcy5pZEZpZWxkXSA9PT0gblt0aGlzLmlkRmllbGRdKSkge1xyXG4gICAgICAgICAgICAgICAgdG90YWwgKz0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aCA9PT0gdG90YWw7XHJcbiAgICB9XHJcblxyXG4gICAgc2NvcmxsYWJsZUJvZHlIZWlnaHQ6IG51bWJlcjtcclxuICAgIG1vdXNlRW50ZXJPblBhZ2VyID0gbnVsbDtcclxuICAgIG1vdXNlTGVhdmVPblBhZ2VyID0gbnVsbDtcclxuICAgIG1vdXNlV2hlZWxPblBhZ2VyID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhdGFTZXJ2aWNlOiBEYXRhVGFibGVTZXJ2aWNlLCBwcml2YXRlIGlkU2VydmljZTogSWRTZXJ2aWNlLCBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgICAgIHB1YmxpYyBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIHByaXZhdGUgbmdab25lOiBOZ1pvbmUpIHtcclxuXHJcbiAgICAgICAgdGhpcy5kYXRhU2VydmljZS5zZWxlY3RlZFJvdy5zdWJzY3JpYmUoKGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zaW5nbGVTZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRSb3dJbmRleCA9IGUucm93SW5kZXg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50Um93ID0gZS5yb3dEYXRhO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHRIZWFkZXIuaXNDaGVja0FsbCA9IHRoaXMuaXNDaGVja0FsbCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZGF0YVNlcnZpY2UudW5TZWxlY3RlZFJvdy5zdWJzY3JpYmUoKGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zaW5nbGVTZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRSb3cgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50Um93SW5kZXggPSAtMTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZHRIZWFkZXIuaXNDaGVja0FsbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwczogUGVyZmVjdFNjcm9sbGJhcjtcclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldEJvZHlIZWlnaHQoZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLnBzID0gdGhpcy5wZXJmZWN0U2Nyb2xsYmFyLmRpcmVjdGl2ZVJlZi5wcygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuaWQpIHtcclxuICAgICAgICAgICAgdGhpcy5pZCA9IGBkYXRhdGFibGVfJHt0aGlzLmlkU2VydmljZS5nZW5lcmF0ZSgpfWA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnBhZ2luYXRpb25PcHRpb25zLmlkID0gdGhpcy5wYWdpbmF0aW9uT3B0aW9ucy5pZCArIHRoaXMuaWQ7XHJcblxyXG4gICAgICAgIHRoaXMuY29weURhdGEgPSBkZWVwQ29weSh0aGlzLmRhdGEpO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuYmVmb3JlU29ydENvbHVtbikge1xyXG4gICAgICAgICAgICB0aGlzLmJlZm9yZVNvcnRDb2x1bW4gPSAoKSA9PiBvZih0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRCb2R5SGVpZ2h0KHJlZnJlc2ggPSB0cnVlKSB7XHJcbiAgICAgICAgbGV0IF90YWJsZWhlaWdodCA9IHRoaXMuaGVpZ2h0O1xyXG4gICAgICAgIGlmICh0aGlzLnNob3dGaWx0ZXJCYXIpIHtcclxuICAgICAgICAgICAgX3RhYmxlaGVpZ2h0ID0gdGhpcy5oZWlnaHQgLSA0NjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50YWJsZUhlaWdodCA9IF90YWJsZWhlaWdodDtcclxuXHJcbiAgICAgICAgbGV0IF9zY29ybGxhYmxlQm9keUhlaWdodCA9IDA7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd0hlYWRlcikge1xyXG4gICAgICAgICAgICBfc2NvcmxsYWJsZUJvZHlIZWlnaHQgPSB0aGlzLnRhYmxlSGVpZ2h0IC0gdGhpcy50YWJsZUhlYWRlci5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBhZ2luYXRpb24pIHtcclxuICAgICAgICAgICAgX3Njb3JsbGFibGVCb2R5SGVpZ2h0ID0gdGhpcy5zY29ybGxhYmxlQm9keUhlaWdodCAtIDUwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zY29ybGxhYmxlQm9keUhlaWdodCA9IF9zY29ybGxhYmxlQm9keUhlaWdodDtcclxuXHJcbiAgICAgICAgaWYgKHJlZnJlc2ggJiYgdGhpcy5jZCAmJiAhdGhpcy5jZFsnZGVzdHJveWVkJ10pIHtcclxuICAgICAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uQ2xlYXJTZWFyY2hWYWx1ZSgpIHtcclxuICAgICAgICB0aGlzLnNlYXJjaERhdGEudmFsdWUgPSAnJztcclxuICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB0aGlzLmNsZWFyU2VhcmNoVmFsdWUuZW1pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHRyYWNrQnlSb3dzID0gKGluZGV4OiBudW1iZXIsIHJvdzogYW55KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJvd1t0aGlzLmlkRmllbGRdO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgICAgICBpZiAoY2hhbmdlcy5oZWlnaHQgJiYgIWNoYW5nZXMuaGVpZ2h0LmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldEJvZHlIZWlnaHQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLnRvdGFsICYmICFjaGFuZ2VzLnRvdGFsLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2luYXRpb25PcHRpb25zLnRvdGFsSXRlbXMgPSBjaGFuZ2VzLnRvdGFsLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLnBhZ2VTaXplKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFnaW5hdGlvbk9wdGlvbnMuaXRlbXNQZXJQYWdlID0gY2hhbmdlcy5wYWdlU2l6ZS5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5wYWdlSW5kZXggJiYgIWNoYW5nZXMucGFnZUluZGV4LmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2luYXRpb25PcHRpb25zLmN1cnJlbnRQYWdlID0gY2hhbmdlcy5wYWdlSW5kZXguY3VycmVudFZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMuZGF0YSAmJiAhY2hhbmdlcy5kYXRhLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICBjb25zdCByb3dzID0gY2hhbmdlcy5kYXRhLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVDaGVja2JveFN0YXRlKHJvd3MpO1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2luYXRpb25PcHRpb25zID0geyAuLi50aGlzLnBhZ2luYXRpb25PcHRpb25zIH07XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVNlcnZpY2UubG9hZFN1Y2Nlc3MubmV4dChjaGFuZ2VzLmRhdGEuY3VycmVudFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xyXG4gICAgICAgIC8vIOaUr+aMgeWIl+e7hOS7tuWGmeWFpVxyXG4gICAgICAgIGlmICghdGhpcy5jb2x1bW5zKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbHVtbnNSZWYgJiYgdGhpcy5jb2x1bW5zUmVmLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5zID0gdGhpcy5jb2x1bW5zUmVmLm1hcChjb2wgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBjb2wud2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBjb2wudGl0bGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiBjb2wuZmllbGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduOiBjb2wuYWxpZ24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpeGVkOiBjb2wuZml4ZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogY29sLmNsYXNzTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGVGaWx0ZXI6IGNvbC5tdWx0aXBsZUZpbHRlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiBjb2wuZmlsdGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZWRpYTogY29sLm1lZGlhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3J0YWJsZTogY29sLnNvcnRhYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0OiBjb2wuZWRpdFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRhYmxlUGFnZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFibGVQYWdlci5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLm1vdXNlRW50ZXJPblBhZ2VyID0gKGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb3ZlcmZsb3dYID0gJ2F1dG8nO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC5jbGFzc05hbWUuaW5kZXhPZigncGctcGFnZWxpc3QnKSA+IC0xIHx8IGUudGFyZ2V0LmNsb3Nlc3QoJy5wZy1wYWdlbGlzdCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJmbG93WCA9IFwidW5zZXRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZ1Njcm9sbGJhci5uYXRpdmVFbGVtZW50LnNjcm9sbExlZnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wZ1Njcm9sbGJhci5uYXRpdmVFbGVtZW50LnN0eWxlLm92ZXJmbG93WCA9IG92ZXJmbG93WDtcclxuICAgICAgICAgICAgICAgIH0sIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMudGFibGVQYWdlci5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLm1vdXNlTGVhdmVPblBhZ2VyID0oZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGdTY3JvbGxiYXIubmF0aXZlRWxlbWVudC5zdHlsZS5vdmVyZmxvd1ggPSBcImhpZGRlblwiO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy50YWJsZVBhZ2VyLm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLm1vdXNlV2hlZWxPblBhZ2VyID0gKGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBib3ggPSB0aGlzLnRhYmxlUGFnZXIubmF0aXZlRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdyA9IHRoaXMucGdTY3JvbGxiYXIubmF0aXZlRWxlbWVudC5zY3JvbGxXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvdyA9IGJveC5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN3ID4gb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmlnaHQgPSBzdyAtIG93O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzbCA9IE1hdGguYWJzKHRoaXMucGdTY3JvbGxiYXIubmF0aXZlRWxlbWVudC5zY3JvbGxMZWZ0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNsIDwgcmlnaHQgJiYgZS5kZWx0YVkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBnU2Nyb2xsYmFyLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsTGVmdCA9IHNsICsgNTA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbCA+IDAgJiYgZS5kZWx0YVkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBnU2Nyb2xsYmFyLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsTGVmdCA9IHNsIC0gNTA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24uZm9yRWFjaChzdWIgPT4ge1xyXG4gICAgICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLnBhZ2VyID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGFibGVQYWdlciAmJiB0aGlzLnRhYmxlUGFnZXIubmF0aXZlRWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnRhYmxlUGFnZXIubmF0aXZlRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5tb3VzZUVudGVyT25QYWdlcik7XHJcbiAgICAgICAgICAgIHRoaXMudGFibGVQYWdlci5uYXRpdmVFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLm1vdXNlTGVhdmVPblBhZ2VyKTtcclxuICAgICAgICAgICAgdGhpcy50YWJsZVBhZ2VyLm5hdGl2ZUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLm1vdXNlV2hlZWxPblBhZ2VyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgLy8g6I635Y+W6KGo5qC85a655ZmoICDljbPooajmoLxcclxuICAgICAgICB0aGlzLmRhdGF0YWJsZUNvbnRhaW5lciA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZmFycmlzLWRhdGF0YWJsZScpO1xyXG4gICAgICAgIC8vIHRoaXMuaGVhZGVyVHIgPSB0aGlzLnRhYmxlSGVhZGVyLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgndHInKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVDaGVja2JveFN0YXRlKHJvd3M6IGFueVtdKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHVwZGF0ZUNoZWNrQWxsU3RhdHVzID0gKGYpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2hvd0hlYWRlciAmJiB0aGlzLmR0SGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmR0SGVhZGVyLmlzQ2hlY2tBbGwgPSBmO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHJvd3MgJiYgcm93cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuZHRCb2R5Ll9zZWxlY3Rpb25zKTtcclxuICAgICAgICAgICAgICAgIGlmIChrZXlzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb3VudCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWRzID0gcm93cy5tYXAoKHJvdzogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByb3dbdGhpcy5pZEZpZWxkXS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGtleXMuZm9yRWFjaChpZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHMuaW5kZXhPZihpZCkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVDaGVja0FsbFN0YXR1cyhpZHMubGVuZ3RoID09PSBjb3VudCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNoZWNrQWxsU3RhdHVzKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUNoZWNrQWxsU3RhdHVzKGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZUNoZWNrQWxsU3RhdHVzKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W6KGo5qC85a655Zmo55qE5L2N572uICDot53nprvlt6bovrnop4blj6PlkozkuIrovrnop4blj6PnmoTot53nprsgIOWmguaenOmhtemdouaciea7muWKqOadoSAg6ZyA6KaB5Yqg5LiK5rua5Yqo5p2h5rua5Yqo55qE5pWw5YC8XHJcbiAgICAgKi9cclxuICAgIGdldENvbnRhaW5lck9mZnNldCgpIHtcclxuICAgICAgICBjb25zdCByZWN0ID0gdGhpcy5kYXRhdGFibGVDb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0LFxyXG4gICAgICAgICAgICB0b3A6IHJlY3QudG9wICsgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AsXHJcbiAgICAgICAgICAgIHJpZ2h0OiByZWN0LnJpZ2h0LFxyXG4gICAgICAgICAgICBib3R0b206IHJlY3QuYm90dG9tLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqICDpvKDmoIfmjInkuIsgIOW8gOWni+iusOW9leaLluaLvee6v+eahOS9jee9riAg5ouW5ou957q/5Yiw6L6+5b2T5YmN6byg5qCH5L2N572uXHJcbiAgICAgKiBAcGFyYW0gZSDpvKDmoIflr7nosaFcclxuICAgICAqL1xyXG4gICAgYmVnaW5EcmFnKGUpIHtcclxuICAgICAgICB0aGlzLmRyYWdMaW5lWCA9IGUucGFnZVg7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog6byg5qCH56e75YqoIOenu+WKqOaLluaLvee6v+S9jee9ruWPmOWKqFxyXG4gICAgICogQHBhcmFtIGUg6byg5qCH5a+56LGhXHJcbiAgICAgKi9cclxuICAgIG1vdmVEcmFnKGUpIHtcclxuICAgICAgICAvLyDojrflj5booajmoLznmoTlt6bovrnot53nprtcclxuICAgICAgICBjb25zdCBjb250YWluZXJMZWZ0ID0gdGhpcy5nZXRDb250YWluZXJPZmZzZXQoKS5sZWZ0O1xyXG4gICAgICAgIC8vIOiuvue9ruaLluaLvee6v+eahOmrmOW6piAg5Y2z6I635Y+W6KGo5aS0K+ihqOWGheWuuSvooajlsL7nmoTpq5jluqYgIOatpOihqOagvOe7k+aehOWMheWQq+S6huWIhumhtSAg5Zug5q2k6KaB5Y675o6J5YiG6aG155qE6auY5bqmXHJcbiAgICAgICAgaWYgKHRoaXMudGFibGVQYWdlcikge1xyXG4gICAgICAgICAgICB0aGlzLmRyYWdMaW5lLm5hdGl2ZUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gdGhpcy5kYXRhdGFibGVDb250YWluZXIub2Zmc2V0SGVpZ2h0IC1cclxuICAgICAgICAgICAgICAgIHRoaXMudGFibGVQYWdlci5uYXRpdmVFbGVtZW50Lm9mZnNldEhlaWdodCArICdweCc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gY29uc3QgaGVhZGVySGVpZ2h0ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mYXJyaXMtdGFibGUtaGVhZGVyJyk7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IGJvZHlIZWlnaHQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignLnBzLWNvbnRlbnQnKTtcclxuICAgICAgICAgICAgdGhpcy5kcmFnTGluZS5uYXRpdmVFbGVtZW50LnN0eWxlLmhlaWdodCA9IHRoaXMuZGF0YXRhYmxlQ29udGFpbmVyLm9mZnNldEhlaWdodCArICdweCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOiuvue9ruaLluaLvee6v+eahOmrmOW6piDmi5bmi73nur/nm7jlr7nkuo7ooajmoLxyZWxhdGl2ZeWumuS9jeaYr2Fic29sdXRl77yM5Zug5q2k5pivMFxyXG4gICAgICAgIHRoaXMuZHJhZ0xpbmUubmF0aXZlRWxlbWVudC5zdHlsZS50b3AgPSAwICsgJ3B4JztcclxuICAgICAgICAvLyDpvKDmoIfnp7vliqjml7bvvIzmi5bmi73nur/nm7jlr7nkuo7ooajmoLznmoTkvY3nva5cclxuICAgICAgICB0aGlzLmRyYWdMaW5lLm5hdGl2ZUVsZW1lbnQuc3R5bGUubGVmdCA9IChlLnBhZ2VYIC0gY29udGFpbmVyTGVmdCkgKyAncHgnO1xyXG4gICAgICAgIC8vIOm8oOagh+enu+WKqCAg6K6+572u5ouW5ou957q/5oC75piv5Y+v6KeBXHJcbiAgICAgICAgdGhpcy5kcmFnTGluZS5uYXRpdmVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgfVxyXG4gICAgLy8g6YeN5paw6K6h566X6KGo5qC85a695bqmXHJcbiAgICAvKipcclxuICAgICAqIOm8oOagh+aKrOi1tyDph43mlrDorqHnrpfljZXlhYPmoLzlrr3luqZcclxuICAgICAqIOm8oOagh+WvueixoVxyXG4gICAgICovXHJcbiAgICBzdG9wRHJhZyhlLCBjb2x1bW4pIHtcclxuICAgICAgICB0aGlzLnJlc2l6ZUNvbHVtbihlLCBjb2x1bW4pO1xyXG4gICAgfVxyXG4gICAgcmVzaXplQ29sdW1uKGUsIGNvbHVtbikge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQ2hlY2tCb3goY29sdW1uLCAnZHQtY2hlY2tib3gtY2VsbCcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhZ0xpbmUubmF0aXZlRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOWBj+enu+mHj1xyXG4gICAgICAgIGNvbnN0IGRlbHRhID0gZS5wYWdlWCAtIHRoaXMuZHJhZ0xpbmVYO1xyXG4gICAgICAgIC8vIOaLluaLveWJjeWIl+WuvVxyXG4gICAgICAgIGNvbnN0IGNvbHVtbldpZHRoID0gY29sdW1uLm9mZnNldFdpZHRoO1xyXG4gICAgICAgIC8vIOaLluaLveWQjuWIl+WuvVxyXG4gICAgICAgIGxldCBuZXdDb2x1bW5XaWR0aCA9IGNvbHVtbldpZHRoICsgZGVsdGE7XHJcbiAgICAgICAgLy8g5pyA5bCP5a695bqmXHJcbiAgICAgICAgY29uc3QgbWluV2lkdGggPSBjb2x1bW4uc3R5bGUubWluV2lkdGggfHwgMzA7XHJcbiAgICAgICAgLy8g5paw5a695bqm5aSn5LqO5oiW562J5LqO5pyA5bCP5a695bqm5pe2XHJcbiAgICAgICAgbmV3Q29sdW1uV2lkdGggPSBuZXdDb2x1bW5XaWR0aCA+IG1pbldpZHRoID8gbmV3Q29sdW1uV2lkdGggOiBtaW5XaWR0aDtcclxuICAgICAgICAvLyDph43mlrDorr7nva7lrr3luqZcclxuICAgICAgICBsZXQgY29sSW5kZXggPSAtMTtcclxuICAgICAgICBjb25zdCBvdGhlcnNDb2wgPSBbXTtcclxuICAgICAgICBjb25zdCBjb2xzID0gdGhpcy50YWJsZUhlYWRlci5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoJyk7XHJcblxyXG4gICAgICAgIC8vIOeItuiKgueCueWuveW6plxyXG4gICAgICAgIGNvbnN0IHBhcmVudFdpZHRoID0gY29sdW1uLnBhcmVudEVsZW1lbnQub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgLy8g5Yik5pat5piv5LiN5piv5pyJY2hlY2tib3hcclxuICAgICAgICBjb25zdCBmaXJzdEVsZW1lbnQgPSBjb2x1bW4ucGFyZW50RWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZDtcclxuICAgICAgICBjb25zdCBjaGVja0JveFdpZHRoID0gdGhpcy5pc0NoZWNrQm94KGZpcnN0RWxlbWVudCwgJ2R0LWNoZWNrYm94LWNlbGwnKSA/IGZpcnN0RWxlbWVudC5vZmZzZXRXaWR0aCA6IDA7XHJcbiAgICAgICAgLy8g5YW25LuW5YiX5a695bqmXHJcbiAgICAgICAgbGV0IG90aGVyc1dpZHRoID0gcGFyZW50V2lkdGggLSBjb2x1bW5XaWR0aCAtIGNoZWNrQm94V2lkdGg7XHJcbiAgICAgICAgbGV0IG5ld090aGVyc1dpZHRoID0gcGFyZW50V2lkdGggLSBuZXdDb2x1bW5XaWR0aCAtIGNoZWNrQm94V2lkdGg7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2xzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChjb2xzW2ldID09PSBjb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgIGNvbEluZGV4ID0gaTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQ2hlY2tCb3goY29sc1tpXSwgJ2R0LWNoZWNrYm94LWNlbGwnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmF0ZSA9IGNvbHNbaV0ub2Zmc2V0V2lkdGggLyBvdGhlcnNXaWR0aDtcclxuICAgICAgICAgICAgICAgIGlmIChyYXRlID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGNvbHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IGNvbFdpZHRoID0gbmV3T3RoZXJzV2lkdGggKiByYXRlO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5ld090aGVyc1dpZHRoICogcmF0ZSA+IDE1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sV2lkdGggPSBuZXdPdGhlcnNXaWR0aCAqIHJhdGU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbFdpZHRoID0gMTU7XHJcbiAgICAgICAgICAgICAgICAgICAgb3RoZXJzV2lkdGggPSBvdGhlcnNXaWR0aCAtIGNvbFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld090aGVyc1dpZHRoID0gbmV3T3RoZXJzV2lkdGggLSBjb2xXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICBuZXdDb2x1bW5XaWR0aCA9IG5ld0NvbHVtbldpZHRoIC0gMTUgKyBuZXdPdGhlcnNXaWR0aCAqIHJhdGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvdGhlcnNDb2wucHVzaCh7IGNvbEluZGV4OiBpLCBjb2xXaWR0aCB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlc2l6ZUNvbEdyb3VwKHRoaXMuZHRIZWFkZXIuZWwubmF0aXZlRWxlbWVudCwgY29sSW5kZXgsIG5ld0NvbHVtbldpZHRoLCBvdGhlcnNDb2wpO1xyXG4gICAgICAgIHRoaXMucmVzaXplQ29sR3JvdXAodGhpcy5kdEJvZHkuZWwubmF0aXZlRWxlbWVudCwgY29sSW5kZXgsIG5ld0NvbHVtbldpZHRoLCBvdGhlcnNDb2wpO1xyXG4gICAgICAgIC8vIOiuoeeul+WuveW6puWujOavlSAg6K6+572u5ouW5ou957q/6ZqQ6JePXHJcbiAgICAgICAgdGhpcy5kcmFnTGluZS5uYXRpdmVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcbiAgICBpc0NoZWNrQm94KGVsZW1lbnRzLCBjTmFtZSkge1xyXG4gICAgICAgIHJldHVybiAhIWVsZW1lbnRzLmNsYXNzTmFtZS5tYXRjaChuZXcgUmVnRXhwKCcoXFxcXHN8XiknICsgY05hbWUgKyAnKFxcXFxzfCQpJykpO1xyXG4gICAgfVxyXG4gICAgcmVzaXplQ29sR3JvdXAodGFibGUsIHJlc2l6ZUNvbHVtbkluZGV4LCBuZXdDb2x1bW5XaWR0aCwgb3RoZXJzQ29sdW1uKSB7XHJcbiAgICAgICAgaWYgKHRhYmxlKSB7XHJcbiAgICAgICAgICAgIC8vIOatpOWkhOimgeinhuS4jeWQjOeahOihqOagvOe7k+aehOadpeehruWumiDmnKznu4Tku7bkuK0gIGhlYWRlcuWSjGJvZHnnu5PmnoTnm7jlkIxcclxuICAgICAgICAgICAgY29uc3QgY29sR3JvdXAgPSB0YWJsZS5jaGlsZE5vZGVzWzBdLmNoaWxkcmVuWzBdLm5vZGVOYW1lID09PSAnQ09MR1JPVVAnID9cclxuICAgICAgICAgICAgICAgIHRhYmxlLmNoaWxkTm9kZXNbMF0uY2hpbGRyZW5bMF0gOiBudWxsO1xyXG4gICAgICAgICAgICBpZiAoY29sR3JvdXApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IGNvbEdyb3VwLmNoaWxkcmVuW3Jlc2l6ZUNvbHVtbkluZGV4XTtcclxuICAgICAgICAgICAgICAgIGNvbC5zdHlsZS53aWR0aCA9IG5ld0NvbHVtbldpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3RoZXJzQ29sdW1uLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3RoZXJDb2wgPSBjb2xHcm91cC5jaGlsZHJlbltvdGhlcnNDb2x1bW5baV0uY29sSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvdGhlckNvbCAmJiBvdGhlcnNDb2x1bW5baV0uY29sV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJDb2wuc3R5bGUud2lkdGggPSBvdGhlcnNDb2x1bW5baV0uY29sV2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2Nyb2xsYWJsZSB0YWJsZXMgcmVxdWlyZSBhIGNvbGdyb3VwIHRvIHN1cHBvcnQgcmVzaXphYmxlIGNvbHVtbnMnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uU2Nyb2xsWChlOiBhbnkpIHtcclxuICAgICAgICAvLyDmqKrlkJHmu5rliqgg6Z2e5Zu65a6a6KGo5aS05rua5YqoXHJcbiAgICAgICAgY29uc3QgeCA9IGUuc3JjRWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gICAgICAgIHRoaXMudGFibGVIZWFkZXIubmF0aXZlRWxlbWVudC5zY3JvbGxUbyh4LCAwKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5rua5Yqo5p2h57q15ZCR5rua5YqoXHJcbiAgICAgKi9cclxuICAgIG9uU2Nyb2xsWShlOiBhbnkpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaGFzRml4ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB5ID0gZS5zcmNFbGVtZW50LnNjcm9sbFRvcDtcclxuICAgICAgICB0aGlzLmR0TGVmdEZpeGVkLm5hdGl2ZUVsZW1lbnQuc3R5bGUudG9wID0gLXkgKyAncHgnO1xyXG4gICAgICAgIHRoaXMuZHRSaWdodEZpeGVkLm5hdGl2ZUVsZW1lbnQuc3R5bGUudG9wID0gLXkgKyAncHgnO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBvblBhZ2VDaGFuZ2UocGFnZTogeyBwYWdlSW5kZXg6IG51bWJlciwgcGFnZVNpemU6IG51bWJlciB9KSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGFnZUluZGV4ICE9PSBwYWdlLnBhZ2VJbmRleCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2VJbmRleCA9IHBhZ2UucGFnZUluZGV4O1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2luYXRpb25PcHRpb25zLmN1cnJlbnRQYWdlID0gcGFnZS5wYWdlSW5kZXg7XHJcbiAgICAgICAgICAgIHRoaXMucGFnZUNoYW5nZWQuZW1pdCh7IHBhZ2VJbmZvOiBwYWdlLCBzZWFyY2g6IHRoaXMuc2VhcmNoRGF0YSwgc29ydE5hbWU6IHRoaXMuc29ydE5hbWUsIHNvcnRPcmRlcjogdGhpcy5zb3J0T3JkZXIgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uUGFnZVNpemVDaGFuZ2UocGFnZVNpemU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLnBhZ2VTaXplICE9PSBwYWdlU2l6ZSAmJiB0aGlzLnRvdGFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFnaW5hdGlvbk9wdGlvbnMuaXRlbXNQZXJQYWdlID0gcGFnZVNpemU7XHJcbiAgICAgICAgICAgIHRoaXMucGFnZVNpemUgPSBwYWdlU2l6ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsID0gdGhpcy50b3RhbDtcclxuICAgICAgICAgICAgbGV0IHBhZ2VMZW5ndGggPSBNYXRoLmZsb29yKHRvdGFsIC8gcGFnZVNpemUpO1xyXG4gICAgICAgICAgICBpZiAodG90YWwgJSBwYWdlU2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgIHBhZ2VMZW5ndGggKz0gMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHBhZ2VMZW5ndGggJiYgdGhpcy5wYWdlSW5kZXggPiBwYWdlTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2VJbmRleCA9IHBhZ2VMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2luYXRpb25PcHRpb25zLmN1cnJlbnRQYWdlID0gdGhpcy5wYWdlSW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucGFnZVNpemVDaGFuZ2VkLmVtaXQoe1xyXG4gICAgICAgICAgICAgICAgcGFnZUluZm86IHsgcGFnZUluZGV4OiB0aGlzLnBhZ2VJbmRleCwgcGFnZVNpemUgfSxcclxuICAgICAgICAgICAgICAgIHNlYXJjaDogdGhpcy5zZWFyY2hEYXRhLCBzb3J0TmFtZTogdGhpcy5zb3J0TmFtZSwgc29ydE9yZGVyOiB0aGlzLnNvcnRPcmRlclxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25TZWFyY2goJGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCRldmVudC5vcmlnaW5hbEV2ZW50KSB7XHJcbiAgICAgICAgICAgICRldmVudC5vcmlnaW5hbEV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNlYXJjaC5lbWl0KHRoaXMuc2VhcmNoRGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25DaGVja0FsbChzdGF0ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuZGF0YVNlcnZpY2Uuc2VsZWN0ZWRBbGwubmV4dChzdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5jaGVja0FsbC5lbWl0KHN0YXRlKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgb25TZWxlY3RlZFJvdyhlOiBhbnkpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkUm93LmVtaXQoeyBkYXRhOiBlLnJvd0RhdGEsIGluZGV4OiBlLnJvd0luZGV4IH0pO1xyXG4gICAgICAgIC8vIOWFvOWuuVxyXG4gICAgICAgIHRoaXMuc2VsZWN0Um93cy5lbWl0KHsgZGF0YTogZS5yb3dEYXRhLCBpbmRleDogZS5yb3dJbmRleCB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc2hhZG93ZWQtdmFyaWFibGVcclxuICAgIHJlc2l6ZShzaXplOiB7IHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyIH0pIHtcclxuICAgICAgICBpZiAoIXNpemUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy53aWR0aCAhPT0gc2l6ZS53aWR0aCB8fCB0aGlzLmhlaWdodCAhPT0gc2l6ZS5oZWlnaHQpIHtcclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHNpemUud2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Qm9keUhlaWdodCgpOyAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGxvYWREYXRhKGU6IHsgcGFnZVNpemU6IG51bWJlciwgdG90YWw6IG51bWJlciwgZGF0YTogYW55LCBwYWdlSW5kZXg6IG51bWJlciB9KSB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZS5kYXRhO1xyXG4gICAgICAgIGlmICh0aGlzLnBhZ2luYXRpb24pIHtcclxuICAgICAgICAgICAgY29uc3QgeyB0b3RhbCA9IDAsIHBhZ2VTaXplID0gMjAsIHBhZ2VJbmRleCA9IDEgfSA9IHsgLi4uZSB9O1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2luYXRpb25PcHRpb25zLnRvdGFsSXRlbXMgPSB0b3RhbDtcclxuICAgICAgICAgICAgdGhpcy5wYWdpbmF0aW9uT3B0aW9ucy5pdGVtc1BlclBhZ2UgPSBwYWdlU2l6ZTtcclxuICAgICAgICAgICAgdGhpcy5wYWdpbmF0aW9uT3B0aW9ucy5jdXJyZW50UGFnZSA9IHBhZ2VJbmRleDtcclxuICAgICAgICAgICAgdGhpcy5wYWdpbmF0aW9uT3B0aW9ucy5wYWdlTGlzdCA9IHRoaXMucGFnZUxpc3Q7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBhZ2luYXRpb25PcHRpb25zID0gey4uLnRoaXMucGFnaW5hdGlvbk9wdGlvbnN9O1xyXG4gICAgICAgICAgICB0aGlzLnRvdGFsID0gdG90YWw7XHJcbiAgICAgICAgICAgIHRoaXMucGFnZVNpemUgPSBwYWdlU2l6ZTtcclxuICAgICAgICAgICAgdGhpcy5wYWdlSW5kZXggPSBwYWdlSW5kZXg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ2hlY2tib3hTdGF0ZSh0aGlzLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qXHJcbiAgICAgKi9cclxuICAgIG9uQ2VsbENsaWNrKGUpIHtcclxuICAgICAgICB0aGlzLmNlbGxDbGljay5lbWl0KGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIOa3u+WKoOihjCAqL1xyXG4gICAgYWRkUm93cyhkYXRhSXRlbSkge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZGF0YS5jb25jYXQoZGF0YUl0ZW0pO1xyXG4gICAgfVxyXG4gICAgLyog5Yig6Zmk6KGMICovXHJcbiAgICByZW1vdmVSb3dzKCkge1xyXG4gICAgICAgIGNvbnN0IFNFTEVDVElPTlMgPSB0aGlzLnNlbGVjdGlvbnM7XHJcbiAgICAgICAgaWYgKHRoaXMuc2luZ2xlU2VsZWN0KSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhW2ldID09PSBTRUxFQ1RJT05TKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgU0VMRUNUSU9OUy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmRhdGEubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoU0VMRUNUSU9OU1tpXVt0aGlzLmlkRmllbGRdID09PSB0aGlzLmRhdGFbal1bdGhpcy5pZEZpZWxkXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuc3BsaWNlKGosIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjaGVja1JvdyhyaWQ6IGFueSwgZW1pdCA9IGZhbHNlKSB7XHJcbiAgICAgICAgbGV0IHJvd0luZGV4ID0gLTE7XHJcbiAgICAgICAgY29uc3Qgcm93RGF0YSA9IHRoaXMuZGF0YS5maW5kKChuLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChuW3RoaXMuaWRGaWVsZF0gPT0gcmlkKSB7XHJcbiAgICAgICAgICAgICAgICByb3dJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKCFyb3dEYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5zZWxlY3Rpb25zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IHsgW3JpZF06IHJvd0RhdGEgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICBbcmlkXTogcm93RGF0YSwgLi4udGhpcy5zZWxlY3Rpb25zLnJlZHVjZSgociwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJbblt0aGlzLmlkRmllbGRdXSA9IG47XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7XHJcbiAgICAgICAgICAgICAgICB9LCB7fSlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZGF0YVNlcnZpY2Uuc2VsZWN0ZWRSb3cubmV4dCh7XHJcbiAgICAgICAgICAgIHJvd0luZGV4LFxyXG4gICAgICAgICAgICByb3dEYXRhXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChlbWl0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHAgPSB7IGRhdGE6IHJvd0RhdGEsIGluZGV4OiByb3dJbmRleCB9O1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93LmVtaXQocCk7XHJcbiAgICAgICAgICAgIC8vIOWFvOWuuVxyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdFJvd3MuZW1pdChwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdW5DaGVja1JvdyhyaWQ6IGFueSwgZW1pdCA9IGZhbHNlKSB7XHJcbiAgICAgICAgbGV0IHJvd0luZGV4ID0gLTE7XHJcbiAgICAgICAgY29uc3Qgcm93RGF0YSA9IHRoaXMuZGF0YS5maW5kKChuLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChuW3RoaXMuaWRGaWVsZF0gPT0gcmlkKSB7XHJcbiAgICAgICAgICAgICAgICByb3dJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25zID0gdGhpcy5zZWxlY3Rpb25zLmZpbHRlcihuID0+IG5bdGhpcy5pZEZpZWxkXSAhPSByaWQpLnJlZHVjZSgociwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcltuW3RoaXMuaWRGaWVsZF1dID0gbjtcclxuICAgICAgICAgICAgICAgIHJldHVybiByO1xyXG4gICAgICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVNlcnZpY2UudW5TZWxlY3RlZFJvdy5uZXh0KHtcclxuICAgICAgICAgICAgICAgIHJvd0luZGV4LFxyXG4gICAgICAgICAgICAgICAgcm93RGF0YVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGVtaXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5TZWxlY3RSb3cuZW1pdCh7IGRhdGE6IHJvd0RhdGEsIGluZGV4OiByb3dJbmRleCB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjbGVhclNlbGVjdGlvbnMoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG9uS2V5ZG93bkV2ZW50KCRldmVudCkge1xyXG4gICAgICAgIGlmICghJGV2ZW50IHx8ICF0aGlzLnNpbmdsZVNlbGVjdCB8fCAhdGhpcy5kYXRhIHx8ICF0aGlzLmRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghWydBcnJvd0Rvd24nLCAnQXJyb3dVcCddLmluY2x1ZGVzKCRldmVudC5jb2RlKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IG5ld0lkeDtcclxuICAgICAgICBpZiAoJGV2ZW50LmNvZGUgPT09ICdBcnJvd0Rvd24nKSB7XHJcbiAgICAgICAgICAgIG5ld0lkeCA9IHRoaXMuX2N1cnJlbnRSb3dJbmRleCArIDE7XHJcbiAgICAgICAgICAgIGlmIChuZXdJZHggPj0gdGhpcy5kYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgbmV3SWR4ID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoJGV2ZW50LmNvZGUgPT09ICdBcnJvd1VwJykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudFJvd0luZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgbmV3SWR4ID0gdGhpcy5fY3VycmVudFJvd0luZGV4IC0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG5ld0lkeCA+PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZHRCb2R5LnNlbGVjdGVkUm93KCRldmVudCwgbmV3SWR4LCB0aGlzLmRhdGFbbmV3SWR4XSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgLy8gc2Nyb2xsIGludG9WaWV3XHJcbiAgICAgICAgICAgIGNvbnN0IHRyRG9tcyA9IHRoaXMuZHRCb2R5LmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnVpLXRhYmxlLXRib2R5IHRyJyk7XHJcbiAgICAgICAgICAgIGlmICh0ckRvbXMgJiYgdHJEb21zW3RoaXMuX2N1cnJlbnRSb3dJbmRleF0pIHtcclxuICAgICAgICAgICAgICAgIHRyRG9tc1t0aGlzLl9jdXJyZW50Um93SW5kZXhdLnNjcm9sbEludG9WaWV3KHsgYmxvY2s6ICduZWFyZXN0JyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG4iXX0=