/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Injector, NgZone, Renderer2, HostListener } from '@angular/core';
import { DatagridComponent } from '../../datagrid.component';
import { TR_PREFIX } from '../../types/constant';
var DatagridRowDblClickDirective = /** @class */ (function () {
    function DatagridRowDblClickDirective(el, injector, ngZone, render, dg) {
        this.el = el;
        this.injector = injector;
        this.ngZone = ngZone;
        this.render = render;
        this.dg = dg;
    }
    /**
     * @return {?}
     */
    DatagridRowDblClickDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    DatagridRowDblClickDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatagridRowDblClickDirective.prototype.dblclickRowEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var tr = event.target.closest('tr');
        /** @type {?} */
        var rowid = tr.id.replace(TR_PREFIX, '').replace('_fixedright', '').replace('_fixedleft', '');
        /** @type {?} */
        var rowIndex = tr.getAttribute('index');
        /** @type {?} */
        var rowData = this.dg.dfs.findRow(rowid);
        if (this.dg.disableRow) {
            if (this.dg.disableRow(rowData.data, rowData.index)) {
                event.stopPropagation();
                return false;
            }
        }
        if (this.dg.editable) {
            if (this.dg.editMode === 'row' && this.dg.clickToEdit) {
                this.dg.editRow(rowid);
            }
            else {
                this.dg.isSingleClick = false;
                this.dg.dblclickRow.emit({ rowData: rowData, id: rowid, index: rowIndex, grid: this.dg, dblclick: true });
            }
        }
        else {
            this.dg.dblclickRow.emit({ rowData: rowData, id: rowid, index: rowIndex, grid: this.dg, dblclick: true });
        }
        event.stopPropagation();
        event.preventDefault();
    };
    DatagridRowDblClickDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[row-dblclick]',
                },] }
    ];
    /** @nocollapse */
    DatagridRowDblClickDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Injector },
        { type: NgZone },
        { type: Renderer2 },
        { type: DatagridComponent }
    ]; };
    DatagridRowDblClickDirective.propDecorators = {
        dblclickRowEvent: [{ type: HostListener, args: ['dblclick', ['$event'],] }]
    };
    return DatagridRowDblClickDirective;
}());
export { DatagridRowDblClickDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.render;
    /** @type {?} */
    DatagridRowDblClickDirective.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtcm93LWRibGNsaWNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9ib2R5L2RhdGFncmlkLXJvdy1kYmxjbGljay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBVSxNQUFNLEVBQUUsU0FBUyxFQUFhLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwSCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHakQ7SUFNSSxzQ0FBb0IsRUFBYyxFQUFVLFFBQWtCLEVBQVUsTUFBYyxFQUFVLE1BQWlCLEVBQzlGLEVBQXFCO1FBRHBCLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVc7UUFDOUYsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7SUFFeEMsQ0FBQzs7OztJQUVELCtDQUFROzs7SUFBUjtJQUVBLENBQUM7Ozs7SUFFRCxrREFBVzs7O0lBQVg7SUFFQSxDQUFDOzs7OztJQUlELHVEQUFnQjs7OztJQURoQixVQUNpQixLQUFVOztZQUVqQixFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDOztZQUUvQixLQUFLLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUM7O1lBQ3pGLFFBQVEsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQzs7WUFDbkMsT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFFMUMsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRTtZQUNwQixJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNqRCxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQ3hCLE9BQU8sS0FBSyxDQUFDO2FBQ2hCO1NBQ0o7UUFFRCxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEtBQUssS0FBSyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFO2dCQUNuRCxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMxQjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sU0FBQSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUNwRztTQUNKO2FBQU07WUFDSCxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLFNBQUEsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUcsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7U0FDckc7UUFFRCxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzNCLENBQUM7O2dCQWpESixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjtpQkFDN0I7Ozs7Z0JBUG1CLFVBQVU7Z0JBQUUsUUFBUTtnQkFBVSxNQUFNO2dCQUFFLFNBQVM7Z0JBQzFELGlCQUFpQjs7O21DQXdCckIsWUFBWSxTQUFDLFVBQVUsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7SUE4QnhDLG1DQUFDO0NBQUEsQUFsREQsSUFrREM7U0EvQ1ksNEJBQTRCOzs7Ozs7SUFHekIsMENBQXNCOzs7OztJQUFFLGdEQUEwQjs7Ozs7SUFBRSw4Q0FBc0I7Ozs7O0lBQUUsOENBQXlCOztJQUNyRywwQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdG9yLCBPbkluaXQsIE5nWm9uZSwgUmVuZGVyZXIyLCBPbkRlc3Ryb3ksIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2RhdGFncmlkLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFRSX1BSRUZJWCB9IGZyb20gJy4uLy4uL3R5cGVzL2NvbnN0YW50JztcclxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW3Jvdy1kYmxjbGlja10nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0YWdyaWRSb3dEYmxDbGlja0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjIsXHJcbiAgICAgICAgICAgICAgICBwdWJsaWMgZGc6IERhdGFncmlkQ29tcG9uZW50KSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ2RibGNsaWNrJywgWyckZXZlbnQnXSlcclxuICAgIGRibGNsaWNrUm93RXZlbnQoZXZlbnQ6IGFueSkge1xyXG5cclxuICAgICAgICBjb25zdCB0ciA9IGV2ZW50LnRhcmdldC5jbG9zZXN0KCd0cicpO1xyXG5cclxuICAgICAgICBjb25zdCByb3dpZCA9IHRyLmlkLnJlcGxhY2UoVFJfUFJFRklYLCAnJykucmVwbGFjZSgnX2ZpeGVkcmlnaHQnLCAnJykucmVwbGFjZSgnX2ZpeGVkbGVmdCcsICcnKTtcclxuICAgICAgICBjb25zdCByb3dJbmRleCA9IHRyLmdldEF0dHJpYnV0ZSgnaW5kZXgnKTtcclxuICAgICAgICBjb25zdCByb3dEYXRhID0gdGhpcy5kZy5kZnMuZmluZFJvdyhyb3dpZCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRnLmRpc2FibGVSb3cpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGcuZGlzYWJsZVJvdyhyb3dEYXRhLmRhdGEsIHJvd0RhdGEuaW5kZXgpKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZGcuZWRpdGFibGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGcuZWRpdE1vZGUgPT09ICdyb3cnICYmIHRoaXMuZGcuY2xpY2tUb0VkaXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGcuZWRpdFJvdyhyb3dpZCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRnLmlzU2luZ2xlQ2xpY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGcuZGJsY2xpY2tSb3cuZW1pdCh7IHJvd0RhdGEsIGlkOiByb3dpZCwgaW5kZXg6IHJvd0luZGV4LCBncmlkOiB0aGlzLmRnLCBkYmxjbGljazogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGcuZGJsY2xpY2tSb3cuZW1pdCh7IHJvd0RhdGEsIGlkOiByb3dpZCwgaW5kZXg6IHJvd0luZGV4LCBncmlkOiB0aGlzLmRnLCAgZGJsY2xpY2s6IHRydWUgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==