/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { switchMap, takeUntil } from 'rxjs/operators';
/*
* @Author: 疯狂秀才(lucas huang)
 * @Date: 2018-12-18 18:44:13
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-29 08:41:39
 * @Company: Inspur
 * @Version: v0.0.1
 */
import { Component, Input, TemplateRef, Directive, ContentChildren, QueryList, HostListener, Output, EventEmitter, ElementRef, Injector, ViewChild, Optional, Self, NgZone, Renderer2, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, HostBinding } from '@angular/core';
import { FarrisTemplateDirective, CommonUtils, IdService, FarrisComponentInstanceService, DebugService } from '@farris/ui-common';
import { ResizeService } from '@farris/ui-common/events';
import { ColumnFormatService } from '@farris/ui-common/column';
import { InputGroupComponent } from '@farris/ui-input-group';
import { LocaleService } from '@farris/ui-locale';
import { PerfectScrollbarComponent } from '@farris/ui-perfect-scrollbar';
import { of, BehaviorSubject, Subject, timer } from 'rxjs';
import { map } from 'rxjs/operators';
import { extend, remove } from 'lodash-es';
import ResizeObserver from 'resize-observer-polyfill';
import { VirtualizedLoaderService } from './virtualized-loader.service';
import { TreetableService } from './treetable.service';
import { SearchHandle } from './search.handle';
import { TTHotkeys } from './hotkeys';
import { FarrisContextMenuDirective } from '@farris/ui-context-menu';
/**
 * 单元格点事件参数
 * @record
 */
export function CellClickParam() { }
if (false) {
    /** @type {?} */
    CellClickParam.prototype.event;
    /** @type {?} */
    CellClickParam.prototype.col;
    /** @type {?} */
    CellClickParam.prototype.node;
}
/**
 * 节点钩选事件
 * @record
 */
export function NodeCheckedParam() { }
if (false) {
    /** @type {?|undefined} */
    NodeCheckedParam.prototype.originalEvent;
    /** @type {?} */
    NodeCheckedParam.prototype.node;
    /** @type {?|undefined} */
    NodeCheckedParam.prototype.nodes;
    /** @type {?} */
    NodeCheckedParam.prototype.instance;
}
/**
 * @record
 */
export function NodeSelectedParam() { }
if (false) {
    /** @type {?|undefined} */
    NodeSelectedParam.prototype.originalEvent;
    /** @type {?} */
    NodeSelectedParam.prototype.node;
    /** @type {?|undefined} */
    NodeSelectedParam.prototype.type;
    /** @type {?|undefined} */
    NodeSelectedParam.prototype.index;
    /** @type {?|undefined} */
    NodeSelectedParam.prototype.parents;
    /** @type {?} */
    NodeSelectedParam.prototype.instance;
}
/** @type {?} */
var NODES_PAGER_COLUMN_FIELD = '__nodespagerbar__';
var TreeTableColumnDirective = /** @class */ (function () {
    function TreeTableColumnDirective() {
    }
    TreeTableColumnDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'tt-column, [tt-column]'
                },] }
    ];
    TreeTableColumnDirective.propDecorators = {
        field: [{ type: Input }],
        title: [{ type: Input }],
        width: [{ type: Input }],
        hAlign: [{ type: Input }],
        align: [{ type: Input }],
        formatter: [{ type: Input }]
    };
    return TreeTableColumnDirective;
}());
export { TreeTableColumnDirective };
if (false) {
    /** @type {?} */
    TreeTableColumnDirective.prototype.field;
    /** @type {?} */
    TreeTableColumnDirective.prototype.title;
    /** @type {?} */
    TreeTableColumnDirective.prototype.width;
    /** @type {?} */
    TreeTableColumnDirective.prototype.hAlign;
    /** @type {?} */
    TreeTableColumnDirective.prototype.align;
    /** @type {?} */
    TreeTableColumnDirective.prototype.formatter;
}
var TreeTableComponent = /** @class */ (function () {
    function TreeTableComponent(ttService, el, resizeSer, renderer, utils, colFormatSer, shortcuts, cdRef, ngZone, injector) {
        var _this = this;
        this.ttService = ttService;
        this.el = el;
        this.resizeSer = resizeSer;
        this.renderer = renderer;
        this.utils = utils;
        this.colFormatSer = colFormatSer;
        this.shortcuts = shortcuts;
        this.cdRef = cdRef;
        this.ngZone = ngZone;
        this.injector = injector;
        this.id = '';
        /**
         * 宽度
         */
        this.width = 500;
        /**
         * 高度
         */
        this.height = 400;
        this.showFilterBar = false;
        /**
         * 显示查询字段
         */
        this.showSearchField = true;
        this.headerHeight = 35;
        /**
         * 表头折行
         */
        this.headerWrap = false;
        /**
         * 行高
         */
        this.rowHeight = 29;
        /**
         * 列信息
         */
        this.columns = [];
        this._groupColumns = [];
        /**
         * 启用多表头
         */
        this.useGroupHeader = false;
        this.fitColumns = true;
        this.autoFitColumns = false;
        this.allColumnsTitle = '所有列';
        /**
         * 显示连接线，默认为 false
         */
        this.showLines = false;
        this.showLinesOnHover = false;
        /**
         * 是否启用多选。 默认为单选
         */
        this.multiSelect = false;
        this.singleSelect = true;
        /**
         * 启用多选后，是否显示checkbox
         */
        this.showCheckbox = false;
        /**
         * 显示边框线
         */
        this.showBorder = true;
        this.showCheckAll = true;
        this.showHeader = true;
        /**
         * 启用斑马线
         */
        this.striped = false;
        /**
         * 启用鼠标划过效果
         */
        this.hovered = true;
        /**
         * 禁用。 禁用时不允许选中行
         */
        this.disabled = false;
        /**
         * 数据加载方式; 默认值 为 all
         * - all: 全部加载
         * - async: 分层加载
         */
        this.loadDataType = 'all';
        /**
         * 固定表头
         */
        this.fixedHeader = false;
        /**
         * 当多选时，选中当前行并钩选
         */
        this.checkOnSelect = false;
        /**
         * 当多选时，钩选并选中当前行
         */
        this.selectOnCheck = false;
        /**
         * 启用多选时，此属性为true 时，仅当前行选中
         */
        this.onlySelectSelf = false;
        /**
         * 启用列宽调整
         */
        this.resizableColumns = true;
        /**
         * 设置为true时自适应父容的尺寸
         */
        this.fit = false;
        /**
         * 启用级联选中功能
         */
        this.cascadeCheck = true;
        /**
         * 向下级联选中
         */
        this.cascadeDown = true;
        /**
         * 向上级联选中
         */
        this.cascadeUp = true;
        /**
         * 空数据时，显示的提示文本
         */
        this.emptyMessage = '暂无数据';
        /**
         * 缩进间距，默认为 16px
         */
        this.indentSpacing = 16;
        /**
         * 单击行选中后，在次点击不会被取消选中状态;
         */
        this.keepSelect = true;
        /**
         * 虚拟加载
         */
        this.virtualized = false;
        /**
         * 仅允许选择叶子节点
         * - default: 应用服务器端传回的设置，如果服务器端没有设置，则与 no 保持一至；
         * - yes: 如果客户端设置为 `yes`, 服务器端的设置失效；
         * - no: 允许选择所有节点；服务器端设置失效
         */
        this.onlySelectLeaf = 'default';
        /**
         * 显示图标
         */
        this.showIcon = false;
        /**
         * 叶子节点图标
         */
        this.leafIcon = 'file';
        /**
         * 节点展开图标
         */
        this.expandIcon = 'folder-open';
        /**
         * 节点折叠图标
         */
        this.collapseIcon = 'folder';
        this.foldIcon = 'treetable-toggler';
        this.unfoldIcon = 'extanded treetable-toggler';
        /**
         * 启用节点图标从数据中获取。 默认为 false
         */
        this.useIconFromData = false;
        /**
         * 当数据源中icon未设置时使用内置ICON. 默认为 true
         */
        this.whenDataIconEmptyUseDefault = true;
        /**
         * 从数据源字段中获取图标
         */
        this.iconField = '';
        /**
         * 启用远端排序
         */
        this.remoteSort = true;
        /**
         * 启用前端文本查找
         */
        this.enableFindText = false;
        // 树列表默认展开层级。 -1： 不展开； 0： 全部展开； >0:  展开到指定级数；
        this.expandLevel = -1;
        this.selectValue = '';
        this.selectValueChange = new EventEmitter();
        /**
         * 启用双击展开节点
         */
        this.dblClickExpand = true;
        /**
         * 选中节点ID数组
         */
        this.selectValues = [];
        this.selectValuesChange = new EventEmitter();
        /**
         * 是否禁止折行，默认不折行
         */
        this.nowrap = true;
        this.checkValues = [];
        this.checkValuesChange = new EventEmitter();
        /**
         * 分页信息
         */
        this.pagination = false;
        /**
         * 分页加载子节点数据
         */
        this.paginationForChildren = false;
        /**
         * 分页条显示模式， default, simple
         */
        this.pagerViewMode = 'default';
        /**
         * 启用服务器端分页
         */
        this.pagerOnServer = true;
        /**
         * 每页记录数
         */
        this.pageList = [10, 20, 30, 50, 100];
        /**
         * 当前页码
         */
        this.pageIndex = 1;
        /**
         * 每页记录数
         */
        this.pageSize = 20;
        /**
         * 分页区高度
         */
        this.pagerHeight = 56;
        /**
         * 显示每页记录数
         */
        this.showPageList = false;
        /**
         * 显示分页信息
         */
        this.showPageInfo = true;
        /**
         * 显示页码
         */
        this.showPageNumber = true;
        /**
         * 显示页码最大数量
         */
        this.pagerLabelSize = 7;
        /**
         * 显示页码输入框
         */
        this.showGotoInput = false;
        /**
         * 子节点分页是否显示总记录数，默认 false
         */
        this.showTotalForChildren = false;
        /**
         * 总记录数
         */
        this.total = 0;
        this.enableContextMenu = false;
        this.contextMenuItems = [];
        this.pageSizeChanged = new EventEmitter();
        this.pageChanged = new EventEmitter();
        /**
         * 排序后
         */
        this.columnSorted = new EventEmitter();
        /**
         * 选中事件
         */
        this.nodeSelected = new EventEmitter();
        /**
         * 取消选中事件
         */
        this.nodeUnSelect = new EventEmitter();
        /**
         * 钩选
         */
        this.nodeChecked = new EventEmitter();
        /**
         * 取消钩选
         */
        this.nodeUnChecked = new EventEmitter();
        /**
         * 全选事件
         */
        this.checkAll = new EventEmitter();
        /**
         * 取消全选
         */
        this.unCheckAll = new EventEmitter();
        /**
         * 查询
         */
        this.search = new EventEmitter();
        this.dblClick = new EventEmitter();
        this.loadedData = new EventEmitter();
        this.expand = new EventEmitter();
        this.collapse = new EventEmitter();
        this.expandAllNodes = new EventEmitter();
        this.collapseAllNodes = new EventEmitter();
        this.appendNew = new EventEmitter();
        this.removed = new EventEmitter();
        this.updated = new EventEmitter();
        this.clearSearchValue = new EventEmitter();
        this.cellClick = new EventEmitter();
        this.childsPageChanged = new EventEmitter();
        this.searchValueChange = new EventEmitter();
        this.loadedTimer = 100;
        this._data = [];
        // loaddata 时 先设置为空数组，
        this.isLoadNewDataSetEmpty = false;
        /**
         * 根据内容自动宽度，默认 false;
         * 此属性开启后，自动列宽失效
         */
        this.autoWidth = false;
        /**
         * 选中项集合
         */
        this._selections = [];
        /**
         * 选中项索引
         */
        this.selectRowIndex = -1;
        /**
         * 选中当前行
         */
        this._selectedRow = null;
        /**
         * 钩选的记录集合
         */
        this._checkeds = [];
        this.searchData = { field: '*', value: '' };
        this.searchButtonText = '<i class="f-icon f-icon-search"></i>';
        /**
         * 显示查询工具条
         */
        this.showFindInput = false;
        this.isDataChanged = false;
        this.topHideHeight = 0;
        this.bottomHideHeight = 0;
        this.state = {
            searchRowNodes: null,
            searched: false,
            rowNodes: [],
            scrollY: 0,
            scrollX: 0
        };
        /**
         * 待查询的文本
         */
        this.findValue = '';
        /**
         * 结果总数
         */
        this.findCount = 0;
        /**
         * 当前索引
         */
        this.findCurrent = 0;
        /**
         * 存储文本查询结果
         */
        this.findResult = [];
        this.ro = null;
        this.findKeysHandler = null;
        this._hotKeys = null;
        this.styleSheetId = 'treetable-style-';
        // 调整模板，此属性仅为帮助中的树组件
        this.fast = false;
        this.paginationOptions = {
            id: 'Farris-TreeTable-Pagination_',
            itemsPerPage: this.pageSize,
            currentPage: this.pageIndex,
            pageList: this.pageList,
            totalItems: this.total,
            remote: this.pagerOnServer
        };
        this.selectNodeChangedSubject = new BehaviorSubject(null);
        this._UUID = '';
        // 是否有固定列
        this.fixedColumns = false;
        this.destroy$ = new Subject();
        this.farrisInstances = null;
        this.difference = (/**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
        function (first, second) { return first.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return !second.some((/**
         * @param {?} secondItem
         * @return {?}
         */
        function (secondItem) { return secondItem == item; })); })); });
        this.debugSer = null;
        this.onBeforeShowContextMenu = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            // row_1_fixedleft  row_1  row_1_fixedright
            var contextMenuDom = e.contextMenuDom, event = e.event;
            /** @type {?} */
            var rowID = event.target.id;
            if (contextMenuDom) {
                rowID = _this.trId2DataId(contextMenuDom);
                /** @type {?} */
                var rowNode_1 = _this.findRowNode(rowID);
                /** @type {?} */
                var go$ = of({ show: true });
                if (_this.beforeShowContextMenu) {
                    go$ = _this.beforeShowContextMenu({ data: rowNode_1, tree: _this });
                }
                return go$.pipe(switchMap((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) {
                    if (r.show) {
                        if (r.menus) {
                            _this.contextMenuItems = r.menus;
                            _this.detectChanges();
                        }
                        /** @type {?} */
                        var viewportW = contextMenuDom.closest('.farris-treetable').offsetWidth;
                        /** @type {?} */
                        var targetW = contextMenuDom.offsetWidth;
                        /** @type {?} */
                        var focusTargetWidth = viewportW > targetW ? targetW : viewportW;
                        return of({ show: true, data: { data: rowNode_1, tree: _this }, focusTargetWidth: focusTargetWidth });
                    }
                    else {
                        return of({ show: false });
                    }
                })));
            }
            return of({ show: false });
        });
        this.searchHandle = new SearchHandle(this);
        this.scrollLoader = new VirtualizedLoaderService(this);
        if (this.injector) {
            this._hotKeys = this.injector.get(TTHotkeys, null);
            this.localeService = this.injector.get(LocaleService, null);
            this.idService = this.injector.get(IdService, null);
            this.farrisInstances = this.injector.get(FarrisComponentInstanceService, null);
        }
        if (this.idService) {
            this._UUID = this.idService.uuid();
            this.styleSheetId += this.idService.uuid();
        }
        else {
            this._UUID = ('' + Math.random()).slice(2);
            this.styleSheetId += ('' + Math.random()).slice(2);
        }
        this.ttService = new TreetableService();
        this.debugSer = this.injector.get(DebugService, null);
        if (this.debugSer) {
            this.debugSer.useDebugMode();
        }
    }
    Object.defineProperty(TreeTableComponent.prototype, "groupColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._groupColumns;
        },
        set: /**
         * @param {?} cols
         * @return {?}
         */
        function (cols) {
            this._groupColumns = cols || [];
            /** @type {?} */
            var _columns = this.ttService.checkColumnsForGroupHeader(cols.map((/**
             * @param {?} cs
             * @return {?}
             */
            function (cs) { return tslib_1.__spread(cs); })), this).columns;
            this.columns = _columns.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field; }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeTableComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._data = val;
            this.updateSerializedValue();
            if (!this.isLoadNewDataSetEmpty) {
                this.initNodeStatus();
            }
            // autowidth 时，表头宽度依据内容宽度作同步处理
            this.setNewColumnsWidth();
            this.loadDataSuccess();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeTableComponent.prototype, "allCheckbox", {
        set: /**
         * @param {?} content
         * @return {?}
         */
        function (content) {
            this.headerCheckboxCmp = content;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeTableComponent.prototype, "selections", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selections;
        },
        set: /**
         * @param {?} vals
         * @return {?}
         */
        function (vals) {
            var _this = this;
            if (vals && vals.length) {
                // 过滤掉数据源中不存在节点
                this._selections = vals.filter((/**
                 * @param {?} tn
                 * @return {?}
                 */
                function (tn) { return tn && _this.findRowNode(tn.id); }));
                /** @type {?} */
                var ids_1 = this._selections.map((/**
                 * @param {?} tn
                 * @return {?}
                 */
                function (tn) { return tn.id; }));
                if (ids_1.length !== this.selectValues.length ||
                    (ids_1.length === this.selectValues.length && this.difference(ids_1, this.selectValues).length)) {
                    this.selectValues = ids_1;
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.selectValuesChange.emit(ids_1);
                    }));
                }
            }
            else {
                this._selections = [];
                this.selectValues = [];
                this.selectValuesChange.emit([]);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeTableComponent.prototype, "selectedRow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedRow;
        },
        set: /**
         * @param {?} treeNode
         * @return {?}
         */
        function (treeNode) {
            this._selectedRow = treeNode;
            if (treeNode) {
                if (this.selectValue !== treeNode.id) {
                    this.selectValue = treeNode.id;
                    this.selectValueChange.emit(treeNode.id);
                }
            }
            else {
                this.selectValue = null;
                this.selectValueChange.emit(null);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeTableComponent.prototype, "checkeds", {
        get: /**
         * @return {?}
         */
        function () {
            return this._checkeds;
        },
        set: /**
         * @param {?} treeNodes
         * @return {?}
         */
        function (treeNodes) {
            var _this = this;
            if (treeNodes && treeNodes.length) {
                this._checkeds = treeNodes.filter((/**
                 * @param {?} tn
                 * @return {?}
                 */
                function (tn) { return _this.findRowNode(tn.id); }));
                /** @type {?} */
                var ids_2 = this._checkeds.map((/**
                 * @param {?} tn
                 * @return {?}
                 */
                function (tn) { return tn.id; }));
                this.checkValues = this.checkValues || [];
                if (ids_2.length !== this.checkValues.length || (ids_2.length === this.checkValues.length && this.difference(ids_2, this.checkValues).length)) {
                    this.checkValues = ids_2;
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.checkValuesChange.emit(ids_2);
                    }));
                }
            }
            else {
                this._checkeds = [];
                this.checkValues = [];
                this.checkValuesChange.emit([]);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} msg
     * @param {?=} type
     * @return {?}
     */
    TreeTableComponent.prototype.writeConsole = /**
     * @param {?} msg
     * @param {?=} type
     * @return {?}
     */
    function (msg, type) {
        if (type === void 0) { type = 'warn'; }
        if (this.debugSer) {
            this.debugSer[type](msg);
        }
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.checkOptons = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // 启用数据折行后，虚拟渲染功能失效
        if (!this.nowrap) {
            this.virtualized = false;
        }
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.reSetSize();
            _this.setScorllBodyHeight();
        }));
        if (this.multiSelect) {
            this.singleSelect = false;
        }
        if (this.singleSelect && this.showCheckbox) {
            this.checkOnSelect = true;
            this.selectOnCheck = true;
        }
        if (!this.beforeSortColumn) {
            this.beforeSortColumn = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
        if (this.fit) {
            this.renderer.addClass(this.el.nativeElement, 'f-utils-fill-flex-column');
            /** @type {?} */
            var parentEl = this.el.nativeElement.parentElement || this.el.nativeElement.parentNode;
            if (parentEl) {
                // this.renderer.addClass(parentEl, 'f-utils-fill');
                this.renderer.setStyle(parentEl, 'overflow', 'hidden');
            }
        }
        if (!this.beforeClickNode) {
            this.beforeClickNode = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
        if (!this.beforeCheckAll) {
            this.beforeCheckAll = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
        if (!this.beforeUnCheckAll) {
            this.beforeUnCheckAll = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
        if (this.autoWidth) {
            this.fitColumns = false;
            this.resizableColumns = false;
        }
        if (!this.disabledRow) {
            this.disabledRow = (/**
             * @return {?}
             */
            function () { return false; });
        }
    };
    /**
     * @return {?}
     */
    TreeTableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.id = 'Treetable-' + this._UUID;
        // 创建 stylesheet
        this.styleElement = this.utils.createStyleSheet(this.styleSheetId);
        this.checkColumnOption();
        this.checkOptons();
        if (this.ngZone) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                if (_this.el.nativeElement.parentElement) {
                    _this.ro = new ResizeObserver((/**
                     * @param {?} entries
                     * @param {?} observer
                     * @return {?}
                     */
                    function (entries, observer) {
                        if (entries && entries[0]) {
                            var _a = entries[0].contentRect, width = _a.width, height = _a.height;
                            /** @type {?} */
                            var target = entries[0].target;
                            if (_this.fit && target['offsetParent']) {
                                _this.resize({ width: width, height: _this.showBorder ? height - 2 : height });
                            }
                        }
                    }));
                    _this.ro.observe(_this.el.nativeElement.parentElement);
                }
            }));
        }
        this.paginationOptions = this.initPaginationOptions();
    };
    /**
     * @return {?}
     */
    TreeTableComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.ro) {
            if (this.el.nativeElement.parentElement) {
                this.ro.unobserve(this.el.nativeElement.parentElement);
            }
            this.ro.disconnect();
            this.ro = null;
        }
        if (this.findKeysHandler) {
            this.findKeysHandler.unsubscribe();
        }
        this.utils.removeStyleSheet(this.styleSheetId);
        this.styleElement = null;
        if (this.farrisInstances) {
            this.farrisInstances.destroy(this.el.nativeElement);
        }
        this.ttService = null;
        this.destroy$.next();
        this.destroy$.complete();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TreeTableComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.data && !changes.data.isFirstChange()) {
            this.isDataChanged = changes.data.currentValue !== changes.data.previousValue;
        }
        if (changes.multiSelect && !changes.multiSelect.isFirstChange()) {
            this.singleSelect = !changes.multiSelect.currentValue;
            if (this.singleSelect && this.showCheckbox) {
                this.selectOnCheck = true;
                this.checkOnSelect = true;
            }
        }
        if (changes.disabled && !changes.disabled.isFirstChange()) {
            this.hovered = !changes.disabled.currentValue;
        }
        if (changes.enableFindText && !changes.enableFindText.isFirstChange()) {
            this.setFindText(changes.enableFindText.currentValue);
        }
        if (changes.selectValue && !changes.selectValue.isFirstChange()) {
            this.selectNode(changes.selectValue.currentValue);
        }
        if (changes.selectValues && !changes.selectValues.isFirstChange()) {
            this.selectNodes(changes.selectValues.currentValue);
        }
        if (changes.checkValues && !changes.checkValues.isFirstChange()) {
            this.checkedNodes(changes.checkValues.currentValue);
        }
        if (changes.pageIndex !== undefined && !changes.pageIndex.isFirstChange()) {
            this.paginationOptions = Object.assign(this.paginationOptions, {
                currentPage: this.pageIndex
            });
        }
        if (changes.pageSize !== undefined && !changes.pageSize.isFirstChange()) {
            this.paginationOptions = Object.assign(this.paginationOptions, {
                itemsPerPage: this.pageSize
            });
        }
        if (changes.pageList !== undefined && !changes.pageList.isFirstChange()) {
            this.paginationOptions = Object.assign(this.paginationOptions, {
                pageList: this.pageList
            });
        }
        if (changes.total !== undefined && !changes.total.isFirstChange()) {
            this.paginationOptions = Object.assign(this.paginationOptions, {
                totalItems: this.total
            });
        }
        if (changes.fitColumns && !changes.fitColumns.isFirstChange()) {
            this.setTableWidth(this.allColumnsWidth());
        }
        if (changes.columns && !changes.columns.isFirstChange()) {
            this.checkColumnOption();
        }
        if (changes.showBorder && !changes.showBorder.isFirstChange()) {
            // this.reSetSize();
        }
    };
    /**
     * @return {?}
     */
    TreeTableComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        // if (this.isDataChanged) {
        //     this.loadedData.emit();
        //     this.isDataChanged = false;
        // } else {
        //     this.ngZone.runOutsideAngular(() => {
        //         if (this.psRef) {
        //             this.psRef.directiveRef.update();
        //         }
        //     });
        // }
    };
    /**
     * @return {?}
     */
    TreeTableComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.templates.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            switch (item.getType()) {
                case 'header':
                    _this.headerTemplate = item.template;
                    break;
                case 'body':
                    _this.bodyTemplate = item.template;
                    break;
            }
        }));
        if (this.columnsRef.length) {
            this.columns = this.ttc2columns(this.columnsRef);
            this.columnsRef.changes.subscribe((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.columns = _this.ttc2columns(d);
            }));
        }
    };
    /**
     * @return {?}
     */
    TreeTableComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.containerElement = this.el.nativeElement.querySelector('.farris-treetable');
        this.registerShortcuts();
        // autowidth 时，表头宽度依据内容宽度作同步处理
        this.setNewColumnsWidth();
        this.setRightFixedColumnShadow();
        if (this.el && this.farrisInstances) {
            this.farrisInstances.add(this.el.nativeElement, this);
        }
        if (this.bodyTemplate) {
            this.utils.appendCssRules(["#" + this.id + " .farris-treetable .farris-treetable-tbody td {padding: .25rem 0.75rem;}"], this.styleElement.sheet);
        }
        // 兼容旧版设计器        
        if (this.fit && this.el.nativeElement.parentElement.nodeName !== 'DIV') {
            if (this.el.nativeElement.parentElement.nodeName === 'APP-DG-TREE-GRID') {
                /** @type {?} */
                var div = this.el.nativeElement.parentElement.closest('div');
                if (div) {
                    div.style.overflow = 'hidden';
                }
            }
        }
        this.loadDataSuccess();
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.loadDataSuccess = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        timer(this.loadedTimer).pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        function () {
            if (_this.psRef && _this.psRef.directiveRef) {
                _this.psRef.directiveRef.update();
            }
            _this.loadedData.emit();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.setNewColumnsWidth = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.autoWidth) {
            return;
        }
        /** @type {?} */
        var newColWidth = {};
        /** @type {?} */
        var headerCells = [];
        /** @type {?} */
        var firstRowCells = [];
        // let colgroups = [];
        if (this.showHeader && this.headerTable) {
            headerCells = Array.from(this.headerTable.nativeElement.querySelectorAll('th'));
        }
        if (this.serializedValue && this.serializedValue.length && this.bodyTable) {
            firstRowCells = Array.from(this.bodyTable.nativeElement.querySelector('tr').querySelectorAll('td'));
            // colgroups = this.bodyTable.nativeElement.querySelector('colgroup').querySelectorAll('col');
        }
        firstRowCells.forEach((/**
         * @param {?} td
         * @param {?} index
         * @return {?}
         */
        function (td, index) {
            /** @type {?} */
            var fieldName = td.getAttribute('field');
            /** @type {?} */
            var colWidth = td.getBoundingClientRect().width.toFixed(2);
            newColWidth[fieldName] = colWidth;
            /** @type {?} */
            var col = _this.columns.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field === fieldName; }));
            if (col && col.width !== undefined) {
                colWidth = colWidth > col.width ? colWidth : col.width;
            }
            td.style.minWidth = colWidth + 'px';
            headerCells[index].style.width = colWidth + 'px';
        }));
    };
    /**
     * @param {?} col
     * @return {?}
     */
    TreeTableComponent.prototype.columnIsVisible = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        return this.ttService.columnIsVisible(col, this);
    };
    /**
     * @private
     * @param {?} n
     * @return {?}
     */
    TreeTableComponent.prototype.columnCssName = /**
     * @private
     * @param {?} n
     * @return {?}
     */
    function (n) {
        return "#" + this.id + " .treetable-cell[field=\"" + n.field + "\"], #" + this.id + " .treetable-header-cell[field=\"" + n.field + "\"]:not(.group-header-cell)";
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.checkGroupColumns = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var i = this.groupColumns.length - 1;
        while (i >= 0) {
            /** @type {?} */
            var ids = this.groupColumns[i].map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.parentId; }));
            ids = Array.from(new Set(ids));
            ids.map((/**
             * @param {?} id
             * @return {?}
             */
            function (id) {
                /** @type {?} */
                var childCols = _this.groupColumns[i].filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.parentId == id; })).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    /** @type {?} */
                    var dataField = _this.columns.find((/**
                     * @param {?} c
                     * @return {?}
                     */
                    function (c) { return c.id === n.id; }));
                    return dataField || n;
                }));
                return {
                    id: id,
                    width: childCols.reduce((/**
                     * @param {?} r
                     * @param {?} c
                     * @return {?}
                     */
                    function (r, c) { return r += c.width; }), 0),
                    left: childCols[0].left,
                    right: childCols[childCols.length - 1].right || 0
                };
            })).forEach((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                if (i - 1 >= 0) {
                    /** @type {?} */
                    var pCol = _this.groupColumns[i - 1].find((/**
                     * @param {?} pc
                     * @return {?}
                     */
                    function (pc) { return pc.id == p.id; }));
                    /** @type {?} */
                    var dataField = _this.columns.find((/**
                     * @param {?} c
                     * @return {?}
                     */
                    function (c) { return c.id === p.id; }));
                    pCol = dataField || pCol;
                    pCol.width = p.width;
                    if (pCol.fixed === 'left') {
                        pCol.left = p.left;
                    }
                    if (pCol.fixed === 'right') {
                        pCol.right = p.right;
                    }
                }
            }));
            i--;
        }
    };
    // 按固定列的顺序排序
    // 按固定列的顺序排序
    /**
     * @private
     * @param {?=} updateColumns
     * @return {?}
     */
    TreeTableComponent.prototype.sortColumnsByFixed = 
    // 按固定列的顺序排序
    /**
     * @private
     * @param {?=} updateColumns
     * @return {?}
     */
    function (updateColumns) {
        if (updateColumns === void 0) { updateColumns = true; }
        /** @type {?} */
        var fixedLeft = this.columns.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.fixed === 'left'; }));
        /** @type {?} */
        var fixedCenter = this.columns.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return !n.fixed || n.fixed === 'center'; }));
        /** @type {?} */
        var fixedRight = this.columns.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.fixed === 'right'; }));
        if (fixedLeft && fixedLeft.length) {
            fixedLeft.forEach((/**
             * @param {?} n
             * @param {?} index
             * @return {?}
             */
            function (n, index) {
                if (index) {
                    n.left = fixedLeft.reduce((/**
                     * @param {?} r
                     * @param {?} c
                     * @param {?} i
                     * @return {?}
                     */
                    function (r, c, i) {
                        if (i < index) {
                            return r += c.width;
                        }
                        return r;
                    }), 0);
                }
                else {
                    n.left = 0;
                }
            }));
        }
        if (fixedRight && fixedRight.length) {
            /** @type {?} */
            var rightWidthTotal_1 = fixedRight.reduce((/**
             * @param {?} r
             * @param {?} c
             * @return {?}
             */
            function (r, c) {
                return r + c.width;
            }), 0);
            fixedRight.forEach((/**
             * @param {?} n
             * @param {?} index
             * @return {?}
             */
            function (n, index) {
                rightWidthTotal_1 -= n.width;
                n.right = rightWidthTotal_1;
            }));
        }
        if (updateColumns) {
            this.columns = fixedLeft.concat(fixedCenter).concat(fixedRight);
        }
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.checkColumnOption = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var cssRules = [];
        // 启用分页加载子节点
        if (this.paginationForChildren) {
            /** @type {?} */
            var pagerBarCol = {
                field: NODES_PAGER_COLUMN_FIELD,
                width: 160,
                title: '',
                align: 'center',
                template: this.nodesPagerBar,
                rowspan: 1,
            };
            if (this.useGroupHeader) {
                if (this.groupColumns[0][this.groupColumns[0].length - 1].fixed === 'right') {
                    pagerBarCol.fixed = 'right';
                }
                pagerBarCol.rowspan = this.groupColumns.length;
                this.groupColumns[0].push(pagerBarCol);
            }
            this.columns.push(pagerBarCol);
        }
        if (!this.fitColumns) {
            this.sortColumnsByFixed();
        }
        this.columns.forEach((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        function (n, i) {
            if (n.visible === undefined) {
                n.visible = true;
            }
            if (n['halign']) {
                n.hAlign = n['halign'];
            }
            if (n.width === undefined) {
                n.width = 100;
            }
            if (!n.id) {
                n.id = 'treetable-header-' + (n.field || i);
            }
        }));
        /** @type {?} */
        var colWidthTotal = this.allColumnsWidth();
        /** @type {?} */
        var fixedCols = 0;
        /** @type {?} */
        var fixedRightColumns = this.columns.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.fixed === 'right'; }));
        if (fixedRightColumns && fixedRightColumns.length) {
            fixedRightColumns[0]['rightShadowCol'] = true;
            fixedRightColumns[fixedRightColumns.length - 1]['lastColumn'] = true;
        }
        else {
            if (this.columns && this.columns.length) {
                this.columns[this.columns.length - 1]['lastColumn'] = true;
            }
        }
        /** @type {?} */
        var fixedLeftColumns = this.columns.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.fixed === 'left'; }));
        if (fixedLeftColumns && fixedLeftColumns.length) {
            fixedLeftColumns[fixedLeftColumns.length - 1]['leftShadowCol'] = true;
        }
        fixedCols = this.setCellWidthCss(colWidthTotal, fixedCols, cssRules);
        this.setTableWidth(colWidthTotal);
        this.fixedColumns = !!fixedCols;
    };
    /**
     * @private
     * @param {?} colWidthTotal
     * @param {?} fixedCols
     * @param {?} cssRules
     * @return {?}
     */
    TreeTableComponent.prototype.setCellWidthCss = /**
     * @private
     * @param {?} colWidthTotal
     * @param {?} fixedCols
     * @param {?} cssRules
     * @return {?}
     */
    function (colWidthTotal, fixedCols, cssRules) {
        var _this = this;
        this.columns.forEach((/**
         * @param {?} n
         * @param {?} index
         * @return {?}
         */
        function (n, index) {
            /** @type {?} */
            var isVisible = _this.columnIsVisible(n);
            /** @type {?} */
            var ruleName = _this.columnCssName(n);
            /** @type {?} */
            var cssRule = _this.utils.getCssRule(ruleName, _this.styleElement.sheet);
            if (!cssRule) {
                /** @type {?} */
                var stylecss = ruleName + ' { ';
                stylecss += isVisible ? '' : 'display: none;';
                if (_this.fitColumns) {
                    stylecss += "width: " + (n.width / colWidthTotal * 100).toFixed(2) + "%;";
                }
                else {
                    stylecss += "width: " + n.width + "px;";
                    if (n.fixed) {
                        if (n.fixed === 'left') {
                            stylecss += "left: " + n.left + "px";
                            fixedCols++;
                        }
                        if (n.fixed === 'right') {
                            stylecss += "right: " + n.right + "px";
                            fixedCols++;
                        }
                    }
                }
                stylecss += '}';
                cssRules.push(stylecss);
            }
            else {
                cssRule.style.display = isVisible ? '' : 'none';
                if (_this.fitColumns) {
                    cssRule.style.width = (n.width / colWidthTotal * 100).toFixed(2) + "%";
                }
                else {
                    cssRule.style.width = n.width + "px";
                    if (n.fixed) {
                        if (n.fixed === 'left') {
                            cssRule.style.left = n.left + "px";
                        }
                        if (n.fixed === 'right') {
                            cssRule.style.right = n.right + "px";
                        }
                    }
                }
            }
        }));
        if (this.useGroupHeader) {
            this.autoWidth = false; // 多表头启用后，自动列宽失效 TFS 496088
            this.checkGroupColumns();
            /** @type {?} */
            var i = this.groupColumns.length - 2;
            while (i >= 0) {
                /** @type {?} */
                var groupHeaderColCsses = this.groupColumns[i].filter((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) { return !col.field; })).map((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) {
                    /** @type {?} */
                    var groupColCssName = "#" + col.id + "{ width: " + col.width + "px";
                    if (col.fixed) {
                        if (col.fixed === 'left') {
                            groupColCssName += ';left:' + col.left + 'px';
                        }
                        if (col.fixed === 'right') {
                            groupColCssName += ';right:' + col.right + 'px';
                        }
                    }
                    return groupColCssName += '}';
                }));
                this.utils.appendCssRules2(groupHeaderColCsses, this.styleElement.sheet);
                i--;
            }
        }
        if (cssRules.length) {
            this.utils.appendCssRules(cssRules, this.styleElement.sheet);
        }
        return fixedCols;
    };
    /**
     * @private
     * @param {?} colWidthTotal
     * @return {?}
     */
    TreeTableComponent.prototype.setTableWidth = /**
     * @private
     * @param {?} colWidthTotal
     * @return {?}
     */
    function (colWidthTotal) {
        if (this.headerTable && this.bodyTable) {
            if (!this.fitColumns && !this.autoFitColumns) {
                this.headerTable.nativeElement.style.width = colWidthTotal + "px";
                this.bodyTable.nativeElement.style.width = colWidthTotal + "px";
            }
            else {
                this.headerTable.nativeElement.style.width = '100%';
                this.bodyTable.nativeElement.style.width = '100%';
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.allColumnsWidth = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        return this.columns.reduce((/**
         * @param {?} r
         * @param {?} c
         * @return {?}
         */
        function (r, c) {
            if (_this.columnIsVisible(c)) {
                return r + c.width;
            }
            else {
                return r;
            }
        }), 0);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    TreeTableComponent.prototype.onPageChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.pageChanged.emit($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    TreeTableComponent.prototype.onPageSizeChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.pageSizeChanged.emit($event);
    };
    /**
     * @param {?} pageInfo
     * @return {?}
     */
    TreeTableComponent.prototype.updatePageInfo = /**
     * @param {?} pageInfo
     * @return {?}
     */
    function (pageInfo) {
        if (pageInfo && Object.keys(pageInfo).length) {
            /** @type {?} */
            var obj = {};
            if (pageInfo.total !== undefined) {
                obj.totalItems = pageInfo.total;
            }
            if (pageInfo.pageIndex !== undefined) {
                obj.currentPage = pageInfo.pageIndex;
            }
            if (pageInfo.pageSize !== undefined) {
                obj.itemsPerPage = pageInfo.pageSize;
            }
            if (pageInfo.pageList !== undefined) {
                obj.pageList = pageInfo.pageList;
            }
            this.paginationOptions = Object.assign(this.paginationOptions, obj);
        }
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.initPaginationOptions = /**
     * @private
     * @return {?}
     */
    function () {
        return {
            id: 'Farris-TreeTable-Pagination_' + this._UUID,
            itemsPerPage: this.pageSize,
            currentPage: this.pageIndex,
            pageList: this.pageList,
            totalItems: this.total,
            remote: this.pagerOnServer
        };
    };
    /**
     * @param {?} col
     * @param {?} rowdata
     * @param {?=} fast
     * @return {?}
     */
    TreeTableComponent.prototype.getNodeText = /**
     * @param {?} col
     * @param {?} rowdata
     * @param {?=} fast
     * @return {?}
     */
    function (col, rowdata, fast) {
        if (fast === void 0) { fast = false; }
        if (col.isMultilingualField) {
            /** @type {?} */
            var val = this.utils.getValue(col.field, rowdata);
            if (this.localeService) {
                /** @type {?} */
                var localeId = this.localeService.localeId || 'zh-CHS';
                if (val && typeof val === 'object' && Object.keys(val).length > 0) {
                    return val[localeId];
                }
                else {
                    return val;
                }
            }
        }
        else {
            return this.utils.getValue(col.field, rowdata, !fast);
        }
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.initNodeStatus = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.singleSelect) {
            if (this.checkValues && this.checkValues.length) {
                this.checkedNodes(this.checkValues, false, false);
            }
            if (this.selectValues && this.selectValues.length && !this.onlySelectSelf) {
                this.selectNodes(this.selectValues, false, false);
            }
        }
        else {
            if (this.selectValue) {
                this.selectNode(this.selectValue, false);
            }
        }
    };
    /** 注册快捷键 */
    /**
     * 注册快捷键
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.registerShortcuts = /**
     * 注册快捷键
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.showFilterBar && this._hotKeys) {
            this._hotKeys.addShortcut({ keys: 'enter', element: this.inputGroup.textbox.nativeElement }).subscribe((/**
             * @return {?}
             */
            function () {
                _this.onSearch();
            }));
        }
        this.setFindText(this.enableFindText);
    };
    /**
     * @private
     * @param {?=} enable
     * @return {?}
     */
    TreeTableComponent.prototype.setFindText = /**
     * @private
     * @param {?=} enable
     * @return {?}
     */
    function (enable) {
        var _this = this;
        if (enable === void 0) { enable = true; }
        this.enableFindText = enable;
        if (this.enableFindText && this._hotKeys) {
            // 查询工具条
            this.findKeysHandler = this._hotKeys.addShortcut({ keys: 'control.shift.f' }).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (_this.enableFindText) {
                    _this.showFindInput = true;
                    _this.detectChanges();
                }
            }));
        }
        else {
            if (this.showFindInput) {
                this.showFindInput = false;
                this.cdRef.detectChanges();
            }
            if (this.findKeysHandler) {
                this.findKeysHandler.unsubscribe();
                this.findKeysHandler = null;
            }
        }
    };
    /**
     * @private
     * @param {?} rowNode
     * @param {?=} field
     * @param {?=} clsType
     * @return {?}
     */
    TreeTableComponent.prototype.getCustomCls = /**
     * @private
     * @param {?} rowNode
     * @param {?=} field
     * @param {?=} clsType
     * @return {?}
     */
    function (rowNode, field, clsType) {
        if (field === void 0) { field = ''; }
        if (clsType === void 0) { clsType = 'row'; }
        /** @type {?} */
        var cls = {};
        /** @type {?} */
        var fn = this.rowStyler;
        if (clsType === 'cell') {
            fn = this.cellStyler;
        }
        if (fn) {
            /** @type {?} */
            var rowCls = fn(rowNode.node, field);
            if (rowCls) {
                /** @type {?} */
                var arrcls = [];
                if (typeof rowCls === 'string') {
                    arrcls = [rowCls];
                }
                else {
                    if (Array.isArray(rowCls)) {
                        arrcls = rowCls;
                    }
                }
                if (arrcls.length) {
                    /** @type {?} */
                    var rowClsObj_1 = {};
                    arrcls.forEach((/**
                     * @param {?} c
                     * @return {?}
                     */
                    function (c) {
                        rowClsObj_1['' + c] = true;
                    }));
                    /** @type {?} */
                    var _cls = tslib_1.__assign({}, rowClsObj_1, cls);
                    return _cls;
                }
                else {
                    return rowCls;
                }
            }
            else {
                return cls;
            }
        }
        else {
            return cls;
        }
    };
    /**
     * @param {?} rowNode
     * @param {?=} field
     * @return {?}
     */
    TreeTableComponent.prototype.getRowCls = /**
     * @param {?} rowNode
     * @param {?=} field
     * @return {?}
     */
    function (rowNode, field) {
        return this.getCustomCls(rowNode, 'row');
    };
    /**
     * @param {?} rowNode
     * @param {?} field
     * @return {?}
     */
    TreeTableComponent.prototype.getCellCls = /**
     * @param {?} rowNode
     * @param {?} field
     * @return {?}
     */
    function (rowNode, field) {
        return this.getCustomCls(rowNode, field, 'cell');
    };
    /**
     * @param {?} currentCol
     * @return {?}
     */
    TreeTableComponent.prototype.getRealColWidth = /**
     * @param {?} currentCol
     * @return {?}
     */
    function (currentCol) {
        var _this = this;
        if (this.columns && this.columns.length && this.fitColumns) {
            /** @type {?} */
            var colWidthTotal = this.columns.reduce((/**
             * @param {?} r
             * @param {?} c
             * @return {?}
             */
            function (r, c) {
                return r + (_this.columnIsVisible(c) && (r.field !== NODES_PAGER_COLUMN_FIELD || r.fixedWidth) ? c.width : 0);
            }), 0);
            if (this.columnIsVisible(currentCol)) {
                if (currentCol.field !== NODES_PAGER_COLUMN_FIELD && !currentCol.fixedWidth) {
                    return (currentCol.width / colWidthTotal * 100).toFixed(2) + '%';
                }
                else {
                    return (currentCol.width || 120) + 'px';
                }
            }
            else {
                return 0;
            }
        }
        return currentCol.width + 'px';
    };
    /**
     * @return {?}
     */
    TreeTableComponent.prototype.onResized = /**
     * @return {?}
     */
    function () {
        this.resizeSer.windowResized();
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.setRightFixedColumnShadow = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.psRef && this.psRef.directiveRef) {
            /** @type {?} */
            var ps = ((/** @type {?} */ (this.psRef.directiveRef))).instance;
            if (!ps) {
                return;
            }
            var containerWidth = ps.containerWidth, scrollbarXLeft = ps.scrollbarXLeft, contentWidth = ps.contentWidth;
            if (containerWidth + scrollbarXLeft < contentWidth) {
                /** @type {?} */
                var fixedRightColumns = this.columns.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.fixed === 'right'; }));
                /** @type {?} */
                var ruleName = "#" + this.id + ".f-treetable--fixed-columns";
                if (fixedRightColumns && fixedRightColumns.length) {
                    /** @type {?} */
                    var fixedRightCssRuleKey = ruleName + " [r-tt-shadow-col]::before";
                    /** @type {?} */
                    var rightCSSRule = fixedRightCssRuleKey + "{\n                        box-shadow:#d9d9d9 -12px 0px 8px -12px inset;\n                    }";
                    this.utils.appendCssRules([rightCSSRule], this.styleElement.sheet);
                }
            }
        }
    };
    /**
     * @private
     * @param {?} x
     * @param {?} e
     * @return {?}
     */
    TreeTableComponent.prototype.setFixedColumnShadow = /**
     * @private
     * @param {?} x
     * @param {?} e
     * @return {?}
     */
    function (x, e) {
        /** @type {?} */
        var fixedLeftColumns = this.columns.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.fixed === 'left'; }));
        /** @type {?} */
        var fixedRightColumns = this.columns.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.fixed === 'right'; }));
        /** @type {?} */
        var ruleName = "#" + this.id + ".f-treetable--fixed-columns";
        /** @type {?} */
        var fixedLeftCssRuleKey = '';
        /** @type {?} */
        var fixedRightCssRuleKey = '';
        /** @type {?} */
        var leftCSSRule = '';
        /** @type {?} */
        var rightCSSRule = '';
        if (fixedLeftColumns && fixedLeftColumns.length) {
            /** @type {?} */
            var lastFixedLeftColumn = fixedLeftColumns[fixedLeftColumns.length - 1];
            fixedLeftCssRuleKey = ruleName + " [field=\"" + lastFixedLeftColumn.field + "\"]::after";
            leftCSSRule = fixedLeftCssRuleKey + "{\n                box-shadow:#d9d9d9 12px 0px 8px -12px inset;\n            }";
        }
        if (fixedRightColumns && fixedRightColumns.length) {
            fixedRightCssRuleKey = ruleName + " [r-tt-shadow-col]::before";
            rightCSSRule = fixedRightCssRuleKey + "{\n                box-shadow:#d9d9d9 -12px 0px 8px -12px inset;\n            }";
        }
        if (x === 0) {
            // 移除左侧固定列阴影样式
            if (fixedLeftCssRuleKey) {
                this.utils.removeCssRule(fixedLeftCssRuleKey, this.styleElement.sheet);
            }
        }
        else if ((x + e.srcElement.offsetWidth).toFixed() == e.srcElement.scrollWidth) {
            // 移除右则固定列阴影样式
            if (fixedRightCssRuleKey) {
                this.utils.removeCssRule(fixedRightCssRuleKey, this.styleElement.sheet);
            }
        }
        else {
            // 添加左右固定列样式
            /** @type {?} */
            var arr = [];
            if (leftCSSRule) {
                arr.push(leftCSSRule);
            }
            if (rightCSSRule) {
                arr.push(rightCSSRule);
            }
            this.utils.appendCssRules(arr, this.styleElement.sheet);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    TreeTableComponent.prototype.onScrollX = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.showHeader && this.headerBox) {
            /** @type {?} */
            var x = e.srcElement.scrollLeft;
            this.state.scrollX = x;
            // this.renderer.setStyle(this.headerBox.nativeElement.querySelector('table'), 'transform', `translate3d(-${x}px, 0px, 0px)`);
            this.headerBox.nativeElement.scrollLeft = x;
            this.setFixedColumnShadow(x, e);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    TreeTableComponent.prototype.onScrollY = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.virtualized) {
            /** @type {?} */
            var scrollTop = e.target.scrollTop;
            this.renderData(scrollTop);
        }
    };
    /**
     * @private
     * @param {?} scrolltop
     * @return {?}
     */
    TreeTableComponent.prototype.renderData = /**
     * @private
     * @param {?} scrolltop
     * @return {?}
     */
    function (scrolltop) {
        var _a = this.scrollLoader.getRowNodes(scrolltop), data = _a.data, topHideHeight = _a.topHideHeight, bottomHideHeight = _a.bottomHideHeight;
        this.state.scrollY = scrolltop;
        this.serializedValue = data;
        this.topHideHeight = topHideHeight;
        this.bottomHideHeight = bottomHideHeight;
        this.detectChanges();
        this.setNewColumnsWidth();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    TreeTableComponent.prototype.onSearchValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (!$event) {
            this.onClearSearchValue();
        }
        this.searchValueChange.emit(this.searchData);
    };
    /**
     * @return {?}
     */
    TreeTableComponent.prototype.onClearSearchValue = /**
     * @return {?}
     */
    function () {
        this.searchData.value = '';
        this.state.searched = false;
        this.clearSearchValue.emit();
    };
    /**
     * @param {?} event
     * @param {?} col
     * @param {?} node
     * @return {?}
     */
    TreeTableComponent.prototype.onCellClick = /**
     * @param {?} event
     * @param {?} col
     * @param {?} node
     * @return {?}
     */
    function (event, col, node) {
        this.cellClick.emit({ event: event, col: col, node: node });
    };
    /**
     * @param {?} index
     * @param {?} rowNode
     * @return {?}
     */
    TreeTableComponent.prototype.trackByFn = /**
     * @param {?} index
     * @param {?} rowNode
     * @return {?}
     */
    function (index, rowNode) {
        return rowNode.id;
    };
    /**
     * 格式化数据
     */
    /**
     * 格式化数据
     * @param {?} col
     * @param {?} data
     * @param {?} formatter
     * @return {?}
     */
    TreeTableComponent.prototype.formatData = /**
     * 格式化数据
     * @param {?} col
     * @param {?} data
     * @param {?} formatter
     * @return {?}
     */
    function (col, data, formatter) {
        // const val = this.utils.getValue(field, data, true );
        /** @type {?} */
        var val = this.getNodeText(col, data);
        if (formatter && formatter.type === 'timeago') {
            if (!formatter.options) {
                formatter.options = { locale: this.localeService.localeId };
            }
            else {
                if (!formatter.options.locale) {
                    formatter.options.locale = this.localeService.localeId;
                }
            }
        }
        return this.colFormatSer.format(val, data, formatter, { locale: this.localeService.localeId });
    };
    /**
     * @return {?}
     */
    TreeTableComponent.prototype.columnsChanged = /**
     * @return {?}
     */
    function () {
        this.checkColumnOption();
        this.detectChanges();
    };
    /**
     * @private
     * @param {?} list
     * @return {?}
     */
    TreeTableComponent.prototype.ttc2columns = /**
     * @private
     * @param {?} list
     * @return {?}
     */
    function (list) {
        return list.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return {
                field: n.field,
                title: n.title,
                align: n.align,
                hAlign: n.hAlign,
                width: n.width,
                formatter: n.formatter
            };
        }));
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.reSetSize = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.fit) {
            /** @type {?} */
            var parentEl = this.el.nativeElement.parentNode;
            this.setWidth(parentEl.offsetWidth);
            this.height = parentEl.offsetHeight;
            // 如果在使用时，为组件设置的高度，则以此值为准，仅支持 固定值 ，不支持 百分比
            if (this.el.nativeElement.style.height) {
                /** @type {?} */
                var h = this.el.nativeElement.style.height;
                if (h.indexOf('px') > -1) {
                    h = parseInt(h.replace('px', ''), 10);
                    if (h > 0) {
                        this.height = h;
                    }
                }
            }
        }
    };
    /**
     * @private
     * @param {?=} nodePosY
     * @return {?}
     */
    TreeTableComponent.prototype.renderVirtualRowNodes = /**
     * @private
     * @param {?=} nodePosY
     * @return {?}
     */
    function (nodePosY) {
        var _this = this;
        if (nodePosY === void 0) { nodePosY = null; }
        if (this.virtualized) {
            /** @type {?} */
            var scrollY_1 = nodePosY || this.state.scrollY;
            /** @type {?} */
            var _rownodes = this.scrollLoader.getRowNodes(scrollY_1);
            this.serializedValue = _rownodes.data;
            this.topHideHeight = _rownodes.topHideHeight;
            this.bottomHideHeight = _rownodes.bottomHideHeight;
            this.detectChanges();
            if (nodePosY) {
                this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.psRef.directiveRef.elementRef.nativeElement.scrollTop = nodePosY;
                    }), 20);
                }));
            }
        }
    };
    /**
     * @param {?=} nodePosY
     * @return {?}
     */
    TreeTableComponent.prototype.updateSerializedValue = /**
     * @param {?=} nodePosY
     * @return {?}
     */
    function (nodePosY) {
        if (nodePosY === void 0) { nodePosY = null; }
        this.serializedValue = [];
        this.searchHandle.allNodes = [];
        this.state.rowNodes = [];
        this.serializeNodes(null, this.data, 0, true);
        if (this.virtualized && this.fixedHeader) {
            this.renderVirtualRowNodes(nodePosY);
        }
        else {
            this.serializedValue = this.state.rowNodes;
            this.detectChanges();
            // if (emitChanges) {
            // }
        }
    };
    /**
     * 将树节点数据序列化为RowNode
     * @param parent 父级节点
     * @param nodes 树节点集合
     * @param level 级别
     * @param visible 是否可见
     */
    /**
     * 将树节点数据序列化为RowNode
     * @param {?} parent 父级节点
     * @param {?} nodes 树节点集合
     * @param {?} level 级别
     * @param {?} visible 是否可见
     * @param {?=} parentIds
     * @return {?}
     */
    TreeTableComponent.prototype.serializeNodes = /**
     * 将树节点数据序列化为RowNode
     * @param {?} parent 父级节点
     * @param {?} nodes 树节点集合
     * @param {?} level 级别
     * @param {?} visible 是否可见
     * @param {?=} parentIds
     * @return {?}
     */
    function (parent, nodes, level, visible, parentIds) {
        var _this = this;
        if (nodes && nodes.length) {
            if (!nodes[0].data) {
                return;
            }
            nodes.forEach((/**
             * @param {?} node
             * @param {?} index
             * @return {?}
             */
            function (node, index) {
                node.parent = parent;
                if (!node.hasOwnProperty('selectable')) {
                    node.selectable = true;
                }
                if (!node.hasOwnProperty('showIcon')) {
                    node.showIcon = true;
                }
                if (_this.onlySelectLeaf === 'yes' && node.selectable) {
                    node.selectable = !!node.leaf;
                }
                /** @type {?} */
                var keyid = node.data[_this.idField];
                node.id = keyid;
                /** @type {?} */
                var isSelected = _this.findIndexInSelection(node) > -1;
                /** @type {?} */
                var isChecked = _this.findIndexInCheckeds(node) > -1;
                /** @type {?} */
                var isLast = index === nodes.length - 1;
                /** @type {?} */
                var isFirst = index === 0;
                /** @type {?} */
                var parents = [];
                /** @type {?} */
                var parentRn = null;
                if (parent) {
                    /** @type {?} */
                    var parentID = parent.data[_this.idField];
                    /** @type {?} */
                    var _parents = parentIds || [];
                    parents = parents.concat(_parents.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n; })));
                    parents.push(parentID);
                    parentRn = _this.state.rowNodes.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.id === parent.id; }));
                }
                /** @type {?} */
                var rowNode = {
                    id: keyid,
                    node: node,
                    parent: parent,
                    level: level,
                    visible: visible && (parent ? parent.expanded : true),
                    isSelected: isSelected,
                    isChecked: isChecked,
                    parents: parents,
                    parentRowNode: parentRn,
                    index: _this.state.rowNodes.length,
                    last: isLast,
                    first: isFirst
                };
                // this.serializedValue.push(rowNode);
                _this.state.rowNodes.push(rowNode);
                _this.serializeNodes(node, node.children, level + 1, rowNode.visible, parents);
            }));
        }
    };
    /**
     * 判断指定的节点是否被选中
     * @param node 树节点
     */
    /**
     * 判断指定的节点是否被选中
     * @param {?} node 树节点
     * @return {?}
     */
    TreeTableComponent.prototype.isSelected = /**
     * 判断指定的节点是否被选中
     * @param {?} node 树节点
     * @return {?}
     */
    function (node) {
        var _this = this;
        if (this.singleSelect) {
            if (node && this.selectedRow) {
                return node.data[this.idField] === this.selectedRow.data[this.idField];
            }
            return false;
        }
        else {
            if (this.selections && this.selections.length) {
                return this.selections.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.data[_this.idField] === node.data[_this.idField]; })) > -1;
            }
            return false;
        }
    };
    /** 判断当前节点的钩选状态 */
    /**
     * 判断当前节点的钩选状态
     * @param {?} node
     * @return {?}
     */
    TreeTableComponent.prototype.isChecked = /**
     * 判断当前节点的钩选状态
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        if (node && this.checkeds) {
            if (this.checkeds instanceof Array) {
                return this.checkeds.findIndex((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    return v.data[_this.idField] === node.data[_this.idField];
                })) > -1;
            }
            return false;
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.unSelectedCurrentRowEmit = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currSelected = this.selectedRow;
        if (currSelected) {
            this.nodeUnSelect.emit({ node: currSelected, type: 'row', instance: this });
        }
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    TreeTableComponent.prototype._singleSelectNode = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.clearSelections();
        this.selectedRow = e.rowNode.node;
        this.selectRowIndex = e.rowIndex;
        this.selections = [e.rowNode.node];
        e.rowNode.isSelected = true;
        if (this.showCheckbox) {
            e.rowNode.isChecked = true;
            this.clearCheckeds();
            this.setCheckeds(e.rowNode);
        }
        /** @type {?} */
        var sp = {
            originalEvent: e.originalEvent,
            node: e.rowNode.node, type: 'row',
            index: e.rowIndex,
            parents: e.rowNode.parents,
            instance: this
        };
        this.nodeSelected.emit(sp);
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    TreeTableComponent.prototype._singleUnSelectNode = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.selectedRow = null;
        this.selectRowIndex = -1;
        e.rowNode.isSelected = false;
        e.rowNode.isChecked = false;
        this.selections = [];
        this.nodeUnSelect.emit({
            originalEvent: e.originalEvent,
            node: e.rowNode.node, type: 'row', parents: e.rowNode.parents,
            instance: this
        });
    };
    /**
     * @private
     * @param {?} event
     * @param {?=} selected
     * @return {?}
     */
    TreeTableComponent.prototype.__singleSelectNode = /**
     * @private
     * @param {?} event
     * @param {?=} selected
     * @return {?}
     */
    function (event, selected) {
        if (selected === void 0) { selected = false; }
        if (!selected) {
            this.unSelectedCurrentRowEmit();
            this._singleSelectNode(event);
        }
        else {
            if (!this.keepSelect) {
                this._singleUnSelectNode(event);
            }
        }
    };
    /**
     * @private
     * @param {?} event
     * @param {?} selected
     * @return {?}
     */
    TreeTableComponent.prototype.__multiSelectNode = /**
     * @private
     * @param {?} event
     * @param {?} selected
     * @return {?}
     */
    function (event, selected) {
        /** @type {?} */
        var rowNode = event.rowNode;
        if (selected) {
            this.unSelectedCurrentRowEmit();
            this.singleSelectWhenMultiSelect(rowNode, true);
            this.nodeSelected.emit({
                originalEvent: event.originalEvent, node: rowNode.node,
                type: 'row', index: event.rowIndex, parents: rowNode.parents,
                instance: this
            });
        }
        else {
            if (!this.keepSelect) {
                this.singleSelectWhenMultiSelect(rowNode, false);
                this.nodeUnSelect.emit({
                    originalEvent: event.originalEvent, node: rowNode.node,
                    type: 'row', index: event.rowIndex, parents: rowNode.parents,
                    instance: this
                });
            }
        }
    };
    /**
     * 行单击事件
     */
    /**
     * 行单击事件
     * @param {?} event
     * @return {?}
     */
    TreeTableComponent.prototype.handleRowClick = /**
     * 行单击事件
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var rowNode = event.rowNode;
        rowNode.node['elementRef'] = event.originalEvent.target;
        /** @type {?} */
        var selected = this.isSelected(rowNode.node);
        if (this.singleSelect) {
            this.__singleSelectNode(event, selected);
        }
        else {
            rowNode.indeterminate = false;
            if (this.onlySelectSelf) {
                this.__multiSelectNode(event, !selected);
            }
            else {
                rowNode.isSelected = !selected;
                this.state.rowNodes.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.id === rowNode.id; })).isSelected = !selected;
                this.setSelections(rowNode);
                /** @type {?} */
                var rowSelectChangeParams = {
                    originalEvent: event.originalEvent, node: rowNode.node,
                    type: 'row', index: event.rowIndex, parents: rowNode.parents,
                    instance: this
                };
                if (rowNode.isSelected) {
                    this.nodeSelected.emit(rowSelectChangeParams);
                }
                else {
                    this.nodeUnSelect.emit(rowSelectChangeParams);
                }
                if (this.checkOnSelect) {
                    rowNode.isChecked = !selected;
                    this.state.rowNodes.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.id === rowNode.id; })).isChecked = !selected;
                    this.setCheckeds(rowNode);
                    /** @type {?} */
                    var nodes = this.cascadeNodes(rowNode, rowNode.isChecked);
                    this.ttService.onChangeCheckboxStatus(rowNode);
                    if (rowNode.isChecked) {
                        this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, nodes: nodes, instance: this });
                    }
                    else {
                        this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, nodes: nodes, instance: this });
                    }
                }
            }
            if (this.checkOnSelect) {
                /** @type {?} */
                var ids = this.checkeds.map((/**
                 * @param {?} tn
                 * @return {?}
                 */
                function (tn) { return tn.id; }));
                this.checkValues = ids;
                this.checkValuesChange.emit(ids);
            }
        }
        this.detectChanges();
    };
    /**
     * 带有checkbox 的单选
     * @param rowNode 当前节点
     */
    /**
     * 带有checkbox 的单选
     * @private
     * @param {?} rowNode 当前节点
     * @param {?} flag
     * @return {?}
     */
    TreeTableComponent.prototype.singleSelectWhenMultiSelect = /**
     * 带有checkbox 的单选
     * @private
     * @param {?} rowNode 当前节点
     * @param {?} flag
     * @return {?}
     */
    function (rowNode, flag) {
        if (this.checkOnSelect) {
            rowNode.isChecked = flag;
            this.setCheckeds(rowNode);
            this.cascadeNodes(rowNode, rowNode.isChecked);
            if (rowNode.isChecked) {
                this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, instance: this });
            }
            else {
                this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, instance: this });
            }
        }
        this.clearSelections();
        if (this.onlySelectSelf) {
            this.selectedRow = rowNode.node;
        }
        rowNode.isSelected = flag;
        this.setSelections(rowNode);
    };
    /**
     * @private
     * @param {?} rowNode
     * @param {?} flag
     * @param {?} event
     * @return {?}
     */
    TreeTableComponent.prototype.selectWhenChecked = /**
     * @private
     * @param {?} rowNode
     * @param {?} flag
     * @param {?} event
     * @return {?}
     */
    function (rowNode, flag, event) {
        if (rowNode.node.selectable) {
            rowNode.isChecked = flag;
        }
        this.setCheckeds(rowNode, false);
        if (this.selectOnCheck) {
            if (this.onlySelectSelf) {
                if (flag || (this.selectedRow && this.selectedRow.id === rowNode.id)) {
                    this.clearSelections();
                }
            }
            if (this.singleSelect && this.showCheckbox) {
                this.clearCheckeds();
            }
            if (rowNode.node.selectable) {
                rowNode.isSelected = flag;
            }
            this.setSelections(rowNode);
            this.state.rowNodes.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.id === rowNode.id; })).isSelected = flag;
            if (rowNode.isSelected) {
                this.nodeSelected.emit({ originalEvent: event, node: rowNode.node, instance: this, type: 'checkbox' });
            }
            else {
                this.nodeUnSelect.emit({ originalEvent: event, node: rowNode.node, instance: this, type: 'checkbox' });
            }
        }
    };
    /**
     * @private
     * @param {?} rowNode
     * @param {?} items
     * @return {?}
     */
    TreeTableComponent.prototype.isInArray = /**
     * @private
     * @param {?} rowNode
     * @param {?} items
     * @return {?}
     */
    function (rowNode, items) {
        var _this = this;
        if (items && items.length === 0) {
            return false;
        }
        return items.findIndex((/**
         * @param {?} i
         * @return {?}
         */
        function (i) { return i.data[_this.idField] === rowNode.id; })) > -1;
    };
    /**
     * @private
     * @param {?} rowNode
     * @return {?}
     */
    TreeTableComponent.prototype.setSelections = /**
     * @private
     * @param {?} rowNode
     * @return {?}
     */
    function (rowNode) {
        var _this = this;
        if (rowNode.isSelected) {
            if (!this.selections) {
                this.selections = [];
            }
            if (!this.isInArray(rowNode, this.selections)) {
                // this.selections = [...this.selections, rowNode.node];
                this.selections.push(rowNode.node);
            }
        }
        else {
            if (this.selections) {
                /** @type {?} */
                var i = this.selections.findIndex((/**
                 * @param {?} tn
                 * @return {?}
                 */
                function (tn) { return tn.data[_this.idField] === rowNode.node.data[_this.idField]; }));
                if (i !== -1) {
                    this.selections.splice(i, 1);
                }
                // this.selections = this.selections.filter((tn: TreeNode) => tn.data[this.idField] !== rowNode.node.data[this.idField]);
            }
        }
    };
    /**
     * @private
     * @param {?} rowNode
     * @param {?=} updated
     * @return {?}
     */
    TreeTableComponent.prototype.setCheckeds = /**
     * @private
     * @param {?} rowNode
     * @param {?=} updated
     * @return {?}
     */
    function (rowNode, updated) {
        var _this = this;
        if (updated === void 0) { updated = true; }
        if (rowNode.isChecked) {
            if (!this.checkeds) {
                this.checkeds = [];
            }
            if (!this.isInArray(rowNode, this.checkeds)) {
                // this.checkeds = [ ...this.checkeds, rowNode.node];
                this.checkeds.push(rowNode.node);
            }
        }
        else {
            if (this.checkeds) {
                /** @type {?} */
                var i = this.checkeds.findIndex((/**
                 * @param {?} tn
                 * @return {?}
                 */
                function (tn) { return tn.data[_this.idField] === rowNode.node.data[_this.idField]; }));
                if (i !== -1) {
                    this.checkeds.splice(i, 1);
                }
                // this.checkeds = this.checkeds.filter((tn: TreeNode) => tn.data[this.idField] !== rowNode.node.data[this.idField]);
            }
        }
        if (updated) {
            this.checkeds = tslib_1.__spread(this.checkeds);
        }
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    TreeTableComponent.prototype.getDiffrentData = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (data.length) {
            /** @type {?} */
            var _nodes_1 = [];
            data.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                if (_nodes_1.findIndex((/**
                 * @param {?} t
                 * @return {?}
                 */
                function (t) { return t.data[_this.idField] === n.data[_this.idField]; })) === -1) {
                    _nodes_1.push(n);
                }
            }));
            return _nodes_1;
        }
        return data;
    };
    /**
     * @private
     * @param {?} rowNode
     * @param {?} checked
     * @param {?=} sync
     * @return {?}
     */
    TreeTableComponent.prototype.cascadeCheckedNode = /**
     * @private
     * @param {?} rowNode
     * @param {?} checked
     * @param {?=} sync
     * @return {?}
     */
    function (rowNode, checked, sync) {
        if (sync === void 0) { sync = false; }
        /** @type {?} */
        var nodes = [];
        if (rowNode.node.selectable) {
            rowNode.isChecked = checked;
        }
        this.setCheckeds(rowNode, false);
        if (this.selectOnCheck) {
            if (sync) {
                /** @type {?} */
                var status_1 = this.isIndeterminate(rowNode) !== 2;
                checked = status_1 ? checked : false;
            }
            if (rowNode.node.selectable) {
                rowNode.isSelected = checked;
                this.setSelections(rowNode);
            }
        }
        if (!this.isInArray(rowNode, nodes)) {
            nodes.push(rowNode.node);
        }
        return nodes;
    };
    /**
     * 向下级联选中
     * @param node 当前节点
     * @param checked 选中状态
     * 返回受影响的行
     */
    /**
     * 向下级联选中
     * @param {?} rowNode
     * @param {?} checked 选中状态
     * 返回受影响的行
     * @return {?}
     */
    TreeTableComponent.prototype.propagateSelectionDown = /**
     * 向下级联选中
     * @param {?} rowNode
     * @param {?} checked 选中状态
     * 返回受影响的行
     * @return {?}
     */
    function (rowNode, checked) {
        var _this = this;
        /** @type {?} */
        var nodes = this.cascadeCheckedNode(rowNode, checked);
        if (this.cascadeCheck && this.cascadeDown && rowNode.node.children && rowNode.node.children.length) {
            rowNode.node.children.forEach((/**
             * @param {?} v
             * @param {?} i
             * @return {?}
             */
            function (v, i) {
                /** @type {?} */
                var rn = _this.state.rowNodes.find((/**
                 * @param {?} row
                 * @return {?}
                 */
                function (row) { return row.id === v.data[_this.idField]; }));
                if (rn) {
                    rn.indeterminate = false;
                    if (rn.node.selectable) {
                        rn.isChecked = checked;
                    }
                    nodes = nodes.concat(_this.propagateSelectionDown(rn, checked));
                    _this.ttService.onChangeCheckboxStatus(rn);
                }
            }));
        }
        return nodes;
    };
    /**
     * 向上级联选中
     */
    /**
     * 向上级联选中
     * @param {?} rowNode
     * @param {?} checked
     * @return {?}
     */
    TreeTableComponent.prototype.propagateSelectionUp = /**
     * 向上级联选中
     * @param {?} rowNode
     * @param {?} checked
     * @return {?}
     */
    function (rowNode, checked) {
        var _this = this;
        /** @type {?} */
        var nodes = this.cascadeCheckedNode(rowNode, checked);
        if (this.cascadeCheck && this.cascadeUp && rowNode.node.parent) {
            if (rowNode.parents && rowNode.parents.length) {
                /** @type {?} */
                var rns_1 = [];
                rowNode.parents.forEach((/**
                 * @param {?} n
                 * @param {?} i
                 * @return {?}
                 */
                function (n, i) {
                    /** @type {?} */
                    var rn = _this.findRowNode(n);
                    if (rn && rn.node.selectable) {
                        // rn.isChecked = checked;
                        /** @type {?} */
                        var checkedNodes = _this.cascadeCheckedNode(rn, checked, true);
                        if (checkedNodes.length) {
                            nodes.push(checkedNodes[0]);
                        }
                        rns_1.push(rn);
                    }
                }));
                rns_1.reverse().forEach((/**
                 * @param {?} rn
                 * @return {?}
                 */
                function (rn) {
                    _this.updateCheckboxStatus(rn);
                }));
            }
        }
        return nodes;
    };
    // 节点状态（选中，勾选）同步更新
    // 节点状态（选中，勾选）同步更新
    /**
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.updateNodeStatus = 
    // 节点状态（选中，勾选）同步更新
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.state.searched) {
            /** @type {?} */
            var rowNodes = this.state.searchRowNodes;
            if (!rowNodes) {
                return;
            }
            rowNodes.forEach((/**
             * @param {?} rn
             * @return {?}
             */
            function (rn) {
                /** @type {?} */
                var checkedItem = _this.state.rowNodes.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.id === rn.id; }));
                /** @type {?} */
                var chked = checkedItem ? checkedItem.isChecked : false;
                rn.indeterminate = false;
                rn.isChecked = chked;
                if (_this.selectOnCheck) {
                    if (checkedItem.isSelected != rn.isChecked) {
                        checkedItem.isSelected = checkedItem.isChecked;
                    }
                    rn.isSelected = checkedItem.isSelected;
                }
            }));
        }
        else {
            if (this.selectOnCheck) {
                this.state.rowNodes.forEach((/**
                 * @param {?} rn
                 * @return {?}
                 */
                function (rn) {
                    if (_this.onlySelectSelf) {
                        if (!_this.selections || !_this.selections.length) {
                            rn.isSelected = false;
                        }
                        else {
                            if (_this.selections[0].id === rn.id) {
                                rn.isSelected = true;
                            }
                            else {
                                rn.isSelected = false;
                            }
                        }
                    }
                    else {
                        if (rn.isSelected != rn.isChecked) {
                            rn.isSelected = rn.isChecked;
                        }
                    }
                }));
            }
        }
    };
    /**
     * 级联选择节点
     * @param rowNode 当前节点
     * @param checked 是否钩选
     */
    /**
     * 级联选择节点
     * @private
     * @param {?} rowNode 当前节点
     * @param {?} checked 是否钩选
     * @return {?}
     */
    TreeTableComponent.prototype.cascadeNodes = /**
     * 级联选择节点
     * @private
     * @param {?} rowNode 当前节点
     * @param {?} checked 是否钩选
     * @return {?}
     */
    function (rowNode, checked) {
        /** @type {?} */
        var checkedNodes = this.propagateSelectionDown(rowNode, checked);
        checkedNodes = checkedNodes.concat(this.propagateSelectionUp(rowNode, checked));
        checkedNodes = this.getDiffrentData(checkedNodes);
        this.updateNodeStatus();
        this.updateAllCheckboxStatus();
        return checkedNodes.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return n.selectable;
        }));
    };
    /**
     * 行Checkbox 选中变化事件
     * @param event 鼠标点击事件对象
     * @param rowNode 当前树节点
     */
    /**
     * 行Checkbox 选中变化事件
     * @param {?} event 鼠标点击事件对象
     * @param {?} rowNode 当前树节点
     * @param {?} checked
     * @return {?}
     */
    TreeTableComponent.prototype.toggleNodeWithCheckbox = /**
     * 行Checkbox 选中变化事件
     * @param {?} event 鼠标点击事件对象
     * @param {?} rowNode 当前树节点
     * @param {?} checked
     * @return {?}
     */
    function (event, rowNode, checked) {
        this.state.rowNodes.find((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.id === rowNode.id; })).isChecked = checked;
        rowNode.indeterminate = false;
        /** @type {?} */
        var data = this.cascadeNodes(rowNode, checked);
        this.ttService.onChangeCheckboxStatus(rowNode);
        if (checked) {
            this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, nodes: data, instance: this });
        }
        else {
            this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, nodes: data, instance: this });
        }
        this.selectWhenChecked(rowNode, checked, event);
        if (this.onlySelectSelf && checked) {
            this.selectedRow = rowNode.node;
        }
        this.checkeds = tslib_1.__spread(this.checkeds);
        this.detectChanges();
        event.stopPropagation();
    };
    /**
     * 全选
     * @param event 鼠标事件对象
     * @param checked 是否选中
     */
    /**
     * 全选
     * @param {?} event 鼠标事件对象
     * @param {?} checked 是否选中
     * @return {?}
     */
    TreeTableComponent.prototype.toggleNodesWithCheckbox = /**
     * 全选
     * @param {?} event 鼠标事件对象
     * @param {?} checked 是否选中
     * @return {?}
     */
    function (event, checked) {
        if (checked) {
            if (this.data && this.data.length) {
                this.checkAllNodes({ originalEvent: event, checked: checked, instance: this });
            }
        }
        else {
            this.selections = null;
            this.unCheckAllNodes({ originalEvent: event, checked: checked, instance: this });
        }
        this.detectChanges();
    };
    /** 更新全选checkbox 的状态 */
    /**
     * 更新全选checkbox 的状态
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.updateAllCheckboxStatus = /**
     * 更新全选checkbox 的状态
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var status = this.isIndeterminate();
        if (this.showCheckAll && !this.singleSelect && this.showCheckbox) {
            if (status !== undefined) {
                if (this.headerCheckboxCmp) {
                    this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = status === 2;
                    this.headerCheckboxCmp.checked = status === 1;
                }
            }
        }
    };
    /** 更新父节点checkbox 选中状态 */
    /**
     * 更新父节点checkbox 选中状态
     * @private
     * @param {?} rowNode
     * @return {?}
     */
    TreeTableComponent.prototype.updateParentCheckboxStatus = /**
     * 更新父节点checkbox 选中状态
     * @private
     * @param {?} rowNode
     * @return {?}
     */
    function (rowNode) {
        var _this = this;
        /** @type {?} */
        var pNodes = [];
        rowNode.parents.forEach((/**
         * @param {?} rnid
         * @return {?}
         */
        function (rnid) {
            /** @type {?} */
            var rn = _this.findRowNode(rnid);
            if (rn) {
                pNodes.push(rn);
            }
        }));
        pNodes.reverse().forEach((/**
         * @param {?} rn
         * @return {?}
         */
        function (rn) {
            _this.updateCheckboxStatus(rn);
        }));
    };
    /** 更新N个父节点复选框中的选中状态 */
    /**
     * 更新N个父节点复选框中的选中状态
     * @private
     * @param {?} parentIds
     * @return {?}
     */
    TreeTableComponent.prototype.updateParentsCheckStatus = /**
     * 更新N个父节点复选框中的选中状态
     * @private
     * @param {?} parentIds
     * @return {?}
     */
    function (parentIds) {
        var _this = this;
        /** @type {?} */
        var pids = [];
        parentIds.forEach((/**
         * @param {?} ids
         * @return {?}
         */
        function (ids) {
            pids = tslib_1.__spread(pids, ids);
        }));
        pids = Array.from(new Set(pids));
        /** @type {?} */
        var pRowNodes = this.findRowNodes(pids);
        pRowNodes.sort((/**
         * @param {?} r
         * @param {?} n
         * @return {?}
         */
        function (r, n) {
            return n.level - r.level;
        })).forEach((/**
         * @param {?} rn
         * @return {?}
         */
        function (rn) {
            _this.updateCheckboxStatus(rn);
        }));
    };
    /** 更新节点中checkbox的状态 */
    /**
     * 更新节点中checkbox的状态
     * @private
     * @param {?} rowNode
     * @return {?}
     */
    TreeTableComponent.prototype.updateCheckboxStatus = /**
     * 更新节点中checkbox的状态
     * @private
     * @param {?} rowNode
     * @return {?}
     */
    function (rowNode) {
        /** @type {?} */
        var status = this.isIndeterminate(rowNode);
        if (status !== undefined && rowNode.node.selectable) {
            rowNode.indeterminate = status === 2;
            this.ttService.onChangeCheckboxStatus(rowNode);
        }
    };
    /** 判断指定节点checkbox 的状态 */
    /**
     * 判断指定节点checkbox 的状态
     * @private
     * @param {?=} rowNode
     * @return {?}
     */
    TreeTableComponent.prototype.isIndeterminate = /**
     * 判断指定节点checkbox 的状态
     * @private
     * @param {?=} rowNode
     * @return {?}
     */
    function (rowNode) {
        /** @type {?} */
        var status = this.getCheckboxStatus(rowNode);
        if (status !== undefined) {
            /** @type {?} */
            var checked = false;
            if (status === 2) {
                checked = false;
            }
            else {
                checked = !!status;
            }
            if (rowNode && rowNode.node.selectable) {
                rowNode.isChecked = checked;
                this.setCheckeds(rowNode, false);
            }
        }
        return status;
    };
    /**
     * 返回父级节点checkbox 的状态。0：不选中， 1： 选中， 2：不确定
     * @param rowNode 父级节点；为空时返回全选checkbox 的状态
     */
    /**
     * 返回父级节点checkbox 的状态。0：不选中， 1： 选中， 2：不确定
     * @private
     * @param {?=} rowNode 父级节点；为空时返回全选checkbox 的状态
     * @return {?}
     */
    TreeTableComponent.prototype.getCheckboxStatus = /**
     * 返回父级节点checkbox 的状态。0：不选中， 1： 选中， 2：不确定
     * @private
     * @param {?=} rowNode 父级节点；为空时返回全选checkbox 的状态
     * @return {?}
     */
    function (rowNode) {
        var _this = this;
        /** @type {?} */
        var uncheckedLength = 0;
        /** @type {?} */
        var checkedLength = 0;
        /** @type {?} */
        var len = 0;
        /** @type {?} */
        var childNodes = [];
        if (rowNode) {
            childNodes = rowNode.node.children || [];
        }
        else {
            childNodes = this.state.rowNodes;
        }
        len = childNodes.length;
        childNodes.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var rn = n;
            if (rowNode) {
                rn = _this.findRowNode(n.data[_this.idField]);
            }
            if (rn && !rn.indeterminate) {
                if (rn.isChecked) {
                    checkedLength++;
                }
                else {
                    uncheckedLength++;
                }
            }
        }));
        if (len === 0) {
            return undefined;
        }
        /** @type {?} */
        var flag = 0;
        if (uncheckedLength === len) {
            flag = 0;
        }
        else {
            if (checkedLength === len) {
                flag = 1;
            }
            else {
                flag = 2;
            }
        }
        return flag;
    };
    /**
     * @private
     * @param {?} node
     * @param {?} treeNodes
     * @return {?}
     */
    TreeTableComponent.prototype.findIndexIn = /**
     * @private
     * @param {?} node
     * @param {?} treeNodes
     * @return {?}
     */
    function (node, treeNodes) {
        var _this = this;
        /** @type {?} */
        var index = -1;
        if (treeNodes && treeNodes.length) {
            index = treeNodes.findIndex((/**
             * @param {?} v
             * @param {?} i
             * @return {?}
             */
            function (v, i) {
                return _this.equals(v, node);
            }));
        }
        return index;
    };
    /**
     * 在选中的集合中查找指定节点的索引
     * @param node 树节点
     */
    /**
     * 在选中的集合中查找指定节点的索引
     * @param {?} node 树节点
     * @return {?}
     */
    TreeTableComponent.prototype.findIndexInCheckeds = /**
     * 在选中的集合中查找指定节点的索引
     * @param {?} node 树节点
     * @return {?}
     */
    function (node) {
        return this.findIndexIn(node, this.checkeds);
    };
    /**
     * 在选中的集合中查找指定节点的索引
     * @param node 树节点
     */
    /**
     * 在选中的集合中查找指定节点的索引
     * @param {?} node 树节点
     * @return {?}
     */
    TreeTableComponent.prototype.findIndexInSelection = /**
     * 在选中的集合中查找指定节点的索引
     * @param {?} node 树节点
     * @return {?}
     */
    function (node) {
        return this.findIndexIn(node, this.selections);
    };
    /** 对比两个节点是否同一个节点 */
    /**
     * 对比两个节点是否同一个节点
     * @param {?} target
     * @param {?} source
     * @return {?}
     */
    TreeTableComponent.prototype.equals = /**
     * 对比两个节点是否同一个节点
     * @param {?} target
     * @param {?} source
     * @return {?}
     */
    function (target, source) {
        return target.data[this.idField] === source.data[this.idField];
    };
    /**
     * 展开所有节点
     * @param rowNode 展开此节点下的所有节点；如果为空，则展开所有节点
     * @param deep 设置为true 时，当前节点下的所有子节点全部展开, 默认 false
     * @param childrenEmptyEmitExpand  当没有子节点是否触发展开事件，默认为 true
     */
    /**
     * 展开所有节点
     * @param {?=} treeNode
     * @param {?=} deep 设置为true 时，当前节点下的所有子节点全部展开, 默认 false
     * @param {?=} childrenEmptyEmitExpand  当没有子节点是否触发展开事件，默认为 true
     * @return {?}
     */
    TreeTableComponent.prototype.toggleExpand = /**
     * 展开所有节点
     * @param {?=} treeNode
     * @param {?=} deep 设置为true 时，当前节点下的所有子节点全部展开, 默认 false
     * @param {?=} childrenEmptyEmitExpand  当没有子节点是否触发展开事件，默认为 true
     * @return {?}
     */
    function (treeNode, deep, childrenEmptyEmitExpand) {
        var _this = this;
        if (deep === void 0) { deep = false; }
        if (childrenEmptyEmitExpand === void 0) { childrenEmptyEmitExpand = true; }
        if (treeNode) {
            treeNode.expanded = !treeNode.expanded;
            this.updateNodeProperty(treeNode.id, { expanded: treeNode.expanded });
            this.toggleVisible(treeNode);
            if (this.virtualized) {
                if (treeNode.children && treeNode.children.length) {
                    this.renderVirtualRowNodes();
                }
            }
            if (treeNode.expanded) {
                if (childrenEmptyEmitExpand || (treeNode.children && treeNode.children.length)) {
                    this.expand.emit(treeNode);
                }
                else {
                    treeNode.expanded = !treeNode.expanded;
                    return;
                }
            }
            else {
                this.collapse.emit(treeNode);
            }
            if (deep) {
                if (treeNode.children && treeNode.children.length) {
                    treeNode.children.forEach((/**
                     * @param {?} row
                     * @param {?} i
                     * @return {?}
                     */
                    function (row, i) {
                        _this.toggleExpand(row, deep, childrenEmptyEmitExpand);
                    }));
                }
            }
        }
        else {
            if (this.data && this.data.length) {
                this.data.forEach((/**
                 * @param {?} row
                 * @return {?}
                 */
                function (row) {
                    _this.toggleExpand(row);
                }));
            }
        }
        this.setNewColumnsWidth();
    };
    /**
     * @private
     * @param {?} treeNode
     * @return {?}
     */
    TreeTableComponent.prototype.toggleVisible = /**
     * @private
     * @param {?} treeNode
     * @return {?}
     */
    function (treeNode) {
        var _this = this;
        /** @type {?} */
        var rowNode = this.findRowNode(treeNode.id);
        if (rowNode) {
            /** @type {?} */
            var rid_1 = rowNode.id;
            /** @type {?} */
            var setRowVisible_1 = (/**
             * @param {?} rn
             * @param {?} visible
             * @return {?}
             */
            function (rn, visible) {
                /** @type {?} */
                var rnParent = _this.findRowNode(rn.parent.data[_this.idField]);
                if (rnParent) {
                    rn.visible = rnParent.visible && rnParent.node.expanded;
                }
                else {
                    rn.visible = visible;
                }
                /** @type {?} */
                var _r = _this.serializedValue.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.id === rn.id; }));
                if (_r) {
                    _r.visible = rn.visible;
                }
            });
            this.state.rowNodes.filter((/**
             * @param {?} rn
             * @return {?}
             */
            function (rn) { return rn.parents.indexOf(rid_1) > -1; })).forEach((/**
             * @param {?} rn
             * @return {?}
             */
            function (rn) {
                setRowVisible_1(rn, treeNode.expanded);
            }));
        }
    };
    /** 展开指定节点
     * emit: 触发展开事件
     * render: 数据重新加载
     */
    /**
     * 展开指定节点
     * emit: 触发展开事件
     * render: 数据重新加载
     * @param {?} id
     * @param {?=} emit
     * @param {?=} render
     * @return {?}
     */
    TreeTableComponent.prototype.expandNode = /**
     * 展开指定节点
     * emit: 触发展开事件
     * render: 数据重新加载
     * @param {?} id
     * @param {?=} emit
     * @param {?=} render
     * @return {?}
     */
    function (id, emit, render) {
        if (emit === void 0) { emit = true; }
        if (render === void 0) { render = true; }
        if (id) {
            /** @type {?} */
            var rowNode = this.findRowNode(id);
            if (rowNode) {
                rowNode.node.expanded = true;
                this.toggleVisible(rowNode.node);
                if (render) {
                    if (this.virtualized) {
                        if (rowNode.node.children && rowNode.node.children.length) {
                            this.renderVirtualRowNodes();
                        }
                    }
                    else {
                        this.detectChanges();
                    }
                }
                if (emit) {
                    this.expand.emit(rowNode.node);
                }
                this.setNewColumnsWidth();
            }
            else {
                this.writeConsole('Con\'t find tree node widh id:' + id, 'error');
            }
        }
    };
    /** 展开所有节点 */
    /**
     * 展开所有节点
     * @return {?}
     */
    TreeTableComponent.prototype.expandAll = /**
     * 展开所有节点
     * @return {?}
     */
    function () {
        this.state.rowNodes = this.state.rowNodes.map((/**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            row.node.expanded = true;
            row.visible = true;
            return row;
        }));
        if (this.virtualized) {
            this.renderVirtualRowNodes();
        }
        else {
            this.serializedValue = this.state.rowNodes;
        }
        this.setNewColumnsWidth();
        this.expandAllNodes.emit();
        this.detectChanges();
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TreeTableComponent.prototype.expandNodes = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        // const rowNode = this.findRowNode(id);
        // const rootNode = this.getRoot(id);
        // if (rowNode) {
        //     const treeNode = rowNode.node;
        //     treeNode.expanded = true;
        //     rowNode.visible = true;
        //     const parents = rowNode.parents;
        //     this.state.rowNodes.filter(n => n.parents.indexOf(rootNode.id) > -1).forEach(r => {
        //         if (parents.indexOf(r.id) > -1) {
        //             r.visible = true;
        //             r.node.expanded = true;
        //         }
        //     });
        //     this.detectChanges();
        // }
    };
    /** 展开指定节点下的所有节点 */
    /**
     * 展开指定节点下的所有节点
     * @param {?} rowNode
     * @return {?}
     */
    TreeTableComponent.prototype.expandAllNodesBy = /**
     * 展开指定节点下的所有节点
     * @param {?} rowNode
     * @return {?}
     */
    function (rowNode) {
        if (rowNode) {
            /** @type {?} */
            var treeNode = rowNode.node;
            treeNode.expanded = true;
            rowNode.visible = true;
            this.state.rowNodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.parents.indexOf(rowNode.id) > -1; })).forEach((/**
             * @param {?} r
             * @return {?}
             */
            function (r) {
                r.visible = true;
                r.node.expanded = true;
            }));
            this.detectChanges();
            this.setNewColumnsWidth();
        }
    };
    /** 折叠指定节点 */
    /**
     * 折叠指定节点
     * @param {?} id
     * @return {?}
     */
    TreeTableComponent.prototype.collapseNode = /**
     * 折叠指定节点
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            /** @type {?} */
            var rowNode = this.findRowNode(id);
            if (rowNode) {
                rowNode.node.expanded = false;
                this.toggleVisible(rowNode.node);
                this.detectChanges();
                this.setNewColumnsWidth();
                this.collapse.emit(rowNode.node);
            }
            else {
                this.writeConsole('Con\'t find tree node widh id:' + id, 'error');
            }
        }
    };
    /** 折叠所有节点 */
    /**
     * 折叠所有节点
     * @return {?}
     */
    TreeTableComponent.prototype.collapseAll = /**
     * 折叠所有节点
     * @return {?}
     */
    function () {
        this.state.rowNodes = this.state.rowNodes.map((/**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            row.node.expanded = false;
            row.visible = !row.parent;
            return row;
        }));
        if (this.virtualized) {
            this.renderVirtualRowNodes();
        }
        else {
            this.serializedValue = this.state.rowNodes;
        }
        this.collapseAllNodes.emit();
        this.detectChanges();
        this.setNewColumnsWidth();
    };
    /**
     * @return {?}
     */
    TreeTableComponent.prototype.getContainerOffset = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rect = this.containerElement.getBoundingClientRect();
        return {
            left: rect.left + document.body.scrollLeft,
            top: rect.top + document.body.scrollTop
        };
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TreeTableComponent.prototype.onColumnResizeBegin = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var containerLeft = Math.round(this.getContainerOffset().left);
        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerElement.scrollLeft);
        event.preventDefault();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TreeTableComponent.prototype.onColumnResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.resizableColumns) {
            /** @type {?} */
            var containerLeft = this.getContainerOffset().left;
            this.renderer.addClass(this.containerElement, 'ui-unselectable-text');
            this.resizerHelperVC.nativeElement.style.height = this.containerElement.offsetHeight + 'px';
            this.resizerHelperVC.nativeElement.style.top = 0 + 'px';
            this.resizerHelperVC.nativeElement.style.left = (event.pageX - containerLeft) + 'px';
            this.resizerHelperVC.nativeElement.style.display = 'block';
        }
    };
    /**
     * @param {?} event
     * @param {?} column
     * @return {?}
     */
    TreeTableComponent.prototype.onColumnResizeEnd = /**
     * @param {?} event
     * @param {?} column
     * @return {?}
     */
    function (event, column) {
        if (!this.resizerHelperVC.nativeElement.offsetLeft) {
            return;
        }
        // 偏移量
        /** @type {?} */
        var delta = this.resizerHelperVC.nativeElement.offsetLeft - this.lastResizerHelperX;
        // 列宽
        /** @type {?} */
        var columnWidth = column.offsetWidth;
        // 新宽度
        /** @type {?} */
        var newColumnWidth = columnWidth + delta;
        // 最小宽度
        /** @type {?} */
        var minWidth = column.style.minWidth || 15;
        /** @type {?} */
        var resizeColumnIndex = -1;
        if (column.id) {
            resizeColumnIndex = this.columns.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.id === column.id; }));
        }
        else {
            /** @type {?} */
            var colField_1 = column.getAttribute('field');
            if (colField_1) {
                resizeColumnIndex = this.columns.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.field === colField_1; }));
            }
        }
        if (!this.fitColumns) {
            this.resizeColGroup(this.headerTable.nativeElement, resizeColumnIndex, newColumnWidth, 0);
            this.resizeColGroup(this.bodyTable.nativeElement, resizeColumnIndex, newColumnWidth, 0);
            if (this.columns[resizeColumnIndex]) {
                this.columns[resizeColumnIndex].width = newColumnWidth;
            }
            this.sortColumnsByFixed(false);
            this.setCellWidthCss(this.allColumnsWidth(), 0, []);
            // this.setTableWidth(this.allColumnsWidth());
            // // update css.
            // const _colInfo = this.columns[resizeColumnIndex];
            // if (_colInfo) {
            //     const ruleName = this.columnCssName(_colInfo);
            //     const stylecss = ruleName + '{width:' + newColumnWidth + 'px}';
            //     this.utils.appendCssRules([stylecss], this.styleElement.sheet);
            // }
            // const nextColumn = this.columns[resizeColumnIndex + 1];
            // if (nextColumn && nextColumn.fixed) {
            //     const ruleName = this.columnCssName(nextColumn);
            //     const stylecss = ruleName + '{' + nextColumn.fixed + ':' + nextColumn[nextColumn.fixed] + 'px}';
            //     this.utils.appendCssRules([stylecss], this.styleElement.sheet);
            // }
        }
        else {
            if (newColumnWidth > minWidth) {
                /** @type {?} */
                var nextColumn = column.nextElementSibling;
                while (!nextColumn.offsetParent) {
                    nextColumn = nextColumn.nextElementSibling;
                }
                if (nextColumn) {
                    /** @type {?} */
                    var nextColumnWidth = nextColumn.offsetWidth - delta;
                    /** @type {?} */
                    var nextColumnMinWidth = nextColumn.style.minWidth || 15;
                    if (newColumnWidth > 15 && nextColumnWidth > nextColumnMinWidth) {
                        this.resizeColGroup(this.headerTable.nativeElement, resizeColumnIndex, newColumnWidth, nextColumnWidth);
                        this.resizeColGroup(this.bodyTable.nativeElement, resizeColumnIndex, newColumnWidth, nextColumnWidth);
                    }
                }
            }
        }
        this.resizerHelperVC.nativeElement.style.display = 'none';
        this.renderer.removeClass(this.containerElement, 'ui-unselectable-text');
        this.psRef.directiveRef.update();
    };
    /**
     * @param {?} table
     * @param {?} resizeColumnIndex
     * @param {?} newColumnWidth
     * @param {?=} nextColumnWidth
     * @return {?}
     */
    TreeTableComponent.prototype.resizeColGroup = /**
     * @param {?} table
     * @param {?} resizeColumnIndex
     * @param {?} newColumnWidth
     * @param {?=} nextColumnWidth
     * @return {?}
     */
    function (table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {
        if (table) {
            /** @type {?} */
            var colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;
            if (colGroup) {
                /** @type {?} */
                var col = colGroup.children[resizeColumnIndex];
                /** @type {?} */
                var nextCol = col.nextElementSibling;
                col.style.width = newColumnWidth + 'px';
                if (nextCol) {
                    if (nextColumnWidth && this.fitColumns) {
                        nextCol.style.width = nextColumnWidth + 'px';
                    }
                }
            }
            else {
                throw new Error('Scrollable tables require a colgroup to support resizable columns');
            }
        }
    };
    /**
     * @return {?}
     */
    TreeTableComponent.prototype.onSearch = /**
     * @return {?}
     */
    function () {
        this.state.searchRowNodes = null;
        this.state.searched = !!this.searchData.value;
        if (this.searchData.value) {
            this.searchData.value = this.searchData.value.trim();
        }
        this.search.emit(this.searchData);
    };
    /**
     * @param {?} node
     * @param {?=} parent
     * @return {?}
     */
    TreeTableComponent.prototype.insert = /**
     * @param {?} node
     * @param {?=} parent
     * @return {?}
     */
    function (node, parent) {
        if (parent) {
            if (!parent.children) {
                parent.children = [];
            }
            parent.children.push(node);
            this.expandNode(parent.data[this.idField]);
            this.appendNew.emit({ parent: parent });
        }
        else {
            this.data.push(node);
        }
        this.updateSerializedValue();
    };
    /**
     * @param {?} data
     * @param {?=} parent
     * @return {?}
     */
    TreeTableComponent.prototype.append = /**
     * @param {?} data
     * @param {?=} parent
     * @return {?}
     */
    function (data, parent) {
        if (data && data[this.idField]) {
            this.insert({ data: data, id: data[this.idField] }, parent);
        }
        else {
            this.writeConsole('Please set id value.', 'warn');
        }
    };
    /**
     * @private
     * @param {?} parent
     * @return {?}
     */
    TreeTableComponent.prototype.emitAppendNew = /**
     * @private
     * @param {?} parent
     * @return {?}
     */
    function (parent) {
        if (this.virtualized) {
            /** @type {?} */
            var nodePosY = this.psRef.directiveRef.elementRef.nativeElement.scrollTop;
            this.updateSerializedValue(nodePosY);
        }
        else {
            this.updateSerializedValue();
        }
    };
    /**
     * @param {?} nodes
     * @param {?} parent
     * @param {?=} emit
     * @return {?}
     */
    TreeTableComponent.prototype.appendChildren = /**
     * @param {?} nodes
     * @param {?} parent
     * @param {?=} emit
     * @return {?}
     */
    function (nodes, parent, emit) {
        if (emit === void 0) { emit = true; }
        var _a;
        if (nodes && nodes.length) {
            if (parent) {
                (_a = parent.children).push.apply(_a, tslib_1.__spread(nodes));
                this.emitAppendNew(parent);
                if (emit) {
                    this.appendNew.emit({ parent: parent });
                }
            }
            else {
                throw new Error('未找到父级节点');
            }
        }
        else {
            this.updateSerializedValue();
            this.writeConsole('添加子节点的数据为空', 'warn');
        }
    };
    /**
     * @param {?} nodes
     * @param {?} parent
     * @param {?=} emit
     * @return {?}
     */
    TreeTableComponent.prototype.loadChildren = /**
     * @param {?} nodes
     * @param {?} parent
     * @param {?=} emit
     * @return {?}
     */
    function (nodes, parent, emit) {
        if (emit === void 0) { emit = true; }
        if (parent) {
            parent.children = nodes || [];
            this.emitAppendNew(parent);
            if (emit) {
                this.appendNew.emit({ parent: parent });
            }
        }
    };
    /**
     * @param {?} nodeId
     * @return {?}
     */
    TreeTableComponent.prototype.remove = /**
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        var _this = this;
        if (nodeId) {
            /** @type {?} */
            var rowNode = this.findRowNode(nodeId);
            if (rowNode) {
                // remove(this.state.rowNodes, (n) => {
                //     return n.id === nodeId;
                // });
                if (this.selectValue === nodeId) {
                    this.selectedRow = null;
                    this.selectValue = null;
                }
                if (rowNode.parent) {
                    remove(rowNode.parent.children, (/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return n.data[_this.idField] === nodeId;
                    }));
                }
                else {
                    remove(this.state.rowNodes, (/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return n.id === nodeId;
                    }));
                    this.data = this.data.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.data[_this.idField] !== nodeId; }));
                }
                this.updateSerializedValue();
                this.detectChanges();
                this.ttService.onRemove(rowNode);
                this.removed.emit(rowNode);
            }
        }
    };
    /**
     * @param {?} nodeId
     * @param {?} data
     * @return {?}
     */
    TreeTableComponent.prototype.update = /**
     * @param {?} nodeId
     * @param {?} data
     * @return {?}
     */
    function (nodeId, data) {
        if (nodeId && data) {
            /** @type {?} */
            var rowNode = this.findRowNode(nodeId);
            if (rowNode) {
                rowNode.node.data = extend(rowNode.node.data, data);
                this.detectChanges();
                this.ttService.onUpdate(rowNode);
                this.updated.emit(rowNode);
            }
        }
    };
    /**
     * @param {?} nodeid
     * @param {?} property
     * @return {?}
     */
    TreeTableComponent.prototype.updateNodeProperty = /**
     * @param {?} nodeid
     * @param {?} property
     * @return {?}
     */
    function (nodeid, property) {
        /** @type {?} */
        var rowNode = this.findRowNode(nodeid);
        if (rowNode && property) {
            Object.keys(property).forEach((/**
             * @param {?} k
             * @return {?}
             */
            function (k) {
                rowNode.node[k] = property[k];
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.setScorllBodyHeight = /**
     * @private
     * @return {?}
     */
    function () {
        this.scorllBodyHeight = this.height;
        if (this.showFilterBar) {
            this.scorllBodyHeight = this.scorllBodyHeight - 46;
        }
        if (this.fixedHeader && this.showHeader) {
            if (this.headerBox && (this.headerWrap || this.useGroupHeader)) {
                /** @type {?} */
                var hh = this.headerBox.nativeElement.clientHeight;
                this.scorllBodyHeight = this.scorllBodyHeight - hh;
            }
            else {
                // 宽松版时，表头高度增高，需要按实际取得表头高度
                /** @type {?} */
                var _headerHeight = this.headerHeight;
                /** @type {?} */
                var themesKey = localStorage.getItem('gsp_rtf_themSKey');
                if (themesKey === 'loose' && this.headerBox) {
                    _headerHeight = this.headerBox.nativeElement.getBoundingClientRect().height;
                }
                this.scorllBodyHeight = this.scorllBodyHeight - _headerHeight;
            }
        }
        if (this.pagination) {
            this.scorllBodyHeight = this.scorllBodyHeight - this.pagerHeight;
        }
        this.detectChanges();
    };
    /**
     * @private
     * @param {?} w
     * @return {?}
     */
    TreeTableComponent.prototype.setWidth = /**
     * @private
     * @param {?} w
     * @return {?}
     */
    function (w) {
        this.width = w;
    };
    /**
     * @param {?=} size
     * @return {?}
     */
    TreeTableComponent.prototype.resize = /**
     * @param {?=} size
     * @return {?}
     */
    function (size) {
        if (size) {
            /** @type {?} */
            var w = parseInt('' + size.width, 10);
            /** @type {?} */
            var h = parseInt('' + size.height, 10);
            if (this.width === w && this.height === h) {
                if (this.state.scrollY) {
                    this.psRef.directiveRef.scrollToY(this.state.scrollY);
                }
                if (this.state.scrollX) {
                    this.psRef.directiveRef.scrollToX(this.state.scrollX);
                }
                return;
            }
            this.setWidth(w);
            this.height = h;
        }
        this.setScorllBodyHeight();
        if (this.data && this.data.length) {
            this.renderVirtualRowNodes();
        }
        // setTimeout(() => {
        //     if (this.psRef) {
        //         this.psRef.directiveRef.update();
        //     }
        // }, 100);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    TreeTableComponent.prototype.loadData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (this.showLines) {
            this.isLoadNewDataSetEmpty = true;
            this.data = [];
            this.isLoadNewDataSetEmpty = false;
        }
        this.data = data;
    };
    /**
     * @return {?}
     */
    TreeTableComponent.prototype.empty = /**
     * @return {?}
     */
    function () {
        this.data = [];
    };
    /**
     * @return {?}
     */
    TreeTableComponent.prototype.getCurrentAllRowNodes = /**
     * @return {?}
     */
    function () {
        if (this.state.searched && this.state.searchRowNodes && this.state.searchRowNodes.length) {
            return this.state.searchRowNodes || this.state.rowNodes;
        }
        else {
            return this.state.rowNodes;
        }
    };
    /**
     * @param {?=} detectChanges
     * @return {?}
     */
    TreeTableComponent.prototype.clearAll = /**
     * @param {?=} detectChanges
     * @return {?}
     */
    function (detectChanges) {
        var _this = this;
        if (detectChanges === void 0) { detectChanges = true; }
        this.state.rowNodes.filter((/**
         * @param {?} rn
         * @return {?}
         */
        function (rn) { return rn.indeterminate; })).forEach((/**
         * @param {?} rn
         * @return {?}
         */
        function (rn) {
            rn.indeterminate = false;
            _this.ttService.onChangeCheckboxStatus(rn);
        }));
        this.state.rowNodes = this.state.rowNodes.map((/**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            row.isChecked = false;
            row.isSelected = false;
            row.indeterminate = false;
            return row;
        }));
        // if (this.searchData && this.searchData.value) {
        if (this.state.searched && this.state.searchRowNodes && this.state.searchRowNodes.length) {
            this.serializedValue = this.state.searchRowNodes.map((/**
             * @param {?} row
             * @return {?}
             */
            function (row) {
                row.isChecked = false;
                row.isSelected = false;
                row.indeterminate = false;
                return row;
            }));
        }
        this.checkeds = [];
        this.selections = [];
        this.selectedRow = undefined;
        if (this.showCheckAll && this.headerCheckboxCmp) {
            this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = false;
            this.headerCheckboxCmp.checked = false;
        }
        if (detectChanges) {
            this.detectChanges();
        }
        return this;
    };
    /**
     * @return {?}
     */
    TreeTableComponent.prototype.detectChanges = /**
     * @return {?}
     */
    function () {
        this.cdRef.markForCheck();
        // tslint:disable-next-line:no-string-literal
        if (!this.cdRef['destroyed']) {
            this.cdRef.detectChanges();
        }
        return this;
    };
    /**
     * @return {?}
     */
    TreeTableComponent.prototype.clearCheckeds = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.checkeds && this.checkeds.length) {
            this.findRowNodes(this.checkeds.map((/**
             * @param {?} tn
             * @return {?}
             */
            function (tn) { return tn.data[_this.idField]; }))).forEach((/**
             * @param {?} rn
             * @return {?}
             */
            function (rn) {
                rn.isChecked = false;
            }));
        }
        this.checkeds = [];
        if (this.showCheckAll && this.headerCheckboxCmp) {
            this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = false;
            this.headerCheckboxCmp.checked = false;
        }
        return this;
    };
    /**
     * @return {?}
     */
    TreeTableComponent.prototype.clearSelections = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.serializedValue && this.serializedValue.length) {
            this.serializedValue.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                n.isSelected = false;
            }));
        }
        this.state.rowNodes.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            n.isSelected = false;
        }));
        if (this.selections && this.selections.length) {
            /** @type {?} */
            var nodeIds = this.selections.map((/**
             * @param {?} tn
             * @return {?}
             */
            function (tn) { return tn.data[_this.idField]; }));
            this.findRowNodes(nodeIds).forEach((/**
             * @param {?} rn
             * @return {?}
             */
            function (rn) {
                rn.isSelected = false;
                if (_this.singleSelect) {
                    rn.isChecked = false;
                }
            }));
        }
        this.selections = undefined;
        this.selectedRow = undefined;
        return this;
    };
    /** 选中第1个可以选中的节点 */
    /**
     * 选中第1个可以选中的节点
     * @return {?}
     */
    TreeTableComponent.prototype.selectFirstNode = /**
     * 选中第1个可以选中的节点
     * @return {?}
     */
    function () {
        if (this.state.rowNodes && this.state.rowNodes.length) {
            /** @type {?} */
            var firstCanSelectNode = this.state.rowNodes.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.node.selectable; }));
            if (firstCanSelectNode) {
                this.selectNode(firstCanSelectNode.id);
            }
        }
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    TreeTableComponent.prototype.scrollToCurrentRow = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var trId = 'rownode-' + id;
        // const trEle =    document.getElementById(trId);
        /** @type {?} */
        var trEle = this.el.nativeElement.querySelector('#' + trId) || document.getElementById(trId);
        if (trEle && trEle.closest('.farris-treetable') && trEle.closest('.farris-treetable').id === this.id) {
            if (!this.isElementInViewport(trEle)) {
                if (trEle.scrollIntoViewIfNeeded) {
                    trEle.scrollIntoViewIfNeeded();
                    return true;
                }
                /** @type {?} */
                var browserInfo = this.utils.getBrowserType();
                if (browserInfo.ff && this.utils.getFFVer() < 58) {
                    trEle.scrollIntoView();
                }
                else {
                    trEle.scrollIntoView({ block: 'nearest', inline: 'nearest' });
                }
            }
            else {
                trEle.scrollIntoView({ block: 'nearest' });
            }
            return true;
        }
        return false;
    };
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    TreeTableComponent.prototype.isElementInViewport = /**
     * @private
     * @param {?} el
     * @return {?}
     */
    function (el) {
        /** @type {?} */
        var containerEl = this.el.nativeElement.querySelector('.farris-treetable-body');
        if (!containerEl) {
            return false;
        }
        /** @type {?} */
        var container = containerEl.getBoundingClientRect();
        /** @type {?} */
        var viewPortHeight = container.height;
        /** @type {?} */
        var offsetTop = el.offsetTop + this.topHideHeight;
        /** @type {?} */
        var scrollTop = this.psRef.directiveRef.elementRef.nativeElement.scrollTop;
        /** @type {?} */
        var top = offsetTop - scrollTop;
        return top >= 0 && top <= viewPortHeight;
    };
    /**
     * @private
     * @param {?} nodeId
     * @return {?}
     */
    TreeTableComponent.prototype._scrollToNode = /**
     * @private
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        this.scrollToCurrentNode(nodeId);
    };
    /**
     * @param {?=} nodeid
     * @return {?}
     */
    TreeTableComponent.prototype.scrollToCurrentNode = /**
     * @param {?=} nodeid
     * @return {?}
     */
    function (nodeid) {
        var _this = this;
        if (nodeid === void 0) { nodeid = ''; }
        /** @type {?} */
        var id = nodeid;
        if (!nodeid && this.selectedRow) {
            id = this.selectedRow.id;
        }
        /** @type {?} */
        var result = this.scrollToCurrentRow(id);
        if (!result) {
            /** @type {?} */
            var rowNode = this.findRowNode(id);
            /** @type {?} */
            var showRowsOnePager = Math.ceil(this.scorllBodyHeight / this.rowHeight) + 1;
            if (rowNode.parents && rowNode.parents.length) {
                rowNode.parents.forEach((/**
                 * @param {?} pid
                 * @return {?}
                 */
                function (pid) {
                    _this.expandNode(pid, false, false);
                }));
            }
            /** @type {?} */
            var rowIndex = this.state.rowNodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible; })).findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.id === id; }));
            if (rowIndex < showRowsOnePager) {
                if (this.virtualized) {
                    this.renderData(0);
                }
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.scrollToCurrentRow(id);
                }));
                return;
            }
            /** @type {?} */
            var top_1 = rowIndex * this.rowHeight;
            if (this.virtualized) {
                this.renderData(top_1 - this.rowHeight);
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.scrollToCurrentRow(id);
                    if (_this.psRef && _this.psRef.directiveRef) {
                        _this.psRef.directiveRef.elementRef.nativeElement.scrollTop += 1;
                    }
                }), 50);
            }
            else {
                this.scrollToY(top_1 - this.rowHeight);
                this.scrollToCurrentRow(id);
            }
        }
    };
    /** 选中指定ID 的节点,
     * detectChanges: 触发脏值检查，默认为 true
     * gotocurrent: 使用选中节点可见，默认为 true
     */
    /**
     * 选中指定ID 的节点,
     * detectChanges: 触发脏值检查，默认为 true
     * gotocurrent: 使用选中节点可见，默认为 true
     * @param {?} id
     * @param {?=} detectChanges
     * @param {?=} gotocurrent
     * @return {?}
     */
    TreeTableComponent.prototype.selectNode = /**
     * 选中指定ID 的节点,
     * detectChanges: 触发脏值检查，默认为 true
     * gotocurrent: 使用选中节点可见，默认为 true
     * @param {?} id
     * @param {?=} detectChanges
     * @param {?=} gotocurrent
     * @return {?}
     */
    function (id, detectChanges, gotocurrent) {
        var _this = this;
        if (detectChanges === void 0) { detectChanges = true; }
        if (gotocurrent === void 0) { gotocurrent = true; }
        if (!id) {
            return this;
        }
        /** @type {?} */
        var node = this.findRowNode(id);
        /** @type {?} */
        var emit = !this.selectedRow || (this.selectedRow && id !== this.selectedRow.id);
        if (node && emit) {
            node.isSelected = true;
            if (this.singleSelect || this.onlySelectSelf) {
                this.clearSelections();
                node.isSelected = true;
                this.selections = [node.node];
                if (this.checkOnSelect && this.showCheckbox) {
                    node.isChecked = true;
                    if (this.multiSelect) {
                        this.setCheckeds(node);
                    }
                    else {
                        this.clearCheckeds();
                        this.checkeds = [node.node];
                    }
                    if (this.cascadeCheck && this.cascadeUp) {
                        this.updateParentCheckboxStatus(node);
                    }
                }
            }
            else {
                this.setSelections(node);
            }
            this.selectedRow = node.node;
            this.selectNodeChangedSubject.next(id);
            this.nodeSelected.emit({ node: node.node, instance: this });
            if (this.serializedValue.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.id == _this.selectedRow.id; }))) {
                this.serializedValue.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.id == _this.selectedRow.id; })).isSelected = true;
            }
            if (detectChanges) {
                this.detectChanges();
            }
            if (gotocurrent && this.fixedHeader) {
                this.scrollToCurrentNode();
            }
        }
        else {
            if (!node) {
                this.selectedRow = null;
                this.writeConsole("\u672A\u627E\u5230ID\u4E3A " + id + " \u7684\u6570\u636E\uFF01\uFF01");
            }
        }
        return this;
    };
    /** 取消选中 */
    /**
     * 取消选中
     * @param {?} id
     * @param {?=} detectChanges
     * @return {?}
     */
    TreeTableComponent.prototype.unSelectNode = /**
     * 取消选中
     * @param {?} id
     * @param {?=} detectChanges
     * @return {?}
     */
    function (id, detectChanges) {
        if (detectChanges === void 0) { detectChanges = true; }
        /** @type {?} */
        var rowNode = this.findRowNode(id);
        if (rowNode) {
            rowNode.isSelected = false;
            if (this.singleSelect) {
                this.clearSelections();
                this.selectedRow = null;
                rowNode.isChecked = false;
                this.selections = [];
            }
            else {
                if (this.onlySelectSelf) {
                    this.selections = [];
                }
                else {
                    this.setSelections(rowNode);
                }
            }
            if (detectChanges) {
                this.detectChanges();
            }
            this.nodeUnSelect.emit({ node: rowNode.node, instance: this });
        }
        else {
            this.writeConsole("\u672A\u627E\u5230ID\u4E3A" + id + "\u7684\u6570\u636E\uFF01\uFF01");
        }
    };
    /** 选中多行数据 */
    /**
     * 选中多行数据
     * @param {?} ids
     * @param {?=} detectChanges
     * @param {?=} emitNodeSelected
     * @return {?}
     */
    TreeTableComponent.prototype.selectNodes = /**
     * 选中多行数据
     * @param {?} ids
     * @param {?=} detectChanges
     * @param {?=} emitNodeSelected
     * @return {?}
     */
    function (ids, detectChanges, emitNodeSelected) {
        var _this = this;
        if (detectChanges === void 0) { detectChanges = true; }
        if (emitNodeSelected === void 0) { emitNodeSelected = false; }
        if (ids && ids.length) {
            /** @type {?} */
            var nodes = this.findRowNodes(ids).map((/**
             * @param {?} rn
             * @return {?}
             */
            function (rn) {
                rn.isSelected = true;
                _this.setSelections(rn);
                return rn.node;
            }));
            this.selections = tslib_1.__spread(this.selections);
            if (detectChanges) {
                this.detectChanges();
            }
            this.selectNodeChangedSubject.next(ids.join(','));
            if (emitNodeSelected) {
                this.nodeSelected.emit({ node: nodes, instance: this });
            }
        }
        return this;
    };
    /** 取消选中 */
    /**
     * 取消选中
     * @param {?=} ids
     * @return {?}
     */
    TreeTableComponent.prototype.unSelectNodes = /**
     * 取消选中
     * @param {?=} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        if (ids && ids.length) {
            /** @type {?} */
            var rownodes = this.findRowNodes(ids);
            if (rownodes && rownodes.length) {
                rownodes.forEach((/**
                 * @param {?} rn
                 * @return {?}
                 */
                function (rn) {
                    rn.isSelected = false;
                    _this.setSelections(rn);
                }));
                this.selections = tslib_1.__spread(this.selections);
                this.detectChanges();
                this.nodeUnSelect.emit({ node: rownodes.map((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) { return r.node; })), instance: this });
            }
        }
        else {
            this.clearSelections();
            this.detectChanges();
        }
    };
    /**
     * 钩选指定的节点
     * @param updateParentCheckboxStatus: 是否更新父级节点checkbox 状态, 默认为 true
     * @param detectChanges 触发变更检测。默认为 true
     */
    /**
     * 钩选指定的节点
     * @param {?} id
     * @param {?=} updateParentCheckboxStatus
     * @param {?=} detectChanges 触发变更检测。默认为 true
     * @return {?}
     */
    TreeTableComponent.prototype.checkedNode = /**
     * 钩选指定的节点
     * @param {?} id
     * @param {?=} updateParentCheckboxStatus
     * @param {?=} detectChanges 触发变更检测。默认为 true
     * @return {?}
     */
    function (id, updateParentCheckboxStatus, detectChanges) {
        if (updateParentCheckboxStatus === void 0) { updateParentCheckboxStatus = true; }
        if (detectChanges === void 0) { detectChanges = true; }
        if (this.isEnableMultiSelect()) {
            /** @type {?} */
            var node = this.findRowNode(id);
            if (node) {
                node.isChecked = true;
                if (!this.isChecked(node.node)) {
                    // this.checkeds = [...this.checkeds || [], node.node];
                    this.setCheckeds(node, false);
                    if (updateParentCheckboxStatus && this.cascadeCheck && this.cascadeUp) {
                        this.updateParentCheckboxStatus(node);
                    }
                }
                if (detectChanges) {
                    this.detectChanges();
                }
                this.nodeChecked.emit({ originalEvent: null, node: node.node, instance: this });
            }
            else {
                this.writeConsole("\u672A\u627E\u5230ID\u4E3A" + id + "\u7684\u6570\u636E\uFF01\uFF01");
            }
        }
    };
    /**
     * @param {?} id
     * @param {?=} updateParentCheckboxStatus
     * @return {?}
     */
    TreeTableComponent.prototype.unCheckedNode = /**
     * @param {?} id
     * @param {?=} updateParentCheckboxStatus
     * @return {?}
     */
    function (id, updateParentCheckboxStatus) {
        if (updateParentCheckboxStatus === void 0) { updateParentCheckboxStatus = true; }
        if (this.isEnableMultiSelect()) {
            /** @type {?} */
            var rownode = this.findRowNode(id);
            if (rownode) {
                rownode.isChecked = false;
                this.setCheckeds(rownode);
                if (this.selectOnCheck) {
                    rownode.isSelected = false;
                    this.setSelections(rownode);
                }
                if (this.selectedRow && this.selectedRow.id === id) {
                    this.selectedRow = null;
                }
                if (this.singleSelect || !this.cascadeCheck) {
                    this.updateNodeStatus();
                    if (updateParentCheckboxStatus && this.cascadeCheck && this.cascadeUp) {
                        this.updateParentCheckboxStatus(rownode);
                    }
                    if (this.checkValues) {
                        this.checkValues = this.checkValues.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n !== id; }));
                        this.checkValuesChange.emit(this.checkValues);
                    }
                    this.detectChanges();
                    this.nodeUnChecked.emit({ node: rownode, instance: this });
                }
                else {
                    /** @type {?} */
                    var unNodes = this.cascadeNodes(rownode, false);
                    this.checkeds = tslib_1.__spread(this.checkeds);
                    this.checkValuesChange.emit(this.checkValues);
                    this.detectChanges();
                    this.nodeUnChecked.emit({ node: rownode, nodes: unNodes, instance: this });
                }
            }
            else {
                this.writeConsole("\u672A\u627E\u5230ID\u4E3A" + id + "\u7684\u6570\u636E\uFF01\uFF01");
            }
        }
    };
    /**
     * @private
     * @param {?} ids
     * @param {?} checked
     * @return {?}
     */
    TreeTableComponent.prototype._checkedNodes = /**
     * @private
     * @param {?} ids
     * @param {?} checked
     * @return {?}
     */
    function (ids, checked) {
        var _this = this;
        /** @type {?} */
        var parentIDS = [];
        /** @type {?} */
        var nodes = this.findRowNodes(ids).map((/**
         * @param {?} rn
         * @return {?}
         */
        function (rn) {
            parentIDS.push(rn.parents);
            if (rn.node.selectable) {
                rn.isChecked = checked;
                _this.setCheckeds(rn, false);
            }
            return rn.node;
        }));
        this.checkeds = tslib_1.__spread(this.checkeds);
        if (this.cascadeCheck && this.cascadeUp) {
            // 更新父节点复框的选中状态
            this.updateParentsCheckStatus(parentIDS);
        }
        return nodes;
    };
    /** 批量选中节点
     * @param ids: id 集合
     * @param detectChanges: boolean  默认为 true ,是否触发变更检测
     * closeCascade:  执行取消钩选时是否关闭级联功能。默认为 false
     *      设为true时，钩选将禁用级联的功能，仅处理当前节点的选中状态。执行完毕后，恢复原先的级联选项。
     */
    /**
     * 批量选中节点
     * @param {?} ids
     * @param {?=} detectChanges
     * @param {?=} emit
     * @param {?=} closeCascade
     * @return {?}
     */
    TreeTableComponent.prototype.checkedNodes = /**
     * 批量选中节点
     * @param {?} ids
     * @param {?=} detectChanges
     * @param {?=} emit
     * @param {?=} closeCascade
     * @return {?}
     */
    function (ids, detectChanges, emit, closeCascade) {
        if (detectChanges === void 0) { detectChanges = true; }
        if (emit === void 0) { emit = true; }
        if (this.isEnableMultiSelect()) {
            if (ids && ids.length) {
                /** @type {?} */
                var _cascade = this.cascadeCheck;
                if (closeCascade && _cascade) {
                    this.cascadeCheck = false;
                }
                /** @type {?} */
                var nodes = this._checkedNodes(ids, true);
                if (closeCascade && _cascade) {
                    // 恢复级联
                    this.cascadeCheck = true;
                }
                this.updateAllCheckboxStatus();
                // this.checkeds = nodes;
                if (detectChanges) {
                    this.detectChanges();
                }
                if (emit) {
                    this.nodeChecked.emit({ originalEvent: null, node: nodes, nodes: nodes, instance: this });
                }
            }
        }
    };
    /**
     * 取消选中的节点.
     * ids: 标识Id 数组
     * closeCascade: 执行取消钩选时是否关闭级联功能。默认为 false
     *     设为true时，钩选将禁用级联的功能，仅处理当前节点的选中状态。执行完毕后，恢复原先的级联选项。
     * emit: 是否触发取消勾选事件。默认为 true
     */
    /**
     * 取消选中的节点.
     * ids: 标识Id 数组
     * closeCascade: 执行取消钩选时是否关闭级联功能。默认为 false
     *     设为true时，钩选将禁用级联的功能，仅处理当前节点的选中状态。执行完毕后，恢复原先的级联选项。
     * emit: 是否触发取消勾选事件。默认为 true
     * @param {?} ids
     * @param {?=} closeCascade
     * @param {?=} emit
     * @return {?}
     */
    TreeTableComponent.prototype.unCheckedNodes = /**
     * 取消选中的节点.
     * ids: 标识Id 数组
     * closeCascade: 执行取消钩选时是否关闭级联功能。默认为 false
     *     设为true时，钩选将禁用级联的功能，仅处理当前节点的选中状态。执行完毕后，恢复原先的级联选项。
     * emit: 是否触发取消勾选事件。默认为 true
     * @param {?} ids
     * @param {?=} closeCascade
     * @param {?=} emit
     * @return {?}
     */
    function (ids, closeCascade, emit) {
        if (emit === void 0) { emit = true; }
        if (ids && ids.length) {
            /** @type {?} */
            var _cascade = this.cascadeCheck;
            if (closeCascade && _cascade) {
                this.cascadeCheck = false;
            }
            /** @type {?} */
            var nodes = this._checkedNodes(ids, false);
            if (closeCascade && _cascade) {
                this.cascadeCheck = true;
            }
            this.detectChanges();
            // this.checkeds = nodes;
            if (emit) {
                this.nodeUnChecked.emit({ originalEvent: null, node: nodes, nodes: nodes, instance: this });
            }
        }
        else {
            this.clearCheckeds();
            this.detectChanges();
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TreeTableComponent.prototype.findRowNode = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            if (this.state.rowNodes) {
                return this.state.rowNodes.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.id === id; }));
            }
        }
        return undefined;
    };
    /** 将在 v0.2.x 废弃；请使用 findRowNode 方法 */
    /**
     * 将在 v0.2.x 废弃；请使用 findRowNode 方法
     * @param {?} id
     * @return {?}
     */
    TreeTableComponent.prototype.findNode = /**
     * 将在 v0.2.x 废弃；请使用 findRowNode 方法
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.findRowNode(id);
    };
    /**
     * 根据当前节点ID，获取顶级父节点
     * @param id 当前节点ID
     * @returns 返回顶级节点
     */
    /**
     * 根据当前节点ID，获取顶级父节点
     * @param {?} id 当前节点ID
     * @return {?} 返回顶级节点
     */
    TreeTableComponent.prototype.getRoot = /**
     * 根据当前节点ID，获取顶级父节点
     * @param {?} id 当前节点ID
     * @return {?} 返回顶级节点
     */
    function (id) {
        /** @type {?} */
        var rowNode = this.findRowNode(id);
        if (rowNode) {
            if (rowNode.parents && rowNode.parents.length) {
                return this.findRowNode(rowNode.parents[0]);
            }
            return rowNode;
        }
        return null;
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    TreeTableComponent.prototype.findRowNodes = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        return this.state.rowNodes.filter((/**
         * @param {?} rn
         * @return {?}
         */
        function (rn) { return ids.indexOf(rn.id) > -1; }));
    };
    /**
     * @param {?=} args
     * @return {?}
     */
    TreeTableComponent.prototype.checkAllNodes = /**
     * @param {?=} args
     * @return {?}
     */
    function (args) {
        var _this = this;
        /** @type {?} */
        var rowNodes = this.getCurrentAllRowNodes();
        rowNodes = rowNodes.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return (n.node.selectable || n.node.selectable === undefined); }));
        this.checkeds = rowNodes.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            n.indeterminate = false;
            _this.ttService.onChangeCheckboxStatus(n);
            if (n.node.selectable || n.node.selectable === undefined) {
                n.isChecked = true;
            }
            return n.node;
        }));
        if (this.selectOnCheck && !this.onlySelectSelf) {
            this.selections = rowNodes.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                if (n.node.selectable || n.node.selectable === undefined) {
                    n.isSelected = true;
                }
                return n.node;
            }));
        }
        if (this.state.searched) {
            rowNodes.forEach((/**
             * @param {?} rn
             * @return {?}
             */
            function (rn) {
                /** @type {?} */
                var row = _this.state.rowNodes.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.id === rn.id; }));
                if (row) {
                    row.isSelected = rn.isSelected;
                    row.isChecked = rn.isChecked;
                }
            }));
        }
        this.checkAll.emit(args);
        this.updateAllCheckboxStatus();
        this.detectChanges();
    };
    /**
     * @param {?=} args
     * @return {?}
     */
    TreeTableComponent.prototype.unCheckAllNodes = /**
     * @param {?=} args
     * @return {?}
     */
    function (args) {
        this.clearAll();
        this.unCheckAll.emit(args);
        this.detectChanges();
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.isEnableMultiSelect = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.singleSelect) {
            if (!this.showCheckbox) {
                return false;
            }
            return true;
        }
        return true;
    };
    // 从数据中获取节点图标
    // iconField 为 object
    //      如果 展开图标为空，折叠图标不为空，或反之，则展开与折叠图标保持一至；
    //      如果 叶子图标为空，则使用组件默认的图标
    // iconField 为 字符串： 则叶子 展开 折叠 图标使用同一个。 如果为空， 则使用组件默认图标
    // 从数据中获取节点图标
    // iconField 为 object
    //      如果 展开图标为空，折叠图标不为空，或反之，则展开与折叠图标保持一至；
    //      如果 叶子图标为空，则使用组件默认的图标
    // iconField 为 字符串： 则叶子 展开 折叠 图标使用同一个。 如果为空， 则使用组件默认图标
    /**
     * @private
     * @param {?} tn
     * @return {?}
     */
    TreeTableComponent.prototype.getNodeIconFromData = 
    // 从数据中获取节点图标
    // iconField 为 object
    //      如果 展开图标为空，折叠图标不为空，或反之，则展开与折叠图标保持一至；
    //      如果 叶子图标为空，则使用组件默认的图标
    // iconField 为 字符串： 则叶子 展开 折叠 图标使用同一个。 如果为空， 则使用组件默认图标
    /**
     * @private
     * @param {?} tn
     * @return {?}
     */
    function (tn) {
        /** @type {?} */
        var leaf = null;
        /** @type {?} */
        var expand = null;
        /** @type {?} */
        var collapse = null;
        if (this.useIconFromData) {
            if (this.iconField) {
                /** @type {?} */
                var _iconField = '';
                if (typeof this.iconField === 'string') {
                    _iconField = this.iconField;
                    if (tn[_iconField]) {
                        leaf = tn[_iconField];
                    }
                    else {
                        leaf = this.utils.getValue(_iconField, tn.data);
                    }
                    expand = collapse = leaf;
                }
                else {
                    if (this.iconField.leaf) {
                        leaf = this.utils.getValue(this.iconField.leaf, tn.data);
                    }
                    if (this.iconField.expand) {
                        expand = this.utils.getValue(this.iconField.expand, tn.data);
                    }
                    if (this.iconField.collapse) {
                        collapse = this.utils.getValue(this.iconField.collapse, tn.data);
                    }
                    if (expand && !collapse) {
                        collapse = expand;
                    }
                    if (!expand && collapse) {
                        expand = collapse;
                    }
                }
            }
        }
        return {
            leaf: leaf, expand: expand, collapse: collapse
        };
    };
    /**
     * @param {?} treeNode
     * @return {?}
     */
    TreeTableComponent.prototype.getTreeIcon = /**
     * @param {?} treeNode
     * @return {?}
     */
    function (treeNode) {
        var _a;
        /** @type {?} */
        var tn = treeNode;
        /** @type {?} */
        var leafIcon = this.leafIcon || 'file';
        /** @type {?} */
        var expandIcon = this.expandIcon || 'folder-open';
        /** @type {?} */
        var collapseIcon = this.collapseIcon || 'folder';
        /** @type {?} */
        var loading = 'f-loading-round';
        if (tn['showLoading']) {
            return _a = {}, _a[loading] = true, _a;
        }
        if (tn.icon) {
            leafIcon = tn.icon;
        }
        if (tn.expandedIcon) {
            expandIcon = tn.expandedIcon;
        }
        if (tn.collapsedIcon) {
            collapseIcon = tn.collapsedIcon;
        }
        if (this.useIconFromData) {
            var _b = this.getNodeIconFromData(treeNode), leaf = _b.leaf, expand = _b.expand, collapse = _b.collapse;
            if (this.whenDataIconEmptyUseDefault) {
                if (leaf) {
                    leafIcon = leaf;
                }
                if (expand) {
                    expandIcon = expand;
                }
                if (collapse) {
                    collapseIcon = collapse;
                }
            }
            else {
                leafIcon = leaf || '';
                expandIcon = expand || '';
                collapseIcon = collapse || '';
            }
        }
        /** @type {?} */
        var collapsedExpression = (!tn.leaf || !!(tn.children && tn.children.length)) && !tn.expanded;
        /** @type {?} */
        var expandedExpression = !!tn.expanded;
        /** @type {?} */
        var leafExpression = tn.leaf === undefined ? (!tn.children || !tn.children.length) : tn.leaf;
        /** @type {?} */
        var icons = {};
        if (leafExpression && leafIcon) {
            icons[leafIcon] = leafExpression;
        }
        else {
            if (tn.expanded && expandIcon) {
                icons[expandIcon] = expandedExpression;
            }
            else {
                if (collapseIcon) {
                    icons[collapseIcon] = collapsedExpression;
                }
            }
        }
        if (this.iconCls) {
            icons[this.iconCls] = true;
        }
        return icons;
    };
    /**
     * @private
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    TreeTableComponent.prototype.compare = /**
     * @private
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        if (typeof a === 'string') {
            return a.localeCompare(b);
        }
        else {
            return a === b ? 0 : (a > b ? 1 : -1);
        }
    };
    /**
     * @private
     * @param {?} r1
     * @param {?} r2
     * @return {?}
     */
    TreeTableComponent.prototype._sort = /**
     * @private
     * @param {?} r1
     * @param {?} r2
     * @return {?}
     */
    function (r1, r2) {
        /** @type {?} */
        var r = 0;
        /** @type {?} */
        var sortFields = this.sortName.split(',');
        /** @type {?} */
        var orders = this.sortOrder.split(',');
        if (!this.sortName) {
            return r;
        }
        var _loop_1 = function (i) {
            /** @type {?} */
            var sn = sortFields[i];
            /** @type {?} */
            var so = orders[i];
            /** @type {?} */
            var col = this_1.columns.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field === sn; }));
            /** @type {?} */
            var orderby = col.sorter || this_1.compare;
            /** @type {?} */
            var v1 = this_1.utils.getValue(sn, r1.data);
            if (v1 === null || v1 === undefined) {
                v1 = '';
            }
            /** @type {?} */
            var v2 = this_1.utils.getValue(sn, r2.data);
            if (v2 === null || v2 === undefined) {
                v2 = '';
            }
            r = orderby(v1, v2);
            if (r !== 0) {
                return { value: r * (so === 'asc' ? 1 : -1) };
            }
        };
        var this_1 = this;
        for (var i = 0; i < sortFields.length; i++) {
            var state_1 = _loop_1(i);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        return r;
    };
    /**
     * @return {?}
     */
    TreeTableComponent.prototype.clientSort = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var sortedData = this.data.sort(this._sort.bind(this));
        /** @type {?} */
        var sortChildNodes = (/**
         * @param {?} childNodes
         * @return {?}
         */
        function (childNodes) {
            childNodes = childNodes.sort(_this._sort.bind(_this));
            childNodes.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                if (n.children && n.children.length) {
                    n.children = n.children.sort(_this._sort.bind(_this));
                    sortChildNodes(n.children);
                }
            }));
            return childNodes;
        });
        sortedData.forEach((/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            c.children = sortChildNodes(c.children);
        }));
        this.loadData(sortedData);
    };
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    TreeTableComponent.prototype.onSortColumnClick = /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    function ($event, col) {
        var _this = this;
        if (!col.sortable) {
            return;
        }
        /** @type {?} */
        var sortName = this.sortName;
        /** @type {?} */
        var sortOrder = this.sortOrder;
        /** @type {?} */
        var sortFields = [];
        /** @type {?} */
        var sortOrders = [];
        if (sortName) {
            sortFields = sortName.split(',');
            sortOrders = sortOrder.split(',');
        }
        /** @type {?} */
        var colOrder = col.order || 'asc';
        /** @type {?} */
        var newOrder = colOrder;
        /** @type {?} */
        var i = sortFields.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n === col.field; }));
        if (i >= 0) {
            /** @type {?} */
            var _order = sortOrders[i] === 'asc' ? 'desc' : 'asc';
            newOrder = _order;
            // if (this.multiSort && newOrder === 'asc') {
            if (newOrder === 'asc') {
                newOrder = undefined;
                sortFields.splice(i, 1);
                sortOrders.splice(i, 1);
            }
            else {
                sortOrders[i] = _order;
            }
        }
        else {
            if (this.multiSort) {
                sortFields.push(col.field);
                sortOrders.push(colOrder);
            }
            else {
                sortFields = [col.field];
                sortOrders = [colOrder];
            }
        }
        col.order = newOrder;
        this.sortName = sortFields.join(',');
        this.sortOrder = sortOrders.join(',');
        if (!this.multiSort) {
            /** @type {?} */
            var updateFieldOrder = (/**
             * @param {?} cols
             * @return {?}
             */
            function (cols) {
                if (!cols || !cols.length) {
                    return;
                }
                cols.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    c.order = undefined;
                    /** @type {?} */
                    var k = sortFields.findIndex((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) { return f === c.field; }));
                    if (k >= 0) {
                        c.order = sortOrders[k];
                    }
                }));
            });
            updateFieldOrder(this.columns);
            this.cdRef.detectChanges();
        }
        this.beforeSortColumn(this.sortName, this.sortOrder).subscribe((/**
         * @return {?}
         */
        function () {
            if (_this.remoteSort) {
                // this.reload();
            }
            else {
                _this.clientSort();
            }
            _this.columnSorted.emit({ sortName: _this.sortName, sortOrder: _this.sortOrder });
        }));
    };
    /** 查询工具条前端字符查询 */
    /**
     * 查询工具条前端字符查询
     * @param {?} $event
     * @return {?}
     */
    TreeTableComponent.prototype.findKeyWords = /**
     * 查询工具条前端字符查询
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var searchValue = $event.value;
        /** @type {?} */
        var field = $event.field;
        this.findField = field;
        if (searchValue && searchValue.length >= 2) {
            this.findValue = searchValue;
            if (!field) {
                this.writeConsole('Please set a field for the FindField property.', 'warn');
                return;
            }
            /** @type {?} */
            var result = this.searchHandle.searchOnClient(field, searchValue, this.state.rowNodes);
            if (result && result.length) {
                this.findResult = result.sort((/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                function (a, b) { return a.index === b.index ? 0 : (a.index > b.index ? 1 : -1); }));
                this.findCount = result.length;
                this.findCurrent = 1;
                this._scrollToNode(result[0].id);
                this.highLightKeywords();
            }
            else {
                this.findResult = [];
                this.findCurrent = 0;
                this.findCount = 0;
            }
        }
        else {
            this.resetFindText();
            this.cdRef.detectChanges();
        }
    };
    /**
     * @param {?} step
     * @return {?}
     */
    TreeTableComponent.prototype.nextFindValue = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        var _this = this;
        if (!this.findResult || !this.findResult.length) {
            return;
        }
        /** @type {?} */
        var allHighLights = Array.from(this.el.nativeElement.querySelectorAll('.search-highlight'));
        if (this.findCurrent === this.findResult.length) {
            this.findCurrent = 1;
        }
        else {
            if (step) {
                this.findCurrent = this.findCurrent + step;
                if (step === -1) {
                    if (this.findCurrent <= 0) {
                        this.findCurrent = 1;
                    }
                }
            }
            else {
                this.findCurrent++;
            }
        }
        /** @type {?} */
        var active = this.el.nativeElement.querySelector('.search-highlight.active');
        if (active) {
            this.renderer.removeClass(active, 'active');
        }
        /** @type {?} */
        var _index = this.findCurrent - 1;
        /** @type {?} */
        var nextRow = this.findResult[_index];
        if (nextRow) {
            this._scrollToNode(nextRow.id);
            if (this.virtualized) {
                this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () {
                    if (_this['HIGH_LIGHT_TIMER']) {
                        clearTimeout(_this['HIGH_LIGHT_TIMER']);
                    }
                    _this['HIGH_LIGHT_TIMER'] = setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        /** @type {?} */
                        var trId = 'rownode-' + nextRow.id;
                        /** @type {?} */
                        var tr = _this.el.nativeElement.querySelector('#' + trId);
                        if (tr) {
                            /** @type {?} */
                            var highLightDom = tr.querySelector('.search-highlight');
                            if (highLightDom) {
                                _this.renderer.addClass(highLightDom, 'active');
                            }
                        }
                    }), 100);
                }));
            }
            else {
                if (allHighLights[_index]) {
                    this.renderer.addClass(allHighLights[_index], 'active');
                }
            }
        }
    };
    /** 查询工具条前端字符查询 */
    /*
    findKeyWords($event) {
        const searchValue = $event.value;
        const field = $event.field;
        this.findField = field;
        if (searchValue && searchValue.length >= 2) {
            this.findValue = searchValue;

            if (!field) {
                this.writeConsole('Please set a field for the FindField property.', 'warn');
                return;
            }

            const result = this.searchHandle.searchOnClient(field, searchValue, this.state.rowNodes);

            if (result && result.length) {
                this.findResult = result.sort((a, b) => a.index === b.index ? 0 : (a.index > b.index ? 1 : -1));
                const firstRowIndex = result[0].index;

                this.findCount = result.length;

                const parents = this.searchHandle.findParents(result, this.state.rowNodes);

                this.findCurrent = 1;
                [...parents, ...result].forEach((r: RowNode) => {
                    this.expandNode(r.id);
                });

                let y = 0;
                this.state.rowNodes.forEach((row: RowNode, index: number) => {
                    if (row.visible && firstRowIndex > index) {
                        y += this.rowHeight;
                    }
                });
                if (this.psRef && this.psRef.directiveRef) {
                    this.psRef.directiveRef.scrollToY(y - 30);
                }

                this.highLightKeywords();
            } else {
                this.findResult = [];
                this.findCurrent = 0;
                this.findCount = 0;
            }
        } else {
            this.resetFindText();
            this.cdRef.detectChanges();
        }
    }

    nextFindValue(step) {
        if (!this.findResult || !this.findResult.length) {
            return;
        }
        const allHighLights = Array.from(this.el.nativeElement.querySelectorAll('.search-highlight'));

        if (this.findCurrent === this.findResult.length) {
            this.findCurrent = 1;
        } else {
            if (step) {
                this.findCurrent = this.findCurrent + step;
                if (step === -1) {
                    if (this.findCurrent <= 0) {
                        this.findCurrent = 1;
                    }
                }
            } else {
                this.findCurrent++;
            }
        }

        const active = this.el.nativeElement.querySelector('.search-highlight.active');

        let _index = allHighLights.indexOf(active);

        if (active) {
            this.renderer.removeClass(active, 'active');
        }

        if (this.virtualized) {

            _index += !step ? 1 : step;

            if (allHighLights[_index]) {
                this.renderer.addClass(allHighLights[_index], 'active');

            } else {
                // 先滚动指定位置
                const nextRow = this.findResult[this.findCurrent - 1];
                let y = 0;
                this.state.rowNodes.forEach((row: RowNode, index: number) => {
                    if (row.visible && nextRow.index > index) {
                        y += this.rowHeight;
                    }
                });

                if (this.psRef && this.psRef.directiveRef) {
                    this.psRef.directiveRef.scrollToY(y - 30, 200);
                }
                this.ngZone.runOutsideAngular(() => {
                    setTimeout(() => {
                        const keyWords = this.el.nativeElement.querySelectorAll('.search-highlight');
                        this.renderer.addClass(keyWords[0], 'active');
                    }, 100);
                });
            }
        } else {
            const currentEl: any = allHighLights[this.findCurrent - 1];
            if (currentEl) {
                this.renderer.addClass(currentEl, 'active');
                if (this.psRef && this.psRef.directiveRef) {
                    const sTop = currentEl.closest('td').offsetTop - 30;
                    this.psRef.directiveRef.scrollToY(sTop, 200);
                }
            }
        }


        this.cdRef.detectChanges();
    }
*/
    /**
     * 查询工具条前端字符查询
     * @return {?}
     */
    /*
        findKeyWords($event) {
            const searchValue = $event.value;
            const field = $event.field;
            this.findField = field;
            if (searchValue && searchValue.length >= 2) {
                this.findValue = searchValue;
    
                if (!field) {
                    this.writeConsole('Please set a field for the FindField property.', 'warn');
                    return;
                }
    
                const result = this.searchHandle.searchOnClient(field, searchValue, this.state.rowNodes);
    
                if (result && result.length) {
                    this.findResult = result.sort((a, b) => a.index === b.index ? 0 : (a.index > b.index ? 1 : -1));
                    const firstRowIndex = result[0].index;
    
                    this.findCount = result.length;
    
                    const parents = this.searchHandle.findParents(result, this.state.rowNodes);
    
                    this.findCurrent = 1;
                    [...parents, ...result].forEach((r: RowNode) => {
                        this.expandNode(r.id);
                    });
    
                    let y = 0;
                    this.state.rowNodes.forEach((row: RowNode, index: number) => {
                        if (row.visible && firstRowIndex > index) {
                            y += this.rowHeight;
                        }
                    });
                    if (this.psRef && this.psRef.directiveRef) {
                        this.psRef.directiveRef.scrollToY(y - 30);
                    }
    
                    this.highLightKeywords();
                } else {
                    this.findResult = [];
                    this.findCurrent = 0;
                    this.findCount = 0;
                }
            } else {
                this.resetFindText();
                this.cdRef.detectChanges();
            }
        }
    
        nextFindValue(step) {
            if (!this.findResult || !this.findResult.length) {
                return;
            }
            const allHighLights = Array.from(this.el.nativeElement.querySelectorAll('.search-highlight'));
    
            if (this.findCurrent === this.findResult.length) {
                this.findCurrent = 1;
            } else {
                if (step) {
                    this.findCurrent = this.findCurrent + step;
                    if (step === -1) {
                        if (this.findCurrent <= 0) {
                            this.findCurrent = 1;
                        }
                    }
                } else {
                    this.findCurrent++;
                }
            }
    
            const active = this.el.nativeElement.querySelector('.search-highlight.active');
    
            let _index = allHighLights.indexOf(active);
    
            if (active) {
                this.renderer.removeClass(active, 'active');
            }
    
            if (this.virtualized) {
    
                _index += !step ? 1 : step;
    
                if (allHighLights[_index]) {
                    this.renderer.addClass(allHighLights[_index], 'active');
    
                } else {
                    // 先滚动指定位置
                    const nextRow = this.findResult[this.findCurrent - 1];
                    let y = 0;
                    this.state.rowNodes.forEach((row: RowNode, index: number) => {
                        if (row.visible && nextRow.index > index) {
                            y += this.rowHeight;
                        }
                    });
    
                    if (this.psRef && this.psRef.directiveRef) {
                        this.psRef.directiveRef.scrollToY(y - 30, 200);
                    }
                    this.ngZone.runOutsideAngular(() => {
                        setTimeout(() => {
                            const keyWords = this.el.nativeElement.querySelectorAll('.search-highlight');
                            this.renderer.addClass(keyWords[0], 'active');
                        }, 100);
                    });
                }
            } else {
                const currentEl: any = allHighLights[this.findCurrent - 1];
                if (currentEl) {
                    this.renderer.addClass(currentEl, 'active');
                    if (this.psRef && this.psRef.directiveRef) {
                        const sTop = currentEl.closest('td').offsetTop - 30;
                        this.psRef.directiveRef.scrollToY(sTop, 200);
                    }
                }
            }
    
    
            this.cdRef.detectChanges();
        }
    */
    TreeTableComponent.prototype.closeFindPanel = /**
     * 查询工具条前端字符查询
     * @return {?}
     */
    /*
        findKeyWords($event) {
            const searchValue = $event.value;
            const field = $event.field;
            this.findField = field;
            if (searchValue && searchValue.length >= 2) {
                this.findValue = searchValue;
    
                if (!field) {
                    this.writeConsole('Please set a field for the FindField property.', 'warn');
                    return;
                }
    
                const result = this.searchHandle.searchOnClient(field, searchValue, this.state.rowNodes);
    
                if (result && result.length) {
                    this.findResult = result.sort((a, b) => a.index === b.index ? 0 : (a.index > b.index ? 1 : -1));
                    const firstRowIndex = result[0].index;
    
                    this.findCount = result.length;
    
                    const parents = this.searchHandle.findParents(result, this.state.rowNodes);
    
                    this.findCurrent = 1;
                    [...parents, ...result].forEach((r: RowNode) => {
                        this.expandNode(r.id);
                    });
    
                    let y = 0;
                    this.state.rowNodes.forEach((row: RowNode, index: number) => {
                        if (row.visible && firstRowIndex > index) {
                            y += this.rowHeight;
                        }
                    });
                    if (this.psRef && this.psRef.directiveRef) {
                        this.psRef.directiveRef.scrollToY(y - 30);
                    }
    
                    this.highLightKeywords();
                } else {
                    this.findResult = [];
                    this.findCurrent = 0;
                    this.findCount = 0;
                }
            } else {
                this.resetFindText();
                this.cdRef.detectChanges();
            }
        }
    
        nextFindValue(step) {
            if (!this.findResult || !this.findResult.length) {
                return;
            }
            const allHighLights = Array.from(this.el.nativeElement.querySelectorAll('.search-highlight'));
    
            if (this.findCurrent === this.findResult.length) {
                this.findCurrent = 1;
            } else {
                if (step) {
                    this.findCurrent = this.findCurrent + step;
                    if (step === -1) {
                        if (this.findCurrent <= 0) {
                            this.findCurrent = 1;
                        }
                    }
                } else {
                    this.findCurrent++;
                }
            }
    
            const active = this.el.nativeElement.querySelector('.search-highlight.active');
    
            let _index = allHighLights.indexOf(active);
    
            if (active) {
                this.renderer.removeClass(active, 'active');
            }
    
            if (this.virtualized) {
    
                _index += !step ? 1 : step;
    
                if (allHighLights[_index]) {
                    this.renderer.addClass(allHighLights[_index], 'active');
    
                } else {
                    // 先滚动指定位置
                    const nextRow = this.findResult[this.findCurrent - 1];
                    let y = 0;
                    this.state.rowNodes.forEach((row: RowNode, index: number) => {
                        if (row.visible && nextRow.index > index) {
                            y += this.rowHeight;
                        }
                    });
    
                    if (this.psRef && this.psRef.directiveRef) {
                        this.psRef.directiveRef.scrollToY(y - 30, 200);
                    }
                    this.ngZone.runOutsideAngular(() => {
                        setTimeout(() => {
                            const keyWords = this.el.nativeElement.querySelectorAll('.search-highlight');
                            this.renderer.addClass(keyWords[0], 'active');
                        }, 100);
                    });
                }
            } else {
                const currentEl: any = allHighLights[this.findCurrent - 1];
                if (currentEl) {
                    this.renderer.addClass(currentEl, 'active');
                    if (this.psRef && this.psRef.directiveRef) {
                        const sTop = currentEl.closest('td').offsetTop - 30;
                        this.psRef.directiveRef.scrollToY(sTop, 200);
                    }
                }
            }
    
    
            this.cdRef.detectChanges();
        }
    */
    function () {
        this.showFindInput = false;
        this.resetFindText();
        this.cdRef.detectChanges();
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.highLightKeywords = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.cdRef.detectChanges();
                /** @type {?} */
                var allHighLights = _this.el.nativeElement.querySelectorAll('.search-highlight');
                if (!allHighLights.length) {
                    return;
                }
                _this.renderer.addClass(allHighLights[0], 'active');
            }), 100);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableComponent.prototype.resetFindText = /**
     * @private
     * @return {?}
     */
    function () {
        this.findValue = '';
        this.findCurrent = 0;
        this.findCount = 0;
        this.findResult = [];
    };
    /**
     * @param {?} y
     * @param {?=} animations
     * @return {?}
     */
    TreeTableComponent.prototype.scrollToY = /**
     * @param {?} y
     * @param {?=} animations
     * @return {?}
     */
    function (y, animations) {
        if (animations === void 0) { animations = 200; }
        this.state.scrollY = y || 0;
        this.psRef.directiveRef.scrollToY(y, animations);
    };
    /**
     * @private
     * @param {?} field
     * @param {?} isHide
     * @return {?}
     */
    TreeTableComponent.prototype.showOrHideColumn = /**
     * @private
     * @param {?} field
     * @param {?} isHide
     * @return {?}
     */
    function (field, isHide) {
        if (Array.isArray(field)) {
            this.columns.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                if (field.indexOf(n.field) > -1) {
                    n.visible = !isHide;
                }
            }));
        }
        else {
            this.columns.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                if (field === n.field) {
                    n.visible = !isHide;
                }
            }));
        }
        this.columnsChanged();
    };
    /**
     * @param {?} field
     * @return {?}
     */
    TreeTableComponent.prototype.showColumn = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.showOrHideColumn(field, false);
    };
    /**
     * @param {?} field
     * @return {?}
     */
    TreeTableComponent.prototype.hideColumn = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.showOrHideColumn(field, true);
    };
    /**
     * @param {?} parentNode
     * @return {?}
     */
    TreeTableComponent.prototype.showChildsLoading = /**
     * @param {?} parentNode
     * @return {?}
     */
    function (parentNode) {
        var _a;
        /** @type {?} */
        var colspan = this.columns.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.visible !== false; })).length;
        /** @type {?} */
        var data = (_a = {}, _a[this.idField] = '正在加载中....', _a.__colspan__ = colspan, _a);
        this.loadChildren([{ data: data, __childs_loading__: true }], parentNode, false);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    TreeTableComponent.prototype.onChildsPageChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.childsPageChanged.emit($event);
    };
    /**
     * @private
     * @param {?} tr
     * @return {?}
     */
    TreeTableComponent.prototype.trId2DataId = /**
     * @private
     * @param {?} tr
     * @return {?}
     */
    function (tr) {
        return tr.id.replace('rownode-', '');
    };
    // 快捷键
    // 快捷键
    /**
     * @param {?} $event
     * @return {?}
     */
    TreeTableComponent.prototype.onKeydownEvent = 
    // 快捷键
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if (!$event || !this.singleSelect || !this.data || !this.data.length) {
            return;
        }
        /** @type {?} */
        var keys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];
        if (!keys.includes($event.key) || $event.target.nodeName === 'INPUT') {
            return;
        }
        $event.stopPropagation();
        $event.preventDefault();
        this.inputGroup.textbox.nativeElement.blur();
        /** @type {?} */
        var newIdx;
        /** @type {?} */
        var trs = Array.from(this.bodyTable.nativeElement.querySelectorAll('tr'));
        /** @type {?} */
        var trCount = trs.length;
        /** @type {?} */
        var selectedTrIndex = -1;
        if (this.selectedRow) {
            selectedTrIndex = trs.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return _this.trId2DataId(n) === _this.selectedRow.id; }));
        }
        if ($event.code === 'ArrowDown') {
            newIdx = selectedTrIndex + 1;
        }
        else if ($event.code === 'ArrowUp') {
            if (selectedTrIndex !== -1) {
                newIdx = selectedTrIndex - 1;
            }
        }
        else {
            if (this.selectedRow && ($event.code === 'ArrowRight' || $event.code === 'ArrowLeft')) {
                this.toggleExpand(this.selectedRow);
            }
            return;
        }
        if (newIdx >= 0 && newIdx < trCount) {
            /** @type {?} */
            var _tr = (/** @type {?} */ (trs[newIdx]));
            if (_tr) {
                /** @type {?} */
                var id = this.trId2DataId(_tr);
                this.selectNode(id);
                _tr.scrollIntoView({ block: 'nearest' });
            }
        }
    };
    /** 根据传入的父级ID，获取所有子级节点 */
    /**
     * 根据传入的父级ID，获取所有子级节点
     * @param {?} parentId
     * @return {?}
     */
    TreeTableComponent.prototype.getChildNodes = /**
     * 根据传入的父级ID，获取所有子级节点
     * @param {?} parentId
     * @return {?}
     */
    function (parentId) {
        var _this = this;
        /** @type {?} */
        var nodes = [];
        if (parentId) {
            /** @type {?} */
            var rowNode = this.findRowNode(parentId);
            if (rowNode && rowNode.node.children && rowNode.node.children.length) {
                rowNode.node.children.forEach((/**
                 * @param {?} tn
                 * @return {?}
                 */
                function (tn) {
                    if (tn.selectable) {
                        nodes.push(tn);
                    }
                    nodes = nodes.concat(_this.getChildNodes(tn.id));
                }));
            }
            return nodes;
        }
        return [];
    };
    /** 根据传入的节点ID， 获取所有父级节点 */
    /**
     * 根据传入的节点ID， 获取所有父级节点
     * @param {?} id
     * @return {?}
     */
    TreeTableComponent.prototype.getParentNodes = /**
     * 根据传入的节点ID， 获取所有父级节点
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var nodes = [];
        if (id) {
            /** @type {?} */
            var rowNode = this.findRowNode(id);
            if (rowNode && rowNode.parents && rowNode.parents.length) {
                rowNode.parents.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    /** @type {?} */
                    var rn = _this.findRowNode(n);
                    if (rn && rn.node.selectable) {
                        nodes.push(rn);
                    }
                }));
            }
            return nodes;
        }
        return [];
    };
    TreeTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-treetable',
                    template: "<!--\r\n * @Author: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @Date: 2019-06-03 20:00:11\r\n * @LastEditors: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @LastEditTime: 2019-11-28 14:23:52\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n -->\r\n<div class=\"filter-row\" style=\"width: 100%;\" *ngIf=\"showFilterBar\">\r\n    <form style=\"display: flex; width: 100%;\">\r\n        <div class=\"search-fields\" style=\"padding-left:0;\" [style.display]=\"showSearchField ? '': 'none'\">\r\n            <select class=\"custom-select\" [(ngModel)]=\"searchData.field\" name=\"field\">\r\n                <option value=\"*\">{{allColumnsTitle}}</option>\r\n                <option *ngFor=\"let col of searchFields\" value=\"{{col.value}}\">{{ col.label }}</option>\r\n            </select>\r\n        </div>\r\n        <div class=\"search-text flex-fill\" style=\"padding-right: 0px;\">\r\n            <input-group #inputGroup [groupText]=\"searchButtonText\" name=\"searchValue\" [(ngModel)]=\"searchData.value\"\r\n                (clear)=\"onClearSearchValue()\" (valueChange)=\"onSearchValueChange($event)\" (clickHandle)=\"onSearch()\"\r\n                (keydownHandle)=\"onKeydownEvent($event)\"></input-group>\r\n        </div>\r\n    </form>\r\n</div>\r\n\r\n<ng-content select=\"tt-column\"></ng-content>\r\n\r\n<ng-template #tdcell let-col let-serializedNode=\"rowNode\" let-left=\"left\">\r\n\r\n    <ng-container *ngIf=\"enableFindText\">\r\n        <span *ngIf=\"!col.formatter\" style=\"width: 100%;\"\r\n            [innerHTML]=\"getNodeText(col, serializedNode.node.data) | highlight: findValue: col.field :findField\"></span>\r\n        <span *ngIf=\"col.formatter\" style=\"width: 100%;\" \r\n            [innerHTML]=\"formatData(col, serializedNode.node.data, col.formatter) | safe: 'html' \"></span>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"!enableFindText\">\r\n        <span *ngIf=\"!col.formatter && !fast\" style=\"width: 100%;\"\r\n            [innerHTML]=\"getNodeText(col, serializedNode.node.data)\"></span>\r\n        <span *ngIf=\"!col.formatter && fast\" style=\"width: 100%;\"\r\n            [textContent]=\"getNodeText(col, serializedNode.node.data, true)\"></span>\r\n        <span *ngIf=\"col.formatter\" style=\"width: 100%;\" \r\n            [innerHTML]=\"formatData(col, serializedNode.node.data, col.formatter) | safe: 'html' \"></span>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #tbodyrows>\r\n    <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForTrackBy]=\"trackByFn\" [ngForOf]=\"pagination ? (serializedValue | paginate: paginationOptions) : serializedValue\">\r\n        <tr *ngIf=\"serializedNode.visible\" #row=\"row\" \r\n            [attr.id]=\" 'rownode-' + serializedNode.id\" class=\"f-treetable-row\"\r\n            [selectRow]=\"serializedNode\" [rowIndex]=\"rowIndex\" [dblclick]=\"true\" [dblclickNode]=\"serializedNode\"\r\n            [selectRowDisabled]=\"serializedNode.node | disablenode: disabledRow\"\r\n            [customRowStyle]=\"serializedNode\"\r\n            [class.f-treetable-disable-row]=\"serializedNode.node | disablenode: disabledRow\"\r\n            [class.farris-table-selectedrow]=\"serializedNode.isSelected\">\r\n\r\n            <td *ngIf=\"serializedNode.node.data['__colspan__']\"  [attr.colspan]=\" serializedNode.node.data['__colspan__'] || 0\">\r\n                <childs-loading></childs-loading>\r\n            </td>\r\n\r\n            <ng-container *ngIf=\"!serializedNode.node.data['__colspan__']\">\r\n                <td *ngFor=\"let col of columns; let i = index;\"\r\n                    [customCellStyle]=\"col\" [rowNode]=\"serializedNode\" [rowIndex]=\"rowIndex\"\r\n                    [style.textAlign]=\"col!.align || 'left'\" \r\n                    (click)=\"onCellClick($event, col, serializedNode.node)\"\r\n                    class=\"treetable-cell\" [attr.field]=\"col.field\"\r\n                    [attr.colspan]=\" serializedNode.node.data['__cellspan__'] || 0\"\r\n                    [attr.title]=\"col | tipmsg: serializedNode.node\"\r\n                    [class.f-treetable--fixed-left]=\"fixedColumns && fixedHeader && col.fixed && col.fixed === 'left'\"\r\n                    [class.f-treetable--fixed-right]=\"fixedColumns && fixedHeader && col.fixed && col.fixed === 'right'\"\r\n                    [customRowStyle]=\"serializedNode\" [field]=\"col\"\r\n                    [attr.r-tt-shadow-col]=\"col.rightShadowCol\"\r\n                    [attr.l-tt-shadow-col]=\"col.leftShadowCol\"\r\n                >\r\n\r\n                    <div class=\"treetable-cell-content d-flex\">\r\n                        <farris-treeTableToggler style=\"float: left\"\r\n                            [showLines]=\"showLines\"\r\n                            [indentSpacing]=\"indentSpacing\"\r\n                            [disabled]=\"serializedNode.node | disablenode: disabledRow: disabled\"\r\n                            [rowNode]=\"serializedNode\" *ngIf=\"i == 0\"></farris-treeTableToggler>\r\n                        \r\n                        <div class=\"flex-grow-1 text\"  *ngIf=\"!col.componentType\">\r\n                            <ng-container *ngIf=\"!col.template && col.field\">\r\n                                <ng-container *ngTemplateOutlet=\"tdcell; context: {$implicit: col, node: serializedNode.node, rowNode: serializedNode, rowData: serializedNode.node.data  }\" ></ng-container>\r\n                            </ng-container>\r\n            \r\n                            <ng-container *ngIf=\"col.template\"\r\n                                [ngTemplateOutlet]=\"col.template\"\r\n                                [ngTemplateOutletContext]=\"{$implicit: { column: col, node: serializedNode.node, rowNode: serializedNode, rowData:  serializedNode.node.data  }}\">\r\n                            </ng-container>\r\n                        </div>\r\n                        <div class=\"flex-grow-1 text\"  *ngIf=\"col.componentType\" [component-template]=\"col\" [ctx]=\" { column: col, node: serializedNode.node, rowNode: serializedNode, rowData:  serializedNode.node.data  }\">\r\n                        </div>\r\n                    </div>\r\n                </td>\r\n            </ng-container>\r\n        </tr>\r\n    </ng-template>\r\n</ng-template>\r\n\r\n<ng-template #tbody>\r\n    <tbody class=\"farris-treetable-tbody\"\r\n        [farris-context-menus]=\"contextMenuItems\" [disabled]=\"!enableContextMenu\" \r\n        [activeDomName]=\"'tr'\" [beforeShowContextMenu]=\"onBeforeShowContextMenu\"\r\n        [menuClass]=\"'f-treetable-context-menu'\">\r\n        <ng-container *ngTemplateOutlet=\"tbodyrows\"></ng-container>\r\n    </tbody>\r\n</ng-template>\r\n\r\n<!--\u5355\u884C\u8868\u5934\u6A21\u677F-->\r\n<ng-template #headerCells let-cols let-firstRow=\"firstRow\">\r\n    <ng-template ngFor let-col [ngForOf]=\"cols\" let-i=\"index\" let-first=\"first\" let-last=\"last\">\r\n        <th [resizable-column]=\"(!col.lastColumn || !last) && (!col.colspan || col.colspan == 1)\" [style.textAlign]=\"col!.hAlign || 'left'\" #th \r\n            class=\"treetable-header-cell\"\r\n            [class.f-treetable--fixed-left]=\"fixedColumns && col.fixed && col.fixed === 'left'\"\r\n            [class.f-treetable--fixed-right]=\"fixedColumns && col.fixed && col.fixed === 'right'\"\r\n            [attr.field]=\"col.field || ''\"\r\n            [attr.r-tt-shadow-col]=\"col.rightShadowCol\"\r\n            [attr.l-tt-shadow-col]=\"col.leftShadowCol\"\r\n            [attr.colspan]=\"col.colspan\" \r\n            [attr.rowspan]=\"col.rowspan\"\r\n            [class.group-header-cell]=\"col.colspan && col.colspan > 1\"\r\n            [attr.id]=\"col.id\"\r\n            >\r\n      \r\n            <div class=\"d-flex\" style=\"line-height: 1.25em;\" [style.padding-right.px]=\"col.sortable ? 10: 0\">\r\n                <ng-container *ngIf=\"!singleSelect && showCheckAll && first && showCheckbox && !last && firstRow\">\r\n                    <tt-header-checkbox #allCheckbox></tt-header-checkbox>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"col.headTemplate&& !col.headerComponentType\"\r\n                    [ngTemplateOutlet]=\"col.headTemplate\"\r\n                    [ngTemplateOutletContext]=\"{$implicit: { column: col}}\">\r\n                </ng-container>\r\n                <ng-container *ngIf=\"!col.headTemplate && !col.headerComponentType\">\r\n                    <span style=\"overflow: hidden;width: 100%;\" *ngIf=\"!headerWrap\">{{ col.title }}</span>\r\n                    <span style=\"white-space: pre-wrap;width: 100%;\"  *ngIf=\"headerWrap\">{{ col.title }}</span>\r\n                </ng-container>\r\n\r\n                <div class=\"flex-grow-1 text\" *ngIf=\"col.headerComponentType\" [component-template]=\"col\" [templateType]=\"'head'\" [ctx]=\"{ column: col}\" [style.whiteSpace]=\"headerWrap ? 'pre-wrap': ''\"></div>\r\n\r\n\r\n                <ng-container *ngIf=\"col.sortable\">\r\n                    <span class=\"f-treetable-sort\"\r\n                        [class.f-treetable-sort-asc]=\"col.order === 'asc'\"\r\n                        [class.f-treetable-sort-desc]=\"col.order === 'desc'\"\r\n                        (click)=\"onSortColumnClick($event, col)\" *ngIf=\"col.order\"></span>\r\n                    <span class=\"f-treetable-sort\" (click)=\"onSortColumnClick($event, col)\" *ngIf=\"!col.order\"></span>\r\n                </ng-container>\r\n\r\n            </div>\r\n        </th>\r\n    </ng-template>\r\n</ng-template>\r\n\r\n<!--\u591A\u884C\u8868\u5934\u6A21\u677F-->\r\n<ng-template #groupHeader>\r\n    <tr *ngFor=\"let cols of groupColumns; first as isFirst\">\r\n        <ng-container *ngTemplateOutlet=\"headerCells; context: {$implicit: cols, firstRow: isFirst}\"></ng-container>\r\n    </tr>\r\n</ng-template>\r\n\r\n\r\n<ng-template #scorllview>\r\n    <div class=\"farris-treetable fixed\" [attr.id]=\"id\" [class.f-treetable--fixed-columns]=\"fixedColumns\"\r\n        [class.farris-treetable-nowrap]=\"!nowrap\" [class.table-bordered]=\"showBorder\"\r\n        [ngClass]=\"{'farris-treetable-disabled': disabled}\"\r\n        [class.farris-treetable-showlines]=\"showLinesOnHover && showLines\" [style.width]=\"fit ? '100%': (width + 'px')\">\r\n        <div #headerBox class=\"farris-treetable-header\" *ngIf=\"showHeader && columns\" style=\"overflow: hidden; background-color: #f7f8fb\">\r\n            <table #headerTable class=\"table\" >\r\n                <colgroup *ngIf=\"!autoWidth\">\r\n                    <ng-container *ngFor=\"let col of columns\">\r\n                        <col *ngIf=\"columnIsVisible(col)\" [style.width]=\"getRealColWidth(col)\" />\r\n                    </ng-container>\r\n                </colgroup>\r\n                <thead class=\"farris-treetable-thead\" [class.header-wrap]=\"headerWrap\">\r\n                    <ng-container *ngIf=\"!headerTemplate\">\r\n                        <tr *ngIf=\"!useGroupHeader; else groupHeader\">\r\n                            <ng-container *ngTemplateOutlet=\"headerCells; context: {$implicit: columns, firstRow: true}\"></ng-container>\r\n                        </tr>\r\n                    </ng-container>\r\n\r\n                    <ng-container *ngIf=\"headerTemplate\">\r\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\r\n                    </ng-container>\r\n                </thead>\r\n            </table>\r\n            <!-- \u5BA2\u6237\u7AEF\u67E5\u8BE2\u5B9A\u4F4D\u5DE5\u5177\u6761 -->\r\n            <find-input *ngIf=\"showFindInput\" [columns]=\"columns\" [current]=\"findCurrent\" [count]=\"findCount\"\r\n                (valueChanged)=\"findKeyWords($event)\" (close)=\"closeFindPanel()\" (enterHandler)=\"nextFindValue($event)\">\r\n            </find-input>\r\n\r\n        </div>\r\n\r\n        <div class=\"farris-treetable-body\">\r\n            <perfect-scrollbar #perfectScrollbar [config]=\"{minScrollbarLength: 15}\" (psScrollX)=\"onScrollX($event)\"\r\n                (psScrollY)=\"onScrollY($event)\" [style.height.px]=\"scorllBodyHeight\">\r\n                <div *ngIf=\"topHideHeight && virtualized\" [style.height.px]=\"topHideHeight\"> </div>\r\n                <table #bodyTable class=\"table\" [style.tableLayout]=\"autoWidth? 'auto': 'fixed'\"\r\n                    [ngClass]=\"{'table-striped': striped, 'table-hover': (hovered && serializedValue && serializedValue.length), 'f-table-norecords': (!serializedValue || !serializedValue.length),\r\n                    'h-100': (!serializedValue || !serializedValue.length) }\">\r\n                    <colgroup>\r\n                        <ng-container *ngFor=\"let col of columns\">\r\n                            <col *ngIf=\"columnIsVisible(col)\" [style.width]=\"getRealColWidth(col)\" />\r\n                        </ng-container>\r\n                    </colgroup>\r\n\r\n                    <ng-container *ngIf=\"!serializedValue || !serializedValue.length\">\r\n                        <tbody class=\"farris-treetable-tbody\">\r\n                            <tr class=\"f-table-norecords-row\">\r\n                                <td [attr.align]=\"'center'\" class=\"farris-treetable-emptydata\" [attr.colspan]=\"columns.length\">\r\n                                    <div class=\"f-table-norecords-content\" >\r\n                                        {{ 'treetable.emptyMessage' | locale }}\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </ng-container>\r\n\r\n                    <ng-container *ngIf=\"serializedValue && serializedValue.length\">\r\n                        <ng-container *ngIf=\"bodyTemplate\">\r\n                            <tbody class=\"farris-treetable-tbody\" treeTableBody [columns]=\"columns\" [template]=\"bodyTemplate\"></tbody>\r\n                        </ng-container>\r\n\r\n                        <ng-container #defaultBodyTemplate *ngIf=\"!bodyTemplate\">\r\n                            <ng-container *ngTemplateOutlet=\"tbody\"></ng-container>\r\n                        </ng-container>\r\n                    </ng-container>\r\n                </table>\r\n                <div *ngIf=\"bottomHideHeight && virtualized\" [style.height.px]=\"bottomHideHeight\"> </div>\r\n            </perfect-scrollbar>\r\n        </div>\r\n\r\n        <!-- \u5206\u9875\u6761 -->\r\n        <div *ngIf=\"pagination\" #tablePager class=\"farris-table-pager\" [ngStyle]=\" { 'opacity': (disabled ? 0.6 : 1), 'pointer-events': (disabled? 'none': '')  }\">\r\n            <pagination-controls #pager [id]=\"paginationOptions?.id\"\r\n                [maxSize]=\"pagerLabelSize\" [directionLinks]=\"true\"\r\n                [autoHide]=\"false\" [responsive]=\"true\"\r\n                [previousLabel]=\"' '\" [nextLabel]=\"' '\"\r\n                [showPageInfo]=\"showPageInfo\" [showPageNumber]=\"showPageNumber\" [showPageList]=\"showPageList\"\r\n                (pageChange)=\"onPageChange($event)\" [showGotoInput]=\"showGotoInput\"\r\n                (pageSizeChange)=\"onPageSizeChange($event)\"\r\n                >\r\n\r\n                \r\n            </pagination-controls>\r\n        </div>\r\n\r\n        <div #resizerHelper class=\"column-resizer-helper\" *ngIf=\"resizableColumns\"></div>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #nodespagerbar let-ctx>\r\n    <nodes-pager [context]=\"ctx\" [disabled]=\"disabled\" (pageChange)=\"onChildsPageChanged($event)\" [showTotal]=\"showTotalForChildren\"></nodes-pager>\r\n</ng-template>\r\n\r\n\r\n\r\n<div class=\"farris-treetable\" [class.table-bordered]=\"showBorder\" [attr.id]=\"id\"\r\n    [class.farris-treetable-showlines]=\"showLinesOnHover && showLines\" \r\n    [class.farris-treetable-nowrap]=\"!nowrap\"  *ngIf=\"!fixedHeader; else scorllview\">\r\n    <table class=\"table\" [style.tableLayout]=\"autoWidth? 'auto': 'fixed'\"\r\n        [ngClass]=\"{'table-striped': striped, 'table-hover': (hovered && serializedValue && serializedValue.length), 'f-table-norecords': (!serializedValue || !serializedValue.length),\r\n        'h-100': (!serializedValue || !serializedValue.length) }\">\r\n        <thead class=\"farris-treetable-thead\" *ngIf=\"showHeader\" [class.header-wrap]=\"headerWrap\">\r\n            <ng-container *ngIf=\"!headerTemplate && columns\">\r\n                <th *ngFor=\"let col of columns;let isFirst=first\" [style.textAlign]=\"col!.hAlign || 'left'\" class=\"treetable-header-cell\" [attr.field]=\"col.field\">\r\n                    <div class=\"d-flex\">\r\n                        <ng-container *ngIf=\"!singleSelect && showCheckAll && isFirst && showCheckbox\">\r\n                            <tt-header-checkbox #allCheckbox class=\"f-cmp-treetable-toggler\"></tt-header-checkbox>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngIf=\"!col.headTemplate && !col.headComponentType\">\r\n                            <div class=\"flex-grow-1 text\" [style.whiteSpace]=\"headerWrap ? 'pre-wrap': ''\">{{col.title}}</div>\r\n                        </ng-container>\r\n        \r\n                        <ng-container *ngIf=\"col.headTemplate && !col.headComponentType\"\r\n                            [ngTemplateOutlet]=\"col.headTemplate\"\r\n                            [ngTemplateOutletContext]=\"{$implicit: { column: col}}\">\r\n                        </ng-container>\r\n                        <div class=\"flex-grow-1 text\" *ngIf=\"col.headerComponentType\" [component-template]=\"col\" [templateType]=\"'head'\" [ctx]=\" { column: col}\" [style.whiteSpace]=\"headerWrap ? 'pre-wrap': ''\"></div>\r\n                    </div>\r\n                </th>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"headerTemplate\">\r\n                <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\r\n            </ng-container>\r\n        </thead>\r\n        <ng-container *ngIf=\"serializedValue && serializedValue.length\">\r\n             <!-- \u5BA2\u6237\u7AEF\u67E5\u8BE2\u5B9A\u4F4D\u5DE5\u5177\u6761 -->\r\n             <find-input *ngIf=\"showFindInput\" [current]=\"findCurrent\" [count]=\"findCount\"\r\n             (valueChanged)=\"findKeyWords($event)\" (close)=\"closeFindPanel()\"  [columns]=\"columns\"\r\n             (enterHandler)=\"nextFindValue($event)\"></find-input>\r\n            <ng-container *ngIf=\"bodyTemplate\">\r\n                <tbody class=\"farris-treetable-tbody\" treeTableBody [columns]=\"columns\" [template]=\"bodyTemplate\">\r\n                </tbody>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!bodyTemplate\">\r\n                <ng-container *ngTemplateOutlet=\"tbody\"></ng-container>\r\n            </ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!serializedValue || !serializedValue.length\">\r\n            <tbody class=\"farris-treetable-tbody\">\r\n                <tr class=\"f-table-norecords-row\" style=\"height: 200px\">\r\n                    <td [attr.align]=\"'center'\" class=\"farris-treetable-emptydata\" [attr.colspan]=\"columns.length\">\r\n                        <div class=\"f-table-norecords-content\" >\r\n                            {{ 'treetable.emptyMessage' | locale }}\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </ng-container>\r\n    </table>\r\n</div>\r\n\r\n",
                    exportAs: 'treeTable',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["\n        .farris-treetable {\n            position: relative;\n        }\n        .resizable-column {\n            background-clip: padding-box;\n            position: relative;\n        }\n        .column-resizer {\n            display: block;\n            position: absolute!important;\n            top: 0;\n            right: 0;\n            margin: 0;\n            width: .5em;\n            height: 100%;\n            padding: 0;\n            cursor: col-resize;\n            border: 1px solid transparent;\n        }\n        .column-resizer-helper {\n            width: 1px;\n            position: absolute;\n            z-index: 10;\n            display: none;\n            border-right: 1px dashed #1890ff;\n        }\n\n        .farris-treetable-disabled .farris-treetable-body .table tr{\n            opacity: 0.4;\n            cursor: not-allowed;\n        }\n        .farris-treetable-disabled .table tr.farris-table-selectedrow{\n            opacity: 1;\n            cursor: default;\n        }\n\n        .custom-checkbox .custom-control-input:indeterminate~.custom-control-label::after {\n            background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3e%3cpath stroke='%23fff' d='M0 2h4'/%3e%3c/svg%3e\");\n            background-color: #1890ff;\n        }\n        .unselectable-text {\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -o-user-select: none;\n            -ms-user-select: none;\n            user-select: none\n        }\n        .search-highlight {\n            background-color: #FFFF1F;\n        }\n        .search-highlight.active{\n            background-color: #FF901C;\n        }\n\n\n                \n        .f-treetable--fixed-columns .treetable-header-cell {\n            vertical-align: middle;\n        }\n\n        .f-treetable--fixed-columns .ps__rail-x,\n        .f-treetable--fixed-columns .ps__rail-y {\n            z-index: 3;\n        }\n\n        .f-treetable--fixed-left,\n        .f-treetable--fixed-right {\n            position: sticky !important;\n            z-index: 2;\n            background-color: #ffffff;\n            overflow: inherit !important;\n        }\n        .treetable-header-cell.f-treetable--fixed-left,\n        .treetable-header-cell.f-treetable--fixed-right {\n            background-color: #F4F4F4;\n            border-color: #E4E7EF;\n            border: none;\n            outline-color: #E4E7EF;\n            outline-style: solid;\n            outline-width: 1px;\n        }\n\n        .f-treetable--fixed-columns\n            tr\n            th.f-treetable--fixed-left[l-tt-shadow-col]::after,\n        .f-treetable--fixed-columns td.f-treetable--fixed-left::after,\n        .f-treetable--fixed-right::before {\n            pointer-events: none;\n            content: \"\";\n            width: 36px !important;\n            display: inline-block !important;\n            position: absolute !important;\n            margin-top: 0 !important;\n            top: 0 !important;\n            height: 100% !important;\n            bottom: -1px !important;\n            transition: box-shadow 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n            background-color: transparent !important;\n        }\n\n        .f-treetable--fixed-columns\n            tr\n            th.f-treetable--fixed-left:not([l-tt-shadow-col])::after {\n            content: \"\";\n            position: absolute;\n            right: 0;\n            top: 50%;\n            margin-top: calc(-1.125rem / 2);\n            display: block;\n            height: 1.125rem;\n            width: 1px;\n            background-color: #e6e9f0;\n            box-shadow: none;\n        }\n\n        .f-treetable--fixed-columns\n            tr\n            th.f-treetable--fixed-left[l-tt-shadow-col]::after,\n        .f-treetable--fixed-columns tr td.f-treetable--fixed-left::after {\n            right: -36px !important;\n        }\n\n        .f-treetable--fixed-columns .f-treetable--fixed-right::before {\n            left: -36px !important;\n        }\n\n        .f-treetable--fixed-columns .table-hover tbody tr:hover td {\n            background-color: #edf5ff;\n        }\n\n        .f-treetable--fixed-columns\n            .farris-treetable-tbody\n            tr.farris-table-selectedrow\n            td {\n            background-color: #dae9ff!important;\n            color: #424347;\n        }\n\n        .f-treetable--fixed-columns\n            .farris-treetable-tbody\n            tr.f-treetable-disable-row\n            td {\n            background: #fafafc;\n        }\n\n        .f-treetable--fixed-columns.table-bordered\n            tr\n            th.f-treetable--fixed-left[l-tt-shadow-col],\n        .f-treetable--fixed-columns.table-bordered tr th.f-treetable--fixed-right,\n        .f-treetable--fixed-columns.table-bordered tr td.f-treetable--fixed-left,\n        .f-treetable--fixed-columns.table-bordered tr td.f-treetable--fixed-right {\n            border-right: 0;\n            box-shadow: inset -1px 0px 0px #eaecf3;\n        }\n\n        .f-treetable--fixed-columns.table-bordered tr td,\n        .f-treetable--fixed-columns.table-bordered tr td {\n            border-left: 0;\n        }\n\n        .f-treetable--fixed-columns tbody tr:nth-of-type(even) td {\n            background-color: #F7F7F7;\n        }\n\n    "]
                }] }
    ];
    /** @nocollapse */
    TreeTableComponent.ctorParameters = function () { return [
        { type: TreetableService },
        { type: ElementRef },
        { type: ResizeService },
        { type: Renderer2 },
        { type: CommonUtils },
        { type: ColumnFormatService },
        { type: TTHotkeys },
        { type: ChangeDetectorRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    TreeTableComponent.propDecorators = {
        width: [{ type: Input }],
        height: [{ type: Input }],
        showFilterBar: [{ type: Input }],
        showSearchField: [{ type: Input }],
        headerHeight: [{ type: Input }],
        headerWrap: [{ type: Input }],
        rowHeight: [{ type: Input }],
        columns: [{ type: Input }],
        groupColumns: [{ type: Input }],
        useGroupHeader: [{ type: Input }],
        fitColumns: [{ type: Input }],
        autoFitColumns: [{ type: Input }],
        searchFields: [{ type: Input }],
        allColumnsTitle: [{ type: Input }],
        showLines: [{ type: Input }],
        showLinesOnHover: [{ type: Input }],
        multiSelect: [{ type: Input }],
        singleSelect: [{ type: Input }],
        showCheckbox: [{ type: Input }],
        idField: [{ type: Input }],
        showBorder: [{ type: Input }],
        showCheckAll: [{ type: Input }],
        showHeader: [{ type: Input }],
        striped: [{ type: Input }],
        hovered: [{ type: Input }],
        disabled: [{ type: Input }],
        disabledRow: [{ type: Input }],
        loadDataType: [{ type: Input }],
        fixedHeader: [{ type: Input }],
        checkOnSelect: [{ type: Input }],
        selectOnCheck: [{ type: Input }],
        onlySelectSelf: [{ type: Input }],
        resizableColumns: [{ type: Input }],
        fit: [{ type: Input }],
        cascadeCheck: [{ type: Input }],
        cascadeDown: [{ type: Input }],
        cascadeUp: [{ type: Input }],
        emptyMessage: [{ type: Input }],
        indentSpacing: [{ type: Input }],
        keepSelect: [{ type: Input }],
        virtualized: [{ type: Input }],
        onlySelectLeaf: [{ type: Input }],
        showIcon: [{ type: Input }],
        leafIcon: [{ type: Input }],
        expandIcon: [{ type: Input }],
        collapseIcon: [{ type: Input }],
        foldIcon: [{ type: Input }],
        unfoldIcon: [{ type: Input }],
        useIconFromData: [{ type: Input }],
        whenDataIconEmptyUseDefault: [{ type: Input }],
        iconField: [{ type: Input }],
        iconCls: [{ type: Input }],
        remoteSort: [{ type: Input }],
        sortName: [{ type: Input }],
        sortOrder: [{ type: Input }],
        multiSort: [{ type: Input }],
        beforeSortColumn: [{ type: Input }],
        rowStyler: [{ type: Input }],
        cellStyler: [{ type: Input }],
        enableFindText: [{ type: Input }],
        findField: [{ type: Input }],
        expandLevel: [{ type: Input }],
        selectValue: [{ type: Input }],
        selectValueChange: [{ type: Output }],
        dblClickExpand: [{ type: Input }],
        selectValues: [{ type: Input }],
        selectValuesChange: [{ type: Output }],
        nowrap: [{ type: Input }],
        checkValues: [{ type: Input }],
        checkValuesChange: [{ type: Output }],
        beforeNodeSelected: [{ type: Input }],
        beforeNodeUnSelected: [{ type: Input }],
        beforeNodeChecked: [{ type: Input }],
        beforeNodeUnChecked: [{ type: Input }],
        beforeCheckAll: [{ type: Input }],
        beforeUnCheckAll: [{ type: Input }],
        beforeClickNode: [{ type: Input }],
        pagination: [{ type: Input }],
        paginationForChildren: [{ type: Input }],
        pagerViewMode: [{ type: Input }],
        pagerOnServer: [{ type: Input }],
        pageList: [{ type: Input }],
        pageIndex: [{ type: Input }],
        pageSize: [{ type: Input }],
        pagerHeight: [{ type: Input }],
        showPageList: [{ type: Input }],
        showPageInfo: [{ type: Input }],
        showPageNumber: [{ type: Input }],
        pagerLabelSize: [{ type: Input }],
        showGotoInput: [{ type: Input }],
        showTotalForChildren: [{ type: Input }],
        total: [{ type: Input }],
        enableContextMenu: [{ type: Input }],
        contextMenuItems: [{ type: Input }],
        beforeShowContextMenu: [{ type: Input }],
        pageSizeChanged: [{ type: Output }],
        pageChanged: [{ type: Output }],
        columnSorted: [{ type: Output }],
        nodeSelected: [{ type: Output }],
        nodeUnSelect: [{ type: Output }],
        nodeChecked: [{ type: Output }],
        nodeUnChecked: [{ type: Output }],
        checkAll: [{ type: Output }],
        unCheckAll: [{ type: Output }],
        search: [{ type: Output }],
        dblClick: [{ type: Output }],
        loadedData: [{ type: Output }],
        expand: [{ type: Output }],
        collapse: [{ type: Output }],
        expandAllNodes: [{ type: Output }],
        collapseAllNodes: [{ type: Output }],
        appendNew: [{ type: Output }],
        removed: [{ type: Output }],
        updated: [{ type: Output }],
        clearSearchValue: [{ type: Output }],
        cellClick: [{ type: Output }],
        childsPageChanged: [{ type: Output }],
        searchValueChange: [{ type: Output }],
        loadedTimer: [{ type: Input }],
        data: [{ type: Input }],
        autoWidth: [{ type: Input }],
        templates: [{ type: ContentChildren, args: [FarrisTemplateDirective,] }],
        columnsRef: [{ type: ContentChildren, args: [TreeTableColumnDirective,] }],
        headerBox: [{ type: ViewChild, args: ['headerBox',] }],
        resizerHelperVC: [{ type: ViewChild, args: ['resizerHelper',] }],
        headerTable: [{ type: ViewChild, args: ['headerTable',] }],
        bodyTable: [{ type: ViewChild, args: ['bodyTable',] }],
        inputGroup: [{ type: ViewChild, args: ['inputGroup',] }],
        psRef: [{ type: ViewChild, args: [PerfectScrollbarComponent,] }],
        allCheckbox: [{ type: ViewChild, args: ['allCheckbox',] }],
        nodesPagerBar: [{ type: ViewChild, args: ['nodespagerbar',] }],
        ctxMenu: [{ type: ViewChild, args: [FarrisContextMenuDirective,] }],
        onResized: [{ type: HostListener, args: ['window:resize',] }]
    };
    return TreeTableComponent;
}());
export { TreeTableComponent };
if (false) {
    /** @type {?} */
    TreeTableComponent.prototype.id;
    /**
     * 宽度
     * @type {?}
     */
    TreeTableComponent.prototype.width;
    /**
     * 高度
     * @type {?}
     */
    TreeTableComponent.prototype.height;
    /** @type {?} */
    TreeTableComponent.prototype.showFilterBar;
    /**
     * 显示查询字段
     * @type {?}
     */
    TreeTableComponent.prototype.showSearchField;
    /** @type {?} */
    TreeTableComponent.prototype.headerHeight;
    /**
     * 表头折行
     * @type {?}
     */
    TreeTableComponent.prototype.headerWrap;
    /**
     * 行高
     * @type {?}
     */
    TreeTableComponent.prototype.rowHeight;
    /**
     * 列信息
     * @type {?}
     */
    TreeTableComponent.prototype.columns;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype._groupColumns;
    /**
     * 启用多表头
     * @type {?}
     */
    TreeTableComponent.prototype.useGroupHeader;
    /** @type {?} */
    TreeTableComponent.prototype.fitColumns;
    /** @type {?} */
    TreeTableComponent.prototype.autoFitColumns;
    /** @type {?} */
    TreeTableComponent.prototype.searchFields;
    /** @type {?} */
    TreeTableComponent.prototype.allColumnsTitle;
    /**
     * 显示连接线，默认为 false
     * @type {?}
     */
    TreeTableComponent.prototype.showLines;
    /** @type {?} */
    TreeTableComponent.prototype.showLinesOnHover;
    /**
     * 是否启用多选。 默认为单选
     * @type {?}
     */
    TreeTableComponent.prototype.multiSelect;
    /** @type {?} */
    TreeTableComponent.prototype.singleSelect;
    /**
     * 启用多选后，是否显示checkbox
     * @type {?}
     */
    TreeTableComponent.prototype.showCheckbox;
    /**
     * 主键字段
     * @type {?}
     */
    TreeTableComponent.prototype.idField;
    /**
     * 显示边框线
     * @type {?}
     */
    TreeTableComponent.prototype.showBorder;
    /** @type {?} */
    TreeTableComponent.prototype.showCheckAll;
    /** @type {?} */
    TreeTableComponent.prototype.showHeader;
    /**
     * 启用斑马线
     * @type {?}
     */
    TreeTableComponent.prototype.striped;
    /**
     * 启用鼠标划过效果
     * @type {?}
     */
    TreeTableComponent.prototype.hovered;
    /**
     * 禁用。 禁用时不允许选中行
     * @type {?}
     */
    TreeTableComponent.prototype.disabled;
    /**
     * 禁卡节点选中
     * @type {?}
     */
    TreeTableComponent.prototype.disabledRow;
    /**
     * 数据加载方式; 默认值 为 all
     * - all: 全部加载
     * - async: 分层加载
     * @type {?}
     */
    TreeTableComponent.prototype.loadDataType;
    /**
     * 固定表头
     * @type {?}
     */
    TreeTableComponent.prototype.fixedHeader;
    /**
     * 当多选时，选中当前行并钩选
     * @type {?}
     */
    TreeTableComponent.prototype.checkOnSelect;
    /**
     * 当多选时，钩选并选中当前行
     * @type {?}
     */
    TreeTableComponent.prototype.selectOnCheck;
    /**
     * 启用多选时，此属性为true 时，仅当前行选中
     * @type {?}
     */
    TreeTableComponent.prototype.onlySelectSelf;
    /**
     * 启用列宽调整
     * @type {?}
     */
    TreeTableComponent.prototype.resizableColumns;
    /**
     * 设置为true时自适应父容的尺寸
     * @type {?}
     */
    TreeTableComponent.prototype.fit;
    /**
     * 启用级联选中功能
     * @type {?}
     */
    TreeTableComponent.prototype.cascadeCheck;
    /**
     * 向下级联选中
     * @type {?}
     */
    TreeTableComponent.prototype.cascadeDown;
    /**
     * 向上级联选中
     * @type {?}
     */
    TreeTableComponent.prototype.cascadeUp;
    /**
     * 空数据时，显示的提示文本
     * @type {?}
     */
    TreeTableComponent.prototype.emptyMessage;
    /**
     * 缩进间距，默认为 16px
     * @type {?}
     */
    TreeTableComponent.prototype.indentSpacing;
    /**
     * 单击行选中后，在次点击不会被取消选中状态;
     * @type {?}
     */
    TreeTableComponent.prototype.keepSelect;
    /**
     * 虚拟加载
     * @type {?}
     */
    TreeTableComponent.prototype.virtualized;
    /**
     * 仅允许选择叶子节点
     * - default: 应用服务器端传回的设置，如果服务器端没有设置，则与 no 保持一至；
     * - yes: 如果客户端设置为 `yes`, 服务器端的设置失效；
     * - no: 允许选择所有节点；服务器端设置失效
     * @type {?}
     */
    TreeTableComponent.prototype.onlySelectLeaf;
    /**
     * 显示图标
     * @type {?}
     */
    TreeTableComponent.prototype.showIcon;
    /**
     * 叶子节点图标
     * @type {?}
     */
    TreeTableComponent.prototype.leafIcon;
    /**
     * 节点展开图标
     * @type {?}
     */
    TreeTableComponent.prototype.expandIcon;
    /**
     * 节点折叠图标
     * @type {?}
     */
    TreeTableComponent.prototype.collapseIcon;
    /** @type {?} */
    TreeTableComponent.prototype.foldIcon;
    /** @type {?} */
    TreeTableComponent.prototype.unfoldIcon;
    /**
     * 启用节点图标从数据中获取。 默认为 false
     * @type {?}
     */
    TreeTableComponent.prototype.useIconFromData;
    /**
     * 当数据源中icon未设置时使用内置ICON. 默认为 true
     * @type {?}
     */
    TreeTableComponent.prototype.whenDataIconEmptyUseDefault;
    /**
     * 从数据源字段中获取图标
     * @type {?}
     */
    TreeTableComponent.prototype.iconField;
    /**
     * 图标自定义样式
     * @type {?}
     */
    TreeTableComponent.prototype.iconCls;
    /**
     * 启用远端排序
     * @type {?}
     */
    TreeTableComponent.prototype.remoteSort;
    /**
     * 排序字段
     * @type {?}
     */
    TreeTableComponent.prototype.sortName;
    /**
     * 排序方式 asc | desc
     * @type {?}
     */
    TreeTableComponent.prototype.sortOrder;
    /**
     * 允许多列排序
     * @type {?}
     */
    TreeTableComponent.prototype.multiSort;
    /** @type {?} */
    TreeTableComponent.prototype.beforeSortColumn;
    /** @type {?} */
    TreeTableComponent.prototype.rowStyler;
    /** @type {?} */
    TreeTableComponent.prototype.cellStyler;
    /**
     * 启用前端文本查找
     * @type {?}
     */
    TreeTableComponent.prototype.enableFindText;
    /**
     * 文本查询字段, 弃用
     * @type {?}
     */
    TreeTableComponent.prototype.findField;
    /** @type {?} */
    TreeTableComponent.prototype.expandLevel;
    /** @type {?} */
    TreeTableComponent.prototype.selectValue;
    /** @type {?} */
    TreeTableComponent.prototype.selectValueChange;
    /**
     * 启用双击展开节点
     * @type {?}
     */
    TreeTableComponent.prototype.dblClickExpand;
    /**
     * 选中节点ID数组
     * @type {?}
     */
    TreeTableComponent.prototype.selectValues;
    /** @type {?} */
    TreeTableComponent.prototype.selectValuesChange;
    /**
     * 是否禁止折行，默认不折行
     * @type {?}
     */
    TreeTableComponent.prototype.nowrap;
    /** @type {?} */
    TreeTableComponent.prototype.checkValues;
    /** @type {?} */
    TreeTableComponent.prototype.checkValuesChange;
    /** @type {?} */
    TreeTableComponent.prototype.beforeNodeSelected;
    /** @type {?} */
    TreeTableComponent.prototype.beforeNodeUnSelected;
    /** @type {?} */
    TreeTableComponent.prototype.beforeNodeChecked;
    /** @type {?} */
    TreeTableComponent.prototype.beforeNodeUnChecked;
    /** @type {?} */
    TreeTableComponent.prototype.beforeCheckAll;
    /** @type {?} */
    TreeTableComponent.prototype.beforeUnCheckAll;
    /** @type {?} */
    TreeTableComponent.prototype.beforeClickNode;
    /**
     * 分页信息
     * @type {?}
     */
    TreeTableComponent.prototype.pagination;
    /**
     * 分页加载子节点数据
     * @type {?}
     */
    TreeTableComponent.prototype.paginationForChildren;
    /**
     * 分页条显示模式， default, simple
     * @type {?}
     */
    TreeTableComponent.prototype.pagerViewMode;
    /**
     * 启用服务器端分页
     * @type {?}
     */
    TreeTableComponent.prototype.pagerOnServer;
    /**
     * 每页记录数
     * @type {?}
     */
    TreeTableComponent.prototype.pageList;
    /**
     * 当前页码
     * @type {?}
     */
    TreeTableComponent.prototype.pageIndex;
    /**
     * 每页记录数
     * @type {?}
     */
    TreeTableComponent.prototype.pageSize;
    /**
     * 分页区高度
     * @type {?}
     */
    TreeTableComponent.prototype.pagerHeight;
    /**
     * 显示每页记录数
     * @type {?}
     */
    TreeTableComponent.prototype.showPageList;
    /**
     * 显示分页信息
     * @type {?}
     */
    TreeTableComponent.prototype.showPageInfo;
    /**
     * 显示页码
     * @type {?}
     */
    TreeTableComponent.prototype.showPageNumber;
    /**
     * 显示页码最大数量
     * @type {?}
     */
    TreeTableComponent.prototype.pagerLabelSize;
    /**
     * 显示页码输入框
     * @type {?}
     */
    TreeTableComponent.prototype.showGotoInput;
    /**
     * 子节点分页是否显示总记录数，默认 false
     * @type {?}
     */
    TreeTableComponent.prototype.showTotalForChildren;
    /**
     * 总记录数
     * @type {?}
     */
    TreeTableComponent.prototype.total;
    /** @type {?} */
    TreeTableComponent.prototype.enableContextMenu;
    /** @type {?} */
    TreeTableComponent.prototype.contextMenuItems;
    /** @type {?} */
    TreeTableComponent.prototype.beforeShowContextMenu;
    /** @type {?} */
    TreeTableComponent.prototype.pageSizeChanged;
    /** @type {?} */
    TreeTableComponent.prototype.pageChanged;
    /**
     * 排序后
     * @type {?}
     */
    TreeTableComponent.prototype.columnSorted;
    /**
     * 选中事件
     * @type {?}
     */
    TreeTableComponent.prototype.nodeSelected;
    /**
     * 取消选中事件
     * @type {?}
     */
    TreeTableComponent.prototype.nodeUnSelect;
    /**
     * 钩选
     * @type {?}
     */
    TreeTableComponent.prototype.nodeChecked;
    /**
     * 取消钩选
     * @type {?}
     */
    TreeTableComponent.prototype.nodeUnChecked;
    /**
     * 全选事件
     * @type {?}
     */
    TreeTableComponent.prototype.checkAll;
    /**
     * 取消全选
     * @type {?}
     */
    TreeTableComponent.prototype.unCheckAll;
    /**
     * 查询
     * @type {?}
     */
    TreeTableComponent.prototype.search;
    /** @type {?} */
    TreeTableComponent.prototype.dblClick;
    /** @type {?} */
    TreeTableComponent.prototype.loadedData;
    /** @type {?} */
    TreeTableComponent.prototype.expand;
    /** @type {?} */
    TreeTableComponent.prototype.collapse;
    /** @type {?} */
    TreeTableComponent.prototype.expandAllNodes;
    /** @type {?} */
    TreeTableComponent.prototype.collapseAllNodes;
    /** @type {?} */
    TreeTableComponent.prototype.appendNew;
    /** @type {?} */
    TreeTableComponent.prototype.removed;
    /** @type {?} */
    TreeTableComponent.prototype.updated;
    /** @type {?} */
    TreeTableComponent.prototype.clearSearchValue;
    /** @type {?} */
    TreeTableComponent.prototype.cellClick;
    /** @type {?} */
    TreeTableComponent.prototype.childsPageChanged;
    /** @type {?} */
    TreeTableComponent.prototype.searchValueChange;
    /** @type {?} */
    TreeTableComponent.prototype.loadedTimer;
    /** @type {?} */
    TreeTableComponent.prototype.serializedValue;
    /** @type {?} */
    TreeTableComponent.prototype._data;
    /** @type {?} */
    TreeTableComponent.prototype.isLoadNewDataSetEmpty;
    /**
     * 根据内容自动宽度，默认 false;
     * 此属性开启后，自动列宽失效
     * @type {?}
     */
    TreeTableComponent.prototype.autoWidth;
    /** @type {?} */
    TreeTableComponent.prototype.templates;
    /** @type {?} */
    TreeTableComponent.prototype.columnsRef;
    /** @type {?} */
    TreeTableComponent.prototype.headerBox;
    /** @type {?} */
    TreeTableComponent.prototype.resizerHelperVC;
    /** @type {?} */
    TreeTableComponent.prototype.headerTable;
    /** @type {?} */
    TreeTableComponent.prototype.bodyTable;
    /** @type {?} */
    TreeTableComponent.prototype.inputGroup;
    /** @type {?} */
    TreeTableComponent.prototype.psRef;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.headerCheckboxCmp;
    /** @type {?} */
    TreeTableComponent.prototype.nodesPagerBar;
    /** @type {?} */
    TreeTableComponent.prototype.ctxMenu;
    /**
     * 表头模板
     * @type {?}
     */
    TreeTableComponent.prototype.headerTemplate;
    /**
     * 表体模板
     * @type {?}
     */
    TreeTableComponent.prototype.bodyTemplate;
    /**
     * 选中项集合
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype._selections;
    /**
     * 选中项索引
     * @type {?}
     */
    TreeTableComponent.prototype.selectRowIndex;
    /**
     * 选中当前行
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype._selectedRow;
    /**
     * 钩选的记录集合
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype._checkeds;
    /** @type {?} */
    TreeTableComponent.prototype.containerElement;
    /** @type {?} */
    TreeTableComponent.prototype.lastResizerHelperX;
    /** @type {?} */
    TreeTableComponent.prototype.searchData;
    /** @type {?} */
    TreeTableComponent.prototype.scorllBodyHeight;
    /** @type {?} */
    TreeTableComponent.prototype.searchHandle;
    /** @type {?} */
    TreeTableComponent.prototype.searchButtonText;
    /**
     * 显示查询工具条
     * @type {?}
     */
    TreeTableComponent.prototype.showFindInput;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.isDataChanged;
    /** @type {?} */
    TreeTableComponent.prototype.scrollLoader;
    /** @type {?} */
    TreeTableComponent.prototype.topHideHeight;
    /** @type {?} */
    TreeTableComponent.prototype.bottomHideHeight;
    /** @type {?} */
    TreeTableComponent.prototype.state;
    /**
     * 待查询的文本
     * @type {?}
     */
    TreeTableComponent.prototype.findValue;
    /**
     * 结果总数
     * @type {?}
     */
    TreeTableComponent.prototype.findCount;
    /**
     * 当前索引
     * @type {?}
     */
    TreeTableComponent.prototype.findCurrent;
    /**
     * 存储文本查询结果
     * @type {?}
     */
    TreeTableComponent.prototype.findResult;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.findKeysHandler;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype._hotKeys;
    /** @type {?} */
    TreeTableComponent.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.idService;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.styleSheetId;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.styleElement;
    /** @type {?} */
    TreeTableComponent.prototype.fast;
    /** @type {?} */
    TreeTableComponent.prototype.paginationOptions;
    /** @type {?} */
    TreeTableComponent.prototype.selectNodeChangedSubject;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype._UUID;
    /** @type {?} */
    TreeTableComponent.prototype.fixedColumns;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.farrisInstances;
    /** @type {?} */
    TreeTableComponent.prototype.difference;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.debugSer;
    /** @type {?} */
    TreeTableComponent.prototype.onBeforeShowContextMenu;
    /** @type {?} */
    TreeTableComponent.prototype.ttService;
    /** @type {?} */
    TreeTableComponent.prototype.el;
    /** @type {?} */
    TreeTableComponent.prototype.resizeSer;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.renderer;
    /** @type {?} */
    TreeTableComponent.prototype.utils;
    /** @type {?} */
    TreeTableComponent.prototype.colFormatSer;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.shortcuts;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.injector;
}
var TTBodyComponent = /** @class */ (function () {
    function TTBodyComponent(tt) {
        this.tt = tt;
    }
    TTBodyComponent.decorators = [
        { type: Component, args: [{
                    selector: '[treeTableBody]',
                    template: "\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\">\n            <ng-container *ngIf=\"serializedNode.visible\">\n                <ng-container\n                    *ngTemplateOutlet=\"template;\n                        context: {$implicit: serializedNode, node: serializedNode.node,\n                        rowData: serializedNode.node.data, rowIndex: rowIndex, columns: columns}\">\n                </ng-container>\n            </ng-container>\n        </ng-template>\n    "
                }] }
    ];
    /** @nocollapse */
    TTBodyComponent.ctorParameters = function () { return [
        { type: TreeTableComponent }
    ]; };
    TTBodyComponent.propDecorators = {
        columns: [{ type: Input }],
        template: [{ type: Input }]
    };
    return TTBodyComponent;
}());
export { TTBodyComponent };
if (false) {
    /**
     * 列集合
     * @type {?}
     */
    TTBodyComponent.prototype.columns;
    /**
     * 表体模板
     * @type {?}
     */
    TTBodyComponent.prototype.template;
    /** @type {?} */
    TTBodyComponent.prototype.tt;
}
// [style.marginLeft]="rowNode.level * 16 + 'px'"
/**
 * 树节点展开折叠
 */
var TreeTableTogglerComponent = /** @class */ (function () {
    function TreeTableTogglerComponent(tt, ngzone, render) {
        this.tt = tt;
        this.ngzone = ngzone;
        this.render = render;
        this.cls = true;
        this.showLines = false;
        this.indentSpacing = 16;
        this.treeNodeIcon = {};
        this.isShowTriangle = false;
        this.noChilds = false;
        this.subscriptions = [];
    }
    Object.defineProperty(TreeTableTogglerComponent.prototype, "offsetWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this.togglerEl.nativeElement.parentElement.offsetWidth;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TreeTableTogglerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.treeNodeIcon = this.tt.getTreeIcon(this.rowNode.node);
        this.isShowTriangle = this.showTriangle();
        this.noChilds = this.hasChildren();
        /** @type {?} */
        var expandSub = this.tt.expand.subscribe((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            if (_this.rowNode.id === node.data[_this.tt.idField]) {
                _this.updateIcon(_this.rowNode.node);
                if (_this.tt.psRef) {
                    _this.tt.psRef.directiveRef.update();
                }
                _this.tt.detectChanges();
            }
        }));
        /** @type {?} */
        var collapseSub = this.tt.collapse.subscribe((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            if (_this.rowNode.id === node.data[_this.tt.idField]) {
                _this.updateIcon(_this.rowNode.node);
                if (_this.tt.psRef) {
                    _this.tt.psRef.directiveRef.update();
                }
                _this.tt.detectChanges();
            }
        }));
        /** @type {?} */
        var addNewSub = this.tt.appendNew.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e.parent) {
                if (_this.rowNode.id === e.parent.data[_this.tt.idField]) {
                    if (_this.rowNode.node.leaf || _this.rowNode.node.leaf === undefined) {
                        _this.rowNode.node.leaf = false;
                    }
                }
                _this.updateIcon(_this.rowNode.node);
            }
        }));
        this.subscriptions = [expandSub, collapseSub, addNewSub];
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TreeTableTogglerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.showLines && !changes.showLines.isFirstChange()) {
            if (this.showLines) {
                this.render.setStyle(this.togglerEl.nativeElement, 'display', this.isShowTriangle ? '' : 'none');
            }
            else {
                this.render.removeStyle(this.togglerEl.nativeElement, 'display');
            }
            this.reSetLines();
        }
        if (changes.rowNode && !changes.rowNode.isFirstChange()) {
            this.updateIcon(this.rowNode.node);
            // if (changes.rowNode.currentValue.node.children) {
            //     if (!!changes.rowNode.currentValue.node.children.length !== !!changes.rowNode.previousValue.node.children.length) {
            //         this.reSetLines();
            //     }
            // }
            if (this.tt.showLines) {
                /** @type {?} */
                var currenChildrenLength = 0;
                /** @type {?} */
                var previousChildrenLength = 0;
                if (changes.rowNode.currentValue && changes.rowNode.currentValue.node.children) {
                    currenChildrenLength = changes.rowNode.currentValue.node.children.length;
                }
                if (changes.rowNode.previousValue && changes.rowNode.previousValue.node.children) {
                    previousChildrenLength = changes.rowNode.previousValue.node.children.length;
                }
                if (currenChildrenLength != previousChildrenLength || (!currenChildrenLength && !previousChildrenLength)) {
                    this.reSetLines();
                }
            }
        }
    };
    /**
     * @return {?}
     */
    TreeTableTogglerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.tt.bodyTemplate && this.showLines) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.reSetLines();
            }));
        }
    };
    /**
     * @return {?}
     */
    TreeTableTogglerComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        // this.isShowTriangle = this.showTriangle();
    };
    /**
     * @return {?}
     */
    TreeTableTogglerComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        // if (this.tt && this.tt.data) {
        //     this.reSetLines();
        // }
    };
    /**
     * @return {?}
     */
    TreeTableTogglerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unAllSubscriptions();
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableTogglerComponent.prototype.unAllSubscriptions = /**
     * @private
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        function (s) {
            s.unsubscribe();
        }));
        this.subscriptions = [];
    };
    /**
     * @return {?}
     */
    TreeTableTogglerComponent.prototype.hasChildren = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tn = this.rowNode.node;
        return tn.leaf === false || this.rowNode.level !== 0 || (tn.children && tn.children.length > 0);
    };
    /**
     * @return {?}
     */
    TreeTableTogglerComponent.prototype.showTriangle = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tn = this.rowNode.node;
        if (this.tt.loadDataType === 'all') {
            return tn.leaf === false || (tn.children && tn.children.length > 0);
        }
        else {
            return tn.leaf === false;
        }
    };
    /**
     * @return {?}
     */
    TreeTableTogglerComponent.prototype.reSetLines = /**
     * @return {?}
     */
    function () {
        if (this.togglerEl) {
            /** @type {?} */
            var parentEl = this.togglerEl.nativeElement.closest('.treetable-cell-content');
            if (parentEl) {
                /** @type {?} */
                var lineEls = parentEl.querySelectorAll('.treetable-lines');
                for (var k = 0; k < lineEls.length; k++) {
                    lineEls[k].remove();
                }
            }
        }
        this._renderLines();
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableTogglerComponent.prototype._renderLines = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.tt.bodyTemplate) {
            if (this.showLines) {
                this.renderLines();
            }
            else {
                // this.noLineStyle();
            }
        }
        else {
            /*
            if (this.togglerEl) {
                if (this.togglerEl.nativeElement.closest('tr')) {
                    const tds = this.togglerEl.nativeElement.closest('tr').querySelectorAll('td');
                    Array.from(tds).forEach(n => {
                        this.render.setStyle(n, 'padding', '0.25rem 0.75rem');
                    });
                }
            } */
        }
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableTogglerComponent.prototype.noLineStyle = /**
     * @private
     * @return {?}
     */
    function () {
        // this.cls = false;
        if (this.togglerEl) {
            // this.render.setStyle(this.togglerEl.nativeElement, 'margin-left', `${this.rowNode.level * this.indentSpacing}px`);
            this.render.setStyle(this.togglerEl.nativeElement, 'visibility', this.isShowTriangle ? 'visible' : 'hidden');
            this.render.removeStyle(this.togglerEl.nativeElement, 'display');
        }
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableTogglerComponent.prototype.renderLines = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var len = this.rowNode.level;
        if (!this.togglerEl) {
            return;
        }
        /** @type {?} */
        var parentEl = this.togglerEl.nativeElement.closest('.treetable-cell-content');
        if (!parentEl) {
            return;
        }
        /** @type {?} */
        var referEl = this.togglerEl.nativeElement.parentElement;
        if (len === 0 && !this.showTriangle()) {
            this.createLeafNodeLines(referEl, parentEl, true);
        }
        for (var i = 0; i < len; i++) {
            parentEl.insertBefore(this.newLineElement(), referEl);
            /** @type {?} */
            var nearLine = this.newLineElement(false);
            parentEl.insertBefore(nearLine, referEl);
            /** @type {?} */
            var isLeaf = !this.showTriangle();
            if (isLeaf && i === len - 1) {
                this.createLeafNodeLines(referEl, parentEl);
            }
        }
    };
    /**
     * @private
     * @param {?=} border
     * @return {?}
     */
    TreeTableTogglerComponent.prototype.newLineElement = /**
     * @private
     * @param {?=} border
     * @return {?}
     */
    function (border) {
        if (border === void 0) { border = true; }
        /** @type {?} */
        var newLineEl = this.render.createElement('div');
        this.render.addClass(newLineEl, 'treetable-lines');
        if (this.showLines) {
            if (border) {
                this.render.addClass(newLineEl, 'treetable-lines-border-color');
            }
        }
        return newLineEl;
    };
    /**
     * 构造 ∟ or ├
     */
    /**
     * 构造 ∟ or ├
     * @private
     * @param {?} containerEl
     * @param {?} parentEl
     * @param {?=} isTopNode
     * @return {?}
     */
    TreeTableTogglerComponent.prototype.createLeafNodeLines = /**
     * 构造 ∟ or ├
     * @private
     * @param {?} containerEl
     * @param {?} parentEl
     * @param {?=} isTopNode
     * @return {?}
     */
    function (containerEl, parentEl, isTopNode) {
        // ├
        // <div class="treetable-lines" style="border-color: rgb(204, 204, 204);"></div>
        // <div class="treetable-lines treetable-lines-leaf" style="border-color: transparent;">
        //     <div class="normal"></div>
        // </div>
        if (isTopNode === void 0) { isTopNode = false; }
        // ├
        // <div class="treetable-lines" style="border-color: rgb(204, 204, 204);"></div>
        // <div class="treetable-lines treetable-lines-leaf" style="border-color: transparent;">
        //     <div class="normal"></div>
        // </div>
        // ∟
        // <div class="treetable-lines" style="border-color: transparent"></div>
        // <div class="treetable-lines treetable-lines-leaf" style="border-color: transparent;">
        //     <div style="corner"></div>
        // </div>
        /** @type {?} */
        var l1 = this.newLineElement();
        /** @type {?} */
        var l2 = this.newLineElement(false);
        this.render.addClass(l2, 'treetable-lines-leaf');
        /** @type {?} */
        var dessert = this.render.createElement('div');
        if (this.showLines) {
            /** @type {?} */
            var cls = 'normal';
            if (this.rowNode.last) {
                cls = 'corner';
                this.render.removeClass(l1, 'treetable-lines-border-color');
            }
            l2.appendChild(dessert);
            this.render.addClass(dessert, cls);
            this.render.addClass(dessert, 'treetable-lines-border-color');
        }
        parentEl.insertBefore(l1, containerEl);
        parentEl.insertBefore(l2, containerEl);
        if (isTopNode) {
            this.render.setStyle(l2, 'marginRight', '3px');
        }
    };
    /**
     * @private
     * @return {?}
     */
    TreeTableTogglerComponent.prototype.registerClickEvent = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.togglerEl) {
            this.render.listen(this.togglerEl.nativeElement, 'click', this.onClick.bind(this));
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TreeTableTogglerComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        event.preventDefault();
        if (this.rowNode.node['showLoading']) {
            return false;
        }
        if (!this.tt.disabled) {
            this.tt.toggleExpand(this.rowNode.node);
        }
        return false;
    };
    /**
     * @private
     * @param {?} treeNode
     * @return {?}
     */
    TreeTableTogglerComponent.prototype.updateIcon = /**
     * @private
     * @param {?} treeNode
     * @return {?}
     */
    function (treeNode) {
        this.isShowTriangle = this.showTriangle();
        this.noChilds = this.hasChildren();
        this.treeNodeIcon = this.tt.getTreeIcon(treeNode);
    };
    TreeTableTogglerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-treeTableToggler',
                    template: "\n    <a href=\"javascript:void(0)\" #toggler\n            class=\"treenode-fold\" *ngIf=\"showLines\"\n            [ngClass]=\"rowNode.node.expanded ? tt.unfoldIcon : tt.foldIcon\"\n            [style.display]=\"isShowTriangle ? '' : 'none'\"\n            (click)=\"onClick($event)\"></a>\n\n    <a href=\"javascript:void(0)\" #toggler\n            class=\"treenode-fold\"  *ngIf=\"!showLines\"\n            [ngClass]=\"rowNode.node.expanded ? tt.unfoldIcon : tt.foldIcon\"\n            [style.marginLeft.px]=\"rowNode.level * indentSpacing\"\n            [style.visibility]=\"isShowTriangle ? 'visible' : 'hidden'\"\n            (click)=\"onClick($event)\"></a>\n    <span class=\"tree-icon-line\" [style.display]=\"isShowTriangle && showLines? '' : 'none'\"></span>\n    <span [style.display]=\"(tt.showIcon && rowNode.node.showIcon) ? 'inline-block': 'none'\" class=\"treenode-icon\" [ngClass]=\"treeNodeIcon\"></span>\n\n    <tt-checkbox  [rowNode]=\"rowNode\" *ngIf=\"tt.showCheckbox\" [disabled]=\"disabled\" [checked]=\"rowNode.isChecked\" ></tt-checkbox>\n    ",
                    encapsulation: ViewEncapsulation.None,
                    exportAs: 'ttToggler'
                }] }
    ];
    /** @nocollapse */
    TreeTableTogglerComponent.ctorParameters = function () { return [
        { type: TreeTableComponent },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    TreeTableTogglerComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class.f-cmp-treetable-toggler',] }],
        rowNode: [{ type: Input }],
        disabled: [{ type: Input }],
        showLines: [{ type: Input }],
        indentSpacing: [{ type: Input }],
        togglerEl: [{ type: ViewChild, args: ['toggler',] }]
    };
    return TreeTableTogglerComponent;
}());
export { TreeTableTogglerComponent };
if (false) {
    /** @type {?} */
    TreeTableTogglerComponent.prototype.cls;
    /**
     * 树节点
     * @type {?}
     */
    TreeTableTogglerComponent.prototype.rowNode;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.disabled;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.showLines;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.indentSpacing;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.treeNodeIcon;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.isShowTriangle;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.noChilds;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.subscriptions;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.togglerEl;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.tt;
    /**
     * @type {?}
     * @private
     */
    TreeTableTogglerComponent.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    TreeTableTogglerComponent.prototype.render;
}
/**
 * 选中行组件
 */
var TreeTableSelectRowDirective = /** @class */ (function () {
    function TreeTableSelectRowDirective(tt, el, render, ngZone) {
        var _this = this;
        this.tt = tt;
        this.el = el;
        this.render = render;
        this.ngZone = ngZone;
        this.prevent = false;
        this.delay = 0;
        this.subscription = this.tt.selectNodeChangedSubject.subscribe((/**
         * @param {?} ids
         * @return {?}
         */
        function (ids) {
            if (ids && _this.rowNode) {
                /** @type {?} */
                var idArr = ids.split(',');
                if (idArr.indexOf(_this.rowNode.id) > -1) {
                    _this.toggleClass();
                    _this.rowNode.node['elementRef'] = _this.el;
                }
            }
        }));
    }
    /**
     * @return {?}
     */
    TreeTableSelectRowDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // this.rowNode.node.selectable = !this.selectRowDisabled;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TreeTableSelectRowDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // if (changes.selectRowDisabled && !changes.selectRowDisabled.isFirstChange()) {
        //     this.rowNode.node.selectable = !changes.selectRowDisabled.currentValue;
        // }
    };
    /**
     * @return {?}
     */
    TreeTableSelectRowDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    };
    /**
     * @return {?}
     */
    TreeTableSelectRowDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.tt.bodyTemplate) {
            if (!this.tt.isSelected(this.rowNode.node)) {
                this.render.removeClass(this.el.nativeElement, 'farris-table-selectedrow');
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TreeTableSelectRowDirective.prototype.onclick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (this.isEnabled()) {
            // this.rowClick(event);
            if (this.delay !== 0) {
                if (!this.prevent) {
                    this.prevent = true;
                    this.timer = setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.rowClick(event);
                        _this.prevent = false;
                    }), this.delay);
                }
            }
            else {
                this.rowClick(event);
            }
        }
        // event.stopPropagation();
    };
    /**
     * @return {?}
     */
    TreeTableSelectRowDirective.prototype.isEnabled = /**
     * @return {?}
     */
    function () {
        return !this.tt.disabled && this.selectRowDisabled !== true;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    TreeTableSelectRowDirective.prototype.rowClick = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        event.stopPropagation();
        this.tt.beforeClickNode({ instance: this.tt, rowNode: this.rowNode, event: event, type: 'row' }).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!e) {
                return;
            }
            _this.tt.handleRowClick({
                originalEvent: event,
                rowNode: _this.rowNode,
                rowIndex: _this.rowIndex
            });
            _this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.toggleClass();
            }));
        }));
    };
    /**
     * @return {?}
     */
    TreeTableSelectRowDirective.prototype.toggleClass = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.tt.bodyTemplate) {
            if (this.tt.isSelected(this.rowNode.node)) {
                if (this.tt.singleSelect) {
                    this.tt.el.nativeElement.querySelectorAll('.farris-treetable-tbody>tr.farris-table-selectedrow').forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        _this.render.removeClass(n, 'farris-table-selectedrow');
                    }));
                }
                this.render.addClass(this.el.nativeElement, 'farris-table-selectedrow');
            }
            else {
                if (!this.tt.keepSelect) {
                    this.render.removeClass(this.el.nativeElement, 'farris-table-selectedrow');
                }
            }
        }
    };
    TreeTableSelectRowDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[selectRow]',
                    exportAs: 'row'
                },] }
    ];
    /** @nocollapse */
    TreeTableSelectRowDirective.ctorParameters = function () { return [
        { type: TreeTableComponent },
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone }
    ]; };
    TreeTableSelectRowDirective.propDecorators = {
        rowNode: [{ type: Input, args: ['selectRow',] }],
        rowIndex: [{ type: Input }],
        selectRowDisabled: [{ type: Input }],
        delay: [{ type: Input }],
        onclick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return TreeTableSelectRowDirective;
}());
export { TreeTableSelectRowDirective };
if (false) {
    /** @type {?} */
    TreeTableSelectRowDirective.prototype.rowNode;
    /** @type {?} */
    TreeTableSelectRowDirective.prototype.rowIndex;
    /** @type {?} */
    TreeTableSelectRowDirective.prototype.selectRowDisabled;
    /** @type {?} */
    TreeTableSelectRowDirective.prototype.subscription;
    /** @type {?} */
    TreeTableSelectRowDirective.prototype.prevent;
    /** @type {?} */
    TreeTableSelectRowDirective.prototype.timer;
    /** @type {?} */
    TreeTableSelectRowDirective.prototype.delay;
    /** @type {?} */
    TreeTableSelectRowDirective.prototype.tt;
    /**
     * @type {?}
     * @private
     */
    TreeTableSelectRowDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TreeTableSelectRowDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    TreeTableSelectRowDirective.prototype.ngZone;
}
/**
 * 表头全选组件
 */
var TreeTableHeaderCheckboxComponent = /** @class */ (function () {
    function TreeTableHeaderCheckboxComponent(tt, ttService) {
        this.tt = tt;
        this.ttService = ttService;
        this.checkedChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    TreeTableHeaderCheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} event
     * @return {?}
     */
    TreeTableHeaderCheckboxComponent.prototype.handleClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!this.disabled && !this.tt.disabled) {
            /** @type {?} */
            var beforeEvent = !this.checked ? this.tt.beforeCheckAll : this.tt.beforeUnCheckAll;
            beforeEvent({ instance: this.tt, checked: !this.checked }).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                // 全选功能
                _this.chkAll.nativeElement.indeterminate = false;
                _this.checked = !_this.checked;
                _this.tt.toggleNodesWithCheckbox(event, _this.checked);
            }));
        }
        event.stopPropagation();
        return false;
    };
    TreeTableHeaderCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tt-header-checkbox',
                    template: "\n    <div class=\"custom-control custom-checkbox  custom-control-inline tt-checkbox\" style=\"top: -2px;\">\n        <input type=\"checkbox\" #chkAll class=\"custom-control-input\"  [checked]=\"checked\">\n        <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\n    </div>\n    ",
                    styles: ["\n        :host {\n            vertical-align: middle;\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    TreeTableHeaderCheckboxComponent.ctorParameters = function () { return [
        { type: TreeTableComponent },
        { type: TreetableService }
    ]; };
    TreeTableHeaderCheckboxComponent.propDecorators = {
        checked: [{ type: Input }],
        disabled: [{ type: Input }],
        checkedChange: [{ type: Output }],
        chkAll: [{ type: ViewChild, args: ['chkAll',] }]
    };
    return TreeTableHeaderCheckboxComponent;
}());
export { TreeTableHeaderCheckboxComponent };
if (false) {
    /** @type {?} */
    TreeTableHeaderCheckboxComponent.prototype.checked;
    /** @type {?} */
    TreeTableHeaderCheckboxComponent.prototype.disabled;
    /** @type {?} */
    TreeTableHeaderCheckboxComponent.prototype.checkedChange;
    /** @type {?} */
    TreeTableHeaderCheckboxComponent.prototype.chkAll;
    /** @type {?} */
    TreeTableHeaderCheckboxComponent.prototype.tt;
    /** @type {?} */
    TreeTableHeaderCheckboxComponent.prototype.ttService;
}
/**
 * 表体checkbox 组件
 */
var TreeTableCheckboxComponent = /** @class */ (function () {
    function TreeTableCheckboxComponent(tt, ttService) {
        this.tt = tt;
        this.ttService = ttService;
        this.cls1 = true;
        this.checkedChange = new EventEmitter();
        this.destroy$ = new Subject();
        this.ttService = this.tt.ttService;
    }
    /**
     * @return {?}
     */
    TreeTableCheckboxComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    /**
     * @return {?}
     */
    TreeTableCheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.chk.nativeElement.indeterminate = this.rowNode.indeterminate || false;
        this.ttService.changeCheckboxStatus$.pipe(takeUntil(this.destroy$)).pipe(map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (n.id === _this.rowNode.id) {
                return n;
            }
            return null;
        }))).subscribe((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (n) {
                _this.chk.nativeElement.indeterminate = n.indeterminate;
                _this.checked = n.isChecked;
                _this.chk.nativeElement.checked = _this.checked;
            }
        }));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TreeTableCheckboxComponent.prototype.handleClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        event.stopPropagation();
        if (!this.disabled) {
            this.tt.beforeClickNode({ instance: this.tt, rowNode: this.rowNode, event: event, type: 'checkbox' }).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (!e) {
                    return;
                }
                _this.checked = !_this.checked;
                if (_this.tt.singleSelect) {
                    _this.tt.clearAll();
                    if (_this.checked) {
                        _this.tt.selectNode(_this.rowNode.id, true);
                    }
                    else {
                        _this.tt.unSelectNode(_this.rowNode.id, true);
                    }
                }
                else {
                    _this.tt.toggleNodeWithCheckbox(event, _this.rowNode, _this.checked);
                }
            }));
        }
        return false;
    };
    TreeTableCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tt-checkbox',
                    template: "\n    <div class=\"custom-control custom-checkbox  custom-control-inline tt-checkbox\">\n        <input type=\"checkbox\" #chk class=\"custom-control-input\" [disabled]=\"disabled\" [checked]=\"checked\">\n        <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\n    </div>\n    ",
                    styles: ["\n        :host {\n            vertical-align: middle;\n        }\n        :host .custom-checkbox {\n            opacity: 1;\n            float: none;\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    TreeTableCheckboxComponent.ctorParameters = function () { return [
        { type: TreeTableComponent },
        { type: TreetableService }
    ]; };
    TreeTableCheckboxComponent.propDecorators = {
        cls1: [{ type: HostBinding, args: ['class.tree-toggler-checkbox',] }],
        checked: [{ type: Input }],
        disabled: [{ type: Input }],
        rowNode: [{ type: Input }],
        checkedChange: [{ type: Output }],
        chk: [{ type: ViewChild, args: ['chk',] }]
    };
    return TreeTableCheckboxComponent;
}());
export { TreeTableCheckboxComponent };
if (false) {
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.cls1;
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.checked;
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.disabled;
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.rowNode;
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.checkedChange;
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.chk;
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.destroy$;
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.tt;
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.ttService;
}
var DblClickRowDirective = /** @class */ (function () {
    function DblClickRowDirective(tt, el, ttService, selectRowDir) {
        this.tt = tt;
        this.el = el;
        this.ttService = ttService;
        this.selectRowDir = selectRowDir;
        this.enableDblClick = false;
        this.ttService = this.tt.ttService;
    }
    /**
     * @return {?}
     */
    DblClickRowDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.enableDblClick) {
            this.selectRowDir.delay = 0;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DblClickRowDirective.prototype.ondblclick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var prevEl = ((/** @type {?} */ (event.target))).previousSibling;
        if (prevEl && prevEl.type === 'checkbox') {
            return;
        }
        if (this.tt.disabled) {
            return false;
        }
        if (this.tt.multiSelect && this.dblclickNode) {
            if (this.dblclickNode.node.leaf) {
                return false;
            }
        }
        /** @type {?} */
        var clsName = event.target['className'];
        /** @type {?} */
        var togglerTag = null;
        if (clsName.indexOf('f-cmp-treetable-toggler') > -1) {
            togglerTag = event.target['querySelector']('.treenode-fold');
        }
        else {
            if (event.target['className'].indexOf('treenode-fold') > -1) {
                togglerTag = (/** @type {?} */ (event.target));
            }
        }
        if (togglerTag && togglerTag.style.visibility === 'visible') {
            return false;
        }
        if (this.selectRowDir) {
            this.selectRowDir.prevent = false;
            clearTimeout(this.selectRowDir.timer);
            if (this.selectRowDir.rowNode && this.enableDblClick) {
                /** @type {?} */
                var rn = this.selectRowDir.rowNode;
                if (this.tt.loadDataType === 'all' && !rn.node.leaf && this.tt.dblClickExpand) {
                    this.tt.toggleExpand(rn.node);
                }
                this.tt.dblClick.emit(rn.node);
            }
        }
        // event.stopPropagation();
    };
    DblClickRowDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[dblclick]'
                },] }
    ];
    /** @nocollapse */
    DblClickRowDirective.ctorParameters = function () { return [
        { type: TreeTableComponent },
        { type: ElementRef },
        { type: TreetableService },
        { type: TreeTableSelectRowDirective, decorators: [{ type: Optional }, { type: Self }] }
    ]; };
    DblClickRowDirective.propDecorators = {
        enableDblClick: [{ type: Input, args: ['dblclick',] }],
        dblclickNode: [{ type: Input }],
        ondblclick: [{ type: HostListener, args: ['dblclick', ['$event'],] }]
    };
    return DblClickRowDirective;
}());
export { DblClickRowDirective };
if (false) {
    /** @type {?} */
    DblClickRowDirective.prototype.enableDblClick;
    /** @type {?} */
    DblClickRowDirective.prototype.dblclickNode;
    /** @type {?} */
    DblClickRowDirective.prototype.tt;
    /** @type {?} */
    DblClickRowDirective.prototype.el;
    /** @type {?} */
    DblClickRowDirective.prototype.ttService;
    /** @type {?} */
    DblClickRowDirective.prototype.selectRowDir;
}
var CustomRowStyleDirective = /** @class */ (function () {
    function CustomRowStyleDirective(injector, ngZone, el, tt, utils, render) {
        this.injector = injector;
        this.ngZone = ngZone;
        this.el = el;
        this.tt = tt;
        this.utils = utils;
        this.render = render;
    }
    /**
     * @return {?}
     */
    CustomRowStyleDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.col && this.tt.fixedColumns && this.tt.fixedHeader && this.col.fixed) {
            if (this.col.fixed === 'left' || this.col.fixed === 'right') {
                this.setRowStyle();
            }
            return;
        }
        else {
            this.setRowStyle();
        }
    };
    /**
     * @private
     * @return {?}
     */
    CustomRowStyleDirective.prototype.setRowStyle = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var fn = this.tt.rowStyler;
        if (fn) {
            /** @type {?} */
            var sty_1 = fn(this.rowNode.node);
            if (sty_1) {
                if (typeof sty_1 === 'object' && (sty_1.style || sty_1.cls)) {
                    if (sty_1.style) {
                        Object.keys(sty_1.style).forEach((/**
                         * @param {?} s
                         * @return {?}
                         */
                        function (s) {
                            _this.render.setStyle(_this.el.nativeElement, s, sty_1.style[s]);
                        }));
                    }
                    if (sty_1.cls) {
                        sty_1.cls.split(',').forEach((/**
                         * @param {?} c
                         * @return {?}
                         */
                        function (c) {
                            _this.render.addClass(_this.el.nativeElement, c);
                        }));
                    }
                }
                else {
                    if (Array.isArray(sty_1) || typeof sty_1 === 'string') {
                        /** @type {?} */
                        var cls_1 = this.tt.getRowCls(this.rowNode);
                        if (cls_1 && Object.keys(cls_1).length) {
                            Object.keys(cls_1).forEach((/**
                             * @param {?} c
                             * @return {?}
                             */
                            function (c) {
                                if (cls_1[c]) {
                                    _this.render.addClass(_this.el.nativeElement, c);
                                }
                            }));
                        }
                    }
                    else {
                        Object.keys(sty_1).forEach((/**
                         * @param {?} s
                         * @return {?}
                         */
                        function (s) {
                            _this.render.setStyle(_this.el.nativeElement, s, sty_1[s]);
                        }));
                    }
                }
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CustomRowStyleDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.rowNode && !changes.rowNode.isFirstChange()) {
            this.setRowStyle();
        }
    };
    CustomRowStyleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[customRowStyle]'
                },] }
    ];
    /** @nocollapse */
    CustomRowStyleDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: NgZone },
        { type: ElementRef },
        { type: TreeTableComponent },
        { type: CommonUtils },
        { type: Renderer2 }
    ]; };
    CustomRowStyleDirective.propDecorators = {
        rowNode: [{ type: Input, args: ['customRowStyle',] }],
        col: [{ type: Input, args: ['field',] }]
    };
    return CustomRowStyleDirective;
}());
export { CustomRowStyleDirective };
if (false) {
    /** @type {?} */
    CustomRowStyleDirective.prototype.rowNode;
    /** @type {?} */
    CustomRowStyleDirective.prototype.col;
    /**
     * @type {?}
     * @private
     */
    CustomRowStyleDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    CustomRowStyleDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    CustomRowStyleDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    CustomRowStyleDirective.prototype.tt;
    /** @type {?} */
    CustomRowStyleDirective.prototype.utils;
    /**
     * @type {?}
     * @private
     */
    CustomRowStyleDirective.prototype.render;
}
var TTCustomCellStyleDirective = /** @class */ (function () {
    function TTCustomCellStyleDirective(injector, ngZone, el, tt, utils, render) {
        this.injector = injector;
        this.ngZone = ngZone;
        this.el = el;
        this.tt = tt;
        this.utils = utils;
        this.render = render;
    }
    /**
     * @return {?}
     */
    TTCustomCellStyleDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.tt && this.tt.getCellCls) {
            this.setCellStyle();
        }
        if (!this.tt.showBorder && this.tt.columns.length === 1) {
            this.render.setStyle(this.el.nativeElement, 'border-width', '0px');
        }
    };
    /**
     * @private
     * @return {?}
     */
    TTCustomCellStyleDirective.prototype.setCellStyle = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var cellCls = this.tt.getCellCls(this.rowNode, this.column.field);
        if (this.column && this.column.styler) {
            if (cellCls && Object.keys(cellCls).length) {
                Object.keys(cellCls).forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    if (cellCls[c]) {
                        _this.render.addClass(_this.el.nativeElement, c);
                    }
                }));
            }
            /** @type {?} */
            var rowData = this.rowNode.node.data;
            /** @type {?} */
            var ccs_1 = this.column.styler(this.utils.getValue(this.column.field, rowData), rowData, this.rowIndex, this.rowNode);
            if (ccs_1) {
                if (ccs_1.style || ccs_1.cls) {
                    if (ccs_1.style) {
                        Object.keys(ccs_1.style).forEach((/**
                         * @param {?} s
                         * @return {?}
                         */
                        function (s) {
                            _this.render.setStyle(_this.el.nativeElement, s, ccs_1.style[s]);
                        }));
                    }
                    if (ccs_1.cls) {
                        ccs_1.cls.split(',').forEach((/**
                         * @param {?} c
                         * @return {?}
                         */
                        function (c) {
                            _this.render.addClass(_this.el.nativeElement, c);
                        }));
                    }
                }
            }
        }
        else {
            Object.keys(cellCls).forEach((/**
             * @param {?} s
             * @return {?}
             */
            function (s) {
                _this.render.setStyle(_this.el.nativeElement, s, cellCls[s]);
            }));
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TTCustomCellStyleDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.rowNode && !changes.rowNode.isFirstChange()) {
            this.setCellStyle();
        }
    };
    TTCustomCellStyleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[customCellStyle]'
                },] }
    ];
    /** @nocollapse */
    TTCustomCellStyleDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: NgZone },
        { type: ElementRef },
        { type: TreeTableComponent },
        { type: CommonUtils },
        { type: Renderer2 }
    ]; };
    TTCustomCellStyleDirective.propDecorators = {
        column: [{ type: Input, args: ['customCellStyle',] }],
        rowNode: [{ type: Input }],
        rowIndex: [{ type: Input }]
    };
    return TTCustomCellStyleDirective;
}());
export { TTCustomCellStyleDirective };
if (false) {
    /** @type {?} */
    TTCustomCellStyleDirective.prototype.column;
    /** @type {?} */
    TTCustomCellStyleDirective.prototype.rowNode;
    /** @type {?} */
    TTCustomCellStyleDirective.prototype.rowIndex;
    /**
     * @type {?}
     * @private
     */
    TTCustomCellStyleDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    TTCustomCellStyleDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    TTCustomCellStyleDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TTCustomCellStyleDirective.prototype.tt;
    /** @type {?} */
    TTCustomCellStyleDirective.prototype.utils;
    /**
     * @type {?}
     * @private
     */
    TTCustomCellStyleDirective.prototype.render;
}
var TTResizableColumnDirective = /** @class */ (function () {
    function TTResizableColumnDirective(tt, ngzone, el, render) {
        this.tt = tt;
        this.ngzone = ngzone;
        this.el = el;
        this.render = render;
        this.enableResize = true;
    }
    /**
     * @return {?}
     */
    TTResizableColumnDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isEnable()) {
            this.render.addClass(this.el.nativeElement, 'resizable-column');
            this.resizer = document.createElement('span');
            this.resizer.className = 'column-resizer';
            this.el.nativeElement.appendChild(this.resizer);
            this.ngzone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.resizerMouseDownListener = _this.onMouseDown.bind(_this);
                _this.resizer.addEventListener('mousedown', _this.resizerMouseDownListener);
                _this.el.nativeElement.addEventListener('mouseenter', _this.onMouseEnter.bind(_this));
            }));
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TTResizableColumnDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.enableResize && !changes.enableResize.isFirstChange()) {
            if (!this.isEnable() && this.resizer) {
                this.resizer.remove();
            }
        }
    };
    /**
     * @return {?}
     */
    TTResizableColumnDirective.prototype.isEnable = /**
     * @return {?}
     */
    function () {
        return this.tt.resizableColumns && !this.tt.autoWidth && this.enableResize;
    };
    /**
     * @return {?}
     */
    TTResizableColumnDirective.prototype.bindDocumentEvents = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.documentMouseMoveListener = _this.onMouseMove.bind(_this);
            document.addEventListener('mousemove', _this.documentMouseMoveListener);
            _this.documentMouseUpListener = _this.onMouseUp.bind(_this);
            document.addEventListener('mouseup', _this.documentMouseUpListener);
        }));
    };
    /**
     * @return {?}
     */
    TTResizableColumnDirective.prototype.unbindDocumentEvents = /**
     * @return {?}
     */
    function () {
        if (this.documentMouseMoveListener) {
            document.removeEventListener('mousemove', this.documentMouseMoveListener);
            this.documentMouseMoveListener = null;
        }
        if (this.documentMouseUpListener) {
            document.removeEventListener('mouseup', this.documentMouseUpListener);
            this.documentMouseUpListener = null;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TTResizableColumnDirective.prototype.onMouseDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isEnable()) {
            this.tt.onColumnResizeBegin(event);
            this.bindDocumentEvents();
        }
    };
    /**
     * @return {?}
     */
    TTResizableColumnDirective.prototype.onMouseEnter = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TTResizableColumnDirective.prototype.onMouseMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.tt.onColumnResize(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TTResizableColumnDirective.prototype.onMouseUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.tt.onColumnResizeEnd(event, this.el.nativeElement);
        this.unbindDocumentEvents();
    };
    /**
     * @return {?}
     */
    TTResizableColumnDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.resizerMouseDownListener) {
            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);
        }
        this.unbindDocumentEvents();
    };
    TTResizableColumnDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[resizable-column]'
                },] }
    ];
    /** @nocollapse */
    TTResizableColumnDirective.ctorParameters = function () { return [
        { type: TreeTableComponent },
        { type: NgZone },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    TTResizableColumnDirective.propDecorators = {
        enableResize: [{ type: Input, args: ['resizable-column',] }]
    };
    return TTResizableColumnDirective;
}());
export { TTResizableColumnDirective };
if (false) {
    /** @type {?} */
    TTResizableColumnDirective.prototype.enableResize;
    /** @type {?} */
    TTResizableColumnDirective.prototype.resizer;
    /** @type {?} */
    TTResizableColumnDirective.prototype.resizerMouseDownListener;
    /** @type {?} */
    TTResizableColumnDirective.prototype.documentMouseMoveListener;
    /** @type {?} */
    TTResizableColumnDirective.prototype.documentMouseUpListener;
    /** @type {?} */
    TTResizableColumnDirective.prototype.tt;
    /** @type {?} */
    TTResizableColumnDirective.prototype.ngzone;
    /** @type {?} */
    TTResizableColumnDirective.prototype.el;
    /** @type {?} */
    TTResizableColumnDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,