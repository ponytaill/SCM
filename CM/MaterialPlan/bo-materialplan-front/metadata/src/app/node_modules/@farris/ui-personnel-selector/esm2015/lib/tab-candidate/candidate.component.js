/**
 * @fileoverview added by tsickle
 * Generated from: lib/tab-candidate/candidate.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ChangeDetectorRef, Optional, Injector } from '@angular/core';
import { ApiLocalService } from '../../utils/api-service';
import * as _ from 'lodash-es';
import { noDataImg } from '../../assets/resource';
import { of } from 'rxjs';
import { FavoritesTool } from '../../utils/favorites.tool';
export class CandidateComponent {
    /**
     * @param {?} apiService
     * @param {?} injector
     * @param {?} favoritesTool
     */
    constructor(apiService, injector, favoritesTool) {
        this.apiService = apiService;
        this.injector = injector;
        this.favoritesTool = favoritesTool;
        this.items = [];
        this.unSelectedList = [];
        this.userIds = '';
        this.unSelectedUserIds = '';
        this.selectionsChange = new EventEmitter();
        this.candidateItemsChange = new EventEmitter();
        this.allChecked = false;
        this.selections = [];
        this.cloneUserIds = '';
        this.cloneSelections = [];
        this.itemsBackup = [];
        this.allIndexId = 'allIndexId';
        this.noDataImg = noDataImg;
        this.favoritesList = [];
        // 是否显示用户编号
        this.showUserCode = true;
        this.allIndexId = Math.random().toString(16).substring(3, 10);
        this.cdRef = this.injector.get(ChangeDetectorRef);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 兼容老表单
        if (this.favoritesTool) {
            this.favoritesTool.favoritesSubject.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                this.favoritesList = data;
                if (this.enableFavorites) {
                    this.unSelectedListLoad();
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @return {?}
     */
    assembleData() {
        if (this.searchPage) {
            this.searchByCodeOrName();
        }
        else {
            this.assembleDataByUserId(this.unSelectedUserIds).subscribe((/**
             * @param {?} rcRes
             * @return {?}
             */
            rcRes => {
                /** @type {?} */
                const rcResData = rcRes ? (/** @type {?} */ (rcRes)) : [];
                this.unSelectedList = rcResData;
                this.unSelectedListLoad();
                this.candidateItemsChange.emit(this.unSelectedList);
            }));
        }
    }
    /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    toggleFavorites(e, item) {
        this.favoritesTool.toggleFavorites(e, item);
    }
    /**
     * @return {?}
     */
    searchByCodeOrName() {
        this.items = this.items.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            return item.code.indexOf(this.searchText) !== -1 || item.name.indexOf(this.searchText) !== -1;
        }));
    }
    /**
     * @return {?}
     */
    restoreSelections() {
        this.selections = _.cloneDeep(this.cloneSelections);
        // this.emitSelections();
        this.toggleChecked();
        if (this.isAllChecked()) {
            this.allChecked = true;
        }
        else {
            this.allChecked = false;
        }
    }
    /**
     * @return {?}
     */
    toggleAll() {
        if (!this.allChecked) {
            this.checkAll();
        }
        else {
            this.unCheckAll();
        }
        this.emitSelections();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    toggleOne(data) {
        if (data.checked) {
            this.unSelectLine(data);
        }
        else {
            this.selectLine(data);
        }
        this.emitSelections();
    }
    /**
     * datagrid用于数据展示
     * @return {?}
     */
    unSelectedListLoad() {
        this.items = [];
        this.unSelectedList.forEach((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            // const indexId = Math.random().toString(16).substring(2);
            // const item = {
            //     abbreviation: res.abbreviation,
            //     code: res.code,
            //     defaultOrgId: res.defaultOrgId,
            //     defaultOrgPath: res.defaultOrgPath,
            //     ext1: res.ext1,
            //     ext2: res.ext2,
            //     fullPathName: res.fullPathName,
            //     name: res.name,
            //     orgTypeId: res.orgTypeId,
            //     secLevel: res.secLevel,
            //     sortOrder: res.sortOrder,
            //     state: res.state,
            //     su: res.su,
            //     userId: res.userId,
            //     orgAllPath: res.orgAllPath,
            //     type: 'people',
            //     checked: false,
            //     inFavorites: false,
            //     indexId
            // };
            // const indexId = Math.random().toString(16).substring(2);
            // const item = {
            //     abbreviation: res.abbreviation,
            //     code: res.code,
            //     defaultOrgId: res.defaultOrgId,
            //     defaultOrgPath: res.defaultOrgPath,
            //     ext1: res.ext1,
            //     ext2: res.ext2,
            //     fullPathName: res.fullPathName,
            //     name: res.name,
            //     orgTypeId: res.orgTypeId,
            //     secLevel: res.secLevel,
            //     sortOrder: res.sortOrder,
            //     state: res.state,
            //     su: res.su,
            //     userId: res.userId,
            //     orgAllPath: res.orgAllPath,
            //     type: 'people',
            //     checked: false,
            //     inFavorites: false,
            //     indexId
            // };
            /** @type {?} */
            const item = _.cloneDeep(res);
            item.checked = false;
            item.inFavorites = false;
            item.indexId = Math.random().toString(16).substring(2);
            if (this._isInArray(res[this.idField], this.idField, this.selections) !== -1) {
                item.checked = true;
            }
            if (this._isInArray(res[this.idField], this.idField, this.favoritesList) !== -1) {
                item.inFavorites = true;
            }
            item.displayName = !!this.showUserCode ? ('[' + item.code + ']' + item.name) : item.name;
            this.items.push(item);
            this.itemsBackup.push(item);
        }));
        /** @type {?} */
        const tempSelections = _.cloneDeep(this.selections);
        this.toggleChecked();
        this.selections = _.cloneDeep(tempSelections);
        this.cdRef.detectChanges();
    }
    /**
     * 全选后处理
     * @return {?}
     */
    checkAll() {
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this._insertOneIntoSelections(item);
            item.checked = true;
        }));
    }
    /**
     * 全部取消
     * @return {?} void
     */
    unCheckAll() {
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.selections.forEach((/**
             * @param {?} selection
             * @param {?} index
             * @return {?}
             */
            (selection, index) => {
                if (item[this.idField] === selection[this.idField]) {
                    this.selections.splice(index, 1);
                }
            }));
            item.checked = false;
        }));
    }
    /**
     * 当前行选中
     * @param {?} data 当前行的数据（）
     * @return {?}
     */
    selectLine(data) {
        if (this.multiSelect) {
            this._insertOneIntoSelections(data);
        }
        else {
            this.userIds = '';
            this.selections = [];
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (item.checked) {
                    item.checked = false;
                }
            }));
            this._insertOneIntoSelections(data);
        }
        if (this.isAllChecked()) {
            this.allChecked = true;
        }
    }
    /**
     * 单选取消选中
     * @param {?} data 取消选中行
     * @return {?}
     */
    unSelectLine(data) {
        /** @type {?} */
        const index = this._isInArray(data[this.idField], this.idField, this.selections);
        if (index > -1) {
            this.selections.splice(index, 1);
        }
        if (this.allChecked) {
            this.allChecked = false;
        }
    }
    /**
     * @private
     * @return {?}
     */
    emitSelections() {
        /** @type {?} */
        const emitObj = {
            selections: this.selections,
            token: 'candidate'
        };
        this.selectionsChange.emit(emitObj);
    }
    /**
     * todo
     * @param {?} ids
     * @param {?=} initLoad
     * @return {?}
     */
    assembleDataByUserId(ids, initLoad = false) {
        if (!ids) {
            return of([]);
        }
        return this.apiService.getPersonnelByUserIds(this.absUserOrgUrl, this.absOrgType, ids);
    }
    /**
     *  取消选中
     * @param {?} $event 取消勾选的数据
     * @return {?}
     */
    cancelSelections($event) {
        if (this.items.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        item => item[this.idField] === $event.id)) === -1) {
            return;
        }
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (item[this.idField] === $event.id) {
                item.checked = false;
            }
        }));
        this.selections.forEach((/**
         * @param {?} selection
         * @param {?} index
         * @return {?}
         */
        (selection, index) => {
            if ($event.id === selection[this.idField]) {
                this.selections.splice(index, 1);
            }
        }));
        this.allChecked = false;
    }
    /**
     * 全部取消勾选
     * @return {?}
     */
    clearCheckeds() {
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            item.checked = false;
        }));
        this.allChecked = false;
        this.selections = [];
    }
    /**
     * @return {?}
     */
    clearUserIds() {
        this.userIds = '';
    }
    /**
     * 选中并插入当前行数据到右侧
     * @param {?} data 当前行的数据
     * @return {?}
     */
    _insertOneIntoSelections(data) {
        // 如果当前数据已经移入右侧数据，则返回。
        if (this._isInArray(data[this.idField], this.idField, this.selections) > -1) {
            return;
        }
        this.selections.push(data);
        this.selections = this.selections.slice();
    }
    /**
     * 判断是否在内
     * @param {?} value value
     * @param {?} field field
     * @param {?} array array
     * @return {?} 位置索引
     */
    _isInArray(value, field, array) {
        if (!field || !value) {
            throw new Error(this.validElementsInfo);
        }
        return array.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        item => value === item[field]));
    }
    /**
     * 翻页检查：人员展示区的勾选状态与已选人员区是否对应
     * @return {?}
     */
    toggleChecked() {
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (this._isInArray(item[this.idField], this.idField, this.selections) > -1) {
                item.checked = true;
            }
            else {
                item.checked = false;
            }
        }));
        if (this.isAllChecked()) {
            this.allChecked = true;
        }
        else {
            this.allChecked = false;
        }
    }
    /**
     * @private
     * @return {?}
     */
    isAllChecked() {
        /** @type {?} */
        let count = 0;
        /** @type {?} */
        let allChecked = false;
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.selections.forEach((/**
             * @param {?} selection
             * @return {?}
             */
            selection => {
                if (item[this.idField] === selection[this.idField]) {
                    count += 1;
                }
            }));
        }));
        if (this.items.length === count && count > 0) {
            allChecked = true;
        }
        return allChecked;
    }
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    trackByFn(index, item) {
        return index;
    }
}
CandidateComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-candidate',
                template: "<div class=\"candidate\">\r\n    <div class=\"candidate-title\" *ngIf=\"multiSelect && items.length > 0\">\r\n        <div class=\"custom-control custom-checkbox mb-2\">\r\n            <input class=\"custom-control-input\" [id]=\"allIndexId\" type=\"checkbox\" [(ngModel)]=\"allChecked\">\r\n            <label class=\"custom-control-label\" [for]=\"allIndexId\" (click)=\"toggleAll()\">{{'personnelSelector.tabCommon.checkAll' | locale}}</label>\r\n        </div>\r\n    </div>\r\n    <div class=\"candidate_blank_15\" *ngIf=\"!multiSelect\"></div>\r\n    <div class=\"candidate-content\">\r\n        <div *ngFor=\"let data of items; let i = index;trackBy: trackByFn\" class=\"s-selectedPerson\">\r\n            <div class=\"custom-control custom-checkbox mb-2\">\r\n                <input class=\"custom-control-input\" [id]=\"data.indexId\" type=\"checkbox\" [(ngModel)]=\"data.checked\">\r\n                <label class=\"custom-control-label\" [for]=\"data.indexId\" (click)=\"toggleOne(data)\">\r\n                    <div style=\"display: flex; height: 32px; margin: -21px 0 0 24px;\">\r\n                        <farris-avatar [avatarWidth]=\"32\" [avatarHeight]=\"32\" [cover]=\"data.ext1\" [readonly]=\"true\">\r\n                        </farris-avatar>\r\n                        <div style=\"margin-left: 11px; margin-top: -2px;  padding-right: 10px; overflow: hidden;\">\r\n                            <p class=\"candidate-content-title\" title=\"{{data.displayName}}\">\r\n                                {{data.displayName}}</p>\r\n                            <p class=\"candidate-content-orgpath\" title=\"{{data.orgAllPath}}\">\r\n                                {{data.orgAllPath}}</p>\r\n                        </div>\r\n                    </div>\r\n                </label>\r\n            </div>\r\n            <span class=\"f-icon f-icon-star\" *ngIf=\"enableFavorites\" [class.default-light-color]=\"data.inFavorites\"\r\n                [class.default-dark-color]=\"!data.inFavorites\" (click)=\"toggleFavorites($event, data)\"></span>\r\n        </div>\r\n        <div *ngIf=\"items.length===0\" [ngStyle]=\"{'background-image': noDataImg}\" class=\"fp-candidate-nodata\">\r\n            {{'personnelSelector.tabCommon.noUserData' | locale}}</div>\r\n    </div>\r\n</div>",
                styles: [":host{display:-webkit-box;display:flex;height:100%;-webkit-box-flex:1;flex:1;overflow:hidden;position:static;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}.candidate{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-flex:1;flex:1}.candidate .s-selectedPerson:hover{background:#eef5ff;border-radius:5px}.candidate .candidate-content{margin-top:3px;clear:both}.candidate .s-selectedPerson{min-width:240px;float:left;width:calc(50% - 6px);position:relative;height:40px;padding:5px 12px;margin:0 3px 1px}.candidate .s-selectedPerson .f-icon-star{position:absolute;top:13px;right:15px;font-size:14px}.candidate .s-selectedPerson .default-light-color{color:#f7b500}.candidate .s-selectedPerson .default-dark-color{color:#d8dce6}.candidate .k-checkbox-label::after,.candidate .k-checkbox-label::before{top:10px;font-size:16px;width:14px;height:14px}.candidate .fp-candidate-nodata{width:100px;height:100px;text-align:center;background-repeat:no-repeat;background-size:contain;margin:80px auto 0;color:#b4bccc;padding-top:110px}.candidate .candidate-content-title{margin:0;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;font-size:13px}.candidate .candidate-content-orgpath{margin:0;font-size:12px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;color:#c7ccd7}.candidate .candidate-title{display:-webkit-box;display:flex;-webkit-box-pack:justify;justify-content:space-between}.candidate .candidate-title .custom-control{margin:10px 0 0 15px;line-height:35px}.candidate .candidate-title .title-clearall{margin:10px 15px 0 0;color:#2a87ff;cursor:pointer;line-height:35px}.candidate .s-selectedPerson .custom-control-label::before{top:8px}.candidate_blank_15{width:100%;height:15px}"]
            }] }
];
/** @nocollapse */
CandidateComponent.ctorParameters = () => [
    { type: ApiLocalService },
    { type: Injector },
    { type: FavoritesTool, decorators: [{ type: Optional }] }
];
CandidateComponent.propDecorators = {
    idField: [{ type: Input }],
    items: [{ type: Input }],
    absUserOrgUrl: [{ type: Input }],
    absOrgType: [{ type: Input }],
    multiSelect: [{ type: Input }],
    searchText: [{ type: Input }],
    unSelectedList: [{ type: Input }],
    userIds: [{ type: Input }],
    unSelectedUserIds: [{ type: Input }],
    type: [{ type: Input }],
    includeStopUser: [{ type: Input }],
    searchPage: [{ type: Input }],
    includeCurrentUser: [{ type: Input }],
    busNum: [{ type: Input }],
    enableFavorites: [{ type: Input }],
    validElementsInfo: [{ type: Input }],
    selectionsChange: [{ type: Output }],
    candidateItemsChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    CandidateComponent.prototype.idField;
    /** @type {?} */
    CandidateComponent.prototype.items;
    /** @type {?} */
    CandidateComponent.prototype.absUserOrgUrl;
    /** @type {?} */
    CandidateComponent.prototype.absOrgType;
    /** @type {?} */
    CandidateComponent.prototype.multiSelect;
    /** @type {?} */
    CandidateComponent.prototype.searchText;
    /** @type {?} */
    CandidateComponent.prototype.unSelectedList;
    /** @type {?} */
    CandidateComponent.prototype.userIds;
    /** @type {?} */
    CandidateComponent.prototype.unSelectedUserIds;
    /** @type {?} */
    CandidateComponent.prototype.type;
    /** @type {?} */
    CandidateComponent.prototype.includeStopUser;
    /** @type {?} */
    CandidateComponent.prototype.searchPage;
    /** @type {?} */
    CandidateComponent.prototype.includeCurrentUser;
    /** @type {?} */
    CandidateComponent.prototype.busNum;
    /** @type {?} */
    CandidateComponent.prototype.enableFavorites;
    /** @type {?} */
    CandidateComponent.prototype.validElementsInfo;
    /** @type {?} */
    CandidateComponent.prototype.selectionsChange;
    /** @type {?} */
    CandidateComponent.prototype.candidateItemsChange;
    /**
     * @type {?}
     * @private
     */
    CandidateComponent.prototype.cdRef;
    /** @type {?} */
    CandidateComponent.prototype.allChecked;
    /** @type {?} */
    CandidateComponent.prototype.columns;
    /** @type {?} */
    CandidateComponent.prototype.selections;
    /** @type {?} */
    CandidateComponent.prototype.cloneUserIds;
    /** @type {?} */
    CandidateComponent.prototype.cloneSelections;
    /** @type {?} */
    CandidateComponent.prototype.itemsBackup;
    /** @type {?} */
    CandidateComponent.prototype.allIndexId;
    /** @type {?} */
    CandidateComponent.prototype.noDataImg;
    /** @type {?} */
    CandidateComponent.prototype.favoritesList;
    /** @type {?} */
    CandidateComponent.prototype.showUserCode;
    /**
     * @type {?}
     * @private
     */
    CandidateComponent.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    CandidateComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    CandidateComponent.prototype.favoritesTool;
}
//# sourceMappingURL=data:application/json;base64,