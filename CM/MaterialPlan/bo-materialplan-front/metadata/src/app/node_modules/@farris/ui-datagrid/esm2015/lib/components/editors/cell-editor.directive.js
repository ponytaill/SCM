/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ColumnFormatService } from '@farris/ui-common/column';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-07-29 08:14:22
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-11 11:38:58
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { DatagridComponent } from './../../datagrid.component';
import { ComponentFactoryResolver, Directive, Input, ViewContainerRef, Inject, forwardRef, ApplicationRef } from '@angular/core';
import { FormGroup, FormBuilder } from '@angular/forms';
export class GridCellEditorDirective {
    /**
     * @param {?} resolver
     * @param {?} container
     * @param {?} app
     * @param {?} fb
     * @param {?} dg
     */
    constructor(resolver, container, app, fb, dg) {
        this.resolver = resolver;
        this.container = container;
        this.app = app;
        this.fb = fb;
        this.dg = dg;
        this.cfs = null;
        this.timer = null;
        this.cfs = this.dg.inject.get(ColumnFormatService);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.column.editor) {
            this.createCellEditor();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.dg.dgs.cellEditorCreated.emit({ editorRef: this.componentRef, column: this.column, cellEditorRef: this });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.dg.dgs.cellEditorDestory.emit({ editorRef: this.componentRef, column: this.column, cellEditorRef: this });
        if (this.componentRef) {
            this.componentRef.destroy();
        }
        this.componentRef = null;
        if (this.timer) {
            clearTimeout(this.timer);
        }
    }
    /**
     * @private
     * @return {?}
     */
    createCellEditor() {
        /** @type {?} */
        const editorType = this.column.editor.type;
        if (!this.dg.editors[editorType]) {
            this.dg.writeConsole(`找不到名称为 ${editorType} 对应的类。`, 'error');
            return;
        }
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(this.dg.editors[editorType]);
        this.componentRef = this.container.createComponent(factory);
        // this.componentRef.instance.dg = this.dg;
        // this.app.attachView(this.componentRef.hostView);
        this.componentRef.instance.column = this.column;
        this.componentRef.instance.group = this.group;
        this.componentRef.instance.height = this.height;
        this.componentRef.instance.controlId = (this.dg.id || 'DATAGRID_EDITOR') + '_' + this.column.field;
        this.updateControlValue();
        this.componentRef.changeDetectorRef.markForCheck();
        this.componentRef.changeDetectorRef.detectChanges();
        // this.app.tick();
        if (this.timer) {
            clearTimeout(this.timer);
        }
        this.timer = setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.componentRef.instance.instance) {
                if (editorType === 'lookup') {
                    if (!this.componentRef.instance.instance.changeDetector.destroyed) {
                        this.componentRef.instance.instance.changeDetector.detectChanges();
                    }
                    // this.componentRef.instance['bindingData'] = this.rowData;
                }
                // if (editorType === 'textarea') {
                //     const textareaEl = this.componentRef.instance.inputElement;
                //     textareaEl.style.height = textareaEl.closest('tr').style.height;
                // }
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    updateControlValue() {
        if (this.group) {
            this.group['bindingData'] = this.rowData;
            if (this.group.controls[this.column.field]) {
                // if (this.column.editor.type === 'datepicker') {
                //     const dateRef = this.componentRef.instance.instance;
                //     if (dateRef) {
                //         setTimeout(() => {
                //             const { dateFormat } = dateRef.dateOpts;
                //             const val = this.cfs.format(this.value, this.rowData, {type: 'datetime', options: { format: dateFormat}});
                //             this.group.controls[this.column.field].setValue(val, { emitEvent: true });
                //         });
                //     }
                // } else {
                //     this.group.controls[this.column.field].setValue(this.value, { emitEvent: true });
                // }
                this.group.controls[this.column.field].setValue(this.value, { emitEvent: true });
            }
        }
    }
    /**
     * @return {?}
     */
    hideCover() {
        if (this.column.editor && (this.column.editor.type === 'combolist' || this.column.editor.type === 'combo-lookup')) {
            this.componentRef.instance.hide(!1);
        }
    }
}
GridCellEditorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cell-editor]',
            },] }
];
/** @nocollapse */
GridCellEditorDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: ApplicationRef },
    { type: FormBuilder },
    { type: DatagridComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => DatagridComponent)),] }] }
];
GridCellEditorDirective.propDecorators = {
    column: [{ type: Input }],
    group: [{ type: Input }],
    rowData: [{ type: Input }],
    value: [{ type: Input }],
    height: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    GridCellEditorDirective.prototype.column;
    /** @type {?} */
    GridCellEditorDirective.prototype.group;
    /** @type {?} */
    GridCellEditorDirective.prototype.rowData;
    /** @type {?} */
    GridCellEditorDirective.prototype.value;
    /** @type {?} */
    GridCellEditorDirective.prototype.height;
    /** @type {?} */
    GridCellEditorDirective.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    GridCellEditorDirective.prototype.cfs;
    /**
     * @type {?}
     * @private
     */
    GridCellEditorDirective.prototype.timer;
    /**
     * @type {?}
     * @private
     */
    GridCellEditorDirective.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    GridCellEditorDirective.prototype.container;
    /**
     * @type {?}
     * @private
     */
    GridCellEditorDirective.prototype.app;
    /**
     * @type {?}
     * @private
     */
    GridCellEditorDirective.prototype.fb;
    /** @type {?} */
    GridCellEditorDirective.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,