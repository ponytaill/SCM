import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { FormLoadingService } from './form-loading/form-loading.service';
import { RuntimeFrameworkService } from './rtf-service';
import { tap } from 'rxjs/operators';
import { EMPTY } from 'rxjs';
// tslint:disable: max-line-length
var DiscussionGroupService = /** @class */ (function () {
    function DiscussionGroupService(injector, frameContext, loadingService, runtimeFrameworkService) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.loadingService = loadingService;
        this.runtimeFrameworkService = runtimeFrameworkService;
    }
    Object.defineProperty(DiscussionGroupService.prototype, "repository", {
        /**
         * 实体仓库
         */
        get: function () {
            return this.frameContext.repository;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DiscussionGroupService.prototype, "params", {
        /**
         * 命令参数
         */
        get: function () {
            return this['context'] && this['context']['eventParam'] || {};
        },
        enumerable: true,
        configurable: true
    });
    DiscussionGroupService.prototype.addComment = function (id, summary, configId, text, visibility, parentId) {
        var _this = this;
        id = id || this.frameContext && this.frameContext.bindingData.list.currentId || null;
        if (!id) {
            return EMPTY;
        }
        var params = this.buildAddCommentParam(id, text, parentId, summary, visibility, configId);
        var restService = this.repository.restService;
        var url = '/api/runtime/comment/v1.0/bill-comment/comment';
        var requestInfo = restService.buildRequestInfo();
        var options = {
            body: tslib_1.__assign({ requestInfo: requestInfo }, params)
        };
        this.loadingService.show();
        return restService.invoke(url, 'POST', null, options).pipe(tap(function () {
            _this.loadingService.hide();
        }));
    };
    /**
     * 查询评论
     * @param id id
     */
    DiscussionGroupService.prototype.queryComments = function (id, configId, pageIndex, pageSize) {
        var _this = this;
        id = id || this.frameContext && this.frameContext.bindingData.list.currentId || null;
        if (!id) {
            return EMPTY;
        }
        var restService = this.repository.restService;
        var url = this.buildQueryCommentsUrl(id, pageIndex, pageSize, configId);
        this.loadingService.show();
        return restService.invoke(url, 'GET').pipe(tap(function () {
            _this.loadingService.hide();
        }));
    };
    /**
     * 查询所有部门信息
     */
    DiscussionGroupService.prototype.queryAllOrgs = function () {
        var _this = this;
        var restService = this.repository.restService;
        var url = '/api/runtime/sys/v1.0/sysOrgs?param={"layer":"1"}';
        this.loadingService.show();
        return restService.invoke(url, 'GET').pipe(tap(function () {
            _this.loadingService.hide();
        }));
    };
    /**
     * 查询常用@用户
     * @param pageIndex
     * @param pageSize
     */
    DiscussionGroupService.prototype.queryFrequentAtUsers = function (pageIndex, pageSize) {
        var _this = this;
        var restService = this.repository.restService;
        var url = this.buildQueryFrequentAtUsersUrl(pageIndex, pageSize);
        this.loadingService.show();
        return restService.invoke(url, 'GET').pipe(tap(function () {
            _this.loadingService.hide();
        }));
    };
    /**
     * 获取at用户列表
     * @param user 用户编号或者用户名称（过滤使用）
     * @param pageIndex pageIndex
     * @param pageSize pageSize
     */
    DiscussionGroupService.prototype.queryAtUsers = function (user, pageIndex, pageSize) {
        var _this = this;
        var restService = this.repository.restService;
        var url = this.buildQueryAtUsersUrl(user, pageIndex, pageSize);
        this.loadingService.show();
        return restService.invoke(url, 'GET').pipe(tap(function () {
            _this.loadingService.hide();
        }));
    };
    /**
     * 构造获取评论列表的url
     * @param id id
     */
    DiscussionGroupService.prototype.buildQueryCommentsUrl = function (id, pageIndex, pageSize, configId) {
        if (typeof pageIndex === 'undefined' || pageIndex === null) {
            pageIndex = this.params.pageIndex || 0;
        }
        if (typeof pageSize === 'undefined' || pageSize === null) {
            pageSize = this.params.pageSize || 10;
        }
        var serverUri = this.repository.serverUri;
        // const funcId = this.runtimeFrameworkService && this.runtimeFrameworkService.funcId || '';
        return "/api/runtime/comment/v1.0/bill-comment/comment/byBill?configId=" + configId + "&billId=" + id + "&pageSize=" + pageSize + "&pageIndex=" + pageIndex;
    };
    /**
     * 构造获取@用户url
     */
    DiscussionGroupService.prototype.buildQueryAtUsersUrl = function (user, pageIndex, pageSize) {
        var params = [];
        if (typeof pageIndex === 'undefined' || pageIndex === null) {
            pageIndex = this.params.pageIndex || 0;
        }
        if (typeof pageSize === 'undefined' || pageSize === null) {
            pageSize = this.params.pageSize || 1000;
        }
        if (user) {
            params.push("param=" + user);
        }
        params.push("pageSize=" + pageSize);
        params.push("pageIndex=" + pageIndex);
        return "/api/runtime/comment/v1.0/bill-comment/atUser?" + params.join('&');
    };
    DiscussionGroupService.prototype.buildQueryFrequentAtUsersUrl = function (pageIndex, pageSize) {
        var params = [];
        if (typeof pageIndex === 'undefined' || pageIndex === null) {
            pageIndex = this.params.pageIndex || 0;
        }
        if (typeof pageSize === 'undefined' || pageSize === null) {
            pageSize = this.params.pageSize || 6;
        }
        params.push("pageSize=" + pageSize);
        params.push("pageIndex=" + pageIndex);
        return "/api/runtime/comment/v1.0/bill-comment/frequentAtUsers?" + params.join('&');
    };
    DiscussionGroupService.prototype.buildAddCommentParam = function (id, text, parentId, summary, visibility, configId) {
        if (typeof text === 'undefined') {
            text = this.params.text;
        }
        if (typeof parentId === 'undefined') {
            parentId = this.params.parentId;
        }
        if (typeof visibility === 'undefined') {
            visibility = this.params.visibility;
        }
        return {
            'bill': {
                'billId': id,
                'configId': configId,
                'summary': summary
            },
            'comment': {
                'billId': id,
                'configId': configId,
                'parentId': parentId || null,
                'text': text,
                'visibility': visibility
            }
        };
    };
    DiscussionGroupService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DiscussionGroupService.ctorParameters = function () { return [
        { type: Injector },
        { type: FrameContext },
        { type: FormLoadingService },
        { type: RuntimeFrameworkService }
    ]; };
    return DiscussionGroupService;
}());
export { DiscussionGroupService };
//# sourceMappingURL=data:application/json;base64,