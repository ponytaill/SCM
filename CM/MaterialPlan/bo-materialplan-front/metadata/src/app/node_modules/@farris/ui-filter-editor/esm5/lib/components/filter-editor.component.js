/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @Company: Inspur
 * @Version: v0.0.1
 * @Date: 2019-04-09 11:03:49
 * @LastEditTime: 2019-11-30 10:15:14
 */
import { Component, HostBinding, Input, Output, EventEmitter, Injector, Optional } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { FilterService } from './../services/filter.service';
import { Compare } from '@farris/ui-common/types';
import { LocaleService } from '@farris/ui-locale';
var FilterEditorComponent = /** @class */ (function () {
    function FilterEditorComponent(sanitizer, filterService, injector) {
        var _this = this;
        this.sanitizer = sanitizer;
        this.filterService = filterService;
        this.injector = injector;
        this.tabIndex = 0;
        this.columns = [];
        this.conditions = [];
        this.showCode = false;
        this.showSql = false;
        this.enableExpress = false;
        this.enableFrontExpress = false;
        this.fieldEditor = { type: 'select', options: {} };
        this.insertType = 'below';
        this.showExpress = new EventEmitter();
        this.cls = 'f-utils-flex-column f-utils-absolute-all';
        this.localeService = null;
        this.filterService.conditionsChanged.subscribe((/**
         * @param {?} conditionList
         * @return {?}
         */
        function (conditionList) {
            _this.conditions = conditionList;
        }));
        if (this.injector) {
            this.localeService = this.injector.get(LocaleService, null);
        }
    }
    /**
     * @return {?}
     */
    FilterEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.conditions && this.conditions.length) {
            this.conditions = this.conditions.map((/**
             * @param {?} con
             * @return {?}
             */
            function (con) {
                /** @type {?} */
                var cp = parseInt('' + con.compare, 10);
                if (cp === Compare.In || cp === Compare.NotIn) {
                    con.value = con.value.replace(/\r\n/g, ',');
                }
                return con;
            }));
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    FilterEditorComponent.prototype.onTabChange = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.tabIndex = index;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FilterEditorComponent.prototype.onShowExpress = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.showExpress.emit($event);
    };
    /**
     * @return {?}
     */
    FilterEditorComponent.prototype.validation = /**
     * @return {?}
     */
    function () {
        return this.filterService.isValid(this.conditions, this.localeService);
    };
    FilterEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter-editor',
                    template: "\n        <filter-tabs\n            class=\"f-utils-fill-flex-column\"\n            [showCode]=\"showCode\"\n            [showSql]=\"showSql\"\n            [columns]=\"columns\"\n            [height]=\"height\"\n            [enableExpress]=\"enableExpress\"\n            [enableFrontExpress]=\"enableFrontExpress\"\n            [conditions]=\"conditions\"\n            [fieldEditor]=\"fieldEditor\"\n            (showExpress)=\"onShowExpress($event)\"\n            (selectTabChange)=\"onTabChange($event)\"\n            [insertType]=\"insertType\">\n        </filter-tabs>\n    "
                }] }
    ];
    /** @nocollapse */
    FilterEditorComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: FilterService },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    FilterEditorComponent.propDecorators = {
        columns: [{ type: Input }],
        conditions: [{ type: Input }],
        height: [{ type: Input }],
        showCode: [{ type: Input }],
        showSql: [{ type: Input }],
        enableExpress: [{ type: Input }],
        enableFrontExpress: [{ type: Input }],
        fieldEditor: [{ type: Input }],
        insertType: [{ type: Input }],
        showExpress: [{ type: Output }],
        cls: [{ type: HostBinding, args: ['class',] }]
    };
    return FilterEditorComponent;
}());
export { FilterEditorComponent };
if (false) {
    /** @type {?} */
    FilterEditorComponent.prototype.tabIndex;
    /** @type {?} */
    FilterEditorComponent.prototype.columns;
    /** @type {?} */
    FilterEditorComponent.prototype.conditions;
    /** @type {?} */
    FilterEditorComponent.prototype.height;
    /** @type {?} */
    FilterEditorComponent.prototype.showCode;
    /** @type {?} */
    FilterEditorComponent.prototype.showSql;
    /** @type {?} */
    FilterEditorComponent.prototype.enableExpress;
    /** @type {?} */
    FilterEditorComponent.prototype.enableFrontExpress;
    /** @type {?} */
    FilterEditorComponent.prototype.fieldEditor;
    /** @type {?} */
    FilterEditorComponent.prototype.insertType;
    /** @type {?} */
    FilterEditorComponent.prototype.showExpress;
    /** @type {?} */
    FilterEditorComponent.prototype.cls;
    /** @type {?} */
    FilterEditorComponent.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    FilterEditorComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    FilterEditorComponent.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    FilterEditorComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWVkaXRvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9maWx0ZXItZWRpdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFTQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hILE9BQU8sRUFBRSxZQUFZLEVBQWEsTUFBTSwyQkFBMkIsQ0FBQztBQUVwRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDN0QsT0FBTyxFQUFtQixPQUFPLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbEQ7SUFxQ0ksK0JBQW9CLFNBQXVCLEVBQVUsYUFBNEIsRUFBc0IsUUFBa0I7UUFBekgsaUJBUUM7UUFSbUIsY0FBUyxHQUFULFNBQVMsQ0FBYztRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQXNCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFoQnpILGFBQVEsR0FBRyxDQUFDLENBQUM7UUFDSixZQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsZUFBVSxHQUFzQixFQUFFLENBQUM7UUFFbkMsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLHVCQUFrQixHQUFHLEtBQUssQ0FBQztRQUMzQixnQkFBVyxHQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFDLENBQUM7UUFDOUMsZUFBVSxHQUFvQixPQUFPLENBQUM7UUFFckMsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3JCLFFBQUcsR0FBRywwQ0FBMEMsQ0FBQztRQUV2RSxrQkFBYSxHQUFrQixJQUFJLENBQUM7UUFHaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQSxhQUFhO1lBQ3hELEtBQUksQ0FBQyxVQUFVLEdBQUcsYUFBYSxDQUFDO1FBQ3BDLENBQUMsRUFBQyxDQUFDO1FBRUgsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDL0Q7SUFDTCxDQUFDOzs7O0lBRUQsd0NBQVE7OztJQUFSO1FBQ0ksSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFO1lBQzNDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHOzs7O1lBQUMsVUFBQSxHQUFHOztvQkFDL0IsRUFBRSxHQUFHLFFBQVEsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7Z0JBQ3pDLElBQUksRUFBRSxLQUFLLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLE9BQU8sQ0FBQyxLQUFLLEVBQUU7b0JBQzNDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2lCQUMvQztnQkFDRCxPQUFPLEdBQUcsQ0FBQztZQUNmLENBQUMsRUFBQyxDQUFDO1NBQ047SUFDTCxDQUFDOzs7OztJQUdELDJDQUFXOzs7O0lBQVgsVUFBWSxLQUFhO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQzFCLENBQUM7Ozs7O0lBRUQsNkNBQWE7Ozs7SUFBYixVQUFjLE1BQU07UUFDaEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7OztJQUVELDBDQUFVOzs7SUFBVjtRQUNJLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDM0UsQ0FBQzs7Z0JBdEVKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsUUFBUSxFQUFFLG9rQkFlVDtpQkFDSjs7OztnQkF4QlEsWUFBWTtnQkFFWixhQUFhO2dCQUhnRCxRQUFRLHVCQTRDVSxRQUFROzs7MEJBZjNGLEtBQUs7NkJBQ0wsS0FBSzt5QkFDTCxLQUFLOzJCQUNMLEtBQUs7MEJBQ0wsS0FBSztnQ0FDTCxLQUFLO3FDQUNMLEtBQUs7OEJBQ0wsS0FBSzs2QkFDTCxLQUFLOzhCQUVMLE1BQU07c0JBQ04sV0FBVyxTQUFDLE9BQU87O0lBc0N4Qiw0QkFBQztDQUFBLEFBdkVELElBdUVDO1NBbkRZLHFCQUFxQjs7O0lBQzlCLHlDQUFhOztJQUNiLHdDQUFzQjs7SUFDdEIsMkNBQTRDOztJQUM1Qyx1Q0FBd0I7O0lBQ3hCLHlDQUEwQjs7SUFDMUIsd0NBQXlCOztJQUN6Qiw4Q0FBK0I7O0lBQy9CLG1EQUFvQzs7SUFDcEMsNENBQXVEOztJQUN2RCwyQ0FBK0M7O0lBRS9DLDRDQUEyQzs7SUFDM0Msb0NBQXVFOztJQUV2RSw4Q0FBb0M7Ozs7O0lBRXhCLDBDQUErQjs7Ozs7SUFBRSw4Q0FBb0M7Ozs7O0lBQUUseUNBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQENvbXBhbnk6IEluc3B1clxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqIEBEYXRlOiAyMDE5LTA0LTA5IDExOjAzOjQ5XHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMTEtMzAgMTA6MTU6MTRcclxuICovXHJcblxyXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSG9zdEJpbmRpbmcsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSW5qZWN0b3IsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZVN0eWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcblxyXG5pbXBvcnQgeyBGaWx0ZXJTZXJ2aWNlIH0gZnJvbSAnLi8uLi9zZXJ2aWNlcy9maWx0ZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IEZpbHRlckNvbmRpdGlvbiwgQ29tcGFyZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uL3R5cGVzJztcclxuaW1wb3J0IHsgTG9jYWxlU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9jYWxlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdmaWx0ZXItZWRpdG9yJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICAgICAgPGZpbHRlci10YWJzXHJcbiAgICAgICAgICAgIGNsYXNzPVwiZi11dGlscy1maWxsLWZsZXgtY29sdW1uXCJcclxuICAgICAgICAgICAgW3Nob3dDb2RlXT1cInNob3dDb2RlXCJcclxuICAgICAgICAgICAgW3Nob3dTcWxdPVwic2hvd1NxbFwiXHJcbiAgICAgICAgICAgIFtjb2x1bW5zXT1cImNvbHVtbnNcIlxyXG4gICAgICAgICAgICBbaGVpZ2h0XT1cImhlaWdodFwiXHJcbiAgICAgICAgICAgIFtlbmFibGVFeHByZXNzXT1cImVuYWJsZUV4cHJlc3NcIlxyXG4gICAgICAgICAgICBbZW5hYmxlRnJvbnRFeHByZXNzXT1cImVuYWJsZUZyb250RXhwcmVzc1wiXHJcbiAgICAgICAgICAgIFtjb25kaXRpb25zXT1cImNvbmRpdGlvbnNcIlxyXG4gICAgICAgICAgICBbZmllbGRFZGl0b3JdPVwiZmllbGRFZGl0b3JcIlxyXG4gICAgICAgICAgICAoc2hvd0V4cHJlc3MpPVwib25TaG93RXhwcmVzcygkZXZlbnQpXCJcclxuICAgICAgICAgICAgKHNlbGVjdFRhYkNoYW5nZSk9XCJvblRhYkNoYW5nZSgkZXZlbnQpXCJcclxuICAgICAgICAgICAgW2luc2VydFR5cGVdPVwiaW5zZXJ0VHlwZVwiPlxyXG4gICAgICAgIDwvZmlsdGVyLXRhYnM+XHJcbiAgICBgXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgRmlsdGVyRWRpdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIHRhYkluZGV4ID0gMDtcclxuICAgIEBJbnB1dCgpIGNvbHVtbnMgPSBbXTtcclxuICAgIEBJbnB1dCgpIGNvbmRpdGlvbnM6IEZpbHRlckNvbmRpdGlvbltdID0gW107XHJcbiAgICBASW5wdXQoKSBoZWlnaHQ6IG51bWJlcjtcclxuICAgIEBJbnB1dCgpIHNob3dDb2RlID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBzaG93U3FsID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBlbmFibGVFeHByZXNzID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBlbmFibGVGcm9udEV4cHJlc3MgPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpIGZpZWxkRWRpdG9yICA9IHsgdHlwZTogJ3NlbGVjdCcsIG9wdGlvbnM6IHt9fTtcclxuICAgIEBJbnB1dCgpIGluc2VydFR5cGU6ICdhYm92ZSd8J2JlbG93JyA9ICdiZWxvdyc7XHJcblxyXG4gICAgQE91dHB1dCgpIHNob3dFeHByZXNzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIGNscyA9ICdmLXV0aWxzLWZsZXgtY29sdW1uIGYtdXRpbHMtYWJzb2x1dGUtYWxsJztcclxuXHJcbiAgICBsb2NhbGVTZXJ2aWNlOiBMb2NhbGVTZXJ2aWNlID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNhbml0aXplcjogRG9tU2FuaXRpemVyLCBwcml2YXRlIGZpbHRlclNlcnZpY2U6IEZpbHRlclNlcnZpY2UsIEBPcHRpb25hbCgpIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJTZXJ2aWNlLmNvbmRpdGlvbnNDaGFuZ2VkLnN1YnNjcmliZShjb25kaXRpb25MaXN0ID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jb25kaXRpb25zID0gY29uZGl0aW9uTGlzdDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW5qZWN0b3IpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2NhbGVTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoTG9jYWxlU2VydmljZSwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmRpdGlvbnMgJiYgdGhpcy5jb25kaXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmRpdGlvbnMgPSB0aGlzLmNvbmRpdGlvbnMubWFwKGNvbiA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjcCA9IHBhcnNlSW50KCcnICsgY29uLmNvbXBhcmUsIDEwKTtcclxuICAgICAgICAgICAgICAgIGlmIChjcCA9PT0gQ29tcGFyZS5JbiB8fCBjcCA9PT0gQ29tcGFyZS5Ob3RJbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbi52YWx1ZSA9IGNvbi52YWx1ZS5yZXBsYWNlKC9cXHJcXG4vZywgJywnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjb247XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgb25UYWJDaGFuZ2UoaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMudGFiSW5kZXggPSBpbmRleDtcclxuICAgIH1cclxuXHJcbiAgICBvblNob3dFeHByZXNzKCRldmVudCkge1xyXG4gICAgICAgIHRoaXMuc2hvd0V4cHJlc3MuZW1pdCgkZXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbGlkYXRpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyU2VydmljZS5pc1ZhbGlkKHRoaXMuY29uZGl0aW9ucywgdGhpcy5sb2NhbGVTZXJ2aWNlKTtcclxuICAgIH1cclxufVxyXG4iXX0=