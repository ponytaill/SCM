/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Output, HostBinding } from '@angular/core';
import { FilterGridComponent } from './filter-grid.component';
export class FilterFooterComponent {
    /**
     * @param {?} grid
     */
    constructor(grid) {
        this.grid = grid;
        this.cls = 'f-filter-footer';
        this.addFilter = new EventEmitter();
        this.clearFilter = new EventEmitter();
        this.moveTop = new EventEmitter();
        this.movePrev = new EventEmitter();
        this.moveNext = new EventEmitter();
        this.moveBottom = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    onAddFilter() {
        this.addFilter.emit();
    }
    /**
     * @return {?}
     */
    onClear() {
        this.clearFilter.emit();
    }
    /**
     * @return {?}
     */
    onMoveTop() {
        this.moveTop.emit();
    }
    /**
     * @return {?}
     */
    onMovePrev() {
        this.movePrev.emit();
    }
    /**
     * @return {?}
     */
    onMoveNext() {
        this.moveNext.emit();
    }
    /**
     * @return {?}
     */
    onMoveBottom() {
        this.moveBottom.emit();
    }
    /**
     * @return {?}
     */
    canUse() {
        if (this.grid.currentCondition) {
            return this.grid.conditions.length > 1;
        }
        return false;
    }
    /**
     * @return {?}
     */
    canMoveUp() {
        if (this.canUse()) {
            return this.grid.currentCondition.index > 0;
        }
        return false;
    }
    /**
     * @return {?}
     */
    canMoveDown() {
        if (this.canUse()) {
            return this.grid.currentCondition.index < this.grid.conditions.length - 1;
        }
        return false;
    }
}
FilterFooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-footer',
                template: `
    <div class="footer-container">
        <button type="button" (click)="onAddFilter()"
            class="k-button k-button-icontext k-flat "><span class="f-icon f-icon-add"></span> {{ 'filterEditor.addWhere' | locale }}</button>
        <button type="button" (click)="onClear()" [disabled]="!grid.conditions.length"
            class="k-button k-button-icontext k-flat "><span class="f-icon f-icon-close"></span> {{ 'filterEditor.clear' | locale }}</button>
        <button type="button" [disabled]="!canMoveUp()" (click)="onMoveTop()"
            class="k-button k-button-icontext k-flat "><span class="f-icon f-icon-arrow-end-up"></span>
            {{'filterEditor.moveTop' | locale }}</button>
        <button type="button" [disabled]="!canMoveUp()" (click)="onMovePrev()"
            class="k-button k-button-icontext k-flat "><span class="f-icon f-icon-arrow-60-up"></span>
            {{'filterEditor.moveUp' | locale }}</button>
        <button type="button" [disabled]="!canMoveDown()" (click)="onMoveNext()"
            class="k-button k-button-icontext k-flat "><span class="f-icon f-icon-arrow-60-down"></span>
            {{'filterEditor.moveDown' | locale }}</button>
        <button type="button" [disabled]="!canMoveDown()" (click)="onMoveBottom()"
            class="k-button k-button-icontext k-flat"><span class="f-icon f-icon-arrow-end-down"></span>
            {{'filterEditor.moveBottom' | locale }}</button>
    </div>
    `
            }] }
];
/** @nocollapse */
FilterFooterComponent.ctorParameters = () => [
    { type: FilterGridComponent }
];
FilterFooterComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    addFilter: [{ type: Output }],
    clearFilter: [{ type: Output }],
    moveTop: [{ type: Output }],
    movePrev: [{ type: Output }],
    moveNext: [{ type: Output }],
    moveBottom: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FilterFooterComponent.prototype.cls;
    /** @type {?} */
    FilterFooterComponent.prototype.addFilter;
    /** @type {?} */
    FilterFooterComponent.prototype.clearFilter;
    /** @type {?} */
    FilterFooterComponent.prototype.moveTop;
    /** @type {?} */
    FilterFooterComponent.prototype.movePrev;
    /** @type {?} */
    FilterFooterComponent.prototype.moveNext;
    /** @type {?} */
    FilterFooterComponent.prototype.moveBottom;
    /** @type {?} */
    FilterFooterComponent.prototype.grid;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWZvb3Rlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9maWx0ZXItZm9vdGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxZQUFZLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQTBCOUQsTUFBTSxPQUFPLHFCQUFxQjs7OztJQVc5QixZQUFtQixJQUF5QjtRQUF6QixTQUFJLEdBQUosSUFBSSxDQUFxQjtRQVZ0QixRQUFHLEdBQUcsaUJBQWlCLENBQUM7UUFFcEMsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDL0IsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRWpDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzdCLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzlCLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzlCLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBRU0sQ0FBQzs7OztJQUVqRCxRQUFRLEtBQUssQ0FBQzs7OztJQUVkLFdBQVc7UUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7O0lBRUQsU0FBUztRQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7OztJQUNELFVBQVU7UUFDTixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFDRCxVQUFVO1FBQ04sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7O0lBQ0QsWUFBWTtRQUNSLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7OztJQUdELE1BQU07UUFDRixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQzFDO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQzs7OztJQUVELFNBQVM7UUFDTCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQy9DO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztTQUM3RTtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7OztZQW5GSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQW1CVDthQUNKOzs7O1lBeEJRLG1CQUFtQjs7O2tCQTJCdkIsV0FBVyxTQUFDLE9BQU87d0JBRW5CLE1BQU07MEJBQ04sTUFBTTtzQkFFTixNQUFNO3VCQUNOLE1BQU07dUJBQ04sTUFBTTt5QkFDTixNQUFNOzs7O0lBUlAsb0NBQThDOztJQUU5QywwQ0FBeUM7O0lBQ3pDLDRDQUEyQzs7SUFFM0Msd0NBQXVDOztJQUN2Qyx5Q0FBd0M7O0lBQ3hDLHlDQUF3Qzs7SUFDeEMsMkNBQTBDOztJQUU5QixxQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZpbHRlckdyaWRDb21wb25lbnQgfSBmcm9tICcuL2ZpbHRlci1ncmlkLmNvbXBvbmVudCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZmlsdGVyLWZvb3RlcicsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBjbGFzcz1cImZvb3Rlci1jb250YWluZXJcIj5cclxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiAoY2xpY2spPVwib25BZGRGaWx0ZXIoKVwiXHJcbiAgICAgICAgICAgIGNsYXNzPVwiay1idXR0b24gay1idXR0b24taWNvbnRleHQgay1mbGF0IFwiPjxzcGFuIGNsYXNzPVwiZi1pY29uIGYtaWNvbi1hZGRcIj48L3NwYW4+IHt7ICdmaWx0ZXJFZGl0b3IuYWRkV2hlcmUnIHwgbG9jYWxlIH19PC9idXR0b24+XHJcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgKGNsaWNrKT1cIm9uQ2xlYXIoKVwiIFtkaXNhYmxlZF09XCIhZ3JpZC5jb25kaXRpb25zLmxlbmd0aFwiXHJcbiAgICAgICAgICAgIGNsYXNzPVwiay1idXR0b24gay1idXR0b24taWNvbnRleHQgay1mbGF0IFwiPjxzcGFuIGNsYXNzPVwiZi1pY29uIGYtaWNvbi1jbG9zZVwiPjwvc3Bhbj4ge3sgJ2ZpbHRlckVkaXRvci5jbGVhcicgfCBsb2NhbGUgfX08L2J1dHRvbj5cclxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBbZGlzYWJsZWRdPVwiIWNhbk1vdmVVcCgpXCIgKGNsaWNrKT1cIm9uTW92ZVRvcCgpXCJcclxuICAgICAgICAgICAgY2xhc3M9XCJrLWJ1dHRvbiBrLWJ1dHRvbi1pY29udGV4dCBrLWZsYXQgXCI+PHNwYW4gY2xhc3M9XCJmLWljb24gZi1pY29uLWFycm93LWVuZC11cFwiPjwvc3Bhbj5cclxuICAgICAgICAgICAge3snZmlsdGVyRWRpdG9yLm1vdmVUb3AnIHwgbG9jYWxlIH19PC9idXR0b24+XHJcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgW2Rpc2FibGVkXT1cIiFjYW5Nb3ZlVXAoKVwiIChjbGljayk9XCJvbk1vdmVQcmV2KClcIlxyXG4gICAgICAgICAgICBjbGFzcz1cImstYnV0dG9uIGstYnV0dG9uLWljb250ZXh0IGstZmxhdCBcIj48c3BhbiBjbGFzcz1cImYtaWNvbiBmLWljb24tYXJyb3ctNjAtdXBcIj48L3NwYW4+XHJcbiAgICAgICAgICAgIHt7J2ZpbHRlckVkaXRvci5tb3ZlVXAnIHwgbG9jYWxlIH19PC9idXR0b24+XHJcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgW2Rpc2FibGVkXT1cIiFjYW5Nb3ZlRG93bigpXCIgKGNsaWNrKT1cIm9uTW92ZU5leHQoKVwiXHJcbiAgICAgICAgICAgIGNsYXNzPVwiay1idXR0b24gay1idXR0b24taWNvbnRleHQgay1mbGF0IFwiPjxzcGFuIGNsYXNzPVwiZi1pY29uIGYtaWNvbi1hcnJvdy02MC1kb3duXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICB7eydmaWx0ZXJFZGl0b3IubW92ZURvd24nIHwgbG9jYWxlIH19PC9idXR0b24+XHJcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgW2Rpc2FibGVkXT1cIiFjYW5Nb3ZlRG93bigpXCIgKGNsaWNrKT1cIm9uTW92ZUJvdHRvbSgpXCJcclxuICAgICAgICAgICAgY2xhc3M9XCJrLWJ1dHRvbiBrLWJ1dHRvbi1pY29udGV4dCBrLWZsYXRcIj48c3BhbiBjbGFzcz1cImYtaWNvbiBmLWljb24tYXJyb3ctZW5kLWRvd25cIj48L3NwYW4+XHJcbiAgICAgICAgICAgIHt7J2ZpbHRlckVkaXRvci5tb3ZlQm90dG9tJyB8IGxvY2FsZSB9fTwvYnV0dG9uPlxyXG4gICAgPC9kaXY+XHJcbiAgICBgXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgRmlsdGVyRm9vdGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MnKSBjbHMgPSAnZi1maWx0ZXItZm9vdGVyJztcclxuXHJcbiAgICBAT3V0cHV0KCkgYWRkRmlsdGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIGNsZWFyRmlsdGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIEBPdXRwdXQoKSBtb3ZlVG9wID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIG1vdmVQcmV2ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIG1vdmVOZXh0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIG1vdmVCb3R0b20gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHVibGljIGdyaWQ6IEZpbHRlckdyaWRDb21wb25lbnQpIHsgfVxyXG5cclxuICAgIG5nT25Jbml0KCkgeyB9XHJcblxyXG4gICAgb25BZGRGaWx0ZXIoKSB7XHJcbiAgICAgICAgdGhpcy5hZGRGaWx0ZXIuZW1pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2xlYXIoKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhckZpbHRlci5lbWl0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3ZlVG9wKCkge1xyXG4gICAgICAgIHRoaXMubW92ZVRvcC5lbWl0KCk7XHJcbiAgICB9XHJcbiAgICBvbk1vdmVQcmV2KCkge1xyXG4gICAgICAgIHRoaXMubW92ZVByZXYuZW1pdCgpO1xyXG4gICAgfVxyXG4gICAgb25Nb3ZlTmV4dCgpIHtcclxuICAgICAgICB0aGlzLm1vdmVOZXh0LmVtaXQoKTtcclxuICAgIH1cclxuICAgIG9uTW92ZUJvdHRvbSgpIHtcclxuICAgICAgICB0aGlzLm1vdmVCb3R0b20uZW1pdCgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBjYW5Vc2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ3JpZC5jdXJyZW50Q29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdyaWQuY29uZGl0aW9ucy5sZW5ndGggPiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbk1vdmVVcCgpIHtcclxuICAgICAgICBpZiAodGhpcy5jYW5Vc2UoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ncmlkLmN1cnJlbnRDb25kaXRpb24uaW5kZXggPiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbk1vdmVEb3duKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNhblVzZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdyaWQuY3VycmVudENvbmRpdGlvbi5pbmRleCA8IHRoaXMuZ3JpZC5jb25kaXRpb25zLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuIl19