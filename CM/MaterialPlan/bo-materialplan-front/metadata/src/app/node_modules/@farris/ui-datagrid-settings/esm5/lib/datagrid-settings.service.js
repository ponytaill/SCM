/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { map, switchMap } from 'rxjs/operators';
import { forkJoin, of, timer } from 'rxjs';
import { Injectable, Injector, InjectionToken, ComponentFactoryResolver, ApplicationRef } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { MessagerService } from '@farris/ui-messager';
import { DatagridSettingsComponent } from './datagrid-settings.component';
import { cloneDeep } from 'lodash-es';
import { LocaleService } from '@farris/ui-locale';
import { DebugService, IdService } from '@farris/ui-common';
import { SimpleColumnsComponent } from './simple-mode/simple-columns.component';
import { DatagridSchemeService } from './datagrid-scheme.service';
import { NewSchemeComponent } from './scheme/newscheme.component';
import { SchemeListComponent } from './scheme/scheme-list.component';
import { NotifyService } from '@farris/ui-notify';
import { DATAGRID_SETTINGS_LOCALEDATA } from './datagrid-settings-locale';
/** @type {?} */
export var GRID_SETTINGS_WEBAPI = new InjectionToken(' Farris DataGrid User Setting WebApi URI.');
var DatagridSettingsService = /** @class */ (function () {
    function DatagridSettingsService(injector, modalSer, messager, idService, localeSer) {
        this.injector = injector;
        this.modalSer = modalSer;
        this.messager = messager;
        this.idService = idService;
        this.localeSer = localeSer;
        this.multiSortMsg = '列表中未开启多列排序的功能。 请检查！';
        this.columnsSortableMsg = '未开启列的排序功能。请检查！';
        this.notSupportHeaderGroupMsg = '暂不支持多表头设置';
        this.notShowDialog = '多表头暂不支持列显示设置；同时未启用列排序功能。';
        this._httpRestService = null;
        this.languages = [];
        this.gridRefs = null;
        this.activeSchemeItem = null;
        this.saving = false;
        this.cfr = null;
        this.app = null;
        this.schemeListSubscription = null;
        this.currentSchemeitem = null;
        this.debugSer = null;
        this.cfr = this.injector.get(ComponentFactoryResolver);
        this.app = this.injector.get(ApplicationRef);
        this.notifyService = this.injector.get(NotifyService, null);
        this.debugSer = this.injector.get(DebugService, null);
        this.schemeService = new DatagridSchemeService();
        this.localeSer.setLocaleData(DATAGRID_SETTINGS_LOCALEDATA);
    }
    Object.defineProperty(DatagridSettingsService.prototype, "httpRestService", {
        get: /**
         * @return {?}
         */
        function () {
            return this._httpRestService;
        },
        set: /**
         * @param {?} httpSer
         * @return {?}
         */
        function (httpSer) {
            this._httpRestService = httpSer;
            if (this.schemeService) {
                this.schemeService.setRestService(httpSer);
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * @param {?=} id
     * @return {?}
     */
    DatagridSettingsService.prototype.destroy = /**
     * @param {?=} id
     * @return {?}
     */
    function (id) {
        if (this.gridRefs) {
            if (id && this.gridRefs[id]) {
                this.gridRefs[id] = null;
                delete this.gridRefs[id];
            }
            else {
                if (!Object.keys(this.gridRefs).length) {
                    this.gridRefs = null;
                }
            }
        }
        this.saving = false;
        this.setActiveSchemeItem(id, null);
    };
    /**
     * @private
     * @param {?} msg
     * @param {?=} type
     * @return {?}
     */
    DatagridSettingsService.prototype.writeDebugMsg = /**
     * @private
     * @param {?} msg
     * @param {?=} type
     * @return {?}
     */
    function (msg, type) {
        if (type === void 0) { type = 'warn'; }
        if (this.debugSer) {
            if (this.debugSer[type]) {
                this.debugSer[type](msg);
            }
            else {
                console[type](msg);
            }
        }
    };
    /**
     * @param {?} dg
     * @return {?}
     */
    DatagridSettingsService.prototype.registerGridInstance = /**
     * @param {?} dg
     * @return {?}
     */
    function (dg) {
        if (!dg) {
            this.writeDebugMsg('DatagridSettingService: grid instance is null.');
            return;
        }
        /** @type {?} */
        var id = dg.id;
        this.gridRefs = this.gridRefs || {};
        if (!this.gridRefs[id]) {
            this.gridRefs[id] = dg;
        }
    };
    /**
     * @param {?} dgID
     * @return {?}
     */
    DatagridSettingsService.prototype.getGridInstance = /**
     * @param {?} dgID
     * @return {?}
     */
    function (dgID) {
        return this.gridRefs ? this.gridRefs[dgID] : null;
    };
    /** 更新方案中的配置数据 */
    /**
     * 更新方案中的配置数据
     * @private
     * @param {?} schemeItem
     * @param {?} settings
     * @return {?}
     */
    DatagridSettingsService.prototype.updateSchemeSettings = /**
     * 更新方案中的配置数据
     * @private
     * @param {?} schemeItem
     * @param {?} settings
     * @return {?}
     */
    function (schemeItem, settings) {
        if (schemeItem && settings) {
            /** @type {?} */
            var schemeContentObj = schemeItem.queryConditionString ? JSON.parse(schemeItem.queryConditionString) : {};
            if (schemeContentObj) {
                if (schemeContentObj[this.localeSer.localeId]) {
                    /** @type {?} */
                    var schemeSettings = schemeContentObj[this.localeSer.localeId] || {};
                    schemeContentObj[this.localeSer.localeId] = Object.assign(schemeSettings, settings);
                }
                else {
                    schemeContentObj[this.localeSer.localeId] = settings;
                }
                schemeItem.queryConditionString = JSON.stringify(schemeContentObj);
            }
        }
    };
    /** 更新当前方案配置数据 */
    /**
     * 更新当前方案配置数据
     * @param {?} dgId
     * @param {?} settings
     * @return {?}
     */
    DatagridSettingsService.prototype.updateActiveSchemeItemSettings = /**
     * 更新当前方案配置数据
     * @param {?} dgId
     * @param {?} settings
     * @return {?}
     */
    function (dgId, settings) {
        /** @type {?} */
        var schemeItem = this.getActiveSchemeItem(dgId);
        this.updateSchemeSettings(schemeItem, settings);
    };
    /** 设置活动的方案 */
    /**
     * 设置活动的方案
     * @param {?} dgId
     * @param {?} activeItem
     * @return {?}
     */
    DatagridSettingsService.prototype.setActiveSchemeItem = /**
     * 设置活动的方案
     * @param {?} dgId
     * @param {?} activeItem
     * @return {?}
     */
    function (dgId, activeItem) {
        /** @type {?} */
        var schemekey = this.schemeService.getSchemeKey(dgId);
        this.activeSchemeItem = this.activeSchemeItem || {};
        this.activeSchemeItem[schemekey] = activeItem;
    };
    /** 获取当前活动的方案 */
    /**
     * 获取当前活动的方案
     * @param {?} dgId
     * @return {?}
     */
    DatagridSettingsService.prototype.getActiveSchemeItem = /**
     * 获取当前活动的方案
     * @param {?} dgId
     * @return {?}
     */
    function (dgId) {
        /** @type {?} */
        var schemekey = this.schemeService.getSchemeKey(dgId);
        return this.activeSchemeItem ? this.activeSchemeItem[schemekey] : null;
    };
    /**
     * @return {?}
     */
    DatagridSettingsService.prototype.getSearchTypes = /**
     * @return {?}
     */
    function () {
        return [
            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
        ];
    };
    /**
     * @param {?} gridInstance
     * @param {?=} settings
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    DatagridSettingsService.prototype.showSimple = /**
     * @param {?} gridInstance
     * @param {?=} settings
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    function (gridInstance, settings, selectedSchemeItem) {
        var _this = this;
        /** @type {?} */
        var columns = this.convertColumnsToSimple(gridInstance.columns);
        columns[0] = tslib_1.__spread(columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field && n.field !== gridInstance.ControlPanelFeild; })));
        /** @type {?} */
        var searchTypes = this.getSearchTypes();
        if (this.cfr) {
            /** @type {?} */
            var cmpFactory = this.cfr.resolveComponentFactory(SimpleColumnsComponent);
            /** @type {?} */
            var simpleRef_1 = cmpFactory.create(this.injector);
            this.app.attachView(simpleRef_1.hostView);
            simpleRef_1.instance.columns = columns;
            simpleRef_1.instance.seartTypes = searchTypes;
            simpleRef_1.instance.gridInstance = gridInstance;
            if (document.querySelector('#page-wrapper')) {
                simpleRef_1.instance.top = 76;
            }
            simpleRef_1.instance.enableScheme = gridInstance.enableScheme;
            if (gridInstance.enableScheme) {
                if (settings) {
                    if (selectedSchemeItem) {
                        this.updateSchemeSettings(selectedSchemeItem, settings);
                        simpleRef_1.instance.currentSchemeItem = selectedSchemeItem;
                    }
                    else {
                        simpleRef_1.instance.currentSchemeItem = null;
                        simpleRef_1.instance.settings = settings;
                    }
                }
                else {
                    /** @type {?} */
                    var _currentSchemtItem = this.getActiveSchemeItem(gridInstance.id);
                    this.currentSchemeitem = _currentSchemtItem;
                    simpleRef_1.instance.currentSchemeItem = _currentSchemtItem;
                }
            }
            document.body.appendChild(simpleRef_1.location.nativeElement);
            simpleRef_1.instance.closed.pipe(switchMap((/**
             * @return {?}
             */
            function () {
                if (simpleRef_1) {
                    simpleRef_1.instance.container.nativeElement.style.right = '-500px';
                    return timer(500);
                }
            }))).subscribe((/**
             * @return {?}
             */
            function () {
                simpleRef_1.location.nativeElement.remove();
                simpleRef_1.destroy();
                simpleRef_1 = null;
                if (_this.schemeListSubscription) {
                    _this.schemeListSubscription.unsubscribe();
                }
                /** @type {?} */
                var _activeSchemtItem = _this.getActiveSchemeItem(gridInstance.id);
                if ((!_this.currentSchemeitem || (_activeSchemtItem && _activeSchemtItem.id !== _this.currentSchemeitem.id)) && (_activeSchemtItem && _activeSchemtItem.queryConditionString)) {
                    /** @type {?} */
                    var _currentSettings_1 = JSON.parse(_activeSchemtItem.queryConditionString)[_this.localeSer.localeId];
                    if (_currentSettings_1) {
                        columns[0].forEach((/**
                         * @param {?} f
                         * @return {?}
                         */
                        function (f) {
                            f.visible = _currentSettings_1.viewColumns.indexOf(f.field) > -1;
                        }));
                    }
                }
            }));
            simpleRef_1.instance.advanced.subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var viewFields = _a.viewFields;
                if (viewFields && viewFields.length) {
                    _this.updateSchemeSettings(simpleRef_1.instance.currentSchemeItem, { viewColumns: viewFields });
                }
                _this.showAdvanced(gridInstance, null, simpleRef_1.instance.currentSchemeItem);
            }));
            simpleRef_1.instance.submit.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.target.disabled = true;
                if (_this.saving) {
                    return;
                }
                if (!_this.saving) {
                    _this.setActiveSchemeItem(gridInstance.id, e.currentScheme);
                    _this.updateGridView(e, gridInstance, e.target);
                }
            }));
            simpleRef_1.instance.fieldsChange.subscribe((/**
             * @param {?} visibleFields
             * @return {?}
             */
            function (visibleFields) {
                _this.updateActiveSchemeItemSettings(gridInstance.id, { viewColumns: visibleFields });
            }));
            // 打开新增方案窗口
            simpleRef_1.instance.addNewScheme.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.showNewSchemeDialog(gridInstance, e, simpleRef_1);
            }));
            simpleRef_1.instance.schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];
            // 打开方案管理列表窗口
            simpleRef_1.instance.showSchemeList.subscribe((/**
             * @return {?}
             */
            function () {
                _this.schemeService.getSchemeList(gridInstance.id).pipe(switchMap((/**
                 * @param {?} t
                 * @return {?}
                 */
                function (t) {
                    return _this.schemeService.checkAuthority().pipe(map((/**
                     * @param {?} auth
                     * @return {?}
                     */
                    function (auth) {
                        return tslib_1.__assign({ list: t }, auth);
                    })));
                }))).subscribe((/**
                 * @param {?} t
                 * @return {?}
                 */
                function (t) {
                    _this.schemeService.setSchemeList(gridInstance.id, t.list || []);
                    _this.showSchemeListDialog(gridInstance, cloneDeep(t.list || []), t, simpleRef_1);
                }));
            }));
            this.schemeListSubscription = this.schemeService.schemeList$.subscribe((/**
             * @param {?} list
             * @return {?}
             */
            function (list) {
                simpleRef_1.instance.schemeList = list;
                if (!list || !list.length) {
                    _this.setActiveSchemeItem(gridInstance.id, null);
                    return;
                }
                /** @type {?} */
                var _activeSchemeItem = _this.getActiveSchemeItem(gridInstance.id);
                if (_activeSchemeItem) {
                    /** @type {?} */
                    var hasActiveItem = list.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.id === _activeSchemeItem.id; }));
                    if (!hasActiveItem) {
                        hasActiveItem = _this.getDefaultScheme(list); // 获取设置为当前方案的项
                        _this.setActiveSchemeItem(gridInstance.id, hasActiveItem || null);
                    }
                    simpleRef_1.instance.currentSchemeItem = hasActiveItem;
                }
            }));
            // 切换方案
            // simpleRef.instance.activeItemChange.subscribe((r: any) => {
            //     this.setActiveSchemeItem(gridInstance.id, r);
            // });
            simpleRef_1.instance.schemeChanged.subscribe((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                _this.currentSchemeitem = t;
            }));
            simpleRef_1.hostView.detectChanges();
            simpleRef_1.instance.container.nativeElement.style.right = '0px';
            return simpleRef_1;
        }
    };
    /**
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    DatagridSettingsService.prototype.show = /**
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    function (gridInstance, opts) {
        this.registerGridInstance(gridInstance);
        if (gridInstance.enableSimpleMode) {
            return this.showSimple(gridInstance);
        }
        else {
            return this.showAdvanced(gridInstance, opts);
        }
    };
    /**
     * @private
     * @param {?} gridInstance
     * @param {?=} opts
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    DatagridSettingsService.prototype.showAdvanced = /**
     * @private
     * @param {?} gridInstance
     * @param {?=} opts
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    function (gridInstance, opts, selectedSchemeItem) {
        var _this = this;
        /** @type {?} */
        var _editColSortInfo = true;
        /** @type {?} */
        var editColSortInfo = this.canSetColumnSort(gridInstance);
        if (editColSortInfo !== true) {
            // this.messager.warning(msg);
            // return;
            _editColSortInfo = false;
        }
        /** @type {?} */
        var showSetColumnsTab = !this.isHeaderGroup(gridInstance);
        /** @type {?} */
        var getActiveTabIndex = (/**
         * @return {?}
         */
        function () {
            if (showSetColumnsTab) {
                return 1;
            }
            else {
                if (_editColSortInfo) {
                    return 2;
                }
                else {
                    return -1;
                }
            }
        });
        /** @type {?} */
        var activeTabIndex = getActiveTabIndex();
        if (activeTabIndex === -1) {
            this.messager.warning(this.notShowDialog);
            return;
        }
        /** @type {?} */
        var columns = this.convertColumnsToSimple(gridInstance.columns);
        // 获取当前方案中当前语言的配置数据
        /** @type {?} */
        var currentSettings = null;
        if (selectedSchemeItem && selectedSchemeItem.queryConditionString) {
            currentSettings = JSON.parse(selectedSchemeItem.queryConditionString)[this.localeSer.localeId];
            if (currentSettings.columnFormat && currentSettings.columnFormat.length) {
                columns[0] = columns[0].map((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) {
                    /** @type {?} */
                    var fcol = currentSettings.columnFormat.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === col.field; }));
                    if (fcol) {
                        col = Object.assign(col, fcol);
                    }
                    return col;
                }));
            }
            if (currentSettings.viewColumns && currentSettings.viewColumns.length) {
                columns[0].forEach((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) {
                    f.visible = currentSettings.viewColumns.indexOf(f.field) > -1;
                }));
            }
        }
        columns[0] = columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field && n.field !== gridInstance.ControlPanelFeild; }));
        /** @type {?} */
        var treeData = this.convertColumns2TreeData(cloneDeep(columns), true);
        /** @type {?} */
        var viewColumnsTreeData = this.convertColumns2TreeData(cloneDeep(columns), false);
        this.checkViewTreeNodes(viewColumnsTreeData);
        /** @type {?} */
        var modalRef = null;
        /** @type {?} */
        var okText = this.localeSer.getValue('datagrid.settings.ok') || '确定';
        /** @type {?} */
        var cancelText = this.localeSer.getValue('datagrid.settings.cancel') || '取消';
        /** @type {?} */
        var resetText = this.localeSer.getValue('datagrid.settings.reset') || '重置';
        /** @type {?} */
        var defaultOpts = {
            width: 760, height: 560, showHeader: false, title: '控制面板',
            initialState: {
                columns: columns,
                sortTreeData: treeData,
                viewTreeData: viewColumnsTreeData,
                gridInstance: gridInstance,
                canSetColumnSort: _editColSortInfo,
                canSetColumnVisible: showSetColumnsTab,
                activeTabIndex: activeTabIndex,
                schemeInfo: currentSettings
            },
            showButtons: false
        };
        /** @type {?} */
        var modalOpts = Object.assign(defaultOpts, opts || {});
        modalRef = this.modalSer.show(DatagridSettingsComponent, modalOpts);
        /** @type {?} */
        var instance = (/** @type {?} */ (modalRef.content));
        instance.enableReset = true;
        instance.modalRef = modalRef;
        instance.canSetColumnSort = _editColSortInfo;
        instance.canSetColumnVisible = !this.isHeaderGroup(gridInstance);
        instance.submitHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.target.disabled = true;
            if (_this.saving) {
                return;
            }
            if (!_this.saving) {
                if (selectedSchemeItem) {
                    _this.setActiveSchemeItem(gridInstance.id, selectedSchemeItem);
                }
                _this.updateGridView(modalRef, gridInstance, e.target);
            }
        }));
        instance.cancelHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            modalRef.close();
        }));
        // 切换到侧边栏简洁模式
        instance.concise.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            modalRef.close();
            /** @type {?} */
            var settings = modalRef.content;
            var sortInfo = settings.sortInfo, viewColumns = settings.viewColumns, columnFormat = settings.columnFormat, groupField = settings.groupField;
            _this.showSimple(gridInstance, { sortInfo: sortInfo, viewColumns: viewColumns, columnFormat: columnFormat, groupField: groupField }, selectedSchemeItem);
        }));
        /** @type {?} */
        var modalContainer = (/** @type {?} */ (modalRef.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
        return modalRef;
    };
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.canSetColumnSort = /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        if (gridInstance.multiSort && this.hasEnableSortColumns(gridInstance)) {
            return true;
        }
        else {
            if (!this.hasEnableSortColumns(gridInstance)) {
                return this.columnsSortableMsg;
            }
            else if (!gridInstance.multiSort) {
                return this.multiSortMsg;
            }
        }
    };
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.hasEnableSortColumns = /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        /** @type {?} */
        var sortColumnsCount = gridInstance.flatColumns.reduce((/**
         * @param {?} c
         * @param {?} r
         * @return {?}
         */
        function (c, r) {
            if (r.sortable) {
                return c + 1;
            }
            return c;
        }), 0);
        return sortColumnsCount > 0;
    };
    /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    DatagridSettingsService.prototype.isHeaderGroup = /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    function (grid) {
        /** @type {?} */
        var flag = grid.columns.length > 1;
        if (flag) {
            return this.notSupportHeaderGroupMsg;
        }
        return flag;
    };
    /**
     * @private
     * @param {?} cols
     * @param {?} rowIndex
     * @param {?} colStartIndex
     * @param {?} colCount
     * @param {?=} forSort
     * @return {?}
     */
    DatagridSettingsService.prototype.getChilds = /**
     * @private
     * @param {?} cols
     * @param {?} rowIndex
     * @param {?} colStartIndex
     * @param {?} colCount
     * @param {?=} forSort
     * @return {?}
     */
    function (cols, rowIndex, colStartIndex, colCount, forSort) {
        var _this = this;
        if (forSort === void 0) { forSort = false; }
        /** @type {?} */
        var childCols = [];
        /** @type {?} */
        var _count = colStartIndex;
        if (!cols[rowIndex]) {
            return [];
        }
        cols[rowIndex].slice().forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            _count = _count + element.colspan;
            if (_count <= colCount) {
                childCols.push(element);
            }
        }));
        cols[rowIndex].splice(0, childCols.length);
        return childCols.map((/**
         * @param {?} c
         * @param {?} i
         * @return {?}
         */
        function (c, i) {
            /** @type {?} */
            var n = {
                data: c,
                selectable: forSort ? !!c.sortable : true
            };
            if (c.colspan && c.colspan > 1) {
                n = {
                    data: c,
                    selectable: false,
                    expanded: true,
                    children: _this.getChilds(cols, rowIndex + 1, 0, c.colspan)
                };
            }
            return n;
        }));
    };
    /**
     * @param {?} cols
     * @param {?=} forSort
     * @return {?}
     */
    DatagridSettingsService.prototype.convertColumns2TreeData = /**
     * @param {?} cols
     * @param {?=} forSort
     * @return {?}
     */
    function (cols, forSort) {
        var _this = this;
        if (forSort === void 0) { forSort = false; }
        /** @type {?} */
        var columns = cols.map((/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            /** @type {?} */
            var aa = c.map((/**
             * @param {?} _
             * @return {?}
             */
            function (_) {
                if (_.field.indexOf('farris-datagrid-column_') == -1) {
                    _.colspan = _.colspan || 1;
                    return _;
                }
                return null;
            }));
            return aa.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n; }));
        }));
        if (columns.length === 1) {
            return columns[0].map((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                return {
                    data: c,
                    selectable: forSort ? !!c.sortable : true
                };
            }));
        }
        else {
            return columns[0].map((/**
             * @param {?} c
             * @param {?} i
             * @return {?}
             */
            function (c, i) {
                if (c.colspan && c.colspan > 1) {
                    return {
                        data: c,
                        selectable: false,
                        expanded: true,
                        children: _this.getChilds(columns, 1, 0, c.colspan, forSort)
                    };
                }
                else {
                    return {
                        data: c,
                        selectable: forSort ? !!c.sortable : true
                    };
                }
            }));
        }
    };
    /**
     * @private
     * @param {?} treeNodes
     * @return {?}
     */
    DatagridSettingsService.prototype.checkViewTreeNodes = /**
     * @private
     * @param {?} treeNodes
     * @return {?}
     */
    function (treeNodes) {
        var _this = this;
        treeNodes.forEach((/**
         * @param {?} tn
         * @return {?}
         */
        function (tn) {
            if (!tn.children || !tn.children.length) {
                tn.selectable = true;
            }
            else {
                tn.selectable = false;
                _this.checkViewTreeNodes(tn.children);
            }
        }));
    };
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype._convertColumnsToSimple = /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        /** @type {?} */
        var cols = gridInstance.columns;
        // 重置列顺序为最初设计时的顺序
        /** @type {?} */
        var gridOpts = gridInstance.dfs._state.initialOptions;
        if (gridOpts.columnFields) {
            /** @type {?} */
            var desginCols = gridOpts.columnFields;
            /** @type {?} */
            var newColumns_1 = [];
            desginCols.forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                if (c.field !== '_datagrid-setting-control_') {
                    /** @type {?} */
                    var col = gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === c.field; }));
                    if (col) {
                        newColumns_1.push(col);
                    }
                }
            }));
            cols = [newColumns_1];
        }
        return cols;
    };
    /**
     * @param {?} cols
     * @return {?}
     */
    DatagridSettingsService.prototype.convertColumnsToSimple = /**
     * @param {?} cols
     * @return {?}
     */
    function (cols) {
        return cols.map((/**
         * @param {?} _cols
         * @return {?}
         */
        function (_cols) {
            return _cols.map((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                if (c.field !== '_datagrid-setting-control_') {
                    return {
                        field: c.field,
                        title: c.title,
                        colspan: c.colspan,
                        rowspan: c.rowspan,
                        sortable: c.sortable,
                        order: c.order,
                        halign: c.halign || 'left',
                        align: c.align || 'left',
                        visible: c.visible,
                        allowGrouping: c.allowGrouping,
                        groupFooter: c.groupFooter,
                        footer: c.footer,
                        width: c.width || 100,
                        dataType: c.dataType || 'string'
                    };
                }
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n; }));
        }));
    };
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.resetGridView = /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        if (!gridInstance) {
            return;
        }
        /** @type {?} */
        var dfs = gridInstance.dfs;
        if (dfs) {
            /** @type {?} */
            var options = dfs['_state'].initialOptions;
            if (options.sort) {
                if (options.sort.sortName) {
                    gridInstance.sortName = options.sort.sortName;
                }
                if (options.sort.sortOrder) {
                    gridInstance.sortOrder = options.sort.sortOrder;
                }
            }
            gridInstance.groupField = options.groupField || '';
            // TODO: 还需要修正默认列的显示顺序
            if (options.columnFields && options.columnFields.length) {
                /** @type {?} */
                var newColumns_2 = [];
                options.columnFields.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    /** @type {?} */
                    var col = gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === c.field; }));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = c.footer;
                        col.groupFooter = c.groupFooter;
                        newColumns_2.push(col);
                    }
                }));
                gridInstance.columns[0] = newColumns_2;
            }
            // gridInstance['checkOptions']();
            gridInstance['columnsChanged']();
        }
    };
    /**
     * @private
     * @param {?} modalRef
     * @param {?} gridInstance
     * @param {?=} btn
     * @return {?}
     */
    DatagridSettingsService.prototype.updateGridView = /**
     * @private
     * @param {?} modalRef
     * @param {?} gridInstance
     * @param {?=} btn
     * @return {?}
     */
    function (modalRef, gridInstance, btn) {
        var _this = this;
        if (btn === void 0) { btn = null; }
        /** @type {?} */
        var settings = modalRef.content;
        if (settings) {
            var sortInfo_1 = settings.sortInfo, viewColumns_1 = settings.viewColumns, columnFormat_1 = settings.columnFormat, groupField = settings.groupField, groupRowState = settings.groupRowState;
            /** @type {?} */
            var _colformats = columnFormat_1 ? this.convertColumnsToSimple([columnFormat_1])[0] : [];
            this.updateActiveSchemeItemSettings(gridInstance.id, { sortInfo: sortInfo_1, viewColumns: viewColumns_1, columnFormat: _colformats, groupField: groupField });
            this.saving = true;
            /** @type {?} */
            var _groupField = '';
            if (gridInstance.groupRows && groupField && groupField.length) {
                _groupField = groupField.join(',');
                gridInstance.expandGroupRows = groupRowState;
            }
            gridInstance.groupField = _groupField;
            /** @type {?} */
            var saveData = { sortInfo: sortInfo_1, viewColumns: viewColumns_1, groupField: _groupField, columnFormat: _colformats, expandGroupRows: groupRowState };
            this.setUserConfig(gridInstance.id, saveData).subscribe((/**
             * @return {?}
             */
            function () {
                if (btn) {
                    btn.disabled = false;
                }
                _this.saving = false;
                if (viewColumns_1 && viewColumns_1.length) {
                    gridInstance.columns = gridInstance.columns.map((/**
                     * @param {?} cols
                     * @return {?}
                     */
                    function (cols) {
                        _this.updateColumnFormat(cols, columnFormat_1, gridInstance);
                        return _this.newVisibleOrderColumns(cols, viewColumns_1, columnFormat_1, gridInstance);
                    }));
                }
                gridInstance.columnsChanged(true);
                if (sortInfo_1 && Object.keys(sortInfo_1).length) {
                    var sortName = sortInfo_1.sortName, sortOrder = sortInfo_1.sortOrder;
                    if (sortName && sortName.length) {
                        gridInstance.sort(sortName.join(','), sortOrder.join(','));
                    }
                    else {
                        gridInstance.clearSort();
                    }
                }
                else {
                    gridInstance.clearSort();
                }
                modalRef.close();
            }));
        }
        else {
            modalRef.close();
        }
    };
    /**
     * @param {?} cols
     * @param {?} viewColumns
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.newVisibleOrderColumns = /**
     * @param {?} cols
     * @param {?} viewColumns
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    function (cols, viewColumns, columnFormat, gridInstance) {
        var _this = this;
        /** @type {?} */
        var hideColumns = [];
        cols.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (_this.isNewAddColumn(element.field, columnFormat) && element.field !== '_datagrid-setting-control_' && !gridInstance.enableScheme) {
                viewColumns.push(element.field);
            }
            else {
                element.visible = viewColumns.includes(element.field);
                if (!element.visible) {
                    hideColumns.push(element);
                }
            }
        }));
        // 清理不存在的列
        /** @type {?} */
        var newCols = viewColumns.map((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            return cols.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field === field; }));
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n; }));
        if (hideColumns.length) {
            newCols = newCols.concat(hideColumns);
        }
        return newCols.filter((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c && c.field && c.field !== '_datagrid-setting-control_'; }));
    };
    /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     */
    /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     * @private
     * @param {?} field
     * @param {?} columns
     * @return {?}
     */
    DatagridSettingsService.prototype.isNewAddColumn = /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     * @private
     * @param {?} field
     * @param {?} columns
     * @return {?}
     */
    function (field, columns) {
        columns = columns || [];
        return !columns.find((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.field === field; }));
    };
    /**
     * @param {?} cols
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.updateColumnFormat = /**
     * @param {?} cols
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    function (cols, columnFormat, gridInstance) {
        if (columnFormat && columnFormat.length) {
            cols.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                /** @type {?} */
                var formatCol = columnFormat.find((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return f.field === col.field; }));
                if (formatCol) {
                    col.width = formatCol.width;
                    col.halign = formatCol.halign || 'left';
                    col.align = formatCol.align || 'left';
                    if (gridInstance.groupRows && (col.allowGrouping || col.allowGrouping === undefined)) {
                        if (!col.groupFooter) {
                            col.groupFooter = formatCol.groupFooter;
                        }
                        if (col.groupFooter && col.groupFooter.options) {
                            col.groupFooter.options.text = formatCol.groupFooter.options.text || '';
                            col.groupFooter.options.calculationType =
                                formatCol.groupFooter.options.calculationType !== undefined &&
                                    formatCol.groupFooter.options.calculationType !== null ?
                                    parseInt(formatCol.groupFooter.options.calculationType, 10) : -1;
                        }
                    }
                    if (gridInstance.showFooter && !gridInstance.footerTemplate) {
                        if (!col.footer) {
                            col.footer = formatCol.footer;
                        }
                        if (col.footer && col.footer.options) {
                            col.footer.options.text = formatCol.footer.options.text || '';
                            col.footer.options.calculationType =
                                formatCol.footer.options.calculationType !== undefined &&
                                    formatCol.footer.options.calculationType !== null ?
                                    parseInt(formatCol.footer.options.calculationType, 10) : -1;
                        }
                    }
                }
            }));
        }
    };
    // 创建唯一key, 由uri + gridId 组成，并混淆
    // 创建唯一key, 由uri + gridId 组成，并混淆
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.createConfigKey = 
    // 创建唯一key, 由uri + gridId 组成，并混淆
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var grid = this.getGridInstance(gridId);
        if (grid) {
            return grid.dgs.createConfigKey(gridId);
        }
        else {
            this.writeDebugMsg('DatagridSettingService: Can not find the grid instance.');
        }
    };
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.getCurrentUserSettings = /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var gridInstance = this.getGridInstance(gridId);
        /** @type {?} */
        var config = { sortInfo: {}, viewColumns: [], groupField: '', columnFormat: [] };
        if (gridInstance) {
            var sortName = gridInstance.sortName, sortOrder = gridInstance.sortOrder, columns = gridInstance.columns;
            if (sortName) {
                /** @type {?} */
                var sortInfo = {
                    sortName: sortName.split(','),
                    sortOrder: sortOrder.split(',')
                };
                config.sortInfo = sortInfo;
            }
            /** @type {?} */
            var viewColumns = columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible || n.visible === undefined; })).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field; }));
            config.viewColumns = viewColumns;
            config.columnFormat = this.convertColumnsToSimple(this._convertColumnsToSimple(gridInstance))[0];
            if (gridInstance.groupRows) {
                config.groupField = gridInstance.groupField;
            }
        }
        return config;
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.saveUserConfig = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var config = this.getCurrentUserSettings(gridId);
        return this.setUserConfig(gridId, config);
    };
    /**
     * @param {?} gridId
     * @param {?} config
     * @return {?}
     */
    DatagridSettingsService.prototype.setUserConfig = /**
     * @param {?} gridId
     * @param {?} config
     * @return {?}
     */
    function (gridId, config) {
        var _this = this;
        /** @type {?} */
        var key = this.createConfigKey(gridId);
        /** @type {?} */
        var LOCALEID = this.localeSer.localeId;
        /** @type {?} */
        var currentConfig = localStorage.getItem(key);
        /** @type {?} */
        var _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
        if (config) {
            if (_config) {
                _config[LOCALEID] = config;
            }
            localStorage.setItem(key, JSON.stringify(_config));
        }
        else {
            localStorage.removeItem(key);
        }
        if (this.httpRestService) {
            /** @type {?} */
            var gridIns = this.getGridInstance(gridId);
            if (gridIns && gridIns.enableScheme) {
                /** @type {?} */
                var activeScheme_1 = this.getActiveSchemeItem(gridId);
                if (activeScheme_1) {
                    // return this.updateScheme(gridId, config);
                    if (activeScheme_1.type === 'private') {
                        return this.schemeService.saveScheme(activeScheme_1, gridId, true);
                    }
                    else {
                        return this.schemeService.checkAuthority().pipe(switchMap((/**
                         * @param {?} t
                         * @return {?}
                         */
                        function (t) {
                            if (t.success) {
                                /** @type {?} */
                                var hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;
                                if (activeScheme_1.type === 'public' || (activeScheme_1.type === 'org' && hasOrgAuthority)) {
                                    return _this.schemeService.saveScheme(activeScheme_1, gridId, true);
                                }
                            }
                            return of(true);
                        })));
                    }
                }
                else {
                    return of(true);
                }
            }
            // 保存至数据库
            return this._saveUserConfig(key, config ? _config : '');
        }
        return of(true);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    DatagridSettingsService.prototype.getUserConfig = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this.httpRestService) {
            return this._getUserConfig(key);
        }
        else {
            /** @type {?} */
            var config = localStorage.getItem(key);
            if (config) {
                /** @type {?} */
                var con = JSON.parse(config);
                if (con[this.localeSer.localeId]) {
                    return of(con[this.localeSer.localeId]);
                }
                else {
                    if (Object.keys(con).indexOf('viewColumns') > -1) {
                        return of(con);
                    }
                    return null;
                }
            }
            else {
                return of(null);
            }
        }
    };
    /**
     * @private
     * @param {?} schemeList
     * @return {?}
     */
    DatagridSettingsService.prototype.getDefaultScheme = /**
     * @private
     * @param {?} schemeList
     * @return {?}
     */
    function (schemeList) {
        // 1、有个人默认的返回个人默认方案
        // 2、没有个人默认方案的，返回公共方案第1个
        // 3、没有公共方案，返回组织方案第1个
        // 4、没有组织方案的, 返回个人方案第1个
        // 5、没有个人方案的，返回系统预制，即表单设计时的格式
        // 1、有个人默认的返回个人默认方案
        // 2、没有个人默认方案的，返回公共方案第1个
        // 3、没有公共方案，返回组织方案第1个
        // 4、没有组织方案的, 返回个人方案第1个
        // 5、没有个人方案的，返回系统预制，即表单设计时的格式
        /** @type {?} */
        var defaultScheme = null;
        if (!schemeList || !schemeList.length) {
            return defaultScheme;
        }
        else {
            defaultScheme = schemeList.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.isDefault; }));
            if (!defaultScheme) {
                /** @type {?} */
                var publicSchemes = schemeList.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.type === 'public'; }));
                if (!publicSchemes.length) {
                    publicSchemes = schemeList.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.type === 'org'; }));
                }
                if (publicSchemes.length) {
                    defaultScheme = publicSchemes[0];
                }
                else {
                    defaultScheme = schemeList[0];
                }
            }
        }
        return defaultScheme;
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.getSettings = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        var _this = this;
        /** @type {?} */
        var key = this.createConfigKey(gridId);
        /** @type {?} */
        var gridIns = this.getGridInstance(gridId);
        /** @type {?} */
        var schemeList$ = of([]);
        if (gridIns && gridIns.enableScheme) {
            schemeList$ = this.getSchemeList(gridId);
        }
        return forkJoin(schemeList$, this.getUserConfig(key), this.schemeService.getLanguages()).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 3), schemeList = _b[0], userSetting = _b[1], supportedLanguages = _b[2];
            schemeList = schemeList || [];
            _this.languages = supportedLanguages;
            if (!schemeList.length) {
                return userSetting;
            }
            else {
                // 缓存方案列表
                _this.setSchemeList(schemeList, gridId);
                // 查找默认方案
                /** @type {?} */
                var defaultScheme = _this.getDefaultScheme(schemeList);
                if (!defaultScheme) {
                    return userSetting;
                }
                else {
                    _this.setActiveSchemeItem(gridId, defaultScheme);
                    /** @type {?} */
                    var userSettings = null;
                    if (defaultScheme.queryConditionString) {
                        userSettings = JSON.parse(defaultScheme.queryConditionString);
                    }
                    if (userSettings) {
                        /** @type {?} */
                        var localeId = _this.localeSer.localeId;
                        if (userSettings[localeId]) {
                            localStorage.setItem(key, JSON.stringify(userSettings));
                            return userSettings[localeId];
                        }
                        else {
                            userSettings[localeId] = null;
                            localStorage.setItem(key, JSON.stringify(userSettings));
                            return null;
                        }
                    }
                    else {
                        return null;
                    }
                }
            }
        })));
    };
    /**
     * @private
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    DatagridSettingsService.prototype._saveUserConfig = /**
     * @private
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    function (key, config) {
        try {
            /** @type {?} */
            var userConfigSetting = {
                configkey1: key,
                configkey2: '',
                configkey3: '',
                textvalue: config ? JSON.stringify(config) : ''
            };
            return this.httpRestService.saveUserSettings(userConfigSetting);
        }
        catch (e) {
            this.writeDebugMsg(e, 'error');
        }
    };
    /**
     * @param {?} gridInstance
     * @param {?} modalRef
     * @return {?}
     */
    DatagridSettingsService.prototype.resetUserConfig = /**
     * @param {?} gridInstance
     * @param {?} modalRef
     * @return {?}
     */
    function (gridInstance, modalRef) {
        var _this = this;
        /** @type {?} */
        var restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t) {
                return _this.setUserConfig(gridInstance.id, '');
            }
            return of(t);
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t) {
                _this.resetGridView(gridInstance);
                modalRef.close();
            }
        }));
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    DatagridSettingsService.prototype._getUserConfig = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        try {
            return this.httpRestService.getUserSettings(key).pipe(map((/**
             * @param {?} ucs
             * @return {?}
             */
            function (ucs) {
                if (ucs && ucs.textValue) {
                    /** @type {?} */
                    var c = JSON.parse(ucs.textValue);
                    if (c) {
                        if (c[_this.localeSer.localeId]) {
                            localStorage.setItem(key, ucs.textValue);
                            return c[_this.localeSer.localeId];
                        }
                        else {
                            c[_this.localeSer.localeId] = null;
                            localStorage.setItem(key, JSON.stringify(c));
                            // if (Object.keys(c).indexOf('viewColumns') > -1) {
                            //     return c;
                            // }
                            return null;
                        }
                    }
                    return null;
                }
                return null;
            })));
        }
        catch (e) {
            if (this.debugSer) {
                this.debugSer.error(e);
            }
        }
    };
    /**
     * @private
     * @param {?} gridId
     * @param {?=} settings
     * @return {?}
     */
    DatagridSettingsService.prototype.buildSubmitData = /**
     * @private
     * @param {?} gridId
     * @param {?=} settings
     * @return {?}
     */
    function (gridId, settings) {
        if (settings === void 0) { settings = null; }
        /** @type {?} */
        var LOCALEID = this.localeSer.localeId;
        if (!settings) {
            settings = this.getCurrentUserSettings(gridId);
        }
        /** @type {?} */
        var localeKey = this.createConfigKey(gridId);
        /** @type {?} */
        var currentConfig = localStorage.getItem(localeKey);
        /** @type {?} */
        var _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
        if (_config) {
            _config[LOCALEID] = settings;
        }
        return _config;
    };
    // ----------------------------------------------------------------------------------------------- \\
    // ----------------------------------------------------------------------------------------------- \\
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} schemeList
     * @param {?} authInfo
     * @param {?} simpleRef
     * @return {?}
     */
    DatagridSettingsService.prototype.showSchemeListDialog = 
    // ----------------------------------------------------------------------------------------------- \\
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} schemeList
     * @param {?} authInfo
     * @param {?} simpleRef
     * @return {?}
     */
    function (gridInstance, schemeList, authInfo, simpleRef) {
        var _this = this;
        /** @type {?} */
        var modalOpts = {
            width: 760, height: 577, showHeader: false, title: '控制面板',
            initialState: {
                items: schemeList || [],
                removeItem: authInfo.success,
                currentUserId: authInfo.currentUserId
            },
            showButtons: false
        };
        /** @type {?} */
        var schemeListDlg = this.modalSer.show(SchemeListComponent, modalOpts);
        schemeListDlg.dialog.location.nativeElement.style.zIndex = 2031;
        /** @type {?} */
        var instance = (/** @type {?} */ (schemeListDlg.content));
        instance.closeModal.subscribe((/**
         * @return {?}
         */
        function () {
            schemeListDlg.close();
        }));
        instance.submitModal.subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            _this.schemeService.updateScheme(t, gridInstance.id).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e === false) {
                    schemeListDlg.close();
                    return;
                }
                /** @type {?} */
                var msg = '列设置方案保存成功。';
                if (_this.notifyService) {
                    _this.notifyService.success(msg);
                }
                else {
                    _this.messager.success(msg);
                }
                if (t.defaultId) {
                    schemeList.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        n.isDefault = false;
                        if (n.id === t.defaultId) {
                            n.isDefault = true;
                            // this.setActiveSchemeItem(gridInstance.id, n);
                        }
                    }));
                }
                /** @type {?} */
                var newSchemeList = schemeList;
                if (t.deletedIds && t.deletedIds.length) {
                    newSchemeList = schemeList.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return !t.deletedIds.includes(n.id);
                    }));
                }
                _this.schemeService.setSchemeList(gridInstance.id, newSchemeList);
                /** @type {?} */
                var currentScheme = _this.getActiveSchemeItem(gridInstance.id);
                if (!currentScheme) {
                    _this.setActiveSchemeItem(gridInstance.id, null);
                    simpleRef.instance.currentSchemeItem = null;
                    simpleRef.instance.reset2Default();
                }
                schemeListDlg.close();
            }));
        }));
        /** @type {?} */
        var modalContainer = (/** @type {?} */ (schemeListDlg.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
    };
    // 新增或另存方案
    // 新增或另存方案
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} e
     * @param {?} simpleRef
     * @return {?}
     */
    DatagridSettingsService.prototype.showNewSchemeDialog = 
    // 新增或另存方案
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} e
     * @param {?} simpleRef
     * @return {?}
     */
    function (gridInstance, e, simpleRef) {
        var _this = this;
        /** @type {?} */
        var modalOpts = {
            width: 480, height: 269, showHeader: false, title: '控制面板',
            initialState: {
                languages: this.languages
            },
            showButtons: false,
            resizable: false
        };
        /** @type {?} */
        var newSchemeDlg = this.modalSer.show(NewSchemeComponent, modalOpts);
        newSchemeDlg.dialog.location.nativeElement.style.zIndex = 2031;
        /** @type {?} */
        var instance = (/** @type {?} */ (newSchemeDlg.content));
        instance.closeModal.subscribe((/**
         * @return {?}
         */
        function () {
            newSchemeDlg.close();
        }));
        instance.submitModal.pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            return _this.createNewScheme(gridInstance.id, t, e.type === 'new', simpleRef.instance.collectSettings());
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t.flag === false) {
                /** @type {?} */
                var msg = t.msg;
                /** @type {?} */
                var _msg = msg;
                if (msg) {
                    if (msg.indexOf('|') > -1) {
                        _msg = msg.split('|').map((/**
                         * @param {?} langcode
                         * @return {?}
                         */
                        function (langcode) {
                            return _this.localeSer.getValue('datagrid-settings.' + langcode);
                        })).join('');
                    }
                    else {
                        _msg = _this.localeSer.getValue('datagrid-settings.' + msg);
                    }
                    if (_this.notifyService) {
                        _this.notifyService.info(_msg);
                    }
                    else {
                        _this.messager.info(_msg);
                    }
                }
                return;
            }
            // 更新方案列表
            /** @type {?} */
            var schemeList = _this.schemeService.getStateValue(gridInstance.id, 'list') || [];
            if (t.isDefault) {
                schemeList.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    n.isDefault = false;
                }));
            }
            schemeList.push(t);
            // this.setActiveSchemeItem(gridInstance.id, t);
            _this.schemeService.setSchemeList(gridInstance.id, schemeList);
            // 更换为新的方案
            simpleRef.instance.onSchemeItemClick(null, t);
            newSchemeDlg.close();
        }));
        instance.checkAuthority.pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            return _this.schemeService.checkAuthority().pipe(map((/**
             * @param {?} auth
             * @return {?}
             */
            function (auth) {
                return tslib_1.__assign({ type: t }, auth);
            })));
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            /** @type {?} */
            var hasAuthority = { public: true, org: true };
            // 您没有将方案的使用范围设置为公共的权限。
            /** @type {?} */
            var _msg = 'noAuth.public';
            if (t.type.value === 'org') {
                // 您没有将方案的使用范围设置为组织的权限。
                _msg = 'noAuth.org';
            }
            /** @type {?} */
            var msg = _this.localeSer.getValue('datagrid-settings.' + _msg);
            if (t.success) {
                /** @type {?} */
                var hasPublicAuthority = t.authOperationData && t.authOperationData.length;
                hasAuthority.public = hasPublicAuthority;
                /** @type {?} */
                var hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;
                hasAuthority.org = hasOrgAuthority;
                if (t.type.value === 'public') {
                    instance.schemeInfo.type = t.type.value;
                }
                else if (t.type.value === 'org') {
                    if (!hasOrgAuthority) {
                        _this.notifyService.warning(msg);
                    }
                    else {
                        instance.schemeInfo.type = t.type.value;
                        instance.schemeInfo.orgids = t.authOrganizationData.join(',');
                        instance.dataPermissionIds = t.authOrganizationData;
                    }
                }
            }
            else {
                _this.notifyService.warning(msg);
                hasAuthority = { public: false, org: false };
                ;
            }
            instance.refresh(hasAuthority);
        }));
        /** @type {?} */
        var modalContainer = (/** @type {?} */ (newSchemeDlg.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.getSchemeList = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        return this.schemeService.getSchemeList(gridId);
    };
    /** 新增方案
     *  isNewScheme，是否新加方案，否则为另存为
     *  currentSettings： 当前配置信息
     *  data: 新建方案窗口传递数据
     */
    /**
     * 新增方案
     *  isNewScheme，是否新加方案，否则为另存为
     *  currentSettings： 当前配置信息
     *  data: 新建方案窗口传递数据
     * @param {?} gridId
     * @param {?} data
     * @param {?=} isNewScheme
     * @param {?=} currentSettings
     * @return {?}
     */
    DatagridSettingsService.prototype.createNewScheme = /**
     * 新增方案
     *  isNewScheme，是否新加方案，否则为另存为
     *  currentSettings： 当前配置信息
     *  data: 新建方案窗口传递数据
     * @param {?} gridId
     * @param {?} data
     * @param {?=} isNewScheme
     * @param {?=} currentSettings
     * @return {?}
     */
    function (gridId, data, isNewScheme, currentSettings) {
        if (isNewScheme === void 0) { isNewScheme = true; }
        var _a;
        if (!data.name) {
            // msg 请输入方案名称
            return of({ flag: false, msg: 'required.schemeName' });
        }
        else {
            /** @type {?} */
            var hasName = this.schemeService.hasSchemeName(gridId, data.name);
            if (typeof hasName === 'boolean' && hasName) {
                // msg '方案名称已存在，请修改。'
                return of({ flag: false, msg: 'has.exist' });
            }
            else if (Array.isArray(hasName) && hasName.length) {
                /** @type {?} */
                var getMessageCode_1 = (/**
                 * @param {?} langCode
                 * @return {?}
                 */
                function (langCode) {
                    if (langCode === 'zh-CHS') {
                        return 'has.chs'; // 简体中文名称已存在。
                    }
                    else if (langCode === 'zh-CHT') {
                        return 'has.cht'; // 繁體中文名稱已存在。
                    }
                    else {
                        return 'has.en'; // 英文名称已存在
                    }
                });
                if (hasName.includes(this.localeSer.localeId)) {
                    /** @type {?} */
                    var msg = getMessageCode_1(this.localeSer.localeId);
                    return of({ flag: false, msg: msg });
                }
                else {
                    /** @type {?} */
                    var msgs = hasName.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return getMessageCode_1(n);
                    }));
                    return of({ flag: false, msg: msgs.join('|') });
                }
            }
        }
        /** @type {?} */
        var requiredName = [];
        if (!data.name[this.localeSer.localeId]) {
            requiredName.push(this.localeSer.localeId);
        }
        // this.languages.forEach(n => {
        //     if (data.name[n.code] === '' || data.name[n.code] === undefined) {
        //         requiredName.push(n.code);
        //     }
        // });
        if (requiredName.length) {
            /** @type {?} */
            var msgs = requiredName.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                if (n === 'zh-CHS') {
                    return 'required.chs'; //'请输入简体中文名称。';
                }
                else if (n === 'zh-CHT') {
                    return 'required.cht'; //'请输入繁体中文名称。';
                }
                else {
                    return 'required.en'; // '请输入英文名称。';
                }
            }));
            return of({ flag: false, msg: msgs.join('|') });
        }
        if (data.type && data.type === 'org' && (!data.orgids || !data.orgids.length)) {
            // msg '请选择组织'
            return of({ flag: false, msg: 'required.org' });
        }
        /** @type {?} */
        var _config = null;
        if (!isNewScheme) {
            /** @type {?} */
            var LOCALEID = this.localeSer.localeId;
            if (currentSettings && currentSettings.columnFormat) {
                currentSettings.columnFormat = this.convertColumnsToSimple([currentSettings.columnFormat]);
            }
            _config = (_a = {}, _a[LOCALEID] = currentSettings, _a);
        }
        /** @type {?} */
        var newId = this.idService.guid();
        /** @type {?} */
        var isDefault = data.isDefault;
        if (isDefault) {
            if (data.type !== 'private') {
                isDefault = false;
            }
        }
        if (data.name && typeof data.name === 'object') {
            data.name = JSON.stringify(data.name);
        }
        /** @type {?} */
        var scheme = {
            id: newId,
            belongId: '',
            code: '',
            name: data.name,
            type: data.type,
            isDefault: isDefault,
            isSystem: false,
            extendId: 'datagrid-settings-scheme',
            extendInfo: this.buildOrgAndSchemeRelations(newId, data.orgids),
            queryConditionString: _config ? JSON.stringify(_config) : '',
        };
        return this.schemeService.saveScheme(scheme, gridId).pipe(map((/**
         * @return {?}
         */
        function () {
            return scheme;
        })));
    };
    /**
     * @param {?} schemeList
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.setSchemeList = /**
     * @param {?} schemeList
     * @param {?} gridId
     * @return {?}
     */
    function (schemeList, gridId) {
        this.schemeService.update({ list: schemeList }, gridId);
    };
    /**
     * @private
     * @param {?} schemeId
     * @param {?} orgIds
     * @return {?}
     */
    DatagridSettingsService.prototype.buildOrgAndSchemeRelations = /**
     * @private
     * @param {?} schemeId
     * @param {?} orgIds
     * @return {?}
     */
    function (schemeId, orgIds) {
        var _this = this;
        if (!orgIds || !orgIds.length) {
            return [];
        }
        if (typeof orgIds === 'string') {
            orgIds = orgIds.split(',');
        }
        return orgIds.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return {
                id: _this.idService.guid(),
                orgId: n,
                relatedId: schemeId
            };
        }));
    };
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.getCurrentSchemeSettings = /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var activeScheme = (/** @type {?} */ (this.getActiveSchemeItem(gridId)));
        if (activeScheme && activeScheme.queryConditionString) {
            return JSON.parse(activeScheme.queryConditionString);
        }
        return null;
    };
    DatagridSettingsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DatagridSettingsService.ctorParameters = function () { return [
        { type: Injector },
        { type: BsModalService },
        { type: MessagerService },
        { type: IdService },
        { type: LocaleService }
    ]; };
    return DatagridSettingsService;
}());
export { DatagridSettingsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.multiSortMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.columnsSortableMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.notSupportHeaderGroupMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.notShowDialog;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype._httpRestService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.languages;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.gridRefs;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.activeSchemeItem;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.saving;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.app;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.schemeListSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.schemeService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.currentSchemeitem;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.debugSer;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.modalSer;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.idService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.localeSer;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtc2V0dGluZ3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtc2V0dGluZ3MvIiwic291cmNlcyI6WyJsaWIvZGF0YWdyaWQtc2V0dGluZ3Muc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBZ0IsR0FBRyxFQUFFLFNBQVMsRUFBTyxNQUFNLGdCQUFnQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxRQUFRLEVBQWMsRUFBRSxFQUFnQixLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDckUsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLHdCQUF3QixFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvRyxPQUFPLEVBQUUsY0FBYyxFQUF5QyxNQUFNLGtCQUFrQixDQUFDO0FBQ3pGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMxRSxPQUFPLEVBQUUsU0FBUyxFQUFZLE1BQU0sV0FBVyxDQUFDO0FBQ2hELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVsRCxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzVELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUdsRCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTyw0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Ozs7SUFDNUQsbURBQTJEOzs7OztJQUUzRCx5Q0FBdUI7Ozs7O0lBQ3ZCLHNDQUE2Qzs7Ozs7SUFDN0Msc0NBQW1DOzs7OztJQUNuQyx5REFBb0Q7Ozs7O0lBRXBELGdEQUE2Qzs7Ozs7SUFDN0MsZ0RBQXFDOzs7OztJQUdyQyxvREFBaUM7Ozs7O0lBQ2pDLDJDQUFzQzs7Ozs7SUFFMUIsMkNBQTBCOzs7OztJQUFFLDJDQUFnQzs7Ozs7SUFDNUQsMkNBQWlDOzs7OztJQUFFLDRDQUE0Qjs7Ozs7SUFDL0QsNENBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBtYXAsIHN3aXRjaE1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBmb3JrSm9pbiwgT2JzZXJ2YWJsZSwgb2YsIFN1YnNjcmlwdGlvbiwgdGltZXIgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIEluamVjdGlvblRva2VuLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEFwcGxpY2F0aW9uUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFncmlkQ29tcG9uZW50LCBEYXRhQ29sdW1uIH0gZnJvbSAnQGZhcnJpcy91aS1kYXRhZ3JpZCc7XHJcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlLCBNb2RhbE9wdGlvbnMsIE1vZGFsQ29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbCc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZFNldHRpbmdzQ29tcG9uZW50IH0gZnJvbSAnLi9kYXRhZ3JpZC1zZXR0aW5ncy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBjbG9uZURlZXAsIGRlYm91bmNlIH0gZnJvbSAnbG9kYXNoLWVzJztcclxuaW1wb3J0IHsgTG9jYWxlU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9jYWxlJztcclxuaW1wb3J0IHsgVHJlZU5vZGUgfSBmcm9tICdAZmFycmlzL3VpLXRyZWV0YWJsZSc7XHJcbmltcG9ydCB7IERlYnVnU2VydmljZSwgSWRTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5pbXBvcnQgeyBTaW1wbGVDb2x1bW5zQ29tcG9uZW50IH0gZnJvbSAnLi9zaW1wbGUtbW9kZS9zaW1wbGUtY29sdW1ucy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZFNjaGVtZVNlcnZpY2UgfSBmcm9tICcuL2RhdGFncmlkLXNjaGVtZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTmV3U2NoZW1lQ29tcG9uZW50IH0gZnJvbSAnLi9zY2hlbWUvbmV3c2NoZW1lLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFNjaGVtZUxpc3RDb21wb25lbnQgfSBmcm9tICcuL3NjaGVtZS9zY2hlbWUtbGlzdC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBOb3RpZnlTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZFNjaGVtZU1vZGVsLCBTY2hlbWVBdXRoTW9kZWwsIFNldHRpbmdNb2RlbCB9IGZyb20gJy4vc2V0dGluZy5tb2RlbCc7XHJcblxyXG5pbXBvcnQgeyBEQVRBR1JJRF9TRVRUSU5HU19MT0NBTEVEQVRBIH0gIGZyb20gJy4vZGF0YWdyaWQtc2V0dGluZ3MtbG9jYWxlJztcclxuXHJcbmV4cG9ydCBjb25zdCBHUklEX1NFVFRJTkdTX1dFQkFQSSA9ICBuZXcgSW5qZWN0aW9uVG9rZW4oJyBGYXJyaXMgRGF0YUdyaWQgVXNlciBTZXR0aW5nIFdlYkFwaSBVUkkuJyk7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZFNldHRpbmdzU2VydmljZSB7XHJcblxyXG4gICAgcHJpdmF0ZSBtdWx0aVNvcnRNc2cgPSAn5YiX6KGo5Lit5pyq5byA5ZCv5aSa5YiX5o6S5bqP55qE5Yqf6IO944CCIOivt+ajgOafpe+8gSc7XHJcbiAgICBwcml2YXRlIGNvbHVtbnNTb3J0YWJsZU1zZyA9ICfmnKrlvIDlkK/liJfnmoTmjpLluo/lip/og73jgILor7fmo4Dmn6XvvIEnO1xyXG4gICAgcHJpdmF0ZSBub3RTdXBwb3J0SGVhZGVyR3JvdXBNc2cgPSAn5pqC5LiN5pSv5oyB5aSa6KGo5aS06K6+572uJztcclxuICAgIHByaXZhdGUgbm90U2hvd0RpYWxvZyA9ICflpJrooajlpLTmmoLkuI3mlK/mjIHliJfmmL7npLrorr7nva7vvJvlkIzml7bmnKrlkK/nlKjliJfmjpLluo/lip/og73jgIInO1xyXG5cclxuICAgIHByaXZhdGUgX2h0dHBSZXN0U2VydmljZSA9IG51bGw7XHJcblxyXG4gICAgcHJpdmF0ZSBsYW5ndWFnZXM6IGFueSA9IFtdO1xyXG5cclxuICAgIGdldCBodHRwUmVzdFNlcnZpY2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2h0dHBSZXN0U2VydmljZTtcclxuICAgIH07XHJcblxyXG4gICAgc2V0IGh0dHBSZXN0U2VydmljZShodHRwU2VyKSB7XHJcbiAgICAgICAgdGhpcy5faHR0cFJlc3RTZXJ2aWNlID0gaHR0cFNlcjtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2NoZW1lU2VydmljZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNjaGVtZVNlcnZpY2Uuc2V0UmVzdFNlcnZpY2UoaHR0cFNlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ3JpZFJlZnM6IHtba2V5OiBzdHJpbmddOiBEYXRhZ3JpZENvbXBvbmVudH0gPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBhY3RpdmVTY2hlbWVJdGVtOiB7W3NjaGVtZWlkOiBzdHJpbmddOiBhbnl9ID0gbnVsbDtcclxuXHJcbiAgICBwcml2YXRlIHNhdmluZyA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciA9IG51bGw7XHJcbiAgICBwcml2YXRlIGFwcDogQXBwbGljYXRpb25SZWYgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBzY2hlbWVMaXN0U3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24gPSBudWxsO1xyXG5cclxuICAgIHByaXZhdGUgc2NoZW1lU2VydmljZTogRGF0YWdyaWRTY2hlbWVTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBub3RpZnlTZXJ2aWNlOiBOb3RpZnlTZXJ2aWNlO1xyXG5cclxuXHJcbiAgICBwcml2YXRlIGN1cnJlbnRTY2hlbWVpdGVtID0gbnVsbDtcclxuICAgIHByaXZhdGUgZGVidWdTZXI6IERlYnVnU2VydmljZSA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgbW9kYWxTZXI6IEJzTW9kYWxTZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBtZXNzYWdlcjogTWVzc2FnZXJTZXJ2aWNlLCBwcml2YXRlIGlkU2VydmljZTogSWRTZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBsb2NhbGVTZXI6IExvY2FsZVNlcnZpY2UpIHtcclxuXHJcbiAgICAgICAgdGhpcy5jZnIgPSB0aGlzLmluamVjdG9yLmdldChDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpO1xyXG4gICAgICAgIHRoaXMuYXBwID0gdGhpcy5pbmplY3Rvci5nZXQoQXBwbGljYXRpb25SZWYpO1xyXG4gICAgICAgIHRoaXMubm90aWZ5U2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KE5vdGlmeVNlcnZpY2UsIG51bGwpO1xyXG4gICAgICAgIHRoaXMuZGVidWdTZXIgPSB0aGlzLmluamVjdG9yLmdldChEZWJ1Z1NlcnZpY2UsIG51bGwpO1xyXG4gICAgICAgIHRoaXMuc2NoZW1lU2VydmljZSA9IG5ldyBEYXRhZ3JpZFNjaGVtZVNlcnZpY2UoKTtcclxuXHJcbiAgICAgICAgdGhpcy5sb2NhbGVTZXIuc2V0TG9jYWxlRGF0YShEQVRBR1JJRF9TRVRUSU5HU19MT0NBTEVEQVRBKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZGVzdHJveShpZD86IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLmdyaWRSZWZzKSB7XHJcbiAgICAgICAgICAgIGlmIChpZCAmJiB0aGlzLmdyaWRSZWZzW2lkXSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ncmlkUmVmc1tpZF0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZ3JpZFJlZnNbaWRdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFPYmplY3Qua2V5cyh0aGlzLmdyaWRSZWZzKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRSZWZzID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNhdmluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc2V0QWN0aXZlU2NoZW1lSXRlbShpZCwgbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB3cml0ZURlYnVnTXNnKG1zZywgdHlwZSA9ICd3YXJuJykge1xyXG4gICAgICAgIGlmICh0aGlzLmRlYnVnU2VyKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRlYnVnU2VyW3R5cGVdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlYnVnU2VyW3R5cGVdKG1zZyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlW3R5cGVdKG1zZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVnaXN0ZXJHcmlkSW5zdGFuY2UoZGc6IERhdGFncmlkQ29tcG9uZW50KSB7XHJcbiAgICAgICAgaWYgKCFkZykge1xyXG4gICAgICAgICAgICB0aGlzLndyaXRlRGVidWdNc2coJ0RhdGFncmlkU2V0dGluZ1NlcnZpY2U6IGdyaWQgaW5zdGFuY2UgaXMgbnVsbC4nKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGlkID0gZGcuaWQ7XHJcbiAgICAgICAgdGhpcy5ncmlkUmVmcyA9IHRoaXMuZ3JpZFJlZnMgfHwge307XHJcbiAgICAgICAgaWYgKCF0aGlzLmdyaWRSZWZzW2lkXSkge1xyXG4gICAgICAgICAgICB0aGlzLmdyaWRSZWZzW2lkXSA9IGRnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRHcmlkSW5zdGFuY2UoZGdJRDogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZFJlZnMgPyB0aGlzLmdyaWRSZWZzW2RnSURdIDogbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5pu05paw5pa55qGI5Lit55qE6YWN572u5pWw5o2uICovXHJcbiAgICBwcml2YXRlIHVwZGF0ZVNjaGVtZVNldHRpbmdzKHNjaGVtZUl0ZW06IERhdGFncmlkU2NoZW1lTW9kZWwsIHNldHRpbmdzOiBQYXJ0aWFsPFNldHRpbmdNb2RlbD4pIHtcclxuICAgICAgICBpZiAoc2NoZW1lSXRlbSAmJiBzZXR0aW5ncykge1xyXG4gICAgICAgICAgICBjb25zdCBzY2hlbWVDb250ZW50T2JqID0gc2NoZW1lSXRlbS5xdWVyeUNvbmRpdGlvblN0cmluZyA/IEpTT04ucGFyc2Uoc2NoZW1lSXRlbS5xdWVyeUNvbmRpdGlvblN0cmluZykgOiB7fTtcclxuICAgICAgICAgICAgaWYgKHNjaGVtZUNvbnRlbnRPYmopIHtcclxuICAgICAgICAgICAgICAgIGlmICggc2NoZW1lQ29udGVudE9ialt0aGlzLmxvY2FsZVNlci5sb2NhbGVJZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzY2hlbWVTZXR0aW5ncyA9IHNjaGVtZUNvbnRlbnRPYmpbdGhpcy5sb2NhbGVTZXIubG9jYWxlSWRdIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHNjaGVtZUNvbnRlbnRPYmpbdGhpcy5sb2NhbGVTZXIubG9jYWxlSWRdID0gT2JqZWN0LmFzc2lnbihzY2hlbWVTZXR0aW5ncywgc2V0dGluZ3MpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzY2hlbWVDb250ZW50T2JqW3RoaXMubG9jYWxlU2VyLmxvY2FsZUlkXSA9ICBzZXR0aW5ncztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNjaGVtZUl0ZW0ucXVlcnlDb25kaXRpb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeShzY2hlbWVDb250ZW50T2JqKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog5pu05paw5b2T5YmN5pa55qGI6YWN572u5pWw5o2uICovXHJcbiAgICB1cGRhdGVBY3RpdmVTY2hlbWVJdGVtU2V0dGluZ3MoZGdJZDogc3RyaW5nLCBzZXR0aW5nczogUGFydGlhbDxTZXR0aW5nTW9kZWw+KSB7XHJcbiAgICAgICAgY29uc3Qgc2NoZW1lSXRlbSA9IHRoaXMuZ2V0QWN0aXZlU2NoZW1lSXRlbShkZ0lkKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVNjaGVtZVNldHRpbmdzKHNjaGVtZUl0ZW0sIHNldHRpbmdzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6K6+572u5rS75Yqo55qE5pa55qGIICovXHJcbiAgICBzZXRBY3RpdmVTY2hlbWVJdGVtKGRnSWQ6IHN0cmluZywgYWN0aXZlSXRlbTogYW55KSB7XHJcbiAgICAgICAgY29uc3Qgc2NoZW1la2V5ID0gdGhpcy5zY2hlbWVTZXJ2aWNlLmdldFNjaGVtZUtleShkZ0lkKTtcclxuICAgICAgICB0aGlzLmFjdGl2ZVNjaGVtZUl0ZW0gPSB0aGlzLmFjdGl2ZVNjaGVtZUl0ZW0gfHwge307XHJcbiAgICAgICAgdGhpcy5hY3RpdmVTY2hlbWVJdGVtW3NjaGVtZWtleV0gPSBhY3RpdmVJdGVtO1xyXG4gICAgfVxyXG4gICAgLyoqIOiOt+WPluW9k+WJjea0u+WKqOeahOaWueahiCAqL1xyXG4gICAgZ2V0QWN0aXZlU2NoZW1lSXRlbShkZ0lkOiBzdHJpbmcpOiBEYXRhZ3JpZFNjaGVtZU1vZGVsIHtcclxuICAgICAgICBjb25zdCBzY2hlbWVrZXkgPSB0aGlzLnNjaGVtZVNlcnZpY2UuZ2V0U2NoZW1lS2V5KGRnSWQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZVNjaGVtZUl0ZW0gPyB0aGlzLmFjdGl2ZVNjaGVtZUl0ZW1bc2NoZW1la2V5XSA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2VhcmNoVHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgeyB2YWx1ZTogJ2FsbCcsIHRpdGxlOiB0aGlzLmxvY2FsZVNlci5nZXRWYWx1ZSgnZGF0YWdyaWQuc2V0dGluZ3MuYWxsQ29sdW1ucycpIH0sXHJcbiAgICAgICAgICAgIHsgdmFsdWU6ICd2aXNpYmxlJywgdGl0bGU6IHRoaXMubG9jYWxlU2VyLmdldFZhbHVlKCdkYXRhZ3JpZC5zZXR0aW5ncy52aXNpYmxlQ29sdW1ucycpIH0sXHJcbiAgICAgICAgICAgIHsgdmFsdWU6ICdoaWRkZW4nLCB0aXRsZTogdGhpcy5sb2NhbGVTZXIuZ2V0VmFsdWUoJ2RhdGFncmlkLnNldHRpbmdzLmhpZGRlbkNvbHVtbnMnKSB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93U2ltcGxlKGdyaWRJbnN0YW5jZTogRGF0YWdyaWRDb21wb25lbnQsIHNldHRpbmdzPzogU2V0dGluZ01vZGVsLCBzZWxlY3RlZFNjaGVtZUl0ZW0/OiBEYXRhZ3JpZFNjaGVtZU1vZGVsKSB7XHJcbiAgICAgICAgY29uc3QgY29sdW1ucyA9IHRoaXMuY29udmVydENvbHVtbnNUb1NpbXBsZShncmlkSW5zdGFuY2UuY29sdW1ucyk7XHJcbiAgICAgICAgY29sdW1uc1swXSA9IFsuLi5jb2x1bW5zWzBdLmZpbHRlcihuID0+IG4uZmllbGQgJiYgbi5maWVsZCAhPT0gZ3JpZEluc3RhbmNlLkNvbnRyb2xQYW5lbEZlaWxkKV07XHJcblxyXG4gICAgICAgIGNvbnN0IHNlYXJjaFR5cGVzID0gdGhpcy5nZXRTZWFyY2hUeXBlcygpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5jZnIpIHtcclxuICAgICAgICAgICAgY29uc3QgY21wRmFjdG9yeSA9IHRoaXMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFNpbXBsZUNvbHVtbnNDb21wb25lbnQpO1xyXG4gICAgICAgICAgICBsZXQgc2ltcGxlUmVmID0gY21wRmFjdG9yeS5jcmVhdGUodGhpcy5pbmplY3Rvcik7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmF0dGFjaFZpZXcoc2ltcGxlUmVmLmhvc3RWaWV3KTtcclxuICAgICAgICAgICAgc2ltcGxlUmVmLmluc3RhbmNlLmNvbHVtbnMgPSBjb2x1bW5zO1xyXG4gICAgICAgICAgICBzaW1wbGVSZWYuaW5zdGFuY2Uuc2VhcnRUeXBlcyA9IHNlYXJjaFR5cGVzO1xyXG4gICAgICAgICAgICBzaW1wbGVSZWYuaW5zdGFuY2UuZ3JpZEluc3RhbmNlID0gZ3JpZEluc3RhbmNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwYWdlLXdyYXBwZXInKSkge1xyXG4gICAgICAgICAgICAgICAgc2ltcGxlUmVmLmluc3RhbmNlLnRvcCA9IDc2O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzaW1wbGVSZWYuaW5zdGFuY2UuZW5hYmxlU2NoZW1lID0gZ3JpZEluc3RhbmNlLmVuYWJsZVNjaGVtZTtcclxuICAgICAgICAgICAgaWYgKGdyaWRJbnN0YW5jZS5lbmFibGVTY2hlbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZFNjaGVtZUl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTY2hlbWVTZXR0aW5ncyhzZWxlY3RlZFNjaGVtZUl0ZW0sIHNldHRpbmdzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2ltcGxlUmVmLmluc3RhbmNlLmN1cnJlbnRTY2hlbWVJdGVtID0gc2VsZWN0ZWRTY2hlbWVJdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpbXBsZVJlZi5pbnN0YW5jZS5jdXJyZW50U2NoZW1lSXRlbSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpbXBsZVJlZi5pbnN0YW5jZS5zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgX2N1cnJlbnRTY2hlbXRJdGVtID0gdGhpcy5nZXRBY3RpdmVTY2hlbWVJdGVtKGdyaWRJbnN0YW5jZS5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50U2NoZW1laXRlbSA9IF9jdXJyZW50U2NoZW10SXRlbTtcclxuICAgICAgICAgICAgICAgICAgICBzaW1wbGVSZWYuaW5zdGFuY2UuY3VycmVudFNjaGVtZUl0ZW0gPSBfY3VycmVudFNjaGVtdEl0ZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2ltcGxlUmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgc2ltcGxlUmVmLmluc3RhbmNlLmNsb3NlZC5waXBlKFxyXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNpbXBsZVJlZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaW1wbGVSZWYuaW5zdGFuY2UuY29udGFpbmVyLm5hdGl2ZUVsZW1lbnQuc3R5bGUucmlnaHQgPSAnLTUwMHB4JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRpbWVyKDUwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2ltcGxlUmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICBzaW1wbGVSZWYuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgc2ltcGxlUmVmID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjaGVtZUxpc3RTdWJzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVtZUxpc3RTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBfYWN0aXZlU2NoZW10SXRlbSA9IHRoaXMuZ2V0QWN0aXZlU2NoZW1lSXRlbShncmlkSW5zdGFuY2UuaWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCghdGhpcy5jdXJyZW50U2NoZW1laXRlbSB8fCAoX2FjdGl2ZVNjaGVtdEl0ZW0gJiYgX2FjdGl2ZVNjaGVtdEl0ZW0uaWQgIT09IHRoaXMuY3VycmVudFNjaGVtZWl0ZW0uaWQpKSAmJiAoX2FjdGl2ZVNjaGVtdEl0ZW0gJiZfYWN0aXZlU2NoZW10SXRlbS5xdWVyeUNvbmRpdGlvblN0cmluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBfY3VycmVudFNldHRpbmdzID0gSlNPTi5wYXJzZShfYWN0aXZlU2NoZW10SXRlbS5xdWVyeUNvbmRpdGlvblN0cmluZylbdGhpcy5sb2NhbGVTZXIubG9jYWxlSWRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfY3VycmVudFNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnNbMF0uZm9yRWFjaChmID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYudmlzaWJsZSA9IF9jdXJyZW50U2V0dGluZ3Mudmlld0NvbHVtbnMuaW5kZXhPZihmLmZpZWxkKSA+IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICBzaW1wbGVSZWYuaW5zdGFuY2UuYWR2YW5jZWQuc3Vic2NyaWJlKCh7IHZpZXdGaWVsZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZpZXdGaWVsZHMgJiYgdmlld0ZpZWxkcy5sZW5ndGgpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU2NoZW1lU2V0dGluZ3Moc2ltcGxlUmVmLmluc3RhbmNlLmN1cnJlbnRTY2hlbWVJdGVtLCB7dmlld0NvbHVtbnM6IHZpZXdGaWVsZHN9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0FkdmFuY2VkKGdyaWRJbnN0YW5jZSwgbnVsbCwgc2ltcGxlUmVmLmluc3RhbmNlLmN1cnJlbnRTY2hlbWVJdGVtKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBzaW1wbGVSZWYuaW5zdGFuY2Uuc3VibWl0LnN1YnNjcmliZSggKGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS50YXJnZXQuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2F2aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNhdmluZykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFjdGl2ZVNjaGVtZUl0ZW0oZ3JpZEluc3RhbmNlLmlkLCBlLmN1cnJlbnRTY2hlbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUdyaWRWaWV3KGUsIGdyaWRJbnN0YW5jZSwgZS50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHNpbXBsZVJlZi5pbnN0YW5jZS5maWVsZHNDaGFuZ2Uuc3Vic2NyaWJlKCh2aXNpYmxlRmllbGRzOiBzdHJpbmdbXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVBY3RpdmVTY2hlbWVJdGVtU2V0dGluZ3MoZ3JpZEluc3RhbmNlLmlkLCB7dmlld0NvbHVtbnM6IHZpc2libGVGaWVsZHN9KVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIOaJk+W8gOaWsOWinuaWueahiOeql+WPo1xyXG4gICAgICAgICAgICBzaW1wbGVSZWYuaW5zdGFuY2UuYWRkTmV3U2NoZW1lLnN1YnNjcmliZSgoZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dOZXdTY2hlbWVEaWFsb2coZ3JpZEluc3RhbmNlLCBlLCBzaW1wbGVSZWYpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHNpbXBsZVJlZi5pbnN0YW5jZS5zY2hlbWVMaXN0ID0gdGhpcy5zY2hlbWVTZXJ2aWNlLmdldFN0YXRlVmFsdWUoZ3JpZEluc3RhbmNlLmlkLCAnbGlzdCcpIHx8IFtdO1xyXG5cclxuICAgICAgICAgICAgLy8g5omT5byA5pa55qGI566h55CG5YiX6KGo56qX5Y+jXHJcbiAgICAgICAgICAgIHNpbXBsZVJlZi5pbnN0YW5jZS5zaG93U2NoZW1lTGlzdC5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlbWVTZXJ2aWNlLmdldFNjaGVtZUxpc3QoZ3JpZEluc3RhbmNlLmlkKS5waXBlKFxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgodCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zY2hlbWVTZXJ2aWNlLmNoZWNrQXV0aG9yaXR5KCkucGlwZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcCgoYXV0aDogU2NoZW1lQXV0aE1vZGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdDogdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uYXV0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgKS5zdWJzY3JpYmUoKHQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1lU2VydmljZS5zZXRTY2hlbWVMaXN0KGdyaWRJbnN0YW5jZS5pZCwgdC5saXN0IHx8IFtdKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dTY2hlbWVMaXN0RGlhbG9nKGdyaWRJbnN0YW5jZSwgY2xvbmVEZWVwKHQubGlzdCB8fCBbXSksIHQsIHNpbXBsZVJlZik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNjaGVtZUxpc3RTdWJzY3JpcHRpb24gPSB0aGlzLnNjaGVtZVNlcnZpY2Uuc2NoZW1lTGlzdCQuc3Vic2NyaWJlKChsaXN0OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIHNpbXBsZVJlZi5pbnN0YW5jZS5zY2hlbWVMaXN0ID0gbGlzdDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWxpc3QgfHwgIWxpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVTY2hlbWVJdGVtKGdyaWRJbnN0YW5jZS5pZCwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IF9hY3RpdmVTY2hlbWVJdGVtID0gdGhpcy5nZXRBY3RpdmVTY2hlbWVJdGVtKGdyaWRJbnN0YW5jZS5pZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2FjdGl2ZVNjaGVtZUl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaGFzQWN0aXZlSXRlbSA9IGxpc3QuZmluZChuID0+IG4uaWQgPT09IF9hY3RpdmVTY2hlbWVJdGVtLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0FjdGl2ZUl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzQWN0aXZlSXRlbSA9IHRoaXMuZ2V0RGVmYXVsdFNjaGVtZShsaXN0KTsgLy8g6I635Y+W6K6+572u5Li65b2T5YmN5pa55qGI55qE6aG5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZlU2NoZW1lSXRlbShncmlkSW5zdGFuY2UuaWQsIGhhc0FjdGl2ZUl0ZW0gfHwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzaW1wbGVSZWYuaW5zdGFuY2UuY3VycmVudFNjaGVtZUl0ZW0gPSBoYXNBY3RpdmVJdGVtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIOWIh+aNouaWueahiFxyXG4gICAgICAgICAgICAvLyBzaW1wbGVSZWYuaW5zdGFuY2UuYWN0aXZlSXRlbUNoYW5nZS5zdWJzY3JpYmUoKHI6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAvLyAgICAgdGhpcy5zZXRBY3RpdmVTY2hlbWVJdGVtKGdyaWRJbnN0YW5jZS5pZCwgcik7XHJcbiAgICAgICAgICAgIC8vIH0pO1xyXG5cclxuICAgICAgICAgICAgc2ltcGxlUmVmLmluc3RhbmNlLnNjaGVtZUNoYW5nZWQuc3Vic2NyaWJlKCh0OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFNjaGVtZWl0ZW0gPSB0O1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgc2ltcGxlUmVmLmhvc3RWaWV3LmRldGVjdENoYW5nZXMoKTtcclxuXHJcbiAgICAgICAgICAgIHNpbXBsZVJlZi5pbnN0YW5jZS5jb250YWluZXIubmF0aXZlRWxlbWVudC5zdHlsZS5yaWdodCA9ICcwcHgnO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHNpbXBsZVJlZjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHNob3coZ3JpZEluc3RhbmNlOiBEYXRhZ3JpZENvbXBvbmVudCwgb3B0cz86IE1vZGFsT3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJHcmlkSW5zdGFuY2UoZ3JpZEluc3RhbmNlKTtcclxuXHJcbiAgICAgICAgaWYgKGdyaWRJbnN0YW5jZS5lbmFibGVTaW1wbGVNb2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNob3dTaW1wbGUoZ3JpZEluc3RhbmNlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zaG93QWR2YW5jZWQoZ3JpZEluc3RhbmNlLCBvcHRzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzaG93QWR2YW5jZWQoZ3JpZEluc3RhbmNlOiBEYXRhZ3JpZENvbXBvbmVudCwgb3B0cz86IE1vZGFsT3B0aW9ucywgc2VsZWN0ZWRTY2hlbWVJdGVtPzogRGF0YWdyaWRTY2hlbWVNb2RlbCkge1xyXG4gICAgICAgIGxldCBfZWRpdENvbFNvcnRJbmZvID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBlZGl0Q29sU29ydEluZm8gPSB0aGlzLmNhblNldENvbHVtblNvcnQoZ3JpZEluc3RhbmNlKTtcclxuICAgICAgICBpZiAoZWRpdENvbFNvcnRJbmZvICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMubWVzc2FnZXIud2FybmluZyhtc2cpO1xyXG4gICAgICAgICAgICAvLyByZXR1cm47XHJcbiAgICAgICAgICAgIF9lZGl0Q29sU29ydEluZm8gPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNob3dTZXRDb2x1bW5zVGFiID0gIXRoaXMuaXNIZWFkZXJHcm91cChncmlkSW5zdGFuY2UpO1xyXG4gICAgICAgIGNvbnN0IGdldEFjdGl2ZVRhYkluZGV4ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoc2hvd1NldENvbHVtbnNUYWIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKF9lZGl0Q29sU29ydEluZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBhY3RpdmVUYWJJbmRleCA9IGdldEFjdGl2ZVRhYkluZGV4KCk7XHJcblxyXG4gICAgICAgIGlmIChhY3RpdmVUYWJJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlci53YXJuaW5nKHRoaXMubm90U2hvd0RpYWxvZyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLmNvbnZlcnRDb2x1bW5zVG9TaW1wbGUoZ3JpZEluc3RhbmNlLmNvbHVtbnMpO1xyXG5cclxuICAgICAgICAvLyDojrflj5blvZPliY3mlrnmoYjkuK3lvZPliY3or63oqIDnmoTphY3nva7mlbDmja5cclxuICAgICAgICBsZXQgY3VycmVudFNldHRpbmdzOiBTZXR0aW5nTW9kZWwgPSBudWxsO1xyXG4gICAgICAgIGlmIChzZWxlY3RlZFNjaGVtZUl0ZW0gJiYgc2VsZWN0ZWRTY2hlbWVJdGVtLnF1ZXJ5Q29uZGl0aW9uU3RyaW5nKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRTZXR0aW5ncyA9IEpTT04ucGFyc2Uoc2VsZWN0ZWRTY2hlbWVJdGVtLnF1ZXJ5Q29uZGl0aW9uU3RyaW5nKVt0aGlzLmxvY2FsZVNlci5sb2NhbGVJZF07XHJcblxyXG4gICAgICAgICAgICBpZiAoY3VycmVudFNldHRpbmdzLmNvbHVtbkZvcm1hdCAmJiBjdXJyZW50U2V0dGluZ3MuY29sdW1uRm9ybWF0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29sdW1uc1swXSA9IGNvbHVtbnNbMF0ubWFwKChjb2wpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmY29sID0gY3VycmVudFNldHRpbmdzLmNvbHVtbkZvcm1hdC5maW5kKG4gPT4gbi5maWVsZCA9PT0gY29sLmZpZWxkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmNvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2wgPSBPYmplY3QuYXNzaWduKGNvbCwgZmNvbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2w7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRTZXR0aW5ncy52aWV3Q29sdW1ucyAmJiBjdXJyZW50U2V0dGluZ3Mudmlld0NvbHVtbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW5zWzBdLmZvckVhY2goZiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZi52aXNpYmxlID0gY3VycmVudFNldHRpbmdzLnZpZXdDb2x1bW5zLmluZGV4T2YoZi5maWVsZCkgPiAtMTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgY29sdW1uc1swXSA9IGNvbHVtbnNbMF0uZmlsdGVyKG4gPT4gbi5maWVsZCAmJiBuLmZpZWxkICE9PSBncmlkSW5zdGFuY2UuQ29udHJvbFBhbmVsRmVpbGQpO1xyXG4gICAgICAgIGNvbnN0IHRyZWVEYXRhID0gdGhpcy5jb252ZXJ0Q29sdW1uczJUcmVlRGF0YShjbG9uZURlZXAoY29sdW1ucyksIHRydWUpO1xyXG4gICAgICAgIGNvbnN0IHZpZXdDb2x1bW5zVHJlZURhdGEgPSB0aGlzLmNvbnZlcnRDb2x1bW5zMlRyZWVEYXRhKGNsb25lRGVlcChjb2x1bW5zKSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuY2hlY2tWaWV3VHJlZU5vZGVzKHZpZXdDb2x1bW5zVHJlZURhdGEpO1xyXG5cclxuICAgICAgICBsZXQgbW9kYWxSZWYgPSBudWxsO1xyXG5cclxuICAgICAgICBjb25zdCBva1RleHQgPSB0aGlzLmxvY2FsZVNlci5nZXRWYWx1ZSgnZGF0YWdyaWQuc2V0dGluZ3Mub2snKSB8fCAn56Gu5a6aJztcclxuICAgICAgICBjb25zdCBjYW5jZWxUZXh0ID0gdGhpcy5sb2NhbGVTZXIuZ2V0VmFsdWUoJ2RhdGFncmlkLnNldHRpbmdzLmNhbmNlbCcpIHx8ICflj5bmtognO1xyXG4gICAgICAgIGNvbnN0IHJlc2V0VGV4dCA9ICB0aGlzLmxvY2FsZVNlci5nZXRWYWx1ZSgnZGF0YWdyaWQuc2V0dGluZ3MucmVzZXQnKSB8fCAn6YeN572uJztcclxuXHJcbiAgICAgICAgY29uc3QgZGVmYXVsdE9wdHMgPSB7XHJcbiAgICAgICAgICAgIHdpZHRoOiA3NjAsIGhlaWdodDogNTYwLCBzaG93SGVhZGVyOiBmYWxzZSwgdGl0bGU6ICfmjqfliLbpnaLmnb8nLFxyXG4gICAgICAgICAgICBpbml0aWFsU3RhdGU6IHtcclxuICAgICAgICAgICAgICAgIGNvbHVtbnMsXHJcbiAgICAgICAgICAgICAgICBzb3J0VHJlZURhdGE6IHRyZWVEYXRhLFxyXG4gICAgICAgICAgICAgICAgdmlld1RyZWVEYXRhOiB2aWV3Q29sdW1uc1RyZWVEYXRhLFxyXG4gICAgICAgICAgICAgICAgZ3JpZEluc3RhbmNlLFxyXG4gICAgICAgICAgICAgICAgY2FuU2V0Q29sdW1uU29ydDogX2VkaXRDb2xTb3J0SW5mbyxcclxuICAgICAgICAgICAgICAgIGNhblNldENvbHVtblZpc2libGU6IHNob3dTZXRDb2x1bW5zVGFiLFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlVGFiSW5kZXgsXHJcbiAgICAgICAgICAgICAgICBzY2hlbWVJbmZvOiBjdXJyZW50U2V0dGluZ3NcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2hvd0J1dHRvbnM6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBtb2RhbE9wdHMgPSBPYmplY3QuYXNzaWduKGRlZmF1bHRPcHRzLCBvcHRzIHx8IHt9KTtcclxuXHJcbiAgICAgICAgbW9kYWxSZWYgPSB0aGlzLm1vZGFsU2VyLnNob3coRGF0YWdyaWRTZXR0aW5nc0NvbXBvbmVudCwgbW9kYWxPcHRzKTtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IG1vZGFsUmVmLmNvbnRlbnQgYXMgRGF0YWdyaWRTZXR0aW5nc0NvbXBvbmVudDtcclxuICAgICAgICBpbnN0YW5jZS5lbmFibGVSZXNldCA9IHRydWU7XHJcbiAgICAgICAgaW5zdGFuY2UubW9kYWxSZWYgPSBtb2RhbFJlZjtcclxuICAgICAgICBpbnN0YW5jZS5jYW5TZXRDb2x1bW5Tb3J0ID0gX2VkaXRDb2xTb3J0SW5mbztcclxuICAgICAgICBpbnN0YW5jZS5jYW5TZXRDb2x1bW5WaXNpYmxlID0gIXRoaXMuaXNIZWFkZXJHcm91cChncmlkSW5zdGFuY2UpO1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5zdWJtaXRIYW5kbGUuc3Vic2NyaWJlKChlKSA9PiB7XHJcbiAgICAgICAgICAgIGUudGFyZ2V0LmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2F2aW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF0aGlzLnNhdmluZykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkU2NoZW1lSXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZlU2NoZW1lSXRlbShncmlkSW5zdGFuY2UuaWQsIHNlbGVjdGVkU2NoZW1lSXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUdyaWRWaWV3KG1vZGFsUmVmLCBncmlkSW5zdGFuY2UsIGUudGFyZ2V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5jYW5jZWxIYW5kbGUuc3Vic2NyaWJlKChlKSA9PiB7XHJcbiAgICAgICAgICAgIG1vZGFsUmVmLmNsb3NlKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIOWIh+aNouWIsOS+p+i+ueagj+eugOa0geaooeW8j1xyXG4gICAgICAgIGluc3RhbmNlLmNvbmNpc2Uuc3Vic2NyaWJlKChlKSA9PiB7XHJcbiAgICAgICAgICAgIG1vZGFsUmVmLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNldHRpbmdzID0gbW9kYWxSZWYuY29udGVudDtcclxuICAgICAgICAgICAgY29uc3QgeyBzb3J0SW5mbywgdmlld0NvbHVtbnMsIGNvbHVtbkZvcm1hdCwgZ3JvdXBGaWVsZCB9ID0gc2V0dGluZ3M7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd1NpbXBsZShncmlkSW5zdGFuY2UsIHsgc29ydEluZm8sIHZpZXdDb2x1bW5zLCBjb2x1bW5Gb3JtYXQsIGdyb3VwRmllbGQgfSwgc2VsZWN0ZWRTY2hlbWVJdGVtKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgbW9kYWxDb250YWluZXIgPSBtb2RhbFJlZi5kaWFsb2cuaW5zdGFuY2UgYXMgTW9kYWxDb250YWluZXJDb21wb25lbnQ7XHJcbiAgICAgICAgbW9kYWxDb250YWluZXIuZHJhZ2diYXIuaGFuZGxlID0gaW5zdGFuY2UuaGVhZGVyLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgcmV0dXJuIG1vZGFsUmVmO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBjYW5TZXRDb2x1bW5Tb3J0KGdyaWRJbnN0YW5jZTogRGF0YWdyaWRDb21wb25lbnQpIHtcclxuICAgICAgICBpZiAoZ3JpZEluc3RhbmNlLm11bHRpU29ydCAmJiB0aGlzLmhhc0VuYWJsZVNvcnRDb2x1bW5zKGdyaWRJbnN0YW5jZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0VuYWJsZVNvcnRDb2x1bW5zKGdyaWRJbnN0YW5jZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbHVtbnNTb3J0YWJsZU1zZztcclxuICAgICAgICAgICAgfSBlbHNlIGlmICghZ3JpZEluc3RhbmNlLm11bHRpU29ydCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubXVsdGlTb3J0TXNnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGFzRW5hYmxlU29ydENvbHVtbnMoZ3JpZEluc3RhbmNlOiBEYXRhZ3JpZENvbXBvbmVudCkge1xyXG4gICAgICAgIGNvbnN0IHNvcnRDb2x1bW5zQ291bnQgPSBncmlkSW5zdGFuY2UuZmxhdENvbHVtbnMucmVkdWNlKChjLCByKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChyLnNvcnRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYyArIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGM7XHJcbiAgICAgICAgfSwgMCk7XHJcblxyXG4gICAgICAgIHJldHVybiBzb3J0Q29sdW1uc0NvdW50ID4gMDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGlzSGVhZGVyR3JvdXAoZ3JpZDogRGF0YWdyaWRDb21wb25lbnQpIHtcclxuICAgICAgICBjb25zdCBmbGFnID0gZ3JpZC5jb2x1bW5zLmxlbmd0aCA+IDE7XHJcbiAgICAgICAgaWYgKGZsYWcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm90U3VwcG9ydEhlYWRlckdyb3VwTXNnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmxhZztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldENoaWxkcyhjb2xzLCByb3dJbmRleCwgY29sU3RhcnRJbmRleCwgY29sQ291bnQsIGZvclNvcnQgPSBmYWxzZSkge1xyXG4gICAgICAgIGNvbnN0IGNoaWxkQ29scyA9IFtdO1xyXG4gICAgICAgIGxldCBfY291bnQgPSBjb2xTdGFydEluZGV4O1xyXG4gICAgICAgIGlmICghY29sc1tyb3dJbmRleF0pIHtcclxuICAgICAgICAgICAgcmV0dXJuICBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbHNbcm93SW5kZXhdLnNsaWNlKCkuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgX2NvdW50ID0gX2NvdW50ICsgZWxlbWVudC5jb2xzcGFuO1xyXG4gICAgICAgICAgICBpZiAoIF9jb3VudCA8PSBjb2xDb3VudCApIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkQ29scy5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbHNbcm93SW5kZXhdLnNwbGljZSgwLCBjaGlsZENvbHMubGVuZ3RoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNoaWxkQ29scy5tYXAoKGMsIGkpID0+IHtcclxuICAgICAgICAgICAgbGV0IG46IGFueSA9IHtcclxuICAgICAgICAgICAgICAgIGRhdGE6IGMsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RhYmxlOiBmb3JTb3J0ID8gISFjLnNvcnRhYmxlIDogdHJ1ZVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKGMuY29sc3BhbiAmJiBjLmNvbHNwYW4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBuID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGMsXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuZ2V0Q2hpbGRzKGNvbHMsIHJvd0luZGV4ICsgMSwgMCAsIGMuY29sc3BhbilcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG47XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjb252ZXJ0Q29sdW1uczJUcmVlRGF0YShjb2xzOiBEYXRhQ29sdW1uW11bXSwgZm9yU29ydCA9IGZhbHNlKSB7XHJcbiAgICAgICAgY29uc3QgY29sdW1ucyA9IGNvbHMubWFwKChjOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYWEgPSBjLm1hcCgoXykgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKF8uZmllbGQuaW5kZXhPZignZmFycmlzLWRhdGFncmlkLWNvbHVtbl8nKSA9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF8uY29sc3BhbiA9IF8uY29sc3BhbiB8fCAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gYWEuZmlsdGVyKG4gPT4gbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGNvbHVtbnMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2x1bW5zWzBdLm1hcChjID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogYyxcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RhYmxlOiBmb3JTb3J0ID8gISFjLnNvcnRhYmxlIDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbHVtbnNbMF0ubWFwKChjLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYy5jb2xzcGFuICYmIGMuY29sc3BhbiA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBjLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLmdldENoaWxkcyhjb2x1bW5zLCAxLCAwLCBjLmNvbHNwYW4sIGZvclNvcnQpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogYyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0YWJsZTogZm9yU29ydCA/ICEhYy5zb3J0YWJsZSA6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tWaWV3VHJlZU5vZGVzKHRyZWVOb2RlczogVHJlZU5vZGVbXSkge1xyXG4gICAgICAgIHRyZWVOb2Rlcy5mb3JFYWNoKCh0bjogVHJlZU5vZGUpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0bi5jaGlsZHJlbiB8fCAhdG4uY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0bi5zZWxlY3RhYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRuLnNlbGVjdGFibGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tWaWV3VHJlZU5vZGVzKHRuLmNoaWxkcmVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2NvbnZlcnRDb2x1bW5zVG9TaW1wbGUoZ3JpZEluc3RhbmNlOiBhbnkpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvbHMgPSBncmlkSW5zdGFuY2UuY29sdW1ucztcclxuICAgICAgICAvLyDph43nva7liJfpobrluo/kuLrmnIDliJ3orr7orqHml7bnmoTpobrluo9cclxuICAgICAgICBjb25zdCBncmlkT3B0cyA9IGdyaWRJbnN0YW5jZS5kZnMuX3N0YXRlLmluaXRpYWxPcHRpb25zO1xyXG4gICAgICAgIGlmIChncmlkT3B0cy5jb2x1bW5GaWVsZHMpIHtcclxuICAgICAgICAgICAgbGV0IGRlc2dpbkNvbHMgPSBncmlkT3B0cy5jb2x1bW5GaWVsZHM7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0NvbHVtbnMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGRlc2dpbkNvbHMuZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChjLmZpZWxkICE9PSAnX2RhdGFncmlkLXNldHRpbmctY29udHJvbF8nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sID0gZ3JpZEluc3RhbmNlLmNvbHVtbnNbMF0uZmluZCgobjogYW55KSA9PiBuLmZpZWxkID09PSBjLmZpZWxkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NvbHVtbnMucHVzaChjb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjb2xzID0gW25ld0NvbHVtbnNdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbHM7XHJcbiAgICB9XHJcblxyXG4gICAgY29udmVydENvbHVtbnNUb1NpbXBsZShjb2xzOiBhbnkpIHtcclxuICAgICAgICByZXR1cm4gY29scy5tYXAoIChfY29sczogRGF0YUNvbHVtbltdKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBfY29scy5tYXAoIChjOiBEYXRhQ29sdW1uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYy5maWVsZCAhPT0gJ19kYXRhZ3JpZC1zZXR0aW5nLWNvbnRyb2xfJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiBjLmZpZWxkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogYy50aXRsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogYy5jb2xzcGFuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiBjLnJvd3NwYW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRhYmxlOiBjLnNvcnRhYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmRlcjogYy5vcmRlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFsaWduOiBjLmhhbGlnbiB8fCAnbGVmdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduOiBjLmFsaWduIHx8ICdsZWZ0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogYy52aXNpYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxvd0dyb3VwaW5nOiBjLmFsbG93R3JvdXBpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwRm9vdGVyOiBjLmdyb3VwRm9vdGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb290ZXI6IGMuZm9vdGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogYy53aWR0aCB8fCAxMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBjLmRhdGFUeXBlIHx8ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkuZmlsdGVyKG4gPT4gbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZXNldEdyaWRWaWV3KGdyaWRJbnN0YW5jZTogYW55KSB7XHJcbiAgICAgICAgaWYgKCFncmlkSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkZnMgPSBncmlkSW5zdGFuY2UuZGZzO1xyXG4gICAgICAgIGlmIChkZnMpIHtcclxuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGRmc1snX3N0YXRlJ10uaW5pdGlhbE9wdGlvbnM7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zb3J0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zb3J0LnNvcnROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JpZEluc3RhbmNlLnNvcnROYW1lID0gb3B0aW9ucy5zb3J0LnNvcnROYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc29ydC5zb3J0T3JkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBncmlkSW5zdGFuY2Uuc29ydE9yZGVyID0gb3B0aW9ucy5zb3J0LnNvcnRPcmRlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ3JpZEluc3RhbmNlLmdyb3VwRmllbGQgPSBvcHRpb25zLmdyb3VwRmllbGQgfHwgJyc7XHJcbiAgICAgICAgICAgIC8vIFRPRE86IOi/mOmcgOimgeS/ruato+m7mOiupOWIl+eahOaYvuekuumhuuW6j1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jb2x1bW5GaWVsZHMgJiYgb3B0aW9ucy5jb2x1bW5GaWVsZHMubGVuZ3RoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3Q29sdW1ucyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5jb2x1bW5GaWVsZHMuZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSBncmlkSW5zdGFuY2UuY29sdW1uc1swXS5maW5kKChuOiBhbnkpID0+IG4uZmllbGQgPT09IGMuZmllbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sLnZpc2libGUgPSBjLnZpc2libGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbC5oYWxpZ24gPSBjLmhhbGlnbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sLmFsaWduID0gYy5hbGlnbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sLndpZHRoID0gYy53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sLmZvb3RlciA9IGMuZm9vdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2wuZ3JvdXBGb290ZXIgPSBjLmdyb3VwRm9vdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdDb2x1bW5zLnB1c2goY29sKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBncmlkSW5zdGFuY2UuY29sdW1uc1swXSA9IG5ld0NvbHVtbnM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGdyaWRJbnN0YW5jZVsnY2hlY2tPcHRpb25zJ10oKTtcclxuICAgICAgICAgICAgZ3JpZEluc3RhbmNlWydjb2x1bW5zQ2hhbmdlZCddKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlR3JpZFZpZXcobW9kYWxSZWYsIGdyaWRJbnN0YW5jZSwgYnRuID0gbnVsbCkge1xyXG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0gbW9kYWxSZWYuY29udGVudDtcclxuXHJcbiAgICAgICAgaWYgKHNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgc29ydEluZm8sIHZpZXdDb2x1bW5zLCBjb2x1bW5Gb3JtYXQsIGdyb3VwRmllbGQsIGdyb3VwUm93U3RhdGUgfSA9IHNldHRpbmdzO1xyXG4gICAgICAgICAgICBjb25zdCBfY29sZm9ybWF0cyA9IGNvbHVtbkZvcm1hdCA/IHRoaXMuY29udmVydENvbHVtbnNUb1NpbXBsZShbY29sdW1uRm9ybWF0XSlbMF0gOiBbXTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQWN0aXZlU2NoZW1lSXRlbVNldHRpbmdzKGdyaWRJbnN0YW5jZS5pZCwge3NvcnRJbmZvLCB2aWV3Q29sdW1ucywgY29sdW1uRm9ybWF0OiBfY29sZm9ybWF0cywgZ3JvdXBGaWVsZH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zYXZpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgbGV0IF9ncm91cEZpZWxkID0gJyc7XHJcbiAgICAgICAgICAgIGlmIChncmlkSW5zdGFuY2UuZ3JvdXBSb3dzICYmIGdyb3VwRmllbGQgJiYgZ3JvdXBGaWVsZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIF9ncm91cEZpZWxkID0gZ3JvdXBGaWVsZC5qb2luKCcsJykgO1xyXG5cclxuICAgICAgICAgICAgICAgIGdyaWRJbnN0YW5jZS5leHBhbmRHcm91cFJvd3MgPSBncm91cFJvd1N0YXRlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdyaWRJbnN0YW5jZS5ncm91cEZpZWxkID0gX2dyb3VwRmllbGQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHNhdmVEYXRhID0geyBzb3J0SW5mbywgdmlld0NvbHVtbnMsIGdyb3VwRmllbGQ6IF9ncm91cEZpZWxkLCBjb2x1bW5Gb3JtYXQ6IF9jb2xmb3JtYXRzLCBleHBhbmRHcm91cFJvd3M6IGdyb3VwUm93U3RhdGUgfTtcclxuICAgICAgICAgICAgdGhpcy5zZXRVc2VyQ29uZmlnKGdyaWRJbnN0YW5jZS5pZCwgc2F2ZURhdGEpLnN1YnNjcmliZSggKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ0bikge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zYXZpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmICh2aWV3Q29sdW1ucyAmJiB2aWV3Q29sdW1ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBncmlkSW5zdGFuY2UuY29sdW1ucyA9IGdyaWRJbnN0YW5jZS5jb2x1bW5zLm1hcChjb2xzID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDb2x1bW5Gb3JtYXQoY29scywgY29sdW1uRm9ybWF0LCBncmlkSW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uZXdWaXNpYmxlT3JkZXJDb2x1bW5zKGNvbHMsIHZpZXdDb2x1bW5zLCBjb2x1bW5Gb3JtYXQsIGdyaWRJbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZ3JpZEluc3RhbmNlLmNvbHVtbnNDaGFuZ2VkKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNvcnRJbmZvICYmIE9iamVjdC5rZXlzKHNvcnRJbmZvKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHNvcnROYW1lLCBzb3J0T3JkZXIgfSA9IHNvcnRJbmZvO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3J0TmFtZSAmJiBzb3J0TmFtZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZEluc3RhbmNlLnNvcnQoc29ydE5hbWUuam9pbignLCcpLCBzb3J0T3JkZXIuam9pbignLCcpKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBncmlkSW5zdGFuY2UuY2xlYXJTb3J0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBncmlkSW5zdGFuY2UuY2xlYXJTb3J0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbW9kYWxSZWYuY2xvc2UoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbW9kYWxSZWYuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIG5ld1Zpc2libGVPcmRlckNvbHVtbnMoY29sczogYW55LCB2aWV3Q29sdW1uczogYW55LCBjb2x1bW5Gb3JtYXQ6IGFueSwgZ3JpZEluc3RhbmNlOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBoaWRlQ29sdW1ucyA9IFtdO1xyXG4gICAgICAgIGNvbHMuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNOZXdBZGRDb2x1bW4oZWxlbWVudC5maWVsZCwgY29sdW1uRm9ybWF0KSAmJiBlbGVtZW50LmZpZWxkICE9PSAnX2RhdGFncmlkLXNldHRpbmctY29udHJvbF8nICYmICFncmlkSW5zdGFuY2UuZW5hYmxlU2NoZW1lKSB7XHJcbiAgICAgICAgICAgICAgICB2aWV3Q29sdW1ucy5wdXNoKGVsZW1lbnQuZmllbGQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC52aXNpYmxlID0gdmlld0NvbHVtbnMuaW5jbHVkZXMoZWxlbWVudC5maWVsZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWVsZW1lbnQudmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhpZGVDb2x1bW5zLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8g5riF55CG5LiN5a2Y5Zyo55qE5YiXXHJcbiAgICAgICAgbGV0IG5ld0NvbHMgPSB2aWV3Q29sdW1ucy5tYXAoIGZpZWxkID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbHMuZmluZChjID0+IGMuZmllbGQgPT09IGZpZWxkKTtcclxuICAgICAgICB9KS5maWx0ZXIobiA9PiBuKTtcclxuXHJcbiAgICAgICAgaWYgKGhpZGVDb2x1bW5zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBuZXdDb2xzID0gbmV3Q29scy5jb25jYXQoaGlkZUNvbHVtbnMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ld0NvbHMuZmlsdGVyKGMgPT4gYyAmJiBjLmZpZWxkICYmIGMuZmllbGQgIT09ICdfZGF0YWdyaWQtc2V0dGluZy1jb250cm9sXycgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaYr+WQpuS4uuaWsOWinuWKoOeahOWtl+autVxyXG4gICAgICog5paw5aKe55qE5a2X5q6177yM6ZyA6KaB5Zyo5YiX6KGo5Lit5bGV56S65Ye65p2l77yM5bm25L+d5a2Y5Yiw5Liq5oCn5YyW6K6+572u5LitXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgaXNOZXdBZGRDb2x1bW4oZmllbGQ6IGFueSwgY29sdW1uczogYW55KSB7XHJcbiAgICAgICAgY29sdW1ucyA9IGNvbHVtbnMgfHwgW107XHJcbiAgICAgICAgcmV0dXJuICFjb2x1bW5zLmZpbmQoYyA9PiBjLmZpZWxkID09PSBmaWVsZCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHVwZGF0ZUNvbHVtbkZvcm1hdChjb2xzOiBhbnlbXSwgY29sdW1uRm9ybWF0OiBhbnlbXSwgZ3JpZEluc3RhbmNlKSB7XHJcbiAgICAgICAgaWYgKGNvbHVtbkZvcm1hdCAmJiBjb2x1bW5Gb3JtYXQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbHMuZm9yRWFjaChjb2wgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0Q29sID0gY29sdW1uRm9ybWF0LmZpbmQoZj0+IGYuZmllbGQgPT09IGNvbC5maWVsZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0Q29sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sLndpZHRoID0gZm9ybWF0Q29sLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbC5oYWxpZ24gPSBmb3JtYXRDb2wuaGFsaWduIHx8ICdsZWZ0JztcclxuICAgICAgICAgICAgICAgICAgICBjb2wuYWxpZ24gPSBmb3JtYXRDb2wuYWxpZ24gfHwgJ2xlZnQnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JpZEluc3RhbmNlLmdyb3VwUm93cyAmJiAoY29sLmFsbG93R3JvdXBpbmcgfHwgY29sLmFsbG93R3JvdXBpbmcgPT09IHVuZGVmaW5lZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb2wuZ3JvdXBGb290ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbC5ncm91cEZvb3RlciA9IGZvcm1hdENvbC5ncm91cEZvb3RlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbC5ncm91cEZvb3RlciAmJiBjb2wuZ3JvdXBGb290ZXIub3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sLmdyb3VwRm9vdGVyLm9wdGlvbnMudGV4dCA9IGZvcm1hdENvbC5ncm91cEZvb3Rlci5vcHRpb25zLnRleHQgfHwgJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wuZ3JvdXBGb290ZXIub3B0aW9ucy5jYWxjdWxhdGlvblR5cGUgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdENvbC5ncm91cEZvb3Rlci5vcHRpb25zLmNhbGN1bGF0aW9uVHlwZSAhPT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0Q29sLmdyb3VwRm9vdGVyLm9wdGlvbnMuY2FsY3VsYXRpb25UeXBlICE9PSBudWxsID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludChmb3JtYXRDb2wuZ3JvdXBGb290ZXIub3B0aW9ucy5jYWxjdWxhdGlvblR5cGUsIDEwKSA6IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JpZEluc3RhbmNlLnNob3dGb290ZXIgJiYgIWdyaWRJbnN0YW5jZS5mb290ZXJUZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbC5mb290ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbC5mb290ZXIgPSBmb3JtYXRDb2wuZm9vdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sLmZvb3RlciAmJiBjb2wuZm9vdGVyLm9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbC5mb290ZXIub3B0aW9ucy50ZXh0ID0gZm9ybWF0Q29sLmZvb3Rlci5vcHRpb25zLnRleHQgfHwgJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wuZm9vdGVyLm9wdGlvbnMuY2FsY3VsYXRpb25UeXBlID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRDb2wuZm9vdGVyLm9wdGlvbnMuY2FsY3VsYXRpb25UeXBlICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRDb2wuZm9vdGVyLm9wdGlvbnMuY2FsY3VsYXRpb25UeXBlICE9PSBudWxsID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludChmb3JtYXRDb2wuZm9vdGVyLm9wdGlvbnMuY2FsY3VsYXRpb25UeXBlLCAxMCkgOiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOWIm+W7uuWUr+S4gGtleSwg55SxdXJpICsgZ3JpZElkIOe7hOaIkO+8jOW5tua3t+a3hlxyXG4gICAgcHJpdmF0ZSBjcmVhdGVDb25maWdLZXkoZ3JpZElkOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBncmlkID0gdGhpcy5nZXRHcmlkSW5zdGFuY2UoZ3JpZElkKTtcclxuICAgICAgICBpZiAoZ3JpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ3JpZC5kZ3MuY3JlYXRlQ29uZmlnS2V5KGdyaWRJZCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy53cml0ZURlYnVnTXNnKCdEYXRhZ3JpZFNldHRpbmdTZXJ2aWNlOiBDYW4gbm90IGZpbmQgdGhlIGdyaWQgaW5zdGFuY2UuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBnZXRDdXJyZW50VXNlclNldHRpbmdzKGdyaWRJZDogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgZ3JpZEluc3RhbmNlID0gdGhpcy5nZXRHcmlkSW5zdGFuY2UoZ3JpZElkKTtcclxuICAgICAgICBjb25zdCBjb25maWcgPSB7c29ydEluZm86IHt9LCB2aWV3Q29sdW1uczogW10sIGdyb3VwRmllbGQ6ICcnLCBjb2x1bW5Gb3JtYXQ6IFtdfTtcclxuXHJcbiAgICAgICAgaWYgKGdyaWRJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBjb25zdCB7IHNvcnROYW1lLCBzb3J0T3JkZXIsIGNvbHVtbnN9ID0gZ3JpZEluc3RhbmNlO1xyXG4gICAgICAgICAgICBpZiAoc29ydE5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNvcnRJbmZvID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNvcnROYW1lOiBzb3J0TmFtZS5zcGxpdCgnLCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRPcmRlcjogc29ydE9yZGVyLnNwbGl0KCcsJylcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgY29uZmlnLnNvcnRJbmZvID0gc29ydEluZm87XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHZpZXdDb2x1bW5zID0gY29sdW1uc1swXS5maWx0ZXIobiA9PiBuLnZpc2libGUgfHwgbi52aXNpYmxlID09PSB1bmRlZmluZWQpLm1hcChuID0+IG4uZmllbGQpO1xyXG4gICAgICAgICAgICBjb25maWcudmlld0NvbHVtbnMgPSB2aWV3Q29sdW1ucztcclxuICAgICAgICAgICAgY29uZmlnLmNvbHVtbkZvcm1hdCA9IHRoaXMuY29udmVydENvbHVtbnNUb1NpbXBsZSh0aGlzLl9jb252ZXJ0Q29sdW1uc1RvU2ltcGxlKGdyaWRJbnN0YW5jZSkpWzBdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGdyaWRJbnN0YW5jZS5ncm91cFJvd3MpIHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZy5ncm91cEZpZWxkID0gZ3JpZEluc3RhbmNlLmdyb3VwRmllbGQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgIH1cclxuXHJcblxyXG4gICAgc2F2ZVVzZXJDb25maWcoZ3JpZElkOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmdldEN1cnJlbnRVc2VyU2V0dGluZ3MoZ3JpZElkKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXRVc2VyQ29uZmlnKGdyaWRJZCwgY29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRVc2VyQ29uZmlnKGdyaWRJZDogc3RyaW5nLCBjb25maWc6IGFueSApOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuY3JlYXRlQ29uZmlnS2V5KGdyaWRJZCk7XHJcbiAgICAgICAgY29uc3QgTE9DQUxFSUQgPSB0aGlzLmxvY2FsZVNlci5sb2NhbGVJZDtcclxuICAgICAgICBjb25zdCBjdXJyZW50Q29uZmlnID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICAgICAgICBjb25zdCBfY29uZmlnID0gKGN1cnJlbnRDb25maWcgPyBKU09OLnBhcnNlKGN1cnJlbnRDb25maWcpIDogeyB9KSB8fCB7fTtcclxuICAgICAgICBpZiAoY29uZmlnKSB7XHJcbiAgICAgICAgICAgIGlmIChfY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICBfY29uZmlnW0xPQ0FMRUlEXSA9IGNvbmZpZztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShfY29uZmlnKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaHR0cFJlc3RTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGdyaWRJbnMgPSB0aGlzLmdldEdyaWRJbnN0YW5jZShncmlkSWQpO1xyXG4gICAgICAgICAgICBpZiAoZ3JpZElucyAmJiBncmlkSW5zLmVuYWJsZVNjaGVtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aXZlU2NoZW1lID0gdGhpcy5nZXRBY3RpdmVTY2hlbWVJdGVtKGdyaWRJZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlU2NoZW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIHRoaXMudXBkYXRlU2NoZW1lKGdyaWRJZCwgY29uZmlnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlU2NoZW1lLnR5cGUgPT09ICdwcml2YXRlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zY2hlbWVTZXJ2aWNlLnNhdmVTY2hlbWUoYWN0aXZlU2NoZW1lLCBncmlkSWQsIHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NoZW1lU2VydmljZS5jaGVja0F1dGhvcml0eSgpLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoKHQ6IFNjaGVtZUF1dGhNb2RlbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFzT3JnQXV0aG9yaXR5ID0gdC5hdXRoT3JnYW5pemF0aW9uRGF0YSAmJiB0LmF1dGhPcmdhbml6YXRpb25EYXRhLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVNjaGVtZS50eXBlID09PSAncHVibGljJyB8fCAoYWN0aXZlU2NoZW1lLnR5cGUgPT09ICdvcmcnICYmIGhhc09yZ0F1dGhvcml0eSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjaGVtZVNlcnZpY2Uuc2F2ZVNjaGVtZShhY3RpdmVTY2hlbWUsIGdyaWRJZCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g5L+d5a2Y6Iez5pWw5o2u5bqTXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zYXZlVXNlckNvbmZpZyhrZXksICBjb25maWcgPyBfY29uZmlnIDogICcnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRVc2VyQ29uZmlnKGtleSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaHR0cFJlc3RTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRVc2VyQ29uZmlnKGtleSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgY29uZmlnID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICAgICAgICAgICAgaWYgKGNvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29uID0gSlNPTi5wYXJzZShjb25maWcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvblt0aGlzLmxvY2FsZVNlci5sb2NhbGVJZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoY29uW3RoaXMubG9jYWxlU2VyLmxvY2FsZUlkXSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhjb24pLmluZGV4T2YoJ3ZpZXdDb2x1bW5zJykgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoY29uKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXREZWZhdWx0U2NoZW1lKHNjaGVtZUxpc3Q6IEFycmF5PERhdGFncmlkU2NoZW1lTW9kZWw+KSB7XHJcbiAgICAgICAgLy8gMeOAgeacieS4quS6uum7mOiupOeahOi/lOWbnuS4quS6uum7mOiupOaWueahiFxyXG4gICAgICAgIC8vIDLjgIHmsqHmnInkuKrkurrpu5jorqTmlrnmoYjnmoTvvIzov5Tlm57lhazlhbHmlrnmoYjnrKwx5LiqXHJcbiAgICAgICAgLy8gM+OAgeayoeacieWFrOWFseaWueahiO+8jOi/lOWbnue7hOe7h+aWueahiOesrDHkuKpcclxuICAgICAgICAvLyA044CB5rKh5pyJ57uE57uH5pa55qGI55qELCDov5Tlm57kuKrkurrmlrnmoYjnrKwx5LiqXHJcbiAgICAgICAgLy8gNeOAgeayoeacieS4quS6uuaWueahiOeahO+8jOi/lOWbnuezu+e7n+mihOWItu+8jOWNs+ihqOWNleiuvuiuoeaXtueahOagvOW8j1xyXG5cclxuICAgICAgICBsZXQgZGVmYXVsdFNjaGVtZSA9IG51bGw7XHJcbiAgICAgICAgaWYgKCFzY2hlbWVMaXN0IHx8ICFzY2hlbWVMaXN0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFNjaGVtZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkZWZhdWx0U2NoZW1lID0gc2NoZW1lTGlzdC5maW5kKG4gPT4gbi5pc0RlZmF1bHQpO1xyXG4gICAgICAgICAgICBpZiAoIWRlZmF1bHRTY2hlbWUpIHtcclxuICAgICAgICAgICAgICAgIGxldCBwdWJsaWNTY2hlbWVzID0gc2NoZW1lTGlzdC5maWx0ZXIobiA9PiBuLnR5cGUgPT09ICdwdWJsaWMnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXB1YmxpY1NjaGVtZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHVibGljU2NoZW1lcyA9IHNjaGVtZUxpc3QuZmlsdGVyKG4gPT4gbi50eXBlID09PSAnb3JnJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHB1YmxpY1NjaGVtZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFNjaGVtZSA9IHB1YmxpY1NjaGVtZXNbMF07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRTY2hlbWUgPSBzY2hlbWVMaXN0WzBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZGVmYXVsdFNjaGVtZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZ2V0U2V0dGluZ3MoZ3JpZElkOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmNyZWF0ZUNvbmZpZ0tleShncmlkSWQpO1xyXG4gICAgICAgIGNvbnN0IGdyaWRJbnMgPSB0aGlzLmdldEdyaWRJbnN0YW5jZShncmlkSWQpO1xyXG5cclxuICAgICAgICBsZXQgc2NoZW1lTGlzdCQgPSBvZihbXSk7XHJcbiAgICAgICAgaWYgKGdyaWRJbnMgJiYgZ3JpZElucy5lbmFibGVTY2hlbWUpIHtcclxuICAgICAgICAgICAgc2NoZW1lTGlzdCQgPSB0aGlzLmdldFNjaGVtZUxpc3QoZ3JpZElkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmb3JrSm9pbihzY2hlbWVMaXN0JCwgdGhpcy5nZXRVc2VyQ29uZmlnKGtleSksIHRoaXMuc2NoZW1lU2VydmljZS5nZXRMYW5ndWFnZXMoKSkucGlwZShcclxuICAgICAgICAgICAgbWFwKChbc2NoZW1lTGlzdCwgdXNlclNldHRpbmcsIHN1cHBvcnRlZExhbmd1YWdlc10pID0+IHtcclxuICAgICAgICAgICAgICAgIHNjaGVtZUxpc3QgPSBzY2hlbWVMaXN0IHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYW5ndWFnZXMgPSBzdXBwb3J0ZWRMYW5ndWFnZXM7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXNjaGVtZUxpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJTZXR0aW5nO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDnvJPlrZjmlrnmoYjliJfooahcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFNjaGVtZUxpc3Qoc2NoZW1lTGlzdCwgZ3JpZElkKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyDmn6Xmib7pu5jorqTmlrnmoYhcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0U2NoZW1lOiBEYXRhZ3JpZFNjaGVtZU1vZGVsID0gdGhpcy5nZXREZWZhdWx0U2NoZW1lKHNjaGVtZUxpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZGVmYXVsdFNjaGVtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlclNldHRpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVTY2hlbWVJdGVtKGdyaWRJZCwgZGVmYXVsdFNjaGVtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1c2VyU2V0dGluZ3MgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdFNjaGVtZS5xdWVyeUNvbmRpdGlvblN0cmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlclNldHRpbmdzID0gSlNPTi5wYXJzZShkZWZhdWx0U2NoZW1lLnF1ZXJ5Q29uZGl0aW9uU3RyaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNlclNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2NhbGVJZCA9IHRoaXMubG9jYWxlU2VyLmxvY2FsZUlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJTZXR0aW5nc1tsb2NhbGVJZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHVzZXJTZXR0aW5ncykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1c2VyU2V0dGluZ3NbbG9jYWxlSWRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyU2V0dGluZ3NbbG9jYWxlSWRdID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHVzZXJTZXR0aW5ncykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBfc2F2ZVVzZXJDb25maWcoa2V5LCBjb25maWcpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCB1c2VyQ29uZmlnU2V0dGluZyA9IHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZ2tleTE6IGtleSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ2tleTI6ICcnLFxyXG4gICAgICAgICAgICAgICAgY29uZmlna2V5MzogJycsXHJcbiAgICAgICAgICAgICAgICB0ZXh0dmFsdWU6IGNvbmZpZyA/IEpTT04uc3RyaW5naWZ5KGNvbmZpZykgOiAgJydcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHBSZXN0U2VydmljZS5zYXZlVXNlclNldHRpbmdzKHVzZXJDb25maWdTZXR0aW5nKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMud3JpdGVEZWJ1Z01zZyhlLCAnZXJyb3InKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVzZXRVc2VyQ29uZmlnKGdyaWRJbnN0YW5jZSwgbW9kYWxSZWYpIHtcclxuICAgICAgICBjb25zdCByZXN0b3JEZWZhdWx0VGV4dCA9IHRoaXMubG9jYWxlU2VyLmdldFZhbHVlKCdkYXRhZ3JpZC5zZXR0aW5ncy5yZXN0b3JlRGVmYXVsdFNldHRpbmdzVGV4dCcpIHx8ICfnoa7orqTopoHmgaLlpI3pu5jorqTorr7nva7lkJfvvJ8nO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZXIuY29uZmlybShyZXN0b3JEZWZhdWx0VGV4dCkucGlwZShcclxuICAgICAgICAgICAgc3dpdGNoTWFwKCAodDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRVc2VyQ29uZmlnKGdyaWRJbnN0YW5jZS5pZCwgJycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9mKHQpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICkuc3Vic2NyaWJlKCh0OiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0R3JpZFZpZXcoZ3JpZEluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIG1vZGFsUmVmLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9nZXRVc2VyQ29uZmlnKGtleSkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHBSZXN0U2VydmljZS5nZXRVc2VyU2V0dGluZ3Moa2V5KS5waXBlKFxyXG4gICAgICAgICAgICAgICAgbWFwKCh1Y3M6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1Y3MgJiYgdWNzLnRleHRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjID0gSlNPTi5wYXJzZSh1Y3MudGV4dFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjW3RoaXMubG9jYWxlU2VyLmxvY2FsZUlkXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgdWNzLnRleHRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNbdGhpcy5sb2NhbGVTZXIubG9jYWxlSWRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjW3RoaXMubG9jYWxlU2VyLmxvY2FsZUlkXSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShjKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKE9iamVjdC5rZXlzKGMpLmluZGV4T2YoJ3ZpZXdDb2x1bW5zJykgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICByZXR1cm4gYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kZWJ1Z1Nlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWJ1Z1Nlci5lcnJvcihlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGJ1aWxkU3VibWl0RGF0YShncmlkSWQ6IHN0cmluZywgc2V0dGluZ3MgPSBudWxsKSB7XHJcbiAgICAgICAgY29uc3QgTE9DQUxFSUQgPSB0aGlzLmxvY2FsZVNlci5sb2NhbGVJZDtcclxuICAgICAgICBpZiAoIXNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgIHNldHRpbmdzID0gdGhpcy5nZXRDdXJyZW50VXNlclNldHRpbmdzKGdyaWRJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGxvY2FsZUtleSA9IHRoaXMuY3JlYXRlQ29uZmlnS2V5KGdyaWRJZCk7XHJcbiAgICAgICAgY29uc3QgY3VycmVudENvbmZpZyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGxvY2FsZUtleSk7XHJcbiAgICAgICAgY29uc3QgX2NvbmZpZyA9IChjdXJyZW50Q29uZmlnID8gSlNPTi5wYXJzZShjdXJyZW50Q29uZmlnKSA6IHsgfSkgfHwge307XHJcbiAgICAgICAgaWYgKF9jb25maWcpIHtcclxuICAgICAgICAgICAgX2NvbmZpZ1tMT0NBTEVJRF0gPSBzZXR0aW5ncztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBfY29uZmlnO1xyXG4gICAgfVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gXFxcXFxyXG5cclxuICAgIHByaXZhdGUgc2hvd1NjaGVtZUxpc3REaWFsb2coZ3JpZEluc3RhbmNlOiBhbnksIHNjaGVtZUxpc3Q6IGFueSwgYXV0aEluZm86IFNjaGVtZUF1dGhNb2RlbCwgc2ltcGxlUmVmOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBtb2RhbE9wdHMgPSB7XHJcbiAgICAgICAgICAgIHdpZHRoOiA3NjAsIGhlaWdodDogNTc3LCBzaG93SGVhZGVyOiBmYWxzZSwgdGl0bGU6ICfmjqfliLbpnaLmnb8nLFxyXG4gICAgICAgICAgICBpbml0aWFsU3RhdGU6IHtcclxuICAgICAgICAgICAgICAgIGl0ZW1zOiBzY2hlbWVMaXN0IHx8IFtdLFxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlSXRlbTogYXV0aEluZm8uc3VjY2VzcyxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRVc2VySWQ6IGF1dGhJbmZvLmN1cnJlbnRVc2VySWRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2hvd0J1dHRvbnM6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2NoZW1lTGlzdERsZyA9IHRoaXMubW9kYWxTZXIuc2hvdyhTY2hlbWVMaXN0Q29tcG9uZW50LCBtb2RhbE9wdHMpO1xyXG4gICAgICAgIHNjaGVtZUxpc3REbGcuZGlhbG9nLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQuc3R5bGUuekluZGV4ID0gMjAzMTtcclxuXHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBzY2hlbWVMaXN0RGxnLmNvbnRlbnQgYXMgU2NoZW1lTGlzdENvbXBvbmVudDtcclxuICAgICAgICBpbnN0YW5jZS5jbG9zZU1vZGFsLnN1YnNjcmliZSggKCkgPT4ge1xyXG4gICAgICAgICAgICBzY2hlbWVMaXN0RGxnLmNsb3NlKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLnN1Ym1pdE1vZGFsLnN1YnNjcmliZSgodDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NoZW1lU2VydmljZS51cGRhdGVTY2hlbWUodCwgZ3JpZEluc3RhbmNlLmlkKS5zdWJzY3JpYmUoKGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYoZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBzY2hlbWVMaXN0RGxnLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbXNnID0gJ+WIl+iuvue9ruaWueahiOS/neWtmOaIkOWKn+OAgic7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ub3RpZnlTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLnN1Y2Nlc3MobXNnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlci5zdWNjZXNzKG1zZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodC5kZWZhdWx0SWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzY2hlbWVMaXN0LmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4uaXNEZWZhdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuLmlkID09PSB0LmRlZmF1bHRJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5pc0RlZmF1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5zZXRBY3RpdmVTY2hlbWVJdGVtKGdyaWRJbnN0YW5jZS5pZCwgbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3U2NoZW1lTGlzdCA9IHNjaGVtZUxpc3Q7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5kZWxldGVkSWRzICYmIHQuZGVsZXRlZElkcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdTY2hlbWVMaXN0ID0gc2NoZW1lTGlzdC5maWx0ZXIobiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhdC5kZWxldGVkSWRzLmluY2x1ZGVzKG4uaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlbWVTZXJ2aWNlLnNldFNjaGVtZUxpc3QoZ3JpZEluc3RhbmNlLmlkLCBuZXdTY2hlbWVMaXN0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50U2NoZW1lID0gdGhpcy5nZXRBY3RpdmVTY2hlbWVJdGVtKGdyaWRJbnN0YW5jZS5pZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRTY2hlbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEFjdGl2ZVNjaGVtZUl0ZW0oZ3JpZEluc3RhbmNlLmlkLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBzaW1wbGVSZWYuaW5zdGFuY2UuY3VycmVudFNjaGVtZUl0ZW0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbXBsZVJlZi5pbnN0YW5jZS5yZXNldDJEZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc2NoZW1lTGlzdERsZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgbW9kYWxDb250YWluZXIgPSBzY2hlbWVMaXN0RGxnLmRpYWxvZy5pbnN0YW5jZSBhcyBNb2RhbENvbnRhaW5lckNvbXBvbmVudDtcclxuICAgICAgICBtb2RhbENvbnRhaW5lci5kcmFnZ2Jhci5oYW5kbGUgPSBpbnN0YW5jZS5oZWFkZXIubmF0aXZlRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvLyDmlrDlop7miJblj6blrZjmlrnmoYhcclxuICAgIHByaXZhdGUgc2hvd05ld1NjaGVtZURpYWxvZyhncmlkSW5zdGFuY2UsIGU6IHsgdHlwZTogJ25ldycgfCAnc2F2ZWFzJ30sICBzaW1wbGVSZWY6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IG1vZGFsT3B0cyA9IHtcclxuICAgICAgICAgICAgd2lkdGg6IDQ4MCwgaGVpZ2h0OiAyNjksIHNob3dIZWFkZXI6IGZhbHNlLCB0aXRsZTogJ+aOp+WItumdouadvycsXHJcbiAgICAgICAgICAgIGluaXRpYWxTdGF0ZToge1xyXG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2VzOiB0aGlzLmxhbmd1YWdlc1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzaG93QnV0dG9uczogZmFsc2UsXHJcbiAgICAgICAgICAgIHJlc2l6YWJsZTogZmFsc2VcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBuZXdTY2hlbWVEbGcgPSB0aGlzLm1vZGFsU2VyLnNob3coTmV3U2NoZW1lQ29tcG9uZW50LCBtb2RhbE9wdHMpO1xyXG4gICAgICAgIG5ld1NjaGVtZURsZy5kaWFsb2cubG9jYXRpb24ubmF0aXZlRWxlbWVudC5zdHlsZS56SW5kZXggPSAyMDMxO1xyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gbmV3U2NoZW1lRGxnLmNvbnRlbnQgYXMgTmV3U2NoZW1lQ29tcG9uZW50O1xyXG4gICAgICAgIGluc3RhbmNlLmNsb3NlTW9kYWwuc3Vic2NyaWJlKCAoKSA9PiB7XHJcbiAgICAgICAgICAgIG5ld1NjaGVtZURsZy5jbG9zZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5zdWJtaXRNb2RhbC5waXBlKFxyXG4gICAgICAgICAgICBzd2l0Y2hNYXAoKHQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlTmV3U2NoZW1lKGdyaWRJbnN0YW5jZS5pZCwgdCwgZS50eXBlID09PSAnbmV3Jywgc2ltcGxlUmVmLmluc3RhbmNlLmNvbGxlY3RTZXR0aW5ncygpKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApLnN1YnNjcmliZSgodDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0LmZsYWcgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSB0Lm1zZztcclxuICAgICAgICAgICAgICAgIGxldCBfbXNnID0gbXNnO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1zZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtc2cuaW5kZXhPZignfCcpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX21zZyA9IG1zZy5zcGxpdCgnfCcpLm1hcCgobGFuZ2NvZGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZVNlci5nZXRWYWx1ZSgnZGF0YWdyaWQtc2V0dGluZ3MuJysgbGFuZ2NvZGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmpvaW4oJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9tc2cgPSB0aGlzLmxvY2FsZVNlci5nZXRWYWx1ZSgnZGF0YWdyaWQtc2V0dGluZ3MuJysgbXNnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm5vdGlmeVNlcnZpY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLmluZm8oX21zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlci5pbmZvKF9tc2cpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyDmm7TmlrDmlrnmoYjliJfooahcclxuICAgICAgICAgICAgY29uc3Qgc2NoZW1lTGlzdCA9IHRoaXMuc2NoZW1lU2VydmljZS5nZXRTdGF0ZVZhbHVlKGdyaWRJbnN0YW5jZS5pZCwgJ2xpc3QnKSB8fCBbXTtcclxuICAgICAgICAgICAgaWYgKHQuaXNEZWZhdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBzY2hlbWVMaXN0LmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5pc0RlZmF1bHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNjaGVtZUxpc3QucHVzaCh0KTtcclxuICAgICAgICAgICAgLy8gdGhpcy5zZXRBY3RpdmVTY2hlbWVJdGVtKGdyaWRJbnN0YW5jZS5pZCwgdCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2NoZW1lU2VydmljZS5zZXRTY2hlbWVMaXN0KGdyaWRJbnN0YW5jZS5pZCwgc2NoZW1lTGlzdCk7XHJcblxyXG4gICAgICAgICAgICAvLyDmm7TmjaLkuLrmlrDnmoTmlrnmoYhcclxuICAgICAgICAgICAgc2ltcGxlUmVmLmluc3RhbmNlLm9uU2NoZW1lSXRlbUNsaWNrKG51bGwsIHQpO1xyXG4gICAgICAgICAgICBuZXdTY2hlbWVEbGcuY2xvc2UoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UuY2hlY2tBdXRob3JpdHkucGlwZShcclxuICAgICAgICAgICAgc3dpdGNoTWFwKCh0OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjaGVtZVNlcnZpY2UuY2hlY2tBdXRob3JpdHkoKS5waXBlKFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcCgoYXV0aDogU2NoZW1lQXV0aE1vZGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uYXV0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApLnN1YnNjcmliZSgodDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBoYXNBdXRob3JpdHkgPSB7IHB1YmxpYzogdHJ1ZSwgb3JnOiB0cnVlIH07XHJcbiAgICAgICAgICAgIC8vIOaCqOayoeacieWwhuaWueahiOeahOS9v+eUqOiMg+WbtOiuvue9ruS4uuWFrOWFseeahOadg+mZkOOAglxyXG4gICAgICAgICAgICBsZXQgX21zZyA9ICdub0F1dGgucHVibGljJztcclxuICAgICAgICAgICAgaWYgKHQudHlwZS52YWx1ZSA9PT0gJ29yZycpIHtcclxuICAgICAgICAgICAgICAgIC8vIOaCqOayoeacieWwhuaWueahiOeahOS9v+eUqOiMg+WbtOiuvue9ruS4uue7hOe7h+eahOadg+mZkOOAglxyXG4gICAgICAgICAgICAgICAgX21zZyA9ICdub0F1dGgub3JnJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgbXNnID0gdGhpcy5sb2NhbGVTZXIuZ2V0VmFsdWUoJ2RhdGFncmlkLXNldHRpbmdzLicrIF9tc2cgKTtcclxuICAgICAgICAgICAgaWYgKHQuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFzUHVibGljQXV0aG9yaXR5ID0gdC5hdXRoT3BlcmF0aW9uRGF0YSAmJiB0LmF1dGhPcGVyYXRpb25EYXRhLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGhhc0F1dGhvcml0eS5wdWJsaWMgPSBoYXNQdWJsaWNBdXRob3JpdHk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNPcmdBdXRob3JpdHkgPSB0LmF1dGhPcmdhbml6YXRpb25EYXRhICYmIHQuYXV0aE9yZ2FuaXphdGlvbkRhdGEubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgaGFzQXV0aG9yaXR5Lm9yZyA9IGhhc09yZ0F1dGhvcml0eTtcclxuICAgICAgICAgICAgICAgIGlmICh0LnR5cGUudmFsdWUgPT09ICdwdWJsaWMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2Uuc2NoZW1lSW5mby50eXBlID0gdC50eXBlLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0LnR5cGUudmFsdWUgPT09ICdvcmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNPcmdBdXRob3JpdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLndhcm5pbmcobXNnKTtcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnNjaGVtZUluZm8udHlwZSA9IHQudHlwZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2Uuc2NoZW1lSW5mby5vcmdpZHMgPSB0LmF1dGhPcmdhbml6YXRpb25EYXRhLmpvaW4oJywnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5kYXRhUGVybWlzc2lvbklkcyA9IHQuYXV0aE9yZ2FuaXphdGlvbkRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLndhcm5pbmcobXNnKTtcclxuICAgICAgICAgICAgICAgIGhhc0F1dGhvcml0eSA9IHsgcHVibGljOiBmYWxzZSwgb3JnOiBmYWxzZSB9OztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbnN0YW5jZS5yZWZyZXNoKGhhc0F1dGhvcml0eSk7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgY29uc3QgbW9kYWxDb250YWluZXIgPSBuZXdTY2hlbWVEbGcuZGlhbG9nLmluc3RhbmNlIGFzIE1vZGFsQ29udGFpbmVyQ29tcG9uZW50O1xyXG4gICAgICAgIG1vZGFsQ29udGFpbmVyLmRyYWdnYmFyLmhhbmRsZSA9IGluc3RhbmNlLmhlYWRlci5uYXRpdmVFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGdldFNjaGVtZUxpc3QoZ3JpZElkOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zY2hlbWVTZXJ2aWNlLmdldFNjaGVtZUxpc3QoZ3JpZElkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5paw5aKe5pa55qGIXHJcbiAgICAgKiAgaXNOZXdTY2hlbWXvvIzmmK/lkKbmlrDliqDmlrnmoYjvvIzlkKbliJnkuLrlj6blrZjkuLpcclxuICAgICAqICBjdXJyZW50U2V0dGluZ3PvvJog5b2T5YmN6YWN572u5L+h5oGvXHJcbiAgICAgKiAgZGF0YTog5paw5bu65pa55qGI56qX5Y+j5Lyg6YCS5pWw5o2uXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZU5ld1NjaGVtZShncmlkSWQ6IHN0cmluZywgZGF0YTogYW55LCBpc05ld1NjaGVtZSA9IHRydWUsIGN1cnJlbnRTZXR0aW5nczogYW55KSB7XHJcbiAgICAgICAgaWYoIWRhdGEubmFtZSkge1xyXG4gICAgICAgICAgICAvLyBtc2cg6K+36L6T5YWl5pa55qGI5ZCN56ewXHJcbiAgICAgICAgICAgIHJldHVybiBvZih7ZmxhZzogZmFsc2UsIG1zZzogJ3JlcXVpcmVkLnNjaGVtZU5hbWUnfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaGFzTmFtZSA9IHRoaXMuc2NoZW1lU2VydmljZS5oYXNTY2hlbWVOYW1lKGdyaWRJZCwgZGF0YS5uYW1lKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaGFzTmFtZSA9PT0gJ2Jvb2xlYW4nICYmIGhhc05hbWUpIHtcclxuICAgICAgICAgICAgICAgIC8vIG1zZyAn5pa55qGI5ZCN56ew5bey5a2Y5Zyo77yM6K+35L+u5pS544CCJ1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9mKHtmbGFnOiBmYWxzZSwgbXNnOiAnaGFzLmV4aXN0J30pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGFzTmFtZSkgJiYgaGFzTmFtZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY29uc3QgZ2V0TWVzc2FnZUNvZGUgPSAobGFuZ0NvZGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGFuZ0NvZGUgPT09ICd6aC1DSFMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGFzLmNocyc7IC8vIOeugOS9k+S4reaWh+WQjeensOW3suWtmOWcqOOAglxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZihsYW5nQ29kZSA9PT0gJ3poLUNIVCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoYXMuY2h0JzsgLy8g57mB6auU5Lit5paH5ZCN56ix5bey5a2Y5Zyo44CCXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoYXMuZW4nOyAvLyDoi7HmloflkI3np7Dlt7LlrZjlnKhcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGhhc05hbWUuaW5jbHVkZXModGhpcy5sb2NhbGVTZXIubG9jYWxlSWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbXNnID0gZ2V0TWVzc2FnZUNvZGUodGhpcy5sb2NhbGVTZXIubG9jYWxlSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvZih7ZmxhZzogZmFsc2UsIG1zZ30pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtc2dzID0gaGFzTmFtZS5tYXAobiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRNZXNzYWdlQ29kZShuKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKHtmbGFnOiBmYWxzZSwgbXNnOiBtc2dzLmpvaW4oJ3wnKX0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCByZXF1aXJlZE5hbWUgPSBbXTtcclxuXHJcblxyXG4gICAgICAgIGlmICghZGF0YS5uYW1lW3RoaXMubG9jYWxlU2VyLmxvY2FsZUlkXSkge1xyXG4gICAgICAgICAgICByZXF1aXJlZE5hbWUucHVzaCh0aGlzLmxvY2FsZVNlci5sb2NhbGVJZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0aGlzLmxhbmd1YWdlcy5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgIC8vICAgICBpZiAoZGF0YS5uYW1lW24uY29kZV0gPT09ICcnIHx8IGRhdGEubmFtZVtuLmNvZGVdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAvLyAgICAgICAgIHJlcXVpcmVkTmFtZS5wdXNoKG4uY29kZSk7XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyB9KTtcclxuXHJcbiAgICAgICAgaWYgKHJlcXVpcmVkTmFtZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgbXNncyA9IHJlcXVpcmVkTmFtZS5tYXAobiA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAobiA9PT0gJ3poLUNIUycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3JlcXVpcmVkLmNocyc7IC8vJ+ivt+i+k+WFpeeugOS9k+S4reaWh+WQjeensOOAgic7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYobiA9PT0gJ3poLUNIVCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3JlcXVpcmVkLmNodCc7IC8vJ+ivt+i+k+WFpee5geS9k+S4reaWh+WQjeensOOAgic7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAncmVxdWlyZWQuZW4nOyAvLyAn6K+36L6T5YWl6Iux5paH5ZCN56ew44CCJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBvZih7ZmxhZzogZmFsc2UsIG1zZzogbXNncy5qb2luKCd8Jyl9KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAoZGF0YS50eXBlICYmIGRhdGEudHlwZSA9PT0gJ29yZycgJiYgKCFkYXRhLm9yZ2lkcyB8fCAhZGF0YS5vcmdpZHMubGVuZ3RoKSkge1xyXG4gICAgICAgICAgICAvLyBtc2cgJ+ivt+mAieaLqee7hOe7hydcclxuICAgICAgICAgICAgcmV0dXJuIG9mKHtmbGFnOiBmYWxzZSwgbXNnOiAncmVxdWlyZWQub3JnJ30pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgX2NvbmZpZyA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmICghaXNOZXdTY2hlbWUpIHtcclxuICAgICAgICAgICAgY29uc3QgTE9DQUxFSUQgPSB0aGlzLmxvY2FsZVNlci5sb2NhbGVJZDtcclxuXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50U2V0dGluZ3MgJiYgY3VycmVudFNldHRpbmdzLmNvbHVtbkZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFNldHRpbmdzLmNvbHVtbkZvcm1hdCA9IHRoaXMuY29udmVydENvbHVtbnNUb1NpbXBsZShbY3VycmVudFNldHRpbmdzLmNvbHVtbkZvcm1hdF0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY29uZmlnID17IFtMT0NBTEVJRF06IGN1cnJlbnRTZXR0aW5ncyB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbmV3SWQgPSB0aGlzLmlkU2VydmljZS5ndWlkKCk7XHJcbiAgICAgICAgbGV0IGlzRGVmYXVsdCA9IGRhdGEuaXNEZWZhdWx0O1xyXG4gICAgICAgIGlmIChpc0RlZmF1bHQpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGEudHlwZSAhPT0gJ3ByaXZhdGUnKSB7XHJcbiAgICAgICAgICAgICAgICBpc0RlZmF1bHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRhdGEubmFtZSAmJiB0eXBlb2YgZGF0YS5uYW1lID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBkYXRhLm5hbWUgPSBKU09OLnN0cmluZ2lmeShkYXRhLm5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2NoZW1lOiBEYXRhZ3JpZFNjaGVtZU1vZGVsID0ge1xyXG4gICAgICAgICAgICBpZDogbmV3SWQsXHJcbiAgICAgICAgICAgIGJlbG9uZ0lkOiAnJyxcclxuICAgICAgICAgICAgY29kZTogJycsXHJcbiAgICAgICAgICAgIG5hbWU6IGRhdGEubmFtZSxcclxuICAgICAgICAgICAgdHlwZTogZGF0YS50eXBlLFxyXG4gICAgICAgICAgICBpc0RlZmF1bHQ6IGlzRGVmYXVsdCxcclxuICAgICAgICAgICAgaXNTeXN0ZW06IGZhbHNlLFxyXG4gICAgICAgICAgICBleHRlbmRJZDogJ2RhdGFncmlkLXNldHRpbmdzLXNjaGVtZScsXHJcbiAgICAgICAgICAgIGV4dGVuZEluZm86IHRoaXMuYnVpbGRPcmdBbmRTY2hlbWVSZWxhdGlvbnMobmV3SWQsIGRhdGEub3JnaWRzKSxcclxuICAgICAgICAgICAgcXVlcnlDb25kaXRpb25TdHJpbmc6IF9jb25maWc/IEpTT04uc3RyaW5naWZ5KF9jb25maWcpOiAnJyxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5zY2hlbWVTZXJ2aWNlLnNhdmVTY2hlbWUoc2NoZW1lLCBncmlkSWQpLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NoZW1lO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0U2NoZW1lTGlzdChzY2hlbWVMaXN0OiBEYXRhZ3JpZFNjaGVtZU1vZGVsW10sIGdyaWRJZDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5zY2hlbWVTZXJ2aWNlLnVwZGF0ZSh7bGlzdDogc2NoZW1lTGlzdH0sIGdyaWRJZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBidWlsZE9yZ0FuZFNjaGVtZVJlbGF0aW9ucyhzY2hlbWVJZDogc3RyaW5nLCBvcmdJZHM6IGFueSkge1xyXG4gICAgICAgIGlmICghb3JnSWRzIHx8ICFvcmdJZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAgW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0eXBlb2Ygb3JnSWRzID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBvcmdJZHMgPSBvcmdJZHMuc3BsaXQoJywnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvcmdJZHMubWFwKG4gPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMuaWRTZXJ2aWNlLmd1aWQoKSxcclxuICAgICAgICAgICAgICAgIG9yZ0lkOiBuLFxyXG4gICAgICAgICAgICAgICAgcmVsYXRlZElkOiBzY2hlbWVJZFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRDdXJyZW50U2NoZW1lU2V0dGluZ3MoZ3JpZElkOiBzdHJpbmcpOiBTZXR0aW5nTW9kZWwge1xyXG4gICAgICAgIGNvbnN0IGFjdGl2ZVNjaGVtZSA9IHRoaXMuZ2V0QWN0aXZlU2NoZW1lSXRlbShncmlkSWQpIGFzIERhdGFncmlkU2NoZW1lTW9kZWw7XHJcbiAgICAgICAgaWYgKGFjdGl2ZVNjaGVtZSAmJiBhY3RpdmVTY2hlbWUucXVlcnlDb25kaXRpb25TdHJpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoYWN0aXZlU2NoZW1lLnF1ZXJ5Q29uZGl0aW9uU3RyaW5nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn1cclxuIl19