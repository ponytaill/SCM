/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { map, switchMap } from 'rxjs/operators';
import { forkJoin, of, timer } from 'rxjs';
import { Injectable, Injector, InjectionToken, ComponentFactoryResolver, ApplicationRef } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { MessagerService } from '@farris/ui-messager';
import { DatagridSettingsComponent } from './datagrid-settings.component';
import { cloneDeep } from 'lodash-es';
import { LocaleService } from '@farris/ui-locale';
import { IdService } from '@farris/ui-common';
import { SimpleColumnsComponent } from './simple-mode/simple-columns.component';
import { DatagridSchemeService } from './datagrid-scheme.service';
import { NewSchemeComponent } from './scheme/newscheme.component';
import { SchemeListComponent } from './scheme/scheme-list.component';
import { NotifyService } from '@farris/ui-notify';
/** @type {?} */
export var GRID_SETTINGS_WEBAPI = new InjectionToken(' Farris DataGrid User Setting WebApi URI.');
var DatagridSettingsService = /** @class */ (function () {
    function DatagridSettingsService(injector, modalSer, messager, idService, localeSer) {
        this.injector = injector;
        this.modalSer = modalSer;
        this.messager = messager;
        this.idService = idService;
        this.localeSer = localeSer;
        this.multiSortMsg = '列表中未开启多列排序的功能。 请检查！';
        this.columnsSortableMsg = '未开启列的排序功能。请检查！';
        this.notSupportHeaderGroupMsg = '暂不支持多表头设置';
        this.notShowDialog = '多表头暂不支持列显示设置；同时未启用列排序功能。';
        this._httpRestService = null;
        this.languages = [];
        this.gridRefs = null;
        this.activeSchemeItem = null;
        this.saving = false;
        this.cfr = null;
        this.app = null;
        this.schemeListSubscription = null;
        this.cfr = this.injector.get(ComponentFactoryResolver);
        this.app = this.injector.get(ApplicationRef);
        this.notifyService = this.injector.get(NotifyService, null);
        this.schemeService = new DatagridSchemeService();
    }
    Object.defineProperty(DatagridSettingsService.prototype, "httpRestService", {
        get: /**
         * @return {?}
         */
        function () {
            return this._httpRestService;
        },
        set: /**
         * @param {?} httpSer
         * @return {?}
         */
        function (httpSer) {
            this._httpRestService = httpSer;
            if (this.schemeService) {
                this.schemeService.setRestService(httpSer);
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * @param {?=} id
     * @return {?}
     */
    DatagridSettingsService.prototype.destroy = /**
     * @param {?=} id
     * @return {?}
     */
    function (id) {
        if (id && this.gridRefs && this.gridRefs[id]) {
            delete this.gridRefs[id];
        }
        else {
            this.gridRefs = null;
        }
        this.saving = false;
        this.setActiveSchemeItem(id, null);
    };
    /**
     * @param {?} dg
     * @return {?}
     */
    DatagridSettingsService.prototype.registerGridInstance = /**
     * @param {?} dg
     * @return {?}
     */
    function (dg) {
        if (!dg) {
            console.log('DatagridSettingService: grid instance is null.');
            return;
        }
        /** @type {?} */
        var id = dg.id;
        this.gridRefs = this.gridRefs || {};
        if (!this.gridRefs[id]) {
            this.gridRefs[id] = dg;
        }
    };
    /**
     * @param {?} dgID
     * @return {?}
     */
    DatagridSettingsService.prototype.getGridInstance = /**
     * @param {?} dgID
     * @return {?}
     */
    function (dgID) {
        return this.gridRefs ? this.gridRefs[dgID] : null;
    };
    /** 更新方案中的配置数据 */
    /**
     * 更新方案中的配置数据
     * @private
     * @param {?} schemeItem
     * @param {?} settings
     * @return {?}
     */
    DatagridSettingsService.prototype.updateSchemeSettings = /**
     * 更新方案中的配置数据
     * @private
     * @param {?} schemeItem
     * @param {?} settings
     * @return {?}
     */
    function (schemeItem, settings) {
        if (schemeItem && settings) {
            /** @type {?} */
            var schemeContentObj = JSON.parse(schemeItem.queryConditionString);
            if (schemeContentObj) {
                if (schemeContentObj[this.localeSer.localeId]) {
                    /** @type {?} */
                    var schemeSettings = schemeContentObj[this.localeSer.localeId];
                    schemeContentObj[this.localeSer.localeId] = Object.assign(schemeSettings, settings);
                }
                else {
                    schemeContentObj[this.localeSer.localeId] = settings;
                }
                schemeItem.queryConditionString = JSON.stringify(schemeContentObj);
            }
        }
    };
    /** 更新当前方案配置数据 */
    /**
     * 更新当前方案配置数据
     * @param {?} dgId
     * @param {?} settings
     * @return {?}
     */
    DatagridSettingsService.prototype.updateActiveSchemeItemSettings = /**
     * 更新当前方案配置数据
     * @param {?} dgId
     * @param {?} settings
     * @return {?}
     */
    function (dgId, settings) {
        /** @type {?} */
        var schemeItem = this.getActiveSchemeItem(dgId);
        this.updateSchemeSettings(schemeItem, settings);
    };
    /** 设置活动的方案 */
    /**
     * 设置活动的方案
     * @param {?} dgId
     * @param {?} activeItem
     * @return {?}
     */
    DatagridSettingsService.prototype.setActiveSchemeItem = /**
     * 设置活动的方案
     * @param {?} dgId
     * @param {?} activeItem
     * @return {?}
     */
    function (dgId, activeItem) {
        /** @type {?} */
        var schemekey = this.schemeService.getSchemeKey(dgId);
        this.activeSchemeItem = this.activeSchemeItem || {};
        this.activeSchemeItem[schemekey] = activeItem;
    };
    /** 获取当前活动的方案 */
    /**
     * 获取当前活动的方案
     * @param {?} dgId
     * @return {?}
     */
    DatagridSettingsService.prototype.getActiveSchemeItem = /**
     * 获取当前活动的方案
     * @param {?} dgId
     * @return {?}
     */
    function (dgId) {
        /** @type {?} */
        var schemekey = this.schemeService.getSchemeKey(dgId);
        return this.activeSchemeItem ? this.activeSchemeItem[schemekey] : null;
    };
    /**
     * @return {?}
     */
    DatagridSettingsService.prototype.getSearchTypes = /**
     * @return {?}
     */
    function () {
        return [
            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
        ];
    };
    /**
     * @param {?} gridInstance
     * @param {?=} settings
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    DatagridSettingsService.prototype.showSimple = /**
     * @param {?} gridInstance
     * @param {?=} settings
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    function (gridInstance, settings, selectedSchemeItem) {
        var _this = this;
        /** @type {?} */
        var columns = this.convertColumnsToSimple(gridInstance.columns);
        columns[0] = columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field && n.field !== gridInstance.ControlPanelFeild; }));
        /** @type {?} */
        var searchTypes = this.getSearchTypes();
        if (this.cfr) {
            /** @type {?} */
            var cmpFactory = this.cfr.resolveComponentFactory(SimpleColumnsComponent);
            /** @type {?} */
            var simpleRef_1 = cmpFactory.create(this.injector);
            this.app.attachView(simpleRef_1.hostView);
            simpleRef_1.instance.columns = columns;
            simpleRef_1.instance.seartTypes = searchTypes;
            simpleRef_1.instance.gridInstance = gridInstance;
            if (document.querySelector('#page-wrapper')) {
                simpleRef_1.instance.top = 76;
            }
            simpleRef_1.instance.enableScheme = gridInstance.enableScheme;
            if (gridInstance.enableScheme) {
                if (settings) {
                    if (selectedSchemeItem) {
                        this.updateSchemeSettings(selectedSchemeItem, settings);
                        simpleRef_1.instance.currentSchemeItem = selectedSchemeItem;
                    }
                    else {
                        simpleRef_1.instance.currentSchemeItem = null;
                        simpleRef_1.instance.settings = settings;
                    }
                }
                else {
                    /** @type {?} */
                    var _currentSchemtItem = this.getActiveSchemeItem(gridInstance.id);
                    simpleRef_1.instance.currentSchemeItem = _currentSchemtItem;
                }
            }
            document.body.appendChild(simpleRef_1.location.nativeElement);
            simpleRef_1.instance.closed.pipe(switchMap((/**
             * @return {?}
             */
            function () {
                simpleRef_1.instance.container.nativeElement.style.right = '-500px';
                return timer(500);
            }))).subscribe((/**
             * @return {?}
             */
            function () {
                simpleRef_1.location.nativeElement.remove();
                simpleRef_1.destroy();
                simpleRef_1 = null;
                if (_this.schemeListSubscription) {
                    _this.schemeListSubscription.unsubscribe();
                }
            }));
            simpleRef_1.instance.advanced.subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var viewFields = _a.viewFields;
                if (viewFields && viewFields.length) {
                    _this.updateSchemeSettings(simpleRef_1.instance.currentSchemeItem, { viewColumns: viewFields });
                }
                _this.showAdvanced(gridInstance, null, simpleRef_1.instance.currentSchemeItem);
            }));
            simpleRef_1.instance.submit.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.target.disabled = true;
                if (_this.saving) {
                    return;
                }
                if (!_this.saving) {
                    if (e.currentScheme) {
                        _this.setActiveSchemeItem(gridInstance.id, e.currentScheme);
                    }
                    _this.updateGridView(e, gridInstance, e.target);
                }
            }));
            simpleRef_1.instance.fieldsChange.subscribe((/**
             * @param {?} visibleFields
             * @return {?}
             */
            function (visibleFields) {
                _this.updateActiveSchemeItemSettings(gridInstance.id, { viewColumns: visibleFields });
            }));
            // 打开新增方案窗口
            simpleRef_1.instance.addNewScheme.subscribe((/**
             * @return {?}
             */
            function () {
                _this.showNewSchemeDialog(gridInstance, simpleRef_1);
            }));
            simpleRef_1.instance.schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];
            // 打开方案管理列表窗口
            simpleRef_1.instance.showSchemeList.subscribe((/**
             * @return {?}
             */
            function () {
                _this.schemeService.getSchemeList(gridInstance.id).pipe(switchMap((/**
                 * @param {?} t
                 * @return {?}
                 */
                function (t) {
                    return _this.schemeService.checkAuthority().pipe(map((/**
                     * @param {?} auth
                     * @return {?}
                     */
                    function (auth) {
                        return tslib_1.__assign({ list: t }, auth);
                    })));
                }))).subscribe((/**
                 * @param {?} t
                 * @return {?}
                 */
                function (t) {
                    _this.schemeService.setSchemeList(gridInstance.id, t.list || []);
                    _this.showSchemeListDialog(gridInstance, cloneDeep(t.list || []), t.success);
                }));
            }));
            this.schemeListSubscription = this.schemeService.schemeList$.subscribe((/**
             * @param {?} list
             * @return {?}
             */
            function (list) {
                simpleRef_1.instance.schemeList = list;
                if (!list || !list.length) {
                    _this.setActiveSchemeItem(gridInstance.id, null);
                    return;
                }
                /** @type {?} */
                var _activeSchemeItem = _this.getActiveSchemeItem(gridInstance.id);
                if (_activeSchemeItem) {
                    /** @type {?} */
                    var hasActiveItem = list.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.id === _activeSchemeItem.id; }));
                    if (!hasActiveItem) {
                        hasActiveItem = _this.getDefaultScheme(list); // 获取设置为当前方案的项
                        _this.setActiveSchemeItem(gridInstance.id, hasActiveItem || null);
                    }
                    simpleRef_1.instance.currentSchemeItem = hasActiveItem;
                }
            }));
            // 切换方案
            simpleRef_1.instance.activeItemChange.subscribe((/**
             * @param {?} r
             * @return {?}
             */
            function (r) {
                _this.setActiveSchemeItem(gridInstance.id, r);
            }));
            simpleRef_1.hostView.detectChanges();
            simpleRef_1.instance.container.nativeElement.style.right = '0px';
            return simpleRef_1;
        }
    };
    /**
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    DatagridSettingsService.prototype.show = /**
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    function (gridInstance, opts) {
        this.registerGridInstance(gridInstance);
        if (gridInstance.enableSimpleMode) {
            return this.showSimple(gridInstance);
        }
        else {
            return this.showAdvanced(gridInstance, opts);
        }
    };
    /**
     * @private
     * @param {?} gridInstance
     * @param {?=} opts
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    DatagridSettingsService.prototype.showAdvanced = /**
     * @private
     * @param {?} gridInstance
     * @param {?=} opts
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    function (gridInstance, opts, selectedSchemeItem) {
        var _this = this;
        /** @type {?} */
        var _editColSortInfo = true;
        /** @type {?} */
        var editColSortInfo = this.canSetColumnSort(gridInstance);
        if (editColSortInfo !== true) {
            // this.messager.warning(msg);
            // return;
            _editColSortInfo = false;
        }
        /** @type {?} */
        var showSetColumnsTab = !this.isHeaderGroup(gridInstance);
        /** @type {?} */
        var getActiveTabIndex = (/**
         * @return {?}
         */
        function () {
            if (showSetColumnsTab) {
                return 1;
            }
            else {
                if (_editColSortInfo) {
                    return 2;
                }
                else {
                    return -1;
                }
            }
        });
        /** @type {?} */
        var activeTabIndex = getActiveTabIndex();
        if (activeTabIndex === -1) {
            this.messager.warning(this.notShowDialog);
            return;
        }
        /** @type {?} */
        var columns = this.convertColumnsToSimple(gridInstance.columns);
        // 获取当前方案中当前语言的配置数据
        /** @type {?} */
        var currentSettings = null;
        if (selectedSchemeItem && selectedSchemeItem.queryConditionString) {
            currentSettings = JSON.parse(selectedSchemeItem.queryConditionString)[this.localeSer.localeId];
            if (currentSettings.columnFormat && currentSettings.columnFormat.length) {
                columns[0] = columns[0].map((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) {
                    /** @type {?} */
                    var fcol = currentSettings.columnFormat.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === col.field; }));
                    if (fcol) {
                        col = Object.assign(col, fcol);
                    }
                    return col;
                }));
            }
        }
        columns[0] = columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field && n.field !== gridInstance.ControlPanelFeild; }));
        /** @type {?} */
        var treeData = this.convertColumns2TreeData(cloneDeep(columns), true);
        /** @type {?} */
        var viewColumnsTreeData = this.convertColumns2TreeData(cloneDeep(columns), false);
        this.checkViewTreeNodes(viewColumnsTreeData);
        /** @type {?} */
        var modalRef = null;
        /** @type {?} */
        var okText = this.localeSer.getValue('datagrid.settings.ok') || '确定';
        /** @type {?} */
        var cancelText = this.localeSer.getValue('datagrid.settings.cancel') || '取消';
        /** @type {?} */
        var resetText = this.localeSer.getValue('datagrid.settings.reset') || '重置';
        /** @type {?} */
        var defaultOpts = {
            width: 760, height: 560, showHeader: false, title: '控制面板',
            initialState: {
                columns: columns,
                sortTreeData: treeData,
                viewTreeData: viewColumnsTreeData,
                gridInstance: gridInstance,
                canSetColumnSort: _editColSortInfo,
                canSetColumnVisible: showSetColumnsTab,
                activeTabIndex: activeTabIndex,
                schemeInfo: currentSettings
            },
            showButtons: false
        };
        /** @type {?} */
        var modalOpts = Object.assign(defaultOpts, opts || {});
        modalRef = this.modalSer.show(DatagridSettingsComponent, modalOpts);
        /** @type {?} */
        var instance = (/** @type {?} */ (modalRef.content));
        instance.enableReset = true;
        instance.modalRef = modalRef;
        instance.canSetColumnSort = _editColSortInfo;
        instance.canSetColumnVisible = !this.isHeaderGroup(gridInstance);
        instance.submitHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.target.disabled = true;
            if (_this.saving) {
                return;
            }
            if (!_this.saving) {
                if (selectedSchemeItem) {
                    _this.setActiveSchemeItem(gridInstance.id, selectedSchemeItem);
                }
                _this.updateGridView(modalRef, gridInstance, e.target);
            }
        }));
        instance.cancelHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            modalRef.close();
        }));
        // 切换到侧边栏简洁模式
        instance.concise.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            modalRef.close();
            /** @type {?} */
            var settings = modalRef.content;
            var sortInfo = settings.sortInfo, viewColumns = settings.viewColumns, columnFormat = settings.columnFormat, groupField = settings.groupField;
            _this.showSimple(gridInstance, { sortInfo: sortInfo, viewColumns: viewColumns, columnFormat: columnFormat, groupField: groupField }, selectedSchemeItem);
        }));
        /** @type {?} */
        var modalContainer = (/** @type {?} */ (modalRef.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
        return modalRef;
    };
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.canSetColumnSort = /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        if (gridInstance.multiSort && this.hasEnableSortColumns(gridInstance)) {
            return true;
        }
        else {
            if (!this.hasEnableSortColumns(gridInstance)) {
                return this.columnsSortableMsg;
            }
            else if (!gridInstance.multiSort) {
                return this.multiSortMsg;
            }
        }
    };
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.hasEnableSortColumns = /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        /** @type {?} */
        var sortColumnsCount = gridInstance.flatColumns.reduce((/**
         * @param {?} c
         * @param {?} r
         * @return {?}
         */
        function (c, r) {
            if (r.sortable) {
                return c + 1;
            }
            return c;
        }), 0);
        return sortColumnsCount > 0;
    };
    /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    DatagridSettingsService.prototype.isHeaderGroup = /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    function (grid) {
        /** @type {?} */
        var flag = grid.columns.length > 1;
        if (flag) {
            return this.notSupportHeaderGroupMsg;
        }
        return flag;
    };
    /**
     * @private
     * @param {?} cols
     * @param {?} rowIndex
     * @param {?} colStartIndex
     * @param {?} colCount
     * @param {?=} forSort
     * @return {?}
     */
    DatagridSettingsService.prototype.getChilds = /**
     * @private
     * @param {?} cols
     * @param {?} rowIndex
     * @param {?} colStartIndex
     * @param {?} colCount
     * @param {?=} forSort
     * @return {?}
     */
    function (cols, rowIndex, colStartIndex, colCount, forSort) {
        var _this = this;
        if (forSort === void 0) { forSort = false; }
        /** @type {?} */
        var childCols = [];
        /** @type {?} */
        var _count = colStartIndex;
        if (!cols[rowIndex]) {
            return [];
        }
        cols[rowIndex].slice().forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            _count = _count + element.colspan;
            if (_count <= colCount) {
                childCols.push(element);
            }
        }));
        cols[rowIndex].splice(0, childCols.length);
        return childCols.map((/**
         * @param {?} c
         * @param {?} i
         * @return {?}
         */
        function (c, i) {
            /** @type {?} */
            var n = {
                data: c,
                selectable: forSort ? !!c.sortable : true
            };
            if (c.colspan && c.colspan > 1) {
                n = {
                    data: c,
                    selectable: false,
                    expanded: true,
                    children: _this.getChilds(cols, rowIndex + 1, 0, c.colspan)
                };
            }
            return n;
        }));
    };
    /**
     * @param {?} cols
     * @param {?=} forSort
     * @return {?}
     */
    DatagridSettingsService.prototype.convertColumns2TreeData = /**
     * @param {?} cols
     * @param {?=} forSort
     * @return {?}
     */
    function (cols, forSort) {
        var _this = this;
        if (forSort === void 0) { forSort = false; }
        /** @type {?} */
        var columns = cols.map((/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            c.map((/**
             * @param {?} _
             * @return {?}
             */
            function (_) {
                _.colspan = _.colspan || 1;
                return _;
            }));
            return c;
        }));
        if (columns.length === 1) {
            return columns[0].map((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                return {
                    data: c,
                    selectable: forSort ? !!c.sortable : true
                };
            }));
        }
        else {
            return columns[0].map((/**
             * @param {?} c
             * @param {?} i
             * @return {?}
             */
            function (c, i) {
                if (c.colspan && c.colspan > 1) {
                    return {
                        data: c,
                        selectable: false,
                        expanded: true,
                        children: _this.getChilds(columns, 1, 0, c.colspan, forSort)
                    };
                }
                else {
                    return {
                        data: c,
                        selectable: forSort ? !!c.sortable : true
                    };
                }
            }));
        }
    };
    /**
     * @private
     * @param {?} treeNodes
     * @return {?}
     */
    DatagridSettingsService.prototype.checkViewTreeNodes = /**
     * @private
     * @param {?} treeNodes
     * @return {?}
     */
    function (treeNodes) {
        var _this = this;
        treeNodes.forEach((/**
         * @param {?} tn
         * @return {?}
         */
        function (tn) {
            if (!tn.children || !tn.children.length) {
                tn.selectable = true;
            }
            else {
                tn.selectable = false;
                _this.checkViewTreeNodes(tn.children);
            }
        }));
    };
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    DatagridSettingsService.prototype.convertColumnsToSimple = /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    function (cols) {
        // 移除设置列
        return cols.map((/**
         * @param {?} _cols
         * @return {?}
         */
        function (_cols) {
            return _cols.map((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                if (c.field !== '_datagrid-setting-control_') {
                    return {
                        field: c.field,
                        title: c.title,
                        colspan: c.colspan,
                        rowspan: c.rowspan,
                        sortable: c.sortable,
                        order: c.order,
                        halign: c.halign || 'left',
                        align: c.align || 'left',
                        visible: c.visible,
                        allowGrouping: c.allowGrouping,
                        groupFooter: c.groupFooter,
                        footer: c.footer,
                        width: c.width || 100,
                        dataType: c.dataType || 'string'
                    };
                }
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n; }));
        }));
    };
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.resetGridView = /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    function (gridInstance) {
        if (!gridInstance) {
            return;
        }
        /** @type {?} */
        var dfs = gridInstance.dfs;
        if (dfs) {
            /** @type {?} */
            var options = dfs['_state'].initialOptions;
            if (options.sort) {
                if (options.sort.sortName) {
                    gridInstance.sortName = options.sort.sortName;
                }
                if (options.sort.sortOrder) {
                    gridInstance.sortOrder = options.sort.sortOrder;
                }
            }
            gridInstance.groupField = options.groupField || '';
            // TODO: 还需要修正默认列的显示顺序
            if (options.columnFields && options.columnFields.length) {
                /** @type {?} */
                var newColumns_1 = [];
                options.columnFields.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    /** @type {?} */
                    var col = gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === c.field; }));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = c.footer;
                        col.groupFooter = c.groupFooter;
                        newColumns_1.push(col);
                    }
                }));
                gridInstance.columns[0] = newColumns_1;
            }
            // gridInstance['checkOptions']();
            gridInstance['columnsChanged']();
        }
    };
    /**
     * @private
     * @param {?} modalRef
     * @param {?} gridInstance
     * @param {?=} btn
     * @return {?}
     */
    DatagridSettingsService.prototype.updateGridView = /**
     * @private
     * @param {?} modalRef
     * @param {?} gridInstance
     * @param {?=} btn
     * @return {?}
     */
    function (modalRef, gridInstance, btn) {
        var _this = this;
        if (btn === void 0) { btn = null; }
        /** @type {?} */
        var settings = modalRef.content;
        if (settings) {
            var sortInfo_1 = settings.sortInfo, viewColumns_1 = settings.viewColumns, columnFormat_1 = settings.columnFormat, groupField = settings.groupField;
            this.updateActiveSchemeItemSettings(gridInstance.id, { sortInfo: sortInfo_1, viewColumns: viewColumns_1, columnFormat: columnFormat_1, groupField: groupField });
            this.saving = true;
            /** @type {?} */
            var _groupField = '';
            if (gridInstance.groupRows && groupField && groupField.length) {
                _groupField = groupField.join(',');
            }
            gridInstance.groupField = _groupField;
            /** @type {?} */
            var _colformats = columnFormat_1 ? this.convertColumnsToSimple([columnFormat_1])[0] : [];
            /** @type {?} */
            var saveData = { sortInfo: sortInfo_1, viewColumns: viewColumns_1, groupField: _groupField, columnFormat: _colformats };
            this.setUserConfig(gridInstance.id, saveData).subscribe((/**
             * @return {?}
             */
            function () {
                if (btn) {
                    btn.disabled = false;
                }
                _this.saving = false;
                if (viewColumns_1 && viewColumns_1.length) {
                    gridInstance.columns = gridInstance.columns.map((/**
                     * @param {?} cols
                     * @return {?}
                     */
                    function (cols) {
                        _this.updateColumnFormat(cols, columnFormat_1, gridInstance);
                        return _this.newVisibleOrderColumns(cols, viewColumns_1, columnFormat_1, gridInstance);
                    }));
                }
                gridInstance.columnsChanged(true);
                if (sortInfo_1 && Object.keys(sortInfo_1).length) {
                    var sortName = sortInfo_1.sortName, sortOrder = sortInfo_1.sortOrder;
                    if (sortName && sortName.length) {
                        gridInstance.sort(sortName.join(','), sortOrder.join(','));
                    }
                    else {
                        gridInstance.clearSort();
                    }
                }
                else {
                    gridInstance.clearSort();
                }
                modalRef.close();
            }));
        }
        else {
            modalRef.close();
        }
    };
    /**
     * @param {?} cols
     * @param {?} viewColumns
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.newVisibleOrderColumns = /**
     * @param {?} cols
     * @param {?} viewColumns
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    function (cols, viewColumns, columnFormat, gridInstance) {
        var _this = this;
        /** @type {?} */
        var hideColumns = [];
        cols.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        function (element, index) {
            if (_this.isNewAddColumn(element.field, columnFormat) && element.field !== '_datagrid-setting-control_' && !gridInstance.enableScheme) {
                viewColumns.push(element.field);
            }
            else {
                element.visible = viewColumns.includes(element.field);
                if (!element.visible) {
                    hideColumns.push(element);
                }
            }
        }));
        // 清理不存在的列
        /** @type {?} */
        var newCols = viewColumns.map((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            return cols.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field === field; }));
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n; }));
        if (hideColumns.length) {
            newCols = newCols.concat(hideColumns);
        }
        return newCols.filter((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c && c.field && c.field !== '_datagrid-setting-control_'; }));
    };
    /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     */
    /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     * @private
     * @param {?} field
     * @param {?} columns
     * @return {?}
     */
    DatagridSettingsService.prototype.isNewAddColumn = /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     * @private
     * @param {?} field
     * @param {?} columns
     * @return {?}
     */
    function (field, columns) {
        columns = columns || [];
        return !columns.find((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.field === field; }));
    };
    /**
     * @param {?} cols
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    DatagridSettingsService.prototype.updateColumnFormat = /**
     * @param {?} cols
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    function (cols, columnFormat, gridInstance) {
        if (columnFormat && columnFormat.length) {
            cols.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                /** @type {?} */
                var formatCol = columnFormat.find((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return f.field === col.field; }));
                if (formatCol) {
                    col.width = formatCol.width;
                    col.halign = formatCol.halign || 'left';
                    col.align = formatCol.align || 'left';
                    if (gridInstance.groupRows && (col.allowGrouping || col.allowGrouping === undefined)) {
                        if (!col.groupFooter) {
                            col.groupFooter = formatCol.groupFooter;
                        }
                        if (col.groupFooter && col.groupFooter.options) {
                            col.groupFooter.options.text = formatCol.groupFooter.options.text || '';
                            col.groupFooter.options.calculationType =
                                formatCol.groupFooter.options.calculationType !== undefined &&
                                    formatCol.groupFooter.options.calculationType !== null ?
                                    parseInt(formatCol.groupFooter.options.calculationType, 10) : -1;
                        }
                    }
                    if (gridInstance.showFooter && !gridInstance.footerTemplate) {
                        if (!col.footer) {
                            col.footer = formatCol.footer;
                        }
                        if (col.footer && col.footer.options) {
                            col.footer.options.text = formatCol.footer.options.text || '';
                            col.footer.options.calculationType =
                                formatCol.footer.options.calculationType !== undefined &&
                                    formatCol.footer.options.calculationType !== null ?
                                    parseInt(formatCol.footer.options.calculationType, 10) : -1;
                        }
                    }
                }
            }));
        }
    };
    // 创建唯一key, 由uri + gridId 组成，并混淆
    // 创建唯一key, 由uri + gridId 组成，并混淆
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.createConfigKey = 
    // 创建唯一key, 由uri + gridId 组成，并混淆
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var grid = this.getGridInstance(gridId);
        if (grid) {
            return grid.dgs.createConfigKey(gridId);
        }
        else {
            console.log('DatagridSettingService: Can not find the grid instance.');
        }
    };
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.getCurrentUserSettings = /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var gridInstance = this.getGridInstance(gridId);
        /** @type {?} */
        var config = { sortInfo: {}, viewColumns: [], groupField: '', columnFormat: [] };
        if (gridInstance) {
            var sortName = gridInstance.sortName, sortOrder = gridInstance.sortOrder, columns = gridInstance.columns;
            if (sortName) {
                /** @type {?} */
                var sortInfo = {
                    sortName: sortName.split(','),
                    sortOrder: sortOrder.split(',')
                };
                config.sortInfo = sortInfo;
            }
            /** @type {?} */
            var viewColumns = columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.visible || n.visible === undefined; })).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field; }));
            config.viewColumns = viewColumns;
            config.columnFormat = this.convertColumnsToSimple(columns)[0];
            if (gridInstance.groupRows) {
                config.groupField = gridInstance.groupField;
            }
        }
        return config;
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.saveUserConfig = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var config = this.getCurrentUserSettings(gridId);
        return this.setUserConfig(gridId, config);
    };
    /**
     * @param {?} gridId
     * @param {?} config
     * @return {?}
     */
    DatagridSettingsService.prototype.setUserConfig = /**
     * @param {?} gridId
     * @param {?} config
     * @return {?}
     */
    function (gridId, config) {
        var _this = this;
        /** @type {?} */
        var key = this.createConfigKey(gridId);
        /** @type {?} */
        var LOCALEID = this.localeSer.localeId;
        /** @type {?} */
        var currentConfig = localStorage.getItem(key);
        /** @type {?} */
        var _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
        if (config) {
            if (_config) {
                _config[LOCALEID] = config;
            }
            localStorage.setItem(key, JSON.stringify(_config));
        }
        else {
            localStorage.removeItem(key);
        }
        if (this.httpRestService) {
            /** @type {?} */
            var gridIns = this.getGridInstance(gridId);
            if (gridIns && gridIns.enableScheme) {
                /** @type {?} */
                var activeScheme_1 = this.getActiveSchemeItem(gridId);
                if (activeScheme_1) {
                    // return this.updateScheme(gridId, config);
                    if (activeScheme_1.type === 'private') {
                        return this.schemeService.saveScheme(activeScheme_1, gridId, true);
                    }
                    else {
                        return this.schemeService.checkAuthority().pipe(switchMap((/**
                         * @param {?} t
                         * @return {?}
                         */
                        function (t) {
                            if (t.success) {
                                /** @type {?} */
                                var hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;
                                if (activeScheme_1.type === 'public' || (activeScheme_1.type === 'org' && hasOrgAuthority)) {
                                    return _this.schemeService.saveScheme(activeScheme_1, gridId, true);
                                }
                            }
                            return of(true);
                        })));
                    }
                }
                else {
                    return of(true);
                }
            }
            // 保存至数据库
            return this._saveUserConfig(key, config ? _config : '');
        }
        return of(true);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    DatagridSettingsService.prototype.getUserConfig = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this.httpRestService) {
            return this._getUserConfig(key);
        }
        else {
            /** @type {?} */
            var config = localStorage.getItem(key);
            if (config) {
                /** @type {?} */
                var con = JSON.parse(config);
                if (con[this.localeSer.localeId]) {
                    return of(con[this.localeSer.localeId]);
                }
                else {
                    if (Object.keys(con).indexOf('viewColumns') > -1) {
                        return of(con);
                    }
                    return null;
                }
            }
            else {
                return of(null);
            }
        }
    };
    /**
     * @private
     * @param {?} schemeList
     * @return {?}
     */
    DatagridSettingsService.prototype.getDefaultScheme = /**
     * @private
     * @param {?} schemeList
     * @return {?}
     */
    function (schemeList) {
        // 1、有个人默认的返回个人默认方案
        // 2、没有个人默认方案的，返回公共方案第1个
        // 3、没有公共方案，返回组织方案第1个
        // 4、没有组织方案的, 返回个人方案第1个
        // 5、没有个人方案的，返回系统预制，即表单设计时的格式
        // 1、有个人默认的返回个人默认方案
        // 2、没有个人默认方案的，返回公共方案第1个
        // 3、没有公共方案，返回组织方案第1个
        // 4、没有组织方案的, 返回个人方案第1个
        // 5、没有个人方案的，返回系统预制，即表单设计时的格式
        /** @type {?} */
        var defaultScheme = null;
        if (!schemeList || !schemeList.length) {
            return defaultScheme;
        }
        else {
            defaultScheme = schemeList.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.isDefault; }));
            if (!defaultScheme) {
                /** @type {?} */
                var publicSchemes = schemeList.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.type === 'public'; }));
                if (!publicSchemes.length) {
                    publicSchemes = schemeList.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.type === 'org'; }));
                }
                if (publicSchemes.length) {
                    defaultScheme = publicSchemes[0];
                }
                else {
                    defaultScheme = schemeList[0];
                }
            }
        }
        return defaultScheme;
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.getSettings = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        var _this = this;
        /** @type {?} */
        var key = this.createConfigKey(gridId);
        /** @type {?} */
        var gridIns = this.getGridInstance(gridId);
        /** @type {?} */
        var schemeList$ = of([]);
        if (gridIns && gridIns.enableScheme) {
            schemeList$ = this.getSchemeList(gridId);
        }
        return forkJoin(schemeList$, this.getUserConfig(key), this.schemeService.getLanguages()).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 3), schemeList = _b[0], userSetting = _b[1], supportedLanguages = _b[2];
            schemeList = schemeList || [];
            _this.languages = supportedLanguages;
            if (!schemeList.length) {
                return userSetting;
            }
            else {
                // 缓存方案列表
                _this.setSchemeList(schemeList, gridId);
                // 查找默认方案
                /** @type {?} */
                var defaultScheme = _this.getDefaultScheme(schemeList);
                if (!defaultScheme) {
                    return userSetting;
                }
                else {
                    _this.setActiveSchemeItem(gridId, defaultScheme);
                    /** @type {?} */
                    var userSettings = JSON.parse(defaultScheme.queryConditionString);
                    if (userSettings) {
                        /** @type {?} */
                        var localeId = _this.localeSer.localeId;
                        if (userSettings[localeId]) {
                            localStorage.setItem(key, JSON.stringify(userSettings));
                            return userSettings[localeId];
                        }
                        else {
                            userSettings[localeId] = null;
                            localStorage.setItem(key, JSON.stringify(userSettings));
                            return null;
                        }
                    }
                    else {
                        return null;
                    }
                }
            }
        })));
    };
    /**
     * @private
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    DatagridSettingsService.prototype._saveUserConfig = /**
     * @private
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    function (key, config) {
        try {
            /** @type {?} */
            var userConfigSetting = {
                configkey1: key,
                configkey2: '',
                configkey3: '',
                textvalue: config ? JSON.stringify(config) : ''
            };
            return this.httpRestService.saveUserSettings(userConfigSetting);
        }
        catch (e) {
            console.error(e);
        }
    };
    /**
     * @param {?} gridInstance
     * @param {?} modalRef
     * @return {?}
     */
    DatagridSettingsService.prototype.resetUserConfig = /**
     * @param {?} gridInstance
     * @param {?} modalRef
     * @return {?}
     */
    function (gridInstance, modalRef) {
        var _this = this;
        /** @type {?} */
        var restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t) {
                return _this.setUserConfig(gridInstance.id, '');
            }
            return of(t);
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t) {
                _this.resetGridView(gridInstance);
                modalRef.close();
            }
        }));
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    DatagridSettingsService.prototype._getUserConfig = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        try {
            return this.httpRestService.getUserSettings(key).pipe(map((/**
             * @param {?} ucs
             * @return {?}
             */
            function (ucs) {
                if (ucs && ucs.textValue) {
                    /** @type {?} */
                    var c = JSON.parse(ucs.textValue);
                    if (c) {
                        if (c[_this.localeSer.localeId]) {
                            localStorage.setItem(key, ucs.textValue);
                            return c[_this.localeSer.localeId];
                        }
                        else {
                            c[_this.localeSer.localeId] = null;
                            localStorage.setItem(key, JSON.stringify(c));
                            // if (Object.keys(c).indexOf('viewColumns') > -1) {
                            //     return c;
                            // }
                            return null;
                        }
                    }
                    return null;
                }
                return null;
            })));
        }
        catch (e) {
            console.error(e);
        }
    };
    /**
     * @private
     * @param {?} gridId
     * @param {?=} settings
     * @return {?}
     */
    DatagridSettingsService.prototype.buildSubmitData = /**
     * @private
     * @param {?} gridId
     * @param {?=} settings
     * @return {?}
     */
    function (gridId, settings) {
        if (settings === void 0) { settings = null; }
        /** @type {?} */
        var LOCALEID = this.localeSer.localeId;
        if (!settings) {
            settings = this.getCurrentUserSettings(gridId);
        }
        /** @type {?} */
        var localeKey = this.createConfigKey(gridId);
        /** @type {?} */
        var currentConfig = localStorage.getItem(localeKey);
        /** @type {?} */
        var _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
        if (_config) {
            _config[LOCALEID] = settings;
        }
        return _config;
    };
    // ----------------------------------------------------------------------------------------------- \\
    // ----------------------------------------------------------------------------------------------- \\
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} schemeList
     * @param {?=} canDel
     * @return {?}
     */
    DatagridSettingsService.prototype.showSchemeListDialog = 
    // ----------------------------------------------------------------------------------------------- \\
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} schemeList
     * @param {?=} canDel
     * @return {?}
     */
    function (gridInstance, schemeList, canDel) {
        var _this = this;
        if (canDel === void 0) { canDel = true; }
        /** @type {?} */
        var modalOpts = {
            width: 760, height: 577, showHeader: false, title: '控制面板',
            initialState: {
                items: schemeList || [],
                removeItem: canDel
            },
            showButtons: false
        };
        /** @type {?} */
        var schemeListDlg = this.modalSer.show(SchemeListComponent, modalOpts);
        /** @type {?} */
        var instance = (/** @type {?} */ (schemeListDlg.content));
        instance.closeModal.subscribe((/**
         * @return {?}
         */
        function () {
            schemeListDlg.close();
        }));
        instance.submitModal.subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            _this.schemeService.updateScheme(t, gridInstance.id).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e === false) {
                    schemeListDlg.close();
                    return;
                }
                /** @type {?} */
                var msg = '列设置方案保存成功。';
                if (_this.notifyService) {
                    _this.notifyService.success(msg);
                }
                else {
                    _this.messager.success(msg);
                }
                /** @type {?} */
                var schemeList = _this.schemeService.getStateValue(gridInstance.id, 'list');
                if (t.defaultId) {
                    schemeList.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        n.isDefault = false;
                        if (n.id === t.defaultId) {
                            n.isDefault = true;
                            // this.setActiveSchemeItem(gridInstance.id, n);
                        }
                    }));
                }
                /** @type {?} */
                var newSchemeList = schemeList;
                if (t.deletedIds && t.deletedIds.length) {
                    newSchemeList = schemeList.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return !t.deletedIds.includes(n.id);
                    }));
                }
                _this.schemeService.setSchemeList(gridInstance.id, newSchemeList);
                schemeListDlg.close();
            }));
        }));
        /** @type {?} */
        var modalContainer = (/** @type {?} */ (schemeListDlg.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
    };
    // 新增或另存方案
    // 新增或另存方案
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} simpleRef
     * @return {?}
     */
    DatagridSettingsService.prototype.showNewSchemeDialog = 
    // 新增或另存方案
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} simpleRef
     * @return {?}
     */
    function (gridInstance, simpleRef) {
        var _this = this;
        /** @type {?} */
        var modalOpts = {
            width: 480, height: 269, showHeader: false, title: '控制面板',
            initialState: {
                languages: this.languages
            },
            showButtons: false,
            resizable: false
        };
        /** @type {?} */
        var newSchemeDlg = this.modalSer.show(NewSchemeComponent, modalOpts);
        /** @type {?} */
        var instance = (/** @type {?} */ (newSchemeDlg.content));
        instance.closeModal.subscribe((/**
         * @return {?}
         */
        function () {
            newSchemeDlg.close();
        }));
        instance.submitModal.pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            return _this.createNewScheme(gridInstance.id, t);
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t.flag === false) {
                /** @type {?} */
                var msg = t.msg || '请输入方案名称';
                if (_this.notifyService) {
                    _this.notifyService.info(msg);
                }
                else {
                    _this.messager.info(msg);
                }
                return;
            }
            // 更新方案列表
            /** @type {?} */
            var schemeList = _this.schemeService.getStateValue(gridInstance.id, 'list') || [];
            if (t.isDefault) {
                schemeList.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    n.isDefault = false;
                }));
            }
            schemeList.push(t);
            _this.setActiveSchemeItem(gridInstance.id, t);
            _this.schemeService.setSchemeList(gridInstance.id, schemeList);
            newSchemeDlg.close();
        }));
        instance.checkAuthority.pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            return _this.schemeService.checkAuthority().pipe(map((/**
             * @param {?} auth
             * @return {?}
             */
            function (auth) {
                return tslib_1.__assign({ type: t }, auth);
            })));
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            /** @type {?} */
            var hasAuthority = { public: true, org: true };
            /** @type {?} */
            var msg = '您没有将方案的使用范围设置为公共的权限。';
            if (t.type.value === 'org') {
                msg = '您没有将方案的使用范围设置为组织的权限。';
            }
            if (t.success) {
                /** @type {?} */
                var hasPublicAuthority = t.authOperationData && t.authOperationData.length;
                hasAuthority.public = hasPublicAuthority;
                /** @type {?} */
                var hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;
                hasAuthority.org = hasOrgAuthority;
                if (t.type.value === 'public') {
                    instance.schemeInfo.type = t.type.value;
                }
                else if (t.type.value === 'org') {
                    if (!hasOrgAuthority) {
                        _this.notifyService.warning(msg);
                    }
                    else {
                        instance.schemeInfo.type = t.type.value;
                        instance.schemeInfo.orgids = t.authOrganizationData.join(',');
                        instance.dataPermissionIds = t.authOrganizationData;
                    }
                }
            }
            else {
                _this.notifyService.warning(msg);
                hasAuthority = { public: false, org: false };
                ;
            }
            instance.refresh(hasAuthority);
        }));
        /** @type {?} */
        var modalContainer = (/** @type {?} */ (newSchemeDlg.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.getSchemeList = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        return this.schemeService.getSchemeList(gridId);
    };
    /**
     * @param {?} gridId
     * @param {?} data
     * @return {?}
     */
    DatagridSettingsService.prototype.createNewScheme = /**
     * @param {?} gridId
     * @param {?} data
     * @return {?}
     */
    function (gridId, data) {
        if (!data.name) {
            return of({ flag: false, msg: '请输入方案名称' });
        }
        else {
            /** @type {?} */
            var hasName = this.schemeService.hasSchemeName(gridId, data.name);
            if (typeof hasName === 'boolean' && hasName) {
                return of({ flag: false, msg: '方案名称已存在，请修改。' });
            }
            else if (Array.isArray(hasName) && hasName.length) {
                /** @type {?} */
                var msgs = hasName.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    if (n === 'zh-CHS') {
                        return '简体中文名称已存在。';
                    }
                    else if (n === 'zh-CHT') {
                        return '繁体中文名称已存在。';
                    }
                    else {
                        return '英文名称已存在。';
                    }
                }));
                return of({ flag: false, msg: msgs.join('') });
            }
        }
        /** @type {?} */
        var requiredName = [];
        this.languages.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (data.name[n.code] === '' || data.name[n.code] === undefined) {
                requiredName.push(n.code);
            }
        }));
        if (requiredName.length) {
            /** @type {?} */
            var msgs = requiredName.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                if (n === 'zh-CHS') {
                    return '请输入简体中文名称。';
                }
                else if (n === 'zh-CHT') {
                    return '请输入繁体中文名称。';
                }
                else {
                    return '请输入英文名称。';
                }
            }));
            return of({ flag: false, msg: msgs.join('') });
        }
        if (data.type && data.type === 'org' && (!data.orgids || !data.orgids.length)) {
            return of({ flag: false, msg: '请选择组织' });
        }
        /** @type {?} */
        var _config = null;
        /** @type {?} */
        var selectedSettings = this.getCurrentSchemeSettings(gridId);
        if (selectedSettings) {
            _config = selectedSettings;
        }
        else {
            // 收集当前方案配置数据
            _config = this.buildSubmitData(gridId);
        }
        /** @type {?} */
        var newId = this.idService.guid();
        /** @type {?} */
        var isDefault = data.isDefault;
        if (isDefault) {
            if (data.type !== 'private') {
                isDefault = false;
            }
        }
        if (data.name && typeof data.name === 'object') {
            data.name = JSON.stringify(data.name);
        }
        /** @type {?} */
        var scheme = {
            id: newId,
            belongId: '',
            code: '',
            name: data.name,
            type: data.type,
            isDefault: isDefault,
            isSystem: false,
            extendId: 'datagrid-settings-scheme',
            extendInfo: this.buildOrgAndSchemeRelations(newId, data.orgids),
            queryConditionString: _config ? JSON.stringify(_config) : '',
        };
        return this.schemeService.saveScheme(scheme, gridId).pipe(map((/**
         * @return {?}
         */
        function () {
            return scheme;
        })));
    };
    /**
     * @param {?} schemeList
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.setSchemeList = /**
     * @param {?} schemeList
     * @param {?} gridId
     * @return {?}
     */
    function (schemeList, gridId) {
        this.schemeService.update({ list: schemeList }, gridId);
    };
    /**
     * @private
     * @param {?} schemeId
     * @param {?} orgIds
     * @return {?}
     */
    DatagridSettingsService.prototype.buildOrgAndSchemeRelations = /**
     * @private
     * @param {?} schemeId
     * @param {?} orgIds
     * @return {?}
     */
    function (schemeId, orgIds) {
        var _this = this;
        if (!orgIds || !orgIds.length) {
            return [];
        }
        return orgIds.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return {
                id: _this.idService.guid(),
                orgId: n,
                relatedId: schemeId
            };
        }));
    };
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    DatagridSettingsService.prototype.getCurrentSchemeSettings = /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var activeScheme = (/** @type {?} */ (this.getActiveSchemeItem(gridId)));
        if (activeScheme && activeScheme.queryConditionString) {
            return JSON.parse(activeScheme.queryConditionString);
        }
        return null;
    };
    DatagridSettingsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DatagridSettingsService.ctorParameters = function () { return [
        { type: Injector },
        { type: BsModalService },
        { type: MessagerService },
        { type: IdService },
        { type: LocaleService }
    ]; };
    return DatagridSettingsService;
}());
export { DatagridSettingsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.multiSortMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.columnsSortableMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.notSupportHeaderGroupMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.notShowDialog;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype._httpRestService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.languages;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.gridRefs;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.activeSchemeItem;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.saving;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.app;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.schemeListSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.schemeService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.modalSer;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.idService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.localeSer;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,