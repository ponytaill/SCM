/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
/**
 * @record
 */
export function OverLayOption() { }
if (false) {
    /**
     * 仅监听top Window 中的事件
     * @type {?|undefined}
     */
    OverLayOption.prototype.onlyTopWindow;
    /**
     * 仅处理滚轮滚动事件
     * @type {?|undefined}
     */
    OverLayOption.prototype.mouseWheel;
    /** @type {?|undefined} */
    OverLayOption.prototype.mouseDown;
}
/** @type {?} */
const OverLayOptionDefaults = {
    onlyTopWindow: false,
    mouseWheel: true,
    mouseDown: true
};
export class OverLayHiddenService {
    constructor() {
        this.eventsMap = new WeakMap();
    }
    /**
     * @private
     * @param {?} el
     * @param {?} action
     * @return {?}
     */
    iframeEventHandle(el, action) {
        /** @type {?} */
        const iframes = Array.from(document.querySelectorAll('iframe'));
        if (iframes && iframes.length) {
            /** @type {?} */
            let _documentClickEvent = this.eventsMap.get(el);
            for (const iframe of iframes) {
                /** @type {?} */
                const iframeDoc = iframe.contentDocument;
                if (iframeDoc) {
                    iframeDoc[action]('mousedown', _documentClickEvent);
                    iframeDoc[action]('mousewheel', _documentClickEvent);
                    iframeDoc[action]('DOMMouseScroll', _documentClickEvent);
                }
            }
        }
    }
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    removeMouseEvent(el) {
        /** @type {?} */
        let _documentClickEvent = this.eventsMap.get(el);
        if (_documentClickEvent) {
            document.removeEventListener('mousedown', _documentClickEvent, true);
            document.removeEventListener('mousewheel', _documentClickEvent, true);
            document.removeEventListener('DOMMouseScroll', _documentClickEvent, true);
            if (top !== window) {
                top.document.body.removeEventListener('mousedown', _documentClickEvent, true);
            }
            this.iframeEventHandle(el, 'removeEventListener');
            _documentClickEvent = null;
            this.eventsMap.delete(el);
        }
    }
    /**
     * @param {?} el
     * @return {?}
     */
    destory(el) {
        this.removeMouseEvent(el);
    }
    /**
     * @param {?} el
     * @param {?} _documentClickEvent
     * @param {?=} options
     * @return {?}
     */
    registerMouseEvent(el, _documentClickEvent, options) {
        if (this.eventsMap.has(el)) {
            return;
        }
        else {
            this.eventsMap.set(el, _documentClickEvent);
        }
        if (!options) {
            options = OverLayOptionDefaults;
        }
        else {
            options = Object.assign({}, OverLayOptionDefaults, options);
        }
        if (options.onlyTopWindow && top !== window) {
            top.document.body.addEventListener('mousedown', _documentClickEvent, true);
        }
        else {
            if (options.mouseDown) {
                // 注册 mousedown 事件 隐藏panel
                document.addEventListener('mousedown', _documentClickEvent, true);
            }
            if (options.mouseWheel) {
                document.addEventListener('mousewheel', _documentClickEvent, true);
                document.addEventListener('DOMMouseScroll', _documentClickEvent, true);
            }
            if (top !== window) {
                top.document.body.addEventListener('mousedown', _documentClickEvent, true);
            }
            this.iframeEventHandle(el, 'addEventListener');
        }
    }
}
OverLayHiddenService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    OverLayHiddenService.prototype.eventsMap;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS1oaWRkZW4uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2Uvb3ZlcmxheS1oaWRkZW4uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUczQyxtQ0FNQzs7Ozs7O0lBSkcsc0NBQXdCOzs7OztJQUV4QixtQ0FBcUI7O0lBQ3JCLGtDQUFvQjs7O01BR2xCLHFCQUFxQixHQUFrQjtJQUN6QyxhQUFhLEVBQUUsS0FBSztJQUNwQixVQUFVLEVBQUUsSUFBSTtJQUNoQixTQUFTLEVBQUUsSUFBSTtDQUNsQjtBQUVELE1BQU0sT0FBTyxvQkFBb0I7SUFEakM7UUFHWSxjQUFTLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQTJFdEMsQ0FBQzs7Ozs7OztJQXpFVyxpQkFBaUIsQ0FBQyxFQUFPLEVBQUUsTUFBa0Q7O2NBQzNFLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvRCxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFOztnQkFDdkIsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ2hELEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFOztzQkFDcEIsU0FBUyxHQUFHLE1BQU0sQ0FBQyxlQUFlO2dCQUN4QyxJQUFJLFNBQVMsRUFBRTtvQkFDWCxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLG1CQUFtQixDQUFDLENBQUM7b0JBQ3BELFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztvQkFDckQsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGdCQUFnQixFQUFFLG1CQUFtQixDQUFDLENBQUM7aUJBQzVEO2FBQ0o7U0FDSjtJQUNMLENBQUM7Ozs7OztJQUVPLGdCQUFnQixDQUFDLEVBQVc7O1lBQzVCLG1CQUFtQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNoRCxJQUFJLG1CQUFtQixFQUFFO1lBQ3JCLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDckUsUUFBUSxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN0RSxRQUFRLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFFMUUsSUFBSSxHQUFHLEtBQUssTUFBTSxFQUFFO2dCQUNoQixHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDakY7WUFFRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLHFCQUFxQixDQUFDLENBQUM7WUFDbEQsbUJBQW1CLEdBQUcsSUFBSSxDQUFDO1lBRTNCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzdCO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxPQUFPLENBQUMsRUFBRTtRQUNOLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7Ozs7O0lBRUQsa0JBQWtCLENBQUMsRUFBTyxFQUFFLG1CQUFnQyxFQUFFLE9BQXVCO1FBRWpGLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDeEIsT0FBTztTQUNWO2FBQU07WUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztTQUUvQztRQUVELElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDVixPQUFPLEdBQUcscUJBQXFCLENBQUM7U0FDbkM7YUFBTTtZQUNILE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFFLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUNoRTtRQUdELElBQUksT0FBTyxDQUFDLGFBQWEsSUFBSSxHQUFHLEtBQUssTUFBTSxFQUFFO1lBQ3pDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUM5RTthQUFNO1lBQ0gsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO2dCQUNuQiwwQkFBMEI7Z0JBQzFCLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDckU7WUFFRCxJQUFJLE9BQU8sQ0FBQyxVQUFVLEVBQUU7Z0JBQ3BCLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ25FLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUMxRTtZQUVELElBQUksR0FBRyxLQUFLLE1BQU0sRUFBRTtnQkFDaEIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLG1CQUFtQixFQUFFLElBQUksQ0FBQyxDQUFDO2FBQzlFO1lBRUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1NBQ2xEO0lBQ0wsQ0FBQzs7O1lBN0VKLFVBQVU7Ozs7Ozs7SUFHUCx5Q0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE92ZXJMYXlPcHRpb24ge1xyXG4gICAgLyoqIOS7heebkeWQrHRvcCBXaW5kb3cg5Lit55qE5LqL5Lu2ICovXHJcbiAgICBvbmx5VG9wV2luZG93PzogYm9vbGVhbjtcclxuICAgIC8qKiDku4XlpITnkIbmu5rova7mu5rliqjkuovku7YgKi9cclxuICAgIG1vdXNlV2hlZWw/OiBib29sZWFuO1xyXG4gICAgbW91c2VEb3duPzogYm9vbGVhbjtcclxufVxyXG5cclxuY29uc3QgT3ZlckxheU9wdGlvbkRlZmF1bHRzOiBPdmVyTGF5T3B0aW9uID0ge1xyXG4gICAgb25seVRvcFdpbmRvdzogZmFsc2UsXHJcbiAgICBtb3VzZVdoZWVsOiB0cnVlLFxyXG4gICAgbW91c2VEb3duOiB0cnVlXHJcbn1cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgT3ZlckxheUhpZGRlblNlcnZpY2Uge1xyXG4gICAgXHJcbiAgICBwcml2YXRlIGV2ZW50c01hcCA9IG5ldyBXZWFrTWFwKCk7XHJcblxyXG4gICAgcHJpdmF0ZSBpZnJhbWVFdmVudEhhbmRsZShlbDogYW55LCBhY3Rpb246ICdhZGRFdmVudExpc3RlbmVyJyB8ICdyZW1vdmVFdmVudExpc3RlbmVyJykge1xyXG4gICAgICAgIGNvbnN0IGlmcmFtZXMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lmcmFtZScpKTtcclxuICAgICAgICBpZiAoaWZyYW1lcyAmJiBpZnJhbWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsZXQgX2RvY3VtZW50Q2xpY2tFdmVudCA9IHRoaXMuZXZlbnRzTWFwLmdldChlbCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaWZyYW1lIG9mIGlmcmFtZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlmcmFtZURvYyA9IGlmcmFtZS5jb250ZW50RG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWZyYW1lRG9jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWZyYW1lRG9jW2FjdGlvbl0oJ21vdXNlZG93bicsIF9kb2N1bWVudENsaWNrRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmcmFtZURvY1thY3Rpb25dKCdtb3VzZXdoZWVsJywgX2RvY3VtZW50Q2xpY2tFdmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWZyYW1lRG9jW2FjdGlvbl0oJ0RPTU1vdXNlU2Nyb2xsJywgX2RvY3VtZW50Q2xpY2tFdmVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZW1vdmVNb3VzZUV2ZW50KGVsOiBFbGVtZW50KSB7XHJcbiAgICAgICAgbGV0IF9kb2N1bWVudENsaWNrRXZlbnQgPSB0aGlzLmV2ZW50c01hcC5nZXQoZWwpXHJcbiAgICAgICAgaWYgKF9kb2N1bWVudENsaWNrRXZlbnQpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgX2RvY3VtZW50Q2xpY2tFdmVudCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCBfZG9jdW1lbnRDbGlja0V2ZW50LCB0cnVlKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NTW91c2VTY3JvbGwnLCBfZG9jdW1lbnRDbGlja0V2ZW50LCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0b3AgIT09IHdpbmRvdykge1xyXG4gICAgICAgICAgICAgICAgdG9wLmRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgX2RvY3VtZW50Q2xpY2tFdmVudCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuaWZyYW1lRXZlbnRIYW5kbGUoZWwsICdyZW1vdmVFdmVudExpc3RlbmVyJyk7XHJcbiAgICAgICAgICAgIF9kb2N1bWVudENsaWNrRXZlbnQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5ldmVudHNNYXAuZGVsZXRlKGVsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdG9yeShlbCkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlTW91c2VFdmVudChlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVnaXN0ZXJNb3VzZUV2ZW50KGVsOiBhbnksIF9kb2N1bWVudENsaWNrRXZlbnQ6IChlKSA9PiB2b2lkLCBvcHRpb25zPzogT3ZlckxheU9wdGlvbikge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0aGlzLmV2ZW50c01hcC5oYXMoZWwpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50c01hcC5zZXQoZWwsIF9kb2N1bWVudENsaWNrRXZlbnQpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghb3B0aW9ucykge1xyXG4gICAgICAgICAgICBvcHRpb25zID0gT3ZlckxheU9wdGlvbkRlZmF1bHRzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKCB7fSwgT3ZlckxheU9wdGlvbkRlZmF1bHRzLCBvcHRpb25zKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5vbmx5VG9wV2luZG93ICYmIHRvcCAhPT0gd2luZG93KSB7XHJcbiAgICAgICAgICAgIHRvcC5kb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIF9kb2N1bWVudENsaWNrRXZlbnQsIHRydWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLm1vdXNlRG93bikge1xyXG4gICAgICAgICAgICAgICAgLy8g5rOo5YaMIG1vdXNlZG93biDkuovku7Yg6ZqQ6JePcGFuZWxcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIF9kb2N1bWVudENsaWNrRXZlbnQsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5tb3VzZVdoZWVsKSB7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXdoZWVsJywgX2RvY3VtZW50Q2xpY2tFdmVudCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Nb3VzZVNjcm9sbCcsIF9kb2N1bWVudENsaWNrRXZlbnQsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodG9wICE9PSB3aW5kb3cpIHtcclxuICAgICAgICAgICAgICAgIHRvcC5kb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIF9kb2N1bWVudENsaWNrRXZlbnQsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmlmcmFtZUV2ZW50SGFuZGxlKGVsLCAnYWRkRXZlbnRMaXN0ZW5lcicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==