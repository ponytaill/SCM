import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { ViewModel, Repository, Entity, AppContext, EntityList } from '@farris/devkit';
import { from, EMPTY, concat, of, Subject } from 'rxjs';
import { concatMap, catchError, tap, switchMap, last, map, delay } from 'rxjs/operators';
import { BatchEditDialogService } from '@farris/ui-batch-edit-dialog';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { ComponentManagerService } from './component-manager.service';
import { FormLoadingService } from './form-loading/form-loading.service';
import { LanguageService } from './languag.service';
import { FormNotifyService } from './form-notify.service';
// tslint:disable: max-line-length
/**
 * 批量编辑服务
 */
var BatchEditService = /** @class */ (function () {
    function BatchEditService(injector, componentManagerService, viewModel, repository, batchEditDialogService, dateService, languageService, formNotifyService) {
        var _this = this;
        this.injector = injector;
        this.componentManagerService = componentManagerService;
        this.viewModel = viewModel;
        this.repository = repository;
        this.batchEditDialogService = batchEditDialogService;
        this.dateService = dateService;
        this.languageService = languageService;
        this.formNotifyService = formNotifyService;
        this.formLoadingService = this.injector.get(FormLoadingService, null);
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
        if (!this.formNotifyService) {
            this.formNotifyService = this.injector.get(FormNotifyService, null);
        }
        this.onHelpClose = new Subject();
        this.onHelpClose.subscribe(function (result) {
            var _a = result || {}, _b = _a.frameId, frameId = _b === void 0 ? '' : _b, _c = _a.mapFields, mapFields = _c === void 0 ? '' : _c, _d = _a.data, data = _d === void 0 ? [] : _d;
            _this.onHelpCloseHandler(frameId, mapFields, data);
        });
    }
    /**
     * 打开批量编辑对话框
     * @param frameId frameId
     */
    BatchEditService.prototype.openBatchEditDialog = function (frameId) {
        var _this = this;
        if (!frameId) {
            throw new Error('frameId is required.');
        }
        if (this.batchEditDialogService) {
            var columns = [];
            if (this.viewModel) {
                var gridFrameContext = this.viewModel.frameContext.root.appContext.frameContextManager.getFrameContextById(frameId);
                var gridViewModel = gridFrameContext.viewModel;
                if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumnsName')) {
                    // tslint:disable-next-line: no-string-literal
                    var gridColumnsAttrName = gridViewModel['dataGridColumnsName'];
                    columns = gridViewModel[gridColumnsAttrName];
                }
                else if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumns')) {
                    columns = gridViewModel['dataGridColumns'];
                }
                var ids_1 = gridViewModel.uiState['ids'] || [];
                if (!ids_1 || ids_1.length < 1) {
                    this.formNotifyService.warning(this.languageService.plsCheckBatchEditRows, { hideTitle: true });
                    return EMPTY;
                }
                var dialogRef_1 = this.batchEditDialogService.batchEdit(columns, {
                    rows: ids_1.length,
                    onConfirm: function (inputs) {
                        if (Array.isArray(ids_1) && ids_1.length > 0) {
                            // console.log('openBatchEditDialog', inputs);
                            var appContext = _this.viewModel.frameContext.appContext;
                            appContext.changeDetectionController.detach();
                            inputs.forEach(function (input) {
                                _this.updateBindingData(input, ids_1);
                            });
                            appContext.changeDetectionController.reattach();
                        }
                        dialogRef_1.close();
                    }
                });
            }
        }
    };
    /**
     * 打开隐藏帮助
     * @param helpId 帮助id
     */
    BatchEditService.prototype.openHiddenHelp = function (helpId) {
        if (!helpId) {
            throw new Error('Argument error,helpId can`t be empty');
        }
        var componentManagerService = this.componentManagerService.getControl(helpId);
        if (componentManagerService) {
            componentManagerService.showDialog();
        }
        else {
            throw new Error("the component which id is " + helpId + " can't be found!");
        }
    };
    /**
     * 清空帮助勾选（只能挂载到帮助前事件）
     */
    BatchEditService.prototype.clearHelpSelections = function () {
        var self = this;
        var helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;
        if (helpElement) {
            helpElement.displayValue = '';
        }
    };
    /**
     * 勾选当前行
     * @param frameId frameId
     * @param mapFields 字段映射
     * @param primaryKeyValue 帮助主键字段
     */
    BatchEditService.prototype.checkCurrentRow = function (frameId, mapFields, primaryKeyValue) {
        var self = this;
        var helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;
        if (!primaryKeyValue) {
            primaryKeyValue = 'id';
        }
        var mappings = JSON.parse(mapFields);
        if (helpElement) {
            frameId = frameId || this.viewModel.frameContext.frameId;
            if (frameId) {
                var frameContext = this.getFrameContextById(frameId);
                if (frameContext) {
                    var bindingPath = frameContext.viewModel.bindingPath;
                    if (bindingPath) {
                        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                        var bindingList = frameContext.bindingData.getValue(bindingPaths);
                        var currentRow = bindingList.currentItem;
                        var path = mappings[primaryKeyValue];
                        if (path) {
                            var value = this.getValueByPath(currentRow, path);
                            helpElement.displayValue = value;
                        }
                    }
                }
            }
        }
    };
    /**
     * 以帮助勾选数据作为依据，批量新增主表数据
     * @param frameId 主表所在frame的id
     * @param mapFields 帮助字段与主表字段映射
     * @description 以帮助勾选数据作为依据，批量新增主表数据
     */
    BatchEditService.prototype.batchAppend = function (frameId, mapFields) {
        var _this = this;
        var self = this;
        var result = self.context && self.context.eventParam || [];
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        if (result && Array.isArray(result) && result.length > 0) {
            var mappings_1 = JSON.parse(mapFields);
            // 不是bindingPath则按frameId处理
            var bindingPath = '/';
            var appContext = this.injector.get(AppContext, null);
            if (appContext) {
                var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                if (frameContext) {
                    bindingPath = frameContext.viewModel.bindingPath || '/';
                }
                else {
                    throw new Error('frameId is invalid!');
                }
            }
            var defaultValues_1 = [];
            result.forEach(function (item) {
                var defaultValue = {};
                Object.keys(mappings_1).forEach(function (prop) {
                    var value = _this.getValueByPath(item, prop);
                    var fields = mappings_1[prop];
                    var groups = fields.split(',').filter(function (p) { return p; });
                    groups.forEach(function (group) {
                        var paths = group.split('.').filter(function (p) { return p; });
                        _this.setValueByPath(defaultValue, paths.join('.'), value);
                    });
                });
                defaultValues_1.push(defaultValue);
            });
            this.formLoadingService.show();
            return this.repository.batchAppend(defaultValues_1).pipe(tap(function () { return _this.formLoadingService.hide(); }), map(function () { return true; }));
        }
        return of(true);
    };
    /**
     * 以帮助勾选数据作为依据，批量新增从表/从从表
     * @param frameId 从表/从从表所在frame的id
     * @param mapFields 帮助字段与从表/从从表字段映射
     * @description 以帮助勾选数据作为依据，批量新增从表/从从表
     */
    BatchEditService.prototype.batchAppendByPathBasedOnHelpSelections = function (frameId, mapFields) {
        var _this = this;
        var self = this;
        var result = self.context && self.context.eventParam || [];
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        if (result && Array.isArray(result) && result.length > 0) {
            var mappings_2 = JSON.parse(mapFields);
            // 不是bindingPath则按frameId处理
            var bindingPath = '/';
            var appContext = this.injector.get(AppContext, null);
            if (appContext) {
                var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
                if (frameContext) {
                    bindingPath = frameContext.viewModel.bindingPath || '/';
                }
                else {
                    throw new Error('frameId is invalid!');
                }
            }
            var defaultValues_2 = [];
            result.forEach(function (item) {
                var defaultValue = {};
                Object.keys(mappings_2).forEach(function (prop) {
                    var value = _this.getValueByPath(item, prop);
                    var fields = mappings_2[prop];
                    var groups = fields.split(',').filter(function (p) { return p; });
                    groups.forEach(function (group) {
                        var paths = group.split('.').filter(function (p) { return p; });
                        _this.setValueByPath(defaultValue, paths.join('.'), value);
                    });
                });
                defaultValues_2.push(defaultValue);
            });
            this.formLoadingService.show();
            var path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);
            return this.repository.batchAppendByPath(path, defaultValues_2).pipe(tap(function () { return _this.formLoadingService.hide(); }), map(function () { return true; }));
        }
        return of(true);
    };
    /**
     * 行内帮助多选批量新增或替换子表数据
     * @param frameId frameId, optional,为空时使用命令执行时所在的上下文
     * @param mapFields 字段映射
     * @param primaryKey 帮助主键字段，默认为id
     * @returns
     */
    BatchEditService.prototype.batchAppendBasedOnRowHelpSelections = function (frameId, mapFields) {
        var _this = this;
        var self = this;
        var result = self.context && self.context.eventParam || [];
        if (!mapFields) {
            return of(true);
        }
        var mappings = JSON.parse(mapFields);
        if (!mappings || !mappings.hasOwnProperty('id')) {
            return of(true);
        }
        frameId = frameId || this.viewModel.frameContext.frameId;
        if (!frameId) {
            return of(true);
        }
        var frameContext = this.getFrameContextById(frameId);
        if (!frameContext) {
            return of(true);
        }
        setTimeout(function () {
            _this.endEdit(frameContext).subscribe(function () {
                setTimeout(function () {
                    if (result && Array.isArray(result) && result.length > 0) {
                        var bindingPath_1 = frameContext.viewModel.bindingPath || '/';
                        var bindingPaths_1 = bindingPath_1.split('/').filter(function (p) { return p; });
                        var defaultValues_3 = [];
                        // 获取当前行
                        var bindingList_1 = frameContext.bindingData.getValue(bindingPaths_1);
                        var currentRow = bindingList_1.currentItem;
                        var currentRowId = bindingList_1.currentId;
                        var currentEntity = _this.getEntityByPath(frameContext, bindingPaths_1, currentRowId);
                        var headItem = result[0];
                        // 如果仅勾选一条，则应替换当前行的映射
                        if (result.length === 1) {
                            _this.mappingRow(headItem, mappings, currentEntity, bindingPath_1);
                            return of(true);
                        }
                        else {
                            var idMapField = mappings['id'];
                            var sourceItemId_1 = _this.getValueByPath(currentEntity, idMapField);
                            // 如果当前行没有映射或勾选结果中找不到当前行的映射
                            if (!sourceItemId_1 || result.findIndex(function (item) { return item[bindingList_1.primaryKey] === sourceItemId_1; }) === -1) {
                                // 重新映射当前行
                                _this.mappingRow(headItem, mappings, currentEntity, bindingPath_1);
                                result = result.slice(1);
                            }
                            else if (sourceItemId_1) {
                                var index = result.findIndex(function (item) { return item[bindingList_1.primaryKey] === sourceItemId_1; });
                                // 重新映射当前行
                                _this.mappingRow(result[index], mappings, currentEntity, bindingPath_1);
                                result.splice(index, 1);
                            }
                            // 当前行处理完成
                            // 处理未映射的行
                            var emptyRows_1 = bindingList_1.toArray().filter(function (bindingObject) {
                                var id = _this.getValueByPath(bindingObject, mappings[bindingList_1.primaryKey]);
                                return !id;
                            });
                            if (emptyRows_1 && emptyRows_1.length > 0) {
                                var rows = result;
                                if (result.length > emptyRows_1.length) {
                                    rows = result.slice(0, emptyRows_1.length);
                                    result = result.slice(emptyRows_1.length);
                                }
                                else {
                                    result = [];
                                }
                                rows.forEach(function (item, index) {
                                    var targetItem = emptyRows_1[index];
                                    var entity = _this.getEntityByPath(frameContext, bindingPaths_1, targetItem.primaryKeyValue);
                                    _this.mappingRow(item, mappings, entity, bindingPath_1);
                                });
                            }
                            // 处理剩余勾选
                            result.forEach(function (item) {
                                var defaultValue = {};
                                Object.keys(mappings).forEach(function (prop) {
                                    var value = _this.getValueByPath(item, prop);
                                    var fields = mappings[prop];
                                    var groups = fields.split(',').filter(function (p) { return p; });
                                    groups.forEach(function (group) {
                                        var paths = group.split('.').filter(function (p) { return p; });
                                        _this.setValueByPath(defaultValue, paths.join('.'), value);
                                    });
                                });
                                defaultValues_3.push(defaultValue);
                            });
                            if (defaultValues_3.length > 0) {
                                _this.formLoadingService.show();
                                var path = _this.buildPath(bindingPath_1, _this.viewModel.bindingData.list.currentId);
                                _this.repository.batchAppendByPath(path, defaultValues_3).pipe(tap(function () { return _this.formLoadingService.hide(); })).subscribe();
                            }
                        }
                    }
                }, 350);
            });
        }, 50);
        return of(true);
    };
    /**
     * 复制主表数据
     * @param id 要复制的数据id
     * @param fields 要复制的字段
     * @description 仅支持复制主表数据
     * @deprecated 该方法已被废弃，请使用clone方法替代。
     */
    BatchEditService.prototype.copy = function (id) {
        var _this = this;
        if (!id) {
            this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
            return EMPTY;
        }
        var befRepository = this.repository;
        var baseUri = befRepository.restService.baseUri;
        var url = baseUri + "/service/copymainobjvoaction";
        var requestInfo = befRepository.restService.buildRequestInfo();
        var body = {
            requestInfo: requestInfo,
            dataID: id
        };
        var options = {
            body: body
        };
        this.formLoadingService.show();
        return befRepository.proxy.request(url, 'PUT', null, options).pipe(tap(function () {
            _this.formLoadingService.hide();
        }), map(function (responseInfo) {
            var returnValue = responseInfo.returnValue;
            var entity = _this.repository.buildEntity(returnValue);
            _this.repository.entityCollection.addEntity(entity);
            return entity;
        }));
    };
    /**
     * 复制数据（支持主表、从表、从从表）
     * @param id 要复制的行
     * @param path 请求路径
     * @returns
     */
    BatchEditService.prototype.clone = function (id, path) {
        var _this = this;
        if (!id) {
            this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
            return EMPTY;
        }
        if (!path) {
            this.formNotifyService.warning(this.languageService.pathIsRequired, { hideTitle: true });
            return EMPTY;
        }
        if (!path.startsWith('/')) {
            path = '/' + path;
        }
        path = path.toLowerCase();
        var bindingPath = this.viewModel.bindingPath;
        var befRepository = this.repository;
        var baseUri = befRepository.restService.baseUri;
        var url = "" + baseUri + path;
        var requestInfo = befRepository.restService.buildRequestInfo();
        var ids = this.buildIds(bindingPath);
        ids.push(id);
        var body = {
            requestInfo: requestInfo,
            dataID: ids.join(',')
        };
        var options = {
            body: body
        };
        this.formLoadingService.show();
        return befRepository.proxy.request(url, 'PUT', null, options).pipe(tap(function () {
            _this.formLoadingService.hide();
        }), map(function (responseInfo) {
            var returnValue = responseInfo.returnValue;
            var entity = null;
            if (bindingPath.split('/').filter(function (p) { return p; }).length === 0) {
                entity = _this.repository.buildEntity(returnValue);
                _this.repository.entityCollection.addEntity(entity, true);
            }
            else {
                var fpath = _this.buildPath(bindingPath, _this.viewModel.bindingData.list.currentId);
                entity = befRepository.entityManager.appendEntityByPath(fpath, returnValue, returnValue, true);
            }
            return entity;
        }));
    };
    //#region 旧的实现
    /**
     * 复制行
     * @param frameId frameId
     * @param ignoreFields 复制时忽略字段
     * @param repeat 重复复制次数，默认为1
     */
    BatchEditService.prototype.copyRow = function (frameId, ignoreFields, repeat) {
        var _this = this;
        if (repeat === void 0) { repeat = 1; }
        if (typeof repeat !== 'number') {
            repeat = parseInt(repeat, 10);
        }
        if (repeat < 1) {
            throw new Error('ArgumentError: repeat must >= 1');
        }
        // 获取当前行
        var frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        var primaryValue = frameContext.bindingData.list.currentId;
        var bindingPath = frameContext.viewModel.bindingPath || '/';
        var bindingData = null;
        var currentItem = null;
        if (bindingPath === '/') {
            // 主表直接取当前行
            currentItem = frameContext.bindingData.list.currentItem;
        }
        else {
            // 取从表/从从表当前行
            var paths = bindingPath.split('/').filter(function (p) { return p; });
            currentItem = frameContext.bindingData.getValue(paths).currentItem;
        }
        bindingData = currentItem.toJSON();
        if (!currentItem.primaryKeyValue) {
            if (this.formNotifyService) {
                this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });
            }
            return EMPTY;
        }
        var ignoreFieldsArray = ignoreFields.split(',').filter(function (item) { return item; });
        var sources = new Array(repeat);
        return from(sources).pipe(concatMap(function () {
            var action$ = null;
            if (bindingPath !== '/') {
                var fullPath = _this.buildPath(bindingPath, primaryValue);
                action$ = _this.repository.appendByPath(fullPath);
            }
            else {
                action$ = _this.repository.append();
            }
            return action$.pipe(tap(function (entity) {
                // 修正实体主键
                bindingData[entity.primaryKey] = entity.primaryValue;
                // 忽略指定字段
                ignoreFieldsArray.forEach(function (field) {
                    var extractedFields = field.split('.').filter(function (item) { return item; });
                    if (extractedFields.length === 1) {
                        delete bindingData[field];
                    }
                    var parent = extractedFields.slice(0, -1).reduce(function (prev, current, index) {
                        return prev[current];
                    }, bindingData);
                    delete parent[extractedFields[extractedFields.length - 1]];
                });
                bindingData = Object.assign({}, entity.toJSON(), bindingData);
                entity.load(bindingData, { loadChild: false });
            }), catchError(function () {
                return EMPTY;
            }));
        }));
    };
    /**
     * 增量多选帮助批量赋值帮助后事件
     * @param frameId frameId
     * @param mapFields 字段映射
     * @param associatedField 关联字段
     */
    BatchEditService.prototype.afterIncrementalSelectHelpClose = function (frameId, mapFields, associatedField) {
        var _this = this;
        var self = this;
        var result = self.context && self.context.eventParam || [];
        // tslint:disable-next-line: max-line-length
        // const mapping = '{"id":"userRef.userRef", "name":"name", "sex":"sex","age":"userRef.userRef_Age","address":"userRef.userRef_Address","birthday":"userRef.userRef_Birthday","height":"userRef.userRef_Height","isMarried":"userRef.userRef_IsMarried"}';
        if (!associatedField) {
            throw new Error('associated field can`t be empty.');
        }
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        var mappings = JSON.parse(mapFields);
        var foreignKey = associatedField;
        // 将选择人员保存到uistate中
        var rootFrameContext = this.viewModel.frameContext.root;
        // 不是bindingPath则按frameId处理
        var bindingPath = '/';
        var appContext = this.injector.get(AppContext, null);
        if (appContext) {
            var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            if (frameContext) {
                bindingPath = frameContext.viewModel.bindingPath || '/';
            }
            else {
                throw new Error('frameId is invalid!');
            }
        }
        // tslint:disable-next-line: no-string-literal
        rootFrameContext.uiState['selections'] = result;
        if (result && Array.isArray(result)) {
            // 根据bindingPath获取bindingdata中现有数据
            var bindingPaths = bindingPath.split('/').filter(function (item) { return item; });
            var currentData_1 = this.viewModel.bindingData.getValue(bindingPaths);
            var currentDataArray_1 = currentData_1.toArray();
            // 找到result中有，但bindingData中没有的，为待新增项
            var appends = [];
            result.reduce(function (prev, item) {
                var itemId = item && item[currentData_1.primaryKey] || null;
                var isExist = currentDataArray_1.find(function (bindingObject) { return bindingObject[foreignKey][foreignKey] === itemId; });
                if (!isExist) {
                    prev.push(item);
                }
                return prev;
            }, appends);
            // 找到bindingData中有，result中没有的，为待删除项
            var removes = [];
            currentDataArray_1.reduce(function (results, item) {
                var index = result.findIndex(function (selectItem) { return selectItem[currentData_1.primaryKey] === item[foreignKey][foreignKey]; });
                if (index === -1) {
                    results.push(item.primaryKeyValue);
                }
                return results;
            }, removes);
            // console.log('addItems', appends, 'removeItems', removes);
            // 调用后端接口新增数据
            var addAction$ = from(appends).pipe(concatMap(function (item) {
                var path = _this.buildPath(bindingPath, _this.viewModel.bindingData.list.currentId);
                return _this.repository.appendByPath(path).pipe(tap(function (entity) {
                    Object.keys(mappings).forEach(function (prop) {
                        var value = _this.getValueByPath(item, prop);
                        var fields = mappings[prop];
                        var groups = fields.split(',').filter(function (p) { return p; });
                        groups.forEach(function (group) {
                            var paths = group.split('.').filter(function (p) { return p; });
                            _this.setValueByPath(entity, paths.join('.'), value);
                        });
                    });
                }), catchError(function () {
                    return EMPTY;
                }));
            }));
            var removeAction$ = from(removes).pipe(concatMap(function (item) {
                var path = _this.buildPath(bindingPath, _this.viewModel.bindingData.list.currentId);
                return _this.repository.removeByPath(path, item).pipe(tap(function () {
                    var befRepository = _this.repository;
                    befRepository.entityManager.removeEntityByPath(path, item);
                }), catchError(function () {
                    return EMPTY;
                }));
            }));
            if (!appends && !removes || appends && appends.length < 1 && removes && removes.length < 1) {
                return of(true);
            }
            return concat(addAction$, removeAction$).pipe(catchError(function () { return EMPTY; }));
        }
        return of(true);
    };
    // todo:模拟用户操作，待后端接口支持主表批量新增后重写
    /**
     * 多选帮助批量赋值帮助前事件
     */
    BatchEditService.prototype.beforeMultiSelectHelpOpen = function () {
        return this.clearHelpSelections();
    };
    /**
     * 多选帮助批量赋值帮助后事件
     * @param frameId 绑定路径
     * @param mapFields 字段映射
     * @param commandFrameId 回调命令所在frameId
     * @param commandName 回调命令
     * @deprecated 模拟用户操作，待批量赋值支持主表后废弃
     */
    BatchEditService.prototype.afterMultiSelectHelpClose = function (frameId, mapFields, commandFrameId, commandName) {
        var self = this;
        var result = self.context && self.context.eventParam || [];
        if (result && Array.isArray(result)) {
            // 调用后端接口新增数据
            if (!result || result.length < 1) {
                return of(true);
            }
            this.onHelpClose.next({ frameId: frameId, mapFields: mapFields, data: result, commandFrameId: commandFrameId, commandName: commandName });
            return of(true);
        }
        return of(true);
    };
    /**
      * 帮助关闭后处理器
      * @param frameId frameid
      * @param mapFields mapFields
      * @param result 帮助数据结果
      */
    BatchEditService.prototype.onHelpCloseHandler = function (frameId, mapFields, result) {
        var _this = this;
        if (!mapFields) {
            throw new Error('mapFields can`t be empty.');
        }
        var mappings = JSON.parse(mapFields);
        // 不是bindingPath则按frameId处理
        var bindingPath = '/';
        var appContext = this.injector.get(AppContext, null);
        if (appContext) {
            var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            if (frameContext) {
                bindingPath = frameContext.viewModel.bindingPath || '/';
            }
            else {
                throw new Error('frameId is invalid!');
            }
        }
        // 将选择人员保存到uistate中
        var rootFrameContext = this.viewModel.frameContext.root;
        var befRepository = this.repository;
        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
        // tslint:disable-next-line: no-string-literal
        rootFrameContext.uiState['selections'] = result;
        if (result && Array.isArray(result)) {
            var addAction$ = from(result).pipe(concatMap(function (item) {
                var requestInfo = befRepository.restService.buildRequestInfo();
                if (bindingPaths.length > 0) {
                    var path_1 = _this.buildPath(bindingPath, _this.viewModel.bindingData.list.currentId);
                    return befRepository.restService.createByPath(path_1, requestInfo).pipe(tap(function (responseInfo) {
                        var data = responseInfo.returnValue;
                        var newEntity = befRepository.entityManager.appendEntityByPath(path_1, data, data);
                        Object.keys(mappings).forEach(function (prop) {
                            var value = _this.getValueByPath(item, prop);
                            var fields = mappings[prop];
                            var groups = fields.split(',').filter(function (p) { return p; });
                            groups.forEach(function (group) {
                                var paths = group.split('.').filter(function (p) { return p; });
                                _this.setValueByPath(newEntity, paths.join('.'), value);
                            });
                        });
                        return newEntity;
                    }));
                }
                else {
                    return befRepository.restService.create(null, requestInfo).pipe(tap(function (responseInfo) {
                        var data = responseInfo.returnValue;
                        var newEntity = _this.repository.buildEntity(data);
                        Object.keys(mappings).forEach(function (prop) {
                            var value = _this.getValueByPath(item, prop);
                            var fields = mappings[prop];
                            var groups = fields.split(',').filter(function (p) { return p; });
                            groups.forEach(function (group) {
                                var paths = group.split('.').filter(function (p) { return p; });
                                _this.setValueByPath(newEntity, paths.join('.'), value);
                            });
                        });
                        _this.repository.entityCollection.addEntity(newEntity);
                        return newEntity;
                    }));
                }
            }));
            // const formLoadingService = this.injector.get<FormLoadingService>(FormLoadingService, null);
            if (this.formLoadingService) {
                this.suspendFrameContextEvent(frameId);
                this.formLoadingService.show();
                this.formLoadingService.setSuspend(true);
            }
            return addAction$.pipe(last()).pipe(switchMap(function () {
                var primaryValue = _this.viewModel.bindingData.list.currentId;
                if (primaryValue) {
                    return befRepository.updateChangesById(primaryValue);
                }
                else {
                    return of(null);
                }
            })).subscribe(function () {
                if (_this.formLoadingService) {
                    _this.resumeFrameContextEvent(frameId);
                    _this.formLoadingService.setSuspend(false);
                    _this.formLoadingService.hide();
                }
            }, function () {
                if (_this.formLoadingService) {
                    _this.resumeFrameContextEvent(frameId);
                    _this.formLoadingService.setSuspend(false);
                    _this.formLoadingService.hide();
                }
            });
        }
        return of(null);
    };
    BatchEditService.prototype.suspendFrameContextEvent = function (frameId) {
        var appContext = this.injector.get(AppContext, null);
        if (appContext) {
            var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            frameContext.suspend = true;
        }
    };
    BatchEditService.prototype.resumeFrameContextEvent = function (frameId) {
        var appContext = this.injector.get(AppContext, null);
        if (appContext) {
            var frameContext = appContext.frameContextManager.getFrameContextById(frameId);
            frameContext.suspend = false;
            frameContext.appContext.messagePipe.next('bindData');
        }
    };
    //#endregion
    BatchEditService.prototype.setValueByPath = function (target, path, value) {
        if (target) {
            var paths = path.split('.');
            if (paths.length <= 1) {
                target[path] = value;
            }
            else {
                paths.slice(0, -1).reduce(function (prev, path) {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    };
    BatchEditService.prototype.getValueByPath = function (target, path) {
        var paths = path.split('.');
        if (paths.length < 1) {
            return;
        }
        if (paths.length === 1) {
            return target[path];
        }
        var result = null;
        paths.forEach(function (prop, index) {
            if (index === 0) {
                result = target && target[prop] || null;
            }
            else {
                result = result && result[prop] || null;
            }
        });
        return result;
    };
    /**
     * 构造子表路径
     * @param bindingPath 绑定路径
     * @param id id
     */
    BatchEditService.prototype.buildPath = function (bindingPath, id) {
        var path = '/' + id;
        var subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (var index = 1; index < subPaths.length - 1; index++) {
                var subPath = subPaths[index];
                var subData = this.viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error("\u83B7\u53D6\u5B50\u8868\u5B8C\u6574\u8DEF\u5F84\u51FA\u9519\uFF0C\u627E\u4E0D\u5230" + subData + "\u5BF9\u5E94\u7684\u5B50\u8868\uFF0C\u6216\u5BF9\u5E94\u5B50\u8868\u6CA1\u6709\u5F53\u524D\u884C\u3002");
                }
                path += "/" + subPath + "/" + subData.currentId;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    };
    /**
     * 获取绑定路径的当前行数组
     * @param bindingPath bindingPath
     * @returns
     */
    BatchEditService.prototype.buildIds = function (bindingPath) {
        var _this = this;
        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
        var primaryValue = this.viewModel.bindingData.list.currentId;
        var result = [];
        var paths = [];
        if (bindingPaths.length > 0) {
            result.push(primaryValue);
            // 从表或从从表要复制的行不一定是当前行，用户可以指定
            bindingPaths.pop();
            bindingPaths.forEach(function (path) {
                paths.push(path);
                var bindingList = _this.viewModel.bindingData.getValue(paths);
                if (bindingList) {
                    result.push(bindingList.currentId);
                }
            });
        }
        return result;
    };
    BatchEditService.prototype.updateBindingData = function (input, ids) {
        var _a = input || {}, _b = _a.controlType, controlType = _b === void 0 ? null : _b, _c = _a.value, value = _c === void 0 ? null : _c, _d = _a.options, options = _d === void 0 ? {} : _d, _e = _a.dataType, dataType = _e === void 0 ? null : _e;
        if (controlType) {
            // 对帮助做特殊处理
            if (controlType === 'lookup' || controlType === 'combo-lookup') {
                var mapFields = options.mapFields;
                this.updateLookupField(ids, value, mapFields);
            }
            else {
                this.updateSimpleField(ids, value, input);
            }
        }
    };
    BatchEditService.prototype.updateSimpleField = function (ids, value, column) {
        var _this = this;
        if (!column) {
            return;
        }
        var currentColumnType = column.dataType;
        // 存在行编辑器
        var result = value;
        if (currentColumnType === 'date') {
            var dateStr = this.dateService.formatTo(value, 'yyyy-MM-dd');
            if (!dateStr) {
                dateStr = '0001-01-01T00:00:00';
            }
            result = dateStr;
        }
        else if (currentColumnType === 'number') {
            result = Number(value) || 0;
        }
        var field = column.field;
        ids.forEach(function (id) {
            _this.updateBindingList(id, field, result);
        });
    };
    BatchEditService.prototype.updateLookupField = function (ids, helpData, mapFields) {
        var _this = this;
        if (!mapFields) {
            return;
        }
        var helpFields = Object.keys(mapFields);
        var idIndex = helpFields.findIndex(function (item) { return item === 'id'; });
        if (helpFields.includes('id') && idIndex !== 0) {
            helpFields.splice(idIndex, 1);
            helpFields = tslib_1.__spread(['id'], helpFields);
        }
        helpFields.forEach(function (helpField) {
            var helpValue = '';
            if (helpData) {
                if (helpData instanceof Array) {
                    helpValue = helpData.map(function (item) {
                        return _this.getValue(helpField, item);
                    }).join(',');
                }
                else {
                    helpValue = _this.getValue(helpField, helpData);
                }
            }
            ids.forEach(function (id) {
                _this.updateBindingList(id, mapFields[helpField], helpValue);
            });
        });
    };
    BatchEditService.prototype.updateBindingList = function (primaryValue, propertyName, value) {
        var viewModel = this.viewModel || null;
        if (!viewModel || !propertyName) {
            return;
        }
        // 更新主表部分行的字段
        var propertyNames = propertyName.split('.').filter(function (item) { return item; });
        var bindingObject = this.bindingList.findById(primaryValue);
        if (propertyNames.length < 2) {
            bindingObject.setValue(propertyName, value, true, true);
        }
        else {
            var targetBindingObject_1 = null;
            var fpaths = propertyNames.slice(0, propertyNames.length - 1);
            var targetPropertyName = propertyNames[propertyNames.length - 1];
            fpaths.forEach(function (prop) {
                targetBindingObject_1 = targetBindingObject_1 && targetBindingObject_1[prop] || bindingObject[prop];
            });
            // todo:需要添加值变化事件
            targetBindingObject_1.setValue(targetPropertyName, value, true, true);
        }
    };
    BatchEditService.prototype.getBindingPathArray = function () {
        var path = this.viewModel.bindingPath;
        if (path) {
            return path.split('/').filter(function (n) { return n !== ''; });
        }
        return [];
    };
    BatchEditService.prototype.getValue = function (f, data) {
        var val = '';
        if (f.indexOf('.') === -1) {
            val = data[f];
        }
        else {
            val = f.split('.').reduce(function (a, b) {
                return a[b];
            }, data);
        }
        return val;
    };
    Object.defineProperty(BatchEditService.prototype, "bindingList", {
        get: function () {
            // 根实体
            if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
                return this.viewModel.bindingData.list;
            }
            // 子实体
            var bindingPath = this.viewModel.bindingPath.substr(1);
            bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
            var paths = bindingPath.split('/');
            var filteredPaths = paths.filter(function (part) {
                return part !== '';
            });
            return this.viewModel.bindingData.getValue(filteredPaths);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 根据映射将数据赋值给bindingData
     * @param data
     * @param mapFields
     * @param bindingData
     */
    BatchEditService.prototype.mappingRow = function (data, mapFields, entity, bindingPath) {
        var _this = this;
        Object.keys(mapFields).forEach(function (prop) {
            var value = _this.getValueByPath(data, prop);
            var fields = mapFields[prop];
            var groups = fields.split(',').filter(function (p) { return p; });
            groups.forEach(function (group) {
                var paths = group.split('.').filter(function (p) { return p; });
                _this.setValueByPath(entity, paths.join('.'), value);
            });
        });
    };
    /**
     * 通过frameId获取对应的组件上下文
     * @param frameId frameId
     * @returns
     */
    BatchEditService.prototype.getFrameContextById = function (frameId) {
        if (!frameId) {
            return null;
        }
        var appContext = this.injector.get(AppContext, null);
        var frameContext = null;
        if (appContext) {
            frameContext = appContext.frameContextManager.getFrameContextById(frameId);
        }
        return frameContext;
    };
    BatchEditService.prototype.getEntityByPath = function (frameContext, bindingPaths, currentId) {
        bindingPaths = tslib_1.__spread(bindingPaths);
        var id = frameContext.bindingData.list.currentId;
        var entity = frameContext.repository.entityCollection.getEntityById(id);
        var item = entity;
        var paths = [];
        var tailPath = bindingPaths.pop();
        var parent = bindingPaths.reduce(function (object, path) {
            paths.push(path);
            if (object && (object.hasOwnProperty(path) || object['__proto__'].hasOwnProperty(path))) {
                var value = object[path];
                if (value && value instanceof EntityList) {
                    var bindingList = frameContext.bindingData.getValue(paths);
                    var currentItemId = bindingList.currentId;
                    return value.get(currentItemId);
                }
                else {
                    return value;
                }
            }
            else {
                return null;
            }
        }, item);
        if (parent instanceof Entity) {
            var list = parent[tailPath];
            if (list) {
                return list.get(currentId);
            }
            else {
                throw new Error("\u65E0\u6548\u7684bindingPath.");
            }
        }
        else {
            throw new Error("\u65E0\u6548\u7684bindingPath.");
        }
    };
    BatchEditService.prototype.endEdit = function (frameContext) {
        var appContext = frameContext && frameContext.getFormAppContext();
        return of(null).pipe(tap(function () {
            if (appContext) {
                appContext.messagePipe.next({ type: 'endEdit' });
            }
        }), 
        // todo: 不应该使用delay，应该串流
        delay(5));
    };
    BatchEditService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BatchEditService.ctorParameters = function () { return [
        { type: Injector },
        { type: ComponentManagerService },
        { type: ViewModel },
        { type: Repository },
        { type: BatchEditDialogService },
        { type: DateTimeHelperService },
        { type: LanguageService },
        { type: FormNotifyService }
    ]; };
    return BatchEditService;
}());
export { BatchEditService };
//# sourceMappingURL=data:application/json;base64,