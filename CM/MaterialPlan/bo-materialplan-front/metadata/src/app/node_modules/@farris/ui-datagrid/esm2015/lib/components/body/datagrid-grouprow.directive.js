/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Injector, Renderer2, ElementRef } from '@angular/core';
import { DatagridComponent } from './../../datagrid.component';
export class DatagridGroupRowDirective {
    /**
     * @param {?} injector
     * @param {?} render
     * @param {?} el
     * @param {?} dg
     */
    constructor(injector, render, el, dg) {
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.dg = dg;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.dg && this.dg.groupStyler) {
            /** @type {?} */
            const styler = this.dg.groupStyler(this.groupRow);
            /** @type {?} */
            const tr = this.el.nativeElement;
            if (!tr.id) {
                tr.id = 'group-tr_' + this.groupRow.id;
            }
            this.dg.renderCustomStyle(styler, tr);
        }
    }
}
DatagridGroupRowDirective.decorators = [
    { type: Directive, args: [{
                selector: '[group-row]',
            },] }
];
/** @nocollapse */
DatagridGroupRowDirective.ctorParameters = () => [
    { type: Injector },
    { type: Renderer2 },
    { type: ElementRef },
    { type: DatagridComponent }
];
DatagridGroupRowDirective.propDecorators = {
    groupRow: [{ type: Input, args: ['group-row',] }]
};
if (false) {
    /** @type {?} */
    DatagridGroupRowDirective.prototype.groupRow;
    /**
     * @type {?}
     * @private
     */
    DatagridGroupRowDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridGroupRowDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DatagridGroupRowDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridGroupRowDirective.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZ3JvdXByb3cuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2JvZHkvZGF0YWdyaWQtZ3JvdXByb3cuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUMxRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUsvRCxNQUFNLE9BQU8seUJBQXlCOzs7Ozs7O0lBR2xDLFlBQW9CLFFBQWtCLEVBQVUsTUFBaUIsRUFBVSxFQUFjLEVBQVUsRUFBcUI7UUFBcEcsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVc7UUFBVSxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7SUFFeEgsQ0FBQzs7OztJQUVELFFBQVE7UUFDSixJQUFJLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUU7O2tCQUMxQixNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQzs7a0JBQzNDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWE7WUFDaEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ1IsRUFBRSxDQUFDLEVBQUUsR0FBRyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7YUFDMUM7WUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN6QztJQUNMLENBQUM7OztZQW5CSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGFBQWE7YUFDMUI7Ozs7WUFMMEIsUUFBUTtZQUFFLFNBQVM7WUFBRSxVQUFVO1lBQ2pELGlCQUFpQjs7O3VCQU1yQixLQUFLLFNBQUMsV0FBVzs7OztJQUFsQiw2Q0FBNkI7Ozs7O0lBRWpCLDZDQUEwQjs7Ozs7SUFBRSwyQ0FBeUI7Ozs7O0lBQUUsdUNBQXNCOzs7OztJQUFFLHVDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIEluamVjdG9yLCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZENvbXBvbmVudCB9IGZyb20gJy4vLi4vLi4vZGF0YWdyaWQuY29tcG9uZW50JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbZ3JvdXAtcm93XScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZEdyb3VwUm93RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIEBJbnB1dCgnZ3JvdXAtcm93JykgZ3JvdXBSb3c7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjIsIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgZGc6IERhdGFncmlkQ29tcG9uZW50KSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRnICYmIHRoaXMuZGcuZ3JvdXBTdHlsZXIpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3R5bGVyID0gdGhpcy5kZy5ncm91cFN0eWxlcih0aGlzLmdyb3VwUm93KTtcclxuICAgICAgICAgICAgY29uc3QgdHIgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGlmICghdHIuaWQpIHtcclxuICAgICAgICAgICAgICAgIHRyLmlkID0gJ2dyb3VwLXRyXycgKyB0aGlzLmdyb3VwUm93LmlkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZGcucmVuZGVyQ3VzdG9tU3R5bGUoc3R5bGVyLCB0cik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==