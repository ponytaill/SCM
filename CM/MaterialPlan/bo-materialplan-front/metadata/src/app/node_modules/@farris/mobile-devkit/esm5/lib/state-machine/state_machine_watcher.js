/**
 * 状态机事件，监听uistate的变化和entity的变化
 */
var StateMachineWatcher = /** @class */ (function () {
    function StateMachineWatcher(stateMachine) {
        this.stateMachine = stateMachine;
        /**
         * 所有UIStatePath数组
         */
        this.uiStatePathList = [];
        /**
         * 所有DataStatePath数组
         */
        this.dataStatePathList = [];
        this.viewModelContextAndUIStatePathsMap = new Map();
        this.viewModelContextAndDataStatePathsMap = new Map();
    }
    /**
     * 初始化
     * @param viewModelContext 当前视图上下文
     */
    StateMachineWatcher.prototype.init = function (viewModelContext) {
        this.viewModelContext = viewModelContext;
    };
    /**
     * 返回表达式中ViewModelId对应的ViewModelContext
     */
    StateMachineWatcher.prototype.getViewModelContext = function (expression) {
        var viewModelId = this.extractPaths(expression).split('/')[1];
        return this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId);
    };
    /**
     * 监听UIState变更
     * @param viewModelContext ViewModel上下文
     * @param expression UIState表达式
     */
    StateMachineWatcher.prototype.subscribeUIStateChange = function (viewModelContext, expression) {
        var _this = this;
        var uiStatePath = this.getStatePath(expression);
        if (this.viewModelContextAndUIStatePathsMap.has(viewModelContext) === false) {
            this.viewModelContextAndUIStatePathsMap.set(viewModelContext, this.uiStatePathList);
            viewModelContext.uiState.changes.subscribe(function (uiStateChange) {
                var uiStatePathList = _this.viewModelContextAndUIStatePathsMap.get(viewModelContext);
                if (uiStateChange.field && uiStatePathList.indexOf(uiStateChange.field) > -1) {
                    _this.stateMachine.render();
                }
            });
        }
        if (this.viewModelContextAndUIStatePathsMap.get(viewModelContext).indexOf(uiStatePath) === -1) {
            this.uiStatePathList.push(uiStatePath);
        }
    };
    /**
     * 监听实体变更
     */
    StateMachineWatcher.prototype.subscribeEntityChange = function (viewModelContext, expression) {
        var _this = this;
        if (this.viewModelContextAndDataStatePathsMap.has(viewModelContext) === false) {
            this.viewModelContextAndDataStatePathsMap.set(viewModelContext, this.dataStatePathList);
            viewModelContext.bindingData.changes.subscribe(function (change) {
                if (change.type === 'Load' || change.type === 'SelectionChanged') {
                    _this.stateMachine.render();
                }
                var dataPathList = _this.viewModelContextAndDataStatePathsMap.get(viewModelContext);
                if (change.path.join() && _this.isAccordingPath(dataPathList, change.path.join('/'))) {
                    _this.stateMachine.render();
                }
            });
        }
        if (this.viewModelContextAndDataStatePathsMap.get(viewModelContext).indexOf(expression) === -1) {
            this.dataStatePathList.push(expression);
        }
    };
    /**
     * 根据表达式获取对应的StatePath（移除了ViewModelId之外的部分）
     * @param expression 变量表达式
     */
    StateMachineWatcher.prototype.getStatePath = function (expression) {
        return this.extractPaths(expression).split('/')[2];
    };
    /**
     * 判断是否监听范围内的变更路径
     */
    StateMachineWatcher.prototype.isAccordingPath = function (dataStatePaths, dataStatePath) {
        var targetPath = dataStatePaths.find(function (item) {
            return item.indexOf(dataStatePath) > -1;
        });
        return targetPath === undefined ? false : true;
    };
    /**
     * 暂时把这个方法放了这个地方，等季老师共用方法调整后，直接引用他的方法，该方法可删除
     * @param expression 变量表达式
     */
    StateMachineWatcher.prototype.extractPaths = function (expression) {
        var path;
        var UI_STATE_PATTERN_G = /\{UISTATE~(\S+?)\}/g;
        var DATA_PATTERN_G = /\{DATA~(\S+?)\}/g;
        var uiStateVariables = expression.match(UI_STATE_PATTERN_G);
        var dataVariables = expression.match(DATA_PATTERN_G);
        if (uiStateVariables !== null) {
            var UI_STATE_PATTERN_1 = /\{UISTATE~(\S+?)\}/;
            uiStateVariables.forEach(function (uiStateVariable) {
                var pathMatches = uiStateVariable.match(UI_STATE_PATTERN_1);
                if (pathMatches != null && pathMatches.length === 2) {
                    path = pathMatches[1];
                }
            });
        }
        if (dataVariables !== null) {
            var DATA_PATTERN_1 = /\{DATA~(\S+?)\}/;
            dataVariables.forEach(function (dataVariable) {
                var pathMatches = dataVariable.match(DATA_PATTERN_1);
                if (pathMatches != null && pathMatches.length === 2) {
                    path = pathMatches[1];
                }
            });
        }
        return path;
    };
    return StateMachineWatcher;
}());
export { StateMachineWatcher };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGVfbWFjaGluZV93YXRjaGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3N0YXRlLW1hY2hpbmUvc3RhdGVfbWFjaGluZV93YXRjaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBOztHQUVHO0FBQ0g7SUEyQkUsNkJBQW1CLFlBQTBCO1FBQTFCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBVjdDOztXQUVHO1FBQ0ssb0JBQWUsR0FBa0IsRUFBRSxDQUFDO1FBRTVDOztXQUVHO1FBQ0ssc0JBQWlCLEdBQWtCLEVBQUUsQ0FBQztRQUc1QyxJQUFJLENBQUMsa0NBQWtDLEdBQUcsSUFBSSxHQUFHLEVBQXlCLENBQUM7UUFDM0UsSUFBSSxDQUFDLG9DQUFvQyxHQUFHLElBQUksR0FBRyxFQUF5QixDQUFDO0lBQy9FLENBQUM7SUFFRDs7O09BR0c7SUFDSSxrQ0FBSSxHQUFYLFVBQVksZ0JBQWtDO1FBQzVDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztJQUMzQyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxpREFBbUIsR0FBMUIsVUFBMkIsVUFBZTtRQUN4QyxJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzlGLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksb0RBQXNCLEdBQTdCLFVBQThCLGdCQUFrQyxFQUFFLFVBQWU7UUFBakYsaUJBZ0JDO1FBZkMsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVsRCxJQUFJLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxLQUFLLEVBQUU7WUFDM0UsSUFBSSxDQUFDLGtDQUFrQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDcEYsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBQyxhQUFhO2dCQUN2RCxJQUFNLGVBQWUsR0FBRyxLQUFJLENBQUMsa0NBQWtDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3RGLElBQUksYUFBYSxDQUFDLEtBQUssSUFBSSxlQUFlLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtvQkFDNUUsS0FBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQztpQkFDNUI7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxJQUFJLENBQUMsa0NBQWtDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQzdGLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0ksbURBQXFCLEdBQTVCLFVBQTZCLGdCQUFrQyxFQUFFLFVBQWU7UUFBaEYsaUJBb0JDO1FBbEJDLElBQUksSUFBSSxDQUFDLG9DQUFvQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEtBQUssRUFBRTtZQUM3RSxJQUFJLENBQUMsb0NBQW9DLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3hGLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQUMsTUFBYztnQkFFNUQsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLGtCQUFrQixFQUFFO29CQUNoRSxLQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDO2lCQUM1QjtnQkFFRCxJQUFNLFlBQVksR0FBRyxLQUFJLENBQUMsb0NBQW9DLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3JGLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxLQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO29CQUNuRixLQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDO2lCQUM1QjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxJQUFJLElBQUksQ0FBQyxvQ0FBb0MsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDOUYsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN6QztJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDSywwQ0FBWSxHQUFwQixVQUFxQixVQUFlO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksNkNBQWUsR0FBdEIsVUFBdUIsY0FBbUIsRUFBRSxhQUFxQjtRQUMvRCxJQUFNLFVBQVUsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQUMsSUFBSTtZQUMxQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLFVBQVUsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2pELENBQUM7SUFFRDs7O09BR0c7SUFDSywwQ0FBWSxHQUFwQixVQUFxQixVQUFrQjtRQUNyQyxJQUFJLElBQVksQ0FBQztRQUNqQixJQUFNLGtCQUFrQixHQUFHLHFCQUFxQixDQUFDO1FBQ2pELElBQU0sY0FBYyxHQUFHLGtCQUFrQixDQUFDO1FBQzFDLElBQU0sZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzlELElBQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDdkQsSUFBSSxnQkFBZ0IsS0FBSyxJQUFJLEVBQUU7WUFDN0IsSUFBTSxrQkFBZ0IsR0FBRyxvQkFBb0IsQ0FBQztZQUM5QyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsVUFBQyxlQUF1QjtnQkFDL0MsSUFBTSxXQUFXLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxrQkFBZ0IsQ0FBQyxDQUFDO2dCQUM1RCxJQUFJLFdBQVcsSUFBSSxJQUFJLElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7b0JBQ25ELElBQUksR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3ZCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELElBQUksYUFBYSxLQUFLLElBQUksRUFBRTtZQUMxQixJQUFNLGNBQVksR0FBRyxpQkFBaUIsQ0FBQztZQUN2QyxhQUFhLENBQUMsT0FBTyxDQUFDLFVBQUMsWUFBb0I7Z0JBQ3pDLElBQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsY0FBWSxDQUFDLENBQUM7Z0JBQ3JELElBQUksV0FBVyxJQUFJLElBQUksSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtvQkFDbkQsSUFBSSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDdkI7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0gsMEJBQUM7QUFBRCxDQUFDLEFBakpELElBaUpDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhdGVNYWNoaW5lIH0gZnJvbSAnLi9zdGF0ZV9tYWNoaW5lJztcclxuaW1wb3J0IHsgVmlld01vZGVsQ29udGV4dCB9IGZyb20gJy4uL3ZpZXctbW9kZWwvaW5kZXgnO1xyXG5pbXBvcnQgeyBDaGFuZ2UgfSBmcm9tICcuLi9iaW5kaW5nLWRhdGEvY2hhbmdlcyc7XHJcblxyXG5cclxuLyoqXHJcbiAqIOeKtuaAgeacuuS6i+S7tu+8jOebkeWQrHVpc3RhdGXnmoTlj5jljJblkoxlbnRpdHnnmoTlj5jljJZcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdGF0ZU1hY2hpbmVXYXRjaGVyIHtcclxuXHJcbiAgLyoqXHJcbiAgICog5b2T5YmNVmlld01vZGVs5LiK5LiL5paHXHJcbiAgICovXHJcbiAgcHJpdmF0ZSB2aWV3TW9kZWxDb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0O1xyXG5cclxuICAvKipcclxuICAgKiB2aWV3TW9kZWw9PlVJU3RhdGVQYWh0c+Wtl+WFuFxyXG4gICAqL1xyXG4gIHByaXZhdGUgdmlld01vZGVsQ29udGV4dEFuZFVJU3RhdGVQYXRoc01hcDogTWFwPFZpZXdNb2RlbENvbnRleHQsIEFycmF5PHN0cmluZz4+O1xyXG5cclxuICAvKipcclxuICAgKiB2aWV3TW9kZWw9PkRhdGFTdGF0ZVBhaHRz5a2X5YW4XHJcbiAgICovXHJcbiAgcHJpdmF0ZSB2aWV3TW9kZWxDb250ZXh0QW5kRGF0YVN0YXRlUGF0aHNNYXA6IE1hcDxWaWV3TW9kZWxDb250ZXh0LCBBcnJheTxzdHJpbmc+PjtcclxuXHJcbiAgLyoqXHJcbiAgICog5omA5pyJVUlTdGF0ZVBhdGjmlbDnu4RcclxuICAgKi9cclxuICBwcml2YXRlIHVpU3RhdGVQYXRoTGlzdDogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG5cclxuICAvKipcclxuICAgKiDmiYDmnIlEYXRhU3RhdGVQYXRo5pWw57uEXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBkYXRhU3RhdGVQYXRoTGlzdDogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgc3RhdGVNYWNoaW5lOiBTdGF0ZU1hY2hpbmUpIHtcclxuICAgIHRoaXMudmlld01vZGVsQ29udGV4dEFuZFVJU3RhdGVQYXRoc01hcCA9IG5ldyBNYXA8Vmlld01vZGVsQ29udGV4dCwgYW55PigpO1xyXG4gICAgdGhpcy52aWV3TW9kZWxDb250ZXh0QW5kRGF0YVN0YXRlUGF0aHNNYXAgPSBuZXcgTWFwPFZpZXdNb2RlbENvbnRleHQsIGFueT4oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIneWni+WMllxyXG4gICAqIEBwYXJhbSB2aWV3TW9kZWxDb250ZXh0IOW9k+WJjeinhuWbvuS4iuS4i+aWh1xyXG4gICAqL1xyXG4gIHB1YmxpYyBpbml0KHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQpIHtcclxuICAgIHRoaXMudmlld01vZGVsQ29udGV4dCA9IHZpZXdNb2RlbENvbnRleHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDov5Tlm57ooajovr7lvI/kuK1WaWV3TW9kZWxJZOWvueW6lOeahFZpZXdNb2RlbENvbnRleHRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Vmlld01vZGVsQ29udGV4dChleHByZXNzaW9uOiBhbnkpOiBWaWV3TW9kZWxDb250ZXh0IHtcclxuICAgIGNvbnN0IHZpZXdNb2RlbElkID0gdGhpcy5leHRyYWN0UGF0aHMoZXhwcmVzc2lvbikuc3BsaXQoJy8nKVsxXTtcclxuICAgIHJldHVybiB0aGlzLnZpZXdNb2RlbENvbnRleHQuYXBwQ29udGV4dC52aWV3TW9kZWxDb250ZXh0TWFuYWdlci5nZXRDb250ZXh0QnlJZCh2aWV3TW9kZWxJZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDnm5HlkKxVSVN0YXRl5Y+Y5pu0XHJcbiAgICogQHBhcmFtIHZpZXdNb2RlbENvbnRleHQgVmlld01vZGVs5LiK5LiL5paHXHJcbiAgICogQHBhcmFtIGV4cHJlc3Npb24gVUlTdGF0ZeihqOi+vuW8j1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzdWJzY3JpYmVVSVN0YXRlQ2hhbmdlKHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQsIGV4cHJlc3Npb246IGFueSkge1xyXG4gICAgY29uc3QgdWlTdGF0ZVBhdGggPSB0aGlzLmdldFN0YXRlUGF0aChleHByZXNzaW9uKTtcclxuXHJcbiAgICBpZiAodGhpcy52aWV3TW9kZWxDb250ZXh0QW5kVUlTdGF0ZVBhdGhzTWFwLmhhcyh2aWV3TW9kZWxDb250ZXh0KSA9PT0gZmFsc2UpIHtcclxuICAgICAgdGhpcy52aWV3TW9kZWxDb250ZXh0QW5kVUlTdGF0ZVBhdGhzTWFwLnNldCh2aWV3TW9kZWxDb250ZXh0LCB0aGlzLnVpU3RhdGVQYXRoTGlzdCk7XHJcbiAgICAgIHZpZXdNb2RlbENvbnRleHQudWlTdGF0ZS5jaGFuZ2VzLnN1YnNjcmliZSgodWlTdGF0ZUNoYW5nZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVpU3RhdGVQYXRoTGlzdCA9IHRoaXMudmlld01vZGVsQ29udGV4dEFuZFVJU3RhdGVQYXRoc01hcC5nZXQodmlld01vZGVsQ29udGV4dCk7XHJcbiAgICAgICAgaWYgKHVpU3RhdGVDaGFuZ2UuZmllbGQgJiYgdWlTdGF0ZVBhdGhMaXN0LmluZGV4T2YodWlTdGF0ZUNoYW5nZS5maWVsZCkgPiAtMSkge1xyXG4gICAgICAgICAgdGhpcy5zdGF0ZU1hY2hpbmUucmVuZGVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy52aWV3TW9kZWxDb250ZXh0QW5kVUlTdGF0ZVBhdGhzTWFwLmdldCh2aWV3TW9kZWxDb250ZXh0KS5pbmRleE9mKHVpU3RhdGVQYXRoKSA9PT0gLTEpIHtcclxuICAgICAgdGhpcy51aVN0YXRlUGF0aExpc3QucHVzaCh1aVN0YXRlUGF0aCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDnm5HlkKzlrp7kvZPlj5jmm7RcclxuICAgKi9cclxuICBwdWJsaWMgc3Vic2NyaWJlRW50aXR5Q2hhbmdlKHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQsIGV4cHJlc3Npb246IGFueSkge1xyXG5cclxuICAgIGlmICh0aGlzLnZpZXdNb2RlbENvbnRleHRBbmREYXRhU3RhdGVQYXRoc01hcC5oYXModmlld01vZGVsQ29udGV4dCkgPT09IGZhbHNlKSB7XHJcbiAgICAgIHRoaXMudmlld01vZGVsQ29udGV4dEFuZERhdGFTdGF0ZVBhdGhzTWFwLnNldCh2aWV3TW9kZWxDb250ZXh0LCB0aGlzLmRhdGFTdGF0ZVBhdGhMaXN0KTtcclxuICAgICAgdmlld01vZGVsQ29udGV4dC5iaW5kaW5nRGF0YS5jaGFuZ2VzLnN1YnNjcmliZSgoY2hhbmdlOiBDaGFuZ2UpID0+IHtcclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZS50eXBlID09PSAnTG9hZCcgfHwgY2hhbmdlLnR5cGUgPT09ICdTZWxlY3Rpb25DaGFuZ2VkJykge1xyXG4gICAgICAgICAgdGhpcy5zdGF0ZU1hY2hpbmUucmVuZGVyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBkYXRhUGF0aExpc3QgPSB0aGlzLnZpZXdNb2RlbENvbnRleHRBbmREYXRhU3RhdGVQYXRoc01hcC5nZXQodmlld01vZGVsQ29udGV4dCk7XHJcbiAgICAgICAgaWYgKGNoYW5nZS5wYXRoLmpvaW4oKSAmJiB0aGlzLmlzQWNjb3JkaW5nUGF0aChkYXRhUGF0aExpc3QsIGNoYW5nZS5wYXRoLmpvaW4oJy8nKSkpIHtcclxuICAgICAgICAgIHRoaXMuc3RhdGVNYWNoaW5lLnJlbmRlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMudmlld01vZGVsQ29udGV4dEFuZERhdGFTdGF0ZVBhdGhzTWFwLmdldCh2aWV3TW9kZWxDb250ZXh0KS5pbmRleE9mKGV4cHJlc3Npb24pID09PSAtMSkge1xyXG4gICAgICB0aGlzLmRhdGFTdGF0ZVBhdGhMaXN0LnB1c2goZXhwcmVzc2lvbik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmoLnmja7ooajovr7lvI/ojrflj5blr7nlupTnmoRTdGF0ZVBhdGjvvIjnp7vpmaTkuoZWaWV3TW9kZWxJZOS5i+WklueahOmDqOWIhu+8iVxyXG4gICAqIEBwYXJhbSBleHByZXNzaW9uIOWPmOmHj+ihqOi+vuW8j1xyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0U3RhdGVQYXRoKGV4cHJlc3Npb246IGFueSkge1xyXG4gICAgcmV0dXJuIHRoaXMuZXh0cmFjdFBhdGhzKGV4cHJlc3Npb24pLnNwbGl0KCcvJylbMl07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliKTmlq3mmK/lkKbnm5HlkKzojIPlm7TlhoXnmoTlj5jmm7Tot6/lvoRcclxuICAgKi9cclxuICBwdWJsaWMgaXNBY2NvcmRpbmdQYXRoKGRhdGFTdGF0ZVBhdGhzOiBhbnksIGRhdGFTdGF0ZVBhdGg6IHN0cmluZykge1xyXG4gICAgY29uc3QgdGFyZ2V0UGF0aCA9IGRhdGFTdGF0ZVBhdGhzLmZpbmQoKGl0ZW0pID0+IHtcclxuICAgICAgcmV0dXJuIGl0ZW0uaW5kZXhPZihkYXRhU3RhdGVQYXRoKSA+IC0xO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHRhcmdldFBhdGggPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaaguaXtuaKiui/meS4quaWueazleaUvuS6hui/meS4quWcsOaWue+8jOetieWto+iAgeW4iOWFseeUqOaWueazleiwg+aVtOWQju+8jOebtOaOpeW8leeUqOS7lueahOaWueazle+8jOivpeaWueazleWPr+WIoOmZpFxyXG4gICAqIEBwYXJhbSBleHByZXNzaW9uIOWPmOmHj+ihqOi+vuW8j1xyXG4gICAqL1xyXG4gIHByaXZhdGUgZXh0cmFjdFBhdGhzKGV4cHJlc3Npb246IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBsZXQgcGF0aDogc3RyaW5nO1xyXG4gICAgY29uc3QgVUlfU1RBVEVfUEFUVEVSTl9HID0gL1xce1VJU1RBVEV+KFxcUys/KVxcfS9nO1xyXG4gICAgY29uc3QgREFUQV9QQVRURVJOX0cgPSAvXFx7REFUQX4oXFxTKz8pXFx9L2c7XHJcbiAgICBjb25zdCB1aVN0YXRlVmFyaWFibGVzID0gZXhwcmVzc2lvbi5tYXRjaChVSV9TVEFURV9QQVRURVJOX0cpO1xyXG4gICAgY29uc3QgZGF0YVZhcmlhYmxlcyA9IGV4cHJlc3Npb24ubWF0Y2goREFUQV9QQVRURVJOX0cpO1xyXG4gICAgaWYgKHVpU3RhdGVWYXJpYWJsZXMgIT09IG51bGwpIHtcclxuICAgICAgY29uc3QgVUlfU1RBVEVfUEFUVEVSTiA9IC9cXHtVSVNUQVRFfihcXFMrPylcXH0vO1xyXG4gICAgICB1aVN0YXRlVmFyaWFibGVzLmZvckVhY2goKHVpU3RhdGVWYXJpYWJsZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcGF0aE1hdGNoZXMgPSB1aVN0YXRlVmFyaWFibGUubWF0Y2goVUlfU1RBVEVfUEFUVEVSTik7XHJcbiAgICAgICAgaWYgKHBhdGhNYXRjaGVzICE9IG51bGwgJiYgcGF0aE1hdGNoZXMubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICBwYXRoID0gcGF0aE1hdGNoZXNbMV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChkYXRhVmFyaWFibGVzICE9PSBudWxsKSB7XHJcbiAgICAgIGNvbnN0IERBVEFfUEFUVEVSTiA9IC9cXHtEQVRBfihcXFMrPylcXH0vO1xyXG4gICAgICBkYXRhVmFyaWFibGVzLmZvckVhY2goKGRhdGFWYXJpYWJsZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcGF0aE1hdGNoZXMgPSBkYXRhVmFyaWFibGUubWF0Y2goREFUQV9QQVRURVJOKTtcclxuICAgICAgICBpZiAocGF0aE1hdGNoZXMgIT0gbnVsbCAmJiBwYXRoTWF0Y2hlcy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgIHBhdGggPSBwYXRoTWF0Y2hlc1sxXTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhdGg7XHJcbiAgfVxyXG59Il19