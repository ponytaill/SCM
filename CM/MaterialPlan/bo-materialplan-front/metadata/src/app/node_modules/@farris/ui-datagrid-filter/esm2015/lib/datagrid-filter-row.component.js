/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DatagridFilterRowService } from './datagrid-filter-row.service';
import { Component, Input, ElementRef, Renderer2, NgZone, Output, EventEmitter, Injector, ViewEncapsulation, ViewChildren, QueryList, ChangeDetectorRef } from '@angular/core';
import { FormGroup, FormBuilder } from '@angular/forms';
import { DatagridComponent } from '@farris/ui-datagrid';
import { debounceTime } from 'rxjs/operators';
import { FilterCellEditorDirective } from './datagrid-filter-cell-editor.directive';
export class FilterRowComponent {
    /**
     * @param {?} fb
     * @param {?} el
     * @param {?} ngzone
     * @param {?} cd
     * @param {?} dfrs
     * @param {?} render
     * @param {?} inject
     */
    constructor(fb, el, ngzone, cd, dfrs, render, inject) {
        this.fb = fb;
        this.el = el;
        this.ngzone = ngzone;
        this.cd = cd;
        this.dfrs = dfrs;
        this.render = render;
        this.inject = inject;
        this.fixedLeft = false;
        this.fixedRight = false;
        this.delay = 300;
        this.conditionChange = new EventEmitter();
        this.form = new FormGroup({});
        this.filterRowConditionsScribe = this.dfrs.filterRowConditions$.pipe(debounceTime(this.delay)).subscribe((/**
         * @param {?} ccs
         * @return {?}
         */
        ccs => {
            this.conditionChange.emit(ccs);
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.form = this.createControl();
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.render.listen('document', 'click', (/**
             * @return {?}
             */
            () => {
                this.dfrs.closeFilterPanel();
            }));
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const nativeEl = this.el.nativeElement;
        this.tr = nativeEl.parentElement;
        nativeEl.querySelectorAll('td').forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            this.tr.append(n);
        }));
        nativeEl.style.display = 'none';
        this.dfrs.gridInstance = this.gridInstance;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.filterRowConditionsScribe) {
            this.filterRowConditionsScribe.unsubscribe();
            this.filterRowConditionsScribe = null;
        }
        if (this.tr) {
            /** @type {?} */
            const tds = this.tr.querySelectorAll('td');
            if (tds && tds.length) {
                tds.forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => {
                    if (!a.classList.contains('f-datagrid-header-checkbox') && !a.classList.contains('f-datagrid-cell-rownumber')) {
                        this.tr.removeChild(a);
                    }
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    createControl() {
        /** @type {?} */
        const group = this.fb.group({});
        this.columns.forEach((/**
         * @param {?} col
         * @return {?}
         */
        col => {
            if (col.colspan) {
                return;
            }
            /** @type {?} */
            const control = this.fb.control('');
            group.addControl(col.field, control);
        }));
        return group;
    }
    /**
     * @param {?=} emitEvent
     * @return {?}
     */
    clearFilterValue(emitEvent = true) {
        // this.form.reset();
        this.editors.forEach((/**
         * @param {?} c
         * @return {?}
         */
        c => {
            c.clearValue();
        }));
        this.dfrs.clear(emitEvent);
    }
    /**
     * @param {?} field
     * @param {?=} opts
     * @return {?}
     */
    removeField(field, opts) {
        this.dfrs.removeFilterField(field, opts);
    }
}
FilterRowComponent.decorators = [
    { type: Component, args: [{
                selector: '[filter-row]',
                template: "\r\n<!-- <td *ngIf=\"gridInstance.showCheckbox  && fixedLeft && gridInstance.enableDragColumn\"></td>\r\n<td *ngIf=\"gridInstance.showLineNumber && fixedLeft && gridInstance.enableDragColumn\"></td> -->\r\n<td *ngFor=\"let col of columns\" class=\"f-datagrid-header-cell f-datagrid-filter-td\" \r\n    style=\"text-align: center;\" [attr.id]=\"'filter-row_' + col.field \">\r\n    <ng-container filter-cell-editor [delay]=\"delay\" [gridInstance]=\"gridInstance\" [column]=\"col\" [group]=\"form\"></ng-container>\r\n</td>\r\n\r\n",
                providers: [
                    DatagridFilterRowService
                ],
                encapsulation: ViewEncapsulation.None,
                styles: [".filter-condition .list-group-item{padding:10px;background:#f8f8f8}.filter-condition .datalist{min-height:100px;max-height:200px;overflow:auto}.filter-condition .datalist::-webkit-scrollbar{width:15px;height:15px}.filter-condition .datalist::-webkit-scrollbar-thumb{background-color:#c2c2c2;border-radius:10px;background-clip:content-box}.filter-condition .datalist::-webkit-scrollbar-thumb:hover{background-color:#7d7d7d;border-radius:10px;background-clip:content-box}.filter-condition .datalist::-webkit-scrollbar-thumb:vertical,.filter-condition .datalist::-webkit-scrollbar-thumb:vertical:hover{border:3px solid transparent;border-left-width:4px}.filter-condition .datalist::-webkit-scrollbar-thumb:horizontal,.filter-condition .datalist::-webkit-scrollbar-thumb:horizontal:hover{border:3px solid transparent;border-top:4px solid transparent}.filter-condition .datalist::-webkit-scrollbar-track{background-color:#fafafa}.filter-condition .datalist::-webkit-scrollbar-track:vertical{border-left:1px solid #e8e8e8}.filter-condition .datalist::-webkit-scrollbar-track:horizontal{border-top:1px solid #e8e8e8}.filter-condition .datalist::-webkit-scrollbar-corner{background-color:#fafafa}.filter-condition farris-datalist .card{border:0}.filter-condition .card .list-group-item{padding-left:0;padding-right:0}.filter-condition .list-group-item.border-b1{border-bottom:1px solid #dde2eb!important;margin-bottom:0}.f-datagrid-filter-panel{background:#f8f8f8;position:absolute;z-index:999;box-shadow:0 1px 4px 1px rgba(186,191,199,.4);top:140px;left:1257px;width:200px;border-radius:3px;border:1px solid #babfc7}.f-datagrid-filter-panel .panel-header{height:36px;min-height:36px;border-bottom:1px solid #2196f3;text-align:center;line-height:36px;color:#2196f3}.f-datagrid-filter-td .filter-editor-disabled{color:rgba(24,29,31,.5);background-color:#f1f2f4;border-color:rgba(186,191,199,.3)}.f-datagrid-filter-td .filter-editor-disabled:hover{background-color:#f1f2f4}.f-datagrid-filter-td:hover{background-color:transparent}"]
            }] }
];
/** @nocollapse */
FilterRowComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: ElementRef },
    { type: NgZone },
    { type: ChangeDetectorRef },
    { type: DatagridFilterRowService },
    { type: Renderer2 },
    { type: Injector }
];
FilterRowComponent.propDecorators = {
    fixedLeft: [{ type: Input }],
    fixedRight: [{ type: Input }],
    columns: [{ type: Input }],
    gridInstance: [{ type: Input }],
    delay: [{ type: Input }],
    conditionChange: [{ type: Output }],
    editors: [{ type: ViewChildren, args: [FilterCellEditorDirective,] }]
};
if (false) {
    /** @type {?} */
    FilterRowComponent.prototype.fixedLeft;
    /** @type {?} */
    FilterRowComponent.prototype.fixedRight;
    /** @type {?} */
    FilterRowComponent.prototype.columns;
    /**
     * datagrid Instance
     * @type {?}
     */
    FilterRowComponent.prototype.gridInstance;
    /** @type {?} */
    FilterRowComponent.prototype.delay;
    /** @type {?} */
    FilterRowComponent.prototype.conditionChange;
    /** @type {?} */
    FilterRowComponent.prototype.editors;
    /** @type {?} */
    FilterRowComponent.prototype.filterRowConditionsScribe;
    /** @type {?} */
    FilterRowComponent.prototype.form;
    /** @type {?} */
    FilterRowComponent.prototype.tr;
    /**
     * @type {?}
     * @private
     */
    FilterRowComponent.prototype.fb;
    /**
     * @type {?}
     * @private
     */
    FilterRowComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FilterRowComponent.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    FilterRowComponent.prototype.cd;
    /** @type {?} */
    FilterRowComponent.prototype.dfrs;
    /**
     * @type {?}
     * @private
     */
    FilterRowComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    FilterRowComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZmlsdGVyLXJvdy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9kYXRhZ3JpZC1maWx0ZXItcm93LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDekUsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQWlCLFVBQVUsRUFBRSxTQUFTLEVBQ25FLE1BQU0sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFhLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVJLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEQsT0FBTyxFQUFjLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEUsT0FBTyxFQUFZLFlBQVksRUFBNkIsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQWFwRixNQUFNLE9BQU8sa0JBQWtCOzs7Ozs7Ozs7O0lBZ0IzQixZQUNZLEVBQWUsRUFDZixFQUFjLEVBQ2QsTUFBYyxFQUNkLEVBQXFCLEVBQ3RCLElBQThCLEVBQzdCLE1BQWlCLEVBQ2pCLE1BQWdCO1FBTmhCLE9BQUUsR0FBRixFQUFFLENBQWE7UUFDZixPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBQ3RCLFNBQUksR0FBSixJQUFJLENBQTBCO1FBQzdCLFdBQU0sR0FBTixNQUFNLENBQVc7UUFDakIsV0FBTSxHQUFOLE1BQU0sQ0FBVTtRQXRCbkIsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUNsQixlQUFVLEdBQUcsS0FBSyxDQUFDO1FBS25CLFVBQUssR0FBRyxHQUFHLENBQUM7UUFFWCxvQkFBZSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFLL0MsU0FBSSxHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBVWpCLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FDaEUsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FDM0IsQ0FBQyxTQUFTOzs7O1FBQUMsR0FBRyxDQUFDLEVBQUU7WUFDZCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuQyxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7SUFFTCxRQUFRO1FBQ0osSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUI7OztRQUFDLEdBQUcsRUFBRTtZQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsT0FBTzs7O1lBQUUsR0FBRyxFQUFFO2dCQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDakMsQ0FBQyxFQUFDLENBQUM7UUFDUCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7SUFFRCxlQUFlOztjQUNMLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWE7UUFDdEMsSUFBSSxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDO1FBQ2pDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDeEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsQ0FBQyxFQUFDLENBQUM7UUFDSCxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFFaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMvQyxDQUFDOzs7O0lBRUQsV0FBVztRQUNQLElBQUksSUFBSSxDQUFDLHlCQUF5QixFQUFFO1lBQ2hDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM3QyxJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDO1NBQ3pDO1FBQ0QsSUFBSSxJQUFJLENBQUMsRUFBRSxFQUFFOztrQkFDSCxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7WUFDMUMsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sRUFBRTtnQkFDbkIsR0FBRyxDQUFDLE9BQU87Ozs7Z0JBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ1osSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLDRCQUE0QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQyxFQUFFO3dCQUMzRyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDMUI7Z0JBQ0wsQ0FBQyxFQUFDLENBQUM7YUFDTjtTQUNKO0lBQ0wsQ0FBQzs7OztJQUVELGFBQWE7O2NBQ0gsS0FBSyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU87Ozs7UUFBQyxHQUFHLENBQUMsRUFBRTtZQUN2QixJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUU7Z0JBQUMsT0FBTzthQUFFOztrQkFDckIsT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNuQyxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDekMsQ0FBQyxFQUFDLENBQUM7UUFDSCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOzs7OztJQUVELGdCQUFnQixDQUFDLFNBQVMsR0FBRyxJQUFJO1FBQzdCLHFCQUFxQjtRQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU87Ozs7UUFBQyxDQUFDLENBQUMsRUFBRTtZQUNyQixDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbkIsQ0FBQyxFQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMvQixDQUFDOzs7Ozs7SUFFRCxXQUFXLENBQUMsS0FBYSxFQUFFLElBQTZCO1FBQ3BELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUM7OztZQXBHSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLDhoQkFBbUQ7Z0JBSW5ELFNBQVMsRUFBRTtvQkFDUCx3QkFBd0I7aUJBQzNCO2dCQUNELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOzthQUN4Qzs7OztZQWZtQixXQUFXO1lBRm1CLFVBQVU7WUFDeEQsTUFBTTtZQUF5RixpQkFBaUI7WUFGM0csd0JBQXdCO1lBQzZCLFNBQVM7WUFDMUIsUUFBUTs7O3dCQWtCaEQsS0FBSzt5QkFDTCxLQUFLO3NCQUNMLEtBQUs7MkJBRUwsS0FBSztvQkFFTCxLQUFLOzhCQUVMLE1BQU07c0JBRU4sWUFBWSxTQUFDLHlCQUF5Qjs7OztJQVZ2Qyx1Q0FBMkI7O0lBQzNCLHdDQUE0Qjs7SUFDNUIscUNBQStCOzs7OztJQUUvQiwwQ0FBeUM7O0lBRXpDLG1DQUFxQjs7SUFFckIsNkNBQStDOztJQUUvQyxxQ0FBdUY7O0lBRXZGLHVEQUF3Qzs7SUFDeEMsa0NBQXlCOztJQUN6QixnQ0FBd0I7Ozs7O0lBRXBCLGdDQUF1Qjs7Ozs7SUFDdkIsZ0NBQXNCOzs7OztJQUN0QixvQ0FBc0I7Ozs7O0lBQ3RCLGdDQUE2Qjs7SUFDN0Isa0NBQXFDOzs7OztJQUNyQyxvQ0FBeUI7Ozs7O0lBQ3pCLG9DQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEZpbHRlclJvd1NlcnZpY2UgfSBmcm9tICcuL2RhdGFncmlkLWZpbHRlci1yb3cuc2VydmljZSc7XHJcbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLFxyXG4gICAgTmdab25lLCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBJbmplY3RvciwgVmlld0VuY2Fwc3VsYXRpb24sIFZpZXdDaGlsZHJlbiwgUXVlcnlMaXN0LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1CdWlsZGVyIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBEYXRhQ29sdW1uLCBEYXRhZ3JpZENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktZGF0YWdyaWQnO1xyXG5pbXBvcnQgeyBkZWJvdW5jZSwgZGVib3VuY2VUaW1lLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBGaWx0ZXJDZWxsRWRpdG9yRGlyZWN0aXZlIH0gZnJvbSAnLi9kYXRhZ3JpZC1maWx0ZXItY2VsbC1lZGl0b3IuZGlyZWN0aXZlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdbZmlsdGVyLXJvd10nLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2RhdGFncmlkLWZpbHRlci1yb3cuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbXHJcbiAgICAgICAgJy4vZGF0YWdyaWQtZmlsdGVyLXJvdy5zY3NzJ1xyXG4gICAgXSxcclxuICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIERhdGFncmlkRmlsdGVyUm93U2VydmljZVxyXG4gICAgXSxcclxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcclxufSlcclxuZXhwb3J0IGNsYXNzIEZpbHRlclJvd0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcclxuICAgIEBJbnB1dCgpIGZpeGVkTGVmdCA9IGZhbHNlO1xyXG4gICAgQElucHV0KCkgZml4ZWRSaWdodCA9IGZhbHNlO1xyXG4gICAgQElucHV0KCkgY29sdW1uczogRGF0YUNvbHVtbltdO1xyXG4gICAgLyoqIGRhdGFncmlkIEluc3RhbmNlICovXHJcbiAgICBASW5wdXQoKSBncmlkSW5zdGFuY2U6IERhdGFncmlkQ29tcG9uZW50O1xyXG5cclxuICAgIEBJbnB1dCgpIGRlbGF5ID0gMzAwO1xyXG5cclxuICAgIEBPdXRwdXQoKSBjb25kaXRpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgQFZpZXdDaGlsZHJlbihGaWx0ZXJDZWxsRWRpdG9yRGlyZWN0aXZlKSBlZGl0b3JzOiBRdWVyeUxpc3Q8RmlsdGVyQ2VsbEVkaXRvckRpcmVjdGl2ZT47XHJcblxyXG4gICAgZmlsdGVyUm93Q29uZGl0aW9uc1NjcmliZTogU3Vic2NyaXB0aW9uO1xyXG4gICAgZm9ybSA9IG5ldyBGb3JtR3JvdXAoe30pO1xyXG4gICAgdHI6IEhUTUxUYWJsZVJvd0VsZW1lbnQ7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGZiOiBGb3JtQnVpbGRlcixcclxuICAgICAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgICAgIHByaXZhdGUgbmd6b25lOiBOZ1pvbmUsXHJcbiAgICAgICAgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgcHVibGljIGRmcnM6IERhdGFncmlkRmlsdGVyUm93U2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyLFxyXG4gICAgICAgIHByaXZhdGUgaW5qZWN0OiBJbmplY3Rvcikge1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlclJvd0NvbmRpdGlvbnNTY3JpYmUgPSB0aGlzLmRmcnMuZmlsdGVyUm93Q29uZGl0aW9ucyQucGlwZShcclxuICAgICAgICAgICAgICAgIGRlYm91bmNlVGltZSh0aGlzLmRlbGF5KSxcclxuICAgICAgICAgICAgKS5zdWJzY3JpYmUoY2NzID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29uZGl0aW9uQ2hhbmdlLmVtaXQoY2NzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZm9ybSA9IHRoaXMuY3JlYXRlQ29udHJvbCgpO1xyXG4gICAgICAgIHRoaXMubmd6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXIubGlzdGVuKCdkb2N1bWVudCcsICdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGZycy5jbG9zZUZpbHRlclBhbmVsKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICBjb25zdCBuYXRpdmVFbCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcclxuICAgICAgICB0aGlzLnRyID0gbmF0aXZlRWwucGFyZW50RWxlbWVudDtcclxuICAgICAgICBuYXRpdmVFbC5xdWVyeVNlbGVjdG9yQWxsKCd0ZCcpLmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudHIuYXBwZW5kKG4pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIG5hdGl2ZUVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG4gICAgICAgIHRoaXMuZGZycy5ncmlkSW5zdGFuY2UgPSB0aGlzLmdyaWRJbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICBpZiAodGhpcy5maWx0ZXJSb3dDb25kaXRpb25zU2NyaWJlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyUm93Q29uZGl0aW9uc1NjcmliZS51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlclJvd0NvbmRpdGlvbnNTY3JpYmUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy50cikge1xyXG4gICAgICAgICAgICBjb25zdCB0ZHMgPSB0aGlzLnRyLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkJyk7XHJcbiAgICAgICAgICAgIGlmICh0ZHMgJiYgdGRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGRzLmZvckVhY2goYSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhLmNsYXNzTGlzdC5jb250YWlucygnZi1kYXRhZ3JpZC1oZWFkZXItY2hlY2tib3gnKSAmJiAhYS5jbGFzc0xpc3QuY29udGFpbnMoJ2YtZGF0YWdyaWQtY2VsbC1yb3dudW1iZXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyLnJlbW92ZUNoaWxkKGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUNvbnRyb2woKSB7XHJcbiAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmZiLmdyb3VwKHt9KTtcclxuICAgICAgICB0aGlzLmNvbHVtbnMuZm9yRWFjaChjb2wgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY29sLmNvbHNwYW4pIHtyZXR1cm47IH1cclxuICAgICAgICAgICAgY29uc3QgY29udHJvbCA9IHRoaXMuZmIuY29udHJvbCgnJyk7XHJcbiAgICAgICAgICAgIGdyb3VwLmFkZENvbnRyb2woY29sLmZpZWxkLCBjb250cm9sKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZ3JvdXA7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJGaWx0ZXJWYWx1ZShlbWl0RXZlbnQgPSB0cnVlKSB7XHJcbiAgICAgICAgLy8gdGhpcy5mb3JtLnJlc2V0KCk7XHJcbiAgICAgICAgdGhpcy5lZGl0b3JzLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgIGMuY2xlYXJWYWx1ZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmRmcnMuY2xlYXIoZW1pdEV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVGaWVsZChmaWVsZDogc3RyaW5nLCBvcHRzPzogeyBlbWl0RXZlbnQ6IGJvb2xlYW4gfSkge1xyXG4gICAgICAgIHRoaXMuZGZycy5yZW1vdmVGaWx0ZXJGaWVsZChmaWVsZCwgb3B0cyk7XHJcbiAgICB9XHJcbn1cclxuIl19