{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@farris/ui-treetable/lib/hotkeys.ts","ng://@farris/ui-treetable/lib/treetable.service.ts","ng://@farris/ui-treetable/lib/virtualized-loader.service.ts","ng://@farris/ui-treetable/lib/search.handle.ts","ng://@farris/ui-treetable/lib/treetable.component.ts","ng://@farris/ui-treetable/lib/find-input.component.ts","ng://@farris/ui-treetable/lib/high-light.pipe.ts","ng://@farris/ui-treetable/lib/nodes_pager/nodes-pager.component.ts","ng://@farris/ui-treetable/lib/nodes_pager/childs-loading.component.ts","ng://@farris/ui-treetable/lib/cell-tips.pipe.ts","ng://@farris/ui-treetable/lib/disable-node.pipe.ts","ng://@farris/ui-treetable/lib/treetable.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","TTHotkeys","addShortcut","options","_this","merged","defaults","keys","indexOf","replace","event","description","hotkeys","set","Observable","observer","dispose","eventManager","addEventListener","element","preventDefault","delete","Injectable","args","providedIn","EventManager","Map","document","TreetableService","onSelectionChange","selected","selectionSource","onDblClick","rowNode","dblClickSource","onChangeCheckboxStatus","changeCheckboxStatus","onInsert","treeNode","parent","insertNode","onRemove","removeNode","onUpdate","updateNode","columnIsVisible","col","tt","visible","undefined","checkColumnsForGroupHeader","columns","_columns","getDataColumns","getDataFields","cols","j","forEach","colspan","splice","fields","_cols","field","hAlign","d","includes","f","filter","Subject","selectionSource$","asObservable","dblClickSource$","changeCheckboxStatus$","insertNode$","removeNode$","updateNode$","VirtualizedLoaderService","getTableHeight","height","getTableHeaderHeight","headerBox","nativeElement","getBoundingClientRect","getTableBodyHeight","getTableWidth","width","getRowHeight","rowHeight","getRowNodes","scrollTop","top","rows","topHideHeight","bottomHideHeight","rowNodes","getCurrentAllRowNodes","minTop","maxTop","data","SearchHandle","research","from","_a","ttInstance","searchData","allNodes","search","cloneDeep","state","searchOnServer","values","searchOnClient","searchRowNodes","_updateSerializedValues","updateSerializedValue","checkeds","checkedNodes","map","idField","detectChanges","resize","psRef","directiveRef","update","visibleItems","pids","parents","id","flat","pidArr","Array","Set","some","item","expanded","updateNodeProperty","serializedValue","resetTreeData","findParent","res","find","t1","searchExpression","c","targetValue","getValue","node","parseFloat","writeConsole","reduce","flag","curr","split","getFindTextTotal","nodes","_fields","trim","toLowerCase","findParents","parentNode","arr","t2","children","tn","a","NODES_PAGER_COLUMN_FIELD","TreeTableColumnDirective","Directive","selector","Input","defineProperty","TreeTableComponent","_groupColumns","ttService","cs","_data","val","isLoadNewDataSetEmpty","initNodeStatus","setNewColumnsWidth","loadDataSuccess","content","headerCheckboxCmp","_selections","vals","findRowNode","ids_1","selectValues","difference","setTimeout","selectValuesChange","emit","_selectedRow","selectValue","selectValueChange","_checkeds","treeNodes","ids_2","checkValues","checkValuesChange","msg","type","debugSer","checkOptons","nowrap","virtualized","reSetSize","setScorllBodyHeight","multiSelect","singleSelect","showCheckbox","checkOnSelect","selectOnCheck","beforeSortColumn","of","fit","renderer","addClass","el","parentEl","parentElement","setStyle","beforeClickNode","beforeCheckAll","beforeUnCheckAll","autoWidth","fitColumns","resizableColumns","disabledRow","ngOnInit","_UUID","styleElement","utils","createStyleSheet","styleSheetId","checkColumnOption","ngZone","runOutsideAngular","ro","ResizeObserver","entries","contentRect","target","showBorder","observe","paginationOptions","initPaginationOptions","ngOnDestroy","unobserve","disconnect","findKeysHandler","unsubscribe","removeStyleSheet","farrisInstances","destroy","destroy$","complete","ngOnChanges","changes","isFirstChange","isDataChanged","currentValue","previousValue","disabled","hovered","enableFindText","setFindText","selectNode","selectNodes","pageIndex","currentPage","pageSize","itemsPerPage","pageList","total","totalItems","setTableWidth","allColumnsWidth","ngAfterViewChecked","ngAfterContentInit","templates","getType","headerTemplate","template","bodyTemplate","columnsRef","ttc2columns","subscribe","ngAfterViewInit","containerElement","querySelector","registerShortcuts","setRightFixedColumnShadow","add","appendCssRules","sheet","nodeName","div","closest","style","overflow","timer","loadedTimer","pipe","takeUntil","loadedData","headerCells","firstRowCells","showHeader","headerTable","querySelectorAll","bodyTable","td","index","fieldName","getAttribute","colWidth","toFixed","minWidth","columnCssName","checkGroupColumns","groupColumns","ids","parentId","childCols","left","right","pCol","pc","fixed","sortColumnsByFixed","updateColumns","fixedLeft","fixedCenter","fixedRight","rightWidthTotal_1","paginationForChildren","pagerBarCol","title","align","nodesPagerBar","rowspan","useGroupHeader","colWidthTotal","fixedCols","fixedRightColumns","fixedLeftColumns","setCellWidthCss","fixedColumns","cssRules","isVisible","ruleName","cssRule","getCssRule","display","stylecss","groupHeaderColCsses","groupColCssName","appendCssRules2","autoFitColumns","onPageChange","$event","pageChanged","onPageSizeChange","pageSizeChanged","updatePageInfo","pageInfo","obj","remote","pagerOnServer","getNodeText","rowdata","fast","isMultilingualField","localeService","localeId","onlySelectSelf","showFilterBar","_hotKeys","inputGroup","textbox","onSearch","enable","showFindInput","cdRef","getCustomCls","clsType","cls","fn","rowStyler","cellStyler","rowCls","arrcls","isArray","rowClsObj_1","getRowCls","getCellCls","getRealColWidth","currentCol","fixedWidth","onResized","resizeSer","windowResized","ps","instance","containerWidth","scrollbarXLeft","contentWidth","rightCSSRule","setFixedColumnShadow","x","fixedLeftCssRuleKey","fixedRightCssRuleKey","leftCSSRule","removeCssRule","srcElement","offsetWidth","scrollWidth","onScrollX","scrollLeft","scrollX","onScrollY","renderData","scrolltop","scrollLoader","scrollY","onSearchValueChange","onClearSearchValue","searchValueChange","searched","clearSearchValue","onCellClick","cellClick","trackByFn","formatData","formatter","locale","colFormatSer","format","columnsChanged","list","setWidth","offsetHeight","h","parseInt","renderVirtualRowNodes","nodePosY","scrollY_1","_rownodes","elementRef","searchHandle","serializeNodes","fixedHeader","level","parentIds","selectable","showIcon","onlySelectLeaf","leaf","keyid","isSelected","findIndexInSelection","isChecked","findIndexInCheckeds","isLast","isFirst","parentRn","parentID","_parents","parentRowNode","last","first","selectedRow","selections","findIndex","v","unSelectedCurrentRowEmit","currSelected","nodeUnSelect","_singleSelectNode","clearSelections","selectRowIndex","rowIndex","clearCheckeds","setCheckeds","sp","originalEvent","nodeSelected","_singleUnSelectNode","__singleSelectNode","keepSelect","__multiSelectNode","singleSelectWhenMultiSelect","handleRowClick","indeterminate","setSelections","rowSelectChangeParams","cascadeNodes","nodeChecked","nodeUnChecked","selectWhenChecked","isInArray","items","updated","getDiffrentData","_nodes_1","cascadeCheckedNode","checked","sync","isIndeterminate","propagateSelectionDown","cascadeCheck","cascadeDown","rn","row","propagateSelectionUp","cascadeUp","rns_1","reverse","updateCheckboxStatus","updateNodeStatus","checkedItem","chked","updateAllCheckboxStatus","toggleNodeWithCheckbox","stopPropagation","toggleNodesWithCheckbox","checkAllNodes","unCheckAllNodes","status","showCheckAll","chkAll","updateParentCheckboxStatus","pNodes","rnid","updateParentsCheckStatus","findRowNodes","sort","getCheckboxStatus","len","uncheckedLength","checkedLength","childNodes","findIndexIn","equals","source","toggleExpand","deep","childrenEmptyEmitExpand","toggleVisible","expand","collapse","rid_1","rnParent","_r","setRowVisible_1","expandNode","render","expandAll","expandAllNodes","expandNodes","expandAllNodesBy","collapseNode","collapseAll","collapseAllNodes","getContainerOffset","rect","body","onColumnResizeBegin","containerLeft","Math","round","lastResizerHelperX","pageX","onColumnResize","resizerHelperVC","onColumnResizeEnd","column","offsetLeft","delta","newColumnWidth","resizeColumnIndex","colField_1","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","resizeColGroup","removeClass","table","colGroup","Error","nextCol","insert","appendNew","append","emitAppendNew","appendChildren","loadChildren","remove","nodeId","removed","extend","nodeid","property","k","scorllBodyHeight","headerWrap","hh","clientHeight","_headerHeight","headerHeight","localStorage","getItem","pagination","pagerHeight","w","size","scrollToY","scrollToX","loadData","showLines","empty","clearAll","markForCheck","nodeIds","selectFirstNode","firstCanSelectNode","scrollToCurrentRow","trId","trEle","getElementById","isElementInViewport","scrollIntoView","block","scrollIntoViewIfNeeded","getBrowserType","ff","getFFVer","inline","containerEl","viewPortHeight","offsetTop","_scrollToNode","scrollToCurrentNode","showRowsOnePager","ceil","pid","top_1","gotocurrent","selectNodeChangedSubject","unSelectNode","emitNodeSelected","join","unSelectNodes","rownodes","checkedNode","isEnableMultiSelect","unCheckedNode","rownode","unNodes","_checkedNodes","parentIDS","closeCascade","_cascade","unCheckedNodes","findNode","getRoot","checkAll","unCheckAll","getNodeIconFromData","useIconFromData","iconField","_iconField","getTreeIcon","leafIcon","expandIcon","collapseIcon","f-loading-round","icon","expandedIcon","collapsedIcon","_b","whenDataIconEmptyUseDefault","collapsedExpression","expandedExpression","leafExpression","icons","iconCls","compare","b","localeCompare","_sort","r1","r2","sortFields","sortName","orders","sortOrder","sn","so","orderby","this_1","sorter","v1","v2","clientSort","sortedData","bind","sortChildNodes","onSortColumnClick","sortable","sortOrders","colOrder","order","newOrder","_order","multiSort","remoteSort","columnSorted","findKeyWords","searchValue","findField","findValue","result","findResult","findCount","findCurrent","highLightKeywords","resetFindText","nextFindValue","step","allHighLights","active","_index","nextRow","clearTimeout","tr","highLightDom","closeFindPanel","y","animations","showOrHideColumn","isHide","showColumn","hideColumn","showChildsLoading","__colspan__","__childs_loading__","onChildsPageChanged","childsPageChanged","trId2DataId","onKeydownEvent","key","newIdx","blur","trs","trCount","selectedTrIndex","code","_tr","getChildNodes","getParentNodes","Component","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","ResizeService","Renderer2","CommonUtils","ColumnFormatService","ChangeDetectorRef","NgZone","Injector","Output","ContentChildren","FarrisTemplateDirective","ViewChild","PerfectScrollbarComponent","FarrisContextMenuDirective","HostListener","shortcuts","injector","showSearchField","allColumnsTitle","showLinesOnHover","striped","loadDataType","emptyMessage","indentSpacing","foldIcon","unfoldIcon","expandLevel","EventEmitter","dblClickExpand","pagerViewMode","showPageList","showPageInfo","showPageNumber","pagerLabelSize","showGotoInput","showTotalForChildren","enableContextMenu","contextMenuItems","dblClick","searchButtonText","BehaviorSubject","second","secondItem","onBeforeShowContextMenu","contextMenuDom","rowID","rowNode_1","go$","show","beforeShowContextMenu","tree","switchMap","menus","viewportW","targetW","focusTargetWidth","get","LocaleService","idService","IdService","FarrisComponentInstanceService","uuid","random","slice","DebugService","useDebugMode","TTBodyComponent","TreeTableTogglerComponent","togglerEl","treeNodeIcon","isShowTriangle","showTriangle","noChilds","hasChildren","expandSub","updateIcon","collapseSub","addNewSub","subscriptions","removeStyle","reSetLines","currenChildrenLength","previousChildrenLength","ngDoCheck","unAllSubscriptions","lineEls","_renderLines","renderLines","noLineStyle","referEl","createLeafNodeLines","insertBefore","newLineElement","nearLine","border","newLineEl","createElement","isTopNode","l1","l2","dessert","appendChild","registerClickEvent","listen","onClick","HostBinding","ngzone","TreeTableSelectRowDirective","subscription","onclick","isEnabled","delay","prevent","rowClick","selectRowDisabled","toggleClass","TreeTableHeaderCheckboxComponent","handleClick","checkedChange","TreeTableCheckboxComponent","chk","cls1","DblClickRowDirective","enableDblClick","selectRowDir","ondblclick","prevEl","previousSibling","dblclickNode","togglerTag","visibility","decorators","Optional","Self","CustomRowStyleDirective","setRowStyle","sty_1","cls_1","TTCustomCellStyleDirective","setCellStyle","cellCls","styler","rowData","ccs_1","TTResizableColumnDirective","isEnable","resizer","className","resizerMouseDownListener","onMouseDown","onMouseEnter","enableResize","bindDocumentEvents","documentMouseMoveListener","onMouseMove","documentMouseUpListener","onMouseUp","unbindDocumentEvents","removeEventListener","FindInputComponent","keyupEventSub","fromEvent","input","switch","keyCode","debounceTime","valueChanged","focus","onClose","close","onEnter","enterHandler","current","count","HighlightPipe","transform","text","keyword","needSearch","pattern","regex","RegExp","sanitizer","bypassSecurityTrustHtml","replaceContent","match","parseHTML","html","context","innerHTML","cloneNode","strMatch1","strs","strs_1","__values","tslib_1.__values","strs_1_1","aa","rep_old","rep_new","re2","Pipe","name","DomSanitizer","TreetableNodesPagerComponent","getPagerCount","setPagerInfo","pagerInfo","showPager","isFirstPager","isLastPager","previous","setCurrent","page","pageChange","pagerChanged","newPageIndex","cd","showTotal","ChildsLoadingComponent","CellTipsPipe","_i","showTips","getCellTooltipContent","txt","commonUtils","tipContent","getEnumTitleFromColumnOptions","DisableNodePipe","selectable2","TreeTableModule","NgModule","imports","CommonModule","FormsModule","FarrisCommonModule","forRoot","PerfectScrollbarModule","InputGroupModule","LocaleModule","DataColumnModule","PaginationModule","FarrisContextMenuModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { EventManager } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\n\r\ninterface HotkeyOptions {\r\n    element: any;\r\n    description: string | undefined;\r\n    keys: string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TTHotkeys {\r\n    hotkeys = new Map();\r\n    defaults: Partial<HotkeyOptions> = {\r\n        element: document\r\n    };\r\n\r\n    constructor(private eventManager: EventManager) {\r\n    }\r\n\r\n    addShortcut(options: Partial<HotkeyOptions>) {\r\n        const merged = { ...this.defaults, ...options };\r\n        if (merged.keys.indexOf('ctrl') > -1) {\r\n            merged.keys = merged.keys.replace('ctrl', 'control');\r\n        }\r\n        const event = `keydown.${merged.keys}`;\r\n\r\n        if (merged.description) {\r\n            this.hotkeys.set(merged.keys, merged.description);\r\n        }\r\n\r\n        return new Observable(observer => {\r\n            const handler = (e) => {\r\n                e.preventDefault();\r\n                observer.next(e);\r\n            };\r\n\r\n            const dispose = this.eventManager.addEventListener(merged.element, event, handler);\r\n\r\n            return () => {\r\n                dispose();\r\n                this.hotkeys.delete(merged.keys);\r\n            };\r\n        });\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { flatten } from 'lodash-es';\r\nimport { RowNode, TreeNode } from './types/treenode';\r\nimport { TreeTableColumn } from './types/treetable-column';\r\n\r\n@Injectable()\r\nexport class TreetableService {\r\n\r\n    private selectionSource = new Subject();\r\n    private dblClickSource = new Subject();\r\n    private changeCheckboxStatus = new Subject<RowNode>();\r\n    private removeNode = new Subject<RowNode>();\r\n    private insertNode = new Subject<TreeNode>();\r\n    private updateNode = new Subject<RowNode>();\r\n\r\n\r\n    selectionSource$: Observable<any> = this.selectionSource.asObservable();\r\n    dblClickSource$: Observable<any> = this.dblClickSource.asObservable();\r\n    changeCheckboxStatus$: Observable<RowNode> = this.changeCheckboxStatus.asObservable();\r\n    insertNode$: Observable<TreeNode> = this.insertNode.asObservable();\r\n    removeNode$: Observable<RowNode> = this.removeNode.asObservable();\r\n    updateNode$: Observable<RowNode> = this.updateNode.asObservable();\r\n\r\n    onSelectionChange(selected?: TreeNode[]) {\r\n        this.selectionSource.next(selected);\r\n    }\r\n\r\n    onDblClick(rowNode: RowNode) {\r\n        this.dblClickSource.next(rowNode);\r\n    }\r\n\r\n    onChangeCheckboxStatus(rowNode: RowNode) {\r\n        this.changeCheckboxStatus.next(rowNode);\r\n    }\r\n\r\n    onInsert(treeNode: TreeNode, parent?: TreeNode) {\r\n        this.insertNode.next(treeNode);\r\n    }\r\n\r\n    onRemove(rowNode: RowNode) {\r\n        this.removeNode.next(rowNode);\r\n    }\r\n\r\n    onUpdate(rowNode: RowNode) {\r\n        this.updateNode.next(rowNode);\r\n    }\r\n\r\n    columnIsVisible(col, tt) {\r\n        if (col.visible === undefined) {\r\n            return true;\r\n        }\r\n        if (typeof col.visible === 'function') {\r\n            return col.visible(tt);\r\n        }\r\n\r\n        return col.visible;\r\n    }\r\n\r\n    checkColumnsForGroupHeader(columns: any, tt: any) {\r\n        let _columns = [];\r\n        if (columns && columns.length) {\r\n            _columns = this.getDataColumns(columns);\r\n        }\r\n        return {\r\n            columns: _columns\r\n        };\r\n    }\r\n\r\n\r\n    private getDataFields(cols, length) {\r\n        let i = 0;\r\n        let j = 0;\r\n        cols.forEach(n => {\r\n            const colspan = n.colspan || 1;\r\n            if (i + colspan <= length) {\r\n                i += colspan;\r\n                j++;\r\n            }\r\n        });\r\n        return cols.splice(0, j);\r\n    }\r\n\r\n\r\n    private getDataColumns(cols) {\r\n        if (!cols || !cols.length) {\r\n            return [];\r\n        }\r\n\r\n        let fields = [];\r\n        for (let i = 0; i < cols.length; i++) {\r\n            let _cols = cols[i];\r\n            if (cols[i] && !cols[i].length) {\r\n                _cols = [...fields];\r\n                fields = [];\r\n            }\r\n            _cols.forEach(n => {\r\n                if (!n.field && n.colspan && n.colspan > 1) {\r\n\r\n                    if (n['halign']) {\r\n                        n.hAlign = n['halign'];\r\n                    }\r\n\r\n                    this.getDataFields(cols[i + 1], n.colspan).forEach(d => {\r\n                        if (!fields.includes(f => f.field === d.field)) {\r\n                            fields.push(d);\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (!fields.includes(f => f.field === n.field)) {\r\n                        fields.push(n);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return fields.filter(n => !n.colspan || n.colspan === 1);\r\n    }\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-05-23 10:27:09\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-02 09:08:25\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { TreeTableComponent } from './treetable.component';\r\nimport { RowNode } from './types/treenode';\r\n\r\nexport class VirtualizedLoaderService {\r\n    constructor(private tt: TreeTableComponent) {}\r\n\r\n    getTableHeight() {\r\n        return this.tt.height;\r\n    }\r\n    getTableHeaderHeight() {\r\n        return this.tt.headerBox.nativeElement.getBoundingClientRect().height;\r\n    }\r\n    getTableBodyHeight() {\r\n        return this.tt.height - this.getTableHeaderHeight();\r\n    }\r\n    getTableWidth() {\r\n        return this.tt.width;\r\n    }\r\n\r\n    getRowHeight() {\r\n        return this.tt.rowHeight;\r\n    }\r\n\r\n\r\n    getRowNodes(scrollTop: number) {\r\n        let top = 0;\r\n        const rows = [];\r\n        let topHideHeight = 0;\r\n        let bottomHideHeight = 0;\r\n        \r\n\r\n        const rowNodes = this.tt.getCurrentAllRowNodes();\r\n\r\n        // const {rowNodes } = this.tt.state;\r\n        const rowHeight = this.getRowHeight();\r\n        const minTop = scrollTop;\r\n        const maxTop = minTop + this.getTableHeight() + rowHeight;\r\n        for (let i = 0; i < rowNodes.length; i++) {\r\n            const n: RowNode = rowNodes[i];\r\n            if ( !n.visible) {\r\n                continue;\r\n            }\r\n            top += rowHeight;\r\n            if (top + rowHeight < minTop) {\r\n                topHideHeight += rowHeight;\r\n                continue;\r\n            } else {\r\n                if (top > maxTop) {\r\n                    bottomHideHeight += rowHeight;\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            rows.push(n);\r\n        }\r\n\r\n        return {\r\n            data: rows,\r\n            topHideHeight,\r\n            bottomHideHeight\r\n        };\r\n    }\r\n}\r\n","import { extend } from 'lodash-es';\r\n/*\r\n * @Author: ç¯çç§æ(lucas huang)\r\n * @Date: 2018-12-18 13:38:51\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-11-15 15:13:56\r\n * @Company: Inspur\r\n * @Version: v0.0.1\r\n */\r\nimport { TreeTableComponent } from './treetable.component';\r\nimport { RowNode, TreeNode } from './types/treenode';\r\nimport { cloneDeep } from 'lodash-es';\r\nexport class SearchHandle {\r\n    allNodes = [];\r\n    constructor(private ttInstance: TreeTableComponent) {\r\n    }\r\n\r\n    // å·æ°æ¥è¯¢ç»æ\r\n    research(from: 'client'|'server' = 'client' ) {\r\n        const { field, value } = this.ttInstance.searchData;\r\n        this.allNodes = [];\r\n        this.search(field, value, from);\r\n    }\r\n\r\n    search(field: string, value: string, from: 'client'|'server' = 'client'): any {\r\n        if (!this.allNodes.length) {\r\n            this.allNodes = cloneDeep(this.ttInstance.state.rowNodes);\r\n        }\r\n        switch (from) {\r\n            case 'server':\r\n                this.searchOnServer(field, value);\r\n                break;\r\n            default:\r\n                if (value !== '' && value !== undefined) {\r\n                    const values = this.searchOnClient(field, value, this.allNodes);\r\n                    this.ttInstance.state.searchRowNodes = null;\r\n                    this._updateSerializedValues(values);\r\n                } else {\r\n                    this.ttInstance.updateSerializedValue();\r\n                }\r\n\r\n                if (this.ttInstance.checkeds && this.ttInstance.checkeds.length) {\r\n                    this.ttInstance.checkedNodes(this.ttInstance.checkeds.map(n => n.data[this.ttInstance.idField]));\r\n                    this.ttInstance['updateNodeStatus']();\r\n                    this.ttInstance.detectChanges();\r\n                } else {\r\n                    this.ttInstance.resize();\r\n                    this.ttInstance.detectChanges();\r\n                    if (this.ttInstance.psRef) {\r\n                        this.ttInstance.psRef.directiveRef.update();\r\n                    }\r\n                }\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _updateSerializedValues(visibleItems: RowNode[]) {\r\n        const pids = (visibleItems.map(n => [...n.parents, n.id]) as any).flat();\r\n        const pidArr = Array.from(new Set(pids));\r\n\r\n        const rowNodes =  this.allNodes.filter(n => pidArr.some(item=>item==n.id)).map(r => {\r\n            r.expanded = true;\r\n            this.ttInstance.updateNodeProperty(r.id, {expanded: true });\r\n            return r;\r\n        });\r\n\r\n        this.ttInstance.serializedValue = this.resetTreeData(null, rowNodes);\r\n        this.ttInstance.state.searchRowNodes = this.ttInstance.serializedValue;\r\n    }\r\n\r\n    findParent(item: TreeNode, allNodes: any[]) {\r\n        let res = [];\r\n        if (item && allNodes && allNodes.length) {\r\n            const p = allNodes.find(t1 => t1.id === item.data[this.ttInstance.idField]);\r\n            res.push(p);\r\n            if (p.parent) {\r\n                res = res.concat(this.findParent(p.parent, allNodes));\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private searchExpression(item: RowNode, value: string, fields: string[] = []) {\r\n        const _fields = fields.length ? fields : this.ttInstance.columns.map(c => c.field);\r\n        const results = _fields.map(f => {\r\n            const targetValue = '' +   this.getValue(f, item.node.data);\r\n            if (targetValue !== undefined) {\r\n                if (typeof targetValue === 'number') {\r\n                    return targetValue === parseFloat(value);\r\n                } else {\r\n                    return targetValue.indexOf(value) > -1;\r\n                }\r\n            } else {\r\n                this.ttInstance.writeConsole(`ä¸å­å¨å ${f}`);\r\n            }\r\n        });\r\n\r\n        return results.reduce((flag, curr) => {\r\n            return flag || curr;\r\n        }, false);\r\n    }\r\n\r\n    private getValue(field, data) {\r\n        if (field) {\r\n            if (field.indexOf('.') > -1) {\r\n                try {\r\n                return field.split('.').reduce( (r, f) => {\r\n                    if (r) {\r\n                        return r[f];\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                }, data );\r\n            } catch {\r\n                this.ttInstance.writeConsole(`å­æ®µ ${field} ä¸å­å¨ã`)\r\n            }\r\n            } else {\r\n                return data[field];\r\n            }\r\n        }\r\n    }\r\n\r\n    getFindTextTotal(field: string, value: string, nodes: RowNode[]) {\r\n        let t = 0;\r\n        const getCount = (fields): any => {\r\n            let c = 0;\r\n            nodes.forEach(n => {\r\n                fields.forEach(f => {\r\n                    const targetValue = '' +   this.getValue(f, n.node.data);\r\n                    if (targetValue !== undefined) {\r\n                        if (targetValue.indexOf(value) > -1) {\r\n                            c++;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            return c;\r\n        };\r\n        let _fields = [field];\r\n        if (field === '*') {\r\n            _fields = this.ttInstance.columns.map(c => c.field);\r\n\r\n        } else if (field.indexOf(',') > -1) {\r\n            _fields = field.split(',').map(f => f.trim());\r\n        }\r\n\r\n        t = getCount(_fields);\r\n        return t;\r\n    }\r\n\r\n    searchOnClient(field: string, value: string, nodes: RowNode[]) {\r\n        let resultNodes: RowNode[] = [];\r\n        if (!value) {\r\n            return [];\r\n        }\r\n        if (field === '*') {\r\n            resultNodes = nodes.filter(n => this.searchExpression(n, value));\r\n        } else if (field.indexOf(',') > -1) {\r\n            resultNodes = nodes.filter(n => this.searchExpression(n, value, field.split(',').map(f => f.trim())));\r\n        } else {\r\n            value = value.toLowerCase();\r\n            if (field.indexOf('.') === -1) {\r\n                resultNodes = nodes.filter(n => ('' + n.node.data[field]).toLowerCase().indexOf(value) > -1);\r\n            } else {\r\n                resultNodes = nodes.filter(n => ('' + this.getValue(field, n.node.data)).toLowerCase().indexOf(value) > -1);\r\n            }\r\n        }\r\n\r\n        return resultNodes;\r\n    }\r\n\r\n    findParents(rowNodes, allNodes) {\r\n        let res = [];\r\n        rowNodes.forEach(item => {\r\n            res = res.concat(this.findParent(item.node, allNodes));\r\n        });\r\n\r\n        return Array.from(new Set(res));\r\n    }\r\n\r\n    private resetTreeData(parentNode: RowNode, visibleItems: RowNode[]) {\r\n        let res = [];\r\n        let arr = [];\r\n        if (parentNode === null) {\r\n            arr = visibleItems.filter(t2 => t2.parent === parentNode);\r\n        } else {\r\n            parentNode.node.expanded = true;\r\n            arr = visibleItems.filter(t2 => t2.parent && t2.parent.data[this.ttInstance.idField] === parentNode.id);\r\n            if (!arr.length) {\r\n                parentNode.node.children = [];\r\n            } else {\r\n                parentNode.node.children = arr.map( tn => tn.node );\r\n            }\r\n        }\r\n        arr.forEach( a => {\r\n            a.visible = true;\r\n            res.push(a);\r\n            res = res.concat(this.resetTreeData(a, visibleItems));\r\n        });\r\n        return cloneDeep(res);\r\n    }\r\n\r\n    private searchOnServer(field: string, value: string) {\r\n\r\n    }\r\n\r\n}\r\n","import { switchMap, takeUntil } from 'rxjs/operators';\r\n/*\r\n* @Author: ç¯çç§æ(lucas huang)\r\n * @Date: 2018-12-18 18:44:13\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-11-29 08:41:39\r\n * @Company: Inspur\r\n * @Version: v0.0.1\r\n */\r\n\r\nimport {\r\n    Component, OnInit, Input, TemplateRef, Directive,\r\n    ContentChildren, QueryList, AfterContentInit, OnDestroy,\r\n    HostListener, Output, EventEmitter, ElementRef, Injector,\r\n    ViewChild, Optional, Self, AfterViewInit, NgZone, Renderer2, ViewEncapsulation,\r\n    OnChanges, SimpleChanges, AfterViewChecked, ChangeDetectionStrategy, ChangeDetectorRef, DoCheck, HostBinding\r\n} from '@angular/core';\r\n\r\nimport { FarrisTemplateDirective, CommonUtils, IdService, FarrisComponentInstanceService, DebugService } from '@farris/ui-common';\r\nimport { ResizeService } from '@farris/ui-common/events';\r\nimport { ColumnFormatService, ColumnFormatter } from '@farris/ui-common/column';\r\nimport { InputGroupComponent } from '@farris/ui-input-group';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { PerfectScrollbarComponent } from '@farris/ui-perfect-scrollbar';\r\n\r\nimport { Subscription, Observable, of, BehaviorSubject, Subject, timer } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { cloneDeep, extend, remove } from 'lodash-es';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\n\r\nimport { TreeTableColumn } from './types/treetable-column';\r\nimport { VirtualizedLoaderService } from './virtualized-loader.service';\r\nimport { TreeNode, RowNode, SelectEventArgs } from './types/treenode';\r\nimport { TreetableService } from './treetable.service';\r\nimport { SearchHandle } from './search.handle';\r\nimport { TTHotkeys } from './hotkeys';\r\nimport { PaginationInstance } from '@farris/ui-pagination';\r\nimport { FarrisContextMenuDirective } from '@farris/ui-context-menu';\r\n\r\n\r\n/** ååæ ¼ç¹äºä»¶åæ° */\r\nexport interface CellClickParam {\r\n    event: Event;\r\n    col: TreeTableColumn;\r\n    node: TreeNode;\r\n}\r\n/** èç¹é©éäºä»¶ */\r\nexport interface NodeCheckedParam {\r\n    originalEvent?: any;\r\n    node: TreeNode | TreeNode[];\r\n    nodes?: any[];\r\n    instance: TreeTableComponent;\r\n}\r\n\r\nexport interface NodeSelectedParam {\r\n    originalEvent?: Event;\r\n    node: TreeNode | TreeNode[];\r\n    type?: 'row' | 'checkbox';\r\n    index?: number;\r\n    parents?: any[];\r\n    instance: TreeTableComponent;\r\n}\r\n\r\nexport type IconFieldType = {\r\n    leaf?: string,\r\n    expand?: string,\r\n    collapse?: string\r\n} | string;\r\n\r\n\r\nconst NODES_PAGER_COLUMN_FIELD = '__nodespagerbar__';\r\n\r\n\r\n@Directive({\r\n    selector: 'tt-column, [tt-column]'\r\n})\r\nexport class TreeTableColumnDirective {\r\n    @Input() field: string;\r\n    @Input() title: string;\r\n    @Input() width?: number;\r\n    @Input() hAlign?: string;\r\n    @Input() align?: string;\r\n    @Input() formatter?: () => any | ColumnFormatter;\r\n}\r\n\r\n@Component({\r\n    selector: 'farris-treetable',\r\n    templateUrl: 'treetable.component.html',\r\n    styles: [`\r\n        .farris-treetable {\r\n            position: relative;\r\n        }\r\n        .resizable-column {\r\n            background-clip: padding-box;\r\n            position: relative;\r\n        }\r\n        .column-resizer {\r\n            display: block;\r\n            position: absolute!important;\r\n            top: 0;\r\n            right: 0;\r\n            margin: 0;\r\n            width: .5em;\r\n            height: 100%;\r\n            padding: 0;\r\n            cursor: col-resize;\r\n            border: 1px solid transparent;\r\n        }\r\n        .column-resizer-helper {\r\n            width: 1px;\r\n            position: absolute;\r\n            z-index: 10;\r\n            display: none;\r\n            border-right: 1px dashed #1890ff;\r\n        }\r\n\r\n        .farris-treetable-disabled .farris-treetable-body .table tr{\r\n            opacity: 0.4;\r\n            cursor: not-allowed;\r\n        }\r\n        .farris-treetable-disabled .table tr.farris-table-selectedrow{\r\n            opacity: 1;\r\n            cursor: default;\r\n        }\r\n\r\n        .custom-checkbox .custom-control-input:indeterminate~.custom-control-label::after {\r\n            background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3e%3cpath stroke='%23fff' d='M0 2h4'/%3e%3c/svg%3e\");\r\n            background-color: #1890ff;\r\n        }\r\n        .unselectable-text {\r\n            -webkit-user-select: none;\r\n            -moz-user-select: none;\r\n            -o-user-select: none;\r\n            -ms-user-select: none;\r\n            user-select: none\r\n        }\r\n        .search-highlight {\r\n            background-color: #FFFF1F;\r\n        }\r\n        .search-highlight.active{\r\n            background-color: #FF901C;\r\n        }\r\n\r\n\r\n                \r\n        .f-treetable--fixed-columns .treetable-header-cell {\r\n            vertical-align: middle;\r\n        }\r\n\r\n        .f-treetable--fixed-columns .ps__rail-x,\r\n        .f-treetable--fixed-columns .ps__rail-y {\r\n            z-index: 3;\r\n        }\r\n\r\n        .f-treetable--fixed-left,\r\n        .f-treetable--fixed-right {\r\n            position: sticky !important;\r\n            z-index: 2;\r\n            background-color: #ffffff;\r\n            overflow: inherit !important;\r\n        }\r\n        .treetable-header-cell.f-treetable--fixed-left,\r\n        .treetable-header-cell.f-treetable--fixed-right {\r\n            background-color: #F4F4F4;\r\n            border-color: #E4E7EF;\r\n            border: none;\r\n            outline-color: #E4E7EF;\r\n            outline-style: solid;\r\n            outline-width: 1px;\r\n        }\r\n\r\n        .f-treetable--fixed-columns\r\n            tr\r\n            th.f-treetable--fixed-left[l-tt-shadow-col]::after,\r\n        .f-treetable--fixed-columns td.f-treetable--fixed-left::after,\r\n        .f-treetable--fixed-right::before {\r\n            pointer-events: none;\r\n            content: \"\";\r\n            width: 36px !important;\r\n            display: inline-block !important;\r\n            position: absolute !important;\r\n            margin-top: 0 !important;\r\n            top: 0 !important;\r\n            height: 100% !important;\r\n            bottom: -1px !important;\r\n            transition: box-shadow 0.2s cubic-bezier(0.4, 0, 0.2, 1);\r\n            background-color: transparent !important;\r\n        }\r\n\r\n        .f-treetable--fixed-columns\r\n            tr\r\n            th.f-treetable--fixed-left:not([l-tt-shadow-col])::after {\r\n            content: \"\";\r\n            position: absolute;\r\n            right: 0;\r\n            top: 50%;\r\n            margin-top: calc(-1.125rem / 2);\r\n            display: block;\r\n            height: 1.125rem;\r\n            width: 1px;\r\n            background-color: #e6e9f0;\r\n            box-shadow: none;\r\n        }\r\n\r\n        .f-treetable--fixed-columns\r\n            tr\r\n            th.f-treetable--fixed-left[l-tt-shadow-col]::after,\r\n        .f-treetable--fixed-columns tr td.f-treetable--fixed-left::after {\r\n            right: -36px !important;\r\n        }\r\n\r\n        .f-treetable--fixed-columns .f-treetable--fixed-right::before {\r\n            left: -36px !important;\r\n        }\r\n\r\n        .f-treetable--fixed-columns .table-hover tbody tr:hover td {\r\n            background-color: #edf5ff;\r\n        }\r\n\r\n        .f-treetable--fixed-columns\r\n            .farris-treetable-tbody\r\n            tr.farris-table-selectedrow\r\n            td {\r\n            background-color: #dae9ff!important;\r\n            color: #424347;\r\n        }\r\n\r\n        .f-treetable--fixed-columns\r\n            .farris-treetable-tbody\r\n            tr.f-treetable-disable-row\r\n            td {\r\n            background: #fafafc;\r\n        }\r\n\r\n        .f-treetable--fixed-columns.table-bordered\r\n            tr\r\n            th.f-treetable--fixed-left[l-tt-shadow-col],\r\n        .f-treetable--fixed-columns.table-bordered tr th.f-treetable--fixed-right,\r\n        .f-treetable--fixed-columns.table-bordered tr td.f-treetable--fixed-left,\r\n        .f-treetable--fixed-columns.table-bordered tr td.f-treetable--fixed-right {\r\n            border-right: 0;\r\n            box-shadow: inset -1px 0px 0px #eaecf3;\r\n        }\r\n\r\n        .f-treetable--fixed-columns.table-bordered tr td,\r\n        .f-treetable--fixed-columns.table-bordered tr td {\r\n            border-left: 0;\r\n        }\r\n\r\n        .f-treetable--fixed-columns tbody tr:nth-of-type(even) td {\r\n            background-color: #F7F7F7;\r\n        }\r\n\r\n    `],\r\n    exportAs: 'treeTable',\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TreeTableComponent implements OnInit, AfterContentInit, AfterViewInit, OnChanges, AfterViewChecked, OnDestroy {\r\n    id = '';\r\n    /** å®½åº¦ */\r\n    @Input() width = 500;\r\n    /** é«åº¦ */\r\n    @Input() height = 400;\r\n\r\n    @Input() showFilterBar = false;\r\n    /** æ¾ç¤ºæ¥è¯¢å­æ®µ */\r\n    @Input() showSearchField = true;\r\n\r\n    @Input() headerHeight = 35;\r\n    /** è¡¨å¤´æè¡ */\r\n    @Input() headerWrap = false;\r\n    /** è¡é« */\r\n    @Input() rowHeight = 29;\r\n    /**\r\n     * åä¿¡æ¯\r\n     */\r\n    @Input() columns = [];\r\n    private _groupColumns = [];\r\n    @Input() set groupColumns(cols) {\r\n        this._groupColumns = cols || [];\r\n        const _columns = this.ttService.checkColumnsForGroupHeader(cols.map(cs => [...cs]), this).columns;\r\n        this.columns = _columns.filter(n => n.field);\r\n    }\r\n    get groupColumns() {\r\n        return this._groupColumns;\r\n    }\r\n    /** å¯ç¨å¤è¡¨å¤´ */\r\n    @Input() useGroupHeader = false;\r\n\r\n    @Input() fitColumns = true;\r\n    @Input() autoFitColumns = false;\r\n\r\n    @Input() searchFields: { label: string, value: string }[];\r\n\r\n    @Input() allColumnsTitle = 'ææå';\r\n\r\n    /** æ¾ç¤ºè¿æ¥çº¿ï¼é»è®¤ä¸º false */\r\n    @Input() showLines = false;\r\n    @Input() showLinesOnHover = false;\r\n    /**\r\n     * æ¯å¦å¯ç¨å¤éã é»è®¤ä¸ºåé\r\n     */\r\n    @Input() multiSelect = false;\r\n    @Input() singleSelect = true;\r\n    /** å¯ç¨å¤éåï¼æ¯å¦æ¾ç¤ºcheckbox */\r\n    @Input() showCheckbox = false;\r\n    /**\r\n     * ä¸»é®å­æ®µ\r\n     */\r\n    @Input() idField: string;\r\n\r\n    /** æ¾ç¤ºè¾¹æ¡çº¿ */\r\n    @Input() showBorder = true;\r\n\r\n    @Input() showCheckAll = true;\r\n\r\n    @Input() showHeader = true;\r\n    /** å¯ç¨æé©¬çº¿ */\r\n    @Input() striped = false;\r\n    /** å¯ç¨é¼ æ åè¿ææ */\r\n    @Input() hovered = true;\r\n    /** ç¦ç¨ã ç¦ç¨æ¶ä¸åè®¸éä¸­è¡ */\r\n    @Input() disabled = false;\r\n    /** ç¦å¡èç¹éä¸­ */\r\n    @Input() disabledRow: (param: { node: TreeNode, instance: TreeTableComponent }) => boolean;\r\n\r\n    /** æ°æ®å è½½æ¹å¼; é»è®¤å¼ ä¸º all\r\n     * - all: å¨é¨å è½½\r\n     * - async: åå±å è½½\r\n     */\r\n    @Input() loadDataType: 'all' | 'async' = 'all';\r\n    /** åºå®è¡¨å¤´ */\r\n    @Input() fixedHeader = false;\r\n\r\n    /** å½å¤éæ¶ï¼éä¸­å½åè¡å¹¶é©é */\r\n    @Input() checkOnSelect = false;\r\n    /** å½å¤éæ¶ï¼é©éå¹¶éä¸­å½åè¡ */\r\n    @Input() selectOnCheck = false;\r\n    /**\r\n     * å¯ç¨å¤éæ¶ï¼æ­¤å±æ§ä¸ºtrue æ¶ï¼ä»å½åè¡éä¸­\r\n     */\r\n    @Input() onlySelectSelf = false;\r\n\r\n    /** å¯ç¨åå®½è°æ´ */\r\n    @Input() resizableColumns = true;\r\n    /** è®¾ç½®ä¸ºtrueæ¶èªéåºç¶å®¹çå°ºå¯¸ */\r\n    @Input() fit = false;\r\n\r\n    /** å¯ç¨çº§èéä¸­åè½ */\r\n    @Input() cascadeCheck = true;\r\n    /** åä¸çº§èéä¸­ */\r\n    @Input() cascadeDown = true;\r\n    /** åä¸çº§èéä¸­ */\r\n    @Input() cascadeUp = true;\r\n    /** ç©ºæ°æ®æ¶ï¼æ¾ç¤ºçæç¤ºææ¬ */\r\n    @Input() emptyMessage = 'ææ æ°æ®';\r\n    /** ç¼©è¿é´è·ï¼é»è®¤ä¸º 16px */\r\n    @Input() indentSpacing = 16;\r\n\r\n    /**\r\n     * åå»è¡éä¸­åï¼å¨æ¬¡ç¹å»ä¸ä¼è¢«åæ¶éä¸­ç¶æ;\r\n     */\r\n    @Input() keepSelect = true;\r\n    /** èæå è½½ */\r\n    @Input() virtualized = false;\r\n    /**\r\n     * ä»åè®¸éæ©å¶å­èç¹\r\n     * - default: åºç¨æå¡å¨ç«¯ä¼ åçè®¾ç½®ï¼å¦ææå¡å¨ç«¯æ²¡æè®¾ç½®ï¼åä¸ no ä¿æä¸è³ï¼\r\n     * - yes: å¦æå®¢æ·ç«¯è®¾ç½®ä¸º `yes`, æå¡å¨ç«¯çè®¾ç½®å¤±æï¼\r\n     * - no: åè®¸éæ©ææèç¹ï¼æå¡å¨ç«¯è®¾ç½®å¤±æ\r\n     */\r\n    @Input() onlySelectLeaf: boolean | 'default' | 'yes' | 'no' = 'default';\r\n\r\n    /** æ¾ç¤ºå¾æ  */\r\n    @Input() showIcon = false;\r\n    /** å¶å­èç¹å¾æ  */\r\n    @Input() leafIcon = 'file';\r\n    /** èç¹å±å¼å¾æ  */\r\n    @Input() expandIcon = 'folder-open';\r\n    /** èç¹æå å¾æ  */\r\n    @Input() collapseIcon = 'folder';\r\n\r\n    @Input() foldIcon = 'treetable-toggler';\r\n    @Input() unfoldIcon = 'extanded treetable-toggler';\r\n\r\n    /** å¯ç¨èç¹å¾æ ä»æ°æ®ä¸­è·åã é»è®¤ä¸º false */\r\n    @Input() useIconFromData = false;\r\n    /** å½æ°æ®æºä¸­iconæªè®¾ç½®æ¶ä½¿ç¨åç½®ICON. é»è®¤ä¸º true */\r\n    @Input() whenDataIconEmptyUseDefault = true;\r\n    /** ä»æ°æ®æºå­æ®µä¸­è·åå¾æ  */\r\n    @Input() iconField: IconFieldType = '';\r\n    /** å¾æ èªå®ä¹æ ·å¼ */\r\n    @Input() iconCls: string;\r\n\r\n    /** å¯ç¨è¿ç«¯æåº */\r\n    @Input() remoteSort = true;\r\n    /** æåºå­æ®µ */\r\n    @Input() sortName: string;\r\n    /** æåºæ¹å¼ asc | desc */\r\n    @Input() sortOrder: string;\r\n    /** åè®¸å¤åæåº */\r\n    @Input() multiSort: boolean;\r\n\r\n    @Input() beforeSortColumn: (field: string, order: string) => Observable<boolean>;\r\n\r\n    @Input() rowStyler: (treeNode: TreeNode, field?: string) => any;\r\n    @Input() cellStyler: (treeNode: TreeNode, field: string) => any;\r\n\r\n    /** å¯ç¨åç«¯ææ¬æ¥æ¾ */\r\n    @Input() enableFindText = false;\r\n    /** ææ¬æ¥è¯¢å­æ®µ, å¼ç¨ */\r\n    @Input() findField: string;\r\n    // æ åè¡¨é»è®¤å±å¼å±çº§ã -1ï¼ ä¸å±å¼ï¼ 0ï¼ å¨é¨å±å¼ï¼ >0:  å±å¼å°æå®çº§æ°ï¼\r\n    @Input() expandLevel = -1;\r\n\r\n    @Input() selectValue = '';\r\n    @Output() selectValueChange = new EventEmitter();\r\n    /** å¯ç¨åå»å±å¼èç¹ */\r\n    @Input() dblClickExpand = true;\r\n\r\n    /** éä¸­èç¹IDæ°ç» */\r\n    @Input() selectValues = [];\r\n    @Output() selectValuesChange = new EventEmitter();\r\n    /** æ¯å¦ç¦æ­¢æè¡ï¼é»è®¤ä¸æè¡ */\r\n    @Input() nowrap = true;\r\n\r\n    @Input() checkValues = [];\r\n    @Output() checkValuesChange = new EventEmitter();\r\n\r\n\r\n    @Input() beforeNodeSelected: (e: any) => Observable<boolean>;\r\n    @Input() beforeNodeUnSelected: () => Observable<boolean>;\r\n\r\n    @Input() beforeNodeChecked: () => Observable<boolean>;\r\n    @Input() beforeNodeUnChecked: () => Observable<boolean>;\r\n\r\n    @Input() beforeCheckAll: (e?: any) => Observable<boolean>;\r\n    @Input() beforeUnCheckAll: (e?: any) => Observable<boolean>;\r\n\r\n    @Input() beforeClickNode: (e?: any) => Observable<boolean>;\r\n\r\n    /** åé¡µä¿¡æ¯ */\r\n    @Input() pagination = false;\r\n    /** åé¡µå è½½å­èç¹æ°æ® */\r\n    @Input() paginationForChildren = false;\r\n    /** åé¡µæ¡æ¾ç¤ºæ¨¡å¼ï¼ default, simple */\r\n    @Input() pagerViewMode = 'default';\r\n    /** å¯ç¨æå¡å¨ç«¯åé¡µ */\r\n    @Input() pagerOnServer = true;\r\n    /** æ¯é¡µè®°å½æ° */\r\n    @Input() pageList = [10, 20, 30, 50, 100];\r\n    /** å½åé¡µç  */\r\n    @Input() pageIndex = 1;\r\n    /** æ¯é¡µè®°å½æ° */\r\n    @Input() pageSize = 20;\r\n    /** åé¡µåºé«åº¦ */\r\n    @Input() pagerHeight = 56;\r\n    /** æ¾ç¤ºæ¯é¡µè®°å½æ° */\r\n    @Input() showPageList = false;\r\n    /** æ¾ç¤ºåé¡µä¿¡æ¯ */\r\n    @Input() showPageInfo = true;\r\n    /** æ¾ç¤ºé¡µç  */\r\n    @Input() showPageNumber = true;\r\n    /** æ¾ç¤ºé¡µç æå¤§æ°é */\r\n    @Input() pagerLabelSize = 7;\r\n    /** æ¾ç¤ºé¡µç è¾å¥æ¡ */\r\n    @Input() showGotoInput = false;\r\n    /** å­èç¹åé¡µæ¯å¦æ¾ç¤ºæ»è®°å½æ°ï¼é»è®¤ false */\r\n    @Input() showTotalForChildren = false;\r\n    /** æ»è®°å½æ° */\r\n    @Input() total = 0;\r\n\r\n\r\n    @Input() enableContextMenu = false;\r\n    @Input() contextMenuItems = [];\r\n    @Input() beforeShowContextMenu: (e: { [key: string]: any }) => Observable<{ show: boolean, menus: Array<any>}>;\r\n\r\n    @Output() pageSizeChanged = new EventEmitter();\r\n    @Output() pageChanged = new EventEmitter();\r\n\r\n    /** æåºå */\r\n    @Output() columnSorted = new EventEmitter();\r\n    /** éä¸­äºä»¶ */\r\n    @Output() nodeSelected: EventEmitter<NodeSelectedParam> = new EventEmitter();\r\n    /** åæ¶éä¸­äºä»¶ */\r\n    @Output() nodeUnSelect: EventEmitter<NodeSelectedParam> = new EventEmitter();\r\n\r\n    /** é©é */\r\n    @Output() nodeChecked: EventEmitter<NodeCheckedParam> = new EventEmitter();\r\n    /** åæ¶é©é */\r\n    @Output() nodeUnChecked: EventEmitter<NodeCheckedParam> = new EventEmitter();\r\n\r\n    /** å¨éäºä»¶ */\r\n    @Output() checkAll: EventEmitter<any> = new EventEmitter();\r\n    /** åæ¶å¨é */\r\n    @Output() unCheckAll: EventEmitter<any> = new EventEmitter();\r\n    /** æ¥è¯¢ */\r\n    @Output() search: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() dblClick: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() loadedData: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() expand: EventEmitter<TreeNode> = new EventEmitter();\r\n    @Output() collapse: EventEmitter<TreeNode> = new EventEmitter();\r\n\r\n    @Output() expandAllNodes: EventEmitter<any> = new EventEmitter();\r\n    @Output() collapseAllNodes: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() appendNew: EventEmitter<any> = new EventEmitter();\r\n    @Output() removed: EventEmitter<any> = new EventEmitter();\r\n    @Output() updated: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() clearSearchValue = new EventEmitter();\r\n    @Output() cellClick = new EventEmitter<CellClickParam>();\r\n    @Output() childsPageChanged = new EventEmitter();\r\n\r\n    @Output() searchValueChange = new EventEmitter<any>();\r\n\r\n    @Input() loadedTimer = 100;\r\n\r\n    serializedValue: RowNode[];\r\n\r\n    _data: TreeNode[] = [];\r\n    // loaddata æ¶ åè®¾ç½®ä¸ºç©ºæ°ç»ï¼\r\n    isLoadNewDataSetEmpty = false;\r\n    get data(): any[] {\r\n        return this._data;\r\n    }\r\n    @Input() set data(val: any[]) {\r\n        this._data = val;\r\n        this.updateSerializedValue();\r\n        if (!this.isLoadNewDataSetEmpty) {\r\n            this.initNodeStatus();\r\n        }\r\n        // autowidth æ¶ï¼è¡¨å¤´å®½åº¦ä¾æ®åå®¹å®½åº¦ä½åæ­¥å¤ç\r\n        this.setNewColumnsWidth();\r\n\r\n        this.loadDataSuccess();\r\n    }\r\n    /** æ ¹æ®åå®¹èªå¨å®½åº¦ï¼é»è®¤ false;\r\n     * æ­¤å±æ§å¼å¯åï¼èªå¨åå®½å¤±æ\r\n     */\r\n    @Input() autoWidth = false;\r\n\r\n    @ContentChildren(FarrisTemplateDirective) templates: QueryList<FarrisTemplateDirective>;\r\n    @ContentChildren(TreeTableColumnDirective) columnsRef: QueryList<TreeTableColumnDirective>;\r\n\r\n    @ViewChild('headerBox') headerBox: ElementRef;\r\n    @ViewChild('resizerHelper') resizerHelperVC: ElementRef;\r\n    @ViewChild('headerTable') headerTable: ElementRef;\r\n    @ViewChild('bodyTable') bodyTable: ElementRef;\r\n\r\n    @ViewChild('inputGroup') inputGroup: InputGroupComponent;\r\n    @ViewChild(PerfectScrollbarComponent) psRef?: PerfectScrollbarComponent;\r\n\r\n    private headerCheckboxCmp: TreeTableHeaderCheckboxComponent;\r\n    @ViewChild('allCheckbox') set allCheckbox(content: TreeTableHeaderCheckboxComponent) {\r\n        this.headerCheckboxCmp = content;\r\n    }\r\n\r\n    @ViewChild('nodespagerbar') nodesPagerBar: TemplateRef<any>;\r\n    @ViewChild(FarrisContextMenuDirective) ctxMenu: FarrisContextMenuDirective;\r\n    /**\r\n     * è¡¨å¤´æ¨¡æ¿\r\n     */\r\n    headerTemplate: TemplateRef<any>;\r\n\r\n    /**\r\n     * è¡¨ä½æ¨¡æ¿\r\n     */\r\n    bodyTemplate: TemplateRef<any>;\r\n\r\n    /** éä¸­é¡¹éå */\r\n    private _selections = [];\r\n    get selections(): TreeNode[] {\r\n        return this._selections;\r\n    }\r\n    set selections(vals: TreeNode[]) {\r\n        if (vals && vals.length) {\r\n            // è¿æ»¤ææ°æ®æºä¸­ä¸å­å¨èç¹\r\n            this._selections = vals.filter(tn => tn && this.findRowNode(tn.id));\r\n            const ids = this._selections.map(tn => tn.id);\r\n\r\n            if (ids.length !== this.selectValues.length ||\r\n                (ids.length === this.selectValues.length && this.difference(ids, this.selectValues).length)) {\r\n                this.selectValues = ids;\r\n                setTimeout(() => {\r\n                    this.selectValuesChange.emit(ids);\r\n                });\r\n            }\r\n        } else {\r\n            this._selections = [];\r\n            this.selectValues = [];\r\n            this.selectValuesChange.emit([]);\r\n\r\n        }\r\n    }\r\n    /**\r\n     * éä¸­é¡¹ç´¢å¼\r\n     */\r\n    selectRowIndex = -1;\r\n\r\n    /** éä¸­å½åè¡ */\r\n    private _selectedRow = null;\r\n    get selectedRow(): TreeNode {\r\n        return this._selectedRow;\r\n    }\r\n\r\n    set selectedRow(treeNode: TreeNode) {\r\n        this._selectedRow = treeNode;\r\n        if (treeNode) {\r\n            if (this.selectValue !== treeNode.id) {\r\n                this.selectValue = treeNode.id;\r\n                this.selectValueChange.emit(treeNode.id);\r\n            }\r\n        } else {\r\n            this.selectValue = null;\r\n            this.selectValueChange.emit(null);\r\n        }\r\n    }\r\n\r\n\r\n    /** é©éçè®°å½éå */\r\n    private _checkeds = [];\r\n    get checkeds(): TreeNode[] {\r\n        return this._checkeds;\r\n    }\r\n    set checkeds(treeNodes: TreeNode[]) {\r\n        if (treeNodes && treeNodes.length) {\r\n            this._checkeds = treeNodes.filter(tn => this.findRowNode(tn.id));\r\n            const ids = this._checkeds.map(tn => tn.id);\r\n            this.checkValues = this.checkValues || [];\r\n            if (ids.length !== this.checkValues.length ||  (ids.length === this.checkValues.length && this.difference(ids, this.checkValues).length)) {\r\n                this.checkValues = ids;\r\n                setTimeout(() => {\r\n                    this.checkValuesChange.emit(ids);\r\n                });\r\n            }\r\n        } else {\r\n            this._checkeds = [];\r\n            this.checkValues = [];\r\n            this.checkValuesChange.emit([]);\r\n        }\r\n    }\r\n\r\n    // æå¤å±DIV\r\n    containerElement: HTMLDivElement;\r\n\r\n    // è®°å½åæå¨åçä½ç½®\r\n    lastResizerHelperX: number;\r\n\r\n    searchData = { field: '*', value: '' };\r\n\r\n    scorllBodyHeight: number;\r\n\r\n    searchHandle: SearchHandle;\r\n    searchButtonText = '<i class=\"f-icon f-icon-search\"></i>';\r\n    /** æ¾ç¤ºæ¥è¯¢å·¥å·æ¡ */\r\n    showFindInput = false;\r\n\r\n    private isDataChanged = false;\r\n\r\n    scrollLoader: VirtualizedLoaderService;\r\n    topHideHeight = 0;\r\n    bottomHideHeight = 0;\r\n    state = {\r\n        searchRowNodes: null,\r\n        searched: false,\r\n        rowNodes: [],\r\n        scrollY: 0,\r\n        scrollX: 0\r\n    };\r\n\r\n    /** å¾æ¥è¯¢çææ¬ */\r\n    findValue = '';\r\n    /** ç»ææ»æ° */\r\n    findCount = 0;\r\n    /** å½åç´¢å¼ */\r\n    findCurrent = 0;\r\n    /** å­å¨ææ¬æ¥è¯¢ç»æ */\r\n    findResult = [];\r\n    private ro: ResizeObserver | null = null;\r\n    private findKeysHandler = null;\r\n    private _hotKeys: TTHotkeys = null;\r\n    localeService: LocaleService;\r\n    private idService: IdService;\r\n    private styleSheetId = 'treetable-style-';\r\n    private styleElement;\r\n\r\n    // è°æ´æ¨¡æ¿ï¼æ­¤å±æ§ä»ä¸ºå¸®å©ä¸­çæ ç»ä»¶\r\n    fast = false;\r\n\r\n    paginationOptions: PaginationInstance = {\r\n        id: 'Farris-TreeTable-Pagination_',\r\n        itemsPerPage: this.pageSize,\r\n        currentPage: this.pageIndex,\r\n        pageList: this.pageList,\r\n        totalItems: this.total,\r\n        remote: this.pagerOnServer\r\n    };\r\n\r\n    selectNodeChangedSubject = new BehaviorSubject(null);\r\n    private _UUID = '';\r\n    // æ¯å¦æåºå®å\r\n    fixedColumns = false;\r\n    private destroy$ = new Subject();\r\n    private farrisInstances: FarrisComponentInstanceService = null;\r\n    difference = (first: any[], second: any[]) => first.filter(item => !second.some(secondItem => secondItem == item));\r\n    private debugSer: DebugService = null;\r\n    constructor(\r\n        public ttService: TreetableService, public el: ElementRef,\r\n        public resizeSer: ResizeService, private renderer: Renderer2,\r\n        public utils: CommonUtils, public colFormatSer: ColumnFormatService,\r\n        private shortcuts: TTHotkeys, private cdRef: ChangeDetectorRef,\r\n        private ngZone: NgZone, private injector: Injector) {\r\n        this.searchHandle = new SearchHandle(this);\r\n        this.scrollLoader = new VirtualizedLoaderService(this);\r\n        if (this.injector) {\r\n            this._hotKeys = this.injector.get(TTHotkeys, null);\r\n            this.localeService = this.injector.get(LocaleService, null);\r\n            this.idService = this.injector.get(IdService, null);\r\n            this.farrisInstances = this.injector.get(FarrisComponentInstanceService, null);\r\n        }\r\n        if (this.idService) {\r\n            this._UUID = this.idService.uuid();\r\n            this.styleSheetId += this.idService.uuid();\r\n        } else {\r\n            this._UUID = ('' + Math.random()).slice(2);\r\n            this.styleSheetId += ('' + Math.random()).slice(2);\r\n        }\r\n\r\n        this.ttService = new TreetableService();\r\n\r\n        this.debugSer = this.injector.get(DebugService, null);\r\n\r\n        if (this.debugSer) {\r\n            this.debugSer.useDebugMode();\r\n        }\r\n    }\r\n\r\n    writeConsole(msg, type: 'info'|'log'|'warn'|'error' = 'warn') {\r\n        if (this.debugSer) {\r\n            this.debugSer[type](msg);\r\n        }\r\n    }\r\n\r\n    private checkOptons() {\r\n        // å¯ç¨æ°æ®æè¡åï¼èææ¸²æåè½å¤±æ\r\n        if (!this.nowrap) {\r\n            this.virtualized = false;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.reSetSize();\r\n            this.setScorllBodyHeight();\r\n        });\r\n\r\n        if (this.multiSelect) {\r\n            this.singleSelect = false;\r\n        }\r\n\r\n        if (this.singleSelect && this.showCheckbox) {\r\n            this.checkOnSelect = true;\r\n            this.selectOnCheck = true;\r\n        }\r\n\r\n        if (!this.beforeSortColumn) {\r\n            this.beforeSortColumn = () => of(true);\r\n        }\r\n\r\n        if (this.fit) {\r\n            this.renderer.addClass(this.el.nativeElement, 'f-utils-fill-flex-column');\r\n            const parentEl = this.el.nativeElement.parentElement || this.el.nativeElement.parentNode;\r\n            if (parentEl) {\r\n                // this.renderer.addClass(parentEl, 'f-utils-fill');\r\n                this.renderer.setStyle(parentEl, 'overflow', 'hidden');\r\n            }\r\n        }\r\n\r\n        if (!this.beforeClickNode) {\r\n            this.beforeClickNode = () => of(true);\r\n        }\r\n\r\n        if (!this.beforeCheckAll) {\r\n            this.beforeCheckAll = () => of(true);\r\n        }\r\n\r\n        if (!this.beforeUnCheckAll) {\r\n            this.beforeUnCheckAll = () => of(true);\r\n        }\r\n\r\n        if (this.autoWidth) {\r\n            this.fitColumns = false;\r\n            this.resizableColumns = false;\r\n        }\r\n\r\n        if (!this.disabledRow) {\r\n            this.disabledRow = () => false;\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.id = 'Treetable-' + this._UUID;\r\n        // åå»º stylesheet\r\n        this.styleElement = this.utils.createStyleSheet(this.styleSheetId);\r\n        this.checkColumnOption();\r\n\r\n        this.checkOptons();\r\n\r\n        if (this.ngZone) {\r\n            this.ngZone.runOutsideAngular(() => {\r\n                if (this.el.nativeElement.parentElement) {\r\n                    this.ro = new ResizeObserver((entries, observer) => {\r\n                        if (entries && entries[0]) {\r\n                            const { width, height } = entries[0].contentRect;\r\n                            const target =  entries[0].target;\r\n\r\n                            if (this.fit && target['offsetParent']) {\r\n                                this.resize({ width, height: this.showBorder? height -2: height });\r\n                            }\r\n                        }\r\n                    });\r\n                    this.ro.observe(this.el.nativeElement.parentElement);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.paginationOptions = this.initPaginationOptions();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.ro) {\r\n            if (this.el.nativeElement.parentElement) {\r\n                this.ro.unobserve(this.el.nativeElement.parentElement);\r\n            }\r\n            this.ro.disconnect();\r\n            this.ro = null;\r\n        }\r\n\r\n        if (this.findKeysHandler) {\r\n            this.findKeysHandler.unsubscribe();\r\n        }\r\n\r\n        this.utils.removeStyleSheet(this.styleSheetId);\r\n        this.styleElement = null;\r\n\r\n        if (this.farrisInstances) {\r\n            this.farrisInstances.destroy(this.el.nativeElement);\r\n        }\r\n\r\n        this.ttService = null;\r\n\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.data && !changes.data.isFirstChange()) {\r\n            this.isDataChanged = changes.data.currentValue !== changes.data.previousValue;\r\n        }\r\n\r\n        if (changes.multiSelect && !changes.multiSelect.isFirstChange()) {\r\n            this.singleSelect = !changes.multiSelect.currentValue;\r\n            if (this.singleSelect && this.showCheckbox) {\r\n                this.selectOnCheck = true;\r\n                this.checkOnSelect = true;\r\n            }\r\n        }\r\n\r\n        if (changes.disabled && !changes.disabled.isFirstChange()) {\r\n            this.hovered = !changes.disabled.currentValue;\r\n        }\r\n\r\n        if (changes.enableFindText && !changes.enableFindText.isFirstChange()) {\r\n            this.setFindText(changes.enableFindText.currentValue);\r\n        }\r\n\r\n        if (changes.selectValue && !changes.selectValue.isFirstChange()) {\r\n            this.selectNode(changes.selectValue.currentValue);\r\n        }\r\n        if (changes.selectValues && !changes.selectValues.isFirstChange()) {\r\n            this.selectNodes(changes.selectValues.currentValue);\r\n        }\r\n        if (changes.checkValues && !changes.checkValues.isFirstChange()) {\r\n            this.checkedNodes(changes.checkValues.currentValue);\r\n        }\r\n\r\n        if (changes.pageIndex !== undefined && !changes.pageIndex.isFirstChange()) {\r\n            this.paginationOptions = Object.assign(this.paginationOptions, {\r\n                currentPage: this.pageIndex\r\n            });\r\n        }\r\n\r\n        if (changes.pageSize !== undefined && !changes.pageSize.isFirstChange()) {\r\n            this.paginationOptions = Object.assign(this.paginationOptions, {\r\n                itemsPerPage: this.pageSize\r\n            });\r\n        }\r\n\r\n        if (changes.pageList !== undefined && !changes.pageList.isFirstChange()) {\r\n            this.paginationOptions = Object.assign(this.paginationOptions, {\r\n                pageList: this.pageList\r\n            });\r\n        }\r\n\r\n        if (changes.total !== undefined && !changes.total.isFirstChange()) {\r\n            this.paginationOptions = Object.assign(this.paginationOptions, {\r\n                totalItems: this.total\r\n            });\r\n        }\r\n\r\n        if (changes.fitColumns && !changes.fitColumns.isFirstChange()) {\r\n            this.setTableWidth(this.allColumnsWidth());\r\n        }\r\n\r\n        if (changes.columns && !changes.columns.isFirstChange()) {\r\n            this.checkColumnOption();\r\n        }\r\n\r\n        if (changes.showBorder && !changes.showBorder.isFirstChange()) {\r\n            // this.reSetSize();\r\n        }\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        // if (this.isDataChanged) {\r\n        //     this.loadedData.emit();\r\n        //     this.isDataChanged = false;\r\n        // } else {\r\n        //     this.ngZone.runOutsideAngular(() => {\r\n        //         if (this.psRef) {\r\n        //             this.psRef.directiveRef.update();\r\n        //         }\r\n        //     });\r\n        // }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch (item.getType()) {\r\n                case 'header':\r\n                    this.headerTemplate = item.template;\r\n                    break;\r\n                case 'body':\r\n                    this.bodyTemplate = item.template;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        if (this.columnsRef.length) {\r\n            this.columns = this.ttc2columns(this.columnsRef);\r\n\r\n            this.columnsRef.changes.subscribe((d: any) => {\r\n                this.columns = this.ttc2columns(d);\r\n            });\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.containerElement = this.el.nativeElement.querySelector('.farris-treetable');\r\n     \r\n        this.registerShortcuts();\r\n\r\n        // autowidth æ¶ï¼è¡¨å¤´å®½åº¦ä¾æ®åå®¹å®½åº¦ä½åæ­¥å¤ç\r\n        this.setNewColumnsWidth();\r\n        this.setRightFixedColumnShadow();\r\n\r\n        if (this.el && this.farrisInstances) {\r\n            this.farrisInstances.add(this.el.nativeElement, this);\r\n        }\r\n\r\n        if (this.bodyTemplate) {\r\n            this.utils.appendCssRules([`#${this.id} .farris-treetable .farris-treetable-tbody td {padding: .25rem 0.75rem;}`], this.styleElement.sheet);\r\n        }\r\n\r\n        // å¼å®¹æ§çè®¾è®¡å¨        \r\n        if (this.fit && this.el.nativeElement.parentElement.nodeName !== 'DIV') {\r\n            if (this.el.nativeElement.parentElement.nodeName === 'APP-DG-TREE-GRID') {\r\n                const div = this.el.nativeElement.parentElement.closest('div');\r\n                if (div) {\r\n                    div.style.overflow = 'hidden';\r\n                }\r\n            }\r\n        }\r\n\r\n        this.loadDataSuccess();\r\n    }\r\n\r\n    private loadDataSuccess() {\r\n        timer(this.loadedTimer).pipe(\r\n            takeUntil(this.destroy$)\r\n        ).subscribe(() => {\r\n            if (this.psRef && this.psRef.directiveRef) {\r\n                this.psRef.directiveRef.update();\r\n            }\r\n            this.loadedData.emit();\r\n        })\r\n    }\r\n\r\n\r\n    private setNewColumnsWidth() {\r\n        if (!this.autoWidth) {\r\n            return;\r\n        }\r\n        const newColWidth: any = {};\r\n        let headerCells = [];\r\n        let firstRowCells = [];\r\n        // let colgroups = [];\r\n        if (this.showHeader && this.headerTable) {\r\n            headerCells = Array.from<HTMLElement>(this.headerTable.nativeElement.querySelectorAll('th'));\r\n        }\r\n        if (this.serializedValue && this.serializedValue.length && this.bodyTable) {\r\n            firstRowCells = Array.from<HTMLElement>(this.bodyTable.nativeElement.querySelector('tr').querySelectorAll('td'));\r\n            // colgroups = this.bodyTable.nativeElement.querySelector('colgroup').querySelectorAll('col');\r\n        }\r\n\r\n        firstRowCells.forEach((td: any, index) => {\r\n            const fieldName = td.getAttribute('field');\r\n            let colWidth = td.getBoundingClientRect().width.toFixed(2);\r\n            newColWidth[fieldName] = colWidth;\r\n\r\n            const col = this.columns.find(c => c.field === fieldName);\r\n            if (col && col.width !== undefined) {\r\n                colWidth = colWidth > col.width ? colWidth : col.width;\r\n            }\r\n\r\n            td.style.minWidth = colWidth + 'px';\r\n            headerCells[index].style.width = colWidth + 'px';\r\n        });\r\n    }\r\n\r\n    columnIsVisible(col) {\r\n        return this.ttService.columnIsVisible(col, this);\r\n    }\r\n\r\n\r\n    private columnCssName(n: any) {\r\n        return `#${this.id} .treetable-cell[field=\"${n.field}\"], #${this.id} .treetable-header-cell[field=\"${n.field}\"]:not(.group-header-cell)`;\r\n    }\r\n\r\n\r\n    private checkGroupColumns() {\r\n        var i = this.groupColumns.length - 1;\r\n        while(i >= 0) {\r\n            var ids = this.groupColumns[i].map(n => n.parentId);\r\n            ids = Array.from(new Set(ids));\r\n            ids.map(id => {\r\n                const childCols = this.groupColumns[i].filter(n => n.parentId == id).map(n => {\r\n                    const dataField = this.columns.find(c => c.id === n.id);\r\n                    return dataField || n;\r\n                });\r\n                return { \r\n                    id,\r\n                    width: childCols.reduce((r,c) => { return r+=c.width }, 0),\r\n                    left: childCols[0].left,\r\n                    right: childCols[childCols.length - 1].right || 0\r\n                };\r\n            }).forEach(p => {\r\n                if (i - 1 >= 0) {\r\n                    let pCol = this.groupColumns[i-1].find(pc => pc.id == p.id);\r\n                    const dataField = this.columns.find(c => c.id === p.id);\r\n                    pCol = dataField || pCol;\r\n\r\n                    pCol.width = p.width;\r\n                    if (pCol.fixed === 'left') {\r\n                        pCol.left = p.left;\r\n                    }\r\n                    if (pCol.fixed === 'right') {\r\n                        pCol.right = p.right;\r\n                    }\r\n                }\r\n            });\r\n            i--;\r\n        }\r\n    }\r\n\r\n    // æåºå®åçé¡ºåºæåº\r\n    private sortColumnsByFixed(updateColumns = true) {\r\n        const fixedLeft = this.columns.filter(n => n.fixed === 'left');\r\n        const fixedCenter = this.columns.filter(n => !n.fixed || n.fixed === 'center');\r\n        const fixedRight = this.columns.filter(n => n.fixed === 'right');\r\n\r\n        if (fixedLeft && fixedLeft.length) {\r\n            fixedLeft.forEach((n, index) => {\r\n                if (index) {\r\n                    n.left = fixedLeft.reduce((r, c, i)=> {\r\n                        if (i < index) {\r\n                            return r += c.width;\r\n                        } \r\n                        return r;\r\n                    }, 0)\r\n                } else {\r\n                    n.left = 0;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (fixedRight && fixedRight.length) {\r\n\r\n            let rightWidthTotal = fixedRight.reduce((r, c) => {\r\n                return r + c.width;\r\n            }, 0);\r\n\r\n            fixedRight.forEach((n, index) => {\r\n                rightWidthTotal -= n.width;\r\n                n.right = rightWidthTotal;\r\n            });\r\n        }\r\n\r\n\r\n\r\n        if (updateColumns) {\r\n            this.columns = fixedLeft.concat(fixedCenter).concat(fixedRight);\r\n        }\r\n    }\r\n\r\n    private checkColumnOption() {\r\n        const cssRules = [];\r\n\r\n        \r\n        // å¯ç¨åé¡µå è½½å­èç¹\r\n        if (this.paginationForChildren) {\r\n            const pagerBarCol: any = {\r\n                field: NODES_PAGER_COLUMN_FIELD,\r\n                width: 160,\r\n                title: '',\r\n                align: 'center',\r\n                template: this.nodesPagerBar,\r\n                rowspan: 1,\r\n            }\r\n\r\n            if (this.useGroupHeader) {\r\n                if (this.groupColumns[0][this.groupColumns[0].length - 1].fixed === 'right') {\r\n                    pagerBarCol.fixed = 'right';\r\n                }\r\n                pagerBarCol.rowspan = this.groupColumns.length;\r\n                this.groupColumns[0].push(pagerBarCol)\r\n            }\r\n\r\n            this.columns.push(pagerBarCol);\r\n        }\r\n\r\n\r\n        if (!this.fitColumns) {\r\n            this.sortColumnsByFixed();\r\n        }\r\n\r\n        this.columns.forEach((n, i) => {\r\n            if (n.visible === undefined) {\r\n                n.visible = true;\r\n            }\r\n\r\n            if (n['halign']) {\r\n                n.hAlign = n['halign'];\r\n            }\r\n\r\n            if (n.width === undefined) {\r\n                n.width = 100;\r\n            }\r\n\r\n            if (!n.id) {\r\n                n.id = 'treetable-header-' + (n.field || i);\r\n            }\r\n        });\r\n\r\n        const colWidthTotal = this.allColumnsWidth();\r\n        let fixedCols = 0;\r\n\r\n        const fixedRightColumns = this.columns.filter(n => n.fixed === 'right');\r\n        if (fixedRightColumns && fixedRightColumns.length) {\r\n            fixedRightColumns[0]['rightShadowCol'] = true;\r\n            fixedRightColumns[fixedRightColumns.length - 1]['lastColumn'] = true;\r\n        } else {\r\n            if (this.columns && this.columns.length) {\r\n                this.columns[this.columns.length - 1]['lastColumn'] = true;\r\n            }\r\n        }\r\n\r\n        const fixedLeftColumns = this.columns.filter(n => n.fixed === 'left');\r\n        if (fixedLeftColumns && fixedLeftColumns.length) {\r\n            fixedLeftColumns[fixedLeftColumns.length - 1]['leftShadowCol'] = true;\r\n        }\r\n\r\n        fixedCols = this.setCellWidthCss(colWidthTotal, fixedCols, cssRules);\r\n        this.setTableWidth(colWidthTotal);\r\n\r\n        this.fixedColumns = !!fixedCols;\r\n    }\r\n\r\n    private setCellWidthCss(colWidthTotal: any, fixedCols: number, cssRules: any[]) {\r\n\r\n\r\n        this.columns.forEach((n, index) => {\r\n            const isVisible = this.columnIsVisible(n);\r\n            const ruleName = this.columnCssName(n);\r\n\r\n            const cssRule = this.utils.getCssRule(ruleName, this.styleElement.sheet);\r\n            if (!cssRule) {\r\n                let stylecss = ruleName + ' { ';\r\n                stylecss += isVisible ? '' : 'display: none;';\r\n\r\n                if (this.fitColumns) {\r\n                    stylecss += `width: ${(n.width / colWidthTotal * 100).toFixed(2)}%;`;\r\n                } else {\r\n                    stylecss += `width: ${n.width}px;`;\r\n\r\n                    if (n.fixed) {\r\n                        if (n.fixed === 'left') {\r\n                            stylecss += `left: ${n.left}px`;\r\n                            fixedCols++;\r\n                        }\r\n\r\n                        if (n.fixed === 'right') {\r\n                            stylecss += `right: ${n.right}px`;\r\n                            fixedCols++;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                stylecss += '}';\r\n                cssRules.push(stylecss);\r\n            } else {\r\n                cssRule.style.display = isVisible ? '' : 'none';\r\n                if (this.fitColumns) {\r\n                    cssRule.style.width = `${(n.width / colWidthTotal * 100).toFixed(2)}%`;\r\n                } else {\r\n                    cssRule.style.width = `${n.width}px`;\r\n                    if (n.fixed) {\r\n                        if (n.fixed === 'left') {\r\n                            cssRule.style.left = `${n.left}px`;\r\n                        }\r\n\r\n                        if (n.fixed === 'right') {\r\n                            cssRule.style.right = `${n.right}px`;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        if (this.useGroupHeader) {\r\n            this.autoWidth = false;  // å¤è¡¨å¤´å¯ç¨åï¼èªå¨åå®½å¤±æ TFS 496088\r\n            this.checkGroupColumns();\r\n            var i = this.groupColumns.length - 2;\r\n            while (i >= 0) {\r\n                const groupHeaderColCsses = this.groupColumns[i].filter(col => !col.field).map(col => {\r\n                    let groupColCssName = `#${col.id}{ width: ${col.width}px`;\r\n\r\n                    if (col.fixed) {\r\n                        if (col.fixed === 'left') {\r\n                            groupColCssName += ';left:' + col.left + 'px';\r\n                        }\r\n\r\n                        if (col.fixed === 'right') {\r\n                            groupColCssName += ';right:' + col.right + 'px';\r\n                        }\r\n                    }\r\n\r\n                    return groupColCssName += '}';\r\n                });\r\n               \r\n                this.utils.appendCssRules2(groupHeaderColCsses, this.styleElement.sheet);\r\n                i--;\r\n            }\r\n        }\r\n\r\n\r\n        if (cssRules.length) {\r\n            this.utils.appendCssRules(cssRules, this.styleElement.sheet);\r\n        }\r\n        return fixedCols;\r\n    }\r\n\r\n    private setTableWidth(colWidthTotal: number) {\r\n        if (this.headerTable && this.bodyTable) {\r\n            if (!this.fitColumns && !this.autoFitColumns) {\r\n                this.headerTable.nativeElement.style.width = `${colWidthTotal}px`;\r\n                this.bodyTable.nativeElement.style.width = `${colWidthTotal}px`;\r\n            } else {\r\n                this.headerTable.nativeElement.style.width = '100%';\r\n                this.bodyTable.nativeElement.style.width = '100%';\r\n            }\r\n        }\r\n    }\r\n\r\n    private allColumnsWidth() {\r\n        return this.columns.reduce((r, c) => {\r\n            if (this.columnIsVisible(c)) {\r\n                return r + c.width;\r\n            } else {\r\n                return r;\r\n            }\r\n\r\n        }, 0);\r\n    }\r\n\r\n    onPageChange($event) {\r\n        this.pageChanged.emit($event);\r\n    }\r\n\r\n    onPageSizeChange($event) {\r\n        this.pageSizeChanged.emit($event);\r\n    }\r\n\r\n    updatePageInfo(pageInfo: { pageIndex?: number, pageSize?: number, total?: number, pageList?: number[] }) {\r\n        if (pageInfo && Object.keys(pageInfo).length) {\r\n\r\n            const obj: any = {};\r\n            if (pageInfo.total !== undefined) {\r\n                obj.totalItems = pageInfo.total;\r\n            }\r\n\r\n            if (pageInfo.pageIndex !== undefined) {\r\n                obj.currentPage = pageInfo.pageIndex;\r\n            }\r\n\r\n            if (pageInfo.pageSize !== undefined) {\r\n                obj.itemsPerPage = pageInfo.pageSize;\r\n            }\r\n\r\n            if (pageInfo.pageList !== undefined) {\r\n                obj.pageList = pageInfo.pageList;\r\n            }\r\n\r\n            this.paginationOptions = Object.assign(this.paginationOptions, obj);\r\n        }\r\n    }\r\n\r\n\r\n    private initPaginationOptions() {\r\n        return {\r\n            id: 'Farris-TreeTable-Pagination_' + this._UUID,\r\n            itemsPerPage: this.pageSize,\r\n            currentPage: this.pageIndex,\r\n            pageList: this.pageList,\r\n            totalItems: this.total,\r\n            remote: this.pagerOnServer\r\n        };\r\n    }\r\n\r\n    getNodeText(col: TreeTableColumn, rowdata, fast = false) {\r\n        if (col.isMultilingualField) {\r\n            const val = this.utils.getValue(col.field, rowdata);\r\n            if (this.localeService) {\r\n                const localeId = this.localeService.localeId || 'zh-CHS';\r\n                if (val && typeof val === 'object' && Object.keys(val).length > 0) {\r\n                    return val[localeId];\r\n                } else {\r\n                    return val;\r\n                }\r\n            }\r\n        } else {\r\n            return this.utils.getValue(col.field, rowdata, !fast);\r\n        }\r\n    }\r\n\r\n    private initNodeStatus() {\r\n        if (!this.singleSelect) {\r\n            if (this.checkValues && this.checkValues.length) {\r\n                this.checkedNodes(this.checkValues, false, false);\r\n            }\r\n            if (this.selectValues && this.selectValues.length && !this.onlySelectSelf) {\r\n                this.selectNodes(this.selectValues, false, false);\r\n            }\r\n        } else {\r\n            if (this.selectValue) {\r\n                this.selectNode(this.selectValue, false);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** æ³¨åå¿«æ·é® */\r\n    private registerShortcuts() {\r\n        if (this.showFilterBar && this._hotKeys) {\r\n            this._hotKeys.addShortcut({ keys: 'enter', element: this.inputGroup.textbox.nativeElement }).subscribe(() => {\r\n                this.onSearch();\r\n            });\r\n        }\r\n\r\n        this.setFindText(this.enableFindText);\r\n    }\r\n\r\n    private setFindText(enable = true) {\r\n        this.enableFindText = enable;\r\n        if (this.enableFindText && this._hotKeys) {\r\n            // æ¥è¯¢å·¥å·æ¡\r\n            this.findKeysHandler = this._hotKeys.addShortcut({ keys: 'control.shift.f' }).subscribe((e) => {\r\n                if (this.enableFindText) {\r\n                    this.showFindInput = true;\r\n                    this.detectChanges();\r\n                }\r\n            });\r\n        } else {\r\n            if (this.showFindInput) {\r\n                this.showFindInput = false;\r\n                this.cdRef.detectChanges();\r\n            }\r\n            if (this.findKeysHandler) {\r\n                this.findKeysHandler.unsubscribe();\r\n                this.findKeysHandler = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCustomCls(rowNode: RowNode, field: string = '', clsType: 'row' | 'cell' = 'row') {\r\n        const cls = {};\r\n        let fn = this.rowStyler;\r\n        if (clsType === 'cell') {\r\n            fn = this.cellStyler;\r\n        }\r\n\r\n        if (fn) {\r\n            const rowCls = fn(rowNode.node, field);\r\n            if (rowCls) {\r\n                let arrcls = [];\r\n                if (typeof rowCls === 'string') {\r\n                    arrcls = [rowCls];\r\n                } else {\r\n                    if (Array.isArray(rowCls)) {\r\n                        arrcls = rowCls;\r\n                    }\r\n                }\r\n\r\n                if (arrcls.length) {\r\n                    const rowClsObj = {};\r\n                    arrcls.forEach(c => {\r\n                        rowClsObj['' + c] = true;\r\n                    });\r\n                    const _cls = { ...rowClsObj, ...cls };\r\n                    return _cls;\r\n                } else {\r\n                    return rowCls;\r\n                }\r\n            } else {\r\n                return cls;\r\n            }\r\n        } else {\r\n            return cls;\r\n        }\r\n    }\r\n\r\n    getRowCls(rowNode: RowNode, field?: string) {\r\n        return this.getCustomCls(rowNode, 'row');\r\n    }\r\n\r\n    getCellCls(rowNode: RowNode, field: string) {\r\n        return this.getCustomCls(rowNode, field, 'cell');\r\n    }\r\n\r\n    getRealColWidth(currentCol: TreeTableColumn) {\r\n        if (this.columns && this.columns.length && this.fitColumns) {\r\n            const colWidthTotal = this.columns.reduce((r, c) => {\r\n                return r + (this.columnIsVisible(c) && (r.field !== NODES_PAGER_COLUMN_FIELD  || r.fixedWidth)? c.width : 0);\r\n            }, 0);\r\n\r\n            if (this.columnIsVisible(currentCol)) {\r\n                if ( currentCol.field !== NODES_PAGER_COLUMN_FIELD &&  !currentCol.fixedWidth) {\r\n                    return (currentCol.width / colWidthTotal * 100).toFixed(2) + '%';\r\n                } else {\r\n                    return (currentCol.width || 120) + 'px';\r\n                }\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n        return currentCol.width + 'px';\r\n    }\r\n\r\n    @HostListener('window:resize')\r\n    onResized() {\r\n        this.resizeSer.windowResized();\r\n    }\r\n\r\n    private setRightFixedColumnShadow() {\r\n        if (this.psRef && this.psRef.directiveRef) {\r\n            const ps = (this.psRef.directiveRef as any).instance;\r\n            if (!ps) {\r\n                return;\r\n            }\r\n            const { containerWidth, scrollbarXLeft, contentWidth } = ps;\r\n            if (containerWidth + scrollbarXLeft < contentWidth) {\r\n\r\n                const fixedRightColumns = this.columns.filter(n => n.fixed === 'right');\r\n                const ruleName = `#${this.id}.f-treetable--fixed-columns`;\r\n                if (fixedRightColumns && fixedRightColumns.length) {\r\n                    const fixedRightCssRuleKey = `${ruleName} [r-tt-shadow-col]::before`;\r\n                    const rightCSSRule = `${fixedRightCssRuleKey}{\r\n                        box-shadow:#d9d9d9 -12px 0px 8px -12px inset;\r\n                    }`;\r\n\r\n                    this.utils.appendCssRules([rightCSSRule], this.styleElement.sheet);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setFixedColumnShadow(x, e) {\r\n        const fixedLeftColumns = this.columns.filter(n => n.fixed === 'left');\r\n        const fixedRightColumns = this.columns.filter(n => n.fixed === 'right');\r\n        const ruleName = `#${this.id}.f-treetable--fixed-columns`;\r\n        let fixedLeftCssRuleKey = '';\r\n        let fixedRightCssRuleKey = '';\r\n        let leftCSSRule = '';\r\n        let rightCSSRule = '';\r\n        if (fixedLeftColumns && fixedLeftColumns.length) {\r\n            const lastFixedLeftColumn = fixedLeftColumns[fixedLeftColumns.length - 1];\r\n            fixedLeftCssRuleKey = `${ruleName} [field=\"${lastFixedLeftColumn.field}\"]::after`;\r\n            leftCSSRule = `${fixedLeftCssRuleKey}{\r\n                box-shadow:#d9d9d9 12px 0px 8px -12px inset;\r\n            }`;\r\n        }\r\n\r\n        if (fixedRightColumns && fixedRightColumns.length) {\r\n            fixedRightCssRuleKey = `${ruleName} [r-tt-shadow-col]::before`;\r\n            rightCSSRule = `${fixedRightCssRuleKey}{\r\n                box-shadow:#d9d9d9 -12px 0px 8px -12px inset;\r\n            }`;\r\n        }\r\n\r\n\r\n        if (x === 0) {\r\n            // ç§»é¤å·¦ä¾§åºå®åé´å½±æ ·å¼\r\n            if (fixedLeftCssRuleKey) {\r\n                this.utils.removeCssRule(fixedLeftCssRuleKey, this.styleElement.sheet);\r\n            }\r\n        } else if ((x + e.srcElement.offsetWidth).toFixed() == e.srcElement.scrollWidth) {\r\n            // ç§»é¤å³ååºå®åé´å½±æ ·å¼\r\n            if (fixedRightCssRuleKey) {\r\n                this.utils.removeCssRule(fixedRightCssRuleKey, this.styleElement.sheet);\r\n            }\r\n        } else {\r\n            // æ·»å å·¦å³åºå®åæ ·å¼\r\n            const arr = [];\r\n            if (leftCSSRule) {\r\n                arr.push(leftCSSRule);\r\n            }\r\n\r\n            if (rightCSSRule) {\r\n                arr.push(rightCSSRule);\r\n            }\r\n\r\n            this.utils.appendCssRules(arr, this.styleElement.sheet);\r\n        }\r\n    }\r\n\r\n    onScrollX(e: any) {\r\n        if (this.showHeader && this.headerBox) {\r\n            const x = e.srcElement.scrollLeft;\r\n            this.state.scrollX = x;\r\n            // this.renderer.setStyle(this.headerBox.nativeElement.querySelector('table'), 'transform', `translate3d(-${x}px, 0px, 0px)`);\r\n            this.headerBox.nativeElement.scrollLeft = x;\r\n\r\n            this.setFixedColumnShadow(x, e);\r\n        }\r\n    }\r\n\r\n    onScrollY(e: any) {\r\n        if (this.virtualized) {\r\n            const scrollTop = e.target.scrollTop;\r\n            this.renderData(scrollTop);\r\n        }\r\n    }\r\n\r\n    private renderData(scrolltop: number) {\r\n        const { data, topHideHeight, bottomHideHeight } = this.scrollLoader.getRowNodes(scrolltop);\r\n        this.state.scrollY = scrolltop;\r\n        this.serializedValue = data;\r\n        this.topHideHeight = topHideHeight;\r\n        this.bottomHideHeight = bottomHideHeight;\r\n\r\n        this.detectChanges();\r\n        this.setNewColumnsWidth();\r\n    }\r\n\r\n    onSearchValueChange($event) {\r\n        if (!$event) {\r\n            this.onClearSearchValue();\r\n        }\r\n\r\n        this.searchValueChange.emit(this.searchData);\r\n    }\r\n\r\n    onClearSearchValue() {\r\n        this.searchData.value = '';\r\n        this.state.searched = false;\r\n        this.clearSearchValue.emit();\r\n    }\r\n\r\n    onCellClick(event: Event, col: any, node: any) {\r\n        this.cellClick.emit({ event, col, node });\r\n    }\r\n\r\n    trackByFn(index, rowNode) {\r\n        return rowNode.id;\r\n    }\r\n    /**\r\n     * æ ¼å¼åæ°æ®\r\n     */\r\n    formatData(col: any, data: any, formatter: any) {\r\n        // const val = this.utils.getValue(field, data, true );\r\n        const val = this.getNodeText(col, data);\r\n        if (formatter && formatter.type === 'timeago') {\r\n            if (!formatter.options) {\r\n                formatter.options = { locale: this.localeService.localeId}\r\n            } else {\r\n                if (!formatter.options.locale) {\r\n                    formatter.options.locale = this.localeService.localeId;\r\n                }\r\n            }\r\n        }\r\n        return this.colFormatSer.format(val, data, formatter, {locale: this.localeService.localeId });\r\n    }\r\n\r\n    columnsChanged() {\r\n        this.checkColumnOption();\r\n        this.detectChanges();\r\n    }\r\n\r\n    private ttc2columns(list: QueryList<TreeTableColumnDirective>) {\r\n        return list.map((n: TreeTableColumnDirective) => {\r\n            return {\r\n                field: n.field,\r\n                title: n.title,\r\n                align: n.align,\r\n                hAlign: n.hAlign,\r\n                width: n.width,\r\n                formatter: n.formatter\r\n            };\r\n        });\r\n    }\r\n\r\n    private reSetSize() {\r\n        if (this.fit) {\r\n            const parentEl = this.el.nativeElement.parentNode;\r\n            this.setWidth(parentEl.offsetWidth)\r\n            this.height = parentEl.offsetHeight;\r\n\r\n            // å¦æå¨ä½¿ç¨æ¶ï¼ä¸ºç»ä»¶è®¾ç½®çé«åº¦ï¼åä»¥æ­¤å¼ä¸ºåï¼ä»æ¯æ åºå®å¼ ï¼ä¸æ¯æ ç¾åæ¯\r\n            if (this.el.nativeElement.style.height) {\r\n                let h = this.el.nativeElement.style.height;\r\n                if (h.indexOf('px') > -1) {\r\n                    h = parseInt(h.replace('px', ''), 10);\r\n                    if (h > 0) {\r\n                        this.height = h;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private renderVirtualRowNodes(nodePosY = null) {\r\n        if (this.virtualized) {\r\n            const scrollY = nodePosY || this.state.scrollY;\r\n            const _rownodes = this.scrollLoader.getRowNodes(scrollY);\r\n            this.serializedValue = _rownodes.data;\r\n            this.topHideHeight = _rownodes.topHideHeight;\r\n            this.bottomHideHeight = _rownodes.bottomHideHeight;\r\n            this.detectChanges();\r\n\r\n            if (nodePosY) {\r\n                this.ngZone.runOutsideAngular(() => {\r\n                    setTimeout(() => {\r\n                        this.psRef.directiveRef.elementRef.nativeElement.scrollTop = nodePosY;\r\n                    }, 20);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    updateSerializedValue(nodePosY: any = null) {\r\n        this.serializedValue = [];\r\n        this.searchHandle.allNodes = [];\r\n        this.state.rowNodes = [];\r\n\r\n        this.serializeNodes(null, this.data, 0, true);\r\n        if (this.virtualized && this.fixedHeader) {\r\n            this.renderVirtualRowNodes(nodePosY);\r\n        } else {\r\n            this.serializedValue = this.state.rowNodes;\r\n            this.detectChanges();\r\n            // if (emitChanges) {\r\n            // }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å°æ èç¹æ°æ®åºååä¸ºRowNode\r\n     * @param parent ç¶çº§èç¹\r\n     * @param nodes æ èç¹éå\r\n     * @param level çº§å«\r\n     * @param visible æ¯å¦å¯è§\r\n     */\r\n    serializeNodes(parent: TreeNode, nodes: TreeNode[], level: number, visible: boolean, parentIds?: any[]) {\r\n        if (nodes && nodes.length) {\r\n\r\n            if (!nodes[0].data) {\r\n                return;\r\n            }\r\n\r\n            nodes.forEach((node, index) => {\r\n                node.parent = parent;\r\n\r\n                if (!node.hasOwnProperty('selectable')) {\r\n                    node.selectable = true;\r\n                }\r\n\r\n                if (!node.hasOwnProperty('showIcon')) {\r\n                    node.showIcon = true;\r\n                }\r\n\r\n                if (this.onlySelectLeaf === 'yes' && node.selectable) {\r\n                    node.selectable = !!node.leaf;\r\n                }\r\n                const keyid = node.data[this.idField];\r\n                node.id = keyid;\r\n                const isSelected = this.findIndexInSelection(node) > -1;\r\n                const isChecked = this.findIndexInCheckeds(node) > -1;\r\n                const isLast = index === nodes.length - 1;\r\n                const isFirst = index === 0;\r\n                let parents = [];\r\n                let parentRn = null;\r\n                if (parent) {\r\n                    const parentID = parent.data[this.idField];\r\n                    const _parents = parentIds || [];\r\n                    parents = parents.concat(_parents.map(n => n));\r\n                    parents.push(parentID);\r\n                    parentRn = this.state.rowNodes.find(n => n.id === parent.id);\r\n                }\r\n\r\n                const rowNode: RowNode = {\r\n                    id: keyid,\r\n                    node,\r\n                    parent,\r\n                    level,\r\n                    visible: visible && (parent ? parent.expanded : true),\r\n                    isSelected,\r\n                    isChecked,\r\n                    parents,\r\n                    parentRowNode: parentRn,\r\n                    index: this.state.rowNodes.length,\r\n                    last: isLast,\r\n                    first: isFirst\r\n                };\r\n                // this.serializedValue.push(rowNode);\r\n                this.state.rowNodes.push(rowNode);\r\n                this.serializeNodes(node, node.children, level + 1, rowNode.visible, parents);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å¤æ­æå®çèç¹æ¯å¦è¢«éä¸­\r\n     * @param node æ èç¹\r\n     */\r\n    isSelected(node: TreeNode): boolean {\r\n        if (this.singleSelect) {\r\n            if (node && this.selectedRow) {\r\n                return node.data[this.idField] === this.selectedRow.data[this.idField];\r\n            }\r\n            return false;\r\n        } else {\r\n            if (this.selections && this.selections.length) {\r\n                return this.selections.findIndex(n => n.data[this.idField] === node.data[this.idField]) > -1;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n    /** å¤æ­å½åèç¹çé©éç¶æ */\r\n    isChecked(node: TreeNode): boolean {\r\n        if (node && this.checkeds) {\r\n            if (this.checkeds instanceof Array) {\r\n                return this.checkeds.findIndex((v) => {\r\n                    return v.data[this.idField] === node.data[this.idField];\r\n                }) > -1;\r\n            }\r\n\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    private unSelectedCurrentRowEmit() {\r\n        const currSelected = this.selectedRow;\r\n        if (currSelected) {\r\n            this.nodeUnSelect.emit({ node: currSelected, type: 'row', instance: this });\r\n        }\r\n    }\r\n\r\n    private _singleSelectNode(e: SelectEventArgs) {\r\n\r\n        this.clearSelections();\r\n        this.selectedRow = e.rowNode.node;\r\n        this.selectRowIndex = e.rowIndex;\r\n        this.selections = [e.rowNode.node];\r\n        e.rowNode.isSelected = true;\r\n\r\n        if (this.showCheckbox) {\r\n            e.rowNode.isChecked = true;\r\n            this.clearCheckeds();\r\n            this.setCheckeds(e.rowNode);\r\n        }\r\n\r\n        const sp: NodeSelectedParam = {\r\n            originalEvent: e.originalEvent,\r\n            node: e.rowNode.node, type: 'row',\r\n            index: e.rowIndex,\r\n            parents: e.rowNode.parents,\r\n            instance: this\r\n        };\r\n        this.nodeSelected.emit(sp);\r\n    }\r\n\r\n    private _singleUnSelectNode(e: SelectEventArgs) {\r\n        this.selectedRow = null;\r\n        this.selectRowIndex = -1;\r\n        e.rowNode.isSelected = false;\r\n        e.rowNode.isChecked = false;\r\n        this.selections = [];\r\n\r\n        this.nodeUnSelect.emit({\r\n            originalEvent: e.originalEvent,\r\n            node: e.rowNode.node, type: 'row', parents: e.rowNode.parents,\r\n            instance: this\r\n        });\r\n    }\r\n\r\n    private __singleSelectNode(event: SelectEventArgs, selected = false) {\r\n        if (!selected) {\r\n            this.unSelectedCurrentRowEmit();\r\n            this._singleSelectNode(event);\r\n        } else {\r\n            if (!this.keepSelect) {\r\n                this._singleUnSelectNode(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    private __multiSelectNode(event: SelectEventArgs, selected) {\r\n        const rowNode = event.rowNode;\r\n        if (selected) {\r\n            this.unSelectedCurrentRowEmit();\r\n            this.singleSelectWhenMultiSelect(rowNode, true);\r\n            this.nodeSelected.emit({\r\n                originalEvent: event.originalEvent, node: rowNode.node,\r\n                type: 'row', index: event.rowIndex, parents: rowNode.parents,\r\n                instance: this\r\n            });\r\n        } else {\r\n            if (!this.keepSelect) {\r\n                this.singleSelectWhenMultiSelect(rowNode, false);\r\n                this.nodeUnSelect.emit({\r\n                    originalEvent: event.originalEvent, node: rowNode.node,\r\n                    type: 'row', index: event.rowIndex, parents: rowNode.parents,\r\n                    instance: this\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * è¡åå»äºä»¶\r\n     */\r\n    handleRowClick(event: SelectEventArgs) {\r\n        const rowNode = event.rowNode;\r\n        rowNode.node['elementRef'] = event.originalEvent.target;\r\n        const selected = this.isSelected(rowNode.node);\r\n\r\n        if (this.singleSelect) {\r\n            this.__singleSelectNode(event, selected);\r\n        } else {\r\n            rowNode.indeterminate = false;\r\n            if (this.onlySelectSelf) {\r\n                this.__multiSelectNode(event, !selected);\r\n            } else {\r\n                rowNode.isSelected = !selected;\r\n                this.state.rowNodes.find(n => n.id === rowNode.id).isSelected = !selected;\r\n                this.setSelections(rowNode);\r\n\r\n                const rowSelectChangeParams: NodeSelectedParam = {\r\n                    originalEvent: event.originalEvent, node: rowNode.node,\r\n                    type: 'row', index: event.rowIndex, parents: rowNode.parents,\r\n                    instance: this\r\n                };\r\n\r\n                if (rowNode.isSelected) {\r\n                    this.nodeSelected.emit(rowSelectChangeParams);\r\n                } else {\r\n                    this.nodeUnSelect.emit(rowSelectChangeParams);\r\n                }\r\n\r\n\r\n                if (this.checkOnSelect) {\r\n                    rowNode.isChecked = !selected;\r\n                    this.state.rowNodes.find(n => n.id === rowNode.id).isChecked = !selected;\r\n                    this.setCheckeds(rowNode);\r\n                    const nodes = this.cascadeNodes(rowNode, rowNode.isChecked);\r\n                    this.ttService.onChangeCheckboxStatus(rowNode);\r\n\r\n                    if (rowNode.isChecked) {\r\n                        this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, nodes, instance: this });\r\n                    } else {\r\n                        this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, nodes, instance: this });\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            if (this.checkOnSelect) {\r\n                const ids = this.checkeds.map(tn => tn.id);\r\n                this.checkValues = ids;\r\n                this.checkValuesChange.emit(ids);\r\n            }\r\n        }\r\n\r\n        this.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * å¸¦æcheckbox çåé\r\n     * @param rowNode å½åèç¹\r\n     */\r\n    private singleSelectWhenMultiSelect(rowNode: RowNode, flag: boolean) {\r\n        if (this.checkOnSelect) {\r\n            rowNode.isChecked = flag;\r\n            this.setCheckeds(rowNode);\r\n\r\n            this.cascadeNodes(rowNode, rowNode.isChecked);\r\n\r\n            if (rowNode.isChecked) {\r\n                this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, instance: this });\r\n            } else {\r\n                this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, instance: this });\r\n            }\r\n        }\r\n\r\n        this.clearSelections();\r\n\r\n        if (this.onlySelectSelf) {\r\n            this.selectedRow = rowNode.node;\r\n        }\r\n        rowNode.isSelected = flag;\r\n        this.setSelections(rowNode);\r\n    }\r\n\r\n    private selectWhenChecked(rowNode: RowNode, flag: boolean, event: any) {\r\n        if (rowNode.node.selectable) {\r\n            rowNode.isChecked = flag;\r\n        }\r\n        this.setCheckeds(rowNode, false);\r\n        if (this.selectOnCheck) {\r\n            if (this.onlySelectSelf) {\r\n                if (flag || (this.selectedRow && this.selectedRow.id === rowNode.id)) {\r\n                    this.clearSelections();\r\n                }\r\n            }\r\n\r\n            if (this.singleSelect && this.showCheckbox) {\r\n                this.clearCheckeds();\r\n            }\r\n            if (rowNode.node.selectable) {\r\n                rowNode.isSelected = flag;\r\n            }\r\n            this.setSelections(rowNode);\r\n\r\n            this.state.rowNodes.find(n => n.id === rowNode.id).isSelected = flag;\r\n\r\n            if (rowNode.isSelected) {\r\n                this.nodeSelected.emit({ originalEvent: event, node: rowNode.node, instance: this, type: 'checkbox' });\r\n            } else {\r\n                this.nodeUnSelect.emit({ originalEvent: event, node: rowNode.node, instance: this, type: 'checkbox' });\r\n            }\r\n        }\r\n    }\r\n\r\n    private isInArray(rowNode: RowNode, items: TreeNode[]) {\r\n        if (items && items.length === 0) {\r\n            return false;\r\n        }\r\n        return items.findIndex(i => i.data[this.idField] === rowNode.id) > -1;\r\n    }\r\n\r\n    private setSelections(rowNode: RowNode) {\r\n        if (rowNode.isSelected) {\r\n            if (!this.selections) {\r\n                this.selections = [];\r\n            }\r\n            if (!this.isInArray(rowNode, this.selections)) {\r\n                // this.selections = [...this.selections, rowNode.node];\r\n                this.selections.push(rowNode.node);\r\n            }\r\n        } else {\r\n            if (this.selections) {\r\n                const i = this.selections.findIndex((tn: TreeNode) => tn.data[this.idField] === rowNode.node.data[this.idField]);\r\n                if (i !== -1) {\r\n                    this.selections.splice(i, 1);\r\n                }\r\n                // this.selections = this.selections.filter((tn: TreeNode) => tn.data[this.idField] !== rowNode.node.data[this.idField]);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setCheckeds(rowNode: RowNode, updated = true) {\r\n        if (rowNode.isChecked) {\r\n            if (!this.checkeds) {\r\n                this.checkeds = [];\r\n            }\r\n            if (!this.isInArray(rowNode, this.checkeds)) {\r\n                // this.checkeds = [ ...this.checkeds, rowNode.node];\r\n                this.checkeds.push(rowNode.node);\r\n            }\r\n        } else {\r\n            if (this.checkeds) {\r\n                const i = this.checkeds.findIndex((tn: TreeNode) => tn.data[this.idField] === rowNode.node.data[this.idField]);\r\n                if (i !== -1) {\r\n                    this.checkeds.splice(i, 1);\r\n                }\r\n                // this.checkeds = this.checkeds.filter((tn: TreeNode) => tn.data[this.idField] !== rowNode.node.data[this.idField]);\r\n            }\r\n        }\r\n\r\n        if (updated) {\r\n            this.checkeds = [ ...this.checkeds];\r\n        }\r\n    }\r\n\r\n    private getDiffrentData(data: TreeNode[]) {\r\n        if (data.length) {\r\n            const _nodes = [];\r\n            data.forEach(n => {\r\n                if (_nodes.findIndex(t => t.data[this.idField] === n.data[this.idField]) === -1) {\r\n                    _nodes.push(n);\r\n                }\r\n            });\r\n            return _nodes;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    private cascadeCheckedNode(rowNode: RowNode, checked: boolean, sync = false): TreeNode[] {\r\n        const nodes: TreeNode[] = [];\r\n        if (rowNode.node.selectable) {\r\n            rowNode.isChecked = checked;\r\n        }\r\n        this.setCheckeds(rowNode, false);\r\n        if (this.selectOnCheck) {\r\n            if (sync) {\r\n                const status = this.isIndeterminate(rowNode) !== 2;\r\n                checked = status ? checked: false;\r\n            }\r\n\r\n            if (rowNode.node.selectable) {\r\n                rowNode.isSelected = checked;\r\n                this.setSelections(rowNode);\r\n            }\r\n        }\r\n        if (!this.isInArray(rowNode, nodes)) {\r\n            nodes.push(rowNode.node);\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    /**\r\n     * åä¸çº§èéä¸­\r\n     * @param node å½åèç¹\r\n     * @param checked éä¸­ç¶æ\r\n     * è¿ååå½±åçè¡\r\n     */\r\n    propagateSelectionDown(rowNode: RowNode, checked: boolean) {\r\n        let nodes = this.cascadeCheckedNode(rowNode, checked);\r\n        if (this.cascadeCheck && this.cascadeDown && rowNode.node.children && rowNode.node.children.length) {\r\n            rowNode.node.children.forEach((v, i) => {\r\n                const rn = this.state.rowNodes.find((row: RowNode) => row.id === v.data[this.idField]);\r\n                if (rn) {\r\n                    rn.indeterminate = false;\r\n                    if (rn.node.selectable) {\r\n                        rn.isChecked = checked;\r\n                    }\r\n                    nodes = nodes.concat(this.propagateSelectionDown(rn, checked));\r\n                    this.ttService.onChangeCheckboxStatus(rn);\r\n                }\r\n            });\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    /**\r\n     * åä¸çº§èéä¸­\r\n     */\r\n    propagateSelectionUp(rowNode: RowNode, checked: boolean) {\r\n        const nodes = this.cascadeCheckedNode(rowNode, checked);\r\n        if (this.cascadeCheck && this.cascadeUp && rowNode.node.parent) {\r\n            if (rowNode.parents && rowNode.parents.length) {\r\n                const rns: RowNode[] = [];\r\n                rowNode.parents.forEach((n, i) => {\r\n                    const rn = this.findRowNode(n);\r\n                    if (rn && rn.node.selectable) {\r\n                        // rn.isChecked = checked;\r\n                        const checkedNodes = this.cascadeCheckedNode(rn, checked, true);\r\n                        if (checkedNodes.length) {\r\n                            nodes.push(checkedNodes[0]);\r\n                        }\r\n                        rns.push(rn);\r\n                    }\r\n                });\r\n\r\n                rns.reverse().forEach(rn => {\r\n                    this.updateCheckboxStatus(rn);\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n        return nodes;\r\n    }\r\n\r\n    // èç¹ç¶æï¼éä¸­ï¼å¾éï¼åæ­¥æ´æ°\r\n    private updateNodeStatus() {\r\n        if (this.state.searched) {\r\n            const rowNodes = this.state.searchRowNodes;\r\n            if (!rowNodes) {\r\n                return;\r\n            }\r\n            rowNodes.forEach(rn => {\r\n                const checkedItem: RowNode = this.state.rowNodes.find(n => n.id === rn.id);\r\n\r\n                const chked = checkedItem ? checkedItem.isChecked : false;\r\n                rn.indeterminate = false;\r\n                rn.isChecked = chked;\r\n\r\n                if (this.selectOnCheck) {\r\n                    if (checkedItem.isSelected != rn.isChecked) {\r\n                        checkedItem.isSelected = checkedItem.isChecked;\r\n                    }\r\n                    rn.isSelected = checkedItem.isSelected;\r\n                }\r\n            });\r\n        } else {\r\n            if (this.selectOnCheck) {\r\n                this.state.rowNodes.forEach(rn => {\r\n                    if (this.onlySelectSelf) {\r\n                        if (!this.selections || !this.selections.length ) {\r\n                            rn.isSelected = false;\r\n                        } else {\r\n                            if (this.selections[0].id === rn.id) {\r\n                                rn.isSelected = true;\r\n                            } else {\r\n                                rn.isSelected = false;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (rn.isSelected != rn.isChecked) {\r\n                            rn.isSelected = rn.isChecked;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * çº§èéæ©èç¹\r\n     * @param rowNode å½åèç¹\r\n     * @param checked æ¯å¦é©é\r\n     */\r\n    private cascadeNodes(rowNode: RowNode, checked: boolean) {\r\n        let checkedNodes = this.propagateSelectionDown(rowNode, checked);\r\n        checkedNodes = checkedNodes.concat(this.propagateSelectionUp(rowNode, checked));\r\n        checkedNodes = this.getDiffrentData(checkedNodes);\r\n\r\n        this.updateNodeStatus();\r\n\r\n        this.updateAllCheckboxStatus();\r\n\r\n        return checkedNodes.filter(n => {\r\n            return n.selectable;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * è¡Checkbox éä¸­ååäºä»¶\r\n     * @param event é¼ æ ç¹å»äºä»¶å¯¹è±¡\r\n     * @param rowNode å½åæ èç¹\r\n     */\r\n    toggleNodeWithCheckbox(event: Event, rowNode: RowNode, checked: boolean): any {\r\n        this.state.rowNodes.find(n => n.id === rowNode.id).isChecked = checked;\r\n        rowNode.indeterminate = false;\r\n\r\n        const data = this.cascadeNodes(rowNode, checked);\r\n\r\n        this.ttService.onChangeCheckboxStatus(rowNode);\r\n        if (checked) {\r\n            this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, nodes: data, instance: this });\r\n        } else {\r\n            this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, nodes: data, instance: this });\r\n        }\r\n\r\n        this.selectWhenChecked(rowNode, checked, event);\r\n\r\n        if (this.onlySelectSelf && checked) {\r\n            this.selectedRow = rowNode.node;\r\n        }\r\n\r\n        this.checkeds = [...this.checkeds];\r\n        this.detectChanges();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    /**\r\n     * å¨é\r\n     * @param event é¼ æ äºä»¶å¯¹è±¡\r\n     * @param checked æ¯å¦éä¸­\r\n     */\r\n    toggleNodesWithCheckbox(event: Event, checked: boolean) {\r\n        if (checked) {\r\n            if (this.data && this.data.length) {\r\n                this.checkAllNodes({ originalEvent: event, checked, instance: this });\r\n            }\r\n        } else {\r\n            this.selections = null;\r\n            this.unCheckAllNodes({ originalEvent: event, checked, instance: this });\r\n        }\r\n\r\n        this.detectChanges();\r\n    }\r\n\r\n    /** æ´æ°å¨écheckbox çç¶æ */\r\n    private updateAllCheckboxStatus() {\r\n        const status = this.isIndeterminate();\r\n        if (this.showCheckAll && !this.singleSelect && this.showCheckbox) {\r\n            if (status !== undefined) {\r\n                if (this.headerCheckboxCmp) {\r\n                    this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = status === 2;\r\n                    this.headerCheckboxCmp.checked = status === 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** æ´æ°ç¶èç¹checkbox éä¸­ç¶æ */\r\n    private updateParentCheckboxStatus(rowNode: RowNode) {\r\n        const pNodes = [];\r\n        rowNode.parents.forEach(rnid => {\r\n            const rn = this.findRowNode(rnid);\r\n            if (rn) {\r\n                pNodes.push(rn);\r\n            }\r\n        });\r\n\r\n        pNodes.reverse().forEach(rn => {\r\n            this.updateCheckboxStatus(rn);\r\n        });\r\n    }\r\n    /** æ´æ°Nä¸ªç¶èç¹å¤éæ¡ä¸­çéä¸­ç¶æ */\r\n    private updateParentsCheckStatus(parentIds: any) {\r\n        let pids = [];\r\n        parentIds.forEach((ids: any) => {\r\n            pids = [...pids, ...ids];\r\n        });\r\n\r\n        pids = Array.from(new Set(pids));\r\n\r\n        const pRowNodes = this.findRowNodes(pids);\r\n\r\n        pRowNodes.sort((r, n) => {\r\n            return n.level - r.level;\r\n        }).forEach(rn => {\r\n            this.updateCheckboxStatus(rn);\r\n        });\r\n\r\n    }\r\n\r\n    /** æ´æ°èç¹ä¸­checkboxçç¶æ */\r\n    private updateCheckboxStatus(rowNode: RowNode) {\r\n        const status = this.isIndeterminate(rowNode);\r\n        if (status !== undefined && rowNode.node.selectable) {\r\n            rowNode.indeterminate = status === 2;\r\n            this.ttService.onChangeCheckboxStatus(rowNode);\r\n        }\r\n    }\r\n\r\n    /** å¤æ­æå®èç¹checkbox çç¶æ */\r\n    private isIndeterminate(rowNode?: RowNode): any {\r\n        const status = this.getCheckboxStatus(rowNode);\r\n        if (status !== undefined) {\r\n            let checked = false;\r\n            if (status === 2) {\r\n                checked = false;\r\n            } else {\r\n                checked = !!status;\r\n            }\r\n            if (rowNode && rowNode.node.selectable) {\r\n                rowNode.isChecked = checked;\r\n                this.setCheckeds(rowNode, false);\r\n            }\r\n        }\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * è¿åç¶çº§èç¹checkbox çç¶æã0ï¼ä¸éä¸­ï¼ 1ï¼ éä¸­ï¼ 2ï¼ä¸ç¡®å®\r\n     * @param rowNode ç¶çº§èç¹ï¼ä¸ºç©ºæ¶è¿åå¨écheckbox çç¶æ\r\n     */\r\n    private getCheckboxStatus(rowNode?: RowNode) {\r\n        let uncheckedLength = 0;\r\n        let checkedLength = 0;\r\n        let len = 0;\r\n        let childNodes = [];\r\n        if (rowNode) {\r\n            childNodes = rowNode.node.children || [];\r\n        } else {\r\n            childNodes = this.state.rowNodes;\r\n        }\r\n        len = childNodes.length;\r\n        childNodes.forEach(n => {\r\n            let rn = n;\r\n            if (rowNode) {\r\n                rn = this.findRowNode(n.data[this.idField]);\r\n            }\r\n            if (rn && !rn.indeterminate) {\r\n                if (rn.isChecked) {\r\n                    checkedLength++;\r\n                } else {\r\n                    uncheckedLength++;\r\n                }\r\n            }\r\n        });\r\n\r\n        if (len === 0) {\r\n            return undefined;\r\n        }\r\n        let flag = 0;\r\n        if (uncheckedLength === len) {\r\n            flag = 0;\r\n        } else {\r\n            if (checkedLength === len) {\r\n                flag = 1;\r\n            } else {\r\n                flag = 2;\r\n            }\r\n        }\r\n\r\n        return flag;\r\n    }\r\n\r\n    private findIndexIn(node: TreeNode, treeNodes: TreeNode[]) {\r\n        let index = -1;\r\n        if (treeNodes && treeNodes.length) {\r\n            index = treeNodes.findIndex((v, i) => {\r\n                return this.equals(v, node);\r\n            });\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * å¨éä¸­çéåä¸­æ¥æ¾æå®èç¹çç´¢å¼\r\n     * @param node æ èç¹\r\n     */\r\n    findIndexInCheckeds(node: TreeNode): number {\r\n        return this.findIndexIn(node, this.checkeds);\r\n    }\r\n\r\n    /**\r\n     * å¨éä¸­çéåä¸­æ¥æ¾æå®èç¹çç´¢å¼\r\n     * @param node æ èç¹\r\n     */\r\n    findIndexInSelection(node: TreeNode): number {\r\n        return this.findIndexIn(node, this.selections);\r\n    }\r\n\r\n    /** å¯¹æ¯ä¸¤ä¸ªèç¹æ¯å¦åä¸ä¸ªèç¹ */\r\n    equals(target: TreeNode, source: TreeNode): boolean {\r\n        return target.data[this.idField] === source.data[this.idField];\r\n    }\r\n\r\n    /**\r\n     * å±å¼ææèç¹\r\n     * @param rowNode å±å¼æ­¤èç¹ä¸çææèç¹ï¼å¦æä¸ºç©ºï¼åå±å¼ææèç¹\r\n     * @param deep è®¾ç½®ä¸ºtrue æ¶ï¼å½åèç¹ä¸çææå­èç¹å¨é¨å±å¼, é»è®¤ false\r\n     * @param childrenEmptyEmitExpand  å½æ²¡æå­èç¹æ¯å¦è§¦åå±å¼äºä»¶ï¼é»è®¤ä¸º true\r\n     */\r\n    toggleExpand(treeNode?: TreeNode, deep = false, childrenEmptyEmitExpand = true) {\r\n        if (treeNode) {\r\n            treeNode.expanded = !treeNode.expanded;\r\n            this.updateNodeProperty(treeNode.id, {expanded: treeNode.expanded});\r\n            this.toggleVisible(treeNode);\r\n\r\n            if (this.virtualized) {\r\n                if (treeNode.children && treeNode.children.length) {\r\n                    this.renderVirtualRowNodes();\r\n                }\r\n            }\r\n\r\n            if (treeNode.expanded) {\r\n                if (childrenEmptyEmitExpand || (treeNode.children && treeNode.children.length)) {\r\n                    this.expand.emit(treeNode);\r\n                } else {\r\n                    treeNode.expanded = !treeNode.expanded;\r\n                    return;\r\n                }\r\n            } else {\r\n                this.collapse.emit(treeNode);\r\n            }\r\n\r\n            if (deep) {\r\n                if (treeNode.children && treeNode.children.length) {\r\n                    treeNode.children.forEach((row, i) => {\r\n                        this.toggleExpand(row, deep, childrenEmptyEmitExpand);\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n\r\n            if (this.data && this.data.length) {\r\n                this.data.forEach((row: any) => {\r\n                    this.toggleExpand(row);\r\n                });\r\n            }\r\n\r\n        }\r\n\r\n        this.setNewColumnsWidth();\r\n\r\n    }\r\n\r\n    private toggleVisible(treeNode: TreeNode) {\r\n        const rowNode = this.findRowNode(treeNode.id);\r\n        if (rowNode) {\r\n            const rid = rowNode.id;\r\n\r\n            const setRowVisible = (rn, visible) => {\r\n                const rnParent = this.findRowNode(rn.parent.data[this.idField]);\r\n                if (rnParent) {\r\n                    rn.visible = rnParent.visible && rnParent.node.expanded;\r\n                } else {\r\n                    rn.visible = visible;\r\n                }\r\n\r\n                const _r = this.serializedValue.find(n => n.id === rn.id);\r\n                if (_r) {\r\n                    _r.visible = rn.visible;\r\n                }\r\n            };\r\n\r\n            this.state.rowNodes.filter(rn => rn.parents.indexOf(rid) > -1).forEach(rn => {\r\n                setRowVisible(rn, treeNode.expanded);\r\n            });\r\n        }\r\n    }\r\n\r\n    /** å±å¼æå®èç¹\r\n     * emit: è§¦åå±å¼äºä»¶\r\n     * render: æ°æ®éæ°å è½½\r\n     */\r\n    expandNode(id: string, emit = true, render = true) {\r\n        if (id) {\r\n            const rowNode = this.findRowNode(id);\r\n            if (rowNode) {\r\n                rowNode.node.expanded = true;\r\n                this.toggleVisible(rowNode.node);\r\n\r\n                if (render) {\r\n                    if (this.virtualized) {\r\n                        if (rowNode.node.children && rowNode.node.children.length) {\r\n                            this.renderVirtualRowNodes();\r\n                        }\r\n                    } else {\r\n                        this.detectChanges();\r\n                    }\r\n                }\r\n\r\n                if (emit) {\r\n                    this.expand.emit(rowNode.node);\r\n                }\r\n\r\n                this.setNewColumnsWidth();\r\n\r\n            } else {\r\n                this.writeConsole('Con\\'t find tree node widh id:' + id, 'error');\r\n            }\r\n        }\r\n    }\r\n\r\n    /** å±å¼ææèç¹ */\r\n    expandAll() {\r\n        this.state.rowNodes = this.state.rowNodes.map((row: RowNode) => {\r\n            row.node.expanded = true;\r\n            row.visible = true;\r\n            return row;\r\n        });\r\n\r\n        if (this.virtualized) {\r\n            this.renderVirtualRowNodes();\r\n        } else {\r\n            this.serializedValue = this.state.rowNodes;\r\n        }\r\n        this.setNewColumnsWidth();\r\n        this.expandAllNodes.emit();\r\n        this.detectChanges();\r\n    }\r\n\r\n    expandNodes(id: string) {\r\n        // const rowNode = this.findRowNode(id);\r\n        // const rootNode = this.getRoot(id);\r\n        // if (rowNode) {\r\n        //     const treeNode = rowNode.node;\r\n        //     treeNode.expanded = true;\r\n        //     rowNode.visible = true;\r\n        //     const parents = rowNode.parents;\r\n\r\n        //     this.state.rowNodes.filter(n => n.parents.indexOf(rootNode.id) > -1).forEach(r => {\r\n        //         if (parents.indexOf(r.id) > -1) {\r\n        //             r.visible = true;\r\n        //             r.node.expanded = true;\r\n        //         }\r\n        //     });\r\n\r\n\r\n        //     this.detectChanges();\r\n        // }\r\n    }\r\n\r\n    /** å±å¼æå®èç¹ä¸çææèç¹ */\r\n    expandAllNodesBy(rowNode: any) {\r\n        if (rowNode) {\r\n            const treeNode = rowNode.node;\r\n            treeNode.expanded = true;\r\n            rowNode.visible = true;\r\n\r\n            this.state.rowNodes.filter(n => n.parents.indexOf(rowNode.id) > -1).forEach(r => {\r\n                r.visible = true;\r\n                r.node.expanded = true;\r\n            });\r\n\r\n            this.detectChanges();\r\n            this.setNewColumnsWidth();\r\n        }\r\n    }\r\n\r\n    /** æå æå®èç¹ */\r\n    collapseNode(id: string) {\r\n        if (id) {\r\n            const rowNode = this.findRowNode(id);\r\n            if (rowNode) {\r\n                rowNode.node.expanded = false;\r\n                this.toggleVisible(rowNode.node);\r\n                this.detectChanges();\r\n                this.setNewColumnsWidth();\r\n                this.collapse.emit(rowNode.node);\r\n            } else {\r\n                this.writeConsole('Con\\'t find tree node widh id:' + id, 'error');\r\n            }\r\n        }\r\n    }\r\n    /** æå ææèç¹ */\r\n    collapseAll() {\r\n        this.state.rowNodes = this.state.rowNodes.map((row: RowNode) => {\r\n            row.node.expanded = false;\r\n            row.visible = !row.parent;\r\n            return row;\r\n        });\r\n\r\n        if (this.virtualized) {\r\n            this.renderVirtualRowNodes();\r\n        } else {\r\n            this.serializedValue = this.state.rowNodes;\r\n        }\r\n\r\n\r\n        this.collapseAllNodes.emit();\r\n        this.detectChanges();\r\n        this.setNewColumnsWidth();\r\n    }\r\n\r\n    getContainerOffset() {\r\n        const rect = this.containerElement.getBoundingClientRect();\r\n        return {\r\n            left: rect.left + document.body.scrollLeft,\r\n            top: rect.top + document.body.scrollTop\r\n        };\r\n    }\r\n\r\n    onColumnResizeBegin(event) {\r\n        const containerLeft = Math.round(this.getContainerOffset().left);\r\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerElement.scrollLeft);\r\n        event.preventDefault();\r\n    }\r\n\r\n    onColumnResize(event) {\r\n        if (this.resizableColumns) {\r\n            const containerLeft = this.getContainerOffset().left;\r\n            this.renderer.addClass(this.containerElement, 'ui-unselectable-text');\r\n            this.resizerHelperVC.nativeElement.style.height = this.containerElement.offsetHeight + 'px';\r\n            this.resizerHelperVC.nativeElement.style.top = 0 + 'px';\r\n            this.resizerHelperVC.nativeElement.style.left = (event.pageX - containerLeft) + 'px';\r\n\r\n            this.resizerHelperVC.nativeElement.style.display = 'block';\r\n        }\r\n    }\r\n\r\n    onColumnResizeEnd(event: any, column: any) {\r\n        if (!this.resizerHelperVC.nativeElement.offsetLeft) {\r\n            return;\r\n        }\r\n\r\n        // åç§»é\r\n        const delta = this.resizerHelperVC.nativeElement.offsetLeft - this.lastResizerHelperX;\r\n        // åå®½\r\n        const columnWidth = column.offsetWidth;\r\n        // æ°å®½åº¦\r\n        const newColumnWidth = columnWidth + delta;\r\n        // æå°å®½åº¦\r\n        const minWidth = column.style.minWidth || 15;\r\n\r\n        let resizeColumnIndex = -1;\r\n        if (column.id) {\r\n            resizeColumnIndex = this.columns.findIndex(n => n.id === column.id);\r\n        } else {\r\n            const colField = column.getAttribute('field');\r\n            if (colField) {\r\n                resizeColumnIndex = this.columns.findIndex(n => n.field === colField);\r\n            }\r\n        }\r\n\r\n\r\n        if (!this.fitColumns) {\r\n            this.resizeColGroup(this.headerTable.nativeElement, resizeColumnIndex, newColumnWidth, 0);\r\n            this.resizeColGroup(this.bodyTable.nativeElement, resizeColumnIndex, newColumnWidth, 0);\r\n\r\n            if (this.columns[resizeColumnIndex]) {\r\n                this.columns[resizeColumnIndex].width = newColumnWidth;\r\n            }\r\n\r\n            this.sortColumnsByFixed(false);\r\n\r\n            this.setCellWidthCss(this.allColumnsWidth(), 0, []);\r\n\r\n            // this.setTableWidth(this.allColumnsWidth());\r\n\r\n            // // update css.\r\n            // const _colInfo = this.columns[resizeColumnIndex];\r\n            // if (_colInfo) {\r\n            //     const ruleName = this.columnCssName(_colInfo);\r\n            //     const stylecss = ruleName + '{width:' + newColumnWidth + 'px}';\r\n            //     this.utils.appendCssRules([stylecss], this.styleElement.sheet);\r\n            // }\r\n\r\n            // const nextColumn = this.columns[resizeColumnIndex + 1];\r\n            // if (nextColumn && nextColumn.fixed) {\r\n            //     const ruleName = this.columnCssName(nextColumn);\r\n            //     const stylecss = ruleName + '{' + nextColumn.fixed + ':' + nextColumn[nextColumn.fixed] + 'px}';\r\n            //     this.utils.appendCssRules([stylecss], this.styleElement.sheet);\r\n            // }\r\n\r\n        } else {\r\n            if (newColumnWidth > minWidth) {\r\n                let nextColumn = column.nextElementSibling;\r\n                while (!nextColumn.offsetParent) {\r\n                    nextColumn = nextColumn.nextElementSibling;\r\n                }\r\n\r\n                if (nextColumn) {\r\n                    const nextColumnWidth = nextColumn.offsetWidth - delta;\r\n                    const nextColumnMinWidth = nextColumn.style.minWidth || 15;\r\n\r\n                    if (newColumnWidth > 15 && nextColumnWidth > nextColumnMinWidth) {\r\n                        this.resizeColGroup(this.headerTable.nativeElement, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                        this.resizeColGroup(this.bodyTable.nativeElement, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.resizerHelperVC.nativeElement.style.display = 'none';\r\n        this.renderer.removeClass(this.containerElement, 'ui-unselectable-text');\r\n        this.psRef.directiveRef.update();\r\n    }\r\n\r\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth?: number) {\r\n        if (table) {\r\n            const colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\r\n\r\n            if (colGroup) {\r\n                const col = colGroup.children[resizeColumnIndex];\r\n                const nextCol = col.nextElementSibling;\r\n                col.style.width = newColumnWidth + 'px';\r\n\r\n\r\n                if (nextCol) {\r\n                    if (nextColumnWidth && this.fitColumns) {\r\n                        nextCol.style.width = nextColumnWidth + 'px';\r\n                    }\r\n                }\r\n            } else {\r\n                throw new Error('Scrollable tables require a colgroup to support resizable columns');\r\n            }\r\n        }\r\n    }\r\n\r\n    onSearch() {\r\n        this.state.searchRowNodes = null;\r\n        this.state.searched = !!this.searchData.value;\r\n        if (this.searchData.value) {\r\n            this.searchData.value = this.searchData.value.trim();\r\n        }\r\n        this.search.emit(this.searchData);\r\n    }\r\n\r\n    insert(node: TreeNode, parent?: TreeNode) {\r\n        if (parent) {\r\n            if (!parent.children) {\r\n                parent.children = [];\r\n            }\r\n            parent.children.push(node);\r\n\r\n            this.expandNode(parent.data[this.idField]);\r\n            this.appendNew.emit({ parent });\r\n        } else {\r\n            this.data.push(node);\r\n        }\r\n\r\n        this.updateSerializedValue();\r\n    }\r\n\r\n    append(data: { [key: string]: any }, parent?: TreeNode) {\r\n        if (data && data[this.idField]) {\r\n            this.insert({ data, id: data[this.idField] }, parent);\r\n        } else {\r\n            this.writeConsole('Please set id value.', 'warn');\r\n        }\r\n    }\r\n\r\n    private emitAppendNew(parent: TreeNode) {\r\n        if (this.virtualized) {\r\n            const nodePosY = this.psRef.directiveRef.elementRef.nativeElement.scrollTop;\r\n            this.updateSerializedValue(nodePosY);\r\n        } else {\r\n            this.updateSerializedValue();\r\n        }\r\n\r\n    }\r\n\r\n    appendChildren(nodes: TreeNode[], parent: TreeNode, emit = true) {\r\n        if (nodes && nodes.length) {\r\n            if (parent) {\r\n                parent.children.push(...nodes);\r\n                this.emitAppendNew(parent);\r\n                if (emit) {\r\n                    this.appendNew.emit({ parent });\r\n                }\r\n            } else {\r\n                throw new Error('æªæ¾å°ç¶çº§èç¹');\r\n            }\r\n        } else {\r\n            this.updateSerializedValue();\r\n            this.writeConsole('æ·»å å­èç¹çæ°æ®ä¸ºç©º', 'warn');\r\n        }\r\n    }\r\n\r\n    loadChildren(nodes: TreeNode[], parent: TreeNode, emit = true) {\r\n        if (parent) {\r\n            parent.children = nodes || [];\r\n            this.emitAppendNew(parent);\r\n            if (emit) {\r\n                this.appendNew.emit({ parent });\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(nodeId: string) {\r\n        if (nodeId) {\r\n            const rowNode = this.findRowNode(nodeId);\r\n            if (rowNode) {\r\n                // remove(this.state.rowNodes, (n) => {\r\n                //     return n.id === nodeId;\r\n                // });\r\n                if (this.selectValue === nodeId) {\r\n                    this.selectedRow = null;\r\n                    this.selectValue = null;\r\n                }\r\n\r\n                if (rowNode.parent) {\r\n                    remove(rowNode.parent.children, (n) => {\r\n                        return n.data[this.idField] === nodeId;\r\n                    });\r\n                } else {\r\n                    remove(this.state.rowNodes, (n) => {\r\n                        return n.id === nodeId;\r\n                    });\r\n\r\n                    this.data = this.data.filter(n => n.data[this.idField] !== nodeId);\r\n                }\r\n                this.updateSerializedValue();\r\n                this.detectChanges();\r\n                this.ttService.onRemove(rowNode);\r\n                this.removed.emit(rowNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    update(nodeId: string, data: { [key: string]: string }) {\r\n        if (nodeId && data) {\r\n            const rowNode = this.findRowNode(nodeId);\r\n            if (rowNode) {\r\n                rowNode.node.data = extend(rowNode.node.data, data);\r\n                this.detectChanges();\r\n                this.ttService.onUpdate(rowNode);\r\n                this.updated.emit(rowNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateNodeProperty(nodeid: string, property: { [key: string]: any } ) {\r\n        const rowNode = this.findRowNode(nodeid);\r\n        if (rowNode && property) {\r\n            Object.keys(property).forEach(k => {\r\n                rowNode.node[k] = property[k];\r\n            });\r\n        }\r\n    }\r\n\r\n    private setScorllBodyHeight() {\r\n        this.scorllBodyHeight = this.height;\r\n\r\n        if (this.showFilterBar) {\r\n            this.scorllBodyHeight = this.scorllBodyHeight - 46;\r\n        }\r\n        if (this.fixedHeader && this.showHeader) {\r\n            if (this.headerBox && (this.headerWrap || this.useGroupHeader)) {\r\n                const hh = this.headerBox.nativeElement.clientHeight;\r\n                this.scorllBodyHeight = this.scorllBodyHeight - hh;\r\n            } else {\r\n                // å®½æ¾çæ¶ï¼è¡¨å¤´é«åº¦å¢é«ï¼éè¦æå®éåå¾è¡¨å¤´é«åº¦\r\n                let _headerHeight = this.headerHeight;\r\n                const themesKey = localStorage.getItem('gsp_rtf_themSKey');\r\n                if (themesKey === 'loose' && this.headerBox) {\r\n                    _headerHeight = this.headerBox.nativeElement.getBoundingClientRect().height;\r\n                }\r\n                this.scorllBodyHeight = this.scorllBodyHeight - _headerHeight;\r\n            }\r\n        }\r\n\r\n        if (this.pagination) {\r\n            this.scorllBodyHeight = this.scorllBodyHeight - this.pagerHeight;\r\n        }\r\n\r\n\r\n\r\n        this.detectChanges();\r\n    }\r\n\r\n    private setWidth(w) {\r\n        this.width = w;\r\n    }\r\n\r\n    resize(size?: { width: number, height: number }) {\r\n        if (size) {\r\n            const w = parseInt('' + size.width, 10);\r\n            const h = parseInt('' + size.height, 10);\r\n\r\n            if (this.width === w && this.height === h) {\r\n                if (this.state.scrollY) {\r\n                    this.psRef.directiveRef.scrollToY(this.state.scrollY);\r\n                }\r\n\r\n                if (this.state.scrollX) {\r\n                    this.psRef.directiveRef.scrollToX(this.state.scrollX)\r\n                }\r\n\r\n                return;\r\n            }\r\n            this.setWidth(w);\r\n            this.height = h;\r\n        }\r\n        this.setScorllBodyHeight();\r\n        if (this.data && this.data.length) {\r\n            this.renderVirtualRowNodes();\r\n        }\r\n\r\n        // setTimeout(() => {\r\n        //     if (this.psRef) {\r\n        //         this.psRef.directiveRef.update();\r\n        //     }\r\n        // }, 100);\r\n    }\r\n\r\n    loadData(data: TreeNode[]) {\r\n        if (this.showLines) {\r\n            this.isLoadNewDataSetEmpty = true;\r\n            this.data = [];\r\n            this.isLoadNewDataSetEmpty = false;\r\n        }\r\n        this.data = data;\r\n    }\r\n\r\n    empty() {\r\n        this.data = [];\r\n    }\r\n\r\n    getCurrentAllRowNodes() {\r\n        if (this.state.searched && this.state.searchRowNodes && this.state.searchRowNodes.length) {\r\n            return this.state.searchRowNodes || this.state.rowNodes;\r\n        } else {\r\n            return this.state.rowNodes;\r\n        }\r\n    }\r\n\r\n    clearAll(detectChanges = true): TreeTableComponent {\r\n        this.state.rowNodes.filter(rn => rn.indeterminate).forEach(rn => {\r\n            rn.indeterminate = false;\r\n            this.ttService.onChangeCheckboxStatus(rn);\r\n        });\r\n\r\n        this.state.rowNodes = this.state.rowNodes.map((row: RowNode) => {\r\n            row.isChecked = false;\r\n            row.isSelected = false;\r\n            row.indeterminate = false;\r\n            return row;\r\n        });\r\n\r\n\r\n        // if (this.searchData && this.searchData.value) {\r\n        if (this.state.searched && this.state.searchRowNodes && this.state.searchRowNodes.length) {\r\n            this.serializedValue = this.state.searchRowNodes.map((row: RowNode) => {\r\n                row.isChecked = false;\r\n                row.isSelected = false;\r\n                row.indeterminate = false;\r\n                return row;\r\n            });\r\n        }\r\n\r\n        this.checkeds = [];\r\n        this.selections = [];\r\n        this.selectedRow = undefined;\r\n\r\n        if (this.showCheckAll && this.headerCheckboxCmp) {\r\n            this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = false;\r\n            this.headerCheckboxCmp.checked = false;\r\n        }\r\n\r\n        if (detectChanges) {\r\n            this.detectChanges();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    detectChanges(): TreeTableComponent {\r\n        this.cdRef.markForCheck();\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (!this.cdRef['destroyed']) {\r\n            this.cdRef.detectChanges();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    clearCheckeds(): TreeTableComponent {\r\n        if (this.checkeds && this.checkeds.length) {\r\n            this.findRowNodes(this.checkeds.map(tn => tn.data[this.idField])).forEach(rn => {\r\n                rn.isChecked = false;\r\n            });\r\n        }\r\n\r\n        this.checkeds = [];\r\n\r\n        if (this.showCheckAll && this.headerCheckboxCmp) {\r\n            this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = false;\r\n            this.headerCheckboxCmp.checked = false;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    clearSelections(): TreeTableComponent {\r\n\r\n        if (this.serializedValue && this.serializedValue.length) {\r\n            this.serializedValue.forEach(n => {\r\n                n.isSelected = false;\r\n            });\r\n        }\r\n\r\n        this.state.rowNodes.forEach(n => {\r\n            n.isSelected = false;\r\n        });\r\n\r\n        if (this.selections && this.selections.length) {\r\n            const nodeIds = this.selections.map(tn => tn.data[this.idField]);\r\n            this.findRowNodes(nodeIds).forEach(rn => {\r\n                rn.isSelected = false;\r\n                if (this.singleSelect) {\r\n                    rn.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.selections = undefined;\r\n        this.selectedRow = undefined;\r\n        return this;\r\n    }\r\n    /** éä¸­ç¬¬1ä¸ªå¯ä»¥éä¸­çèç¹ */\r\n    selectFirstNode() {\r\n        if (this.state.rowNodes && this.state.rowNodes.length) {\r\n            const firstCanSelectNode = this.state.rowNodes.find(n => n.node.selectable);\r\n            if (firstCanSelectNode) {\r\n                this.selectNode(firstCanSelectNode.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    private scrollToCurrentRow(id: string) {\r\n        const trId = 'rownode-' + id;\r\n        // const trEle =    document.getElementById(trId);\r\n        const trEle = this.el.nativeElement.querySelector('#' + trId) || document.getElementById(trId);\r\n        if (trEle && trEle.closest('.farris-treetable') && trEle.closest('.farris-treetable').id === this.id) {\r\n            if (!this.isElementInViewport(trEle)) {\r\n                if (trEle.scrollIntoViewIfNeeded) {\r\n                    trEle.scrollIntoViewIfNeeded();\r\n                    return true;\r\n                }\r\n                const browserInfo = this.utils.getBrowserType();\r\n                if (browserInfo.ff && this.utils.getFFVer() < 58) {\r\n                    trEle.scrollIntoView();\r\n                } else {\r\n                    trEle.scrollIntoView({ block: 'nearest', inline: 'nearest' });\r\n                }\r\n            } else {\r\n                trEle.scrollIntoView({ block: 'nearest'});\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private isElementInViewport(el) {\r\n        const containerEl = this.el.nativeElement.querySelector('.farris-treetable-body');\r\n        if (!containerEl) {\r\n            return false;\r\n        }\r\n        const container = containerEl.getBoundingClientRect();\r\n        const viewPortHeight = container.height;\r\n        const offsetTop = el.offsetTop + this.topHideHeight;\r\n        const scrollTop = this.psRef.directiveRef.elementRef.nativeElement.scrollTop;\r\n        const top = offsetTop - scrollTop;\r\n        return  top >= 0 && top <= viewPortHeight;\r\n    }\r\n\r\n    private _scrollToNode(nodeId: string) {\r\n        this.scrollToCurrentNode(nodeId);\r\n    }\r\n\r\n    scrollToCurrentNode(nodeid = '') {\r\n        let id = nodeid;\r\n        if (!nodeid && this.selectedRow) {\r\n            id = this.selectedRow.id;\r\n        }\r\n\r\n        const result = this.scrollToCurrentRow(id);\r\n        if (!result) {\r\n            const rowNode = this.findRowNode(id);\r\n            const showRowsOnePager = Math.ceil(this.scorllBodyHeight / this.rowHeight ) + 1;\r\n            if (rowNode.parents && rowNode.parents.length) {\r\n                rowNode.parents.forEach(pid => {\r\n                    this.expandNode(pid, false, false);\r\n                });\r\n            } \r\n            const rowIndex = this.state.rowNodes.filter(n => n.visible).findIndex(n => n.id === id);\r\n            if (rowIndex < showRowsOnePager) {\r\n                if (this.virtualized) {\r\n                    this.renderData(0);\r\n                }\r\n                setTimeout(() => {\r\n                    this.scrollToCurrentRow(id);\r\n                });\r\n                return;\r\n            }\r\n            const top = rowIndex * this.rowHeight;\r\n\r\n            if (this.virtualized) {\r\n                this.renderData(top - this.rowHeight);\r\n\r\n                setTimeout(() => {\r\n                    this.scrollToCurrentRow(id);\r\n                    if (this.psRef && this.psRef.directiveRef) {\r\n                        this.psRef.directiveRef.elementRef.nativeElement.scrollTop += 1;\r\n                    }\r\n                }, 50);\r\n            } else {\r\n                this.scrollToY(top - this.rowHeight);\r\n                this.scrollToCurrentRow(id);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** éä¸­æå®ID çèç¹,\r\n     * detectChanges: è§¦åèå¼æ£æ¥ï¼é»è®¤ä¸º true\r\n     * gotocurrent: ä½¿ç¨éä¸­èç¹å¯è§ï¼é»è®¤ä¸º true\r\n     */\r\n    selectNode(id: string, detectChanges = true, gotocurrent = true): TreeTableComponent {\r\n        if (!id) {\r\n            return this;\r\n        }\r\n        let node = this.findRowNode(id);\r\n        const emit = !this.selectedRow || (this.selectedRow && id !== this.selectedRow.id);\r\n        \r\n        if (node && emit) {\r\n            node.isSelected = true;\r\n            if (this.singleSelect || this.onlySelectSelf) {\r\n                this.clearSelections();\r\n                node.isSelected = true;\r\n                this.selections = [node.node];\r\n                if (this.checkOnSelect && this.showCheckbox) {\r\n                    node.isChecked = true;\r\n                    if (this.multiSelect) {\r\n                        this.setCheckeds(node);\r\n                    } else {\r\n                        this.clearCheckeds();\r\n                        this.checkeds = [node.node];\r\n                    }\r\n\r\n                    if (this.cascadeCheck && this.cascadeUp) {\r\n                        this.updateParentCheckboxStatus(node);\r\n                    }\r\n                }\r\n            } else {\r\n                this.setSelections(node);\r\n            }\r\n\r\n            this.selectedRow = node.node;\r\n            this.selectNodeChangedSubject.next(id);\r\n            this.nodeSelected.emit({ node: node.node, instance: this });\r\n\r\n            if (this.serializedValue.find(n=>n.id == this.selectedRow.id)) {\r\n                this.serializedValue.find(n=>n.id == this.selectedRow.id).isSelected = true;\r\n            }\r\n          \r\n            if (detectChanges) {\r\n                this.detectChanges();\r\n            }\r\n            if (gotocurrent && this.fixedHeader) {\r\n                this.scrollToCurrentNode();\r\n            }\r\n        } else {\r\n            if (!node) {\r\n                this.selectedRow = null;\r\n                this.writeConsole(`æªæ¾å°IDä¸º ${id} çæ°æ®ï¼ï¼`)\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** åæ¶éä¸­ */\r\n    unSelectNode(id: string, detectChanges = true) {\r\n        const rowNode = this.findRowNode(id);\r\n        if (rowNode) {\r\n            rowNode.isSelected = false;\r\n            if (this.singleSelect) {\r\n                this.clearSelections();\r\n                this.selectedRow = null;\r\n                rowNode.isChecked = false;\r\n                this.selections = [];\r\n            } else {\r\n                if (this.onlySelectSelf) {\r\n                    this.selections = [];\r\n                } else {\r\n                    this.setSelections(rowNode);\r\n                }\r\n            }\r\n\r\n            if (detectChanges) {\r\n                this.detectChanges();\r\n            }\r\n            this.nodeUnSelect.emit({ node: rowNode.node, instance: this });\r\n        } else {\r\n            this.writeConsole(`æªæ¾å°IDä¸º${id}çæ°æ®ï¼ï¼`);\r\n        }\r\n    }\r\n\r\n    /** éä¸­å¤è¡æ°æ® */\r\n    selectNodes(ids: string[], detectChanges = true, emitNodeSelected = false): TreeTableComponent {\r\n        if (ids && ids.length) {\r\n            const nodes = this.findRowNodes(ids).map(rn => {\r\n                rn.isSelected = true;\r\n                this.setSelections(rn);\r\n                return rn.node;\r\n            });\r\n\r\n            this.selections = [...this.selections];\r\n\r\n            if (detectChanges) {\r\n                this.detectChanges();\r\n            }\r\n\r\n            this.selectNodeChangedSubject.next(ids.join(','));\r\n            if (emitNodeSelected) {\r\n                this.nodeSelected.emit({ node: nodes, instance: this });\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** åæ¶éä¸­ */\r\n    unSelectNodes(ids?: string[]) {\r\n        if (ids && ids.length) {\r\n            const rownodes = this.findRowNodes(ids);\r\n            if (rownodes && rownodes.length) {\r\n                rownodes.forEach(rn => {\r\n                    rn.isSelected = false;\r\n                    this.setSelections(rn);\r\n                });\r\n                this.selections = [...this.selections];\r\n                this.detectChanges();\r\n                this.nodeUnSelect.emit({ node: rownodes.map(r => r.node), instance: this });\r\n            }\r\n        } else {\r\n            this.clearSelections();\r\n            this.detectChanges();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * é©éæå®çèç¹\r\n     * @param updateParentCheckboxStatus: æ¯å¦æ´æ°ç¶çº§èç¹checkbox ç¶æ, é»è®¤ä¸º true\r\n     * @param detectChanges è§¦ååæ´æ£æµãé»è®¤ä¸º true\r\n     */\r\n    checkedNode(id: string, updateParentCheckboxStatus = true, detectChanges = true) {\r\n        if (this.isEnableMultiSelect()) {\r\n            const node = this.findRowNode(id);\r\n            if (node) {\r\n                node.isChecked = true;\r\n                if (!this.isChecked(node.node)) {\r\n                    // this.checkeds = [...this.checkeds || [], node.node];\r\n                    this.setCheckeds(node, false);\r\n                    if (updateParentCheckboxStatus && this.cascadeCheck && this.cascadeUp) {\r\n                        this.updateParentCheckboxStatus(node);\r\n                    }\r\n                }\r\n                if (detectChanges) {\r\n                    this.detectChanges();\r\n                }\r\n                this.nodeChecked.emit({ originalEvent: null, node: node.node, instance: this });\r\n            } else {\r\n                this.writeConsole(`æªæ¾å°IDä¸º${id}çæ°æ®ï¼ï¼`);\r\n            }\r\n        }\r\n    }\r\n\r\n    unCheckedNode(id: string, updateParentCheckboxStatus = true, ) {\r\n        if (this.isEnableMultiSelect()) {\r\n            const rownode = this.findRowNode(id);\r\n\r\n            if (rownode) {\r\n                rownode.isChecked = false;\r\n                this.setCheckeds(rownode);\r\n                if (this.selectOnCheck) {\r\n                    rownode.isSelected = false;\r\n                    this.setSelections(rownode);\r\n                }\r\n                \r\n                if (this.selectedRow && this.selectedRow.id === id) {\r\n                    this.selectedRow = null;\r\n                }\r\n\r\n                if (this.singleSelect || !this.cascadeCheck) {\r\n                    this.updateNodeStatus();\r\n\r\n                    if (updateParentCheckboxStatus && this.cascadeCheck && this.cascadeUp) {\r\n                        this.updateParentCheckboxStatus(rownode);\r\n                    }\r\n\r\n                    if (this.checkValues) {\r\n                        this.checkValues = this.checkValues.filter(n => n !== id);\r\n                        this.checkValuesChange.emit(this.checkValues);\r\n                    }\r\n\r\n                    this.detectChanges();\r\n                    this.nodeUnChecked.emit({ node: rownode, instance: this });\r\n                } else {\r\n                    const unNodes = this.cascadeNodes(rownode, false);\r\n                    this.checkeds = [...this.checkeds];\r\n                    this.checkValuesChange.emit(this.checkValues);\r\n\r\n                    this.detectChanges();\r\n                    this.nodeUnChecked.emit({ node: rownode, nodes: unNodes, instance: this });\r\n                }\r\n\r\n\r\n            } else {\r\n                this.writeConsole(`æªæ¾å°IDä¸º${id}çæ°æ®ï¼ï¼`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _checkedNodes(ids: string[], checked: boolean) {\r\n        const parentIDS = [];\r\n        const nodes = this.findRowNodes(ids).map(rn => {\r\n            parentIDS.push(rn.parents);\r\n            if (rn.node.selectable) {\r\n                rn.isChecked = checked;\r\n                this.setCheckeds(rn, false);\r\n            }\r\n            return rn.node;\r\n        });\r\n        this.checkeds = [...this.checkeds];\r\n        if (this.cascadeCheck && this.cascadeUp) {\r\n            // æ´æ°ç¶èç¹å¤æ¡çéä¸­ç¶æ\r\n            this.updateParentsCheckStatus(parentIDS);\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    /** æ¹ééä¸­èç¹\r\n     * @param ids: id éå\r\n     * @param detectChanges: boolean  é»è®¤ä¸º true ,æ¯å¦è§¦ååæ´æ£æµ\r\n     * closeCascade:  æ§è¡åæ¶é©éæ¶æ¯å¦å³é­çº§èåè½ãé»è®¤ä¸º false\r\n     *      è®¾ä¸ºtrueæ¶ï¼é©éå°ç¦ç¨çº§èçåè½ï¼ä»å¤çå½åèç¹çéä¸­ç¶æãæ§è¡å®æ¯åï¼æ¢å¤ååççº§èéé¡¹ã\r\n     */\r\n    checkedNodes(ids: any[], detectChanges = true, emit = true, closeCascade?: boolean) {\r\n        if (this.isEnableMultiSelect()) {\r\n            if (ids && ids.length) {\r\n\r\n                const _cascade = this.cascadeCheck;\r\n                if (closeCascade && _cascade) {\r\n                    this.cascadeCheck = false;\r\n                }\r\n\r\n                const nodes = this._checkedNodes(ids, true);\r\n\r\n                if (closeCascade && _cascade) {\r\n                    // æ¢å¤çº§è\r\n                    this.cascadeCheck = true;\r\n                }\r\n\r\n                this.updateAllCheckboxStatus();\r\n\r\n                // this.checkeds = nodes;\r\n                if (detectChanges) {\r\n                    this.detectChanges();\r\n                }\r\n\r\n                if (emit) {\r\n                    this.nodeChecked.emit({ originalEvent: null, node: nodes, nodes, instance: this });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * åæ¶éä¸­çèç¹.\r\n     * ids: æ è¯Id æ°ç»\r\n     * closeCascade: æ§è¡åæ¶é©éæ¶æ¯å¦å³é­çº§èåè½ãé»è®¤ä¸º false\r\n     *     è®¾ä¸ºtrueæ¶ï¼é©éå°ç¦ç¨çº§èçåè½ï¼ä»å¤çå½åèç¹çéä¸­ç¶æãæ§è¡å®æ¯åï¼æ¢å¤ååççº§èéé¡¹ã\r\n     * emit: æ¯å¦è§¦ååæ¶å¾éäºä»¶ãé»è®¤ä¸º true\r\n     */\r\n    unCheckedNodes(ids: string[], closeCascade?: boolean, emit = true) {\r\n\r\n        if (ids && ids.length) {\r\n            const _cascade = this.cascadeCheck;\r\n            if (closeCascade && _cascade) {\r\n                this.cascadeCheck = false;\r\n            }\r\n\r\n            const nodes = this._checkedNodes(ids, false);\r\n\r\n            if (closeCascade && _cascade) {\r\n                this.cascadeCheck = true;\r\n            }\r\n\r\n            this.detectChanges();\r\n            // this.checkeds = nodes;\r\n            if (emit) {\r\n                this.nodeUnChecked.emit({ originalEvent: null, node: nodes, nodes, instance: this });\r\n            }\r\n        } else {\r\n            this.clearCheckeds();\r\n            this.detectChanges();\r\n        }\r\n    }\r\n\r\n    findRowNode(id: string): RowNode {\r\n        if (id) {\r\n            if (this.state.rowNodes) {\r\n                return this.state.rowNodes.find(n => n.id === id);\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /** å°å¨ v0.2.x åºå¼ï¼è¯·ä½¿ç¨ findRowNode æ¹æ³ */\r\n    findNode(id: string): RowNode {\r\n        return this.findRowNode(id);\r\n    }\r\n\r\n    /**\r\n     * æ ¹æ®å½åèç¹IDï¼è·åé¡¶çº§ç¶èç¹\r\n     * @param id å½åèç¹ID\r\n     * @returns è¿åé¡¶çº§èç¹\r\n     */\r\n    getRoot(id: string) {\r\n        const rowNode = this.findRowNode(id);\r\n        if (rowNode) {\r\n            if (rowNode.parents && rowNode.parents.length) {\r\n                return this.findRowNode(rowNode.parents[0]);\r\n            }\r\n            return rowNode;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    findRowNodes(ids: string[]): RowNode[] {\r\n        return this.state.rowNodes.filter(rn => ids.indexOf(rn.id) > -1);\r\n    }\r\n\r\n    checkAllNodes(args?: any) {\r\n        let rowNodes = this.getCurrentAllRowNodes();\r\n        rowNodes = rowNodes.filter(n => (n.node.selectable || n.node.selectable === undefined));\r\n\r\n        this.checkeds = rowNodes.map(n => {\r\n            n.indeterminate = false;\r\n            this.ttService.onChangeCheckboxStatus(n);\r\n            if (n.node.selectable || n.node.selectable === undefined) {\r\n                n.isChecked = true;\r\n            }\r\n            return n.node;\r\n        });\r\n\r\n        if (this.selectOnCheck && !this.onlySelectSelf) {\r\n            this.selections = rowNodes.map(n => {\r\n                if (n.node.selectable || n.node.selectable === undefined) {\r\n                    n.isSelected = true;\r\n                }\r\n                return n.node;\r\n            });\r\n        }\r\n\r\n        if (this.state.searched) {\r\n            rowNodes.forEach(rn => {\r\n                const row = this.state.rowNodes.find(n => n.id === rn.id);\r\n                if (row) {\r\n                    row.isSelected = rn.isSelected;\r\n                    row.isChecked = rn.isChecked;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.checkAll.emit(args);\r\n\r\n        this.updateAllCheckboxStatus();\r\n        this.detectChanges();\r\n    }\r\n\r\n    unCheckAllNodes(args?: any) {\r\n        this.clearAll();\r\n        this.unCheckAll.emit(args);\r\n        this.detectChanges();\r\n    }\r\n\r\n    private isEnableMultiSelect() {\r\n        if (this.singleSelect) {\r\n            if (!this.showCheckbox) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // ä»æ°æ®ä¸­è·åèç¹å¾æ \r\n    // iconField ä¸º object\r\n    //      å¦æ å±å¼å¾æ ä¸ºç©ºï¼æå å¾æ ä¸ä¸ºç©ºï¼æåä¹ï¼åå±å¼ä¸æå å¾æ ä¿æä¸è³ï¼\r\n    //      å¦æ å¶å­å¾æ ä¸ºç©ºï¼åä½¿ç¨ç»ä»¶é»è®¤çå¾æ \r\n    // iconField ä¸º å­ç¬¦ä¸²ï¼ åå¶å­ å±å¼ æå  å¾æ ä½¿ç¨åä¸ä¸ªã å¦æä¸ºç©ºï¼ åä½¿ç¨ç»ä»¶é»è®¤å¾æ \r\n    private getNodeIconFromData(tn: TreeNode) {\r\n        let leaf = null;\r\n        let expand = null;\r\n        let collapse = null;\r\n        if (this.useIconFromData) {\r\n            if (this.iconField) {\r\n                let _iconField = '';\r\n                if (typeof this.iconField === 'string') {\r\n                    _iconField = this.iconField;\r\n                    if (tn[_iconField]) {\r\n                        leaf = tn[_iconField];\r\n                    } else {\r\n                        leaf = this.utils.getValue(_iconField, tn.data);\r\n                    }\r\n\r\n                    expand = collapse = leaf;\r\n                } else {\r\n                    if (this.iconField.leaf) {\r\n                        leaf = this.utils.getValue(this.iconField.leaf, tn.data);\r\n                    }\r\n                    if (this.iconField.expand) {\r\n                        expand = this.utils.getValue(this.iconField.expand, tn.data);\r\n                    }\r\n                    if (this.iconField.collapse) {\r\n                        collapse = this.utils.getValue(this.iconField.collapse, tn.data);\r\n                    }\r\n\r\n                    if (expand && !collapse) {\r\n                        collapse = expand;\r\n                    }\r\n\r\n                    if (!expand && collapse) {\r\n                        expand = collapse;\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            leaf, expand, collapse\r\n        };\r\n    }\r\n\r\n    getTreeIcon(treeNode: TreeNode) {\r\n        const tn = treeNode;\r\n        let leafIcon = this.leafIcon || 'file';\r\n        let expandIcon = this.expandIcon || 'folder-open';\r\n        let collapseIcon = this.collapseIcon || 'folder';\r\n        const loading = 'f-loading-round';\r\n\r\n        if (tn['showLoading']) {\r\n            return { [loading]: true };\r\n        }\r\n\r\n        if (tn.icon) {\r\n            leafIcon = tn.icon;\r\n        }\r\n\r\n        if (tn.expandedIcon) {\r\n            expandIcon = tn.expandedIcon;\r\n        }\r\n\r\n        if (tn.collapsedIcon) {\r\n            collapseIcon = tn.collapsedIcon;\r\n        }\r\n\r\n        if (this.useIconFromData) {\r\n            const { leaf, expand, collapse } = this.getNodeIconFromData(treeNode);\r\n            if (this.whenDataIconEmptyUseDefault) {\r\n                if (leaf) {\r\n                    leafIcon = leaf;\r\n                }\r\n                if (expand) {\r\n                    expandIcon = expand;\r\n                }\r\n                if (collapse) {\r\n                    collapseIcon = collapse;\r\n                }\r\n            } else {\r\n                leafIcon = leaf || '';\r\n                expandIcon = expand || '';\r\n                collapseIcon = collapse || '';\r\n            }\r\n        }\r\n\r\n\r\n        const collapsedExpression = (!tn.leaf || !!(tn.children && tn.children.length)) && !tn.expanded;\r\n        const expandedExpression = !!tn.expanded;\r\n        const leafExpression = tn.leaf === undefined ? (!tn.children || !tn.children.length) : tn.leaf;\r\n\r\n        const icons = {};\r\n\r\n        if (leafExpression && leafIcon) {\r\n            icons[leafIcon] = leafExpression;\r\n        } else {\r\n            if (tn.expanded && expandIcon) {\r\n                icons[expandIcon] = expandedExpression;\r\n            } else {\r\n                if (collapseIcon) {\r\n                    icons[collapseIcon] = collapsedExpression;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.iconCls) {\r\n            icons[this.iconCls] = true;\r\n        }\r\n\r\n        return icons;\r\n    }\r\n\r\n    private compare(a, b) {\r\n        if (typeof a === 'string') {\r\n            return a.localeCompare(b);\r\n        } else {\r\n            return a === b ? 0 : (a > b ? 1 : -1);\r\n        }\r\n    }\r\n    private _sort(r1, r2) {\r\n        let r = 0;\r\n        const sortFields = this.sortName.split(',');\r\n        const orders = this.sortOrder.split(',');\r\n\r\n        if (!this.sortName) {\r\n            return r;\r\n        }\r\n\r\n        for (let i = 0; i < sortFields.length; i++) {\r\n            const sn = sortFields[i];\r\n            const so = orders[i];\r\n\r\n            const col = this.columns.find(c => c.field === sn);\r\n\r\n            const orderby = col.sorter || this.compare;\r\n            let v1 = this.utils.getValue(sn, r1.data);\r\n            if (v1 === null || v1 === undefined) {\r\n                v1 = '';\r\n            }\r\n            let v2 = this.utils.getValue(sn, r2.data);\r\n            if (v2 === null || v2 === undefined) {\r\n                v2 = '';\r\n            }\r\n            r = orderby(v1, v2);\r\n            if (r !== 0) {\r\n                return r * (so === 'asc' ? 1 : -1);\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n\r\n    clientSort() {\r\n        const sortedData = this.data.sort(this._sort.bind(this));\r\n\r\n        const sortChildNodes = (childNodes) => {\r\n            childNodes = childNodes.sort(this._sort.bind(this));\r\n            childNodes.forEach(n => {\r\n                if (n.children && n.children.length) {\r\n                    n.children = n.children.sort(this._sort.bind(this));\r\n                    sortChildNodes(n.children);\r\n                }\r\n            });\r\n            return childNodes;\r\n        };\r\n\r\n        sortedData.forEach(c => {\r\n            c.children = sortChildNodes(c.children);\r\n        });\r\n\r\n        this.loadData(sortedData);\r\n    }\r\n\r\n    onSortColumnClick($event, col) {\r\n        if (!col.sortable) {\r\n            return;\r\n        }\r\n        const sortName = this.sortName;\r\n        const sortOrder = this.sortOrder;\r\n        let sortFields = [];\r\n        let sortOrders = [];\r\n        if (sortName) {\r\n            sortFields = sortName.split(',');\r\n            sortOrders = sortOrder.split(',');\r\n        }\r\n\r\n        const colOrder = col.order || 'asc';\r\n        let newOrder = colOrder;\r\n        const i = sortFields.findIndex(n => n === col.field);\r\n        if (i >= 0) {\r\n            const _order = sortOrders[i] === 'asc' ? 'desc' : 'asc';\r\n            newOrder = _order;\r\n            // if (this.multiSort && newOrder === 'asc') {\r\n            if (newOrder === 'asc') {\r\n                newOrder = undefined;\r\n                sortFields.splice(i, 1);\r\n                sortOrders.splice(i, 1);\r\n            } else {\r\n                sortOrders[i] = _order;\r\n            }\r\n\r\n        } else {\r\n            if (this.multiSort) {\r\n                sortFields.push(col.field);\r\n                sortOrders.push(colOrder);\r\n            } else {\r\n                sortFields = [col.field];\r\n                sortOrders = [colOrder];\r\n            }\r\n        }\r\n\r\n        col.order = newOrder;\r\n\r\n        this.sortName = sortFields.join(',');\r\n        this.sortOrder = sortOrders.join(',');\r\n\r\n        if (!this.multiSort) {\r\n\r\n            const updateFieldOrder = (cols: TreeTableColumn[]) => {\r\n                if (!cols || !cols.length) {\r\n                    return;\r\n                }\r\n                cols.forEach(c => {\r\n                    c.order = undefined;\r\n                    const k = sortFields.findIndex(f => f === c.field);\r\n                    if (k >= 0) {\r\n                        c.order = sortOrders[k];\r\n                    }\r\n                });\r\n            };\r\n\r\n            updateFieldOrder(this.columns);\r\n            this.cdRef.detectChanges();\r\n        }\r\n\r\n        this.beforeSortColumn(this.sortName, this.sortOrder).subscribe(() => {\r\n            if (this.remoteSort) {\r\n                // this.reload();\r\n            } else {\r\n                this.clientSort();\r\n            }\r\n\r\n            this.columnSorted.emit({ sortName: this.sortName, sortOrder: this.sortOrder });\r\n        });\r\n    }\r\n\r\n    /** æ¥è¯¢å·¥å·æ¡åç«¯å­ç¬¦æ¥è¯¢ */\r\n    findKeyWords($event) {\r\n        const searchValue = $event.value;\r\n        const field = $event.field;\r\n        this.findField = field;\r\n        if (searchValue && searchValue.length >= 2) {\r\n            this.findValue = searchValue;\r\n\r\n            if (!field) {\r\n                this.writeConsole('Please set a field for the FindField property.', 'warn');\r\n                return;\r\n            }\r\n\r\n            const result = this.searchHandle.searchOnClient(field, searchValue, this.state.rowNodes);\r\n\r\n            if (result && result.length) {\r\n                this.findResult = result.sort((a, b) => a.index === b.index ? 0 : (a.index > b.index ? 1 : -1));\r\n                this.findCount = result.length;\r\n                this.findCurrent = 1;\r\n    \r\n                this._scrollToNode(result[0].id);\r\n\r\n                this.highLightKeywords();\r\n            } else {\r\n                this.findResult = [];\r\n                this.findCurrent = 0;\r\n                this.findCount = 0;\r\n            }\r\n        } else {\r\n            this.resetFindText();\r\n            this.cdRef.detectChanges();\r\n        }\r\n    }\r\n\r\n\r\n    nextFindValue(step) {\r\n        if (!this.findResult || !this.findResult.length) {\r\n            return;\r\n        }\r\n        const allHighLights = Array.from(this.el.nativeElement.querySelectorAll('.search-highlight'));\r\n\r\n        if (this.findCurrent === this.findResult.length) {\r\n            this.findCurrent = 1;\r\n        } else {\r\n            if (step) {\r\n                this.findCurrent = this.findCurrent + step;\r\n                if (step === -1) {\r\n                    if (this.findCurrent <= 0) {\r\n                        this.findCurrent = 1;\r\n                    }\r\n                }\r\n            } else {\r\n                this.findCurrent++;\r\n            }\r\n        }\r\n\r\n        const active = this.el.nativeElement.querySelector('.search-highlight.active');\r\n\r\n        if (active) {\r\n            this.renderer.removeClass(active, 'active');\r\n        }\r\n\r\n        const _index = this.findCurrent - 1;\r\n        const nextRow = this.findResult[_index];\r\n        if (nextRow) {\r\n            this._scrollToNode(nextRow.id);\r\n\r\n            if (this.virtualized) {\r\n                this.ngZone.runOutsideAngular(() => {\r\n                    if (this['HIGH_LIGHT_TIMER']) {\r\n                        clearTimeout(this['HIGH_LIGHT_TIMER']);\r\n                    }\r\n                    this['HIGH_LIGHT_TIMER'] = setTimeout(() => {\r\n                        const trId = 'rownode-' + nextRow.id;\r\n                        const tr = this.el.nativeElement.querySelector('#' + trId);\r\n                        if (tr) {\r\n                            const highLightDom = tr.querySelector('.search-highlight');\r\n                            if (highLightDom) {\r\n                                this.renderer.addClass(highLightDom, 'active');\r\n                            }\r\n                        }\r\n                    }, 100);\r\n                });\r\n            } else {\r\n                if (allHighLights[_index]) {\r\n                    this.renderer.addClass(allHighLights[_index], 'active');\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    /** æ¥è¯¢å·¥å·æ¡åç«¯å­ç¬¦æ¥è¯¢ */\r\n    /*\r\n    findKeyWords($event) {\r\n        const searchValue = $event.value;\r\n        const field = $event.field;\r\n        this.findField = field;\r\n        if (searchValue && searchValue.length >= 2) {\r\n            this.findValue = searchValue;\r\n\r\n            if (!field) {\r\n                this.writeConsole('Please set a field for the FindField property.', 'warn');\r\n                return;\r\n            }\r\n\r\n            const result = this.searchHandle.searchOnClient(field, searchValue, this.state.rowNodes);\r\n\r\n            if (result && result.length) {\r\n                this.findResult = result.sort((a, b) => a.index === b.index ? 0 : (a.index > b.index ? 1 : -1));\r\n                const firstRowIndex = result[0].index;\r\n\r\n                this.findCount = result.length;\r\n\r\n                const parents = this.searchHandle.findParents(result, this.state.rowNodes);\r\n\r\n                this.findCurrent = 1;\r\n                [...parents, ...result].forEach((r: RowNode) => {\r\n                    this.expandNode(r.id);\r\n                });\r\n\r\n                let y = 0;\r\n                this.state.rowNodes.forEach((row: RowNode, index: number) => {\r\n                    if (row.visible && firstRowIndex > index) {\r\n                        y += this.rowHeight;\r\n                    }\r\n                });\r\n                if (this.psRef && this.psRef.directiveRef) {\r\n                    this.psRef.directiveRef.scrollToY(y - 30);\r\n                }\r\n\r\n                this.highLightKeywords();\r\n            } else {\r\n                this.findResult = [];\r\n                this.findCurrent = 0;\r\n                this.findCount = 0;\r\n            }\r\n        } else {\r\n            this.resetFindText();\r\n            this.cdRef.detectChanges();\r\n        }\r\n    }\r\n\r\n    nextFindValue(step) {\r\n        if (!this.findResult || !this.findResult.length) {\r\n            return;\r\n        }\r\n        const allHighLights = Array.from(this.el.nativeElement.querySelectorAll('.search-highlight'));\r\n\r\n        if (this.findCurrent === this.findResult.length) {\r\n            this.findCurrent = 1;\r\n        } else {\r\n            if (step) {\r\n                this.findCurrent = this.findCurrent + step;\r\n                if (step === -1) {\r\n                    if (this.findCurrent <= 0) {\r\n                        this.findCurrent = 1;\r\n                    }\r\n                }\r\n            } else {\r\n                this.findCurrent++;\r\n            }\r\n        }\r\n\r\n        const active = this.el.nativeElement.querySelector('.search-highlight.active');\r\n\r\n        let _index = allHighLights.indexOf(active);\r\n\r\n        if (active) {\r\n            this.renderer.removeClass(active, 'active');\r\n        }\r\n\r\n        if (this.virtualized) {\r\n\r\n            _index += !step ? 1 : step;\r\n\r\n            if (allHighLights[_index]) {\r\n                this.renderer.addClass(allHighLights[_index], 'active');\r\n\r\n            } else {\r\n                // åæ»å¨æå®ä½ç½®\r\n                const nextRow = this.findResult[this.findCurrent - 1];\r\n                let y = 0;\r\n                this.state.rowNodes.forEach((row: RowNode, index: number) => {\r\n                    if (row.visible && nextRow.index > index) {\r\n                        y += this.rowHeight;\r\n                    }\r\n                });\r\n\r\n                if (this.psRef && this.psRef.directiveRef) {\r\n                    this.psRef.directiveRef.scrollToY(y - 30, 200);\r\n                }\r\n                this.ngZone.runOutsideAngular(() => {\r\n                    setTimeout(() => {\r\n                        const keyWords = this.el.nativeElement.querySelectorAll('.search-highlight');\r\n                        this.renderer.addClass(keyWords[0], 'active');\r\n                    }, 100);\r\n                });\r\n            }\r\n        } else {\r\n            const currentEl: any = allHighLights[this.findCurrent - 1];\r\n            if (currentEl) {\r\n                this.renderer.addClass(currentEl, 'active');\r\n                if (this.psRef && this.psRef.directiveRef) {\r\n                    const sTop = currentEl.closest('td').offsetTop - 30;\r\n                    this.psRef.directiveRef.scrollToY(sTop, 200);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        this.cdRef.detectChanges();\r\n    }\r\n*/\r\n    closeFindPanel() {\r\n        this.showFindInput = false;\r\n        this.resetFindText();\r\n        this.cdRef.detectChanges();\r\n    }\r\n\r\n    private highLightKeywords() {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                this.cdRef.detectChanges();\r\n                const allHighLights = this.el.nativeElement.querySelectorAll('.search-highlight');\r\n                if (!allHighLights.length) {\r\n                    return;\r\n                }\r\n                this.renderer.addClass(allHighLights[0], 'active');\r\n            }, 100);\r\n        });\r\n    }\r\n\r\n    private resetFindText() {\r\n        this.findValue = '';\r\n        this.findCurrent = 0;\r\n        this.findCount = 0;\r\n        this.findResult = [];\r\n    }\r\n\r\n  \r\n\r\n    scrollToY(y: number, animations = 200) {\r\n        this.state.scrollY = y || 0;\r\n        this.psRef.directiveRef.scrollToY(y, animations);\r\n    }\r\n\r\n    private showOrHideColumn(field: string | string[], isHide: boolean) {\r\n        if (Array.isArray(field)) {\r\n            this.columns.forEach(n => {\r\n                if (field.indexOf(n.field) > -1) {\r\n                    n.visible = !isHide;\r\n                }\r\n            });\r\n        } else {\r\n            this.columns.forEach(n => {\r\n                if (field === n.field) {\r\n                    n.visible = !isHide;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.columnsChanged();\r\n    }\r\n\r\n    showColumn(field: string | string[]) {\r\n        this.showOrHideColumn(field, false);\r\n    }\r\n\r\n    hideColumn(field: string | string[]) {\r\n        this.showOrHideColumn(field, true);\r\n    }\r\n\r\n    showChildsLoading(parentNode: TreeNode) {\r\n        const colspan = this.columns.filter(n => n.visible !== false).length;\r\n        const data = { [this.idField]: 'æ­£å¨å è½½ä¸­....', __colspan__: colspan };\r\n        this.loadChildren([{ data, __childs_loading__: true }], parentNode, false);\r\n    }\r\n\r\n    onChildsPageChanged($event) {\r\n        this.childsPageChanged.emit($event);\r\n    }\r\n\r\n    private trId2DataId(tr) {\r\n        return tr.id.replace('rownode-', '');\r\n    }\r\n\r\n\r\n    // å¿«æ·é®\r\n    onKeydownEvent($event) {\r\n        if (!$event || !this.singleSelect || !this.data || !this.data.length) {\r\n            return;\r\n        }\r\n\r\n        const keys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\r\n\r\n        if (!keys.includes($event.key) || $event.target.nodeName === 'INPUT') {\r\n            return;\r\n        }\r\n\r\n        $event.stopPropagation();\r\n        $event.preventDefault();\r\n        this.inputGroup.textbox.nativeElement.blur();\r\n        let newIdx;\r\n        const trs = Array.from(this.bodyTable.nativeElement.querySelectorAll('tr'));\r\n        const trCount = trs.length;\r\n        let selectedTrIndex = -1;\r\n\r\n        if (this.selectedRow) {\r\n            selectedTrIndex = trs.findIndex((n: any) => this.trId2DataId(n) === this.selectedRow.id);\r\n        }\r\n\r\n        if ($event.code === 'ArrowDown') {\r\n            newIdx = selectedTrIndex + 1;\r\n        } else if ($event.code === 'ArrowUp') {\r\n            if (selectedTrIndex !== -1) {\r\n                newIdx = selectedTrIndex - 1;\r\n            }\r\n        } else {\r\n            if (this.selectedRow && ($event.code === 'ArrowRight' || $event.code === 'ArrowLeft')) {\r\n                this.toggleExpand(this.selectedRow);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if (newIdx >= 0 && newIdx < trCount) {\r\n            const _tr = trs[newIdx] as any;\r\n            if (_tr) {\r\n                const id = this.trId2DataId(_tr);\r\n                this.selectNode(id);\r\n                _tr.scrollIntoView({ block: 'nearest' });\r\n            }\r\n        }\r\n    }\r\n\r\n    onBeforeShowContextMenu = (e: any) => {\r\n        // row_1_fixedleft  row_1  row_1_fixedright\r\n        const { contextMenuDom, event } = e;\r\n\r\n        let rowID = event.target.id;\r\n\r\n        if (contextMenuDom) {\r\n            rowID = this.trId2DataId(contextMenuDom);\r\n            const rowNode = this.findRowNode(rowID);\r\n\r\n            let go$ = of({show: true});\r\n            if (this.beforeShowContextMenu) {\r\n                go$ = this.beforeShowContextMenu({ data: rowNode, tree: this });\r\n            }\r\n\r\n            return go$.pipe(\r\n                switchMap((r: any) => {\r\n                    if (r.show) {\r\n\r\n                        if (r.menus) {\r\n                            this.contextMenuItems = r.menus;\r\n                            this.detectChanges();\r\n                        }\r\n\r\n                        const viewportW = contextMenuDom.closest('.farris-treetable').offsetWidth;\r\n                        const targetW = contextMenuDom.offsetWidth;\r\n\r\n                        const focusTargetWidth = viewportW > targetW ? targetW : viewportW;\r\n                        return of({ show: true, data: { data: rowNode, tree: this }, focusTargetWidth });\r\n                    } else {\r\n                        return of({ show: false });\r\n                    }\r\n                })\r\n            );\r\n        }\r\n        return of({ show: false });\r\n    }\r\n\r\n    /** æ ¹æ®ä¼ å¥çç¶çº§IDï¼è·åææå­çº§èç¹ */\r\n    getChildNodes(parentId: string): TreeNode[] {\r\n        let nodes = [];\r\n        if (parentId) {\r\n            const rowNode = this.findRowNode(parentId);\r\n            if (rowNode && rowNode.node.children && rowNode.node.children.length) {\r\n                rowNode.node.children.forEach((tn: TreeNode) => {\r\n                    if (tn.selectable) {\r\n                        nodes.push(tn);\r\n                    }\r\n                    nodes = nodes.concat(this.getChildNodes(tn.id));\r\n                });\r\n            }\r\n\r\n            return nodes;\r\n        }\r\n        return []\r\n    }\r\n\r\n    /** æ ¹æ®ä¼ å¥çèç¹IDï¼ è·åææç¶çº§èç¹ */\r\n    getParentNodes(id: string): RowNode[] {\r\n        let nodes = [];\r\n        if (id) {\r\n            const rowNode = this.findRowNode(id);\r\n            if (rowNode && rowNode.parents && rowNode.parents.length) {\r\n                rowNode.parents.forEach((n) => {\r\n                    const rn = this.findRowNode(n);\r\n                    if (rn && rn.node.selectable) {\r\n                        nodes.push(rn);\r\n                    }\r\n                })\r\n            }\r\n\r\n            return nodes;\r\n        }\r\n        return []\r\n    }\r\n\r\n}\r\n\r\n\r\n@Component({\r\n    selector: '[treeTableBody]',\r\n    template: `\r\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\">\r\n            <ng-container *ngIf=\"serializedNode.visible\">\r\n                <ng-container\r\n                    *ngTemplateOutlet=\"template;\r\n                        context: {$implicit: serializedNode, node: serializedNode.node,\r\n                        rowData: serializedNode.node.data, rowIndex: rowIndex, columns: columns}\">\r\n                </ng-container>\r\n            </ng-container>\r\n        </ng-template>\r\n    `\r\n})\r\nexport class TTBodyComponent {\r\n    /**\r\n     * åéå\r\n     */\r\n    @Input() columns: any[];\r\n\r\n    /** è¡¨ä½æ¨¡æ¿ */\r\n    @Input() template: TemplateRef<any>;\r\n\r\n\r\n    constructor(public tt: TreeTableComponent) { }\r\n}\r\n\r\n// [style.marginLeft]=\"rowNode.level * 16 + 'px'\"\r\n\r\n/**\r\n * æ èç¹å±å¼æå \r\n */\r\n@Component({\r\n    selector: 'farris-treeTableToggler',\r\n    template: `\r\n    <a href=\"javascript:void(0)\" #toggler\r\n            class=\"treenode-fold\" *ngIf=\"showLines\"\r\n            [ngClass]=\"rowNode.node.expanded ? tt.unfoldIcon : tt.foldIcon\"\r\n            [style.display]=\"isShowTriangle ? '' : 'none'\"\r\n            (click)=\"onClick($event)\"></a>\r\n\r\n    <a href=\"javascript:void(0)\" #toggler\r\n            class=\"treenode-fold\"  *ngIf=\"!showLines\"\r\n            [ngClass]=\"rowNode.node.expanded ? tt.unfoldIcon : tt.foldIcon\"\r\n            [style.marginLeft.px]=\"rowNode.level * indentSpacing\"\r\n            [style.visibility]=\"isShowTriangle ? 'visible' : 'hidden'\"\r\n            (click)=\"onClick($event)\"></a>\r\n    <span class=\"tree-icon-line\" [style.display]=\"isShowTriangle && showLines? '' : 'none'\"></span>\r\n    <span [style.display]=\"(tt.showIcon && rowNode.node.showIcon) ? 'inline-block': 'none'\" class=\"treenode-icon\" [ngClass]=\"treeNodeIcon\"></span>\r\n\r\n    <tt-checkbox  [rowNode]=\"rowNode\" *ngIf=\"tt.showCheckbox\" [disabled]=\"disabled\" [checked]=\"rowNode.isChecked\" ></tt-checkbox>\r\n    `,\r\n    encapsulation: ViewEncapsulation.None,\r\n    exportAs: 'ttToggler'\r\n})\r\nexport class TreeTableTogglerComponent implements OnInit, AfterViewInit, OnDestroy, DoCheck, OnChanges, AfterViewChecked {\r\n    @HostBinding('class.f-cmp-treetable-toggler') cls = true;\r\n    /**\r\n     * æ èç¹\r\n     */\r\n    @Input() rowNode: RowNode;\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() showLines = false;\r\n\r\n    @Input() indentSpacing = 16;\r\n\r\n    treeNodeIcon = {};\r\n    isShowTriangle = false;\r\n    noChilds = false;\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    get offsetWidth() {\r\n        return this.togglerEl.nativeElement.parentElement.offsetWidth;\r\n    }\r\n\r\n    @ViewChild('toggler') togglerEl: ElementRef;\r\n    constructor(public tt: TreeTableComponent, private ngzone: NgZone, private render: Renderer2) {\r\n    }\r\n    ngOnInit() {\r\n        this.treeNodeIcon = this.tt.getTreeIcon(this.rowNode.node);\r\n\r\n        this.isShowTriangle = this.showTriangle();\r\n        this.noChilds = this.hasChildren();\r\n        const expandSub = this.tt.expand.subscribe((node: TreeNode) => {\r\n            if (this.rowNode.id === node.data[this.tt.idField]) {\r\n                this.updateIcon(this.rowNode.node);\r\n                if (this.tt.psRef) {\r\n                    this.tt.psRef.directiveRef.update();\r\n                }\r\n                this.tt.detectChanges();\r\n            }\r\n        });\r\n\r\n        const collapseSub = this.tt.collapse.subscribe((node: TreeNode) => {\r\n            if (this.rowNode.id === node.data[this.tt.idField]) {\r\n                this.updateIcon(this.rowNode.node);\r\n                if (this.tt.psRef) {\r\n                    this.tt.psRef.directiveRef.update();\r\n                }\r\n                this.tt.detectChanges();\r\n            }\r\n        });\r\n\r\n        const addNewSub = this.tt.appendNew.subscribe((e: any) => {\r\n            if (e.parent) {\r\n                if (this.rowNode.id === e.parent.data[this.tt.idField]) {\r\n                    if (this.rowNode.node.leaf || this.rowNode.node.leaf === undefined) {\r\n                        this.rowNode.node.leaf = false;\r\n                    }\r\n                }\r\n\r\n                this.updateIcon(this.rowNode.node);\r\n            }\r\n        });\r\n\r\n        this.subscriptions = [expandSub, collapseSub, addNewSub];\r\n\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.showLines && !changes.showLines.isFirstChange()) {\r\n            if (this.showLines) {\r\n                this.render.setStyle(this.togglerEl.nativeElement, 'display', this.isShowTriangle ? '' : 'none');\r\n            } else {\r\n                this.render.removeStyle(this.togglerEl.nativeElement, 'display');\r\n            }\r\n            this.reSetLines();\r\n        }\r\n\r\n        if (changes.rowNode && !changes.rowNode.isFirstChange()) {\r\n            this.updateIcon(this.rowNode.node);\r\n\r\n            // if (changes.rowNode.currentValue.node.children) {\r\n            //     if (!!changes.rowNode.currentValue.node.children.length !== !!changes.rowNode.previousValue.node.children.length) {\r\n            //         this.reSetLines();\r\n            //     }\r\n            // }\r\n            if (this.tt.showLines) {\r\n                let currenChildrenLength = 0;\r\n                let previousChildrenLength = 0;\r\n                if (changes.rowNode.currentValue && changes.rowNode.currentValue.node.children ) {\r\n                    currenChildrenLength = changes.rowNode.currentValue.node.children.length;\r\n                }\r\n\r\n                if (changes.rowNode.previousValue && changes.rowNode.previousValue.node.children) {\r\n                    previousChildrenLength = changes.rowNode.previousValue.node.children.length;\r\n                }\r\n\r\n                if (currenChildrenLength != previousChildrenLength || (!currenChildrenLength && !previousChildrenLength)) {\r\n                    this.reSetLines();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (!this.tt.bodyTemplate && this.showLines) {\r\n            setTimeout(() => {\r\n                this.reSetLines();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngDoCheck() {\r\n        // this.isShowTriangle = this.showTriangle();\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        // if (this.tt && this.tt.data) {\r\n        //     this.reSetLines();\r\n        // }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unAllSubscriptions();\r\n    }\r\n\r\n\r\n    private unAllSubscriptions() {\r\n        this.subscriptions.forEach(s => {\r\n            s.unsubscribe();\r\n        });\r\n        this.subscriptions = [];\r\n    }\r\n\r\n    hasChildren() {\r\n        const tn = this.rowNode.node;\r\n        return tn.leaf === false || this.rowNode.level !== 0 || (tn.children && tn.children.length > 0);\r\n    }\r\n\r\n    showTriangle(): boolean {\r\n        const tn = this.rowNode.node;\r\n\r\n        if (this.tt.loadDataType === 'all') {\r\n            return tn.leaf === false || (tn.children && tn.children.length > 0);\r\n        } else {\r\n            return tn.leaf === false;\r\n        }\r\n    }\r\n\r\n    reSetLines() {\r\n        if (this.togglerEl) {\r\n            const parentEl = this.togglerEl.nativeElement.closest('.treetable-cell-content');\r\n            if (parentEl) {\r\n                const lineEls = parentEl.querySelectorAll('.treetable-lines');\r\n                for (let k = 0; k < lineEls.length; k++) {\r\n                    lineEls[k].remove();\r\n                }\r\n            }\r\n        }\r\n\r\n        this._renderLines();\r\n    }\r\n\r\n    private _renderLines() {\r\n        if (!this.tt.bodyTemplate) {\r\n            if (this.showLines) {\r\n                this.renderLines();\r\n            } else {\r\n                // this.noLineStyle();\r\n            }\r\n        } else {\r\n            /*\r\n            if (this.togglerEl) {\r\n                if (this.togglerEl.nativeElement.closest('tr')) {\r\n                    const tds = this.togglerEl.nativeElement.closest('tr').querySelectorAll('td');\r\n                    Array.from(tds).forEach(n => {\r\n                        this.render.setStyle(n, 'padding', '0.25rem 0.75rem');\r\n                    });\r\n                }\r\n            } */\r\n        }\r\n    }\r\n\r\n\r\n    private noLineStyle() {\r\n        // this.cls = false;\r\n        if (this.togglerEl) {\r\n            // this.render.setStyle(this.togglerEl.nativeElement, 'margin-left', `${this.rowNode.level * this.indentSpacing}px`);\r\n            this.render.setStyle(this.togglerEl.nativeElement, 'visibility', this.isShowTriangle ? 'visible' : 'hidden');\r\n            this.render.removeStyle(this.togglerEl.nativeElement, 'display');\r\n        }\r\n    }\r\n\r\n    private renderLines() {\r\n        const len = this.rowNode.level;\r\n        if ( !this.togglerEl) {\r\n            return;\r\n        }\r\n        const parentEl = this.togglerEl.nativeElement.closest('.treetable-cell-content');\r\n\r\n        if (!parentEl) {\r\n            return;\r\n        }\r\n\r\n        const referEl = this.togglerEl.nativeElement.parentElement;\r\n\r\n        if (len === 0 && !this.showTriangle()) {\r\n            this.createLeafNodeLines(referEl, parentEl, true);\r\n        }\r\n\r\n        for (let i = 0; i < len; i++) {\r\n            parentEl.insertBefore(this.newLineElement(), referEl);\r\n\r\n            const nearLine = this.newLineElement(false);\r\n            parentEl.insertBefore(nearLine, referEl);\r\n\r\n            const isLeaf = !this.showTriangle();\r\n            if (isLeaf && i === len - 1) {\r\n                this.createLeafNodeLines(referEl, parentEl);\r\n            }\r\n        }\r\n    }\r\n\r\n    private newLineElement(border = true) {\r\n        const newLineEl = this.render.createElement('div');\r\n        this.render.addClass(newLineEl, 'treetable-lines');\r\n\r\n        if (this.showLines) {\r\n            if (border) {\r\n                this.render.addClass(newLineEl, 'treetable-lines-border-color');\r\n            }\r\n        }\r\n        return newLineEl;\r\n    }\r\n\r\n    /**\r\n     * æé  â or â\r\n     */\r\n    private createLeafNodeLines(containerEl: HTMLElement, parentEl: Element, isTopNode = false) {\r\n        // â\r\n        // <div class=\"treetable-lines\" style=\"border-color: rgb(204, 204, 204);\"></div>\r\n        // <div class=\"treetable-lines treetable-lines-leaf\" style=\"border-color: transparent;\">\r\n        //     <div class=\"normal\"></div>\r\n        // </div>\r\n\r\n        // â\r\n        // <div class=\"treetable-lines\" style=\"border-color: transparent\"></div>\r\n        // <div class=\"treetable-lines treetable-lines-leaf\" style=\"border-color: transparent;\">\r\n        //     <div style=\"corner\"></div>\r\n        // </div>\r\n\r\n        const l1 = this.newLineElement();\r\n        const l2 = this.newLineElement(false);\r\n\r\n        this.render.addClass(l2, 'treetable-lines-leaf');\r\n        const dessert = this.render.createElement('div');\r\n\r\n        if (this.showLines) {\r\n            let cls = 'normal';\r\n            if (this.rowNode.last) {\r\n                cls = 'corner';\r\n                this.render.removeClass(l1, 'treetable-lines-border-color');\r\n            }\r\n            l2.appendChild(dessert);\r\n            this.render.addClass(dessert, cls);\r\n            this.render.addClass(dessert, 'treetable-lines-border-color');\r\n        }\r\n\r\n        parentEl.insertBefore(l1, containerEl);\r\n        parentEl.insertBefore(l2, containerEl);\r\n\r\n        if (isTopNode) {\r\n            this.render.setStyle(l2, 'marginRight', '3px');\r\n        }\r\n    }\r\n\r\n    private registerClickEvent() {\r\n        if (this.togglerEl) {\r\n            this.render.listen(this.togglerEl.nativeElement, 'click', this.onClick.bind(this));\r\n        }\r\n    }\r\n\r\n    onClick(event: Event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n\r\n        if (this.rowNode.node['showLoading']) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.tt.disabled) {\r\n            this.tt.toggleExpand(this.rowNode.node);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private updateIcon(treeNode: TreeNode) {\r\n        this.isShowTriangle = this.showTriangle();\r\n        this.noChilds = this.hasChildren();\r\n        this.treeNodeIcon = this.tt.getTreeIcon(treeNode);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * éä¸­è¡ç»ä»¶\r\n */\r\n@Directive({\r\n    selector: '[selectRow]',\r\n    exportAs: 'row'\r\n})\r\nexport class TreeTableSelectRowDirective implements DoCheck, OnDestroy, OnInit, OnChanges {\r\n\r\n    @Input('selectRow') rowNode: RowNode;\r\n    @Input() rowIndex: number;\r\n\r\n    @Input() selectRowDisabled: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    public prevent = false;\r\n    public timer: any;\r\n    @Input() delay = 0;\r\n\r\n    constructor(public tt: TreeTableComponent, private el: ElementRef, private render: Renderer2, private ngZone: NgZone) {\r\n        this.subscription = this.tt.selectNodeChangedSubject.subscribe((ids: string) => {\r\n            if (ids && this.rowNode) {\r\n                const idArr = ids.split(',');\r\n                if (idArr.indexOf(this.rowNode.id) > -1) {\r\n                    this.toggleClass();\r\n                    this.rowNode.node['elementRef'] = this.el;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        // this.rowNode.node.selectable = !this.selectRowDisabled;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // if (changes.selectRowDisabled && !changes.selectRowDisabled.isFirstChange()) {\r\n        //     this.rowNode.node.selectable = !changes.selectRowDisabled.currentValue;\r\n        // }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n            this.subscription = null;\r\n        }\r\n    }\r\n\r\n    ngDoCheck() {\r\n        if (this.tt.bodyTemplate) {\r\n            if (!this.tt.isSelected(this.rowNode.node)) {\r\n                this.render.removeClass(this.el.nativeElement, 'farris-table-selectedrow');\r\n            }\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onclick(event: MouseEvent) {\r\n        if (this.isEnabled()) {\r\n            // this.rowClick(event);\r\n            if (this.delay !== 0) {\r\n                if (!this.prevent) {\r\n                    this.prevent = true;\r\n                    this.timer = setTimeout(() => {\r\n                        this.rowClick(event);\r\n                        this.prevent = false;\r\n                    }, this.delay);\r\n                }\r\n            } else {\r\n                this.rowClick(event);\r\n            }\r\n        }\r\n\r\n        // event.stopPropagation();\r\n    }\r\n\r\n    isEnabled() {\r\n        return !this.tt.disabled && this.selectRowDisabled !== true;\r\n    }\r\n\r\n    private rowClick(event: Event) {\r\n        event.stopPropagation();\r\n\r\n        this.tt.beforeClickNode({ instance: this.tt, rowNode: this.rowNode, event, type: 'row' }).subscribe((e: boolean) => {\r\n            if (!e) { return; }\r\n            this.tt.handleRowClick({\r\n                originalEvent: event,\r\n                rowNode: this.rowNode,\r\n                rowIndex: this.rowIndex\r\n            });\r\n\r\n            this.ngZone.runOutsideAngular(() => {\r\n                this.toggleClass();\r\n            });\r\n        });\r\n    }\r\n\r\n    toggleClass() {\r\n        if (!this.tt.bodyTemplate) {\r\n            if (this.tt.isSelected(this.rowNode.node)) {\r\n                if (this.tt.singleSelect) {\r\n                    this.tt.el.nativeElement.querySelectorAll('.farris-treetable-tbody>tr.farris-table-selectedrow').forEach(n => {\r\n                        this.render.removeClass(n, 'farris-table-selectedrow');\r\n                    });\r\n                }\r\n                this.render.addClass(this.el.nativeElement, 'farris-table-selectedrow');\r\n            } else {\r\n                if (!this.tt.keepSelect) {\r\n                    this.render.removeClass(this.el.nativeElement, 'farris-table-selectedrow');\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * è¡¨å¤´å¨éç»ä»¶\r\n */\r\n@Component({\r\n    selector: 'tt-header-checkbox',\r\n    template: `\r\n    <div class=\"custom-control custom-checkbox  custom-control-inline tt-checkbox\" style=\"top: -2px;\">\r\n        <input type=\"checkbox\" #chkAll class=\"custom-control-input\"  [checked]=\"checked\">\r\n        <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\r\n    </div>\r\n    `,\r\n    styles: [\r\n        `\r\n        :host {\r\n            vertical-align: middle;\r\n        }\r\n        `\r\n    ]\r\n})\r\nexport class TreeTableHeaderCheckboxComponent implements OnInit {\r\n    @Input() checked: boolean;\r\n    @Input() disabled: boolean;\r\n\r\n    @Output() checkedChange = new EventEmitter();\r\n\r\n    @ViewChild('chkAll') chkAll: ElementRef;\r\n\r\n    constructor(public tt: TreeTableComponent, public ttService: TreetableService) {\r\n    }\r\n\r\n    ngOnInit() { }\r\n\r\n    handleClick(event) {\r\n        if (!this.disabled && !this.tt.disabled) {\r\n            const beforeEvent = !this.checked ? this.tt.beforeCheckAll : this.tt.beforeUnCheckAll;\r\n\r\n            beforeEvent({ instance: this.tt, checked: !this.checked }).subscribe(e => {\r\n                // å¨éåè½\r\n                this.chkAll.nativeElement.indeterminate = false;\r\n                this.checked = !this.checked;\r\n                this.tt.toggleNodesWithCheckbox(event, this.checked);\r\n            });\r\n        }\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * è¡¨ä½checkbox ç»ä»¶\r\n */\r\n@Component({\r\n    selector: 'tt-checkbox',\r\n    template: `\r\n    <div class=\"custom-control custom-checkbox  custom-control-inline tt-checkbox\">\r\n        <input type=\"checkbox\" #chk class=\"custom-control-input\" [disabled]=\"disabled\" [checked]=\"checked\">\r\n        <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\r\n    </div>\r\n    `,\r\n    styles: [\r\n        `\r\n        :host {\r\n            vertical-align: middle;\r\n        }\r\n        :host .custom-checkbox {\r\n            opacity: 1;\r\n            float: none;\r\n        }\r\n        `\r\n    ]\r\n})\r\nexport class TreeTableCheckboxComponent implements OnInit, OnDestroy {\r\n    @HostBinding('class.tree-toggler-checkbox') cls1 = true;\r\n    @Input() checked: boolean;\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() rowNode: RowNode;\r\n\r\n    @Output() checkedChange = new EventEmitter();\r\n\r\n    @ViewChild('chk') chk: ElementRef;\r\n    destroy$ = new Subject();\r\n    constructor(public tt: TreeTableComponent, public ttService: TreetableService) {\r\n        this.ttService = this.tt.ttService;\r\n    }\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n    ngOnInit() {\r\n        this.chk.nativeElement.indeterminate = this.rowNode.indeterminate || false;\r\n\r\n        this.ttService.changeCheckboxStatus$.pipe(\r\n            takeUntil(this.destroy$)\r\n        ).pipe(\r\n            map(n => {\r\n                if (n.id === this.rowNode.id) {\r\n                    return n;\r\n                }\r\n                return null;\r\n            })\r\n        ).subscribe(n => {\r\n            if (n) {\r\n                this.chk.nativeElement.indeterminate = n.indeterminate;\r\n                this.checked = n.isChecked;\r\n                this.chk.nativeElement.checked = this.checked;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    handleClick(event) {\r\n        event.stopPropagation();\r\n        if (!this.disabled) {\r\n            this.tt.beforeClickNode({ instance: this.tt, rowNode: this.rowNode, event, type: 'checkbox' }).subscribe((e: boolean) => {\r\n                if (!e) { return; }\r\n                this.checked = !this.checked;\r\n                if (this.tt.singleSelect) {\r\n                    this.tt.clearAll();\r\n                    if (this.checked) {\r\n                        this.tt.selectNode(this.rowNode.id, true);\r\n                    } else {\r\n                        this.tt.unSelectNode(this.rowNode.id, true);\r\n                    }\r\n                } else {\r\n                    this.tt.toggleNodeWithCheckbox(event, this.rowNode, this.checked);\r\n                }\r\n            });\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[dblclick]'\r\n})\r\nexport class DblClickRowDirective implements OnInit {\r\n    @Input('dblclick') enableDblClick = false;\r\n    @Input() dblclickNode: RowNode;\r\n\r\n    constructor(\r\n        public tt: TreeTableComponent, public el: ElementRef, public ttService: TreetableService,\r\n        @Optional() @Self() public selectRowDir: TreeTableSelectRowDirective) {\r\n            this.ttService = this.tt.ttService;\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (!this.enableDblClick) {\r\n            this.selectRowDir.delay = 0;\r\n        }\r\n    }\r\n\r\n    @HostListener('dblclick', ['$event'])\r\n    ondblclick(event: Event) {\r\n        const prevEl = ( event.target as any).previousSibling;\r\n        if (prevEl && prevEl.type === 'checkbox') {\r\n            return;\r\n        }\r\n\r\n\r\n        if (this.tt.disabled) {\r\n            return false;\r\n        }\r\n\r\n        if (this.tt.multiSelect && this.dblclickNode) {\r\n            if (this.dblclickNode.node.leaf) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        const clsName = event.target['className'];\r\n\r\n        let togglerTag = null;\r\n        if (clsName.indexOf('f-cmp-treetable-toggler') > -1) {\r\n            togglerTag = event.target['querySelector']('.treenode-fold');\r\n        } else {\r\n            if (event.target['className'].indexOf('treenode-fold') > -1) {\r\n                togglerTag = event.target as any;\r\n            }\r\n        }\r\n\r\n        if (togglerTag && togglerTag.style.visibility === 'visible') {\r\n            return false;\r\n        }\r\n\r\n        if (this.selectRowDir) {\r\n            this.selectRowDir.prevent = false;\r\n            clearTimeout(this.selectRowDir.timer);\r\n            if (this.selectRowDir.rowNode && this.enableDblClick) {\r\n                const rn = this.selectRowDir.rowNode;\r\n                if (this.tt.loadDataType === 'all' && !rn.node.leaf && this.tt.dblClickExpand) {\r\n                    this.tt.toggleExpand(rn.node);\r\n                }\r\n                this.tt.dblClick.emit(rn.node);\r\n            }\r\n        }\r\n\r\n        // event.stopPropagation();\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[customRowStyle]'\r\n})\r\nexport class CustomRowStyleDirective implements OnInit, OnChanges {\r\n    @Input('customRowStyle') rowNode: RowNode;\r\n    @Input('field') col: TreeTableColumn;\r\n\r\n    constructor(private injector: Injector, private ngZone: NgZone,\r\n        private el: ElementRef, private tt: TreeTableComponent,\r\n        public utils: CommonUtils, private render: Renderer2) {\r\n    }\r\n    ngOnInit() {\r\n        if (this.col && this.tt.fixedColumns && this.tt.fixedHeader && this.col.fixed) {\r\n            if (this.col.fixed === 'left' || this.col.fixed === 'right') {\r\n                this.setRowStyle();\r\n            }\r\n            return;\r\n        } else {\r\n            this.setRowStyle();\r\n        }\r\n    }\r\n\r\n    private setRowStyle() {\r\n        const fn = this.tt.rowStyler;\r\n        if (fn) {\r\n            const sty = fn(this.rowNode.node);\r\n            if (sty) {\r\n                if (typeof sty === 'object' && (sty.style || sty.cls)) {\r\n                    if (sty.style) {\r\n                        Object.keys(sty.style).forEach(s => {\r\n                            this.render.setStyle(this.el.nativeElement, s, sty.style[s]);\r\n                        });\r\n                    }\r\n\r\n                    if (sty.cls) {\r\n                        sty.cls.split(',').forEach(c => {\r\n                            this.render.addClass(this.el.nativeElement, c);\r\n                        });\r\n                    }\r\n\r\n                } else {\r\n                    if (Array.isArray(sty) || typeof sty === 'string') {\r\n                        const cls = this.tt.getRowCls(this.rowNode);\r\n                        if (cls && Object.keys(cls).length) {\r\n                            Object.keys(cls).forEach(c => {\r\n                                if (cls[c]) {\r\n                                    this.render.addClass(this.el.nativeElement, c);\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        Object.keys(sty).forEach(s => {\r\n                            this.render.setStyle(this.el.nativeElement, s, sty[s]);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.rowNode && !changes.rowNode.isFirstChange()) {\r\n            this.setRowStyle();\r\n        }\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[customCellStyle]'\r\n})\r\nexport class TTCustomCellStyleDirective implements OnInit, OnChanges {\r\n    @Input('customCellStyle') column: TreeTableColumn;\r\n    @Input() rowNode: RowNode;\r\n    @Input() rowIndex: any;\r\n\r\n    constructor(private injector: Injector, private ngZone: NgZone,\r\n        private el: ElementRef, private tt: TreeTableComponent,\r\n        public utils: CommonUtils, private render: Renderer2) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.tt && this.tt.getCellCls) {\r\n            this.setCellStyle();\r\n        }\r\n\r\n        if (!this.tt.showBorder && this.tt.columns.length === 1) {\r\n            this.render.setStyle(this.el.nativeElement, 'border-width', '0px');\r\n        }\r\n    }\r\n\r\n    private setCellStyle() {\r\n        const cellCls = this.tt.getCellCls(this.rowNode, this.column.field);\r\n        if (this.column && this.column.styler) {\r\n            if (cellCls && Object.keys(cellCls).length) {\r\n                Object.keys(cellCls).forEach(c => {\r\n                    if (cellCls[c]) {\r\n                        this.render.addClass(this.el.nativeElement, c);\r\n                    }\r\n                });\r\n            }\r\n\r\n            const rowData = this.rowNode.node.data;\r\n            const ccs = this.column.styler(this.utils.getValue(this.column.field, rowData), rowData, this.rowIndex, this.rowNode);\r\n            if (ccs) {\r\n                if (ccs.style || ccs.cls) {\r\n                    if (ccs.style) {\r\n                        Object.keys(ccs.style).forEach(s => {\r\n                            this.render.setStyle(this.el.nativeElement, s, ccs.style[s]);\r\n                        });\r\n                    }\r\n\r\n                    if (ccs.cls) {\r\n                        ccs.cls.split(',').forEach(c => {\r\n                            this.render.addClass(this.el.nativeElement, c);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            Object.keys(cellCls).forEach(s => {\r\n                this.render.setStyle(this.el.nativeElement, s, cellCls[s]);\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.rowNode && !changes.rowNode.isFirstChange()) {\r\n            this.setCellStyle();\r\n        }\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[resizable-column]'\r\n})\r\nexport class TTResizableColumnDirective implements AfterViewInit, OnDestroy, OnChanges {\r\n    @Input('resizable-column') enableResize = true;\r\n    resizer: HTMLSpanElement;\r\n    resizerMouseDownListener: any;\r\n    documentMouseMoveListener: any;\r\n    documentMouseUpListener: any;\r\n\r\n    constructor(\r\n        public tt: TreeTableComponent, public ngzone: NgZone,\r\n        public el: ElementRef, public render: Renderer2) {\r\n\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isEnable()) {\r\n            this.render.addClass(this.el.nativeElement, 'resizable-column');\r\n\r\n            this.resizer = document.createElement('span');\r\n            this.resizer.className = 'column-resizer';\r\n            this.el.nativeElement.appendChild(this.resizer);\r\n\r\n            this.ngzone.runOutsideAngular(() => {\r\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\r\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\r\n\r\n                this.el.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.enableResize && !changes.enableResize.isFirstChange()) {\r\n            if (!this.isEnable() && this.resizer) {\r\n                this.resizer.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    isEnable() {\r\n        return this.tt.resizableColumns && !this.tt.autoWidth && this.enableResize;\r\n    }\r\n\r\n    bindDocumentEvents() {\r\n        this.ngzone.runOutsideAngular(() => {\r\n            this.documentMouseMoveListener = this.onMouseMove.bind(this);\r\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\r\n\r\n            this.documentMouseUpListener = this.onMouseUp.bind(this);\r\n            document.addEventListener('mouseup', this.documentMouseUpListener);\r\n        });\r\n    }\r\n\r\n    unbindDocumentEvents() {\r\n        if (this.documentMouseMoveListener) {\r\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\r\n            this.documentMouseMoveListener = null;\r\n        }\r\n\r\n        if (this.documentMouseUpListener) {\r\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\r\n            this.documentMouseUpListener = null;\r\n        }\r\n    }\r\n\r\n    onMouseDown(event: Event) {\r\n        if (this.isEnable()) {\r\n            this.tt.onColumnResizeBegin(event);\r\n            this.bindDocumentEvents();\r\n        }\r\n    }\r\n\r\n    onMouseEnter() {\r\n    }\r\n\r\n    onMouseMove(event: Event) {\r\n        this.tt.onColumnResize(event);\r\n    }\r\n\r\n    onMouseUp(event: Event) {\r\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\r\n        this.unbindDocumentEvents();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.resizerMouseDownListener) {\r\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\r\n        }\r\n\r\n        this.unbindDocumentEvents();\r\n    }\r\n\r\n}\r\n","import { debounceTime, map, auditTime, filter } from 'rxjs/operators';\r\nimport { Component, OnInit, EventEmitter, Output, ElementRef,\r\n    ViewChild, OnDestroy, NgZone, Injector, AfterViewInit, Input } from '@angular/core';\r\nimport { Subscription, fromEvent } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'find-input',\r\n    template: `\r\n        <div class=\"f-find-input\" style=\"\">\r\n            <div class=\"input-group\">\r\n                <div class=\"input-group-prepend\">\r\n                    <select class=\"form-control\" [(ngModel)]=\"findField\">\r\n                        <option *ngFor=\"let col of columns\" value=\"{{col.field}}\">{{ col.title }}</option>\r\n                    </select>\r\n                </div>\r\n                <input #input type=\"text\" placeholder=\"è³å°2ä¸ªå­ç¬¦\" class=\"form-control\"\r\n                    (keydown.esc)=\"onClose($event)\" (keydown.enter)=\"onEnter($event, 0)\">\r\n                <div class=\"input-group-append\">\r\n                    <span class=\"input-group-text\">{{current}}/{{count}}</span>\r\n                    <button class=\"btn btn-outline-secondary\" type=\"button\" title=\"ä¸ä¸ä¸ª\"\r\n                        [disabled]=\"current === 0\" (click)=\"onEnter($event, -1)\">\r\n                        <span class=\"f-icon f-icon-arrow-chevron-up\"></span>\r\n                    </button>\r\n                    <button class=\"btn btn-outline-secondary\" type=\"button\" title=\"ä¸ä¸ä¸ª\"\r\n                    [disabled]=\"current === count\" (click)=\"onEnter($event, 1)\">\r\n                        <span class=\"f-icon f-icon-arrow-chevron-down\"></span>\r\n                    </button>\r\n                    <button class=\"btn btn-outline-secondary\" type=\"button\" title=\"å³é­\" (click)=\"onClose($event)\">\r\n                        <span class=\"f-icon f-icon-close\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [\r\n        `\r\n        .f-find-input {\r\n            width: 300px; height: 40px; background: #fefefe; position: absolute; right: 0; z-index: 10; padding: 5px;\r\n            box-shadow: 0px 1px 7px 0px #bdbdbd;\r\n            border-radius: 6px;\r\n        }\r\n        .f-find-input .input-group-text { border-right: 1px solid #ccc; font-size: 10px }\r\n        .f-find-input .input-group-append { background: #fff; }\r\n        .f-find-input .input-group-append button { padding:1px 6px;}\r\n        .f-find-input .input-group-append button span{position: relative; top: 2px;}\r\n        `\r\n    ]\r\n})\r\nexport class FindInputComponent implements OnInit, OnDestroy, AfterViewInit {\r\n    @Input() current = 0;\r\n    @Input() count = 0;\r\n    @Input() columns = [];\r\n\r\n    @Output() close = new EventEmitter();\r\n    @Output() valueChanged = new EventEmitter();\r\n    @Output() enterHandler = new EventEmitter();\r\n\r\n    @ViewChild('input') input: ElementRef;\r\n    findField = '';\r\n    private keyupEventSub: Subscription = null;\r\n\r\n    constructor(private el: ElementRef, private ngZone: NgZone, private injector: Injector) { }\r\n\r\n    ngOnInit() {\r\n        if (this.columns.length) {\r\n            this.columns = this.columns.filter(c => !c.formatter && c.field);\r\n            this.findField = this.columns[0].field;\r\n        }\r\n\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.keyupEventSub = fromEvent(this.input.nativeElement, 'keyup').pipe(\r\n                filter((e: any) => (e.switch || e.keyCode) !== 13),\r\n                debounceTime(200),\r\n                map((e: any) => e.target.value)\r\n            ).subscribe((v) => {\r\n                this.valueChanged.emit({value: v, field: this.findField});\r\n            });\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.input.nativeElement.focus();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.keyupEventSub) {\r\n            this.keyupEventSub.unsubscribe();\r\n        }\r\n        this.keyupEventSub = null;\r\n    }\r\n\r\n    onClose(event) {\r\n        this.close.emit();\r\n        return false;\r\n    }\r\n\r\n    onEnter($event, step) {\r\n        this.enterHandler.emit(step);\r\n        return false;\r\n    }\r\n\r\n}\r\n","import { PipeTransform, Pipe, ElementRef } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'highlight' })\r\nexport class HighlightPipe implements PipeTransform {\r\n    constructor(public sanitizer: DomSanitizer, private el: ElementRef) {\r\n    }\r\n    transform(text: string, keyword, field = '', findField = ''): SafeHtml {\r\n        let needSearch = true;\r\n        if (field && findField) {\r\n            if (findField.indexOf(',') === -1) {\r\n                needSearch = field === findField;\r\n            } else {\r\n                needSearch = findField.split(',').some(n => n === field);\r\n            }\r\n        }\r\n\r\n        if (!needSearch) {\r\n            return text;\r\n        }\r\n\r\n        if (keyword && text) {\r\n            let pattern = keyword.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\r\n            pattern = pattern.split(' ').filter((t) => {\r\n                return t.length > 0;\r\n            }).join('|');\r\n            const regex = new RegExp(pattern, 'gi');\r\n            return this.sanitizer.bypassSecurityTrustHtml(\r\n                // text.replace(regex, (match) => `<span class=\"search-highlight\">${match}</span>`)\r\n                this.replaceContent(text, regex, (match) => `<span class=\"search-highlight\">${match}</span>`)\r\n            );\r\n\r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n\r\n    parseHTML(html, context) {\r\n        const t = (context || document).createElement('template');\r\n        t.innerHTML = html;\r\n        return t.content.cloneNode(true);\r\n    }\r\n\r\n    private replaceContent(strMatch1, regex, match) {\r\n        const matchReg1 = />.*?\\</gi; // åæ¥åº><ä¹é´çåå®¹\r\n        const strs = strMatch1.match(matchReg1); // æ¿å°ææç¬¦åçé®å¼\r\n        if (strs && strs.length) {\r\n            for (const aa of strs) {\r\n                const rep_old = strs[aa]; // æ¿å°åå§ç¬¦åå­ç¬¦ä¸²\r\n                const rep_new = strs[aa].replace(regex, match); // æ¿æ¢æç®çå­ç¬¦ä¸²\r\n                const re2 = new RegExp(rep_old, 'g'); // å©ç¨åå§å­ç¬¦ä¸²çææ­£å\r\n                strMatch1 = strMatch1.replace(re2, rep_new); // å°ç¬¦åçåå§å­ç¬¦ä¸²æ¿æ¢ææ°å­ç¬¦ä¸²\r\n            }\r\n            return strMatch1;\r\n        } else {\r\n            return strMatch1.replace(regex, match);\r\n        }\r\n    }\r\n}\r\n","import { TreeTableComponent } from './../treetable.component';\r\nimport { Component, Input, OnInit, Injector, ChangeDetectorRef, EventEmitter, Output, OnChanges, SimpleChanges, DoCheck, ViewChild, ElementRef } from '@angular/core';\r\nimport { TreeNode } from '../types/treenode';\r\nimport { filter } from 'rxjs/operators';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'nodes-pager',\r\n    templateUrl: './nodes-pager.component.html',\r\n    styles: [\r\n        `\r\n        .treetable-nodes-pagerbar { height: 22px; line-height: 22px; list-style: none}\r\n        .treetable-nodes-pagerbar li { float: left; box-sizing: border-box; }\r\n        .treetable-nodes-pagerbar .pager-btn {\r\n            width: 22px;\r\n            height: 22px;\r\n            text-align: center;\r\n            border: 1px solid #ccc;\r\n            background: rgb(248 249 250);\r\n            cursor: pointer;\r\n        }\r\n        .treetable-nodes-pagerbar .pager-btn:hover {\r\n            background: white;\r\n        }\r\n        .treetable-nodes-pagerbar .prev {}\r\n        .treetable-nodes-pagerbar .next {\r\n            border-left: 0;\r\n        }\r\n\r\n        .pager-btn.disabled{\r\n            color: rgb(204 204 204);\r\n            pointer-events: none;\r\n        }\r\n        .treetable-nodes-pagerbar .pageinfo {\r\n            margin-right: 5px;\r\n            padding-left: 0;\r\n            font-weight: 400;\r\n            padding-right: 5px;\r\n        }\r\n\r\n        .treetable-nodes-pagerbar .page-index {\r\n            border: 0;\r\n            background: transparent;\r\n            outline: none;\r\n            appearance: none;\r\n            padding-left: 5px;\r\n            min-width: 50px;\r\n            position: absolute;\r\n            height: 20px;\r\n            text-align: left;\r\n            opacity: 0;\r\n            left: 0;\r\n        }\r\n\r\n        .treetable-nodes-pagerbar .page-number-list {\r\n            height: 20px;\r\n            min-width: 30px;\r\n            max-width: 50px;\r\n            overflow: hidden;\r\n            text-align: center;\r\n            position: relative;\r\n            border-bottom: 1px solid #ced4da;\r\n        }\r\n        `\r\n    ]\r\n})\r\nexport class TreetableNodesPagerComponent implements OnInit, OnChanges {\r\n    @Input() disabled = false;\r\n    @Input() context: any;\r\n    @ViewChild('pagerList') pagerListEl: ElementRef<any>;\r\n    @Output() pageChange = new EventEmitter();\r\n    @Input() showTotal = false;\r\n\r\n    showPager = new BehaviorSubject(false);\r\n    pagerInfo = null;\r\n\r\n    get pagers() {\r\n        const c = this.getPagerCount();\r\n        if (c) {\r\n            return new Array(c);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    constructor(private tt: TreeTableComponent,  private cd: ChangeDetectorRef, private injector: Injector) {\r\n        if (this.tt) {\r\n            this.tt.expand.pipe(\r\n                filter((node: any) => {\r\n                    return node.id === this.context.node.id && node.pagination && node.children.filter(n => !n.__childs_loading__).length;\r\n                })\r\n            ).subscribe(\r\n                (node: TreeNode) => {\r\n                    this.pagerInfo = {...node.pagination};\r\n                    this.showPager.next(true);\r\n                }\r\n            );\r\n\r\n            this.tt.appendNew.subscribe(\r\n                (e: any) => {\r\n                    const node = e.parent;\r\n                    if (node.id === this.context.node.id && node.pagination) {\r\n                        this.pagerInfo = {...node.pagination};\r\n                        this.showPager.next(true);\r\n                    }\r\n                }\r\n            );\r\n\r\n            this.tt.collapse.subscribe(\r\n                (node: TreeNode) => {\r\n                    if (node.id === this.context.node.id) {\r\n                        this.showPager.next(false);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.setPagerInfo();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.context && !changes.context.isFirstChange()) {\r\n            this.setPagerInfo();\r\n        }\r\n    }\r\n\r\n    private setPagerInfo() {\r\n        if (this.context) {\r\n            const { node } = this.context;\r\n            if (node && node.pagination) {\r\n                this.pagerInfo = { ...node.pagination };\r\n                this.showPager.next(\r\n                    node.expanded && node.pagination\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    getPagerCount() {\r\n        const { pageSize, total } = this.pagerInfo;\r\n        if (!total) {\r\n            return 0;\r\n        } else {\r\n            return Math.ceil(total / pageSize);\r\n        }\r\n    }\r\n\r\n    isFirstPager() {\r\n        return this.pagerInfo.pageIndex === 1;\r\n    }\r\n\r\n    isLastPager() {\r\n        return this.pagerInfo.pageIndex === this.getPagerCount();\r\n    }\r\n\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    previous($event: any) {\r\n        $event.stopPropagation();\r\n        this.setCurrent(this.pagerInfo.pageIndex - 1, this.pagerInfo.pageSize);\r\n    }\r\n\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    next($event: any) {\r\n        $event.stopPropagation();\r\n        this.setCurrent(this.pagerInfo.pageIndex + 1, this.pagerInfo.pageSize);\r\n    }\r\n\r\n    setCurrent(page: number, pageSize?: number, $event?: any) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        this.pageChange.emit({ pageIndex: page, pageSize, node: this.context.node, context: this.context });\r\n    }\r\n\r\n    pagerChanged(newPageIndex: number) {\r\n        this.setCurrent(newPageIndex, this.pagerInfo.pageSize);\r\n    }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'childs-loading',\r\n    template: `\r\n    <div class=\"loading\">\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n    </div>\r\n    `,\r\n    styles: [\r\n        `\r\n        .loading{\r\n            width: 150px;\r\n            height: 10px;\r\n            margin: 0 auto;\r\n            margin-top:10px;\r\n            margin-bottom: 20px;\r\n        }\r\n        .loading span{\r\n            display: inline-block;\r\n            width: 10px;\r\n            height: 100%;\r\n            margin-right: 5px;\r\n            border-radius: 50%;\r\n            background: #59a1ff;\r\n            -webkit-animation: load 1.04s ease infinite;\r\n        }\r\n        .loading span:last-child{\r\n            margin-right: 0px;\r\n        }\r\n        @-webkit-keyframes load{\r\n            0%{\r\n                opacity: 1;\r\n                -webkit-transform: scale(1.3);\r\n            }\r\n            100%{\r\n                opacity: 0.2;\r\n                -webkit-transform: scale(.3);\r\n            }\r\n        }\r\n        .loading span:nth-child(1){\r\n            -webkit-animation-delay:0.13s;\r\n        }\r\n        .loading span:nth-child(2){\r\n            -webkit-animation-delay:0.26s;\r\n        }\r\n        .loading span:nth-child(3){\r\n            -webkit-animation-delay:0.39s;\r\n        }\r\n        .loading span:nth-child(4){\r\n            -webkit-animation-delay:0.52s;\r\n        }\r\n        .loading span:nth-child(5){\r\n            -webkit-animation-delay:0.65s;\r\n        }\r\n        `\r\n    ]\r\n})\r\nexport class ChildsLoadingComponent implements OnInit {\r\n    constructor() { }\r\n\r\n    ngOnInit(): void { }\r\n}\r\n","import { CommonUtils } from '@farris/ui-common';\r\nimport { TreeNode } from './types/treenode';\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { TreeTableColumn } from './types/treetable-column';\r\n\r\n@Pipe({name: 'tipmsg'})\r\nexport class CellTipsPipe implements PipeTransform {\r\n    constructor(private commonUtils: CommonUtils) {}\r\n    transform(col: any, ...args: any[]): any {\r\n        if (col.showTips) {\r\n            return this.getCellTooltipContent(col, args[0]);\r\n        }\r\n        return  '';\r\n    }\r\n\r\n    private getCellTooltipContent(col: TreeTableColumn, tn: TreeNode) {\r\n        let txt = this.commonUtils.getValue(col.field, tn.data);\r\n\r\n        if (col.tipContent) {\r\n            if ( typeof col.tipContent === 'string') {\r\n                txt = col.tipContent;\r\n            } else if (typeof col.tipContent === 'function') {\r\n                txt = col.tipContent(txt, tn.data, col);\r\n            }\r\n        } else {\r\n            if (col.formatter) {\r\n                if (typeof col.formatter === 'object') {\r\n                    if (col.formatter.type === 'enum') {\r\n                        txt = this.commonUtils.getEnumTitleFromColumnOptions(txt, col.formatter.options);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { TreeNode } from './types/treenode';\r\n\r\n@Pipe({name: 'disablenode'})\r\nexport class DisableNodePipe implements PipeTransform {\r\n    transform(node: TreeNode, ...args: any[]): any {\r\n        const selectable = !node.selectable;\r\n        let selectable2 = false;\r\n        if (args && args.length) {\r\n            if (args[0]) {\r\n                selectable2 = args[0]({node});\r\n            }\r\n\r\n            if (args[1]) {  // æ è¡¨ç¦ç¨\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return selectable || selectable2;\r\n    }\r\n}","\r\nimport { TTHotkeys } from './hotkeys';\r\nimport { InputGroupModule } from '@farris/ui-input-group';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TreetableService } from './treetable.service';\r\nimport { TreeTableComponent, TTBodyComponent,\r\n    TreeTableTogglerComponent,\r\n    TreeTableSelectRowDirective,\r\n    TreeTableCheckboxComponent,\r\n    TreeTableHeaderCheckboxComponent,\r\n    DblClickRowDirective,\r\n    TTResizableColumnDirective,\r\n    TreeTableColumnDirective,\r\n    TTCustomCellStyleDirective,\r\n    CustomRowStyleDirective} from './treetable.component';\r\nimport { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DataColumnModule } from '@farris/ui-common/column';\r\nimport { ResizeService } from '@farris/ui-common/events';\r\nimport { FindInputComponent } from './find-input.component';\r\nimport { HighlightPipe } from './high-light.pipe';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { PaginationModule } from '@farris/ui-pagination';\r\nimport { TreetableNodesPagerComponent } from './nodes_pager/nodes-pager.component';\r\nimport { ChildsLoadingComponent } from './nodes_pager/childs-loading.component';\r\nimport { CellTipsPipe } from './cell-tips.pipe';\r\nimport { FarrisContextMenuModule } from '@farris/ui-context-menu';\r\nimport { DisableNodePipe } from './disable-node.pipe';\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        FarrisCommonModule.forRoot(),\r\n        PerfectScrollbarModule,\r\n        InputGroupModule,\r\n        LocaleModule.forRoot(),\r\n        DataColumnModule.forRoot(),\r\n        PaginationModule,\r\n        FarrisContextMenuModule\r\n    ],\r\n    declarations: [\r\n        TreeTableComponent,\r\n        TTBodyComponent,\r\n        TreeTableTogglerComponent,\r\n        TreeTableSelectRowDirective,\r\n        TreeTableCheckboxComponent,\r\n        TreeTableHeaderCheckboxComponent,\r\n        DblClickRowDirective,\r\n        TTResizableColumnDirective,\r\n        TreeTableColumnDirective,\r\n        TTCustomCellStyleDirective,\r\n        FindInputComponent,\r\n        HighlightPipe,\r\n        CustomRowStyleDirective,\r\n        TreetableNodesPagerComponent,\r\n        ChildsLoadingComponent,\r\n        CellTipsPipe,\r\n        DisableNodePipe\r\n    ],\r\n    exports: [\r\n        TreeTableComponent,\r\n        TTBodyComponent,\r\n        TreeTableTogglerComponent,\r\n        TreeTableSelectRowDirective,\r\n        TreeTableCheckboxComponent,\r\n        TreeTableHeaderCheckboxComponent,\r\n        DblClickRowDirective,\r\n        TTResizableColumnDirective,\r\n        FarrisCommonModule,\r\n        TTCustomCellStyleDirective,\r\n        TreeTableColumnDirective,\r\n        HighlightPipe,\r\n        CustomRowStyleDirective,\r\n        TreetableNodesPagerComponent,\r\n        ChildsLoadingComponent,\r\n        CellTipsPipe,\r\n        DisableNodePipe,\r\n        FarrisContextMenuModule\r\n    ],\r\n    providers: [\r\n        TreetableService,\r\n        ResizeService,\r\n        TTHotkeys\r\n    ]\r\n})\r\nexport class TreeTableModule {\r\n\r\n}\r\n"]}