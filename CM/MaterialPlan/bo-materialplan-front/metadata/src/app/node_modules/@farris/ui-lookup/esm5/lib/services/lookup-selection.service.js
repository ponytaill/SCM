/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { of, BehaviorSubject } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { FavoriteAction } from '../lookup-displaytype';
/**
 * @record
 */
export function SelectionState() { }
if (false) {
    /** @type {?} */
    SelectionState.prototype.selecteditems;
    /** @type {?} */
    SelectionState.prototype.favoriteItems;
    /** @type {?} */
    SelectionState.prototype.quickItems;
}
var LookupSelectionService = /** @class */ (function () {
    function LookupSelectionService(ins) {
        this.ins = ins;
        this.state = {
            selecteditems: [],
            favoriteItems: [],
            quickItems: []
        };
        this.state$ = new BehaviorSubject(this.state);
        this.selected$ = this.state$.pipe(switchMap((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return of(n.selecteditems); })));
        this.favoriteItems$ = new BehaviorSubject({ items: this.state.favoriteItems, action: null });
        this.quickItems$ = this.state$.pipe(switchMap((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return of(n.quickItems); })));
    }
    Object.defineProperty(LookupSelectionService.prototype, "idField", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.ins.idField;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} items
     * @return {?}
     */
    LookupSelectionService.prototype.initFavoriteItems = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        this.state.favoriteItems = items || [];
    };
    //#region 收藏数据
    //#region 收藏数据
    /**
     * @param {?} data
     * @param {?} action
     * @return {?}
     */
    LookupSelectionService.prototype.updateFavoriteData = 
    //#region 收藏数据
    /**
     * @param {?} data
     * @param {?} action
     * @return {?}
     */
    function (data, action) {
        var _this = this;
        if (this.ins.savingFaoriteData) {
            return;
        }
        if (action === FavoriteAction.add) {
            this.state.favoriteItems = this.state.favoriteItems.concat([data]);
        }
        else {
            this.state.favoriteItems = this.state.favoriteItems.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this.idField] !== data[_this.idField]; }));
        }
        this.favoriteItems$.next({ items: this.state.favoriteItems, action: action, data: data });
    };
    //#endregion
    //#region 多选数据
    //#endregion
    //#region 多选数据
    /**
     * @param {?} data
     * @return {?}
     */
    LookupSelectionService.prototype.loadSelections = 
    //#endregion
    //#region 多选数据
    /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.state.selecteditems = tslib_1.__spread(data);
        this.state$.next(this.state);
    };
    /**
     * @return {?}
     */
    LookupSelectionService.prototype.getSelections = /**
     * @return {?}
     */
    function () {
        return tslib_1.__spread(this.state.selecteditems);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    LookupSelectionService.prototype.select = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item) {
            this.state.selecteditems = tslib_1.__spread(this.state.selecteditems, [item]);
            this.state$.next(this.state);
        }
    };
    /**
     * @param {?} pathcode
     * @return {?}
     */
    LookupSelectionService.prototype.unselectByPathcode = /**
     * @param {?} pathcode
     * @return {?}
     */
    function (pathcode) {
        var _this = this;
        // const { dataField, pathField } = this.ins.treeInfo;
        this.state.selecteditems = this.state.selecteditems.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var pathcode = _this.ins.getPathCode(n, _this.ins.treeInfo);
            return pathcode && pathcode.indexOf(pathcode) !== 0;
        }));
    };
    /**
     * @param {?} data
     * @param {?=} checked
     * @return {?}
     */
    LookupSelectionService.prototype.updateSelections = /**
     * @param {?} data
     * @param {?=} checked
     * @return {?}
     */
    function (data, checked) {
        var _this = this;
        if (checked === void 0) { checked = true; }
        if (!Array.isArray(data)) {
            data = [data];
        }
        /** @type {?} */
        var items = tslib_1.__spread(data);
        /** @type {?} */
        var idField = this.idField;
        if (checked) {
            if (this.state.selecteditems && !this.state.selecteditems.length) {
                this.state.selecteditems = items;
            }
            else {
                /** @type {?} */
                var ids = items.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[idField]; }));
                ids.forEach((/**
                 * @param {?} n
                 * @param {?} i
                 * @return {?}
                 */
                function (n, i) {
                    if (!_this.state.selecteditems.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) { return r[idField] == n; }))) {
                        _this.state.selecteditems.push(items[i]);
                    }
                }));
            }
        }
        else {
            if (data) {
                /** @type {?} */
                var ids2_1 = data.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[idField]; }));
                this.state.selecteditems = this.state.selecteditems.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return ids2_1.indexOf(n[idField]) === -1;
                }));
            }
        }
        this.state$.next(this.state);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    LookupSelectionService.prototype.unSelect = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        if (id) {
            if (Array.isArray(id)) {
                this.state.selecteditems = this.state.selecteditems.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return id.indexOf(n[_this.idField]) === -1;
                }));
            }
            else {
                this.state.selecteditems = this.state.selecteditems.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[_this.idField] != id; }));
            }
            this.state$.next(this.state);
        }
    };
    /**
     * @return {?}
     */
    LookupSelectionService.prototype.clearSelections = /**
     * @return {?}
     */
    function () {
        this.state.selecteditems = [];
        this.state$.next(this.state);
    };
    return LookupSelectionService;
}());
export { LookupSelectionService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupSelectionService.prototype.state;
    /** @type {?} */
    LookupSelectionService.prototype.state$;
    /** @type {?} */
    LookupSelectionService.prototype.selected$;
    /** @type {?} */
    LookupSelectionService.prototype.favoriteItems$;
    /** @type {?} */
    LookupSelectionService.prototype.quickItems$;
    /**
     * @type {?}
     * @private
     */
    LookupSelectionService.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLXNlbGVjdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1sb29rdXAvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvbG9va3VwLXNlbGVjdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFjLEVBQUUsRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7OztBQUd2RCxvQ0FJQzs7O0lBSEcsdUNBQXFCOztJQUNyQix1Q0FBcUI7O0lBQ3JCLG9DQUFrQjs7QUFHdEI7SUF3QkksZ0NBQW9CLEdBQXdCO1FBQXhCLFFBQUcsR0FBSCxHQUFHLENBQXFCO1FBdEJwQyxVQUFLLEdBQW1CO1lBQzVCLGFBQWEsRUFBRSxFQUFFO1lBQ2pCLGFBQWEsRUFBRSxFQUFFO1lBQ2pCLFVBQVUsRUFBRSxFQUFFO1NBQ2pCLENBQUM7UUFFRixXQUFNLEdBQW9DLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUxRSxjQUFTLEdBQXNCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUMzQyxTQUFTOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFuQixDQUFtQixFQUFDLENBQ3RDLENBQUM7UUFFRixtQkFBYyxHQUF5QixJQUFJLGVBQWUsQ0FBQyxFQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUU3RyxnQkFBVyxHQUFzQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDN0MsU0FBUzs7OztRQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsRUFBRSxD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QUVGLHdDQUEwRTs7SUFFMUUsMkNBRUU7O0lBRUYsZ0RBQTZHOztJQUU3Ryw2Q0FFRTs7Ozs7SUFNVSxxQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgRmF2b3JpdGVBY3Rpb24gfSBmcm9tICcuLi9sb29rdXAtZGlzcGxheXR5cGUnO1xyXG5pbXBvcnQgeyBMb29rdXBHcmlkQ29tcG9uZW50IH0gZnJvbSAnLi4vbG9va3VwLWdyaWQuY29tcG9uZW50JztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0aW9uU3RhdGUge1xyXG4gICAgc2VsZWN0ZWRpdGVtczogYW55W107XHJcbiAgICBmYXZvcml0ZUl0ZW1zOiBhbnlbXTtcclxuICAgIHF1aWNrSXRlbXM6IGFueVtdO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTG9va3VwU2VsZWN0aW9uU2VydmljZSB7XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0ZTogU2VsZWN0aW9uU3RhdGUgPSB7XHJcbiAgICAgICAgc2VsZWN0ZWRpdGVtczogW10sXHJcbiAgICAgICAgZmF2b3JpdGVJdGVtczogW10sXHJcbiAgICAgICAgcXVpY2tJdGVtczogW11cclxuICAgIH07XHJcblxyXG4gICAgc3RhdGUkOiBCZWhhdmlvclN1YmplY3Q8U2VsZWN0aW9uU3RhdGU+ID0gbmV3IEJlaGF2aW9yU3ViamVjdCh0aGlzLnN0YXRlKTtcclxuXHJcbiAgICBzZWxlY3RlZCQ6IE9ic2VydmFibGU8YW55W10+ID0gdGhpcy5zdGF0ZSQucGlwZShcclxuICAgICAgICBzd2l0Y2hNYXAobiA9PiBvZihuLnNlbGVjdGVkaXRlbXMpKVxyXG4gICAgKTtcclxuXHJcbiAgICBmYXZvcml0ZUl0ZW1zJDogQmVoYXZpb3JTdWJqZWN0PGFueT4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHtpdGVtczogdGhpcy5zdGF0ZS5mYXZvcml0ZUl0ZW1zLCBhY3Rpb246IG51bGwgfSk7XHJcblxyXG4gICAgcXVpY2tJdGVtcyQ6IE9ic2VydmFibGU8YW55W10+ID0gdGhpcy5zdGF0ZSQucGlwZShcclxuICAgICAgICBzd2l0Y2hNYXAobiA9PiBvZihuLnF1aWNrSXRlbXMpKVxyXG4gICAgKTtcclxuXHJcbiAgICBwcml2YXRlIGdldCBpZEZpZWxkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlucy5pZEZpZWxkO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5zOiBMb29rdXBHcmlkQ29tcG9uZW50KSB7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdEZhdm9yaXRlSXRlbXMoaXRlbXM6IGFueVtdKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5mYXZvcml0ZUl0ZW1zID0gaXRlbXMgfHwgW107XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vI3JlZ2lvbiDmlLbol4/mlbDmja5cclxuXHJcbiAgICB1cGRhdGVGYXZvcml0ZURhdGEoZGF0YTogYW55LCBhY3Rpb246IEZhdm9yaXRlQWN0aW9uKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlucy5zYXZpbmdGYW9yaXRlRGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYWN0aW9uID09PSBGYXZvcml0ZUFjdGlvbi5hZGQpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5mYXZvcml0ZUl0ZW1zID0gdGhpcy5zdGF0ZS5mYXZvcml0ZUl0ZW1zLmNvbmNhdChbZGF0YV0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuZmF2b3JpdGVJdGVtcyA9IHRoaXMuc3RhdGUuZmF2b3JpdGVJdGVtcy5maWx0ZXIobiA9PiBuW3RoaXMuaWRGaWVsZF0gIT09IGRhdGFbdGhpcy5pZEZpZWxkXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmZhdm9yaXRlSXRlbXMkLm5leHQoeyBpdGVtczogdGhpcy5zdGF0ZS5mYXZvcml0ZUl0ZW1zLCBhY3Rpb24sIGRhdGEgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgLy8jcmVnaW9uIOWkmumAieaVsOaNrlxyXG5cclxuICAgIGxvYWRTZWxlY3Rpb25zKCBkYXRhOiBbXSkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtcyA9IFsuLi5kYXRhXTtcclxuICAgICAgICB0aGlzLnN0YXRlJC5uZXh0KHRoaXMuc3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFNlbGVjdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFsuLi50aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXNdO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdChpdGVtOiBhbnkpIHtcclxuICAgICAgICBpZiAoaXRlbSkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMgPSBbLi4udGhpcy5zdGF0ZS5zZWxlY3RlZGl0ZW1zLCBpdGVtXTtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSQubmV4dCh0aGlzLnN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdW5zZWxlY3RCeVBhdGhjb2RlKHBhdGhjb2RlOiBzdHJpbmcpIHtcclxuICAgICAgICAvLyBjb25zdCB7IGRhdGFGaWVsZCwgcGF0aEZpZWxkIH0gPSB0aGlzLmlucy50cmVlSW5mbztcclxuICAgICAgICB0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMgPSB0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMuZmlsdGVyKG4gPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwYXRoY29kZSA9IHRoaXMuaW5zLmdldFBhdGhDb2RlKG4sIHRoaXMuaW5zLnRyZWVJbmZvKTtcclxuICAgICAgICAgICAgcmV0dXJuIHBhdGhjb2RlICYmIHBhdGhjb2RlLmluZGV4T2YocGF0aGNvZGUpICE9PSAwO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVNlbGVjdGlvbnMoZGF0YTogYW55LCBjaGVja2VkID0gdHJ1ZSkge1xyXG5cclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpIHtcclxuICAgICAgICAgICAgZGF0YSA9IFtkYXRhXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gWyAuLi5kYXRhIF07XHJcbiAgICAgICAgY29uc3QgaWRGaWVsZCA9IHRoaXMuaWRGaWVsZDtcclxuICAgICAgICBpZiAoY2hlY2tlZCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5zZWxlY3RlZGl0ZW1zICYmICF0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMgPSBpdGVtcztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkcyA9IGl0ZW1zLm1hcChuID0+IG5baWRGaWVsZF0pO1xyXG4gICAgICAgICAgICAgICAgaWRzLmZvckVhY2goKG4sIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtcy5maW5kKHIgPT4gcltpZEZpZWxkXSA9PSBuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMucHVzaChpdGVtc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaWRzMiA9IGRhdGEubWFwKG4gPT4gbltpZEZpZWxkXSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMgPSB0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMuZmlsdGVyKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpZHMyLmluZGV4T2YobltpZEZpZWxkXSkgPT09IC0xO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUkLm5leHQodGhpcy5zdGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdW5TZWxlY3QoaWQ6IGFueSkge1xyXG4gICAgICAgIGlmIChpZCkge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpZCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtcyA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtcy5maWx0ZXIobiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkLmluZGV4T2Yoblt0aGlzLmlkRmllbGRdKSA9PT0gLTE7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtcyA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtcy5maWx0ZXIobiA9PiBuW3RoaXMuaWRGaWVsZF0gIT0gaWQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN0YXRlJC5uZXh0KHRoaXMuc3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjbGVhclNlbGVjdGlvbnMoKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5zZWxlY3RlZGl0ZW1zID0gW107XHJcbiAgICAgICAgdGhpcy5zdGF0ZSQubmV4dCh0aGlzLnN0YXRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyNlbmRyZWdpb25cclxuXHJcbn1cclxuIl19