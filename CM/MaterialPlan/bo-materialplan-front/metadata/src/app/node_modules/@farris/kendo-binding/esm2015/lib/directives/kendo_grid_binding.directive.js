import { Directive, Input, HostListener, Optional, EventEmitter, Output, ContentChildren, QueryList, NgZone } from '@angular/core';
import { of } from 'rxjs';
import { GridComponent, DataBindingDirective, SelectionDirective, } from '@progress/kendo-angular-grid';
import { BindingData, ChangeType, FrameEventBus, UIState, Form, ViewModel } from '@farris/devkit';
import { DialogService } from '@farris/ui-dialog';
import { RuntimeStateService } from '@farris/ui-common';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { FarrisKendoGridFormatService } from '../format/index';
import { GridColumnAggregateDirective } from './grid-summary.directive';
import { MultiSelectGridUtility } from '../util/multi_select_grid_utility';
import { SelectedRowContext } from '../entity/index';
/*
 * Kendo Grid 数据绑定指令
 *
 * TODO:
 * 1、整体刷存在性能问题；
 * 2、选中和当前行没有区分开；
 */
export class KendoGridBindingDirective extends DataBindingDirective {
    /**
     * 构造函数
     * @param  grid 宿主Grid
     */
    constructor(bindingData, uiState, eventBus, viewModel, grid, selectionDir, dialogSer, dateService, kendogridFormatSer, rts, ngZone) {
        super(grid);
        this.bindingData = bindingData;
        this.uiState = uiState;
        this.eventBus = eventBus;
        this.viewModel = viewModel;
        this.grid = grid;
        this.selectionDir = selectionDir;
        this.dialogSer = dialogSer;
        this.dateService = dateService;
        this.kendogridFormatSer = kendogridFormatSer;
        this.rts = rts;
        this.ngZone = ngZone;
        /* 行样式事件 */
        // @Input()
        // rowClassName: (context: any) => any;
        // tslint:disable-next-line:no-output-rename
        this.appendRow = new EventEmitter();
        /* 绑定排序事件 */
        this.sortChangeEvent = new EventEmitter();
        /* 行样式事件 */
        this.rowClass = new EventEmitter();
        this.hiddenColLen = 0;
        /**
         * TODO: 从实体获取其默认值
         * 当前行索引值，默认第一个
         */
        this.rowIndex = 0;
        this.columnIndex = 0;
        this.currentSkip = 0;
        /**
         * 是否启用多选，默认未启用
         */
        this.isMultipleSelectionMode = false;
        /**
         * 上一个选中行，默认不存在
         */
        this.lastRowIndex = -1;
        /**
         * 选中行切换事件
         */
        this.selectedRowChange = new EventEmitter();
        /**
         * checkbox选择事件
         */
        this.selectedCheckboxChange = new EventEmitter();
        this.selectionDir.selectedKeys = [];
        this.viewModel.uiState.setPropertyValue('ids', this.selectionDir.selectedKeys);
        const appContext = this.viewModel.frameContext.getFormAppContext();
        if (appContext && appContext.hasOwnProperty('messagePipe')) {
            appContext.messagePipe.subscribe((message) => {
                this.grid.closeCell();
            });
        }
    }
    get gridOption() {
        return this.grid['gridOption'];
    }
    get len() {
        return this.grid.columns.length;
    }
    get IsMultipleSelectionMode() {
        if (!this.grid) {
            return this.isMultipleSelectionMode;
        }
        if (this.grid.selectable) { // 优先尝试从this.grid.selectable获取
            // tslint:disable-next-line: no-string-literal
            if (this.grid.selectable['mode'] === 'multiple') {
                this.isMultipleSelectionMode = true;
            }
            else {
                this.isMultipleSelectionMode = false;
            }
        }
        else {
            if (this.grid.selectableSettings && this.grid.selectableSettings.mode === 'multiple') {
                this.isMultipleSelectionMode = true;
            }
        }
        return this.isMultipleSelectionMode;
    }
    /**
     * 绑定列表(Grid对应数据源)
     */
    get bindingList() {
        // 根实体
        if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
            return this.bindingData.list;
        }
        // 子实体
        let bindingPath = this.viewModel.bindingPath.substr(1);
        bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
        const paths = bindingPath.split('/');
        const filteredPaths = paths.filter((part) => {
            return part !== '';
        });
        return this.bindingData.getValue(filteredPaths);
    }
    /**
     * 获取分页信息
     */
    getPagingInfo() {
        const bindingPath = this.viewModel.bindingPath;
        const bindingData = this.viewModel.bindingData;
        let pagingInfo = bindingData.pagingInfo;
        if (bindingPath === '/') {
            return pagingInfo;
        }
        else {
            const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0).map(item => {
                return item.substring(0, item.length - 1);
            });
            bindingPaths.forEach(path => {
                pagingInfo = pagingInfo && pagingInfo[path] || {};
            });
            return pagingInfo;
        }
    }
    /**
     * 指令初始化后
     */
    ngOnInit() {
        super.ngOnInit();
        // 初始化state，分组使用。
        this.initDataState();
        this.refreshView();
        // 数据变化
        this.bindingChangeSubscription = this.bindingData.changes.subscribe((change) => {
            this.refreshView(change);
            if (change.type === ChangeType.Load) {
                // load时，在多选模式下，需清空选中集合
                if (this.isMultipleSelectionMode) {
                    const isMatch = this.checkIfChangeMatchBindingPath(change);
                    if (isMatch) {
                        // 清空多选集合
                        this.selectionDir.selectedKeys = [];
                        this.viewModel.uiState.setPropertyValue('ids', this.selectionDir.selectedKeys);
                        this.ngZone.runOutsideAngular(() => {
                            // 渲染初始选中行
                            setTimeout(() => {
                                const rowSelectedContext = new SelectedRowContext();
                                const isPageable = MultiSelectGridUtility.checkIfEnablePaging(this.grid);
                                if (isPageable) {
                                    this.rowIndex = this.grid.skip;
                                }
                                else {
                                    this.rowIndex = 0;
                                }
                                rowSelectedContext.currentRowIndex = this.rowIndex;
                                rowSelectedContext.lastRowIndex = this.lastRowIndex;
                                this.handleSelectedRowChange(rowSelectedContext);
                            }, 300);
                        });
                    }
                }
            }
            // TODO: 使用策略模式重构
            // bindingData 同步 SelectedKeys
            if (change.type === ChangeType.Remove) {
                this.syncDeletedKeys(change.value);
            }
            const isMatch = this.checkIfChangeMatchBindingPath(change);
            if (isMatch) {
                this.handleSelectedKeyChange(this.bindingList.currentId);
            }
            // 渲染当前行
            if (isMatch && this.checkCurrentRowIdExists() && change.type === ChangeType.SelectionChanged && !this.dataId) {
                this.renderCurrentRow(this.bindingList.currentId);
            }
            // tslint:disable-next-line: max-line-length
            // FIXME:需要有重置页码的时机
            /*if ((change.type === ChangeType.SelectionChanged || change.type === ChangeType.GlobalSelectionChanged) && this.currentRowId !== this.bindingList.currentId) {
                this.resetPageInfo();
            }*/
            // 触发变更检测
            if (change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged
                || change.type === ChangeType.Append || change.type === ChangeType.Remove) {
                // 触发变更检测
                if (this.grid && this.grid['changeDetectorRef'] && this.grid['changeDetectorRef']['detectChanges']) {
                    this.grid['changeDetectorRef']['detectChanges']();
                }
            }
        });
        if (this.editable === true && this.form === null) {
            throw Error('启用编辑时，必须指定form');
        }
        if (!this.grid || !this.farrisBindingGridOption || !this.farrisBindingGridOption['fields']) {
            return;
        }
        const gridColumns = this.farrisBindingGridOption['fields'];
        const gridOption = this.farrisBindingGridOption;
        // 判断列中是否存在固定列
        gridOption.lockable = (columns) => {
            return columns.some(ele => {
                return ele.frozen;
            });
        };
        this.rowClass.emit(this.grid);
        // 添加列属性或者方法
        gridColumns.forEach((element) => {
            // 自定义超链
            if (element.linkedLabelEnabled && !element.linkEvent) {
                element.linkEvent = () => {
                    return;
                };
            }
            // 若没有自定义格式化方法  每个列对象绑定格式化方法
            if (!element.getColumnFormat) {
                element.getColumnFormat = (dataItem, column) => {
                    return this.kendogridFormatSer.getColumnFormat(dataItem, column);
                };
            }
            // 如果没有自定义类样式 每个列绑定 格式化方法
            if (!element.getClassName) {
                element.getClassName = (dataItem, column) => '';
            }
            // 自定义帮助前后事件
            if (element.editor && element.editor.type === 'LookupEdit') {
                // 帮助前事件
                if (!element.dictPicking) {
                    element.dictPicking = (param) => {
                        return of(true);
                    };
                }
                // 帮助后事件
                if (!element.dictPicked) {
                    element.dictPicked = (param) => {
                        // 重新进入编辑
                        this.cellClickHandler(this.cellClickParam);
                        return of(true);
                    };
                }
            }
        });
        // 绑定gridOption
        this.bindingGridOption();
        // 多选模式下，设置初始选中行
        if (this.IsMultipleSelectionMode) {
            // TODO: 移除 setTimeout
            const self = this;
            this.ngZone.runOutsideAngular(() => {
                setTimeout(() => {
                    const rowSelectedContext = new SelectedRowContext();
                    rowSelectedContext.currentRowIndex = self.rowIndex;
                    rowSelectedContext.lastRowIndex = self.lastRowIndex;
                    self.handleSelectedRowChange(rowSelectedContext);
                }, 300);
            });
        }
    }
    ngAfterViewInit() {
        // this.gridElement = document.querySelector('.k-grid');
        // // 绑定grid keydown对象的方法
        // this.ngZone.runOutsideAngular(() => {
        //   this.gridKeydownEvent = this.enterCell.bind(this);
        //   this.gridCellClickEvent = this.cellClickHandler.bind(this);
        //   this.gridCellCloseEvent = this.cellCloseHandler.bind(this);
        //   this.gridElement.addEventListener('keydown', this.gridKeydownEvent);
        //   this.gridElement.addEventListener('cellClick', this.gridCellClickEvent);
        //   this.gridElement.addEventListener('cellClose', this.gridCellCloseEvent);
        // });
    }
    /**
     * 检测change的路径和BindingPath是否匹配
     */
    checkIfChangeMatchBindingPath(change) {
        let isMatch = false;
        if (!change || !change.path) {
            return isMatch;
        }
        const changePathArray = change.path;
        if (!changePathArray) {
            return isMatch;
        }
        if (!(this.bindingData) && !(this.bindingData.bindingPath)) {
            return isMatch;
        }
        const bingdingPathArray = this.bindingData.bindingPath.split('/');
        if (bingdingPathArray.length <= 0) {
            return isMatch;
        }
        if (changePathArray.length === 0) { // 主表
            if (this.bindingData.bindingPath === '/') {
                isMatch = true;
            }
        }
        else if (change.path.length === 1) { // 主从表
            if (bingdingPathArray.length === 2 && bingdingPathArray[1] === change.path[0]) {
                isMatch = true;
            }
        }
        else if (change.path.length === 2) { // 主从从表
            if (bingdingPathArray.length === 3 && bingdingPathArray[1] === change.path[0] && bingdingPathArray[2] === change.path[1]) {
                isMatch = true;
            }
        }
        return isMatch;
    }
    /**
     * 处理选中主键变更
     */
    handleSelectedKeyChange(currentId) {
        const selectedKeys = this.selectionDir.selectedKeys;
        if (!currentId) {
            // 如果当前行时null，但selectedKeys里有值，清空并发送一次行切换
            if (selectedKeys.length > 0) {
                const removedSelectedKeys = selectedKeys.splice(0, selectedKeys.length);
                if (removedSelectedKeys.indexOf(null) === -1) {
                    this.emitSelectedRowChange({ currentRowId: null });
                }
            }
            return;
        }
        let oldCurrentRowId = null;
        if (this.IsMultipleSelectionMode) {
            oldCurrentRowId = this.currentRowId;
        }
        else {
            oldCurrentRowId = this.selectionDir.selectedKeys.length === 0
                ? null : this.selectionDir.selectedKeys[0];
        }
        // TODO:if (this.currentRowId !== currentId) {
        if (oldCurrentRowId !== currentId) {
            const selectedRowContext = {};
            selectedRowContext.currentRowId = currentId;
            this.currentRowId = currentId;
            this.emitSelectedRowChange(selectedRowContext);
        }
    }
    /**
     * 发射选中行切换事件
     * @description 统一单选模式和多选模式下的行切换事件
     */
    emitSelectedRowChange(selectedRowContext) {
        if (!this.IsMultipleSelectionMode) { // 向后兼容
            const currentId = selectedRowContext.currentRowId;
            this.selectionDir.selectedKeys = [currentId];
            this.selectionDir.selectedKeysChange.emit(this.selectionDir.selectedKeys);
        }
        this.selectedRowChange.emit(selectedRowContext);
    }
    checkCurrentRowIdExists() {
        let isExist = false;
        if (this.bindingList && this.bindingList.currentId && this.bindingList.currentId.length > 0) {
            isExist = true;
        }
        return isExist;
    }
    /**
     * 同步已删除键到选中集合
     */
    syncDeletedKeys(deletedValueCollection) {
        if (!deletedValueCollection) {
            return;
        }
        deletedValueCollection.forEach((id) => {
            const index = this.selectionDir.selectedKeys.indexOf(id);
            if (index > -1) {
                this.selectionDir.selectedKeys.splice(index, 1);
                // selectedKeys被清空的时候，触发一次行变更
                if (this.selectionDir.selectedKeys.length === 0) {
                    this.emitSelectedRowChange({ currentRowId: null });
                }
            }
        });
    }
    renderCurrentRow(currentId) {
        if (!currentId || currentId === '') { // 不存在当前行
            return;
        }
        // TODO:使用策略模式重构
        if (this.IsMultipleSelectionMode) {
            return;
        }
        this.renderSelectionRow(this.bindingList.currentId, this.selectionDir.selectedKeys);
    }
    /**
     * 指令输入变更处理
     */
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        this.refreshView();
    }
    /**
     * 指令销毁，注销订阅
     */
    ngOnDestroy() {
        if (this.bindingChangeSubscription) {
            this.bindingChangeSubscription.unsubscribe();
        }
    }
    refreshView(change) {
        // this.bindData();
        this.refreshData(change);
        // 刷新页脚合计信息。客户端合计，暂时放这里，服务端合计时最好从这里移走。by justin
        this.refreshSummary();
    }
    /**
     * 绑定data到宿主grid上
     * @deprecated
     */
    bindData() {
        /*const data = this.bindingList.toJSON();
        let skip = 0;
        if (this.bindingList.pageIndex > 0) {
          skip = (this.bindingList.pageIndex - 1) * this.bindingList.pageSize;
        }
        this.updatePager(this.bindingList.pageSize, skip);
        const processed = process(data, Object.assign({}, this.state, { skip: 0 }));
        processed.total = this.bindingList.total;
        this.grid.data = processed;*/
    }
    refreshData(change) {
        let skip = 0;
        const { pageIndex = 1, pageSize = 0 } = this.getPagingInfo() || {};
        if (pageIndex > 0) {
            skip = (pageIndex - 1) * pageSize;
        }
        this.updatePager(pageSize, skip);
        this.endCellEdit(change);
        this.data = this.bindingList.toJSON({ ignoreMultiLangInput: true });
    }
    /**
     * 退出编辑状态
     * @param change 变更
     */
    endCellEdit(change) {
        const isEditing = this.grid.isEditing;
        if (change && change.type === ChangeType.Load && isEditing) {
            this.grid.cancelCell();
        }
    }
    refreshSummary() {
        if (this.aggrColumns) {
            this.aggrColumns.forEach(aggrCol => {
                if (aggrCol.aggregate) {
                    aggrCol.recalculateSummary(this.bindingList);
                }
            });
        }
    }
    onPageChange(event) {
        const { skip = 0, take = 0 } = event || {};
        // this.bindingList.setPaginationInfo(skip, take);
        this.bindingData.setPagingInfo(skip, take, this.viewModel.bindingPath);
        // 移除选中行样式
        MultiSelectGridUtility.removeRowSelectedStyle(this.grid, this.rowIndex);
    }
    /**
     * 重置grid分页信息
     */
    resetPageInfo() {
        const { pageSize = 0 } = this.getPagingInfo() || {};
        this.bindingData.setPagingInfo(0, pageSize, this.viewModel.bindingPath);
    }
    initDataState() {
        // const groups: GroupDescriptor[] = [];
        // if (this.groupField) {
        //   groups.push({field: this.groupField, aggregates: this.aggregates||[]});
        //   this.grid.group = groups;
        // }
        // this.state = Object.assign(this.state, {group: groups});
        const aggregatesDes = [];
        if (this.groupAggrFields) {
            for (const groupAggrField of this.groupAggrFields) {
                aggregatesDes.push({ field: groupAggrField, aggregate: 'sum' });
            }
        }
        const group = [];
        if (this.groupField) {
            group.push({ field: this.groupField, aggregates: aggregatesDes });
        }
        this.group = group;
    }
    /*
     * @override
     * @param state State
     */
    onStateChange(state) {
        // 说明：pager根据skip计算当前页码。kendo grid内部会在filter state变化时把skip变为0（重置到第一页）。
        // 因此需要重写onStateChange方法，修正skip
        if (state.skip !== this.currentSkip) {
            state.skip = this.currentSkip;
        }
        // 使用kendo默认的处理state的逻辑
        this.applyState(state);
        this.rebind();
    }
    // protected applyState({skip, take, sort, group, filter}: State): void {
    //   this.skip = skip;
    //   this.pageSize = take;
    //   this.sort = sort;
    //   this.group = group;
    //   this.filter = filter;
    // }
    /*
     * @override 服务器端分页取数。process使用的state中skip应为0，否则不显示数据
     * @param state State
     */
    process(state) {
        // if (this.editing) {
        //   state.sort = null;
        // } else {
        //   state.sort = this.originalSort;
        // }
        state.skip = 0;
        const { pageSize = 0, total: totalCount = 0 } = this.getPagingInfo() || {};
        // fix：不启用分页时，take=0导致process不返回数据
        if (state.take === 0) {
            state.take = this.bindingList.length;
        }
        else {
            state.take = pageSize;
        }
        // 编辑模式的判断依据为pageSize小于绑定数据的数量且启用分页
        const isEditMode = state.take < this.bindingList.length;
        if (isEditMode) {
            state.take = this.bindingList.length;
        }
        const processed = super.process(state);
        // fix:数据从无到有时分页不启用
        processed.total = Math.max(totalCount, this.bindingList.length);
        // 分页编辑模式下数据总记录数不能等于真实的数据数据，否则分页工具条就会自动增加分页页签
        if (isEditMode) {
            processed.total = totalCount || 1;
        }
        return processed;
    }
    /*
     * 选中行主键变化处理
     * @param event { SelectionEvent} 选中行变化处理
     */
    selectedKeysChangeHandler(selectedKeys) {
        if (!(this.IsMultipleSelectionMode)) { // 单选模式下
            // 设置BindingData中的当前行
            this.setSelectionIdToBindingData(selectedKeys[selectedKeys.length - 1]);
        }
        this.viewModel.uiState.setPropertyValue('ids', this.selectionDir.selectedKeys); // 更新集合
    }
    /*
     * 处理Grid行切换事件
     * @param event { SelectionEvent} 行切换事件对象
     */
    selectionChangeHandler(event) {
        if (this.IsMultipleSelectionMode) {
            this.handleSelectedCheckboxChange(this.grid.wrapper, event);
        }
    }
    /**
     * 处理checkbox选中事件
     */
    handleSelectedCheckboxChange(elementRef, event) {
        MultiSelectGridUtility.renderSelectedChangeCheckbox(elementRef, event);
        this.selectedCheckboxChange.emit(event);
    }
    /*
     * 单元格点击处理
     * @param event { CellClickEvent } 单元格单击事件对象
     */
    cellClickHandler(event) {
        this.cellClickParam = event;
        this.cellClickEvent = event;
        this.rowIndex = event.rowIndex;
        this.columnIndex = event.columnIndex;
        this.sender = event.sender;
        // 多选模式下，且不分组的情况下，检测行切换
        if (this.IsMultipleSelectionMode && !this.gridOption.groupable) {
            const currentRowIndex = event.rowIndex;
            if (currentRowIndex !== this.lastRowIndex) {
                const rowSelectedContext = new SelectedRowContext();
                rowSelectedContext.currentRowIndex = currentRowIndex;
                rowSelectedContext.lastRowIndex = this.lastRowIndex;
                this.handleSelectedRowChange(rowSelectedContext);
            }
        }
        // 设置实体的当前行
        this.dataId = this.getSelectedIdFromGrid(event.dataItem);
        this.setSelectionIdToBindingData(this.dataId);
        // 若状态机不是可编辑状态 不可编辑
        if (!this.isEditable()) {
            return;
        }
        // 列模板不存在  不可编辑
        if (!event.column.editTemplate) {
            return;
        }
        if (event.type === 'click' && !event.isEdited) {
            // 如果存在显隐状况  确定正确的columnIndex
            const originColums = this.getColumns(this.gridOption.fields);
            const columns = this.getColumns(originColums);
            const currentColumnIndex = columns.findIndex((col) => col.dataField === event.column.field);
            const hiddenColLen = columns.slice(0, currentColumnIndex + 1).filter(col => !col.visible).length;
            // 赋值全局行索引  列索引
            this.rowIndex = event.rowIndex;
            this.columnIndex = event.columnIndex + hiddenColLen;
            this.hiddenColLen = hiddenColLen;
            this.sender = event.sender;
            this.setEditable(this.rowIndex, this.columnIndex);
        }
    }
    /**
     * 处理选中行切换事件
     */
    handleSelectedRowChange(rowSelectedContext) {
        MultiSelectGridUtility.renderClickChangedRow(this.grid, rowSelectedContext);
        this.rowIndex = rowSelectedContext.currentRowIndex;
        this.lastRowIndex = rowSelectedContext.currentRowIndex;
        // 更新当前行
        const id = this.getPrimary(this.rowIndex);
        this.setSelectionIdToBindingData(id);
    }
    /**
     * 获取指定行的主键
     * @param row 行号
     */
    getPrimary(row) {
        let data = this.grid.data;
        if (data && !Array.isArray(data) && data.hasOwnProperty('data')) {
            data = data.data;
        }
        const { pageIndex = 1, pageSize = 0 } = this.getPagingInfo() || {};
        const skip = this.bindingList.skip;
        // 不分页或者第一页时取不需要修改行号
        const rowNumber = pageSize === 0 || pageIndex === 1 ? row : row - skip;
        if (data.length > rowNumber) {
            return data[rowNumber][this.bindingList.primaryKey];
        }
        return null;
    }
    /*
     * 单元格结束编辑处理
     * @param event 单元格结束编辑事件对象
     */
    cellCloseHandler(event) {
        if (this.dialogSer.hasDialogOpened()) {
            event.preventDefault();
            return;
        }
        if (this.rts) {
            // 帮助组件文本变化后去查询
            if (this.rts.getFormState('lookup.pending')) {
                event.preventDefault();
                return;
            }
            // 点击帮助确定可取消按钮后不结束当前单元格编辑
            if (event.originalEvent) {
                if (this.rts.eventPath(event.originalEvent).find(n => n.tagName === 'FARRIS-DIALOG')) {
                    event.preventDefault();
                    return;
                }
            }
        }
        const { formGroup, column, dataItem, rowIndex } = event;
        const columns = this.getColumns(this.gridOption.fields);
        let currentCol = columns.find((element) => {
            return element.dataField === column.field;
        });
        const formControlValue = formGroup[currentCol.editor.binding.path].value;
        if (currentCol.getDynamicData) {
            // 若此列是动态单元格列
            currentCol = currentCol.getDynamicData(dataItem, currentCol);
        }
        this.setValue(formControlValue, currentCol);
    }
    /*
       * 回车  切换单元格
       * @param event 键盘按下事件
       */
    enterCell(e) {
        // 回车键
        if (!e.shiftKey && e.keyCode === 13) {
            // textarea enter 屏蔽换行操作
            e.preventDefault();
            if (!this.sender) {
                return;
            }
            // 由于keydown 事件会先执行，所以这里先要执行blur 事件；
            e.target.blur();
            this.ngZone.runOutsideAngular(() => {
                setTimeout(() => {
                    if (this.rts && this.rts.getFormState('lookup.pending')) {
                        e.preventDefault();
                        return;
                    }
                    this.enterNextCell();
                }, 201);
            });
        }
    }
    /*
       * 绑定grid option
       * @param dataItem 行数据
       */
    bindingGridOption() {
        if (!this.farrisBindingGridOption) {
            return;
        }
        Object.defineProperty(this.grid, 'gridOption', { value: this.farrisBindingGridOption });
    }
    /*
     * 更新Grid分页状态
     * @param take
     * @param skip
     */
    updatePager(take, skip) {
        if (take === 0) {
            this.currentSkip = 0;
            this.pageSize = 0;
            this.skip = 0;
            this.grid.pageable = false;
        }
        else {
            this.currentSkip = skip;
            this.skip = skip;
            this.pageSize = take;
            this.grid.pageable = {
                buttonCount: 10,
                info: true,
                type: 'numeric',
                pageSizes: false,
                previousNext: true
            };
        }
    }
    /*
     * 设置单元格可编辑性
     * @param dataItem 行数据
     * @param column 列对象
     * @param rowIndex 行索引
     * @param columnIndex 列索引
     * @param sender grid实例
     */
    setEditable(rowNumber, columnNumber) {
        const data = this.grid.data['data'];
        const { pageIndex = 1, pageSize = 0 } = this.getPagingInfo() || {};
        const skip = this.bindingList.skip;
        // 不分页或者第一页时取不需要修改行号
        const dataRowNumber = pageSize === 0 || pageIndex === 1 ? rowNumber : rowNumber - skip;
        let item = data[dataRowNumber];
        if (this.gridOption.groupable) {
            item = this.getGroupItem(data, dataRowNumber);
        }
        const originColums = this.getColumns(this.gridOption.fields);
        const columns = this.getColumns(originColums);
        /* 假如列的顺序改变 比如存在固定列  那么应该获取真正的列对象 */
        // let col = columns[columnNumber];
        let tempIndex = columnNumber;
        // 当前列索引不为0
        if (this.grid['gridOption'].showLineNumber) {
            tempIndex = tempIndex - 1;
        }
        if (this.grid.selectable && this.grid.selectable['mode'] === 'multiple') {
            tempIndex = tempIndex - 1;
        }
        const col = columns[tempIndex];
        const params = {
            dataItem: item,
            column: col,
            rowIndex: rowNumber,
            columnIndex: tempIndex,
        };
        // 控制单元格的可编辑性
        if (col && !col.editable) {
            col.editable = (param) => true;
        }
        if (col && this.notReadOnly(col, params)) {
            // 设置当前行
            this.dataId = this.getSelectedIdFromGrid(item);
            this.setSelectionIdToBindingData(this.dataId);
            // const value = this.getValue(item, col.dataField);
            // this.setValue(value, col);
            this.sender.editCell(rowNumber, columnNumber - this.hiddenColLen, this.viewModel.form);
        }
    }
    /*
    获取更新 rowIndex columnIndex
     */
    updateIndex(rowNumber, columnIndex) {
        const newColumnIndex = (columnIndex + 1) % this.len;
        if (!newColumnIndex) {
            const dataLen = this.bindingList.toJSON().length;
            const newRowIndex = (rowNumber + 1) % dataLen;
            return { rowIndex: newRowIndex, columnIndex: newColumnIndex };
        }
        return {
            rowIndex: rowNumber,
            columnIndex: newColumnIndex
        };
    }
    /* 是否只读 */
    notReadOnly(column, param) {
        if (!column) {
            return false;
        }
        return column.editable(param) && !column.editor.readonly;
    }
    /*
       * 给列表赋值 或给formcontrol赋值
        */
    setValue(value, column) {
        const currentColumnType = column.dataType;
        // 同时判断gridOption的列对象
        const bindingData = this.viewModel.bindingData;
        const fieldPaths = this.getFieldPaths(bindingData.bindingPath, column.dataField);
        // 存在行编辑器
        if (currentColumnType === 'date') {
            let dateStr = this.dateService.formatTo(value, 'yyyy-MM-dd HH:mm:ss');
            if (!dateStr) {
                dateStr = '';
            }
            this.viewModel.bindingData.setValue(fieldPaths, dateStr, true, true);
        }
        else {
            this.viewModel.bindingData.setValue(fieldPaths, value, true, true);
        }
    }
    /* 分组时 获取点击行数据 */
    getGroupItem(data, rowNumber) {
        let index = rowNumber;
        for (const i in data) {
            if (index < data[i].items.length) {
                return data[i].items[index];
            }
            else {
                index = index - data[i].items.length;
            }
        }
    }
    /*
     * 获取 单元格值  主从表支持
     * @param dataItem 行数据
     * @param field 字段
     */
    getValue(dataItem, field) {
        const index = field.indexOf('.');
        if (index < 0) {
            return dataItem[field];
        }
        const fields = field.split('.');
        // field字符串组合
        return fields.reduce((result, next) => {
            return result[next];
        }, dataItem);
    }
    /*
    * 获取 bindingData 路径
    * @param bindingPath 当前绑定的字段路径
    * @param fieldName 字段
    */
    getFieldPaths(bindingPath, field) {
        let fieldPath = '';
        if (bindingPath.length > 1) {
            fieldPath = bindingPath.substr(1).replace(/\//g, '.') + '.' + field;
        }
        else {
            fieldPath = field;
        }
        return fieldPath.split('.');
    }
    /**
     * 回车进入下一个单元格
     */
    enterNextCell() {
        const index = this.updateIndex(this.rowIndex, this.columnIndex);
        if (!index.columnIndex && !index.rowIndex) {
            const len = this.bindingList.toJSON().length;
            // 如果存在添加数据的API
            this.appendRow.emit();
            if (this.appendRow.observers && this.appendRow.observers.length) {
                this.interVal = setInterval(() => {
                    if (this.bindingList.toJSON().length - 1 === len) {
                        this.setEditable(this.bindingList.toJSON().length - 1, 0);
                        this.rowIndex = this.bindingList.toJSON().length - 1;
                        this.columnIndex = 0;
                        clearInterval(this.interVal);
                    }
                }, 0);
                return;
            }
        }
        this.setEditable(index.rowIndex, index.columnIndex);
        this.rowIndex = index.rowIndex;
        this.columnIndex = index.columnIndex;
    }
    /* 获取真正的列对象 */
    getColumns(columns) {
        // 判断是否存在固定列
        const hasLocked = columns.some((ele) => {
            return ele.frozen;
        });
        if (hasLocked) {
            const lockedColumns = columns.filter((ele) => {
                return ele.frozen;
            });
            const notLockedColumns = columns.filter((ele) => {
                return !ele.frozen;
            });
            return [...lockedColumns, ...notLockedColumns];
        }
        return columns;
    }
    /*
     * 渲染指定行为选中行：将指定行的key添加到选中行集合中
     */
    renderSelectionRow(key, selectedKeys) {
        if (!key || key === '') {
            return;
        }
        // TODO:使用策略模式重构
        if (this.IsMultipleSelectionMode) {
            const index = selectedKeys.indexOf(key);
            if (index >= 0) {
                return;
            }
            selectedKeys.push(key);
        }
        else {
            if (selectedKeys.length === 1 && selectedKeys[0] === key) {
                return;
            }
            selectedKeys.splice(0, selectedKeys.length);
            selectedKeys.push(key);
        }
        this.selectionDir.selectedKeysChange.emit(selectedKeys); // 手动触发selectedKeysChange事件
    }
    /*
     * 获取Grid上的当前行内码
     * @param dataItem 行数据
     */
    getSelectedIdFromGrid(dataItem) {
        const primaryKey = this.bindingList.primaryKey;
        return dataItem[primaryKey];
    }
    /*
     * 设置BindingList的当前行
     * @param id 当前行内码
     */
    setSelectionIdToBindingData(id) {
        this.bindingList.setCurrentId(id, true);
    }
    /*
    *列表整体是否可编辑
     */
    isEditable() {
        if (this.editable === undefined) {
            if (!this.viewModel.stateMachine) {
                // 状态机不存在的时候
                return false;
            }
            // 状态机存在的时候
            return this.viewModel.stateMachine['editable'];
        }
        // 自定义赋值
        return this.editable;
    }
    /*  */
    isDataChanged() {
        let hasUnsavedData = false;
        const entityArray = this.viewModel.frameContext.repository.entityCollection.toArray();
        for (const entity of entityArray) {
            if (entity.changes.length > 0) {
                hasUnsavedData = true;
                break;
            }
        }
        return hasUnsavedData;
    }
}
KendoGridBindingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farrisBindingPath]'
            },] }
];
/** @nocollapse */
KendoGridBindingDirective.ctorParameters = () => [
    { type: BindingData },
    { type: UIState, decorators: [{ type: Optional }] },
    { type: FrameEventBus, decorators: [{ type: Optional }] },
    { type: ViewModel, decorators: [{ type: Optional }] },
    { type: GridComponent },
    { type: SelectionDirective },
    { type: DialogService },
    { type: DateTimeHelperService },
    { type: FarrisKendoGridFormatService },
    { type: RuntimeStateService },
    { type: NgZone }
];
KendoGridBindingDirective.propDecorators = {
    editable: [{ type: Input, args: ['farrisEditable',] }],
    form: [{ type: Input, args: ['farrisForm',] }],
    groupField: [{ type: Input, args: ['groupField',] }],
    groupAggrFields: [{ type: Input, args: ['groupAggrFields',] }],
    farrisBindingGridOption: [{ type: Input }],
    rowClassName: [{ type: Input }],
    appendRow: [{ type: Output, args: ['append-row',] }],
    sortChangeEvent: [{ type: Output }],
    rowClass: [{ type: Output }],
    selectedRowChange: [{ type: Output }],
    selectedCheckboxChange: [{ type: Output }],
    aggrColumns: [{ type: ContentChildren, args: [GridColumnAggregateDirective,] }],
    onPageChange: [{ type: HostListener, args: ['pageChange', ['$event'],] }],
    selectedKeysChangeHandler: [{ type: HostListener, args: ['selectedKeysChange', ['$event'],] }],
    selectionChangeHandler: [{ type: HostListener, args: ['selectionChange', ['$event'],] }],
    cellClickHandler: [{ type: HostListener, args: ['cellClick', ['$event'],] }],
    cellCloseHandler: [{ type: HostListener, args: ['cellClose', ['$event'],] }],
    enterCell: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2VuZG9fZ3JpZF9iaW5kaW5nLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMva2VuZG8tYmluZGluZy8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2tlbmRvX2dyaWRfYmluZGluZy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFBK0MsS0FBSyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQ3JGLFlBQVksRUFBRSxNQUFNLEVBQWMsZUFBZSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQ3JFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxFQUFFLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQ3hDLE9BQU8sRUFDTCxhQUFhLEVBQUUsb0JBQW9CLEVBQ25DLGtCQUFrQixHQUduQixNQUFNLDhCQUE4QixDQUFDO0FBRXRDLE9BQU8sRUFDTCxXQUFXLEVBQXVCLFVBQVUsRUFDNUMsYUFBYSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUN4QyxNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVyRDs7Ozs7O0dBTUc7QUFLSCxNQUFNLE9BQU8seUJBQTBCLFNBQVEsb0JBQW9CO0lBbUtqRTs7O09BR0c7SUFDSCxZQUNTLFdB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RSxDQUFDLFFBQVEsQ0FBQztxQ0FjN0MsWUFBWSxTQUFDLGlCQUFpQixFQUFFLENBQUMsUUFBUSxDQUFDOytCQW1CMUMsWUFBWSxTQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQzsrQkF5RnBDLFlBQVksU0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUM7d0JBMENwQyxZQUFZLFNBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMsIElucHV0LCBIb3N0TGlzdGVuZXIsIE9wdGlvbmFsLFxyXG4gIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBFbGVtZW50UmVmLCBDb250ZW50Q2hpbGRyZW4sIFF1ZXJ5TGlzdCwgTmdab25lLCBBZnRlclZpZXdJbml0XHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IG9mLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHtcclxuICBHcmlkQ29tcG9uZW50LCBEYXRhQmluZGluZ0RpcmVjdGl2ZSxcclxuICBTZWxlY3Rpb25EaXJlY3RpdmUsXHJcbiAgQ2VsbENsaWNrRXZlbnQsXHJcbiAgRGF0YVN0YXRlQ2hhbmdlRXZlbnQsIEdyaWREYXRhUmVzdWx0LCBQYWdlQ2hhbmdlRXZlbnQsIFNvcnRTZXR0aW5ncyxcclxufSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1ncmlkJztcclxuaW1wb3J0IHsgcHJvY2VzcywgR3JvdXBEZXNjcmlwdG9yLCBBZ2dyZWdhdGVEZXNjcmlwdG9yLCBTdGF0ZSwgRmlsdGVyRGVzY3JpcHRvciwgU29ydERlc2NyaXB0b3IgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZGF0YS1xdWVyeSc7XHJcbmltcG9ydCB7XHJcbiAgQmluZGluZ0RhdGEsIEJpbmRpbmdMaXN0LCBDaGFuZ2UsIENoYW5nZVR5cGUsXHJcbiAgRnJhbWVFdmVudEJ1cywgVUlTdGF0ZSwgRm9ybSwgVmlld01vZGVsXHJcbn0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBEaWFsb2dTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1kaWFsb2cnO1xyXG5pbXBvcnQgeyBSdW50aW1lU3RhdGVTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5pbXBvcnQgeyBEYXRlVGltZUhlbHBlclNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbi9kYXRlJztcclxuaW1wb3J0IHsgRmFycmlzS2VuZG9HcmlkRm9ybWF0U2VydmljZSB9IGZyb20gJy4uL2Zvcm1hdC9pbmRleCc7XHJcbmltcG9ydCB7IEdyaWRDb2x1bW5BZ2dyZWdhdGVEaXJlY3RpdmUgfSBmcm9tICcuL2dyaWQtc3VtbWFyeS5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBNdWx0aVNlbGVjdEdyaWRVdGlsaXR5IH0gZnJvbSAnLi4vdXRpbC9tdWx0aV9zZWxlY3RfZ3JpZF91dGlsaXR5JztcclxuaW1wb3J0IHsgU2VsZWN0ZWRSb3dDb250ZXh0IH0gZnJvbSAnLi4vZW50aXR5L2luZGV4JztcclxuXHJcbi8qXHJcbiAqIEtlbmRvIEdyaWQg5pWw5o2u57uR5a6a5oyH5LukXHJcbiAqXHJcbiAqIFRPRE86XHJcbiAqIDHjgIHmlbTkvZPliLflrZjlnKjmgKfog73pl67popjvvJtcclxuICogMuOAgemAieS4reWSjOW9k+WJjeihjOayoeacieWMuuWIhuW8gO+8m1xyXG4gKi9cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2ZhcnJpc0JpbmRpbmdQYXRoXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEtlbmRvR3JpZEJpbmRpbmdEaXJlY3RpdmUgZXh0ZW5kcyBEYXRhQmluZGluZ0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xyXG5cclxuICAvKipcclxuICAgKiDmmK/lkKblhYHorrjnvJbovpFcclxuICAgKiDpu5jorqTlj6/nvJbovpEgIOWboOS4uuacieaJuemHj+e8lui+keWIl+ihqFxyXG4gICAqL1xyXG4gIEBJbnB1dCgnZmFycmlzRWRpdGFibGUnKVxyXG4gIHB1YmxpYyBlZGl0YWJsZTogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICog57yW6L6R5pe257uR5a6a55qE6KGo5Y2VXHJcbiAgICovXHJcbiAgQElucHV0KCdmYXJyaXNGb3JtJylcclxuICBwdWJsaWMgZm9ybTogRm9ybTtcclxuXHJcbiAgLyoqXHJcbiAgICog5YiG57uE5YiXXHJcbiAgICovXHJcbiAgQElucHV0KCdncm91cEZpZWxkJylcclxuICBwdWJsaWMgZ3JvdXBGaWVsZDogc3RyaW5nO1xyXG5cclxuICBASW5wdXQoJ2dyb3VwQWdnckZpZWxkcycpXHJcbiAgcHVibGljIGdyb3VwQWdnckZpZWxkczogc3RyaW5nW107XHJcblxyXG4gIC8qIOe7keWummdyaWQgb3B0aW9uICovXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgZmFycmlzQmluZGluZ0dyaWRPcHRpb246IGFueTtcclxuXHJcbiAgLyog5YW85a65cm93Q2xhc3Mg6L+Y5rKh5Yig6ZmkICovXHJcbiAgQElucHV0KClcclxuICByb3dDbGFzc05hbWU6IGFueTtcclxuICAvKiDooYzmoLflvI/kuovku7YgKi9cclxuICAvLyBASW5wdXQoKVxyXG4gIC8vIHJvd0NsYXNzTmFtZTogKGNvbnRleHQ6IGFueSkgPT4gYW55O1xyXG5cclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tb3V0cHV0LXJlbmFtZVxyXG4gIEBPdXRwdXQoJ2FwcGVuZC1yb3cnKSBhcHBlbmRSb3cgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgLyog57uR5a6a5o6S5bqP5LqL5Lu2ICovXHJcbiAgQE91dHB1dCgpIHNvcnRDaGFuZ2VFdmVudDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgLyog6KGM5qC35byP5LqL5Lu2ICovXHJcbiAgQE91dHB1dCgpXHJcbiAgcm93Q2xhc3M6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG5cclxuICBnZXQgZ3JpZE9wdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLmdyaWRbJ2dyaWRPcHRpb24nXTtcclxuICB9XHJcbiAgZ2V0IGxlbigpIHtcclxuICAgIHJldHVybiB0aGlzLmdyaWQuY29sdW1ucy5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBkYXRhSXRlbTogYW55O1xyXG5cclxuICAvKiBrZXlkb3du57uR5a6a5LqL5Lu25a+56LGhICovXHJcbiAgZ3JpZEVsZW1lbnQ6IGFueTtcclxuICBncmlkS2V5ZG93bkV2ZW50OiBhbnk7XHJcblxyXG4gIC8qIGNlbGxjbGlja+S6i+S7tuWvueixoSAqL1xyXG4gIGdyaWRDZWxsQ2xpY2tFdmVudDogYW55O1xyXG5cclxuICAvKiBjZWxsQ2xvc2Xkuovku7blr7nosaEgKi9cclxuICBncmlkQ2VsbENsb3NlRXZlbnQ6IGFueTtcclxuXHJcblxyXG4gIGNlbGxDbGlja0V2ZW50OiBDZWxsQ2xpY2tFdmVudDtcclxuXHJcbiAgaGlkZGVuQ29sTGVuID0gMDtcclxuICAvKipcclxuICAgKiBUT0RPOiDku47lrp7kvZPojrflj5blhbbpu5jorqTlgLxcclxuICAgKiDlvZPliY3ooYzntKLlvJXlgLzvvIzpu5jorqTnrKzkuIDkuKpcclxuICAgKi9cclxuICByb3dJbmRleCA9IDA7XHJcbiAgY29sdW1uSW5kZXggPSAwO1xyXG4gIHNlbmRlcjogYW55O1xyXG4gIGludGVyVmFsOiBhbnk7XHJcbiAgZGF0YUlkOiBhbnk7XHJcbiAgY3VycmVudFNraXAgPSAwO1xyXG4gIHByaXZhdGUgY3VycmVudFJvd0lkOiBzdHJpbmc7XHJcblxyXG4gIGNlbGxDbGlja1BhcmFtOiBDZWxsQ2xpY2tFdmVudDtcclxuICAvKipcclxuICAgKiDmmK/lkKblkK/nlKjlpJrpgInvvIzpu5jorqTmnKrlkK/nlKhcclxuICAgKi9cclxuICBwcml2YXRlIGlzTXVsdGlwbGVTZWxlY3Rpb25Nb2RlID0gZmFsc2U7XHJcbiAgcHVibGljIGdldCBJc011bHRpcGxlU2VsZWN0aW9uTW9kZSgpIHtcclxuICAgIGlmICghdGhpcy5ncmlkKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmlzTXVsdGlwbGVTZWxlY3Rpb25Nb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmdyaWQuc2VsZWN0YWJsZSkgeyAvLyDkvJjlhYjlsJ3or5Xku450aGlzLmdyaWQuc2VsZWN0YWJsZeiOt+WPllxyXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLXN0cmluZy1saXRlcmFsXHJcbiAgICAgIGlmICh0aGlzLmdyaWQuc2VsZWN0YWJsZVsnbW9kZSddID09PSAnbXVsdGlwbGUnKSB7XHJcbiAgICAgICAgdGhpcy5pc011bHRpcGxlU2VsZWN0aW9uTW9kZSA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5pc011bHRpcGxlU2VsZWN0aW9uTW9kZSA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAodGhpcy5ncmlkLnNlbGVjdGFibGVTZXR0aW5ncyAmJiB0aGlzLmdyaWQuc2VsZWN0YWJsZVNldHRpbmdzLm1vZGUgPT09ICdtdWx0aXBsZScpIHtcclxuICAgICAgICB0aGlzLmlzTXVsdGlwbGVTZWxlY3Rpb25Nb2RlID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmlzTXVsdGlwbGVTZWxlY3Rpb25Nb2RlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5LiK5LiA5Liq6YCJ5Lit6KGM77yM6buY6K6k5LiN5a2Y5ZyoXHJcbiAgICovXHJcbiAgcHVibGljIGxhc3RSb3dJbmRleCA9IC0xO1xyXG5cclxuICAvKipcclxuICAgKiDpgInkuK3ooYzliIfmjaLkuovku7ZcclxuICAgKi9cclxuICBAT3V0cHV0KCkgc2VsZWN0ZWRSb3dDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gIC8qKlxyXG4gICAqIGNoZWNrYm946YCJ5oup5LqL5Lu2XHJcbiAgICovXHJcbiAgQE91dHB1dCgpIHNlbGVjdGVkQ2hlY2tib3hDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gIC8qKlxyXG4gICAqIOe7keWumuWIl+ihqChHcmlk5a+55bqU5pWw5o2u5rqQKVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0IGJpbmRpbmdMaXN0KCk6IEJpbmRpbmdMaXN0IHtcclxuICAgIC8vIOagueWunuS9k1xyXG4gICAgaWYgKHRoaXMudmlld01vZGVsLmJpbmRpbmdQYXRoID09PSAnLycgfHwgIXRoaXMudmlld01vZGVsLmJpbmRpbmdQYXRoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmJpbmRpbmdEYXRhLmxpc3Q7XHJcbiAgICB9XHJcbiAgICAvLyDlrZDlrp7kvZNcclxuICAgIGxldCBiaW5kaW5nUGF0aCA9IHRoaXMudmlld01vZGVsLmJpbmRpbmdQYXRoLnN1YnN0cigxKTtcclxuICAgIGJpbmRpbmdQYXRoID0gYmluZGluZ1BhdGhbMF0udG9Mb3dlckNhc2UoKSArIGJpbmRpbmdQYXRoLnN1YnN0cmluZygxLCBiaW5kaW5nUGF0aC5sZW5ndGgpO1xyXG4gICAgY29uc3QgcGF0aHMgPSBiaW5kaW5nUGF0aC5zcGxpdCgnLycpO1xyXG5cclxuICAgIGNvbnN0IGZpbHRlcmVkUGF0aHMgPSBwYXRocy5maWx0ZXIoKHBhcnQ6IHN0cmluZykgPT4ge1xyXG4gICAgICByZXR1cm4gcGFydCAhPT0gJyc7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aGlzLmJpbmRpbmdEYXRhLmdldFZhbHVlKGZpbHRlcmVkUGF0aHMpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5bliIbpobXkv6Hmga9cclxuICAgKi9cclxuICBwcml2YXRlIGdldFBhZ2luZ0luZm8oKSB7XHJcbiAgICBjb25zdCBiaW5kaW5nUGF0aCA9IHRoaXMudmlld01vZGVsLmJpbmRpbmdQYXRoO1xyXG4gICAgY29uc3QgYmluZGluZ0RhdGEgPSB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YTtcclxuICAgIGxldCBwYWdpbmdJbmZvID0gYmluZGluZ0RhdGEucGFnaW5nSW5mbztcclxuICAgIGlmIChiaW5kaW5nUGF0aCA9PT0gJy8nKSB7XHJcbiAgICAgIHJldHVybiBwYWdpbmdJbmZvO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgYmluZGluZ1BhdGhzID0gYmluZGluZ1BhdGguc3Vic3RyKDEpLnNwbGl0KCcvJykuZmlsdGVyKGl0ZW0gPT4gISFpdGVtICYmIGl0ZW0ubGVuZ3RoID4gMCkubWFwKGl0ZW0gPT4ge1xyXG4gICAgICAgIHJldHVybiBpdGVtLnN1YnN0cmluZygwLCBpdGVtLmxlbmd0aCAtIDEpO1xyXG4gICAgICB9KTtcclxuICAgICAgYmluZGluZ1BhdGhzLmZvckVhY2gocGF0aCA9PiB7XHJcbiAgICAgICAgcGFnaW5nSW5mbyA9IHBhZ2luZ0luZm8gJiYgcGFnaW5nSW5mb1twYXRoXSB8fCB7fTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBwYWdpbmdJbmZvO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQENvbnRlbnRDaGlsZHJlbihHcmlkQ29sdW1uQWdncmVnYXRlRGlyZWN0aXZlKSBwcml2YXRlIGFnZ3JDb2x1bW5zOiBRdWVyeUxpc3Q8R3JpZENvbHVtbkFnZ3JlZ2F0ZURpcmVjdGl2ZT47XHJcbiAgcHJpdmF0ZSBiaW5kaW5nQ2hhbmdlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqIEBwYXJhbSAgZ3JpZCDlrr/kuLtHcmlkXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgYmluZGluZ0RhdGE6IEJpbmRpbmdEYXRhLFxyXG4gICAgQE9wdGlvbmFsKCkgcHVibGljIHVpU3RhdGU6IFVJU3RhdGUsXHJcbiAgICBAT3B0aW9uYWwoKSBwdWJsaWMgZXZlbnRCdXM6IEZyYW1lRXZlbnRCdXMsXHJcbiAgICBAT3B0aW9uYWwoKSBwdWJsaWMgdmlld01vZGVsOiBWaWV3TW9kZWwsXHJcbiAgICBwdWJsaWMgZ3JpZDogR3JpZENvbXBvbmVudCxcclxuICAgIHB1YmxpYyBzZWxlY3Rpb25EaXI6IFNlbGVjdGlvbkRpcmVjdGl2ZSxcclxuICAgIHB1YmxpYyBkaWFsb2dTZXI6IERpYWxvZ1NlcnZpY2UsXHJcbiAgICBwcml2YXRlIGRhdGVTZXJ2aWNlOiBEYXRlVGltZUhlbHBlclNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGtlbmRvZ3JpZEZvcm1hdFNlcjogRmFycmlzS2VuZG9HcmlkRm9ybWF0U2VydmljZSxcclxuICAgIHByaXZhdGUgcnRzOiBSdW50aW1lU3RhdGVTZXJ2aWNlLFxyXG4gICAgcHVibGljIG5nWm9uZTogTmdab25lXHJcbiAgKSB7XHJcbiAgICBzdXBlcihncmlkKTtcclxuXHJcbiAgICB0aGlzLnNlbGVjdGlvbkRpci5zZWxlY3RlZEtleXMgPSBbXTtcclxuICAgIHRoaXMudmlld01vZGVsLnVpU3RhdGUuc2V0UHJvcGVydHlWYWx1ZSgnaWRzJywgdGhpcy5zZWxlY3Rpb25EaXIuc2VsZWN0ZWRLZXlzKTtcclxuICAgIGNvbnN0IGFwcENvbnRleHQgPSB0aGlzLnZpZXdNb2RlbC5mcmFtZUNvbnRleHQuZ2V0Rm9ybUFwcENvbnRleHQoKTtcclxuICAgIGlmIChhcHBDb250ZXh0ICYmIGFwcENvbnRleHQuaGFzT3duUHJvcGVydHkoJ21lc3NhZ2VQaXBlJykpIHtcclxuICAgICAgYXBwQ29udGV4dC5tZXNzYWdlUGlwZS5zdWJzY3JpYmUoKG1lc3NhZ2U6IGFueSkgPT4ge1xyXG4gICAgICAgIHRoaXMuZ3JpZC5jbG9zZUNlbGwoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmjIfku6TliJ3lp4vljJblkI5cclxuICAgKi9cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHN1cGVyLm5nT25Jbml0KCk7XHJcblxyXG4gICAgLy8g5Yid5aeL5YyWc3RhdGXvvIzliIbnu4Tkvb/nlKjjgIJcclxuICAgIHRoaXMuaW5pdERhdGFTdGF0ZSgpO1xyXG5cclxuICAgIHRoaXMucmVmcmVzaFZpZXcoKTtcclxuXHJcbiAgICAvLyDmlbDmja7lj5jljJZcclxuICAgIHRoaXMuYmluZGluZ0NoYW5nZVN1YnNjcmlwdGlvbiA9IHRoaXMuYmluZGluZ0RhdGEuY2hhbmdlcy5zdWJzY3JpYmUoKGNoYW5nZTogQ2hhbmdlKSA9PiB7XHJcbiAgICAgIHRoaXMucmVmcmVzaFZpZXcoY2hhbmdlKTtcclxuXHJcbiAgICAgIGlmIChjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5Mb2FkKSB7XHJcbiAgICAgICAgLy8gbG9hZOaXtu+8jOWcqOWkmumAieaooeW8j+S4i++8jOmcgOa4heepuumAieS4rembhuWQiFxyXG4gICAgICAgIGlmICh0aGlzLmlzTXVsdGlwbGVTZWxlY3Rpb25Nb2RlKSB7XHJcbiAgICAgICAgICBjb25zdCBpc01hdGNoID0gdGhpcy5jaGVja0lmQ2hhbmdlTWF0Y2hCaW5kaW5nUGF0aChjaGFuZ2UpO1xyXG4gICAgICAgICAgaWYgKGlzTWF0Y2gpIHtcclxuICAgICAgICAgICAgLy8g5riF56m65aSa6YCJ6ZuG5ZCIXHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uRGlyLnNlbGVjdGVkS2V5cyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdNb2RlbC51aVN0YXRlLnNldFByb3BlcnR5VmFsdWUoJ2lkcycsIHRoaXMuc2VsZWN0aW9uRGlyLnNlbGVjdGVkS2V5cyk7XHJcbiAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgICAgICAvLyDmuLLmn5PliJ3lp4vpgInkuK3ooYxcclxuICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvd1NlbGVjdGVkQ29udGV4dDogU2VsZWN0ZWRSb3dDb250ZXh0ID0gbmV3IFNlbGVjdGVkUm93Q29udGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNQYWdlYWJsZSA9IE11bHRpU2VsZWN0R3JpZFV0aWxpdHkuY2hlY2tJZkVuYWJsZVBhZ2luZyh0aGlzLmdyaWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzUGFnZWFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5yb3dJbmRleCA9IHRoaXMuZ3JpZC5za2lwO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5yb3dJbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByb3dTZWxlY3RlZENvbnRleHQuY3VycmVudFJvd0luZGV4ID0gdGhpcy5yb3dJbmRleDtcclxuICAgICAgICAgICAgICAgIHJvd1NlbGVjdGVkQ29udGV4dC5sYXN0Um93SW5kZXggPSB0aGlzLmxhc3RSb3dJbmRleDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlU2VsZWN0ZWRSb3dDaGFuZ2Uocm93U2VsZWN0ZWRDb250ZXh0KTtcclxuICAgICAgICAgICAgICB9LCAzMDApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFRPRE86IOS9v+eUqOetlueVpeaooeW8j+mHjeaehFxyXG4gICAgICAvLyBiaW5kaW5nRGF0YSDlkIzmraUgU2VsZWN0ZWRLZXlzXHJcbiAgICAgIGlmIChjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5SZW1vdmUpIHtcclxuICAgICAgICB0aGlzLnN5bmNEZWxldGVkS2V5cyhjaGFuZ2UudmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGlzTWF0Y2ggPSB0aGlzLmNoZWNrSWZDaGFuZ2VNYXRjaEJpbmRpbmdQYXRoKGNoYW5nZSk7XHJcbiAgICAgIGlmIChpc01hdGNoKSB7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVTZWxlY3RlZEtleUNoYW5nZSh0aGlzLmJpbmRpbmdMaXN0LmN1cnJlbnRJZCk7XHJcbiAgICAgIH1cclxuICAgICAgLy8g5riy5p+T5b2T5YmN6KGMXHJcbiAgICAgIGlmIChpc01hdGNoICYmIHRoaXMuY2hlY2tDdXJyZW50Um93SWRFeGlzdHMoKSAmJiBjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5TZWxlY3Rpb25DaGFuZ2VkICYmICF0aGlzLmRhdGFJZCkge1xyXG4gICAgICAgIHRoaXMucmVuZGVyQ3VycmVudFJvdyh0aGlzLmJpbmRpbmdMaXN0LmN1cnJlbnRJZCk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBtYXgtbGluZS1sZW5ndGhcclxuICAgICAgLy8gRklYTUU66ZyA6KaB5pyJ6YeN572u6aG156CB55qE5pe25py6XHJcbiAgICAgIC8qaWYgKChjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5TZWxlY3Rpb25DaGFuZ2VkIHx8IGNoYW5nZS50eXBlID09PSBDaGFuZ2VUeXBlLkdsb2JhbFNlbGVjdGlvbkNoYW5nZWQpICYmIHRoaXMuY3VycmVudFJvd0lkICE9PSB0aGlzLmJpbmRpbmdMaXN0LmN1cnJlbnRJZCkge1xyXG4gICAgICAgICAgdGhpcy5yZXNldFBhZ2VJbmZvKCk7XHJcbiAgICAgIH0qL1xyXG4gICAgICAvLyDop6blj5Hlj5jmm7Tmo4DmtYtcclxuICAgICAgaWYgKGNoYW5nZS50eXBlID09PSBDaGFuZ2VUeXBlLkxvYWQgfHwgY2hhbmdlLnR5cGUgPT09IENoYW5nZVR5cGUuU2VsZWN0aW9uQ2hhbmdlZFxyXG4gICAgICAgIHx8IGNoYW5nZS50eXBlID09PSBDaGFuZ2VUeXBlLkFwcGVuZCB8fCBjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5SZW1vdmUpIHtcclxuXHJcbiAgICAgICAgLy8g6Kem5Y+R5Y+Y5pu05qOA5rWLXHJcbiAgICAgICAgaWYgKHRoaXMuZ3JpZCAmJiB0aGlzLmdyaWRbJ2NoYW5nZURldGVjdG9yUmVmJ10gJiYgdGhpcy5ncmlkWydjaGFuZ2VEZXRlY3RvclJlZiddWydkZXRlY3RDaGFuZ2VzJ10pIHtcclxuICAgICAgICAgIHRoaXMuZ3JpZFsnY2hhbmdlRGV0ZWN0b3JSZWYnXVsnZGV0ZWN0Q2hhbmdlcyddKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKHRoaXMuZWRpdGFibGUgPT09IHRydWUgJiYgdGhpcy5mb3JtID09PSBudWxsKSB7XHJcbiAgICAgIHRocm93IEVycm9yKCflkK/nlKjnvJbovpHml7bvvIzlv4XpobvmjIflrppmb3JtJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXRoaXMuZ3JpZCB8fCAhdGhpcy5mYXJyaXNCaW5kaW5nR3JpZE9wdGlvbiB8fCAhdGhpcy5mYXJyaXNCaW5kaW5nR3JpZE9wdGlvblsnZmllbGRzJ10pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGdyaWRDb2x1bW5zID0gdGhpcy5mYXJyaXNCaW5kaW5nR3JpZE9wdGlvblsnZmllbGRzJ107XHJcbiAgICBjb25zdCBncmlkT3B0aW9uID0gdGhpcy5mYXJyaXNCaW5kaW5nR3JpZE9wdGlvbjtcclxuXHJcbiAgICAvLyDliKTmlq3liJfkuK3mmK/lkKblrZjlnKjlm7rlrprliJdcclxuICAgIGdyaWRPcHRpb24ubG9ja2FibGUgPSAoY29sdW1uczogYW55W10pID0+IHtcclxuICAgICAgcmV0dXJuIGNvbHVtbnMuc29tZShlbGUgPT4ge1xyXG4gICAgICAgIHJldHVybiBlbGUuZnJvemVuO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5yb3dDbGFzcy5lbWl0KHRoaXMuZ3JpZCk7XHJcbiAgICAvLyDmt7vliqDliJflsZ7mgKfmiJbogIXmlrnms5VcclxuICAgIGdyaWRDb2x1bW5zLmZvckVhY2goKGVsZW1lbnQ6IGFueSkgPT4ge1xyXG4gICAgICAvLyDoh6rlrprkuYnotoXpk75cclxuICAgICAgaWYgKGVsZW1lbnQubGlua2VkTGFiZWxFbmFibGVkICYmICFlbGVtZW50LmxpbmtFdmVudCkge1xyXG4gICAgICAgIGVsZW1lbnQubGlua0V2ZW50ID0gKCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIOiLpeayoeacieiHquWumuS5ieagvOW8j+WMluaWueazlSAg5q+P5Liq5YiX5a+56LGh57uR5a6a5qC85byP5YyW5pa55rOVXHJcbiAgICAgIGlmICghZWxlbWVudC5nZXRDb2x1bW5Gb3JtYXQpIHtcclxuICAgICAgICBlbGVtZW50LmdldENvbHVtbkZvcm1hdCA9IChkYXRhSXRlbTogYW55LCBjb2x1bW46IGFueSkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMua2VuZG9ncmlkRm9ybWF0U2VyLmdldENvbHVtbkZvcm1hdChkYXRhSXRlbSwgY29sdW1uKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDlpoLmnpzmsqHmnInoh6rlrprkuYnnsbvmoLflvI8g5q+P5Liq5YiX57uR5a6aIOagvOW8j+WMluaWueazlVxyXG4gICAgICBpZiAoIWVsZW1lbnQuZ2V0Q2xhc3NOYW1lKSB7XHJcbiAgICAgICAgZWxlbWVudC5nZXRDbGFzc05hbWUgPSAoZGF0YUl0ZW06IGFueSwgY29sdW1uOiBhbnkpID0+ICcnO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDoh6rlrprkuYnluK7liqnliY3lkI7kuovku7ZcclxuICAgICAgaWYgKGVsZW1lbnQuZWRpdG9yICYmIGVsZW1lbnQuZWRpdG9yLnR5cGUgPT09ICdMb29rdXBFZGl0Jykge1xyXG5cclxuICAgICAgICAvLyDluK7liqnliY3kuovku7ZcclxuICAgICAgICBpZiAoIWVsZW1lbnQuZGljdFBpY2tpbmcpIHtcclxuICAgICAgICAgIGVsZW1lbnQuZGljdFBpY2tpbmcgPSAocGFyYW06IGFueSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDluK7liqnlkI7kuovku7ZcclxuICAgICAgICBpZiAoIWVsZW1lbnQuZGljdFBpY2tlZCkge1xyXG4gICAgICAgICAgZWxlbWVudC5kaWN0UGlja2VkID0gKHBhcmFtOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgLy8g6YeN5paw6L+b5YWl57yW6L6RXHJcbiAgICAgICAgICAgIHRoaXMuY2VsbENsaWNrSGFuZGxlcih0aGlzLmNlbGxDbGlja1BhcmFtKTtcclxuICAgICAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgLy8g57uR5a6aZ3JpZE9wdGlvblxyXG4gICAgdGhpcy5iaW5kaW5nR3JpZE9wdGlvbigpO1xyXG5cclxuICAgIC8vIOWkmumAieaooeW8j+S4i++8jOiuvue9ruWIneWni+mAieS4reihjFxyXG4gICAgaWYgKHRoaXMuSXNNdWx0aXBsZVNlbGVjdGlvbk1vZGUpIHtcclxuICAgICAgLy8gVE9ETzog56e76ZmkIHNldFRpbWVvdXRcclxuICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHJvd1NlbGVjdGVkQ29udGV4dDogU2VsZWN0ZWRSb3dDb250ZXh0ID0gbmV3IFNlbGVjdGVkUm93Q29udGV4dCgpO1xyXG4gICAgICAgICAgcm93U2VsZWN0ZWRDb250ZXh0LmN1cnJlbnRSb3dJbmRleCA9IHNlbGYucm93SW5kZXg7XHJcbiAgICAgICAgICByb3dTZWxlY3RlZENvbnRleHQubGFzdFJvd0luZGV4ID0gc2VsZi5sYXN0Um93SW5kZXg7XHJcbiAgICAgICAgICBzZWxmLmhhbmRsZVNlbGVjdGVkUm93Q2hhbmdlKHJvd1NlbGVjdGVkQ29udGV4dCk7XHJcbiAgICAgICAgfSwgMzAwKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgLy8gdGhpcy5ncmlkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5rLWdyaWQnKTtcclxuICAgIC8vIC8vIOe7keWummdyaWQga2V5ZG93buWvueixoeeahOaWueazlVxyXG4gICAgLy8gdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgLy8gICB0aGlzLmdyaWRLZXlkb3duRXZlbnQgPSB0aGlzLmVudGVyQ2VsbC5iaW5kKHRoaXMpO1xyXG4gICAgLy8gICB0aGlzLmdyaWRDZWxsQ2xpY2tFdmVudCA9IHRoaXMuY2VsbENsaWNrSGFuZGxlci5iaW5kKHRoaXMpO1xyXG4gICAgLy8gICB0aGlzLmdyaWRDZWxsQ2xvc2VFdmVudCA9IHRoaXMuY2VsbENsb3NlSGFuZGxlci5iaW5kKHRoaXMpO1xyXG4gICAgLy8gICB0aGlzLmdyaWRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmdyaWRLZXlkb3duRXZlbnQpO1xyXG4gICAgLy8gICB0aGlzLmdyaWRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NlbGxDbGljaycsIHRoaXMuZ3JpZENlbGxDbGlja0V2ZW50KTtcclxuICAgIC8vICAgdGhpcy5ncmlkRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjZWxsQ2xvc2UnLCB0aGlzLmdyaWRDZWxsQ2xvc2VFdmVudCk7XHJcbiAgICAvLyB9KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5qOA5rWLY2hhbmdl55qE6Lev5b6E5ZKMQmluZGluZ1BhdGjmmK/lkKbljLnphY1cclxuICAgKi9cclxuICBwcml2YXRlIGNoZWNrSWZDaGFuZ2VNYXRjaEJpbmRpbmdQYXRoKGNoYW5nZTogQ2hhbmdlKTogYm9vbGVhbiB7XHJcbiAgICBsZXQgaXNNYXRjaCA9IGZhbHNlO1xyXG4gICAgaWYgKCFjaGFuZ2UgfHwgIWNoYW5nZS5wYXRoKSB7XHJcbiAgICAgIHJldHVybiBpc01hdGNoO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNoYW5nZVBhdGhBcnJheSA9IGNoYW5nZS5wYXRoO1xyXG4gICAgaWYgKCFjaGFuZ2VQYXRoQXJyYXkpIHtcclxuICAgICAgcmV0dXJuIGlzTWF0Y2g7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCEodGhpcy5iaW5kaW5nRGF0YSkgJiYgISh0aGlzLmJpbmRpbmdEYXRhLmJpbmRpbmdQYXRoKSkge1xyXG4gICAgICByZXR1cm4gaXNNYXRjaDtcclxuICAgIH1cclxuICAgIGNvbnN0IGJpbmdkaW5nUGF0aEFycmF5ID0gdGhpcy5iaW5kaW5nRGF0YS5iaW5kaW5nUGF0aC5zcGxpdCgnLycpO1xyXG4gICAgaWYgKGJpbmdkaW5nUGF0aEFycmF5Lmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgIHJldHVybiBpc01hdGNoO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjaGFuZ2VQYXRoQXJyYXkubGVuZ3RoID09PSAwKSB7IC8vIOS4u+ihqFxyXG4gICAgICBpZiAodGhpcy5iaW5kaW5nRGF0YS5iaW5kaW5nUGF0aCA9PT0gJy8nKSB7XHJcbiAgICAgICAgaXNNYXRjaCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoY2hhbmdlLnBhdGgubGVuZ3RoID09PSAxKSB7Ly8g5Li75LuO6KGoXHJcbiAgICAgIGlmIChiaW5nZGluZ1BhdGhBcnJheS5sZW5ndGggPT09IDIgJiYgYmluZ2RpbmdQYXRoQXJyYXlbMV0gPT09IGNoYW5nZS5wYXRoWzBdKSB7XHJcbiAgICAgICAgaXNNYXRjaCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoY2hhbmdlLnBhdGgubGVuZ3RoID09PSAyKSB7IC8vIOS4u+S7juS7juihqFxyXG4gICAgICBpZiAoYmluZ2RpbmdQYXRoQXJyYXkubGVuZ3RoID09PSAzICYmIGJpbmdkaW5nUGF0aEFycmF5WzFdID09PSBjaGFuZ2UucGF0aFswXSAmJiBiaW5nZGluZ1BhdGhBcnJheVsyXSA9PT0gY2hhbmdlLnBhdGhbMV0pIHtcclxuICAgICAgICBpc01hdGNoID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpc01hdGNoO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5aSE55CG6YCJ5Lit5Li76ZSu5Y+Y5pu0XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBoYW5kbGVTZWxlY3RlZEtleUNoYW5nZShjdXJyZW50SWQ6IGFueSkge1xyXG4gICAgY29uc3Qgc2VsZWN0ZWRLZXlzID0gdGhpcy5zZWxlY3Rpb25EaXIuc2VsZWN0ZWRLZXlzO1xyXG4gICAgaWYgKCFjdXJyZW50SWQpIHtcclxuXHJcbiAgICAgIC8vIOWmguaenOW9k+WJjeihjOaXtm51bGzvvIzkvYZzZWxlY3RlZEtleXPph4zmnInlgLzvvIzmuIXnqbrlubblj5HpgIHkuIDmrKHooYzliIfmjaJcclxuICAgICAgaWYgKHNlbGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY29uc3QgcmVtb3ZlZFNlbGVjdGVkS2V5cyA9IHNlbGVjdGVkS2V5cy5zcGxpY2UoMCwgc2VsZWN0ZWRLZXlzLmxlbmd0aCk7XHJcbiAgICAgICAgaWYgKHJlbW92ZWRTZWxlY3RlZEtleXMuaW5kZXhPZihudWxsKSA9PT0gLTEpIHtcclxuICAgICAgICAgIHRoaXMuZW1pdFNlbGVjdGVkUm93Q2hhbmdlKHsgY3VycmVudFJvd0lkOiBudWxsIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgb2xkQ3VycmVudFJvd0lkID0gbnVsbDtcclxuICAgIGlmICh0aGlzLklzTXVsdGlwbGVTZWxlY3Rpb25Nb2RlKSB7XHJcbiAgICAgIG9sZEN1cnJlbnRSb3dJZCA9IHRoaXMuY3VycmVudFJvd0lkO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb2xkQ3VycmVudFJvd0lkID0gdGhpcy5zZWxlY3Rpb25EaXIuc2VsZWN0ZWRLZXlzLmxlbmd0aCA9PT0gMFxyXG4gICAgICAgID8gbnVsbCA6IHRoaXMuc2VsZWN0aW9uRGlyLnNlbGVjdGVkS2V5c1swXTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUT0RPOmlmICh0aGlzLmN1cnJlbnRSb3dJZCAhPT0gY3VycmVudElkKSB7XHJcbiAgICBpZiAob2xkQ3VycmVudFJvd0lkICE9PSBjdXJyZW50SWQpIHtcclxuICAgICAgY29uc3Qgc2VsZWN0ZWRSb3dDb250ZXh0OiBhbnkgPSB7fTtcclxuICAgICAgc2VsZWN0ZWRSb3dDb250ZXh0LmN1cnJlbnRSb3dJZCA9IGN1cnJlbnRJZDtcclxuICAgICAgdGhpcy5jdXJyZW50Um93SWQgPSBjdXJyZW50SWQ7XHJcbiAgICAgIHRoaXMuZW1pdFNlbGVjdGVkUm93Q2hhbmdlKHNlbGVjdGVkUm93Q29udGV4dCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlj5HlsITpgInkuK3ooYzliIfmjaLkuovku7ZcclxuICAgKiBAZGVzY3JpcHRpb24g57uf5LiA5Y2V6YCJ5qih5byP5ZKM5aSa6YCJ5qih5byP5LiL55qE6KGM5YiH5o2i5LqL5Lu2XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBlbWl0U2VsZWN0ZWRSb3dDaGFuZ2Uoc2VsZWN0ZWRSb3dDb250ZXh0OiBhbnkpIHtcclxuICAgIGlmICghdGhpcy5Jc011bHRpcGxlU2VsZWN0aW9uTW9kZSkgeyAvLyDlkJHlkI7lhbzlrrlcclxuICAgICAgY29uc3QgY3VycmVudElkID0gc2VsZWN0ZWRSb3dDb250ZXh0LmN1cnJlbnRSb3dJZDtcclxuICAgICAgdGhpcy5zZWxlY3Rpb25EaXIuc2VsZWN0ZWRLZXlzID0gW2N1cnJlbnRJZF07XHJcbiAgICAgIHRoaXMuc2VsZWN0aW9uRGlyLnNlbGVjdGVkS2V5c0NoYW5nZS5lbWl0KHRoaXMuc2VsZWN0aW9uRGlyLnNlbGVjdGVkS2V5cyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zZWxlY3RlZFJvd0NoYW5nZS5lbWl0KHNlbGVjdGVkUm93Q29udGV4dCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrQ3VycmVudFJvd0lkRXhpc3RzKCk6IGJvb2xlYW4ge1xyXG4gICAgbGV0IGlzRXhpc3QgPSBmYWxzZTtcclxuXHJcbiAgICBpZiAodGhpcy5iaW5kaW5nTGlzdCAmJiB0aGlzLmJpbmRpbmdMaXN0LmN1cnJlbnRJZCAmJiB0aGlzLmJpbmRpbmdMaXN0LmN1cnJlbnRJZC5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGlzRXhpc3QgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpc0V4aXN0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5ZCM5q2l5bey5Yig6Zmk6ZSu5Yiw6YCJ5Lit6ZuG5ZCIXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzeW5jRGVsZXRlZEtleXMoZGVsZXRlZFZhbHVlQ29sbGVjdGlvbjogYW55W10pIHtcclxuICAgIGlmICghZGVsZXRlZFZhbHVlQ29sbGVjdGlvbikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlZFZhbHVlQ29sbGVjdGlvbi5mb3JFYWNoKChpZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5zZWxlY3Rpb25EaXIuc2VsZWN0ZWRLZXlzLmluZGV4T2YoaWQpO1xyXG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0aW9uRGlyLnNlbGVjdGVkS2V5cy5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cclxuICAgICAgICAvLyBzZWxlY3RlZEtleXPooqvmuIXnqbrnmoTml7blgJnvvIzop6blj5HkuIDmrKHooYzlj5jmm7RcclxuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25EaXIuc2VsZWN0ZWRLZXlzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgdGhpcy5lbWl0U2VsZWN0ZWRSb3dDaGFuZ2UoeyBjdXJyZW50Um93SWQ6IG51bGwgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVuZGVyQ3VycmVudFJvdyhjdXJyZW50SWQ6IHN0cmluZykge1xyXG4gICAgaWYgKCFjdXJyZW50SWQgfHwgY3VycmVudElkID09PSAnJykgey8vIOS4jeWtmOWcqOW9k+WJjeihjFxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVE9ETzrkvb/nlKjnrZbnlaXmqKHlvI/ph43mnoRcclxuICAgIGlmICh0aGlzLklzTXVsdGlwbGVTZWxlY3Rpb25Nb2RlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnJlbmRlclNlbGVjdGlvblJvdyh0aGlzLmJpbmRpbmdMaXN0LmN1cnJlbnRJZCwgdGhpcy5zZWxlY3Rpb25EaXIuc2VsZWN0ZWRLZXlzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaMh+S7pOi+k+WFpeWPmOabtOWkhOeQhlxyXG4gICAqL1xyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgIHN1cGVyLm5nT25DaGFuZ2VzKGNoYW5nZXMpO1xyXG4gICAgdGhpcy5yZWZyZXNoVmlldygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5oyH5Luk6ZSA5q+B77yM5rOo6ZSA6K6i6ZiFXHJcbiAgICovXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICBpZiAodGhpcy5iaW5kaW5nQ2hhbmdlU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgIHRoaXMuYmluZGluZ0NoYW5nZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZWZyZXNoVmlldyhjaGFuZ2U/OiBDaGFuZ2UpIHtcclxuICAgIC8vIHRoaXMuYmluZERhdGEoKTtcclxuICAgIHRoaXMucmVmcmVzaERhdGEoY2hhbmdlKTtcclxuXHJcbiAgICAvLyDliLfmlrDpobXohJrlkIjorqHkv6Hmga/jgILlrqLmiLfnq6/lkIjorqHvvIzmmoLml7bmlL7ov5nph4zvvIzmnI3liqHnq6/lkIjorqHml7bmnIDlpb3ku47ov5nph4znp7votbDjgIJieSBqdXN0aW5cclxuICAgIHRoaXMucmVmcmVzaFN1bW1hcnkoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOe7keWummRhdGHliLDlrr/kuLtncmlk5LiKXHJcbiAgICogQGRlcHJlY2F0ZWRcclxuICAgKi9cclxuICBwcml2YXRlIGJpbmREYXRhKCkge1xyXG4gICAgLypjb25zdCBkYXRhID0gdGhpcy5iaW5kaW5nTGlzdC50b0pTT04oKTtcclxuICAgIGxldCBza2lwID0gMDtcclxuICAgIGlmICh0aGlzLmJpbmRpbmdMaXN0LnBhZ2VJbmRleCA+IDApIHtcclxuICAgICAgc2tpcCA9ICh0aGlzLmJpbmRpbmdMaXN0LnBhZ2VJbmRleCAtIDEpICogdGhpcy5iaW5kaW5nTGlzdC5wYWdlU2l6ZTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlUGFnZXIodGhpcy5iaW5kaW5nTGlzdC5wYWdlU2l6ZSwgc2tpcCk7XHJcbiAgICBjb25zdCBwcm9jZXNzZWQgPSBwcm9jZXNzKGRhdGEsIE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc3RhdGUsIHsgc2tpcDogMCB9KSk7XHJcbiAgICBwcm9jZXNzZWQudG90YWwgPSB0aGlzLmJpbmRpbmdMaXN0LnRvdGFsO1xyXG4gICAgdGhpcy5ncmlkLmRhdGEgPSBwcm9jZXNzZWQ7Ki9cclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVmcmVzaERhdGEoY2hhbmdlPzogQ2hhbmdlKSB7XHJcbiAgICBsZXQgc2tpcCA9IDA7XHJcbiAgICBjb25zdCB7IHBhZ2VJbmRleCA9IDEsIHBhZ2VTaXplID0gMCB9ID0gdGhpcy5nZXRQYWdpbmdJbmZvKCkgfHwge307XHJcbiAgICBpZiAocGFnZUluZGV4ID4gMCkge1xyXG4gICAgICBza2lwID0gKHBhZ2VJbmRleCAtIDEpICogcGFnZVNpemU7XHJcbiAgICB9XHJcbiAgICB0aGlzLnVwZGF0ZVBhZ2VyKHBhZ2VTaXplLCBza2lwKTtcclxuICAgIHRoaXMuZW5kQ2VsbEVkaXQoY2hhbmdlKTtcclxuICAgIHRoaXMuZGF0YSA9IHRoaXMuYmluZGluZ0xpc3QudG9KU09OKHtpZ25vcmVNdWx0aUxhbmdJbnB1dDogdHJ1ZX0pO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDpgIDlh7rnvJbovpHnirbmgIFcclxuICAgKiBAcGFyYW0gY2hhbmdlIOWPmOabtFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZW5kQ2VsbEVkaXQoY2hhbmdlPzogQ2hhbmdlKSB7XHJcbiAgICBjb25zdCBpc0VkaXRpbmcgPSB0aGlzLmdyaWQuaXNFZGl0aW5nO1xyXG4gICAgaWYgKGNoYW5nZSAmJiBjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5Mb2FkICYmIGlzRWRpdGluZykge1xyXG4gICAgICB0aGlzLmdyaWQuY2FuY2VsQ2VsbCgpO1xyXG4gICAgfVxyXG4gIH1cclxuICBwcml2YXRlIHJlZnJlc2hTdW1tYXJ5KCkge1xyXG4gICAgaWYgKHRoaXMuYWdnckNvbHVtbnMpIHtcclxuICAgICAgdGhpcy5hZ2dyQ29sdW1ucy5mb3JFYWNoKGFnZ3JDb2wgPT4ge1xyXG4gICAgICAgIGlmIChhZ2dyQ29sLmFnZ3JlZ2F0ZSkge1xyXG4gICAgICAgICAgYWdnckNvbC5yZWNhbGN1bGF0ZVN1bW1hcnkodGhpcy5iaW5kaW5nTGlzdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3BhZ2VDaGFuZ2UnLCBbJyRldmVudCddKVxyXG4gIHB1YmxpYyBvblBhZ2VDaGFuZ2UoZXZlbnQ6IFBhZ2VDaGFuZ2VFdmVudCkge1xyXG4gICAgY29uc3QgeyBza2lwID0gMCwgdGFrZSA9IDAgfSA9IGV2ZW50IHx8IHt9O1xyXG4gICAgLy8gdGhpcy5iaW5kaW5nTGlzdC5zZXRQYWdpbmF0aW9uSW5mbyhza2lwLCB0YWtlKTtcclxuICAgIHRoaXMuYmluZGluZ0RhdGEuc2V0UGFnaW5nSW5mbyhza2lwLCB0YWtlLCB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nUGF0aCk7XHJcbiAgICAvLyDnp7vpmaTpgInkuK3ooYzmoLflvI9cclxuICAgIE11bHRpU2VsZWN0R3JpZFV0aWxpdHkucmVtb3ZlUm93U2VsZWN0ZWRTdHlsZSh0aGlzLmdyaWQsIHRoaXMucm93SW5kZXgpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDph43nva5ncmlk5YiG6aG15L+h5oGvXHJcbiAgICovXHJcbiAgcHJpdmF0ZSByZXNldFBhZ2VJbmZvKCkge1xyXG4gICAgY29uc3QgeyBwYWdlU2l6ZSA9IDAgfSA9IHRoaXMuZ2V0UGFnaW5nSW5mbygpIHx8IHt9O1xyXG4gICAgdGhpcy5iaW5kaW5nRGF0YS5zZXRQYWdpbmdJbmZvKDAsIHBhZ2VTaXplLCB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nUGF0aCk7XHJcbiAgfVxyXG4gIHByaXZhdGUgaW5pdERhdGFTdGF0ZSgpIHtcclxuICAgIC8vIGNvbnN0IGdyb3VwczogR3JvdXBEZXNjcmlwdG9yW10gPSBbXTtcclxuICAgIC8vIGlmICh0aGlzLmdyb3VwRmllbGQpIHtcclxuICAgIC8vICAgZ3JvdXBzLnB1c2goe2ZpZWxkOiB0aGlzLmdyb3VwRmllbGQsIGFnZ3JlZ2F0ZXM6IHRoaXMuYWdncmVnYXRlc3x8W119KTtcclxuICAgIC8vICAgdGhpcy5ncmlkLmdyb3VwID0gZ3JvdXBzO1xyXG4gICAgLy8gfVxyXG4gICAgLy8gdGhpcy5zdGF0ZSA9IE9iamVjdC5hc3NpZ24odGhpcy5zdGF0ZSwge2dyb3VwOiBncm91cHN9KTtcclxuXHJcbiAgICBjb25zdCBhZ2dyZWdhdGVzRGVzOiBBZ2dyZWdhdGVEZXNjcmlwdG9yW10gPSBbXTtcclxuICAgIGlmICh0aGlzLmdyb3VwQWdnckZpZWxkcykge1xyXG4gICAgICBmb3IgKGNvbnN0IGdyb3VwQWdnckZpZWxkIG9mIHRoaXMuZ3JvdXBBZ2dyRmllbGRzKSB7XHJcbiAgICAgICAgYWdncmVnYXRlc0Rlcy5wdXNoKHsgZmllbGQ6IGdyb3VwQWdnckZpZWxkLCBhZ2dyZWdhdGU6ICdzdW0nIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZ3JvdXA6IEdyb3VwRGVzY3JpcHRvcltdID0gW107XHJcbiAgICBpZiAodGhpcy5ncm91cEZpZWxkKSB7XHJcbiAgICAgIGdyb3VwLnB1c2goeyBmaWVsZDogdGhpcy5ncm91cEZpZWxkLCBhZ2dyZWdhdGVzOiBhZ2dyZWdhdGVzRGVzIH0pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5ncm91cCA9IGdyb3VwO1xyXG5cclxuICB9XHJcblxyXG4gIC8qXHJcbiAgICogQG92ZXJyaWRlXHJcbiAgICogQHBhcmFtIHN0YXRlIFN0YXRlXHJcbiAgICovXHJcbiAgb25TdGF0ZUNoYW5nZShzdGF0ZTogRGF0YVN0YXRlQ2hhbmdlRXZlbnQpIHtcclxuICAgIC8vIOivtOaYju+8mnBhZ2Vy5qC55o2uc2tpcOiuoeeul+W9k+WJjemhteeggeOAgmtlbmRvIGdyaWTlhoXpg6jkvJrlnKhmaWx0ZXIgc3RhdGXlj5jljJbml7bmiopza2lw5Y+Y5Li6MO+8iOmHjee9ruWIsOesrOS4gOmhte+8ieOAglxyXG4gICAgLy8g5Zug5q2k6ZyA6KaB6YeN5YaZb25TdGF0ZUNoYW5nZeaWueazle+8jOS/ruato3NraXBcclxuICAgIGlmIChzdGF0ZS5za2lwICE9PSB0aGlzLmN1cnJlbnRTa2lwKSB7XHJcbiAgICAgIHN0YXRlLnNraXAgPSB0aGlzLmN1cnJlbnRTa2lwO1xyXG4gICAgfVxyXG4gICAgLy8g5L2/55Soa2VuZG/pu5jorqTnmoTlpITnkIZzdGF0ZeeahOmAu+i+kVxyXG4gICAgdGhpcy5hcHBseVN0YXRlKHN0YXRlKTtcclxuXHJcbiAgICB0aGlzLnJlYmluZCgpO1xyXG4gIH1cclxuXHJcbiAgLy8gcHJvdGVjdGVkIGFwcGx5U3RhdGUoe3NraXAsIHRha2UsIHNvcnQsIGdyb3VwLCBmaWx0ZXJ9OiBTdGF0ZSk6IHZvaWQge1xyXG4gIC8vICAgdGhpcy5za2lwID0gc2tpcDtcclxuICAvLyAgIHRoaXMucGFnZVNpemUgPSB0YWtlO1xyXG4gIC8vICAgdGhpcy5zb3J0ID0gc29ydDtcclxuICAvLyAgIHRoaXMuZ3JvdXAgPSBncm91cDtcclxuICAvLyAgIHRoaXMuZmlsdGVyID0gZmlsdGVyO1xyXG4gIC8vIH1cclxuXHJcbiAgLypcclxuICAgKiBAb3ZlcnJpZGUg5pyN5Yqh5Zmo56uv5YiG6aG15Y+W5pWw44CCcHJvY2Vzc+S9v+eUqOeahHN0YXRl5Litc2tpcOW6lOS4ujDvvIzlkKbliJnkuI3mmL7npLrmlbDmja5cclxuICAgKiBAcGFyYW0gc3RhdGUgU3RhdGVcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgcHJvY2VzcyhzdGF0ZTogU3RhdGUpOiBHcmlkRGF0YVJlc3VsdCB7XHJcbiAgICAvLyBpZiAodGhpcy5lZGl0aW5nKSB7XHJcbiAgICAvLyAgIHN0YXRlLnNvcnQgPSBudWxsO1xyXG4gICAgLy8gfSBlbHNlIHtcclxuICAgIC8vICAgc3RhdGUuc29ydCA9IHRoaXMub3JpZ2luYWxTb3J0O1xyXG4gICAgLy8gfVxyXG4gICAgc3RhdGUuc2tpcCA9IDA7XHJcbiAgICBjb25zdCB7IHBhZ2VTaXplID0gMCwgdG90YWw6IHRvdGFsQ291bnQgPSAwIH0gPSB0aGlzLmdldFBhZ2luZ0luZm8oKSB8fCB7fTtcclxuICAgIC8vIGZpeO+8muS4jeWQr+eUqOWIhumhteaXtu+8jHRha2U9MOWvvOiHtHByb2Nlc3PkuI3ov5Tlm57mlbDmja5cclxuICAgIGlmIChzdGF0ZS50YWtlID09PSAwKSB7XHJcbiAgICAgIHN0YXRlLnRha2UgPSB0aGlzLmJpbmRpbmdMaXN0Lmxlbmd0aDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHN0YXRlLnRha2UgPSBwYWdlU2l6ZTtcclxuICAgIH1cclxuICAgIC8vIOe8lui+keaooeW8j+eahOWIpOaWreS+neaNruS4unBhZ2VTaXpl5bCP5LqO57uR5a6a5pWw5o2u55qE5pWw6YeP5LiU5ZCv55So5YiG6aG1XHJcbiAgICBjb25zdCBpc0VkaXRNb2RlID0gc3RhdGUudGFrZSA8IHRoaXMuYmluZGluZ0xpc3QubGVuZ3RoO1xyXG4gICAgaWYgKGlzRWRpdE1vZGUpIHtcclxuICAgICAgc3RhdGUudGFrZSA9IHRoaXMuYmluZGluZ0xpc3QubGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcHJvY2Vzc2VkID0gc3VwZXIucHJvY2VzcyhzdGF0ZSk7XHJcbiAgICAvLyBmaXg65pWw5o2u5LuO5peg5Yiw5pyJ5pe25YiG6aG15LiN5ZCv55SoXHJcbiAgICBwcm9jZXNzZWQudG90YWwgPSBNYXRoLm1heCh0b3RhbENvdW50LCB0aGlzLmJpbmRpbmdMaXN0Lmxlbmd0aCk7XHJcbiAgICAvLyDliIbpobXnvJbovpHmqKHlvI/kuIvmlbDmja7mgLvorrDlvZXmlbDkuI3og73nrYnkuo7nnJ/lrp7nmoTmlbDmja7mlbDmja7vvIzlkKbliJnliIbpobXlt6XlhbfmnaHlsLHkvJroh6rliqjlop7liqDliIbpobXpobXnrb5cclxuICAgIGlmIChpc0VkaXRNb2RlKSB7XHJcbiAgICAgIHByb2Nlc3NlZC50b3RhbCA9IHRvdGFsQ291bnQgfHwgMTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcHJvY2Vzc2VkO1xyXG4gIH1cclxuXHJcbiAgLypcclxuICAgKiDpgInkuK3ooYzkuLvplK7lj5jljJblpITnkIZcclxuICAgKiBAcGFyYW0gZXZlbnQgeyBTZWxlY3Rpb25FdmVudH0g6YCJ5Lit6KGM5Y+Y5YyW5aSE55CGXHJcbiAgICovXHJcbiAgQEhvc3RMaXN0ZW5lcignc2VsZWN0ZWRLZXlzQ2hhbmdlJywgWyckZXZlbnQnXSlcclxuICBwdWJsaWMgc2VsZWN0ZWRLZXlzQ2hhbmdlSGFuZGxlcihzZWxlY3RlZEtleXM6IHN0cmluZ1tdKSB7XHJcbiAgICBpZiAoISh0aGlzLklzTXVsdGlwbGVTZWxlY3Rpb25Nb2RlKSkgey8vIOWNlemAieaooeW8j+S4i1xyXG4gICAgICAvLyDorr7nva5CaW5kaW5nRGF0YeS4reeahOW9k+WJjeihjFxyXG4gICAgICB0aGlzLnNldFNlbGVjdGlvbklkVG9CaW5kaW5nRGF0YShzZWxlY3RlZEtleXNbc2VsZWN0ZWRLZXlzLmxlbmd0aCAtIDFdKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnZpZXdNb2RlbC51aVN0YXRlLnNldFByb3BlcnR5VmFsdWUoJ2lkcycsIHRoaXMuc2VsZWN0aW9uRGlyLnNlbGVjdGVkS2V5cyk7IC8vIOabtOaWsOmbhuWQiFxyXG4gIH1cclxuXHJcbiAgLypcclxuICAgKiDlpITnkIZHcmlk6KGM5YiH5o2i5LqL5Lu2XHJcbiAgICogQHBhcmFtIGV2ZW50IHsgU2VsZWN0aW9uRXZlbnR9IOihjOWIh+aNouS6i+S7tuWvueixoVxyXG4gICAqL1xyXG4gIEBIb3N0TGlzdGVuZXIoJ3NlbGVjdGlvbkNoYW5nZScsIFsnJGV2ZW50J10pXHJcbiAgcHVibGljIHNlbGVjdGlvbkNoYW5nZUhhbmRsZXIoZXZlbnQ6IGFueSkge1xyXG4gICAgaWYgKHRoaXMuSXNNdWx0aXBsZVNlbGVjdGlvbk1vZGUpIHtcclxuICAgICAgdGhpcy5oYW5kbGVTZWxlY3RlZENoZWNrYm94Q2hhbmdlKHRoaXMuZ3JpZC53cmFwcGVyLCBldmVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlpITnkIZjaGVja2JveOmAieS4reS6i+S7tlxyXG4gICAqL1xyXG4gIHByaXZhdGUgaGFuZGxlU2VsZWN0ZWRDaGVja2JveENoYW5nZShlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBldmVudDogYW55KSB7XHJcbiAgICBNdWx0aVNlbGVjdEdyaWRVdGlsaXR5LnJlbmRlclNlbGVjdGVkQ2hhbmdlQ2hlY2tib3goZWxlbWVudFJlZiwgZXZlbnQpO1xyXG4gICAgdGhpcy5zZWxlY3RlZENoZWNrYm94Q2hhbmdlLmVtaXQoZXZlbnQpO1xyXG4gIH1cclxuXHJcbiAgLypcclxuICAgKiDljZXlhYPmoLzngrnlh7vlpITnkIZcclxuICAgKiBAcGFyYW0gZXZlbnQgeyBDZWxsQ2xpY2tFdmVudCB9IOWNleWFg+agvOWNleWHu+S6i+S7tuWvueixoVxyXG4gICAqL1xyXG4gIEBIb3N0TGlzdGVuZXIoJ2NlbGxDbGljaycsIFsnJGV2ZW50J10pXHJcbiAgcHVibGljIGNlbGxDbGlja0hhbmRsZXIoZXZlbnQ6IENlbGxDbGlja0V2ZW50KSB7XHJcbiAgICB0aGlzLmNlbGxDbGlja1BhcmFtID0gZXZlbnQ7XHJcbiAgICB0aGlzLmNlbGxDbGlja0V2ZW50ID0gZXZlbnQ7XHJcbiAgICB0aGlzLnJvd0luZGV4ID0gZXZlbnQucm93SW5kZXg7XHJcbiAgICB0aGlzLmNvbHVtbkluZGV4ID0gZXZlbnQuY29sdW1uSW5kZXg7XHJcbiAgICB0aGlzLnNlbmRlciA9IGV2ZW50LnNlbmRlcjtcclxuXHJcbiAgICAvLyDlpJrpgInmqKHlvI/kuIvvvIzkuJTkuI3liIbnu4TnmoTmg4XlhrXkuIvvvIzmo4DmtYvooYzliIfmjaJcclxuICAgIGlmICh0aGlzLklzTXVsdGlwbGVTZWxlY3Rpb25Nb2RlICYmICF0aGlzLmdyaWRPcHRpb24uZ3JvdXBhYmxlKSB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRSb3dJbmRleCA9IGV2ZW50LnJvd0luZGV4O1xyXG4gICAgICBpZiAoY3VycmVudFJvd0luZGV4ICE9PSB0aGlzLmxhc3RSb3dJbmRleCkge1xyXG4gICAgICAgIGNvbnN0IHJvd1NlbGVjdGVkQ29udGV4dDogU2VsZWN0ZWRSb3dDb250ZXh0ID0gbmV3IFNlbGVjdGVkUm93Q29udGV4dCgpO1xyXG4gICAgICAgIHJvd1NlbGVjdGVkQ29udGV4dC5jdXJyZW50Um93SW5kZXggPSBjdXJyZW50Um93SW5kZXg7XHJcbiAgICAgICAgcm93U2VsZWN0ZWRDb250ZXh0Lmxhc3RSb3dJbmRleCA9IHRoaXMubGFzdFJvd0luZGV4O1xyXG5cclxuICAgICAgICB0aGlzLmhhbmRsZVNlbGVjdGVkUm93Q2hhbmdlKHJvd1NlbGVjdGVkQ29udGV4dCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDorr7nva7lrp7kvZPnmoTlvZPliY3ooYxcclxuICAgIHRoaXMuZGF0YUlkID0gdGhpcy5nZXRTZWxlY3RlZElkRnJvbUdyaWQoZXZlbnQuZGF0YUl0ZW0pO1xyXG4gICAgdGhpcy5zZXRTZWxlY3Rpb25JZFRvQmluZGluZ0RhdGEodGhpcy5kYXRhSWQpO1xyXG5cclxuICAgIC8vIOiLpeeKtuaAgeacuuS4jeaYr+WPr+e8lui+keeKtuaAgSDkuI3lj6/nvJbovpFcclxuICAgIGlmICghdGhpcy5pc0VkaXRhYmxlKCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLy8g5YiX5qih5p2/5LiN5a2Y5ZyoICDkuI3lj6/nvJbovpFcclxuICAgIGlmICghZXZlbnQuY29sdW1uLmVkaXRUZW1wbGF0ZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2NsaWNrJyAmJiAhZXZlbnQuaXNFZGl0ZWQpIHtcclxuXHJcblxyXG4gICAgICAvLyDlpoLmnpzlrZjlnKjmmL7pmpDnirblhrUgIOehruWumuato+ehrueahGNvbHVtbkluZGV4XHJcbiAgICAgIGNvbnN0IG9yaWdpbkNvbHVtcyA9IHRoaXMuZ2V0Q29sdW1ucyh0aGlzLmdyaWRPcHRpb24uZmllbGRzKTtcclxuICAgICAgY29uc3QgY29sdW1uczogYW55W10gPSB0aGlzLmdldENvbHVtbnMob3JpZ2luQ29sdW1zKTtcclxuICAgICAgY29uc3QgY3VycmVudENvbHVtbkluZGV4ID0gY29sdW1ucy5maW5kSW5kZXgoKGNvbDogYW55KSA9PiBjb2wuZGF0YUZpZWxkID09PSBldmVudC5jb2x1bW4uZmllbGQpO1xyXG4gICAgICBjb25zdCBoaWRkZW5Db2xMZW4gPSBjb2x1bW5zLnNsaWNlKDAsIGN1cnJlbnRDb2x1bW5JbmRleCArIDEpLmZpbHRlcihjb2wgPT4gIWNvbC52aXNpYmxlKS5sZW5ndGg7XHJcblxyXG4gICAgICAvLyDotYvlgLzlhajlsYDooYzntKLlvJUgIOWIl+e0ouW8lVxyXG4gICAgICB0aGlzLnJvd0luZGV4ID0gZXZlbnQucm93SW5kZXg7XHJcbiAgICAgIHRoaXMuY29sdW1uSW5kZXggPSBldmVudC5jb2x1bW5JbmRleCArIGhpZGRlbkNvbExlbjtcclxuICAgICAgdGhpcy5oaWRkZW5Db2xMZW4gPSBoaWRkZW5Db2xMZW47XHJcbiAgICAgIHRoaXMuc2VuZGVyID0gZXZlbnQuc2VuZGVyO1xyXG5cclxuICAgICAgdGhpcy5zZXRFZGl0YWJsZSh0aGlzLnJvd0luZGV4LCB0aGlzLmNvbHVtbkluZGV4KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWkhOeQhumAieS4reihjOWIh+aNouS6i+S7tlxyXG4gICAqL1xyXG4gIHByaXZhdGUgaGFuZGxlU2VsZWN0ZWRSb3dDaGFuZ2Uocm93U2VsZWN0ZWRDb250ZXh0OiBTZWxlY3RlZFJvd0NvbnRleHQpIHtcclxuICAgIE11bHRpU2VsZWN0R3JpZFV0aWxpdHkucmVuZGVyQ2xpY2tDaGFuZ2VkUm93KHRoaXMuZ3JpZCwgcm93U2VsZWN0ZWRDb250ZXh0KTtcclxuXHJcbiAgICB0aGlzLnJvd0luZGV4ID0gcm93U2VsZWN0ZWRDb250ZXh0LmN1cnJlbnRSb3dJbmRleDtcclxuICAgIHRoaXMubGFzdFJvd0luZGV4ID0gcm93U2VsZWN0ZWRDb250ZXh0LmN1cnJlbnRSb3dJbmRleDtcclxuICAgIC8vIOabtOaWsOW9k+WJjeihjFxyXG4gICAgY29uc3QgaWQgPSB0aGlzLmdldFByaW1hcnkodGhpcy5yb3dJbmRleCk7XHJcbiAgICB0aGlzLnNldFNlbGVjdGlvbklkVG9CaW5kaW5nRGF0YShpZCk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluaMh+WumuihjOeahOS4u+mUrlxyXG4gICAqIEBwYXJhbSByb3cg6KGM5Y+3XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRQcmltYXJ5KHJvdzogbnVtYmVyKSB7XHJcbiAgICBsZXQgZGF0YTogYW55ID0gdGhpcy5ncmlkLmRhdGE7XHJcbiAgICBpZiAoZGF0YSAmJiAhQXJyYXkuaXNBcnJheShkYXRhKSAmJiBkYXRhLmhhc093blByb3BlcnR5KCdkYXRhJykpIHtcclxuICAgICAgZGF0YSA9IGRhdGEuZGF0YTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgcGFnZUluZGV4ID0gMSwgcGFnZVNpemUgPSAwIH0gPSB0aGlzLmdldFBhZ2luZ0luZm8oKSB8fCB7fTtcclxuICAgIGNvbnN0IHNraXAgPSB0aGlzLmJpbmRpbmdMaXN0LnNraXA7XHJcbiAgICAvLyDkuI3liIbpobXmiJbogIXnrKzkuIDpobXml7blj5bkuI3pnIDopoHkv67mlLnooYzlj7dcclxuICAgIGNvbnN0IHJvd051bWJlciA9IHBhZ2VTaXplID09PSAwIHx8IHBhZ2VJbmRleCA9PT0gMSA/IHJvdyA6IHJvdyAtIHNraXA7XHJcbiAgICBpZiAoZGF0YS5sZW5ndGggPiByb3dOdW1iZXIpIHtcclxuICAgICAgcmV0dXJuIGRhdGFbcm93TnVtYmVyXVt0aGlzLmJpbmRpbmdMaXN0LnByaW1hcnlLZXldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gICAqIOWNleWFg+agvOe7k+adn+e8lui+keWkhOeQhlxyXG4gICAqIEBwYXJhbSBldmVudCDljZXlhYPmoLznu5PmnZ/nvJbovpHkuovku7blr7nosaFcclxuICAgKi9cclxuICBASG9zdExpc3RlbmVyKCdjZWxsQ2xvc2UnLCBbJyRldmVudCddKVxyXG4gIHB1YmxpYyBjZWxsQ2xvc2VIYW5kbGVyKGV2ZW50OiBhbnkpOiBhbnkge1xyXG5cclxuICAgIGlmICh0aGlzLmRpYWxvZ1Nlci5oYXNEaWFsb2dPcGVuZWQoKSkge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMucnRzKSB7XHJcbiAgICAgIC8vIOW4ruWKqee7hOS7tuaWh+acrOWPmOWMluWQjuWOu+afpeivolxyXG4gICAgICBpZiAodGhpcy5ydHMuZ2V0Rm9ybVN0YXRlKCdsb29rdXAucGVuZGluZycpKSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIOeCueWHu+W4ruWKqeehruWumuWPr+WPlua2iOaMiemSruWQjuS4jee7k+adn+W9k+WJjeWNleWFg+agvOe8lui+kVxyXG4gICAgICBpZiAoZXZlbnQub3JpZ2luYWxFdmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLnJ0cy5ldmVudFBhdGgoZXZlbnQub3JpZ2luYWxFdmVudCkuZmluZChuID0+IG4udGFnTmFtZSA9PT0gJ0ZBUlJJUy1ESUFMT0cnKSkge1xyXG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgY29uc3QgeyBmb3JtR3JvdXAsIGNvbHVtbiwgZGF0YUl0ZW0sIHJvd0luZGV4IH0gPSBldmVudDtcclxuICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLmdldENvbHVtbnModGhpcy5ncmlkT3B0aW9uLmZpZWxkcyk7XHJcbiAgICBsZXQgY3VycmVudENvbCA9IGNvbHVtbnMuZmluZCgoZWxlbWVudDogYW55KSA9PiB7XHJcbiAgICAgIHJldHVybiBlbGVtZW50LmRhdGFGaWVsZCA9PT0gY29sdW1uLmZpZWxkO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCBmb3JtQ29udHJvbFZhbHVlID0gZm9ybUdyb3VwW2N1cnJlbnRDb2wuZWRpdG9yLmJpbmRpbmcucGF0aF0udmFsdWU7XHJcbiAgICBpZiAoY3VycmVudENvbC5nZXREeW5hbWljRGF0YSkge1xyXG4gICAgICAvLyDoi6XmraTliJfmmK/liqjmgIHljZXlhYPmoLzliJdcclxuICAgICAgY3VycmVudENvbCA9IGN1cnJlbnRDb2wuZ2V0RHluYW1pY0RhdGEoZGF0YUl0ZW0sIGN1cnJlbnRDb2wpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRWYWx1ZShmb3JtQ29udHJvbFZhbHVlLCBjdXJyZW50Q29sKTtcclxuICB9XHJcblxyXG4gIC8qXHJcbiAgICAgKiDlm57ovaYgIOWIh+aNouWNleWFg+agvFxyXG4gICAgICogQHBhcmFtIGV2ZW50IOmUruebmOaMieS4i+S6i+S7tlxyXG4gICAgICovXHJcbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXHJcbiAgZW50ZXJDZWxsKGU6IGFueSkge1xyXG4gICAgLy8g5Zue6L2m6ZSuXHJcbiAgICBpZiAoIWUuc2hpZnRLZXkgJiYgZS5rZXlDb2RlID09PSAxMykge1xyXG4gICAgICAvLyB0ZXh0YXJlYSBlbnRlciDlsY/olL3mjaLooYzmk43kvZxcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBpZiAoIXRoaXMuc2VuZGVyKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIOeUseS6jmtleWRvd24g5LqL5Lu25Lya5YWI5omn6KGM77yM5omA5Lul6L+Z6YeM5YWI6KaB5omn6KGMYmx1ciDkuovku7bvvJtcclxuICAgICAgZS50YXJnZXQuYmx1cigpO1xyXG4gICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICBpZiAodGhpcy5ydHMgJiYgdGhpcy5ydHMuZ2V0Rm9ybVN0YXRlKCdsb29rdXAucGVuZGluZycpKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5lbnRlck5leHRDZWxsKCk7XHJcbiAgICAgICAgfSwgMjAxKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gICAgICog57uR5a6aZ3JpZCBvcHRpb25cclxuICAgICAqIEBwYXJhbSBkYXRhSXRlbSDooYzmlbDmja5cclxuICAgICAqL1xyXG4gIHByaXZhdGUgYmluZGluZ0dyaWRPcHRpb24oKSB7XHJcbiAgICBpZiAoIXRoaXMuZmFycmlzQmluZGluZ0dyaWRPcHRpb24pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuZ3JpZCwgJ2dyaWRPcHRpb24nLCB7IHZhbHVlOiB0aGlzLmZhcnJpc0JpbmRpbmdHcmlkT3B0aW9uIH0pO1xyXG4gIH1cclxuXHJcbiAgLypcclxuICAgKiDmm7TmlrBHcmlk5YiG6aG154q25oCBXHJcbiAgICogQHBhcmFtIHRha2VcclxuICAgKiBAcGFyYW0gc2tpcFxyXG4gICAqL1xyXG4gIHByaXZhdGUgdXBkYXRlUGFnZXIodGFrZTogbnVtYmVyLCBza2lwOiBudW1iZXIpIHtcclxuICAgIGlmICh0YWtlID09PSAwKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudFNraXAgPSAwO1xyXG4gICAgICB0aGlzLnBhZ2VTaXplID0gMDtcclxuICAgICAgdGhpcy5za2lwID0gMDtcclxuICAgICAgdGhpcy5ncmlkLnBhZ2VhYmxlID0gZmFsc2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmN1cnJlbnRTa2lwID0gc2tpcDtcclxuICAgICAgdGhpcy5za2lwID0gc2tpcDtcclxuICAgICAgdGhpcy5wYWdlU2l6ZSA9IHRha2U7XHJcbiAgICAgIHRoaXMuZ3JpZC5wYWdlYWJsZSA9IHtcclxuICAgICAgICBidXR0b25Db3VudDogMTAsXHJcbiAgICAgICAgaW5mbzogdHJ1ZSxcclxuICAgICAgICB0eXBlOiAnbnVtZXJpYycsXHJcbiAgICAgICAgcGFnZVNpemVzOiBmYWxzZSxcclxuICAgICAgICBwcmV2aW91c05leHQ6IHRydWVcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qXHJcbiAgICog6K6+572u5Y2V5YWD5qC85Y+v57yW6L6R5oCnXHJcbiAgICogQHBhcmFtIGRhdGFJdGVtIOihjOaVsOaNrlxyXG4gICAqIEBwYXJhbSBjb2x1bW4g5YiX5a+56LGhXHJcbiAgICogQHBhcmFtIHJvd0luZGV4IOihjOe0ouW8lVxyXG4gICAqIEBwYXJhbSBjb2x1bW5JbmRleCDliJfntKLlvJVcclxuICAgKiBAcGFyYW0gc2VuZGVyIGdyaWTlrp7kvotcclxuICAgKi9cclxuICBzZXRFZGl0YWJsZShyb3dOdW1iZXI6IG51bWJlciwgY29sdW1uTnVtYmVyOiBudW1iZXIpIHtcclxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdyaWQuZGF0YVsnZGF0YSddO1xyXG4gICAgY29uc3QgeyBwYWdlSW5kZXggPSAxLCBwYWdlU2l6ZSA9IDAgfSA9IHRoaXMuZ2V0UGFnaW5nSW5mbygpIHx8IHt9O1xyXG4gICAgY29uc3Qgc2tpcCA9IHRoaXMuYmluZGluZ0xpc3Quc2tpcDtcclxuICAgIC8vIOS4jeWIhumhteaIluiAheesrOS4gOmhteaXtuWPluS4jemcgOimgeS/ruaUueihjOWPt1xyXG4gICAgY29uc3QgZGF0YVJvd051bWJlciA9IHBhZ2VTaXplID09PSAwIHx8IHBhZ2VJbmRleCA9PT0gMSA/IHJvd051bWJlciA6IHJvd051bWJlciAtIHNraXA7XHJcbiAgICBsZXQgaXRlbSA9IGRhdGFbZGF0YVJvd051bWJlcl07XHJcbiAgICBpZiAodGhpcy5ncmlkT3B0aW9uLmdyb3VwYWJsZSkge1xyXG4gICAgICBpdGVtID0gdGhpcy5nZXRHcm91cEl0ZW0oZGF0YSwgZGF0YVJvd051bWJlcik7XHJcbiAgICB9XHJcbiAgICBjb25zdCBvcmlnaW5Db2x1bXMgPSB0aGlzLmdldENvbHVtbnModGhpcy5ncmlkT3B0aW9uLmZpZWxkcyk7XHJcbiAgICBjb25zdCBjb2x1bW5zID0gdGhpcy5nZXRDb2x1bW5zKG9yaWdpbkNvbHVtcyk7XHJcbiAgICAvKiDlgYflpoLliJfnmoTpobrluo/mlLnlj5gg5q+U5aaC5a2Y5Zyo5Zu65a6a5YiXICDpgqPkuYjlupTor6Xojrflj5bnnJ/mraPnmoTliJflr7nosaEgKi9cclxuICAgIC8vIGxldCBjb2wgPSBjb2x1bW5zW2NvbHVtbk51bWJlcl07XHJcblxyXG4gICAgbGV0IHRlbXBJbmRleCA9IGNvbHVtbk51bWJlcjtcclxuICAgIC8vIOW9k+WJjeWIl+e0ouW8leS4jeS4ujBcclxuICAgIGlmICh0aGlzLmdyaWRbJ2dyaWRPcHRpb24nXS5zaG93TGluZU51bWJlcikge1xyXG4gICAgICB0ZW1wSW5kZXggPSB0ZW1wSW5kZXggLSAxO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuZ3JpZC5zZWxlY3RhYmxlICYmIHRoaXMuZ3JpZC5zZWxlY3RhYmxlWydtb2RlJ10gPT09ICdtdWx0aXBsZScpIHtcclxuICAgICAgdGVtcEluZGV4ID0gdGVtcEluZGV4IC0gMTtcclxuICAgIH1cclxuICAgIGNvbnN0IGNvbCA9IGNvbHVtbnNbdGVtcEluZGV4XTtcclxuXHJcbiAgICBjb25zdCBwYXJhbXMgPSB7XHJcbiAgICAgIGRhdGFJdGVtOiBpdGVtLFxyXG4gICAgICBjb2x1bW46IGNvbCxcclxuICAgICAgcm93SW5kZXg6IHJvd051bWJlcixcclxuICAgICAgY29sdW1uSW5kZXg6IHRlbXBJbmRleCxcclxuICAgIH07XHJcblxyXG4gICAgLy8g5o6n5Yi25Y2V5YWD5qC855qE5Y+v57yW6L6R5oCnXHJcbiAgICBpZiAoY29sICYmICFjb2wuZWRpdGFibGUpIHtcclxuICAgICAgY29sLmVkaXRhYmxlID0gKHBhcmFtOiBvYmplY3QpID0+IHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoY29sICYmIHRoaXMubm90UmVhZE9ubHkoY29sLCBwYXJhbXMpKSB7XHJcbiAgICAgIC8vIOiuvue9ruW9k+WJjeihjFxyXG4gICAgICB0aGlzLmRhdGFJZCA9IHRoaXMuZ2V0U2VsZWN0ZWRJZEZyb21HcmlkKGl0ZW0pO1xyXG4gICAgICB0aGlzLnNldFNlbGVjdGlvbklkVG9CaW5kaW5nRGF0YSh0aGlzLmRhdGFJZCk7XHJcbiAgICAgIC8vIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRWYWx1ZShpdGVtLCBjb2wuZGF0YUZpZWxkKTtcclxuICAgICAgLy8gdGhpcy5zZXRWYWx1ZSh2YWx1ZSwgY29sKTtcclxuICAgICAgdGhpcy5zZW5kZXIuZWRpdENlbGwocm93TnVtYmVyLCBjb2x1bW5OdW1iZXIgLSB0aGlzLmhpZGRlbkNvbExlbiwgdGhpcy52aWV3TW9kZWwuZm9ybSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuICAvKlxyXG4gIOiOt+WPluabtOaWsCByb3dJbmRleCBjb2x1bW5JbmRleFxyXG4gICAqL1xyXG4gIHVwZGF0ZUluZGV4KHJvd051bWJlcjogbnVtYmVyLCBjb2x1bW5JbmRleDogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBuZXdDb2x1bW5JbmRleCA9IChjb2x1bW5JbmRleCArIDEpICUgdGhpcy5sZW47XHJcbiAgICBpZiAoIW5ld0NvbHVtbkluZGV4KSB7XHJcbiAgICAgIGNvbnN0IGRhdGFMZW4gPSB0aGlzLmJpbmRpbmdMaXN0LnRvSlNPTigpLmxlbmd0aDtcclxuICAgICAgY29uc3QgbmV3Um93SW5kZXggPSAocm93TnVtYmVyICsgMSkgJSBkYXRhTGVuO1xyXG4gICAgICByZXR1cm4geyByb3dJbmRleDogbmV3Um93SW5kZXgsIGNvbHVtbkluZGV4OiBuZXdDb2x1bW5JbmRleCB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcm93SW5kZXg6IHJvd051bWJlcixcclxuICAgICAgY29sdW1uSW5kZXg6IG5ld0NvbHVtbkluZGV4XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyog5piv5ZCm5Y+q6K+7ICovXHJcbiAgbm90UmVhZE9ubHkoY29sdW1uOiBhbnksIHBhcmFtOiBhbnkpIHtcclxuICAgIGlmICghY29sdW1uKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb2x1bW4uZWRpdGFibGUocGFyYW0pICYmICFjb2x1bW4uZWRpdG9yLnJlYWRvbmx5O1xyXG4gIH1cclxuXHJcbiAgLypcclxuICAgICAqIOe7meWIl+ihqOi1i+WAvCDmiJbnu5lmb3JtY29udHJvbOi1i+WAvFxyXG4gICAgICAqL1xyXG4gIHNldFZhbHVlKHZhbHVlOiBhbnksIGNvbHVtbjogYW55KSB7XHJcbiAgICBjb25zdCBjdXJyZW50Q29sdW1uVHlwZSA9IGNvbHVtbi5kYXRhVHlwZTtcclxuICAgIC8vIOWQjOaXtuWIpOaWrWdyaWRPcHRpb27nmoTliJflr7nosaFcclxuICAgIGNvbnN0IGJpbmRpbmdEYXRhID0gdGhpcy52aWV3TW9kZWwuYmluZGluZ0RhdGE7XHJcbiAgICBjb25zdCBmaWVsZFBhdGhzID0gdGhpcy5nZXRGaWVsZFBhdGhzKGJpbmRpbmdEYXRhLmJpbmRpbmdQYXRoLCBjb2x1bW4uZGF0YUZpZWxkKTtcclxuICAgIC8vIOWtmOWcqOihjOe8lui+keWZqFxyXG4gICAgaWYgKGN1cnJlbnRDb2x1bW5UeXBlID09PSAnZGF0ZScpIHtcclxuICAgICAgbGV0IGRhdGVTdHIgPSB0aGlzLmRhdGVTZXJ2aWNlLmZvcm1hdFRvKHZhbHVlLCAneXl5eS1NTS1kZCBISDptbTpzcycpO1xyXG4gICAgICBpZiAoIWRhdGVTdHIpIHtcclxuICAgICAgICBkYXRlU3RyID0gJyc7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy52aWV3TW9kZWwuYmluZGluZ0RhdGEuc2V0VmFsdWUoZmllbGRQYXRocywgZGF0ZVN0ciwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YS5zZXRWYWx1ZShmaWVsZFBhdGhzLCB2YWx1ZSwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiDliIbnu4Tml7Yg6I635Y+W54K55Ye76KGM5pWw5o2uICovXHJcbiAgZ2V0R3JvdXBJdGVtKGRhdGE6IGFueVtdLCByb3dOdW1iZXI6IG51bWJlcikge1xyXG4gICAgbGV0IGluZGV4ID0gcm93TnVtYmVyO1xyXG4gICAgZm9yIChjb25zdCBpIGluIGRhdGEpIHtcclxuICAgICAgaWYgKGluZGV4IDwgZGF0YVtpXS5pdGVtcy5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gZGF0YVtpXS5pdGVtc1tpbmRleF07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaW5kZXggPSBpbmRleCAtIGRhdGFbaV0uaXRlbXMubGVuZ3RoO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gICAqIOiOt+WPliDljZXlhYPmoLzlgLwgIOS4u+S7juihqOaUr+aMgVxyXG4gICAqIEBwYXJhbSBkYXRhSXRlbSDooYzmlbDmja5cclxuICAgKiBAcGFyYW0gZmllbGQg5a2X5q61XHJcbiAgICovXHJcbiAgZ2V0VmFsdWUoZGF0YUl0ZW06IGFueSwgZmllbGQ6IHN0cmluZykge1xyXG4gICAgY29uc3QgaW5kZXggPSBmaWVsZC5pbmRleE9mKCcuJyk7XHJcbiAgICBpZiAoaW5kZXggPCAwKSB7XHJcbiAgICAgIHJldHVybiBkYXRhSXRlbVtmaWVsZF07XHJcbiAgICB9XHJcbiAgICBjb25zdCBmaWVsZHMgPSBmaWVsZC5zcGxpdCgnLicpO1xyXG4gICAgLy8gZmllbGTlrZfnrKbkuLLnu4TlkIhcclxuICAgIHJldHVybiBmaWVsZHMucmVkdWNlKChyZXN1bHQ6IGFueSwgbmV4dDogYW55KSA9PiB7XHJcbiAgICAgIHJldHVybiByZXN1bHRbbmV4dF07XHJcbiAgICB9LCBkYXRhSXRlbSk7XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gICog6I635Y+WIGJpbmRpbmdEYXRhIOi3r+W+hFxyXG4gICogQHBhcmFtIGJpbmRpbmdQYXRoIOW9k+WJjee7keWumueahOWtl+autei3r+W+hFxyXG4gICogQHBhcmFtIGZpZWxkTmFtZSDlrZfmrrVcclxuICAqL1xyXG4gIHByaXZhdGUgZ2V0RmllbGRQYXRocyhiaW5kaW5nUGF0aDogc3RyaW5nLCBmaWVsZDogc3RyaW5nKTogc3RyaW5nW10ge1xyXG4gICAgbGV0IGZpZWxkUGF0aCA9ICcnO1xyXG4gICAgaWYgKGJpbmRpbmdQYXRoLmxlbmd0aCA+IDEpIHtcclxuICAgICAgZmllbGRQYXRoID0gYmluZGluZ1BhdGguc3Vic3RyKDEpLnJlcGxhY2UoL1xcLy9nLCAnLicpICsgJy4nICsgZmllbGQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmaWVsZFBhdGggPSBmaWVsZDtcclxuICAgIH1cclxuICAgIHJldHVybiBmaWVsZFBhdGguc3BsaXQoJy4nKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWbnui9pui/m+WFpeS4i+S4gOS4quWNleWFg+agvFxyXG4gICAqL1xyXG4gIGVudGVyTmV4dENlbGwoKSB7XHJcbiAgICBjb25zdCBpbmRleCA9IHRoaXMudXBkYXRlSW5kZXgodGhpcy5yb3dJbmRleCwgdGhpcy5jb2x1bW5JbmRleCk7XHJcbiAgICBpZiAoIWluZGV4LmNvbHVtbkluZGV4ICYmICFpbmRleC5yb3dJbmRleCkge1xyXG4gICAgICBjb25zdCBsZW4gPSB0aGlzLmJpbmRpbmdMaXN0LnRvSlNPTigpLmxlbmd0aDtcclxuICAgICAgLy8g5aaC5p6c5a2Y5Zyo5re75Yqg5pWw5o2u55qEQVBJXHJcbiAgICAgIHRoaXMuYXBwZW5kUm93LmVtaXQoKTtcclxuICAgICAgaWYgKHRoaXMuYXBwZW5kUm93Lm9ic2VydmVycyAmJiB0aGlzLmFwcGVuZFJvdy5vYnNlcnZlcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgdGhpcy5pbnRlclZhbCA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICAgIGlmICh0aGlzLmJpbmRpbmdMaXN0LnRvSlNPTigpLmxlbmd0aCAtIDEgPT09IGxlbikge1xyXG4gICAgICAgICAgICB0aGlzLnNldEVkaXRhYmxlKHRoaXMuYmluZGluZ0xpc3QudG9KU09OKCkubGVuZ3RoIC0gMSwgMCk7XHJcbiAgICAgICAgICAgIHRoaXMucm93SW5kZXggPSB0aGlzLmJpbmRpbmdMaXN0LnRvSlNPTigpLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1uSW5kZXggPSAwO1xyXG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJWYWwpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIDApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0RWRpdGFibGUoaW5kZXgucm93SW5kZXgsIGluZGV4LmNvbHVtbkluZGV4KTtcclxuICAgIHRoaXMucm93SW5kZXggPSBpbmRleC5yb3dJbmRleDtcclxuICAgIHRoaXMuY29sdW1uSW5kZXggPSBpbmRleC5jb2x1bW5JbmRleDtcclxuICB9XHJcblxyXG4gIC8qIOiOt+WPluecn+ato+eahOWIl+WvueixoSAqL1xyXG4gIGdldENvbHVtbnMoY29sdW1uczogYW55KSB7XHJcbiAgICAvLyDliKTmlq3mmK/lkKblrZjlnKjlm7rlrprliJdcclxuICAgIGNvbnN0IGhhc0xvY2tlZCA9IGNvbHVtbnMuc29tZSgoZWxlOiBhbnkpID0+IHtcclxuICAgICAgcmV0dXJuIGVsZS5mcm96ZW47XHJcbiAgICB9KTtcclxuICAgIGlmIChoYXNMb2NrZWQpIHtcclxuICAgICAgY29uc3QgbG9ja2VkQ29sdW1ucyA9IGNvbHVtbnMuZmlsdGVyKChlbGU6IGFueSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBlbGUuZnJvemVuO1xyXG4gICAgICB9KTtcclxuICAgICAgY29uc3Qgbm90TG9ja2VkQ29sdW1ucyA9IGNvbHVtbnMuZmlsdGVyKChlbGU6IGFueSkgPT4ge1xyXG4gICAgICAgIHJldHVybiAhZWxlLmZyb3plbjtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBbLi4ubG9ja2VkQ29sdW1ucywgLi4ubm90TG9ja2VkQ29sdW1uc107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29sdW1ucztcclxuICB9XHJcblxyXG4gIC8qXHJcbiAgICog5riy5p+T5oyH5a6a6KGM5Li66YCJ5Lit6KGM77ya5bCG5oyH5a6a6KGM55qEa2V55re75Yqg5Yiw6YCJ5Lit6KGM6ZuG5ZCI5LitXHJcbiAgICovXHJcbiAgcHJpdmF0ZSByZW5kZXJTZWxlY3Rpb25Sb3coa2V5OiBzdHJpbmcsIHNlbGVjdGVkS2V5czogYW55W10pIHtcclxuICAgIGlmICgha2V5IHx8IGtleSA9PT0gJycpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRPRE865L2/55So562W55Wl5qih5byP6YeN5p6EXHJcbiAgICBpZiAodGhpcy5Jc011bHRpcGxlU2VsZWN0aW9uTW9kZSkge1xyXG4gICAgICBjb25zdCBpbmRleCA9IHNlbGVjdGVkS2V5cy5pbmRleE9mKGtleSk7XHJcbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxlY3RlZEtleXMucHVzaChrZXkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHNlbGVjdGVkS2V5cy5sZW5ndGggPT09IDEgJiYgc2VsZWN0ZWRLZXlzWzBdID09PSBrZXkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGVjdGVkS2V5cy5zcGxpY2UoMCwgc2VsZWN0ZWRLZXlzLmxlbmd0aCk7XHJcbiAgICAgIHNlbGVjdGVkS2V5cy5wdXNoKGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zZWxlY3Rpb25EaXIuc2VsZWN0ZWRLZXlzQ2hhbmdlLmVtaXQoc2VsZWN0ZWRLZXlzKTsgLy8g5omL5Yqo6Kem5Y+Rc2VsZWN0ZWRLZXlzQ2hhbmdl5LqL5Lu2XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gICAqIOiOt+WPlkdyaWTkuIrnmoTlvZPliY3ooYzlhoXnoIFcclxuICAgKiBAcGFyYW0gZGF0YUl0ZW0g6KGM5pWw5o2uXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRTZWxlY3RlZElkRnJvbUdyaWQoZGF0YUl0ZW06IGFueSkge1xyXG4gICAgY29uc3QgcHJpbWFyeUtleSA9IHRoaXMuYmluZGluZ0xpc3QucHJpbWFyeUtleTtcclxuICAgIHJldHVybiBkYXRhSXRlbVtwcmltYXJ5S2V5XTtcclxuICB9XHJcblxyXG4gIC8qXHJcbiAgICog6K6+572uQmluZGluZ0xpc3TnmoTlvZPliY3ooYxcclxuICAgKiBAcGFyYW0gaWQg5b2T5YmN6KGM5YaF56CBXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzZXRTZWxlY3Rpb25JZFRvQmluZGluZ0RhdGEoaWQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy5iaW5kaW5nTGlzdC5zZXRDdXJyZW50SWQoaWQsIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgLypcclxuICAq5YiX6KGo5pW05L2T5piv5ZCm5Y+v57yW6L6RXHJcbiAgICovXHJcbiAgaXNFZGl0YWJsZSgpIHtcclxuICAgIGlmICh0aGlzLmVkaXRhYmxlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgaWYgKCF0aGlzLnZpZXdNb2RlbC5zdGF0ZU1hY2hpbmUpIHtcclxuICAgICAgICAvLyDnirbmgIHmnLrkuI3lrZjlnKjnmoTml7blgJlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgLy8g54q25oCB5py65a2Y5Zyo55qE5pe25YCZXHJcbiAgICAgIHJldHVybiB0aGlzLnZpZXdNb2RlbC5zdGF0ZU1hY2hpbmVbJ2VkaXRhYmxlJ107XHJcbiAgICB9XHJcbiAgICAvLyDoh6rlrprkuYnotYvlgLxcclxuICAgIHJldHVybiB0aGlzLmVkaXRhYmxlO1xyXG4gIH1cclxuICAvKiAgKi9cclxuICBpc0RhdGFDaGFuZ2VkKCkge1xyXG4gICAgbGV0IGhhc1Vuc2F2ZWREYXRhID0gZmFsc2U7XHJcbiAgICBjb25zdCBlbnRpdHlBcnJheSA9IHRoaXMudmlld01vZGVsLmZyYW1lQ29udGV4dC5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24udG9BcnJheSgpO1xyXG4gICAgZm9yIChjb25zdCBlbnRpdHkgb2YgZW50aXR5QXJyYXkpIHtcclxuICAgICAgaWYgKGVudGl0eS5jaGFuZ2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBoYXNVbnNhdmVkRGF0YSA9IHRydWU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBoYXNVbnNhdmVkRGF0YTtcclxuICB9XHJcbn1cclxuIl19