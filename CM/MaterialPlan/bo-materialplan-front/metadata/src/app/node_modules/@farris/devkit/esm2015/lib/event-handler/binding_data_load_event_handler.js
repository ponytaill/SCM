import { Injectable } from "@angular/core";
import { Expression } from "../expression/index";
import { ENTITY_TEMPLATE } from "../resolver";
import { EventHandler } from "./event_handler";
export class BindingDataLoadEventHandler extends EventHandler {
    filter(event) {
        // 过滤第一次空load
        if ((!event.path || event.path.length === 0) && event.value && Array.isArray(event.value) && event.value.length === 0) {
            return null;
        }
        // 数据加载完成后需要计算当前绑定路径下的只读、显隐、必填、校验表达式
        if (this.expressionObjects && this.expressionObjects.length > 0) {
            const expressions = this.expressionObjects.filter((expressionObject) => {
                if (expressionObject.ns !== event.ns || (expressionObject.type !== Expression.ExpressionType.Readonly && expressionObject.type !== Expression.ExpressionType.Visible && expressionObject.type !== Expression.ExpressionType.Required && expressionObject.type !== Expression.ExpressionType.Validate)) {
                    return false;
                }
                const result = this.analysis(event, expressionObject);
                if (!result) {
                    return false;
                }
                // 影响一个表达式是否要计算的因子有两个：表达式作用的字段、表达式的依赖
                // 以下判断的前提时数据加载场景！！
                // 1、表达式作用的字段
                //    如果加载的数据对应的表就是表达式字段所在的表，应该计算
                // 2、表达式依赖
                //    如果表达式依赖的字段加载了，应该计算
                //    如果表达式没有任何依赖，应该计算
                if (result.isSameTable) {
                    return true;
                }
                // 如果没有依赖则应该计算，保证只读、必填、显隐、校验表达式结果正确
                if (!expressionObject.deps || expressionObject.deps.length === 0) {
                    return true;
                }
                // 过滤出所有实体依赖
                const deps = expressionObject.deps.filter((dep) => dep.startsWith(ENTITY_TEMPLATE));
                // 未依赖实体，只依赖了uistate，那么绑定数据加载时不需要计算
                if (!deps || deps.length < 1) {
                    return false;
                }
                // 表达式依赖了字段，需要确认依赖的字段所在的表是否是事件表
                // 1、计算事件表路径
                const eventPath = event.path.filter(p => p).join('/');
                // 2、获取依赖字段的表路径
                const index = deps.findIndex((dep) => {
                    // 去掉ENTITY~前缀
                    const depPath = dep.split('/').slice(1).join('/');
                    // 获取依赖字段所在的表路径
                    const { path } = this.getPathInfo(depPath);
                    return path === eventPath;
                });
                return index !== -1;
            });
            return expressions;
        }
        else {
            return null;
        }
    }
    /**
     * 发布事件
     * @param event event
     */
    dispatch(event) {
        const expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach((expressionObject) => {
                const entityContext = this.buildEntityContext(event, expressionObject);
                const context = this.buildContext(expressionObject, event, entityContext);
                const result = this.perform(expressionObject, context);
                if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);
                if (expressionObject.id) {
                    this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                this.effect(event, expressionObject);
            });
        }
    }
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    getCurrentRowByEvent(paths, event) {
        return this.getCurrentRowByPaths(paths);
    }
}
BindingDataLoadEventHandler.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,