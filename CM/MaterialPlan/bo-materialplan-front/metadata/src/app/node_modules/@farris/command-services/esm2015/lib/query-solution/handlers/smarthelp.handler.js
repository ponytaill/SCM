import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
export class SmartHelpHandler {
    convert(qc) {
        const shv = qc.value;
        if (shv.value.length == 0)
            return [];
        const arr = [];
        if (shv.isInputText || shv.valueField == null) {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Like,
                'Value': shv.textValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        }
        else {
            shv.getOriginalValue().split(',').forEach(id => {
                id && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.Equal,
                    'Value': id,
                    'Relation': RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            });
            if (arr.length > 0) {
                arr[0]['Lbracket'] = '(';
                arr[arr.length - 1]['Rbracket'] = ')';
                arr[arr.length - 1]['Relation'] = RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnRoZWxwLmhhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvcXVlcnktc29sdXRpb24vaGFuZGxlcnMvc21hcnRoZWxwLmhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFMUQsTUFBTSxPQUFPLGdCQUFnQjtJQUN6QixPQUFPLENBQUMsRUFBa0I7UUFDdEIsTUFBTSxHQUFHLEdBQUksRUFBRSxDQUFDLEtBQXdCLENBQUM7UUFDekMsSUFBRyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUM7UUFFcEMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2YsSUFBRyxHQUFHLENBQUMsV0FBVyxJQUFJLEdBQUcsQ0FBQyxVQUFVLElBQUksSUFBSSxFQUFDO1lBQ3pDLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQ0wsYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO2dCQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLElBQUk7Z0JBQzVCLE9BQU8sRUFBRyxHQUFHLENBQUMsU0FBUztnQkFDdkIsVUFBVSxFQUFHLFlBQVksQ0FBQyxHQUFHO2dCQUM3QixhQUFhLEVBQUMsU0FBUyxDQUFDLEtBQUs7YUFDaEMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxHQUFHLENBQUM7U0FDZDthQUFJO1lBQ0QsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDM0MsRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUM7b0JBQ1gsYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO29CQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLEtBQUs7b0JBQzdCLE9BQU8sRUFBRyxFQUFFO29CQUNaLFVBQVUsRUFBRyxZQUFZLENBQUMsRUFBRTtvQkFDNUIsYUFBYSxFQUFDLFNBQVMsQ0FBQyxLQUFLO2lCQUNoQyxDQUFDLENBQUM7WUFDUCxDQUFDLENBQUMsQ0FBQztZQUNILElBQUcsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUM7Z0JBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFDekIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUNyQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDO2dCQUNsRCxPQUFPLEdBQUcsQ0FBQzthQUNkO2lCQUFJO2dCQUNELE9BQU8sRUFBRSxDQUFDO2FBQ2I7U0FDSjtJQUNMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElRdWVyeUNvbmRpdGlvbkhhbmRsZXIgfSBmcm9tIFwiLi9pcXVlcnljb25kaXRpb24uaGFuZGxlclwiO1xuaW1wb3J0IHsgUXVlcnlDb25kaXRpb24sIFNtYXJ0SGVscFZhbHVlIH0gZnJvbSBcIkBmYXJyaXMvY29tcG9uZW50LXF1ZXJ5Y29uZGl0aW9uXCI7XG5pbXBvcnQgeyBDb21wYXJlVHlwZSB9IGZyb20gJy4uL2VudW0vY29tcGFyZS10eXBlLmVudW0nO1xuaW1wb3J0IHsgVmFsdWVUeXBlIH0gZnJvbSAnLi4vZW51bS92YWx1ZS10eXBlLmVudW0nO1xuaW1wb3J0IHsgUmVsYXRpb25UeXBlIH0gZnJvbSAnLi4vZW51bS9yZWxhdGlvbi10eXBlLmVudW0nO1xuXG5leHBvcnQgY2xhc3MgU21hcnRIZWxwSGFuZGxlciBpbXBsZW1lbnRzIElRdWVyeUNvbmRpdGlvbkhhbmRsZXJ7XG4gICAgY29udmVydChxYzogUXVlcnlDb25kaXRpb24pIHtcbiAgICAgICAgY29uc3Qgc2h2ID0gKHFjLnZhbHVlIGFzIFNtYXJ0SGVscFZhbHVlKTtcbiAgICAgICAgaWYoc2h2LnZhbHVlLmxlbmd0aCA9PSAwKSByZXR1cm4gW107XG5cbiAgICAgICAgY29uc3QgYXJyID0gW107XG4gICAgICAgIGlmKHNodi5pc0lucHV0VGV4dCB8fCBzaHYudmFsdWVGaWVsZCA9PSBudWxsKXtcbiAgICAgICAgICAgIGFyci5wdXNoKHtcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMuZmllbGRDb2RlLFxuICAgICAgICAgICAgICAgICdDb21wYXJlJyA6IENvbXBhcmVUeXBlLkxpa2UsXG4gICAgICAgICAgICAgICAgJ1ZhbHVlJyA6IHNodi50ZXh0VmFsdWUsXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5BbmQsXG4gICAgICAgICAgICAgICAgJ0V4cHJlc3N0eXBlJzpWYWx1ZVR5cGUuVmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBzaHYuZ2V0T3JpZ2luYWxWYWx1ZSgpLnNwbGl0KCcsJykuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgICAgICAgICAgaWQgJiYgYXJyLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMuZmllbGRDb2RlLFxuICAgICAgICAgICAgICAgICAgICAnQ29tcGFyZScgOiBDb21wYXJlVHlwZS5FcXVhbCxcbiAgICAgICAgICAgICAgICAgICAgJ1ZhbHVlJyA6IGlkLFxuICAgICAgICAgICAgICAgICAgICAnUmVsYXRpb24nIDogUmVsYXRpb25UeXBlLk9yLFxuICAgICAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOlZhbHVlVHlwZS5WYWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZihhcnIubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgYXJyWzBdWydMYnJhY2tldCddID0gJygnO1xuICAgICAgICAgICAgICAgIGFyclthcnIubGVuZ3RoIC0xXVsnUmJyYWNrZXQnXSA9ICcpJztcbiAgICAgICAgICAgICAgICBhcnJbYXJyLmxlbmd0aCAtMV1bJ1JlbGF0aW9uJ10gPSBSZWxhdGlvblR5cGUuQW5kO1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnI7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=