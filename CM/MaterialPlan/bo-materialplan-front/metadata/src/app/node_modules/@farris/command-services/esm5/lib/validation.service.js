import * as tslib_1 from "tslib";
// tslint:disable: max-line-length
import { Injectable, Optional } from '@angular/core';
import { Repository, FrameContext, PARENT_CLASS, ChangeType, DataPropGroup } from '@farris/devkit';
import { tap, switchMap } from 'rxjs/operators';
import { EMPTY, Subject } from 'rxjs';
import { zip } from 'rxjs/observable/zip';
import { empty } from 'rxjs/observable/empty';
import { of } from 'rxjs/observable/of';
import { VerifyDetailService } from '@farris/ui-verify-detail';
import { FormNotifyService } from './form-notify.service';
import { LanguageService } from './languag.service';
/**
 * 表单验证服务
 * @scope FrameComponent
 */
var ValidationService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function ValidationService(repository, frameContext, notifyService, languageService) {
        this.repository = repository;
        this.frameContext = frameContext;
        this.notifyService = notifyService;
        this.languageService = languageService;
        this.validationResults = new Subject();
        this.validationAllResult = new Subject();
        if (!this.languageService) {
            this.languageService = new LanguageService();
        }
    }
    /**
     * 验证表单内的所有表单
     */
    ValidationService.prototype.validate = function () {
        var _this = this;
        this.repository.getList().subscribe(function (result) {
            var e_1, _a;
            try {
                for (var result_1 = tslib_1.__values(result), result_1_1 = result_1.next(); !result_1_1.done; result_1_1 = result_1.next()) {
                    var entity = result_1_1.value;
                    entity.validate().subscribe(function (result) {
                        if (!result.isValid) {
                            alert(result.message);
                            _this.validationResults.next(result);
                        }
                    });
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (result_1_1 && !result_1_1.done && (_a = result_1.return)) _a.call(result_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
        return this.validationResults;
    };
    /**
     * 校验当前行
     */
    ValidationService.prototype.validateCurrentRow = function () {
        var _this = this;
        var entityTypeInfo = this.repository.entityTypeInfo;
        // 组合表单只校验当前按钮所在的表单
        var primaryValue = this.frameContext.bindingData.list.currentId;
        if (!primaryValue) {
            return of(true);
        }
        // 首先校验实体不能为空规则
        var entity = this.repository.entityCollection.getEntityById(primaryValue);
        if (!entity) {
            return of(true);
        }
        var isEntityValid = this.validateEntityAllowEmptyRule(entity, entityTypeInfo);
        if (!isEntityValid) {
            return EMPTY;
        }
        var entities = [entity];
        var namespace = this.frameContext.namespace;
        var frameContexts = [];
        // 修复使用相同be创建的vo的组合表单校验时多个表单校验规则被合并的问题
        // TODO: 目前未考虑组合表单统一保存的场景，后续支持组合表单统一保存时再修改
        if (namespace !== null) {
            // 存在命名空间，说明表单较新，可以依赖该特性
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);
        }
        else {
            // 表单较老，获取所有的上下文，在校验阶段过滤规则
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        }
        var isModal = this.isInDialog();
        var hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();
        var rootViewModel = this.frameContext.root.viewModel;
        if (isModal && hasOwnVerifyDetailService) {
            rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
        }
        var toValidate = false;
        var formErrors = [];
        frameContexts.forEach(function (frameContext) {
            if (frameContext.form && frameContext.form.enableValidate) {
                toValidate = true;
            }
        });
        if (!toValidate || entities.length < 1) {
            return of(true);
        }
        rootViewModel.verifyInformations = [];
        var formValid = true;
        var entityValid = true;
        var formValidationRules = new Map();
        frameContexts.forEach(function (formContext) {
            var bindingObject = formContext.bindingData.getObject();
            // 通知所有bindingData,
            bindingObject && bindingObject.setShowValidationMsg(true);
            if (formContext.form && formContext.form.enableValidate) {
                // 获取当前表单上的所有验证规则
                var currentFormValidationRules = formContext.form.getValidationRules();
                currentFormValidationRules.forEach(function (rules, path) {
                    if (formValidationRules.has(path)) {
                        rules.forEach(function (rule) { return formValidationRules.get(path).push(rule); });
                    }
                    else {
                        formValidationRules.set(path, tslib_1.__spread(rules));
                    }
                });
                formContext.form.setShowValidationMsg(true);
                // 逐个调用表单的验证，验证前端表单规则
                if (!formContext.form.isFormValid()) {
                    formErrors.push(formContext.form);
                    formValid = false;
                }
            }
        });
        // 验证所有实体
        var observableList = entities.map(function (entity) {
            var index = _this.frameContext.bindingData.list.getIndexById(entity.primaryValue);
            return entity.validate(undefined, undefined, formValidationRules, null, _this.frameContext);
        });
        var result$ = zip.apply(void 0, tslib_1.__spread(observableList)).pipe(tap(function (resultList) {
            frameContexts.forEach(function (formContext) {
                if (!formContext.form.enableValidate) {
                    return;
                }
                var handleErrors = function (errors) {
                    errors.forEach(function (validationError) {
                        if (validationError.children && validationError.children.length) {
                            handleErrors(validationError.children);
                        }
                        var errMsgObj = {};
                        var id = '';
                        var findId = function (target) {
                            if (target && target.data && target.data.id) {
                                id = target.data.id;
                                return;
                            }
                            else if (target[PARENT_CLASS]) {
                                findId(target[PARENT_CLASS]);
                            }
                        };
                        findId(validationError.target);
                        // 实体验证出错，需要将错误展示到界面上
                        // 实体不一定是当前行
                        var parentPathData = {
                            path: [],
                            isUdt: false,
                            isGrid: false
                        };
                        if (validationError.target) {
                            parentPathData = validationError.target.getPaths();
                        }
                        var bindingPath = '/' + parentPathData.path.join('/');
                        if (validationError.constraints) {
                            Object.keys(validationError.constraints).forEach(function (key) {
                                errMsgObj[key] = {
                                    name: validationError.constraints[key]
                                };
                                // if (this.frameContext.viewModel.bindingPath === bindingPath) {
                                //   rootViewModel['verifyInformations'].push({
                                //     id: id,
                                //     title: key,
                                //     msg: validationError.constraints[key],
                                //     type: 'warn'
                                //   })
                                // }
                            });
                        }
                        var paths = parentPathData.path.concat(validationError.property);
                        //if (this.frameContext.viewModel.bindingPath === bindingPath) {
                        // 将错误信息更新到formControl上
                        formContext.bindingData.changes.next({
                            type: ChangeType.UpdateErrors,
                            id: id,
                            path: paths,
                            isUdt: parentPathData.isUdt,
                            isGrid: parentPathData.isGrid,
                            value: validationError.value,
                            errors: errMsgObj
                        });
                        //}
                    });
                };
                // 展开验证结果
                var isValidList = resultList.map(function (result) { return result.isValid; });
                // 保存前先调用实体上的验证规则，全部通过之后才保存
                // 实体验证通过
                if (isValidList.filter(function (x) { return x; }).length === observableList.length) {
                    // 将错误信息更新到formControl上
                    formContext.bindingData.changes.next({
                        type: ChangeType.UpdateErrors,
                        path: []
                    });
                    // 验证成功后隐藏输入时的验证
                    if (formValid) {
                        var bindingObject = formContext.bindingData.getObject();
                        bindingObject && bindingObject.setShowValidationMsg(false);
                        var form = formContext.form;
                        if (form) {
                            form.setShowValidationMsg(false);
                        }
                    }
                }
                else {
                    // 实体验证有错误
                    entityValid = false;
                    resultList.forEach(function (result) {
                        if (result.isValid) {
                            // 清除验证通过的错误
                            formContext.bindingData.changes.next({
                                type: ChangeType.UpdateErrors,
                                path: []
                            });
                        }
                        else {
                            handleErrors(result.errors);
                        }
                    });
                }
            });
        }), switchMap(function (resultList) {
            var isValidated = true;
            var errors = [];
            resultList.forEach(function (result) {
                if (!result.isValid) {
                    isValidated = false;
                }
                errors.push.apply(errors, tslib_1.__spread(result.errors));
            });
            if (errors.length > 0) {
                _this.collectValidationErrors(rootViewModel, errors, _this.frameContext.namespace);
            }
            // rootViewModel.verifycationChanged.next(rootViewModel.verifyInformations);
            var verifyInformations = rootViewModel.verifyInformations;
            if (isModal && hasOwnVerifyDetailService) {
                verifyInformations = rootViewModel.verifyInformations.filter(function (item) { return item.namespace === namespace; });
            }
            rootViewModel.verifycationChanged.next(verifyInformations);
            if (isValidated && !formValid) {
                // 实体校验通过但表单校验不通过，此时实体和表单存在校验规则不一致的情况
                console.warn('实体和控件校验规则不一致，会导致命令执行中断！');
            }
            if (isValidated && formValid) {
                return of(true);
            }
            else {
                return empty();
            }
        }));
        return result$;
    };
    /**
     * 调用表单和实体上的验证规则, 通过后调用回调cb
     */
    ValidationService.prototype.validateAll = function () {
        var _this = this;
        // 组合表单只校验当前按钮所在的表单
        var entities = this.repository.entityCollection.getAllEntities();
        var namespace = this.frameContext.namespace;
        var frameContexts = [];
        if (namespace !== null) {
            // 存在命名空间，说明表单较新，可以依赖该特性
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);
        }
        else {
            // 表单较老，获取所有的上下文，在校验阶段过滤规则
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        }
        var toValidate = false;
        var formErrors = [];
        frameContexts.forEach(function (frameContext) {
            if (frameContext.form && frameContext.form.enableValidate) {
                toValidate = true;
            }
        });
        if (!toValidate || entities.length < 1) {
            return of(true);
        }
        var isModal = this.isInDialog();
        var hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();
        var rootViewModel = this.frameContext.root.viewModel;
        if (isModal && hasOwnVerifyDetailService) {
            rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
        }
        var formValid = true;
        var entityValid = true;
        var formValidationRules = new Map();
        frameContexts.forEach(function (formContext) {
            var bindingObject = formContext.bindingData.getObject();
            // 通知所有bindingData,
            bindingObject && bindingObject.setShowValidationMsg(true);
            if (formContext.form && formContext.form.enableValidate) {
                // 获取当前表单上的所有验证规则
                var currentFormValidationRules = formContext.form.getValidationRules();
                currentFormValidationRules.forEach(function (rules, path) {
                    if (formValidationRules.has(path)) {
                        rules.forEach(function (rule) { return formValidationRules.get(path).push(rule); });
                    }
                    else {
                        formValidationRules.set(path, tslib_1.__spread(rules));
                    }
                });
                formContext.form.setShowValidationMsg(true);
                // 逐个调用表单的验证，验证前端表单规则
                if (!formContext.form.isFormValid()) {
                    formErrors.push(formContext.form);
                    formValid = false;
                }
            }
        });
        // 触发所有实体的validate事件
        var isMultiEntityValiate = entities.length > 0;
        // 验证所有实体
        var observableList = entities.map(function (entity, index) {
            return entity.validate(undefined, undefined, formValidationRules, isMultiEntityValiate ? index : null, _this.frameContext);
        });
        var result$ = zip.apply(void 0, tslib_1.__spread(observableList)).pipe(tap(function (resultList) {
            frameContexts.forEach(function (formContext) {
                if (!formContext.form.enableValidate) {
                    return;
                }
                var handleErrors = function (errors) {
                    errors.forEach(function (validationError) {
                        if (validationError.children && validationError.children.length) {
                            handleErrors(validationError.children);
                        }
                        var errMsgObj = {};
                        var id = '';
                        var findId = function (target) {
                            if (target && target.data && target.data.id) {
                                id = target.data.id;
                                return;
                            }
                            else if (target[PARENT_CLASS]) {
                                findId(target[PARENT_CLASS]);
                            }
                        };
                        findId(validationError.target);
                        // 实体验证出错，需要将错误展示到界面上
                        // 实体不一定是当前行
                        var parentPathData = {
                            path: [],
                            isUdt: false,
                            isGrid: false
                        };
                        if (validationError.target) {
                            parentPathData = validationError.target.getPaths();
                        }
                        var bindingPath = '/' + parentPathData.path.join('/');
                        if (validationError.constraints) {
                            Object.keys(validationError.constraints).forEach(function (key) {
                                errMsgObj[key] = {
                                    name: validationError.constraints[key]
                                };
                                // if (this.frameContext.viewModel.bindingPath === bindingPath) {
                                //   rootViewModel['verifyInformations'].push({
                                //     id: id,
                                //     title: key,
                                //     msg: validationError.constraints[key],
                                //     type: 'warn'
                                //   })
                                // }
                            });
                        }
                        var paths = parentPathData.path.concat(validationError.property);
                        //if (this.frameContext.viewModel.bindingPath === bindingPath) {
                        // 将错误信息更新到formControl上
                        formContext.bindingData.changes.next({
                            type: ChangeType.UpdateErrors,
                            id: id,
                            path: paths,
                            isUdt: parentPathData.isUdt,
                            isGrid: parentPathData.isGrid,
                            value: validationError.value,
                            errors: errMsgObj
                        });
                        //}
                    });
                };
                // 展开验证结果
                var isValidList = resultList.map(function (result) { return result.isValid; });
                // 保存前先调用实体上的验证规则，全部通过之后才保存
                // 实体验证通过
                if (isValidList.filter(function (x) { return x; }).length === observableList.length) {
                    // 将错误信息更新到formControl上
                    formContext.bindingData.changes.next({
                        type: ChangeType.UpdateErrors,
                        path: []
                    });
                    // 验证成功后隐藏输入时的验证
                    if (formValid) {
                        var bindingObject = formContext.bindingData.getObject();
                        bindingObject && bindingObject.setShowValidationMsg(false);
                        var form = formContext.form;
                        if (form) {
                            form.setShowValidationMsg(false);
                        }
                    }
                }
                else {
                    // 实体验证有错误
                    entityValid = false;
                    resultList.forEach(function (result) {
                        if (result.isValid) {
                            // 清除验证通过的错误
                            formContext.bindingData.changes.next({
                                type: ChangeType.UpdateErrors,
                                path: []
                            });
                        }
                        else {
                            handleErrors(result.errors);
                        }
                    });
                }
            });
        }), switchMap(function (resultList) {
            var isValidated = true;
            var errors = [];
            resultList.forEach(function (result) {
                if (!result.isValid) {
                    isValidated = false;
                }
                errors.push.apply(errors, tslib_1.__spread(result.errors));
            });
            if (errors.length > 0) {
                _this.collectValidationErrors(rootViewModel, errors, _this.frameContext.namespace);
            }
            var verifyInformations = rootViewModel.verifyInformations;
            if (isModal && hasOwnVerifyDetailService) {
                verifyInformations = rootViewModel.verifyInformations.filter(function (item) { return item.namespace === namespace; });
            }
            // 因为校验累加的缘故，导致之前的校验信息一直存在，只能通过校验结果来确定是否还有错误信息
            if (isValidated && formValid) {
                verifyInformations = rootViewModel.verifyInformations = [];
            }
            rootViewModel.verifycationChanged.next(verifyInformations);
            if (isValidated && formValid) {
                return of(true);
            }
            else {
                return empty();
            }
        }));
        return result$;
    };
    /**
     * 校验实体是否满足不能为空的规则
     * @param entity 主实体
     */
    ValidationService.prototype.validateEntityAllowEmptyRule = function (entity, entityTypeInfo) {
        var _this = this;
        // 确认实体各个层级中是否存在不能为空的规则
        var paths = this.getNotAllowEmptyBindingPaths(entityTypeInfo);
        if (!paths || paths.length < 1) {
            return true;
        }
        // 找到所有不合法的bindingPaths
        var invalidPaths = paths.filter(function (path) {
            var bindingPaths = path.split('/').filter(function (p) { return p; });
            var bindingList = _this.frameContext.bindingData.getValue(bindingPaths);
            if (!bindingList || bindingList.length < 1) {
                return true;
            }
            return false;
        });
        if (invalidPaths.length > 0) {
            var tableNames_1 = [];
            invalidPaths.forEach(function (path) {
                var viewModelName = _this.getViewModelNameByBindingPaths(path.split('/'));
                tableNames_1.push(viewModelName);
            });
            if (this.notifyService) {
                this.notifyService.error(tableNames_1.join('，') + " " + this.languageService.tableCanNotEmpty, { hideTitle: true });
            }
            return false;
        }
        return true;
    };
    /**
     *
     * @param bindingPaths path不能为空或/，不支持主表
     */
    ValidationService.prototype.getViewModelNameByBindingPaths = function (bindingPaths) {
        var namespace = this.frameContext.namespace;
        var frameContexts = null;
        if (namespace !== null) {
            // 存在命名空间，说明表单较新，可以依赖该特性
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);
        }
        else {
            // 表单较老，获取所有的上下文，在校验阶段过滤规则
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        }
        var bindingPath = bindingPaths.filter(function (p) { return p; }).join('/');
        var frameContext = frameContexts.find(function (frameContext) { return frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; }).join('/') === bindingPath; });
        var viewModelName = frameContext && frameContext.form && frameContext.form.formGroupName || '';
        return viewModelName;
    };
    ValidationService.prototype.getNotAllowEmptyBindingPaths = function (entityTypeInfo) {
        if (!entityTypeInfo) {
            return undefined;
        }
        var paths = [];
        this.deepFirstTraversalEntityTypeInfo(entityTypeInfo, paths);
        return paths;
    };
    ValidationService.prototype.deepFirstTraversalEntityTypeInfo = function (entityTypeInfo, result, previousValue) {
        var _this = this;
        if (result === void 0) { result = []; }
        if (previousValue === void 0) { previousValue = []; }
        var list = entityTypeInfo.getPropInfosByGroup(DataPropGroup.List);
        if (list && list.length > 0) {
            list.forEach(function (propInfo) {
                var typeInfo = propInfo.typeInfo;
                if (typeInfo && typeInfo.entityInfo && typeInfo.entityInfo.allowEmpty === false) {
                    previousValue.push(typeInfo.entityInfo.nodeCode);
                    _this.deepFirstTraversalEntityTypeInfo(typeInfo, result, previousValue);
                }
            });
        }
        // 没有下级了，此时应该清空游标，将收集到的路径放到结果集中
        if (previousValue && previousValue.length > 0) {
            var paths = previousValue.join('/');
            result.push(paths);
        }
        previousValue.splice(0, previousValue.length);
    };
    ValidationService.prototype.collectValidationErrors = function (rootViewModel, errors, namespace, filter) {
        var _this = this;
        if (filter === void 0) { filter = true; }
        if (filter) {
            rootViewModel.verifyInformations = rootViewModel.verifyInformations.filter(function (item) { return item.namespace !== namespace; });
        }
        errors.forEach(function (validationError) {
            if (validationError.children && validationError.children.length) {
                _this.collectValidationErrors(rootViewModel, validationError.children, namespace, false);
            }
            var id = '';
            var findId = function (target) {
                if (target && target.data && target.data.id) {
                    id = target.data.id;
                    return;
                }
                else if (target[PARENT_CLASS]) {
                    findId(target[PARENT_CLASS]);
                }
            };
            findId(validationError.target);
            if (validationError.constraints) {
                var validationResultTypes = Object.keys(validationError.constraints);
                if (validationResultTypes.length) {
                    var offset = rootViewModel.verifyInformations.filter(function (item) { return item.namespace === namespace; }).length;
                    var index = rootViewModel.verifyInformations.findIndex(function (item) { return item.namespace === namespace; });
                    index = index === -1 ? 0 : index + offset;
                    rootViewModel.verifyInformations.splice(index, 0, {
                        id: id,
                        namespace: namespace,
                        targetField: validationError.field,
                        index: validationError.index,
                        title: validationError.propertyName,
                        msg: validationError.constraints[validationResultTypes[0]],
                        frameContext: validationError.frameContext,
                        fullPath: validationError.fullPath,
                        type: validationResultTypes[0] === 'required' ? 'empty' : 'error'
                    });
                }
            }
        });
    };
    /**
     * 重置校验信息（仅当前表单）
     */
    ValidationService.prototype.resetValidation = function () {
        var isDialog = this.isInDialog();
        var rootViewModel = this.frameContext.root.viewModel;
        if (isDialog) {
            rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
        }
        var verifyInformations = rootViewModel.verifyInformations;
        if (verifyInformations.length) {
            var namespace_1 = this.frameContext.namespace;
            if (namespace_1 !== null) {
                verifyInformations = rootViewModel.verifyInformations.filter(function (item) { return item.namespace !== namespace_1; });
            }
            rootViewModel.verifyInformations = verifyInformations;
            //rootViewModel.verifyInformations.splice(0, rootViewModel.verifyInformations.length);
        }
        if (rootViewModel && rootViewModel.verifycationChanged) {
            rootViewModel.verifycationChanged.next(verifyInformations);
        }
        return of(null);
    };
    /**
     * 是否在弹窗内部
     */
    ValidationService.prototype.isInDialog = function () {
        return this.frameContext && this.frameContext.getVirtualRootFrameContext() && this.frameContext.getVirtualRootFrameContext().frameComponent && this.frameContext.getVirtualRootFrameContext().frameComponent['isDialogRootComponent'] || false;
    };
    /**
     * 拥有独自的校验提示服务
     */
    ValidationService.prototype.hasOwnVerifyDetailService = function () {
        return this.frameContext.injector.get(VerifyDetailService, null) !== this.frameContext.root.appContext.injector.get(VerifyDetailService, null);
        ;
    };
    ValidationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ValidationService.ctorParameters = function () { return [
        { type: Repository },
        { type: FrameContext },
        { type: FormNotifyService, decorators: [{ type: Optional }] },
        { type: LanguageService, decorators: [{ type: Optional }] }
    ]; };
    return ValidationService;
}());
export { ValidationService };
//# sourceMappingURL=data:application/json;base64,