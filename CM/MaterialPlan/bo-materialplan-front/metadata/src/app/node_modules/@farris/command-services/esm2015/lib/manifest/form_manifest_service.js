import { HttpClient } from "@angular/common/http";
import { Inject, Injectable, Injector } from "@angular/core";
import { FORM_PATH_TOKEN } from "@farris/devkit";
import { share } from "rxjs/operators";
export class FormManifestService {
    constructor(injector, modulePath, httpClient) {
        this.injector = injector;
        this.modulePath = modulePath;
        this.httpClient = httpClient;
    }
    load() {
        if (this.modulePath.endsWith('\/')) {
            this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);
        }
        const formManifestPath = `${this.modulePath}/expressions/form.manifest.json?version=${new Date().valueOf().toString()}`;
        const request$ = FormManifestService.mainfests.get(this.modulePath);
        if (request$) {
            return request$;
        }
        else {
            const req$ = this.httpClient.get(formManifestPath, { responseType: 'json' }).pipe(share());
            FormManifestService.mainfests.set(this.modulePath, req$);
            return req$;
        }
    }
}
FormManifestService.mainfests = new Map();
FormManifestService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormManifestService.ctorParameters = () => [
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [FORM_PATH_TOKEN,] }] },
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybV9tYW5pZmVzdF9zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL21hbmlmZXN0L2Zvcm1fbWFuaWZlc3Rfc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdELE9BQU8sRUFBRSxlQUFlLEVBQXNDLE1BQU0sZ0JBQWdCLENBQUM7QUFDckYsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3ZDLE1BQU0sT0FBTyxtQkFBbUI7SUFFOUIsWUFDVSxRQUFrQixFQUNPLFVBQVUsRUFDbkMsVUFBc0I7UUFGdEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNPLGVBQVUsR0FBVixVQUFVLENBQUE7UUFDbkMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUM1QixDQUFDO0lBQ0UsSUFBSTtRQUNULElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDNUU7UUFDRCxNQUFNLGdCQUFnQixHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsMkNBQTJDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztRQUN4SCxNQUFNLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRSxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sUUFBUSxDQUFDO1NBQ2pCO2FBQU07WUFDTCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBZSxnQkFBZ0IsRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ3pHLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6RCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQzs7QUFuQmMsNkJBQVMsR0FBRyxJQUFJLEdBQUcsRUFBb0MsQ0FBQzs7WUFGeEUsVUFBVTs7OztZQUxrQixRQUFROzRDQVVoQyxNQUFNLFNBQUMsZUFBZTtZQVhsQixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IEZPUk1fUEFUSF9UT0tFTiwgRm9ybU1hbmlmZXN0LCBJRm9ybU1hbmlmZXN0U2VydmljZSB9IGZyb20gXCJAZmFycmlzL2RldmtpdFwiO1xuaW1wb3J0IHsgc2hhcmUgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZvcm1NYW5pZmVzdFNlcnZpY2UgaW1wbGVtZW50cyBJRm9ybU1hbmlmZXN0U2VydmljZSB7XG4gIHByaXZhdGUgc3RhdGljIG1haW5mZXN0cyA9IG5ldyBNYXA8c3RyaW5nLCBPYnNlcnZhYmxlPEZvcm1NYW5pZmVzdD4+KCk7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIEBJbmplY3QoRk9STV9QQVRIX1RPS0VOKSBwcml2YXRlIG1vZHVsZVBhdGgsXG4gICAgcHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50XG4gICkgeyB9XG4gIHB1YmxpYyBsb2FkKCk6IE9ic2VydmFibGU8Rm9ybU1hbmlmZXN0PiB7XG4gICAgaWYgKHRoaXMubW9kdWxlUGF0aC5lbmRzV2l0aCgnXFwvJykpIHtcbiAgICAgIHRoaXMubW9kdWxlUGF0aCA9IHRoaXMubW9kdWxlUGF0aC5zdWJzdHJpbmcoMCwgdGhpcy5tb2R1bGVQYXRoLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICBjb25zdCBmb3JtTWFuaWZlc3RQYXRoID0gYCR7dGhpcy5tb2R1bGVQYXRofS9leHByZXNzaW9ucy9mb3JtLm1hbmlmZXN0Lmpzb24/dmVyc2lvbj0ke25ldyBEYXRlKCkudmFsdWVPZigpLnRvU3RyaW5nKCl9YDtcbiAgICBjb25zdCByZXF1ZXN0JCA9IEZvcm1NYW5pZmVzdFNlcnZpY2UubWFpbmZlc3RzLmdldCh0aGlzLm1vZHVsZVBhdGgpO1xuICAgIGlmIChyZXF1ZXN0JCkge1xuICAgICAgcmV0dXJuIHJlcXVlc3QkO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCByZXEkID0gdGhpcy5odHRwQ2xpZW50LmdldDxGb3JtTWFuaWZlc3Q+KGZvcm1NYW5pZmVzdFBhdGgsIHsgcmVzcG9uc2VUeXBlOiAnanNvbicgfSkucGlwZShzaGFyZSgpKTtcbiAgICAgIEZvcm1NYW5pZmVzdFNlcnZpY2UubWFpbmZlc3RzLnNldCh0aGlzLm1vZHVsZVBhdGgsIHJlcSQpO1xuICAgICAgcmV0dXJuIHJlcSQ7XG4gICAgfVxuICB9XG59XG4iXX0=