import { HttpClient } from "@angular/common/http";
import { Inject, Injectable, Injector } from "@angular/core";
import { FORM_PATH_TOKEN } from "@farris/devkit";
import { share } from "rxjs/operators";
export class FormManifestService {
    constructor(injector, modulePath, httpClient) {
        this.injector = injector;
        this.modulePath = modulePath;
        this.httpClient = httpClient;
    }
    load() {
        if (this.modulePath.endsWith('\/')) {
            this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);
        }
        const formManifestPath = `${this.modulePath}/expressions/form.manifest.json?version=${new Date().valueOf().toString()}`;
        const request$ = FormManifestService.mainfests.get(this.modulePath);
        if (request$) {
            return request$;
        }
        else {
            const req$ = this.httpClient.get(formManifestPath, { responseType: 'json' }).pipe(share());
            FormManifestService.mainfests.set(this.modulePath, req$);
            return req$;
        }
    }
}
FormManifestService.mainfests = new Map();
FormManifestService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormManifestService.ctorParameters = () => [
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [FORM_PATH_TOKEN,] }] },
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybV9tYW5pZmVzdF9zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL21hbmlmZXN0L2Zvcm1fbWFuaWZlc3Rfc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdELE9BQU8sRUFBRSxlQUFlLEVBQXNDLE1BQU0sZ0JBQWdCLENBQUM7QUFDckYsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3ZDLE1BQU0sT0FBTyxtQkFBbUI7SUFFOUIsWUFDVSxRQUFrQixFQUNPLFVBQVUsRUFDbkMsVUFBc0I7UUFGdEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNPLGVBQVUsR0FBVixVQUFVLENBQUE7UUFDbkMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUM1QixDQUFDO0lBQ0UsSUFBSTtRQUNULElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDNUU7UUFDRCxNQUFNLGdCQUFnQixHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsMkNBQTJDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztRQUN4SCxNQUFNLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRSxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sUUFBUSxDQUFDO1NBQ2pCO2FBQU07WUFDTCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBZSxnQkFBZ0IsRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ3pHLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6RCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQzs7QUFuQmMsNkJBQVMsR0FBRyxJQUFJLEdBQUcsRUFBb0MsQ0FBQzs7WUFGeEUsVUFBVTs7OztZQUxrQixRQUFROzRDQVVoQyxNQUFNLFNBQUMsZUFBZTtZQVhsQixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xyXG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IEZPUk1fUEFUSF9UT0tFTiwgRm9ybU1hbmlmZXN0LCBJRm9ybU1hbmlmZXN0U2VydmljZSB9IGZyb20gXCJAZmFycmlzL2RldmtpdFwiO1xyXG5pbXBvcnQgeyBzaGFyZSB9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRm9ybU1hbmlmZXN0U2VydmljZSBpbXBsZW1lbnRzIElGb3JtTWFuaWZlc3RTZXJ2aWNlIHtcclxuICBwcml2YXRlIHN0YXRpYyBtYWluZmVzdHMgPSBuZXcgTWFwPHN0cmluZywgT2JzZXJ2YWJsZTxGb3JtTWFuaWZlc3Q+PigpO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICBASW5qZWN0KEZPUk1fUEFUSF9UT0tFTikgcHJpdmF0ZSBtb2R1bGVQYXRoLFxyXG4gICAgcHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50XHJcbiAgKSB7IH1cclxuICBwdWJsaWMgbG9hZCgpOiBPYnNlcnZhYmxlPEZvcm1NYW5pZmVzdD4ge1xyXG4gICAgaWYgKHRoaXMubW9kdWxlUGF0aC5lbmRzV2l0aCgnXFwvJykpIHtcclxuICAgICAgdGhpcy5tb2R1bGVQYXRoID0gdGhpcy5tb2R1bGVQYXRoLnN1YnN0cmluZygwLCB0aGlzLm1vZHVsZVBhdGgubGVuZ3RoIC0gMSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBmb3JtTWFuaWZlc3RQYXRoID0gYCR7dGhpcy5tb2R1bGVQYXRofS9leHByZXNzaW9ucy9mb3JtLm1hbmlmZXN0Lmpzb24/dmVyc2lvbj0ke25ldyBEYXRlKCkudmFsdWVPZigpLnRvU3RyaW5nKCl9YDtcclxuICAgIGNvbnN0IHJlcXVlc3QkID0gRm9ybU1hbmlmZXN0U2VydmljZS5tYWluZmVzdHMuZ2V0KHRoaXMubW9kdWxlUGF0aCk7XHJcbiAgICBpZiAocmVxdWVzdCQpIHtcclxuICAgICAgcmV0dXJuIHJlcXVlc3QkO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgcmVxJCA9IHRoaXMuaHR0cENsaWVudC5nZXQ8Rm9ybU1hbmlmZXN0Pihmb3JtTWFuaWZlc3RQYXRoLCB7IHJlc3BvbnNlVHlwZTogJ2pzb24nIH0pLnBpcGUoc2hhcmUoKSk7XHJcbiAgICAgIEZvcm1NYW5pZmVzdFNlcnZpY2UubWFpbmZlc3RzLnNldCh0aGlzLm1vZHVsZVBhdGgsIHJlcSQpO1xyXG4gICAgICByZXR1cm4gcmVxJDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19