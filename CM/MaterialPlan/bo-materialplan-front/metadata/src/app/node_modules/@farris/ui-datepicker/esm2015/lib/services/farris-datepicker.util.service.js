/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-09-04 07:40:04
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-09-04 15:21:46
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Injectable } from '@angular/core';
import { KeyCode, KeyName, ShowType } from '../enums/public-api';
import { D, DD, M, MM, MMM, YYYY, SU, MO, TU, WE, TH, FR, SA, ZERO_STR, EMPTY_STR } from '../constants/constants';
export class UtilService {
    constructor() {
        this.weekDays = [SU, MO, TU, WE, TH, FR, SA];
    }
    /**
     * @param {?} dateStr
     * @param {?} options
     * @param {?=} isReturn
     * @return {?}
     */
    isDateValid(dateStr, options, isReturn = false) {
        // tslint:disable-next-line:one-variable-per-declaration
        /** @type {?} */
        let _dateStr;
        /** @type {?} */
        let hour = 0;
        /** @type {?} */
        let minute = 0;
        /** @type {?} */
        let second = 0;
        /** @type {?} */
        const returnDate = this.resetDate();
        if (!dateStr || !dateStr.length) {
            return returnDate;
        }
        const { dateFormat, minYear, maxYear, monthLabels, showTime, returnFormat, showType } = options;
        /** @type {?} */
        let _st = showTime;
        /** @type {?} */
        let formatStr = dateFormat;
        if (isReturn) {
            formatStr = returnFormat.replace(/[年,月]/g, '-').replace(/[日]/, '').replace(/[时,分]/g, ':').replace(/[秒]/g, '');
            dateStr = dateStr.replace(/[年,月]/g, '-').replace(/[日]/, '').replace(/[时,分]/g, ':').replace(/[秒]/g, '');
            if (dateStr[dateStr.length - 1] === '-' || dateStr[dateStr.length - 1] === ':') {
                dateStr = dateStr.substring(0, dateStr.length - 1);
            }
            if (!showTime && returnFormat.toLocaleLowerCase().indexOf('hh:mm') > -1) {
                _st = true;
            }
        }
        /** @type {?} */
        const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        /** @type {?} */
        const isMonthStr = formatStr.indexOf(MMM) !== -1;
        /** @type {?} */
        let delimeters = formatStr.match(/[^(DdMmYy)]{1,}/g);
        if (_st && dateStr) {
            _dateStr = dateStr.split(' ')[0];
            Object.assign(returnDate, { hour: 0, minute: 0, second: 0 });
            /** @type {?} */
            const timeStr = dateStr.split(' ')[1];
            if (timeStr) {
                /** @type {?} */
                const _timer = timeStr.replace('时', ':').replace('分', ':').replace('秒', '').split(':');
                if (_timer[0]) {
                    hour = Number(_timer[0].substr(0, 2));
                    hour = isNaN(hour) ? 0 : hour;
                }
                if (_timer[1]) {
                    minute = Number(_timer[1].substr(0, 2));
                    minute = isNaN(minute) ? 0 : minute;
                }
                if (_timer[2]) {
                    second = Number(_timer[2].substr(0, 2));
                    second = isNaN(second) ? 0 : second;
                }
            }
            else {
                delimeters = undefined;
                /** @type {?} */
                const reg = /^\d{1,}$/;
                if (reg.test(dateStr)) { // 验证传入的格式为 yyyyMMddHHmmss
                    // 验证传入的格式为 yyyyMMddHHmmss
                    /** @type {?} */
                    const df = formatStr;
                    _dateStr = dateStr.substr(0, 8);
                    /** @type {?} */
                    let _timer = dateStr.substr(8);
                    if (_timer) {
                        if (df.includes('HH')) {
                            if (_timer) {
                                hour = +_timer.slice(0, 2);
                                _timer = _timer.slice(2);
                            }
                        }
                        if (df.includes('mm')) {
                            if (_timer) {
                                minute = +_timer.slice(0, 2);
                                _timer = _timer.slice(2);
                            }
                        }
                        if (df.includes('ss')) {
                            if (_timer) {
                                second = +_timer.slice(0, 2);
                            }
                        }
                    }
                }
            }
        }
        else {
            _dateStr = dateStr ? dateStr.split(' ')[0] : '';
        }
        /** @type {?} */
        const dateValue = this.getDateValue(_dateStr, formatStr, delimeters);
        /** @type {?} */
        const year = this.getNumberByValue(dateValue[0]);
        /** @type {?} */
        const month = isMonthStr
            ? this.getMonthNumberByMonthName(dateValue[1], monthLabels)
            : this.getNumberByValue(dateValue[1]);
        /** @type {?} */
        const day = this.getNumberByValue(dateValue[2]);
        if (showType === ShowType.noDateAndMonth) {
            return { year, month: 1, day: 1 };
        }
        if (month !== -1 && day !== -1 && year !== -1) {
            if (year < minYear || year > maxYear || month < 1 || month > 12) {
                return returnDate;
            }
            /** @type {?} */
            const date = _st ? { year, month, day, hour, minute, second } : { year, month, day };
            if (this.isDisabledDate(date, options)) {
                return returnDate;
            }
            if (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) {
                daysInMonth[1] = 29;
            }
            if (day < 1 || day > daysInMonth[month - 1]) {
                return returnDate;
            }
            // Valid date
            if (options.showType === ShowType.noDate) {
                return { year: date.year, month: date.month };
            }
            else if (options.showType === ShowType.noDateAndMonth) {
                return { year: date.year };
            }
            else {
                return date;
            }
        }
        return returnDate;
    }
    /**
     * @param {?} dateRangeStr
     * @param {?} options
     * @return {?}
     */
    isDateValidDateRange(dateRangeStr, options) {
        /** @type {?} */
        let dateRange = {
            begin: this.resetDate(),
            end: this.resetDate()
        };
        if (dateRangeStr && dateRangeStr.length) {
            /** @type {?} */
            const dates = dateRangeStr.split(options.dateRangeDatesDelimiter);
            if (dates && dates.length === 2) {
                const [beginDate, endDate] = dates;
                /** @type {?} */
                const begin = this.isDateValid(beginDate, options, true);
                if (this.isInitializedDate(begin)) {
                    /** @type {?} */
                    const end = this.isDateValid(endDate, options, true);
                    if (this.isInitializedDate(end) && this.isDateSameOrEarlier(begin, end)) {
                        dateRange = { begin, end };
                    }
                }
            }
        }
        return dateRange;
    }
    /**
     * @param {?} dateStr
     * @param {?} dateFormat
     * @param {?} delimeters
     * @return {?}
     */
    getDateValue(dateStr, dateFormat, delimeters) {
        /** @type {?} */
        const da = [];
        if (delimeters) {
            /** @type {?} */
            let del = delimeters[0];
            if (delimeters[0] !== delimeters[1]) {
                del = delimeters[0] + delimeters[1];
                if (delimeters[2] && delimeters[1] !== delimeters[2]) {
                    del = del + delimeters[2];
                }
            }
            /** @type {?} */
            const re = new RegExp('[' + del + ']');
            /** @type {?} */
            const ds = dateStr.split(re);
            /** @type {?} */
            const df = dateFormat.split(re);
            for (let i = 0; i < df.length; i++) {
                if (df[i].indexOf(YYYY) !== -1) {
                    da[0] = { value: ds[i], format: df[i] };
                }
                if (df[i].indexOf(M) !== -1) {
                    da[1] = ds[i] === undefined ? { value: '1', format: df[i] } : { value: ds[i], format: df[i] };
                }
                if (df[i].indexOf(D) !== -1) {
                    da[2] = ds[i] === undefined ? { value: '1', format: df[i] } : { value: ds[i], format: df[i] };
                }
            }
        }
        else {
            /** @type {?} */
            const yearIndex = (dateFormat + '').indexOf(YYYY);
            /** @type {?} */
            const monthIndex = (dateFormat + '').indexOf(MM);
            /** @type {?} */
            const dayIndex = (dateFormat + '').indexOf(DD);
            if (yearIndex >= 0) {
                da[0] = { value: dateStr.substring(yearIndex, yearIndex + 4), format: dateFormat.substring(yearIndex, yearIndex + 4) };
            }
            if (monthIndex >= 0) {
                da[1] = { value: dateStr.substring(monthIndex, monthIndex + 2), format: dateFormat.substring(monthIndex, monthIndex + 2) };
            }
            if (dayIndex >= 0) {
                da[2] = { value: dateStr.substring(dayIndex, dayIndex + 2), format: dateFormat.substring(dayIndex, dayIndex + 2) };
            }
        }
        return da;
    }
    /**
     * @param {?} df
     * @param {?} monthLabels
     * @return {?}
     */
    getMonthNumberByMonthName(df, monthLabels) {
        if (df.value) {
            for (let key = 1; key <= 12; key++) {
                if (df.value.toLowerCase() === monthLabels[key].toLowerCase()) {
                    return key;
                }
            }
        }
        return -1;
    }
    /**
     * @param {?} df
     * @return {?}
     */
    getNumberByValue(df) {
        if (!df) {
            return 1;
        }
        if (!/^\d+$/.test(df.value)) {
            return -1;
        }
        /** @type {?} */
        let nbr = Number(df.value);
        if ((df.format.length === 1 && df.value.length !== 1 && nbr < 10) ||
            (df.format.length === 1 && df.value.length !== 2 && nbr >= 10)) {
            nbr = -1;
        }
        else if (df.format.length === 2 && df.value.length > 2) {
            nbr = -1;
        }
        return nbr;
    }
    /**
     * @param {?} monthString
     * @return {?}
     */
    parseDefaultMonth(monthString) {
        /** @type {?} */
        const month = { monthTxt: EMPTY_STR, monthNbr: 0, year: 0 };
        if (monthString !== EMPTY_STR) {
            /** @type {?} */
            const split = monthString.split(monthString.match(/[^0-9]/)[0]);
            month.monthNbr = split[0].length === 2 ? Number(split[0]) : Number(split[1]);
            month.year = split[0].length === 2 ? Number(split[1]) : Number(split[0]);
        }
        return month;
    }
    /**
     * @param {?} date
     * @param {?} options
     * @return {?}
     */
    isDisabledDate(date, options) {
        const { minYear, maxYear, disableUntil, disableSince, disableWeekends, disableDates, disableDateRanges, disableWeekdays, enableDates } = options;
        // for (const d of enableDates) {
        //     if (
        //         (d.year === 0 || d.year === date.year) &&
        //         (d.month === 0 || d.month === date.month) &&
        //         d.day === date.day
        //     ) {
        //         return false;
        //     }
        // }
        if ((date.year < minYear && date.month === 12) || (date.year > maxYear && date.month === 1)) {
            return true;
        }
        /** @type {?} */
        const dateMs = this.getTimeInMilliseconds(date);
        if (this.isInitializedDate(disableUntil) && (dateMs + 24 * 60 * 60 * 1000 - 1) < this.getTimeInMilliseconds(disableUntil)) {
            return true;
        }
        if (this.isInitializedDate(disableSince) && dateMs > this.getTimeInMilliseconds(disableSince)) {
            return true;
        }
        if (disableWeekends) {
            /** @type {?} */
            const dayNbr = this.getDayNumber(date);
            if (dayNbr === 0 || dayNbr === 6) {
                return true;
            }
        }
        /** @type {?} */
        const dn = this.getDayNumber(date);
        if (disableWeekdays.length > 0) {
            for (const wd of disableWeekdays) {
                if (dn === this.getWeekdayIndex(wd)) {
                    return true;
                }
            }
        }
        for (const d of disableDates) {
            if ((d.year === 0 || d.year === date.year) &&
                (d.month === 0 || d.month === date.month) &&
                d.day === date.day) {
                return true;
            }
        }
        for (const d of disableDateRanges) {
            if (this.isInitializedDate(d.begin) &&
                this.isInitializedDate(d.end) &&
                dateMs >= this.getTimeInMilliseconds(d.begin) &&
                dateMs <= this.getTimeInMilliseconds(d.end)) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} date
     * @param {?} markedDates
     * @param {?} markWeekends
     * @return {?}
     */
    isMarkedDate(date, markedDates, markWeekends) {
        for (const md of markedDates) {
            for (const d of md.dates) {
                if ((d.year === 0 || d.year === date.year) &&
                    (d.month === 0 || d.month === date.month) &&
                    d.day === date.day) {
                    return { marked: true, color: md.color };
                }
            }
        }
        if (markWeekends && markWeekends.marked) {
            /** @type {?} */
            const dayNbr = this.getDayNumber(date);
            if (dayNbr === 0 || dayNbr === 6) {
                return { marked: true, color: markWeekends.color };
            }
        }
        return { marked: false, color: EMPTY_STR };
    }
    /**
     * @param {?} date
     * @param {?} sunHighlight
     * @param {?} satHighlight
     * @param {?} highlightDates
     * @return {?}
     */
    isHighlightedDate(date, sunHighlight, satHighlight, highlightDates) {
        /** @type {?} */
        const dayNbr = this.getDayNumber(date);
        if ((sunHighlight && dayNbr === 0) || (satHighlight && dayNbr === 6)) {
            return true;
        }
        for (const d of highlightDates) {
            if ((d.year === 0 || d.year === date.year) &&
                (d.month === 0 || d.month === date.month) &&
                d.day === date.day) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getWeekNumber(date) {
        /** @type {?} */
        const d = new Date(date.year, date.month - 1, date.day, 0, 0, 0, 0);
        d.setDate(d.getDate() + (d.getDay() === 0 ? -3 : 4 - d.getDay()));
        return Math.round((d.getTime() - new Date(d.getFullYear(), 0, 4).getTime()) / 86400000 / 7) + 1;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getNowWeekTime(date) {
        date.setDate(date.getDate() - ((date.getDay() + 6) % 7));
        /** @type {?} */
        const begin = {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate()
        };
        date.setDate(date.getDate() + 6);
        /** @type {?} */
        const end = {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate()
        };
        return { begin, end };
    }
    /**
     * @param {?} date
     * @param {?} disableUntil
     * @return {?}
     */
    isMonthDisabledByDisableUntil(date, disableUntil) {
        return (this.isInitializedDate(disableUntil) &&
            this.getTimeInMilliseconds(date) <= this.getTimeInMilliseconds(disableUntil));
    }
    /**
     * @param {?} date
     * @param {?} disableSince
     * @return {?}
     */
    isMonthDisabledByDisableSince(date, disableSince) {
        return (this.isInitializedDate(disableSince) &&
            this.getTimeInMilliseconds(date) >= this.getTimeInMilliseconds(disableSince));
    }
    /**
     * @param {?} date
     * @param {?} dateRange
     * @param {?} dateFormat
     * @param {?} monthLabels
     * @param {?} rangeDelimiter
     * @param {?} returnFormat
     * @param {?=} dateStr
     * @return {?}
     */
    getDateModel(date, dateRange, dateFormat, monthLabels, rangeDelimiter, returnFormat, dateStr = EMPTY_STR) {
        /** @type {?} */
        let singleDateModel = null;
        /** @type {?} */
        let dateRangeModel = null;
        if (date) {
            singleDateModel = {
                date,
                jsDate: this.getDate2(date),
                formatted: dateStr.length ? dateStr : this.formatDate(date, dateFormat, monthLabels),
                returnFormatted: this.formatDate(date, returnFormat, monthLabels),
                epoc: this.getEpocTime(date)
            };
        }
        else {
            dateRangeModel = {
                beginDate: dateRange.begin,
                beginJsDate: this.getDate(dateRange.begin),
                beginEpoc: this.getEpocTime(dateRange.begin),
                endDate: dateRange.end,
                endJsDate: this.getDate(dateRange.end),
                endEpoc: this.getEpocTime(dateRange.end),
                formatted: this.formatDate(dateRange.begin, dateFormat, monthLabels) +
                    rangeDelimiter +
                    this.formatDate(dateRange.end, dateFormat, monthLabels),
                returnFormatted: this.formatDate(dateRange.begin, returnFormat, monthLabels) +
                    rangeDelimiter +
                    this.formatDate(dateRange.end, returnFormat, monthLabels),
            };
        }
        return {
            isRange: date === null,
            singleDate: singleDateModel,
            dateRange: dateRangeModel
        };
    }
    /**
     * @param {?} date
     * @param {?} dateFormat
     * @param {?} monthLabels
     * @return {?}
     */
    formatDate(date, dateFormat, monthLabels) {
        if (!date.month && dateFormat.indexOf(MM) === -1) {
            dateFormat = this.delete(dateFormat, MM);
        }
        if (!date.day && dateFormat.indexOf(DD) === -1) {
            dateFormat = this.delete(dateFormat, DD);
        }
        /** @type {?} */
        let formatted = dateFormat.replace(YYYY, String(date.year));
        if (dateFormat.indexOf(M) === -1) {
            formatted = formatted.replace(MM, '01');
        }
        else {
            if (dateFormat.indexOf(MMM) !== -1) {
                formatted = formatted.replace(MMM, monthLabels[date.month]);
            }
            else if (dateFormat.indexOf(MM) !== -1) {
                formatted = formatted.replace(MM, this.preZero(date.month || 1));
            }
            else {
                formatted = formatted.replace(M, String(date.month || 1));
            }
        }
        if (dateFormat.indexOf(DD) === -1) {
            formatted = formatted.replace(DD, '01');
        }
        else if (dateFormat.indexOf(DD) !== -1) {
            formatted = formatted.replace(DD, this.preZero(date.day || 1));
        }
        else {
            formatted = formatted.replace(D, String(date.day || 1));
        }
        formatted = formatted.replace('MM', 'mm').replace('HH', this.preZero(date.hour || 0))
            .replace('mm', this.preZero(date.minute || 0))
            .replace('ss', this.preZero(date.second || 0));
        return formatted && formatted.length > 2 ? formatted : '';
    }
    /**
     * @param {?} format
     * @param {?} delStr
     * @return {?}
     */
    delete(format, delStr) {
        /** @type {?} */
        const re = format.match(/[^(DdMmYy)]{1,}/g);
        /** @type {?} */
        const index = format.indexOf(delStr);
        if (index < 0) {
            return format;
        }
        else if (index === 0) {
            if (re) {
                return format.substring(3);
            }
            else {
                return format.substring(2);
            }
        }
        else if (index + 2 === format.length) {
            if (re) {
                return format.substring(0, format.length - 3);
            }
            else {
                return format.substring(0, format.length - 2);
            }
        }
        else {
            if (re) {
                return format.substring(0, index) + format.substring(index + 3);
            }
            else {
                return format.substring(0, index) + format.substring(index + 2);
            }
        }
    }
    /**
     * @param {?} model
     * @return {?}
     */
    getFormattedDate(model) {
        return !model.isRange ? model.singleDate.formatted : model.dateRange.formatted;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    preZero(val) {
        return val < 10 ? ZERO_STR + Number(val) : String(val);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isInitializedDate(date) {
        return date && date.year !== 0 && date.month !== 0 && date.day !== 0;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isInitializedMonth(date) {
        return date && date.year !== 0 && date.month !== 0;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isInitializedYear(date) {
        return date && date.year !== 0;
    }
    /**
     * @param {?} firstDate
     * @param {?} secondDate
     * @return {?}
     */
    isDateEarlier(firstDate, secondDate) {
        return this.getTimeInMilliseconds(firstDate) < this.getTimeInMilliseconds(secondDate);
    }
    /**
     * @param {?} firstDate
     * @param {?} secondDate
     * @return {?}
     */
    isDateSameOrEarlier(firstDate, secondDate) {
        return this.getTimeInMilliseconds(firstDate) <= this.getTimeInMilliseconds(secondDate);
    }
    /**
     * @param {?} firstDate
     * @param {?} secondDate
     * @return {?}
     */
    isDateSame(firstDate, secondDate) {
        return this.getTimeInMilliseconds(firstDate) === this.getTimeInMilliseconds(secondDate);
    }
    /**
     * @param {?} dateRange
     * @param {?} date
     * @return {?}
     */
    isDateRangeBeginOrEndSame(dateRange, date) {
        /** @type {?} */
        const dateMs = this.getTimeInMilliseconds(date);
        return (this.getTimeInMilliseconds(dateRange.begin) === dateMs ||
            this.getTimeInMilliseconds(dateRange.end) === dateMs);
    }
    /**
     * @param {?} date
     * @param {?} dateRange
     * @return {?}
     */
    isDateInRange(date, dateRange) {
        if (!this.isInitializedDate(dateRange.begin) || !this.isInitializedDate(dateRange.end)) {
            return false;
        }
        return this.isDateSameOrEarlier(dateRange.begin, date) && this.isDateSameOrEarlier(date, dateRange.end);
    }
    /**
     * @return {?}
     */
    resetDate() {
        return { year: 0, month: 0, day: 0 };
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getTimeInMilliseconds(date) {
        return this.getDate(date).getTime();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getDate2(date) {
        /** @type {?} */
        const now = new Date();
        if (!date.year) {
            date.year = now.getFullYear();
        }
        if (!date.month) {
            date.month = now.getMonth() + 1;
        }
        if (!date.day) {
            date.day = 1;
        }
        return new Date(date.year, date.month - 1, date.day, date.hour ? date.hour : 0, date.minute ? date.minute : 0, date.second ? date.second : 0, 0);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getDate(date) {
        return new Date(date.year || 0, date.month ? date.month - 1 : 0, date.day || 0, date.hour ? date.hour : 0, date.minute ? date.minute : 0, date.second ? date.second : 0, 0);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getDayNumber(date) {
        return new Date(date.year, date.month - 1, date.day, date.hour ? date.hour : 0, date.minute ? date.minute : 0, date.second ? date.second : 0, 0).getDay();
    }
    /**
     * @param {?} wd
     * @return {?}
     */
    getWeekdayIndex(wd) {
        return this.weekDays.indexOf(wd);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getEpocTime(date) {
        return Math.round(this.getTimeInMilliseconds(date) / 1000.0);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    getKeyCodeFromEvent(event) {
        /** @type {?} */
        const key = event.key || event.keyCode;
        if (key === KeyName.enter || key === KeyCode.enter) {
            return KeyCode.enter;
        }
        else if (key === KeyName.esc || key === KeyCode.esc) {
            return KeyCode.esc;
        }
        else if (key === KeyName.space || key === KeyCode.space) {
            return KeyCode.space;
        }
        else if (key === KeyName.leftArrow || key === KeyCode.leftArrow) {
            return KeyCode.leftArrow;
        }
        else if (key === KeyName.upArrow || key === KeyCode.upArrow) {
            return KeyCode.upArrow;
        }
        else if (key === KeyName.rightArrow || key === KeyCode.rightArrow) {
            return KeyCode.rightArrow;
        }
        else if (key === KeyName.downArrow || key === KeyCode.downArrow) {
            return KeyCode.downArrow;
        }
        else if (key === KeyName.tab || key === KeyCode.tab) {
            return KeyCode.tab;
        }
        else if (key === KeyName.shift || key === KeyCode.shift) {
            return KeyCode.shift;
        }
        else {
            return null;
        }
    }
    /**
     * @param {?} now
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    getNearDate(now, min, max) {
        /** @type {?} */
        const minMilliseconds = this.getTimeInMilliseconds(min);
        /** @type {?} */
        const maxMilliseconds = this.getTimeInMilliseconds(max);
        /** @type {?} */
        const nowMilliseconds = this.getTimeInMilliseconds(now);
        if (maxMilliseconds - nowMilliseconds > nowMilliseconds - minMilliseconds) {
            return min;
        }
        else {
            return max;
        }
    }
    // 禁用时间对应的小时
    // 选中日期等于左区间日期时，禁用左端点的左部分[0，minHour）
    // 选中日期等于右区间日期时，禁用右端点的右部分(maxHour,23]
    /**
     * @param {?} min
     * @param {?} max
     * @param {?} currentDate
     * @return {?}
     */
    disabledHours(min, max, currentDate) {
        /** @type {?} */
        let minHour = min.hour;
        /** @type {?} */
        let maxHour = max.hour;
        /** @type {?} */
        let res = [];
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: min.year, month: min.month, day: min.day })) {
            while (minHour-- >= 0) {
                res.push(minHour);
            }
        }
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: max.year, month: max.month, day: max.day })) {
            while (maxHour++ < 24) {
                res.push(maxHour);
            }
        }
        return res;
    }
    //禁用时间对应的分钟 
    //选中日期等于左区间日期时，禁用左端点的左部分[0，minMinute）
    //选中日期等于右区间日期时，禁用右端点的右部分（maxMinute，59]
    /**
     * @param {?} min
     * @param {?} max
     * @param {?} _hour
     * @param {?} currentDate
     * @return {?}
     */
    disabledMinutes(min, max, _hour, currentDate) {
        /** @type {?} */
        let maxHour = max.hour;
        /** @type {?} */
        let maxMinute = max.minute;
        /** @type {?} */
        let minHour = min.hour;
        /** @type {?} */
        let minMinute = min.minute;
        /** @type {?} */
        let res = [];
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: min.year, month: min.month, day: min.day })) {
            if (_hour == minHour) {
                while (minMinute-- >= 0) {
                    res.push(minMinute);
                }
            }
        }
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: max.year, month: max.month, day: max.day })) {
            if (_hour == maxHour) {
                while (maxMinute++ < 60) {
                    res.push(maxMinute);
                }
            }
        }
        return res;
    }
    //禁用时间对应的秒 
    //选中日期等于左区间日期时，禁用左端点的左部分[0，minSecond）
    //选中日期等于右区间日期时，禁用右端点的右部分（maxSecond，59]
    /**
     * @param {?} min
     * @param {?} max
     * @param {?} _hour
     * @param {?} _minute
     * @param {?} currentDate
     * @return {?}
     */
    disabledSeconds(min, max, _hour, _minute, currentDate) {
        /** @type {?} */
        let maxHour = max.hour;
        /** @type {?} */
        let maxMinute = max.minute;
        /** @type {?} */
        let maxSecond = max.second;
        /** @type {?} */
        let minHour = min.hour;
        /** @type {?} */
        let minMinute = min.minute;
        /** @type {?} */
        let minSecond = min.second;
        /** @type {?} */
        let res = [];
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: min.year, month: min.month, day: min.day })) {
            if (_hour == minHour && _minute == minMinute) {
                while (minSecond-- >= 0) {
                    res.push(minSecond);
                }
            }
        }
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: max.year, month: max.month, day: max.day })) {
            if (_hour == maxHour && _minute == maxMinute) {
                while (maxSecond++ < 60) {
                    res.push(maxSecond);
                }
            }
        }
        return res;
    }
    /**
     * @private
     * @param {?} dt
     * @param {?} dynamicLocale
     * @return {?}
     */
    getDateTypeString(dt, dynamicLocale) {
        switch (dt) {
            case 'week':
                return dynamicLocale.week || '周';
            case 'day':
                return dynamicLocale.day || '天';
            case 'month':
                return dynamicLocale.month || '月';
            case 'year':
                return dynamicLocale.year || '年';
        }
    }
    /**
     * @param {?} val
     * @param {?} dynamicLocale
     * @return {?}
     */
    formatDynamicValue(val, dynamicLocale) {
        if (val) {
            /** @type {?} */
            let fval = '';
            switch (val.name) {
                case 'present_day': // 今天
                    fval = dynamicLocale.today || '今天';
                    break;
                case 'present_month': // 本月
                    fval = dynamicLocale.presentMonth || '本月';
                    break;
                case 'present_year':
                    fval = dynamicLocale.presentYear || '本年';
                    break;
                case 'previou':
                    fval = (dynamicLocale.previous || '过去') + ' ' + val.count + ' ' + this.getDateTypeString(val.dateType, dynamicLocale);
                    break;
                case 'future':
                    fval = (dynamicLocale.future || '未来') + ' ' + val.count + ' ' + this.getDateTypeString(val.dateType, dynamicLocale);
                    break;
                case 'present_first':
                    fval = (dynamicLocale.current || '本') + this.getDateTypeString(val.dateType, dynamicLocale) + (dynamicLocale.first || '第 1 天');
                    break;
                case 'present_last':
                    fval = (dynamicLocale.current || '本') + this.getDateTypeString(val.dateType, dynamicLocale) + (dynamicLocale.last || '最后 1 天');
                    break;
            }
            return fval;
        }
        else {
            return '';
        }
    }
}
UtilService.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    UtilService.prototype.weekDays;
}
//# sourceMappingURL=data:application/json;base64,