import { MetadataUtil } from '../core/index';
import { FormControl } from './form_control';
import { FORM_CONTROL_PROP_META } from './decorators';
import { Subject } from 'rxjs';
import { ValidatorFactory } from '../validator';
/**
 * Form抽象类
 */
class Form {
    /**
     * 构造函数
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.formControlConfigs = [];
        this.validateformControls = [];
        this.validateformControlPathMap = new Map;
        this.changes = new Subject();
    }
    /**
     * 初始化
     */
    init() {
        this.collectMetadatas();
        this.createFormControls();
    }
    /**
     * 全部校验
     *  formControlConfigs 上所有的formControl的存在方法调用一遍 将错误信息集中返回
     */
    validateFields() {
        let validationResult = [];
        if (this.validateformControls.length === 0) {
            return validationResult;
        }
        this.validateformControls.forEach((formControl) => {
            this[formControl]['validationResult'] = ValidatorFactory.executeValidator(this[formControl]['validatorFn'], this[formControl]['value']);
            !this[formControl]['validationResult'].passing && validationResult.push(this[formControl]);
        });
        this.changes.next({ type: 'validateFieldsFinished' });
        return validationResult;
    }
    /**
     * 获取某一个得校验错误信息
     * @param name 属性名称
     */
    getFieldError(name) {
        if (this.validateformControls.length === 0) {
            return {};
        }
        const index = this.validateformControls.findIndex((item) => {
            return item === name;
        });
        if (index === -1) {
            return {};
        }
        else {
            const result = ValidatorFactory.executeValidator(this[name]['validatorFn'], this[name]['value']);
            this[name]['validationResult'] = result;
            this.changes.next({ type: 'validateFieldsFinished', value: name });
            return result;
        }
    }
    /**
   * 根据form元数据中的path获取某一个得校验错误信息
   * @param path 属性名称数组
   */
    getFieldErrorByPath(path) {
        if (this.validateformControls.length === 0) {
            return {};
        }
        let pathName = path[0];
        if (path && path.length >= 2) {
            pathName = path.join('.');
        }
        const index = this.validateformControlPathMap.has(pathName);
        if (!index) {
            return {};
        }
        else {
            const result = ValidatorFactory.executeValidator(this[this.validateformControlPathMap.get(pathName)]['validatorFn'], this[this.validateformControlPathMap.get(pathName)]['value']);
            this[this.validateformControlPathMap.get(pathName)]['validationResult'] = result;
            this.changes.next({ type: 'validateFieldsFinished', value: this.validateformControlPathMap.get(pathName) });
            return result;
        }
    }
    /**
     * 清除一组字段验证状态
     * @param fields 字段的数组
     */
    resetFieldsValidate(fields) {
        if (this.validateformControls.length === 0) {
            return true;
        }
        else {
            if (fields && fields.length > 0) {
                const sa = new Set(this.validateformControls);
                const sb = new Set(fields);
                // 交集
                const intersect = this.validateformControls.filter(x => sb.has(x));
                // 遍历清空所有校验结果数据
                intersect.forEach(item => {
                    this[item]['validationResult'] = {};
                });
            }
            else {
                // 没传数据全部清除
                this.validateformControls.forEach(item => {
                    this[item]['validationResult'] = {};
                });
            }
            this.changes.next({ type: 'validateFieldsFinished' });
        }
    }
    /**
     * 创建FormControls
     */
    createFormControls() {
        this.formControlConfigs.forEach((formControlConfig) => {
            const name = formControlConfig.name;
            const formControl = new FormControl(formControlConfig, this.viewModelContext);
            this[name] = formControl;
        });
    }
    /**
     * 收集元数据
     */
    collectMetadatas() {
        const formControlMetadatas = MetadataUtil.getPropsMetadatasByName(this.constructor, FORM_CONTROL_PROP_META);
        Object.keys(formControlMetadatas).forEach((name) => {
            const formControlMetadata = formControlMetadatas[name];
            if (formControlMetadata.validRules) {
                this.validateformControls.push(name);
                this.validateformControlPathMap.set(formControlMetadata.bindingPath, name);
            }
            const formControlConfig = {
                name: name,
                bindingType: formControlMetadata.bindingType,
                bindingPath: formControlMetadata.bindingPath,
                valueConverter: formControlMetadata.valueConverter,
                valueChanging: formControlMetadata.valueChanging,
                valueChanged: formControlMetadata.valueChanged,
                validRules: formControlMetadata.validRules
            };
            this.formControlConfigs.push(formControlConfig);
        });
    }
    getEntityValueChangingListeners() {
        const listeners = {};
        this.formControlConfigs.forEach((formControl) => {
            if (formControl.valueChanging) {
                listeners[formControl.bindingPath] = formControl.valueChanging;
            }
        });
        return listeners;
    }
    getEntityValueChangedListeners() {
        const listeners = {};
        this.formControlConfigs.forEach((formControl) => {
            if (formControl.valueChanged) {
                listeners[formControl.bindingPath] = formControl.valueChanged;
            }
        });
        return listeners;
    }
}
export { Form };
//# sourceMappingURL=data:application/json;base64,