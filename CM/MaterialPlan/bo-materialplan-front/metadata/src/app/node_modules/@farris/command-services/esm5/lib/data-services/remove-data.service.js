import { Injectable } from '@angular/core';
import { of, EMPTY } from 'rxjs';
import { tap, switchMap, concatMap } from 'rxjs/operators';
import { FrameContext, } from '@farris/devkit';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { FormNotifyService } from '../form-notify.service';
import { LanguageService } from '../languag.service';
import { FormMessageService } from '../form-message.service';
import { FormErrorService } from '../error/form-error.service';
import { CommandService } from '../command-service';
import { ListDataService } from './list-data.service';
import { TreeDataService } from './tree-data.service';
/**
 * 删除服务
 */
var RemoveDataService = /** @class */ (function () {
    /**
     * 构造函数
     * @param frameContext 组件上下文
     */
    function RemoveDataService(frameContext) {
        this.frameContext = frameContext;
        this.notifyService = this.frameContext.injector.get(FormNotifyService, null);
        this.messageService = this.frameContext.injector.get(FormMessageService, null);
        this.errorService = this.frameContext.injector.get(FormErrorService, null);
        this.loadingService = this.frameContext.injector.get(FormLoadingService, null);
        this.languageService = this.frameContext.injector.get(LanguageService, null);
        this.commandService = this.frameContext.injector.get(CommandService, null);
        this.listDataService = this.frameContext.injector.get(ListDataService, null);
        this.treeDataService = this.frameContext.injector.get(TreeDataService, null);
        this.befRepository = this.frameContext.repository;
    }
    /**
     * 删除id对应的实体
     * @param id 要删除的数据id
     * @param ifSave 是否保存
     * @param enableRemoveAndSave 是否启用删除并保存（仅为兼容，新调用请勿设置）
     * @summary
     * enableRemoveAndSave存在的意义：
     * 1、老表单的可能没有delAndSave方法；
     * 2、为了将ListDataService中的remove方法迁移到此方法上，显示设置为false，保持和以前行为一致；
     * 3、该参数默认为true，并且在WebComponent层不暴露，新命令不需要传递，默认为true；
     */
    RemoveDataService.prototype.removeById = function (id, ifSave, enableRemoveAndSave, successMsg) {
        if (enableRemoveAndSave === void 0) { enableRemoveAndSave = true; }
        var msg = successMsg ? successMsg : '';
        return this.innerRemoveById(id, ifSave, enableRemoveAndSave, msg);
    };
    RemoveDataService.prototype.removeByIds = function (ids) {
        throw new Error('Not Implemented');
    };
    /**
     * 删除id对应的实体，并执行保存
     */
    RemoveDataService.prototype.removeAndSaveById = function (id, successMsg) {
        var msg = successMsg ? successMsg : '';
        return this.innerRemoveById(id, true, true, msg);
    };
    /**
     * 删除并保存树节点数据
     */
    RemoveDataService.prototype.removeAndSaveByIdForTree = function (id, successMsg) {
        var _this = this;
        var msg = successMsg ? successMsg : '';
        // 检查要删除的id是否存在
        if (this.checkIdsToRemove([id]) === false) {
            this.notifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });
            return EMPTY;
        }
        // 检查是否有子节点
        var treeNodesData = this.befRepository.entityCollection.toJSON();
        if (this.treeDataService.hasChildNodes(id, treeNodesData) === true) {
            this.messageService.warning(this.languageService.deleteChildFirst);
            return EMPTY;
        }
        // 执行删除
        var remove$ = this.innerRemoveById(id, true, true, msg);
        var nextNodeId = this.treeDataService.getNextNodeIdAfterRemoving(id, treeNodesData);
        ;
        var result$ = remove$.pipe(tap(function () {
            _this.treeDataService.setNextNodeAfterRemoving(nextNodeId);
        }));
        return result$;
    };
    /**
     * 批量删除并保存
     */
    RemoveDataService.prototype.removeAndSaveByIds = function () {
        throw new Error('Not Implemented');
    };
    /**
     * 删除后的刷新
     */
    RemoveDataService.prototype.refreshAfterRemoving = function (loadCmdName, loadCmdFrameId) {
        if (!this.frameContext || !loadCmdName || !loadCmdFrameId) {
            return;
        }
        var commandService = this.frameContext.injector.get(CommandService, null);
        return commandService.execute(loadCmdName, loadCmdFrameId);
    };
    /**
     * 删除id对应的实体
     * @param id 实体id
     * @param ifSave 是否保存
     * @param enableRemoveAndSave 是否启用删除并保存（老EAPI上没有此方法，通过开关进行兼容）
     * @summary
     * enableRemoveAndSave参数说明：
     * 1、老EAPI上没有delAndSave方法，只能发两次请求（删除和保存）；
     * 2、此开关用于选择使用哪种方式，兼容老表单。
     */
    RemoveDataService.prototype.innerRemoveById = function (id, ifSave, enableRemoveAndSave, successMsg) {
        var _this = this;
        // 检查要删除的id是否存在
        if (this.checkIdsToRemove([id]) === false) {
            this.notifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });
            return EMPTY;
        }
        var confirm$ = this.confirmToRemove();
        var remove$ = enableRemoveAndSave && ifSave ?
            this.befRepository.removeEntityAndSaveById(id) :
            this.befRepository.removeById(id, ifSave);
        var result$ = confirm$.pipe(concatMap(function (ifRemove) {
            if (ifRemove === false) {
                return EMPTY;
            }
            var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
            return remove$.pipe(tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    _this.notifyService.success(successMsg, { hideTitle: true });
                }
                else {
                    _this.notifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.errorService.exception(_this.languageService.deleteFailed, error);
            }), switchMap(function () {
                var saved = enableRemoveAndSave && ifSave;
                if (!saved) {
                    return EMPTY;
                }
                else {
                    return of(null);
                }
            }));
        }));
        return result$;
    };
    /**
     * 检查要删除的ids是否为空
     */
    RemoveDataService.prototype.checkIdsToRemove = function (ids) {
        if (!ids) {
            return false;
        }
        var filteredIds = ids.filter(function (id) {
            return !!id;
        });
        if (filteredIds.length === 0) {
            return false;
        }
        return true;
    };
    /**
     * 确认删除
     */
    RemoveDataService.prototype.confirmToRemove = function () {
        var confirm$ = this.messageService.question(this.languageService.confirmDeletion);
        var result$ = confirm$.pipe(concatMap(function (ifRemove) {
            if (ifRemove === false) {
                return EMPTY;
            }
            else {
                return of(true);
            }
        }));
        return result$;
    };
    RemoveDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RemoveDataService.ctorParameters = function () { return [
        { type: FrameContext }
    ]; };
    return RemoveDataService;
}());
export { RemoveDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3ZlLWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9kYXRhLXNlcnZpY2VzL3JlbW92ZS1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3QyxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsWUFBWSxHQUFXLE1BQU0sZ0JBQWdCLENBQUM7QUFFdkQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDMUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzdELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXREOztHQUVHO0FBQ0g7SUFxQkU7OztPQUdHO0lBQ0gsMkJBQW9CLFlBQTBCO1FBQTFCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzVDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFvQixpQkFBaUIsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoRyxJQUFJLENB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LFFBQWlCO1lBQzFCLElBQUksUUFBUSxLQUFLLEtBQUssRUFBRTtnQkFDdEIsT0FBTyxLQUFLLENBQUM7YUFDZDtpQkFBTTtnQkFDTCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNqQjtRQUNILENBQUMsQ0FDQSxDQUFDLENBQUM7UUFDTCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDOztnQkEvTUYsVUFBVTs7OztnQkFkRixZQUFZOztJQThOckIsd0JBQUM7Q0FBQSxBQWhORCxJQWdOQztBQUVELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgRU1QVFkgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFwLCBzd2l0Y2hNYXAsIGNvbmNhdE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgRnJhbWVDb250ZXh0LCBFbnRpdHksIH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBCZWZSZXBvc2l0b3J5LCB9IGZyb20gJ0BmYXJyaXMvYmVmJztcclxuaW1wb3J0IHsgRm9ybUxvYWRpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vZm9ybS1sb2FkaW5nL2Zvcm0tbG9hZGluZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRm9ybU5vdGlmeVNlcnZpY2UgfSBmcm9tICcuLi9mb3JtLW5vdGlmeS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vbGFuZ3VhZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRm9ybU1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vZm9ybS1tZXNzYWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBGb3JtRXJyb3JTZXJ2aWNlIH0gZnJvbSAnLi4vZXJyb3IvZm9ybS1lcnJvci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ29tbWFuZFNlcnZpY2UgfSBmcm9tICcuLi9jb21tYW5kLXNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMaXN0RGF0YVNlcnZpY2UgfSBmcm9tICcuL2xpc3QtZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVHJlZURhdGFTZXJ2aWNlIH0gZnJvbSAnLi90cmVlLWRhdGEuc2VydmljZSc7XHJcblxyXG4vKipcclxuICog5Yig6Zmk5pyN5YqhXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIFJlbW92ZURhdGFTZXJ2aWNlIHtcclxuXHJcbiAgcHJpdmF0ZSBub3RpZnlTZXJ2aWNlOiBGb3JtTm90aWZ5U2VydmljZTtcclxuXHJcbiAgcHJpdmF0ZSBtZXNzYWdlU2VydmljZTogRm9ybU1lc3NhZ2VTZXJ2aWNlO1xyXG5cclxuICBwcml2YXRlIGxvYWRpbmdTZXJ2aWNlOiBGb3JtTG9hZGluZ1NlcnZpY2U7XHJcblxyXG4gIHByaXZhdGUgZXJyb3JTZXJ2aWNlOiBGb3JtRXJyb3JTZXJ2aWNlO1xyXG5cclxuICBwcml2YXRlIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlO1xyXG5cclxuICBwcml2YXRlIGJlZlJlcG9zaXRvcnk6IEJlZlJlcG9zaXRvcnk8YW55PjtcclxuXHJcbiAgcHJpdmF0ZSBjb21tYW5kU2VydmljZTogQ29tbWFuZFNlcnZpY2U7XHJcblxyXG4gIHByaXZhdGUgbGlzdERhdGFTZXJ2aWNlOiBMaXN0RGF0YVNlcnZpY2U7XHJcblxyXG4gIHByaXZhdGUgdHJlZURhdGFTZXJ2aWNlOiBUcmVlRGF0YVNlcnZpY2U7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqIEBwYXJhbSBmcmFtZUNvbnRleHQg57uE5Lu25LiK5LiL5paHXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCkge1xyXG4gICAgdGhpcy5ub3RpZnlTZXJ2aWNlID0gdGhpcy5mcmFtZUNvbnRleHQuaW5qZWN0b3IuZ2V0PEZvcm1Ob3RpZnlTZXJ2aWNlPihGb3JtTm90aWZ5U2VydmljZSwgbnVsbCk7XHJcbiAgICB0aGlzLm1lc3NhZ2VTZXJ2aWNlID0gdGhpcy5mcmFtZUNvbnRleHQuaW5qZWN0b3IuZ2V0PEZvcm1NZXNzYWdlU2VydmljZT4oRm9ybU1lc3NhZ2VTZXJ2aWNlLCBudWxsKTtcclxuICAgIHRoaXMuZXJyb3JTZXJ2aWNlID0gdGhpcy5mcmFtZUNvbnRleHQuaW5qZWN0b3IuZ2V0PEZvcm1FcnJvclNlcnZpY2U+KEZvcm1FcnJvclNlcnZpY2UsIG51bGwpO1xyXG4gICAgdGhpcy5sb2FkaW5nU2VydmljZSA9IHRoaXMuZnJhbWVDb250ZXh0LmluamVjdG9yLmdldDxGb3JtTG9hZGluZ1NlcnZpY2U+KEZvcm1Mb2FkaW5nU2VydmljZSwgbnVsbCk7XHJcblxyXG4gICAgdGhpcy5sYW5ndWFnZVNlcnZpY2UgPSB0aGlzLmZyYW1lQ29udGV4dC5pbmplY3Rvci5nZXQ8TGFuZ3VhZ2VTZXJ2aWNlPihMYW5ndWFnZVNlcnZpY2UsIG51bGwpO1xyXG4gICAgdGhpcy5jb21tYW5kU2VydmljZSA9IHRoaXMuZnJhbWVDb250ZXh0LmluamVjdG9yLmdldDxDb21tYW5kU2VydmljZT4oQ29tbWFuZFNlcnZpY2UsIG51bGwpO1xyXG4gICAgdGhpcy5saXN0RGF0YVNlcnZpY2UgPSB0aGlzLmZyYW1lQ29udGV4dC5pbmplY3Rvci5nZXQ8TGlzdERhdGFTZXJ2aWNlPihMaXN0RGF0YVNlcnZpY2UsIG51bGwpO1xyXG4gICAgdGhpcy50cmVlRGF0YVNlcnZpY2UgPSB0aGlzLmZyYW1lQ29udGV4dC5pbmplY3Rvci5nZXQ8VHJlZURhdGFTZXJ2aWNlPihUcmVlRGF0YVNlcnZpY2UsIG51bGwpO1xyXG4gICAgdGhpcy5iZWZSZXBvc2l0b3J5ID0gdGhpcy5mcmFtZUNvbnRleHQucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PEVudGl0eT47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliKDpmaRpZOWvueW6lOeahOWunuS9k1xyXG4gICAqIEBwYXJhbSBpZCDopoHliKDpmaTnmoTmlbDmja5pZFxyXG4gICAqIEBwYXJhbSBpZlNhdmUg5piv5ZCm5L+d5a2YXHJcbiAgICogQHBhcmFtIGVuYWJsZVJlbW92ZUFuZFNhdmUg5piv5ZCm5ZCv55So5Yig6Zmk5bm25L+d5a2Y77yI5LuF5Li65YW85a6577yM5paw6LCD55So6K+35Yu/6K6+572u77yJXHJcbiAgICogQHN1bW1hcnlcclxuICAgKiBlbmFibGVSZW1vdmVBbmRTYXZl5a2Y5Zyo55qE5oSP5LmJ77yaXHJcbiAgICogMeOAgeiAgeihqOWNleeahOWPr+iDveayoeaciWRlbEFuZFNhdmXmlrnms5XvvJtcclxuICAgKiAy44CB5Li65LqG5bCGTGlzdERhdGFTZXJ2aWNl5Lit55qEcmVtb3Zl5pa55rOV6L+B56e75Yiw5q2k5pa55rOV5LiK77yM5pi+56S66K6+572u5Li6ZmFsc2XvvIzkv53mjIHlkozku6XliY3ooYzkuLrkuIDoh7TvvJtcclxuICAgKiAz44CB6K+l5Y+C5pWw6buY6K6k5Li6dHJ1Ze+8jOW5tuS4lOWcqFdlYkNvbXBvbmVudOWxguS4jeaatOmcsu+8jOaWsOWRveS7pOS4jemcgOimgeS8oOmAku+8jOm7mOiupOS4unRydWXvvJtcclxuICAgKi9cclxuICBwdWJsaWMgcmVtb3ZlQnlJZChpZDogc3RyaW5nLCBpZlNhdmU6IGJvb2xlYW4sIGVuYWJsZVJlbW92ZUFuZFNhdmU6IGJvb2xlYW4gPSB0cnVlLCBzdWNjZXNzTXNnPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICBjb25zdCBtc2cgPSBzdWNjZXNzTXNnID8gc3VjY2Vzc01zZyA6ICcnO1xyXG4gICAgcmV0dXJuIHRoaXMuaW5uZXJSZW1vdmVCeUlkKGlkLCBpZlNhdmUsIGVuYWJsZVJlbW92ZUFuZFNhdmUsIG1zZyk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVtb3ZlQnlJZHMoaWRzOiBzdHJpbmdbXSk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgSW1wbGVtZW50ZWQnKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIoOmZpGlk5a+55bqU55qE5a6e5L2T77yM5bm25omn6KGM5L+d5a2YXHJcbiAgICovXHJcbiAgcHVibGljIHJlbW92ZUFuZFNhdmVCeUlkKGlkOiBzdHJpbmcsIHN1Y2Nlc3NNc2c/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIGNvbnN0IG1zZyA9IHN1Y2Nlc3NNc2cgPyBzdWNjZXNzTXNnIDogJyc7XHJcbiAgICByZXR1cm4gdGhpcy5pbm5lclJlbW92ZUJ5SWQoaWQsIHRydWUsIHRydWUsIG1zZyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliKDpmaTlubbkv53lrZjmoJHoioLngrnmlbDmja5cclxuICAgKi9cclxuICBwdWJsaWMgcmVtb3ZlQW5kU2F2ZUJ5SWRGb3JUcmVlKGlkOiBzdHJpbmcsIHN1Y2Nlc3NNc2c/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIGNvbnN0IG1zZyA9IHN1Y2Nlc3NNc2cgPyBzdWNjZXNzTXNnIDogJyc7XHJcbiAgICAvLyDmo4Dmn6XopoHliKDpmaTnmoRpZOaYr+WQpuWtmOWcqFxyXG4gICAgaWYgKHRoaXMuY2hlY2tJZHNUb1JlbW92ZShbaWRdKSA9PT0gZmFsc2UpIHtcclxuICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLndhcm5pbmcodGhpcy5sYW5ndWFnZVNlcnZpY2UucGxzU2VsZWN0RGVsZXRlRGF0YSwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDmo4Dmn6XmmK/lkKbmnInlrZDoioLngrlcclxuICAgIGNvbnN0IHRyZWVOb2Rlc0RhdGEgPSB0aGlzLmJlZlJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi50b0pTT04oKTtcclxuICAgIGlmICh0aGlzLnRyZWVEYXRhU2VydmljZS5oYXNDaGlsZE5vZGVzKGlkLCB0cmVlTm9kZXNEYXRhKSA9PT0gdHJ1ZSkge1xyXG4gICAgICB0aGlzLm1lc3NhZ2VTZXJ2aWNlLndhcm5pbmcodGhpcy5sYW5ndWFnZVNlcnZpY2UuZGVsZXRlQ2hpbGRGaXJzdCk7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDmiafooYzliKDpmaRcclxuICAgIGNvbnN0IHJlbW92ZSQgPSB0aGlzLmlubmVyUmVtb3ZlQnlJZChpZCwgdHJ1ZSwgdHJ1ZSwgbXNnKTtcclxuICAgIGNvbnN0IG5leHROb2RlSWQgPSB0aGlzLnRyZWVEYXRhU2VydmljZS5nZXROZXh0Tm9kZUlkQWZ0ZXJSZW1vdmluZyhpZCwgdHJlZU5vZGVzRGF0YSk7O1xyXG4gICAgY29uc3QgcmVzdWx0JCA9IHJlbW92ZSQucGlwZShcclxuICAgICAgdGFwKCgpID0+IHtcclxuICAgICAgICB0aGlzLnRyZWVEYXRhU2VydmljZS5zZXROZXh0Tm9kZUFmdGVyUmVtb3ZpbmcobmV4dE5vZGVJZCk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQkO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIOaJuemHj+WIoOmZpOW5tuS/neWtmFxyXG4gICAqL1xyXG4gIHB1YmxpYyByZW1vdmVBbmRTYXZlQnlJZHMoKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBJbXBsZW1lbnRlZCcpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yig6Zmk5ZCO55qE5Yi35pawXHJcbiAgICovXHJcbiAgcHVibGljIHJlZnJlc2hBZnRlclJlbW92aW5nKGxvYWRDbWROYW1lOiBzdHJpbmcsIGxvYWRDbWRGcmFtZUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKCF0aGlzLmZyYW1lQ29udGV4dCB8fCAhbG9hZENtZE5hbWUgfHwgIWxvYWRDbWRGcmFtZUlkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGNvbW1hbmRTZXJ2aWNlID0gdGhpcy5mcmFtZUNvbnRleHQuaW5qZWN0b3IuZ2V0PENvbW1hbmRTZXJ2aWNlPihDb21tYW5kU2VydmljZSwgbnVsbCk7XHJcbiAgICByZXR1cm4gY29tbWFuZFNlcnZpY2UuZXhlY3V0ZShsb2FkQ21kTmFtZSwgbG9hZENtZEZyYW1lSWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yig6ZmkaWTlr7nlupTnmoTlrp7kvZNcclxuICAgKiBAcGFyYW0gaWQg5a6e5L2TaWRcclxuICAgKiBAcGFyYW0gaWZTYXZlIOaYr+WQpuS/neWtmFxyXG4gICAqIEBwYXJhbSBlbmFibGVSZW1vdmVBbmRTYXZlIOaYr+WQpuWQr+eUqOWIoOmZpOW5tuS/neWtmO+8iOiAgUVBUEnkuIrmsqHmnInmraTmlrnms5XvvIzpgJrov4flvIDlhbPov5vooYzlhbzlrrnvvIlcclxuICAgKiBAc3VtbWFyeVxyXG4gICAqIGVuYWJsZVJlbW92ZUFuZFNhdmXlj4LmlbDor7TmmI7vvJpcclxuICAgKiAx44CB6ICBRUFQSeS4iuayoeaciWRlbEFuZFNhdmXmlrnms5XvvIzlj6rog73lj5HkuKTmrKHor7fmsYLvvIjliKDpmaTlkozkv53lrZjvvInvvJtcclxuICAgKiAy44CB5q2k5byA5YWz55So5LqO6YCJ5oup5L2/55So5ZOq56eN5pa55byP77yM5YW85a656ICB6KGo5Y2V44CCXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpbm5lclJlbW92ZUJ5SWQoaWQ6IHN0cmluZywgaWZTYXZlOiBib29sZWFuLCBlbmFibGVSZW1vdmVBbmRTYXZlOiBib29sZWFuLCBzdWNjZXNzTXNnOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuXHJcbiAgICAvLyDmo4Dmn6XopoHliKDpmaTnmoRpZOaYr+WQpuWtmOWcqFxyXG4gICAgaWYgKHRoaXMuY2hlY2tJZHNUb1JlbW92ZShbaWRdKSA9PT0gZmFsc2UpIHtcclxuICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLndhcm5pbmcodGhpcy5sYW5ndWFnZVNlcnZpY2UucGxzU2VsZWN0RGVsZXRlRGF0YSwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb25maXJtJCA9IHRoaXMuY29uZmlybVRvUmVtb3ZlKCk7XHJcbiAgICBjb25zdCByZW1vdmUkID0gZW5hYmxlUmVtb3ZlQW5kU2F2ZSAmJiBpZlNhdmUgP1xyXG4gICAgICB0aGlzLmJlZlJlcG9zaXRvcnkucmVtb3ZlRW50aXR5QW5kU2F2ZUJ5SWQoaWQpIDpcclxuICAgICAgdGhpcy5iZWZSZXBvc2l0b3J5LnJlbW92ZUJ5SWQoaWQsIGlmU2F2ZSk7XHJcblxyXG4gICAgY29uc3QgcmVzdWx0JCA9IGNvbmZpcm0kLnBpcGUoXHJcbiAgICAgIGNvbmNhdE1hcCgoaWZSZW1vdmU6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICBpZiAoaWZSZW1vdmUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICByZXR1cm4gRU1QVFk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGxvYWRpbmdUaW1lcklkID0gdGhpcy5sb2FkaW5nU2VydmljZS5zaG93TG9hZGluZ1dpdGhEZWxheSg1MDApO1xyXG4gICAgICAgIHJldHVybiByZW1vdmUkLnBpcGUoXHJcbiAgICAgICAgICB0YXAoXHJcbiAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xyXG4gICAgICAgICAgICAgIGlmIChzdWNjZXNzTXNnICYmIHN1Y2Nlc3NNc2cudHJpbSgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeVNlcnZpY2Uuc3VjY2VzcyhzdWNjZXNzTXNnLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLnN1Y2Nlc3ModGhpcy5sYW5ndWFnZVNlcnZpY2UuZGVsZXRlU3VjY2VzcywgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIC8vIHRoaXMubm90aWZ5U2VydmljZS5zdWNjZXNzKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmRlbGV0ZVN1Y2Nlc3MsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAoZXJyb3I6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XHJcbiAgICAgICAgICAgICAgdGhpcy5lcnJvclNlcnZpY2UuZXhjZXB0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmRlbGV0ZUZhaWxlZCwgZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApLFxyXG4gICAgICAgICAgc3dpdGNoTWFwKCgpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgc2F2ZWQgPSBlbmFibGVSZW1vdmVBbmRTYXZlICYmIGlmU2F2ZTtcclxuICAgICAgICAgICAgaWYgKCFzYXZlZCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdCQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmo4Dmn6XopoHliKDpmaTnmoRpZHPmmK/lkKbkuLrnqbpcclxuICAgKi9cclxuICBwcml2YXRlIGNoZWNrSWRzVG9SZW1vdmUoaWRzOiBzdHJpbmdbXSk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCFpZHMpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZmlsdGVyZWRJZHMgPSBpZHMuZmlsdGVyKChpZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgIHJldHVybiAhIWlkO1xyXG4gICAgfSk7XHJcbiAgICBpZiAoZmlsdGVyZWRJZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOehruiupOWIoOmZpFxyXG4gICAqL1xyXG4gIHByaXZhdGUgY29uZmlybVRvUmVtb3ZlKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgY29uc3QgY29uZmlybSQgPSB0aGlzLm1lc3NhZ2VTZXJ2aWNlLnF1ZXN0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmNvbmZpcm1EZWxldGlvbik7XHJcbiAgICBjb25zdCByZXN1bHQkID0gY29uZmlybSQucGlwZShcclxuICAgICAgY29uY2F0TWFwKChpZlJlbW92ZTogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgIGlmIChpZlJlbW92ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICApKTtcclxuICAgIHJldHVybiByZXN1bHQkO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgUmVtb3ZlRGF0YVNlcnZpY2UgfTtcclxuXHJcblxyXG4iXX0=