/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class DebugService {
    constructor() {
        this.isDebug = false;
        this.destroy$ = new Subject();
        this.debugSub = null;
    }
    /**
     * @return {?}
     */
    destroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * @private
     * @param {?} type
     * @param {...?} msg
     * @return {?}
     */
    writeMessage(type, ...msg) {
        if (this.isDebug) {
            console[type](...msg);
        }
    }
    /**
     * @param {...?} msg
     * @return {?}
     */
    log(...msg) {
        this.writeMessage('log', msg);
    }
    /**
     * @param {...?} msg
     * @return {?}
     */
    warn(...msg) {
        this.writeMessage('warn', msg);
    }
    /**
     * @param {...?} msg
     * @return {?}
     */
    error(...msg) {
        this.writeMessage('error', msg);
    }
    /**
     * @param {...?} msg
     * @return {?}
     */
    info(...msg) {
        this.writeMessage('info', msg);
    }
    /**
     * @return {?}
     */
    useDebugMode() {
        if (!this.debugSub) {
            this.debugSub = fromEvent(document.body, 'keydown').pipe(takeUntil(this.destroy$)).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e.ctrlKey && e.shiftKey && e.key === 'D') {
                    e.preventDefault();
                    e.stopPropagation();
                    this.isDebug = !this.isDebug;
                    console.log(`ðŸª²%cFarris debug mode is ${this.isDebug ? 'startting' : 'stopped'}.ðŸª²`, 'color: blue; font-weight:bold;font-size:16px');
                }
            }));
        }
        return this.debugSub;
    }
}
DebugService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DebugService.ctorParameters = () => [];
/** @nocollapse */ DebugService.ngInjectableDef = i0.defineInjectable({ factory: function DebugService_Factory() { return new DebugService(); }, token: DebugService, providedIn: "root" });
if (false) {
    /** @type {?} */
    DebugService.prototype.isDebug;
    /**
     * @type {?}
     * @private
     */
    DebugService.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    DebugService.prototype.debugSub;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvZGVidWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBa0IsTUFBTSxlQUFlLENBQUM7QUFDM0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFNM0MsTUFBTSxPQUFPLFlBQVk7SUFNckI7UUFMQSxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBRVIsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDekIsYUFBUSxHQUFpQixJQUFJLENBQUM7SUFHdEMsQ0FBQzs7OztJQUVELE9BQU87UUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7Ozs7OztJQUVPLFlBQVksQ0FBRSxJQUF1QyxFQUFFLEdBQUcsR0FBUTtRQUN0RSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztTQUN6QjtJQUNMLENBQUM7Ozs7O0lBRUQsR0FBRyxDQUFDLEdBQUcsR0FBUTtRQUNYLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Ozs7O0lBRUQsSUFBSSxDQUFDLEdBQUcsR0FBUTtRQUNaLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7O0lBRUQsS0FBSyxDQUFDLEdBQUcsR0FBUTtRQUNiLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Ozs7O0lBRUQsSUFBSSxDQUFDLEdBQUcsR0FBUTtRQUNaLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFRCxZQUFZO1FBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQ3BELFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQzNCLENBQUMsU0FBUzs7OztZQUFFLENBQUMsQ0FBZ0IsRUFBRSxFQUFFO2dCQUM5QixJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsRUFBRTtvQkFDMUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO29CQUNuQixDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7b0JBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO29CQUM3QixPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE2QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsS0FBSyxFQUFFLDhDQUE4QyxDQUFDLENBQUE7aUJBQ3hJO1lBQ0wsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN6QixDQUFDOzs7WUF0REosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7Ozs7O0lBRUcsK0JBQWdCOzs7OztJQUVoQixnQ0FBaUM7Ozs7O0lBQ2pDLGdDQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGZyb21FdmVudCwgU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIERlYnVnU2VydmljZSB7XHJcbiAgICBpc0RlYnVnID0gZmFsc2U7XHJcbiAgICBcclxuICAgIHByaXZhdGUgZGVzdHJveSQgPSBuZXcgU3ViamVjdCgpO1xyXG4gICAgcHJpdmF0ZSBkZWJ1Z1N1YjogU3Vic2NyaXB0aW9uID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIH1cclxuXHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuZGVzdHJveSQubmV4dCgpO1xyXG4gICAgICAgIHRoaXMuZGVzdHJveSQuY29tcGxldGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHdyaXRlTWVzc2FnZSggdHlwZTogJ2xvZycgfCAnd2FybicgfCAnZXJyb3InIHwgJ2luZm8nLCAuLi5tc2c6IGFueSkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRGVidWcpIHtcclxuICAgICAgICAgICAgY29uc29sZVt0eXBlXSguLi5tc2cpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsb2coLi4ubXNnOiBhbnkpIHtcclxuICAgICAgICB0aGlzLndyaXRlTWVzc2FnZSgnbG9nJywgbXNnKTtcclxuICAgIH1cclxuXHJcbiAgICB3YXJuKC4uLm1zZzogYW55KSB7XHJcbiAgICAgICAgdGhpcy53cml0ZU1lc3NhZ2UoJ3dhcm4nLCBtc2cpO1xyXG4gICAgfVxyXG5cclxuICAgIGVycm9yKC4uLm1zZzogYW55KSB7XHJcbiAgICAgICAgdGhpcy53cml0ZU1lc3NhZ2UoJ2Vycm9yJywgbXNnKTtcclxuICAgIH1cclxuXHJcbiAgICBpbmZvKC4uLm1zZzogYW55KSB7XHJcbiAgICAgICAgdGhpcy53cml0ZU1lc3NhZ2UoJ2luZm8nLCBtc2cpO1xyXG4gICAgfVxyXG5cclxuICAgIHVzZURlYnVnTW9kZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZGVidWdTdWIpIHtcclxuICAgICAgICAgICAgdGhpcy5kZWJ1Z1N1YiA9IGZyb21FdmVudChkb2N1bWVudC5ib2R5LCAna2V5ZG93bicpLnBpcGUoXHJcbiAgICAgICAgICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JClcclxuICAgICAgICAgICAgKS5zdWJzY3JpYmUoIChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5jdHJsS2V5ICYmIGUuc2hpZnRLZXkgJiYgZS5rZXkgPT09ICdEJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNEZWJ1ZyA9ICF0aGlzLmlzRGVidWc7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYPCfqrIlY0ZhcnJpcyBkZWJ1ZyBtb2RlIGlzICR7IHRoaXMuaXNEZWJ1ZyA/ICdzdGFydHRpbmcnIDogJ3N0b3BwZWQnfS7wn6qyYCwgJ2NvbG9yOiBibHVlOyBmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToxNnB4JylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5kZWJ1Z1N1YjtcclxuICAgIH1cclxufVxyXG4iXX0=