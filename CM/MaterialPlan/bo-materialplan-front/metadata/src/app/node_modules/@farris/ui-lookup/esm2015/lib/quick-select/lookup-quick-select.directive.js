/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Directive, HostListener, Injector, Input, NgZone, Renderer2 } from '@angular/core';
import { reqAnimFrame } from '@farris/ui-common';
import { InputGroupComponent } from '@farris/ui-input-group';
import { debounceTime, filter, map } from 'rxjs/operators';
import { LookupGridDisplayType } from '../lookup-displaytype';
import { LookupGridComponent } from '../lookup-grid.component';
import { LookupQuickSelectPanelComponent } from './quick-select-panel.component';
export class LookupQuickSelectDirective {
    /**
     * @param {?} injector
     * @param {?} ngzone
     * @param {?} render
     * @param {?} inputRef
     * @param {?} lookupRef
     * @param {?} cfr
     */
    constructor(injector, ngzone, render, inputRef, lookupRef, cfr) {
        this.injector = injector;
        this.ngzone = ngzone;
        this.render = render;
        this.inputRef = inputRef;
        this.lookupRef = lookupRef;
        this.cfr = cfr;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.options && this.options.enable) {
            this.inputRef.inputClick.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                e.stopPropagation();
                if (!this.panelElement) {
                    // 执行帮助前
                    this.lookupRef.dictPicking({
                        instance: this,
                    }).subscribe((/**
                     * @param {?} pr
                     * @return {?}
                     */
                    (pr) => {
                        if (this.lookupRef.displayType === LookupGridDisplayType.TreeList || !this.lookupRef.singleSelect) {
                            return;
                        }
                        const { show, customData, message } = this.lookupRef.dialogMgr.checkDictPickingResult(pr);
                        this.lookupRef.customData = customData;
                        if (show) {
                            this.createDataPanel();
                        }
                        else {
                            if (message) {
                                this.lookupRef.notifyService.warning(message);
                            }
                        }
                    }));
                }
            }));
            this.inputRef.valueChange.pipe(debounceTime(200)).subscribe((/**
             * @param {?} val
             * @return {?}
             */
            (val) => {
                this.lookupRef.dictPicking({ instance: this }).subscribe((/**
                 * @param {?} pr
                 * @return {?}
                 */
                (pr) => {
                    if (this.lookupRef.displayType === LookupGridDisplayType.TreeList || !this.lookupRef.singleSelect) {
                        return;
                    }
                    const { show, customData, message } = this.lookupRef.dialogMgr.checkDictPickingResult(pr);
                    this.lookupRef.customData = customData;
                    if (!this.panelElement) {
                        this.createDataPanel();
                    }
                    else {
                        this.loadData();
                    }
                }));
            }));
            this.inputRef.keydownHandle.pipe(filter((/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                return event.key === 'Escape' || event.key === 'Tab' || event.key === 'ArrowRight' || event.key === 'F2';
            }))).subscribe((/**
             * @return {?}
             */
            () => {
                this.hide();
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.lookupRef.overLayService.destory(this.lookupRef.el.nativeElement);
    }
    /**
     * @private
     * @return {?}
     */
    removePanelElement() {
        document.body.removeChild(this.panelElement);
        this.panelElement = null;
    }
    /**
     * @param {?=} e
     * @return {?}
     */
    hide(e) {
        reqAnimFrame((/**
         * @return {?}
         */
        () => {
            if (this.panelElement) {
                if (e && (e.type === 'mousewheel' || e.type === 'wheel')) {
                    this.removePanelElement();
                }
                else {
                    this.panelElement.classList.remove('f-area-show');
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.removePanelElement();
                    }), 120);
                }
                this.lookupRef.overLayService.destory(this.lookupRef.el.nativeElement);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    createDataPanel() {
        this.panelElement = document.createElement('div');
        this.panelElement.classList.add('overlay-pane', 'f-lookup_quick-panel', 'f-area-hide');
        document.body.appendChild(this.panelElement);
        const { width, left, top, height } = this.getPanelSize();
        this.panelElement.style.width = `${width}px`;
        this.panelElement.style.height = `${height}px`;
        this.panelElement.style.top = `${top}px`;
        this.panelElement.style.left = `${left}px`;
        this.panelElement.style.zIndex = '10001';
        // 创建数据展示组件
        /** @type {?} */
        const cmpFact = this.cfr.resolveComponentFactory(LookupQuickSelectPanelComponent);
        this.cmpRef = cmpFact.create(this.injector);
        this.cmpRef.instance.showMore = this.options.showMore;
        this.cmpRef.instance.textField = this.lookupRef.textField;
        this.cmpRef.instance.formatter = this.options.formatter;
        // cmpRef.location.nativeElement.classList.add('farris-main-area');
        this.panelElement.appendChild(this.cmpRef.location.nativeElement);
        this.cmpRef.changeDetectorRef.detectChanges();
        // more clicked 打开帮助窗口
        this.cmpRef.instance.moreClcik.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.hide(e);
            this.lookupRef.showDialog();
        }));
        this.cmpRef.instance.itemClick.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            const { data } = e;
            this.lookupRef.selectItem(data);
            this.hide();
        }));
        // 注册鼠标滚轮，点击事件，用于隐藏Panel
        this.lookupRef.overLayService.registerMouseEvent(this.lookupRef.el.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (!this.panelElement || e.target['closest']('.f-lookup_quick-panel')) {
                return;
            }
            if (this.cmpRef) {
                this.cmpRef.destroy();
                this.cmpRef = null;
            }
            this.hide(e);
            if (this.lookupRef.inputGroup.textbox.nativeElement === e.target) {
                return false;
            }
        }));
        this.panelElement.classList.add('f-area-show');
        this.loadData();
    }
    /**
     * @private
     * @return {?}
     */
    calculationPanelHeight() {
        return this.options.showItemsCount * 30 + (this.options.showMore ? 50 : 0) + this.options.footerHeight + 5;
    }
    /**
     * @private
     * @return {?}
     */
    getInputSizeInfo() {
        /** @type {?} */
        const el = this.lookupRef.viewType === 'text' ? this.inputRef.inputGroup : this.lookupRef.tagbox;
        return el.nativeElement.getBoundingClientRect();
    }
    /**
     * @private
     * @return {?}
     */
    getPanelSize() {
        let { width, height, top, left } = this.getInputSizeInfo();
        /** @type {?} */
        const bottom = window.innerHeight - height - top;
        /** @type {?} */
        let panelHeight = this.calculationPanelHeight();
        /** @type {?} */
        const h = top > bottom ? top : bottom;
        if (bottom > panelHeight) {
            top = top + height;
            // 面板由上向下展开
            this.panelElement.style.transformOrigin = '100% top';
        }
        else {
            if (top > bottom) {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                    top = 10;
                }
                else {
                    top = top - parseInt('' + panelHeight, 10) - 5;
                }
                // 面板由下向上展开
                this.panelElement.style.transformOrigin = '100% bottom';
            }
            else {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                }
                top = top + height;
            }
        }
        return { width, top, height: panelHeight, left };
    }
    /**
     * @private
     * @return {?}
     */
    getData() {
        /** @type {?} */
        let p = {
            pageInfo: {
                pageSize: this.options.showItemsCount,
                pageIndex: 1,
            },
        };
        /** @type {?} */
        let t = "all";
        if (this.lookupRef.isTextChange) {
            this.lookupRef._searchState = {
                field: this.lookupRef.textField,
                //"*",
                value: this.lookupRef.displayText
            };
            p = {
                search: this.lookupRef._searchState
            };
            t = 'search';
        }
        return this.lookupRef.httpMgr.lookupRequest(p, t).pipe(map((/**
         * @param {?} restData
         * @return {?}
         */
        (restData) => {
            if (restData) {
                return restData.items || [];
            }
            if (this.lookupRef.displayText && this.lookupRef.isTextChange) {
                return this.lookupRef.items.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    return n[this.lookupRef.textField].indexOf(this.lookupRef.displayText) > -1;
                })).slice(0, this.options.showItemsCount);
            }
            return this.lookupRef.items.slice(0, this.options.showItemsCount);
        })));
    }
    /**
     * @private
     * @return {?}
     */
    loadData() {
        /** @type {?} */
        const loadingRef = this.lookupRef.loadingService.show({ container: this.panelElement });
        this.getData().subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.cmpRef.instance.loadData(data);
            loadingRef.close();
        }));
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    registerKeyboardEvent($event) {
        if (!this.lookupRef.singleSelect) {
            return;
        }
        /** @type {?} */
        let rows = [];
        if (this.cmpRef) {
            rows = this.cmpRef.instance.data;
        }
        if (!rows || !rows.length) {
            return;
        }
        if ($event.code === 'ArrowUp' || $event.code === 'ArrowDown') {
            $event.preventDefault();
            $event.stopPropagation();
        }
        /** @type {?} */
        const idx = this.cmpRef.instance.activeIndex;
        /** @type {?} */
        let activeIndex = idx;
        /** @type {?} */
        const selectItem = (/**
         * @param {?} index
         * @return {?}
         */
        (index) => {
            activeIndex = index;
            this.cmpRef.instance.setActiveItem(index);
        });
        if ($event.code === 'ArrowUp') { // up
            if (idx > -1) {
                /** @type {?} */
                let prevIdx = idx - 1;
                if (prevIdx < 0) {
                    prevIdx = rows.length - 1;
                }
                selectItem(prevIdx);
            }
            else {
                selectItem(rows.length - 1);
            }
        }
        if ($event.code === 'ArrowDown') { // down
            // down
            /** @type {?} */
            let nextIdx = idx + 1;
            if (nextIdx >= rows.length) {
                nextIdx = 0;
            }
            selectItem(nextIdx);
        }
        if ($event.key === 'Enter') {
            if (rows && rows.length) {
                /** @type {?} */
                const data = rows[idx];
                this.lookupRef.selectItem(data);
                this.hide();
            }
        }
    }
}
LookupQuickSelectDirective.decorators = [
    { type: Directive, args: [{ selector: '[quick-select]' },] }
];
/** @nocollapse */
LookupQuickSelectDirective.ctorParameters = () => [
    { type: Injector },
    { type: NgZone },
    { type: Renderer2 },
    { type: InputGroupComponent },
    { type: LookupGridComponent },
    { type: ComponentFactoryResolver }
];
LookupQuickSelectDirective.propDecorators = {
    options: [{ type: Input, args: ['quick-select',] }],
    registerKeyboardEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    LookupQuickSelectDirective.prototype.options;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.panelElement;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.cmpRef;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.inputRef;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.lookupRef;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.cfr;
}
//# sourceMappingURL=data:application/json;base64,