/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-06-16 13:44:59
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-24 13:49:33
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { NgModule } from '@angular/core';
import { FarrisSafePipe } from './safe.pipe';
import { FarrisTemplateDirective } from './directives/farris-template.directive';
import { IdService } from './id.service';
import { ResizeObserverDirective } from './directives/resize-observer.directive';
import { FarrisReplaceXPipe } from './replaceX.pipe';
import { RuntimeStateService } from './service/runtime-state.service';
import { CommonUtils } from './common.utils';
export class FarrisCommonModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: FarrisCommonModule,
            providers: [
                CommonUtils,
                RuntimeStateService,
                IdService
            ]
        };
    }
}
FarrisCommonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FarrisSafePipe,
                    FarrisTemplateDirective,
                    ResizeObserverDirective,
                    FarrisReplaceXPipe
                ],
                imports: [],
                exports: [
                    FarrisSafePipe,
                    FarrisTemplateDirective,
                    ResizeObserverDirective,
                    FarrisReplaceXPipe
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM3QyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNqRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQWtCN0MsTUFBTSxPQUFPLGtCQUFrQjs7OztJQUMzQixNQUFNLENBQUMsT0FBTztRQUNWLE9BQU87WUFDSCxRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLFNBQVMsRUFBRTtnQkFDUCxXQUFXO2dCQUNYLG1CQUFtQjtnQkFDbkIsU0FBUzthQUNaO1NBQ0osQ0FBQztJQUNOLENBQUM7OztZQTFCSixRQUFRLFNBQUM7Z0JBQ04sWUFBWSxFQUFFO29CQUNWLGNBQWM7b0JBQ2QsdUJBQXVCO29CQUN2Qix1QkFBdUI7b0JBQ3ZCLGtCQUFrQjtpQkFDckI7Z0JBQ0QsT0FBTyxFQUFFLEVBQ1I7Z0JBQ0QsT0FBTyxFQUFFO29CQUNMLGNBQWM7b0JBQ2QsdUJBQXVCO29CQUN2Qix1QkFBdUI7b0JBQ3ZCLGtCQUFrQjtpQkFDckI7YUFDSiIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEBBdXRob3I6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQERhdGU6IDIwMTktMDYtMTYgMTM6NDQ6NTlcclxuICogQExhc3RFZGl0b3JzOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMTAtMjQgMTM6NDk6MzNcclxuICogQFFROiAxMDU1ODE4MjM5XHJcbiAqIEBWZXJzaW9uOiB2MC4wLjFcclxuICovXHJcbmltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZhcnJpc1NhZmVQaXBlIH0gZnJvbSAnLi9zYWZlLnBpcGUnO1xyXG5pbXBvcnQgeyBGYXJyaXNUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9mYXJyaXMtdGVtcGxhdGUuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgSWRTZXJ2aWNlIH0gZnJvbSAnLi9pZC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUmVzaXplT2JzZXJ2ZXJEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvcmVzaXplLW9ic2VydmVyLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEZhcnJpc1JlcGxhY2VYUGlwZSB9IGZyb20gJy4vcmVwbGFjZVgucGlwZSc7XHJcbmltcG9ydCB7IFJ1bnRpbWVTdGF0ZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2UvcnVudGltZS1zdGF0ZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ29tbW9uVXRpbHMgfSBmcm9tICcuL2NvbW1vbi51dGlscyc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gICAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAgICAgRmFycmlzU2FmZVBpcGUsXHJcbiAgICAgICAgRmFycmlzVGVtcGxhdGVEaXJlY3RpdmUsXHJcbiAgICAgICAgUmVzaXplT2JzZXJ2ZXJEaXJlY3RpdmUsXHJcbiAgICAgICAgRmFycmlzUmVwbGFjZVhQaXBlXHJcbiAgICBdLFxyXG4gICAgaW1wb3J0czogW1xyXG4gICAgXSxcclxuICAgIGV4cG9ydHM6IFtcclxuICAgICAgICBGYXJyaXNTYWZlUGlwZSxcclxuICAgICAgICBGYXJyaXNUZW1wbGF0ZURpcmVjdGl2ZSxcclxuICAgICAgICBSZXNpemVPYnNlcnZlckRpcmVjdGl2ZSxcclxuICAgICAgICBGYXJyaXNSZXBsYWNlWFBpcGVcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZhcnJpc0NvbW1vbk1vZHVsZSB7XHJcbiAgICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBuZ01vZHVsZTogRmFycmlzQ29tbW9uTW9kdWxlLFxyXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICAgICAgICAgIENvbW1vblV0aWxzLFxyXG4gICAgICAgICAgICAgICAgUnVudGltZVN0YXRlU2VydmljZSxcclxuICAgICAgICAgICAgICAgIElkU2VydmljZVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4iXX0=