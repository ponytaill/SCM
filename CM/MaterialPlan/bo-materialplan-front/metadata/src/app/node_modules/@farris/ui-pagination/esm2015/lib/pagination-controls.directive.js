/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, EventEmitter, Input, Output, Optional, Injector } from '@angular/core';
import { PaginationService } from './pagination.service';
/**
 * @record
 */
export function Page() { }
if (false) {
    /** @type {?} */
    Page.prototype.label;
    /** @type {?} */
    Page.prototype.value;
}
/**
 * This directive is what powers all pagination controls components, including the default one.
 * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync
 * with the pagination controls.
 */
export class PaginationControlsDirective {
    /**
     * @param {?} service
     * @param {?} changeDetectorRef
     * @param {?} injector
     */
    constructor(service, changeDetectorRef, injector) {
        this.service = service;
        this.changeDetectorRef = changeDetectorRef;
        this.injector = injector;
        this.maxSize = 7;
        this.pageChange = new EventEmitter();
        this.pageSizeChange = new EventEmitter();
        this.pages = [];
        if (!this.service) {
            if (this.injector) {
                this.service = this.injector.get(PaginationService);
            }
            else {
                this.service = new PaginationService();
            }
        }
        this.changeSub = this.service.change
            .subscribe((/**
         * @param {?} id
         * @return {?}
         */
        id => {
            if (this.id === id) {
                this.updatePageLinks();
                this.changeDetectorRef.markForCheck();
                this.changeDetectorRef.detectChanges();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.id === undefined) {
            this.id = this.service.defaultId();
        }
        this.updatePageLinks();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.updatePageLinks();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.changeSub.unsubscribe();
        this.service.removeInstance(this.id);
    }
    /**
     * Go to the previous page
     * @return {?}
     */
    previous() {
        this.checkValidId();
        this.setCurrent(this.getCurrent() - 1);
    }
    /**
     * Go to the next page
     * @return {?}
     */
    next() {
        this.checkValidId();
        this.setCurrent(this.getCurrent() + 1);
    }
    /**
     * lucas added 2019/07/02
     * Go to the first page
     * @param {?} $event
     * @return {?}
     */
    first($event) {
        $event.stopPropagation();
        this.checkValidId();
        this.setCurrent(1);
    }
    /**
     * lucas added 2019/07/02
     * Go to the last page
     * @param {?} $event
     * @return {?}
     */
    last($event) {
        $event.stopPropagation();
        this.checkValidId();
        this.setCurrent(this.getLastPage());
    }
    /**
     * Returns true if current page is first page
     * @return {?}
     */
    isFirstPage() {
        return this.getCurrent() === 1;
    }
    /**
     * Returns true if current page is last page
     * @return {?}
     */
    isLastPage() {
        return this.getLastPage() === this.getCurrent();
    }
    /**
     * Set the current page number.
     * @param {?} page
     * @param {?=} pageSize
     * @param {?=} $event
     * @return {?}
     */
    setCurrent(page, pageSize, $event) {
        if ($event) {
            $event.stopPropagation();
        }
        if (!pageSize) {
            pageSize = this.getPageSize();
        }
        this.pageChange.emit({ pageIndex: page, pageSize });
    }
    /**
     * Get the current page number.
     * @return {?}
     */
    getCurrent() {
        return this.service.getCurrentPage(this.id);
    }
    /**
     * @param {?} pageList
     * @return {?}
     */
    setPageList(pageList) {
        this.service.setPageList(this.id, pageList);
    }
    /**
     * Returns the last page number
     * @return {?}
     */
    getLastPage() {
        /** @type {?} */
        const inst = this.service.getInstance(this.id);
        if (inst.totalItems < 1) {
            // when there are 0 or fewer (an error case) items, there are no "pages" as such,
            // but it makes sense to consider a single, empty page as the last page.
            return 1;
        }
        return Math.ceil(inst.totalItems / inst.itemsPerPage);
    }
    /**
     * @return {?}
     */
    getTotalItems() {
        return this.service.getInstance(this.id).totalItems;
    }
    /**
     * @return {?}
     */
    getPageList() {
        return this.service.getInstance(this.id).pageList;
    }
    /**
     * @return {?}
     */
    getPageSize() {
        return this.service.getInstance(this.id).itemsPerPage;
    }
    /**
     * @param {?} pager
     * @return {?}
     */
    goto(pager) {
        // alert(pager);
        this.setCurrent(pager);
    }
    /**
     * @private
     * @return {?}
     */
    checkValidId() {
        if (this.service.getInstance(this.id).id == null) {
            console.warn(`PaginationControlsDirective: the specified id "${this.id}" does not match any registered PaginationInstance`);
        }
    }
    /**
     * Updates the page links and checks that the current page is valid. Should run whenever the
     * PaginationService.change stream emits a value matching the current ID, or when any of the
     * input values changes.
     * @private
     * @return {?}
     */
    updatePageLinks() {
        /** @type {?} */
        const inst = this.service.getInstance(this.id);
        /** @type {?} */
        const correctedCurrentPage = this.outOfBoundCorrection(inst);
        if (correctedCurrentPage !== inst.currentPage) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.setCurrent(correctedCurrentPage);
                this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);
            }));
        }
        else {
            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);
        }
    }
    /**
     * Checks that the instance.currentPage property is within bounds for the current page range.
     * If not, return a correct value for currentPage, or the current value if OK.
     * @private
     * @param {?} instance
     * @return {?}
     */
    outOfBoundCorrection(instance) {
        /** @type {?} */
        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);
        if (totalPages < instance.currentPage && 0 < totalPages) {
            return totalPages;
        }
        else if (instance.currentPage < 1) {
            return 1;
        }
        return instance.currentPage;
    }
    /**
     * Returns an array of Page objects to use in the pagination controls.
     * @private
     * @param {?} currentPage
     * @param {?} itemsPerPage
     * @param {?} totalItems
     * @param {?} paginationRange
     * @return {?}
     */
    createPageArray(currentPage, itemsPerPage, totalItems, paginationRange) {
        // paginationRange could be a string if passed from attribute, so cast to number.
        paginationRange = +paginationRange;
        /** @type {?} */
        const pages = [];
        /** @type {?} */
        const totalPages = Math.ceil(totalItems / itemsPerPage);
        /** @type {?} */
        const halfWay = Math.ceil(paginationRange / 2);
        /** @type {?} */
        const isStart = currentPage <= halfWay;
        /** @type {?} */
        const isEnd = totalPages - halfWay < currentPage;
        /** @type {?} */
        const isMiddle = !isStart && !isEnd;
        /** @type {?} */
        const ellipsesNeeded = paginationRange < totalPages;
        /** @type {?} */
        let i = 1;
        while (i <= totalPages && i <= paginationRange) {
            /** @type {?} */
            let label;
            /** @type {?} */
            const pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);
            /** @type {?} */
            const openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));
            /** @type {?} */
            const closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));
            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {
                label = '...';
            }
            else {
                label = pageNumber;
            }
            pages.push({
                label,
                value: pageNumber
            });
            i++;
        }
        return pages;
    }
    /**
     * Given the position in the sequence of pagination links [i],
     * figure out what page number corresponds to that position.
     * @private
     * @param {?} i
     * @param {?} currentPage
     * @param {?} paginationRange
     * @param {?} totalPages
     * @return {?}
     */
    calculatePageNumber(i, currentPage, paginationRange, totalPages) {
        /** @type {?} */
        const halfWay = Math.ceil(paginationRange / 2);
        if (i === paginationRange) {
            return totalPages;
        }
        else if (i === 1) {
            return i;
        }
        else if (paginationRange < totalPages) {
            if (totalPages - halfWay < currentPage) {
                return totalPages - paginationRange + i;
            }
            else if (halfWay < currentPage) {
                return currentPage - halfWay + i;
            }
            else {
                return i;
            }
        }
        else {
            return i;
        }
    }
}
PaginationControlsDirective.decorators = [
    { type: Directive, args: [{
                selector: 'pagination-template,[pagination-template]',
                exportAs: 'paginationApi'
            },] }
];
/** @nocollapse */
PaginationControlsDirective.ctorParameters = () => [
    { type: PaginationService, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef },
    { type: Injector, decorators: [{ type: Optional }] }
];
PaginationControlsDirective.propDecorators = {
    id: [{ type: Input }],
    maxSize: [{ type: Input }],
    pageChange: [{ type: Output }],
    pageSizeChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    PaginationControlsDirective.prototype.id;
    /** @type {?} */
    PaginationControlsDirective.prototype.maxSize;
    /** @type {?} */
    PaginationControlsDirective.prototype.pageChange;
    /** @type {?} */
    PaginationControlsDirective.prototype.pageSizeChange;
    /** @type {?} */
    PaginationControlsDirective.prototype.pages;
    /**
     * @type {?}
     * @private
     */
    PaginationControlsDirective.prototype.changeSub;
    /**
     * @type {?}
     * @private
     */
    PaginationControlsDirective.prototype.service;
    /** @type {?} */
    PaginationControlsDirective.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    PaginationControlsDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,