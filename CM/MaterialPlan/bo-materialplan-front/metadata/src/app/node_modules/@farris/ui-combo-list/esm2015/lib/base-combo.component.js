/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NotifyService } from '@farris/ui-notify';
import { Input, Output, EventEmitter, ElementRef, ChangeDetectorRef, Renderer2, ViewChild, Inject, Injector, NgZone } from '@angular/core';
import { Subject, interval, of, fromEvent } from 'rxjs';
import { NgControl } from '@angular/forms';
import { DOCUMENT } from '@angular/common';
import { takeUntil, filter, skip, debounceTime, throttle, take, throwIfEmpty } from 'rxjs/operators';
import { ComboService } from './combo.service';
import { InputGroupComponent } from '@farris/ui-input-group';
import { ComboLocaleService } from './services/combo.locale.service';
import { CommonUtils, reqAnimFrame } from '@farris/ui-common';
import { EventManager } from '@angular/platform-browser';
import ResizeObserver from 'resize-observer-polyfill';
/** @type {?} */
let nextUniqueId = 0;
export class BaseComboComponent {
    /**
     * @param {?} el
     * @param {?} cdr
     * @param {?} document
     * @param {?} render
     * @param {?} comboService
     * @param {?} injector
     */
    constructor(el, cdr, document, render, comboService, injector) {
        this.el = el;
        this.cdr = cdr;
        this.document = document;
        this.render = render;
        this.comboService = comboService;
        this.injector = injector;
        this.disabled = false;
        this.readonly = false;
        this.editable = true;
        this.placeholder = '';
        this.panelWidth = 300;
        this.panelHeight = 'auto';
        this.autoWidth = true;
        this.enableClear = true;
        /**
         * 禁用只读时显示 placeholder
         */
        this.forcePlaceholder = false;
        /**
         * 任意输入 20210202
         */
        this.nosearch = false;
        // 鼠标滑过显示文本内容
        this.enableTitle = true;
        /**
         * 展示类型： text文本，tag标签。 默认 text
         */
        this.viewType = 'text';
        this.displayText = '';
        this.maxHeight = 200;
        this.enableCancelSelected = false;
        // 如果面板已打开， 点击清空按钮时是否关闭面板。true: 关闭； false: 不关闭；
        this.hidePanelOnClear = false;
        /**
         * 开启后，ngModel 的值为 valueField or  idField; 否则为textField的值
         */
        this.useValue = false;
        this.separator = ',';
        this.showPanel = new EventEmitter();
        this.hidePanel = new EventEmitter();
        this.clear = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.selectChange = new EventEmitter();
        this.isOpen = false;
        this.comPosition = {};
        this.destroy$ = new Subject();
        this.ngControl = null;
        this.groupIcon = '<span class="f-icon f-icon-arrow-60-down"></span>';
        this._cmbPanel = null;
        this._comboPanelCreated$ = new Subject();
        // private _hasPosited = false;
        // private _container: Element;
        this.willHide$ = new Subject();
        this.panelListener = null;
        this.ngZone = null;
        this.mouseWheelEvent = null;
        this.textChangeSubject = new Subject();
        this.initdataSubscription = null;
        this.customData = null;
        this.originalText = '';
        this.isTextChange = false;
        this.treeClientSearch = new Subject();
        this.ro = null;
        this.onChange = (/**
         * @return {?}
         */
        () => null);
        this.onTouched = (/**
         * @return {?}
         */
        () => null);
        this.initToggleAction();
        this.initSelectionsChangeAction();
        this.initDatasChangeAction();
        this.commonUtils = this.injector.get(CommonUtils, null);
        this.willHide$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            if (!this.nosearch && this.displayText !== this.originalText) {
                this.displayText = this.originalText;
                if (this.isLookup()) {
                    this.onChange(this.displayText);
                }
                else {
                    /** @type {?} */
                    const _displayText = this.comboService.getValue(this.textField);
                    this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
                }
            }
            this.onTouched();
            this.hidePanel.emit(this);
        }));
        this.ngZone = this.injector.get(NgZone);
        this.eventMgr = this.injector.get(EventManager);
        this.emitTextChange();
        this.notifySer = this.injector.get(NotifyService, null);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set context(value) {
        this.comboService.context = value;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set mappingField(v) {
        this.mapFields = v;
    }
    /**
     * @return {?}
     */
    get mappingField() {
        return this.mapFields;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set data(val) {
        this.comboService.data = val;
    }
    /**
     * @return {?}
     */
    get data() {
        return this.comboService.data;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set idField(val) {
        this.comboService.idField = val;
    }
    /**
     * @return {?}
     */
    get idField() {
        return this.comboService.idField;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set valueField(val) {
        this.comboService.valueField = val;
    }
    /**
     * @return {?}
     */
    get valueField() {
        return this.comboService.valueField ? this.comboService.valueField : this.idField;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set textField(val) {
        this.comboService.textField = val;
    }
    /**
     * @return {?}
     */
    get textField() {
        return this.comboService.textField;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set multiSelect(val) {
        this.comboService.multiSelect = val;
    }
    /**
     * @return {?}
     */
    get multiSelect() {
        return this.comboService.multiSelect;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set uri(val) {
        this.comboService.uri = val;
    }
    /**
     * @return {?}
     */
    get uri() {
        return this.comboService.uri;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set selectedValues(val) {
        this.comboService.selectedValues = val;
    }
    /**
     * @return {?}
     */
    get selectedValues() {
        return this.comboService.selectedValues;
    }
    /**
     * @return {?}
     */
    get selectedValuesStr() {
        if (this.selectedValues === null || this.selectedValues === undefined) {
            this.selectedValues = '';
        }
        return (this.selectedValues) + '';
    }
    /**
     * 远端过滤
     * @return {?}
     */
    get remoteSearch() {
        return this.comboService.remoteSearch;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set remoteSearch(val) {
        this.comboService.remoteSearch = val;
    }
    /**
     * @param {?} cmp
     * @return {?}
     */
    set cmbPanel(cmp) {
        if (cmp) {
            this._cmbPanel = cmp;
            this.ro.observe(cmp.nativeElement);
            this._comboPanelCreated$.next(cmp);
        }
        else {
            this._cmbPanel = null;
            // this.ro.unobserve(this.el.nativeElement);
            if (this.ro) {
                this.ro.disconnect();
            }
            this._comboPanelCreated$.next(null);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selections(value) {
        this.comboService.selections = value;
    }
    /**
     * @return {?}
     */
    get selections() {
        if (this.comboService.selections) {
            return this.comboService.selections.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n !== null && n !== undefined));
        }
        return [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.localeService = this.injector.get(ComboLocaleService, '');
        if (this.localeService) {
            /** @type {?} */
            const localConfig = this.localeService.getLocaleConfig();
            if (localConfig) {
                if (!this.placeholder) {
                    this.placeholder = localConfig['placeholder'] || '请选择';
                }
            }
        }
        this.comboService.separator = this.separator;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const that = this;
        this.ngControl = this.injector.get(NgControl, null);
        fromEvent(window, 'resize').pipe(takeUntil(this.destroy$)).pipe(debounceTime(100), throttle((/**
         * @param {?} ev
         * @return {?}
         */
        ev => interval(100)))).subscribe((/**
         * @return {?}
         */
        () => {
            this.updatePanelWidth();
            if (this.isOpen) {
                this.comboService.isOpen$.next(false);
                this.willHide$.next();
            }
        }));
        if (this.ngZone) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    that.updatePanelWidth();
                }));
            }));
            /** @type {?} */
            let reszieTimer = null;
            this.ro = new ResizeObserver((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => {
                    if (reszieTimer) {
                        clearTimeout(reszieTimer);
                    }
                    reszieTimer = setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        if (that._cmbPanel && that.panelElement) {
                            reqAnimFrame((/**
                             * @return {?}
                             */
                            () => {
                                that.updatePosition(that._cmbPanel.nativeElement);
                                if (that._cmbPanel.nativeElement.className.indexOf('f-area-show') === -1) {
                                    that.render.addClass(that._cmbPanel.nativeElement, 'f-area-show');
                                }
                            }));
                        }
                    }), 10);
                }));
            }));
        }
        this.comboService.injectService();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        this.comboService.serachValue$.unsubscribe();
        if (this.mouseWheelEvent) {
            this.mouseWheelEvent();
        }
    }
    /**
     * @private
     * @return {?}
     */
    updatePanelWidth() {
        const { width } = this.getInputSizeInfo();
        this.panelWidth = this.autoWidth ? width : this.panelWidth;
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    onClick($event = null) {
        if ($event) {
            if ($event.stopPropagation) {
                $event.stopPropagation();
            }
            else {
                if ($event.originalEvent) {
                    $event.originalEvent.stopPropagation();
                }
            }
        }
        // 重复执行面板关闭事件 故注释掉 20220917
        // if (this.isOpen) {
        //     this.willHide$.next();
        // } else {
        //     this.comboService.isOpen$.next(!this.isOpen);
        // }
        this.comboService.isOpen$.next(!this.isOpen);
        if (this.input && this.input.textbox) {
            this.input.textbox.nativeElement.focus();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onBlur(event) {
        this.onTouched();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onFocus(event) {
        // // 启用任意输入后，文本框得到焦点后不弹出下拉面板。2021/02/19
        // if (this.nosearch) {
        //     return ;
        // }
        // if (!this.isOpen) {
        //     this.comboService.isOpen$.next(true);
        //     // 延迟执行变更检测 更新弹出框位置
        // of('').pipe(debounceTime(0)).subscribe(() => {
        //     this.cdr.detectChanges();
        // });
        // } else {
        //     this.hide();
        // }
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    onInputclick($event) {
        if ($event && $event.stopPropagation) {
            $event.stopPropagation();
        }
        this.comboService.isOpen$.next(!this.isOpen);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEnter(event) { }
    /**
     * @return {?}
     */
    blur() {
        this.input.textbox.nativeElement.blur();
    }
    /**
     * @return {?}
     */
    focus() {
        this.input.textbox.nativeElement.focus();
    }
    /**
     * @return {?}
     */
    onClear() {
        this.selectedValues = '';
        this.selections = [];
        this.onValueChange({ text: '', value: '', selections: [] });
        this.clear.emit();
        if (this.isOpen && this.hidePanelOnClear) {
            // this.comboService.isOpen$.next(false);
            this.willHide$.next();
        }
    }
    /**
     * @private
     * @return {?}
     */
    getInputSizeInfo() {
        /** @type {?} */
        const el = this.viewType === 'text' ? this.input.inputGroup : this.input2;
        return el.nativeElement.getBoundingClientRect();
    }
    /**
     * @private
     * @return {?}
     */
    emitTextChange() {
        return this.textChangeSubject.pipe(debounceTime(200)).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        (r) => {
            /** @type {?} */
            const _selectedValues = this.selectedValues;
            /** @type {?} */
            const val = r ? r : this.displayText;
            if (r === '') {
                this.onClear();
            }
            else if (this.nosearch) {
                this.onValueChange({ text: r, value: '', selections: this.selections, nosearch: true });
            }
            if (!this.remoteSearch) {
                if (!this.multiSelect) {
                    if (this.comboService.displayType === 'LOOKUPTREELIST') {
                        this.treeClientSearch.next(val);
                    }
                    else {
                        this.comboService.serachValue$.next(val);
                    }
                }
                else {
                    /** @type {?} */
                    const valArr = (val + '').split(this.separator);
                    /** @type {?} */
                    const appendVal = valArr[valArr.length - 1] ? valArr[valArr.length - 1] : '';
                    this.comboService.serachValue$.next(appendVal);
                }
                // if (_selectedValues !== this.selectedValues) {
                //     this.onValueChange({ text: this.displayText, value: this.selectedValues, selections: this.selections });
                // }
            }
            else {
                this.filterDataOnServer(val, '*');
            }
        }));
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    __createPanel(value) {
        /** @type {?} */
        let params = {};
        /** @type {?} */
        let method = 'get';
        if (value instanceof Object) {
            const { params: _p, data, method: _m, showDialog } = value;
            if (showDialog === false) {
                return;
            }
            if (data) {
                params = { data };
                this.customData = data;
            }
            else {
                if (_p) {
                    params = { data: _p };
                    this.customData = _p;
                }
                else {
                    this.customData = null;
                }
            }
            if (_m) {
                method = _m;
            }
        }
        else if (typeof value === 'boolean') {
            if (value === false) {
                return;
            }
        }
        this.initCreatPanelAction();
        if (this.uri) {
            this.updateSelectedValues();
            if (this.isLookup()) {
                this.isOpen = true;
            }
        }
        else {
            this.isOpen = true;
        }
        if (this.comboService.displayType === 'LOOKUPTREELIST') {
            params.enableFullTree = this['enableFullTree'];
            params.loadTreeDataType = this['loadTreeDataType'];
        }
        if (this.isLookup() && this.input && this.nosearch) {
            this.input.textbox.nativeElement.disabled = true;
        }
        /** @type {?} */
        const focusInput = (/**
         * @return {?}
         */
        () => {
            if (this.isLookup() && this.input && this.nosearch) {
                this.input.textbox.nativeElement.disabled = false;
                this.input.focus();
            }
        });
        this.initdataSubscription = this.comboService.initData(params, method, this.selectedValues).pipe(throwIfEmpty(focusInput)).subscribe((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            if (!this.isOpen) {
                this.isOpen = true;
            }
            focusInput();
            this.cdr.detectChanges();
        }));
        // 禁止滚动
        // this.render.setStyle(this.containerElement, 'pointer-events', 'auto');
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.registerDocumentEvent();
        }));
    }
    // 显示前事件
    /**
     * @private
     * @return {?}
     */
    onBeforeShow() {
        if (!this.beforeShow) {
            this.beforeShow = (/**
             * @return {?}
             */
            () => of(''));
        }
        return this.beforeShow(this).pipe(take(1));
    }
    /**
     * @private
     * @return {?}
     */
    isLookup() {
        return this.comboService.displayType.indexOf('LOOKUP') > -1;
    }
    // 隐藏前事件
    /**
     * @private
     * @return {?}
     */
    onBeforeHide() {
        if (!this.beforeHide) {
            this.beforeHide = (/**
             * @return {?}
             */
            () => of(''));
        }
        this.beforeHide(this)
            .pipe(take(1))
            .subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (typeof value === 'boolean') {
                if (value) {
                    this.hide(true);
                }
            }
            else if (typeof value === 'object') {
                if (value.hide) {
                    this.hide(true);
                }
                else {
                    if (value.message) {
                        if (this.notifySer) {
                            this.notifySer.warning(value.message);
                        }
                        else {
                            // console.info(value.message);
                        }
                    }
                }
            }
            else {
                this.hide(true);
            }
        }));
    }
    // 显示或隐藏下拉框
    /**
     * @private
     * @return {?}
     */
    initToggleAction() {
        this.comboService.isOpen$.pipe(debounceTime(20), takeUntil(this.destroy$), skip(1)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (this.readonly || this.disabled) {
                return;
            }
            if (value) {
                this.onBeforeShow().subscribe((/**
                 * @param {?} v
                 * @return {?}
                 */
                (v) => {
                    this.__createPanel(v);
                }));
                return;
            }
            else {
                this.onBeforeHide();
            }
            this.cdr.detectChanges();
        }));
        this._comboPanelCreated$.pipe(takeUntil(this.destroy$), filter((/**
         * @param {?} value
         * @return {?}
         */
        value => !!value))).subscribe((/**
         * @param {?} cmp
         * @return {?}
         */
        (cmp) => {
            cmp.nativeElement.style.display = '';
            this.panelElement.appendChild(cmp.nativeElement);
            /** @type {?} */
            let transitionFlag = true;
            cmp.nativeElement.addEventListener('transitionend', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e.target === e.currentTarget && transitionFlag) {
                    transitionFlag = false;
                    this.showPanel.emit(this);
                }
            }));
            if (this.isLookup()) {
                cmp.nativeElement.style.width = `${this.panelWidth}px`;
                cmp.nativeElement.style.height = `${this.panelHeight}px`;
                this.render.addClass(cmp.nativeElement, 'f-area-show');
            }
            // this.updatePosition(cmp.nativeElement);
            // this.cdr.detectChanges();
        }));
        this.destroy$.pipe(take(1)).subscribe((/**
         * @return {?}
         */
        () => {
            this.comboService.closeLoading();
            nextUniqueId = 0;
            if (this.panelListener) {
                this.panelListener();
            }
            if (this.initdataSubscription) {
                this.initdataSubscription.unsubscribe();
                this.initdataSubscription = null;
            }
            this.removePanelElement();
        }));
    }
    /**
     * @private
     * @param {?} action
     * @return {?}
     */
    iframeEventHandle(action) {
        /** @type {?} */
        const iframes = Array.from(document.querySelectorAll('iframe'));
        if (iframes && iframes.length) {
            for (const iframe of iframes) {
                /** @type {?} */
                const iframeDoc = iframe.contentDocument;
                if (iframeDoc) {
                    iframeDoc[action]('mousedown', this._documentClickEvent);
                    iframeDoc[action]('mousewheel', this._documentClickEvent);
                    iframeDoc[action]('DOMMouseScroll', this._documentClickEvent);
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    removeDocumentListener() {
        if (this._documentClickEvent) {
            document.removeEventListener('mousedown', this._documentClickEvent, true);
            document.removeEventListener('mousewheel', this._documentClickEvent, true);
            document.removeEventListener('DOMMouseScroll', this._documentClickEvent, true);
            if (top !== window) {
                top.document.body.removeEventListener('mousedown', this._documentClickEvent, true);
            }
            this.iframeEventHandle('removeEventListener');
            this._documentClickEvent = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    registerDocumentEvent() {
        // 注册 mousedown 事件 隐藏panel
        document.addEventListener('mousedown', (this._documentClickEvent = (/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (!this.el.nativeElement.contains(event.target) &&
                this._cmbPanel &&
                !this.contains(this._cmbPanel, event)) {
                this.comboService.isOpen$.next(false);
                // this.willHide$.next();
            }
        })), true);
        document.addEventListener('mousewheel', this._documentClickEvent, true);
        document.addEventListener('DOMMouseScroll', this._documentClickEvent, true);
        if (top !== window) {
            top.document.body.addEventListener('mousedown', this._documentClickEvent, true);
        }
        this.iframeEventHandle('addEventListener');
    }
    // 创建下拉面板时事件
    /**
     * @private
     * @return {?}
     */
    initCreatPanelAction() {
        if (this.panelElement) {
            return;
        }
        this.createPanel(document.body);
        this.panelListener = this.render.listen(this.panelElement, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.stopPropagation();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    removePanelElement() {
        reqAnimFrame((/**
         * @return {?}
         */
        () => {
            if (this.panelElement) {
                document.body.removeChild(this.panelElement);
                this.panelElement = null;
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    initSelectionsChangeAction() {
        this.comboService.selections$.pipe(takeUntil(this.destroy$), debounceTime(100)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value.action === 'initData') {
                this.onSelectionsChange(this.selections);
            }
            else {
                this.onSelectionsChangeDefault();
            }
        }));
    }
    /**
     * @protected
     * @return {?}
     */
    initDatasChangeAction() { }
    // canNull 解决取消选中时依然显示
    /**
     * @private
     * @return {?}
     */
    onSelectionsChangeDefault() {
        /** @type {?} */
        const _displayText = this.comboService.getValue(this.textField);
        /** @type {?} */
        const _selectedValues = this.comboService.getValue(this.idField);
        if (this.displayText !== _displayText && !this.nosearch) {
            this.displayText = _displayText || this.displayText;
            this.displayText = this.displayText || '';
            this.originalText = _selectedValues ? _displayText : this.displayText;
        }
        if (this.input) {
            this.input.textbox.nativeElement.value = this.displayText;
        }
        this.selectedValues =
            (_selectedValues !== '' && _selectedValues !== undefined && _selectedValues !== null) ? _selectedValues : this.selectedValues;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    }
    /**
     * @protected
     * @param {?} v
     * @return {?}
     */
    onSelectionsChange(v) { }
    /**
     * @param {?=} clearMapFields
     * @return {?}
     */
    updateMappingFieldValue(clearMapFields = false) {
        if (this.mappingField &&
            this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            const bindingData = this.ngControl.formDirective.form.bindingData;
            if (clearMapFields) {
                this.selectedValues = '';
            }
            if (bindingData.setValue) {
                /** @type {?} */
                const bindingPath = this.ngControl.formDirective.form.bindingPath;
                /** @type {?} */
                let pathArr = [];
                if (bindingPath) {
                    pathArr = bindingPath.split('/').filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n !== ''));
                }
                /** @type {?} */
                const mappingField = this.mappingField ? this.mappingField : '';
                bindingData.setValue(pathArr.concat(mappingField.split('.')), this.selectedValues, true, true);
            }
            else if (this.commonUtils) {
                this.commonUtils.setValue(bindingData, this.mappingField, this.selectedValues);
            }
            // if (!bindingData.setValue && this.commonUtils) {
            //     this.commonUtils.setValue(bindingData, this.mappingField, this.selectedValues);
            // }
        }
    }
    /**
     * @return {?}
     */
    updateSelectedValues() {
        if (this.mappingField &&
            this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            const bindingData = this.ngControl.formDirective.form.bindingData;
            if (bindingData.getValue) {
                /** @type {?} */
                const bindingPath = this.ngControl.formDirective.form.bindingPath;
                /** @type {?} */
                let pathArr = [];
                if (bindingPath) {
                    pathArr = bindingPath.split('/').filter((/**
                     * @param {?} value
                     * @return {?}
                     */
                    value => value !== ''));
                }
                /** @type {?} */
                const mappingField = this.mappingField ? this.mappingField : '';
                this.selectedValues = bindingData.getValue(pathArr.concat(mappingField.split('.')));
            }
            else if (this.commonUtils) {
                this.selectedValues = this.commonUtils.getValue(this.mappingField, bindingData);
            }
        }
        else if (!this.mappingField) {
            // this.selectedValues = this.displayText
        }
    }
    /**
     * @param {?=} val
     * @return {?}
     */
    onTextChange(val) {
        this.isTextChange = true;
        if (this.nosearch) {
            this.selectedValues = val;
            this.updateMappingFieldValue(this.isLookup());
            this.onChange(val);
        }
        this.textChangeSubject.next(val);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    onValueChange(changes) {
        this.displayText = changes.text;
        this.originalText = this.displayText;
        if (!this.uri && this.data && this.data.length > 0 && (!this['displayType'] || this.useValue)) {
            this.onChange(this.selectedValues);
        }
        else {
            this.onChange(this.displayText);
        }
        // if (!changes.nosearch) {
        // }
        this.valueChange.emit(changes);
        this.updateMappingFieldValue();
        this.onTouched();
        // if (this.isOpen && changes.emitHidePanel) { this.willHide$.next(); }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onSelect(item) { }
    /**
     * @param {?} item
     * @return {?}
     */
    onUnSelected(item) { }
    /**
     * emit: 默认为 true;
     * @param {?=} emit
     * @return {?}
     */
    hide(emit = true) {
        if (!this.isOpen) {
            return;
        }
        this.removeDocumentListener();
        this.isOpen = false;
        if (emit) {
            this.willHide$.next();
        }
        if (this.initdataSubscription) {
            this.initdataSubscription.unsubscribe();
            this.initdataSubscription = null;
        }
        this.removePanelElement();
    }
    /**
     * @return {?}
     */
    show() {
        if (this.isOpen) {
            return;
        }
        this.onBeforeShow().subscribe((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            this.__createPanel(value);
        }));
        this.cdr.detectChanges();
    }
    /**
     * @private
     * @param {?} host
     * @return {?}
     */
    createPanel(host) {
        this.panelElement = this.document.createElement('div');
        this.panelElement.id = `overlay-${nextUniqueId++}`;
        this.panelElement.classList.add('overlay-pane');
        this.panelElement.style.display = 'none';
        host.appendChild(this.panelElement);
        this.comboService.panelElement = this.panelElement;
        if (this.isLookup()) {
            const { panelWidth, top, left } = this.getPanelSize();
            this.panelElement.style.width = `${this.panelWidth}px`;
            this.panelElement.style.height = `${this.panelHeight}px`;
            this.panelElement.style.top = `${top}px`;
            this.panelElement.style.left = `${left}px`;
            this.panelElement.style.zIndex = 10001;
            this.panelElement.classList.add('f-combo-lookup');
        }
        else {
            this.panelElement.style.overflow = 'hidden';
            this.render.setStyle(this.panelElement, 'top', '0');
            this.render.setStyle(this.panelElement, 'left', '0');
            this.panelElement.classList.add('f-combo-lookup');
        }
        this.panelElement.style.display = '';
    }
    /**
     * @private
     * @param {?=} target
     * @return {?}
     */
    getPanelSize(target) {
        /** @type {?} */
        let panelHeight = this.panelHeight;
        this.innerPanelHeight = 202;
        if (this.autoWidth) {
            const { width } = this.getInputSizeInfo();
            this.panelWidth = width ? width : this.panelWidth;
        }
        // 如果taget高度存在 修改pnaelHeight 用于重定位弹出框位置
        if (target && target.tagName && panelHeight === 'auto') {
            /** @type {?} */
            const targetHeight = target.scrollHeight;
            /** @type {?} */
            const isNoRecord = !!target.querySelector('.f-table-norecords-content');
            // if (this.uri) {
            //     if (this.data && this.data.length) {
            //         if (this.comboService.displayType === 'LIST' && target.querySelector('.list-group')) {
            //             this.innerPanelHeight = target.querySelector('.list-group')['offsetHeight'] + 2;
            //         } else {
            //             this.innerPanelHeight = targetHeight;
            //         }
            //     }
            // } else {
            //     this.innerPanelHeight = targetHeight && targetHeight > 10 && !isNoRecord ? Math.floor(targetHeight) : this.panelHeight;
            // }
            if (this.data && this.data.length) {
                if (this.comboService.displayType === 'LIST' && target.querySelector('.list-group')) {
                    this.innerPanelHeight = target.querySelector('.list-group')['offsetHeight'] + 2;
                }
                else {
                    this.innerPanelHeight = targetHeight;
                }
            }
        }
        else if (target && target.tagName && panelHeight && !String(panelHeight).includes('px')) {
            panelHeight = panelHeight;
        }
        let { top, height, left, right } = this.el.nativeElement.getBoundingClientRect();
        height = height + 1;
        /** @type {?} */
        const bottom = window.innerHeight - height - top;
        if (panelHeight === 'auto') {
            if (this.maxHeight && this.maxHeight > this.innerPanelHeight) {
                panelHeight = this.innerPanelHeight;
            }
            else {
                panelHeight = this.maxHeight;
            }
        }
        /** @type {?} */
        const h = top > bottom ? top : bottom;
        /** @type {?} */
        const below = h === bottom;
        /** @type {?} */
        let fx = 'top';
        if (bottom > panelHeight) {
            top = top + height;
        }
        else {
            if (top > bottom) {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                    top = 10;
                }
                else {
                    top = top - parseInt('' + panelHeight, 10) - 5;
                }
                fx = 'bottom';
            }
            else {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                }
                top = top + height;
            }
        }
        if (window.innerWidth - left < this.panelWidth) {
            left = right - 400;
        }
        return { panelWidth: this.panelWidth, panelHeight, top, left, below, fx };
    }
    /**
     * @private
     * @return {?}
     */
    compatibleScrollTop() {
        if (document.scrollingElement) {
            return document.scrollingElement.scrollTop;
        }
        return Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop);
    }
    /**
     * @private
     * @return {?}
     */
    compatibleScrollLeft() {
        if (document.scrollingElement) {
            return document.scrollingElement.scrollLeft;
        }
        return Math.max(window.pageXOffset, document.documentElement.scrollLeft, document.body.scrollLeft);
    }
    // 设置弹出框位置
    /**
     * @param {?} target
     * @return {?}
     */
    updatePosition(target) {
        const { panelHeight, left, top, below, fx } = this.getPanelSize(target);
        if (!this.isLookup()) {
            /** @type {?} */
            let _top = top;
            /** @type {?} */
            let _height = panelHeight;
            if (top < 0) {
                _height = this.innerPanelHeight + top - 10;
                _top = 10;
            }
            _top += this.compatibleScrollTop();
            if (this.panelHeight !== 'auto') {
                if (this.maxHeight < _height) {
                    this.maxHeight = (/** @type {?} */ (_height));
                }
            }
            this.comPosition = {
                'left': left + this.compatibleScrollLeft(),
                'top': _top,
                'width': this.panelWidth,
                height: _height === 'auto' ? 'auto' : _height,
                'max-height': this.maxHeight
            };
        }
        else {
            this.comPosition = {
                'width': this.panelWidth,
                'height': panelHeight
            };
        }
        this.panelElement.style.overflow = '';
        target['style'].display = '';
        Object.keys(this.comPosition).forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            /** @type {?} */
            let val = this.comPosition[n];
            if (val !== 'auto') {
                val += 'px';
            }
            this.render.setStyle(target, n, val);
        }));
        target.style.transformOrigin = '100% ' + fx;
        // target['style'].visibility = 'visible';
        return this.comPosition;
    }
    /**
     * @param {?} el
     * @param {?} event
     * @return {?}
     */
    contains(el, event) {
        return el.nativeElement.contains(event.target);
    }
    /**
     * @protected
     * @param {?} value
     * @param {?} data
     * @return {?}
     */
    filterSelections(value, data) {
        /** @type {?} */
        const selectedItems = String(value)
            .split(this.separator)
            .map((/**
         * @param {?} selectedItem
         * @return {?}
         */
        selectedItem => {
            /** @type {?} */
            const item = data.find((/**
             * @param {?} val
             * @return {?}
             */
            val => selectedItem == this.commonUtils.getValue(this.idField, val) + ''));
            return item ? this.commonUtils.getValue(this.textField, item) : '';
        }));
        return selectedItems.filter((/**
         * @param {?} el
         * @return {?}
         */
        el => el));
    }
    /**
     * @protected
     * @param {?} selectedValues
     * @param {?} data
     * @return {?}
     */
    updateSelections(selectedValues, data) {
        if (selectedValues === null || selectedValues === undefined) {
            this.selections = [];
        }
        if (typeof selectedValues === 'boolean' || typeof selectedValues === 'number') {
            selectedValues = '' + selectedValues;
        }
        /** @type {?} */
        const selectedItems = selectedValues ? String(selectedValues).split(this.separator).map((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (this.comboService.displayType === 'LOOKUPTREELIST') {
                return this.comboService.treeNodeToFlatData(data, val, this.idField);
            }
            return data.find((/**
             * @param {?} _data
             * @return {?}
             */
            _data => '' + val == this.commonUtils.getValue(this.idField, _data) + ''));
        })) : [];
        this.selections = selectedItems || [];
    }
    /**
     * @private
     * @param {?} value
     * @param {?} data
     * @return {?}
     */
    getDisplayText(value, data) {
        if (value !== null && value !== undefined) {
            /** @type {?} */
            const selectedItems = this.filterSelections(value, data);
            if (!selectedItems || !selectedItems.length) {
                return value;
            }
            else {
                return selectedItems.filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                v => !!v)).join(this.separator);
            }
        }
        else {
            return '';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        /** @type {?} */
        let data = [];
        if (this.data instanceof Array) {
            data = this.data;
        }
        else if (this.data) {
            data = ((/** @type {?} */ (this.data['items']))) instanceof Array ? this.data['items'] : data;
        }
        this.originalText = value;
        this.selectedValues = '';
        if (!this.uri && data && data.length > 0) {
            this.selectedValues = value;
            this.updateSelections(value, data);
            this.displayText = this.getDisplayText(value, this.selections || []);
            this.originalText = this.displayText;
        }
        else {
            // this.displayText = this.getDisplayText(value, this.selections);
            this.displayText = value;
            this.updateSelectedValues();
            if (!this.selectedValues) {
                this.selectedValues = value;
            }
            if (this.viewType === 'tag' && this.multiSelect && (this.displayText !== null && this.displayText !== undefined)) {
                /** @type {?} */
                const txtArr = this.displayText.split(this.separator).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n));
                this.selections = txtArr.reduce((/**
                 * @param {?} r
                 * @param {?} c
                 * @param {?} i
                 * @return {?}
                 */
                (r, c, i) => {
                    r.push({ [this.textField]: c });
                    return r;
                }), []);
            }
        }
        this.cdr.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
    /**
     * @param {?} searchValue
     * @param {?} searchField
     * @return {?}
     */
    filterDataOnServer(searchValue, searchField) {
    }
}
/** @nocollapse */
BaseComboComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Renderer2 },
    { type: ComboService },
    { type: Injector }
];
BaseComboComponent.propDecorators = {
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    editable: [{ type: Input }],
    placeholder: [{ type: Input }],
    panelWidth: [{ type: Input }],
    panelHeight: [{ type: Input }],
    autoWidth: [{ type: Input }],
    enableClear: [{ type: Input }],
    mapFields: [{ type: Input }],
    forcePlaceholder: [{ type: Input }],
    nosearch: [{ type: Input }],
    maxLength: [{ type: Input }],
    enableTitle: [{ type: Input }],
    viewType: [{ type: Input }],
    context: [{ type: Input }],
    mappingField: [{ type: Input }],
    data: [{ type: Input }],
    idField: [{ type: Input }],
    valueField: [{ type: Input }],
    textField: [{ type: Input }],
    multiSelect: [{ type: Input }],
    uri: [{ type: Input }],
    selectedValues: [{ type: Input }],
    displayText: [{ type: Input }],
    maxHeight: [{ type: Input }],
    enableCancelSelected: [{ type: Input }],
    remoteSearch: [{ type: Input }],
    beforeShow: [{ type: Input }],
    beforeHide: [{ type: Input }],
    hidePanelOnClear: [{ type: Input }],
    useValue: [{ type: Input }],
    separator: [{ type: Input }],
    showPanel: [{ type: Output }],
    hidePanel: [{ type: Output }],
    clear: [{ type: Output }],
    valueChange: [{ type: Output }],
    selectChange: [{ type: Output }],
    cmbPanel: [{ type: ViewChild, args: ['comboPanel',] }],
    input: [{ type: ViewChild, args: ['input',] }],
    input2: [{ type: ViewChild, args: ['input2',] }]
};
if (false) {
    /** @type {?} */
    BaseComboComponent.prototype.disabled;
    /** @type {?} */
    BaseComboComponent.prototype.readonly;
    /** @type {?} */
    BaseComboComponent.prototype.editable;
    /** @type {?} */
    BaseComboComponent.prototype.placeholder;
    /** @type {?} */
    BaseComboComponent.prototype.panelWidth;
    /** @type {?} */
    BaseComboComponent.prototype.panelHeight;
    /** @type {?} */
    BaseComboComponent.prototype.autoWidth;
    /** @type {?} */
    BaseComboComponent.prototype.enableClear;
    /** @type {?} */
    BaseComboComponent.prototype.mapFields;
    /**
     * 禁用只读时显示 placeholder
     * @type {?}
     */
    BaseComboComponent.prototype.forcePlaceholder;
    /**
     * 任意输入 20210202
     * @type {?}
     */
    BaseComboComponent.prototype.nosearch;
    /**
     * 允许最大输入长度
     * @type {?}
     */
    BaseComboComponent.prototype.maxLength;
    /** @type {?} */
    BaseComboComponent.prototype.enableTitle;
    /**
     * 展示类型： text文本，tag标签。 默认 text
     * @type {?}
     */
    BaseComboComponent.prototype.viewType;
    /** @type {?} */
    BaseComboComponent.prototype.displayText;
    /** @type {?} */
    BaseComboComponent.prototype.maxHeight;
    /** @type {?} */
    BaseComboComponent.prototype.enableCancelSelected;
    /** @type {?} */
    BaseComboComponent.prototype.beforeShow;
    /** @type {?} */
    BaseComboComponent.prototype.beforeHide;
    /** @type {?} */
    BaseComboComponent.prototype.hidePanelOnClear;
    /**
     * 开启后，ngModel 的值为 valueField or  idField; 否则为textField的值
     * @type {?}
     */
    BaseComboComponent.prototype.useValue;
    /** @type {?} */
    BaseComboComponent.prototype.separator;
    /** @type {?} */
    BaseComboComponent.prototype.showPanel;
    /** @type {?} */
    BaseComboComponent.prototype.hidePanel;
    /** @type {?} */
    BaseComboComponent.prototype.clear;
    /** @type {?} */
    BaseComboComponent.prototype.valueChange;
    /** @type {?} */
    BaseComboComponent.prototype.selectChange;
    /** @type {?} */
    BaseComboComponent.prototype.input;
    /** @type {?} */
    BaseComboComponent.prototype.input2;
    /** @type {?} */
    BaseComboComponent.prototype.isOpen;
    /** @type {?} */
    BaseComboComponent.prototype.comPosition;
    /** @type {?} */
    BaseComboComponent.prototype.destroy$;
    /** @type {?} */
    BaseComboComponent.prototype.ngControl;
    /** @type {?} */
    BaseComboComponent.prototype.groupIcon;
    /** @type {?} */
    BaseComboComponent.prototype.localeService;
    /** @type {?} */
    BaseComboComponent.prototype.innerPanelHeight;
    /** @type {?} */
    BaseComboComponent.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype._cmbPanel;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype._comboPanelCreated$;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.willHide$;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.containerElement;
    /**
     * overlay
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.panelElement;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype._documentClickEvent;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.panelListener;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.mouseWheelEvent;
    /** @type {?} */
    BaseComboComponent.prototype.textChangeSubject;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.initdataSubscription;
    /** @type {?} */
    BaseComboComponent.prototype.customData;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.originalText;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.isTextChange;
    /** @type {?} */
    BaseComboComponent.prototype.treeClientSearch;
    /** @type {?} */
    BaseComboComponent.prototype.eventMgr;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.notifySer;
    /**
     * @type {?}
     * @private
     */
    BaseComboComponent.prototype.ro;
    /** @type {?} */
    BaseComboComponent.prototype.onChange;
    /** @type {?} */
    BaseComboComponent.prototype.onTouched;
    /** @type {?} */
    BaseComboComponent.prototype.el;
    /** @type {?} */
    BaseComboComponent.prototype.cdr;
    /** @type {?} */
    BaseComboComponent.prototype.document;
    /** @type {?} */
    BaseComboComponent.prototype.render;
    /** @type {?} */
    BaseComboComponent.prototype.comboService;
    /** @type {?} */
    BaseComboComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,