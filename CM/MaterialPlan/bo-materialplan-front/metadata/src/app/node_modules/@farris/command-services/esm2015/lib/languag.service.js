import { Injectable, LOCALE_ID, Optional, Inject } from '@angular/core';
import { LanguageMessageFactory } from './languages/index';
/**
 * 多语言服务
 * @scope FormModule
 */
class LanguageService {
    /**
     * 构造函数
     */
    constructor(localeId) {
        // #endregion
        /**
         * 当前语言
         */
        this.language = 'zh-CHS';
        this.language = localeId || 'zh-CHS';
        this.extendProperties();
        LanguageService.innerInstance = this;
    }
    /**
     * 当前语言包
     */
    get languageMessage() {
        return LanguageMessageFactory.create(this.language);
    }
    /**
     * 获取实例
     */
    static getInstance() {
        if (this.innerInstance) {
            return this.innerInstance;
        }
        const instance = new LanguageService('zh-CHS');
        LanguageService.innerInstance = instance;
        return instance;
    }
    /**
     * 扩展属性
     */
    extendProperties() {
        Object.keys(this.languageMessage).forEach((propName) => {
            Object.defineProperty(this, propName, {
                get: () => {
                    return this.languageMessage[propName];
                }
            });
        });
    }
}
/**
 * 单例对象
 */
LanguageService.innerInstance = null;
LanguageService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LanguageService.ctorParameters = () => [
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID,] }] }
];
export { LanguageService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2xhbmd1YWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBbUIsc0JBQXNCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUc1RTs7O0dBR0c7QUFDSCxNQUNNLGVBQWU7SUErRm5COztPQUVHO0lBQ0gsWUFBMkMsUUFBaUI7UUFqQjVELGFBQWE7UUFFYjs7V0FFRztRQUNPLGFBQVEsR0FBRyxRQUFRLENBQUM7UUFhNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLElBQUksUUFBUSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3hCLGVBQWUsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBQ3ZDLENBQUM7SUFkRDs7T0FFRztJQUNILElBQWMsZUFBZTtRQUMzQixPQUFPLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQVdEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLFdBQVc7UUFDdkIsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztTQUMzQjtRQUNELE1BQU0sUUFBUSxHQUFHLElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9DLGVBQWUsQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDO1FBQ3pDLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFRDs7T0FFRztJQUNLLGdCQUFnQjtRQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFnQixFQUFFLEVBQUU7WUFDN0QsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFO2dCQUNwQyxHQUFHLEVBQUUsR0FBRyxFQUFFO29CQUNSLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDeEMsQ0FBQzthQUNGLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7QUE3SEQ7O0dBRUc7QUFDWSw2QkFBYSxHQUFvQixJQUFJLENBQUM7O1lBTnRELFVBQVU7Ozs7eUNBbUdJLFFBQVEsWUFBSSxNQUFNLFNBQUMsU0FBUzs7QUFnQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIExPQ0FMRV9JRCwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZU1lc3NhZ2UsIExhbmd1YWdlTWVzc2FnZUZhY3RvcnkgfSBmcm9tICcuL2xhbmd1YWdlcy9pbmRleCc7XHJcblxyXG5cclxuLyoqXHJcbiAqIOWkmuivreiogOacjeWKoVxyXG4gKiBAc2NvcGUgRm9ybU1vZHVsZVxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5jbGFzcyBMYW5ndWFnZVNlcnZpY2UgaW1wbGVtZW50cyBMYW5ndWFnZU1lc3NhZ2Uge1xyXG5cclxuICAvKipcclxuICAgKiDljZXkvovlr7nosaFcclxuICAgKi9cclxuICBwcml2YXRlIHN0YXRpYyBpbm5lckluc3RhbmNlOiBMYW5ndWFnZVNlcnZpY2UgPSBudWxsO1xyXG5cclxuICAvLyAjcmVnaW9uIOWunueOsExhbmd1YWdlTWVzc2FnZeaOpeWPo++8jOaWueS+v+S5puWGmVxyXG4gIHB1YmxpYyB5ZXM6IHN0cmluZztcclxuICBwdWJsaWMgbm86IHN0cmluZztcclxuICBwdWJsaWMgdW5zYXZlTm90aWZ5VGl0bGU6IHN0cmluZztcclxuICBwdWJsaWMgY2xpZW50Tm90aWZ5VGl0bGU6IHN0cmluZztcclxuICBwdWJsaWMgc2VydmVyTm90aWZ5VGl0bGU6IHN0cmluZztcclxuICBwdWJsaWMgY2FuY2VsQXBwcm92ZVN1Y2Nlc3M6IHN0cmluZztcclxuICBwdWJsaWMgY2FuY2VsQXBwcm92ZUZhaWxlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyB1bmFsbG93RW1wdHlQcm9jZXNzSW5zdGFuY2VOYW1lOiBzdHJpbmc7XHJcbiAgcHVibGljIHVuYWxsb3dFbXB0eUJpekJpbGxJZDogc3RyaW5nO1xyXG4gIHB1YmxpYyB1bmFsbG93RW1wdHlDaGlsZEJpekJpbGxJZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBiaXpEZWZLZXlSZXF1aXJlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBwcm9jSW5zSWRSZXF1aXJlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBhZGRDaGlsZEZhaWxlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBhZGRTaWJsaW5nRmFpbGVkOiBzdHJpbmc7XHJcbiAgcHVibGljIGFkZFN1YkNoaWxkRmFpbGVkOiBzdHJpbmc7XHJcbiAgcHVibGljIGFkZFN1YlNpYmxpbmdGYWlsZWQ6IHN0cmluZztcclxuICBwdWJsaWMgZGVsZXRlRmFpbGVkOiBzdHJpbmc7XHJcbiAgcHVibGljIG11bHRpU2F2ZUZhaWxlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBhcHBlbmRGYWlsZWQ6IHN0cmluZztcclxuICBwdWJsaWMgcXVlcnlGYWlsZWQ6IHN0cmluZztcclxuICBwdWJsaWMgY2FuY2VsRmFpbGVkOiBzdHJpbmc7XHJcbiAgcHVibGljIHVwZGF0ZUZhaWxlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBhZGRGYWlsZWQ6IHN0cmluZztcclxuICBwdWJsaWMgbG9hZEZhaWxlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBzYXZlU3VjY2Vzczogc3RyaW5nO1xyXG4gIHB1YmxpYyBzYXZlRmFpbGVkOiBzdHJpbmc7XHJcbiAgcHVibGljIGRlbGV0ZVN1Y2Nlc3M6IHN0cmluZztcclxuICBwdWJsaWMgZGVsZXRlRmFpbGQ6IHN0cmluZztcclxuICBwdWJsaWMgY29uZmlybURlbGV0aW9uOiBzdHJpbmc7XHJcbiAgcHVibGljIHN1Ym1pdFN1Y2Nlc3M6IHN0cmluZztcclxuICBwdWJsaWMgc3VibWl0RmFpbGQ6IHN0cmluZztcclxuICBwdWJsaWMgbm90aWZ5VGl0bGU6IHN0cmluZztcclxuICBwdWJsaWMgaHR0cEVycm9yOiBzdHJpbmc7XHJcbiAgcHVibGljIGdyaWREYXRhTm90U2F2ZTogc3RyaW5nO1xyXG4gIHB1YmxpYyBleGl0V2l0aG91dFNhdmU6IHN0cmluZztcclxuICBwdWJsaWMgbm90U3VwcG9ydE1lbnVUeXBlOiBzdHJpbmc7XHJcbiAgcHVibGljIGNhbmNlbFdpdGhvdXRTYXZlOiBzdHJpbmc7XHJcbiAgcHVibGljIHBsc1NlbGVjdERlbGV0ZURhdGE6IHN0cmluZztcclxuICBwdWJsaWMgZXJyb3JIaWVyYXJjaHlLZXk6IHN0cmluZztcclxuICBwdWJsaWMgcGxzU2VsZWN0UGFyZW50Tm9kZTogc3RyaW5nO1xyXG4gIHB1YmxpYyBkZWxldGVDaGlsZEZpcnN0OiBzdHJpbmc7XHJcbiAgcHVibGljIGluY29ycmVjdEhpZXJhcmNoeUNvbmZpZzogc3RyaW5nO1xyXG4gIHB1YmxpYyBvcGVyYXRpb25GYWlsZWQ6IHN0cmluZztcclxuICBwdWJsaWMgcGxzU2VsZWN0RWRpdERhdGE6IHN0cmluZztcclxuICBwdWJsaWMgcGxzU2VsZWN0Vmlld0RhdGE6IHN0cmluZztcclxuICBwdWJsaWMgcGxzVXBsb2FkRmlyc3Q6IHN0cmluZztcclxuICBwdWJsaWMgZGVmYXVsdERpYWxvZ1RpdGxlOiBzdHJpbmc7XHJcbiAgcHVibGljIGNoYW5nZVRvRmlyc3Q6IHN0cmluZztcclxuICBwdWJsaWMgY2hhbmdlVG9MYXN0OiBzdHJpbmc7XHJcbiAgcHVibGljIG5vUHJvY2Vzc0luc3RhbmNlSWQ6IHN0cmluZztcclxuICBwdWJsaWMgbm9EYXRhRXhpc3Q6IHN0cmluZztcclxuICBwdWJsaWMgbm9BdHRhY2htZW50OiBzdHJpbmc7XHJcbiAgcHVibGljIGNvbmZpcm06IHN0cmluZztcclxuICBwdWJsaWMgY2FuY2VsOiBzdHJpbmc7XHJcbiAgcHVibGljIHBsc1NlbGVjdENvcHlEYXRhOiBzdHJpbmc7XHJcbiAgcHVibGljIGNvcHlGaWVsZHNSZXF1aXJlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBwYXRoSXNSZXF1aXJlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBwcm9wc0lzRW1wdHk6IHN0cmluZztcclxuICBwdWJsaWMgaGlzdG9yeUF0dGFjaG1lbnQ6IHN0cmluZztcclxuICBwdWJsaWMgcGxzU2VsZWN0RG93bmxvYWRBdHQ6IHN0cmluZztcclxuICBwdWJsaWMgbm9Eb3dubG9hZEF0dDogc3RyaW5nO1xyXG4gIHB1YmxpYyBwbHNDaGVja0JhdGNoRWRpdFJvd3M6IHN0cmluZztcclxuICBwdWJsaWMgcGxzU2VsZWN0RGV0YWlsRm9ybURhdGE6IHN0cmluZztcclxuICBwdWJsaWMgZGF0YUFuZFN0YXRlQ2hhbmdlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBkYXRhQ2hhbmdlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBzdGF0ZUNoYW5nZWQ6IHN0cmluZztcclxuICBwdWJsaWMgZGVmYXVsdFN0YXRlTmFtZTogc3RyaW5nO1xyXG4gIHB1YmxpYyBjb3B5OiBzdHJpbmc7XHJcbiAgcHVibGljIGNvcHlTdWNjZXNzOiBzdHJpbmc7XHJcbiAgcHVibGljIGNvcHlGYWlsZWQ6IHN0cmluZztcclxuICBwdWJsaWMgcm9nZXI6IHN0cmluZztcclxuICBwdWJsaWMgYXBwT3JGdW5jSWRSZXF1aXJlZDogc3RyaW5nO1xyXG4gIHB1YmxpYyB0YWJsZUNhbk5vdEVtcHR5OiBzdHJpbmc7XHJcbiAgLy8gI2VuZHJlZ2lvblxyXG5cclxuICAvKipcclxuICAgKiDlvZPliY3or63oqIBcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgbGFuZ3VhZ2UgPSAnemgtQ0hTJztcclxuXHJcbiAgLyoqXHJcbiAgICog5b2T5YmN6K+t6KiA5YyFXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGdldCBsYW5ndWFnZU1lc3NhZ2UoKTogTGFuZ3VhZ2VNZXNzYWdlIHtcclxuICAgIHJldHVybiBMYW5ndWFnZU1lc3NhZ2VGYWN0b3J5LmNyZWF0ZSh0aGlzLmxhbmd1YWdlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoTE9DQUxFX0lEKSBsb2NhbGVJZD86IHN0cmluZykge1xyXG4gICAgdGhpcy5sYW5ndWFnZSA9IGxvY2FsZUlkIHx8ICd6aC1DSFMnO1xyXG4gICAgdGhpcy5leHRlbmRQcm9wZXJ0aWVzKCk7XHJcbiAgICBMYW5ndWFnZVNlcnZpY2UuaW5uZXJJbnN0YW5jZSA9IHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5blrp7kvotcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCkge1xyXG4gICAgaWYgKHRoaXMuaW5uZXJJbnN0YW5jZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5pbm5lckluc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgTGFuZ3VhZ2VTZXJ2aWNlKCd6aC1DSFMnKTtcclxuICAgIExhbmd1YWdlU2VydmljZS5pbm5lckluc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmianlsZXlsZ7mgKdcclxuICAgKi9cclxuICBwcml2YXRlIGV4dGVuZFByb3BlcnRpZXMoKSB7XHJcbiAgICBPYmplY3Qua2V5cyh0aGlzLmxhbmd1YWdlTWVzc2FnZSkuZm9yRWFjaCgocHJvcE5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgcHJvcE5hbWUsIHtcclxuICAgICAgICBnZXQ6ICgpID0+IHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmxhbmd1YWdlTWVzc2FnZVtwcm9wTmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgTGFuZ3VhZ2VTZXJ2aWNlIH07XHJcbiJdfQ==