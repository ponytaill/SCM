import { Directive, Input, Injector, Optional } from '@angular/core';
import { FrameContext, ChangeType } from '@farris/devkit';
import { FFilePreviewComponent, UploadAndPreviewComponent } from '@farris/extend-file-upload';
/**
 * 树表格绑定指令
 */
var FarrisFilePreviewBindingDirective = /** @class */ (function () {
    /**
     * 构造函数
     */
    function FarrisFilePreviewBindingDirective(previewComponent, frameContext, uploadAndPreviewComponent, injector) {
        this.previewComponent = previewComponent;
        this.frameContext = frameContext;
        this.uploadAndPreviewComponent = uploadAndPreviewComponent;
        this.injector = injector;
    }
    Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "bindingData", {
        /**
         * 绑定数据
         */
        get: function () {
            return this.frameContext.bindingData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "bindingList", {
        /**
         * 绑定数据列表
         */
        get: function () {
            return this.bindingData.getList();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 指令初始化
     */
    FarrisFilePreviewBindingDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.bindData();
        if (this.uploadAndPreviewComponent) {
            this.uploadAndPreviewComponent.orderField = 'fileSortOrder';
        }
        this.bindingData.changes.subscribe(function (change) {
            if (change.type === ChangeType.Load
                || change.type === ChangeType.Append
                || change.type === ChangeType.Remove) {
                _this.bindData();
            }
        });
    };
    /**
     * 指令输入变更
     */
    FarrisFilePreviewBindingDirective.prototype.ngOnChanges = function (changes) {
    };
    /**
     * 绑定数据
     */
    FarrisFilePreviewBindingDirective.prototype.bindData = function () {
        var fileInfos = this.getFileInfos();
        if (this.componentRef) {
            this.componentRef.fileInfos = fileInfos;
        }
    };
    /**
     * 获取附件信息列表
     */
    FarrisFilePreviewBindingDirective.prototype.getFileInfos = function () {
        var _this = this;
        var listData = this.bindingList.toJSON();
        var idKey = this.bindingList.primaryKey;
        var fileInfos = [];
        listData.forEach(function (itemData) {
            var id = _this.getValueByPath(itemData, idKey);
            var fileId = _this.getValueByPath(itemData, _this.fileIdKey);
            var fileName = _this.getValueByPath(itemData, _this.fileNameKey);
            var fileSize = _this.getValueByPath(itemData, _this.fileSizeKey);
            var fileCreateTime = _this.getValueByPath(itemData, _this.fileCreateTimeKey);
            var fileInfo = {
                id: fileId,
                name: fileName,
                size: fileSize,
                createTime: fileCreateTime,
                originalData: itemData,
                extend: {
                    metadataId: fileId
                }
            };
            if (_this.extendFileInfo && Array.isArray(_this.extendFileInfo) && _this.extendFileInfo.length > 0) {
                _this.extendFileInfo.forEach(function (item) {
                    fileInfo[item.key] = _this.getValueByPath(itemData, item.path);
                });
            }
            if (_this.fileSortOrderKey) {
                var fileSortOrder = _this.getValueByPath(itemData, _this.fileSortOrderKey);
                fileInfo.fileSortOrder = fileSortOrder;
            }
            fileInfos.push(fileInfo);
        });
        return fileInfos;
    };
    /**
     * 根据字段路径获取值
     */
    FarrisFilePreviewBindingDirective.prototype.getValueByPath = function (data, path) {
        var keys = path.split('.');
        var currentValue = data;
        keys.forEach(function (key) {
            currentValue = currentValue && currentValue[key];
        });
        return currentValue;
    };
    FarrisFilePreviewBindingDirective.prototype.getUdtPaths = function () {
        var paths = this.fileIdKey.split('.');
        paths.pop();
        return paths;
    };
    Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "fileSizeKey", {
        get: function () {
            var basePaths = this.getUdtPaths();
            return basePaths.concat(['fileSize']).join('.');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "fileCreateTimeKey", {
        get: function () {
            var basePaths = this.getUdtPaths();
            return basePaths.concat(['fileCreateTime']).join('.');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "componentRef", {
        get: function () {
            return this.previewComponent || this.uploadAndPreviewComponent || null;
        },
        enumerable: true,
        configurable: true
    });
    FarrisFilePreviewBindingDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisFilePreviewBinding]'
                },] }
    ];
    /** @nocollapse */
    FarrisFilePreviewBindingDirective.ctorParameters = function () { return [
        { type: FFilePreviewComponent, decorators: [{ type: Optional }] },
        { type: FrameContext },
        { type: UploadAndPreviewComponent, decorators: [{ type: Optional }] },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    FarrisFilePreviewBindingDirective.propDecorators = {
        extendFileInfo: [{ type: Input, args: ['extendFileInfo',] }],
        fileIdKey: [{ type: Input, args: ['farrisFileIdKey',] }],
        fileSortOrderKey: [{ type: Input, args: ['farrisFileSortOrderKey',] }],
        fileNameKey: [{ type: Input, args: ['farrisFileNameKey',] }]
    };
    return FarrisFilePreviewBindingDirective;
}());
export { FarrisFilePreviewBindingDirective };
//# sourceMappingURL=data:application/json;base64,