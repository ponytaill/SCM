import { Injectable, Injector } from "@angular/core";
import { EMPTY, of } from "rxjs";
import { switchMap, tap } from "rxjs/operators";
import { FrameContext, DataPathCreator, Repository } from "@farris/devkit";
import { LanguageService } from "./languag.service";
import { FormMessageService } from "./form-message.service";
export class PopUpService {
    constructor(injector, frameContext, repository, languageService, messageService) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.repository = repository;
        this.languageService = languageService;
        this.messageService = messageService;
    }
    confirm() { }
    /**
     * 取消变更
     * @param frameId
     * @param id
     * @returns
     */
    cancel(frameId, id) {
        const frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        if (!frameContext) {
            throw new Error(`[PopUpService]Invalid frameId ${frameId}`);
        }
        const primaryValue = this.frameContext.bindingData.list.currentId;
        const bindingPath = frameContext.viewModel.bindingPath;
        const bindingPaths = bindingPath.split('/').filter(p => p);
        if (!id) {
            const bindingList = this.frameContext.bindingData.getList();
            id = bindingList.currentId;
        }
        const befRepository = this.repository;
        const longPaths = DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData).toArray().map((path) => path.split(':')[1]);
        const entityListPaths = Array.from(longPaths);
        //舍弃当前表当前行
        entityListPaths.pop();
        const dialogRef = this.frameContext.frameComponent['dialogRef'];
        if (entityListPaths.length < 1) {
            // 主表
            const entity = this.repository.entityCollection.getEntityById(id);
            const originalData = entity['originalData'];
            entity.load(originalData, { loadChild: false });
        }
        else {
            const entityList = befRepository.entityManager.getEntityNodeByPath(entityListPaths);
            if (entityList) {
                const originalData = entityList['originalData'];
                const item = originalData.find(item => item.id === id);
                if (item) {
                    // 已有数据，还原变更
                    const entity = befRepository.entityManager.getEntityByPath(longPaths);
                    if (entity.changes && entity.changes.length > 0) {
                        return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(tap((result) => {
                            if (result) {
                                entity.load(item, { loadChild: false });
                                entity.changes.splice(0, entity.changes.length);
                            }
                        }));
                    }
                    else {
                        // 没有修改，直接关闭
                        if (dialogRef) {
                            dialogRef.close();
                        }
                    }
                }
                else {
                    // 新增的数据，删除
                    const paths = this.buildPath(bindingPath, primaryValue);
                    return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(switchMap(result => {
                        if (result) {
                            return befRepository.removeEntityByPath(paths, id).pipe(tap(() => {
                                befRepository.entityManager.removeEntityByPath(paths, id);
                                if (entityList.count() === 0 && dialogRef) {
                                    dialogRef.close();
                                }
                            }));
                        }
                        else {
                            return EMPTY;
                        }
                    }));
                }
            }
        }
        return of([]);
    }
    /**
     * 同步当前行
     */
    updateCurrentRow(id) {
        const bindingPath = this.frameContext.viewModel.bindingPath;
        const bindingPaths = bindingPath.split('/').filter(p => p);
        // const frameId = this.frameContext.frameId;
        const root = this.frameContext.appContext.frameContextManager.getRootFrameContext();
        const primaryKeyValue = root.bindingData.list.currentId;
        this.frameContext.bindingData.list.setCurrentId(primaryKeyValue);
        if (bindingPaths.length > 0) {
            const paths = [];
            bindingPaths.forEach((path, index, array) => {
                paths.push(path);
                const bindingList = root.bindingData.getValue(paths);
                if (bindingList) {
                    const currentId = bindingList.currentId;
                    const modalBindingList = this.frameContext.bindingData.getValue(paths);
                    if (index === bindingPath.length - 1 && id) {
                        modalBindingList.setCurrentId(id);
                    }
                    else if (modalBindingList) {
                        modalBindingList.setCurrentId(currentId);
                    }
                }
            });
        }
    }
    closeCheck() {
        const frameContext = this.frameContext;
        const bindingPath = frameContext.viewModel.bindingPath;
        const bindingPaths = bindingPath.split('/').filter(p => p);
        const befRepository = this.repository;
        const longPaths = DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData).toArray().map((path) => path.split(':')[1]);
        const entityListPaths = Array.from(longPaths);
        entityListPaths.pop();
        const entityList = befRepository.entityManager.getEntityNodeByPath(entityListPaths);
        const dialogRef = this.frameContext.frameComponent['dialogRef'];
        if (entityList.count() === 0 && dialogRef) {
            dialogRef.close();
        }
    }
    /**
     * 构造子表路径
     * @param bindingPath 绑定路径
     * @param id id
     */
    buildPath(bindingPath, id) {
        let path = '/' + id;
        const subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (let index = 1; index < subPaths.length - 1; index++) {
                const subPath = subPaths[index];
                const subData = this.frameContext.viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);
                }
                path += `/${subPath}/${subData.currentId}`;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    }
}
PopUpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PopUpService.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext },
    { type: Repository },
    { type: LanguageService },
    { type: FormMessageService }
];
//# sourceMappingURL=data:application/json;base64,