import { Injectable, Optional } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { FormMessageService } from '../form-message.service';
import { LanguageService } from '../languag.service';
import { HttpUtil, HttpStatusType } from '../util/http';
/**
 * 表单错误提示服务
 * @description 统一处理前后端异常
 */
class FormErrorService {
    constructor(msgService, languageService) {
        this.msgService = msgService;
        this.languageService = languageService;
    }
    /**
     * 异常路由方法
     */
    exception(message, error) {
        // 针对session失效做特殊处理
        if (error && error.hasOwnProperty('expired') && error['expired'] === true) {
            return;
        }
        if (error && this.isHttpErrorResponse(error)) {
            this.httpErrorHandler(error);
        }
        else {
            // todo: 细化异常处理后，继续拆解该方法
            this.commonErrorHandler(message);
        }
    }
    /**
     * http请求异常处理器
     */
    httpErrorHandler(httpError) {
        if (!httpError) {
            return;
        }
        const statusType = HttpUtil.getHttpStatusType(httpError.status);
        switch (statusType) {
            case HttpStatusType.ClientError:
                if (httpError.status === 401) {
                    this.msgService.http401Error(httpError);
                    break;
                }
                this.msgService.httpErrorInClient(httpError);
                break;
            case HttpStatusType.ServerError:
                this.msgService.httpErrorInServer(httpError);
                break;
            default:
                throw new Error('Get invalid status code when using httpErrorHandler method.');
        }
    }
    commonErrorHandler(errorMsg) {
        if (!errorMsg) {
            return;
        }
        this.msgService.error(errorMsg);
    }
    /**
     * httpErrorResponse like
     * @param error 异常
     */
    isHttpErrorResponse(error) {
        if (!error) {
            return false;
        }
        if (typeof error !== 'object') {
            return false;
        }
        if (error.name === 'HttpErrorResponse' && error.hasOwnProperty('status') && error.hasOwnProperty('error')) {
            return true;
        }
        if (error instanceof HttpErrorResponse) {
            return true;
        }
        return false;
    }
}
FormErrorService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormErrorService.ctorParameters = () => [
    { type: FormMessageService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
export { FormErrorService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1lcnJvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2Vycm9yL2Zvcm0tZXJyb3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV6RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFeEQ7OztHQUdHO0FBQ0gsTUFDTSxnQkFBZ0I7SUFFcEIsWUFDVSxVQUE4QixFQUNsQixlQUFnQztRQUQ1QyxlQUFVLEdBQVYsVUFBVSxDQUFvQjtRQUNsQixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7SUFFdEQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksU0FBUyxDQUFDLE9BQWUsRUFBRSxLQUFVO1FBQzFDLG1CQUFtQjtRQUNuQixJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDekUsT0FBTztTQUNSO1FBQ0QsSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzVDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM5QjthQUFNO1lBRUwsd0JBQXdCO1lBQ3hCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNsQztJQUNILENBQUM7SUFFRDs7T0FFRztJQUNJLGdCQUFnQixDQUFDLFNBQTRCO1FBQ2xELElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxPQUFPO1NBQ1I7UUFFRCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWhFLFFBQVEsVUFBVSxFQUFFO1lBQ2xCLEtBQUssY0FBYyxDQUFDLFdBQVc7Z0JBQzdCLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7b0JBQzVCLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUN4QyxNQUFNO2lCQUNQO2dCQUVELElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQzdDLE1BQU07WUFDUixLQUFLLGNBQWMsQ0FBQyxXQUFXO2dCQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUM3QyxNQUFNO1lBQ1I7Z0JBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQyw2REFBNkQsQ0FBQyxDQUFDO1NBQ2xGO0lBQ0gsQ0FBQztJQUVPLGtCQUFrQixDQUFDLFFBQWdCO1FBQ3pDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQ0Q7OztPQUdHO0lBQ0ssbUJBQW1CLENBQUMsS0FBSztRQUMvQixJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssbUJBQW1CLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3pHLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxJQUFJLEtBQUssWUFBWSxpQkFBaUIsRUFBRTtZQUN0QyxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7WUE3RUYsVUFBVTs7OztZQVJGLGtCQUFrQjtZQUNsQixlQUFlLHVCQVluQixRQUFROztBQTJFYixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5cclxuaW1wb3J0IHsgRm9ybU1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vZm9ybS1tZXNzYWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi9sYW5ndWFnLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBIdHRwVXRpbCwgSHR0cFN0YXR1c1R5cGUgfSBmcm9tICcuLi91dGlsL2h0dHAnO1xyXG5cclxuLyoqXHJcbiAqIOihqOWNlemUmeivr+aPkOekuuacjeWKoVxyXG4gKiBAZGVzY3JpcHRpb24g57uf5LiA5aSE55CG5YmN5ZCO56uv5byC5bi4XHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIEZvcm1FcnJvclNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgbXNnU2VydmljZTogRm9ybU1lc3NhZ2VTZXJ2aWNlLFxyXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBsYW5ndWFnZVNlcnZpY2U6IExhbmd1YWdlU2VydmljZVxyXG4gICkge1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5byC5bi46Lev55Sx5pa55rOVXHJcbiAgICovXHJcbiAgcHVibGljIGV4Y2VwdGlvbihtZXNzYWdlOiBzdHJpbmcsIGVycm9yOiBhbnkpIHtcclxuICAgIC8vIOmSiOWvuXNlc3Npb27lpLHmlYjlgZrnibnmrorlpITnkIZcclxuICAgIGlmIChlcnJvciAmJiBlcnJvci5oYXNPd25Qcm9wZXJ0eSgnZXhwaXJlZCcpICYmIGVycm9yWydleHBpcmVkJ10gPT09IHRydWUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKGVycm9yICYmIHRoaXMuaXNIdHRwRXJyb3JSZXNwb25zZShlcnJvcikpIHtcclxuICAgICAgdGhpcy5odHRwRXJyb3JIYW5kbGVyKGVycm9yKTtcclxuICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAvLyB0b2RvOiDnu4bljJblvILluLjlpITnkIblkI7vvIznu6fnu63mi4bop6Por6Xmlrnms5VcclxuICAgICAgdGhpcy5jb21tb25FcnJvckhhbmRsZXIobWVzc2FnZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBodHRw6K+35rGC5byC5bi45aSE55CG5ZmoXHJcbiAgICovXHJcbiAgcHVibGljIGh0dHBFcnJvckhhbmRsZXIoaHR0cEVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSk6IHZvaWQge1xyXG4gICAgaWYgKCFodHRwRXJyb3IpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHN0YXR1c1R5cGUgPSBIdHRwVXRpbC5nZXRIdHRwU3RhdHVzVHlwZShodHRwRXJyb3Iuc3RhdHVzKTtcclxuXHJcbiAgICBzd2l0Y2ggKHN0YXR1c1R5cGUpIHtcclxuICAgICAgY2FzZSBIdHRwU3RhdHVzVHlwZS5DbGllbnRFcnJvcjpcclxuICAgICAgICBpZiAoaHR0cEVycm9yLnN0YXR1cyA9PT0gNDAxKSB7XHJcbiAgICAgICAgICB0aGlzLm1zZ1NlcnZpY2UuaHR0cDQwMUVycm9yKGh0dHBFcnJvcik7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubXNnU2VydmljZS5odHRwRXJyb3JJbkNsaWVudChodHRwRXJyb3IpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIEh0dHBTdGF0dXNUeXBlLlNlcnZlckVycm9yOlxyXG4gICAgICAgIHRoaXMubXNnU2VydmljZS5odHRwRXJyb3JJblNlcnZlcihodHRwRXJyb3IpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignR2V0IGludmFsaWQgc3RhdHVzIGNvZGUgd2hlbiB1c2luZyBodHRwRXJyb3JIYW5kbGVyIG1ldGhvZC4nKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgY29tbW9uRXJyb3JIYW5kbGVyKGVycm9yTXNnOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGlmICghZXJyb3JNc2cpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5tc2dTZXJ2aWNlLmVycm9yKGVycm9yTXNnKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogaHR0cEVycm9yUmVzcG9uc2UgbGlrZVxyXG4gICAqIEBwYXJhbSBlcnJvciDlvILluLhcclxuICAgKi9cclxuICBwcml2YXRlIGlzSHR0cEVycm9yUmVzcG9uc2UoZXJyb3IpIHtcclxuICAgIGlmICghZXJyb3IpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBlcnJvciAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGVycm9yLm5hbWUgPT09ICdIdHRwRXJyb3JSZXNwb25zZScgJiYgZXJyb3IuaGFzT3duUHJvcGVydHkoJ3N0YXR1cycpICYmIGVycm9yLmhhc093blByb3BlcnR5KCdlcnJvcicpKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgSHR0cEVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBGb3JtRXJyb3JTZXJ2aWNlIH07XHJcblxyXG4iXX0=