/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer2, ElementRef, NgZone, ViewChild, Injector } from '@angular/core';
import { DatagridBaseEditorDirective } from './../datagrid-base-editor.directive';
import { FarrisDatepickerComponent } from '@farris/ui-datepicker';
import { DatePickerDefaultOptions } from '../editor-default-options';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:40:36
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-14 12:58:14
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
export class DatagridDatepickerComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     */
    constructor(render, el, ngzone, injector) {
        super(render, el, injector);
        this.ngzone = ngzone;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, DatePickerDefaultOptions, this.options);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputElement = this.instance.dateInput ? this.instance.dateInput.nativeElement : this.el.nativeElement.querySelector('input');
        super.ngAfterViewInit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClear($event) {
        if (this.options.clear) {
            this.options.clear(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventPrams($event));
        }
        if (this.inputElement) {
            this.inputElement.focus();
        }
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    eventPrams($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    }
}
DatagridDatepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-datepicker',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
        <farris-datepicker
            #datepicker
            style="width: 100%"
            [formControlName]="column.field"
            [readonly]="options.readonly"
            [editable]="options.editable"
            [locale]="options.locale"
            [dateRange]="options.dateRange"
            [showTime]="options.showTime"
            [showType]="options.showType"
            [dateFormat]="options.dateFormat"
            [returnFormat]="options.returnFormat"
            [returnType]="options.returnType"
            [useDefault]="options.useDefault"
            [placeholder]="options.placeholder"
            [maxDate]="options.maxDate"
            [minDate]="options.minDate"
            [dateRangeDatesDelimiter]="options.dateRangeDatesDelimiter"
            [showWeekNumbers]="options?.showWeekNumbers"
            [shortcuts]="[]"
            (clear)="onClear($event)"
            (valueChange)="onValueChange($event)"
            [viewType]="options.viewType"
        ></farris-datepicker>
    </div>


    `
            }] }
];
/** @nocollapse */
DatagridDatepickerComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
DatagridDatepickerComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['datepicker',] }]
};
if (false) {
    /** @type {?} */
    DatagridDatepickerComponent.prototype.instance;
    /**
     * @type {?}
     * @private
     */
    DatagridDatepickerComponent.prototype.ngzone;
    /** @type {?} */
    DatagridDatepickerComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZGF0ZXBpY2tlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWVkaXRvcnMvIiwic291cmNlcyI6WyJsaWIvZWRpdG9ycy9kYXRhZ3JpZC1kYXRlcGlja2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBUyxTQUFTLEVBQUUsUUFBUSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUM1SCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUNsRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7Ozs7Ozs7O0FBMkNyRSxNQUFNLE9BQU8sMkJBQTRCLFNBQVEsMkJBQTJCOzs7Ozs7O0lBSXhFLFlBQ0ksTUFBaUIsRUFBRSxFQUFjLEVBQVUsTUFBYyxFQUFTLFFBQWtCO1FBRXhGLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRm1CLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBUyxhQUFRLEdBQVIsUUFBUSxDQUFVO0lBRzVGLENBQUM7Ozs7SUFFRyxRQUFRO1FBQ0osS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRSxFQUFFLEVBQUcsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9FLENBQUM7Ozs7SUFFRCxlQUFlO1FBQ1gsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUU7UUFDcEksS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBRUQsT0FBTyxDQUFDLE1BQU07UUFDVixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUMvQztJQUNMLENBQUM7Ozs7O0lBRUQsYUFBYSxDQUFDLE1BQU07UUFDaEIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDckQ7UUFFRCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUM3QjtJQUNMLENBQUM7Ozs7OztJQUVPLFVBQVUsQ0FBQyxNQUFNOztjQUNmLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUNsQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM5QixDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ25CLE9BQU8sQ0FBQyxDQUFDO0lBQ2IsQ0FBQzs7O1lBMUVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsd0JBQXdCO2dCQUNsQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBNkJUO2FBQ0o7Ozs7WUE3QzJCLFNBQVM7WUFBRSxVQUFVO1lBQUUsTUFBTTtZQUFvQixRQUFROzs7dUJBZ0RoRixTQUFTLFNBQUMsWUFBWTs7OztJQUF2QiwrQ0FBNkQ7Ozs7O0lBR3RCLDZDQUFzQjs7SUFBRSwrQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBOZ1pvbmUsIElucHV0LCBWaWV3Q2hpbGQsIEluamVjdG9yLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSB9IGZyb20gJy4vLi4vZGF0YWdyaWQtYmFzZS1lZGl0b3IuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgRmFycmlzRGF0ZXBpY2tlckNvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktZGF0ZXBpY2tlcic7XHJcbmltcG9ydCB7IERhdGVQaWNrZXJEZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uL2VkaXRvci1kZWZhdWx0LW9wdGlvbnMnO1xyXG4vKlxyXG4gKiBAQXV0aG9yOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBEYXRlOiAyMDE5LTA4LTE0IDExOjQwOjM2XHJcbiAqIEBMYXN0RWRpdG9yczog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTEwLTE0IDEyOjU4OjE0XHJcbiAqIEBRUTogMTA1NTgxODIzOVxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqL1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2dyaWQtZWRpdG9yLWRhdGVwaWNrZXInLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgW2Zvcm1Hcm91cF09XCJncm91cFwiIGNsYXNzPVwiZi1kYXRhZ3JpZC1jZWxsLWZvcm1ncm91cCBmYXJyaXMtZ3JvdXAtYXV0b1wiPlxyXG4gICAgICAgIDxmYXJyaXMtZGF0ZXBpY2tlclxyXG4gICAgICAgICAgICAjZGF0ZXBpY2tlclxyXG4gICAgICAgICAgICBzdHlsZT1cIndpZHRoOiAxMDAlXCJcclxuICAgICAgICAgICAgW2Zvcm1Db250cm9sTmFtZV09XCJjb2x1bW4uZmllbGRcIlxyXG4gICAgICAgICAgICBbcmVhZG9ubHldPVwib3B0aW9ucy5yZWFkb25seVwiXHJcbiAgICAgICAgICAgIFtlZGl0YWJsZV09XCJvcHRpb25zLmVkaXRhYmxlXCJcclxuICAgICAgICAgICAgW2xvY2FsZV09XCJvcHRpb25zLmxvY2FsZVwiXHJcbiAgICAgICAgICAgIFtkYXRlUmFuZ2VdPVwib3B0aW9ucy5kYXRlUmFuZ2VcIlxyXG4gICAgICAgICAgICBbc2hvd1RpbWVdPVwib3B0aW9ucy5zaG93VGltZVwiXHJcbiAgICAgICAgICAgIFtzaG93VHlwZV09XCJvcHRpb25zLnNob3dUeXBlXCJcclxuICAgICAgICAgICAgW2RhdGVGb3JtYXRdPVwib3B0aW9ucy5kYXRlRm9ybWF0XCJcclxuICAgICAgICAgICAgW3JldHVybkZvcm1hdF09XCJvcHRpb25zLnJldHVybkZvcm1hdFwiXHJcbiAgICAgICAgICAgIFtyZXR1cm5UeXBlXT1cIm9wdGlvbnMucmV0dXJuVHlwZVwiXHJcbiAgICAgICAgICAgIFt1c2VEZWZhdWx0XT1cIm9wdGlvbnMudXNlRGVmYXVsdFwiXHJcbiAgICAgICAgICAgIFtwbGFjZWhvbGRlcl09XCJvcHRpb25zLnBsYWNlaG9sZGVyXCJcclxuICAgICAgICAgICAgW21heERhdGVdPVwib3B0aW9ucy5tYXhEYXRlXCJcclxuICAgICAgICAgICAgW21pbkRhdGVdPVwib3B0aW9ucy5taW5EYXRlXCJcclxuICAgICAgICAgICAgW2RhdGVSYW5nZURhdGVzRGVsaW1pdGVyXT1cIm9wdGlvbnMuZGF0ZVJhbmdlRGF0ZXNEZWxpbWl0ZXJcIlxyXG4gICAgICAgICAgICBbc2hvd1dlZWtOdW1iZXJzXT1cIm9wdGlvbnM/LnNob3dXZWVrTnVtYmVyc1wiXHJcbiAgICAgICAgICAgIFtzaG9ydGN1dHNdPVwiW11cIlxyXG4gICAgICAgICAgICAoY2xlYXIpPVwib25DbGVhcigkZXZlbnQpXCJcclxuICAgICAgICAgICAgKHZhbHVlQ2hhbmdlKT1cIm9uVmFsdWVDaGFuZ2UoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgIFt2aWV3VHlwZV09XCJvcHRpb25zLnZpZXdUeXBlXCJcclxuICAgICAgICA+PC9mYXJyaXMtZGF0ZXBpY2tlcj5cclxuICAgIDwvZGl2PlxyXG5cclxuXHJcbiAgICBgLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0YWdyaWREYXRlcGlja2VyQ29tcG9uZW50IGV4dGVuZHMgRGF0YWdyaWRCYXNlRWRpdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgICBAVmlld0NoaWxkKCdkYXRlcGlja2VyJykgaW5zdGFuY2U6IEZhcnJpc0RhdGVwaWNrZXJDb21wb25lbnQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcmVuZGVyOiBSZW5kZXJlcjIsIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIG5nem9uZTogTmdab25lLCBwdWJsaWMgaW5qZWN0b3I6IEluamVjdG9yXHJcbiAgICAgICApIHtcclxuICAgIHN1cGVyKHJlbmRlciwgZWwsIGluamVjdG9yKTtcclxufVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLm5nT25Jbml0KCk7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbigge30gLCBEYXRlUGlja2VyRGVmYXVsdE9wdGlvbnMsIHRoaXMub3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIHRoaXMuaW5wdXRFbGVtZW50ID0gdGhpcy5pbnN0YW5jZS5kYXRlSW5wdXQgPyB0aGlzLmluc3RhbmNlLmRhdGVJbnB1dC5uYXRpdmVFbGVtZW50IDogdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykgO1xyXG4gICAgICAgIHN1cGVyLm5nQWZ0ZXJWaWV3SW5pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2xlYXIoJGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbGVhcikge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuY2xlYXIodGhpcy5ldmVudFByYW1zKCRldmVudCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvblZhbHVlQ2hhbmdlKCRldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudmFsdWVDaGFuZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnZhbHVlQ2hhbmdlKHRoaXMuZXZlbnRQcmFtcygkZXZlbnQpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlucHV0RWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLmlucHV0RWxlbWVudC5mb2N1cygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGV2ZW50UHJhbXMoJGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgcCA9IHRoaXMuZXZlbnRQYXJhbXMoJGV2ZW50KTtcclxuICAgICAgICBwWydpbnN0YW5jZSddID0gdGhpcy5pbnN0YW5jZTtcclxuICAgICAgICBwWydlZGl0b3InXSA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHA7XHJcbiAgICB9XHJcbn1cclxuIl19