/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer2, ElementRef, NgZone, ViewChild, Injector } from '@angular/core';
import { DatagridBaseEditorDirective } from './../datagrid-base-editor.directive';
import { FarrisDatepickerComponent } from '@farris/ui-datepicker';
import { DatePickerDefaultOptions } from '../editor-default-options';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:40:36
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-14 12:58:14
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
export class DatagridDatepickerComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     */
    constructor(render, el, ngzone, injector) {
        super(render, el, injector);
        this.ngzone = ngzone;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, DatePickerDefaultOptions, this.options);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputElement = this.instance.dateInput ? this.instance.dateInput.nativeElement : this.el.nativeElement.querySelector('input');
        super.ngAfterViewInit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClear($event) {
        if (this.options.clear) {
            this.options.clear(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventPrams($event));
        }
        if (this.inputElement) {
            this.inputElement.focus();
        }
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    eventPrams($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    }
}
DatagridDatepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-datepicker',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
        <farris-datepicker
            #datepicker
            style="width: 100%"
            [formControlName]="column.field"
            [readonly]="options.readonly"
            [editable]="options.editable"
            [locale]="options.locale"
            [dateRange]="options.dateRange"
            [showTime]="options.showTime"
            [showType]="options.showType"
            [dateFormat]="options.dateFormat"
            [returnFormat]="options.returnFormat"
            [returnType]="options.returnType"
            [useDefault]="options.useDefault"
            [placeholder]="options.placeholder"
            [maxDate]="options.maxDate"
            [minDate]="options.minDate"
            [dateRangeDatesDelimiter]="options.dateRangeDatesDelimiter"
            [showWeekNumbers]="options?.showWeekNumbers"
            [shortcuts]="[]"
            (clear)="onClear($event)"
            (valueChange)="onValueChange($event)"
            [viewType]="options.viewType"
            [showPresent]="options.showPresent"
            [hourStep]="options.hourStep"
            [minuteStep]="options.minuteStep"
            [secondStep]="options.secondStep"
        ></farris-datepicker>
    </div>


    `
            }] }
];
/** @nocollapse */
DatagridDatepickerComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
DatagridDatepickerComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['datepicker',] }]
};
if (false) {
    /** @type {?} */
    DatagridDatepickerComponent.prototype.instance;
    /**
     * @type {?}
     * @private
     */
    DatagridDatepickerComponent.prototype.ngzone;
    /** @type {?} */
    DatagridDatepickerComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZGF0ZXBpY2tlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWVkaXRvcnMvIiwic291cmNlcyI6WyJsaWIvZWRpdG9ycy9kYXRhZ3JpZC1kYXRlcGlja2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBUyxTQUFTLEVBQUUsUUFBUSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUM1SCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUNsRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7Ozs7Ozs7O0FBK0NyRSxNQUFNLE9BQU8sMkJBQTRCLFNBQVEsMkJBQTJCOzs7Ozs7O0lBSXhFLFlBQ0ksTUFBaUIsRUFBRSxFQUFjLEVBQVUsTUFBYyxFQUFTLFFBQWtCO1FBRXhGLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRm1CLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBUyxhQUFRLEdBQVIsUUFBUSxDQUFVO0lBRzVGLENBQUM7Ozs7SUFFRyxRQUFRO1FBQ0osS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRSxFQUFFLEVBQUcsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9FLENBQUM7Ozs7SUFFRCxlQUFlO1FBQ1gsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUU7UUFDcEksS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBRUQsT0FBTyxDQUFDLE1BQU07UUFDVixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUMvQztJQUNMLENBQUM7Ozs7O0lBRUQsYUFBYSxDQUFDLE1BQU07UUFDaEIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDckQ7UUFFRCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUM3QjtJQUNMLENBQUM7Ozs7OztJQUVPLFVBQVUsQ0FBQyxNQUFNOztjQUNmLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUNsQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM5QixDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ25CLE9BQU8sQ0FBQyxDQUFDO0lBQ2IsQ0FBQzs7O1lBOUVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsd0JBQXdCO2dCQUNsQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQWlDVDthQUNKOzs7O1lBakQyQixTQUFTO1lBQUUsVUFBVTtZQUFFLE1BQU07WUFBb0IsUUFBUTs7O3VCQW9EaEYsU0FBUyxTQUFDLFlBQVk7Ozs7SUFBdkIsK0NBQTZEOzs7OztJQUd0Qiw2Q0FBc0I7O0lBQUUsK0NBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgTmdab25lLCBJbnB1dCwgVmlld0NoaWxkLCBJbmplY3RvciwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgfSBmcm9tICcuLy4uL2RhdGFncmlkLWJhc2UtZWRpdG9yLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEZhcnJpc0RhdGVwaWNrZXJDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWRhdGVwaWNrZXInO1xyXG5pbXBvcnQgeyBEYXRlUGlja2VyRGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi9lZGl0b3ItZGVmYXVsdC1vcHRpb25zJztcclxuLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOS0wOC0xNCAxMTo0MDozNlxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0xMC0xNCAxMjo1ODoxNFxyXG4gKiBAUVE6IDEwNTU4MTgyMzlcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdncmlkLWVkaXRvci1kYXRlcGlja2VyJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2IFtmb3JtR3JvdXBdPVwiZ3JvdXBcIiBjbGFzcz1cImYtZGF0YWdyaWQtY2VsbC1mb3JtZ3JvdXAgZmFycmlzLWdyb3VwLWF1dG9cIj5cclxuICAgICAgICA8ZmFycmlzLWRhdGVwaWNrZXJcclxuICAgICAgICAgICAgI2RhdGVwaWNrZXJcclxuICAgICAgICAgICAgc3R5bGU9XCJ3aWR0aDogMTAwJVwiXHJcbiAgICAgICAgICAgIFtmb3JtQ29udHJvbE5hbWVdPVwiY29sdW1uLmZpZWxkXCJcclxuICAgICAgICAgICAgW3JlYWRvbmx5XT1cIm9wdGlvbnMucmVhZG9ubHlcIlxyXG4gICAgICAgICAgICBbZWRpdGFibGVdPVwib3B0aW9ucy5lZGl0YWJsZVwiXHJcbiAgICAgICAgICAgIFtsb2NhbGVdPVwib3B0aW9ucy5sb2NhbGVcIlxyXG4gICAgICAgICAgICBbZGF0ZVJhbmdlXT1cIm9wdGlvbnMuZGF0ZVJhbmdlXCJcclxuICAgICAgICAgICAgW3Nob3dUaW1lXT1cIm9wdGlvbnMuc2hvd1RpbWVcIlxyXG4gICAgICAgICAgICBbc2hvd1R5cGVdPVwib3B0aW9ucy5zaG93VHlwZVwiXHJcbiAgICAgICAgICAgIFtkYXRlRm9ybWF0XT1cIm9wdGlvbnMuZGF0ZUZvcm1hdFwiXHJcbiAgICAgICAgICAgIFtyZXR1cm5Gb3JtYXRdPVwib3B0aW9ucy5yZXR1cm5Gb3JtYXRcIlxyXG4gICAgICAgICAgICBbcmV0dXJuVHlwZV09XCJvcHRpb25zLnJldHVyblR5cGVcIlxyXG4gICAgICAgICAgICBbdXNlRGVmYXVsdF09XCJvcHRpb25zLnVzZURlZmF1bHRcIlxyXG4gICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwib3B0aW9ucy5wbGFjZWhvbGRlclwiXHJcbiAgICAgICAgICAgIFttYXhEYXRlXT1cIm9wdGlvbnMubWF4RGF0ZVwiXHJcbiAgICAgICAgICAgIFttaW5EYXRlXT1cIm9wdGlvbnMubWluRGF0ZVwiXHJcbiAgICAgICAgICAgIFtkYXRlUmFuZ2VEYXRlc0RlbGltaXRlcl09XCJvcHRpb25zLmRhdGVSYW5nZURhdGVzRGVsaW1pdGVyXCJcclxuICAgICAgICAgICAgW3Nob3dXZWVrTnVtYmVyc109XCJvcHRpb25zPy5zaG93V2Vla051bWJlcnNcIlxyXG4gICAgICAgICAgICBbc2hvcnRjdXRzXT1cIltdXCJcclxuICAgICAgICAgICAgKGNsZWFyKT1cIm9uQ2xlYXIoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgICh2YWx1ZUNoYW5nZSk9XCJvblZhbHVlQ2hhbmdlKCRldmVudClcIlxyXG4gICAgICAgICAgICBbdmlld1R5cGVdPVwib3B0aW9ucy52aWV3VHlwZVwiXHJcbiAgICAgICAgICAgIFtzaG93UHJlc2VudF09XCJvcHRpb25zLnNob3dQcmVzZW50XCJcclxuICAgICAgICAgICAgW2hvdXJTdGVwXT1cIm9wdGlvbnMuaG91clN0ZXBcIlxyXG4gICAgICAgICAgICBbbWludXRlU3RlcF09XCJvcHRpb25zLm1pbnV0ZVN0ZXBcIlxyXG4gICAgICAgICAgICBbc2Vjb25kU3RlcF09XCJvcHRpb25zLnNlY29uZFN0ZXBcIlxyXG4gICAgICAgID48L2ZhcnJpcy1kYXRlcGlja2VyPlxyXG4gICAgPC9kaXY+XHJcblxyXG5cclxuICAgIGAsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZERhdGVwaWNrZXJDb21wb25lbnQgZXh0ZW5kcyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ2RhdGVwaWNrZXInKSBpbnN0YW5jZTogRmFycmlzRGF0ZXBpY2tlckNvbXBvbmVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICByZW5kZXI6IFJlbmRlcmVyMiwgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgbmd6b25lOiBOZ1pvbmUsIHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3JcclxuICAgICAgICkge1xyXG4gICAgc3VwZXIocmVuZGVyLCBlbCwgaW5qZWN0b3IpO1xyXG59XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIubmdPbkluaXQoKTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKCB7fSAsIERhdGVQaWNrZXJEZWZhdWx0T3B0aW9ucywgdGhpcy5vcHRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgdGhpcy5pbnB1dEVsZW1lbnQgPSB0aGlzLmluc3RhbmNlLmRhdGVJbnB1dCA/IHRoaXMuaW5zdGFuY2UuZGF0ZUlucHV0Lm5hdGl2ZUVsZW1lbnQgOiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXQnKSA7XHJcbiAgICAgICAgc3VwZXIubmdBZnRlclZpZXdJbml0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25DbGVhcigkZXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNsZWFyKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5jbGVhcih0aGlzLmV2ZW50UHJhbXMoJGV2ZW50KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uVmFsdWVDaGFuZ2UoJGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy52YWx1ZUNoYW5nZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMudmFsdWVDaGFuZ2UodGhpcy5ldmVudFByYW1zKCRldmVudCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW5wdXRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5wdXRFbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZXZlbnRQcmFtcygkZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBwID0gdGhpcy5ldmVudFBhcmFtcygkZXZlbnQpO1xyXG4gICAgICAgIHBbJ2luc3RhbmNlJ10gPSB0aGlzLmluc3RhbmNlO1xyXG4gICAgICAgIHBbJ2VkaXRvciddID0gdGhpcztcclxuICAgICAgICByZXR1cm4gcDtcclxuICAgIH1cclxufVxyXG4iXX0=