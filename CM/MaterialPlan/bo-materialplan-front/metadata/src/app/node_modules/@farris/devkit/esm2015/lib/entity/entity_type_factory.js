import { Subject } from 'rxjs';
import { ChangeSet } from '../changeset';
import { SchemaEntityField$Type } from '../schema/schema';
import { EntityList } from './entity_list';
import { entityPrototype } from './entity_prototype';
import { NG_FIELD, NG_LIST, NG_OBJECT } from './metadata';
import { PARENT_CLASS, PARENT_PATH } from './types';
import { Validator } from './validator';
import { ValidationUtils } from './validator/validation_utils';
/**
 * 实体类型工厂
 * 用来根据实体Schema描述信息创建实体类型
 */
export class EntityTypeFactory {
    constructor() { }
    /**
     * 由实体Schema结构创建实体类型
     * @param schema 实体Schema结构
     * @returns 实体类型
     */
    create(schema) {
        // 提取Schema定义中的第一个是实体描述
        const schemaType = schema.entities[0].type;
        // 创建实体类型
        const entityType = this.createClass(schemaType, schema.entities[0]);
        return entityType;
    }
    /**
     * 由实体Schema类型描述创建实体类
     * @param schemaType Schema实体类型描述
     * @returns 实体类型
     */
    createClass(schemaType, relateSchema) {
        const attachEntityInstanceData = this.createEntityInstanceDataInitializer(schemaType);
        // 创建指定实体类型的初始化函数，用来在实体类型构造函数中为实体实例赋值
        const initialize = (entityInstance, entityData, entityTypeConstructor) => {
            entityInstance.isInitializing = true;
            attachEntityInstanceData(entityInstance, entityData, entityTypeConstructor);
            entityInstance.isInitializing = false;
        };
        // 声明实体类构造函数
        const ConcreteEntity = function (data) {
            // 创建实体变更集
            this.changeSet = new ChangeSet();
            // 初始化实体验证状态
            this.isValidating = false;
            // 设置unsubscribe 取消订阅事件
            this.unsubscribe = new Subject();
            // 初始化实体验证信息
            this.validErrors = {};
            // 初始化验证器
            this.validator = new Validator();
            // 初始化实体数据副本
            this.innerData = Object.assign({}, data);
            // 初始化子实体对象集合
            this.innerEntities = {};
            // 初始化实体值变化事件
            this.valueChanged = new Subject();
            this.onValueChanged = this.valueChanged;
            this.validateFromUtilSync = function (propertyName, value, cb, context) {
                this.validErrors = {};
                const result = this.validator.verify(this, propertyName, value, null, undefined, context && context.frameContext || null, true);
                if (result && !result.isValid) {
                    this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});
                }
                cb(result);
            };
            // 调用初始化方法，初始化实体数据
            initialize(this, data, ConcreteEntity);
            this.load = (newData) => {
                attachEntityInstanceData(this, newData, ConcreteEntity);
            };
        };
        // 在实体类构造函数中记录视图类型名称
        ConcreteEntity.typeName = `${schemaType.name}Entity`;
        ConcreteEntity.code = relateSchema.code;
        ConcreteEntity.label = relateSchema.label;
        // 在实体类构造函数中记录其下直接引用的子类型
        ConcreteEntity.types = {};
        ConcreteEntity.__prop__metadata__ = {};
        // 构造实体类的原型对象
        const entityTypePrototype = Object.assign({ typeName: 'ConcreteEntityPrototype' }, entityPrototype);
        // 向实体类原型对象中定义预制属性
        this.definePresetProperty(entityTypePrototype, schemaType);
        // 向实体类原型对象中定义字段属性get/set方法
        this.defineFieldsToPrototype(entityTypePrototype, schemaType.fields, schemaType.primary, ConcreteEntity);
        // 向实体类原型对象中定义访问子实体的get/set方法
        this.defineEntitiesToPrototype(entityTypePrototype, schemaType.entities, ConcreteEntity);
        // 将实体类的原型对象指向新构造的原型对象。
        ConcreteEntity.prototype = entityTypePrototype;
        return ConcreteEntity;
    }
    /**
     * 向实体类原型对象中定义预制属性
     * @param prototypeObject 实体类原型对象
     * @param schemaType Schema类型描述
     */
    definePresetProperty(prototypeObject, schemaType) {
        /**
         * 实体数据
         */
        Object.defineProperty(prototypeObject, 'data', {
            get: function () {
                if (!this.innerData) {
                    this.innerData = {};
                }
                return this.innerData;
            },
            set: function (value) {
                this.innerData = value;
            }
        });
        /**
         * 实体验证信息
         */
        Object.defineProperty(prototypeObject, 'errors', {
            get: function () {
                return this.validErrors;
            },
            set: function (errors) {
                this.validErrors = errors;
            }
        });
        /**
         * 实体变更集
         */
        Object.defineProperty(prototypeObject, 'changes', {
            get: function () {
                return this.changeSet.changes;
            }
        });
        /**
         * 实体主键
         */
        Object.defineProperty(prototypeObject, 'primaryProperty', {
            // tslint:disable-next-line: only-arrow-functions
            get: function () {
                // return schemaType.primary;
                return prototypeObject.innerPrimaryProperty || { dataField: schemaType.primary };
            }
        });
        /**
         * 实体主键
         */
        Object.defineProperty(prototypeObject, 'primaryKey', {
            // tslint:disable-next-line: only-arrow-functions
            get: function () {
                return schemaType.primary || '';
            }
        });
        /**
         * 实体主键的值
         */
        Object.defineProperty(prototypeObject, 'primaryValue', {
            get: function () {
                if (this.primaryKey) {
                    // return this[this.primaryProperty.property].toString();
                    const primaryValue = this[this.primaryKey];
                    return primaryValue ? primaryValue : '';
                }
                else {
                    return '';
                }
            }
        });
    }
    /**
     * 向实体类定义字段属性
     * @param prototypeObject 实体类原型对象
     * @param fields 字段描述集合
     * @param parentEntityType 父类型
     */
    defineFieldsToPrototype(prototypeObject, fields, primary, parentEntityType) {
        if (fields && fields.length) {
            // 遍历Schema中描述的字段，在实体原型对象上定义字段访问函数
            fields.forEach(schemaEntityField => {
                switch (schemaEntityField.$type) {
                    // 定义简单类型字段
                    case SchemaEntityField$Type.SimpleField:
                        this.defineSimpleFieldToPrototype(prototypeObject, schemaEntityField, primary, parentEntityType);
                        break;
                    // 定义复杂类型字段
                    case SchemaEntityField$Type.ComplexField:
                        this.defineComplexFieldToPrototype(prototypeObject, schemaEntityField, parentEntityType);
                        break;
                }
            });
        }
    }
    /**
     * 向实体类定义简单类型字段
     * @param prototypeObject 实体类原型对象
     * @param schemaField 字段描述
     */
    defineSimpleFieldToPrototype(prototypeObject, schemaField, primary, parentEntityType) {
        const propertyName = schemaField.label;
        Object.defineProperty(prototypeObject, propertyName, {
            get: function () {
                return this.getFieldValue(schemaField);
            },
            set: function (newPropValue) {
                // 值相同时不触发变更。
                const oldPropValue = this.getFieldValue(schemaField);
                if (this.isFieldValueChanged(schemaField, newPropValue, oldPropValue) === false) {
                    return;
                }
                this.setFieldValue(schemaField, newPropValue);
                this.emitFieldValueChange(schemaField, newPropValue, oldPropValue);
            }
        });
        const fieldMetadata = {
            /** 字段名称 */
            dataField: this.getDataField(schemaField),
            /** 原始字段名称 */
            originalDataField: schemaField.code,
            /** 原始字段类型 */
            originalDataFieldType: schemaField.type.name,
            /**
             * 原始字段
             * @description 对应到scheme的path属性
             */
            path: schemaField.path,
            primary: schemaField.label === primary,
            enableMultiLangInput: this.getEnableMultiLangInput(schemaField),
            defaultValue: schemaField.defaultValue,
            ngMetadataName: NG_FIELD
        };
        if (schemaField['enableStdTimeFormat'] && fieldMetadata.originalDataFieldType == "DateTime") {
            fieldMetadata["enableTimeZone"] = true;
        }
        if (fieldMetadata.primary) {
            prototypeObject.innerPrimaryProperty = fieldMetadata;
        }
        if (!parentEntityType.__prop__metadata__[propertyName]) {
            parentEntityType.__prop__metadata__[propertyName] = [];
        }
        parentEntityType.__prop__metadata__[propertyName].push(fieldMetadata);
    }
    getDataField(schemaField) {
        if (schemaField.multiLanguage) {
            return schemaField.label + "_" + "MULTILANGUAGE";
        }
        return schemaField.label;
    }
    getEnableMultiLangInput(schemaField) {
        if (schemaField.multiLanguage) {
            return true;
        }
    }
    /**
     * 向实体类定义复杂类型字段
     * @param prototypeObject 实体类原型对象
     * @param schemaField 字段描述
     * @param parentEntityType 父类型
     */
    defineComplexFieldToPrototype(prototypeObject, schemaField, parentEntityType) {
        const complexFieldType = this.createClass(schemaField.type, schemaField);
        parentEntityType.types[schemaField.type.name] = complexFieldType;
        const propertyName = schemaField.label;
        Object.defineProperty(prototypeObject, propertyName, {
            get: function () {
                const fieldValue = this.getComplexFieldValue(schemaField);
                return fieldValue;
            },
            set: function (value) {
                this.setComplexFieldValue(schemaField, complexFieldType, value);
            }
        });
        const fieldMetadata = {
            /** 映射字段 */
            dataField: schemaField.label,
            /** 原始字段名称 */
            originalDataField: schemaField.code,
            /** 引用实体类型 */
            type: complexFieldType,
            /**
             * 原始字段
             * @description 对应到scheme的path属性
             */
            path: schemaField.path,
            ngMetadataName: NG_OBJECT
        };
        if (!parentEntityType.__prop__metadata__[propertyName]) {
            parentEntityType.__prop__metadata__[propertyName] = [];
        }
        parentEntityType.__prop__metadata__[propertyName].push(fieldMetadata);
    }
    /**
     * 向实体类定义子实体
     * @param prototypeObject 实体类原型对象
     * @param entities 实体描述集合
     * @param parentEntityType 父类型
     */
    defineEntitiesToPrototype(prototypeObject, entities, parentEntityType) {
        if (entities && entities.length) {
            // 遍历Schema中描述的子实体，在实体对象上定义子实体列表
            entities.forEach(schemaEntity => {
                const complexFieldType = this.createClass(schemaEntity.type, schemaEntity);
                parentEntityType.types[schemaEntity.type.name] = complexFieldType;
                // 提取子实体在实体对象上的属性名
                const propertyName = schemaEntity.label;
                Object.defineProperty(prototypeObject, propertyName, {
                    get: function () {
                        const fieldValue = this.getEntities(schemaEntity);
                        return fieldValue;
                    },
                    set: function (value) {
                        this.setEntities(schemaEntity, value);
                    }
                });
                const entitMetadata = {
                    /** 字段名称 */
                    dataField: schemaEntity.label,
                    /** 原始字段名称 */
                    originalDataField: '',
                    /** 实体类型 */
                    type: complexFieldType,
                    ngMetadataName: NG_LIST
                };
                if (!parentEntityType.__prop__metadata__[propertyName]) {
                    parentEntityType.__prop__metadata__[propertyName] = [];
                }
                parentEntityType.__prop__metadata__[propertyName].push(entitMetadata);
            });
        }
    }
    /**
     * 创建初始化实体对象方法
     * @param schemaType 实体类型描述
     * @returns 初始化实体对象方法
     */
    createEntityInstanceDataInitializer(schemaType) {
        /**
         * 实体初始化函数，用来初始化实体的复杂类型数据和子实体数据
         * @param entityInstance 实体类型实例
         * @param data 实体原始数据
         * @param entityTypeConstructor 实体类型构造函数
         */
        const initializer = (entityInstance, entityData, entityTypeConstructor) => {
            // 初始化复杂类型字段
            schemaType.fields
                // 过滤复杂类型字段
                .filter(field => field.$type === SchemaEntityField$Type.ComplexField)
                // 遍历复杂类型字段创建对应实体类型数据
                .forEach(field => {
                // 提取字段名
                const fieldName = field.label;
                // 提取实体类型下的所有子实体类型
                const includedEntityTypes = entityTypeConstructor.types;
                // 获取复杂类型字段对应的实体类型
                const ComplexField = includedEntityTypes[field.type.name];
                // 提取复杂类型字段原始数据
                const fieldData = entityData ? entityData[fieldName] : null;
                // 创建复杂类型字段对象路径
                const path = entityInstance.createPath(fieldName);
                let complexFieldValue = entityInstance[fieldName];
                if (complexFieldValue instanceof ComplexField) {
                    complexFieldValue.load(fieldData);
                }
                else {
                    // 创建复杂类型字段实体实例
                    complexFieldValue = new ComplexField(fieldData);
                    complexFieldValue.constructor = ComplexField;
                    complexFieldValue[PARENT_CLASS] = entityTypeConstructor;
                    complexFieldValue[PARENT_PATH] = path;
                    complexFieldValue.onValueChanged.subscribe(changes => {
                        if (changes) {
                            changes.path = (entityInstance[PARENT_PATH] || []).concat(changes.path);
                            entityInstance.setChanges(changes);
                        }
                    });
                    entityInstance[fieldName] = complexFieldValue;
                }
            });
            // 初始化子实体
            if (schemaType.entities) {
                // 遍历子实体创建对应实体类型的数据
                schemaType.entities.forEach(schemaEntity => {
                    // 提取子实体名
                    const subEntityName = schemaEntity.label;
                    // 提取实体类型下的所有子实体类型
                    const includedEntityTypes = entityTypeConstructor.types;
                    // 创建子实体对象路径
                    const path = entityInstance.createPath(subEntityName);
                    // 创建子实体对象集合
                    let entityList = entityInstance[subEntityName];
                    if (!(entityList instanceof EntityList)) {
                        entityList = new EntityList();
                        // 向子实体列表注册子实体变化事件
                        entityList.onListChanged.subscribe(value => {
                            if (value) {
                                if (entityList[PARENT_PATH][0] !== value.path[0]) {
                                    value.path = entityList[PARENT_PATH].concat(value.path);
                                }
                                entityInstance.setChanges(value);
                            }
                        });
                        // 向实体类型实例上直接存储子实体对象列表
                        entityInstance[subEntityName] = entityList;
                    }
                    entityList[PARENT_CLASS] = entityTypeConstructor;
                    entityList[PARENT_PATH] = path;
                    // 提取子实体类型名称
                    const schemaEntityTypeName = schemaEntity.type.name;
                    // 获取子实体类型
                    const ConcreteEntity = includedEntityTypes[schemaEntityTypeName];
                    const originalEntityDataArray = entityData ? entityData[subEntityName] : null;
                    // 构造子实体集合
                    if (originalEntityDataArray) {
                        // 遍历子实体原始数据，构造实体对象集合
                        const entities = originalEntityDataArray.map((originalEntityData) => {
                            const concreteEntityInstance = new ConcreteEntity(originalEntityData);
                            concreteEntityInstance.constructor = ConcreteEntity;
                            return concreteEntityInstance;
                        });
                        // 向子实体列表中添加子实体对象
                        entityList.loadEntities(entities);
                    }
                });
            }
        };
        return initializer;
    }
}
//# sourceMappingURL=data:application/json;base64,