import { Injectable, Optional } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { BefRepositoryUtil } from '@farris/bef';
import { of, empty, EMPTY, from, Subject } from 'rxjs';
import { tap, switchMap, concatMap, last } from 'rxjs/operators';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { LanguageService } from '../languag.service';
import { FormNotifyService } from '../form-notify.service';
import { FormMessageService } from '../form-message.service';
import { FormErrorService } from '../error/form-error.service';
import { EditStateUtil } from './utils/index';
import { FormNotifyStrategyService } from '../form-notify-strategy.service';
import { RuntimeFrameworkService } from '../rtf-service';
import { WEB_FORM_ROUTE_PARAMS_KEY } from '../types';
import { CommandService } from '../command-service';
import { ValidationService } from '../validation.service';
// tslint:disable: no-string-literal
// tslint:disable: max-line-length
/**
 * 卡片仓库服务
 */
class CardDataService {
    /**
     * 构造函数
     */
    constructor(formMessageService, frameContext, loadingService, formNotifyService, languageService, formErrorService, runtimeFrameworkService, commandService) {
        this.formMessageService = formMessageService;
        this.frameContext = frameContext;
        this.loadingService = loadingService;
        this.formNotifyService = formNotifyService;
        this.languageService = languageService;
        this.formErrorService = formErrorService;
        this.runtimeFrameworkService = runtimeFrameworkService;
        this.commandService = commandService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
        this.repository = this.frameContext.repository;
        this.bindingData = this.frameContext.bindingData;
    }
    /**
     * 加载数据
     * @param id 主实体id
     * @param enableChildrenPagination 启用子表分页
     */
    load(id) {
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        this.frameContext.appContext.params.set("retrieveing", true);
        this.frameContext.appContext.params.delete('queryChild');
        const get$ = this.repository.getById(id);
        return get$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.loadFailed, error);
        }));
    }
    /**
     * 加载前
     * @param id id
     * @param transitionActionParamName 状态迁移动作参数编号
     * @returns
     */
    onLoading(transitionActionParamName) {
        const tabId = this.runtimeFrameworkService && this.runtimeFrameworkService.tabId || null;
        if (!tabId) {
            return;
        }
        let skip = true;
        const listening = this.frameContext.appContext.params.get(tabId) || false;
        transitionActionParamName = transitionActionParamName || 'transitionAction';
        if (!listening) {
            this.frameContext.appContext.params.set(tabId, true);
            this.runtimeFrameworkService.getEntityParam(tabId, (options) => {
                if (skip) {
                    skip = false;
                    return;
                }
                const params = this.parseParams(options);
                if (params && params.sync) {
                    const action = params.action;
                    const id = params.id;
                    const ngCommand = this.frameContext && this.frameContext.viewModel && this.frameContext.viewModel.metadatas && this.frameContext.viewModel.metadatas[action];
                    const actionName = ngCommand.params && ngCommand.params[transitionActionParamName] || null;
                    const formPrimaryValue = this.frameContext.bindingData.list.currentId;
                    const formState = this.frameContext.stateMachine.context.state;
                    let state = null;
                    let stateName;
                    if (!actionName) {
                        // 可能是用户自己配置的命令，没有状态机切换，此时不再判断状态机
                        state = formState;
                    }
                    else {
                        const ngAction = this.frameContext && this.frameContext.stateMachine && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas.actions && this.frameContext.stateMachine.metadatas.actions[actionName];
                        state = ngAction && ngAction.transitTo || formState;
                        stateName = this.frameContext && this.frameContext.stateMachine && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas.states[state] && this.frameContext.stateMachine.metadatas.states[state].name || this.languageService.defaultStateName;
                        if (stateName && stateName.startsWith('{{') && stateName.endsWith('}}')) {
                            const key = stateName.replace('{{', '').replace('}}', '');
                            stateName = this.frameContext.translate.transform(key, null);
                        }
                    }
                    const primaryValueChanged = formPrimaryValue !== id;
                    const stateChanged = formState !== state;
                    if (primaryValueChanged && stateChanged) {
                        // 均发生变化
                        const message = this.languageService.dataAndStateChanged.replace(/\$1/g, stateName);
                        this.showLoadingConfirm(message).pipe(switchMap(() => {
                            return this.resetForm(action);
                        })).subscribe();
                    }
                    else if (primaryValueChanged) {
                        // 主键发生变化
                        this.showLoadingConfirm(this.languageService.dataChanged).pipe(switchMap(() => {
                            return this.resetForm(action);
                        })).subscribe();
                    }
                    else if (stateChanged) {
                        // 状态发生变化
                        const message = this.languageService.stateChanged.replace(/\$1/g, stateName);
                        this.showLoadingConfirm(message).pipe(switchMap(() => {
                            return this.resetForm(action);
                        })).subscribe();
                    }
                    else {
                        // 数据及状态均未发生变化
                        return of(true);
                    }
                }
            }, false);
        }
    }
    /**
     * 新增
     */
    add() {
        const lastModifiedId = this.bindingData.list.currentId;
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const create$ = this.repository.create();
        return create$.pipe(tap(() => {
            EditStateUtil.setEditState(this.frameContext, lastModifiedId);
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.addFailed, error);
        }));
    }
    /**
     * 级联新增
     */
    cascadeAdd() {
        const subject = new Subject();
        // 找到所有viewmodel,拿到了所有的frameContext，可能有组合表单的
        const frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        // 找到当前frameContext的公共namespace
        const currentNamespace = this.frameContext.getVirtualRootFrameContext().namespace;
        // 拿到当前命令所在frame的表单的所有frameContext
        const currentFormFrameContexts = frameContexts.filter((context) => context.namespace === currentNamespace) || [];
        let bindingPaths = [];
        if (currentFormFrameContexts && currentFormFrameContexts.length > 0) {
            // 找到所有下级frameContext
            const childFrameContexts = currentFormFrameContexts.filter((context) => context.viewModel.bindingPath && context.viewModel.bindingPath !== '/');
            if (childFrameContexts && childFrameContexts.length > 0) {
                const childBindingPaths = childFrameContexts.map((context) => context.viewModel.bindingPath);
                if (childBindingPaths && childBindingPaths.length > 0) {
                    bindingPaths = childBindingPaths.map(path => path.split('/').filter(p => p)).sort((a, b) => a.length - b.length);
                }
            }
        }
        this.loadingService.show();
        this.repository.create().pipe(switchMap((entity) => {
            const rid = entity.primaryValue;
            if (bindingPaths && bindingPaths.length > 0) {
                return from(bindingPaths).pipe(concatMap((bindingPath) => {
                    const fpath = this.getPath(this.frameContext.viewModel, '/' + bindingPath.join('/'), rid);
                    return this.repository.appendByPath(fpath);
                }));
            }
            else {
                return of(entity);
            }
        })).pipe(last()).subscribe(() => {
            this.loadingService.hide();
            subject.next();
        }, (error) => {
            this.loadingService.hide();
            this.formErrorService.exception(this.languageService.addFailed, error);
        });
        return subject;
    }
    /**
     * 编辑（更新数据并标记编辑状态）
     */
    edit(id) {
        const update$ = this.update();
        return update$.pipe(tap(() => {
            const currentId = this.bindingData.list.currentId;
            EditStateUtil.setEditState(this.frameContext, currentId);
        }));
    }
    /**
     * 更新
     * @param id 主实体id
     * @param enableChildrenPagination 启用子表分页
     */
    update(id) {
        // 获取id
        id = this.bindingData.list.currentId;
        if (!id) {
            return empty();
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const update$ = this.repository.updateById(id);
        this.frameContext.appContext.params.set("retrieveing", true);
        return update$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.updateFailed, error);
        }));
    }
    updateWithoutEmpty() {
        // 获取id
        const id = this.bindingData.list.currentId;
        if (!id) {
            return of(null);
        }
        else {
            return this.update();
        }
    }
    /**
     * 校验当前行是否存在
     * @returns
     */
    checkBeforeUpdate() {
        const bindingList = this.frameContext.bindingData.list;
        const id = bindingList && bindingList.currentId;
        if (!id) {
            this.formNotifyService.warning(this.languageService.noDataExist, { hideTitle: true });
            return EMPTY;
        }
        return of(true);
    }
    /**
     * 已废弃
     * @returns
     */
    updateWithNotify() {
        // 获取id
        const id = this.bindingData.list.currentId;
        if (!id) {
            this.formNotifyService.warning(this.languageService.noDataExist, { hideTitle: true });
            return EMPTY;
        }
        else {
            return this.update();
        }
    }
    /**
     * 加载卡片数据（分页加载子表数据）
     * @deprecated 方法已废弃，请勿使用
     */
    loadPaged(filter, sort) {
        // 获取id
        const id = this.bindingData.list.currentId;
        if (!id) {
            return EMPTY;
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        // this.frameContext.root.params.set('updateWithPaging', true);
        const update$ = of(null); //this.repository.updateEntityById(id, true);
        return update$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.updateFailed, error);
        }));
    }
    /**
     * 保存
     */
    save(successMsg) {
        // 获取当前行
        const id = this.bindingData.list.currentId;
        if (!id) {
            return of(false);
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const update$ = this.repository.updateChangesById(id);
        const save$ = this.repository.applyChangesById(id);
        const result$ = update$.pipe(
        // update$ => save$
        switchMap((updateResult) => {
            if (updateResult === false) {
                return of(false);
            }
            else {
                return save$;
            }
        }), 
        // 隐藏loading
        tap(() => {
            // 取消新增状态
            EditStateUtil.setEditState(this.frameContext, id);
            this.loadingService.hideDelayLoading(loadingTimerId);
            // this.formNotifyService.info(this.languageService.saveSuccess);
            if (successMsg && successMsg.trim()) {
                let showMessage = true;
                if (successMsg.startsWith('{') && successMsg.endsWith('}')) {
                    try {
                        const options = JSON.parse(successMsg);
                        if (options && options.showMessage === false) {
                            showMessage = false;
                        }
                    }
                    catch (_a) { }
                }
                if (showMessage !== false) {
                    this.formNotifyService.success(successMsg, { hideTitle: true });
                }
            }
            else {
                FormNotifyStrategyService.success(this.formNotifyService, this.languageService.saveSuccess);
            }
            // FormNotifyStrategyService.success(this.formNotifyService, this.languageService.saveSuccess);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.saveFailed, error);
        }));
        return result$;
    }
    // #region 取消相关方法
    /**
     * 取消（默认取消）
     */
    cancel() {
        return this.cancelWithCheck();
    }
    /**
     * 还原变更集
     * @description 不带变更检测提示
     */
    revert(options) {
        return this.cancelWithoutCheck(options);
    }
    /**
     * 取消（取消前检查未保存的变更）
     * @summary
     * 1、用户误操作：只需要做个提示就可以了；
     * 2、用户有意取消：点击取消就是要放弃所有变更，这时候询问人家是否要保存或者提示存在变更有点多此一举，确认一把即可。
     * 3、用户误操作：没有变更的情况下直接给取消了，用户会产生恐慌，因为用户有时候并不确定是否有变更，应该也确认一把。
     * @todo
     * 1、由于产品部很多代码误用了该方法，依赖了没有变更的时候直接取消，现在弹窗确认框来，不太合适；
     * 2、产品部需要用cancelWithoutCheck方法代替，目前先给兼容着，待删除。
     */
    cancelWithCheck() {
        // @todel
        const hasUnSavedChanges = BefRepositoryUtil.isExistUnsaveData(this.repository);
        if (!hasUnSavedChanges) {
            return this.cancelChanges();
        }
        // 确认是否取消
        const confirm$ = this.formMessageService.question(this.languageService['cancelWithoutSave']);
        const result$ = confirm$.pipe(switchMap((ifCancel) => {
            if (ifCancel === false) {
                return EMPTY;
            }
            return this.cancelChanges();
        }));
        return result$;
    }
    /**
     * 取消（直接取消，不执行检查）
     */
    cancelWithoutCheck(options) {
        return this.cancelChanges(options);
    }
    /**
     * 取消
     */
    cancelChanges(options) {
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const cancel$ = this.repository.cancelChanges(options);
        return cancel$.pipe(tap(() => {
            EditStateUtil.setEditState(this.frameContext, '');
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.formErrorService.exception(this.languageService.cancelFailed, error);
        }));
    }
    // #endregion
    /**
     * 重新加载（仅供卡片取消后重新加载数据，其他场景请勿使用）
     */
    reload() {
        const isAdd = EditStateUtil.getAddState(this.frameContext);
        let id;
        if (isAdd === true) {
            id = EditStateUtil.getLastModifiedId(this.frameContext);
        }
        else {
            id = this.bindingData.list.currentId;
        }
        if (!id) {
            this.repository.entityCollection.loadEntities([]);
            return;
        }
        return this.load(id);
    }
    getPath(viewModel, bindingPath, rid) {
        let path = '/' + rid;
        const subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (let index = 1; index < subPaths.length - 1; index++) {
                const subPath = subPaths[index];
                const subData = viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);
                }
                path += `/${subPath}/${subData.currentId}`;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    }
    resetForm(action) {
        const validationService = this.frameContext.injector.get(ValidationService, null);
        return this.frameContext.repository.cancelChanges().pipe(switchMap(() => this.commandService.execute(action).pipe(switchMap(() => {
            return validationService && validationService.resetValidation() || of(null);
        }))));
    }
    parseParams(options) {
        if (options && Object.prototype.toString.call(options) === "[object Map]" /* map */) {
            let params = options.get(WEB_FORM_ROUTE_PARAMS_KEY);
            if (params && typeof params === 'string') {
                params = decodeURIComponent(params);
                if (params.startsWith('{') && params.endsWith('}')) {
                    params = JSON.parse(params);
                }
                return {
                    action: params.action,
                    id: params.idToView || params.idToEdit || params.id,
                    sync: params.sync || false
                };
            }
        }
        return null;
    }
    showLoadingConfirm(message) {
        return this.formMessageService.confirm(message).pipe(switchMap((result) => {
            if (result === true) {
                return of(true);
            }
            else {
                return EMPTY;
            }
        }));
    }
}
CardDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CardDataService.ctorParameters = () => [
    { type: FormMessageService },
    { type: FrameContext },
    { type: FormLoadingService },
    { type: FormNotifyService },
    { type: LanguageService, decorators: [{ type: Optional }] },
    { type: FormErrorService },
    { type: RuntimeFrameworkService },
    { type: CommandService }
];
export { CardDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZGF0YS1zZXJ2aWNlcy9jYXJkLWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQXVCLFlBQVksRUFBYSxNQUFNLGdCQUFnQixDQUFDO0FBQzlFLE9BQU8sRUFBaUIsaUJBQWlCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDL0QsT0FBTyxFQUFjLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFlLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEYsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUF1QixJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUMxRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5QyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RCxPQUFPLEVBQVkseUJBQXlCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDL0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FB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M0IsQ0FBQzthQUNIO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDTyxrQkFBa0IsQ0FBQyxPQUFlO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ2xELFNBQVMsQ0FBQyxDQUFDLE1BQWUsRUFBRSxFQUFFO1lBQzVCLElBQUksTUFBTSxLQUFLLElBQUksRUFBRTtnQkFDbkIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDakI7aUJBQU07Z0JBQ0wsT0FBTyxLQUFLLENBQUM7YUFDZDtRQUNILENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOzs7WUE3ZkYsVUFBVTs7OztZQWJGLGtCQUFrQjtZQVBHLFlBQVk7WUFJakMsa0JBQWtCO1lBRWxCLGlCQUFpQjtZQURqQixlQUFlLHVCQW9DbkIsUUFBUTtZQWpDSixnQkFBZ0I7WUFHaEIsdUJBQXVCO1lBRXZCLGNBQWM7O0FBc2dCdkIsT0FBTyxFQUFFLGVBQWUsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRW50aXR5LCBCaW5kaW5nRGF0YSwgRnJhbWVDb250ZXh0LCBWaWV3TW9kZWwgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IEJlZlJlcG9zaXRvcnksIEJlZlJlcG9zaXRvcnlVdGlsIH0gZnJvbSAnQGZhcnJpcy9iZWYnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgZW1wdHksIEVNUFRZLCBjb25jYXQsIHppcCwgZnJvbSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YXAsIHN3aXRjaE1hcCwgY29uY2F0TWFwLCBjb25jYXRBbGwsIHRha2VMYXN0LCBsYXN0IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBGb3JtTG9hZGluZ1NlcnZpY2UgfSBmcm9tICcuLi9mb3JtLWxvYWRpbmcvZm9ybS1sb2FkaW5nLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi9sYW5ndWFnLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBGb3JtTm90aWZ5U2VydmljZSB9IGZyb20gJy4uL2Zvcm0tbm90aWZ5LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBGb3JtTWVzc2FnZVNlcnZpY2UgfSBmcm9tICcuLi9mb3JtLW1lc3NhZ2Uuc2VydmljZSc7XHJcbmltcG9ydCB7IEZvcm1FcnJvclNlcnZpY2UgfSBmcm9tICcuLi9lcnJvci9mb3JtLWVycm9yLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBFZGl0U3RhdGVVdGlsIH0gZnJvbSAnLi91dGlscy9pbmRleCc7XHJcbmltcG9ydCB7IEZvcm1Ob3RpZnlTdHJhdGVneVNlcnZpY2UgfSBmcm9tICcuLi9mb3JtLW5vdGlmeS1zdHJhdGVneS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUnVudGltZUZyYW1ld29ya1NlcnZpY2UgfSBmcm9tICcuLi9ydGYtc2VydmljZSc7XHJcbmltcG9ydCB7IERhdGFUeXBlLCBXRUJfRk9STV9ST1VURV9QQVJBTVNfS0VZIH0gZnJvbSAnLi4vdHlwZXMnO1xyXG5pbXBvcnQgeyBDb21tYW5kU2VydmljZSB9IGZyb20gJy4uL2NvbW1hbmQtc2VydmljZSc7XHJcbmltcG9ydCB7IFZhbGlkYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vdmFsaWRhdGlvbi5zZXJ2aWNlJztcclxuLy8gdHNsaW50OmRpc2FibGU6IG5vLXN0cmluZy1saXRlcmFsXHJcbi8vIHRzbGludDpkaXNhYmxlOiBtYXgtbGluZS1sZW5ndGhcclxuLyoqXHJcbiAqIOWNoeeJh+S7k+W6k+acjeWKoVxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5jbGFzcyBDYXJkRGF0YVNlcnZpY2Uge1xyXG5cclxuICAvKipcclxuICAgKiDlrp7kvZPku5PlupNcclxuICAgKi9cclxuICBwcml2YXRlIHJlcG9zaXRvcnk6IEJlZlJlcG9zaXRvcnk8RW50aXR5PjtcclxuXHJcbiAgLyoqXHJcbiAgICog57uR5a6a5pWw5o2uXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBiaW5kaW5nRGF0YTogQmluZGluZ0RhdGE7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBmb3JtTWVzc2FnZVNlcnZpY2U6IEZvcm1NZXNzYWdlU2VydmljZSxcclxuICAgIHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsXHJcbiAgICBwcml2YXRlIGxvYWRpbmdTZXJ2aWNlOiBGb3JtTG9hZGluZ1NlcnZpY2UsXHJcbiAgICBwcml2YXRlIGZvcm1Ob3RpZnlTZXJ2aWNlOiBGb3JtTm90aWZ5U2VydmljZSxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBMYW5ndWFnZVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGZvcm1FcnJvclNlcnZpY2U6IEZvcm1FcnJvclNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHJ1bnRpbWVGcmFtZXdvcmtTZXJ2aWNlOiBSdW50aW1lRnJhbWV3b3JrU2VydmljZSxcclxuICAgIHByaXZhdGUgY29tbWFuZFNlcnZpY2U6IENvbW1hbmRTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICBpZiAoIWxhbmd1YWdlU2VydmljZSkge1xyXG4gICAgICB0aGlzLmxhbmd1YWdlU2VydmljZSA9IExhbmd1YWdlU2VydmljZS5nZXRJbnN0YW5jZSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5yZXBvc2l0b3J5ID0gdGhpcy5mcmFtZUNvbnRleHQucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PEVudGl0eT47XHJcbiAgICB0aGlzLmJpbmRpbmdEYXRhID0gdGhpcy5mcmFtZUNvbnRleHQuYmluZGluZ0RhdGE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliqDovb3mlbDmja5cclxuICAgKiBAcGFyYW0gaWQg5Li75a6e5L2TaWRcclxuICAgKiBAcGFyYW0gZW5hYmxlQ2hpbGRyZW5QYWdpbmF0aW9uIOWQr+eUqOWtkOihqOWIhumhtVxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb2FkKGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEVudGl0eT4ge1xyXG4gICAgY29uc3QgbG9hZGluZ1RpbWVySWQgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3dMb2FkaW5nV2l0aERlbGF5KDUwMCk7XHJcbiAgICB0aGlzLmZyYW1lQ29udGV4dC5hcHBDb250ZXh0LnBhcmFtcy5zZXQoXCJyZXRyaWV2ZWluZ1wiLCB0cnVlKTtcclxuICAgIHRoaXMuZnJhbWVDb250ZXh0LmFwcENvbnRleHQucGFyYW1zLmRlbGV0ZSgncXVlcnlDaGlsZCcpO1xyXG4gICAgY29uc3QgZ2V0JCA9IHRoaXMucmVwb3NpdG9yeS5nZXRCeUlkKGlkKTtcclxuICAgIHJldHVybiBnZXQkLnBpcGUoXHJcbiAgICAgIHRhcChcclxuICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgKGVycm9yOiBhbnkpID0+IHtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XHJcbiAgICAgICAgICB0aGlzLmZvcm1FcnJvclNlcnZpY2UuZXhjZXB0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmxvYWRGYWlsZWQsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWKoOi9veWJjVxyXG4gICAqIEBwYXJhbSBpZCBpZFxyXG4gICAqIEBwYXJhbSB0cmFuc2l0aW9uQWN0aW9uUGFyYW1OYW1lIOeKtuaAgei/geenu+WKqOS9nOWPguaVsOe8luWPt1xyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBvbkxvYWRpbmcodHJhbnNpdGlvbkFjdGlvblBhcmFtTmFtZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCB0YWJJZCA9IHRoaXMucnVudGltZUZyYW1ld29ya1NlcnZpY2UgJiYgdGhpcy5ydW50aW1lRnJhbWV3b3JrU2VydmljZS50YWJJZCB8fCBudWxsO1xyXG4gICAgaWYgKCF0YWJJZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgc2tpcCA9IHRydWU7XHJcbiAgICBjb25zdCBsaXN0ZW5pbmcgPSB0aGlzLmZyYW1lQ29udGV4dC5hcHBDb250ZXh0LnBhcmFtcy5nZXQodGFiSWQpIHx8IGZhbHNlO1xyXG4gICAgdHJhbnNpdGlvbkFjdGlvblBhcmFtTmFtZSA9IHRyYW5zaXRpb25BY3Rpb25QYXJhbU5hbWUgfHwgJ3RyYW5zaXRpb25BY3Rpb24nO1xyXG4gICAgaWYgKCFsaXN0ZW5pbmcpIHtcclxuICAgICAgdGhpcy5mcmFtZUNvbnRleHQuYXBwQ29udGV4dC5wYXJhbXMuc2V0KHRhYklkLCB0cnVlKTtcclxuICAgICAgdGhpcy5ydW50aW1lRnJhbWV3b3JrU2VydmljZS5nZXRFbnRpdHlQYXJhbSh0YWJJZCwgKG9wdGlvbnM6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmIChza2lwKSB7XHJcbiAgICAgICAgICBza2lwID0gZmFsc2U7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHRoaXMucGFyc2VQYXJhbXMob3B0aW9ucyk7XHJcbiAgICAgICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMuc3luYykge1xyXG4gICAgICAgICAgY29uc3QgYWN0aW9uID0gcGFyYW1zLmFjdGlvbjtcclxuICAgICAgICAgIGNvbnN0IGlkID0gcGFyYW1zLmlkO1xyXG4gICAgICAgICAgY29uc3QgbmdDb21tYW5kID0gdGhpcy5mcmFtZUNvbnRleHQgJiYgdGhpcy5mcmFtZUNvbnRleHQudmlld01vZGVsICYmIHRoaXMuZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5tZXRhZGF0YXMgJiYgdGhpcy5mcmFtZUNvbnRleHQudmlld01vZGVsLm1ldGFkYXRhc1thY3Rpb25dO1xyXG4gICAgICAgICAgY29uc3QgYWN0aW9uTmFtZSA9IG5nQ29tbWFuZC5wYXJhbXMgJiYgbmdDb21tYW5kLnBhcmFtc1t0cmFuc2l0aW9uQWN0aW9uUGFyYW1OYW1lXSB8fCBudWxsO1xyXG4gICAgICAgICAgY29uc3QgZm9ybVByaW1hcnlWYWx1ZSA9IHRoaXMuZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkO1xyXG4gICAgICAgICAgY29uc3QgZm9ybVN0YXRlID0gdGhpcy5mcmFtZUNvbnRleHQuc3RhdGVNYWNoaW5lLmNvbnRleHQuc3RhdGU7XHJcbiAgICAgICAgICBsZXQgc3RhdGUgPSBudWxsO1xyXG4gICAgICAgICAgbGV0IHN0YXRlTmFtZTogc3RyaW5nO1xyXG4gICAgICAgICAgaWYgKCFhY3Rpb25OYW1lKSB7XHJcbiAgICAgICAgICAgIC8vIOWPr+iDveaYr+eUqOaIt+iHquW3semFjee9rueahOWRveS7pO+8jOayoeacieeKtuaAgeacuuWIh+aNou+8jOatpOaXtuS4jeWGjeWIpOaWreeKtuaAgeaculxyXG4gICAgICAgICAgICBzdGF0ZSA9IGZvcm1TdGF0ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBuZ0FjdGlvbiA9IHRoaXMuZnJhbWVDb250ZXh0ICYmIHRoaXMuZnJhbWVDb250ZXh0LnN0YXRlTWFjaGluZSAmJiB0aGlzLmZyYW1lQ29udGV4dC5zdGF0ZU1hY2hpbmUubWV0YWRhdGFzICYmIHRoaXMuZnJhbWVDb250ZXh0LnN0YXRlTWFjaGluZS5tZXRhZGF0YXMuYWN0aW9ucyAmJiB0aGlzLmZyYW1lQ29udGV4dC5zdGF0ZU1hY2hpbmUubWV0YWRhdGFzLmFjdGlvbnNbYWN0aW9uTmFtZV07XHJcbiAgICAgICAgICAgIHN0YXRlID0gbmdBY3Rpb24gJiYgbmdBY3Rpb24udHJhbnNpdFRvIHx8IGZvcm1TdGF0ZTtcclxuICAgICAgICAgICAgc3RhdGVOYW1lID0gdGhpcy5mcmFtZUNvbnRleHQgJiYgdGhpcy5mcmFtZUNvbnRleHQuc3RhdGVNYWNoaW5lICYmIHRoaXMuZnJhbWVDb250ZXh0LnN0YXRlTWFjaGluZS5tZXRhZGF0YXMgJiYgdGhpcy5mcmFtZUNvbnRleHQuc3RhdGVNYWNoaW5lLm1ldGFkYXRhcyAmJiB0aGlzLmZyYW1lQ29udGV4dC5zdGF0ZU1hY2hpbmUubWV0YWRhdGFzLnN0YXRlc1tzdGF0ZV0gJiYgdGhpcy5mcmFtZUNvbnRleHQuc3RhdGVNYWNoaW5lLm1ldGFkYXRhcy5zdGF0ZXNbc3RhdGVdLm5hbWUgfHwgdGhpcy5sYW5ndWFnZVNlcnZpY2UuZGVmYXVsdFN0YXRlTmFtZTtcclxuICAgICAgICAgICAgaWYgKHN0YXRlTmFtZSAmJiBzdGF0ZU5hbWUuc3RhcnRzV2l0aCgne3snKSAmJiBzdGF0ZU5hbWUuZW5kc1dpdGgoJ319JykpIHtcclxuICAgICAgICAgICAgICBjb25zdCBrZXkgPSBzdGF0ZU5hbWUucmVwbGFjZSgne3snLCAnJykucmVwbGFjZSgnfX0nLCAnJyk7XHJcbiAgICAgICAgICAgICAgc3RhdGVOYW1lID0gdGhpcy5mcmFtZUNvbnRleHQudHJhbnNsYXRlLnRyYW5zZm9ybShrZXksIG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zdCBwcmltYXJ5VmFsdWVDaGFuZ2VkID0gZm9ybVByaW1hcnlWYWx1ZSAhPT0gaWQ7XHJcbiAgICAgICAgICBjb25zdCBzdGF0ZUNoYW5nZWQgPSBmb3JtU3RhdGUgIT09IHN0YXRlO1xyXG5cclxuICAgICAgICAgIGlmIChwcmltYXJ5VmFsdWVDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAvLyDlnYflj5HnlJ/lj5jljJZcclxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmRhdGFBbmRTdGF0ZUNoYW5nZWQucmVwbGFjZSgvXFwkMS9nLCBzdGF0ZU5hbWUpO1xyXG4gICAgICAgICAgICB0aGlzLnNob3dMb2FkaW5nQ29uZmlybShtZXNzYWdlKS5waXBlKHN3aXRjaE1hcCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzZXRGb3JtKGFjdGlvbik7XHJcbiAgICAgICAgICAgIH0pKS5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAocHJpbWFyeVZhbHVlQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAvLyDkuLvplK7lj5HnlJ/lj5jljJZcclxuICAgICAgICAgICAgdGhpcy5zaG93TG9hZGluZ0NvbmZpcm0odGhpcy5sYW5ndWFnZVNlcnZpY2UuZGF0YUNoYW5nZWQpLnBpcGUoc3dpdGNoTWFwKCgpID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXNldEZvcm0oYWN0aW9uKTtcclxuICAgICAgICAgICAgfSkpLnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZUNoYW5nZWQpIHtcclxuICAgICAgICAgICAgLy8g54q25oCB5Y+R55Sf5Y+Y5YyWXHJcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLmxhbmd1YWdlU2VydmljZS5zdGF0ZUNoYW5nZWQucmVwbGFjZSgvXFwkMS9nLCBzdGF0ZU5hbWUpO1xyXG4gICAgICAgICAgICB0aGlzLnNob3dMb2FkaW5nQ29uZmlybShtZXNzYWdlKS5waXBlKHN3aXRjaE1hcCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzZXRGb3JtKGFjdGlvbik7XHJcbiAgICAgICAgICAgIH0pKS5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIOaVsOaNruWPiueKtuaAgeWdh+acquWPkeeUn+WPmOWMllxyXG4gICAgICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmlrDlop5cclxuICAgKi9cclxuICBwdWJsaWMgYWRkKCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBsYXN0TW9kaWZpZWRJZCA9IHRoaXMuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQ7XHJcblxyXG4gICAgY29uc3QgbG9hZGluZ1RpbWVySWQgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3dMb2FkaW5nV2l0aERlbGF5KDUwMCk7XHJcbiAgICBjb25zdCBjcmVhdGUkID0gdGhpcy5yZXBvc2l0b3J5LmNyZWF0ZSgpO1xyXG4gICAgcmV0dXJuIGNyZWF0ZSQucGlwZShcclxuICAgICAgdGFwKFxyXG4gICAgICAgICgpID0+IHtcclxuICAgICAgICAgIEVkaXRTdGF0ZVV0aWwuc2V0RWRpdFN0YXRlKHRoaXMuZnJhbWVDb250ZXh0LCBsYXN0TW9kaWZpZWRJZCk7XHJcbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgKGVycm9yOiBhbnkpID0+IHtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XHJcbiAgICAgICAgICB0aGlzLmZvcm1FcnJvclNlcnZpY2UuZXhjZXB0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmFkZEZhaWxlZCwgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog57qn6IGU5paw5aKeXHJcbiAgICovXHJcbiAgcHVibGljIGNhc2NhZGVBZGQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHN1YmplY3QgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgICAvLyDmib7liLDmiYDmnIl2aWV3bW9kZWws5ou/5Yiw5LqG5omA5pyJ55qEZnJhbWVDb250ZXh077yM5Y+v6IO95pyJ57uE5ZCI6KGo5Y2V55qEXHJcbiAgICBjb25zdCBmcmFtZUNvbnRleHRzID0gdGhpcy5mcmFtZUNvbnRleHQuYXBwQ29udGV4dC5mcmFtZUNvbnRleHRNYW5hZ2VyLmdldEZyYW1lQ29udGV4dHMoKTtcclxuICAgIC8vIOaJvuWIsOW9k+WJjWZyYW1lQ29udGV4dOeahOWFrOWFsW5hbWVzcGFjZVxyXG4gICAgY29uc3QgY3VycmVudE5hbWVzcGFjZSA9IHRoaXMuZnJhbWVDb250ZXh0LmdldFZpcnR1YWxSb290RnJhbWVDb250ZXh0KCkubmFtZXNwYWNlO1xyXG4gICAgLy8g5ou/5Yiw5b2T5YmN5ZG95Luk5omA5ZyoZnJhbWXnmoTooajljZXnmoTmiYDmnIlmcmFtZUNvbnRleHRcclxuICAgIGNvbnN0IGN1cnJlbnRGb3JtRnJhbWVDb250ZXh0cyA9IGZyYW1lQ29udGV4dHMuZmlsdGVyKChjb250ZXh0OiBGcmFtZUNvbnRleHQpID0+IGNvbnRleHQubmFtZXNwYWNlID09PSBjdXJyZW50TmFtZXNwYWNlKSB8fCBbXTtcclxuICAgIGxldCBiaW5kaW5nUGF0aHMgPSBbXTtcclxuICAgIGlmIChjdXJyZW50Rm9ybUZyYW1lQ29udGV4dHMgJiYgY3VycmVudEZvcm1GcmFtZUNvbnRleHRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgLy8g5om+5Yiw5omA5pyJ5LiL57qnZnJhbWVDb250ZXh0XHJcbiAgICAgIGNvbnN0IGNoaWxkRnJhbWVDb250ZXh0cyA9IGN1cnJlbnRGb3JtRnJhbWVDb250ZXh0cy5maWx0ZXIoKGNvbnRleHQ6IEZyYW1lQ29udGV4dCkgPT4gY29udGV4dC52aWV3TW9kZWwuYmluZGluZ1BhdGggJiYgY29udGV4dC52aWV3TW9kZWwuYmluZGluZ1BhdGggIT09ICcvJyk7XHJcbiAgICAgIGlmIChjaGlsZEZyYW1lQ29udGV4dHMgJiYgY2hpbGRGcmFtZUNvbnRleHRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBjb25zdCBjaGlsZEJpbmRpbmdQYXRocyA9IGNoaWxkRnJhbWVDb250ZXh0cy5tYXAoKGNvbnRleHQ6IEZyYW1lQ29udGV4dCkgPT4gY29udGV4dC52aWV3TW9kZWwuYmluZGluZ1BhdGgpO1xyXG4gICAgICAgIGlmIChjaGlsZEJpbmRpbmdQYXRocyAmJiBjaGlsZEJpbmRpbmdQYXRocy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBiaW5kaW5nUGF0aHMgPSBjaGlsZEJpbmRpbmdQYXRocy5tYXAocGF0aCA9PiBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCkpLnNvcnQoKGEsIGIpID0+IGEubGVuZ3RoIC0gYi5sZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5sb2FkaW5nU2VydmljZS5zaG93KCk7XHJcbiAgICB0aGlzLnJlcG9zaXRvcnkuY3JlYXRlKCkucGlwZShcclxuICAgICAgc3dpdGNoTWFwKChlbnRpdHk6IEVudGl0eSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJpZCA9IGVudGl0eS5wcmltYXJ5VmFsdWU7XHJcbiAgICAgICAgaWYgKGJpbmRpbmdQYXRocyAmJiBiaW5kaW5nUGF0aHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgcmV0dXJuIGZyb20oYmluZGluZ1BhdGhzKS5waXBlKFxyXG4gICAgICAgICAgICBjb25jYXRNYXAoKGJpbmRpbmdQYXRoOiBBcnJheTxhbnk+KSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgZnBhdGggPSB0aGlzLmdldFBhdGgodGhpcy5mcmFtZUNvbnRleHQudmlld01vZGVsLCAnLycgKyBiaW5kaW5nUGF0aC5qb2luKCcvJyksIHJpZCk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeS5hcHBlbmRCeVBhdGgoZnBhdGgpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIG9mKGVudGl0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgKS5waXBlKGxhc3QoKSkuc3Vic2NyaWJlKFxyXG4gICAgICAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlKCk7XHJcbiAgICAgICAgc3ViamVjdC5uZXh0KCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIChlcnJvcjogYW55KSA9PiB7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlKCk7XHJcbiAgICAgICAgdGhpcy5mb3JtRXJyb3JTZXJ2aWNlLmV4Y2VwdGlvbih0aGlzLmxhbmd1YWdlU2VydmljZS5hZGRGYWlsZWQsIGVycm9yKTtcclxuICAgICAgfSk7XHJcbiAgICByZXR1cm4gc3ViamVjdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOe8lui+ke+8iOabtOaWsOaVsOaNruW5tuagh+iusOe8lui+keeKtuaAge+8iVxyXG4gICAqL1xyXG4gIHB1YmxpYyBlZGl0KGlkPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxFbnRpdHk+IHtcclxuICAgIGNvbnN0IHVwZGF0ZSQgPSB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgcmV0dXJuIHVwZGF0ZSQucGlwZShcclxuICAgICAgdGFwKCgpID0+IHtcclxuICAgICAgICBjb25zdCBjdXJyZW50SWQgPSB0aGlzLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkXHJcbiAgICAgICAgRWRpdFN0YXRlVXRpbC5zZXRFZGl0U3RhdGUodGhpcy5mcmFtZUNvbnRleHQsIGN1cnJlbnRJZCk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5pu05pawXHJcbiAgICogQHBhcmFtIGlkIOS4u+WunuS9k2lkXHJcbiAgICogQHBhcmFtIGVuYWJsZUNoaWxkcmVuUGFnaW5hdGlvbiDlkK/nlKjlrZDooajliIbpobVcclxuICAgKi9cclxuICBwdWJsaWMgdXBkYXRlKGlkPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxFbnRpdHk+IHtcclxuICAgIC8vIOiOt+WPlmlkXHJcbiAgICBpZCA9IHRoaXMuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQgYXMgc3RyaW5nO1xyXG4gICAgaWYgKCFpZCkge1xyXG4gICAgICByZXR1cm4gZW1wdHkoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGxvYWRpbmdUaW1lcklkID0gdGhpcy5sb2FkaW5nU2VydmljZS5zaG93TG9hZGluZ1dpdGhEZWxheSg1MDApO1xyXG4gICAgY29uc3QgdXBkYXRlJCA9IHRoaXMucmVwb3NpdG9yeS51cGRhdGVCeUlkKGlkKTtcclxuICAgIHRoaXMuZnJhbWVDb250ZXh0LmFwcENvbnRleHQucGFyYW1zLnNldChcInJldHJpZXZlaW5nXCIsIHRydWUpO1xyXG4gICAgcmV0dXJuIHVwZGF0ZSQucGlwZShcclxuICAgICAgdGFwKCgpID0+IHtcclxuICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xyXG4gICAgICB9LFxyXG4gICAgICAgIGVycm9yID0+IHtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XHJcbiAgICAgICAgICB0aGlzLmZvcm1FcnJvclNlcnZpY2UuZXhjZXB0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnVwZGF0ZUZhaWxlZCwgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcbiAgcHVibGljIHVwZGF0ZVdpdGhvdXRFbXB0eSgpIHtcclxuICAgIC8vIOiOt+WPlmlkXHJcbiAgICBjb25zdCBpZCA9IHRoaXMuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQgYXMgc3RyaW5nO1xyXG4gICAgaWYgKCFpZCkge1xyXG4gICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy51cGRhdGUoKTtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog5qCh6aqM5b2T5YmN6KGM5piv5ZCm5a2Y5ZyoXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGNoZWNrQmVmb3JlVXBkYXRlKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgY29uc3QgYmluZGluZ0xpc3QgPSB0aGlzLmZyYW1lQ29udGV4dC5iaW5kaW5nRGF0YS5saXN0O1xyXG4gICAgY29uc3QgaWQgPSBiaW5kaW5nTGlzdCAmJiBiaW5kaW5nTGlzdC5jdXJyZW50SWQ7XHJcbiAgICBpZiAoIWlkKSB7XHJcbiAgICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZS5ub0RhdGFFeGlzdCwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuICAgIHJldHVybiBvZih0cnVlKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5bey5bqf5byDXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIHVwZGF0ZVdpdGhOb3RpZnkoKSB7XHJcbiAgICAvLyDojrflj5ZpZFxyXG4gICAgY29uc3QgaWQgPSB0aGlzLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkIGFzIHN0cmluZztcclxuICAgIGlmICghaWQpIHtcclxuICAgICAgdGhpcy5mb3JtTm90aWZ5U2VydmljZS53YXJuaW5nKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLm5vRGF0YUV4aXN0LCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcclxuICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWKoOi9veWNoeeJh+aVsOaNru+8iOWIhumhteWKoOi9veWtkOihqOaVsOaNru+8iVxyXG4gICAqIEBkZXByZWNhdGVkIOaWueazleW3suW6n+W8g++8jOivt+WLv+S9v+eUqFxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb2FkUGFnZWQoZmlsdGVyPzogc3RyaW5nLCBzb3J0Pzogc3RyaW5nKSB7XHJcbiAgICAvLyDojrflj5ZpZFxyXG4gICAgY29uc3QgaWQgPSB0aGlzLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkIGFzIHN0cmluZztcclxuICAgIGlmICghaWQpIHtcclxuICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGxvYWRpbmdUaW1lcklkID0gdGhpcy5sb2FkaW5nU2VydmljZS5zaG93TG9hZGluZ1dpdGhEZWxheSg1MDApO1xyXG4gICAgLy8gdGhpcy5mcmFtZUNvbnRleHQucm9vdC5wYXJhbXMuc2V0KCd1cGRhdGVXaXRoUGFnaW5nJywgdHJ1ZSk7XHJcbiAgICBjb25zdCB1cGRhdGUkID0gb2YobnVsbCk7Ly90aGlzLnJlcG9zaXRvcnkudXBkYXRlRW50aXR5QnlJZChpZCwgdHJ1ZSk7XHJcbiAgICByZXR1cm4gdXBkYXRlJC5waXBlKFxyXG4gICAgICB0YXAoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XHJcbiAgICAgIH0sXHJcbiAgICAgICAgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcclxuICAgICAgICAgIHRoaXMuZm9ybUVycm9yU2VydmljZS5leGNlcHRpb24odGhpcy5sYW5ndWFnZVNlcnZpY2UudXBkYXRlRmFpbGVkLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICApXHJcbiAgICApO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDkv53lrZhcclxuICAgKi9cclxuICBwdWJsaWMgc2F2ZShzdWNjZXNzTXNnPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICAvLyDojrflj5blvZPliY3ooYxcclxuICAgIGNvbnN0IGlkID0gdGhpcy5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZCBhcyBzdHJpbmc7XHJcbiAgICBpZiAoIWlkKSB7XHJcbiAgICAgIHJldHVybiBvZihmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbG9hZGluZ1RpbWVySWQgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3dMb2FkaW5nV2l0aERlbGF5KDUwMCk7XHJcbiAgICBjb25zdCB1cGRhdGUkID0gdGhpcy5yZXBvc2l0b3J5LnVwZGF0ZUNoYW5nZXNCeUlkKGlkKTtcclxuICAgIGNvbnN0IHNhdmUkID0gdGhpcy5yZXBvc2l0b3J5LmFwcGx5Q2hhbmdlc0J5SWQoaWQpO1xyXG4gICAgY29uc3QgcmVzdWx0JCA9IHVwZGF0ZSQucGlwZShcclxuXHJcbiAgICAgIC8vIHVwZGF0ZSQgPT4gc2F2ZSRcclxuICAgICAgc3dpdGNoTWFwKCh1cGRhdGVSZXN1bHQ6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICBpZiAodXBkYXRlUmVzdWx0ID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgcmV0dXJuIG9mKGZhbHNlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIHNhdmUkO1xyXG4gICAgICAgIH1cclxuICAgICAgfSksXHJcblxyXG4gICAgICAvLyDpmpDol49sb2FkaW5nXHJcbiAgICAgIHRhcCgoKSA9PiB7XHJcblxyXG4gICAgICAgIC8vIOWPlua2iOaWsOWinueKtuaAgVxyXG4gICAgICAgIEVkaXRTdGF0ZVV0aWwuc2V0RWRpdFN0YXRlKHRoaXMuZnJhbWVDb250ZXh0LCBpZCk7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcclxuICAgICAgICAvLyB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLmluZm8odGhpcy5sYW5ndWFnZVNlcnZpY2Uuc2F2ZVN1Y2Nlc3MpO1xyXG4gICAgICAgIGlmIChzdWNjZXNzTXNnICYmIHN1Y2Nlc3NNc2cudHJpbSgpKSB7XHJcbiAgICAgICAgICBsZXQgc2hvd01lc3NhZ2U6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgICAgaWYgKHN1Y2Nlc3NNc2cuc3RhcnRzV2l0aCgneycpICYmIHN1Y2Nlc3NNc2cuZW5kc1dpdGgoJ30nKSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBKU09OLnBhcnNlKHN1Y2Nlc3NNc2cpO1xyXG4gICAgICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc2hvd01lc3NhZ2UgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBzaG93TWVzc2FnZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBjYXRjaCB7IH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChzaG93TWVzc2FnZSAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGhpcy5mb3JtTm90aWZ5U2VydmljZS5zdWNjZXNzKHN1Y2Nlc3NNc2csIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBGb3JtTm90aWZ5U3RyYXRlZ3lTZXJ2aWNlLnN1Y2Nlc3ModGhpcy5mb3JtTm90aWZ5U2VydmljZSwgdGhpcy5sYW5ndWFnZVNlcnZpY2Uuc2F2ZVN1Y2Nlc3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBGb3JtTm90aWZ5U3RyYXRlZ3lTZXJ2aWNlLnN1Y2Nlc3ModGhpcy5mb3JtTm90aWZ5U2VydmljZSwgdGhpcy5sYW5ndWFnZVNlcnZpY2Uuc2F2ZVN1Y2Nlc3MpO1xyXG4gICAgICB9LFxyXG4gICAgICAgIGVycm9yID0+IHtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XHJcbiAgICAgICAgICB0aGlzLmZvcm1FcnJvclNlcnZpY2UuZXhjZXB0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnNhdmVGYWlsZWQsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgIClcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdCQ7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gI3JlZ2lvbiDlj5bmtojnm7jlhbPmlrnms5VcclxuXHJcbiAgLyoqXHJcbiAgICog5Y+W5raI77yI6buY6K6k5Y+W5raI77yJXHJcbiAgICovXHJcbiAgcHVibGljIGNhbmNlbCgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY2FuY2VsV2l0aENoZWNrKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDov5jljp/lj5jmm7Tpm4ZcclxuICAgKiBAZGVzY3JpcHRpb24g5LiN5bim5Y+Y5pu05qOA5rWL5o+Q56S6XHJcbiAgICovXHJcbiAgcHVibGljIHJldmVydChvcHRpb25zPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmNhbmNlbFdpdGhvdXRDaGVjayhvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWPlua2iO+8iOWPlua2iOWJjeajgOafpeacquS/neWtmOeahOWPmOabtO+8iVxyXG4gICAqIEBzdW1tYXJ5XHJcbiAgICogMeOAgeeUqOaIt+ivr+aTjeS9nO+8muWPqumcgOimgeWBmuS4quaPkOekuuWwseWPr+S7peS6hu+8m1xyXG4gICAqIDLjgIHnlKjmiLfmnInmhI/lj5bmtojvvJrngrnlh7vlj5bmtojlsLHmmK/opoHmlL7lvIPmiYDmnInlj5jmm7TvvIzov5nml7blgJnor6Lpl67kurrlrrbmmK/lkKbopoHkv53lrZjmiJbogIXmj5DnpLrlrZjlnKjlj5jmm7TmnInngrnlpJrmraTkuIDkuL7vvIznoa7orqTkuIDmiorljbPlj6/jgIJcclxuICAgKiAz44CB55So5oi36K+v5pON5L2c77ya5rKh5pyJ5Y+Y5pu055qE5oOF5Ya15LiL55u05o6l57uZ5Y+W5raI5LqG77yM55So5oi35Lya5Lqn55Sf5oGQ5oWM77yM5Zug5Li655So5oi35pyJ5pe25YCZ5bm25LiN56Gu5a6a5piv5ZCm5pyJ5Y+Y5pu077yM5bqU6K+l5Lmf56Gu6K6k5LiA5oqK44CCXHJcbiAgICogQHRvZG9cclxuICAgKiAx44CB55Sx5LqO5Lqn5ZOB6YOo5b6I5aSa5Luj56CB6K+v55So5LqG6K+l5pa55rOV77yM5L6d6LWW5LqG5rKh5pyJ5Y+Y5pu055qE5pe25YCZ55u05o6l5Y+W5raI77yM546w5Zyo5by556qX56Gu6K6k5qGG5p2l77yM5LiN5aSq5ZCI6YCC77ybXHJcbiAgICogMuOAgeS6p+WTgemDqOmcgOimgeeUqGNhbmNlbFdpdGhvdXRDaGVja+aWueazleS7o+abv++8jOebruWJjeWFiOe7meWFvOWuueedgO+8jOW+heWIoOmZpOOAglxyXG4gICAqL1xyXG4gIHB1YmxpYyBjYW5jZWxXaXRoQ2hlY2soKSB7XHJcblxyXG4gICAgLy8gQHRvZGVsXHJcbiAgICBjb25zdCBoYXNVblNhdmVkQ2hhbmdlcyA9IEJlZlJlcG9zaXRvcnlVdGlsLmlzRXhpc3RVbnNhdmVEYXRhKHRoaXMucmVwb3NpdG9yeSk7XHJcbiAgICBpZiAoIWhhc1VuU2F2ZWRDaGFuZ2VzKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNhbmNlbENoYW5nZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDnoa7orqTmmK/lkKblj5bmtohcclxuICAgIGNvbnN0IGNvbmZpcm0kID0gdGhpcy5mb3JtTWVzc2FnZVNlcnZpY2UucXVlc3Rpb24odGhpcy5sYW5ndWFnZVNlcnZpY2VbJ2NhbmNlbFdpdGhvdXRTYXZlJ10pO1xyXG4gICAgY29uc3QgcmVzdWx0JCA9IGNvbmZpcm0kLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcCgoaWZDYW5jZWw6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICBpZiAoaWZDYW5jZWwgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICByZXR1cm4gRU1QVFk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbmNlbENoYW5nZXMoKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdCQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlj5bmtojvvIjnm7TmjqXlj5bmtojvvIzkuI3miafooYzmo4Dmn6XvvIlcclxuICAgKi9cclxuICBwdWJsaWMgY2FuY2VsV2l0aG91dENoZWNrKG9wdGlvbnM/OiBhbnkpIHtcclxuICAgIHJldHVybiB0aGlzLmNhbmNlbENoYW5nZXMob3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlj5bmtohcclxuICAgKi9cclxuICBwcml2YXRlIGNhbmNlbENoYW5nZXMob3B0aW9ucz86IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBsb2FkaW5nVGltZXJJZCA9IHRoaXMubG9hZGluZ1NlcnZpY2Uuc2hvd0xvYWRpbmdXaXRoRGVsYXkoNTAwKTtcclxuICAgIGNvbnN0IGNhbmNlbCQgPSB0aGlzLnJlcG9zaXRvcnkuY2FuY2VsQ2hhbmdlcyhvcHRpb25zKTtcclxuICAgIHJldHVybiBjYW5jZWwkLnBpcGUoXHJcbiAgICAgIHRhcChcclxuICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICBFZGl0U3RhdGVVdGlsLnNldEVkaXRTdGF0ZSh0aGlzLmZyYW1lQ29udGV4dCwgJycpO1xyXG4gICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVycm9yID0+IHtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XHJcbiAgICAgICAgICB0aGlzLmZvcm1FcnJvclNlcnZpY2UuZXhjZXB0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmNhbmNlbEZhaWxlZCwgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vICNlbmRyZWdpb25cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIOmHjeaWsOWKoOi9ve+8iOS7heS+m+WNoeeJh+WPlua2iOWQjumHjeaWsOWKoOi9veaVsOaNru+8jOWFtuS7luWcuuaZr+ivt+WLv+S9v+eUqO+8iVxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWxvYWQoKSB7XHJcbiAgICBjb25zdCBpc0FkZCA9IEVkaXRTdGF0ZVV0aWwuZ2V0QWRkU3RhdGUodGhpcy5mcmFtZUNvbnRleHQpO1xyXG4gICAgbGV0IGlkO1xyXG4gICAgaWYgKGlzQWRkID09PSB0cnVlKSB7XHJcbiAgICAgIGlkID0gRWRpdFN0YXRlVXRpbC5nZXRMYXN0TW9kaWZpZWRJZCh0aGlzLmZyYW1lQ29udGV4dCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZCA9IHRoaXMuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQgYXMgc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghaWQpIHtcclxuICAgICAgdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24ubG9hZEVudGl0aWVzKFtdKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmxvYWQoaWQpO1xyXG4gIH1cclxuICBwcml2YXRlIGdldFBhdGgodmlld01vZGVsOiBWaWV3TW9kZWwsIGJpbmRpbmdQYXRoOiBzdHJpbmcsIHJpZDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGxldCBwYXRoID0gJy8nICsgcmlkO1xyXG5cclxuICAgIGNvbnN0IHN1YlBhdGhzID0gYmluZGluZ1BhdGguc3BsaXQoJy8nKTtcclxuICAgIGlmIChzdWJQYXRocy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIC8vIGVnOmJpbmRpbmdQYXRo5b2i5aaCL2VkdXMvZ3JhZGVzLHNwbGl05ZCO5pivWycnLCAnZWR1cycsICdncmFkZXMnXVxyXG4gICAgICAvLyDlm6DmraRpbmRleOS7jjHlvIDlp4tcclxuICAgICAgZm9yIChsZXQgaW5kZXggPSAxOyBpbmRleCA8IHN1YlBhdGhzLmxlbmd0aCAtIDE7IGluZGV4KyspIHtcclxuICAgICAgICBjb25zdCBzdWJQYXRoID0gc3ViUGF0aHNbaW5kZXhdO1xyXG4gICAgICAgIGNvbnN0IHN1YkRhdGEgPSB2aWV3TW9kZWwuYmluZGluZ0RhdGFbc3ViUGF0aF07XHJcbiAgICAgICAgaWYgKCFzdWJEYXRhIHx8ICFzdWJEYXRhLmN1cnJlbnRJZCkge1xyXG4gICAgICAgICAgdGhyb3cgRXJyb3IoYOiOt+WPluWtkOihqOWujOaVtOi3r+W+hOWHuumUme+8jOaJvuS4jeWIsCR7c3ViRGF0YX3lr7nlupTnmoTlrZDooajvvIzmiJblr7nlupTlrZDooajmsqHmnInlvZPliY3ooYzjgIJgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGF0aCArPSBgLyR7c3ViUGF0aH0vJHtzdWJEYXRhLmN1cnJlbnRJZH1gO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBwYXRoICs9ICcvJyArIHN1YlBhdGhzW3N1YlBhdGhzLmxlbmd0aCAtIDFdO1xyXG5cclxuICAgIHJldHVybiBwYXRoO1xyXG4gIH1cclxuICBwcml2YXRlIHJlc2V0Rm9ybShhY3Rpb246IHN0cmluZykge1xyXG4gICAgY29uc3QgdmFsaWRhdGlvblNlcnZpY2UgPSB0aGlzLmZyYW1lQ29udGV4dC5pbmplY3Rvci5nZXQ8VmFsaWRhdGlvblNlcnZpY2U+KFZhbGlkYXRpb25TZXJ2aWNlLCBudWxsKTtcclxuICAgIHJldHVybiB0aGlzLmZyYW1lQ29udGV4dC5yZXBvc2l0b3J5LmNhbmNlbENoYW5nZXMoKS5waXBlKFxyXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4gdGhpcy5jb21tYW5kU2VydmljZS5leGVjdXRlKGFjdGlvbikucGlwZShzd2l0Y2hNYXAoKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB2YWxpZGF0aW9uU2VydmljZSAmJiB2YWxpZGF0aW9uU2VydmljZS5yZXNldFZhbGlkYXRpb24oKSB8fCBvZihudWxsKTtcclxuICAgICAgfSkpKSk7XHJcbiAgfVxyXG4gIHByaXZhdGUgcGFyc2VQYXJhbXMob3B0aW9uczogYW55KTogeyBhY3Rpb246IHN0cmluZywgaWQ6IHN0cmluZywgc3luYzogYm9vbGVhbiB9IHwgbnVsbCB7XHJcbiAgICBpZiAob3B0aW9ucyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob3B0aW9ucykgPT09IERhdGFUeXBlLm1hcCkge1xyXG4gICAgICBsZXQgcGFyYW1zID0gb3B0aW9ucy5nZXQoV0VCX0ZPUk1fUk9VVEVfUEFSQU1TX0tFWSk7XHJcbiAgICAgIGlmIChwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBwYXJhbXMgPSBkZWNvZGVVUklDb21wb25lbnQocGFyYW1zKTtcclxuICAgICAgICBpZiAocGFyYW1zLnN0YXJ0c1dpdGgoJ3snKSAmJiBwYXJhbXMuZW5kc1dpdGgoJ30nKSkge1xyXG4gICAgICAgICAgcGFyYW1zID0gSlNPTi5wYXJzZShwYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgYWN0aW9uOiBwYXJhbXMuYWN0aW9uLFxyXG4gICAgICAgICAgaWQ6IHBhcmFtcy5pZFRvVmlldyB8fCBwYXJhbXMuaWRUb0VkaXQgfHwgcGFyYW1zLmlkLFxyXG4gICAgICAgICAgc3luYzogcGFyYW1zLnN5bmMgfHwgZmFsc2VcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgcHJpdmF0ZSBzaG93TG9hZGluZ0NvbmZpcm0obWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mb3JtTWVzc2FnZVNlcnZpY2UuY29uZmlybShtZXNzYWdlKS5waXBlKFxyXG4gICAgICBzd2l0Y2hNYXAoKHJlc3VsdDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcclxuICAgICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbmV4cG9ydCB7IENhcmREYXRhU2VydmljZSB9O1xyXG4iXX0=