/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-05 10:26:50
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2020-11-16 11:43:34
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Input, Output, EventEmitter, forwardRef, ViewChild, ElementRef, Injector, Renderer2, HostBinding, ChangeDetectorRef } from '@angular/core';
import { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';
import { BigNumber } from 'bignumber.js';
import { LocaleService } from '@farris/ui-locale';
import { CommonUtils } from '@farris/ui-common';
/**
 * @record
 */
export function NumberFormatter() { }
if (false) {
    /**
     * 前置符号
     * @type {?|undefined}
     */
    NumberFormatter.prototype.prefix;
    /**
     * 后缀
     * @type {?|undefined}
     */
    NumberFormatter.prototype.suffix;
    /**
     * 小数点
     * @type {?|undefined}
     */
    NumberFormatter.prototype.decimalSeparator;
    /**
     * 千分位符号
     * @type {?|undefined}
     */
    NumberFormatter.prototype.groupSeparator;
    /**
     * 千分位分组
     * @type {?|undefined}
     */
    NumberFormatter.prototype.groupSize;
}
export class NumberSpinnerComponent {
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} injector
     */
    constructor(el, render, injector) {
        this.el = el;
        this.render = render;
        this.injector = injector;
        this.hostClass = true;
        this.disabled = false;
        this.readonly = false;
        this.editable = true;
        // 空白提示文本
        this.placeholder = '';
        // up or down 步长
        this.step = 1;
        /**
         * 启用大数支持
         */
        this.bigNumber = false;
        // 是否显示加减按钮
        this.showButton = true;
        // 是否使用千分值
        this.useThousands = true;
        // 文本方向
        this.textAlign = 'left';
        // 自动补全小数
        this.autoDecimal = true;
        // 允许为空
        this.canNull = false;
        // 精度
        this.precision = 0;
        // 前缀
        this.prefix = '';
        // 后缀
        this.suffix = '';
        /**
         * 小数点符号
         */
        this.decimalSeparator = '.';
        /**
         * 千分位符号
         */
        this.groupSeparator = ',';
        /**
         * 使用千分位时，每组显示的字符数
         */
        this.groupSize = 3;
        this._value = '';
        /**
         * 显示0值
         */
        this.showZero = true;
        this.valueChange = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.isFocus = false;
        this.popValue = '';
        this.isActiveTip = false;
        this.formatOptions = {};
        this._realValue = null;
        this.showtipTimer = null;
        this._updateOn = 'change';
        this.localeService = null;
        this.onTouchedCallback = (/**
         * @return {?}
         */
        () => { });
        this.onChangeCallback = (/**
         * @return {?}
         */
        () => { });
        this.cdRef = this.injector.get(ChangeDetectorRef, null);
        this.localeService = this.injector.get(LocaleService, null);
        this.commonUtils = this.injector.get(CommonUtils, new CommonUtils());
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.formatOptions = this.buildFormatOptions();
        this._ngControl = this.injector.get(NgControl, null);
        if (this.localeService) {
            /** @type {?} */
            const defaultPlaceHolder = this.localeService.getValue('numberSpinner.placeholder') || '请输入数字';
            if (!this.placeholder) {
                this.placeholder = defaultPlaceHolder;
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this._ngControl && this._ngControl.control) {
            this._updateOn = this._ngControl.control.updateOn;
        }
        this.listenInputPasteEvent();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.value && !changes.value.isFirstChange()) {
            this._realValue = this.getRealValue(changes.value.currentValue);
            this.value = this.format(this._realValue);
        }
        if (changes.showZero && !changes.showZero.isFirstChange()) {
            this.value = this.format(this._realValue);
        }
        if (changes.precision && !changes.precision.isFirstChange()) {
            this.onOptionsChanged();
        }
        if (changes.useThousands && !changes.useThousands.isFirstChange()) {
            this.onOptionsChanged();
        }
        if (changes.prefix && !changes.prefix.isFirstChange()) {
            this.onOptionsChanged();
        }
        if (changes.suffix && !changes.suffix.isFirstChange()) {
            this.onOptionsChanged();
        }
    }
    /**
     * @private
     * @return {?}
     */
    onOptionsChanged() {
        this.formatOptions = this.buildFormatOptions();
        this.value = this.format(this._realValue);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() { }
    // 支持粘贴带格式的数据
    /**
     * @return {?}
     */
    listenInputPasteEvent() {
        this.input.nativeElement.addEventListener('paste', (/**
         * @param {?} event
         * @return {?}
         */
        event => {
            event.preventDefault();
            /** @type {?} */
            const clipboardData = event.clipboardData || window['clipboardData'];
            /** @type {?} */
            const pasteValue = clipboardData.getData('text');
            /** @type {?} */
            const val = this.cleanNumString(pasteValue);
            if (this.isEmpty(val)) {
                return;
            }
            /** @type {?} */
            const target = event.target;
            /** @type {?} */
            const start = ((/** @type {?} */ (target))).selectionStart;
            /** @type {?} */
            const end = ((/** @type {?} */ (target))).selectionEnd;
            if (this.isEmpty(val)) {
                target.value = '';
            }
            else {
                target.value = target.value.slice(0, start) + val + target.value.slice(end);
            }
            if (this._updateOn === 'change') {
                this._realValue = this.getRealValue(target.value);
                this.value = this._realValue;
                this._modelChanged(this._realValue);
            }
        }));
    }
    /**
     * @param {?} $event
     * @param {?=} type
     * @return {?}
     */
    onBlur($event, type = '') {
        if (this.readonly || this.disabled) {
            return;
        }
        if (this._updateOn === 'blur') {
            /** @type {?} */
            const val = this.cleanNumString($event.value);
            this._realValue = this.getRealValue(val);
        }
        this.value = this.format(this._realValue);
        this.input.nativeElement.value = this.value;
        this.isFocus = false;
        this.onModelChange(this._realValue, 'blur');
        this.blur.emit({ event: $event, formatted: this.value, value: this._realValue, instance: this });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFocus($event) {
        if (this.readonly || this.disabled) {
            this.isFocus = false;
            return;
        }
        this.value = this.isEmpty(this._realValue) ? '' : ((!this.showZero && this._realValue == '0') ? '' : this._realValue);
        this.isFocus = true;
        this.focus.emit({ event: $event, formatted: this.value, value: this._realValue, instance: this });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseEnter($event) {
        if (this.value) {
            this.popValue = this.value;
            this.isActiveTip = this.isShowPopover();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDown(e) {
        if (e.key === 'ArrowDown') {
            e.preventDefault();
            this.down(e);
            e.stopPropagation();
        }
        if (e.key === 'ArrowUp') {
            e.preventDefault();
            this.up(e);
            e.stopPropagation();
        }
    }
    /**
     * @private
     * @param {?} realVal
     * @return {?}
     */
    _modelChanged(realVal) {
        this._realValue = realVal;
        this.onChangeCallback(realVal);
        this.onTouchedCallback();
        this.valueChange.emit(realVal);
    }
    /**
     * @param {?} realVal
     * @param {?=} updateOn
     * @return {?}
     */
    onModelChange(realVal, updateOn = 'change') {
        // this._realValue = this.getRealValue(val);
        /** @type {?} */
        let _realValue = realVal;
        if (updateOn === 'change') {
            /** @type {?} */
            const num = this.cleanNumString('' + realVal);
            _realValue = this.getRealValue(num);
        }
        this.isActiveTip = false;
        this.popValue = this.format(_realValue);
        if (this._updateOn === updateOn) {
            this._modelChanged(_realValue);
        }
    }
    /**
     * @param {?} e
     * @param {?=} type
     * @return {?}
     */
    up(e, type = null) {
        this.compute('up');
        e.stopPropagation();
    }
    /**
     * @param {?} e
     * @param {?=} type
     * @return {?}
     */
    down(e, type = null) {
        this.compute('down');
        e.stopPropagation();
    }
    /**
     * @param {?=} tye
     * @return {?}
     */
    compute(tye = 'up') {
        if (this.isDisableOfBtn(tye)) {
            /** @type {?} */
            let _resultValue;
            /** @type {?} */
            const realBigNum = new BigNumber(this._realValue || 0);
            if (tye === 'up') {
                _resultValue = realBigNum.plus(Number(this.step));
            }
            else {
                _resultValue = realBigNum.minus(Number(this.step));
            }
            /** @type {?} */
            const s = _resultValue.toFixed();
            if (!this.isFocus) {
                this.value = this.format(s);
            }
            else {
                this.value = s;
            }
            this.input.nativeElement.value = this.value;
            this._modelChanged(this.getRealValue(_resultValue));
        }
    }
    /**
     * @param {?} type
     * @param {?=} value
     * @return {?}
     */
    isDisableOfBtn(type, value) {
        if (value === undefined) {
            value = this._realValue;
        }
        value = new BigNumber(value);
        if (type === 'up' && !(new BigNumber(this.max)).isNaN() && value.gte(this.max)) {
            return false;
        }
        if (type === 'down' && !(new BigNumber(this.min)).isNaN() && value.lte(this.min)) {
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    isShowPopover() {
        /** @type {?} */
        const width = this.input.nativeElement.clientWidth;
        const { paddingLeft, paddingRight } = window.getComputedStyle(this.input.nativeElement);
        /** @type {?} */
        const _width = width - (Number(paddingLeft.replace('px', '')) || 0) - (Number(paddingRight.replace('px', '')) || 0);
        /** @type {?} */
        const txtWidth = this.commonUtils.getTextWidth(this.value, window.getComputedStyle(this.input.nativeElement).font);
        if (_width && _width < txtWidth) {
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    _getPrecision() {
        return Number(this.precision || 0);
    }
    /**
     * @param {?} n
     * @return {?}
     */
    toFixed(n) {
        /** @type {?} */
        let _n = n;
        if (!BigNumber.isBigNumber(n)) {
            _n = new BigNumber(n);
        }
        if (this.precision !== null && this.precision !== undefined) {
            return n.toFixed(this._getPrecision());
        }
        return n.toFixed();
    }
    /**
     * @param {?} _n
     * @return {?}
     */
    _getRealValue(_n) {
        /** @type {?} */
        const n = this.toFixed(_n);
        return this.bigNumber ? n : Number(n);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    getRealValue(val) {
        if (this.parser) {
            if (!isNaN(Number(val))) {
                return val;
            }
            else {
                return this.parser(val);
            }
        }
        /** @type {?} */
        let _n = this.validInterval(new BigNumber(val));
        if (_n.isNaN()) {
            if (this.canNull) {
                return null;
            }
            else {
                /** @type {?} */
                const minBigNum = new BigNumber('' + this.min);
                /** @type {?} */
                const maxBigNum = new BigNumber('' + this.max);
                if (!minBigNum.isNaN()) {
                    _n = minBigNum;
                }
                else if (!maxBigNum.isNaN()) {
                    _n = maxBigNum;
                }
                else {
                    return 0;
                }
            }
            // if (this.canNull || minBigNum.isNaN()) {
            //     return null;
            // } else {
            //     _n = minBigNum;
            // }
        }
        return this._getRealValue(_n);
    }
    /**
     * @private
     * @return {?}
     */
    buildFormatOptions() {
        return {
            prefix: this.prefix,
            suffix: this.suffix,
            decimalSeparator: this.decimalSeparator,
            groupSeparator: this.useThousands ? this.groupSeparator : '',
            groupSize: this.groupSize
        };
    }
    /**
     * @param {?} val
     * @return {?}
     */
    isEmpty(val) {
        return isNaN(val) || val === null || val === undefined || val === '';
    }
    /**
     * @param {?} bn
     * @return {?}
     */
    validInterval(bn) {
        /** @type {?} */
        let _bnVal = bn;
        if (!this.isEmpty(this.max)) {
            /** @type {?} */
            const _maxBigNum = new BigNumber('' + this.max);
            if (bn.gt(_maxBigNum)) {
                _bnVal = _maxBigNum;
                /** @type {?} */
                const _realValue = this._getRealValue(_maxBigNum);
                this._modelChanged(_realValue);
            }
        }
        if (!this.isEmpty(this.min)) {
            /** @type {?} */
            const _minBigNum = new BigNumber('' + this.min);
            if (bn.lt(_minBigNum)) {
                _bnVal = _minBigNum;
                /** @type {?} */
                const _realValue = this._getRealValue(_minBigNum);
                this._modelChanged(_realValue);
            }
        }
        return _bnVal;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    format(val) {
        val = this.cleanNumString(val);
        /** @type {?} */
        const bigVal = new BigNumber(val);
        /** @type {?} */
        const _bgNum = this.validInterval(bigVal);
        if (_bgNum.valueOf() == '0' && !this.showZero) {
            return '';
        }
        if (this.canNull && bigVal.isNaN()) {
            return '';
        }
        else {
            if (_bgNum.isNaN()) {
                return '';
            }
        }
        if (this.formatter) {
            return this.formatter(_bgNum.toNumber());
        }
        else {
            if (!Object.keys(this.formatOptions).length) {
                this.formatOptions = this.buildFormatOptions();
            }
            return this._toFormat(_bgNum, this.formatOptions);
        }
    }
    /**
     * @param {?} _bgNum
     * @param {?} fmt
     * @return {?}
     */
    _toFormat(_bgNum, fmt) {
        if (this.precision !== null && this.precision !== undefined) {
            return _bgNum.toFormat(this._getPrecision(), fmt);
        }
        else {
            return _bgNum.toFormat(fmt);
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    cleanNumString(val) {
        val = (val === null || val === undefined || val === '') ? '' : String(val);
        val = val.replace(new RegExp(this.prefix, 'g'), '')
            .replace(new RegExp(this.suffix, 'g'), '').replace(/\,/g, '');
        if (this.groupSeparator && this.groupSeparator !== ',') {
            val = val.replace(new RegExp(`\\${this.groupSeparator}`, 'g'), '');
        }
        if (this.decimalSeparator && this.decimalSeparator !== '.') {
            val = val.replace(new RegExp(`\\${this.decimalSeparator}`, 'g'), '.');
        }
        return val;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    updateValue(val) {
        val = this.cleanNumString(val);
        this._realValue = this.getRealValue(val);
        this.value = this.format(this._realValue);
        this.el.nativeElement.value = this.value;
    }
    /**
     * @private
     * @return {?}
     */
    updateControlValue() {
        /** @type {?} */
        let _val = this.cleanNumString(this.value);
        if (this.parser) {
            _val = this.parser(this.value);
        }
        if (this.isEmpty(this._realValue) && this.isEmpty(_val)) {
            return;
        }
        /** @type {?} */
        const rv = new BigNumber(this._realValue);
        /** @type {?} */
        const cv = new BigNumber(_val);
        if (rv.isNaN() && cv.isNaN()) {
            return;
        }
        // if (!rv.eq(cv)) {
        // }
        if (this._ngControl) {
            /** @type {?} */
            const formgroup = this._ngControl['formDirective'];
            if (formgroup) {
                /** @type {?} */
                let ctrl = formgroup.control.get(this._ngControl.name);
                if (!ctrl && formgroup.control.controls) {
                    ctrl = formgroup.control.controls[this._ngControl.name];
                }
                if (ctrl) {
                    if (ctrl.value !== this._realValue) {
                        ctrl.setValue(this._realValue);
                    }
                }
            }
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        this._realValue = val;
        this.value = this.format(this._realValue);
        this.updateControlValue();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
NumberSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-number-spinner',
                template: `
        <div class="input-group  f-state-hover flex-row"
            [ngClass]="{'f-state-disabled': disabled,'f-state-readonly': readonly,'f-state-focus': isFocus }"
            (mouseenter)="onMouseEnter($event)"
            #popover="bs-popover"
            farrisPopover
            [popover]="popValue" [triggers]="'hover'" [popActive]="isActiveTip"
            [showAction]="'show2'"  [container]="'body'">
            <input #input
                type="text"
                number-only
                [precision]="precision"
                autocomplete="off"
                class="form-control f-utils-fill"
                [ngModel]="value"
                [placeholder]="disabled||readonly || !editable?'':placeholder"
                [readonly]="readonly || !editable"
                [disabled]="disabled"
                [style.padding-right]="'4px'"
                [style.text-align]="textAlign"
                (ngModelChange)="onModelChange($event)"
                (blur)="onBlur(input)"
                (focus)="onFocus($event)"
                (keydown)="onKeyDown($event)"
                (click)="onClick($event)"
            />
            <div class="input-group-append btn-group btn-group-number" *ngIf="!disabled && !readonly && showButton">
                <button
                    class="btn btn-secondary btn-number-flag"
                    [style.cursor]="isDisableOfBtn('up') ? 'pointer' : 'not-allowed'"
                    (click)="up($event)" [disabled]="!isDisableOfBtn('up')"
                >
                    <span class="icon k-i-arrow-chevron-up number-arrow-chevron"></span>
                </button>
                <button
                    class="btn btn-secondary btn-number-flag"
                    [style.cursor]="isDisableOfBtn('down') ? 'pointer' : 'not-allowed'"
                    (click)="down($event)" [disabled]="!isDisableOfBtn('down')"
                >
                    <span class="icon k-i-arrow-chevron-down number-arrow-chevron"></span>
                </button>
            </div>
        </div>
    `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NumberSpinnerComponent)),
                        multi: true
                    }
                ],
                styles: [".input-group .btn-group-number{height:1.50003rem;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;background-color:#fff}.input-group .btn-group-number .btn-number-flag{height:50%;display:-webkit-box;display:flex;box-shadow:none;padding:0 5px;margin-left:1px;border-left:1px solid #d9d9d9;overflow:hidden;-webkit-transition:.1s linear;transition:.1s linear}.input-group .btn-group-number .btn-number-flag .number-arrow-chevron{-webkit-box-flex:1;flex:1;line-height:1}.input-group .btn-group-number .btn-number-flag:hover{height:60%!important}.input-group .btn-group-number .btn-number-flag:nth-child(2){border-top:1px solid #d9d9d9}input::-webkit-inner-spin-button,input::-webkit-outer-spin-button{-webkit-appearance:none!important;margin:0}.number-range{position:relative}.number-range .input-container{display:-webkit-box;display:flex;padding:0}.number-range .input-container .sub-input-group{-webkit-box-flex:1;flex:1;position:relative;display:-webkit-box;display:flex;-webkit-transition:.3s ease-out;transition:.3s ease-out}.number-range .input-container .sub-input-group .sub-input{width:100%;border:none;outline:0;background-color:rgba(0,0,0,0);min-width:2px;padding:.125rem 4px .125rem .5rem}.number-range .input-container .spliter{width:15px;text-align:center}"]
            }] }
];
/** @nocollapse */
NumberSpinnerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector }
];
NumberSpinnerComponent.propDecorators = {
    hostClass: [{ type: HostBinding, args: ['class.f-cmp-number-spinner',] }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    editable: [{ type: Input }],
    formatter: [{ type: Input }],
    parser: [{ type: Input }],
    placeholder: [{ type: Input }],
    step: [{ type: Input }],
    max: [{ type: Input }],
    min: [{ type: Input }],
    bigNumber: [{ type: Input }],
    showButton: [{ type: Input }],
    useThousands: [{ type: Input }],
    textAlign: [{ type: Input }],
    autoDecimal: [{ type: Input }],
    canNull: [{ type: Input }],
    precision: [{ type: Input }],
    prefix: [{ type: Input }],
    suffix: [{ type: Input }],
    decimalSeparator: [{ type: Input }],
    groupSeparator: [{ type: Input }],
    groupSize: [{ type: Input }],
    value: [{ type: Input }],
    showZero: [{ type: Input }],
    valueChange: [{ type: Output }],
    blur: [{ type: Output }],
    focus: [{ type: Output }],
    input: [{ type: ViewChild, args: ['input',] }]
};
if (false) {
    /** @type {?} */
    NumberSpinnerComponent.prototype.hostClass;
    /** @type {?} */
    NumberSpinnerComponent.prototype.disabled;
    /** @type {?} */
    NumberSpinnerComponent.prototype.readonly;
    /** @type {?} */
    NumberSpinnerComponent.prototype.editable;
    /** @type {?} */
    NumberSpinnerComponent.prototype.formatter;
    /** @type {?} */
    NumberSpinnerComponent.prototype.parser;
    /** @type {?} */
    NumberSpinnerComponent.prototype.placeholder;
    /** @type {?} */
    NumberSpinnerComponent.prototype.step;
    /** @type {?} */
    NumberSpinnerComponent.prototype.max;
    /** @type {?} */
    NumberSpinnerComponent.prototype.min;
    /**
     * 启用大数支持
     * @type {?}
     */
    NumberSpinnerComponent.prototype.bigNumber;
    /** @type {?} */
    NumberSpinnerComponent.prototype.showButton;
    /** @type {?} */
    NumberSpinnerComponent.prototype.useThousands;
    /** @type {?} */
    NumberSpinnerComponent.prototype.textAlign;
    /** @type {?} */
    NumberSpinnerComponent.prototype.autoDecimal;
    /** @type {?} */
    NumberSpinnerComponent.prototype.canNull;
    /** @type {?} */
    NumberSpinnerComponent.prototype.precision;
    /** @type {?} */
    NumberSpinnerComponent.prototype.prefix;
    /** @type {?} */
    NumberSpinnerComponent.prototype.suffix;
    /**
     * 小数点符号
     * @type {?}
     */
    NumberSpinnerComponent.prototype.decimalSeparator;
    /**
     * 千分位符号
     * @type {?}
     */
    NumberSpinnerComponent.prototype.groupSeparator;
    /**
     * 使用千分位时，每组显示的字符数
     * @type {?}
     */
    NumberSpinnerComponent.prototype.groupSize;
    /**
     * @type {?}
     * @private
     */
    NumberSpinnerComponent.prototype._value;
    /**
     * 显示0值
     * @type {?}
     */
    NumberSpinnerComponent.prototype.showZero;
    /** @type {?} */
    NumberSpinnerComponent.prototype.valueChange;
    /** @type {?} */
    NumberSpinnerComponent.prototype.blur;
    /** @type {?} */
    NumberSpinnerComponent.prototype.focus;
    /** @type {?} */
    NumberSpinnerComponent.prototype.input;
    /** @type {?} */
    NumberSpinnerComponent.prototype.isFocus;
    /** @type {?} */
    NumberSpinnerComponent.prototype.popValue;
    /** @type {?} */
    NumberSpinnerComponent.prototype.isActiveTip;
    /** @type {?} */
    NumberSpinnerComponent.prototype.formatOptions;
    /**
     * @type {?}
     * @private
     */
    NumberSpinnerComponent.prototype._realValue;
    /** @type {?} */
    NumberSpinnerComponent.prototype.cdRef;
    /** @type {?} */
    NumberSpinnerComponent.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    NumberSpinnerComponent.prototype._ngControl;
    /**
     * @type {?}
     * @private
     */
    NumberSpinnerComponent.prototype.showtipTimer;
    /** @type {?} */
    NumberSpinnerComponent.prototype._updateOn;
    /** @type {?} */
    NumberSpinnerComponent.prototype.localeService;
    /** @type {?} */
    NumberSpinnerComponent.prototype.onTouchedCallback;
    /** @type {?} */
    NumberSpinnerComponent.prototype.onChangeCallback;
    /** @type {?} */
    NumberSpinnerComponent.prototype.el;
    /** @type {?} */
    NumberSpinnerComponent.prototype.render;
    /** @type {?} */
    NumberSpinnerComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,