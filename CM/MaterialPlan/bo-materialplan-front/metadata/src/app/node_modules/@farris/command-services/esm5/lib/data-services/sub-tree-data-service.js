import * as tslib_1 from "tslib";
import { Injectable, Optional } from '@angular/core';
import { EMPTY } from 'rxjs';
import { tap, concatMap } from 'rxjs/operators';
import { FrameContext, ViewModel } from '@farris/devkit';
import { BaseDataService } from './base-data.service';
import { FormMessageService } from '../form-message.service';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { FormErrorService } from '../error/form-error.service';
import { FormNotifyService } from '../form-notify.service';
import { LanguageService } from '../languag.service';
import { TreeRepositoryFactory } from './tree-table/repository/tree-repository-factory';
import { TreeUtilFactory } from './tree-table/util/tree-util-factory';
/**
 * 树数据服务
 */
var SubTreeDataService = /** @class */ (function (_super) {
    tslib_1.__extends(SubTreeDataService, _super);
    /**
     * 构造函数
     */
    function SubTreeDataService(frameContext, viewModel, messageService, loadingService, errorService, formNotifyService, languageService) {
        var _this = _super.call(this, frameContext) || this;
        _this.viewModel = viewModel;
        _this.messageService = messageService;
        _this.loadingService = loadingService;
        _this.errorService = errorService;
        _this.formNotifyService = formNotifyService;
        _this.languageService = languageService;
        if (!languageService) {
            _this.languageService = LanguageService.getInstance();
        }
        return _this;
    }
    Object.defineProperty(SubTreeDataService.prototype, "hierarchyInfoKey", {
        /**
         * 分级码信息
         */
        get: function () {
            return this.virtualRootFrameContext.getParam('hierarchyInfoKey');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubTreeDataService.prototype, "hierarchyInfoField", {
        get: function () {
            return this.hierarchyInfoKey.split('/').filter(function (p) { return p; }).pop();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubTreeDataService.prototype, "virtualRootFrameContext", {
        get: function () {
            return this.frameContext.getVirtualRootFrameContext();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubTreeDataService.prototype, "messagePipe", {
        get: function () {
            if (this.viewModel && this.viewModel.frameContext) {
                var appContext = this.viewModel.frameContext.getFormAppContext() || null;
                if (appContext) {
                    return appContext.messagePipe || null;
                }
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 新增子表同级
     */
    SubTreeDataService.prototype.addSubSibling = function () {
        var _this = this;
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'addSubSibling' });
        }
        var params = this.getParams();
        // 获取分级方式
        var hierarchyType = this.getHierarchyType();
        // 执行取数
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (!repository) {
            // 错误的分级码
            throw new Error(this.languageService['errorHierarchyKey']);
        }
        var result$ = repository.addSubSibling(this.repository, params.nodeCodes, params.ids);
        return result$.pipe(tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.errorService.exception(_this.languageService.addSubSiblingFailed, error);
        }));
    };
    /**
     * 新增下级
     */
    SubTreeDataService.prototype.addSubChild = function () {
        var _this = this;
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'addSubChild' });
        }
        var params = this.getParams();
        // 获取分级方式
        var hierarchyType = this.getHierarchyType();
        var currentList = this.frameContext && this.frameContext.bindingData && this.frameContext.bindingData.getList();
        if (!currentList['currentId']) {
            // 请选择父节点
            this.formNotifyService.warning(this.languageService['plsSelectParentNode'], { hideTitle: true });
            return EMPTY;
        }
        // 执行取数
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (!repository) {
            throw new Error(this.languageService['errorHierarchyKey']);
        }
        var addSubChild$ = repository.addSubChild(this.repository, params.nodeCodes, params.ids);
        var result$ = addSubChild$.pipe(tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.errorService.exception(_this.languageService.addSubChildFailed, error);
        }));
        return result$;
    };
    /**
     * 删除子表树节点
     * @param id id
     */
    SubTreeDataService.prototype.remove = function (id, successMsg) {
        var _this = this;
        // 参数检查
        if (!id) {
            this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return EMPTY;
        }
        // 获取分级方式
        var hierarchyType = this.getHierarchyType();
        // 有子节点时不允许删除
        var treeNodesData = this.frameContext.bindingData.getList().toJSON();
        var bindingList = this.frameContext.bindingData.getList();
        var treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
        if (treeNodeUtil === null) {
            return EMPTY;
        }
        if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoField, id) === true) {
            this.messageService.warning(this.languageService['deleteChildFirst']);
            return EMPTY;
        }
        // 确认删除
        var action$ = this.messageService.question(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(function (result) {
            if (!result) {
                return EMPTY;
            }
            // 获取删除后要设置的节点id
            var nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, _this.hierarchyInfoField, id);
            // 执行删除
            var loadingTimerId = _this.loadingService.show();
            var path = _this.getPath();
            var remove$ = _this.frameContext.repository.removeByPath(path, id);
            return remove$.pipe(tap(function () {
                // 设置选中节点
                treeNodeUtil.selectNodeByBindingList(bindingList, _this.hierarchyInfoField, nextNodeId);
                _this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    _this.formNotifyService.success(successMsg, { hideTitle: true });
                }
                else {
                    _this.formNotifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.errorService.exception(_this.languageService.deleteFailed, error);
            }));
        }));
    };
    SubTreeDataService.prototype.getHierarchyType = function () {
        var propInfo = this.repository.entityTypeInfo.getPropInfoByPath(this.hierarchyInfoKey.split('/'));
        var hierarchyType = propInfo.metadataInfo['hierarchyType'] || null;
        if (hierarchyType == null || hierarchyType.length < 1) {
            // '分级码配置信息错误'
            throw new Error(this.languageService['incorrectHierarchyConfig']);
        }
        return hierarchyType;
    };
    /**
     * 获取参数
     * /parentId/childCodes/childId/grandsonCodes
     * [childCodes, grandsonCodes]
     * [parntId, childId]
     */
    SubTreeDataService.prototype.getParams = function () {
        var nodeCodes = this.viewModel.bindingPath.substr(1).split('/');
        var ids = [];
        var nodeCodeArray = [];
        var rid = this.viewModel.bindingData.list.currentId; // root表数据id
        ids.push(rid);
        var subData = this.viewModel.bindingData;
        if (nodeCodes.length > 0) {
            nodeCodes.map(function (nodeCode) {
                subData = subData[nodeCode];
                if (subData && subData.currentId) {
                    ids.push(subData.currentId);
                }
                //去除nodeCode的s
                nodeCode ? nodeCodeArray.push(nodeCode.substring(0, nodeCode.length - 1)) : nodeCodeArray.push(nodeCode);
            });
        }
        return { nodeCodes: nodeCodeArray, ids: ids };
    };
    /**
     * 获取完整路径
     * fixed by justin: 根据bindingPath，如果是从从表，需要获取主表数据id和从表数据id
     */
    SubTreeDataService.prototype.getPath = function () {
        var bindingPath = this.viewModel.bindingPath;
        var rid = this.viewModel.bindingData.list.currentId; // root表数据id
        var path = '/' + rid;
        var subPaths = bindingPath.split('/').filter(function (p) { return p; });
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['edus', 'grades']
            var subData = this.viewModel.bindingData;
            for (var index = 1; index < subPaths.length - 1; index++) {
                var subPath = subPaths[index];
                subData = subData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error("\u83B7\u53D6\u5B50\u8868\u5B8C\u6574\u8DEF\u5F84\u51FA\u9519\uFF0C\u627E\u4E0D\u5230" + subData + "\u5BF9\u5E94\u7684\u5B50\u8868\uFF0C\u6216\u5BF9\u5E94\u5B50\u8868\u6CA1\u6709\u5F53\u524D\u884C\u3002");
                }
                path += "/" + subPath + "/" + subData.currentId;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    };
    SubTreeDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SubTreeDataService.ctorParameters = function () { return [
        { type: FrameContext },
        { type: ViewModel },
        { type: FormMessageService },
        { type: FormLoadingService },
        { type: FormErrorService },
        { type: FormNotifyService },
        { type: LanguageService, decorators: [{ type: Optional }] }
    ]; };
    return SubTreeDataService;
}(BaseDataService));
export { SubTreeDataService };
//# sourceMappingURL=data:application/json;base64,