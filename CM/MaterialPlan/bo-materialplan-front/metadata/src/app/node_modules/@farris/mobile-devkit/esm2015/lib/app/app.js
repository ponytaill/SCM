import { createInjector } from '../core/index';
import { AppContext } from './app_context';
import { ViewModelContext, ViewModel } from '../view-model/index';
import { APP_BASE_PROVIDERS } from './providers';
import { APP_VARIABLE_PROVIDERS } from '../variable/index';
import { VIEW_MODEL_COMMAND_PROVIDERS } from '../command/index';
import { HTTP_PROVIDERS } from '../http/index';
class App {
    /**
     * 构造函数
     */
    constructor(options) {
        options.providers = options.providers || [];
        const appProviders = [
            ...APP_BASE_PROVIDERS,
            ...APP_VARIABLE_PROVIDERS,
            ...HTTP_PROVIDERS,
            ...options.providers
        ];
        const appInjector = createInjector(appProviders);
        this.context = appInjector.get(AppContext);
    }
    /**
     * 启用ViewModel
     */
    createViewModel(options) {
        const providers = options.providers || [];
        const parent = options.parent || null;
        const mergedProviders = [
            { provide: ViewModelContext, useClass: ViewModelContext, deps: [] },
            ...VIEW_MODEL_COMMAND_PROVIDERS,
            ...providers
        ];
        const parentInjector = parent ? parent.injector : this.context.injector;
        const injector = createInjector(mergedProviders, parentInjector);
        const viewModel = injector.get(ViewModel);
        viewModel.init();
        return viewModel;
    }
}
export { App };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2FwcC9hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUE0QixjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUFvQixNQUFNLHFCQUFxQixDQUFDO0FBRXBGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNqRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRy9DLE1BQU0sR0FBRztJQUlQOztPQUVHO0lBQ0gsWUFBWSxPQUFZO1FBRXRCLE9BQU8sQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUM7UUFDNUMsTUFBTSxZQUFZLEdBQUc7WUFDbkIsR0FBRyxrQkFBa0I7WUFDckIsR0FBRyxzQkFBc0I7WUFDekIsR0FBRyxjQUFjO1lBQ2pCLEdBQUcsT0FBTyxDQUFDLFNBQVM7U0FDckIsQ0FBQztRQUNGLE1BQU0sV0FBVyxHQUFHLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVEOztPQUVHO0lBQ0gsZUFBZSxDQUFDLE9BQXlCO1FBRXZDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO1FBQzFDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDO1FBRXRDLE1BQU0sZUFBZSxHQUFxQjtZQUN4QyxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRTtZQUNuRSxHQUFHLDRCQUE0QjtZQUMvQixHQUFHLFNBQVM7U0FDYixDQUFDO1FBRUYsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUN4RSxNQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsZUFBZSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQVksU0FBUyxDQUFDLENBQUM7UUFDckQsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2pCLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FFRjtBQUVELE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YXRpY1Byb3ZpZGVyLCBJbmplY3RvciwgY3JlYXRlSW5qZWN0b3J9IGZyb20gJy4uL2NvcmUvaW5kZXgnO1xyXG5pbXBvcnQgeyBBcHBDb250ZXh0IH0gZnJvbSAnLi9hcHBfY29udGV4dCc7XHJcbmltcG9ydCB7IFZpZXdNb2RlbENvbnRleHQsIFZpZXdNb2RlbCwgVmlld01vZGVsT3B0aW9ucyB9IGZyb20gJy4uL3ZpZXctbW9kZWwvaW5kZXgnO1xyXG5cclxuaW1wb3J0IHsgQVBQX0JBU0VfUFJPVklERVJTIH0gZnJvbSAnLi9wcm92aWRlcnMnO1xyXG5pbXBvcnQgeyBBUFBfVkFSSUFCTEVfUFJPVklERVJTIH0gZnJvbSAnLi4vdmFyaWFibGUvaW5kZXgnO1xyXG5pbXBvcnQgeyBWSUVXX01PREVMX0NPTU1BTkRfUFJPVklERVJTIH0gZnJvbSAnLi4vY29tbWFuZC9pbmRleCc7XHJcbmltcG9ydCB7IEhUVFBfUFJPVklERVJTIH0gZnJvbSAnLi4vaHR0cC9pbmRleCc7XHJcblxyXG5cclxuY2xhc3MgQXBwIHtcclxuXHJcbiAgcHVibGljIGNvbnRleHQ6IEFwcENvbnRleHQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IGFueSkge1xyXG5cclxuICAgIG9wdGlvbnMucHJvdmlkZXJzID0gb3B0aW9ucy5wcm92aWRlcnMgfHwgW107XHJcbiAgICBjb25zdCBhcHBQcm92aWRlcnMgPSBbXHJcbiAgICAgIC4uLkFQUF9CQVNFX1BST1ZJREVSUyxcclxuICAgICAgLi4uQVBQX1ZBUklBQkxFX1BST1ZJREVSUyxcclxuICAgICAgLi4uSFRUUF9QUk9WSURFUlMsXHJcbiAgICAgIC4uLm9wdGlvbnMucHJvdmlkZXJzXHJcbiAgICBdO1xyXG4gICAgY29uc3QgYXBwSW5qZWN0b3IgPSBjcmVhdGVJbmplY3RvcihhcHBQcm92aWRlcnMpO1xyXG4gICAgdGhpcy5jb250ZXh0ID0gYXBwSW5qZWN0b3IuZ2V0KEFwcENvbnRleHQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5ZCv55SoVmlld01vZGVsXHJcbiAgICovXHJcbiAgY3JlYXRlVmlld01vZGVsKG9wdGlvbnM6IFZpZXdNb2RlbE9wdGlvbnMpOiBWaWV3TW9kZWwge1xyXG5cclxuICAgIGNvbnN0IHByb3ZpZGVycyA9IG9wdGlvbnMucHJvdmlkZXJzIHx8IFtdO1xyXG4gICAgY29uc3QgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQgfHwgbnVsbDtcclxuXHJcbiAgICBjb25zdCBtZXJnZWRQcm92aWRlcnM6IFN0YXRpY1Byb3ZpZGVyW10gPSBbXHJcbiAgICAgIHsgcHJvdmlkZTogVmlld01vZGVsQ29udGV4dCwgdXNlQ2xhc3M6IFZpZXdNb2RlbENvbnRleHQsIGRlcHM6IFtdIH0sXHJcbiAgICAgIC4uLlZJRVdfTU9ERUxfQ09NTUFORF9QUk9WSURFUlMsXHJcbiAgICAgIC4uLnByb3ZpZGVyc1xyXG4gICAgXTtcclxuXHJcbiAgICBjb25zdCBwYXJlbnRJbmplY3RvciA9IHBhcmVudCA/IHBhcmVudC5pbmplY3RvciA6IHRoaXMuY29udGV4dC5pbmplY3RvcjtcclxuICAgIGNvbnN0IGluamVjdG9yID0gY3JlYXRlSW5qZWN0b3IobWVyZ2VkUHJvdmlkZXJzLCBwYXJlbnRJbmplY3Rvcik7XHJcbiAgICBjb25zdCB2aWV3TW9kZWwgPSBpbmplY3Rvci5nZXQ8Vmlld01vZGVsPihWaWV3TW9kZWwpO1xyXG4gICAgdmlld01vZGVsLmluaXQoKTtcclxuICAgIHJldHVybiB2aWV3TW9kZWw7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQXBwIH07XHJcbiJdfQ==