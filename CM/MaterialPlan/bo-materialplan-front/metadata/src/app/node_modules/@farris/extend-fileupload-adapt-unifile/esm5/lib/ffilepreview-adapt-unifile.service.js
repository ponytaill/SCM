/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffilepreview-adapt-unifile.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { NotifyService } from '@farris/ui-notify';
import { FileViewerService } from '@gsp-svc/file-viewer';
import { DownloadService } from '@gsp-svc/formdoc-upload';
import { FFileUploadAdaptUnifileConfigService } from './ffileupload-adapt-unifile.config';
import * as i0 from "@angular/core";
import * as i1 from "@gsp-svc/file-viewer";
import * as i2 from "./ffileupload-adapt-unifile.config";
import * as i3 from "@gsp-svc/formdoc-upload";
var FfilepreviewAdaptUnifileService = /** @class */ (function () {
    function FfilepreviewAdaptUnifileService(fileviewSer, configSer, downloadSer) {
        this.fileviewSer = fileviewSer;
        this.configSer = configSer;
        this.downloadSer = downloadSer;
        // 暂时用于简单合并
        this.previewExtendServerConfig = null;
        this.notifySer = null;
        this.extendData = this.configSer.getConfig();
        this.notifySer = this.fileviewSer['injector'].get(NotifyService, null);
    }
    /**
     * 返回最终属性值
     * @param key
     * @param configValue
     * @param extendValue
     */
    /**
     * 返回最终属性值
     * @private
     * @param {?} key
     * @param {?} extendValue
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.getFinallyConfig = /**
     * 返回最终属性值
     * @private
     * @param {?} key
     * @param {?} extendValue
     * @return {?}
     */
    function (key, extendValue) {
        if (extendValue && extendValue.hasOwnProperty(key)) {
            return extendValue[key];
        }
        // 避免下载等其他指令再传入扩展配置
        if (this.previewExtendServerConfig && this.previewExtendServerConfig.hasOwnProperty(key)) {
            return this.previewExtendServerConfig[key];
        }
        // 来自module中forRoot的配置
        if (this.extendData.hasOwnProperty(key)) {
            return this.extendData[key];
        }
        return null;
    };
    /**
     * 预览单个文件
     * @param info
     */
    /**
     * 预览单个文件
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.previewFile = /**
     * 预览单个文件
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    function (info, extendService) {
        return this.previewFileList([info], extendService);
    };
    /**
     * 预览整个列表
     * @param infos
     */
    /**
     * 预览整个列表
     * @param {?} infos
     * @param {?} extendService
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.previewFileList = /**
     * 预览整个列表
     * @param {?} infos
     * @param {?} extendService
     * @return {?}
     */
    function (infos, extendService) {
        //metadataIdList: string[]
        /** @type {?} */
        var rootId = this.getFinallyConfig('rootId', extendService);
        /** @type {?} */
        var metadataIdList = [];
        infos.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            metadataIdList.push(item.extend['metadataId']);
        }));
        /** @type {?} */
        var options = this.getFinallyConfig('options', extendService);
        if (options) {
            return this.fileviewSer.viewerFileList(metadataIdList, rootId, options);
        }
        else {
            return this.fileviewSer.viewerFileList(metadataIdList, rootId);
        }
    };
    /**
     * 下载附件
     * @param info
     */
    /**
     * 下载附件
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.downloadFile = /**
     * 下载附件
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    function (info, extendService) {
        if (!info.id) {
            throw new Error('请设置要下载的附件');
        }
        window.open(this.getImgSrc(info, extendService));
    };
    /**
   * 下载附件
   * @param info
   */
    /**
     * 下载附件
     * @param {?} infos
     * @param {?} extendService
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.multiDownloadFiles = /**
     * 下载附件
     * @param {?} infos
     * @param {?} extendService
     * @return {?}
     */
    function (infos, extendService) {
        //metadataIdList: string[]
        if (infos.length == 1) {
            this.downloadFile(infos[0], extendService);
        }
        else {
            /** @type {?} */
            var rootId = this.getFinallyConfig('rootId', extendService);
            /** @type {?} */
            var metadataIdList_1 = [];
            infos.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                metadataIdList_1.push(item.extend['metadataId']);
            }));
            /** @type {?} */
            var url = this.downloadSer.getMultipleDownloadUrl(JSON.stringify(metadataIdList_1), rootId);
            window.open(url);
        }
    };
    /**
     * @param {?} infos
     * @param {?=} name
     * @param {?=} extendService
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.multiDownloadFilesWidthName = /**
     * @param {?} infos
     * @param {?=} name
     * @param {?=} extendService
     * @return {?}
     */
    function (infos, name, extendService) {
        if (name === void 0) { name = ""; }
        //metadataIdList: string[]
        if (infos.length == 1) {
            this.downloadFile(infos[0], extendService);
        }
        else {
            /** @type {?} */
            var rootId = this.getFinallyConfig('rootId', extendService);
            /** @type {?} */
            var metadataIdList_2 = [];
            infos.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                metadataIdList_2.push(item.extend['metadataId']);
            }));
            /** @type {?} */
            var url = this.downloadSer.getMultipleDownloadUrlWithName(JSON.stringify(metadataIdList_2), rootId, name);
            window.open(url);
        }
    };
    /**
     * 获取下载链接
    */
    /**
     * 获取下载链接
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.getImgSrc = /**
     * 获取下载链接
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    function (info, extendService) {
        if (!info.id) {
            throw new Error('请设置要下载的附件');
        }
        /** @type {?} */
        var url = '';
        /** @type {?} */
        var attachId = info.extend['metadataId'];
        /** @type {?} */
        var rootId = this.getFinallyConfig('rootId', extendService);
        // 文档服务服务单元名进行规范性调整，由document修改为dfs
        if (this.downloadSer) {
            if (rootId) {
                url = this.downloadSer.getDownloadUrl(attachId, rootId);
            }
        }
        else if (rootId) {
            console.warn('因为安全问题，附件下载提供安全校验机制，附件下载功能需要重新编译');
            url = "/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=" + attachId + "&rootid=" + rootId;
        }
        return url;
    };
    /**
     * 根据预览指令的扩展配置获取
     * @param value
     */
    /**
     * 根据预览指令的扩展配置获取
     * @param {?} value
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.setPreviwExtendServerConfig = /**
     * 根据预览指令的扩展配置获取
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.previewExtendServerConfig = value;
    };
    /**
     * @return {?}
     */
    FfilepreviewAdaptUnifileService.prototype.getPreviewExtendServerConfig = /**
     * @return {?}
     */
    function () {
        return this.previewExtendServerConfig;
    };
    FfilepreviewAdaptUnifileService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FfilepreviewAdaptUnifileService.ctorParameters = function () { return [
        { type: FileViewerService },
        { type: FFileUploadAdaptUnifileConfigService },
        { type: DownloadService, decorators: [{ type: Optional }] }
    ]; };
    /** @nocollapse */ FfilepreviewAdaptUnifileService.ngInjectableDef = i0.defineInjectable({ factory: function FfilepreviewAdaptUnifileService_Factory() { return new FfilepreviewAdaptUnifileService(i0.inject(i1.FileViewerService), i0.inject(i2.FFileUploadAdaptUnifileConfigService), i0.inject(i3.DownloadService, 8)); }, token: FfilepreviewAdaptUnifileService, providedIn: "root" });
    return FfilepreviewAdaptUnifileService;
}());
export { FfilepreviewAdaptUnifileService };
if (false) {
    /** @type {?} */
    FfilepreviewAdaptUnifileService.prototype.extendData;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.previewExtendServerConfig;
    /** @type {?} */
    FfilepreviewAdaptUnifileService.prototype.notifySer;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.fileviewSer;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.configSer;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.downloadSer;
}
//# sourceMappingURL=data:application/json;base64,