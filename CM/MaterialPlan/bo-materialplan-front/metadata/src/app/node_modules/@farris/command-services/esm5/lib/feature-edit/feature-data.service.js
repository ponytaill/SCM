import { Inject, Injectable, Injector, LOCALE_ID, Optional } from "@angular/core";
import { map } from "rxjs/operators";
import { FeatureRepository } from "./feature-repository";
import { Prop } from "./types";
var FeatureDataService = /** @class */ (function () {
    function FeatureDataService(injector, repository, localeId) {
        this.injector = injector;
        this.repository = repository;
        this.localeId = localeId;
        this.localeId = this.localeId || 'zh-CHS';
    }
    /**
     * 根据物料id获取物料特征项及特征值（公共默认值）
     * @param materialId 物料id
     */
    FeatureDataService.prototype.getFeaturesByMaterialId = function (materialId) {
        var _this = this;
        return this.repository.getFeaturesByMaterialId(materialId).pipe(map(function (response) {
            if (!response || !response.returnValue) {
                return null;
            }
            var returnValue = JSON.parse(response.returnValue);
            var result = { propset: [], props: [] };
            var propsets = returnValue.propset || null;
            var props = returnValue.props || null;
            if (propsets && Array.isArray(propsets)) {
                propsets.map(function (propset) {
                    propset.name = _this.translateName(propset);
                    return propset;
                });
                result.propset = propsets;
            }
            if (props && Array.isArray(props) && props.length > 0) {
                props.map(function (prop) {
                    // 处理多语
                    prop.name = _this.translateName(prop);
                    // 处理枚举
                    if (prop.inputtype === Prop.InputType.enum && prop.enuminfo) {
                        prop.data = JSON.parse(prop.enuminfo);
                    }
                    // 处理必填和只读
                    prop.isreadonly = prop.isreadonly === '1' ? true : false;
                    prop.isrequired = prop.isrequired === '1' ? true : false;
                    return prop;
                });
                result.props = props;
            }
            return result;
        }));
    };
    /**
     * 根据物料id及物料特征保存后的hash获取该物料已经存储的特征项值
     * @param materialId 物料Id
     * @param configID 对应该物料的特征项hash
     * @returns
     */
    FeatureDataService.prototype.getConfigedValueByFeatureId = function (materialId, configID, configType) {
        if (configType === void 0) { configType = 'Materials'; }
        return this.repository.getConfigedValueByFeatureId(materialId, configID, configType).pipe(map(function (result) {
            return JSON.parse(result);
        }));
    };
    /**
     * 保存物料特征项
     * @param materialId 物料id
     * @param charactValue 特征值
     * @param configType 配置类型
     * @returns
     */
    FeatureDataService.prototype.applyFeatures = function (materialId, charactValue, configType) {
        if (configType === void 0) { configType = 'Materials'; }
        return this.repository.applyFeatures(materialId, charactValue, configType).pipe(map(function (config) {
            return JSON.parse(config);
        }));
    };
    /**
     * 获取帮助信息
     * @param helpid 帮助id
     * @param filter 过滤条件
     * @param params 参数
     * @returns
     */
    FeatureDataService.prototype.getHelpInfo = function (helpid, filter, params) {
        var url = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata';
        var httpParams = {};
        if (params) {
            if (params.pageIndex) {
                httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);
            }
            if (params.pageSize) {
                httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);
            }
            if (params.condition) {
                httpParams['condition'] = JSON.stringify(params.condition);
            }
            if (params.searchValue) {
                httpParams['search'] = params.searchValue;
            }
        }
        var body = {
            helpID: helpid,
            queryParam: JSON.stringify(httpParams),
            filterStr: filter
        };
        var befRepository = null; //this.repository as BefRepository<any>;
        var options = {
            body: body
        };
        return befRepository.proxy.request(url, 'put', null, options).pipe(map(function (result) { return JSON.parse(result); }));
    };
    /**
     * 国际化特征项或特征集名称
     * @param object 特征集或特征项对象
     * @returns
     */
    FeatureDataService.prototype.translateName = function (object) {
        if (!object) {
            return null;
        }
        var name = null;
        switch (this.localeId) {
            case 'en':
                {
                    name = object['name_en'];
                }
                break;
            case 'zh-CHS':
                {
                    name = object['name_chs'];
                }
                break;
            case 'zh-CHT':
                {
                    name = object['name_cht'];
                }
                break;
            default: name = object['name_chs'];
        }
        return name;
    };
    FeatureDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FeatureDataService.ctorParameters = function () { return [
        { type: Injector },
        { type: FeatureRepository },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return FeatureDataService;
}());
export { FeatureDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZS1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZmVhdHVyZS1lZGl0L2ZlYXR1cmUtZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSWxGLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRS9CO0lBRUUsNEJBQ1UsUUFBa0IsRUFDbEIsVUFBNkIsRUFDRSxRQUFpQjtRQUZoRCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLGVBQVUsR0FBVixVQUFVLENBQW1CO1FBQ0UsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUV4RCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDO0lBQzVDLENBQUM7SUFDRDs7O09BR0c7SUFDSSxvREFBdUIsR0FBOUIsVUFBK0IsVUFBa0I7UUFBakQsaUJBbUNDO1FBbENDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQzdELEdBQUcsQ0FBQyxVQUFDLFFBQXNCO1lBQ3pCLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFO2dCQUN0QyxPQUFPLElBQUksQ0FBQzthQUNiO1lBQ0QsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDckQsSUFBTSxNQUFNLEdBQXNCLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDN0QsSUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUM7WUFDN0MsSUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUM7WUFDeEMsSUFBSSxRQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDdkMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFDLE9BQXNCO29CQUNsQyxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQzNDLE9BQU8sT0FBTyxDQUFDO2dCQUNqQixDQUFDLENBQUMsQ0FBQztnQkFDSCxNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQzthQUMzQjtZQUNELElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ3JELEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQyxJQUFnQjtvQkFDekIsT0FBTztvQkFDUCxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3JDLE9BQU87b0JBQ1AsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7d0JBQzNELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7cUJBQ3ZDO29CQUNELFVBQVU7b0JBQ1YsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7b0JBQ3pELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO29CQUN6RCxPQUFPLElBQUksQ0FBQztnQkFDZCxDQUFDLENBQUMsQ0FBQztnQkFDSCxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzthQUN0QjtZQUNELE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFDSSx3REFBMkIsR0FBbEMsVUFBbUMsVUFBa0IsRUFBRSxRQUFnQixFQUFFLFVBQWdDO1FBQWhDLDJCQUFBLEVBQUEsd0JBQWdDO1FBQ3ZHLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQywyQkFBMkIsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxNQUFXO1lBQ3hHLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUNJLDBDQUFhLEdBQXBCLFVBQXFCLFVBQWtCLEVBQUUsWUFBaUIsRUFBRSxVQUFnQztRQUFoQywyQkFBQSxFQUFBLHdCQUFnQztRQUMxRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLE1BQVc7WUFDOUYsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBQ0ksd0NBQVcsR0FBbEIsVUFBbUIsTUFBYyxFQUFFLE1BQWMsRUFBRSxNQUFXO1FBQzVELElBQU0sR0FBRyxHQUFHLDhEQUE4RCxDQUFDO1FBQzNFLElBQU0sVUFBVSxHQUFRLEVBQUUsQ0FBQztRQUMzQixJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDcEIsVUFBVSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNoRTtZQUNELElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRTtnQkFDbkIsVUFBVSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUM5RDtZQUNELElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDcEIsVUFBVSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQzVEO1lBQ0QsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFO2dCQUN0QixVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQzthQUMzQztTQUNGO1FBQ0QsSUFBTSxJQUFJLEdBQUc7WUFDWCxNQUFNLEVBQUUsTUFBTTtZQUNkLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztZQUN0QyxTQUFTLEVBQUUsTUFBTTtTQUNsQixDQUFDO1FBQ0YsSUFBTSxhQUFhLEdBQXVCLElBQUksQ0FBQyxDQUFBLHdDQUF3QztRQUN2RixJQUFNLE9BQU8sR0FBRztZQUNkLElBQUksTUFBQTtTQUNMLENBQUM7UUFDRixPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDaEUsR0FBRyxDQUFDLFVBQUMsTUFBVyxJQUFLLE9BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBbEIsQ0FBa0IsQ0FBQyxDQUN6QyxDQUFDO0lBQ0osQ0FBQztJQUNEOzs7O09BSUc7SUFDSywwQ0FBYSxHQUFyQixVQUFzQixNQUFrQztRQUN0RCxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixRQUFRLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDckIsS0FBSyxJQUFJO2dCQUFFO29CQUNULElBQUksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7aUJBQzFCO2dCQUFDLE1BQU07WUFDUixLQUFLLFFBQVE7Z0JBQUU7b0JBQ2IsSUFBSSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDM0I7Z0JBQUMsTUFBTTtZQUNSLEtBQUssUUFBUTtnQkFBRTtvQkFDYixJQUFJLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2lCQUMzQjtnQkFBQyxNQUFNO1lBQ1IsT0FBTyxDQUFDLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNwQztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Z0JBcElGLFVBQVU7Ozs7Z0JBUmtCLFFBQVE7Z0JBSzVCLGlCQUFpQjs2Q0FRckIsUUFBUSxZQUFJLE1BQU0sU0FBQyxTQUFTOztJQWdJakMseUJBQUM7Q0FBQSxBQXJJRCxJQXFJQztTQXBJWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdG9yLCBMT0NBTEVfSUQsIE9wdGlvbmFsIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgQmVmUmVwb3NpdG9yeSwgUmVzcG9uc2VJbmZvIH0gZnJvbSBcIkBmYXJyaXMvYmVmXCI7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCwgUmVzdGZ1bFNlcnZpY2UsIFJlcG9zaXRvcnkgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcclxuaW1wb3J0IHsgRmVhdHVyZVJlcG9zaXRvcnkgfSBmcm9tIFwiLi9mZWF0dXJlLXJlcG9zaXRvcnlcIjtcclxuaW1wb3J0IHsgUHJvcCB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGZWF0dXJlRGF0YVNlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICBwcml2YXRlIHJlcG9zaXRvcnk6IEZlYXR1cmVSZXBvc2l0b3J5LFxyXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChMT0NBTEVfSUQpIHByaXZhdGUgbG9jYWxlSWQ/OiBzdHJpbmdcclxuICApIHtcclxuICAgIHRoaXMubG9jYWxlSWQgPSB0aGlzLmxvY2FsZUlkIHx8ICd6aC1DSFMnO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmoLnmja7nianmlplpZOiOt+WPlueJqeaWmeeJueW+gemhueWPiueJueW+geWAvO+8iOWFrOWFsem7mOiupOWAvO+8iVxyXG4gICAqIEBwYXJhbSBtYXRlcmlhbElkIOeJqeaWmWlkXHJcbiAgICovXHJcbiAgcHVibGljIGdldEZlYXR1cmVzQnlNYXRlcmlhbElkKG1hdGVyaWFsSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8UHJvcC5JUmV0dXJuVmFsdWU+IHtcclxuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkuZ2V0RmVhdHVyZXNCeU1hdGVyaWFsSWQobWF0ZXJpYWxJZCkucGlwZShcclxuICAgICAgbWFwKChyZXNwb25zZTogUmVzcG9uc2VJbmZvKSA9PiB7XHJcbiAgICAgICAgaWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2UucmV0dXJuVmFsdWUpIHtcclxuICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZXR1cm5WYWx1ZSA9IEpTT04ucGFyc2UocmVzcG9uc2UucmV0dXJuVmFsdWUpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogUHJvcC5JUmV0dXJuVmFsdWUgPSB7IHByb3BzZXQ6IFtdLCBwcm9wczogW10gfTtcclxuICAgICAgICBjb25zdCBwcm9wc2V0cyA9IHJldHVyblZhbHVlLnByb3BzZXQgfHwgbnVsbDtcclxuICAgICAgICBjb25zdCBwcm9wcyA9IHJldHVyblZhbHVlLnByb3BzIHx8IG51bGw7XHJcbiAgICAgICAgaWYgKHByb3BzZXRzICYmIEFycmF5LmlzQXJyYXkocHJvcHNldHMpKSB7XHJcbiAgICAgICAgICBwcm9wc2V0cy5tYXAoKHByb3BzZXQ6IFByb3AuSVByb3BTZXQpID0+IHtcclxuICAgICAgICAgICAgcHJvcHNldC5uYW1lID0gdGhpcy50cmFuc2xhdGVOYW1lKHByb3BzZXQpO1xyXG4gICAgICAgICAgICByZXR1cm4gcHJvcHNldDtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmVzdWx0LnByb3BzZXQgPSBwcm9wc2V0cztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByb3BzICYmIEFycmF5LmlzQXJyYXkocHJvcHMpICYmIHByb3BzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIHByb3BzLm1hcCgocHJvcDogUHJvcC5JUHJvcCkgPT4ge1xyXG4gICAgICAgICAgICAvLyDlpITnkIblpJror61cclxuICAgICAgICAgICAgcHJvcC5uYW1lID0gdGhpcy50cmFuc2xhdGVOYW1lKHByb3ApO1xyXG4gICAgICAgICAgICAvLyDlpITnkIbmnprkuL5cclxuICAgICAgICAgICAgaWYgKHByb3AuaW5wdXR0eXBlID09PSBQcm9wLklucHV0VHlwZS5lbnVtICYmIHByb3AuZW51bWluZm8pIHtcclxuICAgICAgICAgICAgICBwcm9wLmRhdGEgPSBKU09OLnBhcnNlKHByb3AuZW51bWluZm8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIOWkhOeQhuW/heWhq+WSjOWPquivu1xyXG4gICAgICAgICAgICBwcm9wLmlzcmVhZG9ubHkgPSBwcm9wLmlzcmVhZG9ubHkgPT09ICcxJyA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgcHJvcC5pc3JlcXVpcmVkID0gcHJvcC5pc3JlcXVpcmVkID09PSAnMScgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9wO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICByZXN1bHQucHJvcHMgPSBwcm9wcztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOagueaNrueJqeaWmWlk5Y+K54mp5paZ54m55b6B5L+d5a2Y5ZCO55qEaGFzaOiOt+WPluivpeeJqeaWmeW3sue7j+WtmOWCqOeahOeJueW+gemhueWAvFxyXG4gICAqIEBwYXJhbSBtYXRlcmlhbElkIOeJqeaWmUlkXHJcbiAgICogQHBhcmFtIGNvbmZpZ0lEIOWvueW6lOivpeeJqeaWmeeahOeJueW+gemhuWhhc2hcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q29uZmlnZWRWYWx1ZUJ5RmVhdHVyZUlkKG1hdGVyaWFsSWQ6IHN0cmluZywgY29uZmlnSUQ6IHN0cmluZywgY29uZmlnVHlwZTogc3RyaW5nID0gJ01hdGVyaWFscycpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeS5nZXRDb25maWdlZFZhbHVlQnlGZWF0dXJlSWQobWF0ZXJpYWxJZCwgY29uZmlnSUQsIGNvbmZpZ1R5cGUpLnBpcGUobWFwKChyZXN1bHQ6IGFueSkgPT4ge1xyXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShyZXN1bHQpO1xyXG4gICAgfSkpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDkv53lrZjnianmlpnnibnlvoHpoblcclxuICAgKiBAcGFyYW0gbWF0ZXJpYWxJZCDnianmlplpZFxyXG4gICAqIEBwYXJhbSBjaGFyYWN0VmFsdWUg54m55b6B5YC8XHJcbiAgICogQHBhcmFtIGNvbmZpZ1R5cGUg6YWN572u57G75Z6LXHJcbiAgICogQHJldHVybnMgXHJcbiAgICovXHJcbiAgcHVibGljIGFwcGx5RmVhdHVyZXMobWF0ZXJpYWxJZDogc3RyaW5nLCBjaGFyYWN0VmFsdWU6IGFueSwgY29uZmlnVHlwZTogc3RyaW5nID0gJ01hdGVyaWFscycpIHtcclxuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkuYXBwbHlGZWF0dXJlcyhtYXRlcmlhbElkLCBjaGFyYWN0VmFsdWUsIGNvbmZpZ1R5cGUpLnBpcGUobWFwKChjb25maWc6IGFueSkgPT4ge1xyXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShjb25maWcpO1xyXG4gICAgfSkpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5bluK7liqnkv6Hmga9cclxuICAgKiBAcGFyYW0gaGVscGlkIOW4ruWKqWlkXHJcbiAgICogQHBhcmFtIGZpbHRlciDov4fmu6TmnaHku7ZcclxuICAgKiBAcGFyYW0gcGFyYW1zIOWPguaVsFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRIZWxwSW5mbyhoZWxwaWQ6IHN0cmluZywgZmlsdGVyOiBzdHJpbmcsIHBhcmFtczogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHVybCA9ICcvYXBpL3NjbS9zY21mbmQvdjEuMC9zY21jb21tb25jbXBzZXJ2aWNlL3NlcnZpY2UvZ2V0aGVscGRhdGEnO1xyXG4gICAgY29uc3QgaHR0cFBhcmFtczogYW55ID0ge307XHJcbiAgICBpZiAocGFyYW1zKSB7XHJcbiAgICAgIGlmIChwYXJhbXMucGFnZUluZGV4KSB7XHJcbiAgICAgICAgaHR0cFBhcmFtc1sncGFnZUluZGV4J10gPSBKU09OLnN0cmluZ2lmeShwYXJhbXMucGFnZUluZGV4IC0gMCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHBhcmFtcy5wYWdlU2l6ZSkge1xyXG4gICAgICAgIGh0dHBQYXJhbXNbJ3BhZ2VTaXplJ10gPSBKU09OLnN0cmluZ2lmeShwYXJhbXMucGFnZVNpemUgLSAwKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAocGFyYW1zLmNvbmRpdGlvbikge1xyXG4gICAgICAgIGh0dHBQYXJhbXNbJ2NvbmRpdGlvbiddID0gSlNPTi5zdHJpbmdpZnkocGFyYW1zLmNvbmRpdGlvbik7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHBhcmFtcy5zZWFyY2hWYWx1ZSkge1xyXG4gICAgICAgIGh0dHBQYXJhbXNbJ3NlYXJjaCddID0gcGFyYW1zLnNlYXJjaFZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBib2R5ID0ge1xyXG4gICAgICBoZWxwSUQ6IGhlbHBpZCxcclxuICAgICAgcXVlcnlQYXJhbTogSlNPTi5zdHJpbmdpZnkoaHR0cFBhcmFtcyksXHJcbiAgICAgIGZpbHRlclN0cjogZmlsdGVyXHJcbiAgICB9O1xyXG4gICAgY29uc3QgYmVmUmVwb3NpdG9yeTogQmVmUmVwb3NpdG9yeTxhbnk+ID0gbnVsbDsvL3RoaXMucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PGFueT47XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBib2R5XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGJlZlJlcG9zaXRvcnkucHJveHkucmVxdWVzdCh1cmwsICdwdXQnLCBudWxsLCBvcHRpb25zKS5waXBlKFxyXG4gICAgICBtYXAoKHJlc3VsdDogYW55KSA9PiBKU09OLnBhcnNlKHJlc3VsdCkpXHJcbiAgICApO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDlm73pmYXljJbnibnlvoHpobnmiJbnibnlvoHpm4blkI3np7BcclxuICAgKiBAcGFyYW0gb2JqZWN0IOeJueW+gembhuaIlueJueW+gemhueWvueixoVxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHByaXZhdGUgdHJhbnNsYXRlTmFtZShvYmplY3Q6IFByb3AuSVByb3BTZXQgfCBQcm9wLklQcm9wKTogc3RyaW5nIHtcclxuICAgIGlmICghb2JqZWN0KSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgbGV0IG5hbWUgPSBudWxsO1xyXG4gICAgc3dpdGNoICh0aGlzLmxvY2FsZUlkKSB7XHJcbiAgICAgIGNhc2UgJ2VuJzoge1xyXG4gICAgICAgIG5hbWUgPSBvYmplY3RbJ25hbWVfZW4nXTtcclxuICAgICAgfSBicmVhaztcclxuICAgICAgY2FzZSAnemgtQ0hTJzoge1xyXG4gICAgICAgIG5hbWUgPSBvYmplY3RbJ25hbWVfY2hzJ107XHJcbiAgICAgIH0gYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3poLUNIVCc6IHtcclxuICAgICAgICBuYW1lID0gb2JqZWN0WyduYW1lX2NodCddO1xyXG4gICAgICB9IGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OiBuYW1lID0gb2JqZWN0WyduYW1lX2NocyddO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5hbWU7XHJcbiAgfVxyXG59Il19