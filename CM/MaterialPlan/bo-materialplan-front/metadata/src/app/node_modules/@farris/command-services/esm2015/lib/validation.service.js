// tslint:disable: max-line-length
import { Injectable, Optional } from '@angular/core';
import { Repository, FrameContext, PARENT_CLASS, ChangeType, DataPropGroup } from '@farris/devkit';
import { tap, switchMap } from 'rxjs/operators';
import { EMPTY, Subject } from 'rxjs';
import { zip } from 'rxjs/observable/zip';
import { empty } from 'rxjs/observable/empty';
import { of } from 'rxjs/observable/of';
import { VerifyDetailService } from '@farris/ui-verify-detail';
import { FormNotifyService } from './form-notify.service';
import { LanguageService } from './languag.service';
/**
 * 表单验证服务
 * @scope FrameComponent
 */
class ValidationService {
    /**
     * 构造函数
     */
    constructor(repository, frameContext, notifyService, languageService) {
        this.repository = repository;
        this.frameContext = frameContext;
        this.notifyService = notifyService;
        this.languageService = languageService;
        this.validationResults = new Subject();
        this.validationAllResult = new Subject();
        if (!this.languageService) {
            this.languageService = new LanguageService();
        }
    }
    /**
     * 验证表单内的所有表单
     */
    validate() {
        this.repository.getList().subscribe((result) => {
            for (const entity of result) {
                entity.validate().subscribe((result) => {
                    if (!result.isValid) {
                        alert(result.message);
                        this.validationResults.next(result);
                    }
                });
            }
        });
        return this.validationResults;
    }
    /**
     * 校验当前行
     */
    validateCurrentRow() {
        const entityTypeInfo = this.repository.entityTypeInfo;
        // 组合表单只校验当前按钮所在的表单
        const primaryValue = this.frameContext.bindingData.list.currentId;
        if (!primaryValue) {
            return of(true);
        }
        // 首先校验实体不能为空规则
        const entity = this.repository.entityCollection.getEntityById(primaryValue);
        if (!entity) {
            return of(true);
        }
        const isEntityValid = this.validateEntityAllowEmptyRule(entityTypeInfo);
        if (!isEntityValid) {
            return EMPTY;
        }
        const entities = [entity];
        const namespace = this.frameContext.namespace;
        let frameContexts = [];
        // 修复使用相同be创建的vo的组合表单校验时多个表单校验规则被合并的问题
        // TODO: 目前未考虑组合表单统一保存的场景，后续支持组合表单统一保存时再修改
        if (namespace !== null) {
            // 存在命名空间，说明表单较新，可以依赖该特性
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);
        }
        else {
            // 表单较老，获取所有的上下文，在校验阶段过滤规则
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        }
        const isModal = this.isInDialog();
        const hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();
        let rootViewModel = this.frameContext.root.viewModel;
        if (isModal && hasOwnVerifyDetailService) {
            rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
        }
        let toValidate = false;
        const formErrors = [];
        frameContexts.forEach((frameContext) => {
            if (frameContext.form && frameContext.form.enableValidate) {
                toValidate = true;
            }
        });
        if (!toValidate || entities.length < 1) {
            return of(true);
        }
        rootViewModel.verifyInformations = [];
        let formValid = true;
        let entityValid = true;
        const formValidationRules = new Map();
        frameContexts.forEach((formContext) => {
            const bindingObject = formContext.bindingData.getObject();
            // 通知所有bindingData,
            bindingObject && bindingObject.setShowValidationMsg(true);
            if (formContext.form && formContext.form.enableValidate) {
                // 获取当前表单上的所有验证规则
                const currentFormValidationRules = formContext.form.getValidationRules();
                currentFormValidationRules.forEach((rules, path) => {
                    if (formValidationRules.has(path)) {
                        rules.forEach(rule => formValidationRules.get(path).push(rule));
                    }
                    else {
                        formValidationRules.set(path, [...rules]);
                    }
                });
                formContext.form.setShowValidationMsg(true);
                // 逐个调用表单的验证，验证前端表单规则
                if (!formContext.form.isFormValid()) {
                    formErrors.push(formContext.form);
                    formValid = false;
                }
            }
        });
        // 验证所有实体
        const observableList = entities.map((entity) => {
            const index = this.frameContext.bindingData.list.getIndexById(entity.primaryValue);
            return entity.validate(undefined, undefined, formValidationRules, null, this.frameContext);
        });
        const result$ = zip(...observableList).pipe(tap((resultList) => {
            frameContexts.forEach((formContext) => {
                if (!formContext.form.enableValidate) {
                    return;
                }
                const handleErrors = (errors) => {
                    errors.forEach((validationError) => {
                        if (validationError.children && validationError.children.length) {
                            handleErrors(validationError.children);
                        }
                        const errMsgObj = {};
                        let id = '';
                        const findId = (target) => {
                            if (target && target.data && target.data.id) {
                                id = target.data.id;
                                return;
                            }
                            else if (target[PARENT_CLASS]) {
                                findId(target[PARENT_CLASS]);
                            }
                        };
                        findId(validationError.target);
                        // 实体验证出错，需要将错误展示到界面上
                        // 实体不一定是当前行
                        let parentPathData = {
                            path: [],
                            isUdt: false,
                            isGrid: false
                        };
                        if (validationError.target) {
                            parentPathData = validationError.target.getPaths();
                        }
                        const bindingPath = '/' + parentPathData.path.join('/');
                        if (validationError.constraints) {
                            Object.keys(validationError.constraints).forEach(key => {
                                errMsgObj[key] = {
                                    name: validationError.constraints[key]
                                };
                                // if (this.frameContext.viewModel.bindingPath === bindingPath) {
                                //   rootViewModel['verifyInformations'].push({
                                //     id: id,
                                //     title: key,
                                //     msg: validationError.constraints[key],
                                //     type: 'warn'
                                //   })
                                // }
                            });
                        }
                        const paths = parentPathData.path.concat(validationError.property);
                        //if (this.frameContext.viewModel.bindingPath === bindingPath) {
                        // 将错误信息更新到formControl上
                        formContext.bindingData.changes.next({
                            type: ChangeType.UpdateErrors,
                            id,
                            path: paths,
                            isUdt: parentPathData.isUdt,
                            isGrid: parentPathData.isGrid,
                            value: validationError.value,
                            errors: errMsgObj
                        });
                        //}
                    });
                };
                // 展开验证结果
                const isValidList = resultList.map((result) => result.isValid);
                // 保存前先调用实体上的验证规则，全部通过之后才保存
                // 实体验证通过
                if (isValidList.filter(x => x).length === observableList.length) {
                    // 将错误信息更新到formControl上
                    formContext.bindingData.changes.next({
                        type: ChangeType.UpdateErrors,
                        path: []
                    });
                    // 验证成功后隐藏输入时的验证
                    if (formValid) {
                        const bindingObject = formContext.bindingData.getObject();
                        bindingObject && bindingObject.setShowValidationMsg(false);
                        const form = formContext.form;
                        if (form) {
                            form.setShowValidationMsg(false);
                        }
                    }
                }
                else {
                    // 实体验证有错误
                    entityValid = false;
                    resultList.forEach((result) => {
                        if (result.isValid) {
                            // 清除验证通过的错误
                            formContext.bindingData.changes.next({
                                type: ChangeType.UpdateErrors,
                                path: []
                            });
                        }
                        else {
                            handleErrors(result.errors);
                        }
                    });
                }
            });
        }), switchMap((resultList) => {
            let isValidated = true;
            const errors = [];
            resultList.forEach((result) => {
                if (!result.isValid) {
                    isValidated = false;
                }
                errors.push(...result.errors);
            });
            if (errors.length > 0) {
                this.collectValidationErrors(rootViewModel, errors, this.frameContext.namespace);
            }
            // rootViewModel.verifycationChanged.next(rootViewModel.verifyInformations);
            let verifyInformations = rootViewModel.verifyInformations;
            if (isModal && hasOwnVerifyDetailService) {
                verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace === namespace);
            }
            rootViewModel.verifycationChanged.next(verifyInformations);
            if (isValidated && !formValid) {
                // 实体校验通过但表单校验不通过，此时实体和表单存在校验规则不一致的情况
                console.warn('实体和控件校验规则不一致，会导致命令执行中断！');
            }
            if (isValidated && formValid) {
                return of(true);
            }
            else {
                return empty();
            }
        }));
        return result$;
    }
    /**
     * 调用表单和实体上的验证规则, 通过后调用回调cb
     */
    validateAll() {
        const entityTypeInfo = this.repository.entityTypeInfo;
        // 组合表单只校验当前按钮所在的表单
        const entities = this.repository.entityCollection.getAllEntities();
        const namespace = this.frameContext.namespace;
        let frameContexts = [];
        if (namespace !== null) {
            // 存在命名空间，说明表单较新，可以依赖该特性
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);
        }
        else {
            // 表单较老，获取所有的上下文，在校验阶段过滤规则
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        }
        const isEntityValid = this.validateEntityAllowEmptyRule(entityTypeInfo);
        if (!isEntityValid) {
            return EMPTY;
        }
        let toValidate = false;
        const formErrors = [];
        frameContexts.forEach((frameContext) => {
            if (frameContext.form && frameContext.form.enableValidate) {
                toValidate = true;
            }
        });
        if (!toValidate || entities.length < 1) {
            return of(true);
        }
        const isModal = this.isInDialog();
        const hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();
        let rootViewModel = this.frameContext.root.viewModel;
        if (isModal && hasOwnVerifyDetailService) {
            rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
        }
        let formValid = true;
        let entityValid = true;
        const formValidationRules = new Map();
        frameContexts.forEach((formContext) => {
            const bindingObject = formContext.bindingData.getObject();
            // 通知所有bindingData,
            bindingObject && bindingObject.setShowValidationMsg(true);
            if (formContext.form && formContext.form.enableValidate) {
                // 获取当前表单上的所有验证规则
                const currentFormValidationRules = formContext.form.getValidationRules();
                currentFormValidationRules.forEach((rules, path) => {
                    if (formValidationRules.has(path)) {
                        rules.forEach(rule => formValidationRules.get(path).push(rule));
                    }
                    else {
                        formValidationRules.set(path, [...rules]);
                    }
                });
                formContext.form.setShowValidationMsg(true);
                // 逐个调用表单的验证，验证前端表单规则
                if (!formContext.form.isFormValid()) {
                    formErrors.push(formContext.form);
                    formValid = false;
                }
            }
        });
        // 触发所有实体的validate事件
        const isMultiEntityValiate = entities.length > 0;
        // 验证所有实体
        const observableList = entities.map((entity, index) => entity.validate(undefined, undefined, formValidationRules, isMultiEntityValiate ? index : null, this.frameContext));
        const result$ = zip(...observableList).pipe(tap((resultList) => {
            frameContexts.forEach((formContext) => {
                if (!formContext.form.enableValidate) {
                    return;
                }
                const handleErrors = (errors) => {
                    errors.forEach((validationError) => {
                        if (validationError.children && validationError.children.length) {
                            handleErrors(validationError.children);
                        }
                        const errMsgObj = {};
                        let id = '';
                        const findId = (target) => {
                            if (target && target.data && target.data.id) {
                                id = target.data.id;
                                return;
                            }
                            else if (target[PARENT_CLASS]) {
                                findId(target[PARENT_CLASS]);
                            }
                        };
                        findId(validationError.target);
                        // 实体验证出错，需要将错误展示到界面上
                        // 实体不一定是当前行
                        let parentPathData = {
                            path: [],
                            isUdt: false,
                            isGrid: false
                        };
                        if (validationError.target) {
                            parentPathData = validationError.target.getPaths();
                        }
                        const bindingPath = '/' + parentPathData.path.join('/');
                        if (validationError.constraints) {
                            Object.keys(validationError.constraints).forEach(key => {
                                errMsgObj[key] = {
                                    name: validationError.constraints[key]
                                };
                                // if (this.frameContext.viewModel.bindingPath === bindingPath) {
                                //   rootViewModel['verifyInformations'].push({
                                //     id: id,
                                //     title: key,
                                //     msg: validationError.constraints[key],
                                //     type: 'warn'
                                //   })
                                // }
                            });
                        }
                        const paths = parentPathData.path.concat(validationError.property);
                        //if (this.frameContext.viewModel.bindingPath === bindingPath) {
                        // 将错误信息更新到formControl上
                        formContext.bindingData.changes.next({
                            type: ChangeType.UpdateErrors,
                            id,
                            path: paths,
                            isUdt: parentPathData.isUdt,
                            isGrid: parentPathData.isGrid,
                            value: validationError.value,
                            errors: errMsgObj
                        });
                        //}
                    });
                };
                // 展开验证结果
                const isValidList = resultList.map((result) => result.isValid);
                // 保存前先调用实体上的验证规则，全部通过之后才保存
                // 实体验证通过
                if (isValidList.filter(x => x).length === observableList.length) {
                    // 将错误信息更新到formControl上
                    formContext.bindingData.changes.next({
                        type: ChangeType.UpdateErrors,
                        path: []
                    });
                    // 验证成功后隐藏输入时的验证
                    if (formValid) {
                        const bindingObject = formContext.bindingData.getObject();
                        bindingObject && bindingObject.setShowValidationMsg(false);
                        const form = formContext.form;
                        if (form) {
                            form.setShowValidationMsg(false);
                        }
                    }
                }
                else {
                    // 实体验证有错误
                    entityValid = false;
                    resultList.forEach((result) => {
                        if (result.isValid) {
                            // 清除验证通过的错误
                            formContext.bindingData.changes.next({
                                type: ChangeType.UpdateErrors,
                                path: []
                            });
                        }
                        else {
                            handleErrors(result.errors);
                        }
                    });
                }
            });
        }), switchMap((resultList) => {
            let isValidated = true;
            const errors = [];
            resultList.forEach((result) => {
                if (!result.isValid) {
                    isValidated = false;
                }
                errors.push(...result.errors);
            });
            if (errors.length > 0) {
                this.collectValidationErrors(rootViewModel, errors, this.frameContext.namespace);
            }
            let verifyInformations = rootViewModel.verifyInformations;
            if (isModal && hasOwnVerifyDetailService) {
                verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace === namespace);
            }
            // 因为校验累加的缘故，导致之前的校验信息一直存在，只能通过校验结果来确定是否还有错误信息
            if (isValidated && formValid) {
                verifyInformations = rootViewModel.verifyInformations = [];
            }
            rootViewModel.verifycationChanged.next(verifyInformations);
            if (isValidated && formValid) {
                return of(true);
            }
            else {
                return empty();
            }
        }));
        return result$;
    }
    /**
     * 校验实体是否满足不能为空的规则
     * @param entity 主实体
     */
    validateEntityAllowEmptyRule(entityTypeInfo) {
        // 确认实体各个层级中是否存在不能为空的规则
        const paths = this.getNotAllowEmptyBindingPaths(entityTypeInfo);
        if (!paths || paths.length < 1) {
            return true;
        }
        // 找到所有不合法的bindingPaths
        const invalidPaths = paths.filter((path) => {
            const bindingPaths = path.split('/').filter(p => p);
            const bindingList = this.frameContext.bindingData.getValue(bindingPaths);
            if (!bindingList || bindingList.length < 1) {
                return true;
            }
            return false;
        });
        // 有实体必填，但实体数据为空
        if (invalidPaths.length > 0) {
            const tableNames = [];
            invalidPaths.forEach((path) => {
                //const frameContexts = this.getFrameContextByBindingPath(path.split('/'));
                //const frameComponents = frameContexts.map(frameContext => frameContext.frameComponent);
                // 找到所有容器类组件
                //const containerComponents = frameComponents.filter(frameComponent => [ComponentType.farrisDataGridComponent, ComponentType.farrisTreeTalbeComponent, ComponentType.kendoGridComponent, ComponentType.primengTreeComponent].includes(frameComponent.componentType));
                //if (!(!containerComponents || containerComponents.length < 1)) {
                const viewModelName = this.getViewModelNameByBindingPaths(path.split('/')) || `绑定路径${path}`;
                tableNames.push(viewModelName);
                //}
            });
            if (this.notifyService) {
                this.notifyService.error(`${tableNames.join('，')} ${this.languageService.tableCanNotEmpty}`, { hideTitle: true });
            }
            return false;
        }
        return true;
    }
    /**
     *
     * @param bindingPaths path不能为空或/，不支持主表
     */
    getViewModelNameByBindingPaths(bindingPaths) {
        const namespace = this.frameContext.namespace;
        let frameContexts = null;
        if (namespace !== null) {
            // 存在命名空间，说明表单较新，可以依赖该特性
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);
        }
        else {
            // 表单较老，获取所有的上下文，在校验阶段过滤规则
            frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();
        }
        const bindingPath = bindingPaths.filter(p => p).join('/');
        const frameContext = frameContexts.find((frameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPath);
        const viewModelName = frameContext && frameContext.form && frameContext.form.formGroupName || '';
        return viewModelName;
    }
    /**
     * 遍历获取所有不能为空的实体的绑定路径
     * @param entityTypeInfo
     * @param results
     * @returns
     */
    getNotAllowEmptyBindingPaths(entityTypeInfo, results = []) {
        if (!entityTypeInfo) {
            return;
        }
        this.deepFirstTraversalEntityTypeInfo(entityTypeInfo, results);
        return results;
    }
    deepFirstTraversalEntityTypeInfo(entityTypeInfo, result = [], previousValue = []) {
        // 确认当前实体是否必填
        const isAllowEmpty = this.isAllowEmpty(entityTypeInfo.entityInfo.allowEmpty, previousValue);
        if (isAllowEmpty === false) {
            if (previousValue.length < 1) {
                result.push('');
            }
            else {
                result.push(previousValue.join('/'));
            }
        }
        // 获取所有子表
        const list = entityTypeInfo.getPropInfosByGroup(DataPropGroup.List);
        if (list && list.length > 0) {
            list.forEach((propInfo) => {
                const typeInfo = propInfo.typeInfo;
                if (typeInfo && typeInfo.entityInfo) {
                    previousValue.push(typeInfo.entityInfo.nodeCode);
                    this.deepFirstTraversalEntityTypeInfo(typeInfo, result, previousValue);
                }
            });
        }
        // 没有下级了，此时应该清空游标，将收集到的路径放到结果集中
        if (previousValue && previousValue.length > 0) {
            previousValue.pop();
        }
    }
    isAllowEmpty(value, paths) {
        if (value === undefined || value === true || value === '') {
            return true;
        }
        // 开发者定义了不能为空的规则
        const frameContexts = this.getFrameContextByBindingPath(paths);
        let caller = this.frameContext.frameComponent;
        if (!frameContexts || frameContexts.length < 1) {
            // 定义了规则但对应的Frame没有渲染
            console.warn(`绑定路径 ${paths.join('/')} 定义了不能为空的规则，但找不到该绑定路径对应的组件。请确保组件显隐与必填一致。`);
        }
        else {
            caller = frameContexts.pop().frameComponent;
        }
        if (typeof value === 'boolean') {
            return value;
        }
        else if (typeof value === 'string') {
            value = value.trim().startsWith('return') ? value : `return ${value}`;
            const factory = new Function(`
        var viewModel = this.viewModel;
        var bindingData = this.bindingData;
        var context = this.context;
        ${value}
      `);
            return factory.apply(caller);
        }
        else {
            console.warn(`无效的必填规则。`);
        }
    }
    collectValidationErrors(rootViewModel, errors, namespace, filter = true) {
        if (filter) {
            rootViewModel.verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace !== namespace);
        }
        errors.forEach((validationError) => {
            if (validationError.children && validationError.children.length) {
                this.collectValidationErrors(rootViewModel, validationError.children, namespace, false);
            }
            let id = '';
            const findId = (target) => {
                if (target && target.data && target.data.id) {
                    id = target.data.id;
                    return;
                }
                else if (target[PARENT_CLASS]) {
                    findId(target[PARENT_CLASS]);
                }
            };
            findId(validationError.target);
            if (validationError.constraints) {
                const validationResultTypes = Object.keys(validationError.constraints);
                if (validationResultTypes.length) {
                    const offset = rootViewModel.verifyInformations.filter(item => item.namespace === namespace).length;
                    let index = rootViewModel.verifyInformations.findIndex(item => item.namespace === namespace);
                    index = index === -1 ? 0 : index + offset;
                    rootViewModel.verifyInformations.splice(index, 0, {
                        id: id,
                        namespace,
                        targetField: validationError.field,
                        index: validationError.index,
                        title: validationError.propertyName,
                        msg: validationError.constraints[validationResultTypes[0]],
                        frameContext: validationError.frameContext,
                        fullPath: validationError.fullPath,
                        type: validationResultTypes[0] === 'required' ? 'empty' : 'error'
                    });
                }
            }
        });
    }
    /**
     * 重置校验信息（仅当前表单）
     */
    resetValidation() {
        const isDialog = this.isInDialog();
        let rootViewModel = this.frameContext.root.viewModel;
        if (isDialog) {
            rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;
        }
        let verifyInformations = rootViewModel.verifyInformations;
        if (verifyInformations.length) {
            const namespace = this.frameContext.namespace;
            if (namespace !== null) {
                verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace !== namespace);
            }
            rootViewModel.verifyInformations = verifyInformations;
            //rootViewModel.verifyInformations.splice(0, rootViewModel.verifyInformations.length);
        }
        if (rootViewModel && rootViewModel.verifycationChanged) {
            rootViewModel.verifycationChanged.next(verifyInformations);
        }
        return of(null);
    }
    /**
     * 是否在弹窗内部
     */
    isInDialog() {
        return this.frameContext && this.frameContext.getVirtualRootFrameContext() && this.frameContext.getVirtualRootFrameContext().frameComponent && this.frameContext.getVirtualRootFrameContext().frameComponent['isDialogRootComponent'] || false;
    }
    /**
     * 拥有独自的校验提示服务
     */
    hasOwnVerifyDetailService() {
        return this.frameContext.injector.get(VerifyDetailService, null) !== this.frameContext.root.appContext.injector.get(VerifyDetailService, null);
        ;
    }
    /**
     * 通过bindingPath获取所有匹配的frameContext
     * @param bindingPath
     * @returns
     */
    getFrameContextByBindingPath(bindingPaths) {
        const bindingPath = bindingPaths.filter(p => p).join('/');
        return this.frameContext.appContext.frameContextManager.getFrameContexts().filter(frameContext => frameContext.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPath);
    }
    filterDataGridComponent() { }
}
ValidationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ValidationService.ctorParameters = () => [
    { type: Repository },
    { type: FrameContext },
    { type: FormNotifyService, decorators: [{ type: Optional }] },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
export { ValidationService };
//# sourceMappingURL=data:application/json;base64,