/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, NgZone, Injector, Renderer2, ElementRef, Input } from '@angular/core';
import { dropHandlers, smoothDnD as SmoothDnDForHeader, constants } from '@farris/smooth-dnd';
import { DatagridComponent } from '../../datagrid.component';
import { DatagridHeaderComponent } from './datagrid-header.component';
import { DragDropColumnService } from './drag-drop-column.service';
var wrapperClass = constants.wrapperClass, animationClass = constants.animationClass;
SmoothDnDForHeader.dropHandler = dropHandlers.reactDropHandler().handler;
SmoothDnDForHeader.wrapChild = false;
/**
 * @record
 */
export function DragStartEndInfo() { }
if (false) {
    /** @type {?} */
    DragStartEndInfo.prototype.isSource;
    /** @type {?} */
    DragStartEndInfo.prototype.payload;
    /** @type {?} */
    DragStartEndInfo.prototype.willAcceptDrop;
}
var DragColumnDirective = /** @class */ (function () {
    function DragColumnDirective(ngzone, injector, render, el, header, dg, dndSer) {
        var _this = this;
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.header = header;
        this.dg = dg;
        this.dndSer = dndSer;
        this.enableDrag = true;
        this.groupName = '';
        this.options = {
            groupName: this.groupName,
            orientation: 'horizontal',
            behaviour: 'move',
            dragHandleSelector: '.drag-column-bar',
            dragClass: 'drag-column-moving',
            dropPlaceholder: {
                className: 'drop-group-field',
            },
            getGhostParent: (/**
             * @return {?}
             */
            function () {
                return document.body;
            }),
            getChildPayload: this.getChildPayload.bind(this),
            shouldAcceptDrop: (/**
             * @param {?} sourceContainerOptions
             * @param {?} payload
             * @return {?}
             */
            function (sourceContainerOptions, payload) {
                if (typeof payload === 'number') {
                    return false;
                }
                if (sourceContainerOptions.groupName !== _this.groupName) {
                    return false;
                }
                return !_this.dg.isMultiHeader();
            }),
            onDropReady: (/**
             * @param {?} dropResult
             * @return {?}
             */
            function (dropResult) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDropReady(dropResult);
                }));
            }),
            onDrop: (/**
             * @param {?} dropResult
             * @return {?}
             */
            function (dropResult) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDrop(dropResult);
                }));
            }),
            onDragEnter: (/**
             * @return {?}
             */
            function () {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragEnter();
                }));
            }),
            onDragStart: (/**
             * @param {?} info
             * @return {?}
             */
            function (info) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragStart(info);
                }));
            }),
            onDragEnd: (/**
             * @param {?} info
             * @return {?}
             */
            function (info) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragEnd(info);
                }));
            })
        };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DragColumnDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.enableDrag && !changes.enableDrag.isFirstChange()) {
            if (this.enableDrag) {
                this.initDnD();
            }
            else {
                this.disposeDnd();
            }
        }
    };
    /**
     * @return {?}
     */
    DragColumnDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initDnD();
    };
    /**
     * @return {?}
     */
    DragColumnDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.disposeDnd();
    };
    /**
     * @private
     * @return {?}
     */
    DragColumnDirective.prototype.disposeDnd = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.container) {
            this.container.dispose();
            this.container = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    DragColumnDirective.prototype.initDnD = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.dg.editable) {
            return;
        }
        if (this.groupName === 'left' || this.groupName === 'right') {
            var _a = this.columnsGroup(), left = _a.left, right = _a.right;
            if (this.groupName === 'left' && !left.length) {
                return;
            }
            if (this.groupName === 'right' && (!right.length || (right.length === 1 && right[0].field === '_datagrid-setting-control_'))) {
                return;
            }
        }
        this.options.groupName = this.groupName;
        this.disposeDnd();
        if (this.enableDrag) {
            this.container = SmoothDnDForHeader(this.el.nativeElement, this.options);
            this.dndSer.backupColumns(this.header.columns);
        }
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    DragColumnDirective.prototype.getChildPayload = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        if (this.groupName === 'left') {
            if (this.dg.showCheckbox) {
                index--;
            }
            if (this.dg.showLineNumber) {
                index--;
            }
        }
        /** @type {?} */
        var groupColumns = this.columnsGroup();
        if (this.groupName === 'left') {
            return groupColumns.left.filter((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            function (n, i) { return _this.dg.columnIsVisible(n); }))[index];
        }
        return groupColumns.middle.filter((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        function (n, i) { return _this.dg.columnIsVisible(n); }))[index];
    };
    /**
     * @param {?} dropResult
     * @return {?}
     */
    DragColumnDirective.prototype.onDropReady = /**
     * @param {?} dropResult
     * @return {?}
     */
    function (dropResult) {
    };
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    DragColumnDirective.prototype.onDrop = /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    function (dropResult) {
        var _this = this;
        var addedIndex = dropResult.addedIndex, payload = dropResult.payload, removedIndex = dropResult.removedIndex;
        if (addedIndex === null) {
            return;
        }
        /** @type {?} */
        var groupColumns = this.columnsGroup();
        /** @type {?} */
        var cols = this.dg.columns[0];
        /** @type {?} */
        var currIndex = cols.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field === payload.field; }));
        /** @type {?} */
        var newIndex = addedIndex;
        /** @type {?} */
        var moveColumn = (/**
         * @param {?} columns
         * @return {?}
         */
        function (columns) {
            if (columns) {
                /** @type {?} */
                var targetColumn_1 = columns.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.visible || n.visible === undefined; }))[newIndex];
                if (targetColumn_1) {
                    /** @type {?} */
                    var realTagetIndex = cols.findIndex((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === targetColumn_1.field; }));
                    _this.dg.columns[0] = _this.dndSer.moveItem(_this.dg.columns[0], realTagetIndex, currIndex);
                    return true;
                }
            }
            return false;
        });
        /** @type {?} */
        var columns = [];
        if (this.groupName === 'left') {
            if (this.dg.showCheckbox) {
                newIndex--;
            }
            if (this.dg.showLineNumber) {
                newIndex--;
            }
            columns = groupColumns.left;
        }
        else if (this.groupName === 'center') {
            columns = groupColumns.middle;
        }
        else if (this.groupName === 'right') {
            columns = groupColumns.right;
        }
        if (moveColumn(columns)) {
            this.dg.columnsChanged(false);
            if (this.dg.useControlPanel && this.dg.settingService) {
                this.dg.settingService.saveUserConfig(this.dg.id);
            }
            this.dg.columnMoved.emit({ newColumns: this.dg.columns, grid: this.dg });
        }
    };
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    DragColumnDirective.prototype.onDragStart = /**
     * @private
     * @param {?} info
     * @return {?}
     */
    function (info) {
    };
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    DragColumnDirective.prototype.onDragEnd = /**
     * @private
     * @param {?} info
     * @return {?}
     */
    function (info) {
    };
    /**
     * @private
     * @return {?}
     */
    DragColumnDirective.prototype.onDragEnter = /**
     * @private
     * @return {?}
     */
    function () {
    };
    /**
     * @private
     * @return {?}
     */
    DragColumnDirective.prototype.columnsGroup = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var leftColumns = this.dg.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.fixed === 'left'; }));
        /** @type {?} */
        var rightColumns = this.dg.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.fixed === 'right'; }));
        /** @type {?} */
        var middleColumns = this.dg.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.fixed !== 'right' && n.fixed !== 'left'; }));
        return {
            left: leftColumns,
            right: rightColumns,
            middle: middleColumns
        };
    };
    DragColumnDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[drag-column]',
                    providers: [
                        DragDropColumnService
                    ]
                },] }
    ];
    /** @nocollapse */
    DragColumnDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: Injector },
        { type: Renderer2 },
        { type: ElementRef },
        { type: DatagridHeaderComponent },
        { type: DatagridComponent },
        { type: DragDropColumnService }
    ]; };
    DragColumnDirective.propDecorators = {
        enableDrag: [{ type: Input, args: ['drag-column',] }],
        groupName: [{ type: Input }],
        options: [{ type: Input }]
    };
    return DragColumnDirective;
}());
export { DragColumnDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.container;
    /** @type {?} */
    DragColumnDirective.prototype.enableDrag;
    /** @type {?} */
    DragColumnDirective.prototype.groupName;
    /** @type {?} */
    DragColumnDirective.prototype.options;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.header;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.dndSer;
}
//# sourceMappingURL=data:application/json;base64,