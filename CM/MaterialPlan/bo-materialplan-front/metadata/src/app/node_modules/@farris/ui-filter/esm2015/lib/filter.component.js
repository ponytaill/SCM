/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ViewEncapsulation, ElementRef, ChangeDetectorRef, Renderer2, NgZone, EventEmitter, Output, Injector, Optional, LOCALE_ID, InjectFlags, HostBinding } from '@angular/core';
import { FarrisSidebarComponent } from '@farris/ui-sidebar';
import { LocaleService } from '@farris/ui-locale';
import { FilterPanelService } from '@farris/ui-filter-panel';
import { QuerySolutionService } from '@farris/ui-filter-condition';
import { FilterService } from './filter.service';
import { ConvertorService } from './service/convertorservice';
import { ControlType } from './entity/controltype';
import { TextValue } from './entity/conditionvalue/textvalue';
import { HelpValue } from './entity/conditionvalue/helpvalue';
import { DropDownListValue } from './entity/conditionvalue/dropdownlistvalue';
import { DateRangeValue } from './entity/conditionvalue/daterangevalue';
import { NumberRangeValue } from './entity/conditionvalue/numberrangevaue';
import { SearchValue } from './entity/conditionvalue/searchvalue';
import { DateValue } from './entity/conditionvalue/datevalue';
import { CheckboxGroupValue } from './entity/conditionvalue/checkboxgroupvalue';
import { FILTER_HANDLER_TOKEN } from './interface/filterHandler';
import { deepCopy } from './utils';
import { RadioGroupValue } from './entity/conditionvalue/radiovalue';
import { MonthRangeValue } from './entity/conditionvalue/monthrange';
import { YearRangeValue } from './entity/conditionvalue/yearrange';
import { MonthValue } from './entity/conditionvalue/month';
import { YearValue } from './entity/conditionvalue/yearvalue';
import { InputGroupValue } from './entity/conditionvalue/inputgroup';
import { NumberValue } from './entity/conditionvalue/numbervalue';
import { FlexibleNumberValue } from './entity/conditionvalue/flexiblenumbervalue';
import { FlexibleDateValue } from './entity/conditionvalue/flexibledatevalue';
import ResizeObserver from "resize-observer-polyfill";
export class FilterComponent {
    /**
     * @param {?} filterPanelService
     * @param {?} filterService
     * @param {?} convertorService
     * @param {?} handler
     * @param {?} cd
     * @param {?} render
     * @param {?} ngzone
     * @param {?} localeService
     * @param {?} injector
     */
    constructor(filterPanelService, filterService, convertorService, handler, cd, render, ngzone, localeService, injector) {
        this.filterPanelService = filterPanelService;
        this.filterService = filterService;
        this.convertorService = convertorService;
        this.handler = handler;
        this.cd = cd;
        this.render = render;
        this.ngzone = ngzone;
        this.localeService = localeService;
        this.injector = injector;
        this._filterList = [];
        //是否禁用
        this.disabled = false;
        this.showReminder = false;
        // 是否启用侧边栏収折-过滤条件在侧边栏显示
        this.floatFilter = true;
        // 启用自动宽度
        this._enableAutoWidth = false;
        this.localStorageKey = 'farrisSearchRecord';
        this.cla = true;
        this.query = new EventEmitter();
        this.searchChange = new EventEmitter();
        this.resetChange = new EventEmitter();
        this.clearFilter = new EventEmitter();
        this.expandFilter = new EventEmitter();
        this.packupFilter = new EventEmitter();
        this.filterResize = new EventEmitter();
        // 展开
        this.filterExtend = false;
        // 是否显示三个点
        this.filterEllipsis = false;
        // 是否显示展开收起
        this.filterExtendShow = false;
        this.filterExtendText = '展开';
        this.filterExtendIcon = 'f-icon-arrow-chevron-down';
        this.expandText = '展开';
        this.foldText = '收起';
        this.sidebarOpen = false;
        this.floatPanelOpen = false;
        this.showExpandTag = false;
        /**
         * 表单是否允许提交
         */
        this.canSubmit = false;
        /**
         * 表单是否允许提交,用于高级筛选清空后
         */
        this.advancedCanSubmit = true;
        /**
         * 默认展开项是否允许提交
         */
        this.showCanSubmit = true;
        /**
         * 是否显示清空已选
         */
        this.filledFilter = false;
        /**
         * 默认展开的筛选项
         */
        this.showFilterList = new Array();
        /**
         * 高级筛选
         */
        this.extendFilterList = new Array();
        this.extendFilterListStore = new Array();
        this.extendFilterListTemporary = new Array();
        /**
         * 已填写筛选数据
         */
        this.filledFilterList = new Array();
        /**
         * 高级筛选中已填写的
         */
        this.filledExtendFilterList = new Array();
        /** 没有填写的筛选项 */
        // unFilledFilterList:Array<QueryCondition> = new Array<QueryCondition>();
        /**
         * 高级筛选中必填项
         */
        this.extendRequiredList = new Array();
        /**
         * 默认筛选中必填项
         */
        this.showRequiredList = new Array();
        /**
         * 循环表单
         */
        this.listFilterConditions = new Array();
        /**
         * 默认展开＋高级筛选中已填写的
         */
        this.loopFilterList = new Array();
        /**
         * 用来存储setvalue前数据
         */
        this.stagListFilterConditions = new Array();
        /**
         * 显示中表单的必填项
         */
        this.requiredListFilter = [];
        this.localeIds = {
            'en': 'en',
            'zh-CHS': 'zh-CHS'
        };
        this.currentLocale = 'zh-CHS';
        this.isControlInline = true;
        this.reminderLeft = 0;
        // 绑定大小变化响应
        this.ro = null;
        // 记录旧的宽度数据
        this.containerWidthRecord = 0;
        // 阈值
        this.distanceThreshold = 20;
        if (this.injector) {
            this.currentLocale = this.injector.get(LOCALE_ID);
            this.filterHandler = this.injector.get(FILTER_HANDLER_TOKEN, null, InjectFlags.Optional);
        }
    }
    /**
     * @return {?}
     */
    get filterList() {
        return this._filterList;
    }
    /**
     * @param {?} filterList
     * @return {?}
     */
    set filterList(filterList) {
        this._filterList = filterList || [];
        this.initFilterList();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set enableAutoWidth(value) {
        if (value !== this._enableAutoWidth) {
            if (value) {
                this.filterEllipsis = false;
                this.filterExtendShow = false;
            }
            this._enableAutoWidth = value;
        }
    }
    /**
     * @return {?}
     */
    get enableAutoWidth() {
        return this._enableAutoWidth;
    }
    /**
     * @param {?} configs
     * @return {?}
     */
    set defaultValue(configs) {
        this._defaultValue = configs;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.setFilterValue(this._defaultValue);
        }));
    }
    /**
     * @return {?}
     */
    get defaultValue() {
        return this._defaultValue;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.filterWrapperEl = this.filterListWrapper && this.filterListWrapper.nativeElement;
        // 绑定事件
        this.bindRoEvent();
        this.foldText = this.localeService.getValue('filterPanel.fold');
        this.expandText = this.localeService.getValue('filterPanel.expand');
        this.filterExtendText = this.expandText;
        if (this.currentLocale === this.localeIds['en']) {
            this.isControlInline = false;
        }
        else {
            this.isControlInline = true;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.ro) {
            this.ro.unobserve(this.filterWrapperEl);
            this.ro = null;
        }
    }
    /**
     * 绑定监控大小的事件
     * @private
     * @return {?}
     */
    bindRoEvent() {
        if (!this.filterWrapper) {
            return;
        }
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            // 这样一直都绑定可能有性能问题
            this.ro = new ResizeObserver((/**
             * @param {?} entries
             * @param {?} observer
             * @return {?}
             */
            (entries, observer) => {
                /** @type {?} */
                const tempWidth = entries[0].contentRect.width;
                if (Math.abs(tempWidth - this.containerWidthRecord) >
                    this.distanceThreshold) {
                    if (!this.filterList.length)
                        return;
                    if (this.enableAutoWidth) {
                        return;
                    }
                    this.listEllipsisInit();
                    this.containerWidthRecord = tempWidth;
                }
            }));
            this.ro.observe(this.filterWrapper.nativeElement);
            // fromEvent(window, 'resize')
            //     .pipe(debounceTime(50, animationFrame))
            //     .subscribe((): void => {
            //         this.ngzone.run(() => {
            //             // console.log('resize');
            //             if (!this.filterList.length) return;
            //             if (this.enableAutoWidth) {return;}
            //             this.listEllipsisInit();
            //         });
            //     });
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // if (changes.filterList && !changes.filterList.isFirstChange()) {
        //   this.initFilterList();
        // }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * 初始化筛选项
     * @return {?}
     */
    initFilterList() {
        this.listFilterConditions = new Array();
        /** @type {?} */
        const filterDatas = this.filterService.fieldSchemasConvert(this.filterList);
        if (filterDatas && filterDatas.length) {
            this.listFilterConditions = this.convertorService.getSelectedFieldConditions(filterDatas, this.listFilterConditions);
        }
        this.stagListFilterConditions = this.listFilterConditions.map((/**
         * @param {?} o
         * @return {?}
         */
        o => (Object.assign({}, o))));
        this.filterListClassify();
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.showReminder && this.showFilterList && this.showFilterList.length) {
                this.showReminderItem = this.showFilterList[0];
                if (this.showReminderItem) {
                    /** @type {?} */
                    let filterlistItems = this.filterListWrapper && this.filterListWrapper.nativeElement.children;
                    if (filterlistItems && filterlistItems.length) {
                        /** @type {?} */
                        let showRemItem;
                        for (let i = 0; i < filterlistItems.length; i++) {
                            if (this.showReminderItem['id'] == filterlistItems[i].getAttribute('id')) {
                                showRemItem = filterlistItems[i];
                            }
                        }
                        if (showRemItem) {
                            this.reminderLeft = showRemItem.offsetLeft >= 0 ? showRemItem.offsetLeft : 0;
                        }
                    }
                }
            }
            else {
                this.showReminderItem = null;
            }
        }), 0);
        this.cd.detectChanges();
    }
    /**
     * 筛选项分类
     * @return {?}
     */
    filterListClassify() {
        this.extendFilterList = [];
        this.extendFilterListStore = [];
        this.showFilterList = [];
        this.filledFilterList = [];
        this.filledExtendFilterList = [];
        this.loopFilterList = [];
        this.extendRequiredList = [];
        this.showRequiredList = [];
        // 必填
        /** @type {?} */
        let requiredList = this.listFilterConditions.filter((/**
         * @param {?} listitem
         * @return {?}
         */
        (listitem) => {
            return listitem.control.required;
        }));
        if (requiredList && requiredList.length) {
            this.requiredListFilter = requiredList;
            this.canSubmit = this.canSubmitFilter(this.requiredListFilter);
        }
        else {
            this.requiredListFilter = [];
            this.canSubmit = true;
        }
        // 几种类型分类
        this.listFilterConditions.forEach((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            if (field.control.isExtend && field['filled']) {
                this.filledExtendFilterList.push(field);
            }
            if (field['filled']) {
                this.filledFilterList.push(field);
            }
            // else if(!field.control.isExtend){
            //   this.unFilledFilterList.push(field);
            // }
            if (field.control.isExtend) {
                this.extendFilterListStore.push(field);
            }
            else {
                this.showFilterList.push(field);
            }
        }));
        if (this.filledFilterList.length) {
            this.filledFilter = true;
        }
        else {
            this.filledFilter = false;
        }
        /** @type {?} */
        const list = this.listFilterConditions.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            return !item.control.isExtend || item['filled'];
        }));
        // this.loopFilterList = this.showFilterList.concat(this.filledExtendFilterList);
        this.loopFilterList = list ? list : [];
        this.loopFilterList.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.getValueText(item);
        }));
        this.extendFilterList = this.extendFilterListStore.map((/**
         * @param {?} o
         * @return {?}
         */
        o => (Object.assign({}, o))));
        /** @type {?} */
        const extendRequiredList = this.extendFilterList.filter((/**
         * @param {?} listitem
         * @return {?}
         */
        (listitem) => {
            return listitem.control.required;
        }));
        if (extendRequiredList && extendRequiredList.length) {
            this.extendRequiredList = extendRequiredList;
        }
        /** @type {?} */
        const showrequiredList = this.showFilterList.filter((/**
         * @param {?} listitem
         * @return {?}
         */
        (listitem) => {
            return listitem.control.required;
        }));
        if (showrequiredList && showrequiredList.length) {
            this.showRequiredList = showrequiredList;
        }
        this.showCanSubmit = this.canSubmitFilter(this.showRequiredList);
        this.advancedCanSubmit = this.canSubmitFilter(this.extendRequiredList);
        // console.log('已填写',this.filledExtendFilterList);
        // console.log('显示出来的',this.loopFilterList);
        // console.log('隐藏部分',this.extendFilterList);
        this.filterExtendShow = true;
        // 如果是支持自动宽度，就是不収折,判断涉及赋值时机
        if (!this.enableAutoWidth) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.listEllipsisInit();
            }), 0);
        }
    }
    /**
     * 已填写筛选项点击
     * @param {?} event
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    filterClick(event, data, index) {
        event.stopPropagation();
        if (this.disabled)
            return;
        if (data) {
            this.showReminderItem = null;
        }
        if (data && this.currentFilterId != data.id) {
            /** @type {?} */
            const panelItem = deepCopy(data);
            this.currentFilterId = data.id;
            const { left, top, height, right } = event.currentTarget.getBoundingClientRect();
            this.filterPanelContainer = this.filterPanelService.showPanel({
                left: left,
                top: top + height + 2,
                right: right,
                item: panelItem,
                localStorageKey: this.localStorageKey
            });
            this.filterPanelContainer.hidePanel.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            e => {
                this.filterPanelService.hidePanel();
                this.filterPanelContainer = null;
                this.currentFilterId = null;
            }));
            this.filterPanelContainer.clearFilter.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            e => {
                this.clearFilter.emit(e);
            }));
            //提交弹窗内
            /** @type {?} */
            const _this = this;
            this.filterPanelContainer.submit.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            e => {
                e.filled = (e.valueText && e.valueText.length > 0) ? true : false;
                _this.loopFilterList[index] = e;
                /** @type {?} */
                let panelListIndex = _this.listFilterConditions.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    return item['id'] == e['id'];
                }));
                if (panelListIndex >= 0) {
                    _this.listFilterConditions[panelListIndex] = e;
                }
                this.searchChange.emit(this.listFilterConditions);
                this.inSetCurrentFilterConditions();
                this.filterListClassify();
                // valueText是有需要计算的，所以延后判断是否显示
                /** @type {?} */
                let findItem = _this.loopFilterList.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    return item['id'] == e['id'];
                }));
                if (findItem) {
                    findItem['filled'] = findItem.valueText && findItem.valueText.length > 0 ? true : false;
                }
                this.cd.markForCheck();
                this.submit('panelFormData', this.listFilterConditions, e);
                this.filterPanelService.hidePanel();
                this.filterPanelContainer = null;
                this.currentFilterId = null;
            }));
        }
        else {
            this.filterPanelService.hidePanel();
            this.filterPanelContainer = null;
            this.currentFilterId = null;
        }
    }
    /**
     * 清空筛选项
     * @param {?} data
     * @param {?} index
     * @param {?} event
     * @return {?}
     */
    filterClear(data, index, event) {
        event.stopPropagation();
        this.filterPanelService.hidePanel();
        this.currentFilterId = null;
        this.resetListCondition(data);
        this.filterListClassify();
        this.cd.markForCheck();
        this.searchChange.emit(this.listFilterConditions);
        this.clearFilter.emit(data);
        this.inSetCurrentFilterConditions();
        this.advancedCanSubmit = this.canSubmitFilter(this.extendRequiredList);
        this.submit('panelFormData', this.listFilterConditions);
    }
    /**
     * 展开高级筛选
     * @return {?}
     */
    advancedFilter() {
        this.showReminderItem = null;
        this.extendFilterListTemporary = deepCopy(this.extendFilterList);
        this.farrissidebar.isOpen = true;
    }
    /**
     * @return {?}
     */
    listCancel() {
        this.extendFilterList = deepCopy(this.extendFilterListTemporary);
        this.farrissidebar.isOpen = false;
        this.floatPanelOpen = false;
    }
    /**
     * 打开面板高级筛选
     * @return {?}
     */
    floatFilterOpen() {
        this.floatPanelOpen = !this.floatPanelOpen;
        if (this.floatPanelOpen) {
            this.extendFilterListTemporary = deepCopy(this.extendFilterList);
        }
    }
    /**
     * 列表展示初始化
     * @return {?}
     */
    listEllipsisInit() {
        if (this.enableAutoWidth)
            return;
        // if(this.filterExtend) return;
        /** @type {?} */
        const filterMainWidth = this.filterMain.nativeElement.offsetWidth;
        this.filterToolWidth = 0;
        // filterTool = this.filterTool.nativeElement.offsetWidth;
        if (this.filterTool) {
            this.filterToolWidth = this.filterTool.nativeElement.offsetWidth;
        }
        // 筛选条件区域最大宽度
        /** @type {?} */
        let filterListW;
        if (this.filterExtend) {
            filterListW = filterMainWidth - 26;
        }
        else {
            // filterListW = filterMainWidth- 48 - this.filterToolWidth - 26;
            filterListW = filterMainWidth - 48 - this.filterToolWidth - 26;
        }
        // const filterWrapper = this.filterListWrapper.nativeElement;
        // const filterWrapperWidth = filterWrapper.offsetWidth;
        // console.log(filterWrapperWidth);
        /** @type {?} */
        const filterItems = this.filterWrapperEl ? this.filterWrapperEl.children : [];
        /** @type {?} */
        let filterItemWidth = 0;
        if (filterItems && filterItems.length) {
            for (let i = 0, len = filterItems.length; i < len; i++) {
                this.render.setStyle(filterItems[i], 'display', 'flex');
                /** @type {?} */
                let width = filterItems[i].offsetWidth;
                filterItemWidth += width + 8;
                if (filterItemWidth >= filterListW && !this.filterExtend) {
                    this.render.setStyle(filterItems[i], 'display', 'none');
                }
                else {
                    this.render.setStyle(filterItems[i], 'display', 'flex');
                }
                // console.log(filterItemWidth,filterListW,i);
            }
        }
        // if(filterItemWidth > this.filterWrapperEl.offsetWidth){
        if (filterItemWidth >= filterListW) {
            this.filterEllipsis = true;
            this.filterExtendShow = true;
        }
        else {
            this.filterEllipsis = false;
            this.filterExtendShow = false;
        }
        if (filterItems.length)
            this.filterResize.emit();
        if (!this.cd['destroyed']) {
            this.cd.detectChanges();
        }
    }
    /**
     * 筛选项展开收起切换
     * @return {?}
     */
    filterExpand() {
        this.showReminderItem = null;
        this.filterExtend = !this.filterExtend;
        if (this.filterExtend) {
            this.filterEllipsis = false;
            this.filterExtendText = this.foldText;
            this.filterExtendIcon = 'f-icon-arrow-chevron-up';
            /** @type {?} */
            const filterItems = this.filterWrapperEl.children;
            if (filterItems && filterItems.length) {
                for (let i = 0, len = filterItems.length; i < len; i++) {
                    this.render.setStyle(filterItems[i], 'display', 'flex');
                }
            }
            ;
            this.render.setStyle(this.filterWrapperEl, 'flex-wrap', 'wrap');
            this.expandFilter.emit();
            this.cd.detectChanges();
        }
        else {
            this.filterExtendText = this.expandText;
            this.filterExtendIcon = 'f-icon-arrow-chevron-down';
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.listEllipsisInit();
            }), 0);
            this.packupFilter.emit();
        }
    }
    /**
     * 高级筛选表单项搜索变化
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onSearch($event, item) {
        if (this.disabled) {
            return;
        }
        this.advancedCanSubmit = this.canSubmitFilter(this.extendRequiredList);
        // console.log(this.advancedCanSubmit,this.canSubmit);
        this.searchChange.emit({ item, conditions: this.listFilterConditions, instance: this });
    }
    /**
     * 判断是否所有必填项都填写完毕
     * @param {?} requirelist
     * @return {?}
     */
    canSubmitFilter(requirelist) {
        /** @type {?} */
        let formCanSubmit = false;
        if (!requirelist || !requirelist.length) {
            formCanSubmit = true;
            return formCanSubmit;
        }
        else {
            for (let i = 0; i < requirelist.length; i++) {
                /** @type {?} */
                const item = requirelist[i];
                if (item.control.getControlType() === ControlType.Text) {
                    /** @type {?} */
                    const tv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(tv).length < 0 || !tv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Help) {
                    /** @type {?} */
                    const shv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(shv).length === 0 || !shv.value || !shv.valueField) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.DropDown) {
                    /** @type {?} */
                    const ddv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(ddv).length === 0 || !ddv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.DateRange) {
                    /** @type {?} */
                    const drv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.DateRangeTime) {
                    /** @type {?} */
                    const drv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.MonthRange) {
                    /** @type {?} */
                    const mrv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(mrv).length === 0 || (!mrv.startTime && !mrv.endTime)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.YearRange) {
                    /** @type {?} */
                    const yrv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(yrv).length === 0 || (!yrv.startTime && !yrv.endTime)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.NumberRange) {
                    /** @type {?} */
                    const nrv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(nrv).length === 0 || (nrv.startValue === null && nrv.endValue === null)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Search) {
                    /** @type {?} */
                    const sv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(sv).length < 0 || !sv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Date) {
                    /** @type {?} */
                    const dv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(dv).length < 0 || !dv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Month) {
                    /** @type {?} */
                    const mv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(mv).length < 0 || !mv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Year) {
                    /** @type {?} */
                    const yv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(yv).length < 0 || !yv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.CheckboxGroup) {
                    /** @type {?} */
                    const cbgv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(cbgv).length === 0 || Object.keys(cbgv.value).length === 0) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Radio) {
                    /** @type {?} */
                    const radiov = ((/** @type {?} */ (item.value)));
                    if (Object.keys(radiov).length < 0 || radiov.value === '') {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.InputGroup) {
                    /** @type {?} */
                    const sv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(sv).length < 0 || !sv.textValue) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Number) {
                    /** @type {?} */
                    const nrv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(nrv).length === 0 || (nrv.value == null)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.FlexibleNumber) {
                    /** @type {?} */
                    const flexv = ((/** @type {?} */ (item.value)));
                    if (flexv.single) {
                        if (Object.keys(flexv).length < 0 || flexv.value == null) {
                            formCanSubmit = false;
                            return false;
                        }
                        else {
                            formCanSubmit = true;
                        }
                    }
                    else {
                        if (Object.keys(flexv).length === 0 || (flexv.startValue == null && flexv.endValue == null)) {
                            formCanSubmit = false;
                            return false;
                        }
                        else {
                            formCanSubmit = true;
                        }
                    }
                }
                else if (item.control.getControlType() === ControlType.FlexibleDate) {
                    /** @type {?} */
                    const flexdatev = ((/** @type {?} */ (item.value)));
                    if (flexdatev.single) {
                        if (Object.keys(flexdatev).length < 0 || !flexdatev.value) {
                            formCanSubmit = false;
                            return false;
                        }
                        else {
                            formCanSubmit = true;
                        }
                    }
                    else {
                        if (Object.keys(flexdatev).length === 0 || (!flexdatev.startValue && !flexdatev.endValue)) {
                            formCanSubmit = false;
                            return false;
                        }
                        else {
                            formCanSubmit = true;
                        }
                    }
                }
            }
            return formCanSubmit;
        }
    }
    /**
     * 高级筛选点击确定提交
     * @return {?}
     */
    listSearch() {
        if (this.disabled) {
            return;
        }
        ;
        this.extendFilterList.forEach((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            if ((field.control.getControlType() != ControlType.Date)
                && (field.control.getControlType() != ControlType.DateRange)
                && (field.control.getControlType() != ControlType.DateRangeTime)
                && (field.control.getControlType() != ControlType.FlexibleDate)) {
                if (!field.valueText) {
                    field.valueText = field.value.getValueText();
                }
            }
            // if(field.control.getControlType() == ControlType.Radio){
            //   console.log(field);
            // }
            field.filled = (field.valueText && field.valueText.length > 0) ? true : false;
            if (field.control.getControlType() == ControlType.Text) {
                /** @type {?} */
                let farrisSearchRecord = field.valueText;
                /** @type {?} */
                let farrisSearchRecordArray = [];
                /** @type {?} */
                let storagelabelCode = field.labelCode;
                /** @type {?} */
                let filterPanelArray = JSON.parse(localStorage.getItem(this.localStorageKey));
                if (Array.isArray(filterPanelArray)) {
                    filterPanelArray = null;
                }
                if (!filterPanelArray || !filterPanelArray[storagelabelCode] || !filterPanelArray[storagelabelCode].length && farrisSearchRecord && farrisSearchRecord.length) {
                    farrisSearchRecordArray.push(farrisSearchRecord);
                }
                else {
                    farrisSearchRecordArray = filterPanelArray[storagelabelCode];
                    /** @type {?} */
                    let index = filterPanelArray[storagelabelCode].indexOf(farrisSearchRecord);
                    if (index < 0 && farrisSearchRecord && farrisSearchRecord.length) {
                        farrisSearchRecordArray.unshift(farrisSearchRecord);
                    }
                    farrisSearchRecordArray = farrisSearchRecordArray.slice(0, 6);
                }
                if (filterPanelArray == null)
                    filterPanelArray = {};
                filterPanelArray[storagelabelCode] = farrisSearchRecordArray;
                localStorage.setItem(this.localStorageKey, JSON.stringify(filterPanelArray));
            }
        }));
        //判断高级筛选里是否已修改
        /** @type {?} */
        let extendAmendedList = this.extendFilterList.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => { return item.filled; }));
        if (extendAmendedList && extendAmendedList.length) {
            this.showExpandTag = true;
        }
        else {
            this.showExpandTag = false;
        }
        this.extendFilterListStore = this.extendFilterList.map((/**
         * @param {?} o
         * @return {?}
         */
        o => (Object.assign({}, o))));
        this.extendFilterListStore.forEach((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            /** @type {?} */
            let extendListIndex = this.listFilterConditions.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                return item['id'] == field['id'];
            }));
            if (extendListIndex >= 0) {
                this.listFilterConditions[extendListIndex] = field;
            }
        }));
        // console.log(this.listFilterConditions);
        this.searchChange.emit(this.listFilterConditions);
        this.inSetCurrentFilterConditions();
        this.filterListClassify();
        this.farrissidebar.isOpen = false;
        this.floatPanelOpen = false;
        this.cd.markForCheck();
        this.submit('extendFormData', this.listFilterConditions);
    }
    /**
     * 提交表单
     * @param {?} type
     * @param {?} filterlist
     * @param {?=} filterItem
     * @return {?}
     */
    submit(type, filterlist, filterItem = null) {
        if (this.disabled || !this.showCanSubmit || !this.advancedCanSubmit) {
            return;
        }
        /** @type {?} */
        const queryList = this.handler.setFilterConditions(filterlist);
        this.query.emit({ type: type, data: JSON.stringify(queryList), filterItem });
    }
    /**
     * 设置筛选初始值
     * @param {?} fieldConfigs
     * @return {?}
     */
    setFilterValue(fieldConfigs) {
        this.listFilterConditions = this.stagListFilterConditions.map((/**
         * @param {?} o
         * @return {?}
         */
        o => (Object.assign({}, o))));
        if (this.listFilterConditions && this.listFilterConditions.length) {
            this.setValues(this.listFilterConditions, fieldConfigs);
            /** @type {?} */
            let listFilter = this.listFilterConditions.map((/**
             * @param {?} o
             * @return {?}
             */
            o => (Object.assign({}, o))));
            this.listFilterConditions = listFilter;
            this.filterListClassify();
            this.searchChange.emit(this.listFilterConditions);
            this.inSetCurrentFilterConditions();
            // this.listSearch();
            this.cd.detectChanges();
            this.cd.markForCheck();
            this.canSubmit = this.canSubmitFilter(this.requiredListFilter);
            if (!this.canSubmit) {
                return;
            }
            this.submit('showFormData', this.listFilterConditions);
        }
    }
    /**
     * 清空筛选某一项
     * @param {?} labelCode 字段编号唯一标识
     * @return {?}
     */
    resetFilterValue(labelCode) {
        if (labelCode && this.listFilterConditions && this.listFilterConditions.length) {
            /** @type {?} */
            let resetCondition = this.listFilterConditions.find((/**
             * @param {?} conditions
             * @return {?}
             */
            (conditions) => {
                return conditions['fieldCode'] === labelCode;
            }));
            if (resetCondition) {
                this.resetListCondition(resetCondition);
                this.filterListClassify();
                this.cd.markForCheck();
                this.searchChange.emit(this.listFilterConditions);
                this.inSetCurrentFilterConditions();
                this.advancedCanSubmit = this.canSubmitFilter(this.extendRequiredList);
                this.submit('panelFormData', this.listFilterConditions);
            }
        }
    }
    // 设置value
    /**
     * @param {?} conditions
     * @param {?} fieldConfigs
     * @return {?}
     */
    setValues(conditions, fieldConfigs) {
        /** @type {?} */
        let qc;
        /** @type {?} */
        let controlType;
        if (fieldConfigs && fieldConfigs.length) {
            fieldConfigs.forEach((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                qc = conditions.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.fieldCode == v.labelCode));
                if (qc) {
                    controlType = this.getControlType(qc);
                    qc.value = this.filterService.setValues(controlType, v.value, qc.control.single);
                    qc.valueText = qc.value.getValueText(qc.control);
                    if (v.value) {
                        qc.filled = true;
                    }
                }
            }));
        }
    }
    /**
     * @param {?} fieldName
     * @return {?}
     */
    getValue(fieldName) {
        /** @type {?} */
        const queryList = this.handler.setFilterConditions(this.listFilterConditions);
        /** @type {?} */
        const item = queryList.find((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n['FilterField'] === fieldName));
        if (item) {
            return item.value;
        }
        return undefined;
    }
    /**
     * 获取控件类型
     * @param {?} selectedFieldCondition
     * @return {?}
     */
    getControlType(selectedFieldCondition) {
        if (selectedFieldCondition) {
            if (selectedFieldCondition.control.getControlType() == ControlType.Text) {
                return 'input';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Search) {
                return 'search';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Date) {
                return 'date';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Month) {
                return 'month';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Year) {
                return 'year';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.DateRange) {
                return 'daterange';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.MonthRange) {
                return 'monthrange';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.YearRange) {
                return 'yearrange';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.DateRangeTime) {
                return 'daterangetime';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.DropDown) {
                return 'dropdown';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.NumberRange) {
                return 'number';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Help) {
                return 'help';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.CheckboxGroup) {
                return 'checkboxgroup';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Radio) {
                return 'radio';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.InputGroup) {
                return 'input-group';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Number) {
                return 'singlenumber';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.FlexibleNumber) {
                return 'flexiblenumber';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.FlexibleDate) {
                return 'flexibledate';
            }
            else {
                return 'input';
            }
        }
    }
    /**
     * 更新上下文中筛选数据
     * @return {?}
     */
    inSetCurrentFilterConditions() {
        if (this.filterHandler) {
            this.filterHandler.setCurrentFilterConditions(this.listFilterConditions);
        }
    }
    /**
     * 清空条件
     * @param {?} listFilterCondition
     * @return {?}
     */
    resetListCondition(listFilterCondition) {
        if (listFilterCondition.control.getControlType() == ControlType.Text) {
            listFilterCondition.value = new TextValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Search) {
            listFilterCondition.value = new SearchValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Date) {
            listFilterCondition.value = new DateValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Month) {
            listFilterCondition.value = new MonthValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Year) {
            listFilterCondition.value = new YearValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.DateRange) {
            listFilterCondition.value = new DateRangeValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.MonthRange) {
            listFilterCondition.value = new MonthRangeValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.YearRange) {
            listFilterCondition.value = new YearRangeValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.DropDown) {
            listFilterCondition.value = new DropDownListValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.NumberRange) {
            listFilterCondition.value = new NumberRangeValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Help) {
            listFilterCondition.value = new HelpValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.CheckboxGroup) {
            listFilterCondition.value = new CheckboxGroupValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Radio) {
            listFilterCondition.value = new RadioGroupValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.InputGroup) {
            listFilterCondition.value = new InputGroupValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Number) {
            listFilterCondition.value = new NumberValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.FlexibleNumber) {
            listFilterCondition.value = new FlexibleNumberValue({ startValue: null, endValue: null, value: null }, listFilterCondition.control.single);
        }
        else if (listFilterCondition.control.getControlType() == ControlType.FlexibleDate) {
            listFilterCondition.value = new FlexibleDateValue({ startValue: null, endValue: null, value: null }, listFilterCondition.control.single);
        }
        else {
            listFilterCondition.value = new TextValue();
        }
        listFilterCondition.valueText = '';
        listFilterCondition.filled = false;
        // return listFilterCondition;
    }
    /**
     * @return {?}
     */
    resetSearch() {
        if (this.disabled) {
            return;
        }
        if (this.listFilterConditions && this.listFilterConditions.length) {
            this.listFilterConditions.forEach((/**
             * @param {?} listFilterCondition
             * @return {?}
             */
            listFilterCondition => {
                this.resetListCondition(listFilterCondition);
            }));
            this.listFilterConditions = this.listFilterConditions.map((/**
             * @param {?} o
             * @return {?}
             */
            o => (Object.assign({}, o))));
            this.filterListClassify();
            this.showCanSubmit = true;
            this.submit('panelFormData', this.listFilterConditions);
        }
        this.resetChange.emit();
        this.showExpandTag = false;
    }
    /**
     * 高级筛选清空筛选
     * @return {?}
     */
    resetAdvancedSearch() {
        if (this.extendFilterList && this.extendFilterList.length) {
            this.extendFilterList.forEach((/**
             * @param {?} listFilterCondition
             * @return {?}
             */
            listFilterCondition => {
                this.resetListCondition(listFilterCondition);
            }));
            this.extendFilterList = this.extendFilterList.map((/**
             * @param {?} o
             * @return {?}
             */
            o => (Object.assign({}, o))));
        }
        if (this.extendRequiredList.length) {
            this.advancedCanSubmit = false;
        }
    }
    /**
     * valueText 特殊类型处理
     * @param {?} item
     * @return {?}
     */
    getValueText(item) {
        // console.log(item.fieldName,item.control.getControlType());
        if (item.control.getControlType() === ControlType.DropDown) {
            /** @type {?} */
            const enumValue = ((/** @type {?} */ (item.control))).enumValues;
            /** @type {?} */
            const value = ((/** @type {?} */ (item.value))).value;
            if (enumValue && enumValue.length) {
                /** @type {?} */
                const texts = enumValue.find((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    return val['value'] == value;
                }));
                if (texts) {
                    item.valueText = texts['name'];
                }
            }
        }
        else if (item.control.getControlType() === ControlType.CheckboxGroup) {
            /** @type {?} */
            const enumValue = ((/** @type {?} */ (item.control))).enumValues;
            /** @type {?} */
            const value = ((/** @type {?} */ (item.value))).value;
            if (enumValue && enumValue.length && value && value['length'] > 0) {
                if (item.control.boolcheck) {
                    item.valueText = value[0].toString();
                    if (item.valueText == 'true') {
                        item.valueText = this.localeService.getValue('text.yes');
                    }
                    else if (item.valueText == 'false') {
                        item.valueText = this.localeService.getValue('text.no');
                    }
                }
                else {
                    /** @type {?} */
                    let texts = [];
                    for (let i = 0; i <= value['length']; i++) {
                        /** @type {?} */
                        const enums = enumValue.find((/**
                         * @param {?} val
                         * @return {?}
                         */
                        val => {
                            return val['value'] == value[i];
                        }));
                        if (enums) {
                            texts.push(enums['name']);
                        }
                    }
                    item.valueText = texts.join(',');
                }
            }
        }
        else if (item.control.getControlType() === ControlType.Radio) {
            /** @type {?} */
            const enumValue = ((/** @type {?} */ (item.control))).enumValues;
            /** @type {?} */
            const value = ((/** @type {?} */ (item.value))).value;
            if (enumValue && enumValue.length) {
                /** @type {?} */
                const texts = enumValue.find((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    return val['value'] == value;
                }));
                if (texts) {
                    item.valueText = texts['name'];
                    if (item.valueText == 'true') {
                        item.valueText = this.localeService.getValue('text.yes');
                    }
                    else if (item.valueText == 'false') {
                        item.valueText = this.localeService.getValue('text.no');
                    }
                }
            }
        }
        else if (item.control.getControlType() == ControlType.InputGroup) {
            item.valueText = item.value.getValueText();
        }
    }
}
FilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-filter',
                template: "<div class=\"f-filter-wrapper\" #filterWrapper [style.display]=\"filterList&&filterList.length ? '': 'none'\">\r\n    <div class=\"f-filter-wrapper-inner f-utils-fill\">\r\n        <div class=\"f-filter-main f-utils-fill\" #filterMain>\r\n            <div class=\"f-filter-list-wrapper\" #listWrapper>\r\n                <div class=\"f-filter-list\"\r\n                [ngClass]=\"{'f-filter-list-extend': filterExtend && filterExtendShow}\"\r\n                 #filterListWrapper>\r\n                    <div class=\"f-filter-item\" \r\n                        *ngFor=\"let data of loopFilterList;let index = index;let last = last;let first = first;\"\r\n                        [ngClass]=\"{'f-filter-item-actived': data.filled,'f-filter-item-last':last,'f-filter-item-edit': data.id == currentFilterId}\"\r\n                        [id]=\"data['id']\"\r\n                        (click)=\"filterClick($event,data,index)\"\r\n                        >\r\n                            <div class=\"f-filter-item-inner\"\r\n                                farrisTooltip \r\n                                [showTip]=\"data.id !== currentFilterId && data.filled && data.valueText\" \r\n                                [placement]=\"'bottom'\" \r\n                                [content]=\"data.valueText\"\r\n                            >\r\n                                <span class=\"f-filter-item-required text-danger\" *ngIf=\"data.control.required\">*</span>\r\n                                <span class=\"f-filter-item-text\">\r\n                                    {{data.fieldName}}\r\n                                </span>\r\n                                <span class=\"f-filter-item-tip\" *ngIf=\"data.filled&&data.valueText\">\uFF1A</span>\r\n                                <span class=\"f-filter-item-content\" *ngIf=\"data.filled&&data.valueText\" >{{data.valueText}}</span>\r\n                                <!--  -->\r\n                                <span class=\"f-filter-item-arrow f-icon f-icon-arrow-chevron-down\"></span>\r\n                            </div>\r\n                            <span class=\"f-filter-item-clear\" *ngIf=\"!disabled&&data.filled&&data.valueText\" (click)=\"filterClear(data,index,$event)\">\r\n                                <span class=\"f-icon f-icon-close-circle\"></span>\r\n                            </span>\r\n                    </div>                 \r\n                    <div class=\"f-filter-toolbars\" *ngIf=\"filterExtend\">\r\n                        <button class=\"btn btn-link\" (click)=\"advancedFilter()\" *ngIf=\"floatFilter && extendFilterList && extendFilterList.length > 0\">{{ 'filterPanel.advancedFilter' | locale }}</button>\r\n                        <button class=\"btn btn-link\" (click)=\"resetSearch()\" *ngIf=\"!showReminder && filledFilter\">{{ 'filterPanel.reset' | locale }}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"f-filter-list-ellipsis\" *ngIf=\"filterEllipsis && !filterExtend && filterExtendShow\" (click)=\"filterExpand()\">...</div>\r\n            <div class=\"f-filter-toolbars\" #filterTool *ngIf=\"!filterExtend\">\r\n                <button class=\"btn btn-link\" (click)=\"advancedFilter()\" *ngIf=\"floatFilter && extendFilterList && extendFilterList.length > 0\">{{ 'filterPanel.advancedFilter' | locale }}</button>\r\n                <button class=\"btn btn-link\" (click)=\"resetSearch()\" *ngIf=\"!showReminder && filledFilter\">{{ 'filterPanel.reset' | locale }}</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"f-filter-extend-btn\" (click)=\"filterExpand()\" *ngIf=\"filterExtendShow\">\r\n            <button class=\"btn btn-link\">\r\n                <span class=\"extend-btn-text\">{{filterExtendText}}</span>\r\n                <span [class]=\"'extend-btn-arrow f-icon '+filterExtendIcon\"></span>\r\n            </button>\r\n        </div>\r\n        <div class=\"f-filter-extend-btn-advanced\" *ngIf=\"!floatFilter && extendFilterList && extendFilterList.length > 0\" [class.active]=\"floatPanelOpen\" (click)=\"floatFilterOpen()\">\r\n            <span class=\"f-icon f-icon-filtrate\"></span>\r\n            <span class=\"filter-expand-tag\" *ngIf=\"showExpandTag\"></span>\r\n        </div>\r\n    </div>\r\n    <div class=\"f-filter-inputs-extend position-absolute\" *ngIf=\"!floatFilter\" [hidden]=\"!floatPanelOpen\">\r\n        <div class=\"f-filter-typelist-arrow\"></div>\r\n        <div class=\"f-filter-inputs-extend-list farris-form farris-form-auto\" [ngClass]=\"{'farris-form-controls-inline':isControlInline}\">\r\n            <fieldset class=\"f-section-formgroup\">\r\n                <div class=\"f-section-formgroup-inputs\">\r\n                  <div class=\"col-12\">\r\n                    <ng-container *ngFor=\"let item of extendFilterList\">\r\n                        <div class=\"filter-input-list farris-group-wrap\">\r\n                            <ng-container [ngTemplateOutlet]=\"filterInputTemplate\" [ngTemplateOutletContext]=\"{ item: item }\">\r\n                            </ng-container>\r\n                        </div>\r\n                    </ng-container>\r\n                  </div>\r\n                </div>\r\n            </fieldset>\r\n          <div class=\"f-filter-form-btns text-right\">\r\n            <button class=\"btn btn-link filter-form-btn-reset\" (click)=\"resetAdvancedSearch()\">{{ 'filterPanel.reset' | locale }}</button>\r\n            <!-- bugNum:456508 -->\r\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"listCancel()\">{{ 'filterPanel.cancel' | locale }}</button>\r\n            <button type=\"button\" class=\"f-sidebar-filter-btn-confirm btn btn-primary\" [ngClass]=\"{'disabled': disabled}\" (click)=\"listSearch()\">{{ 'filterPanel.confirm' | locale }}</button>\r\n          </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-filter-item-reminder\" *ngIf=\"showReminder && showReminderItem\" [ngStyle]=\"{'left': reminderLeft+'px'}\">\r\n        <span class=\"reminder-arrow\"></span>\r\n        <div class=\"reminder-inner\">\r\n            <span class=\"f-icon f-icon-help-01\"></span>\r\n            <span class=\"reminder-text\">{{ 'filterPanel.pleaseInput' | locale }}<span>{{showReminderItem.fieldName}}</span></span>\r\n        </div>\r\n    </div>\r\n</div>\r\n<farris-sidebar [title]=\"'filterPanel.advancedFilter' | locale\" #farrissidebar [resizeable]=\"true\" [mainCls]=\"'f-sidebar-filter-main'\"\r\n    [showEntry]=\"false\" [showHeader]=\"true\" [showFooter]=\"true\" [maskable]=\"true\" [maskClosable]=\"false\"\r\n    [showClose]=\"false\" [width]=\"468\" [isOpen]=\"sidebarOpen\" *ngIf=\"extendFilterList && extendFilterList.length > 0\">\r\n    <ng-template farrisSidebarToolbar></ng-template>\r\n    <ng-template farrisSidebarContent [contentCls]=\"'f-sidebar-filter-content'\">\r\n        <div class=\"f-sidebar-filter-list farris-form\" [ngClass]=\"{'farris-form-controls-inline':isControlInline}\">\r\n            <div class=\"filter-list-item farris-group-wrap\" *ngFor=\"let item of extendFilterList\">\r\n                <ng-container [ngTemplateOutlet]=\"filterInputTemplate\" [ngTemplateOutletContext]=\"{ item: item }\">\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n    </ng-template>\r\n    <ng-template farrisSidebarFooter [footerCls]=\"'f-sidebar-filter-footer'\">\r\n        <div class=\"f-sidebar-filter-clear\">\r\n            <button class=\"btn btn-link\" (click)=\"resetAdvancedSearch()\">{{ 'filterPanel.reset' | locale }}</button>\r\n        </div>\r\n        <div class=\"f-sidebar-filter-btns\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"listCancel()\">{{ 'filterPanel.cancel' | locale }}</button>\r\n            <button type=\"button\" class=\"f-sidebar-filter-btn-confirm btn btn-primary\" [ngClass]=\"{'disabled': disabled}\" (click)=\"listSearch()\">{{ 'filterPanel.confirm' | locale }}</button>\r\n        </div>\r\n    </ng-template>\r\n</farris-sidebar>\r\n\r\n<ng-template #filterInputTemplate let-item=\"item\">\r\n    <ng-container [ngSwitch]=\"item | controlType\">\r\n        <div class=\"filter-input-item filter-type-input\" *ngSwitchCase=\"'input'\">\r\n            <app-filter-input [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-input>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-search\" *ngSwitchCase=\"'search'\">\r\n            <app-filter-search [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-search>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'date'\">\r\n            <app-filter-date [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-date>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-year\" *ngSwitchCase=\"'year'\">\r\n            <app-filter-date [item]=\"item\" [disabled]=\"disabled\" [showType]=\"'3'\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-date>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-month\" *ngSwitchCase=\"'month'\">\r\n            <app-filter-date [item]=\"item\" [disabled]=\"disabled\" [showType]=\"'2'\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-date>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'daterange'\">\r\n            <app-filter-daterange [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'daterangetime'\">\r\n            <app-filter-daterange [item]=\"item\" [disabled]=\"disabled\" [showTime]=\"true\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-monthrange\" *ngSwitchCase=\"'monthrange'\">\r\n            <app-filter-daterange [item]=\"item\" [disabled]=\"disabled\" [showType]=\"'2'\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-yearrange\" *ngSwitchCase=\"'yearrange'\">\r\n            <app-filter-daterange [item]=\"item\" [disabled]=\"disabled\" [showType]=\"'3'\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-dropdown\" *ngSwitchCase=\"'dropdown'\">\r\n            <app-filter-dropdown [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-dropdown>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-number\" *ngSwitchCase=\"'number'\">\r\n            <app-filter-number [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-number>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-single-number\" *ngSwitchCase=\"'singlenumber'\">\r\n            <app-filter-single-number [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-single-number>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-help\" *ngSwitchCase=\"'help'\">\r\n            <app-filter-help [item]=\"item\" [disabled]=\"disabled\" [hostRef]=\"this\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-help>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-checkboxgroup\" *ngSwitchCase=\"'checkboxgroup'\">\r\n            <app-filter-checkbox [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-checkbox>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-radio\" *ngSwitchCase=\"'radio'\">\r\n            <app-filter-radio [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-radio>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-input-group\" *ngSwitchCase=\"'input-group'\">\r\n            <app-filter-inputgroup [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-inputgroup>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-flexiblenumbe\" *ngSwitchCase=\"'flexiblenumber'\">\r\n            <app-filter-flexiblenumber [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-flexiblenumber>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-flexiblenumbe\" *ngSwitchCase=\"'flexibledate'\">\r\n            <app-filter-flexibledate [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-flexibledate>\r\n        </div>\r\n        <!-- <div class=\"filter-input-item filter-type-boolcheckbox\" *ngSwitchCase=\"'bool-check'\">\r\n            <app-filter-checkbox [item]=\"item\" [disabled]=\"disabled\" [boolcheck]=\"true\"\r\n            (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n            style=\"white-space: nowrap;\"></app-filter-checkbox>\r\n        </div> -->\r\n        <div class=\"filter-input-item filter-type-default\" *ngSwitchDefault>\r\n            <app-filter-input [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-input>\r\n        </div>\r\n    </ng-container>\r\n</ng-template>",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    FilterPanelService
                ]
            }] }
];
/** @nocollapse */
FilterComponent.ctorParameters = () => [
    { type: FilterPanelService },
    { type: FilterService },
    { type: ConvertorService },
    { type: QuerySolutionService },
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: NgZone },
    { type: LocaleService },
    { type: Injector, decorators: [{ type: Optional }] }
];
FilterComponent.propDecorators = {
    filterList: [{ type: Input }],
    disabled: [{ type: Input }],
    showReminder: [{ type: Input }],
    floatFilter: [{ type: Input }],
    enableAutoWidth: [{ type: Input }],
    localStorageKey: [{ type: Input }],
    defaultValue: [{ type: Input }],
    cla: [{ type: HostBinding, args: ['class.f-filter',] }],
    query: [{ type: Output }],
    searchChange: [{ type: Output }],
    resetChange: [{ type: Output }],
    clearFilter: [{ type: Output }],
    expandFilter: [{ type: Output }],
    packupFilter: [{ type: Output }],
    filterResize: [{ type: Output }],
    filterMain: [{ type: ViewChild, args: ['filterMain',] }],
    filterTool: [{ type: ViewChild, args: ['filterTool',] }],
    filterWrapper: [{ type: ViewChild, args: ['filterWrapper',] }],
    farrissidebar: [{ type: ViewChild, args: ['farrissidebar',] }],
    listWrapper: [{ type: ViewChild, args: ['listWrapper',] }],
    filterListWrapper: [{ type: ViewChild, args: ['filterListWrapper',] }]
};
if (false) {
    /** @type {?} */
    FilterComponent.prototype._filterList;
    /** @type {?} */
    FilterComponent.prototype.disabled;
    /** @type {?} */
    FilterComponent.prototype.showReminder;
    /** @type {?} */
    FilterComponent.prototype.floatFilter;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype._enableAutoWidth;
    /** @type {?} */
    FilterComponent.prototype.localStorageKey;
    /** @type {?} */
    FilterComponent.prototype._defaultValue;
    /** @type {?} */
    FilterComponent.prototype.cla;
    /** @type {?} */
    FilterComponent.prototype.query;
    /** @type {?} */
    FilterComponent.prototype.searchChange;
    /** @type {?} */
    FilterComponent.prototype.resetChange;
    /** @type {?} */
    FilterComponent.prototype.clearFilter;
    /** @type {?} */
    FilterComponent.prototype.expandFilter;
    /** @type {?} */
    FilterComponent.prototype.packupFilter;
    /** @type {?} */
    FilterComponent.prototype.filterResize;
    /** @type {?} */
    FilterComponent.prototype.filterMain;
    /** @type {?} */
    FilterComponent.prototype.filterTool;
    /** @type {?} */
    FilterComponent.prototype.filterWrapper;
    /** @type {?} */
    FilterComponent.prototype.farrissidebar;
    /** @type {?} */
    FilterComponent.prototype.listWrapper;
    /** @type {?} */
    FilterComponent.prototype.filterListWrapper;
    /** @type {?} */
    FilterComponent.prototype.currentFilterId;
    /** @type {?} */
    FilterComponent.prototype.filterExtend;
    /** @type {?} */
    FilterComponent.prototype.filterEllipsis;
    /** @type {?} */
    FilterComponent.prototype.filterExtendShow;
    /** @type {?} */
    FilterComponent.prototype.filterExtendText;
    /** @type {?} */
    FilterComponent.prototype.filterExtendIcon;
    /** @type {?} */
    FilterComponent.prototype.expandText;
    /** @type {?} */
    FilterComponent.prototype.foldText;
    /** @type {?} */
    FilterComponent.prototype.filterWrapperEl;
    /** @type {?} */
    FilterComponent.prototype.filterToolWidth;
    /** @type {?} */
    FilterComponent.prototype.sidebarOpen;
    /** @type {?} */
    FilterComponent.prototype.floatPanelOpen;
    /** @type {?} */
    FilterComponent.prototype.showExpandTag;
    /**
     * 表单是否允许提交
     * @type {?}
     */
    FilterComponent.prototype.canSubmit;
    /**
     * 表单是否允许提交,用于高级筛选清空后
     * @type {?}
     */
    FilterComponent.prototype.advancedCanSubmit;
    /**
     * 默认展开项是否允许提交
     * @type {?}
     */
    FilterComponent.prototype.showCanSubmit;
    /**
     * 是否显示清空已选
     * @type {?}
     */
    FilterComponent.prototype.filledFilter;
    /**
     * 默认展开的筛选项
     * @type {?}
     */
    FilterComponent.prototype.showFilterList;
    /**
     * 高级筛选
     * @type {?}
     */
    FilterComponent.prototype.extendFilterList;
    /** @type {?} */
    FilterComponent.prototype.extendFilterListStore;
    /** @type {?} */
    FilterComponent.prototype.extendFilterListTemporary;
    /**
     * 已填写筛选数据
     * @type {?}
     */
    FilterComponent.prototype.filledFilterList;
    /**
     * 高级筛选中已填写的
     * @type {?}
     */
    FilterComponent.prototype.filledExtendFilterList;
    /**
     * 高级筛选中必填项
     * @type {?}
     */
    FilterComponent.prototype.extendRequiredList;
    /**
     * 默认筛选中必填项
     * @type {?}
     */
    FilterComponent.prototype.showRequiredList;
    /**
     * 循环表单
     * @type {?}
     */
    FilterComponent.prototype.listFilterConditions;
    /**
     * 默认展开＋高级筛选中已填写的
     * @type {?}
     */
    FilterComponent.prototype.loopFilterList;
    /**
     * 用来存储setvalue前数据
     * @type {?}
     */
    FilterComponent.prototype.stagListFilterConditions;
    /**
     * 显示中表单的必填项
     * @type {?}
     */
    FilterComponent.prototype.requiredListFilter;
    /** @type {?} */
    FilterComponent.prototype.localeIds;
    /** @type {?} */
    FilterComponent.prototype.currentLocale;
    /** @type {?} */
    FilterComponent.prototype.isControlInline;
    /**
     * 组件服务接口
     * @type {?}
     */
    FilterComponent.prototype.filterHandler;
    /** @type {?} */
    FilterComponent.prototype.filterPanelContainer;
    /** @type {?} */
    FilterComponent.prototype.showReminderItem;
    /** @type {?} */
    FilterComponent.prototype.reminderLeft;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.containerWidthRecord;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.distanceThreshold;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.filterPanelService;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.convertorService;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.handler;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.render;
    /** @type {?} */
    FilterComponent.prototype.ngzone;
    /** @type {?} */
    FilterComponent.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,