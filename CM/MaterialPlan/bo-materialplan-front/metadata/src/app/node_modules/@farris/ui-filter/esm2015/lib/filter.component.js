/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ViewEncapsulation, ElementRef, ChangeDetectorRef, Renderer2, NgZone, EventEmitter, Output, Injector, Optional, LOCALE_ID, InjectFlags, HostBinding } from '@angular/core';
import { fromEvent } from 'rxjs';
import { auditTime } from 'rxjs/operators';
import { FarrisSidebarComponent } from '@farris/ui-sidebar';
import { LocaleService } from '@farris/ui-locale';
import { FilterPanelService } from '@farris/ui-filter-panel';
import { QuerySolutionService } from '@farris/ui-filter-condition';
import { FilterService } from './filter.service';
import { ConvertorService } from './service/convertorservice';
import { ControlType } from './entity/controltype';
import { TextValue } from './entity/conditionvalue/textvalue';
import { HelpValue } from './entity/conditionvalue/helpvalue';
import { DropDownListValue } from './entity/conditionvalue/dropdownlistvalue';
import { DateRangeValue } from './entity/conditionvalue/daterangevalue';
import { NumberRangeValue } from './entity/conditionvalue/numberrangevaue';
import { SearchValue } from './entity/conditionvalue/searchvalue';
import { DateValue } from './entity/conditionvalue/datevalue';
import { CheckboxGroupValue } from './entity/conditionvalue/checkboxgroupvalue';
import { FILTER_HANDLER_TOKEN } from './interface/filterHandler';
import { deepCopy } from './utils';
import { RadioGroupValue } from './entity/conditionvalue/radiovalue';
import { MonthRangeValue } from './entity/conditionvalue/monthrange';
import { YearRangeValue } from './entity/conditionvalue/yearrange';
import { MonthValue } from './entity/conditionvalue/month';
import { YearValue } from './entity/conditionvalue/yearvalue';
import { InputGroupValue } from './entity/conditionvalue/inputgroup';
import { NumberValue } from './entity/conditionvalue/numbervalue';
import { FlexibleNumberValue } from './entity/conditionvalue/flexiblenumbervalue';
import { FlexibleDateValue } from './entity/conditionvalue/flexibledatevalue';
import ResizeObserver from "resize-observer-polyfill";
import { IdService, OverLayHiddenService } from '@farris/ui-common';
export class FilterComponent {
    /**
     * @param {?} filterPanelService
     * @param {?} filterService
     * @param {?} convertorService
     * @param {?} handler
     * @param {?} cd
     * @param {?} render
     * @param {?} ngzone
     * @param {?} localeService
     * @param {?} injector
     */
    constructor(filterPanelService, filterService, convertorService, handler, cd, render, ngzone, localeService, injector) {
        this.filterPanelService = filterPanelService;
        this.filterService = filterService;
        this.convertorService = convertorService;
        this.handler = handler;
        this.cd = cd;
        this.render = render;
        this.ngzone = ngzone;
        this.localeService = localeService;
        this.injector = injector;
        this._filterList = [];
        //是否禁用
        this.disabled = false;
        this.showReminder = false;
        // 是否启用侧边栏収折-过滤条件在侧边栏显示
        this.floatFilter = true;
        // 启用自动宽度
        this._enableAutoWidth = false;
        this.localStorageKey = 'farrisSearchRecord';
        this.cla = true;
        this.query = new EventEmitter();
        this.searchChange = new EventEmitter();
        this.resetChange = new EventEmitter();
        this.clearFilter = new EventEmitter();
        this.expandFilter = new EventEmitter();
        this.packupFilter = new EventEmitter();
        this.filterResize = new EventEmitter();
        // 展开
        this.filterExtend = false;
        // 是否显示三个点
        this.filterEllipsis = false;
        // 是否显示展开收起
        this.filterExtendShow = false;
        this.filterExtendText = '展开';
        this.filterExtendIcon = 'f-icon-arrow-chevron-down';
        this.expandText = '展开';
        this.foldText = '收起';
        this.sidebarOpen = false;
        this.floatPanelOpen = false;
        this.showExpandTag = false;
        /**
         * 表单是否允许提交
         */
        this.canSubmit = false;
        /**
         * 表单是否允许提交,用于高级筛选清空后
         */
        this.advancedCanSubmit = true;
        /**
         * 默认展开项是否允许提交
         */
        this.showCanSubmit = true;
        /**
         * 是否显示清空已选
         */
        this.filledFilter = false;
        /**
         * 默认展开的筛选项
         */
        this.showFilterList = new Array();
        /**
         * 高级筛选
         */
        this.extendFilterList = new Array();
        this.extendFilterListStore = new Array();
        this.extendFilterListTemporary = new Array();
        /**
         * 已填写筛选数据
         */
        this.filledFilterList = new Array();
        /**
         * 高级筛选中已填写的
         */
        this.filledExtendFilterList = new Array();
        /** 没有填写的筛选项 */
        // unFilledFilterList:Array<QueryCondition> = new Array<QueryCondition>();
        /**
         * 高级筛选中必填项
         */
        this.extendRequiredList = new Array();
        /**
         * 默认筛选中必填项
         */
        this.showRequiredList = new Array();
        /**
         * 循环表单
         */
        this.listFilterConditions = new Array();
        /**
         * 默认展开＋高级筛选中已填写的
         */
        this.loopFilterList = new Array();
        /**
         * 用来存储setvalue前数据
         */
        this.stagListFilterConditions = new Array();
        /**
         * 显示中表单的必填项
         */
        this.requiredListFilter = [];
        this.localeIds = {
            'en': 'en',
            'zh-CHS': 'zh-CHS'
        };
        this.currentLocale = 'zh-CHS';
        this.isControlInline = true;
        this.reminderLeft = 0;
        this.floatPanelHeight = null;
        this.floatFilterIconBottom = 0;
        // 绑定大小变化响应
        this.ro = null;
        // 记录旧的宽度数据
        this.containerWidthRecord = 0;
        // 阈值
        this.distanceThreshold = 20;
        this.overLayService = null;
        if (this.injector) {
            this.currentLocale = this.injector.get(LOCALE_ID);
            this.filterHandler = this.injector.get(FILTER_HANDLER_TOKEN, null, InjectFlags.Optional);
            this.idService = this.injector.get(IdService);
        }
        this.overLayService = this.injector.get(OverLayHiddenService, null);
        if (!this.overLayService) {
            this.overLayService = new OverLayHiddenService();
        }
    }
    /**
     * @return {?}
     */
    get filterList() {
        return this._filterList;
    }
    /**
     * @param {?} filterList
     * @return {?}
     */
    set filterList(filterList) {
        this._filterList = filterList || [];
        this.initFilterList();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set enableAutoWidth(value) {
        if (value !== this._enableAutoWidth) {
            if (value) {
                this.filterEllipsis = false;
                this.filterExtendShow = false;
            }
            this._enableAutoWidth = value;
        }
    }
    /**
     * @return {?}
     */
    get enableAutoWidth() {
        return this._enableAutoWidth;
    }
    /**
     * @param {?} configs
     * @return {?}
     */
    set defaultValue(configs) {
        this._defaultValue = configs;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.setFilterValue(this._defaultValue);
        }));
    }
    /**
     * @return {?}
     */
    get defaultValue() {
        return this._defaultValue;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.filterWrapperEl = this.filterListWrapper && this.filterListWrapper.nativeElement;
        // 绑定事件
        this.bindRoEvent();
        this.foldText = this.localeService.getValue('filterPanel.fold');
        this.expandText = this.localeService.getValue('filterPanel.expand');
        this.filterExtendText = this.expandText;
        if (this.currentLocale === this.localeIds['en']) {
            this.isControlInline = false;
        }
        else {
            this.isControlInline = true;
        }
        fromEvent(window, 'resize').pipe(auditTime(50)).subscribe((/**
         * @return {?}
         */
        () => {
            this.floatPanelHeight = window.innerHeight - this.floatFilterIconBottom;
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.ro) {
            this.ro.unobserve(this.filterWrapperEl);
            this.ro = null;
        }
        if (this.floatPanel) {
            this.overLayService.destory(this.floatPanel.nativeElement);
        }
    }
    /**
     * 绑定监控大小的事件
     * @private
     * @return {?}
     */
    bindRoEvent() {
        if (!this.filterWrapper) {
            return;
        }
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            // 这样一直都绑定可能有性能问题
            this.ro = new ResizeObserver((/**
             * @param {?} entries
             * @param {?} observer
             * @return {?}
             */
            (entries, observer) => {
                /** @type {?} */
                const tempWidth = entries[0].contentRect.width;
                if (Math.abs(tempWidth - this.containerWidthRecord) >
                    this.distanceThreshold) {
                    if (!this.filterList.length)
                        return;
                    if (this.enableAutoWidth) {
                        return;
                    }
                    this.listEllipsisInit();
                    this.containerWidthRecord = tempWidth;
                }
            }));
            this.ro.observe(this.filterWrapper.nativeElement);
            // fromEvent(window, 'resize')
            //     .pipe(debounceTime(50, animationFrame))
            //     .subscribe((): void => {
            //         this.ngzone.run(() => {
            //             // console.log('resize');
            //             if (!this.filterList.length) return;
            //             if (this.enableAutoWidth) {return;}
            //             this.listEllipsisInit();
            //         });
            //     });
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // if (changes.filterList && !changes.filterList.isFirstChange()) {
        //   this.initFilterList();
        // }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * 初始化筛选项
     * @return {?}
     */
    initFilterList() {
        this.listFilterConditions = new Array();
        /** @type {?} */
        const filterDatas = this.filterService.fieldSchemasConvert(this.filterList);
        if (filterDatas && filterDatas.length) {
            this.listFilterConditions = this.convertorService.getSelectedFieldConditions(filterDatas, this.listFilterConditions);
        }
        this.stagListFilterConditions = this.listFilterConditions.map((/**
         * @param {?} o
         * @return {?}
         */
        o => (Object.assign({}, o))));
        this.filterListClassify();
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.showReminder && this.showFilterList && this.showFilterList.length) {
                this.showReminderItem = this.showFilterList[0];
                if (this.showReminderItem) {
                    /** @type {?} */
                    let filterlistItems = this.filterListWrapper && this.filterListWrapper.nativeElement.children;
                    if (filterlistItems && filterlistItems.length) {
                        /** @type {?} */
                        let showRemItem;
                        for (let i = 0; i < filterlistItems.length; i++) {
                            if (this.showReminderItem['id'] == filterlistItems[i].getAttribute('id')) {
                                showRemItem = filterlistItems[i];
                            }
                        }
                        if (showRemItem) {
                            this.reminderLeft = showRemItem.offsetLeft >= 0 ? showRemItem.offsetLeft : 0;
                        }
                    }
                }
            }
            else {
                this.showReminderItem = null;
            }
        }), 0);
        this.cd.detectChanges();
    }
    /**
     * 筛选项分类
     * @return {?}
     */
    filterListClassify() {
        this.extendFilterList = [];
        this.extendFilterListStore = [];
        this.showFilterList = [];
        this.filledFilterList = [];
        this.filledExtendFilterList = [];
        this.loopFilterList = [];
        this.extendRequiredList = [];
        this.showRequiredList = [];
        // 必填
        /** @type {?} */
        let requiredList = this.listFilterConditions.filter((/**
         * @param {?} listitem
         * @return {?}
         */
        (listitem) => {
            return listitem.control.required;
        }));
        if (requiredList && requiredList.length) {
            this.requiredListFilter = requiredList;
            this.canSubmit = this.canSubmitFilter(this.requiredListFilter);
        }
        else {
            this.requiredListFilter = [];
            this.canSubmit = true;
        }
        // 几种类型分类
        this.listFilterConditions.forEach((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            if (field.control.isExtend && field['filled']) {
                this.filledExtendFilterList.push(field);
            }
            if (field['filled']) {
                this.filledFilterList.push(field);
            }
            // else if(!field.control.isExtend){
            //   this.unFilledFilterList.push(field);
            // }
            if (field.control.isExtend) {
                this.extendFilterListStore.push(field);
            }
            else {
                this.showFilterList.push(field);
            }
        }));
        if (this.filledFilterList.length) {
            this.filledFilter = true;
        }
        else {
            this.filledFilter = false;
        }
        /** @type {?} */
        const list = this.listFilterConditions.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            return !item.control.isExtend || item['filled'];
        }));
        // this.loopFilterList = this.showFilterList.concat(this.filledExtendFilterList);
        this.loopFilterList = list ? list : [];
        this.loopFilterList.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.getValueText(item);
        }));
        this.extendFilterList = this.extendFilterListStore.map((/**
         * @param {?} o
         * @return {?}
         */
        o => (Object.assign({}, o))));
        /** @type {?} */
        const extendRequiredList = this.extendFilterList.filter((/**
         * @param {?} listitem
         * @return {?}
         */
        (listitem) => {
            return listitem.control.required;
        }));
        if (extendRequiredList && extendRequiredList.length) {
            this.extendRequiredList = extendRequiredList;
        }
        /** @type {?} */
        const showrequiredList = this.showFilterList.filter((/**
         * @param {?} listitem
         * @return {?}
         */
        (listitem) => {
            return listitem.control.required;
        }));
        if (showrequiredList && showrequiredList.length) {
            this.showRequiredList = showrequiredList;
        }
        this.showCanSubmit = this.canSubmitFilter(this.showRequiredList);
        this.advancedCanSubmit = this.canSubmitFilter(this.extendRequiredList);
        // console.log('已填写',this.filledExtendFilterList);
        // console.log('显示出来的',this.loopFilterList);
        // console.log('隐藏部分',this.extendFilterList);
        this.filterExtendShow = true;
        // 如果是支持自动宽度，就是不収折,判断涉及赋值时机
        if (!this.enableAutoWidth) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.listEllipsisInit();
            }), 0);
        }
    }
    /**
     * 已填写筛选项点击
     * @param {?} event
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    filterClick(event, data, index) {
        event.stopPropagation();
        if (this.disabled)
            return;
        if (data) {
            this.showReminderItem = null;
        }
        /** @type {?} */
        const instanceID = this.localStorageKey + '_' + data.id;
        if (data && this.currentFilterId != data.id) {
            /** @type {?} */
            const panelItem = deepCopy(data);
            this.currentFilterId = data.id;
            const { left, top, height, right } = event.currentTarget.getBoundingClientRect();
            this.filterPanelContainer = this.filterPanelService.showPanel({
                left: left,
                top: top + height + 2,
                right: right,
                item: panelItem,
                localStorageKey: instanceID
            });
            this.filterPanelContainer.hidePanel.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            e => {
                this.filterPanelService.hidePanel();
                this.filterPanelContainer = null;
                this.currentFilterId = null;
            }));
            this.filterPanelContainer.clearFilter.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            e => {
                this.clearFilter.emit(e);
            }));
            //提交弹窗内
            /** @type {?} */
            const _this = this;
            this.filterPanelContainer.submit.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            e => {
                e.filled = (e.valueText && e.valueText.length > 0) ? true : false;
                _this.loopFilterList[index] = e;
                /** @type {?} */
                let panelListIndex = _this.listFilterConditions.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    return item['id'] == e['id'];
                }));
                if (panelListIndex >= 0) {
                    _this.listFilterConditions[panelListIndex] = e;
                }
                this.searchChange.emit(this.listFilterConditions);
                this.inSetCurrentFilterConditions();
                this.filterListClassify();
                // valueText是有需要计算的，所以延后判断是否显示
                /** @type {?} */
                let findItem = _this.loopFilterList.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    return item['id'] == e['id'];
                }));
                if (findItem) {
                    findItem['filled'] = findItem.valueText && findItem.valueText.length > 0 ? true : false;
                }
                this.cd.markForCheck();
                this.submit('panelFormData', this.listFilterConditions, e);
                this.filterPanelService.hidePanel();
                this.filterPanelContainer = null;
                this.currentFilterId = null;
            }));
        }
        else {
            this.filterPanelService.hidePanel();
            this.filterPanelContainer = null;
            this.currentFilterId = null;
        }
    }
    /**
     * 清空筛选项
     * @param {?} data
     * @param {?} index
     * @param {?} event
     * @return {?}
     */
    filterClear(data, index, event) {
        event.stopPropagation();
        this.filterPanelService.hidePanel();
        this.currentFilterId = null;
        this.resetListCondition(data);
        this.filterListClassify();
        this.cd.markForCheck();
        this.searchChange.emit(this.listFilterConditions);
        this.clearFilter.emit(data);
        this.inSetCurrentFilterConditions();
        this.advancedCanSubmit = this.canSubmitFilter(this.extendRequiredList);
        this.submit('panelFormData', this.listFilterConditions);
    }
    /**
     * 展开高级筛选
     * @return {?}
     */
    advancedFilter() {
        this.showReminderItem = null;
        this.extendFilterListTemporary = deepCopy(this.extendFilterList);
        this.farrissidebar.isOpen = true;
    }
    /**
     * @return {?}
     */
    listCancel() {
        this.extendFilterList = deepCopy(this.extendFilterListTemporary);
        this.farrissidebar.isOpen = false;
        this.floatPanelOpen = false;
    }
    /**
     * 打开面板高级筛选
     * @param {?} $evnet
     * @return {?}
     */
    floatFilterOpen($evnet) {
        this.floatPanelOpen = !this.floatPanelOpen;
        if (this.floatPanelOpen) {
            this.extendFilterListTemporary = deepCopy(this.extendFilterList);
            if (!this.floatFilterIconBottom) {
                const { bottom } = ((/** @type {?} */ ($evnet.target))).getBoundingClientRect();
                this.floatFilterIconBottom = bottom + 100;
            }
            this.floatPanelHeight = window.innerHeight - this.floatFilterIconBottom;
            this.overLayService.registerMouseEvent(this.floatPanel.nativeElement, (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (this.floatPanel.nativeElement.contains(e.target)) {
                    return;
                }
                else {
                    if (e.target.nodeName === 'SPAN' && e.target.className.indexOf('f-icon-filtrate')) {
                        return;
                    }
                    /** @type {?} */
                    const cls = ['.f-datepicker-container', '.farris-timer-picker', '.farris-modal', '.f-combo-lookup', '.date-overlay-container'];
                    if (cls.find((/**
                     * @param {?} k
                     * @return {?}
                     */
                    k => e.target.closest(k)))) {
                        return;
                    }
                }
                this.floatPanelOpen = false;
                this.overLayService.destory(this.floatPanel.nativeElement);
            }));
            this.cd.detectChanges();
        }
        else {
            this.overLayService.destory(this.floatPanel.nativeElement);
        }
    }
    /**
     * 列表展示初始化
     * @return {?}
     */
    listEllipsisInit() {
        if (this.enableAutoWidth)
            return;
        // if(this.filterExtend) return;
        /** @type {?} */
        const filterMainWidth = this.filterMain.nativeElement.offsetWidth;
        this.filterToolWidth = 0;
        // filterTool = this.filterTool.nativeElement.offsetWidth;
        if (this.filterTool) {
            this.filterToolWidth = this.filterTool.nativeElement.offsetWidth;
        }
        // 筛选条件区域最大宽度
        /** @type {?} */
        let filterListW;
        if (this.filterExtend) {
            filterListW = filterMainWidth - 26;
        }
        else {
            // filterListW = filterMainWidth- 48 - this.filterToolWidth - 26;
            filterListW = filterMainWidth - 48 - this.filterToolWidth - 26;
        }
        // const filterWrapper = this.filterListWrapper.nativeElement;
        // const filterWrapperWidth = filterWrapper.offsetWidth;
        // console.log(filterWrapperWidth);
        /** @type {?} */
        const filterItems = this.filterWrapperEl ? this.filterWrapperEl.children : [];
        /** @type {?} */
        let filterItemWidth = 0;
        if (filterItems && filterItems.length) {
            for (let i = 0, len = filterItems.length; i < len; i++) {
                this.render.setStyle(filterItems[i], 'display', 'flex');
                /** @type {?} */
                let width = filterItems[i].offsetWidth;
                filterItemWidth += width + 8;
                if (filterItemWidth >= filterListW && !this.filterExtend) {
                    this.render.setStyle(filterItems[i], 'display', 'none');
                }
                else {
                    this.render.setStyle(filterItems[i], 'display', 'flex');
                }
                // console.log(filterItemWidth,filterListW,i);
            }
        }
        // if(filterItemWidth > this.filterWrapperEl.offsetWidth){
        if (filterItemWidth >= filterListW) {
            this.filterEllipsis = true;
            this.filterExtendShow = true;
        }
        else {
            this.filterEllipsis = false;
            this.filterExtendShow = false;
        }
        if (filterItems.length)
            this.filterResize.emit();
        if (!this.cd['destroyed']) {
            this.cd.detectChanges();
        }
    }
    /**
     * 筛选项展开收起切换
     * @return {?}
     */
    filterExpand() {
        this.showReminderItem = null;
        this.filterExtend = !this.filterExtend;
        if (this.filterExtend) {
            this.filterEllipsis = false;
            this.filterExtendText = this.foldText;
            this.filterExtendIcon = 'f-icon-arrow-chevron-up';
            /** @type {?} */
            const filterItems = this.filterWrapperEl.children;
            if (filterItems && filterItems.length) {
                for (let i = 0, len = filterItems.length; i < len; i++) {
                    this.render.setStyle(filterItems[i], 'display', 'flex');
                }
            }
            ;
            this.render.setStyle(this.filterWrapperEl, 'flex-wrap', 'wrap');
            this.expandFilter.emit();
            this.cd.detectChanges();
        }
        else {
            this.filterExtendText = this.expandText;
            this.filterExtendIcon = 'f-icon-arrow-chevron-down';
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.listEllipsisInit();
            }), 0);
            this.packupFilter.emit();
        }
    }
    /**
     * 高级筛选表单项搜索变化
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onSearch($event, item) {
        if (this.disabled) {
            return;
        }
        this.advancedCanSubmit = this.canSubmitFilter(this.extendRequiredList);
        // console.log(this.advancedCanSubmit,this.canSubmit);
        this.searchChange.emit({ item, conditions: this.listFilterConditions, instance: this });
    }
    /**
     * 判断是否所有必填项都填写完毕
     * @param {?} requirelist
     * @return {?}
     */
    canSubmitFilter(requirelist) {
        /** @type {?} */
        let formCanSubmit = false;
        if (!requirelist || !requirelist.length) {
            formCanSubmit = true;
            return formCanSubmit;
        }
        else {
            for (let i = 0; i < requirelist.length; i++) {
                /** @type {?} */
                const item = requirelist[i];
                if (item.control.getControlType() === ControlType.Text) {
                    /** @type {?} */
                    const tv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(tv).length < 0 || !tv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Help) {
                    /** @type {?} */
                    const shv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(shv).length === 0 || !shv.value || !shv.valueField) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.DropDown) {
                    /** @type {?} */
                    const ddv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(ddv).length === 0 || !ddv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.DateRange) {
                    /** @type {?} */
                    const drv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.DateRangeTime) {
                    /** @type {?} */
                    const drv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.MonthRange) {
                    /** @type {?} */
                    const mrv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(mrv).length === 0 || (!mrv.startTime && !mrv.endTime)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.YearRange) {
                    /** @type {?} */
                    const yrv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(yrv).length === 0 || (!yrv.startTime && !yrv.endTime)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.NumberRange) {
                    /** @type {?} */
                    const nrv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(nrv).length === 0 || (nrv.startValue === null && nrv.endValue === null)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Search) {
                    /** @type {?} */
                    const sv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(sv).length < 0 || !sv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Date) {
                    /** @type {?} */
                    const dv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(dv).length < 0 || !dv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Month) {
                    /** @type {?} */
                    const mv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(mv).length < 0 || !mv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Year) {
                    /** @type {?} */
                    const yv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(yv).length < 0 || !yv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.CheckboxGroup) {
                    /** @type {?} */
                    const cbgv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(cbgv).length === 0 || Object.keys(cbgv.value).length === 0) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Radio) {
                    /** @type {?} */
                    const radiov = ((/** @type {?} */ (item.value)));
                    if (Object.keys(radiov).length < 0 || radiov.value === '') {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.InputGroup) {
                    /** @type {?} */
                    const sv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(sv).length < 0 || !sv.textValue) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Number) {
                    /** @type {?} */
                    const nrv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(nrv).length === 0 || (nrv.value == null)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.FlexibleNumber) {
                    /** @type {?} */
                    const flexv = ((/** @type {?} */ (item.value)));
                    if (flexv.single) {
                        if (Object.keys(flexv).length < 0 || flexv.value == null) {
                            formCanSubmit = false;
                            return false;
                        }
                        else {
                            formCanSubmit = true;
                        }
                    }
                    else {
                        if (Object.keys(flexv).length === 0 || (flexv.startValue == null && flexv.endValue == null)) {
                            formCanSubmit = false;
                            return false;
                        }
                        else {
                            formCanSubmit = true;
                        }
                    }
                }
                else if (item.control.getControlType() === ControlType.FlexibleDate) {
                    /** @type {?} */
                    const flexdatev = ((/** @type {?} */ (item.value)));
                    if (flexdatev.single) {
                        if (Object.keys(flexdatev).length < 0 || !flexdatev.value) {
                            formCanSubmit = false;
                            return false;
                        }
                        else {
                            formCanSubmit = true;
                        }
                    }
                    else {
                        if (Object.keys(flexdatev).length === 0 || (!flexdatev.startValue && !flexdatev.endValue)) {
                            formCanSubmit = false;
                            return false;
                        }
                        else {
                            formCanSubmit = true;
                        }
                    }
                }
            }
            return formCanSubmit;
        }
    }
    /**
     * 高级筛选点击确定提交
     * @return {?}
     */
    listSearch() {
        if (this.disabled) {
            return;
        }
        ;
        this.extendFilterList.forEach((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            if ((field.control.getControlType() != ControlType.Date)
                && (field.control.getControlType() != ControlType.DateRange)
                && (field.control.getControlType() != ControlType.DateRangeTime)
                && (field.control.getControlType() != ControlType.FlexibleDate)) {
                if (!field.valueText) {
                    field.valueText = field.value.getValueText();
                }
            }
            // if(field.control.getControlType() == ControlType.Radio){
            //   console.log(field);
            // }
            field.filled = (field.valueText && field.valueText.length > 0) ? true : false;
            if (field.control.getControlType() == ControlType.Text) {
                /** @type {?} */
                let farrisSearchRecord = field.valueText;
                /** @type {?} */
                let farrisSearchRecordArray = [];
                /** @type {?} */
                let storagelabelCode = field.labelCode;
                /** @type {?} */
                let filterPanelArray = JSON.parse(localStorage.getItem(this.localStorageKey));
                if (Array.isArray(filterPanelArray)) {
                    filterPanelArray = null;
                }
                if (!filterPanelArray || !filterPanelArray[storagelabelCode] || !filterPanelArray[storagelabelCode].length && farrisSearchRecord && farrisSearchRecord.length) {
                    farrisSearchRecordArray.push(farrisSearchRecord);
                }
                else {
                    farrisSearchRecordArray = filterPanelArray[storagelabelCode];
                    /** @type {?} */
                    let index = filterPanelArray[storagelabelCode].indexOf(farrisSearchRecord);
                    if (index < 0 && farrisSearchRecord && farrisSearchRecord.length) {
                        farrisSearchRecordArray.unshift(farrisSearchRecord);
                    }
                    farrisSearchRecordArray = farrisSearchRecordArray.slice(0, 6);
                }
                if (filterPanelArray == null)
                    filterPanelArray = {};
                filterPanelArray[storagelabelCode] = farrisSearchRecordArray;
                localStorage.setItem(this.localStorageKey, JSON.stringify(filterPanelArray));
            }
        }));
        //判断高级筛选里是否已修改
        /** @type {?} */
        let extendAmendedList = this.extendFilterList.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => { return item.filled; }));
        if (extendAmendedList && extendAmendedList.length) {
            this.showExpandTag = true;
        }
        else {
            this.showExpandTag = false;
        }
        this.extendFilterListStore = this.extendFilterList.map((/**
         * @param {?} o
         * @return {?}
         */
        o => (Object.assign({}, o))));
        this.extendFilterListStore.forEach((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            /** @type {?} */
            let extendListIndex = this.listFilterConditions.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                return item['id'] == field['id'];
            }));
            if (extendListIndex >= 0) {
                this.listFilterConditions[extendListIndex] = field;
            }
        }));
        // console.log(this.listFilterConditions);
        this.searchChange.emit(this.listFilterConditions);
        this.inSetCurrentFilterConditions();
        this.filterListClassify();
        this.farrissidebar.isOpen = false;
        this.floatPanelOpen = false;
        this.cd.markForCheck();
        this.submit('extendFormData', this.listFilterConditions);
    }
    /**
     * 提交表单
     * @param {?} type
     * @param {?} filterlist
     * @param {?=} filterItem
     * @return {?}
     */
    submit(type, filterlist, filterItem = null) {
        if (this.disabled || !this.showCanSubmit || !this.advancedCanSubmit) {
            return;
        }
        /** @type {?} */
        const queryList = this.handler.setFilterConditions(filterlist);
        this.query.emit({ type: type, data: JSON.stringify(queryList), filterItem });
    }
    /**
     * 设置筛选初始值
     * @param {?} fieldConfigs
     * @return {?}
     */
    setFilterValue(fieldConfigs) {
        this.listFilterConditions = this.stagListFilterConditions.map((/**
         * @param {?} o
         * @return {?}
         */
        o => (Object.assign({}, o))));
        if (this.listFilterConditions && this.listFilterConditions.length) {
            this.setValues(this.listFilterConditions, fieldConfigs);
            /** @type {?} */
            let listFilter = this.listFilterConditions.map((/**
             * @param {?} o
             * @return {?}
             */
            o => (Object.assign({}, o))));
            this.listFilterConditions = listFilter;
            this.filterListClassify();
            this.searchChange.emit(this.listFilterConditions);
            this.inSetCurrentFilterConditions();
            // this.listSearch();
            this.cd.detectChanges();
            this.cd.markForCheck();
            this.canSubmit = this.canSubmitFilter(this.requiredListFilter);
            if (!this.canSubmit) {
                return;
            }
            this.submit('showFormData', this.listFilterConditions);
        }
    }
    /**
     * 清空筛选某一项
     * @param {?} labelCode 字段编号唯一标识
     * @return {?}
     */
    resetFilterValue(labelCode) {
        if (labelCode && this.listFilterConditions && this.listFilterConditions.length) {
            /** @type {?} */
            let resetCondition = this.listFilterConditions.find((/**
             * @param {?} conditions
             * @return {?}
             */
            (conditions) => {
                return conditions['fieldCode'] === labelCode;
            }));
            if (resetCondition) {
                this.resetListCondition(resetCondition);
                this.filterListClassify();
                this.cd.markForCheck();
                this.searchChange.emit(this.listFilterConditions);
                this.inSetCurrentFilterConditions();
                this.advancedCanSubmit = this.canSubmitFilter(this.extendRequiredList);
                this.submit('panelFormData', this.listFilterConditions);
            }
        }
    }
    // 设置value
    /**
     * @param {?} conditions
     * @param {?} fieldConfigs
     * @return {?}
     */
    setValues(conditions, fieldConfigs) {
        /** @type {?} */
        let qc;
        /** @type {?} */
        let controlType;
        if (fieldConfigs && fieldConfigs.length) {
            fieldConfigs.forEach((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                qc = conditions.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.fieldCode == v.labelCode));
                if (qc) {
                    controlType = this.getControlType(qc);
                    qc.value = this.filterService.setValues(controlType, v.value, qc.control.single);
                    qc.valueText = qc.value.getValueText(qc.control);
                    if (v.value) {
                        qc.filled = true;
                    }
                }
            }));
        }
    }
    /**
     * @param {?} fieldName
     * @return {?}
     */
    getValue(fieldName) {
        /** @type {?} */
        const queryList = this.handler.setFilterConditions(this.listFilterConditions);
        /** @type {?} */
        const item = queryList.find((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n['FilterField'] === fieldName));
        if (item) {
            return item.value;
        }
        return undefined;
    }
    /**
     * 获取控件类型
     * @param {?} selectedFieldCondition
     * @return {?}
     */
    getControlType(selectedFieldCondition) {
        if (selectedFieldCondition) {
            if (selectedFieldCondition.control.getControlType() == ControlType.Text) {
                return 'input';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Search) {
                return 'search';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Date) {
                return 'date';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Month) {
                return 'month';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Year) {
                return 'year';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.DateRange) {
                return 'daterange';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.MonthRange) {
                return 'monthrange';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.YearRange) {
                return 'yearrange';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.DateRangeTime) {
                return 'daterangetime';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.DropDown) {
                return 'dropdown';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.NumberRange) {
                return 'number';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Help) {
                return 'help';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.CheckboxGroup) {
                return 'checkboxgroup';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Radio) {
                return 'radio';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.InputGroup) {
                return 'input-group';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Number) {
                return 'singlenumber';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.FlexibleNumber) {
                return 'flexiblenumber';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.FlexibleDate) {
                return 'flexibledate';
            }
            else {
                return 'input';
            }
        }
    }
    /**
     * 更新上下文中筛选数据
     * @return {?}
     */
    inSetCurrentFilterConditions() {
        if (this.filterHandler) {
            this.filterHandler.setCurrentFilterConditions(this.listFilterConditions);
        }
    }
    /**
     * 清空条件
     * @param {?} listFilterCondition
     * @return {?}
     */
    resetListCondition(listFilterCondition) {
        if (listFilterCondition.control.getControlType() == ControlType.Text) {
            listFilterCondition.value = new TextValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Search) {
            listFilterCondition.value = new SearchValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Date) {
            listFilterCondition.value = new DateValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Month) {
            listFilterCondition.value = new MonthValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Year) {
            listFilterCondition.value = new YearValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.DateRange) {
            listFilterCondition.value = new DateRangeValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.MonthRange) {
            listFilterCondition.value = new MonthRangeValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.YearRange) {
            listFilterCondition.value = new YearRangeValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.DropDown) {
            listFilterCondition.value = new DropDownListValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.NumberRange) {
            listFilterCondition.value = new NumberRangeValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Help) {
            listFilterCondition.value = new HelpValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.CheckboxGroup) {
            listFilterCondition.value = new CheckboxGroupValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Radio) {
            listFilterCondition.value = new RadioGroupValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.InputGroup) {
            listFilterCondition.value = new InputGroupValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.Number) {
            listFilterCondition.value = new NumberValue();
        }
        else if (listFilterCondition.control.getControlType() == ControlType.FlexibleNumber) {
            listFilterCondition.value = new FlexibleNumberValue({ startValue: null, endValue: null, value: null }, listFilterCondition.control.single);
        }
        else if (listFilterCondition.control.getControlType() == ControlType.FlexibleDate) {
            listFilterCondition.value = new FlexibleDateValue({ startValue: null, endValue: null, value: null }, listFilterCondition.control.single);
        }
        else {
            listFilterCondition.value = new TextValue();
        }
        listFilterCondition.valueText = '';
        listFilterCondition.filled = false;
        // return listFilterCondition;
    }
    /**
     * @return {?}
     */
    resetSearch() {
        if (this.disabled) {
            return;
        }
        if (this.listFilterConditions && this.listFilterConditions.length) {
            this.listFilterConditions.forEach((/**
             * @param {?} listFilterCondition
             * @return {?}
             */
            listFilterCondition => {
                this.resetListCondition(listFilterCondition);
            }));
            this.listFilterConditions = this.listFilterConditions.map((/**
             * @param {?} o
             * @return {?}
             */
            o => (Object.assign({}, o))));
            this.filterListClassify();
            this.showCanSubmit = true;
            this.submit('panelFormData', this.listFilterConditions);
        }
        this.resetChange.emit();
        this.showExpandTag = false;
    }
    /**
     * 高级筛选清空筛选
     * @return {?}
     */
    resetAdvancedSearch() {
        if (this.extendFilterList && this.extendFilterList.length) {
            this.extendFilterList.forEach((/**
             * @param {?} listFilterCondition
             * @return {?}
             */
            listFilterCondition => {
                this.resetListCondition(listFilterCondition);
            }));
            this.extendFilterList = this.extendFilterList.map((/**
             * @param {?} o
             * @return {?}
             */
            o => (Object.assign({}, o))));
        }
        if (this.extendRequiredList.length) {
            this.advancedCanSubmit = false;
        }
    }
    /**
     * valueText 特殊类型处理
     * @param {?} item
     * @return {?}
     */
    getValueText(item) {
        // console.log(item.fieldName,item.control.getControlType());
        if (item.control.getControlType() === ControlType.DropDown) {
            /** @type {?} */
            const enumValue = ((/** @type {?} */ (item.control))).enumValues;
            /** @type {?} */
            const value = ((/** @type {?} */ (item.value))).value;
            if (enumValue && enumValue.length) {
                /** @type {?} */
                const texts = enumValue.find((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    return val['value'] == value;
                }));
                if (texts) {
                    item.valueText = texts['name'];
                }
            }
        }
        else if (item.control.getControlType() === ControlType.CheckboxGroup) {
            /** @type {?} */
            const enumValue = ((/** @type {?} */ (item.control))).enumValues;
            /** @type {?} */
            const value = ((/** @type {?} */ (item.value))).value;
            if (enumValue && enumValue.length && value && value['length'] > 0) {
                if (item.control.boolcheck) {
                    item.valueText = value[0].toString();
                    if (item.valueText == 'true') {
                        item.valueText = this.localeService.getValue('text.yes');
                    }
                    else if (item.valueText == 'false') {
                        item.valueText = this.localeService.getValue('text.no');
                    }
                }
                else {
                    /** @type {?} */
                    let texts = [];
                    for (let i = 0; i <= value['length']; i++) {
                        /** @type {?} */
                        const enums = enumValue.find((/**
                         * @param {?} val
                         * @return {?}
                         */
                        val => {
                            return val['value'] == value[i];
                        }));
                        if (enums) {
                            texts.push(enums['name']);
                        }
                    }
                    item.valueText = texts.join(',');
                }
            }
        }
        else if (item.control.getControlType() === ControlType.Radio) {
            /** @type {?} */
            const enumValue = ((/** @type {?} */ (item.control))).enumValues;
            /** @type {?} */
            const value = ((/** @type {?} */ (item.value))).value;
            if (enumValue && enumValue.length) {
                /** @type {?} */
                const texts = enumValue.find((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    return val['value'] == value;
                }));
                if (texts) {
                    item.valueText = texts['name'];
                    if (item.valueText == 'true') {
                        item.valueText = this.localeService.getValue('text.yes');
                    }
                    else if (item.valueText == 'false') {
                        item.valueText = this.localeService.getValue('text.no');
                    }
                }
            }
        }
        else if (item.control.getControlType() == ControlType.InputGroup) {
            item.valueText = item.value.getValueText();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    buildSmartHelpKey(value) {
        if (this.idService) {
            /** @type {?} */
            let prefix = '';
            if (location.hash) {
                /** @type {?} */
                const pathArr = location.hash.split('?');
                prefix = pathArr ? pathArr[0] : '';
            }
            else {
                /** @type {?} */
                const pathArr = location.pathname.split('/');
                prefix = pathArr ? pathArr[pathArr.length - 1] : '';
            }
            return this.idService.encrypt(prefix + '/list-filter/' + value);
        }
        else {
            return 'list-filter/' + value;
        }
    }
}
FilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-filter',
                template: "<div class=\"f-filter-wrapper\" #filterWrapper [style.display]=\"filterList&&filterList.length ? '': 'none'\">\r\n    <div class=\"f-filter-wrapper-inner f-utils-fill\">\r\n        <div class=\"f-filter-main f-utils-fill\" #filterMain>\r\n            <div class=\"f-filter-list-wrapper\" #listWrapper>\r\n                <div class=\"f-filter-list\"\r\n                [ngClass]=\"{'f-filter-list-extend': filterExtend && filterExtendShow}\"\r\n                 #filterListWrapper>\r\n                    <div class=\"f-filter-item\" \r\n                        *ngFor=\"let data of loopFilterList;let index = index;let last = last;let first = first;\"\r\n                        [ngClass]=\"{'f-filter-item-actived': data.filled,'f-filter-item-last':last,'f-filter-item-edit': data.id == currentFilterId}\"\r\n                        [id]=\"data['id']\"\r\n                        (click)=\"filterClick($event,data,index)\"\r\n                        >\r\n                            <div class=\"f-filter-item-inner\"\r\n                                farrisTooltip \r\n                                [showTip]=\"data.id !== currentFilterId && data.filled && data.valueText\" \r\n                                [placement]=\"'bottom'\" \r\n                                [content]=\"data.valueText\"\r\n                            >\r\n                                <span class=\"f-filter-item-required text-danger\" *ngIf=\"data.control.required\">*</span>\r\n                                <span class=\"f-filter-item-text\">\r\n                                    {{data.fieldName}}\r\n                                </span>\r\n                                <span class=\"f-filter-item-tip\" *ngIf=\"data.filled&&data.valueText\">\uFF1A</span>\r\n                                <span class=\"f-filter-item-content\" *ngIf=\"data.filled&&data.valueText\" >{{data.valueText}}</span>\r\n                                <!--  -->\r\n                                <span class=\"f-filter-item-arrow f-icon f-icon-arrow-chevron-down\"></span>\r\n                            </div>\r\n                            <span class=\"f-filter-item-clear\" *ngIf=\"!disabled&&data.filled&&data.valueText && data.control.enableClear\" (click)=\"filterClear(data,index,$event)\">\r\n                                <span class=\"f-icon f-icon-close-circle\"></span>\r\n                            </span>\r\n                    </div>                 \r\n                    <div class=\"f-filter-toolbars\" *ngIf=\"filterExtend\">\r\n                        <button class=\"btn btn-link\" (click)=\"advancedFilter()\" *ngIf=\"floatFilter && extendFilterList && extendFilterList.length > 0\">{{ 'filterPanel.advancedFilter' | locale }}</button>\r\n                        <button class=\"btn btn-link\" (click)=\"resetSearch()\" *ngIf=\"!showReminder && filledFilter\">{{ 'filterPanel.clear' | locale }}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"f-filter-list-ellipsis\" *ngIf=\"filterEllipsis && !filterExtend && filterExtendShow\" (click)=\"filterExpand()\">...</div>\r\n            <div class=\"f-filter-toolbars\" #filterTool *ngIf=\"!filterExtend\">\r\n                <button class=\"btn btn-link\" (click)=\"advancedFilter()\" *ngIf=\"floatFilter && extendFilterList && extendFilterList.length > 0\">{{ 'filterPanel.advancedFilter' | locale }}</button>\r\n                <button class=\"btn btn-link\" (click)=\"resetSearch()\" *ngIf=\"!showReminder && filledFilter\">{{ 'filterPanel.clear' | locale }}</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"f-filter-extend-btn\" (click)=\"filterExpand()\" *ngIf=\"filterExtendShow\">\r\n            <button class=\"btn btn-link\">\r\n                <span class=\"extend-btn-text\">{{filterExtendText}}</span>\r\n                <span [class]=\"'extend-btn-arrow f-icon '+filterExtendIcon\"></span>\r\n            </button>\r\n        </div>\r\n        <div class=\"f-filter-extend-btn-advanced\" *ngIf=\"!floatFilter && extendFilterList && extendFilterList.length > 0\" [class.active]=\"floatPanelOpen\" (click)=\"floatFilterOpen($event)\">\r\n            <span class=\"f-icon f-icon-filtrate\"></span>\r\n            <span class=\"filter-expand-tag\" *ngIf=\"showExpandTag\"></span>\r\n        </div>\r\n    </div>\r\n    <div class=\"f-filter-inputs-extend position-absolute\" *ngIf=\"!floatFilter\" [hidden]=\"!floatPanelOpen\" #floatPanel>\r\n        <div class=\"f-filter-typelist-arrow\"></div>\r\n        <div class=\"f-filter-inputs-extend-list farris-form farris-form-auto\" [ngClass]=\"{'farris-form-controls-inline':isControlInline}\" >\r\n            <fieldset class=\"f-section-formgroup\" [style.maxHeight.px]=\"floatPanelHeight\" style=\"overflow:auto\">\r\n                <div class=\"f-section-formgroup-inputs\">\r\n                  <div class=\"col-12\">\r\n                    <ng-container *ngFor=\"let item of extendFilterList\">\r\n                        <div class=\"filter-input-list farris-group-wrap\">\r\n                            <ng-container [ngTemplateOutlet]=\"filterInputTemplate\" [ngTemplateOutletContext]=\"{ item: item }\">\r\n                            </ng-container>\r\n                        </div>\r\n                    </ng-container>\r\n                  </div>\r\n                </div>\r\n            </fieldset>\r\n          <div class=\"f-filter-form-btns d-flex\" style=\"justify-content: space-between\">\r\n            <button class=\"btn btn-link\" (click)=\"resetAdvancedSearch()\">{{ 'filterPanel.empty' | locale }}</button>\r\n            <!-- bugNum:456508 -->\r\n            <div>\r\n                <button type=\"button\" class=\"btn btn-secondary\" (click)=\"listCancel()\">{{ 'filterPanel.cancel' | locale }}</button>\r\n                <button type=\"button\" class=\"f-sidebar-filter-btn-confirm btn btn-primary\" [ngClass]=\"{'disabled': disabled}\" (click)=\"listSearch()\">{{ 'filterPanel.confirm' | locale }}</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-filter-item-reminder\" *ngIf=\"showReminder && showReminderItem\" [ngStyle]=\"{'left': reminderLeft+'px'}\">\r\n        <span class=\"reminder-arrow\"></span>\r\n        <div class=\"reminder-inner\">\r\n            <span class=\"f-icon f-icon-help-01\"></span>\r\n            <span class=\"reminder-text\">{{ 'filterPanel.pleaseInput' | locale }}<span>{{showReminderItem.fieldName}}</span></span>\r\n        </div>\r\n    </div>\r\n</div>\r\n<farris-sidebar [title]=\"'filterPanel.advancedFilter' | locale\" #farrissidebar [resizeable]=\"true\" [mainCls]=\"'f-sidebar-filter-main'\"\r\n    [showEntry]=\"false\" [showHeader]=\"true\" [showFooter]=\"true\" [maskable]=\"true\" [maskClosable]=\"false\"\r\n    [showClose]=\"false\" [width]=\"468\" [isOpen]=\"sidebarOpen\" *ngIf=\"extendFilterList && extendFilterList.length > 0\">\r\n    <ng-template farrisSidebarToolbar></ng-template>\r\n    <ng-template farrisSidebarContent [contentCls]=\"'f-sidebar-filter-content'\">\r\n        <div class=\"f-sidebar-filter-list farris-form\" [ngClass]=\"{'farris-form-controls-inline':isControlInline}\">\r\n            <div class=\"filter-list-item farris-group-wrap\" *ngFor=\"let item of extendFilterList\">\r\n                <ng-container [ngTemplateOutlet]=\"filterInputTemplate\" [ngTemplateOutletContext]=\"{ item: item }\">\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n    </ng-template>\r\n    <ng-template farrisSidebarFooter [footerCls]=\"'f-sidebar-filter-footer'\">\r\n        <div class=\"f-sidebar-filter-clear\">\r\n            <button class=\"btn btn-link\" [class.disabled]=\"disabled\" [disabled]=\"disabled\" (click)=\"resetAdvancedSearch()\">{{ 'filterPanel.empty' | locale }}</button>\r\n        </div>\r\n        <div class=\"f-sidebar-filter-btns\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"listCancel()\">{{ 'filterPanel.cancel' | locale }}</button>\r\n            <button type=\"button\" class=\"f-sidebar-filter-btn-confirm btn btn-primary\" [class.disabled]=\"disabled\" [disabled]=\"disabled\" (click)=\"listSearch()\">{{ 'filterPanel.confirm' | locale }}</button>\r\n        </div>\r\n    </ng-template>\r\n</farris-sidebar>\r\n\r\n<ng-template #filterInputTemplate let-item=\"item\">\r\n    <ng-container [ngSwitch]=\"item | controlType\">\r\n        <div class=\"filter-input-item filter-type-input\" *ngSwitchCase=\"'input'\">\r\n            <app-filter-input [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-input>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-search\" *ngSwitchCase=\"'search'\">\r\n            <app-filter-search [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-search>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'date'\">\r\n            <app-filter-date [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-date>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-year\" *ngSwitchCase=\"'year'\">\r\n            <app-filter-date [item]=\"item\" [disabled]=\"disabled\" [showType]=\"'3'\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-date>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-month\" *ngSwitchCase=\"'month'\">\r\n            <app-filter-date [item]=\"item\" [disabled]=\"disabled\" [showType]=\"'2'\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-date>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'daterange'\">\r\n            <app-filter-daterange [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'daterangetime'\">\r\n            <app-filter-daterange [item]=\"item\" [disabled]=\"disabled\" [showTime]=\"true\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-monthrange\" *ngSwitchCase=\"'monthrange'\">\r\n            <app-filter-daterange [item]=\"item\" [disabled]=\"disabled\" [showType]=\"'2'\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-yearrange\" *ngSwitchCase=\"'yearrange'\">\r\n            <app-filter-daterange [item]=\"item\" [disabled]=\"disabled\" [showType]=\"'3'\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-dropdown\" *ngSwitchCase=\"'dropdown'\">\r\n            <app-filter-dropdown [item]=\"item\" [disabled]=\"disabled\" [enableClear]=\"item?.control?.enableClear\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-dropdown>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-number\" *ngSwitchCase=\"'number'\">\r\n            <app-filter-number [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-number>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-single-number\" *ngSwitchCase=\"'singlenumber'\">\r\n            <app-filter-single-number [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-single-number>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-help\" *ngSwitchCase=\"'help'\">\r\n            <app-filter-help [item]=\"item\" [disabled]=\"disabled\" [hostRef]=\"this\" [instanceId]=\"buildSmartHelpKey(item.fieldCode)\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-help>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-checkboxgroup\" *ngSwitchCase=\"'checkboxgroup'\">\r\n            <app-filter-checkbox [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-checkbox>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-radio\" *ngSwitchCase=\"'radio'\">\r\n            <app-filter-radio [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-radio>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-input-group\" *ngSwitchCase=\"'input-group'\">\r\n            <app-filter-inputgroup [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-inputgroup>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-flexiblenumbe\" *ngSwitchCase=\"'flexiblenumber'\">\r\n            <app-filter-flexiblenumber [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-flexiblenumber>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-flexiblenumbe\" *ngSwitchCase=\"'flexibledate'\">\r\n            <app-filter-flexibledate [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-flexibledate>\r\n        </div>\r\n        <!-- <div class=\"filter-input-item filter-type-boolcheckbox\" *ngSwitchCase=\"'bool-check'\">\r\n            <app-filter-checkbox [item]=\"item\" [disabled]=\"disabled\" [boolcheck]=\"true\"\r\n            (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n            style=\"white-space: nowrap;\"></app-filter-checkbox>\r\n        </div> -->\r\n        <div class=\"filter-input-item filter-type-default\" *ngSwitchDefault>\r\n            <app-filter-input [item]=\"item\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-input>\r\n        </div>\r\n    </ng-container>\r\n</ng-template>",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    FilterPanelService
                ]
            }] }
];
/** @nocollapse */
FilterComponent.ctorParameters = () => [
    { type: FilterPanelService },
    { type: FilterService },
    { type: ConvertorService },
    { type: QuerySolutionService },
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: NgZone },
    { type: LocaleService },
    { type: Injector, decorators: [{ type: Optional }] }
];
FilterComponent.propDecorators = {
    filterList: [{ type: Input }],
    disabled: [{ type: Input }],
    showReminder: [{ type: Input }],
    floatFilter: [{ type: Input }],
    enableAutoWidth: [{ type: Input }],
    localStorageKey: [{ type: Input }],
    defaultValue: [{ type: Input }],
    cla: [{ type: HostBinding, args: ['class.f-filter',] }],
    query: [{ type: Output }],
    searchChange: [{ type: Output }],
    resetChange: [{ type: Output }],
    clearFilter: [{ type: Output }],
    expandFilter: [{ type: Output }],
    packupFilter: [{ type: Output }],
    filterResize: [{ type: Output }],
    filterMain: [{ type: ViewChild, args: ['filterMain',] }],
    filterTool: [{ type: ViewChild, args: ['filterTool',] }],
    filterWrapper: [{ type: ViewChild, args: ['filterWrapper',] }],
    farrissidebar: [{ type: ViewChild, args: ['farrissidebar',] }],
    listWrapper: [{ type: ViewChild, args: ['listWrapper',] }],
    filterListWrapper: [{ type: ViewChild, args: ['filterListWrapper',] }],
    floatPanel: [{ type: ViewChild, args: ['floatPanel',] }]
};
if (false) {
    /** @type {?} */
    FilterComponent.prototype._filterList;
    /** @type {?} */
    FilterComponent.prototype.disabled;
    /** @type {?} */
    FilterComponent.prototype.showReminder;
    /** @type {?} */
    FilterComponent.prototype.floatFilter;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype._enableAutoWidth;
    /** @type {?} */
    FilterComponent.prototype.localStorageKey;
    /** @type {?} */
    FilterComponent.prototype._defaultValue;
    /** @type {?} */
    FilterComponent.prototype.cla;
    /** @type {?} */
    FilterComponent.prototype.query;
    /** @type {?} */
    FilterComponent.prototype.searchChange;
    /** @type {?} */
    FilterComponent.prototype.resetChange;
    /** @type {?} */
    FilterComponent.prototype.clearFilter;
    /** @type {?} */
    FilterComponent.prototype.expandFilter;
    /** @type {?} */
    FilterComponent.prototype.packupFilter;
    /** @type {?} */
    FilterComponent.prototype.filterResize;
    /** @type {?} */
    FilterComponent.prototype.filterMain;
    /** @type {?} */
    FilterComponent.prototype.filterTool;
    /** @type {?} */
    FilterComponent.prototype.filterWrapper;
    /** @type {?} */
    FilterComponent.prototype.farrissidebar;
    /** @type {?} */
    FilterComponent.prototype.listWrapper;
    /** @type {?} */
    FilterComponent.prototype.filterListWrapper;
    /** @type {?} */
    FilterComponent.prototype.floatPanel;
    /** @type {?} */
    FilterComponent.prototype.currentFilterId;
    /** @type {?} */
    FilterComponent.prototype.filterExtend;
    /** @type {?} */
    FilterComponent.prototype.filterEllipsis;
    /** @type {?} */
    FilterComponent.prototype.filterExtendShow;
    /** @type {?} */
    FilterComponent.prototype.filterExtendText;
    /** @type {?} */
    FilterComponent.prototype.filterExtendIcon;
    /** @type {?} */
    FilterComponent.prototype.expandText;
    /** @type {?} */
    FilterComponent.prototype.foldText;
    /** @type {?} */
    FilterComponent.prototype.filterWrapperEl;
    /** @type {?} */
    FilterComponent.prototype.filterToolWidth;
    /** @type {?} */
    FilterComponent.prototype.sidebarOpen;
    /** @type {?} */
    FilterComponent.prototype.floatPanelOpen;
    /** @type {?} */
    FilterComponent.prototype.showExpandTag;
    /**
     * 表单是否允许提交
     * @type {?}
     */
    FilterComponent.prototype.canSubmit;
    /**
     * 表单是否允许提交,用于高级筛选清空后
     * @type {?}
     */
    FilterComponent.prototype.advancedCanSubmit;
    /**
     * 默认展开项是否允许提交
     * @type {?}
     */
    FilterComponent.prototype.showCanSubmit;
    /**
     * 是否显示清空已选
     * @type {?}
     */
    FilterComponent.prototype.filledFilter;
    /**
     * 默认展开的筛选项
     * @type {?}
     */
    FilterComponent.prototype.showFilterList;
    /**
     * 高级筛选
     * @type {?}
     */
    FilterComponent.prototype.extendFilterList;
    /** @type {?} */
    FilterComponent.prototype.extendFilterListStore;
    /** @type {?} */
    FilterComponent.prototype.extendFilterListTemporary;
    /**
     * 已填写筛选数据
     * @type {?}
     */
    FilterComponent.prototype.filledFilterList;
    /**
     * 高级筛选中已填写的
     * @type {?}
     */
    FilterComponent.prototype.filledExtendFilterList;
    /**
     * 高级筛选中必填项
     * @type {?}
     */
    FilterComponent.prototype.extendRequiredList;
    /**
     * 默认筛选中必填项
     * @type {?}
     */
    FilterComponent.prototype.showRequiredList;
    /**
     * 循环表单
     * @type {?}
     */
    FilterComponent.prototype.listFilterConditions;
    /**
     * 默认展开＋高级筛选中已填写的
     * @type {?}
     */
    FilterComponent.prototype.loopFilterList;
    /**
     * 用来存储setvalue前数据
     * @type {?}
     */
    FilterComponent.prototype.stagListFilterConditions;
    /**
     * 显示中表单的必填项
     * @type {?}
     */
    FilterComponent.prototype.requiredListFilter;
    /** @type {?} */
    FilterComponent.prototype.localeIds;
    /** @type {?} */
    FilterComponent.prototype.currentLocale;
    /** @type {?} */
    FilterComponent.prototype.isControlInline;
    /**
     * 组件服务接口
     * @type {?}
     */
    FilterComponent.prototype.filterHandler;
    /** @type {?} */
    FilterComponent.prototype.filterPanelContainer;
    /** @type {?} */
    FilterComponent.prototype.showReminderItem;
    /** @type {?} */
    FilterComponent.prototype.reminderLeft;
    /** @type {?} */
    FilterComponent.prototype.floatPanelHeight;
    /** @type {?} */
    FilterComponent.prototype.floatFilterIconBottom;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.containerWidthRecord;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.distanceThreshold;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.idService;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.overLayService;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.filterPanelService;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.convertorService;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.handler;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.render;
    /** @type {?} */
    FilterComponent.prototype.ngzone;
    /** @type {?} */
    FilterComponent.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    FilterComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmlsdGVyLyIsInNvdXJjZXMiOlsibGliL2ZpbHRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQVUsS0FBSyxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxVQUFVLEVBQWlCLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQ3ZILFlBQVksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFDaEYsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNqQyxPQUFPLEVBQUUsU0FBUyxFQUF3QixNQUFNLGdCQUFnQixDQUFDO0FBRWpFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTVELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVuRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUM5RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDOUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDOUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdDQUF3QyxDQUFD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LHlDQUFvRTs7Ozs7SUFFcEUsMkNBQXNFOztJQUN0RSxnREFBMkU7O0lBQzNFLG9EQUErRTs7Ozs7SUFFL0UsMkNBQXNFOzs7OztJQUV0RSxpREFBNEU7Ozs7O0lBSTVFLDZDQUF3RTs7Ozs7SUFFeEUsMkNBQXNFOzs7OztJQUV0RSwrQ0FBMEU7Ozs7O0lBRTFFLHlDQUFvRTs7Ozs7SUFFcEUsbURBQThFOzs7OztJQUU5RSw2Q0FBK0M7O0lBRS9DLG9DQUdFOztJQUNGLHdDQUF5Qjs7SUFDekIsMENBQXVCOzs7OztJQUl2Qix3Q0FBNkI7O0lBQzdCLCtDQUFxQjs7SUFFckIsMkNBQWlDOztJQUNqQyx1Q0FBaUI7O0lBRWpCLDJDQUF3Qjs7SUFDeEIsZ0RBQTBCOzs7OztJQUUxQiw2QkFBeUM7Ozs7O0lBRXpDLCtDQUFpQzs7Ozs7SUFFakMsNENBQStCOzs7OztJQUUvQixvQ0FBNkI7Ozs7O0lBQzdCLHlDQUFvRDs7Ozs7SUFFaEQsNkNBQThDOzs7OztJQUM5Qyx3Q0FBb0M7Ozs7O0lBQ3BDLDJDQUEwQzs7Ozs7SUFDMUMsa0NBQXFDOzs7OztJQUNyQyw2QkFBNkI7Ozs7O0lBQzdCLGlDQUF5Qjs7SUFDekIsaUNBQXFCOztJQUNyQix3Q0FBbUM7Ozs7O0lBQ25DLG1DQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIFZpZXdDaGlsZCwgVmlld0VuY2Fwc3VsYXRpb24sIEVsZW1lbnRSZWYsIEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdG9yUmVmLCBSZW5kZXJlcjIsIE5nWm9uZSxcclxuICAgIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBJbmplY3RvciwgT3B0aW9uYWwsIExPQ0FMRV9JRCwgSW5qZWN0RmxhZ3MsIEhvc3RCaW5kaW5nLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIE9uRGVzdHJveVxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBmcm9tRXZlbnQgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgYXVkaXRUaW1lLCBkZWJvdW5jZVRpbWUsIGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgYW5pbWF0aW9uRnJhbWUgfSBmcm9tICdyeGpzL2ludGVybmFsL3NjaGVkdWxlci9hbmltYXRpb25GcmFtZSc7XHJcbmltcG9ydCB7IEZhcnJpc1NpZGViYXJDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLXNpZGViYXInO1xyXG5cclxuaW1wb3J0IHsgTG9jYWxlU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9jYWxlJztcclxuaW1wb3J0IHsgRmlsdGVyUGFuZWxTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1maWx0ZXItcGFuZWwnO1xyXG5pbXBvcnQgeyBRdWVyeVNvbHV0aW9uU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktZmlsdGVyLWNvbmRpdGlvbic7XHJcblxyXG5pbXBvcnQgeyBGaWx0ZXJTZXJ2aWNlIH0gZnJvbSAnLi9maWx0ZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IENvbnZlcnRvclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2UvY29udmVydG9yc2VydmljZSc7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uIH0gZnJvbSAnLi9lbnRpdHkvcXVlcnljb25kaXRpb24nO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gJy4vZW50aXR5L2NvbnRyb2x0eXBlJztcclxuaW1wb3J0IHsgVGV4dFZhbHVlIH0gZnJvbSAnLi9lbnRpdHkvY29uZGl0aW9udmFsdWUvdGV4dHZhbHVlJztcclxuaW1wb3J0IHsgSGVscFZhbHVlIH0gZnJvbSAnLi9lbnRpdHkvY29uZGl0aW9udmFsdWUvaGVscHZhbHVlJztcclxuaW1wb3J0IHsgRHJvcERvd25MaXN0VmFsdWUgfSBmcm9tICcuL2VudGl0eS9jb25kaXRpb252YWx1ZS9kcm9wZG93bmxpc3R2YWx1ZSc7XHJcbmltcG9ydCB7IERhdGVSYW5nZVZhbHVlIH0gZnJvbSAnLi9lbnRpdHkvY29uZGl0aW9udmFsdWUvZGF0ZXJhbmdldmFsdWUnO1xyXG5pbXBvcnQgeyBEYXRlUmFuZ2VUaW1lVmFsdWUgfSBmcm9tICcuL2VudGl0eS9jb25kaXRpb252YWx1ZS9kYXRlcmFuZ2V0aW1ldmFsdWUnO1xyXG5pbXBvcnQgeyBOdW1iZXJSYW5nZVZhbHVlIH0gZnJvbSAnLi9lbnRpdHkvY29uZGl0aW9udmFsdWUvbnVtYmVycmFuZ2V2YXVlJztcclxuaW1wb3J0IHsgU2VhcmNoVmFsdWUgfSBmcm9tICcuL2VudGl0eS9jb25kaXRpb252YWx1ZS9zZWFyY2h2YWx1ZSc7XHJcbmltcG9ydCB7IERhdGVWYWx1ZSB9IGZyb20gJy4vZW50aXR5L2NvbmRpdGlvbnZhbHVlL2RhdGV2YWx1ZSc7XHJcbmltcG9ydCB7IENoZWNrYm94R3JvdXBWYWx1ZSB9IGZyb20gJy4vZW50aXR5L2NvbmRpdGlvbnZhbHVlL2NoZWNrYm94Z3JvdXB2YWx1ZSc7XHJcblxyXG5pbXBvcnQgeyBGaWVsZENvbmZpZyB9IGZyb20gJy4vZW50aXR5L2ZpZWxkY29uZmlnL2ZpZWxkY29uZmlnJztcclxuaW1wb3J0IHsgRmlsdGVySGFuZGxlciwgRklMVEVSX0hBTkRMRVJfVE9LRU4gfSBmcm9tICcuL2ludGVyZmFjZS9maWx0ZXJIYW5kbGVyJztcclxuaW1wb3J0IHsgZGVlcENvcHkgfSBmcm9tICcuL3V0aWxzJztcclxuaW1wb3J0IHsgRHJvcERvd25Db250cm9sIH0gZnJvbSAnLi9lbnRpdHkvY29udHJvbHR5cGUvZHJvcGRvd25saXN0L2Ryb3Bkb3duY29udHJvbCc7XHJcbmltcG9ydCB7IENoZWNrYm94R3JvdXBDb250cm9sIH0gZnJvbSAnLi9lbnRpdHkvY29udHJvbHR5cGUvY2hlY2tib3gvY2hlY2tib3hjb250cm9sJztcclxuaW1wb3J0IHsgUmFkaW9Hcm91cFZhbHVlIH0gZnJvbSAnLi9lbnRpdHkvY29uZGl0aW9udmFsdWUvcmFkaW92YWx1ZSc7XHJcbmltcG9ydCB7IFJhZGlvQ29udHJvbCB9IGZyb20gJy4vZW50aXR5L2NvbnRyb2x0eXBlL3JhZGlvL3JhZGlvY29udHJvbCc7XHJcbmltcG9ydCB7IE1vbnRoUmFuZ2VWYWx1ZSB9IGZyb20gJy4vZW50aXR5L2NvbmRpdGlvbnZhbHVlL21vbnRocmFuZ2UnO1xyXG5pbXBvcnQgeyBZZWFyUmFuZ2VWYWx1ZSB9IGZyb20gJy4vZW50aXR5L2NvbmRpdGlvbnZhbHVlL3llYXJyYW5nZSc7XHJcbmltcG9ydCB7IE1vbnRoVmFsdWUgfSBmcm9tICcuL2VudGl0eS9jb25kaXRpb252YWx1ZS9tb250aCc7XHJcbmltcG9ydCB7IFllYXJWYWx1ZSB9IGZyb20gJy4vZW50aXR5L2NvbmRpdGlvbnZhbHVlL3llYXJ2YWx1ZSc7XHJcbmltcG9ydCB7IElucHV0R3JvdXBWYWx1ZSB9IGZyb20gJy4vZW50aXR5L2NvbmRpdGlvbnZhbHVlL2lucHV0Z3JvdXAnO1xyXG5pbXBvcnQgeyBOdW1iZXJWYWx1ZSB9IGZyb20gJy4vZW50aXR5L2NvbmRpdGlvbnZhbHVlL251bWJlcnZhbHVlJztcclxuaW1wb3J0IHsgRmxleGlibGVOdW1iZXJWYWx1ZSB9IGZyb20gJy4vZW50aXR5L2NvbmRpdGlvbnZhbHVlL2ZsZXhpYmxlbnVtYmVydmFsdWUnO1xyXG5pbXBvcnQgeyBGbGV4aWJsZURhdGVWYWx1ZSB9IGZyb20gJy4vZW50aXR5L2NvbmRpdGlvbnZhbHVlL2ZsZXhpYmxlZGF0ZXZhbHVlJztcclxuaW1wb3J0IFJlc2l6ZU9ic2VydmVyIGZyb20gXCJyZXNpemUtb2JzZXJ2ZXItcG9seWZpbGxcIjtcclxuaW1wb3J0IHsgSWRTZXJ2aWNlLCBPdmVyTGF5SGlkZGVuU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uJztcclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2ZhcnJpcy1maWx0ZXInLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2ZpbHRlci5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgRmlsdGVyUGFuZWxTZXJ2aWNlXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcclxuXHJcbiAgICBfZmlsdGVyTGlzdDogQXJyYXk8YW55PiA9IFtdO1xyXG4gICAgQElucHV0KClcclxuICAgIGdldCBmaWx0ZXJMaXN0KCk6IEFycmF5PGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXJMaXN0O1xyXG4gICAgfVxyXG4gICAgc2V0IGZpbHRlckxpc3QoZmlsdGVyTGlzdDogQXJyYXk8YW55Pikge1xyXG4gICAgICAgIHRoaXMuX2ZpbHRlckxpc3QgPSBmaWx0ZXJMaXN0IHx8IFtdO1xyXG4gICAgICAgIHRoaXMuaW5pdEZpbHRlckxpc3QoKTtcclxuICAgIH1cclxuICAgIC8v5piv5ZCm56aB55SoXHJcbiAgICBASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgQElucHV0KCkgc2hvd1JlbWluZGVyID0gZmFsc2U7XHJcbiAgICAvLyDmmK/lkKblkK/nlKjkvqfovrnmoI/lj47mipgt6L+H5ruk5p2h5Lu25Zyo5L6n6L655qCP5pi+56S6XHJcbiAgICBASW5wdXQoKSBmbG9hdEZpbHRlciA9IHRydWU7XHJcbiAgICAvLyDlkK/nlKjoh6rliqjlrr3luqZcclxuICAgIHByaXZhdGUgX2VuYWJsZUF1dG9XaWR0aCA9IGZhbHNlO1xyXG4gICAgQElucHV0KClcclxuICAgIHNldCBlbmFibGVBdXRvV2lkdGgodmFsdWUpIHtcclxuICAgICAgICBpZiAodmFsdWUgIT09IHRoaXMuX2VuYWJsZUF1dG9XaWR0aCkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyRWxsaXBzaXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyRXh0ZW5kU2hvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2VuYWJsZUF1dG9XaWR0aCA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCBlbmFibGVBdXRvV2lkdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuYWJsZUF1dG9XaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoKSBsb2NhbFN0b3JhZ2VLZXk6IHN0cmluZyA9ICdmYXJyaXNTZWFyY2hSZWNvcmQnO1xyXG5cclxuICAgIC8v5Yid5aeL5YyW5YC8XHJcbiAgICBfZGVmYXVsdFZhbHVlOiBGaWVsZENvbmZpZ1tdO1xyXG4gICAgQElucHV0KClcclxuICAgIHNldCBkZWZhdWx0VmFsdWUoY29uZmlnczogRmllbGRDb25maWdbXSkge1xyXG4gICAgICAgIHRoaXMuX2RlZmF1bHRWYWx1ZSA9IGNvbmZpZ3M7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RmlsdGVyVmFsdWUodGhpcy5fZGVmYXVsdFZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGdldCBkZWZhdWx0VmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRWYWx1ZTtcclxuICAgIH1cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZi1maWx0ZXInKSBjbGEgPSB0cnVlO1xyXG5cclxuICAgIEBPdXRwdXQoKSBxdWVyeSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBzZWFyY2hDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgcmVzZXRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgY2xlYXJGaWx0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgZXhwYW5kRmlsdGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIHBhY2t1cEZpbHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBmaWx0ZXJSZXNpemUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgQFZpZXdDaGlsZCgnZmlsdGVyTWFpbicpIGZpbHRlck1haW46IEVsZW1lbnRSZWY7XHJcbiAgICBAVmlld0NoaWxkKCdmaWx0ZXJUb29sJykgZmlsdGVyVG9vbDogRWxlbWVudFJlZjtcclxuICAgIEBWaWV3Q2hpbGQoJ2ZpbHRlcldyYXBwZXInKSBmaWx0ZXJXcmFwcGVyOiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgnZmFycmlzc2lkZWJhcicpIGZhcnJpc3NpZGViYXI6IEZhcnJpc1NpZGViYXJDb21wb25lbnQ7XHJcbiAgICBAVmlld0NoaWxkKCdsaXN0V3JhcHBlcicpIGxpc3RXcmFwcGVyOiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgnZmlsdGVyTGlzdFdyYXBwZXInKSBmaWx0ZXJMaXN0V3JhcHBlcjogRWxlbWVudFJlZjtcclxuICAgIEBWaWV3Q2hpbGQoJ2Zsb2F0UGFuZWwnKSBmbG9hdFBhbmVsOiBFbGVtZW50UmVmO1xyXG4gICAgY3VycmVudEZpbHRlcklkO1xyXG4gICAgLy8g5bGV5byAXHJcbiAgICBmaWx0ZXJFeHRlbmQgPSBmYWxzZTtcclxuICAgIC8vIOaYr+WQpuaYvuekuuS4ieS4queCuVxyXG4gICAgZmlsdGVyRWxsaXBzaXMgPSBmYWxzZTtcclxuICAgIC8vIOaYr+WQpuaYvuekuuWxleW8gOaUtui1t1xyXG4gICAgZmlsdGVyRXh0ZW5kU2hvdyA9IGZhbHNlO1xyXG4gICAgZmlsdGVyRXh0ZW5kVGV4dCA9ICflsZXlvIAnO1xyXG4gICAgZmlsdGVyRXh0ZW5kSWNvbiA9ICdmLWljb24tYXJyb3ctY2hldnJvbi1kb3duJztcclxuICAgIGV4cGFuZFRleHQgPSAn5bGV5byAJztcclxuICAgIGZvbGRUZXh0ID0gJ+aUtui1tyc7XHJcbiAgICBmaWx0ZXJXcmFwcGVyRWw7XHJcbiAgICBmaWx0ZXJUb29sV2lkdGg6IG51bWJlcjtcclxuICAgIHNpZGViYXJPcGVuID0gZmFsc2U7XHJcbiAgICBmbG9hdFBhbmVsT3BlbiA9IGZhbHNlO1xyXG4gICAgc2hvd0V4cGFuZFRhZyA9IGZhbHNlO1xyXG4gICAgLyoqIOihqOWNleaYr+WQpuWFgeiuuOaPkOS6pCAqL1xyXG4gICAgY2FuU3VibWl0ID0gZmFsc2U7XHJcbiAgICAvKiog6KGo5Y2V5piv5ZCm5YWB6K645o+Q5LqkLOeUqOS6jumrmOe6p+etm+mAiea4heepuuWQjiAqL1xyXG4gICAgYWR2YW5jZWRDYW5TdWJtaXQgPSB0cnVlO1xyXG4gICAgLyoqIOm7mOiupOWxleW8gOmhueaYr+WQpuWFgeiuuOaPkOS6pCAqL1xyXG4gICAgc2hvd0NhblN1Ym1pdCA9IHRydWU7XHJcbiAgICAvKiog5piv5ZCm5pi+56S65riF56m65bey6YCJICovXHJcbiAgICBmaWxsZWRGaWx0ZXIgPSBmYWxzZTtcclxuICAgIC8qKiDpu5jorqTlsZXlvIDnmoTnrZvpgInpobkgKi9cclxuICAgIHNob3dGaWx0ZXJMaXN0OiBBcnJheTxRdWVyeUNvbmRpdGlvbj4gPSBuZXcgQXJyYXk8UXVlcnlDb25kaXRpb24+KCk7XHJcbiAgICAvKiog6auY57qn562b6YCJICovXHJcbiAgICBleHRlbmRGaWx0ZXJMaXN0OiBBcnJheTxRdWVyeUNvbmRpdGlvbj4gPSBuZXcgQXJyYXk8UXVlcnlDb25kaXRpb24+KCk7XHJcbiAgICBleHRlbmRGaWx0ZXJMaXN0U3RvcmU6IEFycmF5PFF1ZXJ5Q29uZGl0aW9uPiA9IG5ldyBBcnJheTxRdWVyeUNvbmRpdGlvbj4oKTtcclxuICAgIGV4dGVuZEZpbHRlckxpc3RUZW1wb3Jhcnk6IEFycmF5PFF1ZXJ5Q29uZGl0aW9uPiA9IG5ldyBBcnJheTxRdWVyeUNvbmRpdGlvbj4oKTtcclxuICAgIC8qKiDlt7LloavlhpnnrZvpgInmlbDmja4gKi9cclxuICAgIGZpbGxlZEZpbHRlckxpc3Q6IEFycmF5PFF1ZXJ5Q29uZGl0aW9uPiA9IG5ldyBBcnJheTxRdWVyeUNvbmRpdGlvbj4oKTtcclxuICAgIC8qKiDpq5jnuqfnrZvpgInkuK3lt7LloavlhpnnmoQgKi9cclxuICAgIGZpbGxlZEV4dGVuZEZpbHRlckxpc3Q6IEFycmF5PFF1ZXJ5Q29uZGl0aW9uPiA9IG5ldyBBcnJheTxRdWVyeUNvbmRpdGlvbj4oKTtcclxuICAgIC8qKiDmsqHmnInloavlhpnnmoTnrZvpgInpobkgKi9cclxuICAgIC8vIHVuRmlsbGVkRmlsdGVyTGlzdDpBcnJheTxRdWVyeUNvbmRpdGlvbj4gPSBuZXcgQXJyYXk8UXVlcnlDb25kaXRpb24+KCk7XHJcbiAgICAvKiog6auY57qn562b6YCJ5Lit5b+F5aGr6aG5ICovXHJcbiAgICBleHRlbmRSZXF1aXJlZExpc3Q6IEFycmF5PFF1ZXJ5Q29uZGl0aW9uPiA9IG5ldyBBcnJheTxRdWVyeUNvbmRpdGlvbj4oKTtcclxuICAgIC8qKiDpu5jorqTnrZvpgInkuK3lv4XloavpobkgKi9cclxuICAgIHNob3dSZXF1aXJlZExpc3Q6IEFycmF5PFF1ZXJ5Q29uZGl0aW9uPiA9IG5ldyBBcnJheTxRdWVyeUNvbmRpdGlvbj4oKTtcclxuICAgIC8qKiDlvqrnjq/ooajljZUgKi9cclxuICAgIGxpc3RGaWx0ZXJDb25kaXRpb25zOiBBcnJheTxRdWVyeUNvbmRpdGlvbj4gPSBuZXcgQXJyYXk8UXVlcnlDb25kaXRpb24+KCk7XHJcbiAgICAvKiog6buY6K6k5bGV5byA77yL6auY57qn562b6YCJ5Lit5bey5aGr5YaZ55qEICovXHJcbiAgICBsb29wRmlsdGVyTGlzdDogQXJyYXk8UXVlcnlDb25kaXRpb24+ID0gbmV3IEFycmF5PFF1ZXJ5Q29uZGl0aW9uPigpO1xyXG4gICAgLyoqIOeUqOadpeWtmOWCqHNldHZhbHVl5YmN5pWw5o2uICovXHJcbiAgICBzdGFnTGlzdEZpbHRlckNvbmRpdGlvbnM6IEFycmF5PFF1ZXJ5Q29uZGl0aW9uPiA9IG5ldyBBcnJheTxRdWVyeUNvbmRpdGlvbj4oKTtcclxuICAgIC8qKiDmmL7npLrkuK3ooajljZXnmoTlv4XloavpobkgKi9cclxuICAgIHJlcXVpcmVkTGlzdEZpbHRlcjogQXJyYXk8UXVlcnlDb25kaXRpb24+ID0gW107XHJcblxyXG4gICAgbG9jYWxlSWRzID0ge1xyXG4gICAgICAgICdlbic6ICdlbicsXHJcbiAgICAgICAgJ3poLUNIUyc6ICd6aC1DSFMnXHJcbiAgICB9O1xyXG4gICAgY3VycmVudExvY2FsZSA9ICd6aC1DSFMnO1xyXG4gICAgaXNDb250cm9sSW5saW5lID0gdHJ1ZTtcclxuICAgIC8qKlxyXG4gICAgICog57uE5Lu25pyN5Yqh5o6l5Y+jXHJcbiAgICAgKi9cclxuICAgIGZpbHRlckhhbmRsZXI6IEZpbHRlckhhbmRsZXI7XHJcbiAgICBmaWx0ZXJQYW5lbENvbnRhaW5lcjtcclxuXHJcbiAgICBzaG93UmVtaW5kZXJJdGVtOiBRdWVyeUNvbmRpdGlvbjtcclxuICAgIHJlbWluZGVyTGVmdCA9IDA7XHJcblxyXG4gICAgZmxvYXRQYW5lbEhlaWdodCA9IG51bGw7XHJcbiAgICBmbG9hdEZpbHRlckljb25Cb3R0b20gPSAwO1xyXG4gICAgLy8g57uR5a6a5aSn5bCP5Y+Y5YyW5ZON5bqUXHJcbiAgICBwcml2YXRlIHJvOiBSZXNpemVPYnNlcnZlciB8IG51bGwgPSBudWxsO1xyXG4gICAgLy8g6K6w5b2V5pen55qE5a695bqm5pWw5o2uXHJcbiAgICBwcml2YXRlIGNvbnRhaW5lcldpZHRoUmVjb3JkID0gMDtcclxuICAgIC8vIOmYiOWAvFxyXG4gICAgcHJpdmF0ZSBkaXN0YW5jZVRocmVzaG9sZCA9IDIwO1xyXG5cclxuICAgIHByaXZhdGUgaWRTZXJ2aWNlOiBJZFNlcnZpY2U7XHJcbiAgICBwcml2YXRlIG92ZXJMYXlTZXJ2aWNlOiBPdmVyTGF5SGlkZGVuU2VydmljZSA9IG51bGw7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGZpbHRlclBhbmVsU2VydmljZTogRmlsdGVyUGFuZWxTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgZmlsdGVyU2VydmljZTogRmlsdGVyU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGNvbnZlcnRvclNlcnZpY2U6IENvbnZlcnRvclNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBoYW5kbGVyOiBRdWVyeVNvbHV0aW9uU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICAgICBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyLFxyXG4gICAgICAgIHB1YmxpYyBuZ3pvbmU6IE5nWm9uZSxcclxuICAgICAgICBwdWJsaWMgbG9jYWxlU2VydmljZTogTG9jYWxlU2VydmljZSxcclxuICAgICAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvclxyXG4gICAgKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5qZWN0b3IpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50TG9jYWxlID0gdGhpcy5pbmplY3Rvci5nZXQoTE9DQUxFX0lEKTtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJIYW5kbGVyID0gdGhpcy5pbmplY3Rvci5nZXQ8RmlsdGVySGFuZGxlcj4oRklMVEVSX0hBTkRMRVJfVE9LRU4sIG51bGwsIEluamVjdEZsYWdzLk9wdGlvbmFsKTtcclxuICAgICAgICAgICAgdGhpcy5pZFNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChJZFNlcnZpY2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5vdmVyTGF5U2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KE92ZXJMYXlIaWRkZW5TZXJ2aWNlLCBudWxsKTtcclxuICAgICAgICBpZiAoIXRoaXMub3ZlckxheVNlcnZpY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5vdmVyTGF5U2VydmljZSA9IG5ldyBPdmVyTGF5SGlkZGVuU2VydmljZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLmZpbHRlcldyYXBwZXJFbCA9IHRoaXMuZmlsdGVyTGlzdFdyYXBwZXIgJiYgdGhpcy5maWx0ZXJMaXN0V3JhcHBlci5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIC8vIOe7keWumuS6i+S7tlxyXG4gICAgICAgIHRoaXMuYmluZFJvRXZlbnQoKTtcclxuICAgICAgICB0aGlzLmZvbGRUZXh0ID0gdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCdmaWx0ZXJQYW5lbC5mb2xkJyk7XHJcbiAgICAgICAgdGhpcy5leHBhbmRUZXh0ID0gdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCdmaWx0ZXJQYW5lbC5leHBhbmQnKTtcclxuICAgICAgICB0aGlzLmZpbHRlckV4dGVuZFRleHQgPSB0aGlzLmV4cGFuZFRleHQ7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudExvY2FsZSA9PT0gdGhpcy5sb2NhbGVJZHNbJ2VuJ10pIHtcclxuICAgICAgICAgICAgdGhpcy5pc0NvbnRyb2xJbmxpbmUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNDb250cm9sSW5saW5lID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZyb21FdmVudCh3aW5kb3csICdyZXNpemUnKS5waXBlKFxyXG4gICAgICAgICAgICBhdWRpdFRpbWUoNTApXHJcbiAgICAgICAgKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmZsb2F0UGFuZWxIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSB0aGlzLmZsb2F0RmlsdGVySWNvbkJvdHRvbTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucm8pIHtcclxuICAgICAgICAgICAgdGhpcy5yby51bm9ic2VydmUodGhpcy5maWx0ZXJXcmFwcGVyRWwpO1xyXG4gICAgICAgICAgICB0aGlzLnJvID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmZsb2F0UGFuZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5vdmVyTGF5U2VydmljZS5kZXN0b3J5KHRoaXMuZmxvYXRQYW5lbC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOe7keWumuebkeaOp+Wkp+Wwj+eahOS6i+S7tlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGJpbmRSb0V2ZW50KCl7XHJcbiAgICAgICAgaWYoIXRoaXMuZmlsdGVyV3JhcHBlcil7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5uZ3pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyDov5nmoLfkuIDnm7Tpg73nu5Hlrprlj6/og73mnInmgKfog73pl67pophcclxuICAgICAgICAgICAgdGhpcy5ybyA9IG5ldyBSZXNpemVPYnNlcnZlcigoZW50cmllcywgb2JzZXJ2ZXIpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBXaWR0aCA9IGVudHJpZXNbMF0uY29udGVudFJlY3Qud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnModGVtcFdpZHRoIC0gdGhpcy5jb250YWluZXJXaWR0aFJlY29yZCkgPlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzdGFuY2VUaHJlc2hvbGRcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5maWx0ZXJMaXN0Lmxlbmd0aCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZUF1dG9XaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdEVsbGlwc2lzSW5pdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyV2lkdGhSZWNvcmQgPSB0ZW1wV2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLnJvLm9ic2VydmUodGhpcy5maWx0ZXJXcmFwcGVyLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAvLyBmcm9tRXZlbnQod2luZG93LCAncmVzaXplJylcclxuICAgICAgICAgICAgLy8gICAgIC5waXBlKGRlYm91bmNlVGltZSg1MCwgYW5pbWF0aW9uRnJhbWUpKVxyXG4gICAgICAgICAgICAvLyAgICAgLnN1YnNjcmliZSgoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgdGhpcy5uZ3pvbmUucnVuKCgpID0+IHtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3Jlc2l6ZScpO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICBpZiAoIXRoaXMuZmlsdGVyTGlzdC5sZW5ndGgpIHJldHVybjtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlQXV0b1dpZHRoKSB7cmV0dXJuO31cclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgdGhpcy5saXN0RWxsaXBzaXNJbml0KCk7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgICAgICAvLyBpZiAoY2hhbmdlcy5maWx0ZXJMaXN0ICYmICFjaGFuZ2VzLmZpbHRlckxpc3QuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgLy8gICB0aGlzLmluaXRGaWx0ZXJMaXN0KCk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOWIneWni+WMluetm+mAiemhuVxyXG4gICAgICovXHJcbiAgICBpbml0RmlsdGVyTGlzdCgpIHtcclxuICAgICAgICB0aGlzLmxpc3RGaWx0ZXJDb25kaXRpb25zID0gbmV3IEFycmF5PFF1ZXJ5Q29uZGl0aW9uPigpO1xyXG4gICAgICAgIGNvbnN0IGZpbHRlckRhdGFzID0gdGhpcy5maWx0ZXJTZXJ2aWNlLmZpZWxkU2NoZW1hc0NvbnZlcnQodGhpcy5maWx0ZXJMaXN0KTtcclxuICAgICAgICBpZiAoZmlsdGVyRGF0YXMgJiYgZmlsdGVyRGF0YXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGlzdEZpbHRlckNvbmRpdGlvbnMgPSB0aGlzLmNvbnZlcnRvclNlcnZpY2UuZ2V0U2VsZWN0ZWRGaWVsZENvbmRpdGlvbnMoZmlsdGVyRGF0YXMsIHRoaXMubGlzdEZpbHRlckNvbmRpdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnN0YWdMaXN0RmlsdGVyQ29uZGl0aW9ucyA9IHRoaXMubGlzdEZpbHRlckNvbmRpdGlvbnMubWFwKG8gPT4gKHsgLi4ubyB9KSk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJMaXN0Q2xhc3NpZnkoKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2hvd1JlbWluZGVyICYmIHRoaXMuc2hvd0ZpbHRlckxpc3QgJiYgdGhpcy5zaG93RmlsdGVyTGlzdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd1JlbWluZGVySXRlbSA9IHRoaXMuc2hvd0ZpbHRlckxpc3RbMF07XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zaG93UmVtaW5kZXJJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbHRlcmxpc3RJdGVtcyA9IHRoaXMuZmlsdGVyTGlzdFdyYXBwZXIgJiYgdGhpcy5maWx0ZXJMaXN0V3JhcHBlci5uYXRpdmVFbGVtZW50LmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJsaXN0SXRlbXMgJiYgZmlsdGVybGlzdEl0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2hvd1JlbUl0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsdGVybGlzdEl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zaG93UmVtaW5kZXJJdGVtWydpZCddID09IGZpbHRlcmxpc3RJdGVtc1tpXS5nZXRBdHRyaWJ1dGUoJ2lkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93UmVtSXRlbSA9IGZpbHRlcmxpc3RJdGVtc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hvd1JlbUl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtaW5kZXJMZWZ0ID0gc2hvd1JlbUl0ZW0ub2Zmc2V0TGVmdCA+PSAwID8gc2hvd1JlbUl0ZW0ub2Zmc2V0TGVmdCA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dSZW1pbmRlckl0ZW0gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICB9XHJcbiAgICAvKiog562b6YCJ6aG55YiG57G7ICovXHJcbiAgICBmaWx0ZXJMaXN0Q2xhc3NpZnkoKSB7XHJcbiAgICAgICAgdGhpcy5leHRlbmRGaWx0ZXJMaXN0ID0gW107XHJcbiAgICAgICAgdGhpcy5leHRlbmRGaWx0ZXJMaXN0U3RvcmUgPSBbXTtcclxuICAgICAgICB0aGlzLnNob3dGaWx0ZXJMaXN0ID0gW107XHJcbiAgICAgICAgdGhpcy5maWxsZWRGaWx0ZXJMaXN0ID0gW107XHJcbiAgICAgICAgdGhpcy5maWxsZWRFeHRlbmRGaWx0ZXJMaXN0ID0gW107XHJcbiAgICAgICAgdGhpcy5sb29wRmlsdGVyTGlzdCA9IFtdO1xyXG4gICAgICAgIHRoaXMuZXh0ZW5kUmVxdWlyZWRMaXN0ID0gW107XHJcbiAgICAgICAgdGhpcy5zaG93UmVxdWlyZWRMaXN0ID0gW107XHJcbiAgICAgICAgLy8g5b+F5aGrXHJcbiAgICAgICAgbGV0IHJlcXVpcmVkTGlzdCA9IHRoaXMubGlzdEZpbHRlckNvbmRpdGlvbnMuZmlsdGVyKChsaXN0aXRlbSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gbGlzdGl0ZW0uY29udHJvbC5yZXF1aXJlZDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAocmVxdWlyZWRMaXN0ICYmIHJlcXVpcmVkTGlzdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5yZXF1aXJlZExpc3RGaWx0ZXIgPSByZXF1aXJlZExpc3Q7XHJcbiAgICAgICAgICAgIHRoaXMuY2FuU3VibWl0ID0gdGhpcy5jYW5TdWJtaXRGaWx0ZXIodGhpcy5yZXF1aXJlZExpc3RGaWx0ZXIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVxdWlyZWRMaXN0RmlsdGVyID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuY2FuU3VibWl0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5Yeg56eN57G75Z6L5YiG57G7XHJcbiAgICAgICAgdGhpcy5saXN0RmlsdGVyQ29uZGl0aW9ucy5mb3JFYWNoKGZpZWxkID0+IHtcclxuICAgICAgICAgICAgaWYgKGZpZWxkLmNvbnRyb2wuaXNFeHRlbmQgJiYgZmllbGRbJ2ZpbGxlZCddKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGxlZEV4dGVuZEZpbHRlckxpc3QucHVzaChmaWVsZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGZpZWxkWydmaWxsZWQnXSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWxsZWRGaWx0ZXJMaXN0LnB1c2goZmllbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGVsc2UgaWYoIWZpZWxkLmNvbnRyb2wuaXNFeHRlbmQpe1xyXG4gICAgICAgICAgICAvLyAgIHRoaXMudW5GaWxsZWRGaWx0ZXJMaXN0LnB1c2goZmllbGQpO1xyXG4gICAgICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZmllbGQuY29udHJvbC5pc0V4dGVuZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5leHRlbmRGaWx0ZXJMaXN0U3RvcmUucHVzaChmaWVsZCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dGaWx0ZXJMaXN0LnB1c2goZmllbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmZpbGxlZEZpbHRlckxpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsbGVkRmlsdGVyID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmZpbGxlZEZpbHRlciA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbGlzdCA9IHRoaXMubGlzdEZpbHRlckNvbmRpdGlvbnMuZmlsdGVyKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gIWl0ZW0uY29udHJvbC5pc0V4dGVuZCB8fCBpdGVtWydmaWxsZWQnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIHRoaXMubG9vcEZpbHRlckxpc3QgPSB0aGlzLnNob3dGaWx0ZXJMaXN0LmNvbmNhdCh0aGlzLmZpbGxlZEV4dGVuZEZpbHRlckxpc3QpO1xyXG4gICAgICAgIHRoaXMubG9vcEZpbHRlckxpc3QgPSBsaXN0ID8gbGlzdCA6IFtdO1xyXG4gICAgICAgIHRoaXMubG9vcEZpbHRlckxpc3QuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgdGhpcy5nZXRWYWx1ZVRleHQoaXRlbSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5leHRlbmRGaWx0ZXJMaXN0ID0gdGhpcy5leHRlbmRGaWx0ZXJMaXN0U3RvcmUubWFwKG8gPT4gKHsgLi4ubyB9KSk7XHJcbiAgICAgICAgY29uc3QgZXh0ZW5kUmVxdWlyZWRMaXN0ID0gdGhpcy5leHRlbmRGaWx0ZXJMaXN0LmZpbHRlcigobGlzdGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGxpc3RpdGVtLmNvbnRyb2wucmVxdWlyZWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGV4dGVuZFJlcXVpcmVkTGlzdCAmJiBleHRlbmRSZXF1aXJlZExpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5kUmVxdWlyZWRMaXN0ID0gZXh0ZW5kUmVxdWlyZWRMaXN0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2hvd3JlcXVpcmVkTGlzdCA9IHRoaXMuc2hvd0ZpbHRlckxpc3QuZmlsdGVyKChsaXN0aXRlbSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gbGlzdGl0ZW0uY29udHJvbC5yZXF1aXJlZDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoc2hvd3JlcXVpcmVkTGlzdCAmJiBzaG93cmVxdWlyZWRMaXN0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dSZXF1aXJlZExpc3QgPSBzaG93cmVxdWlyZWRMaXN0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zaG93Q2FuU3VibWl0ID0gdGhpcy5jYW5TdWJtaXRGaWx0ZXIodGhpcy5zaG93UmVxdWlyZWRMaXN0KTtcclxuICAgICAgICB0aGlzLmFkdmFuY2VkQ2FuU3VibWl0ID0gdGhpcy5jYW5TdWJtaXRGaWx0ZXIodGhpcy5leHRlbmRSZXF1aXJlZExpc3QpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCflt7LloavlhpknLHRoaXMuZmlsbGVkRXh0ZW5kRmlsdGVyTGlzdCk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ+aYvuekuuWHuuadpeeahCcsdGhpcy5sb29wRmlsdGVyTGlzdCk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ+makOiXj+mDqOWIhicsdGhpcy5leHRlbmRGaWx0ZXJMaXN0KTtcclxuICAgICAgICB0aGlzLmZpbHRlckV4dGVuZFNob3cgPSB0cnVlO1xyXG4gICAgICAgIC8vIOWmguaenOaYr+aUr+aMgeiHquWKqOWuveW6pu+8jOWwseaYr+S4jeWPjuaKmCzliKTmlq3mtonlj4rotYvlgLzml7bmnLpcclxuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlQXV0b1dpZHRoKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0RWxsaXBzaXNJbml0KCk7XHJcbiAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5bey5aGr5YaZ562b6YCJ6aG554K55Ye7XHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgXHJcbiAgICAgKiBAcGFyYW0gZGF0YSBcclxuICAgICAqL1xyXG4gICAgZmlsdGVyQ2xpY2soZXZlbnQsIGRhdGEsIGluZGV4KSB7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybjtcclxuICAgICAgICBpZiAoZGF0YSkge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dSZW1pbmRlckl0ZW0gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpbnN0YW5jZUlEID0gdGhpcy5sb2NhbFN0b3JhZ2VLZXkgKyAnXycrIGRhdGEuaWQ7XHJcbiAgICAgICAgaWYgKGRhdGEgJiYgdGhpcy5jdXJyZW50RmlsdGVySWQgIT0gZGF0YS5pZCkge1xyXG4gICAgICAgICAgICBjb25zdCBwYW5lbEl0ZW0gPSBkZWVwQ29weShkYXRhKTtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50RmlsdGVySWQgPSBkYXRhLmlkO1xyXG4gICAgICAgICAgICBjb25zdCB7IGxlZnQsIHRvcCwgaGVpZ2h0LCByaWdodCB9ID0gZXZlbnQuY3VycmVudFRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lciA9IHRoaXMuZmlsdGVyUGFuZWxTZXJ2aWNlLnNob3dQYW5lbCh7XHJcbiAgICAgICAgICAgICAgICBsZWZ0OiBsZWZ0LFxyXG4gICAgICAgICAgICAgICAgdG9wOiB0b3AgKyBoZWlnaHQgKyAyLFxyXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHJpZ2h0LFxyXG4gICAgICAgICAgICAgICAgaXRlbTogcGFuZWxJdGVtLFxyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlS2V5OiBpbnN0YW5jZUlEXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlclBhbmVsQ29udGFpbmVyLmhpZGVQYW5lbC5zdWJzY3JpYmUoZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlclBhbmVsU2VydmljZS5oaWRlUGFuZWwoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyUGFuZWxDb250YWluZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RmlsdGVySWQgPSBudWxsO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lci5jbGVhckZpbHRlci5zdWJzY3JpYmUoZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyRmlsdGVyLmVtaXQoZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvL+aPkOS6pOW8ueeql+WGhVxyXG4gICAgICAgICAgICBjb25zdCBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyUGFuZWxDb250YWluZXIuc3VibWl0LnN1YnNjcmliZShlID0+IHtcclxuICAgICAgICAgICAgICAgIGUuZmlsbGVkID0gKGUudmFsdWVUZXh0ICYmIGUudmFsdWVUZXh0Lmxlbmd0aCA+IDApID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMubG9vcEZpbHRlckxpc3RbaW5kZXhdID0gZTtcclxuICAgICAgICAgICAgICAgIGxldCBwYW5lbExpc3RJbmRleCA9IF90aGlzLmxpc3RGaWx0ZXJDb25kaXRpb25zLmZpbmRJbmRleChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbVsnaWQnXSA9PSBlWydpZCddO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFuZWxMaXN0SW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmxpc3RGaWx0ZXJDb25kaXRpb25zW3BhbmVsTGlzdEluZGV4XSA9IGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaENoYW5nZS5lbWl0KHRoaXMubGlzdEZpbHRlckNvbmRpdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pblNldEN1cnJlbnRGaWx0ZXJDb25kaXRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlckxpc3RDbGFzc2lmeSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gdmFsdWVUZXh05piv5pyJ6ZyA6KaB6K6h566X55qE77yM5omA5Lul5bu25ZCO5Yik5pat5piv5ZCm5pi+56S6XHJcbiAgICAgICAgICAgICAgICBsZXQgZmluZEl0ZW0gPSBfdGhpcy5sb29wRmlsdGVyTGlzdC5maW5kKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtWydpZCddID09IGVbJ2lkJ107XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChmaW5kSXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbmRJdGVtWydmaWxsZWQnXSA9IGZpbmRJdGVtLnZhbHVlVGV4dCAmJiBmaW5kSXRlbS52YWx1ZVRleHQubGVuZ3RoID4gMCA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1Ym1pdCgncGFuZWxGb3JtRGF0YScsIHRoaXMubGlzdEZpbHRlckNvbmRpdGlvbnMsIGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJQYW5lbFNlcnZpY2UuaGlkZVBhbmVsKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlclBhbmVsQ29udGFpbmVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEZpbHRlcklkID0gbnVsbDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlclBhbmVsU2VydmljZS5oaWRlUGFuZWwoKTtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEZpbHRlcklkID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOa4heepuuetm+mAiemhuVxyXG4gICAgICovXHJcbiAgICBmaWx0ZXJDbGVhcihkYXRhLCBpbmRleCwgZXZlbnQpIHtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB0aGlzLmZpbHRlclBhbmVsU2VydmljZS5oaWRlUGFuZWwoKTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRGaWx0ZXJJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5yZXNldExpc3RDb25kaXRpb24oZGF0YSk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJMaXN0Q2xhc3NpZnkoKTtcclxuICAgICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgICAgIHRoaXMuc2VhcmNoQ2hhbmdlLmVtaXQodGhpcy5saXN0RmlsdGVyQ29uZGl0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5jbGVhckZpbHRlci5lbWl0KGRhdGEpO1xyXG4gICAgICAgIHRoaXMuaW5TZXRDdXJyZW50RmlsdGVyQ29uZGl0aW9ucygpO1xyXG4gICAgICAgIHRoaXMuYWR2YW5jZWRDYW5TdWJtaXQgPSB0aGlzLmNhblN1Ym1pdEZpbHRlcih0aGlzLmV4dGVuZFJlcXVpcmVkTGlzdCk7XHJcbiAgICAgICAgdGhpcy5zdWJtaXQoJ3BhbmVsRm9ybURhdGEnLCB0aGlzLmxpc3RGaWx0ZXJDb25kaXRpb25zKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5bGV5byA6auY57qn562b6YCJXHJcbiAgICAgKi9cclxuICAgIGFkdmFuY2VkRmlsdGVyKCkge1xyXG4gICAgICAgIHRoaXMuc2hvd1JlbWluZGVySXRlbSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5leHRlbmRGaWx0ZXJMaXN0VGVtcG9yYXJ5ID0gZGVlcENvcHkodGhpcy5leHRlbmRGaWx0ZXJMaXN0KTtcclxuICAgICAgICB0aGlzLmZhcnJpc3NpZGViYXIuaXNPcGVuID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGxpc3RDYW5jZWwoKSB7XHJcbiAgICAgICAgdGhpcy5leHRlbmRGaWx0ZXJMaXN0ID0gZGVlcENvcHkodGhpcy5leHRlbmRGaWx0ZXJMaXN0VGVtcG9yYXJ5KTtcclxuICAgICAgICB0aGlzLmZhcnJpc3NpZGViYXIuaXNPcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5mbG9hdFBhbmVsT3BlbiA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDmiZPlvIDpnaLmnb/pq5jnuqfnrZvpgIlcclxuICAgICAqL1xyXG4gICAgZmxvYXRGaWx0ZXJPcGVuKCRldm5ldDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIHRoaXMuZmxvYXRQYW5lbE9wZW4gPSAhdGhpcy5mbG9hdFBhbmVsT3BlbjtcclxuICAgICAgICBpZiAodGhpcy5mbG9hdFBhbmVsT3Blbikge1xyXG4gICAgICAgICAgICB0aGlzLmV4dGVuZEZpbHRlckxpc3RUZW1wb3JhcnkgPSBkZWVwQ29weSh0aGlzLmV4dGVuZEZpbHRlckxpc3QpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZmxvYXRGaWx0ZXJJY29uQm90dG9tKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGJvdHRvbSB9ID0gKDxhbnk+JGV2bmV0LnRhcmdldCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZsb2F0RmlsdGVySWNvbkJvdHRvbSA9IGJvdHRvbSArIDEwMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmZsb2F0UGFuZWxIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSB0aGlzLmZsb2F0RmlsdGVySWNvbkJvdHRvbTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub3ZlckxheVNlcnZpY2UucmVnaXN0ZXJNb3VzZUV2ZW50KHRoaXMuZmxvYXRQYW5lbC5uYXRpdmVFbGVtZW50LCAoZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmxvYXRQYW5lbC5uYXRpdmVFbGVtZW50LmNvbnRhaW5zKGUudGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0Lm5vZGVOYW1lID09PSAnU1BBTicgJiYgZS50YXJnZXQuY2xhc3NOYW1lLmluZGV4T2YoJ2YtaWNvbi1maWx0cmF0ZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNscyA9IFsnLmYtZGF0ZXBpY2tlci1jb250YWluZXInLCAnLmZhcnJpcy10aW1lci1waWNrZXInLCAnLmZhcnJpcy1tb2RhbCcsICcuZi1jb21iby1sb29rdXAnLCAnLmRhdGUtb3ZlcmxheS1jb250YWluZXInXVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xzLmZpbmQoayA9PiBlLnRhcmdldC5jbG9zZXN0KGspKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuZmxvYXRQYW5lbE9wZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMub3ZlckxheVNlcnZpY2UuZGVzdG9yeSh0aGlzLmZsb2F0UGFuZWwubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5vdmVyTGF5U2VydmljZS5kZXN0b3J5KHRoaXMuZmxvYXRQYW5lbC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOWIl+ihqOWxleekuuWIneWni+WMllxyXG4gICAgICovXHJcbiAgICBsaXN0RWxsaXBzaXNJbml0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmVuYWJsZUF1dG9XaWR0aCkgcmV0dXJuO1xyXG4gICAgICAgIC8vIGlmKHRoaXMuZmlsdGVyRXh0ZW5kKSByZXR1cm47XHJcbiAgICAgICAgY29uc3QgZmlsdGVyTWFpbldpZHRoID0gdGhpcy5maWx0ZXJNYWluLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJUb29sV2lkdGggPSAwO1xyXG4gICAgICAgIC8vIGZpbHRlclRvb2wgPSB0aGlzLmZpbHRlclRvb2wubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcclxuICAgICAgICBpZiAodGhpcy5maWx0ZXJUb29sKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyVG9vbFdpZHRoID0gdGhpcy5maWx0ZXJUb29sLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOetm+mAieadoeS7tuWMuuWfn+acgOWkp+WuveW6plxyXG4gICAgICAgIGxldCBmaWx0ZXJMaXN0VztcclxuICAgICAgICBpZiAodGhpcy5maWx0ZXJFeHRlbmQpIHtcclxuICAgICAgICAgICAgZmlsdGVyTGlzdFcgPSBmaWx0ZXJNYWluV2lkdGggLSAyNjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGZpbHRlckxpc3RXID0gZmlsdGVyTWFpbldpZHRoLSA0OCAtIHRoaXMuZmlsdGVyVG9vbFdpZHRoIC0gMjY7XHJcbiAgICAgICAgICAgIGZpbHRlckxpc3RXID0gZmlsdGVyTWFpbldpZHRoIC0gNDggLSB0aGlzLmZpbHRlclRvb2xXaWR0aCAtIDI2O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zdCBmaWx0ZXJXcmFwcGVyID0gdGhpcy5maWx0ZXJMaXN0V3JhcHBlci5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIC8vIGNvbnN0IGZpbHRlcldyYXBwZXJXaWR0aCA9IGZpbHRlcldyYXBwZXIub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coZmlsdGVyV3JhcHBlcldpZHRoKTtcclxuICAgICAgICBjb25zdCBmaWx0ZXJJdGVtcyA9IHRoaXMuZmlsdGVyV3JhcHBlckVsID8gdGhpcy5maWx0ZXJXcmFwcGVyRWwuY2hpbGRyZW4gOiBbXTtcclxuICAgICAgICBsZXQgZmlsdGVySXRlbVdpZHRoID0gMDtcclxuICAgICAgICBpZiAoZmlsdGVySXRlbXMgJiYgZmlsdGVySXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBmaWx0ZXJJdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIuc2V0U3R5bGUoZmlsdGVySXRlbXNbaV0sICdkaXNwbGF5JywgJ2ZsZXgnKTtcclxuICAgICAgICAgICAgICAgIGxldCB3aWR0aCA9IGZpbHRlckl0ZW1zW2ldLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgZmlsdGVySXRlbVdpZHRoICs9IHdpZHRoICsgODtcclxuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJJdGVtV2lkdGggPj0gZmlsdGVyTGlzdFcgJiYgIXRoaXMuZmlsdGVyRXh0ZW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIuc2V0U3R5bGUoZmlsdGVySXRlbXNbaV0sICdkaXNwbGF5JywgJ25vbmUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKGZpbHRlckl0ZW1zW2ldLCAnZGlzcGxheScsICdmbGV4Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhmaWx0ZXJJdGVtV2lkdGgsZmlsdGVyTGlzdFcsaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYoZmlsdGVySXRlbVdpZHRoID4gdGhpcy5maWx0ZXJXcmFwcGVyRWwub2Zmc2V0V2lkdGgpe1xyXG4gICAgICAgIGlmIChmaWx0ZXJJdGVtV2lkdGggPj0gZmlsdGVyTGlzdFcpIHtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJFbGxpcHNpcyA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyRXh0ZW5kU2hvdyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlckVsbGlwc2lzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyRXh0ZW5kU2hvdyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIGlmIChmaWx0ZXJJdGVtcy5sZW5ndGgpIHRoaXMuZmlsdGVyUmVzaXplLmVtaXQoKTtcclxuICAgICAgICBpZiAoIXRoaXMuY2RbJ2Rlc3Ryb3llZCddKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog562b6YCJ6aG55bGV5byA5pS26LW35YiH5o2iXHJcbiAgICAgKi9cclxuICAgIGZpbHRlckV4cGFuZCgpIHtcclxuICAgICAgICB0aGlzLnNob3dSZW1pbmRlckl0ZW0gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyRXh0ZW5kID0gIXRoaXMuZmlsdGVyRXh0ZW5kO1xyXG4gICAgICAgIGlmICh0aGlzLmZpbHRlckV4dGVuZCkge1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlckVsbGlwc2lzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyRXh0ZW5kVGV4dCA9IHRoaXMuZm9sZFRleHQ7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyRXh0ZW5kSWNvbiA9ICdmLWljb24tYXJyb3ctY2hldnJvbi11cCc7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlckl0ZW1zID0gdGhpcy5maWx0ZXJXcmFwcGVyRWwuY2hpbGRyZW47XHJcbiAgICAgICAgICAgIGlmIChmaWx0ZXJJdGVtcyAmJiBmaWx0ZXJJdGVtcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBmaWx0ZXJJdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKGZpbHRlckl0ZW1zW2ldLCAnZGlzcGxheScsICdmbGV4Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHRoaXMuZmlsdGVyV3JhcHBlckVsLCAnZmxleC13cmFwJywgJ3dyYXAnKTtcclxuICAgICAgICAgICAgdGhpcy5leHBhbmRGaWx0ZXIuZW1pdCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlckV4dGVuZFRleHQgPSB0aGlzLmV4cGFuZFRleHQ7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyRXh0ZW5kSWNvbiA9ICdmLWljb24tYXJyb3ctY2hldnJvbi1kb3duJztcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RFbGxpcHNpc0luaXQoKTtcclxuICAgICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgICAgIHRoaXMucGFja3VwRmlsdGVyLmVtaXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOmrmOe6p+etm+mAieihqOWNlemhueaQnOe0ouWPmOWMllxyXG4gICAgICogQHBhcmFtICRldmVudCBcclxuICAgICAqIEBwYXJhbSBpdGVtIFxyXG4gICAgICovXHJcbiAgICBvblNlYXJjaCgkZXZlbnQsIGl0ZW0pIHtcclxuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkgeyByZXR1cm47IH1cclxuICAgICAgICB0aGlzLmFkdmFuY2VkQ2FuU3VibWl0ID0gdGhpcy5jYW5TdWJtaXRGaWx0ZXIodGhpcy5leHRlbmRSZXF1aXJlZExpc3QpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuYWR2YW5jZWRDYW5TdWJtaXQsdGhpcy5jYW5TdWJtaXQpO1xyXG4gICAgICAgIHRoaXMuc2VhcmNoQ2hhbmdlLmVtaXQoeyBpdGVtLCBjb25kaXRpb25zOiB0aGlzLmxpc3RGaWx0ZXJDb25kaXRpb25zLCBpbnN0YW5jZTogdGhpcyB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5Yik5pat5piv5ZCm5omA5pyJ5b+F5aGr6aG56YO95aGr5YaZ5a6M5q+VICovXHJcbiAgICBjYW5TdWJtaXRGaWx0ZXIocmVxdWlyZWxpc3QpIHtcclxuICAgICAgICBsZXQgZm9ybUNhblN1Ym1pdCA9IGZhbHNlO1xyXG4gICAgICAgIGlmICghcmVxdWlyZWxpc3QgfHwgIXJlcXVpcmVsaXN0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICBmb3JtQ2FuU3VibWl0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIGZvcm1DYW5TdWJtaXQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXF1aXJlbGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHJlcXVpcmVsaXN0W2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uY29udHJvbC5nZXRDb250cm9sVHlwZSgpID09PSBDb250cm9sVHlwZS5UZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHYgPSAoaXRlbS52YWx1ZSBhcyBUZXh0VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyh0dikubGVuZ3RoIDwgMCB8fCAhdHYudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtQ2FuU3VibWl0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpdGVtLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PT0gQ29udHJvbFR5cGUuSGVscCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNodiA9IChpdGVtLnZhbHVlIGFzIEhlbHBWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHNodikubGVuZ3RoID09PSAwIHx8ICFzaHYudmFsdWUgfHwgIXNodi52YWx1ZUZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1DYW5TdWJtaXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlbS5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT09IENvbnRyb2xUeXBlLkRyb3BEb3duKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGR2ID0gKGl0ZW0udmFsdWUgYXMgRHJvcERvd25MaXN0VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhkZHYpLmxlbmd0aCA9PT0gMCB8fCAhZGR2LnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1DYW5TdWJtaXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlbS5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT09IENvbnRyb2xUeXBlLkRhdGVSYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRydiA9IChpdGVtLnZhbHVlIGFzIERhdGVSYW5nZVZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoZHJ2KS5sZW5ndGggPT09IDAgfHwgKCFkcnYuc3RhcnRUaW1lICYmICFkcnYuZW5kVGltZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtQ2FuU3VibWl0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpdGVtLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PT0gQ29udHJvbFR5cGUuRGF0ZVJhbmdlVGltZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRydiA9IChpdGVtLnZhbHVlIGFzIERhdGVSYW5nZVRpbWVWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGRydikubGVuZ3RoID09PSAwIHx8ICghZHJ2LnN0YXJ0VGltZSAmJiAhZHJ2LmVuZFRpbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1DYW5TdWJtaXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlbS5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT09IENvbnRyb2xUeXBlLk1vbnRoUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtcnYgPSAoaXRlbS52YWx1ZSBhcyBNb250aFJhbmdlVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhtcnYpLmxlbmd0aCA9PT0gMCB8fCAoIW1ydi5zdGFydFRpbWUgJiYgIW1ydi5lbmRUaW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtQ2FuU3VibWl0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1DYW5TdWJtaXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0uY29udHJvbC5nZXRDb250cm9sVHlwZSgpID09PSBDb250cm9sVHlwZS5ZZWFyUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB5cnYgPSAoaXRlbS52YWx1ZSBhcyBZZWFyUmFuZ2VWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHlydikubGVuZ3RoID09PSAwIHx8ICgheXJ2LnN0YXJ0VGltZSAmJiAheXJ2LmVuZFRpbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1DYW5TdWJtaXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PT0gQ29udHJvbFR5cGUuTnVtYmVyUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBucnYgPSAoaXRlbS52YWx1ZSBhcyBOdW1iZXJSYW5nZVZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMobnJ2KS5sZW5ndGggPT09IDAgfHwgKG5ydi5zdGFydFZhbHVlID09PSBudWxsICYmIG5ydi5lbmRWYWx1ZSA9PT0gbnVsbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PT0gQ29udHJvbFR5cGUuU2VhcmNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3YgPSAoaXRlbS52YWx1ZSBhcyBTZWFyY2hWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHN2KS5sZW5ndGggPCAwIHx8ICFzdi52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtQ2FuU3VibWl0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1DYW5TdWJtaXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0uY29udHJvbC5nZXRDb250cm9sVHlwZSgpID09PSBDb250cm9sVHlwZS5EYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZHYgPSAoaXRlbS52YWx1ZSBhcyBEYXRlVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhkdikubGVuZ3RoIDwgMCB8fCAhZHYudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtQ2FuU3VibWl0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpdGVtLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PT0gQ29udHJvbFR5cGUuTW9udGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtdiA9IChpdGVtLnZhbHVlIGFzIE1vbnRoVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhtdikubGVuZ3RoIDwgMCB8fCAhbXYudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtQ2FuU3VibWl0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpdGVtLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PT0gQ29udHJvbFR5cGUuWWVhcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHl2ID0gKGl0ZW0udmFsdWUgYXMgWWVhclZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoeXYpLmxlbmd0aCA8IDAgfHwgIXl2LnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1DYW5TdWJtaXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlbS5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT09IENvbnRyb2xUeXBlLkNoZWNrYm94R3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYmd2ID0gKGl0ZW0udmFsdWUgYXMgQ2hlY2tib3hHcm91cFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoY2JndikubGVuZ3RoID09PSAwIHx8IE9iamVjdC5rZXlzKGNiZ3YudmFsdWUpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtQ2FuU3VibWl0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1DYW5TdWJtaXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0uY29udHJvbC5nZXRDb250cm9sVHlwZSgpID09PSBDb250cm9sVHlwZS5SYWRpbykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhZGlvdiA9IChpdGVtLnZhbHVlIGFzIFJhZGlvR3JvdXBWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHJhZGlvdikubGVuZ3RoIDwgMCB8fCByYWRpb3YudmFsdWUgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1DYW5TdWJtaXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlbS5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT09IENvbnRyb2xUeXBlLklucHV0R3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdiA9IChpdGVtLnZhbHVlIGFzIElucHV0R3JvdXBWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHN2KS5sZW5ndGggPCAwIHx8ICFzdi50ZXh0VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtQ2FuU3VibWl0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpdGVtLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PT0gQ29udHJvbFR5cGUuTnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbnJ2ID0gKGl0ZW0udmFsdWUgYXMgTnVtYmVyVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhucnYpLmxlbmd0aCA9PT0gMCB8fCAobnJ2LnZhbHVlID09IG51bGwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1DYW5TdWJtaXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlbS5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT09IENvbnRyb2xUeXBlLkZsZXhpYmxlTnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmxleHYgPSAoaXRlbS52YWx1ZSBhcyBGbGV4aWJsZU51bWJlclZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmxleHYuc2luZ2xlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhmbGV4dikubGVuZ3RoIDwgMCB8fCBmbGV4di52YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtQ2FuU3VibWl0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtQ2FuU3VibWl0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGZsZXh2KS5sZW5ndGggPT09IDAgfHwgKGZsZXh2LnN0YXJ0VmFsdWUgPT0gbnVsbCAmJiBmbGV4di5lbmRWYWx1ZSA9PSBudWxsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpdGVtLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PT0gQ29udHJvbFR5cGUuRmxleGlibGVEYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmxleGRhdGV2ID0gKGl0ZW0udmFsdWUgYXMgRmxleGlibGVEYXRlVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmbGV4ZGF0ZXYuc2luZ2xlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhmbGV4ZGF0ZXYpLmxlbmd0aCA8IDAgfHwgIWZsZXhkYXRldi52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUNhblN1Ym1pdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhmbGV4ZGF0ZXYpLmxlbmd0aCA9PT0gMCB8fCAoIWZsZXhkYXRldi5zdGFydFZhbHVlICYmICFmbGV4ZGF0ZXYuZW5kVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtQ2FuU3VibWl0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtQ2FuU3VibWl0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZvcm1DYW5TdWJtaXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKiog6auY57qn562b6YCJ54K55Ye756Gu5a6a5o+Q5LqkICovXHJcbiAgICBsaXN0U2VhcmNoKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7IHJldHVybjsgfTtcclxuICAgICAgICB0aGlzLmV4dGVuZEZpbHRlckxpc3QuZm9yRWFjaChmaWVsZCA9PiB7XHJcbiAgICAgICAgICAgIGlmICgoZmllbGQuY29udHJvbC5nZXRDb250cm9sVHlwZSgpICE9IENvbnRyb2xUeXBlLkRhdGUpXHJcbiAgICAgICAgICAgICAgICAmJiAoZmllbGQuY29udHJvbC5nZXRDb250cm9sVHlwZSgpICE9IENvbnRyb2xUeXBlLkRhdGVSYW5nZSlcclxuICAgICAgICAgICAgICAgICYmIChmaWVsZC5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgIT0gQ29udHJvbFR5cGUuRGF0ZVJhbmdlVGltZSlcclxuICAgICAgICAgICAgICAgICYmIChmaWVsZC5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgIT0gQ29udHJvbFR5cGUuRmxleGlibGVEYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZmllbGQudmFsdWVUZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLnZhbHVlVGV4dCA9IGZpZWxkLnZhbHVlLmdldFZhbHVlVGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBpZihmaWVsZC5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT0gQ29udHJvbFR5cGUuUmFkaW8pe1xyXG4gICAgICAgICAgICAvLyAgIGNvbnNvbGUubG9nKGZpZWxkKTtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICBmaWVsZC5maWxsZWQgPSAoZmllbGQudmFsdWVUZXh0ICYmIGZpZWxkLnZhbHVlVGV4dC5sZW5ndGggPiAwKSA/IHRydWUgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmaWVsZC5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT0gQ29udHJvbFR5cGUuVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGZhcnJpc1NlYXJjaFJlY29yZCA9IGZpZWxkLnZhbHVlVGV4dDtcclxuICAgICAgICAgICAgICAgIGxldCBmYXJyaXNTZWFyY2hSZWNvcmRBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHN0b3JhZ2VsYWJlbENvZGUgPSBmaWVsZC5sYWJlbENvZGU7XHJcbiAgICAgICAgICAgICAgICBsZXQgZmlsdGVyUGFuZWxBcnJheSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5sb2NhbFN0b3JhZ2VLZXkpKTtcclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZpbHRlclBhbmVsQXJyYXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyUGFuZWxBcnJheSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZpbHRlclBhbmVsQXJyYXkgfHwgIWZpbHRlclBhbmVsQXJyYXlbc3RvcmFnZWxhYmVsQ29kZV0gfHwgIWZpbHRlclBhbmVsQXJyYXlbc3RvcmFnZWxhYmVsQ29kZV0ubGVuZ3RoICYmIGZhcnJpc1NlYXJjaFJlY29yZCAmJiBmYXJyaXNTZWFyY2hSZWNvcmQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmFycmlzU2VhcmNoUmVjb3JkQXJyYXkucHVzaChmYXJyaXNTZWFyY2hSZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmFycmlzU2VhcmNoUmVjb3JkQXJyYXkgPSBmaWx0ZXJQYW5lbEFycmF5W3N0b3JhZ2VsYWJlbENvZGVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IGZpbHRlclBhbmVsQXJyYXlbc3RvcmFnZWxhYmVsQ29kZV0uaW5kZXhPZihmYXJyaXNTZWFyY2hSZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IDAgJiYgZmFycmlzU2VhcmNoUmVjb3JkICYmIGZhcnJpc1NlYXJjaFJlY29yZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFycmlzU2VhcmNoUmVjb3JkQXJyYXkudW5zaGlmdChmYXJyaXNTZWFyY2hSZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmYXJyaXNTZWFyY2hSZWNvcmRBcnJheSA9IGZhcnJpc1NlYXJjaFJlY29yZEFycmF5LnNsaWNlKDAsIDYpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlclBhbmVsQXJyYXkgPT0gbnVsbCkgZmlsdGVyUGFuZWxBcnJheSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyUGFuZWxBcnJheVtzdG9yYWdlbGFiZWxDb2RlXSA9IGZhcnJpc1NlYXJjaFJlY29yZEFycmF5O1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5sb2NhbFN0b3JhZ2VLZXksIEpTT04uc3RyaW5naWZ5KGZpbHRlclBhbmVsQXJyYXkpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuICAgICAgICAvL+WIpOaWremrmOe6p+etm+mAiemHjOaYr+WQpuW3suS/ruaUuVxyXG4gICAgICAgIGxldCBleHRlbmRBbWVuZGVkTGlzdCA9IHRoaXMuZXh0ZW5kRmlsdGVyTGlzdC5maWx0ZXIoaXRlbSA9PiB7IHJldHVybiBpdGVtLmZpbGxlZCB9KTtcclxuICAgICAgICBpZiAoZXh0ZW5kQW1lbmRlZExpc3QgJiYgZXh0ZW5kQW1lbmRlZExpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd0V4cGFuZFRhZyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dFeHBhbmRUYWcgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5leHRlbmRGaWx0ZXJMaXN0U3RvcmUgPSB0aGlzLmV4dGVuZEZpbHRlckxpc3QubWFwKG8gPT4gKHsgLi4ubyB9KSk7XHJcbiAgICAgICAgdGhpcy5leHRlbmRGaWx0ZXJMaXN0U3RvcmUuZm9yRWFjaChmaWVsZCA9PiB7XHJcbiAgICAgICAgICAgIGxldCBleHRlbmRMaXN0SW5kZXggPSB0aGlzLmxpc3RGaWx0ZXJDb25kaXRpb25zLmZpbmRJbmRleChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtWydpZCddID09IGZpZWxkWydpZCddO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGV4dGVuZExpc3RJbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RGaWx0ZXJDb25kaXRpb25zW2V4dGVuZExpc3RJbmRleF0gPSBmaWVsZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMubGlzdEZpbHRlckNvbmRpdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuc2VhcmNoQ2hhbmdlLmVtaXQodGhpcy5saXN0RmlsdGVyQ29uZGl0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5pblNldEN1cnJlbnRGaWx0ZXJDb25kaXRpb25zKCk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJMaXN0Q2xhc3NpZnkoKTtcclxuICAgICAgICB0aGlzLmZhcnJpc3NpZGViYXIuaXNPcGVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5mbG9hdFBhbmVsT3BlbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XHJcbiAgICAgICAgdGhpcy5zdWJtaXQoJ2V4dGVuZEZvcm1EYXRhJywgdGhpcy5saXN0RmlsdGVyQ29uZGl0aW9ucyk7XHJcbiAgICB9XHJcbiAgICAvKiog5o+Q5Lqk6KGo5Y2VICovXHJcbiAgICBzdWJtaXQodHlwZSwgZmlsdGVybGlzdCwgZmlsdGVySXRlbSA9IG51bGwpIHtcclxuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCAhdGhpcy5zaG93Q2FuU3VibWl0IHx8ICF0aGlzLmFkdmFuY2VkQ2FuU3VibWl0KSB7IHJldHVybjsgfVxyXG4gICAgICAgIGNvbnN0IHF1ZXJ5TGlzdCA9IHRoaXMuaGFuZGxlci5zZXRGaWx0ZXJDb25kaXRpb25zKGZpbHRlcmxpc3QpO1xyXG4gICAgICAgIHRoaXMucXVlcnkuZW1pdCh7IHR5cGU6IHR5cGUsIGRhdGE6IEpTT04uc3RyaW5naWZ5KHF1ZXJ5TGlzdCksIGZpbHRlckl0ZW0gfSk7XHJcbiAgICB9XHJcbiAgICAvKiog6K6+572u562b6YCJ5Yid5aeL5YC8ICovXHJcbiAgICBzZXRGaWx0ZXJWYWx1ZShmaWVsZENvbmZpZ3M6IEZpZWxkQ29uZmlnW10pIHtcclxuICAgICAgICB0aGlzLmxpc3RGaWx0ZXJDb25kaXRpb25zID0gdGhpcy5zdGFnTGlzdEZpbHRlckNvbmRpdGlvbnMubWFwKG8gPT4gKHsgLi4ubyB9KSk7XHJcbiAgICAgICAgaWYgKHRoaXMubGlzdEZpbHRlckNvbmRpdGlvbnMgJiYgdGhpcy5saXN0RmlsdGVyQ29uZGl0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZXModGhpcy5saXN0RmlsdGVyQ29uZGl0aW9ucywgZmllbGRDb25maWdzKTtcclxuICAgICAgICAgICAgbGV0IGxpc3RGaWx0ZXIgPSB0aGlzLmxpc3RGaWx0ZXJDb25kaXRpb25zLm1hcChvID0+ICh7IC4uLm8gfSkpO1xyXG4gICAgICAgICAgICB0aGlzLmxpc3RGaWx0ZXJDb25kaXRpb25zID0gbGlzdEZpbHRlcjtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJMaXN0Q2xhc3NpZnkoKTtcclxuICAgICAgICAgICAgdGhpcy5zZWFyY2hDaGFuZ2UuZW1pdCh0aGlzLmxpc3RGaWx0ZXJDb25kaXRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5pblNldEN1cnJlbnRGaWx0ZXJDb25kaXRpb25zKCk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMubGlzdFNlYXJjaCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcclxuICAgICAgICAgICAgdGhpcy5jYW5TdWJtaXQgPSB0aGlzLmNhblN1Ym1pdEZpbHRlcih0aGlzLnJlcXVpcmVkTGlzdEZpbHRlcik7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5jYW5TdWJtaXQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnN1Ym1pdCgnc2hvd0Zvcm1EYXRhJywgdGhpcy5saXN0RmlsdGVyQ29uZGl0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDmuIXnqbrnrZvpgInmn5DkuIDpoblcclxuICAgICAqIEBwYXJhbSBsYWJlbENvZGUg5a2X5q6157yW5Y+35ZSv5LiA5qCH6K+GXHJcbiAgICAgKi9cclxuICAgIHJlc2V0RmlsdGVyVmFsdWUobGFiZWxDb2RlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAobGFiZWxDb2RlICYmIHRoaXMubGlzdEZpbHRlckNvbmRpdGlvbnMgJiYgdGhpcy5saXN0RmlsdGVyQ29uZGl0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgbGV0IHJlc2V0Q29uZGl0aW9uID0gdGhpcy5saXN0RmlsdGVyQ29uZGl0aW9ucy5maW5kKChjb25kaXRpb25zKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uZGl0aW9uc1snZmllbGRDb2RlJ10gPT09IGxhYmVsQ29kZTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgaWYgKHJlc2V0Q29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0TGlzdENvbmRpdGlvbihyZXNldENvbmRpdGlvbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlckxpc3RDbGFzc2lmeSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoQ2hhbmdlLmVtaXQodGhpcy5saXN0RmlsdGVyQ29uZGl0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluU2V0Q3VycmVudEZpbHRlckNvbmRpdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWR2YW5jZWRDYW5TdWJtaXQgPSB0aGlzLmNhblN1Ym1pdEZpbHRlcih0aGlzLmV4dGVuZFJlcXVpcmVkTGlzdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1Ym1pdCgncGFuZWxGb3JtRGF0YScsIHRoaXMubGlzdEZpbHRlckNvbmRpdGlvbnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOiuvue9rnZhbHVlXHJcbiAgICBzZXRWYWx1ZXMoY29uZGl0aW9ucywgZmllbGRDb25maWdzOiBGaWVsZENvbmZpZ1tdKSB7XHJcbiAgICAgICAgbGV0IHFjOiBRdWVyeUNvbmRpdGlvbjtcclxuICAgICAgICBsZXQgY29udHJvbFR5cGU6IHN0cmluZztcclxuICAgICAgICBpZiAoZmllbGRDb25maWdzICYmIGZpZWxkQ29uZmlncy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZmllbGRDb25maWdzLmZvckVhY2godiA9PiB7XHJcbiAgICAgICAgICAgICAgICBxYyA9IGNvbmRpdGlvbnMuZmluZChjID0+IGMuZmllbGRDb2RlID09IHYubGFiZWxDb2RlKTtcclxuICAgICAgICAgICAgICAgIGlmIChxYykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xUeXBlID0gdGhpcy5nZXRDb250cm9sVHlwZShxYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcWMudmFsdWUgPSB0aGlzLmZpbHRlclNlcnZpY2Uuc2V0VmFsdWVzKGNvbnRyb2xUeXBlLCB2LnZhbHVlLCBxYy5jb250cm9sLnNpbmdsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcWMudmFsdWVUZXh0ID0gcWMudmFsdWUuZ2V0VmFsdWVUZXh0KHFjLmNvbnRyb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2LnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHFjLmZpbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VmFsdWUoZmllbGROYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBxdWVyeUxpc3QgPSB0aGlzLmhhbmRsZXIuc2V0RmlsdGVyQ29uZGl0aW9ucyh0aGlzLmxpc3RGaWx0ZXJDb25kaXRpb25zKTtcclxuICAgICAgICBjb25zdCBpdGVtID0gcXVlcnlMaXN0LmZpbmQoKG46IGFueSkgPT4gblsnRmlsdGVyRmllbGQnXSA9PT0gZmllbGROYW1lKTtcclxuICAgICAgICBpZiAoaXRlbSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbS52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluaOp+S7tuexu+Wei1xyXG4gICAgICogQHBhcmFtIHNlbGVjdGVkRmllbGRDb25kaXRpb24gXHJcbiAgICAgKi9cclxuICAgIGdldENvbnRyb2xUeXBlKHNlbGVjdGVkRmllbGRDb25kaXRpb246IFF1ZXJ5Q29uZGl0aW9uKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoc2VsZWN0ZWRGaWVsZENvbmRpdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRGaWVsZENvbmRpdGlvbi5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT0gQ29udHJvbFR5cGUuVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdpbnB1dCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2VsZWN0ZWRGaWVsZENvbmRpdGlvbi5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT0gQ29udHJvbFR5cGUuU2VhcmNoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NlYXJjaCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2VsZWN0ZWRGaWVsZENvbmRpdGlvbi5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT0gQ29udHJvbFR5cGUuRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdkYXRlJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzZWxlY3RlZEZpZWxkQ29uZGl0aW9uLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PSBDb250cm9sVHlwZS5Nb250aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdtb250aCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2VsZWN0ZWRGaWVsZENvbmRpdGlvbi5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT0gQ29udHJvbFR5cGUuWWVhcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICd5ZWFyJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzZWxlY3RlZEZpZWxkQ29uZGl0aW9uLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PSBDb250cm9sVHlwZS5EYXRlUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnZGF0ZXJhbmdlJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzZWxlY3RlZEZpZWxkQ29uZGl0aW9uLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PSBDb250cm9sVHlwZS5Nb250aFJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ21vbnRocmFuZ2UnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNlbGVjdGVkRmllbGRDb25kaXRpb24uY29udHJvbC5nZXRDb250cm9sVHlwZSgpID09IENvbnRyb2xUeXBlLlllYXJSYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICd5ZWFycmFuZ2UnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNlbGVjdGVkRmllbGRDb25kaXRpb24uY29udHJvbC5nZXRDb250cm9sVHlwZSgpID09IENvbnRyb2xUeXBlLkRhdGVSYW5nZVRpbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnZGF0ZXJhbmdldGltZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2VsZWN0ZWRGaWVsZENvbmRpdGlvbi5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT0gQ29udHJvbFR5cGUuRHJvcERvd24pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnZHJvcGRvd24nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNlbGVjdGVkRmllbGRDb25kaXRpb24uY29udHJvbC5nZXRDb250cm9sVHlwZSgpID09IENvbnRyb2xUeXBlLk51bWJlclJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ251bWJlcic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2VsZWN0ZWRGaWVsZENvbmRpdGlvbi5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT0gQ29udHJvbFR5cGUuSGVscCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoZWxwJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzZWxlY3RlZEZpZWxkQ29uZGl0aW9uLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PSBDb250cm9sVHlwZS5DaGVja2JveEdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2NoZWNrYm94Z3JvdXAnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNlbGVjdGVkRmllbGRDb25kaXRpb24uY29udHJvbC5nZXRDb250cm9sVHlwZSgpID09IENvbnRyb2xUeXBlLlJhZGlvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3JhZGlvJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzZWxlY3RlZEZpZWxkQ29uZGl0aW9uLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PSBDb250cm9sVHlwZS5JbnB1dEdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2lucHV0LWdyb3VwJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzZWxlY3RlZEZpZWxkQ29uZGl0aW9uLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PSBDb250cm9sVHlwZS5OdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnc2luZ2xlbnVtYmVyJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzZWxlY3RlZEZpZWxkQ29uZGl0aW9uLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PSBDb250cm9sVHlwZS5GbGV4aWJsZU51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdmbGV4aWJsZW51bWJlcic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2VsZWN0ZWRGaWVsZENvbmRpdGlvbi5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT0gQ29udHJvbFR5cGUuRmxleGlibGVEYXRlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2ZsZXhpYmxlZGF0ZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2lucHV0JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOabtOaWsOS4iuS4i+aWh+S4reetm+mAieaVsOaNrlxyXG4gICAgICovXHJcbiAgICBpblNldEN1cnJlbnRGaWx0ZXJDb25kaXRpb25zKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmZpbHRlckhhbmRsZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJIYW5kbGVyLnNldEN1cnJlbnRGaWx0ZXJDb25kaXRpb25zKHRoaXMubGlzdEZpbHRlckNvbmRpdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog5riF56m65p2h5Lu2ICovXHJcbiAgICByZXNldExpc3RDb25kaXRpb24obGlzdEZpbHRlckNvbmRpdGlvbjogUXVlcnlDb25kaXRpb24pIHtcclxuICAgICAgICBpZiAobGlzdEZpbHRlckNvbmRpdGlvbi5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT0gQ29udHJvbFR5cGUuVGV4dCkge1xyXG4gICAgICAgICAgICBsaXN0RmlsdGVyQ29uZGl0aW9uLnZhbHVlID0gbmV3IFRleHRWYWx1ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChsaXN0RmlsdGVyQ29uZGl0aW9uLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PSBDb250cm9sVHlwZS5TZWFyY2gpIHtcclxuICAgICAgICAgICAgbGlzdEZpbHRlckNvbmRpdGlvbi52YWx1ZSA9IG5ldyBTZWFyY2hWYWx1ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChsaXN0RmlsdGVyQ29uZGl0aW9uLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PSBDb250cm9sVHlwZS5EYXRlKSB7XHJcbiAgICAgICAgICAgIGxpc3RGaWx0ZXJDb25kaXRpb24udmFsdWUgPSBuZXcgRGF0ZVZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxpc3RGaWx0ZXJDb25kaXRpb24uY29udHJvbC5nZXRDb250cm9sVHlwZSgpID09IENvbnRyb2xUeXBlLk1vbnRoKSB7XHJcbiAgICAgICAgICAgIGxpc3RGaWx0ZXJDb25kaXRpb24udmFsdWUgPSBuZXcgTW9udGhWYWx1ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChsaXN0RmlsdGVyQ29uZGl0aW9uLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PSBDb250cm9sVHlwZS5ZZWFyKSB7XHJcbiAgICAgICAgICAgIGxpc3RGaWx0ZXJDb25kaXRpb24udmFsdWUgPSBuZXcgWWVhclZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxpc3RGaWx0ZXJDb25kaXRpb24uY29udHJvbC5nZXRDb250cm9sVHlwZSgpID09IENvbnRyb2xUeXBlLkRhdGVSYW5nZSkge1xyXG4gICAgICAgICAgICBsaXN0RmlsdGVyQ29uZGl0aW9uLnZhbHVlID0gbmV3IERhdGVSYW5nZVZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxpc3RGaWx0ZXJDb25kaXRpb24uY29udHJvbC5nZXRDb250cm9sVHlwZSgpID09IENvbnRyb2xUeXBlLk1vbnRoUmFuZ2UpIHtcclxuICAgICAgICAgICAgbGlzdEZpbHRlckNvbmRpdGlvbi52YWx1ZSA9IG5ldyBNb250aFJhbmdlVmFsdWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGlzdEZpbHRlckNvbmRpdGlvbi5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT0gQ29udHJvbFR5cGUuWWVhclJhbmdlKSB7XHJcbiAgICAgICAgICAgIGxpc3RGaWx0ZXJDb25kaXRpb24udmFsdWUgPSBuZXcgWWVhclJhbmdlVmFsdWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGlzdEZpbHRlckNvbmRpdGlvbi5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT0gQ29udHJvbFR5cGUuRHJvcERvd24pIHtcclxuICAgICAgICAgICAgbGlzdEZpbHRlckNvbmRpdGlvbi52YWx1ZSA9IG5ldyBEcm9wRG93bkxpc3RWYWx1ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChsaXN0RmlsdGVyQ29uZGl0aW9uLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PSBDb250cm9sVHlwZS5OdW1iZXJSYW5nZSkge1xyXG4gICAgICAgICAgICBsaXN0RmlsdGVyQ29uZGl0aW9uLnZhbHVlID0gbmV3IE51bWJlclJhbmdlVmFsdWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGlzdEZpbHRlckNvbmRpdGlvbi5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT0gQ29udHJvbFR5cGUuSGVscCkge1xyXG4gICAgICAgICAgICBsaXN0RmlsdGVyQ29uZGl0aW9uLnZhbHVlID0gbmV3IEhlbHBWYWx1ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChsaXN0RmlsdGVyQ29uZGl0aW9uLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PSBDb250cm9sVHlwZS5DaGVja2JveEdyb3VwKSB7XHJcbiAgICAgICAgICAgIGxpc3RGaWx0ZXJDb25kaXRpb24udmFsdWUgPSBuZXcgQ2hlY2tib3hHcm91cFZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxpc3RGaWx0ZXJDb25kaXRpb24uY29udHJvbC5nZXRDb250cm9sVHlwZSgpID09IENvbnRyb2xUeXBlLlJhZGlvKSB7XHJcbiAgICAgICAgICAgIGxpc3RGaWx0ZXJDb25kaXRpb24udmFsdWUgPSBuZXcgUmFkaW9Hcm91cFZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxpc3RGaWx0ZXJDb25kaXRpb24uY29udHJvbC5nZXRDb250cm9sVHlwZSgpID09IENvbnRyb2xUeXBlLklucHV0R3JvdXApIHtcclxuICAgICAgICAgICAgbGlzdEZpbHRlckNvbmRpdGlvbi52YWx1ZSA9IG5ldyBJbnB1dEdyb3VwVmFsdWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGlzdEZpbHRlckNvbmRpdGlvbi5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT0gQ29udHJvbFR5cGUuTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGxpc3RGaWx0ZXJDb25kaXRpb24udmFsdWUgPSBuZXcgTnVtYmVyVmFsdWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGlzdEZpbHRlckNvbmRpdGlvbi5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT0gQ29udHJvbFR5cGUuRmxleGlibGVOdW1iZXIpIHtcclxuICAgICAgICAgICAgbGlzdEZpbHRlckNvbmRpdGlvbi52YWx1ZSA9IG5ldyBGbGV4aWJsZU51bWJlclZhbHVlKHsgc3RhcnRWYWx1ZTogbnVsbCwgZW5kVmFsdWU6IG51bGwsIHZhbHVlOiBudWxsIH0sIGxpc3RGaWx0ZXJDb25kaXRpb24uY29udHJvbC5zaW5nbGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChsaXN0RmlsdGVyQ29uZGl0aW9uLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PSBDb250cm9sVHlwZS5GbGV4aWJsZURhdGUpIHtcclxuICAgICAgICAgICAgbGlzdEZpbHRlckNvbmRpdGlvbi52YWx1ZSA9IG5ldyBGbGV4aWJsZURhdGVWYWx1ZSh7IHN0YXJ0VmFsdWU6IG51bGwsIGVuZFZhbHVlOiBudWxsLCB2YWx1ZTogbnVsbCB9LCBsaXN0RmlsdGVyQ29uZGl0aW9uLmNvbnRyb2wuc2luZ2xlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxpc3RGaWx0ZXJDb25kaXRpb24udmFsdWUgPSBuZXcgVGV4dFZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpc3RGaWx0ZXJDb25kaXRpb24udmFsdWVUZXh0ID0gJyc7XHJcbiAgICAgICAgbGlzdEZpbHRlckNvbmRpdGlvbi5maWxsZWQgPSBmYWxzZTtcclxuICAgICAgICAvLyByZXR1cm4gbGlzdEZpbHRlckNvbmRpdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICByZXNldFNlYXJjaCgpIHtcclxuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkgeyByZXR1cm47IH1cclxuICAgICAgICBpZiAodGhpcy5saXN0RmlsdGVyQ29uZGl0aW9ucyAmJiB0aGlzLmxpc3RGaWx0ZXJDb25kaXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmxpc3RGaWx0ZXJDb25kaXRpb25zLmZvckVhY2gobGlzdEZpbHRlckNvbmRpdGlvbiA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0TGlzdENvbmRpdGlvbihsaXN0RmlsdGVyQ29uZGl0aW9uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMubGlzdEZpbHRlckNvbmRpdGlvbnMgPSB0aGlzLmxpc3RGaWx0ZXJDb25kaXRpb25zLm1hcChvID0+ICh7IC4uLm8gfSkpO1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlckxpc3RDbGFzc2lmeSgpO1xyXG4gICAgICAgICAgICB0aGlzLnNob3dDYW5TdWJtaXQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnN1Ym1pdCgncGFuZWxGb3JtRGF0YScsIHRoaXMubGlzdEZpbHRlckNvbmRpdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlc2V0Q2hhbmdlLmVtaXQoKTtcclxuICAgICAgICB0aGlzLnNob3dFeHBhbmRUYWcgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog6auY57qn562b6YCJ5riF56m6562b6YCJXHJcbiAgICAgKi9cclxuICAgIHJlc2V0QWR2YW5jZWRTZWFyY2goKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZXh0ZW5kRmlsdGVyTGlzdCAmJiB0aGlzLmV4dGVuZEZpbHRlckxpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5kRmlsdGVyTGlzdC5mb3JFYWNoKGxpc3RGaWx0ZXJDb25kaXRpb24gPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldExpc3RDb25kaXRpb24obGlzdEZpbHRlckNvbmRpdGlvbik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5kRmlsdGVyTGlzdCA9IHRoaXMuZXh0ZW5kRmlsdGVyTGlzdC5tYXAobyA9PiAoeyAuLi5vIH0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZXh0ZW5kUmVxdWlyZWRMaXN0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmFkdmFuY2VkQ2FuU3VibWl0ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogdmFsdWVUZXh0IOeJueauiuexu+Wei+WkhOeQhlxyXG4gICAgICogQHBhcmFtIGl0ZW0gXHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlVGV4dChpdGVtOiBRdWVyeUNvbmRpdGlvbikge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGl0ZW0uZmllbGROYW1lLGl0ZW0uY29udHJvbC5nZXRDb250cm9sVHlwZSgpKTtcclxuICAgICAgICBpZiAoaXRlbS5jb250cm9sLmdldENvbnRyb2xUeXBlKCkgPT09IENvbnRyb2xUeXBlLkRyb3BEb3duKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVudW1WYWx1ZSA9IChpdGVtLmNvbnRyb2wgYXMgRHJvcERvd25Db250cm9sKS5lbnVtVmFsdWVzO1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IChpdGVtLnZhbHVlIGFzIERyb3BEb3duTGlzdFZhbHVlKS52YWx1ZTtcclxuICAgICAgICAgICAgaWYgKGVudW1WYWx1ZSAmJiBlbnVtVmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0cyA9IGVudW1WYWx1ZS5maW5kKHZhbCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbFsndmFsdWUnXSA9PSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRleHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS52YWx1ZVRleHQgPSB0ZXh0c1snbmFtZSddO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGl0ZW0uY29udHJvbC5nZXRDb250cm9sVHlwZSgpID09PSBDb250cm9sVHlwZS5DaGVja2JveEdyb3VwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVudW1WYWx1ZSA9IChpdGVtLmNvbnRyb2wgYXMgQ2hlY2tib3hHcm91cENvbnRyb2wpLmVudW1WYWx1ZXM7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gKGl0ZW0udmFsdWUgYXMgQ2hlY2tib3hHcm91cFZhbHVlKS52YWx1ZTtcclxuICAgICAgICAgICAgaWYgKGVudW1WYWx1ZSAmJiBlbnVtVmFsdWUubGVuZ3RoICYmIHZhbHVlICYmIHZhbHVlWydsZW5ndGgnXSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtLmNvbnRyb2wuYm9vbGNoZWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS52YWx1ZVRleHQgPSB2YWx1ZVswXS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnZhbHVlVGV4dCA9PSAndHJ1ZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS52YWx1ZVRleHQgPSB0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoJ3RleHQueWVzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnZhbHVlVGV4dCA9PSAnZmFsc2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udmFsdWVUZXh0ID0gdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCd0ZXh0Lm5vJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHRzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gdmFsdWVbJ2xlbmd0aCddOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW51bXMgPSBlbnVtVmFsdWUuZmluZCh2YWwgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbFsndmFsdWUnXSA9PSB2YWx1ZVtpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnVtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHMucHVzaChlbnVtc1snbmFtZSddKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpdGVtLnZhbHVlVGV4dCA9IHRleHRzLmpvaW4oJywnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpdGVtLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PT0gQ29udHJvbFR5cGUuUmFkaW8pIHtcclxuICAgICAgICAgICAgY29uc3QgZW51bVZhbHVlID0gKGl0ZW0uY29udHJvbCBhcyBSYWRpb0NvbnRyb2wpLmVudW1WYWx1ZXM7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gKGl0ZW0udmFsdWUgYXMgUmFkaW9Hcm91cFZhbHVlKS52YWx1ZTtcclxuICAgICAgICAgICAgaWYgKGVudW1WYWx1ZSAmJiBlbnVtVmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0cyA9IGVudW1WYWx1ZS5maW5kKHZhbCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbFsndmFsdWUnXSA9PSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRleHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS52YWx1ZVRleHQgPSB0ZXh0c1snbmFtZSddO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnZhbHVlVGV4dCA9PSAndHJ1ZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS52YWx1ZVRleHQgPSB0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoJ3RleHQueWVzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnZhbHVlVGV4dCA9PSAnZmFsc2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udmFsdWVUZXh0ID0gdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCd0ZXh0Lm5vJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSA9PSBDb250cm9sVHlwZS5JbnB1dEdyb3VwKSB7XHJcbiAgICAgICAgICAgIGl0ZW0udmFsdWVUZXh0ID0gaXRlbS52YWx1ZS5nZXRWYWx1ZVRleHQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYnVpbGRTbWFydEhlbHBLZXkodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmKHRoaXMuaWRTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgIGxldCBwcmVmaXggPSAnJztcclxuICAgICAgICAgICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGhBcnIgPSBsb2NhdGlvbi5oYXNoLnNwbGl0KCc/Jyk7XHJcbiAgICAgICAgICAgICAgICBwcmVmaXggPSBwYXRoQXJyID8gcGF0aEFyclswXSA6ICcnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aEFyciAgPSBsb2NhdGlvbi5wYXRobmFtZS5zcGxpdCgnLycpO1xyXG4gICAgICAgICAgICAgICAgcHJlZml4ID0gcGF0aEFyciA/IHBhdGhBcnJbcGF0aEFyci5sZW5ndGggLSAxXSA6ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlkU2VydmljZS5lbmNyeXB0KHByZWZpeCArICcvbGlzdC1maWx0ZXIvJyArIHZhbHVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJ2xpc3QtZmlsdGVyLycgKyB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4iXX0=