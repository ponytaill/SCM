{"version":3,"sources":["ng://@farris/kendo-binding/lib/converters/array_converter.ts","ng://@farris/kendo-binding/lib/converters/date_converter.ts","ng://@farris/kendo-binding/lib/converters/multi_lang_converter.ts","ng://@farris/kendo-binding/lib/converters/filter_conditions_converter.ts","node_modules/tslib/tslib.es6.js","ng://@farris/kendo-binding/lib/format/datatable-kendogrid-format.ts","ng://@farris/kendo-binding/lib/format/treetable-format.ts","ng://@farris/kendo-binding/lib/format/string-to-date.pipe.ts","ng://@farris/kendo-binding/lib/format/kendogrid-filter.ts","ng://@farris/kendo-binding/lib/format/dateformat-placeholder.pipe.ts","ng://@farris/kendo-binding/lib/format/kendogrid-group.pipe.ts","ng://@farris/kendo-binding/lib/directives/grid-summary.directive.ts","ng://@farris/kendo-binding/lib/util/multi_select_grid_utility.ts","ng://@farris/kendo-binding/lib/entity/selected_row_context.ts","ng://@farris/kendo-binding/lib/directives/kendo_grid_binding.directive.ts","ng://@farris/kendo-binding/lib/directives/tree_table_node_builder/path_tree_node_builder.ts","ng://@farris/kendo-binding/lib/directives/tree_table_node_builder/parent_tree_node_builder.ts","ng://@farris/kendo-binding/lib/directives/tree_table_node_builder/tree_node_builder_factory.ts","ng://@farris/kendo-binding/lib/directives/farris_tree_table_binding.directive.ts","ng://@farris/kendo-binding/lib/directives/data-mapping.ts","ng://@farris/kendo-binding/lib/directives/lookup-data-mapping.directive.ts","ng://@farris/kendo-binding/lib/directives/lookup-enable-extend-load-method.directive.ts","ng://@farris/kendo-binding/lib/directives/uistate-binding.directive.ts","ng://@farris/kendo-binding/lib/directives/farris-kendogrid-disabled.directive.ts","ng://@farris/kendo-binding/lib/directives/farris-sort.directive.ts","ng://@farris/kendo-binding/lib/directives/farris-datagrid/farris-datagrid-use-binding-data.directive.ts","ng://@farris/kendo-binding/lib/directives/multi-select-data-mapping.directive.ts","ng://@farris/kendo-binding/lib/directives/list-view/farris_listview_binding.directive.ts","ng://@farris/kendo-binding/lib/directives/farris-datagrid/editable.directive.ts","ng://@farris/kendo-binding/lib/directives/end-edit/abstract_end_edit.ts","ng://@farris/kendo-binding/lib/directives/end-edit/input_end_edit.directive.ts","ng://@farris/kendo-binding/lib/directives/end-edit/farris_data_grid_end_edit.directive.ts","ng://@farris/kendo-binding/lib/directives/end-edit/html_editor_end_edit.directive.ts","ng://@farris/kendo-binding/lib/directives/end-edit/kendo_grid_end_edit.directive.ts","ng://@farris/kendo-binding/lib/directives/farris-datagrid/remote-summary.directive.ts","ng://@farris/kendo-binding/lib/directives/farris-set-focus.directive.ts","ng://@farris/kendo-binding/lib/directives/file-preview/farris-file-preview-binding.directive.ts","ng://@farris/kendo-binding/lib/directives/discussion-group/farris_discussion_editor_binding.directive.ts","ng://@farris/kendo-binding/lib/directives/discussion-group/farris_discussion_list_binding.directive.ts","ng://@farris/kendo-binding/lib/directives/primeng-tree-grid/FarrisPrimengTreeTableBindingDirective.ts","ng://@farris/kendo-binding/lib/directives/dynamic_validate/farris_dynamic_validate.directive.ts","ng://@farris/kendo-binding/lib/directives/farris_editor.directive.ts","ng://@farris/kendo-binding/lib/directives/farris_querysolution_event_bind.directive.ts","ng://@farris/kendo-binding/lib/directives/localization/farris_date_localization.directive.ts","ng://@farris/kendo-binding/lib/directives/localization/farris_number_localization.directive.ts","ng://@farris/kendo-binding/lib/directives/localization/farris_time_localization.directive.ts","ng://@farris/kendo-binding/lib/directives/localization/farris_text_localization.directive.ts","ng://@farris/kendo-binding/lib/directives/farris_checkbox_modification.directive.ts","ng://@farris/kendo-binding/lib/directives/farris_label_modification.directive.ts","ng://@farris/kendo-binding/lib/directives/farris_lookup_binding.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/list-nav-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/list-view-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/list-filter-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/filter-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/view-change-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/html-editor-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/section-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/input-group-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/datepicker-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/time-picker-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/number-spinner-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/combo-list-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/combo-lookup-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/lookup-grid-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/datagrid-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/treetable-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/wizard-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/discussion-editor-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/discussion-list-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/nav-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/multi-select-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/scrollspy-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/combo-lookup-data-mapping.directive.ts","ng://@farris/kendo-binding/lib/directives/appointment-calendar/types.ts","ng://@farris/kendo-binding/lib/directives/portlet/types.ts","ng://@farris/kendo-binding/lib/directives/appointment-calendar/appointment-calendar-binding.directive.ts","ng://@farris/kendo-binding/lib/directives/portlet/portlet-filter-binding.directive.ts","ng://@farris/kendo-binding/lib/pipes/image-id-to-url.pipe.ts","ng://@farris/kendo-binding/lib/pipes/formatPrimeNgTreeTableCellData.ts","ng://@farris/kendo-binding/lib/pipes/localization.pipe.ts","ng://@farris/kendo-binding/lib/kendo_binding_module.ts"],"names":["ArrayConverter","prototype","convertFrom","value","split","this","separator","convertTo","join","DateConverter","DateUtil","isEmptyDateString","parse","Object","toString","call","year","getFullYear","length","repeat","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","format","MultiLangConverter","assign","multiLangControlValue","FilterConditionsConverter","conditionsString","JSON","conditions","stringify","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__assign","t","s","i","n","arguments","apply","__values","o","m","Symbol","iterator","next","done","__read","r","e","ar","push","error","__spread","concat","FarrisKendoGridFormatService","getColumnFormat","dataItem","column","getValue","type","getEnumText","getFormatDate","getFormatNumber","getMultiText","field","indexOf","reduce","result","tempColumnText","enumData","forEach","ele","name","dateFormat","dateService","formatTo","precision","parseInt","substr","editor","isNaN","opts","prefix","suffix","thousand","stripZeros","numberService","formatMoney","strValue","Error","replace","Injectable","DateTimeHelperService","NumberHelperService","FarrisTreetableFormatService","setFormat","treeTable","columns","dataType","formatter","options","data","valueField","textField","StringToDatePipe","transform","exponent","includes","strDate","Date","Pipe","args","tslib_1.__extends","BaseFilterCellComponent","defineProperty","KendoGridFilterDirective","filter","filterByField","dataField","ngOnInit","dropdownList","valuePrimitive","defaultItem","selectedValue","onChange","applyFilter","removeFilter","updateFilter","operator","Directive","selector","DropDownListComponent","FilterService","Input","HostListener","filterService","_this","_super","DateFormatPlaceholderPipe","controlName","viewModel","form","get","dateStr","toISOString","ViewModel","FormatTotalPipe","dataFormat","toFixed","Number","substring","GridColumnAggregateDirective","aggregate","recalculateSummary","bindingList","summary","aggrType","plainData","toJSON","map","item","prevPath","currPath","prev","curr","updateFooter","content","ColumnComponent","NgZone","ngZone","BindingData","GridSummaryDirective","bindingData","MultiSelectGridUtility","renderClickChangedRow","gridComponent","selectedRowContext","currentRowIndex","addRowSelectedStyle","lastRowIndex","checIfIsSameRelativeIndex","removeRowSelectedStyle","isSameRelativeIndex","Math","abs","checkIfEnablePaging","isPageable","pageable","renderSelectedChangeCheckbox","elementRef","$event","index","trCollection","getTrCollection","currentTableRowElement","selected","appendAtrributeValue","CHECKBOXED_ROW_STYLE_NAME","removeAttributeSpecificValue","rowIndex","currentRowElement","getRelativeRowInCurrentPage","CURRENT_ROW_STYLE_NAME","rowElementInCurrentPage","gridElement","wrapper","nativeElement","kendoGridTbodyElements","getElementsByTagName","currentElement","attributeName","attributeValue","newAttributeValue","getAttribute","setAttribute","needRemoveAttributeValue","lastClassAttributeValue","lastIndexOf","SelectedRowContext","KendoGridBindingDirective","DataBindingDirective","grid","selectable","isMultipleSelectionMode","selectableSettings","mode","bindingPath","list","filteredPaths","toLowerCase","part","getPagingInfo","pagingInfo","path","initDataState","refreshView","frameContext","frameComponent","componentType","ComponentType","kendoGridComponent","bindingChangeSubscription","changes","subscribe","change","ChangeType","Load","checkIfChangeMatchBindingPath","selectionDir","selectedKeys","uiState","setPropertyValue","runOutsideAngular","setTimeout","rowSelectedContext","skip","handleSelectedRowChange","Remove","syncDeletedKeys","isMatch","handleSelectedKeyChange","currentId","checkCurrentRowIdExists","SelectionChanged","dataId","renderCurrentRow","Append","editable","farrisBindingGridOption","gridColumns","lockable","some","frozen","rowClass","emit","element","linkedLabelEnabled","linkEvent","kendogridFormatSer","getClassName","dictPicking","param","of","dictPicked","cellClickHandler","cellClickParam","bindingGridOption","IsMultipleSelectionMode","self_1","ngAfterViewInit","changePathArray","bingdingPathArray","currentRowId","emitSelectedRowChange","splice","selectedKeysChange","selectedRowChange","isExist","deletedValueCollection","id","renderSelectionRow","ngOnChanges","ngOnDestroy","unsubscribe","refreshData","refreshSummary","bindData","_a","_b","pageIndex","_c","pageSize","updatePager","endCellEdit","ignoreMultiLangInput","isEditing","cancelCell","aggrColumns","aggrCol","onPageChange","event","take","setPagingInfo","resetPageInfo","aggregatesDes","groupAggrFields","tslib_1.__values","groupAggrField","group","groupField","aggregates","onStateChange","state","currentSkip","applyState","rebind","process","total","totalCount","isEditMode","processed","max","selectedKeysChangeHandler","setSelectionIdToBindingData","selectionChangeHandler","handleSelectedCheckboxChange","selectedCheckboxChange","cellClickEvent","columnIndex","sender","gridOption","groupable","getSelectedIdFromGrid","isEditable","editTemplate","isEdited","originColums","getColumns","fields","currentColumnIndex","findIndex","col","hiddenColLen","slice","visible","setEditable","getPrimary","row","isArray","rowNumber","primaryKey","cellCloseHandler","dialogSer","hasDialogOpened","preventDefault","rts","getFormState","originalEvent","eventPath","find","tagName","formGroup","currentCol","formControlValue","binding","getDynamicData","setValue","enterCell","shiftKey","keyCode","target","blur","enterNextCell","buttonCount","info","pageSizes","previousNext","columnNumber","dataRowNumber","getGroupItem","tempIndex","showLineNumber","params","notReadOnly","editCell","updateIndex","newColumnIndex","len","readonly","currentColumnType","fieldPaths","getFieldPaths","items","len_1","appendRow","observers","interVal","setInterval","clearInterval","key","setCurrentId","undefined","stateMachine","isDataChanged","hasUnsavedData","entityArray","repository","entityCollection","toArray","entityArray_1","entityArray_1_1","UIState","decorators","Optional","FrameEventBus","GridComponent","SelectionDirective","DialogService","RuntimeStateService","Output","ContentChildren","eventBus","EventEmitter","sortChangeEvent","appContext","getFormAppContext","messagePipe","message","closeCell","PathTreeNodeBuilder","context","updateTreeNode","allNodesData","initLevelGroup","buildNodesDataMap","build","tree","childrenOf","parentId","getParentId","isNewNode","expandParentNode","node","buildNode","children","allNodesMap","set","build1","minLayer","hierarchyInfo","getHierarchyInfo","layer","topLayer","buildNodes","allNodes","fPath","fLayer","treeNodes","getChildNodesData","nodeData","currentLayer","currentPath","isLeaf","shouldExpand","isExpanded","expandNode","paginationInfo","buildPaginationInfo","treeNode","expanded","leaf","pagination","pageCount","getNodeLayer","id_1","nodesWaitExpand","nodesShouldExpand","nodeId","expandLevel","oldTreeNode","getOldNode","getNodePath","childs","id_2","onTreeLoadComplete","component","findRowNode","childNodesData","startsWith","hierarchyInfoKey","levelGroup","parent","getLevelGroupKey","currentHierarchyInfo","isDetail","level","paths","newData","allOldNodesMap","size","parentTreeNode","getParentNode","from","values","currentNode","oldTreeNodes","addTreeLoadCompleteListener","bind","Map","ParentTreeNodeBuilder","parents","parentElement","keys","fParentElement","currentParentElement","getNodeParentElement","TreeNodeBuilderFactory","getBuilder","builder","FarrisTreeTableBindingDirective","_PROP","getVirtualRootFrameContext","setParam","ValueChanged","PaginationInfoChange","renderSubject","rowSelectedEventSuspend","setSelectedIdToTree","updateCheckedRows","treetableFormatSer","cellClass","setComponentRef","setNodePaginationInfo","registerEvent","farrisTreeTalbeComponent","columnSorted","sortName","sortOrder","remoteSort","sortBy","frameId","el","componentRefs","enableNodePagination","paginationForChildren","nodePageSize","treeNodesData","prop","treeExpandLevel","storage","treeNodesBuilder","updatePageInfo","listeners","listener","shouldComponentUpdate","newProp","getSelectedIdFromTree","selectedRow","selectedId","oldSelectedId","nodePageChanged","clearSelections","selectNode","delete","setCurrentIdToBindingList","oldCurrentId","multiSelect","setChecks","setCheckedRows","ids","getChecks","rows","otherPageItem","idOrIds","idField","checkValuesChange","checkValues","expandHandler","virtualRootFrameContext","expandNodes","getParam","onPageChanged","onPageSizeChanged","onNodePageChanged","TreeTableComponent","FrameContext","Subject","pipe","debounceTime","DataMapping","mappingData","helpData","mapFields","asClear","vm","changeDetectionController","detach","basePaths","primaryKeys","primaryFields","helpFields","getBindingPathArray","primaryInfo","getMapFieldsPrimaryKey","primaryField","sortMapFieldKeys","reverse","mapping","reattach","sortedKeyFields","targetPrimaryFields","val","getHelpValue","mappings","headMappings","leftMappings","updateTarget","targetFieldPath","updateTargetValue","clearValue","f","a","isNumberValue","currentVal","isNumber","bindingPaths","results","entityTypeInfo_1","entityTypeInfo","mapField","propInfo","getPropInfoByPath","metadataInfo","primary","console","Set","LookupDataMappingDirective","lookup","selectedData","_mapfields","mapfields","clearMappings","lookupTextField","ngControl","textFieldMapping","ngFormControl","ngFormControls","binding_1","clear","LookupGridComponent","Self","LookupEnableExtendLoadMethodDirective","enableExtendLoadMethod","befApiUrl","apiUri","enableKey","uri","UIStateBindingDirective","_bindingObject","differ","differs","onValueChange","hostComboComponent","bindingObject","hostHelpComponent","bindObjectToHostLookup","hostComboListComponent","bindObjectToHostComboList","hostComboLookupComponent","bindObjectToHostComboLookup","ngDoCheck","diff","bindingChanges","text","vField_1","writeValue","displayValue","selectedValues","updateHelpBindingObject","nosearch","valueChanged","txt","valueChange","selections","selectChange","emitUiStateBinding","newObject","c","UIStateBindingChange","ComboBoxComponent","Host","KeyValueDiffers","ComboListComponent","ComboLookupComponent","FarrisDisabledDirective","maskElement","createMaskElement","kendoGridDisabled","renderer","removeStyle","setStyle","createElement","appendChild","ElementRef","Renderer2","FarrisSortDirective","FarrisTextareaEditDirective","FarrisDynamicColumnFormatDirective","FarrisEditEnterDirective","FarrisTreeTableFormatDirective","FarrisDatagridUseBindingDataDirective","_PROPS","pageList","window","updateSelectedRow","registerBindingDataChangeEvent","renderGridSubject","isDisposed","farrisDataGridComponent","nodeCode","props","buildProps","runMode","RunMode","highSpeed","gridProps","buildGridProps","sortFields","sortDirection","entityType","dataTypeInfo_1","DataTypeInfo","directions","sortConditionManager","setConditions","sortDirections","sortBindingList","filterChanged","filters","remoteFilter","getIdByIndex","arrSortFields","arrSortDirection","isRemoteFilter","clearCondition","clientFilterService","executeFilter","GlobalSelectionChanged","firstRowId","renderGrid","virtualizedLoad","virtualizedAsyncLoad","controlPaginationState","loadVirtualData","loadData","datas","_d","onBindingDataChange","updateDataSource","updateData","gridSelectedRowId","selectGridRow","selectRow","bindingDataChangeEvent","unRegisterBindingDataChangeEvent","eventBindingPath","isRetrieve","fullPaths","EntityPathConverter","toEntityPathArray","configPath","getPaginationConfigByPath","parentNodeCode","parentConfigPath","parentPageSize","queryChild","finalize","fireSelectedRowChange","clearCheckedRows","clearCheckeds","scrollToCurrentRow","pageChangedHandler","selectedRowChanged","unSelected","checkedChanged","pageSizeChanged","scrollY","pager","DatagridComponent","MultiSelectDataMappingDirective","_this_1","multiSelectComponent","dataSource","originalDataSource","isTree","fjmField","plainToTree","fjdField","buildTreeNodesByFjd","getTreeSelectionsById","getListSelectionsById","selectIdBindingToUIStateField","selectedIdChange","selectedIdChanged","formatDataSource","plainSource","treeSource","recursive","parentPath","parentLayer","itemPath","itemLayer","targetPath","reusltObj","bindingObjects","treeData","MultiSelectComponent","FarrisListViewBindingDirective","setListViewPageProps","listview","supportPaging","supportPaged","currentPage","itemsPerPage","totalItems","paginationOptions","listViewChangeDetectRef","detectChanges","paginationDirective","instances","setTotalItems","changeDetectorRef","_e","setData","clickItem","changeRow","checkChangeEvent","activeIndex","pageInfo","pageSizeChangedHandler","ListViewComponent","EditableDirective","handleGroupStatus","gridEditable","disableHeader","handleBeginEditEvent","handleAfterEditEvent","handleEndEditEvent","sort","disableGroupOnEditing","groupFields","setGroupFields","groupField_1","pop","beginEditSubscription","beginEdit","editorInstance_1","componentRef","instance","mapFields_1","subject","lookupMapping","parentPaths","pathArr","afterEdit","rowData","formControl","endEditSubscription","endEdit","primaryValue","updateBindingData","isBigNumber","bigNumber","updateBindingList","propertyName","propertyNames","currentItem","primaryKeyValue","findById","targetBindingObject_1","fpaths","targetPropertyName","h","ff","Injector","injector","AbstractEndEdit","InputEndEditDirective","parent_1","parentNode","inputs","input","AppContext","FarrisDataGridEndEditDirective","datagrid","HtmlEditorEndEditDirective","HtmlEditorComponent","KendoGridEndEditDirective","FarrisDataGridRemoteSummaryDirective","execute","commandName","frameContextManager","getFrameContextById","remoteSummaryCommand","footerDataFrom","func_1","footerData","FarrisSetFocusDirective","_state","selfEl","nodeName","setHtmlEditorFocus","setFocus","querySelectorAll","focus","ediotrArea","querySelector","range","getSelection","selectAllChildren","collapseToEnd","rd","BehaviorSubject","FarrisFilePreviewBindingDirective","getList","uploadAndPreviewComponent","orderField","fileInfos","getFileInfos","listData","idKey","itemData","getValueByPath","fileId","fileIdKey","fileInfo","fileNameKey","fileSizeKey","createTime","fileCreateTimeKey","originalData","extend","metadataId","extendFileInfo","fileSortOrderKey","fileSortOrder","currentValue","getUdtPaths","previewComponent","FFilePreviewComponent","UploadAndPreviewComponent","KEY_UISTATE_REPLY_MESSAGE","FarrisDiscussionEditorBindingDirective","discussionEditorComponent","replyUser","root","queryFrequentAtUsersCommand","queryFrequentAtUsers","queryAtUsers","queryAllOrgs","queryAllOrgsCommand","sectionData","userQueryCommand","users","personnels","msgInfo","visibility","addCommentCommand","tap","catchError","EMPTY","func","DiscussionEditorComponent","FarrisDiscussionListBindingDirective","queryComments","discussionListComponent","commentsQueryCommand","comments","discussionListDirective","discussionListData","replyMessagedHandler","DiscussionListComponent","DiscussionListDirective","FarrisPrimengTreeTableBindingDirective","getHierarchyInfoField","infos","hierarchyInfoField","primengTreeComponent","getEntityArr","bindingPathArr","str","pathArray","getEntitiesByPath","setActualIndex","entityArr","counter","rootNode","traverseTree","entity","handleChange","handleSelectionChanged","handleValueChanged","frmPath","same","bindingPathArr_1","bindingPathArr_1_1","shift","nodes","targetNode","nodes_1","nodes_1_1","findTreeNodeById","keyValue","lazy","totalRecords","_value","sortMode","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","tableService","onUIUpdate","updateSerializedValue","treeTableSelectedEvent","selectedRowId","serializedValue","isSelected","handleRowClick","rowNode","onEditInitHandler","nodeSelectChange","onEditCompleteHandler","fieldName","oldValue","column_1","onNodeExpandHandler","onNodeCollapseHandler","onNodeSelectHandler","onNodeUnselectHandler","setNodeExpandedValue","oldTreeNodeMap","warn","getPaths","getValudChangeInvokerFactory","TreeTable","FarrisDynamicRequiredDirective","updateValidateRule","requiredOn","isRequired","updateFieldValidateRule","FarrisEditorDirective","EditorComponent","FarrisQuerySolutionEventBindDirective","onQuery","QuerySolutionComponent","FarrisDateLocalizationDirective","localize","userSettings","timeFormat","showTime","dateOpts","updateValue","Inject","UserSettingsToken","FarrisDatepickerComponent","FarrisNumberLocalizationDirective","NumberSpinnerComponent","FarrisTimeLocalizationDirective","TimePickerComponent","FarrisTextLocalizationDirective","beforeWriteValue","localizationType","transformValue","transformDate","transformDateTime","date","moment","isValid","parseDateFormat","dateTime","dateTimeFormat","parseTimeFormat","transformNumber","BigNumber","isNegative","buildNumberFormat","numberFormat","negativeSign","numberDecimalDigits","absoluteValue","toFormat","numberDecimalSeparator","numberGroupSeparator","groupSize","decimalSeparator","groupSeparator","TextComponent","FarrisCheckboxModificationDirective","token","FarrisLabelModificationDirective","labelFor","FarrisLookupBindingDirective","lookupType","comboLookup","ListNavComponentRefDirective","componentRefManager","add","ListNavComponent","ListViewComponentRefDirective","ListFilterComponentRefDirective","ListFilterComponent","FilterComponentRefDirective","FilterComponent","ViewChangeComponentRefDirective","ViewChangeComponent","HtmlEditorComponentRefDirective","SectionComponentRefDirective","FarrisSectionComponent","InputGroupComponentRefDirective","InputGroupComponent","DatepickerComponentRefDirective","TimePickerComponentRefDirective","NumberSpinnerComponentRefDirective","ComboListComponentRefDirective","ComboLookupComponentRefDirective","LookupGridComponentRefDirective","DatagridComponentRefDirective","TreetableComponentRefDirective","WizardComponentRefDirective","WizardComponent","DiscussionEditorComponentRefDirective","DiscussionListComponentRefDirective","NavComponentRefDirective","NavComponent","MultiSelectComponentRefDirective","ScrollspyComponentRefDirective","ScrollspyComponent","ComboLookupDataMappingDirective","onClearMapping","targetField","useFormDataMapping","ViewType","Repository","BefRepository","ExpressionType","AppointmentCalendarBindingDirective","restService","loadPlacements","calendarComponent","loadReserveData","url","body","requestInfo","buildRequestInfo","request","method","returnValue","bindPlacements","log","placments","loadPlaceData","updateState","startDate","endDate","viewType","startDateVariable","endDateVariable","viewTypeVariable","selectCalendarRow","selectItem","dateValue","place","week","sections","AppointmentCalendarComponent","DATA_PATTERN","DATA_PATTERN_GLOBAL","RegExp","UI_STATE_PATTERN","UI_STATE_PATTERN_GLOBAL","PortletFilterBindingDirective","Update","observeChanges","buildFilters","portletComponent","widget","handleFilterChange","deserializeFilter","dpId","FilterFieldKey","variableParseService","FilterValueKey","collectDependencies","expression","bindingDataDependencies","getBindingDataDependencies","uistateDependencies","getUIstateDependencies","matchs","match","buildDependencies","expressions","expr","expressionType","dependencies","pathMatches","dependency","buildDependency","exps","getFrameContext","getFrameId","dep","observeBindingDataChange","observeUIStateChange","PortletComponent","VariableParseService","ImageIdToUrlPipe","rootId","downloadService","getDownloadUrl","defaultPic","DownloadService","FormatPrimeNgTreeTableCellData","formatterFn","cfs","isMultilingualField","getMultiLanguageValue","valObj","localeService","localeId","obj","isHelpColumn","getHelpColumnValue","getHelpControlTextField","getHelpControlMapFields","pure","ColumnFormatService","LocaleService","Localization","NgModule","imports","CommonModule","FarrisCommonModule","forRoot","declarations","providers","exports","KendoBindingModule"],"mappings":"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,GACA6kC,GACAM,GACAngB,GACA+E,GACA4B,GACAwB,GACA1uB,GACA+B,GACAyvB,GACAM,GACAE,GACAE,GACAC,GACAyB,GACAhB,GACA6C,GACAqB,GACAU,GACAiE,GACAK,GACAE,GACAG,GACAU,GACAE,GACAE,GACAyK,GACA7I,GACAE,GACAE,GACAG,GACAI,GACAC,GACAI,GACAF,GACAK,GACAD,GACAG,GACAE,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAE,GACAC,GACAC,GACAE,GACAC,GACAE,GACAQ,GACAmC,IAEFiE,UAAW,CACT/zB,EAAAA,cAAeF,EAAAA,cAAe7X,GAA8BwC,IAC9DupC,QAAS,CACP1hC,GACAgU,GACAqH,GACAe,GACAM,GACAqC,GACAW,GACAE,GACAC,GACAF,GACAG,GACAjnB,GACA+C,GACAb,GACA6kC,GACAM,GACAngB,GACA+E,GACA4B,GACAwB,GACA1uB,GACA+B,GACAyvB,GACAM,GACAE,GACAE,GACAC,GACAyB,GACAhB,GACA6C,GACAqB,GACAU,GACAiE,GACAK,GACAE,GACAG,GACAU,GACAE,GACAE,GACAyK,GACA7I,GACAE,GACAE,GACAG,GACAI,GACAC,GACAI,GACAF,GACAK,GACAD,GACAG,GACAE,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAE,GACAC,GACAC,GACAE,GACAC,GACAE,GACAQ,GACAmC,QAIJmE,IAtJA,SAAAA","sourcesContent":["import { ControlValueConverter } from '@farris/devkit';\r\n\r\nclass ArrayConverter implements ControlValueConverter {\r\n\r\n  constructor(private separator: string = ',') {\r\n  }\r\n\r\n  convertFrom(value: string): string[] {\r\n    return value.split(this.separator);\r\n  }\r\n\r\n  convertTo(value: string[]): string {\r\n    return value.join(this.separator);\r\n  }\r\n}\r\n\r\nexport { ArrayConverter };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-29 10:26:58\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-10-29 15:49:12\r\n */\r\nimport { ControlValueConverter, DateUtil } from '@farris/devkit';\r\n\r\n/**\r\n * æ¥æè½¬æ¢å¨\r\n */\r\nclass DateConverter implements ControlValueConverter {\r\n\r\n  /**\r\n   * æé å½æ°\r\n   * @param format æ¥ææ ¼å¼\r\n   */\r\n  constructor(private format: string) {\r\n  }\r\n\r\n  /**\r\n   * å­ç¬¦ä¸²=> æ¥æ\r\n   * @param value å¾è½¬æ¢çå¼\r\n   */\r\n  convertFrom(value: string): Date {\r\n    if (DateUtil.isEmptyDateString(value) === true) {\r\n      return null;\r\n    }\r\n\r\n    return DateUtil.parse(value);\r\n  }\r\n\r\n  /**\r\n   * æ¥æ=>å­ç¬¦ä¸²\r\n   * @param value\r\n   */\r\n  convertTo(value: Date): string | any {\r\n    if (!value) {\r\n      return null;\r\n    }\r\n    // å¦ævalueä¸æ¯æ¥æç±»åï¼åä¸åå¤çï¼è¿ååå§value\r\n    if (Object.prototype.toString.call(value) !== '[object Date]') {\r\n      return value;\r\n    }\r\n    // å¹´\r\n    let year = value.getFullYear().toString();\r\n    year = year.length < 4 ? '0'.repeat(4 - year.length) + year : year;\r\n    // æ\r\n    let month = (value.getMonth() + 1).toString();\r\n    month = month.length === 1 ? ('0' + month) : month;\r\n\r\n    // æ¥\r\n    let day = value.getDate().toString();\r\n    day = day.length === 1 ? ('0' + day) : day;\r\n\r\n    // æ¶åç§\r\n    let hours = value.getHours().toString();\r\n    hours = hours.length === 1 ? ('0' + hours) : hours;\r\n\r\n    let minutes = value.getMinutes().toString();\r\n    minutes = minutes.length === 1 ? ('0' + minutes) : minutes;\r\n\r\n    let seconds = value.getSeconds().toString();\r\n    seconds = seconds.length === 1 ? ('0' + seconds) : seconds;\r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n  }\r\n}\r\nexport { DateConverter };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-29 10:26:58\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-10-29 15:49:12\r\n */\r\nimport { ControlValueConverter } from '@farris/devkit';\r\n\r\n/**\r\n * å¤è¯­è¨è½¬æ¢å¨\r\n */\r\nclass MultiLangConverter implements ControlValueConverter {\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * å°æ°æ®æºä¸­çåå§å¼=>å¤è¯­æ§ä»¶è¯å«çå¯¹è±¡å¼\r\n   */\r\n  public convertFrom(value: string): any {\r\n    const multiLangControlValue = Object.assign({}, value);\r\n    return multiLangControlValue;\r\n  }\r\n\r\n  /**\r\n   * å¤è¯­æ§ä»¶è¯å«çå¯¹è±¡å¼=>å°æ°æ®æºä¸­çåå§å¼\r\n   */\r\n  public convertTo(multiLangControlValue: any): any {\r\n    const value = multiLangControlValue;\r\n    return value;\r\n  }\r\n\r\n}\r\nexport { MultiLangConverter };\r\n","import { ControlValueConverter } from '@farris/devkit';\r\n\r\nclass FilterConditionsConverter implements ControlValueConverter {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  convertFrom(conditionsString: string): any[] {\r\n    if (!conditionsString) {\r\n      return [];\r\n    }\r\n    return JSON.parse(conditionsString);\r\n  }\r\n\r\n  convertTo(conditions: any[]): string {\r\n    return JSON.stringify(conditions);\r\n  }\r\n}\r\n\r\nexport { FilterConditionsConverter };\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DateTimeHelperService } from '@farris/ui-common/date';\r\nimport { NumberHelperService } from '@farris/ui-common/number';\r\nimport { DateUtil } from '@farris/devkit';\r\n\r\n@Injectable()\r\nclass FarrisKendoGridFormatService {\r\n    constructor(private dateService: DateTimeHelperService, private numberService: NumberHelperService) {\r\n    }\r\n\r\n    /**\r\n     * åæ ¼å¼å æ¹æ³\r\n     * @param dataItem  è¡æ°æ®\r\n     * @param column åå¯¹è±¡\r\n     */\r\n    getColumnFormat(dataItem: any, column: any) {\r\n        const value = this.getValue(dataItem, column['dataField']);\r\n        // æ²¡æè®¾ç½®è¡ç¼è¾å¨\r\n        const type = column['dataType'];\r\n        if (type === 'enum') {\r\n            return this.getEnumText(value, column);\r\n        } else if (type === 'boolean') {\r\n            return value ? 'æ¯' : 'å¦';\r\n        } else if (type === 'date') {\r\n            return this.getFormatDate(value, column);\r\n        } else if (type === 'number') {\r\n            return this.getFormatNumber(value, column);\r\n        } else {\r\n            // æ ¼å¼åå¤è¡ææ¬  åstring\r\n            return this.getMultiText(value, column);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * æ ¹æ®idè·åvalue\r\n     * @param dataItem  è¡æ°æ®\r\n     * @param field id,ä¹å¯è½æ¯name.Nameè¿ç§å½¢å¼(å³èå¯¹è±¡idæèudt)\r\n     */\r\n    private getValue(dataItem: any, field: string) {\r\n        const index = field.indexOf('.');\r\n        if (index < 0) {\r\n            return dataItem[field];\r\n        }\r\n        const fields = field.split('.');\r\n        // fieldå­ç¬¦ä¸²ç»å\r\n        const a = fields.reduce((result: any, next: any) => {\r\n            return result[next];\r\n        }, dataItem);\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * æä¸¾å¼æ ¼å¼å\r\n     */\r\n    private getEnumText(value: any, column: any) {\r\n        const enumData = (column as any).enumData;\r\n        if (!enumData) {\r\n            return;\r\n        }\r\n        let tempColumnText: any;\r\n        enumData.forEach((ele: any) => {\r\n            if (ele.value === value) {\r\n                tempColumnText = ele.name;\r\n            }\r\n        });\r\n        return tempColumnText;\r\n    }\r\n\r\n    /**\r\n     * æ¥ææ ¼å¼å\r\n     * @param value  ååæ ¼å¼\r\n     * @param column åå¯¹è±¡\r\n     */\r\n    public getFormatDate(value: string, column: any): string {\r\n\r\n        if (DateUtil.isEmptyDateString(value) === true) {\r\n          return '';\r\n        }\r\n\r\n        const dateFormat = (column as any).format;\r\n        if (!dateFormat) {\r\n            return value;\r\n        }\r\n        return this.dateService.formatTo(value, dateFormat);\r\n    }\r\n\r\n    /**\r\n     * æ°å­æ ¼å¼å\r\n     * @param value  ååæ ¼å¼\r\n     * @param column åå¯¹è±¡\r\n     * @todo æ°å­æ ¼å¼åè¿ä¸å®å  è¿ä¸ªåªæ¯éé¢å½¢å¼çæ ¼å¼å;   åå§åvalue===nullæ¶,åºè¯¥æ¾ç¤ºä¸º'' è¿ä¸ªè¿æ²¡æ\r\n     */\r\n    private getFormatNumber(value: any, column: any) {\r\n        let precision;\r\n        if (column && column.format) {\r\n            precision = parseInt(column.format.substr(1), 10);\r\n        } else if (column && column.editor) {\r\n            precision = column.editor.precision;\r\n        }\r\n        if (isNaN(precision)) {\r\n            precision = 2;\r\n        }\r\n        if (!value && value !== 0) {\r\n            return '';\r\n        }\r\n\r\n        const opts = {\r\n            prefix: column.prefix ? column.prefix : '',\r\n            suffix: column.suffix ? column.suffix : '',\r\n            precision: precision,\r\n            thousand: ',',\r\n            stripZeros: false,\r\n        };\r\n        return this.numberService.formatMoney(value, opts);\r\n    }\r\n\r\n    /**\r\n     * å¤è¡ææ¬æ ¼å¼å shift+enteræ¢è¡  å¤±å»ç¦ç¹ä¿çåæ ¼å¼\r\n     * @param value  ååæ ¼å¼\r\n     * @param column åå¯¹è±¡\r\n     */\r\n    private getMultiText(value: any, column: any) {\r\n        let strValue = value;\r\n        if (strValue !== '' && !strValue) {\r\n            strValue = '';\r\n        }\r\n        if (typeof strValue !== 'string') {\r\n            const valueType = typeof strValue;\r\n            throw new Error(`${valueType}ç±»åå¼ä¸åæ³ï¼æ æ³è¿è¡æ ¼å¼å`);\r\n        }\r\n        // é²æ­¢xss\r\n        strValue = strValue.replace(/&/g, '&amp;')\r\n            .replace(/</g, '&lt;')\r\n            .replace(/>/g, '&gt;')\r\n            .replace(/\\\"/g, '&quot;')\r\n            .replace(/\\'/g, '&#39;')\r\n            .replace(/\\//g, '&#x2F;');\r\n        // å¦ææ¯å¤è¡ææ¬æ¡  ä¿çæ ¼å¼\r\n        if (column.editor && column.editor.type === 'MultiTextBox') {\r\n            const INDEX = strValue.indexOf('\\n');\r\n            if (INDEX > -1) {\r\n                return strValue.replace(/\\n/g, '<br>');\r\n            }\r\n            return strValue;\r\n        }\r\n        // è¥ä¸ºstring\r\n        return strValue;\r\n    }\r\n}\r\nexport { FarrisKendoGridFormatService };\r\n","import { Injectable } from '@angular/core';\r\nimport { TreeTableComponent } from '@farris/ui-treetable';\r\n@Injectable()\r\nexport class FarrisTreetableFormatService {\r\n    constructor() {\r\n    }\r\n    setFormat(treeTable: TreeTableComponent) {\r\n        const columns = treeTable.columns;\r\n        columns.forEach((column: any) => {\r\n            const dataType = column.dataType;\r\n            if (!column.formatter) {\r\n                if (dataType === 'date') {\r\n                    column.formatter = {\r\n                        type: 'datetime',\r\n                        options: {\r\n                            format: column.format\r\n                        }\r\n                    };\r\n                } else if (dataType === 'number') {\r\n                    column.formatter = {\r\n                        type: 'number',\r\n                        options: {\r\n                            prefix: column.prefix ? column.prefix : '',\r\n                            suffix: column.suffix ? column.suffix : '',\r\n                            precision: column.precision,\r\n                            thousand: ',',\r\n                            stripZeros: false,\r\n                        }\r\n                    };\r\n                } else if (dataType === 'enum') {\r\n                    column.formatter = {\r\n                        type: 'enum',\r\n                        options: {\r\n                            data: column.enumData,\r\n                            valueField: 'value',\r\n                            textField: 'name'\r\n                        }\r\n                    };\r\n                } else if (dataType === 'boolean') {\r\n                    column.formatter = {\r\n                        type: 'enum',\r\n                        options: {\r\n                            data: [{ name: 'æ¯', value: true }, { name: 'å¦', value: false }],\r\n                            valueField: 'value',\r\n                            textField: 'name'\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DateUtil } from '@farris/devkit';\r\n\r\n@Pipe({ name: 'parseStrToDate' })\r\nexport class StringToDatePipe implements PipeTransform {\r\n    transform(value: string, exponent: string): any {\r\n        if (DateUtil.isEmptyDateString(value) === true) {\r\n          return null;\r\n        }\r\n\r\n        if (value.includes('å¹´')) {\r\n            const strDate = value.replace('å¹´', '-').replace('æ', '-').replace('æ¥', '');\r\n            return new Date(strDate);\r\n        }\r\n        return new Date(value);\r\n    }\r\n}\r\n","import { Directive, Input, OnInit, HostListener } from '@angular/core';\r\nimport { CompositeFilterDescriptor } from '@progress/kendo-data-query';\r\nimport { DropDownListComponent } from '@progress/kendo-angular-dropdowns';\r\nimport { FilterService, BaseFilterCellComponent } from '@progress/kendo-angular-grid';\r\n@Directive({\r\n    selector: '[kendogridFilter]'\r\n})\r\nexport class KendoGridFilterDirective extends BaseFilterCellComponent implements OnInit {\r\n\r\n    @Input() filter: CompositeFilterDescriptor;\r\n    @Input() column: any;\r\n\r\n    public get selectedValue(): any {\r\n        const filter = this.filterByField(this.column.dataField);\r\n        return filter ? filter.value : null;\r\n    }\r\n    public get defaultItem(): any {\r\n        return {\r\n            value: null,\r\n            name: 'å¨é¨'\r\n        };\r\n    }\r\n\r\n    constructor(\r\n        private dropdownList: DropDownListComponent,\r\n        public filterService: FilterService,\r\n    ) {\r\n        super(filterService);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.dropdownList.valueField = 'value';\r\n        this.dropdownList.textField = 'name';\r\n        this.dropdownList.valuePrimitive = true;\r\n        this.dropdownList.defaultItem = this.defaultItem;\r\n        this.dropdownList.value = this.selectedValue;\r\n        if (this.column.dataType === 'enum') {\r\n            this.dropdownList.data = this.column.enumData;\r\n        } else if (this.column.dataType === 'boolean') {\r\n            this.dropdownList.data = [{ value: true, name: 'æ¯' }, { value: false, name: 'å¦' }];\r\n        }\r\n    }\r\n\r\n\r\n    @HostListener('valueChange', ['$event'])\r\n    onChange(value: any) {\r\n        this.applyFilter(\r\n            value === null ?\r\n                this.removeFilter(this.column.dataField) :\r\n                this.updateFilter({\r\n                    field: this.column.dataField,\r\n                    operator: 'eq',\r\n                    value: value\r\n                })\r\n        );\r\n    }\r\n\r\n\r\n    /*\r\n   * è·å ååæ ¼å¼  ä¸»ä»è¡¨æ¯æ\r\n   * @param dataItem è¡æ°æ®\r\n   * @param field å­æ®µ\r\n   */\r\n    getValue(dataItem: any, field: string) {\r\n        const index = field.indexOf('.');\r\n        if (index < 0) {\r\n            return dataItem[field];\r\n        }\r\n        const fields = field.split('.');\r\n        // fieldå­ç¬¦ä¸²ç»å\r\n        return fields.reduce((result: any, next: any) => {\r\n            return result[next];\r\n        }, dataItem);\r\n    }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { ViewModel, DateUtil } from '@farris/devkit';\r\n@Pipe({ name: 'dateFormatPlaceholder' })\r\nexport class DateFormatPlaceholderPipe implements PipeTransform {\r\n    constructor(private viewModel: ViewModel) {\r\n\r\n    }\r\n    transform(format: string, controlName: string): any {\r\n        if (!this.viewModel.form || !this.viewModel.form.get(controlName)) {\r\n            return {\r\n                year: 'å¹´',\r\n                month: 'æ',\r\n                day: 'æ¥'\r\n            };\r\n        }\r\n        const value = this.viewModel.form.get(controlName).value;\r\n        let dateStr = value;\r\n        if (dateStr) {\r\n            dateStr = value.toISOString();\r\n        }\r\n        if ((DateUtil.isEmptyDateString(dateStr) === true) && format === 'yyyyå¹´MMæddæ¥') {\r\n            return {\r\n                year: ' ',\r\n                month: ' ',\r\n                day: ' '\r\n            };\r\n        }\r\n        return {\r\n            year: 'å¹´',\r\n            month: 'æ',\r\n            day: 'æ¥'\r\n        };\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n@Pipe({ name: 'formatTotal' })\r\nexport class FormatTotalPipe implements PipeTransform {\r\n    transform(value: any, exponent: any): any {\r\n        // å¤æ­å¼æ¯å¦åæ³\r\n        if (!value && value !== 0) {\r\n            return '';\r\n        }\r\n        if (exponent.dataType === 'number') {\r\n            // ä¿çå°æ°ç¹åå ä½\r\n            const dataFormat = exponent.format;\r\n            return value.toFixed(Number(dataFormat.substring(1)));\r\n        }\r\n        return value;\r\n    }\r\n}\r\n","import { Directive, ContentChildren, QueryList, Input, NgZone } from '@angular/core';\r\nimport { BindingData, BindingList } from '@farris/devkit';\r\nimport { ColumnComponent } from '@progress/kendo-angular-grid';\r\n\r\n@Directive({\r\n  selector: '[aggregate]',\r\n})\r\nexport class GridColumnAggregateDirective {\r\n\r\n  @Input() aggregate: string | boolean;\r\n\r\n  public get field(): string {\r\n    return this.column.field;\r\n  }\r\n\r\n  private get aggrType(): string {\r\n    let type = 'none';\r\n    if (typeof (this.aggregate) === 'boolean') {\r\n      // é»è®¤ä¸ºsumï¼å¦æä½¿ç¨æä»¤æ¶ä¼ å¥çinputä¸ºå¸å°ç±»åï¼ä½¿ç¨sumã\r\n      if (this.aggregate) {\r\n        type = 'sum';\r\n      }\r\n    } else if (typeof (this.aggregate) === 'string') {\r\n      type = this.aggregate;\r\n    }\r\n    return type;\r\n  }\r\n\r\n  constructor(private column: ColumnComponent, private ngZone: NgZone) {\r\n  }\r\n\r\n  public recalculateSummary(bindingList: BindingList) {\r\n    let summary = null;\r\n    if (this.aggrType === 'sum') {\r\n      const plainData = bindingList.toJSON().map(item => {\r\n        // èèå¸®å©åudtçæåµï¼fieldæ¯a.bçæ ¼å¼ã\r\n        return this.field.split('.').reduce((prevPath, currPath) => {\r\n          return prevPath[currPath];\r\n        }, item);\r\n      });\r\n      if (plainData && plainData.length) {\r\n        summary = plainData.reduce((prev, curr) => {\r\n          return prev + curr;\r\n        });\r\n      }\r\n    } else if (this.aggrType === 'count') {\r\n      // è®¡æ°ï¼å¦æå¯ç¨åé¡µï¼åªè®¡ç®å½åé¡µï¼å æ­¤ä½¿ç¨lengthèétotalã\r\n      summary = bindingList.length;\r\n    }\r\n    this.updateFooter(summary);\r\n  }\r\n\r\n  public updateFooter(content: any) {\r\n    if (this.aggregate) {\r\n        // å­å¨æ§è½é®é¢ï¼å»æsetTimeoutã\r\n        // åè¡¨çåè¶å¤ï¼æ­¤å¤é®é¢è¶ä¸¥éï¼éè¦æ­£åè§£å³ä»¥ä¸éè¯¯ã\r\n        // todo: settimeoutæ¯ä¸ºäºè§£å³æ°æ®ååæ¶angularæ¥éï¼å¦ææ´æ°é¡µèçé»è¾ä¸å¨gridbindingåèµ·ï¼æ¯å¦è¿å­å¨é®é¢ï¼\r\n        // setTimeout(() => {\r\n          this.column['summary'] = content;\r\n        // });\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: '[farrisSummary]'\r\n})\r\nexport class GridSummaryDirective/* implements OnInit, AfterViewInit*/ {\r\n  @Input('farrisSummary') summary: string;\r\n  constructor(private bindingData: BindingData) { }\r\n\r\n}\r\n","import { ElementRef } from '@angular/core';\r\nimport { SelectedRowContext } from '../entity/index';\r\nimport { GridComponent } from '@progress/kendo-angular-grid';\r\n\r\n/**\r\n * å¤éåè¡¨å·¥å·ç±»\r\n */\r\nexport class MultiSelectGridUtility {\r\n  static CURRENT_ROW_STYLE_NAME = 'f-state-selected';\r\n  static CHECKBOXED_ROW_STYLE_NAME = 'f-state-checked';\r\n\r\n  /**\r\n   * æ¸²æåæ¢è¡\r\n   */\r\n  public static renderClickChangedRow(gridComponent: GridComponent, selectedRowContext: SelectedRowContext) {\r\n    if (!gridComponent) {\r\n      return;\r\n    }\r\n\r\n    const currentRowIndex = selectedRowContext.currentRowIndex;\r\n    // æ¸²æå½åè¡\r\n    this.addRowSelectedStyle(gridComponent, currentRowIndex);\r\n\r\n    // æ¸²æä¸ä¸è¡\r\n    const lastRowIndex = selectedRowContext.lastRowIndex;\r\n    if (!this.checIfIsSameRelativeIndex(gridComponent, currentRowIndex, lastRowIndex)) {\r\n      this.removeRowSelectedStyle(gridComponent, lastRowIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æ£æ¥å½åè¡ç´¢å¼å¼åä¸ä¸ä¸ªéä¸­è¡ç´¢å¼å¼çç¸å¯¹å½åé¡µé¢çç´¢å¼å¼æ¯å¦ç¸å\r\n   */\r\n  private static checIfIsSameRelativeIndex(gridComponent: GridComponent, currentRowIndex: number, lastRowIndex: number): boolean {\r\n    let isSameRelativeIndex = false;\r\n    if (currentRowIndex === lastRowIndex) {\r\n      isSameRelativeIndex = true;\r\n      return isSameRelativeIndex;\r\n    }\r\n\r\n    if ((Math.abs(currentRowIndex - lastRowIndex)) % (gridComponent.pageSize) === 0) {\r\n      isSameRelativeIndex = true;\r\n      return isSameRelativeIndex;\r\n    }\r\n\r\n    return isSameRelativeIndex;\r\n  }\r\n\r\n  /**\r\n   * æ£æµæ¯å¦å¯ç¨åé¡µåè½\r\n   */\r\n  public static checkIfEnablePaging(gridComponent: GridComponent): boolean {\r\n    let isPageable = false; // é»è®¤æªå¯ç¨åé¡µ\r\n    if (!gridComponent) {\r\n      return isPageable;\r\n    }\r\n\r\n    if (typeof gridComponent.pageable === 'boolean') {\r\n      isPageable = gridComponent.pageable;\r\n    } else if (typeof gridComponent.pageable === 'object') {\r\n      isPageable = true;\r\n    }\r\n\r\n    return isPageable;\r\n  }\r\n\r\n  /**\r\n   * æ¸²æcheckboxéæ©\r\n   */\r\n  public static renderSelectedChangeCheckbox(elementRef: ElementRef, $event: any) {\r\n\r\n    const currentRowIndex = $event.index;\r\n\r\n    const trCollection = this.getTrCollection(elementRef);\r\n    if (trCollection == null || trCollection.length <= 0 || trCollection.length < currentRowIndex) {\r\n      return;\r\n    }\r\n\r\n    // æ¸²æcheckedè¡\r\n    const currentTableRowElement = trCollection[currentRowIndex];\r\n    if (!currentTableRowElement) {\r\n      return;\r\n    }\r\n\r\n    if ($event.selected) { // checked\r\n      this.appendAtrributeValue(currentTableRowElement, 'class', this.CHECKBOXED_ROW_STYLE_NAME);\r\n    } else { // unchecked\r\n      this.removeAttributeSpecificValue(currentTableRowElement, 'class', this.CHECKBOXED_ROW_STYLE_NAME);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æ·»å è¡çâå·²éä¸­æ ·å¼â\r\n   * ææ éæ±ï¼ä¸å¯¹å¤æ´é²\r\n   */\r\n  private static addRowSelectedStyle(gridComponent: GridComponent, rowIndex: number) {\r\n    if (!gridComponent || rowIndex < 0) {\r\n      return;\r\n    }\r\n\r\n    const currentRowElement = this.getRelativeRowInCurrentPage(gridComponent, rowIndex);\r\n    if (!currentRowElement) {\r\n      return;\r\n    }\r\n\r\n    this.appendAtrributeValue(currentRowElement, 'class', this.CURRENT_ROW_STYLE_NAME);\r\n  }\r\n\r\n  /**\r\n   * ç§»é¤è¡çâå·²éä¸­æ ·å¼â\r\n   * éæ±ï¼kendo-gridå¨åé¡µæ¶ï¼ä¸ä¼ç§»é¤å·²éä¸­æ ·å¼\r\n   */\r\n  public static removeRowSelectedStyle(gridComponent: GridComponent, rowIndex: number) {\r\n    if (!gridComponent || rowIndex < 0) {\r\n      return;\r\n    }\r\n\r\n    const currentRowElement = this.getRelativeRowInCurrentPage(gridComponent, rowIndex);\r\n    if (!currentRowElement) {\r\n      return;\r\n    }\r\n    this.removeAttributeSpecificValue(currentRowElement, 'class', this.CURRENT_ROW_STYLE_NAME);\r\n  }\r\n\r\n  /**\r\n   * è·åæå®è¡å¨å½åé¡µé¢å¯¹åºçè¡åç´ \r\n   */\r\n  private static getRelativeRowInCurrentPage(gridComponent: GridComponent, rowIndex: number): any {\r\n    let rowElementInCurrentPage: any = null;\r\n    if (!gridComponent || rowIndex < 0) {\r\n      return rowElementInCurrentPage;\r\n    }\r\n\r\n    const gridElement = gridComponent.wrapper;\r\n    // å¯ç¨åé¡µåï¼éè¦æ´æ°å½åè¡\r\n    const isPaging = this.checkIfEnablePaging(gridComponent);\r\n    if (isPaging) {\r\n      rowIndex = rowIndex % (gridComponent.pageSize); // å¯¹pageSizeåæ¨¡\r\n    }\r\n\r\n    const trCollection = this.getTrCollection(gridElement);\r\n    if (trCollection == null || trCollection.length <= 0) {\r\n      return rowElementInCurrentPage;\r\n    }\r\n\r\n    rowElementInCurrentPage = trCollection[rowIndex];\r\n\r\n    return rowElementInCurrentPage;\r\n  }\r\n\r\n  /**\r\n   * è·åå½ågridçtréå\r\n   */\r\n  private static getTrCollection(elementRef: ElementRef): any[] {\r\n    if (!elementRef || !elementRef.nativeElement) {\r\n      return null;\r\n    }\r\n\r\n    const kendoGridTbodyElements: any[] = elementRef.nativeElement.getElementsByTagName('tbody');\r\n    if (!kendoGridTbodyElements || kendoGridTbodyElements.length <= 0) {\r\n      return null;\r\n    }\r\n\r\n    const trCollection = kendoGridTbodyElements[0].getElementsByTagName('tr');\r\n    return trCollection;\r\n  }\r\n\r\n  /**\r\n   * ååç´ çæå®å±æ§è¿½å å¼\r\n   */\r\n  private static appendAtrributeValue(currentElement: Element, attributeName: string, attributeValue: string) {\r\n    let newAttributeValue: string = currentElement.getAttribute(attributeName);\r\n    if (newAttributeValue === null || newAttributeValue === '' || newAttributeValue.length <= 0) {\r\n      newAttributeValue = attributeValue;\r\n    } else {\r\n      if (newAttributeValue.indexOf(attributeValue) < 0) { // å­å¨æ£æµï¼é¿åéå¤æ·»å \r\n        newAttributeValue += ' ' + attributeValue;\r\n      }\r\n    }\r\n\r\n    currentElement.setAttribute(attributeName, newAttributeValue);\r\n  }\r\n\r\n  /**\r\n   * ç§»é¤åæ°æ®æå®å±æ§çç¹æ§å±æ§å¼\r\n   */\r\n  private static removeAttributeSpecificValue(currentElement: Element, attributeName: string, needRemoveAttributeValue: string) {\r\n    let lastClassAttributeValue = currentElement.getAttribute(attributeName);\r\n    if (!lastClassAttributeValue) {\r\n      return;\r\n    }\r\n\r\n    const index = lastClassAttributeValue.lastIndexOf(needRemoveAttributeValue);\r\n    if (index < 0) {\r\n      return;\r\n    }\r\n\r\n    const tempLastClassAttributeValue = lastClassAttributeValue.substring(0, index - 1);\r\n    lastClassAttributeValue = tempLastClassAttributeValue + ' '\r\n      + lastClassAttributeValue.substring(index + needRemoveAttributeValue.length);\r\n\r\n    currentElement.setAttribute(attributeName, lastClassAttributeValue);\r\n  }\r\n}\r\n","/**\r\n * éä¸­è¡ä¸ä¸æ\r\n */\r\nexport class SelectedRowContext {\r\n    /**\r\n     * å½åéä¸­è¡Index\r\n     */\r\n    currentRowIndex: number;\r\n\r\n    /**\r\n     * ä¸ä¸ä¸ªéä¸­è¡Index\r\n     */\r\n    lastRowIndex: number;\r\n}\r\n","import {\r\n  Directive, OnInit, OnChanges, OnDestroy, SimpleChanges, Input, HostListener, Optional,\r\n  EventEmitter, Output, ElementRef, ContentChildren, QueryList, NgZone, AfterViewInit\r\n} from '@angular/core';\r\nimport { of, Subscription } from 'rxjs';\r\nimport {\r\n  GridComponent, DataBindingDirective,\r\n  SelectionDirective,\r\n  CellClickEvent,\r\n  DataStateChangeEvent, GridDataResult, PageChangeEvent, SortSettings,\r\n} from '@progress/kendo-angular-grid';\r\nimport { process, GroupDescriptor, AggregateDescriptor, State, FilterDescriptor, SortDescriptor } from '@progress/kendo-data-query';\r\nimport {\r\n  BindingData, BindingList, Change, ChangeType,\r\n  FrameEventBus, UIState, Form, ViewModel, ComponentType\r\n} from '@farris/devkit';\r\nimport { DialogService } from '@farris/ui-dialog';\r\nimport { RuntimeStateService } from '@farris/ui-common';\r\nimport { DateTimeHelperService } from '@farris/ui-common/date';\r\nimport { FarrisKendoGridFormatService } from '../format/index';\r\nimport { GridColumnAggregateDirective } from './grid-summary.directive';\r\nimport { MultiSelectGridUtility } from '../util/multi_select_grid_utility';\r\nimport { SelectedRowContext } from '../entity/index';\r\n\r\n/*\r\n * Kendo Grid æ°æ®ç»å®æä»¤\r\n *\r\n * TODO:\r\n * 1ãæ´ä½å·å­å¨æ§è½é®é¢ï¼\r\n * 2ãéä¸­åå½åè¡æ²¡æåºåå¼ï¼\r\n */\r\n\r\n@Directive({\r\n  selector: '[farrisBindingPath]'\r\n})\r\nexport class KendoGridBindingDirective extends DataBindingDirective implements OnInit, AfterViewInit, OnChanges, OnDestroy {\r\n\r\n  /**\r\n   * æ¯å¦åè®¸ç¼è¾\r\n   * é»è®¤å¯ç¼è¾  å ä¸ºææ¹éç¼è¾åè¡¨\r\n   */\r\n  @Input('farrisEditable')\r\n  public editable: boolean;\r\n\r\n  /**\r\n   * ç¼è¾æ¶ç»å®çè¡¨å\r\n   */\r\n  @Input('farrisForm')\r\n  public form: Form;\r\n\r\n  /**\r\n   * åç»å\r\n   */\r\n  @Input('groupField')\r\n  public groupField: string;\r\n\r\n  @Input('groupAggrFields')\r\n  public groupAggrFields: string[];\r\n\r\n  /* ç»å®grid option */\r\n  @Input()\r\n  public farrisBindingGridOption: any;\r\n\r\n  /* å¼å®¹rowClass è¿æ²¡å é¤ */\r\n  @Input()\r\n  rowClassName: any;\r\n  /* è¡æ ·å¼äºä»¶ */\r\n  // @Input()\r\n  // rowClassName: (context: any) => any;\r\n\r\n  // tslint:disable-next-line:no-output-rename\r\n  @Output('append-row') appendRow = new EventEmitter<any>();\r\n\r\n  /* ç»å®æåºäºä»¶ */\r\n  @Output() sortChangeEvent: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  /* è¡æ ·å¼äºä»¶ */\r\n  @Output()\r\n  rowClass: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n\r\n  get gridOption() {\r\n    return this.grid['gridOption'];\r\n  }\r\n  get len() {\r\n    return this.grid.columns.length;\r\n  }\r\n\r\n  dataItem: any;\r\n\r\n  /* keydownç»å®äºä»¶å¯¹è±¡ */\r\n  gridElement: any;\r\n  gridKeydownEvent: any;\r\n\r\n  /* cellclickäºä»¶å¯¹è±¡ */\r\n  gridCellClickEvent: any;\r\n\r\n  /* cellCloseäºä»¶å¯¹è±¡ */\r\n  gridCellCloseEvent: any;\r\n\r\n\r\n  cellClickEvent: CellClickEvent;\r\n\r\n  hiddenColLen = 0;\r\n  /**\r\n   * TODO: ä»å®ä½è·åå¶é»è®¤å¼\r\n   * å½åè¡ç´¢å¼å¼ï¼é»è®¤ç¬¬ä¸ä¸ª\r\n   */\r\n  rowIndex = 0;\r\n  columnIndex = 0;\r\n  sender: any;\r\n  interVal: any;\r\n  dataId: any;\r\n  currentSkip = 0;\r\n  private currentRowId: string;\r\n\r\n  cellClickParam: CellClickEvent;\r\n  /**\r\n   * æ¯å¦å¯ç¨å¤éï¼é»è®¤æªå¯ç¨\r\n   */\r\n  private isMultipleSelectionMode = false;\r\n  public get IsMultipleSelectionMode() {\r\n    if (!this.grid) {\r\n      return this.isMultipleSelectionMode;\r\n    }\r\n\r\n    if (this.grid.selectable) { // ä¼åå°è¯ä»this.grid.selectableè·å\r\n      // tslint:disable-next-line: no-string-literal\r\n      if (this.grid.selectable['mode'] === 'multiple') {\r\n        this.isMultipleSelectionMode = true;\r\n      } else {\r\n        this.isMultipleSelectionMode = false;\r\n      }\r\n    } else {\r\n      if (this.grid.selectableSettings && this.grid.selectableSettings.mode === 'multiple') {\r\n        this.isMultipleSelectionMode = true;\r\n      }\r\n    }\r\n\r\n    return this.isMultipleSelectionMode;\r\n  }\r\n\r\n  /**\r\n   * ä¸ä¸ä¸ªéä¸­è¡ï¼é»è®¤ä¸å­å¨\r\n   */\r\n  public lastRowIndex = -1;\r\n\r\n  /**\r\n   * éä¸­è¡åæ¢äºä»¶\r\n   */\r\n  @Output() selectedRowChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  /**\r\n   * checkboxéæ©äºä»¶\r\n   */\r\n  @Output() selectedCheckboxChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  /**\r\n   * ç»å®åè¡¨(Gridå¯¹åºæ°æ®æº)\r\n   */\r\n  private get bindingList(): BindingList {\r\n    // æ ¹å®ä½\r\n    if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {\r\n      return this.bindingData.list;\r\n    }\r\n    // å­å®ä½\r\n    let bindingPath = this.viewModel.bindingPath.substr(1);\r\n    bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);\r\n    const paths = bindingPath.split('/');\r\n\r\n    const filteredPaths = paths.filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return this.bindingData.getValue(filteredPaths);\r\n  }\r\n  /**\r\n   * è·ååé¡µä¿¡æ¯\r\n   */\r\n  private getPagingInfo() {\r\n    const bindingPath = this.viewModel.bindingPath;\r\n    const bindingData = this.viewModel.bindingData;\r\n    let pagingInfo = bindingData.pagingInfo;\r\n    if (bindingPath === '/') {\r\n      return pagingInfo;\r\n    } else {\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0).map(item => {\r\n        return item.substring(0, item.length - 1);\r\n      });\r\n      bindingPaths.forEach(path => {\r\n        pagingInfo = pagingInfo && pagingInfo[path] || {};\r\n      });\r\n      return pagingInfo;\r\n    }\r\n  }\r\n\r\n  @ContentChildren(GridColumnAggregateDirective) private aggrColumns: QueryList<GridColumnAggregateDirective>;\r\n  private bindingChangeSubscription: Subscription;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   * @param  grid å®¿ä¸»Grid\r\n   */\r\n  constructor(\r\n    public bindingData: BindingData,\r\n    @Optional() public uiState: UIState,\r\n    @Optional() public eventBus: FrameEventBus,\r\n    @Optional() public viewModel: ViewModel,\r\n    public grid: GridComponent,\r\n    public selectionDir: SelectionDirective,\r\n    public dialogSer: DialogService,\r\n    private dateService: DateTimeHelperService,\r\n    private kendogridFormatSer: FarrisKendoGridFormatService,\r\n    private rts: RuntimeStateService,\r\n    public ngZone: NgZone\r\n  ) {\r\n    super(grid);\r\n\r\n    this.selectionDir.selectedKeys = [];\r\n    this.viewModel.uiState.setPropertyValue('ids', this.selectionDir.selectedKeys);\r\n    const appContext = this.viewModel.frameContext.getFormAppContext();\r\n    if (appContext && appContext.hasOwnProperty('messagePipe')) {\r\n      appContext.messagePipe.subscribe((message: any) => {\r\n        this.grid.closeCell();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æä»¤åå§åå\r\n   */\r\n  ngOnInit() {\r\n    super.ngOnInit();\r\n\r\n    // åå§åstateï¼åç»ä½¿ç¨ã\r\n    this.initDataState();\r\n\r\n    this.refreshView();\r\n    if (this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameComponent) {\r\n      this.viewModel.frameContext.frameComponent.componentType = ComponentType.kendoGridComponent;\r\n    }\r\n    // æ°æ®åå\r\n    this.bindingChangeSubscription = this.bindingData.changes.subscribe((change: Change) => {\r\n      this.refreshView(change);\r\n\r\n      if (change.type === ChangeType.Load) {\r\n        // loadæ¶ï¼å¨å¤éæ¨¡å¼ä¸ï¼éæ¸ç©ºéä¸­éå\r\n        if (this.isMultipleSelectionMode) {\r\n          const isMatch = this.checkIfChangeMatchBindingPath(change);\r\n          if (isMatch) {\r\n            // æ¸ç©ºå¤ééå\r\n            this.selectionDir.selectedKeys = [];\r\n            this.viewModel.uiState.setPropertyValue('ids', this.selectionDir.selectedKeys);\r\n            this.ngZone.runOutsideAngular(() => {\r\n              // æ¸²æåå§éä¸­è¡\r\n              setTimeout(() => {\r\n                const rowSelectedContext: SelectedRowContext = new SelectedRowContext();\r\n                const isPageable = MultiSelectGridUtility.checkIfEnablePaging(this.grid);\r\n                if (isPageable) {\r\n                  this.rowIndex = this.grid.skip;\r\n                } else {\r\n                  this.rowIndex = 0;\r\n                }\r\n                rowSelectedContext.currentRowIndex = this.rowIndex;\r\n                rowSelectedContext.lastRowIndex = this.lastRowIndex;\r\n                this.handleSelectedRowChange(rowSelectedContext);\r\n              }, 300);\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      // TODO: ä½¿ç¨ç­ç¥æ¨¡å¼éæ\r\n      // bindingData åæ­¥ SelectedKeys\r\n      if (change.type === ChangeType.Remove) {\r\n        this.syncDeletedKeys(change.value);\r\n      }\r\n      const isMatch = this.checkIfChangeMatchBindingPath(change);\r\n      if (isMatch) {\r\n        this.handleSelectedKeyChange(this.bindingList.currentId);\r\n      }\r\n      // æ¸²æå½åè¡\r\n      if (isMatch && this.checkCurrentRowIdExists() && change.type === ChangeType.SelectionChanged && !this.dataId) {\r\n        this.renderCurrentRow(this.bindingList.currentId);\r\n      }\r\n      // tslint:disable-next-line: max-line-length\r\n      // FIXME:éè¦æéç½®é¡µç çæ¶æº\r\n      /*if ((change.type === ChangeType.SelectionChanged || change.type === ChangeType.GlobalSelectionChanged) && this.currentRowId !== this.bindingList.currentId) {\r\n          this.resetPageInfo();\r\n      }*/\r\n      // è§¦ååæ´æ£æµ\r\n      if (change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged\r\n        || change.type === ChangeType.Append || change.type === ChangeType.Remove) {\r\n\r\n        // è§¦ååæ´æ£æµ\r\n        if (this.grid && this.grid['changeDetectorRef'] && this.grid['changeDetectorRef']['detectChanges']) {\r\n          this.grid['changeDetectorRef']['detectChanges']();\r\n        }\r\n      }\r\n\r\n    });\r\n\r\n    if (this.editable === true && this.form === null) {\r\n      throw Error('å¯ç¨ç¼è¾æ¶ï¼å¿é¡»æå®form');\r\n    }\r\n    if (!this.grid || !this.farrisBindingGridOption || !this.farrisBindingGridOption['fields']) {\r\n      return;\r\n    }\r\n\r\n    const gridColumns = this.farrisBindingGridOption['fields'];\r\n    const gridOption = this.farrisBindingGridOption;\r\n\r\n    // å¤æ­åä¸­æ¯å¦å­å¨åºå®å\r\n    gridOption.lockable = (columns: any[]) => {\r\n      return columns.some(ele => {\r\n        return ele.frozen;\r\n      });\r\n    };\r\n\r\n    this.rowClass.emit(this.grid);\r\n    // æ·»å åå±æ§æèæ¹æ³\r\n    gridColumns.forEach((element: any) => {\r\n      // èªå®ä¹è¶é¾\r\n      if (element.linkedLabelEnabled && !element.linkEvent) {\r\n        element.linkEvent = () => {\r\n          return;\r\n        };\r\n      }\r\n\r\n      // è¥æ²¡æèªå®ä¹æ ¼å¼åæ¹æ³  æ¯ä¸ªåå¯¹è±¡ç»å®æ ¼å¼åæ¹æ³\r\n      if (!element.getColumnFormat) {\r\n        element.getColumnFormat = (dataItem: any, column: any) => {\r\n          return this.kendogridFormatSer.getColumnFormat(dataItem, column);\r\n        };\r\n      }\r\n\r\n      // å¦ææ²¡æèªå®ä¹ç±»æ ·å¼ æ¯ä¸ªåç»å® æ ¼å¼åæ¹æ³\r\n      if (!element.getClassName) {\r\n        element.getClassName = (dataItem: any, column: any) => '';\r\n      }\r\n\r\n      // èªå®ä¹å¸®å©ååäºä»¶\r\n      if (element.editor && element.editor.type === 'LookupEdit') {\r\n\r\n        // å¸®å©åäºä»¶\r\n        if (!element.dictPicking) {\r\n          element.dictPicking = (param: any) => {\r\n            return of(true);\r\n          };\r\n        }\r\n        // å¸®å©åäºä»¶\r\n        if (!element.dictPicked) {\r\n          element.dictPicked = (param: any) => {\r\n            // éæ°è¿å¥ç¼è¾\r\n            this.cellClickHandler(this.cellClickParam);\r\n            return of(true);\r\n          };\r\n        }\r\n      }\r\n    });\r\n    // ç»å®gridOption\r\n    this.bindingGridOption();\r\n\r\n    // å¤éæ¨¡å¼ä¸ï¼è®¾ç½®åå§éä¸­è¡\r\n    if (this.IsMultipleSelectionMode) {\r\n      // TODO: ç§»é¤ setTimeout\r\n      const self = this;\r\n      this.ngZone.runOutsideAngular(() => {\r\n        setTimeout(() => {\r\n          const rowSelectedContext: SelectedRowContext = new SelectedRowContext();\r\n          rowSelectedContext.currentRowIndex = self.rowIndex;\r\n          rowSelectedContext.lastRowIndex = self.lastRowIndex;\r\n          self.handleSelectedRowChange(rowSelectedContext);\r\n        }, 300);\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  ngAfterViewInit() {\r\n    // this.gridElement = document.querySelector('.k-grid');\r\n    // // ç»å®grid keydownå¯¹è±¡çæ¹æ³\r\n    // this.ngZone.runOutsideAngular(() => {\r\n    //   this.gridKeydownEvent = this.enterCell.bind(this);\r\n    //   this.gridCellClickEvent = this.cellClickHandler.bind(this);\r\n    //   this.gridCellCloseEvent = this.cellCloseHandler.bind(this);\r\n    //   this.gridElement.addEventListener('keydown', this.gridKeydownEvent);\r\n    //   this.gridElement.addEventListener('cellClick', this.gridCellClickEvent);\r\n    //   this.gridElement.addEventListener('cellClose', this.gridCellCloseEvent);\r\n    // });\r\n  }\r\n  /**\r\n   * æ£æµchangeçè·¯å¾åBindingPathæ¯å¦å¹é\r\n   */\r\n  private checkIfChangeMatchBindingPath(change: Change): boolean {\r\n    let isMatch = false;\r\n    if (!change || !change.path) {\r\n      return isMatch;\r\n    }\r\n\r\n    const changePathArray = change.path;\r\n    if (!changePathArray) {\r\n      return isMatch;\r\n    }\r\n\r\n    if (!(this.bindingData) && !(this.bindingData.bindingPath)) {\r\n      return isMatch;\r\n    }\r\n    const bingdingPathArray = this.bindingData.bindingPath.split('/');\r\n    if (bingdingPathArray.length <= 0) {\r\n      return isMatch;\r\n    }\r\n\r\n    if (changePathArray.length === 0) { // ä¸»è¡¨\r\n      if (this.bindingData.bindingPath === '/') {\r\n        isMatch = true;\r\n      }\r\n    } else if (change.path.length === 1) {// ä¸»ä»è¡¨\r\n      if (bingdingPathArray.length === 2 && bingdingPathArray[1] === change.path[0]) {\r\n        isMatch = true;\r\n      }\r\n    } else if (change.path.length === 2) { // ä¸»ä»ä»è¡¨\r\n      if (bingdingPathArray.length === 3 && bingdingPathArray[1] === change.path[0] && bingdingPathArray[2] === change.path[1]) {\r\n        isMatch = true;\r\n      }\r\n    }\r\n\r\n    return isMatch;\r\n  }\r\n\r\n  /**\r\n   * å¤çéä¸­ä¸»é®åæ´\r\n   */\r\n  private handleSelectedKeyChange(currentId: any) {\r\n    const selectedKeys = this.selectionDir.selectedKeys;\r\n    if (!currentId) {\r\n\r\n      // å¦æå½åè¡æ¶nullï¼ä½selectedKeyséæå¼ï¼æ¸ç©ºå¹¶åéä¸æ¬¡è¡åæ¢\r\n      if (selectedKeys.length > 0) {\r\n        const removedSelectedKeys = selectedKeys.splice(0, selectedKeys.length);\r\n        if (removedSelectedKeys.indexOf(null) === -1) {\r\n          this.emitSelectedRowChange({ currentRowId: null });\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    let oldCurrentRowId = null;\r\n    if (this.IsMultipleSelectionMode) {\r\n      oldCurrentRowId = this.currentRowId;\r\n    } else {\r\n      oldCurrentRowId = this.selectionDir.selectedKeys.length === 0\r\n        ? null : this.selectionDir.selectedKeys[0];\r\n    }\r\n\r\n    // TODO:if (this.currentRowId !== currentId) {\r\n    if (oldCurrentRowId !== currentId) {\r\n      const selectedRowContext: any = {};\r\n      selectedRowContext.currentRowId = currentId;\r\n      this.currentRowId = currentId;\r\n      this.emitSelectedRowChange(selectedRowContext);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * åå°éä¸­è¡åæ¢äºä»¶\r\n   * @description ç»ä¸åéæ¨¡å¼åå¤éæ¨¡å¼ä¸çè¡åæ¢äºä»¶\r\n   */\r\n  private emitSelectedRowChange(selectedRowContext: any) {\r\n    if (!this.IsMultipleSelectionMode) { // ååå¼å®¹\r\n      const currentId = selectedRowContext.currentRowId;\r\n      this.selectionDir.selectedKeys = [currentId];\r\n      this.selectionDir.selectedKeysChange.emit(this.selectionDir.selectedKeys);\r\n    }\r\n\r\n    this.selectedRowChange.emit(selectedRowContext);\r\n  }\r\n\r\n  private checkCurrentRowIdExists(): boolean {\r\n    let isExist = false;\r\n\r\n    if (this.bindingList && this.bindingList.currentId && this.bindingList.currentId.length > 0) {\r\n      isExist = true;\r\n    }\r\n\r\n    return isExist;\r\n  }\r\n\r\n  /**\r\n   * åæ­¥å·²å é¤é®å°éä¸­éå\r\n   */\r\n  private syncDeletedKeys(deletedValueCollection: any[]) {\r\n    if (!deletedValueCollection) {\r\n      return;\r\n    }\r\n\r\n    deletedValueCollection.forEach((id: string) => {\r\n      const index = this.selectionDir.selectedKeys.indexOf(id);\r\n      if (index > -1) {\r\n        this.selectionDir.selectedKeys.splice(index, 1);\r\n\r\n        // selectedKeysè¢«æ¸ç©ºçæ¶åï¼è§¦åä¸æ¬¡è¡åæ´\r\n        if (this.selectionDir.selectedKeys.length === 0) {\r\n          this.emitSelectedRowChange({ currentRowId: null });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private renderCurrentRow(currentId: string) {\r\n    if (!currentId || currentId === '') {// ä¸å­å¨å½åè¡\r\n      return;\r\n    }\r\n\r\n    // TODO:ä½¿ç¨ç­ç¥æ¨¡å¼éæ\r\n    if (this.IsMultipleSelectionMode) {\r\n      return;\r\n    }\r\n\r\n    this.renderSelectionRow(this.bindingList.currentId, this.selectionDir.selectedKeys);\r\n  }\r\n\r\n  /**\r\n   * æä»¤è¾å¥åæ´å¤ç\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    super.ngOnChanges(changes);\r\n    this.refreshView();\r\n  }\r\n\r\n  /**\r\n   * æä»¤éæ¯ï¼æ³¨éè®¢é\r\n   */\r\n  ngOnDestroy() {\r\n    if (this.bindingChangeSubscription) {\r\n      this.bindingChangeSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private refreshView(change?: Change) {\r\n    // this.bindData();\r\n    this.refreshData(change);\r\n\r\n    // å·æ°é¡µèåè®¡ä¿¡æ¯ãå®¢æ·ç«¯åè®¡ï¼ææ¶æ¾è¿éï¼æå¡ç«¯åè®¡æ¶æå¥½ä»è¿éç§»èµ°ãby justin\r\n    this.refreshSummary();\r\n  }\r\n\r\n  /**\r\n   * ç»å®dataå°å®¿ä¸»gridä¸\r\n   * @deprecated\r\n   */\r\n  private bindData() {\r\n    /*const data = this.bindingList.toJSON();\r\n    let skip = 0;\r\n    if (this.bindingList.pageIndex > 0) {\r\n      skip = (this.bindingList.pageIndex - 1) * this.bindingList.pageSize;\r\n    }\r\n    this.updatePager(this.bindingList.pageSize, skip);\r\n    const processed = process(data, Object.assign({}, this.state, { skip: 0 }));\r\n    processed.total = this.bindingList.total;\r\n    this.grid.data = processed;*/\r\n  }\r\n\r\n  private refreshData(change?: Change) {\r\n    let skip = 0;\r\n    const { pageIndex = 1, pageSize = 0 } = this.getPagingInfo() || {};\r\n    if (pageIndex > 0) {\r\n      skip = (pageIndex - 1) * pageSize;\r\n    }\r\n    this.updatePager(pageSize, skip);\r\n    this.endCellEdit(change);\r\n    this.data = this.bindingList.toJSON({ ignoreMultiLangInput: true });\r\n  }\r\n  /**\r\n   * éåºç¼è¾ç¶æ\r\n   * @param change åæ´\r\n   */\r\n  private endCellEdit(change?: Change) {\r\n    const isEditing = this.grid.isEditing;\r\n    if (change && change.type === ChangeType.Load && isEditing) {\r\n      this.grid.cancelCell();\r\n    }\r\n  }\r\n  private refreshSummary() {\r\n    if (this.aggrColumns) {\r\n      this.aggrColumns.forEach(aggrCol => {\r\n        if (aggrCol.aggregate) {\r\n          aggrCol.recalculateSummary(this.bindingList);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  @HostListener('pageChange', ['$event'])\r\n  public onPageChange(event: PageChangeEvent) {\r\n    const { skip = 0, take = 0 } = event || {};\r\n    // this.bindingList.setPaginationInfo(skip, take);\r\n    this.bindingData.setPagingInfo(skip, take, this.viewModel.bindingPath);\r\n    // ç§»é¤éä¸­è¡æ ·å¼\r\n    MultiSelectGridUtility.removeRowSelectedStyle(this.grid, this.rowIndex);\r\n  }\r\n  /**\r\n   * éç½®gridåé¡µä¿¡æ¯\r\n   */\r\n  private resetPageInfo() {\r\n    const { pageSize = 0 } = this.getPagingInfo() || {};\r\n    this.bindingData.setPagingInfo(0, pageSize, this.viewModel.bindingPath);\r\n  }\r\n  private initDataState() {\r\n    // const groups: GroupDescriptor[] = [];\r\n    // if (this.groupField) {\r\n    //   groups.push({field: this.groupField, aggregates: this.aggregates||[]});\r\n    //   this.grid.group = groups;\r\n    // }\r\n    // this.state = Object.assign(this.state, {group: groups});\r\n\r\n    const aggregatesDes: AggregateDescriptor[] = [];\r\n    if (this.groupAggrFields) {\r\n      for (const groupAggrField of this.groupAggrFields) {\r\n        aggregatesDes.push({ field: groupAggrField, aggregate: 'sum' });\r\n      }\r\n    }\r\n\r\n    const group: GroupDescriptor[] = [];\r\n    if (this.groupField) {\r\n      group.push({ field: this.groupField, aggregates: aggregatesDes });\r\n    }\r\n    this.group = group;\r\n\r\n  }\r\n\r\n  /*\r\n   * @override\r\n   * @param state State\r\n   */\r\n  onStateChange(state: DataStateChangeEvent) {\r\n    // è¯´æï¼pageræ ¹æ®skipè®¡ç®å½åé¡µç ãkendo gridåé¨ä¼å¨filter stateååæ¶æskipåä¸º0ï¼éç½®å°ç¬¬ä¸é¡µï¼ã\r\n    // å æ­¤éè¦éåonStateChangeæ¹æ³ï¼ä¿®æ­£skip\r\n    if (state.skip !== this.currentSkip) {\r\n      state.skip = this.currentSkip;\r\n    }\r\n    // ä½¿ç¨kendoé»è®¤çå¤çstateçé»è¾\r\n    this.applyState(state);\r\n\r\n    this.rebind();\r\n  }\r\n\r\n  // protected applyState({skip, take, sort, group, filter}: State): void {\r\n  //   this.skip = skip;\r\n  //   this.pageSize = take;\r\n  //   this.sort = sort;\r\n  //   this.group = group;\r\n  //   this.filter = filter;\r\n  // }\r\n\r\n  /*\r\n   * @override æå¡å¨ç«¯åé¡µåæ°ãprocessä½¿ç¨çstateä¸­skipåºä¸º0ï¼å¦åä¸æ¾ç¤ºæ°æ®\r\n   * @param state State\r\n   */\r\n  protected process(state: State): GridDataResult {\r\n    // if (this.editing) {\r\n    //   state.sort = null;\r\n    // } else {\r\n    //   state.sort = this.originalSort;\r\n    // }\r\n    state.skip = 0;\r\n    const { pageSize = 0, total: totalCount = 0 } = this.getPagingInfo() || {};\r\n    // fixï¼ä¸å¯ç¨åé¡µæ¶ï¼take=0å¯¼è´processä¸è¿åæ°æ®\r\n    if (state.take === 0) {\r\n      state.take = this.bindingList.length;\r\n    } else {\r\n      state.take = pageSize;\r\n    }\r\n    // ç¼è¾æ¨¡å¼çå¤æ­ä¾æ®ä¸ºpageSizeå°äºç»å®æ°æ®çæ°éä¸å¯ç¨åé¡µ\r\n    const isEditMode = state.take < this.bindingList.length;\r\n    if (isEditMode) {\r\n      state.take = this.bindingList.length;\r\n    }\r\n    const processed = super.process(state);\r\n    // fix:æ°æ®ä»æ å°ææ¶åé¡µä¸å¯ç¨\r\n    processed.total = Math.max(totalCount, this.bindingList.length);\r\n    // åé¡µç¼è¾æ¨¡å¼ä¸æ°æ®æ»è®°å½æ°ä¸è½ç­äºçå®çæ°æ®æ°æ®ï¼å¦ååé¡µå·¥å·æ¡å°±ä¼èªå¨å¢å åé¡µé¡µç­¾\r\n    if (isEditMode) {\r\n      processed.total = totalCount || 1;\r\n    }\r\n\r\n    return processed;\r\n  }\r\n\r\n  /*\r\n   * éä¸­è¡ä¸»é®ååå¤ç\r\n   * @param event { SelectionEvent} éä¸­è¡ååå¤ç\r\n   */\r\n  @HostListener('selectedKeysChange', ['$event'])\r\n  public selectedKeysChangeHandler(selectedKeys: string[]) {\r\n    if (!(this.IsMultipleSelectionMode)) {// åéæ¨¡å¼ä¸\r\n      // è®¾ç½®BindingDataä¸­çå½åè¡\r\n      this.setSelectionIdToBindingData(selectedKeys[selectedKeys.length - 1]);\r\n    }\r\n\r\n    this.viewModel.uiState.setPropertyValue('ids', this.selectionDir.selectedKeys); // æ´æ°éå\r\n  }\r\n\r\n  /*\r\n   * å¤çGridè¡åæ¢äºä»¶\r\n   * @param event { SelectionEvent} è¡åæ¢äºä»¶å¯¹è±¡\r\n   */\r\n  @HostListener('selectionChange', ['$event'])\r\n  public selectionChangeHandler(event: any) {\r\n    if (this.IsMultipleSelectionMode) {\r\n      this.handleSelectedCheckboxChange(this.grid.wrapper, event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * å¤çcheckboxéä¸­äºä»¶\r\n   */\r\n  private handleSelectedCheckboxChange(elementRef: ElementRef, event: any) {\r\n    MultiSelectGridUtility.renderSelectedChangeCheckbox(elementRef, event);\r\n    this.selectedCheckboxChange.emit(event);\r\n  }\r\n\r\n  /*\r\n   * ååæ ¼ç¹å»å¤ç\r\n   * @param event { CellClickEvent } ååæ ¼åå»äºä»¶å¯¹è±¡\r\n   */\r\n  @HostListener('cellClick', ['$event'])\r\n  public cellClickHandler(event: CellClickEvent) {\r\n    this.cellClickParam = event;\r\n    this.cellClickEvent = event;\r\n    this.rowIndex = event.rowIndex;\r\n    this.columnIndex = event.columnIndex;\r\n    this.sender = event.sender;\r\n\r\n    // å¤éæ¨¡å¼ä¸ï¼ä¸ä¸åç»çæåµä¸ï¼æ£æµè¡åæ¢\r\n    if (this.IsMultipleSelectionMode && !this.gridOption.groupable) {\r\n      const currentRowIndex = event.rowIndex;\r\n      if (currentRowIndex !== this.lastRowIndex) {\r\n        const rowSelectedContext: SelectedRowContext = new SelectedRowContext();\r\n        rowSelectedContext.currentRowIndex = currentRowIndex;\r\n        rowSelectedContext.lastRowIndex = this.lastRowIndex;\r\n\r\n        this.handleSelectedRowChange(rowSelectedContext);\r\n      }\r\n    }\r\n\r\n    // è®¾ç½®å®ä½çå½åè¡\r\n    this.dataId = this.getSelectedIdFromGrid(event.dataItem);\r\n    this.setSelectionIdToBindingData(this.dataId);\r\n\r\n    // è¥ç¶ææºä¸æ¯å¯ç¼è¾ç¶æ ä¸å¯ç¼è¾\r\n    if (!this.isEditable()) {\r\n      return;\r\n    }\r\n\r\n\r\n\r\n    // åæ¨¡æ¿ä¸å­å¨  ä¸å¯ç¼è¾\r\n    if (!event.column.editTemplate) {\r\n      return;\r\n    }\r\n    if (event.type === 'click' && !event.isEdited) {\r\n\r\n\r\n      // å¦æå­å¨æ¾éç¶åµ  ç¡®å®æ­£ç¡®çcolumnIndex\r\n      const originColums = this.getColumns(this.gridOption.fields);\r\n      const columns: any[] = this.getColumns(originColums);\r\n      const currentColumnIndex = columns.findIndex((col: any) => col.dataField === event.column.field);\r\n      const hiddenColLen = columns.slice(0, currentColumnIndex + 1).filter(col => !col.visible).length;\r\n\r\n      // èµå¼å¨å±è¡ç´¢å¼  åç´¢å¼\r\n      this.rowIndex = event.rowIndex;\r\n      this.columnIndex = event.columnIndex + hiddenColLen;\r\n      this.hiddenColLen = hiddenColLen;\r\n      this.sender = event.sender;\r\n\r\n      this.setEditable(this.rowIndex, this.columnIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * å¤çéä¸­è¡åæ¢äºä»¶\r\n   */\r\n  private handleSelectedRowChange(rowSelectedContext: SelectedRowContext) {\r\n    MultiSelectGridUtility.renderClickChangedRow(this.grid, rowSelectedContext);\r\n\r\n    this.rowIndex = rowSelectedContext.currentRowIndex;\r\n    this.lastRowIndex = rowSelectedContext.currentRowIndex;\r\n    // æ´æ°å½åè¡\r\n    const id = this.getPrimary(this.rowIndex);\r\n    this.setSelectionIdToBindingData(id);\r\n  }\r\n  /**\r\n   * è·åæå®è¡çä¸»é®\r\n   * @param row è¡å·\r\n   */\r\n  private getPrimary(row: number) {\r\n    let data: any = this.grid.data;\r\n    if (data && !Array.isArray(data) && data.hasOwnProperty('data')) {\r\n      data = data.data;\r\n    }\r\n    const { pageIndex = 1, pageSize = 0 } = this.getPagingInfo() || {};\r\n    const skip = this.bindingList.skip;\r\n    // ä¸åé¡µæèç¬¬ä¸é¡µæ¶åä¸éè¦ä¿®æ¹è¡å·\r\n    const rowNumber = pageSize === 0 || pageIndex === 1 ? row : row - skip;\r\n    if (data.length > rowNumber) {\r\n      return data[rowNumber][this.bindingList.primaryKey];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /*\r\n   * ååæ ¼ç»æç¼è¾å¤ç\r\n   * @param event ååæ ¼ç»æç¼è¾äºä»¶å¯¹è±¡\r\n   */\r\n  @HostListener('cellClose', ['$event'])\r\n  public cellCloseHandler(event: any): any {\r\n\r\n    if (this.dialogSer.hasDialogOpened()) {\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (this.rts) {\r\n      // å¸®å©ç»ä»¶ææ¬åååå»æ¥è¯¢\r\n      if (this.rts.getFormState('lookup.pending')) {\r\n        event.preventDefault();\r\n        return;\r\n      }\r\n\r\n      // ç¹å»å¸®å©ç¡®å®å¯åæ¶æé®åä¸ç»æå½åååæ ¼ç¼è¾\r\n      if (event.originalEvent) {\r\n        if (this.rts.eventPath(event.originalEvent).find(n => n.tagName === 'FARRIS-DIALOG')) {\r\n          event.preventDefault();\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    const { formGroup, column, dataItem, rowIndex } = event;\r\n    const columns = this.getColumns(this.gridOption.fields);\r\n    let currentCol = columns.find((element: any) => {\r\n      return element.dataField === column.field;\r\n    });\r\n    const formControlValue = formGroup[currentCol.editor.binding.path].value;\r\n    if (currentCol.getDynamicData) {\r\n      // è¥æ­¤åæ¯å¨æååæ ¼å\r\n      currentCol = currentCol.getDynamicData(dataItem, currentCol);\r\n    }\r\n    this.setValue(formControlValue, currentCol);\r\n  }\r\n\r\n  /*\r\n     * åè½¦  åæ¢ååæ ¼\r\n     * @param event é®çæä¸äºä»¶\r\n     */\r\n  @HostListener('keydown', ['$event'])\r\n  enterCell(e: any) {\r\n    // åè½¦é®\r\n    if (!e.shiftKey && e.keyCode === 13) {\r\n      // textarea enter å±è½æ¢è¡æä½\r\n      e.preventDefault();\r\n      if (!this.sender) {\r\n        return;\r\n      }\r\n      // ç±äºkeydown äºä»¶ä¼åæ§è¡ï¼æä»¥è¿éåè¦æ§è¡blur äºä»¶ï¼\r\n      e.target.blur();\r\n      this.ngZone.runOutsideAngular(() => {\r\n        setTimeout(() => {\r\n          if (this.rts && this.rts.getFormState('lookup.pending')) {\r\n            e.preventDefault();\r\n            return;\r\n          }\r\n          this.enterNextCell();\r\n        }, 201);\r\n      });\r\n    }\r\n  }\r\n\r\n  /*\r\n     * ç»å®grid option\r\n     * @param dataItem è¡æ°æ®\r\n     */\r\n  private bindingGridOption() {\r\n    if (!this.farrisBindingGridOption) {\r\n      return;\r\n    }\r\n    Object.defineProperty(this.grid, 'gridOption', { value: this.farrisBindingGridOption });\r\n  }\r\n\r\n  /*\r\n   * æ´æ°Gridåé¡µç¶æ\r\n   * @param take\r\n   * @param skip\r\n   */\r\n  private updatePager(take: number, skip: number) {\r\n    if (take === 0) {\r\n      this.currentSkip = 0;\r\n      this.pageSize = 0;\r\n      this.skip = 0;\r\n      this.grid.pageable = false;\r\n    } else {\r\n      this.currentSkip = skip;\r\n      this.skip = skip;\r\n      this.pageSize = take;\r\n      this.grid.pageable = {\r\n        buttonCount: 10,\r\n        info: true,\r\n        type: 'numeric',\r\n        pageSizes: false,\r\n        previousNext: true\r\n      };\r\n    }\r\n  }\r\n\r\n  /*\r\n   * è®¾ç½®ååæ ¼å¯ç¼è¾æ§\r\n   * @param dataItem è¡æ°æ®\r\n   * @param column åå¯¹è±¡\r\n   * @param rowIndex è¡ç´¢å¼\r\n   * @param columnIndex åç´¢å¼\r\n   * @param sender gridå®ä¾\r\n   */\r\n  setEditable(rowNumber: number, columnNumber: number) {\r\n    const data = this.grid.data['data'];\r\n    const { pageIndex = 1, pageSize = 0 } = this.getPagingInfo() || {};\r\n    const skip = this.bindingList.skip;\r\n    // ä¸åé¡µæèç¬¬ä¸é¡µæ¶åä¸éè¦ä¿®æ¹è¡å·\r\n    const dataRowNumber = pageSize === 0 || pageIndex === 1 ? rowNumber : rowNumber - skip;\r\n    let item = data[dataRowNumber];\r\n    if (this.gridOption.groupable) {\r\n      item = this.getGroupItem(data, dataRowNumber);\r\n    }\r\n    const originColums = this.getColumns(this.gridOption.fields);\r\n    const columns = this.getColumns(originColums);\r\n    /* åå¦åçé¡ºåºæ¹å æ¯å¦å­å¨åºå®å  é£ä¹åºè¯¥è·åçæ­£çåå¯¹è±¡ */\r\n    // let col = columns[columnNumber];\r\n\r\n    let tempIndex = columnNumber;\r\n    // å½ååç´¢å¼ä¸ä¸º0\r\n    if (this.grid['gridOption'].showLineNumber) {\r\n      tempIndex = tempIndex - 1;\r\n    }\r\n    if (this.grid.selectable && this.grid.selectable['mode'] === 'multiple') {\r\n      tempIndex = tempIndex - 1;\r\n    }\r\n    const col = columns[tempIndex];\r\n\r\n    const params = {\r\n      dataItem: item,\r\n      column: col,\r\n      rowIndex: rowNumber,\r\n      columnIndex: tempIndex,\r\n    };\r\n\r\n    // æ§å¶ååæ ¼çå¯ç¼è¾æ§\r\n    if (col && !col.editable) {\r\n      col.editable = (param: object) => true;\r\n    }\r\n    if (col && this.notReadOnly(col, params)) {\r\n      // è®¾ç½®å½åè¡\r\n      this.dataId = this.getSelectedIdFromGrid(item);\r\n      this.setSelectionIdToBindingData(this.dataId);\r\n      // const value = this.getValue(item, col.dataField);\r\n      // this.setValue(value, col);\r\n      this.sender.editCell(rowNumber, columnNumber - this.hiddenColLen, this.viewModel.form);\r\n    }\r\n\r\n  }\r\n  /*\r\n  è·åæ´æ° rowIndex columnIndex\r\n   */\r\n  updateIndex(rowNumber: number, columnIndex: number) {\r\n    const newColumnIndex = (columnIndex + 1) % this.len;\r\n    if (!newColumnIndex) {\r\n      const dataLen = this.bindingList.toJSON().length;\r\n      const newRowIndex = (rowNumber + 1) % dataLen;\r\n      return { rowIndex: newRowIndex, columnIndex: newColumnIndex };\r\n    }\r\n    return {\r\n      rowIndex: rowNumber,\r\n      columnIndex: newColumnIndex\r\n    };\r\n  }\r\n\r\n  /* æ¯å¦åªè¯» */\r\n  notReadOnly(column: any, param: any) {\r\n    if (!column) {\r\n      return false;\r\n    }\r\n    return column.editable(param) && !column.editor.readonly;\r\n  }\r\n\r\n  /*\r\n     * ç»åè¡¨èµå¼ æç»formcontrolèµå¼\r\n      */\r\n  setValue(value: any, column: any) {\r\n    const currentColumnType = column.dataType;\r\n    // åæ¶å¤æ­gridOptionçåå¯¹è±¡\r\n    const bindingData = this.viewModel.bindingData;\r\n    const fieldPaths = this.getFieldPaths(bindingData.bindingPath, column.dataField);\r\n    // å­å¨è¡ç¼è¾å¨\r\n    if (currentColumnType === 'date') {\r\n      let dateStr = this.dateService.formatTo(value, 'yyyy-MM-dd HH:mm:ss');\r\n      if (!dateStr) {\r\n        dateStr = '';\r\n      }\r\n      this.viewModel.bindingData.setValue(fieldPaths, dateStr, true, true);\r\n    } else {\r\n      this.viewModel.bindingData.setValue(fieldPaths, value, true, true);\r\n    }\r\n  }\r\n\r\n  /* åç»æ¶ è·åç¹å»è¡æ°æ® */\r\n  getGroupItem(data: any[], rowNumber: number) {\r\n    let index = rowNumber;\r\n    for (const i in data) {\r\n      if (index < data[i].items.length) {\r\n        return data[i].items[index];\r\n      } else {\r\n        index = index - data[i].items.length;\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n   * è·å ååæ ¼å¼  ä¸»ä»è¡¨æ¯æ\r\n   * @param dataItem è¡æ°æ®\r\n   * @param field å­æ®µ\r\n   */\r\n  getValue(dataItem: any, field: string) {\r\n    const index = field.indexOf('.');\r\n    if (index < 0) {\r\n      return dataItem[field];\r\n    }\r\n    const fields = field.split('.');\r\n    // fieldå­ç¬¦ä¸²ç»å\r\n    return fields.reduce((result: any, next: any) => {\r\n      return result[next];\r\n    }, dataItem);\r\n  }\r\n\r\n  /*\r\n  * è·å bindingData è·¯å¾\r\n  * @param bindingPath å½åç»å®çå­æ®µè·¯å¾\r\n  * @param fieldName å­æ®µ\r\n  */\r\n  private getFieldPaths(bindingPath: string, field: string): string[] {\r\n    let fieldPath = '';\r\n    if (bindingPath.length > 1) {\r\n      fieldPath = bindingPath.substr(1).replace(/\\//g, '.') + '.' + field;\r\n    } else {\r\n      fieldPath = field;\r\n    }\r\n    return fieldPath.split('.');\r\n  }\r\n\r\n  /**\r\n   * åè½¦è¿å¥ä¸ä¸ä¸ªååæ ¼\r\n   */\r\n  enterNextCell() {\r\n    const index = this.updateIndex(this.rowIndex, this.columnIndex);\r\n    if (!index.columnIndex && !index.rowIndex) {\r\n      const len = this.bindingList.toJSON().length;\r\n      // å¦æå­å¨æ·»å æ°æ®çAPI\r\n      this.appendRow.emit();\r\n      if (this.appendRow.observers && this.appendRow.observers.length) {\r\n        this.interVal = setInterval(() => {\r\n          if (this.bindingList.toJSON().length - 1 === len) {\r\n            this.setEditable(this.bindingList.toJSON().length - 1, 0);\r\n            this.rowIndex = this.bindingList.toJSON().length - 1;\r\n            this.columnIndex = 0;\r\n            clearInterval(this.interVal);\r\n          }\r\n        }, 0);\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.setEditable(index.rowIndex, index.columnIndex);\r\n    this.rowIndex = index.rowIndex;\r\n    this.columnIndex = index.columnIndex;\r\n  }\r\n\r\n  /* è·åçæ­£çåå¯¹è±¡ */\r\n  getColumns(columns: any) {\r\n    // å¤æ­æ¯å¦å­å¨åºå®å\r\n    const hasLocked = columns.some((ele: any) => {\r\n      return ele.frozen;\r\n    });\r\n    if (hasLocked) {\r\n      const lockedColumns = columns.filter((ele: any) => {\r\n        return ele.frozen;\r\n      });\r\n      const notLockedColumns = columns.filter((ele: any) => {\r\n        return !ele.frozen;\r\n      });\r\n      return [...lockedColumns, ...notLockedColumns];\r\n    }\r\n    return columns;\r\n  }\r\n\r\n  /*\r\n   * æ¸²ææå®è¡ä¸ºéä¸­è¡ï¼å°æå®è¡çkeyæ·»å å°éä¸­è¡éåä¸­\r\n   */\r\n  private renderSelectionRow(key: string, selectedKeys: any[]) {\r\n    if (!key || key === '') {\r\n      return;\r\n    }\r\n\r\n    // TODO:ä½¿ç¨ç­ç¥æ¨¡å¼éæ\r\n    if (this.IsMultipleSelectionMode) {\r\n      const index = selectedKeys.indexOf(key);\r\n      if (index >= 0) {\r\n        return;\r\n      }\r\n\r\n      selectedKeys.push(key);\r\n    } else {\r\n      if (selectedKeys.length === 1 && selectedKeys[0] === key) {\r\n        return;\r\n      }\r\n\r\n      selectedKeys.splice(0, selectedKeys.length);\r\n      selectedKeys.push(key);\r\n    }\r\n\r\n    this.selectionDir.selectedKeysChange.emit(selectedKeys); // æå¨è§¦åselectedKeysChangeäºä»¶\r\n  }\r\n\r\n  /*\r\n   * è·åGridä¸çå½åè¡åç \r\n   * @param dataItem è¡æ°æ®\r\n   */\r\n  private getSelectedIdFromGrid(dataItem: any) {\r\n    const primaryKey = this.bindingList.primaryKey;\r\n    return dataItem[primaryKey];\r\n  }\r\n\r\n  /*\r\n   * è®¾ç½®BindingListçå½åè¡\r\n   * @param id å½åè¡åç \r\n   */\r\n  private setSelectionIdToBindingData(id: string): void {\r\n    this.bindingList.setCurrentId(id, true);\r\n  }\r\n\r\n  /*\r\n  *åè¡¨æ´ä½æ¯å¦å¯ç¼è¾\r\n   */\r\n  isEditable() {\r\n    if (this.editable === undefined) {\r\n      if (!this.viewModel.stateMachine) {\r\n        // ç¶ææºä¸å­å¨çæ¶å\r\n        return false;\r\n      }\r\n      // ç¶ææºå­å¨çæ¶å\r\n      return this.viewModel.stateMachine['editable'];\r\n    }\r\n    // èªå®ä¹èµå¼\r\n    return this.editable;\r\n  }\r\n  /*  */\r\n  isDataChanged() {\r\n    let hasUnsavedData = false;\r\n    const entityArray = this.viewModel.frameContext.repository.entityCollection.toArray();\r\n    for (const entity of entityArray) {\r\n      if (entity.changes.length > 0) {\r\n        hasUnsavedData = true;\r\n        break;\r\n      }\r\n    }\r\n    return hasUnsavedData;\r\n  }\r\n}\r\n","\r\n/*\r\n * @Author: Witt\r\n * @Date: 2019-04-01 17:26:50\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-12-12 16:17:06\r\n */\r\nimport { FrameContext } from '@farris/devkit';\r\nimport { TreeNode, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { PathHierarchyInfo } from './types';\r\n// tslint:disable: no-string-literal\r\n/**\r\n * æ èç¹æé å¨\r\n * @summary\r\n * å°BindingDataä¸­çæ°æ®éåè½¬æ¢æTreeTableèç¹éå\r\n */\r\nclass PathTreeNodeBuilder {\r\n  private levelGroup: { [level: string]: any[] } = {};\r\n  private frameContext: FrameContext;\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(allNodesData: any[], oldTreeNodes: TreeNode[], primaryKey: string, hierarchyInfoKey: string, context?: any) {\r\n    this.primaryKey = primaryKey;\r\n    this.hierarchyInfoKey = hierarchyInfoKey;\r\n    this.allNodes = [];\r\n    this.allNodesData = allNodesData;\r\n    this.context = context || {};\r\n    this.nodesWaitExpand = [];\r\n    this.nodesShouldExpand = context && context.nodesShouldExpand || [];\r\n    this.frameContext = context && context.frameContext || null;\r\n    this.addTreeLoadCompleteListener(this.onTreeLoadComplete.bind(this));\r\n\r\n    this.initLevelGroup();\r\n    this.allNodesMap = new Map<string, TreeNode>();\r\n    this.allOldNodesMap = new Map<string, TreeNode>();\r\n    this.buildNodesDataMap(oldTreeNodes);\r\n  }\r\n  /**\r\n   * å±å¼è³å±çº§\r\n   * @description -1ä¸ºä¸å±å¼\r\n   */\r\n  private get expandLevel() {\r\n    return this.context && this.context.hasOwnProperty('expandLevel') ? this.context['expandLevel'] : -1;\r\n  }\r\n  private get component(): TreeTableComponent {\r\n    return this.context && this.context['component'];\r\n  }\r\n  private get addTreeLoadCompleteListener() {\r\n    return this.context && this.context['addTreeLoadCompleteListener'] || function (args: any) { };\r\n  }\r\n  /**\r\n   * éè¦å±å¼çèç¹\r\n   */\r\n  private nodesShouldExpand: string[];\r\n  /**\r\n   * ç­å¾å±å¼çèç¹\r\n   * @description èç¹ç»æ\r\n   * ```\r\n   * {id:'xxx',expanded:false}\r\n   * ```\r\n   */\r\n  private nodesWaitExpand: any[] = [];\r\n\r\n  /**\r\n   * ä¸»é®å­æ®µå\r\n   */\r\n  private primaryKey: string;\r\n\r\n  /**\r\n   * åçº§ç å­æ®µå\r\n   */\r\n  private hierarchyInfoKey: string;\r\n\r\n  /**\r\n   * èç¹çæ°æ®éå\r\n   */\r\n  private allNodesData: any[];\r\n\r\n  /**\r\n   * èç¹éå\r\n   */\r\n  private allNodes: TreeNode[];\r\n\r\n  /**\r\n   * ä¸ä¸æ¬¡ç»å®çæ èç¹éåMap\r\n   */\r\n  private allNodesMap: Map<string, TreeNode>;\r\n\r\n  /**\r\n   * ä¸ä¸æ¬¡ç»å®çæ èç¹éåMap\r\n   */\r\n  private allOldNodesMap: Map<string, TreeNode>;\r\n  /**\r\n   * ä¸ä¸æ\r\n   */\r\n  private context: any;\r\n  public updateTreeNode(allNodesData: any, data: any) {\r\n    this.allNodesData = allNodesData;\r\n    this.initLevelGroup();\r\n    this.buildNodesDataMap(data);\r\n  }\r\n  public build(): TreeNode[] {\r\n    const tree: TreeNode[] = [];\r\n    const childrenOf = {};\r\n    this.allNodesData.forEach(item => {\r\n      const id = item.id;\r\n      const parentId = this.getParentId(item);\r\n      // item.parentId = parentId;\r\n      // å±å¼æ°å¢èç¹çç¶èç¹\r\n      const isNewNode = this.isNewNode(item);\r\n      if (isNewNode === true) {\r\n        this.expandParentNode(item);\r\n      }\r\n      // æé æ èç¹\r\n      const node = this.buildNode(item);\r\n      childrenOf[id] = childrenOf[id] || [];\r\n      node.children = childrenOf[id];\r\n\r\n      this.allNodesMap.set(item[this.primaryKey], node);\r\n      if (parentId) {\r\n        childrenOf[parentId] = childrenOf[parentId] || [];\r\n        childrenOf[parentId].push(node);\r\n      } else {\r\n        tree.push(node);\r\n      }\r\n    });\r\n    return tree;\r\n  }\r\n  /**\r\n   * æé æ èç¹\r\n   */\r\n  public build1(): TreeNode[] {\r\n    let minLayer;\r\n    // è·åæé¡¶çº§èç¹çlayer\r\n    this.allNodesData.forEach(node => {\r\n      const hierarchyInfo = this.getHierarchyInfo(node);\r\n      if (hierarchyInfo) {\r\n        const layer = hierarchyInfo['layer'];\r\n        if (!isNaN(layer)) {\r\n          if (minLayer === undefined) {\r\n            minLayer = layer;\r\n          } else if (layer < minLayer) {\r\n            minLayer = layer;\r\n          }\r\n        }\r\n      }\r\n    });\r\n    const topLayer = minLayer - 1;\r\n    this.buildNodes('', topLayer, this.allNodesData, this.allNodes);\r\n    return this.allNodes;\r\n  }\r\n\r\n  /**\r\n   * æé æ èç¹éå\r\n   */\r\n  private buildNodes(fPath: string, fLayer: number, allNodesData: any[], treeNodes: TreeNode[]): void {\r\n    const childNodesData = this.getChildNodesData(fPath, fLayer);\r\n    childNodesData.forEach((nodeData: any) => {\r\n      // å±å¼æ°å¢èç¹çç¶èç¹\r\n      const isNewNode = this.isNewNode(nodeData);\r\n      if (isNewNode === true) {\r\n        this.expandParentNode(nodeData);\r\n      }\r\n\r\n      // æé æ èç¹\r\n      const node = this.buildNode(nodeData);\r\n      treeNodes.push(node);\r\n      this.allNodesMap.set(nodeData[this.primaryKey], node);\r\n\r\n      // éå½éåä¸çº§èç¹\r\n      const hierarchyInfo = this.getHierarchyInfo(nodeData);//nodeData[this.hierarchyInfoKey];\r\n      const currentLayer = hierarchyInfo['layer'];\r\n      const currentPath = hierarchyInfo['path'];\r\n      this.buildNodes(currentPath, currentLayer, allNodesData, node.children as TreeNode[]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * åå»ºæ èç¹\r\n   */\r\n  private buildNode(nodeData: any): TreeNode {\r\n    const isLeaf = this.isLeaf(nodeData);\r\n    // è·åèç¹çå±å¼ç¶æ\r\n    const shouldExpand = this.shouldExpand(nodeData);\r\n    // èç¹è½ç¶åºè¯¥å±å¼ï¼ä½å¯è½æ¯å ä¸ºä¹åå°±æ¯å±å¼ç¶æï¼æä»¥åºè¯¥æ£æ¥èç¹ä¹åçç¶æ\r\n    const originExpandStatus = this.isExpanded(nodeData);\r\n    // å¦æåºè¯¥å±å¼è¯¥èç¹ï¼ä½æ¯è¯¥èç¹ä¹åæç¶æï¼é£ä¹è¯¥èç¹ä¸åºè¯¥åç±ç¨åºå±å¼ã\r\n    if (!originExpandStatus && shouldExpand) {\r\n      this.expandNode(nodeData);\r\n    }\r\n    const paginationInfo = this.buildPaginationInfo(nodeData);\r\n    const treeNode: TreeNode = {\r\n      data: Object.assign({}, nodeData),\r\n      children: [],\r\n      expanded: shouldExpand,\r\n      leaf: isLeaf\r\n    };\r\n    if (paginationInfo) {\r\n      treeNode.pagination = paginationInfo;\r\n    }\r\n    return treeNode;\r\n  }\r\n  /**\r\n   * æé åé¡µä¿¡æ¯\r\n   * @param nodeData nodeData\r\n   * @returns \r\n   */\r\n  private buildPaginationInfo(nodeData: any): { pageIndex: number, pageSize: number, total: number } | null {\r\n    let result = null;\r\n    if (this.frameContext) {\r\n      const id = this.getPrimary(nodeData);\r\n      // è·ååé¡µä¿¡æ¯\r\n      const key = `_NODE_${id}_PAGINATION_INFO_`;\r\n      const pagination = this.frameContext.params.get(key) || null;\r\n      if (pagination && pagination.pageCount > 1) {\r\n        result = {\r\n          pageIndex: pagination.pageIndex,\r\n          pageSize: pagination.pageSize,\r\n          total: pagination.totalCount\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * è®¡ç®èç¹æ¯å¦éè¦å±å¼\r\n   * @param nodeData nodeData\r\n   */\r\n  private shouldExpand(nodeData: any): boolean {\r\n    const [layer, isLeaf] = [this.getNodeLayer(nodeData), this.isLeaf(nodeData)];\r\n    // æ°¸è¿ä¸å±å¼å¶å­èç¹\r\n    if (isLeaf) {\r\n      return false;\r\n    }\r\n    let expanded = this.isExpanded(nodeData);\r\n    if (!expanded) {\r\n      const id = this.getPrimary(nodeData);\r\n      if (this.nodesWaitExpand.findIndex(node => node && node.id === id) > -1) {\r\n        return false;\r\n      }\r\n      if (this.nodesShouldExpand.findIndex(nodeId => nodeId === id) > -1) {\r\n        return true;\r\n      }\r\n      if (this.expandLevel === -1) {\r\n        // -1 ä¸ºä¸å±å¼\r\n        expanded = false;\r\n      } else if (this.expandLevel === 0) {\r\n        // 0 ä¸ºå¨é¨å±å¼\r\n        expanded = true;\r\n      } else {\r\n        // æ²¡æå¯ç¨åå±å è½½ï¼éè¿å±å¼å±çº§ç¡®å®æ¯å¦å±å¼è¯¥èç¹\r\n        expanded = layer <= this.expandLevel;\r\n        // å¦æèç¹åæ¬å­å¨ä¸èç¹æ²¡æå±å¼åä¸å±å¼\r\n        const oldTreeNode = this.getOldNode(nodeData);\r\n        if (oldTreeNode && !oldTreeNode.expanded) {\r\n          expanded = false;\r\n        }\r\n      }\r\n    }\r\n    return expanded;\r\n  }\r\n  /**\r\n   * å±å¼æ èç¹\r\n   * @description å®å¨å è½½æ ä½¿ç¨å±å¼å±æ§å¨buildNodeæ¶å·²ç»å±å¼ï¼æ­¤å½æ°çä¸»è¦ç¨äºå±å¼åçº§å è½½æ \r\n   * @param nodeData nodeData\r\n   */\r\n  private expandNode(nodeData: any) {\r\n    const [path, layer] = [this.getNodePath(nodeData), this.getNodeLayer(nodeData)];\r\n    const childs = this.getChildNodesData(path, layer);\r\n\r\n    // å½åèç¹ä¸æ¯å¶å­èç¹ï¼ä½å¨èç¹æ°æ®ä¸­åæ¾ä¸å°è¯¥èç¹çå­èç¹ï¼åè®¤ä¸ºæ å¯ç¨äºåå±å è½½\r\n    if (!childs || childs.length < 1) {\r\n      // åå±å è½½æ éè¦éè¿è§¦åèç¹å±å¼äºä»¶æå è½½ä¸å±ï¼ç®åæ ä¸è¿ä¸å­å¨è¯¥èç¹ï¼æ æ³ç´æ¥å±å¼ï¼éè¦ç­æ å è½½å®ä¹ååå±å¼\r\n      const id = this.getPrimary(nodeData);\r\n      if (this.nodesWaitExpand.findIndex(node => node && node.id === id) < 0) {\r\n        this.nodesWaitExpand.push({ id, expanded: false });\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * æ å è½½å®æäºä»¶\r\n   */\r\n  private onTreeLoadComplete() {\r\n    const index = this.nodesWaitExpand.findIndex(node => !node.expanded);\r\n    const nodeData = this.nodesWaitExpand[index] || {};\r\n    const { id } = nodeData;\r\n    if (id) {\r\n      const rowNode = this.component.findRowNode(id);\r\n      if (rowNode) {\r\n        nodeData.expanded = true;\r\n        // if (nodeData && nodeData.node && !nodeData.node.expanded) {\r\n        //   return;\r\n        // }\r\n        this.component.expandNode(id);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * è·åä¸»é®\r\n   * @param nodeData nodeData\r\n   */\r\n  private getPrimary(nodeData: any) {\r\n    return nodeData[this.primaryKey];\r\n  }\r\n  // #region å·¥å·æ¹æ³ï¼å¾åç¬å°è£\r\n\r\n  /**\r\n   * è·åå­çº§èç¹çæ°æ®éå\r\n   */\r\n  private getChildNodesData(fPath: string, fLayer: number): any[] {\r\n    const childNodesData = [];\r\n    this.allNodesData.forEach((nodeData: any) => {\r\n\r\n      // @todoï¼å¾å é¤ï¼å¼å®¹æ²¡æhierarchyInfoçæ°æ®\r\n      const hierarchyInfo = this.getHierarchyInfo(nodeData);//this.getValue(nodeData, this.hierarchyInfoKey); /// nodeData[this.hierarchyInfoKey];\r\n      if (!hierarchyInfo) {\r\n        return;\r\n      }\r\n\r\n      // å¹éèç¹\r\n      const currentLayer = hierarchyInfo['layer'];\r\n      const currentPath = hierarchyInfo['path'];\r\n      if ((currentLayer === fLayer + 1) && currentPath && currentPath.startsWith(fPath)) {\r\n        childNodesData.push(nodeData);\r\n      }\r\n    });\r\n    return childNodesData;\r\n  }\r\n\r\n  private getHierarchyInfo(nodeData: any): PathHierarchyInfo {\r\n    return this.getValue(nodeData, this.hierarchyInfoKey);//nodeData[this.hierarchyInfoKey];\r\n  }\r\n\r\n  private initLevelGroup() {\r\n    this.levelGroup = {};\r\n    this.allNodesData.forEach((nodeData) => {\r\n      const hierarchyInfo = this.getHierarchyInfo(nodeData);\r\n      const key = `level${hierarchyInfo.layer}`;\r\n      if (this.levelGroup[key]) {\r\n        this.levelGroup[key].push(nodeData);\r\n      } else {\r\n        this.levelGroup[key] = [nodeData];\r\n      }\r\n    });\r\n  }\r\n  private getParentId(node: any) {\r\n    const hierarchyInfo = this.getHierarchyInfo(node);\r\n    const parentLevelGroup = this.levelGroup[this.getLevelGroupKey(hierarchyInfo.layer - 1)] || [];\r\n    const parent = parentLevelGroup.find(nodeData => {\r\n      const currentHierarchyInfo = this.getHierarchyInfo(nodeData);\r\n      if (currentHierarchyInfo.isDetail === true) {\r\n        return false;\r\n      }\r\n      return hierarchyInfo.path.startsWith(currentHierarchyInfo.path);\r\n    });\r\n    if (parent) {\r\n      return parent.id;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  private getLevelGroupKey(level: any) {\r\n    return `level${level}`;\r\n  }\r\n  /**\r\n   * æ ¹æ®è·¯å¾è·åæ°æ®\r\n   * @param target target\r\n   * @param path è·¯å¾\r\n   */\r\n  private getValue(target: any, path: string) {\r\n    if (path.indexOf('/') === -1) {\r\n      return target[path];\r\n    }\r\n    const paths: any = path.split('/').filter(p => p);\r\n    if (paths.length < 1) {\r\n      return target;\r\n    }\r\n    return paths.reduce((result, path) => {\r\n      return result && result[path];\r\n    }, target);\r\n  }\r\n  /**\r\n   * è·ååçº§ä¿¡æ¯ä¸­çå±çº§\r\n   * @param nodeData nodeData\r\n   */\r\n  private getNodeLayer(nodeData: any) {\r\n    const hierarchyInfo = this.getHierarchyInfo(nodeData);\r\n    return hierarchyInfo['layer'];\r\n  }\r\n  /**\r\n   * è·ååçº§ä¿¡æ¯ä¸­çè·¯å¾\r\n   * @param nodeData nodeData\r\n   */\r\n  private getNodePath(nodeData: any) {\r\n    const hierarchyInfo = this.getHierarchyInfo(nodeData);\r\n    return hierarchyInfo['path'];\r\n  }\r\n  /**\r\n   * è·åå±å¼ç¶æ\r\n   */\r\n  private isExpanded(newData: any): boolean {\r\n    const oldTreeNode = this.getOldNode(newData);\r\n    return oldTreeNode ? oldTreeNode.expanded : undefined;\r\n  }\r\n\r\n  /**\r\n   * æ¯å¦æ¯å¶å­èç¹\r\n   * @todoï¼æå¡å¨ç«¯å¯¹isDetailçç®åæ²¡æä¸åç«¯åæ­¥ï¼isDetailä¸åç¡®ã\r\n   */\r\n  private isLeaf(nodeData: any): boolean {\r\n    const hierarchyInfo = this.getHierarchyInfo(nodeData);// nodeData[this.hierarchyInfoKey];\r\n    const isDetail = hierarchyInfo['isDetail'];\r\n    return isDetail;\r\n  }\r\n\r\n  /**\r\n   * å¤æ­èç¹æ¯å¦æ¯æ°å¢\r\n   * @todoï¼ä¸åºè¯¥è¿æ ·å¤æ­ï¼å¾ä¼åã\r\n   * @summary\r\n   * 1ãéç©ºæ ï¼ç©ºæ è§ä¸ºåæ¬¡å è½½æ°æ®ï¼ï¼\r\n   * 2ãæ¾ä¸å°oldNodeã\r\n   */\r\n  private isNewNode(nodeData: any): boolean {\r\n    if (this.allOldNodesMap.size === 0) {\r\n      return false;\r\n    }\r\n    const oldTreeNode = this.getOldNode(nodeData);\r\n    return oldTreeNode ? false : true;\r\n  }\r\n\r\n  /**\r\n   * å±å¼ç¶èç¹\r\n   */\r\n  private expandParentNode(nodeData: any): void {\r\n    const parentTreeNode = this.getParentNode(nodeData);\r\n    if (!parentTreeNode) {\r\n      return;\r\n    }\r\n    parentTreeNode.leaf = false;\r\n    parentTreeNode.expanded = true;\r\n  }\r\n\r\n  /**\r\n   * æ¥æ¾ç¶èç¹\r\n   */\r\n  private getParentNode(nodeData: any): TreeNode {\r\n    const hierarchyInfo = this.getHierarchyInfo(nodeData);//nodeData[this.hierarchyInfoKey];\r\n    const layer = hierarchyInfo['layer'];\r\n    const path = hierarchyInfo['path'];\r\n\r\n    const allNodes = Array.from(this.allNodesMap.values());\r\n    const parentNode = allNodes.find((currentNode: TreeNode) => {\r\n      const currentLayer = this.getValue(currentNode.data, this.hierarchyInfoKey)['layer'];//currentNode.data[this.hierarchyInfoKey]['layer'];\r\n      const currentPath = this.getValue(currentNode.data, this.hierarchyInfoKey)['path'];//  currentNode.data[this.hierarchyInfoKey]['path'];\r\n      if ((layer === currentLayer + 1) && path.startsWith(currentPath) === true) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    return parentNode;\r\n  }\r\n\r\n  /**\r\n   * è·åèçæ èç¹\r\n   */\r\n  private getOldNode(nodeData: any): TreeNode {\r\n    const id = nodeData[this.primaryKey];\r\n    return this.allOldNodesMap.get(id);\r\n  }\r\n\r\n  /**\r\n   * æå¹³TreeNodesï¼å¹¶æ¾å¥ä¸ä¸ªMapä¸­\r\n   */\r\n  private buildNodesDataMap(treeNodes: TreeNode[]): void {\r\n    treeNodes.forEach((treeNode: TreeNode) => {\r\n      this.allOldNodesMap.set(treeNode.data[this.primaryKey], treeNode);\r\n      if (treeNode.children) {\r\n        this.buildNodesDataMap(treeNode.children);\r\n      }\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n}\r\n\r\nexport { PathTreeNodeBuilder };\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-31 09:48:10 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-24 17:00:58\r\n */\r\n\r\nimport { FrameContext } from '@farris/devkit';\r\nimport { TreeNode, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { ParentHierarchyInfo } from './types';\r\n// tslint:disable: no-string-literal max-line-length\r\n/**\r\n * æ èç¹æé å¨\r\n * @summary\r\n * å°BindingDataä¸­çæ°æ®éåè½¬æ¢æTreeTableèç¹éå\r\n */\r\nclass ParentTreeNodeBuilder {\r\n  private frameContext: FrameContext;\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(allNodesData: any[], oldTreeNodes: TreeNode[], primaryKey: string, hierarchyInfoKey: string, context?: any) {\r\n    this.primaryKey = primaryKey;\r\n    this.hierarchyInfoKey = hierarchyInfoKey;\r\n    this.allNodes = [];\r\n    this.allNodesData = allNodesData;\r\n    this.context = context || {};\r\n    this.nodesWaitExpand = [];\r\n    this.nodesShouldExpand = context && context.nodesShouldExpand || [];\r\n    this.frameContext = context && context.frameContext || null;\r\n    this.addTreeLoadCompleteListener(this.onTreeLoadComplete.bind(this));\r\n\r\n    this.allNodesMap = new Map<string, TreeNode>();\r\n    this.allOldNodesMap = new Map<string, TreeNode>();\r\n    this.buildNodesDataMap(oldTreeNodes);\r\n  }\r\n  /**\r\n   * å±å¼è³å±çº§\r\n   * @description -1ä¸ºä¸å±å¼\r\n   */\r\n  private get expandLevel() {\r\n    return this.context && this.context.hasOwnProperty('expandLevel') ? this.context['expandLevel'] : -1;\r\n  }\r\n  private get component(): TreeTableComponent {\r\n    return this.context && this.context['component'];\r\n  }\r\n  private get addTreeLoadCompleteListener() {\r\n    return this.context && this.context['addTreeLoadCompleteListener'] || function (args: any) { };\r\n  }\r\n  /**\r\n   * éè¦å±å¼çèç¹\r\n   */\r\n  private nodesShouldExpand: string[];\r\n\r\n  /**\r\n   * ç­å¾å±å¼çèç¹\r\n   * @description èç¹ç»æ\r\n   * ```\r\n   * {id:'xxx',expanded:false}\r\n   * ```\r\n   */\r\n  private nodesWaitExpand: any[] = [];\r\n\r\n  /**\r\n   * ä¸»é®å­æ®µå\r\n   */\r\n  private primaryKey: string;\r\n\r\n  /**\r\n   * åçº§ç å­æ®µå\r\n   */\r\n  private hierarchyInfoKey: string;\r\n\r\n  /**\r\n   * èç¹çæ°æ®éå\r\n   */\r\n  private allNodesData: any[];\r\n\r\n  /**\r\n   * èç¹éå\r\n   */\r\n  private allNodes: TreeNode[];\r\n\r\n  /**\r\n   * ä¸ä¸æ¬¡ç»å®çæ èç¹éåMap\r\n   */\r\n  private allNodesMap: Map<string, TreeNode>;\r\n\r\n  /**\r\n   * ä¸ä¸æ¬¡ç»å®çæ èç¹éåMap\r\n   */\r\n  private allOldNodesMap: Map<string, TreeNode>;\r\n\r\n  /**\r\n   * ä¸ä¸æ\r\n   */\r\n  private context: any;\r\n\r\n  public updateTreeNode(allNodesData: any, data: any) {\r\n    this.allNodesData = allNodesData;\r\n    this.buildNodesDataMap(data);\r\n  }\r\n  public build(): TreeNode[] {\r\n    let tree: TreeNode[] = [];\r\n    const childrenOf = {};\r\n    const parents = {};\r\n    this.allNodesData.forEach(item => {\r\n      const id = item.id;\r\n      const parentId = this.getHierarchyInfo(item).parentElement;\r\n      // item.parentId = parentId;\r\n      // å±å¼æ°å¢èç¹çç¶èç¹\r\n      const isNewNode = this.isNewNode(item);\r\n      if (isNewNode === true) {\r\n        this.expandParentNode(item);\r\n      }\r\n      // æé æ èç¹\r\n      const node = this.buildNode(item);\r\n      childrenOf[id] = childrenOf[id] || [];\r\n      node.children = childrenOf[id];\r\n\r\n      parents[parentId] = parents[parentId] || [];\r\n      parents[parentId].push(node);\r\n      this.allNodesMap.set(item[this.primaryKey], node);\r\n      if (parentId) {\r\n        childrenOf[parentId] = childrenOf[parentId] || [];\r\n        childrenOf[parentId].push(node);\r\n      } else {\r\n        tree.push(node);\r\n      }\r\n    });\r\n    // ææèç¹é½æ¯parentIdï¼æ²¡æè¿åæ ¹èç¹\r\n    if ((!tree || tree.length < 1) && this.allNodesData && this.allNodesData.length > 0) {\r\n      const parentIds = Object.keys(parents);\r\n      parentIds.forEach(parentId => {\r\n        if (!this.allNodesData.find(item => item.id === parentId)) {\r\n          tree = tree.concat(parents[parentId]);\r\n        }\r\n      });\r\n    }\r\n    return tree;\r\n  }\r\n  /**\r\n   * æé æ èç¹\r\n   */\r\n  public build1(): TreeNode[] {\r\n    let minLayer;\r\n    // è·åæé¡¶çº§èç¹çlayer\r\n    this.allNodesData.forEach(node => {\r\n      const hierarchyInfo = this.getHierarchyInfo(node);\r\n      if (hierarchyInfo) {\r\n        const layer = hierarchyInfo['layer'];\r\n        if (!isNaN(layer)) {\r\n          if (minLayer === undefined) {\r\n            minLayer = layer;\r\n          } else if (layer < minLayer) {\r\n            minLayer = layer;\r\n          }\r\n        }\r\n      }\r\n    });\r\n    const topLayer = minLayer - 1;\r\n    this.buildNodes('', topLayer, this.allNodesData, this.allNodes);\r\n    return this.allNodes;\r\n  }\r\n\r\n  /**\r\n   * æé æ èç¹éå\r\n   */\r\n  private buildNodes(fParentElement: string, fLayer: number, allNodesData: any[], treeNodes: TreeNode[]): void {\r\n    const childNodesData = this.getChildNodesData(fParentElement, fLayer);\r\n    childNodesData.forEach((nodeData: any) => {\r\n\r\n      // å±å¼æ°å¢èç¹çç¶èç¹\r\n      const isNewNode = this.isNewNode(nodeData);\r\n      if (isNewNode === true) {\r\n        this.expandParentNode(nodeData);\r\n      }\r\n\r\n      // æé æ èç¹\r\n      const node = this.buildNode(nodeData);\r\n      treeNodes.push(node);\r\n      this.allNodesMap.set(nodeData[this.primaryKey], node);\r\n\r\n      // éå½éåä¸çº§èç¹\r\n      const hierarchyInfo = this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];\r\n      const currentLayer = hierarchyInfo['layer'];\r\n      const currentId = nodeData[this.primaryKey];\r\n      this.buildNodes(currentId, currentLayer, allNodesData, node.children as TreeNode[]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * åå»ºæ èç¹\r\n   */\r\n  private buildNode(nodeData: any): TreeNode {\r\n    const isLeaf = this.isLeaf(nodeData);\r\n    // è·åèç¹çå±å¼ç¶æ\r\n    const shouldExpand = this.shouldExpand(nodeData);\r\n    // èç¹è½ç¶åºè¯¥å±å¼ï¼ä½å¯è½æ¯å ä¸ºä¹åå°±æ¯å±å¼ç¶æï¼æä»¥åºè¯¥æ£æ¥èç¹ä¹åçç¶æ\r\n    const originExpandStatus = this.isExpanded(nodeData);\r\n    // å¦æåºè¯¥å±å¼è¯¥èç¹ï¼ä½æ¯è¯¥èç¹ä¹åæç¶æï¼é£ä¹è¯¥èç¹ä¸åºè¯¥åç±ç¨åºå±å¼ã\r\n    if (!originExpandStatus && shouldExpand) {\r\n      this.expandNode(nodeData);\r\n    }\r\n    const paginationInfo = this.buildPaginationInfo(nodeData);\r\n    const treeNode: TreeNode = {\r\n      data: Object.assign({}, nodeData),\r\n      children: [],\r\n      expanded: shouldExpand,\r\n      leaf: isLeaf\r\n    };\r\n    if (paginationInfo) {\r\n      treeNode.pagination = paginationInfo;\r\n    }\r\n    return treeNode;\r\n  }\r\n  /**\r\n   * æé åé¡µä¿¡æ¯\r\n   * @param nodeData nodeData\r\n   * @returns \r\n   */\r\n  private buildPaginationInfo(nodeData: any): { pageIndex: number, pageSize: number, total: number } | null {\r\n    let result = null;\r\n    if (this.frameContext) {\r\n      const id = this.getPrimary(nodeData);\r\n      // è·ååé¡µä¿¡æ¯\r\n      const key = `_NODE_${id}_PAGINATION_INFO_`;\r\n      const pagination = this.frameContext.params.get(key) || null;\r\n      if (pagination && pagination.pageCount > 1) {\r\n        result = {\r\n          pageIndex: pagination.pageIndex,\r\n          pageSize: pagination.pageSize,\r\n          total: pagination.totalCount\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * è®¡ç®èç¹æ¯å¦è¦å±å¼\r\n   * @param nodeData nodeData\r\n   */\r\n  private shouldExpand(nodeData: any) {\r\n    const [isLeaf, layer] = [this.isLeaf(nodeData), this.getNodeLayer(nodeData)];\r\n    // æ°¸è¿ä¸å±å¼å¶å­èç¹\r\n    if (isLeaf) {\r\n      return false;\r\n    }\r\n    let expanded = this.isExpanded(nodeData);\r\n    if (!expanded) {\r\n      const id = this.getPrimary(nodeData);\r\n      if (this.nodesWaitExpand.findIndex(node => node && node.id === id) > -1) {\r\n        return false;\r\n      }\r\n      if (this.nodesShouldExpand.findIndex(nodeId => nodeId === id) > -1) {\r\n        return true;\r\n      }\r\n      if (this.expandLevel === -1) {\r\n        // -1 ä¸ºä¸å±å¼\r\n        expanded = false;\r\n      } else if (this.expandLevel === 0) {\r\n        // 0 ä¸ºå¨é¨å±å¼\r\n        expanded = true;\r\n      } else {\r\n        // æ²¡æå¯ç¨åå±å è½½ï¼éè¿å±å¼å±çº§ç¡®å®æ¯å¦å±å¼è¯¥èç¹\r\n        expanded = layer <= this.expandLevel;\r\n        // å¦æèç¹åæ¬å­å¨ä¸èç¹æ²¡æå±å¼åä¸å±å¼\r\n        const oldTreeNode = this.getOldNode(nodeData);\r\n        if (oldTreeNode && !oldTreeNode.expanded) {\r\n          expanded = false;\r\n        }\r\n      }\r\n    }\r\n    return expanded;\r\n  }\r\n  /**\r\n   * å±å¼æ èç¹\r\n   * @description å®å¨å è½½æ ä½¿ç¨å±å¼å±æ§å¨buildNodeæ¶å·²ç»å±å¼ï¼æ­¤å½æ°çä¸»è¦ç¨äºå±å¼åçº§å è½½æ \r\n   * @param nodeData nodeData\r\n   */\r\n  private expandNode(nodeData: any) {\r\n    const [element, layer] = [nodeData[this.primaryKey], this.getNodeLayer(nodeData)];\r\n    const childs = this.getChildNodesData(element, layer);\r\n\r\n    // å½åèç¹ä¸æ¯å¶å­èç¹ï¼ä½å¨èç¹æ°æ®ä¸­åæ¾ä¸å°è¯¥èç¹çå­èç¹ï¼åè®¤ä¸ºæ å¯ç¨äºåå±å è½½\r\n    if (!childs || childs.length < 1) {\r\n      // åå±å è½½æ éè¦éè¿è§¦åèç¹å±å¼äºä»¶æå è½½ä¸å±,ç®åæ ä¸è¿ä¸å­å¨è¯¥èç¹ï¼æ æ³ç´æ¥å±å¼ï¼éè¦ç­æ å è½½å®ä¹ååå±å¼\r\n      const id = this.getPrimary(nodeData);\r\n      if (this.nodesWaitExpand.findIndex(node => node && node.id === id) < 0) {\r\n        this.nodesWaitExpand.push({ id, expanded: false });\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * æ å è½½å®æäºä»¶\r\n   */\r\n  private onTreeLoadComplete() {\r\n    const index = this.nodesWaitExpand.findIndex(node => !node.expanded);\r\n    const nodeData = this.nodesWaitExpand[index] || {};\r\n    const { id } = nodeData;\r\n    if (id) {\r\n      const rowNode = this.component.findRowNode(id);\r\n      if (rowNode) {\r\n        nodeData.expanded = true;\r\n        // if (nodeData && nodeData.node && !nodeData.node.expanded) {\r\n        //   return;\r\n        // }\r\n        this.component.expandNode(id);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * è·åä¸»é®\r\n   * @param nodeData nodeData\r\n   */\r\n  private getPrimary(nodeData: any) {\r\n    return nodeData[this.primaryKey];\r\n  }\r\n  // #region å·¥å·æ¹æ³ï¼å¾åç¬å°è£\r\n\r\n  /**\r\n   * è·åå­çº§èç¹çæ°æ®éå\r\n   */\r\n  private getChildNodesData(fParentElement: string, fLayer: number): any[] {\r\n    const childNodesData = [];\r\n    this.allNodesData.forEach((nodeData: any) => {\r\n\r\n      // @todoï¼å¾å é¤ï¼å¼å®¹æ²¡æhierarchyInfoçæ°æ® \r\n      const hierarchyInfo = this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];\r\n      if (!hierarchyInfo) {\r\n        return;\r\n      }\r\n\r\n      // å¹éèç¹\r\n      const currentLayer = hierarchyInfo['layer'];\r\n      const currentParentElement = hierarchyInfo['parentElement'];\r\n      if ((currentLayer === fLayer + 1) && (currentParentElement === fParentElement || (!currentParentElement && fParentElement === ''))) {\r\n        childNodesData.push(nodeData);\r\n      }\r\n    });\r\n    return childNodesData;\r\n  }\r\n  private getHierarchyInfo(nodeData: any): ParentHierarchyInfo {\r\n    return this.getValue(nodeData, this.hierarchyInfoKey);//nodeData[this.hierarchyInfoKey];\r\n  }\r\n  private getValue(target: any, path: string) {\r\n    if (path.indexOf('/') === -1) {\r\n      return target[path];\r\n    }\r\n    const paths: any = path.split('/').filter(p => p);\r\n    return paths.reduce((result, path) => {\r\n      return result && result[path];\r\n    }, target);\r\n  }\r\n  /**\r\n   * è·ååçº§ä¿¡æ¯ä¸­çå±çº§\r\n   * @param nodeData nodeData\r\n   */\r\n  private getNodeLayer(nodeData: any) {\r\n    const hierarchyInfo = this.getHierarchyInfo(nodeData);\r\n    return hierarchyInfo['layer'];\r\n  }\r\n  /**\r\n   * è·ååçº§ä¿¡æ¯ä¸­çç¶èç¹\r\n   * @param nodeData nodeData\r\n   */\r\n  private getNodeParentElement(nodeData: any) {\r\n    const hierarchyInfo = this.getHierarchyInfo(nodeData);\r\n    return hierarchyInfo['parentElement'];\r\n  }\r\n  /**\r\n   * è·åå±å¼ç¶æ\r\n   */\r\n  private isExpanded(newData: any): boolean {\r\n    const oldTreeNode = this.getOldNode(newData);\r\n    return oldTreeNode ? oldTreeNode.expanded : undefined;\r\n  }\r\n\r\n  /**\r\n   * æ¯å¦æ¯å¶å­èç¹\r\n   * @todoï¼åºè¯¥ç¨æ°æ®æ¬èº«çisDetailæ¥ä¿è¯ï¼ä½ç®åä¸åç¡®ï¼å¼ºå¶åç«¯è®¡ç®\r\n   */\r\n  private isLeaf(nodeData: any): boolean {\r\n    const hierarchyInfo = this.getHierarchyInfo(nodeData);//nodeData[this.hierarchyInfoKey];\r\n    const isDetail = hierarchyInfo['isDetail'];\r\n    return isDetail;\r\n  }\r\n\r\n  /**\r\n   * å¤æ­èç¹æ¯å¦æ¯æ°å¢\r\n   * @todoï¼ä¸åºè¯¥è¿æ ·å¤æ­ï¼å¾ä¼åã\r\n   * @summary\r\n   * 1ãéç©ºæ ï¼ç©ºæ è§ä¸ºåæ¬¡å è½½æ°æ®ï¼ï¼\r\n   * 2ãæ¾ä¸å°oldNodeã\r\n   */\r\n  private isNewNode(nodeData: any): boolean {\r\n    if (this.allOldNodesMap.size === 0) {\r\n      return false;\r\n    }\r\n    const oldTreeNode = this.getOldNode(nodeData);\r\n    return oldTreeNode ? false : true;\r\n  }\r\n\r\n  /**\r\n   * å±å¼ç¶èç¹\r\n   */\r\n  private expandParentNode(nodeData: any): void {\r\n    const parentTreeNode = this.getParentNode(nodeData);\r\n    if (!parentTreeNode) {\r\n      return;\r\n    }\r\n    parentTreeNode.leaf = false;\r\n    parentTreeNode.expanded = true;\r\n  }\r\n\r\n  /**\r\n   * æ¥æ¾ç¶èç¹\r\n   */\r\n  private getParentNode(nodeData: any): TreeNode {\r\n    const hierarchyInfo = this.getHierarchyInfo(nodeData);//nodeData[this.hierarchyInfoKey];\r\n    const layer = hierarchyInfo['layer'];\r\n    const parentElement = hierarchyInfo['parentElement'];\r\n\r\n    const allNodes = Array.from(this.allNodesMap.values());\r\n    const parentNode = allNodes.find((node: TreeNode) => {\r\n      const currentLayer = this.getValue(node.data, this.hierarchyInfoKey)['layer']; //node.data[this.hierarchyInfoKey]['layer'];\r\n      const currentId = node.data[this.primaryKey];\r\n      return currentId === parentElement && layer === (currentLayer + 1);\r\n    });\r\n\r\n    return parentNode;\r\n  }\r\n\r\n  /**\r\n   * è·åèçæ èç¹\r\n   */\r\n  private getOldNode(nodeData: any): TreeNode {\r\n    const id = nodeData[this.primaryKey];\r\n    return this.allOldNodesMap.get(id);\r\n  }\r\n\r\n  /**\r\n   * æå¹³TreeNodesï¼å¹¶æ¾å¥ä¸ä¸ªMapä¸­\r\n   */\r\n  private buildNodesDataMap(treeNodes: TreeNode[]): void {\r\n    treeNodes.forEach((treeNode: TreeNode) => {\r\n      this.allOldNodesMap.set(treeNode.data[this.primaryKey], treeNode);\r\n      if (treeNode.children) {\r\n        this.buildNodesDataMap(treeNode.children);\r\n      }\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n}\r\n\r\nexport { ParentTreeNodeBuilder };\r\n\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-30 18:57:34 \r\n * @Last Modified by:   aalizzwell \r\n * @Last Modified time: 2019-05-30 18:57:34 \r\n */\r\nimport { PathTreeNodeBuilder } from './path_tree_node_builder';\r\nimport { ParentTreeNodeBuilder } from './parent_tree_node_builder';\r\nimport { Type } from '@angular/core';\r\n\r\nexport class TreeNodeBuilderFactory {\r\n    static getBuilder(hierarchyInfo: { [propName: string]: any }): Type<PathTreeNodeBuilder | ParentTreeNodeBuilder> {\r\n        let builder: Type<PathTreeNodeBuilder | ParentTreeNodeBuilder> = PathTreeNodeBuilder;\r\n        if (hierarchyInfo.hasOwnProperty(\"path\")) {\r\n            builder = PathTreeNodeBuilder;\r\n        } else if (hierarchyInfo.hasOwnProperty(\"parentElement\")) {\r\n            builder = ParentTreeNodeBuilder;\r\n        }\r\n\r\n        return builder;\r\n    }\r\n}","/*\r\n * @Author: aalizzwell \r\n * @Date: 2020-02-27 11:33:41 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2020-02-27 11:34:16\r\n */\r\n// tslint:disable: no-string-literal\r\n\r\nimport { Directive, OnInit, OnChanges, SimpleChanges, Input, HostListener, Type, Output, EventEmitter } from '@angular/core';\r\nimport { BindingData, BindingList, FrameContext, Change, ChangeType, ComponentType } from '@farris/devkit';\r\nimport { TreeTableComponent, TreeNode } from '@farris/ui-treetable';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { FarrisTreetableFormatService } from '../format/index';\r\nimport { TreeNodeBuilderFactory } from './tree_table_node_builder/tree_node_builder_factory';\r\n\r\n/**\r\n * æ è¡¨æ ¼ç»å®æä»¤\r\n */\r\n@Directive({\r\n  selector: '[farrisTreeTableBinding]'\r\n})\r\nclass FarrisTreeTableBindingDirective implements OnInit, OnChanges {\r\n  /**\r\n   * æ å­å¨ç©ºé´\r\n   */\r\n  private storage: any;\r\n  private renderSubject: Subject<any> = new Subject<any>();\r\n  private builder: Type<any>;\r\n  private treeNodesBuilder: any;\r\n  /**\r\n   * åçº§ç ä¿¡æ¯çkey\r\n   */\r\n  // tslint:disable-next-line: no-input-rename\r\n  @Input('farrisHierarchyInfoKey')\r\n  public hierarchyInfoKey: string;\r\n\r\n  /* è¡æ ·å¼ */\r\n  @Input()\r\n  rowClassName: (context: any) => any;\r\n\r\n  /* ååååæ ¼æ ·å¼ */\r\n  @Input()\r\n  cellClassName: (data: any, field: any) => any;\r\n  /**\r\n   * å¯ç¨èç¹åé¡µ\r\n   */\r\n  // @Input('enableNodePagination')\r\n  // public enableNodePagination: boolean;\r\n  /**\r\n   * èç¹åé¡µå¤§å°\r\n   */\r\n  @Input('nodePageSize')\r\n  public nodePageSize: number = 100;\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  /**\r\n   * ç»å®æ°æ®åè¡¨\r\n   */\r\n  private get bindingList(): BindingList {\r\n\r\n    // @todoï¼åªæ¯æä¸»è¡¨ï¼æ²¡æå¤çbindingPath\r\n    return this.bindingData.list;\r\n  }\r\n\r\n\r\n  /* è®¾ç½®è¡æ ·å¼ */\r\n  @Output()\r\n  rowClass: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  /* è®¾ç½®åæ ·å¼ */\r\n  @Output()\r\n  cellClass: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  private _PROP: any = null;\r\n  private listeners: any[];\r\n  private get prop() {\r\n    return this._PROP;\r\n  }\r\n  private set prop(value) {\r\n    this._PROP = value;\r\n  }\r\n  /**\r\n   * è·åå½åvm\r\n   */\r\n  private get viewModel() {\r\n    return this.frameContext.viewModel;\r\n  }\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private treeTable: TreeTableComponent,\r\n    private treetableFormatSer: FarrisTreetableFormatService,\r\n    private frameContext: FrameContext\r\n  ) {\r\n    this.listeners = [];\r\n    this.storage = [];\r\n    this.viewModel.uiState.setPropertyValue('ids', this.treeTable.checkValues);\r\n    this.renderSubject.pipe(\r\n      debounceTime(500)\r\n    ).subscribe(() => {\r\n      this.bindData();\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * æä»¤åå§å\r\n   */\r\n  ngOnInit() {\r\n    // å°åçº§ç ä¿¡æ¯ä¿å­å°root-componentï¼èéæ´ä¸ªè¡¨åçapp-context\r\n    const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n    virtualRootFrameContext.setParam('hierarchyInfoKey', this.hierarchyInfoKey);\r\n    this.bindData();\r\n    this.bindingData.changes.subscribe((change: Change) => {\r\n      if (change && (change.type === ChangeType.ValueChanged || change.type === ChangeType.PaginationInfoChange)) {\r\n        this.renderSubject.next(change);\r\n      } else {\r\n        this.bindData();\r\n      }\r\n      // è®¾ç½®å½åè¡\r\n      const currentId = this.bindingList.currentId;\r\n      if (!this.frameContext.bindingData.rowSelectedEventSuspend && currentId) {\r\n        this.setSelectedIdToTree(this.bindingList.currentId);\r\n      }\r\n      this.updateCheckedRows(change);\r\n    });\r\n\r\n    // è®¾ç½® æ è¡¨ æ ¼å¼å\r\n    this.treetableFormatSer.setFormat(this.treeTable);\r\n\r\n    /* è¡æ ·å¼ */\r\n    this.rowClass.emit(this.treeTable);\r\n\r\n    /* åæ ·å¼  ååæ ¼æ ·å¼ */\r\n    this.cellClass.emit(this.treeTable);\r\n    this.setComponentRef();\r\n    this.setNodePaginationInfo();\r\n    this.registerEvent();\r\n    if (this.frameContext && this.frameContext.frameComponent) {\r\n      this.frameContext.frameComponent.componentType = ComponentType.farrisTreeTalbeComponent;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æä»¤è¾å¥åæ´\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n  }\r\n  private registerEvent() {\r\n    this.treeTable.columnSorted.subscribe((event: { sortName: string, sortOrder: string }) => {\r\n      const { sortName = null, sortOrder = null } = event;\r\n      const remoteSort = this.treeTable.remoteSort;\r\n      if (remoteSort === false) {\r\n        if (sortName && sortOrder) {\r\n          this.bindingList.sortBy(sortName, sortOrder);\r\n        }\r\n      }\r\n      this.bindData();\r\n    });\r\n  }\r\n  /**\r\n   * æ¶éæ ç»ä»¶å®ä¾\r\n   */\r\n  private setComponentRef() {\r\n    const appContext = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.getFormAppContext();\r\n    const frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId;\r\n    const id = this.treeTable && this.treeTable.el.nativeElement.id || null;\r\n    // å¦æframeIdä¸å­å¨ætreetableæ²¡æidå±æ§ï¼è¯´æä¸ç¬¦åä½¿ç¨åºæ¯\r\n    if (!frameId || !id) {\r\n      return;\r\n    }\r\n    const map = appContext && appContext.componentRefs && appContext.componentRefs.get(frameId) || new Map<string, any>();\r\n    appContext && appContext.componentRefs && appContext.componentRefs.set(frameId, map.set(id, this.treeTable));\r\n  }\r\n\r\n  private setNodePaginationInfo() {\r\n    if (this.frameContext) {\r\n      const enableNodePagination = this.treeTable.paginationForChildren || false;//this.enableNodePagination || false;\r\n      this.frameContext.params.set('enableNodePagination', enableNodePagination);\r\n      const nodePageSize = this.nodePageSize || 0;\r\n      this.frameContext.params.set('nodePageSize', nodePageSize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private bindData() {\r\n    const oldTreeNodes = this.treeTable.data;\r\n    const treeNodesData = this.bindingList.toJSON({ ignoreMultiLangInput: true });\r\n    // if (!this.shouldComponentUpdate(treeNodesData)) {\r\n    //   return;\r\n    // }\r\n    this.prop = treeNodesData;\r\n\r\n    let treeNodes: TreeNode[] = [];\r\n    if (!!treeNodesData && treeNodesData.length > 0) {\r\n      const hierarchyInfo = treeNodesData[0][this.hierarchyInfoKey];\r\n      let builder: Type<any> = this.builder;\r\n      if (!builder) {\r\n        this.builder = TreeNodeBuilderFactory.getBuilder(hierarchyInfo);\r\n        builder = this.builder;\r\n      }\r\n      // æå¡å¨è¿åçåçº§èç¹ä¿¡æ¯å¹éä¸å°ç°æå·¥åéé¢çä»»ä½ä¸ç§æåµãç¡®è®¤æ°å çbuilderå·²ç»å¨å·¥åä¸­æ³¨å\r\n      if (builder == null) {\r\n        throw new Error('TreeTable builder is null!');\r\n      }\r\n      let expandLevel = -1;\r\n      const treeExpandLevel = this.treeTable['expandLevel'];\r\n      if (typeof treeExpandLevel !== 'undefined') {\r\n        expandLevel = treeExpandLevel;\r\n      }\r\n      const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n      const nodesShouldExpand = (virtualRootFrameContext.params.get('_DEVKIT_expandRowIds') || '').split(',') || [];\r\n      const context = {\r\n        expandLevel,\r\n        addTreeLoadCompleteListener: this.addTreeLoadCompleteListener.bind(this),\r\n        component: this.treeTable,\r\n        storage: this.storage,\r\n        nodesShouldExpand: nodesShouldExpand,\r\n        frameContext: this.frameContext,\r\n      };\r\n      //if (!this.treeNodesBuilder) {\r\n      this.treeNodesBuilder = new builder(\r\n        treeNodesData, oldTreeNodes,\r\n        this.bindingList.primaryKey, this.hierarchyInfoKey, context\r\n      );\r\n      //}\r\n      // this.treeNodesBuilder.updateTreeNode(treeNodesData, oldTreeNodes);\r\n      treeNodes = this.treeNodesBuilder.build();\r\n    }\r\n    this.treeTable.data = treeNodes;\r\n    // è®¾ç½®åé¡µä¿¡æ¯\r\n    this.updatePageInfo(this.treeTable);\r\n    this.onTreeLoadComplete();\r\n  }\r\n  private onTreeLoadComplete() {\r\n    if (this.listeners && this.listeners.length > 0) {\r\n      this.listeners.forEach(listener => {\r\n        listener();\r\n      });\r\n    }\r\n  }\r\n  private addTreeLoadCompleteListener(listener: any) {\r\n    this.listeners.push(listener);\r\n  }\r\n  private shouldComponentUpdate(newProp: any) {\r\n    if (JSON.stringify(this.prop) === JSON.stringify(newProp)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  /**\r\n   * ä»æ ç»ä»¶ä¸è·åéä¸­è¡çid\r\n   */\r\n  private getSelectedIdFromTree(): string {\r\n    const selectedRow = this.treeTable.selectedRow;\r\n    return selectedRow ? selectedRow.data['id'] : null;\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®TreeTableçå½åè¡\r\n   */\r\n  private setSelectedIdToTree(selectedId: string): void {\r\n    if (!selectedId) {\r\n      return;\r\n    }\r\n    // å¦ææ°çcurrentIdåæ ä¸çselectedIdä¸ä¸è´ï¼éç½®æ çå½åè¡\r\n    const oldSelectedId = this.getSelectedIdFromTree();\r\n    const nodePageChanged = this.frameContext.params.get('_NODE_PAGE_CHANGED_') || false;\r\n    if (!oldSelectedId && nodePageChanged) {\r\n      this.frameContext.params.delete('_NODE_PAGE_CHANGED_');\r\n      return;\r\n    }\r\n    if (oldSelectedId !== selectedId) {\r\n      this.treeTable.clearSelections();\r\n      this.treeTable.selectNode(selectedId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®BindingListçCurrentId\r\n   */\r\n  private setCurrentIdToBindingList(selectedId: string): void {\r\n    const oldCurrentId = this.bindingData.list.currentId;\r\n    // åéæ¨¡å¼ä¸å°å½åè¡è®¾ç½®å°ids\r\n    if (!this.treeTable.multiSelect) {\r\n      this.setChecks(selectedId);\r\n      this.setCheckedRows([selectedId]);\r\n    }\r\n    if (oldCurrentId === selectedId) {\r\n      return;\r\n    }\r\n    this.bindingData.list.setCurrentId(selectedId, true);\r\n  }\r\n  private updateCheckedRows(changes: Change) {\r\n    if (changes.type === ChangeType.Load) {\r\n      this.setCheckedRows();\r\n    } else if (changes.type === ChangeType.ValueChanged || changes.type === ChangeType.Remove) {\r\n      const ids = this.getChecks();\r\n      if (changes.id && ids.includes(changes.id)) {\r\n        this.setCheckedRows();\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * æ´æ°å¾éè¡æ°æ®\r\n   */\r\n  protected setCheckedRows(ids?: string[]) {\r\n    if (typeof ids === 'undefined') {\r\n      ids = this.viewModel.uiState['ids'] || [];\r\n    }\r\n    if (!Array.isArray(ids)) {\r\n      return;\r\n    }\r\n    const list = this.bindingList.toJSON();\r\n    const rows: Map<string, any> = this.viewModel.uiState['rows'] || new Map<string, any>();\r\n\r\n    const result = new Map<string, any>();\r\n    ids.forEach((id: any) => {\r\n      const item = list.find(item => item[this.bindingList.primaryKey] === id);\r\n      const otherPageItem = rows.get(id);\r\n      if (item) {\r\n        result.set(id, item);\r\n      } else if (otherPageItem) {\r\n        result.set(id, otherPageItem);\r\n      }\r\n    });\r\n    this.viewModel.uiState.setPropertyValue('rows', result);\r\n  }\r\n  /**\r\n   * è®¾ç½®idsåé\r\n   * @param idOrIds id or ids\r\n   */\r\n  protected setChecks(idOrIds: string | string[]) {\r\n    if (typeof idOrIds === 'string') {\r\n      idOrIds = idOrIds.split(',').filter(p => p);\r\n    }\r\n    this.viewModel.uiState.setPropertyValue('ids', idOrIds);\r\n  }\r\n  /**\r\n   * è·åå¾éè¡idæ°ç»\r\n   * @returns \r\n   */\r\n  protected getChecks(): string[] {\r\n    return this.viewModel.uiState['ids'] || [];\r\n  }\r\n  /**\r\n   * è·ååé¡µä¿¡æ¯\r\n   */\r\n  private getPagingInfo() {\r\n    const bindingPath = this.viewModel.bindingPath;\r\n    const bindingData = this.viewModel.bindingData;\r\n    let pagingInfo = bindingData.pagingInfo;\r\n    if (bindingPath === '/') {\r\n      return pagingInfo;\r\n    } else {\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0).map(item => {\r\n        return item.substring(0, item.length - 1);\r\n      });\r\n      bindingPaths.forEach(path => {\r\n        pagingInfo = pagingInfo && pagingInfo[path];\r\n      });\r\n      return pagingInfo;\r\n    }\r\n  }\r\n  private updatePageInfo(treeTable: TreeTableComponent) {\r\n    const { pageIndex, pageSize, total } = this.getPagingInfo();\r\n    if (pageSize === 0) {\r\n      treeTable.pagination = false;\r\n      return;\r\n    }\r\n    treeTable.pagination = true;\r\n    treeTable.updatePageInfo({ pageIndex, pageSize, total });\r\n  }\r\n  //#region ç»ä»¶äºä»¶\r\n  /**\r\n   * è¡åæ¢\r\n   */\r\n  @HostListener('nodeSelected', ['$event'])\r\n  public selectionChangeHandler(event: any) {\r\n    if (event && event.node && event.node.hasOwnProperty('data')) {\r\n      const idField = this.treeTable.idField;\r\n      const id = event.node.data[idField];\r\n      this.setCurrentIdToBindingList(id);\r\n    }\r\n  }\r\n  /**\r\n   * å¾éèç¹åçåå\r\n   * @param event event\r\n   */\r\n  @HostListener('checkValuesChange', ['$event'])\r\n  public checkValuesChange(event: any) {\r\n    // this.viewModel.uiState.setPropertyValue('ids', this.treeTable.checkValues);\r\n    this.setChecks(this.treeTable.checkValues);\r\n    this.setCheckedRows();\r\n  }\r\n  /**\r\n   * å°è¢«å±å¼çèç¹è®¾ç½®ä¸ºå½åè¡\r\n   */\r\n  @HostListener('expand', ['$event'])\r\n  public expandHandler(event: any) {\r\n    const selectedId = event.data['id'];\r\n    const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n    // å±å¼æ¶ä¸åéä¸­\r\n    // this.setSelectedIdToTree(selectedId);\r\n    const expandNodes = virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];\r\n    expandNodes.push(selectedId);\r\n    virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);\r\n  }\r\n  @HostListener('pageChanged', ['$event'])\r\n  public onPageChanged(event: any) {\r\n    let { pageSize = 20, pageIndex = 1 } = event || {};\r\n    if (pageIndex < 1) {\r\n      pageIndex = 1;\r\n    }\r\n    const skip = (pageIndex - 1) * pageSize;\r\n    this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);\r\n  }\r\n  @HostListener('pageSizeChanged', ['$event'])\r\n  public onPageSizeChanged(event: any) {\r\n    const pageSize = event ? event : 20;\r\n    const skip = 0;\r\n    this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);\r\n  }\r\n  /**\r\n   * èç¹é¡µç åæ¢äºä»¶\r\n   * @param event event\r\n   */\r\n  @HostListener('childsPageChanged', ['$event'])\r\n  public onNodePageChanged(event: any) {\r\n    const { pageIndex = 1, pageSize = this.nodePageSize, node = {} } = event;\r\n    const id = node && node.id || null;\r\n    if (id) {\r\n      const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n      const expandNodes = virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];\r\n      expandNodes.push(id);\r\n      virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);\r\n      this.frameContext.params.set(`_NODE_${id}_PAGE_INDEX_`, pageIndex);\r\n      this.frameContext.params.set(`_RELOAD_CHILDREN_`, true);\r\n      this.frameContext.params.set('_NODE_PAGE_CHANGED_', true);\r\n    }\r\n  }\r\n  //#endregion\r\n}\r\n\r\nexport { FarrisTreeTableBindingDirective };\r\n","import { BindingObject, DataPropInfo, DataTypeInfo, ViewModel } from \"@farris/devkit\";\r\nimport { isNumber } from 'lodash-es';\r\n/**\r\n * å¸®å©æ å°åºç±»\r\n */\r\nexport class DataMapping {\r\n  public vm: ViewModel; \r\n  public target: BindingObject;\r\n  /**\r\n   * \r\n   * @param helpData æ¸ç©ºæ¶ï¼å¼ä¸ºnull\r\n   * @param mapFields æ ¼å¼å½¢å¦ï¼{id: \"assoField.assoField\", code: \"assoField.assoField_Code\", name: \"assoField.assoField_Name\"}\r\n   * @param asClear ç±»ä¼¼æ¸ç©º\r\n   */\r\n  mappingData(helpData: any, mapFields: any, asClear: boolean = false) {\r\n    if (!mapFields) {\r\n      return;\r\n    }\r\n    // å³é­åæ´æ£æµ\r\n    const appContext = this.vm.frameContext.appContext;\r\n    appContext.changeDetectionController.detach();\r\n    let helpFields = Object.keys(mapFields);\r\n    let basePaths: any[];\r\n    // æ å°å°ç®æ ä¸»é®çæºå­æ®µæ°ç»\r\n    let primaryKeys: string[];\r\n    // ç®æ ä¸»é®å­æ®µæ°ç»\r\n    let primaryFields: string[];\r\n    basePaths = this.getBindingPathArray();\r\n    const primaryInfo = this.getMapFieldsPrimaryKey(mapFields, basePaths);\r\n    primaryKeys = primaryInfo && primaryInfo.map(item => item.primaryKey) || [];\r\n    primaryFields = primaryInfo && primaryInfo.map(item => item.primaryField) || [];\r\n    // å¯¹æ å°ä¸­çkeyè¿è¡æåºï¼ä½¿æ å°å°ç®æ ä¸»é®çkeyæå°åé¢\r\n    helpFields = this.sortMapFieldKeys(helpFields, primaryKeys);\r\n    if (!helpData || asClear) {\r\n      helpFields.reverse();\r\n    }\r\n    this.mapping(helpFields, mapFields, helpData, primaryFields, basePaths, asClear);\r\n    // éæ°æå¼åæ´æ£æµ\r\n    appContext.changeDetectionController.reattach();\r\n  }\r\n  private mapping(sortedKeyFields: string[], mapFields: any, helpData: any, targetPrimaryFields: string[], basePaths: string[], asClear: boolean = false) {\r\n    sortedKeyFields.forEach((field: any) => {\r\n      const val = this.getHelpValue(field, helpData);\r\n      let mappings: any[] = mapFields[field].split(',');\r\n      const headMappings = mappings.filter(p => targetPrimaryFields.includes(p));\r\n      const leftMappings = mappings.filter(p => !targetPrimaryFields.includes(p));\r\n      if (!helpData || asClear) {\r\n        mappings = [].concat(leftMappings).concat(headMappings);\r\n      } else {\r\n        mappings = [].concat(headMappings).concat(leftMappings);\r\n      }\r\n      this.updateTarget(mappings, basePaths, helpData, val);\r\n    });\r\n  }\r\n  private updateTarget(mappings: string[], basePaths: string[], helpData: any, value: any) {\r\n    mappings.forEach((targetFieldPath: any) => {\r\n      this.updateTargetValue(basePaths, targetFieldPath, value, helpData);\r\n    });\r\n  }\r\n  private updateTargetValue(basePaths: string[], targetFieldPath, value: any, helpData: any) {\r\n    if (this.target) {\r\n      const paths = targetFieldPath.split('.');\r\n      this.setValue(this.target, paths, value);\r\n    } else {\r\n      const paths = basePaths.concat(targetFieldPath.split('.'));\r\n      if (!helpData) {\r\n        this.vm.bindingData.clearValue(paths, true, true, { frameContext: this.vm.frameContext });\r\n      } else {\r\n        this.vm.bindingData.setValue(paths, value, true, true, null, { frameContext: this.vm.frameContext });\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * è·åå¸®å©å­æ®µå¯¹åºçå¼\r\n   * @param field å¸®å©å­æ®µ\r\n   * @param helpData å¸®å©æ°æ®\r\n   * @returns \r\n   */\r\n  private getHelpValue(field: string, helpData: any) {\r\n    let value: any = '';\r\n    if (helpData) {\r\n      if (helpData instanceof Array) {\r\n        value = helpData.map((item: any) => {\r\n          return this.getValue(field, item);\r\n        }).join(',');\r\n      } else {\r\n        value = this.getValue(field, helpData);\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n  protected getValue(f: string, data: any) {\r\n    let val = '';\r\n    if (f.indexOf('.') === -1) {\r\n      val = data[f];\r\n    } else {\r\n      val = f.split('.').reduce((a, b) => {\r\n        return a[b];\r\n      }, data);\r\n    }\r\n\r\n    return val;\r\n  }\r\n  protected setValue(target: object, paths: string[], value: any) {\r\n    if (target) {\r\n      if (paths.length <= 1) {\r\n        target[paths[0]] = value;\r\n      } else {\r\n        paths.slice(0, -1).reduce((prev, path) => {\r\n          if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {\r\n            prev[path] = {};\r\n          }\r\n          return prev[path];\r\n        }, target)[paths[paths.length - 1]] = value;\r\n      }\r\n    }\r\n  }\r\n  private getBindingPathArray(): any[] {\r\n    const path = this.vm.bindingPath;\r\n    if (path) {\r\n      return path.split('/').filter(n => n !== '');\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private isNumberValue(field, data) {\r\n    const currentVal = this.getValue(field, data);\r\n    return isNumber(currentVal);\r\n  }\r\n  /**\r\n   * \r\n   * @param mapFields  æ ¼å¼å½¢å¦ï¼{id: \"assoField.assoField\", code: \"assoField.assoField_Code\", name: \"assoField.assoField_Name\"} æè {id:'vid',code:'code',name:'name'}\r\n   */\r\n  private getMapFieldsPrimaryKey(mapFields: any, bindingPaths: string[]): Array<{ primaryKey: string, primaryField: string }> {\r\n    if (!mapFields || Object.keys(mapFields).length < 1) {\r\n      return null;\r\n    }\r\n    const results = [];\r\n    // let primaryField = null;\r\n    try {\r\n      const entityTypeInfo: DataTypeInfo = this.vm.frameContext.repository.entityTypeInfo;\r\n      Object.keys(mapFields).forEach((key: string) => {\r\n        const mapField = mapFields[key];\r\n        if (mapField && typeof mapField === 'string') {\r\n          const mappings = mapField.split(',').filter(p => p);\r\n          mappings.forEach((item: string) => {\r\n            let paths = item.split('.');\r\n            if (bindingPaths && bindingPaths.length > 0) {\r\n              paths = bindingPaths.concat(paths);\r\n            }\r\n            const propInfo: DataPropInfo = entityTypeInfo.getPropInfoByPath(paths);\r\n            if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.primary === true) {\r\n              results.push({\r\n                primaryKey: key,\r\n                primaryField: item\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    return results;\r\n  }\r\n  private sortMapFieldKeys(keys: string[], primaryKeys: string[]): string[] {\r\n    if (!primaryKeys || primaryKeys.length < 1 || !keys || keys.length < 1) {\r\n      return keys;\r\n    }\r\n    primaryKeys = [...new Set(primaryKeys)];\r\n    // è¿æ»¤åºéä¸»é®æ å°å­æ®µ\r\n    keys = keys.filter(p => !primaryKeys.includes(p));\r\n    return [].concat(primaryKeys).concat(keys);\r\n  }\r\n}","/*\r\n * @Author: ç¯çç§æ(lucas huang)\r\n * @Date: 2018-11-07 16:31:57\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-27 14:57:22\r\n * @Company: Inspur\r\n * @Version: v0.0.1\r\n */\r\n\r\n/**\r\n * ä½¿ç¨æ¹æ³ï¼\r\n * [data-mapping]=\"{ id: 'user.userId', name: 'user.userName' }\"\r\n * key ä¸ºå¸®å©ä¸çå­æ®µï¼ value ä¸º è¡¨åä¸­çå­æ®µå\r\n * å¸®å©ä¸çåä¸ä¸ªå­æ®µå¯ä»¥æ å°å°è¡¨åä¸­çå¤ä¸ªå­æ®µä¸­ï¼{ ... id: 'user.userid, user.addusid'}\r\n * å¤å­æ®µä»¥éå·éå¼\r\n *\r\n */\r\n\r\nimport { Directive, OnInit, Optional, Self, Input } from '@angular/core';\r\nimport { BindingObject, DataPropInfo, DataTypeInfo, NgFormControl, ViewModel } from '@farris/devkit';\r\nimport { LookupGridComponent } from '@farris/ui-lookup';\r\nimport { DataMapping } from './data-mapping';\r\n\r\n\r\n@Directive({ selector: '[data-mapping]' })\r\nexport class LookupDataMappingDirective extends DataMapping implements OnInit {\r\n\r\n  @Input('data-mapping') mapfields: any;\r\n  @Input('target') target: BindingObject = null;\r\n\r\n  constructor(@Optional() public vm: ViewModel, @Optional() @Self() private lookup: LookupGridComponent) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.lookup.selectedData.subscribe((data: any) => {\r\n      const _mapfields = this.mapfields || this.lookup.mapFields;\r\n      this.mappingData(data, _mapfields);\r\n    });\r\n    this.lookup.clearMappings.subscribe((result: any) => {\r\n      // const value = result && result.value || null;\r\n      const mapfields = Object.assign({}, (this.mapfields || this.lookup.mapFields || {}));\r\n      const lookupTextField = this.lookup.textField;\r\n      const data = {};\r\n      const controlName = this.lookup.ngControl && this.lookup.ngControl.name;\r\n      if (controlName && this.vm) {\r\n        const textFieldMapping = mapfields[lookupTextField];\r\n        const ngFormControl = this.vm && this.vm.form && this.vm.form.ngFormControls && this.vm.form.ngFormControls[controlName] as NgFormControl;\r\n        const binding = ngFormControl && ngFormControl.binding;\r\n        if (textFieldMapping && binding) {\r\n          mapfields[lookupTextField] = textFieldMapping.split(',').filter(item => item !== binding).join(',');\r\n        }\r\n      }\r\n      // this.setValue(data, lookupTextField.split('.'), value);\r\n      Object.keys(mapfields).forEach(field => {\r\n        this.setValue(data, field.split('.'), '');\r\n      });\r\n      this.mappingData(data, mapfields, true);\r\n    });\r\n    this.lookup.clear.subscribe(() => {\r\n      const _mapfields = this.mapfields || this.lookup.mapFields;\r\n      this.mappingData(null, _mapfields);\r\n    });\r\n  }\r\n}\r\n","\r\nimport { Directive, OnInit, Optional, Self, Input } from '@angular/core';\r\nimport { FrameContext } from '@farris/devkit';\r\nimport { LookupGridComponent } from '@farris/ui-lookup';\r\n\r\n// tslint:disable-next-line: directive-selector\r\n@Directive({\r\n    selector: '[enableExtendLoadMethod]'\r\n})\r\nexport class LookupEnableExtendLoadMethodDirective implements OnInit {\r\n\r\n    @Input()\r\n    public enableExtendLoadMethod: any;\r\n\r\n    constructor(\r\n      @Optional()private frameContext: FrameContext,\r\n      @Optional() @Self() private lookup: LookupGridComponent\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        if (!this.frameContext || !this.lookup || this.enableExtendLoadMethod !== true) {\r\n            return;\r\n        }\r\n        const befApiUrl = this.frameContext.repository.apiUri;\r\n        const helpMetadataId = this.lookup.uri;\r\n        const enableKey = `${helpMetadataId}@${befApiUrl}`;\r\n        this.frameContext.setParam(enableKey, true);\r\n    }\r\n}\r\n","import { Directive, Input, OnInit, HostListener, Self, Host, Optional, Output, EventEmitter, OnChanges, SimpleChanges, DoCheck, KeyValueDiffer, KeyValueDiffers } from '@angular/core';\r\nimport { ComboBoxComponent } from '@progress/kendo-angular-dropdowns';\r\nimport { LookupGridComponent } from '@farris/ui-lookup';\r\nimport { ComboListComponent } from '@farris/ui-combo-list';\r\nimport { ComboLookupComponent } from '@farris/ui-combo-lookup';\r\n\r\n@Directive({\r\n  selector: '[UIStateBinding]'\r\n})\r\nexport class UIStateBindingDirective implements OnInit, OnChanges, DoCheck {\r\n  private _bindingObject: any;\r\n  private differ: KeyValueDiffer<any, any> = null;\r\n\r\n  @Input('UIStateBinding')\r\n  set bindingObject(value: any) {\r\n    this._bindingObject = value;\r\n    if (!this.differ && value && this.differs && typeof (value) === 'object') {\r\n      this.differ = this.differs.find(value).create();\r\n    }\r\n  }\r\n  get bindingObject() {\r\n    return this._bindingObject;\r\n  }\r\n  @Output() UIStateBindingChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  @HostListener('valueChange', ['$event'])\r\n  onValueChange(val: any) {\r\n    // host is combobox\r\n    if (this.hostComboComponent && this.bindingObject) {\r\n      if (val) {\r\n        this.bindingObject.key = val.value;\r\n        this.bindingObject.value = val.name;\r\n      } else {\r\n        this.bindingObject.key = null;\r\n        this.bindingObject.value = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    @Host() @Self() @Optional() private hostComboComponent: ComboBoxComponent,\r\n    @Host() @Self() @Optional() private hostHelpComponent: LookupGridComponent,\r\n    @Optional() private differs: KeyValueDiffers,\r\n    @Host() @Self() @Optional() private hostComboListComponent: ComboListComponent,\r\n    @Host() @Self() @Optional() private hostComboLookupComponent: ComboLookupComponent\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    if (this.hostComboComponent) {\r\n      this.hostComboComponent.valuePrimitive = false;\r\n    } else if (this.hostHelpComponent) {\r\n      this.bindObjectToHostLookup();\r\n    } else if (this.hostComboListComponent) {\r\n      this.bindObjectToHostComboList();\r\n    } else if (this.hostComboLookupComponent) {\r\n      this.bindObjectToHostComboLookup();\r\n    }\r\n\r\n  }\r\n  ngDoCheck() {\r\n    if (this.differ && typeof (this.bindingObject) === 'object') {\r\n      const changes = this.differ && this.differ.diff(this.bindingObject);\r\n      if (changes) {\r\n        this.bindingChanges();\r\n      }\r\n    } else { // å¼å®¹æªéæ°ç¼è¯å·¥ç¨ï¼differä¸å­å¨ä»æåµ\r\n      this.bindingChanges();\r\n    }\r\n  }\r\n\r\n  private bindingChanges() {\r\n    const text = this.bindingObject ? this.bindingObject.value : null;\r\n    const key = this.bindingObject ? this.bindingObject.key : null;\r\n    if (this.hostComboComponent) {\r\n      this.hostComboComponent.text = text;\r\n      const vField = this.hostComboComponent.valueField;\r\n      const item = this.hostComboComponent.data.find(n => n[vField] === key);\r\n      this.hostComboComponent.writeValue(item);\r\n    } else if (this.hostHelpComponent) {\r\n      this.hostHelpComponent.writeValue(text);\r\n      this.hostHelpComponent.displayValue = key;\r\n    } else if (this.hostComboListComponent) {\r\n      this.hostComboListComponent.writeValue(key);\r\n    } else if (this.hostComboLookupComponent) {\r\n      this.hostComboLookupComponent.selectedValues = key;\r\n      this.hostComboLookupComponent.writeValue(text);\r\n    }\r\n  }\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.bindingObject && !this.differ) {\r\n      this.bindingChanges();\r\n    }\r\n  }\r\n\r\n  // å¼¹åºå¸®å©\r\n  private bindObjectToHostLookup() {\r\n    if (!this.hostHelpComponent) {\r\n      return;\r\n    }\r\n\r\n    this.hostHelpComponent.selectedData.subscribe((data: any) => this.updateHelpBindingObject(data));\r\n\r\n    this.hostHelpComponent.clear.subscribe(() => {\r\n      // this.bindingObject = {key: null, value: null};\r\n      this.updateHelpBindingObject(null);\r\n    });\r\n\r\n    if (this.hostHelpComponent.nosearch) {\r\n      this.hostHelpComponent.valueChanged.subscribe((txt: any) => {\r\n        const idField = this.hostHelpComponent.idField;\r\n        const textField = this.hostHelpComponent.textField;\r\n        this.updateHelpBindingObject({\r\n          [idField]: txt,\r\n          [textField]: txt\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  // ä¸æåè¡¨\r\n  private bindObjectToHostComboList() {\r\n    if (!this.hostComboListComponent) {\r\n      return;\r\n    }\r\n\r\n    this.hostComboListComponent.valueChange.subscribe((data: any) => this.updateHelpBindingObject(data.selections));\r\n\r\n    this.hostComboListComponent.clear.subscribe(() => {\r\n      this.updateHelpBindingObject(null);\r\n    });\r\n  }\r\n\r\n  // ä¸æå¸®å©\r\n  private bindObjectToHostComboLookup() {\r\n    if (!this.hostComboLookupComponent) {\r\n      return;\r\n    }\r\n\r\n    if (this.hostComboLookupComponent.multiSelect) {\r\n      this.hostComboLookupComponent.valueChange.subscribe((data: any) => this.updateHelpBindingObject(data.selections));\r\n    } else {\r\n      // this.hostComboLookupComponent.selectChange.subscribe((data: any) => this.updateHelpBindingObject(data));\r\n      this.hostComboLookupComponent.selectChange.subscribe((e: any) => {\r\n        let data = e;\r\n        if(e.data) {\r\n          data = e.data;\r\n        }\r\n        this.updateHelpBindingObject(data);\r\n      });\r\n    }\r\n\r\n    this.hostComboLookupComponent.clear.subscribe(() => {\r\n      this.updateHelpBindingObject(null);\r\n    });\r\n  }\r\n\r\n  // æ´æ°UISTATE\r\n  private updateHelpBindingObject(data: any) {\r\n    let idField, textField;\r\n    if (this.hostHelpComponent) {\r\n      idField = this.hostHelpComponent.idField;\r\n      textField = this.hostHelpComponent.textField;\r\n    }\r\n\r\n    if (this.hostComboListComponent) {\r\n      idField = this.hostComboListComponent.idField;\r\n      textField = this.hostComboListComponent.textField;\r\n    }\r\n\r\n    if (this.hostComboLookupComponent) {\r\n      idField = this.hostComboLookupComponent.idField;\r\n      textField = this.hostComboLookupComponent.textField;\r\n    }\r\n\r\n    this.emitUiStateBinding(data, idField, textField);\r\n  }\r\n\r\n  private emitUiStateBinding(data, idField, textField) {\r\n    const newObject = { key: null, value: null };\r\n    if (data) {\r\n      // const idField = this.hostHelpComponent.idField;\r\n      // const textField = this.hostHelpComponent.textField;\r\n      if (Array.isArray(data)) {\r\n        newObject.key = data.map(d => d[idField]).join(',');\r\n        newObject.value = data.map(d => {\r\n          if (textField.indexOf('.') > -1) {\r\n            return textField.split('.').reduce((r, c) => {\r\n              return r[c];\r\n            }, d);\r\n          } else {\r\n            return d[textField];\r\n          }\r\n        }).join(',')\r\n      } else {\r\n        if (idField) {\r\n          newObject.key = data[idField];\r\n        }\r\n\r\n        if (textField) {\r\n          if (textField.indexOf('.') > -1) {\r\n            newObject.value = textField.split('.').reduce((r, c) => {\r\n              return r[c];\r\n            }, data);\r\n          } else {\r\n            newObject.value = data[textField];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.UIStateBindingChange.emit(newObject);\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef, Input, Renderer2, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { GridComponent } from '@progress/kendo-angular-grid';\r\n@Directive({\r\n    selector: '[farrisDisabled]'\r\n})\r\nexport class FarrisDisabledDirective implements OnInit, OnChanges {\r\n    @Input('farrisDisabled') kendoGridDisabled: boolean;\r\n    maskElement: any;\r\n    constructor(private grid: GridComponent, private el: ElementRef, private renderer: Renderer2) {\r\n\r\n    }\r\n    ngOnInit() {\r\n\r\n    }\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (!this.maskElement) {\r\n            this.createMaskElement();\r\n        }\r\n        if (changes['kendoGridDisabled'] && this.maskElement) {\r\n            if (this.kendoGridDisabled) {\r\n                this.renderer.removeStyle(this.maskElement, 'display');\r\n            } else {\r\n                this.renderer.setStyle(this.maskElement, 'display', 'none');\r\n            }\r\n        }\r\n    }\r\n    private createMaskElement() {\r\n        this.maskElement = this.renderer.createElement(\"div\");\r\n        this.renderer.setStyle(this.maskElement, 'width', '100%');\r\n        this.renderer.setStyle(this.maskElement, 'height', '100%');\r\n        this.renderer.setStyle(this.maskElement, 'position', 'absolute');\r\n        this.renderer.setStyle(this.maskElement, 'background-color', 'rgba(255,255,255,0.5)');\r\n        this.renderer.setStyle(this.maskElement, 'z-index', '3');\r\n        this.renderer.setStyle(this.maskElement, 'display', 'none');\r\n        this.renderer.appendChild(this.el.nativeElement, this.maskElement);\r\n    }\r\n}\r\n\r\n","import { Directive, Input, Injector } from '@angular/core';\r\nimport { FrameContext, BindingData, ViewModel } from '@farris/devkit';\r\n@Directive({\r\n    selector: '[farrisSort]'\r\n})\r\nexport class FarrisSortDirective {\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[farris-textarea-edit]'\r\n})\r\nexport class FarrisTextareaEditDirective {\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[farrisDynamicColumnFormat]'\r\n})\r\nexport class FarrisDynamicColumnFormatDirective {\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[farris-enter-edit]'\r\n})\r\nexport class FarrisEditEnterDirective {\r\n    @Input('form-group') farrisForm: any;\r\n}\r\n\r\n@Directive({\r\n    selector: '[farrisTreeTableFormat]'\r\n})\r\nexport class FarrisTreeTableFormatDirective {\r\n\r\n}\r\n\r\n","import {\r\n  Directive, OnInit, OnChanges, OnDestroy, SimpleChanges, HostListener,\r\n  EventEmitter, Output\r\n} from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { BindingData, BindingList, Change, ChangeType, ViewModel, AppContext, FrameContext, FieldMetadataUtil, DataTypeInfo, BindingObject, EntityPathConverter, RunMode, ComponentType } from '@farris/devkit';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\nimport { debounceTime, finalize } from 'rxjs/operators';\r\n// tslint:disable: max-line-length\r\n\r\n/*\r\n * ä½¿ç¨ç»å®æ°æ®æä»¤\r\n */\r\n@Directive({\r\n  selector: '[farris-use-binding-data]'\r\n})\r\nexport class FarrisDatagridUseBindingDataDirective implements OnInit, OnChanges, OnDestroy {\r\n  private _PROPS: { [propName: string]: any };\r\n  // æåºå­æ®µ\r\n  private sortFields: string = null;\r\n  // æåºæ¹å\r\n  private sortDirections: string = null;\r\n  private parentId: string = null;\r\n  /**\r\n   * è¿æ»¤æ¡ä»¶\r\n   */\r\n  private filters: any = null;\r\n  protected get props() {\r\n    return this._PROPS;\r\n  }\r\n  protected set props(value) {\r\n    this._PROPS = value;\r\n  }\r\n  protected bindingDataChangeEvent: Subscription;\r\n  /**\r\n   * æ¸²ægrid\r\n   */\r\n  private renderGridSubject: Subject<any> = new Subject<any>();\r\n  /**\r\n   * éä¸­è¡åæ¢äºä»¶\r\n   */\r\n  @Output() selectedRowChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  constructor(public bindingData: BindingData, public viewModel: ViewModel, public grid: DatagridComponent) {\r\n    this.setChecks([]);\r\n    this.registerEvent();\r\n  }\r\n\r\n  // #region Ng Event\r\n\r\n  ngOnInit() {\r\n    const { pageSize = 0 } = this.getPagingInfo() || {};\r\n    if (pageSize !== 0) {\r\n      // å¯ç¨åé¡µ\r\n      if ((!this.grid.pageList || this.grid.pageList.length < 1) && typeof this.grid['setPageList'] === 'function') {\r\n        this.grid['setPageList']([pageSize, pageSize * 2, pageSize * 3, pageSize * 4]);\r\n      }\r\n    }\r\n    this.setComponentRef();\r\n    this.bindData();\r\n    window.setTimeout(() => {\r\n      this.updateSelectedRow();\r\n    }, 0);\r\n    this.registerBindingDataChangeEvent();\r\n    this.renderGridSubject.pipe(\r\n      debounceTime(500)\r\n    ).subscribe((change: Change) => {\r\n      if (!this.viewModel || !this.viewModel.frameContext || this.viewModel.frameContext.isDisposed) {\r\n        return;\r\n      }\r\n      this.bindData(change);\r\n    });\r\n    if (this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameComponent) {\r\n      this.viewModel.frameContext.frameComponent.componentType = ComponentType.farrisDataGridComponent;\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.bindData();\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n   * ä¸»é®\r\n   */\r\n  protected get primaryKey() {\r\n    return this.bindingList.primaryKey;\r\n  }\r\n  /**\r\n   * è·åç»å®æ°æ®\r\n   */\r\n  protected get bindingList(): BindingList {\r\n    // æ ¹å®ä½\r\n    if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {\r\n      return this.bindingData.list;\r\n    }\r\n    // å­å®ä½\r\n    let bindingPath = this.viewModel.bindingPath.substr(1);\r\n    bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);\r\n    const paths = bindingPath.split('/');\r\n\r\n    const filteredPaths = paths.filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return this.bindingData.getValue(filteredPaths);\r\n  }\r\n  /**\r\n   * è®¾ç½®ç»ä»¶å¼ç¨\r\n   */\r\n  private setComponentRef() {\r\n    const appContext = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.getFormAppContext();\r\n    const frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId;\r\n    const id = this.grid && this.grid.id;\r\n    // å¦æframeIdä¸å­å¨æfarris gridæ²¡æidå±æ§ï¼è¯´æä¸ç¬¦åä½¿ç¨åºæ¯\r\n    if (!frameId || !id) {\r\n      return;\r\n    }\r\n    const map = appContext && appContext.componentRefs && appContext.componentRefs.get(frameId) || new Map<string, any>();\r\n    appContext && appContext.componentRefs && appContext.componentRefs.set(frameId, map.set(id, this.grid));\r\n  }\r\n  /**\r\n   * è·ååé¡µä¿¡æ¯\r\n   */\r\n  protected getPagingInfo() {\r\n    const bindingPath = this.viewModel.bindingPath;\r\n    const bindingData = this.viewModel.bindingData;\r\n    let pagingInfo = bindingData && bindingData.pagingInfo || {};\r\n    if (bindingPath === '/') {\r\n      return pagingInfo;\r\n    } else {\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0);\r\n      // ä»è¡¨åä»ä»è¡¨åé¡µåæ°æ®æ¯å³èçï¼å ä¸ºä¸åçä»è¡¨è¡æä¸åçä»ä»è¡¨æ°æ®ï¼åé¡µä¿¡æ¯çç»æä¸ºnodeCode_parentId:{åé¡µä¿¡æ¯}ä¸åé¡µä¿¡æ¯æ¯å¹³çº§ç\r\n      // {pagination:{a_pid:{pageSize:2,pageIndex:1},b_pid:{pageSize:2,pageIndex:1}}}\r\n      // ååºå½åè·¯å¾ä¸å®ä½çnodeCode\r\n      let nodeCode = bindingPaths[bindingPaths.length - 1];\r\n      nodeCode = nodeCode.substr(0, nodeCode.length - 1);\r\n      // è·åå½åå®ä½ä¸çº§çä¸»é®\r\n      // const result = pagingInfo[nodeCode] || {};\r\n      // if (result.hasOwnProperty('totalCount')) {\r\n      //   result.total = result.totalCount;\r\n      // }\r\n      // return result;\r\n\r\n      const paths = bindingPaths.slice(0, bindingPaths.length - 1);\r\n      const bindingList = bindingData.getValue(paths) as BindingList;\r\n      const { pageSize = 0 } = pagingInfo[`${nodeCode}`] || {};\r\n      // ä¸çº§è¡¨ææ°æ®\r\n      if (bindingList && bindingList.currentId) {\r\n        const key = `${nodeCode}_${bindingList.currentId}`;\r\n        // const key = nodeCode;\r\n        const result = pagingInfo[key] || {};\r\n        if (result.hasOwnProperty('totalCount')) {\r\n          result.total = result.totalCount;\r\n        }\r\n        // ä¸çº§è¡¨è½ç¶ææ°æ®ï¼ä½ä¸çº§è¡¨å½åè¡çä¸çº§è¡¨å¯è½æ²¡ææ°æ®ï¼è¿å°±å¯¼è´è·åä¸å°åé¡µä¿¡æ¯ï¼æä»¥éè¦å¨è¿ååå¯¹ç»æè¿è¡å¤çï¼å¦ææ²¡æåé¡µä¿¡æ¯çè¯èµ·ç åºè¯¥è¿ååé¡µå¤§å°åå½åé¡µç \r\n        if (Object.keys(result).length < 1) {\r\n          result.pageIndex = 1;\r\n          result.pageSize = pageSize;\r\n        }\r\n        return result;\r\n      } else {\r\n        // ä¸çº§è¡¨æ²¡ææ°æ®ï¼æ­¤æ¶éè¦è·åå½åè¡¨çåé¡µä¿¡æ¯ï¼å¦åé¡µå¤§å°ãå½åé¡µé»è®¤ä¸º1å³å¯ã\r\n        return { pageIndex: 1, pageSize };\r\n      }\r\n    }\r\n  }\r\n\r\n  // #region Input\r\n  /**\r\n   * ç»ä»¶æ¯å¦éè¦æ´æ°\r\n   * @param props å½åå±æ§\r\n   * @param nextProps æ°å±æ§\r\n   * @param change åæ´\r\n   */\r\n  protected shouldComponentUpdate(change: Change, data: any,): { result: boolean, props?: any } {\r\n    const props = this.buildProps(data);\r\n    if (this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.appContext && this.viewModel.frameContext.appContext.runMode === RunMode.highSpeed && change) {\r\n      if (change.type === ChangeType.Load || change.type === ChangeType.Remove || change.type === ChangeType.PaginationInfoChange) {\r\n        return { result: true, props };\r\n      }\r\n    }\r\n    const gridProps = this.buildGridProps();\r\n    if (JSON.stringify(props) === JSON.stringify(gridProps)) {\r\n      return { result: false };\r\n    }\r\n    return { result: true, props };\r\n  }\r\n  protected registerEvent() {\r\n    // æåºäºä»¶\r\n    this.grid && this.grid.columnSorted && this.grid.columnSorted.subscribe((event: any) => {\r\n      const isRemoteSort = this.grid.remoteSort;\r\n      // æ¬å°æåº\r\n      if (!isRemoteSort) {\r\n        this.sortFields = this.grid.sortName;\r\n        this.sortDirections = this.grid.sortOrder;\r\n        this.sortBindingList();\r\n        // this.props = this.buildProps();\r\n      } else {\r\n        // æå¡å¨ç«¯æåº\r\n        const groupField = this.grid && this.grid.groupField || null;\r\n        let sortFields = this.grid.sortName && this.grid.sortName.split(',') || [];\r\n        const sortDirection = this.grid.sortOrder && this.grid.sortOrder.split(',') || [];\r\n        if (groupField) {\r\n          if (!sortFields.includes(groupField)) {\r\n            sortFields.splice(0, 0, groupField);\r\n            sortDirection.splice(0, 0, 'asc');\r\n          }\r\n        }\r\n        // è·åå½åentityä¸ææobjectå±æ§\r\n        const entityType = this.viewModel && this.viewModel.frameContext.repository.entityType || null;\r\n\r\n        if (sortFields.length > 0) {\r\n          if (entityType) {\r\n            const dataTypeInfo = new DataTypeInfo(entityType);\r\n            sortFields = sortFields.map(field => {\r\n              //if (field && field.indexOf('.') !== -1) {\r\n              const paths = field.split('.');\r\n              const propInfo = dataTypeInfo.getPropInfoByPath(paths);\r\n              const originalField = propInfo && propInfo.metadataInfo['path'] || null;\r\n              return originalField;\r\n              //}\r\n              //return field;\r\n            });\r\n          }\r\n        }\r\n        // éåå±æ§ï¼æ ¹æ®datafieldè½¬æ¢ä¸ºoriginalDataField\r\n        const fields = sortFields.join(',');\r\n        const directions = sortDirection.join(',') || 'asc';\r\n        const frameContext: FrameContext = this.viewModel && this.viewModel.frameContext || null;\r\n        if (frameContext) {\r\n          frameContext.repository.sortConditionManager.setConditions(this.viewModel.bindingPath, fields, directions);\r\n        }\r\n      }\r\n    });\r\n    // è¿æ»¤äºä»¶\r\n    this.grid && this.grid.filterChanged && this.grid.filterChanged.subscribe((event: any) => {\r\n      this.filters = event;\r\n      if (!this.grid.remoteFilter) {\r\n        if (this.bindingList.length > 0 && !this.bindingList.currentId) {\r\n          const id = this.bindingList.getIdByIndex(0);\r\n          this.bindingList.setCurrentId(id);\r\n        }\r\n        this.bindData();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * å¯¹bindingListæåº\r\n   */\r\n  private sortBindingList() {\r\n    const groupField = this.grid && this.grid.groupField || null;\r\n    if (groupField) {\r\n      const arrSortFields = this.sortFields && this.sortFields.split(',') || [];\r\n      if (!arrSortFields.includes(groupField)) {\r\n        arrSortFields.splice(0, 0, groupField);\r\n        const arrSortDirection = this.sortDirections && this.sortDirections.split(',') || [];\r\n        arrSortDirection.splice(0, 0, 'asc');\r\n        this.sortFields = arrSortFields.join(',');\r\n        this.sortDirections = arrSortDirection.join(',') || 'asc';\r\n      }\r\n    }\r\n    if (this.sortFields && this.sortDirections) {\r\n      this.bindingList.sortBy(this.sortFields, this.sortDirections);\r\n      // this.props = this.buildProps();\r\n    }\r\n    this.bindData();\r\n  }\r\n  // #endregion\r\n\r\n  // #region æ°æ®ç»å®é¨å\r\n  /**\r\n   * æ´æ°æ°æ®\r\n   * @param change? åæ´\r\n   */\r\n  bindData(change?: Change) {\r\n    const isRemoteFilter = this.grid && this.grid.remoteFilter || false;\r\n    // åæ§è¡æåº\r\n    if (this.sortFields && !this.grid.editable && change && (change.type === 'Load' || change.type === 'SelectionChanged')) {\r\n      this.sortBindingList();\r\n      return;\r\n    }\r\n    // æ°å¢æ°æ®æ¶æ¸ç©ºè¡¨æ ¼ç­éæ¡ä»¶\r\n    if ((this.grid.editable === true || change && change.type === ChangeType.Append) && this.filters && Object.keys(this.filters).length > 0 && !isRemoteFilter) {\r\n      this.filters = {};\r\n      this.grid.clearCondition();\r\n    }\r\n    // åtoJSON\r\n    let data: any = this.bindingList.toJSON();\r\n    if (this.filters && Object.keys(this.filters).length > 0 && !isRemoteFilter) {\r\n      data = this.grid.clientFilterService.executeFilter(data, this.filters);\r\n    }\r\n\r\n    if (this.filters && Object.keys(this.filters).length > 0 && !isRemoteFilter && (!change || change && change.type !== ChangeType.SelectionChanged && change.type !== ChangeType.GlobalSelectionChanged)) {\r\n      if (data && data.length > 0) {\r\n        // å¤æ­å½åè¡æ¯å¦å¨è¿æ»¤åçæ°æ®ä¸­\r\n        const row = (data as []).find(item => item[this.bindingList.primaryKey] === this.bindingList.currentId);\r\n        if (!row) {\r\n          const firstRowId = data[0][this.bindingList.primaryKey];\r\n          this.bindingList.setCurrentId(firstRowId, true, true);\r\n        }\r\n      } else {\r\n        // æ¬å°è¿æ»¤å®ä¹åæ²¡ææ°æ®äº\r\n        // this.bindingList.currentId = null;\r\n        this.bindingList.setCurrentId(null, true, true, true);\r\n        // åéæ¶æ¸ç©ºids\r\n        if (!this.grid.multiSelect) {\r\n          this.setChecks([]);\r\n        }\r\n      }\r\n    }\r\n    const result = this.shouldComponentUpdate(change, data);\r\n    if (!result.result) {\r\n      return;\r\n    }\r\n    // const nextProps = this.buildProps(result);\r\n    this.renderGrid(result.props);\r\n    this.props = JSON.parse(JSON.stringify(result.props));\r\n  }\r\n  /**\r\n   * æ¸²ægrid\r\n   * @param props å±æ§\r\n   */\r\n  private renderGrid(props: any) {\r\n    const { pageIndex, pageSize, total, pagination, data } = props;\r\n    const virtualizedLoad = this.grid.virtualizedAsyncLoad || false;\r\n    this.grid.total = total;\r\n    this.grid.pageSize = pageSize;\r\n    this.grid.pageIndex = pageIndex;\r\n    this.grid.pagination = pagination;\r\n    this.grid.controlPaginationState = false;\r\n    // this.endCellEdit();\r\n    if (pageSize === 0) {\r\n      this.grid.pagination = false;\r\n      this.grid.pageIndex = 1;\r\n      // ä¿®å¤ä¸åé¡µæ¶gridå¯ç¨åç»ä»ä¼éæ°é¦æ°çé®é¢\r\n      // this.grid.pageSize = total;\r\n    }\r\n    if (virtualizedLoad) {\r\n      this.grid.loadVirtualData({\r\n        items: data,\r\n        pageIndex,\r\n        pageSize,\r\n        total\r\n      });\r\n    } else {\r\n      this.grid.loadData(data);\r\n    }\r\n  }\r\n  /**\r\n   * æé è¡¨æ ¼æ°æ®å±æ§\r\n   */\r\n  protected buildProps(datas?: Array<any>) {\r\n    let data;\r\n    if (typeof (datas) !== 'undefined') {\r\n      data = datas;\r\n    } else {\r\n      data = this.bindingList.toJSON();\r\n    }\r\n    // let skip = 0;\r\n    let { pageIndex = 1, pageSize = 0 } = this.getPagingInfo() || {};\r\n    let { total = 0 } = this.getPagingInfo() || {};\r\n    // if (pageIndex > 0) {\r\n    //   skip = (pageIndex - 1) * pageSize;\r\n    // }\r\n    if (pageSize === 0 && total === 0) {\r\n      total = data.length;\r\n    }\r\n    return { data, pageIndex, pageSize, total, pagination: pageSize !== 0 };\r\n  }\r\n  /**\r\n   * è®¡ç®gridç¶æ\r\n   */\r\n  private buildGridProps() {\r\n    const data = this.grid.data || [];\r\n    let skip = 0;\r\n    const { pageIndex = 1, pageSize = 0 } = { pageIndex: this.grid.pageIndex, pageSize: this.grid.pageSize };\r\n    let total = this.grid.total || 0;\r\n    if (pageIndex > 0) {\r\n      skip = (pageIndex - 1) * pageSize;\r\n    }\r\n    if (pageSize === 0 && total === 0) {\r\n      total = data.length;\r\n    }\r\n    return { data, pageIndex, pageSize, total, pagination: this.grid.pagination };\r\n  }\r\n  /**\r\n   * æ°æ®æºåçåæ´\r\n   * @param change åæ´\r\n   */\r\n  protected onBindingDataChange(change: Change) {\r\n    this.updateDataSource(change);\r\n    this.updateSelectedRow(change);\r\n    // this.updateGrid(change);\r\n    // ä¸æ¸é¤å¾éè¡ï¼éè¦ä¿çå¾éç¶æ\r\n    // this.clearCheckedRows(change);\r\n    this.endCellEdit(change);\r\n    // æ´æ°å¾éè¡æ°æ®\r\n    this.updateCheckedRows(change);\r\n    this.updateData(change);\r\n  }\r\n  /**\r\n   * æ´æ°æ°æ®\r\n   */\r\n  private updateDataSource(change: Change) {\r\n    /*if (change) {\r\n      const isMatch = this.checkIfChangeMatchBindingPath(change);\r\n      if (!isMatch) {\r\n        return;\r\n      }\r\n    }*/\r\n    if (change && change.type === ChangeType.ValueChanged) {\r\n      this.renderGridSubject.next(change);\r\n    } else if (change && (change.type === ChangeType.SelectionChanged || change.type === ChangeType.GlobalSelectionChanged)) {\r\n      if (this.bindingList.currentId === (this.grid.selectedRow && this.grid.selectedRow.id) && this.grid.total > 0) {\r\n      } else {\r\n        this.bindData(change);\r\n      }\r\n    } else {\r\n      this.bindData(change);\r\n    }\r\n  }\r\n  // private endCellEdit() {\r\n  //   const isEditing = this.grid.isEditing();\r\n  //   if (isEditing) {\r\n  //     this.grid.endCellEdit();\r\n  //   }\r\n  // }\r\n  private endCellEdit(change: Change) {\r\n    const isEditing = this.grid.isEditing();\r\n    if (change.type === ChangeType.Load && isEditing) {\r\n      this.grid.endCellEdit();\r\n    }\r\n  }\r\n  /**\r\n   * è®¾ç½®gridå½åéæ©è¡\r\n   * @param change åæ´\r\n   */\r\n  private updateSelectedRow(change?: Change) {\r\n    if (!this.bindingList || !this.bindingList.currentId) {\r\n      return;\r\n    }\r\n    // é¡µç åæ¢æ¶ä¸æ§è¡å½åè¡åæ¢\r\n    if (change && change.type === ChangeType.PaginationInfoChange) {\r\n      return;\r\n    }\r\n    if (this.viewModel && this.viewModel.frameContext.bindingData.rowSelectedEventSuspend === true) {\r\n      return;\r\n    }\r\n    const { id: gridSelectedRowId = null } = this.grid.selectedRow || {};\r\n    const currentId = this.bindingList.currentId;\r\n    // gridå½åè¡ä¸bingingListå½åè¡ä¸è´ï¼æ é¡»åæ¢\r\n    if (gridSelectedRowId === currentId) {\r\n      const isMatch = change && (change.path.toString() === this.viewModel.bindingPath.split('/').filter(p => p).toString());\r\n      if (change && change.type === ChangeType.Load && isMatch) {\r\n        this.grid.clearSelections();\r\n        this.grid.selectRow(currentId, true, true);\r\n      }\r\n      return;\r\n    }\r\n    this.selectGridRow(this.bindingList.currentId);\r\n  }\r\n  /**\r\n   * æ³¨åbindingdataååäºä»¶\r\n   */\r\n  private registerBindingDataChangeEvent() {\r\n    this.bindingDataChangeEvent = this.bindingData.changes.subscribe((change: Change) => {\r\n      this.onBindingDataChange(change);\r\n    });\r\n    this.viewModel.frameContext.appContext.messagePipe.subscribe(message => {\r\n      if (message === 'bindData') {\r\n        this.bindData();\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * åæ¶bindingdataååè®¢é\r\n   */\r\n  private unRegisterBindingDataChangeEvent() {\r\n    if (this.bindingDataChangeEvent && typeof (this.bindingDataChangeEvent.unsubscribe) === 'function') {\r\n      this.bindingDataChangeEvent.unsubscribe();\r\n    }\r\n  }\r\n  /**\r\n   * è§¦åé¡µç åæ¢äºä»¶\r\n   * @description æ¬æ¹æ³éç¨åºæ¯ä»ä¸ºç¶çº§gridæ°æ®éæ°loadï¼éè¦è§¦åè¯¥gridéæ°åæ°ä½¿ç¨ãå¶ä»åºæ¯è¯·å¿ä½¿ç¨\r\n   * @TODO: å¾éæï¼æ§å¶ä¸çº§æ°æ®å è½½åºè¯¥ä¾èµè¡¨æ ¼çè¡åæ¢äºä»¶ï¼ä¸´æ¶è¿æ ·å¤çï¼åç»­æä¾LoadChildrenäºä»¶\r\n   */\r\n  private updateData(change?: Change) {\r\n    if (!(change && (change.type === ChangeType.SelectionChanged || change.type === ChangeType.Load))) {\r\n      return;\r\n    }\r\n    const bindingPath = this.viewModel.bindingPath;\r\n    const eventBindingPath = '/' + change.path.join('/');\r\n    const isRetrieve = this.viewModel.frameContext.appContext.params.get('retrieveing') || false;\r\n    if (change.path.length < 1 || bindingPath === '/' || bindingPath === eventBindingPath || !bindingPath.startsWith(eventBindingPath)) {\r\n      return;\r\n    }\r\n    // retrieveæ¶ä¼èªå¨å¸¦åä»è¡¨ç¬¬ä¸é¡µåä»è¡¨ç¬¬ä¸è¡çä»ä»è¡¨æ°æ®ï¼æä»¥ä¸éè¦åå»åç¬è¯·æ±\r\n    if (isRetrieve) {\r\n      return;\r\n    }\r\n    const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);\r\n    const paths = fullPaths.slice(0, fullPaths.length - 1);\r\n    const parent = this.bindingList.parent;\r\n    const parentId = parent && parent[parent.primaryKey];\r\n    // ä¸çº§è¡¨æ²¡ææ°æ®\r\n    if (!parentId) {\r\n      return;\r\n    }\r\n    // è·ånodecode\r\n    const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);\r\n    let nodeCode = bindingPaths[bindingPaths.length - 1];\r\n    nodeCode = nodeCode.substr(0, nodeCode.length - 1);\r\n    // const configPath = `/${nodeCode}_${parentId}`;\r\n    const configPath = `/${nodeCode}`;\r\n    let { pageIndex = 1 } = this.viewModel.frameContext.repository.entityCollection.getPaginationConfigByPath(configPath) || {};\r\n    const { pageSize = 0 } = this.viewModel.frameContext.repository.entityCollection.getPaginationConfigByPath(configPath) || {};\r\n\r\n    const parentNodeCode = change.path[change.path.length - 1];\r\n    const parentConfigPath = '/' + parentNodeCode.substring(0, parentNodeCode.length - 1);\r\n    const { pageSize: parentPageSize = 0 } = this.viewModel.frameContext.repository.entityCollection.getPaginationConfigByPath(parentConfigPath) || {};\r\n    const isQueryChild = this.viewModel.frameContext.appContext.params.get('queryChild') || false;\r\n    if (isQueryChild) {\r\n      // this.viewModel.frameContext.appContext.params.delete('queryChild');\r\n      pageIndex = 1;\r\n    }\r\n    // å½ä¸çº§è¡¨åæ¢è¡æ¶\r\n    if (parentPageSize + pageSize !== 0) {\r\n      this.viewModel.frameContext.appContext.params.set('forceQueryChild', true);\r\n      this.viewModel.frameContext.repository.queryChild(paths, pageIndex, pageSize).pipe(\r\n        finalize(() => this.viewModel.frameContext.appContext.params.delete('forceQueryChild'))\r\n      ).subscribe();\r\n    }\r\n  }\r\n  ngOnDestroy() {\r\n    this.unRegisterBindingDataChangeEvent();\r\n  }\r\n  // #endregion\r\n\r\n  // #region äºä»¶åå°å¨\r\n\r\n  /**\r\n   * åå°éä¸­è¡åæ¢äºä»¶\r\n   * @description ç»ä¸åéæ¨¡å¼åå¤éæ¨¡å¼ä¸çè¡åæ¢äºä»¶\r\n   */\r\n  protected fireSelectedRowChange(selectedRowContext: any) {\r\n    this.selectedRowChange.emit(selectedRowContext);\r\n  }\r\n  /**\r\n   * æ¸ç©ºéå®è¡\r\n   * @param change åæ´\r\n   */\r\n  private clearCheckedRows(change: Change) {\r\n    if (change.type === ChangeType.Load && this.grid.multiSelect) {\r\n      const isMatch = this.checkIfChangeMatchBindingPath(change);\r\n      if (isMatch) {\r\n        this.setChecks([]);\r\n        if (typeof (this.grid.clearCheckeds) === 'function') {\r\n          this.grid.clearCheckeds();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n\r\n  // #region éä¿¡\r\n\r\n  /**\r\n   * è®¾ç½®BindingListçå½åè¡\r\n   * @param id å½åè¡åç \r\n   */\r\n  protected setSelectionIdToBindingData(id: string): void {\r\n    // å¦æå½åè¡ä¸å­å¨ï¼åå¼ºå¶è®¾ç½®\r\n    if (!id) {\r\n      this.bindingList.currentId = id;\r\n      if (!this.grid.multiSelect) {\r\n        this.setChecks([]);\r\n      }\r\n      return;\r\n    }\r\n    if (this.bindingList.currentId !== id) {\r\n      this.bindingList.setCurrentId(id, true);\r\n    }\r\n    // åéæ¨¡å¼ä¸å°å½åè¡è®¾ç½®å°ids\r\n    if (!this.grid.multiSelect) {\r\n      this.setChecks([id]);\r\n    }\r\n  }\r\n  private updateCheckedRows(changes: Change) {\r\n    if (changes.type === ChangeType.Load) {\r\n      this.setCheckedRows();\r\n    } else if (changes.type === ChangeType.ValueChanged) {\r\n      const ids = this.getChecks();\r\n      if (changes.id && ids.includes(changes.id)) {\r\n        this.setCheckedRows();\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * è®¾ç½®éæ©è¡\r\n   */\r\n  protected setChecks(ids: string[]) {\r\n    this.viewModel.uiState.setPropertyValue('ids', ids);\r\n    this.setCheckedRows(ids);\r\n  }\r\n  /**\r\n   * è·åå¾éè¡idæ°ç»\r\n   * @returns \r\n   */\r\n  protected getChecks(): string[] {\r\n    return this.viewModel.uiState['ids'] || [];\r\n  }\r\n  /**\r\n   * æ´æ°å¾éè¡æ°æ®\r\n   */\r\n  protected setCheckedRows(ids?: string[]) {\r\n    // é«éæ¨¡å¼æ¶ä¸åè®¾ç½®rows\r\n    // if (this.viewModel.frameContext.appContext.runMode === RunMode.highSpeed) {\r\n    //   return;\r\n    // }\r\n    if (typeof ids === 'undefined') {\r\n      ids = this.viewModel.uiState['ids'] || [];\r\n    }\r\n    if (!Array.isArray(ids) || ids.length < 1) {\r\n      // æ­¤æ¶idsæ²¡æå¼ï¼rowsä¸­ä¹ä¸åºè¯¥æ\r\n      this.viewModel.uiState.setPropertyValue('rows', null);\r\n      return;\r\n    }\r\n    let list = [];\r\n    // TODOï¼rowsä¸­æ°æ®å¨é«éæ¨¡å¼åæ®éæ¨¡å¼ä¸å¤è¯­å­æ®µçå¼è¡¨ç°ä¸ä¸è´ï¼é«éæ¨¡å¼ä¸å¤è¯­å­æ®µå¼ä¸ºå¯¹è±¡ï¼æ®éæ¨¡å¼ä¸ºå½åè¯­è¨ãæä¸å¤çé«éæ¨¡å¼åºæ¯\r\n    if (this.viewModel.frameContext.appContext.runMode === RunMode.highSpeed) {\r\n      list = this.grid.data || [];\r\n    } else {\r\n      list = this.bindingList.toJSON({ ignoreMultiLangInput: true });\r\n    }\r\n    const rows: Map<string, any> = this.viewModel.uiState['rows'] || new Map<string, any>();\r\n\r\n    const result = new Map<string, any>();\r\n    ids.forEach((id: any) => {\r\n      const item = list.find(item => item[this.primaryKey] === id);\r\n      const otherPageItem = rows.get(id);\r\n      if (item) {\r\n        result.set(id, item);\r\n      } else if (otherPageItem) {\r\n        result.set(id, otherPageItem);\r\n      }\r\n    });\r\n    this.viewModel.uiState.setPropertyValue('rows', result);\r\n  }\r\n  /**\r\n   * éä¸­gridè¡\r\n   * @param id id\r\n   */\r\n  protected selectGridRow(id: any) {\r\n    this.grid.selectRow(id);\r\n    this.grid.scrollToCurrentRow();\r\n  }\r\n  // #endregion\r\n  // #region äºä»¶å¤çå¨\r\n\r\n  /**\r\n   * é¡µç åæ¢äºä»¶\r\n   * @param event event\r\n   */\r\n  @HostListener('pageChanged', ['$event'])\r\n  public pageChangedHandler(event: any) {\r\n    let { pageIndex, pageSize } = event;\r\n    if (pageIndex < 1) {\r\n      pageIndex = 1;\r\n    }\r\n    const skip = (pageIndex - 1) * pageSize;\r\n    this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);\r\n  }\r\n\r\n  /**\r\n   * è¡åæ¢äºä»¶\r\n   * @param event event\r\n   */\r\n  @HostListener('selectChanged', ['$event'])\r\n  public selectedRowChanged(event: any) {\r\n    const { index, data } = event;\r\n    const id = data[this.primaryKey];\r\n    this.setSelectionIdToBindingData(id);\r\n    this.fireSelectedRowChange(event);\r\n  }\r\n\r\n  /**\r\n   * åæ¶è¡éæ©äºä»¶\r\n   * @param event event\r\n   */\r\n  @HostListener('unSelect', ['$event'])\r\n  public unSelected(event: any) {\r\n    if (!event) {\r\n      return;\r\n    }\r\n    const { data = {} } = event;\r\n    const id = data[this.primaryKey];\r\n    const currentId = this.bindingList.currentId;\r\n    if (id === currentId) {\r\n      this.setSelectionIdToBindingData(null);\r\n    }\r\n    // this.fireSelectedRowChange(event);\r\n  }\r\n  /**\r\n   * å¾éè¡åçåå\r\n   * @param event event\r\n   */\r\n  @HostListener('checkedChange', ['$event'])\r\n  public checkedChanged(event: any) {\r\n    event = event || [];\r\n    const ids = event.map(item => item.id);\r\n    this.setChecks(ids);\r\n  }\r\n  /**\r\n   * åé¡µå¤§å°åæ´äºä»¶\r\n   * @param event event\r\n   */\r\n  @HostListener('pageSizeChanged', ['$event'])\r\n  public pageSizeChanged(event: any) {\r\n    const { pageIndex, pageSize } = event;\r\n    const skip = 0;//(pageIndex - 1) * pageSize;\r\n    // this.bindingList.setPaginationInfo(skip, pageSize);\r\n    this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);\r\n  }\r\n\r\n  /**\r\n   * gridæ»å¨å è½½æ°æ®\r\n   * @param event event\r\n   */\r\n  @HostListener('scrollYLoad', ['$event'])\r\n  public scrollY(event: any) {\r\n    const { pager: pageIndex, pageSize } = event;\r\n    const skip = (pageIndex - 1) * pageSize;\r\n    this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);\r\n  }\r\n  @HostListener('filterChanged', ['$event'])\r\n  public filterChanged(event: any) {\r\n    this.filters = event;\r\n  }\r\n  // #endregion\r\n  private checkIfChangeMatchBindingPath(change: Change): boolean {\r\n    let isMatch = false;\r\n    if (!change || !change.path) {\r\n      return isMatch;\r\n    }\r\n\r\n    const changePathArray = change.path;\r\n    if (!changePathArray) {\r\n      return isMatch;\r\n    }\r\n\r\n    if (!(this.bindingData) && !(this.bindingData.bindingPath)) {\r\n      return isMatch;\r\n    }\r\n    const bingdingPathArray = this.bindingData.bindingPath.split('/');\r\n    if (bingdingPathArray.length <= 0) {\r\n      return isMatch;\r\n    }\r\n\r\n    if (changePathArray.length === 0) { // ä¸»è¡¨\r\n      if (this.bindingData.bindingPath === '/') {\r\n        isMatch = true;\r\n      }\r\n    } else if (change.path.length === 1) {// ä¸»ä»è¡¨\r\n      if (bingdingPathArray.length === 2 && bingdingPathArray[1] === change.path[0]) {\r\n        isMatch = true;\r\n      }\r\n    } else if (change.path.length === 2) { // ä¸»ä»ä»è¡¨\r\n      if (bingdingPathArray.length === 3 && bingdingPathArray[1] === change.path[0] && bingdingPathArray[2] === change.path[1]) {\r\n        isMatch = true;\r\n      }\r\n    }\r\n\r\n    return isMatch;\r\n  }\r\n\r\n}\r\n","import { Directive, Input, Self, Host, Optional, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { MultiSelectComponent } from '@farris/ui-multi-select'\r\nimport { ViewModel, BindingObject } from '@farris/devkit';\r\n\r\n@Directive({\r\n  selector: '[multiSelectDataMapping]'\r\n})\r\nexport class MultiSelectDataMappingDirective implements OnInit {\r\n\r\n  @Input() dataSource: any;\r\n  @Input() idField: string;\r\n  @Input() textField: string;\r\n  @Input() valueField: string;\r\n  @Input() fjmField: string;\r\n  @Input() fjdField: string;\r\n  @Input() uiStateField: any;\r\n  @Input() selectedId: string;\r\n  @Output() selectedIdChanged = new EventEmitter<string>();\r\n  private originalDataSource: any;\r\n\r\n  constructor(\r\n    @Optional() private vm: ViewModel,\r\n    @Host() @Self() @Optional() private multiSelectComponent: MultiSelectComponent\r\n  ) {\r\n    this.vm.uiState.changes.subscribe(data => {\r\n      this.selectedId = data.value;\r\n    })\r\n  }\r\n  ngOnInit() {\r\n    this.multiSelectComponent.dataSource = [];\r\n    if (Array.isArray(this.dataSource)) {\r\n      this.multiSelectComponent.dataSource = this.dataSource;\r\n      this.originalDataSource = this.dataSource;\r\n    } else if (this.dataSource && this.dataSource.changes) {\r\n      this.dataSource.changes.subscribe((data: any) => {\r\n        if (data.type === 'Load') {\r\n          this.originalDataSource = data.value;\r\n          if (this.multiSelectComponent.isTree()) {\r\n            if (this.fjmField) {\r\n              // åçº§ç å è½½æ ç»æ\r\n              this.multiSelectComponent.dataSource = this.plainToTree(data.value, this.fjmField, 1);\r\n            } else if (this.fjdField) {\r\n              // ç¶èç¹å è½½æ ç»æ\r\n              this.multiSelectComponent.dataSource = this.buildTreeNodesByFjd(data.value, this.fjdField);\r\n            }\r\n            this.multiSelectComponent.selections = this.getTreeSelectionsById(this.selectedId, this.originalDataSource);\r\n          } else {\r\n            this.multiSelectComponent.dataSource = data.value;\r\n            this.multiSelectComponent.selections = this.getListSelectionsById(this.selectedId, this.multiSelectComponent.dataSource);\r\n          }\r\n        }\r\n      })\r\n    }\r\n    this.selectIdBindingToUIStateField();\r\n  }\r\n\r\n  private selectIdBindingToUIStateField() {\r\n    if (this.multiSelectComponent && this.multiSelectComponent.selectedIdChange) {\r\n      this.multiSelectComponent.selectedIdChange.subscribe(data => {\r\n        this.selectedIdChanged.emit(data);\r\n      })\r\n    }\r\n  }\r\n  /**\r\n   * \r\n   * @param data éè¦æ ¼å¼åçæ°æ®\r\n   */\r\n  private formatDataSource(data: any[], field: string) {\r\n    if (!data || !data.length) {\r\n      return [];\r\n    }\r\n    return data.map(item => {\r\n      const n = item['toJSON'] ? item.toJSON() : item;\r\n      return {\r\n        data: Object.assign({ ...n }, {\r\n          [`${this.idField}`]: item[this.idField],\r\n          [`${this.textField}`]: item[this.textField],\r\n          [`${this.valueField}`]: item[this.valueField],\r\n          [`${field}`]: item[field]\r\n        }),\r\n        children: []\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * æå¹³è¡ç»æçæ°æ®è½¬æ¢ææ å½¢ç»æ\r\n   * @param plainSource \r\n   * @param field \r\n   * @param layer \r\n   */\r\n  private plainToTree(plainSource: any[], field: string, layer: number) {\r\n    const treeSource = this.formatDataSource(plainSource, field);\r\n    if (!treeSource.length) {\r\n      return [];\r\n    }\r\n    if (!treeSource[0]['data'][field]) {\r\n      return [];\r\n    }\r\n    const parents = treeSource.filter(item => {\r\n      return item['data'][field]['layer'] === layer;\r\n    })\r\n    this.recursive(parents, treeSource, field, 1);\r\n    return parents;\r\n  }\r\n\r\n  /**\r\n   * éå½éåæ å½¢ç»æ\r\n   * @param parents \r\n   * @param treeSource \r\n   * @param field \r\n   * @param layer \r\n   */\r\n  private recursive(parents: any[], treeSource: any[], field: string, layer: number) {\r\n    parents.forEach(parent => {\r\n      const parentPath = parent['data'][field]['path'];\r\n      const parentLayer = parent['data'][field]['layer'];\r\n      if (parent['data'][field]['isDetail'] === false) {\r\n        treeSource.forEach(item => {\r\n          if (item && item['data'] && item['data'][field] && item['data'][field]['path']) {\r\n            const itemPath = item['data'][field]['path'];\r\n            const itemLayer = item['data'][field]['layer'];\r\n            let targetPath: string;\r\n            if (itemPath && itemPath.length > parentPath.length) {\r\n              targetPath = itemPath.substr(0, Number(layer) * 4);\r\n            }\r\n            if (parentPath === targetPath && parentLayer === itemLayer - 1) {\r\n              parent['children'].push(item);\r\n            }\r\n            if (item['data'][field]['isDetail'] === false && parentPath === targetPath) {\r\n              this.recursive([item], treeSource, field, Number(layer) + 1);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    })\r\n  }\r\n  /**\r\n     * \r\n     * @param ids éä¸­æ°æ®çid\r\n     * @param dataSource åå§æ°æ®\r\n     */\r\n  private getListSelectionsById(ids: any, dataSource: any) {\r\n    let result = [];\r\n    const _this = this;\r\n    if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {\r\n      const reusltObj = dataSource.find(item => {\r\n        return item && item[_this.idField] === ids;\r\n      });\r\n      if (reusltObj) {\r\n        result.push(reusltObj);\r\n      }\r\n    } else if (Array.isArray(ids)) {\r\n      if (dataSource) {\r\n        ids.forEach(id => {\r\n          const item = dataSource.find(item => item && item[_this.idField] === id);\r\n          if (item) {\r\n            result.push(item);\r\n          }\r\n        });\r\n        // dataSource.forEach(item => {\r\n        //   ids.forEach(id => {\r\n        //     if (item[_this.idField] === id) {\r\n        //       result.push(item);\r\n        //     }\r\n        //   })\r\n        // })\r\n      } else {\r\n        result = [];\r\n      }\r\n    } else {\r\n      result = [];\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param ids éä¸­æ°æ®çid\r\n   * @param dataSource åå§æ°æ®\r\n   */\r\n  private getTreeSelectionsById(ids: any, dataSource: any) {\r\n    let result = [];\r\n    const _this = this;\r\n    if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {\r\n      const reusltObj = dataSource.find(item => {\r\n        return item && item[_this.idField] === ids;\r\n      });\r\n      if (reusltObj) {\r\n        result.push(reusltObj);\r\n      }\r\n    } else if (Array.isArray(ids)) {\r\n      if (dataSource) {\r\n        ids.forEach(id => {\r\n          const item = dataSource.find(item => item && item[_this.idField] === id);\r\n          if (item) {\r\n            result.push(item);\r\n          }\r\n        });\r\n        // dataSource.forEach(item => {\r\n        //   ids.forEach(id => {\r\n        //     if (item.data[_this.idField] === id) {\r\n        //       result.push(item.data);\r\n        //     }\r\n        //   })\r\n        // })\r\n      } else {\r\n        result = [];\r\n      }\r\n    } else {\r\n      result = [];\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * æ ¹æ®ç¶èç¹åå§åæ ç»æ\r\n   * @param bindingObjects \r\n   */\r\n  private buildTreeNodesByFjd(bindingObjects: BindingObject[], field: string) {\r\n    const treeData = this.formatDataSource(bindingObjects, field);\r\n    treeData.forEach((item: any) => {\r\n      const parent = treeData.find((ele: any) => item.data[field].parentElement === ele.data[this.idField]);\r\n      if (parent) {\r\n        parent.children.push(item);\r\n      }\r\n    });\r\n    return treeData.filter((ele: any) => !ele.data[field].parentElement);\r\n  }\r\n}\r\n","import { Subscription } from 'rxjs';\r\nimport { Directive, OnInit, HostListener, Output, EventEmitter, OnDestroy, OnChanges, Input, ChangeDetectorRef } from '@angular/core';\r\nimport { BindingData, BindingList, ViewModel, Change } from '@farris/devkit';\r\nimport { ListViewComponent } from '@farris/ui-list-view';\r\n@Directive({\r\n  selector: '[farrisListviewBinding]'\r\n})\r\n\r\nexport class FarrisListViewBindingDirective implements OnInit, OnDestroy, OnChanges {\r\n  bindingDataChangeEvent: Subscription;\r\n\r\n  /**\r\n   * ä¸»é®\r\n   */\r\n  protected get primaryKey() {\r\n    return this.bindingList.primaryKey;\r\n  }\r\n\r\n  @Input() supportPaged: boolean = true;\r\n  /**\r\n   * éä¸­è¡åæ¢äºä»¶\r\n   */\r\n  @Output() selectedRowChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  constructor(\r\n    private bindingData: BindingData,\r\n    private viewModel: ViewModel,\r\n    private listview: ListViewComponent) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    // ç»å®æ°æ®\r\n    this.bindData();\r\n    this.registerBindingDataChangeEvent();\r\n\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.bindData();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.unRegisterBindingDataChangeEvent();\r\n  }\r\n\r\n  /**\r\n   * è·ååé¡µä¿¡æ¯\r\n   */\r\n  protected getPagingInfo() {\r\n    const bindingPath = this.viewModel.bindingPath;\r\n    const bindingData = this.viewModel.bindingData;\r\n    let pagingInfo = bindingData.pagingInfo;\r\n    if (bindingPath === '/') {\r\n      return pagingInfo;\r\n    } else {\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0).map(item => {\r\n        return item.substring(0, item.length - 1);\r\n      });\r\n      bindingPaths.forEach(path => {\r\n        pagingInfo = pagingInfo && pagingInfo[path];\r\n      });\r\n      return pagingInfo;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®listviewå±æ§\r\n   */\r\n  private setListViewPageProps() {\r\n    const data = this.bindingList.toJSON();\r\n    let skip = 0;\r\n    const { pageIndex = 1, pageSize = 0 } = this.getPagingInfo() || {};\r\n    let { total = 0 } = this.getPagingInfo() || {};\r\n    if (pageIndex > 0) {\r\n      skip = (pageIndex - 1) * pageSize;\r\n    }\r\n    if (pageSize === 0 && total === 0) {\r\n      total = data.length;\r\n    }\r\n    this.listview.supportPaging = this.supportPaged;\r\n    this.listview.pageIndex = pageIndex;\r\n    this.listview.pageSize = pageSize;\r\n    this.listview.total = total;\r\n    let currentPage = pageIndex;\r\n    const itemsPerPage = pageSize;\r\n    let totalItems = total;\r\n    if (pageSize === 0) {\r\n      // this.listview.supportPaging = false;\r\n      this.listview.pageIndex = pageIndex;\r\n      this.listview.total = total;\r\n      currentPage = 1;\r\n      totalItems = total;\r\n    }\r\n    if (this.listview.paginationOptions) {\r\n      this.listview.paginationOptions.itemsPerPage = itemsPerPage;\r\n      this.listview.paginationOptions.currentPage = currentPage;\r\n      this.listview.paginationOptions.pageList = this.listview.pageList;\r\n      this.listview.paginationOptions.totalItems = totalItems;\r\n    }\r\n    const listViewChangeDetectRef: ChangeDetectorRef = this.listview['cdr'] as ChangeDetectorRef;\r\n    if (listViewChangeDetectRef) {\r\n      listViewChangeDetectRef.detectChanges();\r\n    }\r\n    const paginationDirective = this.listview.pager && this.listview.pager['paginationDirective'];\r\n    if (paginationDirective && paginationDirective['service']) {\r\n      try {\r\n        paginationDirective['service'].instances[this.listview.pager.id] = { ...this.listview.paginationOptions };\r\n        paginationDirective['service'].setTotalItems(this.listview.pager.id, totalItems);\r\n        paginationDirective.changeDetectorRef.detectChanges();\r\n      } catch { }\r\n    }\r\n  }\r\n\r\n  /*\r\n   * è·åç»å®æ°æ®\r\n   */\r\n  protected get bindingList(): BindingList {\r\n    // æ ¹å®ä½\r\n    if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {\r\n      return this.bindingData.list;\r\n    }\r\n    // å­å®ä½\r\n    let bindingPath = this.viewModel.bindingPath.substr(1);\r\n    bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);\r\n    const paths = bindingPath.split('/');\r\n\r\n    const filteredPaths = paths.filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return this.bindingData.getValue(filteredPaths);\r\n  }\r\n\r\n  /* ç»å®æ°æ® */\r\n  private bindData() {\r\n    this.setListViewPageProps();\r\n    const data = this.bindingList.toArray();\r\n    this.listview.setData(data);\r\n  }\r\n\r\n  /*\r\n       * åå°éä¸­è¡åæ¢äºä»¶\r\n       * @description ç»ä¸åéæ¨¡å¼åå¤éæ¨¡å¼ä¸çè¡åæ¢äºä»¶\r\n       */\r\n  protected fireSelectedRowChange(selectedRowContext: any) {\r\n    this.selectedRowChange.emit(selectedRowContext);\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®BindingListçå½åè¡\r\n   * @param id å½åè¡åç \r\n   */\r\n  protected setSelectionIdToBindingData(id: string): void {\r\n    this.bindingList.setCurrentId(id, true);\r\n  }\r\n\r\n  /**\r\n   * æ°æ®æºåçåæ´\r\n   * @param change åæ´\r\n   */\r\n  protected onBindingDataChange(change: Change) {\r\n    this.bindData();\r\n    this.updateSelectedRow(change);\r\n  }\r\n  /**\r\n   * è®¾ç½®å½åè¡\r\n   * @param change åæ´\r\n   */\r\n  private updateSelectedRow(change?: Change) {\r\n    if (!this.bindingList || !this.bindingList.currentId) {\r\n      return;\r\n    }\r\n    if (this.viewModel && this.viewModel.frameContext.bindingData.rowSelectedEventSuspend === true) {\r\n      return;\r\n    }\r\n    const { id = null } = this.listview.clickItem || {};\r\n    const currentId = this.bindingList.currentId;\r\n    // gridå½åè¡ä¸bingingListå½åè¡ä¸è´ï¼æ é¡»åæ¢\r\n    if (id === currentId) {\r\n      return;\r\n    }\r\n    this.selectRow(this.bindingList.currentId);\r\n  }\r\n  protected selectRow(id: any) {\r\n    if (this.listview && typeof this.listview.selectRow === 'function') {\r\n      this.listview.selectRow(id);\r\n    }\r\n  }\r\n  /**\r\n   * æ³¨åbindingdataååäºä»¶\r\n   */\r\n  private registerBindingDataChangeEvent() {\r\n    this.bindingDataChangeEvent = this.bindingData.changes.subscribe((change: Change) => {\r\n      this.onBindingDataChange(change);\r\n    });\r\n  }\r\n  /**\r\n   * åæ¶bindingdataååè®¢é\r\n   */\r\n  private unRegisterBindingDataChangeEvent() {\r\n    this.bindingDataChangeEvent.unsubscribe();\r\n  }\r\n  private setChecks(ids: string[]) {\r\n    this.viewModel.uiState.setPropertyValue('ids', ids);\r\n  }\r\n  /* åæ¢è¡äºä»¶ */\r\n  @HostListener('listClick', ['$event'])\r\n  changeRow(event: any) {\r\n    const { index, data, checkChangeEvent } = event;\r\n    if (checkChangeEvent === false || !event.hasOwnProperty('checkChangeEvent')) {\r\n      if (data && Array.isArray(data) && data.length > 0) {\r\n        const id = data[0] && data[0][this.primaryKey] || null;\r\n        if (id) {\r\n          this.setSelectionIdToBindingData(id);\r\n        }\r\n      }\r\n      this.listview.activeIndex = index;\r\n      this.fireSelectedRowChange(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * åæ¢é¡µç è§¦åäºä»¶\r\n   * @param event åæ¢é¡µç åæ°\r\n   */\r\n  @HostListener('pageChanged', ['$event'])\r\n  public pageChangedHandler(event: any) {\r\n    let pageIndex = event.pageInfo.pageIndex;\r\n    const pageSize = event.pageInfo.pageSize;\r\n    if (pageIndex < 1) {\r\n      pageIndex = 1;\r\n    }\r\n    const skip = (pageIndex - 1) * pageSize;\r\n    this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®æ¯é¡µæ°æ®æ¡æ°è§¦åäºä»¶\r\n   * @param event åæ¢é¡µç åæ°\r\n   */\r\n  @HostListener('pageSizeChanged', ['$event'])\r\n  public pageSizeChangedHandler(event: any) {\r\n    const { pageIndex, pageSize } = event.pageInfo;\r\n    const skip = (pageIndex - 1) * (+pageSize);\r\n    this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);\r\n  }\r\n  @HostListener('checkValuesChange', ['$event'])\r\n  public checkValuesChange(event: any) {\r\n    const ids = event;\r\n    this.setChecks(ids);\r\n  }\r\n}\r\n","import {\r\n  Directive, OnInit, OnChanges, OnDestroy, SimpleChanges, Input, HostListener, Optional,\r\n  EventEmitter, Output, ElementRef, ContentChildren, QueryList, Injector, NgZone,\r\n} from '@angular/core';\r\nimport { Observable, of, Subscription } from 'rxjs';\r\nimport {\r\n  BindingData, BindingList, Change, ChangeType,\r\n  FrameEventBus, UIState, Form, ViewModel, DataTypeInfo, DataPropInfo\r\n} from '@farris/devkit';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\n\r\nimport { isNumber } from 'lodash-es';\r\nimport { DateTimeHelperService } from '@farris/ui-common/date';\r\nimport { RuntimeStateService } from '@farris/ui-common';\r\nimport { DialogService } from '@farris/ui-dialog';\r\n\r\n@Directive({\r\n  selector: '[farris-datagrid-editable]'\r\n})\r\nexport class EditableDirective implements OnInit, OnChanges, OnDestroy {\r\n  /**\r\n   * gridæ¯å¦å¯ä»¥ç¼è¾\r\n   */\r\n  @Input('farris-datagrid-editable') gridEditable: boolean;\r\n  /**\r\n   * ç¼è¾æ¶åæ¶åç»\r\n   */\r\n  @Input('disableGroupOnEditing') disableGroupOnEditing: boolean = true;\r\n\r\n  private beginEditSubscription: Subscription;\r\n  private endEditSubscription: Subscription;\r\n  /**\r\n   * ä¸´æ¶è®°å½gridåç»å­æ®µ\r\n   */\r\n  private groupFields: any[] = [];\r\n  protected get bindingList(): BindingList {\r\n    // æ ¹å®ä½\r\n    if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {\r\n      return this.bindingData.list;\r\n    }\r\n    // å­å®ä½\r\n    let bindingPath = this.viewModel.bindingPath.substr(1);\r\n    bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);\r\n    const paths = bindingPath.split('/');\r\n\r\n    const filteredPaths = paths.filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return this.bindingData.getValue(filteredPaths);\r\n  }\r\n  constructor(\r\n    public bindingData: BindingData,\r\n    public viewModel: ViewModel,\r\n    public grid: DatagridComponent,\r\n    private dateService: DateTimeHelperService,\r\n    public injector: Injector,\r\n    private rts: RuntimeStateService,\r\n    public dialogSer: DialogService,\r\n    public ngZone: NgZone\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.apply();\r\n  }\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.apply();\r\n  }\r\n  ngOnDestroy() {\r\n    this.detach();\r\n  }\r\n  /**\r\n   * åºç¨å±æ§\r\n   */\r\n  private apply() {\r\n    if (!this.grid) {\r\n      return;\r\n    }\r\n    this.handleGroupStatus();\r\n    if (this.gridEditable) {\r\n      // if(!this.grid.remoteFilter){\r\n      //   this.grid.clearCondition();\r\n      // }\r\n      this.grid.editable = true;\r\n      this.grid.disableHeader(true);\r\n      this.handleBeginEditEvent();\r\n      this.handleAfterEditEvent();\r\n      this.handleEndEditEvent();\r\n    } else {\r\n      this.grid.editable = false;\r\n      this.grid.disableHeader(false);\r\n      if (this.grid && typeof this.grid.sort === 'function' && this.grid.sortName) {\r\n        this.grid.sort();\r\n      }\r\n      this.detach();\r\n    }\r\n  }\r\n  /**\r\n   * ç¼è¾æ¶åæ¶åç»\r\n   */\r\n  private handleGroupStatus() {\r\n    if (this.disableGroupOnEditing === false) {\r\n      return;\r\n    }\r\n    const groupField = this.grid && this.grid.groupField || null;\r\n    if (groupField) {\r\n      if (this.gridEditable) {\r\n        this.groupFields = [groupField];\r\n        this.grid.setGroupFields('');\r\n      }\r\n    } else {\r\n      if (this.groupFields && this.groupFields.length > 0) {\r\n        const groupField = this.groupFields.pop();\r\n        if (this.groupFields.length > 0) {\r\n          this.groupFields = [];\r\n        }\r\n        this.grid.setGroupFields(groupField);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * å¤çå¼å§ç¼è¾äºä»¶\r\n   */\r\n  private handleBeginEditEvent() {\r\n    this.beginEditSubscription = this.grid.beginEdit.subscribe((e: any) => {\r\n      if (!e) {\r\n        return;\r\n      }\r\n      const column = e.column;\r\n      if (column && column.editor) {\r\n        const editorInstance = e.editor.componentRef.instance;\r\n        if (!editorInstance || !editorInstance.instance) {\r\n          return;\r\n        }\r\n        let mapFields = editorInstance.instance.mapFields;\r\n        if (column.editor.type === 'lookup' || column.editor.type === 'PersonnelSelector'\r\n          || column.editor.type === 'OrganizationSelector' || column.editor.type === 'external-integration' || 'EmployeeSelector' === column.editor.type || 'EmployeeOrgSelector' === column.editor.type) {\r\n          const subject = editorInstance.instance.selectedData;\r\n          if (subject) {\r\n            subject.subscribe((data: any) => {\r\n              mapFields = editorInstance.instance.mapFields;\r\n              this.lookupMapping(data, mapFields);\r\n            });\r\n          }\r\n          const clearMappings = editorInstance.instance.clearMappings;\r\n          if (clearMappings) {\r\n            clearMappings.subscribe((result: any) => {\r\n              const mapFields = Object.assign({}, editorInstance.instance.mapFields);\r\n              const value = result && result.value || null;\r\n              const binding = editorInstance.column && editorInstance.column.field;\r\n              const lookupTextField = editorInstance.instance.textField;\r\n              const data = {};\r\n              if (binding) {\r\n                const textFieldMapping = mapFields[lookupTextField];\r\n                if (textFieldMapping) {\r\n                  mapFields[lookupTextField] = textFieldMapping.split(',').filter(item => item !== binding).join(',');\r\n                }\r\n                const parentPaths = this.getBindingPathArray();\r\n                this.bindingData.setValue(parentPaths.concat(binding.split('.')), value, true, true);\r\n              }\r\n              // this.setValue(data, lookupTextField.split('.'), value);\r\n              Object.keys(mapFields).forEach(field => {\r\n                this.setValue(data, field.split('.'), '');\r\n              });\r\n              this.lookupMapping(data, mapFields, true);\r\n            });\r\n          }\r\n        }\r\n\r\n        if (column.editor.type === 'combo-lookup') {\r\n          editorInstance.instance.valueChange.subscribe((e: any) => {\r\n            mapFields = editorInstance.instance.mapFields;\r\n            this.lookupMapping(e.selections || [], mapFields);\r\n          });\r\n        }\r\n        if (['combo-lookup', 'combolist', 'lookup', 'PersonnelSelector', 'OrganizationSelector', 'external-integration', 'EmployeeSelector', 'EmployeeOrgSelector'].includes(column.editor.type)) {\r\n          if (editorInstance.instance.clear && editorInstance.instance.clear.subscribe) {\r\n            editorInstance.instance.clear.subscribe(() => {\r\n              this.lookupMapping(null, mapFields);\r\n            });\r\n          }\r\n        }\r\n\r\n        if (column.editor.type === 'combolist') {\r\n          if (mapFields) {\r\n            editorInstance.instance.valueChange.subscribe(e => {\r\n              const pathArr = this.getBindingPathArray();\r\n              this.viewModel.bindingData.setValue(pathArr.concat(mapFields.split('.')), editorInstance.instance.selectedValues, true, true);\r\n            })\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * å¤çç¼è¾äºä»¶\r\n   */\r\n  private handleAfterEditEvent() {\r\n    this.grid.afterEdit = (rowIndex, rowData, column, editor) => {\r\n      if (this.dialogSer.hasDialogOpened()) {\r\n        return of(false);\r\n      }\r\n      if (this.rts) {\r\n        // å¸®å©ç»ä»¶ææ¬åååå»æ¥è¯¢\r\n        if (this.rts.getFormState('lookup.pending')) {\r\n          return of(false);\r\n        }\r\n      }\r\n      // æ´æ°æ°æ®æº\r\n      if (!editor || !editor.formControl) {\r\n        return of(false);\r\n      }\r\n      return of(true);\r\n    };\r\n  }\r\n  /**\r\n   * å¤çç»æç¼è¾äºä»¶\r\n   */\r\n  private handleEndEditEvent() {\r\n    this.endEditSubscription = this.grid && this.grid.endEdit && this.grid.endEdit.subscribe((event: any) => {\r\n      const { value = undefined, column = undefined, rowData = {} } = event || {};\r\n      const primaryValue = rowData && rowData[this.grid.idField] || null;\r\n      this.updateBindingData(value, column, primaryValue);\r\n    });\r\n  }\r\n  /*\r\n   * ç»åè¡¨èµå¼ æç»formcontrolèµå¼\r\n   */\r\n  private updateBindingData(value: any, column: any, primaryValue?: any) {\r\n    if (!column) {\r\n      return;\r\n    }\r\n    const currentColumnType = column.dataType;\r\n    // åæ¶å¤æ­gridOptionçåå¯¹è±¡\r\n\r\n    const fieldPaths = column.field.split('.');\r\n    // æ¯å¦ä¸ºå¤§æ°\r\n    const isBigNumber = column && column.editor && column.editor.options && column.editor.options.bigNumber;\r\n    // å­å¨è¡ç¼è¾å¨\r\n    if (currentColumnType === 'date') {\r\n      let result;\r\n      if (value) {\r\n        result = this.dateService.formatTo(value, 'yyyy-MM-dd');\r\n      } else {\r\n        result = value;\r\n      }\r\n      this.updateBindingList(primaryValue, fieldPaths.join('.'), result);\r\n    } else if (currentColumnType === 'datetime') {\r\n      // if (!value) {\r\n      //   value = '0001-01-01T00:00:00';\r\n      // }\r\n      this.updateBindingList(primaryValue, fieldPaths.join('.'), value);\r\n    } else if (currentColumnType === 'number' && !isBigNumber) {\r\n      if (value === null || value === undefined) {\r\n        this.updateBindingList(primaryValue, fieldPaths.join('.'), null);\r\n      } else {\r\n        this.updateBindingList(primaryValue, fieldPaths.join('.'), Number(value));\r\n      }\r\n    } else {\r\n      this.updateBindingList(primaryValue, fieldPaths.join('.'), value);\r\n    }\r\n  }\r\n  private updateBindingList(primaryValue: any, propertyName: string, value: any) {\r\n    const viewModel = this.viewModel || null;\r\n    if (!viewModel || !propertyName) {\r\n      return;\r\n    }\r\n    // æ´æ°ä¸»è¡¨é¨åè¡çå­æ®µ\r\n    const propertyNames = propertyName.split('.').filter(item => item);\r\n    const bindingPath = this.getBindingPathArray();\r\n    // ååºæ¥çä¸å®æ¯bindingList\r\n    const list = this.bindingData.getValue(bindingPath) as BindingList;\r\n    // ä¿®æ¹çæ¯å½åè¡\r\n    if (list && primaryValue === list.currentItem.primaryKeyValue) {\r\n      const paths = bindingPath.concat(propertyNames);\r\n      this.bindingData.setValue(paths, value, true, true);\r\n      return;\r\n    }\r\n    const bindingObject = this.bindingList.findById(primaryValue);\r\n    if (!bindingObject) {\r\n      return;\r\n    }\r\n    if (propertyNames.length < 2) {\r\n      bindingObject.setValue(propertyName, value, true, true);\r\n    } else {\r\n      let targetBindingObject = null;\r\n      const fpaths = propertyNames.slice(0, propertyNames.length - 1);\r\n      const targetPropertyName = propertyNames[propertyNames.length - 1];\r\n      fpaths.forEach(prop => {\r\n        targetBindingObject = targetBindingObject && targetBindingObject[prop] || bindingObject[prop];\r\n      });\r\n      // todo:éè¦æ·»å å¼ååäºä»¶\r\n      targetBindingObject.setValue(targetPropertyName, value, true, true);\r\n    }\r\n  }\r\n  private detach() {\r\n    if (this.beginEditSubscription && typeof this.beginEditSubscription.unsubscribe === 'function') {\r\n      this.beginEditSubscription.unsubscribe();\r\n    }\r\n    if (this.endEditSubscription && typeof this.endEditSubscription.unsubscribe === 'function') {\r\n      this.endEditSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  //#region å¸®å©å­æ®µæ å°\r\n\r\n  private lookupMapping(helpData: any, mapFields: any, asClear: boolean = false) {\r\n    if (!mapFields) {\r\n      return;\r\n    }\r\n    // å³é­åæ´æ£æµ\r\n    const appContext = this.viewModel.frameContext.appContext;\r\n    appContext.changeDetectionController.detach();\r\n\r\n    const pathArr = this.getBindingPathArray();\r\n    let helpFields = Object.keys(mapFields);\r\n    const primaryInfo = this.getMapFieldsPrimaryKey(mapFields, pathArr);\r\n\r\n    let primaryKeys = primaryInfo && primaryInfo.map(item => item.primaryKey) || [];\r\n    const primaryFields = primaryInfo && primaryInfo.map(item => item.primaryField) || [];\r\n    // å»é\r\n    if (primaryKeys && primaryKeys.length > 0) {\r\n      primaryKeys = [...new Set(primaryKeys)];\r\n      helpFields = this.sortMapFieldKeys(helpFields, primaryKeys);\r\n    }\r\n\r\n    if (!helpData || asClear) {\r\n      helpFields.reverse();\r\n    }\r\n    helpFields.forEach((f: any) => {\r\n      let val: any = '';\r\n      if (helpData) {\r\n        if (helpData instanceof Array) {\r\n          val = helpData.map((h: any) => {\r\n            return this.getValue(f, h);\r\n          }).join(',');\r\n        } else {\r\n          val = this.getValue(f, helpData);\r\n        }\r\n      }\r\n\r\n      let mappings: any[] = mapFields[f].split(',');\r\n      const headMappings = mappings.filter(p => primaryFields.includes(p));\r\n      const leftMappings = mappings.filter(p => !primaryFields.includes(p));\r\n      if (!helpData) {\r\n        mappings = [].concat(leftMappings).concat(headMappings);\r\n      } else {\r\n        mappings = [].concat(headMappings).concat(leftMappings);\r\n      }\r\n      mappings.forEach((ff: any) => {\r\n        if (!helpData) {\r\n          this.viewModel.bindingData.clearValue(pathArr.concat(ff.split('.')), true, true);\r\n        } else {\r\n          this.viewModel.bindingData.setValue(pathArr.concat(ff.split('.')), val, true, true);\r\n        }\r\n      });\r\n    });\r\n\r\n    // éæ°æå¼åæ´æ£æµ\r\n    appContext.changeDetectionController.reattach();\r\n  }\r\n\r\n  private getValue(f: string, data: any) {\r\n    let val = '';\r\n    if (f.indexOf('.') === -1) {\r\n      val = data[f];\r\n    } else {\r\n      val = f.split('.').reduce((a, b) => {\r\n        return a[b];\r\n      }, data);\r\n    }\r\n\r\n    return val;\r\n  }\r\n\r\n  private getBindingPathArray(): any[] {\r\n    const path = this.viewModel.bindingPath;\r\n    if (path) {\r\n      return path.split('/').filter(n => n !== '');\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private isNumberValue(field, data) {\r\n    const currentVal = this.getValue(field, data);\r\n    return isNumber(currentVal);\r\n  }\r\n\r\n  //#endregion\r\n  /**\r\n   * \r\n   * @param mapFields  æ ¼å¼å½¢å¦ï¼{id: \"assoField.assoField\", code: \"assoField.assoField_Code\", name: \"assoField.assoField_Name\"} æè {id:'vid',code:'code',name:'name'}\r\n   */\r\n  private getMapFieldsPrimaryKey(mapFields: any, bindingPaths: string[]): Array<{ primaryKey: string, primaryField: string }> {\r\n    if (!mapFields || Object.keys(mapFields).length < 1) {\r\n      return null;\r\n    }\r\n    const results = [];\r\n    // let primaryField = null;\r\n    try {\r\n      const entityTypeInfo: DataTypeInfo = this.viewModel.frameContext.repository.entityTypeInfo;\r\n      Object.keys(mapFields).forEach((key: string) => {\r\n        const mapField = mapFields[key];\r\n        if (mapField && typeof mapField === 'string') {\r\n          const mappings = mapField.split(',').filter(p => p);\r\n          mappings.forEach((item: string) => {\r\n            let paths = item.split('.');\r\n            if (bindingPaths && bindingPaths.length > 0) {\r\n              paths = bindingPaths.concat(paths);\r\n            }\r\n            const propInfo: DataPropInfo = entityTypeInfo.getPropInfoByPath(paths);\r\n            if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.primary === true) {\r\n              results.push({\r\n                primaryKey: key,\r\n                primaryField: item\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    return results;\r\n  }\r\n  private setValue(target: object, paths: string[], value: any) {\r\n    if (target) {\r\n      if (paths.length <= 1) {\r\n        target[paths[0]] = value;\r\n      } else {\r\n        paths.slice(0, -1).reduce((prev, path) => {\r\n          if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {\r\n            prev[path] = {};\r\n          }\r\n          return prev[path];\r\n        }, target)[paths[paths.length - 1]] = value;\r\n      }\r\n    }\r\n  }\r\n  private sortMapFieldKeys(keys: string[], primaryKeys: string[]): string[] {\r\n    if (!primaryKeys || primaryKeys.length < 1 || !keys || keys.length < 1) {\r\n      return keys;\r\n    }\r\n    // è¿æ»¤åºéä¸»é®æ å°å­æ®µ\r\n    keys = keys.filter(p => !primaryKeys.includes(p));\r\n    return [].concat(primaryKeys).concat(keys);\r\n  }\r\n}\r\n","import { AppContext } from '@farris/devkit';\r\nimport { Subject } from 'rxjs';\r\nimport { OnDestroy } from '@angular/core';\r\n\r\nabstract class AbstractEndEdit implements OnDestroy {\r\n  private messagePipe: Subject<any>;\r\n  constructor(protected appContext: AppContext) {\r\n    this.messagePipe = this.appContext && this.appContext.messagePipe;\r\n    if (this.messagePipe) {\r\n      this.messagePipe.subscribe((message: any) => {\r\n        if (message && message.type === 'endEdit') {\r\n          this.endEdit(message);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n    // if (this.messagePipe) {\r\n    //   this.messagePipe.unsubscribe();\r\n    // }\r\n  }\r\n  public abstract endEdit(message: any);\r\n}\r\nexport { AbstractEndEdit };\r\n","import { Directive, ElementRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { AppContext } from '@farris/devkit';\r\nimport { AbstractEndEdit } from './abstract_end_edit';\r\n\r\n@Directive({\r\n  selector: '[input-end-edit]'\r\n})\r\nclass InputEndEditDirective extends AbstractEndEdit implements OnInit {\r\n  private nativeElement: any;\r\n  constructor(protected appContext: AppContext, private elementRef: ElementRef) {\r\n    super(appContext);\r\n  }\r\n  ngOnInit(): void {\r\n    if (this.elementRef) {\r\n      this.nativeElement = this.elementRef.nativeElement;\r\n    }\r\n  }\r\n  /**\r\n   * ç»æç¼è¾\r\n   * @param message æ¶æ¯\r\n   */\r\n  public endEdit(message: any) {\r\n    if (this.nativeElement) {\r\n      const parent: any = this.nativeElement.parentNode || this.nativeElement.parentElement;\r\n      const inputs: Array<any> = parent && Array.from(parent.getElementsByTagName('input')) || [];\r\n      if (inputs && inputs.length > 0) {\r\n        inputs.forEach(input => {\r\n          if (input && typeof (input.blur) === 'function') {\r\n            input.blur();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\nexport { InputEndEditDirective };\r\n","import { Directive } from '@angular/core';\r\nimport { AppContext } from '@farris/devkit';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\nimport { AbstractEndEdit } from './abstract_end_edit';\r\n\r\n@Directive({\r\n  selector: '[farris-grid-end-edit]'\r\n})\r\nclass FarrisDataGridEndEditDirective extends AbstractEndEdit {\r\n  constructor(protected appContext: AppContext, private datagrid: DatagridComponent) {\r\n    super(appContext);\r\n  }\r\n  /**\r\n   * ç»æç¼è¾\r\n   * @param message message\r\n   */\r\n  public endEdit(message: any) {\r\n    if (this.datagrid && typeof this.datagrid.endCellEdit === 'function') {\r\n      this.datagrid.endCellEdit();\r\n    }\r\n  }\r\n}\r\nexport { FarrisDataGridEndEditDirective };\r\n","import { AppContext } from '@farris/devkit';\r\nimport { HtmlEditorComponent } from '@farris/ui-html-editor';\r\nimport { AbstractEndEdit } from './abstract_end_edit';\r\nimport { Directive } from '@angular/core';\r\n@Directive({\r\n  selector: '[html-editor-end-edit]'\r\n})\r\nclass HtmlEditorEndEditDirective extends AbstractEndEdit {\r\n  constructor(protected appContext: AppContext, private editor: HtmlEditorComponent) {\r\n    super(appContext);\r\n  }\r\n  public endEdit(message: any) {\r\n    if (this.editor && typeof this.editor.endEdit === 'function') {\r\n      this.editor.endEdit();\r\n    }\r\n  }\r\n\r\n}\r\nexport { HtmlEditorEndEditDirective };\r\n","import { Directive } from '@angular/core';\r\nimport { AppContext } from '@farris/devkit';\r\nimport { GridComponent } from '@progress/kendo-angular-grid';\r\nimport { AbstractEndEdit } from './abstract_end_edit';\r\n\r\n@Directive({\r\n  selector: '[kendo-grid-end-edit]'\r\n})\r\nclass KendoGridEndEditDirective extends AbstractEndEdit {\r\n  constructor(protected appContext: AppContext, private grid: GridComponent) {\r\n    super(appContext);\r\n  }\r\n  public endEdit(message: any) {\r\n    if (this.grid && typeof this.grid.closeCell === 'function') {\r\n      this.grid.closeCell();\r\n    }\r\n  }\r\n}\r\nexport { KendoGridEndEditDirective };\r\n","import { Directive, Input } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ViewModel } from '@farris/devkit';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\n\r\n\r\n@Directive({\r\n  selector: \"[farris-remote-summary-command]\"\r\n})\r\nexport class FarrisDataGridRemoteSummaryDirective {\r\n  /**\r\n   * æå¡å¨ç«¯åè®¡å½ä»¤åç§°\r\n   */\r\n  @Input('farris-remote-summary-command') remoteSummaryCommand: string;\r\n\r\n  constructor(public viewModel: ViewModel, public grid: DatagridComponent) {\r\n    const appContext = this.viewModel.frameContext.getFormAppContext();\r\n    if (appContext && appContext.hasOwnProperty('messagePipe')) {\r\n      appContext.messagePipe.subscribe((message: any) => {\r\n        const messageType = message && message.type || null;\r\n        // æ¥è¯¢äºä»¶\r\n        if (messageType === 'query') {\r\n          if (this.remoteSummaryCommand && this.grid.footerDataFrom === 'server') {\r\n            const paths = this.remoteSummaryCommand.split('.');\r\n            let func = null;\r\n            paths.forEach(path => {\r\n              func = func && func[path] || this[path];\r\n            });\r\n            if (typeof func === 'function') {\r\n              func().subscribe(result => {\r\n                this.grid.footerData = result;\r\n              });\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * æ§è¡å½ä»¤\r\n   * @param commandName å½ä»¤åç§°\r\n   * @param frameId frameId\r\n   */\r\n  private execute(commandName: string, frameId?: string): Observable<any> {\r\n    if (!commandName || commandName === '' || commandName === 'undefined') {\r\n      return;\r\n    }\r\n    let viewModel = this.viewModel;\r\n    if (frameId) {\r\n      const targetContext = viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);\r\n      viewModel = targetContext.viewModel;\r\n    }\r\n    return viewModel[commandName]();\r\n  }\r\n\r\n}\r\n","import { Directive, Input, Renderer2, Injector, OnInit, ElementRef } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Directive({\r\n    selector: '[farris-set-focus]'\r\n})\r\nexport class FarrisSetFocusDirective implements OnInit {\r\n\r\n    @Input() set focusState(value: boolean) {\r\n        this._state.next(value);\r\n    }\r\n    private selfEl: HTMLElement\r\n    private _state: BehaviorSubject<any> = new BehaviorSubject({});\r\n\r\n    constructor(\r\n        private rd: Renderer2,\r\n        private injector: Injector,\r\n        private el: ElementRef\r\n    ) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.selfEl = this.el.nativeElement;\r\n        this._state.subscribe(data => {\r\n            if (data === false && this.selfEl) {\r\n                if (this.selfEl.nodeName.toLowerCase() === 'farris-html-editor') {\r\n                    this.setHtmlEditorFocus();\r\n                } else {\r\n                    this.setFocus();\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * è®¾ç½®ä¸è¬è¾å¥æ¡çé»è®¤ç¦ç¹\r\n     */\r\n    setFocus() {\r\n        const input = this.selfEl.querySelectorAll('input');\r\n        if (input.length) {\r\n            input[0].focus()\r\n        } else {\r\n            this.selfEl.focus();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * è®¾ç½®htmlç¼è¾å¨çé»è®¤ç¦ç¹  æ»æ¯å¨ææ¬æå\r\n     */\r\n    setHtmlEditorFocus() {\r\n        // å¯ææ¬ç¼è¾å¨ä¸æ¯input\r\n        const ediotrArea = this.selfEl.querySelector('div[contenteditable=\"true\"]');\r\n        //åå»ºrange  å­å¨æµè§å¨å¼å®¹æ§é®é¢\r\n        const range = window.getSelection();\r\n        //range éæ©objä¸ææå­åå®¹\r\n        range.selectAllChildren(ediotrArea);\r\n        //åæ ç§»è³æå\r\n        range.collapseToEnd();\r\n    }\r\n}","import { Directive, OnInit, OnChanges, SimpleChanges, Input, Injector, Optional } from '@angular/core';\r\nimport { BindingData, BindingList, FrameContext, Change, ChangeType } from '@farris/devkit';\r\nimport { UploadFile, FFilePreviewComponent, UploadAndPreviewComponent } from '@farris/extend-file-upload';\r\n\r\n/**\r\n * æ è¡¨æ ¼ç»å®æä»¤\r\n */\r\n@Directive({\r\n  selector: '[farrisFilePreviewBinding]'\r\n})\r\nclass FarrisFilePreviewBindingDirective implements OnInit, OnChanges {\r\n\r\n  @Input('extendFileInfo')\r\n  public extendFileInfo: { key: string, path: any }[];\r\n  /**\r\n   * æä»¶idå­æ®µè·¯å¾\r\n   */\r\n  @Input('farrisFileIdKey')\r\n  public fileIdKey: string;\r\n  /**\r\n   * æåºå­æ®µ\r\n   */\r\n  @Input('farrisFileSortOrderKey')\r\n  public fileSortOrderKey: string;\r\n  /**\r\n   * æä»¶nameå­æ®µè·¯å¾\r\n   */\r\n  @Input('farrisFileNameKey')\r\n  public fileNameKey: string;\r\n\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  /**\r\n   * ç»å®æ°æ®åè¡¨\r\n   */\r\n  private get bindingList(): BindingList {\r\n    return this.bindingData.getList();\r\n  }\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    @Optional() private previewComponent: FFilePreviewComponent,\r\n    private frameContext: FrameContext,\r\n    @Optional() private uploadAndPreviewComponent: UploadAndPreviewComponent,\r\n    @Optional() private injector: Injector\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * æä»¤åå§å\r\n   */\r\n  ngOnInit() {\r\n    this.bindData();\r\n    if (this.uploadAndPreviewComponent) {\r\n      this.uploadAndPreviewComponent.orderField = 'fileSortOrder';\r\n    }\r\n    this.bindingData.changes.subscribe((change: Change) => {\r\n      if (change.type === ChangeType.Load\r\n        || change.type === ChangeType.Append\r\n        || change.type === ChangeType.Remove\r\n      ) {\r\n        this.bindData();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * æä»¤è¾å¥åæ´\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n  }\r\n\r\n\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private bindData() {\r\n    const fileInfos = this.getFileInfos();\r\n    if (this.componentRef) {\r\n      this.componentRef.fileInfos = fileInfos;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è·åéä»¶ä¿¡æ¯åè¡¨\r\n   */\r\n  private getFileInfos(): UploadFile[] {\r\n    const listData = this.bindingList.toJSON();\r\n    const idKey = this.bindingList.primaryKey;\r\n    const fileInfos: UploadFile[] = [];\r\n\r\n    listData.forEach((itemData: any) => {\r\n      const id = this.getValueByPath(itemData, idKey);\r\n      const fileId = this.getValueByPath(itemData, this.fileIdKey);\r\n      const fileName = this.getValueByPath(itemData, this.fileNameKey);\r\n      const fileSize = this.getValueByPath(itemData, this.fileSizeKey);\r\n      const fileCreateTime = this.getValueByPath(itemData, this.fileCreateTimeKey);\r\n\r\n      const fileInfo: any = {\r\n        id: fileId,\r\n        name: fileName,\r\n        size: fileSize,\r\n        createTime: fileCreateTime,\r\n        originalData: itemData,\r\n        extend: {\r\n          metadataId: fileId\r\n        }\r\n      };\r\n      if (this.extendFileInfo && Array.isArray(this.extendFileInfo) && this.extendFileInfo.length > 0) {\r\n        this.extendFileInfo.forEach(item => {\r\n          fileInfo[item.key] = this.getValueByPath(itemData, item.path);\r\n        });\r\n      }\r\n      if (this.fileSortOrderKey) {\r\n        const fileSortOrder = this.getValueByPath(itemData, this.fileSortOrderKey);\r\n        fileInfo.fileSortOrder = fileSortOrder;\r\n      }\r\n      fileInfos.push(fileInfo);\r\n    });\r\n\r\n    return fileInfos;\r\n  }\r\n\r\n  /**\r\n   * æ ¹æ®å­æ®µè·¯å¾è·åå¼\r\n   */\r\n  private getValueByPath(data: any, path: string): any {\r\n    const keys = path.split('.');\r\n    let currentValue = data;\r\n    keys.forEach((key: string) => {\r\n      currentValue = currentValue && currentValue[key];\r\n    });\r\n    return currentValue;\r\n  }\r\n  private getUdtPaths(): string[] {\r\n    const paths = this.fileIdKey.split('.');\r\n    paths.pop();\r\n    return paths;\r\n  }\r\n  private get fileSizeKey() {\r\n    const basePaths = this.getUdtPaths();\r\n    return basePaths.concat(['fileSize']).join('.');\r\n  }\r\n  private get fileCreateTimeKey() {\r\n    const basePaths = this.getUdtPaths();\r\n    return basePaths.concat(['fileCreateTime']).join('.');\r\n  }\r\n  private get componentRef() {\r\n    return this.previewComponent || this.uploadAndPreviewComponent || null;\r\n  }\r\n}\r\n\r\nexport { FarrisFilePreviewBindingDirective };\r\n","import { Directive, Injector, Input, OnInit, HostListener } from '@angular/core';\r\nimport { DiscussionEditorComponent } from '@farris/discussion-group';\r\nimport { ViewModel, UIStateObservableParam } from '@farris/devkit';\r\nimport { of, Observable, EMPTY } from 'rxjs';\r\nimport { tap, catchError } from 'rxjs/operators';\r\nconst KEY_UISTATE_REPLY_MESSAGE = 'DISCUSSION_REPLY_MESSAGE_INFO';\r\nconst KEY_MESSAGE_ON_COMMENT_ADD = 'onCommentAdd';\r\n\r\n@Directive({\r\n  selector: '[farris-discussion-editor-binding]'\r\n})\r\nexport class FarrisDiscussionEditorBindingDirective implements OnInit {\r\n\r\n  /**\r\n   * è·åç¨æ·å½ä»¤\r\n   */\r\n  @Input(\"userQueryCommand\") userQueryCommand: string;\r\n  /**\r\n   * æ·»å è¯è®ºå½ä»¤\r\n   */\r\n  @Input(\"addCommentCommand\") addCommentCommand: string;\r\n  /**\r\n   * æ¥è¯¢ææé¨é¨å½ä»¤\r\n   */\r\n  @Input(\"queryAllOrgsCommand\") queryAllOrgsCommand: string;\r\n  /**\r\n   * æ¥è¯¢å¸¸ç¨@ç¨æ·\r\n   */\r\n  @Input(\"queryFrequentAtUsersCommand\") queryFrequentAtUsersCommand: string;\r\n\r\n  constructor(public injector: Injector, public discussionEditorComponent: DiscussionEditorComponent, public viewModel: ViewModel) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.discussionEditorComponent.replyUser = this.viewModel.frameContext.root.viewModel.uiState[KEY_UISTATE_REPLY_MESSAGE] || {};\r\n    this.viewModel.frameContext.root.viewModel.uiState.changes.subscribe((change: UIStateObservableParam) => {\r\n      if (change.field === KEY_UISTATE_REPLY_MESSAGE) {\r\n        this.discussionEditorComponent.replyUser = this.viewModel.frameContext.root.viewModel.uiState[KEY_UISTATE_REPLY_MESSAGE] || {};\r\n      }\r\n    });\r\n    if (this.queryFrequentAtUsersCommand) {\r\n      this.queryFrequentAtUsers();\r\n    } else {\r\n      this.queryAtUsers();\r\n    }\r\n\r\n    this.queryAllOrgs();\r\n  }\r\n  /**\r\n   * æ¥è¯¢ææé¨é¨æ°æ®\r\n   */\r\n  private queryAllOrgs() {\r\n    this.execute(this.queryAllOrgsCommand).subscribe(result => {\r\n      if (!result) {\r\n        return;\r\n      }\r\n      this.discussionEditorComponent.sectionData = result;\r\n    });\r\n  }\r\n  /**\r\n   * è·å@ç¨æ·\r\n   */\r\n  private queryAtUsers() {\r\n    this.execute(this.userQueryCommand).subscribe(result => {\r\n      if (!result) {\r\n        return;\r\n      }\r\n      const { users = [] } = result;\r\n      this.discussionEditorComponent.personnels = users;\r\n    });\r\n  }\r\n  /**\r\n   * è·åå¸¸ç¨@ç¨æ·\r\n   */\r\n  private queryFrequentAtUsers() {\r\n    this.execute(this.queryFrequentAtUsersCommand).subscribe(result => {\r\n      if (!result) {\r\n        return;\r\n      }\r\n      this.discussionEditorComponent.personnels = result && result.users || [];\r\n    });\r\n  }\r\n  /**\r\n   * æäº¤æåæ¶è¯è®º\r\n   * @param event event\r\n   */\r\n  @HostListener('valueChange', ['$event'])\r\n  public pageChangedHandler(event: any) {\r\n    const { msgInfo = 0, text = '', visibility = 'ALL', parentId = null } = event || {};\r\n    if (msgInfo === 1) {\r\n      this.execute(this.addCommentCommand, { text, parentId, visibility }).pipe(\r\n        tap(() => {\r\n          this.viewModel.frameContext.appContext.messagePipe.next(KEY_MESSAGE_ON_COMMENT_ADD);\r\n        }),\r\n        catchError(e => EMPTY)\r\n      ).subscribe();\r\n    } else {\r\n      // åæ¶çæ¶ååæ¶ä¼å°åå¤ç¨æ·æ¸ç©º\r\n      this.viewModel.frameContext.root.viewModel.uiState[KEY_UISTATE_REPLY_MESSAGE] = {};\r\n      this.discussionEditorComponent.replyUser = {};\r\n    }\r\n  }\r\n  /**\r\n   * æ§è¡å½ä»¤\r\n   * @param commandName å½ä»¤åç§°\r\n   */\r\n  private execute(commandName: string, params?: any): Observable<any> {\r\n    if (!commandName || commandName === '' || commandName === 'undefined') {\r\n      return of(null);\r\n    }\r\n    if (typeof params === 'undefined') {\r\n      params = {};\r\n    }\r\n    const paths = commandName.split('.');\r\n    let func = null;\r\n    paths.forEach(path => {\r\n      func = func && func[path] || this[path];\r\n    });\r\n    if (typeof func === 'function') {\r\n      return func(params);\r\n    }\r\n    return of(null);\r\n  }\r\n}\r\n","import { Observable, of, EMPTY } from 'rxjs';\r\nimport { Directive, Input, Injector, OnInit, HostListener } from '@angular/core';\r\nimport { DiscussionListComponent, DiscussionListDirective } from '@farris/discussion-group';\r\nimport { ViewModel, Change, ChangeType } from '@farris/devkit';\r\nimport { tap, catchError } from 'rxjs/operators';\r\nconst KEY_UISTATE_REPLY_MESSAGE = 'DISCUSSION_REPLY_MESSAGE_INFO';\r\nconst KEY_MESSAGE_ON_COMMENT_ADD = 'onCommentAdd';\r\n@Directive({\r\n  selector: '[farris-discussion-list-binding]'\r\n})\r\nexport class FarrisDiscussionListBindingDirective implements OnInit {\r\n  /**\r\n   * è·åç¨æ·å½ä»¤\r\n  */\r\n  @Input(\"commentsQueryCommand\") commentsQueryCommand: string;\r\n  constructor(public injector: Injector, public discussionListComponent: DiscussionListComponent, public viewModel: ViewModel, public discussionListDirective: DiscussionListDirective) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    this.viewModel.frameContext.appContext.messagePipe.subscribe((message: any) => {\r\n      if (message === KEY_MESSAGE_ON_COMMENT_ADD) {\r\n        this.queryComments();\r\n      }\r\n    });\r\n    this.viewModel.bindingData.changes.subscribe((change: Change) => {\r\n      if (change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged) {\r\n        this.queryComments();\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * æ¥è¯¢è¯è®º\r\n   */\r\n  private queryComments(pageIndex?: number, pageSize?: number) {\r\n    if (typeof pageIndex === 'undefined') {\r\n      pageIndex = (this.discussionListComponent.pageIndex - 1) || 0;\r\n    }\r\n    if (typeof pageSize === 'undefined') {\r\n      if (this.discussionListComponent.supportPaging) {\r\n        pageSize = this.discussionListComponent.pageSize;\r\n      } else {\r\n        // ä¸åé¡µï¼pageSizeååç«¯çº¦å®ä¼ æå¤§æ°\r\n        pageSize = 10000;\r\n      }\r\n    }\r\n    this.execute(this.commentsQueryCommand, { pageIndex, pageSize }).pipe(\r\n      catchError(e => EMPTY)\r\n    ).subscribe(result => {\r\n      if (!result) {\r\n        return;\r\n      }\r\n      const { comments = [], pageIndex = 0, pageSize = 10, totalCount = 0 } = result;\r\n      this.discussionListComponent.pageIndex = parseInt(pageIndex) + 1;\r\n      if (this.discussionListComponent.supportPaging) {\r\n        this.discussionListComponent.pageSize = pageSize;\r\n      }\r\n      this.discussionListComponent.total = totalCount;\r\n      this.discussionListDirective.discussionListData = result;\r\n    });\r\n  }\r\n  /**\r\n   * åå¤æ¶æ¯\r\n   * @param event event\r\n   */\r\n  @HostListener('replyMessage', ['$event'])\r\n  public replyMessagedHandler(event: any) {\r\n    this.viewModel.frameContext.root.viewModel.uiState.setPropertyValue(KEY_UISTATE_REPLY_MESSAGE, event);\r\n  }\r\n  /**\r\n   * åæ¢é¡µç \r\n   * @param event event\r\n   */\r\n  @HostListener('pageChanged', ['$event'])\r\n  public pageChangedHandler(event: any) {\r\n    const { pageIndex = 1, pageSize = 10 } = event.pageInfo || {};\r\n    this.queryComments(pageIndex - 1, pageSize);\r\n  }\r\n  /**\r\n   * æ§è¡å½ä»¤\r\n   * @param commandName å½ä»¤åç§°\r\n   */\r\n  private execute(commandName: string, params?: any): Observable<any> {\r\n    if (!commandName || commandName === '' || commandName === 'undefined') {\r\n      return of(null);\r\n    }\r\n    const paths = commandName.split('.');\r\n    let func = null;\r\n    paths.forEach(path => {\r\n      func = func && func[path] || this[path];\r\n    });\r\n    if (typeof func === 'function') {\r\n      return func(params);\r\n    }\r\n    return of(null);\r\n  }\r\n}\r\n","/*******************************************************************************************************************\r\n *                                     FarrisPrimengTreeTableBindingDirectiveæä»¤è¯´æ                               *\r\n * *****************************************************************************************************************\r\n * \r\n * 1. ä¾èµprimengçæ¬: primeng:^9.0.0,primeicons:^4.0.0\r\n * \r\n * 2. ç±äºå¯ç¼è¾æ è¡¨æ æ³è§¦åç¼è¾ååæ ¼çå³é­äºä»¶onEditCompleteï¼å æ­¤å¯¹priemengçnode_modules\\primeng\\fesm5\\primeng-treetable.jsèæ¬ä½åºä¿®æ¹ï¼ \r\n *    æºç ä¿®æ¹å¦ä¸ï¼+è¡¨ç¤ºæ°å¢å çèæ¬è¯­å¥:\r\n * \r\n *  TreeTable.prototype.updateEditingCell = function (cell, data, field) { //+ åæ°å¢å dataåfield\r\n *      this.editingCell = cell;\r\n *      this.editingCellData = data; //+\r\n *      this.editingCellField = field; //+\r\n *      this.bindDocumentEditListener();\r\n *  };\r\n * \r\n *  TreeTable.prototype.bindDocumentEditListener = function () {\r\n *       var _this = this;\r\n *       if (!this.documentEditListener) {\r\n *           this.documentEditListener = function (event) {\r\n *               if (_this.editingCell && !_this.editingCellClick && _this.isEditingCellValid()) {\r\n *                   domhandler_1.DomHandler.removeClass(_this.editingCell, 'ui-editing-cell');\r\n *                   _this.editingCell = null;\r\n *                   _this.onEditComplete.emit({ field: _this.editingCellField, data: _this.editingCellData });//+\r\n *                   _this.unbindDocumentEditListener();\r\n *               }\r\n *               _this.editingCellClick = false;\r\n *           };\r\n *           document.addEventListener('click', this.documentEditListener);\r\n *       }\r\n *   };\r\n * \r\n *  TreeTable.prototype.bindDocumentEditListener = function () {\r\n *       var _this = this;\r\n *       if (!this.documentEditListener) {\r\n *           this.documentEditListener = function (event) {\r\n *               if (_this.editingCell && !_this.editingCellClick && _this.isEditingCellValid()) {\r\n *                   domhandler_1.DomHandler.removeClass(_this.editingCell, 'ui-editing-cell');\r\n *                   _this.editingCell = null;\r\n *                   _this.onEditComplete.emit({ field: _this.editingCellField, data: _this.editingCellData });//+\r\n *                   _this.unbindDocumentEditListener();\r\n *               }\r\n *               _this.editingCellClick = false;\r\n *           };\r\n *           document.addEventListener('click', this.documentEditListener);\r\n *       }\r\n *   };\r\n * \r\n *  TTEditableColumn.prototype.openCell = function () {\r\n *       var _this = this;\r\n *        this.tt.updateEditingCell(this.el.nativeElement,this.data, this.field);//+\r\n *        domhandler_1.DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');\r\n *        this.tt.onEditInit.emit({ field: this.field, data: this.data });\r\n *        this.zone.runOutsideAngular(function () {\r\n *            setTimeout(function () {\r\n *                var focusable = domhandler_1.DomHandler.findSingle(_this.el.nativeElement, 'input, textarea');\r\n *                if (focusable) {\r\n *                     focusable.focus();\r\n *                 }\r\n *             }, 50);\r\n *        });\r\n *   };\r\n * \r\n *  TTEditableColumn.prototype.onClick = function (event) {\r\n *        if (this.isEnabled()) {\r\n *            this.tt.editingCellClick = true;\r\n *            if (this.tt.editingCell) {\r\n *                if (this.tt.editingCell !== this.el.nativeElement) {\r\n *                    if (!this.tt.isEditingCellValid()) {\r\n *                        return;\r\n *                    }\r\n *                    this.tt.onEditComplete.emit({ field: this.tt.oldField, data: this.tt.oldDdata });//+\r\n *                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\r\n *                    this.openCell();\r\n *                }\r\n *            }\r\n *            else {\r\n *                this.openCell();\r\n *            }\r\n *        }\r\n *  };\r\n * \r\n *  TTEditableColumn.prototype.openCell = function () {\r\n *         var _this = this;\r\n *         this.tt.updateEditingCell(this.el.nativeElement,this.data, this.field);\r\n *         DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');\r\n *         this.tt.onEditInit.emit({ field: this.field, data: this.data });\r\n *         this.tt.oldField= this.field; //+\r\n *         this.tt.oldDdata=this.data;  //+\r\n *         this.zone.runOutsideAngular(function () {\r\n *             setTimeout(function () {\r\n *                 var focusable = DomHandler.findSingle(_this.el.nativeElement, 'input, textarea');\r\n *                if (focusable) {\r\n *                     focusable.focus();\r\n *                 }\r\n *           }, 50);\r\n *       });\r\n *   };\r\n * \r\n * 3. HTMLæ¨¡æ¿\r\n * (1) ä¸å¯ç¨å¤è¡¨å¤´\r\n *      <p-treeTable [columns]=\"treeGridColumns\" farrisPrimengTreeTableBinding farrisHierarchyInfoKey=\"layerField\" [resizableColumns]=\"true\" farrisPrimengTreeTableIdField=\"id\">\r\n *             <ng-template pTemplate=\"header\" let-columns>\r\n *                 <tr>\r\n *                     <th *ngFor=\"let col of columns\" ttResizableColumn>\r\n *                         {{col.header}}\r\n *                     </th>\r\n *                 </tr>\r\n *             </ng-template>\r\n *             <ng-template pTemplate=\"body\" let-rowNode let-rowData=\"rowData\" let-columns=\"columns\">\r\n *                 <tr>\r\n *                     <td *ngFor=\"let col of columns; let i = index\" ttEditableColumn [ttEditableColumn]=\"rowData\"\r\n *                         [ttEditableColumnField]=\"col.field\">\r\n *                         <p-treeTableToggler [rowNode]=\"rowNode\" *ngIf=\"i === 0\"></p-treeTableToggler>\r\n *                         <p-treeTableCellEditor>\r\n *                             <ng-template pTemplate=\"input\">\r\n *                                  <!-- æ§ä»¶å¨æçæåºåï¼æ­¤å¤å¯æ¾ç½®æ§ä»¶å¨æçæç»ä»¶ï¼çæè§åå¦ä¸ï¼\r\n *                                            1. å­ç¬¦ä¸²ç±»åï¼ææ¬æ§ä»¶\r\n *                                            2. æ°å­ç±»åï¼æ°å­æ§ä»¶\r\n *                                            3. å¸å°ç±»åï¼å¤éæ¡æ§ä»¶\r\n *                                            4. æ¥ææ¶é´ç±»åï¼æ¥ææ¶é´æ§ä»¶\r\n *                                            5. æä¸¾ç±»åï¼ä¸ææ¡æ§ä»¶\r\n *                                            6. å¸®å©ç±»åï¼å¸®å©æ§ä»¶-->\r\n *                             </ng-template>\r\n *                             <ng-template pTemplate=\"output\">{{ col | formatCellData : rowData }}</ng-template>\r\n *                         </p-treeTableCellEditor>\r\n *                     </td>\r\n *                 </tr>\r\n *             </ng-template>\r\n *     </p-treeTable>\r\n * \r\n * (2) å¯ç¨å¤è¡¨å¤´\r\n * \r\n *  <p-treeTable [columns]=\"treeGridColumns\" farrisPrimengTreeTableBinding farrisHierarchyInfoKey=\"layerField\" [resizableColumns]=\"true\" farrisPrimengTreeTableIdField=\"id\">\r\n *             <ng-template pTemplate=\"header\" let-columns>\r\n *                  <tr *ngFor=\"let columnHeader of treeGridColumnHeaders\">\r\n *                      <th *ngFor=\"let col of columnHeader\" ttResizableColumn [attr.rowspan]=\"col.rowspan\" [attr.colspan]=\"col.colspan\">\r\n *                          {{col.header}}\r\n *                      </th>\r\n *                  </tr>\r\n *             </ng-template>\r\n *             <ng-template pTemplate=\"body\" let-rowNode let-rowData=\"rowData\" let-columns=\"columns\">\r\n *                 <tr>\r\n *                     <td *ngFor=\"let col of columns; let i = index\" ttEditableColumn [ttEditableColumn]=\"rowData\"\r\n *                         [ttEditableColumnField]=\"col.field\">\r\n *                         <p-treeTableToggler [rowNode]=\"rowNode\" *ngIf=\"i === 0\"></p-treeTableToggler>\r\n *                         <p-treeTableCellEditor>\r\n *                             <ng-template pTemplate=\"input\">\r\n *                                  <!-- æ§ä»¶å¨æçæåºåï¼æ­¤å¤å¯æ¾ç½®æ§ä»¶å¨æçæç»ä»¶ï¼çæè§åå¦ä¸ï¼\r\n *                                            1. å­ç¬¦ä¸²ç±»åï¼ææ¬æ§ä»¶\r\n *                                            2. æ°å­ç±»åï¼æ°å­æ§ä»¶\r\n *                                            3. å¸å°ç±»åï¼å¤éæ¡æ§ä»¶\r\n *                                            4. æ¥ææ¶é´ç±»åï¼æ¥ææ¶é´æ§ä»¶\r\n *                                            5. æä¸¾ç±»åï¼ä¸ææ¡æ§ä»¶\r\n *                                            6. å¸®å©ç±»åï¼å¸®å©æ§ä»¶-->\r\n *                             </ng-template>\r\n *                             <ng-template pTemplate=\"output\">{{ col | formatCellData : rowData }}</ng-template>\r\n *                         </p-treeTableCellEditor>\r\n *                     </td>\r\n *                 </tr>\r\n *             </ng-template>\r\n *  </p-treeTable>\r\n * \r\n * å¤è¡¨å¤´æ°æ®æ ¼å¼ï¼\r\n *  this.treeGridColumnHeaders=[\r\n *     [{ header: 'Brand',rowspan:3, colspan:1},{ header: 'Sale Rate',rowspan:1, colspan:4}],\r\n *     [{ header: 'Sales',rowspan:1, colspan:2},{ header: 'Profits',rowspan:1, colspan:2}],\r\n *     [{ header: 'Last Year',rowspan:1, colspan:1},{ header: 'This Year',rowspan:1, colspan:1},{ header: 'Last Year',rowspan:1, colspan:1},{ header: 'This Year',rowspan:1, colspan:1}],\r\n *  ]\r\n\r\n **********************************************************************************************************************/\r\n\r\nimport { Directive, OnInit, OnChanges, SimpleChanges, Input, HostListener, Output, EventEmitter, Type } from '@angular/core';\r\nimport { BindingData, BindingList, FrameContext, Change, ChangeType, EntityCollection, EntityList, Entity, ComponentType } from '@farris/devkit';\r\nimport { TreeTable } from 'primeng/treetable';\r\nimport { TreeNode } from 'primeng/api';\r\nimport { TreeNodeBuilderFactory } from '../tree_table_node_builder/tree_node_builder_factory';\r\nimport { DateTimeHelperService } from '@farris/ui-common/date';\r\nconst PARENT_ELEMENT: string = \"parentElement\";\r\nconst PATH: string = \"path\";\r\nconst IS_DETAIL: string = 'isDetail';\r\n\r\nexport interface FarrisPrimengTreeNode extends TreeNode {\r\n  id?: string;\r\n}\r\n\r\n@Directive({\r\n  selector: '[farrisPrimengTreeTableBinding]'\r\n})\r\nexport class FarrisPrimengTreeTableBindingDirective implements OnInit, OnChanges {\r\n  private selectedRowId = null;\r\n  private treeTableSelectedEvent = null;\r\n  /**\r\n   * åçº§ç ä¿¡æ¯å­æ®µï¼å±æ§å¯è½æä¸¤ç§æ ¼å¼çå¼ï¼åçº§ç å­æ®µï¼ä¸»è¡¨ï¼æä»è¡¨åç«¯codes/åçº§ç å­æ®µï¼å­è¡¨ï¼\r\n   */\r\n  @Input('farrisHierarchyInfoKey')\r\n  public hierarchyInfoKey: string;\r\n  @Input('columns')\r\n  public columns: any;\r\n  /**\r\n   * åç ï¼æ°æ®çå¯ä¸æ è¯\r\n   */\r\n  @Input('farrisPrimengTreeTableIdField')\r\n  public idField: string;\r\n\r\n  /**\r\n   * èç¹éæ©åæ´äºä»¶\r\n   */\r\n  @Output() nodeSelectChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  private oldTreeNodeMap: { [key: string]: FarrisPrimengTreeNode } = {};\r\n\r\n\r\n  /**\r\n   * åçº§ç çå­æ®µç¼å·ï¼ä»hierarchyInfoKeyå±æ§ä¸­è§£æè·å\r\n   */\r\n  private hierarchyInfoField: string;\r\n\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  /**\r\n   * ç»å®æ°æ®åè¡¨\r\n   */\r\n  private get bindingList(): BindingList {\r\n    return this.bindingData.getList();\r\n  }\r\n\r\n  private getHierarchyInfoField(): string {\r\n    let infos = this.hierarchyInfoKey.split('/');\r\n    return infos[infos.length - 1];\r\n  }\r\n\r\n  constructor(\r\n    private treeTable: TreeTable,\r\n    private frameContext: FrameContext,\r\n    private dateService: DateTimeHelperService\r\n  ) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //è§£æè·ååçº§ç å­æ®µç¼å·\r\n    this.hierarchyInfoField = this.getHierarchyInfoField();\r\n    // å°åçº§ç ä¿¡æ¯ä¿å­å°root-component\r\n    const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n    virtualRootFrameContext.setParam('hierarchyInfoKey', this.hierarchyInfoKey);\r\n    this.bindingData.changes.subscribe((change: Change) => {\r\n      this.bindData(change);\r\n      this.updateSelectedRow(change);\r\n    });\r\n    this.frameContext.viewModel.uiState.setPropertyValue('ids', []);\r\n    if (this.frameContext && this.frameContext.frameComponent) {\r\n      this.frameContext.frameComponent.componentType = ComponentType.primengTreeComponent;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è·åæ åè¡¨ç»å®æ°æ®å¯¹åºçå®ä½æ°ç»\r\n   * @returns å®ä½æ°ç»\r\n   */\r\n  private getEntityArr(): Entity[] {\r\n    const entityCollection = this.frameContext.repository.entityCollection;\r\n    const bindingPath: string = this.frameContext.bindingData.bindingPath;\r\n    if (!bindingPath || bindingPath === '/') {\r\n      return entityCollection.toArray();\r\n    }\r\n    let bindingList: BindingList = this.frameContext.bindingData.list;\r\n    let bindingPathArr: string[] = bindingPath.split('/').filter(str => str);\r\n    let pathArray = [];\r\n    bindingPathArr.forEach((path: string) => {\r\n      pathArray.push(`${bindingList.primaryKey}:${bindingList.currentId}`);\r\n      pathArray.push(path);\r\n      bindingList = bindingList.currentItem[path];\r\n    });\r\n    return (entityCollection.getEntitiesByPath(pathArray) as EntityList<any>).toArray();\r\n  }\r\n  /**\r\n   * å°çå®é¡ºåºæ è®°å°å¯¹åºçå®ä½ä¸\r\n   * @param entityArr å®ä½æ°ç»\r\n   * @param treeNodes æ èç¹\r\n   */\r\n  private setActualIndex(entityArr: Entity[], treeNodes: TreeNode[]) {\r\n    if (entityArr.length < 1)\r\n      return;\r\n    // åå§ååºå·å¨å¹¶ä¾æ¬¡éåæ¯ä¸æ£µæ \r\n    let counter = { index: 0 };\r\n    const primaryKey: string = entityArr[0].primaryKey;\r\n    treeNodes.forEach((rootNode) => {\r\n      this.traverseTree(rootNode, counter, entityArr, primaryKey);\r\n    });\r\n  }\r\n  /**\r\n   * ååºéå½éåæ èç¹å¹¶å¨å¯¹åºå®ä½ä¸æ è®°åºå·\r\n   * @param treeNode æ èç¹\r\n   * @param counter åºå·å¨\r\n   * @param entityArr å®ä½æ°ç»\r\n   * @description\r\n   * å¨è¿è¡åç«¯æ ¡éªæ¶ï¼æç§Entityå¨æ°ç»ä¸­çä¸æ çæï¼éè¯¯æç¤ºçï¼è¡å·çæ¹å¼ä¸éç¨äºæ åè¡¨ï¼\r\n   * å ä¸ºæ åè¡¨å¯ä»¥å¨å·²ç»æ·»å çèç¹ä¸å å¥å­èç¹ï¼èEntityæ»æ¯å¨æåè¿½å æ°å¯¹è±¡ï¼å¯¼è´äºèçé¡ºåºä¸ä¸å®ç¸åï¼\r\n   * æä»¥å¨ç»å®æ°æ®çæ¶åå°æ èç¹å¨åè¡¨ä¸­ççå®é¡ºåºéè¿ä¸ä¸ªéå çå±æ§ï¼__ACTUAL_INDEX__ï¼èµç»Entityç¤ºä¾ï¼\r\n   * å½Entityè°ç¨validateæ¹æ³æ¶ï¼æ£æ¥æ¯å¦å­å¨è¯¥å±æ§ï¼å¦æå­å¨ååºç¨è¯¥å±æ§çå¼ä½ä¸ºè¡å·ã\r\n   */\r\n  private traverseTree(treeNode: TreeNode, counter: { index: number }, entityArr: Entity[], primaryKey: string) {\r\n    const INDEX_LABEL = \"__ACTUAL_INDEX__\";\r\n    // å¤çå½åèç¹\r\n    const entity = entityArr.find(e => e[primaryKey] === treeNode.data[primaryKey]);\r\n    if (entity) {\r\n      Object.defineProperty(entity, INDEX_LABEL, {\r\n        value: counter.index\r\n      });\r\n      counter.index++;\r\n    }\r\n    // éå½éååæ¯\r\n    treeNode.children.forEach((rootNode) => {\r\n      this.traverseTree(rootNode, counter, entityArr, primaryKey);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * å¤çæ°æ®åæ´\r\n   * @param change åæ´\r\n   * @returns æ¯å¦è·³è¿ç»å®æ°æ®çæ´ä½å·æ°\r\n   * @description\r\n   * ç®çæ¯å°½éå°çéæ°æé æ´ä¸ªæ åè¡¨ï¼æ¯å¦å¨åçå¼ååäºä»¶æ¶å°½éåªæ´æ¹ååçå¼å°±ç»æï¼\r\n   * å¦æä»»ä½ååé½éæ°æé æ ï¼ä¼å¯¼è´Tabé®åæ¢åè½é¾ä»¥å®ç°ç­é®é¢ã\r\n   */\r\n  private handleChange(change?: Change): boolean {\r\n    // æ²¡æåæ´æ¶ï¼ç»§ç»­ç»å®æ°æ®å·æ°\r\n    if (!change)\r\n      return false;\r\n    // åç±»å¤çå·ä½çåæ´\r\n    switch (change.type) {\r\n      case ChangeType.SelectionChanged:\r\n        return this.handleSelectionChanged(change);\r\n      case ChangeType.GlobalSelectionChanged:\r\n        return this.handleSelectionChanged(change);\r\n      case ChangeType.ValueChanged:\r\n        return this.handleValueChanged(change);\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n  /**\r\n   * å¤çè¡åæ¢åæ´\r\n   * @param change åæ´\r\n   * @returns æ¯å¦è·³è¿ç»å®æ°æ®çæ´ä½å·æ°\r\n   */\r\n  private handleSelectionChanged(change: Change): boolean {\r\n    // å½åç»å®è·¯å¾ä¸åçè¡åæ¢äºä»¶ï¼ä¸è¿è¡æ°æ®å·æ°ï¼ä¸ºäºæ¯æTabé®åæ¢ååæ ¼ï¼\r\n    if (change.type === ChangeType.SelectionChanged || change.type === ChangeType.GlobalSelectionChanged) {\r\n      let path = change.path;\r\n      let frmPath = this.bindingData.bindingPath.split(\"/\").filter(str => str);\r\n      if (path.length === frmPath.length) {\r\n        let same = true;\r\n        for (let i = 0; i < path.length; i++) {\r\n          if (path[i] !== frmPath[i])\r\n            same = false;\r\n        }\r\n        if (same)\r\n          return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  /**\r\n   * å¤çè¡åæ¢åæ´\r\n   * @param change åæ´\r\n   * @returns æ¯å¦è·³è¿ç»å®æ°æ®çæ´ä½å·æ°\r\n   */\r\n  private handleValueChanged(change: Change): boolean {\r\n    if (change.type !== ChangeType.ValueChanged) {\r\n      return false;\r\n    }\r\n    // æ¥æ¶å°å¼ååäºä»¶ï¼å°è¯ä»è¿è¡å±é¨æ°æ®çæ´æ°ï¼ä¸ºäºæ¯æTabé®åæ¢ååæ ¼ï¼\r\n    let path = change.path;\r\n    let bindingPathArr = this.bindingData.bindingPath.split(\"/\").filter(str => str);\r\n    // å¤æ­ç»å®è·¯å¾æ¯å¦ç¸åï¼å¦æä¸ç¸ååæ´ä½å·æ°\r\n    for (let item of bindingPathArr) {\r\n      if (path.length > 0) {\r\n        if (item === path[0]) {\r\n          path.shift();\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    // éè¿idæ¾å°å¾æ´æ°çæ èç¹\r\n    let id = change.id;\r\n    if (id) {\r\n      const primaryKey = this.bindingList.primaryKey;\r\n      let nodes = this.treeTable.value;\r\n      let targetNode = null;\r\n      for (let node of nodes) {\r\n        let result = this.findTreeNodeById(node, primaryKey, id);\r\n        if (result) {\r\n          targetNode = result;\r\n          break;\r\n        }\r\n      }\r\n      if (targetNode && path.length === 1) {\r\n        const propertyName = path.shift();\r\n        if (targetNode.data.hasOwnProperty(propertyName) && change.hasOwnProperty(\"value\")) {\r\n          targetNode.data[propertyName] = change.value;\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  /**\r\n   * éè¿ä¸»é®å¼æ¥æ¾æ èç¹\r\n   * @param treeNode æ æ ¹èç¹\r\n   * @param primaryKey ä¸»é®å\r\n   * @param keyValue ä¸»é®å¼\r\n   * @returns æ èç¹\r\n   * @todo éå½éåå®ç°æ¯è¾ä½æï¼èèéè¿oldTreeNodeMapæ¥æ¾æ èç¹\r\n   */\r\n  private findTreeNodeById(treeNode: TreeNode, primaryKey: string, keyValue: any): TreeNode | null {\r\n    if (!treeNode)\r\n      return null;\r\n    if (treeNode.data.hasOwnProperty(primaryKey) && treeNode.data[primaryKey] === keyValue)\r\n      return treeNode;\r\n    if (treeNode.children) {\r\n      for (let node of treeNode.children) {\r\n        let result = this.findTreeNodeById(node, primaryKey, keyValue);\r\n        if (result)\r\n          return result;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n  * ç»å®æ°æ®\r\n  */\r\n  private bindData(change?: Change) {\r\n    let skipRefresh: boolean = this.handleChange(change);\r\n    if (skipRefresh) {\r\n      return;\r\n    }\r\n    // this.sourceData = this.bindingList.toJSON({ ignoreMultiLangInput: true });\r\n    const oldTreeNodes = this.treeTable.value;\r\n    const treeNodesData = this.bindingList.toJSON({ ignoreMultiLangInput: true });\r\n    let treeNodes: TreeNode[] = [];\r\n\r\n    if (treeNodesData && treeNodesData.length > 0) {\r\n      let hierarchyInfo = treeNodesData[0][this.hierarchyInfoField];\r\n      const builder: Type<any> = TreeNodeBuilderFactory.getBuilder(hierarchyInfo);\r\n      // æå¡å¨è¿åçåçº§èç¹ä¿¡æ¯å¹éä¸å°ç°æå·¥åéé¢çä»»ä½ä¸ç§æåµãç¡®è®¤æ°å çbuilderå·²ç»å¨å·¥åä¸­æ³¨å\r\n      if (builder == null) {\r\n        throw new Error('TreeTable builder is null!');\r\n      }\r\n      let expandLevel = -1;\r\n      const treeExpandLevel = this.treeTable['expandLevel'];\r\n      if (typeof treeExpandLevel !== 'undefined') {\r\n        expandLevel = treeExpandLevel;\r\n      }\r\n      const context = {\r\n        expandLevel,\r\n        component: this.treeTable,\r\n      };\r\n      const treeNodesBuilder = new builder(\r\n        treeNodesData, oldTreeNodes,\r\n        this.bindingList.primaryKey, this.hierarchyInfoField, context\r\n      );\r\n      treeNodes = treeNodesBuilder.build();\r\n      // è·åç»å®æ°æ®å¯¹åºçå®ä½åè¡¨\r\n      let entityArr: Entity[] = this.getEntityArr();\r\n      // æ ¹æ®treeNodesçé¡ºåºå¨å¯¹åºçå®ä½ä¸æ·»å åºå·å­æ®µ__ACTUAL_INDEX__\r\n      this.setActualIndex(entityArr, treeNodes);\r\n    }\r\n\r\n    if (!this.treeTable.lazy) {\r\n      this.treeTable.totalRecords = (this.treeTable._value ? this.treeTable._value.length : 0);\r\n      if (this.treeTable.sortMode == 'single' && this.treeTable.sortField)\r\n        this.treeTable.sortSingle();\r\n      else if (this.treeTable.sortMode == 'multiple' && this.treeTable.multiSortMeta)\r\n        this.treeTable.sortMultiple();\r\n      else if (this.treeTable.hasFilter()) //sort already filters\r\n        this.treeTable._filter();\r\n    }\r\n    this.treeTable.tableService.onUIUpdate(treeNodes);\r\n    this.treeTable.value = treeNodes;\r\n    this.treeTable.updateSerializedValue();\r\n\r\n    // this.treeNodeMap = {};\r\n    // this.sourceDataClone = this.sourceData;\r\n    // this.treeTable.value = [...this.treeNodesBuilder()];\r\n    // this.treeTableValueHandler();\r\n  }\r\n  private updateSelectedRow(change: Change) {\r\n    const currentId = this.bindingList.currentId;\r\n    if (this.treeTableSelectedEvent) {\r\n      this.treeTableSelectedEvent = false;\r\n      this.selectedRowId = currentId;\r\n      return;\r\n    }\r\n    const serializedValue = this.treeTable.serializedValue;\r\n\r\n    const treeNode = serializedValue && serializedValue.find(item => item && item.node && item.node.data && item.node.data.id === currentId) || null;\r\n    if (treeNode) {\r\n      if (this.treeTable.isSelected(treeNode.node) || currentId === this.selectedRowId) {\r\n        return;\r\n      }\r\n      this.selectedRowId = currentId;\r\n      this.treeTable.handleRowClick({ rowNode: treeNode, originalEvent: { target: { nodeName: '' } } });\r\n    }\r\n  }\r\n  @HostListener('onEditInit', ['$event'])\r\n  public onEditInitHandler(event: any) {\r\n    this.nodeSelectChange.emit(event['data']);\r\n    const id = event.data[this.idField];\r\n    this.setCurrentIdToBindingList(id);\r\n  }\r\n\r\n\r\n  @HostListener('onEditComplete', ['$event'])\r\n  public onEditCompleteHandler(event: any) {\r\n    let fieldName = event.field;\r\n    const column = this.columns.find(item => item.field === fieldName);\r\n    if (fieldName && column && column.editor && column.editor.options && column.editor.options.type === 'EditorTypes.LOOKUP') {\r\n      return;\r\n    }\r\n    if (event && event.hasOwnProperty('data')) {\r\n      const primaryKeyValue = event.data[this.frameContext.repository.primaryKey];\r\n\r\n      let value: any = this.getValue(fieldName, event.data);\r\n      const bindingPath = this.frameContext.viewModel.bindingPath || '/';\r\n      const bindingPaths = bindingPath.split('/').filter(p => p);\r\n      const bindingList: BindingList = this.bindingData.getValue(bindingPaths);\r\n      const bindingObject = bindingList.findById(primaryKeyValue);\r\n      const oldValue = this.getValue(fieldName, bindingObject);\r\n      const column = this.treeTable.columns.find(item => item.field === fieldName);\r\n      const dataType = column && column.dataType || null;\r\n      if (dataType === 'date' || dataType === 'datetime') {\r\n        if (this.dateService) {\r\n          const format = column && column.formatter && column.formatter.options && column.formatter.options.format || 'yyyy-MM-dd';\r\n          value = this.dateService.formatTo(value, format);\r\n          if (!value) {\r\n            value = null;\r\n          }\r\n        }\r\n      } else if (dataType === 'number') {\r\n        value = Number(value);\r\n      }\r\n      if (value !== oldValue) {\r\n        this.updateBindingList(primaryKeyValue, fieldName, value);\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('onNodeExpand', ['$event'])\r\n  public onNodeExpandHandler(event: any) {\r\n    // this.setNodeExpandedValue(event);\r\n    const selectedId = event && event.node && event.node.id || null;\r\n    if (!selectedId) {\r\n      return;\r\n    }\r\n    const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n    const expandNodes = virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];\r\n    expandNodes.push(selectedId);\r\n    virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);\r\n  }\r\n\r\n  @HostListener('onNodeCollapse', ['$event'])\r\n  public onNodeCollapseHandler(event: any) {\r\n    // this.setNodeExpandedValue(event);\r\n  }\r\n  @HostListener('onNodeSelect', ['$event'])\r\n  public onNodeSelectHandler(event: any) {\r\n    const id = event && event.node && event.node.data && event.node.data[this.frameContext.repository.primaryKey] || null;\r\n    if (id === this.bindingList.currentId) {\r\n      return;\r\n    }\r\n    this.treeTableSelectedEvent = true;\r\n    this.setCurrentIdToBindingList(id);\r\n  }\r\n  @HostListener('onNodeUnselect', ['$event'])\r\n  public onNodeUnselectHandler(event: any) {\r\n    this.setCurrentIdToBindingList(null);\r\n  }\r\n  private setNodeExpandedValue(event: any) {\r\n    if (!event || !this.oldTreeNodeMap || Object.keys(this.oldTreeNodeMap).length <= 0) {\r\n      return;\r\n    }\r\n    try {\r\n      let currentId = event.node.data.id;\r\n      this.oldTreeNodeMap[currentId].expanded = event.expanded;\r\n    } catch (e) {\r\n      console.warn(`setNodeExpandedValue error:${e.message}`);\r\n    }\r\n  }\r\n  private setCurrentIdToBindingList(selectedId: string): void {\r\n    const oldCurrentId = this.bindingList.currentId;\r\n    if (oldCurrentId === selectedId) {\r\n      return;\r\n    }\r\n    this.bindingList.setCurrentId(selectedId, true);\r\n  }\r\n\r\n  private getPaths(): string[] {\r\n    let paths = [];\r\n    if (!this.frameContext.viewModel || !this.frameContext.viewModel.bindingPath || this.frameContext.viewModel.bindingPath === '/') {\r\n      return paths;\r\n    }\r\n    else {\r\n      let bindingPath = this.frameContext.viewModel.bindingPath;\r\n      paths = bindingPath.substring(1, bindingPath.length).split('/');\r\n      return paths;\r\n    }\r\n  }\r\n  private updateBindingList(primaryValue: any, propertyName: string, value: any) {\r\n    if (!propertyName) {\r\n      return;\r\n    }\r\n    // æ´æ°ä¸»è¡¨é¨åè¡çå­æ®µ\r\n    const propertyNames = propertyName.split('.').filter(item => item);\r\n    const bindingPath = this.getBindingPathArray();\r\n    // ååºæ¥çä¸å®æ¯bindingList\r\n    const list = this.bindingData.getValue(bindingPath) as BindingList;\r\n    // ä¿®æ¹çæ¯å½åè¡\r\n    const paths = bindingPath.concat(propertyNames);\r\n    if (list && primaryValue === list.currentItem.primaryKeyValue) {\r\n      this.bindingData.setValue(paths, value, true, true);\r\n      return;\r\n    }\r\n    const bindingObject = this.bindingList.findById(primaryValue);\r\n    if (!bindingObject) {\r\n      return;\r\n    }\r\n    if (propertyNames.length < 2) {\r\n      bindingObject.setValue(propertyName, value, true, true, undefined, this.bindingData.getValudChangeInvokerFactory()(paths));\r\n    } else {\r\n      let targetBindingObject = null;\r\n      const fpaths = propertyNames.slice(0, propertyNames.length - 1);\r\n      const targetPropertyName = propertyNames[propertyNames.length - 1];\r\n      fpaths.forEach(prop => {\r\n        targetBindingObject = targetBindingObject && targetBindingObject[prop] || bindingObject[prop];\r\n      });\r\n      // todo:éè¦æ·»å å¼ååäºä»¶\r\n      targetBindingObject.setValue(targetPropertyName, value, true, true, undefined, this.bindingData.getValudChangeInvokerFactory()(paths));\r\n    }\r\n  }\r\n  private getBindingPathArray(): any[] {\r\n    const path = this.frameContext.viewModel.bindingPath;\r\n    if (path) {\r\n      return path.split('/').filter(n => n !== '');\r\n    }\r\n    return [];\r\n  }\r\n  private getValue(path: string, data: any) {\r\n    let value = '';\r\n    if (path.indexOf('.') === -1) {\r\n      value = data[path];\r\n    } else {\r\n      value = path.split('.').reduce((result, prop) => {\r\n        return result[prop];\r\n      }, data);\r\n    }\r\n    return value;\r\n  }\r\n  protected setChecks(ids: string[]) {\r\n    this.frameContext.viewModel.uiState.setPropertyValue('ids', ids);\r\n  }\r\n}","import { Directive, Injector, Input, OnChanges, OnDestroy, SimpleChanges } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nconst EXCLUDE_VALIDATE_FIELDS = 'excludeValidateRules';\r\nconst RULETYPE = 'required';\r\n@Directive({\r\n  selector: '[farris-dynamic-required]'\r\n})\r\nexport class FarrisDynamicRequiredDirective implements OnChanges, OnDestroy {\r\n  /**\r\n   * like {field:'',type:'require'}\r\n   */\r\n  @Input('farris-dynamic-required') field: string;\r\n  /**\r\n   * å¯ç¨æ ¡éªçæ¶æº\r\n   */\r\n  @Input('requiredOn') requiredOn: boolean = false;\r\n  constructor(protected frameContext: FrameContext, private injector: Injector) {\r\n\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.updateValidateRule(false);\r\n  }\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // å¯ç¨å¿å¡«æ ¡éª\r\n    this.updateValidateRule(this.requiredOn);\r\n  }\r\n  /**\r\n   * \r\n   * @param isRequired \r\n   */\r\n  private updateValidateRule(isRequired: boolean) {\r\n    if (!this.field) {\r\n      return;\r\n    }\r\n    this.frameContext.form.updateFieldValidateRule(this.field, isRequired);\r\n    // if (isRequired) {\r\n    //   const rules = this.frameContext.params.get(EXCLUDE_VALIDATE_FIELDS) || {};\r\n    //   const fieldExcludeRules: string[] = rules[this.field] || [];\r\n    //   if (fieldExcludeRules.includes(RULETYPE)) {\r\n    //     const index = fieldExcludeRules.indexOf(RULETYPE);\r\n    //     fieldExcludeRules.splice(index, 1);\r\n    //   }\r\n    //   this.frameContext.params.set(EXCLUDE_VALIDATE_FIELDS, rules);\r\n    //   this.frameContext.form.updateFieldValidateRule(this.field, fieldExcludeRules);\r\n    // } else {\r\n    //   // ç¦ç¨æ ¡éª\r\n    //   // {int1:[required,maxValue]}\r\n    //   const rules = this.frameContext.params.get(EXCLUDE_VALIDATE_FIELDS) || {};\r\n    //   const fieldExcludeRules = rules[this.field] || [];\r\n    //   if (fieldExcludeRules && !fieldExcludeRules.includes(RULETYPE)) {\r\n    //     fieldExcludeRules.push(RULETYPE);\r\n    //   }\r\n    //   rules[this.field] = fieldExcludeRules;\r\n    //   this.frameContext.params.set(EXCLUDE_VALIDATE_FIELDS, rules);\r\n    //   this.frameContext.form.updateFieldValidateRule(this.field, fieldExcludeRules);\r\n    // }\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef, OnInit } from '@angular/core';\r\nimport { ViewModel } from '@farris/devkit';\r\nimport { EditorComponent } from '@farris/ui-editor';\r\n\r\n@Directive({\r\n  selector: '[farris-editor],[farris-editor-bind]'\r\n})\r\nexport class FarrisEditorDirective implements OnInit {\r\n  constructor(private viewModel: ViewModel, private editor: EditorComponent) { }\r\n\r\n  ngOnInit(): void {\r\n    this.setComponentRef();\r\n  }\r\n\r\n  private setComponentRef() {\r\n    const appContext = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.getFormAppContext();\r\n    const frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId;\r\n    const editor: any = this.editor;\r\n    const elementRef: ElementRef = editor && editor.injector && editor.injector.get(ElementRef, null);\r\n    const id = elementRef && elementRef.nativeElement && elementRef.nativeElement.id || null;\r\n    // å¦æframeIdä¸å­å¨ætreetableæ²¡æidå±æ§ï¼è¯´æä¸ç¬¦åä½¿ç¨åºæ¯\r\n    if (!frameId || !id) {\r\n      return;\r\n    }\r\n    const map = appContext && appContext.componentRefs && appContext.componentRefs.get(frameId) || new Map<string, any>();\r\n    appContext && appContext.componentRefs && appContext.componentRefs.set(frameId, map.set(id, this.editor));\r\n  }\r\n}","import { Directive, HostListener, Injector } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { QuerySolutionComponent } from \"@gsp-cmp/querysolution\";\r\n@Directive({\r\n  selector: \"[farris-querysolution-event-bind]\"\r\n})\r\nexport class FarrisQuerySolutionEventBindDirective {\r\n  constructor(private injector: Injector, private component: QuerySolutionComponent, private frameContext: FrameContext) { }\r\n  /**\r\n   * æ§è¡ç­é\r\n   * @param event event\r\n   */\r\n  @HostListener(\"queryEmitter\")\r\n  private onQuery(event: any) {\r\n    if (this.frameContext) {\r\n      this.frameContext.repository.entityCollection.pageIndex = 1;\r\n    }\r\n  }\r\n}","import { Directive, Inject, Injector, OnInit } from \"@angular/core\";\r\nimport { UserSettings, UserSettingsToken } from \"@farris/devkit\";\r\nimport { FarrisDatepickerComponent } from '@farris/ui-datepicker';\r\n@Directive({\r\n  selector: '[farris-date-localization]'\r\n})\r\nexport class FarrisDateLocalizationDirective implements OnInit {\r\n  constructor(private injector: Injector, @Inject(UserSettingsToken) private userSettings: UserSettings, private componentRef: FarrisDatepickerComponent) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    this.localize();\r\n  }\r\n  private localize() {\r\n    if (this.userSettings && this.componentRef) {\r\n      const { dateFormat = null, timeFormat = null } = this.userSettings;\r\n      if (dateFormat === null && timeFormat === null) {\r\n        return;\r\n      }\r\n      if (timeFormat && timeFormat && this.componentRef.showTime === true) {\r\n        this.componentRef.dateFormat = `${dateFormat} ${timeFormat}`;\r\n        this.componentRef.dateOpts.dateFormat = `${dateFormat} ${timeFormat}`;\r\n        this.componentRef.updateValue(this.componentRef.value);\r\n      } else if (dateFormat) {\r\n        this.componentRef.dateFormat = `${dateFormat}`;\r\n        this.componentRef.dateOpts.dateFormat = `${dateFormat}`;\r\n        this.componentRef.updateValue(this.componentRef.value);\r\n      }\r\n    }\r\n  }\r\n}","import { Directive, Inject, Injector, OnInit } from \"@angular/core\";\r\nimport { UserSettings, UserSettingsToken } from \"@farris/devkit\";\r\nimport { NumberSpinnerComponent } from '@farris/ui-number-spinner';\r\n@Directive({\r\n  selector: '[farris-number-localization]'\r\n})\r\nexport class FarrisNumberLocalizationDirective implements OnInit {\r\n  constructor(private injector: Injector, @Inject(UserSettingsToken) private userSettings: UserSettings, private componentRef: NumberSpinnerComponent) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    this.localize();\r\n  }\r\n  private localize() {\r\n    return;\r\n    // æ¶åéé¢ç­é®é¢ï¼æ°å­æ ¼å¼åä¸äºå¤ç\r\n    if (this.userSettings && this.userSettings.numberFormat && this.componentRef) {\r\n      const { negativeSign = null, numberDecimalDigits = null, numberDecimalSeparator = null, numberGroupSeparator = null } = this.userSettings.numberFormat || {};\r\n      // è´å·\r\n      if (negativeSign) {\r\n        // this.componentRef.prefix = negativeSign;\r\n      }\r\n      // å°æ°ä½æ°\r\n      if (numberDecimalDigits !== null) {\r\n        this.componentRef.precision = numberDecimalDigits;\r\n        this.componentRef.formatOptions['precision'] = numberDecimalDigits;\r\n      }\r\n      // å°æ°ç¹ç¬¦å·\r\n      if (numberDecimalSeparator !== null) {\r\n        this.componentRef.decimalSeparator = numberDecimalSeparator;\r\n        this.componentRef.formatOptions['decimalSeparator'] = numberDecimalSeparator;\r\n      }\r\n      // ååä½ç¬¦å·\r\n      if (numberGroupSeparator !== null) {\r\n        this.componentRef.groupSeparator = numberGroupSeparator;\r\n        this.componentRef.formatOptions['groupSeparator'] = numberGroupSeparator;\r\n      }\r\n      this.componentRef.updateValue(this.componentRef.value);\r\n    }\r\n  }\r\n}","import { Directive, Inject, Injector, OnInit } from \"@angular/core\";\r\nimport { UserSettings, UserSettingsToken } from \"@farris/devkit\";\r\nimport { TimePickerComponent } from '@farris/ui-time-picker';\r\n\r\n@Directive({\r\n  selector: '[farris-time-localization]'\r\n})\r\nexport class FarrisTimeLocalizationDirective implements OnInit {\r\n  constructor(private injector: Injector, @Inject(UserSettingsToken) private userSettings: UserSettings, private componentRef: TimePickerComponent) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    this.localize();\r\n  }\r\n  private localize() {\r\n    if (this.userSettings && this.componentRef) {\r\n      const { timeFormat = null } = this.userSettings;\r\n      if (timeFormat) {\r\n        this.componentRef.format = timeFormat;\r\n      }\r\n    }\r\n  }\r\n}","import { Directive, Inject, Injector, Input, OnInit } from \"@angular/core\";\r\nimport { NumberFormat, UserSettings, UserSettingsToken } from \"@farris/devkit\";\r\nimport { BigNumber } from 'bignumber.js';\r\nimport moment from 'moment';\r\nimport { TextComponent } from '@farris/ui-text';\r\n\r\n@Directive({\r\n  selector: '[farris-text-localization]'\r\n})\r\nexport class FarrisTextLocalizationDirective implements OnInit {\r\n  @Input('localization') localization: boolean;\r\n  constructor(private injector: Injector, @Inject(UserSettingsToken) private userSettings: UserSettings, private componentRef: TextComponent) {\r\n    this.transform();\r\n  }\r\n  public ngOnInit() {\r\n  }\r\n  private transform() {\r\n    if (this.componentRef) {\r\n      this.componentRef.beforeWriteValue = (value: any, options: any) => {\r\n        let { localizationType = null, showTime = false } = options;\r\n        if (!value) {\r\n          return '';\r\n        }\r\n        if (localizationType && value) {\r\n          localizationType = localizationType.toLowerCase();\r\n          value = this.transformValue(value, localizationType);\r\n          return value;\r\n        } else {\r\n          return undefined;\r\n        }\r\n      };\r\n    }\r\n  }\r\n  private transformValue(value: any, dataType: string) {\r\n    if (dataType === 'date') {\r\n      return this.transformDate(value);\r\n    } else if (dataType === 'datetime') {\r\n      return this.transformDateTime(value);\r\n    }\r\n    // æ¶åéé¢è®¡ç®åæ¾ç¤ºé®é¢ï¼ä¸äºå¤ç\r\n    //  else if (dataType === 'number') {\r\n    //   return this.transformNumber(value);\r\n    // } \r\n    else {\r\n      return value;\r\n    }\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥æ\r\n   * @param value value\r\n   */\r\n  private transformDate(value: any) {\r\n    let dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';\r\n    if (!dateFormat || !value) {\r\n      return value;\r\n    }\r\n    const date = moment(value);\r\n    const isValid = date.isValid();\r\n    if (!isValid) {\r\n      return value;\r\n    }\r\n    dateFormat = this.parseDateFormat(dateFormat);\r\n    return date.format(dateFormat);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥ææ¶é´\r\n   * @param value value\r\n   * todo: ç®åæ æ³å®ä¹æ¥ææ¶é´æ ¼å¼\r\n   */\r\n  private transformDateTime(value: any) {\r\n    let dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';\r\n    let timeFormat = this.userSettings && this.userSettings.timeFormat || 'HH:mm:ss';\r\n    if (!dateFormat || !timeFormat) {\r\n      return value;\r\n    }\r\n    const dateTime = moment(value);\r\n    const isValid = dateTime.isValid();\r\n    if (!isValid) {\r\n      return value;\r\n    }\r\n    if (dateFormat) {\r\n      dateFormat = this.parseDateFormat(dateFormat);\r\n    }\r\n    if (timeFormat) {\r\n      timeFormat = this.parseTimeFormat(timeFormat);\r\n    }\r\n    const dateTimeFormat = dateFormat + ' ' + timeFormat;\r\n    return dateTime.format(dateTimeFormat);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ°å­\r\n   * @param value value\r\n   */\r\n  private transformNumber(value): string {\r\n    if (value === null || value === undefined || value === '') {\r\n      return '';\r\n    }\r\n    const bigNumber = new BigNumber(value);\r\n    // å¦æä¸æ¯æ°å­ï¼ä¸åä»»ä½å¤ç\r\n    if (!BigNumber.isBigNumber(bigNumber)) {\r\n      return value;\r\n    }\r\n    const isNegative = bigNumber.isNegative();\r\n    const format = this.buildNumberFormat();\r\n    const { negativeSign = null, numberDecimalDigits = null } = this.numberFormat || {};\r\n    if (isNegative) {\r\n      if (negativeSign !== null) {\r\n        format.prefix = negativeSign;\r\n        return bigNumber.absoluteValue().toFormat(numberDecimalDigits, null, format);\r\n      }\r\n    }\r\n    return bigNumber.toFormat(numberDecimalDigits, null, format);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥ææ ¼å¼è§åä¸ºmomentçformatè§å\r\n   * @param format format\r\n   */\r\n  private parseDateFormat(format: string) {\r\n    return format.replace(/y/g, 'Y').replace(/d/g, 'D');\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¶é´æ ¼å¼è§åä¸ºmomentçformatè§å\r\n   * @param format format\r\n   */\r\n  private parseTimeFormat(format: string) {\r\n    return format.replace(/M/g, 'm');\r\n  }\r\n  /**\r\n   * æé bignumberæ°å­æ ¼å¼åéé¡¹\r\n   */\r\n  private buildNumberFormat() {\r\n    if (this.numberFormat) {\r\n      const { numberDecimalSeparator = null, numberGroupSeparator = null } = this.numberFormat;\r\n      const format: any = {\r\n        groupSize: 3,\r\n      };\r\n      if (numberDecimalSeparator !== null) {\r\n        format.decimalSeparator = numberDecimalSeparator;\r\n      }\r\n      if (numberGroupSeparator !== null) {\r\n        format.groupSeparator = numberGroupSeparator;\r\n      }\r\n      return format;\r\n    }\r\n  }\r\n  private get numberFormat(): NumberFormat {\r\n    return this.userSettings && this.userSettings.numberFormat || null;\r\n  }\r\n}","import { Directive, ElementRef, Injector, Input, OnInit } from '@angular/core';\r\n@Directive({\r\n  selector: '[farris-checkbox-modification]'\r\n})\r\nexport class FarrisCheckboxModificationDirective implements OnInit {\r\n  @Input() index: number;\r\n  constructor(private injector: Injector, private elementRef: ElementRef) { }\r\n  ngOnInit(): void {\r\n    if (typeof this.index !== 'number' || !this.elementRef) {\r\n      return;\r\n    }\r\n    const nativeElement = this.elementRef.nativeElement;\r\n    if (nativeElement) {\r\n      const id = nativeElement.getAttribute('id');\r\n      if (id) {\r\n        const token = `${id}_${this.index}`;\r\n        this.elementRef.nativeElement.setAttribute('id', token);\r\n        this.elementRef.nativeElement.setAttribute('name', token);\r\n        this.elementRef.nativeElement.setAttribute('original_id', id);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef, Injector, Input, OnInit } from '@angular/core';\r\n@Directive({\r\n  selector: '[farris-label-modification]'\r\n})\r\nexport class FarrisLabelModificationDirective implements OnInit {\r\n  @Input() index: number;\r\n  constructor(private injector: Injector, private elementRef: ElementRef) { }\r\n  ngOnInit(): void {\r\n    if (typeof this.index !== 'number' || !this.elementRef) {\r\n      return;\r\n    }\r\n    const nativeElement = this.elementRef.nativeElement;\r\n    if (nativeElement) {\r\n      const labelFor = nativeElement.getAttribute('for');\r\n      if (labelFor) {\r\n        this.elementRef.nativeElement.setAttribute('for', `${labelFor}_${this.index}`);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","import { Directive, Input, Optional } from '@angular/core';\r\nimport { ComboLookupComponent } from '@farris/ui-combo-lookup';\r\nimport { LookupGridComponent } from '@farris/ui-lookup';\r\n\r\n@Directive({\r\n  selector: '[farris-lookup-binding]'\r\n})\r\nexport class FarrisLookupBindingDirective {\r\n  @Input() lookupType: string;\r\n  @Input('farris-lookup-binding')\r\n  public set lookupValue(value: any) {\r\n    if (this.lookupType === 'lookup' && this.lookup) {\r\n      this.lookup.writeValue(value);\r\n    } else if (this.lookupType === 'comboLookup' && this.comboLookup) {\r\n      this.comboLookup.writeValue(value);\r\n    }\r\n  }\r\n  constructor(@Optional() private lookup: LookupGridComponent, @Optional() private comboLookup: ComboLookupComponent) { }\r\n}","import { AfterViewInit, Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { ListNavComponent } from '@farris/ui-list-nav';\r\n\r\n@Directive({\r\n  selector: '[listNavRef]'\r\n})\r\nexport class ListNavComponentRefDirective implements OnInit, OnDestroy, AfterViewInit {\r\n  constructor(private injector: Injector, private component: ListNavComponent, private elementRef: ElementRef, private frameContext: FrameContext) {\r\n\r\n  }\r\n  //#region angular lifecycle\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n  ngAfterViewInit(): void {\r\n  }\r\n  //#endregion\r\n}","import { AfterViewInit, Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { ListViewComponent } from \"@farris/ui-list-view\";\r\n\r\n@Directive({\r\n  selector: '[listViewRef]'\r\n})\r\nexport class ListViewComponentRefDirective implements OnInit, OnDestroy, AfterViewInit {\r\n  constructor(private injector: Injector, private component: ListViewComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n  ngAfterViewInit(): void {\r\n  }\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { ListFilterComponent } from '@farris/ui-list-filter';\r\n@Directive({\r\n  selector: '[listFilterRef]'\r\n})\r\nexport class ListFilterComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: ListFilterComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { FilterComponent } from '@farris/ui-filter';\r\n\r\n@Directive({\r\n  selector: '[filterRef]'\r\n})\r\nexport class FilterComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: FilterComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { ViewChangeComponent } from '@farris/ui-view-change';\r\n\r\n@Directive({\r\n  selector: '[viewChangeRef]'\r\n})\r\nexport class ViewChangeComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: ViewChangeComponent, private elementRef: ElementRef, private frameContext: FrameContext) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { HtmlEditorComponent } from '@farris/ui-html-editor';\r\n\r\n@Directive({\r\n  selector: '[htmlEditorRef]'\r\n})\r\nexport class HtmlEditorComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: HtmlEditorComponent, private elementRef: ElementRef, private frameContext: FrameContext) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { FarrisSectionComponent } from '@farris/ui-section';\r\n\r\n@Directive({\r\n  selector: '[sectionRef]'\r\n})\r\nexport class SectionComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: FarrisSectionComponent, private elementRef: ElementRef, private frameContext: FrameContext) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { InputGroupComponent } from '@farris/ui-input-group';\r\n\r\n@Directive({\r\n  selector: '[inputGroupRef]'\r\n})\r\nexport class InputGroupComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: InputGroupComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { FarrisDatepickerComponent } from '@farris/ui-datepicker';\r\n\r\n@Directive({\r\n  selector: '[datepickerRef]'\r\n})\r\nexport class DatepickerComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: FarrisDatepickerComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { TimePickerComponent } from '@farris/ui-time-picker';\r\n\r\n@Directive({\r\n  selector: '[timePickerRef]'\r\n})\r\nexport class TimePickerComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: TimePickerComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { AfterViewInit, Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { NumberSpinnerComponent } from \"@farris/ui-number-spinner\";\r\n\r\n@Directive({\r\n  selector: '[numberSpinnerRef]'\r\n})\r\nexport class NumberSpinnerComponentRefDirective implements OnInit, OnDestroy, AfterViewInit {\r\n  constructor(private injector: Injector, private component: NumberSpinnerComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n  ngAfterViewInit(): void {\r\n  }\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { ComboListComponent } from '@farris/ui-combo-list';\r\n\r\n@Directive({\r\n  selector: '[comboListRef]'\r\n})\r\nexport class ComboListComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: ComboListComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { ComboLookupComponent } from '@farris/ui-combo-lookup';\r\n\r\n@Directive({\r\n  selector: '[comboLookupRef]'\r\n})\r\nexport class ComboLookupComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: ComboLookupComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { LookupGridComponent } from '@farris/ui-lookup';\r\n\r\n@Directive({\r\n  selector: '[lookupGridRef]'\r\n})\r\nexport class LookupGridComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: LookupGridComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\n\r\n@Directive({\r\n  selector: '[datagridRef]'\r\n})\r\nexport class DatagridComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: DatagridComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { TreeTableComponent } from '@farris/ui-treetable';\r\n\r\n@Directive({\r\n  selector: '[treetableRef]'\r\n})\r\nexport class TreetableComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: TreeTableComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { WizardComponent } from '@farris/ui-wizard';\r\n\r\n@Directive({\r\n  selector: '[wizardRef]'\r\n})\r\nexport class WizardComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: WizardComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { DiscussionEditorComponent } from '@farris/discussion-group';\r\n\r\n@Directive({\r\n  selector: '[discussionEditorRef]'\r\n})\r\nexport class DiscussionEditorComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: DiscussionEditorComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { DiscussionListComponent } from '@farris/discussion-group';\r\n\r\n@Directive({\r\n  selector: '[discussionListRef]'\r\n})\r\nexport class DiscussionListComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: DiscussionListComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { NavComponent } from '@farris/ui-nav';\r\n\r\n@Directive({\r\n  selector: '[navRef]'\r\n})\r\nexport class NavComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: NavComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { MultiSelectComponent } from '@farris/ui-multi-select';\r\n\r\n@Directive({\r\n  selector: '[multiSelectRef]'\r\n})\r\nexport class MultiSelectComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: MultiSelectComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { ScrollspyComponent } from '@farris/ui-scrollspy';\r\n\r\n@Directive({\r\n  selector: '[scrollspyRef]'\r\n})\r\nexport class ScrollspyComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: ScrollspyComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","\r\n/**\r\n * ä½¿ç¨æ¹æ³ï¼\r\n * [comob-lookup-data-mapping]=\"{ id: 'user.userId', name: 'user.userName' }\"\r\n * key ä¸ºå¸®å©ä¸çå­æ®µï¼ value ä¸º è¡¨åä¸­çå­æ®µå\r\n * å¸®å©ä¸çåä¸ä¸ªå­æ®µå¯ä»¥æ å°å°è¡¨åä¸­çå¤ä¸ªå­æ®µä¸­ï¼{ ... id: 'user.userid, user.addusid'}\r\n * å¤å­æ®µä»¥éå·éå¼\r\n *\r\n */\r\n\r\nimport { Directive, OnInit, Optional, Self, Input } from '@angular/core';\r\nimport { BindingObject, NgFormControl, ViewModel } from '@farris/devkit';\r\nimport { ComboChanges } from '@farris/ui-combo-list';\r\nimport { ComboLookupComponent } from '@farris/ui-combo-lookup';\r\nimport { DataMapping } from './data-mapping';\r\n\r\n\r\n@Directive({ selector: '[combo-lookup-data-mapping]' })\r\nexport class ComboLookupDataMappingDirective extends DataMapping implements OnInit {\r\n\r\n  @Input('combo-lookup-data-mapping') mapfields: any;\r\n  @Input('target') target: BindingObject = null;\r\n\r\n  constructor(@Optional() public vm: ViewModel, @Optional() @Self() private lookup: ComboLookupComponent) {\r\n    super();\r\n    if (this.lookup) {\r\n      this.lookup.useFormDataMapping = true;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    // å¼ååï¼äº¦éè¿è¯¥äºä»¶è§¦åä»»æè¾å¥æ¸ç©ºäºä»¶\r\n    this.lookup.valueChange.subscribe((result: ComboChanges) => {\r\n      if (!result['nosearch']) {\r\n        // å¼åå\r\n        const data = result.selections && result.selections.length > 0 ? result.selections : null;\r\n        this.onValueChange(data);\r\n      } else {\r\n        // ä»»æè¾å¥æ¸ç©ºæ å°å­æ®µ\r\n        this.onClearMapping();\r\n      }\r\n    });\r\n    // æ¸ç©ºäºä»¶\r\n    this.lookup.clear.subscribe(() => {\r\n      const _mapfields = this.mapfields || this.lookup.mapFields;\r\n      this.mappingData(null, _mapfields);\r\n    });\r\n  }\r\n  private onClearMapping() {\r\n    const mapfields = Object.assign({}, (this.mapfields || this.lookup.mapFields || {}));\r\n    const lookupTextField = this.lookup.textField;\r\n    const data = {};\r\n    const controlName = this.lookup.ngControl && this.lookup.ngControl.name;\r\n    if (controlName && this.vm) {\r\n      const textFieldMapping = mapfields[lookupTextField];\r\n      const ngFormControl = this.vm && this.vm.form && this.vm.form.ngFormControls && this.vm.form.ngFormControls[controlName] as NgFormControl;\r\n      const binding = ngFormControl && ngFormControl.binding;\r\n      if (textFieldMapping && binding) {\r\n        const targetField = textFieldMapping.split(',').filter(item => item !== binding).join(',');\r\n        if (targetField) {\r\n          mapfields[lookupTextField] = targetField;\r\n        } else {\r\n          delete mapfields[lookupTextField];\r\n        }\r\n      }\r\n    }\r\n    // this.setValue(data, lookupTextField.split('.'), value);\r\n    Object.keys(mapfields).forEach(field => {\r\n      this.setValue(data, field.split('.'), '');\r\n    });\r\n    this.mappingData(data, mapfields, true);\r\n  }\r\n  private onValueChange(data) {\r\n    const _mapfields = this.mapfields || this.lookup.mapFields;\r\n    this.mappingData(data, _mapfields);\r\n  }\r\n}\r\n","import { Repository } from \"@farris/devkit\";\r\n\r\nexport abstract class BefRepository extends Repository<any>{\r\n  restService: BefRestService;\r\n}\r\nexport interface BefRestService {\r\n  request(url: string, method: string, params?: any, options?: any, selfHandError?: boolean, ignoreError?: boolean, ignoreChanges?: boolean);\r\n  buildRequestInfo();\r\n}\r\nexport enum ViewType {\r\n  day = 'day',\r\n  week = 'week'\r\n}","export enum ExpressionType {\r\n  UIState = 'UIState',\r\n  BindingData = 'BindingData',\r\n  Unknow = 'UnKnow'\r\n}\r\n\r\nexport interface IFilterDependency {\r\n  type: ExpressionType;\r\n  frameId: string;\r\n  paths: string[]\r\n}","import {\r\n  Directive, OnInit, OnChanges, OnDestroy, SimpleChanges, HostListener,\r\n  EventEmitter, Output, Injector, Input\r\n} from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { debounceTime, finalize } from 'rxjs/operators';\r\nimport { BindingData, BindingList, Change, ChangeType, ViewModel, AppContext, FrameContext, FieldMetadataUtil, DataTypeInfo, BindingObject, EntityPathConverter, RunMode } from '@farris/devkit';\r\nimport { AppointmentCalendarComponent } from '@farris/appointment-calendar';\r\nimport { BefRestService, BefRepository, ViewType } from './types';\r\n\r\n@Directive({\r\n  selector: '[farris-appointment-calendar-binding]'\r\n})\r\nexport class AppointmentCalendarBindingDirective implements OnInit, OnChanges, OnDestroy {\r\n  private bindingDataChangeEvent: Subscription;\r\n  private get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n  private get viewModel(): ViewModel {\r\n    return this.frameContext.viewModel;\r\n  }\r\n  private restService(): BefRestService {\r\n    return (this.frameContext.repository as BefRepository).restService;\r\n  }\r\n  /**\r\n   * è·åç»å®æ°æ®\r\n   */\r\n  protected get bindingList(): BindingList {\r\n    // æ ¹å®ä½\r\n    if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {\r\n      return this.bindingData.list;\r\n    }\r\n    // å­å®ä½\r\n    let bindingPath = this.viewModel.bindingPath.substr(1);\r\n    bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);\r\n    const paths = bindingPath.split('/');\r\n\r\n    const filteredPaths = paths.filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return this.bindingData.getValue(filteredPaths);\r\n  }\r\n  /**\r\n   * æ¿é´åè¡¨api url\r\n   */\r\n  @Input() url: string = null;\r\n  /**\r\n   * http method, default PUT\r\n   */\r\n  @Input() method: string = 'PUT';\r\n  @Input() startDateVariable: string = 'startDate';\r\n  @Input() endDateVariable: string = 'endDate';\r\n  @Input() viewTypeVariable: string = 'viewType';\r\n\r\n  constructor(private injector: Injector, private frameContext: FrameContext, private calendarComponent: AppointmentCalendarComponent) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadPlacements();\r\n    this.registerBindingDataChangeEvent();\r\n  }\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.unRegisterBindingDataChangeEvent();\r\n  }\r\n  private bindData(change: Change) {\r\n    // åtoJSON\r\n    let data: any = this.bindingList.toJSON();\r\n    this.calendarComponent.loadReserveData(data);\r\n  }\r\n  private onBindingDataChange(change: Change) {\r\n    this.bindData(change);\r\n    this.updateSelectedRow(change);\r\n  }\r\n  private registerBindingDataChangeEvent() {\r\n    this.bindingDataChangeEvent = this.bindingData.changes.subscribe((change: Change) => {\r\n      this.onBindingDataChange(change);\r\n    });\r\n  }\r\n  /**\r\n   * åæ¶bindingdataååè®¢é\r\n   */\r\n  private unRegisterBindingDataChangeEvent() {\r\n    if (this.bindingDataChangeEvent && typeof (this.bindingDataChangeEvent.unsubscribe) === 'function') {\r\n      this.bindingDataChangeEvent.unsubscribe();\r\n    }\r\n  }\r\n  private loadPlacements() {\r\n    if (!this.url) {\r\n      console.log('æ æ³å è½½æ¿é´ä¿¡æ¯ï¼è¯·éç½®æ¿é´åè¡¨apiå°å');\r\n      return;\r\n    }\r\n    const requestInfo = this.restService().buildRequestInfo();\r\n    const options = {\r\n      body: {\r\n        requestInfo\r\n      }\r\n    };\r\n    this.restService().request(this.url, this.method, null, options).subscribe((returnValue: any) => {\r\n      this.bindPlacements(returnValue);\r\n    });\r\n  }\r\n  private bindPlacements(placments: any) {\r\n    this.calendarComponent.loadPlaceData(placments);\r\n  }\r\n  private updateState(startDate: string, endDate: string, viewType: string) {\r\n    this.viewModel.uiState.setPropertyValue(this.startDateVariable, startDate);\r\n    this.viewModel.uiState.setPropertyValue(this.endDateVariable, endDate);\r\n    this.viewModel.uiState.setPropertyValue(this.viewTypeVariable, viewType);\r\n  }\r\n  private updateSelectedRow(change?: Change) {\r\n    if (!this.bindingList || !this.bindingList.currentId) {\r\n      return;\r\n    }\r\n    // é¡µç åæ¢æ¶ä¸æ§è¡å½åè¡åæ¢\r\n    if (change && change.type === ChangeType.PaginationInfoChange) {\r\n      return;\r\n    }\r\n    if (this.viewModel && this.viewModel.frameContext.bindingData.rowSelectedEventSuspend === true) {\r\n      return;\r\n    }\r\n    const id = this.calendarComponent.selectedId;\r\n    const currentId = this.bindingList.currentId;\r\n    // gridå½åè¡ä¸bingingListå½åè¡ä¸è´ï¼æ é¡»åæ¢\r\n    if (id === currentId) {\r\n      return;\r\n    }\r\n    this.selectCalendarRow(this.bindingList.currentId);\r\n  }\r\n  private selectCalendarRow(id: string) {\r\n    this.calendarComponent.selectItem(id);\r\n  }\r\n  @HostListener('filterChange', ['$event'])\r\n  public filterChanged(event: any) {\r\n    const { dateValue = null, place = null, viewType = null } = event || {};\r\n    let startDate = null;\r\n    let endDate = null;\r\n    if (!dateValue) {\r\n      return;\r\n    }\r\n    if (viewType === ViewType.day) {\r\n      startDate = `${dateValue} 00:00:00`;\r\n      endDate = `${dateValue} 23:59:59`;\r\n    } else if (viewType === ViewType.week && dateValue.indexOf('~') !== -1) {\r\n      const sections = dateValue.split('~');\r\n      startDate = `${sections[0]} 00:00:00`;\r\n      endDate = `${sections[1]} 23:59:59`;\r\n    }\r\n    this.updateState(startDate, endDate, viewType);\r\n  }\r\n  protected setSelectionIdToBindingData(id: string): void {\r\n    // å¦æå½åè¡ä¸å­å¨ï¼åå¼ºå¶è®¾ç½®\r\n    if (this.bindingList.currentId !== id) {\r\n      this.bindingList.setCurrentId(id, true);\r\n    }\r\n  }\r\n  @HostListener('selectChange', ['$event'])\r\n  public selectChange(event) {\r\n    const { item: { id = null } } = event;\r\n    this.setSelectionIdToBindingData(id);\r\n  }\r\n}","import { Directive, Injector, Input, OnInit } from \"@angular/core\";\r\nimport { Change, ChangeType, FrameContext, UIStateChange, UIStateObservableParam, VariableParseService } from \"@farris/devkit\";\r\nimport { PortletComponent } from '@gspwidget/portlet';\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport { filter } from \"rxjs/operators\";\r\nimport { ExpressionType, IFilterDependency } from \"./types\";\r\n\r\nconst DATA_PATTERN = /\\{:?DATA~(\\S+?)\\}/;\r\nconst DATA_PATTERN_GLOBAL = new RegExp(DATA_PATTERN, 'g');\r\nconst UI_STATE_PATTERN = /\\{:?UISTATE~(\\S+?)\\}/;\r\nconst UI_STATE_PATTERN_GLOBAL = new RegExp(UI_STATE_PATTERN, 'g');\r\n\r\n@Directive({\r\n  selector: \"[portlet-filter-binding]\"\r\n})\r\nexport class PortletFilterBindingDirective implements OnInit {\r\n  private subject: Subject<any> = new Subject<any>();\r\n  private readonly FilterFieldKey = 'dpId';\r\n  private readonly FilterValueKey = 'value';\r\n\r\n  private get changes(): Observable<any> {\r\n    return this.subject;\r\n  }\r\n  @Input(\"portlet-filter-binding\") filters: string | any[];\r\n\r\n  constructor(private injector: Injector, private portletComponent: PortletComponent, private frameContext: FrameContext, private variableParseService: VariableParseService) { }\r\n  public ngOnInit(): void {\r\n    // çå¬æ°æ®ååï¼æ§è¡ç¬¬ä¸æ¬¡çç»å®\r\n    this.frameContext.bindingData.changes.pipe(filter((change: Change) => {\r\n      return (change.type === ChangeType.Load || change.type === ChangeType.Remove || change.type === ChangeType.Update || change.type === ChangeType.SelectionChanged) && (!change.path || change.path.length < 1);\r\n    })).subscribe((change: Change) => {\r\n      this.filter();\r\n    });\r\n    this.changes.subscribe(() => {\r\n      this.filter();\r\n    });\r\n    this.observeChanges();\r\n  }\r\n  private filter() {\r\n    const filters = this.buildFilters();\r\n    this.portletComponent.widget.handleFilterChange(filters);\r\n  }\r\n  public deserializeFilter() {\r\n    if (!this.filters) {\r\n      return [];\r\n    }\r\n    let filters = [];\r\n    if (typeof this.filters === 'string') {\r\n      filters = JSON.parse(this.filters);\r\n    } else if (Array.isArray(this.filters)) {\r\n      filters = this.filters;\r\n    } else {\r\n      console.error('invalid filters');\r\n    }\r\n    return filters;\r\n  }\r\n  /**\r\n   * å°è¡¨åéç½®çè¿æ»¤æ¡ä»¶è½¬æ¢ä¸ºå°é¨ä»¶æ¯æçè¿æ»¤æ¡ä»¶\r\n   * @returns \r\n   */\r\n  private buildFilters(): any[] {\r\n    const filters = this.deserializeFilter();\r\n    const result = [];\r\n    if (!filters || filters.length < 1) {\r\n      return result;\r\n    }\r\n    filters.forEach(filter => {\r\n      result.push({\r\n        dpId: filter[this.FilterFieldKey],\r\n        value: this.variableParseService.parse(filter[this.FilterValueKey], this.frameContext)\r\n      });\r\n    });\r\n    return result;\r\n  }\r\n  private collectDependencies(expression: string): IFilterDependency[] {\r\n    const bindingDataDependencies = this.getBindingDataDependencies(expression);\r\n    const uistateDependencies = this.getUIstateDependencies(expression);\r\n    return bindingDataDependencies.concat(uistateDependencies);\r\n  }\r\n  private getBindingDataDependencies(expression: string): IFilterDependency[] {\r\n    const matchs = expression.match(DATA_PATTERN_GLOBAL);\r\n    return this.buildDependencies(matchs, DATA_PATTERN, ExpressionType.BindingData);\r\n  }\r\n  private getUIstateDependencies(expression: string): IFilterDependency[] {\r\n    const matchs = expression.match(UI_STATE_PATTERN_GLOBAL);\r\n    return this.buildDependencies(matchs, UI_STATE_PATTERN, ExpressionType.UIState);\r\n  }\r\n  private buildDependencies(expressions: RegExpMatchArray, expr: RegExp, expressionType: ExpressionType) {\r\n    const dependencies: IFilterDependency[] = [];\r\n    expressions && expressions.forEach((expression: string) => {\r\n      const pathMatches = expression.match(expr);\r\n      const dependency = this.buildDependency(pathMatches, expressionType);\r\n      dependencies.push(dependency);\r\n    });\r\n    return dependencies;\r\n  }\r\n  private buildDependency(matchs: RegExpMatchArray, expressionType: ExpressionType) {\r\n    if (matchs && matchs.length === 2) {\r\n      const exps = matchs[1].split('/').filter(p => p);\r\n      const frameId = exps.shift();\r\n      const paths = exps;\r\n      const dependency: IFilterDependency = {\r\n        type: expressionType,\r\n        frameId,\r\n        paths\r\n      };\r\n      return dependency;\r\n    }\r\n  }\r\n  private getFrameContext(frameId: string) {\r\n    frameId = this.frameContext.getFrameId(frameId);\r\n    return this.frameContext.appContext.frameContextManager.getFrameContextById(frameId);\r\n  }\r\n  private observeChanges() {\r\n    const filters = this.deserializeFilter();\r\n    filters && filters.forEach((filter: any) => {\r\n      const dependencies = this.collectDependencies(filter[this.FilterValueKey]);\r\n      if (dependencies && dependencies.length > 0) {\r\n        dependencies.forEach((dep: IFilterDependency) => {\r\n          const frameContext = this.getFrameContext(dep.frameId);\r\n          if (dep.type === ExpressionType.BindingData) {\r\n            this.observeBindingDataChange(frameContext, dep.paths);\r\n          } else if (dep.type === ExpressionType.UIState) {\r\n            this.observeUIStateChange(frameContext, dep.paths.pop());\r\n          }\r\n        })\r\n      }\r\n    });\r\n  }\r\n  private observeUIStateChange(frameContext: FrameContext, path: string) {\r\n    frameContext.uiState.changes.subscribe((change: UIStateObservableParam) => {\r\n      if (change.field === path) {\r\n        this.subject.next();\r\n      }\r\n    });\r\n  }\r\n  private observeBindingDataChange(frameContext: FrameContext, paths: string[]) {\r\n    frameContext.bindingData.changes.pipe(\r\n      // åªçå¬ä¸»è¡¨åå\r\n      filter((change: Change) => change.type === ChangeType.ValueChanged)\r\n    ).subscribe((change: Change) => {\r\n      if (change.path.join('/') === paths.join('/')) {\r\n        this.subject.next();\r\n      }\r\n    });\r\n  }\r\n}","import { Injector, Optional, Pipe, PipeTransform } from '@angular/core';\r\nimport { DownloadService } from '@gsp-svc/formdoc-upload';\r\n@Pipe({ name: 'imageIdToUrl' })\r\nclass ImageIdToUrlPipe implements PipeTransform {\r\n  private defaultPic = '/platform/common/web/assets/imgs/no-pic.png';\r\n  private downloadService: DownloadService;\r\n  constructor(@Optional() private injector: Injector) {\r\n    this.downloadService = this.injector && this.injector.get<DownloadService>(DownloadService, null) || null;\r\n  }\r\n\r\n  transform(value: string, rootId: string = 'default-root'): string {\r\n    if (!value) {\r\n      return this.defaultPic;\r\n    }\r\n    //const rootId = 'default-root';\r\n    if (this.downloadService) {\r\n      return this.downloadService.getDownloadUrl(value, rootId);\r\n    } else {\r\n      console.warn('å å®å¨é®é¢ï¼éä»¶ä¸è½½æä¾å®å¨æ ¡éªæºå¶ï¼éä»¶ä¸è½½åè½ééæ°ç¼è¯ã');\r\n      return `/api/runtime/dfs/v1.0/formdoc/download/${value}`;\r\n    }\r\n  }\r\n}\r\n\r\nexport { ImageIdToUrlPipe };\r\n","import { LocaleService } from '@farris/ui-locale';\r\nimport { Pipe, PipeTransform, Injector, Optional } from '@angular/core';\r\nimport { ColumnFormatService } from '@farris/ui-common/column';\r\n\r\n@Pipe({ name: 'formatPrimeNgTreeTableCellData', pure: false })\r\nexport class FormatPrimeNgTreeTableCellData implements PipeTransform {\r\n\r\n  private localeService: LocaleService;\r\n  constructor(private cfs: ColumnFormatService, @Optional() private injector?: Injector) {\r\n    if (this.injector) {\r\n      this.localeService = this.injector.get(LocaleService);\r\n    }\r\n  }\r\n\r\n  transform(col: any, rowData: any): any {\r\n    let value = '';\r\n    if (rowData && col && col.field) {\r\n      value = this.getValue(col.field, rowData);\r\n      let formatterFn = col.formatter;\r\n      if (!formatterFn) {\r\n        if (col.isMultilingualField) {\r\n          return this.getMultiLanguageValue(value);\r\n        } else {\r\n          return value;\r\n        }\r\n      } else {\r\n        return this.cfs.format(value, rowData, formatterFn);\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  // è·åå¤è¯­æ°æ®\r\n  private getMultiLanguageValue(valObj) {\r\n    if (valObj && typeof valObj === 'object' && Object.keys(valObj).length > 0) {\r\n      const localeId = this.localeService && this.localeService.localeId || 'zh-CHS';\r\n      const value = valObj[localeId];\r\n      return value === undefined ? '' : value;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n  private getValue(path: string, target: any) {\r\n    if (!target) {\r\n      return '';\r\n    }\r\n    var resultVal = '';\r\n    if (path.indexOf('.') === -1) {\r\n      resultVal = target[path];\r\n    }\r\n    else {\r\n      resultVal = path.split('.').reduce(((obj, key) => {\r\n        return obj && obj[key] || null;\r\n      }), target);\r\n    }\r\n    return resultVal;\r\n  };\r\n  /**\r\n   * æ¯å¦ä¸ºå¸®å©å\r\n   * @param col col\r\n   */\r\n  private isHelpColumn(col: any) {\r\n    return col && col.editor && col.editor.options && col.editor.options.type === 'EditorTypes.LOOKUP' || false;\r\n  }\r\n  private getHelpColumnValue(col: any, data: any) {\r\n    const textField = this.getHelpControlTextField(col);\r\n    const mapFields = this.getHelpControlMapFields(col);\r\n    if (textField && mapFields && Object.keys(mapFields).length > 0) {\r\n      const path = mapFields[textField];\r\n      return this.getValue(path, data);\r\n    }\r\n    return '';\r\n  }\r\n  private getHelpControlTextField(col: any) {\r\n    return col && col.editor && col.editor.options && col.editor.options.textField || '';\r\n  }\r\n  private getHelpControlMapFields(col: any) {\r\n    return col && col.editor && col.editor.options && col.editor.options.mapFields || {};\r\n  }\r\n}\r\n","import { Inject, Injector, Optional, Pipe, PipeTransform } from \"@angular/core\";\r\nimport { NumberFormat, UserSettings, UserSettingsToken } from \"@farris/devkit\";\r\nimport { BigNumber } from 'bignumber.js';\r\nimport moment from 'moment';\r\n\r\n@Pipe({ name: 'localization' })\r\nexport class Localization implements PipeTransform {\r\n  constructor(@Optional() private injector: Injector, @Inject(UserSettingsToken) private userSettings: UserSettings) {\r\n  }\r\n  public transform(value: any, dataType: string) {\r\n    if (dataType) {\r\n      dataType = dataType.toLowerCase();\r\n      if (dataType === 'date') {\r\n        return this.transformDate(value);\r\n      } else if (dataType === 'datetime') {\r\n        return this.transformDateTime(value);\r\n      } else if (dataType === 'number') {\r\n        return this.transformNumber(value);\r\n      } else {\r\n        return value;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥æ\r\n   * @param value value\r\n   */\r\n  private transformDate(value: any) {\r\n    let dateFormat = this.userSettings && this.userSettings.dateFormat || null;\r\n    if (!dateFormat || !value) {\r\n      return value;\r\n    }\r\n    const date = moment(value);\r\n    const isValid = date.isValid();\r\n    if (!isValid) {\r\n      return value;\r\n    }\r\n    dateFormat = this.parseDateFormat(dateFormat);\r\n    return date.format(dateFormat);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥ææ¶é´\r\n   * @param value value\r\n   * todo: ç®åæ æ³å®ä¹æ¥ææ¶é´æ ¼å¼\r\n   */\r\n  private transformDateTime(value: any) {\r\n    let dateFormat = this.userSettings && this.userSettings.dateFormat || '';\r\n    let timeFormat = this.userSettings && this.userSettings.timeFormat || '';\r\n    const dateTime = moment(value);\r\n    const isValid = dateTime.isValid();\r\n    if (!isValid) {\r\n      return value;\r\n    }\r\n    if (dateFormat) {\r\n      dateFormat = this.parseDateFormat(dateFormat);\r\n    }\r\n    if (timeFormat) {\r\n      timeFormat = this.parseTimeFormat(timeFormat);\r\n    }\r\n    const dateTimeFormat = dateFormat + ' ' + timeFormat;\r\n    return dateTime.format(dateTimeFormat);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ°å­\r\n   * @param value value\r\n   */\r\n  private transformNumber(value): string {\r\n    if (value === null || value === undefined || value === '') {\r\n      return '';\r\n    }\r\n    const bigNumber = new BigNumber(value);\r\n    // å¦æä¸æ¯æ°å­ï¼ä¸åä»»ä½å¤ç\r\n    if (!BigNumber.isBigNumber(bigNumber)) {\r\n      return value;\r\n    }\r\n    const isNegative = bigNumber.isNegative();\r\n    const format = this.buildNumberFormat();\r\n    const { negativeSign = null, numberDecimalDigits = null } = this.numberFormat;\r\n    if (isNegative) {\r\n      if (negativeSign !== null) {\r\n        format.prefix = negativeSign;\r\n        return bigNumber.absoluteValue().toFormat(numberDecimalDigits, null, format);\r\n      }\r\n    }\r\n    return bigNumber.toFormat(numberDecimalDigits, null, format);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥ææ ¼å¼è§åä¸ºmomentçformatè§å\r\n   * @param format format\r\n   */\r\n  private parseDateFormat(format: string) {\r\n    return format.replace(/y/g, 'Y').replace(/d/g, 'D');\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¶é´æ ¼å¼è§åä¸ºmomentçformatè§å\r\n   * @param format format\r\n   */\r\n  private parseTimeFormat(format: string) {\r\n    return format.replace(/M/g, 'm');\r\n  }\r\n  /**\r\n   * æé bignumberæ°å­æ ¼å¼åéé¡¹\r\n   */\r\n  private buildNumberFormat() {\r\n    if (this.numberFormat) {\r\n      const { numberDecimalSeparator = null, numberGroupSeparator = null } = this.numberFormat;\r\n      const format: any = {\r\n        groupSize: 3,\r\n      };\r\n      if (numberDecimalSeparator !== null) {\r\n        format.decimalSeparator = numberDecimalSeparator;\r\n      }\r\n      if (numberGroupSeparator !== null) {\r\n        format.groupSeparator = numberGroupSeparator;\r\n      }\r\n      return format;\r\n    }\r\n  }\r\n  private get numberFormat(): NumberFormat {\r\n    return this.userSettings && this.userSettings.numberFormat || null;\r\n  }\r\n}","import { DialogService } from '@farris/ui-dialog';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GridComponent } from '@progress/kendo-angular-grid';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport {\r\n  KendoGridBindingDirective,\r\n  FarrisTreeTableBindingDirective,\r\n  LookupDataMappingDirective,\r\n  LookupEnableExtendLoadMethodDirective,\r\n  UIStateBindingDirective,\r\n  FarrisDisabledDirective,\r\n  FarrisDynamicColumnFormatDirective,\r\n  FarrisEditEnterDirective,\r\n  FarrisTextareaEditDirective,\r\n  FarrisSortDirective,\r\n  FarrisTreeTableFormatDirective,\r\n  GridColumnAggregateDirective,\r\n  GridSummaryDirective,\r\n  FarrisDatagridUseBindingDataDirective,\r\n  MultiSelectDataMappingDirective,\r\n  FarrisListViewBindingDirective,\r\n  EditableDirective,\r\n  InputEndEditDirective,\r\n  FarrisDataGridEndEditDirective,\r\n  HtmlEditorEndEditDirective,\r\n  KendoGridEndEditDirective,\r\n  FarrisDataGridRemoteSummaryDirective,\r\n  FarrisFilePreviewBindingDirective,\r\n  FarrisSetFocusDirective,\r\n  FarrisDiscussionEditorBindingDirective,\r\n  FarrisDiscussionListBindingDirective,\r\n  FarrisPrimengTreeTableBindingDirective,\r\n  FarrisDynamicRequiredDirective,\r\n  FarrisEditorDirective,\r\n  FarrisQuerySolutionEventBindDirective,\r\n  FarrisDateLocalizationDirective,\r\n  FarrisNumberLocalizationDirective,\r\n  FarrisTimeLocalizationDirective,\r\n  FarrisTextLocalizationDirective,\r\n  FarrisCheckboxModificationDirective,\r\n  FarrisLabelModificationDirective,\r\n  FarrisLookupBindingDirective,\r\n  ListNavComponentRefDirective,\r\n  ListViewComponentRefDirective,\r\n  ListFilterComponentRefDirective,\r\n  ViewChangeComponentRefDirective,\r\n  FilterComponentRefDirective,\r\n  SectionComponentRefDirective,\r\n  HtmlEditorComponentRefDirective,\r\n  InputGroupComponentRefDirective,\r\n  DatepickerComponentRefDirective,\r\n  TimePickerComponentRefDirective,\r\n  NumberSpinnerComponentRefDirective,\r\n  ComboListComponentRefDirective,\r\n  ComboLookupComponentRefDirective,\r\n  LookupGridComponentRefDirective,\r\n  DatagridComponentRefDirective,\r\n  TreetableComponentRefDirective,\r\n  WizardComponentRefDirective,\r\n  DiscussionEditorComponentRefDirective,\r\n  DiscussionListComponentRefDirective,\r\n  NavComponentRefDirective,\r\n  MultiSelectComponentRefDirective,\r\n  ScrollspyComponentRefDirective,\r\n  ComboLookupDataMappingDirective,\r\n  AppointmentCalendarBindingDirective,\r\n  PortletFilterBindingDirective\r\n} from './directives/index';\r\nimport {\r\n  FarrisKendoGridFormatService, FarrisTreetableFormatService, StringToDatePipe,\r\n  DateFormatPlaceholderPipe, KendoGridFilterDirective, FormatTotalPipe\r\n} from './format/index';\r\nimport { ImageIdToUrlPipe, FormatPrimeNgTreeTableCellData, Localization } from './pipes/index';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FarrisCommonModule.forRoot()\r\n  ],\r\n  declarations: [\r\n    KendoGridBindingDirective,\r\n    FarrisTreeTableBindingDirective,\r\n    LookupDataMappingDirective,\r\n    LookupEnableExtendLoadMethodDirective,\r\n    UIStateBindingDirective,\r\n    FarrisDisabledDirective,\r\n    FarrisSortDirective,\r\n    FarrisDynamicColumnFormatDirective,\r\n    FarrisEditEnterDirective,\r\n    FarrisTextareaEditDirective,\r\n    FarrisTreeTableFormatDirective,\r\n    StringToDatePipe,\r\n    GridColumnAggregateDirective,\r\n    GridSummaryDirective,\r\n    DateFormatPlaceholderPipe,\r\n    ImageIdToUrlPipe,\r\n    FormatPrimeNgTreeTableCellData,\r\n    FarrisDatagridUseBindingDataDirective,\r\n    MultiSelectDataMappingDirective,\r\n    FarrisListViewBindingDirective,\r\n    EditableDirective,\r\n    KendoGridFilterDirective,\r\n    FormatTotalPipe,\r\n    InputEndEditDirective,\r\n    FarrisDataGridEndEditDirective,\r\n    HtmlEditorEndEditDirective,\r\n    KendoGridEndEditDirective,\r\n    FarrisDataGridRemoteSummaryDirective,\r\n    FarrisFilePreviewBindingDirective,\r\n    FarrisSetFocusDirective,\r\n    FarrisDiscussionEditorBindingDirective,\r\n    FarrisDiscussionListBindingDirective,\r\n    FarrisPrimengTreeTableBindingDirective,\r\n    FarrisDynamicRequiredDirective,\r\n    FarrisEditorDirective,\r\n    FarrisQuerySolutionEventBindDirective,\r\n    FarrisDateLocalizationDirective,\r\n    FarrisNumberLocalizationDirective,\r\n    FarrisTimeLocalizationDirective,\r\n    FarrisTextLocalizationDirective,\r\n    Localization,\r\n    FarrisCheckboxModificationDirective,\r\n    FarrisLabelModificationDirective,\r\n    FarrisLookupBindingDirective,\r\n    ListNavComponentRefDirective,\r\n    ListViewComponentRefDirective,\r\n    ListFilterComponentRefDirective,\r\n    ViewChangeComponentRefDirective,\r\n    FilterComponentRefDirective,\r\n    SectionComponentRefDirective,\r\n    HtmlEditorComponentRefDirective,\r\n    InputGroupComponentRefDirective,\r\n    DatepickerComponentRefDirective,\r\n    TimePickerComponentRefDirective,\r\n    NumberSpinnerComponentRefDirective,\r\n    ComboListComponentRefDirective,\r\n    ComboLookupComponentRefDirective,\r\n    LookupGridComponentRefDirective,\r\n    DatagridComponentRefDirective,\r\n    TreetableComponentRefDirective,\r\n    WizardComponentRefDirective,\r\n    DiscussionEditorComponentRefDirective,\r\n    DiscussionListComponentRefDirective,\r\n    NavComponentRefDirective,\r\n    MultiSelectComponentRefDirective,\r\n    ScrollspyComponentRefDirective,\r\n    ComboLookupDataMappingDirective,\r\n    AppointmentCalendarBindingDirective,\r\n    PortletFilterBindingDirective\r\n  ],\r\n  providers: [\r\n    DialogService, GridComponent, FarrisKendoGridFormatService, FarrisTreetableFormatService],\r\n  exports: [\r\n    KendoGridBindingDirective,\r\n    FarrisTreeTableBindingDirective,\r\n    LookupDataMappingDirective,\r\n    LookupEnableExtendLoadMethodDirective,\r\n    UIStateBindingDirective,\r\n    FarrisDisabledDirective,\r\n    FarrisSortDirective,\r\n    FarrisDynamicColumnFormatDirective,\r\n    FarrisEditEnterDirective,\r\n    FarrisTextareaEditDirective,\r\n    FarrisTreeTableFormatDirective,\r\n    StringToDatePipe,\r\n    GridColumnAggregateDirective,\r\n    DateFormatPlaceholderPipe,\r\n    ImageIdToUrlPipe,\r\n    FormatPrimeNgTreeTableCellData,\r\n    FarrisDatagridUseBindingDataDirective,\r\n    MultiSelectDataMappingDirective,\r\n    FarrisListViewBindingDirective,\r\n    EditableDirective,\r\n    KendoGridFilterDirective,\r\n    FormatTotalPipe,\r\n    InputEndEditDirective,\r\n    FarrisDataGridEndEditDirective,\r\n    HtmlEditorEndEditDirective,\r\n    KendoGridEndEditDirective,\r\n    FarrisDataGridRemoteSummaryDirective,\r\n    FarrisFilePreviewBindingDirective,\r\n    FarrisSetFocusDirective,\r\n    FarrisDiscussionEditorBindingDirective,\r\n    FarrisDiscussionListBindingDirective,\r\n    FarrisPrimengTreeTableBindingDirective,\r\n    FarrisDynamicRequiredDirective,\r\n    FarrisEditorDirective,\r\n    FarrisQuerySolutionEventBindDirective,\r\n    FarrisDateLocalizationDirective,\r\n    FarrisNumberLocalizationDirective,\r\n    FarrisTimeLocalizationDirective,\r\n    FarrisTextLocalizationDirective,\r\n    Localization,\r\n    FarrisCheckboxModificationDirective,\r\n    FarrisLabelModificationDirective,\r\n    FarrisLookupBindingDirective,\r\n    ListNavComponentRefDirective,\r\n    ListViewComponentRefDirective,\r\n    ListFilterComponentRefDirective,\r\n    ViewChangeComponentRefDirective,\r\n    FilterComponentRefDirective,\r\n    SectionComponentRefDirective,\r\n    HtmlEditorComponentRefDirective,\r\n    InputGroupComponentRefDirective,\r\n    DatepickerComponentRefDirective,\r\n    TimePickerComponentRefDirective,\r\n    NumberSpinnerComponentRefDirective,\r\n    ComboListComponentRefDirective,\r\n    ComboLookupComponentRefDirective,\r\n    LookupGridComponentRefDirective,\r\n    DatagridComponentRefDirective,\r\n    TreetableComponentRefDirective,\r\n    WizardComponentRefDirective,\r\n    DiscussionEditorComponentRefDirective,\r\n    DiscussionListComponentRefDirective,\r\n    NavComponentRefDirective,\r\n    MultiSelectComponentRefDirective,\r\n    ScrollspyComponentRefDirective,\r\n    ComboLookupDataMappingDirective,\r\n    AppointmentCalendarBindingDirective,\r\n    PortletFilterBindingDirective\r\n  ]\r\n})\r\nclass KendoBindingModule {\r\n}\r\n\r\nexport { KendoBindingModule };\r\n"]}