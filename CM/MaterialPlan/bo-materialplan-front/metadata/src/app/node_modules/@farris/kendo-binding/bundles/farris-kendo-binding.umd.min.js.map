{"version":3,"sources":["ng://@farris/kendo-binding/lib/converters/array_converter.ts","ng://@farris/kendo-binding/lib/converters/date_converter.ts","ng://@farris/kendo-binding/lib/converters/multi_lang_converter.ts","ng://@farris/kendo-binding/lib/converters/filter_conditions_converter.ts","node_modules/tslib/tslib.es6.js","ng://@farris/kendo-binding/lib/format/datatable-kendogrid-format.ts","ng://@farris/kendo-binding/lib/format/treetable-format.ts","ng://@farris/kendo-binding/lib/format/string-to-date.pipe.ts","ng://@farris/kendo-binding/lib/format/kendogrid-filter.ts","ng://@farris/kendo-binding/lib/format/dateformat-placeholder.pipe.ts","ng://@farris/kendo-binding/lib/format/kendogrid-group.pipe.ts","ng://@farris/kendo-binding/lib/directives/grid-summary.directive.ts","ng://@farris/kendo-binding/lib/util/multi_select_grid_utility.ts","ng://@farris/kendo-binding/lib/entity/selected_row_context.ts","ng://@farris/kendo-binding/lib/directives/kendo_grid_binding.directive.ts","ng://@farris/kendo-binding/lib/directives/tree_table_node_builder/path_tree_node_builder.ts","ng://@farris/kendo-binding/lib/directives/tree_table_node_builder/parent_tree_node_builder.ts","ng://@farris/kendo-binding/lib/directives/tree_table_node_builder/tree_node_builder_factory.ts","ng://@farris/kendo-binding/lib/directives/farris_tree_table_binding.directive.ts","ng://@farris/kendo-binding/lib/directives/data-mapping.ts","ng://@farris/kendo-binding/lib/directives/lookup-data-mapping.directive.ts","ng://@farris/kendo-binding/lib/directives/lookup-enable-extend-load-method.directive.ts","ng://@farris/kendo-binding/lib/directives/uistate-binding.directive.ts","ng://@farris/kendo-binding/lib/directives/farris-kendogrid-disabled.directive.ts","ng://@farris/kendo-binding/lib/directives/farris-sort.directive.ts","ng://@farris/kendo-binding/lib/directives/farris-datagrid/farris-datagrid-use-binding-data.directive.ts","ng://@farris/kendo-binding/lib/directives/multi-select-data-mapping.directive.ts","ng://@farris/kendo-binding/lib/directives/list-view/farris_listview_binding.directive.ts","ng://@farris/kendo-binding/lib/directives/farris-datagrid/editable.directive.ts","ng://@farris/kendo-binding/lib/directives/end-edit/abstract_end_edit.ts","ng://@farris/kendo-binding/lib/directives/end-edit/input_end_edit.directive.ts","ng://@farris/kendo-binding/lib/directives/end-edit/farris_data_grid_end_edit.directive.ts","ng://@farris/kendo-binding/lib/directives/end-edit/html_editor_end_edit.directive.ts","ng://@farris/kendo-binding/lib/directives/end-edit/kendo_grid_end_edit.directive.ts","ng://@farris/kendo-binding/lib/directives/farris-datagrid/remote-summary.directive.ts","ng://@farris/kendo-binding/lib/directives/farris-set-focus.directive.ts","ng://@farris/kendo-binding/lib/directives/file-preview/farris-file-preview-binding.directive.ts","ng://@farris/kendo-binding/lib/directives/discussion-group/farris_discussion_editor_binding.directive.ts","ng://@farris/kendo-binding/lib/directives/discussion-group/farris_discussion_list_binding.directive.ts","ng://@farris/kendo-binding/lib/directives/primeng-tree-grid/FarrisPrimengTreeTableBindingDirective.ts","ng://@farris/kendo-binding/lib/directives/dynamic_validate/farris_dynamic_validate.directive.ts","ng://@farris/kendo-binding/lib/directives/farris_editor.directive.ts","ng://@farris/kendo-binding/lib/directives/farris_querysolution_event_bind.directive.ts","ng://@farris/kendo-binding/lib/directives/localization/farris_date_localization.directive.ts","ng://@farris/kendo-binding/lib/directives/localization/farris_number_localization.directive.ts","ng://@farris/kendo-binding/lib/directives/localization/farris_time_localization.directive.ts","ng://@farris/kendo-binding/lib/directives/localization/farris_text_localization.directive.ts","ng://@farris/kendo-binding/lib/directives/farris_checkbox_modification.directive.ts","ng://@farris/kendo-binding/lib/directives/farris_label_modification.directive.ts","ng://@farris/kendo-binding/lib/directives/farris_lookup_binding.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/list-nav-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/list-view-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/list-filter-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/filter-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/view-change-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/html-editor-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/section-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/input-group-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/datepicker-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/time-picker-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/number-spinner-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/combo-list-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/combo-lookup-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/lookup-grid-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/datagrid-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/treetable-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/wizard-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/discussion-editor-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/discussion-list-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/nav-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/multi-select-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/component-ref/scrollspy-component-ref.directive.ts","ng://@farris/kendo-binding/lib/directives/combo-lookup-data-mapping.directive.ts","ng://@farris/kendo-binding/lib/pipes/image-id-to-url.pipe.ts","ng://@farris/kendo-binding/lib/pipes/formatPrimeNgTreeTableCellData.ts","ng://@farris/kendo-binding/lib/pipes/localization.pipe.ts","ng://@farris/kendo-binding/lib/kendo_binding_module.ts"],"names":["ArrayConverter","prototype","convertFrom","value","split","this","separator","convertTo","join","DateConverter","DateUtil","isEmptyDateString","parse","Object","toString","call","year","getFullYear","length","repeat","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","format","MultiLangConverter","assign","multiLangControlValue","FilterConditionsConverter","conditionsString","JSON","conditions","stringify","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__assign","t","s","i","n","arguments","apply","__values","o","m","Symbol","iterator","next","done","__read","r","e","ar","push","error","__spread","concat","FarrisKendoGridFormatService","getColumnFormat","dataItem","column","getValue","type","getEnumText","getFormatDate","getFormatNumber","getMultiText","field","indexOf","reduce","result","tempColumnText","enumData","forEach","ele","name","dateFormat","dateService","formatTo","precision","parseInt","substr","editor","isNaN","opts","prefix","suffix","thousand","stripZeros","numberService","formatMoney","strValue","Error","replace","Injectable","DateTimeHelperService","NumberHelperService","FarrisTreetableFormatService","setFormat","treeTable","columns","dataType","formatter","options","data","valueField","textField","StringToDatePipe","transform","exponent","includes","strDate","Date","Pipe","args","tslib_1.__extends","BaseFilterCellComponent","defineProperty","KendoGridFilterDirective","filter","filterByField","dataField","ngOnInit","dropdownList","valuePrimitive","defaultItem","selectedValue","onChange","applyFilter","removeFilter","updateFilter","operator","Directive","selector","DropDownListComponent","FilterService","Input","HostListener","filterService","_this","_super","DateFormatPlaceholderPipe","controlName","viewModel","form","get","dateStr","toISOString","ViewModel","FormatTotalPipe","dataFormat","toFixed","Number","substring","GridColumnAggregateDirective","aggregate","recalculateSummary","bindingList","summary","aggrType","plainData","toJSON","map","item","prevPath","currPath","prev","curr","updateFooter","content","ColumnComponent","NgZone","ngZone","BindingData","GridSummaryDirective","bindingData","MultiSelectGridUtility","renderClickChangedRow","gridComponent","selectedRowContext","currentRowIndex","addRowSelectedStyle","lastRowIndex","checIfIsSameRelativeIndex","removeRowSelectedStyle","isSameRelativeIndex","Math","abs","checkIfEnablePaging","isPageable","pageable","renderSelectedChangeCheckbox","elementRef","$event","index","trCollection","getTrCollection","currentTableRowElement","selected","appendAtrributeValue","CHECKBOXED_ROW_STYLE_NAME","removeAttributeSpecificValue","rowIndex","currentRowElement","getRelativeRowInCurrentPage","CURRENT_ROW_STYLE_NAME","rowElementInCurrentPage","gridElement","wrapper","nativeElement","kendoGridTbodyElements","getElementsByTagName","currentElement","attributeName","attributeValue","newAttributeValue","getAttribute","setAttribute","needRemoveAttributeValue","lastClassAttributeValue","lastIndexOf","SelectedRowContext","KendoGridBindingDirective","DataBindingDirective","grid","selectable","isMultipleSelectionMode","selectableSettings","mode","bindingPath","list","filteredPaths","toLowerCase","part","getPagingInfo","pagingInfo","path","initDataState","refreshView","bindingChangeSubscription","changes","subscribe","change","ChangeType","Load","checkIfChangeMatchBindingPath","selectionDir","selectedKeys","uiState","setPropertyValue","runOutsideAngular","setTimeout","rowSelectedContext","skip","handleSelectedRowChange","Remove","syncDeletedKeys","isMatch","handleSelectedKeyChange","currentId","checkCurrentRowIdExists","SelectionChanged","dataId","renderCurrentRow","Append","editable","farrisBindingGridOption","gridColumns","lockable","some","frozen","rowClass","emit","element","linkedLabelEnabled","linkEvent","kendogridFormatSer","getClassName","dictPicking","param","of","dictPicked","cellClickHandler","cellClickParam","bindingGridOption","IsMultipleSelectionMode","self_1","ngAfterViewInit","changePathArray","bingdingPathArray","currentRowId","emitSelectedRowChange","splice","selectedKeysChange","selectedRowChange","isExist","deletedValueCollection","id","renderSelectionRow","ngOnChanges","ngOnDestroy","unsubscribe","refreshData","refreshSummary","bindData","_a","_b","pageIndex","_c","pageSize","updatePager","endCellEdit","ignoreMultiLangInput","isEditing","cancelCell","aggrColumns","aggrCol","onPageChange","event","take","setPagingInfo","resetPageInfo","aggregatesDes","groupAggrFields","tslib_1.__values","groupAggrField","group","groupField","aggregates","onStateChange","state","currentSkip","applyState","rebind","process","total","totalCount","isEditMode","processed","max","selectedKeysChangeHandler","setSelectionIdToBindingData","selectionChangeHandler","handleSelectedCheckboxChange","selectedCheckboxChange","cellClickEvent","columnIndex","sender","gridOption","groupable","getSelectedIdFromGrid","isEditable","editTemplate","isEdited","originColums","getColumns","fields","currentColumnIndex","findIndex","col","hiddenColLen","slice","visible","setEditable","getPrimary","row","isArray","rowNumber","primaryKey","cellCloseHandler","dialogSer","hasDialogOpened","preventDefault","rts","getFormState","originalEvent","eventPath","find","tagName","formGroup","currentCol","formControlValue","binding","getDynamicData","setValue","enterCell","shiftKey","keyCode","target","blur","enterNextCell","buttonCount","info","pageSizes","previousNext","columnNumber","dataRowNumber","getGroupItem","tempIndex","showLineNumber","params","notReadOnly","editCell","updateIndex","newColumnIndex","len","readonly","currentColumnType","fieldPaths","getFieldPaths","items","len_1","appendRow","observers","interVal","setInterval","clearInterval","key","setCurrentId","undefined","stateMachine","isDataChanged","hasUnsavedData","entityArray","frameContext","repository","entityCollection","toArray","entityArray_1","entityArray_1_1","UIState","decorators","Optional","FrameEventBus","GridComponent","SelectionDirective","DialogService","RuntimeStateService","Output","ContentChildren","eventBus","EventEmitter","sortChangeEvent","appContext","getFormAppContext","messagePipe","message","closeCell","PathTreeNodeBuilder","context","updateTreeNode","allNodesData","initLevelGroup","buildNodesDataMap","build","tree","childrenOf","parentId","getParentId","isNewNode","expandParentNode","node","buildNode","children","allNodesMap","set","build1","minLayer","hierarchyInfo","getHierarchyInfo","layer","topLayer","buildNodes","allNodes","fPath","fLayer","treeNodes","getChildNodesData","nodeData","currentLayer","currentPath","isLeaf","shouldExpand","isExpanded","expandNode","paginationInfo","buildPaginationInfo","treeNode","expanded","leaf","pagination","pageCount","getNodeLayer","id_1","nodesWaitExpand","nodesShouldExpand","nodeId","expandLevel","oldTreeNode","getOldNode","getNodePath","childs","id_2","onTreeLoadComplete","component","findRowNode","childNodesData","startsWith","hierarchyInfoKey","levelGroup","parent","getLevelGroupKey","currentHierarchyInfo","isDetail","level","paths","newData","allOldNodesMap","size","parentTreeNode","getParentNode","from","values","currentNode","oldTreeNodes","addTreeLoadCompleteListener","bind","Map","ParentTreeNodeBuilder","parents","parentElement","keys","fParentElement","currentParentElement","getNodeParentElement","TreeNodeBuilderFactory","getBuilder","builder","FarrisTreeTableBindingDirective","_PROP","getVirtualRootFrameContext","setParam","ValueChanged","PaginationInfoChange","renderSubject","rowSelectedEventSuspend","setSelectedIdToTree","updateCheckedRows","treetableFormatSer","cellClass","setComponentRef","setNodePaginationInfo","registerEvent","columnSorted","sortName","sortOrder","remoteSort","sortBy","frameId","el","componentRefs","enableNodePagination","paginationForChildren","nodePageSize","treeNodesData","prop","treeExpandLevel","storage","treeNodesBuilder","updatePageInfo","listeners","listener","shouldComponentUpdate","newProp","getSelectedIdFromTree","selectedRow","selectedId","oldSelectedId","nodePageChanged","clearSelections","selectNode","delete","setCurrentIdToBindingList","oldCurrentId","multiSelect","setChecks","setCheckedRows","ids","getChecks","rows","otherPageItem","idOrIds","idField","checkValuesChange","checkValues","expandHandler","virtualRootFrameContext","expandNodes","getParam","onPageChanged","onPageSizeChanged","onNodePageChanged","TreeTableComponent","FrameContext","Subject","pipe","debounceTime","DataMapping","mappingData","helpData","mapFields","asClear","vm","changeDetectionController","detach","basePaths","primaryKeys","primaryFields","helpFields","getBindingPathArray","primaryInfo","getMapFieldsPrimaryKey","primaryField","sortMapFieldKeys","reverse","mapping","reattach","sortedKeyFields","targetPrimaryFields","val","getHelpValue","mappings","headMappings","leftMappings","updateTarget","targetFieldPath","updateTargetValue","clearValue","f","a","isNumberValue","currentVal","isNumber","bindingPaths","results","entityTypeInfo_1","entityTypeInfo","mapField","propInfo","getPropInfoByPath","metadataInfo","primary","console","Set","LookupDataMappingDirective","lookup","selectedData","_mapfields","mapfields","clearMappings","lookupTextField","ngControl","textFieldMapping","ngFormControl","ngFormControls","binding_1","clear","LookupGridComponent","Self","LookupEnableExtendLoadMethodDirective","enableExtendLoadMethod","befApiUrl","apiUri","enableKey","uri","UIStateBindingDirective","_bindingObject","differ","differs","onValueChange","hostComboComponent","bindingObject","hostHelpComponent","bindObjectToHostLookup","hostComboListComponent","bindObjectToHostComboList","hostComboLookupComponent","bindObjectToHostComboLookup","ngDoCheck","diff","bindingChanges","text","vField_1","writeValue","displayValue","selectedValues","updateHelpBindingObject","nosearch","valueChanged","txt","valueChange","selections","selectChange","emitUiStateBinding","newObject","c","UIStateBindingChange","ComboBoxComponent","Host","KeyValueDiffers","ComboListComponent","ComboLookupComponent","FarrisDisabledDirective","maskElement","createMaskElement","kendoGridDisabled","renderer","removeStyle","setStyle","createElement","appendChild","ElementRef","Renderer2","FarrisSortDirective","FarrisTextareaEditDirective","FarrisDynamicColumnFormatDirective","FarrisEditEnterDirective","FarrisTreeTableFormatDirective","FarrisDatagridUseBindingDataDirective","_PROPS","pageList","window","updateSelectedRow","registerBindingDataChangeEvent","renderGridSubject","isDisposed","nodeCode","props","buildProps","runMode","RunMode","highSpeed","gridProps","buildGridProps","sortFields","sortDirection","entityType","dataTypeInfo_1","DataTypeInfo","directions","sortConditionManager","setConditions","sortDirections","sortBindingList","filterChanged","filters","remoteFilter","getIdByIndex","arrSortFields","arrSortDirection","isRemoteFilter","clearCondition","clientFilterService","executeFilter","GlobalSelectionChanged","firstRowId","renderGrid","virtualizedLoad","virtualizedAsyncLoad","controlPaginationState","loadVirtualData","loadData","datas","_d","onBindingDataChange","updateDataSource","updateData","gridSelectedRowId","selectGridRow","selectRow","bindingDataChangeEvent","unRegisterBindingDataChangeEvent","eventBindingPath","isRetrieve","fullPaths","EntityPathConverter","toEntityPathArray","configPath","getPaginationConfigByPath","parentNodeCode","parentConfigPath","parentPageSize","queryChild","finalize","fireSelectedRowChange","clearCheckedRows","clearCheckeds","scrollToCurrentRow","pageChangedHandler","selectedRowChanged","unSelected","checkedChanged","pageSizeChanged","scrollY","pager","DatagridComponent","MultiSelectDataMappingDirective","_this_1","multiSelectComponent","dataSource","originalDataSource","isTree","fjmField","plainToTree","fjdField","buildTreeNodesByFjd","getTreeSelectionsById","getListSelectionsById","selectIdBindingToUIStateField","selectedIdChange","selectedIdChanged","formatDataSource","plainSource","treeSource","recursive","parentPath","parentLayer","itemPath","itemLayer","targetPath","reusltObj","bindingObjects","treeData","MultiSelectComponent","FarrisListViewBindingDirective","setListViewPageProps","listview","supportPaging","supportPaged","currentPage","itemsPerPage","totalItems","paginationOptions","listViewChangeDetectRef","detectChanges","paginationDirective","instances","setTotalItems","changeDetectorRef","_e","setData","clickItem","changeRow","checkChangeEvent","activeIndex","pageInfo","pageSizeChangedHandler","ListViewComponent","EditableDirective","handleGroupStatus","gridEditable","disableHeader","handleBeginEditEvent","handleAfterEditEvent","handleEndEditEvent","sort","disableGroupOnEditing","groupFields","setGroupFields","groupField_1","pop","beginEditSubscription","beginEdit","editorInstance_1","componentRef","instance","mapFields_1","subject","lookupMapping","parentPaths","pathArr","afterEdit","rowData","formControl","endEditSubscription","endEdit","primaryValue","updateBindingData","isBigNumber","bigNumber","updateBindingList","propertyName","propertyNames","currentItem","primaryKeyValue","findById","targetBindingObject_1","fpaths","targetPropertyName","h","ff","Injector","injector","AbstractEndEdit","InputEndEditDirective","parent_1","parentNode","inputs","input","AppContext","FarrisDataGridEndEditDirective","datagrid","HtmlEditorEndEditDirective","HtmlEditorComponent","KendoGridEndEditDirective","FarrisDataGridRemoteSummaryDirective","execute","commandName","frameContextManager","getFrameContextById","remoteSummaryCommand","footerDataFrom","func_1","footerData","FarrisSetFocusDirective","_state","selfEl","nodeName","setHtmlEditorFocus","setFocus","querySelectorAll","focus","ediotrArea","querySelector","range","getSelection","selectAllChildren","collapseToEnd","rd","BehaviorSubject","FarrisFilePreviewBindingDirective","getList","uploadAndPreviewComponent","orderField","fileInfos","getFileInfos","listData","idKey","itemData","getValueByPath","fileId","fileIdKey","fileInfo","fileNameKey","fileSizeKey","createTime","fileCreateTimeKey","originalData","extend","metadataId","extendFileInfo","fileSortOrderKey","fileSortOrder","currentValue","getUdtPaths","previewComponent","FFilePreviewComponent","UploadAndPreviewComponent","KEY_UISTATE_REPLY_MESSAGE","FarrisDiscussionEditorBindingDirective","discussionEditorComponent","replyUser","root","queryFrequentAtUsersCommand","queryFrequentAtUsers","queryAtUsers","queryAllOrgs","queryAllOrgsCommand","sectionData","userQueryCommand","users","personnels","msgInfo","visibility","addCommentCommand","tap","catchError","EMPTY","func","DiscussionEditorComponent","FarrisDiscussionListBindingDirective","queryComments","discussionListComponent","commentsQueryCommand","comments","discussionListDirective","discussionListData","replyMessagedHandler","DiscussionListComponent","DiscussionListDirective","FarrisPrimengTreeTableBindingDirective","getHierarchyInfoField","infos","hierarchyInfoField","getEntityArr","bindingPathArr","str","pathArray","getEntitiesByPath","setActualIndex","entityArr","counter","rootNode","traverseTree","entity","handleChange","handleSelectionChanged","handleValueChanged","frmPath","same","bindingPathArr_1","bindingPathArr_1_1","shift","nodes","targetNode","nodes_1","nodes_1_1","findTreeNodeById","keyValue","lazy","totalRecords","_value","sortMode","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","tableService","onUIUpdate","updateSerializedValue","treeTableSelectedEvent","selectedRowId","serializedValue","isSelected","handleRowClick","rowNode","onEditInitHandler","nodeSelectChange","onEditCompleteHandler","fieldName","oldValue","column_1","onNodeExpandHandler","onNodeCollapseHandler","onNodeSelectHandler","onNodeUnselectHandler","setNodeExpandedValue","oldTreeNodeMap","warn","getPaths","getValudChangeInvokerFactory","TreeTable","FarrisDynamicRequiredDirective","updateValidateRule","requiredOn","isRequired","updateFieldValidateRule","FarrisEditorDirective","EditorComponent","FarrisQuerySolutionEventBindDirective","onQuery","QuerySolutionComponent","FarrisDateLocalizationDirective","localize","userSettings","timeFormat","showTime","dateOpts","updateValue","Inject","UserSettingsToken","FarrisDatepickerComponent","FarrisNumberLocalizationDirective","NumberSpinnerComponent","FarrisTimeLocalizationDirective","TimePickerComponent","FarrisTextLocalizationDirective","beforeWriteValue","localizationType","transformValue","transformDate","transformDateTime","date","moment","isValid","parseDateFormat","dateTime","dateTimeFormat","parseTimeFormat","transformNumber","BigNumber","isNegative","buildNumberFormat","numberFormat","negativeSign","numberDecimalDigits","absoluteValue","toFormat","numberDecimalSeparator","numberGroupSeparator","groupSize","decimalSeparator","groupSeparator","TextComponent","FarrisCheckboxModificationDirective","token","FarrisLabelModificationDirective","labelFor","FarrisLookupBindingDirective","lookupType","comboLookup","ListNavComponentRefDirective","componentRefManager","add","ListNavComponent","ListViewComponentRefDirective","ListFilterComponentRefDirective","ListFilterComponent","FilterComponentRefDirective","FilterComponent","ViewChangeComponentRefDirective","ViewChangeComponent","HtmlEditorComponentRefDirective","SectionComponentRefDirective","FarrisSectionComponent","InputGroupComponentRefDirective","InputGroupComponent","DatepickerComponentRefDirective","TimePickerComponentRefDirective","NumberSpinnerComponentRefDirective","ComboListComponentRefDirective","ComboLookupComponentRefDirective","LookupGridComponentRefDirective","DatagridComponentRefDirective","TreetableComponentRefDirective","WizardComponentRefDirective","WizardComponent","DiscussionEditorComponentRefDirective","DiscussionListComponentRefDirective","NavComponentRefDirective","MultiSelectComponentRefDirective","ScrollspyComponentRefDirective","ScrollspyComponent","ComboLookupDataMappingDirective","onClearMapping","targetField","useFormDataMapping","ImageIdToUrlPipe","rootId","downloadService","getDownloadUrl","defaultPic","DownloadService","FormatPrimeNgTreeTableCellData","formatterFn","cfs","isMultilingualField","getMultiLanguageValue","valObj","localeService","localeId","obj","isHelpColumn","getHelpColumnValue","getHelpControlTextField","getHelpControlMapFields","pure","ColumnFormatService","LocaleService","Localization","NgModule","imports","CommonModule","FarrisCommonModule","forRoot","declarations","providers","exports","KendoBindingModule"],"mappings":"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ACA+B,GACAmvB,GACAM,GACAE,GACAE,GACAC,GACAyB,GACAhB,GACA6C,GACAqB,GACAU,GACAgE,GACAK,GACAE,GACAG,GACAU,GACAE,GACAE,GACA6F,GACAjE,GACAE,GACAE,GACAG,GACAI,GACAC,GACAI,GACAF,GACAK,GACAD,GACAG,GACAE,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAE,GACAC,GACAC,GACAC,GACAC,GACAE,IAEFiC,UAAW,CACThvB,EAAAA,cAAeF,EAAAA,cAAezX,GAA8BwC,IAC9DokC,QAAS,CACPv8B,GACA4T,GACAoH,GACAe,GACAM,GACAqC,GACAW,GACAE,GACAC,GACAF,GACAG,GACA5mB,GACA+C,GACAb,GACA0/B,GACAM,GACArb,GACA8E,GACA4B,GACAwB,GACApuB,GACA+B,GACAmvB,GACAM,GACAE,GACAE,GACAC,GACAyB,GACAhB,GACA6C,GACAqB,GACAU,GACAgE,GACAK,GACAE,GACAG,GACAU,GACAE,GACAE,GACA6F,GACAjE,GACAE,GACAE,GACAG,GACAI,GACAC,GACAI,GACAF,GACAK,GACAD,GACAG,GACAE,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAE,GACAC,GACAC,GACAC,GACAC,GACAE,QAIJmC,IAlJA,SAAAA","sourcesContent":["import { ControlValueConverter } from '@farris/devkit';\r\n\r\nclass ArrayConverter implements ControlValueConverter {\r\n\r\n  constructor(private separator: string = ',') {\r\n  }\r\n\r\n  convertFrom(value: string): string[] {\r\n    return value.split(this.separator);\r\n  }\r\n\r\n  convertTo(value: string[]): string {\r\n    return value.join(this.separator);\r\n  }\r\n}\r\n\r\nexport { ArrayConverter };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-29 10:26:58\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-10-29 15:49:12\r\n */\r\nimport { ControlValueConverter, DateUtil } from '@farris/devkit';\r\n\r\n/**\r\n * æ¥æè½¬æ¢å¨\r\n */\r\nclass DateConverter implements ControlValueConverter {\r\n\r\n  /**\r\n   * æé å½æ°\r\n   * @param format æ¥ææ ¼å¼\r\n   */\r\n  constructor(private format: string) {\r\n  }\r\n\r\n  /**\r\n   * å­ç¬¦ä¸²=> æ¥æ\r\n   * @param value å¾è½¬æ¢çå¼\r\n   */\r\n  convertFrom(value: string): Date {\r\n    if (DateUtil.isEmptyDateString(value) === true) {\r\n      return null;\r\n    }\r\n\r\n    return DateUtil.parse(value);\r\n  }\r\n\r\n  /**\r\n   * æ¥æ=>å­ç¬¦ä¸²\r\n   * @param value\r\n   */\r\n  convertTo(value: Date): string | any {\r\n    if (!value) {\r\n      return null;\r\n    }\r\n    // å¦ævalueä¸æ¯æ¥æç±»åï¼åä¸åå¤çï¼è¿ååå§value\r\n    if (Object.prototype.toString.call(value) !== '[object Date]') {\r\n      return value;\r\n    }\r\n    // å¹´\r\n    let year = value.getFullYear().toString();\r\n    year = year.length < 4 ? '0'.repeat(4 - year.length) + year : year;\r\n    // æ\r\n    let month = (value.getMonth() + 1).toString();\r\n    month = month.length === 1 ? ('0' + month) : month;\r\n\r\n    // æ¥\r\n    let day = value.getDate().toString();\r\n    day = day.length === 1 ? ('0' + day) : day;\r\n\r\n    // æ¶åç§\r\n    let hours = value.getHours().toString();\r\n    hours = hours.length === 1 ? ('0' + hours) : hours;\r\n\r\n    let minutes = value.getMinutes().toString();\r\n    minutes = minutes.length === 1 ? ('0' + minutes) : minutes;\r\n\r\n    let seconds = value.getSeconds().toString();\r\n    seconds = seconds.length === 1 ? ('0' + seconds) : seconds;\r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n  }\r\n}\r\nexport { DateConverter };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-29 10:26:58\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-10-29 15:49:12\r\n */\r\nimport { ControlValueConverter } from '@farris/devkit';\r\n\r\n/**\r\n * å¤è¯­è¨è½¬æ¢å¨\r\n */\r\nclass MultiLangConverter implements ControlValueConverter {\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * å°æ°æ®æºä¸­çåå§å¼=>å¤è¯­æ§ä»¶è¯å«çå¯¹è±¡å¼\r\n   */\r\n  public convertFrom(value: string): any {\r\n    const multiLangControlValue = Object.assign({}, value);\r\n    return multiLangControlValue;\r\n  }\r\n\r\n  /**\r\n   * å¤è¯­æ§ä»¶è¯å«çå¯¹è±¡å¼=>å°æ°æ®æºä¸­çåå§å¼\r\n   */\r\n  public convertTo(multiLangControlValue: any): any {\r\n    const value = multiLangControlValue;\r\n    return value;\r\n  }\r\n\r\n}\r\nexport { MultiLangConverter };\r\n","import { ControlValueConverter } from '@farris/devkit';\r\n\r\nclass FilterConditionsConverter implements ControlValueConverter {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  convertFrom(conditionsString: string): any[] {\r\n    if (!conditionsString) {\r\n      return [];\r\n    }\r\n    return JSON.parse(conditionsString);\r\n  }\r\n\r\n  convertTo(conditions: any[]): string {\r\n    return JSON.stringify(conditions);\r\n  }\r\n}\r\n\r\nexport { FilterConditionsConverter };\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DateTimeHelperService } from '@farris/ui-common/date';\r\nimport { NumberHelperService } from '@farris/ui-common/number';\r\nimport { DateUtil } from '@farris/devkit';\r\n\r\n@Injectable()\r\nclass FarrisKendoGridFormatService {\r\n    constructor(private dateService: DateTimeHelperService, private numberService: NumberHelperService) {\r\n    }\r\n\r\n    /**\r\n     * åæ ¼å¼å æ¹æ³\r\n     * @param dataItem  è¡æ°æ®\r\n     * @param column åå¯¹è±¡\r\n     */\r\n    getColumnFormat(dataItem: any, column: any) {\r\n        const value = this.getValue(dataItem, column['dataField']);\r\n        // æ²¡æè®¾ç½®è¡ç¼è¾å¨\r\n        const type = column['dataType'];\r\n        if (type === 'enum') {\r\n            return this.getEnumText(value, column);\r\n        } else if (type === 'boolean') {\r\n            return value ? 'æ¯' : 'å¦';\r\n        } else if (type === 'date') {\r\n            return this.getFormatDate(value, column);\r\n        } else if (type === 'number') {\r\n            return this.getFormatNumber(value, column);\r\n        } else {\r\n            // æ ¼å¼åå¤è¡ææ¬  åstring\r\n            return this.getMultiText(value, column);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * æ ¹æ®idè·åvalue\r\n     * @param dataItem  è¡æ°æ®\r\n     * @param field id,ä¹å¯è½æ¯name.Nameè¿ç§å½¢å¼(å³èå¯¹è±¡idæèudt)\r\n     */\r\n    private getValue(dataItem: any, field: string) {\r\n        const index = field.indexOf('.');\r\n        if (index < 0) {\r\n            return dataItem[field];\r\n        }\r\n        const fields = field.split('.');\r\n        // fieldå­ç¬¦ä¸²ç»å\r\n        const a = fields.reduce((result: any, next: any) => {\r\n            return result[next];\r\n        }, dataItem);\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * æä¸¾å¼æ ¼å¼å\r\n     */\r\n    private getEnumText(value: any, column: any) {\r\n        const enumData = (column as any).enumData;\r\n        if (!enumData) {\r\n            return;\r\n        }\r\n        let tempColumnText: any;\r\n        enumData.forEach((ele: any) => {\r\n            if (ele.value === value) {\r\n                tempColumnText = ele.name;\r\n            }\r\n        });\r\n        return tempColumnText;\r\n    }\r\n\r\n    /**\r\n     * æ¥ææ ¼å¼å\r\n     * @param value  ååæ ¼å¼\r\n     * @param column åå¯¹è±¡\r\n     */\r\n    public getFormatDate(value: string, column: any): string {\r\n\r\n        if (DateUtil.isEmptyDateString(value) === true) {\r\n          return '';\r\n        }\r\n\r\n        const dateFormat = (column as any).format;\r\n        if (!dateFormat) {\r\n            return value;\r\n        }\r\n        return this.dateService.formatTo(value, dateFormat);\r\n    }\r\n\r\n    /**\r\n     * æ°å­æ ¼å¼å\r\n     * @param value  ååæ ¼å¼\r\n     * @param column åå¯¹è±¡\r\n     * @todo æ°å­æ ¼å¼åè¿ä¸å®å  è¿ä¸ªåªæ¯éé¢å½¢å¼çæ ¼å¼å;   åå§åvalue===nullæ¶,åºè¯¥æ¾ç¤ºä¸º'' è¿ä¸ªè¿æ²¡æ\r\n     */\r\n    private getFormatNumber(value: any, column: any) {\r\n        let precision;\r\n        if (column && column.format) {\r\n            precision = parseInt(column.format.substr(1), 10);\r\n        } else if (column && column.editor) {\r\n            precision = column.editor.precision;\r\n        }\r\n        if (isNaN(precision)) {\r\n            precision = 2;\r\n        }\r\n        if (!value && value !== 0) {\r\n            return '';\r\n        }\r\n\r\n        const opts = {\r\n            prefix: column.prefix ? column.prefix : '',\r\n            suffix: column.suffix ? column.suffix : '',\r\n            precision: precision,\r\n            thousand: ',',\r\n            stripZeros: false,\r\n        };\r\n        return this.numberService.formatMoney(value, opts);\r\n    }\r\n\r\n    /**\r\n     * å¤è¡ææ¬æ ¼å¼å shift+enteræ¢è¡  å¤±å»ç¦ç¹ä¿çåæ ¼å¼\r\n     * @param value  ååæ ¼å¼\r\n     * @param column åå¯¹è±¡\r\n     */\r\n    private getMultiText(value: any, column: any) {\r\n        let strValue = value;\r\n        if (strValue !== '' && !strValue) {\r\n            strValue = '';\r\n        }\r\n        if (typeof strValue !== 'string') {\r\n            const valueType = typeof strValue;\r\n            throw new Error(`${valueType}ç±»åå¼ä¸åæ³ï¼æ æ³è¿è¡æ ¼å¼å`);\r\n        }\r\n        // é²æ­¢xss\r\n        strValue = strValue.replace(/&/g, '&amp;')\r\n            .replace(/</g, '&lt;')\r\n            .replace(/>/g, '&gt;')\r\n            .replace(/\\\"/g, '&quot;')\r\n            .replace(/\\'/g, '&#39;')\r\n            .replace(/\\//g, '&#x2F;');\r\n        // å¦ææ¯å¤è¡ææ¬æ¡  ä¿çæ ¼å¼\r\n        if (column.editor && column.editor.type === 'MultiTextBox') {\r\n            const INDEX = strValue.indexOf('\\n');\r\n            if (INDEX > -1) {\r\n                return strValue.replace(/\\n/g, '<br>');\r\n            }\r\n            return strValue;\r\n        }\r\n        // è¥ä¸ºstring\r\n        return strValue;\r\n    }\r\n}\r\nexport { FarrisKendoGridFormatService };\r\n","import { Injectable } from '@angular/core';\r\nimport { TreeTableComponent } from '@farris/ui-treetable';\r\n@Injectable()\r\nexport class FarrisTreetableFormatService {\r\n    constructor() {\r\n    }\r\n    setFormat(treeTable: TreeTableComponent) {\r\n        const columns = treeTable.columns;\r\n        columns.forEach((column: any) => {\r\n            const dataType = column.dataType;\r\n            if (!column.formatter) {\r\n                if (dataType === 'date') {\r\n                    column.formatter = {\r\n                        type: 'datetime',\r\n                        options: {\r\n                            format: column.format\r\n                        }\r\n                    };\r\n                } else if (dataType === 'number') {\r\n                    column.formatter = {\r\n                        type: 'number',\r\n                        options: {\r\n                            prefix: column.prefix ? column.prefix : '',\r\n                            suffix: column.suffix ? column.suffix : '',\r\n                            precision: column.precision,\r\n                            thousand: ',',\r\n                            stripZeros: false,\r\n                        }\r\n                    };\r\n                } else if (dataType === 'enum') {\r\n                    column.formatter = {\r\n                        type: 'enum',\r\n                        options: {\r\n                            data: column.enumData,\r\n                            valueField: 'value',\r\n                            textField: 'name'\r\n                        }\r\n                    };\r\n                } else if (dataType === 'boolean') {\r\n                    column.formatter = {\r\n                        type: 'enum',\r\n                        options: {\r\n                            data: [{ name: 'æ¯', value: true }, { name: 'å¦', value: false }],\r\n                            valueField: 'value',\r\n                            textField: 'name'\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DateUtil } from '@farris/devkit';\r\n\r\n@Pipe({ name: 'parseStrToDate' })\r\nexport class StringToDatePipe implements PipeTransform {\r\n    transform(value: string, exponent: string): any {\r\n        if (DateUtil.isEmptyDateString(value) === true) {\r\n          return null;\r\n        }\r\n\r\n        if (value.includes('å¹´')) {\r\n            const strDate = value.replace('å¹´', '-').replace('æ', '-').replace('æ¥', '');\r\n            return new Date(strDate);\r\n        }\r\n        return new Date(value);\r\n    }\r\n}\r\n","import { Directive, Input, OnInit, HostListener } from '@angular/core';\r\nimport { CompositeFilterDescriptor } from '@progress/kendo-data-query';\r\nimport { DropDownListComponent } from '@progress/kendo-angular-dropdowns';\r\nimport { FilterService, BaseFilterCellComponent } from '@progress/kendo-angular-grid';\r\n@Directive({\r\n    selector: '[kendogridFilter]'\r\n})\r\nexport class KendoGridFilterDirective extends BaseFilterCellComponent implements OnInit {\r\n\r\n    @Input() filter: CompositeFilterDescriptor;\r\n    @Input() column: any;\r\n\r\n    public get selectedValue(): any {\r\n        const filter = this.filterByField(this.column.dataField);\r\n        return filter ? filter.value : null;\r\n    }\r\n    public get defaultItem(): any {\r\n        return {\r\n            value: null,\r\n            name: 'å¨é¨'\r\n        };\r\n    }\r\n\r\n    constructor(\r\n        private dropdownList: DropDownListComponent,\r\n        public filterService: FilterService,\r\n    ) {\r\n        super(filterService);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.dropdownList.valueField = 'value';\r\n        this.dropdownList.textField = 'name';\r\n        this.dropdownList.valuePrimitive = true;\r\n        this.dropdownList.defaultItem = this.defaultItem;\r\n        this.dropdownList.value = this.selectedValue;\r\n        if (this.column.dataType === 'enum') {\r\n            this.dropdownList.data = this.column.enumData;\r\n        } else if (this.column.dataType === 'boolean') {\r\n            this.dropdownList.data = [{ value: true, name: 'æ¯' }, { value: false, name: 'å¦' }];\r\n        }\r\n    }\r\n\r\n\r\n    @HostListener('valueChange', ['$event'])\r\n    onChange(value: any) {\r\n        this.applyFilter(\r\n            value === null ?\r\n                this.removeFilter(this.column.dataField) :\r\n                this.updateFilter({\r\n                    field: this.column.dataField,\r\n                    operator: 'eq',\r\n                    value: value\r\n                })\r\n        );\r\n    }\r\n\r\n\r\n    /*\r\n   * è·å ååæ ¼å¼  ä¸»ä»è¡¨æ¯æ\r\n   * @param dataItem è¡æ°æ®\r\n   * @param field å­æ®µ\r\n   */\r\n    getValue(dataItem: any, field: string) {\r\n        const index = field.indexOf('.');\r\n        if (index < 0) {\r\n            return dataItem[field];\r\n        }\r\n        const fields = field.split('.');\r\n        // fieldå­ç¬¦ä¸²ç»å\r\n        return fields.reduce((result: any, next: any) => {\r\n            return result[next];\r\n        }, dataItem);\r\n    }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { ViewModel, DateUtil } from '@farris/devkit';\r\n@Pipe({ name: 'dateFormatPlaceholder' })\r\nexport class DateFormatPlaceholderPipe implements PipeTransform {\r\n    constructor(private viewModel: ViewModel) {\r\n\r\n    }\r\n    transform(format: string, controlName: string): any {\r\n        if (!this.viewModel.form || !this.viewModel.form.get(controlName)) {\r\n            return {\r\n                year: 'å¹´',\r\n                month: 'æ',\r\n                day: 'æ¥'\r\n            };\r\n        }\r\n        const value = this.viewModel.form.get(controlName).value;\r\n        let dateStr = value;\r\n        if (dateStr) {\r\n            dateStr = value.toISOString();\r\n        }\r\n        if ((DateUtil.isEmptyDateString(dateStr) === true) && format === 'yyyyå¹´MMæddæ¥') {\r\n            return {\r\n                year: ' ',\r\n                month: ' ',\r\n                day: ' '\r\n            };\r\n        }\r\n        return {\r\n            year: 'å¹´',\r\n            month: 'æ',\r\n            day: 'æ¥'\r\n        };\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n@Pipe({ name: 'formatTotal' })\r\nexport class FormatTotalPipe implements PipeTransform {\r\n    transform(value: any, exponent: any): any {\r\n        // å¤æ­å¼æ¯å¦åæ³\r\n        if (!value && value !== 0) {\r\n            return '';\r\n        }\r\n        if (exponent.dataType === 'number') {\r\n            // ä¿çå°æ°ç¹åå ä½\r\n            const dataFormat = exponent.format;\r\n            return value.toFixed(Number(dataFormat.substring(1)));\r\n        }\r\n        return value;\r\n    }\r\n}\r\n","import { Directive, ContentChildren, QueryList, Input, NgZone } from '@angular/core';\r\nimport { BindingData, BindingList } from '@farris/devkit';\r\nimport { ColumnComponent } from '@progress/kendo-angular-grid';\r\n\r\n@Directive({\r\n  selector: '[aggregate]',\r\n})\r\nexport class GridColumnAggregateDirective {\r\n\r\n  @Input() aggregate: string | boolean;\r\n\r\n  public get field(): string {\r\n    return this.column.field;\r\n  }\r\n\r\n  private get aggrType(): string {\r\n    let type = 'none';\r\n    if (typeof (this.aggregate) === 'boolean') {\r\n      // é»è®¤ä¸ºsumï¼å¦æä½¿ç¨æä»¤æ¶ä¼ å¥çinputä¸ºå¸å°ç±»åï¼ä½¿ç¨sumã\r\n      if (this.aggregate) {\r\n        type = 'sum';\r\n      }\r\n    } else if (typeof (this.aggregate) === 'string') {\r\n      type = this.aggregate;\r\n    }\r\n    return type;\r\n  }\r\n\r\n  constructor(private column: ColumnComponent, private ngZone: NgZone) {\r\n  }\r\n\r\n  public recalculateSummary(bindingList: BindingList) {\r\n    let summary = null;\r\n    if (this.aggrType === 'sum') {\r\n      const plainData = bindingList.toJSON().map(item => {\r\n        // èèå¸®å©åudtçæåµï¼fieldæ¯a.bçæ ¼å¼ã\r\n        return this.field.split('.').reduce((prevPath, currPath) => {\r\n          return prevPath[currPath];\r\n        }, item);\r\n      });\r\n      if (plainData && plainData.length) {\r\n        summary = plainData.reduce((prev, curr) => {\r\n          return prev + curr;\r\n        });\r\n      }\r\n    } else if (this.aggrType === 'count') {\r\n      // è®¡æ°ï¼å¦æå¯ç¨åé¡µï¼åªè®¡ç®å½åé¡µï¼å æ­¤ä½¿ç¨lengthèétotalã\r\n      summary = bindingList.length;\r\n    }\r\n    this.updateFooter(summary);\r\n  }\r\n\r\n  public updateFooter(content: any) {\r\n    if (this.aggregate) {\r\n        // å­å¨æ§è½é®é¢ï¼å»æsetTimeoutã\r\n        // åè¡¨çåè¶å¤ï¼æ­¤å¤é®é¢è¶ä¸¥éï¼éè¦æ­£åè§£å³ä»¥ä¸éè¯¯ã\r\n        // todo: settimeoutæ¯ä¸ºäºè§£å³æ°æ®ååæ¶angularæ¥éï¼å¦ææ´æ°é¡µèçé»è¾ä¸å¨gridbindingåèµ·ï¼æ¯å¦è¿å­å¨é®é¢ï¼\r\n        // setTimeout(() => {\r\n          this.column['summary'] = content;\r\n        // });\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@Directive({\r\n  selector: '[farrisSummary]'\r\n})\r\nexport class GridSummaryDirective/* implements OnInit, AfterViewInit*/ {\r\n  @Input('farrisSummary') summary: string;\r\n  constructor(private bindingData: BindingData) { }\r\n\r\n}\r\n","import { ElementRef } from '@angular/core';\r\nimport { SelectedRowContext } from '../entity/index';\r\nimport { GridComponent } from '@progress/kendo-angular-grid';\r\n\r\n/**\r\n * å¤éåè¡¨å·¥å·ç±»\r\n */\r\nexport class MultiSelectGridUtility {\r\n  static CURRENT_ROW_STYLE_NAME = 'f-state-selected';\r\n  static CHECKBOXED_ROW_STYLE_NAME = 'f-state-checked';\r\n\r\n  /**\r\n   * æ¸²æåæ¢è¡\r\n   */\r\n  public static renderClickChangedRow(gridComponent: GridComponent, selectedRowContext: SelectedRowContext) {\r\n    if (!gridComponent) {\r\n      return;\r\n    }\r\n\r\n    const currentRowIndex = selectedRowContext.currentRowIndex;\r\n    // æ¸²æå½åè¡\r\n    this.addRowSelectedStyle(gridComponent, currentRowIndex);\r\n\r\n    // æ¸²æä¸ä¸è¡\r\n    const lastRowIndex = selectedRowContext.lastRowIndex;\r\n    if (!this.checIfIsSameRelativeIndex(gridComponent, currentRowIndex, lastRowIndex)) {\r\n      this.removeRowSelectedStyle(gridComponent, lastRowIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æ£æ¥å½åè¡ç´¢å¼å¼åä¸ä¸ä¸ªéä¸­è¡ç´¢å¼å¼çç¸å¯¹å½åé¡µé¢çç´¢å¼å¼æ¯å¦ç¸å\r\n   */\r\n  private static checIfIsSameRelativeIndex(gridComponent: GridComponent, currentRowIndex: number, lastRowIndex: number): boolean {\r\n    let isSameRelativeIndex = false;\r\n    if (currentRowIndex === lastRowIndex) {\r\n      isSameRelativeIndex = true;\r\n      return isSameRelativeIndex;\r\n    }\r\n\r\n    if ((Math.abs(currentRowIndex - lastRowIndex)) % (gridComponent.pageSize) === 0) {\r\n      isSameRelativeIndex = true;\r\n      return isSameRelativeIndex;\r\n    }\r\n\r\n    return isSameRelativeIndex;\r\n  }\r\n\r\n  /**\r\n   * æ£æµæ¯å¦å¯ç¨åé¡µåè½\r\n   */\r\n  public static checkIfEnablePaging(gridComponent: GridComponent): boolean {\r\n    let isPageable = false; // é»è®¤æªå¯ç¨åé¡µ\r\n    if (!gridComponent) {\r\n      return isPageable;\r\n    }\r\n\r\n    if (typeof gridComponent.pageable === 'boolean') {\r\n      isPageable = gridComponent.pageable;\r\n    } else if (typeof gridComponent.pageable === 'object') {\r\n      isPageable = true;\r\n    }\r\n\r\n    return isPageable;\r\n  }\r\n\r\n  /**\r\n   * æ¸²æcheckboxéæ©\r\n   */\r\n  public static renderSelectedChangeCheckbox(elementRef: ElementRef, $event: any) {\r\n\r\n    const currentRowIndex = $event.index;\r\n\r\n    const trCollection = this.getTrCollection(elementRef);\r\n    if (trCollection == null || trCollection.length <= 0 || trCollection.length < currentRowIndex) {\r\n      return;\r\n    }\r\n\r\n    // æ¸²æcheckedè¡\r\n    const currentTableRowElement = trCollection[currentRowIndex];\r\n    if (!currentTableRowElement) {\r\n      return;\r\n    }\r\n\r\n    if ($event.selected) { // checked\r\n      this.appendAtrributeValue(currentTableRowElement, 'class', this.CHECKBOXED_ROW_STYLE_NAME);\r\n    } else { // unchecked\r\n      this.removeAttributeSpecificValue(currentTableRowElement, 'class', this.CHECKBOXED_ROW_STYLE_NAME);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æ·»å è¡çâå·²éä¸­æ ·å¼â\r\n   * ææ éæ±ï¼ä¸å¯¹å¤æ´é²\r\n   */\r\n  private static addRowSelectedStyle(gridComponent: GridComponent, rowIndex: number) {\r\n    if (!gridComponent || rowIndex < 0) {\r\n      return;\r\n    }\r\n\r\n    const currentRowElement = this.getRelativeRowInCurrentPage(gridComponent, rowIndex);\r\n    if (!currentRowElement) {\r\n      return;\r\n    }\r\n\r\n    this.appendAtrributeValue(currentRowElement, 'class', this.CURRENT_ROW_STYLE_NAME);\r\n  }\r\n\r\n  /**\r\n   * ç§»é¤è¡çâå·²éä¸­æ ·å¼â\r\n   * éæ±ï¼kendo-gridå¨åé¡µæ¶ï¼ä¸ä¼ç§»é¤å·²éä¸­æ ·å¼\r\n   */\r\n  public static removeRowSelectedStyle(gridComponent: GridComponent, rowIndex: number) {\r\n    if (!gridComponent || rowIndex < 0) {\r\n      return;\r\n    }\r\n\r\n    const currentRowElement = this.getRelativeRowInCurrentPage(gridComponent, rowIndex);\r\n    if (!currentRowElement) {\r\n      return;\r\n    }\r\n    this.removeAttributeSpecificValue(currentRowElement, 'class', this.CURRENT_ROW_STYLE_NAME);\r\n  }\r\n\r\n  /**\r\n   * è·åæå®è¡å¨å½åé¡µé¢å¯¹åºçè¡åç´ \r\n   */\r\n  private static getRelativeRowInCurrentPage(gridComponent: GridComponent, rowIndex: number): any {\r\n    let rowElementInCurrentPage: any = null;\r\n    if (!gridComponent || rowIndex < 0) {\r\n      return rowElementInCurrentPage;\r\n    }\r\n\r\n    const gridElement = gridComponent.wrapper;\r\n    // å¯ç¨åé¡µåï¼éè¦æ´æ°å½åè¡\r\n    const isPaging = this.checkIfEnablePaging(gridComponent);\r\n    if (isPaging) {\r\n      rowIndex = rowIndex % (gridComponent.pageSize); // å¯¹pageSizeåæ¨¡\r\n    }\r\n\r\n    const trCollection = this.getTrCollection(gridElement);\r\n    if (trCollection == null || trCollection.length <= 0) {\r\n      return rowElementInCurrentPage;\r\n    }\r\n\r\n    rowElementInCurrentPage = trCollection[rowIndex];\r\n\r\n    return rowElementInCurrentPage;\r\n  }\r\n\r\n  /**\r\n   * è·åå½ågridçtréå\r\n   */\r\n  private static getTrCollection(elementRef: ElementRef): any[] {\r\n    if (!elementRef || !elementRef.nativeElement) {\r\n      return null;\r\n    }\r\n\r\n    const kendoGridTbodyElements: any[] = elementRef.nativeElement.getElementsByTagName('tbody');\r\n    if (!kendoGridTbodyElements || kendoGridTbodyElements.length <= 0) {\r\n      return null;\r\n    }\r\n\r\n    const trCollection = kendoGridTbodyElements[0].getElementsByTagName('tr');\r\n    return trCollection;\r\n  }\r\n\r\n  /**\r\n   * ååç´ çæå®å±æ§è¿½å å¼\r\n   */\r\n  private static appendAtrributeValue(currentElement: Element, attributeName: string, attributeValue: string) {\r\n    let newAttributeValue: string = currentElement.getAttribute(attributeName);\r\n    if (newAttributeValue === null || newAttributeValue === '' || newAttributeValue.length <= 0) {\r\n      newAttributeValue = attributeValue;\r\n    } else {\r\n      if (newAttributeValue.indexOf(attributeValue) < 0) { // å­å¨æ£æµï¼é¿åéå¤æ·»å \r\n        newAttributeValue += ' ' + attributeValue;\r\n      }\r\n    }\r\n\r\n    currentElement.setAttribute(attributeName, newAttributeValue);\r\n  }\r\n\r\n  /**\r\n   * ç§»é¤åæ°æ®æå®å±æ§çç¹æ§å±æ§å¼\r\n   */\r\n  private static removeAttributeSpecificValue(currentElement: Element, attributeName: string, needRemoveAttributeValue: string) {\r\n    let lastClassAttributeValue = currentElement.getAttribute(attributeName);\r\n    if (!lastClassAttributeValue) {\r\n      return;\r\n    }\r\n\r\n    const index = lastClassAttributeValue.lastIndexOf(needRemoveAttributeValue);\r\n    if (index < 0) {\r\n      return;\r\n    }\r\n\r\n    const tempLastClassAttributeValue = lastClassAttributeValue.substring(0, index - 1);\r\n    lastClassAttributeValue = tempLastClassAttributeValue + ' '\r\n      + lastClassAttributeValue.substring(index + needRemoveAttributeValue.length);\r\n\r\n    currentElement.setAttribute(attributeName, lastClassAttributeValue);\r\n  }\r\n}\r\n","/**\r\n * éä¸­è¡ä¸ä¸æ\r\n */\r\nexport class SelectedRowContext {\r\n    /**\r\n     * å½åéä¸­è¡Index\r\n     */\r\n    currentRowIndex: number;\r\n\r\n    /**\r\n     * ä¸ä¸ä¸ªéä¸­è¡Index\r\n     */\r\n    lastRowIndex: number;\r\n}\r\n","import {\r\n  Directive, OnInit, OnChanges, OnDestroy, SimpleChanges, Input, HostListener, Optional,\r\n  EventEmitter, Output, ElementRef, ContentChildren, QueryList, NgZone, AfterViewInit\r\n} from '@angular/core';\r\nimport { of, Subscription } from 'rxjs';\r\nimport {\r\n  GridComponent, DataBindingDirective,\r\n  SelectionDirective,\r\n  CellClickEvent,\r\n  DataStateChangeEvent, GridDataResult, PageChangeEvent, SortSettings,\r\n} from '@progress/kendo-angular-grid';\r\nimport { process, GroupDescriptor, AggregateDescriptor, State, FilterDescriptor, SortDescriptor } from '@progress/kendo-data-query';\r\nimport {\r\n  BindingData, BindingList, Change, ChangeType,\r\n  FrameEventBus, UIState, Form, ViewModel\r\n} from '@farris/devkit';\r\nimport { DialogService } from '@farris/ui-dialog';\r\nimport { RuntimeStateService } from '@farris/ui-common';\r\nimport { DateTimeHelperService } from '@farris/ui-common/date';\r\nimport { FarrisKendoGridFormatService } from '../format/index';\r\nimport { GridColumnAggregateDirective } from './grid-summary.directive';\r\nimport { MultiSelectGridUtility } from '../util/multi_select_grid_utility';\r\nimport { SelectedRowContext } from '../entity/index';\r\n\r\n/*\r\n * Kendo Grid æ°æ®ç»å®æä»¤\r\n *\r\n * TODO:\r\n * 1ãæ´ä½å·å­å¨æ§è½é®é¢ï¼\r\n * 2ãéä¸­åå½åè¡æ²¡æåºåå¼ï¼\r\n */\r\n\r\n@Directive({\r\n  selector: '[farrisBindingPath]'\r\n})\r\nexport class KendoGridBindingDirective extends DataBindingDirective implements OnInit, AfterViewInit, OnChanges, OnDestroy {\r\n\r\n  /**\r\n   * æ¯å¦åè®¸ç¼è¾\r\n   * é»è®¤å¯ç¼è¾  å ä¸ºææ¹éç¼è¾åè¡¨\r\n   */\r\n  @Input('farrisEditable')\r\n  public editable: boolean;\r\n\r\n  /**\r\n   * ç¼è¾æ¶ç»å®çè¡¨å\r\n   */\r\n  @Input('farrisForm')\r\n  public form: Form;\r\n\r\n  /**\r\n   * åç»å\r\n   */\r\n  @Input('groupField')\r\n  public groupField: string;\r\n\r\n  @Input('groupAggrFields')\r\n  public groupAggrFields: string[];\r\n\r\n  /* ç»å®grid option */\r\n  @Input()\r\n  public farrisBindingGridOption: any;\r\n\r\n  /* å¼å®¹rowClass è¿æ²¡å é¤ */\r\n  @Input()\r\n  rowClassName: any;\r\n  /* è¡æ ·å¼äºä»¶ */\r\n  // @Input()\r\n  // rowClassName: (context: any) => any;\r\n\r\n  // tslint:disable-next-line:no-output-rename\r\n  @Output('append-row') appendRow = new EventEmitter<any>();\r\n\r\n  /* ç»å®æåºäºä»¶ */\r\n  @Output() sortChangeEvent: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  /* è¡æ ·å¼äºä»¶ */\r\n  @Output()\r\n  rowClass: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n\r\n  get gridOption() {\r\n    return this.grid['gridOption'];\r\n  }\r\n  get len() {\r\n    return this.grid.columns.length;\r\n  }\r\n\r\n  dataItem: any;\r\n\r\n  /* keydownç»å®äºä»¶å¯¹è±¡ */\r\n  gridElement: any;\r\n  gridKeydownEvent: any;\r\n\r\n  /* cellclickäºä»¶å¯¹è±¡ */\r\n  gridCellClickEvent: any;\r\n\r\n  /* cellCloseäºä»¶å¯¹è±¡ */\r\n  gridCellCloseEvent: any;\r\n\r\n\r\n  cellClickEvent: CellClickEvent;\r\n\r\n  hiddenColLen = 0;\r\n  /**\r\n   * TODO: ä»å®ä½è·åå¶é»è®¤å¼\r\n   * å½åè¡ç´¢å¼å¼ï¼é»è®¤ç¬¬ä¸ä¸ª\r\n   */\r\n  rowIndex = 0;\r\n  columnIndex = 0;\r\n  sender: any;\r\n  interVal: any;\r\n  dataId: any;\r\n  currentSkip = 0;\r\n  private currentRowId: string;\r\n\r\n  cellClickParam: CellClickEvent;\r\n  /**\r\n   * æ¯å¦å¯ç¨å¤éï¼é»è®¤æªå¯ç¨\r\n   */\r\n  private isMultipleSelectionMode = false;\r\n  public get IsMultipleSelectionMode() {\r\n    if (!this.grid) {\r\n      return this.isMultipleSelectionMode;\r\n    }\r\n\r\n    if (this.grid.selectable) { // ä¼åå°è¯ä»this.grid.selectableè·å\r\n      // tslint:disable-next-line: no-string-literal\r\n      if (this.grid.selectable['mode'] === 'multiple') {\r\n        this.isMultipleSelectionMode = true;\r\n      } else {\r\n        this.isMultipleSelectionMode = false;\r\n      }\r\n    } else {\r\n      if (this.grid.selectableSettings && this.grid.selectableSettings.mode === 'multiple') {\r\n        this.isMultipleSelectionMode = true;\r\n      }\r\n    }\r\n\r\n    return this.isMultipleSelectionMode;\r\n  }\r\n\r\n  /**\r\n   * ä¸ä¸ä¸ªéä¸­è¡ï¼é»è®¤ä¸å­å¨\r\n   */\r\n  public lastRowIndex = -1;\r\n\r\n  /**\r\n   * éä¸­è¡åæ¢äºä»¶\r\n   */\r\n  @Output() selectedRowChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  /**\r\n   * checkboxéæ©äºä»¶\r\n   */\r\n  @Output() selectedCheckboxChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  /**\r\n   * ç»å®åè¡¨(Gridå¯¹åºæ°æ®æº)\r\n   */\r\n  private get bindingList(): BindingList {\r\n    // æ ¹å®ä½\r\n    if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {\r\n      return this.bindingData.list;\r\n    }\r\n    // å­å®ä½\r\n    let bindingPath = this.viewModel.bindingPath.substr(1);\r\n    bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);\r\n    const paths = bindingPath.split('/');\r\n\r\n    const filteredPaths = paths.filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return this.bindingData.getValue(filteredPaths);\r\n  }\r\n  /**\r\n   * è·ååé¡µä¿¡æ¯\r\n   */\r\n  private getPagingInfo() {\r\n    const bindingPath = this.viewModel.bindingPath;\r\n    const bindingData = this.viewModel.bindingData;\r\n    let pagingInfo = bindingData.pagingInfo;\r\n    if (bindingPath === '/') {\r\n      return pagingInfo;\r\n    } else {\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0).map(item => {\r\n        return item.substring(0, item.length - 1);\r\n      });\r\n      bindingPaths.forEach(path => {\r\n        pagingInfo = pagingInfo && pagingInfo[path] || {};\r\n      });\r\n      return pagingInfo;\r\n    }\r\n  }\r\n\r\n  @ContentChildren(GridColumnAggregateDirective) private aggrColumns: QueryList<GridColumnAggregateDirective>;\r\n  private bindingChangeSubscription: Subscription;\r\n\r\n  /**\r\n   * æé å½æ°\r\n   * @param  grid å®¿ä¸»Grid\r\n   */\r\n  constructor(\r\n    public bindingData: BindingData,\r\n    @Optional() public uiState: UIState,\r\n    @Optional() public eventBus: FrameEventBus,\r\n    @Optional() public viewModel: ViewModel,\r\n    public grid: GridComponent,\r\n    public selectionDir: SelectionDirective,\r\n    public dialogSer: DialogService,\r\n    private dateService: DateTimeHelperService,\r\n    private kendogridFormatSer: FarrisKendoGridFormatService,\r\n    private rts: RuntimeStateService,\r\n    public ngZone: NgZone\r\n  ) {\r\n    super(grid);\r\n\r\n    this.selectionDir.selectedKeys = [];\r\n    this.viewModel.uiState.setPropertyValue('ids', this.selectionDir.selectedKeys);\r\n    const appContext = this.viewModel.frameContext.getFormAppContext();\r\n    if (appContext && appContext.hasOwnProperty('messagePipe')) {\r\n      appContext.messagePipe.subscribe((message: any) => {\r\n        this.grid.closeCell();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * æä»¤åå§åå\r\n   */\r\n  ngOnInit() {\r\n    super.ngOnInit();\r\n\r\n    // åå§åstateï¼åç»ä½¿ç¨ã\r\n    this.initDataState();\r\n\r\n    this.refreshView();\r\n\r\n    // æ°æ®åå\r\n    this.bindingChangeSubscription = this.bindingData.changes.subscribe((change: Change) => {\r\n      this.refreshView(change);\r\n\r\n      if (change.type === ChangeType.Load) {\r\n        // loadæ¶ï¼å¨å¤éæ¨¡å¼ä¸ï¼éæ¸ç©ºéä¸­éå\r\n        if (this.isMultipleSelectionMode) {\r\n          const isMatch = this.checkIfChangeMatchBindingPath(change);\r\n          if (isMatch) {\r\n            // æ¸ç©ºå¤ééå\r\n            this.selectionDir.selectedKeys = [];\r\n            this.viewModel.uiState.setPropertyValue('ids', this.selectionDir.selectedKeys);\r\n            this.ngZone.runOutsideAngular(() => {\r\n              // æ¸²æåå§éä¸­è¡\r\n              setTimeout(() => {\r\n                const rowSelectedContext: SelectedRowContext = new SelectedRowContext();\r\n                const isPageable = MultiSelectGridUtility.checkIfEnablePaging(this.grid);\r\n                if (isPageable) {\r\n                  this.rowIndex = this.grid.skip;\r\n                } else {\r\n                  this.rowIndex = 0;\r\n                }\r\n                rowSelectedContext.currentRowIndex = this.rowIndex;\r\n                rowSelectedContext.lastRowIndex = this.lastRowIndex;\r\n                this.handleSelectedRowChange(rowSelectedContext);\r\n              }, 300);\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      // TODO: ä½¿ç¨ç­ç¥æ¨¡å¼éæ\r\n      // bindingData åæ­¥ SelectedKeys\r\n      if (change.type === ChangeType.Remove) {\r\n        this.syncDeletedKeys(change.value);\r\n      }\r\n      const isMatch = this.checkIfChangeMatchBindingPath(change);\r\n      if (isMatch) {\r\n        this.handleSelectedKeyChange(this.bindingList.currentId);\r\n      }\r\n      // æ¸²æå½åè¡\r\n      if (isMatch && this.checkCurrentRowIdExists() && change.type === ChangeType.SelectionChanged && !this.dataId) {\r\n        this.renderCurrentRow(this.bindingList.currentId);\r\n      }\r\n      // tslint:disable-next-line: max-line-length\r\n      // FIXME:éè¦æéç½®é¡µç çæ¶æº\r\n      /*if ((change.type === ChangeType.SelectionChanged || change.type === ChangeType.GlobalSelectionChanged) && this.currentRowId !== this.bindingList.currentId) {\r\n          this.resetPageInfo();\r\n      }*/\r\n      // è§¦ååæ´æ£æµ\r\n      if (change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged\r\n        || change.type === ChangeType.Append || change.type === ChangeType.Remove) {\r\n\r\n        // è§¦ååæ´æ£æµ\r\n        if (this.grid && this.grid['changeDetectorRef'] && this.grid['changeDetectorRef']['detectChanges']) {\r\n          this.grid['changeDetectorRef']['detectChanges']();\r\n        }\r\n      }\r\n\r\n    });\r\n\r\n    if (this.editable === true && this.form === null) {\r\n      throw Error('å¯ç¨ç¼è¾æ¶ï¼å¿é¡»æå®form');\r\n    }\r\n    if (!this.grid || !this.farrisBindingGridOption || !this.farrisBindingGridOption['fields']) {\r\n      return;\r\n    }\r\n\r\n    const gridColumns = this.farrisBindingGridOption['fields'];\r\n    const gridOption = this.farrisBindingGridOption;\r\n\r\n    // å¤æ­åä¸­æ¯å¦å­å¨åºå®å\r\n    gridOption.lockable = (columns: any[]) => {\r\n      return columns.some(ele => {\r\n        return ele.frozen;\r\n      });\r\n    };\r\n\r\n    this.rowClass.emit(this.grid);\r\n    // æ·»å åå±æ§æèæ¹æ³\r\n    gridColumns.forEach((element: any) => {\r\n      // èªå®ä¹è¶é¾\r\n      if (element.linkedLabelEnabled && !element.linkEvent) {\r\n        element.linkEvent = () => {\r\n          return;\r\n        };\r\n      }\r\n\r\n      // è¥æ²¡æèªå®ä¹æ ¼å¼åæ¹æ³  æ¯ä¸ªåå¯¹è±¡ç»å®æ ¼å¼åæ¹æ³\r\n      if (!element.getColumnFormat) {\r\n        element.getColumnFormat = (dataItem: any, column: any) => {\r\n          return this.kendogridFormatSer.getColumnFormat(dataItem, column);\r\n        };\r\n      }\r\n\r\n      // å¦ææ²¡æèªå®ä¹ç±»æ ·å¼ æ¯ä¸ªåç»å® æ ¼å¼åæ¹æ³\r\n      if (!element.getClassName) {\r\n        element.getClassName = (dataItem: any, column: any) => '';\r\n      }\r\n\r\n      // èªå®ä¹å¸®å©ååäºä»¶\r\n      if (element.editor && element.editor.type === 'LookupEdit') {\r\n\r\n        // å¸®å©åäºä»¶\r\n        if (!element.dictPicking) {\r\n          element.dictPicking = (param: any) => {\r\n            return of(true);\r\n          };\r\n        }\r\n        // å¸®å©åäºä»¶\r\n        if (!element.dictPicked) {\r\n          element.dictPicked = (param: any) => {\r\n            // éæ°è¿å¥ç¼è¾\r\n            this.cellClickHandler(this.cellClickParam);\r\n            return of(true);\r\n          };\r\n        }\r\n      }\r\n    });\r\n    // ç»å®gridOption\r\n    this.bindingGridOption();\r\n\r\n    // å¤éæ¨¡å¼ä¸ï¼è®¾ç½®åå§éä¸­è¡\r\n    if (this.IsMultipleSelectionMode) {\r\n      // TODO: ç§»é¤ setTimeout\r\n      const self = this;\r\n      this.ngZone.runOutsideAngular(() => {\r\n        setTimeout(() => {\r\n          const rowSelectedContext: SelectedRowContext = new SelectedRowContext();\r\n          rowSelectedContext.currentRowIndex = self.rowIndex;\r\n          rowSelectedContext.lastRowIndex = self.lastRowIndex;\r\n          self.handleSelectedRowChange(rowSelectedContext);\r\n        }, 300);\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  ngAfterViewInit() {\r\n    // this.gridElement = document.querySelector('.k-grid');\r\n    // // ç»å®grid keydownå¯¹è±¡çæ¹æ³\r\n    // this.ngZone.runOutsideAngular(() => {\r\n    //   this.gridKeydownEvent = this.enterCell.bind(this);\r\n    //   this.gridCellClickEvent = this.cellClickHandler.bind(this);\r\n    //   this.gridCellCloseEvent = this.cellCloseHandler.bind(this);\r\n    //   this.gridElement.addEventListener('keydown', this.gridKeydownEvent);\r\n    //   this.gridElement.addEventListener('cellClick', this.gridCellClickEvent);\r\n    //   this.gridElement.addEventListener('cellClose', this.gridCellCloseEvent);\r\n    // });\r\n  }\r\n  /**\r\n   * æ£æµchangeçè·¯å¾åBindingPathæ¯å¦å¹é\r\n   */\r\n  private checkIfChangeMatchBindingPath(change: Change): boolean {\r\n    let isMatch = false;\r\n    if (!change || !change.path) {\r\n      return isMatch;\r\n    }\r\n\r\n    const changePathArray = change.path;\r\n    if (!changePathArray) {\r\n      return isMatch;\r\n    }\r\n\r\n    if (!(this.bindingData) && !(this.bindingData.bindingPath)) {\r\n      return isMatch;\r\n    }\r\n    const bingdingPathArray = this.bindingData.bindingPath.split('/');\r\n    if (bingdingPathArray.length <= 0) {\r\n      return isMatch;\r\n    }\r\n\r\n    if (changePathArray.length === 0) { // ä¸»è¡¨\r\n      if (this.bindingData.bindingPath === '/') {\r\n        isMatch = true;\r\n      }\r\n    } else if (change.path.length === 1) {// ä¸»ä»è¡¨\r\n      if (bingdingPathArray.length === 2 && bingdingPathArray[1] === change.path[0]) {\r\n        isMatch = true;\r\n      }\r\n    } else if (change.path.length === 2) { // ä¸»ä»ä»è¡¨\r\n      if (bingdingPathArray.length === 3 && bingdingPathArray[1] === change.path[0] && bingdingPathArray[2] === change.path[1]) {\r\n        isMatch = true;\r\n      }\r\n    }\r\n\r\n    return isMatch;\r\n  }\r\n\r\n  /**\r\n   * å¤çéä¸­ä¸»é®åæ´\r\n   */\r\n  private handleSelectedKeyChange(currentId: any) {\r\n    const selectedKeys = this.selectionDir.selectedKeys;\r\n    if (!currentId) {\r\n\r\n      // å¦æå½åè¡æ¶nullï¼ä½selectedKeyséæå¼ï¼æ¸ç©ºå¹¶åéä¸æ¬¡è¡åæ¢\r\n      if (selectedKeys.length > 0) {\r\n        const removedSelectedKeys = selectedKeys.splice(0, selectedKeys.length);\r\n        if (removedSelectedKeys.indexOf(null) === -1) {\r\n          this.emitSelectedRowChange({ currentRowId: null });\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    let oldCurrentRowId = null;\r\n    if (this.IsMultipleSelectionMode) {\r\n      oldCurrentRowId = this.currentRowId;\r\n    } else {\r\n      oldCurrentRowId = this.selectionDir.selectedKeys.length === 0\r\n        ? null : this.selectionDir.selectedKeys[0];\r\n    }\r\n\r\n    // TODO:if (this.currentRowId !== currentId) {\r\n    if (oldCurrentRowId !== currentId) {\r\n      const selectedRowContext: any = {};\r\n      selectedRowContext.currentRowId = currentId;\r\n      this.currentRowId = currentId;\r\n      this.emitSelectedRowChange(selectedRowContext);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * åå°éä¸­è¡åæ¢äºä»¶\r\n   * @description ç»ä¸åéæ¨¡å¼åå¤éæ¨¡å¼ä¸çè¡åæ¢äºä»¶\r\n   */\r\n  private emitSelectedRowChange(selectedRowContext: any) {\r\n    if (!this.IsMultipleSelectionMode) { // ååå¼å®¹\r\n      const currentId = selectedRowContext.currentRowId;\r\n      this.selectionDir.selectedKeys = [currentId];\r\n      this.selectionDir.selectedKeysChange.emit(this.selectionDir.selectedKeys);\r\n    }\r\n\r\n    this.selectedRowChange.emit(selectedRowContext);\r\n  }\r\n\r\n  private checkCurrentRowIdExists(): boolean {\r\n    let isExist = false;\r\n\r\n    if (this.bindingList && this.bindingList.currentId && this.bindingList.currentId.length > 0) {\r\n      isExist = true;\r\n    }\r\n\r\n    return isExist;\r\n  }\r\n\r\n  /**\r\n   * åæ­¥å·²å é¤é®å°éä¸­éå\r\n   */\r\n  private syncDeletedKeys(deletedValueCollection: any[]) {\r\n    if (!deletedValueCollection) {\r\n      return;\r\n    }\r\n\r\n    deletedValueCollection.forEach((id: string) => {\r\n      const index = this.selectionDir.selectedKeys.indexOf(id);\r\n      if (index > -1) {\r\n        this.selectionDir.selectedKeys.splice(index, 1);\r\n\r\n        // selectedKeysè¢«æ¸ç©ºçæ¶åï¼è§¦åä¸æ¬¡è¡åæ´\r\n        if (this.selectionDir.selectedKeys.length === 0) {\r\n          this.emitSelectedRowChange({ currentRowId: null });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private renderCurrentRow(currentId: string) {\r\n    if (!currentId || currentId === '') {// ä¸å­å¨å½åè¡\r\n      return;\r\n    }\r\n\r\n    // TODO:ä½¿ç¨ç­ç¥æ¨¡å¼éæ\r\n    if (this.IsMultipleSelectionMode) {\r\n      return;\r\n    }\r\n\r\n    this.renderSelectionRow(this.bindingList.currentId, this.selectionDir.selectedKeys);\r\n  }\r\n\r\n  /**\r\n   * æä»¤è¾å¥åæ´å¤ç\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    super.ngOnChanges(changes);\r\n    this.refreshView();\r\n  }\r\n\r\n  /**\r\n   * æä»¤éæ¯ï¼æ³¨éè®¢é\r\n   */\r\n  ngOnDestroy() {\r\n    if (this.bindingChangeSubscription) {\r\n      this.bindingChangeSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private refreshView(change?: Change) {\r\n    // this.bindData();\r\n    this.refreshData(change);\r\n\r\n    // å·æ°é¡µèåè®¡ä¿¡æ¯ãå®¢æ·ç«¯åè®¡ï¼ææ¶æ¾è¿éï¼æå¡ç«¯åè®¡æ¶æå¥½ä»è¿éç§»èµ°ãby justin\r\n    this.refreshSummary();\r\n  }\r\n\r\n  /**\r\n   * ç»å®dataå°å®¿ä¸»gridä¸\r\n   * @deprecated\r\n   */\r\n  private bindData() {\r\n    /*const data = this.bindingList.toJSON();\r\n    let skip = 0;\r\n    if (this.bindingList.pageIndex > 0) {\r\n      skip = (this.bindingList.pageIndex - 1) * this.bindingList.pageSize;\r\n    }\r\n    this.updatePager(this.bindingList.pageSize, skip);\r\n    const processed = process(data, Object.assign({}, this.state, { skip: 0 }));\r\n    processed.total = this.bindingList.total;\r\n    this.grid.data = processed;*/\r\n  }\r\n\r\n  private refreshData(change?: Change) {\r\n    let skip = 0;\r\n    const { pageIndex = 1, pageSize = 0 } = this.getPagingInfo() || {};\r\n    if (pageIndex > 0) {\r\n      skip = (pageIndex - 1) * pageSize;\r\n    }\r\n    this.updatePager(pageSize, skip);\r\n    this.endCellEdit(change);\r\n    this.data = this.bindingList.toJSON({ignoreMultiLangInput: true});\r\n  }\r\n  /**\r\n   * éåºç¼è¾ç¶æ\r\n   * @param change åæ´\r\n   */\r\n  private endCellEdit(change?: Change) {\r\n    const isEditing = this.grid.isEditing;\r\n    if (change && change.type === ChangeType.Load && isEditing) {\r\n      this.grid.cancelCell();\r\n    }\r\n  }\r\n  private refreshSummary() {\r\n    if (this.aggrColumns) {\r\n      this.aggrColumns.forEach(aggrCol => {\r\n        if (aggrCol.aggregate) {\r\n          aggrCol.recalculateSummary(this.bindingList);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  @HostListener('pageChange', ['$event'])\r\n  public onPageChange(event: PageChangeEvent) {\r\n    const { skip = 0, take = 0 } = event || {};\r\n    // this.bindingList.setPaginationInfo(skip, take);\r\n    this.bindingData.setPagingInfo(skip, take, this.viewModel.bindingPath);\r\n    // ç§»é¤éä¸­è¡æ ·å¼\r\n    MultiSelectGridUtility.removeRowSelectedStyle(this.grid, this.rowIndex);\r\n  }\r\n  /**\r\n   * éç½®gridåé¡µä¿¡æ¯\r\n   */\r\n  private resetPageInfo() {\r\n    const { pageSize = 0 } = this.getPagingInfo() || {};\r\n    this.bindingData.setPagingInfo(0, pageSize, this.viewModel.bindingPath);\r\n  }\r\n  private initDataState() {\r\n    // const groups: GroupDescriptor[] = [];\r\n    // if (this.groupField) {\r\n    //   groups.push({field: this.groupField, aggregates: this.aggregates||[]});\r\n    //   this.grid.group = groups;\r\n    // }\r\n    // this.state = Object.assign(this.state, {group: groups});\r\n\r\n    const aggregatesDes: AggregateDescriptor[] = [];\r\n    if (this.groupAggrFields) {\r\n      for (const groupAggrField of this.groupAggrFields) {\r\n        aggregatesDes.push({ field: groupAggrField, aggregate: 'sum' });\r\n      }\r\n    }\r\n\r\n    const group: GroupDescriptor[] = [];\r\n    if (this.groupField) {\r\n      group.push({ field: this.groupField, aggregates: aggregatesDes });\r\n    }\r\n    this.group = group;\r\n\r\n  }\r\n\r\n  /*\r\n   * @override\r\n   * @param state State\r\n   */\r\n  onStateChange(state: DataStateChangeEvent) {\r\n    // è¯´æï¼pageræ ¹æ®skipè®¡ç®å½åé¡µç ãkendo gridåé¨ä¼å¨filter stateååæ¶æskipåä¸º0ï¼éç½®å°ç¬¬ä¸é¡µï¼ã\r\n    // å æ­¤éè¦éåonStateChangeæ¹æ³ï¼ä¿®æ­£skip\r\n    if (state.skip !== this.currentSkip) {\r\n      state.skip = this.currentSkip;\r\n    }\r\n    // ä½¿ç¨kendoé»è®¤çå¤çstateçé»è¾\r\n    this.applyState(state);\r\n\r\n    this.rebind();\r\n  }\r\n\r\n  // protected applyState({skip, take, sort, group, filter}: State): void {\r\n  //   this.skip = skip;\r\n  //   this.pageSize = take;\r\n  //   this.sort = sort;\r\n  //   this.group = group;\r\n  //   this.filter = filter;\r\n  // }\r\n\r\n  /*\r\n   * @override æå¡å¨ç«¯åé¡µåæ°ãprocessä½¿ç¨çstateä¸­skipåºä¸º0ï¼å¦åä¸æ¾ç¤ºæ°æ®\r\n   * @param state State\r\n   */\r\n  protected process(state: State): GridDataResult {\r\n    // if (this.editing) {\r\n    //   state.sort = null;\r\n    // } else {\r\n    //   state.sort = this.originalSort;\r\n    // }\r\n    state.skip = 0;\r\n    const { pageSize = 0, total: totalCount = 0 } = this.getPagingInfo() || {};\r\n    // fixï¼ä¸å¯ç¨åé¡µæ¶ï¼take=0å¯¼è´processä¸è¿åæ°æ®\r\n    if (state.take === 0) {\r\n      state.take = this.bindingList.length;\r\n    } else {\r\n      state.take = pageSize;\r\n    }\r\n    // ç¼è¾æ¨¡å¼çå¤æ­ä¾æ®ä¸ºpageSizeå°äºç»å®æ°æ®çæ°éä¸å¯ç¨åé¡µ\r\n    const isEditMode = state.take < this.bindingList.length;\r\n    if (isEditMode) {\r\n      state.take = this.bindingList.length;\r\n    }\r\n    const processed = super.process(state);\r\n    // fix:æ°æ®ä»æ å°ææ¶åé¡µä¸å¯ç¨\r\n    processed.total = Math.max(totalCount, this.bindingList.length);\r\n    // åé¡µç¼è¾æ¨¡å¼ä¸æ°æ®æ»è®°å½æ°ä¸è½ç­äºçå®çæ°æ®æ°æ®ï¼å¦ååé¡µå·¥å·æ¡å°±ä¼èªå¨å¢å åé¡µé¡µç­¾\r\n    if (isEditMode) {\r\n      processed.total = totalCount || 1;\r\n    }\r\n\r\n    return processed;\r\n  }\r\n\r\n  /*\r\n   * éä¸­è¡ä¸»é®ååå¤ç\r\n   * @param event { SelectionEvent} éä¸­è¡ååå¤ç\r\n   */\r\n  @HostListener('selectedKeysChange', ['$event'])\r\n  public selectedKeysChangeHandler(selectedKeys: string[]) {\r\n    if (!(this.IsMultipleSelectionMode)) {// åéæ¨¡å¼ä¸\r\n      // è®¾ç½®BindingDataä¸­çå½åè¡\r\n      this.setSelectionIdToBindingData(selectedKeys[selectedKeys.length - 1]);\r\n    }\r\n\r\n    this.viewModel.uiState.setPropertyValue('ids', this.selectionDir.selectedKeys); // æ´æ°éå\r\n  }\r\n\r\n  /*\r\n   * å¤çGridè¡åæ¢äºä»¶\r\n   * @param event { SelectionEvent} è¡åæ¢äºä»¶å¯¹è±¡\r\n   */\r\n  @HostListener('selectionChange', ['$event'])\r\n  public selectionChangeHandler(event: any) {\r\n    if (this.IsMultipleSelectionMode) {\r\n      this.handleSelectedCheckboxChange(this.grid.wrapper, event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * å¤çcheckboxéä¸­äºä»¶\r\n   */\r\n  private handleSelectedCheckboxChange(elementRef: ElementRef, event: any) {\r\n    MultiSelectGridUtility.renderSelectedChangeCheckbox(elementRef, event);\r\n    this.selectedCheckboxChange.emit(event);\r\n  }\r\n\r\n  /*\r\n   * ååæ ¼ç¹å»å¤ç\r\n   * @param event { CellClickEvent } ååæ ¼åå»äºä»¶å¯¹è±¡\r\n   */\r\n  @HostListener('cellClick', ['$event'])\r\n  public cellClickHandler(event: CellClickEvent) {\r\n    this.cellClickParam = event;\r\n    this.cellClickEvent = event;\r\n    this.rowIndex = event.rowIndex;\r\n    this.columnIndex = event.columnIndex;\r\n    this.sender = event.sender;\r\n\r\n    // å¤éæ¨¡å¼ä¸ï¼ä¸ä¸åç»çæåµä¸ï¼æ£æµè¡åæ¢\r\n    if (this.IsMultipleSelectionMode && !this.gridOption.groupable) {\r\n      const currentRowIndex = event.rowIndex;\r\n      if (currentRowIndex !== this.lastRowIndex) {\r\n        const rowSelectedContext: SelectedRowContext = new SelectedRowContext();\r\n        rowSelectedContext.currentRowIndex = currentRowIndex;\r\n        rowSelectedContext.lastRowIndex = this.lastRowIndex;\r\n\r\n        this.handleSelectedRowChange(rowSelectedContext);\r\n      }\r\n    }\r\n\r\n    // è®¾ç½®å®ä½çå½åè¡\r\n    this.dataId = this.getSelectedIdFromGrid(event.dataItem);\r\n    this.setSelectionIdToBindingData(this.dataId);\r\n\r\n    // è¥ç¶ææºä¸æ¯å¯ç¼è¾ç¶æ ä¸å¯ç¼è¾\r\n    if (!this.isEditable()) {\r\n      return;\r\n    }\r\n\r\n\r\n\r\n    // åæ¨¡æ¿ä¸å­å¨  ä¸å¯ç¼è¾\r\n    if (!event.column.editTemplate) {\r\n      return;\r\n    }\r\n    if (event.type === 'click' && !event.isEdited) {\r\n\r\n\r\n      // å¦æå­å¨æ¾éç¶åµ  ç¡®å®æ­£ç¡®çcolumnIndex\r\n      const originColums = this.getColumns(this.gridOption.fields);\r\n      const columns: any[] = this.getColumns(originColums);\r\n      const currentColumnIndex = columns.findIndex((col: any) => col.dataField === event.column.field);\r\n      const hiddenColLen = columns.slice(0, currentColumnIndex + 1).filter(col => !col.visible).length;\r\n\r\n      // èµå¼å¨å±è¡ç´¢å¼  åç´¢å¼\r\n      this.rowIndex = event.rowIndex;\r\n      this.columnIndex = event.columnIndex + hiddenColLen;\r\n      this.hiddenColLen = hiddenColLen;\r\n      this.sender = event.sender;\r\n\r\n      this.setEditable(this.rowIndex, this.columnIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * å¤çéä¸­è¡åæ¢äºä»¶\r\n   */\r\n  private handleSelectedRowChange(rowSelectedContext: SelectedRowContext) {\r\n    MultiSelectGridUtility.renderClickChangedRow(this.grid, rowSelectedContext);\r\n\r\n    this.rowIndex = rowSelectedContext.currentRowIndex;\r\n    this.lastRowIndex = rowSelectedContext.currentRowIndex;\r\n    // æ´æ°å½åè¡\r\n    const id = this.getPrimary(this.rowIndex);\r\n    this.setSelectionIdToBindingData(id);\r\n  }\r\n  /**\r\n   * è·åæå®è¡çä¸»é®\r\n   * @param row è¡å·\r\n   */\r\n  private getPrimary(row: number) {\r\n    let data: any = this.grid.data;\r\n    if (data && !Array.isArray(data) && data.hasOwnProperty('data')) {\r\n      data = data.data;\r\n    }\r\n    const { pageIndex = 1, pageSize = 0 } = this.getPagingInfo() || {};\r\n    const skip = this.bindingList.skip;\r\n    // ä¸åé¡µæèç¬¬ä¸é¡µæ¶åä¸éè¦ä¿®æ¹è¡å·\r\n    const rowNumber = pageSize === 0 || pageIndex === 1 ? row : row - skip;\r\n    if (data.length > rowNumber) {\r\n      return data[rowNumber][this.bindingList.primaryKey];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /*\r\n   * ååæ ¼ç»æç¼è¾å¤ç\r\n   * @param event ååæ ¼ç»æç¼è¾äºä»¶å¯¹è±¡\r\n   */\r\n  @HostListener('cellClose', ['$event'])\r\n  public cellCloseHandler(event: any): any {\r\n\r\n    if (this.dialogSer.hasDialogOpened()) {\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (this.rts) {\r\n      // å¸®å©ç»ä»¶ææ¬åååå»æ¥è¯¢\r\n      if (this.rts.getFormState('lookup.pending')) {\r\n        event.preventDefault();\r\n        return;\r\n      }\r\n\r\n      // ç¹å»å¸®å©ç¡®å®å¯åæ¶æé®åä¸ç»æå½åååæ ¼ç¼è¾\r\n      if (event.originalEvent) {\r\n        if (this.rts.eventPath(event.originalEvent).find(n => n.tagName === 'FARRIS-DIALOG')) {\r\n          event.preventDefault();\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    const { formGroup, column, dataItem, rowIndex } = event;\r\n    const columns = this.getColumns(this.gridOption.fields);\r\n    let currentCol = columns.find((element: any) => {\r\n      return element.dataField === column.field;\r\n    });\r\n    const formControlValue = formGroup[currentCol.editor.binding.path].value;\r\n    if (currentCol.getDynamicData) {\r\n      // è¥æ­¤åæ¯å¨æååæ ¼å\r\n      currentCol = currentCol.getDynamicData(dataItem, currentCol);\r\n    }\r\n    this.setValue(formControlValue, currentCol);\r\n  }\r\n\r\n  /*\r\n     * åè½¦  åæ¢ååæ ¼\r\n     * @param event é®çæä¸äºä»¶\r\n     */\r\n  @HostListener('keydown', ['$event'])\r\n  enterCell(e: any) {\r\n    // åè½¦é®\r\n    if (!e.shiftKey && e.keyCode === 13) {\r\n      // textarea enter å±è½æ¢è¡æä½\r\n      e.preventDefault();\r\n      if (!this.sender) {\r\n        return;\r\n      }\r\n      // ç±äºkeydown äºä»¶ä¼åæ§è¡ï¼æä»¥è¿éåè¦æ§è¡blur äºä»¶ï¼\r\n      e.target.blur();\r\n      this.ngZone.runOutsideAngular(() => {\r\n        setTimeout(() => {\r\n          if (this.rts && this.rts.getFormState('lookup.pending')) {\r\n            e.preventDefault();\r\n            return;\r\n          }\r\n          this.enterNextCell();\r\n        }, 201);\r\n      });\r\n    }\r\n  }\r\n\r\n  /*\r\n     * ç»å®grid option\r\n     * @param dataItem è¡æ°æ®\r\n     */\r\n  private bindingGridOption() {\r\n    if (!this.farrisBindingGridOption) {\r\n      return;\r\n    }\r\n    Object.defineProperty(this.grid, 'gridOption', { value: this.farrisBindingGridOption });\r\n  }\r\n\r\n  /*\r\n   * æ´æ°Gridåé¡µç¶æ\r\n   * @param take\r\n   * @param skip\r\n   */\r\n  private updatePager(take: number, skip: number) {\r\n    if (take === 0) {\r\n      this.currentSkip = 0;\r\n      this.pageSize = 0;\r\n      this.skip = 0;\r\n      this.grid.pageable = false;\r\n    } else {\r\n      this.currentSkip = skip;\r\n      this.skip = skip;\r\n      this.pageSize = take;\r\n      this.grid.pageable = {\r\n        buttonCount: 10,\r\n        info: true,\r\n        type: 'numeric',\r\n        pageSizes: false,\r\n        previousNext: true\r\n      };\r\n    }\r\n  }\r\n\r\n  /*\r\n   * è®¾ç½®ååæ ¼å¯ç¼è¾æ§\r\n   * @param dataItem è¡æ°æ®\r\n   * @param column åå¯¹è±¡\r\n   * @param rowIndex è¡ç´¢å¼\r\n   * @param columnIndex åç´¢å¼\r\n   * @param sender gridå®ä¾\r\n   */\r\n  setEditable(rowNumber: number, columnNumber: number) {\r\n    const data = this.grid.data['data'];\r\n    const { pageIndex = 1, pageSize = 0 } = this.getPagingInfo() || {};\r\n    const skip = this.bindingList.skip;\r\n    // ä¸åé¡µæèç¬¬ä¸é¡µæ¶åä¸éè¦ä¿®æ¹è¡å·\r\n    const dataRowNumber = pageSize === 0 || pageIndex === 1 ? rowNumber : rowNumber - skip;\r\n    let item = data[dataRowNumber];\r\n    if (this.gridOption.groupable) {\r\n      item = this.getGroupItem(data, dataRowNumber);\r\n    }\r\n    const originColums = this.getColumns(this.gridOption.fields);\r\n    const columns = this.getColumns(originColums);\r\n    /* åå¦åçé¡ºåºæ¹å æ¯å¦å­å¨åºå®å  é£ä¹åºè¯¥è·åçæ­£çåå¯¹è±¡ */\r\n    // let col = columns[columnNumber];\r\n\r\n    let tempIndex = columnNumber;\r\n    // å½ååç´¢å¼ä¸ä¸º0\r\n    if (this.grid['gridOption'].showLineNumber) {\r\n      tempIndex = tempIndex - 1;\r\n    }\r\n    if (this.grid.selectable && this.grid.selectable['mode'] === 'multiple') {\r\n      tempIndex = tempIndex - 1;\r\n    }\r\n    const col = columns[tempIndex];\r\n\r\n    const params = {\r\n      dataItem: item,\r\n      column: col,\r\n      rowIndex: rowNumber,\r\n      columnIndex: tempIndex,\r\n    };\r\n\r\n    // æ§å¶ååæ ¼çå¯ç¼è¾æ§\r\n    if (col && !col.editable) {\r\n      col.editable = (param: object) => true;\r\n    }\r\n    if (col && this.notReadOnly(col, params)) {\r\n      // è®¾ç½®å½åè¡\r\n      this.dataId = this.getSelectedIdFromGrid(item);\r\n      this.setSelectionIdToBindingData(this.dataId);\r\n      // const value = this.getValue(item, col.dataField);\r\n      // this.setValue(value, col);\r\n      this.sender.editCell(rowNumber, columnNumber - this.hiddenColLen, this.viewModel.form);\r\n    }\r\n\r\n  }\r\n  /*\r\n  è·åæ´æ° rowIndex columnIndex\r\n   */\r\n  updateIndex(rowNumber: number, columnIndex: number) {\r\n    const newColumnIndex = (columnIndex + 1) % this.len;\r\n    if (!newColumnIndex) {\r\n      const dataLen = this.bindingList.toJSON().length;\r\n      const newRowIndex = (rowNumber + 1) % dataLen;\r\n      return { rowIndex: newRowIndex, columnIndex: newColumnIndex };\r\n    }\r\n    return {\r\n      rowIndex: rowNumber,\r\n      columnIndex: newColumnIndex\r\n    };\r\n  }\r\n\r\n  /* æ¯å¦åªè¯» */\r\n  notReadOnly(column: any, param: any) {\r\n    if (!column) {\r\n      return false;\r\n    }\r\n    return column.editable(param) && !column.editor.readonly;\r\n  }\r\n\r\n  /*\r\n     * ç»åè¡¨èµå¼ æç»formcontrolèµå¼\r\n      */\r\n  setValue(value: any, column: any) {\r\n    const currentColumnType = column.dataType;\r\n    // åæ¶å¤æ­gridOptionçåå¯¹è±¡\r\n    const bindingData = this.viewModel.bindingData;\r\n    const fieldPaths = this.getFieldPaths(bindingData.bindingPath, column.dataField);\r\n    // å­å¨è¡ç¼è¾å¨\r\n    if (currentColumnType === 'date') {\r\n      let dateStr = this.dateService.formatTo(value, 'yyyy-MM-dd HH:mm:ss');\r\n      if (!dateStr) {\r\n        dateStr = '';\r\n      }\r\n      this.viewModel.bindingData.setValue(fieldPaths, dateStr, true, true);\r\n    } else {\r\n      this.viewModel.bindingData.setValue(fieldPaths, value, true, true);\r\n    }\r\n  }\r\n\r\n  /* åç»æ¶ è·åç¹å»è¡æ°æ® */\r\n  getGroupItem(data: any[], rowNumber: number) {\r\n    let index = rowNumber;\r\n    for (const i in data) {\r\n      if (index < data[i].items.length) {\r\n        return data[i].items[index];\r\n      } else {\r\n        index = index - data[i].items.length;\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n   * è·å ååæ ¼å¼  ä¸»ä»è¡¨æ¯æ\r\n   * @param dataItem è¡æ°æ®\r\n   * @param field å­æ®µ\r\n   */\r\n  getValue(dataItem: any, field: string) {\r\n    const index = field.indexOf('.');\r\n    if (index < 0) {\r\n      return dataItem[field];\r\n    }\r\n    const fields = field.split('.');\r\n    // fieldå­ç¬¦ä¸²ç»å\r\n    return fields.reduce((result: any, next: any) => {\r\n      return result[next];\r\n    }, dataItem);\r\n  }\r\n\r\n  /*\r\n  * è·å bindingData è·¯å¾\r\n  * @param bindingPath å½åç»å®çå­æ®µè·¯å¾\r\n  * @param fieldName å­æ®µ\r\n  */\r\n  private getFieldPaths(bindingPath: string, field: string): string[] {\r\n    let fieldPath = '';\r\n    if (bindingPath.length > 1) {\r\n      fieldPath = bindingPath.substr(1).replace(/\\//g, '.') + '.' + field;\r\n    } else {\r\n      fieldPath = field;\r\n    }\r\n    return fieldPath.split('.');\r\n  }\r\n\r\n  /**\r\n   * åè½¦è¿å¥ä¸ä¸ä¸ªååæ ¼\r\n   */\r\n  enterNextCell() {\r\n    const index = this.updateIndex(this.rowIndex, this.columnIndex);\r\n    if (!index.columnIndex && !index.rowIndex) {\r\n      const len = this.bindingList.toJSON().length;\r\n      // å¦æå­å¨æ·»å æ°æ®çAPI\r\n      this.appendRow.emit();\r\n      if (this.appendRow.observers && this.appendRow.observers.length) {\r\n        this.interVal = setInterval(() => {\r\n          if (this.bindingList.toJSON().length - 1 === len) {\r\n            this.setEditable(this.bindingList.toJSON().length - 1, 0);\r\n            this.rowIndex = this.bindingList.toJSON().length - 1;\r\n            this.columnIndex = 0;\r\n            clearInterval(this.interVal);\r\n          }\r\n        }, 0);\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.setEditable(index.rowIndex, index.columnIndex);\r\n    this.rowIndex = index.rowIndex;\r\n    this.columnIndex = index.columnIndex;\r\n  }\r\n\r\n  /* è·åçæ­£çåå¯¹è±¡ */\r\n  getColumns(columns: any) {\r\n    // å¤æ­æ¯å¦å­å¨åºå®å\r\n    const hasLocked = columns.some((ele: any) => {\r\n      return ele.frozen;\r\n    });\r\n    if (hasLocked) {\r\n      const lockedColumns = columns.filter((ele: any) => {\r\n        return ele.frozen;\r\n      });\r\n      const notLockedColumns = columns.filter((ele: any) => {\r\n        return !ele.frozen;\r\n      });\r\n      return [...lockedColumns, ...notLockedColumns];\r\n    }\r\n    return columns;\r\n  }\r\n\r\n  /*\r\n   * æ¸²ææå®è¡ä¸ºéä¸­è¡ï¼å°æå®è¡çkeyæ·»å å°éä¸­è¡éåä¸­\r\n   */\r\n  private renderSelectionRow(key: string, selectedKeys: any[]) {\r\n    if (!key || key === '') {\r\n      return;\r\n    }\r\n\r\n    // TODO:ä½¿ç¨ç­ç¥æ¨¡å¼éæ\r\n    if (this.IsMultipleSelectionMode) {\r\n      const index = selectedKeys.indexOf(key);\r\n      if (index >= 0) {\r\n        return;\r\n      }\r\n\r\n      selectedKeys.push(key);\r\n    } else {\r\n      if (selectedKeys.length === 1 && selectedKeys[0] === key) {\r\n        return;\r\n      }\r\n\r\n      selectedKeys.splice(0, selectedKeys.length);\r\n      selectedKeys.push(key);\r\n    }\r\n\r\n    this.selectionDir.selectedKeysChange.emit(selectedKeys); // æå¨è§¦åselectedKeysChangeäºä»¶\r\n  }\r\n\r\n  /*\r\n   * è·åGridä¸çå½åè¡åç \r\n   * @param dataItem è¡æ°æ®\r\n   */\r\n  private getSelectedIdFromGrid(dataItem: any) {\r\n    const primaryKey = this.bindingList.primaryKey;\r\n    return dataItem[primaryKey];\r\n  }\r\n\r\n  /*\r\n   * è®¾ç½®BindingListçå½åè¡\r\n   * @param id å½åè¡åç \r\n   */\r\n  private setSelectionIdToBindingData(id: string): void {\r\n    this.bindingList.setCurrentId(id, true);\r\n  }\r\n\r\n  /*\r\n  *åè¡¨æ´ä½æ¯å¦å¯ç¼è¾\r\n   */\r\n  isEditable() {\r\n    if (this.editable === undefined) {\r\n      if (!this.viewModel.stateMachine) {\r\n        // ç¶ææºä¸å­å¨çæ¶å\r\n        return false;\r\n      }\r\n      // ç¶ææºå­å¨çæ¶å\r\n      return this.viewModel.stateMachine['editable'];\r\n    }\r\n    // èªå®ä¹èµå¼\r\n    return this.editable;\r\n  }\r\n  /*  */\r\n  isDataChanged() {\r\n    let hasUnsavedData = false;\r\n    const entityArray = this.viewModel.frameContext.repository.entityCollection.toArray();\r\n    for (const entity of entityArray) {\r\n      if (entity.changes.length > 0) {\r\n        hasUnsavedData = true;\r\n        break;\r\n      }\r\n    }\r\n    return hasUnsavedData;\r\n  }\r\n}\r\n","\r\n/*\r\n * @Author: Witt\r\n * @Date: 2019-04-01 17:26:50\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-12-12 16:17:06\r\n */\r\nimport { FrameContext } from '@farris/devkit';\r\nimport { TreeNode, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { PathHierarchyInfo } from './types';\r\n// tslint:disable: no-string-literal\r\n/**\r\n * æ èç¹æé å¨\r\n * @summary\r\n * å°BindingDataä¸­çæ°æ®éåè½¬æ¢æTreeTableèç¹éå\r\n */\r\nclass PathTreeNodeBuilder {\r\n  private levelGroup: { [level: string]: any[] } = {};\r\n  private frameContext: FrameContext;\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(allNodesData: any[], oldTreeNodes: TreeNode[], primaryKey: string, hierarchyInfoKey: string, context?: any) {\r\n    this.primaryKey = primaryKey;\r\n    this.hierarchyInfoKey = hierarchyInfoKey;\r\n    this.allNodes = [];\r\n    this.allNodesData = allNodesData;\r\n    this.context = context || {};\r\n    this.nodesWaitExpand = [];\r\n    this.nodesShouldExpand = context && context.nodesShouldExpand || [];\r\n    this.frameContext = context && context.frameContext || null;\r\n    this.addTreeLoadCompleteListener(this.onTreeLoadComplete.bind(this));\r\n\r\n    this.initLevelGroup();\r\n    this.allNodesMap = new Map<string, TreeNode>();\r\n    this.allOldNodesMap = new Map<string, TreeNode>();\r\n    this.buildNodesDataMap(oldTreeNodes);\r\n  }\r\n  /**\r\n   * å±å¼è³å±çº§\r\n   * @description -1ä¸ºä¸å±å¼\r\n   */\r\n  private get expandLevel() {\r\n    return this.context && this.context.hasOwnProperty('expandLevel') ? this.context['expandLevel'] : -1;\r\n  }\r\n  private get component(): TreeTableComponent {\r\n    return this.context && this.context['component'];\r\n  }\r\n  private get addTreeLoadCompleteListener() {\r\n    return this.context && this.context['addTreeLoadCompleteListener'] || function (args: any) { };\r\n  }\r\n  /**\r\n   * éè¦å±å¼çèç¹\r\n   */\r\n  private nodesShouldExpand: string[];\r\n  /**\r\n   * ç­å¾å±å¼çèç¹\r\n   * @description èç¹ç»æ\r\n   * ```\r\n   * {id:'xxx',expanded:false}\r\n   * ```\r\n   */\r\n  private nodesWaitExpand: any[] = [];\r\n\r\n  /**\r\n   * ä¸»é®å­æ®µå\r\n   */\r\n  private primaryKey: string;\r\n\r\n  /**\r\n   * åçº§ç å­æ®µå\r\n   */\r\n  private hierarchyInfoKey: string;\r\n\r\n  /**\r\n   * èç¹çæ°æ®éå\r\n   */\r\n  private allNodesData: any[];\r\n\r\n  /**\r\n   * èç¹éå\r\n   */\r\n  private allNodes: TreeNode[];\r\n\r\n  /**\r\n   * ä¸ä¸æ¬¡ç»å®çæ èç¹éåMap\r\n   */\r\n  private allNodesMap: Map<string, TreeNode>;\r\n\r\n  /**\r\n   * ä¸ä¸æ¬¡ç»å®çæ èç¹éåMap\r\n   */\r\n  private allOldNodesMap: Map<string, TreeNode>;\r\n  /**\r\n   * ä¸ä¸æ\r\n   */\r\n  private context: any;\r\n  public updateTreeNode(allNodesData: any, data: any) {\r\n    this.allNodesData = allNodesData;\r\n    this.initLevelGroup();\r\n    this.buildNodesDataMap(data);\r\n  }\r\n  public build(): TreeNode[] {\r\n    const tree: TreeNode[] = [];\r\n    const childrenOf = {};\r\n    this.allNodesData.forEach(item => {\r\n      const id = item.id;\r\n      const parentId = this.getParentId(item);\r\n      // item.parentId = parentId;\r\n      // å±å¼æ°å¢èç¹çç¶èç¹\r\n      const isNewNode = this.isNewNode(item);\r\n      if (isNewNode === true) {\r\n        this.expandParentNode(item);\r\n      }\r\n      // æé æ èç¹\r\n      const node = this.buildNode(item);\r\n      childrenOf[id] = childrenOf[id] || [];\r\n      node.children = childrenOf[id];\r\n\r\n      this.allNodesMap.set(item[this.primaryKey], node);\r\n      if (parentId) {\r\n        childrenOf[parentId] = childrenOf[parentId] || [];\r\n        childrenOf[parentId].push(node);\r\n      } else {\r\n        tree.push(node);\r\n      }\r\n    });\r\n    return tree;\r\n  }\r\n  /**\r\n   * æé æ èç¹\r\n   */\r\n  public build1(): TreeNode[] {\r\n    let minLayer;\r\n    // è·åæé¡¶çº§èç¹çlayer\r\n    this.allNodesData.forEach(node => {\r\n      const hierarchyInfo = this.getHierarchyInfo(node);\r\n      if (hierarchyInfo) {\r\n        const layer = hierarchyInfo['layer'];\r\n        if (!isNaN(layer)) {\r\n          if (minLayer === undefined) {\r\n            minLayer = layer;\r\n          } else if (layer < minLayer) {\r\n            minLayer = layer;\r\n          }\r\n        }\r\n      }\r\n    });\r\n    const topLayer = minLayer - 1;\r\n    this.buildNodes('', topLayer, this.allNodesData, this.allNodes);\r\n    return this.allNodes;\r\n  }\r\n\r\n  /**\r\n   * æé æ èç¹éå\r\n   */\r\n  private buildNodes(fPath: string, fLayer: number, allNodesData: any[], treeNodes: TreeNode[]): void {\r\n    const childNodesData = this.getChildNodesData(fPath, fLayer);\r\n    childNodesData.forEach((nodeData: any) => {\r\n      // å±å¼æ°å¢èç¹çç¶èç¹\r\n      const isNewNode = this.isNewNode(nodeData);\r\n      if (isNewNode === true) {\r\n        this.expandParentNode(nodeData);\r\n      }\r\n\r\n      // æé æ èç¹\r\n      const node = this.buildNode(nodeData);\r\n      treeNodes.push(node);\r\n      this.allNodesMap.set(nodeData[this.primaryKey], node);\r\n\r\n      // éå½éåä¸çº§èç¹\r\n      const hierarchyInfo = this.getHierarchyInfo(nodeData);//nodeData[this.hierarchyInfoKey];\r\n      const currentLayer = hierarchyInfo['layer'];\r\n      const currentPath = hierarchyInfo['path'];\r\n      this.buildNodes(currentPath, currentLayer, allNodesData, node.children as TreeNode[]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * åå»ºæ èç¹\r\n   */\r\n  private buildNode(nodeData: any): TreeNode {\r\n    const isLeaf = this.isLeaf(nodeData);\r\n    // è·åèç¹çå±å¼ç¶æ\r\n    const shouldExpand = this.shouldExpand(nodeData);\r\n    // èç¹è½ç¶åºè¯¥å±å¼ï¼ä½å¯è½æ¯å ä¸ºä¹åå°±æ¯å±å¼ç¶æï¼æä»¥åºè¯¥æ£æ¥èç¹ä¹åçç¶æ\r\n    const originExpandStatus = this.isExpanded(nodeData);\r\n    // å¦æåºè¯¥å±å¼è¯¥èç¹ï¼ä½æ¯è¯¥èç¹ä¹åæç¶æï¼é£ä¹è¯¥èç¹ä¸åºè¯¥åç±ç¨åºå±å¼ã\r\n    if (!originExpandStatus && shouldExpand) {\r\n      this.expandNode(nodeData);\r\n    }\r\n    const paginationInfo = this.buildPaginationInfo(nodeData);\r\n    const treeNode: TreeNode = {\r\n      data: Object.assign({}, nodeData),\r\n      children: [],\r\n      expanded: shouldExpand,\r\n      leaf: isLeaf\r\n    };\r\n    if (paginationInfo) {\r\n      treeNode.pagination = paginationInfo;\r\n    }\r\n    return treeNode;\r\n  }\r\n  /**\r\n   * æé åé¡µä¿¡æ¯\r\n   * @param nodeData nodeData\r\n   * @returns \r\n   */\r\n  private buildPaginationInfo(nodeData: any): { pageIndex: number, pageSize: number, total: number } | null {\r\n    let result = null;\r\n    if (this.frameContext) {\r\n      const id = this.getPrimary(nodeData);\r\n      // è·ååé¡µä¿¡æ¯\r\n      const key = `_NODE_${id}_PAGINATION_INFO_`;\r\n      const pagination = this.frameContext.params.get(key) || null;\r\n      if (pagination && pagination.pageCount > 1) {\r\n        result = {\r\n          pageIndex: pagination.pageIndex,\r\n          pageSize: pagination.pageSize,\r\n          total: pagination.totalCount\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * è®¡ç®èç¹æ¯å¦éè¦å±å¼\r\n   * @param nodeData nodeData\r\n   */\r\n  private shouldExpand(nodeData: any): boolean {\r\n    const [layer, isLeaf] = [this.getNodeLayer(nodeData), this.isLeaf(nodeData)];\r\n    // æ°¸è¿ä¸å±å¼å¶å­èç¹\r\n    if (isLeaf) {\r\n      return false;\r\n    }\r\n    let expanded = this.isExpanded(nodeData);\r\n    if (!expanded) {\r\n      const id = this.getPrimary(nodeData);\r\n      if (this.nodesWaitExpand.findIndex(node => node && node.id === id) > -1) {\r\n        return false;\r\n      }\r\n      if (this.nodesShouldExpand.findIndex(nodeId => nodeId === id) > -1) {\r\n        return true;\r\n      }\r\n      if (this.expandLevel === -1) {\r\n        // -1 ä¸ºä¸å±å¼\r\n        expanded = false;\r\n      } else if (this.expandLevel === 0) {\r\n        // 0 ä¸ºå¨é¨å±å¼\r\n        expanded = true;\r\n      } else {\r\n        // æ²¡æå¯ç¨åå±å è½½ï¼éè¿å±å¼å±çº§ç¡®å®æ¯å¦å±å¼è¯¥èç¹\r\n        expanded = layer <= this.expandLevel;\r\n        // å¦æèç¹åæ¬å­å¨ä¸èç¹æ²¡æå±å¼åä¸å±å¼\r\n        const oldTreeNode = this.getOldNode(nodeData);\r\n        if (oldTreeNode && !oldTreeNode.expanded) {\r\n          expanded = false;\r\n        }\r\n      }\r\n    }\r\n    return expanded;\r\n  }\r\n  /**\r\n   * å±å¼æ èç¹\r\n   * @description å®å¨å è½½æ ä½¿ç¨å±å¼å±æ§å¨buildNodeæ¶å·²ç»å±å¼ï¼æ­¤å½æ°çä¸»è¦ç¨äºå±å¼åçº§å è½½æ \r\n   * @param nodeData nodeData\r\n   */\r\n  private expandNode(nodeData: any) {\r\n    const [path, layer] = [this.getNodePath(nodeData), this.getNodeLayer(nodeData)];\r\n    const childs = this.getChildNodesData(path, layer);\r\n\r\n    // å½åèç¹ä¸æ¯å¶å­èç¹ï¼ä½å¨èç¹æ°æ®ä¸­åæ¾ä¸å°è¯¥èç¹çå­èç¹ï¼åè®¤ä¸ºæ å¯ç¨äºåå±å è½½\r\n    if (!childs || childs.length < 1) {\r\n      // åå±å è½½æ éè¦éè¿è§¦åèç¹å±å¼äºä»¶æå è½½ä¸å±ï¼ç®åæ ä¸è¿ä¸å­å¨è¯¥èç¹ï¼æ æ³ç´æ¥å±å¼ï¼éè¦ç­æ å è½½å®ä¹ååå±å¼\r\n      const id = this.getPrimary(nodeData);\r\n      if (this.nodesWaitExpand.findIndex(node => node && node.id === id) < 0) {\r\n        this.nodesWaitExpand.push({ id, expanded: false });\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * æ å è½½å®æäºä»¶\r\n   */\r\n  private onTreeLoadComplete() {\r\n    const index = this.nodesWaitExpand.findIndex(node => !node.expanded);\r\n    const nodeData = this.nodesWaitExpand[index] || {};\r\n    const { id } = nodeData;\r\n    if (id) {\r\n      const rowNode = this.component.findRowNode(id);\r\n      if (rowNode) {\r\n        nodeData.expanded = true;\r\n        // if (nodeData && nodeData.node && !nodeData.node.expanded) {\r\n        //   return;\r\n        // }\r\n        this.component.expandNode(id);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * è·åä¸»é®\r\n   * @param nodeData nodeData\r\n   */\r\n  private getPrimary(nodeData: any) {\r\n    return nodeData[this.primaryKey];\r\n  }\r\n  // #region å·¥å·æ¹æ³ï¼å¾åç¬å°è£\r\n\r\n  /**\r\n   * è·åå­çº§èç¹çæ°æ®éå\r\n   */\r\n  private getChildNodesData(fPath: string, fLayer: number): any[] {\r\n    const childNodesData = [];\r\n    this.allNodesData.forEach((nodeData: any) => {\r\n\r\n      // @todoï¼å¾å é¤ï¼å¼å®¹æ²¡æhierarchyInfoçæ°æ®\r\n      const hierarchyInfo = this.getHierarchyInfo(nodeData);//this.getValue(nodeData, this.hierarchyInfoKey); /// nodeData[this.hierarchyInfoKey];\r\n      if (!hierarchyInfo) {\r\n        return;\r\n      }\r\n\r\n      // å¹éèç¹\r\n      const currentLayer = hierarchyInfo['layer'];\r\n      const currentPath = hierarchyInfo['path'];\r\n      if ((currentLayer === fLayer + 1) && currentPath && currentPath.startsWith(fPath)) {\r\n        childNodesData.push(nodeData);\r\n      }\r\n    });\r\n    return childNodesData;\r\n  }\r\n\r\n  private getHierarchyInfo(nodeData: any): PathHierarchyInfo {\r\n    return this.getValue(nodeData, this.hierarchyInfoKey);//nodeData[this.hierarchyInfoKey];\r\n  }\r\n\r\n  private initLevelGroup() {\r\n    this.levelGroup = {};\r\n    this.allNodesData.forEach((nodeData) => {\r\n      const hierarchyInfo = this.getHierarchyInfo(nodeData);\r\n      const key = `level${hierarchyInfo.layer}`;\r\n      if (this.levelGroup[key]) {\r\n        this.levelGroup[key].push(nodeData);\r\n      } else {\r\n        this.levelGroup[key] = [nodeData];\r\n      }\r\n    });\r\n  }\r\n  private getParentId(node: any) {\r\n    const hierarchyInfo = this.getHierarchyInfo(node);\r\n    const parentLevelGroup = this.levelGroup[this.getLevelGroupKey(hierarchyInfo.layer - 1)] || [];\r\n    const parent = parentLevelGroup.find(nodeData => {\r\n      const currentHierarchyInfo = this.getHierarchyInfo(nodeData);\r\n      if (currentHierarchyInfo.isDetail === true) {\r\n        return false;\r\n      }\r\n      return hierarchyInfo.path.startsWith(currentHierarchyInfo.path);\r\n    });\r\n    if (parent) {\r\n      return parent.id;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  private getLevelGroupKey(level: any) {\r\n    return `level${level}`;\r\n  }\r\n  /**\r\n   * æ ¹æ®è·¯å¾è·åæ°æ®\r\n   * @param target target\r\n   * @param path è·¯å¾\r\n   */\r\n  private getValue(target: any, path: string) {\r\n    if (path.indexOf('/') === -1) {\r\n      return target[path];\r\n    }\r\n    const paths: any = path.split('/').filter(p => p);\r\n    if (paths.length < 1) {\r\n      return target;\r\n    }\r\n    return paths.reduce((result, path) => {\r\n      return result && result[path];\r\n    }, target);\r\n  }\r\n  /**\r\n   * è·ååçº§ä¿¡æ¯ä¸­çå±çº§\r\n   * @param nodeData nodeData\r\n   */\r\n  private getNodeLayer(nodeData: any) {\r\n    const hierarchyInfo = this.getHierarchyInfo(nodeData);\r\n    return hierarchyInfo['layer'];\r\n  }\r\n  /**\r\n   * è·ååçº§ä¿¡æ¯ä¸­çè·¯å¾\r\n   * @param nodeData nodeData\r\n   */\r\n  private getNodePath(nodeData: any) {\r\n    const hierarchyInfo = this.getHierarchyInfo(nodeData);\r\n    return hierarchyInfo['path'];\r\n  }\r\n  /**\r\n   * è·åå±å¼ç¶æ\r\n   */\r\n  private isExpanded(newData: any): boolean {\r\n    const oldTreeNode = this.getOldNode(newData);\r\n    return oldTreeNode ? oldTreeNode.expanded : undefined;\r\n  }\r\n\r\n  /**\r\n   * æ¯å¦æ¯å¶å­èç¹\r\n   * @todoï¼æå¡å¨ç«¯å¯¹isDetailçç®åæ²¡æä¸åç«¯åæ­¥ï¼isDetailä¸åç¡®ã\r\n   */\r\n  private isLeaf(nodeData: any): boolean {\r\n    const hierarchyInfo = this.getHierarchyInfo(nodeData);// nodeData[this.hierarchyInfoKey];\r\n    const isDetail = hierarchyInfo['isDetail'];\r\n    return isDetail;\r\n  }\r\n\r\n  /**\r\n   * å¤æ­èç¹æ¯å¦æ¯æ°å¢\r\n   * @todoï¼ä¸åºè¯¥è¿æ ·å¤æ­ï¼å¾ä¼åã\r\n   * @summary\r\n   * 1ãéç©ºæ ï¼ç©ºæ è§ä¸ºåæ¬¡å è½½æ°æ®ï¼ï¼\r\n   * 2ãæ¾ä¸å°oldNodeã\r\n   */\r\n  private isNewNode(nodeData: any): boolean {\r\n    if (this.allOldNodesMap.size === 0) {\r\n      return false;\r\n    }\r\n    const oldTreeNode = this.getOldNode(nodeData);\r\n    return oldTreeNode ? false : true;\r\n  }\r\n\r\n  /**\r\n   * å±å¼ç¶èç¹\r\n   */\r\n  private expandParentNode(nodeData: any): void {\r\n    const parentTreeNode = this.getParentNode(nodeData);\r\n    if (!parentTreeNode) {\r\n      return;\r\n    }\r\n    parentTreeNode.leaf = false;\r\n    parentTreeNode.expanded = true;\r\n  }\r\n\r\n  /**\r\n   * æ¥æ¾ç¶èç¹\r\n   */\r\n  private getParentNode(nodeData: any): TreeNode {\r\n    const hierarchyInfo = this.getHierarchyInfo(nodeData);//nodeData[this.hierarchyInfoKey];\r\n    const layer = hierarchyInfo['layer'];\r\n    const path = hierarchyInfo['path'];\r\n\r\n    const allNodes = Array.from(this.allNodesMap.values());\r\n    const parentNode = allNodes.find((currentNode: TreeNode) => {\r\n      const currentLayer = this.getValue(currentNode.data, this.hierarchyInfoKey)['layer'];//currentNode.data[this.hierarchyInfoKey]['layer'];\r\n      const currentPath = this.getValue(currentNode.data, this.hierarchyInfoKey)['path'];//  currentNode.data[this.hierarchyInfoKey]['path'];\r\n      if ((layer === currentLayer + 1) && path.startsWith(currentPath) === true) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    return parentNode;\r\n  }\r\n\r\n  /**\r\n   * è·åèçæ èç¹\r\n   */\r\n  private getOldNode(nodeData: any): TreeNode {\r\n    const id = nodeData[this.primaryKey];\r\n    return this.allOldNodesMap.get(id);\r\n  }\r\n\r\n  /**\r\n   * æå¹³TreeNodesï¼å¹¶æ¾å¥ä¸ä¸ªMapä¸­\r\n   */\r\n  private buildNodesDataMap(treeNodes: TreeNode[]): void {\r\n    treeNodes.forEach((treeNode: TreeNode) => {\r\n      this.allOldNodesMap.set(treeNode.data[this.primaryKey], treeNode);\r\n      if (treeNode.children) {\r\n        this.buildNodesDataMap(treeNode.children);\r\n      }\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n}\r\n\r\nexport { PathTreeNodeBuilder };\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-31 09:48:10 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-24 17:00:58\r\n */\r\n\r\nimport { FrameContext } from '@farris/devkit';\r\nimport { TreeNode, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { ParentHierarchyInfo } from './types';\r\n// tslint:disable: no-string-literal max-line-length\r\n/**\r\n * æ èç¹æé å¨\r\n * @summary\r\n * å°BindingDataä¸­çæ°æ®éåè½¬æ¢æTreeTableèç¹éå\r\n */\r\nclass ParentTreeNodeBuilder {\r\n  private frameContext: FrameContext;\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(allNodesData: any[], oldTreeNodes: TreeNode[], primaryKey: string, hierarchyInfoKey: string, context?: any) {\r\n    this.primaryKey = primaryKey;\r\n    this.hierarchyInfoKey = hierarchyInfoKey;\r\n    this.allNodes = [];\r\n    this.allNodesData = allNodesData;\r\n    this.context = context || {};\r\n    this.nodesWaitExpand = [];\r\n    this.nodesShouldExpand = context && context.nodesShouldExpand || [];\r\n    this.frameContext = context && context.frameContext || null;\r\n    this.addTreeLoadCompleteListener(this.onTreeLoadComplete.bind(this));\r\n\r\n    this.allNodesMap = new Map<string, TreeNode>();\r\n    this.allOldNodesMap = new Map<string, TreeNode>();\r\n    this.buildNodesDataMap(oldTreeNodes);\r\n  }\r\n  /**\r\n   * å±å¼è³å±çº§\r\n   * @description -1ä¸ºä¸å±å¼\r\n   */\r\n  private get expandLevel() {\r\n    return this.context && this.context.hasOwnProperty('expandLevel') ? this.context['expandLevel'] : -1;\r\n  }\r\n  private get component(): TreeTableComponent {\r\n    return this.context && this.context['component'];\r\n  }\r\n  private get addTreeLoadCompleteListener() {\r\n    return this.context && this.context['addTreeLoadCompleteListener'] || function (args: any) { };\r\n  }\r\n  /**\r\n   * éè¦å±å¼çèç¹\r\n   */\r\n  private nodesShouldExpand: string[];\r\n\r\n  /**\r\n   * ç­å¾å±å¼çèç¹\r\n   * @description èç¹ç»æ\r\n   * ```\r\n   * {id:'xxx',expanded:false}\r\n   * ```\r\n   */\r\n  private nodesWaitExpand: any[] = [];\r\n\r\n  /**\r\n   * ä¸»é®å­æ®µå\r\n   */\r\n  private primaryKey: string;\r\n\r\n  /**\r\n   * åçº§ç å­æ®µå\r\n   */\r\n  private hierarchyInfoKey: string;\r\n\r\n  /**\r\n   * èç¹çæ°æ®éå\r\n   */\r\n  private allNodesData: any[];\r\n\r\n  /**\r\n   * èç¹éå\r\n   */\r\n  private allNodes: TreeNode[];\r\n\r\n  /**\r\n   * ä¸ä¸æ¬¡ç»å®çæ èç¹éåMap\r\n   */\r\n  private allNodesMap: Map<string, TreeNode>;\r\n\r\n  /**\r\n   * ä¸ä¸æ¬¡ç»å®çæ èç¹éåMap\r\n   */\r\n  private allOldNodesMap: Map<string, TreeNode>;\r\n\r\n  /**\r\n   * ä¸ä¸æ\r\n   */\r\n  private context: any;\r\n\r\n  public updateTreeNode(allNodesData: any, data: any) {\r\n    this.allNodesData = allNodesData;\r\n    this.buildNodesDataMap(data);\r\n  }\r\n  public build(): TreeNode[] {\r\n    let tree: TreeNode[] = [];\r\n    const childrenOf = {};\r\n    const parents = {};\r\n    this.allNodesData.forEach(item => {\r\n      const id = item.id;\r\n      const parentId = this.getHierarchyInfo(item).parentElement;\r\n      // item.parentId = parentId;\r\n      // å±å¼æ°å¢èç¹çç¶èç¹\r\n      const isNewNode = this.isNewNode(item);\r\n      if (isNewNode === true) {\r\n        this.expandParentNode(item);\r\n      }\r\n      // æé æ èç¹\r\n      const node = this.buildNode(item);\r\n      childrenOf[id] = childrenOf[id] || [];\r\n      node.children = childrenOf[id];\r\n\r\n      parents[parentId] = parents[parentId] || [];\r\n      parents[parentId].push(node);\r\n      this.allNodesMap.set(item[this.primaryKey], node);\r\n      if (parentId) {\r\n        childrenOf[parentId] = childrenOf[parentId] || [];\r\n        childrenOf[parentId].push(node);\r\n      } else {\r\n        tree.push(node);\r\n      }\r\n    });\r\n    // ææèç¹é½æ¯parentIdï¼æ²¡æè¿åæ ¹èç¹\r\n    if ((!tree || tree.length < 1) && this.allNodesData && this.allNodesData.length > 0) {\r\n      const parentIds = Object.keys(parents);\r\n      parentIds.forEach(parentId => {\r\n        if (!this.allNodesData.find(item => item.id === parentId)) {\r\n          tree = tree.concat(parents[parentId]);\r\n        }\r\n      });\r\n    }\r\n    return tree;\r\n  }\r\n  /**\r\n   * æé æ èç¹\r\n   */\r\n  public build1(): TreeNode[] {\r\n    let minLayer;\r\n    // è·åæé¡¶çº§èç¹çlayer\r\n    this.allNodesData.forEach(node => {\r\n      const hierarchyInfo = this.getHierarchyInfo(node);\r\n      if (hierarchyInfo) {\r\n        const layer = hierarchyInfo['layer'];\r\n        if (!isNaN(layer)) {\r\n          if (minLayer === undefined) {\r\n            minLayer = layer;\r\n          } else if (layer < minLayer) {\r\n            minLayer = layer;\r\n          }\r\n        }\r\n      }\r\n    });\r\n    const topLayer = minLayer - 1;\r\n    this.buildNodes('', topLayer, this.allNodesData, this.allNodes);\r\n    return this.allNodes;\r\n  }\r\n\r\n  /**\r\n   * æé æ èç¹éå\r\n   */\r\n  private buildNodes(fParentElement: string, fLayer: number, allNodesData: any[], treeNodes: TreeNode[]): void {\r\n    const childNodesData = this.getChildNodesData(fParentElement, fLayer);\r\n    childNodesData.forEach((nodeData: any) => {\r\n\r\n      // å±å¼æ°å¢èç¹çç¶èç¹\r\n      const isNewNode = this.isNewNode(nodeData);\r\n      if (isNewNode === true) {\r\n        this.expandParentNode(nodeData);\r\n      }\r\n\r\n      // æé æ èç¹\r\n      const node = this.buildNode(nodeData);\r\n      treeNodes.push(node);\r\n      this.allNodesMap.set(nodeData[this.primaryKey], node);\r\n\r\n      // éå½éåä¸çº§èç¹\r\n      const hierarchyInfo = this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];\r\n      const currentLayer = hierarchyInfo['layer'];\r\n      const currentId = nodeData[this.primaryKey];\r\n      this.buildNodes(currentId, currentLayer, allNodesData, node.children as TreeNode[]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * åå»ºæ èç¹\r\n   */\r\n  private buildNode(nodeData: any): TreeNode {\r\n    const isLeaf = this.isLeaf(nodeData);\r\n    // è·åèç¹çå±å¼ç¶æ\r\n    const shouldExpand = this.shouldExpand(nodeData);\r\n    // èç¹è½ç¶åºè¯¥å±å¼ï¼ä½å¯è½æ¯å ä¸ºä¹åå°±æ¯å±å¼ç¶æï¼æä»¥åºè¯¥æ£æ¥èç¹ä¹åçç¶æ\r\n    const originExpandStatus = this.isExpanded(nodeData);\r\n    // å¦æåºè¯¥å±å¼è¯¥èç¹ï¼ä½æ¯è¯¥èç¹ä¹åæç¶æï¼é£ä¹è¯¥èç¹ä¸åºè¯¥åç±ç¨åºå±å¼ã\r\n    if (!originExpandStatus && shouldExpand) {\r\n      this.expandNode(nodeData);\r\n    }\r\n    const paginationInfo = this.buildPaginationInfo(nodeData);\r\n    const treeNode: TreeNode = {\r\n      data: Object.assign({}, nodeData),\r\n      children: [],\r\n      expanded: shouldExpand,\r\n      leaf: isLeaf\r\n    };\r\n    if (paginationInfo) {\r\n      treeNode.pagination = paginationInfo;\r\n    }\r\n    return treeNode;\r\n  }\r\n  /**\r\n   * æé åé¡µä¿¡æ¯\r\n   * @param nodeData nodeData\r\n   * @returns \r\n   */\r\n  private buildPaginationInfo(nodeData: any): { pageIndex: number, pageSize: number, total: number } | null {\r\n    let result = null;\r\n    if (this.frameContext) {\r\n      const id = this.getPrimary(nodeData);\r\n      // è·ååé¡µä¿¡æ¯\r\n      const key = `_NODE_${id}_PAGINATION_INFO_`;\r\n      const pagination = this.frameContext.params.get(key) || null;\r\n      if (pagination && pagination.pageCount > 1) {\r\n        result = {\r\n          pageIndex: pagination.pageIndex,\r\n          pageSize: pagination.pageSize,\r\n          total: pagination.totalCount\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * è®¡ç®èç¹æ¯å¦è¦å±å¼\r\n   * @param nodeData nodeData\r\n   */\r\n  private shouldExpand(nodeData: any) {\r\n    const [isLeaf, layer] = [this.isLeaf(nodeData), this.getNodeLayer(nodeData)];\r\n    // æ°¸è¿ä¸å±å¼å¶å­èç¹\r\n    if (isLeaf) {\r\n      return false;\r\n    }\r\n    let expanded = this.isExpanded(nodeData);\r\n    if (!expanded) {\r\n      const id = this.getPrimary(nodeData);\r\n      if (this.nodesWaitExpand.findIndex(node => node && node.id === id) > -1) {\r\n        return false;\r\n      }\r\n      if (this.nodesShouldExpand.findIndex(nodeId => nodeId === id) > -1) {\r\n        return true;\r\n      }\r\n      if (this.expandLevel === -1) {\r\n        // -1 ä¸ºä¸å±å¼\r\n        expanded = false;\r\n      } else if (this.expandLevel === 0) {\r\n        // 0 ä¸ºå¨é¨å±å¼\r\n        expanded = true;\r\n      } else {\r\n        // æ²¡æå¯ç¨åå±å è½½ï¼éè¿å±å¼å±çº§ç¡®å®æ¯å¦å±å¼è¯¥èç¹\r\n        expanded = layer <= this.expandLevel;\r\n        // å¦æèç¹åæ¬å­å¨ä¸èç¹æ²¡æå±å¼åä¸å±å¼\r\n        const oldTreeNode = this.getOldNode(nodeData);\r\n        if (oldTreeNode && !oldTreeNode.expanded) {\r\n          expanded = false;\r\n        }\r\n      }\r\n    }\r\n    return expanded;\r\n  }\r\n  /**\r\n   * å±å¼æ èç¹\r\n   * @description å®å¨å è½½æ ä½¿ç¨å±å¼å±æ§å¨buildNodeæ¶å·²ç»å±å¼ï¼æ­¤å½æ°çä¸»è¦ç¨äºå±å¼åçº§å è½½æ \r\n   * @param nodeData nodeData\r\n   */\r\n  private expandNode(nodeData: any) {\r\n    const [element, layer] = [nodeData[this.primaryKey], this.getNodeLayer(nodeData)];\r\n    const childs = this.getChildNodesData(element, layer);\r\n\r\n    // å½åèç¹ä¸æ¯å¶å­èç¹ï¼ä½å¨èç¹æ°æ®ä¸­åæ¾ä¸å°è¯¥èç¹çå­èç¹ï¼åè®¤ä¸ºæ å¯ç¨äºåå±å è½½\r\n    if (!childs || childs.length < 1) {\r\n      // åå±å è½½æ éè¦éè¿è§¦åèç¹å±å¼äºä»¶æå è½½ä¸å±,ç®åæ ä¸è¿ä¸å­å¨è¯¥èç¹ï¼æ æ³ç´æ¥å±å¼ï¼éè¦ç­æ å è½½å®ä¹ååå±å¼\r\n      const id = this.getPrimary(nodeData);\r\n      if (this.nodesWaitExpand.findIndex(node => node && node.id === id) < 0) {\r\n        this.nodesWaitExpand.push({ id, expanded: false });\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * æ å è½½å®æäºä»¶\r\n   */\r\n  private onTreeLoadComplete() {\r\n    const index = this.nodesWaitExpand.findIndex(node => !node.expanded);\r\n    const nodeData = this.nodesWaitExpand[index] || {};\r\n    const { id } = nodeData;\r\n    if (id) {\r\n      const rowNode = this.component.findRowNode(id);\r\n      if (rowNode) {\r\n        nodeData.expanded = true;\r\n        // if (nodeData && nodeData.node && !nodeData.node.expanded) {\r\n        //   return;\r\n        // }\r\n        this.component.expandNode(id);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * è·åä¸»é®\r\n   * @param nodeData nodeData\r\n   */\r\n  private getPrimary(nodeData: any) {\r\n    return nodeData[this.primaryKey];\r\n  }\r\n  // #region å·¥å·æ¹æ³ï¼å¾åç¬å°è£\r\n\r\n  /**\r\n   * è·åå­çº§èç¹çæ°æ®éå\r\n   */\r\n  private getChildNodesData(fParentElement: string, fLayer: number): any[] {\r\n    const childNodesData = [];\r\n    this.allNodesData.forEach((nodeData: any) => {\r\n\r\n      // @todoï¼å¾å é¤ï¼å¼å®¹æ²¡æhierarchyInfoçæ°æ® \r\n      const hierarchyInfo = this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];\r\n      if (!hierarchyInfo) {\r\n        return;\r\n      }\r\n\r\n      // å¹éèç¹\r\n      const currentLayer = hierarchyInfo['layer'];\r\n      const currentParentElement = hierarchyInfo['parentElement'];\r\n      if ((currentLayer === fLayer + 1) && (currentParentElement === fParentElement || (!currentParentElement && fParentElement === ''))) {\r\n        childNodesData.push(nodeData);\r\n      }\r\n    });\r\n    return childNodesData;\r\n  }\r\n  private getHierarchyInfo(nodeData: any): ParentHierarchyInfo {\r\n    return this.getValue(nodeData, this.hierarchyInfoKey);//nodeData[this.hierarchyInfoKey];\r\n  }\r\n  private getValue(target: any, path: string) {\r\n    if (path.indexOf('/') === -1) {\r\n      return target[path];\r\n    }\r\n    const paths: any = path.split('/').filter(p => p);\r\n    return paths.reduce((result, path) => {\r\n      return result && result[path];\r\n    }, target);\r\n  }\r\n  /**\r\n   * è·ååçº§ä¿¡æ¯ä¸­çå±çº§\r\n   * @param nodeData nodeData\r\n   */\r\n  private getNodeLayer(nodeData: any) {\r\n    const hierarchyInfo = this.getHierarchyInfo(nodeData);\r\n    return hierarchyInfo['layer'];\r\n  }\r\n  /**\r\n   * è·ååçº§ä¿¡æ¯ä¸­çç¶èç¹\r\n   * @param nodeData nodeData\r\n   */\r\n  private getNodeParentElement(nodeData: any) {\r\n    const hierarchyInfo = this.getHierarchyInfo(nodeData);\r\n    return hierarchyInfo['parentElement'];\r\n  }\r\n  /**\r\n   * è·åå±å¼ç¶æ\r\n   */\r\n  private isExpanded(newData: any): boolean {\r\n    const oldTreeNode = this.getOldNode(newData);\r\n    return oldTreeNode ? oldTreeNode.expanded : undefined;\r\n  }\r\n\r\n  /**\r\n   * æ¯å¦æ¯å¶å­èç¹\r\n   * @todoï¼åºè¯¥ç¨æ°æ®æ¬èº«çisDetailæ¥ä¿è¯ï¼ä½ç®åä¸åç¡®ï¼å¼ºå¶åç«¯è®¡ç®\r\n   */\r\n  private isLeaf(nodeData: any): boolean {\r\n    const hierarchyInfo = this.getHierarchyInfo(nodeData);//nodeData[this.hierarchyInfoKey];\r\n    const isDetail = hierarchyInfo['isDetail'];\r\n    return isDetail;\r\n  }\r\n\r\n  /**\r\n   * å¤æ­èç¹æ¯å¦æ¯æ°å¢\r\n   * @todoï¼ä¸åºè¯¥è¿æ ·å¤æ­ï¼å¾ä¼åã\r\n   * @summary\r\n   * 1ãéç©ºæ ï¼ç©ºæ è§ä¸ºåæ¬¡å è½½æ°æ®ï¼ï¼\r\n   * 2ãæ¾ä¸å°oldNodeã\r\n   */\r\n  private isNewNode(nodeData: any): boolean {\r\n    if (this.allOldNodesMap.size === 0) {\r\n      return false;\r\n    }\r\n    const oldTreeNode = this.getOldNode(nodeData);\r\n    return oldTreeNode ? false : true;\r\n  }\r\n\r\n  /**\r\n   * å±å¼ç¶èç¹\r\n   */\r\n  private expandParentNode(nodeData: any): void {\r\n    const parentTreeNode = this.getParentNode(nodeData);\r\n    if (!parentTreeNode) {\r\n      return;\r\n    }\r\n    parentTreeNode.leaf = false;\r\n    parentTreeNode.expanded = true;\r\n  }\r\n\r\n  /**\r\n   * æ¥æ¾ç¶èç¹\r\n   */\r\n  private getParentNode(nodeData: any): TreeNode {\r\n    const hierarchyInfo = this.getHierarchyInfo(nodeData);//nodeData[this.hierarchyInfoKey];\r\n    const layer = hierarchyInfo['layer'];\r\n    const parentElement = hierarchyInfo['parentElement'];\r\n\r\n    const allNodes = Array.from(this.allNodesMap.values());\r\n    const parentNode = allNodes.find((node: TreeNode) => {\r\n      const currentLayer = this.getValue(node.data, this.hierarchyInfoKey)['layer']; //node.data[this.hierarchyInfoKey]['layer'];\r\n      const currentId = node.data[this.primaryKey];\r\n      return currentId === parentElement && layer === (currentLayer + 1);\r\n    });\r\n\r\n    return parentNode;\r\n  }\r\n\r\n  /**\r\n   * è·åèçæ èç¹\r\n   */\r\n  private getOldNode(nodeData: any): TreeNode {\r\n    const id = nodeData[this.primaryKey];\r\n    return this.allOldNodesMap.get(id);\r\n  }\r\n\r\n  /**\r\n   * æå¹³TreeNodesï¼å¹¶æ¾å¥ä¸ä¸ªMapä¸­\r\n   */\r\n  private buildNodesDataMap(treeNodes: TreeNode[]): void {\r\n    treeNodes.forEach((treeNode: TreeNode) => {\r\n      this.allOldNodesMap.set(treeNode.data[this.primaryKey], treeNode);\r\n      if (treeNode.children) {\r\n        this.buildNodesDataMap(treeNode.children);\r\n      }\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n}\r\n\r\nexport { ParentTreeNodeBuilder };\r\n\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-30 18:57:34 \r\n * @Last Modified by:   aalizzwell \r\n * @Last Modified time: 2019-05-30 18:57:34 \r\n */\r\nimport { PathTreeNodeBuilder } from './path_tree_node_builder';\r\nimport { ParentTreeNodeBuilder } from './parent_tree_node_builder';\r\nimport { Type } from '@angular/core';\r\n\r\nexport class TreeNodeBuilderFactory {\r\n    static getBuilder(hierarchyInfo: { [propName: string]: any }): Type<PathTreeNodeBuilder | ParentTreeNodeBuilder> {\r\n        let builder: Type<PathTreeNodeBuilder | ParentTreeNodeBuilder> = PathTreeNodeBuilder;\r\n        if (hierarchyInfo.hasOwnProperty(\"path\")) {\r\n            builder = PathTreeNodeBuilder;\r\n        } else if (hierarchyInfo.hasOwnProperty(\"parentElement\")) {\r\n            builder = ParentTreeNodeBuilder;\r\n        }\r\n\r\n        return builder;\r\n    }\r\n}","/*\r\n * @Author: aalizzwell \r\n * @Date: 2020-02-27 11:33:41 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2020-02-27 11:34:16\r\n */\r\n// tslint:disable: no-string-literal\r\n\r\nimport { Directive, OnInit, OnChanges, SimpleChanges, Input, HostListener, Type, Output, EventEmitter } from '@angular/core';\r\nimport { BindingData, BindingList, FrameContext, Change, ChangeType } from '@farris/devkit';\r\nimport { TreeTableComponent, TreeNode } from '@farris/ui-treetable';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { FarrisTreetableFormatService } from '../format/index';\r\nimport { TreeNodeBuilderFactory } from './tree_table_node_builder/tree_node_builder_factory';\r\n\r\n/**\r\n * æ è¡¨æ ¼ç»å®æä»¤\r\n */\r\n@Directive({\r\n  selector: '[farrisTreeTableBinding]'\r\n})\r\nclass FarrisTreeTableBindingDirective implements OnInit, OnChanges {\r\n  /**\r\n   * æ å­å¨ç©ºé´\r\n   */\r\n  private storage: any;\r\n  private renderSubject: Subject<any> = new Subject<any>();\r\n  private builder: Type<any>;\r\n  private treeNodesBuilder: any;\r\n  /**\r\n   * åçº§ç ä¿¡æ¯çkey\r\n   */\r\n  // tslint:disable-next-line: no-input-rename\r\n  @Input('farrisHierarchyInfoKey')\r\n  public hierarchyInfoKey: string;\r\n\r\n  /* è¡æ ·å¼ */\r\n  @Input()\r\n  rowClassName: (context: any) => any;\r\n\r\n  /* ååååæ ¼æ ·å¼ */\r\n  @Input()\r\n  cellClassName: (data: any, field: any) => any;\r\n  /**\r\n   * å¯ç¨èç¹åé¡µ\r\n   */\r\n  // @Input('enableNodePagination')\r\n  // public enableNodePagination: boolean;\r\n  /**\r\n   * èç¹åé¡µå¤§å°\r\n   */\r\n  @Input('nodePageSize')\r\n  public nodePageSize: number = 100;\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  /**\r\n   * ç»å®æ°æ®åè¡¨\r\n   */\r\n  private get bindingList(): BindingList {\r\n\r\n    // @todoï¼åªæ¯æä¸»è¡¨ï¼æ²¡æå¤çbindingPath\r\n    return this.bindingData.list;\r\n  }\r\n\r\n\r\n  /* è®¾ç½®è¡æ ·å¼ */\r\n  @Output()\r\n  rowClass: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  /* è®¾ç½®åæ ·å¼ */\r\n  @Output()\r\n  cellClass: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  private _PROP: any = null;\r\n  private listeners: any[];\r\n  private get prop() {\r\n    return this._PROP;\r\n  }\r\n  private set prop(value) {\r\n    this._PROP = value;\r\n  }\r\n  /**\r\n   * è·åå½åvm\r\n   */\r\n  private get viewModel() {\r\n    return this.frameContext.viewModel;\r\n  }\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    private treeTable: TreeTableComponent,\r\n    private treetableFormatSer: FarrisTreetableFormatService,\r\n    private frameContext: FrameContext\r\n  ) {\r\n    this.listeners = [];\r\n    this.storage = [];\r\n    this.viewModel.uiState.setPropertyValue('ids', this.treeTable.checkValues);\r\n    this.renderSubject.pipe(\r\n      debounceTime(500)\r\n    ).subscribe(() => {\r\n      this.bindData();\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * æä»¤åå§å\r\n   */\r\n  ngOnInit() {\r\n    // å°åçº§ç ä¿¡æ¯ä¿å­å°root-componentï¼èéæ´ä¸ªè¡¨åçapp-context\r\n    const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n    virtualRootFrameContext.setParam('hierarchyInfoKey', this.hierarchyInfoKey);\r\n    this.bindData();\r\n    this.bindingData.changes.subscribe((change: Change) => {\r\n      if (change && (change.type === ChangeType.ValueChanged || change.type === ChangeType.PaginationInfoChange)) {\r\n        this.renderSubject.next(change);\r\n      } else {\r\n        this.bindData();\r\n      }\r\n      // è®¾ç½®å½åè¡\r\n      const currentId = this.bindingList.currentId;\r\n      if (!this.frameContext.bindingData.rowSelectedEventSuspend && currentId) {\r\n        this.setSelectedIdToTree(this.bindingList.currentId);\r\n      }\r\n      this.updateCheckedRows(change);\r\n    });\r\n\r\n    // è®¾ç½® æ è¡¨ æ ¼å¼å\r\n    this.treetableFormatSer.setFormat(this.treeTable);\r\n\r\n    /* è¡æ ·å¼ */\r\n    this.rowClass.emit(this.treeTable);\r\n\r\n    /* åæ ·å¼  ååæ ¼æ ·å¼ */\r\n    this.cellClass.emit(this.treeTable);\r\n    this.setComponentRef();\r\n    this.setNodePaginationInfo();\r\n    this.registerEvent();\r\n  }\r\n\r\n  /**\r\n   * æä»¤è¾å¥åæ´\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n  }\r\n  private registerEvent() {\r\n    this.treeTable.columnSorted.subscribe((event: { sortName: string, sortOrder: string }) => {\r\n      const { sortName = null, sortOrder = null } = event;\r\n      const remoteSort = this.treeTable.remoteSort;\r\n      if (remoteSort === false) {\r\n        if (sortName && sortOrder) {\r\n          this.bindingList.sortBy(sortName, sortOrder);\r\n        }\r\n      }\r\n      this.bindData();\r\n    });\r\n  }\r\n  /**\r\n   * æ¶éæ ç»ä»¶å®ä¾\r\n   */\r\n  private setComponentRef() {\r\n    const appContext = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.getFormAppContext();\r\n    const frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId;\r\n    const id = this.treeTable && this.treeTable.el.nativeElement.id || null;\r\n    // å¦æframeIdä¸å­å¨ætreetableæ²¡æidå±æ§ï¼è¯´æä¸ç¬¦åä½¿ç¨åºæ¯\r\n    if (!frameId || !id) {\r\n      return;\r\n    }\r\n    const map = appContext && appContext.componentRefs && appContext.componentRefs.get(frameId) || new Map<string, any>();\r\n    appContext && appContext.componentRefs && appContext.componentRefs.set(frameId, map.set(id, this.treeTable));\r\n  }\r\n\r\n  private setNodePaginationInfo() {\r\n    if (this.frameContext) {\r\n      const enableNodePagination = this.treeTable.paginationForChildren || false;//this.enableNodePagination || false;\r\n      this.frameContext.params.set('enableNodePagination', enableNodePagination);\r\n      const nodePageSize = this.nodePageSize || 0;\r\n      this.frameContext.params.set('nodePageSize', nodePageSize);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private bindData() {\r\n    const oldTreeNodes = this.treeTable.data;\r\n    const treeNodesData = this.bindingList.toJSON({ ignoreMultiLangInput: true });\r\n    // if (!this.shouldComponentUpdate(treeNodesData)) {\r\n    //   return;\r\n    // }\r\n    this.prop = treeNodesData;\r\n\r\n    let treeNodes: TreeNode[] = [];\r\n    if (!!treeNodesData && treeNodesData.length > 0) {\r\n      const hierarchyInfo = treeNodesData[0][this.hierarchyInfoKey];\r\n      let builder: Type<any> = this.builder;\r\n      if (!builder) {\r\n        this.builder = TreeNodeBuilderFactory.getBuilder(hierarchyInfo);\r\n        builder = this.builder;\r\n      }\r\n      // æå¡å¨è¿åçåçº§èç¹ä¿¡æ¯å¹éä¸å°ç°æå·¥åéé¢çä»»ä½ä¸ç§æåµãç¡®è®¤æ°å çbuilderå·²ç»å¨å·¥åä¸­æ³¨å\r\n      if (builder == null) {\r\n        throw new Error('TreeTable builder is null!');\r\n      }\r\n      let expandLevel = -1;\r\n      const treeExpandLevel = this.treeTable['expandLevel'];\r\n      if (typeof treeExpandLevel !== 'undefined') {\r\n        expandLevel = treeExpandLevel;\r\n      }\r\n      const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n      const nodesShouldExpand = (virtualRootFrameContext.params.get('_DEVKIT_expandRowIds') || '').split(',') || [];\r\n      const context = {\r\n        expandLevel,\r\n        addTreeLoadCompleteListener: this.addTreeLoadCompleteListener.bind(this),\r\n        component: this.treeTable,\r\n        storage: this.storage,\r\n        nodesShouldExpand: nodesShouldExpand,\r\n        frameContext: this.frameContext,\r\n      };\r\n      //if (!this.treeNodesBuilder) {\r\n      this.treeNodesBuilder = new builder(\r\n        treeNodesData, oldTreeNodes,\r\n        this.bindingList.primaryKey, this.hierarchyInfoKey, context\r\n      );\r\n      //}\r\n      // this.treeNodesBuilder.updateTreeNode(treeNodesData, oldTreeNodes);\r\n      treeNodes = this.treeNodesBuilder.build();\r\n    }\r\n    this.treeTable.data = treeNodes;\r\n    // è®¾ç½®åé¡µä¿¡æ¯\r\n    this.updatePageInfo(this.treeTable);\r\n    this.onTreeLoadComplete();\r\n  }\r\n  private onTreeLoadComplete() {\r\n    if (this.listeners && this.listeners.length > 0) {\r\n      this.listeners.forEach(listener => {\r\n        listener();\r\n      });\r\n    }\r\n  }\r\n  private addTreeLoadCompleteListener(listener: any) {\r\n    this.listeners.push(listener);\r\n  }\r\n  private shouldComponentUpdate(newProp: any) {\r\n    if (JSON.stringify(this.prop) === JSON.stringify(newProp)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  /**\r\n   * ä»æ ç»ä»¶ä¸è·åéä¸­è¡çid\r\n   */\r\n  private getSelectedIdFromTree(): string {\r\n    const selectedRow = this.treeTable.selectedRow;\r\n    return selectedRow ? selectedRow.data['id'] : null;\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®TreeTableçå½åè¡\r\n   */\r\n  private setSelectedIdToTree(selectedId: string): void {\r\n    if (!selectedId) {\r\n      return;\r\n    }\r\n    // å¦ææ°çcurrentIdåæ ä¸çselectedIdä¸ä¸è´ï¼éç½®æ çå½åè¡\r\n    const oldSelectedId = this.getSelectedIdFromTree();\r\n    const nodePageChanged = this.frameContext.params.get('_NODE_PAGE_CHANGED_') || false;\r\n    if (!oldSelectedId && nodePageChanged) {\r\n      this.frameContext.params.delete('_NODE_PAGE_CHANGED_');\r\n      return;\r\n    }\r\n    if (oldSelectedId !== selectedId) {\r\n      this.treeTable.clearSelections();\r\n      this.treeTable.selectNode(selectedId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®BindingListçCurrentId\r\n   */\r\n  private setCurrentIdToBindingList(selectedId: string): void {\r\n    const oldCurrentId = this.bindingData.list.currentId;\r\n    // åéæ¨¡å¼ä¸å°å½åè¡è®¾ç½®å°ids\r\n    if (!this.treeTable.multiSelect) {\r\n      this.setChecks(selectedId);\r\n      this.setCheckedRows([selectedId]);\r\n    }\r\n    if (oldCurrentId === selectedId) {\r\n      return;\r\n    }\r\n    this.bindingData.list.setCurrentId(selectedId, true);\r\n  }\r\n  private updateCheckedRows(changes: Change) {\r\n    if (changes.type === ChangeType.Load) {\r\n      this.setCheckedRows();\r\n    } else if (changes.type === ChangeType.ValueChanged || changes.type === ChangeType.Remove) {\r\n      const ids = this.getChecks();\r\n      if (changes.id && ids.includes(changes.id)) {\r\n        this.setCheckedRows();\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * æ´æ°å¾éè¡æ°æ®\r\n   */\r\n  protected setCheckedRows(ids?: string[]) {\r\n    if (typeof ids === 'undefined') {\r\n      ids = this.viewModel.uiState['ids'] || [];\r\n    }\r\n    if (!Array.isArray(ids)) {\r\n      return;\r\n    }\r\n    const list = this.bindingList.toJSON();\r\n    const rows: Map<string, any> = this.viewModel.uiState['rows'] || new Map<string, any>();\r\n\r\n    const result = new Map<string, any>();\r\n    ids.forEach((id: any) => {\r\n      const item = list.find(item => item[this.bindingList.primaryKey] === id);\r\n      const otherPageItem = rows.get(id);\r\n      if (item) {\r\n        result.set(id, item);\r\n      } else if (otherPageItem) {\r\n        result.set(id, otherPageItem);\r\n      }\r\n    });\r\n    this.viewModel.uiState.setPropertyValue('rows', result);\r\n  }\r\n  /**\r\n   * è®¾ç½®idsåé\r\n   * @param idOrIds id or ids\r\n   */\r\n  protected setChecks(idOrIds: string | string[]) {\r\n    if (typeof idOrIds === 'string') {\r\n      idOrIds = idOrIds.split(',').filter(p => p);\r\n    }\r\n    this.viewModel.uiState.setPropertyValue('ids', idOrIds);\r\n  }\r\n  /**\r\n   * è·åå¾éè¡idæ°ç»\r\n   * @returns \r\n   */\r\n  protected getChecks(): string[] {\r\n    return this.viewModel.uiState['ids'] || [];\r\n  }\r\n  /**\r\n   * è·ååé¡µä¿¡æ¯\r\n   */\r\n  private getPagingInfo() {\r\n    const bindingPath = this.viewModel.bindingPath;\r\n    const bindingData = this.viewModel.bindingData;\r\n    let pagingInfo = bindingData.pagingInfo;\r\n    if (bindingPath === '/') {\r\n      return pagingInfo;\r\n    } else {\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0).map(item => {\r\n        return item.substring(0, item.length - 1);\r\n      });\r\n      bindingPaths.forEach(path => {\r\n        pagingInfo = pagingInfo && pagingInfo[path];\r\n      });\r\n      return pagingInfo;\r\n    }\r\n  }\r\n  private updatePageInfo(treeTable: TreeTableComponent) {\r\n    const { pageIndex, pageSize, total } = this.getPagingInfo();\r\n    if (pageSize === 0) {\r\n      treeTable.pagination = false;\r\n      return;\r\n    }\r\n    treeTable.pagination = true;\r\n    treeTable.updatePageInfo({ pageIndex, pageSize, total });\r\n  }\r\n  //#region ç»ä»¶äºä»¶\r\n  /**\r\n   * è¡åæ¢\r\n   */\r\n  @HostListener('nodeSelected', ['$event'])\r\n  public selectionChangeHandler(event: any) {\r\n    if (event && event.node && event.node.hasOwnProperty('data')) {\r\n      const idField = this.treeTable.idField;\r\n      const id = event.node.data[idField];\r\n      this.setCurrentIdToBindingList(id);\r\n    }\r\n  }\r\n  /**\r\n   * å¾éèç¹åçåå\r\n   * @param event event\r\n   */\r\n  @HostListener('checkValuesChange', ['$event'])\r\n  public checkValuesChange(event: any) {\r\n    // this.viewModel.uiState.setPropertyValue('ids', this.treeTable.checkValues);\r\n    this.setChecks(this.treeTable.checkValues);\r\n    this.setCheckedRows();\r\n  }\r\n  /**\r\n   * å°è¢«å±å¼çèç¹è®¾ç½®ä¸ºå½åè¡\r\n   */\r\n  @HostListener('expand', ['$event'])\r\n  public expandHandler(event: any) {\r\n    const selectedId = event.data['id'];\r\n    const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n    // å±å¼æ¶ä¸åéä¸­\r\n    // this.setSelectedIdToTree(selectedId);\r\n    const expandNodes = virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];\r\n    expandNodes.push(selectedId);\r\n    virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);\r\n  }\r\n  @HostListener('pageChanged', ['$event'])\r\n  public onPageChanged(event: any) {\r\n    let { pageSize = 20, pageIndex = 1 } = event || {};\r\n    if (pageIndex < 1) {\r\n      pageIndex = 1;\r\n    }\r\n    const skip = (pageIndex - 1) * pageSize;\r\n    this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);\r\n  }\r\n  @HostListener('pageSizeChanged', ['$event'])\r\n  public onPageSizeChanged(event: any) {\r\n    const pageSize = event ? event : 20;\r\n    const skip = 0;\r\n    this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);\r\n  }\r\n  /**\r\n   * èç¹é¡µç åæ¢äºä»¶\r\n   * @param event event\r\n   */\r\n  @HostListener('childsPageChanged', ['$event'])\r\n  public onNodePageChanged(event: any) {\r\n    const { pageIndex = 1, pageSize = this.nodePageSize, node = {} } = event;\r\n    const id = node && node.id || null;\r\n    if (id) {\r\n      const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n      const expandNodes = virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];\r\n      expandNodes.push(id);\r\n      virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);\r\n      this.frameContext.params.set(`_NODE_${id}_PAGE_INDEX_`, pageIndex);\r\n      this.frameContext.params.set(`_RELOAD_CHILDREN_`, true);\r\n      this.frameContext.params.set('_NODE_PAGE_CHANGED_', true);\r\n    }\r\n  }\r\n  //#endregion\r\n}\r\n\r\nexport { FarrisTreeTableBindingDirective };\r\n","import { BindingObject, DataPropInfo, DataTypeInfo, ViewModel } from \"@farris/devkit\";\r\nimport { isNumber } from 'lodash-es';\r\n/**\r\n * å¸®å©æ å°åºç±»\r\n */\r\nexport class DataMapping {\r\n  public vm: ViewModel; \r\n  public target: BindingObject;\r\n  /**\r\n   * \r\n   * @param helpData æ¸ç©ºæ¶ï¼å¼ä¸ºnull\r\n   * @param mapFields æ ¼å¼å½¢å¦ï¼{id: \"assoField.assoField\", code: \"assoField.assoField_Code\", name: \"assoField.assoField_Name\"}\r\n   * @param asClear ç±»ä¼¼æ¸ç©º\r\n   */\r\n  mappingData(helpData: any, mapFields: any, asClear: boolean = false) {\r\n    if (!mapFields) {\r\n      return;\r\n    }\r\n    // å³é­åæ´æ£æµ\r\n    const appContext = this.vm.frameContext.appContext;\r\n    appContext.changeDetectionController.detach();\r\n    let helpFields = Object.keys(mapFields);\r\n    let basePaths: any[];\r\n    // æ å°å°ç®æ ä¸»é®çæºå­æ®µæ°ç»\r\n    let primaryKeys: string[];\r\n    // ç®æ ä¸»é®å­æ®µæ°ç»\r\n    let primaryFields: string[];\r\n    basePaths = this.getBindingPathArray();\r\n    const primaryInfo = this.getMapFieldsPrimaryKey(mapFields, basePaths);\r\n    primaryKeys = primaryInfo && primaryInfo.map(item => item.primaryKey) || [];\r\n    primaryFields = primaryInfo && primaryInfo.map(item => item.primaryField) || [];\r\n    // å¯¹æ å°ä¸­çkeyè¿è¡æåºï¼ä½¿æ å°å°ç®æ ä¸»é®çkeyæå°åé¢\r\n    helpFields = this.sortMapFieldKeys(helpFields, primaryKeys);\r\n    if (!helpData || asClear) {\r\n      helpFields.reverse();\r\n    }\r\n    this.mapping(helpFields, mapFields, helpData, primaryFields, basePaths, asClear);\r\n    // éæ°æå¼åæ´æ£æµ\r\n    appContext.changeDetectionController.reattach();\r\n  }\r\n  private mapping(sortedKeyFields: string[], mapFields: any, helpData: any, targetPrimaryFields: string[], basePaths: string[], asClear: boolean = false) {\r\n    sortedKeyFields.forEach((field: any) => {\r\n      const val = this.getHelpValue(field, helpData);\r\n      let mappings: any[] = mapFields[field].split(',');\r\n      const headMappings = mappings.filter(p => targetPrimaryFields.includes(p));\r\n      const leftMappings = mappings.filter(p => !targetPrimaryFields.includes(p));\r\n      if (!helpData || asClear) {\r\n        mappings = [].concat(leftMappings).concat(headMappings);\r\n      } else {\r\n        mappings = [].concat(headMappings).concat(leftMappings);\r\n      }\r\n      this.updateTarget(mappings, basePaths, helpData, val);\r\n    });\r\n  }\r\n  private updateTarget(mappings: string[], basePaths: string[], helpData: any, value: any) {\r\n    mappings.forEach((targetFieldPath: any) => {\r\n      this.updateTargetValue(basePaths, targetFieldPath, value, helpData);\r\n    });\r\n  }\r\n  private updateTargetValue(basePaths: string[], targetFieldPath, value: any, helpData: any) {\r\n    if (this.target) {\r\n      const paths = targetFieldPath.split('.');\r\n      this.setValue(this.target, paths, value);\r\n    } else {\r\n      const paths = basePaths.concat(targetFieldPath.split('.'));\r\n      if (!helpData) {\r\n        this.vm.bindingData.clearValue(paths, true, true, { frameContext: this.vm.frameContext });\r\n      } else {\r\n        this.vm.bindingData.setValue(paths, value, true, true, null, { frameContext: this.vm.frameContext });\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * è·åå¸®å©å­æ®µå¯¹åºçå¼\r\n   * @param field å¸®å©å­æ®µ\r\n   * @param helpData å¸®å©æ°æ®\r\n   * @returns \r\n   */\r\n  private getHelpValue(field: string, helpData: any) {\r\n    let value: any = '';\r\n    if (helpData) {\r\n      if (helpData instanceof Array) {\r\n        value = helpData.map((item: any) => {\r\n          return this.getValue(field, item);\r\n        }).join(',');\r\n      } else {\r\n        value = this.getValue(field, helpData);\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n  protected getValue(f: string, data: any) {\r\n    let val = '';\r\n    if (f.indexOf('.') === -1) {\r\n      val = data[f];\r\n    } else {\r\n      val = f.split('.').reduce((a, b) => {\r\n        return a[b];\r\n      }, data);\r\n    }\r\n\r\n    return val;\r\n  }\r\n  protected setValue(target: object, paths: string[], value: any) {\r\n    if (target) {\r\n      if (paths.length <= 1) {\r\n        target[paths[0]] = value;\r\n      } else {\r\n        paths.slice(0, -1).reduce((prev, path) => {\r\n          if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {\r\n            prev[path] = {};\r\n          }\r\n          return prev[path];\r\n        }, target)[paths[paths.length - 1]] = value;\r\n      }\r\n    }\r\n  }\r\n  private getBindingPathArray(): any[] {\r\n    const path = this.vm.bindingPath;\r\n    if (path) {\r\n      return path.split('/').filter(n => n !== '');\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private isNumberValue(field, data) {\r\n    const currentVal = this.getValue(field, data);\r\n    return isNumber(currentVal);\r\n  }\r\n  /**\r\n   * \r\n   * @param mapFields  æ ¼å¼å½¢å¦ï¼{id: \"assoField.assoField\", code: \"assoField.assoField_Code\", name: \"assoField.assoField_Name\"} æè {id:'vid',code:'code',name:'name'}\r\n   */\r\n  private getMapFieldsPrimaryKey(mapFields: any, bindingPaths: string[]): Array<{ primaryKey: string, primaryField: string }> {\r\n    if (!mapFields || Object.keys(mapFields).length < 1) {\r\n      return null;\r\n    }\r\n    const results = [];\r\n    // let primaryField = null;\r\n    try {\r\n      const entityTypeInfo: DataTypeInfo = this.vm.frameContext.repository.entityTypeInfo;\r\n      Object.keys(mapFields).forEach((key: string) => {\r\n        const mapField = mapFields[key];\r\n        if (mapField && typeof mapField === 'string') {\r\n          const mappings = mapField.split(',').filter(p => p);\r\n          mappings.forEach((item: string) => {\r\n            let paths = item.split('.');\r\n            if (bindingPaths && bindingPaths.length > 0) {\r\n              paths = bindingPaths.concat(paths);\r\n            }\r\n            const propInfo: DataPropInfo = entityTypeInfo.getPropInfoByPath(paths);\r\n            if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.primary === true) {\r\n              results.push({\r\n                primaryKey: key,\r\n                primaryField: item\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    return results;\r\n  }\r\n  private sortMapFieldKeys(keys: string[], primaryKeys: string[]): string[] {\r\n    if (!primaryKeys || primaryKeys.length < 1 || !keys || keys.length < 1) {\r\n      return keys;\r\n    }\r\n    primaryKeys = [...new Set(primaryKeys)];\r\n    // è¿æ»¤åºéä¸»é®æ å°å­æ®µ\r\n    keys = keys.filter(p => !primaryKeys.includes(p));\r\n    return [].concat(primaryKeys).concat(keys);\r\n  }\r\n}","/*\r\n * @Author: ç¯çç§æ(lucas huang)\r\n * @Date: 2018-11-07 16:31:57\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-27 14:57:22\r\n * @Company: Inspur\r\n * @Version: v0.0.1\r\n */\r\n\r\n/**\r\n * ä½¿ç¨æ¹æ³ï¼\r\n * [data-mapping]=\"{ id: 'user.userId', name: 'user.userName' }\"\r\n * key ä¸ºå¸®å©ä¸çå­æ®µï¼ value ä¸º è¡¨åä¸­çå­æ®µå\r\n * å¸®å©ä¸çåä¸ä¸ªå­æ®µå¯ä»¥æ å°å°è¡¨åä¸­çå¤ä¸ªå­æ®µä¸­ï¼{ ... id: 'user.userid, user.addusid'}\r\n * å¤å­æ®µä»¥éå·éå¼\r\n *\r\n */\r\n\r\nimport { Directive, OnInit, Optional, Self, Input } from '@angular/core';\r\nimport { BindingObject, DataPropInfo, DataTypeInfo, NgFormControl, ViewModel } from '@farris/devkit';\r\nimport { LookupGridComponent } from '@farris/ui-lookup';\r\nimport { DataMapping } from './data-mapping';\r\n\r\n\r\n@Directive({ selector: '[data-mapping]' })\r\nexport class LookupDataMappingDirective extends DataMapping implements OnInit {\r\n\r\n  @Input('data-mapping') mapfields: any;\r\n  @Input('target') target: BindingObject = null;\r\n\r\n  constructor(@Optional() public vm: ViewModel, @Optional() @Self() private lookup: LookupGridComponent) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.lookup.selectedData.subscribe((data: any) => {\r\n      const _mapfields = this.mapfields || this.lookup.mapFields;\r\n      this.mappingData(data, _mapfields);\r\n    });\r\n    this.lookup.clearMappings.subscribe((result: any) => {\r\n      // const value = result && result.value || null;\r\n      const mapfields = Object.assign({}, (this.mapfields || this.lookup.mapFields || {}));\r\n      const lookupTextField = this.lookup.textField;\r\n      const data = {};\r\n      const controlName = this.lookup.ngControl && this.lookup.ngControl.name;\r\n      if (controlName && this.vm) {\r\n        const textFieldMapping = mapfields[lookupTextField];\r\n        const ngFormControl = this.vm && this.vm.form && this.vm.form.ngFormControls && this.vm.form.ngFormControls[controlName] as NgFormControl;\r\n        const binding = ngFormControl && ngFormControl.binding;\r\n        if (textFieldMapping && binding) {\r\n          mapfields[lookupTextField] = textFieldMapping.split(',').filter(item => item !== binding).join(',');\r\n        }\r\n      }\r\n      // this.setValue(data, lookupTextField.split('.'), value);\r\n      Object.keys(mapfields).forEach(field => {\r\n        this.setValue(data, field.split('.'), '');\r\n      });\r\n      this.mappingData(data, mapfields, true);\r\n    });\r\n    this.lookup.clear.subscribe(() => {\r\n      const _mapfields = this.mapfields || this.lookup.mapFields;\r\n      this.mappingData(null, _mapfields);\r\n    });\r\n  }\r\n}\r\n","\r\nimport { Directive, OnInit, Optional, Self, Input } from '@angular/core';\r\nimport { FrameContext } from '@farris/devkit';\r\nimport { LookupGridComponent } from '@farris/ui-lookup';\r\n\r\n// tslint:disable-next-line: directive-selector\r\n@Directive({\r\n    selector: '[enableExtendLoadMethod]'\r\n})\r\nexport class LookupEnableExtendLoadMethodDirective implements OnInit {\r\n\r\n    @Input()\r\n    public enableExtendLoadMethod: any;\r\n\r\n    constructor(\r\n      @Optional()private frameContext: FrameContext,\r\n      @Optional() @Self() private lookup: LookupGridComponent\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        if (!this.frameContext || !this.lookup || this.enableExtendLoadMethod !== true) {\r\n            return;\r\n        }\r\n        const befApiUrl = this.frameContext.repository.apiUri;\r\n        const helpMetadataId = this.lookup.uri;\r\n        const enableKey = `${helpMetadataId}@${befApiUrl}`;\r\n        this.frameContext.setParam(enableKey, true);\r\n    }\r\n}\r\n","import { Directive, Input, OnInit, HostListener, Self, Host, Optional, Output, EventEmitter, OnChanges, SimpleChanges, DoCheck, KeyValueDiffer, KeyValueDiffers } from '@angular/core';\r\nimport { ComboBoxComponent } from '@progress/kendo-angular-dropdowns';\r\nimport { LookupGridComponent } from '@farris/ui-lookup';\r\nimport { ComboListComponent } from '@farris/ui-combo-list';\r\nimport { ComboLookupComponent } from '@farris/ui-combo-lookup';\r\n\r\n@Directive({\r\n  selector: '[UIStateBinding]'\r\n})\r\nexport class UIStateBindingDirective implements OnInit, OnChanges, DoCheck {\r\n  private _bindingObject: any;\r\n  private differ: KeyValueDiffer<any, any> = null;\r\n\r\n  @Input('UIStateBinding')\r\n  set bindingObject(value: any) {\r\n    this._bindingObject = value;\r\n    if (!this.differ && value && this.differs && typeof (value) === 'object') {\r\n      this.differ = this.differs.find(value).create();\r\n    }\r\n  }\r\n  get bindingObject() {\r\n    return this._bindingObject;\r\n  }\r\n  @Output() UIStateBindingChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  @HostListener('valueChange', ['$event'])\r\n  onValueChange(val: any) {\r\n    // host is combobox\r\n    if (this.hostComboComponent && this.bindingObject) {\r\n      if (val) {\r\n        this.bindingObject.key = val.value;\r\n        this.bindingObject.value = val.name;\r\n      } else {\r\n        this.bindingObject.key = null;\r\n        this.bindingObject.value = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    @Host() @Self() @Optional() private hostComboComponent: ComboBoxComponent,\r\n    @Host() @Self() @Optional() private hostHelpComponent: LookupGridComponent,\r\n    @Optional() private differs: KeyValueDiffers,\r\n    @Host() @Self() @Optional() private hostComboListComponent: ComboListComponent,\r\n    @Host() @Self() @Optional() private hostComboLookupComponent: ComboLookupComponent\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    if (this.hostComboComponent) {\r\n      this.hostComboComponent.valuePrimitive = false;\r\n    } else if (this.hostHelpComponent) {\r\n      this.bindObjectToHostLookup();\r\n    } else if (this.hostComboListComponent) {\r\n      this.bindObjectToHostComboList();\r\n    } else if (this.hostComboLookupComponent) {\r\n      this.bindObjectToHostComboLookup();\r\n    }\r\n\r\n  }\r\n  ngDoCheck() {\r\n    if (this.differ && typeof (this.bindingObject) === 'object') {\r\n      const changes = this.differ && this.differ.diff(this.bindingObject);\r\n      if (changes) {\r\n        this.bindingChanges();\r\n      }\r\n    } else { // å¼å®¹æªéæ°ç¼è¯å·¥ç¨ï¼differä¸å­å¨ä»æåµ\r\n      this.bindingChanges();\r\n    }\r\n  }\r\n\r\n  private bindingChanges() {\r\n    const text = this.bindingObject ? this.bindingObject.value : null;\r\n    const key = this.bindingObject ? this.bindingObject.key : null;\r\n    if (this.hostComboComponent) {\r\n      this.hostComboComponent.text = text;\r\n      const vField = this.hostComboComponent.valueField;\r\n      const item = this.hostComboComponent.data.find(n => n[vField] === key);\r\n      this.hostComboComponent.writeValue(item);\r\n    } else if (this.hostHelpComponent) {\r\n      this.hostHelpComponent.writeValue(text);\r\n      this.hostHelpComponent.displayValue = key;\r\n    } else if (this.hostComboListComponent) {\r\n      this.hostComboListComponent.writeValue(key);\r\n    } else if (this.hostComboLookupComponent) {\r\n      this.hostComboLookupComponent.selectedValues = key;\r\n      this.hostComboLookupComponent.writeValue(text);\r\n    }\r\n  }\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.bindingObject && !this.differ) {\r\n      this.bindingChanges();\r\n    }\r\n  }\r\n\r\n  // å¼¹åºå¸®å©\r\n  private bindObjectToHostLookup() {\r\n    if (!this.hostHelpComponent) {\r\n      return;\r\n    }\r\n\r\n    this.hostHelpComponent.selectedData.subscribe((data: any) => this.updateHelpBindingObject(data));\r\n\r\n    this.hostHelpComponent.clear.subscribe(() => {\r\n      // this.bindingObject = {key: null, value: null};\r\n      this.updateHelpBindingObject(null);\r\n    });\r\n\r\n    if (this.hostHelpComponent.nosearch) {\r\n      this.hostHelpComponent.valueChanged.subscribe((txt: any) => {\r\n        const idField = this.hostHelpComponent.idField;\r\n        const textField = this.hostHelpComponent.textField;\r\n        this.updateHelpBindingObject({\r\n          [idField]: txt,\r\n          [textField]: txt\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  // ä¸æåè¡¨\r\n  private bindObjectToHostComboList() {\r\n    if (!this.hostComboListComponent) {\r\n      return;\r\n    }\r\n\r\n    this.hostComboListComponent.valueChange.subscribe((data: any) => this.updateHelpBindingObject(data.selections));\r\n\r\n    this.hostComboListComponent.clear.subscribe(() => {\r\n      this.updateHelpBindingObject(null);\r\n    });\r\n  }\r\n\r\n  // ä¸æå¸®å©\r\n  private bindObjectToHostComboLookup() {\r\n    if (!this.hostComboLookupComponent) {\r\n      return;\r\n    }\r\n\r\n    if (this.hostComboLookupComponent.multiSelect) {\r\n      this.hostComboLookupComponent.valueChange.subscribe((data: any) => this.updateHelpBindingObject(data.selections));\r\n    } else {\r\n      // this.hostComboLookupComponent.selectChange.subscribe((data: any) => this.updateHelpBindingObject(data));\r\n      this.hostComboLookupComponent.selectChange.subscribe((e: any) => {\r\n        let data = e;\r\n        if(e.data) {\r\n          data = e.data;\r\n        }\r\n        this.updateHelpBindingObject(data);\r\n      });\r\n    }\r\n\r\n    this.hostComboLookupComponent.clear.subscribe(() => {\r\n      this.updateHelpBindingObject(null);\r\n    });\r\n  }\r\n\r\n  // æ´æ°UISTATE\r\n  private updateHelpBindingObject(data: any) {\r\n    let idField, textField;\r\n    if (this.hostHelpComponent) {\r\n      idField = this.hostHelpComponent.idField;\r\n      textField = this.hostHelpComponent.textField;\r\n    }\r\n\r\n    if (this.hostComboListComponent) {\r\n      idField = this.hostComboListComponent.idField;\r\n      textField = this.hostComboListComponent.textField;\r\n    }\r\n\r\n    if (this.hostComboLookupComponent) {\r\n      idField = this.hostComboLookupComponent.idField;\r\n      textField = this.hostComboLookupComponent.textField;\r\n    }\r\n\r\n    this.emitUiStateBinding(data, idField, textField);\r\n  }\r\n\r\n  private emitUiStateBinding(data, idField, textField) {\r\n    const newObject = { key: null, value: null };\r\n    if (data) {\r\n      // const idField = this.hostHelpComponent.idField;\r\n      // const textField = this.hostHelpComponent.textField;\r\n      if (Array.isArray(data)) {\r\n        newObject.key = data.map(d => d[idField]).join(',');\r\n        newObject.value = data.map(d => {\r\n          if (textField.indexOf('.') > -1) {\r\n            return textField.split('.').reduce((r, c) => {\r\n              return r[c];\r\n            }, d);\r\n          } else {\r\n            return d[textField];\r\n          }\r\n        }).join(',')\r\n      } else {\r\n        if (idField) {\r\n          newObject.key = data[idField];\r\n        }\r\n\r\n        if (textField) {\r\n          if (textField.indexOf('.') > -1) {\r\n            newObject.value = textField.split('.').reduce((r, c) => {\r\n              return r[c];\r\n            }, data);\r\n          } else {\r\n            newObject.value = data[textField];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.UIStateBindingChange.emit(newObject);\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef, Input, Renderer2, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { GridComponent } from '@progress/kendo-angular-grid';\r\n@Directive({\r\n    selector: '[farrisDisabled]'\r\n})\r\nexport class FarrisDisabledDirective implements OnInit, OnChanges {\r\n    @Input('farrisDisabled') kendoGridDisabled: boolean;\r\n    maskElement: any;\r\n    constructor(private grid: GridComponent, private el: ElementRef, private renderer: Renderer2) {\r\n\r\n    }\r\n    ngOnInit() {\r\n\r\n    }\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (!this.maskElement) {\r\n            this.createMaskElement();\r\n        }\r\n        if (changes['kendoGridDisabled'] && this.maskElement) {\r\n            if (this.kendoGridDisabled) {\r\n                this.renderer.removeStyle(this.maskElement, 'display');\r\n            } else {\r\n                this.renderer.setStyle(this.maskElement, 'display', 'none');\r\n            }\r\n        }\r\n    }\r\n    private createMaskElement() {\r\n        this.maskElement = this.renderer.createElement(\"div\");\r\n        this.renderer.setStyle(this.maskElement, 'width', '100%');\r\n        this.renderer.setStyle(this.maskElement, 'height', '100%');\r\n        this.renderer.setStyle(this.maskElement, 'position', 'absolute');\r\n        this.renderer.setStyle(this.maskElement, 'background-color', 'rgba(255,255,255,0.5)');\r\n        this.renderer.setStyle(this.maskElement, 'z-index', '3');\r\n        this.renderer.setStyle(this.maskElement, 'display', 'none');\r\n        this.renderer.appendChild(this.el.nativeElement, this.maskElement);\r\n    }\r\n}\r\n\r\n","import { Directive, Input, Injector } from '@angular/core';\r\nimport { FrameContext, BindingData, ViewModel } from '@farris/devkit';\r\n@Directive({\r\n    selector: '[farrisSort]'\r\n})\r\nexport class FarrisSortDirective {\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[farris-textarea-edit]'\r\n})\r\nexport class FarrisTextareaEditDirective {\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[farrisDynamicColumnFormat]'\r\n})\r\nexport class FarrisDynamicColumnFormatDirective {\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[farris-enter-edit]'\r\n})\r\nexport class FarrisEditEnterDirective {\r\n    @Input('form-group') farrisForm: any;\r\n}\r\n\r\n@Directive({\r\n    selector: '[farrisTreeTableFormat]'\r\n})\r\nexport class FarrisTreeTableFormatDirective {\r\n\r\n}\r\n\r\n","import {\r\n  Directive, OnInit, OnChanges, OnDestroy, SimpleChanges, HostListener,\r\n  EventEmitter, Output\r\n} from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { BindingData, BindingList, Change, ChangeType, ViewModel, AppContext, FrameContext, FieldMetadataUtil, DataTypeInfo, BindingObject, EntityPathConverter, RunMode } from '@farris/devkit';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\nimport { debounceTime, finalize } from 'rxjs/operators';\r\n// tslint:disable: max-line-length\r\n\r\n/*\r\n * ä½¿ç¨ç»å®æ°æ®æä»¤\r\n */\r\n@Directive({\r\n  selector: '[farris-use-binding-data]'\r\n})\r\nexport class FarrisDatagridUseBindingDataDirective implements OnInit, OnChanges, OnDestroy {\r\n  private _PROPS: { [propName: string]: any };\r\n  // æåºå­æ®µ\r\n  private sortFields: string = null;\r\n  // æåºæ¹å\r\n  private sortDirections: string = null;\r\n  private parentId: string = null;\r\n  /**\r\n   * è¿æ»¤æ¡ä»¶\r\n   */\r\n  private filters: any = null;\r\n  protected get props() {\r\n    return this._PROPS;\r\n  }\r\n  protected set props(value) {\r\n    this._PROPS = value;\r\n  }\r\n  protected bindingDataChangeEvent: Subscription;\r\n  /**\r\n   * æ¸²ægrid\r\n   */\r\n  private renderGridSubject: Subject<any> = new Subject<any>();\r\n  /**\r\n   * éä¸­è¡åæ¢äºä»¶\r\n   */\r\n  @Output() selectedRowChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  constructor(public bindingData: BindingData, public viewModel: ViewModel, public grid: DatagridComponent) {\r\n    this.setChecks([]);\r\n    this.registerEvent();\r\n  }\r\n\r\n  // #region Ng Event\r\n\r\n  ngOnInit() {\r\n    const { pageSize = 0 } = this.getPagingInfo() || {};\r\n    if (pageSize !== 0) {\r\n      // å¯ç¨åé¡µ\r\n      if ((!this.grid.pageList || this.grid.pageList.length < 1) && typeof this.grid['setPageList'] === 'function') {\r\n        this.grid['setPageList']([pageSize, pageSize * 2, pageSize * 3, pageSize * 4]);\r\n      }\r\n    }\r\n    this.setComponentRef();\r\n    this.bindData();\r\n    window.setTimeout(() => {\r\n      this.updateSelectedRow();\r\n    }, 0);\r\n    this.registerBindingDataChangeEvent();\r\n    this.renderGridSubject.pipe(\r\n      debounceTime(500)\r\n    ).subscribe((change: Change) => {\r\n      if (!this.viewModel || !this.viewModel.frameContext || this.viewModel.frameContext.isDisposed) {\r\n        return;\r\n      }\r\n      this.bindData(change);\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.bindData();\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n   * ä¸»é®\r\n   */\r\n  protected get primaryKey() {\r\n    return this.bindingList.primaryKey;\r\n  }\r\n  /**\r\n   * è·åç»å®æ°æ®\r\n   */\r\n  protected get bindingList(): BindingList {\r\n    // æ ¹å®ä½\r\n    if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {\r\n      return this.bindingData.list;\r\n    }\r\n    // å­å®ä½\r\n    let bindingPath = this.viewModel.bindingPath.substr(1);\r\n    bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);\r\n    const paths = bindingPath.split('/');\r\n\r\n    const filteredPaths = paths.filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return this.bindingData.getValue(filteredPaths);\r\n  }\r\n  /**\r\n   * è®¾ç½®ç»ä»¶å¼ç¨\r\n   */\r\n  private setComponentRef() {\r\n    const appContext = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.getFormAppContext();\r\n    const frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId;\r\n    const id = this.grid && this.grid.id;\r\n    // å¦æframeIdä¸å­å¨æfarris gridæ²¡æidå±æ§ï¼è¯´æä¸ç¬¦åä½¿ç¨åºæ¯\r\n    if (!frameId || !id) {\r\n      return;\r\n    }\r\n    const map = appContext && appContext.componentRefs && appContext.componentRefs.get(frameId) || new Map<string, any>();\r\n    appContext && appContext.componentRefs && appContext.componentRefs.set(frameId, map.set(id, this.grid));\r\n  }\r\n  /**\r\n   * è·ååé¡µä¿¡æ¯\r\n   */\r\n  protected getPagingInfo() {\r\n    const bindingPath = this.viewModel.bindingPath;\r\n    const bindingData = this.viewModel.bindingData;\r\n    let pagingInfo = bindingData && bindingData.pagingInfo || {};\r\n    if (bindingPath === '/') {\r\n      return pagingInfo;\r\n    } else {\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0);\r\n      // ä»è¡¨åä»ä»è¡¨åé¡µåæ°æ®æ¯å³èçï¼å ä¸ºä¸åçä»è¡¨è¡æä¸åçä»ä»è¡¨æ°æ®ï¼åé¡µä¿¡æ¯çç»æä¸ºnodeCode_parentId:{åé¡µä¿¡æ¯}ä¸åé¡µä¿¡æ¯æ¯å¹³çº§ç\r\n      // {pagination:{a_pid:{pageSize:2,pageIndex:1},b_pid:{pageSize:2,pageIndex:1}}}\r\n      // ååºå½åè·¯å¾ä¸å®ä½çnodeCode\r\n      let nodeCode = bindingPaths[bindingPaths.length - 1];\r\n      nodeCode = nodeCode.substr(0, nodeCode.length - 1);\r\n      // è·åå½åå®ä½ä¸çº§çä¸»é®\r\n      // const result = pagingInfo[nodeCode] || {};\r\n      // if (result.hasOwnProperty('totalCount')) {\r\n      //   result.total = result.totalCount;\r\n      // }\r\n      // return result;\r\n\r\n      const paths = bindingPaths.slice(0, bindingPaths.length - 1);\r\n      const bindingList = bindingData.getValue(paths) as BindingList;\r\n      const { pageSize = 0 } = pagingInfo[`${nodeCode}`] || {};\r\n      // ä¸çº§è¡¨ææ°æ®\r\n      if (bindingList && bindingList.currentId) {\r\n        const key = `${nodeCode}_${bindingList.currentId}`;\r\n        // const key = nodeCode;\r\n        const result = pagingInfo[key] || {};\r\n        if (result.hasOwnProperty('totalCount')) {\r\n          result.total = result.totalCount;\r\n        }\r\n        // ä¸çº§è¡¨è½ç¶ææ°æ®ï¼ä½ä¸çº§è¡¨å½åè¡çä¸çº§è¡¨å¯è½æ²¡ææ°æ®ï¼è¿å°±å¯¼è´è·åä¸å°åé¡µä¿¡æ¯ï¼æä»¥éè¦å¨è¿ååå¯¹ç»æè¿è¡å¤çï¼å¦ææ²¡æåé¡µä¿¡æ¯çè¯èµ·ç åºè¯¥è¿ååé¡µå¤§å°åå½åé¡µç \r\n        if (Object.keys(result).length < 1) {\r\n          result.pageIndex = 1;\r\n          result.pageSize = pageSize;\r\n        }\r\n        return result;\r\n      } else {\r\n        // ä¸çº§è¡¨æ²¡ææ°æ®ï¼æ­¤æ¶éè¦è·åå½åè¡¨çåé¡µä¿¡æ¯ï¼å¦åé¡µå¤§å°ãå½åé¡µé»è®¤ä¸º1å³å¯ã\r\n        return { pageIndex: 1, pageSize };\r\n      }\r\n    }\r\n  }\r\n\r\n  // #region Input\r\n  /**\r\n   * ç»ä»¶æ¯å¦éè¦æ´æ°\r\n   * @param props å½åå±æ§\r\n   * @param nextProps æ°å±æ§\r\n   * @param change åæ´\r\n   */\r\n  protected shouldComponentUpdate(change: Change, data: any,): { result: boolean, props?: any } {\r\n    const props = this.buildProps(data);\r\n    if (this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.appContext && this.viewModel.frameContext.appContext.runMode === RunMode.highSpeed && change) {\r\n      if (change.type === ChangeType.Load || change.type === ChangeType.Remove || change.type === ChangeType.PaginationInfoChange) {\r\n        return { result: true, props };\r\n      }\r\n    }\r\n    const gridProps = this.buildGridProps();\r\n    if (JSON.stringify(props) === JSON.stringify(gridProps)) {\r\n      return { result: false };\r\n    }\r\n    return { result: true, props };\r\n  }\r\n  protected registerEvent() {\r\n    // æåºäºä»¶\r\n    this.grid && this.grid.columnSorted && this.grid.columnSorted.subscribe((event: any) => {\r\n      const isRemoteSort = this.grid.remoteSort;\r\n      // æ¬å°æåº\r\n      if (!isRemoteSort) {\r\n        this.sortFields = this.grid.sortName;\r\n        this.sortDirections = this.grid.sortOrder;\r\n        this.sortBindingList();\r\n        // this.props = this.buildProps();\r\n      } else {\r\n        // æå¡å¨ç«¯æåº\r\n        const groupField = this.grid && this.grid.groupField || null;\r\n        let sortFields = this.grid.sortName && this.grid.sortName.split(',') || [];\r\n        const sortDirection = this.grid.sortOrder && this.grid.sortOrder.split(',') || [];\r\n        if (groupField) {\r\n          if (!sortFields.includes(groupField)) {\r\n            sortFields.splice(0, 0, groupField);\r\n            sortDirection.splice(0, 0, 'asc');\r\n          }\r\n        }\r\n        // è·åå½åentityä¸ææobjectå±æ§\r\n        const entityType = this.viewModel && this.viewModel.frameContext.repository.entityType || null;\r\n\r\n        if (sortFields.length > 0) {\r\n          if (entityType) {\r\n            const dataTypeInfo = new DataTypeInfo(entityType);\r\n            sortFields = sortFields.map(field => {\r\n              //if (field && field.indexOf('.') !== -1) {\r\n              const paths = field.split('.');\r\n              const propInfo = dataTypeInfo.getPropInfoByPath(paths);\r\n              const originalField = propInfo && propInfo.metadataInfo['path'] || null;\r\n              return originalField;\r\n              //}\r\n              //return field;\r\n            });\r\n          }\r\n        }\r\n        // éåå±æ§ï¼æ ¹æ®datafieldè½¬æ¢ä¸ºoriginalDataField\r\n        const fields = sortFields.join(',');\r\n        const directions = sortDirection.join(',') || 'asc';\r\n        const frameContext: FrameContext = this.viewModel && this.viewModel.frameContext || null;\r\n        if (frameContext) {\r\n          frameContext.repository.sortConditionManager.setConditions(this.viewModel.bindingPath, fields, directions);\r\n        }\r\n      }\r\n    });\r\n    // è¿æ»¤äºä»¶\r\n    this.grid && this.grid.filterChanged && this.grid.filterChanged.subscribe((event: any) => {\r\n      this.filters = event;\r\n      if (!this.grid.remoteFilter) {\r\n        if (this.bindingList.length > 0 && !this.bindingList.currentId) {\r\n          const id = this.bindingList.getIdByIndex(0);\r\n          this.bindingList.setCurrentId(id);\r\n        }\r\n        this.bindData();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * å¯¹bindingListæåº\r\n   */\r\n  private sortBindingList() {\r\n    const groupField = this.grid && this.grid.groupField || null;\r\n    if (groupField) {\r\n      const arrSortFields = this.sortFields && this.sortFields.split(',') || [];\r\n      if (!arrSortFields.includes(groupField)) {\r\n        arrSortFields.splice(0, 0, groupField);\r\n        const arrSortDirection = this.sortDirections && this.sortDirections.split(',') || [];\r\n        arrSortDirection.splice(0, 0, 'asc');\r\n        this.sortFields = arrSortFields.join(',');\r\n        this.sortDirections = arrSortDirection.join(',') || 'asc';\r\n      }\r\n    }\r\n    if (this.sortFields && this.sortDirections) {\r\n      this.bindingList.sortBy(this.sortFields, this.sortDirections);\r\n      // this.props = this.buildProps();\r\n    }\r\n    this.bindData();\r\n  }\r\n  // #endregion\r\n\r\n  // #region æ°æ®ç»å®é¨å\r\n  /**\r\n   * æ´æ°æ°æ®\r\n   * @param change? åæ´\r\n   */\r\n  bindData(change?: Change) {\r\n    const isRemoteFilter = this.grid && this.grid.remoteFilter || false;\r\n    // åæ§è¡æåº\r\n    if (this.sortFields && !this.grid.editable && change && (change.type === 'Load' || change.type === 'SelectionChanged')) {\r\n      this.sortBindingList();\r\n      return;\r\n    }\r\n    // æ°å¢æ°æ®æ¶æ¸ç©ºè¡¨æ ¼ç­éæ¡ä»¶\r\n    if ((this.grid.editable === true || change && change.type === ChangeType.Append) && this.filters && Object.keys(this.filters).length > 0 && !isRemoteFilter) {\r\n      this.filters = {};\r\n      this.grid.clearCondition();\r\n    }\r\n    // åtoJSON\r\n    let data: any = this.bindingList.toJSON();\r\n    if (this.filters && Object.keys(this.filters).length > 0 && !isRemoteFilter) {\r\n      data = this.grid.clientFilterService.executeFilter(data, this.filters);\r\n    }\r\n\r\n    if (this.filters && Object.keys(this.filters).length > 0 && !isRemoteFilter && (!change || change && change.type !== ChangeType.SelectionChanged && change.type !== ChangeType.GlobalSelectionChanged)) {\r\n      if (data && data.length > 0) {\r\n        // å¤æ­å½åè¡æ¯å¦å¨è¿æ»¤åçæ°æ®ä¸­\r\n        const row = (data as []).find(item => item[this.bindingList.primaryKey] === this.bindingList.currentId);\r\n        if (!row) {\r\n          const firstRowId = data[0][this.bindingList.primaryKey];\r\n          this.bindingList.setCurrentId(firstRowId, true, true);\r\n        }\r\n      } else {\r\n        // æ¬å°è¿æ»¤å®ä¹åæ²¡ææ°æ®äº\r\n        // this.bindingList.currentId = null;\r\n        this.bindingList.setCurrentId(null, true, true, true);\r\n        // åéæ¶æ¸ç©ºids\r\n        if (!this.grid.multiSelect) {\r\n          this.setChecks([]);\r\n        }\r\n      }\r\n    }\r\n    const result = this.shouldComponentUpdate(change, data);\r\n    if (!result.result) {\r\n      return;\r\n    }\r\n    // const nextProps = this.buildProps(result);\r\n    this.renderGrid(result.props);\r\n    this.props = JSON.parse(JSON.stringify(result.props));\r\n  }\r\n  /**\r\n   * æ¸²ægrid\r\n   * @param props å±æ§\r\n   */\r\n  private renderGrid(props: any) {\r\n    const { pageIndex, pageSize, total, pagination, data } = props;\r\n    const virtualizedLoad = this.grid.virtualizedAsyncLoad || false;\r\n    this.grid.total = total;\r\n    this.grid.pageSize = pageSize;\r\n    this.grid.pageIndex = pageIndex;\r\n    this.grid.pagination = pagination;\r\n    this.grid.controlPaginationState = false;\r\n    // this.endCellEdit();\r\n    if (pageSize === 0) {\r\n      this.grid.pagination = false;\r\n      this.grid.pageIndex = 1;\r\n      // ä¿®å¤ä¸åé¡µæ¶gridå¯ç¨åç»ä»ä¼éæ°é¦æ°çé®é¢\r\n      // this.grid.pageSize = total;\r\n    }\r\n    if (virtualizedLoad) {\r\n      this.grid.loadVirtualData({\r\n        items: data,\r\n        pageIndex,\r\n        pageSize,\r\n        total\r\n      });\r\n    } else {\r\n      this.grid.loadData(data);\r\n    }\r\n  }\r\n  /**\r\n   * æé è¡¨æ ¼æ°æ®å±æ§\r\n   */\r\n  protected buildProps(datas?: Array<any>) {\r\n    let data;\r\n    if (typeof (datas) !== 'undefined') {\r\n      data = datas;\r\n    } else {\r\n      data = this.bindingList.toJSON();\r\n    }\r\n    // let skip = 0;\r\n    let { pageIndex = 1, pageSize = 0 } = this.getPagingInfo() || {};\r\n    let { total = 0 } = this.getPagingInfo() || {};\r\n    // if (pageIndex > 0) {\r\n    //   skip = (pageIndex - 1) * pageSize;\r\n    // }\r\n    if (pageSize === 0 && total === 0) {\r\n      total = data.length;\r\n    }\r\n    return { data, pageIndex, pageSize, total, pagination: pageSize !== 0 };\r\n  }\r\n  /**\r\n   * è®¡ç®gridç¶æ\r\n   */\r\n  private buildGridProps() {\r\n    const data = this.grid.data || [];\r\n    let skip = 0;\r\n    const { pageIndex = 1, pageSize = 0 } = { pageIndex: this.grid.pageIndex, pageSize: this.grid.pageSize };\r\n    let total = this.grid.total || 0;\r\n    if (pageIndex > 0) {\r\n      skip = (pageIndex - 1) * pageSize;\r\n    }\r\n    if (pageSize === 0 && total === 0) {\r\n      total = data.length;\r\n    }\r\n    return { data, pageIndex, pageSize, total, pagination: this.grid.pagination };\r\n  }\r\n  /**\r\n   * æ°æ®æºåçåæ´\r\n   * @param change åæ´\r\n   */\r\n  protected onBindingDataChange(change: Change) {\r\n    this.updateDataSource(change);\r\n    this.updateSelectedRow(change);\r\n    // this.updateGrid(change);\r\n    // ä¸æ¸é¤å¾éè¡ï¼éè¦ä¿çå¾éç¶æ\r\n    // this.clearCheckedRows(change);\r\n    this.endCellEdit(change);\r\n    // æ´æ°å¾éè¡æ°æ®\r\n    this.updateCheckedRows(change);\r\n    this.updateData(change);\r\n  }\r\n  /**\r\n   * æ´æ°æ°æ®\r\n   */\r\n  private updateDataSource(change: Change) {\r\n    /*if (change) {\r\n      const isMatch = this.checkIfChangeMatchBindingPath(change);\r\n      if (!isMatch) {\r\n        return;\r\n      }\r\n    }*/\r\n    if (change && change.type === ChangeType.ValueChanged) {\r\n      this.renderGridSubject.next(change);\r\n    } else if (change && (change.type === ChangeType.SelectionChanged || change.type === ChangeType.GlobalSelectionChanged)) {\r\n      if (this.bindingList.currentId === (this.grid.selectedRow && this.grid.selectedRow.id) && this.grid.total > 0) {\r\n      } else {\r\n        this.bindData(change);\r\n      }\r\n    } else {\r\n      this.bindData(change);\r\n    }\r\n  }\r\n  // private endCellEdit() {\r\n  //   const isEditing = this.grid.isEditing();\r\n  //   if (isEditing) {\r\n  //     this.grid.endCellEdit();\r\n  //   }\r\n  // }\r\n  private endCellEdit(change: Change) {\r\n    const isEditing = this.grid.isEditing();\r\n    if (change.type === ChangeType.Load && isEditing) {\r\n      this.grid.endCellEdit();\r\n    }\r\n  }\r\n  /**\r\n   * è®¾ç½®gridå½åéæ©è¡\r\n   * @param change åæ´\r\n   */\r\n  private updateSelectedRow(change?: Change) {\r\n    if (!this.bindingList || !this.bindingList.currentId) {\r\n      return;\r\n    }\r\n    // é¡µç åæ¢æ¶ä¸æ§è¡å½åè¡åæ¢\r\n    if (change && change.type === ChangeType.PaginationInfoChange) {\r\n      return;\r\n    }\r\n    if (this.viewModel && this.viewModel.frameContext.bindingData.rowSelectedEventSuspend === true) {\r\n      return;\r\n    }\r\n    const { id: gridSelectedRowId = null } = this.grid.selectedRow || {};\r\n    const currentId = this.bindingList.currentId;\r\n    // gridå½åè¡ä¸bingingListå½åè¡ä¸è´ï¼æ é¡»åæ¢\r\n    if (gridSelectedRowId === currentId) {\r\n      const isMatch = change && (change.path.toString() === this.viewModel.bindingPath.split('/').filter(p => p).toString());\r\n      if (change && change.type === ChangeType.Load && isMatch) {\r\n        this.grid.clearSelections();\r\n        this.grid.selectRow(currentId, true, true);\r\n      }\r\n      return;\r\n    }\r\n    this.selectGridRow(this.bindingList.currentId);\r\n  }\r\n  /**\r\n   * æ³¨åbindingdataååäºä»¶\r\n   */\r\n  private registerBindingDataChangeEvent() {\r\n    this.bindingDataChangeEvent = this.bindingData.changes.subscribe((change: Change) => {\r\n      this.onBindingDataChange(change);\r\n    });\r\n    this.viewModel.frameContext.appContext.messagePipe.subscribe(message => {\r\n      if (message === 'bindData') {\r\n        this.bindData();\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * åæ¶bindingdataååè®¢é\r\n   */\r\n  private unRegisterBindingDataChangeEvent() {\r\n    if (this.bindingDataChangeEvent && typeof (this.bindingDataChangeEvent.unsubscribe) === 'function') {\r\n      this.bindingDataChangeEvent.unsubscribe();\r\n    }\r\n  }\r\n  /**\r\n   * è§¦åé¡µç åæ¢äºä»¶\r\n   * @description æ¬æ¹æ³éç¨åºæ¯ä»ä¸ºç¶çº§gridæ°æ®éæ°loadï¼éè¦è§¦åè¯¥gridéæ°åæ°ä½¿ç¨ãå¶ä»åºæ¯è¯·å¿ä½¿ç¨\r\n   * @TODO: å¾éæï¼æ§å¶ä¸çº§æ°æ®å è½½åºè¯¥ä¾èµè¡¨æ ¼çè¡åæ¢äºä»¶ï¼ä¸´æ¶è¿æ ·å¤çï¼åç»­æä¾LoadChildrenäºä»¶\r\n   */\r\n  private updateData(change?: Change) {\r\n    if (!(change && (change.type === ChangeType.SelectionChanged || change.type === ChangeType.Load))) {\r\n      return;\r\n    }\r\n    const bindingPath = this.viewModel.bindingPath;\r\n    const eventBindingPath = '/' + change.path.join('/');\r\n    const isRetrieve = this.viewModel.frameContext.appContext.params.get('retrieveing') || false;\r\n    if (change.path.length < 1 || bindingPath === '/' || bindingPath === eventBindingPath || !bindingPath.startsWith(eventBindingPath)) {\r\n      return;\r\n    }\r\n    // retrieveæ¶ä¼èªå¨å¸¦åä»è¡¨ç¬¬ä¸é¡µåä»è¡¨ç¬¬ä¸è¡çä»ä»è¡¨æ°æ®ï¼æä»¥ä¸éè¦åå»åç¬è¯·æ±\r\n    if (isRetrieve) {\r\n      return;\r\n    }\r\n    const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);\r\n    const paths = fullPaths.slice(0, fullPaths.length - 1);\r\n    const parent = this.bindingList.parent;\r\n    const parentId = parent && parent[parent.primaryKey];\r\n    // ä¸çº§è¡¨æ²¡ææ°æ®\r\n    if (!parentId) {\r\n      return;\r\n    }\r\n    // è·ånodecode\r\n    const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);\r\n    let nodeCode = bindingPaths[bindingPaths.length - 1];\r\n    nodeCode = nodeCode.substr(0, nodeCode.length - 1);\r\n    // const configPath = `/${nodeCode}_${parentId}`;\r\n    const configPath = `/${nodeCode}`;\r\n    let { pageIndex = 1 } = this.viewModel.frameContext.repository.entityCollection.getPaginationConfigByPath(configPath) || {};\r\n    const { pageSize = 0 } = this.viewModel.frameContext.repository.entityCollection.getPaginationConfigByPath(configPath) || {};\r\n\r\n    const parentNodeCode = change.path[change.path.length - 1];\r\n    const parentConfigPath = '/' + parentNodeCode.substring(0, parentNodeCode.length - 1);\r\n    const { pageSize: parentPageSize = 0 } = this.viewModel.frameContext.repository.entityCollection.getPaginationConfigByPath(parentConfigPath) || {};\r\n    const isQueryChild = this.viewModel.frameContext.appContext.params.get('queryChild') || false;\r\n    if (isQueryChild) {\r\n      // this.viewModel.frameContext.appContext.params.delete('queryChild');\r\n      pageIndex = 1;\r\n    }\r\n    // å½ä¸çº§è¡¨åæ¢è¡æ¶\r\n    if (parentPageSize + pageSize !== 0) {\r\n      this.viewModel.frameContext.appContext.params.set('forceQueryChild', true);\r\n      this.viewModel.frameContext.repository.queryChild(paths, pageIndex, pageSize).pipe(\r\n        finalize(() => this.viewModel.frameContext.appContext.params.delete('forceQueryChild'))\r\n      ).subscribe();\r\n    }\r\n  }\r\n  ngOnDestroy() {\r\n    this.unRegisterBindingDataChangeEvent();\r\n  }\r\n  // #endregion\r\n\r\n  // #region äºä»¶åå°å¨\r\n\r\n  /**\r\n   * åå°éä¸­è¡åæ¢äºä»¶\r\n   * @description ç»ä¸åéæ¨¡å¼åå¤éæ¨¡å¼ä¸çè¡åæ¢äºä»¶\r\n   */\r\n  protected fireSelectedRowChange(selectedRowContext: any) {\r\n    this.selectedRowChange.emit(selectedRowContext);\r\n  }\r\n  /**\r\n   * æ¸ç©ºéå®è¡\r\n   * @param change åæ´\r\n   */\r\n  private clearCheckedRows(change: Change) {\r\n    if (change.type === ChangeType.Load && this.grid.multiSelect) {\r\n      const isMatch = this.checkIfChangeMatchBindingPath(change);\r\n      if (isMatch) {\r\n        this.setChecks([]);\r\n        if (typeof (this.grid.clearCheckeds) === 'function') {\r\n          this.grid.clearCheckeds();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n\r\n  // #region éä¿¡\r\n\r\n  /**\r\n   * è®¾ç½®BindingListçå½åè¡\r\n   * @param id å½åè¡åç \r\n   */\r\n  protected setSelectionIdToBindingData(id: string): void {\r\n    // å¦æå½åè¡ä¸å­å¨ï¼åå¼ºå¶è®¾ç½®\r\n    if (!id) {\r\n      this.bindingList.currentId = id;\r\n      if (!this.grid.multiSelect) {\r\n        this.setChecks([]);\r\n      }\r\n      return;\r\n    }\r\n    if (this.bindingList.currentId !== id) {\r\n      this.bindingList.setCurrentId(id, true);\r\n    }\r\n    // åéæ¨¡å¼ä¸å°å½åè¡è®¾ç½®å°ids\r\n    if (!this.grid.multiSelect) {\r\n      this.setChecks([id]);\r\n    }\r\n  }\r\n  private updateCheckedRows(changes: Change) {\r\n    if (changes.type === ChangeType.Load) {\r\n      this.setCheckedRows();\r\n    } else if (changes.type === ChangeType.ValueChanged) {\r\n      const ids = this.getChecks();\r\n      if (changes.id && ids.includes(changes.id)) {\r\n        this.setCheckedRows();\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * è®¾ç½®éæ©è¡\r\n   */\r\n  protected setChecks(ids: string[]) {\r\n    this.viewModel.uiState.setPropertyValue('ids', ids);\r\n    this.setCheckedRows(ids);\r\n  }\r\n  /**\r\n   * è·åå¾éè¡idæ°ç»\r\n   * @returns \r\n   */\r\n  protected getChecks(): string[] {\r\n    return this.viewModel.uiState['ids'] || [];\r\n  }\r\n  /**\r\n   * æ´æ°å¾éè¡æ°æ®\r\n   */\r\n  protected setCheckedRows(ids?: string[]) {\r\n    // é«éæ¨¡å¼æ¶ä¸åè®¾ç½®rows\r\n    // if (this.viewModel.frameContext.appContext.runMode === RunMode.highSpeed) {\r\n    //   return;\r\n    // }\r\n    if (typeof ids === 'undefined') {\r\n      ids = this.viewModel.uiState['ids'] || [];\r\n    }\r\n    if (!Array.isArray(ids) || ids.length < 1) {\r\n      // æ­¤æ¶idsæ²¡æå¼ï¼rowsä¸­ä¹ä¸åºè¯¥æ\r\n      this.viewModel.uiState.setPropertyValue('rows', null);\r\n      return;\r\n    }\r\n    let list = [];\r\n    // TODOï¼rowsä¸­æ°æ®å¨é«éæ¨¡å¼åæ®éæ¨¡å¼ä¸å¤è¯­å­æ®µçå¼è¡¨ç°ä¸ä¸è´ï¼é«éæ¨¡å¼ä¸å¤è¯­å­æ®µå¼ä¸ºå¯¹è±¡ï¼æ®éæ¨¡å¼ä¸ºå½åè¯­è¨ãæä¸å¤çé«éæ¨¡å¼åºæ¯\r\n    if (this.viewModel.frameContext.appContext.runMode === RunMode.highSpeed) {\r\n      list = this.grid.data || [];\r\n    } else {\r\n      list = this.bindingList.toJSON({ignoreMultiLangInput: true});\r\n    }\r\n    const rows: Map<string, any> = this.viewModel.uiState['rows'] || new Map<string, any>();\r\n\r\n    const result = new Map<string, any>();\r\n    ids.forEach((id: any) => {\r\n      const item = list.find(item => item[this.primaryKey] === id);\r\n      const otherPageItem = rows.get(id);\r\n      if (item) {\r\n        result.set(id, item);\r\n      } else if (otherPageItem) {\r\n        result.set(id, otherPageItem);\r\n      }\r\n    });\r\n    this.viewModel.uiState.setPropertyValue('rows', result);\r\n  }\r\n  /**\r\n   * éä¸­gridè¡\r\n   * @param id id\r\n   */\r\n  protected selectGridRow(id: any) {\r\n    this.grid.selectRow(id);\r\n    this.grid.scrollToCurrentRow();\r\n  }\r\n  // #endregion\r\n  // #region äºä»¶å¤çå¨\r\n\r\n  /**\r\n   * é¡µç åæ¢äºä»¶\r\n   * @param event event\r\n   */\r\n  @HostListener('pageChanged', ['$event'])\r\n  public pageChangedHandler(event: any) {\r\n    let { pageIndex, pageSize } = event;\r\n    if (pageIndex < 1) {\r\n      pageIndex = 1;\r\n    }\r\n    const skip = (pageIndex - 1) * pageSize;\r\n    this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);\r\n  }\r\n\r\n  /**\r\n   * è¡åæ¢äºä»¶\r\n   * @param event event\r\n   */\r\n  @HostListener('selectChanged', ['$event'])\r\n  public selectedRowChanged(event: any) {\r\n    const { index, data } = event;\r\n    const id = data[this.primaryKey];\r\n    this.setSelectionIdToBindingData(id);\r\n    this.fireSelectedRowChange(event);\r\n  }\r\n\r\n  /**\r\n   * åæ¶è¡éæ©äºä»¶\r\n   * @param event event\r\n   */\r\n  @HostListener('unSelect', ['$event'])\r\n  public unSelected(event: any) {\r\n    if (!event) {\r\n      return;\r\n    }\r\n    const { data = {} } = event;\r\n    const id = data[this.primaryKey];\r\n    const currentId = this.bindingList.currentId;\r\n    if (id === currentId) {\r\n      this.setSelectionIdToBindingData(null);\r\n    }\r\n    // this.fireSelectedRowChange(event);\r\n  }\r\n  /**\r\n   * å¾éè¡åçåå\r\n   * @param event event\r\n   */\r\n  @HostListener('checkedChange', ['$event'])\r\n  public checkedChanged(event: any) {\r\n    event = event || [];\r\n    const ids = event.map(item => item.id);\r\n    this.setChecks(ids);\r\n  }\r\n  /**\r\n   * åé¡µå¤§å°åæ´äºä»¶\r\n   * @param event event\r\n   */\r\n  @HostListener('pageSizeChanged', ['$event'])\r\n  public pageSizeChanged(event: any) {\r\n    const { pageIndex, pageSize } = event;\r\n    const skip = 0;//(pageIndex - 1) * pageSize;\r\n    // this.bindingList.setPaginationInfo(skip, pageSize);\r\n    this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);\r\n  }\r\n\r\n  /**\r\n   * gridæ»å¨å è½½æ°æ®\r\n   * @param event event\r\n   */\r\n  @HostListener('scrollYLoad', ['$event'])\r\n  public scrollY(event: any) {\r\n    const { pager: pageIndex, pageSize } = event;\r\n    const skip = (pageIndex - 1) * pageSize;\r\n    this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);\r\n  }\r\n  @HostListener('filterChanged', ['$event'])\r\n  public filterChanged(event: any) {\r\n    this.filters = event;\r\n  }\r\n  // #endregion\r\n  private checkIfChangeMatchBindingPath(change: Change): boolean {\r\n    let isMatch = false;\r\n    if (!change || !change.path) {\r\n      return isMatch;\r\n    }\r\n\r\n    const changePathArray = change.path;\r\n    if (!changePathArray) {\r\n      return isMatch;\r\n    }\r\n\r\n    if (!(this.bindingData) && !(this.bindingData.bindingPath)) {\r\n      return isMatch;\r\n    }\r\n    const bingdingPathArray = this.bindingData.bindingPath.split('/');\r\n    if (bingdingPathArray.length <= 0) {\r\n      return isMatch;\r\n    }\r\n\r\n    if (changePathArray.length === 0) { // ä¸»è¡¨\r\n      if (this.bindingData.bindingPath === '/') {\r\n        isMatch = true;\r\n      }\r\n    } else if (change.path.length === 1) {// ä¸»ä»è¡¨\r\n      if (bingdingPathArray.length === 2 && bingdingPathArray[1] === change.path[0]) {\r\n        isMatch = true;\r\n      }\r\n    } else if (change.path.length === 2) { // ä¸»ä»ä»è¡¨\r\n      if (bingdingPathArray.length === 3 && bingdingPathArray[1] === change.path[0] && bingdingPathArray[2] === change.path[1]) {\r\n        isMatch = true;\r\n      }\r\n    }\r\n\r\n    return isMatch;\r\n  }\r\n\r\n}\r\n","import { Directive, Input, Self, Host, Optional, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { MultiSelectComponent } from '@farris/ui-multi-select'\r\nimport { ViewModel, BindingObject } from '@farris/devkit';\r\n\r\n@Directive({\r\n  selector: '[multiSelectDataMapping]'\r\n})\r\nexport class MultiSelectDataMappingDirective implements OnInit {\r\n\r\n  @Input() dataSource: any;\r\n  @Input() idField: string;\r\n  @Input() textField: string;\r\n  @Input() valueField: string;\r\n  @Input() fjmField: string;\r\n  @Input() fjdField: string;\r\n  @Input() uiStateField: any;\r\n  @Input() selectedId: string;\r\n  @Output() selectedIdChanged = new EventEmitter<string>();\r\n  private originalDataSource: any;\r\n\r\n  constructor(\r\n    @Optional() private vm: ViewModel,\r\n    @Host() @Self() @Optional() private multiSelectComponent: MultiSelectComponent\r\n  ) {\r\n    this.vm.uiState.changes.subscribe(data => {\r\n      this.selectedId = data.value;\r\n    })\r\n  }\r\n  ngOnInit() {\r\n    this.multiSelectComponent.dataSource = [];\r\n    if (Array.isArray(this.dataSource)) {\r\n      this.multiSelectComponent.dataSource = this.dataSource;\r\n      this.originalDataSource = this.dataSource;\r\n    } else if (this.dataSource && this.dataSource.changes) {\r\n      this.dataSource.changes.subscribe((data: any) => {\r\n        if (data.type === 'Load') {\r\n          this.originalDataSource = data.value;\r\n          if (this.multiSelectComponent.isTree()) {\r\n            if (this.fjmField) {\r\n              // åçº§ç å è½½æ ç»æ\r\n              this.multiSelectComponent.dataSource = this.plainToTree(data.value, this.fjmField, 1);\r\n            } else if (this.fjdField) {\r\n              // ç¶èç¹å è½½æ ç»æ\r\n              this.multiSelectComponent.dataSource = this.buildTreeNodesByFjd(data.value, this.fjdField);\r\n            }\r\n            this.multiSelectComponent.selections = this.getTreeSelectionsById(this.selectedId, this.originalDataSource);\r\n          } else {\r\n            this.multiSelectComponent.dataSource = data.value;\r\n            this.multiSelectComponent.selections = this.getListSelectionsById(this.selectedId, this.multiSelectComponent.dataSource);\r\n          }\r\n        }\r\n      })\r\n    }\r\n    this.selectIdBindingToUIStateField();\r\n  }\r\n\r\n  private selectIdBindingToUIStateField() {\r\n    if (this.multiSelectComponent && this.multiSelectComponent.selectedIdChange) {\r\n      this.multiSelectComponent.selectedIdChange.subscribe(data => {\r\n        this.selectedIdChanged.emit(data);\r\n      })\r\n    }\r\n  }\r\n  /**\r\n   * \r\n   * @param data éè¦æ ¼å¼åçæ°æ®\r\n   */\r\n  private formatDataSource(data: any[], field: string) {\r\n    if (!data || !data.length) {\r\n      return [];\r\n    }\r\n    return data.map(item => {\r\n      const n = item['toJSON'] ? item.toJSON() : item;\r\n      return {\r\n        data: Object.assign({ ...n }, {\r\n          [`${this.idField}`]: item[this.idField],\r\n          [`${this.textField}`]: item[this.textField],\r\n          [`${this.valueField}`]: item[this.valueField],\r\n          [`${field}`]: item[field]\r\n        }),\r\n        children: []\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * æå¹³è¡ç»æçæ°æ®è½¬æ¢ææ å½¢ç»æ\r\n   * @param plainSource \r\n   * @param field \r\n   * @param layer \r\n   */\r\n  private plainToTree(plainSource: any[], field: string, layer: number) {\r\n    const treeSource = this.formatDataSource(plainSource, field);\r\n    if (!treeSource.length) {\r\n      return [];\r\n    }\r\n    if (!treeSource[0]['data'][field]) {\r\n      return [];\r\n    }\r\n    const parents = treeSource.filter(item => {\r\n      return item['data'][field]['layer'] === layer;\r\n    })\r\n    this.recursive(parents, treeSource, field, 1);\r\n    return parents;\r\n  }\r\n\r\n  /**\r\n   * éå½éåæ å½¢ç»æ\r\n   * @param parents \r\n   * @param treeSource \r\n   * @param field \r\n   * @param layer \r\n   */\r\n  private recursive(parents: any[], treeSource: any[], field: string, layer: number) {\r\n    parents.forEach(parent => {\r\n      const parentPath = parent['data'][field]['path'];\r\n      const parentLayer = parent['data'][field]['layer'];\r\n      if (parent['data'][field]['isDetail'] === false) {\r\n        treeSource.forEach(item => {\r\n          if (item && item['data'] && item['data'][field] && item['data'][field]['path']) {\r\n            const itemPath = item['data'][field]['path'];\r\n            const itemLayer = item['data'][field]['layer'];\r\n            let targetPath: string;\r\n            if (itemPath && itemPath.length > parentPath.length) {\r\n              targetPath = itemPath.substr(0, Number(layer) * 4);\r\n            }\r\n            if (parentPath === targetPath && parentLayer === itemLayer - 1) {\r\n              parent['children'].push(item);\r\n            }\r\n            if (item['data'][field]['isDetail'] === false && parentPath === targetPath) {\r\n              this.recursive([item], treeSource, field, Number(layer) + 1);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    })\r\n  }\r\n  /**\r\n     * \r\n     * @param ids éä¸­æ°æ®çid\r\n     * @param dataSource åå§æ°æ®\r\n     */\r\n  private getListSelectionsById(ids: any, dataSource: any) {\r\n    let result = [];\r\n    const _this = this;\r\n    if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {\r\n      const reusltObj = dataSource.find(item => {\r\n        return item && item[_this.idField] === ids;\r\n      });\r\n      if (reusltObj) {\r\n        result.push(reusltObj);\r\n      }\r\n    } else if (Array.isArray(ids)) {\r\n      if (dataSource) {\r\n        ids.forEach(id => {\r\n          const item = dataSource.find(item => item && item[_this.idField] === id);\r\n          if (item) {\r\n            result.push(item);\r\n          }\r\n        });\r\n        // dataSource.forEach(item => {\r\n        //   ids.forEach(id => {\r\n        //     if (item[_this.idField] === id) {\r\n        //       result.push(item);\r\n        //     }\r\n        //   })\r\n        // })\r\n      } else {\r\n        result = [];\r\n      }\r\n    } else {\r\n      result = [];\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param ids éä¸­æ°æ®çid\r\n   * @param dataSource åå§æ°æ®\r\n   */\r\n  private getTreeSelectionsById(ids: any, dataSource: any) {\r\n    let result = [];\r\n    const _this = this;\r\n    if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {\r\n      const reusltObj = dataSource.find(item => {\r\n        return item && item[_this.idField] === ids;\r\n      });\r\n      if (reusltObj) {\r\n        result.push(reusltObj);\r\n      }\r\n    } else if (Array.isArray(ids)) {\r\n      if (dataSource) {\r\n        ids.forEach(id => {\r\n          const item = dataSource.find(item => item && item[_this.idField] === id);\r\n          if (item) {\r\n            result.push(item);\r\n          }\r\n        });\r\n        // dataSource.forEach(item => {\r\n        //   ids.forEach(id => {\r\n        //     if (item.data[_this.idField] === id) {\r\n        //       result.push(item.data);\r\n        //     }\r\n        //   })\r\n        // })\r\n      } else {\r\n        result = [];\r\n      }\r\n    } else {\r\n      result = [];\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * æ ¹æ®ç¶èç¹åå§åæ ç»æ\r\n   * @param bindingObjects \r\n   */\r\n  private buildTreeNodesByFjd(bindingObjects: BindingObject[], field: string) {\r\n    const treeData = this.formatDataSource(bindingObjects, field);\r\n    treeData.forEach((item: any) => {\r\n      const parent = treeData.find((ele: any) => item.data[field].parentElement === ele.data[this.idField]);\r\n      if (parent) {\r\n        parent.children.push(item);\r\n      }\r\n    });\r\n    return treeData.filter((ele: any) => !ele.data[field].parentElement);\r\n  }\r\n}\r\n","import { Subscription } from 'rxjs';\r\nimport { Directive, OnInit, HostListener, Output, EventEmitter, OnDestroy, OnChanges, Input, ChangeDetectorRef } from '@angular/core';\r\nimport { BindingData, BindingList, ViewModel, Change } from '@farris/devkit';\r\nimport { ListViewComponent } from '@farris/ui-list-view';\r\n@Directive({\r\n  selector: '[farrisListviewBinding]'\r\n})\r\n\r\nexport class FarrisListViewBindingDirective implements OnInit, OnDestroy, OnChanges {\r\n  bindingDataChangeEvent: Subscription;\r\n\r\n  /**\r\n   * ä¸»é®\r\n   */\r\n  protected get primaryKey() {\r\n    return this.bindingList.primaryKey;\r\n  }\r\n\r\n  @Input() supportPaged: boolean = true;\r\n  /**\r\n   * éä¸­è¡åæ¢äºä»¶\r\n   */\r\n  @Output() selectedRowChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  constructor(\r\n    private bindingData: BindingData,\r\n    private viewModel: ViewModel,\r\n    private listview: ListViewComponent) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    // ç»å®æ°æ®\r\n    this.bindData();\r\n    this.registerBindingDataChangeEvent();\r\n\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.bindData();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.unRegisterBindingDataChangeEvent();\r\n  }\r\n\r\n  /**\r\n   * è·ååé¡µä¿¡æ¯\r\n   */\r\n  protected getPagingInfo() {\r\n    const bindingPath = this.viewModel.bindingPath;\r\n    const bindingData = this.viewModel.bindingData;\r\n    let pagingInfo = bindingData.pagingInfo;\r\n    if (bindingPath === '/') {\r\n      return pagingInfo;\r\n    } else {\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0).map(item => {\r\n        return item.substring(0, item.length - 1);\r\n      });\r\n      bindingPaths.forEach(path => {\r\n        pagingInfo = pagingInfo && pagingInfo[path];\r\n      });\r\n      return pagingInfo;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®listviewå±æ§\r\n   */\r\n  private setListViewPageProps() {\r\n    const data = this.bindingList.toJSON();\r\n    let skip = 0;\r\n    const { pageIndex = 1, pageSize = 0 } = this.getPagingInfo() || {};\r\n    let { total = 0 } = this.getPagingInfo() || {};\r\n    if (pageIndex > 0) {\r\n      skip = (pageIndex - 1) * pageSize;\r\n    }\r\n    if (pageSize === 0 && total === 0) {\r\n      total = data.length;\r\n    }\r\n    this.listview.supportPaging = this.supportPaged;\r\n    this.listview.pageIndex = pageIndex;\r\n    this.listview.pageSize = pageSize;\r\n    this.listview.total = total;\r\n    let currentPage = pageIndex;\r\n    const itemsPerPage = pageSize;\r\n    let totalItems = total;\r\n    if (pageSize === 0) {\r\n      // this.listview.supportPaging = false;\r\n      this.listview.pageIndex = pageIndex;\r\n      this.listview.total = total;\r\n      currentPage = 1;\r\n      totalItems = total;\r\n    }\r\n    if (this.listview.paginationOptions) {\r\n      this.listview.paginationOptions.itemsPerPage = itemsPerPage;\r\n      this.listview.paginationOptions.currentPage = currentPage;\r\n      this.listview.paginationOptions.pageList = this.listview.pageList;\r\n      this.listview.paginationOptions.totalItems = totalItems;\r\n    }\r\n    const listViewChangeDetectRef: ChangeDetectorRef = this.listview['cdr'] as ChangeDetectorRef;\r\n    if (listViewChangeDetectRef) {\r\n      listViewChangeDetectRef.detectChanges();\r\n    }\r\n    const paginationDirective = this.listview.pager && this.listview.pager['paginationDirective'];\r\n    if (paginationDirective && paginationDirective['service']) {\r\n      try {\r\n        paginationDirective['service'].instances[this.listview.pager.id] = { ...this.listview.paginationOptions };\r\n        paginationDirective['service'].setTotalItems(this.listview.pager.id, totalItems);\r\n        paginationDirective.changeDetectorRef.detectChanges();\r\n      } catch { }\r\n    }\r\n  }\r\n\r\n  /*\r\n   * è·åç»å®æ°æ®\r\n   */\r\n  protected get bindingList(): BindingList {\r\n    // æ ¹å®ä½\r\n    if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {\r\n      return this.bindingData.list;\r\n    }\r\n    // å­å®ä½\r\n    let bindingPath = this.viewModel.bindingPath.substr(1);\r\n    bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);\r\n    const paths = bindingPath.split('/');\r\n\r\n    const filteredPaths = paths.filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return this.bindingData.getValue(filteredPaths);\r\n  }\r\n\r\n  /* ç»å®æ°æ® */\r\n  private bindData() {\r\n    this.setListViewPageProps();\r\n    const data = this.bindingList.toArray();\r\n    this.listview.setData(data);\r\n  }\r\n\r\n  /*\r\n       * åå°éä¸­è¡åæ¢äºä»¶\r\n       * @description ç»ä¸åéæ¨¡å¼åå¤éæ¨¡å¼ä¸çè¡åæ¢äºä»¶\r\n       */\r\n  protected fireSelectedRowChange(selectedRowContext: any) {\r\n    this.selectedRowChange.emit(selectedRowContext);\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®BindingListçå½åè¡\r\n   * @param id å½åè¡åç \r\n   */\r\n  protected setSelectionIdToBindingData(id: string): void {\r\n    this.bindingList.setCurrentId(id, true);\r\n  }\r\n\r\n  /**\r\n   * æ°æ®æºåçåæ´\r\n   * @param change åæ´\r\n   */\r\n  protected onBindingDataChange(change: Change) {\r\n    this.bindData();\r\n    this.updateSelectedRow(change);\r\n  }\r\n  /**\r\n   * è®¾ç½®å½åè¡\r\n   * @param change åæ´\r\n   */\r\n  private updateSelectedRow(change?: Change) {\r\n    if (!this.bindingList || !this.bindingList.currentId) {\r\n      return;\r\n    }\r\n    if (this.viewModel && this.viewModel.frameContext.bindingData.rowSelectedEventSuspend === true) {\r\n      return;\r\n    }\r\n    const { id = null } = this.listview.clickItem || {};\r\n    const currentId = this.bindingList.currentId;\r\n    // gridå½åè¡ä¸bingingListå½åè¡ä¸è´ï¼æ é¡»åæ¢\r\n    if (id === currentId) {\r\n      return;\r\n    }\r\n    this.selectRow(this.bindingList.currentId);\r\n  }\r\n  protected selectRow(id: any) {\r\n    if (this.listview && typeof this.listview.selectRow === 'function') {\r\n      this.listview.selectRow(id);\r\n    }\r\n  }\r\n  /**\r\n   * æ³¨åbindingdataååäºä»¶\r\n   */\r\n  private registerBindingDataChangeEvent() {\r\n    this.bindingDataChangeEvent = this.bindingData.changes.subscribe((change: Change) => {\r\n      this.onBindingDataChange(change);\r\n    });\r\n  }\r\n  /**\r\n   * åæ¶bindingdataååè®¢é\r\n   */\r\n  private unRegisterBindingDataChangeEvent() {\r\n    this.bindingDataChangeEvent.unsubscribe();\r\n  }\r\n  private setChecks(ids: string[]) {\r\n    this.viewModel.uiState.setPropertyValue('ids', ids);\r\n  }\r\n  /* åæ¢è¡äºä»¶ */\r\n  @HostListener('listClick', ['$event'])\r\n  changeRow(event: any) {\r\n    const { index, data, checkChangeEvent } = event;\r\n    if (checkChangeEvent === false || !event.hasOwnProperty('checkChangeEvent')) {\r\n      if (data && Array.isArray(data) && data.length > 0) {\r\n        const id = data[0] && data[0][this.primaryKey] || null;\r\n        if (id) {\r\n          this.setSelectionIdToBindingData(id);\r\n        }\r\n      }\r\n      this.listview.activeIndex = index;\r\n      this.fireSelectedRowChange(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * åæ¢é¡µç è§¦åäºä»¶\r\n   * @param event åæ¢é¡µç åæ°\r\n   */\r\n  @HostListener('pageChanged', ['$event'])\r\n  public pageChangedHandler(event: any) {\r\n    let pageIndex = event.pageInfo.pageIndex;\r\n    const pageSize = event.pageInfo.pageSize;\r\n    if (pageIndex < 1) {\r\n      pageIndex = 1;\r\n    }\r\n    const skip = (pageIndex - 1) * pageSize;\r\n    this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);\r\n  }\r\n\r\n  /**\r\n   * è®¾ç½®æ¯é¡µæ°æ®æ¡æ°è§¦åäºä»¶\r\n   * @param event åæ¢é¡µç åæ°\r\n   */\r\n  @HostListener('pageSizeChanged', ['$event'])\r\n  public pageSizeChangedHandler(event: any) {\r\n    const { pageIndex, pageSize } = event.pageInfo;\r\n    const skip = (pageIndex - 1) * (+pageSize);\r\n    this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);\r\n  }\r\n  @HostListener('checkValuesChange', ['$event'])\r\n  public checkValuesChange(event: any) {\r\n    const ids = event;\r\n    this.setChecks(ids);\r\n  }\r\n}\r\n","import {\r\n  Directive, OnInit, OnChanges, OnDestroy, SimpleChanges, Input, HostListener, Optional,\r\n  EventEmitter, Output, ElementRef, ContentChildren, QueryList, Injector, NgZone,\r\n} from '@angular/core';\r\nimport { of, Subscription } from 'rxjs';\r\nimport {\r\n  BindingData, BindingList, Change, ChangeType,\r\n  FrameEventBus, UIState, Form, ViewModel, DataTypeInfo, DataPropInfo\r\n} from '@farris/devkit';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\n\r\nimport { isNumber } from 'lodash-es';\r\nimport { DateTimeHelperService } from '@farris/ui-common/date';\r\nimport { RuntimeStateService } from '@farris/ui-common';\r\nimport { DialogService } from '@farris/ui-dialog';\r\n\r\n@Directive({\r\n  selector: '[farris-datagrid-editable]'\r\n})\r\nexport class EditableDirective implements OnInit, OnChanges, OnDestroy {\r\n  /**\r\n   * gridæ¯å¦å¯ä»¥ç¼è¾\r\n   */\r\n  @Input('farris-datagrid-editable') gridEditable: boolean;\r\n  /**\r\n   * ç¼è¾æ¶åæ¶åç»\r\n   */\r\n  @Input('disableGroupOnEditing') disableGroupOnEditing: boolean = true;\r\n\r\n  private beginEditSubscription: Subscription;\r\n  private endEditSubscription: Subscription;\r\n  /**\r\n   * ä¸´æ¶è®°å½gridåç»å­æ®µ\r\n   */\r\n  private groupFields: any[] = [];\r\n  protected get bindingList(): BindingList {\r\n    // æ ¹å®ä½\r\n    if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {\r\n      return this.bindingData.list;\r\n    }\r\n    // å­å®ä½\r\n    let bindingPath = this.viewModel.bindingPath.substr(1);\r\n    bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);\r\n    const paths = bindingPath.split('/');\r\n\r\n    const filteredPaths = paths.filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return this.bindingData.getValue(filteredPaths);\r\n  }\r\n  constructor(\r\n    public bindingData: BindingData,\r\n    public viewModel: ViewModel,\r\n    public grid: DatagridComponent,\r\n    private dateService: DateTimeHelperService,\r\n    public injector: Injector,\r\n    private rts: RuntimeStateService,\r\n    public dialogSer: DialogService,\r\n    public ngZone: NgZone\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.apply();\r\n  }\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.apply();\r\n  }\r\n  ngOnDestroy() {\r\n    this.detach();\r\n  }\r\n  /**\r\n   * åºç¨å±æ§\r\n   */\r\n  private apply() {\r\n    if (!this.grid) {\r\n      return;\r\n    }\r\n    this.handleGroupStatus();\r\n    if (this.gridEditable) {\r\n      // if(!this.grid.remoteFilter){\r\n      //   this.grid.clearCondition();\r\n      // }\r\n      this.grid.editable = true;\r\n      this.grid.disableHeader(true);\r\n      this.handleBeginEditEvent();\r\n      this.handleAfterEditEvent();\r\n      this.handleEndEditEvent();\r\n    } else {\r\n      this.grid.editable = false;\r\n      this.grid.disableHeader(false);\r\n      if (this.grid && typeof this.grid.sort === 'function' && this.grid.sortName) {\r\n        this.grid.sort();\r\n      }\r\n      this.detach();\r\n    }\r\n  }\r\n  /**\r\n   * ç¼è¾æ¶åæ¶åç»\r\n   */\r\n  private handleGroupStatus() {\r\n    if (this.disableGroupOnEditing === false) {\r\n      return;\r\n    }\r\n    const groupField = this.grid && this.grid.groupField || null;\r\n    if (groupField) {\r\n      if (this.gridEditable) {\r\n        this.groupFields = [groupField];\r\n        this.grid.setGroupFields('');\r\n      }\r\n    } else {\r\n      if (this.groupFields && this.groupFields.length > 0) {\r\n        const groupField = this.groupFields.pop();\r\n        if (this.groupFields.length > 0) {\r\n          this.groupFields = [];\r\n        }\r\n        this.grid.setGroupFields(groupField);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * å¤çå¼å§ç¼è¾äºä»¶\r\n   */\r\n  private handleBeginEditEvent() {\r\n    this.beginEditSubscription = this.grid.beginEdit.subscribe((e: any) => {\r\n      if (!e) {\r\n        return;\r\n      }\r\n      const column = e.column;\r\n      if (column && column.editor) {\r\n        const editorInstance = e.editor.componentRef.instance;\r\n        if (!editorInstance || !editorInstance.instance) {\r\n          return;\r\n        }\r\n        let mapFields = editorInstance.instance.mapFields;\r\n        if (column.editor.type === 'lookup' || column.editor.type === 'PersonnelSelector'\r\n          || column.editor.type === 'OrganizationSelector' || column.editor.type === 'external-integration') {\r\n          const subject = editorInstance.instance.selectedData;\r\n          if (subject) {\r\n            subject.subscribe((data: any) => {\r\n              mapFields = editorInstance.instance.mapFields;\r\n              this.lookupMapping(data, mapFields);\r\n            });\r\n          }\r\n          const clearMappings = editorInstance.instance.clearMappings;\r\n          if (clearMappings) {\r\n            clearMappings.subscribe((result: any) => {\r\n              const mapFields = Object.assign({}, editorInstance.instance.mapFields);\r\n              const value = result && result.value || null;\r\n              const binding = editorInstance.column && editorInstance.column.field;\r\n              const lookupTextField = editorInstance.instance.textField;\r\n              const data = {};\r\n              if (binding) {\r\n                const textFieldMapping = mapFields[lookupTextField];\r\n                if (textFieldMapping) {\r\n                  mapFields[lookupTextField] = textFieldMapping.split(',').filter(item => item !== binding).join(',');\r\n                }\r\n                const parentPaths = this.getBindingPathArray();\r\n                this.bindingData.setValue(parentPaths.concat(binding.split('.')), value, true, true);\r\n              }\r\n              // this.setValue(data, lookupTextField.split('.'), value);\r\n              Object.keys(mapFields).forEach(field => {\r\n                this.setValue(data, field.split('.'), '');\r\n              });\r\n              this.lookupMapping(data, mapFields, true);\r\n            });\r\n          }\r\n        }\r\n\r\n        if (column.editor.type === 'combo-lookup') {\r\n          editorInstance.instance.valueChange.subscribe((e: any) => {\r\n            mapFields = editorInstance.instance.mapFields;\r\n            this.lookupMapping(e.selections || [], mapFields);\r\n          });\r\n        }\r\n        if (editorInstance.instance.clear) {\r\n          editorInstance.instance.clear.subscribe(() => {\r\n            this.lookupMapping(null, mapFields);\r\n          });\r\n        }\r\n        if (column.editor.type === 'combolist') {\r\n          if (mapFields) {\r\n            editorInstance.instance.valueChange.subscribe(e => {\r\n              const pathArr = this.getBindingPathArray();\r\n              this.viewModel.bindingData.setValue(pathArr.concat(mapFields.split('.')), editorInstance.instance.selectedValues, true, true);\r\n            })\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * å¤çç¼è¾äºä»¶\r\n   */\r\n  private handleAfterEditEvent() {\r\n    this.grid.afterEdit = (rowIndex, rowData, column, editor) => {\r\n      if (this.dialogSer.hasDialogOpened()) {\r\n        return of(false);\r\n      }\r\n      if (this.rts) {\r\n        // å¸®å©ç»ä»¶ææ¬åååå»æ¥è¯¢\r\n        if (this.rts.getFormState('lookup.pending')) {\r\n          return of(false);\r\n        }\r\n      }\r\n      // æ´æ°æ°æ®æº\r\n      if (!editor || !editor.formControl) {\r\n        return of(false);\r\n      }\r\n      return of(true);\r\n    };\r\n  }\r\n  /**\r\n   * å¤çç»æç¼è¾äºä»¶\r\n   */\r\n  private handleEndEditEvent() {\r\n    this.endEditSubscription = this.grid && this.grid.endEdit && this.grid.endEdit.subscribe((event: any) => {\r\n      const { value = undefined, column = undefined, rowData = {} } = event || {};\r\n      const primaryValue = rowData && rowData[this.grid.idField] || null;\r\n      this.updateBindingData(value, column, primaryValue);\r\n    });\r\n  }\r\n  /*\r\n   * ç»åè¡¨èµå¼ æç»formcontrolèµå¼\r\n   */\r\n  private updateBindingData(value: any, column: any, primaryValue?: any) {\r\n    if (!column) {\r\n      return;\r\n    }\r\n    const currentColumnType = column.dataType;\r\n    // åæ¶å¤æ­gridOptionçåå¯¹è±¡\r\n\r\n    const fieldPaths = column.field.split('.');\r\n    // æ¯å¦ä¸ºå¤§æ°\r\n    const isBigNumber = column && column.editor && column.editor.options && column.editor.options.bigNumber;\r\n    // å­å¨è¡ç¼è¾å¨\r\n    if (currentColumnType === 'date') {\r\n      let result;\r\n      if (value) {\r\n        result = this.dateService.formatTo(value, 'yyyy-MM-dd');\r\n      } else {\r\n        result = value;\r\n      }\r\n      this.updateBindingList(primaryValue, fieldPaths.join('.'), result);\r\n    } else if (currentColumnType === 'datetime') {\r\n      // if (!value) {\r\n      //   value = '0001-01-01T00:00:00';\r\n      // }\r\n      this.updateBindingList(primaryValue, fieldPaths.join('.'), value);\r\n    } else if (currentColumnType === 'number' && !isBigNumber) {\r\n      if (value === null || value === undefined) {\r\n        this.updateBindingList(primaryValue, fieldPaths.join('.'), null);\r\n      } else {\r\n        this.updateBindingList(primaryValue, fieldPaths.join('.'), Number(value));\r\n      }\r\n    } else {\r\n      this.updateBindingList(primaryValue, fieldPaths.join('.'), value);\r\n    }\r\n  }\r\n  private updateBindingList(primaryValue: any, propertyName: string, value: any) {\r\n    const viewModel = this.viewModel || null;\r\n    if (!viewModel || !propertyName) {\r\n      return;\r\n    }\r\n    // æ´æ°ä¸»è¡¨é¨åè¡çå­æ®µ\r\n    const propertyNames = propertyName.split('.').filter(item => item);\r\n    const bindingPath = this.getBindingPathArray();\r\n    // ååºæ¥çä¸å®æ¯bindingList\r\n    const list = this.bindingData.getValue(bindingPath) as BindingList;\r\n    // ä¿®æ¹çæ¯å½åè¡\r\n    if (list && primaryValue === list.currentItem.primaryKeyValue) {\r\n      const paths = bindingPath.concat(propertyNames);\r\n      this.bindingData.setValue(paths, value, true, true);\r\n      return;\r\n    }\r\n    const bindingObject = this.bindingList.findById(primaryValue);\r\n    if (!bindingObject) {\r\n      return;\r\n    }\r\n    if (propertyNames.length < 2) {\r\n      bindingObject.setValue(propertyName, value, true, true);\r\n    } else {\r\n      let targetBindingObject = null;\r\n      const fpaths = propertyNames.slice(0, propertyNames.length - 1);\r\n      const targetPropertyName = propertyNames[propertyNames.length - 1];\r\n      fpaths.forEach(prop => {\r\n        targetBindingObject = targetBindingObject && targetBindingObject[prop] || bindingObject[prop];\r\n      });\r\n      // todo:éè¦æ·»å å¼ååäºä»¶\r\n      targetBindingObject.setValue(targetPropertyName, value, true, true);\r\n    }\r\n  }\r\n  private detach() {\r\n    if (this.beginEditSubscription && typeof this.beginEditSubscription.unsubscribe === 'function') {\r\n      this.beginEditSubscription.unsubscribe();\r\n    }\r\n    if (this.endEditSubscription && typeof this.endEditSubscription.unsubscribe === 'function') {\r\n      this.endEditSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  //#region å¸®å©å­æ®µæ å°\r\n\r\n  private lookupMapping(helpData: any, mapFields: any, asClear: boolean = false) {\r\n    if (!mapFields) {\r\n      return;\r\n    }\r\n    // å³é­åæ´æ£æµ\r\n    const appContext = this.viewModel.frameContext.appContext;\r\n    appContext.changeDetectionController.detach();\r\n\r\n    const pathArr = this.getBindingPathArray();\r\n    let helpFields = Object.keys(mapFields);\r\n    const primaryInfo = this.getMapFieldsPrimaryKey(mapFields, pathArr);\r\n\r\n    let primaryKeys = primaryInfo && primaryInfo.map(item => item.primaryKey) || [];\r\n    const primaryFields = primaryInfo && primaryInfo.map(item => item.primaryField) || [];\r\n    // å»é\r\n    if (primaryKeys && primaryKeys.length > 0) {\r\n      primaryKeys = [...new Set(primaryKeys)];\r\n      helpFields = this.sortMapFieldKeys(helpFields, primaryKeys);\r\n    }\r\n\r\n    if (!helpData || asClear) {\r\n      helpFields.reverse();\r\n    }\r\n    helpFields.forEach((f: any) => {\r\n      let val: any = '';\r\n      if (helpData) {\r\n        if (helpData instanceof Array) {\r\n          val = helpData.map((h: any) => {\r\n            return this.getValue(f, h);\r\n          }).join(',');\r\n        } else {\r\n          val = this.getValue(f, helpData);\r\n        }\r\n      }\r\n\r\n      let mappings: any[] = mapFields[f].split(',');\r\n      const headMappings = mappings.filter(p => primaryFields.includes(p));\r\n      const leftMappings = mappings.filter(p => !primaryFields.includes(p));\r\n      if (!helpData) {\r\n        mappings = [].concat(leftMappings).concat(headMappings);\r\n      } else {\r\n        mappings = [].concat(headMappings).concat(leftMappings);\r\n      }\r\n      mappings.forEach((ff: any) => {\r\n        if (!helpData) {\r\n          this.viewModel.bindingData.clearValue(pathArr.concat(ff.split('.')), true, true);\r\n        } else {\r\n          this.viewModel.bindingData.setValue(pathArr.concat(ff.split('.')), val, true, true);\r\n        }\r\n      });\r\n    });\r\n\r\n    // éæ°æå¼åæ´æ£æµ\r\n    appContext.changeDetectionController.reattach();\r\n  }\r\n\r\n  private getValue(f: string, data: any) {\r\n    let val = '';\r\n    if (f.indexOf('.') === -1) {\r\n      val = data[f];\r\n    } else {\r\n      val = f.split('.').reduce((a, b) => {\r\n        return a[b];\r\n      }, data);\r\n    }\r\n\r\n    return val;\r\n  }\r\n\r\n  private getBindingPathArray(): any[] {\r\n    const path = this.viewModel.bindingPath;\r\n    if (path) {\r\n      return path.split('/').filter(n => n !== '');\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private isNumberValue(field, data) {\r\n    const currentVal = this.getValue(field, data);\r\n    return isNumber(currentVal);\r\n  }\r\n\r\n  //#endregion\r\n  /**\r\n   * \r\n   * @param mapFields  æ ¼å¼å½¢å¦ï¼{id: \"assoField.assoField\", code: \"assoField.assoField_Code\", name: \"assoField.assoField_Name\"} æè {id:'vid',code:'code',name:'name'}\r\n   */\r\n  private getMapFieldsPrimaryKey(mapFields: any, bindingPaths: string[]): Array<{ primaryKey: string, primaryField: string }> {\r\n    if (!mapFields || Object.keys(mapFields).length < 1) {\r\n      return null;\r\n    }\r\n    const results = [];\r\n    // let primaryField = null;\r\n    try {\r\n      const entityTypeInfo: DataTypeInfo = this.viewModel.frameContext.repository.entityTypeInfo;\r\n      Object.keys(mapFields).forEach((key: string) => {\r\n        const mapField = mapFields[key];\r\n        if (mapField && typeof mapField === 'string') {\r\n          const mappings = mapField.split(',').filter(p => p);\r\n          mappings.forEach((item: string) => {\r\n            let paths = item.split('.');\r\n            if (bindingPaths && bindingPaths.length > 0) {\r\n              paths = bindingPaths.concat(paths);\r\n            }\r\n            const propInfo: DataPropInfo = entityTypeInfo.getPropInfoByPath(paths);\r\n            if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.primary === true) {\r\n              results.push({\r\n                primaryKey: key,\r\n                primaryField: item\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    return results;\r\n  }\r\n  private setValue(target: object, paths: string[], value: any) {\r\n    if (target) {\r\n      if (paths.length <= 1) {\r\n        target[paths[0]] = value;\r\n      } else {\r\n        paths.slice(0, -1).reduce((prev, path) => {\r\n          if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {\r\n            prev[path] = {};\r\n          }\r\n          return prev[path];\r\n        }, target)[paths[paths.length - 1]] = value;\r\n      }\r\n    }\r\n  }\r\n  private sortMapFieldKeys(keys: string[], primaryKeys: string[]): string[] {\r\n    if (!primaryKeys || primaryKeys.length < 1 || !keys || keys.length < 1) {\r\n      return keys;\r\n    }\r\n    // è¿æ»¤åºéä¸»é®æ å°å­æ®µ\r\n    keys = keys.filter(p => !primaryKeys.includes(p));\r\n    return [].concat(primaryKeys).concat(keys);\r\n  }\r\n}\r\n","import { AppContext } from '@farris/devkit';\r\nimport { Subject } from 'rxjs';\r\nimport { OnDestroy } from '@angular/core';\r\n\r\nabstract class AbstractEndEdit implements OnDestroy {\r\n  private messagePipe: Subject<any>;\r\n  constructor(protected appContext: AppContext) {\r\n    this.messagePipe = this.appContext && this.appContext.messagePipe;\r\n    if (this.messagePipe) {\r\n      this.messagePipe.subscribe((message: any) => {\r\n        if (message && message.type === 'endEdit') {\r\n          this.endEdit(message);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n    // if (this.messagePipe) {\r\n    //   this.messagePipe.unsubscribe();\r\n    // }\r\n  }\r\n  public abstract endEdit(message: any);\r\n}\r\nexport { AbstractEndEdit };\r\n","import { Directive, ElementRef, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { AppContext } from '@farris/devkit';\r\nimport { AbstractEndEdit } from './abstract_end_edit';\r\n\r\n@Directive({\r\n  selector: '[input-end-edit]'\r\n})\r\nclass InputEndEditDirective extends AbstractEndEdit implements OnInit {\r\n  private nativeElement: any;\r\n  constructor(protected appContext: AppContext, private elementRef: ElementRef) {\r\n    super(appContext);\r\n  }\r\n  ngOnInit(): void {\r\n    if (this.elementRef) {\r\n      this.nativeElement = this.elementRef.nativeElement;\r\n    }\r\n  }\r\n  /**\r\n   * ç»æç¼è¾\r\n   * @param message æ¶æ¯\r\n   */\r\n  public endEdit(message: any) {\r\n    if (this.nativeElement) {\r\n      const parent: any = this.nativeElement.parentNode || this.nativeElement.parentElement;\r\n      const inputs: Array<any> = parent && Array.from(parent.getElementsByTagName('input')) || [];\r\n      if (inputs && inputs.length > 0) {\r\n        inputs.forEach(input => {\r\n          if (input && typeof (input.blur) === 'function') {\r\n            input.blur();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\nexport { InputEndEditDirective };\r\n","import { Directive } from '@angular/core';\r\nimport { AppContext } from '@farris/devkit';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\nimport { AbstractEndEdit } from './abstract_end_edit';\r\n\r\n@Directive({\r\n  selector: '[farris-grid-end-edit]'\r\n})\r\nclass FarrisDataGridEndEditDirective extends AbstractEndEdit {\r\n  constructor(protected appContext: AppContext, private datagrid: DatagridComponent) {\r\n    super(appContext);\r\n  }\r\n  /**\r\n   * ç»æç¼è¾\r\n   * @param message message\r\n   */\r\n  public endEdit(message: any) {\r\n    if (this.datagrid && typeof this.datagrid.endCellEdit === 'function') {\r\n      this.datagrid.endCellEdit();\r\n    }\r\n  }\r\n}\r\nexport { FarrisDataGridEndEditDirective };\r\n","import { AppContext } from '@farris/devkit';\r\nimport { HtmlEditorComponent } from '@farris/ui-html-editor';\r\nimport { AbstractEndEdit } from './abstract_end_edit';\r\nimport { Directive } from '@angular/core';\r\n@Directive({\r\n  selector: '[html-editor-end-edit]'\r\n})\r\nclass HtmlEditorEndEditDirective extends AbstractEndEdit {\r\n  constructor(protected appContext: AppContext, private editor: HtmlEditorComponent) {\r\n    super(appContext);\r\n  }\r\n  public endEdit(message: any) {\r\n    if (this.editor && typeof this.editor.endEdit === 'function') {\r\n      this.editor.endEdit();\r\n    }\r\n  }\r\n\r\n}\r\nexport { HtmlEditorEndEditDirective };\r\n","import { Directive } from '@angular/core';\r\nimport { AppContext } from '@farris/devkit';\r\nimport { GridComponent } from '@progress/kendo-angular-grid';\r\nimport { AbstractEndEdit } from './abstract_end_edit';\r\n\r\n@Directive({\r\n  selector: '[kendo-grid-end-edit]'\r\n})\r\nclass KendoGridEndEditDirective extends AbstractEndEdit {\r\n  constructor(protected appContext: AppContext, private grid: GridComponent) {\r\n    super(appContext);\r\n  }\r\n  public endEdit(message: any) {\r\n    if (this.grid && typeof this.grid.closeCell === 'function') {\r\n      this.grid.closeCell();\r\n    }\r\n  }\r\n}\r\nexport { KendoGridEndEditDirective };\r\n","import { Directive, Input } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ViewModel } from '@farris/devkit';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\n\r\n\r\n@Directive({\r\n  selector: \"[farris-remote-summary-command]\"\r\n})\r\nexport class FarrisDataGridRemoteSummaryDirective {\r\n  /**\r\n   * æå¡å¨ç«¯åè®¡å½ä»¤åç§°\r\n   */\r\n  @Input('farris-remote-summary-command') remoteSummaryCommand: string;\r\n\r\n  constructor(public viewModel: ViewModel, public grid: DatagridComponent) {\r\n    const appContext = this.viewModel.frameContext.getFormAppContext();\r\n    if (appContext && appContext.hasOwnProperty('messagePipe')) {\r\n      appContext.messagePipe.subscribe((message: any) => {\r\n        const messageType = message && message.type || null;\r\n        // æ¥è¯¢äºä»¶\r\n        if (messageType === 'query') {\r\n          if (this.remoteSummaryCommand && this.grid.footerDataFrom === 'server') {\r\n            const paths = this.remoteSummaryCommand.split('.');\r\n            let func = null;\r\n            paths.forEach(path => {\r\n              func = func && func[path] || this[path];\r\n            });\r\n            if (typeof func === 'function') {\r\n              func().subscribe(result => {\r\n                this.grid.footerData = result;\r\n              });\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * æ§è¡å½ä»¤\r\n   * @param commandName å½ä»¤åç§°\r\n   * @param frameId frameId\r\n   */\r\n  private execute(commandName: string, frameId?: string): Observable<any> {\r\n    if (!commandName || commandName === '' || commandName === 'undefined') {\r\n      return;\r\n    }\r\n    let viewModel = this.viewModel;\r\n    if (frameId) {\r\n      const targetContext = viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);\r\n      viewModel = targetContext.viewModel;\r\n    }\r\n    return viewModel[commandName]();\r\n  }\r\n\r\n}\r\n","import { Directive, Input, Renderer2, Injector, OnInit, ElementRef } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Directive({\r\n    selector: '[farris-set-focus]'\r\n})\r\nexport class FarrisSetFocusDirective implements OnInit {\r\n\r\n    @Input() set focusState(value: boolean) {\r\n        this._state.next(value);\r\n    }\r\n    private selfEl: HTMLElement\r\n    private _state: BehaviorSubject<any> = new BehaviorSubject({});\r\n\r\n    constructor(\r\n        private rd: Renderer2,\r\n        private injector: Injector,\r\n        private el: ElementRef\r\n    ) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.selfEl = this.el.nativeElement;\r\n        this._state.subscribe(data => {\r\n            if (data === false && this.selfEl) {\r\n                if (this.selfEl.nodeName.toLowerCase() === 'farris-html-editor') {\r\n                    this.setHtmlEditorFocus();\r\n                } else {\r\n                    this.setFocus();\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * è®¾ç½®ä¸è¬è¾å¥æ¡çé»è®¤ç¦ç¹\r\n     */\r\n    setFocus() {\r\n        const input = this.selfEl.querySelectorAll('input');\r\n        if (input.length) {\r\n            input[0].focus()\r\n        } else {\r\n            this.selfEl.focus();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * è®¾ç½®htmlç¼è¾å¨çé»è®¤ç¦ç¹  æ»æ¯å¨ææ¬æå\r\n     */\r\n    setHtmlEditorFocus() {\r\n        // å¯ææ¬ç¼è¾å¨ä¸æ¯input\r\n        const ediotrArea = this.selfEl.querySelector('div[contenteditable=\"true\"]');\r\n        //åå»ºrange  å­å¨æµè§å¨å¼å®¹æ§é®é¢\r\n        const range = window.getSelection();\r\n        //range éæ©objä¸ææå­åå®¹\r\n        range.selectAllChildren(ediotrArea);\r\n        //åæ ç§»è³æå\r\n        range.collapseToEnd();\r\n    }\r\n}","import { Directive, OnInit, OnChanges, SimpleChanges, Input, Injector, Optional } from '@angular/core';\r\nimport { BindingData, BindingList, FrameContext, Change, ChangeType } from '@farris/devkit';\r\nimport { UploadFile, FFilePreviewComponent, UploadAndPreviewComponent } from '@farris/extend-file-upload';\r\n\r\n/**\r\n * æ è¡¨æ ¼ç»å®æä»¤\r\n */\r\n@Directive({\r\n  selector: '[farrisFilePreviewBinding]'\r\n})\r\nclass FarrisFilePreviewBindingDirective implements OnInit, OnChanges {\r\n\r\n  @Input('extendFileInfo')\r\n  public extendFileInfo: { key: string, path: any }[];\r\n  /**\r\n   * æä»¶idå­æ®µè·¯å¾\r\n   */\r\n  @Input('farrisFileIdKey')\r\n  public fileIdKey: string;\r\n  /**\r\n   * æåºå­æ®µ\r\n   */\r\n  @Input('farrisFileSortOrderKey')\r\n  public fileSortOrderKey: string;\r\n  /**\r\n   * æä»¶nameå­æ®µè·¯å¾\r\n   */\r\n  @Input('farrisFileNameKey')\r\n  public fileNameKey: string;\r\n\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  /**\r\n   * ç»å®æ°æ®åè¡¨\r\n   */\r\n  private get bindingList(): BindingList {\r\n    return this.bindingData.getList();\r\n  }\r\n\r\n  /**\r\n   * æé å½æ°\r\n   */\r\n  constructor(\r\n    @Optional() private previewComponent: FFilePreviewComponent,\r\n    private frameContext: FrameContext,\r\n    @Optional() private uploadAndPreviewComponent: UploadAndPreviewComponent,\r\n    @Optional() private injector: Injector\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * æä»¤åå§å\r\n   */\r\n  ngOnInit() {\r\n    this.bindData();\r\n    this.uploadAndPreviewComponent.orderField = 'fileSortOrder';\r\n    this.bindingData.changes.subscribe((change: Change) => {\r\n      if (change.type === ChangeType.Load\r\n        || change.type === ChangeType.Append\r\n        || change.type === ChangeType.Remove\r\n      ) {\r\n        this.bindData();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * æä»¤è¾å¥åæ´\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n  }\r\n\r\n\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private bindData() {\r\n    const fileInfos = this.getFileInfos();\r\n    if (this.componentRef) {\r\n      this.componentRef.fileInfos = fileInfos;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è·åéä»¶ä¿¡æ¯åè¡¨\r\n   */\r\n  private getFileInfos(): UploadFile[] {\r\n    const listData = this.bindingList.toJSON();\r\n    const idKey = this.bindingList.primaryKey;\r\n    const fileInfos: UploadFile[] = [];\r\n\r\n    listData.forEach((itemData: any) => {\r\n      const id = this.getValueByPath(itemData, idKey);\r\n      const fileId = this.getValueByPath(itemData, this.fileIdKey);\r\n      const fileName = this.getValueByPath(itemData, this.fileNameKey);\r\n      const fileSize = this.getValueByPath(itemData, this.fileSizeKey);\r\n      const fileCreateTime = this.getValueByPath(itemData, this.fileCreateTimeKey);\r\n\r\n      const fileInfo: any = {\r\n        id: fileId,\r\n        name: fileName,\r\n        size: fileSize,\r\n        createTime: fileCreateTime,\r\n        originalData: itemData,\r\n        extend: {\r\n          metadataId: fileId\r\n        }\r\n      };\r\n      if (this.extendFileInfo && Array.isArray(this.extendFileInfo) && this.extendFileInfo.length > 0) {\r\n        this.extendFileInfo.forEach(item => {\r\n          fileInfo[item.key] = this.getValueByPath(itemData, item.path);\r\n        });\r\n      }\r\n      if (this.fileSortOrderKey) {\r\n        const fileSortOrder = this.getValueByPath(itemData, this.fileSortOrderKey);\r\n        fileInfo.fileSortOrder = fileSortOrder;\r\n      }\r\n      fileInfos.push(fileInfo);\r\n    });\r\n\r\n    return fileInfos;\r\n  }\r\n\r\n  /**\r\n   * æ ¹æ®å­æ®µè·¯å¾è·åå¼\r\n   */\r\n  private getValueByPath(data: any, path: string): any {\r\n    const keys = path.split('.');\r\n    let currentValue = data;\r\n    keys.forEach((key: string) => {\r\n      currentValue = currentValue && currentValue[key];\r\n    });\r\n    return currentValue;\r\n  }\r\n  private getUdtPaths(): string[] {\r\n    const paths = this.fileIdKey.split('.');\r\n    paths.pop();\r\n    return paths;\r\n  }\r\n  private get fileSizeKey() {\r\n    const basePaths = this.getUdtPaths();\r\n    return basePaths.concat(['fileSize']).join('.');\r\n  }\r\n  private get fileCreateTimeKey() {\r\n    const basePaths = this.getUdtPaths();\r\n    return basePaths.concat(['fileCreateTime']).join('.');\r\n  }\r\n  private get componentRef() {\r\n    return this.previewComponent || this.uploadAndPreviewComponent || null;\r\n  }\r\n}\r\n\r\nexport { FarrisFilePreviewBindingDirective };\r\n","import { Directive, Injector, Input, OnInit, HostListener } from '@angular/core';\r\nimport { DiscussionEditorComponent } from '@farris/discussion-group';\r\nimport { ViewModel, UIStateObservableParam } from '@farris/devkit';\r\nimport { of, Observable, EMPTY } from 'rxjs';\r\nimport { tap, catchError } from 'rxjs/operators';\r\nconst KEY_UISTATE_REPLY_MESSAGE = 'DISCUSSION_REPLY_MESSAGE_INFO';\r\nconst KEY_MESSAGE_ON_COMMENT_ADD = 'onCommentAdd';\r\n\r\n@Directive({\r\n  selector: '[farris-discussion-editor-binding]'\r\n})\r\nexport class FarrisDiscussionEditorBindingDirective implements OnInit {\r\n\r\n  /**\r\n   * è·åç¨æ·å½ä»¤\r\n   */\r\n  @Input(\"userQueryCommand\") userQueryCommand: string;\r\n  /**\r\n   * æ·»å è¯è®ºå½ä»¤\r\n   */\r\n  @Input(\"addCommentCommand\") addCommentCommand: string;\r\n  /**\r\n   * æ¥è¯¢ææé¨é¨å½ä»¤\r\n   */\r\n  @Input(\"queryAllOrgsCommand\") queryAllOrgsCommand: string;\r\n  /**\r\n   * æ¥è¯¢å¸¸ç¨@ç¨æ·\r\n   */\r\n  @Input(\"queryFrequentAtUsersCommand\") queryFrequentAtUsersCommand: string;\r\n\r\n  constructor(public injector: Injector, public discussionEditorComponent: DiscussionEditorComponent, public viewModel: ViewModel) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.discussionEditorComponent.replyUser = this.viewModel.frameContext.root.viewModel.uiState[KEY_UISTATE_REPLY_MESSAGE] || {};\r\n    this.viewModel.frameContext.root.viewModel.uiState.changes.subscribe((change: UIStateObservableParam) => {\r\n      if (change.field === KEY_UISTATE_REPLY_MESSAGE) {\r\n        this.discussionEditorComponent.replyUser = this.viewModel.frameContext.root.viewModel.uiState[KEY_UISTATE_REPLY_MESSAGE] || {};\r\n      }\r\n    });\r\n    if (this.queryFrequentAtUsersCommand) {\r\n      this.queryFrequentAtUsers();\r\n    } else {\r\n      this.queryAtUsers();\r\n    }\r\n\r\n    this.queryAllOrgs();\r\n  }\r\n  /**\r\n   * æ¥è¯¢ææé¨é¨æ°æ®\r\n   */\r\n  private queryAllOrgs() {\r\n    this.execute(this.queryAllOrgsCommand).subscribe(result => {\r\n      if (!result) {\r\n        return;\r\n      }\r\n      this.discussionEditorComponent.sectionData = result;\r\n    });\r\n  }\r\n  /**\r\n   * è·å@ç¨æ·\r\n   */\r\n  private queryAtUsers() {\r\n    this.execute(this.userQueryCommand).subscribe(result => {\r\n      if (!result) {\r\n        return;\r\n      }\r\n      const { users = [] } = result;\r\n      this.discussionEditorComponent.personnels = users;\r\n    });\r\n  }\r\n  /**\r\n   * è·åå¸¸ç¨@ç¨æ·\r\n   */\r\n  private queryFrequentAtUsers() {\r\n    this.execute(this.queryFrequentAtUsersCommand).subscribe(result => {\r\n      if (!result) {\r\n        return;\r\n      }\r\n      this.discussionEditorComponent.personnels = result && result.users || [];\r\n    });\r\n  }\r\n  /**\r\n   * æäº¤æåæ¶è¯è®º\r\n   * @param event event\r\n   */\r\n  @HostListener('valueChange', ['$event'])\r\n  public pageChangedHandler(event: any) {\r\n    const { msgInfo = 0, text = '', visibility = 'ALL', parentId = null } = event || {};\r\n    if (msgInfo === 1) {\r\n      this.execute(this.addCommentCommand, { text, parentId, visibility }).pipe(\r\n        tap(() => {\r\n          this.viewModel.frameContext.appContext.messagePipe.next(KEY_MESSAGE_ON_COMMENT_ADD);\r\n        }),\r\n        catchError(e => EMPTY)\r\n      ).subscribe();\r\n    } else {\r\n      // åæ¶çæ¶ååæ¶ä¼å°åå¤ç¨æ·æ¸ç©º\r\n      this.viewModel.frameContext.root.viewModel.uiState[KEY_UISTATE_REPLY_MESSAGE] = {};\r\n      this.discussionEditorComponent.replyUser = {};\r\n    }\r\n  }\r\n  /**\r\n   * æ§è¡å½ä»¤\r\n   * @param commandName å½ä»¤åç§°\r\n   */\r\n  private execute(commandName: string, params?: any): Observable<any> {\r\n    if (!commandName || commandName === '' || commandName === 'undefined') {\r\n      return of(null);\r\n    }\r\n    if (typeof params === 'undefined') {\r\n      params = {};\r\n    }\r\n    const paths = commandName.split('.');\r\n    let func = null;\r\n    paths.forEach(path => {\r\n      func = func && func[path] || this[path];\r\n    });\r\n    if (typeof func === 'function') {\r\n      return func(params);\r\n    }\r\n    return of(null);\r\n  }\r\n}\r\n","import { Observable, of, EMPTY } from 'rxjs';\r\nimport { Directive, Input, Injector, OnInit, HostListener } from '@angular/core';\r\nimport { DiscussionListComponent, DiscussionListDirective } from '@farris/discussion-group';\r\nimport { ViewModel, Change, ChangeType } from '@farris/devkit';\r\nimport { tap, catchError } from 'rxjs/operators';\r\nconst KEY_UISTATE_REPLY_MESSAGE = 'DISCUSSION_REPLY_MESSAGE_INFO';\r\nconst KEY_MESSAGE_ON_COMMENT_ADD = 'onCommentAdd';\r\n@Directive({\r\n  selector: '[farris-discussion-list-binding]'\r\n})\r\nexport class FarrisDiscussionListBindingDirective implements OnInit {\r\n  /**\r\n   * è·åç¨æ·å½ä»¤\r\n  */\r\n  @Input(\"commentsQueryCommand\") commentsQueryCommand: string;\r\n  constructor(public injector: Injector, public discussionListComponent: DiscussionListComponent, public viewModel: ViewModel, public discussionListDirective: DiscussionListDirective) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    this.viewModel.frameContext.appContext.messagePipe.subscribe((message: any) => {\r\n      if (message === KEY_MESSAGE_ON_COMMENT_ADD) {\r\n        this.queryComments();\r\n      }\r\n    });\r\n    this.viewModel.bindingData.changes.subscribe((change: Change) => {\r\n      if (change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged) {\r\n        this.queryComments();\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * æ¥è¯¢è¯è®º\r\n   */\r\n  private queryComments(pageIndex?: number, pageSize?: number) {\r\n    if (typeof pageIndex === 'undefined') {\r\n      pageIndex = (this.discussionListComponent.pageIndex - 1) || 0;\r\n    }\r\n    if (typeof pageSize === 'undefined') {\r\n      if (this.discussionListComponent.supportPaging) {\r\n        pageSize = this.discussionListComponent.pageSize;\r\n      } else {\r\n        // ä¸åé¡µï¼pageSizeååç«¯çº¦å®ä¼ æå¤§æ°\r\n        pageSize = 10000;\r\n      }\r\n    }\r\n    this.execute(this.commentsQueryCommand, { pageIndex, pageSize }).pipe(\r\n      catchError(e => EMPTY)\r\n    ).subscribe(result => {\r\n      if (!result) {\r\n        return;\r\n      }\r\n      const { comments = [], pageIndex = 0, pageSize = 10, totalCount = 0 } = result;\r\n      this.discussionListComponent.pageIndex = parseInt(pageIndex) + 1;\r\n      if (this.discussionListComponent.supportPaging) {\r\n        this.discussionListComponent.pageSize = pageSize;\r\n      }\r\n      this.discussionListComponent.total = totalCount;\r\n      this.discussionListDirective.discussionListData = result;\r\n    });\r\n  }\r\n  /**\r\n   * åå¤æ¶æ¯\r\n   * @param event event\r\n   */\r\n  @HostListener('replyMessage', ['$event'])\r\n  public replyMessagedHandler(event: any) {\r\n    this.viewModel.frameContext.root.viewModel.uiState.setPropertyValue(KEY_UISTATE_REPLY_MESSAGE, event);\r\n  }\r\n  /**\r\n   * åæ¢é¡µç \r\n   * @param event event\r\n   */\r\n  @HostListener('pageChanged', ['$event'])\r\n  public pageChangedHandler(event: any) {\r\n    const { pageIndex = 1, pageSize = 10 } = event.pageInfo || {};\r\n    this.queryComments(pageIndex - 1, pageSize);\r\n  }\r\n  /**\r\n   * æ§è¡å½ä»¤\r\n   * @param commandName å½ä»¤åç§°\r\n   */\r\n  private execute(commandName: string, params?: any): Observable<any> {\r\n    if (!commandName || commandName === '' || commandName === 'undefined') {\r\n      return of(null);\r\n    }\r\n    const paths = commandName.split('.');\r\n    let func = null;\r\n    paths.forEach(path => {\r\n      func = func && func[path] || this[path];\r\n    });\r\n    if (typeof func === 'function') {\r\n      return func(params);\r\n    }\r\n    return of(null);\r\n  }\r\n}\r\n","/*******************************************************************************************************************\r\n *                                     FarrisPrimengTreeTableBindingDirectiveæä»¤è¯´æ                               *\r\n * *****************************************************************************************************************\r\n * \r\n * 1. ä¾èµprimengçæ¬: primeng:^9.0.0,primeicons:^4.0.0\r\n * \r\n * 2. ç±äºå¯ç¼è¾æ è¡¨æ æ³è§¦åç¼è¾ååæ ¼çå³é­äºä»¶onEditCompleteï¼å æ­¤å¯¹priemengçnode_modules\\primeng\\fesm5\\primeng-treetable.jsèæ¬ä½åºä¿®æ¹ï¼ \r\n *    æºç ä¿®æ¹å¦ä¸ï¼+è¡¨ç¤ºæ°å¢å çèæ¬è¯­å¥:\r\n * \r\n *  TreeTable.prototype.updateEditingCell = function (cell, data, field) { //+ åæ°å¢å dataåfield\r\n *      this.editingCell = cell;\r\n *      this.editingCellData = data; //+\r\n *      this.editingCellField = field; //+\r\n *      this.bindDocumentEditListener();\r\n *  };\r\n * \r\n *  TreeTable.prototype.bindDocumentEditListener = function () {\r\n *       var _this = this;\r\n *       if (!this.documentEditListener) {\r\n *           this.documentEditListener = function (event) {\r\n *               if (_this.editingCell && !_this.editingCellClick && _this.isEditingCellValid()) {\r\n *                   domhandler_1.DomHandler.removeClass(_this.editingCell, 'ui-editing-cell');\r\n *                   _this.editingCell = null;\r\n *                   _this.onEditComplete.emit({ field: _this.editingCellField, data: _this.editingCellData });//+\r\n *                   _this.unbindDocumentEditListener();\r\n *               }\r\n *               _this.editingCellClick = false;\r\n *           };\r\n *           document.addEventListener('click', this.documentEditListener);\r\n *       }\r\n *   };\r\n * \r\n *  TreeTable.prototype.bindDocumentEditListener = function () {\r\n *       var _this = this;\r\n *       if (!this.documentEditListener) {\r\n *           this.documentEditListener = function (event) {\r\n *               if (_this.editingCell && !_this.editingCellClick && _this.isEditingCellValid()) {\r\n *                   domhandler_1.DomHandler.removeClass(_this.editingCell, 'ui-editing-cell');\r\n *                   _this.editingCell = null;\r\n *                   _this.onEditComplete.emit({ field: _this.editingCellField, data: _this.editingCellData });//+\r\n *                   _this.unbindDocumentEditListener();\r\n *               }\r\n *               _this.editingCellClick = false;\r\n *           };\r\n *           document.addEventListener('click', this.documentEditListener);\r\n *       }\r\n *   };\r\n * \r\n *  TTEditableColumn.prototype.openCell = function () {\r\n *       var _this = this;\r\n *        this.tt.updateEditingCell(this.el.nativeElement,this.data, this.field);//+\r\n *        domhandler_1.DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');\r\n *        this.tt.onEditInit.emit({ field: this.field, data: this.data });\r\n *        this.zone.runOutsideAngular(function () {\r\n *            setTimeout(function () {\r\n *                var focusable = domhandler_1.DomHandler.findSingle(_this.el.nativeElement, 'input, textarea');\r\n *                if (focusable) {\r\n *                     focusable.focus();\r\n *                 }\r\n *             }, 50);\r\n *        });\r\n *   };\r\n * \r\n *  TTEditableColumn.prototype.onClick = function (event) {\r\n *        if (this.isEnabled()) {\r\n *            this.tt.editingCellClick = true;\r\n *            if (this.tt.editingCell) {\r\n *                if (this.tt.editingCell !== this.el.nativeElement) {\r\n *                    if (!this.tt.isEditingCellValid()) {\r\n *                        return;\r\n *                    }\r\n *                    this.tt.onEditComplete.emit({ field: this.tt.oldField, data: this.tt.oldDdata });//+\r\n *                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');\r\n *                    this.openCell();\r\n *                }\r\n *            }\r\n *            else {\r\n *                this.openCell();\r\n *            }\r\n *        }\r\n *  };\r\n * \r\n *  TTEditableColumn.prototype.openCell = function () {\r\n *         var _this = this;\r\n *         this.tt.updateEditingCell(this.el.nativeElement,this.data, this.field);\r\n *         DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');\r\n *         this.tt.onEditInit.emit({ field: this.field, data: this.data });\r\n *         this.tt.oldField= this.field; //+\r\n *         this.tt.oldDdata=this.data;  //+\r\n *         this.zone.runOutsideAngular(function () {\r\n *             setTimeout(function () {\r\n *                 var focusable = DomHandler.findSingle(_this.el.nativeElement, 'input, textarea');\r\n *                if (focusable) {\r\n *                     focusable.focus();\r\n *                 }\r\n *           }, 50);\r\n *       });\r\n *   };\r\n * \r\n * 3. HTMLæ¨¡æ¿\r\n * (1) ä¸å¯ç¨å¤è¡¨å¤´\r\n *      <p-treeTable [columns]=\"treeGridColumns\" farrisPrimengTreeTableBinding farrisHierarchyInfoKey=\"layerField\" [resizableColumns]=\"true\" farrisPrimengTreeTableIdField=\"id\">\r\n *             <ng-template pTemplate=\"header\" let-columns>\r\n *                 <tr>\r\n *                     <th *ngFor=\"let col of columns\" ttResizableColumn>\r\n *                         {{col.header}}\r\n *                     </th>\r\n *                 </tr>\r\n *             </ng-template>\r\n *             <ng-template pTemplate=\"body\" let-rowNode let-rowData=\"rowData\" let-columns=\"columns\">\r\n *                 <tr>\r\n *                     <td *ngFor=\"let col of columns; let i = index\" ttEditableColumn [ttEditableColumn]=\"rowData\"\r\n *                         [ttEditableColumnField]=\"col.field\">\r\n *                         <p-treeTableToggler [rowNode]=\"rowNode\" *ngIf=\"i === 0\"></p-treeTableToggler>\r\n *                         <p-treeTableCellEditor>\r\n *                             <ng-template pTemplate=\"input\">\r\n *                                  <!-- æ§ä»¶å¨æçæåºåï¼æ­¤å¤å¯æ¾ç½®æ§ä»¶å¨æçæç»ä»¶ï¼çæè§åå¦ä¸ï¼\r\n *                                            1. å­ç¬¦ä¸²ç±»åï¼ææ¬æ§ä»¶\r\n *                                            2. æ°å­ç±»åï¼æ°å­æ§ä»¶\r\n *                                            3. å¸å°ç±»åï¼å¤éæ¡æ§ä»¶\r\n *                                            4. æ¥ææ¶é´ç±»åï¼æ¥ææ¶é´æ§ä»¶\r\n *                                            5. æä¸¾ç±»åï¼ä¸ææ¡æ§ä»¶\r\n *                                            6. å¸®å©ç±»åï¼å¸®å©æ§ä»¶-->\r\n *                             </ng-template>\r\n *                             <ng-template pTemplate=\"output\">{{ col | formatCellData : rowData }}</ng-template>\r\n *                         </p-treeTableCellEditor>\r\n *                     </td>\r\n *                 </tr>\r\n *             </ng-template>\r\n *     </p-treeTable>\r\n * \r\n * (2) å¯ç¨å¤è¡¨å¤´\r\n * \r\n *  <p-treeTable [columns]=\"treeGridColumns\" farrisPrimengTreeTableBinding farrisHierarchyInfoKey=\"layerField\" [resizableColumns]=\"true\" farrisPrimengTreeTableIdField=\"id\">\r\n *             <ng-template pTemplate=\"header\" let-columns>\r\n *                  <tr *ngFor=\"let columnHeader of treeGridColumnHeaders\">\r\n *                      <th *ngFor=\"let col of columnHeader\" ttResizableColumn [attr.rowspan]=\"col.rowspan\" [attr.colspan]=\"col.colspan\">\r\n *                          {{col.header}}\r\n *                      </th>\r\n *                  </tr>\r\n *             </ng-template>\r\n *             <ng-template pTemplate=\"body\" let-rowNode let-rowData=\"rowData\" let-columns=\"columns\">\r\n *                 <tr>\r\n *                     <td *ngFor=\"let col of columns; let i = index\" ttEditableColumn [ttEditableColumn]=\"rowData\"\r\n *                         [ttEditableColumnField]=\"col.field\">\r\n *                         <p-treeTableToggler [rowNode]=\"rowNode\" *ngIf=\"i === 0\"></p-treeTableToggler>\r\n *                         <p-treeTableCellEditor>\r\n *                             <ng-template pTemplate=\"input\">\r\n *                                  <!-- æ§ä»¶å¨æçæåºåï¼æ­¤å¤å¯æ¾ç½®æ§ä»¶å¨æçæç»ä»¶ï¼çæè§åå¦ä¸ï¼\r\n *                                            1. å­ç¬¦ä¸²ç±»åï¼ææ¬æ§ä»¶\r\n *                                            2. æ°å­ç±»åï¼æ°å­æ§ä»¶\r\n *                                            3. å¸å°ç±»åï¼å¤éæ¡æ§ä»¶\r\n *                                            4. æ¥ææ¶é´ç±»åï¼æ¥ææ¶é´æ§ä»¶\r\n *                                            5. æä¸¾ç±»åï¼ä¸ææ¡æ§ä»¶\r\n *                                            6. å¸®å©ç±»åï¼å¸®å©æ§ä»¶-->\r\n *                             </ng-template>\r\n *                             <ng-template pTemplate=\"output\">{{ col | formatCellData : rowData }}</ng-template>\r\n *                         </p-treeTableCellEditor>\r\n *                     </td>\r\n *                 </tr>\r\n *             </ng-template>\r\n *  </p-treeTable>\r\n * \r\n * å¤è¡¨å¤´æ°æ®æ ¼å¼ï¼\r\n *  this.treeGridColumnHeaders=[\r\n *     [{ header: 'Brand',rowspan:3, colspan:1},{ header: 'Sale Rate',rowspan:1, colspan:4}],\r\n *     [{ header: 'Sales',rowspan:1, colspan:2},{ header: 'Profits',rowspan:1, colspan:2}],\r\n *     [{ header: 'Last Year',rowspan:1, colspan:1},{ header: 'This Year',rowspan:1, colspan:1},{ header: 'Last Year',rowspan:1, colspan:1},{ header: 'This Year',rowspan:1, colspan:1}],\r\n *  ]\r\n\r\n **********************************************************************************************************************/\r\n\r\nimport { Directive, OnInit, OnChanges, SimpleChanges, Input, HostListener, Output, EventEmitter, Type } from '@angular/core';\r\nimport { BindingData, BindingList, FrameContext, Change, ChangeType, EntityCollection, EntityList, Entity } from '@farris/devkit';\r\nimport { TreeTable } from 'primeng/treetable';\r\nimport { TreeNode } from 'primeng/api';\r\nimport { TreeNodeBuilderFactory } from '../tree_table_node_builder/tree_node_builder_factory';\r\nimport { DateTimeHelperService } from '@farris/ui-common/date';\r\nconst PARENT_ELEMENT: string = \"parentElement\";\r\nconst PATH: string = \"path\";\r\nconst IS_DETAIL: string = 'isDetail';\r\n\r\nexport interface FarrisPrimengTreeNode extends TreeNode {\r\n  id?: string;\r\n}\r\n\r\n@Directive({\r\n  selector: '[farrisPrimengTreeTableBinding]'\r\n})\r\nexport class FarrisPrimengTreeTableBindingDirective implements OnInit, OnChanges {\r\n  private selectedRowId = null;\r\n  private treeTableSelectedEvent = null;\r\n  /**\r\n   * åçº§ç ä¿¡æ¯å­æ®µï¼å±æ§å¯è½æä¸¤ç§æ ¼å¼çå¼ï¼åçº§ç å­æ®µï¼ä¸»è¡¨ï¼æä»è¡¨åç«¯codes/åçº§ç å­æ®µï¼å­è¡¨ï¼\r\n   */\r\n  @Input('farrisHierarchyInfoKey')\r\n  public hierarchyInfoKey: string;\r\n  @Input('columns')\r\n  public columns: any;\r\n  /**\r\n   * åç ï¼æ°æ®çå¯ä¸æ è¯\r\n   */\r\n  @Input('farrisPrimengTreeTableIdField')\r\n  public idField: string;\r\n\r\n  /**\r\n   * èç¹éæ©åæ´äºä»¶\r\n   */\r\n  @Output() nodeSelectChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  private oldTreeNodeMap: { [key: string]: FarrisPrimengTreeNode } = {};\r\n\r\n\r\n  /**\r\n   * åçº§ç çå­æ®µç¼å·ï¼ä»hierarchyInfoKeyå±æ§ä¸­è§£æè·å\r\n   */\r\n  private hierarchyInfoField: string;\r\n\r\n  /**\r\n   * ç»å®æ°æ®\r\n   */\r\n  private get bindingData(): BindingData {\r\n    return this.frameContext.bindingData;\r\n  }\r\n\r\n  /**\r\n   * ç»å®æ°æ®åè¡¨\r\n   */\r\n  private get bindingList(): BindingList {\r\n    return this.bindingData.getList();\r\n  }\r\n\r\n  private getHierarchyInfoField(): string {\r\n    let infos = this.hierarchyInfoKey.split('/');\r\n    return infos[infos.length - 1];\r\n  }\r\n\r\n  constructor(\r\n    private treeTable: TreeTable,\r\n    private frameContext: FrameContext,\r\n    private dateService: DateTimeHelperService\r\n  ) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //è§£æè·ååçº§ç å­æ®µç¼å·\r\n    this.hierarchyInfoField = this.getHierarchyInfoField();\r\n    // å°åçº§ç ä¿¡æ¯ä¿å­å°root-component\r\n    const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n    virtualRootFrameContext.setParam('hierarchyInfoKey', this.hierarchyInfoKey);\r\n    this.bindingData.changes.subscribe((change: Change) => {\r\n      this.bindData(change);\r\n      this.updateSelectedRow(change);\r\n    });\r\n    this.frameContext.viewModel.uiState.setPropertyValue('ids', []);\r\n  }\r\n\r\n  /**\r\n   * è·åæ åè¡¨ç»å®æ°æ®å¯¹åºçå®ä½æ°ç»\r\n   * @returns å®ä½æ°ç»\r\n   */\r\n  private getEntityArr(): Entity[] {\r\n    const entityCollection = this.frameContext.repository.entityCollection;\r\n    const bindingPath: string = this.frameContext.bindingData.bindingPath;\r\n    if (!bindingPath || bindingPath === '/') {\r\n      return entityCollection.toArray();\r\n    }\r\n    let bindingList: BindingList = this.frameContext.bindingData.list;\r\n    let bindingPathArr: string[] = bindingPath.split('/').filter(str => str);\r\n    let pathArray = [];\r\n    bindingPathArr.forEach((path: string) => {\r\n      pathArray.push(`${bindingList.primaryKey}:${bindingList.currentId}`);\r\n      pathArray.push(path);\r\n      bindingList = bindingList.currentItem[path];\r\n    });\r\n    return (entityCollection.getEntitiesByPath(pathArray) as EntityList<any>).toArray();\r\n  }\r\n  /**\r\n   * å°çå®é¡ºåºæ è®°å°å¯¹åºçå®ä½ä¸\r\n   * @param entityArr å®ä½æ°ç»\r\n   * @param treeNodes æ èç¹\r\n   */\r\n  private setActualIndex(entityArr: Entity[], treeNodes: TreeNode[]) {\r\n    if (entityArr.length < 1)\r\n      return;\r\n    // åå§ååºå·å¨å¹¶ä¾æ¬¡éåæ¯ä¸æ£µæ \r\n    let counter = { index: 0 };\r\n    const primaryKey: string = entityArr[0].primaryKey;\r\n    treeNodes.forEach((rootNode) => {\r\n      this.traverseTree(rootNode, counter, entityArr, primaryKey);\r\n    });\r\n  }\r\n  /**\r\n   * ååºéå½éåæ èç¹å¹¶å¨å¯¹åºå®ä½ä¸æ è®°åºå·\r\n   * @param treeNode æ èç¹\r\n   * @param counter åºå·å¨\r\n   * @param entityArr å®ä½æ°ç»\r\n   * @description\r\n   * å¨è¿è¡åç«¯æ ¡éªæ¶ï¼æç§Entityå¨æ°ç»ä¸­çä¸æ çæï¼éè¯¯æç¤ºçï¼è¡å·çæ¹å¼ä¸éç¨äºæ åè¡¨ï¼\r\n   * å ä¸ºæ åè¡¨å¯ä»¥å¨å·²ç»æ·»å çèç¹ä¸å å¥å­èç¹ï¼èEntityæ»æ¯å¨æåè¿½å æ°å¯¹è±¡ï¼å¯¼è´äºèçé¡ºåºä¸ä¸å®ç¸åï¼\r\n   * æä»¥å¨ç»å®æ°æ®çæ¶åå°æ èç¹å¨åè¡¨ä¸­ççå®é¡ºåºéè¿ä¸ä¸ªéå çå±æ§ï¼__ACTUAL_INDEX__ï¼èµç»Entityç¤ºä¾ï¼\r\n   * å½Entityè°ç¨validateæ¹æ³æ¶ï¼æ£æ¥æ¯å¦å­å¨è¯¥å±æ§ï¼å¦æå­å¨ååºç¨è¯¥å±æ§çå¼ä½ä¸ºè¡å·ã\r\n   */\r\n  private traverseTree(treeNode: TreeNode, counter: { index: number }, entityArr: Entity[], primaryKey: string) {\r\n    const INDEX_LABEL = \"__ACTUAL_INDEX__\";\r\n    // å¤çå½åèç¹\r\n    const entity = entityArr.find(e => e[primaryKey] === treeNode.data[primaryKey]);\r\n    if (entity) {\r\n      Object.defineProperty(entity, INDEX_LABEL, {\r\n        value: counter.index\r\n      });\r\n      counter.index++;\r\n    }\r\n    // éå½éååæ¯\r\n    treeNode.children.forEach((rootNode) => {\r\n      this.traverseTree(rootNode, counter, entityArr, primaryKey);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * å¤çæ°æ®åæ´\r\n   * @param change åæ´\r\n   * @returns æ¯å¦è·³è¿ç»å®æ°æ®çæ´ä½å·æ°\r\n   * @description\r\n   * ç®çæ¯å°½éå°çéæ°æé æ´ä¸ªæ åè¡¨ï¼æ¯å¦å¨åçå¼ååäºä»¶æ¶å°½éåªæ´æ¹ååçå¼å°±ç»æï¼\r\n   * å¦æä»»ä½ååé½éæ°æé æ ï¼ä¼å¯¼è´Tabé®åæ¢åè½é¾ä»¥å®ç°ç­é®é¢ã\r\n   */\r\n  private handleChange(change?: Change): boolean {\r\n    // æ²¡æåæ´æ¶ï¼ç»§ç»­ç»å®æ°æ®å·æ°\r\n    if (!change)\r\n      return false;\r\n    // åç±»å¤çå·ä½çåæ´\r\n    switch (change.type) {\r\n      case ChangeType.SelectionChanged:\r\n        return this.handleSelectionChanged(change);\r\n      case ChangeType.GlobalSelectionChanged:\r\n        return this.handleSelectionChanged(change);\r\n      case ChangeType.ValueChanged:\r\n        return this.handleValueChanged(change);\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n  /**\r\n   * å¤çè¡åæ¢åæ´\r\n   * @param change åæ´\r\n   * @returns æ¯å¦è·³è¿ç»å®æ°æ®çæ´ä½å·æ°\r\n   */\r\n  private handleSelectionChanged(change: Change): boolean {\r\n    // å½åç»å®è·¯å¾ä¸åçè¡åæ¢äºä»¶ï¼ä¸è¿è¡æ°æ®å·æ°ï¼ä¸ºäºæ¯æTabé®åæ¢ååæ ¼ï¼\r\n    if (change.type === ChangeType.SelectionChanged || change.type === ChangeType.GlobalSelectionChanged) {\r\n      let path = change.path;\r\n      let frmPath = this.bindingData.bindingPath.split(\"/\").filter(str => str);\r\n      if (path.length === frmPath.length) {\r\n        let same = true;\r\n        for (let i = 0; i < path.length; i++) {\r\n          if (path[i] !== frmPath[i])\r\n            same = false;\r\n        }\r\n        if (same)\r\n          return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  /**\r\n   * å¤çè¡åæ¢åæ´\r\n   * @param change åæ´\r\n   * @returns æ¯å¦è·³è¿ç»å®æ°æ®çæ´ä½å·æ°\r\n   */\r\n  private handleValueChanged(change: Change): boolean {\r\n    if (change.type !== ChangeType.ValueChanged) {\r\n      return false;\r\n    }\r\n    // æ¥æ¶å°å¼ååäºä»¶ï¼å°è¯ä»è¿è¡å±é¨æ°æ®çæ´æ°ï¼ä¸ºäºæ¯æTabé®åæ¢ååæ ¼ï¼\r\n    let path = change.path;\r\n    let bindingPathArr = this.bindingData.bindingPath.split(\"/\").filter(str => str);\r\n    // å¤æ­ç»å®è·¯å¾æ¯å¦ç¸åï¼å¦æä¸ç¸ååæ´ä½å·æ°\r\n    for (let item of bindingPathArr) {\r\n      if (path.length > 0) {\r\n        if (item === path[0]) {\r\n          path.shift();\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    // éè¿idæ¾å°å¾æ´æ°çæ èç¹\r\n    let id = change.id;\r\n    if (id) {\r\n      const primaryKey = this.bindingList.primaryKey;\r\n      let nodes = this.treeTable.value;\r\n      let targetNode = null;\r\n      for (let node of nodes) {\r\n        let result = this.findTreeNodeById(node, primaryKey, id);\r\n        if (result) {\r\n          targetNode = result;\r\n          break;\r\n        }\r\n      }\r\n      if (targetNode && path.length === 1) {\r\n        const propertyName = path.shift();\r\n        if (targetNode.data.hasOwnProperty(propertyName) && change.hasOwnProperty(\"value\")) {\r\n          targetNode.data[propertyName] = change.value;\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  /**\r\n   * éè¿ä¸»é®å¼æ¥æ¾æ èç¹\r\n   * @param treeNode æ æ ¹èç¹\r\n   * @param primaryKey ä¸»é®å\r\n   * @param keyValue ä¸»é®å¼\r\n   * @returns æ èç¹\r\n   * @todo éå½éåå®ç°æ¯è¾ä½æï¼èèéè¿oldTreeNodeMapæ¥æ¾æ èç¹\r\n   */\r\n  private findTreeNodeById(treeNode: TreeNode, primaryKey: string, keyValue: any): TreeNode | null {\r\n    if (!treeNode)\r\n      return null;\r\n    if (treeNode.data.hasOwnProperty(primaryKey) && treeNode.data[primaryKey] === keyValue)\r\n      return treeNode;\r\n    if (treeNode.children) {\r\n      for (let node of treeNode.children) {\r\n        let result = this.findTreeNodeById(node, primaryKey, keyValue);\r\n        if (result)\r\n          return result;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n  * ç»å®æ°æ®\r\n  */\r\n  private bindData(change?: Change) {\r\n    let skipRefresh: boolean = this.handleChange(change);\r\n    if (skipRefresh) {\r\n      return;\r\n    }\r\n    // this.sourceData = this.bindingList.toJSON({ ignoreMultiLangInput: true });\r\n    const oldTreeNodes = this.treeTable.value;\r\n    const treeNodesData = this.bindingList.toJSON({ ignoreMultiLangInput: true });\r\n    let treeNodes: TreeNode[] = [];\r\n\r\n    if (treeNodesData && treeNodesData.length > 0) {\r\n      let hierarchyInfo = treeNodesData[0][this.hierarchyInfoField];\r\n      const builder: Type<any> = TreeNodeBuilderFactory.getBuilder(hierarchyInfo);\r\n      // æå¡å¨è¿åçåçº§èç¹ä¿¡æ¯å¹éä¸å°ç°æå·¥åéé¢çä»»ä½ä¸ç§æåµãç¡®è®¤æ°å çbuilderå·²ç»å¨å·¥åä¸­æ³¨å\r\n      if (builder == null) {\r\n        throw new Error('TreeTable builder is null!');\r\n      }\r\n      let expandLevel = -1;\r\n      const treeExpandLevel = this.treeTable['expandLevel'];\r\n      if (typeof treeExpandLevel !== 'undefined') {\r\n        expandLevel = treeExpandLevel;\r\n      }\r\n      const context = {\r\n        expandLevel,\r\n        component: this.treeTable,\r\n      };\r\n      const treeNodesBuilder = new builder(\r\n        treeNodesData, oldTreeNodes,\r\n        this.bindingList.primaryKey, this.hierarchyInfoField, context\r\n      );\r\n      treeNodes = treeNodesBuilder.build();\r\n      // è·åç»å®æ°æ®å¯¹åºçå®ä½åè¡¨\r\n      let entityArr: Entity[] = this.getEntityArr();\r\n      // æ ¹æ®treeNodesçé¡ºåºå¨å¯¹åºçå®ä½ä¸æ·»å åºå·å­æ®µ__ACTUAL_INDEX__\r\n      this.setActualIndex(entityArr, treeNodes);\r\n    }\r\n\r\n    if (!this.treeTable.lazy) {\r\n      this.treeTable.totalRecords = (this.treeTable._value ? this.treeTable._value.length : 0);\r\n      if (this.treeTable.sortMode == 'single' && this.treeTable.sortField)\r\n        this.treeTable.sortSingle();\r\n      else if (this.treeTable.sortMode == 'multiple' && this.treeTable.multiSortMeta)\r\n        this.treeTable.sortMultiple();\r\n      else if (this.treeTable.hasFilter()) //sort already filters\r\n        this.treeTable._filter();\r\n    }\r\n    this.treeTable.tableService.onUIUpdate(treeNodes);\r\n    this.treeTable.value = treeNodes;\r\n    this.treeTable.updateSerializedValue();\r\n\r\n    // this.treeNodeMap = {};\r\n    // this.sourceDataClone = this.sourceData;\r\n    // this.treeTable.value = [...this.treeNodesBuilder()];\r\n    // this.treeTableValueHandler();\r\n  }\r\n  private updateSelectedRow(change: Change) {\r\n    const currentId = this.bindingList.currentId;\r\n    if (this.treeTableSelectedEvent) {\r\n      this.treeTableSelectedEvent = false;\r\n      this.selectedRowId = currentId;\r\n      return;\r\n    }\r\n    const serializedValue = this.treeTable.serializedValue;\r\n\r\n    const treeNode = serializedValue && serializedValue.find(item => item && item.node && item.node.data && item.node.data.id === currentId) || null;\r\n    if (treeNode) {\r\n      if (this.treeTable.isSelected(treeNode.node) || currentId === this.selectedRowId) {\r\n        return;\r\n      }\r\n      this.selectedRowId = currentId;\r\n      this.treeTable.handleRowClick({ rowNode: treeNode, originalEvent: { target: { nodeName: '' } } });\r\n    }\r\n  }\r\n  @HostListener('onEditInit', ['$event'])\r\n  public onEditInitHandler(event: any) {\r\n    this.nodeSelectChange.emit(event['data']);\r\n    const id = event.data[this.idField];\r\n    this.setCurrentIdToBindingList(id);\r\n  }\r\n\r\n\r\n  @HostListener('onEditComplete', ['$event'])\r\n  public onEditCompleteHandler(event: any) {\r\n    let fieldName = event.field;\r\n    const column = this.columns.find(item => item.field === fieldName);\r\n    if (fieldName && column && column.editor && column.editor.options && column.editor.options.type === 'EditorTypes.LOOKUP') {\r\n      return;\r\n    }\r\n    if (event && event.hasOwnProperty('data')) {\r\n      const primaryKeyValue = event.data[this.frameContext.repository.primaryKey];\r\n\r\n      let value: any = this.getValue(fieldName, event.data);\r\n      const bindingPath = this.frameContext.viewModel.bindingPath || '/';\r\n      const bindingPaths = bindingPath.split('/').filter(p => p);\r\n      const bindingList: BindingList = this.bindingData.getValue(bindingPaths);\r\n      const bindingObject = bindingList.findById(primaryKeyValue);\r\n      const oldValue = this.getValue(fieldName, bindingObject);\r\n      const column = this.treeTable.columns.find(item => item.field === fieldName);\r\n      const dataType = column && column.dataType || null;\r\n      if (dataType === 'date' || dataType === 'datetime') {\r\n        if (this.dateService) {\r\n          const format = column && column.formatter && column.formatter.options && column.formatter.options.format || 'yyyy-MM-dd';\r\n          value = this.dateService.formatTo(value, format);\r\n          if (!value) {\r\n            value = null;\r\n          }\r\n        }\r\n      } else if (dataType === 'number') {\r\n        value = Number(value);\r\n      }\r\n      if (value !== oldValue) {\r\n        this.updateBindingList(primaryKeyValue, fieldName, value);\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('onNodeExpand', ['$event'])\r\n  public onNodeExpandHandler(event: any) {\r\n    // this.setNodeExpandedValue(event);\r\n    const selectedId = event && event.node && event.node.id || null;\r\n    if (!selectedId) {\r\n      return;\r\n    }\r\n    const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n    const expandNodes = virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];\r\n    expandNodes.push(selectedId);\r\n    virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);\r\n  }\r\n\r\n  @HostListener('onNodeCollapse', ['$event'])\r\n  public onNodeCollapseHandler(event: any) {\r\n    // this.setNodeExpandedValue(event);\r\n  }\r\n  @HostListener('onNodeSelect', ['$event'])\r\n  public onNodeSelectHandler(event: any) {\r\n    const id = event && event.node && event.node.data && event.node.data[this.frameContext.repository.primaryKey] || null;\r\n    if (id === this.bindingList.currentId) {\r\n      return;\r\n    }\r\n    this.treeTableSelectedEvent = true;\r\n    this.setCurrentIdToBindingList(id);\r\n  }\r\n  @HostListener('onNodeUnselect', ['$event'])\r\n  public onNodeUnselectHandler(event: any) {\r\n    this.setCurrentIdToBindingList(null);\r\n  }\r\n  private setNodeExpandedValue(event: any) {\r\n    if (!event || !this.oldTreeNodeMap || Object.keys(this.oldTreeNodeMap).length <= 0) {\r\n      return;\r\n    }\r\n    try {\r\n      let currentId = event.node.data.id;\r\n      this.oldTreeNodeMap[currentId].expanded = event.expanded;\r\n    } catch (e) {\r\n      console.warn(`setNodeExpandedValue error:${e.message}`);\r\n    }\r\n  }\r\n  private setCurrentIdToBindingList(selectedId: string): void {\r\n    const oldCurrentId = this.bindingList.currentId;\r\n    if (oldCurrentId === selectedId) {\r\n      return;\r\n    }\r\n    this.bindingList.setCurrentId(selectedId, true);\r\n  }\r\n\r\n  private getPaths(): string[] {\r\n    let paths = [];\r\n    if (!this.frameContext.viewModel || !this.frameContext.viewModel.bindingPath || this.frameContext.viewModel.bindingPath === '/') {\r\n      return paths;\r\n    }\r\n    else {\r\n      let bindingPath = this.frameContext.viewModel.bindingPath;\r\n      paths = bindingPath.substring(1, bindingPath.length).split('/');\r\n      return paths;\r\n    }\r\n  }\r\n  private updateBindingList(primaryValue: any, propertyName: string, value: any) {\r\n    if (!propertyName) {\r\n      return;\r\n    }\r\n    // æ´æ°ä¸»è¡¨é¨åè¡çå­æ®µ\r\n    const propertyNames = propertyName.split('.').filter(item => item);\r\n    const bindingPath = this.getBindingPathArray();\r\n    // ååºæ¥çä¸å®æ¯bindingList\r\n    const list = this.bindingData.getValue(bindingPath) as BindingList;\r\n    // ä¿®æ¹çæ¯å½åè¡\r\n    const paths = bindingPath.concat(propertyNames);\r\n    if (list && primaryValue === list.currentItem.primaryKeyValue) {\r\n      this.bindingData.setValue(paths, value, true, true);\r\n      return;\r\n    }\r\n    const bindingObject = this.bindingList.findById(primaryValue);\r\n    if (!bindingObject) {\r\n      return;\r\n    }\r\n    if (propertyNames.length < 2) {\r\n      bindingObject.setValue(propertyName, value, true, true, undefined, this.bindingData.getValudChangeInvokerFactory()(paths));\r\n    } else {\r\n      let targetBindingObject = null;\r\n      const fpaths = propertyNames.slice(0, propertyNames.length - 1);\r\n      const targetPropertyName = propertyNames[propertyNames.length - 1];\r\n      fpaths.forEach(prop => {\r\n        targetBindingObject = targetBindingObject && targetBindingObject[prop] || bindingObject[prop];\r\n      });\r\n      // todo:éè¦æ·»å å¼ååäºä»¶\r\n      targetBindingObject.setValue(targetPropertyName, value, true, true, undefined, this.bindingData.getValudChangeInvokerFactory()(paths));\r\n    }\r\n  }\r\n  private getBindingPathArray(): any[] {\r\n    const path = this.frameContext.viewModel.bindingPath;\r\n    if (path) {\r\n      return path.split('/').filter(n => n !== '');\r\n    }\r\n    return [];\r\n  }\r\n  private getValue(path: string, data: any) {\r\n    let value = '';\r\n    if (path.indexOf('.') === -1) {\r\n      value = data[path];\r\n    } else {\r\n      value = path.split('.').reduce((result, prop) => {\r\n        return result[prop];\r\n      }, data);\r\n    }\r\n    return value;\r\n  }\r\n  protected setChecks(ids: string[]) {\r\n    this.frameContext.viewModel.uiState.setPropertyValue('ids', ids);\r\n  }\r\n}","import { Directive, Injector, Input, OnChanges, OnDestroy, SimpleChanges } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nconst EXCLUDE_VALIDATE_FIELDS = 'excludeValidateRules';\r\nconst RULETYPE = 'required';\r\n@Directive({\r\n  selector: '[farris-dynamic-required]'\r\n})\r\nexport class FarrisDynamicRequiredDirective implements OnChanges, OnDestroy {\r\n  /**\r\n   * like {field:'',type:'require'}\r\n   */\r\n  @Input('farris-dynamic-required') field: string;\r\n  /**\r\n   * å¯ç¨æ ¡éªçæ¶æº\r\n   */\r\n  @Input('requiredOn') requiredOn: boolean = false;\r\n  constructor(protected frameContext: FrameContext, private injector: Injector) {\r\n\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.updateValidateRule(false);\r\n  }\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // å¯ç¨å¿å¡«æ ¡éª\r\n    this.updateValidateRule(this.requiredOn);\r\n  }\r\n  /**\r\n   * \r\n   * @param isRequired \r\n   */\r\n  private updateValidateRule(isRequired: boolean) {\r\n    if (!this.field) {\r\n      return;\r\n    }\r\n    this.frameContext.form.updateFieldValidateRule(this.field, isRequired);\r\n    // if (isRequired) {\r\n    //   const rules = this.frameContext.params.get(EXCLUDE_VALIDATE_FIELDS) || {};\r\n    //   const fieldExcludeRules: string[] = rules[this.field] || [];\r\n    //   if (fieldExcludeRules.includes(RULETYPE)) {\r\n    //     const index = fieldExcludeRules.indexOf(RULETYPE);\r\n    //     fieldExcludeRules.splice(index, 1);\r\n    //   }\r\n    //   this.frameContext.params.set(EXCLUDE_VALIDATE_FIELDS, rules);\r\n    //   this.frameContext.form.updateFieldValidateRule(this.field, fieldExcludeRules);\r\n    // } else {\r\n    //   // ç¦ç¨æ ¡éª\r\n    //   // {int1:[required,maxValue]}\r\n    //   const rules = this.frameContext.params.get(EXCLUDE_VALIDATE_FIELDS) || {};\r\n    //   const fieldExcludeRules = rules[this.field] || [];\r\n    //   if (fieldExcludeRules && !fieldExcludeRules.includes(RULETYPE)) {\r\n    //     fieldExcludeRules.push(RULETYPE);\r\n    //   }\r\n    //   rules[this.field] = fieldExcludeRules;\r\n    //   this.frameContext.params.set(EXCLUDE_VALIDATE_FIELDS, rules);\r\n    //   this.frameContext.form.updateFieldValidateRule(this.field, fieldExcludeRules);\r\n    // }\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef, OnInit } from '@angular/core';\r\nimport { ViewModel } from '@farris/devkit';\r\nimport { EditorComponent } from '@farris/ui-editor';\r\n\r\n@Directive({\r\n  selector: '[farris-editor],[farris-editor-bind]'\r\n})\r\nexport class FarrisEditorDirective implements OnInit {\r\n  constructor(private viewModel: ViewModel, private editor: EditorComponent) { }\r\n\r\n  ngOnInit(): void {\r\n    this.setComponentRef();\r\n  }\r\n\r\n  private setComponentRef() {\r\n    const appContext = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.getFormAppContext();\r\n    const frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId;\r\n    const editor: any = this.editor;\r\n    const elementRef: ElementRef = editor && editor.injector && editor.injector.get(ElementRef, null);\r\n    const id = elementRef && elementRef.nativeElement && elementRef.nativeElement.id || null;\r\n    // å¦æframeIdä¸å­å¨ætreetableæ²¡æidå±æ§ï¼è¯´æä¸ç¬¦åä½¿ç¨åºæ¯\r\n    if (!frameId || !id) {\r\n      return;\r\n    }\r\n    const map = appContext && appContext.componentRefs && appContext.componentRefs.get(frameId) || new Map<string, any>();\r\n    appContext && appContext.componentRefs && appContext.componentRefs.set(frameId, map.set(id, this.editor));\r\n  }\r\n}","import { Directive, HostListener, Injector } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { QuerySolutionComponent } from \"@gsp-cmp/querysolution\";\r\n@Directive({\r\n  selector: \"[farris-querysolution-event-bind]\"\r\n})\r\nexport class FarrisQuerySolutionEventBindDirective {\r\n  constructor(private injector: Injector, private component: QuerySolutionComponent, private frameContext: FrameContext) { }\r\n  /**\r\n   * æ§è¡ç­é\r\n   * @param event event\r\n   */\r\n  @HostListener(\"queryEmitter\")\r\n  private onQuery(event: any) {\r\n    if (this.frameContext) {\r\n      this.frameContext.repository.entityCollection.pageIndex = 1;\r\n    }\r\n  }\r\n}","import { Directive, Inject, Injector, OnInit } from \"@angular/core\";\r\nimport { UserSettings, UserSettingsToken } from \"@farris/devkit\";\r\nimport { FarrisDatepickerComponent } from '@farris/ui-datepicker';\r\n@Directive({\r\n  selector: '[farris-date-localization]'\r\n})\r\nexport class FarrisDateLocalizationDirective implements OnInit {\r\n  constructor(private injector: Injector, @Inject(UserSettingsToken) private userSettings: UserSettings, private componentRef: FarrisDatepickerComponent) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    this.localize();\r\n  }\r\n  private localize() {\r\n    if (this.userSettings && this.componentRef) {\r\n      const { dateFormat = null, timeFormat = null } = this.userSettings;\r\n      if (dateFormat === null && timeFormat === null) {\r\n        return;\r\n      }\r\n      if (timeFormat && timeFormat && this.componentRef.showTime === true) {\r\n        this.componentRef.dateFormat = `${dateFormat} ${timeFormat}`;\r\n        this.componentRef.dateOpts.dateFormat = `${dateFormat} ${timeFormat}`;\r\n        this.componentRef.updateValue(this.componentRef.value);\r\n      } else if (dateFormat) {\r\n        this.componentRef.dateFormat = `${dateFormat}`;\r\n        this.componentRef.dateOpts.dateFormat = `${dateFormat}`;\r\n        this.componentRef.updateValue(this.componentRef.value);\r\n      }\r\n    }\r\n  }\r\n}","import { Directive, Inject, Injector, OnInit } from \"@angular/core\";\r\nimport { UserSettings, UserSettingsToken } from \"@farris/devkit\";\r\nimport { NumberSpinnerComponent } from '@farris/ui-number-spinner';\r\n@Directive({\r\n  selector: '[farris-number-localization]'\r\n})\r\nexport class FarrisNumberLocalizationDirective implements OnInit {\r\n  constructor(private injector: Injector, @Inject(UserSettingsToken) private userSettings: UserSettings, private componentRef: NumberSpinnerComponent) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    this.localize();\r\n  }\r\n  private localize() {\r\n    return;\r\n    // æ¶åéé¢ç­é®é¢ï¼æ°å­æ ¼å¼åä¸äºå¤ç\r\n    if (this.userSettings && this.userSettings.numberFormat && this.componentRef) {\r\n      const { negativeSign = null, numberDecimalDigits = null, numberDecimalSeparator = null, numberGroupSeparator = null } = this.userSettings.numberFormat || {};\r\n      // è´å·\r\n      if (negativeSign) {\r\n        // this.componentRef.prefix = negativeSign;\r\n      }\r\n      // å°æ°ä½æ°\r\n      if (numberDecimalDigits !== null) {\r\n        this.componentRef.precision = numberDecimalDigits;\r\n        this.componentRef.formatOptions['precision'] = numberDecimalDigits;\r\n      }\r\n      // å°æ°ç¹ç¬¦å·\r\n      if (numberDecimalSeparator !== null) {\r\n        this.componentRef.decimalSeparator = numberDecimalSeparator;\r\n        this.componentRef.formatOptions['decimalSeparator'] = numberDecimalSeparator;\r\n      }\r\n      // ååä½ç¬¦å·\r\n      if (numberGroupSeparator !== null) {\r\n        this.componentRef.groupSeparator = numberGroupSeparator;\r\n        this.componentRef.formatOptions['groupSeparator'] = numberGroupSeparator;\r\n      }\r\n      this.componentRef.updateValue(this.componentRef.value);\r\n    }\r\n  }\r\n}","import { Directive, Inject, Injector, OnInit } from \"@angular/core\";\r\nimport { UserSettings, UserSettingsToken } from \"@farris/devkit\";\r\nimport { TimePickerComponent } from '@farris/ui-time-picker';\r\n\r\n@Directive({\r\n  selector: '[farris-time-localization]'\r\n})\r\nexport class FarrisTimeLocalizationDirective implements OnInit {\r\n  constructor(private injector: Injector, @Inject(UserSettingsToken) private userSettings: UserSettings, private componentRef: TimePickerComponent) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    this.localize();\r\n  }\r\n  private localize() {\r\n    if (this.userSettings && this.componentRef) {\r\n      const { timeFormat = null } = this.userSettings;\r\n      if (timeFormat) {\r\n        this.componentRef.format = timeFormat;\r\n      }\r\n    }\r\n  }\r\n}","import { Directive, Inject, Injector, Input, OnInit } from \"@angular/core\";\r\nimport { NumberFormat, UserSettings, UserSettingsToken } from \"@farris/devkit\";\r\nimport { BigNumber } from 'bignumber.js';\r\nimport moment from 'moment';\r\nimport { TextComponent } from '@farris/ui-text';\r\n\r\n@Directive({\r\n  selector: '[farris-text-localization]'\r\n})\r\nexport class FarrisTextLocalizationDirective implements OnInit {\r\n  @Input('localization') localization: boolean;\r\n  constructor(private injector: Injector, @Inject(UserSettingsToken) private userSettings: UserSettings, private componentRef: TextComponent) {\r\n    this.transform();\r\n  }\r\n  public ngOnInit() {\r\n  }\r\n  private transform() {\r\n    if (this.componentRef) {\r\n      this.componentRef.beforeWriteValue = (value: any, options: any) => {\r\n        let { localizationType = null, showTime = false } = options;\r\n        if (!value) {\r\n          return '';\r\n        }\r\n        if (localizationType && value) {\r\n          localizationType = localizationType.toLowerCase();\r\n          value = this.transformValue(value, localizationType);\r\n          return value;\r\n        } else {\r\n          return undefined;\r\n        }\r\n      };\r\n    }\r\n  }\r\n  private transformValue(value: any, dataType: string) {\r\n    if (dataType === 'date') {\r\n      return this.transformDate(value);\r\n    } else if (dataType === 'datetime') {\r\n      return this.transformDateTime(value);\r\n    }\r\n    // æ¶åéé¢è®¡ç®åæ¾ç¤ºé®é¢ï¼ä¸äºå¤ç\r\n    //  else if (dataType === 'number') {\r\n    //   return this.transformNumber(value);\r\n    // } \r\n    else {\r\n      return value;\r\n    }\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥æ\r\n   * @param value value\r\n   */\r\n  private transformDate(value: any) {\r\n    let dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';\r\n    if (!dateFormat || !value) {\r\n      return value;\r\n    }\r\n    const date = moment(value);\r\n    const isValid = date.isValid();\r\n    if (!isValid) {\r\n      return value;\r\n    }\r\n    dateFormat = this.parseDateFormat(dateFormat);\r\n    return date.format(dateFormat);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥ææ¶é´\r\n   * @param value value\r\n   * todo: ç®åæ æ³å®ä¹æ¥ææ¶é´æ ¼å¼\r\n   */\r\n  private transformDateTime(value: any) {\r\n    let dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';\r\n    let timeFormat = this.userSettings && this.userSettings.timeFormat || 'HH:mm:ss';\r\n    if (!dateFormat || !timeFormat) {\r\n      return value;\r\n    }\r\n    const dateTime = moment(value);\r\n    const isValid = dateTime.isValid();\r\n    if (!isValid) {\r\n      return value;\r\n    }\r\n    if (dateFormat) {\r\n      dateFormat = this.parseDateFormat(dateFormat);\r\n    }\r\n    if (timeFormat) {\r\n      timeFormat = this.parseTimeFormat(timeFormat);\r\n    }\r\n    const dateTimeFormat = dateFormat + ' ' + timeFormat;\r\n    return dateTime.format(dateTimeFormat);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ°å­\r\n   * @param value value\r\n   */\r\n  private transformNumber(value): string {\r\n    if (value === null || value === undefined || value === '') {\r\n      return '';\r\n    }\r\n    const bigNumber = new BigNumber(value);\r\n    // å¦æä¸æ¯æ°å­ï¼ä¸åä»»ä½å¤ç\r\n    if (!BigNumber.isBigNumber(bigNumber)) {\r\n      return value;\r\n    }\r\n    const isNegative = bigNumber.isNegative();\r\n    const format = this.buildNumberFormat();\r\n    const { negativeSign = null, numberDecimalDigits = null } = this.numberFormat || {};\r\n    if (isNegative) {\r\n      if (negativeSign !== null) {\r\n        format.prefix = negativeSign;\r\n        return bigNumber.absoluteValue().toFormat(numberDecimalDigits, null, format);\r\n      }\r\n    }\r\n    return bigNumber.toFormat(numberDecimalDigits, null, format);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥ææ ¼å¼è§åä¸ºmomentçformatè§å\r\n   * @param format format\r\n   */\r\n  private parseDateFormat(format: string) {\r\n    return format.replace(/y/g, 'Y').replace(/d/g, 'D');\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¶é´æ ¼å¼è§åä¸ºmomentçformatè§å\r\n   * @param format format\r\n   */\r\n  private parseTimeFormat(format: string) {\r\n    return format.replace(/M/g, 'm');\r\n  }\r\n  /**\r\n   * æé bignumberæ°å­æ ¼å¼åéé¡¹\r\n   */\r\n  private buildNumberFormat() {\r\n    if (this.numberFormat) {\r\n      const { numberDecimalSeparator = null, numberGroupSeparator = null } = this.numberFormat;\r\n      const format: any = {\r\n        groupSize: 3,\r\n      };\r\n      if (numberDecimalSeparator !== null) {\r\n        format.decimalSeparator = numberDecimalSeparator;\r\n      }\r\n      if (numberGroupSeparator !== null) {\r\n        format.groupSeparator = numberGroupSeparator;\r\n      }\r\n      return format;\r\n    }\r\n  }\r\n  private get numberFormat(): NumberFormat {\r\n    return this.userSettings && this.userSettings.numberFormat || null;\r\n  }\r\n}","import { Directive, ElementRef, Injector, Input, OnInit } from '@angular/core';\r\n@Directive({\r\n  selector: '[farris-checkbox-modification]'\r\n})\r\nexport class FarrisCheckboxModificationDirective implements OnInit {\r\n  @Input() index: number;\r\n  constructor(private injector: Injector, private elementRef: ElementRef) { }\r\n  ngOnInit(): void {\r\n    if (typeof this.index !== 'number' || !this.elementRef) {\r\n      return;\r\n    }\r\n    const nativeElement = this.elementRef.nativeElement;\r\n    if (nativeElement) {\r\n      const id = nativeElement.getAttribute('id');\r\n      if (id) {\r\n        const token = `${id}_${this.index}`;\r\n        this.elementRef.nativeElement.setAttribute('id', token);\r\n        this.elementRef.nativeElement.setAttribute('name', token);\r\n        this.elementRef.nativeElement.setAttribute('original_id', id);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef, Injector, Input, OnInit } from '@angular/core';\r\n@Directive({\r\n  selector: '[farris-label-modification]'\r\n})\r\nexport class FarrisLabelModificationDirective implements OnInit {\r\n  @Input() index: number;\r\n  constructor(private injector: Injector, private elementRef: ElementRef) { }\r\n  ngOnInit(): void {\r\n    if (typeof this.index !== 'number' || !this.elementRef) {\r\n      return;\r\n    }\r\n    const nativeElement = this.elementRef.nativeElement;\r\n    if (nativeElement) {\r\n      const labelFor = nativeElement.getAttribute('for');\r\n      if (labelFor) {\r\n        this.elementRef.nativeElement.setAttribute('for', `${labelFor}_${this.index}`);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","import { Directive, Input, Optional } from '@angular/core';\r\nimport { ComboLookupComponent } from '@farris/ui-combo-lookup';\r\nimport { LookupGridComponent } from '@farris/ui-lookup';\r\n\r\n@Directive({\r\n  selector: '[farris-lookup-binding]'\r\n})\r\nexport class FarrisLookupBindingDirective {\r\n  @Input() lookupType: string;\r\n  @Input('farris-lookup-binding')\r\n  public set lookupValue(value: any) {\r\n    if (this.lookupType === 'lookup' && this.lookup) {\r\n      this.lookup.writeValue(value);\r\n    } else if (this.lookupType === 'comboLookup' && this.comboLookup) {\r\n      this.comboLookup.writeValue(value);\r\n    }\r\n  }\r\n  constructor(@Optional() private lookup: LookupGridComponent, @Optional() private comboLookup: ComboLookupComponent) { }\r\n}","import { AfterViewInit, Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { ListNavComponent } from '@farris/ui-list-nav';\r\n\r\n@Directive({\r\n  selector: '[listNavRef]'\r\n})\r\nexport class ListNavComponentRefDirective implements OnInit, OnDestroy, AfterViewInit {\r\n  constructor(private injector: Injector, private component: ListNavComponent, private elementRef: ElementRef, private frameContext: FrameContext) {\r\n\r\n  }\r\n  //#region angular lifecycle\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n  ngAfterViewInit(): void {\r\n  }\r\n  //#endregion\r\n}","import { AfterViewInit, Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { ListViewComponent } from \"@farris/ui-list-view\";\r\n\r\n@Directive({\r\n  selector: '[listViewRef]'\r\n})\r\nexport class ListViewComponentRefDirective implements OnInit, OnDestroy, AfterViewInit {\r\n  constructor(private injector: Injector, private component: ListViewComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n  ngAfterViewInit(): void {\r\n  }\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { ListFilterComponent } from '@farris/ui-list-filter';\r\n@Directive({\r\n  selector: '[listFilterRef]'\r\n})\r\nexport class ListFilterComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: ListFilterComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { FilterComponent } from '@farris/ui-filter';\r\n\r\n@Directive({\r\n  selector: '[filterRef]'\r\n})\r\nexport class FilterComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: FilterComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { ViewChangeComponent } from '@farris/ui-view-change';\r\n\r\n@Directive({\r\n  selector: '[viewChangeRef]'\r\n})\r\nexport class ViewChangeComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: ViewChangeComponent, private elementRef: ElementRef, private frameContext: FrameContext) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { HtmlEditorComponent } from '@farris/ui-html-editor';\r\n\r\n@Directive({\r\n  selector: '[htmlEditorRef]'\r\n})\r\nexport class HtmlEditorComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: HtmlEditorComponent, private elementRef: ElementRef, private frameContext: FrameContext) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { FarrisSectionComponent } from '@farris/ui-section';\r\n\r\n@Directive({\r\n  selector: '[sectionRef]'\r\n})\r\nexport class SectionComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: FarrisSectionComponent, private elementRef: ElementRef, private frameContext: FrameContext) {\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { InputGroupComponent } from '@farris/ui-input-group';\r\n\r\n@Directive({\r\n  selector: '[inputGroupRef]'\r\n})\r\nexport class InputGroupComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: InputGroupComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { FarrisDatepickerComponent } from '@farris/ui-datepicker';\r\n\r\n@Directive({\r\n  selector: '[datepickerRef]'\r\n})\r\nexport class DatepickerComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: FarrisDatepickerComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { TimePickerComponent } from '@farris/ui-time-picker';\r\n\r\n@Directive({\r\n  selector: '[timePickerRef]'\r\n})\r\nexport class TimePickerComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: TimePickerComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { AfterViewInit, Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { NumberSpinnerComponent } from \"@farris/ui-number-spinner\";\r\n\r\n@Directive({\r\n  selector: '[numberSpinnerRef]'\r\n})\r\nexport class NumberSpinnerComponentRefDirective implements OnInit, OnDestroy, AfterViewInit {\r\n  constructor(private injector: Injector, private component: NumberSpinnerComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n  ngAfterViewInit(): void {\r\n  }\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { ComboListComponent } from '@farris/ui-combo-list';\r\n\r\n@Directive({\r\n  selector: '[comboListRef]'\r\n})\r\nexport class ComboListComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: ComboListComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { ComboLookupComponent } from '@farris/ui-combo-lookup';\r\n\r\n@Directive({\r\n  selector: '[comboLookupRef]'\r\n})\r\nexport class ComboLookupComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: ComboLookupComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { LookupGridComponent } from '@farris/ui-lookup';\r\n\r\n@Directive({\r\n  selector: '[lookupGridRef]'\r\n})\r\nexport class LookupGridComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: LookupGridComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\n\r\n@Directive({\r\n  selector: '[datagridRef]'\r\n})\r\nexport class DatagridComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: DatagridComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { TreeTableComponent } from '@farris/ui-treetable';\r\n\r\n@Directive({\r\n  selector: '[treetableRef]'\r\n})\r\nexport class TreetableComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: TreeTableComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { WizardComponent } from '@farris/ui-wizard';\r\n\r\n@Directive({\r\n  selector: '[wizardRef]'\r\n})\r\nexport class WizardComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: WizardComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { DiscussionEditorComponent } from '@farris/discussion-group';\r\n\r\n@Directive({\r\n  selector: '[discussionEditorRef]'\r\n})\r\nexport class DiscussionEditorComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: DiscussionEditorComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { DiscussionListComponent } from '@farris/discussion-group';\r\n\r\n@Directive({\r\n  selector: '[discussionListRef]'\r\n})\r\nexport class DiscussionListComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: DiscussionListComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { ListNavComponent } from '@farris/ui-list-nav';\r\n\r\n@Directive({\r\n  selector: '[navRef]'\r\n})\r\nexport class NavComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: ListNavComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { MultiSelectComponent } from '@farris/ui-multi-select';\r\n\r\n@Directive({\r\n  selector: '[multiSelectRef]'\r\n})\r\nexport class MultiSelectComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: MultiSelectComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","import { Directive, ElementRef, Injector, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { FrameContext } from \"@farris/devkit\";\r\nimport { ScrollspyComponent } from '@farris/ui-scrollspy';\r\n\r\n@Directive({\r\n  selector: '[scrollspyRef]'\r\n})\r\nexport class ScrollspyComponentRefDirective implements OnInit, OnDestroy {\r\n  constructor(private injector: Injector, private component: ScrollspyComponent, private elementRef: ElementRef, private frameContext: FrameContext) { }\r\n  ngOnInit(): void {\r\n    const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;\r\n    if (this.frameContext && id) {\r\n      this.frameContext.componentRefManager.add(id, this.component);\r\n    }\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n}","\r\n/**\r\n * ä½¿ç¨æ¹æ³ï¼\r\n * [comob-lookup-data-mapping]=\"{ id: 'user.userId', name: 'user.userName' }\"\r\n * key ä¸ºå¸®å©ä¸çå­æ®µï¼ value ä¸º è¡¨åä¸­çå­æ®µå\r\n * å¸®å©ä¸çåä¸ä¸ªå­æ®µå¯ä»¥æ å°å°è¡¨åä¸­çå¤ä¸ªå­æ®µä¸­ï¼{ ... id: 'user.userid, user.addusid'}\r\n * å¤å­æ®µä»¥éå·éå¼\r\n *\r\n */\r\n\r\nimport { Directive, OnInit, Optional, Self, Input } from '@angular/core';\r\nimport { BindingObject, NgFormControl, ViewModel } from '@farris/devkit';\r\nimport { ComboChanges } from '@farris/ui-combo-list';\r\nimport { ComboLookupComponent } from '@farris/ui-combo-lookup';\r\nimport { DataMapping } from './data-mapping';\r\n\r\n\r\n@Directive({ selector: '[combo-lookup-data-mapping]' })\r\nexport class ComboLookupDataMappingDirective extends DataMapping implements OnInit {\r\n\r\n  @Input('combo-lookup-data-mapping') mapfields: any;\r\n  @Input('target') target: BindingObject = null;\r\n\r\n  constructor(@Optional() public vm: ViewModel, @Optional() @Self() private lookup: ComboLookupComponent) {\r\n    super();\r\n    if (this.lookup) {\r\n      this.lookup.useFormDataMapping = true;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    // å¼ååï¼äº¦éè¿è¯¥äºä»¶è§¦åä»»æè¾å¥æ¸ç©ºäºä»¶\r\n    this.lookup.valueChange.subscribe((result: ComboChanges) => {\r\n      if (!result['nosearch']) {\r\n        // å¼åå\r\n        const data = result.selections && result.selections.length > 0 ? result.selections : null;\r\n        this.onValueChange(data);\r\n      } else {\r\n        // ä»»æè¾å¥æ¸ç©ºæ å°å­æ®µ\r\n        this.onClearMapping();\r\n      }\r\n    });\r\n    // æ¸ç©ºäºä»¶\r\n    this.lookup.clear.subscribe(() => {\r\n      const _mapfields = this.mapfields || this.lookup.mapFields;\r\n      this.mappingData(null, _mapfields);\r\n    });\r\n  }\r\n  private onClearMapping() {\r\n    const mapfields = Object.assign({}, (this.mapfields || this.lookup.mapFields || {}));\r\n    const lookupTextField = this.lookup.textField;\r\n    const data = {};\r\n    const controlName = this.lookup.ngControl && this.lookup.ngControl.name;\r\n    if (controlName && this.vm) {\r\n      const textFieldMapping = mapfields[lookupTextField];\r\n      const ngFormControl = this.vm && this.vm.form && this.vm.form.ngFormControls && this.vm.form.ngFormControls[controlName] as NgFormControl;\r\n      const binding = ngFormControl && ngFormControl.binding;\r\n      if (textFieldMapping && binding) {\r\n        const targetField = textFieldMapping.split(',').filter(item => item !== binding).join(',');\r\n        if (targetField) {\r\n          mapfields[lookupTextField] = targetField;\r\n        } else {\r\n          delete mapfields[lookupTextField];\r\n        }\r\n      }\r\n    }\r\n    // this.setValue(data, lookupTextField.split('.'), value);\r\n    Object.keys(mapfields).forEach(field => {\r\n      this.setValue(data, field.split('.'), '');\r\n    });\r\n    this.mappingData(data, mapfields, true);\r\n  }\r\n  private onValueChange(data) {\r\n    const _mapfields = this.mapfields || this.lookup.mapFields;\r\n    this.mappingData(data, _mapfields);\r\n  }\r\n}\r\n","import { Injector, Optional, Pipe, PipeTransform } from '@angular/core';\r\nimport { DownloadService } from '@gsp-svc/formdoc-upload';\r\n@Pipe({ name: 'imageIdToUrl' })\r\nclass ImageIdToUrlPipe implements PipeTransform {\r\n  private defaultPic = '/platform/common/web/assets/imgs/no-pic.png';\r\n  private downloadService: DownloadService;\r\n  constructor(@Optional() private injector: Injector) {\r\n    this.downloadService = this.injector && this.injector.get<DownloadService>(DownloadService, null) || null;\r\n  }\r\n\r\n  transform(value: string, rootId: string = 'default-root'): string {\r\n    if (!value) {\r\n      return this.defaultPic;\r\n    }\r\n    //const rootId = 'default-root';\r\n    if (this.downloadService) {\r\n      return this.downloadService.getDownloadUrl(value, rootId);\r\n    } else {\r\n      console.warn('å å®å¨é®é¢ï¼éä»¶ä¸è½½æä¾å®å¨æ ¡éªæºå¶ï¼éä»¶ä¸è½½åè½ééæ°ç¼è¯ã');\r\n      return `/api/runtime/dfs/v1.0/formdoc/download/${value}`;\r\n    }\r\n  }\r\n}\r\n\r\nexport { ImageIdToUrlPipe };\r\n","import { LocaleService } from '@farris/ui-locale';\r\nimport { Pipe, PipeTransform, Injector, Optional } from '@angular/core';\r\nimport { ColumnFormatService } from '@farris/ui-common/column';\r\n\r\n@Pipe({ name: 'formatPrimeNgTreeTableCellData', pure: false })\r\nexport class FormatPrimeNgTreeTableCellData implements PipeTransform {\r\n\r\n  private localeService: LocaleService;\r\n  constructor(private cfs: ColumnFormatService, @Optional() private injector?: Injector) {\r\n    if (this.injector) {\r\n      this.localeService = this.injector.get(LocaleService);\r\n    }\r\n  }\r\n\r\n  transform(col: any, rowData: any): any {\r\n    let value = '';\r\n    if (rowData && col && col.field) {\r\n      value = this.getValue(col.field, rowData);\r\n      let formatterFn = col.formatter;\r\n      if (!formatterFn) {\r\n        if (col.isMultilingualField) {\r\n          return this.getMultiLanguageValue(value);\r\n        } else {\r\n          return value;\r\n        }\r\n      } else {\r\n        return this.cfs.format(value, rowData, formatterFn);\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  // è·åå¤è¯­æ°æ®\r\n  private getMultiLanguageValue(valObj) {\r\n    if (valObj && typeof valObj === 'object' && Object.keys(valObj).length > 0) {\r\n      const localeId = this.localeService && this.localeService.localeId || 'zh-CHS';\r\n      const value = valObj[localeId];\r\n      return value === undefined ? '' : value;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n  private getValue(path: string, target: any) {\r\n    if (!target) {\r\n      return '';\r\n    }\r\n    var resultVal = '';\r\n    if (path.indexOf('.') === -1) {\r\n      resultVal = target[path];\r\n    }\r\n    else {\r\n      resultVal = path.split('.').reduce(((obj, key) => {\r\n        return obj && obj[key] || null;\r\n      }), target);\r\n    }\r\n    return resultVal;\r\n  };\r\n  /**\r\n   * æ¯å¦ä¸ºå¸®å©å\r\n   * @param col col\r\n   */\r\n  private isHelpColumn(col: any) {\r\n    return col && col.editor && col.editor.options && col.editor.options.type === 'EditorTypes.LOOKUP' || false;\r\n  }\r\n  private getHelpColumnValue(col: any, data: any) {\r\n    const textField = this.getHelpControlTextField(col);\r\n    const mapFields = this.getHelpControlMapFields(col);\r\n    if (textField && mapFields && Object.keys(mapFields).length > 0) {\r\n      const path = mapFields[textField];\r\n      return this.getValue(path, data);\r\n    }\r\n    return '';\r\n  }\r\n  private getHelpControlTextField(col: any) {\r\n    return col && col.editor && col.editor.options && col.editor.options.textField || '';\r\n  }\r\n  private getHelpControlMapFields(col: any) {\r\n    return col && col.editor && col.editor.options && col.editor.options.mapFields || {};\r\n  }\r\n}\r\n","import { Inject, Injector, Optional, Pipe, PipeTransform } from \"@angular/core\";\r\nimport { NumberFormat, UserSettings, UserSettingsToken } from \"@farris/devkit\";\r\nimport { BigNumber } from 'bignumber.js';\r\nimport moment from 'moment';\r\n\r\n@Pipe({ name: 'localization' })\r\nexport class Localization implements PipeTransform {\r\n  constructor(@Optional() private injector: Injector, @Inject(UserSettingsToken) private userSettings: UserSettings) {\r\n  }\r\n  public transform(value: any, dataType: string) {\r\n    if (dataType) {\r\n      dataType = dataType.toLowerCase();\r\n      if (dataType === 'date') {\r\n        return this.transformDate(value);\r\n      } else if (dataType === 'datetime') {\r\n        return this.transformDateTime(value);\r\n      } else if (dataType === 'number') {\r\n        return this.transformNumber(value);\r\n      } else {\r\n        return value;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥æ\r\n   * @param value value\r\n   */\r\n  private transformDate(value: any) {\r\n    let dateFormat = this.userSettings && this.userSettings.dateFormat || null;\r\n    if (!dateFormat || !value) {\r\n      return value;\r\n    }\r\n    const date = moment(value);\r\n    const isValid = date.isValid();\r\n    if (!isValid) {\r\n      return value;\r\n    }\r\n    dateFormat = this.parseDateFormat(dateFormat);\r\n    return date.format(dateFormat);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥ææ¶é´\r\n   * @param value value\r\n   * todo: ç®åæ æ³å®ä¹æ¥ææ¶é´æ ¼å¼\r\n   */\r\n  private transformDateTime(value: any) {\r\n    let dateFormat = this.userSettings && this.userSettings.dateFormat || '';\r\n    let timeFormat = this.userSettings && this.userSettings.timeFormat || '';\r\n    const dateTime = moment(value);\r\n    const isValid = dateTime.isValid();\r\n    if (!isValid) {\r\n      return value;\r\n    }\r\n    if (dateFormat) {\r\n      dateFormat = this.parseDateFormat(dateFormat);\r\n    }\r\n    if (timeFormat) {\r\n      timeFormat = this.parseTimeFormat(timeFormat);\r\n    }\r\n    const dateTimeFormat = dateFormat + ' ' + timeFormat;\r\n    return dateTime.format(dateTimeFormat);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ°å­\r\n   * @param value value\r\n   */\r\n  private transformNumber(value): string {\r\n    if (value === null || value === undefined || value === '') {\r\n      return '';\r\n    }\r\n    const bigNumber = new BigNumber(value);\r\n    // å¦æä¸æ¯æ°å­ï¼ä¸åä»»ä½å¤ç\r\n    if (!BigNumber.isBigNumber(bigNumber)) {\r\n      return value;\r\n    }\r\n    const isNegative = bigNumber.isNegative();\r\n    const format = this.buildNumberFormat();\r\n    const { negativeSign = null, numberDecimalDigits = null } = this.numberFormat;\r\n    if (isNegative) {\r\n      if (negativeSign !== null) {\r\n        format.prefix = negativeSign;\r\n        return bigNumber.absoluteValue().toFormat(numberDecimalDigits, null, format);\r\n      }\r\n    }\r\n    return bigNumber.toFormat(numberDecimalDigits, null, format);\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¥ææ ¼å¼è§åä¸ºmomentçformatè§å\r\n   * @param format format\r\n   */\r\n  private parseDateFormat(format: string) {\r\n    return format.replace(/y/g, 'Y').replace(/d/g, 'D');\r\n  }\r\n  /**\r\n   * è½¬æ¢æ¶é´æ ¼å¼è§åä¸ºmomentçformatè§å\r\n   * @param format format\r\n   */\r\n  private parseTimeFormat(format: string) {\r\n    return format.replace(/M/g, 'm');\r\n  }\r\n  /**\r\n   * æé bignumberæ°å­æ ¼å¼åéé¡¹\r\n   */\r\n  private buildNumberFormat() {\r\n    if (this.numberFormat) {\r\n      const { numberDecimalSeparator = null, numberGroupSeparator = null } = this.numberFormat;\r\n      const format: any = {\r\n        groupSize: 3,\r\n      };\r\n      if (numberDecimalSeparator !== null) {\r\n        format.decimalSeparator = numberDecimalSeparator;\r\n      }\r\n      if (numberGroupSeparator !== null) {\r\n        format.groupSeparator = numberGroupSeparator;\r\n      }\r\n      return format;\r\n    }\r\n  }\r\n  private get numberFormat(): NumberFormat {\r\n    return this.userSettings && this.userSettings.numberFormat || null;\r\n  }\r\n}","import { DialogService } from '@farris/ui-dialog';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GridComponent } from '@progress/kendo-angular-grid';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport {\r\n  KendoGridBindingDirective,\r\n  FarrisTreeTableBindingDirective,\r\n  LookupDataMappingDirective,\r\n  LookupEnableExtendLoadMethodDirective,\r\n  UIStateBindingDirective,\r\n  FarrisDisabledDirective,\r\n  FarrisDynamicColumnFormatDirective,\r\n  FarrisEditEnterDirective,\r\n  FarrisTextareaEditDirective,\r\n  FarrisSortDirective,\r\n  FarrisTreeTableFormatDirective,\r\n  GridColumnAggregateDirective,\r\n  GridSummaryDirective,\r\n  FarrisDatagridUseBindingDataDirective,\r\n  MultiSelectDataMappingDirective,\r\n  FarrisListViewBindingDirective,\r\n  EditableDirective,\r\n  InputEndEditDirective,\r\n  FarrisDataGridEndEditDirective,\r\n  HtmlEditorEndEditDirective,\r\n  KendoGridEndEditDirective,\r\n  FarrisDataGridRemoteSummaryDirective,\r\n  FarrisFilePreviewBindingDirective,\r\n  FarrisSetFocusDirective,\r\n  FarrisDiscussionEditorBindingDirective,\r\n  FarrisDiscussionListBindingDirective,\r\n  FarrisPrimengTreeTableBindingDirective,\r\n  FarrisDynamicRequiredDirective,\r\n  FarrisEditorDirective,\r\n  FarrisQuerySolutionEventBindDirective,\r\n  FarrisDateLocalizationDirective,\r\n  FarrisNumberLocalizationDirective,\r\n  FarrisTimeLocalizationDirective,\r\n  FarrisTextLocalizationDirective,\r\n  FarrisCheckboxModificationDirective,\r\n  FarrisLabelModificationDirective,\r\n  FarrisLookupBindingDirective,\r\n  ListNavComponentRefDirective,\r\n  ListViewComponentRefDirective,\r\n  ListFilterComponentRefDirective,\r\n  ViewChangeComponentRefDirective,\r\n  FilterComponentRefDirective,\r\n  SectionComponentRefDirective,\r\n  HtmlEditorComponentRefDirective,\r\n  InputGroupComponentRefDirective,\r\n  DatepickerComponentRefDirective,\r\n  TimePickerComponentRefDirective,\r\n  NumberSpinnerComponentRefDirective,\r\n  ComboListComponentRefDirective,\r\n  ComboLookupComponentRefDirective,\r\n  LookupGridComponentRefDirective,\r\n  DatagridComponentRefDirective,\r\n  TreetableComponentRefDirective,\r\n  WizardComponentRefDirective,\r\n  DiscussionEditorComponentRefDirective,\r\n  DiscussionListComponentRefDirective,\r\n  NavComponentRefDirective,\r\n  MultiSelectComponentRefDirective,\r\n  ScrollspyComponentRefDirective,\r\n  ComboLookupDataMappingDirective\r\n} from './directives/index';\r\nimport {\r\n  FarrisKendoGridFormatService, FarrisTreetableFormatService, StringToDatePipe,\r\n  DateFormatPlaceholderPipe, KendoGridFilterDirective, FormatTotalPipe\r\n} from './format/index';\r\nimport { ImageIdToUrlPipe, FormatPrimeNgTreeTableCellData, Localization } from './pipes/index';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FarrisCommonModule.forRoot()\r\n  ],\r\n  declarations: [\r\n    KendoGridBindingDirective,\r\n    FarrisTreeTableBindingDirective,\r\n    LookupDataMappingDirective,\r\n    LookupEnableExtendLoadMethodDirective,\r\n    UIStateBindingDirective,\r\n    FarrisDisabledDirective,\r\n    FarrisSortDirective,\r\n    FarrisDynamicColumnFormatDirective,\r\n    FarrisEditEnterDirective,\r\n    FarrisTextareaEditDirective,\r\n    FarrisTreeTableFormatDirective,\r\n    StringToDatePipe,\r\n    GridColumnAggregateDirective,\r\n    GridSummaryDirective,\r\n    DateFormatPlaceholderPipe,\r\n    ImageIdToUrlPipe,\r\n    FormatPrimeNgTreeTableCellData,\r\n    FarrisDatagridUseBindingDataDirective,\r\n    MultiSelectDataMappingDirective,\r\n    FarrisListViewBindingDirective,\r\n    EditableDirective,\r\n    KendoGridFilterDirective,\r\n    FormatTotalPipe,\r\n    InputEndEditDirective,\r\n    FarrisDataGridEndEditDirective,\r\n    HtmlEditorEndEditDirective,\r\n    KendoGridEndEditDirective,\r\n    FarrisDataGridRemoteSummaryDirective,\r\n    FarrisFilePreviewBindingDirective,\r\n    FarrisSetFocusDirective,\r\n    FarrisDiscussionEditorBindingDirective,\r\n    FarrisDiscussionListBindingDirective,\r\n    FarrisPrimengTreeTableBindingDirective,\r\n    FarrisDynamicRequiredDirective,\r\n    FarrisEditorDirective,\r\n    FarrisQuerySolutionEventBindDirective,\r\n    FarrisDateLocalizationDirective,\r\n    FarrisNumberLocalizationDirective,\r\n    FarrisTimeLocalizationDirective,\r\n    FarrisTextLocalizationDirective,\r\n    Localization,\r\n    FarrisCheckboxModificationDirective,\r\n    FarrisLabelModificationDirective,\r\n    FarrisLookupBindingDirective,\r\n    ListNavComponentRefDirective,\r\n    ListViewComponentRefDirective,\r\n    ListFilterComponentRefDirective,\r\n    ViewChangeComponentRefDirective,\r\n    FilterComponentRefDirective,\r\n    SectionComponentRefDirective,\r\n    HtmlEditorComponentRefDirective,\r\n    InputGroupComponentRefDirective,\r\n    DatepickerComponentRefDirective,\r\n    TimePickerComponentRefDirective,\r\n    NumberSpinnerComponentRefDirective,\r\n    ComboListComponentRefDirective,\r\n    ComboLookupComponentRefDirective,\r\n    LookupGridComponentRefDirective,\r\n    DatagridComponentRefDirective,\r\n    TreetableComponentRefDirective,\r\n    WizardComponentRefDirective,\r\n    DiscussionEditorComponentRefDirective,\r\n    DiscussionListComponentRefDirective,\r\n    NavComponentRefDirective,\r\n    MultiSelectComponentRefDirective,\r\n    ScrollspyComponentRefDirective,\r\n    ComboLookupDataMappingDirective\r\n  ],\r\n  providers: [\r\n    DialogService, GridComponent, FarrisKendoGridFormatService, FarrisTreetableFormatService],\r\n  exports: [\r\n    KendoGridBindingDirective,\r\n    FarrisTreeTableBindingDirective,\r\n    LookupDataMappingDirective,\r\n    LookupEnableExtendLoadMethodDirective,\r\n    UIStateBindingDirective,\r\n    FarrisDisabledDirective,\r\n    FarrisSortDirective,\r\n    FarrisDynamicColumnFormatDirective,\r\n    FarrisEditEnterDirective,\r\n    FarrisTextareaEditDirective,\r\n    FarrisTreeTableFormatDirective,\r\n    StringToDatePipe,\r\n    GridColumnAggregateDirective,\r\n    DateFormatPlaceholderPipe,\r\n    ImageIdToUrlPipe,\r\n    FormatPrimeNgTreeTableCellData,\r\n    FarrisDatagridUseBindingDataDirective,\r\n    MultiSelectDataMappingDirective,\r\n    FarrisListViewBindingDirective,\r\n    EditableDirective,\r\n    KendoGridFilterDirective,\r\n    FormatTotalPipe,\r\n    InputEndEditDirective,\r\n    FarrisDataGridEndEditDirective,\r\n    HtmlEditorEndEditDirective,\r\n    KendoGridEndEditDirective,\r\n    FarrisDataGridRemoteSummaryDirective,\r\n    FarrisFilePreviewBindingDirective,\r\n    FarrisSetFocusDirective,\r\n    FarrisDiscussionEditorBindingDirective,\r\n    FarrisDiscussionListBindingDirective,\r\n    FarrisPrimengTreeTableBindingDirective,\r\n    FarrisDynamicRequiredDirective,\r\n    FarrisEditorDirective,\r\n    FarrisQuerySolutionEventBindDirective,\r\n    FarrisDateLocalizationDirective,\r\n    FarrisNumberLocalizationDirective,\r\n    FarrisTimeLocalizationDirective,\r\n    FarrisTextLocalizationDirective,\r\n    Localization,\r\n    FarrisCheckboxModificationDirective,\r\n    FarrisLabelModificationDirective,\r\n    FarrisLookupBindingDirective,\r\n    ListNavComponentRefDirective,\r\n    ListViewComponentRefDirective,\r\n    ListFilterComponentRefDirective,\r\n    ViewChangeComponentRefDirective,\r\n    FilterComponentRefDirective,\r\n    SectionComponentRefDirective,\r\n    HtmlEditorComponentRefDirective,\r\n    InputGroupComponentRefDirective,\r\n    DatepickerComponentRefDirective,\r\n    TimePickerComponentRefDirective,\r\n    NumberSpinnerComponentRefDirective,\r\n    ComboListComponentRefDirective,\r\n    ComboLookupComponentRefDirective,\r\n    LookupGridComponentRefDirective,\r\n    DatagridComponentRefDirective,\r\n    TreetableComponentRefDirective,\r\n    WizardComponentRefDirective,\r\n    DiscussionEditorComponentRefDirective,\r\n    DiscussionListComponentRefDirective,\r\n    NavComponentRefDirective,\r\n    MultiSelectComponentRefDirective,\r\n    ScrollspyComponentRefDirective,\r\n    ComboLookupDataMappingDirective\r\n  ]\r\n})\r\nclass KendoBindingModule {\r\n}\r\n\r\nexport { KendoBindingModule };\r\n"]}