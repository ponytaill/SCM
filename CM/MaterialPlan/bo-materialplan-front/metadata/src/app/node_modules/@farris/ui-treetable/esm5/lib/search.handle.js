/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { cloneDeep } from 'lodash-es';
var SearchHandle = /** @class */ (function () {
    function SearchHandle(ttInstance) {
        this.ttInstance = ttInstance;
        this.allNodes = [];
    }
    // 刷新查询结果
    // 刷新查询结果
    /**
     * @param {?=} from
     * @return {?}
     */
    SearchHandle.prototype.research = 
    // 刷新查询结果
    /**
     * @param {?=} from
     * @return {?}
     */
    function (from) {
        if (from === void 0) { from = 'client'; }
        var _a = this.ttInstance.searchData, field = _a.field, value = _a.value;
        this.allNodes = [];
        this.search(field, value, from);
    };
    /**
     * @param {?} field
     * @param {?} value
     * @param {?=} from
     * @return {?}
     */
    SearchHandle.prototype.search = /**
     * @param {?} field
     * @param {?} value
     * @param {?=} from
     * @return {?}
     */
    function (field, value, from) {
        var _this = this;
        if (from === void 0) { from = 'client'; }
        if (!this.allNodes.length) {
            this.allNodes = cloneDeep(this.ttInstance.state.rowNodes);
        }
        switch (from) {
            case 'server':
                this.searchOnServer(field, value);
                break;
            default:
                if (value !== '' && value !== undefined) {
                    /** @type {?} */
                    var values = this.searchOnClient(field, value, this.allNodes);
                    this.ttInstance.state.searchRowNodes = null;
                    this._updateSerializedValues(values);
                }
                else {
                    this.ttInstance.updateSerializedValue();
                }
                if (this.ttInstance.checkeds && this.ttInstance.checkeds.length) {
                    this.ttInstance.checkedNodes(this.ttInstance.checkeds.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.data[_this.ttInstance.idField]; })));
                }
                else {
                    this.ttInstance.resize();
                    this.ttInstance.detectChanges();
                    if (this.ttInstance.psRef) {
                        this.ttInstance.psRef.directiveRef.update();
                    }
                }
                break;
        }
    };
    /**
     * @private
     * @param {?} visibleItems
     * @return {?}
     */
    SearchHandle.prototype._updateSerializedValues = /**
     * @private
     * @param {?} visibleItems
     * @return {?}
     */
    function (visibleItems) {
        var _this = this;
        /** @type {?} */
        var pids = ((/** @type {?} */ (visibleItems.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return tslib_1.__spread(n.parents, [n.id]); }))))).flat();
        /** @type {?} */
        var pidArr = Array.from(new Set(pids));
        /** @type {?} */
        var rowNodes = this.allNodes.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return pidArr.some((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item == n.id; })); })).map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            r.expanded = true;
            _this.ttInstance.updateNodeProperty(r.id, { expanded: true });
            return r;
        }));
        this.ttInstance.serializedValue = this.resetTreeData(null, rowNodes);
        this.ttInstance.state.searchRowNodes = this.ttInstance.serializedValue;
    };
    /**
     * @param {?} item
     * @param {?} allNodes
     * @return {?}
     */
    SearchHandle.prototype.findParent = /**
     * @param {?} item
     * @param {?} allNodes
     * @return {?}
     */
    function (item, allNodes) {
        var _this = this;
        /** @type {?} */
        var res = [];
        if (item && allNodes && allNodes.length) {
            /** @type {?} */
            var p = allNodes.find((/**
             * @param {?} t1
             * @return {?}
             */
            function (t1) { return t1.id === item.data[_this.ttInstance.idField]; }));
            res.push(p);
            if (p.parent) {
                res = res.concat(this.findParent(p.parent, allNodes));
            }
        }
        return res;
    };
    /**
     * @private
     * @param {?} item
     * @param {?} value
     * @param {?=} fields
     * @return {?}
     */
    SearchHandle.prototype.searchExpression = /**
     * @private
     * @param {?} item
     * @param {?} value
     * @param {?=} fields
     * @return {?}
     */
    function (item, value, fields) {
        var _this = this;
        if (fields === void 0) { fields = []; }
        /** @type {?} */
        var _fields = fields.length ? fields : this.ttInstance.columns.map((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.field; }));
        /** @type {?} */
        var results = _fields.map((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            /** @type {?} */
            var targetValue = '' + _this.getValue(f, item.node.data);
            if (targetValue !== undefined) {
                if (typeof targetValue === 'number') {
                    return targetValue === parseFloat(value);
                }
                else {
                    return targetValue.indexOf(value) > -1;
                }
            }
            else {
                _this.ttInstance.writeConsole("\u4E0D\u5B58\u5728\u5217 " + f);
            }
        }));
        return results.reduce((/**
         * @param {?} flag
         * @param {?} curr
         * @return {?}
         */
        function (flag, curr) {
            return flag || curr;
        }), false);
    };
    /**
     * @private
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    SearchHandle.prototype.getValue = /**
     * @private
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    function (field, data) {
        if (field) {
            if (field.indexOf('.') > -1) {
                try {
                    return field.split('.').reduce((/**
                     * @param {?} r
                     * @param {?} f
                     * @return {?}
                     */
                    function (r, f) {
                        if (r) {
                            return r[f];
                        }
                        else {
                            return null;
                        }
                    }), data);
                }
                catch (_a) {
                    this.ttInstance.writeConsole("\u5B57\u6BB5 " + field + " \u4E0D\u5B58\u5728\u3002");
                }
            }
            else {
                return data[field];
            }
        }
    };
    /**
     * @param {?} field
     * @param {?} value
     * @param {?} nodes
     * @return {?}
     */
    SearchHandle.prototype.getFindTextTotal = /**
     * @param {?} field
     * @param {?} value
     * @param {?} nodes
     * @return {?}
     */
    function (field, value, nodes) {
        var _this = this;
        /** @type {?} */
        var t = 0;
        /** @type {?} */
        var getCount = (/**
         * @param {?} fields
         * @return {?}
         */
        function (fields) {
            /** @type {?} */
            var c = 0;
            nodes.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                fields.forEach((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) {
                    /** @type {?} */
                    var targetValue = '' + _this.getValue(f, n.node.data);
                    if (targetValue !== undefined) {
                        if (targetValue.indexOf(value) > -1) {
                            c++;
                        }
                    }
                }));
            }));
            return c;
        });
        /** @type {?} */
        var _fields = [field];
        if (field === '*') {
            _fields = this.ttInstance.columns.map((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field; }));
        }
        else if (field.indexOf(',') > -1) {
            _fields = field.split(',').map((/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return f.trim(); }));
        }
        t = getCount(_fields);
        return t;
    };
    /**
     * @param {?} field
     * @param {?} value
     * @param {?} nodes
     * @return {?}
     */
    SearchHandle.prototype.searchOnClient = /**
     * @param {?} field
     * @param {?} value
     * @param {?} nodes
     * @return {?}
     */
    function (field, value, nodes) {
        var _this = this;
        /** @type {?} */
        var resultNodes = [];
        if (!value) {
            return [];
        }
        if (field === '*') {
            resultNodes = nodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return _this.searchExpression(n, value); }));
        }
        else if (field.indexOf(',') > -1) {
            resultNodes = nodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return _this.searchExpression(n, value, field.split(',').map((/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return f.trim(); }))); }));
        }
        else {
            value = value.toLowerCase();
            if (field.indexOf('.') === -1) {
                resultNodes = nodes.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return ('' + n.node.data[field]).toLowerCase().indexOf(value) > -1; }));
            }
            else {
                resultNodes = nodes.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return ('' + _this.getValue(field, n.node.data)).toLowerCase().indexOf(value) > -1; }));
            }
        }
        return resultNodes;
    };
    /**
     * @param {?} rowNodes
     * @param {?} allNodes
     * @return {?}
     */
    SearchHandle.prototype.findParents = /**
     * @param {?} rowNodes
     * @param {?} allNodes
     * @return {?}
     */
    function (rowNodes, allNodes) {
        var _this = this;
        /** @type {?} */
        var res = [];
        rowNodes.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            res = res.concat(_this.findParent(item.node, allNodes));
        }));
        return Array.from(new Set(res));
    };
    /**
     * @private
     * @param {?} parentNode
     * @param {?} visibleItems
     * @return {?}
     */
    SearchHandle.prototype.resetTreeData = /**
     * @private
     * @param {?} parentNode
     * @param {?} visibleItems
     * @return {?}
     */
    function (parentNode, visibleItems) {
        var _this = this;
        /** @type {?} */
        var res = [];
        /** @type {?} */
        var arr = [];
        if (parentNode === null) {
            arr = visibleItems.filter((/**
             * @param {?} t2
             * @return {?}
             */
            function (t2) { return t2.parent === parentNode; }));
        }
        else {
            parentNode.node.expanded = true;
            arr = visibleItems.filter((/**
             * @param {?} t2
             * @return {?}
             */
            function (t2) { return t2.parent && t2.parent.data[_this.ttInstance.idField] === parentNode.id; }));
            if (!arr.length) {
                parentNode.node.children = [];
            }
            else {
                parentNode.node.children = arr.map((/**
                 * @param {?} tn
                 * @return {?}
                 */
                function (tn) { return tn.node; }));
            }
        }
        arr.forEach((/**
         * @param {?} a
         * @return {?}
         */
        function (a) {
            a.visible = true;
            res.push(a);
            res = res.concat(_this.resetTreeData(a, visibleItems));
        }));
        return res;
    };
    /**
     * @private
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    SearchHandle.prototype.searchOnServer = /**
     * @private
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    function (field, value) {
    };
    return SearchHandle;
}());
export { SearchHandle };
if (false) {
    /** @type {?} */
    SearchHandle.prototype.allNodes;
    /**
     * @type {?}
     * @private
     */
    SearchHandle.prototype.ttInstance;
}
//# sourceMappingURL=data:application/json;base64,