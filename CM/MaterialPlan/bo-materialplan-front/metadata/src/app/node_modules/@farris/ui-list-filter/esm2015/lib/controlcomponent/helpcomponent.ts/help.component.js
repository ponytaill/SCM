/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, Output, EventEmitter } from '@angular/core';
import { ControlType } from '../../entity/controltype';
import { SolutionService } from '../../service/solution.service';
// import { ServerSideToken } from '@farris/ui-lookup';
// import { LookupHttpBeQueryService } from './service/Lookup-http.service';
import { of } from 'rxjs';
export class HelpComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.onSearch = (/**
         * @return {?}
         */
        () => {
            if (this.disabled) {
                return;
            }
            this.searchHandle.emit();
            return of(true);
        });
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.item) {
            /** @type {?} */
            const type = Object.prototype.toString.call(this.item.placeHolder);
            if (type == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.placeholder = this.item.control.placeholder;
                }
            }
            else {
                this.placeholder = this.item.placeHolder;
            }
        }
        this.getHelpBindingInfo();
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
        ((/** @type {?} */ (this.item.value))).clear$.subscribe((/**
         * @return {?}
         */
        () => {
            this.textValue = '';
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.getHelpBindingInfo();
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.textValue = ((/** @type {?} */ (this.item.value))).textValue;
            }
        }
    }
    /**
     * @param {?} selectedItem
     * @return {?}
     */
    selectedDataHandler(selectedItem) {
        // console.log(selectedItem);
        //    let mapFields=new Function('return'+(this.item.control as HelpContol).mapFields);
        //    let mapFieldsKeys=Object.keys(mapFields());
        //    (this.item.value as HelpValue).value=new Object();
        //    mapFieldsKeys.forEach(mapFeildKey => {
        //     (this.item.value as HelpValue).value[mapFeildKey]=selectedItem[mapFeildKey];
        //    });
        //    (this.item.value as HelpValue).valueField=(this.item.control as HelpContol).valueField;
        //    let textField=(this.item.control as HelpContol).textField;
        //    this.textValue=(this.item.value as HelpValue).value[textField];
        // console.log(selectedItem);
        //    let mapFields=new Function('return'+(this.item.control as HelpContol).mapFields);
        //    let mapFieldsKeys=Object.keys(mapFields());
        //    (this.item.value as HelpValue).value=new Object();
        //    mapFieldsKeys.forEach(mapFeildKey => {
        //     (this.item.value as HelpValue).value[mapFeildKey]=selectedItem[mapFeildKey];
        //    });
        //    (this.item.value as HelpValue).valueField=(this.item.control as HelpContol).valueField;
        //    let textField=(this.item.control as HelpContol).textField;
        //    this.textValue=(this.item.value as HelpValue).value[textField];
        /** @type {?} */
        const helpValue = ((/** @type {?} */ (this.item.value)));
        helpValue.value = this.singleSelect ? [selectedItem] : selectedItem; // 单选返回对象，多选返回数组
        helpValue.valueField = this.valueField;
        helpValue.textValue = helpValue.getTextValue(this.textField);
        this.textValue = helpValue.textValue;
        // this.conditionChange.emit();
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    }
    /**
     * @return {?}
     */
    getHelpBindingInfo() {
        if (this.item && this.item.control && this.item.control.getControlType() == ControlType.Help) {
            /** @type {?} */
            const helpList = ((/** @type {?} */ (this.item.control)));
            this.uri = helpList.uri;
            this.textField = helpList.textField;
            this.valueField = helpList.valueField;
            this.idField = helpList.idField;
            this.mapFields = helpList.mapFields;
            this.context = helpList.context;
            if (helpList.preEventCmd) {
                this.preEventCmd = (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    e['hostRef'] = this.hostRef;
                    return helpList.preEventCmd(e);
                });
            }
            if (helpList.postEventCmd) {
                this.postEventCmd = (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    e['hostRef'] = this.hostRef;
                    return helpList.postEventCmd(e);
                });
            }
            this.singleSelect = helpList.singleSelect;
            this.enableFullTree = helpList.enableFullTree;
            this.loadTreeDataType = helpList.loadTreeDataType;
            this.expandLevel = helpList.expandLevel;
            this.enableCascade = helpList.enableCascade;
            this.helpId = helpList.helpId;
            this.title = helpList.title;
            /** @type {?} */
            const helpValue = ((/** @type {?} */ (this.item.value)));
            this.clearFields = helpList.clearFields;
            // if (helpValue && helpValue.value) {
            //     // this.textValue = (this.item.value as HelpValue).value[this.textField];
            //     this.textValue = HelpValue.getPropValue(helpValue.value, this.textField.split('.'));
            // }
            this.displayType = helpList.displayType;
            if (helpValue.textValue == 'help-text-value-null') { // 旧数据兼容
                this.textValue = helpValue.getTextValue(this.textField);
            }
            else {
                this.textValue = helpValue.textValue;
            }
        }
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clearData(data) {
        ((/** @type {?} */ (this.item.value))).clearValue();
        this.searchHandle.emit();
    }
}
HelpComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-help',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <farris-lookup-grid  \r\n        [uri]=\"uri\"\r\n        [title]=\"title\"\r\n        [idField]=\"idField\" \r\n        [textField]=\"textField\" \r\n        [valueField]=\"valueField\" \r\n        [(ngModel)]=\"textValue\"\r\n        [displayType]=\"displayType\"\r\n        [editable]=\"false\"\r\n        [readonly]=\"disabled\"\r\n        (clear)=\"clearData($event)\"\r\n        (selectedData)=\"selectedDataHandler($event)\"\r\n        [placeholder]=\"placeholder\"\r\n        [mapFields]=\"mapFields\"\r\n        [dictPicking]=\"preEventCmd\"\r\n        [dictPicked]=\"postEventCmd\"\r\n        [context]=\"context\"\r\n        [enableFullTree]=\"enableFullTree\"\r\n        [loadTreeDataType]=\"loadTreeDataType\"\r\n        [singleSelect]=\"singleSelect\"\r\n        [expandLevel]=\"expandLevel\"\r\n        [enableCascade]=\"enableCascade\"\r\n        [clear-fields]=\"clearFields\"\r\n    >\r\n    </farris-lookup-grid>\r\n\r\n    <!-- [dictPicked]=\"onSearch\" -->\r\n    <!-- (selectedData)=\"selectedDataHandler($event)\" -->\r\n</div>"
                // providers: [{ provide: ServerSideToken, useClass: LookupHttpBeQueryService }]
            }] }
];
/** @nocollapse */
HelpComponent.ctorParameters = () => [
    { type: SolutionService }
];
HelpComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    hostRef: [{ type: Input }],
    searchHandle: [{ type: Output }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
    changeFields: [{ type: Input }]
};
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    HelpComponent.prototype.item;
    /** @type {?} */
    HelpComponent.prototype.autoLabel;
    /** @type {?} */
    HelpComponent.prototype.disabled;
    /** @type {?} */
    HelpComponent.prototype.hostRef;
    /** @type {?} */
    HelpComponent.prototype.searchHandle;
    /** @type {?} */
    HelpComponent.prototype.uri;
    /** @type {?} */
    HelpComponent.prototype.textField;
    /** @type {?} */
    HelpComponent.prototype.idField;
    /** @type {?} */
    HelpComponent.prototype.valueField;
    /** @type {?} */
    HelpComponent.prototype.textValue;
    /** @type {?} */
    HelpComponent.prototype.displayType;
    /** @type {?} */
    HelpComponent.prototype.mapFields;
    /** @type {?} */
    HelpComponent.prototype.context;
    /** @type {?} */
    HelpComponent.prototype.preEventCmd;
    /** @type {?} */
    HelpComponent.prototype.postEventCmd;
    /** @type {?} */
    HelpComponent.prototype.enableFullTree;
    /** @type {?} */
    HelpComponent.prototype.loadTreeDataType;
    /** @type {?} */
    HelpComponent.prototype.singleSelect;
    /** @type {?} */
    HelpComponent.prototype.expandLevel;
    /** @type {?} */
    HelpComponent.prototype.enableCascade;
    /** @type {?} */
    HelpComponent.prototype.helpId;
    /** @type {?} */
    HelpComponent.prototype.title;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    HelpComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    HelpComponent.prototype.showlabel;
    /** @type {?} */
    HelpComponent.prototype.placeholder;
    /**
     * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
     * @type {?}
     */
    HelpComponent.prototype.changeFields;
    /**
     * 要清空的关联字段
     * @type {?}
     */
    HelpComponent.prototype.clearFields;
    /** @type {?} */
    HelpComponent.prototype.onSearch;
    /**
     * @type {?}
     * @private
     */
    HelpComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,