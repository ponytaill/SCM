// tslint:disable-next-line: no-namespace
export var Expression;
(function (Expression) {
    /**
     * 表达式绑定字段类型（表达式绑定到实体、UIState?）
     */
    var ExpressionBindingType;
    (function (ExpressionBindingType) {
        ExpressionBindingType["State"] = "State";
        ExpressionBindingType["Field"] = "Field";
    })(ExpressionBindingType = Expression.ExpressionBindingType || (Expression.ExpressionBindingType = {}));
    /**
     * 表达式类型
     */
    var ExpressionType;
    (function (ExpressionType) {
        /**
         * 必填表达式
         */
        ExpressionType["Required"] = "require";
        /**
         * 只读表达式
         */
        ExpressionType["Readonly"] = "readonly";
        /**
         * 计算表达式
         */
        ExpressionType["Compute"] = "compute";
        /**
         * 依赖表达式
         */
        ExpressionType["Dependency"] = "dependency";
        /**
         * 是否可见
         */
        ExpressionType["Visible"] = "visible";
        /**
         * 关联表达式
         */
        ExpressionType["Relative"] = "relative";
        /**
         * 校验表达式
         */
        ExpressionType["Validate"] = "validate";
        /**
         * 帮助前
         */
        ExpressionType["DataPicking"] = "dataPicking";
    })(ExpressionType = Expression.ExpressionType || (Expression.ExpressionType = {}));
    /**
     * 事件类型
     */
    var EventType;
    (function (EventType) {
        EventType["ValueChanged"] = "VALUE_CHANGED";
        EventType["SelectionChanged"] = "SELECTION_CHANGED";
        EventType["Load"] = "Load";
        EventType["Append"] = "Append";
        EventType["Remove"] = "Remove";
        EventType["Update"] = "Update";
    })(EventType = Expression.EventType || (Expression.EventType = {}));
    var EventSource;
    (function (EventSource) {
        EventSource["Field"] = "Field";
        EventSource["State"] = "State";
        EventSource["BindingData"] = "BindingData";
        EventSource["Repository"] = "Repository";
    })(EventSource = Expression.EventSource || (Expression.EventSource = {}));
    var MessageType;
    (function (MessageType) {
        MessageType["error"] = "error";
        MessageType["info"] = "info";
        MessageType["warning"] = "warning";
    })(MessageType = Expression.MessageType || (Expression.MessageType = {}));
    var EffectPath;
    (function (EffectPath) {
        EffectPath[EffectPath["currentRow"] = 0] = "currentRow";
    })(EffectPath = Expression.EffectPath || (Expression.EffectPath = {}));
    Expression.MESSAGE = {
        'zh-CHS': {
            require: "\u8BF7\u8F93\u5165'$property'",
            validate: "'$property'\u6821\u9A8C\u4E0D\u901A\u8FC7",
            dataPicking: '帮助前表达式校验不通过'
        },
        en: {
            require: "Please input '$property'",
            validate: "'$property' calibration failed",
            dataPicking: 'Failed to verify the expression before help'
        },
        'zh-CHT': {
            require: "\u8ACB\u8F38\u5165'$property'",
            validate: "'$property'\u6821\u9A57\u4E0D\u901A\u904E",
            dataPicking: '幫助前表達式校驗不通過'
        }
    };
    Expression.DEPENDENCY_SPLITER = '/';
})(Expression || (Expression = {}));
//# sourceMappingURL=data:application/json;base64,