/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-06-16 13:44:59
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-24 13:49:33
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { NgModule } from '@angular/core';
import { FarrisSafePipe } from './safe.pipe';
import { FarrisTemplateDirective } from './directives/farris-template.directive';
import { IdService } from './id.service';
import { ResizeObserverDirective } from './directives/resize-observer.directive';
import { FarrisReplaceXPipe } from './replaceX.pipe';
import { RuntimeStateService } from './service/runtime-state.service';
import { CommonUtils } from './common.utils';
var FarrisCommonModule = /** @class */ (function () {
    function FarrisCommonModule() {
    }
    /**
     * @return {?}
     */
    FarrisCommonModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: FarrisCommonModule,
            providers: [
                CommonUtils,
                RuntimeStateService,
                IdService
            ]
        };
    };
    FarrisCommonModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        FarrisSafePipe,
                        FarrisTemplateDirective,
                        ResizeObserverDirective,
                        FarrisReplaceXPipe
                    ],
                    imports: [],
                    exports: [
                        FarrisSafePipe,
                        FarrisTemplateDirective,
                        ResizeObserverDirective,
                        FarrisReplaceXPipe
                    ]
                },] }
    ];
    return FarrisCommonModule;
}());
export { FarrisCommonModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM3QyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNqRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QztJQUFBO0lBMkJBLENBQUM7Ozs7SUFWVSwwQkFBTzs7O0lBQWQ7UUFDSSxPQUFPO1lBQ0gsUUFBUSxFQUFFLGtCQUFrQjtZQUM1QixTQUFTLEVBQUU7Z0JBQ1AsV0FBVztnQkFDWCxtQkFBbUI7Z0JBQ25CLFNBQVM7YUFDWjtTQUNKLENBQUM7SUFDTixDQUFDOztnQkExQkosUUFBUSxTQUFDO29CQUNOLFlBQVksRUFBRTt3QkFDVixjQUFjO3dCQUNkLHVCQUF1Qjt3QkFDdkIsdUJBQXVCO3dCQUN2QixrQkFBa0I7cUJBQ3JCO29CQUNELE9BQU8sRUFBRSxFQUNSO29CQUNELE9BQU8sRUFBRTt3QkFDTCxjQUFjO3dCQUNkLHVCQUF1Qjt3QkFDdkIsdUJBQXVCO3dCQUN2QixrQkFBa0I7cUJBQ3JCO2lCQUNKOztJQVlELHlCQUFDO0NBQUEsQUEzQkQsSUEyQkM7U0FYWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBAQXV0aG9yOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBEYXRlOiAyMDE5LTA2LTE2IDEzOjQ0OjU5XHJcbiAqIEBMYXN0RWRpdG9yczog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTEwLTI0IDEzOjQ5OjMzXHJcbiAqIEBRUTogMTA1NTgxODIzOVxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqL1xyXG5pbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGYXJyaXNTYWZlUGlwZSB9IGZyb20gJy4vc2FmZS5waXBlJztcclxuaW1wb3J0IHsgRmFycmlzVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvZmFycmlzLXRlbXBsYXRlLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IElkU2VydmljZSB9IGZyb20gJy4vaWQuc2VydmljZSc7XHJcbmltcG9ydCB7IFJlc2l6ZU9ic2VydmVyRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL3Jlc2l6ZS1vYnNlcnZlci5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBGYXJyaXNSZXBsYWNlWFBpcGUgfSBmcm9tICcuL3JlcGxhY2VYLnBpcGUnO1xyXG5pbXBvcnQgeyBSdW50aW1lU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlL3J1bnRpbWUtc3RhdGUuc2VydmljZSc7XHJcbmltcG9ydCB7IENvbW1vblV0aWxzIH0gZnJvbSAnLi9jb21tb24udXRpbHMnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICAgIGRlY2xhcmF0aW9uczogW1xyXG4gICAgICAgIEZhcnJpc1NhZmVQaXBlLFxyXG4gICAgICAgIEZhcnJpc1RlbXBsYXRlRGlyZWN0aXZlLFxyXG4gICAgICAgIFJlc2l6ZU9ic2VydmVyRGlyZWN0aXZlLFxyXG4gICAgICAgIEZhcnJpc1JlcGxhY2VYUGlwZVxyXG4gICAgXSxcclxuICAgIGltcG9ydHM6IFtcclxuICAgIF0sXHJcbiAgICBleHBvcnRzOiBbXHJcbiAgICAgICAgRmFycmlzU2FmZVBpcGUsXHJcbiAgICAgICAgRmFycmlzVGVtcGxhdGVEaXJlY3RpdmUsXHJcbiAgICAgICAgUmVzaXplT2JzZXJ2ZXJEaXJlY3RpdmUsXHJcbiAgICAgICAgRmFycmlzUmVwbGFjZVhQaXBlXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYXJyaXNDb21tb25Nb2R1bGUge1xyXG4gICAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmdNb2R1bGU6IEZhcnJpc0NvbW1vbk1vZHVsZSxcclxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgICAgICAgICBDb21tb25VdGlscyxcclxuICAgICAgICAgICAgICAgIFJ1bnRpbWVTdGF0ZVNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgICBJZFNlcnZpY2VcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuIl19