/**
 * @fileoverview added by tsickle
 * Generated from: lib/querycondition.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, Input, ComponentFactoryResolver, Injector, Output, EventEmitter, LOCALE_ID, ViewChild, NgZone } from '@angular/core';
import { CommunicationService } from './service/communicationservice';
import { ConvertorService } from './service/convertorservice';
import { ControlType } from './entity/controltype';
import { ConfigDialogComponent } from './fieldconfigdialog/configdialog.component';
import { BsModalService } from '@farris/ui-modal';
import { SolutionService } from './service/solution.service';
import { LocaleService } from '@farris/ui-locale';
import { Subject } from 'rxjs';
export class QueryConditionComponent {
    /**
     * @param {?} communicationService
     * @param {?} convertorService
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} localeService
     */
    constructor(communicationService, convertorService, resolver, injector, modalService, localeService) {
        this.communicationService = communicationService;
        this.convertorService = convertorService;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.localeService = localeService;
        this._resetFieldConfigs = [];
        this.isControlInline = true;
        this.showCompleteLabel = false;
        this.fieldConditionsChange = new EventEmitter();
        this.localeIds = {
            'en': 'en',
            'zh-CHS': 'zh-CHS'
        };
        this.controlType = ControlType;
        this.showButton = false;
        this.fieldCodeOfClearFields = [];
        this.destroy$ = new Subject();
        // 获取ngZone
        this.ngZone = null;
        this.currentLocale = this.injector.get(LOCALE_ID);
        this.solutionService = this.injector.get(SolutionService);
        if (!this.ngZone) {
            this.ngZone = this.injector.get(NgZone, null);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set resetFieldConfigs(value) {
        if (value && value.length > 0) {
            this.solutionService.updateControlConfigState(value);
        }
        this._resetFieldConfigs = value;
    }
    /**
     * @return {?}
     */
    get resetFieldConfigs() {
        return this._resetFieldConfigs;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectedFieldConditions(value) {
        this._selectedFieldConditions = value;
    }
    /**
     * @return {?}
     */
    get selectedFieldConditions() {
        return this._selectedFieldConditions;
    }
    ;
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.currentLocale === this.localeIds['en']) {
            this.isControlInline = false;
        }
        this.selectedFieldConditions = this.selectedFieldConditions || new Array();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
    }
    /**
     * @param {?} currentItem
     * @return {?}
     */
    hasSetMultiClass(currentItem) {
        if (currentItem.control.className && currentItem.control.className.indexOf('farris-group-multi-label') > -1) {
            return true;
        }
        return false;
    }
    /* */
    /**
     * @param {?} currentItem
     * @return {?}
     */
    getStyle(currentItem) {
        /** @type {?} */
        const defaultCondtionStyle = 'col-12 col-md-6 col-xl-3 col-el-2';
        // 设置显示标签全并且显示了折行
        // if(this.showCompleteLabel && currentItem.control.className == 'farris-group-multi-label'){
        //     return defaultCondtionStyle.concat(" farris-group-multi-label");
        // }
        /** @type {?} */
        let className = currentItem.control.className;
        className = className ? className.replace('farris-group-multi-label', '') : '';
        return className ? className : defaultCondtionStyle;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    configDialogConfirm(event) {
        /** @type {?} */
        const configData = (/** @type {?} */ ((/** @type {?} */ (event))));
        /** @type {?} */
        const reConfigConditions = new Array();
        for (const data of configData) {
            /** @type {?} */
            const target = this.selectedFieldConditions.find((/**
             * @param {?} condition
             * @return {?}
             */
            condition => condition.fieldCode == data));
            if (target) {
                reConfigConditions.push(target);
            }
            else {
                reConfigConditions.push(this.fieldConfigs.find((/**
                 * @param {?} condition
                 * @return {?}
                 */
                condition => condition.fieldCode == data)));
            }
        }
        for (const condition of this.selectedFieldConditions) {
            if (!condition.visible) {
                reConfigConditions.push(condition);
            }
        }
        this.selectedFieldConditions = reConfigConditions;
        this.fieldConditionsChange.emit(this.selectedFieldConditions);
    }
    /**
     * @return {?}
     */
    openFieldConfigDialog() {
        this.configDialog.inputSelectedFileds = this.selectedFieldConditions ? this.selectedFieldConditions : [];
        this.configDialog.dialog.show();
    }
    /**
     * @param {?=} exceptRequired
     * @return {?}
     */
    resetSelectedConditionValues(exceptRequired = false) {
        return this.selectedFieldConditions.map((/**
         * @param {?} fieldCondition
         * @return {?}
         */
        fieldCondition => {
            if (exceptRequired) {
                if (!fieldCondition.control.isRequired()) {
                    fieldCondition.value.clearValue();
                }
            }
            else {
                fieldCondition.value.clearValue();
            }
            return fieldCondition;
        }));
    }
    /**
     * @return {?}
     */
    conditionChange() {
        this.fieldConditionsChange.emit(this.selectedFieldConditions);
    }
    /**
     * @param {?} conditions
     * @return {?}
     */
    confirmLabelFormat(conditions) {
        if (this.isControlInline) {
            this.labelFormat = 'farris-form-controls-inline';
            /** @type {?} */
            let hasCustom = false;
            if (conditions.length) {
                // 复选框label标签目前在框的右侧，超出宽度后下方出现滚动条，计算标签最大长度时需将其排除
                /** @type {?} */
                let noCheckBoxConditions = [];
                conditions.forEach((/**
                 * @param {?} condition
                 * @return {?}
                 */
                condition => {
                    if (condition.control.getControlType() != ControlType.BoolCheck) {
                        noCheckBoxConditions.push(condition);
                    }
                    if (condition.control['className'] && condition.control['className'] != 'farris-group-multi-label') {
                        hasCustom = true;
                    }
                }));
                this.labelFormat += hasCustom ? ' condition-is-custom' : ' condition-with-fixed';
                /** @type {?} */
                let maxLength = 0;
                if (noCheckBoxConditions.length) {
                    noCheckBoxConditions.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        maxLength = (item.fieldName.length > maxLength) ? (item.fieldName.length) : maxLength;
                    }));
                }
                //需要完整显示控件标签时，根据标签最大长度确定标签栏每行可显示的字符数
                if (this.showCompleteLabel) {
                    if (maxLength > 8) {
                        //标签超出8个字符后，设置每行最多可显示10个字符
                        this.labelFormat = this.labelFormat.concat(" f-form-label-xl");
                    }
                    else if ((maxLength < 9) && (maxLength > 6)) {
                        //标签超出6个字符、不超过8个字符时，设置每行最多可显示8个字符
                        this.labelFormat = this.labelFormat.concat(" f-form-label-lg");
                    }
                }
            }
        }
        if (this.labelFormat) {
            return this.labelFormat + (this.isControlInline && this.showCompleteLabel ? ' condition-with-complete' : '');
        }
    }
}
QueryConditionComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-querycondition',
                template: "<div class=\"row f-utils-flex-row-wrap farris-form {{confirmLabelFormat(selectedFieldConditions)}} condition-div\"  id=\"querycondition\" #queryConditionWrap>\r\n    <ng-container *ngFor=\"let currentItem of selectedFieldConditions;let i=index;\">\r\n        <app-solution-input  \r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.Text && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-input>\r\n\r\n        <app-solution-inputgroup\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.InputGroup && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-inputgroup>\r\n        \r\n        <app-solution-dropdownlist\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.DropDownList && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-dropdownlist>\r\n        \r\n        <app-solution-smarthelp\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SmartHelp && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-smarthelp>\r\n        \r\n        <app-solution-single-number\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleNumber && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-single-number>\r\n\r\n        <app-solution-numberrange\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.NumberRange && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-numberrange>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleDate && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.DateRange && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n\r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleYear && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleMonth && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.MonthRange && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleDateTime && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.DateTimeRange && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n\r\n        <app-solution-combolookup\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.ComboLookUp && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-combolookup>\r\n\r\n        <app-solution-checkbox\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.BoolCheck && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-checkbox>\r\n\r\n        <app-solution-radio\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.Radio && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-radio>\r\n    </ng-container>\r\n</div>\r\n<app-queryconfigdialog \r\n    #configDialog \r\n    [inputSelectedFileds]=\"selectedFieldConditions\" \r\n    [filedsDataSource]=\"fieldConfigs\"\r\n    (confirmEmitter)=\"configDialogConfirm($event)\">\r\n</app-queryconfigdialog>",
                encapsulation: ViewEncapsulation.None,
                providers: [CommunicationService],
                styles: [".condition-div{min-height:30px}.f-solution-radio-group .farris-checkradio-hor{flex-wrap:nowrap;overflow-x:auto}.f-solution-radio-group .farris-checkradio-hor::-webkit-scrollbar{width:6px;height:6px;background-color:#eee}.f-solution-radio-group .farris-checkradio-hor::-webkit-scrollbar-track{border-radius:0}.f-solution-radio-group .farris-checkradio-hor::-webkit-scrollbar-thumb{background-color:rgba(0,0,0,.15);-webkit-transition:.2s;transition:.2s;border-radius:6px}.f-solution-radio-group .farris-checkradio-hor::-webkit-scrollbar-thumb:hover{background-color:rgba(0,0,0,.45)}.f-solution-radio-group .farris-checkradio-hor .custom-radio{flex-shrink:0}"]
            }] }
];
/** @nocollapse */
QueryConditionComponent.ctorParameters = () => [
    { type: CommunicationService },
    { type: ConvertorService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: LocaleService }
];
QueryConditionComponent.propDecorators = {
    fieldConfigs: [{ type: Input }],
    resetFieldConfigs: [{ type: Input }],
    isControlInline: [{ type: Input }],
    selectedFieldConditions: [{ type: Input }],
    showCompleteLabel: [{ type: Input }],
    isDisabled: [{ type: Input }],
    fieldConditionsChange: [{ type: Output }],
    configDialog: [{ type: ViewChild, args: ['configDialog',] }],
    queryConditionWrapEl: [{ type: ViewChild, args: ["queryConditionWrap",] }]
};
if (false) {
    /** @type {?} */
    QueryConditionComponent.prototype.fieldConfigs;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype._resetFieldConfigs;
    /** @type {?} */
    QueryConditionComponent.prototype.isControlInline;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype._selectedFieldConditions;
    /** @type {?} */
    QueryConditionComponent.prototype.showCompleteLabel;
    /** @type {?} */
    QueryConditionComponent.prototype.isDisabled;
    /** @type {?} */
    QueryConditionComponent.prototype.fieldConditionsChange;
    /** @type {?} */
    QueryConditionComponent.prototype.configDialog;
    /** @type {?} */
    QueryConditionComponent.prototype.localeIds;
    /** @type {?} */
    QueryConditionComponent.prototype.currentLocale;
    /** @type {?} */
    QueryConditionComponent.prototype.solutionService;
    /** @type {?} */
    QueryConditionComponent.prototype.controlType;
    /** @type {?} */
    QueryConditionComponent.prototype.labelFormat;
    /** @type {?} */
    QueryConditionComponent.prototype.showButton;
    /** @type {?} */
    QueryConditionComponent.prototype.fieldCodeOfClearFields;
    /** @type {?} */
    QueryConditionComponent.prototype.destroy$;
    /** @type {?} */
    QueryConditionComponent.prototype.queryConditionWrapEl;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype.communicationService;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype.convertorService;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    QueryConditionComponent.prototype.localeService;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,