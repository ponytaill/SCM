/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffilepreview-adapt-unifile.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { NotifyService } from '@farris/ui-notify';
import { FileViewerService } from '@gsp-svc/file-viewer';
import { DownloadService } from '@gsp-svc/formdoc-upload';
import { FFileUploadAdaptUnifileConfigService } from './ffileupload-adapt-unifile.config';
import * as i0 from "@angular/core";
import * as i1 from "@gsp-svc/file-viewer";
import * as i2 from "./ffileupload-adapt-unifile.config";
import * as i3 from "@gsp-svc/formdoc-upload";
export class FfilepreviewAdaptUnifileService {
    /**
     * @param {?} fileviewSer
     * @param {?} configSer
     * @param {?} downloadSer
     */
    constructor(fileviewSer, configSer, downloadSer) {
        this.fileviewSer = fileviewSer;
        this.configSer = configSer;
        this.downloadSer = downloadSer;
        // 暂时用于简单合并
        this.previewExtendServerConfig = null;
        this.notifySer = null;
        this.extendData = this.configSer.getConfig();
        this.notifySer = this.fileviewSer['injector'].get(NotifyService, null);
    }
    /**
     * 返回最终属性值
     * @private
     * @param {?} key
     * @param {?} extendValue
     * @return {?}
     */
    getFinallyConfig(key, extendValue) {
        if (extendValue && extendValue.hasOwnProperty(key)) {
            return extendValue[key];
        }
        // 避免下载等其他指令再传入扩展配置
        if (this.previewExtendServerConfig && this.previewExtendServerConfig.hasOwnProperty(key)) {
            return this.previewExtendServerConfig[key];
        }
        // 来自module中forRoot的配置
        if (this.extendData.hasOwnProperty(key)) {
            return this.extendData[key];
        }
        return null;
    }
    /**
     * 预览单个文件
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    previewFile(info, extendService) {
        return this.previewFileList([info], extendService);
    }
    /**
     * 预览整个列表
     * @param {?} infos
     * @param {?} extendService
     * @return {?}
     */
    previewFileList(infos, extendService) {
        //metadataIdList: string[]
        /** @type {?} */
        let rootId = this.getFinallyConfig('rootId', extendService);
        /** @type {?} */
        let metadataIdList = [];
        infos.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            metadataIdList.push(item.extend['metadataId']);
        }));
        /** @type {?} */
        let options = this.getFinallyConfig('options', extendService);
        if (options) {
            return this.fileviewSer.viewerFileList(metadataIdList, rootId, options);
        }
        else {
            return this.fileviewSer.viewerFileList(metadataIdList, rootId);
        }
    }
    /**
     * 下载附件
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    downloadFile(info, extendService) {
        if (!info.id) {
            throw new Error('请设置要下载的附件');
        }
        window.open(this.getImgSrc(info, extendService));
    }
    /**
     * 下载附件
     * @param {?} infos
     * @param {?} extendService
     * @return {?}
     */
    multiDownloadFiles(infos, extendService) {
        //metadataIdList: string[]
        if (infos.length == 1) {
            this.downloadFile(infos[0], extendService);
        }
        else {
            /** @type {?} */
            let rootId = this.getFinallyConfig('rootId', extendService);
            /** @type {?} */
            let metadataIdList = [];
            infos.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                metadataIdList.push(item.extend['metadataId']);
            }));
            /** @type {?} */
            let url = this.downloadSer.getMultipleDownloadUrl(JSON.stringify(metadataIdList), rootId);
            window.open(url);
        }
    }
    /**
     * @param {?} infos
     * @param {?=} name
     * @param {?=} extendService
     * @return {?}
     */
    multiDownloadFilesWidthName(infos, name = "", extendService) {
        //metadataIdList: string[]
        if (infos.length == 1) {
            this.downloadFile(infos[0], extendService);
        }
        else {
            /** @type {?} */
            let rootId = this.getFinallyConfig('rootId', extendService);
            /** @type {?} */
            let metadataIdList = [];
            infos.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                metadataIdList.push(item.extend['metadataId']);
            }));
            /** @type {?} */
            let url = this.downloadSer.getMultipleDownloadUrlWithName(JSON.stringify(metadataIdList), rootId, name);
            window.open(url);
        }
    }
    /**
     * 获取下载链接
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    getImgSrc(info, extendService) {
        if (!info.id) {
            throw new Error('请设置要下载的附件');
        }
        /** @type {?} */
        let url = '';
        /** @type {?} */
        let attachId = info.extend['metadataId'];
        /** @type {?} */
        let rootId = this.getFinallyConfig('rootId', extendService);
        // 文档服务服务单元名进行规范性调整，由document修改为dfs
        if (this.downloadSer) {
            if (rootId) {
                url = this.downloadSer.getDownloadUrl(attachId, rootId);
            }
        }
        else if (rootId) {
            console.warn('因为安全问题，附件下载提供安全校验机制，附件下载功能需要重新编译');
            url = `/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${attachId}&rootid=${rootId}`;
        }
        return url;
    }
    /**
     * 根据预览指令的扩展配置获取
     * @param {?} value
     * @return {?}
     */
    setPreviwExtendServerConfig(value) {
        this.previewExtendServerConfig = value;
    }
    /**
     * @return {?}
     */
    getPreviewExtendServerConfig() {
        return this.previewExtendServerConfig;
    }
}
FfilepreviewAdaptUnifileService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FfilepreviewAdaptUnifileService.ctorParameters = () => [
    { type: FileViewerService },
    { type: FFileUploadAdaptUnifileConfigService },
    { type: DownloadService, decorators: [{ type: Optional }] }
];
/** @nocollapse */ FfilepreviewAdaptUnifileService.ngInjectableDef = i0.defineInjectable({ factory: function FfilepreviewAdaptUnifileService_Factory() { return new FfilepreviewAdaptUnifileService(i0.inject(i1.FileViewerService), i0.inject(i2.FFileUploadAdaptUnifileConfigService), i0.inject(i3.DownloadService, 8)); }, token: FfilepreviewAdaptUnifileService, providedIn: "root" });
if (false) {
    /** @type {?} */
    FfilepreviewAdaptUnifileService.prototype.extendData;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.previewExtendServerConfig;
    /** @type {?} */
    FfilepreviewAdaptUnifileService.prototype.notifySer;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.fileviewSer;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.configSer;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.downloadSer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmZpbGVwcmV2aWV3LWFkYXB0LXVuaWZpbGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZXh0ZW5kLWZpbGV1cGxvYWQtYWRhcHQtdW5pZmlsZS8iLCJzb3VyY2VzIjpbImxpYi9mZmlsZXByZXZpZXctYWRhcHQtdW5pZmlsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsb0NBQW9DLEVBQWlDLE1BQU0sb0NBQW9DLENBQUM7Ozs7O0FBS3pILE1BQU0sT0FBTywrQkFBK0I7Ozs7OztJQUl4QyxZQUFvQixXQUE4QixFQUFVLFNBQStDLEVBQXNCLFdBQTRCO1FBQXpJLGdCQUFXLEdBQVgsV0FBVyxDQUFtQjtRQUFVLGNBQVMsR0FBVCxTQUFTLENBQXNDO1FBQXNCLGdCQUFXLEdBQVgsV0FBVyxDQUFpQjs7UUFGckosOEJBQXlCLEdBQWtDLElBQUksQ0FBQztRQUN4RSxjQUFTLEdBQWtCLElBQUksQ0FBQztRQUU1QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0UsQ0FBQzs7Ozs7Ozs7SUFPTyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsV0FBVztRQUNyQyxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FB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QUFDLGtDQUFrQyxDQUFDLENBQUE7WUFDaEQsR0FBRyxHQUFHLHdEQUF3RCxRQUFRLFdBQVcsTUFBTSxFQUFFLENBQUM7U0FDN0Y7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7OztJQUtELDJCQUEyQixDQUFDLEtBQUs7UUFDN0IsSUFBSSxDQUFDLHlCQUF5QixHQUFHLEtBQUssQ0FBQztJQUMzQyxDQUFDOzs7O0lBQ0QsNEJBQTRCO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDO0lBQzFDLENBQUM7OztZQWpJSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7WUFOUSxpQkFBaUI7WUFFakIsb0NBQW9DO1lBRHBDLGVBQWUsdUJBVTBGLFFBQVE7Ozs7O0lBSHRILHFEQUFXOzs7OztJQUNYLG9FQUF3RTs7SUFDeEUsb0RBQWdDOzs7OztJQUNwQixzREFBc0M7Ozs7O0lBQUUsb0RBQXVEOzs7OztJQUFFLHNEQUFnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZVcGxvYWRGaWxlRXh0ZW5kIH0gZnJvbSAnQGZhcnJpcy9leHRlbmQtZmlsZS11cGxvYWQnO1xyXG5pbXBvcnQgeyBOb3RpZnlTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBGaWxlVmlld2VyU2VydmljZSB9IGZyb20gJ0Bnc3Atc3ZjL2ZpbGUtdmlld2VyJztcclxuaW1wb3J0IHsgRG93bmxvYWRTZXJ2aWNlIH0gZnJvbSAnQGdzcC1zdmMvZm9ybWRvYy11cGxvYWQnO1xyXG5pbXBvcnQgeyBGRmlsZVVwbG9hZEFkYXB0VW5pZmlsZUNvbmZpZ1NlcnZpY2UsIEZGaWxlVXBsb2FkQWRhcHRVbmlmaWxlQ29uZmlnIH0gZnJvbSAnLi9mZmlsZXVwbG9hZC1hZGFwdC11bmlmaWxlLmNvbmZpZyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZmaWxlcHJldmlld0FkYXB0VW5pZmlsZVNlcnZpY2Uge1xyXG4gICAgZXh0ZW5kRGF0YTsvLyDmmoLml7bnlKjkuo7nroDljZXlkIjlubZcclxuICAgIHByaXZhdGUgcHJldmlld0V4dGVuZFNlcnZlckNvbmZpZzogRkZpbGVVcGxvYWRBZGFwdFVuaWZpbGVDb25maWcgPSBudWxsO1xyXG4gICAgbm90aWZ5U2VyOiBOb3RpZnlTZXJ2aWNlID0gbnVsbDtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZmlsZXZpZXdTZXI6IEZpbGVWaWV3ZXJTZXJ2aWNlLCBwcml2YXRlIGNvbmZpZ1NlcjogRkZpbGVVcGxvYWRBZGFwdFVuaWZpbGVDb25maWdTZXJ2aWNlLCBAT3B0aW9uYWwoKSBwcml2YXRlIGRvd25sb2FkU2VyOiBEb3dubG9hZFNlcnZpY2UpIHtcclxuICAgICAgICB0aGlzLmV4dGVuZERhdGEgPSB0aGlzLmNvbmZpZ1Nlci5nZXRDb25maWcoKTtcclxuICAgICAgICB0aGlzLm5vdGlmeVNlciA9IHRoaXMuZmlsZXZpZXdTZXJbJ2luamVjdG9yJ10uZ2V0KE5vdGlmeVNlcnZpY2UsIG51bGwpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDov5Tlm57mnIDnu4jlsZ7mgKflgLxcclxuICAgICAqIEBwYXJhbSBrZXkgXHJcbiAgICAgKiBAcGFyYW0gY29uZmlnVmFsdWUgXHJcbiAgICAgKiBAcGFyYW0gZXh0ZW5kVmFsdWUgXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0RmluYWxseUNvbmZpZyhrZXksIGV4dGVuZFZhbHVlKSB7XHJcbiAgICAgICAgaWYgKGV4dGVuZFZhbHVlICYmIGV4dGVuZFZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGV4dGVuZFZhbHVlW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOmBv+WFjeS4i+i9veetieWFtuS7luaMh+S7pOWGjeS8oOWFpeaJqeWxlemFjee9rlxyXG4gICAgICAgIGlmICh0aGlzLnByZXZpZXdFeHRlbmRTZXJ2ZXJDb25maWcgJiYgdGhpcy5wcmV2aWV3RXh0ZW5kU2VydmVyQ29uZmlnLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJldmlld0V4dGVuZFNlcnZlckNvbmZpZ1trZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDmnaXoh6ptb2R1bGXkuK1mb3JSb29055qE6YWN572uXHJcbiAgICAgICAgaWYgKHRoaXMuZXh0ZW5kRGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV4dGVuZERhdGFba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOmihOiniOWNleS4quaWh+S7tlxyXG4gICAgICogQHBhcmFtIGluZm8gXHJcbiAgICAgKi9cclxuICAgIHByZXZpZXdGaWxlKGluZm86IEZVcGxvYWRGaWxlRXh0ZW5kLCBleHRlbmRTZXJ2aWNlOiBGRmlsZVVwbG9hZEFkYXB0VW5pZmlsZUNvbmZpZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByZXZpZXdGaWxlTGlzdChbaW5mb10sIGV4dGVuZFNlcnZpY2UpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDpooTop4jmlbTkuKrliJfooahcclxuICAgICAqIEBwYXJhbSBpbmZvcyBcclxuICAgICAqL1xyXG4gICAgcHJldmlld0ZpbGVMaXN0KGluZm9zOiBGVXBsb2FkRmlsZUV4dGVuZFtdLCBleHRlbmRTZXJ2aWNlOiBGRmlsZVVwbG9hZEFkYXB0VW5pZmlsZUNvbmZpZykge1xyXG4gICAgICAgIC8vbWV0YWRhdGFJZExpc3Q6IHN0cmluZ1tdXHJcbiAgICAgICAgbGV0IHJvb3RJZCA9IHRoaXMuZ2V0RmluYWxseUNvbmZpZygncm9vdElkJywgZXh0ZW5kU2VydmljZSk7XHJcbiAgICAgICAgbGV0IG1ldGFkYXRhSWRMaXN0ID0gW107XHJcbiAgICAgICAgaW5mb3MuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgbWV0YWRhdGFJZExpc3QucHVzaChpdGVtLmV4dGVuZFsnbWV0YWRhdGFJZCddKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZ2V0RmluYWxseUNvbmZpZygnb3B0aW9ucycsIGV4dGVuZFNlcnZpY2UpO1xyXG4gICAgICAgIGlmKG9wdGlvbnMpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWxldmlld1Nlci52aWV3ZXJGaWxlTGlzdChtZXRhZGF0YUlkTGlzdCwgcm9vdElkLCBvcHRpb25zKTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsZXZpZXdTZXIudmlld2VyRmlsZUxpc3QobWV0YWRhdGFJZExpc3QsIHJvb3RJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDkuIvovb3pmYTku7ZcclxuICAgICAqIEBwYXJhbSBpbmZvIFxyXG4gICAgICovXHJcbiAgICBkb3dubG9hZEZpbGUoaW5mbzogRlVwbG9hZEZpbGVFeHRlbmQsIGV4dGVuZFNlcnZpY2U6IEZGaWxlVXBsb2FkQWRhcHRVbmlmaWxlQ29uZmlnKSB7XHJcbiAgICAgICAgaWYgKCFpbmZvLmlkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign6K+36K6+572u6KaB5LiL6L2955qE6ZmE5Lu2Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdpbmRvdy5vcGVuKHRoaXMuZ2V0SW1nU3JjKGluZm8sIGV4dGVuZFNlcnZpY2UpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAqIOS4i+i9vemZhOS7tlxyXG4gICAqIEBwYXJhbSBpbmZvIFxyXG4gICAqL1xyXG4gICAgbXVsdGlEb3dubG9hZEZpbGVzKGluZm9zOiBGVXBsb2FkRmlsZUV4dGVuZFtdLCBleHRlbmRTZXJ2aWNlOiBGRmlsZVVwbG9hZEFkYXB0VW5pZmlsZUNvbmZpZykge1xyXG4gICAgICAgIC8vbWV0YWRhdGFJZExpc3Q6IHN0cmluZ1tdXHJcbiAgICAgICAgaWYgKGluZm9zLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG93bmxvYWRGaWxlKGluZm9zWzBdLCBleHRlbmRTZXJ2aWNlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgcm9vdElkID0gdGhpcy5nZXRGaW5hbGx5Q29uZmlnKCdyb290SWQnLCBleHRlbmRTZXJ2aWNlKTtcclxuICAgICAgICAgICAgbGV0IG1ldGFkYXRhSWRMaXN0ID0gW107XHJcbiAgICAgICAgICAgIGluZm9zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICBtZXRhZGF0YUlkTGlzdC5wdXNoKGl0ZW0uZXh0ZW5kWydtZXRhZGF0YUlkJ10pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbGV0IHVybCA9IHRoaXMuZG93bmxvYWRTZXIuZ2V0TXVsdGlwbGVEb3dubG9hZFVybChKU09OLnN0cmluZ2lmeShtZXRhZGF0YUlkTGlzdCksIHJvb3RJZCk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbXVsdGlEb3dubG9hZEZpbGVzV2lkdGhOYW1lKGluZm9zOiBGVXBsb2FkRmlsZUV4dGVuZFtdLCBuYW1lID0gXCJcIiwgZXh0ZW5kU2VydmljZTogRkZpbGVVcGxvYWRBZGFwdFVuaWZpbGVDb25maWcpIHtcclxuICAgICAgICAvL21ldGFkYXRhSWRMaXN0OiBzdHJpbmdbXVxyXG4gICAgICAgIGlmIChpbmZvcy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmRvd25sb2FkRmlsZShpbmZvc1swXSwgZXh0ZW5kU2VydmljZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IHJvb3RJZCA9IHRoaXMuZ2V0RmluYWxseUNvbmZpZygncm9vdElkJywgZXh0ZW5kU2VydmljZSk7XHJcbiAgICAgICAgICAgIGxldCBtZXRhZGF0YUlkTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICBpbmZvcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgbWV0YWRhdGFJZExpc3QucHVzaChpdGVtLmV4dGVuZFsnbWV0YWRhdGFJZCddKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxldCB1cmwgPSB0aGlzLmRvd25sb2FkU2VyLmdldE11bHRpcGxlRG93bmxvYWRVcmxXaXRoTmFtZShKU09OLnN0cmluZ2lmeShtZXRhZGF0YUlkTGlzdCksIHJvb3RJZCwgbmFtZSk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bkuIvovb3pk77mjqVcclxuICAgICovXHJcbiAgICBnZXRJbWdTcmMoaW5mbzogRlVwbG9hZEZpbGVFeHRlbmQsIGV4dGVuZFNlcnZpY2U6IEZGaWxlVXBsb2FkQWRhcHRVbmlmaWxlQ29uZmlnKSB7XHJcbiAgICAgICAgaWYgKCFpbmZvLmlkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign6K+36K6+572u6KaB5LiL6L2955qE6ZmE5Lu2Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB1cmwgPSAnJztcclxuICAgICAgICBsZXQgYXR0YWNoSWQgPSBpbmZvLmV4dGVuZFsnbWV0YWRhdGFJZCddO1xyXG4gICAgICAgIGxldCByb290SWQgPSB0aGlzLmdldEZpbmFsbHlDb25maWcoJ3Jvb3RJZCcsIGV4dGVuZFNlcnZpY2UpO1xyXG4gICAgICAgIC8vIOaWh+aho+acjeWKoeacjeWKoeWNleWFg+WQjei/m+ihjOinhOiMg+aAp+iwg+aVtO+8jOeUsWRvY3VtZW505L+u5pS55Li6ZGZzXHJcbiAgICAgICAgaWYgKHRoaXMuZG93bmxvYWRTZXIpIHtcclxuICAgICAgICAgICAgaWYgKHJvb3RJZCkge1xyXG4gICAgICAgICAgICAgICAgdXJsID0gdGhpcy5kb3dubG9hZFNlci5nZXREb3dubG9hZFVybChhdHRhY2hJZCwgcm9vdElkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAocm9vdElkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybign5Zug5Li65a6J5YWo6Zeu6aKY77yM6ZmE5Lu25LiL6L295o+Q5L6b5a6J5YWo5qCh6aqM5py65Yi277yM6ZmE5Lu25LiL6L295Yqf6IO96ZyA6KaB6YeN5paw57yW6K+RJylcclxuICAgICAgICAgICAgdXJsID0gYC9hcGkvcnVudGltZS9kZnMvdjEuMC9mb3JtZG9jL2ZpbGVjb250ZW50P21ldGFkYXRhaWQ9JHthdHRhY2hJZH0mcm9vdGlkPSR7cm9vdElkfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1cmw7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOagueaNrumihOiniOaMh+S7pOeahOaJqeWxlemFjee9ruiOt+WPllxyXG4gICAgICogQHBhcmFtIHZhbHVlIFxyXG4gICAgICovXHJcbiAgICBzZXRQcmV2aXdFeHRlbmRTZXJ2ZXJDb25maWcodmFsdWUpIHtcclxuICAgICAgICB0aGlzLnByZXZpZXdFeHRlbmRTZXJ2ZXJDb25maWcgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIGdldFByZXZpZXdFeHRlbmRTZXJ2ZXJDb25maWcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJldmlld0V4dGVuZFNlcnZlckNvbmZpZztcclxuICAgIH1cclxuXHJcbn0iXX0=