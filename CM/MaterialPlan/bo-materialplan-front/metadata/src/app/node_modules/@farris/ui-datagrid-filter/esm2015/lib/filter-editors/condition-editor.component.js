/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FormControl, FormBuilder } from '@angular/forms';
import { ColumnFilterType } from '@farris/ui-datagrid';
import { Component, Input, Output, EventEmitter, Injector, ChangeDetectorRef } from '@angular/core';
import { FilterOperator } from '../operations/operators';
export class ConditionEditorComponent {
    /**
     * @param {?} inject
     * @param {?} cd
     * @param {?} fb
     */
    constructor(inject, cd, fb) {
        this.inject = inject;
        this.cd = cd;
        this.fb = fb;
        this.datatype = ColumnFilterType.string;
        this.condition = {
            operator1: 0,
            value1: '',
            relation: '',
            operator2: 0,
            value2: ''
        };
        this.filterOptions = {};
        this.conditionChange = new EventEmitter();
        this.panelHeightChange = new EventEmitter();
        this.emptyCondition = Object.assign({}, this.condition);
        this.formValueChangesSubscription = null;
        this.originalCondition = {};
        this.form = this.fb.group({
            operator1: new FormControl(0),
            value1: new FormControl(''),
            relation: new FormControl(''),
            operator2: new FormControl(0),
            value2: new FormControl(''),
        });
        this.emptyConditonString = JSON.stringify(this.emptyCondition);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.originalCondition = Object.assign({}, this.condition);
        this.form.patchValue(this.condition);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.formValueChangesSubscription) {
            this.formValueChangesSubscription.unsubscribe();
            this.formValueChangesSubscription = null;
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @private
     * @param {?} v
     * @return {?}
     */
    emitConditionChange(v) {
        this.condition = v;
        /** @type {?} */
        const filter = this.checkFilterOperator();
        this.conditionChange.emit(filter);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.form.valueChanges.subscribe((/**
         * @param {?} v
         * @return {?}
         */
        (v) => {
            this.condition = Object.assign(this.emptyCondition, this.condition);
            if (v.operator1 > 1000) {
                this.emitConditionChange(v);
                return;
            }
            if (this.emptyConditonString === JSON.stringify(v)) {
                this.emitConditionChange(v);
            }
            else {
                if (this.condition.value1 != v.value1 || (this.condition.value2 !== undefined && this.condition.value2 != v.value2)) {
                    this.emitConditionChange(v);
                    this.emitPanelHeightChanged();
                }
                else {
                    if ((this.condition.operator1 != v.operator1) ||
                        (this.condition.relation != v.relation || this.condition.operator2 != v.operator2)) {
                        this.emitConditionChange(v);
                    }
                }
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    checkFilterOperator() {
        /** @type {?} */
        const filter = Object.assign({}, this.condition);
        /** @type {?} */
        const op1 = parseInt('' + filter.operator1, 10);
        /** @type {?} */
        const f1 = { operator1: filter.operator1, value1: filter.value1 };
        if (op1 === FilterOperator.Empty || op1 === FilterOperator.NotEmpty) {
            filter.value1 = '';
            f1.value1 = '';
        }
        if ((filter.value1 === '' || filter.value1 === null) && op1 !== FilterOperator.Empty && op1 !== FilterOperator.NotEmpty) {
            return '';
        }
        if (!filter.relation) {
            return f1;
        }
        else {
            /** @type {?} */
            const op2 = parseInt('' + filter.operator2, 10);
            if (op2 === FilterOperator.Empty || op2 === FilterOperator.NotEmpty) {
                filter.value2 = '';
                return filter;
            }
            else {
                if (!filter.value2) {
                    return f1;
                }
            }
        }
        return filter;
    }
    /**
     * @param {?} relation
     * @param {?} $event
     * @return {?}
     */
    chooseRelation(relation, $event) {
        $event.stopPropagation();
        /** @type {?} */
        const emit = !this.form.get('relation').value;
        this.form.get('relation').setValue(relation);
        this.condition.relation = relation;
        if (this.condition.operator2 === undefined) {
            this.condition.operator2 = 0;
        }
        if (emit) {
            this.emitPanelHeightChanged();
        }
        this.cd.detectChanges();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    resetFilters($event) {
        if (this.emptyConditonString !== JSON.stringify(this.condition)) {
            this.condition = JSON.parse(this.emptyConditonString);
            this.form.reset(this.condition);
            this.emitPanelHeightChanged();
        }
    }
    /**
     * @private
     * @return {?}
     */
    emitPanelHeightChanged() {
        if (this['panelHeightChangedTimer']) {
            clearTimeout(this['panelHeightChangedTimer']);
        }
        this['panelHeightChangedTimer'] = setTimeout((/**
         * @return {?}
         */
        () => {
            this.panelHeightChange.emit();
        }), 20);
    }
}
ConditionEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'condition-editor',
                template: "<form [formGroup]=\"form\">\r\n<ul class=\"list-group filter-condition\">\r\n    <li class=\"list-group-item border-0\">\r\n        <select class=\"form-control form-control-sm\" formControlName=\"operator1\" >\r\n            <option *ngFor=\"let o of operators\" [selected]=\"o.isDefault\" [value]=\"o.code\">{{ o.label }}</option>\r\n        </select>\r\n    </li>\r\n    <li class=\"list-group-item border-0\" [ngSwitch]=\"datatype\" *ngIf=\"condition.operator1 < 1000\">\r\n        <!-- <farris-time-picker #timepicker formControlName=\"value1\" [readonly]= \"false\" [editable]= \"true\"\r\n        [hourStep] = \"1\" [minuteStep] = \"1\"  *ngSwitchCase=\"'4'\" [format]=\"filterOptions?.format\" [secondStep] = \"1\"></farris-time-picker> -->\r\n\r\n        <farris-datepicker formControlName=\"value1\" [dateFormat]=\"filterOptions?.dateFormat\" [returnFormat]=\"filterOptions?.returnFormat\" [useDefault]=\"false\" [showTime]=\"false\" *ngSwitchCase=\"'3'\" ></farris-datepicker>\r\n        <farris-datepicker formControlName=\"value1\" [dateFormat]=\"filterOptions?.dateFormat\" [returnFormat]=\"filterOptions?.returnFormat\" [useDefault]=\"false\" [showTime]=\"true\" *ngSwitchCase=\"'5'\" ></farris-datepicker>\r\n        <!-- <farris-number-spinner  name=\"value1\" [(ngModel)]=\"condition.value1\" *ngSwitchCase=\"'1'\"></farris-number-spinner> -->\r\n        <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\"  *ngSwitchCase=\"'1'\">\r\n            <input formControlName=\"value1\" class=\"form-control\" type=\"number\" >\r\n        </div>\r\n        <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\"  *ngSwitchCase=\"'4'\">\r\n            <input formControlName=\"value1\" class=\"form-control\" type=\"time\" >\r\n        </div>\r\n\r\n        <input class=\"form-control form-control-sm\" formControlName=\"value1\" *ngSwitchDefault type=\"text\" >\r\n    </li>\r\n\r\n    <ng-container *ngIf=\"condition.value1\">\r\n        \r\n        <li class=\"list-group-item border-0\">\r\n            <div class=\"custom-control custom-radio custom-control-inline\" style=\"margin-right: 0;\">\r\n                <input type=\"radio\" id=\"customRadioInline1\" formControlName=\"relation\" value=\"and\" class=\"custom-control-input\">\r\n                <label class=\"custom-control-label\" for=\"customRadioInline1\" (click)=\"chooseRelation('and', $event)\">{{ 'datagrid.filter.and' | locale }}</label>\r\n            </div>\r\n            <div class=\"custom-control custom-radio custom-control-inline\">\r\n                <input type=\"radio\" id=\"customRadioInline2\" formControlName=\"relation\" value=\"or\" class=\"custom-control-input\">\r\n                <label class=\"custom-control-label\" for=\"customRadioInline2\"  (click)=\"chooseRelation('or', $event)\">{{ 'datagrid.filter.or' | locale }}</label>\r\n            </div>\r\n        </li>\r\n        <ng-container *ngIf=\"condition.relation\">\r\n            \r\n            <li class=\"list-group-item border-0\">\r\n                <select class=\"form-control form-control-sm\" formControlName=\"operator2\" >\r\n                    <option *ngFor=\"let o of operators\" [selected]=\"o.isDefault\" [value]=\"o.code\">{{ o.label }}</option>\r\n                </select>\r\n            </li>\r\n            <li class=\"list-group-item border-0\" [ngSwitch]=\"datatype\" *ngIf=\"condition.operator2 < 1000\">\r\n                <!-- <farris-time-picker #timepicker formControlName=\"value2\" [readonly]= \"false\" [editable]= \"false\"\r\n                [hourStep] = \"1\" [minuteStep] = \"1\"  *ngSwitchCase=\"'4'\" [format]=\"filterOptions?.format\"[secondStep] = \"1\"></farris-time-picker> -->\r\n                <farris-datepicker formControlName=\"value2\" [dateFormat]=\"filterOptions?.dateFormat\" [useDefault]=\"false\" [showTime]=\"false\" *ngSwitchCase=\"'3'\" ></farris-datepicker>\r\n                <farris-datepicker formControlName=\"value2\" [dateFormat]=\"filterOptions?.dateFormat\" [useDefault]=\"false\" [showTime]=\"true\"  *ngSwitchCase=\"'5'\" ></farris-datepicker>\r\n                <!-- <farris-number-spinner  name=\"value2\" [(ngModel)]=\"condition.value2\" *ngSwitchCase=\"'1'\"></farris-number-spinner> -->\r\n                <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\"  *ngSwitchCase=\"'1'\">\r\n                    <input formControlName=\"value2\" class=\"form-control\" type=\"number\" >\r\n                </div>\r\n                <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\"  *ngSwitchCase=\"'4'\">\r\n                    <input formControlName=\"value2\" class=\"form-control\" type=\"time\" >\r\n                </div>\r\n                <input class=\"form-control form-control-sm\" formControlName=\"value2\" *ngSwitchDefault type=\"text\" >\r\n            </li>\r\n        </ng-container>\r\n    </ng-container>\r\n    \r\n    <li class=\"list-group-item border-0\">\r\n        <div class=\"d-flex\">\r\n            <!-- <div class=\"p-2 \"><button type=\"button\" class=\"btn btn-light\">\u9AD8\u7EA7</button></div> -->\r\n            <div class=\"ml-auto\">\r\n                <button type=\"button\" (click)=\"resetFilters($event)\" class=\"btn btn-primary\">{{ 'datagrid.filter.clear' | locale }}</button>\r\n            </div>\r\n        </div>\r\n   </li>\r\n</ul>\r\n</form>"
            }] }
];
/** @nocollapse */
ConditionEditorComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef },
    { type: FormBuilder }
];
ConditionEditorComponent.propDecorators = {
    operators: [{ type: Input }],
    datatype: [{ type: Input }],
    condition: [{ type: Input }],
    filterOptions: [{ type: Input }],
    conditionChange: [{ type: Output }],
    panelHeightChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ConditionEditorComponent.prototype.operators;
    /** @type {?} */
    ConditionEditorComponent.prototype.datatype;
    /** @type {?} */
    ConditionEditorComponent.prototype.condition;
    /** @type {?} */
    ConditionEditorComponent.prototype.filterOptions;
    /** @type {?} */
    ConditionEditorComponent.prototype.conditionChange;
    /** @type {?} */
    ConditionEditorComponent.prototype.panelHeightChange;
    /** @type {?} */
    ConditionEditorComponent.prototype.emptyCondition;
    /** @type {?} */
    ConditionEditorComponent.prototype.formValueChangesSubscription;
    /** @type {?} */
    ConditionEditorComponent.prototype.originalCondition;
    /** @type {?} */
    ConditionEditorComponent.prototype.form;
    /**
     * @type {?}
     * @private
     */
    ConditionEditorComponent.prototype.emptyConditonString;
    /**
     * @type {?}
     * @private
     */
    ConditionEditorComponent.prototype.inject;
    /**
     * @type {?}
     * @private
     */
    ConditionEditorComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    ConditionEditorComponent.prototype.fb;
}
//# sourceMappingURL=data:application/json;base64,