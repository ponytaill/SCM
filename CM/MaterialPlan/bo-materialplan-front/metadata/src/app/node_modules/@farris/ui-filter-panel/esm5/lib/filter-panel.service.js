/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, Injector, ApplicationRef } from '@angular/core';
import { FilterPanelComponent } from './filter-panel.component';
import * as i0 from "@angular/core";
var FilterPanelService = /** @class */ (function () {
    // private instanceMap = new Map();
    function FilterPanelService(cfr, injector, appRef) {
        this.cfr = cfr;
        this.injector = injector;
        this.appRef = appRef;
    }
    /**
     * @param {?} option
     * @return {?}
     */
    FilterPanelService.prototype.showPanel = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        /** @type {?} */
        var instanceID = option.localStorageKey;
        this.hidePanel();
        /** @type {?} */
        var containerFac = this.cfr.resolveComponentFactory(FilterPanelComponent);
        /** @type {?} */
        var filterPanelContainer = containerFac.create(this.injector);
        this.appRef.attachView(filterPanelContainer.hostView);
        document.querySelector('body').appendChild(filterPanelContainer.location.nativeElement);
        filterPanelContainer.instance.option = option;
        filterPanelContainer.instance.injector = this.injector;
        // filterPanelContainer.instance.clear.subscribe((event)=>{
        //   this.clear();
        // });
        filterPanelContainer.changeDetectorRef.markForCheck();
        filterPanelContainer.changeDetectorRef.detectChanges();
        // if (!this.instanceMap.has(instanceID)) {
        //     this.instanceMap.set(instanceID, filterPanelContainer);
        // }
        this.filterPanelContainer = filterPanelContainer;
        return filterPanelContainer.instance;
    };
    /**
     * @return {?}
     */
    FilterPanelService.prototype.hidePanel = /**
     * @return {?}
     */
    function () {
        //  const filterPanelContainer = this.instanceMap.get(id);
        if (this.filterPanelContainer) {
            this.filterPanelContainer.instance.hide = true;
            this.filterPanelContainer.destroy();
            this.filterPanelContainer = null;
            // this.instanceMap.delete(id);
        }
    };
    FilterPanelService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FilterPanelService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ApplicationRef }
    ]; };
    /** @nocollapse */ FilterPanelService.ngInjectableDef = i0.defineInjectable({ factory: function FilterPanelService_Factory() { return new FilterPanelService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR), i0.inject(i0.ApplicationRef)); }, token: FilterPanelService, providedIn: "root" });
    return FilterPanelService;
}());
export { FilterPanelService };
if (false) {
    /** @type {?} */
    FilterPanelService.prototype.filterPanelContainer;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.appRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXBhbmVsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1wYW5lbC8iLCJzb3VyY2VzIjpbImxpYi9maWx0ZXItcGFuZWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSx3QkFBd0IsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUE4QyxNQUFNLGVBQWUsQ0FBQztBQUMzSSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7QUFHaEU7SUFPSSxtQ0FBbUM7SUFHbkMsNEJBQ1ksR0FBNkIsRUFDN0IsUUFBa0IsRUFDbEIsTUFBc0I7UUFGdEIsUUFBRyxHQUFILEdBQUcsQ0FBMEI7UUFDN0IsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixXQUFNLEdBQU4sTUFBTSxDQUFnQjtJQUM5QixDQUFDOzs7OztJQUVMLHNDQUFTOzs7O0lBQVQsVUFBVSxNQUF5Qjs7WUFDekIsVUFBVSxHQUFHLE1BQU0sQ0FBQyxlQUFlO1FBQ3pDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzs7WUFDWCxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxvQkFBb0IsQ0FBQzs7WUFDckUsb0JBQW9CLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQy9ELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXRELFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN4RixvQkFBb0IsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUM5QyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdkQsMkRBQTJEO1FBQzNELGtCQUFrQjtRQUNsQixNQUFNO1FBQ04sb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdEQsb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdkQsMkNBQTJDO1FBQzNDLDhEQUE4RDtRQUM5RCxJQUFJO1FBQ0osSUFBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO1FBQ2pELE9BQU8sb0JBQW9CLENBQUMsUUFBUSxDQUFDO0lBQ3pDLENBQUM7Ozs7SUFFTSxzQ0FBUzs7O0lBQWhCO1FBQ0ksMERBQTBEO1FBRTFELElBQUksSUFBSSxDQUFDLG9CQUFvQixFQUFFO1lBQzNCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUMvQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDcEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQztZQUNqQywrQkFBK0I7U0FDbEM7SUFDTCxDQUFDOztnQkEvQ0osVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7OztnQkFOb0Isd0JBQXdCO2dCQUFFLFFBQVE7Z0JBQUUsY0FBYzs7OzZCQUF2RTtDQW9EQyxBQWhERCxJQWdEQztTQTdDWSxrQkFBa0I7OztJQUUzQixrREFBeUQ7Ozs7O0lBTXJELGlDQUFxQzs7Ozs7SUFDckMsc0NBQTBCOzs7OztJQUMxQixvQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEluamVjdG9yLCBBcHBsaWNhdGlvblJlZiwgQ29tcG9uZW50UmVmLCBWaWV3Q29udGFpbmVyUmVmLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZpbHRlclBhbmVsQ29tcG9uZW50IH0gZnJvbSAnLi9maWx0ZXItcGFuZWwuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRmlsdGVyUGFuZWxPcHRpb24gfSBmcm9tICcuL2ZpbHRlci1wYW5lbC5pbnRlcmZhY2UnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXJQYW5lbFNlcnZpY2Uge1xyXG5cclxuICAgIGZpbHRlclBhbmVsQ29udGFpbmVyOiBDb21wb25lbnRSZWY8RmlsdGVyUGFuZWxDb21wb25lbnQ+O1xyXG5cclxuICAgIC8vIHByaXZhdGUgaW5zdGFuY2VNYXAgPSBuZXcgTWFwKCk7XHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICAgICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICAgICAgcHJpdmF0ZSBhcHBSZWY6IEFwcGxpY2F0aW9uUmVmLFxyXG4gICAgKSB7IH1cclxuXHJcbiAgICBzaG93UGFuZWwob3B0aW9uOiBGaWx0ZXJQYW5lbE9wdGlvbikge1xyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlSUQgPSBvcHRpb24ubG9jYWxTdG9yYWdlS2V5O1xyXG4gICAgICAgIHRoaXMuaGlkZVBhbmVsKCk7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyRmFjID0gdGhpcy5jZnIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoRmlsdGVyUGFuZWxDb21wb25lbnQpO1xyXG4gICAgICAgIGNvbnN0IGZpbHRlclBhbmVsQ29udGFpbmVyID0gY29udGFpbmVyRmFjLmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcclxuICAgICAgICB0aGlzLmFwcFJlZi5hdHRhY2hWaWV3KGZpbHRlclBhbmVsQ29udGFpbmVyLmhvc3RWaWV3KTtcclxuXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmFwcGVuZENoaWxkKGZpbHRlclBhbmVsQ29udGFpbmVyLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgIGZpbHRlclBhbmVsQ29udGFpbmVyLmluc3RhbmNlLm9wdGlvbiA9IG9wdGlvbjtcclxuICAgICAgICBmaWx0ZXJQYW5lbENvbnRhaW5lci5pbnN0YW5jZS5pbmplY3RvciA9IHRoaXMuaW5qZWN0b3I7XHJcbiAgICAgICAgLy8gZmlsdGVyUGFuZWxDb250YWluZXIuaW5zdGFuY2UuY2xlYXIuc3Vic2NyaWJlKChldmVudCk9PntcclxuICAgICAgICAvLyAgIHRoaXMuY2xlYXIoKTtcclxuICAgICAgICAvLyB9KTtcclxuICAgICAgICBmaWx0ZXJQYW5lbENvbnRhaW5lci5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcclxuICAgICAgICBmaWx0ZXJQYW5lbENvbnRhaW5lci5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgLy8gaWYgKCF0aGlzLmluc3RhbmNlTWFwLmhhcyhpbnN0YW5jZUlEKSkge1xyXG4gICAgICAgIC8vICAgICB0aGlzLmluc3RhbmNlTWFwLnNldChpbnN0YW5jZUlELCBmaWx0ZXJQYW5lbENvbnRhaW5lcik7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIHRoaXMuZmlsdGVyUGFuZWxDb250YWluZXIgPSBmaWx0ZXJQYW5lbENvbnRhaW5lcjtcclxuICAgICAgICByZXR1cm4gZmlsdGVyUGFuZWxDb250YWluZXIuaW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGhpZGVQYW5lbCgpIHtcclxuICAgICAgICAvLyAgY29uc3QgZmlsdGVyUGFuZWxDb250YWluZXIgPSB0aGlzLmluc3RhbmNlTWFwLmdldChpZCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmZpbHRlclBhbmVsQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyUGFuZWxDb250YWluZXIuaW5zdGFuY2UuaGlkZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyUGFuZWxDb250YWluZXIuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlclBhbmVsQ29udGFpbmVyID0gbnVsbDtcclxuICAgICAgICAgICAgLy8gdGhpcy5pbnN0YW5jZU1hcC5kZWxldGUoaWQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=