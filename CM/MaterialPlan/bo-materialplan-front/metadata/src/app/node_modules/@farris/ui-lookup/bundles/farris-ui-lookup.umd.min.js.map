{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@farris/ui-lookup/lib/lookup-displaytype.ts","ng://@farris/ui-lookup/lib/lookup.component.ts","ng://@farris/ui-lookup/lib/lookup-grid-options.ts","ng://@farris/ui-lookup/lib/http/ILookupHttpService.ts","ng://@farris/ui-lookup/lib/lookup-defaut-mapping.ts","ng://@farris/ui-lookup/lib/utils.ts","ng://@farris/ui-lookup/lib/lookup-presonalConfig.service.ts","ng://@farris/ui-lookup/lib/services/util.service.ts","ng://@farris/ui-lookup/lib/services/treenode.helper.ts","ng://@farris/ui-lookup/lib/services/favorite-helper.ts","ng://@farris/ui-lookup/lib/services/selection-manager.ts","ng://@farris/ui-lookup/lib/services/bind-datatable-event.ts","ng://@farris/ui-lookup/lib/services/on-text-change.ts","ng://@farris/ui-lookup/lib/services/bind-treetable-event.ts","ng://@farris/ui-lookup/lib/services/multi-selection.manager.ts","ng://@farris/ui-lookup/lib/services/http-manager.ts","ng://@farris/ui-lookup/lib/lookup-left.component.ts","ng://@farris/ui-lookup/lib/services/lookup-component.manager.ts","ng://@farris/ui-lookup/lib/services/dialog-mangager.ts","ng://@farris/ui-lookup/lib/services/lookup-selection.service.ts","ng://@farris/ui-lookup/lib/lookup-grid.component.ts","ng://@farris/ui-lookup/lib/lookup-tabs.component.ts","ng://@farris/ui-lookup/lib/lookup-tip.directive.ts","ng://@farris/ui-lookup/lib/quick-select/quick-select-panel.component.ts","ng://@farris/ui-lookup/lib/quick-select/lookup-quick-select.directive.ts","ng://@farris/ui-lookup/lib/advanced-layout/lookup-advanced-layout.component.ts","ng://@farris/ui-lookup/lib/lookup.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","FAVORITE_FIELD_NAME","List","TreeList","NavList","NavTreeList","NavListTree","QuickSelectDefaultOptions","enable","showMore","showItemsCount","footerHeight","minWidth","enableBackspace","LOOKUPINPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","LookupComponent","multi","defineProperty","content","dialog","dialogCreated","_isShow","val","changeDetector","detectChanges","ngControl","valid","ngOnInit","initEvents","injector","get","NgControl","ngOnDestroy","lookupUnsubscribe","ngAfterViewChecked","_this","closed","subscribe","isShow","dictPicking","of","showDialog","dictPicked","closeDialog","beforeOpen","beforeClose","dialogHeight","defaultDialogSize","height","dialogWidth","width","disabled","readonly","ngZone","runOutsideAngular","setTimeout","show","close","dictPickedSubscription","unsubscribe","dictPickingSubscription","dialogCreatedSubscription","onResizing","pos","resizing","emit","size","onResized","resized","onMaxDialog","dialogMaxed","writeValue","obj","displayText","displayValue","originalText","registerOnChange","fn","onModelChange","registerOnTouched","onModelTouched","setDisabledState","isDisabled","Component","args","selector","template","providers","Injector","ElementRef","ChangeDetectorRef","HostBinding","Input","Output","ViewChild","el","hostCls","title","buttonAlign","showButtons","showCloseButton","showMaxButton","resizable","draggable","editable","dialogOpened","EventEmitter","dialogClosed","Subject","NgZone","default","advanced","DisplayInfo","lookupGridDefaults","singleSelect","showFilterBar","pagination","pageIndex","pageSize","pageList","displayInfoDefault","favorites","okText","cancelText","allColumns","ServerSideToken","InjectionToken","LookupDefaultMapping","Injectable","CommonUtils","utils","lookupFieldMap","helpData","mapFields","dataObj","keys","forEach","f","map","h","getValue","join","split","ff","field","trim","setValue","LookupUtils","setActiveLookupInstance","lookupIns","rts","setLookupInstance","destroy","pendingStart","updateFormState","lookup","pending","document","body","style","pendingEnd","getPathCode","data","treeInfo","dataField","pathField","getLayerData","layerField","createFilterCondition","filterField","lbracket","rbracket","relation","FilterRelation","Or","compare","Compare","Like","mergeCondition","condition","fields","searchData","cloneDeep","filterConditions","sortConditions","_a","_b","_c","searchConditions","lastSearchConditions","Empty","And","searchCondition","canSelectable","makeTreeWithParentID","parentId","parentIdField","idField","nodes","Map","result","unattached","node","children","selectable","parent","parents","id","set","PID","parent_1","pid","makeTree","pathCode","parentPathCode","substr","parent_2","RuntimeStateService","PersonalConfigService","_key","buildKey","controlID","_newKey","str","pathArr","prefix","location","hash","pathname","idService","encrypt","initPersonalConf","getPersonalData","key","personalConfigKey","conf","localStorage","getItem","personalConf","JSON","parse","_updatePersonalConfig","removeItem","savePersonalConfig","getQuickSelected","localeId","qs","quickSelected","items","getDialogSize","updatePersonalConfig","cfg","_data_1","favorite","lang","arr","from","Set","setItem","stringify","getActiveTabIndex","tabName","tabIndex","updateQueckSelected","selectedRow","quickItems","selectedIndex_1","element","index","item","filter","v","unshift","_qs","newData","per","flag","isArray","zh-CHS","selected","IdService","selectItemObser$","displayType","UtilService","instance","TreeNodeHelper","getTreeInfo","treeNode","treeInfoDataField_1","toLowerCase","find","writeConsole","getTreeNodeLayer","updateTreeNodeExpanded","treeNodes","expandLevel","flatAllNodes","treeData2Flat","tn","expanded","shoudExpand","isSelectNodeParent","leaf","level","parentIds","parentID","_parents","rowNode","nodeLayer","navSelectedIds","allParentIds","includes","getLeafNode","flatTreeNodes","reduce","c","FavoriteHelper","getFavoriteColumns","gridOptions","columns","rtn","formatter","FavoriteIcon","initPersonalInfo","personalConfigService","nativeElement","controlId","pcstr","getLookupBindingFields","textField","listenPersonalConfigHandler","initFavoriteComponentEvent","cmpRef","_this_1","LookupGridDisplayType","fdt_1","remoteSort","lookupSelectionSer","clearSelections","updateSelections","unSelectRow","unSelect","checkAll","cellClick","col","event","stopPropagation","target","contains","row","dt","componentRef","loadData","total","favoriteItems","updateFavoriteData","FavoriteAction","rowDblClick","rowData","selectItem","ftt","nodeSelected","nodeUnChecked","multiSelMgr","remove","nodeChecked","_this_2","every","hasFinish","dblClick","okButton","click","checkeds","checkedChange","isCheck","unCheckAll","clear","getFavoritData","favData","localService","getFavoritIds","_loadFavoriteData","fdt","favoritesComponentRef","loadFavoriteDatatable","cd","markForCheck","closeLoading","loadFavoritesData","res","favoriteDataFrom","TreeTableComponent","bindFavTreetable","loadFavoriteForTreeTable","undefined","favoriteColumns","selectionMgr","selectCurrentValue","allColumnsTitle","favids","findIndex","onlySelectLeaf","checkOnSelect","selectOnCheck","showCheckbox","enableCascade","ttEventMgr","cascadeValueChanged","cascadeStatus","cascadeCheck","cascadeDown","cascadeUp","checkNodeIsLeaf","initFavoriteTreeData","layerType","lookupUtils","parentField","expandAll","updateFavoritesStatus","useFavorite","favIds","_this_3","each","_data","_updateFavorites","action","localeID","newVal","favItems","favoriteItems$","httpMgr","submitFavoriteData","ftt_1","showLoading","getData","favoriteIds","resData","_items","favoriteColumnFormatter","isTree","rn","findRowNode","SelectionManager","getBindingData","jsonData","ins","bindingData","formDirective","form","getObject","toJSON","initDisplayValue","targetField","indexOf","_clearSelections","getDataCmpInstance","cmpRefInstance","clearAll","cdRef","destroyed","dtBody","selectedRowIndex","selections","selectedIds","enableToSelect","selectedRows","getSelections","selected4Treetable","selected4Datatable","ref","activeTab","lookupCmpMgr","getComponentInstance","serializedValue","values","isSelected","checkRow","valueArr","selectNode","checkedNodes","selectNodes","getSelectedIds","multipleChoiceSeparator","showSelected","rows","DataTableEventManager","onSearch","$event","pageInfo","search","_sortState","sortName","sortOrder","uri","searching","pipe","catchError","err","_ERROR_","tap","Error","_loadData","messagerService","warning","mustWriteSomething","self","favHelper","loadDataTableData","bindDataTableEvent","pageChanged","pagerChanged","buildQueryParams","pageSizeChanged","_searchState","searchValueChange","faction","columnSorted","sort","param","fieldPath","clearSearchValue","cellStyler","text-overflow","checkSearchResult","searchOnServer","cancelSelect","setModelValue","runDictPickedEvent","onTextChanged","isTextChange","nosearch","originalEvent","getFormState","switchMap","pr","customData","type","SHOWDIALOG","MESSAGE","message","notifyService","bind","rowdata","leafNode","treeNodeHelper","isOnlySelectLeaf","setTreeInfo","Message","inputBlurHandler","inputGroup","textbox","render2","listen","enterHandle","keydownHandle","canOpen","code","quickSelect","selectionStart","shortcutKey","open","preventDefault","TreeTableEventManager","searchTreeData","tt","checkNodes_1","_isLoadAllTreeData","_nodes","expandFirstNode","resize","IS_SEARCH_RESULT","getChildren","parentPath","parentLayer","category","searchValue","enableFullTree","loadTreeDataType","searchField","helpId","http","bindTreetableEvent","_searchTreeData","searchparam","remoteSearch","useInsideSearchHandler","searchHandle","isLoadAllTreeData","dblClickExpand","searchFields","loadDataType","virtualized","allData","showCheckAll","enableFindText","unSelectNode","pathcode","unselectByPathcode","loadAllData","clientSort","sortName_1","_sortName","reqTyp","checkNodeCanBeSelect","expand","isGetAllChidlNodes","propagateSelectionDown","isChecked","selectItems","_isAsyncLoadTreeData","expandTreeNode","parentIdOrPath","appendChildren","addtional","psRef","directiveRef","update","instanceTyp","MultiSelectionManager","onSelectedTableCellClick","rid","unCheckedNode","_tt","unCheckRow","_dt","initSelectedColumns","selectedColumns","favcol","select","save","loadSelections","DefaultUserConfig","LookupHttpManager","disablePagination","params","searchParam","isDoublleList","navigationFilter","idValue","relationFilter","sfield","searchType","treeToList","navTreeToList","selectedInfo","navNodePathCode","navPathCode","includeSubordinates","navigationOptions","beUri","allSearchFields","isUsePagination","_uri","context","_searchResult","params1","parentsIds","getSelecedItems","selIds","getPersonalConfig","defaultConf","_conf","req","isTabChanged","ucs","textValue","lookupRequest","isQuickSelect","usePersionalConf","_originalPersonalConfig","reSize","cascadeItems","a","_sids","msg","addFavoriteSuccess","delFavoriteSuccess","configData","configkey1","configkey2","configkey3","textvalue","savingFaoriteData","success","LookupLeftComponent","lookupCmp","isTreeList","includeSubordinates$$","includeSubordinates$","createComponent","dtFac","cfr","resolveComponentFactory","DataTableComponent","navOptions","leftPanelWidth","cmpContainer","maxSize","fill","enablePager","selectLeftDataTableRow","selectFirstInNav","initDataTable","loadTableData","dataTableReLoad","buildParams","initTreeTable","fast","nodeUnSelect","fixedHeader","selectFirstNode","loadTreeData","requestType","onNodeExpanded","parentPath_1","parentLayer_1","console","log","ComponentFactoryResolver","read","ViewContainerRef","unselected","LookupComponentManager","multiSelectDT","leftRef","leftComponentRef","createComponentWithServerData","valueField","dtyp","toUpperCase","createContent","createFavoriteComponent","resizeComponent","favoritesOptions","createFavoritesContent","reloadTreeDataForExpand","layerNum","setTreeNodeExpandBy","layer","expandLayer","useContextMenuForTree","treeTableOptions","maxLevel","enableContextMenu","language","levelMenus","handle","menu","isLoadAllTreeData_1","updateSerializedValue","firstNodeData","_level","contextMenus","visible","nodeIds","getChildNodes","unCheckedNodes","unSelectNodes","expandall","collapseall","collapseAll","expandByLayer","contextMenuItems","beforeShowContextMenu","state","searched","getSpaceWidth","layoutFormat","opts","getComponentType","cmpFac","centerContainer","contentContainer","fit","fitColumns","autoFitColumns","ttOpts","favoritesContainer","dialogMgr","getHeight","createLeftComponent","ops","leftContainer","navLookupDialogMinWidth","resizeCmp","leftPanel","debounceTime","getNavigationFilter","rowDatas","dataCmpRef","loadDataWhenOpen","navRow","relations","result_1","k","groupField","rf","fieldName","helpField","fieldValue","vals","LookupDialogManager","unsubscribes","lookupInit","dialogClosedSubscription","dialogOpenedSubscription","initFavoriteItems","_loadDataWhenOpen","_navSelectedId","_selectFirstInNav","enableGetAllChildNodes","keyDownHandler","focus","userInitialConfig","reset","_treeInfo_","dtEventMgr","onDialogCreated","dlg","registerDialogEvent","isRecordSize","dlgSize","subscriptions","checkDictPickingResult","canOpenDialog","isReady","contentHeight","containerMargin","bottom","top","getMainGridSize","left","right","resetDialogContentHeight","hHeight","header","fHeight","footer","opened","dialogContentHeight","querySelector","customDisplayType","initData","lookupinitializationSubject","registerShortcutKey","leftPanelResize$","dlgContainerDom","eventManager","addEventListener","moveUp","moveDown","searchFocus","confirm","nextPager","prevPager","collapse","onKeydownEvent","ctrlKey","isNextPager","paginationKeyDownHandler","datatableRef","newPageNum","Math","ceil","onPageChange","LookupSelectionService","selecteditems","state$","checked","ids2_1","BehaviorSubject","selected$","quickItems$","_super","LOOKUPGRID_VALUE_ACCESSOR","LookupGridComponent","__extends","__","constructor","create","tslib_1.__extends","_displayType","align","fixed","_gridOptions","resizableColumns","hover","useTip","_userSettings","debugSer","cacheUserConfig","_title","displayInfo","_columns","deepClone","getColumns","clone","checkGridOptions","mustChoosAdatarow","setContainerMargin","mrn","containerStyle","marginLeft","marginRight","marginTop","marginBottom","farrisInstances","lookupSearchInputEvent","overLayService","destory","ngOnChanges","changes","isFirstChange","ngAfterViewInit","useExtendInfo","updateExtendInfo","viewType","registerMouseEventForTagView","tagboxHeight","tagbox","tbh","maxTagboxHeight","setStyle","add","createInstance","MessagerService","loadingService","LoadingService","NotifyService","utilService","LocaleService","showNavigation","_size","beforeSelectData","ctxMenuLanguages","defaultTreeTableOptions","modalContent","loading","container","delay","getSearchColumns","resdata","cols","sf","label","initOptions","obser","setLookupTitleText","navigation","customNavFormatter","rowStyler","_nav_treeinfo_loadtype","customFormatter","customStyles","rowStylers_1","cellStylers_1","cell","filterFn_1","styleItem","styles","showGetAllChildrenCheckbox","observer","selectedItems","toggleExpand","modals","timeout","hasError","exception","restData","rebindEvent","loadTreeTableData","loadFavData","treeData","scrollToY","updateDataTable","loadSuccess","_treeInfo","_osl","tt_1","isLoadAll","keepSelect","isAllTreeData","onChanges","clearMappings","valueChanged","textChanged","onClear","extendInfo","mappingFn","defaultMapping","clearValue","okHandler","bsdResult","_beforeSelectDataCallBack","getParentPathCode","maxLayer","x","max","_rows","patchCode","_rows2","_pc","canSelect","selectedRows$","allitems","ids","updateControlValue","setDisplayText","updateBindData","selectedData","activeElement","blur","helpFields","bindingData_1","formField","getExtendInfoFields","isHelpData","extInfoFields","tipFieldArr","tf","mapKey","onUpdateExtendInfo","extInfoFormatter","tipString","getExtendInfoText","extendInfoFields_1","itemData","tipString_1","tfv","getDisplayText","df","displayFields","txtArr","displayTextSeparator","displayFormatter","tree","datatable","focusToInput","zone","cancelHandler","onTabChange","_firstChange","y","scrollY","enableClear","onTagboxMouseEnter","onTagboxMouseLeave","toggleClearIcon","clearIcon","display","showTagboxClearButton","onRemoveSelectItem","txt","textArray","displayTextList","removedIndex","splice","updateOtherFieldDataWhenTagremoved","tagRemoved","textFieldIndex","bindingData_2","bindingPath","pathArr_1","fieldPaths","valArr","onAllChildNodesClick","onIncludeSubordinatesChange","onTagContainerClick","tagInput","name","ShortcutsService","encapsulation","ViewEncapsulation","None","exportAs","Renderer2","shortcuts","groupIcon","up","down","disable","showCascadeControl","placeholder","navTreeTableOptions","dataTableOptions","textAlign","enableTitle","LookupLayout","tabChangeSubscription","currentSelectedItems","EventManager","FarrisComponentInstanceService","OverLayHiddenService","DebugService","useDebugMode","LookupTabsComponent","initInkBarPos","currentValue","navClickHandle","tabChange","which","layout","enableFav","enableSelected","dataListNavRef","offsetWidth","favoriteNavRef","selectedNavRef","inkBarRef","animations","trigger","transition","opacity","animate","selectedTotal","dialogTitle","render","LookupTipDirective","tipText","enableTip","inputRef","iconMouseEnter","creatPanel","iconMouseLeave","isInTipPanel","removePanel","clickHandle","getQuickSelectedByLocaleId","localeid","tipPanel","setPosition","ul","renderer","createElement","li","innerHTML","setProperty","appendChild","addClass","leaveEvent","enterEvent","clickEvent","nodeName","removeChild","getBoundingClientRect","Number","keyArr","shift","Directive","InputGroupComponent","LookupQuickSelectPanelComponent","onClick","cdr","onMoreClick","moreClcik","formatData","rowObj","onItemClick","itemClick","evnet","setActiveItem","activeIndex","HostListener","maxItems","LookupQuickSelectDirective","options","inputClick","panelElement","lookupRef","createDataPanel","valueChange","overflow","setPanelPosition","hide","removePanelElement","isMoreClick","reqAnimFrame","classList","updateTopPosition","getPanelSize","top_1","maxHeight","zIndex","cmpFact","changeDetectorRef","registerMouseEvent","calculationPanelHeight","getInputSizeInfo","window","innerHeight","panelHeight","transformOrigin","parseInt","_width","innerWidth","slice","loadingRef","newHeight","itemsContainer","offsetHeight","removeStyle","registerKeyboardEvent","newdata","idx","prevIdx","nextIdx","ngzone","LookupAdvancedLayoutComponent","setCurrentTab","dialogRef","dragHandle","headerRel","activetabRef","changeTabs","tabstr","tabChanged","tab","changeDialogSize","elRef","DialogComponent","NgModule","imports","CommonModule","FormsModule","FarrisCommonModule","forRoot","FarrisDialogModule","MessagerModule","NotifyModule","LoadingModule","InputGroupModule","LayoutModule","DataTableModule","TreeTableModule","FarrisContextMenuModule","LocaleModule","exports","declarations","entryComponents","LookupModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { DataFormatter } from '@farris/ui-common/column';\r\n\r\n/** æ¶èåå­æ®µåç§° */\r\nexport const FAVORITE_FIELD_NAME = '__favorite__';\r\nexport const INPUT_GROUP_ICON = '<i class=\"f-icon f-icon-lookup\"></i>';\r\n\r\n// è·åç»ä»¶å®ä¾çç±»å\r\nexport type ComponentInstanceType = 'datatable'| 'treetable' | 'fav' | 'selected' | 'leftTree' | 'leftDataTable';\r\n\r\nexport enum LookupGridDisplayType {\r\n    List = 'LIST',\r\n    TreeList = 'TREELIST',\r\n    NavList = 'NAVLIST',\r\n    NavTreeList = 'NAVTREELIST',\r\n    NavListTree = 'NAVLISTTREE'\r\n}\r\n\r\n/** æ¶èç¸å³å¾æ  */\r\nexport enum FavoriteIcon {\r\n    /** å·²æ¶è */\r\n    yes = '<span class=\"f-icon f-icon-star f-lookup-favorite\" style=\"font-size:12px\" ></span>',\r\n    /** æªæ¶è */\r\n    no = '<span class=\"f-icon f-icon-star-outline f-lookup-favorite\" style=\"font-size:12px\"></span>',\r\n    /** ç§»é¤æ¶è */\r\n    delete = '<span class=\"f-icon f-icon-apply-format f-lookup-unfavorite\" style=\"font-size:12px\"></span>',\r\n    /** ç§»é¤å·²éè®°å½ */\r\n    remove = '<span class=\"f-icon f-icon-apply-format f-lookup-unfavorite\" style=\"font-size:12px\"></span>'\r\n}\r\n\r\n/** æ¶èç¸å³å¨ä½ */\r\nexport enum FavoriteAction {\r\n    /** æ·»å æ¶è */\r\n    add = 'append item to favorite.',\r\n    /** ç§»é¤æ¶è */\r\n    delete = 'remove favorite.'\r\n}\r\n\r\nexport interface ExtInfoFormatterParam {\r\n    [key: string]: any;\r\n    bindingData?: any;\r\n    instance?: any;\r\n}\r\n\r\nexport type ExtInfoFormatterFn = (param: ExtInfoFormatterParam) => string;\r\nexport type ExtInfoFormatter = string | ExtInfoFormatterFn;\r\n\r\nexport interface CustomDataFormatter {\r\n    /** æ°æ®æ ¼å¼å */\r\n    [fieldName: string]: DataFormatter ;\r\n    /** è¡æ ·å¼ */\r\n    rowStyler?: (e: { data: any }) => {[key: string]: any};\r\n    /** ååæ ¼æ ·å¼ */\r\n    cellStyler?: (e: { data: any }, field: string) => {[key: string]: any};\r\n}\r\n\r\nexport interface QuickSelectOption {\r\n    /** æ¯å¦å¯ç¨ */\r\n    enable?: boolean;\r\n    /** æ¾ç¤ºtop è®°å½æ°ï¼é»è®¤ 10 */\r\n    showItemsCount?: number;\r\n    /** æ¾ç¤ºææ¬å­æ®µ */\r\n    textField?: string;\r\n    /** èªå®ä¹æ ¼å¼å */\r\n    formatter?: (data: any) => string;\r\n    \r\n    footerHeight?: number;\r\n    /** æ¾ç¤ºæç´¢æ´æ° æé® */\r\n    showMore?: boolean;\r\n    /** æå°å®½åº¦, é»è®¤ 200px */\r\n    minWidth?: number;\r\n    /** å¯ç¨åéé®ç§»é¤éä¸­é¡¹ï¼é»è®¤ä¸º false */\r\n    enableBackspace?: boolean;\r\n}\r\n\r\nexport const QuickSelectDefaultOptions: QuickSelectOption = {\r\n    enable: false,\r\n    showMore: true,\r\n    showItemsCount: 10,\r\n    footerHeight: 0,\r\n    minWidth: 200,\r\n    enableBackspace: false\r\n}","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-08-15 15:24:24\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-11-30 14:01:34\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { Subscription, Observable, of, Subject } from 'rxjs';\r\nimport {\r\n    Component, Input, Output, EventEmitter, TemplateRef,\r\n    ViewChild, Injector, forwardRef, OnInit, ElementRef, ChangeDetectorRef,\r\n    AfterViewChecked, HostBinding, NgZone, OnDestroy\r\n} from '@angular/core';\r\nimport {\r\n    NG_VALUE_ACCESSOR,\r\n    ControlValueAccessor,\r\n    NgControl\r\n} from '@angular/forms';\r\n\r\nimport { DialogComponent } from '@farris/ui-dialog';\r\nimport { IResizeEvent } from '@farris/ui-draggable';\r\n\r\nimport { PickingResult, PickedResult } from './lookup-grid-options';\r\n\r\nexport const LOOKUPINPUT_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => LookupComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'farris-lookup',\r\n    template: `\r\n        <div\r\n            class=\"lookupbox input-group\"\r\n            [ngClass]=\"{\r\n                'f-state-disabled': disabled,\r\n                'f-state-readonly': readonly,\r\n                'f-state-editable': !editable\r\n            }\"\r\n        >\r\n            <input\r\n                class=\"form-control\"\r\n                [value]=\"displayText\"\r\n                [disabled]=\"disabled\"\r\n                [readonly]=\"!editable || readonly\"\r\n            />\r\n            <div class=\"input-group-append\">\r\n                <span class=\"f-select input-group-text\" (click)=\"showDialog()\">\r\n                    <i class=\"f-icon f-icon-lookup\"></i>\r\n                </span>\r\n            </div>\r\n        </div>\r\n        <farris-dialog\r\n            #dialog\r\n            *ngIf=\"isShow\"\r\n            [title]=\"title\"\r\n            [beforeOpen]=\"beforeOpen\"\r\n            [beforeClose]=\"beforeClose\"\r\n            [width]=\"dialogWidth\"\r\n            [height]=\"dialogHeight\"\r\n            [showButtons]=\"showButtons\"\r\n            [showMaxButton]=\"showMaxButton\"\r\n            [buttons]=\"buttonsRef || defaultButtonRef\"\r\n            [buttonAlign]=\"buttonAlign\"\r\n            (maxed)=\"onMaxDialog($event)\"\r\n            (resized)=\"onResized($event)\"\r\n            (resizing)=\"onResizing($event)\"\r\n        >\r\n            <ng-content></ng-content>\r\n\r\n            <ng-template #defaultButtonRef>\r\n                <div style=\"width: 100%;\">\r\n                    <button\r\n                        class=\"btn btn-secondary btn-lg\"\r\n                        (click)=\"closeDialog()\"\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button class=\"btn btn-primary btn-lg\">Ok</button>\r\n                </div>\r\n            </ng-template>\r\n        </farris-dialog>\r\n    `,\r\n    styles: [\r\n        `\r\n            .input-group {\r\n                flex-wrap: nowrap;\r\n            }\r\n            :host-context(.ng-invalid) .form-control {\r\n                border-color: #ff0303;\r\n            }\r\n        `\r\n    ],\r\n    providers: [LOOKUPINPUT_VALUE_ACCESSOR]\r\n})\r\nexport class LookupComponent\r\n    implements OnInit, ControlValueAccessor, AfterViewChecked, OnDestroy {\r\n    @HostBinding('class') hostCls = 'f-cmp-inputgroup';\r\n\r\n    /** çªå£å®½åº¦ */\r\n    @Input() dialogWidth: number;\r\n    /** çªå£é«åº¦ */\r\n    @Input() dialogHeight: number;\r\n    /** çªå£æ é¢ãé»è®¤å¼ï¼æ­¤å¤æ¾ç¤ºå¸®å©æ é¢ */\r\n    @Input() title = '';\r\n    /** æé®å¯¹é½æ¹å¼ */\r\n    @Input() buttonAlign = 'right';\r\n    /** æé®æ¨¡æ¿ */\r\n    @Input() buttonsRef: TemplateRef<any>;\r\n    /** æ¯å¦æ¾ç¤ºæé® */\r\n    @Input() showButtons = true;\r\n    /** æ¾ç¤ºå³é­æé® */\r\n    @Input() showCloseButton = true;\r\n    /** æ¾ç¤ºæå¤§åæé® */\r\n    @Input() showMaxButton = true;\r\n    /** åè®¸ææ½å°ºå¯¸ */\r\n    @Input() resizable = true;\r\n    /** åè®¸æå¨çªå£ */\r\n    @Input() draggable = true;\r\n    /** ç¦ç¨ */\r\n    @Input() disabled = false;\r\n    /** åè®¸ç¼è¾ææ¬æ¡ */\r\n    @Input() editable = true;\r\n    /** åªè¯» */\r\n    @Input() readonly = false;\r\n    /** å­æ®µæ å°, { å¸®å©æ°æ®å­æ®µï¼è¡¨åå­æ®µ } */\r\n    @Input() mapFields: { [sourceField: string]: string };\r\n    /** å¼å­æ®µ */\r\n    @Input() valueField: string;\r\n    /** ææ¬å­æ®µ */\r\n    @Input() textField: string;\r\n    @Input() displayText = '';\r\n\r\n    /** è¿è¡æ¶ä¸ä¸æèªå®ä¹å¯¹è±¡ */\r\n    @Input() context: any;\r\n\r\n    /** çªå£æå¼åäºä»¶ */\r\n    @Input() beforeOpen: () => Observable<boolean>;\r\n    /** çªå£å³é­åäºä»¶ */\r\n    @Input() beforeClose: () => Observable<boolean>;\r\n    /** å¸®å©åäºä»¶ */\r\n    @Input() dictPicking: (emptyObj?: {}) => Observable<PickingResult>;\r\n    dictPickingSubscription: Subscription;\r\n    /** å¸®å©åäºä»¶ */\r\n    @Input() dictPicked: (rowData: any) => Observable<PickedResult>;\r\n    dictPickedSubscription: Subscription;\r\n\r\n    /** çªå£æå¼å */\r\n    @Output() dialogOpened = new EventEmitter();\r\n    /** çªå£å³é­å */\r\n    @Output() dialogClosed = new EventEmitter();\r\n    /** çªå£æå¤§å */\r\n    @Output() dialogMaxed = new EventEmitter();\r\n    /** ææ½æ¹åçªå£å°ºå¯¸è¿è¡æ¶ */\r\n    @Output() resizing = new EventEmitter();\r\n    /** ææ½æ¹åçªå£å°ºå¯¸ç»æ */\r\n    @Output() resized = new EventEmitter();\r\n    /** å¸®å©çªå£é»è®¤å°ºå¯¸ */\r\n    private defaultDialogSize = { width: 550, height: 570 };\r\n\r\n    dialogCreated = new Subject<DialogComponent>();\r\n    dialogCreatedSubscription: Subscription;\r\n    dialog: DialogComponent;\r\n    @ViewChild('dialog') set content(content: DialogComponent) {\r\n        if (this.dialog !== content) {\r\n            this.dialog = content;\r\n            if (content) {\r\n                this.dialogCreated.next(this.dialog);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isShow = false;\r\n    get isShow() {\r\n        return this._isShow;\r\n    }\r\n    set isShow(val) {\r\n        this._isShow = val;\r\n        if (!this.changeDetector['destroyed']) {\r\n            this.changeDetector.detectChanges();\r\n        }\r\n    }\r\n\r\n    ngControl: any;\r\n\r\n    displayValue = '';\r\n    originalText = '';\r\n\r\n    get invalid() {\r\n        return this.ngControl.valid;\r\n    }\r\n\r\n    private ngZone: NgZone;\r\n\r\n    onModelChange = (obj: any) => { };\r\n    onModelTouched = (val: any) => { };\r\n    constructor(\r\n        public injector: Injector,\r\n        public el: ElementRef,\r\n        public changeDetector?: ChangeDetectorRef\r\n    ) {\r\n        this.ngZone = this.injector.get(NgZone);\r\n        // if (!this.personalConfigService) {\r\n        //     const idServ = this.injector.get(IdService);\r\n        //     this.personalConfigService = new PersonalConfigService(idServ);\r\n        // }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initEvents();\r\n        this.ngControl = this.injector.get(NgControl, null);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.lookupUnsubscribe();\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        if (this.dialog) {\r\n            this.dialog.closed.subscribe(() => {\r\n                this.isShow = false;\r\n                this.dialog = null;\r\n            });\r\n        }\r\n    }\r\n\r\n    initEvents() {\r\n        if (!this.dictPicking) {\r\n            this.dictPicking = () => of({ showDialog: true });\r\n        }\r\n        if (!this.dictPicked) {\r\n            this.dictPicked = () => of({ closeDialog: true });\r\n        }\r\n        if (!this.beforeOpen) {\r\n            this.beforeOpen = () => of(true);\r\n        }\r\n        if (!this.beforeClose) {\r\n            this.beforeClose = () => of(true);\r\n        }\r\n\r\n        if (!this.dialogHeight) {\r\n            this.dialogHeight = this.defaultDialogSize.height;\r\n        }\r\n\r\n        if (!this.dialogWidth) {\r\n            this.dialogWidth = this.defaultDialogSize.width;\r\n        }\r\n    }\r\n\r\n    showDialog(): any {\r\n        if (this.disabled || this.readonly) {\r\n            return false;\r\n        }\r\n        this.dictPicking().subscribe((val: PickingResult) => {\r\n            if (val.showDialog === false) {\r\n                return;\r\n            }\r\n\r\n            this.isShow = true;\r\n            // this.changeDetector.detectChanges();\r\n            this.ngZone.runOutsideAngular(() => {\r\n                setTimeout(() => this.dialog.show());\r\n            });\r\n        });\r\n\r\n        return false;\r\n    }\r\n\r\n    closeDialog() {\r\n        this.isShow = false;\r\n        if (this.dialog) {\r\n            this.dialog.close();\r\n        }\r\n    }\r\n\r\n\r\n    private lookupUnsubscribe() {\r\n        if (this.dictPickedSubscription) {\r\n            this.dictPickedSubscription.unsubscribe();\r\n        }\r\n        if (this.dictPickingSubscription) {\r\n            this.dictPickingSubscription.unsubscribe();\r\n        }\r\n        if (this.dialogCreatedSubscription) {\r\n            this.dialogCreatedSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    onResizing(pos: IResizeEvent) {\r\n        this.resizing.emit(pos.size);\r\n    }\r\n    onResized(pos: IResizeEvent) {\r\n        this.resized.emit(pos.size);\r\n    }\r\n    onMaxDialog(pos: IResizeEvent) {\r\n        this.dialogMaxed.emit(pos.size);\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        if (obj) {\r\n            this.displayText = obj;\r\n            this.displayValue = obj;\r\n            this.originalText = this.displayText;\r\n        } else {\r\n            this.displayText = '';\r\n            this.displayValue = '';\r\n            this.originalText = '';\r\n        }\r\n    }\r\n    registerOnChange(fn: any): void {\r\n        this.onModelChange = fn;\r\n    }\r\n    registerOnTouched(fn: any): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    setDisabledState?(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-07-10 11:44:49\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-25 18:10:54\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { DataColumn } from '@farris/ui-common/column';\r\n\r\nexport type ONLY_SELECT_LEAF = 'default' | 'yes' | 'no';\r\nexport type LOAD_DATA_TYPE = 'all' | 'fav' | 'list' | 'nav' | 'search' | 'children'\r\n                            | 'textchange' | 'sort' | 'navsearch' | 'selected' | 'allChildren' | 'navAllChildren';\r\n\r\n\r\nexport enum LookupLayout {\r\n    /** ç»å¸ï¼é»è®¤å¸å± */\r\n    default = 'default',\r\n    /** å¸®å©çªå£å¸å±æ¯æé«çº§æ¥è¯¢ï¼ */\r\n    advanced = 'advanced'\r\n}\r\nexport interface TreeInfo {\r\n    /** æ°æ®å è½½æ¹å¼ï¼ all, async */\r\n    loadDataType?: 'all' | 'async';\r\n    /** åå±æ¹å¼ï¼ pathcode, parentId */\r\n    layerType?: string;\r\n    /** æ°æ®ä¸­å¸¦æåçº§ä¿¡æ¯çå­æ®µ */\r\n    dataField?: string;\r\n    /** ç¶IDå­æ®µ */\r\n    parentField?: string;\r\n    /** åçº§ç å­æ®µ */\r\n    pathField?: string;\r\n    /** çº§æ°å­æ®µ */\r\n    layerField?: string;\r\n    /** æ¯å¦æç»å­æ®µ */\r\n    isDetailField?: string;\r\n    /**\r\n     * åªåè®¸éæ©å¶å­èç¹\r\n     * - default: åºç¨æå¡å¨ç«¯è®¾ç½®ï¼å¦æå¡å¨æªè®¾ç½®ï¼åè½å  `no`\r\n     * - `yes`: æå¡å¨ç«¯è®¾ç½®å¤±æãä»åè®¸éæ©å¶å­èç¹ã\r\n     * - `no`:  æå¡å¨ç«¯è®¾ç½®å¤±æãææèç¹åå¯éæ©ã\r\n     */\r\n    onlySelectLeaf?: boolean | ONLY_SELECT_LEAF;\r\n    /** æ ç»ææ°æ®æ¯å¦å·²åå§åå®æ */\r\n    treeDataIsInit?: boolean;\r\n}\r\n\r\nexport interface CustomStyleData {\r\n    field: string, \r\n    value: string, comparator?: string, \r\n    styles: { [key: string]: any }\r\n}\r\n\r\nexport interface LookupGridResult {\r\n    /** åä¿¡æ¯ */\r\n    columns?: DataColumn[];\r\n    /** æ°æ®åè¡¨ */\r\n    items?: any[];\r\n    /** æ¥è¯¢å­æ®µ */\r\n    searchFields?: { label: string, value: string }[];\r\n    /** åé¡µä¿¡æ¯ */\r\n    pageInfo?: { pageIndex: number, pageSize: number, pageList?: number[], enablePager: boolean };\r\n    /** æ»è®°å½æ° */\r\n    total?: number;\r\n    /** åºå¼ */\r\n    mapFields?: { desgine: string, runtime: string }[];\r\n    /** æ åçº§ä¿¡æ¯ */\r\n    treeInfo?: TreeInfo;\r\n    displayType?: string;\r\n    displayInfo?: DisplayInfo;\r\n    title?: string;\r\n    navigation?: NavigationOptions;\r\n    valueField?: string;\r\n    textField?: string;\r\n    idField?: string;\r\n    /** å·²éæ©æ°æ®åè¡¨ */\r\n    selectedItems?: any;\r\n    /** æ¶èæ°æ® */\r\n    favoriteItems?: any[];\r\n    /** èªå®ä¹è¡æ ·å¼ */\r\n    customStyles?: {\r\n        row?: Array<CustomStyleData>,\r\n        cell?:Array<CustomStyleData>\r\n    }\r\n}\r\n\r\n/** ä¸ªæ§åæ°æ® */\r\nexport interface PersonalConfig {\r\n    tabIndex?: string;\r\n    favorite?: {\r\n        [lang: string]: any[];\r\n    };\r\n    quickSelected?: {\r\n        [lang: string]: any[];\r\n    };\r\n    size?: any;\r\n    selections?: any;\r\n    cascadeStatus?: string;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface NavigationOptions extends LookupGridResult {\r\n    [key: string]: any;\r\n    displayType: 'List' | 'TreeList';\r\n    width: number;\r\n    idField?: string;\r\n    relations?: { groupField: string, helpField: string }[];\r\n    hover?: boolean;\r\n}\r\n\r\nexport interface LookupGridOptions extends LookupGridResult {\r\n    singleSelect?: boolean;\r\n    idField?: string;\r\n    uri?: string; // å¯ä»¥ä¸ºåæ°æ®IDãwebapi å°å\r\n    showFilterBar?: boolean;\r\n    pagination?: boolean;\r\n    pageIndex?: number;\r\n    pageSize?: number;\r\n    pageList?: number[];\r\n    total?: number;\r\n    width?: number;\r\n    height?: number;\r\n    hover?: boolean;\r\n}\r\n\r\nexport class DisplayInfo {\r\n    title?: string;\r\n    favorites?: string;\r\n    okText?: string;\r\n    cancelText?: string;\r\n    allColumns?: string;\r\n}\r\n\r\nexport const lookupGridDefaults: LookupGridOptions = {\r\n    singleSelect: true,\r\n    showFilterBar: true,\r\n    pagination: true,\r\n    pageIndex: 1,\r\n    pageSize: 10,\r\n    pageList: [10, 20, 30, 50, 100]\r\n};\r\n\r\nexport const displayInfoDefault = {\r\n    title: 'æ­¤å¤æ¾ç¤ºæ é¢',\r\n    favorites: 'æ¶èå¤¹',\r\n    okText: 'ç¡®å®',\r\n    cancelText: 'åæ¶',\r\n    allColumns: 'ææå'\r\n};\r\n\r\n/** å¸®å©åäºä»¶è¿åç±»å */\r\nexport interface PickingResult {\r\n    /** true: ç»§ç»­æå¼å¸®å©ï¼false: ä¸æå¼å¸®å©çªå£ */\r\n    showDialog: boolean;\r\n    /** æºå¸¦çä¸äºèªå®ä¹æ°æ®ï¼ç±ä¸å¡å¨æå¡å¨ç«¯å¸®å©åäºä»¶ä¸­å¤ç */\r\n    data?: any;\r\n    message?: any;\r\n}\r\n\r\nexport interface PickedResult {\r\n    closeDialog: boolean;\r\n    message?: any;\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-05-23 10:27:07\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-08-15 14:11:43\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { InjectionToken } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { LOOKUP_HTTP_PARAMS } from './RemoteParams';\r\nimport { LookupGridResult } from '../lookup-grid-options';\r\n\r\nexport interface ILookupHttpService {\r\n    context?: any;\r\n    /**\r\n     * æ ¹æ®æå®çå¸®å©åæ°æ®IDåç¸å³åæ°è·åæ°æ®\r\n     * @param uri å¸®å©åæ°æ®ID or Rest API\r\n     * @param data æå¡å¨ç«¯æ¥æ¶åæ° key/value\r\n     */\r\n    getData(uri: string, params?: LOOKUP_HTTP_PARAMS): Observable<LookupGridResult>;\r\n}\r\nexport const ServerSideToken = new InjectionToken<ILookupHttpService>('Lookup Grid HTTP service');\r\n","import { Injectable } from '@angular/core';\r\nimport { trim } from 'lodash-es';\r\nimport { CommonUtils } from '@farris/ui-common';\r\n\r\n@Injectable()\r\nexport class LookupDefaultMapping {\r\n\r\n    constructor(private utils: CommonUtils) {}\r\n\r\n    lookupFieldMap = (helpData, mapFields, dataObj) => {\r\n        if (mapFields) {\r\n            const helpFields = Object.keys(mapFields);\r\n            helpFields.forEach( (f: any) => {\r\n                let val = '';\r\n                if (helpData) {\r\n                    if (helpData instanceof Array) {\r\n                        val = helpData.map( (h: any) => {\r\n                            return this.utils.getValue(f, h);\r\n                        }).join(',');\r\n                    } else {\r\n                        val = this.utils.getValue(f, helpData);\r\n                    }\r\n\r\n                }\r\n\r\n                mapFields[f].split(',').forEach( (ff: any) => {\r\n                    const field = trim(ff);\r\n                    this.utils.setValue(dataObj, field, val);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { CommonUtils, RuntimeStateService } from '@farris/ui-common';\r\nimport { FilterRelation, FilterCondition, Compare, EntityFilter } from '@farris/ui-common/types';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { TreeInfo } from './lookup-grid-options';\r\n\r\n@Injectable()\r\nexport class LookupUtils {\r\n\r\n    constructor(private utils: CommonUtils, private rts: RuntimeStateService, private ngZone: NgZone) { }\r\n\r\n    setActiveLookupInstance(lookupIns: any) {\r\n        if (this.rts) {\r\n            this.rts.setLookupInstance(lookupIns);\r\n        }\r\n    }\r\n\r\n\r\n    destroy() {\r\n        this.rts.destroy();\r\n    }\r\n\r\n    pendingStart() {\r\n        if (this.rts) {\r\n            this.rts.updateFormState({\r\n                lookup: {\r\n                    pending: true\r\n                }\r\n            });\r\n\r\n            // ç¦ç¨é¡µé¢çææé¼ æ äºä»¶\r\n            document.body.style['pointer-events'] = 'none';\r\n        }\r\n    }\r\n\r\n    pendingEnd() {\r\n        if (this.rts) {\r\n            this.rts.updateFormState({\r\n                lookup: {\r\n                    pending: false\r\n                }\r\n            });\r\n\r\n            // æ¿æ´»é¼ æ äºä»¶\r\n            document.body.style['pointer-events'] = '';\r\n        }\r\n    }\r\n\r\n    getPathCode(data, treeInfo = null) {\r\n        const { dataField, pathField } =  treeInfo ;\r\n        if (dataField) {\r\n            return data[dataField][pathField];\r\n        } else {\r\n            return this.utils.getValue(pathField, data);\r\n        }\r\n    }\r\n    getLayerData(data, treeInfo = null ) {\r\n        const { dataField, layerField } = treeInfo;\r\n        if (dataField) {\r\n            return data[dataField][layerField];\r\n        } else {\r\n            return this.utils.getValue(layerField, data);\r\n        }\r\n    }\r\n\r\n\r\n    private createFilterCondition(field: string, value: string) {\r\n        return {\r\n            filterField: field,\r\n            value,\r\n            lbracket: '',\r\n            rbracket: '',\r\n            relation: FilterRelation.Or,\r\n            compare: Compare.Like\r\n        };\r\n    }\r\n\r\n    mergeCondition(condition: EntityFilter, fields: string[], searchData: { field: string, value: string }) {\r\n        if (!condition) {\r\n            condition = {\r\n                pagination: {\r\n                    pageIndex: 1,\r\n                    pageSize: 20\r\n                },\r\n                filterConditions: [],\r\n                sortConditions: []\r\n            };\r\n        } else {\r\n            condition = cloneDeep(condition);\r\n        }\r\n\r\n        const { field = '*', value = '' } = { ...searchData };\r\n\r\n        if (value) {\r\n            if (field === '*') {\r\n                if (fields && fields.length) {\r\n                    const searchConditions: FilterCondition[] = fields.map((f: string) => {\r\n                        return this.createFilterCondition(f, value);\r\n                    });\r\n\r\n                    if (searchConditions.length) {\r\n                        searchConditions[0].lbracket = '(';\r\n                        const lastSearchConditions = searchConditions[searchConditions.length - 1];\r\n                        lastSearchConditions.rbracket = ')';\r\n                        lastSearchConditions.relation = FilterRelation.Empty;\r\n                    }\r\n\r\n                    if (condition.filterConditions && condition.filterConditions.length) {\r\n                        condition.filterConditions[condition.filterConditions.length - 1].relation = FilterRelation.And;\r\n                        condition.filterConditions = condition.filterConditions.concat(searchConditions);\r\n                    } else {\r\n                        condition.filterConditions = searchConditions;\r\n                    }\r\n                }\r\n            } else {\r\n                const searchCondition = this.createFilterCondition(field, value);\r\n                searchCondition.relation = FilterRelation.Empty;\r\n                if (condition.filterConditions && condition.filterConditions.length) {\r\n                    condition.filterConditions[condition.filterConditions.length - 1].relation = FilterRelation.And;\r\n                    condition.filterConditions.push(searchCondition);\r\n                } else {\r\n                    condition.filterConditions = [searchCondition];\r\n                }\r\n            }\r\n        }\r\n\r\n        return condition;\r\n    }\r\n\r\n    private canSelectable(n: any) {\r\n        if (n.hasOwnProperty('farris_selectable')) {\r\n            return !!n['farris_selectable'];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** å°æ°æ®è½¬æ å½¢ç»æ */\r\n    makeTreeWithParentID(data: any[], parentId, parentIdField = 'parentId', idField = 'id') {\r\n        const nodes = new Map<string, any>();\r\n        const result = [];\r\n        const unattached = [];\r\n        data.forEach(t => {\r\n            const node = {\r\n                data: t,\r\n                children: [],\r\n                selectable: this.canSelectable(t),\r\n                parent: null,\r\n                parents: []\r\n            };\r\n            const id = t[idField];\r\n            nodes.set(id, node);\r\n            const PID = this.utils.getValue(parentIdField, t);\r\n            if (PID === parentId) {\r\n                result.push(node);\r\n            } else {\r\n                const parent = nodes.get(PID);\r\n                if (parent) {\r\n                    node.parent = PID;\r\n                    node.parents = [...parent.parents, PID];\r\n                    parent.children.push(node);\r\n                } else {\r\n                    unattached.push(node);\r\n                }\r\n            }\r\n        });\r\n\r\n        unattached.forEach(n => {\r\n            const pid = this.utils.getValue(parentIdField, n.data);\r\n            const parent = nodes.get(pid);\r\n            if (parent) {\r\n                n.parent = pid;\r\n                n.parents = [...parent.parents, pid];\r\n                parent.children.push(n);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    makeTree(data, treeInfo: TreeInfo) {\r\n        // const treeInfoField = treeInfo.dataField;\r\n        // const layerField = treeInfo.layerField;\r\n        // const pathField = treeInfo.pathField;\r\n\r\n        const nodes = new Map<string, any>();\r\n        const result = [];\r\n        const unattached = [];\r\n        data.forEach(t => {\r\n            const node = {\r\n                data: t,\r\n                children: [],\r\n                selectable: this.canSelectable(t)\r\n            };\r\n            const pathCode = this.getPathCode(t, treeInfo);\r\n            nodes.set(pathCode, node);\r\n\r\n            if (this.getLayerData(t, treeInfo) === 1) {\r\n                result.push(node);\r\n            } else {\r\n                const parentPathCode = pathCode.substr(0, pathCode.length - 4);\r\n                const parent = nodes.get(parentPathCode);\r\n                if (parent) {\r\n                    parent.children.push(node);\r\n                } else {\r\n                    unattached.push(node);\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        unattached.forEach(n => {\r\n            // const pathCode = n.data[treeInfoField][pathField];\r\n            const pathCode = this.getPathCode(n.data, treeInfo);\r\n            const parent = nodes.get(pathCode.substr(0, pathCode.length - 4));\r\n            if (parent) {\r\n                parent.children.push(n);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { IdService } from '@farris/ui-common';\r\nimport { Subject } from 'rxjs';\r\nimport { PersonalConfig } from './lookup-grid-options';\r\n\r\n\r\n@Injectable()\r\nexport class PersonalConfigService {\r\n    // ä¸ªæ§åéç½®\r\n    personalConf: PersonalConfig;\r\n\r\n    selectItemObser$ = new Subject();\r\n\r\n    displayType = 'LIST';\r\n\r\n    singleSelect = true;\r\n    idField: string;\r\n    textField: string;\r\n    mapFields: any;\r\n\r\n    // ä¸ªæ§åéç½®KEY\r\n    private _key = '';\r\n    _newKey = '';\r\n    get personalConfigKey() {\r\n        return this._key;\r\n    }\r\n    set personalConfigKey(val) {\r\n        if (val) {\r\n            this._key = this.buildKey(val);\r\n            if (this.controlID) {\r\n                this._newKey = this.buildKey(this.controlID + '_' + val);\r\n            } else {\r\n                this._newKey = this._key;\r\n            }\r\n        } else {\r\n            this._newKey = this.buildKey(this.controlID);\r\n        }\r\n    }\r\n\r\n    // ç»ä»¶ID\r\n    controlID = '';\r\n\r\n    constructor(private idService: IdService) {}\r\n\r\n    private buildKey(str) {\r\n        let prefix = '';\r\n        if (location.hash) {\r\n            const pathArr = location.hash.split('?');\r\n            prefix = pathArr ? pathArr[0] : '';\r\n        } else {\r\n            const pathArr  = location.pathname.split('/');\r\n            prefix = pathArr ? pathArr[pathArr.length - 1] : '';\r\n        }\r\n        return this.idService.encrypt(prefix + str);\r\n    }\r\n\r\n    initPersonalConf(obj) {\r\n        Object.assign(this, obj);\r\n    }\r\n\r\n    getPersonalData(key?: string): PersonalConfig {\r\n        if (key) {\r\n            this._key = key;\r\n        }\r\n\r\n        if (this.personalConfigKey) {\r\n            const conf = localStorage.getItem(this.personalConfigKey);\r\n\r\n            if (conf && conf !== 'undefined' && conf !== 'null') {\r\n                this.personalConf = conf ? JSON.parse(conf) : {};\r\n                this._updatePersonalConfig(this.personalConf);\r\n\r\n                if (this.controlID) {\r\n                    if (this._key !== this._newKey) {\r\n                        localStorage.removeItem(this._key);\r\n                    }\r\n                    this.savePersonalConfig(this.personalConf);\r\n                }\r\n\r\n                return this.personalConf;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getQuickSelected(localeId?: string): any {\r\n        const d = this.getPersonalData();\r\n        const qs =  d ? d.quickSelected : null;\r\n\r\n        if (localeId) {\r\n            if (qs) {\r\n                const items = qs[localeId];\r\n                if (items && items.length) {\r\n                    return items;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        return qs;\r\n    }\r\n\r\n    getDialogSize() {\r\n        const d = this.getPersonalData();\r\n        return d ? d.size : null;\r\n    }\r\n\r\n    updatePersonalConfig(cfg: Partial<PersonalConfig>) {\r\n        const data = Object.assign(this.personalConf || {}, cfg);\r\n        this.savePersonalConfig(data);\r\n    }\r\n\r\n    savePersonalConfig(data: PersonalConfig) {\r\n        if (this._newKey) {\r\n            let _data = localStorage.getItem(this._newKey) as any;\r\n            if (_data) {\r\n                _data = JSON.parse(_data) as PersonalConfig;\r\n\r\n                if (_data.favorite) {\r\n                    if (!data.favorite) {\r\n                        data.favorite = _data.favorite;\r\n                    } else {\r\n                        Object.keys(_data.favorite).forEach((lang) => {\r\n                            data.favorite[lang] = data.favorite[lang] || [];\r\n                            if (_data.favorite[lang]) {\r\n                                const arr = Array.from(new Set([...data.favorite[lang], ..._data.favorite[lang]]));\r\n                                data.favorite[lang] = arr;\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            localStorage.setItem(this._newKey, JSON.stringify(data));\r\n            this.personalConf = data;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getActiveTabIndex(tabName?: string) {\r\n        const d = this.getPersonalData();\r\n        if (!tabName) {\r\n            return d && d.tabIndex ? d.tabIndex  : 'datalist';\r\n        }\r\n        return tabName;\r\n    }\r\n\r\n    updateQueckSelected(selectedRow: any, localeId: string) {\r\n        const quickItems = this.getQuickSelected(localeId);\r\n\r\n        if (quickItems && quickItems.length) {\r\n            const selectedIndex = [];\r\n            quickItems.forEach((element, index) => {\r\n                if (this.singleSelect) {\r\n                    if (element && selectedRow && element[this.idField] === selectedRow[this.idField]) {\r\n                        selectedIndex.push(index);\r\n                    }\r\n                } else {\r\n                    if (selectedRow) {\r\n                        selectedRow.forEach(item => {\r\n                            if (element && element[this.idField] === item[this.idField]) {\r\n                                selectedIndex.push(index);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n\r\n            selectedIndex.forEach(index => {\r\n                quickItems[index] = null;\r\n            });\r\n\r\n            this.personalConf.quickSelected[localeId] =\r\n                this.personalConf.quickSelected[localeId].filter(v => v !== null);\r\n            if (this.singleSelect) {\r\n                this.personalConf.quickSelected[localeId].unshift(selectedRow);\r\n            } else {\r\n                if (selectedRow) {\r\n                    selectedRow.forEach(element => {\r\n                        this.personalConf.quickSelected[localeId].unshift(element);\r\n                    });\r\n                }\r\n            }\r\n            this.personalConf.quickSelected[localeId].length =\r\n                this.personalConf.quickSelected[localeId].length > 5 ?\r\n                    5 : this.personalConf.quickSelected[localeId].length;\r\n        } else {\r\n            const _qs = this.personalConf.quickSelected || {};\r\n            let newData;\r\n            if (this.singleSelect) {\r\n                newData = Object.assign(_qs, { [localeId]: [selectedRow] });\r\n            } else {\r\n                selectedRow.length = selectedRow.length > 5 ? 5 : selectedRow.length;\r\n                newData = Object.assign(_qs, { [localeId]: selectedRow });\r\n            }\r\n            this.personalConf.quickSelected = newData;\r\n        }\r\n\r\n        this.savePersonalConfig(this.personalConf);\r\n    }\r\n\r\n    /**\r\n     *  æ´æ°æ°æ®ç»æï¼ç°æä¸ªæ§åæ°æ®åè½¬ä¸º ä¸­æç¯å¢ä¸æ°æ®ï¼\r\n     */\r\n    _updatePersonalConfig(per: PersonalConfig) {\r\n        if (per) {\r\n            let flag = false;\r\n            // æ´æ°æ¶èæ°æ®\r\n            if (per.favorite && Array.isArray(per.favorite)) {\r\n                per.favorite = { 'zh-CHS': [...per.favorite] };\r\n                delete per.favorite;\r\n\r\n                flag = true;\r\n            }\r\n            // æ´æ°å¿«æ·å½å¥æ°æ®\r\n            if (per.selected) {\r\n                if (Array.isArray(per.selected)) {\r\n                    per.quickSelected = { 'zh-CHS': [...per.selected] };\r\n                }\r\n                delete per.selected;\r\n                flag = true;\r\n            }\r\n\r\n            if (flag) {\r\n                this.savePersonalConfig(per);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","import { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupGridDisplayType } from '../lookup-displaytype';\r\nimport { TreeTableComponent, TreeNode } from '@farris/ui-treetable';\r\n\r\nexport class UtilService {\r\n\r\n    constructor(public instance: LookupGridComponent) { }\r\n\r\n\r\n}\r\n","import { TreeNode } from '@farris/ui-treetable';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { TreeInfo } from '../lookup-grid-options';\r\n\r\nexport class TreeNodeHelper {\r\n    treeInfo: TreeInfo;\r\n    flatAllNodes = [];\r\n    constructor(private instance: LookupGridComponent) { }\r\n\r\n    getTreeInfo(treeNode: TreeNode) {\r\n        if (treeNode.data[this.treeInfo.dataField]) {\r\n            return treeNode.data[this.treeInfo.dataField];\r\n        }\r\n\r\n        const data = treeNode.data;\r\n        if (data && this.treeInfo.dataField) {\r\n\r\n            const treeInfoDataField = this.treeInfo.dataField.toLowerCase();\r\n            const dataField = Object.keys(treeNode.data).find(n => {\r\n                return n.toLowerCase() === treeInfoDataField;\r\n            });\r\n            if (dataField) {\r\n                return data[dataField];\r\n            } else {\r\n                this.instance.writeConsole(`æªæ¾å°æ å½¢ä¿¡æ¯æ°æ®å­æ®µã${this.treeInfo.dataField}ã`, 'error');\r\n            }\r\n        } else {\r\n            this.instance.writeConsole(`æªæ¾å°æ å½¢ä¿¡æ¯æ°æ®å­æ®µã${this.treeInfo.dataField}ã`, 'error');\r\n        }\r\n    }\r\n\r\n    getTreeNodeLayer(treeNode: TreeNode) {\r\n        return this.getTreeInfo(treeNode)[this.treeInfo.layerField];\r\n    }\r\n    /** æ´æ°èç¹çå±å¼ç¶æã æ ¹æ®ç»ä»¶ä¸­ expandLevel çå¼å³å®\r\n     * -1ï¼ä¸å±å¼ï¼0ï¼å¨é¨å±å¼ï¼>0 å±å¼å°æå®çº§æ°\r\n     */\r\n    updateTreeNodeExpanded(treeNodes: TreeNode[], treeInfo: TreeInfo = null) {\r\n        if (treeInfo) {\r\n            this.treeInfo = treeInfo;\r\n        } else {\r\n            this.treeInfo = this.instance.treeInfo;\r\n        }\r\n        const expandLevel = this.instance.expandLevel;\r\n        if (expandLevel === -1) {\r\n            return;\r\n        }\r\n        if (!this.flatAllNodes.length) {\r\n            this.flatAllNodes = this.treeData2Flat(null, treeNodes, 0, []);\r\n        }\r\n\r\n        treeNodes.forEach((tn: TreeNode) => {\r\n            tn.expanded = this.shoudExpand(expandLevel, this.getTreeNodeLayer(tn));\r\n            if (this.isSelectNodeParent(tn)) {\r\n                tn.expanded = true;\r\n            }\r\n            if (tn.children && tn.children.length) {\r\n                this.updateTreeNodeExpanded(tn.children, treeInfo);\r\n            } else {\r\n                tn.leaf = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    private treeData2Flat(parent, nodes, level, parentIds) {\r\n        const idField = this.instance.idField;\r\n        let arr = [];\r\n        if (nodes && nodes.length) {\r\n\r\n            nodes.forEach((node, index) => {\r\n                // node.parent = parent;\r\n\r\n                let parents = [];\r\n                if (parent) {\r\n                    const parentID = parent.data[idField];\r\n                    const _parents = parentIds || [];\r\n                    parents = parents.concat(_parents.map(n => n));\r\n                    parents.push(parentID);\r\n                }\r\n                const rowNode = {\r\n                    id: node.data[idField],\r\n                    node,\r\n                    level,\r\n                    parents,\r\n                };\r\n                arr.push(rowNode);\r\n                arr = arr.concat(this.treeData2Flat(node, node.children, level + 1, parents));\r\n            });\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    private shoudExpand(expandLevel: number, nodeLayer: number) {\r\n        if (expandLevel === -1) {\r\n            // -1 ä¸ºä¸å±å¼\r\n            return false;\r\n        } else if (expandLevel === 0) {\r\n            // 0 ä¸ºå¨é¨å±å¼\r\n            return true;\r\n        } else {\r\n            // æ²¡æå¯ç¨åå±å è½½ï¼éè¿å±å¼å±çº§ç¡®å®æ¯å¦å±å¼è¯¥èç¹\r\n            return nodeLayer <= expandLevel;\r\n        }\r\n    }\r\n\r\n    private isSelectNodeParent(treeNode) {\r\n        if (this.instance.navSelectedIds) {\r\n            const allParentIds: string[] = this.flatAllNodes.find(f => f.id === this.instance.navSelectedIds).parents;\r\n            if (allParentIds && allParentIds.length) {\r\n                return allParentIds.includes(treeNode.id);\r\n            }\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getLeafNode(treeNode: TreeNode) {\r\n        if (treeNode && (!treeNode.children || !treeNode.children.length)) {\r\n            return treeNode;\r\n        } else {\r\n            if (treeNode.children.length === 1) {\r\n                return this.getLeafNode(treeNode.children[0]);\r\n            } else {\r\n                return treeNode.children;\r\n            }\r\n        }\r\n    }\r\n\r\n    flatTreeNodes(items, result = []) {\r\n        items = items || [];\r\n        return  items.reduce((c, n) => {\r\n            c.push(n);\r\n            if (n.children && n.children.length) {\r\n                this.flatTreeNodes(n.children, c);\r\n            }\r\n            return c;\r\n        }, result);\r\n    }\r\n}\r\n","import { ComponentRef } from '@angular/core';\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\nimport { TreeNode, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { UserFavoriteData } from '../http/RemoteParams';\r\nimport { FavoriteAction, FavoriteIcon, FAVORITE_FIELD_NAME, LookupGridDisplayType } from '../lookup-displaytype';\r\nimport { LookupGridResult } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupSelectionService } from './lookup-selection.service';\r\n\r\nexport class FavoriteHelper {\r\n\r\n    private lookupSelectionSer: LookupSelectionService;\r\n\r\n    constructor(private instance: LookupGridComponent) {\r\n        this.lookupSelectionSer = this.instance.lookupSelectionSer;\r\n    }\r\n\r\n    getFavoriteColumns(): any[] {\r\n        const columns = this.instance.gridOptions.columns.map(item => {\r\n            const rtn = Object.assign({}, item);\r\n            if (item.field === FAVORITE_FIELD_NAME) {\r\n                rtn.formatter = () => FavoriteIcon.delete;\r\n            }\r\n            return rtn;\r\n        });\r\n        return columns;\r\n    }\r\n\r\n    favoriteColumnFormatter = (v: any, data: any  ) => {\r\n        const f =  v ? FavoriteIcon.yes : FavoriteIcon.no;\r\n        if (this.instance.isTree()) {\r\n            const id = data[this.instance.idField];\r\n            if (id) {\r\n                const tt = this.instance.componentRef.instance as TreeTableComponent;\r\n                const rn = tt.findRowNode(id);\r\n                if (rn) {\r\n                    if (rn.node.selectable) {\r\n                        return f;\r\n                    } else {\r\n                        return '';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return f;\r\n    }\r\n\r\n    initPersonalInfo() {\r\n        if (this.instance.personalConfigService) {\r\n            const controlID = this.instance.el.nativeElement.id || this.instance.controlId;\r\n            if (!controlID) {\r\n                this.instance.writeConsole('LookupGrid - æªè®¾ç½®ç»ä»¶id, æ¶èåè½å°ä¸è½æ­£å¸¸ï¼è¯·è®¾ç½®ç»ä»¶id.');\r\n            }\r\n            const pcstr = this.instance.getLookupBindingFields();\r\n            this.instance.personalConfigService.controlID = controlID;\r\n            this.instance.personalConfigService.personalConfigKey = pcstr;\r\n\r\n            const conf = {\r\n                displayType: this.instance.displayType,\r\n                singleSelect: this.instance.singleSelect,\r\n                idField: this.instance.idField,\r\n                textField: this.instance.textField,\r\n                mapFields: Object.assign({}, this.instance.mapFields || {})\r\n            };\r\n\r\n            this.instance.personalConfigService.initPersonalConf(conf);\r\n\r\n            // ä¸ªæ§åéç½®çè®¢éäºä»¶å¤ç\r\n            this.listenPersonalConfigHandler();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * çå¬æ¶èTABé¡µä¸­ç¸å³äºä»¶ï¼\r\n     * æ°æ®éä¸­ï¼åæ¶éä¸­ï¼ç§»é¤æ¶èï¼åå»äºä»¶\r\n     */\r\n    initFavoriteComponentEvent(cmpRef: ComponentRef<any>) {\r\n        switch (this.instance.displayType) {\r\n            case LookupGridDisplayType.NavList:\r\n            case LookupGridDisplayType.NavTreeList:\r\n            case LookupGridDisplayType.List: {\r\n                const fdt = cmpRef.instance as DataTableComponent;\r\n                fdt.remoteSort = false;\r\n                fdt.selectedRow.subscribe(e => {\r\n                    if (this.instance.singleSelect) {\r\n                        this.lookupSelectionSer.clearSelections();\r\n                    }\r\n                    this.lookupSelectionSer.updateSelections(e.data);\r\n                });\r\n                fdt.unSelectRow.subscribe(e => {\r\n                    this.lookupSelectionSer.unSelect(e.data[this.instance.idField]);\r\n                });\r\n\r\n                if (!fdt.singleSelect) {\r\n                    fdt.checkAll.subscribe(e => {\r\n                        this.lookupSelectionSer.updateSelections(fdt.data, e);\r\n                    });\r\n                }\r\n\r\n                fdt.cellClick.subscribe((e: any) => {\r\n                    if (e.col.field === FAVORITE_FIELD_NAME) {\r\n                        e.event.stopPropagation();\r\n                        // tslint:disable-next-line: no-string-literal\r\n                        const classList = e.event.target['classList'];\r\n                        if (classList.contains('f-lookup-unfavorite')) {\r\n                            if (this.instance.items) {\r\n                                this.instance.items.forEach(item => {\r\n                                    if (item[this.instance.idField] === e.row[this.instance.idField]) {\r\n                                        item[FAVORITE_FIELD_NAME] = false;\r\n                                    }\r\n                                });\r\n\r\n                                const dt = this.instance.componentRef.instance as DataTableComponent;\r\n                                if (dt) {\r\n                                    dt.loadData({\r\n                                        pageSize: this.instance.gridOptions.pageSize,\r\n                                        pageIndex: this.instance.gridOptions.pageIndex,\r\n                                        total: this.instance.gridOptions.total,\r\n                                        data: this.instance.gridOptions.items\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            this.instance.favoriteItems =\r\n                                this.instance.favoriteItems.filter(n => n[this.instance.idField] !== e.row[this.instance.idField]);\r\n\r\n                            this.lookupSelectionSer.updateFavoriteData(e.row, FavoriteAction.delete);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // åå»äºä»¶\r\n                fdt.rowDblClick.subscribe((rowData: any) => {\r\n                    if (this.instance.gridOptions.singleSelect) {\r\n                        this.instance.selectItem(rowData);\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case LookupGridDisplayType.TreeList: {\r\n                if (cmpRef) {\r\n                    const ftt = cmpRef.instance as TreeTableComponent;\r\n                    ftt.remoteSort = false;\r\n                    ftt.nodeSelected.subscribe(e => {\r\n                        if (this.instance.singleSelect) {\r\n                            this.lookupSelectionSer.clearSelections();\r\n                        }\r\n                        this.lookupSelectionSer.updateSelections(e.node.data);\r\n                    });\r\n                    ftt.nodeUnChecked.subscribe(e => {\r\n                        if (e.nodes && e.nodes.length) {\r\n                            this.instance.multiSelMgr.remove(e.nodes.map(n => n.id));\r\n                        } else if (e && e.node && e.node.data && e.node.data.id) {\r\n                            // const tt = this.instance.componentRef.instance as TreeTableComponent;\r\n                            // tt.unSelectNode(e.node.data.id);\r\n                            this.lookupSelectionSer.unSelect(e.node.data.id);\r\n                        }\r\n                    });\r\n\r\n                    ftt.nodeChecked.subscribe( e => {\r\n                        if (!this.instance.singleSelect) {\r\n                            if (e.nodes && e.nodes.length) {\r\n                                this.instance.multiSelMgr.updateSelections(e.nodes.map(n => n.data));\r\n                            } else {\r\n                                if (Array.isArray(e.node)) {\r\n                                    this.instance.multiSelMgr.updateSelections(e.node.map(n => n.data));\r\n                                } else {\r\n                                    this.instance.multiSelMgr.updateSelections([e.node.data]);\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    ftt.cellClick.subscribe(row => {\r\n                        if (row.col.field === FAVORITE_FIELD_NAME) {\r\n                            row.event.stopPropagation();\r\n                            const classList = row.event.target['classList'];\r\n                            if (classList.contains('f-lookup-unfavorite')) {\r\n                                const _this = this.instance;\r\n                                (function every(items) {\r\n                                    if (!items) {\r\n                                        return;\r\n                                    }\r\n                                    let hasFinish = false;\r\n                                    items.forEach(item => {\r\n                                        if (hasFinish) {\r\n                                            return;\r\n                                        }\r\n                                        if (item.data[_this.idField] === row.node[_this.idField]) {\r\n                                            item.data[FAVORITE_FIELD_NAME] = false;\r\n                                            hasFinish = true;\r\n                                        } else if (item.children && item.children.length > 0) {\r\n                                            every(item.children);\r\n                                        }\r\n                                    });\r\n                                })(this.instance.items);\r\n                                const tt = this.instance.componentRef.instance as TreeTableComponent;\r\n                                tt.loadData(this.instance.items);\r\n\r\n                                this.lookupSelectionSer.updateFavoriteData(row.node.data, FavoriteAction.delete);\r\n                            }\r\n                        }\r\n                    });\r\n                    ftt.dblClick.subscribe((treeNode: TreeNode) => {\r\n                        if (this.instance.gridOptions.singleSelect && treeNode.selectable) {\r\n                            if (this.instance.okButton) {\r\n                                this.instance.okButton.nativeElement.click();\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    ftt.checkAll.subscribe( e => {\r\n                        const data = e.instance.checkeds.map(n => n.data);\r\n                        this.instance.multiSelMgr.updateSelections(data);\r\n                        this.instance.checkedChange.emit({ data, isCheck: true  });\r\n                    });\r\n                    ftt.unCheckAll.subscribe(() => {\r\n                        this.instance.multiSelMgr.clear();\r\n                        this.instance.checkedChange.emit({ data: [], isCheck: false  });\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private getFavoritData() {\r\n        if (this.instance.personalConf) {\r\n            const favData = this.instance.personalConf.favorite;\r\n            const _data = (favData && favData[this.instance.localService.localeId]) ? favData[this.instance.localService.localeId] : [];\r\n            return _data;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getFavoritIds() {\r\n        return this.getFavoritData();\r\n    }\r\n\r\n    _loadFavoriteData(data = null) {\r\n        const fdt = this.instance.favoritesComponentRef.instance as DataTableComponent;\r\n        this.loadFavoriteDatatable(fdt, data);\r\n        fdt.cd.markForCheck();\r\n        this.instance.closeLoading();\r\n    }\r\n\r\n    // å è½½æ¶ègridæ°æ®\r\n    loadFavoritesData(res = null) {\r\n        const favIds = this.getFavoritIds();\r\n        switch (this.instance.displayType) {\r\n            case LookupGridDisplayType.NavList:\r\n            case LookupGridDisplayType.NavTreeList:\r\n            case LookupGridDisplayType.List: {\r\n                const fdt = this.instance.favoritesComponentRef.instance as DataTableComponent;\r\n                if (this.instance.favoriteDataFrom === 'locale') {\r\n                    if (res) {\r\n                        this._loadFavoriteData(res.items);\r\n                    } else {\r\n                        // this.instance.httpMgr.getFavoriteData(favIds).subscribe(resData => {\r\n                        //     if (resData) {\r\n                        //         this._loadFavoriteData(resData.items);\r\n                        //     }\r\n                        //     this.instance.closeLoading();\r\n                        // });\r\n                    }\r\n                } else {\r\n                    const favData = this.getFavoritData();\r\n                    this.loadFavoriteDatatable(fdt, res ? res.items : favData);\r\n                }\r\n                break;\r\n            }\r\n            case LookupGridDisplayType.TreeList: {\r\n                if (this.instance.favoritesComponentRef && this.instance.favoritesComponentRef.instance instanceof TreeTableComponent) {\r\n                    const ftt = this.instance.favoritesComponentRef.instance as TreeTableComponent;\r\n                    this.bindFavTreetable(ftt);\r\n\r\n                    if (this.instance.favoriteDataFrom === 'locale') {\r\n                        if (res) {\r\n                            this.loadFavoriteForTreeTable(res.items || [], ftt);\r\n                        } else {\r\n                            // this.instance.httpMgr.getFavoriteData(favIds).subscribe(resData => {\r\n                            //     if (resData) {\r\n                            //         const items = resData.items;\r\n                            //         this.loadFavoriteForTreeTable(items, ftt);\r\n                            //     }\r\n                            //     this.instance.closeLoading();\r\n                            // });\r\n                        }\r\n                    } else {\r\n                        if (res) {\r\n                            this.loadFavoriteForTreeTable(res.items, ftt);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private loadFavoriteDatatable(fdt: DataTableComponent, data?: any) {\r\n        if (data !== undefined) {\r\n            this.instance.favoriteItems = data;\r\n        }\r\n\r\n        if (fdt.columns && !fdt.columns.length) {\r\n            fdt.columns = this.instance.favoriteColumns;\r\n        }\r\n\r\n        fdt.loadData({\r\n            total: 0,\r\n            pageSize: 20,\r\n            pageIndex: 1,\r\n            data: this.instance.favoriteItems\r\n        });\r\n\r\n\r\n        this.instance.selectionMgr.selectCurrentValue();\r\n        fdt.cd.detectChanges();\r\n    }\r\n\r\n\r\n    private bindFavTreetable(ftt: TreeTableComponent) {\r\n        ftt.allColumnsTitle = this.instance.allColumnsTitle;\r\n        ftt.idField = this.instance.idField;\r\n\r\n        const columns = this.instance.gridOptions.columns.map(item => {\r\n            const rtn: any = { ...item };\r\n            if (item.field === FAVORITE_FIELD_NAME) {\r\n                rtn.formatter = (v: any, data: any): any => {\r\n                    const favids = this.getFavoritIds();\r\n                    if (favids && favids.length) {\r\n                        const index = favids.findIndex(el => el === data[this.instance.idField]);\r\n                        if (index >= 0) {\r\n                            return FavoriteIcon.delete;\r\n                        }\r\n                    }\r\n                    return '';\r\n                };\r\n            }\r\n            return rtn;\r\n        });\r\n        this.instance.favoriteColumns = columns;\r\n        ftt.columns = columns;\r\n\r\n\r\n        if (this.instance.gridOptions.treeInfo) {\r\n            ftt.onlySelectLeaf = this.instance.gridOptions.treeInfo.onlySelectLeaf;\r\n        }\r\n\r\n        if (!ftt.singleSelect) {\r\n            ftt.checkOnSelect = true;\r\n            ftt.selectOnCheck = true;\r\n            ftt.showCheckbox = true;\r\n\r\n            // å¯ç¨å¤éåï¼åæ¶å¯ç¨çº§èéæ©\r\n            // å¯ç¨å¤éåï¼åæ¶å¯ç¨çº§èéæ©\r\n            if (this.instance.enableCascade) {\r\n                this.instance.ttEventMgr.cascadeValueChanged(this.instance.cascadeStatus);\r\n            } else {\r\n                ftt.cascadeCheck = false;\r\n                ftt.cascadeDown = false;\r\n                ftt.cascadeUp = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkNodeIsLeaf(nodes: any ) {\r\n        if (nodes && nodes.length) {\r\n            return nodes.map((node: TreeNode) => {\r\n                if (node.hasOwnProperty(\"addtional\")) {\r\n                    node.selectable = !node[\"addtional\"];\r\n                }\r\n    \r\n                if (node.children && node.children.length) {\r\n                    this.checkNodeIsLeaf(node.children);\r\n                } else {\r\n                    node.leaf = true;\r\n                }\r\n    \r\n                return node;\r\n            });\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    initFavoriteTreeData(items) {\r\n        const treeInfo = this.instance.gridOptions.treeInfo;\r\n\r\n        if (treeInfo && !treeInfo['treeDataIsInit']) {\r\n            if (treeInfo.layerType.toLowerCase() === 'pathcode') {\r\n                items = this.instance.lookupUtils.makeTree(items, treeInfo);\r\n            } else {\r\n                items = this.instance.lookupUtils.makeTreeWithParentID(\r\n                    items,\r\n                    '',\r\n                    treeInfo.dataField ? `${treeInfo.dataField}.${treeInfo.parentField}`: treeInfo.parentField,\r\n                    this.instance.idField\r\n                );\r\n            }\r\n        }\r\n\r\n        // return this.instance.checkNodeCanBeSelect(items, true);\r\n        return this.checkNodeIsLeaf(items);\r\n    }\r\n\r\n    loadFavoriteForTreeTable(items, ftt: any) {\r\n        items = this.initFavoriteTreeData(items);\r\n        this.instance.favoriteItems = items;\r\n        ftt.loadData(items);\r\n        ftt.expandAll();\r\n        this.instance.selectionMgr.selectCurrentValue();\r\n\r\n        return items;\r\n    }\r\n\r\n    // æ´æ°åè¡¨ä¸­çæ¶èæ°æ®æ è¯\r\n    updateFavoritesStatus(data: any[]) {\r\n\r\n        if (!data || !this.instance.useFavorite) {\r\n            return;\r\n        }\r\n\r\n        const favIds = this.getFavoritIds();\r\n\r\n        if (favIds && favIds.length) {\r\n            // å¤çæ°æ®åè¡¨ä¸­çæ¶èæ°æ®æ è¯\r\n            if (this.instance.displayType !== LookupGridDisplayType.TreeList) {\r\n                data.map(item => {\r\n                    if (favIds && favIds.length && favIds.find(v => v === item[this.instance.idField])) {\r\n                        item[FAVORITE_FIELD_NAME] = true;\r\n                    }\r\n                });\r\n            } else {\r\n                const _this = this.instance;\r\n                (function each(_data) {\r\n                    _data.forEach(item => {\r\n                        if (favIds && favIds.length && favIds.find(v => v === item.data[_this.idField])) {\r\n                            item.data[FAVORITE_FIELD_NAME] = true;\r\n                        }\r\n                        if (item.children && item.children.length > 0) {\r\n                            each(item.children);\r\n                        }\r\n                    });\r\n                })(data);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private _updateFavorites(value: any, action, data) {\r\n        const localeID = this.instance.localService.localeId;\r\n        this.instance.personalConf.favorite = this.instance.personalConf.favorite || {};\r\n        const items = value.filter(n => !n['_addtional_']);\r\n        const newVal = items.map(n => n[this.instance.idField]).filter(n => n !== null && n !== undefined);\r\n\r\n        const favItems = this.instance.personalConf.favorite[localeID] || [];\r\n        this.instance.personalConf.favorite[localeID] = Array.from(new Set([...favItems , ...newVal]));\r\n\r\n        if (action === FavoriteAction.delete && data) {\r\n            this.instance.personalConf.favorite[localeID] = this.instance.personalConf.favorite[localeID].filter(n => n !== data[this.instance.idField]);\r\n        }\r\n\r\n        return this.instance.personalConf.favorite[localeID];\r\n    }\r\n\r\n    // æ¶èæ°æ®ç®¡ç\r\n    private listenPersonalConfigHandler() {\r\n        this.lookupSelectionSer.favoriteItems$.subscribe(n => {\r\n            if (!this.instance.favoritesComponentRef) {\r\n                return;\r\n            }\r\n\r\n            const { items, action, data } = n;\r\n            const favids = this._updateFavorites(items, action, data);\r\n\r\n            this.instance.httpMgr.submitFavoriteData(action);\r\n\r\n            if (this.instance.displayType === LookupGridDisplayType.List || this.instance.displayType.includes('NAV')) {\r\n                const dt = this.instance.favoritesComponentRef.instance as DataTableComponent;\r\n                this.loadFavoriteDatatable(dt, items);\r\n            } else if (this.instance.displayType === LookupGridDisplayType.TreeList) {\r\n                const ftt = this.instance.favoritesComponentRef.instance as TreeTableComponent;\r\n                // const favids = items.map(d => d.id);\r\n                this.instance.showLoading();\r\n                this.instance.httpMgr.getData({ favoriteIds: favids }, 'fav').subscribe(resData => {\r\n                    if (resData) {\r\n                        const _items = resData.items;\r\n                        this.loadFavoriteForTreeTable(_items, ftt);\r\n                    } else {\r\n                        this.instance.favoriteItems = [];\r\n                        ftt.loadData([]);\r\n                    }\r\n                    this.instance.closeLoading();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import { TreeTableComponent } from '@farris/ui-treetable';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\n\r\n\r\nexport class SelectionManager {\r\n    constructor(private ins: LookupGridComponent) {\r\n\r\n    }\r\n\r\n    destroy() {\r\n    }\r\n\r\n    getBindingData() {\r\n        let jsonData = this.ins.bindingData;\r\n        if (\r\n            this.ins.ngControl &&\r\n            this.ins.ngControl.formDirective &&\r\n            this.ins.ngControl.formDirective.form &&\r\n            this.ins.ngControl.formDirective.form.bindingData\r\n        ) {\r\n            const bindingData = this.ins.ngControl.formDirective.form.bindingData;\r\n            jsonData = bindingData;\r\n\r\n            if (bindingData.getObject) {\r\n                jsonData = bindingData.getObject().toJSON();\r\n            }\r\n        }\r\n        return jsonData;\r\n    }\r\n\r\n    initDisplayValue() {\r\n        const jsonData = this.getBindingData();\r\n        if (jsonData && this.ins.mapFields) {\r\n            const idField = this.ins.idField;\r\n            let targetField = this.ins.mapFields[idField];\r\n\r\n            if (targetField) {\r\n                if (targetField.indexOf(',') > -1 ) {\r\n                    targetField = targetField.split(',')[0];\r\n                }\r\n\r\n                const val = this.ins.utils.getValue(targetField, jsonData);\r\n                if (val) {\r\n                    this.ins.displayValue = val;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _clearSelections() {\r\n        const { cmpRefInstance: t } = this.getDataCmpInstance();\r\n        if (t) {\r\n            if (this.ins.isTree()) {\r\n                // æ è¡¨\r\n                t.clearAll(false);\r\n                if (!t.cdRef.destroyed) {\r\n                    t.cdRef.detectChanges();\r\n                }\r\n            } else {\r\n                // åè¡¨\r\n                t.dtBody.selectedRowIndex = -1;\r\n                t.dtBody.selections = undefined;\r\n                if (!t.cd.destroyed) {\r\n                    t.cd.detectChanges();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å¸®å©çªå£æå¼åï¼æ ¹æ® displayValue éä¸­æ°æ®\r\n     */\r\n    selectCurrentValue(selectedIds = []) {\r\n\r\n        if (!this.ins.enableToSelect) {\r\n            return;\r\n        }\r\n\r\n\r\n        const { cmpRefInstance: t, items } = this.getDataCmpInstance();\r\n        if (!t || !items || !items.length) {\r\n            return;\r\n        }\r\n\r\n        this._clearSelections();\r\n\r\n        if (!selectedIds || !selectedIds.length) {\r\n            const selectedRows = this.ins.lookupSelectionSer.getSelections();\r\n            if (selectedRows.length) {\r\n                selectedIds = selectedRows.map(n => n[this.ins.idField]);\r\n            }\r\n        }\r\n\r\n        // const _ids = this.getSelectedIds();\r\n        // selectedIds = selectedIds.concat(_ids);\r\n        // selectedIds = Array.from(new Set(selectedIds));\r\n\r\n        if (selectedIds && selectedIds.length) {\r\n            if (this.ins.isTree()) {\r\n                // æ è¡¨\r\n                this.selected4Treetable(t, selectedIds);\r\n                if (!t.cdRef.destroyed) {\r\n                    t.cdRef.detectChanges();\r\n                }\r\n            } else {\r\n                // åè¡¨\r\n                this.selected4Datatable(t, items, selectedIds);\r\n                if (!t.cd.destroyed) {\r\n                    t.cd.detectChanges();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getDataCmpInstance() {\r\n        let ref = null;\r\n        let items = null;\r\n        if (this.ins.activeTab === 'datalist') {\r\n            if (this.ins.isTree()) {\r\n                ref = this.ins.lookupCmpMgr.getComponentInstance('treetable');\r\n                items = (ref as TreeTableComponent).serializedValue;\r\n            } else {\r\n                items = this.ins.items;\r\n                ref = this.ins.lookupCmpMgr.getComponentInstance();\r\n            }\r\n        } else if (this.ins.activeTab === 'favorite') {\r\n            ref = this.ins.lookupCmpMgr.getComponentInstance('fav');\r\n            items = this.ins.favoriteItems;\r\n        }\r\n        return { cmpRefInstance: ref, items };\r\n    }\r\n\r\n    private selected4Datatable(t: any, items: any, values: any) {\r\n        if (this.ins.singleSelect) {\r\n            items.forEach((item, index) => {\r\n                if (item[this.ins.idField] === values[0]) {\r\n                    if (!t.dtBody.isSelected(item)) {\r\n                        t.dtBody.selectedRowIndex = -1;\r\n                        t.dtBody.selectedRow('', index, item);\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            // const values = this.getSelectedIds();\r\n            values.forEach(id => {\r\n                const r = items.find(n => n[this.ins.idField] == id);\r\n                if (r) {\r\n                    t.checkRow(id);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private selected4Treetable(t: any, valueArr: any) {\r\n        if (this.ins.singleSelect) {\r\n            t.selectNode(valueArr[0], false, false);\r\n        } else {\r\n            // const valueArr = this.getSelectedIds();\r\n            t.checkedNodes(valueArr, false, false, true);\r\n            t.selectNodes(valueArr);\r\n        }\r\n    }\r\n\r\n    getSelectedIds() {\r\n        let values = [];\r\n        const s = this.ins.multipleChoiceSeparator; // å¤éåéç¬¦\r\n        if (!this.ins.singleSelect && this.ins.displayValue && ('' + this.ins.displayValue).indexOf(s) > -1) {\r\n            values = this.ins.displayValue.split(s);\r\n        } else {\r\n            if (this.ins.displayValue !== null && this.ins.displayValue !== '' && this.ins.displayValue !== undefined) {\r\n                values = [this.ins.displayValue];\r\n            }\r\n        }\r\n\r\n        // å¯ç¨æ¾ç¤ºå¤éåè¡¨\r\n        if (this.ins.showSelected) {\r\n            const rows = this.ins.lookupSelectionSer.getSelections();\r\n            if (rows && rows.length) {\r\n                values = rows.map(n => n[this.ins.idField]);\r\n            } else {\r\n                values = [];\r\n            }\r\n        }\r\n\r\n        return values;\r\n    }\r\n}\r\n\r\n\r\n\r\n","import { DataTableComponent } from '@farris/ui-datatable';\r\nimport { of } from 'rxjs';\r\nimport { catchError, take, tap } from 'rxjs/operators';\r\nimport { FavoriteAction, FAVORITE_FIELD_NAME } from '../lookup-displaytype';\r\nimport { LookupGridResult } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupSelectionService } from './lookup-selection.service';\r\n\r\nexport class DataTableEventManager {\r\n\r\n    private lookupSelectionSer: LookupSelectionService;\r\n\r\n    private _sortState = null;\r\n\r\n    constructor(private ins: LookupGridComponent) {\r\n        this.lookupSelectionSer = this.ins.lookupSelectionSer;\r\n    }\r\n\r\n    onSearch($event: { field: string; value: string } = { field: '*', value: '' }) {\r\n        if ($event && $event.field !== '*' && !$event.value) {\r\n            this.ins.messagerService.warning(this.ins.mustWriteSomething);\r\n            return;\r\n        }\r\n\r\n        const p = {\r\n            pageInfo: { pageIndex: 1, pageSize: this.ins.gridOptions.pageSize },\r\n            search: $event\r\n        };\r\n\r\n        if (this._sortState) {\r\n            const {sortName, sortOrder} = this._sortState;\r\n            if (sortName) {\r\n                p['sortName'] = sortName;\r\n                p['sortOrder'] = sortOrder;\r\n            }\r\n        }\r\n\r\n        if (this.ins.uri) {\r\n            if (!this.ins.searching) {\r\n                this.ins.searching = true;\r\n\r\n                if (this.ins['navNodePathCode']) {\r\n                    p['navNodePathCode'] = this.ins['navNodePathCode'];\r\n                }\r\n\r\n                this.ins.httpMgr.getData(p, 'list').pipe(\r\n                    catchError(err => {\r\n                        this.ins.searching = false;\r\n                        return of({ \"_ERROR_\": err });\r\n                    }),\r\n                    tap(() => {\r\n                        this.ins.searching = false;\r\n                    })\r\n                ).subscribe(\r\n                    data => {\r\n                        this.ins.searching = false;\r\n                        this.ins.closeLoading();\r\n                        if (!data['_ERROR_']) {\r\n                            this._loadData(data);\r\n                        } else {\r\n                            throw new Error(data['_ERROR_']);\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        } else {\r\n            this.ins.search.emit(p);\r\n        }\r\n    }\r\n\r\n    private _loadData(data: LookupGridResult) {\r\n        const self = this.ins;\r\n        self.closeLoading();\r\n        self.favHelper.updateFavoritesStatus(data.items);\r\n        self.loadDataTableData(data);\r\n        // éä¸­æ°æ®\r\n        this.ins.selectionMgr.selectCurrentValue();\r\n    }\r\n\r\n    bindDataTableEvent() {\r\n        const self = this.ins;\r\n        const dt = self.componentRef.instance as DataTableComponent;\r\n\r\n        dt.selectedRow.subscribe((e: any) => {\r\n            if (this.ins.singleSelect) {\r\n                this.lookupSelectionSer.clearSelections();\r\n            }\r\n            this.ins.checkedChange.emit({ data: [e.data], isCheck: true });\r\n            this.lookupSelectionSer.updateSelections([e.data]);\r\n            dt.cd.detectChanges();\r\n        });\r\n\r\n        dt.unSelectRow.subscribe(e => {\r\n            this.lookupSelectionSer.unSelect(e.data[self.idField]);\r\n            this.ins.checkedChange.emit({ data: [e.data], isCheck: false });\r\n        });\r\n\r\n        dt.checkAll.subscribe((e: boolean) => {\r\n            this.lookupSelectionSer.updateSelections(dt.data, e);\r\n            this.ins.checkedChange.emit({ data: dt.data, isCheck: e });\r\n        });\r\n\r\n        dt.pageChanged.subscribe((e: any) => {\r\n            if (self.uri) {\r\n                self.httpMgr.getData(e, 'list').subscribe((data: LookupGridResult) => {\r\n                    this._loadData(data);\r\n                });\r\n            } else {\r\n                self.pagerChanged.emit(self.httpMgr.buildQueryParams(e, 'list'));\r\n            }\r\n        });\r\n\r\n        dt.pageSizeChanged.subscribe(e => {\r\n            if (self.uri) {\r\n                self.httpMgr.getData(e, 'list').subscribe(\r\n                    data => {\r\n                        this._loadData(data);\r\n                    },\r\n                    err => {\r\n                        self.closeLoading();\r\n                    }\r\n                );\r\n            } else {\r\n                self.pagerChanged.emit(self.httpMgr.buildQueryParams(e, 'list'));\r\n            }\r\n        });\r\n\r\n        dt.search.subscribe((e: any) => {\r\n            // if (JSON.stringify(self._searchState || {}) !== JSON.stringify(e || {})) {\r\n            //     this.ins.searching = false;\r\n            // }\r\n            self._searchState = {...(e || {})};\r\n            this.onSearch(e);\r\n        });\r\n\r\n        dt.searchValueChange.subscribe((e: any) => {\r\n            if (e && e.value) {\r\n                self._searchState = {...e};\r\n            } else {\r\n                self._searchState = null;\r\n            }\r\n        });\r\n\r\n        // åå»äºä»¶\r\n        dt.rowDblClick.subscribe((rowData: any) => {\r\n            if (self.gridOptions.singleSelect) {\r\n                // this.lookupSelectionSer.updateSelections([rowData]);\r\n                self.selectItem(rowData);\r\n            }\r\n        });\r\n\r\n        // æ¶èäºä»¶\r\n        dt.cellClick.subscribe((e: any) => {\r\n            if (e.col.field === FAVORITE_FIELD_NAME) {\r\n                const classList = e.event.target['classList'];\r\n                if (classList.contains('f-lookup-favorite')) {\r\n                    e.event.stopPropagation();\r\n                    self.items.forEach(item => {\r\n                        const id = self.utils.getValue(self.idField, item);\r\n                        if (id === self.utils.getValue(self.idField, e.row)) {\r\n                            item[FAVORITE_FIELD_NAME] = !item[FAVORITE_FIELD_NAME];\r\n                        }\r\n                    });\r\n                    dt.loadData({\r\n                        pageSize: self.gridOptions.pageSize,\r\n                        pageIndex: self.gridOptions.pageIndex,\r\n                        total: self.gridOptions.total,\r\n                        data: self.gridOptions.items\r\n                    });\r\n\r\n                    // æ´æ°æ¶èæ°æ®\r\n                    const faction = e.row[FAVORITE_FIELD_NAME] ? FavoriteAction.add : FavoriteAction.delete;\r\n\r\n                    if (faction ===  FavoriteAction.add) {\r\n                        this.ins.favoriteItems = [...this.ins.favoriteItems, e.row];\r\n                    } else {\r\n                        this.ins.favoriteItems = this.ins.favoriteItems.filter(n => {\r\n                            return self.utils.getValue(self.idField, n) !== self.utils.getValue(self.idField, e.row);\r\n                        });\r\n                    }\r\n\r\n                    this.lookupSelectionSer.updateFavoriteData(e.row, faction);\r\n                }\r\n            }\r\n        });\r\n\r\n        dt.columnSorted.subscribe((sort: { sortName: string; sortOrder: any }) => {\r\n\r\n            this._sortState = sort;\r\n\r\n            if (!this.ins.remoteSort) {\r\n                return;\r\n            }\r\n\r\n            const { sortName, sortOrder } = { ...sort };\r\n\r\n            const col = this.ins.columns.find(n => n.field === sortName);\r\n\r\n            const _sortName = col ? col.fieldPath ? col.fieldPath : col.field : sortName;\r\n\r\n            const param = {\r\n                sortName: _sortName,\r\n                sortOrder,\r\n                search: self._searchState,\r\n                pageInfo: {\r\n                    pageSize: self.pageSize,\r\n                    pageIndex: 1\r\n                }\r\n            };\r\n\r\n            self.httpMgr.getData(param, 'search').subscribe(d => {\r\n                self.loadDataTableData(d);\r\n                self.closeLoading();\r\n            });\r\n        });\r\n\r\n        dt.clearSearchValue.subscribe(() => {\r\n            self._searchState = null;\r\n            this.onSearch();\r\n        });\r\n\r\n        dt.cellStyler = (val: any) => {\r\n            const { field } = val;\r\n            if (field === FAVORITE_FIELD_NAME) {\r\n                return {\r\n                    'text-overflow': 'unset'\r\n                };\r\n            }\r\n\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n","import { EMPTY, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { LookupGridResult, PickingResult } from '../lookup-grid-options';\r\n\r\n\r\n\r\n /** æ£æ¥å¸®å©è¾å¥æ¡å¼åååè¿åçæ¥è¯¢ç»æ */\r\nfunction checkSearchResult(data = null) {\r\n    if (this.searchOnServer) {\r\n        // this._searchResult = data;\r\n        // this.showDialog();\r\n        this.isShow = true;\r\n    } else {\r\n        if (data === false) {\r\n            this.cancelSelect();\r\n        } else {\r\n            this.setModelValue(this.displayText);\r\n            this.runDictPickedEvent(null);\r\n        }\r\n    }\r\n}\r\n\r\nexport function onTextChanged() {\r\n\r\n    const self = this;\r\n\r\n    const isPending = () => {\r\n        return this.lookupUtils.rts.getFormState('lookup.pending');\r\n    };\r\n\r\n    const searchData = (e) => {\r\n\r\n        if (this.isShow) {\r\n            return;\r\n        }\r\n\r\n        if (this.isTextChange && this.displayText && (!this.nosearch || e.originalEvent) && !isPending()) {\r\n            this.lookupUtils.pendingStart();\r\n\r\n            this.dictPickingSubscription = this.dictPicking({\r\n                instance: this\r\n            }).pipe(\r\n                switchMap((pr: PickingResult) => {\r\n                    let o = true;\r\n                    if (pr === undefined || pr === null) {\r\n                        o = true;\r\n                    }\r\n\r\n                    if (typeof pr === 'boolean') {\r\n                        o = pr;\r\n                    }\r\n\r\n                    if (typeof pr === 'object') {\r\n                        if (pr.showDialog === undefined) {\r\n                            o = true;\r\n                        } else {\r\n                            o = pr.showDialog;\r\n                        }\r\n\r\n                        if (pr.data) {\r\n                            /** ä¿å­å¸®å©åä¼ éçæ°æ® */\r\n                            this.customData = pr.data;\r\n                        }\r\n                    }\r\n\r\n                    if (o) {\r\n                        return this.httpMgr.getData(\r\n                            {\r\n                                search: {\r\n                                    field: '*',\r\n                                    value: this.displayText,\r\n                                    type: 'equal'\r\n                                }\r\n                            },\r\n                            'search'\r\n                        );\r\n                    } else {\r\n                        return of({ SHOWDIALOG: o, MESSAGE:  pr.message || '' });\r\n                    }\r\n                })\r\n            ).subscribe(\r\n                (data: any) => {\r\n                    this.closeLoading();\r\n                    this.lookupUtils.pendingEnd();\r\n                    if (data.hasOwnProperty('SHOWDIALOG')) {\r\n                        if (data.SHOWDIALOG && data.MESSAGE) {\r\n                            this.notifyService.warning(data.MESSAGE);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n\r\n                    if (data.items && data.items.length === 1 && (!data.items[0].children || !data.items[0].children.length)) {\r\n                        let rowdata = data.items[0];\r\n                        if (this.isTree()) {\r\n                            const leafNode = this.treeNodeHelper.getLeafNode(rowdata);\r\n\r\n                            let isOnlySelectLeaf = false;\r\n\r\n                            if (!this.treeInfo) {\r\n                                this.setTreeInfo(data);\r\n                            }\r\n\r\n                            if (typeof this.treeInfo.onlySelectLeaf === 'boolean' ) {\r\n                                isOnlySelectLeaf = this.treeInfo.onlySelectLeaf;\r\n                            } else if (typeof this.treeInfo.onlySelectLeaf === 'string') {\r\n                                if (this.treeInfo.onlySelectLeaf === 'yes') {\r\n                                    isOnlySelectLeaf = true;\r\n                                } else if (this.treeInfo.onlySelectLeaf === 'no') {\r\n                                    isOnlySelectLeaf = false;\r\n                                } else {\r\n                                    if (this.treeInfo.onlySelectLeaf === 'default') {\r\n                                        isOnlySelectLeaf = data.treeInfo.onlySelectLeaf;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (isOnlySelectLeaf && !leafNode.leaf) {\r\n                                // this.displayText = '';\r\n                                checkSearchResult.bind(self, data)();\r\n                                return;\r\n                            }\r\n                            \r\n\r\n                            if (Array.isArray(leafNode)) {\r\n                                checkSearchResult.bind(self, data)();\r\n                                return;\r\n                            } else {\r\n                                rowdata = leafNode.data;\r\n                            }\r\n                        }\r\n                        if (!this.singleSelect) {\r\n                            rowdata = [ rowdata ];\r\n                        }\r\n                        this.selectItem(rowdata);\r\n\r\n                        this.dialogClosed.emit();\r\n                    } else {\r\n                        checkSearchResult.bind(self, data)();\r\n                    }\r\n                }, (err: any) => {\r\n                    this.closeLoading();\r\n                    this.lookupUtils.pendingEnd();\r\n                    this.messagerService.error(err ? err.Message : err);\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    let inputBlurHandler = null;\r\n\r\n    if (this.inputGroup && this.inputGroup.textbox && !this.nosearch) {\r\n        this.lookupUtils.setActiveLookupInstance(this);\r\n        inputBlurHandler = this.render2.listen(this.inputGroup.textbox.nativeElement, 'blur', searchData );\r\n    }\r\n\r\n    if (this.inputGroup) {\r\n        this.inputGroup.enterHandle.subscribe( searchData);\r\n\r\n        this.inputGroup.keydownHandle.subscribe((e: any) => {\r\n            let canOpen = false;\r\n            if (e.code === 'ArrowRight') {\r\n\r\n                if (this.quickSelect && !this.quickSelect.enable) {\r\n                    this.writeConsole('å¯ç¨å¿«æ·éæ©åï¼å³æ¹åé®ç¦ç¨æå¼å¸®å©', 'warn');\r\n                    return;\r\n                }\r\n\r\n                if (this.editable) {\r\n                    canOpen = !e.target.value || e.target.selectionStart === e.target.value.length;\r\n                } else {\r\n                    canOpen = true;\r\n                }\r\n            } else {\r\n                canOpen = e.code === this.shortcutKey.open;\r\n            }\r\n            if (canOpen) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                this.showDialog();\r\n            }\r\n        });\r\n    }\r\n\r\n    return inputBlurHandler;\r\n\r\n}\r\n","import { TreeTableComponent, TreeNode } from '@farris/ui-treetable';\r\nimport { FavoriteAction, FAVORITE_FIELD_NAME } from '../lookup-displaytype';\r\nimport { LOAD_DATA_TYPE, LookupGridResult } from '../lookup-grid-options';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { take, tap, catchError } from 'rxjs/operators';\r\nimport { LookupSelectionService } from './lookup-selection.service';\r\n\r\n\r\nexport class TreeTableEventManager {\r\n    private lookupSelectionSer: LookupSelectionService;\r\n    private _sortState = null;\r\n        /**\r\n     * æ è¯å½åæ°æ®æ¯å¦æ¥è¯¢ç»æ\r\n     */\r\n    private IS_SEARCH_RESULT = false;\r\n\r\n\r\n    constructor(private ins: LookupGridComponent) {\r\n        this.lookupSelectionSer = this.ins.lookupSelectionSer;\r\n    }\r\n\r\n    searchTreeData(search: { field: string; value: string }) {\r\n        const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        // å¤æ­uri ååºsearch.emit();\r\n        if (this.ins.searching) {\r\n            return;\r\n        } else {\r\n            this.ins.searching = true;\r\n        }\r\n\r\n        this.ins.showLoading();\r\n        return this.ins.httpMgr.getData({ search, sortName: tt.sortName, sortOrder: tt.sortOrder }, 'search').pipe(\r\n            tap(() => {\r\n                this.ins.searching = false;\r\n            }),\r\n            catchError((err) => {\r\n                this.ins.searching = false;\r\n                return of(err);\r\n            })\r\n        ).subscribe(resData => {\r\n            this.ins.closeLoading();\r\n            if (resData) {\r\n                // this.ins.items = resData.items;\r\n                tt.clearAll();\r\n\r\n                const treeInfo = this.ins.gridOptions.treeInfo;\r\n                if (!treeInfo['treeDataIsInit']) {\r\n                    if (treeInfo.layerType.toLowerCase() === 'pathcode') {\r\n                        this.ins.items = this.ins.lookupUtils.makeTree(this.ins.items, treeInfo);\r\n                    } else {\r\n                        this.ins.items = this.ins.lookupUtils.makeTreeWithParentID(\r\n                            this.ins.items,\r\n                            '',\r\n                            treeInfo.dataField ? `${treeInfo.dataField}.${treeInfo.parentField}` : treeInfo.parentField,\r\n                            this.ins.idField\r\n                        );\r\n                    }\r\n                }\r\n\r\n\r\n                const checkNodes = (nodes): TreeNode[] => {\r\n                    if (nodes && nodes.length) {\r\n                        return nodes.map((node: TreeNode) => {\r\n                            if (node.hasOwnProperty('addtional')) {\r\n                                node.selectable = !node['addtional'];\r\n                            }\r\n\r\n                            if (node.children && node.children.length) {\r\n                                checkNodes(node.children);\r\n                            } else {\r\n                                if (this._isLoadAllTreeData(tt)) {\r\n                                    node.leaf = true;\r\n                                }\r\n                            }\r\n                            return node;\r\n                        });\r\n                    }\r\n                    return nodes;\r\n                };\r\n\r\n                const _nodes = checkNodes(resData.items);\r\n                if (_nodes && _nodes.length && _nodes[0].children && _nodes[0].children.length) {\r\n                    _nodes[0].expanded = true;\r\n                    _nodes[0].children = this.ins.expandFirstNode(_nodes[0].children);\r\n                }\r\n                this.ins.items = _nodes;\r\n\r\n\r\n                // å è½½æ¶èæ°æ®\r\n                if (this.ins.useFavorite) {\r\n                    // æ´æ°æ°æ®çæ¶èç¶æ\r\n                    this.ins.favHelper.updateFavoritesStatus(this.ins.items);\r\n                }\r\n\r\n                tt.loadData(this.ins.items);\r\n                // // å±å¼æ¥è¯¢ç»æã\r\n                // if (search.value && this.ins.items.length) {\r\n                //     tt.toggleExpand(this.ins.items[0], true);\r\n                // }\r\n                tt.resize();\r\n\r\n                this.IS_SEARCH_RESULT = true;\r\n\r\n                this.ins.selectionMgr.selectCurrentValue();\r\n            }\r\n\r\n            this.ins.search.emit(search);\r\n        });\r\n    }\r\n\r\n    private getChildren(\r\n        parentPath,\r\n        parentLayer,\r\n        searchData: { searchField: string; searchValue: string }\r\n    ): Observable<any> {\r\n        const uri = this.ins.gridOptions.uri;\r\n        const search = { parentLayer, category: 'children', ...searchData };\r\n        if (this.ins.treeInfo.layerType === 'parentId') {\r\n            search['parentId'] = parentPath;\r\n        } else {\r\n            search['parentPath'] = parentPath;\r\n        }\r\n        \r\n        const param = {\r\n            searchValue: '',\r\n            customData: this.ins.customData,\r\n            enableFullTree: this.ins.enableFullTree,\r\n            loadTreeDataType: this.ins.loadTreeDataType\r\n        };\r\n        \r\n        const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        if (tt && tt.sortName) {\r\n            Object.assign(search, {\r\n                sortName: tt.sortName,\r\n                sortOrder: tt.sortOrder\r\n            });\r\n           \r\n        }\r\n\r\n        if (this.IS_SEARCH_RESULT) {\r\n            param.enableFullTree = false;\r\n            param.loadTreeDataType = 'layerload';\r\n\r\n            if (this.ins.treeInfo.layerType === 'parentId') {\r\n                // æ å½¢å¸®å©æ¥è¯¢åï¼å±å¼èç¹æ¶å°ç¸å³æ¥è¯¢åæ°ä¼ éå°åç«¯ 2022-09-13\r\n                search.searchValue = '';\r\n                search.searchField = '*';\r\n            }\r\n            // param.searchValue = JSON.stringify(search);\r\n        }\r\n\r\n        param.searchValue = JSON.stringify(search);\r\n\r\n        if (this.ins.helpId) {\r\n            param['helpId'] = this.ins.helpId;\r\n        }\r\n\r\n        return this.ins.http.getData(uri, param);\r\n    }\r\n\r\n\r\n    private _isLoadAllTreeData = (tt) => {\r\n        if (this.ins.loadTreeDataType === 'default') {\r\n            return tt.loadDataType === 'all';\r\n        } else {\r\n            return this.ins.loadTreeDataType === 'loadall';\r\n        }\r\n    };\r\n\r\n    private _isAsyncLoadTreeData = (tt) => {\r\n        if (this.ins.loadTreeDataType === 'default') {\r\n            return tt.loadDataType === 'async';\r\n        } else {\r\n            return this.ins.loadTreeDataType === 'layerload';\r\n        }\r\n    };\r\n\r\n\r\n    bindTreetableEvent() {\r\n        const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        const _searchTreeData = (searchparam: any) => {\r\n            if (this.ins.remoteSearch) {\r\n                this.ins._searchState = searchparam;\r\n                this.searchTreeData(searchparam);\r\n            } else {\r\n                if (this.ins.useInsideSearchHandler) {\r\n                    tt.searchHandle.search(searchparam.field, searchparam.value, 'client');\r\n                } else {\r\n                    this.ins.search.emit(searchparam);\r\n                }\r\n            }\r\n        };\r\n\r\n        const isLoadAllTreeData = () => {\r\n            return this._isLoadAllTreeData(tt);\r\n        };\r\n\r\n        const isAsyncLoadTreeData = () => {\r\n            return this._isAsyncLoadTreeData(tt);\r\n        };\r\n\r\n\r\n        tt.dblClickExpand = !this.ins.singleSelect; // ç¦ç¨åå»å±å¼èç¹\r\n\r\n        tt.allColumnsTitle = this.ins.allColumnsTitle; // this.displayInfo.allColumns;\r\n        tt.idField = this.ins.idField;\r\n        tt.columns = this.ins.columns;\r\n        tt.searchFields = this.ins.gridOptions.searchFields;\r\n        if (this.ins.treeInfo) {\r\n            tt.loadDataType = this.ins.treeInfo.loadDataType;\r\n            tt.virtualized = true;\r\n            if (!this.ins.isTextChange) {\r\n                this.ins.allData = cloneDeep(this.ins.items);\r\n            } else {\r\n                this.ins.allData = [];\r\n            }\r\n        }\r\n\r\n        if (this.ins.gridOptions.treeInfo) {\r\n            tt.onlySelectLeaf = this.ins.gridOptions.treeInfo.onlySelectLeaf;\r\n            tt.loadDataType = this.ins.gridOptions.treeInfo.loadDataType;\r\n        }\r\n\r\n        if (!tt.singleSelect) {\r\n            tt.checkOnSelect = true;\r\n            tt.selectOnCheck = true;\r\n            tt.showCheckbox = true;\r\n            tt.showCheckAll =  this.ins.showCheckAll;\r\n            // å¯ç¨å¤éåï¼åæ¶å¯ç¨çº§èéæ©\r\n            if (this.ins.enableCascade) {\r\n                this.cascadeValueChanged(this.ins.cascadeStatus);\r\n            } else {\r\n                tt.cascadeCheck = false;\r\n                tt.cascadeDown = false;\r\n                tt.cascadeUp = false;\r\n            }\r\n        }\r\n\r\n        tt.enableFindText = this.ins.enableFindText;\r\n        // tt.findField = this.textField;\r\n        tt.nodeSelected.subscribe((e: any) => {\r\n            // if (this.ins.favoritesComponentRef && this.ins.singleSelect) {\r\n            //     const ftt = this.ins.favoritesComponentRef.instance as TreeTableComponent;\r\n            //     ftt.clearSelections();\r\n            // }\r\n            if (this.ins.singleSelect) {\r\n                this.lookupSelectionSer.clearSelections();\r\n            }\r\n            this.lookupSelectionSer.updateSelections([e.node.data]);\r\n            this.ins.checkedChange.emit({ data: [e.node.data] , isCheck: true  });\r\n        });\r\n\r\n        tt.nodeChecked.subscribe( e => {\r\n            if (!this.ins.singleSelect) {\r\n                let data = null;\r\n                if (e.nodes && e.nodes.length) {\r\n                    data = e.nodes.map(n => n.data);\r\n                    // this.ins.multiSelMgr.updateSelections(e.nodes.map(n => n.data));\r\n                } else {\r\n                    if (Array.isArray(e.node)) {\r\n                        data = e.node.map(n => n.data);\r\n                        // this.ins.multiSelMgr.updateSelections(e.node.map(n => n.data));\r\n                    } else {\r\n                        data = [e.node.data];\r\n                        // this.ins.multiSelMgr.updateSelections([e.node.data]);\r\n                    }\r\n                }\r\n                this.ins.multiSelMgr.updateSelections(data);\r\n                this.ins.checkedChange.emit({ data, isCheck: true  });\r\n            }\r\n        });\r\n\r\n        tt.nodeUnChecked.subscribe((e: any) => {\r\n            if (e && e.node) {\r\n                if (!this.ins.singleSelect) {\r\n                    this.ins.multiSelMgr.remove(e.node.id);\r\n\r\n                    // åå±å è½½ï¼å¤éï¼åå«ä¸çº§æ¶ï¼åæ¶å¾é éè¦å°å½åèç¹çææå­çº§æ°æ®ä¹è¦åæ¶éæ©ï¼å³ä»å·²éè®°å½ä¸­ç§»é¤\r\n                    if (tt.loadDataType !== 'all' && this.ins.treeInfo.layerType === 'pathcode' &&\r\n                        (this.ins.cascadeStatus === 'enable' || this.ins.cascadeStatus === 'down')) {\r\n                        if (e.node.children && e.node.children.length) {\r\n                            const nodes = e.node.children.map(n => n.data);\r\n                            this.ins.lookupSelectionSer.updateSelections(nodes, false);\r\n                        } else {\r\n                            // const pathcode = e.node.data[this.ins.treeInfo.dataField][this.ins.treeInfo.pathField];\r\n                            const pathcode = this.ins.getPathCode(e.node.data, this.ins.treeInfo)\r\n                            this.ins.lookupSelectionSer.unselectByPathcode(pathcode);\r\n                        }\r\n                    }\r\n\r\n                    if (e.nodes && e.nodes.length) {\r\n                        this.ins.multiSelMgr.remove(e.nodes.map(n => n.id));\r\n                        this.ins.checkedChange.emit({ data: e.nodes.map(n => n.data), isCheck: false });\r\n                    } else {\r\n                        this.ins.checkedChange.emit({ data: [e.node.data], isCheck: false });\r\n                    }\r\n                } else {\r\n                    const ftt = this.ins.favoritesComponentRef && (this.ins.favoritesComponentRef.instance as TreeTableComponent);\r\n                    if (ftt && ftt.findRowNode(e.node.id)) {\r\n                        ftt.unSelectNode(e.node.id);\r\n                    }\r\n\r\n                    this.ins.checkedChange.emit({ data: [e.node.data], isCheck: false });\r\n                }\r\n            }\r\n        });\r\n\r\n        tt.checkAll.subscribe( e => {\r\n            const data = e.instance.checkeds.map(n => n.data);\r\n            this.ins.multiSelMgr.updateSelections(data);\r\n            this.ins.checkedChange.emit({ data, isCheck: true  });\r\n        });\r\n        tt.unCheckAll.subscribe(() => {\r\n            this.ins.multiSelMgr.clear();\r\n            this.ins.checkedChange.emit({ data: [], isCheck: false  });\r\n        });\r\n\r\n        tt.search.subscribe(searchparam => {\r\n            if (searchparam.field !== '*' && !searchparam.value) {\r\n                this.ins.messagerService.warning(this.ins.mustWriteSomething);\r\n            } else {\r\n                searchparam.value = searchparam.value.trim();\r\n                _searchTreeData(searchparam);\r\n            }\r\n        });\r\n\r\n        tt.cellClick.subscribe((e: any) => {\r\n            if (e.col.field === FAVORITE_FIELD_NAME) {\r\n                e.event.stopPropagation();\r\n                // tslint:disable-next-line: no-string-literal\r\n                const classList = e.event.target['classList'];\r\n                if (classList.contains('f-lookup-favorite')) {\r\n                    // classList.toggle('f-icon-star');\r\n                    // classList.toggle('f-icon-star-outline');\r\n                    const _this = this.ins;\r\n\r\n                    (function each(arr) {\r\n                        if (arr) {\r\n                            arr.forEach(item => {\r\n                                const id = _this.utils.getValue(_this.idField, item.data);\r\n                                if (id === e.node.id) {\r\n                                    item.data[FAVORITE_FIELD_NAME] = !item.data[FAVORITE_FIELD_NAME];\r\n                                    return true;\r\n                                } else if (item.children && item.children.length > 0) {\r\n                                    return each(item.children);\r\n                                } else {\r\n                                    return false;\r\n                                }\r\n                            });\r\n                        }\r\n                    })(this.ins.items);\r\n                    tt.loadData(this.ins.items);\r\n\r\n                    // æ´æ°æ¶èæ°æ®\r\n                    this.lookupSelectionSer.updateFavoriteData( e.node.data,\r\n                        e.node.data[FAVORITE_FIELD_NAME] ? FavoriteAction.add : FavoriteAction.delete);\r\n                }\r\n            }\r\n        });\r\n\r\n        tt.dblClick.subscribe((treeNode: TreeNode) => {\r\n            if (this.ins.gridOptions.singleSelect && treeNode.selectable) {\r\n                if (this.ins.okButton) {\r\n                    // this.lookupSelectionSer.select(treeNode.data);\r\n                    // this.ins.okButton.nativeElement.click();\r\n                    this.ins.selectItem(treeNode.data);\r\n                }\r\n            }\r\n        });\r\n        const loadAllData = isLoadAllTreeData();\r\n        tt.columnSorted.subscribe((sort: { sortName: string; sortOrder: any; }) => {\r\n            this._sortState = sort;\r\n            if (isLoadAllTreeData()) {\r\n                tt.clientSort();\r\n            } else {\r\n                const { sortName, sortOrder } = { ...sort };\r\n\r\n                const col = this.ins.columns.find(n => n.field === sortName);\r\n                const _sortName = col ? col.fieldPath ? col.fieldPath : col.field : sortName;\r\n\r\n                const param = Object.assign({ sortName: _sortName, sortOrder }, { search: this.ins._searchState });\r\n\r\n                let reqTyp: LOAD_DATA_TYPE = 'all';\r\n                if (this.ins._searchState && this.ins._searchState.value) {\r\n                    reqTyp = 'search';\r\n                }\r\n\r\n                this.ins.httpMgr.getData(param, reqTyp).subscribe(d => {\r\n                    this.ins.closeLoading();\r\n                    tt.clearAll();\r\n                    const items = this.ins.checkNodeCanBeSelect(d.items, false);\r\n                    if (this.ins.useFavorite) {\r\n                        this.ins.favHelper.updateFavoritesStatus(items);\r\n                    }\r\n                    this.ins.items = items;\r\n                    tt.loadData(items);\r\n                    tt.resize();\r\n                });\r\n            }\r\n        });\r\n\r\n        tt.clearSearchValue.subscribe(() => {\r\n            this.ins._searchState = null;\r\n            this.IS_SEARCH_RESULT = false;\r\n            let _items = [];\r\n            if (this.ins.allData && this.ins.allData.length) {\r\n                _items = this.ins.checkNodeCanBeSelect(this.ins.allData, loadAllData);\r\n            }\r\n            if (!_items || !_items.length) {\r\n                _searchTreeData({ field: '*', value: '' });\r\n            } else {\r\n                this.ins.items = _items;\r\n                this.ins.favHelper.updateFavoritesStatus(this.ins.items);\r\n                tt.loadData(_items);\r\n                this.ins.selectionMgr.selectCurrentValue();\r\n            }\r\n        });\r\n\r\n        tt.expand.subscribe((tn: TreeNode) => {\r\n            if (tn.leaf ||  tn['showLoading']) {\r\n                return;\r\n            }\r\n            if (!tn.children || !tn.children.length) {\r\n                const treeInfo = this.ins.gridOptions.treeInfo;\r\n                if (isAsyncLoadTreeData() || this.IS_SEARCH_RESULT ) {\r\n                    let parentPath = '';\r\n                    let parentLayer = -1;\r\n                    const { field = '*', value = '' } = {\r\n                        ...tt.searchData\r\n                    };\r\n\r\n                    tn['showLoading'] = true;\r\n                    tt.detectChanges();\r\n                    if (treeInfo.layerType === 'parentId') {\r\n                        // ç¶IDå è½½æ¹å¼\r\n                        parentPath = tn['id'];\r\n                    } else {\r\n                        const treeInfoField = treeInfo.dataField;\r\n                        if (treeInfoField) {\r\n                            // parentPath = tn.data[treeInfoField][treeInfo.pathField];\r\n                            parentPath = this.ins.getPathCode(tn.data, treeInfo);\r\n                            // parentLayer = tn.data[treeInfoField][treeInfo.layerField];\r\n                            parentLayer = this.ins.getLayerData(tn.data, treeInfo);\r\n                        } else {\r\n                            this.ins.writeConsole('æªæ¾å°åçº§ä¿¡æ¯ã');\r\n                        }\r\n                    }\r\n\r\n                    if (!this.ins.uri) {\r\n                        this.ins.expandTreeNode.emit({\r\n                            instance: tt, node: tn,\r\n                            parentIdOrPath: parentPath, parentLayer, search: { value, field }\r\n                        });\r\n\r\n                        return;\r\n                    }\r\n\r\n                    this.ins.showLoading();\r\n\r\n                    this.getChildren(parentPath, parentLayer, {\r\n                        searchField: field === '*' ? '*' : field,\r\n                        searchValue: value\r\n                    }).subscribe(data => {\r\n                        this.ins.closeLoading();\r\n                        if (tt) {\r\n                            if (tn && data.items && data.items.length) {\r\n                                if (this.ins.useFavorite) {\r\n                                    // æ´æ°å­èç¹æ¶èç¶æ\r\n                                    this.ins.favHelper.updateFavoritesStatus(data.items);\r\n                                }\r\n\r\n                                const nodes = this.ins.checkNodeCanBeSelect(data.items, false);\r\n\r\n                                tt.appendChildren(nodes, tn);\r\n\r\n                                if (tt.loadDataType !== 'all' && !this.ins.singleSelect && this.ins.isGetAllChidlNodes &&\r\n                                    (this.ins.cascadeStatus === 'enable' || this.ins.cascadeStatus === 'down') ) {\r\n                                    const rn = tt.findRowNode(tn.id);\r\n                                    tt.propagateSelectionDown(rn, rn.isChecked);\r\n\r\n                                    // æ´æ°éä¸­è®°å½ç¼å­\r\n                                    const _items = data.items.filter(n => !n.addtional);\r\n                                    if (_items && _items.length) {\r\n                                        this.ins.lookupSelectionSer.updateSelections(_items.map(n => n.data), rn.isChecked);\r\n                                    }\r\n                                }\r\n                            }\r\n                            tn['showLoading'] = false;\r\n                            tt.detectChanges();\r\n                            tt.psRef.directiveRef.update();\r\n                            this.ins.selectionMgr.selectCurrentValue();\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                if (!this.ins.singleSelect && this.ins.enableCascade &&\r\n                        (this.ins.cascadeStatus === 'enable' || this.ins.cascadeStatus === 'down') && this.ins.isGetAllChidlNodes ) {\r\n                    const rn = tt.findRowNode(tn.id);\r\n                    tt.propagateSelectionDown(rn, rn.isChecked);\r\n                    const selectItems = tn.children.filter(n => n.selectable).map(n => n.data);\r\n                    this.ins.lookupSelectionSer.updateSelections(selectItems, rn.isChecked);\r\n                }\r\n                // this.ins.selectionMgr.selectCurrentValue();\r\n            }\r\n        });\r\n\r\n        if (loadAllData && this.ins.items) {\r\n            this.ins.treeNodeHelper.updateTreeNodeExpanded(this.ins.items);\r\n        }\r\n        return loadAllData;\r\n    }\r\n\r\n    cascadeValueChanged($event) {\r\n        const val = $event;\r\n        // const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        const instanceTyp = this.ins.activeTab === 'datalist' ? 'treetable' : 'fav';\r\n        const tt = this.ins.lookupCmpMgr.getComponentInstance(instanceTyp) as TreeTableComponent;\r\n\r\n        if (!tt) {\r\n            return;\r\n        }\r\n\r\n        switch (val) {\r\n            case 'enable':\r\n                tt.cascadeCheck = true;\r\n                tt.cascadeDown = true;\r\n                tt.cascadeUp = true;\r\n                break;\r\n            case 'disable':\r\n                tt.cascadeCheck = false;\r\n                tt.cascadeDown = false;\r\n                tt.cascadeUp = false;\r\n                break;\r\n            case 'up':\r\n                tt.cascadeCheck = true;\r\n                tt.cascadeUp = true;\r\n                tt.cascadeDown = false;\r\n                break;\r\n            case 'down':\r\n                tt.cascadeCheck = true;\r\n                tt.cascadeDown = true;\r\n                tt.cascadeUp = false;\r\n                break;\r\n            default:\r\n                tt.cascadeCheck = true;\r\n                tt.cascadeDown = true;\r\n                tt.cascadeUp = true;\r\n                break;\r\n        }\r\n\r\n        this.ins.cascadeStatus = val || 'enable';\r\n        this.ins.personalConf.cascadeStatus = val || 'enable';\r\n    }\r\n\r\n}\r\n","import { TreeTableComponent } from '@farris/ui-treetable';\r\nimport { FavoriteIcon, FAVORITE_FIELD_NAME } from '../lookup-displaytype';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\n\r\nexport class MultiSelectionManager {\r\n    constructor(private ins: LookupGridComponent) {}\r\n\r\n    onSelectedTableCellClick(e: any) {\r\n        if (e.col.field === FAVORITE_FIELD_NAME) {\r\n            e.event.stopPropagation();\r\n            const classList = e.event.target['classList'];\r\n            if (classList.contains('f-lookup-unfavorite')) {\r\n                const rid =  e.row[this.ins.idField];\r\n                this.ins.lookupSelectionSer.unSelect(rid);\r\n                // åæ¶éä¸­ ä¸»åè¡¨ æ¶èåè¡¨ ä¸­çæ°æ®\r\n                if (this.ins.isTree()) {\r\n                    const tt = this.ins.lookupCmpMgr.getComponentInstance('treetable') as TreeTableComponent;\r\n                    tt.unCheckedNode(rid);\r\n                    tt.unSelectNode(rid);\r\n\r\n                    if (this.ins.useFavorite) {\r\n                        const _tt = this.ins.lookupCmpMgr.getComponentInstance('fav') as TreeTableComponent;\r\n                        if (_tt.data && _tt.data.length && _tt.findRowNode(rid)) {\r\n                            _tt.unCheckedNode(rid);\r\n                            _tt.unSelectNode(rid);\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    const dt = this.ins.lookupCmpMgr.getComponentInstance() as DataTableComponent;\r\n                    dt.unCheckRow(rid);\r\n                    if (this.ins.useFavorite) {\r\n                        const _dt = this.ins.lookupCmpMgr.getComponentInstance('fav') as DataTableComponent;\r\n                        if (_dt.data && _dt.data.length) {\r\n                            _dt.unCheckRow(rid);\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    // åå§åå·²éæ°æ®åä¿¡æ¯\r\n    initSelectedColumns() {\r\n        let selectedColumns = [];\r\n        if (this.ins.showSelected && !this.ins.singleSelect) {\r\n            selectedColumns = cloneDeep(this.ins.gridOptions.columns);\r\n            const favcol = selectedColumns.find(n => n.field === FAVORITE_FIELD_NAME);\r\n            if (favcol) {\r\n                favcol.formatter = () => {\r\n                    return FavoriteIcon.remove;\r\n                };\r\n            } else {\r\n                selectedColumns = selectedColumns.concat([\r\n                    { field: FAVORITE_FIELD_NAME, width: 80, formatter: () => {\r\n                            return FavoriteIcon.remove;\r\n                        }\r\n                    }\r\n                ]);\r\n            }\r\n        }\r\n\r\n        return selectedColumns;\r\n    }\r\n\r\n    updateSelections(data) {\r\n        if (Array.isArray(data)) {\r\n            this.ins.lookupSelectionSer.updateSelections(data, true);\r\n        } else {\r\n            this.ins.lookupSelectionSer.select(data);\r\n        }\r\n    }\r\n\r\n    remove(id: any) {\r\n        if (id) {\r\n            this.ins.lookupSelectionSer.unSelect(id);\r\n        }\r\n    }\r\n\r\n\r\n    clear() {\r\n        this.ins.lookupSelectionSer.clearSelections();\r\n    }\r\n\r\n    save(rows: any) {\r\n        if (this.ins.showSelected) {\r\n            this.ins.personalConf.selections = rows;\r\n            this.ins.personalConfigService.savePersonalConfig(this.ins.personalConf);\r\n        }\r\n    }\r\n\r\n    loadData() {\r\n        let items = this.ins.personalConf ? (this.ins.personalConf.selections || []) : [];\r\n        if (!items.length) {\r\n            items = this.ins.lookupSelectionSer.getSelections();\r\n        }\r\n        this.ins.lookupSelectionSer.loadSelections(items);\r\n    }\r\n}\r\n","import { RemoteParams, SearchParam, UserFavoriteData } from '../http/RemoteParams';\r\nimport { LOAD_DATA_TYPE } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { FavoriteAction, LookupGridDisplayType } from '../lookup-displaytype';\r\nimport { Observable, of, forkJoin } from 'rxjs';\r\nimport { map, switchMap, tap, debounceTime } from 'rxjs/operators';\r\n\r\n// å¸®å©é»è®¤ä¸ªæ§åæ°æ®\r\nconst DefaultUserConfig = {\r\n    tabIndex: 'datalist',\r\n    favorite: null,\r\n    size: null\r\n};\r\nexport class LookupHttpManager {\r\n    // æ¯æ¬¡å¸®å©æå¼åï¼æ´æ°æ­¤å¼ï¼åä¸ºä¸ªæ§åæ°æ®çåå§å¼ï¼\r\n    // å³é­çªå£æ¶ï¼ä¸æ­¤è¿è¡å¯¹æ¯ãå¦æä¸æ ·ï¼åä¸ä¿å­ï¼\r\n    private _originalPersonalConfig = DefaultUserConfig;\r\n\r\n    constructor(private ins: LookupGridComponent) { }\r\n\r\n    private disablePagination() {\r\n        return {\r\n            pageIndex: 1,\r\n            pageSize: 500\r\n        };\r\n    }\r\n\r\n    /** æé æ¥è¯¢åæ° */\r\n    buildQueryParams(event?: any, type: LOAD_DATA_TYPE = 'all') {\r\n        const params: RemoteParams = {};\r\n\r\n        if (this.ins.condition) {\r\n            params.condition = cloneDeep(this.ins.condition);\r\n        }\r\n\r\n        const searchParam: SearchParam = { category: type };\r\n\r\n        if (type !== 'fav') {\r\n            if (this.ins.isDoublleList() && this.ins.navigationFilter && type !== 'all') {\r\n                if (this.ins.navigationFilter.idValue && type !== 'textchange') {\r\n                    params.relationFilter = [...this.ins.navigationFilter.idValue];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (event) {\r\n            if (type === 'fav' || type === 'selected') {\r\n                event.pageInfo = this.disablePagination();\r\n            }\r\n\r\n            if (event.pageInfo) {\r\n                params.pageIndex = event.pageInfo.pageIndex;\r\n                params.pageSize = event.pageInfo.pageSize;\r\n            }\r\n\r\n            if (event.search) {\r\n                let sfield = event.search.field;\r\n                if (sfield && sfield === '*') {\r\n                    sfield = '*';\r\n                }\r\n\r\n                if (event.search.value) {\r\n                    event.search.value = event.search.value.trim();\r\n                }\r\n\r\n                searchParam.searchField = sfield;\r\n                searchParam.searchValue = event.search.value;\r\n                searchParam.searchType =  event.search.type || 'like';\r\n\r\n                if (event.search.value === '' &&  searchParam.category === 'search') {\r\n                    searchParam.category = 'all';\r\n                }\r\n            }\r\n\r\n            if (event.sortName) {\r\n                searchParam.sortName = event.sortName;\r\n            }\r\n            if (event.sortOrder) {\r\n                searchParam.sortOrder = event.sortOrder;\r\n            }\r\n        }\r\n\r\n        if (type === 'fav' && event.favoriteIds) {\r\n            searchParam.favoriteIds = event.favoriteIds;\r\n        }\r\n\r\n        if (this.ins.isTree() || this.ins.displayType === LookupGridDisplayType.NavTreeList) {\r\n            params.enableFullTree = this.ins.enableFullTree;\r\n        }\r\n\r\n        params.treeToList = this.ins.treeToList;\r\n        params.navTreeToList = this.ins.navTreeToList;\r\n\r\n        // æ¥è¯¢æ¶ä¸æé å®æ´æ \r\n        if (type === 'textchange') {\r\n            params.enableFullTree = false;\r\n        }\r\n\r\n        if (type === 'selected') {\r\n            searchParam.category = 'fav';\r\n            params.enableFullTree = false;\r\n            searchParam.favoriteIds = event.favoriteIds;\r\n        }\r\n\r\n        params.searchValue = JSON.stringify(searchParam);\r\n        params.loadTreeDataType = this.ins.loadTreeDataType;\r\n\r\n        params.customData = this.ins.customData;\r\n\r\n        if (this.ins.helpId) {\r\n            params.helpId = this.ins.helpId;\r\n        }\r\n\r\n        if (event.selectedInfo) {\r\n            params.selectedInfo = event.selectedInfo;\r\n        }\r\n\r\n        if (event.navNodePathCode !== undefined) {\r\n            params.navPathCode = event.navNodePathCode;\r\n        } else {\r\n            if (type === 'navAllChildren') {\r\n                if (this.ins.includeSubordinates && this.ins['navNodePathCode']) {\r\n                    params.navPathCode = this.ins['navNodePathCode'];\r\n                }\r\n            }\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n\r\n    getData(event?: any, type: LOAD_DATA_TYPE = 'all'): Observable<any> {\r\n        const uri = this.ins.gridOptions.uri;\r\n\r\n        if (this.ins.isDoublleList() &&  this.ins.navigationFilter && this.ins.navigationFilter.idValue && type !== 'fav') {\r\n            if (this.ins.includeSubordinates && this.ins.navigationOptions.treeInfo.loadDataType === 'async') {\r\n                type = 'navAllChildren';\r\n            } else {\r\n                type = 'list';\r\n            }\r\n        }\r\n\r\n        const params = this.buildQueryParams(event, type);\r\n\r\n        if (uri || this.ins.beUri) {\r\n            if (this.ins.beUri && this.ins.columns && this.ins.columns.length) {\r\n                const allSearchFields = this.ins.columns.map(col => col.searchField).filter(f => f);\r\n                if (!params.condition) {\r\n                    params.condition = {};\r\n                }\r\n\r\n                if (!this.ins.isTree() && this.ins.pagination) {\r\n                    const { pageSize = this.ins.pageSize || 20, pageIndex } = { ...params };\r\n                    params.condition.pagination = { pageSize, pageIndex };\r\n                } else {\r\n                    params.condition.pagination = { isUsePagination: false };\r\n                }\r\n                const searchParam = JSON.parse(params.searchValue);\r\n                if (searchParam.searchValue) {\r\n                    params.condition = this.ins.lookupUtils.mergeCondition(params.condition, allSearchFields, {\r\n                        field: searchParam.searchField,\r\n                        value: searchParam.searchValue\r\n                    });\r\n                }\r\n            }\r\n\r\n            const _uri = this.ins.beUri || uri;\r\n\r\n            if (this.ins.http) {\r\n                this.ins.http.context = this.ins.context;\r\n            }\r\n            if (this.ins._searchResult) {\r\n                return of(this.ins._searchResult);\r\n            }\r\n\r\n            if (type !== 'allChildren') {\r\n                return this.ins.http.getData(_uri, params);\r\n            } else {\r\n                const params1 = {\r\n                    searchValue: JSON.stringify({ category: type }),\r\n                    parentsIds: event.parentsIds,\r\n                    customData: params.customData,\r\n                    helpId: params.helpId\r\n                };\r\n                return this.ins.http.getData(_uri, params1);\r\n            }\r\n        } else {\r\n            return of(false);\r\n        }\r\n    }\r\n\r\n    // getFavoriteData(params) {\r\n    //     return this.getData(params, 'fav');\r\n    // }\r\n\r\n    getSelecedItems(selIds: any[]) {\r\n        return this.getData({ favoriteIds: selIds }, 'selected');\r\n    }\r\n\r\n    getPersonalConfig() {\r\n        const defaultConf = cloneDeep(DefaultUserConfig);\r\n        \r\n        // if (this.ins.customData) {\r\n        //     const wrapKeyData = JSON.stringify({ key: this.ins.customData });\r\n        //     const configKeyString = this.ins.getLookupBindingFields() + wrapKeyData;\r\n        //     this.ins.personalConfigService.personalConfigKey = configKeyString;\r\n        // }\r\n        const key = this.ins.personalConfigService._newKey;\r\n\r\n        let _conf = this.ins.personalConfigService.getPersonalData(key);\r\n\r\n        if (!_conf || !Object.keys(_conf).length) {\r\n            _conf = defaultConf;\r\n        }\r\n        const req = of(_conf);\r\n\r\n        if (this.ins.favoriteDataFrom === 'locale' || this.ins.isTabChanged) {\r\n            return req;\r\n        }\r\n\r\n        if (this.ins.http && this.ins.http['getUserSettings']) {\r\n            return this.ins.http['getUserSettings'](key).pipe(\r\n                map((ucs: any) => {\r\n                    if (ucs) {\r\n                        return ucs.textValue ? JSON.parse(ucs.textValue) : defaultConf;\r\n                    }\r\n                    return defaultConf;\r\n                })\r\n            );\r\n        } else {\r\n            return req;\r\n        }\r\n    }\r\n\r\n    lookupRequest(event?: any, type: LOAD_DATA_TYPE = 'all', isQuickSelect = false) {\r\n        if (!this.ins.usePersionalConf || isQuickSelect) {\r\n            return this.getData(event, type);\r\n        }\r\n\r\n        const req = this.getPersonalConfig();\r\n\r\n        return req.pipe(\r\n            tap((c: any) => {\r\n                this.ins.personalConf = c;\r\n                this.ins.personalConfigService.savePersonalConfig(c);\r\n                if (!this.ins.isTabChanged) {\r\n                    this._originalPersonalConfig = cloneDeep(c);\r\n                }\r\n            }),\r\n            switchMap((c: any) => {\r\n                const { tabIndex, favorite, size, cascadeStatus } = c;\r\n\r\n                if (!this.ins.isTabChanged) {\r\n                    this.ins.activeTab = tabIndex || 'datalist';\r\n                }\r\n\r\n                if (size) {\r\n                    this.ins.dialogWidth = size.width;\r\n                    this.ins.dialogHeight = size.height;\r\n                    this.ins.dialog.reSize({ width: size.width, height: size.height });\r\n                }\r\n\r\n                if (cascadeStatus && this.ins.enableCascade) {\r\n                    this.ins.cascadeStatus = cascadeStatus;\r\n                }\r\n\r\n                if (this.ins.cascadeItems) {\r\n                    const keys = ['enable', 'up', 'down', 'disable'];\r\n                    keys.forEach(n => {\r\n                        if (this.ins.cascadeItems[n] === undefined) {\r\n                            this.ins.cascadeItems[n] = true;\r\n                        }\r\n                    });\r\n\r\n                    if (this.ins.cascadeItems[this.ins.cascadeStatus] === undefined ) {\r\n                        this.ins.cascadeStatus = Object.keys(this.ins.cascadeItems)[0] as any;\r\n                    }\r\n                }\r\n\r\n                if (this.ins.activeTab === 'datalist') {\r\n                    return this.getData(event, type);\r\n                } else if (this.ins.activeTab === 'favorite') {\r\n                    const favIds = favorite ? favorite[this.ins.localService.localeId] : [];\r\n                    if ((!favIds || !favIds.length) && !this.ins.isTabChanged) {\r\n                        return this.getData(event, 'all').pipe(\r\n                            map(r => {\r\n                                if (r && !r.items) {\r\n                                    r.items = [];\r\n                                }\r\n                                r.activeTab = 'datalist';\r\n                                return r;\r\n                            })\r\n                        );\r\n                    }\r\n\r\n                    // const _fids = favIds.filter(n => n);\r\n                    event.favoriteIds = favIds;\r\n                    event.search = null;\r\n                    return this.getData(event, 'fav').pipe(\r\n                        switchMap(r => {\r\n                            const items = r ? r.items || [] : [];\r\n                            // å å¥æ°æ®æéåï¼æ²¡æè¿åæ°æ®ä¸ç¬¬1æ¬¡æå¼çªå£ï¼éæå¨ç¹å»æ¶èæ ç­¾æ¶\r\n                            if (!items.length && !this.ins.isTabChanged) {\r\n                                return this.getData(event, 'all').pipe(\r\n                                    map(a => {\r\n                                        if (a && !a.items) {\r\n                                            a.items = [];\r\n                                        }\r\n        \r\n                                        a.activeTab = 'datalist';\r\n                                        return a;\r\n                                    })\r\n                                );\r\n                            } else {\r\n                                return of(r);\r\n                            }\r\n                        })\r\n                    );\r\n                } else if (this.ins.activeTab === 'selected') {\r\n                    const selIds = this.ins.displayValue ? this.ins.displayValue.split(',') : [];\r\n                    const _sids = selIds.filter(n => n);\r\n                    return this.getSelecedItems(_sids);\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    // ä¿å­ä¸ªæ§åæ°æ®\r\n    submitFavoriteData(action: any | FavoriteAction) {\r\n        // å¦ææ°æ®ä¸é»è®¤çæ°æ®ä¸è³åä¸ä¿å­ã\r\n        if (JSON.stringify(this.ins.personalConf) === JSON.stringify(this._originalPersonalConfig)) {\r\n            return;\r\n        }\r\n\r\n        let msg = '';\r\n        if (action === FavoriteAction.add) {\r\n            msg = this.ins.addFavoriteSuccess;\r\n        } else if (action === FavoriteAction.delete) {\r\n            msg = this.ins.delFavoriteSuccess;\r\n        }\r\n        // æ´æ°æ¬å°ç¼å­\r\n        localStorage.setItem(this.ins.personalConfigService._newKey, JSON.stringify(this.ins.personalConf));\r\n        this.ins.personalConfigService.savePersonalConfig(this.ins.personalConf || {});\r\n\r\n        if (this.ins.favoriteDataFrom !== 'locale') {\r\n            this._originalPersonalConfig = cloneDeep(this.ins.personalConf);\r\n\r\n            const configData: UserFavoriteData = {\r\n                configkey1: this.ins.personalConfigService.personalConfigKey,\r\n                configkey2: '',\r\n                configkey3: '',\r\n                textvalue: JSON.stringify(this.ins.personalConf)\r\n            };\r\n\r\n            if (this.ins.http && this.ins.http['saveUserSettings']) {\r\n                this.ins.savingFaoriteData = true;\r\n                this.ins.showLoading();\r\n                return this.ins.http['saveUserSettings'](configData).subscribe((r) => {\r\n                    this.ins.savingFaoriteData = false;\r\n                    this.ins.closeLoading();\r\n                    if (msg) {\r\n                        this.ins.notifyService.success(msg);\r\n                    }\r\n                });\r\n            } else {\r\n                if (msg) {\r\n                    this.ins.notifyService.success(msg);\r\n                }\r\n            }\r\n        } else {\r\n            if (msg) {\r\n                this.ins.notifyService.success(msg);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n* @Author: ç¯çç§æ(Lucas Huang)\r\n* @Date: 2018-12-14 14:40:48\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-25 18:10:29\r\n* @Company: Inspur\r\n* @Version: v0.0.1\r\n*/\r\n\r\nimport { Component, OnInit, ViewChild, ViewContainerRef, EventEmitter, Output,\r\n    ComponentFactoryResolver, ComponentRef, ChangeDetectorRef, Injector, ReflectiveInjector, OnDestroy\r\n} from '@angular/core';\r\nimport { Observable, of, Subscription } from 'rxjs';\r\n\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\nimport { TreeNode, TreeTableComponent } from '@farris/ui-treetable';\r\n\r\nimport { LOAD_DATA_TYPE, LookupGridOptions, LookupGridResult } from './lookup-grid-options';\r\nimport { LookupGridComponent } from './lookup-grid.component';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'lookup-left',\r\n    templateUrl: './lookup-left.component.html'\r\n})\r\n\r\nexport class LookupLeftComponent implements OnInit, OnDestroy {\r\n\r\n    cmpRef: ComponentRef<any>;\r\n    navOptions: LookupGridOptions;\r\n    lookupCmp: LookupGridComponent;\r\n\r\n\r\n    @ViewChild('container', {read: ViewContainerRef}) cmpContainer: ViewContainerRef;\r\n    @Output() selected = new EventEmitter<{ data: any, node?: any}>();\r\n    @Output() unselected = new EventEmitter();\r\n    @Output() search = new EventEmitter<{ field: string, value: string }>();\r\n    @Output() pageChanged = new EventEmitter<{ pageInfo: {pageIndex: number, pageSize: number}, search: {field: string, value: string} }>();\r\n\r\n    private _searchState = null;\r\n    private _sortState = null;\r\n    private allData = null;\r\n    constructor(private cfr: ComponentFactoryResolver, private cd: ChangeDetectorRef) { }\r\n\r\n    ngOnInit() {\r\n        if (this.lookupCmp && this.isTreeList()) {\r\n            this.lookupCmp.includeSubordinates$$ = this.lookupCmp.includeSubordinates$.subscribe((val: boolean) => {\r\n                if (this.cmpRef) {\r\n                    const tt = this.cmpRef.instance as TreeTableComponent;\r\n                    if (tt.selectedRow) {\r\n                        this.selected.emit({ data: tt.selectedRow.data, node: tt.selectedRow });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._searchState = null;\r\n        this._sortState = null;\r\n    }\r\n\r\n    createComponent(): Observable<any> {\r\n        let dtFac = null;\r\n        if (!this.isTreeList()) {\r\n            dtFac = this.cfr.resolveComponentFactory(DataTableComponent);\r\n        } else {\r\n            dtFac = this.cfr.resolveComponentFactory(TreeTableComponent);\r\n        }\r\n        this.navOptions['keepSelect'] = false;\r\n        // å·¦ä¾§æ¥è¯¢è¿æ»¤æ¡ï¼éèæï¼\r\n        this.navOptions['showFilterBar'] = true;\r\n        // if (this.navOptions.width) {\r\n        //     this.navOptions.width = this.navOptions.width - 2;\r\n        // }\r\n\r\n        this.navOptions.width = this.lookupCmp.leftPanelWidth - 2;\r\n\r\n        // const injector: Injector = ReflectiveInjector.resolveAndCreate([\r\n        //     { provide: DataTableService, useFactory: () => { new DataTableService()}}\r\n        // ]);\r\n\r\n        this.cmpRef = this.cmpContainer.createComponent(dtFac);\r\n\r\n        if (!this.isTreeList()) {\r\n            this.navOptions['fill'] = true;\r\n            this.cmpRef.instance.maxSize = 5;\r\n            this.cmpRef.instance.fill = true;\r\n        } else {\r\n            this.navOptions['fit'] = true;\r\n        }\r\n        // this.cmpRef.instance.fit = true;\r\n\r\n        if (this.navOptions.pageInfo) {\r\n            if (this.navOptions.pageInfo.pageList) {\r\n                this.navOptions.pageList = this.navOptions.pageInfo.pageList;\r\n            }\r\n            this.navOptions.pagination = this.navOptions.pageInfo.enablePager;\r\n            this.navOptions.pageIndex = this.navOptions.pageInfo.pageIndex;\r\n            this.navOptions.pageSize = this.navOptions.pageInfo.pageSize;\r\n        } else {\r\n            this.navOptions.pagination = false;\r\n        }\r\n\r\n        Object.assign(this.cmpRef.instance, this.navOptions);\r\n\r\n        this.loadData();\r\n        return of(this.cmpRef);\r\n    }\r\n\r\n    update() {\r\n        this.cd.detectChanges();\r\n    }\r\n\r\n    resize(size?: {width: number, height: number}) {\r\n        if (size) {\r\n            size.width = size.width - 2;\r\n            // if (this.cmpRef.instance instanceof TreeTableComponent) {\r\n            //     size.height += 46;\r\n            // }\r\n            this.cmpRef.instance.resize(size);\r\n        }\r\n    }\r\n\r\n    isTreeList() {\r\n        return this.navOptions.displayType.toLowerCase() === 'treelist' && !this.lookupCmp.navTreeToList;\r\n    }\r\n\r\n    private selectLeftDataTableRow(items: any, dt: DataTableComponent) {\r\n        if (items && items.length) {\r\n            let item = null;\r\n            if (this.lookupCmp.navSelectedIds) {\r\n                item = items.find(n => n[dt.idField] == this.lookupCmp.navSelectedIds);\r\n            } else {\r\n                if (this.lookupCmp.selectFirstInNav) {\r\n                    item = items[0];\r\n                }\r\n            }\r\n\r\n            if (item) {\r\n                dt.dtBody.selectedRowIndex = -1;\r\n                dt.dtBody.selectedRow('', 0, item);\r\n            }\r\n        }\r\n    }\r\n\r\n    private closeLoading() {\r\n        this.lookupCmp.closeLoading();\r\n    }\r\n\r\n    private initDataTable(dt: DataTableComponent) {\r\n        dt.loadData({\r\n            pageSize: this.navOptions.pageSize,\r\n            pageIndex: this.navOptions.pageIndex,\r\n            total: this.navOptions.total,\r\n            data: this.navOptions.items,\r\n        });\r\n\r\n        dt.resize({ width: 320, height: this.navOptions.height});\r\n        // è¡éä¸­\r\n        dt.selectedRow.subscribe(d => {\r\n            this.selected.emit({ data: d.data });\r\n        });\r\n\r\n        dt.unSelectRow.subscribe(d => {\r\n            this.selected.emit(null);\r\n        });\r\n\r\n        const p = { pageInfo: { pageIndex: 1, pageSize: this.navOptions.pageSize }, search: '' };\r\n\r\n\r\n        const loadTableData = {\r\n            next: (data: LookupGridResult) => {\r\n                this.closeLoading();\r\n                dataTableReLoad(data);\r\n            },\r\n            error: (err) => {\r\n                this.closeLoading();\r\n            }\r\n        };\r\n\r\n        // æ¥è¯¢\r\n        dt.search.subscribe( searchData => {\r\n            this._searchState = searchData;\r\n            this.search.emit(searchData);\r\n            p.search = searchData;\r\n            p.pageInfo.pageSize = dt.pageSize;\r\n            this.lookupCmp.navigationFilter = null;\r\n\r\n            if (this._sortState && this._sortState.sortName) {\r\n                p['sortName'] = this._sortState.sortName;\r\n                p['sortOrder'] = this._sortState.sortOrder;\r\n            } else {\r\n                delete p['sortName'];\r\n                delete p['sortOrder'];\r\n            }\r\n\r\n            this.lookupCmp.httpMgr.getData(p, 'navsearch').subscribe(loadTableData);\r\n        });\r\n\r\n        const dataTableReLoad = (data) => {\r\n            dt.loadData({\r\n                pageSize: data.pageInfo.pageSize,\r\n                pageIndex: data.pageInfo.pageIndex,\r\n                total: data.total,\r\n                data: data.items,\r\n            });\r\n\r\n            this.selectLeftDataTableRow(data.items, dt);\r\n            dt.cd.markForCheck();\r\n        };\r\n\r\n        // åé¡µ\r\n        dt.pageChanged.subscribe(d => {\r\n            this.pageChanged.emit(d);\r\n            this.lookupCmp.navigationFilter = null;\r\n            this.lookupCmp.httpMgr.getData(d, 'navsearch').subscribe(loadTableData);\r\n        });\r\n\r\n        dt.pageSizeChanged.subscribe((e) => {\r\n            this.lookupCmp.navigationFilter = null;\r\n            this.lookupCmp.httpMgr.getData(e, 'navsearch').subscribe(loadTableData);\r\n        });\r\n\r\n        dt.columnSorted.subscribe( (sort: {sortName: string, sortOrder: any}) => {\r\n            const { sortName, sortOrder } = {...sort};\r\n            this._sortState = sort;\r\n            this.lookupCmp.navigationFilter = null;\r\n            const param = { \r\n                sortName,\r\n                sortOrder,\r\n                search: this._searchState,  \r\n                pageInfo: {\r\n                    pageSize: dt.pageSize,\r\n                    pageIndex: 1\r\n                }\r\n            };\r\n            this.lookupCmp.httpMgr.getData(param, 'navsearch').subscribe(loadTableData);\r\n        });\r\n\r\n        dt.clearSearchValue.subscribe( () => {\r\n            this._searchState = null;\r\n        });\r\n\r\n        this.selectLeftDataTableRow(this.navOptions.items, dt);\r\n    }\r\n\r\n    private buildParams(params: {}): {[key: string]:any} {\r\n        return { ...params, treeToList: this.lookupCmp.treeToList, navTreeToList: this.lookupCmp.navTreeToList};\r\n    }\r\n\r\n    private initTreeTable(tt: TreeTableComponent) {\r\n        tt.virtualized = true;\r\n        tt.fast = true;\r\n        tt.nodeSelected.subscribe(d => {\r\n            this.selected.emit({data: d.node.data, node: d.node});\r\n        });\r\n\r\n        tt.nodeUnSelect.subscribe(d => {\r\n            this.selected.emit(null);\r\n        });\r\n\r\n        tt.fixedHeader = true;\r\n\r\n        // tt.fit = true;\r\n        this.lookupCmp.treeNodeHelper.updateTreeNodeExpanded(this.navOptions.items, this.navOptions.treeInfo);\r\n\r\n        tt.loadDataType = this.navOptions.treeInfo.loadDataType;\r\n        // æ£æ¥å®æ´æ è¿æ»¤æ¡ä»¶ By Lucas 20200302\r\n        this.navOptions.items = this.lookupCmp.checkNodeCanBeSelect(this.navOptions.items, this.navOptions.treeInfo.loadDataType === 'all');\r\n        tt.loadData(this.navOptions.items);\r\n\r\n        if (this.lookupCmp.navSelectedIds) {\r\n            tt.selectNode(this.lookupCmp.navSelectedIds);\r\n        } else if (this.lookupCmp.selectFirstInNav) {\r\n            tt.selectFirstNode();\r\n        }\r\n\r\n        this.allData = this.navOptions.items;\r\n\r\n        const loadTreeData = {\r\n            next: (resData: any) => {\r\n                this.closeLoading();\r\n                tt.clearAll();\r\n                const items = this.lookupCmp.checkNodeCanBeSelect(resData.items, this.navOptions.treeInfo.loadDataType === 'all' && (!this._searchState || !this._searchState.value));\r\n\r\n                if (items && items.length && items[0].children && items[0].children.length) {\r\n                    items[0].expanded = true;\r\n                    items[0].children = this.lookupCmp.expandFirstNode(items[0].children);\r\n                }\r\n\r\n                tt.loadData(items);\r\n                tt.resize();\r\n            },\r\n            error: (err) => {\r\n                this.closeLoading();\r\n            }\r\n        };\r\n\r\n\r\n        tt.search.subscribe(search => {\r\n            this._searchState = search;\r\n            this.lookupCmp.navigationFilter = null;\r\n            const p = this.buildParams({ search });\r\n            if (this._sortState && this._sortState.sortName) {\r\n                p['sortName'] = this._sortState.sortName;\r\n                p['sortOrder'] = this._sortState.sortOrder;\r\n            }\r\n\r\n\r\n            this.lookupCmp.httpMgr.getData(p, 'navsearch').subscribe(loadTreeData);\r\n        });\r\n\r\n        tt.columnSorted.subscribe( (sort: {sortName: string, sortOrder: any}) => {\r\n            this.lookupCmp.navigationFilter = null;\r\n            if (tt.loadDataType === 'all') {\r\n                tt.clientSort();\r\n            } else {\r\n                const { sortName, sortOrder } = {...sort};\r\n                this._sortState = sort;\r\n                // const param = Object.assign({ sortName, sortOrder }, this._searchState);\r\n                const param = this.buildParams({ sortName, sortOrder, search: this._searchState });\r\n                let requestType: LOAD_DATA_TYPE = 'nav';\r\n                if (this._searchState && this._searchState.value) {\r\n                    requestType = 'navsearch';\r\n                }\r\n                this.lookupCmp.httpMgr.getData(param, requestType).subscribe(loadTreeData);\r\n            }\r\n        });\r\n\r\n        tt.clearSearchValue.subscribe( () => {\r\n            this._searchState = null;\r\n            if (!this._sortState || !this._sortState.sortName) {\r\n                tt.loadData(this.allData);\r\n            } else {\r\n                const p = this.buildParams({});\r\n                if (this._sortState && this._sortState.sortName) {\r\n                    p['sortName'] = this._sortState.sortName;\r\n                    p['sortOrder'] = this._sortState.sortOrder;\r\n                }\r\n                this.lookupCmp.httpMgr.getData(p, 'nav').subscribe(loadTreeData);\r\n            }\r\n        });\r\n\r\n\r\n        tt.expand.subscribe((tn: any) => {\r\n            this.onNodeExpanded(tn, tt);\r\n        });\r\n    }\r\n\r\n\r\n    private onNodeExpanded(tn: any, tt) {\r\n        if (tn.leaf) {\r\n            return;\r\n        }\r\n        if (!tn.children || !tn.children.length) {\r\n            const treeInfo = this.navOptions.treeInfo;\r\n            if (this.navOptions.treeInfo.loadDataType === 'async') {\r\n                let parentPath = '';\r\n                let parentLayer = -1;\r\n                const { field = '*', value = '' } = {\r\n                    ...tt.searchData\r\n                };\r\n\r\n                tn['showLoading'] = true;\r\n                tt.detectChanges();\r\n                if (treeInfo.layerType === 'parentId') {\r\n                    // ç¶IDå è½½æ¹å¼\r\n                    parentPath = tn['id'];\r\n                } else {\r\n                    const treeInfoField = treeInfo.dataField;\r\n                    if (treeInfoField) {\r\n                        // parentPath = tn.data[treeInfoField][treeInfo.pathField];\r\n                        // parentLayer = tn.data[treeInfoField][treeInfo.layerField];\r\n                        parentPath = this.lookupCmp.getPathCode(tn.data, treeInfo);\r\n                        parentLayer= this.lookupCmp.getLayerData(tn.data, treeInfo);\r\n                    } else {\r\n                        console.log('æªæ¾å°åçº§ä¿¡æ¯ã');\r\n                    }\r\n                }\r\n\r\n                if (!this.lookupCmp.uri) {\r\n                    this.lookupCmp.expandTreeNode.emit({\r\n                        instance: tt, node: tn,\r\n                        parentIdOrPath: parentPath, parentLayer, search: { value, field }\r\n                    });\r\n\r\n                    return;\r\n                }\r\n                this.getChildren(\r\n                    parentPath, parentLayer, {searchField: field === '*' ? '*' : field, searchValue: value}, tt\r\n                ).pipe(\r\n                    switchMap((data: any) => {\r\n                        if (data && data.items && data.items.length) {\r\n                            return of(data);\r\n                        } else {\r\n                            return this.getChildren(parentPath, parentLayer, { searchField: '*', searchValue: ''  }, tt)\r\n                        }\r\n                    })\r\n                ).subscribe(data => {\r\n                    if (tt) {\r\n                        if (tn && data.items && data.items.length) {\r\n                            tt.appendChildren(data.items, tn);\r\n                        }\r\n                        tn['showLoading'] = false;\r\n                        tt.detectChanges();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private getChildren( parentPath, parentLayer, searchData: { searchField: string; searchValue: string }, tt ): Observable<any> {\r\n        const uri = this.lookupCmp.gridOptions.uri;\r\n        const search = { parentLayer, category: 'nav', ...searchData };\r\n        if (this.navOptions.treeInfo.layerType === 'parentId') {\r\n            search['parentId'] = parentPath;\r\n        } else {\r\n            search['parentPath'] = parentPath;\r\n        }\r\n\r\n        const param: any = this.buildParams({\r\n            searchValue: JSON.stringify(search),\r\n            customData: this.lookupCmp.customData,\r\n            enableFullTree: false,\r\n            loadTreeDataType: 'layerload',\r\n        });\r\n\r\n        if (this.lookupCmp.helpId) {\r\n            param['helpId'] = this.lookupCmp.helpId;\r\n        }\r\n\r\n        if (tt && tt.sortName) {\r\n            search['sortName'] = tt.sortName;\r\n            search['sortOrder'] = tt.sortOrder;\r\n            param.searchValue = JSON.stringify(search);\r\n        }\r\n\r\n        return this.lookupCmp.http.getData(uri , param);\r\n    }\r\n\r\n\r\n    loadData() {\r\n        this.cmpRef.instance.allColumnsTitle = this.lookupCmp.allColumnsTitle;\r\n        if (!this.isTreeList()) {\r\n            const dt = this.cmpRef.instance as DataTableComponent;\r\n            this.initDataTable(dt);\r\n        } else {\r\n            const tt = this.cmpRef.instance as TreeTableComponent;\r\n            this.initTreeTable(tt);\r\n        }\r\n    }\r\n}\r\n","import { ComponentRef } from '@angular/core';\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\nimport { OPTS } from '@farris/ui-datepicker/public-api';\r\nimport { TreeNode, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { of } from 'rxjs';\r\nimport { debounceTime, switchMap } from 'rxjs/operators';\r\nimport { ComponentInstanceType, LookupGridDisplayType } from '../lookup-displaytype';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupLeftComponent } from '../lookup-left.component';\r\n\r\n\r\nexport class LookupComponentManager {\r\n    constructor(private ins: LookupGridComponent) {}\r\n\r\n    getComponentInstance(type: ComponentInstanceType = 'datatable') {\r\n        if (!this.ins.componentRef || !this.ins.componentRef.instance) {\r\n            return null;\r\n        }\r\n\r\n        if (type === 'selected') {\r\n            return this.ins.multiSelectDT;\r\n        }\r\n\r\n        let ins = this.ins.componentRef.instance;\r\n\r\n        if (type === 'leftDataTable' || type === 'leftTree') {\r\n            const leftRef = this.ins.leftComponentRef;\r\n            if (!leftRef || !leftRef.instance || !leftRef.instance.cmpRef || !leftRef.instance.cmpRef.instance) {\r\n                return null;\r\n            }\r\n            ins = this.ins.leftComponentRef.instance.cmpRef.instance;\r\n        }\r\n\r\n        if (type === 'fav') {\r\n            ins = this.ins.favoritesComponentRef.instance;\r\n        }\r\n\r\n        switch (type) {\r\n            case 'leftDataTable':\r\n            case 'fav':\r\n            case 'datatable':\r\n                return ins as DataTableComponent;\r\n            case 'leftTree':\r\n            case 'treetable':\r\n                return ins as TreeTableComponent;\r\n            default:\r\n                if (this.ins.isTree()) {\r\n                    return ins as TreeTableComponent;\r\n                }\r\n                return ins as DataTableComponent;\r\n        }\r\n    }\r\n\r\n    createComponentWithServerData(data: any) {\r\n        if (this.ins.componentRef) {\r\n            return;\r\n        }\r\n        this.ins.idField = data.idField || this.ins.idField;\r\n        this.ins.textField = data.textField || this.ins.textField;\r\n        this.ins.valueField = data.valueField || this.ins.valueField;\r\n\r\n        this.ins.displayType = (data && data.displayType) || this.ins.displayType || 'LIST';\r\n\r\n        const dtyp = this.ins.displayType.toUpperCase();\r\n\r\n        if (this.ins.isDoublleList()) {\r\n            if (this.ins.navTreeToList && dtyp === LookupGridDisplayType.NavTreeList) {\r\n                this.ins.displayType = LookupGridDisplayType.NavList;\r\n            }\r\n\r\n            if (this.ins.treeToList) {\r\n                if (dtyp ===  LookupGridDisplayType.NavListTree) {\r\n                    this.ins.displayType = LookupGridDisplayType.NavList;\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.ins.treeToList) {\r\n                if (dtyp === LookupGridDisplayType.TreeList) {\r\n                    this.ins.displayType = 'LIST';\r\n                } else {\r\n                    if (dtyp ===  LookupGridDisplayType.NavListTree) {\r\n                        this.ins.displayType = LookupGridDisplayType.NavList;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n \r\n\r\n        \r\n\r\n        if (this.ins.isDoublleList() && this.ins.navTreeToList) {\r\n            if (dtyp === LookupGridDisplayType.NavTreeList) {\r\n                this.ins.displayType = LookupGridDisplayType.NavList;\r\n            }\r\n        }\r\n\r\n        this.ins.changeDetector.detectChanges();\r\n\r\n        this.ins.componentRef = this.createContent(this.ins.gridOptions);\r\n        this.createFavoriteComponent();\r\n\r\n        this.resizeComponent();\r\n    }\r\n\r\n\r\n    createFavoriteComponent() {\r\n        if (this.ins.useFavorite && !this.ins.favoritesComponentRef) {\r\n            this.ins.favoriteColumns = this.ins.favHelper.getFavoriteColumns();\r\n            const favoritesOptions = Object.assign({}, this.ins.gridOptions, {\r\n                showFilterBar: false,\r\n                pagination: false,\r\n                columns: this.ins.favoriteColumns || []\r\n            });\r\n            this.ins.favoritesComponentRef = this.createFavoritesContent(favoritesOptions);\r\n\r\n            this.resizeComponent('fav');\r\n        }\r\n    }\r\n\r\n\r\n    private reloadTreeDataForExpand(expandLevel) {\r\n        const uri = this.ins.gridOptions.uri;\r\n        const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        const { field = '*', value = '' } = {\r\n            ...tt.searchData\r\n        };\r\n        const search = { category: 'all', searchValue: value, searchField: field, layerNum: expandLevel };\r\n\r\n\r\n        const param = {\r\n            searchValue: JSON.stringify(search),\r\n            customData: this.ins.customData,\r\n            enableFullTree: this.ins.enableFullTree,\r\n            loadTreeDataType: this.ins.loadTreeDataType\r\n        };\r\n\r\n\r\n        if (this.ins.helpId) {\r\n            param['helpId'] = this.ins.helpId;\r\n        }\r\n\r\n        if (tt && tt.sortName) {\r\n            Object.assign(param, {\r\n                sortName: tt.sortName,\r\n                sortOrder: tt.sortOrder\r\n            });\r\n        }\r\n        this.ins.showLoading();\r\n        return this.ins.http.getData(uri, param).subscribe((data: any) => {\r\n            this.ins.closeLoading();\r\n            const nodes = this.ins.checkNodeCanBeSelect(data.items, expandLevel === -1);\r\n            this.ins.items = nodes;\r\n            tt.loadData(nodes);\r\n        });\r\n    }\r\n\r\n    private setTreeNodeExpandBy(nodes: TreeNode[], level) {\r\n        if (!nodes || !nodes.length) {\r\n            return;\r\n        }\r\n        nodes.forEach((n: TreeNode) => {\r\n            const layer = n.data[this.ins.treeInfo.dataField].layer;\r\n\r\n            const expandLayer = layer + level - 1;\r\n\r\n            n.expanded = layer <= expandLayer ? true : n.expanded;\r\n            if (n.children && n.children.length && layer + 1 <= expandLayer) {\r\n                this.setTreeNodeExpandBy(n.children, level);\r\n            }\r\n        });\r\n    }\r\n\r\n    // å¯ç¨æ å¸®å©å³é®èååè½\r\n    private useContextMenuForTree(cmpRef: ComponentRef<any>) {\r\n        const { maxLevel, enableContextMenu, language } = this.ins.treeTableOptions;\r\n        if (enableContextMenu && maxLevel) {\r\n            const levelMenus = [];\r\n            for (let i = 1; i <= maxLevel; i++) {\r\n                const title = language['expand' + i];\r\n                levelMenus.push({ id: 30 + 1, code: i, title, handle: (t) => {\r\n                    // åéè¯·æ±è·åæ°æ®\r\n                    const level = t.menu.code;\r\n                    if (isLoadAllTreeData() ) {\r\n                        this.setTreeNodeExpandBy(this.ins.items, level);\r\n                        cmpRef.instance.updateSerializedValue();\r\n                    } else {\r\n                        const { dataField, layerField } = this.ins.treeInfo;\r\n                        const firstNodeData = (this.ins.items || [])[0];\r\n                        if (firstNodeData && firstNodeData.data) {\r\n                            const minLayer = this.ins.utils.getValue(`${dataField}.${layerField}`, firstNodeData.data);\r\n                            let _level = minLayer + level - 1;\r\n                            this.reloadTreeDataForExpand(_level);\r\n                        }\r\n                    }\r\n                } });\r\n            }\r\n\r\n            const isLoadAllTreeData = () => {\r\n                if (this.ins.loadTreeDataType === 'default') {\r\n                    return cmpRef.instance.loadDataType === 'all';\r\n                } else {\r\n                    return this.ins.loadTreeDataType === 'loadall';\r\n                }\r\n            };\r\n\r\n            const contextMenus = [\r\n                {\r\n                    id:6, code: 'checkchildnodes', title: 'å¾éä¸çº§æ°æ®',\r\n                    visible: (e) => {\r\n                        // console.log(e);\r\n                        return !e.data.node.selectable && !this.ins.singleSelect && e.data.node.children && e.data.node.children.length\r\n                    },\r\n                    handle: (t) => {\r\n                        if (cmpRef) {\r\n                            const nodeIds = cmpRef.instance.getChildNodes(t.data.id).filter(n => n.selectable).map(n => n[this.ins.idField]);\r\n                            // const nodeIds = t.data.node.children.map(n => n[this.ins.idField]);\r\n                            cmpRef.instance.checkedNodes(nodeIds);\r\n                            cmpRef.instance.selectNodes(nodeIds);\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    id:5, code: 'uncheckchildnodes', title: 'åæ¶å¾éä¸çº§æ°æ®',\r\n                    visible: (e) => {\r\n                        // console.log(e);\r\n                        return !e.data.node.selectable && !this.ins.singleSelect && e.data.node.children && e.data.node.children.length\r\n                    },\r\n                    handle: (t) => {\r\n                        if (cmpRef) {\r\n                            // const nodeIds = t.data.node.children.map(n => n[this.ins.idField]);\r\n                            const nodeIds = cmpRef.instance.getChildNodes(t.data.id).filter(n => n.selectable).map(n => n[this.ins.idField]);\r\n                            cmpRef.instance.unCheckedNodes(nodeIds);\r\n                            cmpRef.instance.unSelectNodes(nodeIds);\r\n                        }\r\n                    }\r\n                },\r\n                '-',\r\n                {\r\n                    id: 1, code: 'expandall', title: language.expandall, handle: (t) => {\r\n                        if (cmpRef && isLoadAllTreeData()) {\r\n                            cmpRef.instance.expandAll();\r\n                        } else {\r\n                            // åéè¯·æ±è·åæ°æ®\r\n                            this.reloadTreeDataForExpand(-1);\r\n                        }\r\n                    }\r\n                },\r\n                { id: 2, code: 'collapseall', title: language.collapseall, handle: (t) => {\r\n                    if (cmpRef) {\r\n                        cmpRef.instance.collapseAll();\r\n                    }\r\n                } },\r\n                '-',\r\n                {\r\n                    id: 3, title: language.expandByLayer,\r\n                    children: levelMenus\r\n                }\r\n            ];\r\n            this.ins.treeTableOptions.contextMenuItems = contextMenus;\r\n\r\n            cmpRef.instance.beforeShowContextMenu = () => {\r\n                return of({show: !cmpRef.instance.state.searched});\r\n            };\r\n        }\r\n    }\r\n\r\n    private getSpaceWidth() {\r\n        return this.ins.layoutFormat === 'default' ? 20 : 48;\r\n    }\r\n\r\n    createContent(opts: any): ComponentRef<any> {\r\n\r\n        if (this.ins.componentRef) {\r\n            return;\r\n        }\r\n\r\n        const type = this.ins.getComponentType();\r\n\r\n        const cmpFac = this.ins.cfr.resolveComponentFactory(type);\r\n        let cmpRef: ComponentRef<any> = null;\r\n        if (this.ins.isDoublleList()) {\r\n            cmpRef = this.ins.centerContainer.createComponent(cmpFac);\r\n        } else {\r\n            cmpRef = this.ins.contentContainer.createComponent(cmpFac);\r\n        }\r\n\r\n        if (this.ins.isTree()) {\r\n            opts.fit = true;\r\n            opts.pagination = false;\r\n\r\n            opts.fast = true;\r\n\r\n            if (this.ins.useFavorite) {\r\n                opts.fitColumns = false;\r\n                opts.autoFitColumns = true;\r\n            }\r\n\r\n            this.useContextMenuForTree(cmpRef);\r\n        } else {\r\n            opts.fill = true;\r\n        }\r\n\r\n        const ttOpts = this.ins.treeTableOptions || {};\r\n        Object.assign(cmpRef.instance, opts, { allColumnsTitle: this.ins.allColumnsTitle, ...ttOpts });\r\n\r\n        this.ins.componentRef = cmpRef;\r\n        this.resizeComponent();\r\n        return cmpRef;\r\n    }\r\n\r\n    // åå»ºæ¶èCMP\r\n    createFavoritesContent(opts: any): ComponentRef<any> {\r\n\r\n        const type = this.ins.getComponentType();\r\n\r\n        const cmpFac = this.ins.cfr.resolveComponentFactory(type);\r\n        let cmpRef = null;\r\n        cmpRef = this.ins.favoritesContainer.createComponent(cmpFac);\r\n\r\n        if (this.ins.isTree()) {\r\n            opts.fit = true;\r\n            opts.pagination = false;\r\n        } else {\r\n            opts.fill = true;\r\n        }\r\n\r\n        Object.assign(cmpRef.instance, opts, {\r\n            width: this.ins.dialog.size.width - this.getSpaceWidth(),\r\n            height: this.ins.dialogMgr.getHeight()\r\n        });\r\n\r\n\r\n        // è®¢éæ¶èå¤¹åè¡¨ä¸­ç»ä»¶çç¸å³äºä»¶\r\n        this.ins.favHelper.initFavoriteComponentEvent(cmpRef);\r\n\r\n        return cmpRef;\r\n    }\r\n\r\n    resizeComponent(type: ComponentInstanceType = 'datatable') {\r\n        const size = {\r\n            width: this.ins.dialog.size.width - this.getSpaceWidth(),\r\n            height: this.ins.dialogMgr.getHeight()\r\n        };\r\n\r\n        if (this.ins.isDoublleList() && (type === 'datatable' || type === 'treetable')) {\r\n            size.width = this.ins.dialog.size.width - this.ins.leftPanelWidth - (this.ins.layoutFormat === 'default' ? 20 : 48) - 7;\r\n        }\r\n\r\n        this.getComponentInstance(type).resize(size);\r\n    }\r\n\r\n    private getChildNodes(node: TreeNode) {\r\n        const nodes: any = [];\r\n        if (node.selectable || node.selectable === undefined) {\r\n            nodes.push(node);\r\n        }\r\n        if (node.children && node.children.length) {\r\n            node.children.forEach(n => {\r\n                nodes.push(...this.getChildNodes(n));\r\n            })\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    /** åå»ºå·¦ä¾§ç»ä»¶ */\r\n    createLeftComponent(ops: any) {\r\n        let dtFac = null;\r\n        if (this.ins.isDoublleList()) {\r\n            dtFac = this.ins.cfr.resolveComponentFactory(LookupLeftComponent);\r\n        }\r\n        this.ins.leftComponentRef = this.ins.leftContainer.createComponent(dtFac);\r\n        ops.height = this.ins.dialogMgr.getHeight();\r\n\r\n        if (this.ins.dialogWidth < this.ins.navLookupDialogMinWidth) {\r\n            this.ins.dialogWidth = this.ins.navLookupDialogMinWidth;\r\n            this.ins.dialog.reSize({ width: this.ins.dialogWidth });\r\n            this.ins.resizeCmp({ width: this.ins.dialog.size.width });\r\n        }\r\n\r\n        if (ops.width !== this.ins.leftPanel.width) {\r\n            // é»è®¤ 1 : 2\r\n            this.ins.leftPanel.resize({\r\n                width: this.ins.leftPanel.width,\r\n                height: ops.height\r\n            });\r\n            this.ins.resizeCmp({ width: this.ins.dialog.size.width });\r\n        }\r\n\r\n        // this.resizeComponent();\r\n\r\n        this.ins.leftComponentRef.instance.lookupCmp = this.ins;\r\n        this.ins.leftComponentRef.instance.navOptions = ops;\r\n\r\n\r\n        this.ins.leftComponentRef.instance.selected\r\n            .pipe(\r\n                debounceTime(100),\r\n                switchMap((d: any) => {\r\n                    if (d && d.data) {\r\n                        this.ins.navigationFilter = {\r\n                            selected: d.data,\r\n                            idValue: this.getNavigationFilter(d.data),\r\n                            searchField: '',\r\n                            searchValue: ''\r\n                        };\r\n                    } else {\r\n                        this.ins.navigationFilter = undefined;\r\n                    }\r\n                    // å è½½å³ä¾§æ°æ®\r\n                    const p = {\r\n                        pageInfo: {\r\n                            pageIndex: this.ins.gridOptions.pageIndex,\r\n                            pageSize: this.ins.gridOptions.pageSize\r\n                        }\r\n                    };\r\n\r\n                    if (this.ins.includeSubordinates && d && d.node && ops.treeInfo) {\r\n                        const {layerType, pathField, loadDataType, dataField} = ops.treeInfo\r\n                        if (loadDataType === 'all') {\r\n                            const rowDatas = this.getChildNodes(d.node).map(n => n.data);\r\n                            this.ins.navigationFilter.idValue = this.getNavigationFilter(rowDatas);\r\n                        } else {\r\n                            if (layerType == 'pathcode') {\r\n                                // p['navNodePathCode'] = d.data[dataField][pathField];\r\n                                p['navNodePathCode'] = this.ins.getPathCode(d.data, ops.treeInfo);\r\n                                this.ins['navNodePathCode'] = p['navNodePathCode'];\r\n                            }\r\n                        }\r\n                    } else  {\r\n                        this.ins['navNodePathCode'] = '';\r\n                    }\r\n\r\n                    const dataCmpRef = this.getComponentInstance();\r\n                    const { sortName, sortOrder } = dataCmpRef;\r\n                    Object.assign(p, { search: this.ins._searchState, sortName, sortOrder });\r\n                    return this.ins.httpMgr.getData(p, 'list');\r\n                })\r\n            )\r\n            .subscribe(res => {\r\n                this.ins.closeLoading();\r\n                this.ins.loadDataWhenOpen = true;\r\n\r\n                // if (this.ins.useFavorite && !this.ins.isTree()) {\r\n                //     this.ins.favHelper.updateFavoritesStatus(res.items);\r\n                // }\r\n                // this.ins.loadDataTableData(res);\r\n                \r\n                this.ins.loadData(res, false);\r\n\r\n                setTimeout(() => {\r\n                    // éä¸­æ°æ®\r\n                    this.ins.selectionMgr.selectCurrentValue();\r\n                    this.ins.changeDetector.detectChanges();\r\n                });\r\n            });\r\n\r\n        return this.ins.leftComponentRef.instance.createComponent();\r\n    }\r\n\r\n    // è·åå³èæ°æ®, å³ä¾§æ°æ®ä¸­ å³èåå­æ®µçå¼\r\n    private getNavigationFilter(navRow: any) {\r\n        if (this.ins.navigationOptions.relations && this.ins.navigationOptions.relations.length) {\r\n            const result = [];\r\n            this.ins.navigationOptions.relations.forEach(r => {\r\n                const k = r.groupField;\r\n                const dField = r.helpField;\r\n                const rf: any = { fieldName: dField, fieldValue: '' };\r\n\r\n                if (Array.isArray(navRow)) {\r\n                    const vals = navRow.map(n => {\r\n                        return k.split('.').reduce((o, c) => {\r\n                            return o[c];\r\n                        }, n);\r\n                    });\r\n                    rf.fieldValue = vals.join(',');\r\n                } else {\r\n                    rf.fieldValue = k.split('.').reduce((o, c) => {\r\n                        return o[c];\r\n                    }, navRow);\r\n                }\r\n\r\n                result.push(rf);\r\n            });\r\n            return result;\r\n        }\r\n\r\n        return '';\r\n    }\r\n}\r\n","import { RendererStyleFlags2 } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { PickingResult } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\n\r\nexport class LookupDialogManager {\r\n\r\n    private lookupInit: Subscription = null;\r\n    private _loadDataWhenOpen = true;\r\n    private _navSelectedId = '';\r\n    private _selectFirstInNav = false;\r\n    private dialogClosedSubscription: Subscription = null;\r\n    private dialogOpenedSubscription: Subscription = null;\r\n    \r\n    private keyDownHandler = null;\r\n\r\n    constructor(private ins: LookupGridComponent) { }\r\n\r\n    private unsubscribes(){\r\n        if (this.lookupInit) {\r\n            this.lookupInit.unsubscribe();\r\n            this.lookupInit = null;\r\n        }\r\n\r\n        if (this.dialogClosedSubscription) {\r\n            this.dialogClosedSubscription.unsubscribe();\r\n            this.dialogClosedSubscription = null;\r\n        }\r\n\r\n        if (this.dialogOpenedSubscription) {\r\n            this.dialogOpenedSubscription.unsubscribe();\r\n            this.dialogOpenedSubscription = null;\r\n        }\r\n\r\n    }\r\n    // å¸®å©çªå£å³é­ååä¸äºæ¸çå·¥ä½\r\n    dialogClosed() {\r\n        if (this.ins.displayText !== this.ins.originalText && !this.ins.nosearch) {\r\n            this.ins.displayText = this.ins.originalText;\r\n            this.ins.setModelValue(this.ins.displayText);\r\n        }\r\n\r\n        if (this.ins.componentRef) {\r\n            this.ins.componentRef.destroy();\r\n            this.ins.componentRef = null;\r\n        }\r\n\r\n        if (this.ins.favoritesComponentRef) {\r\n            this.ins.favoritesComponentRef.destroy();\r\n            this.ins.favoritesComponentRef = null;\r\n        }\r\n\r\n        if (this.ins.contentContainer) {\r\n            this.ins.contentContainer.clear();\r\n        }\r\n\r\n        if (this.ins.centerContainer) {\r\n            this.ins.centerContainer.clear();\r\n        }\r\n\r\n        if (this.ins.leftComponentRef) {\r\n            this.ins.leftComponentRef.destroy();\r\n            this.ins.leftComponentRef = null;\r\n        }\r\n\r\n        if (this.ins.leftContainer) {\r\n            this.ins.leftContainer.clear();\r\n        }\r\n\r\n\r\n        this.ins.isShow = false;\r\n        this.ins.isTextChange = false;\r\n        if (this.ins.dialog) {\r\n            this.ins.content = null;\r\n        }\r\n\r\n        this.ins.navigationFilter = null;\r\n\r\n        this.ins.lookupUtils.pendingEnd();\r\n\r\n        if (this.ins.helpId) {\r\n            this.ins.displayType = '';\r\n        }\r\n\r\n\r\n        this.unsubscribes();\r\n\r\n        // this.ins.items = [];\r\n        this.ins.favoriteItems = [];\r\n        this.ins.lookupSelectionSer.initFavoriteItems([]);\r\n\r\n        this.ins.isTabChanged = false;\r\n\r\n        if (this.ins.uri) {\r\n            this.ins.items = [];\r\n        }\r\n        this.ins._searchState = null;\r\n\r\n\r\n        this.ins.pageIndex = 1;\r\n\r\n        this.ins.loadDataWhenOpen = this._loadDataWhenOpen;\r\n        this.ins.navSelectedIds = this._navSelectedId;\r\n        this.ins.selectFirstInNav = this._selectFirstInNav;\r\n\r\n        this.ins.isGetAllChidlNodes = false;\r\n\r\n        this.ins.enableGetAllChildNodes = true;\r\n\r\n        // ä¿å­ä¸ªæ§åæ°æ®\r\n        if (this.ins.usePersionalConf && this.ins.favoriteDataFrom !== 'locale') {\r\n            this.ins.httpMgr.submitFavoriteData('dialog closed event.');\r\n        }\r\n\r\n        if (this.keyDownHandler) {\r\n            this.keyDownHandler();\r\n            this.keyDownHandler = null;\r\n        }\r\n        if (this.ins.inputGroup) {\r\n            this.ins.inputGroup.focus();\r\n        }\r\n\r\n        this.ins.userInitialConfig.reset();\r\n\r\n        this.ins.treeInfo = this.ins._treeInfo_;\r\n\r\n        this.ins.lookupUtils.destroy();\r\n        this.ins.dialogClosed.emit();\r\n\r\n        if (this.ins.includeSubordinates$$) {\r\n            this.ins.includeSubordinates$$.unsubscribe();\r\n            this.ins.includeSubordinates$$ = null;\r\n        }\r\n\r\n        this.ins.searching = false;\r\n\r\n        if (this.ins.dtEventMgr) {\r\n            this.ins.dtEventMgr['_sortState'] = null;\r\n        }\r\n\r\n        if (this.ins.ttEventMgr) {\r\n            this.ins.ttEventMgr['_sortState'] = null;\r\n        }\r\n\r\n    }\r\n\r\n    onDialogCreated() {\r\n        this._loadDataWhenOpen = this.ins.loadDataWhenOpen;\r\n        this._navSelectedId = this.ins.navSelectedIds;\r\n        this._selectFirstInNav = this.ins.selectFirstInNav;\r\n\r\n        this.ins.dialogCreatedSubscription = this.ins.dialogCreated.subscribe(dlg => {\r\n            if (dlg) {\r\n                if (this.ins.dialogOpenedSubscription) {\r\n                    this.ins.dialogOpenedSubscription.unsubscribe();\r\n                }\r\n                if (this.ins.dialogClosedSubscription) {\r\n                    this.ins.dialogClosedSubscription.unsubscribe();\r\n                }\r\n                this.registerDialogEvent();\r\n                if (this.ins.isRecordSize) {\r\n                    const dlgSize = this.ins.personalConfigService.getDialogSize();\r\n                    if (dlgSize) {\r\n                        const { width, height } = dlgSize;\r\n                        this.ins.dialogWidth = width ? width : this.ins.dialogWidth;\r\n                        this.ins.dialogHeight = height ? height : this.ins.dialogHeight;\r\n\r\n                        // 20200908 æ´æ°ç°çªå£çå°ºå¯¸ by Lucas\r\n                        dlg.width = this.ins.dialogWidth;\r\n                        dlg.height = this.ins.dialogHeight;\r\n                    }\r\n                }\r\n                dlg.show();\r\n            }\r\n        });\r\n\r\n        this.ins.subscriptions.push(this.ins.dialogCreatedSubscription);\r\n    }\r\n\r\n    checkDictPickingResult(pr: PickingResult | any) {\r\n        let o = true;\r\n        if (pr === undefined || pr === null || pr === '') {\r\n            o = true;\r\n        }\r\n\r\n        if (typeof pr === 'boolean') {\r\n            o = pr;\r\n        }\r\n\r\n        let customData, selectedIds, message;\r\n        customData = this.ins.customData;\r\n        selectedIds = this.ins.selectedIds;\r\n\r\n        if (typeof pr === 'object') {\r\n            if (pr.showDialog === undefined) {\r\n                o = true;\r\n            } else {\r\n                o = pr.showDialog;\r\n            }\r\n\r\n            if (pr.hasOwnProperty('data')) {\r\n                /** ä¿å­å¸®å©åä¼ éçæ°æ® */\r\n                customData = pr.data;\r\n            }\r\n            selectedIds = pr.selectedIds || null;\r\n\r\n            if (pr.message) {\r\n                message = pr.message;\r\n            }\r\n        }\r\n\r\n        return { show: o, customData, selectedIds, message };\r\n    }\r\n\r\n    canOpenDialog(pr: PickingResult | any) {\r\n        const {show, customData, selectedIds, message} = this.checkDictPickingResult(pr);\r\n        this.ins.customData = customData;\r\n        this.ins.selectedIds = selectedIds || null;\r\n        if (message) {\r\n            this.ins.notifyService.warning(message);\r\n        }\r\n\r\n        this.ins.isReady = false;\r\n        this.ins.isShow = show;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.ins.dialog.size.contentHeight -\r\n                this.ins.containerMargin.bottom -\r\n                this.ins.containerMargin.top -\r\n                ( this.ins.layoutFormat === 'default' ? this.ins.useFavorite ? 40 : 0 : 56);\r\n    }\r\n\r\n\r\n    private getMainGridSize() {\r\n        if (this.ins.isDoublleList()) {\r\n            return {\r\n                width: this.ins.dialog.size.width - this.ins.leftPanel.width - 27,\r\n                height: this.getHeight()\r\n            };\r\n        }\r\n\r\n        return {\r\n            width: this.ins.dialog.size.width - this.ins.containerMargin.left - this.ins.containerMargin.right,\r\n            height: this.getHeight()\r\n        };\r\n    }\r\n\r\n    resetDialogContentHeight() {\r\n        const { header: hHeight, footer: fHeight } = this.ins.dialog.size;\r\n        return this.ins.dialogHeight - hHeight - fHeight -  this.ins.containerMargin.bottom - this.ins.containerMargin.top;\r\n    }\r\n\r\n    /** æ³¨åå¼¹åºçªå£çäºä»¶ */\r\n    private registerDialogEvent() {\r\n        this.dialogOpenedSubscription = this.ins.dialog.opened.subscribe(() => {\r\n            \r\n            // const dialogEl = this.ins.dialog.dialogEl.nativeElement;\r\n            // this.ins.render2.removeStyle(dialogEl, 'margin-left', RendererStyleFlags2.DashCase);\r\n            // this.ins.render2.removeStyle(dialogEl, 'margin-top', RendererStyleFlags2.DashCase);\r\n            // this.ins.render2.setStyle(dialogEl, 'top' , this.ins.dialog.postitionStyles.top);\r\n            // this.ins.render2.setStyle(dialogEl, 'left' , this.ins.dialog.postitionStyles.left);\r\n            // this.ins.render2.addClass(dialogEl, 'm-0');\r\n\r\n            this.ins.dialogContentHeight = this.resetDialogContentHeight();\r\n\r\n            this.ins.gridOptions = Object.assign(this.ins.gridOptions, this.getMainGridSize());\r\n            this.ins.dialog.el.nativeElement.querySelector('.ps-content').style.height = '100%';\r\n\r\n            if (this.ins.displayType && this.ins.customDisplayType) {\r\n                this.ins.componentRef = this.ins.lookupCmpMgr.createContent(this.ins.gridOptions);\r\n                this.ins.lookupCmpMgr.createFavoriteComponent();\r\n            }\r\n\r\n            this.ins.initData();\r\n\r\n            // ä¿®æ¹å¸®å©çªå£çç¶æ\r\n            this.ins.lookupUtils.pendingEnd();\r\n            this.ins.dialogOpened.emit();\r\n        });\r\n\r\n        this.lookupInit = this.ins.lookupinitializationSubject.subscribe(() => {\r\n            this.ins.loadDataWhenOpen = true;\r\n            // æ³¨åå¿«æ·é®\r\n            this.registerShortcutKey();\r\n            // çå¬å·¦ä¾§å°ºå¯¸ååäºä»¶\r\n            if (this.ins.leftPanel) {\r\n                const leftPanelResize$ = this.ins.leftPanel.resizing.subscribe((s: any) => {\r\n                    this.ins.componentRef.instance.resize({\r\n                        width: this.ins.dialog.size.width - s.size.width - 27,\r\n                        height: this.getHeight()\r\n                    });\r\n                    this.ins.leftComponentRef.instance.resize(s.size);\r\n                });\r\n\r\n                this.ins.subscriptions.push(leftPanelResize$);\r\n            }\r\n        });\r\n\r\n        this.dialogClosedSubscription = this.ins.dialog.closed.subscribe(() => {\r\n            // è¾å¥æ¡åååï¼å¼¹åºçªå£æªéæ©æ°æ®å³é­çªå£æ¶ï¼è¿ååå§å¼\r\n            this.ins.dialogMgr.dialogClosed();\r\n        });\r\n\r\n        // this.ins.subscriptions.push(this.ins.dialogClosedSubscription);\r\n    }\r\n\r\n    private registerShortcutKey() {\r\n        // åè½¦ï¼ä¸ç¡®å®æé®å¤çé»è¾ä¸è³ã\r\n        const dlgContainerDom = this.ins.dialog.el.nativeElement.querySelector('.farris-modal');\r\n\r\n        if (dlgContainerDom && this.ins.shortcutKey && !this.keyDownHandler) {\r\n            this.keyDownHandler = this.ins.eventManager.addEventListener(dlgContainerDom, 'keydown', (e: KeyboardEvent) => {\r\n                e.stopPropagation();\r\n                const { moveUp, moveDown, searchFocus, confirm, nextPager, prevPager, expand, collapse } = this.ins.shortcutKey;\r\n                const arrowKey = [moveUp, moveDown, expand, collapse];\r\n                if (arrowKey.includes(e.code)) {\r\n                    this.ins.componentRef.instance.onKeydownEvent(e);\r\n                } else if (e.key === confirm) {\r\n                    if (e.target['nodeName'] === 'INPUT' && !e.ctrlKey) {\r\n                        return;\r\n                    }\r\n                    this.ins.okButton.nativeElement.click();\r\n                } else if (e.code === searchFocus) { // å¸®å©çªå£æ¥è¯¢è¾å¥æ¡ç¦ç¹\r\n                    e.preventDefault();\r\n                    this.ins.componentRef.instance.inputGroup.focus();\r\n                } else if (!this.ins.isTree() && (e.code === nextPager || e.code === prevPager )) {  // åé¡µ\r\n                    const isNextPager = e.code === nextPager;\r\n                    this.paginationKeyDownHandler(isNextPager);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private paginationKeyDownHandler(next = true) {\r\n        const datatableRef = this.ins.componentRef.instance;\r\n        const {pageIndex, pageSize, total} = datatableRef;\r\n        const pagerCount = Math.ceil(total / pageSize);\r\n\r\n        let newPageNum = pageIndex;\r\n        if (next) {\r\n            newPageNum = newPageNum + 1;\r\n        } else {\r\n            newPageNum = newPageNum - 1;\r\n        }\r\n\r\n        if (newPageNum > pagerCount || newPageNum < 1) {\r\n            newPageNum = pageIndex;\r\n        }\r\n\r\n        this.ins.componentRef.instance.onPageChange({ pageSize, pageIndex: newPageNum });\r\n    }\r\n\r\n}\r\n\r\n","import { Observable, of, BehaviorSubject } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { FavoriteAction } from '../lookup-displaytype';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\n\r\nexport interface SelectionState {\r\n    selecteditems: any[];\r\n    favoriteItems: any[];\r\n    quickItems: any[];\r\n}\r\n\r\nexport class LookupSelectionService {\r\n\r\n    private state: SelectionState = {\r\n        selecteditems: [],\r\n        favoriteItems: [],\r\n        quickItems: []\r\n    };\r\n\r\n    state$: BehaviorSubject<SelectionState> = new BehaviorSubject(this.state);\r\n\r\n    selected$: Observable<any[]> = this.state$.pipe(\r\n        switchMap(n => of(n.selecteditems))\r\n    );\r\n\r\n    favoriteItems$: BehaviorSubject<any> = new BehaviorSubject({items: this.state.favoriteItems, action: null });\r\n\r\n    quickItems$: Observable<any[]> = this.state$.pipe(\r\n        switchMap(n => of(n.quickItems))\r\n    );\r\n\r\n    private get idField() {\r\n        return this.ins.idField;\r\n    }\r\n\r\n    constructor(private ins: LookupGridComponent) {\r\n    }\r\n\r\n    initFavoriteItems(items: any[]) {\r\n        this.state.favoriteItems = items || [];\r\n    }\r\n\r\n\r\n    //#region æ¶èæ°æ®\r\n\r\n    updateFavoriteData(data: any, action: FavoriteAction) {\r\n\r\n        if (this.ins.savingFaoriteData) {\r\n            return;\r\n        }\r\n\r\n        if (action === FavoriteAction.add) {\r\n            this.state.favoriteItems = this.state.favoriteItems.concat([data]);\r\n        } else {\r\n            this.state.favoriteItems = this.state.favoriteItems.filter(n => n[this.idField] !== data[this.idField]);\r\n        }\r\n\r\n        this.favoriteItems$.next({ items: this.state.favoriteItems, action, data });\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region å¤éæ°æ®\r\n\r\n    loadSelections( data: []) {\r\n        this.state.selecteditems = [...data];\r\n        this.state$.next(this.state);\r\n    }\r\n\r\n    getSelections() {\r\n        return [...this.state.selecteditems];\r\n    }\r\n\r\n    select(item: any) {\r\n        if (item) {\r\n            this.state.selecteditems = [...this.state.selecteditems, item];\r\n            this.state$.next(this.state);\r\n        }\r\n    }\r\n\r\n    unselectByPathcode(pathcode: string) {\r\n        // const { dataField, pathField } = this.ins.treeInfo;\r\n        this.state.selecteditems = this.state.selecteditems.filter(n => {\r\n            const pathcode = this.ins.getPathCode(n, this.ins.treeInfo);\r\n            return pathcode && pathcode.indexOf(pathcode) !== 0;\r\n        });\r\n    }\r\n\r\n    updateSelections(data: any, checked = true) {\r\n\r\n        if (!Array.isArray(data)) {\r\n            data = [data];\r\n        }\r\n\r\n        const items = [ ...data ];\r\n        const idField = this.idField;\r\n        if (checked) {\r\n            if (this.state.selecteditems && !this.state.selecteditems.length) {\r\n                this.state.selecteditems = items;\r\n            } else {\r\n                const ids = items.map(n => n[idField]);\r\n                ids.forEach((n, i) => {\r\n                    if (!this.state.selecteditems.find(r => r[idField] == n)) {\r\n                        this.state.selecteditems.push(items[i]);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            if (data) {\r\n                const ids2 = data.map(n => n[idField]);\r\n                this.state.selecteditems = this.state.selecteditems.filter(n => {\r\n                    return ids2.indexOf(n[idField]) === -1;\r\n                });\r\n            }\r\n        }\r\n\r\n        this.state$.next(this.state);\r\n    }\r\n\r\n    unSelect(id: any) {\r\n        if (id) {\r\n            if (Array.isArray(id)) {\r\n                this.state.selecteditems = this.state.selecteditems.filter(n => {\r\n                    return id.indexOf(n[this.idField]) === -1;\r\n                });\r\n            } else {\r\n                this.state.selecteditems = this.state.selecteditems.filter(n => n[this.idField] != id);\r\n            }\r\n\r\n            this.state$.next(this.state);\r\n        }\r\n    }\r\n\r\n    clearSelections() {\r\n        this.state.selecteditems = [];\r\n        this.state$.next(this.state);\r\n    }\r\n\r\n    //#endregion\r\n\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(lucas huang)\r\n * @Date: 2018-11-23 11:23:12\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2020-10-20 20:18:26\r\n * @Company: Inspur\r\n * @Version: v0.3.x\r\n */\r\n\r\nimport {Component, Input, ViewChild, OnChanges, SimpleChanges,\r\nEventEmitter,OnInit,Injector,ComponentFactoryResolver,\r\nOutput,ChangeDetectorRef,ViewEncapsulation,AfterViewInit,ViewContainerRef,\r\nforwardRef,ComponentRef,Type,ElementRef,NgZone,Renderer2,OnDestroy,HostListener,} from \"@angular/core\";\r\n\r\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\nimport { Observable, Subscription, of, Subject, BehaviorSubject } from \"rxjs\";\r\n\r\nimport { LocaleService } from \"@farris/ui-locale\";\r\nimport { IResizeEvent } from \"@farris/ui-draggable\";\r\nimport { MessagerService } from \"@farris/ui-messager\";\r\nimport { LoadingService, LoadingComponent } from \"@farris/ui-loading\";\r\nimport { DataTableComponent } from \"@farris/ui-datatable\";\r\nimport { TreeTableComponent, TreeNode } from \"@farris/ui-treetable\";\r\nimport { LayoutPanelComponent } from \"@farris/ui-layout\";\r\nimport { CommonUtils, DebugService, FarrisComponentInstanceService, OverLayHiddenService } from \"@farris/ui-common\";\r\nimport { EntityFilter } from \"@farris/ui-common/types\";\r\nimport { ShortcutsService } from \"@farris/ui-shortcuts\";\r\nimport { InputGroupComponent } from \"@farris/ui-input-group\";\r\nimport { NotifyService } from \"@farris/ui-notify\";\r\n\r\nimport {\r\n    FAVORITE_FIELD_NAME,\r\n    INPUT_GROUP_ICON,\r\n    LookupGridDisplayType,\r\n    ExtInfoFormatter,\r\n    CustomDataFormatter,\r\n    QuickSelectOption,\r\n    QuickSelectDefaultOptions,\r\n} from \"./lookup-displaytype\";\r\nimport { LookupComponent } from \"./lookup.component\";\r\nimport {\r\n    LookupGridOptions,\r\n    lookupGridDefaults,\r\n    LookupGridResult,\r\n    NavigationOptions,\r\n    DisplayInfo,\r\n    displayInfoDefault,\r\n    PickingResult,\r\n    TreeInfo,\r\n    LOAD_DATA_TYPE,\r\n    ONLY_SELECT_LEAF,\r\n    PersonalConfig,\r\n    LookupLayout,\r\n} from \"./lookup-grid-options\";\r\nimport { ILookupHttpService, ServerSideToken } from \"./http/ILookupHttpService\";\r\nimport { NavigationFilter } from \"./http/RemoteParams\";\r\nimport { LookupLeftComponent } from \"./lookup-left.component\";\r\nimport { LookupDefaultMapping } from \"./lookup-defaut-mapping\";\r\nimport { LookupUtils } from \"./utils\";\r\nimport { PersonalConfigService } from \"./lookup-presonalConfig.service\";\r\nimport {\r\n    UtilService,\r\n    TreeNodeHelper,\r\n    FavoriteHelper,\r\n    SelectionManager,\r\n    DataTableEventManager,\r\n    TreeTableEventManager,\r\n    MultiSelectionManager,\r\n    LookupHttpManager,\r\n    LookupComponentManager,\r\n    LookupDialogManager,\r\n    onTextChanged,\r\n    LookupSelectionService,\r\n} from \"./services\";\r\nimport { catchError, map, switchMap } from \"rxjs/operators\";\r\n\r\nimport { EventManager } from \"@angular/platform-browser\";\r\nimport { cloneDeep } from \"lodash-es\";\r\nimport { LookupQuickSelectPanelComponent } from \"./quick-select/quick-select-panel.component\";\r\nimport { LookupQuickSelectDirective } from \"./quick-select/lookup-quick-select.directive\";\r\n\r\n\r\nexport const LOOKUPGRID_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => LookupGridComponent),\r\n    multi: true,\r\n};\r\n\r\n@Component({\r\n    selector: \"farris-lookup-grid\",\r\n    templateUrl: \"./lookup-grid.component.html\",\r\n    styleUrls: [\"./lookup-grid.component.scss\"],\r\n    providers: [\r\n        LOOKUPGRID_VALUE_ACCESSOR,\r\n        ShortcutsService,\r\n        LookupDefaultMapping,\r\n        LookupUtils,\r\n        PersonalConfigService,\r\n    ],\r\n    encapsulation: ViewEncapsulation.None,\r\n    exportAs: \"lookup\"\r\n})\r\nexport class LookupGridComponent\r\n    extends LookupComponent\r\n    implements OnInit, AfterViewInit, OnChanges, OnDestroy\r\n{\r\n    groupIcon = INPUT_GROUP_ICON;\r\n    _displayType = \"\";\r\n\r\n    /** ä½¿ç¨è¡¨åè®¾è®¡å¨ä¸­çæ¾ç¤ºç±»åãå¦åä½¿ç¨åæ°æ®è®¾ç½®çæ¾ç¤ºç±»åã é»è®¤ï¼false */\r\n    @Input() customDisplayType = false;\r\n    @Input() viewType: \"text\" | \"tag\" = \"text\";\r\n    @Input()\r\n    get displayType() {\r\n        return this._displayType;\r\n    }\r\n    set displayType(val: string) {\r\n        if (val) {\r\n            const types = Object.values(LookupGridDisplayType);\r\n            const i = types.findIndex((n) => n === val.toUpperCase());\r\n            if (i > -1) {\r\n                const keys = Object.keys(LookupGridDisplayType);\r\n                this._displayType = LookupGridDisplayType[keys[i]];\r\n            }\r\n        } else {\r\n            this._displayType = val;\r\n        }\r\n    }\r\n    /** å¯ç¨æ¸ç©ºæé® */\r\n    @Input() enableClear = true;\r\n    /** æå¡å¨ç«¯æåº */\r\n    @Input() remoteSort = true;\r\n\r\n    @Input() condition: EntityFilter;\r\n\r\n    /** æ è¡¨æ¾ç¤ºå¨éå¤éæ¡ã é»è®¤ä¸æ¾ç¤º */\r\n    @Input() showCheckAll = false;\r\n\r\n    /** æ¯å¦å¯ç¨å¤é */\r\n    @Input() singleSelect = true;\r\n    /** å¤éåéç¬¦ */\r\n    @Input() multipleChoiceSeparator = \",\";\r\n    /** ä¸»é®å­æ®µ */\r\n    @Input() idField?: string;\r\n    /** å¯ä»¥ä¸ºåæ°æ®IDãwebapiURL */\r\n    @Input() uri?: string = '';\r\n    /**\r\n     * BE REST RUI\r\n     * - æ­¤å¤è®¾ç½®å uri å¤±æ\r\n     */\r\n    @Input() beUri = \"\";\r\n    /**\r\n     * æ¾ç¤ºè¿æ»¤å·¥å·æ¡\r\n     */\r\n    @Input() showFilterBar = true;\r\n    /** æ¯å¦å¯ç¨åé¡µ */\r\n    @Input() pagination = true;\r\n    /** å½åé¡µç´¢å¼ï¼ä» 0å¼å§ */\r\n    @Input() pageIndex = 1;\r\n    /** æ¯é¡µè®°å½æ° */\r\n    @Input() pageSize = 20;\r\n    /** å¯ç¨åé¡µè®°å½æ°åè¡¨ */\r\n    @Input() pageList = [10, 20, 30, 50, 100];\r\n    /** æ»è®°å½æ° */\r\n    @Input() total = 0;\r\n    /** å¯æå¨å */\r\n    // @Input() resizableColumns = true;\r\n    /** æ¾ç¤ºåä¿¡æ¯, é»è®¤ä¸º [] */\r\n    @Input() columns: any[] = [];\r\n\r\n    /** å¸®å©æ¥è¯¢æ¯å¦ä¸ºè¿ç«¯æ¥è¯¢ */\r\n    @Input() remoteSearch = true;\r\n\r\n    /** ææ¬åååï¼è¿è¡æå¡å¨ç«¯æ¥è¯¢ */\r\n    @Input() searchOnServer = true;\r\n    /** ä¸è¿è¡æå¡å¨æ¥è¯¢ï¼æå¥ç®å¥ */\r\n    @Input() nosearch = false;\r\n\r\n    /**\r\n     * å¯ç¨ä»»æè¾å¥åï¼å¼éè¿è¾å¥æ¶è§¦å\r\n     */\r\n    @Output() clearMappings = new EventEmitter();\r\n\r\n    /**\r\n     * åè®¸è¾å¥çå­ç¬¦æå¤§é¿åº¦ã\r\n     * ä»»æè¾å¥æ¶ï¼æ­¤å±æ§ææ\r\n     */\r\n    @Input() maxLength;\r\n\r\n    @Input() mappingFn: (rowData, mapFields, bindingData?: any) => void;\r\n    /** æ°æ®åè¡¨ */\r\n    @Input() items: any;\r\n    // æ¶èåè¡¨\r\n    @Input() favoriteItems: any[] = [];\r\n    /** èªå®ä¹æ°æ® */\r\n    @Input() customData: any;\r\n\r\n    /** ç»å®å¼æå¨çå¯¹è±¡ */\r\n    @Input() bindingData: {};\r\n\r\n    @Input() treeInfo: TreeInfo;\r\n    /** æ¯å¦å¯ç¨çº§èéæ©æ§å¶éé¡¹ */\r\n    @Input() enableCascade = false;\r\n    /** çº§èæ§å¶é»è®¤å¼ï¼ enable: åæ­¥éæ©, upï¼åå«ä¸çº§, downï¼åå«ä¸çº§, disableï¼ä»éæ©èªèº« */\r\n    @Input() cascadeStatus: \"enable\" | \"up\" | \"down\" | \"disable\" = \"enable\";\r\n    /** åå«çº§èéé¡¹çå¯ç¨ç¶æï¼é»è®¤å¨é¨å¯ç¨ */\r\n    @Input() cascadeItems = {\r\n        enable: true,\r\n        up: true, \r\n        down: true,\r\n        disable: true\r\n    }\r\n    /** æ¾ç¤ºçº§èæ§å¶ */\r\n    @Input() showCascadeControl = true;\r\n\r\n    @Input() placeholder = \"\";\r\n\r\n    /** æ¾ç¤ºå·²éè®°å½åè¡¨ã é»è®¤ä¸º false ä¸æ¾ç¤º */\r\n    @Input() showSelected = false;\r\n\r\n    /** åºç¨æ¶èå¤¹ */\r\n    @Input() useFavorite = false;\r\n    /** æ¶èæ°æ®æ¥èªäºï¼ locale: æ¬å°å­å¨ï¼ remote: æå¡å¨ç«¯å­å¨ */\r\n    @Input() favoriteDataFrom: \"locale\" | \"remote\" = \"remote\";\r\n    /** ä½¿ç¨æç¤º,å¿«æ·éæ© */\r\n    @Input() useTip = false;\r\n    /** è®°å½çªå£å¤§å° */\r\n    @Input() isRecordSize = false;\r\n\r\n    /** å¿«ééæ© */\r\n    @Input() userId: string;\r\n\r\n    /** æ¯å¦å¯ç¨éä¸­valueå¼å¯¹åºçè¡æ°æ®ï¼é»è®¤ true */\r\n    @Input() enableToSelect = true;\r\n\r\n    @Input() enableFindText = false;\r\n    /** -1: ä¸å±å¼ï¼ 0: å¨é¨å±å¼ï¼>0: å±å¼å°æå®çº§æ° */\r\n    @Input() expandLevel = -1;\r\n\r\n    @Input() navTreeTableOptions: any = {};\r\n    @Input() treeTableOptions: any = {};\r\n    @Input() dataTableOptions: any = {};\r\n\r\n\r\n    defaultTreeTableOptions = {\r\n        maxLevel: 9,\r\n        enableContextMenu: false,\r\n        contextMenuItems: [],\r\n    };\r\n\r\n    /** æ å½¢å¸®å©æ°æ®å è½½æ¹å¼ï¼ default: åç½®åæ°ï¼ loadall: å è½½ææ layerloadï¼åå±å è½½ */\r\n    @Input() loadTreeDataType: \"default\" | \"loadall\" | \"layerload\" = \"default\";\r\n\r\n    /** çªå£æå¼åç«å³å è½½æ°æ®ï¼é»è®¤ä¸º true */\r\n    @Input() loadDataWhenOpen = true;\r\n\r\n    /**\r\n     * å¯¼èªåè¡¨ï¼æ åè¡¨å¨å¸®å©æå¼åéä¸­çæ°æ®;\r\n     * è®¾ç½®åï¼`selectFirstInNav` å¤±æï¼\r\n     */\r\n    @Input() navSelectedIds = \"\";\r\n\r\n    /**\r\n     * å¯¼èªå¸®å©ï¼éä¸­ç¬¬1æ¡æ°æ®ï¼é»è®¤ä¸º false;\r\n     * æ³¨æï¼å½`navSelectedIds`ä¸ä¸ºç©ºæ¶ï¼æ­¤å±æ§å¤±æã\r\n     */\r\n    @Input() selectFirstInNav = false;\r\n\r\n    /** å¯ç¨æé å®æ´æ è¿æ»¤ */\r\n    @Input() enableFullTree = true;\r\n\r\n    /** æ¾ç¤ºææ¬èªå®ä¹å½æ° */\r\n    @Input() displayFormatter: (\r\n        value: string,\r\n        data: any,\r\n        instance: any\r\n    ) => string = undefined;\r\n    /** æ¾ç¤ºææ¬å­æ®µéåï¼ä»¥ è±æ éå·éå¼ */\r\n    @Input() displayFields = \"\";\r\n    @Input() displayTextSeparator = \"_\";\r\n\r\n    /**\r\n     * å¸®å©åæ°æ®IDï¼ä¸ä¸ºç©ºæ¶è°ç¨æå®çURI\r\n     * /api/runtime/bcc/v1.0/help/data/{helpId}\r\n     */\r\n    @Input() helpId = \"\";\r\n    /** ææ¬å¯¹é½æ¹å¼ï¼ left | center | right; é»è®¤ left */\r\n    @Input() textAlign = \"left\";\r\n\r\n    /** é¼ æ æ»è¿è¾å¥æ¡æ¶æ¾ç¤ºè¾å¥æ¡åçææ¬ä¿¡æ¯ */\r\n    @Input() enableTitle = true;\r\n    @Input() useExtendInfo = false;\r\n    @Input() extInfoFields = \"\";\r\n    @Input() extInfoFormatter: ExtInfoFormatter;\r\n    @Input() extendInfo = \"\";\r\n    /** IDE è®¾è®¡å¨èªå®ä¹æ ¼å¼å 2103 */\r\n    @Input() customFormatter: CustomDataFormatter = null;\r\n    @Input() customNavFormatter: CustomDataFormatter = null;\r\n\r\n    /** èªå®ä¹ç¡®å®äºä»¶ */\r\n    @Input() okHandler = null;\r\n    /** èªå®ä¹åæ¶äºä»¶ */\r\n    @Input() cancelHandler = null;\r\n\r\n    @Input() tagboxHeight = \"auto\";\r\n    @Input() maxTagboxHeight;\r\n\r\n    /** å¯ç¨è·åææå­çº§æ°æ®çåè½ */\r\n    @Input() enableGetAllChildNodes = true;\r\n\r\n    @Input() shortcutKey = {\r\n        /** æå¼å¸®å©çªå£ */\r\n        open: \"ArrowRight\",\r\n        /** ç¡®è®¤éæ©æ°æ® */\r\n        confirm: \"Enter\",\r\n        /** æç´¢æ¡ç¦ç¹ */\r\n        searchFocus: \"F3\",\r\n        /** éä¸­ä¸ä¸æ¡ */\r\n        moveUp: \"ArrowUp\",\r\n        /** éä¸­ä¸ä¸æ¡ */\r\n        moveDown: \"ArrowDown\",\r\n        /** å±å¼èç¹ */\r\n        expand: \"ArrowRight\",\r\n        /** æå èç¹ */\r\n        collapse: \"ArrowLeft\",\r\n        /** ä¸ä¸é¡µ */\r\n        nextPager: \"PageDown\",\r\n        /** ä¸ä¸é¡µ */\r\n        prevPager: \"PageUp\",\r\n    };\r\n    /** å¿«æ·éæ©ç¸å³éç½®é¡¹ï¼é»è®¤ä¸º null, å³ä¸å¯ç¨æ­¤åè½ */\r\n    @Input() quickSelect: QuickSelectOption = null;\r\n\r\n    /** æ å½¢å¸®å© æ¯å¦ä½¿ç¨æ å½¢ç»ææ°æ®ãé»è®¤ä¸º true, å½ä¸º false æ¶ï¼æå¡å¨ç«¯æ é¡»æé æ å½¢ç»æï¼ææ®éåè¡¨è¾åº */\r\n    @Input() treeToList = false;\r\n    @Input() navTreeToList = false;\r\n\r\n    /** å¸¦å¯¼èªçå¸®å©ä¸­ï¼æ¯å¦æ¾ç¤ºå·¦ä¾§å¯¼èªé¨åãé»è®¤ true */\r\n    @Input() showNavigation = true;\r\n\r\n    /** æ°æ®éæ©åï¼å¼æ å°åè§¦å\r\n     * è¿å Observable\r\n     *      canSelect: <boolean>  æ¯å¦åè®¸éæ©\r\n     *      message: <string> ä¸åè®¸éæ©æ¶çæç¤ºä¿¡æ¯\r\n     */\r\n    @Input() beforeSelectData: (p: {\r\n        instance: any;\r\n        data: any;\r\n    }) => Observable<{ canSelect: boolean; message: string } | boolean>;\r\n\r\n\r\n    @Input() layoutFormat: LookupLayout = LookupLayout.default;\r\n\r\n    @Output() selectedData = new EventEmitter();\r\n    @Output() clear = new EventEmitter();\r\n    @Output() search = new EventEmitter();\r\n    // å¸®å©ææ¬æ¡ä¸­å¼ååäºä»¶\r\n    @Output() valueChanged = new EventEmitter();\r\n    @Output() loadSuccess = new EventEmitter();\r\n\r\n    @Output() pagerChanged = new EventEmitter();\r\n\r\n    @Output() expandTreeNode = new EventEmitter();\r\n    @Output() textChanged = new EventEmitter();\r\n\r\n    @Output() checkedChange = new EventEmitter<{\r\n        data: any;\r\n        isCheck: boolean;\r\n    }>();\r\n\r\n    @Output() tagRemoved = new EventEmitter();\r\n\r\n    /** åå®¹ä¸­çç½è¾¹è· */\r\n    containerMargin = { top: 0, bottom: 5, left:  14, right: 14 };\r\n    containerStyle = {\r\n    };\r\n\r\n    _gridOptions: LookupGridOptions = lookupGridDefaults;\r\n\r\n    get gridOptions() {\r\n        if (\r\n            this.useFavorite &&\r\n            this.columns &&\r\n            this.columns.length > 0 &&\r\n            !this.columns.find((item) => item.field === FAVORITE_FIELD_NAME)\r\n        ) {\r\n            this.columns.push({\r\n                field: FAVORITE_FIELD_NAME,\r\n                title: \"\",\r\n                width: 40,\r\n                align: \"center\",\r\n                fixed: 'right',\r\n                // fixedWidth: true,\r\n                formatter: this.favHelper.favoriteColumnFormatter,\r\n            });\r\n        }\r\n        this._gridOptions = Object.assign(this._gridOptions, {\r\n            singleSelect: this.singleSelect,\r\n            idField: this.idField,\r\n            uri: this.uri,\r\n            showFilterBar: this.showFilterBar,\r\n            pagination: this.pagination,\r\n            pageIndex: this.pageIndex,\r\n            pageSize: this.pageSize,\r\n            pageList: this.pageList,\r\n            total: this.total,\r\n            items: this.items,\r\n            columns: this.columns,\r\n            resizableColumns: true,\r\n            fixedHeader: true,\r\n            hover: true,\r\n            treeInfo: this.treeInfo,\r\n        });\r\n\r\n        return this._gridOptions;\r\n    }\r\n    @Input() set gridOptions(opts) {\r\n        this._gridOptions = Object.assign({}, this._gridOptions, opts);\r\n        this.selectedColumns = this.multiSelMgr.initSelectedColumns();\r\n    }\r\n\r\n    @ViewChild(\"contentContainer\", { read: ViewContainerRef })\r\n    contentContainer: ViewContainerRef;\r\n    @ViewChild(\"favoritesContainer\", { read: ViewContainerRef })\r\n    favoritesContainer: ViewContainerRef;\r\n    @ViewChild(\"leftContainer\", { read: ViewContainerRef })\r\n    leftContainer: ViewContainerRef;\r\n    @ViewChild(\"centerContainer\", { read: ViewContainerRef })\r\n    centerContainer: ViewContainerRef;\r\n    @ViewChild(\"multiSelectDT\") multiSelectDT: DataTableComponent;\r\n    @ViewChild(\"inputgroup\") inputGroup: InputGroupComponent;\r\n    @ViewChild(\"leftPanel\") leftPanel: LayoutPanelComponent;\r\n    @ViewChild(\"tagbox\") tagbox: ElementRef;\r\n\r\n    @ViewChild(\"okbtn\") okButton: ElementRef;\r\n    @ViewChild(\"tagInput\") tagInput: InputGroupComponent;\r\n\r\n    componentRef: ComponentRef<any>;\r\n    leftComponentRef: ComponentRef<LookupLeftComponent>;\r\n    favoritesComponentRef: ComponentRef<any>;\r\n\r\n    public http: ILookupHttpService;\r\n    public messagerService: MessagerService;\r\n    public loadingService: LoadingService;\r\n    loading: LoadingComponent;\r\n    // dataFieldMaps: any;\r\n    navigationOptions: NavigationOptions;\r\n\r\n    // å¯¼èªå¸®å©å·¦åå®½åº¦\r\n    leftPanelWidth = 320;\r\n    // å¯¼èªå¸®å©çªå£æå°å®½åº¦\r\n    navLookupDialogMinWidth = 960;\r\n\r\n    navigationFilter: NavigationFilter = null;\r\n\r\n    subscriptions: Subscription[] = [];\r\n    dialogOpenedSubscription: Subscription;\r\n    dialogClosedSubscription: Subscription;\r\n\r\n    isTextChange = false;\r\n    isTabChanged = false;\r\n\r\n    displayInfo: DisplayInfo = Object.assign({}, displayInfoDefault);\r\n\r\n    tabChangeSubscription = null;\r\n    // æå­è¡ç¹å»æ°æ®  ç¨äºæ¶è\r\n    personalConf: PersonalConfig = {};\r\n    favoriteColumns: any[] = [];\r\n    /** ä¸´æ¶æ¥è¯¢åæ° */\r\n    _searchState = null;\r\n    allData: any = [];\r\n    get selections() {\r\n        const selectItems = this.lookupSelectionSer.getSelections();\r\n        if (this.singleSelect) {\r\n            return selectItems[0];\r\n        } else {\r\n            return selectItems;\r\n        }\r\n    }\r\n    get usePersionalConf() {\r\n        return this.useFavorite || this.useTip || this.isRecordSize;\r\n    }\r\n\r\n    get displayTextList() {\r\n        if (this.displayText) {\r\n            return this.displayText.split(this.multipleChoiceSeparator);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    public personalConfigService: PersonalConfigService;\r\n    public utilService: UtilService;\r\n    public treeNodeHelper: TreeNodeHelper;\r\n    public localService: LocaleService;\r\n    public notifyService: NotifyService;\r\n    allColumnsTitle = \"ææå\";\r\n    mustWriteSomething = \"è¯·è¾å¥å³é®å­åæ¥è¯¢ã\";\r\n    mustChoosAdatarow = \"è¯·éæ©ä¸æ¡è®°å½ï¼\";\r\n    addFavoriteSuccess = \"æ¶èæåã\";\r\n    delFavoriteSuccess = \"ç§»é¤æ¶èæåã\";\r\n\r\n    /** ä½¿ç¨åç½®çæ¥è¯¢æ¹æ³, é»è®¤ false */\r\n    useInsideSearchHandler = false;\r\n    searching = false;\r\n    /** ä¸´æ¶å­å¨æ¥è¯¢ç»æé */\r\n    _searchResult = null;\r\n\r\n    lookupinitializationSubject = new Subject();\r\n\r\n    /** å¤éæ¶ï¼éä¸­çæ°æ® */\r\n    currentSelectedItems: Observable<any> = of([]);\r\n    /** å·²éæ°æ®åä¿¡æ¯ */\r\n    selectedColumns = [];\r\n    activeTab: string | \"datalist\" | \"favorite\" | \"selected\" = \"datalist\";\r\n\r\n    favHelper: FavoriteHelper = null;\r\n    ttEventMgr: TreeTableEventManager = null;\r\n    multiSelMgr: MultiSelectionManager = null;\r\n    httpMgr: LookupHttpManager = null;\r\n    lookupCmpMgr: LookupComponentManager = null;\r\n    dialogMgr: LookupDialogManager = null;\r\n    selectionMgr: SelectionManager = null;\r\n    dtEventMgr: DataTableEventManager = null;\r\n\r\n    lookupSelectionSer: LookupSelectionService = null;\r\n\r\n    controlId = \"\";\r\n    savingFaoriteData = false;\r\n    isReady = false;\r\n    showTagboxClearButton = false;\r\n    hasError = false;\r\n\r\n    isGetAllChidlNodes = false;\r\n    eventManager: EventManager;\r\n    /** éä¸­è®°å½IDï¼èªå®ä¹å¸®å©åæ°æ¶ä½¿ç¨ */\r\n    selectedIds = [];\r\n    private lookupSearchInputEvent = null;\r\n    private farrisInstances: FarrisComponentInstanceService = null;\r\n    /** ç¨æ·åå§è®¾ç½® */\r\n    private _userSettings: any = {};\r\n\r\n    get userInitialConfig() {\r\n        return this._userSettings;\r\n    }\r\n\r\n    _treeInfo_ = null;\r\n\r\n    /** dialog åå®¹åºåé«åº¦ã å¼¹çªæ»é«åº¦ - å¤´é¨é«åº¦ - èé¨é«åº¦ - ï¼å¯ç¨æ¶è TABå¤´é«åº¦ï¼ */\r\n    dialogContentHeight = 0;\r\n    /** å·¦æ å³åè¡¨ï¼ å·¦æ ç¹å»èç¹æ¥è¯¢æ¶æ¯å¦åæ¬ä¸çº§èç¹çæ°æ®ï¼é»è®¤ false */\r\n    includeSubordinates = false;\r\n    includeSubordinates$ = new Subject();\r\n    includeSubordinates$$: Subscription = null;\r\n    overLayService: OverLayHiddenService;\r\n    private debugSer: DebugService = null;\r\n\r\n    constructor(\r\n        public injector: Injector,\r\n        public cfr: ComponentFactoryResolver,\r\n        public el: ElementRef,\r\n        public utils: CommonUtils,\r\n        private defaultMapping: LookupDefaultMapping,\r\n        public changeDetector: ChangeDetectorRef,\r\n        public shortcuts: ShortcutsService,\r\n        public lookupUtils: LookupUtils,\r\n        private zone: NgZone,\r\n        public render2: Renderer2\r\n    ) {\r\n        super(injector, el, changeDetector);\r\n        this.createInstance();\r\n        this.currentSelectedItems = this.lookupSelectionSer.selected$;\r\n        this.eventManager = this.injector.get(EventManager);\r\n        this.farrisInstances = this.injector.get(\r\n            FarrisComponentInstanceService,\r\n            null\r\n        );\r\n\r\n        this.overLayService = new OverLayHiddenService();\r\n\r\n        this.debugSer = this.injector.get(DebugService, null);\r\n        if (this.debugSer) {\r\n            this.debugSer.useDebugMode();\r\n        }\r\n    }\r\n\r\n    writeConsole(msg, type: 'info'|'log'|'warn'|'error' = 'warn') {\r\n        if (this.debugSer) {\r\n            this.debugSer[type](msg);\r\n        }\r\n    }\r\n\r\n    private cacheUserConfig() {\r\n        this._userSettings._title = this.title;\r\n        this.displayInfo.title = this.title;\r\n        this._userSettings._columns = this.deepClone(this.columns || []);\r\n        this._userSettings.getColumns = () => {\r\n            return this._userSettings._columns;\r\n        };\r\n\r\n        this._userSettings.reset = () => {\r\n            this.title = this._userSettings._title;\r\n            this.displayInfo.title = this.title;\r\n            this.columns = this._userSettings.getColumns();\r\n        };\r\n    }\r\n\r\n    private deepClone(obj) {\r\n        if (obj === null) {\r\n            return null;\r\n        }\r\n        const clone = Object.assign({}, obj);\r\n        Object.keys(clone).forEach(\r\n            (key) =>\r\n                (clone[key] =\r\n                    typeof obj[key] === \"object\"\r\n                        ? this.deepClone(obj[key])\r\n                        : obj[key])\r\n        );\r\n        if (Array.isArray(obj)) {\r\n            clone.length = obj.length;\r\n            return Array.from(clone);\r\n        }\r\n        return clone;\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.cacheUserConfig();\r\n        if (!this.loadTreeDataType) {\r\n            this.loadTreeDataType = \"default\";\r\n        }\r\n\r\n        this.checkGridOptions();\r\n        this.displayInfo.title = this.title;\r\n        /** ä¼ éä¸ä¸æ */\r\n        if (this.http) {\r\n            this.http.context = this.context;\r\n        }\r\n\r\n        this.allColumnsTitle = this.localService.getValue(\"lookup.allColumns\");\r\n        this.mustWriteSomething = this.localService.getValue(\r\n            \"lookup.mustWriteSomething\"\r\n        );\r\n        this.mustChoosAdatarow = this.localService.getValue(\r\n            \"lookup.mustChoosAdatarow\"\r\n        );\r\n        this.addFavoriteSuccess =\r\n            this.localService.getValue(\"lookup.favoriteInfo.addFav\") ||\r\n            this.addFavoriteSuccess;\r\n        this.delFavoriteSuccess =\r\n            this.localService.getValue(\"lookup.favoriteInfo.cancelFav\") ||\r\n            this.delFavoriteSuccess;\r\n\r\n        this.dialogMgr.onDialogCreated();\r\n\r\n        this._treeInfo_ = this.treeInfo ? cloneDeep(this.treeInfo) : null;\r\n\r\n        if (this.quickSelect) {\r\n            this.quickSelect = Object.assign({}, QuickSelectDefaultOptions, this.quickSelect || {});\r\n        }\r\n\r\n        /** åå®¹ä¸­çç½è¾¹è· */\r\n        this.setContainerMargin();\r\n    }\r\n\r\n    private setContainerMargin() {\r\n        const mrn = this.layoutFormat === 'default' ? 14 : 24;\r\n        this.containerMargin = { top: 0, bottom: 5, left: mrn, right: mrn };\r\n\r\n        this.containerStyle = {\r\n            marginLeft: this.containerMargin.left + \"px\",\r\n            marginRight: this.containerMargin.right + \"px\",\r\n            marginTop: this.containerMargin.top + \"px\",\r\n            marginBottom: this.containerMargin.bottom + \"px\",\r\n        };\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        super.ngOnDestroy();\r\n        this.subscriptions.forEach((n) => {\r\n            if (n) {\r\n                n.unsubscribe();\r\n                n = null;\r\n            }\r\n        });\r\n\r\n        if (this.selectionMgr) {\r\n            this.selectionMgr.destroy();\r\n        }\r\n\r\n        this.subscriptions = [];\r\n\r\n        if (this.farrisInstances) {\r\n            this.farrisInstances.destroy(this.el.nativeElement);\r\n        }\r\n\r\n        if (this.lookupSearchInputEvent) {\r\n            this.lookupSearchInputEvent();\r\n        }\r\n        this.lookupUtils.destroy();\r\n\r\n        this.overLayService.destory(this.el.nativeElement);\r\n        this.overLayService = null;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.columns && !changes.columns.isFirstChange()) {\r\n            this.cacheUserConfig();\r\n        }\r\n\r\n        if (changes.layoutFormat && !changes.layoutFormat.isFirstChange()) {\r\n            this.setContainerMargin();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (!this.quickSelect || !this.quickSelect.enable) {\r\n            this.lookupSearchInputEvent = onTextChanged.bind(this)();\r\n        }\r\n\r\n        // åå§åä¸ªæ§åéç½®\r\n        if (this.usePersionalConf) {\r\n            this.favHelper.initPersonalInfo();\r\n        }\r\n\r\n        if (this.useExtendInfo) {\r\n            const jsonData = this.selectionMgr.getBindingData();\r\n            this.updateExtendInfo(jsonData, false);\r\n        }\r\n\r\n        if (this.viewType === \"text\") {\r\n            // this.shortcuts.add({\r\n            //     key: 'F2',\r\n            //     target: this.inputGroup.textbox.nativeElement,\r\n            //     command: () => {\r\n            //         this.showDialog();\r\n            //     }\r\n            // });\r\n            this.render2.listen(\r\n                this.inputGroup.textbox.nativeElement,\r\n                \"keydown.F2\",\r\n                this.showDialog.bind(this)\r\n            );\r\n        } else {\r\n            this.registerMouseEventForTagView();\r\n\r\n            if (this.tagboxHeight) {\r\n                const el =\r\n                    this.tagbox.nativeElement.querySelector(\".multi-more\");\r\n                let tbh = this.tagboxHeight;\r\n                if (tbh !== \"auto\") {\r\n                    tbh += \"px\";\r\n\r\n                    if (this.maxTagboxHeight) {\r\n                        this.render2.setStyle(\r\n                            el,\r\n                            \"maxHeight\",\r\n                            `${this.maxTagboxHeight}px`\r\n                        );\r\n                    }\r\n                }\r\n\r\n                this.render2.setStyle(el, \"height\", tbh);\r\n            }\r\n        }\r\n\r\n        if (this.el && this.farrisInstances) {\r\n            this.farrisInstances.add(this.el.nativeElement, this);\r\n        }\r\n    }\r\n\r\n    private createInstance() {\r\n        this.http = this.injector.get(ServerSideToken, null);\r\n        this.messagerService = this.injector.get(MessagerService);\r\n        this.loadingService = this.injector.get(LoadingService);\r\n        this.notifyService = this.injector.get(NotifyService, null);\r\n\r\n        this.personalConfigService = this.injector.get(\r\n            PersonalConfigService,\r\n            null\r\n        );\r\n\r\n        this.lookupSelectionSer = new LookupSelectionService(this);\r\n\r\n        this.utilService = new UtilService(this);\r\n        this.localService = this.injector.get(LocaleService);\r\n        this.treeNodeHelper = new TreeNodeHelper(this);\r\n\r\n        this.favHelper = new FavoriteHelper(this);\r\n        this.ttEventMgr = new TreeTableEventManager(this);\r\n        this.multiSelMgr = new MultiSelectionManager(this);\r\n        this.httpMgr = new LookupHttpManager(this);\r\n        this.lookupCmpMgr = new LookupComponentManager(this);\r\n        this.dialogMgr = new LookupDialogManager(this);\r\n        this.selectionMgr = new SelectionManager(this);\r\n        this.dtEventMgr = new DataTableEventManager(this);\r\n    }\r\n\r\n    showDialog(): any {\r\n        if (this.disabled || this.readonly) {\r\n            return false;\r\n        }\r\n\r\n        this.selectionMgr.initDisplayValue();\r\n        this.dictPickingSubscription = this.dictPicking({\r\n            instance: this,\r\n        }).subscribe((pr: PickingResult) => {\r\n            this.dialogMgr.canOpenDialog(pr);\r\n        });\r\n\r\n        return false;\r\n    }\r\n\r\n    /** å¤æ­æ¯å¦ä¸ºååè¡¨å¸®å© */\r\n    isDoublleList() {\r\n        return (\r\n           ( this.displayType === LookupGridDisplayType.NavList ||\r\n            this.displayType === LookupGridDisplayType.NavTreeList ||\r\n            this.displayType === LookupGridDisplayType.NavListTree) && this.showNavigation\r\n        );\r\n    }\r\n    /** å¤æ­æ¯å¦æ¾ç¤ºä¸ºæ å¸®å© */\r\n    isTree() {\r\n        const dtyp = this.displayType.toUpperCase()\r\n        return (\r\n            dtyp === LookupGridDisplayType.TreeList || dtyp === LookupGridDisplayType.NavListTree\r\n        );\r\n    }\r\n\r\n    onResized(e: any) {\r\n        this.resizeCmp(e.size);\r\n        this.resized.emit(e.size);\r\n    }\r\n\r\n    onResizing(pos: IResizeEvent) {\r\n        this.resizing.emit(pos.size);\r\n        this.resizeCmp(pos.size);\r\n        if (this.isDoublleList() && this.leftComponentRef) {\r\n            this.leftComponentRef.instance.resize({\r\n                width: this.leftPanel.width,\r\n                height: this.dialogMgr.getHeight(),\r\n            });\r\n        }\r\n    }\r\n\r\n    onMaxDialog(pos: IResizeEvent) {\r\n        this.resizeCmp(pos.size);\r\n        if (this.leftPanel) {\r\n            this.leftComponentRef.instance.resize({\r\n                width: this.leftPanel.width,\r\n                height: this.dialogMgr.getHeight(),\r\n            });\r\n        }\r\n        // tfs 543132 \r\n        // this.dialogHeight = pos.size.height;\r\n        this.dialogContentHeight = this.dialogMgr.resetDialogContentHeight();\r\n        this.dialogMaxed.emit(pos.size);\r\n    }\r\n\r\n    resizeCmp(size?: any) {\r\n        if (!this.componentRef || !this.componentRef.instance) {\r\n            return;\r\n        }\r\n\r\n        if (!size) {\r\n            size = this.dialog.size;\r\n        }\r\n        const _size = {\r\n            width:\r\n                size.width -\r\n                this.containerMargin.left -\r\n                this.containerMargin.right,\r\n            height: this.dialogMgr.getHeight(),\r\n        };\r\n\r\n        if (this.useFavorite && this.favoritesComponentRef) {\r\n            this.favoritesComponentRef.instance.resize(_size);\r\n        }\r\n        if (this.isRecordSize) {\r\n            this.personalConf.size = this.dialog.size;\r\n            this.personalConfigService.updatePersonalConfig({\r\n                size: this.dialog.size,\r\n            });\r\n        }\r\n        if (this.isDoublleList()) {\r\n            _size.width = size.width - this.leftPanel.width - (this.layoutFormat === 'default' ? 20 : 48) - 7;;\r\n        }\r\n\r\n        this.componentRef.instance.resize(_size);\r\n    }\r\n\r\n    private checkGridOptions() {\r\n        if (!this.gridOptions.idField) {\r\n            this.writeConsole(\"æªè®¾ç½®ä¸»é®å­æ®µ idField\");\r\n        }\r\n\r\n        if (!this.beforeSelectData) {\r\n            this.beforeSelectData = () => {\r\n                return of(true);\r\n            };\r\n        }\r\n\r\n        const ctxMenuLanguages =\r\n            this.localService.getValue(\"lookup.contextMenu\");\r\n\r\n        this.treeTableOptions = Object.assign(\r\n            { language: ctxMenuLanguages },\r\n            this.defaultTreeTableOptions,\r\n            this.treeTableOptions || {}\r\n        );\r\n        // this.dataTableOptions = Object.assign({}, this.defaultTreeTableOptions, this.dataTableOptions);\r\n        // this.navTreeTableOptions = Object.assign({}, this.defaultTreeTableOptions, this.navTreeTableOptions);\r\n    }\r\n\r\n    getComponentType(): Type<any> {\r\n        if (!this.displayType) {\r\n            this.displayType = \"LIST\";\r\n        }\r\n        switch (this.displayType) {\r\n            case LookupGridDisplayType.List:\r\n            case LookupGridDisplayType.NavList:\r\n            case LookupGridDisplayType.NavTreeList:\r\n                return DataTableComponent;\r\n            case LookupGridDisplayType.TreeList:\r\n            case LookupGridDisplayType.NavListTree:\r\n                return TreeTableComponent;\r\n        }\r\n    }\r\n\r\n    showLoading(msg = \"\") {\r\n        if (this.dialog && this.dialog.modalContent && !this.loading) {\r\n            const opts = {\r\n                container: this.dialog.modalContent,\r\n                delay: 200,\r\n            };\r\n\r\n            if (msg) {\r\n                opts[\"message\"] = msg;\r\n            }\r\n\r\n            this.loading = this.loadingService.show(opts);\r\n        } else {\r\n            this.loading = this.loadingService.show();\r\n        }\r\n    }\r\n\r\n    closeLoading() {\r\n        if (this.loading) {\r\n            this.loading.close();\r\n            this.loading = null;\r\n        }\r\n\r\n        this.loadingService.clearAll();\r\n    }\r\n\r\n    getSearchColumns(resdata: any) {\r\n        const cols = resdata.columns || this.columns;\r\n        if (resdata.searchFields) {\r\n            return resdata.searchFields.map((sf) => {\r\n                const c = cols.find(\r\n                    (col) => col.field.toLowerCase() === sf.value.toLowerCase()\r\n                );\r\n                if (c) {\r\n                    sf.label = c.title;\r\n                }\r\n                return sf;\r\n            });\r\n        } else if (cols) {\r\n            return cols\r\n                .filter((c) => c.searchField)\r\n                .map((col) => {\r\n                    return {\r\n                        label: col.title,\r\n                        value: col.field,\r\n                    };\r\n                });\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private initOptions(resData: LookupGridResult) {\r\n        let obser = of(true);\r\n        this.gridOptions.searchFields = this.getSearchColumns(resData);\r\n        if (resData) {\r\n            // å¦æç»ä»¶ä¸­æªè®¾ç½®æ¾ç¤ºåï¼åä½¿ç¨æå¡å¨ç«¯è¿åçè®¾ç½®ï¼ å¦åå°ä½¿ç¨ç»ä»¶ä¸­éç½®çå±ç¤ºå\r\n            if (\r\n                (!this.columns || !this.columns.length) &&\r\n                resData.columns &&\r\n                resData.columns.length\r\n            ) {\r\n                this.columns = resData.columns;\r\n            }\r\n\r\n            this.setLookupTitleText(resData);\r\n\r\n            if (\r\n                this.isDoublleList() &&\r\n                this.dialogWidth < this.navLookupDialogMinWidth &&\r\n                !this.isRecordSize\r\n            ) {\r\n                this.dialogWidth = this.navLookupDialogMinWidth;\r\n                this.dialog.reSize({ width: this.dialogWidth });\r\n            }\r\n\r\n            if (!this.customDisplayType) {\r\n                // this.displayType = resData.displayType || this.displayType || 'LIST';\r\n                // if (this.treeToList) {\r\n                //     this.displayType = this.isDoublleList() ? ' NAVLIST ': 'LIST';\r\n                // }\r\n                this.changeDetector.detectChanges();\r\n                this.lookupCmpMgr.createComponentWithServerData(resData);\r\n            }\r\n\r\n            if ( this.isDoublleList() && resData.navigation && !this.leftComponentRef) {\r\n                this.navigationOptions = resData.navigation;\r\n                this.navigationOptions.hover = true;\r\n                this.navigationOptions.searchFields = this.getSearchColumns(this.navigationOptions);\r\n                // update columns formatter\r\n                if (this.customNavFormatter) {\r\n                    this.navigationOptions.columns.forEach((col) => {\r\n                        if (this.customNavFormatter[col.field]) {\r\n                            col.formatter = this.customNavFormatter[col.field];\r\n                        }\r\n                    });\r\n\r\n                    this.navigationOptions[\"rowStyler\"] =\r\n                        this.customNavFormatter.rowStyler;\r\n                    this.navigationOptions[\"cellStyler\"] =\r\n                        this.customNavFormatter.cellStyler;\r\n                }\r\n                // 20210926 æ å¯¼èªå¸®å©ä¸­ å·¦ä¾§æ æ¯æåå±å è½½\r\n                if (this.displayType === LookupGridDisplayType.NavTreeList) {\r\n                    let _nav_treeinfo_loadtype =\r\n                        this.navigationOptions.treeInfo.loadDataType;\r\n                    if (this.loadTreeDataType !== \"default\") {\r\n                        _nav_treeinfo_loadtype =\r\n                            this.loadTreeDataType === \"loadall\"\r\n                                ? \"all\"\r\n                                : \"async\";\r\n                    }\r\n                    this.navigationOptions.treeInfo.loadDataType =\r\n                        _nav_treeinfo_loadtype;\r\n                }\r\n\r\n                obser = this.lookupCmpMgr.createLeftComponent(this.navigationOptions);\r\n            }\r\n        } else {\r\n            this.lookupCmpMgr.createContent(this.gridOptions);\r\n            this.lookupCmpMgr.createFavoriteComponent();\r\n        }\r\n\r\n        if (this.isTextChange) {\r\n            this.componentRef.instance.searchData.value = this.displayText;\r\n        } else {\r\n            if (this._searchState && this._searchState.value) {\r\n                this.componentRef.instance.searchData.value = this._searchState.value;\r\n            }\r\n        }\r\n\r\n        // update columns formatter\r\n        if (this.customFormatter) {\r\n            this.columns.forEach((col) => {\r\n                if (this.customFormatter[col.field]) {\r\n                    col.formatter = this.customFormatter[col.field];\r\n                }\r\n            });\r\n\r\n            if (this.customFormatter.rowStyler) {\r\n                this.componentRef.instance.rowStyler = this.customFormatter.rowStyler;\r\n            }\r\n\r\n            if (this.customFormatter.cellStyler) {\r\n                this.componentRef.instance.cellStyler = this.customFormatter.cellStyler;\r\n            }\r\n        } else {\r\n            if (resData.customStyles) {\r\n                const { row: rowStylers, cell: cellStylers } = resData.customStyles;\r\n\r\n                const filterFn = (n, data) => {\r\n                    const d = this.utils.getValue(n.field, data);\r\n                    if (typeof d === 'boolean') {\r\n                        if (n.value == '0' || n.value == '1' || n.value == 'true' || n.value == 'false') {\r\n                            return d === (n.value == '0' || n.value == 'false') ? false : true;\r\n                        }\r\n                        return d === !!n.value;\r\n                    }\r\n                    return d === n.value;\r\n                }\r\n\r\n                if (rowStylers) {\r\n                    this.componentRef.instance.rowStyler = ({ data }) => {\r\n                        const styleItem = rowStylers.find(n => {\r\n                            return filterFn(n, data);\r\n                        });\r\n                        if (styleItem) {\r\n                            return styleItem.styles;\r\n                        }\r\n\r\n                        return null;\r\n                    }\r\n                }\r\n\r\n                if (cellStylers) {\r\n                    this.componentRef.instance.cellStyler = (e, field) => {\r\n                        const { data } = e;\r\n                        const styleItem = cellStylers.filter(n => n.field === field).find(t => {\r\n                            return filterFn(t, data);\r\n                        });\r\n\r\n                        if (styleItem) {\r\n                            return styleItem.styles;\r\n                        }\r\n\r\n                        return null;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // this.changeDetector.detectChanges();\r\n        return obser;\r\n    }\r\n\r\n    /**\r\n     * è®¾ç½®å¸®å©çªå£æ é¢\r\n     */\r\n    private setLookupTitleText(resData: LookupGridResult) {\r\n        if (resData.displayInfo) {\r\n            this.displayInfo = resData.displayInfo;\r\n        }\r\n\r\n        // å¦æèªå®ä¹æ é¢ï¼å°ä»¥æ­¤æ é¢ä¸ºåãå¦åå è½½æå¡å¨ç«¯è¿åçæ°æ®\r\n        if (this.title && this.title !== \"æ­¤å¤æ¾ç¤ºå¸®å©æ é¢\") {\r\n            this.displayInfo.title = this.title;\r\n        }\r\n\r\n        if (this.displayInfo && resData.title) {\r\n            if (!this.displayInfo.title) {\r\n                this.displayInfo.title = resData.title;\r\n            }\r\n        }\r\n    }\r\n\r\n    private showGetAllChildrenCheckbox() {\r\n        if (this.isTree() && this.treeInfo) {\r\n            this.enableGetAllChildNodes =\r\n                this.treeInfo.loadDataType !== \"all\" && this.treeInfo.layerType === \"pathcode\";\r\n        } else {\r\n            this.enableGetAllChildNodes = false;\r\n        }\r\n    }\r\n\r\n    initData() {\r\n\r\n        const observer = {\r\n            next: (data: LookupGridResult) => {\r\n\r\n                if (data === false) {\r\n                    if (!this.columns || !this.columns.length) {\r\n                        this.closeLoading();\r\n                        this.closeDialog();\r\n                        if (!this.messagerService.modals || !this.messagerService.modals.length) {\r\n                            this.notifyService.error({msg: this.localService.getValue('lookup.configError') , timeout: 3000});\r\n                        }\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // æå¡å¨ç«¯åçéè¯¯ï¼è¿åNULL æ¶ï¼ç´æ¥å³é­çªå£\r\n                if (data === null) {\r\n                    this.isShow = false;\r\n                    if (this.dialog) {\r\n                        this.dialog.close();\r\n                    }\r\n                    return;\r\n                }\r\n                this.initOptions(data).subscribe(() => {\r\n                    this.selectedColumns =\r\n                        this.multiSelMgr.initSelectedColumns();\r\n                    this.favoriteColumns = this.favHelper.getFavoriteColumns();\r\n\r\n                    if (this.usePersionalConf) {\r\n                        if (!this.personalConfigService.getPersonalData()) {\r\n                            this.personalConfigService.savePersonalConfig(\r\n                                this.personalConf\r\n                            );\r\n                        }\r\n                    }\r\n                    if (!this.isTabChanged) {\r\n                        this.lookupSelectionSer.loadSelections(\r\n                            data.selectedItems || []\r\n                        );\r\n                    }\r\n\r\n                    if (this.isDoublleList()) {\r\n                        // å¯¼èªå¸®å©æ¶ï¼è®¾ç½®å·¦ä¾§éä¸­æ°æ®æ¶ï¼ä¸å è½½ä¸»æ°æ®åè¡¨ã\r\n                        if (this.navSelectedIds || this.selectFirstInNav) {\r\n                            this.loadDataWhenOpen = false;\r\n                        }\r\n                    }\r\n\r\n                    if (data['activeTab'] && !this.isTabChanged) {\r\n                        this.activeTab = 'datalist';\r\n\r\n                        if (this.personalConf && this.personalConf.tabIndex !== this.activeTab) {\r\n                            this.personalConf.tabIndex = this.activeTab;\r\n                        }\r\n\r\n                    }\r\n\r\n                    this.loadData(data);\r\n\r\n                    if (this.isTree()) {\r\n                        if (this.activeTab === \"datalist\") {\r\n                            const tt = this.componentRef.instance as TreeTableComponent;\r\n                            if (tt.searchData.value && this.items && this.items.length) {\r\n                                if (this.items[0].children && this.items[0].children.length) {\r\n                                    tt.toggleExpand(this.items[0], true, false);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        this.showGetAllChildrenCheckbox();\r\n                    }\r\n                    this.isTextChange = false;\r\n                    this._searchResult = null; // æ¸ç©ºä¸´æ¶æ¥è¯¢ ç»æ\r\n                    this.closeLoading();\r\n                    // this.isReady$.next(true);\r\n                    this.isReady = true;\r\n                    this.changeDetector.detectChanges();\r\n                    this.lookupinitializationSubject.next();\r\n                });\r\n            },\r\n            error: (err: any) => {\r\n                // this.isReady$.next(true);\r\n                this.closeLoading();\r\n                this._searchResult = null; // æ¸ç©ºä¸´æ¶æ¥è¯¢ ç»æ\r\n                this.isTextChange = false;\r\n\r\n                this.hasError = true;\r\n                this.changeDetector.detectChanges();\r\n                if (typeof err === \"string\") {\r\n                    this.messagerService.error(err);\r\n                } else {\r\n                    if (err) {\r\n                        if (err.Message) {\r\n                            this.messagerService.error(err.Message);\r\n                        } else {\r\n                            if (err.error) {\r\n                                this.messagerService.exception(err.error);\r\n                            } else {\r\n                                this.messagerService.error(\r\n                                    \"åºç¨æå¡å¨éè¯¯,è¯·èç³»ç³»ç»ç®¡çåï¼\"\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n        };\r\n\r\n        let p: any = {\r\n            pageInfo: {\r\n                pageSize: this.pageSize || 20,\r\n                pageIndex: 1,\r\n            },\r\n        };\r\n        let t: LOAD_DATA_TYPE = \"all\";\r\n        if (this.isTextChange) {\r\n            this._searchState = { \r\n                field: \"*\",\r\n                value: this.displayText\r\n            }\r\n        }\r\n\r\n        if (this._searchState && this._searchState.value) {\r\n            p['search'] = this._searchState;\r\n            t = 'search';\r\n        }\r\n\r\n\r\n        if (!this.isTabChanged && this.enableToSelect) {\r\n            const vals = this.selectionMgr.getSelectedIds();\r\n            if (vals && vals.length) {\r\n                p[\"selectedInfo\"] = {\r\n                    selected: true,\r\n                    selectedIds: vals,\r\n                };\r\n            } else {\r\n                if (this[\"selectedIds\"]) {\r\n                    p[\"selectedInfo\"] = {\r\n                        selected: true,\r\n                        selectedIds: this[\"selectedIds\"],\r\n                    };\r\n                }\r\n            }\r\n        }\r\n\r\n        this.showLoading();\r\n        this.hasError = false;\r\n\r\n        this.httpMgr.lookupRequest(p, t).pipe(\r\n            map((restData: LookupGridResult) => {\r\n                if (restData) {\r\n                    restData.selectedItems = restData[\"selectedData\"] || [];\r\n                } else {\r\n                    if (restData && typeof restData === \"object\") {\r\n                        restData.selectedItems = [];\r\n                    }\r\n                }\r\n                return restData === null ? false : restData;\r\n            })\r\n        ).subscribe(observer);\r\n    }\r\n\r\n    loadData(resData?: LookupGridResult, rebindEvent = true) {\r\n        if (this.activeTab === \"datalist\") {\r\n            if (this.useFavorite && !this.isTree()) {\r\n                this.favHelper.updateFavoritesStatus(resData.items);\r\n            }\r\n\r\n            switch (this.displayType) {\r\n                case LookupGridDisplayType.NavList:\r\n                case LookupGridDisplayType.NavTreeList:\r\n                case LookupGridDisplayType.List:\r\n                    this.loadDataTableData(resData);\r\n                    if (rebindEvent) {\r\n                        this.dtEventMgr.bindDataTableEvent();\r\n                    }\r\n                    break;\r\n                case LookupGridDisplayType.TreeList:\r\n                case LookupGridDisplayType.NavListTree:\r\n                    this.loadTreeTableData(resData, rebindEvent);\r\n                    break;\r\n            }\r\n        } else if (this.activeTab === \"favorite\") {\r\n            this.loadFavData(resData);\r\n        }\r\n\r\n        // éä¸­æ°æ®\r\n        this.selectionMgr.selectCurrentValue();\r\n    }\r\n\r\n    private loadFavData(result: LookupGridResult) {\r\n        // å è½½æ¶èæ°æ®\r\n        if (this.useFavorite) {\r\n            if (this.isTree()) {\r\n                this.setTreeInfo(result);\r\n                const treeNodes = this.favHelper.initFavoriteTreeData(\r\n                    result.items\r\n                );\r\n                const treeData = this.treeNodeHelper\r\n                    .flatTreeNodes(treeNodes)\r\n                    .map((n) => {\r\n                        n.data[\"_addtional_\"] = n[\"addtional\"];\r\n                        return n.data;\r\n                    });\r\n                this.lookupSelectionSer.initFavoriteItems(treeData);\r\n\r\n                setTimeout(() => {\r\n                    this.favoritesComponentRef.instance.scrollToY(1);\r\n                });\r\n            } else {\r\n                this.lookupSelectionSer.initFavoriteItems(result.items);\r\n            }\r\n\r\n            this.favHelper.loadFavoritesData(result);\r\n        }\r\n    }\r\n\r\n    loadDataTableData(resData?: LookupGridResult) {\r\n        if (resData) {\r\n            if (this.useFavorite && !this.isTree()) {\r\n                this.favHelper.updateFavoritesStatus(resData.items);\r\n            }\r\n            if (this.gridOptions) {\r\n                if (resData && resData.columns && resData.columns.length) {\r\n                    if (\r\n                        !this.gridOptions.columns ||\r\n                        !this.gridOptions.columns.length\r\n                    ) {\r\n                        this.columns = resData.columns;\r\n                    }\r\n                }\r\n\r\n                this.items = resData.items;\r\n                this.total = resData.total || resData.items.length;\r\n                if ( resData.searchFields ) {\r\n                    this.gridOptions.searchFields = this.getSearchColumns(resData);\r\n                }\r\n                if (resData.pageInfo) {\r\n                    if (\r\n                        resData.pageInfo.pageList &&\r\n                        (!this.pageList || !this.pageList.length)\r\n                    ) {\r\n                        this.pageList = resData.pageInfo.pageList;\r\n                    }\r\n                    this.pagination = resData.pageInfo.enablePager;\r\n                    this.pageIndex = resData.pageInfo.pageIndex;\r\n                    this.pageSize = resData.pageInfo.pageSize;\r\n                } else {\r\n                    this.pagination = false;\r\n                }\r\n            } else {\r\n                this.gridOptions = resData as LookupGridOptions;\r\n            }\r\n        }\r\n\r\n        this.updateDataTable(this.gridOptions);\r\n    }\r\n\r\n    private updateDataTable(opts: any) {\r\n        if (opts) {\r\n            const dt = this.componentRef.instance as DataTableComponent;\r\n\r\n            if (!dt.columns || dt.columns.length === 0) {\r\n                dt.columns = this.gridOptions.columns;\r\n            }\r\n\r\n            dt.allColumnsTitle = this.allColumnsTitle;\r\n            dt.searchFields = opts.searchFields;\r\n            dt.pagination = opts.pagination;\r\n            dt.pageList = this.pageList;\r\n            dt.remoteSort = this.remoteSort;\r\n\r\n            if (this.loadDataWhenOpen) {\r\n                dt.loadData({\r\n                    pageSize: opts.pageSize,\r\n                    pageIndex: this.gridOptions.pageIndex,\r\n                    total: this.gridOptions.total,\r\n                    data: this.gridOptions.items,\r\n                });\r\n                dt.cd.markForCheck();\r\n            }\r\n            this.loadSuccess.emit();\r\n        }\r\n    }\r\n\r\n    private setTreeInfo(resData) {\r\n        if (!resData) {\r\n            return;\r\n        }\r\n\r\n        let _treeInfo = null;\r\n        if (resData.treeInfo) {\r\n            const onlySelectLeaf = resData.treeInfo.onlySelectLeaf;\r\n            let _osl: ONLY_SELECT_LEAF = \"no\";\r\n            if (onlySelectLeaf !== undefined) {\r\n                _osl = onlySelectLeaf ? \"yes\" : \"no\";\r\n            }\r\n            _treeInfo = { ...resData.treeInfo, onlySelectLeaf: _osl };\r\n        }\r\n\r\n        if (this.gridOptions.treeInfo) {\r\n            const treeInfo = this.gridOptions.treeInfo;\r\n            if (treeInfo) {\r\n                if (\r\n                    treeInfo.onlySelectLeaf === undefined ||\r\n                    treeInfo.onlySelectLeaf === null\r\n                ) {\r\n                    treeInfo.onlySelectLeaf = \"no\";\r\n                }\r\n\r\n                if (typeof treeInfo.onlySelectLeaf === \"boolean\") {\r\n                    treeInfo.onlySelectLeaf = treeInfo.onlySelectLeaf ? \"yes\" : \"no\";\r\n                }\r\n\r\n                // 20210902\r\n                if (this.loadTreeDataType === \"default\") {\r\n                    treeInfo.loadDataType = _treeInfo.loadDataType;\r\n                } else {\r\n                    treeInfo.loadDataType =\r\n                        this.loadTreeDataType === \"loadall\" ? \"all\" : \"async\";\r\n                }\r\n\r\n                if (treeInfo.onlySelectLeaf !== \"default\") {\r\n                    _treeInfo = Object.assign(_treeInfo, treeInfo);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.treeInfo = _treeInfo;\r\n    }\r\n\r\n    private loadTreeTableData(resData?: LookupGridResult, rebindEvent = true) {\r\n        const items = resData ? resData.items : this.gridOptions.items;\r\n        this.items = items;\r\n\r\n        if (resData) {\r\n            this.setTreeInfo(resData);\r\n\r\n            const treeInfo = this.gridOptions.treeInfo;\r\n            if (!treeInfo[\"treeDataIsInit\"]) {\r\n                if (treeInfo.layerType.toLowerCase() === \"pathcode\") {\r\n                    this.items = this.lookupUtils.makeTree(\r\n                        this.items,\r\n                        treeInfo\r\n                    );\r\n                } else {\r\n                    this.items = this.lookupUtils.makeTreeWithParentID(\r\n                        this.items,\r\n                        \"\",\r\n                        treeInfo.dataField ? `${treeInfo.dataField}.${treeInfo.parentField}`: treeInfo.parentField,\r\n                        this.idField\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.componentRef.instance instanceof TreeTableComponent) {\r\n            const tt = this.componentRef.instance as TreeTableComponent;\r\n            if (this.treeInfo) {\r\n                tt.loadDataType = this.treeInfo.loadDataType;\r\n            }\r\n\r\n            if (!this.columns || !this.columns.length) {\r\n                tt.columns = resData.columns || [];\r\n                this.gridOptions.columns = tt.columns;\r\n            }\r\n\r\n            const isLoadAllTreeData = () => {\r\n                if (this.loadTreeDataType === \"default\") {\r\n                    return tt.loadDataType === \"all\";\r\n                } else {\r\n                    return this.loadTreeDataType === \"loadall\";\r\n                }\r\n            };\r\n\r\n            if (rebindEvent) {\r\n                this.ttEventMgr.bindTreetableEvent();\r\n            }\r\n            const isLoadAll = isLoadAllTreeData();\r\n\r\n            /** å®æ´æ èç¹æ£æ¥ By Lucas 20200302 */\r\n            \r\n            this.items = this.checkNodeCanBeSelect(this.items, isLoadAll);\r\n            tt.keepSelect = true;\r\n\r\n            if (this.useFavorite) {\r\n                this.favHelper.updateFavoritesStatus(this.items);\r\n            }\r\n\r\n            if (this.loadDataWhenOpen) {\r\n                tt.loadData(this.items);\r\n            }\r\n            tt.resize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å¨æå®æ´æ ä¸­ï¼æé¨åèç¹å ä¸ºæ¡ä»¶è¢«è¿æ»¤ï¼ä¸ºæ¾ç¤ºå®æ´æ ï¼\r\n     * è¿äºèç¹å¨è¿è¡æ¶æ¯ä¸åè®¸è¢«éä¸­ç, è¿åæ°çèç¹æ°ç»\r\n     * By Lucas 20200302\r\n     */\r\n    checkNodeCanBeSelect(nodes, isAllTreeData = false): TreeNode[] {\r\n        if (nodes && nodes.length) {\r\n            return nodes.map((node: TreeNode) => {\r\n                if (node.hasOwnProperty(\"addtional\")) {\r\n                    node.selectable = !node[\"addtional\"];\r\n                }\r\n\r\n                if (node.children && node.children.length) {\r\n                    this.checkNodeCanBeSelect(node.children, isAllTreeData);\r\n                } else {\r\n                    if (isAllTreeData && (!this._searchState || !this._searchState.value)) {\r\n                        node.leaf = true;\r\n                    }\r\n                }\r\n\r\n                return node;\r\n            });\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    onChanges(val) {\r\n        if (!val) {\r\n            this.onClear();\r\n        } else {\r\n            this.displayText = val;\r\n            this.isTextChange = this.originalText !== this.displayText;\r\n            if (this.nosearch) {\r\n                this.setModelValue(val);\r\n                this.clearMappings.emit({ instance: this, value: val, });\r\n            }\r\n\r\n            this.onModelTouched(val);\r\n            this.valueChanged.emit(val);\r\n            this.textChanged.emit(val);\r\n        }\r\n    }\r\n\r\n\r\n    onClear(emit = true) {\r\n        this.isTextChange = false;\r\n        this.displayText = \"\";\r\n        this.displayValue = \"\";\r\n        this.originalText = \"\";\r\n        this.extendInfo = \"\";\r\n        this.setModelValue(\"\");\r\n        if (this.mappingFn) {\r\n            this.mappingFn(null, this.mapFields);\r\n        } else {\r\n            if (this.mapFields) {\r\n                const bindingData = this.selectionMgr.getBindingData();\r\n                if (bindingData) {\r\n                    this.defaultMapping.lookupFieldMap(\r\n                        null,\r\n                        this.mapFields,\r\n                        bindingData\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        this.multiSelMgr.clear();\r\n        if (emit) {\r\n            this.clear.emit();\r\n        }\r\n    }\r\n\r\n    clearValue(emit = true) {\r\n        this.onClear(emit);\r\n    }\r\n\r\n    selectItem(rowData?: any) {\r\n        let selectedRow = null;\r\n        if (rowData) {\r\n            selectedRow = rowData;\r\n        } else {\r\n            selectedRow = this.selections;\r\n\r\n            if (!selectedRow) {\r\n                selectedRow = null;\r\n            } else {\r\n                if (Array.isArray(selectedRow) && !selectedRow.length) {\r\n                    selectedRow = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._searchState = { \r\n            field: '*',\r\n            value: ''\r\n        }\r\n\r\n        // å¦æå®ä¹èªå®ä¹å¤çç¡®å®äºä»¶ï¼åç±èªå®ä¹äºä»¶å¤çåé¢çé»è¾\r\n        if (this.okHandler) {\r\n            this.okHandler({ data: selectedRow, instance: this });\r\n        } else {\r\n            if (this.beforeSelectData) {\r\n                const bsdResult = this.beforeSelectData({\r\n                    instance: this,\r\n                    data: selectedRow,\r\n                });\r\n                if (bsdResult && bsdResult.subscribe) {\r\n                    bsdResult.subscribe((e: any) => {\r\n                        this._beforeSelectDataCallBack(e, selectedRow);\r\n                    });\r\n                } else {\r\n                    this.writeConsole('å¸®å©æ°æ®éä¸­åäºä»¶æªè¿åå¼æè¿åç±»åéObservable, è¯·æ£æ¥', 'error');\r\n                }\r\n            } else {\r\n                this._beforeSelectDataCallBack(true, selectedRow);\r\n            }\r\n        }\r\n    }\r\n\r\n    getPathCode(data, treeInfo = null) {\r\n       return this.lookupUtils.getPathCode(data, treeInfo || this.treeInfo);\r\n    }\r\n    getLayerData(data, treeInfo = null) {\r\n        return this.lookupUtils.getLayerData(data, treeInfo || this.treeInfo);\r\n    }\r\n\r\n\r\n    private getParentPathCode(rows) {\r\n        const maxBy = (arr, fn) =>\r\n            Math.max(\r\n                ...arr.map(typeof fn === \"function\" ? fn : (val) => val[fn])\r\n            );\r\n\r\n        // const { dataField, pathField, layerField } = this.treeInfo;\r\n        const maxLayer = maxBy(rows, (x) => this.getLayerData(x));\r\n\r\n        for (let i = 1; i <= maxLayer; i++) {\r\n            const _rows = rows.filter((n) => this.getLayerData(n) === i);\r\n            if (_rows && _rows.length && _rows.length < rows.length) {\r\n                _rows.forEach((r) => {\r\n                    const patchCode = this.getPathCode(r);\r\n                    const _rows2 = rows.filter(\r\n                        (n) => {\r\n                            var _pc = this.getPathCode(n);\r\n                            return _pc !== patchCode && _pc.indexOf(patchCode) === 0;\r\n                        }\r\n                    );\r\n                    if (_rows2 && _rows2.length) {\r\n                        rows = rows.filter(\r\n                            (n) => this.getPathCode(n) !== patchCode\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return rows;\r\n    }\r\n\r\n    private _beforeSelectDataCallBack(e, selectedRow) {\r\n        let canSelect = e;\r\n        let message = \"\";\r\n        if (typeof e === \"boolean\") {\r\n            canSelect = e;\r\n        } else {\r\n            if (typeof e === \"object\") {\r\n                canSelect = e.canSelect;\r\n                message = e.message;\r\n            } else {\r\n                canSelect = false;\r\n            }\r\n        }\r\n\r\n        if (!selectedRow) {\r\n            message = this.mustChoosAdatarow;\r\n            canSelect = false;\r\n        }\r\n\r\n        if (canSelect) {\r\n            let selectedRows$ = of(selectedRow);\r\n            // å¤é æ å¸®å© å¼æ­¥å è½½ åçº§ç  å¼å¯åæ­¥éæ© æåå«ä¸çº§\r\n            if (!this.singleSelect && this.enableCascade && this.isTree() ) {\r\n                if (this.treeInfo.loadDataType !== \"all\" && this.treeInfo.layerType === \"pathcode\" && this.isGetAllChidlNodes) {\r\n                    let parentsIds = this.getParentPathCode(selectedRow);\r\n                    if (parentsIds && parentsIds.length) {\r\n                        parentsIds = parentsIds.map(\r\n                            (n) => this.getPathCode(n)\r\n                        );\r\n                        this.showLoading();\r\n                        selectedRows$ = this.httpMgr\r\n                            .getData({ parentsIds }, \"allChildren\")\r\n                            .pipe(\r\n                                map((r: LookupGridResult) => {\r\n                                    const items = r.items\r\n                                        ? r.items.map((d) => d.data)\r\n                                        : [];\r\n                                    const allitems = [...selectedRow, ...items];\r\n                                    let ids = allitems.map((n) => n[this.idField]);\r\n                                    ids = Array.from(new Set(ids));\r\n                                    return ids.map((n) =>\r\n                                        allitems.find((a) => a[this.idField] === n)\r\n                                    );\r\n                                })\r\n                            );\r\n                    }\r\n                }\r\n            }\r\n\r\n            selectedRows$.subscribe((rows) => {\r\n                this.closeLoading();\r\n                this.updateControlValue(rows);\r\n                if (!this.useTip || !rows) {\r\n                    return;\r\n                }\r\n                if (this.useTip) {\r\n                    this.personalConfigService.updateQueckSelected(\r\n                        rows,\r\n                        this.localService.localeId\r\n                    );\r\n                }\r\n            });\r\n        } else {\r\n            if (message) {\r\n                if (this.notifyService) {\r\n                    this.notifyService.warning(message);\r\n                } else {\r\n                    this.messagerService.warning(message, \"\", true, () => {\r\n                        this.dialog.el.nativeElement.click();\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateControlValue(selectedRow) {\r\n        if (selectedRow) {\r\n            this.setDisplayText(selectedRow);\r\n            if (this.mappingFn) {\r\n                this.mappingFn(selectedRow, this.mapFields, this.bindingData);\r\n            } else {\r\n                if (this.mapFields && this.bindingData) {\r\n                    this.defaultMapping.lookupFieldMap(\r\n                        selectedRow,\r\n                        this.mapFields,\r\n                        this.bindingData\r\n                    );\r\n                }\r\n            }\r\n            this.setModelValue(this.displayText);\r\n            if (this[\"inDatagrid\"] && selectedRow) {\r\n                const selectItems = Array.isArray(selectedRow)\r\n                    ? selectedRow\r\n                    : [selectedRow];\r\n                this.updateBindData(selectItems);\r\n            }\r\n            this.selectedData.emit(selectedRow);\r\n            this.runDictPickedEvent(selectedRow);\r\n            this.isTextChange = false;\r\n        } else {\r\n            if (document.activeElement) {\r\n                (document.activeElement as HTMLButtonElement).blur();\r\n            }\r\n            this.messagerService.warning(this.mustChoosAdatarow);\r\n        }\r\n    }\r\n\r\n    private updateBindData(selectedRow) {\r\n        if (!this.mapFields) {\r\n            return;\r\n        }\r\n\r\n        const helpFields = Object.keys(this.mapFields);\r\n        if (\r\n            this.ngControl &&\r\n            this.ngControl.formDirective &&\r\n            this.ngControl.formDirective.form &&\r\n            this.ngControl.formDirective.form.bindingData\r\n        ) {\r\n            const bindingData = this.ngControl.formDirective.form.bindingData;\r\n\r\n            if (bindingData) {\r\n                helpFields.forEach((helpField: any) => {\r\n                    this.mapFields[helpField]\r\n                        .split(\",\")\r\n                        .forEach((formField: any) => {\r\n                            const val = selectedRow\r\n                                .map((r) => {\r\n                                    return this.utils.getValue(helpField, r);\r\n                                })\r\n                                .join(this.multipleChoiceSeparator);\r\n                            this.utils.setValue(bindingData, formField, val);\r\n                        });\r\n                });\r\n            }\r\n\r\n            // if (bindingData.setValue) {\r\n            //     const bindingPath = this.ngControl.formDirective.form.bindingPath;\r\n            //     let pathArr: string[] = [];\r\n            //     if (bindingPath) {\r\n            //         pathArr = bindingPath.split('/').filter(n => n !== '');\r\n            //     }\r\n\r\n            //     helpFields.forEach((helpField: any) => {\r\n            //         this.mapFields[helpField].split(',').forEach((formField: any) => {\r\n            //             const fieldPaths = pathArr.concat(formField.split('.'));\r\n            //             const val = selectedRow.map(r => {\r\n            //                 return this.utils.getValue(formField, r);\r\n            //             }).join(this.multipleChoiceSeparator);\r\n            //             bindingData.setValue(pathArr.concat(fieldPaths), val, true, true);\r\n            //         });\r\n            //     });\r\n            // }\r\n        } else {\r\n            // if (this.bindingData) {\r\n            //     helpFields.forEach((helpField: any) => {\r\n            //         this.mapFields[helpField].split(',').forEach((formField: any) => {\r\n            //             const val = selectedRow.map(r => {\r\n            //                 return this.utils.getValue(formField, r);\r\n            //             }).join(this.multipleChoiceSeparator);\r\n            //             this.utils.setValue(this.bindingData, formField, val);\r\n            //         });\r\n            //     });\r\n            // }\r\n        }\r\n    }\r\n\r\n    private getExtendInfoFields(isHelpData = true) {\r\n        if (!this.extInfoFields) {\r\n            this.writeConsole(`æªè®¾ç½®æ©å±å­æ®µã`);\r\n            return [];\r\n        }\r\n        const tipFieldArr = this.extInfoFields.split(\",\");\r\n\r\n        if (isHelpData) {\r\n            let extendInfoFields = [];\r\n            extendInfoFields = tipFieldArr.map((tf) => {\r\n                const mapKey = Object.keys(this.mapFields).find((k) => {\r\n                    return this.mapFields[k] === tf;\r\n                });\r\n\r\n                if (mapKey) {\r\n                    return mapKey;\r\n                } else {\r\n                    this.writeConsole(`å¨å¸®å©æ å°å­æ®µä¸­æªæ¾å°${tf}`);\r\n                    return \"\";\r\n                }\r\n            });\r\n            return extendInfoFields;\r\n        }\r\n\r\n        return tipFieldArr;\r\n    }\r\n\r\n    onUpdateExtendInfo() {\r\n        const jsonData = this.selectionMgr.getBindingData();\r\n        this.updateExtendInfo(jsonData, false);\r\n    }\r\n\r\n    // éä¸­å¸®å©æ°æ®åï¼æ´æ°æ©å±ä¿¡æ¯\r\n    private updateExtendInfo(data: any, isHelpData = true) {\r\n        if (data) {\r\n            if (this.extInfoFormatter) {\r\n                if (Array.isArray(data)) {\r\n                    const tipString = data.map((n) => {\r\n                        return this.getExtendInfoText(n);\r\n                    });\r\n                    this.extendInfo = tipString.join(\"ï¼\");\r\n                } else {\r\n                    this.extendInfo = this.getExtendInfoText(data);\r\n                }\r\n            } else {\r\n                const extendInfoFields = this.getExtendInfoFields(isHelpData);\r\n                if (extendInfoFields && extendInfoFields.length) {\r\n                    if (Array.isArray(data)) {\r\n                        const tipString = data.map((n) => {\r\n                            return this.getExtendInfoText(n, extendInfoFields);\r\n                        });\r\n                        this.extendInfo = tipString.join(\"ï¼\");\r\n                    } else {\r\n                        this.extendInfo = this.getExtendInfoText(\r\n                            data,\r\n                            extendInfoFields\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getExtendInfoText(itemData, fields = null) {\r\n        if (typeof this.extInfoFormatter === \"function\") {\r\n            return this.extInfoFormatter({\r\n                bindingData: itemData,\r\n                instance: this,\r\n            });\r\n        } else {\r\n            const tipString = [];\r\n            const tipValues = fields.map((t) => {\r\n                const tfv = this.utils.getValue(t, itemData);\r\n                tipString.push(tfv);\r\n                return { [t]: tfv };\r\n            });\r\n            return tipString.join(\" \");\r\n        }\r\n    }\r\n\r\n    private getDisplayText(rows: any) {\r\n        const df = this.displayFields\r\n            ? this.displayFields.split(\",\")\r\n            : [this.textField];\r\n        const txtArr = rows.map((r) => {\r\n            const t = [];\r\n            df.forEach((n) => {\r\n                t.push(this.utils.getValue(n, r));\r\n            });\r\n            return t.join(this.displayTextSeparator);\r\n        });\r\n\r\n        if (this.gridOptions.singleSelect) {\r\n            return txtArr.join(\"\");\r\n        } else {\r\n            if (this.displayFields) {\r\n                return txtArr.map((t) => \"[\" + t + \"]\").join(\",\");\r\n            } else {\r\n                return txtArr.join(\",\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private setDisplayText(selectedRow: any) {\r\n        this.originalText = this.displayText;\r\n\r\n        if (this.gridOptions.singleSelect) {\r\n            if (this.displayFormatter) {\r\n                this.displayText = this.utils.getValue(\r\n                    this.textField,\r\n                    selectedRow\r\n                );\r\n                if (!this.isTree()) {\r\n                    this.displayText = this.displayFormatter(\r\n                        this.displayText,\r\n                        [selectedRow],\r\n                        {\r\n                            lookup: this,\r\n                            datatable: this.componentRef\r\n                                .instance as DataTableComponent,\r\n                        }\r\n                    );\r\n                } else {\r\n                    const tt = this.componentRef.instance as TreeTableComponent;\r\n                    this.displayText = this.displayFormatter(\r\n                        this.displayText,\r\n                        [selectedRow],\r\n                        { lookup: this, tree: tt }\r\n                    );\r\n                }\r\n            } else {\r\n                this.displayText = this.getDisplayText([selectedRow]);\r\n            }\r\n            this.displayValue = selectedRow[this.valueField || this.idField];\r\n        } else {\r\n            if (selectedRow.length) {\r\n                if (this.displayFormatter) {\r\n                    this.displayText = selectedRow\r\n                        .map((r) => {\r\n                            return this.utils.getValue(this.textField, r);\r\n                        })\r\n                        .join(this.multipleChoiceSeparator);\r\n                    if (!this.isTree()) {\r\n                        this.displayText = this.displayFormatter(\r\n                            this.displayText,\r\n                            selectedRow,\r\n                            {\r\n                                lookup: this,\r\n                                datatable: this.componentRef\r\n                                    .instance as DataTableComponent,\r\n                            }\r\n                        );\r\n                    } else {\r\n                        const tt = this.componentRef\r\n                            .instance as TreeTableComponent;\r\n                        this.displayText = this.displayFormatter(\r\n                            this.displayText,\r\n                            selectedRow,\r\n                            { lookup: this, tree: tt }\r\n                        );\r\n                    }\r\n                } else {\r\n                    this.displayText = this.getDisplayText(selectedRow);\r\n                }\r\n\r\n                this.displayValue = selectedRow\r\n                    .map((r) => {\r\n                        return this.utils.getValue(this.valueField || this.idField, r);\r\n                    })\r\n                    .join(this.multipleChoiceSeparator);\r\n            }\r\n        }\r\n        this.originalText = this.displayText;\r\n    }\r\n\r\n    runDictPickedEvent(rowData: any) {\r\n        if (this.dictPicked) {\r\n            if (this.okButton) {\r\n                this.okButton.nativeElement.disabled = true;\r\n            }\r\n            this.dictPickedSubscription = this.dictPicked(rowData).subscribe(\r\n                (v: any) => {\r\n                    if (this.okButton) {\r\n                        this.okButton.nativeElement.disabled = false;\r\n                    }\r\n                    if (typeof v === \"boolean\") {\r\n                        if (v) {\r\n                            this.closeDialog(rowData);\r\n                        }\r\n                    } else if (\r\n                        typeof v === \"object\" &&\r\n                        v.closeDialog !== undefined &&\r\n                        !v.closeDialog\r\n                    ) {\r\n                        if (v.message) {\r\n                            this.messagerService.warning(v.message);\r\n                        } else {\r\n                            this.closeDialog(rowData);\r\n                        }\r\n                    } else {\r\n                        this.closeDialog(rowData);\r\n                    }\r\n                }\r\n            );\r\n        } else {\r\n            this.closeDialog(rowData);\r\n        }\r\n    }\r\n\r\n    private focusToInput(): void {\r\n        this.zone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                if (this.inputGroup && this.inputGroup.textbox) {\r\n                    this.inputGroup.textbox.nativeElement.focus();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    closeDialog(rowData = null) {\r\n        if (this.dialog) {\r\n            this.dialog.close();\r\n        }\r\n        \r\n        if (rowData) {\r\n            this.multiSelMgr.save(rowData);\r\n        }\r\n        \r\n        // this.isShow = false;\r\n        this.focusToInput();\r\n    }\r\n\r\n    cancelSelect() {\r\n        this.closeDialog();\r\n        this.isTextChange = false;\r\n        if (!this.nosearch) {\r\n            this.displayText = this.originalText;\r\n            this.setModelValue(this.displayText);\r\n        }\r\n\r\n        if (this.cancelHandler) {\r\n            this.cancelHandler(this);\r\n        }\r\n    }\r\n\r\n    setModelValue(v) {\r\n        if (this.onModelChange) {\r\n            this.onModelChange(v);\r\n            this.valueChanged.emit(v);\r\n        }\r\n    }\r\n\r\n    // æ°æ®åè¡¨ï¼æ¶èï¼ å·²éæ°æ® tab é¡µåæ¢\r\n    onTabChange(e: any) {\r\n        this.activeTab = e.tabIndex;\r\n        this.personalConf.tabIndex = this.activeTab;\r\n        const _firstChange = this.isTabChanged;\r\n        this.isTabChanged = true;\r\n        this.personalConfigService.updatePersonalConfig({\r\n            tabIndex: e.tabIndex,\r\n        });\r\n\r\n        if (this.activeTab === \"datalist\") {\r\n            if (this.isDoublleList() && !this.leftComponentRef) {\r\n                if (this.navigationOptions) {\r\n                    this.lookupCmpMgr.createLeftComponent(\r\n                        this.navigationOptions\r\n                    );\r\n                } else {\r\n                    this.initData();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (!this.items || !this.items.length) {\r\n                this.initData();\r\n            } else {\r\n                if (!_firstChange) {\r\n                    if (this.isTree()) {\r\n                        this.loadTreeTableData();\r\n                    } else {\r\n                        this.loadDataTableData();\r\n                        this.dtEventMgr.bindDataTableEvent();\r\n                    }\r\n                }\r\n                // this.selectionMgr.selectCurrentValue();\r\n            }\r\n            this.showGetAllChildrenCheckbox();\r\n        } else {\r\n            if (this.activeTab === \"favorite\") {\r\n                if (this.isTree()) {\r\n                    this.initData();\r\n                } else {\r\n                    if (\r\n                        !this.favoriteItems ||\r\n                        !this.favoriteItems.length ||\r\n                        this.favoriteItems.length !== this.favHelper.getFavoritIds().length\r\n                    ) {\r\n                        this.initData();\r\n                    } else if (!_firstChange) {\r\n                        this.favHelper._loadFavoriteData(this.favoriteItems);\r\n                        // this.selectionMgr.selectCurrentValue();\r\n                    }\r\n                    //  else {\r\n                    //     this.selectionMgr.selectCurrentValue();\r\n                    // }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.changeDetector.detectChanges();\r\n        setTimeout(() => {\r\n            this.resizeCmp();\r\n            if (this.isTree()) {\r\n                const y = this.componentRef.instance.state.scrollY;\r\n                this.componentRef.instance.scrollToY(y, 0);\r\n\r\n                if (this.enableCascade) {\r\n                    this.ttEventMgr.cascadeValueChanged(this.cascadeStatus);\r\n                }\r\n            }\r\n            this.selectionMgr.selectCurrentValue();\r\n        });\r\n    }\r\n\r\n    //#region  Tag View ----------------------------------------------------------------------\r\n    private registerMouseEventForTagView() {\r\n        if (this.enableClear) {\r\n            this.tagbox.nativeElement.addEventListener(\r\n                \"mouseenter\",\r\n                this.onTagboxMouseEnter.bind(this)\r\n            );\r\n            this.tagbox.nativeElement.addEventListener(\r\n                \"mouseleave\",\r\n                this.onTagboxMouseLeave.bind(this)\r\n            );\r\n        }\r\n    }\r\n\r\n    private toggleClearIcon(event: any, isShow = false) {\r\n        const str = isShow ? \"\" : \"none\";\r\n        const clearIcon = event.target.querySelector(\".input-group-clear\");\r\n        if (clearIcon) {\r\n            clearIcon.style.display = str;\r\n        }\r\n    }\r\n\r\n    private onTagboxMouseEnter(event) {\r\n        if (this.displayText && this.enableClear) {\r\n            if (!this.readonly && !this.disabled) {\r\n                this.showTagboxClearButton = true;\r\n            }\r\n        }\r\n        if (this.showTagboxClearButton) {\r\n            this.toggleClearIcon(event, true);\r\n        }\r\n    }\r\n\r\n    private onTagboxMouseLeave(event) {\r\n        this.toggleClearIcon(event);\r\n    }\r\n\r\n    onRemoveSelectItem($event, txt) {\r\n        $event.stopPropagation();\r\n        const textArray = Array.from(this.displayTextList);\r\n        const removedIndex = this.displayTextList.indexOf(txt);\r\n        textArray.splice(removedIndex, 1);\r\n        this.displayText = textArray.join(this.multipleChoiceSeparator);\r\n        this.originalText = this.displayText;\r\n        this.setModelValue(this.displayText);\r\n\r\n\r\n        if (this.displayValue) {\r\n            const vals = this.displayValue.split(this.multipleChoiceSeparator);\r\n            vals.splice(removedIndex, 1);\r\n            this.displayValue = vals.join(this.multipleChoiceSeparator);\r\n        }\r\n\r\n        if (this.mapFields) {\r\n            this.updateOtherFieldDataWhenTagremoved(removedIndex);\r\n        }\r\n\r\n        this.tagRemoved.emit({ removedIndex, instance: this });\r\n    }\r\n\r\n    private updateOtherFieldDataWhenTagremoved(removedIndex) {\r\n        const helpFields = Object.keys(this.mapFields);\r\n        const textFieldIndex = helpFields.indexOf(this.textField);\r\n\r\n        if (\r\n            this.ngControl &&\r\n            this.ngControl.formDirective &&\r\n            this.ngControl.formDirective.form &&\r\n            this.ngControl.formDirective.form.bindingData\r\n        ) {\r\n            const bindingData = this.ngControl.formDirective.form.bindingData;\r\n            if (bindingData.setValue) {\r\n                const bindingPath =\r\n                    this.ngControl.formDirective.form.bindingPath;\r\n                let pathArr: string[] = [];\r\n                if (bindingPath) {\r\n                    pathArr = bindingPath.split(\"/\").filter((n) => n !== \"\");\r\n                }\r\n\r\n                helpFields.forEach((helpField: any) => {\r\n                    this.mapFields[helpField]\r\n                        .split(\",\")\r\n                        .forEach((formField: any) => {\r\n                            const fieldPaths = pathArr.concat(\r\n                                formField.split(\".\")\r\n                            );\r\n                            const val = bindingData.getValue(fieldPaths);\r\n                            const valArr = val.split(\r\n                                this.multipleChoiceSeparator\r\n                            );\r\n                            valArr.splice(removedIndex, 1);\r\n                            const newVal = valArr.join(\r\n                                this.multipleChoiceSeparator\r\n                            );\r\n                            bindingData.setValue(\r\n                                pathArr.concat(fieldPaths),\r\n                                newVal,\r\n                                true,\r\n                                true\r\n                            );\r\n                        });\r\n                });\r\n            }\r\n        } else {\r\n            if (this.bindingData) {\r\n                if (textFieldIndex > -1) {\r\n                    helpFields.splice(textFieldIndex, 1);\r\n                }\r\n                helpFields.forEach((helpField: any) => {\r\n                    this.mapFields[helpField]\r\n                        .split(\",\")\r\n                        .forEach((formField: any) => {\r\n                            const val = this.utils.getValue(\r\n                                formField,\r\n                                this.bindingData\r\n                            );\r\n                            const valArr = val.split(\r\n                                this.multipleChoiceSeparator\r\n                            );\r\n                            valArr.splice(removedIndex, 1);\r\n                            const newVal = valArr.join(\r\n                                this.multipleChoiceSeparator\r\n                            );\r\n                            this.utils.setValue(\r\n                                this.bindingData,\r\n                                formField,\r\n                                newVal\r\n                            );\r\n                        });\r\n                });\r\n            }\r\n        }\r\n    }\r\n    //#endregion\r\n\r\n    onAllChildNodesClick($event: any) {\r\n        this.isGetAllChidlNodes = !this.isGetAllChidlNodes;\r\n    }\r\n\r\n    onIncludeSubordinatesChange(val) {\r\n        this.includeSubordinates = val;\r\n        this.includeSubordinates$.next(val);\r\n    }\r\n\r\n    onTagContainerClick($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        if (this.tagInput) {\r\n            this.tagInput.focus();\r\n            this.tagInput.textbox.nativeElement.click();\r\n        }\r\n    }\r\n\r\n    expandFirstNode(nodes): TreeNode[] {\r\n        if (nodes && nodes.length) {\r\n            return nodes.map((node: TreeNode) => {\r\n                if (node.children && node.children.length) {\r\n                    node.expanded = true;\r\n                    this.expandFirstNode(node.children);\r\n                }\r\n                return node;\r\n            });\r\n        }\r\n        return nodes;\r\n    };\r\n\r\n    // ç¨äºç»ç»ä¸ªæ§åæ°æ®key\r\n    getLookupBindingFields() {\r\n        if (this.ngControl) {\r\n            if (this.ngControl.name) {\r\n                return this.ngControl.name;\r\n            } else {\r\n                if (this.mapFields && this.mapFields.length) {\r\n                    return Object.keys(this.mapFields).map(k => {\r\n                        return this.mapFields[k];\r\n                    }).join('_');\r\n                } else {\r\n                    return this.textField;\r\n                }\r\n            }\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n}\r\n","import {\r\n    Component, OnInit, ElementRef, AfterViewInit, OnChanges,\r\n    Output, EventEmitter, ViewChild, Injector, Renderer2, Input, SimpleChanges, ViewEncapsulation\r\n} from '@angular/core';\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\nimport { PersonalConfigService } from './lookup-presonalConfig.service';\r\n\r\n@Component({\r\n    selector: 'lookup-tabs',\r\n    templateUrl: './lookup-tabs.component.html',\r\n    styleUrls: ['./lookup-tabs.component.scss'],\r\n    animations: [\r\n        trigger('flyInOut', [\r\n            transition(':enter', [style({ opacity: 0 }), animate('.3s', style({ opacity: 1 }))]),\r\n            transition(':leave', [animate('.3s', style({ opacity: 0 }))])\r\n        ])\r\n    ]\r\n})\r\nexport class LookupTabsComponent implements OnInit, OnChanges, AfterViewInit {\r\n\r\n    @Input() enableFav = false;\r\n    @Input() enableSelected = false;\r\n    @Input() selectedTotal = 0;\r\n    @Input() activeTab = 'datalist';\r\n    @Input() visible = false;\r\n\r\n    @Input() layout = 'default';\r\n    @Input() dialogTitle = '';\r\n\r\n    @Output() tabChange = new EventEmitter<any>();\r\n\r\n    @ViewChild('inkBar') inkBarRef: ElementRef;\r\n    @ViewChild('dataListNav') dataListNavRef: ElementRef;\r\n    @ViewChild('favoriteNav') favoriteNavRef: ElementRef;\r\n    @ViewChild('selectedNav') selectedNavRef: ElementRef;\r\n    @ViewChild('advanceLayout') advanceLayoutRef: ElementRef;\r\n\r\n    public personalConfigService: PersonalConfigService;\r\n\r\n    private render: Renderer2 = null;\r\n    private el: ElementRef = null;\r\n    constructor(public injector: Injector) {\r\n        this.personalConfigService = this.injector.get(PersonalConfigService, null);\r\n        this.render = this.injector.get(Renderer2);\r\n        this.el = this.injector.get(ElementRef);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.activeTab && !changes.activeTab.isFirstChange()) {\r\n            this.initInkBarPos(changes.activeTab.currentValue);\r\n            \r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => {\r\n            this.initInkBarPos(this.activeTab);\r\n        }, 300);\r\n    }\r\n\r\n    navClickHandle(e: Event, v: string) {\r\n        e.stopPropagation();\r\n        if (this.activeTab !== v) {\r\n            this.activeTab = v;\r\n            this.tabChange.emit({ event: e, tabIndex: v });\r\n            this.initInkBarPos(v);\r\n            \r\n        }\r\n    }\r\n\r\n    initInkBarPos(which: string) {\r\n\r\n        if (this.layout !== 'default') {\r\n            return;\r\n        }\r\n\r\n        if (!this.enableFav && !this.enableSelected) {\r\n            return;\r\n        }\r\n\r\n        let width = this.dataListNavRef.nativeElement.offsetWidth;\r\n        let left = 0;\r\n        if (which !== 'datalist') {\r\n            left = this.dataListNavRef.nativeElement.offsetWidth;\r\n        }\r\n        if (which === 'favorite') {\r\n            width = this.favoriteNavRef.nativeElement.offsetWidth;\r\n        } else if (which === 'selected') {\r\n            if (this.favoriteNavRef) {\r\n                left += this.favoriteNavRef.nativeElement.offsetWidth;\r\n            }\r\n\r\n            if (this.selectedNavRef) {\r\n                width = this.selectedNavRef.nativeElement.offsetWidth;\r\n            } else {\r\n                this.activeTab = 'datalist';\r\n            }\r\n        }\r\n\r\n        this.inkBarRef.nativeElement.style = `width: ${width}px; transform: translate3d(${left}px, 0px, 0px);`;\r\n    }\r\n    ngOnInit(): void {\r\n    }\r\n\r\n}\r\n","import { Directive, OnInit, AfterViewInit, Renderer2, Injector, Input} from '@angular/core';\r\nimport { InputGroupComponent } from '@farris/ui-input-group';\r\nimport { PersonalConfigService } from './lookup-presonalConfig.service';\r\nimport { delay } from 'rxjs/operators';\r\nimport { LocaleService } from '@farris/ui-locale';\r\n@Directive({\r\n    selector: '[lookup-tip]'\r\n})\r\nexport class LookupTipDirective implements OnInit, AfterViewInit {\r\n    @Input('lookup-tip') enableTip = false;\r\n    private tipPanel: Element;\r\n    private leaveEvent: any;\r\n    private enterEvent: any;\r\n    private clickEvent: any;\r\n    private isInTipPanel = false;\r\n    private selected: any[];\r\n    private personalConfigService: PersonalConfigService;\r\n    public localService: LocaleService;\r\n    private tipText = 'æ¨è¦æ¾çæ¯ä¸æ¯è¿äºï¼';\r\n    constructor(\r\n        private inputRef: InputGroupComponent,\r\n        private renderer: Renderer2,\r\n        public injector: Injector\r\n    ) {\r\n        this.personalConfigService = this.injector.get(PersonalConfigService, null);\r\n        this.localService = this.injector.get(LocaleService);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.tipText = this.localService.getValue('lookup.tipText');\r\n        this.enableTip = false; // å æ°æ®æéé®é¢ï¼æ­¤åè½æå±è½ tfs: 403924\r\n        if (this.enableTip) {\r\n            this.inputRef.iconMouseEnter.subscribe(e => {\r\n                this.creatPanel();\r\n            });\r\n            this.inputRef.iconMouseLeave.pipe(delay(200)).subscribe(e => {\r\n                if (!this.isInTipPanel) {\r\n                    this.removePanel();\r\n                }\r\n            });\r\n            this.inputRef.clickHandle.subscribe(e => {\r\n                this.removePanel();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void { }\r\n\r\n    // è·åå¿«æ·è¾å¥æ°æ®\r\n    private getQuickSelectedByLocaleId() {\r\n        const localeid = this.localService.localeId;\r\n        const personalConf = this.personalConfigService.getPersonalData();\r\n        if (personalConf && personalConf.quickSelected) {\r\n            const items = personalConf.quickSelected[localeid];\r\n            if (items && items.length) {\r\n                return items;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    creatPanel() {\r\n        this.selected = this.getQuickSelectedByLocaleId();\r\n        if (this.tipPanel || !this.selected || (this.selected && this.selected.length === 0)) {\r\n            return;\r\n        }\r\n        const pos = this.setPosition();\r\n        const ul = this.renderer.createElement('ul');\r\n        const path = this.personalConfigService.textField.split('.');\r\n        this.selected.forEach((item, index) => {\r\n            const li = this.renderer.createElement('li');\r\n            li.innerHTML = this.find(item, this.personalConfigService.textField);\r\n            this.renderer.setProperty(li, 'id', index);\r\n            this.renderer.appendChild(ul, li);\r\n        });\r\n        const header = this.renderer.createElement('div');\r\n        this.renderer.addClass(header, 'lookup-tip-header');\r\n        header.innerHTML = this.tipText;\r\n        this.tipPanel = this.renderer.createElement('div');\r\n        this.renderer.appendChild(this.tipPanel, header);\r\n        this.renderer.appendChild(this.tipPanel, ul);\r\n        this.renderer.addClass(this.tipPanel, 'lookup-tip');\r\n        this.renderer.setStyle(this.tipPanel, 'top', pos.top);\r\n        this.renderer.setStyle(this.tipPanel, 'left', pos.left);\r\n        this.renderer.setStyle(this.tipPanel, 'width', pos.width);\r\n        this.renderer.appendChild(document.body, this.tipPanel);\r\n        this.leaveEvent = this.renderer.listen(this.tipPanel, 'mouseleave', () => {\r\n            this.removePanel();\r\n        });\r\n        this.enterEvent = this.renderer.listen(this.tipPanel, 'mouseenter', () => {\r\n            this.isInTipPanel = true;\r\n        });\r\n        this.clickEvent = this.renderer.listen(this.tipPanel, 'click', (e) => {\r\n            if (e.target.nodeName === 'LI') {\r\n                this.selectItem(e.target.id);\r\n            }\r\n        });\r\n    }\r\n\r\n    removePanel() {\r\n        if (document.body.contains(this.tipPanel)) {\r\n            this.renderer.removeChild(document.body, this.tipPanel);\r\n            this.tipPanel = null;\r\n            this.isInTipPanel = false;\r\n            this.leaveEvent();\r\n            this.enterEvent();\r\n            this.clickEvent();\r\n        }\r\n    }\r\n\r\n    setPosition() {\r\n        const { left, top, width, height } = this.inputRef.inputGroup.nativeElement.getBoundingClientRect();\r\n        return {\r\n            left: left + 'px',\r\n            top: top + height + 'px',\r\n            width: width + 'px'\r\n        };\r\n    }\r\n\r\n    selectItem(val) {\r\n        const item = this.selected.find((el, index) => Number(val) === index);\r\n        this.removePanel();\r\n        if (this.personalConfigService.singleSelect) {\r\n            this.personalConfigService.selectItemObser$.next(item);\r\n        } else {\r\n            this.personalConfigService.selectItemObser$.next([item]);\r\n        }\r\n    }\r\n\r\n    find(obj, keys) {\r\n        const keyArr = keys.split('.');\r\n        const key = keyArr[0];\r\n        const target = obj[key];\r\n        if (target instanceof Object) {\r\n            keyArr.shift();\r\n            return this.find(target, keyArr.join('.'));\r\n        } else {\r\n            return target;\r\n        }\r\n    }\r\n}\r\n","import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener, Injector, Input, OnInit, Output, ViewChild } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'lookup-quick-select-panel',\r\n    templateUrl: './quick-select-panel.component.html'\r\n})\r\n\r\nexport class LookupQuickSelectPanelComponent implements OnInit {\r\n\r\n    @Input() showMore = true;\r\n    @Input() data: Array<any> = [];\r\n    @Input() textField: string = '';\r\n    @Input() formatter: (rowObj: any) => string;\r\n    @Input() maxItems = 10;\r\n\r\n    @Output() moreClcik = new EventEmitter();\r\n    @Output() itemClick = new EventEmitter();\r\n\r\n    @ViewChild('itemsContainer') itemsContainer: ElementRef<any>;\r\n\r\n    activeIndex = -1;\r\n\r\n    constructor(private injector: Injector, private cdr: ChangeDetectorRef) { }\r\n\r\n    @HostListener('mousedown', ['$event'])\r\n    onClick($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n    }\r\n\r\n    ngOnInit() { }\r\n\r\n    loadData(items: any) {\r\n        this.data = items;\r\n\r\n        if (!this.cdr['destroyed']) {\r\n            this.cdr.detectChanges();\r\n        }\r\n    }\r\n\r\n    onMoreClick($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        this.moreClcik.emit($event);\r\n    }\r\n\r\n    formatData(rowObj: any) {\r\n        return this.formatter(rowObj);\r\n    }\r\n\r\n    onItemClick($event, item) {\r\n        this.itemClick.emit({data: item, evnet: $event});\r\n    }\r\n\r\n    setActiveItem(index: number) {\r\n        this.activeIndex = index;\r\n        if (!this.cdr['destroyed']) {\r\n            this.cdr.detectChanges();\r\n        }\r\n    }\r\n}","import { AfterViewInit, ComponentFactoryResolver, ComponentRef, Directive, ElementRef, HostListener, Injector, Input, NgZone, OnDestroy, OnInit, Optional, Renderer2 } from '@angular/core';\r\nimport { reqAnimFrame } from '@farris/ui-common';\r\nimport { InputGroupComponent } from '@farris/ui-input-group';\r\nimport { from, fromEvent, Observable } from 'rxjs';\r\nimport { debounceTime, filter, map } from 'rxjs/operators';\r\n\r\nimport { LookupGridDisplayType, QuickSelectOption } from '../lookup-displaytype';\r\nimport { DisplayInfo, LOAD_DATA_TYPE, LookupGridResult, PickingResult } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupQuickSelectPanelComponent } from './quick-select-panel.component';\r\n\r\n@Directive({ selector: '[quick-select]'})\r\nexport class LookupQuickSelectDirective implements OnInit, AfterViewInit, OnDestroy {\r\n    @Input('quick-select') options: QuickSelectOption;\r\n    private panelElement: HTMLElement;\r\n    private cmpRef: ComponentRef<LookupQuickSelectPanelComponent>;\r\n\r\n    private data = [];\r\n\r\n    constructor(private injector: Injector, private ngzone: NgZone, private render: Renderer2, private inputRef: InputGroupComponent, private lookupRef: LookupGridComponent,\r\n        private cfr: ComponentFactoryResolver) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        \r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        if (this.options && this.options.enable) {\r\n            this.inputRef.inputClick.subscribe((e: MouseEvent) => {\r\n                e.stopPropagation();\r\n                if (!this.panelElement) {\r\n                    // æ§è¡å¸®å©å\r\n                    this.lookupRef.dictPicking({\r\n                        instance: this,\r\n                    }).subscribe((pr: PickingResult) => {\r\n                        if (this.lookupRef.displayType === LookupGridDisplayType.TreeList || (!this.lookupRef.singleSelect && this.lookupRef.viewType === 'text')) {\r\n                            return;\r\n                        }\r\n                        const { show, customData, message } = this.lookupRef.dialogMgr.checkDictPickingResult(pr);\r\n                        this.lookupRef.customData = customData;\r\n                        if (show) {\r\n                            this.createDataPanel();\r\n                        } else {\r\n                            if (message) {\r\n                                this.lookupRef.notifyService.warning(message);\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n            });\r\n\r\n            this.inputRef.valueChange.pipe(\r\n                debounceTime(200)\r\n            ).subscribe((val: string) => {\r\n                this.lookupRef.dictPicking({instance: this}).subscribe((pr: PickingResult) => {\r\n                    if (this.lookupRef.displayType === LookupGridDisplayType.TreeList || (!this.lookupRef.singleSelect && this.lookupRef.viewType === 'text')) {\r\n                        return;\r\n                    }\r\n                    const { show, customData, message } = this.lookupRef.dialogMgr.checkDictPickingResult(pr);\r\n                    this.lookupRef.customData = customData;\r\n                    if (!this.panelElement) {\r\n                        this.createDataPanel();\r\n                    } else {\r\n                        this.panelElement.style.overflow = 'hidden';\r\n                        this.setPanelPosition(false);\r\n                        this.loadData();\r\n                    }\r\n                })\r\n            });\r\n\r\n            this.inputRef.keydownHandle.pipe(\r\n                filter((event: KeyboardEvent) => {\r\n                    return event.key === 'Escape' || event.key === 'Tab' ||  event.key === 'F2';\r\n                })\r\n            ).subscribe((e) => {\r\n                this.hide(e);\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.lookupRef.overLayService.destory(this.lookupRef.el.nativeElement);\r\n    }\r\n\r\n    private removePanelElement() {\r\n        document.body.removeChild(this.panelElement);\r\n        this.panelElement = null;\r\n    }\r\n\r\n    private clearSearchValue() {\r\n        this.lookupRef._searchState = { \r\n            field: '*', //\"*\",\r\n            value: ''\r\n        }\r\n    }\r\n\r\n    hide(e?: any, isMoreClick = false) {\r\n        reqAnimFrame(() => {\r\n            if (this.panelElement) {\r\n                if (e && ( e.type === 'mousewheel' || e.type === 'wheel')) {\r\n                    this.removePanelElement();\r\n                } else {\r\n                    this.panelElement.classList.remove('f-area-show');\r\n                    setTimeout(() => {\r\n                        this.removePanelElement();\r\n                    },120);\r\n                }\r\n                \r\n                this.lookupRef.overLayService.destory(this.lookupRef.el.nativeElement);\r\n\r\n                if (isMoreClick) {\r\n                    return;       \r\n                }\r\n\r\n                if (this.lookupRef.tagInput) {\r\n                    // this.lookupRef.tagInput.value = '';\r\n                    this.inputRef.value = '';\r\n                    this.clearSearchValue();\r\n                }\r\n\r\n                if (e && (e.key === 'F2' || this.lookupRef.el.nativeElement.contains(e.target))) {\r\n                    if (this.data && this.data.length) {\r\n                        return;\r\n                    } else {\r\n                        this.clearSearchValue();\r\n                    }\r\n                }\r\n\r\n                if (!this.lookupRef.nosearch && this.lookupRef.displayText !== this.lookupRef.originalText) {\r\n                    this.lookupRef.onChanges(this.lookupRef.originalText)\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private setPanelPosition(updateTopPosition = true) {\r\n        if (this.panelElement) {\r\n            const { width, left, top, height } = this.getPanelSize();\r\n            this.panelElement.style.width = `${width}px`;\r\n            this.panelElement.style.maxHeight = `${height}px`;\r\n            if (updateTopPosition) {\r\n                this.panelElement.style.top = `${top}px`;\r\n            }\r\n            this.panelElement.style.left = `${left}px`;\r\n            this.panelElement.style.zIndex = '10001';\r\n        }\r\n    }\r\n\r\n    private createDataPanel() {\r\n        this.panelElement = document.createElement('div');\r\n        this.panelElement.classList.add('overlay-pane', 'f-lookup_quick-panel', 'f-area-hide');\r\n\r\n        document.body.appendChild(this.panelElement);\r\n        this.setPanelPosition();\r\n\r\n        this.panelElement.style.overflow = 'hidden';\r\n        // this.panelElement.style.height = 'auto';\r\n        \r\n        // åå»ºæ°æ®å±ç¤ºç»ä»¶\r\n        const cmpFact = this.cfr.resolveComponentFactory(LookupQuickSelectPanelComponent);\r\n        this.cmpRef = cmpFact.create(this.injector);\r\n        \r\n        this.cmpRef.instance.showMore = this.options.showMore;\r\n        this.cmpRef.instance.textField = this.lookupRef.textField;\r\n        this.cmpRef.instance.formatter = this.options.formatter;\r\n        this.cmpRef.instance.maxItems = this.options.showItemsCount;\r\n\r\n        // cmpRef.location.nativeElement.classList.add('farris-main-area');\r\n        this.panelElement.appendChild(this.cmpRef.location.nativeElement);\r\n\r\n        this.lookupRef.selectionMgr.initDisplayValue();\r\n        \r\n        this.cmpRef.changeDetectorRef.detectChanges();\r\n\r\n        // more clicked æå¼å¸®å©çªå£\r\n        this.cmpRef.instance.moreClcik.subscribe((e) => {\r\n            this.hide(e, true);\r\n            this.lookupRef.showDialog();\r\n        });\r\n\r\n        this.cmpRef.instance.itemClick.subscribe((e: any) => {\r\n            const { data } = e;\r\n            this.selectItem(data);\r\n        });\r\n\r\n\r\n        // æ³¨åé¼ æ æ»è½®ï¼ç¹å»äºä»¶ï¼ç¨äºéèPanel\r\n        this.lookupRef.overLayService.registerMouseEvent(this.lookupRef.el.nativeElement, (e: MouseEvent) => {\r\n            if (!this.panelElement || e.target['closest']('.f-lookup_quick-panel')) {\r\n                return;\r\n            }\r\n            \r\n            if(this.lookupRef.inputGroup && this.lookupRef.inputGroup.textbox.nativeElement === e.target) {\r\n                return false;\r\n            }\r\n\r\n            if(this.lookupRef.tagInput && this.lookupRef.tagInput.textbox.nativeElement === e.target) {\r\n                return false;\r\n            }\r\n\r\n            if (this.cmpRef) {\r\n                this.cmpRef.destroy();\r\n                this.cmpRef = null;\r\n            }\r\n\r\n            this.clearSearchValue();\r\n\r\n            this.hide(e);\r\n        });\r\n\r\n        this.panelElement.classList.add('f-area-show');\r\n\r\n        this.loadData();\r\n    }\r\n\r\n    private selectItem(data: any) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n\r\n        if (this.lookupRef.viewType === 'tag') {\r\n            const isSelect = this.lookupRef.selections.find(n => n[this.lookupRef.idField] === data[this.lookupRef.idField]);\r\n            if (!isSelect) {\r\n                const selectItems: any = [...this.lookupRef.selections, data];\r\n                this.lookupRef.selectItem(selectItems);\r\n                this.lookupRef.lookupSelectionSer.loadSelections(selectItems);\r\n            }\r\n        } else {\r\n            this.lookupRef.selectItem(data);\r\n        }\r\n        this.hide();\r\n    }\r\n\r\n\r\n    private calculationPanelHeight() {\r\n        return this.options.showItemsCount * 30 + (this.options.showMore ? 50: 0) + (this.options.footerHeight||0) + 5;\r\n    }\r\n\r\n    private getInputSizeInfo() {\r\n        const el: any = this.lookupRef.viewType === 'text' ? this.inputRef.inputGroup : this.lookupRef.tagbox;\r\n        return el.nativeElement.getBoundingClientRect();\r\n    }\r\n\r\n    private getPanelSize() {\r\n        let { width, height, top, left } = this.getInputSizeInfo();\r\n        const bottom = window.innerHeight - height - top;\r\n        let panelHeight = this.calculationPanelHeight();\r\n\r\n        const h = top > bottom ? top : bottom;\r\n        if (bottom > panelHeight) {\r\n            top = top + height;\r\n            // é¢æ¿ç±ä¸åä¸å±å¼\r\n            this.panelElement.style.transformOrigin = '100% top';\r\n        } else {\r\n            if (top > bottom) {\r\n                if (h < panelHeight) {\r\n                    panelHeight = h - 10;\r\n                    top = 10;\r\n                } else {\r\n                    top = top - parseInt('' + panelHeight, 10) - 5;\r\n                }\r\n\r\n                // é¢æ¿ç±ä¸åä¸å±å¼\r\n                this.panelElement.style.transformOrigin = '100% bottom';\r\n\r\n            } else {\r\n                if (h < panelHeight) {\r\n                    panelHeight = h - 10;\r\n                }\r\n                top = top + height;\r\n            }\r\n        }\r\n\r\n        const minWidth = this.options.minWidth || 200;\r\n        let _width =  width < minWidth? minWidth: width;\r\n        if (window.innerWidth - left < _width) {\r\n            left = left + width - _width;\r\n        }\r\n\r\n        return { width: _width, top, height: panelHeight, left };\r\n    }\r\n\r\n    private getData(): Observable<Array<any>> {\r\n        let p: any = {\r\n            pageInfo: {\r\n                pageSize: this.options.showItemsCount,\r\n                pageIndex: 1,\r\n            },\r\n        };\r\n        let t: LOAD_DATA_TYPE = \"all\";\r\n        if (this.lookupRef.isTextChange) {\r\n            this.lookupRef._searchState = { \r\n                field: this.lookupRef.textField, //\"*\",\r\n                value: this.lookupRef.displayText\r\n            }\r\n            p['search'] = this.lookupRef._searchState;\r\n            t = 'search';\r\n        } else {\r\n            this.lookupRef._searchState = null;\r\n        }\r\n\r\n        if (this.lookupRef.viewType === 'tag') {\r\n            if (this.lookupRef.tagInput.value !== '') {\r\n                this.lookupRef._searchState = { \r\n                    field: this.lookupRef.textField, //\"*\",\r\n                    value: this.lookupRef.tagInput.value\r\n                }\r\n                p['search'] = this.lookupRef._searchState;\r\n                t = 'search';\r\n            } else {\r\n                this.lookupRef._searchState = null;\r\n            }\r\n\r\n            const vals = this.lookupRef.selectionMgr.getSelectedIds();\r\n            if (vals && vals.length) {\r\n                p[\"selectedInfo\"] = {\r\n                    selected: true,\r\n                    selectedIds: vals,\r\n                };\r\n            }\r\n        }\r\n\r\n\r\n        return this.lookupRef.httpMgr.lookupRequest(p, t, true).pipe(\r\n            map((restData: LookupGridResult) => {\r\n                let _items = this.lookupRef.items || [];\r\n                if (restData) {\r\n                    if (this.lookupRef.viewType === 'tag') {\r\n                        this.lookupRef.lookupSelectionSer.loadSelections(\r\n                            restData[\"selectedData\"] || []\r\n                        );\r\n                    }\r\n\r\n                    _items = restData.items || [];\r\n                }\r\n\r\n\r\n                if (this.lookupRef.displayText && this.lookupRef.isTextChange) {\r\n                    const items = _items.filter(n => {\r\n                        return n[this.lookupRef.textField].indexOf(this.lookupRef.displayText) > -1;\r\n                    }).slice(0, this.options.showItemsCount);\r\n\r\n                    _items = items;\r\n                    \r\n                }\r\n\r\n                if (restData.displayType.toLowerCase().indexOf('treelist') > -1 && _items.length && _items[0].data) {\r\n                    return _items.map(n => n.data).slice(0, this.options.showItemsCount);\r\n                }\r\n\r\n                return _items.slice(0, this.options.showItemsCount);\r\n            })\r\n        );\r\n    }\r\n\r\n    private loadData() {\r\n        const loadingRef = this.lookupRef.loadingService.show({container: this.panelElement});\r\n        this.getData().subscribe((data: any) => {\r\n            loadingRef.close();\r\n            if (this.cmpRef && this.cmpRef.instance) {\r\n                this.cmpRef.instance.loadData(data);\r\n                if (data.length < this.options.showItemsCount) {\r\n                    // let newHeight = data.length * 30 + (this.options.showMore ? 50: 0) + (this.options.footerHeight||0) + 5;\r\n                    this.data = data;\r\n\r\n                    let newHeight = this.cmpRef.instance.itemsContainer.nativeElement.querySelector('ul').offsetHeight + 10;\r\n\r\n                    if (!data || !data.length) {\r\n                        newHeight = 55;\r\n                    }\r\n\r\n                    this.cmpRef.instance.itemsContainer.nativeElement.style.height = `${newHeight}px`;\r\n                    if (this.panelElement) {\r\n                        if (this.panelElement.style.transformOrigin.indexOf('bottom') > -1) {\r\n                            this.panelElement.style.top = `${this.getInputSizeInfo().top - newHeight - 5}px` ;\r\n                        }\r\n                        this.panelElement.style.height = 'auto';\r\n                    }\r\n                } else {\r\n                    this.setPanelPosition();\r\n                    this.cmpRef.instance.itemsContainer.nativeElement.style.height = '100%';\r\n                    if (this.panelElement) {\r\n                        this.render.removeStyle(this.panelElement, 'height');\r\n                    }\r\n                }\r\n\r\n                if ((this.lookupRef.isTextChange || (this.lookupRef.tagInput && this.lookupRef.tagInput.value !== '') ||  \r\n                    (this.lookupRef.inputGroup && this.lookupRef.inputGroup.value !== '' && this.lookupRef.isTextChange)) && data && data.length) {\r\n                    this.cmpRef.instance.setActiveItem(0);\r\n                }\r\n\r\n                this.panelElement.style.overflow = 'auto';\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    registerKeyboardEvent($event: KeyboardEvent) {\r\n\r\n        if (!this.lookupRef.singleSelect && this.lookupRef.viewType !== 'tag')  {\r\n            return;\r\n        }\r\n\r\n        let rows= [];\r\n        if (this.cmpRef) {\r\n            rows = this.cmpRef.instance.data;\r\n        }\r\n\r\n        if (!rows || !rows.length) {\r\n            return;\r\n        }\r\n\r\n        if ($event.code === 'ArrowUp' || $event.code === 'ArrowDown') {\r\n            $event.preventDefault();\r\n            $event.stopPropagation();\r\n        }\r\n\r\n\r\n        if ($event.code === 'Backspace' && this.lookupRef.viewType === 'tag' &&\r\n            this.lookupRef.selections && this.lookupRef.selections.length &&\r\n            this.lookupRef.tagInput && !this.lookupRef.tagInput.value && this.lookupRef.quickSelect.enableBackspace) {\r\n            $event.preventDefault();\r\n            $event.stopPropagation();\r\n            const newdata = this.lookupRef.selections.slice(0, this.lookupRef.selections.length - 1);\r\n            if (!newdata || !newdata.length) {\r\n                this.lookupRef.clearValue(true);\r\n            } else {\r\n                this.lookupRef.selectItem(newdata);\r\n            }\r\n            this.lookupRef.lookupSelectionSer.loadSelections(newdata);\r\n            this.setPanelPosition();\r\n            return;\r\n        }\r\n\r\n\r\n        const idx = this.cmpRef.instance.activeIndex;\r\n        let activeIndex = idx;\r\n\r\n        const setActiveItem = (index) => {\r\n            activeIndex = index;\r\n            this.cmpRef.instance.setActiveItem(index);\r\n        };\r\n\r\n        if ($event.code === 'ArrowUp') {  // up\r\n            if (idx > -1) {\r\n                let prevIdx = idx - 1;\r\n                if (prevIdx < 0) {\r\n                    prevIdx = rows.length - 1;\r\n                }\r\n                setActiveItem(prevIdx);\r\n            } else {\r\n                setActiveItem(rows.length - 1);\r\n            }\r\n        }\r\n        if ($event.code === 'ArrowDown') { // down\r\n            let nextIdx = idx + 1;\r\n            if (nextIdx >= rows.length) {\r\n                nextIdx = 0;\r\n            }\r\n\r\n            setActiveItem(nextIdx);\r\n        }\r\n\r\n        if($event.key === 'Enter') {\r\n            if (rows && rows.length && this.panelElement) {\r\n                const data = rows[idx];\r\n                this.selectItem(data);\r\n            } else {\r\n                this.inputRef.inputClick.emit($event);\r\n            }\r\n        }\r\n    }\r\n}","import { EventEmitter, AfterViewInit, Component, ElementRef, Injector, Input, NgZone, OnChanges, OnDestroy, OnInit, Output, Renderer2, SimpleChanges, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { DialogComponent } from '@farris/ui-dialog';\r\n\r\n@Component({\r\n    selector: 'lookup-advanced-layout',\r\n    templateUrl: 'lookup-advanced-layout.component.html',\r\n    styleUrls: ['./advanced-layout.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\n\r\nexport class LookupAdvancedLayoutComponent implements OnInit, OnDestroy, OnChanges, AfterViewInit {\r\n\r\n    @Input() title = 'å¸®å©éæ©å¨'\r\n    @Input() activeTab = 'datalist';\r\n    @Input() enableFav: boolean;\r\n\r\n    @Output() tabChanged = new EventEmitter();\r\n    @Output() close = new EventEmitter();\r\n\r\n    @ViewChild('header') headerRel: ElementRef;\r\n    @ViewChild('activetab') activetabRef:ElementRef;\r\n\r\n    dialogRef: DialogComponent;\r\n    constructor(public elRef: ElementRef, private injector: Injector, private zone: NgZone, private render2: Renderer2) {\r\n        this.dialogRef = this.injector.get(DialogComponent, null);\r\n    }\r\n\r\n    ngOnInit() {\r\n        \r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        \r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.activeTab && !changes.activeTab.isFirstChange()) {\r\n            this.setCurrentTab();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        if (this.dialogRef) {\r\n            this.dialogRef.dragHandle = this.headerRel.nativeElement;\r\n        }\r\n\r\n        this.setCurrentTab();\r\n    }\r\n\r\n    private setCurrentTab() {\r\n        this.render2.setStyle(this.activetabRef.nativeElement, 'transform', `translate3d(${this.activeTab == 'datalist' ? 0: 84}px, 0px, 0px)`);\r\n    }\r\n\r\n    changeTabs($event, tabstr) {\r\n        this.activeTab = tabstr;\r\n        this.setCurrentTab();\r\n        this.tabChanged.emit({ tab: tabstr, $event });\r\n    }\r\n\r\n    closeDialog($event) {\r\n        if (this.dialogRef) {\r\n            $event.stopPropagation();\r\n            this.dialogRef.close();\r\n        }\r\n    }\r\n\r\n    changeDialogSize($event: MouseEvent) {\r\n        if (this.dialogRef) {\r\n            $event.stopPropagation();\r\n            this.dialogRef.changeDialogSize();\r\n        }\r\n    }\r\n}","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2018-12-04 10:43:42\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-26 13:33:30\r\n * @Company: Inspur\r\n * @Version: v0.0.1\r\n */\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { InputGroupModule } from '@farris/ui-input-group';\r\nimport { LayoutModule } from '@farris/ui-layout';\r\nimport { LocaleModule} from '@farris/ui-locale';\r\nimport { FarrisDialogModule } from '@farris/ui-dialog';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { DataTableModule, DataTableComponent } from '@farris/ui-datatable';\r\nimport { TreeTableModule, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { LoadingModule } from '@farris/ui-loading';\r\n\r\nimport { LookupGridComponent } from './lookup-grid.component';\r\nimport { LookupComponent } from './lookup.component';\r\nimport { LookupLeftComponent } from './lookup-left.component';\r\nimport { LookupTabsComponent } from './lookup-tabs.component';\r\nimport { LookupTipDirective } from './lookup-tip.directive';\r\nimport { NotifyModule } from '@farris/ui-notify';\r\nimport { FarrisContextMenuModule } from '@farris/ui-context-menu';\r\nimport { LookupQuickSelectPanelComponent } from './quick-select/quick-select-panel.component';\r\nimport { LookupQuickSelectDirective } from './quick-select/lookup-quick-select.directive';\r\nimport { LookupAdvancedLayoutComponent } from './advanced-layout/lookup-advanced-layout.component';\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        FarrisCommonModule.forRoot(),\r\n        FarrisDialogModule.forRoot(),\r\n        MessagerModule.forRoot(),\r\n        NotifyModule.forRoot(),\r\n        LoadingModule.forRoot({delay: 1000}),\r\n        InputGroupModule,\r\n        LayoutModule,\r\n        DataTableModule,\r\n        TreeTableModule,\r\n        FarrisContextMenuModule,\r\n        LocaleModule.forRoot()\r\n    ],\r\n    exports: [\r\n        LookupGridComponent, LookupComponent,\r\n        LookupAdvancedLayoutComponent\r\n    ],\r\n    declarations: [\r\n        LookupGridComponent,\r\n        LookupComponent,\r\n        LookupLeftComponent,\r\n        LookupTabsComponent,\r\n        LookupTipDirective,\r\n        LookupQuickSelectPanelComponent,\r\n        LookupQuickSelectDirective,\r\n        LookupAdvancedLayoutComponent\r\n    ],\r\n    providers: [],\r\n    entryComponents: [DataTableComponent, TreeTableComponent, LookupLeftComponent, LookupTabsComponent, LookupQuickSelectPanelComponent]\r\n})\r\nexport class LookupModule {}\r\n"]}