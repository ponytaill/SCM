/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { ButtonsModule } from '@progress/kendo-angular-buttons';
import { MessagerModule } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { UploadModule } from '../upload/upload.module';
import { UploadDialogComponent } from './uploaddialog/uploaddialog.component';
import { HttpService } from '@ecp-caf/caf-common';
import { UploadService } from '../upload/upload.service';
import { UploadDialogService } from '../uploaddialog.service';
import { HttpClientModule } from '@angular/common/http';
import { NotifyModule } from '@farris/ui-notify';
import { FileUploadComponent } from '../upload/file-upload/file-upload.component';
var UploadDialogMoudle = /** @class */ (function () {
    function UploadDialogMoudle() {
    }
    UploadDialogMoudle.decorators = [
        { type: NgModule, args: [{
                    declarations: [UploadDialogComponent],
                    imports: [
                        CommonModule,
                        FarrisDialogModule,
                        MessagerModule.forRoot(),
                        UploadModule,
                        ButtonsModule,
                        NotifyModule.forRoot(),
                        HttpClientModule
                    ],
                    exports: [UploadDialogComponent, FileUploadComponent],
                    entryComponents: [UploadDialogComponent, FileUploadComponent],
                    providers: [BsModalService, HttpService, UploadDialogService, UploadService]
                },] }
    ];
    return UploadDialogMoudle;
}());
export { UploadDialogMoudle };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkZGlhbG9nLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atc3ZjL2Zvcm1kb2MtdXBsb2FkLyIsInNvdXJjZXMiOlsibGliL3VwbG9hZGRpYWxvZy91cGxvYWRkaWFsb2cubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDaEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVsRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDOUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFHbEY7SUFBQTtJQWVrQyxDQUFDOztnQkFmbEMsUUFBUSxTQUFDO29CQUNSLFlBQVksRUFBRSxDQUFDLHFCQUFxQixDQUFDO29CQUNyQyxPQUFPLEVBQUU7d0JBQ1AsWUFBWTt3QkFDWixrQkFBa0I7d0JBQ2xCLGNBQWMsQ0FBQyxPQUFPLEVBQUU7d0JBQ3hCLFlBQVk7d0JBQ1osYUFBYTt3QkFDYixZQUFZLENBQUMsT0FBTyxFQUFFO3dCQUN0QixnQkFBZ0I7cUJBQ2pCO29CQUNELE9BQU8sRUFBRSxDQUFDLHFCQUFxQixFQUFDLG1CQUFtQixDQUFDO29CQUNwRCxlQUFlLEVBQUUsQ0FBQyxxQkFBcUIsRUFBQyxtQkFBbUIsQ0FBQztvQkFDNUQsU0FBUyxFQUFFLENBQUMsY0FBYyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxhQUFhLENBQUM7aUJBQzdFOztJQUNpQyx5QkFBQztDQUFBLEFBZm5DLElBZW1DO1NBQXRCLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBGYXJyaXNEaWFsb2dNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWRpYWxvZyc7XG5pbXBvcnQgeyBCdXR0b25zTW9kdWxlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItYnV0dG9ucyc7XG5pbXBvcnQgeyBNZXNzYWdlck1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW1vZGFsJztcblxuaW1wb3J0IHsgVXBsb2FkTW9kdWxlIH0gZnJvbSAnLi4vdXBsb2FkL3VwbG9hZC5tb2R1bGUnO1xuaW1wb3J0IHsgVXBsb2FkRGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi91cGxvYWRkaWFsb2cvdXBsb2FkZGlhbG9nLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xuaW1wb3J0IHsgVXBsb2FkU2VydmljZSB9IGZyb20gJy4uL3VwbG9hZC91cGxvYWQuc2VydmljZSc7XG5pbXBvcnQgeyBVcGxvYWREaWFsb2dTZXJ2aWNlIH0gZnJvbSAnLi4vdXBsb2FkZGlhbG9nLnNlcnZpY2UnO1xuaW1wb3J0IHsgSHR0cENsaWVudE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE5vdGlmeU1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbm90aWZ5JztcbmltcG9ydCB7IEZpbGVVcGxvYWRDb21wb25lbnQgfSBmcm9tICcuLi91cGxvYWQvZmlsZS11cGxvYWQvZmlsZS11cGxvYWQuY29tcG9uZW50JztcblxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtVcGxvYWREaWFsb2dDb21wb25lbnRdLFxuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIEZhcnJpc0RpYWxvZ01vZHVsZSxcbiAgICBNZXNzYWdlck1vZHVsZS5mb3JSb290KCksXG4gICAgVXBsb2FkTW9kdWxlLFxuICAgIEJ1dHRvbnNNb2R1bGUsXG4gICAgTm90aWZ5TW9kdWxlLmZvclJvb3QoKSxcbiAgICBIdHRwQ2xpZW50TW9kdWxlXG4gIF0sXG4gIGV4cG9ydHM6IFtVcGxvYWREaWFsb2dDb21wb25lbnQsRmlsZVVwbG9hZENvbXBvbmVudF0sXG4gIGVudHJ5Q29tcG9uZW50czogW1VwbG9hZERpYWxvZ0NvbXBvbmVudCxGaWxlVXBsb2FkQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbQnNNb2RhbFNlcnZpY2UsIEh0dHBTZXJ2aWNlLCBVcGxvYWREaWFsb2dTZXJ2aWNlLCBVcGxvYWRTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBVcGxvYWREaWFsb2dNb3VkbGUgeyB9XG4iXX0=