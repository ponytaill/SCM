/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/components/bill-tracker-graph/bill-tracker-graph.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ElementRef, Output, EventEmitter, Inject, LOCALE_ID, Input, ViewContainerRef, Injector, ComponentFactoryResolver, ChangeDetectorRef } from '@angular/core';
import { Graph } from '../../mxgraph-ext/Graph';
import { mxEvent, mxGraphHandler, mxEventObject, mxGraphSelectionModel, mxConstants, mxImage, mxClient, mxGuide, mxPolyline, mxLayoutManager, mxConnectionHandler, mxEllipse, mxHandle, mxVertexHandler, mxPoint, mxPrintPreview } from "../../../ref/mxgraph";
import { BillTrackerArgs } from '../../config/bill-tracker-args';
import { BillTrackerDataService } from '../../services/bill-tracker-data.service';
import { BillTrackerDirection } from '../../config/bill-tracker-direction';
import { BillTrackerLocalePipe } from '../../pipe/bill-tracker-locale.pipe';
import { MessagerService } from '@farris/ui-messager';
import { LoadingService } from '@farris/ui-loading';
import { BsModalService } from '@farris/ui-modal';
import { BillTrackerConstant } from '../../config/bill-tracker-constant';
import { RevertCompactTreeLayout } from '../../mxgraph-ext/RevertCompactTreeLayout';
import { CompactTreeLayout } from '../../mxgraph-ext/CompactTreeLayout';
import { EntryCellData } from '../../../entity/tracking/cell-data/EntryCellData';
import { UpCellData } from '../../../entity/tracking/cell-data/UpCellData';
import { DownCellData } from '../../../entity/tracking/cell-data/DownCellData';
import { BillTrackingSettings } from '@edp-bif/common-api';
import { NotifyService } from '@farris/ui-notify';
import { BillTrackerDataInfoService } from '../../services/bill-tracker-data-info.service';
import { CellOverlay } from '../../mxgraph-ext/CellOverlay';
import { CellOverlayState } from '../../mxgraph-ext/CellOverlayState';
import { Events } from '../../mxgraph-ext/Events';
import { billTrackerCellCss } from '../../config/bill-tracker-cell-css';
import { addCustomCSS } from '../../utils/addCustomCSS';
import { Outline } from '../../mxgraph-ext/Outline';
// 在head中添加节点样式
addCustomCSS(billTrackerCellCss);
export class BillTrackerGraphComponent {
    /**
     * @param {?} args
     * @param {?} localeId
     * @param {?} dataService
     * @param {?} notify
     * @param {?} messager
     * @param {?} loading
     * @param {?} modal
     * @param {?} vcr
     * @param {?} inj
     * @param {?} cfr
     * @param {?} cdr
     */
    constructor(args, localeId, dataService, notify, messager, loading, modal, vcr, inj, cfr, cdr) {
        this.dataService = dataService;
        this.notify = notify;
        this.messager = messager;
        this.loading = loading;
        this.modal = modal;
        this.vcr = vcr;
        this.inj = inj;
        this.cfr = cfr;
        this.cdr = cdr;
        this.selectEventEmitter = new EventEmitter();
        this.stateChangeEventEmitter = new EventEmitter();
        this.hspace = 80;
        this.vspace = 28;
        this.defaultWidth = 250;
        this.defaultHeight = 138;
        this.nodeWidth = this.defaultWidth;
        this.nodeHeight = this.defaultHeight;
        this.defaultNonEntryImage = (!mxClient.IS_SVG) ? BillTrackerConstant.IMAGE_PATH + '/non-entry-bill.png' : BillTrackerConstant.IMAGE_PATH + '/non-entry-bill.svg';
        this.defaultEntryImage = (!mxClient.IS_SVG) ? BillTrackerConstant.IMAGE_PATH + '/entry-bill.png' : BillTrackerConstant.IMAGE_PATH + '/entry-bill.svg';
        this.defaultOverlayWidth = 26;
        this.defaultOverlayHeight = 26;
        this.overlayWidth = this.defaultOverlayWidth;
        this.overlayHeight = this.defaultOverlayHeight;
        this.defaultUpSearchImage = new mxImage(BillTrackerConstant.IMAGE_PATH + '/tracker-plus.svg', this.overlayWidth, this.overlayHeight);
        this.defaultDownSearchImage = new mxImage(BillTrackerConstant.IMAGE_PATH + '/tracker-plus.svg', this.overlayWidth, this.overlayHeight);
        this.defaultUpFolderImage = new mxImage(BillTrackerConstant.IMAGE_PATH + '/tracker-minus.svg', this.overlayWidth, this.overlayHeight);
        this.defaultDownFolderImage = new mxImage(BillTrackerConstant.IMAGE_PATH + '/tracker-minus.svg', this.overlayWidth, this.overlayHeight);
        this.upSearchImage = this.defaultUpSearchImage;
        this.downSearchImage = this.defaultDownSearchImage;
        this.upFolderImage = this.defaultUpFolderImage;
        this.downFolderImage = this.defaultDownFolderImage;
        this.upSearchOffset = new mxPoint(-50, 0);
        this.downSearchOffset = new mxPoint(50, 0);
        /**
         * 正在加载中的单据节点请求数
         */
        this.numCellsAddingReq = 0;
        this.localePipe = new BillTrackerLocalePipe(localeId);
        this.dataInfoService = new BillTrackerDataInfoService();
        this.billTrackerArgs = args;
        /** @type {?} */
        const graphOptions = this.billTrackerArgs.graphOptions;
        this.graphOptions = graphOptions;
        /** @type {?} */
        const gridOptions = this.billTrackerArgs.gridOptions;
        this.gridOptions = gridOptions;
        this.upSearchImage = graphOptions && graphOptions.upSearchImage ? new mxImage(graphOptions.upSearchImage, this.overlayWidth, this.overlayHeight) : this.upSearchImage;
        this.downSearchImage = graphOptions && graphOptions.downSearchImage ? new mxImage(graphOptions.downSearchImage, this.overlayWidth, this.overlayHeight) : this.downSearchImage;
        this.upFolderImage = graphOptions && graphOptions.upFolderImage ? new mxImage(graphOptions.upFolderImage, this.overlayWidth, this.overlayHeight) : this.upFolderImage;
        this.downFolderImage = graphOptions && graphOptions.downFolderImage ? new mxImage(graphOptions.downFolderImage, this.overlayWidth, this.overlayHeight) : this.downFolderImage;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.graph = this.createGraph();
        this.createLayout(this.graph);
        this.layoutManager = new mxLayoutManager(this.graph);
        this.outline = new Outline(this.graph, this.mxOutlineContainer.nativeElement);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @param {?=} sizeDidChange
     * @return {?}
     */
    refresh(sizeDidChange = true) {
        if (sizeDidChange && this.graph != null) {
            this.graph.sizeDidChange();
        }
    }
    /**
     * @return {?}
     */
    paint() {
        this.paintGraph(this.graph);
    }
    /**
     * @param {?} modalRef
     * @return {?}
     */
    setModalRef(modalRef) {
        this.modalRef = modalRef;
        if (this.modalRef != null) {
            this.modalRef.dialog.instance.closed.subscribe((/**
             * @param {?} evt
             * @return {?}
             */
            (evt) => {
                this.graph && this.graph.destroy();
            }));
            // todo: 临时解决弹窗模式下先刷新出入口节点问题
            /** @type {?} */
            let flag = 0;
            this.modalRef.dialog.instance.resized.subscribe((/**
             * @param {?} evt
             * @return {?}
             */
            (evt) => {
                if (flag >= 2) {
                    this.refresh();
                }
                flag++;
            }));
        }
    }
    /**
     * @return {?}
     */
    createGraph() {
        //启用mxGuide
        mxGraphHandler.prototype.guidesEnabled = true;
        //禁用mxgraph容器内上下文菜单
        mxEvent.disableContextMenu(this.mxContainerER.nativeElement);
        mxGraphHandler.prototype.scrollOnMove = false;
        mxGraphHandler.prototype.scaleGrid = true;
        //修改节点选中后处理器图片及填充色
        mxConstants.HANDLE_FILLCOLOR = '#29b6f2';
        mxHandle.prototype.createShape = (/**
         * @param {?} html
         * @return {?}
         */
        function (html) {
            /** @type {?} */
            const bounds = new mxEllipse(0, 0, mxConstants.HANDLE_SIZE, mxConstants.HANDLE_SIZE);
            return new mxEllipse(bounds, mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);
        });
        mxVertexHandler.prototype.handleImage = (!mxClient.IS_SVG) ? new mxImage(BillTrackerConstant.IMAGE_PATH + '/handle-main.png', mxConstants.HANDLE_SIZE, mxConstants.HANDLE_SIZE) : Graph.createSvgImage(18, 18, '<circle cx="9" cy="9" r="3" stroke="#fff" fill="' + Graph.handleFill + '" stroke-width="1"/>');
        mxConstants.DEFAULT_VALID_COLOR = '#FFFFFF';
        mxConstants.HIGHLIGHT_STROKEWIDTH = 1;
        //修改mxGuide默认配置
        mxConstants.GUIDE_COLOR = '#0088cf';
        mxGuide.prototype.createGuideShape = (/**
         * @param {?} horizontal
         * @return {?}
         */
        (horizontal) => new mxPolyline([], mxConstants.GUIDE_COLOR, mxConstants.GUIDE_STROKEWIDTH));
        //设置节点选中线框宽度
        mxConstants.VERTEX_SELECTION_STROKEWIDTH = 1;
        mxConstants.VERTEX_SELECTION_COLOR = '#3E8DFF';
        mxConstants.VERTEX_SELECTION_DASHED = false;
        //修改线宽
        mxConnectionHandler.prototype.getEdgeWidth = (/**
         * @param {?} valid
         * @return {?}
         */
        (valid) => 1);
        mxConstants.VALID_COLOR = '#00CD66';
        //创建mxGraph
        /** @type {?} */
        const graph = new Graph(this.mxContainerER.nativeElement, undefined, undefined, undefined);
        graph.localePipe = this.localePipe;
        graph.graphOptions = this.graphOptions;
        graph.gridOptions = this.gridOptions;
        //添加自定义监听器
        this.addListener(graph);
        return graph;
    }
    /**
     * @param {?} graph
     * @return {?}
     */
    createLayout(graph) {
        /** @type {?} */
        const upLayout = new RevertCompactTreeLayout(graph, true);
        upLayout.levelDistance = this.hspace;
        upLayout.edgeRouting = false;
        upLayout.resetEdges = false;
        this.upLayout = upLayout;
        /** @type {?} */
        const downLayout = new CompactTreeLayout(graph, true);
        downLayout.levelDistance = this.hspace;
        downLayout.edgeRouting = false;
        downLayout.resetEdges = true;
        this.downLayout = downLayout;
    }
    /**
     * @param {?} graph
     * @return {?}
     */
    addListener(graph) {
        /** @type {?} */
        const autoAdjustHandler = (/**
         * @return {?}
         */
        () => {
            window.setTimeout((/**
             * @return {?}
             */
            () => {
                if (this.graph != null) {
                    this.refresh();
                }
            }), 0);
        });
        mxEvent.addListener(window, 'resize', autoAdjustHandler);
        /** @type {?} */
        const wheelResizeHandler = (/**
         * @param {?} evt
         * @param {?} up
         * @return {?}
         */
        (evt, up) => {
            // window下Ctrl按下，Mac下Command按下
            if (mxEvent.isControlDown(evt) || (mxClient.IS_MAC && evt.metaKey)) {
                if (up) {
                    this.zoomIn();
                }
                else {
                    this.zoomOut();
                }
                mxEvent.consume(evt);
                return false;
            }
        });
        mxEvent.addMouseWheelListener(wheelResizeHandler, this.mxContainerER.nativeElement);
        graph.getSelectionModel().addListener(mxEvent.CHANGE, (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        (sender, evt) => {
            if (!(sender instanceof mxGraphSelectionModel)) {
                return;
            }
            /** @type {?} */
            let selectionModel = sender;
            //若未选中节点或者选中节点数不为1
            if (selectionModel.cells == null || selectionModel.cells.length != 1) {
                this.selectEventEmitter.emit(null);
                return;
            }
            /** @type {?} */
            let selectedCell = selectionModel.cells[0];
            //选中的是边
            if (selectedCell.edge || !selectedCell.vertex) {
                return;
            }
            this.selectEventEmitter.emit(selectedCell);
        }));
        graph.addListener(Events.CLICK_FIRST_SUMMARY, (/**
         * @param {?} serder
         * @param {?} evt
         * @return {?}
         */
        (serder, evt) => {
            /** @type {?} */
            const cell = evt.getProperty("cell");
            this.stateChangeEventEmitter.emit({
                type: Events.CLICK_FIRST_SUMMARY,
                data: cell
            });
        }));
    }
    /**
     * @param {?} graph
     * @return {?}
     */
    paintGraph(graph) {
        graph.getModel().beginUpdate();
        this.entry = this.paintEntry(graph);
        this.afterPaintGraph(this.graph, this.entry);
        graph.getModel().endUpdate();
    }
    /**
     * @param {?} graph
     * @param {?} entry
     * @return {?}
     */
    afterPaintGraph(graph, entry) {
        if (entry == null) {
            return;
        }
        // 默认选中入口节点
        this.billTrackerArgs.gridOptions.showEntryData && graph.setSelectionCell(this.entry);
        // 默认展示一层？
        /** @type {?} */
        const canTrackingResult = this.billTrackerArgs.canTrackingResult;
        if (this.billTrackerArgs.graphOptions.showDownBills == true) {
            canTrackingResult.canDownTracking && this.entry.downCellOverlay && this.entry.downCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK, "resetView", true));
        }
        if (this.billTrackerArgs.graphOptions.showUpBills == true) {
            canTrackingResult.canUpTracking && this.entry.upCellOverlay && this.entry.upCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK, "resetView", true));
        }
    }
    /**
     * @param {?} graph
     * @return {?}
     */
    paintEntry(graph) {
        /** @type {?} */
        let entry = null;
        if (this.billTrackerArgs == null || this.billTrackerArgs.canTrackingResult == null) {
            return entry;
        }
        /** @type {?} */
        const canTrackingResult = this.billTrackerArgs.canTrackingResult;
        /** @type {?} */
        const info = this.dataService.buildEntryBillInfo(canTrackingResult);
        /** @type {?} */
        const dataInfo = info.billDataInfos[0];
        /** @type {?} */
        let bts = new BillTrackingSettings();
        bts.LoadFromJson(canTrackingResult.billTrackingSettings);
        /** @type {?} */
        const parent = graph.getDefaultParent();
        graph.getModel().beginUpdate();
        try {
            /** @type {?} */
            let x0 = 0;
            /** @type {?} */
            let y0 = 0;
            /** @type {?} */
            let bts = new BillTrackingSettings();
            if (info && info.billTrackingSettings) {
                bts.LoadFromJson(info.billTrackingSettings);
            }
            /** @type {?} */
            let customStyle = "";
            entry = graph.insertBillCell(parent, null, dataInfo, info, true, x0, y0, this.nodeWidth, this.nodeHeight, `billNode;billNodeEntry;${customStyle}`);
            /** @type {?} */
            let geometry = graph.getModel().getGeometry(entry);
            /** @type {?} */
            let size = graph.getPreferredSizeForCell(entry);
            this.entryCellData = new EntryCellData();
            this.setCellData(this.entryCellData, entry);
            this.entryCellData.canTrackingResult = canTrackingResult;
            entry.data = this.entryCellData;
            // 添加上查下查按钮
            if (canTrackingResult.canDownTracking) {
                /** @type {?} */
                const overlay = this.addDownOverlay(graph, entry);
                entry.downCellOverlay = overlay;
            }
            if (canTrackingResult.canUpTracking) {
                /** @type {?} */
                const overlay = this.addUpOverlay(graph, entry);
                entry.upCellOverlay = overlay;
            }
            this.upParent = parent.clone();
            this.downParent = parent.clone();
            graph.addCells([this.upParent, this.downParent], parent);
        }
        finally {
            graph.getModel().endUpdate();
        }
        return entry;
    }
    /**
     * @param {?} graph
     * @param {?} cell
     * @return {?}
     */
    addUpOverlay(graph, cell) {
        /** @type {?} */
        let upSearch = new CellOverlay(this.upSearchImage, this.localePipe.transform("upSearch"), mxConstants.ALIGN_LEFT, mxConstants.ALIGN_MIDDLE, this.upSearchOffset, "hand");
        upSearch.state = CellOverlayState.Search;
        /** @type {?} */
        const upSearchHandler = (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        (sender, evt) => {
            /** @type {?} */
            const resetView = evt.getProperty("resetView");
            graph.getModel().beginUpdate();
            this.addUpAssoCell(graph, cell, resetView);
            upSearch.removeListener(upSearchHandler);
            upSearch.tooltip = this.localePipe.transform("folder");
            upSearch.image = this.upFolderImage;
            upSearch.state = CellOverlayState.Fold;
            upSearch.addListener(mxEvent.CLICK, upFolderHandler);
            graph.removeCellOverlay(cell, upSearch);
            graph.addCellOverlay(cell, upSearch);
            graph.getModel().endUpdate();
        });
        /** @type {?} */
        const upFolderHandler = (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        (sender, evt) => {
            graph.getModel().beginUpdate();
            this.removeAssoCell(graph, cell, BillTrackerDirection.Up);
            upSearch.removeListener(upFolderHandler);
            upSearch.tooltip = this.localePipe.transform("upSearch");
            upSearch.image = this.upSearchImage;
            upSearch.state = CellOverlayState.Search;
            upSearch.addListener(mxEvent.CLICK, upSearchHandler);
            graph.removeCellOverlay(cell, upSearch);
            graph.addCellOverlay(cell, upSearch);
            graph.model.endUpdate();
        });
        upSearch.addListener(mxEvent.CLICK, upSearchHandler);
        graph.removeCellOverlay(cell, upSearch);
        graph.addCellOverlay(cell, upSearch);
        return upSearch;
    }
    /**
     * @param {?} graph
     * @param {?} cell
     * @return {?}
     */
    addDownOverlay(graph, cell) {
        /** @type {?} */
        let downSearch = new CellOverlay(this.downSearchImage, this.localePipe.transform("downSearch"), mxConstants.ALIGN_RIGHT, mxConstants.ALIGN_MIDDLE, this.downSearchOffset, "hand");
        downSearch.state = CellOverlayState.Search;
        /** @type {?} */
        const downSearchHandler = (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        (sender, evt) => {
            /** @type {?} */
            const resetView = evt.getProperty("resetView");
            graph.getModel().beginUpdate();
            this.addDownAssoCell(graph, cell, resetView);
            downSearch.image = this.downFolderImage;
            downSearch.tooltip = this.localePipe.transform("folder");
            downSearch.state = CellOverlayState.Fold;
            downSearch.removeListener(downSearchHandler);
            downSearch.addListener(mxEvent.CLICK, downFolderHandler);
            graph.removeCellOverlay(cell, downSearch);
            graph.addCellOverlay(cell, downSearch);
            // graph.refresh(cell);
            graph.getModel().endUpdate();
        });
        /** @type {?} */
        const downFolderHandler = (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        (sender, evt) => {
            graph.getModel().beginUpdate();
            this.removeAssoCell(graph, cell, BillTrackerDirection.Down);
            downSearch.image = this.downSearchImage;
            downSearch.tooltip = this.localePipe.transform("downSearch");
            downSearch.state = CellOverlayState.Search;
            downSearch.removeListener(downFolderHandler);
            downSearch.addListener(mxEvent.CLICK, downSearchHandler);
            graph.removeCellOverlay(cell, downSearch);
            graph.addCellOverlay(cell, downSearch);
            // graph.refresh(cell);
            graph.getModel().endUpdate();
        });
        downSearch.addListener(mxEvent.CLICK, downSearchHandler);
        graph.removeCellOverlay(cell, downSearch);
        graph.addCellOverlay(cell, downSearch);
        return downSearch;
    }
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?=} resetView
     * @return {?}
     */
    addUpAssoCell(graph, cell, resetView = false) {
        graph.getModel().beginUpdate();
        /** @type {?} */
        const args = this.dataService.buildGetUpBillsInfoArgs(cell);
        this.loading.show({ message: this.localePipe.transform("loading") });
        this.numCellsAddingReq++;
        this.dataService.getUpBillsInfo(args).subscribe((/**
         * @param {?} infos
         * @return {?}
         */
        (infos) => {
            /** @type {?} */
            let parent = graph.getDefaultParent();
            /** @type {?} */
            let newCells = [];
            // graph.getModel().beginUpdate();
            try {
                for (let info of infos) {
                    for (let dataInfo of info.billDataInfos) {
                        /** @type {?} */
                        let billCell = null;
                        /** @type {?} */
                        let bts = new BillTrackingSettings();
                        if (info && info.billTrackingSettings) {
                            bts.LoadFromJson(info.billTrackingSettings);
                        }
                        /** @type {?} */
                        let customStyle = "";
                        billCell = graph.insertBillCell(this.upParent, null, dataInfo, info, false, cell.geometry.x - this.hspace, cell.geometry.y, this.nodeWidth, this.nodeHeight, `billNode;${customStyle}`);
                        newCells.push(billCell);
                    }
                }
                this.calCellsPosition(graph, cell, newCells, BillTrackerDirection.Up);
                for (let nc of newCells) {
                    if (nc.billDataInfo.canContinueTracking) {
                        /** @type {?} */
                        const ol = this.addUpOverlay(graph, nc);
                        nc.upCellOverlay = ol;
                    }
                    graph.insertEdge(parent, null, '', nc, cell, "billAssociation;");
                }
                /** @type {?} */
                const oldGeo = this.entry.getGeometry().clone();
                this.upLayout.execute(this.upParent, this.entry);
                /** @type {?} */
                const newGeo = this.entry.getGeometry().clone();
                /** @type {?} */
                const dx = oldGeo.x - newGeo.x;
                /** @type {?} */
                const dy = oldGeo.y - newGeo.y;
                this.restoreEntryPosition(graph, this.entry, dx, dy);
                /** @type {?} */
                const cellData = (/** @type {?} */ (cell.data));
                cellData.ups.length = 0;
                for (let nc of newCells) {
                    /** @type {?} */
                    const cd = new UpCellData();
                    this.setCellData(cd, nc);
                    nc.data = cd;
                    cd.down = cellData;
                    cellData.ups.push(cd);
                }
            }
            finally {
                graph.getModel().endUpdate();
            }
            // 重绘画布大小
            resetView && graph.fireEvent(new mxEventObject(Events.RESET_GRAPH_VIEW));
            this.numCellsAddingReq--;
            // 自定义单据节点插入并移位后事件
            this.graph.fireEvent(new mxEventObject(Events.BILL_CELLS_ADDED_AND_MOVED, 'cells', newCells, 'parent', this.upParent));
            this.loading.close();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.numCellsAddingReq--;
            this.loading.close();
            this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            throw err;
        }));
    }
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?=} resetView
     * @return {?}
     */
    addDownAssoCell(graph, cell, resetView = false) {
        graph.getModel().beginUpdate();
        /** @type {?} */
        const args = this.dataService.buildGetDownBillsInfoArgs(cell);
        this.loading.show({ message: this.localePipe.transform("loading") });
        this.numCellsAddingReq++;
        this.dataService.getDownBillsInfo(args).subscribe((/**
         * @param {?} infos
         * @return {?}
         */
        (infos) => {
            /** @type {?} */
            let model = graph.getModel();
            /** @type {?} */
            let parent = graph.getDefaultParent();
            /** @type {?} */
            let newCells = [];
            // graph.getModel().beginUpdate();
            try {
                for (let info of infos) {
                    for (let dataInfo of info.billDataInfos) {
                        /** @type {?} */
                        let billCell = null;
                        /** @type {?} */
                        let bts = new BillTrackingSettings();
                        if (info && info.billTrackingSettings) {
                            bts.LoadFromJson(info.billTrackingSettings);
                        }
                        /** @type {?} */
                        let customStyle = "";
                        billCell = graph.insertBillCell(this.downParent, null, dataInfo, info, false, cell.geometry.x + this.hspace, cell.geometry.y, this.nodeWidth, this.nodeHeight, `billNode;${customStyle}`);
                        newCells.push(billCell);
                    }
                }
                this.calCellsPosition(graph, cell, newCells, BillTrackerDirection.Down);
                for (let nc of newCells) {
                    if (nc.billDataInfo.canContinueTracking) {
                        /** @type {?} */
                        const ol = this.addDownOverlay(graph, nc);
                        nc.downCellOverlay = ol;
                    }
                    graph.insertEdge(parent, null, '', cell, nc, "billAssociation;");
                }
                /** @type {?} */
                const oldGeo = this.entry.getGeometry().clone();
                this.downLayout.execute(this.downParent, this.entry);
                /** @type {?} */
                const newGeo = this.entry.getGeometry().clone();
                /** @type {?} */
                const dx = oldGeo.x - newGeo.x;
                /** @type {?} */
                const dy = oldGeo.y - newGeo.y;
                this.restoreEntryPosition(graph, this.entry, dx, dy);
                /** @type {?} */
                const cellData = (/** @type {?} */ (cell.data));
                cellData.downs.length = 0;
                for (let nc of newCells) {
                    /** @type {?} */
                    const cd = new DownCellData();
                    this.setCellData(cd, nc);
                    nc.data = cd;
                    cd.up = cellData;
                    cellData.downs.push(cd);
                }
            }
            finally {
                graph.getModel().endUpdate();
            }
            // 重绘画布大小
            resetView && graph.fireEvent(new mxEventObject(Events.RESET_GRAPH_VIEW));
            this.numCellsAddingReq--;
            // 自定义单据节点插入并移位后事件
            this.graph.fireEvent(new mxEventObject(Events.BILL_CELLS_ADDED_AND_MOVED, 'cells', newCells, 'parent', this.downParent));
            this.loading.close();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.numCellsAddingReq--;
            this.loading.close();
            this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            throw err;
        }));
    }
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?} dir
     * @return {?}
     */
    removeAssoCell(graph, cell, dir) {
        /** @type {?} */
        const model = graph.getModel();
        /** @type {?} */
        const parent = graph.getDefaultParent();
        graph.getModel().beginUpdate();
        try {
            /** @type {?} */
            let assoCells = [];
            if (dir == BillTrackerDirection.Down) {
                /** @type {?} */
                let edges = model.getOutgoingEdges(cell);
                /** @type {?} */
                let i = 0;
                while (edges && edges.length > 0 && i < edges.length) {
                    if (edges[i].target && edges[i].target != this.entry) {
                        assoCells.push((/** @type {?} */ (edges[i].target)));
                        edges.push(...model.getOutgoingEdges(edges[i].target));
                    }
                    i++;
                }
            }
            else if (dir == BillTrackerDirection.Up) {
                /** @type {?} */
                let edges = model.getIncomingEdges(cell);
                /** @type {?} */
                let i = 0;
                while (edges && edges.length > 0 && i < edges.length) {
                    if (edges[i].source && edges[i].source != this.entry) {
                        assoCells.push((/** @type {?} */ (edges[i].source)));
                        edges.push(...model.getIncomingEdges(edges[i].source));
                    }
                    i++;
                }
            }
            if (dir == BillTrackerDirection.Down) {
                ((/** @type {?} */ (cell.data))).downs.length = 0;
            }
            else if (dir == BillTrackerDirection.Up) {
                ((/** @type {?} */ (cell.data))).ups.length = 0;
            }
            graph.removeCells(assoCells);
            /** @type {?} */
            const oldGeo = this.entry.getGeometry().clone();
            this.upLayout.execute(this.upParent, this.entry);
            /** @type {?} */
            const newGeo = this.entry.getGeometry().clone();
            /** @type {?} */
            const dx = oldGeo.x - newGeo.x;
            /** @type {?} */
            const dy = oldGeo.y - newGeo.y;
            this.restoreEntryPosition(graph, this.entry, dx, dy);
            /** @type {?} */
            const oldGeo2 = this.entry.getGeometry().clone();
            this.downLayout.execute(this.downParent, this.entry);
            /** @type {?} */
            const newGeo2 = this.entry.getGeometry().clone();
            /** @type {?} */
            const dx2 = oldGeo2.x - newGeo2.x;
            /** @type {?} */
            const dy2 = oldGeo2.y - newGeo2.y;
            this.restoreEntryPosition(graph, this.entry, dx2, dy2);
        }
        finally {
            graph.getModel().endUpdate();
        }
    }
    /**
     * @param {?} graph
     * @param {?} entry
     * @param {?} dx
     * @param {?} dy
     * @return {?}
     */
    restoreEntryPosition(graph, entry, dx, dy) {
        graph.getModel().beginUpdate();
        try {
            /** @type {?} */
            let vertices = null;
            vertices = [entry, ...graph.getChildCells(this.upParent, true, false), ...graph.getChildCells(this.downParent, true, false)];
            graph.moveCells(vertices, dx, dy);
        }
        finally {
            graph.getModel().endUpdate();
        }
    }
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?} newCells
     * @param {?} dir
     * @return {?}
     */
    calCellsPosition(graph, cell, newCells, dir) {
        if (dir == BillTrackerDirection.Down) {
            this.resetDownCellsPosition(graph, cell, newCells);
        }
        else if (dir == BillTrackerDirection.Up) {
            this.resetUpCellsPosition(graph, cell, newCells);
        }
    }
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?} newCells
     * @return {?}
     */
    resetDownCellsPosition(graph, cell, newCells) {
        graph.getModel().beginUpdate();
        try {
            /** @type {?} */
            let targets = graph.getOutgoingEdges(cell).map((/**
             * @param {?} edge
             * @return {?}
             */
            edge => edge.target));
            /** @type {?} */
            let deals = targets;
            //按纵坐标从大到小排序
            /** @type {?} */
            let temp = deals.sort((/**
             * @param {?} c1
             * @param {?} c2
             * @return {?}
             */
            (c1, c2) => c1.geometry && c2.geometry ? c2.geometry.y - c1.geometry.y : Number.MIN_VALUE));
            //最小纵坐标
            /** @type {?} */
            let minY = temp.length > 0 ? temp[temp.length - 1].geometry.y : cell.geometry.y;
            //最大纵坐标
            /** @type {?} */
            let maxY = temp.length > 0 ? temp[0].geometry.y : cell.geometry.y;
            //依次修改新插入节点的纵坐标
            for (let i = 0; i < newCells.length; i++) {
                maxY = deals.length > 0 ? maxY + this.vspace : maxY;
                graph.translateCell(newCells[i], 0, maxY - newCells[i].geometry.y);
                deals.push(newCells[i]);
            }
            /** @type {?} */
            let midY = (maxY + minY) / 2;
            /** @type {?} */
            let diffY = cell.geometry.y - midY;
            //依次修改所有点纵坐标
            deals.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                graph.translateCell(c, 0, diffY);
            }));
            minY += diffY;
            maxY += diffY;
            midY += diffY;
            // 将<=midY的节点全部上移至minY-diffY,>=midY下移至maxY + diffY
            for (let key in graph.model.cells) {
                if (graph.model.cells[key] == graph.model.root || graph.model.cells[key].geometry == null || graph.model.cells[key].edge == true) {
                    continue;
                }
                if (graph.model.cells[key] == cell || newCells.indexOf((/** @type {?} */ (graph.model.cells[key]))) != -1) {
                    continue;
                }
                if (graph.model.cells[key] == this.entry) {
                    continue;
                }
                if (graph.model.cells[key].geometry.x < this.entry.geometry.x) {
                    continue;
                }
                /** @type {?} */
                const c = graph.model.cells[key];
                /** @type {?} */
                let geo = c.geometry;
                graph.translateCell(c, 0, geo.y <= cell.geometry.y ? minY - (cell.geometry.y - geo.y) - geo.y : maxY + (geo.y - cell.geometry.y) - geo.y);
            }
        }
        finally {
            graph.getModel().endUpdate();
        }
    }
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?} newCells
     * @return {?}
     */
    resetUpCellsPosition(graph, cell, newCells) {
        graph.getModel().beginUpdate();
        try {
            /** @type {?} */
            let sources = graph.getIncomingEdges(cell).map((/**
             * @param {?} edge
             * @return {?}
             */
            edge => edge.source));
            /** @type {?} */
            let deals = sources;
            //按纵坐标从大到小排序
            /** @type {?} */
            let temp = deals.sort((/**
             * @param {?} c1
             * @param {?} c2
             * @return {?}
             */
            (c1, c2) => c1.geometry && c2.geometry ? c2.geometry.y - c1.geometry.y : Number.MIN_VALUE));
            //最小纵坐标
            /** @type {?} */
            let minY = temp.length > 0 ? temp[temp.length - 1].geometry.y : cell.geometry.y;
            //最大纵坐标
            /** @type {?} */
            let maxY = temp.length > 0 ? temp[0].geometry.y : cell.geometry.y;
            //依次修改新插入节点的纵坐标
            for (let i = 0; i < newCells.length; i++) {
                maxY = deals.length > 0 ? maxY + this.vspace : maxY;
                graph.translateCell(newCells[i], 0, maxY - newCells[i].geometry.y);
                deals.push(newCells[i]);
            }
            /** @type {?} */
            let midY = (maxY + minY) / 2;
            /** @type {?} */
            let diffY = cell.geometry.y - midY;
            //依次修改所有点纵坐标
            deals.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                graph.translateCell(c, 0, diffY);
            }));
            minY += diffY;
            maxY += diffY;
            midY += diffY;
            // 将<=midY的节点全部上移至minY-diffY,>=midY下移至maxY + diffY
            for (let key in graph.model.cells) {
                if (graph.model.cells[key] == graph.model.root || graph.model.cells[key].geometry == null || graph.model.cells[key].edge == true) {
                    continue;
                }
                if (graph.model.cells[key] == cell || newCells.indexOf((/** @type {?} */ (graph.model.cells[key]))) != -1) {
                    continue;
                }
                if (graph.model.cells[key] == this.entry) {
                    continue;
                }
                if (graph.model.cells[key].geometry.x > this.entry.geometry.x) {
                    continue;
                }
                /** @type {?} */
                const c = graph.model.cells[key];
                /** @type {?} */
                let geo = c.geometry;
                graph.translateCell(c, 0, geo.y <= cell.geometry.y ? minY - (cell.geometry.y - geo.y) - geo.y : maxY + (geo.y - cell.geometry.y) - geo.y);
            }
        }
        finally {
            graph.getModel().endUpdate();
        }
    }
    /**
     * @param {?} cellData
     * @param {?} cell
     * @return {?}
     */
    setCellData(cellData, cell) {
        cellData.billInfo = cell.billInfo;
        cellData.billDataInfo = cell.billDataInfo;
        cellData.visible = true;
        cellData.diagramInfo.x = cell.geometry.x;
        cellData.diagramInfo.y = cell.geometry.y;
        cellData.diagramInfo.width = cell.geometry.width;
        cellData.diagramInfo.height = cell.geometry.height;
        cellData.diagramInfo.extProps = {
            style: cell.style
        };
    }
    /**
     * @return {?}
     */
    zoomOut() {
        this.graph.zoomOut();
    }
    /**
     * @return {?}
     */
    zoomIn() {
        this.graph.zoomIn();
    }
    /**
     * @return {?}
     */
    zoomActual() {
        this.graph.zoomActual();
    }
    /**
     * @return {?}
     */
    getZoomScale() {
        return Math.round(this.graph.view.scale * 100);
    }
    /**
     * @return {?}
     */
    print() {
        /** @type {?} */
        const preview = new mxPrintPreview(this.graph, 1);
        preview.printOverlays = true;
        preview.printControls = true;
        preview.printBackgroundImage = true;
        preview.open(billTrackerCellCss);
    }
    /**
     * @param {?} direction
     * @param {?=} all
     * @return {?}
     */
    expand(direction, all = false) {
        if (all) {
            this.expandAll(direction);
            return;
        }
        if (direction == BillTrackerDirection.Up) {
            /** @type {?} */
            const cells = [this.entry];
            this.upParent.children && cells.push(...this.upParent.children);
            cells.forEach((/**
             * @param {?} cell
             * @return {?}
             */
            (cell) => {
                if (cell.upCellOverlay && cell.upCellOverlay.state == CellOverlayState.Search) {
                    cell.upCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK));
                }
            }));
        }
        else if (direction == BillTrackerDirection.Down) {
            /** @type {?} */
            const cells = [this.entry];
            this.downParent.children && cells.push(...this.downParent.children);
            cells.forEach((/**
             * @param {?} cell
             * @return {?}
             */
            (cell) => {
                if (cell.downCellOverlay && cell.downCellOverlay.state == CellOverlayState.Search) {
                    cell.downCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK));
                }
            }));
        }
    }
    /**
     * @param {?} direction
     * @return {?}
     */
    expandAll(direction) {
        if (direction != BillTrackerDirection.Up && direction != BillTrackerDirection.Down) {
            return;
        }
        // 单据节点添加并移位后事件监听器
        /** @type {?} */
        let afterBillCellsAddedAndMoved = null;
        if (direction == BillTrackerDirection.Up) {
            afterBillCellsAddedAndMoved = (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const cells = [this.entry];
                this.upParent.children && cells.push(...this.upParent.children);
                /** @type {?} */
                const canTrackUpCells = cells.filter((/**
                 * @param {?} cell
                 * @return {?}
                 */
                (cell) => {
                    return cell.upCellOverlay && cell.upCellOverlay.state == CellOverlayState.Search;
                }));
                // 没有可上查节点且没有正在执行的上查请求时删除监听器
                if (canTrackUpCells == null || canTrackUpCells.length == 0) {
                    if (this.numCellsAddingReq === 0) {
                        // console.log("移除监听器");
                        this.graph.removeListener(afterBillCellsAddedAndMoved);
                        // console.timeEnd("ExpandAll");
                    }
                }
                else {
                    canTrackUpCells.forEach((/**
                     * @param {?} cell
                     * @return {?}
                     */
                    (cell) => {
                        if (cell.upCellOverlay && cell.upCellOverlay.state == CellOverlayState.Search) {
                            cell.upCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK));
                        }
                    }));
                }
            });
        }
        else if (direction == BillTrackerDirection.Down) {
            afterBillCellsAddedAndMoved = (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const cells = [this.entry];
                this.downParent.children && cells.push(...this.downParent.children);
                /** @type {?} */
                const canTrackDownCells = cells.filter((/**
                 * @param {?} cell
                 * @return {?}
                 */
                (cell) => {
                    return cell.downCellOverlay && cell.downCellOverlay.state == CellOverlayState.Search;
                }));
                // 没有可下查节点且没有正在执行的下查请求时删除监听器
                if (canTrackDownCells == null || canTrackDownCells.length == 0) {
                    if (this.numCellsAddingReq === 0) {
                        // console.log("移除监听器");
                        this.graph.removeListener(afterBillCellsAddedAndMoved);
                        // console.timeEnd("ExpandAll");
                    }
                }
                else {
                    canTrackDownCells.forEach((/**
                     * @param {?} cell
                     * @return {?}
                     */
                    (cell) => {
                        if (cell.downCellOverlay && cell.downCellOverlay.state == CellOverlayState.Search) {
                            cell.downCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK));
                        }
                    }));
                }
            });
        }
        // console.time("ExpandAll");
        // 添加监听器
        // console.log("添加监听器");
        this.graph.addListener("billCellsAddedAndMoved", afterBillCellsAddedAndMoved);
        // 直接触发一次展开事件
        afterBillCellsAddedAndMoved();
    }
}
BillTrackerGraphComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-bill-tracker-graph',
                template: "<div #mxContainer id=\"mx-container\" class=\"mx-container-ng\">\r\n\r\n</div>\r\n\r\n<div #mxOutlineContainer id=\"mx-outline-container\" class=\"mx-outline-container\" [style.top]=\"modalRef?'50px':null\">\r\n\r\n</div>",
                styles: [".mx-container-ng{position:absolute;top:0;left:0;bottom:0;right:0;cursor:default;overflow:auto;padding-right:16px;padding-bottom:16px;margin:4px}.mx-outline-container{z-index:1;position:absolute;overflow:hidden;top:20px;right:20px;width:160px;height:120px;background:#fff;border:1px solid #d3d3d3}"]
            }] }
];
/** @nocollapse */
BillTrackerGraphComponent.ctorParameters = () => [
    { type: BillTrackerArgs },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: BillTrackerDataService },
    { type: NotifyService },
    { type: MessagerService },
    { type: LoadingService },
    { type: BsModalService },
    { type: ViewContainerRef },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef }
];
BillTrackerGraphComponent.propDecorators = {
    mxContainerER: [{ type: ViewChild, args: ["mxContainer",] }],
    mxOutlineContainer: [{ type: ViewChild, args: ["mxOutlineContainer",] }],
    selectEventEmitter: [{ type: Output, args: ["select",] }],
    stateChangeEventEmitter: [{ type: Output, args: ["stateChange",] }],
    billTrackerArgs: [{ type: Input, args: ["billTrackerArgs",] }]
};
if (false) {
    /** @type {?} */
    BillTrackerGraphComponent.prototype.localePipe;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.mxContainerER;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.mxOutlineContainer;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.selectEventEmitter;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.stateChangeEventEmitter;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.billTrackerArgs;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.graphOptions;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.gridOptions;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.modalRef;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.graph;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.hspace;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.vspace;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.upLayout;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.downLayout;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.outline;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.entryCellData;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.layoutManager;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.entry;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.upParent;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.downParent;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultWidth;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultHeight;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.nodeWidth;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.nodeHeight;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultNonEntryImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultEntryImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultOverlayWidth;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultOverlayHeight;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.overlayWidth;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.overlayHeight;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultUpSearchImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultDownSearchImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultUpFolderImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultDownFolderImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.upSearchImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.downSearchImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.upFolderImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.downFolderImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.upSearchOffset;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.downSearchOffset;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.dataInfoService;
    /**
     * 正在加载中的单据节点请求数
     * @type {?}
     */
    BillTrackerGraphComponent.prototype.numCellsAddingReq;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.dataService;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.notify;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.messager;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.loading;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.modal;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.vcr;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.inj;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.cfr;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbC10cmFja2VyLWdyYXBoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL3J1bnRpbWUtYXBpLyIsInNvdXJjZXMiOlsibGliL2JpbGwtdHJhY2tlci9jb21wb25lbnRzL2JpbGwtdHJhY2tlci1ncmFwaC9iaWxsLXRyYWNrZXItZ3JhcGguY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBaUIsS0FBSyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBRSxpQkFBaUIsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUMzTixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLE9BQU8sRUFBZ0IsY0FBYyxFQUFFLGFBQWEsRUFBRSxxQkFBcUIsRUFBRSxXQUFXLEVBQWlCLE9BQU8sRUFBdUIsUUFBUSxFQUFhLE9BQU8sRUFBRSxVQUFVLEVBQXFCLGVBQWUsRUFBRSxtQkFBbUIsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQWtKLGNBQWMsRUFBc0IsTUFBTSxzQkFBc0IsQ0FBQztBQUNuZixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDakUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDbEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDM0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFJNUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQWMsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDOUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDekUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDcEYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDeEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBRWpGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saURBQWlELENBQUM7QUFDL0UsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFM0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQzNGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDeEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7QUFLcEQsWUFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFPakMsTUFBTSxPQUFPLHlCQUF5Qjs7Ozs7Ozs7Ozs7Ozs7SUF3RXBDLFlBQ0UsSUFBcUIsRUFDRixRQUFnQixFQUM1QixXQUFtQyxFQUNuQyxNQUFxQixFQUNyQixRQUF5QixFQUN6QixPQUF1QixFQUN2QixLQUFxQixFQUNyQixHQUFxQixFQUNyQixHQUFhLEVBQ2IsR0FBNkIsRUFDN0IsR0FBc0I7UUFSdEIsZ0JBQVcsR0FBWCxXQUFXLENBQXdCO1FBQ25DLFdBQU0sR0FBTixNQUFNLENBQWU7UUFDckIsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7UUFDekIsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFDdkIsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDckIsUUFBRyxHQUFILEdBQUcsQ0FBa0I7UUFDckIsUUFBRyxHQUFILEdBQUcsQ0FBVTtRQUNiLFFBQUcsR0FBSCxHQUFHLENBQTBCO1FBQzdCLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBekUvQix1QkFBa0IsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRzdDLDRCQUF1QixHQUFHLElBQUksWUFBWSxFQUd0QyxDQUFDO1FBV0wsV0FBTSxHQUFHLEVBQUUsQ0FBQztRQUNaLFdBQU0sR0FBRyxFQUFFLENBQUM7UUFZWixpQkFBWSxHQUFHLEdBQUcsQ0FBQztRQUNuQixrQkFBYSxHQUFHLEdBQUcsQ0FBQztRQUNwQixjQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUM5QixlQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUNoQyx5QkFBb0IsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLEdBQUcscUJBQXFCLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsR0FBRyxxQkFBcUIsQ0FBQztRQUM1SixzQkFBaUIsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLEdBQUcsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQztRQUVqSix3QkFBbUIsR0FBRyxFQUFFLENBQUM7UUFDekIseUJBQW9CLEdBQUcsRUFBRSxDQUFDO1FBQzFCLGlCQUFZLEdBQVcsSUFBSSxDQUFDLG1CQUFtQixDQUFDO1FBQ2hELGtCQUFhLEdBQVcsSUFBSSxDQUFDLG9CQUFvQixDQUFDO1FBRWxELHlCQUFvQixHQUFHLElBQUksT0FBTyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsR0FBRyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNoSSwyQkFBc0IsR0FBRyxJQUFJLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLEdBQUcsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDbEkseUJBQW9CLEdBQUcsSUFBSSxPQUFPLENBQUMsbUJBQW1CLENBQUMsVUFBVSxHQUFHLG9CQUFvQixFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2pJLDJCQUFzQixHQUFHLElBQUksT0FBTyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsR0FBRyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVuSSxrQkFBYSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztRQUMxQyxvQkFBZSxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztRQUM5QyxrQkFBYSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztRQUMxQyxvQkFBZSxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztRQUU5QyxtQkFBYyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLHFCQUFnQixHQUFHLElBQUksT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzs7OztRQU90QyxzQkFBaUIsR0FBRyxDQUFDLENBQUM7UUFlcEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSwwQkFBMEIsRUFBRSxDQUFDO1FBRXhELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDOztjQUN0QixZQUFZLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZO1FBQ3RELElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDOztjQUMzQixXQUFXLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXO1FBQ3BELElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBRS9CLElBQUksQ0FBQyxhQUFhLEdBQUcsWUFBWSxJQUFJLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDdEssSUFBSSxDQUFDLGVBQWUsR0FBRyxZQUFZLElBQUksWUFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUM5SyxJQUFJLENBQUMsYUFBYSxHQUFHLFlBQVksSUFBSSxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ3RLLElBQUksQ0FBQyxlQUFlLEdBQUcsWUFBWSxJQUFJLFlBQVksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDaEwsQ0FBQzs7OztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7Ozs7SUFFRCxlQUFlO0lBRWYsQ0FBQzs7Ozs7SUFFRCxPQUFPLENBQUMsZ0JBQXlCLElBQUk7UUFDbkMsSUFBSSxhQUFhLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUU7WUFDdkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUM1QjtJQUNILENBQUM7Ozs7SUFFTSxLQUFLO1FBQ1YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7Ozs7SUFFTSxXQUFXLENBQUMsUUFBb0I7UUFDckMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFFekIsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksRUFBRTtZQUN6QixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQVM7Ozs7WUFBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUNyRCxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDckMsQ0FBQyxFQUFDLENBQUM7OztnQkFFQyxJQUFJLEdBQUcsQ0FBQztZQUNaLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUzs7OztZQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ3RELElBQUksSUFBSSxJQUFJLENBQUMsRUFBRTtvQkFDYixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7aUJBQ2hCO2dCQUNELElBQUksRUFBRSxDQUFDO1lBQ1QsQ0FBQyxFQUFDLENBQUM7U0FDSjtJQUNILENBQUM7Ozs7SUFFTSxXQUFXO1FBQ2hCLFdBQVc7UUFDWCxjQUFjLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDOUMsbUJBQW1CO1FBQ25CLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRTdELGNBQWMsQ0FBQyxTQUFTLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUM5QyxjQUFjLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFFMUMsa0JBQWtCO1FBQ2xCLFdBQVcsQ0FBQyxnQkFBZ0IsR0FBRyxTQUFTLENBQUM7UUFDekMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxXQUFXOzs7O1FBQUcsVUFBVSxJQUFJOztrQkFDdkMsTUFBTSxHQUFHLElBQUksU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsV0FBVyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsV0FBVyxDQUFDO1lBRXBGLE9BQU8sSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUM3RixDQUFDLENBQUEsQ0FBQztRQUNGLGVBQWUsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsR0FBRyxrQkFBa0IsRUFBRSxXQUFXLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLGtEQUFrRCxHQUFHLEtBQUssQ0FBQyxVQUFVLEdBQUcsc0JBQXNCLENBQUMsQ0FBQztRQUUvUyxXQUFXLENBQUMsbUJBQW1CLEdBQUcsU0FBUyxDQUFDO1FBQzVDLFdBQVcsQ0FBQyxxQkFBcUIsR0FBRyxDQUFDLENBQUM7UUFFdEMsZUFBZTtRQUNmLFdBQVcsQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDO1FBQ3BDLE9BQU8sQ0FBQyxTQUFTLENBQUMsZ0JBQWdCOzs7O1FBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLElBQUksVUFBVSxDQUFDLEVBQUUsRUFBRSxXQUFXLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBLENBQUM7UUFFaEksWUFBWTtRQUNaLFdBQVcsQ0FBQyw0QkFBNEIsR0FBRyxDQUFDLENBQUM7UUFDN0MsV0FBVyxDQUFDLHNCQUFzQixHQUFHLFNBQVMsQ0FBQztRQUMvQyxXQUFXLENBQUMsdUJBQXVCLEdBQUcsS0FBSyxDQUFDO1FBRTVDLE1BQU07UUFDTixtQkFBbUIsQ0FBQyxTQUFTLENBQUMsWUFBWTs7OztRQUFHLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUEsQ0FBQztRQUMvRCxXQUFXLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQzs7O2NBRzlCLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQztRQUMxRixLQUFLLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDbkMsS0FBSyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ3ZDLEtBQUssQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNyQyxVQUFVO1FBQ1YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7O0lBRU0sWUFBWSxDQUFDLEtBQVk7O2NBQ3hCLFFBQVEsR0FBRyxJQUFJLHVCQUF1QixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUM7UUFDekQsUUFBUSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQzdCLFFBQVEsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBRTVCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDOztjQUVuQixVQUFVLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDO1FBQ3JELFVBQVUsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN2QyxVQUFVLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUMvQixVQUFVLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUU3QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUMvQixDQUFDOzs7OztJQUVNLFdBQVcsQ0FBQyxLQUFVOztjQUNyQixpQkFBaUI7OztRQUFHLEdBQUcsRUFBRTtZQUM3QixNQUFNLENBQUMsVUFBVTs7O1lBQUMsR0FBRyxFQUFFO2dCQUNyQixJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO29CQUN0QixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7aUJBQ2hCO1lBQ0gsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ1IsQ0FBQyxDQUFBO1FBQ0QsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixDQUFDLENBQUM7O2NBRW5ELGtCQUFrQjs7Ozs7UUFBRyxDQUFDLEdBQWUsRUFBRSxFQUFXLEVBQUUsRUFBRTtZQUMxRCw4QkFBOEI7WUFDOUIsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ2xFLElBQUksRUFBRSxFQUFFO29CQUNOLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztpQkFDZjtxQkFBTTtvQkFDTCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7aUJBQ2hCO2dCQUNELE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3JCLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7UUFDSCxDQUFDLENBQUE7UUFFRCxPQUFPLENBQUMscUJBQXFCLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVwRixLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU07Ozs7O1FBQUUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDcEUsSUFBSSxDQUFDLENBQUMsTUFBTSxZQUFZLHFCQUFxQixDQUFDLEVBQUU7Z0JBQzlDLE9BQU87YUFDUjs7Z0JBQ0csY0FBYyxHQUFHLE1BQU07WUFDM0Isa0JBQWtCO1lBQ2xCLElBQUksY0FBYyxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUksY0FBYyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO2dCQUNwRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNuQyxPQUFPO2FBQ1I7O2dCQUNHLFlBQVksR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUMxQyxPQUFPO1lBQ1AsSUFBSSxZQUFZLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRTtnQkFDN0MsT0FBTzthQUNSO1lBRUQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM3QyxDQUFDLEVBQUMsQ0FBQztRQUVILEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLG1CQUFtQjs7Ozs7UUFBRSxDQUFDLE1BQU0sRUFBRSxHQUE0QixFQUFFLEVBQUU7O2tCQUMvRSxJQUFJLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUM7WUFDcEMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQztnQkFDaEMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxtQkFBbUI7Z0JBQ2hDLElBQUksRUFBRSxJQUFJO2FBQ1gsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVNLFVBQVUsQ0FBQyxLQUFZO1FBQzVCLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7Ozs7O0lBRU0sZUFBZSxDQUFDLEtBQVksRUFBRSxLQUFlO1FBQ2xELElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtZQUNqQixPQUFPO1NBQ1I7UUFFRCxXQUFXO1FBQ1gsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsYUFBYSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7OztjQUcvRSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQjtRQUNoRSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLGFBQWEsSUFBSSxJQUFJLEVBQUU7WUFDM0QsaUJBQWlCLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQzlKO1FBQ0QsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxXQUFXLElBQUksSUFBSSxFQUFFO1lBQ3pELGlCQUFpQixDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUN4SjtJQUNILENBQUM7Ozs7O0lBRU0sVUFBVSxDQUFDLEtBQVk7O1lBQ3hCLEtBQUssR0FBYSxJQUFJO1FBRTFCLElBQUksSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsSUFBSSxJQUFJLEVBQUU7WUFDbEYsT0FBTyxLQUFLLENBQUM7U0FDZDs7Y0FFSyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQjs7Y0FDMUQsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsaUJBQWlCLENBQUM7O2NBQzdELFFBQVEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQzs7WUFDbEMsR0FBRyxHQUF5QixJQUFJLG9CQUFvQixFQUFFO1FBQzFELEdBQUcsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsb0JBQW9CLENBQUMsQ0FBQzs7Y0FFbkQsTUFBTSxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRTtRQUV2QyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDL0IsSUFBSTs7Z0JBQ0UsRUFBRSxHQUFHLENBQUM7O2dCQUNOLEVBQUUsR0FBRyxDQUFDOztnQkFFTixHQUFHLEdBQXlCLElBQUksb0JBQW9CLEVBQUU7WUFDMUQsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLG9CQUFvQixFQUFFO2dCQUNyQyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO2FBQzdDOztnQkFDRyxXQUFXLEdBQUcsRUFBRTtZQUNwQixLQUFLLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLDBCQUEwQixXQUFXLEVBQUUsQ0FBQyxDQUFDOztnQkFFL0ksUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDOztnQkFDOUMsSUFBSSxHQUFHLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUM7WUFFL0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO1lBQ3pDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM1QyxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO1lBQ3pELEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztZQUVoQyxXQUFXO1lBQ1gsSUFBSSxpQkFBaUIsQ0FBQyxlQUFlLEVBQUU7O3NCQUMvQixPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO2dCQUNqRCxLQUFLLENBQUMsZUFBZSxHQUFHLE9BQU8sQ0FBQzthQUNqQztZQUNELElBQUksaUJBQWlCLENBQUMsYUFBYSxFQUFFOztzQkFDN0IsT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQztnQkFDL0MsS0FBSyxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUM7YUFDL0I7WUFFRCxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUMvQixJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNqQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDMUQ7Z0JBQ087WUFDTixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDOUI7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7OztJQUVNLFlBQVksQ0FBQyxLQUFZLEVBQUUsSUFBYzs7WUFDMUMsUUFBUSxHQUFHLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQUUsV0FBVyxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO1FBQ3hLLFFBQVEsQ0FBQyxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDOztjQUNuQyxlQUFlOzs7OztRQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFOztrQkFDaEMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDO1lBQzlDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUMvQixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDM0MsUUFBUSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUN6QyxRQUFRLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3ZELFFBQVEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztZQUNwQyxRQUFRLENBQUMsS0FBSyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQztZQUN2QyxRQUFRLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsZUFBZSxDQUFDLENBQUM7WUFDckQsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN4QyxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNyQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDL0IsQ0FBQyxDQUFBOztjQUNLLGVBQWU7Ozs7O1FBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBNEIsRUFBRSxFQUFFO1lBQy9ELEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUMvQixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDMUQsUUFBUSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUN6QyxRQUFRLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3pELFFBQVEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztZQUNwQyxRQUFRLENBQUMsS0FBSyxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztZQUN6QyxRQUFRLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsZUFBZSxDQUFDLENBQUM7WUFDckQsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN4QyxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNyQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzFCLENBQUMsQ0FBQTtRQUVELFFBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxlQUFlLENBQUMsQ0FBQztRQUNyRCxLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRXJDLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7Ozs7OztJQUVNLGNBQWMsQ0FBQyxLQUFZLEVBQUUsSUFBYzs7WUFDNUMsVUFBVSxHQUFHLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEVBQUUsV0FBVyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUM7UUFDakwsVUFBVSxDQUFDLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUM7O2NBQ3JDLGlCQUFpQjs7Ozs7UUFBRyxDQUFDLE1BQU0sRUFBRSxHQUE0QixFQUFFLEVBQUU7O2tCQUMzRCxTQUFTLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUM7WUFDOUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQy9CLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztZQUM3QyxVQUFVLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7WUFDeEMsVUFBVSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN6RCxVQUFVLENBQUMsS0FBSyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQztZQUN6QyxVQUFVLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDN0MsVUFBVSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDekQsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztZQUMxQyxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztZQUN2Qyx1QkFBdUI7WUFDdkIsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQy9CLENBQUMsQ0FBQTs7Y0FFSyxpQkFBaUI7Ozs7O1FBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDeEMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQy9CLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM1RCxVQUFVLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7WUFDeEMsVUFBVSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM3RCxVQUFVLENBQUMsS0FBSyxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztZQUMzQyxVQUFVLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDN0MsVUFBVSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDekQsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztZQUMxQyxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztZQUN2Qyx1QkFBdUI7WUFDdkIsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQy9CLENBQUMsQ0FBQTtRQUVELFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3pELEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDMUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFdkMsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQzs7Ozs7OztJQUVNLGFBQWEsQ0FBQyxLQUFZLEVBQUUsSUFBYyxFQUFFLFlBQXFCLEtBQUs7UUFDM0UsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDOztjQUN6QixJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUM7UUFFM0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVM7Ozs7UUFDN0MsQ0FBQyxLQUF5QixFQUFFLEVBQUU7O2dCQUN4QixNQUFNLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixFQUFFOztnQkFFakMsUUFBUSxHQUFHLEVBQUU7WUFDakIsa0NBQWtDO1lBQ2xDLElBQUk7Z0JBQ0YsS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLEVBQUU7b0JBQ3RCLEtBQUssSUFBSSxRQUFRLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTs7NEJBQ25DLFFBQVEsR0FBRyxJQUFJOzs0QkFDZixHQUFHLEdBQXlCLElBQUksb0JBQW9CLEVBQUU7d0JBQzFELElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxvQkFBb0IsRUFBRTs0QkFDckMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQzt5QkFDN0M7OzRCQUVHLFdBQVcsR0FBRyxFQUFFO3dCQUNwQixRQUFRLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxZQUFZLFdBQVcsRUFBRSxDQUFDLENBQUM7d0JBRXhMLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7cUJBQ3pCO2lCQUNGO2dCQUVELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFFdEUsS0FBSyxJQUFJLEVBQUUsSUFBSSxRQUFRLEVBQUU7b0JBQ3ZCLElBQUksRUFBRSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsRUFBRTs7OEJBQ2pDLEVBQUUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7d0JBQ3ZDLEVBQUUsQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDO3FCQUN2QjtvQkFDRCxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztpQkFDbEU7O3NCQUVLLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssRUFBRTtnQkFDL0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7O3NCQUMzQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUU7O3NCQUN6QyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQzs7c0JBQ3hCLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO2dCQUU5QixJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDOztzQkFFL0MsUUFBUSxHQUFHLG1CQUFBLElBQUksQ0FBQyxJQUFJLEVBQWM7Z0JBQ3hDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztnQkFDeEIsS0FBSyxJQUFJLEVBQUUsSUFBSSxRQUFRLEVBQUU7OzBCQUNqQixFQUFFLEdBQUcsSUFBSSxVQUFVLEVBQUU7b0JBQzNCLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO29CQUN6QixFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztvQkFFYixFQUFFLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztvQkFDbkIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7aUJBQ3ZCO2FBQ0Y7b0JBQ087Z0JBQ04sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO2FBQzlCO1lBQ0QsU0FBUztZQUNULFNBQVMsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7WUFDekUsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDekIsa0JBQWtCO1lBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQywwQkFBMEIsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUN2SCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3ZCLENBQUM7Ozs7UUFDRCxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ04sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUMvRyxNQUFNLEdBQUcsQ0FBQztRQUNaLENBQUMsRUFDRixDQUFDO0lBQ0osQ0FBQzs7Ozs7OztJQUVNLGVBQWUsQ0FBQyxLQUFZLEVBQUUsSUFBYyxFQUFFLFlBQXFCLEtBQUs7UUFDN0UsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDOztjQUN6QixJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUM7UUFFN0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUzs7OztRQUMvQyxDQUFDLEtBQTJCLEVBQUUsRUFBRTs7Z0JBQzFCLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFOztnQkFDeEIsTUFBTSxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRTs7Z0JBRWpDLFFBQVEsR0FBRyxFQUFFO1lBQ2pCLGtDQUFrQztZQUNsQyxJQUFJO2dCQUNGLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxFQUFFO29CQUN0QixLQUFLLElBQUksUUFBUSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7OzRCQUNuQyxRQUFRLEdBQUcsSUFBSTs7NEJBQ2YsR0FBRyxHQUF5QixJQUFJLG9CQUFvQixFQUFFO3dCQUMxRCxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUU7NEJBQ3JDLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7eUJBQzdDOzs0QkFFRyxXQUFXLEdBQUcsRUFBRTt3QkFDcEIsUUFBUSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsWUFBWSxXQUFXLEVBQUUsQ0FBQyxDQUFDO3dCQUUxTCxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3FCQUN6QjtpQkFDRjtnQkFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBRXhFLEtBQUssSUFBSSxFQUFFLElBQUksUUFBUSxFQUFFO29CQUN2QixJQUFJLEVBQUUsQ0FBQyxZQUFZLENBQUMsbUJBQW1CLEVBQUU7OzhCQUNqQyxFQUFFLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO3dCQUN6QyxFQUFFLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztxQkFDekI7b0JBQ0QsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLGtCQUFrQixDQUFDLENBQUM7aUJBQ2xFOztzQkFFSyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUU7Z0JBQy9DLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDOztzQkFDL0MsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxFQUFFOztzQkFDekMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7O3NCQUN4QixFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztnQkFFOUIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQzs7c0JBRS9DLFFBQVEsR0FBRyxtQkFBQSxJQUFJLENBQUMsSUFBSSxFQUFnQjtnQkFDMUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2dCQUMxQixLQUFLLElBQUksRUFBRSxJQUFJLFFBQVEsRUFBRTs7MEJBQ2pCLEVBQUUsR0FBRyxJQUFJLFlBQVksRUFBRTtvQkFDN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBQ3pCLEVBQUUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO29CQUViLEVBQUUsQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDO29CQUNqQixRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDekI7YUFDRjtvQkFDTztnQkFDTixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7YUFDOUI7WUFDRCxTQUFTO1lBQ1QsU0FBUyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztZQUN6RSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUN6QixrQkFBa0I7WUFDbEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLDBCQUEwQixFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ3pILElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdkIsQ0FBQzs7OztRQUNELENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDTixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQy9HLE1BQU0sR0FBRyxDQUFDO1FBQ1osQ0FBQyxFQUNGLENBQUM7SUFDSixDQUFDOzs7Ozs7O0lBRU0sY0FBYyxDQUFDLEtBQVksRUFBRSxJQUFjLEVBQUUsR0FBeUI7O2NBQ3JFLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFOztjQUN4QixNQUFNLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixFQUFFO1FBQ3ZDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMvQixJQUFJOztnQkFDRSxTQUFTLEdBQWUsRUFBRTtZQUM5QixJQUFJLEdBQUcsSUFBSSxvQkFBb0IsQ0FBQyxJQUFJLEVBQUU7O29CQUNoQyxLQUFLLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQzs7b0JBQ3BDLENBQUMsR0FBRyxDQUFDO2dCQUNULE9BQU8sS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFO29CQUNwRCxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO3dCQUNwRCxTQUFTLENBQUMsSUFBSSxDQUFDLG1CQUFBLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQVksQ0FBQyxDQUFDO3dCQUM1QyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3FCQUN4RDtvQkFDRCxDQUFDLEVBQUUsQ0FBQztpQkFDTDthQUNGO2lCQUFNLElBQUksR0FBRyxJQUFJLG9CQUFvQixDQUFDLEVBQUUsRUFBRTs7b0JBQ3JDLEtBQUssR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDOztvQkFDcEMsQ0FBQyxHQUFHLENBQUM7Z0JBQ1QsT0FBTyxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUU7b0JBQ3BELElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7d0JBQ3BELFNBQVMsQ0FBQyxJQUFJLENBQUMsbUJBQUEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBWSxDQUFDLENBQUM7d0JBQzVDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7cUJBQ3hEO29CQUNELENBQUMsRUFBRSxDQUFDO2lCQUNMO2FBQ0Y7WUFDRCxJQUFJLEdBQUcsSUFBSSxvQkFBb0IsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3BDLENBQUMsbUJBQUEsSUFBSSxDQUFDLElBQUksRUFBZ0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2FBQzlDO2lCQUFNLElBQUksR0FBRyxJQUFJLG9CQUFvQixDQUFDLEVBQUUsRUFBRTtnQkFDekMsQ0FBQyxtQkFBQSxJQUFJLENBQUMsSUFBSSxFQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQzthQUMxQztZQUNELEtBQUssQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7O2tCQUV2QixNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUU7WUFDL0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7O2tCQUMzQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUU7O2tCQUN6QyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQzs7a0JBQ3hCLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7O2tCQUUvQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUU7WUFDaEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7O2tCQUMvQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUU7O2tCQUMxQyxHQUFHLEdBQUcsT0FBTyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQzs7a0JBQzNCLEdBQUcsR0FBRyxPQUFPLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDeEQ7Z0JBQVM7WUFDUixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDOUI7SUFDSCxDQUFDOzs7Ozs7OztJQUVNLG9CQUFvQixDQUFDLEtBQVksRUFBRSxLQUFlLEVBQUUsRUFBVSxFQUFFLEVBQVU7UUFDL0UsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQy9CLElBQUk7O2dCQUNFLFFBQVEsR0FBdUIsSUFBSTtZQUN2QyxRQUFRLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzdILEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUNuQztnQkFBUztZQUNSLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUM5QjtJQUNILENBQUM7Ozs7Ozs7O0lBRU0sZ0JBQWdCLENBQUMsS0FBWSxFQUFFLElBQWMsRUFBRSxRQUFvQixFQUFFLEdBQXlCO1FBQ25HLElBQUksR0FBRyxJQUFJLG9CQUFvQixDQUFDLElBQUksRUFBRTtZQUNwQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztTQUNwRDthQUFNLElBQUksR0FBRyxJQUFJLG9CQUFvQixDQUFDLEVBQUUsRUFBRTtZQUN6QyxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztTQUNsRDtJQUNILENBQUM7Ozs7Ozs7SUFFTSxzQkFBc0IsQ0FBQyxLQUFZLEVBQUUsSUFBYyxFQUFFLFFBQW9CO1FBQzlFLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMvQixJQUFJOztnQkFDRSxPQUFPLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUc7Ozs7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUM7O2dCQUUvRCxLQUFLLEdBQUcsT0FBTzs7O2dCQUdmLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSTs7Ozs7WUFBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUM7OztnQkFFNUcsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7OztnQkFFM0UsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2pFLGVBQWU7WUFDZixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDeEMsSUFBSSxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNwRCxLQUFLLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25FLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDekI7O2dCQUNHLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDOztnQkFDeEIsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUk7WUFDbEMsWUFBWTtZQUNaLEtBQUssQ0FBQyxPQUFPOzs7O1lBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2hCLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNuQyxDQUFDLEVBQUMsQ0FBQztZQUNILElBQUksSUFBSSxLQUFLLENBQUM7WUFDZCxJQUFJLElBQUksS0FBSyxDQUFDO1lBRWQsSUFBSSxJQUFJLEtBQUssQ0FBQztZQUNkLGtEQUFrRDtZQUNsRCxLQUFLLElBQUksR0FBRyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFO2dCQUNqQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRTtvQkFDaEksU0FBUztpQkFDVjtnQkFDRCxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLG1CQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtvQkFDM0YsU0FBUztpQkFDVjtnQkFDRCxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7b0JBQ3hDLFNBQVM7aUJBQ1Y7Z0JBQ0QsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRTtvQkFDN0QsU0FBUztpQkFDVjs7c0JBQ0ssQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7b0JBQzVCLEdBQUcsR0FBRyxDQUFDLENBQUMsUUFBUTtnQkFDcEIsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzNJO1NBQ0Y7Z0JBQVM7WUFDUixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDOUI7SUFDSCxDQUFDOzs7Ozs7O0lBRU0sb0JBQW9CLENBQUMsS0FBWSxFQUFFLElBQWMsRUFBRSxRQUFvQjtRQUM1RSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDL0IsSUFBSTs7Z0JBQ0UsT0FBTyxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHOzs7O1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDOztnQkFDL0QsS0FBSyxHQUFHLE9BQU87OztnQkFHZixJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUk7Ozs7O1lBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFDOzs7Z0JBRTVHLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7Z0JBRTNFLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNqRSxlQUFlO1lBQ2YsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3hDLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDcEQsS0FBSyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNuRSxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3pCOztnQkFDRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQzs7Z0JBQ3hCLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJO1lBQ2xDLFlBQVk7WUFDWixLQUFLLENBQUMsT0FBTzs7OztZQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNoQixLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDbkMsQ0FBQyxFQUFDLENBQUM7WUFDSCxJQUFJLElBQUksS0FBSyxDQUFDO1lBQ2QsSUFBSSxJQUFJLEtBQUssQ0FBQztZQUVkLElBQUksSUFBSSxLQUFLLENBQUM7WUFDZCxrREFBa0Q7WUFDbEQsS0FBSyxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRTtnQkFDakMsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUU7b0JBQ2hJLFNBQVM7aUJBQ1Y7Z0JBQ0QsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxtQkFBQSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7b0JBQzNGLFNBQVM7aUJBQ1Y7Z0JBQ0QsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO29CQUN4QyxTQUFTO2lCQUNWO2dCQUNELElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUU7b0JBQzdELFNBQVM7aUJBQ1Y7O3NCQUNLLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O29CQUM1QixHQUFHLEdBQUcsQ0FBQyxDQUFDLFFBQVE7Z0JBRXBCLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMzSTtTQUNGO2dCQUFTO1lBQ1IsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQzlCO0lBQ0gsQ0FBQzs7Ozs7O0lBRU0sV0FBVyxDQUFDLFFBQWtCLEVBQUUsSUFBYztRQUNuRCxRQUFRLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDbEMsUUFBUSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLFFBQVEsQ0FBQyxXQUFXLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBQ2pELFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQ25ELFFBQVEsQ0FBQyxXQUFXLENBQUMsUUFBUSxHQUFHO1lBQzlCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztTQUNsQixDQUFDO0lBQ0osQ0FBQzs7OztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFFRCxNQUFNO1FBQ0osSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN0QixDQUFDOzs7O0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7OztJQUVELFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Ozs7SUFFRCxLQUFLOztjQUNHLE9BQU8sR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNqRCxPQUFPLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztRQUM3QixPQUFPLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztRQUM3QixPQUFPLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDO1FBRXBDLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7Ozs7SUFFRCxNQUFNLENBQUMsU0FBK0IsRUFBRSxNQUFlLEtBQUs7UUFDMUQsSUFBSSxHQUFHLEVBQUU7WUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzFCLE9BQU87U0FDUjtRQUNELElBQUksU0FBUyxJQUFJLG9CQUFvQixDQUFDLEVBQUUsRUFBRTs7a0JBQ2xDLEtBQUssR0FBdUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQzlDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2hFLEtBQUssQ0FBQyxPQUFPOzs7O1lBQUMsQ0FBQyxJQUFjLEVBQUUsRUFBRTtnQkFDL0IsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxJQUFJLGdCQUFnQixDQUFDLE1BQU0sRUFBRTtvQkFDN0UsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7aUJBQ2hFO1lBQ0gsQ0FBQyxFQUFDLENBQUM7U0FDSjthQUFNLElBQUksU0FBUyxJQUFJLG9CQUFvQixDQUFDLElBQUksRUFBRTs7a0JBQzNDLEtBQUssR0FBdUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQzlDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BFLEtBQUssQ0FBQyxPQUFPOzs7O1lBQUMsQ0FBQyxJQUFjLEVBQUUsRUFBRTtnQkFDL0IsSUFBSSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxJQUFJLGdCQUFnQixDQUFDLE1BQU0sRUFBRTtvQkFDakYsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7aUJBQ2xFO1lBQ0gsQ0FBQyxFQUFDLENBQUM7U0FDSjtJQUNILENBQUM7Ozs7O0lBRUQsU0FBUyxDQUFDLFNBQStCO1FBQ3ZDLElBQUksU0FBUyxJQUFJLG9CQUFvQixDQUFDLEVBQUUsSUFBSSxTQUFTLElBQUksb0JBQW9CLENBQUMsSUFBSSxFQUFFO1lBQ2xGLE9BQU87U0FDUjs7O1lBR0csMkJBQTJCLEdBQUcsSUFBSTtRQUN0QyxJQUFJLFNBQVMsSUFBSSxvQkFBb0IsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsMkJBQTJCOzs7WUFBRyxHQUFHLEVBQUU7O3NCQUMzQixLQUFLLEdBQXVCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDOUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7O3NCQUUxRCxlQUFlLEdBQUcsS0FBSyxDQUFDLE1BQU07Ozs7Z0JBQUMsQ0FBQyxJQUFjLEVBQUUsRUFBRTtvQkFDdEQsT0FBTyxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztnQkFDbkYsQ0FBQyxFQUFDO2dCQUVGLDRCQUE0QjtnQkFDNUIsSUFBSSxlQUFlLElBQUksSUFBSSxJQUFJLGVBQWUsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO29CQUMxRCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsS0FBSyxDQUFDLEVBQUU7d0JBQ2hDLHdCQUF3Qjt3QkFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsMkJBQTJCLENBQUMsQ0FBQzt3QkFDdkQsZ0NBQWdDO3FCQUNqQztpQkFDRjtxQkFBTTtvQkFDTCxlQUFlLENBQUMsT0FBTzs7OztvQkFBQyxDQUFDLElBQWMsRUFBRSxFQUFFO3dCQUN6QyxJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLElBQUksZ0JBQWdCLENBQUMsTUFBTSxFQUFFOzRCQUM3RSxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzt5QkFDaEU7b0JBQ0gsQ0FBQyxFQUFDLENBQUM7aUJBQ0o7WUFDSCxDQUFDLENBQUEsQ0FBQztTQUNIO2FBQU0sSUFBSSxTQUFTLElBQUksb0JBQW9CLENBQUMsSUFBSSxFQUFFO1lBQ2pELDJCQUEyQjs7O1lBQUcsR0FBRyxFQUFFOztzQkFDM0IsS0FBSyxHQUF1QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQzlDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztzQkFFOUQsaUJBQWlCLEdBQUcsS0FBSyxDQUFDLE1BQU07Ozs7Z0JBQUMsQ0FBQyxJQUFjLEVBQUUsRUFBRTtvQkFDeEQsT0FBTyxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztnQkFDdkYsQ0FBQyxFQUFDO2dCQUVGLDRCQUE0QjtnQkFDNUIsSUFBSSxpQkFBaUIsSUFBSSxJQUFJLElBQUksaUJBQWlCLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtvQkFDOUQsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEtBQUssQ0FBQyxFQUFFO3dCQUNoQyx3QkFBd0I7d0JBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLDJCQUEyQixDQUFDLENBQUM7d0JBQ3ZELGdDQUFnQztxQkFDakM7aUJBQ0Y7cUJBQU07b0JBQ0wsaUJBQWlCLENBQUMsT0FBTzs7OztvQkFBQyxDQUFDLElBQWMsRUFBRSxFQUFFO3dCQUMzQyxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLElBQUksZ0JBQWdCLENBQUMsTUFBTSxFQUFFOzRCQUNqRixJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzt5QkFDbEU7b0JBQ0gsQ0FBQyxFQUFDLENBQUM7aUJBQ0o7WUFDSCxDQUFDLENBQUEsQ0FBQztTQUNIO1FBRUQsNkJBQTZCO1FBQzdCLFFBQVE7UUFDUix3QkFBd0I7UUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsd0JBQXdCLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztRQUU5RSxhQUFhO1FBQ2IsMkJBQTJCLEVBQUUsQ0FBQztJQUNoQyxDQUFDOzs7WUFsMkJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsd0JBQXdCO2dCQUNsQyx5T0FBa0Q7O2FBRW5EOzs7O1lBckNRLGVBQWU7eUNBZ0huQixNQUFNLFNBQUMsU0FBUztZQS9HWixzQkFBc0I7WUFrQnRCLGFBQWE7WUFaYixlQUFlO1lBQ2YsY0FBYztZQUNGLGNBQWM7WUFaK0UsZ0JBQWdCO1lBQUUsUUFBUTtZQUFFLHdCQUF3QjtZQUFFLGlCQUFpQjs7OzRCQTRDdEwsU0FBUyxTQUFDLGFBQWE7aUNBR3ZCLFNBQVMsU0FBQyxvQkFBb0I7aUNBRzlCLE1BQU0sU0FBQyxRQUFRO3NDQUdmLE1BQU0sU0FBQyxhQUFhOzhCQU1wQixLQUFLLFNBQUMsaUJBQWlCOzs7O0lBakJ4QiwrQ0FBa0M7O0lBRWxDLGtEQUMwQzs7SUFFMUMsdURBQytDOztJQUUvQyx1REFDNkM7O0lBRTdDLDREQUlLOztJQUVMLG9EQUNpQzs7SUFFakMsaURBQXNDOztJQUN0QyxnREFBb0M7O0lBRXBDLDZDQUFxQjs7SUFFckIsMENBQWE7O0lBQ2IsMkNBQVk7O0lBQ1osMkNBQVk7O0lBQ1osNkNBQWtDOztJQUNsQywrQ0FBOEI7O0lBQzlCLDRDQUFpQjs7SUFFakIsa0RBQTZCOztJQUU3QixrREFBeUM7O0lBQ3pDLDBDQUFnQjs7SUFDaEIsNkNBQTJCOztJQUMzQiwrQ0FBNkI7O0lBRTdCLGlEQUFtQjs7SUFDbkIsa0RBQW9COztJQUNwQiw4Q0FBOEI7O0lBQzlCLCtDQUFnQzs7SUFDaEMseURBQTRKOztJQUM1SixzREFBaUo7O0lBRWpKLHdEQUF5Qjs7SUFDekIseURBQTBCOztJQUMxQixpREFBZ0Q7O0lBQ2hELGtEQUFrRDs7SUFFbEQseURBQWdJOztJQUNoSSwyREFBa0k7O0lBQ2xJLHlEQUFpSTs7SUFDakksMkRBQW1JOztJQUVuSSxrREFBMEM7O0lBQzFDLG9EQUE4Qzs7SUFDOUMsa0RBQTBDOztJQUMxQyxvREFBOEM7O0lBRTlDLG1EQUFxQzs7SUFDckMscURBQXNDOztJQUV0QyxvREFBNEM7Ozs7O0lBSzVDLHNEQUFzQjs7SUFLcEIsZ0RBQTBDOztJQUMxQywyQ0FBNEI7O0lBQzVCLDZDQUFnQzs7SUFDaEMsNENBQThCOztJQUM5QiwwQ0FBNEI7O0lBQzVCLHdDQUE0Qjs7SUFDNUIsd0NBQW9COztJQUNwQix3Q0FBb0M7O0lBQ3BDLHdDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBJbmplY3QsIExPQ0FMRV9JRCwgQWZ0ZXJWaWV3SW5pdCwgSW5wdXQsIFZpZXdDb250YWluZXJSZWYsIEluamVjdG9yLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIENoYW5nZURldGVjdG9yUmVmLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBHcmFwaCB9IGZyb20gJy4uLy4uL214Z3JhcGgtZXh0L0dyYXBoJztcclxuaW1wb3J0IHsgbXhFdmVudCwgbXhSdWJiZXJiYW5kLCBteEdyYXBoSGFuZGxlciwgbXhFdmVudE9iamVjdCwgbXhHcmFwaFNlbGVjdGlvbk1vZGVsLCBteENvbnN0YW50cywgbXhDZWxsT3ZlcmxheSwgbXhJbWFnZSwgbXhDb21wYWN0VHJlZUxheW91dCwgbXhDbGllbnQsIE14R3JhcGhOUywgbXhHdWlkZSwgbXhQb2x5bGluZSwgbXhTd2ltbGFuZU1hbmFnZXIsIG14TGF5b3V0TWFuYWdlciwgbXhDb25uZWN0aW9uSGFuZGxlciwgbXhFbGxpcHNlLCBteEhhbmRsZSwgbXhWZXJ0ZXhIYW5kbGVyLCBteFBvaW50LCBteFN3aW1sYW5lTGF5b3V0LCBteEhpZXJhcmNoaWNhbExheW91dCwgbXhNb3JwaGluZywgbXhSZWN0YW5nbGVTaGFwZSwgbXhDb25uZWN0aW9uQ29uc3RyYWludCwgbXhFZGdlSGFuZGxlciwgbXhTaGFwZSwgbXhDZWxsU3RhdGUsIG14UmVjdGFuZ2xlLCBteFByaW50UHJldmlldywgbXhVdGlscywgbXhPdXRsaW5lIH0gZnJvbSBcIi4uLy4uLy4uL3JlZi9teGdyYXBoXCI7XHJcbmltcG9ydCB7IEJpbGxUcmFja2VyQXJncyB9IGZyb20gJy4uLy4uL2NvbmZpZy9iaWxsLXRyYWNrZXItYXJncyc7XHJcbmltcG9ydCB7IEJpbGxUcmFja2VyRGF0YVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9iaWxsLXRyYWNrZXItZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQmlsbFRyYWNrZXJEaXJlY3Rpb24gfSBmcm9tICcuLi8uLi9jb25maWcvYmlsbC10cmFja2VyLWRpcmVjdGlvbic7XHJcbmltcG9ydCB7IEJpbGxUcmFja2VyTG9jYWxlUGlwZSB9IGZyb20gJy4uLy4uL3BpcGUvYmlsbC10cmFja2VyLWxvY2FsZS5waXBlJztcclxuaW1wb3J0IHsgQmlsbENlbGwgfSBmcm9tICcuLi8uLi9teGdyYXBoLWV4dC9CaWxsQ2VsbCc7XHJcbmltcG9ydCB7IERvd25CaWxsSW5mb1Jlc3VsdCB9IGZyb20gJy4uLy4uL2FyZ3MvRG93bkJpbGxJbmZvUmVzdWx0JztcclxuaW1wb3J0IHsgVXBCaWxsSW5mb1Jlc3VsdCB9IGZyb20gJy4uLy4uL2FyZ3MvVXBCaWxsSW5mb1Jlc3VsdCc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5pbXBvcnQgeyBMb2FkaW5nU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9hZGluZyc7XHJcbmltcG9ydCB7IEJzTW9kYWxSZWYsIEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbCc7XHJcbmltcG9ydCB7IEJpbGxUcmFja2VyQ29uc3RhbnQgfSBmcm9tICcuLi8uLi9jb25maWcvYmlsbC10cmFja2VyLWNvbnN0YW50JztcclxuaW1wb3J0IHsgUmV2ZXJ0Q29tcGFjdFRyZWVMYXlvdXQgfSBmcm9tICcuLi8uLi9teGdyYXBoLWV4dC9SZXZlcnRDb21wYWN0VHJlZUxheW91dCc7XHJcbmltcG9ydCB7IENvbXBhY3RUcmVlTGF5b3V0IH0gZnJvbSAnLi4vLi4vbXhncmFwaC1leHQvQ29tcGFjdFRyZWVMYXlvdXQnO1xyXG5pbXBvcnQgeyBFbnRyeUNlbGxEYXRhIH0gZnJvbSAnLi4vLi4vLi4vZW50aXR5L3RyYWNraW5nL2NlbGwtZGF0YS9FbnRyeUNlbGxEYXRhJztcclxuaW1wb3J0IHsgQ2VsbERhdGEgfSBmcm9tICcuLi8uLi8uLi9lbnRpdHkvdHJhY2tpbmcvY2VsbC1kYXRhL0NlbGxEYXRhJztcclxuaW1wb3J0IHsgVXBDZWxsRGF0YSB9IGZyb20gJy4uLy4uLy4uL2VudGl0eS90cmFja2luZy9jZWxsLWRhdGEvVXBDZWxsRGF0YSc7XHJcbmltcG9ydCB7IERvd25DZWxsRGF0YSB9IGZyb20gJy4uLy4uLy4uL2VudGl0eS90cmFja2luZy9jZWxsLWRhdGEvRG93bkNlbGxEYXRhJztcclxuaW1wb3J0IHsgQmlsbFRyYWNraW5nU2V0dGluZ3MgfSBmcm9tICdAZWRwLWJpZi9jb21tb24tYXBpJztcclxuaW1wb3J0IHsgQmlsbFRyYWNrZXJHcmFwaE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb25maWcvYmlsbC10cmFja2VyLWdyYXBoLW9wdGlvbnMnO1xyXG5pbXBvcnQgeyBOb3RpZnlTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBCaWxsVHJhY2tlckRhdGFJbmZvU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2JpbGwtdHJhY2tlci1kYXRhLWluZm8uc2VydmljZSc7XHJcbmltcG9ydCB7IENlbGxPdmVybGF5IH0gZnJvbSAnLi4vLi4vbXhncmFwaC1leHQvQ2VsbE92ZXJsYXknO1xyXG5pbXBvcnQgeyBDZWxsT3ZlcmxheVN0YXRlIH0gZnJvbSAnLi4vLi4vbXhncmFwaC1leHQvQ2VsbE92ZXJsYXlTdGF0ZSc7XHJcbmltcG9ydCB7IEV2ZW50cyB9IGZyb20gJy4uLy4uL214Z3JhcGgtZXh0L0V2ZW50cyc7XHJcbmltcG9ydCB7IGJpbGxUcmFja2VyQ2VsbENzcyB9IGZyb20gJy4uLy4uL2NvbmZpZy9iaWxsLXRyYWNrZXItY2VsbC1jc3MnO1xyXG5pbXBvcnQgeyBhZGRDdXN0b21DU1MgfSBmcm9tICcuLi8uLi91dGlscy9hZGRDdXN0b21DU1MnO1xyXG5pbXBvcnQgeyBPdXRsaW5lIH0gZnJvbSAnLi4vLi4vbXhncmFwaC1leHQvT3V0bGluZSc7XHJcbmltcG9ydCB7IEJpbGxUcmFja2VyR3JpZE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb25maWcvYmlsbC10cmFja2VyLWdyaWQtb3B0aW9ucyc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbi8vIOWcqGhlYWTkuK3mt7vliqDoioLngrnmoLflvI9cclxuYWRkQ3VzdG9tQ1NTKGJpbGxUcmFja2VyQ2VsbENzcyk7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2xpYi1iaWxsLXRyYWNrZXItZ3JhcGgnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9iaWxsLXRyYWNrZXItZ3JhcGguY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2JpbGwtdHJhY2tlci1ncmFwaC5jb21wb25lbnQuY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIEJpbGxUcmFja2VyR3JhcGhDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xyXG4gIGxvY2FsZVBpcGU6IEJpbGxUcmFja2VyTG9jYWxlUGlwZTtcclxuXHJcbiAgQFZpZXdDaGlsZChcIm14Q29udGFpbmVyXCIpXHJcbiAgbXhDb250YWluZXJFUjogRWxlbWVudFJlZjxIVE1MRGl2RWxlbWVudD47XHJcblxyXG4gIEBWaWV3Q2hpbGQoXCJteE91dGxpbmVDb250YWluZXJcIilcclxuICBteE91dGxpbmVDb250YWluZXI6IEVsZW1lbnRSZWY8SFRNTERpdkVsZW1lbnQ+O1xyXG5cclxuICBAT3V0cHV0KFwic2VsZWN0XCIpXHJcbiAgc2VsZWN0RXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gIEBPdXRwdXQoXCJzdGF0ZUNoYW5nZVwiKVxyXG4gIHN0YXRlQ2hhbmdlRXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjx7XHJcbiAgICB0eXBlOiBhbnksXHJcbiAgICBkYXRhPzogYW55XHJcbiAgfT4oKTtcclxuXHJcbiAgQElucHV0KFwiYmlsbFRyYWNrZXJBcmdzXCIpXHJcbiAgYmlsbFRyYWNrZXJBcmdzOiBCaWxsVHJhY2tlckFyZ3M7XHJcblxyXG4gIGdyYXBoT3B0aW9uczogQmlsbFRyYWNrZXJHcmFwaE9wdGlvbnM7XHJcbiAgZ3JpZE9wdGlvbnM6IEJpbGxUcmFja2VyR3JpZE9wdGlvbnM7XHJcblxyXG4gIG1vZGFsUmVmOiBCc01vZGFsUmVmO1xyXG5cclxuICBncmFwaDogR3JhcGg7XHJcbiAgaHNwYWNlID0gODA7XHJcbiAgdnNwYWNlID0gMjg7XHJcbiAgdXBMYXlvdXQ6IFJldmVydENvbXBhY3RUcmVlTGF5b3V0O1xyXG4gIGRvd25MYXlvdXQ6IENvbXBhY3RUcmVlTGF5b3V0O1xyXG4gIG91dGxpbmU6IE91dGxpbmU7XHJcblxyXG4gIGVudHJ5Q2VsbERhdGE6IEVudHJ5Q2VsbERhdGE7XHJcblxyXG4gIGxheW91dE1hbmFnZXI6IE14R3JhcGhOUy5teExheW91dE1hbmFnZXI7XHJcbiAgZW50cnk6IEJpbGxDZWxsO1xyXG4gIHVwUGFyZW50OiBNeEdyYXBoTlMubXhDZWxsO1xyXG4gIGRvd25QYXJlbnQ6IE14R3JhcGhOUy5teENlbGw7XHJcblxyXG4gIGRlZmF1bHRXaWR0aCA9IDI1MDtcclxuICBkZWZhdWx0SGVpZ2h0ID0gMTM4O1xyXG4gIG5vZGVXaWR0aCA9IHRoaXMuZGVmYXVsdFdpZHRoO1xyXG4gIG5vZGVIZWlnaHQgPSB0aGlzLmRlZmF1bHRIZWlnaHQ7XHJcbiAgZGVmYXVsdE5vbkVudHJ5SW1hZ2UgPSAoIW14Q2xpZW50LklTX1NWRykgPyBCaWxsVHJhY2tlckNvbnN0YW50LklNQUdFX1BBVEggKyAnL25vbi1lbnRyeS1iaWxsLnBuZycgOiBCaWxsVHJhY2tlckNvbnN0YW50LklNQUdFX1BBVEggKyAnL25vbi1lbnRyeS1iaWxsLnN2Zyc7XHJcbiAgZGVmYXVsdEVudHJ5SW1hZ2UgPSAoIW14Q2xpZW50LklTX1NWRykgPyBCaWxsVHJhY2tlckNvbnN0YW50LklNQUdFX1BBVEggKyAnL2VudHJ5LWJpbGwucG5nJyA6IEJpbGxUcmFja2VyQ29uc3RhbnQuSU1BR0VfUEFUSCArICcvZW50cnktYmlsbC5zdmcnO1xyXG5cclxuICBkZWZhdWx0T3ZlcmxheVdpZHRoID0gMjY7XHJcbiAgZGVmYXVsdE92ZXJsYXlIZWlnaHQgPSAyNjtcclxuICBvdmVybGF5V2lkdGg6IG51bWJlciA9IHRoaXMuZGVmYXVsdE92ZXJsYXlXaWR0aDtcclxuICBvdmVybGF5SGVpZ2h0OiBudW1iZXIgPSB0aGlzLmRlZmF1bHRPdmVybGF5SGVpZ2h0O1xyXG5cclxuICBkZWZhdWx0VXBTZWFyY2hJbWFnZSA9IG5ldyBteEltYWdlKEJpbGxUcmFja2VyQ29uc3RhbnQuSU1BR0VfUEFUSCArICcvdHJhY2tlci1wbHVzLnN2ZycsIHRoaXMub3ZlcmxheVdpZHRoLCB0aGlzLm92ZXJsYXlIZWlnaHQpO1xyXG4gIGRlZmF1bHREb3duU2VhcmNoSW1hZ2UgPSBuZXcgbXhJbWFnZShCaWxsVHJhY2tlckNvbnN0YW50LklNQUdFX1BBVEggKyAnL3RyYWNrZXItcGx1cy5zdmcnLCB0aGlzLm92ZXJsYXlXaWR0aCwgdGhpcy5vdmVybGF5SGVpZ2h0KTtcclxuICBkZWZhdWx0VXBGb2xkZXJJbWFnZSA9IG5ldyBteEltYWdlKEJpbGxUcmFja2VyQ29uc3RhbnQuSU1BR0VfUEFUSCArICcvdHJhY2tlci1taW51cy5zdmcnLCB0aGlzLm92ZXJsYXlXaWR0aCwgdGhpcy5vdmVybGF5SGVpZ2h0KTtcclxuICBkZWZhdWx0RG93bkZvbGRlckltYWdlID0gbmV3IG14SW1hZ2UoQmlsbFRyYWNrZXJDb25zdGFudC5JTUFHRV9QQVRIICsgJy90cmFja2VyLW1pbnVzLnN2ZycsIHRoaXMub3ZlcmxheVdpZHRoLCB0aGlzLm92ZXJsYXlIZWlnaHQpO1xyXG5cclxuICB1cFNlYXJjaEltYWdlID0gdGhpcy5kZWZhdWx0VXBTZWFyY2hJbWFnZTtcclxuICBkb3duU2VhcmNoSW1hZ2UgPSB0aGlzLmRlZmF1bHREb3duU2VhcmNoSW1hZ2U7XHJcbiAgdXBGb2xkZXJJbWFnZSA9IHRoaXMuZGVmYXVsdFVwRm9sZGVySW1hZ2U7XHJcbiAgZG93bkZvbGRlckltYWdlID0gdGhpcy5kZWZhdWx0RG93bkZvbGRlckltYWdlO1xyXG5cclxuICB1cFNlYXJjaE9mZnNldCA9IG5ldyBteFBvaW50KC01MCwgMCk7XHJcbiAgZG93blNlYXJjaE9mZnNldCA9IG5ldyBteFBvaW50KDUwLCAwKTtcclxuXHJcbiAgZGF0YUluZm9TZXJ2aWNlOiBCaWxsVHJhY2tlckRhdGFJbmZvU2VydmljZTtcclxuXHJcbiAgLyoqXHJcbiAgICog5q2j5Zyo5Yqg6L295Lit55qE5Y2V5o2u6IqC54K56K+35rGC5pWwXHJcbiAgICovXHJcbiAgbnVtQ2VsbHNBZGRpbmdSZXEgPSAwO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGFyZ3M6IEJpbGxUcmFja2VyQXJncyxcclxuICAgIEBJbmplY3QoTE9DQUxFX0lEKSBsb2NhbGVJZDogc3RyaW5nLFxyXG4gICAgcHVibGljIGRhdGFTZXJ2aWNlOiBCaWxsVHJhY2tlckRhdGFTZXJ2aWNlLFxyXG4gICAgcHVibGljIG5vdGlmeTogTm90aWZ5U2VydmljZSxcclxuICAgIHB1YmxpYyBtZXNzYWdlcjogTWVzc2FnZXJTZXJ2aWNlLFxyXG4gICAgcHVibGljIGxvYWRpbmc6IExvYWRpbmdTZXJ2aWNlLFxyXG4gICAgcHVibGljIG1vZGFsOiBCc01vZGFsU2VydmljZSxcclxuICAgIHB1YmxpYyB2Y3I6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICBwdWJsaWMgaW5qOiBJbmplY3RvcixcclxuICAgIHB1YmxpYyBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgIHB1YmxpYyBjZHI6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICkge1xyXG4gICAgdGhpcy5sb2NhbGVQaXBlID0gbmV3IEJpbGxUcmFja2VyTG9jYWxlUGlwZShsb2NhbGVJZCk7XHJcbiAgICB0aGlzLmRhdGFJbmZvU2VydmljZSA9IG5ldyBCaWxsVHJhY2tlckRhdGFJbmZvU2VydmljZSgpO1xyXG5cclxuICAgIHRoaXMuYmlsbFRyYWNrZXJBcmdzID0gYXJncztcclxuICAgIGNvbnN0IGdyYXBoT3B0aW9ucyA9IHRoaXMuYmlsbFRyYWNrZXJBcmdzLmdyYXBoT3B0aW9ucztcclxuICAgIHRoaXMuZ3JhcGhPcHRpb25zID0gZ3JhcGhPcHRpb25zO1xyXG4gICAgY29uc3QgZ3JpZE9wdGlvbnMgPSB0aGlzLmJpbGxUcmFja2VyQXJncy5ncmlkT3B0aW9ucztcclxuICAgIHRoaXMuZ3JpZE9wdGlvbnMgPSBncmlkT3B0aW9ucztcclxuXHJcbiAgICB0aGlzLnVwU2VhcmNoSW1hZ2UgPSBncmFwaE9wdGlvbnMgJiYgZ3JhcGhPcHRpb25zLnVwU2VhcmNoSW1hZ2UgPyBuZXcgbXhJbWFnZShncmFwaE9wdGlvbnMudXBTZWFyY2hJbWFnZSwgdGhpcy5vdmVybGF5V2lkdGgsIHRoaXMub3ZlcmxheUhlaWdodCkgOiB0aGlzLnVwU2VhcmNoSW1hZ2U7XHJcbiAgICB0aGlzLmRvd25TZWFyY2hJbWFnZSA9IGdyYXBoT3B0aW9ucyAmJiBncmFwaE9wdGlvbnMuZG93blNlYXJjaEltYWdlID8gbmV3IG14SW1hZ2UoZ3JhcGhPcHRpb25zLmRvd25TZWFyY2hJbWFnZSwgdGhpcy5vdmVybGF5V2lkdGgsIHRoaXMub3ZlcmxheUhlaWdodCkgOiB0aGlzLmRvd25TZWFyY2hJbWFnZTtcclxuICAgIHRoaXMudXBGb2xkZXJJbWFnZSA9IGdyYXBoT3B0aW9ucyAmJiBncmFwaE9wdGlvbnMudXBGb2xkZXJJbWFnZSA/IG5ldyBteEltYWdlKGdyYXBoT3B0aW9ucy51cEZvbGRlckltYWdlLCB0aGlzLm92ZXJsYXlXaWR0aCwgdGhpcy5vdmVybGF5SGVpZ2h0KSA6IHRoaXMudXBGb2xkZXJJbWFnZTtcclxuICAgIHRoaXMuZG93bkZvbGRlckltYWdlID0gZ3JhcGhPcHRpb25zICYmIGdyYXBoT3B0aW9ucy5kb3duRm9sZGVySW1hZ2UgPyBuZXcgbXhJbWFnZShncmFwaE9wdGlvbnMuZG93bkZvbGRlckltYWdlLCB0aGlzLm92ZXJsYXlXaWR0aCwgdGhpcy5vdmVybGF5SGVpZ2h0KSA6IHRoaXMuZG93bkZvbGRlckltYWdlO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLmdyYXBoID0gdGhpcy5jcmVhdGVHcmFwaCgpO1xyXG4gICAgdGhpcy5jcmVhdGVMYXlvdXQodGhpcy5ncmFwaCk7XHJcbiAgICB0aGlzLmxheW91dE1hbmFnZXIgPSBuZXcgbXhMYXlvdXRNYW5hZ2VyKHRoaXMuZ3JhcGgpO1xyXG4gICAgdGhpcy5vdXRsaW5lID0gbmV3IE91dGxpbmUodGhpcy5ncmFwaCwgdGhpcy5teE91dGxpbmVDb250YWluZXIubmF0aXZlRWxlbWVudCk7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgcmVmcmVzaChzaXplRGlkQ2hhbmdlOiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgaWYgKHNpemVEaWRDaGFuZ2UgJiYgdGhpcy5ncmFwaCAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuZ3JhcGguc2l6ZURpZENoYW5nZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHBhaW50KCk6IHZvaWQge1xyXG4gICAgdGhpcy5wYWludEdyYXBoKHRoaXMuZ3JhcGgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldE1vZGFsUmVmKG1vZGFsUmVmOiBCc01vZGFsUmVmKSB7XHJcbiAgICB0aGlzLm1vZGFsUmVmID0gbW9kYWxSZWY7XHJcblxyXG4gICAgaWYgKHRoaXMubW9kYWxSZWYgIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLm1vZGFsUmVmLmRpYWxvZy5pbnN0YW5jZS5jbG9zZWQuc3Vic2NyaWJlKChldnQpID0+IHtcclxuICAgICAgICB0aGlzLmdyYXBoICYmIHRoaXMuZ3JhcGguZGVzdHJveSgpO1xyXG4gICAgICB9KTtcclxuICAgICAgLy8gdG9kbzog5Li05pe26Kej5Yaz5by556qX5qih5byP5LiL5YWI5Yi35paw5Ye65YWl5Y+j6IqC54K56Zeu6aKYXHJcbiAgICAgIGxldCBmbGFnID0gMDtcclxuICAgICAgdGhpcy5tb2RhbFJlZi5kaWFsb2cuaW5zdGFuY2UucmVzaXplZC5zdWJzY3JpYmUoKGV2dCkgPT4ge1xyXG4gICAgICAgIGlmIChmbGFnID49IDIpIHtcclxuICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmbGFnKys7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGNyZWF0ZUdyYXBoKCkge1xyXG4gICAgLy/lkK/nlKhteEd1aWRlXHJcbiAgICBteEdyYXBoSGFuZGxlci5wcm90b3R5cGUuZ3VpZGVzRW5hYmxlZCA9IHRydWU7XHJcbiAgICAvL+emgeeUqG14Z3JhcGjlrrnlmajlhoXkuIrkuIvmlofoj5zljZVcclxuICAgIG14RXZlbnQuZGlzYWJsZUNvbnRleHRNZW51KHRoaXMubXhDb250YWluZXJFUi5uYXRpdmVFbGVtZW50KTtcclxuXHJcbiAgICBteEdyYXBoSGFuZGxlci5wcm90b3R5cGUuc2Nyb2xsT25Nb3ZlID0gZmFsc2U7XHJcbiAgICBteEdyYXBoSGFuZGxlci5wcm90b3R5cGUuc2NhbGVHcmlkID0gdHJ1ZTtcclxuXHJcbiAgICAvL+S/ruaUueiKgueCuemAieS4reWQjuWkhOeQhuWZqOWbvueJh+WPiuWhq+WFheiJslxyXG4gICAgbXhDb25zdGFudHMuSEFORExFX0ZJTExDT0xPUiA9ICcjMjliNmYyJztcclxuICAgIG14SGFuZGxlLnByb3RvdHlwZS5jcmVhdGVTaGFwZSA9IGZ1bmN0aW9uIChodG1sKSB7XHJcbiAgICAgIGNvbnN0IGJvdW5kcyA9IG5ldyBteEVsbGlwc2UoMCwgMCwgbXhDb25zdGFudHMuSEFORExFX1NJWkUsIG14Q29uc3RhbnRzLkhBTkRMRV9TSVpFKTtcclxuXHJcbiAgICAgIHJldHVybiBuZXcgbXhFbGxpcHNlKGJvdW5kcywgbXhDb25zdGFudHMuSEFORExFX0ZJTExDT0xPUiwgbXhDb25zdGFudHMuSEFORExFX1NUUk9LRUNPTE9SKTtcclxuICAgIH07XHJcbiAgICBteFZlcnRleEhhbmRsZXIucHJvdG90eXBlLmhhbmRsZUltYWdlID0gKCFteENsaWVudC5JU19TVkcpID8gbmV3IG14SW1hZ2UoQmlsbFRyYWNrZXJDb25zdGFudC5JTUFHRV9QQVRIICsgJy9oYW5kbGUtbWFpbi5wbmcnLCBteENvbnN0YW50cy5IQU5ETEVfU0laRSwgbXhDb25zdGFudHMuSEFORExFX1NJWkUpIDogR3JhcGguY3JlYXRlU3ZnSW1hZ2UoMTgsIDE4LCAnPGNpcmNsZSBjeD1cIjlcIiBjeT1cIjlcIiByPVwiM1wiIHN0cm9rZT1cIiNmZmZcIiBmaWxsPVwiJyArIEdyYXBoLmhhbmRsZUZpbGwgKyAnXCIgc3Ryb2tlLXdpZHRoPVwiMVwiLz4nKTtcclxuXHJcbiAgICBteENvbnN0YW50cy5ERUZBVUxUX1ZBTElEX0NPTE9SID0gJyNGRkZGRkYnO1xyXG4gICAgbXhDb25zdGFudHMuSElHSExJR0hUX1NUUk9LRVdJRFRIID0gMTtcclxuXHJcbiAgICAvL+S/ruaUuW14R3VpZGXpu5jorqTphY3nva5cclxuICAgIG14Q29uc3RhbnRzLkdVSURFX0NPTE9SID0gJyMwMDg4Y2YnO1xyXG4gICAgbXhHdWlkZS5wcm90b3R5cGUuY3JlYXRlR3VpZGVTaGFwZSA9IChob3Jpem9udGFsKSA9PiBuZXcgbXhQb2x5bGluZShbXSwgbXhDb25zdGFudHMuR1VJREVfQ09MT1IsIG14Q29uc3RhbnRzLkdVSURFX1NUUk9LRVdJRFRIKTtcclxuXHJcbiAgICAvL+iuvue9ruiKgueCuemAieS4ree6v+ahhuWuveW6plxyXG4gICAgbXhDb25zdGFudHMuVkVSVEVYX1NFTEVDVElPTl9TVFJPS0VXSURUSCA9IDE7XHJcbiAgICBteENvbnN0YW50cy5WRVJURVhfU0VMRUNUSU9OX0NPTE9SID0gJyMzRThERkYnO1xyXG4gICAgbXhDb25zdGFudHMuVkVSVEVYX1NFTEVDVElPTl9EQVNIRUQgPSBmYWxzZTtcclxuXHJcbiAgICAvL+S/ruaUuee6v+WuvVxyXG4gICAgbXhDb25uZWN0aW9uSGFuZGxlci5wcm90b3R5cGUuZ2V0RWRnZVdpZHRoID0gKHZhbGlkOiBhbnkpID0+IDE7XHJcbiAgICBteENvbnN0YW50cy5WQUxJRF9DT0xPUiA9ICcjMDBDRDY2JztcclxuXHJcbiAgICAvL+WIm+W7um14R3JhcGhcclxuICAgIGNvbnN0IGdyYXBoID0gbmV3IEdyYXBoKHRoaXMubXhDb250YWluZXJFUi5uYXRpdmVFbGVtZW50LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcclxuICAgIGdyYXBoLmxvY2FsZVBpcGUgPSB0aGlzLmxvY2FsZVBpcGU7XHJcbiAgICBncmFwaC5ncmFwaE9wdGlvbnMgPSB0aGlzLmdyYXBoT3B0aW9ucztcclxuICAgIGdyYXBoLmdyaWRPcHRpb25zID0gdGhpcy5ncmlkT3B0aW9ucztcclxuICAgIC8v5re75Yqg6Ieq5a6a5LmJ55uR5ZCs5ZmoXHJcbiAgICB0aGlzLmFkZExpc3RlbmVyKGdyYXBoKTtcclxuICAgIHJldHVybiBncmFwaDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjcmVhdGVMYXlvdXQoZ3JhcGg6IEdyYXBoKSB7XHJcbiAgICBjb25zdCB1cExheW91dCA9IG5ldyBSZXZlcnRDb21wYWN0VHJlZUxheW91dChncmFwaCwgdHJ1ZSk7XHJcbiAgICB1cExheW91dC5sZXZlbERpc3RhbmNlID0gdGhpcy5oc3BhY2U7XHJcbiAgICB1cExheW91dC5lZGdlUm91dGluZyA9IGZhbHNlO1xyXG4gICAgdXBMYXlvdXQucmVzZXRFZGdlcyA9IGZhbHNlO1xyXG5cclxuICAgIHRoaXMudXBMYXlvdXQgPSB1cExheW91dDtcclxuXHJcbiAgICBjb25zdCBkb3duTGF5b3V0ID0gbmV3IENvbXBhY3RUcmVlTGF5b3V0KGdyYXBoLCB0cnVlKTtcclxuICAgIGRvd25MYXlvdXQubGV2ZWxEaXN0YW5jZSA9IHRoaXMuaHNwYWNlO1xyXG4gICAgZG93bkxheW91dC5lZGdlUm91dGluZyA9IGZhbHNlO1xyXG4gICAgZG93bkxheW91dC5yZXNldEVkZ2VzID0gdHJ1ZTtcclxuXHJcbiAgICB0aGlzLmRvd25MYXlvdXQgPSBkb3duTGF5b3V0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFkZExpc3RlbmVyKGdyYXBoOiBhbnkpIHtcclxuICAgIGNvbnN0IGF1dG9BZGp1c3RIYW5kbGVyID0gKCkgPT4ge1xyXG4gICAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ3JhcGggIT0gbnVsbCkge1xyXG4gICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCAwKTtcclxuICAgIH07XHJcbiAgICBteEV2ZW50LmFkZExpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGF1dG9BZGp1c3RIYW5kbGVyKTtcclxuXHJcbiAgICBjb25zdCB3aGVlbFJlc2l6ZUhhbmRsZXIgPSAoZXZ0OiBXaGVlbEV2ZW50LCB1cDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAvLyB3aW5kb3fkuItDdHJs5oyJ5LiL77yMTWFj5LiLQ29tbWFuZOaMieS4i1xyXG4gICAgICBpZiAobXhFdmVudC5pc0NvbnRyb2xEb3duKGV2dCkgfHwgKG14Q2xpZW50LklTX01BQyAmJiBldnQubWV0YUtleSkpIHtcclxuICAgICAgICBpZiAodXApIHtcclxuICAgICAgICAgIHRoaXMuem9vbUluKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuem9vbU91dCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBteEV2ZW50LmNvbnN1bWUoZXZ0KTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgbXhFdmVudC5hZGRNb3VzZVdoZWVsTGlzdGVuZXIod2hlZWxSZXNpemVIYW5kbGVyLCB0aGlzLm14Q29udGFpbmVyRVIubmF0aXZlRWxlbWVudCk7XHJcblxyXG4gICAgZ3JhcGguZ2V0U2VsZWN0aW9uTW9kZWwoKS5hZGRMaXN0ZW5lcihteEV2ZW50LkNIQU5HRSwgKHNlbmRlciwgZXZ0KSA9PiB7XHJcbiAgICAgIGlmICghKHNlbmRlciBpbnN0YW5jZW9mIG14R3JhcGhTZWxlY3Rpb25Nb2RlbCkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgbGV0IHNlbGVjdGlvbk1vZGVsID0gc2VuZGVyO1xyXG4gICAgICAvL+iLpeacqumAieS4reiKgueCueaIluiAhemAieS4reiKgueCueaVsOS4jeS4ujFcclxuICAgICAgaWYgKHNlbGVjdGlvbk1vZGVsLmNlbGxzID09IG51bGwgfHwgc2VsZWN0aW9uTW9kZWwuY2VsbHMubGVuZ3RoICE9IDEpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdEV2ZW50RW1pdHRlci5lbWl0KG51bGwpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBsZXQgc2VsZWN0ZWRDZWxsID0gc2VsZWN0aW9uTW9kZWwuY2VsbHNbMF07XHJcbiAgICAgIC8v6YCJ5Lit55qE5piv6L65XHJcbiAgICAgIGlmIChzZWxlY3RlZENlbGwuZWRnZSB8fCAhc2VsZWN0ZWRDZWxsLnZlcnRleCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5zZWxlY3RFdmVudEVtaXR0ZXIuZW1pdChzZWxlY3RlZENlbGwpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZ3JhcGguYWRkTGlzdGVuZXIoRXZlbnRzLkNMSUNLX0ZJUlNUX1NVTU1BUlksIChzZXJkZXIsIGV2dDogTXhHcmFwaE5TLm14RXZlbnRPYmplY3QpID0+IHtcclxuICAgICAgY29uc3QgY2VsbCA9IGV2dC5nZXRQcm9wZXJ0eShcImNlbGxcIik7XHJcbiAgICAgIHRoaXMuc3RhdGVDaGFuZ2VFdmVudEVtaXR0ZXIuZW1pdCh7XHJcbiAgICAgICAgdHlwZTogRXZlbnRzLkNMSUNLX0ZJUlNUX1NVTU1BUlksXHJcbiAgICAgICAgZGF0YTogY2VsbFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHBhaW50R3JhcGgoZ3JhcGg6IEdyYXBoKSB7XHJcbiAgICBncmFwaC5nZXRNb2RlbCgpLmJlZ2luVXBkYXRlKCk7XHJcbiAgICB0aGlzLmVudHJ5ID0gdGhpcy5wYWludEVudHJ5KGdyYXBoKTtcclxuICAgIHRoaXMuYWZ0ZXJQYWludEdyYXBoKHRoaXMuZ3JhcGgsIHRoaXMuZW50cnkpO1xyXG4gICAgZ3JhcGguZ2V0TW9kZWwoKS5lbmRVcGRhdGUoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZnRlclBhaW50R3JhcGgoZ3JhcGg6IEdyYXBoLCBlbnRyeTogQmlsbENlbGwpIHtcclxuICAgIGlmIChlbnRyeSA9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyDpu5jorqTpgInkuK3lhaXlj6PoioLngrlcclxuICAgIHRoaXMuYmlsbFRyYWNrZXJBcmdzLmdyaWRPcHRpb25zLnNob3dFbnRyeURhdGEgJiYgZ3JhcGguc2V0U2VsZWN0aW9uQ2VsbCh0aGlzLmVudHJ5KTtcclxuXHJcbiAgICAvLyDpu5jorqTlsZXnpLrkuIDlsYLvvJ9cclxuICAgIGNvbnN0IGNhblRyYWNraW5nUmVzdWx0ID0gdGhpcy5iaWxsVHJhY2tlckFyZ3MuY2FuVHJhY2tpbmdSZXN1bHQ7XHJcbiAgICBpZiAodGhpcy5iaWxsVHJhY2tlckFyZ3MuZ3JhcGhPcHRpb25zLnNob3dEb3duQmlsbHMgPT0gdHJ1ZSkge1xyXG4gICAgICBjYW5UcmFja2luZ1Jlc3VsdC5jYW5Eb3duVHJhY2tpbmcgJiYgdGhpcy5lbnRyeS5kb3duQ2VsbE92ZXJsYXkgJiYgdGhpcy5lbnRyeS5kb3duQ2VsbE92ZXJsYXkuZmlyZUV2ZW50KG5ldyBteEV2ZW50T2JqZWN0KG14RXZlbnQuQ0xJQ0ssIFwicmVzZXRWaWV3XCIsIHRydWUpKTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmJpbGxUcmFja2VyQXJncy5ncmFwaE9wdGlvbnMuc2hvd1VwQmlsbHMgPT0gdHJ1ZSkge1xyXG4gICAgICBjYW5UcmFja2luZ1Jlc3VsdC5jYW5VcFRyYWNraW5nICYmIHRoaXMuZW50cnkudXBDZWxsT3ZlcmxheSAmJiB0aGlzLmVudHJ5LnVwQ2VsbE92ZXJsYXkuZmlyZUV2ZW50KG5ldyBteEV2ZW50T2JqZWN0KG14RXZlbnQuQ0xJQ0ssIFwicmVzZXRWaWV3XCIsIHRydWUpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBwYWludEVudHJ5KGdyYXBoOiBHcmFwaCkge1xyXG4gICAgbGV0IGVudHJ5OiBCaWxsQ2VsbCA9IG51bGw7XHJcblxyXG4gICAgaWYgKHRoaXMuYmlsbFRyYWNrZXJBcmdzID09IG51bGwgfHwgdGhpcy5iaWxsVHJhY2tlckFyZ3MuY2FuVHJhY2tpbmdSZXN1bHQgPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gZW50cnk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY2FuVHJhY2tpbmdSZXN1bHQgPSB0aGlzLmJpbGxUcmFja2VyQXJncy5jYW5UcmFja2luZ1Jlc3VsdDtcclxuICAgIGNvbnN0IGluZm8gPSB0aGlzLmRhdGFTZXJ2aWNlLmJ1aWxkRW50cnlCaWxsSW5mbyhjYW5UcmFja2luZ1Jlc3VsdCk7XHJcbiAgICBjb25zdCBkYXRhSW5mbyA9IGluZm8uYmlsbERhdGFJbmZvc1swXTtcclxuICAgIGxldCBidHM6IEJpbGxUcmFja2luZ1NldHRpbmdzID0gbmV3IEJpbGxUcmFja2luZ1NldHRpbmdzKCk7XHJcbiAgICBidHMuTG9hZEZyb21Kc29uKGNhblRyYWNraW5nUmVzdWx0LmJpbGxUcmFja2luZ1NldHRpbmdzKTtcclxuXHJcbiAgICBjb25zdCBwYXJlbnQgPSBncmFwaC5nZXREZWZhdWx0UGFyZW50KCk7XHJcblxyXG4gICAgZ3JhcGguZ2V0TW9kZWwoKS5iZWdpblVwZGF0ZSgpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgbGV0IHgwID0gMDtcclxuICAgICAgbGV0IHkwID0gMDtcclxuXHJcbiAgICAgIGxldCBidHM6IEJpbGxUcmFja2luZ1NldHRpbmdzID0gbmV3IEJpbGxUcmFja2luZ1NldHRpbmdzKCk7XHJcbiAgICAgIGlmIChpbmZvICYmIGluZm8uYmlsbFRyYWNraW5nU2V0dGluZ3MpIHtcclxuICAgICAgICBidHMuTG9hZEZyb21Kc29uKGluZm8uYmlsbFRyYWNraW5nU2V0dGluZ3MpO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBjdXN0b21TdHlsZSA9IFwiXCI7XHJcbiAgICAgIGVudHJ5ID0gZ3JhcGguaW5zZXJ0QmlsbENlbGwocGFyZW50LCBudWxsLCBkYXRhSW5mbywgaW5mbywgdHJ1ZSwgeDAsIHkwLCB0aGlzLm5vZGVXaWR0aCwgdGhpcy5ub2RlSGVpZ2h0LCBgYmlsbE5vZGU7YmlsbE5vZGVFbnRyeTske2N1c3RvbVN0eWxlfWApO1xyXG5cclxuICAgICAgbGV0IGdlb21ldHJ5ID0gZ3JhcGguZ2V0TW9kZWwoKS5nZXRHZW9tZXRyeShlbnRyeSk7XHJcbiAgICAgIGxldCBzaXplID0gZ3JhcGguZ2V0UHJlZmVycmVkU2l6ZUZvckNlbGwoZW50cnkpO1xyXG5cclxuICAgICAgdGhpcy5lbnRyeUNlbGxEYXRhID0gbmV3IEVudHJ5Q2VsbERhdGEoKTtcclxuICAgICAgdGhpcy5zZXRDZWxsRGF0YSh0aGlzLmVudHJ5Q2VsbERhdGEsIGVudHJ5KTtcclxuICAgICAgdGhpcy5lbnRyeUNlbGxEYXRhLmNhblRyYWNraW5nUmVzdWx0ID0gY2FuVHJhY2tpbmdSZXN1bHQ7XHJcbiAgICAgIGVudHJ5LmRhdGEgPSB0aGlzLmVudHJ5Q2VsbERhdGE7XHJcblxyXG4gICAgICAvLyDmt7vliqDkuIrmn6XkuIvmn6XmjInpkq5cclxuICAgICAgaWYgKGNhblRyYWNraW5nUmVzdWx0LmNhbkRvd25UcmFja2luZykge1xyXG4gICAgICAgIGNvbnN0IG92ZXJsYXkgPSB0aGlzLmFkZERvd25PdmVybGF5KGdyYXBoLCBlbnRyeSk7XHJcbiAgICAgICAgZW50cnkuZG93bkNlbGxPdmVybGF5ID0gb3ZlcmxheTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoY2FuVHJhY2tpbmdSZXN1bHQuY2FuVXBUcmFja2luZykge1xyXG4gICAgICAgIGNvbnN0IG92ZXJsYXkgPSB0aGlzLmFkZFVwT3ZlcmxheShncmFwaCwgZW50cnkpO1xyXG4gICAgICAgIGVudHJ5LnVwQ2VsbE92ZXJsYXkgPSBvdmVybGF5O1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnVwUGFyZW50ID0gcGFyZW50LmNsb25lKCk7XHJcbiAgICAgIHRoaXMuZG93blBhcmVudCA9IHBhcmVudC5jbG9uZSgpO1xyXG4gICAgICBncmFwaC5hZGRDZWxscyhbdGhpcy51cFBhcmVudCwgdGhpcy5kb3duUGFyZW50XSwgcGFyZW50KTtcclxuICAgIH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICBncmFwaC5nZXRNb2RlbCgpLmVuZFVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBlbnRyeTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGRVcE92ZXJsYXkoZ3JhcGg6IEdyYXBoLCBjZWxsOiBCaWxsQ2VsbCk6IGFueSB7XHJcbiAgICBsZXQgdXBTZWFyY2ggPSBuZXcgQ2VsbE92ZXJsYXkodGhpcy51cFNlYXJjaEltYWdlLCB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwidXBTZWFyY2hcIiksIG14Q29uc3RhbnRzLkFMSUdOX0xFRlQsIG14Q29uc3RhbnRzLkFMSUdOX01JRERMRSwgdGhpcy51cFNlYXJjaE9mZnNldCwgXCJoYW5kXCIpO1xyXG4gICAgdXBTZWFyY2guc3RhdGUgPSBDZWxsT3ZlcmxheVN0YXRlLlNlYXJjaDtcclxuICAgIGNvbnN0IHVwU2VhcmNoSGFuZGxlciA9IChzZW5kZXIsIGV2dCkgPT4ge1xyXG4gICAgICBjb25zdCByZXNldFZpZXcgPSBldnQuZ2V0UHJvcGVydHkoXCJyZXNldFZpZXdcIik7XHJcbiAgICAgIGdyYXBoLmdldE1vZGVsKCkuYmVnaW5VcGRhdGUoKTtcclxuICAgICAgdGhpcy5hZGRVcEFzc29DZWxsKGdyYXBoLCBjZWxsLCByZXNldFZpZXcpO1xyXG4gICAgICB1cFNlYXJjaC5yZW1vdmVMaXN0ZW5lcih1cFNlYXJjaEhhbmRsZXIpO1xyXG4gICAgICB1cFNlYXJjaC50b29sdGlwID0gdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybShcImZvbGRlclwiKTtcclxuICAgICAgdXBTZWFyY2guaW1hZ2UgPSB0aGlzLnVwRm9sZGVySW1hZ2U7XHJcbiAgICAgIHVwU2VhcmNoLnN0YXRlID0gQ2VsbE92ZXJsYXlTdGF0ZS5Gb2xkO1xyXG4gICAgICB1cFNlYXJjaC5hZGRMaXN0ZW5lcihteEV2ZW50LkNMSUNLLCB1cEZvbGRlckhhbmRsZXIpO1xyXG4gICAgICBncmFwaC5yZW1vdmVDZWxsT3ZlcmxheShjZWxsLCB1cFNlYXJjaCk7XHJcbiAgICAgIGdyYXBoLmFkZENlbGxPdmVybGF5KGNlbGwsIHVwU2VhcmNoKTtcclxuICAgICAgZ3JhcGguZ2V0TW9kZWwoKS5lbmRVcGRhdGUoKTtcclxuICAgIH07XHJcbiAgICBjb25zdCB1cEZvbGRlckhhbmRsZXIgPSAoc2VuZGVyLCBldnQ6IE14R3JhcGhOUy5teEV2ZW50T2JqZWN0KSA9PiB7XHJcbiAgICAgIGdyYXBoLmdldE1vZGVsKCkuYmVnaW5VcGRhdGUoKTtcclxuICAgICAgdGhpcy5yZW1vdmVBc3NvQ2VsbChncmFwaCwgY2VsbCwgQmlsbFRyYWNrZXJEaXJlY3Rpb24uVXApO1xyXG4gICAgICB1cFNlYXJjaC5yZW1vdmVMaXN0ZW5lcih1cEZvbGRlckhhbmRsZXIpO1xyXG4gICAgICB1cFNlYXJjaC50b29sdGlwID0gdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybShcInVwU2VhcmNoXCIpO1xyXG4gICAgICB1cFNlYXJjaC5pbWFnZSA9IHRoaXMudXBTZWFyY2hJbWFnZTtcclxuICAgICAgdXBTZWFyY2guc3RhdGUgPSBDZWxsT3ZlcmxheVN0YXRlLlNlYXJjaDtcclxuICAgICAgdXBTZWFyY2guYWRkTGlzdGVuZXIobXhFdmVudC5DTElDSywgdXBTZWFyY2hIYW5kbGVyKTtcclxuICAgICAgZ3JhcGgucmVtb3ZlQ2VsbE92ZXJsYXkoY2VsbCwgdXBTZWFyY2gpO1xyXG4gICAgICBncmFwaC5hZGRDZWxsT3ZlcmxheShjZWxsLCB1cFNlYXJjaCk7XHJcbiAgICAgIGdyYXBoLm1vZGVsLmVuZFVwZGF0ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB1cFNlYXJjaC5hZGRMaXN0ZW5lcihteEV2ZW50LkNMSUNLLCB1cFNlYXJjaEhhbmRsZXIpO1xyXG4gICAgZ3JhcGgucmVtb3ZlQ2VsbE92ZXJsYXkoY2VsbCwgdXBTZWFyY2gpO1xyXG4gICAgZ3JhcGguYWRkQ2VsbE92ZXJsYXkoY2VsbCwgdXBTZWFyY2gpO1xyXG5cclxuICAgIHJldHVybiB1cFNlYXJjaDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGREb3duT3ZlcmxheShncmFwaDogR3JhcGgsIGNlbGw6IEJpbGxDZWxsKTogYW55IHtcclxuICAgIGxldCBkb3duU2VhcmNoID0gbmV3IENlbGxPdmVybGF5KHRoaXMuZG93blNlYXJjaEltYWdlLCB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiZG93blNlYXJjaFwiKSwgbXhDb25zdGFudHMuQUxJR05fUklHSFQsIG14Q29uc3RhbnRzLkFMSUdOX01JRERMRSwgdGhpcy5kb3duU2VhcmNoT2Zmc2V0LCBcImhhbmRcIik7XHJcbiAgICBkb3duU2VhcmNoLnN0YXRlID0gQ2VsbE92ZXJsYXlTdGF0ZS5TZWFyY2g7XHJcbiAgICBjb25zdCBkb3duU2VhcmNoSGFuZGxlciA9IChzZW5kZXIsIGV2dDogTXhHcmFwaE5TLm14RXZlbnRPYmplY3QpID0+IHtcclxuICAgICAgY29uc3QgcmVzZXRWaWV3ID0gZXZ0LmdldFByb3BlcnR5KFwicmVzZXRWaWV3XCIpO1xyXG4gICAgICBncmFwaC5nZXRNb2RlbCgpLmJlZ2luVXBkYXRlKCk7XHJcbiAgICAgIHRoaXMuYWRkRG93bkFzc29DZWxsKGdyYXBoLCBjZWxsLCByZXNldFZpZXcpO1xyXG4gICAgICBkb3duU2VhcmNoLmltYWdlID0gdGhpcy5kb3duRm9sZGVySW1hZ2U7XHJcbiAgICAgIGRvd25TZWFyY2gudG9vbHRpcCA9IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJmb2xkZXJcIik7XHJcbiAgICAgIGRvd25TZWFyY2guc3RhdGUgPSBDZWxsT3ZlcmxheVN0YXRlLkZvbGQ7XHJcbiAgICAgIGRvd25TZWFyY2gucmVtb3ZlTGlzdGVuZXIoZG93blNlYXJjaEhhbmRsZXIpO1xyXG4gICAgICBkb3duU2VhcmNoLmFkZExpc3RlbmVyKG14RXZlbnQuQ0xJQ0ssIGRvd25Gb2xkZXJIYW5kbGVyKTtcclxuICAgICAgZ3JhcGgucmVtb3ZlQ2VsbE92ZXJsYXkoY2VsbCwgZG93blNlYXJjaCk7XHJcbiAgICAgIGdyYXBoLmFkZENlbGxPdmVybGF5KGNlbGwsIGRvd25TZWFyY2gpO1xyXG4gICAgICAvLyBncmFwaC5yZWZyZXNoKGNlbGwpO1xyXG4gICAgICBncmFwaC5nZXRNb2RlbCgpLmVuZFVwZGF0ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBkb3duRm9sZGVySGFuZGxlciA9IChzZW5kZXIsIGV2dCkgPT4ge1xyXG4gICAgICBncmFwaC5nZXRNb2RlbCgpLmJlZ2luVXBkYXRlKCk7XHJcbiAgICAgIHRoaXMucmVtb3ZlQXNzb0NlbGwoZ3JhcGgsIGNlbGwsIEJpbGxUcmFja2VyRGlyZWN0aW9uLkRvd24pO1xyXG4gICAgICBkb3duU2VhcmNoLmltYWdlID0gdGhpcy5kb3duU2VhcmNoSW1hZ2U7XHJcbiAgICAgIGRvd25TZWFyY2gudG9vbHRpcCA9IHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJkb3duU2VhcmNoXCIpO1xyXG4gICAgICBkb3duU2VhcmNoLnN0YXRlID0gQ2VsbE92ZXJsYXlTdGF0ZS5TZWFyY2g7XHJcbiAgICAgIGRvd25TZWFyY2gucmVtb3ZlTGlzdGVuZXIoZG93bkZvbGRlckhhbmRsZXIpO1xyXG4gICAgICBkb3duU2VhcmNoLmFkZExpc3RlbmVyKG14RXZlbnQuQ0xJQ0ssIGRvd25TZWFyY2hIYW5kbGVyKTtcclxuICAgICAgZ3JhcGgucmVtb3ZlQ2VsbE92ZXJsYXkoY2VsbCwgZG93blNlYXJjaCk7XHJcbiAgICAgIGdyYXBoLmFkZENlbGxPdmVybGF5KGNlbGwsIGRvd25TZWFyY2gpO1xyXG4gICAgICAvLyBncmFwaC5yZWZyZXNoKGNlbGwpO1xyXG4gICAgICBncmFwaC5nZXRNb2RlbCgpLmVuZFVwZGF0ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBkb3duU2VhcmNoLmFkZExpc3RlbmVyKG14RXZlbnQuQ0xJQ0ssIGRvd25TZWFyY2hIYW5kbGVyKTtcclxuICAgIGdyYXBoLnJlbW92ZUNlbGxPdmVybGF5KGNlbGwsIGRvd25TZWFyY2gpO1xyXG4gICAgZ3JhcGguYWRkQ2VsbE92ZXJsYXkoY2VsbCwgZG93blNlYXJjaCk7XHJcblxyXG4gICAgcmV0dXJuIGRvd25TZWFyY2g7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWRkVXBBc3NvQ2VsbChncmFwaDogR3JhcGgsIGNlbGw6IEJpbGxDZWxsLCByZXNldFZpZXc6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgZ3JhcGguZ2V0TW9kZWwoKS5iZWdpblVwZGF0ZSgpO1xyXG4gICAgY29uc3QgYXJncyA9IHRoaXMuZGF0YVNlcnZpY2UuYnVpbGRHZXRVcEJpbGxzSW5mb0FyZ3MoY2VsbCk7XHJcblxyXG4gICAgdGhpcy5sb2FkaW5nLnNob3coeyBtZXNzYWdlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwibG9hZGluZ1wiKSB9KTtcclxuICAgIHRoaXMubnVtQ2VsbHNBZGRpbmdSZXErKztcclxuICAgIHRoaXMuZGF0YVNlcnZpY2UuZ2V0VXBCaWxsc0luZm8oYXJncykuc3Vic2NyaWJlKFxyXG4gICAgICAoaW5mb3M6IFVwQmlsbEluZm9SZXN1bHRbXSkgPT4ge1xyXG4gICAgICAgIGxldCBwYXJlbnQgPSBncmFwaC5nZXREZWZhdWx0UGFyZW50KCk7XHJcblxyXG4gICAgICAgIGxldCBuZXdDZWxscyA9IFtdO1xyXG4gICAgICAgIC8vIGdyYXBoLmdldE1vZGVsKCkuYmVnaW5VcGRhdGUoKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgZm9yIChsZXQgaW5mbyBvZiBpbmZvcykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBkYXRhSW5mbyBvZiBpbmZvLmJpbGxEYXRhSW5mb3MpIHtcclxuICAgICAgICAgICAgICBsZXQgYmlsbENlbGwgPSBudWxsO1xyXG4gICAgICAgICAgICAgIGxldCBidHM6IEJpbGxUcmFja2luZ1NldHRpbmdzID0gbmV3IEJpbGxUcmFja2luZ1NldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgaWYgKGluZm8gJiYgaW5mby5iaWxsVHJhY2tpbmdTZXR0aW5ncykge1xyXG4gICAgICAgICAgICAgICAgYnRzLkxvYWRGcm9tSnNvbihpbmZvLmJpbGxUcmFja2luZ1NldHRpbmdzKTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGxldCBjdXN0b21TdHlsZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgYmlsbENlbGwgPSBncmFwaC5pbnNlcnRCaWxsQ2VsbCh0aGlzLnVwUGFyZW50LCBudWxsLCBkYXRhSW5mbywgaW5mbywgZmFsc2UsIGNlbGwuZ2VvbWV0cnkueCAtIHRoaXMuaHNwYWNlLCBjZWxsLmdlb21ldHJ5LnksIHRoaXMubm9kZVdpZHRoLCB0aGlzLm5vZGVIZWlnaHQsIGBiaWxsTm9kZTske2N1c3RvbVN0eWxlfWApO1xyXG5cclxuICAgICAgICAgICAgICBuZXdDZWxscy5wdXNoKGJpbGxDZWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHRoaXMuY2FsQ2VsbHNQb3NpdGlvbihncmFwaCwgY2VsbCwgbmV3Q2VsbHMsIEJpbGxUcmFja2VyRGlyZWN0aW9uLlVwKTtcclxuXHJcbiAgICAgICAgICBmb3IgKGxldCBuYyBvZiBuZXdDZWxscykge1xyXG4gICAgICAgICAgICBpZiAobmMuYmlsbERhdGFJbmZvLmNhbkNvbnRpbnVlVHJhY2tpbmcpIHtcclxuICAgICAgICAgICAgICBjb25zdCBvbCA9IHRoaXMuYWRkVXBPdmVybGF5KGdyYXBoLCBuYyk7XHJcbiAgICAgICAgICAgICAgbmMudXBDZWxsT3ZlcmxheSA9IG9sO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdyYXBoLmluc2VydEVkZ2UocGFyZW50LCBudWxsLCAnJywgbmMsIGNlbGwsIFwiYmlsbEFzc29jaWF0aW9uO1wiKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBjb25zdCBvbGRHZW8gPSB0aGlzLmVudHJ5LmdldEdlb21ldHJ5KCkuY2xvbmUoKTtcclxuICAgICAgICAgIHRoaXMudXBMYXlvdXQuZXhlY3V0ZSh0aGlzLnVwUGFyZW50LCB0aGlzLmVudHJ5KTtcclxuICAgICAgICAgIGNvbnN0IG5ld0dlbyA9IHRoaXMuZW50cnkuZ2V0R2VvbWV0cnkoKS5jbG9uZSgpO1xyXG4gICAgICAgICAgY29uc3QgZHggPSBvbGRHZW8ueCAtIG5ld0dlby54O1xyXG4gICAgICAgICAgY29uc3QgZHkgPSBvbGRHZW8ueSAtIG5ld0dlby55O1xyXG5cclxuICAgICAgICAgIHRoaXMucmVzdG9yZUVudHJ5UG9zaXRpb24oZ3JhcGgsIHRoaXMuZW50cnksIGR4LCBkeSk7XHJcblxyXG4gICAgICAgICAgY29uc3QgY2VsbERhdGEgPSBjZWxsLmRhdGEgYXMgVXBDZWxsRGF0YTtcclxuICAgICAgICAgIGNlbGxEYXRhLnVwcy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgZm9yIChsZXQgbmMgb2YgbmV3Q2VsbHMpIHtcclxuICAgICAgICAgICAgY29uc3QgY2QgPSBuZXcgVXBDZWxsRGF0YSgpO1xyXG4gICAgICAgICAgICB0aGlzLnNldENlbGxEYXRhKGNkLCBuYyk7XHJcbiAgICAgICAgICAgIG5jLmRhdGEgPSBjZDtcclxuXHJcbiAgICAgICAgICAgIGNkLmRvd24gPSBjZWxsRGF0YTtcclxuICAgICAgICAgICAgY2VsbERhdGEudXBzLnB1c2goY2QpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgIGdyYXBoLmdldE1vZGVsKCkuZW5kVXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOmHjee7mOeUu+W4g+Wkp+Wwj1xyXG4gICAgICAgIHJlc2V0VmlldyAmJiBncmFwaC5maXJlRXZlbnQobmV3IG14RXZlbnRPYmplY3QoRXZlbnRzLlJFU0VUX0dSQVBIX1ZJRVcpKTtcclxuICAgICAgICB0aGlzLm51bUNlbGxzQWRkaW5nUmVxLS07XHJcbiAgICAgICAgLy8g6Ieq5a6a5LmJ5Y2V5o2u6IqC54K55o+S5YWl5bm256e75L2N5ZCO5LqL5Lu2XHJcbiAgICAgICAgdGhpcy5ncmFwaC5maXJlRXZlbnQobmV3IG14RXZlbnRPYmplY3QoRXZlbnRzLkJJTExfQ0VMTFNfQURERURfQU5EX01PVkVELCAnY2VsbHMnLCBuZXdDZWxscywgJ3BhcmVudCcsIHRoaXMudXBQYXJlbnQpKTtcclxuICAgICAgICB0aGlzLmxvYWRpbmcuY2xvc2UoKTtcclxuICAgICAgfSxcclxuICAgICAgKGVycikgPT4ge1xyXG4gICAgICAgIHRoaXMubnVtQ2VsbHNBZGRpbmdSZXEtLTtcclxuICAgICAgICB0aGlzLmxvYWRpbmcuY2xvc2UoKTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2VyLmVycm9yKGVyci5lcnJvciA9PSBudWxsID8gZXJyLm1lc3NhZ2UgOiAoZXJyLmVycm9yLk1lc3NhZ2UgfHwgZXJyLmVycm9yLm1lc3NhZ2UgfHwgZXJyLm1lc3NhZ2UpKTtcclxuICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWRkRG93bkFzc29DZWxsKGdyYXBoOiBHcmFwaCwgY2VsbDogQmlsbENlbGwsIHJlc2V0VmlldzogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICBncmFwaC5nZXRNb2RlbCgpLmJlZ2luVXBkYXRlKCk7XHJcbiAgICBjb25zdCBhcmdzID0gdGhpcy5kYXRhU2VydmljZS5idWlsZEdldERvd25CaWxsc0luZm9BcmdzKGNlbGwpO1xyXG5cclxuICAgIHRoaXMubG9hZGluZy5zaG93KHsgbWVzc2FnZTogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybShcImxvYWRpbmdcIikgfSk7XHJcbiAgICB0aGlzLm51bUNlbGxzQWRkaW5nUmVxKys7XHJcbiAgICB0aGlzLmRhdGFTZXJ2aWNlLmdldERvd25CaWxsc0luZm8oYXJncykuc3Vic2NyaWJlKFxyXG4gICAgICAoaW5mb3M6IERvd25CaWxsSW5mb1Jlc3VsdFtdKSA9PiB7XHJcbiAgICAgICAgbGV0IG1vZGVsID0gZ3JhcGguZ2V0TW9kZWwoKTtcclxuICAgICAgICBsZXQgcGFyZW50ID0gZ3JhcGguZ2V0RGVmYXVsdFBhcmVudCgpO1xyXG5cclxuICAgICAgICBsZXQgbmV3Q2VsbHMgPSBbXTtcclxuICAgICAgICAvLyBncmFwaC5nZXRNb2RlbCgpLmJlZ2luVXBkYXRlKCk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGZvciAobGV0IGluZm8gb2YgaW5mb3MpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgZGF0YUluZm8gb2YgaW5mby5iaWxsRGF0YUluZm9zKSB7XHJcbiAgICAgICAgICAgICAgbGV0IGJpbGxDZWxsID0gbnVsbDtcclxuICAgICAgICAgICAgICBsZXQgYnRzOiBCaWxsVHJhY2tpbmdTZXR0aW5ncyA9IG5ldyBCaWxsVHJhY2tpbmdTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgIGlmIChpbmZvICYmIGluZm8uYmlsbFRyYWNraW5nU2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgICAgIGJ0cy5Mb2FkRnJvbUpzb24oaW5mby5iaWxsVHJhY2tpbmdTZXR0aW5ncyk7XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBsZXQgY3VzdG9tU3R5bGUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgIGJpbGxDZWxsID0gZ3JhcGguaW5zZXJ0QmlsbENlbGwodGhpcy5kb3duUGFyZW50LCBudWxsLCBkYXRhSW5mbywgaW5mbywgZmFsc2UsIGNlbGwuZ2VvbWV0cnkueCArIHRoaXMuaHNwYWNlLCBjZWxsLmdlb21ldHJ5LnksIHRoaXMubm9kZVdpZHRoLCB0aGlzLm5vZGVIZWlnaHQsIGBiaWxsTm9kZTske2N1c3RvbVN0eWxlfWApO1xyXG5cclxuICAgICAgICAgICAgICBuZXdDZWxscy5wdXNoKGJpbGxDZWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5jYWxDZWxsc1Bvc2l0aW9uKGdyYXBoLCBjZWxsLCBuZXdDZWxscywgQmlsbFRyYWNrZXJEaXJlY3Rpb24uRG93bik7XHJcblxyXG4gICAgICAgICAgZm9yIChsZXQgbmMgb2YgbmV3Q2VsbHMpIHtcclxuICAgICAgICAgICAgaWYgKG5jLmJpbGxEYXRhSW5mby5jYW5Db250aW51ZVRyYWNraW5nKSB7XHJcbiAgICAgICAgICAgICAgY29uc3Qgb2wgPSB0aGlzLmFkZERvd25PdmVybGF5KGdyYXBoLCBuYyk7XHJcbiAgICAgICAgICAgICAgbmMuZG93bkNlbGxPdmVybGF5ID0gb2w7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ3JhcGguaW5zZXJ0RWRnZShwYXJlbnQsIG51bGwsICcnLCBjZWxsLCBuYywgXCJiaWxsQXNzb2NpYXRpb247XCIpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbnN0IG9sZEdlbyA9IHRoaXMuZW50cnkuZ2V0R2VvbWV0cnkoKS5jbG9uZSgpO1xyXG4gICAgICAgICAgdGhpcy5kb3duTGF5b3V0LmV4ZWN1dGUodGhpcy5kb3duUGFyZW50LCB0aGlzLmVudHJ5KTtcclxuICAgICAgICAgIGNvbnN0IG5ld0dlbyA9IHRoaXMuZW50cnkuZ2V0R2VvbWV0cnkoKS5jbG9uZSgpO1xyXG4gICAgICAgICAgY29uc3QgZHggPSBvbGRHZW8ueCAtIG5ld0dlby54O1xyXG4gICAgICAgICAgY29uc3QgZHkgPSBvbGRHZW8ueSAtIG5ld0dlby55O1xyXG5cclxuICAgICAgICAgIHRoaXMucmVzdG9yZUVudHJ5UG9zaXRpb24oZ3JhcGgsIHRoaXMuZW50cnksIGR4LCBkeSk7XHJcblxyXG4gICAgICAgICAgY29uc3QgY2VsbERhdGEgPSBjZWxsLmRhdGEgYXMgRG93bkNlbGxEYXRhO1xyXG4gICAgICAgICAgY2VsbERhdGEuZG93bnMubGVuZ3RoID0gMDtcclxuICAgICAgICAgIGZvciAobGV0IG5jIG9mIG5ld0NlbGxzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNkID0gbmV3IERvd25DZWxsRGF0YSgpO1xyXG4gICAgICAgICAgICB0aGlzLnNldENlbGxEYXRhKGNkLCBuYyk7XHJcbiAgICAgICAgICAgIG5jLmRhdGEgPSBjZDtcclxuXHJcbiAgICAgICAgICAgIGNkLnVwID0gY2VsbERhdGE7XHJcbiAgICAgICAgICAgIGNlbGxEYXRhLmRvd25zLnB1c2goY2QpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgIGdyYXBoLmdldE1vZGVsKCkuZW5kVXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOmHjee7mOeUu+W4g+Wkp+Wwj1xyXG4gICAgICAgIHJlc2V0VmlldyAmJiBncmFwaC5maXJlRXZlbnQobmV3IG14RXZlbnRPYmplY3QoRXZlbnRzLlJFU0VUX0dSQVBIX1ZJRVcpKTtcclxuICAgICAgICB0aGlzLm51bUNlbGxzQWRkaW5nUmVxLS07XHJcbiAgICAgICAgLy8g6Ieq5a6a5LmJ5Y2V5o2u6IqC54K55o+S5YWl5bm256e75L2N5ZCO5LqL5Lu2XHJcbiAgICAgICAgdGhpcy5ncmFwaC5maXJlRXZlbnQobmV3IG14RXZlbnRPYmplY3QoRXZlbnRzLkJJTExfQ0VMTFNfQURERURfQU5EX01PVkVELCAnY2VsbHMnLCBuZXdDZWxscywgJ3BhcmVudCcsIHRoaXMuZG93blBhcmVudCkpO1xyXG4gICAgICAgIHRoaXMubG9hZGluZy5jbG9zZSgpO1xyXG4gICAgICB9LFxyXG4gICAgICAoZXJyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5udW1DZWxsc0FkZGluZ1JlcS0tO1xyXG4gICAgICAgIHRoaXMubG9hZGluZy5jbG9zZSgpO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZXIuZXJyb3IoZXJyLmVycm9yID09IG51bGwgPyBlcnIubWVzc2FnZSA6IChlcnIuZXJyb3IuTWVzc2FnZSB8fCBlcnIuZXJyb3IubWVzc2FnZSB8fCBlcnIubWVzc2FnZSkpO1xyXG4gICAgICAgIHRocm93IGVycjtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZW1vdmVBc3NvQ2VsbChncmFwaDogR3JhcGgsIGNlbGw6IEJpbGxDZWxsLCBkaXI6IEJpbGxUcmFja2VyRGlyZWN0aW9uKSB7XHJcbiAgICBjb25zdCBtb2RlbCA9IGdyYXBoLmdldE1vZGVsKCk7XHJcbiAgICBjb25zdCBwYXJlbnQgPSBncmFwaC5nZXREZWZhdWx0UGFyZW50KCk7XHJcbiAgICBncmFwaC5nZXRNb2RlbCgpLmJlZ2luVXBkYXRlKCk7XHJcbiAgICB0cnkge1xyXG4gICAgICBsZXQgYXNzb0NlbGxzOiBCaWxsQ2VsbFtdID0gW107XHJcbiAgICAgIGlmIChkaXIgPT0gQmlsbFRyYWNrZXJEaXJlY3Rpb24uRG93bikge1xyXG4gICAgICAgIGxldCBlZGdlcyA9IG1vZGVsLmdldE91dGdvaW5nRWRnZXMoY2VsbCk7XHJcbiAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgIHdoaWxlIChlZGdlcyAmJiBlZGdlcy5sZW5ndGggPiAwICYmIGkgPCBlZGdlcy5sZW5ndGgpIHtcclxuICAgICAgICAgIGlmIChlZGdlc1tpXS50YXJnZXQgJiYgZWRnZXNbaV0udGFyZ2V0ICE9IHRoaXMuZW50cnkpIHtcclxuICAgICAgICAgICAgYXNzb0NlbGxzLnB1c2goZWRnZXNbaV0udGFyZ2V0IGFzIEJpbGxDZWxsKTtcclxuICAgICAgICAgICAgZWRnZXMucHVzaCguLi5tb2RlbC5nZXRPdXRnb2luZ0VkZ2VzKGVkZ2VzW2ldLnRhcmdldCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaSsrO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChkaXIgPT0gQmlsbFRyYWNrZXJEaXJlY3Rpb24uVXApIHtcclxuICAgICAgICBsZXQgZWRnZXMgPSBtb2RlbC5nZXRJbmNvbWluZ0VkZ2VzKGNlbGwpO1xyXG4gICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICB3aGlsZSAoZWRnZXMgJiYgZWRnZXMubGVuZ3RoID4gMCAmJiBpIDwgZWRnZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICBpZiAoZWRnZXNbaV0uc291cmNlICYmIGVkZ2VzW2ldLnNvdXJjZSAhPSB0aGlzLmVudHJ5KSB7XHJcbiAgICAgICAgICAgIGFzc29DZWxscy5wdXNoKGVkZ2VzW2ldLnNvdXJjZSBhcyBCaWxsQ2VsbCk7XHJcbiAgICAgICAgICAgIGVkZ2VzLnB1c2goLi4ubW9kZWwuZ2V0SW5jb21pbmdFZGdlcyhlZGdlc1tpXS5zb3VyY2UpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGkrKztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGRpciA9PSBCaWxsVHJhY2tlckRpcmVjdGlvbi5Eb3duKSB7XHJcbiAgICAgICAgKGNlbGwuZGF0YSBhcyBEb3duQ2VsbERhdGEpLmRvd25zLmxlbmd0aCA9IDA7XHJcbiAgICAgIH0gZWxzZSBpZiAoZGlyID09IEJpbGxUcmFja2VyRGlyZWN0aW9uLlVwKSB7XHJcbiAgICAgICAgKGNlbGwuZGF0YSBhcyBVcENlbGxEYXRhKS51cHMubGVuZ3RoID0gMDtcclxuICAgICAgfVxyXG4gICAgICBncmFwaC5yZW1vdmVDZWxscyhhc3NvQ2VsbHMpO1xyXG5cclxuICAgICAgY29uc3Qgb2xkR2VvID0gdGhpcy5lbnRyeS5nZXRHZW9tZXRyeSgpLmNsb25lKCk7XHJcbiAgICAgIHRoaXMudXBMYXlvdXQuZXhlY3V0ZSh0aGlzLnVwUGFyZW50LCB0aGlzLmVudHJ5KTtcclxuICAgICAgY29uc3QgbmV3R2VvID0gdGhpcy5lbnRyeS5nZXRHZW9tZXRyeSgpLmNsb25lKCk7XHJcbiAgICAgIGNvbnN0IGR4ID0gb2xkR2VvLnggLSBuZXdHZW8ueDtcclxuICAgICAgY29uc3QgZHkgPSBvbGRHZW8ueSAtIG5ld0dlby55O1xyXG4gICAgICB0aGlzLnJlc3RvcmVFbnRyeVBvc2l0aW9uKGdyYXBoLCB0aGlzLmVudHJ5LCBkeCwgZHkpO1xyXG5cclxuICAgICAgY29uc3Qgb2xkR2VvMiA9IHRoaXMuZW50cnkuZ2V0R2VvbWV0cnkoKS5jbG9uZSgpO1xyXG4gICAgICB0aGlzLmRvd25MYXlvdXQuZXhlY3V0ZSh0aGlzLmRvd25QYXJlbnQsIHRoaXMuZW50cnkpO1xyXG4gICAgICBjb25zdCBuZXdHZW8yID0gdGhpcy5lbnRyeS5nZXRHZW9tZXRyeSgpLmNsb25lKCk7XHJcbiAgICAgIGNvbnN0IGR4MiA9IG9sZEdlbzIueCAtIG5ld0dlbzIueDtcclxuICAgICAgY29uc3QgZHkyID0gb2xkR2VvMi55IC0gbmV3R2VvMi55O1xyXG4gICAgICB0aGlzLnJlc3RvcmVFbnRyeVBvc2l0aW9uKGdyYXBoLCB0aGlzLmVudHJ5LCBkeDIsIGR5Mik7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICBncmFwaC5nZXRNb2RlbCgpLmVuZFVwZGF0ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlc3RvcmVFbnRyeVBvc2l0aW9uKGdyYXBoOiBHcmFwaCwgZW50cnk6IEJpbGxDZWxsLCBkeDogbnVtYmVyLCBkeTogbnVtYmVyKSB7XHJcbiAgICBncmFwaC5nZXRNb2RlbCgpLmJlZ2luVXBkYXRlKCk7XHJcbiAgICB0cnkge1xyXG4gICAgICBsZXQgdmVydGljZXM6IE14R3JhcGhOUy5teENlbGxbXSA9IG51bGw7XHJcbiAgICAgIHZlcnRpY2VzID0gW2VudHJ5LCAuLi5ncmFwaC5nZXRDaGlsZENlbGxzKHRoaXMudXBQYXJlbnQsIHRydWUsIGZhbHNlKSwgLi4uZ3JhcGguZ2V0Q2hpbGRDZWxscyh0aGlzLmRvd25QYXJlbnQsIHRydWUsIGZhbHNlKV07XHJcbiAgICAgIGdyYXBoLm1vdmVDZWxscyh2ZXJ0aWNlcywgZHgsIGR5KTtcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIGdyYXBoLmdldE1vZGVsKCkuZW5kVXBkYXRlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY2FsQ2VsbHNQb3NpdGlvbihncmFwaDogR3JhcGgsIGNlbGw6IEJpbGxDZWxsLCBuZXdDZWxsczogQmlsbENlbGxbXSwgZGlyOiBCaWxsVHJhY2tlckRpcmVjdGlvbikge1xyXG4gICAgaWYgKGRpciA9PSBCaWxsVHJhY2tlckRpcmVjdGlvbi5Eb3duKSB7XHJcbiAgICAgIHRoaXMucmVzZXREb3duQ2VsbHNQb3NpdGlvbihncmFwaCwgY2VsbCwgbmV3Q2VsbHMpO1xyXG4gICAgfSBlbHNlIGlmIChkaXIgPT0gQmlsbFRyYWNrZXJEaXJlY3Rpb24uVXApIHtcclxuICAgICAgdGhpcy5yZXNldFVwQ2VsbHNQb3NpdGlvbihncmFwaCwgY2VsbCwgbmV3Q2VsbHMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlc2V0RG93bkNlbGxzUG9zaXRpb24oZ3JhcGg6IEdyYXBoLCBjZWxsOiBCaWxsQ2VsbCwgbmV3Q2VsbHM6IEJpbGxDZWxsW10pIHtcclxuICAgIGdyYXBoLmdldE1vZGVsKCkuYmVnaW5VcGRhdGUoKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGxldCB0YXJnZXRzID0gZ3JhcGguZ2V0T3V0Z29pbmdFZGdlcyhjZWxsKS5tYXAoZWRnZSA9PiBlZGdlLnRhcmdldCk7XHJcblxyXG4gICAgICBsZXQgZGVhbHMgPSB0YXJnZXRzO1xyXG5cclxuICAgICAgLy/mjInnurXlnZDmoIfku47lpKfliLDlsI/mjpLluo9cclxuICAgICAgbGV0IHRlbXAgPSBkZWFscy5zb3J0KChjMSwgYzIpID0+IGMxLmdlb21ldHJ5ICYmIGMyLmdlb21ldHJ5ID8gYzIuZ2VvbWV0cnkueSAtIGMxLmdlb21ldHJ5LnkgOiBOdW1iZXIuTUlOX1ZBTFVFKTtcclxuICAgICAgLy/mnIDlsI/nurXlnZDmoIdcclxuICAgICAgbGV0IG1pblkgPSB0ZW1wLmxlbmd0aCA+IDAgPyB0ZW1wW3RlbXAubGVuZ3RoIC0gMV0uZ2VvbWV0cnkueSA6IGNlbGwuZ2VvbWV0cnkueTtcclxuICAgICAgLy/mnIDlpKfnurXlnZDmoIdcclxuICAgICAgbGV0IG1heFkgPSB0ZW1wLmxlbmd0aCA+IDAgPyB0ZW1wWzBdLmdlb21ldHJ5LnkgOiBjZWxsLmdlb21ldHJ5Lnk7XHJcbiAgICAgIC8v5L6d5qyh5L+u5pS55paw5o+S5YWl6IqC54K555qE57q15Z2Q5qCHXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3Q2VsbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBtYXhZID0gZGVhbHMubGVuZ3RoID4gMCA/IG1heFkgKyB0aGlzLnZzcGFjZSA6IG1heFk7XHJcbiAgICAgICAgZ3JhcGgudHJhbnNsYXRlQ2VsbChuZXdDZWxsc1tpXSwgMCwgbWF4WSAtIG5ld0NlbGxzW2ldLmdlb21ldHJ5LnkpO1xyXG4gICAgICAgIGRlYWxzLnB1c2gobmV3Q2VsbHNbaV0pO1xyXG4gICAgICB9XHJcbiAgICAgIGxldCBtaWRZID0gKG1heFkgKyBtaW5ZKSAvIDI7XHJcbiAgICAgIGxldCBkaWZmWSA9IGNlbGwuZ2VvbWV0cnkueSAtIG1pZFk7XHJcbiAgICAgIC8v5L6d5qyh5L+u5pS55omA5pyJ54K557q15Z2Q5qCHXHJcbiAgICAgIGRlYWxzLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgZ3JhcGgudHJhbnNsYXRlQ2VsbChjLCAwLCBkaWZmWSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBtaW5ZICs9IGRpZmZZO1xyXG4gICAgICBtYXhZICs9IGRpZmZZO1xyXG5cclxuICAgICAgbWlkWSArPSBkaWZmWTtcclxuICAgICAgLy8g5bCGPD1taWRZ55qE6IqC54K55YWo6YOo5LiK56e76IezbWluWS1kaWZmWSw+PW1pZFnkuIvnp7voh7NtYXhZICsgZGlmZllcclxuICAgICAgZm9yIChsZXQga2V5IGluIGdyYXBoLm1vZGVsLmNlbGxzKSB7XHJcbiAgICAgICAgaWYgKGdyYXBoLm1vZGVsLmNlbGxzW2tleV0gPT0gZ3JhcGgubW9kZWwucm9vdCB8fCBncmFwaC5tb2RlbC5jZWxsc1trZXldLmdlb21ldHJ5ID09IG51bGwgfHwgZ3JhcGgubW9kZWwuY2VsbHNba2V5XS5lZGdlID09IHRydWUpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZ3JhcGgubW9kZWwuY2VsbHNba2V5XSA9PSBjZWxsIHx8IG5ld0NlbGxzLmluZGV4T2YoZ3JhcGgubW9kZWwuY2VsbHNba2V5XSBhcyBhbnkpICE9IC0xKSB7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGdyYXBoLm1vZGVsLmNlbGxzW2tleV0gPT0gdGhpcy5lbnRyeSkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChncmFwaC5tb2RlbC5jZWxsc1trZXldLmdlb21ldHJ5LnggPCB0aGlzLmVudHJ5Lmdlb21ldHJ5LngpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjID0gZ3JhcGgubW9kZWwuY2VsbHNba2V5XTtcclxuICAgICAgICBsZXQgZ2VvID0gYy5nZW9tZXRyeTtcclxuICAgICAgICBncmFwaC50cmFuc2xhdGVDZWxsKGMsIDAsIGdlby55IDw9IGNlbGwuZ2VvbWV0cnkueSA/IG1pblkgLSAoY2VsbC5nZW9tZXRyeS55IC0gZ2VvLnkpIC0gZ2VvLnkgOiBtYXhZICsgKGdlby55IC0gY2VsbC5nZW9tZXRyeS55KSAtIGdlby55KTtcclxuICAgICAgfVxyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgZ3JhcGguZ2V0TW9kZWwoKS5lbmRVcGRhdGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldFVwQ2VsbHNQb3NpdGlvbihncmFwaDogR3JhcGgsIGNlbGw6IEJpbGxDZWxsLCBuZXdDZWxsczogQmlsbENlbGxbXSkge1xyXG4gICAgZ3JhcGguZ2V0TW9kZWwoKS5iZWdpblVwZGF0ZSgpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgbGV0IHNvdXJjZXMgPSBncmFwaC5nZXRJbmNvbWluZ0VkZ2VzKGNlbGwpLm1hcChlZGdlID0+IGVkZ2Uuc291cmNlKTtcclxuICAgICAgbGV0IGRlYWxzID0gc291cmNlcztcclxuXHJcbiAgICAgIC8v5oyJ57q15Z2Q5qCH5LuO5aSn5Yiw5bCP5o6S5bqPXHJcbiAgICAgIGxldCB0ZW1wID0gZGVhbHMuc29ydCgoYzEsIGMyKSA9PiBjMS5nZW9tZXRyeSAmJiBjMi5nZW9tZXRyeSA/IGMyLmdlb21ldHJ5LnkgLSBjMS5nZW9tZXRyeS55IDogTnVtYmVyLk1JTl9WQUxVRSk7XHJcbiAgICAgIC8v5pyA5bCP57q15Z2Q5qCHXHJcbiAgICAgIGxldCBtaW5ZID0gdGVtcC5sZW5ndGggPiAwID8gdGVtcFt0ZW1wLmxlbmd0aCAtIDFdLmdlb21ldHJ5LnkgOiBjZWxsLmdlb21ldHJ5Lnk7XHJcbiAgICAgIC8v5pyA5aSn57q15Z2Q5qCHXHJcbiAgICAgIGxldCBtYXhZID0gdGVtcC5sZW5ndGggPiAwID8gdGVtcFswXS5nZW9tZXRyeS55IDogY2VsbC5nZW9tZXRyeS55O1xyXG4gICAgICAvL+S+neasoeS/ruaUueaWsOaPkuWFpeiKgueCueeahOe6teWdkOagh1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0NlbGxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbWF4WSA9IGRlYWxzLmxlbmd0aCA+IDAgPyBtYXhZICsgdGhpcy52c3BhY2UgOiBtYXhZO1xyXG4gICAgICAgIGdyYXBoLnRyYW5zbGF0ZUNlbGwobmV3Q2VsbHNbaV0sIDAsIG1heFkgLSBuZXdDZWxsc1tpXS5nZW9tZXRyeS55KTtcclxuICAgICAgICBkZWFscy5wdXNoKG5ld0NlbGxzW2ldKTtcclxuICAgICAgfVxyXG4gICAgICBsZXQgbWlkWSA9IChtYXhZICsgbWluWSkgLyAyO1xyXG4gICAgICBsZXQgZGlmZlkgPSBjZWxsLmdlb21ldHJ5LnkgLSBtaWRZO1xyXG4gICAgICAvL+S+neasoeS/ruaUueaJgOacieeCuee6teWdkOagh1xyXG4gICAgICBkZWFscy5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgIGdyYXBoLnRyYW5zbGF0ZUNlbGwoYywgMCwgZGlmZlkpO1xyXG4gICAgICB9KTtcclxuICAgICAgbWluWSArPSBkaWZmWTtcclxuICAgICAgbWF4WSArPSBkaWZmWTtcclxuXHJcbiAgICAgIG1pZFkgKz0gZGlmZlk7XHJcbiAgICAgIC8vIOWwhjw9bWlkWeeahOiKgueCueWFqOmDqOS4iuenu+iHs21pblktZGlmZlksPj1taWRZ5LiL56e76IezbWF4WSArIGRpZmZZXHJcbiAgICAgIGZvciAobGV0IGtleSBpbiBncmFwaC5tb2RlbC5jZWxscykge1xyXG4gICAgICAgIGlmIChncmFwaC5tb2RlbC5jZWxsc1trZXldID09IGdyYXBoLm1vZGVsLnJvb3QgfHwgZ3JhcGgubW9kZWwuY2VsbHNba2V5XS5nZW9tZXRyeSA9PSBudWxsIHx8IGdyYXBoLm1vZGVsLmNlbGxzW2tleV0uZWRnZSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGdyYXBoLm1vZGVsLmNlbGxzW2tleV0gPT0gY2VsbCB8fCBuZXdDZWxscy5pbmRleE9mKGdyYXBoLm1vZGVsLmNlbGxzW2tleV0gYXMgYW55KSAhPSAtMSkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChncmFwaC5tb2RlbC5jZWxsc1trZXldID09IHRoaXMuZW50cnkpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZ3JhcGgubW9kZWwuY2VsbHNba2V5XS5nZW9tZXRyeS54ID4gdGhpcy5lbnRyeS5nZW9tZXRyeS54KSB7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYyA9IGdyYXBoLm1vZGVsLmNlbGxzW2tleV07XHJcbiAgICAgICAgbGV0IGdlbyA9IGMuZ2VvbWV0cnk7XHJcblxyXG4gICAgICAgIGdyYXBoLnRyYW5zbGF0ZUNlbGwoYywgMCwgZ2VvLnkgPD0gY2VsbC5nZW9tZXRyeS55ID8gbWluWSAtIChjZWxsLmdlb21ldHJ5LnkgLSBnZW8ueSkgLSBnZW8ueSA6IG1heFkgKyAoZ2VvLnkgLSBjZWxsLmdlb21ldHJ5LnkpIC0gZ2VvLnkpO1xyXG4gICAgICB9XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICBncmFwaC5nZXRNb2RlbCgpLmVuZFVwZGF0ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldENlbGxEYXRhKGNlbGxEYXRhOiBDZWxsRGF0YSwgY2VsbDogQmlsbENlbGwpIHtcclxuICAgIGNlbGxEYXRhLmJpbGxJbmZvID0gY2VsbC5iaWxsSW5mbztcclxuICAgIGNlbGxEYXRhLmJpbGxEYXRhSW5mbyA9IGNlbGwuYmlsbERhdGFJbmZvO1xyXG4gICAgY2VsbERhdGEudmlzaWJsZSA9IHRydWU7XHJcbiAgICBjZWxsRGF0YS5kaWFncmFtSW5mby54ID0gY2VsbC5nZW9tZXRyeS54O1xyXG4gICAgY2VsbERhdGEuZGlhZ3JhbUluZm8ueSA9IGNlbGwuZ2VvbWV0cnkueTtcclxuICAgIGNlbGxEYXRhLmRpYWdyYW1JbmZvLndpZHRoID0gY2VsbC5nZW9tZXRyeS53aWR0aDtcclxuICAgIGNlbGxEYXRhLmRpYWdyYW1JbmZvLmhlaWdodCA9IGNlbGwuZ2VvbWV0cnkuaGVpZ2h0O1xyXG4gICAgY2VsbERhdGEuZGlhZ3JhbUluZm8uZXh0UHJvcHMgPSB7XHJcbiAgICAgIHN0eWxlOiBjZWxsLnN0eWxlXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgem9vbU91dCgpIHtcclxuICAgIHRoaXMuZ3JhcGguem9vbU91dCgpO1xyXG4gIH1cclxuXHJcbiAgem9vbUluKCkge1xyXG4gICAgdGhpcy5ncmFwaC56b29tSW4oKTtcclxuICB9XHJcblxyXG4gIHpvb21BY3R1YWwoKSB7XHJcbiAgICB0aGlzLmdyYXBoLnpvb21BY3R1YWwoKTtcclxuICB9XHJcblxyXG4gIGdldFpvb21TY2FsZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQodGhpcy5ncmFwaC52aWV3LnNjYWxlICogMTAwKTtcclxuICB9XHJcblxyXG4gIHByaW50KCkge1xyXG4gICAgY29uc3QgcHJldmlldyA9IG5ldyBteFByaW50UHJldmlldyh0aGlzLmdyYXBoLCAxKTtcclxuICAgIHByZXZpZXcucHJpbnRPdmVybGF5cyA9IHRydWU7XHJcbiAgICBwcmV2aWV3LnByaW50Q29udHJvbHMgPSB0cnVlO1xyXG4gICAgcHJldmlldy5wcmludEJhY2tncm91bmRJbWFnZSA9IHRydWU7XHJcblxyXG4gICAgcHJldmlldy5vcGVuKGJpbGxUcmFja2VyQ2VsbENzcyk7XHJcbiAgfVxyXG5cclxuICBleHBhbmQoZGlyZWN0aW9uOiBCaWxsVHJhY2tlckRpcmVjdGlvbiwgYWxsOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgIGlmIChhbGwpIHtcclxuICAgICAgdGhpcy5leHBhbmRBbGwoZGlyZWN0aW9uKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKGRpcmVjdGlvbiA9PSBCaWxsVHJhY2tlckRpcmVjdGlvbi5VcCkge1xyXG4gICAgICBjb25zdCBjZWxsczogTXhHcmFwaE5TLm14Q2VsbFtdID0gW3RoaXMuZW50cnldO1xyXG4gICAgICB0aGlzLnVwUGFyZW50LmNoaWxkcmVuICYmIGNlbGxzLnB1c2goLi4udGhpcy51cFBhcmVudC5jaGlsZHJlbik7XHJcbiAgICAgIGNlbGxzLmZvckVhY2goKGNlbGw6IEJpbGxDZWxsKSA9PiB7XHJcbiAgICAgICAgaWYgKGNlbGwudXBDZWxsT3ZlcmxheSAmJiBjZWxsLnVwQ2VsbE92ZXJsYXkuc3RhdGUgPT0gQ2VsbE92ZXJsYXlTdGF0ZS5TZWFyY2gpIHtcclxuICAgICAgICAgIGNlbGwudXBDZWxsT3ZlcmxheS5maXJlRXZlbnQobmV3IG14RXZlbnRPYmplY3QobXhFdmVudC5DTElDSykpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PSBCaWxsVHJhY2tlckRpcmVjdGlvbi5Eb3duKSB7XHJcbiAgICAgIGNvbnN0IGNlbGxzOiBNeEdyYXBoTlMubXhDZWxsW10gPSBbdGhpcy5lbnRyeV07XHJcbiAgICAgIHRoaXMuZG93blBhcmVudC5jaGlsZHJlbiAmJiBjZWxscy5wdXNoKC4uLnRoaXMuZG93blBhcmVudC5jaGlsZHJlbik7XHJcbiAgICAgIGNlbGxzLmZvckVhY2goKGNlbGw6IEJpbGxDZWxsKSA9PiB7XHJcbiAgICAgICAgaWYgKGNlbGwuZG93bkNlbGxPdmVybGF5ICYmIGNlbGwuZG93bkNlbGxPdmVybGF5LnN0YXRlID09IENlbGxPdmVybGF5U3RhdGUuU2VhcmNoKSB7XHJcbiAgICAgICAgICBjZWxsLmRvd25DZWxsT3ZlcmxheS5maXJlRXZlbnQobmV3IG14RXZlbnRPYmplY3QobXhFdmVudC5DTElDSykpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBleHBhbmRBbGwoZGlyZWN0aW9uOiBCaWxsVHJhY2tlckRpcmVjdGlvbikge1xyXG4gICAgaWYgKGRpcmVjdGlvbiAhPSBCaWxsVHJhY2tlckRpcmVjdGlvbi5VcCAmJiBkaXJlY3Rpb24gIT0gQmlsbFRyYWNrZXJEaXJlY3Rpb24uRG93bikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5Y2V5o2u6IqC54K55re75Yqg5bm256e75L2N5ZCO5LqL5Lu255uR5ZCs5ZmoXHJcbiAgICBsZXQgYWZ0ZXJCaWxsQ2VsbHNBZGRlZEFuZE1vdmVkID0gbnVsbDtcclxuICAgIGlmIChkaXJlY3Rpb24gPT0gQmlsbFRyYWNrZXJEaXJlY3Rpb24uVXApIHtcclxuICAgICAgYWZ0ZXJCaWxsQ2VsbHNBZGRlZEFuZE1vdmVkID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNlbGxzOiBNeEdyYXBoTlMubXhDZWxsW10gPSBbdGhpcy5lbnRyeV07XHJcbiAgICAgICAgdGhpcy51cFBhcmVudC5jaGlsZHJlbiAmJiBjZWxscy5wdXNoKC4uLnRoaXMudXBQYXJlbnQuY2hpbGRyZW4pO1xyXG5cclxuICAgICAgICBjb25zdCBjYW5UcmFja1VwQ2VsbHMgPSBjZWxscy5maWx0ZXIoKGNlbGw6IEJpbGxDZWxsKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gY2VsbC51cENlbGxPdmVybGF5ICYmIGNlbGwudXBDZWxsT3ZlcmxheS5zdGF0ZSA9PSBDZWxsT3ZlcmxheVN0YXRlLlNlYXJjaDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8g5rKh5pyJ5Y+v5LiK5p+l6IqC54K55LiU5rKh5pyJ5q2j5Zyo5omn6KGM55qE5LiK5p+l6K+35rGC5pe25Yig6Zmk55uR5ZCs5ZmoXHJcbiAgICAgICAgaWYgKGNhblRyYWNrVXBDZWxscyA9PSBudWxsIHx8IGNhblRyYWNrVXBDZWxscy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgaWYgKHRoaXMubnVtQ2VsbHNBZGRpbmdSZXEgPT09IDApIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCLnp7vpmaTnm5HlkKzlmahcIik7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JhcGgucmVtb3ZlTGlzdGVuZXIoYWZ0ZXJCaWxsQ2VsbHNBZGRlZEFuZE1vdmVkKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS50aW1lRW5kKFwiRXhwYW5kQWxsXCIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjYW5UcmFja1VwQ2VsbHMuZm9yRWFjaCgoY2VsbDogQmlsbENlbGwpID0+IHtcclxuICAgICAgICAgICAgaWYgKGNlbGwudXBDZWxsT3ZlcmxheSAmJiBjZWxsLnVwQ2VsbE92ZXJsYXkuc3RhdGUgPT0gQ2VsbE92ZXJsYXlTdGF0ZS5TZWFyY2gpIHtcclxuICAgICAgICAgICAgICBjZWxsLnVwQ2VsbE92ZXJsYXkuZmlyZUV2ZW50KG5ldyBteEV2ZW50T2JqZWN0KG14RXZlbnQuQ0xJQ0spKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT0gQmlsbFRyYWNrZXJEaXJlY3Rpb24uRG93bikge1xyXG4gICAgICBhZnRlckJpbGxDZWxsc0FkZGVkQW5kTW92ZWQgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY2VsbHM6IE14R3JhcGhOUy5teENlbGxbXSA9IFt0aGlzLmVudHJ5XTtcclxuICAgICAgICB0aGlzLmRvd25QYXJlbnQuY2hpbGRyZW4gJiYgY2VsbHMucHVzaCguLi50aGlzLmRvd25QYXJlbnQuY2hpbGRyZW4pO1xyXG5cclxuICAgICAgICBjb25zdCBjYW5UcmFja0Rvd25DZWxscyA9IGNlbGxzLmZpbHRlcigoY2VsbDogQmlsbENlbGwpID0+IHtcclxuICAgICAgICAgIHJldHVybiBjZWxsLmRvd25DZWxsT3ZlcmxheSAmJiBjZWxsLmRvd25DZWxsT3ZlcmxheS5zdGF0ZSA9PSBDZWxsT3ZlcmxheVN0YXRlLlNlYXJjaDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8g5rKh5pyJ5Y+v5LiL5p+l6IqC54K55LiU5rKh5pyJ5q2j5Zyo5omn6KGM55qE5LiL5p+l6K+35rGC5pe25Yig6Zmk55uR5ZCs5ZmoXHJcbiAgICAgICAgaWYgKGNhblRyYWNrRG93bkNlbGxzID09IG51bGwgfHwgY2FuVHJhY2tEb3duQ2VsbHMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgIGlmICh0aGlzLm51bUNlbGxzQWRkaW5nUmVxID09PSAwKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwi56e76Zmk55uR5ZCs5ZmoXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmdyYXBoLnJlbW92ZUxpc3RlbmVyKGFmdGVyQmlsbENlbGxzQWRkZWRBbmRNb3ZlZCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUudGltZUVuZChcIkV4cGFuZEFsbFwiKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY2FuVHJhY2tEb3duQ2VsbHMuZm9yRWFjaCgoY2VsbDogQmlsbENlbGwpID0+IHtcclxuICAgICAgICAgICAgaWYgKGNlbGwuZG93bkNlbGxPdmVybGF5ICYmIGNlbGwuZG93bkNlbGxPdmVybGF5LnN0YXRlID09IENlbGxPdmVybGF5U3RhdGUuU2VhcmNoKSB7XHJcbiAgICAgICAgICAgICAgY2VsbC5kb3duQ2VsbE92ZXJsYXkuZmlyZUV2ZW50KG5ldyBteEV2ZW50T2JqZWN0KG14RXZlbnQuQ0xJQ0spKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbnNvbGUudGltZShcIkV4cGFuZEFsbFwiKTtcclxuICAgIC8vIOa3u+WKoOebkeWQrOWZqFxyXG4gICAgLy8gY29uc29sZS5sb2coXCLmt7vliqDnm5HlkKzlmahcIik7XHJcbiAgICB0aGlzLmdyYXBoLmFkZExpc3RlbmVyKFwiYmlsbENlbGxzQWRkZWRBbmRNb3ZlZFwiLCBhZnRlckJpbGxDZWxsc0FkZGVkQW5kTW92ZWQpO1xyXG5cclxuICAgIC8vIOebtOaOpeinpuWPkeS4gOasoeWxleW8gOS6i+S7tlxyXG4gICAgYWZ0ZXJCaWxsQ2VsbHNBZGRlZEFuZE1vdmVkKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==