/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/services/bill-tracker-ui.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver, ReflectiveInjector, Inject, LOCALE_ID } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { BillTrackerDataService } from './bill-tracker-data.service';
import { BillTrackerComponent } from '../components/bill-tracker/bill-tracker.component';
import { BillTrackerArgs } from '../config/bill-tracker-args';
import { GetDownBillsInfoArgs } from '../../entity/tracking/GetDownBillsInfoArgs';
import { BillTrackerLocalePipe } from '../pipe/bill-tracker-locale.pipe';
import { of } from 'rxjs';
import { switchMap, catchError } from 'rxjs/operators';
import { MessagerService } from '@farris/ui-messager';
import { LoadingService } from '@farris/ui-loading';
import { FrameworkService, AppType } from '@gsp-sys/rtf-common';
import { BillTrackerConstant } from '../config/bill-tracker-constant';
import { BillTrackerGraphOptions } from '../config/bill-tracker-graph-options';
import { BillTrackerGridOptions } from '../config/bill-tracker-grid-options';
export class BillTrackerUiService {
    /**
     * @param {?} frameworkService
     * @param {?} messager
     * @param {?} loading
     * @param {?} localeId
     * @param {?} dataService
     * @param {?} modalService
     * @param {?} cfr
     * @param {?} injector
     */
    constructor(frameworkService, messager, loading, localeId, dataService, modalService, cfr, injector) {
        this.frameworkService = frameworkService;
        this.messager = messager;
        this.loading = loading;
        this.dataService = dataService;
        this.modalService = modalService;
        this.cfr = cfr;
        this.injector = injector;
        /**
         * 内置模态框配置
         */
        this.defaultModalOptions = {
            title: null,
            width: 1100,
            height: 480,
            buttons: null,
            showButtons: null,
        };
        this.localePipe = new BillTrackerLocalePipe(localeId);
    }
    /**
     * 打开单据追踪弹窗
     * todo: spa模式下，弹窗在body中，位于最上层，打开联查时会盖住新tab页，此问题待解决
     * @param {?} args 单据追踪参数
     * @param {?=} maximized 是否最大化弹窗
     * @param {?=} modalOptions 弹窗配置
     * @param {?=} graphOptions 追踪图配置
     * @param {?=} gridOptions 数据表配置
     * @return {?}
     */
    openDefaultBillTrackerDialog(args, maximized = true, modalOptions, graphOptions, gridOptions) {
        if (typeof modalOptions == "string") {
            if (modalOptions == "") {
                this.messager.info(this.localePipe.transform("modalOptionsCantBeEmpty"));
                return of(null);
            }
            modalOptions = JSON.parse(modalOptions);
        }
        /** @type {?} */
        let modalOpts = {
            title: this.localePipe.transform("billTracker")
        };
        modalOpts = Object.assign(modalOpts, this.defaultModalOptions, modalOptions);
        if (typeof graphOptions == "string") {
            if (graphOptions != "") {
                graphOptions = JSON.parse(graphOptions);
            }
            else {
                graphOptions = null;
            }
        }
        if (typeof gridOptions == "string") {
            if (gridOptions != "") {
                gridOptions = JSON.parse(gridOptions);
            }
            else {
                gridOptions = null;
            }
        }
        /** @type {?} */
        const downArgs = new GetDownBillsInfoArgs();
        downArgs.billDataId = args.billDataId;
        downArgs.documentTypeId = args.documentTypeId;
        downArgs.bizKind = args.bizKind;
        downArgs.bizType = args.bizType;
        downArgs.billChildInfos = args.billChildInfos;
        downArgs.curYear = args.curYear;
        this.loading.show({ message: this.localePipe.transform("loading") });
        return this.dataService.canTracking(downArgs).pipe(switchMap((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (!res.canDownTracking && !res.canUpTracking) {
                this.messager.info(this.localePipe.transform("noAssoBill"));
                this.loading.close();
                return of(null);
            }
            /** @type {?} */
            const billTrackerArgs = new BillTrackerArgs();
            billTrackerArgs.canTrackingResult = res;
            billTrackerArgs.getBillsInfoArgs = args;
            /** @type {?} */
            let graphOpt = new BillTrackerGraphOptions();
            graphOpt = Object.assign(graphOpt, graphOptions);
            billTrackerArgs.graphOptions = graphOpt;
            /** @type {?} */
            let gridOpt = new BillTrackerGridOptions();
            gridOpt = Object.assign(gridOpt, gridOptions);
            billTrackerArgs.gridOptions = gridOpt;
            /** @type {?} */
            const cmpR = this.createBillTrackerComponent(billTrackerArgs);
            this.loading.close();
            /** @type {?} */
            const modalRef = this.modalService.show(cmpR, modalOpts);
            if (maximized) {
                modalRef.dialog.instance.maxDialog();
            }
            cmpR.instance.setModalRef(modalRef);
            return of(cmpR.instance);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.loading.close();
            //todo 确定异常结构, 目前采用兼容取值方式
            this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            throw err;
        })));
    }
    /**
     * 打开单据追踪应用
     * @param {?} args 单据追踪参数
     * @param {?=} graphOptions 追踪图配置
     * @param {?=} gridOptions 数据表配置
     * @return {?}
     */
    openDefaultBillTrackerApp(args, graphOptions, gridOptions) {
        if (typeof graphOptions == "string") {
            if (graphOptions == "") {
                this.messager.info(this.localePipe.transform("modalOptionsCantBeEmpty"));
                return;
            }
            graphOptions = JSON.parse(graphOptions);
        }
        if (typeof gridOptions == "string") {
            if (gridOptions == "") {
                this.messager.info(this.localePipe.transform("modalOptionsCantBeEmpty"));
                return;
            }
            gridOptions = JSON.parse(gridOptions);
        }
        /** @type {?} */
        const downArgs = new GetDownBillsInfoArgs();
        downArgs.documentTypeId = args.documentTypeId;
        downArgs.billDataId = args.billDataId;
        downArgs.bizKind = args.bizKind;
        downArgs.bizType = args.bizType;
        downArgs.billChildInfos = args.billChildInfos;
        downArgs.curYear = args.curYear;
        this.loading.show({ message: this.localePipe.transform("loading") });
        this.dataService.canTracking(downArgs).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (!res.canDownTracking && !res.canUpTracking) {
                this.messager.info(this.localePipe.transform("noAssoBill"));
                this.loading.close();
                return;
            }
            /** @type {?} */
            const billTrackerArgs = new BillTrackerArgs();
            billTrackerArgs.canTrackingResult = res;
            billTrackerArgs.getBillsInfoArgs = args;
            /** @type {?} */
            let graphOpt = new BillTrackerGraphOptions();
            graphOpt = Object.assign(graphOpt, graphOptions);
            billTrackerArgs.graphOptions = graphOpt;
            /** @type {?} */
            let gridOpt = new BillTrackerGridOptions();
            gridOpt = Object.assign(gridOpt, gridOptions);
            billTrackerArgs.gridOptions = gridOpt;
            /** @type {?} */
            const opt = {
                appId: BillTrackerConstant.DEFAULT_APP_ID,
                appEntrance: BillTrackerConstant.DEFAULT_APP_ENTRANCE,
                funcId: BillTrackerConstant.DEFAULT_FUNC_ID,
                tabId: "billTracker" + Date.now(),
                tabName: this.localePipe.transform("billTracker"),
                appType: AppType.App,
                entityParams: billTrackerArgs,
                queryStringParams: this.buildQueryMap(billTrackerArgs),
                isReload: undefined,
            };
            this.frameworkService.openMenu(opt);
            this.loading.close();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.loading.close();
            //todo 确定异常结构, 目前采用兼容取值方式
            this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            throw err;
        }));
    }
    /**
     * 创建单据追踪组件
     * @param {?} billTrackerArgs 单据追踪参数
     * @param {?=} cfr ComponentFactoryResolver
     * @param {?=} injector Injector
     * @param {?=} custProviders 自定义Provider
     * @return {?}
     */
    createBillTrackerComponent(billTrackerArgs, cfr, injector, custProviders) {
        cfr = cfr == null ? this.cfr : cfr;
        injector = injector == null ? this.injector : injector;
        custProviders = custProviders == null || Array.isArray(custProviders) == false ? [] : custProviders;
        /** @type {?} */
        const inj = ReflectiveInjector.resolveAndCreate([
            { provide: BillTrackerArgs, useValue: billTrackerArgs },
            ...custProviders
        ], injector);
        /** @type {?} */
        const cmpF = cfr.resolveComponentFactory(BillTrackerComponent);
        /** @type {?} */
        const cmpR = cmpF.create(inj);
        return cmpR;
    }
    /**
     * 能否继续追踪
     * @param {?} args
     * @return {?}
     */
    canTracking(args) {
        return this.dataService.canTracking(args);
    }
    /**
     * 获取下游单据信息
     * @param {?} args
     * @return {?}
     */
    getDownBillsInfo(args) {
        return this.dataService.getDownBillsInfo(args);
    }
    /**
     * 获取上游单据信息
     * @param {?} args
     * @return {?}
     */
    getUpBillsInfo(args) {
        return this.dataService.getUpBillsInfo(args);
    }
    /**
     * 查询实体数据
     * @param {?} args
     * @return {?}
     */
    getEntityData(args) {
        return this.dataService.getEntityData(args);
    }
    /**
     * @private
     * @param {?} billTrackerArgs
     * @return {?}
     */
    buildQueryMap(billTrackerArgs) {
        /** @type {?} */
        let map = new Map();
        for (let key in billTrackerArgs) {
            /** @type {?} */
            let value = billTrackerArgs[key];
            if (typeof value == "object") {
                value = value && JSON.stringify(value);
            }
            map.set(key, value);
        }
        return map;
    }
}
BillTrackerUiService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BillTrackerUiService.ctorParameters = () => [
    { type: FrameworkService },
    { type: MessagerService },
    { type: LoadingService },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: BillTrackerDataService },
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
if (false) {
    /**
     * 内置模态框配置
     * @type {?}
     */
    BillTrackerUiService.prototype.defaultModalOptions;
    /** @type {?} */
    BillTrackerUiService.prototype.localePipe;
    /** @type {?} */
    BillTrackerUiService.prototype.frameworkService;
    /** @type {?} */
    BillTrackerUiService.prototype.messager;
    /** @type {?} */
    BillTrackerUiService.prototype.loading;
    /** @type {?} */
    BillTrackerUiService.prototype.dataService;
    /** @type {?} */
    BillTrackerUiService.prototype.modalService;
    /** @type {?} */
    BillTrackerUiService.prototype.cfr;
    /** @type {?} */
    BillTrackerUiService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbC10cmFja2VyLXVpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWJpZi9ydW50aW1lLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9iaWxsLXRyYWNrZXIvc2VydmljZXMvYmlsbC10cmFja2VyLXVpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RILE9BQU8sRUFBRSxjQUFjLEVBQWdCLE1BQU0sa0JBQWtCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDckUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFDekYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTlELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxFQUFFLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxnQkFBZ0IsRUFBYyxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM1RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUV0RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUs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b25lbnRGYWN0b3J5UmVzb2x2ZXIsIFJlZmxlY3RpdmVJbmplY3RvciwgSW5qZWN0LCBMT0NBTEVfSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UsIE1vZGFsT3B0aW9ucyB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xyXG5pbXBvcnQgeyBCaWxsVHJhY2tlckRhdGFTZXJ2aWNlIH0gZnJvbSAnLi9iaWxsLXRyYWNrZXItZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQmlsbFRyYWNrZXJDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL2JpbGwtdHJhY2tlci9iaWxsLXRyYWNrZXIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQmlsbFRyYWNrZXJBcmdzIH0gZnJvbSAnLi4vY29uZmlnL2JpbGwtdHJhY2tlci1hcmdzJztcclxuaW1wb3J0IHsgR2V0QmlsbHNJbmZvQXJncyB9IGZyb20gJy4uLy4uL2VudGl0eS90cmFja2luZy9HZXRCaWxsc0luZm9BcmdzJztcclxuaW1wb3J0IHsgR2V0RG93bkJpbGxzSW5mb0FyZ3MgfSBmcm9tICcuLi8uLi9lbnRpdHkvdHJhY2tpbmcvR2V0RG93bkJpbGxzSW5mb0FyZ3MnO1xyXG5pbXBvcnQgeyBCaWxsVHJhY2tlckxvY2FsZVBpcGUgfSBmcm9tICcuLi9waXBlL2JpbGwtdHJhY2tlci1sb2NhbGUucGlwZSc7XHJcbmltcG9ydCB7IG9mLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHN3aXRjaE1hcCwgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgTWVzc2FnZXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XHJcbmltcG9ydCB7IENhblRyYWNraW5nUmVzdWx0IH0gZnJvbSAnLi4vYXJncy9DYW5UcmFja2luZ1Jlc3VsdCc7XHJcbmltcG9ydCB7IExvYWRpbmdTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2FkaW5nJztcclxuaW1wb3J0IHsgRnJhbWV3b3JrU2VydmljZSwgQXBwT3B0aW9ucywgQXBwVHlwZSB9IGZyb20gJ0Bnc3Atc3lzL3J0Zi1jb21tb24nO1xyXG5pbXBvcnQgeyBCaWxsVHJhY2tlckNvbnN0YW50IH0gZnJvbSAnLi4vY29uZmlnL2JpbGwtdHJhY2tlci1jb25zdGFudCc7XHJcbmltcG9ydCB7IElCaWxsVHJhY2tlclVpU2VydmljZSB9IGZyb20gJy4uL2Jhc2UvSUJpbGxUcmFja2VyVWlTZXJ2aWNlJztcclxuaW1wb3J0IHsgQmlsbFRyYWNrZXJHcmFwaE9wdGlvbnMgfSBmcm9tICcuLi9jb25maWcvYmlsbC10cmFja2VyLWdyYXBoLW9wdGlvbnMnO1xyXG5pbXBvcnQgeyBCaWxsVHJhY2tlckdyaWRPcHRpb25zIH0gZnJvbSAnLi4vY29uZmlnL2JpbGwtdHJhY2tlci1ncmlkLW9wdGlvbnMnO1xyXG5pbXBvcnQgeyBHZXRNYWluRW50aXR5RGF0YUFyZ3MgfSBmcm9tICcuLi9hcmdzL0dldE1haW5FbnRpdHlEYXRhQXJncyc7XHJcbmltcG9ydCB7IEVudGl0eURhdGFSZXN1bHQgfSBmcm9tICcuLi9hcmdzL0VudGl0eURhdGFSZXN1bHQnO1xyXG5pbXBvcnQgeyBHZXRVcEJpbGxzSW5mb0FyZ3MgfSBmcm9tICcuLi8uLi9lbnRpdHkvdHJhY2tpbmcvR2V0VXBCaWxsc0luZm9BcmdzJztcclxuaW1wb3J0IHsgVXBCaWxsSW5mb1Jlc3VsdCB9IGZyb20gJy4uL2FyZ3MvVXBCaWxsSW5mb1Jlc3VsdCc7XHJcbmltcG9ydCB7IERvd25CaWxsSW5mb1Jlc3VsdCB9IGZyb20gJy4uL2FyZ3MvRG93bkJpbGxJbmZvUmVzdWx0JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEJpbGxUcmFja2VyVWlTZXJ2aWNlIGltcGxlbWVudHMgSUJpbGxUcmFja2VyVWlTZXJ2aWNlIHtcclxuICAgIC8qKlxyXG4gICAgICog5YaF572u5qih5oCB5qGG6YWN572uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWFkb25seSBkZWZhdWx0TW9kYWxPcHRpb25zOiBNb2RhbE9wdGlvbnMgPSB7XHJcbiAgICAgICAgdGl0bGU6IG51bGwsXHJcbiAgICAgICAgd2lkdGg6IDExMDAsXHJcbiAgICAgICAgaGVpZ2h0OiA0ODAsXHJcbiAgICAgICAgYnV0dG9uczogbnVsbCxcclxuICAgICAgICBzaG93QnV0dG9uczogbnVsbCxcclxuICAgIH07XHJcblxyXG4gICAgbG9jYWxlUGlwZTogQmlsbFRyYWNrZXJMb2NhbGVQaXBlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyBmcmFtZXdvcmtTZXJ2aWNlOiBGcmFtZXdvcmtTZXJ2aWNlLFxyXG4gICAgICAgIHB1YmxpYyBtZXNzYWdlcjogTWVzc2FnZXJTZXJ2aWNlLFxyXG4gICAgICAgIHB1YmxpYyBsb2FkaW5nOiBMb2FkaW5nU2VydmljZSxcclxuICAgICAgICBASW5qZWN0KExPQ0FMRV9JRCkgbG9jYWxlSWQ6IHN0cmluZyxcclxuICAgICAgICBwdWJsaWMgZGF0YVNlcnZpY2U6IEJpbGxUcmFja2VyRGF0YVNlcnZpY2UsXHJcbiAgICAgICAgcHVibGljIG1vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UsXHJcbiAgICAgICAgcHVibGljIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgICAgIHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLmxvY2FsZVBpcGUgPSBuZXcgQmlsbFRyYWNrZXJMb2NhbGVQaXBlKGxvY2FsZUlkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaJk+W8gOWNleaNrui/vei4quW8ueeql1xyXG4gICAgICogdG9kbzogc3Bh5qih5byP5LiL77yM5by556qX5ZyoYm9keeS4re+8jOS9jeS6juacgOS4iuWxgu+8jOaJk+W8gOiBlOafpeaXtuS8muebluS9j+aWsHRhYumhte+8jOatpOmXrumimOW+heino+WGs1xyXG4gICAgICogQHBhcmFtIGFyZ3Mg5Y2V5o2u6L+96Liq5Y+C5pWwXHJcbiAgICAgKiBAcGFyYW0gbWF4aW1pemVkIOaYr+WQpuacgOWkp+WMluW8ueeql1xyXG4gICAgICogQHBhcmFtIG1vZGFsT3B0aW9ucyDlvLnnqpfphY3nva5cclxuICAgICAqIEBwYXJhbSBncmFwaE9wdGlvbnMg6L+96Liq5Zu+6YWN572uXHJcbiAgICAgKiBAcGFyYW0gZ3JpZE9wdGlvbnMg5pWw5o2u6KGo6YWN572uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvcGVuRGVmYXVsdEJpbGxUcmFja2VyRGlhbG9nKGFyZ3M6IEdldEJpbGxzSW5mb0FyZ3MsIG1heGltaXplZDogYm9vbGVhbiA9IHRydWUsIG1vZGFsT3B0aW9ucz86IE1vZGFsT3B0aW9ucywgZ3JhcGhPcHRpb25zPzogQmlsbFRyYWNrZXJHcmFwaE9wdGlvbnMsIGdyaWRPcHRpb25zPzogQmlsbFRyYWNrZXJHcmlkT3B0aW9ucyk6IE9ic2VydmFibGU8QmlsbFRyYWNrZXJDb21wb25lbnQ+IHtcclxuICAgICAgICBpZiAodHlwZW9mIG1vZGFsT3B0aW9ucyA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGlmIChtb2RhbE9wdGlvbnMgPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlci5pbmZvKHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJtb2RhbE9wdGlvbnNDYW50QmVFbXB0eVwiKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbW9kYWxPcHRpb25zID0gSlNPTi5wYXJzZShtb2RhbE9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG1vZGFsT3B0czogTW9kYWxPcHRpb25zID0ge1xyXG4gICAgICAgICAgICB0aXRsZTogdGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybShcImJpbGxUcmFja2VyXCIpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBtb2RhbE9wdHMgPSBPYmplY3QuYXNzaWduKG1vZGFsT3B0cywgdGhpcy5kZWZhdWx0TW9kYWxPcHRpb25zLCBtb2RhbE9wdGlvbnMpO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGdyYXBoT3B0aW9ucyA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGlmIChncmFwaE9wdGlvbnMgIT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgZ3JhcGhPcHRpb25zID0gSlNPTi5wYXJzZShncmFwaE9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZ3JhcGhPcHRpb25zID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBncmlkT3B0aW9ucyA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGlmIChncmlkT3B0aW9ucyAhPSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICBncmlkT3B0aW9ucyA9IEpTT04ucGFyc2UoZ3JpZE9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZ3JpZE9wdGlvbnMgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBkb3duQXJncyA9IG5ldyBHZXREb3duQmlsbHNJbmZvQXJncygpO1xyXG4gICAgICAgIGRvd25BcmdzLmJpbGxEYXRhSWQgPSBhcmdzLmJpbGxEYXRhSWQ7XHJcbiAgICAgICAgZG93bkFyZ3MuZG9jdW1lbnRUeXBlSWQgPSBhcmdzLmRvY3VtZW50VHlwZUlkO1xyXG4gICAgICAgIGRvd25BcmdzLmJpektpbmQgPSBhcmdzLmJpektpbmQ7XHJcbiAgICAgICAgZG93bkFyZ3MuYml6VHlwZSA9IGFyZ3MuYml6VHlwZTtcclxuICAgICAgICBkb3duQXJncy5iaWxsQ2hpbGRJbmZvcyA9IGFyZ3MuYmlsbENoaWxkSW5mb3M7XHJcbiAgICAgICAgZG93bkFyZ3MuY3VyWWVhciA9IGFyZ3MuY3VyWWVhcjtcclxuXHJcbiAgICAgICAgdGhpcy5sb2FkaW5nLnNob3coeyBtZXNzYWdlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwibG9hZGluZ1wiKSB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZS5jYW5UcmFja2luZyhkb3duQXJncykucGlwZShcclxuICAgICAgICAgICAgc3dpdGNoTWFwKFxyXG4gICAgICAgICAgICAgICAgKHJlczogQ2FuVHJhY2tpbmdSZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlcy5jYW5Eb3duVHJhY2tpbmcgJiYgIXJlcy5jYW5VcFRyYWNraW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZXIuaW5mbyh0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwibm9Bc3NvQmlsbFwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBiaWxsVHJhY2tlckFyZ3M6IEJpbGxUcmFja2VyQXJncyA9IG5ldyBCaWxsVHJhY2tlckFyZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICBiaWxsVHJhY2tlckFyZ3MuY2FuVHJhY2tpbmdSZXN1bHQgPSByZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgYmlsbFRyYWNrZXJBcmdzLmdldEJpbGxzSW5mb0FyZ3MgPSBhcmdzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgZ3JhcGhPcHQgPSBuZXcgQmlsbFRyYWNrZXJHcmFwaE9wdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgICAgICBncmFwaE9wdCA9IE9iamVjdC5hc3NpZ24oZ3JhcGhPcHQsIGdyYXBoT3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYmlsbFRyYWNrZXJBcmdzLmdyYXBoT3B0aW9ucyA9IGdyYXBoT3B0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgZ3JpZE9wdCA9IG5ldyBCaWxsVHJhY2tlckdyaWRPcHRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JpZE9wdCA9IE9iamVjdC5hc3NpZ24oZ3JpZE9wdCwgZ3JpZE9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJpbGxUcmFja2VyQXJncy5ncmlkT3B0aW9ucyA9IGdyaWRPcHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNtcFIgPSB0aGlzLmNyZWF0ZUJpbGxUcmFja2VyQ29tcG9uZW50KGJpbGxUcmFja2VyQXJncyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGFsUmVmID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhjbXBSLCBtb2RhbE9wdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXhpbWl6ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWxSZWYuZGlhbG9nLmluc3RhbmNlLm1heERpYWxvZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjbXBSLmluc3RhbmNlLnNldE1vZGFsUmVmKG1vZGFsUmVmKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKGNtcFIuaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICAgICBjYXRjaEVycm9yKFxyXG4gICAgICAgICAgICAgICAgKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdG9kbyDnoa7lrprlvILluLjnu5PmnoQsIOebruWJjemHh+eUqOWFvOWuueWPluWAvOaWueW8j1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZXIuZXJyb3IoZXJyLmVycm9yID09IG51bGwgPyBlcnIubWVzc2FnZSA6IChlcnIuZXJyb3IuTWVzc2FnZSB8fCBlcnIuZXJyb3IubWVzc2FnZSB8fCBlcnIubWVzc2FnZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmiZPlvIDljZXmja7ov73ouKrlupTnlKhcclxuICAgICAqIEBwYXJhbSBhcmdzIOWNleaNrui/vei4quWPguaVsFxyXG4gICAgICogQHBhcmFtIGdyYXBoT3B0aW9ucyDov73ouKrlm77phY3nva5cclxuICAgICAqIEBwYXJhbSBncmlkT3B0aW9ucyDmlbDmja7ooajphY3nva5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG9wZW5EZWZhdWx0QmlsbFRyYWNrZXJBcHAoYXJnczogR2V0QmlsbHNJbmZvQXJncywgZ3JhcGhPcHRpb25zPzogQmlsbFRyYWNrZXJHcmFwaE9wdGlvbnMsIGdyaWRPcHRpb25zPzogQmlsbFRyYWNrZXJHcmlkT3B0aW9ucyk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZ3JhcGhPcHRpb25zID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgaWYgKGdyYXBoT3B0aW9ucyA9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2VyLmluZm8odGhpcy5sb2NhbGVQaXBlLnRyYW5zZm9ybShcIm1vZGFsT3B0aW9uc0NhbnRCZUVtcHR5XCIpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBncmFwaE9wdGlvbnMgPSBKU09OLnBhcnNlKGdyYXBoT3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGdyaWRPcHRpb25zID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgaWYgKGdyaWRPcHRpb25zID09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZXIuaW5mbyh0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwibW9kYWxPcHRpb25zQ2FudEJlRW1wdHlcIikpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdyaWRPcHRpb25zID0gSlNPTi5wYXJzZShncmlkT3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBkb3duQXJncyA9IG5ldyBHZXREb3duQmlsbHNJbmZvQXJncygpO1xyXG4gICAgICAgIGRvd25BcmdzLmRvY3VtZW50VHlwZUlkID0gYXJncy5kb2N1bWVudFR5cGVJZDtcclxuICAgICAgICBkb3duQXJncy5iaWxsRGF0YUlkID0gYXJncy5iaWxsRGF0YUlkO1xyXG4gICAgICAgIGRvd25BcmdzLmJpektpbmQgPSBhcmdzLmJpektpbmQ7XHJcbiAgICAgICAgZG93bkFyZ3MuYml6VHlwZSA9IGFyZ3MuYml6VHlwZTtcclxuICAgICAgICBkb3duQXJncy5iaWxsQ2hpbGRJbmZvcyA9IGFyZ3MuYmlsbENoaWxkSW5mb3M7XHJcbiAgICAgICAgZG93bkFyZ3MuY3VyWWVhciA9IGFyZ3MuY3VyWWVhcjtcclxuXHJcbiAgICAgICAgdGhpcy5sb2FkaW5nLnNob3coeyBtZXNzYWdlOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwibG9hZGluZ1wiKSB9KTtcclxuICAgICAgICB0aGlzLmRhdGFTZXJ2aWNlLmNhblRyYWNraW5nKGRvd25BcmdzKS5zdWJzY3JpYmUoXHJcbiAgICAgICAgICAgIChyZXM6IENhblRyYWNraW5nUmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlcy5jYW5Eb3duVHJhY2tpbmcgJiYgIXJlcy5jYW5VcFRyYWNraW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlci5pbmZvKHRoaXMubG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJub0Fzc29CaWxsXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgYmlsbFRyYWNrZXJBcmdzOiBCaWxsVHJhY2tlckFyZ3MgPSBuZXcgQmlsbFRyYWNrZXJBcmdzKCk7XHJcbiAgICAgICAgICAgICAgICBiaWxsVHJhY2tlckFyZ3MuY2FuVHJhY2tpbmdSZXN1bHQgPSByZXM7XHJcbiAgICAgICAgICAgICAgICBiaWxsVHJhY2tlckFyZ3MuZ2V0QmlsbHNJbmZvQXJncyA9IGFyZ3M7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGdyYXBoT3B0ID0gbmV3IEJpbGxUcmFja2VyR3JhcGhPcHRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICBncmFwaE9wdCA9IE9iamVjdC5hc3NpZ24oZ3JhcGhPcHQsIGdyYXBoT3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICBiaWxsVHJhY2tlckFyZ3MuZ3JhcGhPcHRpb25zID0gZ3JhcGhPcHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGdyaWRPcHQgPSBuZXcgQmlsbFRyYWNrZXJHcmlkT3B0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgZ3JpZE9wdCA9IE9iamVjdC5hc3NpZ24oZ3JpZE9wdCwgZ3JpZE9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgYmlsbFRyYWNrZXJBcmdzLmdyaWRPcHRpb25zID0gZ3JpZE9wdDtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBvcHQ6IEFwcE9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwSWQ6IEJpbGxUcmFja2VyQ29uc3RhbnQuREVGQVVMVF9BUFBfSUQsXHJcbiAgICAgICAgICAgICAgICAgICAgYXBwRW50cmFuY2U6IEJpbGxUcmFja2VyQ29uc3RhbnQuREVGQVVMVF9BUFBfRU5UUkFOQ0UsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY0lkOiBCaWxsVHJhY2tlckNvbnN0YW50LkRFRkFVTFRfRlVOQ19JRCxcclxuICAgICAgICAgICAgICAgICAgICB0YWJJZDogXCJiaWxsVHJhY2tlclwiICsgRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgICAgICAgICB0YWJOYW1lOiB0aGlzLmxvY2FsZVBpcGUudHJhbnNmb3JtKFwiYmlsbFRyYWNrZXJcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgYXBwVHlwZTogQXBwVHlwZS5BcHAsXHJcbiAgICAgICAgICAgICAgICAgICAgZW50aXR5UGFyYW1zOiBiaWxsVHJhY2tlckFyZ3MsXHJcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlTdHJpbmdQYXJhbXM6IHRoaXMuYnVpbGRRdWVyeU1hcChiaWxsVHJhY2tlckFyZ3MpLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzUmVsb2FkOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuZnJhbWV3b3JrU2VydmljZS5vcGVuTWVudShvcHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgLy90b2RvIOehruWumuW8guW4uOe7k+aehCwg55uu5YmN6YeH55So5YW85a655Y+W5YC85pa55byPXHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2VyLmVycm9yKGVyci5lcnJvciA9PSBudWxsID8gZXJyLm1lc3NhZ2UgOiAoZXJyLmVycm9yLk1lc3NhZ2UgfHwgZXJyLmVycm9yLm1lc3NhZ2UgfHwgZXJyLm1lc3NhZ2UpKTtcclxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJvlu7rljZXmja7ov73ouKrnu4Tku7ZcclxuICAgICAqIEBwYXJhbSBiaWxsVHJhY2tlckFyZ3Mg5Y2V5o2u6L+96Liq5Y+C5pWwIFxyXG4gICAgICogQHBhcmFtIGNmciBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJcclxuICAgICAqIEBwYXJhbSBpbmplY3RvciBJbmplY3RvclxyXG4gICAgICogQHBhcmFtIGN1c3RQcm92aWRlcnMg6Ieq5a6a5LmJUHJvdmlkZXJcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY3JlYXRlQmlsbFRyYWNrZXJDb21wb25lbnQoYmlsbFRyYWNrZXJBcmdzOiBCaWxsVHJhY2tlckFyZ3MsIGNmcj86IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgaW5qZWN0b3I/OiBJbmplY3RvciwgY3VzdFByb3ZpZGVycz86IGFueVtdKSB7XHJcbiAgICAgICAgY2ZyID0gY2ZyID09IG51bGwgPyB0aGlzLmNmciA6IGNmcjtcclxuICAgICAgICBpbmplY3RvciA9IGluamVjdG9yID09IG51bGwgPyB0aGlzLmluamVjdG9yIDogaW5qZWN0b3I7XHJcbiAgICAgICAgY3VzdFByb3ZpZGVycyA9IGN1c3RQcm92aWRlcnMgPT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KGN1c3RQcm92aWRlcnMpID09IGZhbHNlID8gW10gOiBjdXN0UHJvdmlkZXJzO1xyXG5cclxuICAgICAgICBjb25zdCBpbmogPSBSZWZsZWN0aXZlSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbXHJcbiAgICAgICAgICAgIHsgcHJvdmlkZTogQmlsbFRyYWNrZXJBcmdzLCB1c2VWYWx1ZTogYmlsbFRyYWNrZXJBcmdzIH0sXHJcbiAgICAgICAgICAgIC4uLmN1c3RQcm92aWRlcnNcclxuICAgICAgICBdLCBpbmplY3Rvcik7XHJcbiAgICAgICAgY29uc3QgY21wRiA9IGNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShCaWxsVHJhY2tlckNvbXBvbmVudCk7XHJcbiAgICAgICAgY29uc3QgY21wUiA9IGNtcEYuY3JlYXRlKGluaik7XHJcbiAgICAgICAgcmV0dXJuIGNtcFI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDog73lkKbnu6fnu63ov73ouKpcclxuICAgICAqIEBwYXJhbSBhcmdzIFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjYW5UcmFja2luZyhhcmdzOiBHZXREb3duQmlsbHNJbmZvQXJncyk6IE9ic2VydmFibGU8Q2FuVHJhY2tpbmdSZXN1bHQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZS5jYW5UcmFja2luZyhhcmdzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluS4i+a4uOWNleaNruS/oeaBr1xyXG4gICAgICogQHBhcmFtIGFyZ3MgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldERvd25CaWxsc0luZm8oYXJnczogR2V0RG93bkJpbGxzSW5mb0FyZ3MpOiBPYnNlcnZhYmxlPERvd25CaWxsSW5mb1Jlc3VsdFtdPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2UuZ2V0RG93bkJpbGxzSW5mbyhhcmdzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluS4iua4uOWNleaNruS/oeaBr1xyXG4gICAgICogQHBhcmFtIGFyZ3MgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFVwQmlsbHNJbmZvKGFyZ3M6IEdldFVwQmlsbHNJbmZvQXJncyk6IE9ic2VydmFibGU8VXBCaWxsSW5mb1Jlc3VsdFtdPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2UuZ2V0VXBCaWxsc0luZm8oYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmn6Xor6Llrp7kvZPmlbDmja5cclxuICAgICAqIEBwYXJhbSBhcmdzIFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRFbnRpdHlEYXRhKGFyZ3M6IEdldE1haW5FbnRpdHlEYXRhQXJncyk6IE9ic2VydmFibGU8RW50aXR5RGF0YVJlc3VsdD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTZXJ2aWNlLmdldEVudGl0eURhdGEoYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBidWlsZFF1ZXJ5TWFwKGJpbGxUcmFja2VyQXJnczogQmlsbFRyYWNrZXJBcmdzKTogTWFwPHN0cmluZywgc3RyaW5nPiB7XHJcbiAgICAgICAgbGV0IG1hcCA9IG5ldyBNYXAoKTtcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gYmlsbFRyYWNrZXJBcmdzKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IGJpbGxUcmFja2VyQXJnc1trZXldO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgJiYgSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbWFwO1xyXG4gICAgfVxyXG59Il19