/**
 * @fileoverview added by tsickle
 * Generated from: lib/bif-manual-creation/components/push-selector/push-selector.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Inject, LOCALE_ID, ElementRef } from '@angular/core';
import { Subject } from 'rxjs';
import { SELECTOR_ARGS_INJECTOR } from '../../config/selector-args-injector.config';
import { FormGetBillCreationProcessEntityExArgs } from '../../../entity/form-rest/FormGetBillCreationProcessEntityExArgs';
import { BifDataService } from '../../service/bif-data.service';
import { LoadingService } from '@farris/ui-loading';
var PushSelectorComponent = /** @class */ (function () {
    function PushSelectorComponent(args, dataService, localeId, loading, elementRef) {
        var _this = this;
        this.dataService = dataService;
        this.loading = loading;
        this.elementRef = elementRef;
        //目标VoId列表
        this.voIdList = [];
        //目标VoId与目标VoName映射
        this.nameDict = {};
        //目标VoId与相应的生单规则列表映射
        this.entityDict = {};
        this.bsModalRef4BifSelector = null;
        this.subject4CreationProcess = new Subject();
        this.clickOk4BifSelector = (/**
         * @return {?}
         */
        function () {
            _this.subject4CreationProcess.next(_this.selectedEntity);
            _this.subject4CreationProcess.complete();
            _this.bsModalRef4BifSelector.close();
        });
        this.clickClose4BifSelector = (/**
         * @return {?}
         */
        function () {
            _this.bsModalRef4BifSelector.close();
        });
        this.args = new FormGetBillCreationProcessEntityExArgs();
        this.args.LoadFromJsonObject(args);
    }
    Object.defineProperty(PushSelectorComponent.prototype, "selectedVoId", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedVoId;
        },
        set: /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            this._selectedVoId = id;
            if (id != null) {
                this.selectedEntity = this.entityDict[this._selectedVoId][0];
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PushSelectorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.loadItems();
    };
    /**
     * @private
     * @return {?}
     */
    PushSelectorComponent.prototype.loadItems = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.loading.show({ container: this.elementRef });
        /** @type {?} */
        var list$ = null;
        if (this.args.downBillVoId == null) {
            // if (this.args.bizFlowchartId == null) {
            list$ = this.dataService.getSlimBillCreationProcessEntityExesByUpBillVoId4Push(this.args.upBillVoId);
            // } else {
            // list$ = this.dataService.getSlimCreationRulesBySourceVoIdAndFlowchartId(this.args.sourceVoId, this.args.bizFlowchartId);
            // }
        }
        else {
            // if (this.args.bizFlowchartId == null) {
            list$ = this.dataService.getSlimBillCreationProcessEntityExesByUpBillVoIdAndDownBillVoId4SpecificPush(this.args.upBillVoId, this.args.downBillVoId);
            // } else {
            // list$ = this.dataService.getSlimCreationRulesBySourceVoIdAndTargetVoIdAndFlowchartId(this.args.sourceVoId, this.args.downBillVoId, this.args.bizFlowchartId);
            // }
        }
        list$.subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            /** @type {?} */
            var list = result;
            list.forEach((/**
             * @param {?} elt
             * @return {?}
             */
            function (elt) {
                if (_this.voIdList.includes(elt.downBillVoId) === false) {
                    _this.voIdList.push(elt.downBillVoId);
                    _this.entityDict[elt.downBillVoId] = new Array();
                }
                _this.nameDict[elt.downBillVoId] = elt.downBillVoName;
                _this.entityDict[elt.downBillVoId].push(elt);
            }));
            _this.selectedVoId = _this.voIdList.length > 0 ? _this.voIdList[0] : null;
            _this.loading.close();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.loading.close();
            throw err;
        }));
    };
    PushSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-bif-push-selector',
                    template: "<div class=\"g-main px-3 py-2\">\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"height: 150px;overflow-y: auto;\">\r\n    <div [hidden]=\"voIdList.length != 0\"><span style=\"color: red;\">{{ 'emptyResult' | locale }}</span></div>\r\n    <div>{{ 'selectDownstreamBill' | locale }}</div>\r\n    <div *ngFor=\"let voId of voIdList;let i=index\" class=\"col-sm-12 col-md-5 form-check form-check-inline\">\r\n      <input class=\"form-check-input\" type=\"radio\" [name]=\"'voId'+i\" [id]=\"voId\" [value]=\"voId\"\r\n        [(ngModel)]=\"selectedVoId\" />\r\n      <label class=\"form-check-label\" [for]=\"'voId'+i\">{{nameDict[voId]}}</label>\r\n    </div>\r\n  </div>\r\n\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"\">\r\n    <div>{{ 'selectCreationProcess' | locale }}</div>\r\n    <select class=\"form-control\" name=\"selectedEntity\" [(ngModel)]=\"selectedEntity\">\r\n      <option *ngFor=\"let cr of entityDict[selectedVoId];\" [ngValue]=\"cr\">\r\n        {{cr.name}}({{cr.code}})</option>\r\n    </select>\r\n  </div>\r\n\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"\">\r\n    <div>{{ 'processDesciption' | locale }}</div>\r\n    <textarea readonly class=\"form-control\" name=\"description\" rows=\"3\"\r\n      [ngModel]=\"selectedEntity&&selectedEntity.description\"></textarea>\r\n  </div>\r\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PushSelectorComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [SELECTOR_ARGS_INJECTOR,] }] },
        { type: BifDataService },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: LoadingService },
        { type: ElementRef }
    ]; };
    return PushSelectorComponent;
}());
export { PushSelectorComponent };
if (false) {
    /** @type {?} */
    PushSelectorComponent.prototype.voIdList;
    /** @type {?} */
    PushSelectorComponent.prototype.nameDict;
    /** @type {?} */
    PushSelectorComponent.prototype.entityDict;
    /**
     * @type {?}
     * @private
     */
    PushSelectorComponent.prototype._selectedVoId;
    /** @type {?} */
    PushSelectorComponent.prototype.selectedEntity;
    /** @type {?} */
    PushSelectorComponent.prototype.bsModalRef4BifSelector;
    /** @type {?} */
    PushSelectorComponent.prototype.subject4CreationProcess;
    /**
     * @type {?}
     * @private
     */
    PushSelectorComponent.prototype.args;
    /** @type {?} */
    PushSelectorComponent.prototype.clickOk4BifSelector;
    /** @type {?} */
    PushSelectorComponent.prototype.clickClose4BifSelector;
    /**
     * @type {?}
     * @private
     */
    PushSelectorComponent.prototype.dataService;
    /**
     * @type {?}
     * @private
     */
    PushSelectorComponent.prototype.loading;
    /**
     * @type {?}
     * @private
     */
    PushSelectorComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,