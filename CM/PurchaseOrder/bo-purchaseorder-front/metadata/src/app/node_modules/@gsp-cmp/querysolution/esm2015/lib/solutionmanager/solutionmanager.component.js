/**
 * @fileoverview added by tsickle
 * Generated from: lib/solutionmanager/solutionmanager.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, TemplateRef, Output, EventEmitter } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { EditService } from '../service/edit.service';
import { NotifyService } from '@farris/ui-notify';
import { LocaleService } from '@farris/ui-locale';
import { DialogComponent } from '@farris/ui-dialog';
import { DatagridComponent } from '@farris/ui-datagrid';
import { cloneDeep } from 'lodash-es';
export class SolutionManangerComponent {
    /**
     * @param {?} formBuilder
     * @param {?} editService
     * @param {?} notify
     * @param {?} localeService
     */
    constructor(formBuilder, editService, notify, localeService) {
        this.formBuilder = formBuilder;
        this.editService = editService;
        this.notify = notify;
        this.localeService = localeService;
        this.cancelEmitter = new EventEmitter();
        this.confirmEmitter = new EventEmitter();
        // @Input()
        // currentDefaultQuerySolutionId: string;
        // @Input()
        this.querySolutions = new Array();
        this.deletedQuerySolutionIds = new Array();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.columns = [
            { field: 'code', width: 272, title: this.localeService.getValue('querySolution.manageDialog.name') },
            { field: 'isSystem', width: 110, title: this.localeService.getValue('querySolution.manageDialog.property'), formatter: this.getSolutionProperty.bind(this), halign: 'center', align: 'center' },
            { field: 'isDefault', width: 70, title: this.localeService.getValue('querySolution.manageDialog.default'), template: this.checkCell, halign: 'center', align: 'center' },
            { width: 70, title: this.localeService.getValue('querySolution.manageDialog.operation'), template: this.optCell, halign: 'center', align: 'center' }
        ];
        this.title = this.localeService.getValue('querySolution.container.manage');
    }
    /**
     * @param {?} querySolutions
     * @return {?}
     */
    show(querySolutions) {
        if (querySolutions) {
            this.listData = this.findSolutionsWithoutSys(querySolutions);
            this.querySolutions = querySolutions;
        }
        this.checkedSolution = this.querySolutions.find((/**
         * @param {?} vo
         * @return {?}
         */
        vo => vo.isDefault));
        this.deletedQuerySolutionIds = [];
        // this.checkedSolution = undefined;
        this.dialog.show();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getSolutionProperty(value) {
        return value ? this.localeService.getValue("querySolution.manageDialog.system") : this.localeService.getValue("querySolution.manageDialog.personal");
    }
    /**
     * @param {?} querySolutions
     * @return {?}
     */
    findSolutionsWithoutSys(querySolutions) {
        /** @type {?} */
        const result = [];
        querySolutions.forEach((/**
         * @param {?} qs
         * @return {?}
         */
        qs => {
            if (!qs.isSystem)
                result.push(qs);
        }));
        return result;
    }
    /**
     * @param {?} dataItem
     * @return {?}
     */
    delelteSolution(dataItem) {
        this.deletedQuerySolutionIds.push(dataItem.id);
        if (this.checkedSolution && dataItem.id == this.checkedSolution.id) {
            this.checkedSolution = null;
        }
        //当checkedSolution不存在，直接删除
        for (let i = 0; i < this.querySolutions.length; i++) {
            if (dataItem.id == this.querySolutions[i].id) {
                this.querySolutions.splice(i, 1);
                break;
            }
        }
        this.listData = this.findSolutionsWithoutSys(this.querySolutions);
    }
    /**
     * @param {?} checked
     * @param {?} dataItem
     * @return {?}
     */
    setDefault(checked, dataItem) {
        if (checked) { //if checked，设置当前vo为默认，其他设为非默认
            this.checkedSolution = dataItem;
            //key point！
            // this.currentDefaultQuerySolutionId = dataItem.id;
            this.querySolutions = this.querySolutions.map((/**
             * @param {?} vo
             * @return {?}
             */
            vo => {
                if (vo.id == dataItem.id) {
                    vo.isDefault = true;
                }
                else {
                    vo.isDefault = false;
                }
                return vo;
            }));
        }
        else { //if unchecked, 设置当前vo为非默认，其余vo不变; 没有checkedSolution时
            if (dataItem.id == this.checkedSolution.id) {
                this.checkedSolution = null;
                // this.currentDefaultQuerySolutionId = '';
                this.querySolutions = this.querySolutions.map((/**
                 * @param {?} vo
                 * @return {?}
                 */
                vo => {
                    if (vo.id == dataItem.id) {
                        vo.isDefault = false;
                    }
                    return vo;
                }));
            }
        }
        this.listData = this.findSolutionsWithoutSys(this.querySolutions);
        this.list.refresh();
    }
    /**
     * @return {?}
     */
    cancel() {
        this.dialog.close();
    }
    /**
     * @return {?}
     */
    confirm() {
        /** @type {?} */
        let obj = new Object();
        obj['deletedQuerySolutionIds'] = this.deletedQuerySolutionIds;
        obj['newDefaultQuerySolution'] = cloneDeep(this.checkedSolution);
        obj['updatedQuerySolutionVos'] = cloneDeep(this.querySolutions);
        // obj['currentDefaultQuerySolutionId'] = this.currentDefaultQuerySolutionId;
        if (this.deletedQuerySolutionIds.length > 0 || this.checkedSolution && this.checkedSolution.id) {
            obj['validator'] = true;
        }
        else {
            obj['validator'] = false;
        }
        this.confirmEmitter.emit(obj);
        this.dialog.close();
    }
}
SolutionManangerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solutionmanager',
                template: "<farris-dialog #dialog [buttons]=\"manangerbuttonRef\" [width]=\"550\" [height]=\"570\" [title]=\"title\">\r\n    <div class=\"solutionmanager-inner\">\r\n        <farris-datagrid #list [columns]=\"columns\" [data]=\"listData\" [pagination]=\"false\" [fit]=\"true\"></farris-datagrid>\r\n    </div>\r\n    <ng-template #optCell let-ctx>\r\n        <span class=\"f-icon f-icon-yxs_delete solutionmanager-grid-delete\" (click)=\"delelteSolution(ctx.rowData)\"></span>\r\n     </ng-template>\r\n     <ng-template #checkCell let-ctx>\r\n        <div class=\"custom-control custom-radio f-checkradio-single\" style=\"padding-top: 3px;\">\r\n            <input class=\"custom-control-input\" id=\"radio-{{ctx.rowData.id}}\" type=\"radio\" (click)=\"setDefault($event.target.checked, ctx.rowData)\" [checked]=\"ctx.rowData.isDefault\"/>\r\n            <label class=\"custom-control-label\" for=\"radio-{{ctx.rowData.id}}\"></label>\r\n        </div>\r\n     </ng-template>\r\n</farris-dialog>\r\n<ng-template #manangerbuttonRef>\r\n    <button class=\"btn btn-primary\" (click)=\"confirm()\">{{'querySolution.manageDialog.confirm' | locale}}</button>\r\n    <button class=\"btn btn-secondary\" (click)=\"cancel()\">{{'querySolution.manageDialog.cancel' | locale}}</button>\r\n</ng-template>",
                providers: [EditService],
                styles: [""]
            }] }
];
/** @nocollapse */
SolutionManangerComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: EditService },
    { type: NotifyService },
    { type: LocaleService }
];
SolutionManangerComponent.propDecorators = {
    cancelEmitter: [{ type: Output }],
    confirmEmitter: [{ type: Output }],
    dialog: [{ type: ViewChild, args: ['dialog',] }],
    optCell: [{ type: ViewChild, args: ['optCell',] }],
    checkCell: [{ type: ViewChild, args: ['checkCell',] }],
    list: [{ type: ViewChild, args: ['list',] }]
};
if (false) {
    /** @type {?} */
    SolutionManangerComponent.prototype.cancelEmitter;
    /** @type {?} */
    SolutionManangerComponent.prototype.confirmEmitter;
    /** @type {?} */
    SolutionManangerComponent.prototype.querySolutions;
    /** @type {?} */
    SolutionManangerComponent.prototype.deletedQuerySolutionIds;
    /** @type {?} */
    SolutionManangerComponent.prototype.checkedSolution;
    /** @type {?} */
    SolutionManangerComponent.prototype.listData;
    /** @type {?} */
    SolutionManangerComponent.prototype.dialog;
    /** @type {?} */
    SolutionManangerComponent.prototype.optCell;
    /** @type {?} */
    SolutionManangerComponent.prototype.checkCell;
    /** @type {?} */
    SolutionManangerComponent.prototype.list;
    /** @type {?} */
    SolutionManangerComponent.prototype.columns;
    /** @type {?} */
    SolutionManangerComponent.prototype.title;
    /**
     * @type {?}
     * @private
     */
    SolutionManangerComponent.prototype.formBuilder;
    /**
     * @type {?}
     * @private
     */
    SolutionManangerComponent.prototype.editService;
    /**
     * @type {?}
     * @private
     */
    SolutionManangerComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    SolutionManangerComponent.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,