/**
 * @fileoverview added by tsickle
 * Generated from: lib/saveasdialog/saveasdialog.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, ViewChild, HostBinding, ViewEncapsulation } from '@angular/core';
import { NotifyService } from '@farris/ui-notify';
import { QuerySolutionVo, SolutionService } from '@farris/component-querycondition';
import { LocaleService } from '@farris/ui-locale';
import { DialogComponent } from '@farris/ui-dialog';
import { cloneDeep } from 'lodash-es';
export class SaveAsDialogComponent {
    /**
     * @param {?} notify
     * @param {?} solutionService
     * @param {?} localeService
     */
    constructor(notify, solutionService, localeService) {
        this.notify = notify;
        this.solutionService = solutionService;
        this.localeService = localeService;
        this.cls = 'saveasdialog';
        this.cancelEmitter = new EventEmitter();
        this.confirmEmitter = new EventEmitter();
        //@Input属性，旧代码未设置，故保留
        this.querySolution = new QuerySolutionVo();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    show() {
        this.dialog.show();
    }
    /**
     * @return {?}
     */
    cancel() {
        // this.cancelEmitter.emit(true);
        this.dialog.close();
    }
    /**
     * @return {?}
     */
    confirm() {
        if (!this.querySolution.code) {
            this.solutionService.showInfo(this.localeService.getValue('querySolution.saveAsDialog.pleaseInput'), 'info', '', 1500);
            return;
        }
        /** @type {?} */
        let obj = new Object();
        obj['querySolution'] = cloneDeep(this.querySolution);
        this.confirmEmitter.emit(obj);
        this.dialog.close();
    }
    /**
     * @param {?} checkStatus
     * @return {?}
     */
    setDefault(checkStatus) {
        this.querySolution.isDefault = checkStatus;
    }
}
SaveAsDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-saveasdialog',
                template: "<farris-dialog #dialog [buttons]=\"saveasbuttonRef\" [width]=\"550\" [height]=\"310\" [title]=\"title\">\r\n    <div class=\"qs-save-as-input\">\r\n        <div class=\"farris-input-wrap\">\r\n            <input class=\"form-control\" placeholder=\"{{'querySolution.saveAsDialog.placeholder' | locale}}\" [(ngModel)]=\"querySolution.code\"/>\r\n        </div>\r\n        <div class=\"custom-control custom-checkbox qs-save-as-check\">\r\n            <input class=\"custom-control-input\" type=\"checkbox\" (change)=\"setDefault($event.target.checked)\" [(ngModel)]=\"querySolution.isDefault\"/>\r\n            <label class=\"custom-control-label\" (click)=\"setDefault(!querySolution.isDefault)\">{{'querySolution.saveAsDialog.setAsDefault' | locale}}</label>\r\n        </div>\r\n    </div>\r\n</farris-dialog>\r\n<ng-template #saveasbuttonRef>\r\n    <div class=\"qs-save-as-btn\">\r\n        <button class=\"btn btn-primary\" (click)=\"confirm()\">{{'querySolution.saveAsDialog.confirm' | locale}}</button>        \r\n        <button class=\"btn btn-secondary\" (click)=\"cancel()\">{{'querySolution.saveAsDialog.cancel' | locale}}</button>\r\n    </div>\r\n</ng-template>",
                encapsulation: ViewEncapsulation.None,
                styles: [".qs-save-as-btn .btn{float:right;margin-left:10px;font-size:14px;line-height:26px}.qs-save-as-btn .btn-secondary{min-width:70px}.qs-save-as-input{width:100%;line-height:20px;font-size:14px;padding:20px 10px}.qs-save-as-check{margin:10px auto}"]
            }] }
];
/** @nocollapse */
SaveAsDialogComponent.ctorParameters = () => [
    { type: NotifyService },
    { type: SolutionService },
    { type: LocaleService }
];
SaveAsDialogComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    cancelEmitter: [{ type: Output }],
    confirmEmitter: [{ type: Output }],
    dialog: [{ type: ViewChild, args: ['dialog',] }]
};
if (false) {
    /** @type {?} */
    SaveAsDialogComponent.prototype.cls;
    /** @type {?} */
    SaveAsDialogComponent.prototype.cancelEmitter;
    /** @type {?} */
    SaveAsDialogComponent.prototype.confirmEmitter;
    /** @type {?} */
    SaveAsDialogComponent.prototype.querySolution;
    /** @type {?} */
    SaveAsDialogComponent.prototype.title;
    /** @type {?} */
    SaveAsDialogComponent.prototype.defaultQuerySolution;
    /** @type {?} */
    SaveAsDialogComponent.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    SaveAsDialogComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    SaveAsDialogComponent.prototype.solutionService;
    /**
     * @type {?}
     * @private
     */
    SaveAsDialogComponent.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZWFzZGlhbG9nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL3F1ZXJ5c29sdXRpb24vIiwic291cmNlcyI6WyJsaWIvc2F2ZWFzZGlhbG9nL3NhdmVhc2RpYWxvZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFlLFdBQVcsRUFBRSxpQkFBaUIsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDbkosT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDcEYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBUXRDLE1BQU0sT0FBTyxxQkFBcUI7Ozs7OztJQWNoQyxZQUFvQixNQUFxQixFQUFVLGVBQWdDLEVBQVUsYUFBNEI7UUFBckcsV0FBTSxHQUFOLE1BQU0sQ0FBZTtRQUFVLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBWm5HLFFBQUcsR0FBRyxjQUFjLENBQUM7UUFDakMsa0JBQWEsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUMzRCxtQkFBYyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDOztRQUV0RSxrQkFBYSxHQUFvQixJQUFJLGVBQWUsRUFBRSxDQUFDO0lBUXNFLENBQUM7Ozs7SUFHOUgsUUFBUTtJQUVSLENBQUM7Ozs7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7O0lBRUQsTUFBTTtRQUNKLGlDQUFpQztRQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFO1lBQzVCLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLHdDQUF3QyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN2SCxPQUFPO1NBQ1I7O1lBQ0csR0FBRyxHQUFHLElBQUksTUFBTSxFQUFFO1FBQ3RCLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsV0FBb0I7UUFDN0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsV0FBVyxDQUFDO0lBQzdDLENBQUM7OztZQWpERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsbXFDQUE0QztnQkFFNUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2FBQ3RDOzs7O1lBWFEsYUFBYTtZQUNJLGVBQWU7WUFDaEMsYUFBYTs7O2tCQVluQixXQUFXLFNBQUMsT0FBTzs0QkFDbkIsTUFBTTs2QkFDTixNQUFNO3FCQVFOLFNBQVMsU0FBQyxRQUFROzs7O0lBVm5CLG9DQUEyQzs7SUFDM0MsOENBQXFFOztJQUNyRSwrQ0FBc0U7O0lBRXRFLDhDQUF1RDs7SUFFdkQsc0NBQWM7O0lBRWQscURBQXNDOztJQUV0Qyx1Q0FBNkM7Ozs7O0lBRWpDLHVDQUE2Qjs7Ozs7SUFBRSxnREFBd0M7Ozs7O0lBQUUsOENBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBWaWV3Q2hpbGQsIFRlbXBsYXRlUmVmLCBIb3N0QmluZGluZywgVmlld0VuY2Fwc3VsYXRpb24sIEVsZW1lbnRSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5vdGlmeVNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW5vdGlmeSc7XHJcbmltcG9ydCB7IFF1ZXJ5U29sdXRpb25WbywgU29sdXRpb25TZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb24nO1xyXG5pbXBvcnQgeyBMb2NhbGVTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2NhbGUnO1xyXG5pbXBvcnQgeyBEaWFsb2dDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWRpYWxvZyc7XHJcbmltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gJ2xvZGFzaC1lcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcC1zYXZlYXNkaWFsb2cnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9zYXZlYXNkaWFsb2cuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3NhdmVhc2RpYWxvZy5jb21wb25lbnQuY3NzJ10sXHJcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxyXG59KVxyXG5leHBvcnQgY2xhc3MgU2F2ZUFzRGlhbG9nQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIGNscyA9ICdzYXZlYXNkaWFsb2cnO1xyXG4gIEBPdXRwdXQoKSBjYW5jZWxFbWl0dGVyOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIEBPdXRwdXQoKSBjb25maXJtRW1pdHRlcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICAvL0BJbnB1dOWxnuaAp++8jOaXp+S7o+eggeacquiuvue9ru+8jOaVheS/neeVmVxyXG4gIHF1ZXJ5U29sdXRpb246IFF1ZXJ5U29sdXRpb25WbyA9IG5ldyBRdWVyeVNvbHV0aW9uVm8oKTtcclxuICAvL+aWsOWinkBJbnB1dOWxnuaAp1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgLy/lhoXpg6jlsZ7mgKdcclxuICBkZWZhdWx0UXVlcnlTb2x1dGlvbjogUXVlcnlTb2x1dGlvblZvO1xyXG5cclxuICBAVmlld0NoaWxkKCdkaWFsb2cnKSBkaWFsb2c6IERpYWxvZ0NvbXBvbmVudDtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBub3RpZnk6IE5vdGlmeVNlcnZpY2UsIHByaXZhdGUgc29sdXRpb25TZXJ2aWNlOiBTb2x1dGlvblNlcnZpY2UsIHByaXZhdGUgbG9jYWxlU2VydmljZTogTG9jYWxlU2VydmljZSkgeyB9XHJcblxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuXHJcbiAgfVxyXG5cclxuICBzaG93KCl7XHJcbiAgICB0aGlzLmRpYWxvZy5zaG93KCk7XHJcbiAgfVxyXG5cclxuICBjYW5jZWwoKSB7XHJcbiAgICAvLyB0aGlzLmNhbmNlbEVtaXR0ZXIuZW1pdCh0cnVlKTtcclxuICAgIHRoaXMuZGlhbG9nLmNsb3NlKCk7XHJcbiAgfVxyXG5cclxuICBjb25maXJtKCkge1xyXG4gICAgaWYgKCF0aGlzLnF1ZXJ5U29sdXRpb24uY29kZSkge1xyXG4gICAgICB0aGlzLnNvbHV0aW9uU2VydmljZS5zaG93SW5mbyh0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoJ3F1ZXJ5U29sdXRpb24uc2F2ZUFzRGlhbG9nLnBsZWFzZUlucHV0JyksICdpbmZvJywgJycsIDE1MDApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgb2JqID0gbmV3IE9iamVjdCgpO1xyXG4gICAgb2JqWydxdWVyeVNvbHV0aW9uJ10gPSBjbG9uZURlZXAodGhpcy5xdWVyeVNvbHV0aW9uKTtcclxuICAgIHRoaXMuY29uZmlybUVtaXR0ZXIuZW1pdChvYmopO1xyXG4gICAgdGhpcy5kaWFsb2cuY2xvc2UoKTtcclxuICB9XHJcblxyXG4gIHNldERlZmF1bHQoY2hlY2tTdGF0dXM6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMucXVlcnlTb2x1dGlvbi5pc0RlZmF1bHQgPSBjaGVja1N0YXR1cztcclxuICB9XHJcbn1cclxuIl19