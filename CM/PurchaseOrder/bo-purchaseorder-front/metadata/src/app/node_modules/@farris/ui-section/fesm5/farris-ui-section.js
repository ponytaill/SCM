import { __spread } from 'tslib';
import { Subject, of } from 'rxjs';
import ResizeObserver from 'resize-observer-polyfill';
import { map, debounceTime } from 'rxjs/operators';
import { Injectable, Directive, TemplateRef, Input, NgModule, defineInjectable, NgZone, Renderer2, Component, Injector, Optional, HostBinding, ContentChild, ViewChild } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LocaleModule } from '@farris/ui-locale';
import { FarrisCommonModule } from '@farris/ui-common';
import { NgbDropdownModule } from '@farris/ui-tabs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SectionService = /** @class */ (function () {
    function SectionService() {
    }
    SectionService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SectionService.ctorParameters = function () { return []; };
    /** @nocollapse */ SectionService.ngInjectableDef = defineInjectable({ factory: function SectionService_Factory() { return new SectionService(); }, token: SectionService, providedIn: "root" });
    return SectionService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSectionTitleDirective = /** @class */ (function () {
    function FarrisSectionTitleDirective(templateRef) {
        this.templateRef = templateRef;
    }
    FarrisSectionTitleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisSectionTitle]',
                },] }
    ];
    /** @nocollapse */
    FarrisSectionTitleDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FarrisSectionTitleDirective.propDecorators = {
        titleCls: [{ type: Input }]
    };
    return FarrisSectionTitleDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSectionHeaderDirective = /** @class */ (function () {
    function FarrisSectionHeaderDirective(templateRef) {
        this.templateRef = templateRef;
    }
    FarrisSectionHeaderDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisSectionHeader]',
                },] }
    ];
    /** @nocollapse */
    FarrisSectionHeaderDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FarrisSectionHeaderDirective.propDecorators = {
        headerCls: [{ type: Input }]
    };
    return FarrisSectionHeaderDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSectionHcontentDirective = /** @class */ (function () {
    function FarrisSectionHcontentDirective(templateRef) {
        this.templateRef = templateRef;
    }
    FarrisSectionHcontentDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisSectionHcontent]',
                },] }
    ];
    /** @nocollapse */
    FarrisSectionHcontentDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FarrisSectionHcontentDirective.propDecorators = {
        hcontentCls: [{ type: Input }]
    };
    return FarrisSectionHcontentDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSectionToolbarDirective = /** @class */ (function () {
    function FarrisSectionToolbarDirective(templateRef) {
        this.templateRef = templateRef;
    }
    FarrisSectionToolbarDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisSectionToolbar]',
                },] }
    ];
    /** @nocollapse */
    FarrisSectionToolbarDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FarrisSectionToolbarDirective.propDecorators = {
        toolbarCls: [{ type: Input }]
    };
    return FarrisSectionToolbarDirective;
}());
var FarrisSectionViewChangeDirective = /** @class */ (function () {
    function FarrisSectionViewChangeDirective(templateRef) {
        this.templateRef = templateRef;
    }
    FarrisSectionViewChangeDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisSectionViewChange]',
                },] }
    ];
    /** @nocollapse */
    FarrisSectionViewChangeDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FarrisSectionViewChangeDirective.propDecorators = {
        viewChangeCls: [{ type: Input }]
    };
    return FarrisSectionViewChangeDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSectionExtendDirective = /** @class */ (function () {
    function FarrisSectionExtendDirective(templateRef) {
        this.templateRef = templateRef;
    }
    FarrisSectionExtendDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisSectionExtend]',
                },] }
    ];
    /** @nocollapse */
    FarrisSectionExtendDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FarrisSectionExtendDirective.propDecorators = {
        extendCls: [{ type: Input }]
    };
    return FarrisSectionExtendDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSectionContentDirective = /** @class */ (function () {
    function FarrisSectionContentDirective(templateRef) {
        this.templateRef = templateRef;
    }
    FarrisSectionContentDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisSectionContent]',
                },] }
    ];
    /** @nocollapse */
    FarrisSectionContentDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FarrisSectionContentDirective.propDecorators = {
        contentCls: [{ type: Input }]
    };
    return FarrisSectionContentDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSectionComponent = /** @class */ (function () {
    function FarrisSectionComponent(inject) {
        this.inject = inject;
        this.contentCls = '';
        this.baseCls = true;
        this.maxStatus = false;
        // 是否显示header
        this.showHeader = true;
        // 是否支持最大化
        this.enableMaximize = false;
        /**
         * 是否启用収折功能
         * 默认不启用収折,值为''
         * 启用默认収折,值为'default'
         * 启用自定义収折,值为 'custom'
         *
         */
        this.enableAccordion = '';
        // section是否铺满
        this.fill = false;
        // 默认是是否展开
        this.expandStatus = true;
        // 就来按钮位置
        this.toolbarPosition = '';
        //
        this.toolbarBtns = [];
        // 工具栏按钮
        this._toolbar = null;
        //标记按钮工具栏是否隐藏[更多]按钮
        this.toolbarDpHidden = true;
        // 参照Tab中这样的处理方式有问题----延后修改
        // 是否被禁用的状态
        // 按照之前的逻辑，如果没有找到key，就说明被禁用
        this._disableDatas = new Subject();
        // 按照之前的逻辑，如果没有找到key，就说明可见
        this._visibleDatas = new Subject();
        this.clickThrottleTime = 350;
        this.clickItems = new Subject();
        // 用于计算响应时
        this.ro = null;
        this.resizeEl = null;
        this.inMoreButtonContents = [];
        if (this.inject) {
            this.ngZone = this.inject.get(NgZone, null);
            this.renderer = this.inject.get(Renderer2, null);
        }
    }
    Object.defineProperty(FarrisSectionComponent.prototype, "fillCls", {
        get: /**
         * @return {?}
         */
        function () {
            return this.fill;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisSectionComponent.prototype, "enableAccordionCls", {
        get: /**
         * @return {?}
         */
        function () {
            return this.enableAccordion == 'default';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisSectionComponent.prototype, "enableCollapseCls", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.enableAccordion === 'default' ||
                this.enableAccordion === 'custom') {
                return !this.expandStatus;
            }
            else {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisSectionComponent.prototype, "enableCustomAccordionCls", {
        get: /**
         * @return {?}
         */
        function () {
            return this.enableAccordion == 'custom';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisSectionComponent.prototype, "toolbar", {
        get: /**
         * @return {?}
         */
        function () {
            return this._toolbar;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._toolbar = value;
                // 计算位置
                this.toolbarPosition = this.getToolbarPosition();
                //
                this.toolbarBtns = __spread(this.toolbar.contents);
                this.inMoreButtonContents = [];
                // 绑定事件
                this.bindResizeEvent();
                // 调整界面
                this.afterBindToolbarData();
            }
            else {
                this._toolbar = null;
                // 有位置
                this.toolbarPosition = '';
                this.toolbarBtns = [];
                this.inMoreButtonContents = [];
                // 移除绑定事件
                this.unBindResizeEvent();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisSectionComponent.prototype, "btnStates", {
        set: /**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            if (values) {
                if (this._disableDatas && this._disableDatas.hasOwnProperty('unsubscribe')) {
                    this._disableDatas['unsubscribe']();
                }
                this._disableDatas = values;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisSectionComponent.prototype, "btnVisible", {
        // 是否可见的状态
        set: 
        // 是否可见的状态
        /**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            if (values) {
                if (this._visibleDatas && this._visibleDatas.hasOwnProperty('unsubscribe')) {
                    this._visibleDatas['unsubscribe']();
                }
                this._visibleDatas = values;
            }
        },
        enumerable: true,
        configurable: true
    });
    // 用于提供循环效率
    // 用于提供循环效率
    /**
     * @param {?} index
     * @param {?} btn
     * @return {?}
     */
    FarrisSectionComponent.prototype.trackByButton = 
    // 用于提供循环效率
    /**
     * @param {?} index
     * @param {?} btn
     * @return {?}
     */
    function (index, btn) { return btn.id; };
    /**
     * @return {?}
     */
    FarrisSectionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // 标记点击事件
        this.clickSubscription = this.clickItems.pipe(debounceTime(this.clickThrottleTime))
            .subscribe((/**
         * @param {?} btnInfo
         * @return {?}
         */
        function (btnInfo) {
            if (btnInfo.click && typeof btnInfo.click == 'function') {
                btnInfo.click({ context: _this.context });
            }
        }));
        // 绑定状态
        this._disableDatas.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            // 调整按钮可用状态
            _this.changeState(data, 'disable');
        }));
        this._visibleDatas.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            // 调整按钮可见状态
            _this.changeState(data, 'visible');
        }));
    };
    /**
     * 获取按钮配置中，禁用、可见的属性
     * @param id
     * @param stateProp
     */
    /**
     * 获取按钮配置中，禁用、可见的属性
     * @param {?} btnItem
     * @param {?} stateProp
     * @return {?}
     */
    FarrisSectionComponent.prototype.getState = /**
     * 获取按钮配置中，禁用、可见的属性
     * @param {?} btnItem
     * @param {?} stateProp
     * @return {?}
     */
    function (btnItem, stateProp) {
        if (btnItem.hasOwnProperty(stateProp)) {
            return btnItem[stateProp];
        }
        // 不存在属性
        if (stateProp == 'visible') {
            return true;
        }
        return false;
    };
    /**
     * 改变可用状态
     * @param values
     */
    /**
     * 改变可用状态
     * @private
     * @param {?} values
     * @param {?} stateProp
     * @return {?}
     */
    FarrisSectionComponent.prototype.changeState = /**
     * 改变可用状态
     * @private
     * @param {?} values
     * @param {?} stateProp
     * @return {?}
     */
    function (values, stateProp) {
        var _this = this;
        /** @type {?} */
        var idArray = Object.keys(values);
        idArray.forEach((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            /** @type {?} */
            var state = values[id];
            /** @type {?} */
            var item = _this._findItemByID(id, _this.toolbarBtns);
            if (item) {
                item[stateProp] = state;
            }
        }));
        this.inMoreButtonContents.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var findId = idArray.find((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return id == item.id; }));
            if (findId) {
                item[stateProp] = values[findId];
            }
        }));
    };
    /**
     * 查找
     * @param id
     * @param datas
     */
    /**
     * 查找
     * @private
     * @param {?} id
     * @param {?} datas
     * @return {?}
     */
    FarrisSectionComponent.prototype._findItemByID = /**
     * 查找
     * @private
     * @param {?} id
     * @param {?} datas
     * @return {?}
     */
    function (id, datas) {
        return datas.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.id == id; }));
    };
    /**
     * @return {?}
     */
    FarrisSectionComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.clickSubscription) {
            this.clickSubscription.unsubscribe();
            this.clickSubscription = null;
        }
        if (this._visibleDatas && this._visibleDatas.hasOwnProperty('unsubscribe')) {
            this._visibleDatas['unsubscribe']();
            this._visibleDatas = null;
        }
        if (this._disableDatas && this._disableDatas.hasOwnProperty('unsubscribe')) {
            this._disableDatas['unsubscribe']();
            this._disableDatas = null;
        }
        this.unBindResizeEvent();
    };
    /**
     * 绑定限制
     */
    /**
     * 绑定限制
     * @private
     * @return {?}
     */
    FarrisSectionComponent.prototype.bindResizeEvent = /**
     * 绑定限制
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // 标记响应时
        if (this.ngZone && this.toolbar && this.toolbar.contents.length > 0) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    if (!_this.toolbarContainer) {
                        return;
                    }
                    if (_this.ro) {
                        if (_this.toolbarContainer.nativeElement.parentElement == _this.resizeEl) {
                            // 已绑定过
                            return;
                        }
                        else {
                            _this.unBindResizeEvent();
                        }
                    }
                    if (_this.ro === null) {
                        _this.ro = new ResizeObserver((/**
                         * @param {?} el
                         * @return {?}
                         */
                        function (el) {
                            _this._calculateToolbarDropdownIsShow();
                            _this._calculateButtonsShow();
                        }));
                        _this.resizeEl = _this.toolbarContainer.nativeElement.parentElement;
                        _this.ro.observe(_this.resizeEl);
                    }
                }), 0);
            }));
        }
        else {
            this.unBindResizeEvent();
        }
    };
    /**
     * 按钮数据变更后触发检查
     */
    /**
     * 按钮数据变更后触发检查
     * @private
     * @return {?}
     */
    FarrisSectionComponent.prototype.afterBindToolbarData = /**
     * 按钮数据变更后触发检查
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.ngZone && this.toolbar && this.toolbar.contents.length > 0) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this._calculateToolbarDropdownIsShow();
                    _this._calculateButtonsShow();
                }), 0);
            }));
        }
    };
    /**
     * 判断下拉按钮是否显示
     */
    /**
     * 判断下拉按钮是否显示
     * @private
     * @return {?}
     */
    FarrisSectionComponent.prototype._calculateToolbarDropdownIsShow = /**
     * 判断下拉按钮是否显示
     * @private
     * @return {?}
     */
    function () {
        if (!this.toolbarContainer || !this.toolbar || !this.toolbarPosition) {
            // 容器未显示，没有数据，没有按钮位置
            this.toolbarDpHidden = true;
            return;
        }
        /** @type {?} */
        var btnParentsContainer = this.toolbarContainer.nativeElement.parentElement;
        if (this.btnPlaceHolder.nativeElement.scrollWidth > btnParentsContainer.offsetWidth) {
            this.toolbarDpHidden = false;
        }
        else {
            this.toolbarDpHidden = true;
        }
    };
    /**
     * 计算显示的按钮个数及更多中显示的按钮个数
     */
    /**
     * 计算显示的按钮个数及更多中显示的按钮个数
     * @private
     * @return {?}
     */
    FarrisSectionComponent.prototype._calculateButtonsShow = /**
     * 计算显示的按钮个数及更多中显示的按钮个数
     * @private
     * @return {?}
     */
    function () {
        if (!this.toolbarContainer || !this.toolbar || !this.toolbarPosition) {
            // 容器未显示，没有数据，没有按钮位置
            return;
        }
        if (this.toolbarDpHidden) {
            this.toolbarBtns = __spread(this.toolbar.contents);
            this.inMoreButtonContents = [];
            return;
        }
        /** @type {?} */
        var toolbarParentContainerEl = this.toolbarContainer.nativeElement.parentElement;
        /** @type {?} */
        var divEl = this.toolbarContainer.nativeElement;
        /** @type {?} */
        var btnPlaceHolderEl = this.btnPlaceHolder.nativeElement;
        /** @type {?} */
        var btnPlaceHolderBtns = btnPlaceHolderEl.querySelectorAll('button');
        // 更多按钮
        /** @type {?} */
        var moreButton = toolbarParentContainerEl.querySelector('.morebtn');
        // 计算按钮的宽度      
        /** @type {?} */
        var basicStart = parseInt(btnPlaceHolderEl.getBoundingClientRect().left);
        /** @type {?} */
        var basicWidth = toolbarParentContainerEl.offsetWidth - moreButton.offsetWidth - 12;
        /** @type {?} */
        var toolbarDropdownHidden = true;
        /** @type {?} */
        var k = 0
        // 只有一个按钮
        ;
        // 只有一个按钮
        if (btnPlaceHolderBtns.length == 1) {
            if (btnPlaceHolderEl.offsetWidth > basicWidth) {
                toolbarDropdownHidden = false;
            }
            else {
                k = 1;
            }
        }
        else {
            for (k = 1; k <= btnPlaceHolderBtns.length - 1; k++) {
                // 如果内容超出,考虑到按钮之间的间距
                if (k == btnPlaceHolderBtns.length - 1) {
                    if (btnPlaceHolderEl.offsetWidth > basicWidth) {
                        toolbarDropdownHidden = false;
                        k = k - 1;
                        break;
                    }
                }
                else if (parseInt(btnPlaceHolderBtns[k].getBoundingClientRect().left) - basicStart > basicWidth) {
                    toolbarDropdownHidden = false;
                    k = k - 1;
                    break;
                }
            }
        }
        this.toolbarDpHidden = toolbarDropdownHidden;
        /** @type {?} */
        var showBtns = divEl.querySelectorAll('button');
        /** @type {?} */
        var resultBtns = this.toolbar.contents.filter((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            return index < k;
        }));
        this.toolbarBtns = resultBtns ? __spread(resultBtns) : [];
        // for (let m = k; m < showBtns.length; m++) {
        //     this.renderer.setStyle(showBtns[m], 'display', 'none');
        // }
        if (this.toolbar.contents && this.toolbar.contents.length) {
            this.inMoreButtonContents = this.toolbar.contents.filter((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            function (item, index) {
                return index >= k;
            }));
        }
    };
    /**
     * 在按钮状态变化时解除限制
     */
    /**
     * 在按钮状态变化时解除限制
     * @private
     * @return {?}
     */
    FarrisSectionComponent.prototype.unBindResizeEvent = /**
     * 在按钮状态变化时解除限制
     * @private
     * @return {?}
     */
    function () {
        if (this.ro) {
            if (this.resizeEl) {
                this.ro.unobserve(this.resizeEl);
            }
            this.ro = null;
        }
    };
    /**
     * @return string
     * '' 不存在按钮，无所谓位置
     * 'inHead' 按钮在头部
     * 'inContent' 按钮在内容位置
     */
    /**
     * @private
     * @return {?} string
     * '' 不存在按钮，无所谓位置
     * 'inHead' 按钮在头部
     * 'inContent' 按钮在内容位置
     */
    FarrisSectionComponent.prototype.getToolbarPosition = /**
     * @private
     * @return {?} string
     * '' 不存在按钮，无所谓位置
     * 'inHead' 按钮在头部
     * 'inContent' 按钮在内容位置
     */
    function () {
        if (this.toolbar && this.toolbar.hasOwnProperty('position') && this.toolbar.hasOwnProperty('contents') && this.toolbar.contents.length > 0) {
            // 如果有属性，且按钮有值
            if (this.toolbar.position === 'inHead') {
                return 'inHead';
            }
            else {
                return 'inContent';
            }
        }
        return '';
    };
    /**
     * 判断是否显示、隐藏
     * @param id
     * @param state
     */
    /**
     * 判断是否显示、隐藏
     * @param {?} id
     * @param {?=} state
     * @param {?=} defaultValue
     * @return {?}
     */
    FarrisSectionComponent.prototype.getToolbarState = /**
     * 判断是否显示、隐藏
     * @param {?} id
     * @param {?=} state
     * @param {?=} defaultValue
     * @return {?}
     */
    function (id, state, defaultValue) {
        if (state === void 0) { state = this.btnStates; }
        if (defaultValue === void 0) { defaultValue = false; }
        if (state) {
            return state.pipe(map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                if (n[id] === undefined) {
                    // console.warn(`未找ID为：${id} 相关状态设置！`);
                    return defaultValue;
                }
                return n[id];
            })));
        }
        else {
            return of(defaultValue);
        }
    };
    /**
     * @param {?} btnInfo
     * @return {?}
     */
    FarrisSectionComponent.prototype.clickHandler = /**
     * @param {?} btnInfo
     * @return {?}
     */
    function (btnInfo) {
        if (!btnInfo) {
            return;
        }
        this.clickItems.next(btnInfo);
    };
    FarrisSectionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-section',
                    template: "<div class=\"f-section-header\" [ngClass]=\"headerDirective && headerDirective.headerCls\" *ngIf=\"showHeader\">\r\n    <ng-template [ngTemplateOutlet]=\"headerDirective.templateRef\"\r\n        *ngIf=\"headerDirective && headerDirective.templateRef\"></ng-template>\r\n    <ng-template [ngIf]=\"!headerDirective\">\r\n        <ng-template [ngTemplateOutlet]=\"headerTitleDirective.templateRef\"\r\n            *ngIf=\"headerTitleDirective && headerTitleDirective.templateRef\" [ngTemplateOutletContext]=\"{context:this.context,index:this.index }\"></ng-template>\r\n        <div *ngIf=\"!headerTitleDirective || !headerTitleDirective.templateRef\" class=\"f-title\"\r\n            (click)=\"this.expandStatus = !this.expandStatus\">\r\n            <h4 class=\"f-title-text\">{{ mainTitle }}</h4>\r\n            <span *ngIf=\"subTitle && subTitle.length\">{{\r\n            subTitle\r\n        }}</span>\r\n        </div>\r\n        <div class=\"f-content\" [ngClass]=\"\r\n            headerContentDirective &&\r\n            headerContentDirective.hcontentCls\r\n        \" *ngIf=\"\r\n            headerContentDirective &&\r\n            headerContentDirective.templateRef\r\n        \">\r\n            <ng-template [ngTemplateOutlet]=\"headerContentDirective.templateRef\"></ng-template>\r\n        </div>\r\n        <div class=\"f-toolbar\" [ngClass]=\"\r\n            headerToolbarDirective &&\r\n            headerToolbarDirective.toolbarCls\" *ngIf=\" headerToolbarDirective &&headerToolbarDirective.templateRef \">\r\n            <ng-template [ngTemplateOutlet]=\"headerToolbarDirective.templateRef\" *ngIf=\"\r\n                headerToolbarDirective &&\r\n                headerToolbarDirective.templateRef\r\n            \"></ng-template>\r\n        </div>\r\n        <div #toolbarHeaderContainer class=\"f-section-toolbar f-section-header--toolbar\"\r\n            *ngIf=\"!headerToolbarDirective&&toolbarPosition=='inHead'\">\r\n            <ng-container [ngTemplateOutlet]=\"toolbarBtnTmpl\"\r\n                [ngTemplateOutletContext]=\"{ datas: toolbarBtns, dpHidden:toolbarDpHidden,dpDatas:inMoreButtonContents}\">\r\n            </ng-container>\r\n        </div>\r\n        <div class=\"f-viewchange\" [ngClass]=\"viewChangeDirective && viewChangeDirective.viewChangeCls\"\r\n            *ngIf=\" viewChangeDirective &&viewChangeDirective.templateRef \">\r\n            <ng-template [ngTemplateOutlet]=\"viewChangeDirective.templateRef\"></ng-template>\r\n        </div>\r\n        <div class=\"f-max-accordion\" *ngIf=\"enableMaximize||enableAccordion!=''\">\r\n            <span class=\"f-icon\" *ngIf=\"enableMaximize\" [class.f-icon-maximize]=\"!maxStatus\"\r\n                [class.f-icon-minimize]=\"maxStatus\" (click)=\"this.maxStatus = !this.maxStatus\"> </span>\r\n            <button class=\"btn f-btn-collapse-expand f-btn-mx\" *ngIf=\"enableAccordion\"\r\n                [ngClass]=\"{ 'f-state-expand': expandStatus }\" (click)=\"this.expandStatus = !this.expandStatus\">\r\n                <span *ngIf=\"!expandStatus\">{{'section.expandLabel'|locale}}</span>\r\n                <span *ngIf=\"expandStatus\">{{'section.collapseLabel'|locale}}</span>\r\n            </button>\r\n        </div>\r\n    </ng-template>\r\n\r\n    <div class=\"f-section-header--btn-placeholder\" #btnPlaceholder *ngIf=\"!headerToolbarDirective&&toolbarPosition\">\r\n        <ng-container *ngFor=\"let btn of toolbar.contents\">\r\n            <button [ngClass]=\"btn.appearance.class\"\r\n                *ngIf=\"getToolbarState(btn.id, btnVisible,true) | async\">{{btn.title}}</button>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n<div class=\"f-section-header--btn-placeholder\" #btnPlaceholder *ngIf=\"!showHeader&&toolbarPosition=='inContent'\">\r\n    <ng-container *ngFor=\"let btn of toolbar.contents\">\r\n        <button [ngClass]=\"btn.appearance.class\"\r\n            *ngIf=\"getToolbarState(btn.id, btnVisible,true) | async\">{{btn.title}}</button>\r\n    </ng-container>\r\n</div>\r\n<div class=\"f-section-extend\" [ngClass]=\"extendDirective && extendDirective.extendCls\" \r\n    *ngIf=\"extendDirective && extendDirective.templateRef\">\r\n    <ng-template  [ngTemplateOutlet]=\"extendDirective.templateRef\"></ng-template>\r\n</div>\r\n\r\n<div class=\"f-section-content\" [ngClass]=\"contentCls\">\r\n    <div class=\"f-section-toolbar f-section-content--toolbar\"\r\n        *ngIf=\"!headerToolbarDirective&&toolbarPosition=='inContent'\">\r\n        <ng-container [ngTemplateOutlet]=\"toolbarBtnTmpl\"\r\n            [ngTemplateOutletContext]=\"{ datas: toolbarBtns, dpHidden:toolbarDpHidden,dpDatas:inMoreButtonContents}\">\r\n        </ng-container>\r\n    </div>\r\n    <ng-content></ng-content>\r\n</div>\r\n<ng-template #toolbarBtnTmpl let-datas=\"datas\" let-dpHidden=\"dpHidden\" let-dpDatas=\"dpDatas\">\r\n    <div class=\"toolbar-btn-inline-flex\" #toolbarContainer>\r\n        <ng-container *ngFor=\"let btn of datas;trackBy:trackByButton\">\r\n            <button [attr.id]=\"btn.id\" [ngClass]=\"btn.appearance.class\"\r\n                *ngIf=\"getState(btn,'visible')\"\r\n                [disabled]=\"getState(btn,'disable')\"\r\n                (click)=\"clickHandler(btn)\">{{btn.title}}</button>\r\n        </ng-container>\r\n    </div>\r\n    <div class=\"btn-group sc-nav-btn\" ngbDropdown [hidden]=\"dpHidden\">\r\n        <button class=\"btn btn-link morebtn\" ngbDropdownToggle>{{'tabs.more' | locale}}</button>\r\n        <ul class=\"dropdown-menu\" ngbDropdownMenu *ngIf=\"dpDatas.length>0\">\r\n            <ng-container *ngFor=\"let dpBtn of dpDatas;trackBy:trackByButton\">\r\n                <li class=\"dropdown-item text-truncate px-2\"   *ngIf=\"getState(dpBtn,'visible')\">\r\n                    <button style=\"width:100%;\" [attr.id]=\"dpBtn.id\" class=\"btn btn-link text-left\"\r\n                        [class.disabled]=\"getState(dpBtn,'disable')\"\r\n                        (click)=\"clickHandler(dpBtn)\">{{dpBtn.title}}</button>\r\n                </li>\r\n            </ng-container>\r\n        </ul>\r\n    </div>\r\n</ng-template>",
                    styles: [".f-section-header--btn-placeholder{position:absolute;display:-webkit-inline-box;display:inline-flex;top:-30px;left:0;opacity:0;overflow:hidden;z-index:-90}.f-section-content .toolbar-btn-inline-flex,.f-section-header .toolbar-btn-inline-flex{display:-webkit-inline-box;display:inline-flex;overflow:hidden}.f-section-header--toolbar{-webkit-box-flex:1;flex:1;-webkit-box-align:center;align-items:center;width:30%;display:-webkit-box;display:flex;-webkit-box-pack:end;justify-content:flex-end;margin-left:.875rem}.f-section-content--toolbar{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center}"]
                }] }
    ];
    /** @nocollapse */
    FarrisSectionComponent.ctorParameters = function () { return [
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    FarrisSectionComponent.propDecorators = {
        contentCls: [{ type: Input }],
        baseCls: [{ type: HostBinding, args: ['class.f-section',] }],
        maxStatus: [{ type: HostBinding, args: ['class.f-section-maximize',] }],
        fillCls: [{ type: HostBinding, args: ['class.f-section-fill',] }],
        enableAccordionCls: [{ type: HostBinding, args: ['class.f-section-accordion',] }],
        enableCollapseCls: [{ type: HostBinding, args: ['class.f-state-collapse',] }],
        enableCustomAccordionCls: [{ type: HostBinding, args: ['class.f-section-custom-accordion',] }],
        mainTitle: [{ type: Input }],
        subTitle: [{ type: Input }],
        showHeader: [{ type: Input }],
        enableMaximize: [{ type: Input }],
        enableAccordion: [{ type: Input }],
        fill: [{ type: Input }],
        expandStatus: [{ type: Input }],
        context: [{ type: Input }],
        index: [{ type: Input }],
        toolbar: [{ type: Input }],
        headerDirective: [{ type: ContentChild, args: [FarrisSectionHeaderDirective,] }],
        headerTitleDirective: [{ type: ContentChild, args: [FarrisSectionTitleDirective,] }],
        headerContentDirective: [{ type: ContentChild, args: [FarrisSectionHcontentDirective,] }],
        headerToolbarDirective: [{ type: ContentChild, args: [FarrisSectionToolbarDirective,] }],
        extendDirective: [{ type: ContentChild, args: [FarrisSectionExtendDirective,] }],
        contentDirective: [{ type: ContentChild, args: [FarrisSectionContentDirective,] }],
        viewChangeDirective: [{ type: ContentChild, args: [FarrisSectionViewChangeDirective,] }],
        btnStates: [{ type: Input }],
        btnVisible: [{ type: Input }],
        clickThrottleTime: [{ type: Input }],
        toolbarContainer: [{ type: ViewChild, args: ['toolbarContainer',] }],
        btnPlaceHolder: [{ type: ViewChild, args: ['btnPlaceholder',] }]
    };
    return FarrisSectionComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSectionModule = /** @class */ (function () {
    function FarrisSectionModule() {
    }
    FarrisSectionModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        FarrisSectionComponent,
                        FarrisSectionContentDirective,
                        FarrisSectionExtendDirective,
                        FarrisSectionHcontentDirective,
                        FarrisSectionHeaderDirective,
                        FarrisSectionTitleDirective,
                        FarrisSectionToolbarDirective,
                        FarrisSectionViewChangeDirective
                    ],
                    imports: [
                        CommonModule,
                        FarrisCommonModule,
                        LocaleModule,
                        NgbDropdownModule.forRoot()
                    ],
                    exports: [
                        FarrisSectionComponent,
                        FarrisSectionContentDirective,
                        FarrisSectionExtendDirective,
                        FarrisSectionHcontentDirective,
                        FarrisSectionHeaderDirective,
                        FarrisSectionTitleDirective,
                        FarrisSectionToolbarDirective,
                        FarrisSectionViewChangeDirective
                    ]
                },] }
    ];
    return FarrisSectionModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { SectionService, FarrisSectionComponent, FarrisSectionModule, FarrisSectionContentDirective, FarrisSectionExtendDirective, FarrisSectionHcontentDirective, FarrisSectionHeaderDirective, FarrisSectionTitleDirective, FarrisSectionToolbarDirective, FarrisSectionViewChangeDirective };

//# sourceMappingURL=farris-ui-section.js.map