import { Injectable } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { EMPTY } from 'rxjs';
import { tap } from 'rxjs/operators';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { LanguageService } from '../languag.service';
import { FormErrorService } from '../error/form-error.service';
import { EditStateUtil } from './utils/index';
/**
 * 数据编辑服务
 */
class EditDataService {
    /**
     * 构造函数
     */
    constructor(frameContext) {
        this.frameContext = frameContext;
        this.repository = this.frameContext.repository;
        this.bindingData = this.frameContext.bindingData;
        this.loadingService = this.frameContext.injector.get(FormLoadingService, null);
        this.languageService = this.frameContext.injector.get(LanguageService, null);
        this.errorService = this.frameContext.injector.get(FormErrorService, null);
    }
    /**
     * 编辑（支持加锁）
     */
    edit(id) {
        id = id || this.bindingData.list.currentId;
        if (!id) {
            return EMPTY;
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const edit$ = this.repository.editEntityById(id);
        const result$ = edit$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            EditStateUtil.setEditState(this.frameContext, id);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.updateFailed, error);
        }));
        return result$;
    }
}
EditDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EditDataService.ctorParameters = () => [
    { type: FrameContext }
];
export { EditDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdC1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZGF0YS1zZXJ2aWNlcy9lZGl0LWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBdUIsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkUsT0FBTyxFQUFjLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN6QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDMUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHOUM7O0dBRUc7QUFDSCxNQUNNLGVBQWU7SUEyQm5COztPQUVHO0lBQ0gsWUFBb0IsWUFBMEI7UUFBMUIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDNUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQW1DLENBQUM7UUFDeEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQztRQUNqRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBcUIsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkcsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQWtCLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5RixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBbUIsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDL0YsQ0FBQztJQUVEOztPQUVHO0lBQ0ksSUFBSSxDQUFDLEVBQVU7UUFFcEIsRUFBRSxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDM0MsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNQLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQ3hCLEdBQUcsQ0FDRCxHQUFHLEVBQUU7WUFDSCxJQUFJLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ3JELGFBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNwRCxDQUFDLEVBQ0QsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUNiLElBQUksQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDckQsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEUsQ0FBQyxDQUNGLENBQ0YsQ0FBQztRQUNGLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7OztZQWhFRixVQUFVOzs7O1lBYm1CLFlBQVk7O0FBaUYxQyxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFbnRpdHksIEJpbmRpbmdEYXRhLCBGcmFtZUNvbnRleHQgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XG5pbXBvcnQgeyBCZWZSZXBvc2l0b3J5IH0gZnJvbSAnQGZhcnJpcy9iZWYnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgRU1QVFkgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEZvcm1Mb2FkaW5nU2VydmljZSB9IGZyb20gJy4uL2Zvcm0tbG9hZGluZy9mb3JtLWxvYWRpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBMYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi9sYW5ndWFnLnNlcnZpY2UnO1xuaW1wb3J0IHsgRm9ybUVycm9yU2VydmljZSB9IGZyb20gJy4uL2Vycm9yL2Zvcm0tZXJyb3Iuc2VydmljZSc7XG5pbXBvcnQgeyBFZGl0U3RhdGVVdGlsIH0gZnJvbSAnLi91dGlscy9pbmRleCc7XG5cblxuLyoqXG4gKiDmlbDmja7nvJbovpHmnI3liqFcbiAqL1xuQEluamVjdGFibGUoKVxuY2xhc3MgRWRpdERhdGFTZXJ2aWNlIHtcblxuICAvKipcbiAgICog5a6e5L2T5LuT5bqTXG4gICAqL1xuICBwcml2YXRlIHJlcG9zaXRvcnk6IEJlZlJlcG9zaXRvcnk8RW50aXR5PjtcblxuICAvKipcbiAgICog57uR5a6a5pWw5o2uXG4gICAqL1xuICBwcml2YXRlIGJpbmRpbmdEYXRhOiBCaW5kaW5nRGF0YTtcblxuICAvKipcbiAgICogTG9hZGluZ+acjeWKoVxuICAgKi9cbiAgcHJpdmF0ZSBsb2FkaW5nU2VydmljZTogRm9ybUxvYWRpbmdTZXJ2aWNlO1xuXG4gIC8qKlxuICAgKiDor63oqIDmnI3liqFcbiAgICovXG4gIHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBMYW5ndWFnZVNlcnZpY2U7XG5cbiAgLyoqXG4gICAqIOmUmeivr+WkhOeQhuacjeWKoVxuICAgKi9cbiAgcHJpdmF0ZSBlcnJvclNlcnZpY2U6IEZvcm1FcnJvclNlcnZpY2U7XG5cbiAgLyoqXG4gICAqIOaehOmAoOWHveaVsFxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCkge1xuICAgIHRoaXMucmVwb3NpdG9yeSA9IHRoaXMuZnJhbWVDb250ZXh0LnJlcG9zaXRvcnkgYXMgQmVmUmVwb3NpdG9yeTxFbnRpdHk+O1xuICAgIHRoaXMuYmluZGluZ0RhdGEgPSB0aGlzLmZyYW1lQ29udGV4dC5iaW5kaW5nRGF0YTtcbiAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlID0gdGhpcy5mcmFtZUNvbnRleHQuaW5qZWN0b3IuZ2V0PEZvcm1Mb2FkaW5nU2VydmljZT4oRm9ybUxvYWRpbmdTZXJ2aWNlLCBudWxsKTtcbiAgICB0aGlzLmxhbmd1YWdlU2VydmljZSA9IHRoaXMuZnJhbWVDb250ZXh0LmluamVjdG9yLmdldDxMYW5ndWFnZVNlcnZpY2U+KExhbmd1YWdlU2VydmljZSwgbnVsbCk7XG4gICAgdGhpcy5lcnJvclNlcnZpY2UgPSB0aGlzLmZyYW1lQ29udGV4dC5pbmplY3Rvci5nZXQ8Rm9ybUVycm9yU2VydmljZT4oRm9ybUVycm9yU2VydmljZSwgbnVsbCk7XG4gIH1cblxuICAvKipcbiAgICog57yW6L6R77yI5pSv5oyB5Yqg6ZSB77yJXG4gICAqL1xuICBwdWJsaWMgZWRpdChpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxFbnRpdHk+IHtcblxuICAgIGlkID0gaWQgfHwgdGhpcy5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZDtcbiAgICBpZiAoIWlkKSB7XG4gICAgICByZXR1cm4gRU1QVFk7XG4gICAgfVxuXG4gICAgY29uc3QgbG9hZGluZ1RpbWVySWQgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3dMb2FkaW5nV2l0aERlbGF5KDUwMCk7XG4gICAgY29uc3QgZWRpdCQgPSB0aGlzLnJlcG9zaXRvcnkuZWRpdEVudGl0eUJ5SWQoaWQpO1xuICAgIGNvbnN0IHJlc3VsdCQgPSBlZGl0JC5waXBlKFxuICAgICAgdGFwKFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcbiAgICAgICAgICBFZGl0U3RhdGVVdGlsLnNldEVkaXRTdGF0ZSh0aGlzLmZyYW1lQ29udGV4dCwgaWQpO1xuICAgICAgICB9LFxuICAgICAgICAoZXJyb3I6IGFueSkgPT4ge1xuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XG4gICAgICAgICAgdGhpcy5lcnJvclNlcnZpY2UuZXhjZXB0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnVwZGF0ZUZhaWxlZCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0JDtcbiAgfVxufVxuXG5cbmV4cG9ydCB7IEVkaXREYXRhU2VydmljZSB9O1xuIl19