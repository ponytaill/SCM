/**
 * 树数据的帮助类
 */
var PathTreeNodeUtil = /** @class */ (function () {
    function PathTreeNodeUtil() {
    }
    /**
     * 选中第一个根节点
     */
    PathTreeNodeUtil.prototype.selectFirstRootNode = function (bindingData, hierarchyInfoKey) {
        var treeNodesData = bindingData.list.toJSON();
        var firstRootNodeId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
        this.selectedNode(bindingData, hierarchyInfoKey, firstRootNodeId);
    };
    PathTreeNodeUtil.prototype.selectNodeByBindingList = function (bindingList, hierarchyInfoKey, selectedNodeId) {
        var treeNodesData = bindingList.toJSON();
        // 如果要设置的节点不存在，则设置第1个根节点
        var selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);
        var currentId = selectedNodeId;
        if (!selectedNodeData) {
            currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
        }
        setTimeout(function () {
            bindingList.setCurrentId(currentId, true, true);
        }, 0);
    };
    /**
     * 选中节点
     */
    PathTreeNodeUtil.prototype.selectedNode = function (bindingData, hierarchyInfoKey, selectedNodeId) {
        var treeNodesData = bindingData.list.toJSON();
        // 如果要设置的节点不存在，则设置第1个根节点
        var selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);
        var currentId = selectedNodeId;
        if (!selectedNodeData) {
            currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
        }
        if (bindingData.rowSelectedEventSuspend === true) {
            return;
        }
        setTimeout(function () {
            bindingData.list.currentId = null;
            bindingData.list.setCurrentId(currentId, true, true);
        }, 0);
    };
    /**
     * 检查是否有子节点
     */
    PathTreeNodeUtil.prototype.hasChildNodes = function (treeNodesData, hierarchyInfoKey, fid) {
        var fNodeData = this.getNodeDataById(treeNodesData, fid);
        // const fLayer = fNodeData[hierarchyInfoKey]['layer'];
        // const fPath  = fNodeData[hierarchyInfoKey]['path'];
        var fIsDetail = fNodeData[hierarchyInfoKey]['isDetail'];
        // 非明细节点，返回true
        if (fIsDetail === false) {
            return true;
        }
        return false;
        // const childNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fPath);
        // return childNodesData.length > 0;
    };
    /**
     * 获取根节点（多个根节点时获取第一个）
     * @return 找不到时返回null
     */
    PathTreeNodeUtil.prototype.getFirstNodeId = function (treeNodesData, hierarchyInfoKey) {
        var rootData = treeNodesData.find(function (itemData) {
            var layer = itemData[hierarchyInfoKey]['layer'];
            return layer === 1;
        });
        if (!rootData) {
            var rootLayer_1 = this.getRootLayer(treeNodesData, hierarchyInfoKey);
            rootData = treeNodesData.find(function (itemData) {
                var layer = itemData[hierarchyInfoKey]['layer'];
                return layer === rootLayer_1;
            });
        }
        return rootData ? rootData['id'] : '';
    };
    PathTreeNodeUtil.prototype.getRootLayer = function (treeNodesData, hierarchyInfoKey) {
        var layer = null;
        if (treeNodesData && Array.isArray(treeNodesData)) {
            var layers = treeNodesData.map(function (item) {
                var layer = item[hierarchyInfoKey]['layer'];
                return layer;
            });
            var minLayer = Math.min.apply(Math, layers);
            if (!isNaN(minLayer)) {
                layer = minLayer;
            }
        }
        return layer;
    };
    /**
     * 获取下一个节点（删除后）
     */
    PathTreeNodeUtil.prototype.getNextNodeId = function (treeNodesData, hierarchyInfoKey, currentId) {
        // 当前节点信息
        var currentNodeData = treeNodesData.find(function (itemData) {
            return itemData['id'] === currentId;
        });
        var currentPath = currentNodeData[hierarchyInfoKey]['path'];
        var currentLayer = currentNodeData[hierarchyInfoKey]['layer'];
        // 父节点信息
        var fLayer = currentLayer - 1;
        var fPath = currentPath.substring(0, currentPath.length - 4);
        // 查找兄弟节点
        var siblingtreeNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fPath);
        // 如果没有兄弟节点，向上查找
        if (siblingtreeNodesData.length === 1) {
            var parentData = treeNodesData.find(function (itemData) {
                return itemData[hierarchyInfoKey]['path'] === fPath;
            });
            // 存在父节点，则设置父节点；
            // 不存在父节点，则设置第一个根节点。
            if (!parentData) {
                return this.getFirstNodeId(treeNodesData, hierarchyInfoKey);
            }
            return parentData['id'];
        }
        else {
            return this.getNextSiblingNodeId(siblingtreeNodesData, currentId);
        }
    };
    /**
     * 获取下个兄弟节点的id
     */
    PathTreeNodeUtil.prototype.getNextSiblingNodeId = function (siblingtreeNodesData, currentId) {
        if (siblingtreeNodesData.length <= 1) {
            return '';
        }
        var currentIndex = siblingtreeNodesData.findIndex(function (itemData) {
            return itemData['id'] === currentId;
        });
        // 最后一行上移一行，其他下移一行
        var nextIndex = -1;
        if (currentIndex === siblingtreeNodesData.length - 1) {
            nextIndex = currentIndex - 1;
        }
        else {
            nextIndex = currentIndex + 1;
        }
        return siblingtreeNodesData[nextIndex]['id'];
    };
    /**
     * 获取下级节点的BindingObjects集合
     */
    PathTreeNodeUtil.prototype.getChildNodesData = function (treeNodesData, hierarchyInfoKey, fLayer, fPath) {
        var childtreeNodesData = treeNodesData.filter(function (itemData) {
            var layer = itemData[hierarchyInfoKey]['layer'];
            var path = itemData[hierarchyInfoKey]['path'];
            return (layer === fLayer + 1) && path.startsWith(fPath);
        });
        return childtreeNodesData;
    };
    /**
     * 获取id获取节点数据
     */
    PathTreeNodeUtil.prototype.getNodeDataById = function (treeNodesData, id) {
        var nodeData = treeNodesData.find(function (itemData) {
            return itemData['id'] === id;
        });
        return nodeData ? nodeData : null;
    };
    return PathTreeNodeUtil;
}());
export { PathTreeNodeUtil };
//# sourceMappingURL=data:application/json;base64,