import * as tslib_1 from "tslib";
import { Inject, Injectable, Injector } from '@angular/core';
import { FrameContext, TranslateToken } from '@farris/devkit';
/**
 * 后端消息处理服务
 * @description
 * ### 服务注入位置
 *  1、整个表单的root-component
 *  2、弹出窗口的root-component
 */
var BackEndMessageHandler = /** @class */ (function () {
    function BackEndMessageHandler(injector, frameContext, translate) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.translate = translate;
    }
    /**
     * 处理后端返回的消息或错误
     * @param message 消息或错误
     */
    BackEndMessageHandler.prototype.handle = function (message, context) {
        var isException = context && context.isException || false;
        var hasThrowError = context && context.hasThrowError || false;
        var eventBus = context && context.eventBus || null;
        var error = context && context.error || null;
        var formAppContext = context && context.formAppContext || null;
        var result = this.collect(message, isException, hasThrowError, eventBus, error, formAppContext);
        if (result && result.form && result.form.length > 0) {
            result.form.forEach(function (item) {
                item.frameContext.viewModel.form.updateFormErrors(item.message, true, 'backend');
            });
        }
        else {
            this.resetFormMessage(message.context.appContext, message.context.ns);
        }
        var targetFrameContext = this.findTargetFrameContext(this.frameContext);
        if (result && result.all && result.all.length > 0) {
            targetFrameContext.viewModel.verifycationChanged.next(result.all);
        }
        else {
            if (result !== null) {
                targetFrameContext.viewModel.verifycationChanged.next([]);
            }
        }
    };
    /**
     * 收集汇总信息和form信息
     * @param backEndMessage
     */
    BackEndMessageHandler.prototype.collect = function (backEndMessage, isException, hasThrowError, eventBus, error, formAppContext) {
        var _this = this;
        if (isException === void 0) { isException = false; }
        if (hasThrowError === void 0) { hasThrowError = false; }
        if (eventBus === void 0) { eventBus = null; }
        if (error === void 0) { error = null; }
        if (formAppContext === void 0) { formAppContext = null; }
        var e_1, _a;
        var bizMessages = backEndMessage && backEndMessage.bizMessages || null;
        var appContext = backEndMessage && backEndMessage.context.appContext;
        var ns = backEndMessage.context.ns;
        if (!bizMessages || bizMessages.length < 1) {
            return null;
        }
        var result = {
            form: [],
            all: []
        };
        var hasFormlessError = false;
        var _loop_1 = function (bizMessage) {
            var e_2, _a;
            var message = bizMessage.message;
            var location_1 = bizMessage.location || null;
            var columns = location_1 && location_1.columns || null;
            var nodeCode = location_1 && location_1.nodeCode || null;
            var rows = location_1 && location_1.rows;
            var bindingPath = this_1.getBindingPath(appContext, ns, nodeCode);
            var bindingPaths = bindingPath && bindingPath.split('/').filter(function (p) { return p; });
            // 目前仅处理有location，且有id、列名、表名的。
            if (!location_1 || !columns || columns.length < 1 || !nodeCode || !rows || rows.length < 1) {
                return "continue";
            }
            var _loop_2 = function (row) {
                var e_3, _a;
                var _loop_3 = function (column) {
                    // 获取到所有绑定该列数据的frameContext
                    var frameContexts = this_1.getFrameContextsByBindingPathAndColumnName(appContext, ns, bindingPath, column);
                    if (!frameContexts || frameContexts.length < 1) {
                        // 没有任何一个组件绑定该列的数据
                        hasFormlessError = true;
                        return "continue";
                    }
                    // 排除掉只读datagrid
                    frameContexts = frameContexts.filter(function (frameContext) {
                        var isDataGridComponent = _this.isDataGridComponent(frameContext.frameComponent);
                        if (isDataGridComponent) {
                            var isReadonlyDataGrid = _this.isReadonlyDataGrid(frameContext.frameComponent);
                            if (isReadonlyDataGrid) {
                                return false;
                            }
                            else {
                                return true;
                            }
                        }
                        return true;
                    });
                    // 遍历的行是否为当前行
                    var isCurrentRow = this_1.isCurrentRow(appContext, ns, bindingPath, row);
                    // 如果是当前行的话需要将错误信息放到form中
                    if (isCurrentRow) {
                        // 忽略grid
                        // const formFrameContexts = frameContexts.filter(frameContext => !this.isGridComponent(frameContext.frameComponent));
                        if (frameContexts && frameContexts.length > 0) {
                            frameContexts.forEach(function (frameContext) {
                                // 只处理了一个组件中列只绑定到一个前端控件的场景
                                var formControls = _this.getFormControlByColumnName(frameContext, column);
                                if (formControls && formControls.length > 0) {
                                    formControls.forEach(function (_a) {
                                        var _b = tslib_1.__read(_a, 2), domPropertyName = _b[0], formControl = _b[1];
                                        //const domPropertyName = formControl && formControl. || null;
                                        _this.mergeMessage(result.form, frameContext, domPropertyName, message);
                                    });
                                }
                                //if (formControl && domPropertyName) {
                                //}
                            });
                        }
                        else {
                        }
                    }
                    // 将错误信息放到汇总中
                    frameContexts.forEach(function (frameContext) {
                        var viewModelName = frameContext.viewModel.form.formGroupName;
                        var formControls = _this.getFormControlByColumnName(frameContext, column);
                        if (formControls && formControls.length > 0) {
                            var _a = tslib_1.__read(formControls.find(function (_a) {
                                var _b = tslib_1.__read(_a, 2), propertyName = _b[0], formControl = _b[1];
                                return propertyName && propertyName.length > 0;
                            }), 2), domPropertyName = _a[0], formControl = _a[1];
                            // const domPropertyName = domProperty && domProperty.propertyName;
                            var bindingList = frameContext.viewModel.bindingData.getValue(bindingPaths);
                            var index = bindingList.getIndexById(row);
                            var primary_1 = row + "_" + column + "_" + message;
                            // TODO:虽然能纠正汇总消息显示重复的问题，但可能导致点击错误无法定位到对应控件的问题，待后续优化
                            if (index >= 0 && result.all.findIndex(function (p) { return p.id === primary_1; }) === -1) {
                                // 数据源中有多于1行时显示索引
                                var position = (bindingList && bindingList.length > 1) ? (index + 1) : -1;
                                var title = _this.buildItemTitle(viewModelName, formControl.name || formControl.defaultI18nValue || domPropertyName, position);
                                var item = {
                                    id: primary_1,
                                    index: index,
                                    targetField: formControl.id,
                                    title: title,
                                    msg: message,
                                    namespace: ns,
                                    bindingPath: bindingPath,
                                    type: 'error'
                                };
                                result.all.push(item);
                            }
                        }
                    });
                };
                try {
                    for (var columns_1 = tslib_1.__values(columns), columns_1_1 = columns_1.next(); !columns_1_1.done; columns_1_1 = columns_1.next()) {
                        var column = columns_1_1.value;
                        _loop_3(column);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (columns_1_1 && !columns_1_1.done && (_a = columns_1.return)) _a.call(columns_1);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            };
            try {
                // 遍历数据行
                for (var rows_1 = tslib_1.__values(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()) {
                    var row = rows_1_1.value;
                    _loop_2(row);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (rows_1_1 && !rows_1_1.done && (_a = rows_1.return)) _a.call(rows_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        };
        var this_1 = this;
        try {
            for (var bizMessages_1 = tslib_1.__values(bizMessages), bizMessages_1_1 = bizMessages_1.next(); !bizMessages_1_1.done; bizMessages_1_1 = bizMessages_1.next()) {
                var bizMessage = bizMessages_1_1.value;
                _loop_1(bizMessage);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (bizMessages_1_1 && !bizMessages_1_1.done && (_a = bizMessages_1.return)) _a.call(bizMessages_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (hasFormlessError && isException && !hasThrowError && eventBus) {
            eventBus.post('Exception', '', 'onException', error, formAppContext);
        }
        return result;
    };
    BackEndMessageHandler.prototype.mergeMessage = function (formItems, frameContext, domPropertyName, message) {
        var _a, _b;
        var targetItem = formItems.find(function (item) { return item.frameContext.frameId === frameContext.frameId; });
        if (targetItem) {
            var isPropertyExist = targetItem.message && Object.keys(targetItem.message).includes(domPropertyName);
            var messageType = "backend-message-" + (Object.keys(targetItem.message).length + 1);
            if (isPropertyExist) {
                targetItem.message[domPropertyName]['errors'][messageType] = { name: message };
            }
            else {
                targetItem.message[domPropertyName] = { errors: (_a = {}, _a[messageType] = { name: message }, _a) };
            }
        }
        else {
            formItems.push({
                frameContext: frameContext,
                message: (_b = {},
                    _b[domPropertyName] = {
                        errors: {
                            'backend-message-1': { name: message }
                        }
                    },
                    _b)
            });
        }
    };
    BackEndMessageHandler.prototype.buildItemTitle = function (viewModelName, propertyName, index) {
        var template = {
            'zh-CHS': {
                viewModelName: "$viewModel",
                index: "\u7B2C $index \u884C",
                propertyName: "- $propertyName"
            },
            'en': {
                viewModelName: "$viewModel",
                index: "row $index",
                propertyName: "- $propertyName"
            },
            'zh-CHT': {
                viewModelName: "$viewModel",
                index: "\u7B2C $index \u884C",
                propertyName: "- $propertyName"
            }
        };
        var currentLanguage = this.translate.getCurrentLanguage() || 'zh-CHS';
        var message = [];
        if (viewModelName) {
            message.push(template[currentLanguage]['viewModelName'].replace('$viewModel', viewModelName));
        }
        if (index > 0) {
            message.push(template[currentLanguage]['index'].replace('$index', index));
        }
        if (propertyName) {
            message.push(template[currentLanguage]['propertyName'].replace('$propertyName', propertyName));
        }
        return message.join(' ');
    };
    /**
     * 根据表名或nodeCode获取绑定路径
     * @param appContext appContext
     * @param ns ns
     * @param nodeCode 表名
     */
    BackEndMessageHandler.prototype.getBindingPath = function (appContext, ns, nodeCode) {
        var frameContext = this.getFrameContext(appContext, ns);
        return frameContext.repository.entityTypeInfo.getBindingPathByTableName(nodeCode);
    };
    /**
     * 通过绑定路径和列名找到所有符合条件的视图模型(包括grid和form)
     * @param appContext appContext
     * @param ns namespace
     * @param bindingPath 绑定路径
     * @param columnName 列名
     */
    BackEndMessageHandler.prototype.getFrameContextsByBindingPathAndColumnName = function (appContext, ns, bindingPath, columnName) {
        var frameContexts = appContext.frameContextManager.getFrameContexts();
        if (frameContexts && frameContexts.length > 0) {
            // 找到form中有控件的frameContext
            frameContexts = frameContexts.filter(function (frameContext) {
                // 基本条件是否满足
                var isValidFrameContext = frameContext.namespace === ns && frameContext.viewModel.bindingPath === bindingPath && frameContext.viewModel.form && frameContext.viewModel.form.controls && Object.keys(frameContext.viewModel.form.controls).length > 0;
                if (!isValidFrameContext) {
                    return false;
                }
                // 再通过列名过滤
                var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                var dataTypeInfo = frameContext.repository.entityTypeInfo.getTypeInfoByPath(bindingPaths);
                if (dataTypeInfo) {
                    var dataPropInfos = Array.from(dataTypeInfo.propInfoMap.values());
                    // 从当前实体属性中找到数据字段为列名的属性
                    var entityPropertyInfo = dataPropInfos.find(function (propInfo) { return propInfo.metadataInfo && (propInfo.metadataInfo.originalDataField === columnName || propInfo.metadataInfo.dataField === columnName); });
                    if (entityPropertyInfo) {
                        var entityPropertyName_1 = entityPropertyInfo.name;
                        var ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(function (item) { return item.binding === entityPropertyName_1; });
                        if (ngFormControl) {
                            return true;
                        }
                        else {
                            var item = Object.keys(frameContext.viewModel.form.ngFormControls).find(function (key) { return key === entityPropertyName_1; });
                            return item ? true : false;
                        }
                    }
                    else {
                        return false;
                    }
                }
                else {
                    return false;
                }
            });
            return frameContexts;
        }
        return null;
    };
    /**
     * 是否为datagrid组件
     * @param frameComponent component
     */
    BackEndMessageHandler.prototype.isDataGridComponent = function (frameComponent) {
        var columnNames = frameComponent.context.viewModel['dataGridColumnsName'] || null;
        return columnNames ? true : false;
    };
    /**
     * grid组件是否是只读的
     * @param frameComponent frameComponent
     * @returns
     */
    BackEndMessageHandler.prototype.isReadonlyDataGrid = function (frameComponent) {
        var frameContext = frameComponent.context;
        var dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;
        if (dataGridColumnsName) {
            var datagridColumns = frameContext.viewModel[dataGridColumnsName];
            return datagridColumns.every(function (group) {
                return group.every(function (item) { return !item.editor; });
            });
        }
        else {
            throw new Error("\u4F20\u5165\u7684\u7EC4\u4EF6\u4E0D\u662F\u4E00\u4E2A\u8868\u683C\uFF01");
        }
    };
    /**
     * id是否为当前行
     * @param appContext appContext
     * @param ns namespace
     * @param bindingPath bindingPath
     * @param id id
     */
    BackEndMessageHandler.prototype.isCurrentRow = function (appContext, ns, bindingPath, id) {
        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
        var frameContext = this.getFrameContext(appContext, ns);
        var bindingData = frameContext.bindingData;
        var bindingList = bindingData.getValue(bindingPaths);
        return bindingList.currentItem.primaryKeyValue === id;
    };
    /**
     * 获取当前ns下的rootFrameContext
     * @param appContext appcontext
     * @param ns namespace
     */
    BackEndMessageHandler.prototype.getFrameContext = function (appContext, ns) {
        var frameContexts = appContext.frameContextManager.getFrameContexts();
        if (frameContexts && frameContexts.length > 0) {
            var randomFrameContext = frameContexts.find(function (frameContext) { return frameContext.namespace === ns; });
            if (randomFrameContext) {
                var virtualRootFrameContext = randomFrameContext.getVirtualRootFrameContext();
                return virtualRootFrameContext;
            }
        }
        return null;
    };
    /**
     * 通过绑定路径和列名获取绑定到该列的formControl
     */
    BackEndMessageHandler.prototype.getFormControlByColumnName = function (frameContext, columnName) {
        var bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; });
        // 通过bindingPath找到对应的实体信息
        var typeInfo = frameContext.repository.entityTypeInfo.getTypeInfoByPath(bindingPaths);
        var propsInfo = Array.from(typeInfo.propInfoMap.values());
        var propInfo = propsInfo.find(function (propInfo) { return propInfo.metadataInfo && (propInfo.metadataInfo.originalDataField === columnName || propInfo.metadataInfo.dataField === columnName); });
        if (propInfo) {
            var mappingName_1 = propInfo.name;
            var formControls = Object.entries(frameContext.viewModel.form.ngFormControls).filter(function (item) { return item[1].binding === mappingName_1 || item[0] === mappingName_1; });
            // const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === mappingName);
            if (formControls) {
                return formControls;
            }
        }
        return null;
    };
    BackEndMessageHandler.prototype.resetFormMessage = function (appContext, ns) {
        var frameContexts = appContext.frameContextManager.getFrameContexts().filter(function (frameContext) { return frameContext.namespace === ns; });
        frameContexts.forEach(function (frameContext) { return frameContext && frameContext.viewModel && frameContext.viewModel.form && frameContext.viewModel.form.clearBackendError(); });
    };
    /**
     * 递归找到展示消息的组件上下文
     * @param frameContext frameContext
     */
    BackEndMessageHandler.prototype.findTargetFrameContext = function (frameContext) {
        var virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
        var virtualRootComponent = virtualRootFrameContext.frameComponent;
        var isDialogComponent = virtualRootComponent && virtualRootComponent['isDialogRootComponent'] || false;
        if (isDialogComponent) {
            // 如果消息处理服务是弹窗内的，则消息提示展示在弹窗内
            return virtualRootFrameContext;
        }
        else {
            // 当前消息服务不在弹窗内，递归向上查找，找到第一个弹窗，如果找不到则找到最上的root-component
            var parentFrameContext = virtualRootFrameContext.parent;
            if (parentFrameContext) {
                return this.findTargetFrameContext(parentFrameContext);
            }
            else {
                return virtualRootFrameContext;
            }
        }
    };
    BackEndMessageHandler.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BackEndMessageHandler.ctorParameters = function () { return [
        { type: Injector },
        { type: FrameContext },
        { type: undefined, decorators: [{ type: Inject, args: [TranslateToken,] }] }
    ]; };
    return BackEndMessageHandler;
}());
export { BackEndMessageHandler };
//# sourceMappingURL=data:application/json;base64,