import { BindingPathConverter } from './binding_path_converter';
/**
 * BindingPath比较器
 */
class BindingPathComparer {
    /**
     * 是否相等
     */
    static isEqual(srcPath, dstPath) {
        const srcPathArray = BindingPathConverter.toBindingPathArray(srcPath);
        const dstPathArray = BindingPathConverter.toBindingPathArray(dstPath);
        const isEqual = srcPathArray.every((srcPathItem, srcPathIndex) => {
            return srcPathItem === dstPathArray[srcPathIndex];
        });
        return isEqual;
    }
    /**
     * 是否是父路径
     */
    static isParent(childPath, parentPath) {
        const childPathArray = BindingPathConverter.toBindingPathArray(childPath);
        const parentPathArray = BindingPathConverter.toBindingPathArray(parentPath);
        // 长度差1个
        if (childPathArray.length !== parentPathArray.length + 1) {
            return;
        }
        return this.isAncestor(childPath, parentPath);
    }
    /**
     * 是否是祖先路径
     */
    static isAncestor(descendantPath, ancestorPath) {
        const descendantPathArray = BindingPathConverter.toBindingPathArray(descendantPath);
        const ancestorPathArray = BindingPathConverter.toBindingPathArray(ancestorPath);
        if (descendantPath.length <= ancestorPathArray.length) {
            return false;
        }
        const isAncestor = ancestorPathArray.every((ancestorPathItem, ancestorPathIndex) => {
            return ancestorPathItem === descendantPathArray[ancestorPathIndex];
        });
        return isAncestor;
    }
}
export { BindingPathComparer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19wYXRoX2NvbXBhcmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2RhdGEtcGF0aC9iaW5kaW5nX3BhdGhfY29tcGFyZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFaEU7O0dBRUc7QUFDSCxNQUFNLG1CQUFtQjtJQUV2Qjs7T0FFRztJQUNJLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBMEIsRUFBRSxPQUEwQjtRQUMxRSxNQUFNLFlBQVksR0FBRyxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0RSxNQUFNLFlBQVksR0FBRyxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV0RSxNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBbUIsRUFBRSxZQUFvQixFQUFFLEVBQUU7WUFDL0UsT0FBTyxXQUFXLEtBQUssWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3BELENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUE0QixFQUFFLFVBQTZCO1FBRWhGLE1BQU0sY0FBYyxHQUFJLG9CQUFvQixDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzNFLE1BQU0sZUFBZSxHQUFHLG9CQUFvQixDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTVFLFFBQVE7UUFDUixJQUFJLGNBQWMsQ0FBQyxNQUFNLEtBQUssZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDeEQsT0FBTztTQUNSO1FBRUQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsVUFBVSxDQUFDLGNBQWlDLEVBQUUsWUFBK0I7UUFDekYsTUFBTSxtQkFBbUIsR0FBRyxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNwRixNQUFNLGlCQUFpQixHQUFLLG9CQUFvQixDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRWxGLElBQUksY0FBYyxDQUFDLE1BQU0sSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUU7WUFDckQsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELE1BQU0sVUFBVSxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDLGdCQUF3QixFQUFFLGlCQUF5QixFQUFFLEVBQUU7WUFDakcsT0FBTyxnQkFBZ0IsS0FBSyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3JFLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztDQUVGO0FBRUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCaW5kaW5nUGF0aENvbnZlcnRlciB9IGZyb20gJy4vYmluZGluZ19wYXRoX2NvbnZlcnRlcic7XHJcblxyXG4vKipcclxuICogQmluZGluZ1BhdGjmr5TovoPlmahcclxuICovXHJcbmNsYXNzIEJpbmRpbmdQYXRoQ29tcGFyZXIge1xyXG5cclxuICAvKipcclxuICAgKiDmmK/lkKbnm7jnrYlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGlzRXF1YWwoc3JjUGF0aDogc3RyaW5nIHwgc3RyaW5nW10sIGRzdFBhdGg6IHN0cmluZyB8IHN0cmluZ1tdKSB7XHJcbiAgICBjb25zdCBzcmNQYXRoQXJyYXkgPSBCaW5kaW5nUGF0aENvbnZlcnRlci50b0JpbmRpbmdQYXRoQXJyYXkoc3JjUGF0aCk7XHJcbiAgICBjb25zdCBkc3RQYXRoQXJyYXkgPSBCaW5kaW5nUGF0aENvbnZlcnRlci50b0JpbmRpbmdQYXRoQXJyYXkoZHN0UGF0aCk7XHJcblxyXG4gICAgY29uc3QgaXNFcXVhbCA9IHNyY1BhdGhBcnJheS5ldmVyeSgoc3JjUGF0aEl0ZW06IHN0cmluZywgc3JjUGF0aEluZGV4OiBudW1iZXIpID0+IHtcclxuICAgICAgcmV0dXJuIHNyY1BhdGhJdGVtID09PSBkc3RQYXRoQXJyYXlbc3JjUGF0aEluZGV4XTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBpc0VxdWFsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5piv5ZCm5piv54i26Lev5b6EXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBpc1BhcmVudChjaGlsZFBhdGg6IHN0cmluZyB8IHN0cmluZ1tdLCBwYXJlbnRQYXRoOiBzdHJpbmcgfCBzdHJpbmdbXSk6IGJvb2xlYW4ge1xyXG5cclxuICAgIGNvbnN0IGNoaWxkUGF0aEFycmF5ICA9IEJpbmRpbmdQYXRoQ29udmVydGVyLnRvQmluZGluZ1BhdGhBcnJheShjaGlsZFBhdGgpO1xyXG4gICAgY29uc3QgcGFyZW50UGF0aEFycmF5ID0gQmluZGluZ1BhdGhDb252ZXJ0ZXIudG9CaW5kaW5nUGF0aEFycmF5KHBhcmVudFBhdGgpO1xyXG5cclxuICAgIC8vIOmVv+W6puW3rjHkuKpcclxuICAgIGlmIChjaGlsZFBhdGhBcnJheS5sZW5ndGggIT09IHBhcmVudFBhdGhBcnJheS5sZW5ndGggKyAxKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5pc0FuY2VzdG9yKGNoaWxkUGF0aCwgcGFyZW50UGF0aCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmmK/lkKbmmK/npZblhYjot6/lvoRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGlzQW5jZXN0b3IoZGVzY2VuZGFudFBhdGg6IHN0cmluZyB8IHN0cmluZ1tdLCBhbmNlc3RvclBhdGg6IHN0cmluZyB8IHN0cmluZ1tdKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBkZXNjZW5kYW50UGF0aEFycmF5ID0gQmluZGluZ1BhdGhDb252ZXJ0ZXIudG9CaW5kaW5nUGF0aEFycmF5KGRlc2NlbmRhbnRQYXRoKTtcclxuICAgIGNvbnN0IGFuY2VzdG9yUGF0aEFycmF5ICAgPSBCaW5kaW5nUGF0aENvbnZlcnRlci50b0JpbmRpbmdQYXRoQXJyYXkoYW5jZXN0b3JQYXRoKTtcclxuXHJcbiAgICBpZiAoZGVzY2VuZGFudFBhdGgubGVuZ3RoIDw9IGFuY2VzdG9yUGF0aEFycmF5Lmxlbmd0aCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaXNBbmNlc3RvciA9IGFuY2VzdG9yUGF0aEFycmF5LmV2ZXJ5KChhbmNlc3RvclBhdGhJdGVtOiBzdHJpbmcsIGFuY2VzdG9yUGF0aEluZGV4OiBudW1iZXIpID0+IHtcclxuICAgICAgcmV0dXJuIGFuY2VzdG9yUGF0aEl0ZW0gPT09IGRlc2NlbmRhbnRQYXRoQXJyYXlbYW5jZXN0b3JQYXRoSW5kZXhdO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGlzQW5jZXN0b3I7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQmluZGluZ1BhdGhDb21wYXJlciB9O1xyXG4iXX0=