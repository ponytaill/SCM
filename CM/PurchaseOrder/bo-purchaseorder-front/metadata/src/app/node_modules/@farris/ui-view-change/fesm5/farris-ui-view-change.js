import { BehaviorSubject } from 'rxjs';
import { CommonModule } from '@angular/common';
import { Injectable, NgModule, Component, Input, Output, EventEmitter, ElementRef, ViewChild, Renderer2, ViewEncapsulation, Directive, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ViewChangeService = /** @class */ (function () {
    function ViewChangeService() {
        /**
         * 默认视图切换分组名称
         */
        this.defaultId = 'default';
        //当前显示视图
        this.currentViewType = {};
        /**
         * contents
         */
        this.viewContainers = {};
        this.changeCurrentViewId = new BehaviorSubject(null);
    }
    /**
     * @param {?} itemId
     * @param {?=} viewContainerId
     * @return {?}
     */
    ViewChangeService.prototype.addViewItem = /**
     * @param {?} itemId
     * @param {?=} viewContainerId
     * @return {?}
     */
    function (itemId, viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        if (this.viewContainers[viewContainerId]) {
            if (this.hasElement(itemId, viewContainerId)) {
                return;
            }
            else {
                this.viewContainers[viewContainerId].items.push(itemId);
            }
        }
        else {
            this.viewContainers[viewContainerId] = (/** @type {?} */ ({
                items: []
            }));
            this.viewContainers[viewContainerId].items.push(itemId);
        }
    };
    /**
     * @param {?} itemId
     * @param {?=} viewContainerId
     * @return {?}
     */
    ViewChangeService.prototype.removeViewItem = /**
     * @param {?} itemId
     * @param {?=} viewContainerId
     * @return {?}
     */
    function (itemId, viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        delete this.viewContainers[viewContainerId];
        if (this.viewContainers && this.viewContainers[viewContainerId]) {
            /** @type {?} */
            var items = this.viewContainers[viewContainerId].items.filter((/**
             * @param {?} el
             * @return {?}
             */
            function (el) {
                return el !== itemId;
            }));
            if (!items.length) {
                delete this.viewContainers[viewContainerId];
                return;
            }
            this.viewContainers[viewContainerId].items = items;
        }
    };
    /**存储currentpageid */
    /**
     * 存储currentpageid
     * @param {?} type
     * @param {?=} viewContainerId
     * @return {?}
     */
    ViewChangeService.prototype.updateCurrentViewId = /**
     * 存储currentpageid
     * @param {?} type
     * @param {?=} viewContainerId
     * @return {?}
     */
    function (type, viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        this.currentViewType[viewContainerId] = type;
        /** @type {?} */
        var changeView = {};
        changeView[viewContainerId] = type;
        this.changeCurrentViewId.next(changeView);
    };
    /**
     * @return {?}
     */
    ViewChangeService.prototype.getChangeCurrentViewId = /**
     * @return {?}
     */
    function () {
        return this.changeCurrentViewId;
    };
    /**
     * @private
     * @param {?} itemId
     * @param {?} groupId
     * @return {?}
     */
    ViewChangeService.prototype.hasElement = /**
     * @private
     * @param {?} itemId
     * @param {?} groupId
     * @return {?}
     */
    function (itemId, groupId) {
        return this.viewContainers[groupId].items.some((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item === itemId; }));
    };
    ViewChangeService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ViewChangeService.ctorParameters = function () { return []; };
    /** @nocollapse */ ViewChangeService.ngInjectableDef = defineInjectable({ factory: function ViewChangeService_Factory() { return new ViewChangeService(); }, token: ViewChangeService, providedIn: "root" });
    return ViewChangeService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ViewChangeComponent = /** @class */ (function () {
    function ViewChangeComponent(_renderer, viewChangeService) {
        this._renderer = _renderer;
        this.viewChangeService = viewChangeService;
        this.viewType = 'tile';
        this.viewGroupId = 'default';
        this.toolTypeChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.toolbarData && this.toolbarData.length) {
            if (this.defaultType) {
                /** @type {?} */
                var item = this.toolbarData.find((/**
                 * @param {?} bar
                 * @return {?}
                 */
                function (bar) {
                    return bar['type'] === _this.defaultType;
                }));
                this.activeTypeItem = item;
                this.toolTypeChange.emit(this.activeTypeItem);
            }
            else {
                this.activeTypeItem = this.toolbarData[0];
                this.toolTypeChange.emit(this.activeTypeItem);
            }
        }
    };
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!this.viewChangeService) {
            this.viewChangeService = new ViewChangeService();
        }
        this.viewChangeService.updateCurrentViewId(this.activeTypeItem['type'], this.viewGroupId);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ViewChangeComponent.prototype.listItemClick = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item.disable || this.activeTypeItem['type'] === item['type']) {
            return;
        }
        this.activeTypeItem = item;
        if (!this.viewChangeService) {
            this.viewChangeService = new ViewChangeService();
        }
        this.viewChangeService.updateCurrentViewId(this.activeTypeItem['type'], this.viewGroupId);
        this.toolTypeChange.emit(item);
        if (this.typelist) {
            this._renderer.setStyle(this.typelist.nativeElement, 'display', 'none');
        }
    };
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.dropdownMouseEnter = /**
     * @return {?}
     */
    function () {
        this._renderer.setStyle(this.typelist.nativeElement, 'display', 'block');
    };
    /**
     * @return {?}
     */
    ViewChangeComponent.prototype.dropdownMouseLeave = /**
     * @return {?}
     */
    function () {
        this._renderer.setStyle(this.typelist.nativeElement, 'display', 'none');
    };
    ViewChangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-view-change',
                    template: "<div class=\"f-view-change\">\r\n    <div class=\"f-view-change-tile\" *ngIf=\"viewType === 'tile'; else dropdown\">\r\n        <div class=\"f-view-change-tile-btn\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'tile-btn-active': item.type === activeTypeItem.type,'tile-btn-disable': item.disable}\" (click)=\"listItemClick(item)\" [title]=\"item.title\">\r\n            <span class=\"tile-btn-icon {{item.iconName}}\"></span>\r\n        </div>\r\n    </div>\r\n    <ng-template #dropdown>\r\n        <div class=\"f-view-change-dropdown\" \r\n        (mouseenter)=\"dropdownMouseEnter()\"\r\n        (mouseleave)=\"dropdownMouseLeave()\"> \r\n            <div class=\"f-view-change-toggle\" *ngIf=\"this.toolbarData.length\">\r\n                <span class=\"toggle-btn-icon {{activeTypeItem.iconName}}\"></span>\r\n            </div>\r\n            <div class=\"f-view-change-typelist\" #typelist>\r\n                <div class=\"f-view-change-typelist-content\">\r\n                    <div class=\"f-view-change-typelist-arrow\"></div>\r\n                    <ul class=\"f-view-change-typelist-list\">\r\n                        <li class=\"typelist-item\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'typelist-item-active': item.type === activeTypeItem.type,'typelist-item-disable': item.disable}\" (click)=\"listItemClick(item)\">\r\n                                <span class=\"typelist-item-icon {{item.iconName}}\"></span>\r\n                                <span class=\"typelist-item-title\">{{item.title}}</span>\r\n                            </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <!-- <ul class=\"f-view-change-typelist\" #typelist>\r\n                <li class=\"f-view-change-typelist-arrow\"></li>\r\n                <li class=\"typelist-item\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'typelist-item-active': item.type === activeTypeItem.type,'typelist-item-disable': item.disable}\" (click)=\"listItemClick(item)\">\r\n                    <span class=\"typelist-item-icon {{item.iconName}}\"></span>\r\n                    <span class=\"typelist-item-title\">{{item.title}}</span>\r\n                </li>\r\n            </ul> -->\r\n        </div>\r\n    </ng-template>\r\n</div>",
                    encapsulation: ViewEncapsulation.None
                    // providers:[ ViewChangeService ]
                    ,
                    styles: [".f-viewchange-view-none{display:none!important}"]
                }] }
    ];
    /** @nocollapse */
    ViewChangeComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ViewChangeService }
    ]; };
    ViewChangeComponent.propDecorators = {
        toolbarData: [{ type: Input }],
        viewType: [{ type: Input }],
        defaultType: [{ type: Input }],
        viewGroupId: [{ type: Input }],
        toolTypeChange: [{ type: Output }],
        typelist: [{ type: ViewChild, args: ['typelist',] }]
    };
    return ViewChangeComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
//视图区域
var FarrisViewItemDirective = /** @class */ (function () {
    function FarrisViewItemDirective(elementRef, viewChangeService, render) {
        this.elementRef = elementRef;
        this.viewChangeService = viewChangeService;
        this.render = render;
        this.fViewGroupId = 'default';
    }
    /**
     * @return {?}
     */
    FarrisViewItemDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.viewChangeService.addViewItem(this.viewItemType, this.fViewGroupId);
        this.viewChangeService.getChangeCurrentViewId().subscribe((/**
         * @param {?} currentViewType
         * @return {?}
         */
        function (currentViewType) {
            if (!currentViewType)
                return;
            if (!currentViewType[_this.fViewGroupId]) {
                return;
            }
            else if (currentViewType[_this.fViewGroupId] == _this.viewItemType) {
                // this.render.setStyle(this.elementRef.nativeElement,'display','');
                _this.render.removeClass(_this.elementRef.nativeElement, 'f-viewchange-view-none');
            }
            else {
                // this.render.setStyle(this.elementRef.nativeElement,'display','none',0);
                _this.render.addClass(_this.elementRef.nativeElement, 'f-viewchange-view-none');
            }
        }));
    };
    /**
     * @return {?}
     */
    FarrisViewItemDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.viewChangeService.removeViewItem(this.viewItemType, this.fViewGroupId);
    };
    FarrisViewItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fViewItem]'
                },] }
    ];
    /** @nocollapse */
    FarrisViewItemDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ViewChangeService },
        { type: Renderer2 }
    ]; };
    FarrisViewItemDirective.propDecorators = {
        viewItemType: [{ type: Input, args: ['fViewItem',] }],
        fViewGroupId: [{ type: Input, args: ['fViewGroupId',] }]
    };
    return FarrisViewItemDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ViewChangeModule = /** @class */ (function () {
    function ViewChangeModule() {
    }
    ViewChangeModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [ViewChangeComponent, FarrisViewItemDirective],
                    imports: [
                        CommonModule
                    ],
                    exports: [ViewChangeComponent, FarrisViewItemDirective]
                },] }
    ];
    return ViewChangeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ViewChangeService, ViewChangeComponent, ViewChangeModule, FarrisViewItemDirective };

//# sourceMappingURL=farris-ui-view-change.js.map