/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { cloneDeep } from 'lodash-es';
import { IdService } from '@farris/ui-common';
import { Component, ViewChild, TemplateRef, Renderer2, ElementRef, NgZone, Injector, Input, HostListener, Optional } from '@angular/core';
import { FilterPanelService } from '@farris/ui-filter-panel';
import { DatagridComponent } from '../../datagrid.component';
import { DatagridSmartFilterService } from '../../services/datagrid-smart-filter.service';
export class DatagridSmartFilterComponent {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} zone
     * @param {?} inject
     * @param {?} filterPanelService
     * @param {?} smartFilterSer
     * @param {?} dg
     */
    constructor(render, el, zone, inject, filterPanelService, smartFilterSer, dg) {
        this.render = render;
        this.el = el;
        this.zone = zone;
        this.inject = inject;
        this.filterPanelService = filterPanelService;
        this.smartFilterSer = smartFilterSer;
        this.dg = dg;
        this.filterData = null;
        this.disabled = false;
        this.smartFilterDataChanged$ = null;
        this.removeFilter$ = null;
        this.clearAllFilter$ = null;
        this.smartFilterEvents = [];
        this.idService = this.inject.get(IdService, null);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.removeFilter$) {
            this.removeFilter$ = this.smartFilterSer.removeFilter.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e && e.labelCode === this.column.field) {
                    this.filterData = null;
                    this.render.removeClass(this.el.nativeElement, 'active');
                }
            }));
            this.smartFilterEvents.push(this.removeFilter$);
        }
        if (!this.clearAllFilter$) {
            this.clearAllFilter$ = this.smartFilterSer.clearAllFilter.subscribe((/**
             * @return {?}
             */
            () => {
                this.filterData = null;
                this.render.removeClass(this.el.nativeElement, 'active');
            }));
            this.smartFilterEvents.push(this.clearAllFilter$);
        }
        if (this.dg && !this.smartFilterDataChanged$) {
            this.smartFilterDataChanged$ = this.dg.dgs['smartFilterDataChange'].subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e && this.column.field === e.fieldCode) {
                    this.filterData.value = e.value;
                    this.filterData.control.single = e.control.single;
                }
            }));
            this.smartFilterEvents.push(this.smartFilterDataChanged$);
        }
        this.dg.dgs.clearFilter.subscribe((/**
         * @return {?}
         */
        () => {
            this.filterData = null;
            this.render.removeClass(this.el.nativeElement, 'active');
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.filterPanelRef) {
            this.filterPanelService.hidePanel();
            this.filterPanelRef = null;
        }
        if (this.smartFilterEvents && this.smartFilterEvents.length) {
            this.smartFilterEvents.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                n.unsubscribe();
                n = null;
            }));
            this.smartFilterEvents = [];
        }
    }
    /**
     * @private
     * @return {?}
     */
    getFilterData() {
        const { field, title } = this.column;
        if (!this.filterData) {
            this.filterData = this.smartFilterSer.controlData.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.id === field));
        }
        if (!this.filterData) {
            this.filterData = {
                id: field,
                labelCode: field,
                code: field,
                name: title,
                control: this.smartFilterSer.getColumnFilterData(this.column),
                placeHolder: '',
                value: {
                    value: ''
                }
            };
        }
        return cloneDeep(this.filterData);
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    getPanelPosition($event) {
        /** @type {?} */
        let x = $event.pageX - 33;
        /** @type {?} */
        const y = $event.pageY + 9;
        /** @type {?} */
        const targetRect = $event.target.getBoundingClientRect();
        /** @type {?} */
        let moveArrow = 0;
        if (window.innerWidth - x < 380) {
            /** @type {?} */
            const i = 380 - (window.innerWidth - x);
            x = x - i - 20;
            moveArrow = targetRect.left - x;
        }
        return { x, y, moveArrow };
    }
    /**
     * @private
     * @return {?}
     */
    hideFilterPanel() {
        if (this.filterPanelRef) {
            this.filterPanelService.hidePanel();
            this.filterPanelRef = null;
            if (!this.filterData || (this.filterData.control.controltype === 'bool-check' ? !this.filterData.value.value : !this.filterData.valueText)) {
                this.render.removeClass(this.el.nativeElement, 'active');
            }
        }
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    clearColumnFilter(e) {
        this.filterData = null;
        this.hideFilterPanel();
        this.smartFilterSer.removeCondition(e);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    showFilterPanel($event) {
        $event.stopPropagation();
        this.render.addClass(this.el.nativeElement, 'active');
        const { x, y, moveArrow } = this.getPanelPosition($event);
        this.filterPanelRef = this.filterPanelService.showPanel({
            left: x,
            top: y,
            item: this.getFilterData(),
            panelExtendTemplate: this.column.sortable ? this.sortTmp : null,
            localStorageKey: 'smartfilter_' + this.dg.dgs.createConfigKey(this.dg.id),
            target: $event.target
        });
        if (moveArrow) {
            /** @type {?} */
            const arrowEl = this.filterPanelRef['el'].querySelector('.f-filter-panel-arrow');
            if (arrowEl) {
                this.render.setStyle(arrowEl, 'left', `${moveArrow}px`);
            }
        }
        this.filterPanelRef.hidePanel.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            this.hideFilterPanel();
        }));
        this.filterPanelRef.filterSubmit.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            if (e.filter && e.filter.length) {
                this.filterData = e.item || null;
                this.hideFilterPanel();
                this.smartFilterSer.filterConditionChanged({ conditions: e.filter, controlData: e.item, from: 'panel' });
            }
            else {
                this.clearColumnFilter(e.item);
            }
        }));
        this.filterPanelRef.clearFilter.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.clearColumnFilter(e);
        }));
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
        if (this.disabled) {
            return;
        }
        this.showFilterPanel($event);
        return false;
    }
    /**
     * @param {?} $event
     * @param {?} order
     * @return {?}
     */
    onSort($event, order) {
        $event.stopPropagation();
        if (this.column.order === order) {
            this.column.order = '';
        }
        else {
            this.column.order = order;
        }
        /** @type {?} */
        const sortName = this.dg.sortName;
        /** @type {?} */
        const sortOrder = this.dg.sortOrder;
        /** @type {?} */
        let sortFields = [];
        /** @type {?} */
        let sortOrders = [];
        if (sortName) {
            sortFields = sortName.split(',');
            sortOrders = sortOrder.split(',');
        }
        /** @type {?} */
        let newOrder = this.column.order;
        /** @type {?} */
        const i = sortFields.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n === this.column.field));
        if (i >= 0) {
            if (newOrder === '') {
                newOrder = undefined;
                sortFields.splice(i, 1);
                sortOrders.splice(i, 1);
            }
            else {
                sortOrders[i] = newOrder;
            }
        }
        else {
            if (this.dg.multiSort) {
                sortFields.push(this.column.field);
                sortOrders.push(newOrder);
            }
            else {
                sortFields = [this.column.field];
                sortOrders = [newOrder];
            }
        }
        this.hideFilterPanel();
        this.dg.sortName = sortFields.join(',');
        this.dg.sortOrder = sortOrders.join(',');
        this.dg.dfs.setSortInfo(this.dg.sortName, this.dg.sortOrder);
        this.dg.beforeSortColumn(this.dg.sortName, this.dg.sortOrder, this.dg).subscribe((/**
         * @return {?}
         */
        () => {
            this.dg.onColumnSorted();
        }));
    }
}
DatagridSmartFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-smart-filter, [datagrid-smart-filter]',
                template: "<ng-template #sort>\r\n    <div class=\"f-filter-panel-sort-wrapper f-filter-panel-sort-wrapper-hasfilter\">\r\n        <div class=\"f-filter-panel-sort\">\r\n            <div class=\"panel-sort-up panel-sort-item\" [class.active]=\"column?.order === 'asc'\" (click)=\"onSort($event, 'asc')\">\r\n                <span class=\"panel-sort-item-icon f-icon f-icon-col-ascendingorder\"></span>\r\n                <span class=\"panel-sort-item-text\">{{ 'datagrid.settings.asc' | locale: '\u5347\u5E8F' }}</span>\r\n            </div>\r\n            <div class=\"panel-sort-down panel-sort-item\" [class.active]=\"column?.order === 'desc'\"  (click)=\"onSort($event, 'desc')\">\r\n                <span class=\"panel-sort-item-icon f-icon f-icon-col-descendingorder\"></span>\r\n                <span class=\"panel-sort-item-text\">{{ 'datagrid.settings.desc' | locale: '\u964D\u5E8F' }}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</ng-template>",
                providers: [
                    FilterPanelService
                ]
            }] }
];
/** @nocollapse */
DatagridSmartFilterComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector },
    { type: FilterPanelService },
    { type: DatagridSmartFilterService },
    { type: DatagridComponent, decorators: [{ type: Optional }] }
];
DatagridSmartFilterComponent.propDecorators = {
    column: [{ type: Input }],
    filterData: [{ type: Input }],
    disabled: [{ type: Input }],
    sortTmp: [{ type: ViewChild, args: ['sort',] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    DatagridSmartFilterComponent.prototype.column;
    /** @type {?} */
    DatagridSmartFilterComponent.prototype.filterData;
    /** @type {?} */
    DatagridSmartFilterComponent.prototype.disabled;
    /** @type {?} */
    DatagridSmartFilterComponent.prototype.sortTmp;
    /** @type {?} */
    DatagridSmartFilterComponent.prototype.filterPanelRef;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.idService;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.smartFilterDataChanged$;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.removeFilter$;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.clearAllFilter$;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.smartFilterEvents;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.inject;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.filterPanelService;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.smartFilterSer;
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterComponent.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtc21hcnQtZmlsdGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQvIiwic291cmNlcyI6WyJsaWIvcGx1Z2lucy9zbWFydC1maWx0ZXIvZGF0YWdyaWQtc21hcnQtZmlsdGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN0QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUNILFNBQVMsRUFBVSxTQUFTLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQ2hFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFhLFlBQVksRUFBRSxRQUFRLEVBQzdELE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxrQkFBa0IsRUFBd0IsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQVMxRixNQUFNLE9BQU8sNEJBQTRCOzs7Ozs7Ozs7O0lBYXJDLFlBQ1ksTUFBaUIsRUFBVSxFQUFjLEVBQ3pDLElBQVksRUFBVSxNQUFnQixFQUN0QyxrQkFBc0MsRUFDdEMsY0FBMEMsRUFDOUIsRUFBcUI7UUFKakMsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDekMsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVU7UUFDdEMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxtQkFBYyxHQUFkLGNBQWMsQ0FBNEI7UUFDOUIsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFoQnBDLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFDbEIsYUFBUSxHQUFH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LE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQzs7OztJQTVLakMsOENBQWdCOztJQUNoQixrREFBMkI7O0lBQzNCLGdEQUEwQjs7SUFFMUIsK0NBQTZDOztJQUU3QyxzREFBcUM7Ozs7O0lBQ3JDLGlEQUE2Qjs7Ozs7SUFDN0IsK0RBQXVDOzs7OztJQUN2QyxxREFBNkI7Ozs7O0lBQzdCLHVEQUErQjs7Ozs7SUFDL0IseURBQStCOzs7OztJQUUzQiw4Q0FBeUI7Ozs7O0lBQUUsMENBQXNCOzs7OztJQUNqRCw0Q0FBb0I7Ozs7O0lBQUUsOENBQXdCOzs7OztJQUM5QywwREFBOEM7Ozs7O0lBQzlDLHNEQUFrRDs7Ozs7SUFDbEQsMENBQXlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoLWVzJztcclxuaW1wb3J0IHsgSWRTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5pbXBvcnQge1xyXG4gICAgQ29tcG9uZW50LCBPbkluaXQsIFZpZXdDaGlsZCwgVGVtcGxhdGVSZWYsIFJlbmRlcmVyMiwgRWxlbWVudFJlZixcclxuICAgIE5nWm9uZSwgSW5qZWN0b3IsIElucHV0LCBPbkRlc3Ryb3ksIEhvc3RMaXN0ZW5lciwgT3B0aW9uYWxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRmlsdGVyUGFuZWxTZXJ2aWNlLCBGaWx0ZXJQYW5lbENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktZmlsdGVyLXBhbmVsJztcclxuaW1wb3J0IHsgRGF0YWdyaWRDb21wb25lbnQgfSBmcm9tICcuLi8uLi9kYXRhZ3JpZC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZFNtYXJ0RmlsdGVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2RhdGFncmlkLXNtYXJ0LWZpbHRlci5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdkYXRhZ3JpZC1zbWFydC1maWx0ZXIsIFtkYXRhZ3JpZC1zbWFydC1maWx0ZXJdJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnZGF0YWdyaWQtc21hcnQtZmlsdGVyLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIEZpbHRlclBhbmVsU2VydmljZVxyXG4gICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0YWdyaWRTbWFydEZpbHRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICAgIEBJbnB1dCgpIGNvbHVtbjtcclxuICAgIEBJbnB1dCgpIGZpbHRlckRhdGEgPSBudWxsO1xyXG4gICAgQElucHV0KCkgZGlzYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgICBAVmlld0NoaWxkKCdzb3J0Jykgc29ydFRtcDogVGVtcGxhdGVSZWY8YW55PjtcclxuXHJcbiAgICBmaWx0ZXJQYW5lbFJlZjogRmlsdGVyUGFuZWxDb21wb25lbnQ7XHJcbiAgICBwcml2YXRlIGlkU2VydmljZTogSWRTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBzbWFydEZpbHRlckRhdGFDaGFuZ2VkJCA9IG51bGw7XHJcbiAgICBwcml2YXRlIHJlbW92ZUZpbHRlciQgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBjbGVhckFsbEZpbHRlciQgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBzbWFydEZpbHRlckV2ZW50cyA9IFtdO1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSByZW5kZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcclxuICAgICAgICBwcml2YXRlIHpvbmU6IE5nWm9uZSwgcHJpdmF0ZSBpbmplY3Q6IEluamVjdG9yLFxyXG4gICAgICAgIHByaXZhdGUgZmlsdGVyUGFuZWxTZXJ2aWNlOiBGaWx0ZXJQYW5lbFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBzbWFydEZpbHRlclNlcjogRGF0YWdyaWRTbWFydEZpbHRlclNlcnZpY2UsXHJcbiAgICAgICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBkZzogRGF0YWdyaWRDb21wb25lbnRcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhpcy5pZFNlcnZpY2UgPSB0aGlzLmluamVjdC5nZXQoSWRTZXJ2aWNlLCBudWxsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5yZW1vdmVGaWx0ZXIkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRmlsdGVyJCA9IHRoaXMuc21hcnRGaWx0ZXJTZXIucmVtb3ZlRmlsdGVyLnN1YnNjcmliZSgoZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSAmJiBlLmxhYmVsQ29kZSAgPT09IHRoaXMuY29sdW1uLmZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJEYXRhID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5yZW1vdmVDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNtYXJ0RmlsdGVyRXZlbnRzLnB1c2godGhpcy5yZW1vdmVGaWx0ZXIkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5jbGVhckFsbEZpbHRlciQpIHtcclxuICAgICAgICAgICAgdGhpcy5jbGVhckFsbEZpbHRlciQgPSB0aGlzLnNtYXJ0RmlsdGVyU2VyLmNsZWFyQWxsRmlsdGVyLnN1YnNjcmliZSggKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJEYXRhID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLnJlbW92ZUNsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc21hcnRGaWx0ZXJFdmVudHMucHVzaCh0aGlzLmNsZWFyQWxsRmlsdGVyJCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmRnICYmICF0aGlzLnNtYXJ0RmlsdGVyRGF0YUNoYW5nZWQkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc21hcnRGaWx0ZXJEYXRhQ2hhbmdlZCQgPSB0aGlzLmRnLmRnc1snc21hcnRGaWx0ZXJEYXRhQ2hhbmdlJ10uc3Vic2NyaWJlKChlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlICYmIHRoaXMuY29sdW1uLmZpZWxkID09PSBlLmZpZWxkQ29kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyRGF0YS52YWx1ZSA9IGUudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJEYXRhLmNvbnRyb2wuc2luZ2xlID0gZS5jb250cm9sLnNpbmdsZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuc21hcnRGaWx0ZXJFdmVudHMucHVzaCh0aGlzLnNtYXJ0RmlsdGVyRGF0YUNoYW5nZWQkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZGcuZGdzLmNsZWFyRmlsdGVyLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyRGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLnJlbW92ZUNsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2FjdGl2ZScpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmZpbHRlclBhbmVsUmVmKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyUGFuZWxTZXJ2aWNlLmhpZGVQYW5lbCgpO1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlclBhbmVsUmVmID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNtYXJ0RmlsdGVyRXZlbnRzICYmIHRoaXMuc21hcnRGaWx0ZXJFdmVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc21hcnRGaWx0ZXJFdmVudHMuZm9yRWFjaChuID0+IHtcclxuICAgICAgICAgICAgICAgIG4udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgIG4gPSBudWxsO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc21hcnRGaWx0ZXJFdmVudHMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICBwcml2YXRlIGdldEZpbHRlckRhdGEoKSB7XHJcbiAgICAgICAgY29uc3QgeyBmaWVsZCwgdGl0bGUgfSA9IHRoaXMuY29sdW1uO1xyXG4gICAgICAgIGlmICghdGhpcy5maWx0ZXJEYXRhKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyRGF0YSA9IHRoaXMuc21hcnRGaWx0ZXJTZXIuY29udHJvbERhdGEuZmluZChuID0+IG4uaWQgPT09IGZpZWxkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5maWx0ZXJEYXRhKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGlkOiBmaWVsZCxcclxuICAgICAgICAgICAgICAgIGxhYmVsQ29kZTogZmllbGQsXHJcbiAgICAgICAgICAgICAgICBjb2RlOiBmaWVsZCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IHRpdGxlLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbDogdGhpcy5zbWFydEZpbHRlclNlci5nZXRDb2x1bW5GaWx0ZXJEYXRhKHRoaXMuY29sdW1uKSxcclxuICAgICAgICAgICAgICAgIHBsYWNlSG9sZGVyOiAnJyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICcnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY2xvbmVEZWVwKHRoaXMuZmlsdGVyRGF0YSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgZ2V0UGFuZWxQb3NpdGlvbigkZXZlbnQpIHtcclxuICAgICAgICBsZXQgeCA9ICRldmVudC5wYWdlWCAtIDMzO1xyXG4gICAgICAgIGNvbnN0IHkgPSAkZXZlbnQucGFnZVkgKyAgOTtcclxuICAgICAgICBjb25zdCB0YXJnZXRSZWN0ID0gJGV2ZW50LnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBsZXQgbW92ZUFycm93ID0gMDtcclxuICAgICAgICBpZiAod2luZG93LmlubmVyV2lkdGggLSB4IDwgMzgwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSAzODAgLSAod2luZG93LmlubmVyV2lkdGggLSB4KTtcclxuICAgICAgICAgICAgeCA9IHggLSBpIC0gMjA7XHJcbiAgICAgICAgICAgIG1vdmVBcnJvdyA9IHRhcmdldFJlY3QubGVmdCAtIHg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4geyB4LCB5LCBtb3ZlQXJyb3d9O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGlkZUZpbHRlclBhbmVsKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmZpbHRlclBhbmVsUmVmKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyUGFuZWxTZXJ2aWNlLmhpZGVQYW5lbCgpO1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlclBhbmVsUmVmID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmZpbHRlckRhdGEgfHwgICh0aGlzLmZpbHRlckRhdGEuY29udHJvbC5jb250cm9sdHlwZSA9PT0gJ2Jvb2wtY2hlY2snID8gIXRoaXMuZmlsdGVyRGF0YS52YWx1ZS52YWx1ZSA6ICF0aGlzLmZpbHRlckRhdGEudmFsdWVUZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIucmVtb3ZlQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjbGVhckNvbHVtbkZpbHRlcihlKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJEYXRhID0gbnVsbDtcclxuICAgICAgICB0aGlzLmhpZGVGaWx0ZXJQYW5lbCgpO1xyXG4gICAgICAgIHRoaXMuc21hcnRGaWx0ZXJTZXIucmVtb3ZlQ29uZGl0aW9uKGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3dGaWx0ZXJQYW5lbCgkZXZlbnQpIHtcclxuICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2FjdGl2ZScpO1xyXG4gICAgICAgIGNvbnN0IHsgeCwgeSwgbW92ZUFycm93IH0gPSB0aGlzLmdldFBhbmVsUG9zaXRpb24oJGV2ZW50KTtcclxuICAgICAgICB0aGlzLmZpbHRlclBhbmVsUmVmID0gdGhpcy5maWx0ZXJQYW5lbFNlcnZpY2Uuc2hvd1BhbmVsKHtcclxuICAgICAgICAgICAgbGVmdDogeCxcclxuICAgICAgICAgICAgdG9wOiB5LFxyXG4gICAgICAgICAgICBpdGVtOiB0aGlzLmdldEZpbHRlckRhdGEoKSxcclxuICAgICAgICAgICAgcGFuZWxFeHRlbmRUZW1wbGF0ZTogdGhpcy5jb2x1bW4uc29ydGFibGUgPyB0aGlzLnNvcnRUbXAgOiBudWxsLFxyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2VLZXk6ICdzbWFydGZpbHRlcl8nICsgdGhpcy5kZy5kZ3MuY3JlYXRlQ29uZmlnS2V5KHRoaXMuZGcuaWQpLFxyXG4gICAgICAgICAgICB0YXJnZXQ6ICRldmVudC50YXJnZXRcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKG1vdmVBcnJvdykge1xyXG4gICAgICAgICAgICBjb25zdCBhcnJvd0VsID0gdGhpcy5maWx0ZXJQYW5lbFJlZlsnZWwnXS5xdWVyeVNlbGVjdG9yKCcuZi1maWx0ZXItcGFuZWwtYXJyb3cnKTtcclxuICAgICAgICAgICAgaWYgKGFycm93RWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKGFycm93RWwsICdsZWZ0JywgYCR7bW92ZUFycm93fXB4YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZmlsdGVyUGFuZWxSZWYuaGlkZVBhbmVsLnN1YnNjcmliZShlID0+IHtcclxuICAgICAgICAgICAgdGhpcy5oaWRlRmlsdGVyUGFuZWwoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5maWx0ZXJQYW5lbFJlZi5maWx0ZXJTdWJtaXQuc3Vic2NyaWJlKGUgPT4ge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGUuZmlsdGVyICYmIGUuZmlsdGVyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJEYXRhID0gZS5pdGVtIHx8IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVGaWx0ZXJQYW5lbCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zbWFydEZpbHRlclNlci5maWx0ZXJDb25kaXRpb25DaGFuZ2VkKHsgY29uZGl0aW9uczogZS5maWx0ZXIsIGNvbnRyb2xEYXRhOiBlLml0ZW0gLCBmcm9tOiAncGFuZWwnfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQ29sdW1uRmlsdGVyKGUuaXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5maWx0ZXJQYW5lbFJlZi5jbGVhckZpbHRlci5zdWJzY3JpYmUoKGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyQ29sdW1uRmlsdGVyKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcclxuICAgIG9uQ2xpY2soJGV2ZW50KSB7XHJcbiAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zaG93RmlsdGVyUGFuZWwoJGV2ZW50KTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgb25Tb3J0KCRldmVudCwgb3JkZXIpIHtcclxuICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbHVtbi5vcmRlciA9PT0gb3JkZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5jb2x1bW4ub3JkZXIgPSAnJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbi5vcmRlciA9IG9yZGVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc29ydE5hbWUgPSB0aGlzLmRnLnNvcnROYW1lO1xyXG4gICAgICAgIGNvbnN0IHNvcnRPcmRlciA9IHRoaXMuZGcuc29ydE9yZGVyO1xyXG4gICAgICAgIGxldCBzb3J0RmllbGRzID0gW107XHJcbiAgICAgICAgbGV0IHNvcnRPcmRlcnMgPSBbXTtcclxuICAgICAgICBpZiAoc29ydE5hbWUpIHtcclxuICAgICAgICAgICAgc29ydEZpZWxkcyA9IHNvcnROYW1lLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIHNvcnRPcmRlcnMgPSBzb3J0T3JkZXIuc3BsaXQoJywnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBuZXdPcmRlciA9ICB0aGlzLmNvbHVtbi5vcmRlcjtcclxuICAgICAgICBjb25zdCBpID0gc29ydEZpZWxkcy5maW5kSW5kZXgobiA9PiBuID09PSB0aGlzLmNvbHVtbi5maWVsZCk7XHJcbiAgICAgICAgaWYgKGkgPj0gMCkge1xyXG4gICAgICAgICAgICBpZiAobmV3T3JkZXIgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdPcmRlciA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIHNvcnRGaWVsZHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgc29ydE9yZGVycy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzb3J0T3JkZXJzW2ldID0gbmV3T3JkZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kZy5tdWx0aVNvcnQpIHtcclxuICAgICAgICAgICAgICAgIHNvcnRGaWVsZHMucHVzaCh0aGlzLmNvbHVtbi5maWVsZCk7XHJcbiAgICAgICAgICAgICAgICBzb3J0T3JkZXJzLnB1c2gobmV3T3JkZXIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc29ydEZpZWxkcyA9IFt0aGlzLmNvbHVtbi5maWVsZF07XHJcbiAgICAgICAgICAgICAgICBzb3J0T3JkZXJzID0gW25ld09yZGVyXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5oaWRlRmlsdGVyUGFuZWwoKTtcclxuXHJcblxyXG4gICAgICAgIHRoaXMuZGcuc29ydE5hbWUgPSBzb3J0RmllbGRzLmpvaW4oJywnKTtcclxuICAgICAgICB0aGlzLmRnLnNvcnRPcmRlciA9IHNvcnRPcmRlcnMuam9pbignLCcpO1xyXG4gICAgICAgIHRoaXMuZGcuZGZzLnNldFNvcnRJbmZvKHRoaXMuZGcuc29ydE5hbWUsIHRoaXMuZGcuc29ydE9yZGVyKTtcclxuXHJcbiAgICAgICAgdGhpcy5kZy5iZWZvcmVTb3J0Q29sdW1uKHRoaXMuZGcuc29ydE5hbWUsIHRoaXMuZGcuc29ydE9yZGVyLCB0aGlzLmRnKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRnLm9uQ29sdW1uU29ydGVkKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl19