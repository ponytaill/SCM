import { Injectable, Optional } from '@angular/core';
import { empty } from 'rxjs';
import { FormMessageService } from './form-message.service';
import { FormNotifyService } from './form-notify.service';
import { LanguageService } from './languag.service';
/**
 * 数据检查服务
 */
class DataCheckService {
    constructor(messageService, formNotifyService, languageService) {
        this.messageService = messageService;
        this.formNotifyService = formNotifyService;
        this.languageService = languageService;
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 编辑前检查
     */
    checkBeforeEdit(idToEdit) {
        const ifSkipCheck = this.ifSkipCheck(idToEdit);
        if (ifSkipCheck === true) {
            return true;
        }
        if (idToEdit) {
            return true;
        }
        this.formNotifyService.warning(this.languageService.plsSelectEditData, { hideTitle: true });
        return empty();
    }
    /**
     * 查看前检查
     */
    checkBeforeView(idToView) {
        const ifSkipCheck = this.ifSkipCheck(idToView);
        if (ifSkipCheck === true) {
            return true;
        }
        if (idToView) {
            return true;
        }
        this.formNotifyService.warning(this.languageService.plsSelectViewData, { hideTitle: true });
        return empty();
    }
    /**
     * 老表单跳过检查
     * @todo：待删除，兼容老表单
     */
    ifSkipCheck(id) {
        const context = this['context'];
        const params = context.command.params;
        // 表单没有重新保存过的情况
        if (params.hasOwnProperty('idToEdit') === false && params.hasOwnProperty('idToView') === false) {
            return true;
        }
        // 保存过但没有填参数的情况
        // @todo: 会漏掉空串的情况，目前主键解析的返回值是undefined，暂不考虑空串场景
        if (id === '') {
            return true;
        }
        return false;
    }
}
DataCheckService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DataCheckService.ctorParameters = () => [
    { type: FormMessageService },
    { type: FormNotifyService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
export { DataCheckService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1jaGVjay5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2RhdGEtY2hlY2suc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQWMsS0FBSyxFQUFNLE1BQU0sTUFBTSxDQUFDO0FBRTdDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVwRDs7R0FFRztBQUNILE1BQ00sZ0JBQWdCO0lBRXBCLFlBQ1UsY0FBa0MsRUFDbEMsaUJBQW9DLEVBQ3hCLGVBQWdDO1FBRjVDLG1CQUFjLEdBQWQsY0FBYyxDQUFvQjtRQUNsQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3hCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUVwRCxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN6QixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN0RDtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNJLGVBQWUsQ0FBQyxRQUFnQjtRQUVyQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9DLElBQUksV0FBVyxLQUFLLElBQUksRUFBRTtZQUN4QixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxRQUFRLEVBQUU7WUFDWixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDNUYsT0FBTyxLQUFLLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUQ7O09BRUc7SUFDSSxlQUFlLENBQUMsUUFBZ0I7UUFDckMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvQyxJQUFJLFdBQVcsS0FBSyxJQUFJLEVBQUU7WUFDeEIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksUUFBUSxFQUFFO1lBQ1osT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzVGLE9BQU8sS0FBSyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUNEOzs7T0FHRztJQUNJLFdBQVcsQ0FBQyxFQUFVO1FBQzNCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQW1CLENBQUM7UUFDbEQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFFdEMsZUFBZTtRQUNmLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsS0FBSyxLQUFLLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsS0FBSyxLQUFLLEVBQUU7WUFDOUYsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELGVBQWU7UUFDZixnREFBZ0Q7UUFDaEQsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2IsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7O1lBbkVGLFVBQVU7Ozs7WUFQRixrQkFBa0I7WUFDbEIsaUJBQWlCO1lBQ2pCLGVBQWUsdUJBV25CLFFBQVE7O0FBZ0ViLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGVtcHR5LCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ29tbWFuZENvbnRleHQgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XG5pbXBvcnQgeyBGb3JtTWVzc2FnZVNlcnZpY2UgfSBmcm9tICcuL2Zvcm0tbWVzc2FnZS5zZXJ2aWNlJztcbmltcG9ydCB7IEZvcm1Ob3RpZnlTZXJ2aWNlIH0gZnJvbSAnLi9mb3JtLW5vdGlmeS5zZXJ2aWNlJztcbmltcG9ydCB7IExhbmd1YWdlU2VydmljZSB9IGZyb20gJy4vbGFuZ3VhZy5zZXJ2aWNlJztcblxuLyoqXG4gKiDmlbDmja7mo4Dmn6XmnI3liqFcbiAqL1xuQEluamVjdGFibGUoKVxuY2xhc3MgRGF0YUNoZWNrU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBtZXNzYWdlU2VydmljZTogRm9ybU1lc3NhZ2VTZXJ2aWNlLFxuICAgIHByaXZhdGUgZm9ybU5vdGlmeVNlcnZpY2U6IEZvcm1Ob3RpZnlTZXJ2aWNlLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBMYW5ndWFnZVNlcnZpY2UsXG4gICkge1xuICAgIGlmICghdGhpcy5sYW5ndWFnZVNlcnZpY2UpIHtcbiAgICAgIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlID0gTGFuZ3VhZ2VTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOe8lui+keWJjeajgOafpVxuICAgKi9cbiAgcHVibGljIGNoZWNrQmVmb3JlRWRpdChpZFRvRWRpdDogc3RyaW5nKTogYW55IHtcblxuICAgIGNvbnN0IGlmU2tpcENoZWNrID0gdGhpcy5pZlNraXBDaGVjayhpZFRvRWRpdCk7XG4gICAgaWYgKGlmU2tpcENoZWNrID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaWRUb0VkaXQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZS5wbHNTZWxlY3RFZGl0RGF0YSwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XG4gICAgcmV0dXJuIGVtcHR5KCk7XG4gIH1cblxuICAvKipcbiAgICog5p+l55yL5YmN5qOA5p+lXG4gICAqL1xuICBwdWJsaWMgY2hlY2tCZWZvcmVWaWV3KGlkVG9WaWV3OiBzdHJpbmcpOiBhbnkge1xuICAgIGNvbnN0IGlmU2tpcENoZWNrID0gdGhpcy5pZlNraXBDaGVjayhpZFRvVmlldyk7XG4gICAgaWYgKGlmU2tpcENoZWNrID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaWRUb1ZpZXcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZS5wbHNTZWxlY3RWaWV3RGF0YSwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XG4gICAgcmV0dXJuIGVtcHR5KCk7XG4gIH1cbiAgLyoqXG4gICAqIOiAgeihqOWNlei3s+i/h+ajgOafpVxuICAgKiBAdG9kb++8muW+heWIoOmZpO+8jOWFvOWuueiAgeihqOWNlVxuICAgKi9cbiAgcHVibGljIGlmU2tpcENoZWNrKGlkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCBjb250ZXh0ID0gdGhpc1snY29udGV4dCddIGFzIENvbW1hbmRDb250ZXh0O1xuICAgIGNvbnN0IHBhcmFtcyA9IGNvbnRleHQuY29tbWFuZC5wYXJhbXM7XG5cbiAgICAvLyDooajljZXmsqHmnInph43mlrDkv53lrZjov4fnmoTmg4XlhrVcbiAgICBpZiAocGFyYW1zLmhhc093blByb3BlcnR5KCdpZFRvRWRpdCcpID09PSBmYWxzZSAmJiBwYXJhbXMuaGFzT3duUHJvcGVydHkoJ2lkVG9WaWV3JykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyDkv53lrZjov4fkvYbmsqHmnInloavlj4LmlbDnmoTmg4XlhrVcbiAgICAvLyBAdG9kbzog5Lya5ryP5o6J56m65Liy55qE5oOF5Ya177yM55uu5YmN5Li76ZSu6Kej5p6Q55qE6L+U5Zue5YC85pivdW5kZWZpbmVk77yM5pqC5LiN6ICD6JmR56m65Liy5Zy65pmvXG4gICAgaWYgKGlkID09PSAnJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCB7IERhdGFDaGVja1NlcnZpY2UgfTtcbiJdfQ==