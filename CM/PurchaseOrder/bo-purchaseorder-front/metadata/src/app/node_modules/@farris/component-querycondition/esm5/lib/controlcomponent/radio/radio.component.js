/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/radio/radio.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Injector, EventEmitter, Output, HostBinding } from '@angular/core';
import { QueryCondition } from '../../entity/querycondition';
import { SolutionService } from '../../service/solution.service';
var RadioComponent = /** @class */ (function () {
    function RadioComponent(injector) {
        this.injector = injector;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        this.cls = true;
        this.solutionService = this.injector.get(SolutionService);
    }
    Object.defineProperty(RadioComponent.prototype, "item", {
        get: /**
         * @return {?}
         */
        function () {
            return this._item;
        },
        set: /**
         * @param {?} nr
         * @return {?}
         */
        function (nr) {
            this._item = nr;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    RadioComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            var isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field == _this.item.fieldCode; }));
            if (isChange) {
                this.radioValue = ((/** @type {?} */ (this.item.value))).getOriginalValue();
            }
        }
    };
    /**
     * @return {?}
     */
    RadioComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.radioControl = (/** @type {?} */ (this.item.control));
        this.radioValue = ((/** @type {?} */ (this.item.value))).getOriginalValue();
        this.testId = this.solutionService.getGuid();
        this.showLabel = this.radioControl.showLabel;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    RadioComponent.prototype.valueChanged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._item.value.setOriginalValue(event);
        this.conditionChange.emit();
    };
    /**
     * @param {?} field
     * @return {?}
     */
    RadioComponent.prototype.getConditionItemTitle = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    RadioComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-solution-radio',
                    template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group qradio-group\"  [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\" *ngIf=\"showLabel\">{{item.fieldName}}</span>\r\n        </label>\r\n        <farris-radiogroup\r\n            class=\"f-solution-radio-group\"\r\n            [(ngModel)]=\"radioValue\"\r\n            [data]=\"radioControl.enumValues\"\r\n            [horizontal]=\"radioControl.horizontal\"\r\n            [disabled]=\"item.readonly\"\r\n            (changeValue)=\"valueChanged($event)\"\r\n            id=\"{{testId}}\"\r\n        ></farris-radiogroup>\r\n    </div>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    RadioComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    RadioComponent.propDecorators = {
        item: [{ type: Input }],
        changeFields: [{ type: Input }],
        conditionChange: [{ type: Output, args: ['conditionChange',] }],
        cls: [{ type: HostBinding, args: ['class.f-solution-radio-group-wrapper',] }]
    };
    return RadioComponent;
}());
export { RadioComponent };
if (false) {
    /** @type {?} */
    RadioComponent.prototype._item;
    /** @type {?} */
    RadioComponent.prototype.solutionService;
    /** @type {?} */
    RadioComponent.prototype.radioControl;
    /** @type {?} */
    RadioComponent.prototype.radioValue;
    /** @type {?} */
    RadioComponent.prototype.testId;
    /** @type {?} */
    RadioComponent.prototype.showLabel;
    /**
     * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
     * @type {?}
     */
    RadioComponent.prototype.changeFields;
    /** @type {?} */
    RadioComponent.prototype.conditionChange;
    /** @type {?} */
    RadioComponent.prototype.cls;
    /**
     * @type {?}
     * @private
     */
    RadioComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb24vIiwic291cmNlcyI6WyJsaWIvY29udHJvbGNvbXBvbmVudC9yYWRpby9yYWRpby5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNoSSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBSWpFO0lBK0JJLHdCQUFvQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVOzs7O1FBTjdCLGlCQUFZLEdBQWtCLEVBQUUsQ0FBQztRQUVmLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVYLFFBQUcsR0FBRyxJQUFJLENBQUM7UUFHN0QsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBbkJELHNCQUNJLGdDQUFJOzs7O1FBR1I7WUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDdEIsQ0FBQzs7Ozs7UUFORCxVQUNTLEVBQWtCO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLENBQUM7OztPQUFBOzs7OztJQWtCRCxvQ0FBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFBbEMsaUJBT0M7UUFORyxJQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsWUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFdBQVcsRUFBRTs7Z0JBQ2xHLFFBQVEsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUk7Ozs7WUFBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssSUFBSSxLQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBNUIsQ0FBNEIsRUFBQztZQUNqRyxJQUFHLFFBQVEsRUFBQztnQkFDUixJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsbUJBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQWMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7YUFDeEU7U0FDSjtJQUNMLENBQUM7Ozs7SUFFRCxpQ0FBUTs7O0lBQVI7UUFDRyxJQUFJLENBQUMsWUFBWSxHQUFHLG1CQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFnQixDQUFDO1FBQ3RELElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxtQkFBQSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBYyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNyRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQztJQUNoRCxDQUFDOzs7OztJQUVELHFDQUFZOzs7O0lBQVosVUFBYSxLQUFVO1FBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEMsQ0FBQzs7Ozs7SUFFRCw4Q0FBcUI7Ozs7SUFBckIsVUFBc0IsS0FBb0I7UUFDdEMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdELENBQUM7O2dCQTFESixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsaTZCQUFxQztpQkFDeEM7Ozs7Z0JBVDZDLFFBQVE7Ozt1QkFvQmpELEtBQUs7K0JBV0wsS0FBSztrQ0FFTCxNQUFNLFNBQUMsaUJBQWlCO3NCQUV4QixXQUFXLFNBQUMsc0NBQXNDOztJQThCdkQscUJBQUM7Q0FBQSxBQTNERCxJQTJEQztTQXREWSxjQUFjOzs7SUFFdkIsK0JBQXNCOztJQUN0Qix5Q0FBaUM7O0lBQ2pDLHNDQUEyQjs7SUFDM0Isb0NBQWdCOztJQUNoQixnQ0FBZTs7SUFDZixtQ0FBbUI7Ozs7O0lBYW5CLHNDQUEwQzs7SUFFMUMseUNBQWdFOztJQUVoRSw2QkFBZ0U7Ozs7O0lBRXBELGtDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCwgT25DaGFuZ2VzLCBJbmplY3RvciwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIEhvc3RCaW5kaW5nLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uIH0gZnJvbSAnLi4vLi4vZW50aXR5L3F1ZXJ5Y29uZGl0aW9uJztcclxuaW1wb3J0IHsgU29sdXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZS9zb2x1dGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUmFkaW9Db250cm9sIH0gZnJvbSAnLi4vLi4vZW50aXR5L2NvbnRyb2x0eXBlL3JhZGlvL3JhZGlvLWNvbnRyb2wnO1xyXG5pbXBvcnQgeyBSYWRpb1ZhbHVlIH0gZnJvbSAnLi4vLi4vZW50aXR5L2NvbmRpdGlvbnZhbHVlL3JhZGlvLXZhbHVlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdhcHAtc29sdXRpb24tcmFkaW8nLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL3JhZGlvLmNvbXBvbmVudC5odG1sJyxcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBSYWRpb0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuXHJcbiAgICBfaXRlbTogUXVlcnlDb25kaXRpb247XHJcbiAgICBzb2x1dGlvblNlcnZpY2U6IFNvbHV0aW9uU2VydmljZTtcclxuICAgIHJhZGlvQ29udHJvbDogUmFkaW9Db250cm9sO1xyXG4gICAgcmFkaW9WYWx1ZTogYW55O1xyXG4gICAgdGVzdElkOiBzdHJpbmc7XHJcbiAgICBzaG93TGFiZWw6IGJvb2xlYW47XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHNldCBpdGVtKG5yOiBRdWVyeUNvbmRpdGlvbil7XHJcbiAgICAgICAgdGhpcy5faXRlbSA9IG5yO1xyXG4gICAgfVxyXG4gICAgZ2V0IGl0ZW0oKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXRlbTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDmn5DkuKrlrZfmrrXlj5HnlJ/lgLzlj5jljJbkuovku7bml7bvvIzpnIDopoHlkIzmraXmuIXnqbrnmoTlrZfmrrXvvIzlj6/og73kuI3mmK/lvZPliY3lrZfmrrVcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgY2hhbmdlRmllbGRzOiBBcnJheTxzdHJpbmc+ID0gW107XHJcblxyXG4gICAgQE91dHB1dCgnY29uZGl0aW9uQ2hhbmdlJykgY29uZGl0aW9uQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZi1zb2x1dGlvbi1yYWRpby1ncm91cC13cmFwcGVyJykgY2xzID0gdHJ1ZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gICAgICAgdGhpcy5zb2x1dGlvblNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChTb2x1dGlvblNlcnZpY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgICAgICBpZihjaGFuZ2VzWydjaGFuZ2VGaWVsZHMnXSAmJiBjaGFuZ2VzWydjaGFuZ2VGaWVsZHMnXS5jdXJyZW50VmFsdWUgJiYgIWNoYW5nZXNbJ2NoYW5nZUZpZWxkcyddLmZpcnN0Q2hhbmdlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzQ2hhbmdlID0gY2hhbmdlc1snY2hhbmdlRmllbGRzJ10uY3VycmVudFZhbHVlLnNvbWUoZmllbGQgPT4gZmllbGQgPT0gdGhpcy5pdGVtLmZpZWxkQ29kZSk7XHJcbiAgICAgICAgICAgIGlmKGlzQ2hhbmdlKXtcclxuICAgICAgICAgICAgICAgIHRoaXMucmFkaW9WYWx1ZSA9ICh0aGlzLml0ZW0udmFsdWUgYXMgUmFkaW9WYWx1ZSkuZ2V0T3JpZ2luYWxWYWx1ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgdGhpcy5yYWRpb0NvbnRyb2wgPSB0aGlzLml0ZW0uY29udHJvbCBhcyBSYWRpb0NvbnRyb2w7XHJcbiAgICAgICB0aGlzLnJhZGlvVmFsdWUgPSAodGhpcy5pdGVtLnZhbHVlIGFzIFJhZGlvVmFsdWUpLmdldE9yaWdpbmFsVmFsdWUoKTtcclxuICAgICAgIHRoaXMudGVzdElkID0gdGhpcy5zb2x1dGlvblNlcnZpY2UuZ2V0R3VpZCgpO1xyXG4gICAgICAgdGhpcy5zaG93TGFiZWwgPSB0aGlzLnJhZGlvQ29udHJvbC5zaG93TGFiZWw7XHJcbiAgICB9XHJcblxyXG4gICAgdmFsdWVDaGFuZ2VkKGV2ZW50OiBhbnkpe1xyXG4gICAgICAgIHRoaXMuX2l0ZW0udmFsdWUuc2V0T3JpZ2luYWxWYWx1ZShldmVudCk7XHJcbiAgICAgICAgdGhpcy5jb25kaXRpb25DaGFuZ2UuZW1pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENvbmRpdGlvbkl0ZW1UaXRsZShmaWVsZDpRdWVyeUNvbmRpdGlvbil7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc29sdXRpb25TZXJ2aWNlLmdldENvbmRpdGlvbkl0ZW1UaXRsZShmaWVsZCk7XHJcbiAgICB9XHJcbn0iXX0=