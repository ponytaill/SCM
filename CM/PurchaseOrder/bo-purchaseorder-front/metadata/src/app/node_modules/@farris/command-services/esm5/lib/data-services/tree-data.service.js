import * as tslib_1 from "tslib";
import { Injectable, Optional } from '@angular/core';
import { of, empty, EMPTY } from 'rxjs';
import { tap, switchMap, concatMap } from 'rxjs/operators';
import { FrameContext, FieldMetadataUtil } from '@farris/devkit';
import { BefRepositoryUtil } from '@farris/bef';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { FormNotifyService } from '../form-notify.service';
import { LanguageService } from '../languag.service';
import { FormMessageService } from '../form-message.service';
import { FormErrorService } from '../error/form-error.service';
import { BaseDataService } from './base-data.service';
import { TreeUtilFactory } from './tree-table/util/tree-util-factory';
import { TreeRepositoryFactory } from './tree-table/repository/tree-repository-factory';
// tslint:disable: no-string-literal
/**
 * 树数据服务
 */
var TreeDataService = /** @class */ (function (_super) {
    tslib_1.__extends(TreeDataService, _super);
    /**
     * 构造函数
     */
    function TreeDataService(frameContext, messageService, loadingService, notifyService, errorService, languageService) {
        var _this = _super.call(this, frameContext) || this;
        _this.messageService = messageService;
        _this.loadingService = loadingService;
        _this.notifyService = notifyService;
        _this.errorService = errorService;
        _this.languageService = languageService;
        if (!languageService) {
            _this.languageService = LanguageService.getInstance();
        }
        return _this;
    }
    Object.defineProperty(TreeDataService.prototype, "hierarchyInfoKey", {
        /**
         * 分级信息字段名
         */
        get: function () {
            return this.virtualRootFrameContext.getParam('hierarchyInfoKey');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeDataService.prototype, "virtualRootFrameContext", {
        get: function () {
            return this.frameContext.getVirtualRootFrameContext();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 加载数据
     */
    TreeDataService.prototype.load = function (filters, sorts) {
        var _this = this;
        var filtersArray = this.parseConditions(filters);
        var sortsArray = this.parseConditions(sorts);
        var correctSelectedNode = this.repository.entityCollection.count() === 0;
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var query$ = this.repository.getEntities(filtersArray, sortsArray, null, null);
        return query$.pipe(tap(function () {
            // 纠正选中节点
            if (correctSelectedNode === true) {
                var hierarchyType = _this.getHierarchyType();
                var treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
                if (treeNodeUtil !== null) {
                    treeNodeUtil.selectFirstRootNode(_this.bindingData, _this.hierarchyInfoKey);
                }
            }
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.errorService.exception(_this.languageService.loadFailed, error);
        }));
    };
    /**
     * 分层加载数据
     */
    TreeDataService.prototype.loadByLevel = function (filters, sorts, frozenCurrentRow) {
        var _this = this;
        this.setLoadByLevelState(filters, sorts);
        var filtersArray = this.parseConditions(filters);
        var sortsArray = this.parseConditions(sorts);
        // const parentId = this.bindingData.list.currentId;
        var parentId = this.getIdToExpand();
        var correctSelectedNode = this.repository.entityCollection.count() === 0;
        if (frozenCurrentRow === undefined) {
            frozenCurrentRow = false;
        }
        if (typeof frozenCurrentRow !== 'boolean') {
            frozenCurrentRow = frozenCurrentRow === 'true' ? true : false;
        }
        var hierarchyType = this.getHierarchyType();
        var repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (repository === null) {
            return empty();
        }
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        // 构造分页信息
        var pagination = this.buildPaginationInfo(parentId);
        var reload = this.frameContext.params.get('_RELOAD_CHILDREN_') || false;
        var query$ = repository.loadByParentId(this.repository, this.hierarchyInfoKey, parentId, filtersArray, sortsArray, frozenCurrentRow, pagination, this.frameContext, reload);
        return query$.pipe(tap(function (entities) {
            _this.frameContext.params.delete('_RELOAD_CHILDREN_');
            // 纠正选中节点
            if (correctSelectedNode === true) {
                var treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
                if (treeNodeUtil !== null) {
                    treeNodeUtil.selectFirstRootNode(_this.bindingData, _this.hierarchyInfoKey);
                }
            }
            var currentRowId = _this.bindingData.list.currentItem.primaryKeyValue;
            if (frozenCurrentRow) {
                // 如果上一次选中行为本次加载数据中的一条，则应该重新选中该行
                var containsCurrentRow = entities.find(function (item) { return item.primaryValue === currentRowId; });
                if (containsCurrentRow) {
                    _this.setCurrentId(currentRowId);
                }
                // 原来的当前行不在已经加载的数据中，如展开到第三级，将第三级的某行设为当前行，全部收起，展开第一级
                if (!_this.repository.entityCollection.getEntityById(currentRowId)) {
                    var firstChildId = entities && Array.isArray(entities) && entities.length > 0 && entities[0].primaryValue || null;
                    if (firstChildId) {
                        _this.setCurrentId(firstChildId);
                    }
                }
            }
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.errorService.exception(_this.languageService.loadFailed, error);
        }));
    };
    /**
     * 加载完整树
     * @param virtualPropertyName 虚拟字段
     * @param fullTreeType 是否是完整树加载 0：完整树 1：部分树
     * @param loadType 是否分级加载 0：全部加载 1：分级加载
     * @param filter 过滤条件
     * @param frozenCurrentRow 冻结当前行
     */
    TreeDataService.prototype.loadFullTree = function (virtualPropertyName, fullTreeType, loadType, filters, frozenCurrentRow) {
        var _this = this;
        if (typeof fullTreeType !== 'string') {
            throw new Error('ArgumentError: fullTreeType 不能为空且必须为字符串。');
        }
        if (typeof loadType !== 'string') {
            throw new Error('ArgumentError: loadType 不能为空且必须为字符串。');
        }
        if (frozenCurrentRow === undefined) {
            frozenCurrentRow = false;
        }
        if (typeof frozenCurrentRow !== 'boolean') {
            frozenCurrentRow = frozenCurrentRow === 'true' ? true : false;
        }
        var virtualRootFrameContext = this.virtualRootFrameContext;
        // 还原上次设置的结果集
        virtualRootFrameContext.params.delete('_DEVKIT_expandRowIds');
        virtualRootFrameContext.params.delete('_DEVKIT_selectedRowId');
        virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', null);
        var filtersArray = this.parseConditions(filters);
        var parentId = this.getIdToExpand();
        var correctSelectedNode = this.repository.entityCollection.count() === 0;
        var hierarchyType = this.getHierarchyType();
        var repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (repository === null) {
            return EMPTY;
        }
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var context = {
            frameContext: this.frameContext,
            frozenCurrentRow: frozenCurrentRow
        };
        // tslint:disable-next-line: max-line-length
        var query$ = repository.loadFullTree(this.repository, this.hierarchyInfoKey, parentId, virtualPropertyName, fullTreeType, loadType, filtersArray, context);
        return query$.pipe(tap(function (entities) {
            var selectedRowId = virtualRootFrameContext.params.get('_DEVKIT_selectedRowId');
            // 纠正选中节点
            if (correctSelectedNode === true || !selectedRowId) {
                var treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
                if (treeNodeUtil !== null) {
                    treeNodeUtil.selectFirstRootNode(_this.bindingData, _this.hierarchyInfoKey);
                }
            }
            var currentRowId = _this.bindingData.list.currentItem.primaryKeyValue;
            if (frozenCurrentRow) {
                // 如果上一次选中行为本次加载数据中的一条，则应该重新选中该行
                var containsCurrentRow = entities.find(function (item) { return item.primaryValue === currentRowId; });
                if (containsCurrentRow) {
                    _this.setCurrentId(currentRowId);
                }
                // 原来的当前行不在已经加载的数据中，如展开到第三级，将第三级的某行设为当前行，全部收起，展开第一级
                if (!_this.repository.entityCollection.getEntityById(currentRowId) && entities && entities.length > 0) {
                    var firstChildId = entities && Array.isArray(entities) && entities.length > 0 && entities[0].primaryValue || null;
                    if (firstChildId) {
                        _this.setCurrentId(firstChildId);
                    }
                }
            }
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.errorService.exception(_this.languageService.loadFailed, error);
        }));
    };
    /**
     * 获取最新展开的节点
     */
    TreeDataService.prototype.getIdToExpand = function () {
        var expandNodes = this.virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
        var idToExpand = expandNodes.pop();
        this.virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
        return idToExpand;
    };
    /**
     * 设置最新展开的节点
     */
    TreeDataService.prototype.setIdToExpand = function (idToExpand) {
        var expandNodes = this.virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
        expandNodes.push(idToExpand);
        this.virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
    };
    /**
     * 解析过滤条件
     */
    TreeDataService.prototype.parseConditions = function (conditions) {
        var conditionsString = (!conditions || conditions === '') ? '[]' : conditions;
        return JSON.parse(conditionsString);
    };
    /**
     * 新增同级
     */
    TreeDataService.prototype.addSibling = function (id) {
        var _this = this;
        // 设计时id的获取改为从命令参数上获取，但设计时没有参数必填检查，
        // 如果打开表单保存了（即更新了最新的命令构件），但没有配置该参数，可能会传递过来一个空值，
        // 为了兼容此情况，使用当前行id作为id的值
        id = id ? id : this.bindingData.list.currentId;
        // 参数检查
        if (!id || id === 'undefined') {
            id = '';
        }
        // 记录最近一次修改的数据id
        var lastModifiedId = this.bindingData.list.currentId;
        // 获取分级方式
        var hierarchyType = this.getHierarchyType();
        // 执行取数
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (!repository) {
            // 错误的分级码
            throw new Error(this.languageService['errorHierarchyKey']);
        }
        var result$ = repository.addSibling(this.repository, id);
        return result$.pipe(tap(function () {
            _this.virtualRootFrameContext.setParam('IS_ADD', true);
            _this.virtualRootFrameContext.setParam('LAST_MODIFIED_ID', lastModifiedId);
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.errorService.exception(_this.languageService.addSiblingFailed, error);
        }));
    };
    /**
     * 新增下级
     */
    TreeDataService.prototype.addChild = function (id) {
        var _this = this;
        // 原因同addSibling的修改
        id = id ? id : this.bindingData.list.currentId;
        // 参数检查
        if (!id) {
            // 请选择父节点
            this.notifyService.warning(this.languageService['plsSelectParentNode'], { hideTitle: true });
            return empty();
        }
        // 记录最近一次修改的数据id
        var lastModifiedId = this.bindingData.list.currentId;
        // 获取分级方式
        var hierarchyType = this.getHierarchyType();
        // 执行取数
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        // 新增的时候，要展开父节点
        this.setIdToExpand(id);
        var reloadChild$ = this.reloadByLevel();
        var repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (!repository) {
            throw new Error(this.languageService['errorHierarchyKey']);
        }
        var addChild$ = repository.addChild(this.repository, id);
        var result$ = reloadChild$.pipe(switchMap(function () {
            return addChild$;
        }), tap(function () {
            _this.virtualRootFrameContext.setParam('IS_ADD', true);
            _this.virtualRootFrameContext.setParam('LAST_MODIFIED_ID', lastModifiedId);
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.errorService.exception(_this.languageService.addChildFailed, error);
        }));
        return result$;
    };
    /**
     * 批量保存
     */
    TreeDataService.prototype.save = function () {
        var _this = this;
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'save' });
        }
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var save$ = this.repository.applyChanges();
        var result$ = save$.pipe(tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.notifyService.success(_this.languageService.saveSuccess, { hideTitle: true });
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.errorService.exception(_this.languageService.multiSaveFailed, error);
        }));
        return result$;
    };
    /**
     * 删除
     */
    TreeDataService.prototype.remove = function (id, successMsg) {
        var _this = this;
        // 原因同addSibling
        id = id ? id : this.bindingData.list.currentId;
        // 参数检查
        if (!id) {
            this.notifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return empty();
        }
        // 存在子节点不允许删除
        var treeNodesData = this.repository.entityCollection.toJSON();
        var hierarchyType = this.getHierarchyType();
        var treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
        if (treeNodeUtil === null) {
            return empty();
        }
        if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoKey, id) === true) {
            this.notifyService.warning(this.languageService['deleteChildFirst'], { hideTitle: true });
            return empty();
        }
        // 确认删除
        var action$ = this.messageService.question(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(function (result) {
            if (!result) {
                return empty();
            }
            // 获取删除后要设置的节点id
            var nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, _this.hierarchyInfoKey, id);
            // 执行删除
            var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
            var remove$ = _this.frameContext.repository.removeById(id);
            return remove$.pipe(tap(function () {
                // 设置选中节点
                treeNodeUtil.selectedNode(_this.bindingData, _this.hierarchyInfoKey, nextNodeId);
                _this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    _this.notifyService.success(successMsg, { hideTitle: true });
                }
                else {
                    _this.notifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.errorService.exception(_this.languageService.deleteFailed, error);
            }));
        }));
    };
    /**
     * 取消时检测未保存记录
     */
    TreeDataService.prototype.cancel = function () {
        var _this = this;
        // 没有变更时直接取消
        // const cardDataService = this.frameContext.injector.get<CardDataService>(CardDataService);
        var befRepository = this.repository;
        var hasUnsavedData = BefRepositoryUtil.isExistUnsaveData(befRepository);
        if (!hasUnsavedData) {
            return this._cancel();
        }
        var confirmResult$ = this.messageService.question(this.languageService['cancelWithoutSave']).pipe(switchMap(function (ifCancel) {
            if (ifCancel === false) {
                return EMPTY;
            }
            return _this._cancel();
        }));
        return confirmResult$;
    };
    /**
     * 构造分页信息
     * @param parentId parentId
     * @returns
     */
    TreeDataService.prototype.buildPaginationInfo = function (parentId) {
        var pagination = { pageIndex: 0, pageSize: 0 };
        var enableNodePagination = this.frameContext.params.get('enableNodePagination');
        if (!parentId) {
            // 一级分页
            var pageSize = this.repository.entityCollection.pageSize || 0;
            var pageIndex = this.repository.entityCollection.pageIndex || 0;
            // 启用了一级分页
            if (pageSize !== 0) {
                pagination.pageSize = pageSize;
                pagination.pageIndex = pageIndex;
            }
        }
        else {
            // 如果未启用节点分页或当前为顶级节点加载，则不处理节点分页
            if (enableNodePagination) {
                var nodePageSize = this.frameContext.params.get('nodePageSize') || 0;
                var nodePageIndex = this.frameContext.params.get("_NODE_" + parentId + "_PAGE_INDEX_");
                if (!nodePageIndex) {
                    this.frameContext.params.set("_NODE_" + parentId + "_PAGE_INDEX_", 1);
                    nodePageIndex = 1;
                }
                pagination.pageIndex = nodePageIndex;
                pagination.pageSize = nodePageSize;
            }
        }
        return pagination;
    };
    /**
     * 取消变更
     */
    TreeDataService.prototype._cancel = function () {
        var _this = this;
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var cancel$ = this.repository.cancelChanges();
        return cancel$.pipe(switchMap(function () {
            var isAdd = _this.virtualRootFrameContext.getParam('IS_ADD');
            var lastModifiedId = _this.virtualRootFrameContext.getParam('LAST_MODIFIED_ID');
            var currentId = _this.bindingData.list.currentId;
            if (isAdd === true) {
                _this.repository.entityCollection.removeEntityById(currentId);
                // 重置编辑状态
                _this.virtualRootFrameContext.setParam('IS_ADD', false);
                if (lastModifiedId) {
                    setTimeout(function () {
                        _this.bindingData.list.setCurrentId(lastModifiedId, true, true);
                    }, 0);
                }
                return of(null);
            }
            else {
                return _this.repository.updateById(currentId);
            }
        }), tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.errorService.exception(_this.languageService.cancelFailed, error);
        }));
    };
    /**
     * 检查是否存在下级节点（内部方法，请勿使用）
     */
    TreeDataService.prototype.hasChildNodes = function (id, treeNodesData) {
        var treeNodeUtil = this.getTreeNodeUtil();
        if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoKey, id) === true) {
            return true;
        }
        return false;
    };
    /**
     * 计算删除后的当前节点id（内部方法，请勿使用）
     */
    TreeDataService.prototype.getNextNodeIdAfterRemoving = function (idToRemove, treeNodesData) {
        var treeNodeUtil = this.getTreeNodeUtil();
        var nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoKey, idToRemove);
        return nextNodeId;
    };
    /**
     * 设置删除后的当前节点节点（内部方法，请勿使用）
     */
    TreeDataService.prototype.setNextNodeAfterRemoving = function (nextNodeId) {
        var treeNodeUtil = this.getTreeNodeUtil();
        treeNodeUtil.selectedNode(this.bindingData, this.hierarchyInfoKey, nextNodeId);
    };
    /**
     * 设置树的当前行(给完整树使用)
     * @param id id
     */
    TreeDataService.prototype.setCurrentId = function (id) {
        id = id || this.frameContext.getVirtualRootFrameContext().uiState['__DEVKIT__selectedRow'] || this.bindingData.list.currentItem.primaryKeyValue;
        this.frameContext.bindingData.list.setCurrentId(id, true, true, true);
    };
    /**
     * 选中树的第一个节点
     */
    TreeDataService.prototype.selectFirstRow = function () {
        var hierarchyType = this.getHierarchyType();
        var treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
        if (treeNodeUtil !== null) {
            treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);
        }
    };
    /**
     * 获取树节点工具类实例
     */
    TreeDataService.prototype.getTreeNodeUtil = function () {
        var hierarchyType = this.getHierarchyType();
        var treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
        if (treeNodeUtil === null) {
            throw new Error("\u4E0D\u652F\u6301" + hierarchyType + "\u7C7B\u578B\u7684\u5206\u7EA7");
        }
        return treeNodeUtil;
    };
    /**
     * 记录加载状态
     * @todo：待删除
     */
    TreeDataService.prototype.setLoadByLevelState = function (filters, sorts) {
        // @todo：临时处理
        this.virtualRootFrameContext.setParam('isLoadTreeByLevel', true);
        this.virtualRootFrameContext.setParam('loadTreeByLevelFilter', filters);
        this.virtualRootFrameContext.setParam('loadTreeByLevelSort', sorts);
    };
    /**
     * 展开当前节点
     * @todo：待删除
     */
    TreeDataService.prototype.reloadByLevel = function () {
        var isLoadByLevel = this.virtualRootFrameContext.getParam('isLoadTreeByLevel');
        if (isLoadByLevel === true) {
            var filters = this.virtualRootFrameContext.getParam('loadTreeByLevelFilter');
            var sorts = this.virtualRootFrameContext.getParam('loadTreeByLevelSort');
            return this.loadByLevel(filters, sorts);
        }
        return of([]);
    };
    TreeDataService.prototype.getHierarchyType = function () {
        var ngObjects = FieldMetadataUtil.getNgObjects(this.repository.entityType);
        var hierarchyInfoNgObjectInfo = ngObjects[this.hierarchyInfoKey];
        var hierarchyType = 'path'; // 分级码默认为path，兼容原表单
        if (hierarchyInfoNgObjectInfo.hasOwnProperty('hierarchyType') && hierarchyInfoNgObjectInfo['hierarchyType'] != null) {
            hierarchyType = hierarchyInfoNgObjectInfo['hierarchyType'];
        }
        if (hierarchyType == null || hierarchyType.length < 1) {
            // '分级码配置信息错误'
            throw new Error(this.languageService['incorrectHierarchyConfig']);
        }
        return hierarchyType;
    };
    Object.defineProperty(TreeDataService.prototype, "messagePipe", {
        /**
         * 获取根组件消息管道
         */
        get: function () {
            if (this.frameContext) {
                var appContext = this.frameContext.getFormAppContext() || null;
                if (appContext) {
                    return appContext.messagePipe || null;
                }
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    TreeDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TreeDataService.ctorParameters = function () { return [
        { type: FrameContext },
        { type: FormMessageService },
        { type: FormLoadingService },
        { type: FormNotifyService },
        { type: FormErrorService },
        { type: LanguageService, decorators: [{ type: Optional }] }
    ]; };
    return TreeDataService;
}(BaseDataService));
export { TreeDataService };
//# sourceMappingURL=data:application/json;base64,