import { Injectable } from '@angular/core';
import { AppContext, BindingData } from '@farris/devkit';
/**
 * 实体服务
 * @scope FrameComponent
 */
var BindingDataService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BindingDataService(bindingData, appContext) {
        this.bindingData = bindingData;
        this.appContext = appContext;
    }
    /**
     * 设置当前框架的当前行
     */
    BindingDataService.prototype.setCurrentId = function (id, frameId) {
        // let bindingData = this.bindingData;
        // if (frameId) {
        //   const targetContext = this.appContext.getFrameContext(frameId);
        //   bindingData = targetContext.bindingData;
        // }
        // bindingData.list.setCurrentId(id);
        // @todo：全部重新设置一遍
        var frameContexts = Array.from(this.appContext.getAllFrameContexts().values());
        frameContexts.forEach(function (frameContext) {
            var bindingData = frameContext.bindingData;
            bindingData.list.setCurrentId(id, true, false);
        });
    };
    BindingDataService.prototype.setCurrentRow = function (id, frameId) {
        var bindingData = this.bindingData;
        if (frameId) {
            var targetContext = this.appContext.getFrameContext(frameId);
            bindingData = targetContext.bindingData;
        }
        bindingData.getList().setCurrentId(id);
    };
    BindingDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BindingDataService.ctorParameters = function () { return [
        { type: BindingData },
        { type: AppContext }
    ]; };
    return BindingDataService;
}());
export { BindingDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZy1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvYmluZGluZy1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBZ0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUV2RTs7O0dBR0c7QUFDSDtJQUdFOztPQUVHO0lBQ0gsNEJBQ1UsV0FBd0IsRUFDeEIsVUFBc0I7UUFEdEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUM1QixDQUFDO0lBRUw7O09BRUc7SUFDSCx5Q0FBWSxHQUFaLFVBQWEsRUFBVSxFQUFFLE9BQWU7UUFDdEMsc0NBQXNDO1FBQ3RDLGlCQUFpQjtRQUNqQixvRUFBb0U7UUFDcEUsNkNBQTZDO1FBQzdDLElBQUk7UUFDSixxQ0FBcUM7UUFFckMsaUJBQWlCO1FBQ2pCLElBQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDakYsYUFBYSxDQUFDLE9BQU8sQ0FBQyxVQUFDLFlBQTBCO1lBQy9DLElBQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUM7WUFDN0MsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDTSwwQ0FBYSxHQUFwQixVQUFxQixFQUFVLEVBQUUsT0FBZTtRQUM5QyxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ25DLElBQUksT0FBTyxFQUFFO1lBQ1gsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDL0QsV0FBVyxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUM7U0FDekM7UUFDRCxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7O2dCQXBDRixVQUFVOzs7O2dCQU5VLFdBQVc7Z0JBQXZCLFVBQVU7O0lBMkNuQix5QkFBQztDQUFBLEFBckNELElBcUNDO0FBRUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcHBDb250ZXh0LCBCaW5kaW5nRGF0YSwgRnJhbWVDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xuXG4vKipcbiAqIOWunuS9k+acjeWKoVxuICogQHNjb3BlIEZyYW1lQ29tcG9uZW50XG4gKi9cbkBJbmplY3RhYmxlKClcbmNsYXNzIEJpbmRpbmdEYXRhU2VydmljZSB7XG5cbiAgLyoqXG4gICAqIOaehOmAoOWHveaVsFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBiaW5kaW5nRGF0YTogQmluZGluZ0RhdGEsXG4gICAgcHJpdmF0ZSBhcHBDb250ZXh0OiBBcHBDb250ZXh0XG4gICkgeyB9XG5cbiAgLyoqXG4gICAqIOiuvue9ruW9k+WJjeahhuaetueahOW9k+WJjeihjFxuICAgKi9cbiAgc2V0Q3VycmVudElkKGlkOiBzdHJpbmcsIGZyYW1lSWQ6IHN0cmluZykge1xuICAgIC8vIGxldCBiaW5kaW5nRGF0YSA9IHRoaXMuYmluZGluZ0RhdGE7XG4gICAgLy8gaWYgKGZyYW1lSWQpIHtcbiAgICAvLyAgIGNvbnN0IHRhcmdldENvbnRleHQgPSB0aGlzLmFwcENvbnRleHQuZ2V0RnJhbWVDb250ZXh0KGZyYW1lSWQpO1xuICAgIC8vICAgYmluZGluZ0RhdGEgPSB0YXJnZXRDb250ZXh0LmJpbmRpbmdEYXRhO1xuICAgIC8vIH1cbiAgICAvLyBiaW5kaW5nRGF0YS5saXN0LnNldEN1cnJlbnRJZChpZCk7XG5cbiAgICAvLyBAdG9kb++8muWFqOmDqOmHjeaWsOiuvue9ruS4gOmBjVxuICAgIGNvbnN0IGZyYW1lQ29udGV4dHMgPSBBcnJheS5mcm9tKHRoaXMuYXBwQ29udGV4dC5nZXRBbGxGcmFtZUNvbnRleHRzKCkudmFsdWVzKCkpO1xuICAgIGZyYW1lQ29udGV4dHMuZm9yRWFjaCgoZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQpID0+IHtcbiAgICAgIGNvbnN0IGJpbmRpbmdEYXRhID0gZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhO1xuICAgICAgYmluZGluZ0RhdGEubGlzdC5zZXRDdXJyZW50SWQoaWQsIHRydWUsIGZhbHNlKTtcbiAgICB9KTtcbiAgfVxuICBwdWJsaWMgc2V0Q3VycmVudFJvdyhpZDogc3RyaW5nLCBmcmFtZUlkOiBzdHJpbmcpIHtcbiAgICBsZXQgYmluZGluZ0RhdGEgPSB0aGlzLmJpbmRpbmdEYXRhO1xuICAgIGlmIChmcmFtZUlkKSB7XG4gICAgICBjb25zdCB0YXJnZXRDb250ZXh0ID0gdGhpcy5hcHBDb250ZXh0LmdldEZyYW1lQ29udGV4dChmcmFtZUlkKTtcbiAgICAgIGJpbmRpbmdEYXRhID0gdGFyZ2V0Q29udGV4dC5iaW5kaW5nRGF0YTtcbiAgICB9XG4gICAgYmluZGluZ0RhdGEuZ2V0TGlzdCgpLnNldEN1cnJlbnRJZChpZCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgQmluZGluZ0RhdGFTZXJ2aWNlIH07XG4iXX0=