import { PARENT_CLASS, FieldMetadataUtil } from '../entity/index';
import { ModifyType } from '../changeset/index';
import { ChangeType } from './changes';
import { BindingPropertyType } from './binding_property';
import { BindingObjectFactory } from './binding_object_factory';
import { Form } from '../form/index';
import { takeUntil } from 'rxjs/operators';
/**
 * 实体操作工具类
 */
class EntityUtil {
    /**
     * 将entity的数据加载到bindingObject中，并保持两者同步。
     * @param entity        实体对象
     * @param bindingObject 绑定对象
     */
    static loadEntity(entity, bindingObject) {
        // 遍历bindingObject的properties进行赋值
        bindingObject.properties.forEach((property) => {
            const propertyName = property.name;
            if (property.type === BindingPropertyType.List) {
                this.loadEntityList(entity[propertyName] || entity[PARENT_CLASS], bindingObject[propertyName]);
            }
            else if (property.type === BindingPropertyType.Object) {
                if (entity && entity[propertyName] && this.isEffectiveField(entity, propertyName)) {
                    this.loadEntity(entity[propertyName], bindingObject[propertyName]);
                }
            }
            else if (property.type === BindingPropertyType.Dynamic) {
                if (entity && entity[propertyName]) {
                    const dynamicObject = BindingObjectFactory.createDynamicBindingObject(entity[propertyName].data);
                    BindingObjectFactory.attachDynamicObjectProperty(bindingObject, propertyName, dynamicObject);
                    this.loadEntity(entity[propertyName], bindingObject[propertyName]);
                }
            }
            else {
                if (this.isEffectiveField(entity, propertyName)) {
                    const value = entity[propertyName];
                    bindingObject.setValue(propertyName, value, false, false);
                }
            }
        });
        this.setUpEntityPipeline(entity, bindingObject);
    }
    /**
     * 建立entity和bindingObject之间的关联
     * @param entity        实体对象
     * @param bindingObject 绑定对象
     */
    static setUpEntityPipeline(entity, bindingObject) {
        if (!entity || !bindingObject) {
            return;
        }
        // 监听entity变更
        entity.onValueChanged.pipe(takeUntil(entity.unsubscribe)).subscribe((modification) => {
            if (modification.type !== ModifyType.ValueChange || modification.path.length === 0) {
                return;
            }
            const propertyName = modification.path[modification.path.length - 1];
            const primaryKeyPath = modification.path[modification.path.length - 2];
            // 验证主键是否匹配
            // 存在主键并且主键不是id时才检查（值对象、关联对象不检查）
            if (bindingObject.primaryKey && bindingObject.primaryKey === 'id') {
                const primaryKey = bindingObject.primaryKey;
                const primaryKeyValue = bindingObject.getValue(primaryKey);
                if (primaryKeyPath !== `${primaryKey}:${primaryKeyValue}`) {
                    return;
                }
            }
            // TODO:修复动态列不触发变更的问题，临时方案，应该有单独的dynamicBindingObject类
            if (modification.dynamic) {
                if (bindingObject['__original__']) {
                    return;
                }
                const value = modification.value;
                const target = bindingObject[propertyName];
                if (!target) {
                    return;
                }
                Object.keys(value).forEach((key) => {
                    if (target.getValue(key) === value[key]) {
                        return;
                    }
                    target.setValue(key, value[key], true, false);
                });
            }
            else {
                // 值没有发生变化，不再设置
                // TODO: 通过bindingObject修改entity属性值时，entity总会触发一个变更回来，如果不截获这个重复的变更，会导致重复或死循环
                if (bindingObject.getValue(propertyName) === modification.value) {
                    return;
                }
                bindingObject.setValue(propertyName, modification.value, true, false, modification.errors);
            }
        });
        // 监听bindingObject变更
        bindingObject.viewChanges.pipe(takeUntil(bindingObject.unsubscribe)).subscribe((viewChange) => {
            const value = viewChange.value;
            const propertyName = viewChange.path[0];
            let pathPrefix = '';
            const pathData = entity.getPaths();
            const paths = pathData.path;
            let id = bindingObject['id'];
            bindingObject['__original__'] = true;
            // if (pathData.isUdt) {
            // grid中udt没有id，从父级中取出id，以便存放验证信息
            const getParentId = (target) => {
                let parentId = '';
                const findId = (item) => {
                    if (item && item && item['id']) {
                        parentId = item['id'];
                        return;
                    }
                    else if (item['parent']) {
                        findId(item['parent']);
                    }
                };
                findId(target);
                return parentId;
            };
            id = getParentId(bindingObject);
            // if (pathData.isGrid) {
            //   // grid 将从表主字段去除
            //   paths.pop();
            // }
            if (paths.length) {
                pathPrefix = paths.join('.') + '.';
            }
            // }
            const controlProp = pathPrefix + propertyName;
            // 调用实体验证，并将错误信息合并到formControl上
            const entityValidate = (callback) => {
                const enableValidate = Object.values(Form.insMap).find(item => item && item.enableValidate);
                if (!enableValidate) {
                    if (typeof callback === 'function') {
                        callback(null);
                    }
                    return;
                }
                entity.validateFromUtilSync(propertyName, value, result => {
                    const errorObj = {};
                    if (result.errors && result.errors.length > 0) {
                        result.errors.forEach((error) => {
                            if (error.constraints) {
                                Object.keys(error.constraints).forEach(key => {
                                    errorObj[key] = {
                                        value: value,
                                        name: error.constraints[key],
                                        error: error
                                    };
                                });
                            }
                        });
                    }
                    // 先设置实体验证信息，再设置form验证信息，然后在form.isFormValid内部整合实体验证form验证信息
                    Form.updateErrors(controlProp, errorObj, id, value, pathData.isGrid);
                    const formErrors = viewChange['errors'] || {};
                    const mergedErrors = Object.assign({}, formErrors, errorObj);
                    let validateError = null;
                    if (Object.keys(mergedErrors).length > 0) {
                        validateError = { [propertyName]: mergedErrors };
                    }
                    if (typeof (callback) === 'function') {
                        callback(validateError);
                    }
                }, viewChange.context);
            };
            // 不是主键值字段时，要先检查主键是否存在，并且主键是否相等（防止后代变更冒泡上来）
            // 非主键属性变更时，要先检查主键是否匹配（如果主键也修改了，要求先修改主键再修改其他值）
            if (bindingObject.primaryKey) {
                const primaryKey = bindingObject.primaryKey;
                if (propertyName !== primaryKey) {
                    if (!entity[primaryKey] || entity[primaryKey] !== bindingObject[primaryKey]) {
                        entityValidate();
                        return;
                    }
                }
                else if (entity[propertyName] !== value) {
                    // todo: 因异步校验未结束实体主键没有被赋值，导致实体其他属性无法赋值，待后续前端校验重构时去掉
                    entity[propertyName] = value;
                    entityValidate();
                    return;
                }
            }
            // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置
            if (entity[propertyName] === value) {
                entityValidate();
                return;
            }
            // 调用表单验证,通过后调用实体验证
            // bingdingObject变化后，先调用实体上的验证，通过后再设置实体的变动
            entityValidate((errors) => {
                entity.errors = errors;
                entity[propertyName] = value;
            });
        });
    }
    /**
     * 将entityList中的Entity对象转换为BindingObject对象，加载到bindingList中，并保持entityList和bindingList同步。
     * @param entityList  实体列表
     * @param bindingList 绑定列表
     */
    static loadEntityList(entityList, bindingList) {
        this.loadEntities(entityList.items, bindingList);
        this.setUpEntityListPipeline(entityList, bindingList);
    }
    /**
     * 建立entityList和bindingList之间的关联
     * @param entityList  实体列表
     * @param bindingList 绑定列表
     */
    static setUpEntityListPipeline(entityList, bindingList) {
        entityList.onListChanged.subscribe((modification) => {
            const target = modification['target'];
            if (target && target !== entityList) {
                return;
            }
            switch (modification.type) {
                // 添加实体
                case ModifyType.Add:
                case ModifyType.Clone:
                    {
                        const entitiesToAdd = modification.value;
                        if (entitiesToAdd.length === 0) {
                            return;
                        }
                        // 检查父id是否一致，冒泡导致的变更不处理
                        const paths = modification.path;
                        const parentPath = paths[paths.length - 2];
                        const parentId = bindingList.parent.primaryKeyValue;
                        if (parentPath.indexOf(parentId) === -1) {
                            return;
                        }
                        this.appendEntities(modification.value, bindingList, modification.type === ModifyType.Clone);
                    }
                    break;
                case ModifyType.Insert:
                    {
                        // 检查父id是否一致，冒泡导致的变更不处理
                        const paths = modification.path;
                        const parentPath = paths[paths.length - 2];
                        const parentId = bindingList.parent.primaryKeyValue;
                        const position = modification.position;
                        if (parentPath.indexOf(parentId) === -1) {
                            return;
                        }
                        this.insertEntity(modification.value[0], bindingList, position);
                    }
                    break;
                // 删除实体
                case ModifyType.Remove:
                    {
                        // 检查父id是否一致，冒泡导致的变更不处理
                        const paths = modification.path;
                        const parentPath = paths[paths.length - 2];
                        const parentId = bindingList.parent.primaryKeyValue;
                        if (parentPath.indexOf(parentId) === -1) {
                            return;
                        }
                        // 删除实体（value格式待商榷，目前value的格式为 { primaryKey: primaryValue}）
                        const id = modification.value[bindingList.primaryKey];
                        bindingList.removeByIds([id]);
                        // this.removeEntities(<Entity[]>modification.value, bindingList);
                    }
                    break;
                // 加载实体
                case ModifyType.Load:
                    // 检查父id是否一致，冒泡导致的变更不处理
                    const paths = modification.path;
                    const parentPath = paths[paths.length - 2];
                    const parentId = bindingList.parent.primaryKeyValue;
                    if (parentPath.indexOf(parentId) === -1) {
                        return;
                    }
                    const entities = modification.value;
                    this.loadEntities(entities, bindingList);
                    break;
                default:
                    break;
            }
        });
    }
    /**
     * 监听repository变化，保持repository和bindingList同步。
     * @param repository  实体仓库
     * @param bindingList 绑定列表
     */
    static loadRepository(repository, bindingList) {
        // 初次加载
        const entities = Array.from(repository.entityCollection.toArray());
        this.loadEntities(entities, bindingList);
        // 监听变化
        repository.entityCollectionChange.pipe(takeUntil(repository.destroy$)).subscribe((modification) => {
            switch (modification.type) {
                case ModifyType.Load:
                    bindingList.clear(true);
                    this.loadEntities(modification.value, bindingList, modification.entityCreate);
                    break;
                case ModifyType.Add:
                case ModifyType.Clone:
                    this.appendEntities(modification.value, bindingList, modification.type === ModifyType.Clone);
                    break;
                case ModifyType.AddData:
                    this.addData(modification.value, bindingList);
                    break;
                case ModifyType.Insert:
                    this.insertEntity(modification.value, bindingList, modification.position);
                    break;
                case ModifyType.Remove:
                    this.removeEntities(modification.value, bindingList);
                    break;
                case ModifyType.RemoveData:
                    this.removeData(modification.value, bindingList);
                    break;
                case ModifyType.PaginationInfoChange:
                    // 分页信息无需同步到bindingList，放到bindingData即可。保留此处只是为了兼容产品部可能使用bindingList上分页信息的场景
                    bindingList.paginationInfo = modification.value;
                    break;
                default:
                    break;
            }
        });
        // 监听BindingList数据变化
        bindingList.changes.pipe(takeUntil(bindingList.destroy$)).subscribe((change) => {
            if (change.type === ChangeType.PaginationInfoChange) {
                const entityCollection = repository.entityCollection;
                // const entityTypeName = entityCollection.entityTypeName;
                // const original = entityCollection.paginationInfo[entityTypeName];
                // const entityPaginationInfo = Object.assign({}, original, change.value);
                entityCollection.paginationInfo = Object.assign({}, entityCollection.paginationInfo, change.value);
            }
        });
    }
    /**
     * 将entities中的Entity对象转换为BindingObject对象，并加载到bindingList中
     * @param entities    实体数组
     * @param bindingList 绑定列表
     */
    static loadEntities(entities, bindingList, entityCreate = false) {
        const bindingObjects = this.createBindingObjects(entities, bindingList);
        bindingList.load(bindingObjects, entityCreate);
    }
    /**
     * 将entities中的Entity对象转换为BIndingObject对象，并追加到bindingList中
     * @param entities    实体数组
     * @param bindingList 绑定列表
     */
    static appendEntities(entities, bindingList, isCloned = false) {
        const bindingObjects = this.createBindingObjects(entities, bindingList);
        bindingList.append(bindingObjects, isCloned);
    }
    /**
     * 是否是有效的字段
     * @param entity 实体
     * @param propertyName 字段
     * @returns
     */
    static isEffectiveField(entity, propertyName) {
        if (!entity || !propertyName) {
            return false;
        }
        propertyName = propertyName.toLowerCase();
        if (entity['__farris_effective_fields__']) {
            return entity['__farris_effective_fields__'].includes(propertyName);
        }
        if (entity['farris_effective_fields'] && typeof entity['farris_effective_fields'] === 'string') {
            const effectiveFields = entity['farris_effective_fields'].split(',').filter(p => p).map(item => item.toLowerCase());
            entity['__farris_effective_fields__'] = effectiveFields;
            return effectiveFields.includes(propertyName);
        }
        return true;
    }
    /**
     * 增加实体数据（不切换当前行）
     * @param entities
     * @param bindingList
     */
    static addData(entities, bindingList) {
        const bindingObjects = this.createBindingObjects(entities, bindingList);
        bindingList.addData(bindingObjects);
    }
    static insertEntity(entity, bindingList, position) {
        const bindingObject = this.createBindingObject(entity, bindingList);
        bindingList.insert(bindingObject, position);
    }
    /**
     * 从bindingList移除entities对应的BindingObject对象
     * @param entities    实体数组
     * @param bindingList 绑定列表
     */
    static removeEntities(entities, bindingList) {
        if (entities === null || entities.length === 0) {
            return;
        }
        // 归集要删除的id数组
        const primaryKey = bindingList.primaryKey;
        const ids = [];
        entities.forEach((entity) => {
            ids.push(entity[primaryKey]);
        });
        bindingList.removeByIds(ids);
    }
    static removeData(entities, bindingList) {
        if (entities === null || entities.length === 0) {
            return;
        }
        // 归集要删除的id数组
        const primaryKey = bindingList.primaryKey;
        const ids = [];
        entities.forEach((entity) => {
            ids.push(entity[primaryKey]);
        });
        bindingList.removeDataByIds(ids);
    }
    /**
     * 将entities中的Entity对象转换为BindingObject对象
     * @param entities    实体数组
     * @param bindingList 绑定列表
     */
    static createBindingObjects(entities, bindingList) {
        if (entities === null || entities.length === 0) {
            return [];
        }
        const bindingObjects = [];
        entities.forEach((entity) => {
            const bindingObject = BindingObjectFactory.create(bindingList.properties);
            bindingObject['_ENTITY_'] = entity;
            this.loadEntity(entity, bindingObject);
            // // 为bindingObject设置默认值initialData属性
            // if (entity['initialData']) {
            //   bindingObject['initialData'] = entity['initialData'];
            // }
            bindingObjects.push(bindingObject);
        });
        return bindingObjects;
    }
    static createBindingObject(entity, bindingList) {
        const bindingObject = BindingObjectFactory.create(bindingList.properties);
        this.loadEntity(entity, bindingObject);
        return bindingObject;
    }
    static watchReposiroty(repository, bindingData) {
        // reposiroty => bindingData
        repository.entityCollectionChange.subscribe((modification) => {
            switch (modification.type) {
                case ModifyType.PaginationInfoChange:
                    bindingData.pagingInfo = modification.value;
                    break;
                default:
                    break;
            }
        });
    }
    /**
     * 查找属性的类型
     * @param entityType 实体类型
     * @param targetPropName 属性名称
     * @return 属性信息，包含属性类型（NgField、NgObject、NgList）和属性对应的实体类型（当NgField类型时为null）
     */
    static getPropInfo(entityType, targetPropName) {
        let propType;
        let propEntityType;
        // NgField
        const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);
        Object.keys(ngFieldProperties).forEach((propName) => {
            if (propName === targetPropName) {
                propType = 'NgField';
                propEntityType = null;
            }
        });
        // NgObject
        const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
        Object.keys(ngObjectProperties).forEach((propName) => {
            if (propName === targetPropName) {
                propType = 'NgObject';
                propEntityType = ngObjectProperties[propName].type;
            }
        });
        // NgList
        const ngListProperties = FieldMetadataUtil.getNgList(entityType);
        Object.keys(ngListProperties).forEach((propName) => {
            if (propName === targetPropName) {
                propType = 'NgList';
                propEntityType = ngListProperties[propName].type;
            }
        });
        const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
        Object.keys(ngDynamicProperties).forEach((propName) => {
            if (propName === targetPropName) {
                propType = 'NgDynamic';
                propEntityType = ngDynamicProperties[propName].type;
            }
        });
        return { propType, propEntityType };
    }
    /**
     * 获取实体的主键名
     * @param entityType 实体类型
     */
    static getPrimaryKey(entityType) {
        const primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);
        if (primaryNgFiledProp) {
            return primaryNgFiledProp.dataField;
        }
        else {
            return '';
        }
    }
    /**
     * 是否为对象属性
     */
    static isObjectProp(entityType, targetPropName) {
        let isObjectProp = false;
        const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
        Object.keys(ngObjectProperties).forEach((propName) => {
            if (propName === targetPropName) {
                isObjectProp = true;
            }
        });
        return isObjectProp;
    }
    /**
     * 检查是否是动态列属性
     */
    static isDynamicProp(entityType, targetPropName) {
        let isDynamicProp = false;
        const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
        Object.keys(ngDynamicProperties).forEach((propName) => {
            if (propName === targetPropName) {
                isDynamicProp = true;
            }
        });
        return isDynamicProp;
    }
    /**
     * 为实体增加initialData属性
     * @param entity 实体实例
     * @param initialData 默认值对象
     */
    static appendInitialData(entity, initialData) {
        const data = Object.assign({}, initialData);
        delete data.id;
        delete data.parentID;
        entity['initialData'] = data;
    }
}
export { EntityUtil };
//# sourceMappingURL=data:application/json;base64,