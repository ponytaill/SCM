import { Injectable, Injector } from "@angular/core";
import { Repository } from '@farris/devkit';
export class FeatureRepository {
    constructor(injector, repository) {
        this.injector = injector;
        this.repository = repository;
    }
    /**
     * 根据物料id获取物料特征项及特征值（公共默认值）
     * @param materialId 物料id
     */
    getFeaturesByMaterialId(materialId) {
        const url = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/getmaterialprops';
        const body = {
            materialID: materialId
        };
        const options = {
            body
        };
        const befRepository = this.repository;
        return befRepository.proxy.request(url, 'put', null, options);
    }
    /**
     * 根据物料id及物料特征保存后的hash获取该物料已经存储的特征项值
     * @param materialId 物料Id
     * @param configID 对应该物料的特征项hash
     * @returns
     */
    getConfigedValueByFeatureId(materialId, configID, configType = 'Materials') {
        const url = '/api/bf/df/v1.0/charactconfigservice/service/getcharactconfiginfo';
        const body = { objType: configType, objID: materialId, configID };
        const befRepository = this.repository;
        const options = {
            body
        };
        return befRepository.proxy.request(url, 'put', null, options);
    }
    /**
     * 保存物料特征项
     * @param materialId 物料id
     * @param charactValue 特征值
     * @param configType 配置类型
     * @returns
     */
    applyFeatures(materialId, charactValue, configType = 'Materials') {
        const body = { objType: configType, objID: materialId, charactValue };
        const befRepository = this.repository;
        const options = {
            body
        };
        return befRepository.proxy.request('/api/bf/df/v1.0/charactconfigservice/service/matchcharactconfigid', 'put', null, options);
    }
    /**
     * 获取帮助信息
     * @param helpid 帮助id
     * @param filter 过滤条件
     * @param params 参数
     * @returns
     */
    getHelpInfo(helpid, filter, params) {
        const url = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata';
        const httpParams = {};
        if (params) {
            if (params.pageIndex) {
                httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);
            }
            if (params.pageSize) {
                httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);
            }
            if (params.condition) {
                httpParams['condition'] = JSON.stringify(params.condition);
            }
            if (params.searchValue) {
                httpParams['search'] = params.searchValue;
            }
        }
        const body = {
            helpID: helpid,
            queryParam: JSON.stringify(httpParams),
            filterStr: filter
        };
        const befRepository = this.repository;
        const options = {
            body
        };
        return befRepository.proxy.request(url, 'put', null, options);
    }
}
FeatureRepository.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FeatureRepository.ctorParameters = () => [
    { type: Injector },
    { type: Repository }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZS1yZXBvc2l0b3J5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2ZlYXR1cmUtZWRpdC9mZWF0dXJlLXJlcG9zaXRvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTTVDLE1BQU0sT0FBTyxpQkFBaUI7SUFDNUIsWUFDVSxRQUFrQixFQUNsQixVQUEyQjtRQUQzQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLGVBQVUsR0FBVixVQUFVLENBQWlCO0lBQ2pDLENBQUM7SUFDTDs7O09BR0c7SUFDSSx1QkFBdUIsQ0FBQyxVQUFrQjtRQUMvQyxNQUFNLEdBQUcsR0FBRyxtRUFBbUUsQ0FBQztRQUNoRixNQUFNLElBQUksR0FBRztZQUNYLFVBQVUsRUFBRSxVQUFVO1NBQ3ZCLENBQUM7UUFDRixNQUFNLE9BQU8sR0FBRztZQUNkLElBQUk7U0FDTCxDQUFDO1FBQ0YsTUFBTSxhQUFhLEdBQXVCLElBQUksQ0FBQyxVQUFnQyxDQUFDO1FBQ2hGLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUNEOzs7OztPQUtHO0lBQ0ksMkJBQTJCLENBQUMsVUFBa0IsRUFBRSxRQUFnQixFQUFFLGFBQXFCLFdBQVc7UUFDdkcsTUFBTSxHQUFHLEdBQUcsbUVBQW1FLENBQUM7UUFDaEYsTUFBTSxJQUFJLEdBQUcsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUM7UUFDbEUsTUFBTSxhQUFhLEdBQXVCLElBQUksQ0FBQyxVQUFnQyxDQUFDO1FBQ2hGLE1BQU0sT0FBTyxHQUFHO1lBQ2QsSUFBSTtTQUNMLENBQUM7UUFDRixPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFDRDs7Ozs7O09BTUc7SUFDSSxhQUFhLENBQUMsVUFBa0IsRUFBRSxZQUFpQixFQUFFLGFBQXFCLFdBQVc7UUFDMUYsTUFBTSxJQUFJLEdBQUcsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLENBQUM7UUFDdEUsTUFBTSxhQUFhLEdBQXVCLElBQUksQ0FBQyxVQUFnQyxDQUFDO1FBQ2hGLE1BQU0sT0FBTyxHQUFHO1lBQ2QsSUFBSTtTQUNMLENBQUM7UUFDRixPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLG1FQUFtRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEksQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUNJLFdBQVcsQ0FBQyxNQUFjLEVBQUUsTUFBYyxFQUFFLE1BQVc7UUFDNUQsTUFBTSxHQUFHLEdBQUcsOERBQThELENBQUM7UUFDM0UsTUFBTSxVQUFVLEdBQVEsRUFBRSxDQUFDO1FBQzNCLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO2dCQUNwQixVQUFVLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ2hFO1lBQ0QsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO2dCQUNuQixVQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQzlEO1lBQ0QsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO2dCQUNwQixVQUFVLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDNUQ7WUFDRCxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUU7Z0JBQ3RCLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO2FBQzNDO1NBQ0Y7UUFDRCxNQUFNLElBQUksR0FBRztZQUNYLE1BQU0sRUFBRSxNQUFNO1lBQ2QsVUFBVSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO1lBQ3RDLFNBQVMsRUFBRSxNQUFNO1NBQ2xCLENBQUM7UUFDRixNQUFNLGFBQWEsR0FBdUIsSUFBSSxDQUFDLFVBQWdDLENBQUM7UUFDaEYsTUFBTSxPQUFPLEdBQUc7WUFDZCxJQUFJO1NBQ0wsQ0FBQztRQUNGLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEUsQ0FBQzs7O1lBckZGLFVBQVU7Ozs7WUFQVSxRQUFRO1lBRXBCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBCZWZSZXBvc2l0b3J5LCBSZXNwb25zZUluZm8gfSBmcm9tIFwiQGZhcnJpcy9iZWZcIjtcbmltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IG1hcCB9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xuaW1wb3J0IHsgUHJvcCB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGZWF0dXJlUmVwb3NpdG9yeSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIHByaXZhdGUgcmVwb3NpdG9yeTogUmVwb3NpdG9yeTxhbnk+LFxuICApIHsgfVxuICAvKipcbiAgICog5qC55o2u54mp5paZaWTojrflj5bnianmlpnnibnlvoHpobnlj4rnibnlvoHlgLzvvIjlhazlhbHpu5jorqTlgLzvvIlcbiAgICogQHBhcmFtIG1hdGVyaWFsSWQg54mp5paZaWRcbiAgICovXG4gIHB1YmxpYyBnZXRGZWF0dXJlc0J5TWF0ZXJpYWxJZChtYXRlcmlhbElkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFJlc3BvbnNlSW5mbz4ge1xuICAgIGNvbnN0IHVybCA9ICcvYXBpL3NjbS9zY21mbmQvdjEuMC9zY21jb21tb25jbXBzZXJ2aWNlL3NlcnZpY2UvZ2V0bWF0ZXJpYWxwcm9wcyc7XG4gICAgY29uc3QgYm9keSA9IHtcbiAgICAgIG1hdGVyaWFsSUQ6IG1hdGVyaWFsSWRcbiAgICB9O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBib2R5XG4gICAgfTtcbiAgICBjb25zdCBiZWZSZXBvc2l0b3J5OiBCZWZSZXBvc2l0b3J5PGFueT4gPSB0aGlzLnJlcG9zaXRvcnkgYXMgQmVmUmVwb3NpdG9yeTxhbnk+O1xuICAgIHJldHVybiBiZWZSZXBvc2l0b3J5LnByb3h5LnJlcXVlc3QodXJsLCAncHV0JywgbnVsbCwgb3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIOagueaNrueJqeaWmWlk5Y+K54mp5paZ54m55b6B5L+d5a2Y5ZCO55qEaGFzaOiOt+WPluivpeeJqeaWmeW3sue7j+WtmOWCqOeahOeJueW+gemhueWAvFxuICAgKiBAcGFyYW0gbWF0ZXJpYWxJZCDnianmlplJZFxuICAgKiBAcGFyYW0gY29uZmlnSUQg5a+55bqU6K+l54mp5paZ55qE54m55b6B6aG5aGFzaFxuICAgKiBAcmV0dXJucyBcbiAgICovXG4gIHB1YmxpYyBnZXRDb25maWdlZFZhbHVlQnlGZWF0dXJlSWQobWF0ZXJpYWxJZDogc3RyaW5nLCBjb25maWdJRDogc3RyaW5nLCBjb25maWdUeXBlOiBzdHJpbmcgPSAnTWF0ZXJpYWxzJyk6IE9ic2VydmFibGU8UmVzcG9uc2VJbmZvPiB7XG4gICAgY29uc3QgdXJsID0gJy9hcGkvYmYvZGYvdjEuMC9jaGFyYWN0Y29uZmlnc2VydmljZS9zZXJ2aWNlL2dldGNoYXJhY3Rjb25maWdpbmZvJztcbiAgICBjb25zdCBib2R5ID0geyBvYmpUeXBlOiBjb25maWdUeXBlLCBvYmpJRDogbWF0ZXJpYWxJZCwgY29uZmlnSUQgfTtcbiAgICBjb25zdCBiZWZSZXBvc2l0b3J5OiBCZWZSZXBvc2l0b3J5PGFueT4gPSB0aGlzLnJlcG9zaXRvcnkgYXMgQmVmUmVwb3NpdG9yeTxhbnk+O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBib2R5XG4gICAgfTtcbiAgICByZXR1cm4gYmVmUmVwb3NpdG9yeS5wcm94eS5yZXF1ZXN0KHVybCwgJ3B1dCcsIG51bGwsIG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiDkv53lrZjnianmlpnnibnlvoHpoblcbiAgICogQHBhcmFtIG1hdGVyaWFsSWQg54mp5paZaWRcbiAgICogQHBhcmFtIGNoYXJhY3RWYWx1ZSDnibnlvoHlgLxcbiAgICogQHBhcmFtIGNvbmZpZ1R5cGUg6YWN572u57G75Z6LXG4gICAqIEByZXR1cm5zIFxuICAgKi9cbiAgcHVibGljIGFwcGx5RmVhdHVyZXMobWF0ZXJpYWxJZDogc3RyaW5nLCBjaGFyYWN0VmFsdWU6IGFueSwgY29uZmlnVHlwZTogc3RyaW5nID0gJ01hdGVyaWFscycpIHtcbiAgICBjb25zdCBib2R5ID0geyBvYmpUeXBlOiBjb25maWdUeXBlLCBvYmpJRDogbWF0ZXJpYWxJZCwgY2hhcmFjdFZhbHVlIH07XG4gICAgY29uc3QgYmVmUmVwb3NpdG9yeTogQmVmUmVwb3NpdG9yeTxhbnk+ID0gdGhpcy5yZXBvc2l0b3J5IGFzIEJlZlJlcG9zaXRvcnk8YW55PjtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgYm9keVxuICAgIH07XG4gICAgcmV0dXJuIGJlZlJlcG9zaXRvcnkucHJveHkucmVxdWVzdCgnL2FwaS9iZi9kZi92MS4wL2NoYXJhY3Rjb25maWdzZXJ2aWNlL3NlcnZpY2UvbWF0Y2hjaGFyYWN0Y29uZmlnaWQnLCAncHV0JywgbnVsbCwgb3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIOiOt+WPluW4ruWKqeS/oeaBr1xuICAgKiBAcGFyYW0gaGVscGlkIOW4ruWKqWlkXG4gICAqIEBwYXJhbSBmaWx0ZXIg6L+H5ruk5p2h5Lu2XG4gICAqIEBwYXJhbSBwYXJhbXMg5Y+C5pWwXG4gICAqIEByZXR1cm5zIFxuICAgKi9cbiAgcHVibGljIGdldEhlbHBJbmZvKGhlbHBpZDogc3RyaW5nLCBmaWx0ZXI6IHN0cmluZywgcGFyYW1zOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IHVybCA9ICcvYXBpL3NjbS9zY21mbmQvdjEuMC9zY21jb21tb25jbXBzZXJ2aWNlL3NlcnZpY2UvZ2V0aGVscGRhdGEnO1xuICAgIGNvbnN0IGh0dHBQYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChwYXJhbXMpIHtcbiAgICAgIGlmIChwYXJhbXMucGFnZUluZGV4KSB7XG4gICAgICAgIGh0dHBQYXJhbXNbJ3BhZ2VJbmRleCddID0gSlNPTi5zdHJpbmdpZnkocGFyYW1zLnBhZ2VJbmRleCAtIDApO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5wYWdlU2l6ZSkge1xuICAgICAgICBodHRwUGFyYW1zWydwYWdlU2l6ZSddID0gSlNPTi5zdHJpbmdpZnkocGFyYW1zLnBhZ2VTaXplIC0gMCk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLmNvbmRpdGlvbikge1xuICAgICAgICBodHRwUGFyYW1zWydjb25kaXRpb24nXSA9IEpTT04uc3RyaW5naWZ5KHBhcmFtcy5jb25kaXRpb24pO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5zZWFyY2hWYWx1ZSkge1xuICAgICAgICBodHRwUGFyYW1zWydzZWFyY2gnXSA9IHBhcmFtcy5zZWFyY2hWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYm9keSA9IHtcbiAgICAgIGhlbHBJRDogaGVscGlkLFxuICAgICAgcXVlcnlQYXJhbTogSlNPTi5zdHJpbmdpZnkoaHR0cFBhcmFtcyksXG4gICAgICBmaWx0ZXJTdHI6IGZpbHRlclxuICAgIH07XG4gICAgY29uc3QgYmVmUmVwb3NpdG9yeTogQmVmUmVwb3NpdG9yeTxhbnk+ID0gdGhpcy5yZXBvc2l0b3J5IGFzIEJlZlJlcG9zaXRvcnk8YW55PjtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgYm9keVxuICAgIH07XG4gICAgcmV0dXJuIGJlZlJlcG9zaXRvcnkucHJveHkucmVxdWVzdCh1cmwsICdwdXQnLCBudWxsLCBvcHRpb25zKTtcbiAgfVxufSJdfQ==