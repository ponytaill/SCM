/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DatagridComponent } from './../../datagrid.component';
import { Utils } from './../../utils/utils';
import { Input, ElementRef, Directive, Injector, NgZone, Renderer2 } from '@angular/core';
import { CommonUtils } from '@farris/ui-common';
import { DomHandler } from '../../services/domhandler';
export class DatagridCellTooltipDirective {
    /**
     * @param {?} el
     * @param {?} injector
     */
    constructor(el, injector) {
        this.el = el;
        this.injector = injector;
        this.position = 'top-left';
        this.delay = 1000;
        this.cls = '';
        this.type = 'info';
        this.tipMode = 'auto';
        this.showTipTimer = null;
        this._mouseenter = null;
        this._mouseleave = null;
        this._mouseclick = null;
        this.ngZone = null;
        this.render = null;
        if (this.injector) {
            this.commonUtils = this.injector.get(CommonUtils, new CommonUtils());
            this.ngZone = this.injector.get(NgZone);
            this.render = this.injector.get(Renderer2);
            this.dg = this.injector.get(DatagridComponent);
        }
        else {
            this.commonUtils = new CommonUtils();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.ngZone) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                this._mouseenter = Utils.on(this.el.nativeElement, 'mouseenter', this.onMouseEnter.bind(this), { target: '.f-datagrid-cell-content', options: { capture: true } });
                this._mouseleave = Utils.on(this.el.nativeElement, 'mouseleave', this.onMouseLeave.bind(this), { target: '.f-datagrid-cell-content', options: { capture: true } });
                this._mouseclick = Utils.on(this.el.nativeElement, 'mousedown', this.onClick.bind(this));
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.hide();
        if (this._mouseenter) {
            this._mouseenter();
        }
        if (this._mouseleave) {
            this._mouseleave();
        }
        if (this._mouseclick) {
            this._mouseclick();
        }
        // this.dg = null;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseEnter($event) {
        /** @type {?} */
        const cellTiptimer = this.dg ? this.dg.cellTipTimer : 1000;
        if (this.showTipTimer) {
            clearTimeout(this.showTipTimer);
            this.showTipTimer = null;
        }
        this.showTipTimer = setTimeout((/**
         * @return {?}
         */
        () => {
            this.show($event);
        }), cellTiptimer);
    }
    /**
     * @return {?}
     */
    onMouseLeave() {
        this.hide();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
        // e.stopPropagation();
        this.hide();
    }
    /**
     * @private
     * @return {?}
     */
    getTextContainer() {
        return DomHandler.findSingle(this.container, '.f-tooltip-text');
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    donotShowTips(target) {
        /** @type {?} */
        const tdWidth = target.offsetWidth;
        /** @type {?} */
        const tagetSty = window.getComputedStyle(target);
        /** @type {?} */
        const txtWidth = this.commonUtils.getTextWidth(this.message, tagetSty.font);
        const { paddingLeft, paddingRight } = tagetSty;
        /** @type {?} */
        const _width = tdWidth - (Number(paddingLeft.replace('px', '')) || 0) - (Number(paddingRight.replace('px', '')) || 0);
        /** @type {?} */
        let tr = target.closest('tr');
        if (tr) {
            /** @type {?} */
            const trId = tr.id;
            tr = document.querySelector('#' + trId);
        }
        if (this.tipMode === 'auto') {
            if (tr) {
                return _width && _width > txtWidth;
            }
            return true;
        }
        else {
            return tr ? false : true;
        }
    }
    /**
     * @return {?}
     */
    hide() {
        if (this.showTipTimer) {
            clearTimeout(this.showTipTimer);
            this.showTipTimer = null;
        }
        if (this.container && this.container.parentElement) {
            document.body.removeChild(this.container);
        }
        this.container = null;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    show($event) {
        /** @type {?} */
        const cellEl = (/** @type {?} */ ($event.target));
        this.enable = cellEl.getAttribute('cell-tooltip') === 'true';
        this.message = cellEl.getAttribute('message');
        this.tipMode = cellEl.getAttribute('tipMode') || 'auto';
        if (!this.enable || !this.message) {
            return;
        }
        /** @type {?} */
        const tipWidth = cellEl.getAttribute('tipWidth');
        /** @type {?} */
        const tipHeight = cellEl.getAttribute('tipHeight');
        this.position = cellEl.getAttribute('position') || 'top-left';
        // 检查下内容宽度是否超出列宽
        if (this.donotShowTips($event.target)) {
            return;
        }
        // const boxEl = this.el.nativeElement;
        /** @type {?} */
        const boxEl = $event.target;
        /** @type {?} */
        const elSize = this.getBoxSizeObj(boxEl);
        /** 如果存在则不新建，只需要修改里面的内容 */
        if (!this.container) {
            this.create(elSize);
        }
        else {
            DomHandler.findSingle(this.container, '.f-tooltip-text').innerHTML = this.message;
        }
        this.container.style.maxWidth = `${window.innerWidth - 30}px`;
        this.container.style.minWidth = '35px';
        if (tipWidth) {
            this.container.style.width = tipWidth;
        }
        if (tipHeight) {
            this.container.style.height = tipHeight;
        }
        /** @type {?} */
        const offset = DomHandler.getOffset(boxEl);
        /** @type {?} */
        const targetTop = offset.top;
        /** @type {?} */
        const targetLeft = offset.left;
        /** @type {?} */
        let left;
        /** @type {?} */
        let top;
        this.container.style.display = 'block';
        this.changeTooltipPosition(boxEl);
        /** @type {?} */
        const arrow = DomHandler.findSingle(this.container, '.f-tooltip-arrow');
        /** @type {?} */
        const tooltipSize = this.getTooltipSize();
        // 检查内容高度
        if (window.innerHeight - 10 < tooltipSize.height) {
            this.container.style.height = `${window.innerHeight - 20}px`;
            tooltipSize.height = window.innerHeight - 25;
            /** @type {?} */
            const textContainer = this.getTextContainer();
            textContainer.style.height = `${tooltipSize.height}px`;
            textContainer.style.overflow = 'hidden';
        }
        /** @type {?} */
        const n = this.updateArrowPosition(arrow, offset, $event);
        switch (this.position) {
            case 'right':
                left = targetLeft + elSize.width;
                top = n;
                break;
            case 'left':
                left = targetLeft - tooltipSize.width;
                top = n;
                break;
            case 'top-left':
                top = targetTop - tooltipSize.height - 7;
                left = n;
                break;
        }
        if (left) {
            this.container.style.left = left + 'px';
        }
        this.container.style.top = top + 'px';
        this.container.style.zIndex = 999999;
    }
    /**
     * @private
     * @param {?} arrow
     * @param {?} elOffset
     * @param {?} $event
     * @return {?}
     */
    updateArrowPosition(arrow, elOffset, $event) {
        /** @type {?} */
        const tooltipSize = this.getTooltipSize();
        if (this.position === 'left' || this.position === 'right') {
            /** @type {?} */
            const targetTop = elOffset.top;
            /** @type {?} */
            const halfHeight = tooltipSize.height / 2;
            /** @type {?} */
            let top = 10;
            if (targetTop > halfHeight && window.innerHeight - targetTop > halfHeight) {
                top = targetTop - tooltipSize.height / 2;
            }
            // 调整箭头的位置
            if (arrow) {
                arrow.style.top = `${targetTop - top}px`;
            }
            return top;
        }
        else if (this.position === 'top-left') {
            /** @type {?} */
            let left = $event.pageX - tooltipSize.width / 2;
            if (left < 10) {
                left = elOffset.left;
            }
            if (left + tooltipSize.width > window.innerWidth) {
                left = window.innerWidth - tooltipSize.width - 20;
            }
            // 调整箭头的位置
            if (arrow) {
                if ($event.pageX - left > 28) {
                    if ($event.pageX - left + 28 > tooltipSize.width) {
                        arrow.style.left = `${tooltipSize.width - 28}px`;
                    }
                    else {
                        arrow.style.left = `${$event.pageX - left}px`;
                    }
                }
            }
            return left;
        }
    }
    /**
     * @param {?} elSize
     * @return {?}
     */
    create(elSize) {
        /** @type {?} */
        let styleClass = this.tooltipCls();
        this.container = document.createElement('div');
        if (this.tooltipStyleClass) {
            styleClass += ' ' + this.tooltipStyleClass;
        }
        this.container.className = styleClass;
        /** @type {?} */
        const tooltipArrow = document.createElement('div');
        tooltipArrow.className = 'f-tooltip-arrow ';
        this.container.appendChild(tooltipArrow);
        /** @type {?} */
        const tooltipText = document.createElement('div');
        tooltipText.className = 'f-tooltip-text ';
        tooltipText.innerHTML = this.message;
        /** @type {?} */
        const maxWidth = window.innerWidth - 50;
        tooltipText.style.maxWidth = `${maxWidth}px`;
        tooltipText.style.wordBreak = 'break-all';
        this.container.style.textAlign = 'center';
        if (this.positionStyle) {
            this.container.style.position = this.positionStyle;
        }
        this.container.appendChild(tooltipText);
        document.body.appendChild(this.container);
    }
    /**
     * @private
     * @return {?}
     */
    tooltipCls() {
        return 'datagrid-cell-tooltip f-tooltip ' + this.getThemeCls() + ' f-tooltip-' + this.position + ' ' + this.cls;
    }
    /**
     * @private
     * @return {?}
     */
    getThemeCls() {
        if (this.type) {
            return 'f-tooltip-' + this.type;
        }
        return '';
    }
    /**
     * 获取宿主尺寸
     * @private
     * @param {?} boxEl
     * @return {?}
     */
    getBoxSizeObj(boxEl) {
        /** @type {?} */
        const p = boxEl.getBoundingClientRect();
        return {
            width: DomHandler.getOuterWidth(boxEl),
            height: DomHandler.getOuterHeight(boxEl),
            left: p.left,
            right: p.right,
            top: p.top,
            bottom: p.bottom
        };
    }
    /**
     * 获取tooltip 容器尺寸
     * @private
     * @return {?}
     */
    getTooltipSize() {
        return {
            width: DomHandler.getOuterWidth(this.container),
            height: DomHandler.getOuterHeight(this.container)
        };
    }
    /**
     * 获取窗口尺寸
     * @private
     * @return {?}
     */
    getWindowSize() {
        return {
            width: window.innerWidth,
            height: window.innerHeight
        };
    }
    /**
     * 根据内容的多少，自动更改tooltip 的位置
     * @private
     * @param {?} boxEl
     * @return {?}
     */
    changeTooltipPosition(boxEl) {
        /** @type {?} */
        const boxSize = this.getBoxSizeObj(boxEl);
        /** @type {?} */
        const tooltip = this.getTooltipSize();
        /** @type {?} */
        const winSize = this.getWindowSize();
        this.container.className = this.tooltipCls();
        if (tooltip.width < winSize.width && tooltip.height < boxSize.top) {
            // this.position = 'top-left';
            return;
        }
        else {
            /** @type {?} */
            const elOffset = DomHandler.getOffset(boxEl);
            /** @type {?} */
            const elLeft = elOffset.left;
            /** @type {?} */
            const elRight = winSize.width - elLeft - boxSize.width;
            if (elLeft > elRight) {
                this.position = 'left';
            }
            else {
                this.position = 'right';
            }
            /** @type {?} */
            const toolTipTextWidth = elLeft > elRight ? elLeft : elRight;
            /** @type {?} */
            const textEl = this.getTextContainer();
            textEl.style.maxWidth = `${toolTipTextWidth - 30}px`;
            this.container.style.maxWidth = `${toolTipTextWidth}px`;
        }
    }
}
DatagridCellTooltipDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cell-tooltip]',
                exportAs: 'cellTooltip'
            },] }
];
/** @nocollapse */
DatagridCellTooltipDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector }
];
DatagridCellTooltipDirective.propDecorators = {
    enable: [{ type: Input, args: ['cell-tooltip',] }],
    position: [{ type: Input }],
    positionStyle: [{ type: Input }],
    tooltipStyleClass: [{ type: Input }],
    message: [{ type: Input }],
    delay: [{ type: Input }],
    cls: [{ type: Input }],
    type: [{ type: Input }],
    tipMode: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DatagridCellTooltipDirective.prototype.enable;
    /** @type {?} */
    DatagridCellTooltipDirective.prototype.position;
    /** @type {?} */
    DatagridCellTooltipDirective.prototype.positionStyle;
    /** @type {?} */
    DatagridCellTooltipDirective.prototype.tooltipStyleClass;
    /** @type {?} */
    DatagridCellTooltipDirective.prototype.message;
    /** @type {?} */
    DatagridCellTooltipDirective.prototype.delay;
    /** @type {?} */
    DatagridCellTooltipDirective.prototype.cls;
    /** @type {?} */
    DatagridCellTooltipDirective.prototype.type;
    /** @type {?} */
    DatagridCellTooltipDirective.prototype.tipMode;
    /** @type {?} */
    DatagridCellTooltipDirective.prototype.container;
    /**
     * @type {?}
     * @private
     */
    DatagridCellTooltipDirective.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    DatagridCellTooltipDirective.prototype.showTipTimer;
    /**
     * @type {?}
     * @private
     */
    DatagridCellTooltipDirective.prototype._mouseenter;
    /**
     * @type {?}
     * @private
     */
    DatagridCellTooltipDirective.prototype._mouseleave;
    /**
     * @type {?}
     * @private
     */
    DatagridCellTooltipDirective.prototype._mouseclick;
    /**
     * @type {?}
     * @private
     */
    DatagridCellTooltipDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    DatagridCellTooltipDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DatagridCellTooltipDirective.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    DatagridCellTooltipDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridCellTooltipDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,