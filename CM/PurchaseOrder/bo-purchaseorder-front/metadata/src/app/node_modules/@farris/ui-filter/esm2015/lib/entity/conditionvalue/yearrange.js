/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { EventEmitter } from '@angular/core';
import { DateTimeHelperService } from '@farris/ui-common/date';
export class YearRangeValue {
    /**
     * @param {?=} value
     */
    constructor(value = { startTime: '', endTime: '' }) {
        this.clear$ = new EventEmitter();
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return `${this.startTime}~${this.endTime}`;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.DateRange;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startTime = undefined;
        this.endTime = undefined;
        this.clear$.emit();
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.startTime || !this.endTime;
    }
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    getValueText(ctrl) {
        if (!this.startTime.length || !this.endTime.length) {
            return '';
        }
        else {
            if (ctrl && ctrl.format) {
                /** @type {?} */
                const dateHlp = new DateTimeHelperService();
                return dateHlp.formatTo(this.startTime, ctrl.format) + '~' + dateHlp.formatTo(this.endTime, ctrl.format);
            }
            return (this.startTime + '~' + this.endTime);
        }
    }
}
if (false) {
    /** @type {?} */
    YearRangeValue.prototype.startTime;
    /** @type {?} */
    YearRangeValue.prototype.endTime;
    /** @type {?} */
    YearRangeValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWVhcnJhbmdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2NvbmRpdGlvbnZhbHVlL3llYXJyYW5nZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFL0QsTUFBTSxPQUFPLGNBQWM7Ozs7SUFLdkIsWUFBWSxRQUFnRCxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRTtRQUQxRixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV4QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsS0FBK0M7UUFDNUQsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzVEO2FBQU07WUFDSCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDckI7SUFDTCxDQUFDOzs7O0lBQ0QsZ0JBQWdCO1FBQ1osT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQy9DLENBQUM7Ozs7SUFDRCxjQUFjO1FBQ1YsT0FBTyxXQUFXLENBQUMsU0FBUyxDQUFDO0lBQ2pDLENBQUM7Ozs7SUFDRCxVQUFVO1FBQ04sSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7UUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsT0FBTztRQUNILE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUM1QyxDQUFDOzs7OztJQUNELFlBQVksQ0FBQyxJQUFTO1FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ2hELE9BQU8sRUFBRSxDQUFDO1NBQ2I7YUFDSTtZQUVELElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7O3NCQUNmLE9BQU8sR0FBRyxJQUFJLHFCQUFxQixFQUFFO2dCQUMzQyxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUUsR0FBRyxHQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDMUc7WUFFRCxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQztDQUNKOzs7SUE3Q0csbUNBQWtCOztJQUNsQixpQ0FBZ0I7O0lBQ2hCLGdDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElWYWx1ZSB9IGZyb20gJy4vaXZhbHVlJztcclxuaW1wb3J0IHsgQ29udHJvbFR5cGUgfSBmcm9tICcuLi9jb250cm9sdHlwZSc7XHJcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRlVGltZUhlbHBlclNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbi9kYXRlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBZZWFyUmFuZ2VWYWx1ZSBpbXBsZW1lbnRzIElWYWx1ZSB7XHJcblxyXG4gICAgc3RhcnRUaW1lOiBzdHJpbmc7XHJcbiAgICBlbmRUaW1lOiBzdHJpbmc7XHJcbiAgICBjbGVhciQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogeyBzdGFydFRpbWU6IHN0cmluZywgZW5kVGltZTogc3RyaW5nIH0gPSB7IHN0YXJ0VGltZTogJycsIGVuZFRpbWU6ICcnIH0pIHtcclxuICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IHZhbHVlLnN0YXJ0VGltZTtcclxuICAgICAgICB0aGlzLmVuZFRpbWUgPSB2YWx1ZS5lbmRUaW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHNldE9yaWdpbmFsVmFsdWUodmFsdWU6IHsgZm9ybWF0dGVkOiBzdHJpbmcsIGRlbGltaXRlcjogc3RyaW5nIH0pOiB2b2lkIHtcclxuICAgICAgICBpZiAodmFsdWUuZm9ybWF0dGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRUaW1lID0gdmFsdWUuZm9ybWF0dGVkLnNwbGl0KHZhbHVlLmRlbGltaXRlcilbMF07XHJcbiAgICAgICAgICAgIHRoaXMuZW5kVGltZSA9IHZhbHVlLmZvcm1hdHRlZC5zcGxpdCh2YWx1ZS5kZWxpbWl0ZXIpWzFdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJWYWx1ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldE9yaWdpbmFsVmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuc3RhcnRUaW1lfX4ke3RoaXMuZW5kVGltZX1gO1xyXG4gICAgfVxyXG4gICAgZ2V0Q29udHJvbFR5cGUoKTogQ29udHJvbFR5cGUge1xyXG4gICAgICAgIHJldHVybiBDb250cm9sVHlwZS5EYXRlUmFuZ2U7XHJcbiAgICB9XHJcbiAgICBjbGVhclZhbHVlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuZW5kVGltZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmNsZWFyJC5lbWl0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNFbXB0eSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuc3RhcnRUaW1lIHx8ICF0aGlzLmVuZFRpbWU7XHJcbiAgICB9XHJcbiAgICBnZXRWYWx1ZVRleHQoY3RybD86YW55KTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoIXRoaXMuc3RhcnRUaW1lLmxlbmd0aCB8fCAhdGhpcy5lbmRUaW1lLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgaWYgKGN0cmwgJiYgY3RybC5mb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVIbHAgPSBuZXcgRGF0ZVRpbWVIZWxwZXJTZXJ2aWNlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZUhscC5mb3JtYXRUbyh0aGlzLnN0YXJ0VGltZSwgY3RybC5mb3JtYXQpICsnficrIGRhdGVIbHAuZm9ybWF0VG8odGhpcy5lbmRUaW1lLCBjdHJsLmZvcm1hdCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5zdGFydFRpbWUgKyAnficgKyB0aGlzLmVuZFRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==