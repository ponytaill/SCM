import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { tap, switchMap, map } from 'rxjs/operators';
import { FrameContext, BindingPathConverter } from '@farris/devkit';
import { BefDataPathUtil } from '@farris/bef';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { AttachmentUtil } from './attachment.util';
/**
 * 附件调用
 */
var AttachmentDataService = /** @class */ (function () {
    function AttachmentDataService(frameContext, loadingService) {
        this.frameContext = frameContext;
        this.loadingService = loadingService;
    }
    Object.defineProperty(AttachmentDataService.prototype, "repository", {
        /**
         * 实体仓库
         */
        get: function () {
            return this.frameContext.repository;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AttachmentDataService.prototype, "bindingData", {
        /**
         * 绑定数据
         */
        get: function () {
            return this.frameContext.bindingData;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 更新附件信息
     */
    AttachmentDataService.prototype.updateRow = function (attachmentInfoFieldPath, attachmentInfo) {
        var _this = this;
        var restService = this.repository.restService;
        var baseUri = restService.baseUri;
        var updateUri = baseUri + "/service/updateattachment";
        var serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
        var body = {
            updateAttachInfo: serverAttachInfo,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            body: body
        };
        this.loadingService.show();
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap(function (responseInfo) {
            return _this.syncAttachmentInfosToClient();
        }), tap(function () {
            _this.loadingService.hide();
        }));
    };
    /**
     * 通过属性名更新附件信息
     * @param attachmentInfoFieldPath 附件字段
     * @param attachmentInfo 附件信息
     */
    AttachmentDataService.prototype.updateRowWithPropertyName = function (attachmentInfoFieldPath, attachmentInfo) {
        var _this = this;
        var restService = this.repository.restService;
        var baseUri = restService.baseUri;
        var updateUri = baseUri + "/service/updateattachmentwithproptyname";
        var serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
        var propertyName = attachmentInfoFieldPath.split('/').filter(function (p) { return p; }).pop();
        var body = {
            updateAttachInfo: serverAttachInfo,
            propertyName: propertyName,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            body: body
        };
        this.loadingService.show();
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap(function (responseInfo) {
            return _this.syncAttachmentInfosToClient();
        }), tap(function () {
            _this.loadingService.hide();
        }));
    };
    /**
     * 批量创建附件行数据
     */
    AttachmentDataService.prototype.updateRows = function (attachmentInfoFieldPath, attachmentInfos) {
        var _this = this;
        var restService = this.repository.restService;
        var baseUri = restService.baseUri;
        var updateUri = baseUri + "/service/batchuploadattachment";
        var serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
        var isRootEntity = serverAttachInfo.NodeCodes.length === 0;
        var body = {
            batchUploadInfo: serverAttachInfo,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            body: body
        };
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap(function (responseInfo) {
            return _this.appendAttachmentInfosToClient(responseInfo.returnValue, isRootEntity);
        }), tap(function () {
            _this.loadingService.hide();
        }));
    };
    /**
     * 批量创建附件行数据
     */
    AttachmentDataService.prototype.updateRowsWithConfigs = function (attachmentInfoFieldPath, attachmentInfos, configs) {
        var _this = this;
        var restService = this.repository.restService;
        var baseUri = restService.baseUri;
        var updateUri = baseUri + "/service/batchuploadattachment";
        var serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
        // const isRootEntity = serverAttachInfo.NodeCodes.length === 0;
        var body = {
            batchUploadInfo: serverAttachInfo,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            body: body
        };
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap(function (responseInfo) {
            return _this.appendAttachmentInfos(responseInfo.returnValue, configs);
        }), tap(function () {
            _this.loadingService.hide();
        }));
    };
    /**
     * 根据属性名批量创建附件行数据
     */
    AttachmentDataService.prototype.updateRowsWithPropertyName = function (attachmentInfoFieldPath, attachmentInfos) {
        var _this = this;
        var restService = this.repository.restService;
        var baseUri = restService.baseUri;
        var updateUri = baseUri + "/service/batchuploadattachmentwithproptyname";
        var serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
        var isRootEntity = serverAttachInfo.NodeCodes.length === 0;
        var propertyName = attachmentInfoFieldPath.split('/').filter(function (p) { return p; }).pop();
        var body = {
            batchUploadInfo: serverAttachInfo,
            propertyName: propertyName,
            requestInfo: restService.buildRequestInfo()
        };
        var options = {
            body: body
        };
        return restService.invoke(updateUri, 'PUT', null, options).pipe(switchMap(function (responseInfo) {
            return _this.appendAttachmentInfosToClient(responseInfo.returnValue, isRootEntity);
        }), tap(function () {
            _this.loadingService.hide();
        }));
    };
    /**
     * 创建服务器端需要的更新信息
     */
    AttachmentDataService.prototype.createUpdateAttachInfo = function (attachmentInfoFieldPath, attachmentInfo) {
        var attachmentId = attachmentInfo.attachmentId;
        var parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        var nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
        var hiretryIds = BefDataPathUtil.convertToDataIdsForUpdate(parentBindingPathArray, this.bindingData);
        var serverAttachInfo = {
            NodeCodes: nodeCodes,
            HiretryIds: hiretryIds,
            AttachmentIds: [attachmentId],
            AttachmentId: attachmentId
        };
        return serverAttachInfo;
    };
    /**
     * 创建服务器端需要的批量新增附件信息
     */
    AttachmentDataService.prototype.createBatchCreateAttachInfo = function (attachmentInfoFieldPath, attachmentInfo) {
        var attachmentIds = AttachmentUtil.peekAttachmentIds(attachmentInfo);
        var parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        var nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
        var hiretryIds = BefDataPathUtil.convertToDataIdsForAdd(parentBindingPathArray, this.bindingData);
        var serverAttachInfo = {
            NodeCodes: nodeCodes,
            HiretryIds: hiretryIds,
            AttachmentIds: attachmentIds,
            AttachmentId: null
        };
        return serverAttachInfo;
    };
    /**
     * 同步服务器端最新信息到客户端
     * @todo:
     * 1、主对象批量新增时不支持
     */
    AttachmentDataService.prototype.syncAttachmentInfosToClient = function () {
        var rootDataId = this.bindingData.list.currentId;
        return this.repository.updateEntityById(rootDataId);
    };
    /**
     * 追加主表数据到客户端
     */
    AttachmentDataService.prototype.appendAttachmentInfosToClient = function (listData, isRootEntity) {
        if (isRootEntity === true) {
            var entities = this.repository.buildEntities(listData);
            this.repository.entityCollection.addEntities(entities);
            return of(listData);
        }
        else {
            var rootDataId = this.bindingData.list.currentId;
            return this.repository.updateEntityById(rootDataId).pipe(map(function () { return listData; }));
        }
    };
    AttachmentDataService.prototype.appendAttachmentInfos = function (listData, keyValues) {
        var entities = this.repository.buildEntities(listData);
        this.repository.entityCollection.addEntities(entities);
        // 更新实体使之产生变更集
        this.updateEntities(entities, keyValues);
        return of(listData);
    };
    AttachmentDataService.prototype.updateEntities = function (entities, keyValues) {
        var _this = this;
        entities.forEach(function (entity) {
            _this.updateEntity(entity, keyValues);
        });
    };
    AttachmentDataService.prototype.updateEntity = function (target, keyValues) {
        var _this = this;
        Object.keys(keyValues).forEach(function (key) {
            _this.setValueByPath(target, key, keyValues[key]);
        });
    };
    AttachmentDataService.prototype.setValueByPath = function (target, path, value) {
        if (target) {
            var paths = path.split('.');
            if (paths.length <= 1) {
                target[path] = value;
            }
            else {
                paths.slice(0, -1).reduce(function (prev, path) {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    };
    AttachmentDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AttachmentDataService.ctorParameters = function () { return [
        { type: FrameContext },
        { type: FormLoadingService }
    ]; };
    return AttachmentDataService;
}());
export { AttachmentDataService };
//# sourceMappingURL=data:application/json;base64,