/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject, BehaviorSubject } from 'rxjs';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @Company: Inspur
 * @Version: v0.1.8
 * @Date: 2018-09-18 16:04:05
 * @LastEditTime: 2019-10-17 13:42:45
 */
import { Component, ElementRef, ViewChild, Renderer2, Output, EventEmitter, Input } from '@angular/core';
import { LOADING_STYLES } from './loading.styles';
import { delay, filter, takeUntil } from 'rxjs/operators';
var LoadingComponent = /** @class */ (function () {
    function LoadingComponent(render, el) {
        this.render = render;
        this.el = el;
        this.showMessage = true;
        this.loadingStyleDom = LOADING_STYLES;
        this._isActive = false;
        this.activeSubject = new BehaviorSubject(false);
        this.message = '';
        this.width = 30;
        /**
         * loading 样式
         */
        this.type = 0;
        this.delay = 300;
        this.closed = new EventEmitter();
        this.activedSubscrition = null;
        this.destroy$ = new Subject();
    }
    Object.defineProperty(LoadingComponent.prototype, "isActive", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isActive;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._isActive = val;
            if (this.activeSubject) {
                this.activeSubject.next(val);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    LoadingComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this_1 = this;
        this.activedSubscrition = this.activeSubject.pipe(takeUntil(this.destroy$)).pipe(filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return n;
        })), delay(this.delay)).subscribe((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v && _this_1.isActive) {
                // this.animate('f-component-loading fadeIn animated');
                _this_1.render.setStyle(_this_1.loadingContainerEl.nativeElement, 'display', 'block');
                _this_1.render.setStyle(_this_1.loadingBackdrop.nativeElement, 'display', 'block');
                _this_1.setPosition();
            }
        }));
    };
    /**
     * @return {?}
     */
    LoadingComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    LoadingComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
        // this.activeSubject.complete();
        // this.activeSubject = null;
        // this.activedSubscrition.unsubscribe();
    };
    /**
     * @return {?}
     */
    LoadingComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        // if (this.loadingBackdrop.nativeElement.parentElement) {
        //     this.render.removeChild(this.el.nativeElement, this.loadingBackdrop.nativeElement);
        // }
        // const waitEle = document.body.querySelector('.farris-loading-backdrop');
        if (this.loadingBackdrop) {
            this.loadingBackdrop.nativeElement.remove();
        }
        this.isActive = false;
        this.render.removeAttribute(this.el.nativeElement, 'class');
        // this.animate('f-component-loading fadeOut animated animated-0.5');
        this.closed.emit(this.isActive);
    };
    /**
     * @private
     * @return {?}
     */
    LoadingComponent.prototype.setPosition = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var containerWidth = this.loadingContainerEl.nativeElement.clientWidth;
        /** @type {?} */
        var containerHeight = this.loadingContainerEl.nativeElement.clientHeight;
        this.render.setStyle(this.loadingContainerEl.nativeElement, 'marginTop', -containerHeight / 2 + 'px');
        this.render.setStyle(this.loadingContainerEl.nativeElement, 'marginLeft', -containerWidth / 2 + 'px');
    };
    /**
     * @private
     * @param {?} animateCls
     * @return {?}
     */
    LoadingComponent.prototype.animate = /**
     * @private
     * @param {?} animateCls
     * @return {?}
     */
    function (animateCls) {
        this.addAnimationEndEvent('webkitAnimationEnd', 'mozAnimationEnd', 'MSAnimationEnd', 'oanimationend', 'animationend');
        this.render.setAttribute(this.el.nativeElement, 'class', animateCls);
    };
    /**
     * @private
     * @param {...?} events
     * @return {?}
     */
    LoadingComponent.prototype.addAnimationEndEvent = /**
     * @private
     * @param {...?} events
     * @return {?}
     */
    function () {
        var events = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            events[_i] = arguments[_i];
        }
        /** @type {?} */
        var _this = this;
        events.forEach((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.el.nativeElement.addEventListener(e, (/**
             * @return {?}
             */
            function handler() {
                _this.el.nativeElement.removeEventListener(e, handler);
                // _this.render.removeAttribute(_this.el.nativeElement, 'class');
                ['fadeIn', 'fadeOut', 'animated', 'animated-0.5'].forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    _this.render.removeClass(_this.el.nativeElement, n);
                }));
                _this.closed.emit(_this.isActive);
            }));
        }));
    };
    LoadingComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-loading',
                    template: "\n        <div #loadingBackdrop class=\"farris-loading-backdrop loading-wait\" style=\"display: none\"></div>\n        <div #loadingContainerEl class=\"farris-loading\" style=\"display: none\">\n            <div class=\"ng-busy-default-wrapper\">\n                <div class=\"ng-busy-default-sign\" >\n                    <div [style.width]=\"width+ 'px'\" [style.height]=\"width+'px'\" style=\"display: inline-block;margin:4px;\"\n                                [innerHTML]=\"loadingStyleDom[type] | safe: 'html'\"></div>\n                    <div class=\"ng-busy-default-text\" style=\"margin-left:0;\"\n                                 *ngIf=\"showMessage\" [innerHTML]=\"'loading.message' | locale: '' :message | safe: 'html'\"></div>\n                </div>\n            </div>\n        </div>\n    ",
                    styles: [".loading-wait {\n            cursor: wait\n        }\n        .animated-0.5 {\n            -webkit-animation-duration: 0s;\n            animation-duration: 0s;\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    LoadingComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    LoadingComponent.propDecorators = {
        showMessage: [{ type: Input }],
        loadingContainerEl: [{ type: ViewChild, args: ['loadingContainerEl',] }],
        loadingBackdrop: [{ type: ViewChild, args: ['loadingBackdrop',] }],
        closed: [{ type: Output }]
    };
    return LoadingComponent;
}());
export { LoadingComponent };
if (false) {
    /** @type {?} */
    LoadingComponent.prototype.showMessage;
    /** @type {?} */
    LoadingComponent.prototype.loadingStyleDom;
    /** @type {?} */
    LoadingComponent.prototype.id;
    /**
     * @type {?}
     * @private
     */
    LoadingComponent.prototype._isActive;
    /**
     * @type {?}
     * @private
     */
    LoadingComponent.prototype.activeSubject;
    /** @type {?} */
    LoadingComponent.prototype.message;
    /** @type {?} */
    LoadingComponent.prototype.width;
    /**
     * loading 样式
     * @type {?}
     */
    LoadingComponent.prototype.type;
    /** @type {?} */
    LoadingComponent.prototype.delay;
    /** @type {?} */
    LoadingComponent.prototype.loadingContainerEl;
    /** @type {?} */
    LoadingComponent.prototype.loadingBackdrop;
    /** @type {?} */
    LoadingComponent.prototype.closed;
    /** @type {?} */
    LoadingComponent.prototype.activedSubscrition;
    /**
     * @type {?}
     * @private
     */
    LoadingComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    LoadingComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    LoadingComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,