/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { cloneDeep } from 'lodash-es';
export class SearchHandle {
    /**
     * @param {?} ttInstance
     */
    constructor(ttInstance) {
        this.ttInstance = ttInstance;
        this.allNodes = [];
    }
    // 刷新查询结果
    /**
     * @param {?=} from
     * @return {?}
     */
    research(from = 'client') {
        const { field, value } = this.ttInstance.searchData;
        this.allNodes = [];
        this.search(field, value, from);
    }
    /**
     * @param {?} field
     * @param {?} value
     * @param {?=} from
     * @return {?}
     */
    search(field, value, from = 'client') {
        if (!this.allNodes.length) {
            this.allNodes = cloneDeep(this.ttInstance.state.rowNodes);
        }
        switch (from) {
            case 'server':
                this.searchOnServer(field, value);
                break;
            default:
                if (value !== '' && value !== undefined) {
                    /** @type {?} */
                    const values = this.searchOnClient(field, value, this.allNodes);
                    this.ttInstance.state.searchRowNodes = null;
                    this._updateSerializedValues(values);
                }
                else {
                    this.ttInstance.updateSerializedValue();
                }
                if (this.ttInstance.checkeds && this.ttInstance.checkeds.length) {
                    this.ttInstance.checkedNodes(this.ttInstance.checkeds.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.data[this.ttInstance.idField])));
                }
                else {
                    this.ttInstance.resize();
                    this.ttInstance.detectChanges();
                    if (this.ttInstance.psRef) {
                        this.ttInstance.psRef.directiveRef.update();
                    }
                }
                break;
        }
    }
    /**
     * @private
     * @param {?} visibleItems
     * @return {?}
     */
    _updateSerializedValues(visibleItems) {
        /** @type {?} */
        const pids = ((/** @type {?} */ (visibleItems.map((/**
         * @param {?} n
         * @return {?}
         */
        n => [...n.parents, n.id]))))).flat();
        /** @type {?} */
        const pidArr = Array.from(new Set(pids));
        /** @type {?} */
        const rowNodes = this.allNodes.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => pidArr.some((/**
         * @param {?} item
         * @return {?}
         */
        item => item == n.id)))).map((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            r.expanded = true;
            this.ttInstance.updateNodeProperty(r.id, { expanded: true });
            return r;
        }));
        this.ttInstance.serializedValue = this.resetTreeData(null, rowNodes);
        this.ttInstance.state.searchRowNodes = this.ttInstance.serializedValue;
    }
    /**
     * @param {?} item
     * @param {?} allNodes
     * @return {?}
     */
    findParent(item, allNodes) {
        /** @type {?} */
        let res = [];
        if (item && allNodes && allNodes.length) {
            /** @type {?} */
            const p = allNodes.find((/**
             * @param {?} t1
             * @return {?}
             */
            t1 => t1.id === item.data[this.ttInstance.idField]));
            res.push(p);
            if (p.parent) {
                res = res.concat(this.findParent(p.parent, allNodes));
            }
        }
        return res;
    }
    /**
     * @private
     * @param {?} item
     * @param {?} value
     * @param {?=} fields
     * @return {?}
     */
    searchExpression(item, value, fields = []) {
        /** @type {?} */
        const _fields = fields.length ? fields : this.ttInstance.columns.map((/**
         * @param {?} c
         * @return {?}
         */
        c => c.field));
        /** @type {?} */
        const results = _fields.map((/**
         * @param {?} f
         * @return {?}
         */
        f => {
            /** @type {?} */
            const targetValue = '' + this.getValue(f, item.node.data);
            if (targetValue !== undefined) {
                if (typeof targetValue === 'number') {
                    return targetValue === parseFloat(value);
                }
                else {
                    return targetValue.indexOf(value) > -1;
                }
            }
            else {
                this.ttInstance.writeConsole(`不存在列 ${f}`);
            }
        }));
        return results.reduce((/**
         * @param {?} flag
         * @param {?} curr
         * @return {?}
         */
        (flag, curr) => {
            return flag || curr;
        }), false);
    }
    /**
     * @private
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    getValue(field, data) {
        if (field) {
            if (field.indexOf('.') > -1) {
                try {
                    return field.split('.').reduce((/**
                     * @param {?} r
                     * @param {?} f
                     * @return {?}
                     */
                    (r, f) => {
                        if (r) {
                            return r[f];
                        }
                        else {
                            return null;
                        }
                    }), data);
                }
                catch (_a) {
                    this.ttInstance.writeConsole(`字段 ${field} 不存在。`);
                }
            }
            else {
                return data[field];
            }
        }
    }
    /**
     * @param {?} field
     * @param {?} value
     * @param {?} nodes
     * @return {?}
     */
    getFindTextTotal(field, value, nodes) {
        /** @type {?} */
        let t = 0;
        /** @type {?} */
        const getCount = (/**
         * @param {?} fields
         * @return {?}
         */
        (fields) => {
            /** @type {?} */
            let c = 0;
            nodes.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                fields.forEach((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => {
                    /** @type {?} */
                    const targetValue = '' + this.getValue(f, n.node.data);
                    if (targetValue !== undefined) {
                        if (targetValue.indexOf(value) > -1) {
                            c++;
                        }
                    }
                }));
            }));
            return c;
        });
        /** @type {?} */
        let _fields = [field];
        if (field === '*') {
            _fields = this.ttInstance.columns.map((/**
             * @param {?} c
             * @return {?}
             */
            c => c.field));
        }
        else if (field.indexOf(',') > -1) {
            _fields = field.split(',').map((/**
             * @param {?} f
             * @return {?}
             */
            f => f.trim()));
        }
        t = getCount(_fields);
        return t;
    }
    /**
     * @param {?} field
     * @param {?} value
     * @param {?} nodes
     * @return {?}
     */
    searchOnClient(field, value, nodes) {
        /** @type {?} */
        let resultNodes = [];
        if (!value) {
            return [];
        }
        if (field === '*') {
            resultNodes = nodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => this.searchExpression(n, value)));
        }
        else if (field.indexOf(',') > -1) {
            resultNodes = nodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => this.searchExpression(n, value, field.split(',').map((/**
             * @param {?} f
             * @return {?}
             */
            f => f.trim())))));
        }
        else {
            value = value.toLowerCase();
            if (field.indexOf('.') === -1) {
                resultNodes = nodes.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => ('' + n.node.data[field]).toLowerCase().indexOf(value) > -1));
            }
            else {
                resultNodes = nodes.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => ('' + this.getValue(field, n.node.data)).toLowerCase().indexOf(value) > -1));
            }
        }
        return resultNodes;
    }
    /**
     * @param {?} rowNodes
     * @param {?} allNodes
     * @return {?}
     */
    findParents(rowNodes, allNodes) {
        /** @type {?} */
        let res = [];
        rowNodes.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            res = res.concat(this.findParent(item.node, allNodes));
        }));
        return Array.from(new Set(res));
    }
    /**
     * @private
     * @param {?} parentNode
     * @param {?} visibleItems
     * @return {?}
     */
    resetTreeData(parentNode, visibleItems) {
        /** @type {?} */
        let res = [];
        /** @type {?} */
        let arr = [];
        if (parentNode === null) {
            arr = visibleItems.filter((/**
             * @param {?} t2
             * @return {?}
             */
            t2 => t2.parent === parentNode));
        }
        else {
            parentNode.node.expanded = true;
            arr = visibleItems.filter((/**
             * @param {?} t2
             * @return {?}
             */
            t2 => t2.parent && t2.parent.data[this.ttInstance.idField] === parentNode.id));
            if (!arr.length) {
                parentNode.node.children = [];
            }
            else {
                parentNode.node.children = arr.map((/**
                 * @param {?} tn
                 * @return {?}
                 */
                tn => tn.node));
            }
        }
        arr.forEach((/**
         * @param {?} a
         * @return {?}
         */
        a => {
            a.visible = true;
            res.push(a);
            res = res.concat(this.resetTreeData(a, visibleItems));
        }));
        return res;
    }
    /**
     * @private
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    searchOnServer(field, value) {
    }
}
if (false) {
    /** @type {?} */
    SearchHandle.prototype.allNodes;
    /**
     * @type {?}
     * @private
     */
    SearchHandle.prototype.ttInstance;
}
//# sourceMappingURL=data:application/json;base64,