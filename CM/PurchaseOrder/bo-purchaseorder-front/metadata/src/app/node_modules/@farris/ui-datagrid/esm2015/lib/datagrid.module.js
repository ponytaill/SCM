/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:53
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-28 09:28:28
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { NgModule, ErrorHandler } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { HttpClientModule } from '@angular/common/http';
import { DataColumnModule } from '@farris/ui-common/column';
import { LocaleModule } from '@farris/ui-locale';
import { NotifyModule } from '@farris/ui-notify';
import { PaginationModule } from '@farris/ui-pagination';
import { SimpleFilterModule } from '@farris/ui-filter';
// import { FilterPanelModule, FilterPanelComponent } from '@farris/ui-filter-panel';
import { DatagridSmartFilterModule } from './plugins/smart-filter/datagrid-smart-filter.module';
import { DatagridComponent } from './datagrid.component';
import { NgxPaginationModule } from './pagination/ngx-pagination.module';
import { DatagridPagerComponent } from './components/pager/pager.component';
import { DataGridLoadingComponent } from './components/loading.component';
import { DatagridHeaderComponent, FilterRowCreateDirective } from './components/header/datagrid-header.component';
import { DatagridCellEditableDirective } from './components/body/datagrid-cell-editable.directive';
import { DatagridCellComponent } from './components/body/datagrid-cell.component';
import { DatagridRowDirective } from './components/body/datagrid-row.directive';
import { DatagridBodyComponent } from './components/body/datagrid-body.component';
import { DatagridCellEditorDirective } from './components/columns/column-cell-edit.directive';
import { DatagridColumnDirective } from './components/columns/datagrid-column.directive';
import { GridCellEditorDirective } from './components/editors/cell-editor.directive';
import { ScrollbarModule } from './scrollbar/scrollbar.module';
import { SCROLLBAR_CONFIG } from './scrollbar/scrollbar.interfaces';
import { DatagridRowHoverDirective } from './components/body/datagrid-row-hover.directive';
import { DatagridRowsComponent } from './components/body/datagrid-rows.component';
import { DatagridCheckboxComponent } from './components/checkbox/datagrid-checkbox.component';
import { DatagridHeaderCheckboxComponent } from './components/checkbox/datagrid-header-checkbox.component';
import { DatagridResizeColumnDirective } from './components/header/datagrid-resize-column.directive';
import { DatagridFooterComponent } from './components/footer/datagrid-footer.component';
import { SafePipe } from './utils/safe.pipe';
import { FormatCellDataPipe } from './utils/format-cell-data.pipe';
import { RowDataIdPipe } from './utils/rowid.pipe';
import { FormatGroupRowPipe } from './utils/format-group-row.pipe';
import { FixedLeftRowsComponent } from './components/body/fixed-left-rows.component';
/** 兼容下老版本 */
import { TextboxEditorComponent } from './components/editors/text-editor.component';
import { ReplaceXPipe } from './utils/rexplaceX.pipe';
import { DatagridGroupRowDirective } from './components/body/datagrid-grouprow.directive';
import { ShowRequiredStarPipe } from './utils/show-required-label.pipe';
import { DisableRowPipe } from './utils/disable-row.pipe';
import { SelectedRowPipe } from './utils/select-row.pipe';
import { FieldValuePipe } from './utils/field-value.pipe';
import { DatagridCellTooltipDirective } from './components/tooltip/cell-tooltip.directive';
import { CellTootipMessagePipe } from './components/tooltip/tip-message.pipe';
import { DatagridFilterToolbarComponent } from './components/filter-toolbar/filter-toolbar.component';
import { HeaderStyleDirective } from './components/header/header-style.directive';
import { AutoHeightComponent } from './components/auto-height/auto-height.component';
import { RowIsSelectedPipe } from './utils/row-is-selected.pipe';
import { RowIsCheckedPipe } from './utils/row-is-checked.pipe';
import { DatagridErrorHandler } from './datagrid-error-handler';
import { AutoHeightDirective } from './components/auto-height/auto-height.directive';
import { ValidatorMessagerService } from './services/validator-messager.service';
import { PagerSelectedListComponent } from './components/pager/selected-list/selected-list.component';
import { SelectedItemPipe } from './components/pager/selected-item.pipe';
import { DatagridRowDblClickDirective } from './components/body/datagrid-row-dblclick.directive';
import { FooterCellStylerDirective } from './components/footer/datagrid-footer-cell.styler.directive';
import { DragColumnDirective } from './components/header/datagrid-drag-column.directive';
import { DropColumnDirective } from './components/header/datagrid-drop-column.directive';
import { SmartFilterToolbarComponent } from './components/filter-toolbar/smart-filter-toolbar.component';
import { FarrisContextMenuModule } from '@farris/ui-context-menu';
import { GroupFooterRowStylerDirective } from './components/body/datagrid-group-footer-styler.directive';
import { CellIsReadonlyPipe } from './utils/cell-readonly.pipe';
/** @type {?} */
const DEFAULT_PERFECT_SCROLLBAR_CONFIG = {
    minScrollbarLength: 20
};
const ɵ0 = DEFAULT_PERFECT_SCROLLBAR_CONFIG;
export class DatagridModule {
    /**
     * @param {?=} editors
     * @return {?}
     */
    static forRoot(editors) {
        return {
            ngModule: DatagridModule,
            providers: editors || []
        };
    }
}
DatagridModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    HttpClientModule,
                    PaginationModule,
                    NgxPaginationModule,
                    ScrollbarModule,
                    LocaleModule.forRoot(),
                    DataColumnModule.forRoot(),
                    NotifyModule.forRoot(),
                    SimpleFilterModule,
                    DatagridSmartFilterModule,
                    FarrisContextMenuModule
                ],
                declarations: [
                    SafePipe,
                    FormatCellDataPipe,
                    RowDataIdPipe,
                    FormatGroupRowPipe,
                    ShowRequiredStarPipe,
                    FieldValuePipe,
                    ReplaceXPipe,
                    DisableRowPipe,
                    SelectedRowPipe,
                    CellIsReadonlyPipe,
                    CellTootipMessagePipe,
                    DatagridComponent,
                    DatagridHeaderComponent,
                    DatagridFooterComponent,
                    DatagridResizeColumnDirective,
                    DatagridCellEditableDirective,
                    DatagridCellComponent,
                    DatagridRowDirective,
                    DatagridBodyComponent,
                    DatagridPagerComponent,
                    DatagridCellEditorDirective,
                    DatagridColumnDirective,
                    DatagridRowsComponent,
                    FixedLeftRowsComponent,
                    DatagridRowHoverDirective,
                    DataGridLoadingComponent,
                    DatagridCheckboxComponent,
                    DatagridHeaderCheckboxComponent,
                    GridCellEditorDirective,
                    TextboxEditorComponent,
                    DatagridGroupRowDirective,
                    DatagridCellTooltipDirective,
                    DatagridFilterToolbarComponent,
                    HeaderStyleDirective,
                    AutoHeightDirective,
                    AutoHeightComponent,
                    RowIsSelectedPipe,
                    RowIsCheckedPipe,
                    SelectedItemPipe,
                    PagerSelectedListComponent,
                    DatagridRowDblClickDirective,
                    FooterCellStylerDirective,
                    DragColumnDirective,
                    DropColumnDirective,
                    FilterRowCreateDirective,
                    SmartFilterToolbarComponent,
                    GroupFooterRowStylerDirective,
                ],
                providers: [
                    { provide: ErrorHandler, useClass: DatagridErrorHandler },
                    {
                        provide: SCROLLBAR_CONFIG,
                        useValue: ɵ0
                    },
                    ValidatorMessagerService
                ],
                exports: [
                    SafePipe,
                    DatagridComponent,
                    DatagridHeaderComponent,
                    DatagridColumnDirective,
                    DatagridCellEditorDirective,
                    DatagridCellEditableDirective,
                    DatagridRowHoverDirective,
                    DatagridResizeColumnDirective,
                    TextboxEditorComponent,
                    FormatCellDataPipe,
                    RowDataIdPipe,
                    ReplaceXPipe,
                    FieldValuePipe,
                    CellTootipMessagePipe,
                    ShowRequiredStarPipe,
                    DatagridCellTooltipDirective,
                    DatagridFilterToolbarComponent,
                    RowIsSelectedPipe,
                    RowIsCheckedPipe,
                    DatagridRowDblClickDirective,
                    FooterCellStylerDirective,
                    DragColumnDirective,
                    DropColumnDirective,
                    FilterRowCreateDirective,
                    SmartFilterToolbarComponent,
                    DatagridSmartFilterModule,
                    GroupFooterRowStylerDirective,
                    FarrisContextMenuModule,
                    CellIsReadonlyPipe
                ],
                entryComponents: [
                // FilterPanelComponent
                ]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,