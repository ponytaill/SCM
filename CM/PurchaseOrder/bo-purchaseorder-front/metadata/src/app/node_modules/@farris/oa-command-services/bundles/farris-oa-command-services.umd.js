(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@farris/ui-messager'), require('@angular/core'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@farris/oa-command-services', ['exports', '@farris/ui-messager', '@angular/core', 'rxjs'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['oa-command-services'] = {}),global.uiMessager,global.ng.core,global.rxjs));
}(this, (function (exports,uiMessager,i0,rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/print-web-page/entity.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var templateType = {
        card: "card",
    };

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/print-web-page/print-web-page.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PrintWebPageService = /** @class */ (function () {
        function PrintWebPageService(msgSer) {
            var _this = this;
            this.msgSer = msgSer;
            window.onbeforeprint = ( /**
             * @return {?}
             */function () {
                if (_this.currentTemplate == templateType.card) {
                    /** @type {?} */
                    var rootLayout = document.getElementById('root-layout');
                    /** @type {?} */
                    var mainContainer = document.getElementById('main-container');
                    if (rootLayout && mainContainer) {
                        rootLayout.style.display = 'block';
                        rootLayout.style.position = 'relative';
                        mainContainer.style.display = 'block';
                        rootLayout.parentElement.style.position = 'relative';
                        document.title = '';
                    }
                    else {
                        _this.msgSer.error('未找到模板中关键节点，请检查命令传参中模板类型是否正确。');
                    }
                }
            });
            window.onafterprint = ( /**
             * @return {?}
             */function () {
                if (_this.currentTemplate == templateType.card) {
                    /** @type {?} */
                    var rootLayout = document.getElementById('root-layout');
                    /** @type {?} */
                    var mainContainer = document.getElementById('main-container');
                    if (rootLayout && mainContainer) {
                        mainContainer.setAttribute('style', '');
                        rootLayout.setAttribute('style', '');
                        rootLayout.parentElement.setAttribute('style', '');
                    }
                }
            });
        }
        /**
         * @param {?=} tempType
         * @return {?}
         */
        PrintWebPageService.prototype.printWebPage = /**
         * @param {?=} tempType
         * @return {?}
         */
            function (tempType) {
                if (tempType === void 0) {
                    tempType = templateType.card;
                }
                this.currentTemplate = tempType;
                if (!window.navigator.userAgent.includes('AppleWebKit/')) {
                    this.msgSer.prompt('提示', '为保证打印效果，推荐使用谷歌浏览器进行打印。是否继续打印？').subscribe(( /**
                     * @param {?} confirmed
                     * @return {?}
                     */function (confirmed) {
                        if (confirmed) {
                            window.print();
                        }
                    }));
                }
                else {
                    window.print();
                }
            };
        PrintWebPageService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        PrintWebPageService.ctorParameters = function () {
            return [
                { type: uiMessager.MessagerService }
            ];
        };
        return PrintWebPageService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/task-center-bridge/entity.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var WFActionType = {
        Resubmit: "Resubmit",
    };

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/task-center-bridge/task-center-bridge.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TaskCenterBridgeService = /** @class */ (function () {
        function TaskCenterBridgeService() {
        }
        /**
         * @param {?} customerCmds
         * @return {?}
         */
        TaskCenterBridgeService.prototype.initTaskCenterBridge = /**
         * @param {?} customerCmds
         * @return {?}
         */
            function (customerCmds) {
                var _this = this;
                /** @type {?} */
                var bridgeWin = window.parent;
                /** @type {?} */
                var frameContext;
                try {
                    frameContext = this['context'].frameContext;
                }
                catch (error) {
                    throw new Error('can not find frameContex');
                }
                /** @type {?} */
                var slienceSaveTask;
                try {
                    slienceSaveTask = this['context'].frameContext.viewModel.slienceSave1;
                }
                catch (error) {
                    // 不存在静音保存命令
                }
                if (bridgeWin) {
                    bridgeWin['taskCenterBeforeLoad'] = ( /**
                     * @param {?} actionObj
                     * @return {?}
                     */function (actionObj) {
                        return new Promise(( /**
                         * @param {?} resolve
                         * @param {?} reject
                         * @return {?}
                         */function (resolve, reject) {
                            var action = actionObj.action;
                            if (frameContext.uiState['UIStateInProcess'] == 'Approving' && frameContext.uiState['formConfigId']) {
                                slienceSaveTask.call(_this).subscribe(( /**
                                 * @return {?}
                                 */function () {
                                    resolve({
                                        result: true
                                    });
                                }), ( /**
                                 * @return {?}
                                 */function () {
                                    window.document.body.click();
                                    resolve({
                                        result: false
                                    });
                                }));
                            }
                            else if (action.code == WFActionType.Resubmit && slienceSaveTask) {
                                slienceSaveTask.call(_this).subscribe(( /**
                                 * @return {?}
                                 */function () {
                                    resolve({
                                        result: true
                                    });
                                }));
                            }
                            else {
                                resolve({
                                    result: true
                                });
                            }
                        }));
                    });
                }
            };
        TaskCenterBridgeService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TaskCenterBridgeService.ctorParameters = function () { return []; };
        /** @nocollapse */ TaskCenterBridgeService.ngInjectableDef = i0.defineInjectable({ factory: function TaskCenterBridgeService_Factory() { return new TaskCenterBridgeService(); }, token: TaskCenterBridgeService, providedIn: "root" });
        return TaskCenterBridgeService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/transit-approval/transit-approval.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TransitApprovalStatus = /** @class */ (function () {
        function TransitApprovalStatus(injetor) {
            this.injetor = injetor;
            // 因为注位置的问题，这样子拿不到
            // this.stateMachineSer = this.injetor.get(StateMachineService);
        }
        /**
         * @return {?}
         */
        TransitApprovalStatus.prototype.switchStatus = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var result = new rxjs.BehaviorSubject('Cancel');
                //  判断流程传参  formConfigId
                /** @type {?} */
                var frameContext;
                try {
                    frameContext = this['context'].frameContext;
                }
                catch (error) {
                    throw new Error('can not find frameContex');
                }
                if (frameContext.uiState['UIStateInProcess'] == 'Approving' && frameContext.uiState['formConfigId']) {
                    result.next('Edit');
                }
                return result;
            };
        TransitApprovalStatus.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        TransitApprovalStatus.ctorParameters = function () {
            return [
                { type: i0.Injector }
            ];
        };
        return TransitApprovalStatus;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/oa-command-services-module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OACommandServicesModule = /** @class */ (function () {
        function OACommandServicesModule() {
        }
        OACommandServicesModule.decorators = [
            { type: i0.NgModule, args: [{
                        providers: [
                            TaskCenterBridgeService,
                            PrintWebPageService,
                            TransitApprovalStatus,
                        ],
                        imports: [],
                        exports: [],
                        entryComponents: []
                    },] }
        ];
        /** @nocollapse */
        OACommandServicesModule.ctorParameters = function () { return []; };
        return OACommandServicesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: public-api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: farris-oa-command-services.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.OACommandServicesModule = OACommandServicesModule;
    exports.PrintWebPageService = PrintWebPageService;
    exports.TaskCenterBridgeService = TaskCenterBridgeService;
    exports.TransitApprovalStatus = TransitApprovalStatus;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-oa-command-services.umd.js.map