/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, Injector, EventEmitter, Output, ChangeDetectorRef } from '@angular/core';
import { MultiSelectComponent } from '@farris/ui-multi-select';
export class DatagridViewColumnsComponent {
    /**
     * @param {?} injector
     * @param {?} cd
     */
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.idField = 'field';
        this.valueField = 'field';
        this.textField = 'title';
        this._selectedIds = [];
        this.treeData = [];
        this.selectedIdsChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get selectedIds() {
        return this._selectedIds;
    }
    /**
     * @param {?} vals
     * @return {?}
     */
    set selectedIds(vals) {
        this._selectedIds = vals;
        this.selectedIdsChange.emit(vals);
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onBeforeMove($event) {
    }
    /**
     * @param {?} $event
     * @param {?} column
     * @return {?}
     */
    hiddenColumn($event, column) {
        $event.stopPropagation();
        this.ms.moveToLeft(column);
    }
}
DatagridViewColumnsComponent.decorators = [
    { type: Component, args: [{
                selector: 'view-columns',
                template: "<multi-select [dataSource]=\"treeData\" [idField]=\"idField\" [valueField]=\"valueField\"\r\n[textField]=\"textField\" [displayType]=\"'Tree'\" style=\"height: 100%\" [height]=\"0\" [showCheckbox]=\"false\"\r\n[(selectedId)]=\"selectedIds\" [leftTitle]=\"'datagrid.settings.canchoose'|locale\" \r\n[rightTitle]=\"'datagrid.settings.choosed'|locale\" #ms (beforeMove)=\"onBeforeMove($event)\">\r\n    <ng-template farrisTemplate=\"text\" let-data let-side=\"side\" let-selected=\"selected\">\r\n        <ng-container *ngIf=\"side === 'L'\">\r\n            {{ data[textField] }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"side === 'R' \">\r\n\r\n            {{ data[textField] }} \r\n\r\n\r\n            <span class=\"sort-btns\" >\r\n                <a href=\"javascript: void(0)\" class=\" p-1\" (click)=\"hiddenColumn($event, data)\">\r\n                    <span class=\"f-icon f-icon-close\"></span>\r\n                </a>\r\n            </span>\r\n\r\n        </ng-container>\r\n    </ng-template>\r\n</multi-select>"
            }] }
];
/** @nocollapse */
DatagridViewColumnsComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
DatagridViewColumnsComponent.propDecorators = {
    idField: [{ type: Input }],
    valueField: [{ type: Input }],
    textField: [{ type: Input }],
    selectedIds: [{ type: Input }],
    treeData: [{ type: Input }],
    ms: [{ type: ViewChild, args: ['ms',] }],
    selectedIdsChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DatagridViewColumnsComponent.prototype.idField;
    /** @type {?} */
    DatagridViewColumnsComponent.prototype.valueField;
    /** @type {?} */
    DatagridViewColumnsComponent.prototype.textField;
    /**
     * @type {?}
     * @private
     */
    DatagridViewColumnsComponent.prototype._selectedIds;
    /** @type {?} */
    DatagridViewColumnsComponent.prototype.treeData;
    /** @type {?} */
    DatagridViewColumnsComponent.prototype.ms;
    /** @type {?} */
    DatagridViewColumnsComponent.prototype.selectedIdsChange;
    /**
     * @type {?}
     * @private
     */
    DatagridViewColumnsComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridViewColumnsComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtdmlldy1jb2x1bW5zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtc2V0dGluZ3MvIiwic291cmNlcyI6WyJsaWIvZGF0YWdyaWQtdmlldy1jb2x1bW5zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFVLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQ2hFLE1BQU0sRUFBRSxpQkFBaUIsRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFLL0QsTUFBTSxPQUFPLDRCQUE0Qjs7Ozs7SUFvQnJDLFlBQW9CLFFBQWtCLEVBQVUsRUFBcUI7UUFBakQsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBbkI1RCxZQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ2xCLGVBQVUsR0FBRyxPQUFPLENBQUM7UUFDckIsY0FBUyxHQUFHLE9BQU8sQ0FBQztRQUdyQixpQkFBWSxHQUFHLEVBQUUsQ0FBQztRQVNqQixhQUFRLEdBQUcsRUFBRSxDQUFDO1FBR2Isc0JBQWlCLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUV1QixDQUFDOzs7O0lBYnpFLElBQUksV0FBVztRQUNYLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDOzs7OztJQUNELElBQWEsV0FBVyxDQUFDLElBQUk7UUFDekIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDOzs7O0lBVUQsUUFBUSxLQUFJLENBQUM7Ozs7O0lBRWIsV0FBVyxDQUFDLE9BQXNCO0lBRWxDLENBQUM7Ozs7O0lBRUQsWUFBWSxDQUFDLE1BQU07SUFFbkIsQ0FBQzs7Ozs7O0lBRUQsWUFBWSxDQUFDLE1BQWtCLEVBQUUsTUFBVztRQUN4QyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7O1lBeENKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsY0FBYztnQkFDeEIsMGhDQUFxRDthQUN4RDs7OztZQU42QyxRQUFRO1lBQzFDLGlCQUFpQjs7O3NCQU94QixLQUFLO3lCQUNMLEtBQUs7d0JBQ0wsS0FBSzswQkFPTCxLQUFLO3VCQUtMLEtBQUs7aUJBQ0wsU0FBUyxTQUFDLElBQUk7Z0NBRWQsTUFBTTs7OztJQWpCUCwrQ0FBMkI7O0lBQzNCLGtEQUE4Qjs7SUFDOUIsaURBQTZCOzs7OztJQUc3QixvREFBMEI7O0lBUzFCLGdEQUF1Qjs7SUFDdkIsMENBQTBDOztJQUUxQyx5REFBaUQ7Ozs7O0lBRXJDLGdEQUEwQjs7Ozs7SUFBRSwwQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIENvbXBvbmVudCwgSW5wdXQsIFZpZXdDaGlsZCwgSW5qZWN0b3IsIEV2ZW50RW1pdHRlcixcclxuICAgIE91dHB1dCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNdWx0aVNlbGVjdENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktbXVsdGktc2VsZWN0JztcclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3ZpZXctY29sdW1ucycsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vZGF0YWdyaWQtdmlldy1jb2x1bW5zLmNvbXBvbmVudC5odG1sJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGFncmlkVmlld0NvbHVtbnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XHJcbiAgICBASW5wdXQoKSBpZEZpZWxkID0gJ2ZpZWxkJztcclxuICAgIEBJbnB1dCgpIHZhbHVlRmllbGQgPSAnZmllbGQnO1xyXG4gICAgQElucHV0KCkgdGV4dEZpZWxkID0gJ3RpdGxlJztcclxuXHJcblxyXG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWRJZHMgPSBbXTtcclxuICAgIGdldCBzZWxlY3RlZElkcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWRJZHM7XHJcbiAgICB9XHJcbiAgICBASW5wdXQoKSBzZXQgc2VsZWN0ZWRJZHModmFscykge1xyXG4gICAgICAgIHRoaXMuX3NlbGVjdGVkSWRzID0gdmFscztcclxuICAgICAgICB0aGlzLnNlbGVjdGVkSWRzQ2hhbmdlLmVtaXQodmFscyk7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KCkgdHJlZURhdGEgPSBbXTtcclxuICAgIEBWaWV3Q2hpbGQoJ21zJykgbXM6IE11bHRpU2VsZWN0Q29tcG9uZW50O1xyXG5cclxuICAgIEBPdXRwdXQoKSBzZWxlY3RlZElkc0NoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XHJcblxyXG5cclxuICAgIG5nT25Jbml0KCkge31cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG9uQmVmb3JlTW92ZSgkZXZlbnQpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgaGlkZGVuQ29sdW1uKCRldmVudDogTW91c2VFdmVudCwgY29sdW1uOiBhbnkpIHtcclxuICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5tcy5tb3ZlVG9MZWZ0KGNvbHVtbik7XHJcbiAgICB9XHJcbn1cclxuIl19