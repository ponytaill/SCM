import { DateUtil } from '../utils/date_util';
/**
 * 验证器工厂
 */
class ValidatorFactory {
    /**
     * 创建适配器
     */
    static create(validRules) {
        let validatorFn = [];
        if (Array.isArray(validRules) && validRules.length > 1) {
            validRules.forEach((validRule) => {
                validatorFn.push(this.initValidRuleFn(validRule));
            });
        }
        else if (Array.isArray(validRules) && validRules.length === 1) {
            validatorFn.push(this.initValidRuleFn(validRules[0]));
        }
        else {
            validatorFn.push(this.initValidRuleFn(validRules));
        }
        return validatorFn;
    }
    static initValidRuleFn(validRule) {
        const { type, constraints, message } = validRule;
        switch (type) {
            case 'required':
                return (v) => {
                    if (constraints[0] === true) {
                        if (null === v || undefined === v || '' === v) {
                            return { passing: false, message: message || '必填' };
                        }
                        else {
                            return { passing: true, message: '' };
                        }
                    }
                };
            case 'NumberMaxValue':
                return (v) => {
                    if (typeof v !== 'number') {
                        return;
                    }
                    if (constraints[0] || 0 == constraints[0]) {
                        if (v <= parseFloat(constraints[0])) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || `输入值不能大于${constraints[0]}` };
                        }
                    }
                };
            case 'NumberMinValue':
                return (v) => {
                    if (typeof v !== 'number') {
                        return;
                    }
                    if (constraints[0] || 0 == constraints[0]) {
                        if (v >= parseFloat(constraints[0])) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || `输入值不能小于${constraints[0]}` };
                        }
                    }
                };
            case 'DateMaxValue':
                return (v) => {
                    if (constraints[0]) {
                        if (DateUtil.isBefore(v, constraints[0]) || DateUtil.isSame(v, constraints[0])) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || `输入日期不能大于${constraints[0]}` };
                        }
                    }
                };
            case 'DateMinValue':
                return (v) => {
                    if (constraints[0]) {
                        if (DateUtil.isAfter(v, constraints[0]) || DateUtil.isSame(v, constraints[0])) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || `输入日期不能小于${constraints[0]}` };
                        }
                    }
                };
            case 'StringMaxLength':
                return (v) => {
                    if (constraints[0]) {
                        if (v.length <= constraints[0]) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || `输入值长度不能大于${constraints[0]}` };
                        }
                    }
                };
            case 'StringMinLength':
                return (v) => {
                    if (constraints[0]) {
                        if (v.length >= constraints[0]) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || `输入值长度不能小于${constraints[0]}` };
                        }
                    }
                };
            case 'regex':
                return (v) => {
                    let constraintsTemp = [];
                    if (typeof constraints[0] === 'string') {
                        constraintsTemp = constraints[0].split(',');
                    }
                    for (let i = 0; i < constraintsTemp.length; i++) {
                        if (constraintsTemp[i] === '') {
                            return;
                        }
                        const re = new RegExp(constraintsTemp[i]);
                        if (re.test(v)) {
                            return { passing: false, message: message || `存在不可输入项${constraints[0]}` };
                        }
                        else {
                            return { passing: true, message: '' };
                        }
                    }
                };
            case 'customFunction':
                return (v) => {
                    if (typeof constraints[0] === 'function') {
                        let message = constraints[0](v);
                        if (!message) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message };
                        }
                    }
                };
            default:
                return () => {
                    return { passing: true, message: '' };
                };
        }
    }
    /**
     * 遍历生成的校验方法对当前值进行校验，当发现错误就返回校验结果
     * 遍历完成没有错误则返回校验通过结果
     * @param validatorFn 校验方法
     * @param value 当前值
     */
    static executeValidator(validatorFn, value) {
        for (let i = 0; i < validatorFn.length; i++) {
            let validationResult = validatorFn[i](value);
            if (validationResult['passing'] === false) {
                return validationResult;
            }
        }
        return { passing: true, message: '' };
    }
}
export { ValidatorFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3ZhbGlkYXRvci92YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBQzdDOztHQUVHO0FBQ0gsTUFBTSxnQkFBZ0I7SUFDbEI7O09BRUc7SUFDSCxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQTZDO1FBQ3ZELElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDcEQsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQXlCLEVBQUUsRUFBRTtnQkFDN0MsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUE7WUFDckQsQ0FBQyxDQUFDLENBQUE7U0FDTDthQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM3RCxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUN4RDthQUFNO1lBQ0gsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQTRCLENBQUMsQ0FBQyxDQUFBO1NBQ3ZFO1FBQ0QsT0FBTyxXQUFXLENBQUM7SUFDdkIsQ0FBQztJQUVPLE1BQU0sQ0FBQyxlQUFlLENBQUMsU0FBeUI7UUFDcEQsTUFBTSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLEdBQUcsU0FBUyxDQUFDO1FBQ2pELFFBQVEsSUFBSSxFQUFFO1lBQ1YsS0FBSyxVQUFV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RUFBRSxFQUFFLEVBQUUsQ0FBQTt5QkFDeEM7NkJBQU07NEJBQ0gsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUE7eUJBQ3JDO3FCQUNKO2dCQUNMLENBQUMsQ0FBQTtZQUNMO2dCQUNJLE9BQU8sR0FBRyxFQUFFO29CQUNSLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQTtnQkFDekMsQ0FBQyxDQUFBO1NBQ1I7SUFFTCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLEtBQUs7UUFDdEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDekMsSUFBSSxnQkFBZ0IsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDN0MsSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsS0FBSyxLQUFLLEVBQUU7Z0JBQ3ZDLE9BQU8sZ0JBQWdCLENBQUM7YUFDM0I7U0FDSjtRQUNELE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0NBRUo7QUFFRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbGlkYXRpb25SdWxlIH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IERhdGVVdGlsIH0gZnJvbSAnLi4vdXRpbHMvZGF0ZV91dGlsJ1xyXG4vKipcclxuICog6aqM6K+B5Zmo5bel5Y6CXHJcbiAqL1xyXG5jbGFzcyBWYWxpZGF0b3JGYWN0b3J5IHtcclxuICAgIC8qKlxyXG4gICAgICog5Yib5bu66YCC6YWN5ZmoXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGUodmFsaWRSdWxlczogVmFsaWRhdGlvblJ1bGUgfCBWYWxpZGF0aW9uUnVsZVtdKTogYW55IHtcclxuICAgICAgICBsZXQgdmFsaWRhdG9yRm4gPSBbXTtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWxpZFJ1bGVzKSAmJiB2YWxpZFJ1bGVzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgdmFsaWRSdWxlcy5mb3JFYWNoKCh2YWxpZFJ1bGU6IFZhbGlkYXRpb25SdWxlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3JGbi5wdXNoKHRoaXMuaW5pdFZhbGlkUnVsZUZuKHZhbGlkUnVsZSkpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbGlkUnVsZXMpICYmIHZhbGlkUnVsZXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRvckZuLnB1c2godGhpcy5pbml0VmFsaWRSdWxlRm4odmFsaWRSdWxlc1swXSkpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFsaWRhdG9yRm4ucHVzaCh0aGlzLmluaXRWYWxpZFJ1bGVGbih2YWxpZFJ1bGVzIGFzIFZhbGlkYXRpb25SdWxlKSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRvckZuO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIGluaXRWYWxpZFJ1bGVGbih2YWxpZFJ1bGU6IFZhbGlkYXRpb25SdWxlKTogYW55IHtcclxuICAgICAgICBjb25zdCB7IHR5cGUsIGNvbnN0cmFpbnRzLCBtZXNzYWdlIH0gPSB2YWxpZFJ1bGU7XHJcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3JlcXVpcmVkJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiAodikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25zdHJhaW50c1swXSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gdiB8fCB1bmRlZmluZWQgPT09IHYgfHwgJycgPT09IHYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IGZhbHNlLCBtZXNzYWdlOiBtZXNzYWdlIHx8ICflv4XloasnIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IHRydWUsIG1lc3NhZ2U6ICcnIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ051bWJlck1heFZhbHVlJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiAodikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdiAhPT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25zdHJhaW50c1swXSB8fCAwID09IGNvbnN0cmFpbnRzWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2IDw9IHBhcnNlRmxvYXQoY29uc3RyYWludHNbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiBmYWxzZSwgbWVzc2FnZTogbWVzc2FnZSB8fCBg6L6T5YWl5YC85LiN6IO95aSn5LqOJHtjb25zdHJhaW50c1swXX1gIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnTnVtYmVyTWluVmFsdWUnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICh2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2ICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnN0cmFpbnRzWzBdIHx8IDAgPT0gY29uc3RyYWludHNbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHYgPj0gcGFyc2VGbG9hdChjb25zdHJhaW50c1swXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IHRydWUsIG1lc3NhZ2U6ICcnIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IGZhbHNlLCBtZXNzYWdlOiBtZXNzYWdlIHx8IGDovpPlhaXlgLzkuI3og73lsI/kuo4ke2NvbnN0cmFpbnRzWzBdfWAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdEYXRlTWF4VmFsdWUnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICh2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnN0cmFpbnRzWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChEYXRlVXRpbC5pc0JlZm9yZSh2LCBjb25zdHJhaW50c1swXSkgfHwgRGF0ZVV0aWwuaXNTYW1lKHYsIGNvbnN0cmFpbnRzWzBdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogZmFsc2UsIG1lc3NhZ2U6IG1lc3NhZ2UgfHwgYOi+k+WFpeaXpeacn+S4jeiDveWkp+S6jiR7Y29uc3RyYWludHNbMF19YCB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ0RhdGVNaW5WYWx1ZSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHYpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29uc3RyYWludHNbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKERhdGVVdGlsLmlzQWZ0ZXIodiwgY29uc3RyYWludHNbMF0pIHx8IERhdGVVdGlsLmlzU2FtZSh2LCBjb25zdHJhaW50c1swXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IHRydWUsIG1lc3NhZ2U6ICcnIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IGZhbHNlLCBtZXNzYWdlOiBtZXNzYWdlIHx8IGDovpPlhaXml6XmnJ/kuI3og73lsI/kuo4ke2NvbnN0cmFpbnRzWzBdfWAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdTdHJpbmdNYXhMZW5ndGgnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICh2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnN0cmFpbnRzWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2Lmxlbmd0aCA8PSBjb25zdHJhaW50c1swXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogZmFsc2UsIG1lc3NhZ2U6IG1lc3NhZ2UgfHwgYOi+k+WFpeWAvOmVv+W6puS4jeiDveWkp+S6jiR7Y29uc3RyYWludHNbMF19YCB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ1N0cmluZ01pbkxlbmd0aCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHYpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29uc3RyYWludHNbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHYubGVuZ3RoID49IGNvbnN0cmFpbnRzWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiBmYWxzZSwgbWVzc2FnZTogbWVzc2FnZSB8fCBg6L6T5YWl5YC86ZW/5bqm5LiN6IO95bCP5LqOJHtjb25zdHJhaW50c1swXX1gIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAncmVnZXgnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICh2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnN0cmFpbnRzVGVtcCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc3RyYWludHNbMF0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbnRzVGVtcCA9IGNvbnN0cmFpbnRzWzBdLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwIDsgaSA8IGNvbnN0cmFpbnRzVGVtcC5sZW5ndGggOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihjb25zdHJhaW50c1RlbXBbaV0gPT09ICcnKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAoY29uc3RyYWludHNUZW1wW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlLnRlc3QodikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IGZhbHNlLCBtZXNzYWdlOiBtZXNzYWdlICB8fCBg5a2Y5Zyo5LiN5Y+v6L6T5YWl6aG5JHtjb25zdHJhaW50c1swXX1gIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IHRydWUsIG1lc3NhZ2U6ICcnIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ2N1c3RvbUZ1bmN0aW9uJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiAodikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc3RyYWludHNbMF0gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBjb25zdHJhaW50c1swXSh2KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IHRydWUsIG1lc3NhZ2U6ICcnIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IGZhbHNlLCBtZXNzYWdlIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDpgY3ljobnlJ/miJDnmoTmoKHpqozmlrnms5Xlr7nlvZPliY3lgLzov5vooYzmoKHpqozvvIzlvZPlj5HnjrDplJnor6/lsLHov5Tlm57moKHpqoznu5PmnpxcclxuICAgICAqIOmBjeWOhuWujOaIkOayoeaciemUmeivr+WImei/lOWbnuagoemqjOmAmui/h+e7k+aenFxyXG4gICAgICogQHBhcmFtIHZhbGlkYXRvckZuIOagoemqjOaWueazlVxyXG4gICAgICogQHBhcmFtIHZhbHVlIOW9k+WJjeWAvFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZXhlY3V0ZVZhbGlkYXRvcih2YWxpZGF0b3JGbiwgdmFsdWUpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbGlkYXRvckZuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWxpZGF0aW9uUmVzdWx0ID0gdmFsaWRhdG9yRm5baV0odmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAodmFsaWRhdGlvblJlc3VsdFsncGFzc2luZyddID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRpb25SZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFZhbGlkYXRvckZhY3RvcnkgfTsiXX0=