/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { isPlatformBrowser } from '@angular/common';
import { Component, ElementRef, forwardRef, Inject, Input, NgZone, PLATFORM_ID, InjectionToken, Optional, Injector, LOCALE_ID, HostBinding, ViewEncapsulation, Renderer2 } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { getTinymce } from './TinyMCE';
import { bindHandlers, isTextarea, mergePlugins, uuid, noop, isNullOrUndefined } from './utils/Utils';
import { Events } from './Events';
import { ScriptLoader } from './utils/ScriptLoader';
import { EditorService } from './editor.service';
import { NavigationEnd, NavigationStart, Router } from '@angular/router';
import { Convert2HtmlEditorToolbars } from '@farris/ui-common';
/** @type {?} */
export var TINYMCE_SCRIPT_SRC = new InjectionToken('TINYMCE_SCRIPT_SRC');
/** @type {?} */
var EDITOR_COMPONENT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return EditorComponent; })),
    multi: true
};
var EditorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(EditorComponent, _super);
    function EditorComponent(elementRef, ngZone, platformId, injector, tinymceScriptSrc) {
        var _this_1 = _super.call(this) || this;
        _this_1.platformId = platformId;
        _this_1.injector = injector;
        _this_1.tinymceScriptSrc = tinymceScriptSrc;
        _this_1.rootClass = 'farris-editor';
        _this_1.customToolbar = false;
        _this_1.localeIds = {
            'en': 'es',
            'zh-CHS': 'zh_CN'
        };
        _this_1.currentLocale = 'zh-CHS';
        _this_1.cloudChannel = '5';
        _this_1.apiKey = 'no-api-key';
        // @Input() public init: Record<string, any> | undefined;
        _this_1.editorId = '';
        _this_1.modelEvents = 'change keyup undo redo';
        _this_1.height = 100;
        _this_1.autoresizeMaxHeight = 800;
        _this_1.showBorder = true;
        _this_1._fontFamilyList = ['Microsoft YaHei', 'Helvetica Neue', 'PingFang SC',
            'sans-serif', 'simsun', 'serif', 'SimHei', 'arial',
            'helvetica', 'arial black', 'avant garde', 'book antiqua', 'palatino', 'FangSong'];
        _this_1._defaultFontFamily = 'Microsoft YaHei';
        _this_1.onTouchedCallback = noop;
        _this_1.onChangeCallback = noop;
        _this_1.__WEBPAGEURL__ = '';
        _this_1.editorBodyCls = 'mce-content-body';
        _this_1._elementRef = elementRef;
        _this_1.ngZone = ngZone;
        _this_1._render = _this_1.injector.get(Renderer2);
        _this_1.initialise = _this_1.initialise.bind(_this_1);
        if (_this_1.injector) {
            _this_1.currentLocale = _this_1.injector.get(LOCALE_ID);
            _this_1.editorService = _this_1.injector.get(EditorService);
            _this_1.router = _this_1.injector.get(Router, null);
            if (_this_1.router) {
                _this_1.router.events.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    if (e instanceof NavigationStart) {
                        if (!_this_1.__WEBPAGEURL__) {
                            _this_1.__WEBPAGEURL__ = e.url;
                        }
                    }
                    else if (e instanceof NavigationEnd) {
                        if (_this_1.__WEBPAGEURL__ === e.url && _this_1.editor) {
                            // console.log(this.editor);
                            _this_1.editor.destroy();
                            _this_1.initialise(!1);
                        }
                    }
                }));
            }
        }
        return _this_1;
    }
    Object.defineProperty(EditorComponent.prototype, "disabledClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorComponent.prototype, "readonlyClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readOnly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._disabled = val;
            if (this._editor && this._editor.initialized) {
                this._editor.setMode(val ? 'readonly' : 'design');
                this.setDivElement(val);
                this.editorBlured();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorComponent.prototype, "readOnly", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readOnly;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._readOnly = val;
            if (this._editor && this._editor.initialized) {
                this._editor.setMode(val ? 'readonly' : 'design');
                this.setDivElement(val);
                this.editorBlured();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorComponent.prototype, "editor", {
        get: /**
         * @return {?}
         */
        function () {
            return this._editor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorComponent.prototype, "fontFamilyList", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fontFamilyList;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this._fontFamilyList = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorComponent.prototype, "defaultFontFamily", {
        get: /**
         * @return {?}
         */
        function () {
            return this._defaultFontFamily;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this._defaultFontFamily = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    EditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var _this = this;
        this.init = {
            selector: 'textarea',
            menubar: false,
            inline: false,
            // statusbar: false,
            plugins: [
                'advlist autolink lists link image charmap print preview anchor textcolor powerpaste',
                'searchreplace visualblocks code fullscreen',
                'insertdatetime media table image imagetools code help nonbreaking'
            ],
            language: this.localeIds[this.currentLocale],
            // toolbar定义快捷栏的操作, | 用来分隔显示
            toolbar: 'undo redo | formatselect fontsizeselect fontselect | \
                        bold italic underline strikethrough forecolor backcolor link | \
                        alignleft aligncenter alignright alignjustify | \
                        bullist numlist outdent indent table image | removeformat',
            min_height: 100,
            // max_height: 400,
            block_formats: 'Paragraph=p;Heading 1=h1;Heading 2=h2;Heading 3=h3;Heading 4=h4;Heading 5=h5;Heading 6=h6',
            fontsize_formats: '12px 14px 16px 18px 24px 36px 48px 56px 72px',
            font_formats: '微软雅黑=Microsoft YaHei,Helvetica Neue,PingFang SC,sans-serif;苹果苹方=PingFang SC,Microsoft YaHei,sans-serif;\
                            宋体=simsun,serif;仿宋体=FangSong,serif;黑体=SimHei,sans-serif;Arial=arial,helvetica,sans-serif;\
                            Arial Black=arial black,avant garde;Book Antiqua=book antiqua,palatino;',
            images_upload_url: 'postAcceptor.php',
            images_upload_handler: (/**
             * @param {?} blobInfo
             * @param {?} success
             * @param {?} failure
             * @return {?}
             */
            function (blobInfo, success, failure) {
                if (_this.beforeUpload) {
                    _this.beforeUpload(blobInfo).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    function (res) {
                        success(res);
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        failure(error);
                        return;
                    }));
                }
                else {
                    /** @type {?} */
                    var reader = new FileReader();
                    reader.readAsDataURL(blobInfo.blob());
                    reader.onload = (/**
                     * @return {?}
                     */
                    function () {
                        success(this.result);
                    });
                }
            }),
            branding: false,
            readonly: false,
            setup: null,
            end_container_on_empty_block: true,
            powerpaste_word_import: 'propmt',
            powerpaste_html_import: 'propmt',
            powerpaste_allow_local_images: true,
            paste_data_images: true,
            autoresize_min_height: 100,
            autoresize_max_height: 800,
            autoresize_on_init: true,
            autoresize_overflow_padding: 0,
            nonbreaking_force_tab: true,
            default_link_target: '_blank'
        };
    };
    /**
     * @private
     * @return {?}
     */
    EditorComponent.prototype.editorBlured = /**
     * @private
     * @return {?}
     */
    function () {
        var _this_1 = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var tinyBody = _this_1._editor.iframeElement.contentWindow.document.getElementsByClassName(_this_1.editorBodyCls);
            if (tinyBody && tinyBody.length) {
                tinyBody[0].blur();
            }
        }), 0);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EditorComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this._editor && this._editor.initialized) {
            this._editor.setContent(isNullOrUndefined(value) ? '' : value);
            this._divElement.innerHTML = (isNullOrUndefined(value) ? '' : value);
        }
        else {
            this.initialValue = value === null ? undefined : value;
        }
        if (!this.__WEBPAGEURL__ && this.router) {
            this.__WEBPAGEURL__ = this.router.url;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    EditorComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    EditorComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    EditorComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        if (this._editor) {
            this._editor.setMode(isDisabled ? 'readonly' : 'design');
        }
        else if (isDisabled) {
            this.init = tslib_1.__assign({}, this.init, { readonly: true });
        }
    };
    /**
     * @return {?}
     */
    EditorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId)) {
            this.editorId = this.editorId || uuid('tiny-angular');
            this.inline = typeof this.inline !== 'undefined' ?
                (typeof this.inline === 'boolean' ? this.inline : true) : this.init && this.init.inline;
            this.createElement();
            this.init.selector = '#' + this.editorId;
            if (getTinymce()) {
                this.initialise();
            }
            else if (this._element && this._element.ownerDocument) {
                ScriptLoader.load(this._element.ownerDocument, this.getScriptSrc(), this.initialise);
            }
        }
    };
    /**
     * @return {?}
     */
    EditorComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.__WEBPAGEURL__ = '';
        if (this._editor) {
            this._editor.remove();
            this._editor = null;
            this._divElement = null;
        }
    };
    /**
     * @return {?}
     */
    EditorComponent.prototype.createElement = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tagName = typeof this.tagName === 'string' ? this.tagName : 'div';
        this._element = document.createElement(this.inline ? tagName : 'textarea');
        this._element.setAttribute('class', 'd-none');
        this._divElement = document.createElement('div');
        if (this.showBorder) {
            this._divElement.className = 'farris-editor-placeholder';
        }
        else {
            this._divElement.className = 'farris-editor-placeholder farris-editor-placeholder-border';
        }
        this._render.setStyle(this._divElement, 'height', this.height + 'px');
        if (this._element) {
            this._element.id = this.editorId;
            if (isTextarea(this._element)) {
                this._element.style.visibility = 'hidden';
            }
            this._elementRef.nativeElement.appendChild(this._element);
            this._elementRef.nativeElement.appendChild(this._divElement);
        }
    };
    /**
     * @param {?=} isfirstInit
     * @return {?}
     */
    EditorComponent.prototype.initialise = /**
     * @param {?=} isfirstInit
     * @return {?}
     */
    function (isfirstInit) {
        var _this_1 = this;
        if (isfirstInit === void 0) { isfirstInit = true; }
        /** @type {?} */
        var finalInit = tslib_1.__assign({}, this.init, { target: this._element, inline: this.inline, plugins: mergePlugins(this.init && this.init.plugins, this.plugins), toolbar: this.init && this.init.toolbar, height: this.height, autoresize_max_height: this.autoresizeMaxHeight, setup: (/**
             * @param {?} editor
             * @return {?}
             */
            function (editor) {
                _this_1._editor = editor;
                editor.on('init', (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    _this_1.initEditor(editor, isfirstInit);
                    if (_this_1._readOnly || _this_1._disabled) {
                        _this_1._editor.setMode('readonly');
                    }
                    else {
                        _this_1._editor.setMode('design');
                    }
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this_1.setDivElement(_this_1._readOnly || _this_1._disabled);
                    }), 0);
                }));
                editor.on('PastePostProcess', (/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    _this_1.replaceFontFamily(data.node);
                }));
                bindHandlers(_this_1, editor);
                if (_this_1.init && typeof _this_1.init.setup === 'function') {
                    _this_1.init.setup(editor);
                }
            }) });
        if (this.customToolbar) {
            finalInit.toolbar = Convert2HtmlEditorToolbars('advanced', this.toolbar);
        }
        if (isTextarea(this._element)) {
            this._element.style.visibility = '';
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                getTinymce().init(finalInit);
            }), 100);
        }));
    };
    /**
     * @return {?}
     */
    EditorComponent.prototype.refresh = /**
     * @return {?}
     */
    function () {
        if (this.editor) {
            this.editor.destroy();
        }
        this.initialise(false);
    };
    /**
     * @param {?} toolbar
     * @return {?}
     */
    EditorComponent.prototype.setToolbar = /**
     * @param {?} toolbar
     * @return {?}
     */
    function (toolbar) {
        this.toolbar = toolbar;
        this.refresh();
    };
    /**
     * @private
     * @param {?} readonly
     * @return {?}
     */
    EditorComponent.prototype.setDivElement = /**
     * @private
     * @param {?} readonly
     * @return {?}
     */
    function (readonly) {
        if (readonly) {
            this._divElement.classList.remove('d-none');
        }
        else {
            this._divElement.classList.add('d-none');
        }
        // if(this._editor && this._editor.initialized){
        //   this._divElement.innerHTML = this._editor.getContent({ format: this.outputFormat });
        // }
    };
    /**
     * @private
     * @return {?}
     */
    EditorComponent.prototype.getScriptSrc = /**
     * @private
     * @return {?}
     */
    function () {
        return isNullOrUndefined(this.tinymceScriptSrc) ?
            "https://cdn.tiny.cloud/1/" + this.apiKey + "/tinymce/" + this.cloudChannel + "/tinymce.min.js" :
            this.tinymceScriptSrc;
    };
    /**
     * @private
     * @param {?} editor
     * @param {?} isfirstInit
     * @return {?}
     */
    EditorComponent.prototype.initEditor = /**
     * @private
     * @param {?} editor
     * @param {?} isfirstInit
     * @return {?}
     */
    function (editor, isfirstInit) {
        var _this_1 = this;
        editor.on('blur', (/**
         * @return {?}
         */
        function () { return _this_1.ngZone.run((/**
         * @return {?}
         */
        function () { return _this_1.onTouchedCallback(); })); }));
        editor.on(this.modelEvents, (/**
         * @return {?}
         */
        function () {
            _this_1.ngZone.run((/**
             * @return {?}
             */
            function () {
                _this_1.onChangeCallback(editor.getContent({ format: _this_1.outputFormat }));
                _this_1._divElement.innerHTML = editor.getContent({ format: _this_1.outputFormat });
            }));
            // console.log(editor.getContent({ format: this.outputFormat }));
        }));
        if (typeof this.initialValue === 'string' && isfirstInit) {
            this.ngZone.run((/**
             * @return {?}
             */
            function () {
                editor.setContent(_this_1.initialValue);
                _this_1._divElement.innerHTML = _this_1.initialValue;
                _this_1.onChangeCallback(editor.getContent({ format: _this_1.outputFormat }));
            }));
        }
    };
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    EditorComponent.prototype.replaceFontFamily = /**
     * @private
     * @param {?} el
     * @return {?}
     */
    function (el) {
        if (el.children && el.children.length) {
            for (var k = 0; k < el.children.length; k++) {
                this.replaceFontFamily(el.children[k]);
            }
        }
        /** @type {?} */
        var ff = el.style.fontFamily;
        /** @type {?} */
        var face = el.getAttribute('face');
        if (ff) {
            /** @type {?} */
            var fonts = ff.split(',');
            /** @type {?} */
            var r = this.getFontFamilyArray(fonts);
            el.style.fontFamily = r;
        }
        if (face) {
            /** @type {?} */
            var faces = face.split(',');
            /** @type {?} */
            var r = this.getFontFamilyArray(faces);
            el.setAttribute('face', r);
        }
    };
    /**
     * @private
     * @param {?} fonts
     * @param {?=} zcFontArr
     * @return {?}
     */
    EditorComponent.prototype.getFontFamilyArray = /**
     * @private
     * @param {?} fonts
     * @param {?=} zcFontArr
     * @return {?}
     */
    function (fonts, zcFontArr) {
        var _this_1 = this;
        if (zcFontArr === void 0) { zcFontArr = this._fontFamilyList; }
        /** @type {?} */
        var ss = [];
        fonts.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (zcFontArr.find((/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return f === _this_1.trim(n); }))) {
                ss.push(_this_1.trim(n));
            }
        }));
        /** @type {?} */
        var r = ss.join(',');
        if (!r) {
            r = this._defaultFontFamily;
        }
        return r;
    };
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    EditorComponent.prototype.trim = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str.replace(/^\s*|\s*$/g, '');
    };
    EditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-editor',
                    template: '<ng-template></ng-template>',
                    providers: [EDITOR_COMPONENT_VALUE_ACCESSOR],
                    encapsulation: ViewEncapsulation.None,
                    styles: [":host{display:block}.farris-editor .mce-tinymce .mce-toolbar .mce-btn-group>div{white-space:pre-wrap}.farris-editor .mce-tinymce{box-sizing:border-box;box-shadow:none}.farris-editor .mce-panel,.farris-editor .mce-tinymce{border-color:#d8dce6}.farris-editor.farris-editor-disabled .mce-statusbar,.farris-editor.farris-editor-disabled .mce-top-part,.farris-editor.farris-editor-readonly .mce-statusbar,.farris-editor.farris-editor-readonly .mce-top-part{display:none}.farris-editor.farris-editor-disabled .mce-edit-area,.farris-editor.farris-editor-readonly .mce-edit-area{border-top:none}.farris-editor.farris-editor-disabled.farris-editor-border .mce-tinymce,.farris-editor.farris-editor-readonly.farris-editor-border .mce-tinymce{border-width:0 0 1px!important}"]
                }] }
    ];
    /** @nocollapse */
    EditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: Injector, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [TINYMCE_SCRIPT_SRC,] }] }
    ]; };
    EditorComponent.propDecorators = {
        rootClass: [{ type: HostBinding, args: ['class',] }],
        disabledClass: [{ type: HostBinding, args: ['class.farris-editor-disabled',] }],
        readonlyClass: [{ type: HostBinding, args: ['class.farris-editor-readonly',] }],
        disabled: [{ type: Input }],
        customToolbar: [{ type: Input }],
        readOnly: [{ type: Input }],
        cloudChannel: [{ type: Input }],
        apiKey: [{ type: Input }],
        editorId: [{ type: Input }],
        initialValue: [{ type: Input }],
        outputFormat: [{ type: Input }],
        inline: [{ type: Input }],
        tagName: [{ type: Input }],
        plugins: [{ type: Input }],
        toolbar: [{ type: Input }],
        modelEvents: [{ type: Input }],
        height: [{ type: Input }],
        autoresizeMaxHeight: [{ type: Input }],
        showBorder: [{ type: Input }, { type: HostBinding, args: ['class.farris-editor-border',] }],
        fontFamilyList: [{ type: Input }],
        defaultFontFamily: [{ type: Input }],
        beforeUpload: [{ type: Input }]
    };
    return EditorComponent;
}(Events));
export { EditorComponent };
if (false) {
    /** @type {?} */
    EditorComponent.prototype.rootClass;
    /** @type {?} */
    EditorComponent.prototype.customToolbar;
    /** @type {?} */
    EditorComponent.prototype.ngZone;
    /** @type {?} */
    EditorComponent.prototype.localeIds;
    /** @type {?} */
    EditorComponent.prototype.currentLocale;
    /** @type {?} */
    EditorComponent.prototype.cloudChannel;
    /** @type {?} */
    EditorComponent.prototype.apiKey;
    /** @type {?} */
    EditorComponent.prototype.editorId;
    /** @type {?} */
    EditorComponent.prototype.initialValue;
    /** @type {?} */
    EditorComponent.prototype.outputFormat;
    /** @type {?} */
    EditorComponent.prototype.inline;
    /** @type {?} */
    EditorComponent.prototype.tagName;
    /** @type {?} */
    EditorComponent.prototype.plugins;
    /** @type {?} */
    EditorComponent.prototype.toolbar;
    /** @type {?} */
    EditorComponent.prototype.modelEvents;
    /** @type {?} */
    EditorComponent.prototype.height;
    /** @type {?} */
    EditorComponent.prototype.autoresizeMaxHeight;
    /** @type {?} */
    EditorComponent.prototype.showBorder;
    /** @type {?} */
    EditorComponent.prototype._fontFamilyList;
    /** @type {?} */
    EditorComponent.prototype._defaultFontFamily;
    /** @type {?} */
    EditorComponent.prototype.beforeUpload;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.init;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype._element;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype._readOnly;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype._editor;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype._divElement;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.onChangeCallback;
    /** @type {?} */
    EditorComponent.prototype.editorService;
    /** @type {?} */
    EditorComponent.prototype._render;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.__WEBPAGEURL__;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.editorBodyCls;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.tinymceScriptSrc;
}
//# sourceMappingURL=data:application/json;base64,