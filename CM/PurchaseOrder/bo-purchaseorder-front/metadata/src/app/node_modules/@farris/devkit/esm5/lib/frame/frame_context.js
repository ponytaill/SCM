import * as tslib_1 from "tslib";
import { Injector, Injectable, Optional, SkipSelf, InjectFlags } from '@angular/core';
import { Repository } from '../repository/index';
import { BindingData } from '../binding-data/index';
import { UIState, PARAM_TYPE_TRANSFORM_TOKEN } from '../ui-state/index';
import { Form } from '../form/index';
import { StateMachine } from '../state-machine/index';
import { ViewModel } from '../view-model/index';
import { CommandBus, CommandHandlerExtenderRegistry, CommandHandlerFactory, CommandHandlerRegistry } from '../command/index';
import { Context } from '../context/index';
import { AppContext } from '../app/index';
import { RouterParamService } from '../misc/index';
import { FRAME_ID, NAMESPACE } from './tokens';
import { ChangeType } from '../binding-data/index';
import { EventBus } from '../event-bus-new/index';
import { EXCEPTION_HANDLER } from '../exception/tokens';
import { EntityUtil } from '../binding-data/entity_util';
import { TranslateToken } from '../i18n/translate_token';
import { VariableParseService } from '../variable/variable_parse_service';
import { TranslateService } from '../i18n/translate_service';
import { UserSettingsToken } from '../i18n/tokens';
import { UserSettingsService } from '../i18n/user_settings_service';
import { ExpressionEngineImpl } from '../expression/expression_engine_impl';
import { ExpressionManager } from '../expression/expression_manager';
import { ExpressionResult } from '../expression/expression_result';
import { ExpressionResultFactory } from '../expression/expression_result_factory';
import { CommandVariableParser, DataVariableParser, FrameIdVariableParser, StateMachineVariableParser, UIStateVariableParser } from '../variable';
import { RunMode } from '../core';
import { Subject } from 'rxjs';
import { ComponentRefManager } from './component_ref_manager';
/**
 * 组件上下文
 * @description
 * # 上下文
 * ## Overview
 *
 * 每个组件（FrameComponent）都有自己的上下文（FrameContext）,通过上下文可以获取控制器的所有属性，如常用的`frameId`、`BindingData`、`Repository`、`ViewModel`、`StateMachine`、 * `UIState`等。上下文在内存中呈树形结构，依附于FrameComponent。结构如下：
 *
 * ![image-20210806204755378](https://open.inspuronline.com/iGIX/assets/cloudplus/igix_2110/farris/devkit/guide/images/image-20210806204755378.png)
 *
 * 从上图我们可以看出每个上下文都有自己的`ViewModel`、`UIState`，那么如何确定一个命令在执行时用的是哪个上下文呢？其实无论命令在哪个地方被调用，上下文都是命令所在的组件的上下文。即，如果 * 命令挂载到了`detail-form-component`的视图模型，但命令最终被`root-component`上的按钮调用了，其上下文仍然是`detail-from-component`组件的上下文。之所以出现这种现象和Angular的依赖注 * 入密不可分，由于Angular在查找`provider`的时候总是从自己的组件开始向上找，如果在组件内部找到了则不再继续查找，如果找不到则会继续向上，如果查找到最上级依然找不到就会报`No provider  * for xx`错误。
 *
 * 既然如此，如果我们在`detail-form-component`中想要获取`root-component`中定义的变量（UIState）该如何做呢？答案是切换上下文，可以通过以下方式实现：
 *
 * ```typescript
 * // 方法1
 * const rootFrameContext = this.frameContext.root;
 * // 方法2
 * const rootFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('root-component');
 * ```
 *
 * 通常在编写`Web构件`时先引入FrameContext，如：
 *
 * ```javascript
 * import {FrameContext,BindingData,Repository} from '@farris/devkit';
 *
 * constructor(private frameContext:FrameContext){}
 *
 * public method(){
 *     const bindingData: BindingData = this.frameContext.bindingData;
 *     const repository: Repository = this.frameContext.repository;
 * }
 * ```
 *
 * > `FrameContext`称为`ViewModelContext`更合适，可以理解为`MVVM`架构中`VM`的上下文。
 *
 * 控制器中亦存在`ViewModel`的概念。和`MVVM`架构中的的VM一致，所以也可以从`VM`访问常用的属性。如：
 *
 * ```typescript
 * import {BindingData,Repository,ViewModel} from '@farris/devkit';
 *
 * constructor(private viewModel:ViewModel){}
 *
 * public method(){
 *     const bindingData: BindingData = this.viewModel.bindingData;
 *     const repository: Repository = this.viewModel.repository;
 * }
 * ```
 *
 *
 *
 * ## 常用操作
 *
 * ### 获取当前上下文所属的组件
 *
 * ```typescript
 * this.frameContext.frameComponent;
 * ```
 *
 * ### 获取当前上下文的根上下文
 *
 * ```typescript
 * this.frameContext.root;
 * ```
 *
 * ### 获取当前上下文的appContext
 *
 * ```typescript
 * this.frameContext.appContext;
 * ```
 *
 * ### 获取指定frameId的上下文
 *
 * ```typescript
 * this.frameContext.appContext.frameContextManager.getFrameContextById('data-grid-component');
 * ```
 *
 * ### 获取表单所有上下文
 *
 * ```typescript
 * this.frameContext.appContext.frameContextManager.getFrameContexts();
 * ```
 *
 *
 *
 * ## 常用属性
 *
 * ### BindingData
 *
 * [参考]([浪潮企业云开放平台 (inspuronline.com)](https://open.inspuronline.com/iGIX/#/document/mddoc/igix-2103%2Ffarris%2Fdevkit%2Fguide%2F绑定数据.md))
 *
 * ### Repository
 *
 * [参考]([浪潮企业云开放平台 (inspuronline.com)](https://open.inspuronline.com/iGIX/#/document/mddoc/igix-2103%2Ffarris%2Fdevkit%2Fguide%2F仓库.md))
 *
 * ### ViewModel
 *
 * 控制器中ViewMode同MVVM架构中的VM，和FrameContext类似，可以通过ViewModel拿到FrameContext，同样的也可以通过FrameContext拿到ViewModel。
 *
 * ### namespace
 *
 * 命名空间，主要在组合表单场景用到，每一个表单都有自己的命名空间，被组合进来的表单其命名空间是相同的，如A表单组合了B表单，则B表单具有相同的命名空间，命名空间主要用于表单隔离。
 *
 * ### root
 *
 * 获取整个表单的根上下文
 *
 * ### uiState
 *
 * 获取当前组件的变量
 *
 * ### frameId
 *
 * 上下文标识。
 */
var FrameContext = /** @class */ (function (_super) {
    tslib_1.__extends(FrameContext, _super);
    /**
     * 构造函数
     * @param injector 注入器
     */
    function FrameContext(injector, parent) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.typeName = 'FrameContext';
        _this.isDestoried = false;
        _this.isDisposed = false;
        _this.metadata = {
            identify: '',
            namespace: '',
            commands: null,
            form: null,
            formControls: null,
            subForms: null,
            stateMachine: null,
            uiStates: null,
            bindingTo: ''
        };
        /**
         * 组件引用管理
         */
        _this.componentRefManager = new ComponentRefManager();
        // 在解析模式下，通过依赖注入获取不到AppContext时，返回null，在子类中进行赋值。
        _this.appContext = injector.get(AppContext);
        _this.destorySignal = new Subject();
        // 确定父子关系
        // 必须对appContext进行判断，原因如下：
        // 1、否则会导致动态路由表单中，被路由的表单的RootFrameContext变成主表单的RootFrameContext；
        // 2、进而导致从RootFrameContext上拿VO变量拿不到。
        if (!parent || parent.appContext !== _this.appContext) { // 取消 appContext 的判断
            _this.parent = null;
            _this.root = _this;
        }
        else {
            _this.parent = parent;
            _this.root = parent.root;
        }
        _this.frameId = injector.get(FRAME_ID);
        if (_this.appContext.contextMetadataManager.exsit(_this.frameId)) {
            _this.metadata = _this.appContext.contextMetadataManager.getContextMetadataByName(_this.frameId);
        }
        _this.namespace = injector.get(NAMESPACE, null);
        _this.bindingData = _this.injector.get(BindingData, new BindingData());
        if (!_this.appContext.useIsoluteEventBus || (_this.appContext.useIsoluteEventBus && !_this.appContext.isoluteEventBus)) {
            _this.eventBus = _this.injector.get(EventBus, null, InjectFlags.Optional);
        }
        else {
            _this.eventBus = _this.appContext.isoluteEventBus;
        }
        _this.form = _this.injector.get(Form, new Form());
        _this.repository = _this.injector.get(Repository, _this.appContext.repository);
        _this.uiState = _this.injector.get(UIState, new UIState());
        var defaultViewModel = new ViewModel();
        defaultViewModel.setMetadata(_this.metadata);
        _this.viewModel = _this.injector.get(ViewModel, defaultViewModel);
        _this.variableParseService = injector.get(VariableParseService, new VariableParseService([
            new FrameIdVariableParser(),
            new DataVariableParser(),
            new UIStateVariableParser(),
            new StateMachineVariableParser(),
            new CommandVariableParser()
        ]));
        // 注入exceptionHandler
        _this.exceptionHandler = injector.get(EXCEPTION_HANDLER, null, InjectFlags.Optional);
        // 初始化多语服务
        var translate = injector.get(TranslateToken, null);
        _this.translate = translate;
        TranslateService.setTranslate(translate);
        // 初始化用户配置
        var userSettings = injector.get(UserSettingsToken, null);
        UserSettingsService.setUserSettings(userSettings);
        _this.initializeRepository();
        _this.appContext.regFrameContext(_this);
        _this.registerAppContextDestroyEvent();
        return _this;
    }
    FrameContext.prototype.dispose = function (options) {
        var _this = this;
        if (this.isDisposed) {
            return;
        }
        this.isDestoried = true;
        this.isDisposed = true;
        if (this.destorySignal) {
            this.destorySignal.next();
            this.destorySignal.complete();
        }
        if (this.appContext) {
            this.appContext.frameContextManager.unregFrameContext(this);
            this.appContext.frameComponentRefresher.unregFrameContext(this);
        }
        if (this.appContext && this.isRootFrameContext() === true) {
            var viewModelNames = this['viewModelNames'];
            if (viewModelNames && Array.isArray(viewModelNames)) {
                viewModelNames.forEach(function (name) {
                    _this[name] = null;
                });
            }
            this.appContext.unregisterFromManager();
        }
        if (this.bindingData) {
            this.bindingData.dispose();
            // this.bindingData = null;
        }
        if (this.viewModel) {
            this.viewModel.dispose();
        }
        if (this.form) {
            this.form.dispose();
            this.form = null;
        }
        if (this.commandBus) {
            this.commandBus.dispose();
            this.commandBus = null;
        }
        TranslateService.dispose();
        // this.root = null;
        // this.parent = null;
        // this.uiState = null;
        this.frameComponent = null;
        this.repository = null;
        // this.stateMachine = null;
        // this.appContext = null;
        this.exceptionHandler = null;
        this.expressionManager = null;
        this.expressionEngineImpl = null;
        this.variableParseService = null;
        this.eventBus = null;
        this.translate = null;
        this.injector = null;
        this.expressionResult = null;
        UserSettingsService.setUserSettings(null);
    };
    FrameContext.prototype.ngOnDestroy = function () {
        this.dispose();
    };
    /**
     * 通过组件标识获取对应的组件实例
     * @param id 组件标识
     * @returns
     */
    FrameContext.prototype.getComponentById = function (id) {
        var components = this.componentRefManager.get(id);
        if (components && components.length > 0) {
            var component = components[0];
            return component;
        }
        return null;
    };
    /**
     * 获取指定标识的所有组件
     * @param id 组件标识
     */
    FrameContext.prototype.getComponentsById = function (id) {
        return this.componentRefManager.get(id);
    };
    FrameContext.prototype.bindInjector = function (componentInjector) {
        this.injector = componentInjector;
    };
    // #region 初始化
    /**
     * 初始化
     * @todo:
     * 1、CommandHandler中的服务可能会注入Context，所以CommandHandler创建时必须已经存在ComponentContext
     * 2、ViewModel的buildCommands中会使用CommandBus，为了保证顺序，将ViewModel的创建也放在init中。
     */
    FrameContext.prototype.init = function (frameComponent) {
        this.frameComponent = frameComponent;
        this.initializeBindingData();
        this.initializeStateMachine();
        this.initializeUiState();
        this.initializeForm();
        this.initializeCommandBus();
        this.initializeViewModel();
        this.registerExceptionHandler();
        this.initExpression();
        this.appContext.frameComponentRefresher.regFrameComponent(this.frameId, this.frameComponent);
    };
    FrameContext.prototype.initExpression = function () {
        this.expressionEngineImpl = this.injector.get(ExpressionEngineImpl, null);
        this.expressionManager = this.injector.get(ExpressionManager, null);
        var expressionResultFactory = this.injector.get(ExpressionResultFactory, null);
        this.expressionResult = this.injector.get(ExpressionResult, null);
    };
    /**
     * 订阅异常消息
     */
    FrameContext.prototype.registerExceptionHandler = function () {
        var _this = this;
        // tslint:disable: no-string-literal
        var formAppContext = this.getFormAppContext();
        var applicationId = formAppContext.ApplicationId;
        window[window.location.href] = applicationId;
        if (this.exceptionHandler !== null) {
            var applicationContext = window[applicationId] = window[applicationId] || {};
            if (this.eventBus !== null && this.isRootFrameContext()) {
                applicationContext.isExceptionHandlerExist = true;
                this.exceptionHandler.setContext(this.appContext);
                this.eventBus.on('Exception', '', 'onException', formAppContext, function (error) {
                    if (_this.isDestoried === true) {
                        return;
                    }
                    if (error && error.error) {
                        try {
                            error.error.__frame_context__ = _this;
                        }
                        catch (_a) { }
                    }
                    _this.exceptionHandler.handle(error);
                });
            }
            this.destorySignal.subscribe(function () {
                _this.eventBus.off('Exception', '', 'onException', formAppContext);
            });
        }
    };
    FrameContext.prototype.registerAppContextDestroyEvent = function () {
        var _this = this;
        if (this.appContext && this.appContext.destorySignal) {
            this.appContext.destorySignal.subscribe(function () {
                if (_this.stateMachine) {
                    _this.stateMachine.dispose();
                    _this.stateMachine = null;
                }
                if (_this.repository) {
                    _this.repository.dispose();
                }
            });
        }
    };
    /**
     * 获取表单appcontext，即最上层appcontext
     */
    FrameContext.prototype.getFormAppContext = function () {
        return this.appContext;
    };
    /**
     * 获取frameId
     * @description 获取完整的FrameId，在非普通表单中该值等于frameId，在组合表单中该值为namespace_frameId
     */
    FrameContext.prototype.getFrameId = function (relativeFrameId) {
        if (!relativeFrameId) {
            return this.frameId;
        }
        if (this.namespace && this.namespace.length > 0) {
            return this.namespace + "_" + relativeFrameId;
        }
        else {
            return relativeFrameId;
        }
    };
    /**
     * 初始化Repository
     */
    FrameContext.prototype.initializeRepository = function () {
        this.repository.setPaginationConfig(this.repository.paginationInfo);
    };
    FrameContext.prototype.initializeForm = function () {
        // 设置Form语言服务
        // this.form.setTranslateService(translateService);
        // 初始化Form，提取FormControl定义，添加FormControl
        // this.form.init(this.bindingData, this.metadata.bindingTo, this);
        // Form
        this.form = this.injector.get(Form, null);
        if (this.form) {
            // 设置Form语言服务
            this.form.setTranslateService(this.injector.get(TranslateToken, null));
            // 初始化Form，提取FormControl定义，添加FormControl
            var bindingPath = this.viewModel.bindingPath || this.metadata.bindingTo;
            this.form.init(this.bindingData, bindingPath, this);
        }
    };
    FrameContext.prototype.initializeStateMachine = function () {
        // StateMachine 状态机需要在绑定数据之后加载
        this.stateMachine = this.injector.get(StateMachine, null);
        if (this.stateMachine) {
            this.stateMachine.initialize(this, this.variableParseService);
        }
    };
    FrameContext.prototype.initializeCommandBus = function () {
        var handlerRegistry = this.injector.get(CommandHandlerRegistry, new CommandHandlerRegistry(this.metadata.commandHandlers));
        var extendsRegistry = this.injector.get(CommandHandlerExtenderRegistry, new CommandHandlerExtenderRegistry(this.metadata.commandHandlerExtends));
        var commandHandlerFactory = new CommandHandlerFactory(handlerRegistry, extendsRegistry, this, this.variableParseService);
        this.commandBus = new CommandBus(commandHandlerFactory);
    };
    /**
     * 初始化ViewModel
     * @todo
     * 1、需要按照一定的顺序进行初始化，否则依赖无法正确处理；
     * 2、暂时使用init解决Context和其他部分的循环依赖问题，待优化；
     */
    FrameContext.prototype.initializeViewModel = function () {
        if (!this.metadata.bindingTo) {
            this.metadata.bindingTo = this.viewModel.bindingPath;
        }
        this.viewModel.init(this);
        this.regViewModel(this.viewModel);
    };
    /**
     * 初始化BindingData
     * @summary
     * 老表单：repositoryName为空，复制当前Repository里的数据；
     * 新表单：repositoryName有值，引用全局BindingData里的数据；
     */
    FrameContext.prototype.initializeBindingData = function () {
        var _this = this;
        var repositoryName = this.repository.name;
        var isRunAtHighSpeedMode = this.appContext.runMode === RunMode.highSpeed;
        if (repositoryName && isRunAtHighSpeedMode) {
            var repositoryBindingData = this.appContext.bindingDataManager.getBindingDataByName(repositoryName);
            this.bindingData.initByBindingList(repositoryBindingData.list, this.viewModel.bindingPath);
            this.bindingData.pagingInfo = repositoryBindingData.pagingInfo;
            this.bindingData.setDataTypeInfo(this.repository.entityTypeInfo);
            EntityUtil.watchReposiroty(this.repository, this.bindingData);
        }
        else {
            this.bindingData.initByRepository(this.repository, this.viewModel.bindingPath);
            EntityUtil.watchReposiroty(this.repository, this.bindingData);
            this.bindingData.changes.subscribe(function (change) {
                if (change.type === ChangeType.GlobalSelectionChanged) {
                    _this.appContext.handleSelectChange(change, _this);
                }
            });
        }
    };
    /**
     * 初始化UIState
     * 合并路由参数到UIState中
     */
    FrameContext.prototype.initializeUiState = function () {
        var _this = this;
        var isInFramework = window.location.href.indexOf('platform') > -1;
        var paramTypeTransform = this.injector.get(PARAM_TYPE_TRANSFORM_TOKEN, false);
        // 获取UIState
        this.uiState = this.injector.get(UIState, null);
        if (!this.uiState) {
            return;
        }
        this.uiState.paramTypeTransform = paramTypeTransform;
        this.uiState.initialize(this);
        // 获取路由参数
        var url = (this.appContext && this.appContext.router && this.appContext.router.url) || '';
        var routerParamService = new RouterParamService();
        var routerParams = routerParamService.getParams(url);
        // 在UIState为路由参数创建属性
        Object.keys(routerParams).forEach(function (propName) {
            Object.defineProperty(_this.uiState, propName, {
                get: function () {
                    return routerParams[propName];
                }
            });
        });
    };
    /**
     * 注册子ViewModel
     * @todo
     * 1、propName写死了
     */
    FrameContext.prototype.regViewModel = function (viewModel) {
        if (this.appContext && this.appContext.viewModelManager.exsit(viewModel.name) === false) {
            this.appContext.viewModelManager.register(viewModel.name, viewModel);
        }
        var className = viewModel.constructor.name;
        var parentContext = this.parent;
        var parentViewModel = null;
        if (parentContext && parentContext.viewModel) {
            parentViewModel = parentContext.viewModel;
        }
        if (!parentViewModel) {
            return;
        }
        // 优先使用生成器生成的name
        var childViewModels = parentViewModel['childViewModels'];
        var viewModelName = null;
        if (childViewModels) {
            var name_1 = viewModel.constructor.name;
            viewModelName = childViewModels[viewModel.name] || childViewModels[name_1];
        }
        else if (className.length === 1) {
            var classNameTokens = viewModel.name.split('-').map(function (nameToken, index) {
                if (index > 0 && nameToken.length) {
                    var pasicalName = nameToken.charAt(0).toLocaleUpperCase() + nameToken.substr(1, nameToken.length - 1);
                    return pasicalName;
                }
                else if (index === 0 && nameToken.length) {
                    var camelName = nameToken.charAt(0).toLocaleLowerCase() + nameToken.substr(1, nameToken.length - 1);
                    return camelName;
                }
                return nameToken;
            });
            viewModelName = classNameTokens.join('');
        }
        // 兼容产品部老表单的写法，如果需要vm name统一，应按照此规则
        if (!viewModelName) {
            viewModelName = className[0].toLowerCase() + className.substring(1, className.length);
        }
        parentViewModel['viewModelNames'] = parentViewModel['viewModelNames'] || [];
        parentViewModel[viewModelName] = viewModel;
        parentViewModel['viewModelNames'].push(viewModelName);
        viewModel.bindToParent(parentViewModel);
    };
    // #endregion
    /**
     * 检查是否为根FrameContext
     * @summary
     * 检查该FrameContext是不是所在AppContext中的根FrameContext
     */
    FrameContext.prototype.isRootFrameContext = function () {
        return this.parent === null || (this.appContext.runMode === RunMode.highSpeed && this.getVirtualRootFrameContext().frameComponent['isDialogRootComponent'] === true);
    };
    /**
     * 通过namespace获取当前表单的root-framecontext(非整个表单)
     * @description
     * 如果为组合表单，其当前表单的root-framecontext为单个表单的framecontext，而非整个表单的framecontext
     */
    FrameContext.prototype.getVirtualRootFrameContext = function () {
        var formFrameContext = this;
        var parent = this.parent;
        while (parent) {
            // 兼容没有重新编译的表单，如果判断parent.namespace存在会导致获取不到root-framecontext
            if (parent.namespace === this.namespace) {
                formFrameContext = parent;
                parent = parent.parent;
            }
            else {
                break;
            }
        }
        return formFrameContext;
    };
    FrameContext.prototype.getContextById = function (identify) {
        return this.appContext.getContextById(identify);
    };
    FrameContext.prototype.getViewModel = function (viewModelName) {
        var renderAppContext = this.appContext;
        if (renderAppContext) {
            return renderAppContext.viewModelManager.getViewModelByName(viewModelName);
        }
        return null;
    };
    FrameContext.prototype.attachViewComponent = function (viewComponent) {
        this.frameComponent = viewComponent;
        this.appContext.frameComponentRefresher.regFrameComponent(this.frameId, this.frameComponent);
    };
    FrameContext.prototype.invoke = function (actionPath, $event) {
        var actionBindingPath = actionPath.split('.');
        var actionName = actionBindingPath[actionBindingPath.length - 1];
        var bindingViewModel = actionBindingPath.length === 1 ? this.viewModel :
            this.getViewModel(actionBindingPath[actionBindingPath.length - 2]);
        if (!bindingViewModel) {
            alert("\u672A\u5339\u914D\u5230'" + actionPath + "'\u547D\u4EE4\u7684\u89C6\u56FE\u6A21\u578B\uFF0C\u8BF7\u68C0\u67E5\u4E8B\u4EF6\u662F\u5426\u914D\u7F6E\u6B63\u786E\u3002");
        }
        return bindingViewModel[actionName]($event);
    };
    FrameContext.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FrameContext.ctorParameters = function () { return [
        { type: Injector },
        { type: FrameContext, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    return FrameContext;
}(Context));
export { FrameContext };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWVfY29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2ZyYW1lL2ZyYW1lX2NvbnRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBR2pHLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDcEQsT0FBTyxFQUFFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsVUFBVSxFQUFFLDhCQUE4QixFQUFFLHFCQUFxQixFQUFFLHNCQUFzQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDN0gsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQy9DLE9BQU8sRUFBVSxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFHbEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFVBQVUsRUFB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QUMsT0FBTyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBRU0sNkJBQU0sR0FBYixVQUFjLFVBQWtCLEVBQUUsTUFBVztRQUMzQyxJQUFNLGlCQUFpQixHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEQsSUFBTSxVQUFVLEdBQUcsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ25FLElBQU0sZ0JBQWdCLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3hFLElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3JCLEtBQUssQ0FBQyw4QkFBUSxVQUFVLDhIQUF1QixDQUFDLENBQUM7U0FDbEQ7UUFDRCxPQUFPLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlDLENBQUM7O2dCQTlqQkYsVUFBVTs7OztnQkE3SkYsUUFBUTtnQkFrU3dELFlBQVksdUJBQTNDLFFBQVEsWUFBSSxRQUFROztJQTBiOUQsbUJBQUM7Q0FBQSxBQS9qQkQsQ0FDa0MsT0FBTyxHQThqQnhDO1NBOWpCWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IsIEluamVjdGFibGUsIE9wdGlvbmFsLCBTa2lwU2VsZiwgSW5qZWN0RmxhZ3MsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuLi9lbnRpdHkvaW5kZXgnO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAnLi4vcmVwb3NpdG9yeS9pbmRleCc7XHJcbmltcG9ydCB7IEJpbmRpbmdEYXRhIH0gZnJvbSAnLi4vYmluZGluZy1kYXRhL2luZGV4JztcclxuaW1wb3J0IHsgVUlTdGF0ZSwgUEFSQU1fVFlQRV9UUkFOU0ZPUk1fVE9LRU4gfSBmcm9tICcuLi91aS1zdGF0ZS9pbmRleCc7XHJcbmltcG9ydCB7IEZvcm0gfSBmcm9tICcuLi9mb3JtL2luZGV4JztcclxuaW1wb3J0IHsgU3RhdGVNYWNoaW5lIH0gZnJvbSAnLi4vc3RhdGUtbWFjaGluZS9pbmRleCc7XHJcbmltcG9ydCB7IFZpZXdNb2RlbCB9IGZyb20gJy4uL3ZpZXctbW9kZWwvaW5kZXgnO1xyXG5pbXBvcnQgeyBDb21tYW5kQnVzLCBDb21tYW5kSGFuZGxlckV4dGVuZGVyUmVnaXN0cnksIENvbW1hbmRIYW5kbGVyRmFjdG9yeSwgQ29tbWFuZEhhbmRsZXJSZWdpc3RyeSB9IGZyb20gJy4uL2NvbW1hbmQvaW5kZXgnO1xyXG5pbXBvcnQgeyBDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9pbmRleCc7XHJcbmltcG9ydCB7IEFwcENvbnRleHQgfSBmcm9tICcuLi9hcHAvaW5kZXgnO1xyXG5pbXBvcnQgeyBSb3V0ZXJQYXJhbVNlcnZpY2UgfSBmcm9tICcuLi9taXNjL2luZGV4JztcclxuaW1wb3J0IHsgRlJBTUVfSUQsIE5BTUVTUEFDRSB9IGZyb20gJy4vdG9rZW5zJztcclxuaW1wb3J0IHsgQ2hhbmdlLCBDaGFuZ2VUeXBlIH0gZnJvbSAnLi4vYmluZGluZy1kYXRhL2luZGV4JztcclxuaW1wb3J0IHsgRXZlbnRCdXMgfSBmcm9tICcuLi9ldmVudC1idXMtbmV3L2luZGV4JztcclxuaW1wb3J0IHsgRnJhbWVDb21wb25lbnQgfSBmcm9tICcuL2ZyYW1lX2NvbXBvbmVudCc7XHJcbmltcG9ydCB7IElFeGNlcHRpb25IYW5kbGVyIH0gZnJvbSAnLi4vZXhjZXB0aW9uL3R5cGVzJztcclxuaW1wb3J0IHsgRVhDRVBUSU9OX0hBTkRMRVIgfSBmcm9tICcuLi9leGNlcHRpb24vdG9rZW5zJztcclxuaW1wb3J0IHsgRW50aXR5VXRpbCB9IGZyb20gJy4uL2JpbmRpbmctZGF0YS9lbnRpdHlfdXRpbCc7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZVRva2VuIH0gZnJvbSAnLi4vaTE4bi90cmFuc2xhdGVfdG9rZW4nO1xyXG5pbXBvcnQgeyBWYXJpYWJsZVBhcnNlU2VydmljZSB9IGZyb20gJy4uL3ZhcmlhYmxlL3ZhcmlhYmxlX3BhcnNlX3NlcnZpY2UnO1xyXG5pbXBvcnQgeyBJQ29udGV4dE1ldGFkYXRhIH0gZnJvbSAnLi4vYXBwL2FwcF9tZXRhZGF0YSc7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9pMThuL3RyYW5zbGF0ZV9zZXJ2aWNlJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlIH0gZnJvbSAnLi4vaTE4bic7XHJcbmltcG9ydCB7IFVzZXJTZXR0aW5ncyB9IGZyb20gJy4uL2kxOG4vdHlwZXMnO1xyXG5pbXBvcnQgeyBVc2VyU2V0dGluZ3NUb2tlbiB9IGZyb20gJy4uL2kxOG4vdG9rZW5zJztcclxuaW1wb3J0IHsgVXNlclNldHRpbmdzU2VydmljZSB9IGZyb20gJy4uL2kxOG4vdXNlcl9zZXR0aW5nc19zZXJ2aWNlJztcclxuaW1wb3J0IHsgRXhwcmVzc2lvbkVuZ2luZUltcGwgfSBmcm9tICcuLi9leHByZXNzaW9uL2V4cHJlc3Npb25fZW5naW5lX2ltcGwnO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uTWFuYWdlciB9IGZyb20gJy4uL2V4cHJlc3Npb24vZXhwcmVzc2lvbl9tYW5hZ2VyJztcclxuaW1wb3J0IHsgRXhwcmVzc2lvblJlc3VsdCB9IGZyb20gJy4uL2V4cHJlc3Npb24vZXhwcmVzc2lvbl9yZXN1bHQnO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uUmVzdWx0RmFjdG9yeSB9IGZyb20gJy4uL2V4cHJlc3Npb24vZXhwcmVzc2lvbl9yZXN1bHRfZmFjdG9yeSc7XHJcbmltcG9ydCB7XHJcbiAgQ29tbWFuZFZhcmlhYmxlUGFyc2VyLCBEYXRhVmFyaWFibGVQYXJzZXIsIEZyYW1lSWRWYXJpYWJsZVBhcnNlcixcclxuICBTdGF0ZU1hY2hpbmVWYXJpYWJsZVBhcnNlciwgVUlTdGF0ZVZhcmlhYmxlUGFyc2VyXHJcbn0gZnJvbSAnLi4vdmFyaWFibGUnO1xyXG5pbXBvcnQgeyBSdW5Nb2RlIH0gZnJvbSAnLi4vY29yZSc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSURpc3Bvc2FibGUgfSBmcm9tICcuLi9jb3JlL2luZGV4JztcclxuaW1wb3J0IHsgQ29tcG9uZW50UmVmTWFuYWdlciB9IGZyb20gJy4vY29tcG9uZW50X3JlZl9tYW5hZ2VyJztcclxuXHJcblxyXG4vKipcclxuICog57uE5Lu25LiK5LiL5paHXHJcbiAqIEBkZXNjcmlwdGlvbiBcclxuICogIyDkuIrkuIvmlodcclxuICogIyMgT3ZlcnZpZXdcclxuICogXHJcbiAqIOavj+S4que7hOS7tu+8iEZyYW1lQ29tcG9uZW5077yJ6YO95pyJ6Ieq5bex55qE5LiK5LiL5paH77yIRnJhbWVDb250ZXh077yJLOmAmui/h+S4iuS4i+aWh+WPr+S7peiOt+WPluaOp+WItuWZqOeahOaJgOacieWxnuaAp++8jOWmguW4uOeUqOeahGBmcmFtZUlkYOOAgWBCaW5kaW5nRGF0YWDjgIFgUmVwb3NpdG9yeWDjgIFgVmlld01vZGVsYOOAgWBTdGF0ZU1hY2hpbmVg44CBICogYFVJU3RhdGVg562J44CC5LiK5LiL5paH5Zyo5YaF5a2Y5Lit5ZGI5qCR5b2i57uT5p6E77yM5L6d6ZmE5LqORnJhbWVDb21wb25lbnTjgILnu5PmnoTlpoLkuIvvvJpcclxuICogXHJcbiAqICFbaW1hZ2UtMjAyMTA4MDYyMDQ3NTUzNzhdKGh0dHBzOi8vb3Blbi5pbnNwdXJvbmxpbmUuY29tL2lHSVgvYXNzZXRzL2Nsb3VkcGx1cy9pZ2l4XzIxMTAvZmFycmlzL2RldmtpdC9ndWlkZS9pbWFnZXMvaW1hZ2UtMjAyMTA4MDYyMDQ3NTUzNzgucG5nKVxyXG4gKiBcclxuICog5LuO5LiK5Zu+5oiR5Lus5Y+v5Lul55yL5Ye65q+P5Liq5LiK5LiL5paH6YO95pyJ6Ieq5bex55qEYFZpZXdNb2RlbGDjgIFgVUlTdGF0ZWDvvIzpgqPkuYjlpoLkvZXnoa7lrprkuIDkuKrlkb3ku6TlnKjmiafooYzml7bnlKjnmoTmmK/lk6rkuKrkuIrkuIvmloflkaLvvJ/lhbblrp7ml6Dorrrlkb3ku6TlnKjlk6rkuKrlnLDmlrnooqvosIPnlKjvvIzkuIrkuIvmlofpg73mmK/lkb3ku6TmiYDlnKjnmoTnu4Tku7bnmoTkuIrkuIvmlofjgILljbPvvIzlpoLmnpwgKiDlkb3ku6TmjILovb3liLDkuoZgZGV0YWlsLWZvcm0tY29tcG9uZW50YOeahOinhuWbvuaooeWei++8jOS9huWRveS7pOacgOe7iOiiq2Byb290LWNvbXBvbmVudGDkuIrnmoTmjInpkq7osIPnlKjkuobvvIzlhbbkuIrkuIvmlofku43nhLbmmK9gZGV0YWlsLWZyb20tY29tcG9uZW50YOe7hOS7tueahOS4iuS4i+aWh+OAguS5i+aJgOS7peWHuueOsOi/meenjeeOsOixoeWSjEFuZ3VsYXLnmoTkvp3otZbms6ggKiDlhaXlr4bkuI3lj6/liIbvvIznlLHkuo5Bbmd1bGFy5Zyo5p+l5om+YHByb3ZpZGVyYOeahOaXtuWAmeaAu+aYr+S7juiHquW3seeahOe7hOS7tuW8gOWni+WQkeS4iuaJvu+8jOWmguaenOWcqOe7hOS7tuWGhemDqOaJvuWIsOS6huWImeS4jeWGjee7p+e7reafpeaJvu+8jOWmguaenOaJvuS4jeWIsOWImeS8mue7p+e7reWQkeS4iu+8jOWmguaenOafpeaJvuWIsOacgOS4iue6p+S+neeEtuaJvuS4jeWIsOWwseS8muaKpWBObyBwcm92aWRlciAgKiBmb3IgeHhg6ZSZ6K+v44CCXHJcbiAqIFxyXG4gKiDml6LnhLblpoLmraTvvIzlpoLmnpzmiJHku6zlnKhgZGV0YWlsLWZvcm0tY29tcG9uZW50YOS4reaDs+imgeiOt+WPlmByb290LWNvbXBvbmVudGDkuK3lrprkuYnnmoTlj5jph4/vvIhVSVN0YXRl77yJ6K+l5aaC5L2V5YGa5ZGi77yf562U5qGI5piv5YiH5o2i5LiK5LiL5paH77yM5Y+v5Lul6YCa6L+H5Lul5LiL5pa55byP5a6e546w77yaXHJcbiAqIFxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIC8vIOaWueazlTFcclxuICogY29uc3Qgcm9vdEZyYW1lQ29udGV4dCA9IHRoaXMuZnJhbWVDb250ZXh0LnJvb3Q7XHJcbiAqIC8vIOaWueazlTJcclxuICogY29uc3Qgcm9vdEZyYW1lQ29udGV4dCA9IHRoaXMuZnJhbWVDb250ZXh0LmFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRCeUlkKCdyb290LWNvbXBvbmVudCcpO1xyXG4gKiBgYGBcclxuICogXHJcbiAqIOmAmuW4uOWcqOe8luWGmWBXZWLmnoTku7Zg5pe25YWI5byV5YWlRnJhbWVDb250ZXh077yM5aaC77yaXHJcbiAqIFxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIGltcG9ydCB7RnJhbWVDb250ZXh0LEJpbmRpbmdEYXRhLFJlcG9zaXRvcnl9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuICogXHJcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZnJhbWVDb250ZXh0OkZyYW1lQ29udGV4dCl7fVxyXG4gKiBcclxuICogcHVibGljIG1ldGhvZCgpe1xyXG4gKiAgICAgY29uc3QgYmluZGluZ0RhdGE6IEJpbmRpbmdEYXRhID0gdGhpcy5mcmFtZUNvbnRleHQuYmluZGluZ0RhdGE7XHJcbiAqICAgICBjb25zdCByZXBvc2l0b3J5OiBSZXBvc2l0b3J5ID0gdGhpcy5mcmFtZUNvbnRleHQucmVwb3NpdG9yeTtcclxuICogfVxyXG4gKiBgYGBcclxuICogXHJcbiAqID4gYEZyYW1lQ29udGV4dGDnp7DkuLpgVmlld01vZGVsQ29udGV4dGDmm7TlkIjpgILvvIzlj6/ku6XnkIbop6PkuLpgTVZWTWDmnrbmnoTkuK1gVk1g55qE5LiK5LiL5paH44CCXHJcbiAqIFxyXG4gKiDmjqfliLblmajkuK3kuqblrZjlnKhgVmlld01vZGVsYOeahOamguW/teOAguWSjGBNVlZNYOaetuaehOS4reeahOeahFZN5LiA6Ie077yM5omA5Lul5Lmf5Y+v5Lul5LuOYFZNYOiuv+mXruW4uOeUqOeahOWxnuaAp+OAguWmgu+8mlxyXG4gKiBcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQge0JpbmRpbmdEYXRhLFJlcG9zaXRvcnksVmlld01vZGVsfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbiAqIFxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXdNb2RlbDpWaWV3TW9kZWwpe31cclxuICogXHJcbiAqIHB1YmxpYyBtZXRob2QoKXtcclxuICogICAgIGNvbnN0IGJpbmRpbmdEYXRhOiBCaW5kaW5nRGF0YSA9IHRoaXMudmlld01vZGVsLmJpbmRpbmdEYXRhO1xyXG4gKiAgICAgY29uc3QgcmVwb3NpdG9yeTogUmVwb3NpdG9yeSA9IHRoaXMudmlld01vZGVsLnJlcG9zaXRvcnk7XHJcbiAqIH1cclxuICogYGBgXHJcbiAqIFxyXG4gKiBcclxuICogXHJcbiAqICMjIOW4uOeUqOaTjeS9nFxyXG4gKiBcclxuICogIyMjIOiOt+WPluW9k+WJjeS4iuS4i+aWh+aJgOWxnueahOe7hOS7tlxyXG4gKiBcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiB0aGlzLmZyYW1lQ29udGV4dC5mcmFtZUNvbXBvbmVudDtcclxuICogYGBgXHJcbiAqIFxyXG4gKiAjIyMg6I635Y+W5b2T5YmN5LiK5LiL5paH55qE5qC55LiK5LiL5paHXHJcbiAqIFxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIHRoaXMuZnJhbWVDb250ZXh0LnJvb3Q7XHJcbiAqIGBgYFxyXG4gKiBcclxuICogIyMjIOiOt+WPluW9k+WJjeS4iuS4i+aWh+eahGFwcENvbnRleHRcclxuICogXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogdGhpcy5mcmFtZUNvbnRleHQuYXBwQ29udGV4dDtcclxuICogYGBgXHJcbiAqIFxyXG4gKiAjIyMg6I635Y+W5oyH5a6aZnJhbWVJZOeahOS4iuS4i+aWh1xyXG4gKiBcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiB0aGlzLmZyYW1lQ29udGV4dC5hcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZCgnZGF0YS1ncmlkLWNvbXBvbmVudCcpO1xyXG4gKiBgYGBcclxuICogXHJcbiAqICMjIyDojrflj5booajljZXmiYDmnInkuIrkuIvmlodcclxuICogXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogdGhpcy5mcmFtZUNvbnRleHQuYXBwQ29udGV4dC5mcmFtZUNvbnRleHRNYW5hZ2VyLmdldEZyYW1lQ29udGV4dHMoKTtcclxuICogYGBgXHJcbiAqIFxyXG4gKiBcclxuICogXHJcbiAqICMjIOW4uOeUqOWxnuaAp1xyXG4gKiBcclxuICogIyMjIEJpbmRpbmdEYXRhIFxyXG4gKiBcclxuICogW+WPguiAg10oW+a1qua9ruS8geS4muS6keW8gOaUvuW5s+WPsCAoaW5zcHVyb25saW5lLmNvbSldKGh0dHBzOi8vb3Blbi5pbnNwdXJvbmxpbmUuY29tL2lHSVgvIy9kb2N1bWVudC9tZGRvYy9pZ2l4LTIxMDMlMkZmYXJyaXMlMkZkZXZraXQlMkZndWlkZSUyRue7keWumuaVsOaNri5tZCkpXHJcbiAqIFxyXG4gKiAjIyMgUmVwb3NpdG9yeVxyXG4gKiBcclxuICogW+WPguiAg10oW+a1qua9ruS8geS4muS6keW8gOaUvuW5s+WPsCAoaW5zcHVyb25saW5lLmNvbSldKGh0dHBzOi8vb3Blbi5pbnNwdXJvbmxpbmUuY29tL2lHSVgvIy9kb2N1bWVudC9tZGRvYy9pZ2l4LTIxMDMlMkZmYXJyaXMlMkZkZXZraXQlMkZndWlkZSUyRuS7k+W6ky5tZCkpXHJcbiAqIFxyXG4gKiAjIyMgVmlld01vZGVsXHJcbiAqIFxyXG4gKiDmjqfliLblmajkuK1WaWV3TW9kZeWQjE1WVk3mnrbmnoTkuK3nmoRWTe+8jOWSjEZyYW1lQ29udGV4dOexu+S8vO+8jOWPr+S7pemAmui/h1ZpZXdNb2RlbOaLv+WIsEZyYW1lQ29udGV4dO+8jOWQjOagt+eahOS5n+WPr+S7pemAmui/h0ZyYW1lQ29udGV4dOaLv+WIsFZpZXdNb2RlbOOAglxyXG4gKiBcclxuICogIyMjIG5hbWVzcGFjZVxyXG4gKiBcclxuICog5ZG95ZCN56m66Ze077yM5Li76KaB5Zyo57uE5ZCI6KGo5Y2V5Zy65pmv55So5Yiw77yM5q+P5LiA5Liq6KGo5Y2V6YO95pyJ6Ieq5bex55qE5ZG95ZCN56m66Ze077yM6KKr57uE5ZCI6L+b5p2l55qE6KGo5Y2V5YW25ZG95ZCN56m66Ze05piv55u45ZCM55qE77yM5aaCQeihqOWNlee7hOWQiOS6hkLooajljZXvvIzliJlC6KGo5Y2V5YW35pyJ55u45ZCM55qE5ZG95ZCN56m66Ze077yM5ZG95ZCN56m66Ze05Li76KaB55So5LqO6KGo5Y2V6ZqU56a744CCXHJcbiAqIFxyXG4gKiAjIyMgcm9vdFxyXG4gKiBcclxuICog6I635Y+W5pW05Liq6KGo5Y2V55qE5qC55LiK5LiL5paHXHJcbiAqIFxyXG4gKiAjIyMgdWlTdGF0ZVxyXG4gKiBcclxuICog6I635Y+W5b2T5YmN57uE5Lu255qE5Y+Y6YePXHJcbiAqIFxyXG4gKiAjIyMgZnJhbWVJZFxyXG4gKiBcclxuICog5LiK5LiL5paH5qCH6K+G44CCXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGcmFtZUNvbnRleHQgZXh0ZW5kcyBDb250ZXh0IGltcGxlbWVudHMgSURpc3Bvc2FibGUsIE9uRGVzdHJveSB7XHJcblxyXG4gIHB1YmxpYyB0eXBlTmFtZSA9ICdGcmFtZUNvbnRleHQnO1xyXG5cclxuICBwcm90ZWN0ZWQgaXNEZXN0b3JpZWQgPSBmYWxzZTtcclxuICBwdWJsaWMgaXNEaXNwb3NlZCA9IGZhbHNlO1xyXG4gIC8qKlxyXG4gICAqIGlkXHJcbiAgICovXHJcbiAgcHVibGljIGZyYW1lSWQ6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICog5rOo5YWl5ZmoXHJcbiAgICovXHJcbiAgLy8gcHVibGljIGluamVjdG9yOiBJbmplY3RvcjtcclxuXHJcbiAgLyoqXHJcbiAgICog5bqU55So5LiK5LiL5paHXHJcbiAgICovXHJcbiAgcHVibGljIGFwcENvbnRleHQ6IEFwcENvbnRleHQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaguee7hOS7tuS4iuS4i+aWh1xyXG4gICAqL1xyXG4gIHB1YmxpYyByb290OiBGcmFtZUNvbnRleHQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIOeItlZpZXdNb2RlbFxyXG4gICAqL1xyXG4gIHB1YmxpYyBwYXJlbnQ6IEZyYW1lQ29udGV4dDtcclxuXHJcbiAgLyoqXHJcbiAgICog5ZCO5Luj6IqC54K5XHJcbiAgICovXHJcbiAgcHVibGljIGNoaWxkcmVuOiBNYXA8c3RyaW5nLCBGcmFtZUNvbnRleHQ+O1xyXG5cclxuICAvKipcclxuICAgKiDlrp7kvZPku5PlupNcclxuICAgKi9cclxuICBwdWJsaWMgcmVwb3NpdG9yeTogUmVwb3NpdG9yeTxFbnRpdHk+O1xyXG5cclxuICAvKipcclxuICAgKiDlkb3ku6TmgLvnur9cclxuICAgKi9cclxuICBwdWJsaWMgY29tbWFuZEJ1czogQ29tbWFuZEJ1cztcclxuXHJcbiAgLyoqXHJcbiAgICog5LqL5Lu25oC757q/XHJcbiAgICovXHJcbiAgcHVibGljIGV2ZW50QnVzOiBFdmVudEJ1cztcclxuXHJcbiAgLyoqXHJcbiAgICog6KeG5Zu+5qih5Z6LXHJcbiAgICovXHJcbiAgcHVibGljIHZpZXdNb2RlbDogVmlld01vZGVsO1xyXG5cclxuICAvKipcclxuICAgKiDmlbDmja7nu5HlrppcclxuICAgKi9cclxuICBwdWJsaWMgYmluZGluZ0RhdGE6IEJpbmRpbmdEYXRhO1xyXG5cclxuICAvKipcclxuICAgKiBVSeeKtuaAgVxyXG4gICAqL1xyXG4gIHB1YmxpYyB1aVN0YXRlOiBVSVN0YXRlO1xyXG5cclxuICAvKipcclxuICAgKiDnirbmgIHmnLpcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGVNYWNoaW5lOiBTdGF0ZU1hY2hpbmU7XHJcblxyXG4gIC8qKlxyXG4gICAqIOihqOWNlVxyXG4gICAqL1xyXG4gIHB1YmxpYyBmb3JtOiBGb3JtO1xyXG5cclxuICAvKipcclxuICAgKiDmiYDlsZ7nu4Tku7ZcclxuICAgKi9cclxuICBwdWJsaWMgZnJhbWVDb21wb25lbnQ6IEZyYW1lQ29tcG9uZW50O1xyXG5cclxuICAvKipcclxuICAgKiDlvILluLjlpITnkIZcclxuICAgKi9cclxuICBwdWJsaWMgZXhjZXB0aW9uSGFuZGxlcjogSUV4Y2VwdGlvbkhhbmRsZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIOihqOWNleWRveWQjeepuumXtFxyXG4gICAqL1xyXG4gIHB1YmxpYyBuYW1lc3BhY2U6IHN0cmluZztcclxuXHJcbiAgcHVibGljIHZhcmlhYmxlUGFyc2VTZXJ2aWNlOiBWYXJpYWJsZVBhcnNlU2VydmljZTtcclxuXHJcbiAgcHVibGljIG1ldGFkYXRhOiBJQ29udGV4dE1ldGFkYXRhID0ge1xyXG4gICAgaWRlbnRpZnk6ICcnLFxyXG4gICAgbmFtZXNwYWNlOiAnJyxcclxuICAgIGNvbW1hbmRzOiBudWxsLFxyXG4gICAgZm9ybTogbnVsbCxcclxuICAgIGZvcm1Db250cm9sczogbnVsbCxcclxuICAgIHN1YkZvcm1zOiBudWxsLFxyXG4gICAgc3RhdGVNYWNoaW5lOiBudWxsLFxyXG4gICAgdWlTdGF0ZXM6IG51bGwsXHJcbiAgICBiaW5kaW5nVG86ICcnXHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICog5pqC5YGc5LqL5Lu25oqb5Ye6XHJcbiAgICovXHJcbiAgcHVibGljIHN1c3BlbmQ6IGJvb2xlYW47XHJcbiAgcHVibGljIGV4cHJlc3Npb25FbmdpbmVJbXBsOiBFeHByZXNzaW9uRW5naW5lSW1wbDtcclxuICBwdWJsaWMgZXhwcmVzc2lvbk1hbmFnZXI6IEV4cHJlc3Npb25NYW5hZ2VyO1xyXG4gIHB1YmxpYyBleHByZXNzaW9uUmVzdWx0OiBFeHByZXNzaW9uUmVzdWx0O1xyXG4gIC8qKlxyXG4gICAqIOe0ouW8lSjku44w5byA5aeLKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbmRleDogbnVtYmVyO1xyXG4gIC8qKlxyXG4gICAqIOWkmuivrVxyXG4gICAqL1xyXG4gIHB1YmxpYyB0cmFuc2xhdGU6IFRyYW5zbGF0ZTtcclxuICAvKipcclxuICAgKiDkuIrkuIvmlofplIDmr4HmtYFcclxuICAgKi9cclxuICBwdWJsaWMgZGVzdG9yeVNpZ25hbDogU3ViamVjdDxhbnk+O1xyXG4gIC8qKlxyXG4gICAqIOe7hOS7tuW8leeUqOeuoeeQhlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb21wb25lbnRSZWZNYW5hZ2VyOiBDb21wb25lbnRSZWZNYW5hZ2VyID0gbmV3IENvbXBvbmVudFJlZk1hbmFnZXIoKTtcclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKiBAcGFyYW0gaW5qZWN0b3Ig5rOo5YWl5ZmoXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IocHVibGljIGluamVjdG9yOiBJbmplY3RvciwgQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgcGFyZW50OiBGcmFtZUNvbnRleHQpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICAvLyDlnKjop6PmnpDmqKHlvI/kuIvvvIzpgJrov4fkvp3otZbms6jlhaXojrflj5bkuI3liLBBcHBDb250ZXh05pe277yM6L+U5ZuebnVsbO+8jOWcqOWtkOexu+S4rei/m+ihjOi1i+WAvOOAglxyXG4gICAgdGhpcy5hcHBDb250ZXh0ID0gaW5qZWN0b3IuZ2V0KEFwcENvbnRleHQpO1xyXG4gICAgdGhpcy5kZXN0b3J5U2lnbmFsID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gICAgLy8g56Gu5a6a54i25a2Q5YWz57O7XHJcbiAgICAvLyDlv4Xpobvlr7lhcHBDb250ZXh06L+b6KGM5Yik5pat77yM5Y6f5Zug5aaC5LiL77yaXHJcbiAgICAvLyAx44CB5ZCm5YiZ5Lya5a+86Ie05Yqo5oCB6Lev55Sx6KGo5Y2V5Lit77yM6KKr6Lev55Sx55qE6KGo5Y2V55qEUm9vdEZyYW1lQ29udGV4dOWPmOaIkOS4u+ihqOWNleeahFJvb3RGcmFtZUNvbnRleHTvvJtcclxuICAgIC8vIDLjgIHov5vogIzlr7zoh7Tku45Sb290RnJhbWVDb250ZXh05LiK5ou/Vk/lj5jph4/mi7/kuI3liLDjgIJcclxuICAgIGlmICghcGFyZW50IHx8IHBhcmVudC5hcHBDb250ZXh0ICE9PSB0aGlzLmFwcENvbnRleHQpIHsgLy8g5Y+W5raIIGFwcENvbnRleHQg55qE5Yik5patXHJcbiAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcclxuICAgICAgdGhpcy5yb290ID0gdGhpcztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG4gICAgICB0aGlzLnJvb3QgPSBwYXJlbnQucm9vdDtcclxuICAgIH1cclxuICAgIHRoaXMuZnJhbWVJZCA9IGluamVjdG9yLmdldDxzdHJpbmc+KEZSQU1FX0lEKTtcclxuICAgIGlmICh0aGlzLmFwcENvbnRleHQuY29udGV4dE1ldGFkYXRhTWFuYWdlci5leHNpdCh0aGlzLmZyYW1lSWQpKSB7XHJcbiAgICAgIHRoaXMubWV0YWRhdGEgPSB0aGlzLmFwcENvbnRleHQuY29udGV4dE1ldGFkYXRhTWFuYWdlci5nZXRDb250ZXh0TWV0YWRhdGFCeU5hbWUodGhpcy5mcmFtZUlkKTtcclxuICAgIH1cclxuICAgIHRoaXMubmFtZXNwYWNlID0gaW5qZWN0b3IuZ2V0KE5BTUVTUEFDRSwgbnVsbCk7XHJcbiAgICB0aGlzLmJpbmRpbmdEYXRhID0gdGhpcy5pbmplY3Rvci5nZXQ8QmluZGluZ0RhdGE+KEJpbmRpbmdEYXRhLCBuZXcgQmluZGluZ0RhdGEoKSk7XHJcbiAgICBpZiAoIXRoaXMuYXBwQ29udGV4dC51c2VJc29sdXRlRXZlbnRCdXMgfHwgKHRoaXMuYXBwQ29udGV4dC51c2VJc29sdXRlRXZlbnRCdXMgJiYgIXRoaXMuYXBwQ29udGV4dC5pc29sdXRlRXZlbnRCdXMpKSB7XHJcbiAgICAgIHRoaXMuZXZlbnRCdXMgPSB0aGlzLmluamVjdG9yLmdldChFdmVudEJ1cywgbnVsbCwgSW5qZWN0RmxhZ3MuT3B0aW9uYWwpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5ldmVudEJ1cyA9IHRoaXMuYXBwQ29udGV4dC5pc29sdXRlRXZlbnRCdXM7XHJcbiAgICB9XHJcbiAgICB0aGlzLmZvcm0gPSB0aGlzLmluamVjdG9yLmdldDxGb3JtPihGb3JtLCBuZXcgRm9ybSgpKTtcclxuICAgIHRoaXMucmVwb3NpdG9yeSA9IHRoaXMuaW5qZWN0b3IuZ2V0KFJlcG9zaXRvcnksIHRoaXMuYXBwQ29udGV4dC5yZXBvc2l0b3J5KTtcclxuICAgIHRoaXMudWlTdGF0ZSA9IHRoaXMuaW5qZWN0b3IuZ2V0PFVJU3RhdGU+KFVJU3RhdGUsIG5ldyBVSVN0YXRlKCkpO1xyXG4gICAgY29uc3QgZGVmYXVsdFZpZXdNb2RlbCA9IG5ldyBWaWV3TW9kZWwoKTtcclxuICAgIGRlZmF1bHRWaWV3TW9kZWwuc2V0TWV0YWRhdGEodGhpcy5tZXRhZGF0YSk7XHJcbiAgICB0aGlzLnZpZXdNb2RlbCA9IHRoaXMuaW5qZWN0b3IuZ2V0PFZpZXdNb2RlbD4oVmlld01vZGVsLCBkZWZhdWx0Vmlld01vZGVsKTtcclxuICAgIHRoaXMudmFyaWFibGVQYXJzZVNlcnZpY2UgPSBpbmplY3Rvci5nZXQ8VmFyaWFibGVQYXJzZVNlcnZpY2U+KFZhcmlhYmxlUGFyc2VTZXJ2aWNlLCBuZXcgVmFyaWFibGVQYXJzZVNlcnZpY2UoW1xyXG4gICAgICBuZXcgRnJhbWVJZFZhcmlhYmxlUGFyc2VyKCksXHJcbiAgICAgIG5ldyBEYXRhVmFyaWFibGVQYXJzZXIoKSxcclxuICAgICAgbmV3IFVJU3RhdGVWYXJpYWJsZVBhcnNlcigpLFxyXG4gICAgICBuZXcgU3RhdGVNYWNoaW5lVmFyaWFibGVQYXJzZXIoKSxcclxuICAgICAgbmV3IENvbW1hbmRWYXJpYWJsZVBhcnNlcigpXHJcbiAgICBdKSk7XHJcbiAgICAvLyDms6jlhaVleGNlcHRpb25IYW5kbGVyXHJcbiAgICB0aGlzLmV4Y2VwdGlvbkhhbmRsZXIgPSBpbmplY3Rvci5nZXQ8SUV4Y2VwdGlvbkhhbmRsZXI+KEVYQ0VQVElPTl9IQU5ETEVSLCBudWxsLCBJbmplY3RGbGFncy5PcHRpb25hbCk7XHJcbiAgICAvLyDliJ3lp4vljJblpJror63mnI3liqFcclxuICAgIGNvbnN0IHRyYW5zbGF0ZSA9IGluamVjdG9yLmdldDxUcmFuc2xhdGU+KFRyYW5zbGF0ZVRva2VuLCBudWxsKTtcclxuICAgIHRoaXMudHJhbnNsYXRlID0gdHJhbnNsYXRlO1xyXG4gICAgVHJhbnNsYXRlU2VydmljZS5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcclxuICAgIC8vIOWIneWni+WMlueUqOaIt+mFjee9rlxyXG4gICAgY29uc3QgdXNlclNldHRpbmdzID0gaW5qZWN0b3IuZ2V0PFVzZXJTZXR0aW5ncz4oVXNlclNldHRpbmdzVG9rZW4sIG51bGwpO1xyXG4gICAgVXNlclNldHRpbmdzU2VydmljZS5zZXRVc2VyU2V0dGluZ3ModXNlclNldHRpbmdzKTtcclxuICAgIHRoaXMuaW5pdGlhbGl6ZVJlcG9zaXRvcnkoKTtcclxuICAgIHRoaXMuYXBwQ29udGV4dC5yZWdGcmFtZUNvbnRleHQodGhpcyk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyQXBwQ29udGV4dERlc3Ryb3lFdmVudCgpO1xyXG4gIH1cclxuICBkaXNwb3NlKG9wdGlvbnM/OiBhbnkpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmlzRGlzcG9zZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5pc0Rlc3RvcmllZCA9IHRydWU7XHJcbiAgICB0aGlzLmlzRGlzcG9zZWQgPSB0cnVlO1xyXG4gICAgaWYgKHRoaXMuZGVzdG9yeVNpZ25hbCkge1xyXG4gICAgICB0aGlzLmRlc3RvcnlTaWduYWwubmV4dCgpO1xyXG4gICAgICB0aGlzLmRlc3RvcnlTaWduYWwuY29tcGxldGUoKTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmFwcENvbnRleHQpIHtcclxuICAgICAgdGhpcy5hcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIudW5yZWdGcmFtZUNvbnRleHQodGhpcyk7XHJcbiAgICAgIHRoaXMuYXBwQ29udGV4dC5mcmFtZUNvbXBvbmVudFJlZnJlc2hlci51bnJlZ0ZyYW1lQ29udGV4dCh0aGlzKTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmFwcENvbnRleHQgJiYgdGhpcy5pc1Jvb3RGcmFtZUNvbnRleHQoKSA9PT0gdHJ1ZSkge1xyXG4gICAgICBjb25zdCB2aWV3TW9kZWxOYW1lcyA9IHRoaXNbJ3ZpZXdNb2RlbE5hbWVzJ107XHJcbiAgICAgIGlmICh2aWV3TW9kZWxOYW1lcyAmJiBBcnJheS5pc0FycmF5KHZpZXdNb2RlbE5hbWVzKSkge1xyXG4gICAgICAgIHZpZXdNb2RlbE5hbWVzLmZvckVhY2gobmFtZSA9PiB7XHJcbiAgICAgICAgICB0aGlzW25hbWVdID0gbnVsbDtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmFwcENvbnRleHQudW5yZWdpc3RlckZyb21NYW5hZ2VyKCk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5iaW5kaW5nRGF0YSkge1xyXG4gICAgICB0aGlzLmJpbmRpbmdEYXRhLmRpc3Bvc2UoKTtcclxuICAgICAgLy8gdGhpcy5iaW5kaW5nRGF0YSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy52aWV3TW9kZWwpIHtcclxuICAgICAgdGhpcy52aWV3TW9kZWwuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuZm9ybSkge1xyXG4gICAgICB0aGlzLmZvcm0uZGlzcG9zZSgpO1xyXG4gICAgICB0aGlzLmZvcm0gPSBudWxsO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuY29tbWFuZEJ1cykge1xyXG4gICAgICB0aGlzLmNvbW1hbmRCdXMuZGlzcG9zZSgpO1xyXG4gICAgICB0aGlzLmNvbW1hbmRCdXMgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgVHJhbnNsYXRlU2VydmljZS5kaXNwb3NlKCk7XHJcbiAgICAvLyB0aGlzLnJvb3QgPSBudWxsO1xyXG4gICAgLy8gdGhpcy5wYXJlbnQgPSBudWxsO1xyXG4gICAgLy8gdGhpcy51aVN0YXRlID0gbnVsbDtcclxuICAgIHRoaXMuZnJhbWVDb21wb25lbnQgPSBudWxsO1xyXG4gICAgdGhpcy5yZXBvc2l0b3J5ID0gbnVsbDtcclxuICAgIC8vIHRoaXMuc3RhdGVNYWNoaW5lID0gbnVsbDtcclxuICAgIC8vIHRoaXMuYXBwQ29udGV4dCA9IG51bGw7XHJcbiAgICB0aGlzLmV4Y2VwdGlvbkhhbmRsZXIgPSBudWxsO1xyXG4gICAgdGhpcy5leHByZXNzaW9uTWFuYWdlciA9IG51bGw7XHJcbiAgICB0aGlzLmV4cHJlc3Npb25FbmdpbmVJbXBsID0gbnVsbDtcclxuICAgIHRoaXMudmFyaWFibGVQYXJzZVNlcnZpY2UgPSBudWxsO1xyXG4gICAgdGhpcy5ldmVudEJ1cyA9IG51bGw7XHJcbiAgICB0aGlzLnRyYW5zbGF0ZSA9IG51bGw7XHJcbiAgICB0aGlzLmluamVjdG9yID0gbnVsbDtcclxuICAgIHRoaXMuZXhwcmVzc2lvblJlc3VsdCA9IG51bGw7XHJcbiAgICBVc2VyU2V0dGluZ3NTZXJ2aWNlLnNldFVzZXJTZXR0aW5ncyhudWxsKTtcclxuICB9XHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6YCa6L+H57uE5Lu25qCH6K+G6I635Y+W5a+55bqU55qE57uE5Lu25a6e5L6LXHJcbiAgICogQHBhcmFtIGlkIOe7hOS7tuagh+ivhlxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRDb21wb25lbnRCeUlkPFQ+KGlkOiBzdHJpbmcpOiBUIHtcclxuICAgIGNvbnN0IGNvbXBvbmVudHMgPSB0aGlzLmNvbXBvbmVudFJlZk1hbmFnZXIuZ2V0KGlkKTtcclxuICAgIGlmIChjb21wb25lbnRzICYmIGNvbXBvbmVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICBjb25zdCBjb21wb25lbnQgPSBjb21wb25lbnRzWzBdIGFzIFQ7XHJcbiAgICAgIHJldHVybiBjb21wb25lbnQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5oyH5a6a5qCH6K+G55qE5omA5pyJ57uE5Lu2XHJcbiAgICogQHBhcmFtIGlkIOe7hOS7tuagh+ivhlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRDb21wb25lbnRzQnlJZDxUPihpZDogc3RyaW5nKTogVFtdIHtcclxuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudFJlZk1hbmFnZXIuZ2V0KGlkKSBhcyBUW107XHJcbiAgfVxyXG4gIGJpbmRJbmplY3Rvcihjb21wb25lbnRJbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgIHRoaXMuaW5qZWN0b3IgPSBjb21wb25lbnRJbmplY3RvcjtcclxuICB9XHJcblxyXG4gIC8vICNyZWdpb24g5Yid5aeL5YyWXHJcblxyXG4gIC8qKlxyXG4gICAqIOWIneWni+WMllxyXG4gICAqIEB0b2RvOlxyXG4gICAqIDHjgIFDb21tYW5kSGFuZGxlcuS4reeahOacjeWKoeWPr+iDveS8muazqOWFpUNvbnRleHTvvIzmiYDku6VDb21tYW5kSGFuZGxlcuWIm+W7uuaXtuW/hemhu+W3sue7j+WtmOWcqENvbXBvbmVudENvbnRleHRcclxuICAgKiAy44CBVmlld01vZGVs55qEYnVpbGRDb21tYW5kc+S4reS8muS9v+eUqENvbW1hbmRCdXPvvIzkuLrkuobkv53or4Hpobrluo/vvIzlsIZWaWV3TW9kZWznmoTliJvlu7rkuZ/mlL7lnKhpbml05Lit44CCXHJcbiAgICovXHJcbiAgcHVibGljIGluaXQoZnJhbWVDb21wb25lbnQ6IEZyYW1lQ29tcG9uZW50KSB7XHJcbiAgICB0aGlzLmZyYW1lQ29tcG9uZW50ID0gZnJhbWVDb21wb25lbnQ7XHJcbiAgICB0aGlzLmluaXRpYWxpemVCaW5kaW5nRGF0YSgpO1xyXG4gICAgdGhpcy5pbml0aWFsaXplU3RhdGVNYWNoaW5lKCk7XHJcbiAgICB0aGlzLmluaXRpYWxpemVVaVN0YXRlKCk7XHJcbiAgICB0aGlzLmluaXRpYWxpemVGb3JtKCk7XHJcbiAgICB0aGlzLmluaXRpYWxpemVDb21tYW5kQnVzKCk7XHJcbiAgICB0aGlzLmluaXRpYWxpemVWaWV3TW9kZWwoKTtcclxuICAgIHRoaXMucmVnaXN0ZXJFeGNlcHRpb25IYW5kbGVyKCk7XHJcbiAgICB0aGlzLmluaXRFeHByZXNzaW9uKCk7XHJcbiAgICB0aGlzLmFwcENvbnRleHQuZnJhbWVDb21wb25lbnRSZWZyZXNoZXIucmVnRnJhbWVDb21wb25lbnQodGhpcy5mcmFtZUlkLCB0aGlzLmZyYW1lQ29tcG9uZW50KTtcclxuICB9XHJcbiAgcHVibGljIGluaXRFeHByZXNzaW9uKCkge1xyXG4gICAgdGhpcy5leHByZXNzaW9uRW5naW5lSW1wbCA9IHRoaXMuaW5qZWN0b3IuZ2V0PEV4cHJlc3Npb25FbmdpbmVJbXBsPihFeHByZXNzaW9uRW5naW5lSW1wbCwgbnVsbCk7XHJcbiAgICB0aGlzLmV4cHJlc3Npb25NYW5hZ2VyID0gdGhpcy5pbmplY3Rvci5nZXQ8RXhwcmVzc2lvbk1hbmFnZXI+KEV4cHJlc3Npb25NYW5hZ2VyLCBudWxsKTtcclxuICAgIGNvbnN0IGV4cHJlc3Npb25SZXN1bHRGYWN0b3J5ID0gdGhpcy5pbmplY3Rvci5nZXQ8RXhwcmVzc2lvblJlc3VsdEZhY3Rvcnk+KEV4cHJlc3Npb25SZXN1bHRGYWN0b3J5LCBudWxsKTtcclxuICAgIHRoaXMuZXhwcmVzc2lvblJlc3VsdCA9IHRoaXMuaW5qZWN0b3IuZ2V0PEV4cHJlc3Npb25SZXN1bHQ+KEV4cHJlc3Npb25SZXN1bHQsIG51bGwpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDorqLpmIXlvILluLjmtojmga9cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgcmVnaXN0ZXJFeGNlcHRpb25IYW5kbGVyKCkge1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGU6IG5vLXN0cmluZy1saXRlcmFsXHJcbiAgICBjb25zdCBmb3JtQXBwQ29udGV4dCA9IHRoaXMuZ2V0Rm9ybUFwcENvbnRleHQoKTtcclxuICAgIGNvbnN0IGFwcGxpY2F0aW9uSWQgPSBmb3JtQXBwQ29udGV4dC5BcHBsaWNhdGlvbklkO1xyXG4gICAgd2luZG93W3dpbmRvdy5sb2NhdGlvbi5ocmVmXSA9IGFwcGxpY2F0aW9uSWQ7XHJcbiAgICBpZiAodGhpcy5leGNlcHRpb25IYW5kbGVyICE9PSBudWxsKSB7XHJcbiAgICAgIGNvbnN0IGFwcGxpY2F0aW9uQ29udGV4dCA9IHdpbmRvd1thcHBsaWNhdGlvbklkXSA9IHdpbmRvd1thcHBsaWNhdGlvbklkXSB8fCB7fTtcclxuICAgICAgaWYgKHRoaXMuZXZlbnRCdXMgIT09IG51bGwgJiYgdGhpcy5pc1Jvb3RGcmFtZUNvbnRleHQoKSkge1xyXG4gICAgICAgIGFwcGxpY2F0aW9uQ29udGV4dC5pc0V4Y2VwdGlvbkhhbmRsZXJFeGlzdCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5leGNlcHRpb25IYW5kbGVyLnNldENvbnRleHQodGhpcy5hcHBDb250ZXh0KTtcclxuICAgICAgICB0aGlzLmV2ZW50QnVzLm9uKCdFeGNlcHRpb24nLCAnJywgJ29uRXhjZXB0aW9uJywgZm9ybUFwcENvbnRleHQsIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgaWYgKHRoaXMuaXNEZXN0b3JpZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKGVycm9yICYmIGVycm9yLmVycm9yKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgZXJyb3IuZXJyb3IuX19mcmFtZV9jb250ZXh0X18gPSB0aGlzO1xyXG4gICAgICAgICAgICB9IGNhdGNoIHsgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5leGNlcHRpb25IYW5kbGVyLmhhbmRsZShlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5kZXN0b3J5U2lnbmFsLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5ldmVudEJ1cy5vZmYoJ0V4Y2VwdGlvbicsICcnLCAnb25FeGNlcHRpb24nLCBmb3JtQXBwQ29udGV4dCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBwcm90ZWN0ZWQgcmVnaXN0ZXJBcHBDb250ZXh0RGVzdHJveUV2ZW50KCkge1xyXG4gICAgaWYgKHRoaXMuYXBwQ29udGV4dCAmJiB0aGlzLmFwcENvbnRleHQuZGVzdG9yeVNpZ25hbCkge1xyXG4gICAgICB0aGlzLmFwcENvbnRleHQuZGVzdG9yeVNpZ25hbC5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlTWFjaGluZSkge1xyXG4gICAgICAgICAgdGhpcy5zdGF0ZU1hY2hpbmUuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgdGhpcy5zdGF0ZU1hY2hpbmUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5yZXBvc2l0b3J5KSB7XHJcbiAgICAgICAgICB0aGlzLnJlcG9zaXRvcnkuZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluihqOWNlWFwcGNvbnRleHTvvIzljbPmnIDkuIrlsYJhcHBjb250ZXh0XHJcbiAgICovXHJcbiAgcHVibGljIGdldEZvcm1BcHBDb250ZXh0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYXBwQ29udGV4dDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+WZnJhbWVJZFxyXG4gICAqIEBkZXNjcmlwdGlvbiDojrflj5blrozmlbTnmoRGcmFtZUlk77yM5Zyo6Z2e5pmu6YCa6KGo5Y2V5Lit6K+l5YC8562J5LqOZnJhbWVJZO+8jOWcqOe7hOWQiOihqOWNleS4reivpeWAvOS4um5hbWVzcGFjZV9mcmFtZUlkXHJcbiAgICovXHJcbiAgcHVibGljIGdldEZyYW1lSWQocmVsYXRpdmVGcmFtZUlkOiBzdHJpbmcpIHtcclxuICAgIGlmICghcmVsYXRpdmVGcmFtZUlkKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmZyYW1lSWQ7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5uYW1lc3BhY2UgJiYgdGhpcy5uYW1lc3BhY2UubGVuZ3RoID4gMCkge1xyXG4gICAgICByZXR1cm4gYCR7dGhpcy5uYW1lc3BhY2V9XyR7cmVsYXRpdmVGcmFtZUlkfWA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gcmVsYXRpdmVGcmFtZUlkO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDliJ3lp4vljJZSZXBvc2l0b3J5XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpbml0aWFsaXplUmVwb3NpdG9yeSgpIHtcclxuXHJcbiAgICB0aGlzLnJlcG9zaXRvcnkuc2V0UGFnaW5hdGlvbkNvbmZpZyh0aGlzLnJlcG9zaXRvcnkucGFnaW5hdGlvbkluZm8pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0aWFsaXplRm9ybSgpIHtcclxuICAgIC8vIOiuvue9rkZvcm3or63oqIDmnI3liqFcclxuICAgIC8vIHRoaXMuZm9ybS5zZXRUcmFuc2xhdGVTZXJ2aWNlKHRyYW5zbGF0ZVNlcnZpY2UpO1xyXG4gICAgLy8g5Yid5aeL5YyWRm9ybe+8jOaPkOWPlkZvcm1Db250cm9s5a6a5LmJ77yM5re75YqgRm9ybUNvbnRyb2xcclxuICAgIC8vIHRoaXMuZm9ybS5pbml0KHRoaXMuYmluZGluZ0RhdGEsIHRoaXMubWV0YWRhdGEuYmluZGluZ1RvLCB0aGlzKTtcclxuICAgIC8vIEZvcm1cclxuICAgIHRoaXMuZm9ybSA9IHRoaXMuaW5qZWN0b3IuZ2V0PEZvcm0+KEZvcm0sIG51bGwpO1xyXG4gICAgaWYgKHRoaXMuZm9ybSkge1xyXG4gICAgICAvLyDorr7nva5Gb3Jt6K+t6KiA5pyN5YqhXHJcbiAgICAgIHRoaXMuZm9ybS5zZXRUcmFuc2xhdGVTZXJ2aWNlKHRoaXMuaW5qZWN0b3IuZ2V0KFRyYW5zbGF0ZVRva2VuLCBudWxsKSk7XHJcbiAgICAgIC8vIOWIneWni+WMlkZvcm3vvIzmj5Dlj5ZGb3JtQ29udHJvbOWumuS5ie+8jOa3u+WKoEZvcm1Db250cm9sXHJcbiAgICAgIGNvbnN0IGJpbmRpbmdQYXRoID0gdGhpcy52aWV3TW9kZWwuYmluZGluZ1BhdGggfHwgdGhpcy5tZXRhZGF0YS5iaW5kaW5nVG87XHJcbiAgICAgIHRoaXMuZm9ybS5pbml0KHRoaXMuYmluZGluZ0RhdGEsIGJpbmRpbmdQYXRoLCB0aGlzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdGlhbGl6ZVN0YXRlTWFjaGluZSgpIHtcclxuICAgIC8vIFN0YXRlTWFjaGluZSDnirbmgIHmnLrpnIDopoHlnKjnu5HlrprmlbDmja7kuYvlkI7liqDovb1cclxuICAgIHRoaXMuc3RhdGVNYWNoaW5lID0gdGhpcy5pbmplY3Rvci5nZXQ8U3RhdGVNYWNoaW5lPihTdGF0ZU1hY2hpbmUsIG51bGwpO1xyXG4gICAgaWYgKHRoaXMuc3RhdGVNYWNoaW5lKSB7XHJcbiAgICAgIHRoaXMuc3RhdGVNYWNoaW5lLmluaXRpYWxpemUodGhpcywgdGhpcy52YXJpYWJsZVBhcnNlU2VydmljZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGluaXRpYWxpemVDb21tYW5kQnVzKCkge1xyXG4gICAgY29uc3QgaGFuZGxlclJlZ2lzdHJ5ID0gdGhpcy5pbmplY3Rvci5nZXQ8Q29tbWFuZEhhbmRsZXJSZWdpc3RyeT4oQ29tbWFuZEhhbmRsZXJSZWdpc3RyeSxcclxuICAgICAgbmV3IENvbW1hbmRIYW5kbGVyUmVnaXN0cnkodGhpcy5tZXRhZGF0YS5jb21tYW5kSGFuZGxlcnMpKTtcclxuICAgIGNvbnN0IGV4dGVuZHNSZWdpc3RyeSA9IHRoaXMuaW5qZWN0b3IuZ2V0PENvbW1hbmRIYW5kbGVyRXh0ZW5kZXJSZWdpc3RyeT4oQ29tbWFuZEhhbmRsZXJFeHRlbmRlclJlZ2lzdHJ5LFxyXG4gICAgICBuZXcgQ29tbWFuZEhhbmRsZXJFeHRlbmRlclJlZ2lzdHJ5KHRoaXMubWV0YWRhdGEuY29tbWFuZEhhbmRsZXJFeHRlbmRzKSk7XHJcbiAgICBjb25zdCBjb21tYW5kSGFuZGxlckZhY3RvcnkgPSBuZXcgQ29tbWFuZEhhbmRsZXJGYWN0b3J5KGhhbmRsZXJSZWdpc3RyeSwgZXh0ZW5kc1JlZ2lzdHJ5LCB0aGlzLCB0aGlzLnZhcmlhYmxlUGFyc2VTZXJ2aWNlKTtcclxuICAgIHRoaXMuY29tbWFuZEJ1cyA9IG5ldyBDb21tYW5kQnVzKGNvbW1hbmRIYW5kbGVyRmFjdG9yeSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJ3lp4vljJZWaWV3TW9kZWxcclxuICAgKiBAdG9kb1xyXG4gICAqIDHjgIHpnIDopoHmjInnhafkuIDlrprnmoTpobrluo/ov5vooYzliJ3lp4vljJbvvIzlkKbliJnkvp3otZbml6Dms5XmraPnoa7lpITnkIbvvJtcclxuICAgKiAy44CB5pqC5pe25L2/55SoaW5pdOino+WGs0NvbnRleHTlkozlhbbku5bpg6jliIbnmoTlvqrnjq/kvp3otZbpl67popjvvIzlvoXkvJjljJbvvJtcclxuICAgKi9cclxuICBwcml2YXRlIGluaXRpYWxpemVWaWV3TW9kZWwoKSB7XHJcbiAgICBpZiAoIXRoaXMubWV0YWRhdGEuYmluZGluZ1RvKSB7XHJcbiAgICAgIHRoaXMubWV0YWRhdGEuYmluZGluZ1RvID0gdGhpcy52aWV3TW9kZWwuYmluZGluZ1BhdGg7XHJcbiAgICB9XHJcbiAgICB0aGlzLnZpZXdNb2RlbC5pbml0KHRoaXMpO1xyXG4gICAgdGhpcy5yZWdWaWV3TW9kZWwodGhpcy52aWV3TW9kZWwpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIOWIneWni+WMlkJpbmRpbmdEYXRhXHJcbiAgICogQHN1bW1hcnlcclxuICAgKiDogIHooajljZXvvJpyZXBvc2l0b3J5TmFtZeS4uuepuu+8jOWkjeWItuW9k+WJjVJlcG9zaXRvcnnph4znmoTmlbDmja7vvJtcclxuICAgKiDmlrDooajljZXvvJpyZXBvc2l0b3J5TmFtZeacieWAvO+8jOW8leeUqOWFqOWxgEJpbmRpbmdEYXRh6YeM55qE5pWw5o2u77ybXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpbml0aWFsaXplQmluZGluZ0RhdGEoKSB7XHJcbiAgICBjb25zdCByZXBvc2l0b3J5TmFtZSA9IHRoaXMucmVwb3NpdG9yeS5uYW1lO1xyXG4gICAgY29uc3QgaXNSdW5BdEhpZ2hTcGVlZE1vZGUgPSB0aGlzLmFwcENvbnRleHQucnVuTW9kZSA9PT0gUnVuTW9kZS5oaWdoU3BlZWQ7XHJcbiAgICBpZiAocmVwb3NpdG9yeU5hbWUgJiYgaXNSdW5BdEhpZ2hTcGVlZE1vZGUpIHtcclxuICAgICAgY29uc3QgcmVwb3NpdG9yeUJpbmRpbmdEYXRhID0gdGhpcy5hcHBDb250ZXh0LmJpbmRpbmdEYXRhTWFuYWdlci5nZXRCaW5kaW5nRGF0YUJ5TmFtZShyZXBvc2l0b3J5TmFtZSk7XHJcbiAgICAgIHRoaXMuYmluZGluZ0RhdGEuaW5pdEJ5QmluZGluZ0xpc3QocmVwb3NpdG9yeUJpbmRpbmdEYXRhLmxpc3QsIHRoaXMudmlld01vZGVsLmJpbmRpbmdQYXRoKTtcclxuICAgICAgdGhpcy5iaW5kaW5nRGF0YS5wYWdpbmdJbmZvID0gcmVwb3NpdG9yeUJpbmRpbmdEYXRhLnBhZ2luZ0luZm87XHJcbiAgICAgIHRoaXMuYmluZGluZ0RhdGEuc2V0RGF0YVR5cGVJbmZvKHRoaXMucmVwb3NpdG9yeS5lbnRpdHlUeXBlSW5mbyk7XHJcbiAgICAgIEVudGl0eVV0aWwud2F0Y2hSZXBvc2lyb3R5KHRoaXMucmVwb3NpdG9yeSwgdGhpcy5iaW5kaW5nRGF0YSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmJpbmRpbmdEYXRhLmluaXRCeVJlcG9zaXRvcnkodGhpcy5yZXBvc2l0b3J5LCB0aGlzLnZpZXdNb2RlbC5iaW5kaW5nUGF0aCk7XHJcbiAgICAgIEVudGl0eVV0aWwud2F0Y2hSZXBvc2lyb3R5KHRoaXMucmVwb3NpdG9yeSwgdGhpcy5iaW5kaW5nRGF0YSk7XHJcbiAgICAgIHRoaXMuYmluZGluZ0RhdGEuY2hhbmdlcy5zdWJzY3JpYmUoKGNoYW5nZTogQ2hhbmdlKSA9PiB7XHJcbiAgICAgICAgaWYgKGNoYW5nZS50eXBlID09PSBDaGFuZ2VUeXBlLkdsb2JhbFNlbGVjdGlvbkNoYW5nZWQpIHtcclxuICAgICAgICAgIHRoaXMuYXBwQ29udGV4dC5oYW5kbGVTZWxlY3RDaGFuZ2UoY2hhbmdlLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIOWIneWni+WMllVJU3RhdGVcclxuICAgKiDlkIjlubbot6/nlLHlj4LmlbDliLBVSVN0YXRl5LitXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpbml0aWFsaXplVWlTdGF0ZSgpIHtcclxuICAgIGNvbnN0IGlzSW5GcmFtZXdvcmsgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCdwbGF0Zm9ybScpID4gLTE7XHJcbiAgICBjb25zdCBwYXJhbVR5cGVUcmFuc2Zvcm0gPSB0aGlzLmluamVjdG9yLmdldDxib29sZWFuPihQQVJBTV9UWVBFX1RSQU5TRk9STV9UT0tFTiwgZmFsc2UpO1xyXG4gICAgLy8g6I635Y+WVUlTdGF0ZVxyXG4gICAgdGhpcy51aVN0YXRlID0gdGhpcy5pbmplY3Rvci5nZXQ8VUlTdGF0ZT4oVUlTdGF0ZSwgbnVsbCk7XHJcbiAgICBpZiAoIXRoaXMudWlTdGF0ZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLnVpU3RhdGUucGFyYW1UeXBlVHJhbnNmb3JtID0gcGFyYW1UeXBlVHJhbnNmb3JtO1xyXG4gICAgdGhpcy51aVN0YXRlLmluaXRpYWxpemUodGhpcyk7XHJcbiAgICAvLyDojrflj5bot6/nlLHlj4LmlbBcclxuICAgIGNvbnN0IHVybCA9ICh0aGlzLmFwcENvbnRleHQgJiYgdGhpcy5hcHBDb250ZXh0LnJvdXRlciAmJiB0aGlzLmFwcENvbnRleHQucm91dGVyLnVybCkgfHwgJyc7XHJcbiAgICBjb25zdCByb3V0ZXJQYXJhbVNlcnZpY2UgPSBuZXcgUm91dGVyUGFyYW1TZXJ2aWNlKCk7XHJcbiAgICBjb25zdCByb3V0ZXJQYXJhbXMgPSByb3V0ZXJQYXJhbVNlcnZpY2UuZ2V0UGFyYW1zKHVybCk7XHJcblxyXG4gICAgLy8g5ZyoVUlTdGF0ZeS4uui3r+eUseWPguaVsOWIm+W7uuWxnuaAp1xyXG4gICAgT2JqZWN0LmtleXMocm91dGVyUGFyYW1zKS5mb3JFYWNoKChwcm9wTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnVpU3RhdGUsIHByb3BOYW1lLCB7XHJcbiAgICAgICAgZ2V0OiAoKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gcm91dGVyUGFyYW1zW3Byb3BOYW1lXTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDms6jlhozlrZBWaWV3TW9kZWxcclxuICAgKiBAdG9kb1xyXG4gICAqIDHjgIFwcm9wTmFtZeWGmeatu+S6hlxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCByZWdWaWV3TW9kZWwodmlld01vZGVsOiBWaWV3TW9kZWwpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmFwcENvbnRleHQgJiYgdGhpcy5hcHBDb250ZXh0LnZpZXdNb2RlbE1hbmFnZXIuZXhzaXQodmlld01vZGVsLm5hbWUpID09PSBmYWxzZSkge1xyXG4gICAgICB0aGlzLmFwcENvbnRleHQudmlld01vZGVsTWFuYWdlci5yZWdpc3Rlcih2aWV3TW9kZWwubmFtZSwgdmlld01vZGVsKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGNsYXNzTmFtZSA9IHZpZXdNb2RlbC5jb25zdHJ1Y3Rvci5uYW1lO1xyXG4gICAgY29uc3QgcGFyZW50Q29udGV4dCA9IHRoaXMucGFyZW50O1xyXG4gICAgbGV0IHBhcmVudFZpZXdNb2RlbCA9IG51bGw7XHJcbiAgICBpZiAocGFyZW50Q29udGV4dCAmJiBwYXJlbnRDb250ZXh0LnZpZXdNb2RlbCkge1xyXG4gICAgICBwYXJlbnRWaWV3TW9kZWwgPSBwYXJlbnRDb250ZXh0LnZpZXdNb2RlbDtcclxuICAgIH1cclxuICAgIGlmICghcGFyZW50Vmlld01vZGVsKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIOS8mOWFiOS9v+eUqOeUn+aIkOWZqOeUn+aIkOeahG5hbWVcclxuICAgIGNvbnN0IGNoaWxkVmlld01vZGVscyA9IHBhcmVudFZpZXdNb2RlbFsnY2hpbGRWaWV3TW9kZWxzJ107XHJcbiAgICBsZXQgdmlld01vZGVsTmFtZSA9IG51bGw7XHJcbiAgICBpZiAoY2hpbGRWaWV3TW9kZWxzKSB7XHJcbiAgICAgIGNvbnN0IG5hbWUgPSB2aWV3TW9kZWwuY29uc3RydWN0b3IubmFtZTtcclxuICAgICAgdmlld01vZGVsTmFtZSA9IGNoaWxkVmlld01vZGVsc1t2aWV3TW9kZWwubmFtZV0gfHwgY2hpbGRWaWV3TW9kZWxzW25hbWVdO1xyXG4gICAgfSBlbHNlIGlmIChjbGFzc05hbWUubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIGNvbnN0IGNsYXNzTmFtZVRva2VucyA9IHZpZXdNb2RlbC5uYW1lLnNwbGl0KCctJykubWFwKChuYW1lVG9rZW4sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gMCAmJiBuYW1lVG9rZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICBjb25zdCBwYXNpY2FsTmFtZSA9IG5hbWVUb2tlbi5jaGFyQXQoMCkudG9Mb2NhbGVVcHBlckNhc2UoKSArIG5hbWVUb2tlbi5zdWJzdHIoMSwgbmFtZVRva2VuLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgcmV0dXJuIHBhc2ljYWxOYW1lO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IDAgJiYgbmFtZVRva2VuLmxlbmd0aCkge1xyXG4gICAgICAgICAgY29uc3QgY2FtZWxOYW1lID0gbmFtZVRva2VuLmNoYXJBdCgwKS50b0xvY2FsZUxvd2VyQ2FzZSgpICsgbmFtZVRva2VuLnN1YnN0cigxLCBuYW1lVG9rZW4ubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICByZXR1cm4gY2FtZWxOYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmFtZVRva2VuO1xyXG4gICAgICB9KTtcclxuICAgICAgdmlld01vZGVsTmFtZSA9IGNsYXNzTmFtZVRva2Vucy5qb2luKCcnKTtcclxuICAgIH1cclxuICAgIC8vIOWFvOWuueS6p+WTgemDqOiAgeihqOWNleeahOWGmeazle+8jOWmguaenOmcgOimgXZtIG5hbWXnu5/kuIDvvIzlupTmjInnhafmraTop4TliJlcclxuICAgIGlmICghdmlld01vZGVsTmFtZSkge1xyXG4gICAgICB2aWV3TW9kZWxOYW1lID0gY2xhc3NOYW1lWzBdLnRvTG93ZXJDYXNlKCkgKyBjbGFzc05hbWUuc3Vic3RyaW5nKDEsIGNsYXNzTmFtZS5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgcGFyZW50Vmlld01vZGVsWyd2aWV3TW9kZWxOYW1lcyddID0gcGFyZW50Vmlld01vZGVsWyd2aWV3TW9kZWxOYW1lcyddIHx8IFtdO1xyXG4gICAgcGFyZW50Vmlld01vZGVsW3ZpZXdNb2RlbE5hbWVdID0gdmlld01vZGVsO1xyXG4gICAgcGFyZW50Vmlld01vZGVsWyd2aWV3TW9kZWxOYW1lcyddLnB1c2godmlld01vZGVsTmFtZSk7XHJcbiAgICB2aWV3TW9kZWwuYmluZFRvUGFyZW50KHBhcmVudFZpZXdNb2RlbCk7XHJcbiAgfVxyXG5cclxuICAvLyAjZW5kcmVnaW9uXHJcblxyXG4gIC8qKlxyXG4gICAqIOajgOafpeaYr+WQpuS4uuaguUZyYW1lQ29udGV4dFxyXG4gICAqIEBzdW1tYXJ5XHJcbiAgICog5qOA5p+l6K+lRnJhbWVDb250ZXh05piv5LiN5piv5omA5ZyoQXBwQ29udGV4dOS4reeahOaguUZyYW1lQ29udGV4dFxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc1Jvb3RGcmFtZUNvbnRleHQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQgPT09IG51bGwgfHwgKHRoaXMuYXBwQ29udGV4dC5ydW5Nb2RlID09PSBSdW5Nb2RlLmhpZ2hTcGVlZCAmJiB0aGlzLmdldFZpcnR1YWxSb290RnJhbWVDb250ZXh0KCkuZnJhbWVDb21wb25lbnRbJ2lzRGlhbG9nUm9vdENvbXBvbmVudCddID09PSB0cnVlKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6YCa6L+HbmFtZXNwYWNl6I635Y+W5b2T5YmN6KGo5Y2V55qEcm9vdC1mcmFtZWNvbnRleHQo6Z2e5pW05Liq6KGo5Y2VKVxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIOWmguaenOS4uue7hOWQiOihqOWNle+8jOWFtuW9k+WJjeihqOWNleeahHJvb3QtZnJhbWVjb250ZXh05Li65Y2V5Liq6KGo5Y2V55qEZnJhbWVjb250ZXh077yM6ICM6Z2e5pW05Liq6KGo5Y2V55qEZnJhbWVjb250ZXh0XHJcbiAgICovXHJcbiAgcHVibGljIGdldFZpcnR1YWxSb290RnJhbWVDb250ZXh0KCkge1xyXG4gICAgbGV0IGZvcm1GcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCA9IHRoaXM7XHJcbiAgICBsZXQgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XHJcbiAgICB3aGlsZSAocGFyZW50KSB7XHJcbiAgICAgIC8vIOWFvOWuueayoeaciemHjeaWsOe8luivkeeahOihqOWNle+8jOWmguaenOWIpOaWrXBhcmVudC5uYW1lc3BhY2XlrZjlnKjkvJrlr7zoh7Tojrflj5bkuI3liLByb290LWZyYW1lY29udGV4dFxyXG4gICAgICBpZiAocGFyZW50Lm5hbWVzcGFjZSA9PT0gdGhpcy5uYW1lc3BhY2UpIHtcclxuICAgICAgICBmb3JtRnJhbWVDb250ZXh0ID0gcGFyZW50O1xyXG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmb3JtRnJhbWVDb250ZXh0O1xyXG4gIH1cclxuXHJcblxyXG4gIHB1YmxpYyBnZXRDb250ZXh0QnlJZChpZGVudGlmeTogc3RyaW5nKTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLmFwcENvbnRleHQuZ2V0Q29udGV4dEJ5SWQoaWRlbnRpZnkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFZpZXdNb2RlbCh2aWV3TW9kZWxOYW1lOiBzdHJpbmcpOiBWaWV3TW9kZWwge1xyXG4gICAgY29uc3QgcmVuZGVyQXBwQ29udGV4dCA9IHRoaXMuYXBwQ29udGV4dDtcclxuICAgIGlmIChyZW5kZXJBcHBDb250ZXh0KSB7XHJcbiAgICAgIHJldHVybiByZW5kZXJBcHBDb250ZXh0LnZpZXdNb2RlbE1hbmFnZXIuZ2V0Vmlld01vZGVsQnlOYW1lKHZpZXdNb2RlbE5hbWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXR0YWNoVmlld0NvbXBvbmVudCh2aWV3Q29tcG9uZW50OiBGcmFtZUNvbXBvbmVudCkge1xyXG4gICAgdGhpcy5mcmFtZUNvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XHJcbiAgICB0aGlzLmFwcENvbnRleHQuZnJhbWVDb21wb25lbnRSZWZyZXNoZXIucmVnRnJhbWVDb21wb25lbnQodGhpcy5mcmFtZUlkLCB0aGlzLmZyYW1lQ29tcG9uZW50KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpbnZva2UoYWN0aW9uUGF0aDogc3RyaW5nLCAkZXZlbnQ6IGFueSkge1xyXG4gICAgY29uc3QgYWN0aW9uQmluZGluZ1BhdGggPSBhY3Rpb25QYXRoLnNwbGl0KCcuJyk7XHJcbiAgICBjb25zdCBhY3Rpb25OYW1lID0gYWN0aW9uQmluZGluZ1BhdGhbYWN0aW9uQmluZGluZ1BhdGgubGVuZ3RoIC0gMV07XHJcbiAgICBjb25zdCBiaW5kaW5nVmlld01vZGVsID0gYWN0aW9uQmluZGluZ1BhdGgubGVuZ3RoID09PSAxID8gdGhpcy52aWV3TW9kZWwgOlxyXG4gICAgICB0aGlzLmdldFZpZXdNb2RlbChhY3Rpb25CaW5kaW5nUGF0aFthY3Rpb25CaW5kaW5nUGF0aC5sZW5ndGggLSAyXSk7XHJcbiAgICBpZiAoIWJpbmRpbmdWaWV3TW9kZWwpIHtcclxuICAgICAgYWxlcnQoYOacquWMuemFjeWIsCcke2FjdGlvblBhdGh9J+WRveS7pOeahOinhuWbvuaooeWei++8jOivt+ajgOafpeS6i+S7tuaYr+WQpumFjee9ruato+ehruOAgmApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGJpbmRpbmdWaWV3TW9kZWxbYWN0aW9uTmFtZV0oJGV2ZW50KTtcclxuICB9XHJcbn1cclxuIl19