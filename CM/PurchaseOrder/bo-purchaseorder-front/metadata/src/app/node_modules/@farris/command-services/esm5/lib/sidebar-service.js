import { Injectable, Optional } from '@angular/core';
import { of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { FarrisSidebarService } from '@farris/ui-sidebar';
import { FrameContext } from '@farris/devkit';
import { FormMessageService } from './form-message.service';
import { LanguageService } from './languag.service';
/**
 * 侧边栏服务
 * @scope FrameComponent
 */
var SidebarService = /** @class */ (function () {
    function SidebarService(frameContext, sidebarUIService, messageService, languageService) {
        this.frameContext = frameContext;
        this.sidebarUIService = sidebarUIService;
        this.messageService = messageService;
        this.languageService = languageService;
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    Object.defineProperty(SidebarService.prototype, "repository", {
        get: function () {
            return this.frameContext.repository;
        },
        enumerable: true,
        configurable: true
    });
    SidebarService.prototype.openSidebar = function () {
        this.sidebarUIService.sendIsOpen(true);
    };
    SidebarService.prototype.closeSidebar = function () {
        this.sidebarUIService.sendIsOpen(false);
    };
    /**
     * 关闭前先取消变更
     */
    SidebarService.prototype.confirmBeforeClosingSidebar = function () {
        // 检查是否有变更，没有变更直接关闭
        var ifChangesExist = this.repository.entityManager.checkAllEntityChanges();
        if (!ifChangesExist) {
            return of(true);
        }
        // 确认是否关闭
        var confirm$ = this.messageService.question(this.languageService['exitWithoutSave']);
        var result$ = confirm$.pipe(switchMap(function (confirmResult) {
            if (confirmResult === false) {
                return of(false);
            }
            else {
                return of(true);
            }
        }));
        return result$;
    };
    /**
     * 继续关闭侧边栏
     */
    SidebarService.prototype.continueClosingSidebar = function () {
        return of(true);
    };
    /**
     * 阻止侧边栏关闭
     */
    SidebarService.prototype.stopClosingSidebar = function () {
        return of(false);
    };
    SidebarService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SidebarService.ctorParameters = function () { return [
        { type: FrameContext },
        { type: FarrisSidebarService },
        { type: FormMessageService },
        { type: LanguageService, decorators: [{ type: Optional }] }
    ]; };
    return SidebarService;
}());
export { SidebarService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZWJhci1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3NpZGViYXItc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMxRCxPQUFPLEVBQVUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBR3BEOzs7R0FHRztBQUNIO0lBT0Usd0JBQ1UsWUFBMEIsRUFDMUIsZ0JBQXNDLEVBQ3RDLGNBQWtDLEVBQ3RCLGVBQWdDO1FBSDVDLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBc0I7UUFDdEMsbUJBQWMsR0FBZCxjQUFjLENBQW9CO1FBQ3RCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUVwRCxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN6QixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN0RDtJQUNILENBQUM7SUFiRCxzQkFBWSxzQ0FBVTthQUF0QjtZQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFtQyxDQUFDO1FBQy9ELENBQUM7OztPQUFBO0lBYUQsb0NBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELHFDQUFZLEdBQVo7UUFDRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7T0FFRztJQUNILG9EQUEyQixHQUEzQjtRQUVFLG1CQUFtQjtRQUNuQixJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQzdFLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDbkIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakI7UUFFRCxTQUFTO1FBQ1QsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7UUFDdkYsSUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FDM0IsU0FBUyxDQUFDLFVBQUMsYUFBc0I7WUFDL0IsSUFBSSxhQUFhLEtBQUssS0FBSyxFQUFFO2dCQUMzQixPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNsQjtpQkFBTTtnQkFDTCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNqQjtRQUNILENBQUMsQ0FBQyxDQUNILENBQUM7UUFFRixPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQ7O09BRUc7SUFDSSwrQ0FBc0IsR0FBN0I7UUFDRSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRUQ7O09BRUc7SUFDSSwyQ0FBa0IsR0FBekI7UUFDRSxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQixDQUFDOztnQkFoRUYsVUFBVTs7OztnQkFWTSxZQUFZO2dCQURwQixvQkFBb0I7Z0JBR3BCLGtCQUFrQjtnQkFDbEIsZUFBZSx1QkFrQm5CLFFBQVE7O0lBc0RiLHFCQUFDO0NBQUEsQUFqRUQsSUFpRUM7QUFFRCxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEZhcnJpc1NpZGViYXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1zaWRlYmFyJztcbmltcG9ydCB7IEVudGl0eSwgRnJhbWVDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xuaW1wb3J0IHsgQmVmUmVwb3NpdG9yeSB9IGZyb20gJ0BmYXJyaXMvYmVmJztcbmltcG9ydCB7IEZvcm1NZXNzYWdlU2VydmljZSB9IGZyb20gJy4vZm9ybS1tZXNzYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9sYW5ndWFnLnNlcnZpY2UnO1xuXG5cbi8qKlxuICog5L6n6L655qCP5pyN5YqhXG4gKiBAc2NvcGUgRnJhbWVDb21wb25lbnRcbiAqL1xuQEluamVjdGFibGUoKVxuY2xhc3MgU2lkZWJhclNlcnZpY2Uge1xuXG4gIHByaXZhdGUgZ2V0IHJlcG9zaXRvcnkoKTogQmVmUmVwb3NpdG9yeTxFbnRpdHk+IHtcbiAgICByZXR1cm4gdGhpcy5mcmFtZUNvbnRleHQucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PEVudGl0eT47XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LFxuICAgIHByaXZhdGUgc2lkZWJhclVJU2VydmljZTogRmFycmlzU2lkZWJhclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBtZXNzYWdlU2VydmljZTogRm9ybU1lc3NhZ2VTZXJ2aWNlLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBMYW5ndWFnZVNlcnZpY2UsXG4gICkge1xuICAgIGlmICghdGhpcy5sYW5ndWFnZVNlcnZpY2UpIHtcbiAgICAgIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlID0gTGFuZ3VhZ2VTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4gICAgfVxuICB9XG5cbiAgb3BlblNpZGViYXIoKSB7XG4gICAgdGhpcy5zaWRlYmFyVUlTZXJ2aWNlLnNlbmRJc09wZW4odHJ1ZSk7XG4gIH1cblxuICBjbG9zZVNpZGViYXIoKSB7XG4gICAgdGhpcy5zaWRlYmFyVUlTZXJ2aWNlLnNlbmRJc09wZW4oZmFsc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFs+mXreWJjeWFiOWPlua2iOWPmOabtFxuICAgKi9cbiAgY29uZmlybUJlZm9yZUNsb3NpbmdTaWRlYmFyKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgLy8g5qOA5p+l5piv5ZCm5pyJ5Y+Y5pu077yM5rKh5pyJ5Y+Y5pu055u05o6l5YWz6ZetXG4gICAgY29uc3QgaWZDaGFuZ2VzRXhpc3QgPSB0aGlzLnJlcG9zaXRvcnkuZW50aXR5TWFuYWdlci5jaGVja0FsbEVudGl0eUNoYW5nZXMoKTtcbiAgICBpZiAoIWlmQ2hhbmdlc0V4aXN0KSB7XG4gICAgICByZXR1cm4gb2YodHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8g56Gu6K6k5piv5ZCm5YWz6ZetXG4gICAgY29uc3QgY29uZmlybSQgPSB0aGlzLm1lc3NhZ2VTZXJ2aWNlLnF1ZXN0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlWydleGl0V2l0aG91dFNhdmUnXSk7XG4gICAgY29uc3QgcmVzdWx0JCA9IGNvbmZpcm0kLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKGNvbmZpcm1SZXN1bHQ6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgaWYgKGNvbmZpcm1SZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIG9mKGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHJldHVybiByZXN1bHQkO1xuICB9XG5cbiAgLyoqXG4gICAqIOe7p+e7reWFs+mXreS+p+i+ueagj1xuICAgKi9cbiAgcHVibGljIGNvbnRpbnVlQ2xvc2luZ1NpZGViYXIoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIG9mKHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIOmYu+atouS+p+i+ueagj+WFs+mXrVxuICAgKi9cbiAgcHVibGljIHN0b3BDbG9zaW5nU2lkZWJhcigpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gb2YoZmFsc2UpO1xuICB9XG59XG5cbmV4cG9ydCB7IFNpZGViYXJTZXJ2aWNlIH07XG4iXX0=