/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @record
 */
function ViewItems() { }
if (false) {
    /** @type {?} */
    ViewItems.prototype.items;
}
/**
 * @record
 */
function viewContainer() { }
var ViewChangeService = /** @class */ (function () {
    function ViewChangeService() {
        /**
         * 默认视图切换分组名称
         */
        this.defaultId = 'default';
        //当前显示视图
        this.currentViewType = {};
        /**
         * contents
         */
        this.viewContainers = {};
        this.changeCurrentViewId = new BehaviorSubject(null);
    }
    /**
     * @param {?} itemId
     * @param {?=} viewContainerId
     * @return {?}
     */
    ViewChangeService.prototype.addViewItem = /**
     * @param {?} itemId
     * @param {?=} viewContainerId
     * @return {?}
     */
    function (itemId, viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        if (this.viewContainers[viewContainerId]) {
            if (this.hasElement(itemId, viewContainerId)) {
                return;
            }
            else {
                this.viewContainers[viewContainerId].items.push(itemId);
            }
        }
        else {
            this.viewContainers[viewContainerId] = (/** @type {?} */ ({
                items: []
            }));
            this.viewContainers[viewContainerId].items.push(itemId);
        }
    };
    /**
     * @param {?} itemId
     * @param {?=} viewContainerId
     * @return {?}
     */
    ViewChangeService.prototype.removeViewItem = /**
     * @param {?} itemId
     * @param {?=} viewContainerId
     * @return {?}
     */
    function (itemId, viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        delete this.viewContainers[viewContainerId];
        if (this.viewContainers && this.viewContainers[viewContainerId]) {
            /** @type {?} */
            var items = this.viewContainers[viewContainerId].items.filter((/**
             * @param {?} el
             * @return {?}
             */
            function (el) {
                return el !== itemId;
            }));
            if (!items.length) {
                delete this.viewContainers[viewContainerId];
                return;
            }
            this.viewContainers[viewContainerId].items = items;
        }
    };
    /**存储currentpageid */
    /**
     * 存储currentpageid
     * @param {?} type
     * @param {?=} viewContainerId
     * @return {?}
     */
    ViewChangeService.prototype.updateCurrentViewId = /**
     * 存储currentpageid
     * @param {?} type
     * @param {?=} viewContainerId
     * @return {?}
     */
    function (type, viewContainerId) {
        if (viewContainerId === void 0) { viewContainerId = this.defaultId; }
        this.currentViewType[viewContainerId] = type;
        /** @type {?} */
        var changeView = {};
        changeView[viewContainerId] = type;
        this.changeCurrentViewId.next(changeView);
    };
    /**
     * @return {?}
     */
    ViewChangeService.prototype.getChangeCurrentViewId = /**
     * @return {?}
     */
    function () {
        return this.changeCurrentViewId;
    };
    /**
     * @private
     * @param {?} itemId
     * @param {?} groupId
     * @return {?}
     */
    ViewChangeService.prototype.hasElement = /**
     * @private
     * @param {?} itemId
     * @param {?} groupId
     * @return {?}
     */
    function (itemId, groupId) {
        return this.viewContainers[groupId].items.some((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item === itemId; }));
    };
    ViewChangeService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ViewChangeService.ctorParameters = function () { return []; };
    /** @nocollapse */ ViewChangeService.ngInjectableDef = i0.defineInjectable({ factory: function ViewChangeService_Factory() { return new ViewChangeService(); }, token: ViewChangeService, providedIn: "root" });
    return ViewChangeService;
}());
export { ViewChangeService };
if (false) {
    /**
     * 默认视图切换分组名称
     * @type {?}
     * @private
     */
    ViewChangeService.prototype.defaultId;
    /** @type {?} */
    ViewChangeService.prototype.currentViewType;
    /**
     * contents
     * @type {?}
     */
    ViewChangeService.prototype.viewContainers;
    /** @type {?} */
    ViewChangeService.prototype.changeCurrentViewId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy1jaGFuZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktdmlldy1jaGFuZ2UvIiwic291cmNlcyI6WyJsaWIvdmlldy1jaGFuZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQVcsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7OztBQUVoRCx3QkFFQzs7O0lBREMsMEJBQXFCOzs7OztBQUV2Qiw0QkFFQztBQUVEO0lBY0U7Ozs7UUFUaUIsY0FBUyxHQUFVLFNBQVMsQ0FBQzs7UUFFOUMsb0JBQWUsR0FBTyxFQUFFLENBQUM7Ozs7UUFHekIsbUJBQWMsR0FBaUIsRUFBRSxDQUFDO1FBRWxDLHdCQUFtQixHQUF5QixJQUFJLGVBQWUsQ0FBTSxJQUFJLENBQUMsQ0FBQztJQUUzRCxDQUFDOzs7Ozs7SUFFakIsdUNBQVc7Ozs7O0lBQVgsVUFBWSxNQUFhLEVBQUUsZUFBZ0M7UUFBaEMsZ0NBQUEsRUFBQSxrQkFBa0IsSUFBSSxDQUFDLFNBQVM7UUFDekQsSUFBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxFQUFDO1lBQ3RDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLEVBQUU7Z0JBQzVDLE9BQU87YUFDUjtpQkFDRztnQkFDRixJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDekQ7U0FDRjthQUNHO1lBQ0YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsR0FBRyxtQkFBQTtnQkFDckMsS0FBSyxFQUFFLEVBQUU7YUFDVixFQUFhLENBQUM7WUFDZixJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekQ7SUFDSCxDQUFDOzs7Ozs7SUFFRCwwQ0FBYzs7Ozs7SUFBZCxVQUFlLE1BQU0sRUFBRSxlQUFnQztRQUFoQyxnQ0FBQSxFQUFBLGtCQUFrQixJQUFJLENBQUMsU0FBUztRQUNyRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDNUMsSUFBRyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLEVBQUM7O2dCQUN2RCxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTTs7OztZQUFDLFVBQUEsRUFBRTtnQkFDaEUsT0FBTyxFQUFFLEtBQUssTUFBTSxDQUFDO1lBQ3ZCLENBQUMsRUFBQztZQUNGLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO2dCQUNqQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQzVDLE9BQU87YUFDUjtZQUNELElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUNwRDtJQUNILENBQUM7SUFFRCxxQkFBcUI7Ozs7Ozs7SUFDckIsK0NBQW1COzs7Ozs7SUFBbkIsVUFBb0IsSUFBVyxFQUFFLGVBQWdDO1FBQWhDLGdDQUFBLEVBQUEsa0JBQWtCLElBQUksQ0FBQyxTQUFTO1FBQy9ELElBQUksQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLEdBQUcsSUFBSSxDQUFFOztZQUMxQyxVQUFVLEdBQUMsRUFBRTtRQUNqQixVQUFVLENBQUMsZUFBZSxDQUFDLEdBQUMsSUFBSSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7OztJQUNELGtEQUFzQjs7O0lBQXRCO1FBQ0UsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUM7SUFDbEMsQ0FBQzs7Ozs7OztJQUNPLHNDQUFVOzs7Ozs7SUFBbEIsVUFBbUIsTUFBYyxFQUFFLE9BQWU7UUFDaEQsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQyxJQUFJLElBQWMsT0FBQSxJQUFJLEtBQUssTUFBTSxFQUFmLENBQWUsRUFBQyxDQUFDO0lBQ3JGLENBQUM7O2dCQTNERixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7Ozs0QkFaRDtDQXNFQyxBQTVERCxJQTREQztTQXpEWSxpQkFBaUI7Ozs7Ozs7SUFFNUIsc0NBQThDOztJQUU5Qyw0Q0FBeUI7Ozs7O0lBR3pCLDJDQUFrQzs7SUFFbEMsZ0RBQTJFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0LCBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbmludGVyZmFjZSBWaWV3SXRlbXMge1xyXG4gIGl0ZW1zOiBBcnJheTxzdHJpbmc+O1xyXG59XHJcbmludGVyZmFjZSB2aWV3Q29udGFpbmVyIHtcclxuICBbdmlld0dyb3VwSWRJZDogc3RyaW5nXTogVmlld0l0ZW1zO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBWaWV3Q2hhbmdlU2VydmljZSB7XHJcbiAgLyoq6buY6K6k6KeG5Zu+5YiH5o2i5YiG57uE5ZCN56ewICovXHJcbiAgcHJpdmF0ZSByZWFkb25seSBkZWZhdWx0SWQ6c3RyaW5nID0gJ2RlZmF1bHQnO1xyXG4gIC8v5b2T5YmN5pi+56S66KeG5Zu+XHJcbiAgY3VycmVudFZpZXdUeXBlOmFueSA9IHt9O1xyXG5cclxuICAvKipjb250ZW50cyAqL1xyXG4gIHZpZXdDb250YWluZXJzOnZpZXdDb250YWluZXIgPSB7fTtcclxuXHJcbiAgY2hhbmdlQ3VycmVudFZpZXdJZDogQmVoYXZpb3JTdWJqZWN0PGFueT4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGFueT4obnVsbCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gIGFkZFZpZXdJdGVtKGl0ZW1JZDpzdHJpbmcsIHZpZXdDb250YWluZXJJZCA9IHRoaXMuZGVmYXVsdElkKXtcclxuICAgIGlmKHRoaXMudmlld0NvbnRhaW5lcnNbdmlld0NvbnRhaW5lcklkXSl7XHJcbiAgICAgIGlmICh0aGlzLmhhc0VsZW1lbnQoaXRlbUlkLCB2aWV3Q29udGFpbmVySWQpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2V7XHJcbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyc1t2aWV3Q29udGFpbmVySWRdLml0ZW1zLnB1c2goaXRlbUlkKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZXtcclxuICAgICAgdGhpcy52aWV3Q29udGFpbmVyc1t2aWV3Q29udGFpbmVySWRdID0ge1xyXG4gICAgICAgIGl0ZW1zOiBbXVxyXG4gICAgICB9IGFzIFZpZXdJdGVtcztcclxuICAgICAgdGhpcy52aWV3Q29udGFpbmVyc1t2aWV3Q29udGFpbmVySWRdLml0ZW1zLnB1c2goaXRlbUlkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbW92ZVZpZXdJdGVtKGl0ZW1JZCwgdmlld0NvbnRhaW5lcklkID0gdGhpcy5kZWZhdWx0SWQpe1xyXG4gICAgZGVsZXRlIHRoaXMudmlld0NvbnRhaW5lcnNbdmlld0NvbnRhaW5lcklkXTtcclxuICAgIGlmKHRoaXMudmlld0NvbnRhaW5lcnMgJiYgdGhpcy52aWV3Q29udGFpbmVyc1t2aWV3Q29udGFpbmVySWRdKXtcclxuICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLnZpZXdDb250YWluZXJzW3ZpZXdDb250YWluZXJJZF0uaXRlbXMuZmlsdGVyKGVsPT57XHJcbiAgICAgICAgcmV0dXJuIGVsICE9PSBpdGVtSWQ7XHJcbiAgICAgIH0pXHJcbiAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMudmlld0NvbnRhaW5lcnNbdmlld0NvbnRhaW5lcklkXTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy52aWV3Q29udGFpbmVyc1t2aWV3Q29udGFpbmVySWRdLml0ZW1zID0gaXRlbXM7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKirlrZjlgqhjdXJyZW50cGFnZWlkICovXHJcbiAgdXBkYXRlQ3VycmVudFZpZXdJZCh0eXBlOnN0cmluZywgdmlld0NvbnRhaW5lcklkID0gdGhpcy5kZWZhdWx0SWQpe1xyXG4gICAgdGhpcy5jdXJyZW50Vmlld1R5cGVbdmlld0NvbnRhaW5lcklkXSA9IHR5cGUgO1xyXG4gICAgbGV0IGNoYW5nZVZpZXc9e307XHJcbiAgICBjaGFuZ2VWaWV3W3ZpZXdDb250YWluZXJJZF09dHlwZTtcclxuICAgIHRoaXMuY2hhbmdlQ3VycmVudFZpZXdJZC5uZXh0KGNoYW5nZVZpZXcpO1xyXG4gIH1cclxuICBnZXRDaGFuZ2VDdXJyZW50Vmlld0lkKCl7XHJcbiAgICByZXR1cm4gdGhpcy5jaGFuZ2VDdXJyZW50Vmlld0lkO1xyXG4gIH1cclxuICBwcml2YXRlIGhhc0VsZW1lbnQoaXRlbUlkOiBzdHJpbmcsIGdyb3VwSWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMudmlld0NvbnRhaW5lcnNbZ3JvdXBJZF0uaXRlbXMuc29tZSgoaXRlbSk6IGJvb2xlYW4gPT4gaXRlbSA9PT0gaXRlbUlkKTtcclxuICB9XHJcbn1cclxuIl19