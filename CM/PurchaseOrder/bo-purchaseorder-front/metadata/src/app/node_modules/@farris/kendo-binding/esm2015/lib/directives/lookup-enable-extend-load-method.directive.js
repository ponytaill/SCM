import { Directive, Optional, Self, Input } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { LookupGridComponent } from '@farris/ui-lookup';
// tslint:disable-next-line: directive-selector
export class LookupEnableExtendLoadMethodDirective {
    constructor(frameContext, lookup) {
        this.frameContext = frameContext;
        this.lookup = lookup;
    }
    ngOnInit() {
        if (!this.frameContext || !this.lookup || this.enableExtendLoadMethod !== true) {
            return;
        }
        const befApiUrl = this.frameContext.repository.apiUri;
        const helpMetadataId = this.lookup.uri;
        const enableKey = `${helpMetadataId}@${befApiUrl}`;
        this.frameContext.setParam(enableKey, true);
    }
}
LookupEnableExtendLoadMethodDirective.decorators = [
    { type: Directive, args: [{
                selector: '[enableExtendLoadMethod]'
            },] }
];
/** @nocollapse */
LookupEnableExtendLoadMethodDirective.ctorParameters = () => [
    { type: FrameContext, decorators: [{ type: Optional }] },
    { type: LookupGridComponent, decorators: [{ type: Optional }, { type: Self }] }
];
LookupEnableExtendLoadMethodDirective.propDecorators = {
    enableExtendLoadMethod: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLWVuYWJsZS1leHRlbmQtbG9hZC1tZXRob2QuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvbG9va3VwLWVuYWJsZS1leHRlbmQtbG9hZC1tZXRob2QuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQVUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXhELCtDQUErQztBQUkvQyxNQUFNLE9BQU8scUNBQXFDO0lBSzlDLFlBQ3FCLFlBQTBCLEVBQ2pCLE1BQTJCO1FBRHBDLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQ2pCLFdBQU0sR0FBTixNQUFNLENBQXFCO0lBQ3JELENBQUM7SUFFTCxRQUFRO1FBQ0osSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxzQkFBc0IsS0FBSyxJQUFJLEVBQUU7WUFDNUUsT0FBTztTQUNWO1FBQ0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBQ3RELE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ3ZDLE1BQU0sU0FBUyxHQUFHLEdBQUcsY0FBYyxJQUFJLFNBQVMsRUFBRSxDQUFDO1FBQ25ELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNoRCxDQUFDOzs7WUFyQkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSwwQkFBMEI7YUFDdkM7Ozs7WUFOUSxZQUFZLHVCQWFkLFFBQVE7WUFaTixtQkFBbUIsdUJBYXJCLFFBQVEsWUFBSSxJQUFJOzs7cUNBTGxCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHsgRGlyZWN0aXZlLCBPbkluaXQsIE9wdGlvbmFsLCBTZWxmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IExvb2t1cEdyaWRDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWxvb2t1cCc7XHJcblxyXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGRpcmVjdGl2ZS1zZWxlY3RvclxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2VuYWJsZUV4dGVuZExvYWRNZXRob2RdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTG9va3VwRW5hYmxlRXh0ZW5kTG9hZE1ldGhvZERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHB1YmxpYyBlbmFibGVFeHRlbmRMb2FkTWV0aG9kOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgIEBPcHRpb25hbCgpcHJpdmF0ZSBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCxcclxuICAgICAgQE9wdGlvbmFsKCkgQFNlbGYoKSBwcml2YXRlIGxvb2t1cDogTG9va3VwR3JpZENvbXBvbmVudFxyXG4gICAgKSB7IH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZnJhbWVDb250ZXh0IHx8ICF0aGlzLmxvb2t1cCB8fCB0aGlzLmVuYWJsZUV4dGVuZExvYWRNZXRob2QgIT09IHRydWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBiZWZBcGlVcmwgPSB0aGlzLmZyYW1lQ29udGV4dC5yZXBvc2l0b3J5LmFwaVVyaTtcclxuICAgICAgICBjb25zdCBoZWxwTWV0YWRhdGFJZCA9IHRoaXMubG9va3VwLnVyaTtcclxuICAgICAgICBjb25zdCBlbmFibGVLZXkgPSBgJHtoZWxwTWV0YWRhdGFJZH1AJHtiZWZBcGlVcmx9YDtcclxuICAgICAgICB0aGlzLmZyYW1lQ29udGV4dC5zZXRQYXJhbShlbmFibGVLZXksIHRydWUpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==