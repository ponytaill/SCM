/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { debounceTime, map, filter } from 'rxjs/operators';
import { Component, EventEmitter, Output, ElementRef, ViewChild, NgZone, Injector, Input } from '@angular/core';
import { fromEvent } from 'rxjs';
export class FindInputComponent {
    /**
     * @param {?} el
     * @param {?} ngZone
     * @param {?} injector
     */
    constructor(el, ngZone, injector) {
        this.el = el;
        this.ngZone = ngZone;
        this.injector = injector;
        this.current = 0;
        this.count = 0;
        this.columns = [];
        this.close = new EventEmitter();
        this.valueChanged = new EventEmitter();
        this.enterHandler = new EventEmitter();
        this.findField = '';
        this.keyupEventSub = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.columns.length) {
            this.columns = this.columns.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => !c.formatter && c.field));
            this.findField = this.columns[0].field;
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.keyupEventSub = fromEvent(this.input.nativeElement, 'keyup').pipe(filter((/**
             * @param {?} e
             * @return {?}
             */
            (e) => (e.switch || e.keyCode) !== 13)), debounceTime(200), map((/**
             * @param {?} e
             * @return {?}
             */
            (e) => e.target.value))).subscribe((/**
             * @param {?} v
             * @return {?}
             */
            (v) => {
                this.valueChanged.emit({ value: v, field: this.findField });
            }));
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.input.nativeElement.focus();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.keyupEventSub) {
            this.keyupEventSub.unsubscribe();
        }
        this.keyupEventSub = null;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClose(event) {
        this.close.emit();
        return false;
    }
    /**
     * @param {?} $event
     * @param {?} step
     * @return {?}
     */
    onEnter($event, step) {
        this.enterHandler.emit(step);
        return false;
    }
}
FindInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'find-input',
                template: `
        <div class="f-find-input" style="">
            <div class="input-group">
                <div class="input-group-prepend">
                    <select class="form-control" [(ngModel)]="findField">
                        <option *ngFor="let col of columns" value="{{col.field}}">{{ col.title }}</option>
                    </select>
                </div>
                <input #input type="text" placeholder="至少2个字符" class="form-control"
                    (keydown.esc)="onClose($event)" (keydown.enter)="onEnter($event, 0)">
                <div class="input-group-append">
                    <span class="input-group-text">{{current}}/{{count}}</span>
                    <button class="btn btn-outline-secondary" type="button" title="上一个"
                        [disabled]="current === 0" (click)="onEnter($event, -1)">
                        <span class="f-icon f-icon-arrow-chevron-up"></span>
                    </button>
                    <button class="btn btn-outline-secondary" type="button" title="下一个"
                    [disabled]="current === count" (click)="onEnter($event, 1)">
                        <span class="f-icon f-icon-arrow-chevron-down"></span>
                    </button>
                    <button class="btn btn-outline-secondary" type="button" title="关闭" (click)="onClose($event)">
                        <span class="f-icon f-icon-close"></span>
                    </button>
                </div>
            </div>
        </div>
    `,
                styles: [`
        .f-find-input {
            width: 300px; height: 40px; background: #fefefe; position: absolute; right: 0; z-index: 10; padding: 5px;
            border: 1px solid #d5d5d5;
            box-shadow: 0px 1px 2px 0px #989898;
        }
        .f-find-input .input-group-text { border-right: 1px solid #ccc; font-size: 10px }
        .f-find-input .input-group-append { background: #fff; }
        .f-find-input .input-group-append button { padding:1px 6px;}
        `]
            }] }
];
/** @nocollapse */
FindInputComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
FindInputComponent.propDecorators = {
    current: [{ type: Input }],
    count: [{ type: Input }],
    columns: [{ type: Input }],
    close: [{ type: Output }],
    valueChanged: [{ type: Output }],
    enterHandler: [{ type: Output }],
    input: [{ type: ViewChild, args: ['input',] }]
};
if (false) {
    /** @type {?} */
    FindInputComponent.prototype.current;
    /** @type {?} */
    FindInputComponent.prototype.count;
    /** @type {?} */
    FindInputComponent.prototype.columns;
    /** @type {?} */
    FindInputComponent.prototype.close;
    /** @type {?} */
    FindInputComponent.prototype.valueChanged;
    /** @type {?} */
    FindInputComponent.prototype.enterHandler;
    /** @type {?} */
    FindInputComponent.prototype.input;
    /** @type {?} */
    FindInputComponent.prototype.findField;
    /**
     * @type {?}
     * @private
     */
    FindInputComponent.prototype.keyupEventSub;
    /**
     * @type {?}
     * @private
     */
    FindInputComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FindInputComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    FindInputComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXRyZWV0YWJsZS8iLCJzb3VyY2VzIjpbImxpYi9maW5kLWlucHV0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQWEsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEUsT0FBTyxFQUFFLFNBQVMsRUFBVSxZQUFZLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFDeEQsU0FBUyxFQUFhLE1BQU0sRUFBRSxRQUFRLEVBQWlCLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RixPQUFPLEVBQWdCLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQTRDL0MsTUFBTSxPQUFPLGtCQUFrQjs7Ozs7O0lBYTNCLFlBQW9CLEVBQWMsRUFBVSxNQUFjLEVBQVUsUUFBa0I7UUFBbEUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBWjdFLFlBQU8sR0FBRyxDQUFDLENBQUM7UUFDWixVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUVaLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzNCLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNsQyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFHNUMsY0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNQLGtCQUFhLEdBQWlCLElBQUksQ0FBQztJQUUrQyxDQUFDOzs7O0lBRTNGLFFBQVE7UUFDSixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNOzs7O1lBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBQyxDQUFDO1lBQ2pFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7U0FDMUM7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQjs7O1FBQUMsR0FBRyxFQUFFO1lBQy9CLElBQUksQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDbEUsTUFBTTs7OztZQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBQyxFQUNsRCxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQ2pCLEdBQUc7Ozs7WUFBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUMsQ0FDbEMsQ0FBQyxTQUFTOzs7O1lBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDZCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDO1lBQzlELENBQUMsRUFBQyxDQUFDO1FBQ1AsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBRUQsZUFBZTtRQUNYLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JDLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEM7UUFDRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztJQUM5QixDQUFDOzs7OztJQUVELE9BQU8sQ0FBQyxLQUFLO1FBQ1QsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNsQixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOzs7Ozs7SUFFRCxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUk7UUFDaEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQzs7O1lBN0ZKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQTBCVDt5QkFFRzs7Ozs7Ozs7O1NBU0M7YUFFUjs7OztZQTdDaUQsVUFBVTtZQUNsQyxNQUFNO1lBQUUsUUFBUTs7O3NCQThDckMsS0FBSztvQkFDTCxLQUFLO3NCQUNMLEtBQUs7b0JBRUwsTUFBTTsyQkFDTixNQUFNOzJCQUNOLE1BQU07b0JBRU4sU0FBUyxTQUFDLE9BQU87Ozs7SUFSbEIscUNBQXFCOztJQUNyQixtQ0FBbUI7O0lBQ25CLHFDQUFzQjs7SUFFdEIsbUNBQXFDOztJQUNyQywwQ0FBNEM7O0lBQzVDLDBDQUE0Qzs7SUFFNUMsbUNBQXNDOztJQUN0Qyx1Q0FBZTs7Ozs7SUFDZiwyQ0FBMkM7Ozs7O0lBRS9CLGdDQUFzQjs7Ozs7SUFBRSxvQ0FBc0I7Ozs7O0lBQUUsc0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBtYXAsIGF1ZGl0VGltZSwgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIEVsZW1lbnRSZWYsXHJcbiAgICBWaWV3Q2hpbGQsIE9uRGVzdHJveSwgTmdab25lLCBJbmplY3RvciwgQWZ0ZXJWaWV3SW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uLCBmcm9tRXZlbnQgfSBmcm9tICdyeGpzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdmaW5kLWlucHV0JyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImYtZmluZC1pbnB1dFwiIHN0eWxlPVwiXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLXByZXBlbmRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgWyhuZ01vZGVsKV09XCJmaW5kRmllbGRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiAqbmdGb3I9XCJsZXQgY29sIG9mIGNvbHVtbnNcIiB2YWx1ZT1cInt7Y29sLmZpZWxkfX1cIj57eyBjb2wudGl0bGUgfX08L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGlucHV0ICNpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwi6Iez5bCRMuS4quWtl+esplwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcclxuICAgICAgICAgICAgICAgICAgICAoa2V5ZG93bi5lc2MpPVwib25DbG9zZSgkZXZlbnQpXCIgKGtleWRvd24uZW50ZXIpPVwib25FbnRlcigkZXZlbnQsIDApXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtYXBwZW5kXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+e3tjdXJyZW50fX0ve3tjb3VudH19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCIgdHlwZT1cImJ1dHRvblwiIHRpdGxlPVwi5LiK5LiA5LiqXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2Rpc2FibGVkXT1cImN1cnJlbnQgPT09IDBcIiAoY2xpY2spPVwib25FbnRlcigkZXZlbnQsIC0xKVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImYtaWNvbiBmLWljb24tYXJyb3ctY2hldnJvbi11cFwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeVwiIHR5cGU9XCJidXR0b25cIiB0aXRsZT1cIuS4i+S4gOS4qlwiXHJcbiAgICAgICAgICAgICAgICAgICAgW2Rpc2FibGVkXT1cImN1cnJlbnQgPT09IGNvdW50XCIgKGNsaWNrKT1cIm9uRW50ZXIoJGV2ZW50LCAxKVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImYtaWNvbiBmLWljb24tYXJyb3ctY2hldnJvbi1kb3duXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCIgdHlwZT1cImJ1dHRvblwiIHRpdGxlPVwi5YWz6ZetXCIgKGNsaWNrKT1cIm9uQ2xvc2UoJGV2ZW50KVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImYtaWNvbiBmLWljb24tY2xvc2VcIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICBgLFxyXG4gICAgc3R5bGVzOiBbXHJcbiAgICAgICAgYFxyXG4gICAgICAgIC5mLWZpbmQtaW5wdXQge1xyXG4gICAgICAgICAgICB3aWR0aDogMzAwcHg7IGhlaWdodDogNDBweDsgYmFja2dyb3VuZDogI2ZlZmVmZTsgcG9zaXRpb246IGFic29sdXRlOyByaWdodDogMDsgei1pbmRleDogMTA7IHBhZGRpbmc6IDVweDtcclxuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2Q1ZDVkNTtcclxuICAgICAgICAgICAgYm94LXNoYWRvdzogMHB4IDFweCAycHggMHB4ICM5ODk4OTg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5mLWZpbmQtaW5wdXQgLmlucHV0LWdyb3VwLXRleHQgeyBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjY2NjOyBmb250LXNpemU6IDEwcHggfVxyXG4gICAgICAgIC5mLWZpbmQtaW5wdXQgLmlucHV0LWdyb3VwLWFwcGVuZCB7IGJhY2tncm91bmQ6ICNmZmY7IH1cclxuICAgICAgICAuZi1maW5kLWlucHV0IC5pbnB1dC1ncm91cC1hcHBlbmQgYnV0dG9uIHsgcGFkZGluZzoxcHggNnB4O31cclxuICAgICAgICBgXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGaW5kSW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICBASW5wdXQoKSBjdXJyZW50ID0gMDtcclxuICAgIEBJbnB1dCgpIGNvdW50ID0gMDtcclxuICAgIEBJbnB1dCgpIGNvbHVtbnMgPSBbXTtcclxuXHJcbiAgICBAT3V0cHV0KCkgY2xvc2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgdmFsdWVDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIGVudGVySGFuZGxlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBAVmlld0NoaWxkKCdpbnB1dCcpIGlucHV0OiBFbGVtZW50UmVmO1xyXG4gICAgZmluZEZpZWxkID0gJyc7XHJcbiAgICBwcml2YXRlIGtleXVwRXZlbnRTdWI6IFN1YnNjcmlwdGlvbiA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSwgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHsgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbHVtbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1ucyA9IHRoaXMuY29sdW1ucy5maWx0ZXIoYyA9PiAhYy5mb3JtYXR0ZXIgJiYgYy5maWVsZCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmluZEZpZWxkID0gdGhpcy5jb2x1bW5zWzBdLmZpZWxkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmtleXVwRXZlbnRTdWIgPSBmcm9tRXZlbnQodGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50LCAna2V5dXAnKS5waXBlKFxyXG4gICAgICAgICAgICAgICAgZmlsdGVyKChlOiBhbnkpID0+IChlLnN3aXRjaCB8fCBlLmtleUNvZGUpICE9PSAxMyksXHJcbiAgICAgICAgICAgICAgICBkZWJvdW5jZVRpbWUoMjAwKSxcclxuICAgICAgICAgICAgICAgIG1hcCgoZTogYW55KSA9PiBlLnRhcmdldC52YWx1ZSlcclxuICAgICAgICAgICAgKS5zdWJzY3JpYmUoKHYpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVDaGFuZ2VkLmVtaXQoe3ZhbHVlOiB2LCBmaWVsZDogdGhpcy5maW5kRmllbGR9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmtleXVwRXZlbnRTdWIpIHtcclxuICAgICAgICAgICAgdGhpcy5rZXl1cEV2ZW50U3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMua2V5dXBFdmVudFN1YiA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgb25DbG9zZShldmVudCkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UuZW1pdCgpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBvbkVudGVyKCRldmVudCwgc3RlcCkge1xyXG4gICAgICAgIHRoaXMuZW50ZXJIYW5kbGVyLmVtaXQoc3RlcCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=