import { MetadataUtil } from '../../core/index';
import { PRIMITIVE_PROP_META, OBJECT_PROP_META, DYNAMIC_PROP_META, LIST_PROP_META } from './field_decorator';
/**
 * 属性注解器通用方法
 */
export class FieldMetadataUtil {
    /**
     * 获取实体所有的简单属性元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgObjectProperty}
     */
    static getNgFields(target) {
        return MetadataUtil.getPropsMetadatasByName(target, PRIMITIVE_PROP_META);
    }
    /**
     * 获取某个简单属性的元数据
     */
    static getNgField(target, propName) {
        const ngFields = this.getNgFields(target);
        const ngField = ngFields[propName];
        return ngField;
    }
    /**
     * 获取实体属性在原始数据中的属性名
     */
    static getDataField(target, propName) {
        const ngField = this.getNgField(target, propName);
        return ngField.dataField || propName;
    }
    /**
     * 获取标注为NgObject的属性的元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgObjectProperty}
     */
    static getNgObjects(target) {
        return MetadataUtil.getPropsMetadatasByName(target, OBJECT_PROP_META);
    }
    static getNgDynamic(target) {
        return MetadataUtil.getPropsMetadatasByName(target, DYNAMIC_PROP_META);
    }
    /**
     * 获取标注为NgList的属性的元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgListProperty}
     */
    static getNgList(target) {
        return MetadataUtil.getPropsMetadatasByName(target, LIST_PROP_META);
    }
    /**
     * 获取实体标注为主键的属性元数据
     * @param target 实体类型
     */
    static getPrimaryFieldMetadata(target) {
        const ngFieldObj = FieldMetadataUtil.getNgFields(target);
        const primaryKey = Object.keys(ngFieldObj).find((prop) => {
            return ngFieldObj[prop].primary;
        });
        if (primaryKey) {
            const propMeta = ngFieldObj[primaryKey];
            propMeta.property = primaryKey;
            if (!propMeta.dataField) {
                propMeta.dataField = primaryKey;
            }
            return propMeta;
        }
        return undefined;
    }
    /**
     * 获取主键名称，没有主键时返回空字符串
     */
    static getPrimaryKey(entityType) {
        const primaryNgField = this.getPrimaryFieldMetadata(entityType);
        if (!primaryNgField) {
            return '';
        }
        return primaryNgField.property;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGRfbWV0YWRhdGFfdXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvbWV0YWRhdGEvZmllbGRfbWV0YWRhdGFfdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUNMLG1CQUFtQixFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFFekUsTUFBTSxtQkFBbUIsQ0FBQztBQUUzQjs7R0FFRztBQUNILE1BQU0sT0FBTyxpQkFBaUI7SUFDNUI7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBVztRQUM1QixPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQVcsRUFBRSxRQUFnQjtRQUM3QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQTBCLENBQUM7UUFDNUQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFXLEVBQUUsUUFBZ0I7UUFDL0MsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbEQsT0FBTyxPQUFPLENBQUMsU0FBUyxJQUFJLFFBQVEsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBVztRQUM3QixPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFXO1FBQzdCLE9BQU8sWUFBWSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFXO1FBQzFCLE9BQU8sWUFBWSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLHVCQUF1QixDQUFDLE1BQVc7UUFDeEMsTUFBTSxVQUFVLEdBQUcsaUJBQWlCLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUU7WUFDL0QsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxVQUFVLEVBQUU7WUFDZCxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDeEMsUUFBUSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7WUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUU7Z0JBQ3ZCLFFBQVEsQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDO2FBQ2pDO1lBRUQsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMsYUFBYSxDQUFDLFVBQWU7UUFDbEMsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDbkIsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUNELE9BQU8sY0FBYyxDQUFDLFFBQVEsQ0FBQztJQUNqQyxDQUFDO0NBRUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZXRhZGF0YVV0aWwgfSBmcm9tICcuLi8uLi9jb3JlL2luZGV4JztcclxuaW1wb3J0IHtcclxuICBQUklNSVRJVkVfUFJPUF9NRVRBLCBPQkpFQ1RfUFJPUF9NRVRBLCBEWU5BTUlDX1BST1BfTUVUQSwgTElTVF9QUk9QX01FVEEsXHJcbiAgUHJpbWl0aXZlUHJvcE1ldGFkYXRhLCBPYmplY3RQcm9wTWV0YWRhdGEsIER5bmFtaWNQcm9wTWV0YWRhdGEsIExpc3RQcm9wTWV0YWRhdGFcclxufSBmcm9tICcuL2ZpZWxkX2RlY29yYXRvcic7XHJcblxyXG4vKipcclxuICog5bGe5oCn5rOo6Kej5Zmo6YCa55So5pa55rOVXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRmllbGRNZXRhZGF0YVV0aWwge1xyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWunuS9k+aJgOacieeahOeugOWNleWxnuaAp+WFg+aVsOaNrlxyXG4gICAqIEBwYXJhbSB0YXJnZXQg5a6e5L2T57G75Z6LXHJcbiAgICogQHJldHVybnMg5b2i5aaC77yae1twcm9wTmFtZTogc3RyaW5nXTogTmdPYmplY3RQcm9wZXJ0eX1cclxuICAgKi9cclxuICBzdGF0aWMgZ2V0TmdGaWVsZHModGFyZ2V0OiBhbnkpOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogUHJpbWl0aXZlUHJvcE1ldGFkYXRhIH0ge1xyXG4gICAgcmV0dXJuIE1ldGFkYXRhVXRpbC5nZXRQcm9wc01ldGFkYXRhc0J5TmFtZSh0YXJnZXQsIFBSSU1JVElWRV9QUk9QX01FVEEpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5p+Q5Liq566A5Y2V5bGe5oCn55qE5YWD5pWw5o2uXHJcbiAgICovXHJcbiAgc3RhdGljIGdldE5nRmllbGQodGFyZ2V0OiBhbnksIHByb3BOYW1lOiBzdHJpbmcpOiBQcmltaXRpdmVQcm9wTWV0YWRhdGEge1xyXG4gICAgY29uc3QgbmdGaWVsZHMgPSB0aGlzLmdldE5nRmllbGRzKHRhcmdldCk7XHJcbiAgICBjb25zdCBuZ0ZpZWxkID0gbmdGaWVsZHNbcHJvcE5hbWVdIGFzIFByaW1pdGl2ZVByb3BNZXRhZGF0YTtcclxuICAgIHJldHVybiBuZ0ZpZWxkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5a6e5L2T5bGe5oCn5Zyo5Y6f5aeL5pWw5o2u5Lit55qE5bGe5oCn5ZCNXHJcbiAgICovXHJcbiAgc3RhdGljIGdldERhdGFGaWVsZCh0YXJnZXQ6IGFueSwgcHJvcE5hbWU6IHN0cmluZykge1xyXG4gICAgY29uc3QgbmdGaWVsZCA9IHRoaXMuZ2V0TmdGaWVsZCh0YXJnZXQsIHByb3BOYW1lKTtcclxuICAgIHJldHVybiBuZ0ZpZWxkLmRhdGFGaWVsZCB8fCBwcm9wTmFtZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluagh+azqOS4uk5nT2JqZWN055qE5bGe5oCn55qE5YWD5pWw5o2uXHJcbiAgICogQHBhcmFtIHRhcmdldCDlrp7kvZPnsbvlnotcclxuICAgKiBAcmV0dXJucyDlvaLlpoLvvJp7W3Byb3BOYW1lOiBzdHJpbmddOiBOZ09iamVjdFByb3BlcnR5fVxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXROZ09iamVjdHModGFyZ2V0OiBhbnkpOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogT2JqZWN0UHJvcE1ldGFkYXRhIH0ge1xyXG4gICAgcmV0dXJuIE1ldGFkYXRhVXRpbC5nZXRQcm9wc01ldGFkYXRhc0J5TmFtZSh0YXJnZXQsIE9CSkVDVF9QUk9QX01FVEEpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldE5nRHluYW1pYyh0YXJnZXQ6IGFueSk6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBPYmplY3RQcm9wTWV0YWRhdGEgfSB7XHJcbiAgICByZXR1cm4gTWV0YWRhdGFVdGlsLmdldFByb3BzTWV0YWRhdGFzQnlOYW1lKHRhcmdldCwgRFlOQU1JQ19QUk9QX01FVEEpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5qCH5rOo5Li6TmdMaXN055qE5bGe5oCn55qE5YWD5pWw5o2uXHJcbiAgICogQHBhcmFtIHRhcmdldCDlrp7kvZPnsbvlnotcclxuICAgKiBAcmV0dXJucyDlvaLlpoLvvJp7W3Byb3BOYW1lOiBzdHJpbmddOiBOZ0xpc3RQcm9wZXJ0eX1cclxuICAgKi9cclxuICBzdGF0aWMgZ2V0TmdMaXN0KHRhcmdldDogYW55KTogeyBbcHJvcE5hbWU6IHN0cmluZ106IExpc3RQcm9wTWV0YWRhdGEgfSB7XHJcbiAgICByZXR1cm4gTWV0YWRhdGFVdGlsLmdldFByb3BzTWV0YWRhdGFzQnlOYW1lKHRhcmdldCwgTElTVF9QUk9QX01FVEEpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5a6e5L2T5qCH5rOo5Li65Li76ZSu55qE5bGe5oCn5YWD5pWw5o2uXHJcbiAgICogQHBhcmFtIHRhcmdldCDlrp7kvZPnsbvlnotcclxuICAgKi9cclxuICBzdGF0aWMgZ2V0UHJpbWFyeUZpZWxkTWV0YWRhdGEodGFyZ2V0OiBhbnkpOiBQcmltaXRpdmVQcm9wTWV0YWRhdGEgfCB1bmRlZmluZWQge1xyXG4gICAgY29uc3QgbmdGaWVsZE9iaiA9IEZpZWxkTWV0YWRhdGFVdGlsLmdldE5nRmllbGRzKHRhcmdldCk7XHJcbiAgICBjb25zdCBwcmltYXJ5S2V5ID0gT2JqZWN0LmtleXMobmdGaWVsZE9iaikuZmluZCgocHJvcDogc3RyaW5nKSA9PiB7XHJcbiAgICAgIHJldHVybiBuZ0ZpZWxkT2JqW3Byb3BdLnByaW1hcnk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAocHJpbWFyeUtleSkge1xyXG4gICAgICBjb25zdCBwcm9wTWV0YSA9IG5nRmllbGRPYmpbcHJpbWFyeUtleV07XHJcbiAgICAgIHByb3BNZXRhLnByb3BlcnR5ID0gcHJpbWFyeUtleTtcclxuICAgICAgaWYgKCFwcm9wTWV0YS5kYXRhRmllbGQpIHtcclxuICAgICAgICBwcm9wTWV0YS5kYXRhRmllbGQgPSBwcmltYXJ5S2V5O1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcHJvcE1ldGE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5Li76ZSu5ZCN56ew77yM5rKh5pyJ5Li76ZSu5pe26L+U5Zue56m65a2X56ym5LiyXHJcbiAgICovXHJcbiAgc3RhdGljIGdldFByaW1hcnlLZXkoZW50aXR5VHlwZTogYW55KSB7XHJcbiAgICBjb25zdCBwcmltYXJ5TmdGaWVsZCA9IHRoaXMuZ2V0UHJpbWFyeUZpZWxkTWV0YWRhdGEoZW50aXR5VHlwZSk7XHJcbiAgICBpZiAoIXByaW1hcnlOZ0ZpZWxkKSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIHJldHVybiBwcmltYXJ5TmdGaWVsZC5wcm9wZXJ0eTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==