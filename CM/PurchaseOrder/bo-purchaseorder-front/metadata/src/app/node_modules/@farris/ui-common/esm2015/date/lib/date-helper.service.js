/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-09-02 17:55:57
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-23 16:57:28
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { format, isValid, parseISO } from 'date-fns';
import { Injectable } from '@angular/core';
import { MyDateConverter } from './myDateConverter';
import * as i0 from "@angular/core";
export class DateTimeHelperService {
    constructor() {
        this.$D = null;
        this.$D = new MyDateConverter();
    }
    /**
     * @param {?} value 要转换格式的日期
     * @param {?=} fmt 格式化字符串
     *
     * 更多的格式化请参考
     * [点我点我](https://date-fns.org/v1.30.1/docs/format)
     * @return {?}
     */
    formatTo(value, fmt = 'yyyy-MM-dd') {
        if (!value) {
            return '';
        }
        if (typeof value === 'string' && value.indexOf('0001') === 0) {
            return '';
        }
        if (value instanceof Date) {
            return format(value, fmt);
        }
        /** @type {?} */
        let _d = parseISO(value);
        if (_d == 'Invalid Date') {
            _d = this.createDate(value) || new Date(value);
        }
        // const d = parseISO(value);
        if (isValid(_d)) {
            /** @type {?} */
            const d = parseISO(format(_d, 'yyyy-MM-dd HH:mm:ss'));
            return format(d, fmt);
        }
        else {
            // console.error(`${value} 转换为Date时失败。`);
            if (fmt.indexOf('HH') === 0 || fmt.indexOf('hh') === 0) {
                // 仅有时间部分
                // 提取时间
                /** @type {?} */
                const _time = value.match(/\d*/g).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n !== '')).join(':');
                /** @type {?} */
                const fullDateTime = new Date('2022-11-25 ' + _time);
                return format(fullDateTime, fmt);
            }
            return '';
        }
    }
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    createDate(val) {
        return this.$D.create(val);
    }
}
DateTimeHelperService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DateTimeHelperService.ctorParameters = () => [];
/** @nocollapse */ DateTimeHelperService.ngInjectableDef = i0.defineInjectable({ factory: function DateTimeHelperService_Factory() { return new DateTimeHelperService(); }, token: DateTimeHelperService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    DateTimeHelperService.prototype.$D;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1oZWxwZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktY29tbW9uL2RhdGUvIiwic291cmNlcyI6WyJsaWIvZGF0ZS1oZWxwZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDckQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7O0FBS3BELE1BQU0sT0FBTyxxQkFBcUI7SUFJOUI7UUFGUSxPQUFFLEdBQUcsSUFBSSxDQUFDO1FBR2QsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDO0lBQ3BDLENBQUM7Ozs7Ozs7OztJQVFELFFBQVEsQ0FBQyxLQUFVLEVBQUUsTUFBYyxZQUFZO1FBQzNDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDUixPQUFPLEVBQUUsQ0FBQztTQUNiO1FBRUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDMUQsT0FBTyxFQUFFLENBQUM7U0FDYjtRQUVELElBQUksS0FBSyxZQUFZLElBQUksRUFBRTtZQUN2QixPQUFPLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDN0I7O1lBRUcsRUFBRSxHQUFRLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFFN0IsSUFBSSxFQUFFLElBQUksY0FBYyxFQUFFO1lBQ3RCLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2xEO1FBRUQsNkJBQTZCO1FBQzdCLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFOztrQkFDUCxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUscUJBQXFCLENBQUMsQ0FBQztZQUNyRCxPQUFPLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDekI7YUFBTTtZQUNILHlDQUF5QztZQUN6QyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFOzs7O3NCQUc5QyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNOzs7O2dCQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFJLEVBQUUsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7O3NCQUMxRCxZQUFZLEdBQUcsSUFBSSxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztnQkFDcEQsT0FBTyxNQUFNLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQ3BDO1lBQ0QsT0FBTyxFQUFFLENBQUM7U0FDYjtJQUNMLENBQUM7Ozs7OztJQUVPLFVBQVUsQ0FBQyxHQUFHO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7O1lBdkRKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7Ozs7Ozs7OztJQUdHLG1DQUFrQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEBBdXRob3I6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQERhdGU6IDIwMTktMDktMDIgMTc6NTU6NTdcclxuICogQExhc3RFZGl0b3JzOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMTAtMjMgMTY6NTc6MjhcclxuICogQFFROiAxMDU1ODE4MjM5XHJcbiAqIEBWZXJzaW9uOiB2MC4wLjFcclxuICovXHJcbmltcG9ydCB7IGZvcm1hdCwgaXNWYWxpZCwgcGFyc2VJU08gfSBmcm9tICdkYXRlLWZucyc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTXlEYXRlQ29udmVydGVyIH0gZnJvbSAnLi9teURhdGVDb252ZXJ0ZXInO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRlVGltZUhlbHBlclNlcnZpY2Uge1xyXG5cclxuICAgIHByaXZhdGUgJEQgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuJEQgPSBuZXcgTXlEYXRlQ29udmVydGVyKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB2YWx1ZSDopoHovazmjaLmoLzlvI/nmoTml6XmnJ9cclxuICAgICAqIEBwYXJhbSBmbXQg5qC85byP5YyW5a2X56ym5LiyXHJcbiAgICAgKlxyXG4gICAgICog5pu05aSa55qE5qC85byP5YyW6K+35Y+C6ICDXHJcbiAgICAgKiBb54K55oiR54K55oiRXShodHRwczovL2RhdGUtZm5zLm9yZy92MS4zMC4xL2RvY3MvZm9ybWF0KVxyXG4gICAgICovXHJcbiAgICBmb3JtYXRUbyh2YWx1ZTogYW55LCBmbXQ6IHN0cmluZyA9ICd5eXl5LU1NLWRkJykge1xyXG4gICAgICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuaW5kZXhPZignMDAwMScpID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdCh2YWx1ZSwgZm10KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBfZDogYW55ID0gcGFyc2VJU08odmFsdWUpO1xyXG5cclxuICAgICAgICBpZiAoX2QgPT0gJ0ludmFsaWQgRGF0ZScpIHtcclxuICAgICAgICAgICAgX2QgPSB0aGlzLmNyZWF0ZURhdGUodmFsdWUpIHx8IG5ldyBEYXRlKHZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNvbnN0IGQgPSBwYXJzZUlTTyh2YWx1ZSk7XHJcbiAgICAgICAgaWYgKGlzVmFsaWQoX2QpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGQgPSBwYXJzZUlTTyhmb3JtYXQoX2QsICd5eXl5LU1NLWRkIEhIOm1tOnNzJykpO1xyXG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0KGQsIGZtdCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5lcnJvcihgJHt2YWx1ZX0g6L2s5o2i5Li6RGF0ZeaXtuWksei0peOAgmApO1xyXG4gICAgICAgICAgICBpZiAoZm10LmluZGV4T2YoJ0hIJykgPT09IDAgfHwgZm10LmluZGV4T2YoJ2hoJykgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIOS7heacieaXtumXtOmDqOWIhlxyXG4gICAgICAgICAgICAgICAgLy8g5o+Q5Y+W5pe26Ze0XHJcbiAgICAgICAgICAgICAgICBjb25zdCBfdGltZSA9IHZhbHVlLm1hdGNoKC9cXGQqL2cpLmZpbHRlcihuID0+IG4hPT0gJycpLmpvaW4oJzonKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZ1bGxEYXRlVGltZSA9IG5ldyBEYXRlKCcyMDIyLTExLTI1ICcgKyBfdGltZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0KGZ1bGxEYXRlVGltZSwgZm10KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlRGF0ZSh2YWwpICAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJEQuY3JlYXRlKHZhbCk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==