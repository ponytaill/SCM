import { MetadataUtil } from '../core/index';
import { Repository } from '../repository/index';
import { CommandBus } from '../command/index';
import { BindingData } from '../binding-data/index';
import { UIState } from '../ui-state/index';
import { StateMachine } from '../state-machine/index';
import { Form } from '../form/index';
import { ViewModelContext } from './view_model_context';
import { COMMAND_METHOD_META } from './decorators';
import { EMPTY, from, of } from 'rxjs';
import { concatMap, every, tap } from 'rxjs/operators';
var ViewModel = /** @class */ (function () {
    /**
     * 构造函数
     */
    function ViewModel(injector, id) {
        this.injector = injector;
        this.id = id;
    }
    /**
     * 初始化
     */
    ViewModel.prototype.init = function () {
        this.initRepository();
        this.initContext();
        this.initBindingData();
        this.initUIState();
        this.intiStateMachine();
        this.initForm();
        this.initCommandBus();
        this.registerWithParent();
        this.initListeners();
        this.closeOldBeSession();
    };
    ViewModel.prototype.initRepository = function () {
        this.repository = this.injector.get(Repository);
    };
    ViewModel.prototype.initContext = function () {
        this.context = this.injector.get(ViewModelContext);
        this.context.init(this);
    };
    ViewModel.prototype.initBindingData = function () {
        var _this = this;
        this.bindingData = this.context.injector.get(BindingData);
        this.entityValueChangingListeners = new Map();
        this.entityValueChangedListeners = new Map();
        if (this.bindingData) {
            this.bindingData.setValueChangeInvokerFactory(function (paths) {
                return function (preValue, value, entityChanged, primaryValue) {
                    var plainPath = '/' + paths.join('/');
                    var command;
                    if (entityChanged === false) {
                        command = _this.entityValueChangingListeners[plainPath];
                    }
                    else {
                        command = _this.entityValueChangedListeners[plainPath];
                    }
                    if (!!command) {
                        var change_1 = {
                            paths: paths,
                            preValue: preValue,
                            value: value,
                            changed: entityChanged
                        };
                        var commands = command.split(';').filter(function (p) { return p; });
                        var valueChangeSuccess_1 = true;
                        return from(commands).pipe(concatMap(function (item) {
                            if (!valueChangeSuccess_1) {
                                return EMPTY;
                            }
                            return _this[item](change_1).pipe(tap(function (result) {
                                valueChangeSuccess_1 = result;
                            }));
                        }), every(function (result) { return result; }));
                    }
                    else {
                        return of(true);
                    }
                };
            });
        }
        var repositoryName = this.repository.name;
        var bindingDataManager = this.context.appContext.bindingDataManager;
        var repositoryBindingData = bindingDataManager.getBindingDataByName(repositoryName);
        this.bindingData.initByBindingList(repositoryBindingData.list, this.context);
    };
    ViewModel.prototype.initUIState = function () {
        this.uiState = this.injector.get(UIState);
    };
    ViewModel.prototype.intiStateMachine = function () {
        this.stateMachine = this.injector.get(StateMachine, null);
        if (!this.stateMachine) {
            return;
        }
        this.stateMachine.init(this.context);
    };
    ViewModel.prototype.initForm = function () {
        this.form = this.injector.get(Form, null);
        this.form.init();
    };
    ViewModel.prototype.initCommandBus = function () {
        this.commandBus = this.injector.get(CommandBus);
        this.extendCommandMethods();
    };
    ViewModel.prototype.extendCommandMethods = function () {
        var _this = this;
        this.ngCommands = MetadataUtil.getPropsMetadatasByName(this.constructor, COMMAND_METHOD_META);
        this.keybindingMap = new Map();
        Object.keys(this.ngCommands).forEach(function (propName) {
            var ngCommand = _this.ngCommands[propName];
            Object.defineProperty(_this, propName, {
                value: function (eventParams) {
                    var command = {
                        name: ngCommand.name,
                        params: ngCommand.params,
                        paramDescriptions: ngCommand.paramDescriptions,
                        eventParam: eventParams || null
                    };
                    return _this.commandBus.dispatch(command);
                }
            });
            if (ngCommand.keyBinding) {
                _this.keybindingMap.set(propName, ngCommand.keyBinding);
            }
        });
    };
    ViewModel.prototype.registerWithParent = function () {
        var parentContext = this.context.parent;
        if (!parentContext || !parentContext.viewModel || !parentContext.viewModel['childViewModels']) {
            return;
        }
        var parentViewModel = parentContext.viewModel;
        var className = this.constructor.name;
        var propName = parentViewModel['childViewModels'][className];
        parentViewModel[propName] = this;
    };
    /**
     * 关闭老的BeSession
     */
    ViewModel.prototype.closeOldBeSession = function () {
        var allViewModelContexts = this.context.appContext.viewModelContextManager.getContexts();
        if (allViewModelContexts.length === 1 && allViewModelContexts[0] === this.context) {
            this.context.repository.reset();
        }
    };
    /**
   * 从Form获取监听器
   */
    ViewModel.prototype.initListeners = function () {
        var _this = this;
        var extractPath = function (bindingBasePath, bindingPath) {
            return '/' + bindingBasePath.split('/').concat(bindingPath.split('.')).filter(function (item) { return item.length > 0; }).join('/');
        };
        if (this.form) {
            var valueChangingListeners_1 = this.form.getEntityValueChangingListeners();
            Object.keys(valueChangingListeners_1).forEach(function (bindingPath) {
                var plainPath = extractPath(_this.bindingPath, bindingPath);
                _this.entityValueChangingListeners[plainPath] = valueChangingListeners_1[bindingPath];
            });
            var valueChangedListeners_1 = this.form.getEntityValueChangedListeners();
            Object.keys(valueChangedListeners_1).forEach(function (bindingPath) {
                var plainPath = extractPath(_this.bindingPath, bindingPath);
                _this.entityValueChangedListeners[plainPath] = valueChangedListeners_1[bindingPath];
            });
        }
    };
    return ViewModel;
}());
export { ViewModel };
//# sourceMappingURL=data:application/json;base64,