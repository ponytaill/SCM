/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ElementRef, Renderer2 } from '@angular/core';
import { ViewChangeService } from './view-change.service';
//视图区域
var FarrisViewItemDirective = /** @class */ (function () {
    function FarrisViewItemDirective(elementRef, viewChangeService, render) {
        this.elementRef = elementRef;
        this.viewChangeService = viewChangeService;
        this.render = render;
        this.fViewGroupId = 'default';
    }
    /**
     * @return {?}
     */
    FarrisViewItemDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.viewChangeService.addViewItem(this.viewItemType, this.fViewGroupId);
        this.viewChangeService.getChangeCurrentViewId().subscribe((/**
         * @param {?} currentViewType
         * @return {?}
         */
        function (currentViewType) {
            if (!currentViewType)
                return;
            if (!currentViewType[_this.fViewGroupId]) {
                return;
            }
            else if (currentViewType[_this.fViewGroupId] == _this.viewItemType) {
                // this.render.setStyle(this.elementRef.nativeElement,'display','');
                _this.render.removeClass(_this.elementRef.nativeElement, 'f-viewchange-view-none');
            }
            else {
                // this.render.setStyle(this.elementRef.nativeElement,'display','none',0);
                _this.render.addClass(_this.elementRef.nativeElement, 'f-viewchange-view-none');
            }
        }));
    };
    /**
     * @return {?}
     */
    FarrisViewItemDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.viewChangeService.removeViewItem(this.viewItemType, this.fViewGroupId);
    };
    FarrisViewItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fViewItem]'
                },] }
    ];
    /** @nocollapse */
    FarrisViewItemDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ViewChangeService },
        { type: Renderer2 }
    ]; };
    FarrisViewItemDirective.propDecorators = {
        viewItemType: [{ type: Input, args: ['fViewItem',] }],
        fViewGroupId: [{ type: Input, args: ['fViewGroupId',] }]
    };
    return FarrisViewItemDirective;
}());
export { FarrisViewItemDirective };
if (false) {
    /** @type {?} */
    FarrisViewItemDirective.prototype.viewItemType;
    /** @type {?} */
    FarrisViewItemDirective.prototype.fViewGroupId;
    /**
     * @type {?}
     * @private
     */
    FarrisViewItemDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    FarrisViewItemDirective.prototype.viewChangeService;
    /**
     * @type {?}
     * @private
     */
    FarrisViewItemDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy1jaGFuZ2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS12aWV3LWNoYW5nZS8iLCJzb3VyY2VzIjpbImxpYi92aWV3LWNoYW5nZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQWMsS0FBSyxFQUF3QixVQUFVLEVBQXFELFNBQVMsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDbEwsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBRTFEO0lBUUksaUNBQ1UsVUFBc0IsRUFDdEIsaUJBQW9DLEVBQ3BDLE1BQWtCO1FBRmxCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyxXQUFNLEdBQU4sTUFBTSxDQUFZO1FBTEwsaUJBQVksR0FBVyxTQUFTLENBQUM7SUFReEQsQ0FBQzs7OztJQUVNLDBDQUFROzs7SUFBZjtRQUFBLGlCQWdCQztRQWZHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLHNCQUFzQixFQUFFLENBQUMsU0FBUzs7OztRQUFDLFVBQUMsZUFBb0I7WUFDM0UsSUFBRyxDQUFDLGVBQWU7Z0JBQUUsT0FBTztZQUM1QixJQUFHLENBQUMsZUFBZSxDQUFDLEtBQUksQ0FBQyxZQUFZLENBQUMsRUFBQztnQkFDbkMsT0FBTzthQUNWO2lCQUNJLElBQUcsZUFBZSxDQUFDLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxLQUFJLENBQUMsWUFBWSxFQUFDO2dCQUM1RCxvRUFBb0U7Z0JBQ3BFLEtBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLHdCQUF3QixDQUFDLENBQUM7YUFDcEY7aUJBQ0c7Z0JBQ0EsMEVBQTBFO2dCQUMxRSxLQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO2FBQ2pGO1FBQ0wsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBRU0sNkNBQVc7OztJQUFsQjtRQUNJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDaEYsQ0FBQzs7Z0JBcENKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsYUFBYTtpQkFDMUI7Ozs7Z0JBTDRELFVBQVU7Z0JBQzlELGlCQUFpQjtnQkFEa0csU0FBUzs7OytCQVFoSSxLQUFLLFNBQUMsV0FBVzsrQkFDakIsS0FBSyxTQUFDLGNBQWM7O0lBK0J2Qiw4QkFBQztDQUFBLEFBckNILElBcUNHO1NBbENVLHVCQUF1Qjs7O0lBRWhDLCtDQUF5Qzs7SUFDekMsK0NBQXdEOzs7OztJQUd0RCw2Q0FBOEI7Ozs7O0lBQzlCLG9EQUE0Qzs7Ozs7SUFDNUMseUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3R5bGUgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcclxuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbmplY3RhYmxlLCBJbnB1dCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIEVsZW1lbnRSZWYsIE9uSW5pdCwgT25EZXN0cm95LCBDaGFuZ2VEZXRlY3RvclJlZiwgSG9zdEJpbmRpbmcsIFJlbmRlcmVyMiwgUmVuZGVyZXJTdHlsZUZsYWdzMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBWaWV3Q2hhbmdlU2VydmljZSB9IGZyb20gJy4vdmlldy1jaGFuZ2Uuc2VydmljZSc7XHJcbi8v6KeG5Zu+5Yy65Z+fXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbZlZpZXdJdGVtXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZhcnJpc1ZpZXdJdGVtRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG5cclxuICAgIEBJbnB1dCgnZlZpZXdJdGVtJykgdmlld0l0ZW1UeXBlOiBzdHJpbmc7XHJcbiAgICBASW5wdXQoJ2ZWaWV3R3JvdXBJZCcpIGZWaWV3R3JvdXBJZDogc3RyaW5nID0gJ2RlZmF1bHQnO1xyXG4gIFxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcclxuICAgICAgcHJpdmF0ZSB2aWV3Q2hhbmdlU2VydmljZTogVmlld0NoYW5nZVNlcnZpY2UsXHJcbiAgICAgIHByaXZhdGUgcmVuZGVyIDogUmVuZGVyZXIyXHJcbiAgICApIHtcclxuICAgICAgICBcclxuICAgIH1cclxuICBcclxuICAgIHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZpZXdDaGFuZ2VTZXJ2aWNlLmFkZFZpZXdJdGVtKHRoaXMudmlld0l0ZW1UeXBlLCB0aGlzLmZWaWV3R3JvdXBJZCk7XHJcbiAgICAgICAgdGhpcy52aWV3Q2hhbmdlU2VydmljZS5nZXRDaGFuZ2VDdXJyZW50Vmlld0lkKCkuc3Vic2NyaWJlKChjdXJyZW50Vmlld1R5cGU6IGFueSk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICBpZighY3VycmVudFZpZXdUeXBlKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmKCFjdXJyZW50Vmlld1R5cGVbdGhpcy5mVmlld0dyb3VwSWRdKXtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKGN1cnJlbnRWaWV3VHlwZVt0aGlzLmZWaWV3R3JvdXBJZF0gPT0gdGhpcy52aWV3SXRlbVR5cGUpe1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5yZW5kZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsJ2Rpc3BsYXknLCcnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZi12aWV3Y2hhbmdlLXZpZXctbm9uZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwnZGlzcGxheScsJ25vbmUnLDApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdmLXZpZXdjaGFuZ2Utdmlldy1ub25lJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICBcclxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZpZXdDaGFuZ2VTZXJ2aWNlLnJlbW92ZVZpZXdJdGVtKHRoaXMudmlld0l0ZW1UeXBlLCB0aGlzLmZWaWV3R3JvdXBJZCk7XHJcbiAgICB9XHJcbiAgfSJdfQ==