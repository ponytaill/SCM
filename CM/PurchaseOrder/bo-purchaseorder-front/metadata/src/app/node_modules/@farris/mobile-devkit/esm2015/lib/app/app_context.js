import { Context } from '../context/index';
import { BindingDataFactory } from '../binding-data';
class AppContext extends Context {
    /**
     * 构造函数
     */
    constructor(injector, eventBus, repositoryManager, bindingDataManager, viewModelContextManager) {
        super();
        this.injector = injector;
        this.eventBus = eventBus;
        this.repositoryManager = repositoryManager;
        this.bindingDataManager = bindingDataManager;
        this.viewModelContextManager = viewModelContextManager;
    }
    /**
     * 注册FrameContext
     */
    regViewModelContext(viewModelContext) {
        const repository = viewModelContext.repository;
        const repositoryName = repository.name;
        // Repository
        if (this.repositoryManager.ifRepositoryExits(repositoryName) === false) {
            this.repositoryManager.regRepository(repositoryName, repository);
        }
        // BindingData
        if (this.bindingDataManager.ifBindingDataExits(repositoryName) === false) {
            const bindingData = BindingDataFactory.createFromRepository(repository, '/');
            this.bindingDataManager.regBindingData(repositoryName, bindingData);
        }
        // 考虑路由再次进入的时候，AppContext没有被注销，但Component被再次构造的场景
        this.viewModelContextManager.regContext(viewModelContext);
    }
}
export { AppContext };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwX2NvbnRleHQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvYXBwL2FwcF9jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQU9yRCxNQUFNLFVBQVcsU0FBUSxPQUFPO0lBRTlCOztPQUVHO0lBQ0gsWUFDUyxRQUFrQixFQUNsQixRQUFxQixFQUNyQixpQkFBb0MsRUFDcEMsa0JBQXNDLEVBQ3RDLHVCQUFnRDtRQUV2RCxLQUFLLEVBQUUsQ0FBQztRQU5ELGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsYUFBUSxHQUFSLFFBQVEsQ0FBYTtRQUNyQixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDdEMsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtJQUd6RCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxtQkFBbUIsQ0FBQyxnQkFBa0M7UUFFM0QsTUFBTSxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsVUFBVSxDQUFDO1FBQy9DLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFFdkMsYUFBYTtRQUNiLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxLQUFLLEtBQUssRUFBRTtZQUN0RSxJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNsRTtRQUVELGNBQWM7UUFDZCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsS0FBSyxLQUFLLEVBQUU7WUFDeEUsTUFBTSxXQUFXLEdBQUcsa0JBQWtCLENBQUMsb0JBQW9CLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzdFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsY0FBYyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ3JFO1FBRUQsaURBQWlEO1FBQ2pELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUM1RCxDQUFDO0NBRUY7QUFFRCxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog5bqU55So5LiK5LiL5paHXHJcbiAqIEBhdXRob3IgV2l0dDxqaXd0QGluc3B1ci5jb20+XHJcbiAqIEB0b2RvXHJcbiAqIDHjgIFwYXJuZXTlkoxBcHBDb250ZXh0TWFuYWdlcuaYr+WQpuW/heimge+8n+aMieeQhuivtOWwseaYr+W6lOivpemalOemu+S4iuS4i+aWh++8jOihqOWNleS5i+mXtOmAmui/h+S6i+S7tumAmuiur+i/m+ihjOS6pOS6ku+8m1xyXG4gKi9cclxuaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tICcuLi9jb3JlL2luZGV4JztcclxuaW1wb3J0IHsgVmlld01vZGVsQ29udGV4dCB9IGZyb20gJy4uL3ZpZXctbW9kZWwvaW5kZXgnO1xyXG5pbXBvcnQgeyBDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9pbmRleCc7XHJcbmltcG9ydCB7IEJpbmRpbmdEYXRhRmFjdG9yeSB9IGZyb20gJy4uL2JpbmRpbmctZGF0YSc7XHJcbmltcG9ydCB7IFZpZXdNb2RlbENvbnRleHRNYW5hZ2VyIH0gZnJvbSAnLi92aWV3X21vZGVsX2NvbnRleF9tYW5hZ2VyJztcclxuaW1wb3J0IHsgUmVwb3NpdG9yeU1hbmFnZXIgfSBmcm9tICcuL3JlcG9zaXRvcnlfbWFuYW5nZXInO1xyXG5pbXBvcnQgeyBCaW5kaW5nRGF0YU1hbmFnZXIgfSBmcm9tICcuL2JpbmRpbmdfZGF0YV9tYW5hZ2VyJztcclxuaW1wb3J0IHsgQXBwRXZlbnRCdXMgfSBmcm9tICcuL2FwcF9ldmVudEJ1cyc7XHJcblxyXG5cclxuY2xhc3MgQXBwQ29udGV4dCBleHRlbmRzIENvbnRleHQge1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICBwdWJsaWMgZXZlbnRCdXM6IEFwcEV2ZW50QnVzLFxyXG4gICAgcHVibGljIHJlcG9zaXRvcnlNYW5hZ2VyOiBSZXBvc2l0b3J5TWFuYWdlcixcclxuICAgIHB1YmxpYyBiaW5kaW5nRGF0YU1hbmFnZXI6IEJpbmRpbmdEYXRhTWFuYWdlcixcclxuICAgIHB1YmxpYyB2aWV3TW9kZWxDb250ZXh0TWFuYWdlcjogVmlld01vZGVsQ29udGV4dE1hbmFnZXIsXHJcbiAgKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5rOo5YaMRnJhbWVDb250ZXh0XHJcbiAgICovXHJcbiAgcHVibGljIHJlZ1ZpZXdNb2RlbENvbnRleHQodmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dCk6IHZvaWQge1xyXG5cclxuICAgIGNvbnN0IHJlcG9zaXRvcnkgPSB2aWV3TW9kZWxDb250ZXh0LnJlcG9zaXRvcnk7XHJcbiAgICBjb25zdCByZXBvc2l0b3J5TmFtZSA9IHJlcG9zaXRvcnkubmFtZTtcclxuXHJcbiAgICAvLyBSZXBvc2l0b3J5XHJcbiAgICBpZiAodGhpcy5yZXBvc2l0b3J5TWFuYWdlci5pZlJlcG9zaXRvcnlFeGl0cyhyZXBvc2l0b3J5TmFtZSkgPT09IGZhbHNlKSB7XHJcbiAgICAgIHRoaXMucmVwb3NpdG9yeU1hbmFnZXIucmVnUmVwb3NpdG9yeShyZXBvc2l0b3J5TmFtZSwgcmVwb3NpdG9yeSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQmluZGluZ0RhdGFcclxuICAgIGlmICh0aGlzLmJpbmRpbmdEYXRhTWFuYWdlci5pZkJpbmRpbmdEYXRhRXhpdHMocmVwb3NpdG9yeU5hbWUpID09PSBmYWxzZSkge1xyXG4gICAgICBjb25zdCBiaW5kaW5nRGF0YSA9IEJpbmRpbmdEYXRhRmFjdG9yeS5jcmVhdGVGcm9tUmVwb3NpdG9yeShyZXBvc2l0b3J5LCAnLycpO1xyXG4gICAgICB0aGlzLmJpbmRpbmdEYXRhTWFuYWdlci5yZWdCaW5kaW5nRGF0YShyZXBvc2l0b3J5TmFtZSwgYmluZGluZ0RhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOiAg+iZkei3r+eUseWGjeasoei/m+WFpeeahOaXtuWAme+8jEFwcENvbnRleHTmsqHmnInooqvms6jplIDvvIzkvYZDb21wb25lbnTooqvlho3mrKHmnoTpgKDnmoTlnLrmma9cclxuICAgIHRoaXMudmlld01vZGVsQ29udGV4dE1hbmFnZXIucmVnQ29udGV4dCh2aWV3TW9kZWxDb250ZXh0KTtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBBcHBDb250ZXh0IH07XHJcbiJdfQ==