import { Subject } from 'rxjs';
import { ArrayUtil } from '../utils/index';
import { ChangeType } from './changes';
import { BindingObjectFactory } from './binding_object_factory';
import { PropertyUtil } from './property_util';
/**
 * BindingList是一个BindingObject集合
 */
class BindingList {
    /**
     * 构造函数
     */
    constructor(properties) {
        //#region 分页相关
        /**
         * 分页信息
         */
        this._paginationInfo = null;
        this.properties = properties;
        this.primaryKey = PropertyUtil.getPrimaryKey(properties);
        this.changes = new Subject();
        this.innerList = [];
        this.currentId = null;
    }
    set paginationInfo(sPaginationInfo) {
        this._paginationInfo = sPaginationInfo;
        if (this._paginationInfo === sPaginationInfo) {
            return;
        }
        this.changes.next({
            type: ChangeType.PaginationInfoChange,
            path: [],
            value: this._paginationInfo
        });
    }
    get paginationInfo() {
        return this._paginationInfo;
    }
    /**
     * 获取页码
     */
    get pageIndex() {
        if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty("pageIndex")) {
            return this.paginationInfo.pageIndex;
        }
        return 1;
    }
    /**
     * 获取分页大小
     */
    get pageSize() {
        if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty("pageSize")) {
            return this.paginationInfo.pageSize;
        }
        return 0;
    }
    /**
     * 获取数据总项数
     */
    get total() {
        if (!!this.paginationInfo) {
            return this.paginationInfo.total || this.paginationInfo.totalCount;
        }
        return 0;
    }
    /**
     * 获取跳过的数据条数
     */
    get skip() {
        const pageIndex = this.pageIndex;
        const pageSize = this.pageSize;
        return (pageIndex - 1) * pageSize;
    }
    /**
     * 前台设置分页信息
     * @param skip skip
     * @param take take
     */
    setPaginationInfo(skip, take) {
        this.paginationInfo = Object.assign({}, this.paginationInfo, {
            pageSize: take,
            pageIndex: skip / take + 1
        });
        /*this.changes.next({
          type: ChangeType.PaginationInfoChange,
          path: [],
          value: this.paginationInfo
        });*/
    }
    //#endregion
    /**
     * 当前行对应的绑定对象
     * 如果currentId为null，则创建一个空结构，防止绑定报错；
     */
    get currentItem() {
        const currentItem = this.findById(this.currentId);
        if (!currentItem) {
            if (!this.emptyCurrentItem) {
                this.emptyCurrentItem = BindingObjectFactory.create(this.properties);
            }
            return this.emptyCurrentItem;
        }
        return currentItem;
    }
    /**
     * 绑定对象的数量
     */
    get length() {
        return this.innerList.length;
    }
    /**
     * 添加[Symbol.iterator]，使之能通过for of遍历
     */
    [Symbol.iterator]() {
        const self = this;
        let index = -1;
        const size = this.innerList.length;
        return {
            next: function () {
                index++;
                if (index < size) {
                    return {
                        done: false,
                        value: self.innerList[index]
                    };
                }
                return { done: true, value: undefined };
            }
        };
    }
    /**
     * 批量加载绑定对象，加载之前先清空绑定列表，并重置当前行，加载之后将第一行设置为默认当前行。
     * @param objects 要加载绑定对象数组
     */
    load(objects) {
        // 重置列表
        this.innerList = [];
        if (objects.length !== 0) {
            // 加载数据
            objects.forEach((object) => {
                this.add(object);
            });
            // 设置默认当前行
            const currentItem = this.findById(this.currentId);
            if (!currentItem) {
                const firstId = objects[0][this.primaryKey];
                this.setCurrentId(firstId, false, false);
            }
        }
        else {
            this.currentId = null;
        }
        // 触发事件
        this.changes.next({
            type: ChangeType.Load,
            path: [],
            value: objects
        });
    }
    /**
     * 批量追加绑定对象，追加之后将最后一个追加的绑定对象设置为当前行。
     * @param objects 要加载绑定对象数组
     */
    append(objects) {
        if (objects.length === 0) {
            return;
        }
        // 加载BindingObject
        objects.forEach((object) => {
            this.add(object);
        });
        // 当前行为新追加的最后1行
        const lastId = objects[objects.length - 1][this.primaryKey];
        this.setCurrentId(lastId, true, true);
        // 触发事件
        this.changes.next({
            type: ChangeType.Append,
            path: [],
            value: objects
        });
    }
    /**
     * 添加绑定对象，并建立绑定对象和绑定列表之间的关联。
     * @param object 绑定对象
     */
    add(object) {
        this.innerList.push(object);
        object.parent = this;
        // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径
        object.changes.subscribe((change) => {
            this.changes.next(change);
        });
    }
    /**
     * 删除主键值数组对应的绑定对象。
     * @param ids 主键值数组
     */
    removeByIds(ids) {
        if (!ids || ids.length === 0) {
            return;
        }
        let nextCurrentId = this.currentId;
        ids.forEach((id) => {
            // 如果当前行被删除，计算下一当前行
            if (id === nextCurrentId) {
                nextCurrentId = this.getCurrentIdBeforeDeleting();
            }
            // 删除对象，找不到时跳过
            const index = this.getIndexById(id);
            if (index === -1) {
                return;
            }
            ArrayUtil.removeByIndex(this.innerList, index);
        });
        // 重新设置当前行
        if (this.innerList.length === 0) {
            this.currentId = null;
        }
        else {
            this.setCurrentId(nextCurrentId, false, false);
        }
        // 出发行删除事件
        this.changes.next({
            type: ChangeType.Remove,
            path: [],
            value: ids
        });
    }
    /**
     * 清空
     */
    clear() {
        this.innerList = [];
        this.currentId = null;
        this.changes.next({
            type: ChangeType.Remove,
            path: [],
            value: []
        });
    }
    /**
     * 如果当前行被删除，删除之前重新计算当前行的位置，并返回下一当前行的主键值。
     * - 如果被删除的行是最后1行，则上移1行；
     * - 其他情况，下移1行。
     */
    getCurrentIdBeforeDeleting() {
        let nextIndex = -1;
        const currentIndex = this.getIndexById(this.currentId);
        if (currentIndex === this.length - 1) {
            nextIndex = currentIndex - 1;
        }
        else {
            nextIndex = currentIndex + 1;
        }
        return this.getIdByIndex(nextIndex);
    }
    /**
     * 根据主键值获取对应绑定对象
     * @param   id 要查找的主键值
     * @returns 找到时返回对应BindingObject， 找不到时返回null
     */
    findById(id) {
        let target;
        target = this.innerList.find((item) => {
            return item.getValue(this.primaryKey) === id;
        });
        return target === undefined ? null : target;
    }
    /**
     * 将主键值为id的绑定对象设置为当前行
     * @param  id        要设置的主键值
     * @param  emitEvent 是否发送当前行变更事件
     */
    setCurrentId(id, emitEvent = true, emitGlobalEvent = true) {
        if (this.currentId === id) {
            return;
        }
        // 不存在时设置为null
        // const currentObj = this.findById(id);
        // if (!currentObj) {
        //   this.currentId = null;
        // } else {
        //   this.currentId = id;
        // }
        // @todo：找不到时按理应该设置为null，目前是直接返回，框架部分功能依赖该特性。
        const currentObj = this.findById(id);
        if (!currentObj) {
            return;
        }
        this.currentId = id;
        // 发出行切换事件
        if (emitEvent === true) {
            this.changes.next({
                type: ChangeType.SelectionChanged,
                path: [],
                value: this.currentItem
            });
        }
        // 是否发送全局的行切换事件
        if (emitGlobalEvent === true) {
            this.changes.next({
                type: ChangeType.GlobalSelectionChanged,
                path: [],
                value: this.currentItem
            });
        }
    }
    /**
     * 根据主键值为id的绑定对象的索引
     * @param id 主键值
     * @returns 找到时返回对应的index，找不到时返回-1
     */
    getIndexById(id) {
        return this.innerList.findIndex((obj) => {
            return obj[this.primaryKey] === id;
        });
    }
    /**
     * 根据索引位置获取对应绑定对象的主键值
     * @reutrn 找到时返回对应主键值，找不到返回null
     */
    getIdByIndex(index) {
        if (index < 0 || index > this.length) {
            return null;
        }
        const obj = this.innerList[index];
        if (!obj) {
            return null;
        }
        return obj[this.primaryKey];
    }
    /**
     * 转换为BindingObject数组
     */
    toArray() {
        return this.innerList.concat([]);
    }
    /**
     * 转换为JSON对象
     * @returns 普通对象数组
     */
    toJSON(options) {
        const result = [];
        this.innerList.forEach((obj) => {
            result.push(obj.toJSON(options));
        });
        return result;
    }
    /**
     * 获取分页信息
     * @param path 路径
     * @param defaultValue 默认值
     */
    getPaginationConfigByPath(path, defaultValue) {
        if (!path || path === '/') {
            return this.paginationInfo;
        }
        if (typeof path !== 'string') {
            throw new Error('路径必须为字符串！');
        }
        path = path.substring(1);
        const paths = path.split('/').filter(item => !!item && item.trim().length > 0).map(item => item.trim());
        let config = this.paginationInfo;
        paths.forEach(item => {
            if (config && config.hasOwnProperty(item)) {
                config = config[item];
            }
            else {
                config = null;
            }
        });
        return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;
    }
    /**
     * 对bindingList就行排序
     * @param string 排序字段
     * @param directions 排序规则字段
     * @param options 参数
     */
    sortBy(fields, directions, options) {
        if (!fields || fields.length < 1 || !directions || directions.length < 1) {
            throw new Error('sortBy:argument error');
        }
        // 默认升序
        const arrFields = typeof fields === 'string' ? fields.split(',') : fields || [];
        const arrDirections = typeof directions === 'string' ? directions.split(',') : directions || [];
        // 排序字段和排序方式应一致
        if (arrFields.length !== arrDirections.length || arrFields.length < 1) {
            throw new Error('sortBy:fields and directions not match');
        }
        // nage,age,total
        const comparator = (props, orders) => (item1, item2) => {
            for (const prop of props) {
                const order = ['asc'].includes(orders[props.indexOf(prop)]) ? 1 : -1;
                if (item1.getValue(prop) > item2.getValue(prop)) {
                    return order * 1;
                }
                if (item1.getValue(prop) < item2.getValue(prop)) {
                    return order * -1;
                }
            }
            return 0;
        };
        this.innerList = this.innerList.sort(comparator(arrFields, arrDirections));
    }
}
export { BindingList };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19saXN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2JpbmRpbmctZGF0YS9iaW5kaW5nX2xpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFVLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUcvQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0M7O0dBRUc7QUFDSCxNQUFNLFdBQVc7SUF1SWY7O09BRUc7SUFDSCxZQUFZLFVBQTZCO1FBeEd6QyxjQUFjO1FBRWQ7O1dBRUc7UUFDSSxvQkFBZSxHQUFRLElBQUksQ0FBQztRQW9HakMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXpELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQVUsQ0FBQztRQUNyQyxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUN4QixDQUFDO0lBeEdELElBQUksY0FBYyxDQUFDLGVBQW9CO1FBQ3JDLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO1FBQ3ZDLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxlQUFlLEVBQUU7WUFDNUMsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFDaEIsSUFBSSxFQUFFLFVBQVUsQ0FBQyxvQkFBb0I7WUFDckMsSUFBSSxFQUFFLEVB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LENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckUsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQUUsT0FBTyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2lCQUFFO2dCQUN0RSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFBRSxPQUFPLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFBRTthQUN4RTtZQUNELE9BQU8sQ0FBQyxDQUFDO1FBQ1gsQ0FBQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztDQUNGO0FBRUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgQXJyYXlVdGlsIH0gZnJvbSAnLi4vdXRpbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBDaGFuZ2UsIENoYW5nZVR5cGUgfSBmcm9tICcuL2NoYW5nZXMnO1xyXG5pbXBvcnQgeyBCaW5kaW5nT2JqZWN0IH0gZnJvbSAnLi9iaW5kaW5nX29iamVjdCc7XHJcbmltcG9ydCB7IEJpbmRpbmdQcm9wZXJ0eSB9IGZyb20gJy4vYmluZGluZ19wcm9wZXJ0eSc7XHJcbmltcG9ydCB7IEJpbmRpbmdPYmplY3RGYWN0b3J5IH0gZnJvbSAnLi9iaW5kaW5nX29iamVjdF9mYWN0b3J5JztcclxuaW1wb3J0IHsgUHJvcGVydHlVdGlsIH0gZnJvbSAnLi9wcm9wZXJ0eV91dGlsJztcclxuXHJcbi8qKlxyXG4gKiBCaW5kaW5nTGlzdOaYr+S4gOS4qkJpbmRpbmdPYmplY3Tpm4blkIhcclxuICovXHJcbmNsYXNzIEJpbmRpbmdMaXN0IHtcclxuXHJcbiAgLyoqXHJcbiAgICogaW1tdXRhYmxl55qEQmluZGluZ09iamVjdOWIl+ihqFxyXG4gICAqL1xyXG4gIHByaXZhdGUgaW5uZXJMaXN0OiBCaW5kaW5nT2JqZWN0W107XHJcblxyXG4gIHByaXZhdGUgZW1wdHlDdXJyZW50SXRlbTogQmluZGluZ09iamVjdDtcclxuXHJcbiAgLyoqXHJcbiAgICog5YWz6IGU5a6e5L2T55qE5bGe5oCn6ZuG5ZCIXHJcbiAgICovXHJcbiAgcHVibGljIHByb3BlcnRpZXM6IEJpbmRpbmdQcm9wZXJ0eVtdO1xyXG5cclxuICAvKipcclxuICAgKiDkuLvplK7lkI1cclxuICAgKi9cclxuICBwdWJsaWMgcHJpbWFyeUtleTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiDniLblr7nosaFcclxuICAgKi9cclxuICBwdWJsaWMgcGFyZW50OiBCaW5kaW5nT2JqZWN0O1xyXG5cclxuICAvKipcclxuICAgKiDlj5jmm7TmtYFcclxuICAgKi9cclxuICBwdWJsaWMgY2hhbmdlczogU3ViamVjdDxDaGFuZ2U+O1xyXG5cclxuICAvKipcclxuICAgKiDlvZPliY3ooYzlr7nlupTnmoTnu5Hlrprlr7nosaHnmoTlhoXnoIFcclxuICAgKi9cclxuICBwdWJsaWMgY3VycmVudElkOiBzdHJpbmc7XHJcblxyXG4gIC8vI3JlZ2lvbiDliIbpobXnm7jlhbNcclxuXHJcbiAgLyoqXHJcbiAgICog5YiG6aG15L+h5oGvXHJcbiAgICovXHJcbiAgcHVibGljIF9wYWdpbmF0aW9uSW5mbzogYW55ID0gbnVsbDtcclxuXHJcbiAgc2V0IHBhZ2luYXRpb25JbmZvKHNQYWdpbmF0aW9uSW5mbzogYW55KSB7XHJcbiAgICB0aGlzLl9wYWdpbmF0aW9uSW5mbyA9IHNQYWdpbmF0aW9uSW5mbztcclxuICAgIGlmICh0aGlzLl9wYWdpbmF0aW9uSW5mbyA9PT0gc1BhZ2luYXRpb25JbmZvKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuY2hhbmdlcy5uZXh0KHtcclxuICAgICAgdHlwZTogQ2hhbmdlVHlwZS5QYWdpbmF0aW9uSW5mb0NoYW5nZSxcclxuICAgICAgcGF0aDogW10sXHJcbiAgICAgIHZhbHVlOiB0aGlzLl9wYWdpbmF0aW9uSW5mb1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXQgcGFnaW5hdGlvbkluZm8oKTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLl9wYWdpbmF0aW9uSW5mbztcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W6aG156CBXHJcbiAgICovXHJcbiAgZ2V0IHBhZ2VJbmRleCgpIHtcclxuICAgIGlmICghIXRoaXMucGFnaW5hdGlvbkluZm8gJiYgdGhpcy5wYWdpbmF0aW9uSW5mby5oYXNPd25Qcm9wZXJ0eShcInBhZ2VJbmRleFwiKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5wYWdpbmF0aW9uSW5mby5wYWdlSW5kZXg7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gMTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5YiG6aG15aSn5bCPXHJcbiAgICovXHJcbiAgZ2V0IHBhZ2VTaXplKCkge1xyXG4gICAgaWYgKCEhdGhpcy5wYWdpbmF0aW9uSW5mbyAmJiB0aGlzLnBhZ2luYXRpb25JbmZvLmhhc093blByb3BlcnR5KFwicGFnZVNpemVcIikpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucGFnaW5hdGlvbkluZm8ucGFnZVNpemU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluaVsOaNruaAu+mhueaVsFxyXG4gICAqL1xyXG4gIGdldCB0b3RhbCgpIHtcclxuICAgIGlmICghIXRoaXMucGFnaW5hdGlvbkluZm8pIHtcclxuICAgICAgcmV0dXJuIHRoaXMucGFnaW5hdGlvbkluZm8udG90YWwgfHwgdGhpcy5wYWdpbmF0aW9uSW5mby50b3RhbENvdW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlui3s+i/h+eahOaVsOaNruadoeaVsFxyXG4gICAqL1xyXG4gIGdldCBza2lwKCkge1xyXG4gICAgY29uc3QgcGFnZUluZGV4ID0gdGhpcy5wYWdlSW5kZXg7XHJcbiAgICBjb25zdCBwYWdlU2l6ZSA9IHRoaXMucGFnZVNpemU7XHJcbiAgICByZXR1cm4gKHBhZ2VJbmRleCAtIDEpICogcGFnZVNpemU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliY3lj7Dorr7nva7liIbpobXkv6Hmga9cclxuICAgKiBAcGFyYW0gc2tpcCBza2lwXHJcbiAgICogQHBhcmFtIHRha2UgdGFrZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRQYWdpbmF0aW9uSW5mbyhza2lwOiBudW1iZXIsIHRha2U6IG51bWJlcikge1xyXG4gICAgdGhpcy5wYWdpbmF0aW9uSW5mbyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMucGFnaW5hdGlvbkluZm8sIHtcclxuICAgICAgcGFnZVNpemU6IHRha2UsXHJcbiAgICAgIHBhZ2VJbmRleDogc2tpcCAvIHRha2UgKyAxXHJcbiAgICB9KTtcclxuICAgIC8qdGhpcy5jaGFuZ2VzLm5leHQoe1xyXG4gICAgICB0eXBlOiBDaGFuZ2VUeXBlLlBhZ2luYXRpb25JbmZvQ2hhbmdlLFxyXG4gICAgICBwYXRoOiBbXSxcclxuICAgICAgdmFsdWU6IHRoaXMucGFnaW5hdGlvbkluZm9cclxuICAgIH0pOyovXHJcbiAgfVxyXG4gIC8vI2VuZHJlZ2lvblxyXG5cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIOW9k+WJjeihjOWvueW6lOeahOe7keWumuWvueixoVxyXG4gICAqIOWmguaenGN1cnJlbnRJZOS4um51bGzvvIzliJnliJvlu7rkuIDkuKrnqbrnu5PmnoTvvIzpmLLmraLnu5HlrprmiqXplJnvvJtcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IGN1cnJlbnRJdGVtKCk6IEJpbmRpbmdPYmplY3Qge1xyXG4gICAgY29uc3QgY3VycmVudEl0ZW0gPSB0aGlzLmZpbmRCeUlkKHRoaXMuY3VycmVudElkKTtcclxuICAgIGlmICghY3VycmVudEl0ZW0pIHtcclxuICAgICAgaWYgKCF0aGlzLmVtcHR5Q3VycmVudEl0ZW0pIHtcclxuICAgICAgICB0aGlzLmVtcHR5Q3VycmVudEl0ZW0gPSBCaW5kaW5nT2JqZWN0RmFjdG9yeS5jcmVhdGUodGhpcy5wcm9wZXJ0aWVzKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpcy5lbXB0eUN1cnJlbnRJdGVtO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGN1cnJlbnRJdGVtO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog57uR5a6a5a+56LGh55qE5pWw6YePXHJcbiAgICovXHJcbiAgcHVibGljIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmlubmVyTGlzdC5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzOiBCaW5kaW5nUHJvcGVydHlbXSkge1xyXG4gICAgdGhpcy5wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcclxuICAgIHRoaXMucHJpbWFyeUtleSA9IFByb3BlcnR5VXRpbC5nZXRQcmltYXJ5S2V5KHByb3BlcnRpZXMpO1xyXG5cclxuICAgIHRoaXMuY2hhbmdlcyA9IG5ldyBTdWJqZWN0PENoYW5nZT4oKTtcclxuICAgIHRoaXMuaW5uZXJMaXN0ID0gW107XHJcbiAgICB0aGlzLmN1cnJlbnRJZCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmt7vliqBbU3ltYm9sLml0ZXJhdG9yXe+8jOS9v+S5i+iDvemAmui/h2ZvciBvZumBjeWOhlxyXG4gICAqL1xyXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xyXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICBsZXQgaW5kZXggPSAtMTtcclxuICAgIGNvbnN0IHNpemUgPSB0aGlzLmlubmVyTGlzdC5sZW5ndGg7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgaWYgKGluZGV4IDwgc2l6ZSkge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZG9uZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHZhbHVlOiBzZWxmLmlubmVyTGlzdFtpbmRleF1cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaJuemHj+WKoOi9vee7keWumuWvueixoe+8jOWKoOi9veS5i+WJjeWFiOa4heepuue7keWumuWIl+ihqO+8jOW5tumHjee9ruW9k+WJjeihjO+8jOWKoOi9veS5i+WQjuWwhuesrOS4gOihjOiuvue9ruS4uum7mOiupOW9k+WJjeihjOOAglxyXG4gICAqIEBwYXJhbSBvYmplY3RzIOimgeWKoOi9vee7keWumuWvueixoeaVsOe7hFxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb2FkKG9iamVjdHM6IEJpbmRpbmdPYmplY3RbXSk6IHZvaWQge1xyXG5cclxuICAgIC8vIOmHjee9ruWIl+ihqFxyXG4gICAgdGhpcy5pbm5lckxpc3QgPSBbXTtcclxuXHJcbiAgICBpZiAob2JqZWN0cy5sZW5ndGggIT09IDApIHtcclxuICAgICAgLy8g5Yqg6L295pWw5o2uXHJcbiAgICAgIG9iamVjdHMuZm9yRWFjaCgob2JqZWN0OiBCaW5kaW5nT2JqZWN0KSA9PiB7XHJcbiAgICAgICAgdGhpcy5hZGQob2JqZWN0KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyDorr7nva7pu5jorqTlvZPliY3ooYxcclxuICAgICAgY29uc3QgY3VycmVudEl0ZW0gPSB0aGlzLmZpbmRCeUlkKHRoaXMuY3VycmVudElkKTtcclxuICAgICAgaWYgKCFjdXJyZW50SXRlbSkge1xyXG4gICAgICAgIGNvbnN0IGZpcnN0SWQgPSBvYmplY3RzWzBdW3RoaXMucHJpbWFyeUtleV07XHJcbiAgICAgICAgdGhpcy5zZXRDdXJyZW50SWQoZmlyc3RJZCwgZmFsc2UsIGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5jdXJyZW50SWQgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOinpuWPkeS6i+S7tlxyXG4gICAgdGhpcy5jaGFuZ2VzLm5leHQoe1xyXG4gICAgICB0eXBlOiBDaGFuZ2VUeXBlLkxvYWQsXHJcbiAgICAgIHBhdGg6IFtdLFxyXG4gICAgICB2YWx1ZTogb2JqZWN0c1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmibnph4/ov73liqDnu5Hlrprlr7nosaHvvIzov73liqDkuYvlkI7lsIbmnIDlkI7kuIDkuKrov73liqDnmoTnu5Hlrprlr7nosaHorr7nva7kuLrlvZPliY3ooYzjgIJcclxuICAgKiBAcGFyYW0gb2JqZWN0cyDopoHliqDovb3nu5Hlrprlr7nosaHmlbDnu4RcclxuICAgKi9cclxuICBwdWJsaWMgYXBwZW5kKG9iamVjdHM6IEJpbmRpbmdPYmplY3RbXSk6IHZvaWQge1xyXG5cclxuICAgIGlmIChvYmplY3RzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5Yqg6L29QmluZGluZ09iamVjdFxyXG4gICAgb2JqZWN0cy5mb3JFYWNoKChvYmplY3Q6IEJpbmRpbmdPYmplY3QpID0+IHtcclxuICAgICAgdGhpcy5hZGQob2JqZWN0KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOW9k+WJjeihjOS4uuaWsOi/veWKoOeahOacgOWQjjHooYxcclxuICAgIGNvbnN0IGxhc3RJZCA9IG9iamVjdHNbb2JqZWN0cy5sZW5ndGggLSAxXVt0aGlzLnByaW1hcnlLZXldO1xyXG4gICAgdGhpcy5zZXRDdXJyZW50SWQobGFzdElkLCB0cnVlLCB0cnVlKTtcclxuXHJcbiAgICAvLyDop6blj5Hkuovku7ZcclxuICAgIHRoaXMuY2hhbmdlcy5uZXh0KHtcclxuICAgICAgdHlwZTogQ2hhbmdlVHlwZS5BcHBlbmQsXHJcbiAgICAgIHBhdGg6IFtdLFxyXG4gICAgICB2YWx1ZTogb2JqZWN0c1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmt7vliqDnu5Hlrprlr7nosaHvvIzlubblu7rnq4vnu5Hlrprlr7nosaHlkoznu5HlrprliJfooajkuYvpl7TnmoTlhbPogZTjgIJcclxuICAgKiBAcGFyYW0gb2JqZWN0IOe7keWumuWvueixoVxyXG4gICAqL1xyXG4gIHB1YmxpYyBhZGQob2JqZWN0OiBCaW5kaW5nT2JqZWN0KSB7XHJcbiAgICB0aGlzLmlubmVyTGlzdC5wdXNoKG9iamVjdCk7XHJcbiAgICBvYmplY3QucGFyZW50ID0gdGhpcztcclxuXHJcbiAgICAvLyDnm5HlkKxvYmplY3Tlj5jmm7TvvIzlubbnu6fnu63lkJHkuIrmipvvvIznlLHkuo5saXN05pyJ5b2T5YmN6KGM55qE5qaC5b+177yM5LiN6ZyA6KaB5ZyocGF0aOS4rei/veWKoOi3r+W+hFxyXG4gICAgb2JqZWN0LmNoYW5nZXMuc3Vic2NyaWJlKChjaGFuZ2U6IENoYW5nZSkgPT4ge1xyXG4gICAgICB0aGlzLmNoYW5nZXMubmV4dChjaGFuZ2UpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliKDpmaTkuLvplK7lgLzmlbDnu4Tlr7nlupTnmoTnu5Hlrprlr7nosaHjgIJcclxuICAgKiBAcGFyYW0gaWRzIOS4u+mUruWAvOaVsOe7hFxyXG4gICAqL1xyXG4gIHB1YmxpYyByZW1vdmVCeUlkcyhpZHM6IEFycmF5PHN0cmluZz4pOiB2b2lkIHtcclxuICAgIGlmICghaWRzIHx8IGlkcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBuZXh0Q3VycmVudElkID0gdGhpcy5jdXJyZW50SWQ7XHJcbiAgICBpZHMuZm9yRWFjaCgoaWQ6IHN0cmluZykgPT4ge1xyXG5cclxuICAgICAgLy8g5aaC5p6c5b2T5YmN6KGM6KKr5Yig6Zmk77yM6K6h566X5LiL5LiA5b2T5YmN6KGMXHJcbiAgICAgIGlmIChpZCA9PT0gbmV4dEN1cnJlbnRJZCkge1xyXG4gICAgICAgIG5leHRDdXJyZW50SWQgPSB0aGlzLmdldEN1cnJlbnRJZEJlZm9yZURlbGV0aW5nKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIOWIoOmZpOWvueixoe+8jOaJvuS4jeWIsOaXtui3s+i/h1xyXG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0SW5kZXhCeUlkKGlkKTtcclxuICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBBcnJheVV0aWwucmVtb3ZlQnlJbmRleCh0aGlzLmlubmVyTGlzdCwgaW5kZXgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8g6YeN5paw6K6+572u5b2T5YmN6KGMXHJcbiAgICBpZiAodGhpcy5pbm5lckxpc3QubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudElkID0gbnVsbDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2V0Q3VycmVudElkKG5leHRDdXJyZW50SWQsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5Ye65Y+R6KGM5Yig6Zmk5LqL5Lu2XHJcbiAgICB0aGlzLmNoYW5nZXMubmV4dCh7XHJcbiAgICAgIHR5cGU6IENoYW5nZVR5cGUuUmVtb3ZlLFxyXG4gICAgICBwYXRoOiBbXSxcclxuICAgICAgdmFsdWU6IGlkc1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmuIXnqbpcclxuICAgKi9cclxuICBwdWJsaWMgY2xlYXIoKSB7XHJcbiAgICB0aGlzLmlubmVyTGlzdCA9IFtdO1xyXG4gICAgdGhpcy5jdXJyZW50SWQgPSBudWxsO1xyXG4gICAgdGhpcy5jaGFuZ2VzLm5leHQoe1xyXG4gICAgICB0eXBlOiBDaGFuZ2VUeXBlLlJlbW92ZSxcclxuICAgICAgcGF0aDogW10sXHJcbiAgICAgIHZhbHVlOiBbXVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlpoLmnpzlvZPliY3ooYzooqvliKDpmaTvvIzliKDpmaTkuYvliY3ph43mlrDorqHnrpflvZPliY3ooYznmoTkvY3nva7vvIzlubbov5Tlm57kuIvkuIDlvZPliY3ooYznmoTkuLvplK7lgLzjgIJcclxuICAgKiAtIOWmguaenOiiq+WIoOmZpOeahOihjOaYr+acgOWQjjHooYzvvIzliJnkuIrnp7sx6KGM77ybXHJcbiAgICogLSDlhbbku5bmg4XlhrXvvIzkuIvnp7sx6KGM44CCXHJcbiAgICovXHJcbiAgcHVibGljIGdldEN1cnJlbnRJZEJlZm9yZURlbGV0aW5nKCk6IHN0cmluZyB7XHJcbiAgICBsZXQgbmV4dEluZGV4ID0gLTE7XHJcbiAgICBjb25zdCBjdXJyZW50SW5kZXggPSB0aGlzLmdldEluZGV4QnlJZCh0aGlzLmN1cnJlbnRJZCk7XHJcbiAgICBpZiAoY3VycmVudEluZGV4ID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgbmV4dEluZGV4ID0gY3VycmVudEluZGV4IC0gMTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG5leHRJbmRleCA9IGN1cnJlbnRJbmRleCArIDE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5nZXRJZEJ5SW5kZXgobmV4dEluZGV4KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOagueaNruS4u+mUruWAvOiOt+WPluWvueW6lOe7keWumuWvueixoVxyXG4gICAqIEBwYXJhbSAgIGlkIOimgeafpeaJvueahOS4u+mUruWAvFxyXG4gICAqIEByZXR1cm5zIOaJvuWIsOaXtui/lOWbnuWvueW6lEJpbmRpbmdPYmplY3TvvIwg5om+5LiN5Yiw5pe26L+U5ZuebnVsbFxyXG4gICAqL1xyXG4gIHB1YmxpYyBmaW5kQnlJZChpZDogc3RyaW5nKTogQmluZGluZ09iamVjdCB8IG51bGwge1xyXG4gICAgbGV0IHRhcmdldDogQmluZGluZ09iamVjdDtcclxuICAgIHRhcmdldCA9IHRoaXMuaW5uZXJMaXN0LmZpbmQoKGl0ZW0pID0+IHtcclxuICAgICAgcmV0dXJuIGl0ZW0uZ2V0VmFsdWUodGhpcy5wcmltYXJ5S2V5KSA9PT0gaWQ7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0YXJnZXQgPT09IHVuZGVmaW5lZCA/IG51bGwgOiB0YXJnZXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlsIbkuLvplK7lgLzkuLppZOeahOe7keWumuWvueixoeiuvue9ruS4uuW9k+WJjeihjFxyXG4gICAqIEBwYXJhbSAgaWQgICAgICAgIOimgeiuvue9rueahOS4u+mUruWAvFxyXG4gICAqIEBwYXJhbSAgZW1pdEV2ZW50IOaYr+WQpuWPkemAgeW9k+WJjeihjOWPmOabtOS6i+S7tlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRDdXJyZW50SWQoaWQ6IHN0cmluZywgZW1pdEV2ZW50OiBib29sZWFuID0gdHJ1ZSwgZW1pdEdsb2JhbEV2ZW50OiBib29sZWFuID0gdHJ1ZSk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuY3VycmVudElkID09PSBpZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5LiN5a2Y5Zyo5pe26K6+572u5Li6bnVsbFxyXG4gICAgLy8gY29uc3QgY3VycmVudE9iaiA9IHRoaXMuZmluZEJ5SWQoaWQpO1xyXG4gICAgLy8gaWYgKCFjdXJyZW50T2JqKSB7XHJcbiAgICAvLyAgIHRoaXMuY3VycmVudElkID0gbnVsbDtcclxuICAgIC8vIH0gZWxzZSB7XHJcbiAgICAvLyAgIHRoaXMuY3VycmVudElkID0gaWQ7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gQHRvZG/vvJrmib7kuI3liLDml7bmjInnkIblupTor6Xorr7nva7kuLpudWxs77yM55uu5YmN5piv55u05o6l6L+U5Zue77yM5qGG5p626YOo5YiG5Yqf6IO95L6d6LWW6K+l54m55oCn44CCXHJcbiAgICBjb25zdCBjdXJyZW50T2JqID0gdGhpcy5maW5kQnlJZChpZCk7XHJcbiAgICBpZiAoIWN1cnJlbnRPYmopIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jdXJyZW50SWQgPSBpZDtcclxuXHJcbiAgICAvLyDlj5Hlh7rooYzliIfmjaLkuovku7ZcclxuICAgIGlmIChlbWl0RXZlbnQgPT09IHRydWUpIHtcclxuICAgICAgdGhpcy5jaGFuZ2VzLm5leHQoe1xyXG4gICAgICAgIHR5cGU6IENoYW5nZVR5cGUuU2VsZWN0aW9uQ2hhbmdlZCxcclxuICAgICAgICBwYXRoOiBbXSxcclxuICAgICAgICB2YWx1ZTogdGhpcy5jdXJyZW50SXRlbVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDmmK/lkKblj5HpgIHlhajlsYDnmoTooYzliIfmjaLkuovku7ZcclxuICAgIGlmIChlbWl0R2xvYmFsRXZlbnQgPT09IHRydWUpIHtcclxuICAgICAgdGhpcy5jaGFuZ2VzLm5leHQoe1xyXG4gICAgICAgIHR5cGU6IENoYW5nZVR5cGUuR2xvYmFsU2VsZWN0aW9uQ2hhbmdlZCxcclxuICAgICAgICBwYXRoOiBbXSxcclxuICAgICAgICB2YWx1ZTogdGhpcy5jdXJyZW50SXRlbVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOagueaNruS4u+mUruWAvOS4umlk55qE57uR5a6a5a+56LGh55qE57Si5byVXHJcbiAgICogQHBhcmFtIGlkIOS4u+mUruWAvFxyXG4gICAqIEByZXR1cm5zIOaJvuWIsOaXtui/lOWbnuWvueW6lOeahGluZGV477yM5om+5LiN5Yiw5pe26L+U5ZueLTFcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0SW5kZXhCeUlkKGlkOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuaW5uZXJMaXN0LmZpbmRJbmRleCgob2JqOiBCaW5kaW5nT2JqZWN0KSA9PiB7XHJcbiAgICAgIHJldHVybiBvYmpbdGhpcy5wcmltYXJ5S2V5XSA9PT0gaWQ7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOagueaNrue0ouW8leS9jee9ruiOt+WPluWvueW6lOe7keWumuWvueixoeeahOS4u+mUruWAvFxyXG4gICAqIEByZXV0cm4g5om+5Yiw5pe26L+U5Zue5a+55bqU5Li76ZSu5YC877yM5om+5LiN5Yiw6L+U5ZuebnVsbFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRJZEJ5SW5kZXgoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XHJcblxyXG4gICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRoaXMubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9iaiA9IHRoaXMuaW5uZXJMaXN0W2luZGV4XTtcclxuICAgIGlmICghb2JqKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvYmpbdGhpcy5wcmltYXJ5S2V5XTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOi9rOaNouS4ukJpbmRpbmdPYmplY3TmlbDnu4RcclxuICAgKi9cclxuICBwdWJsaWMgdG9BcnJheSgpOiBCaW5kaW5nT2JqZWN0W10ge1xyXG4gICAgcmV0dXJuIHRoaXMuaW5uZXJMaXN0LmNvbmNhdChbXSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDovazmjaLkuLpKU09O5a+56LGhXHJcbiAgICogQHJldHVybnMg5pmu6YCa5a+56LGh5pWw57uEXHJcbiAgICovXHJcbiAgcHVibGljIHRvSlNPTihvcHRpb25zPzogYW55KTogYW55W10ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgICB0aGlzLmlubmVyTGlzdC5mb3JFYWNoKChvYmo6IEJpbmRpbmdPYmplY3QpID0+IHtcclxuICAgICAgcmVzdWx0LnB1c2gob2JqLnRvSlNPTihvcHRpb25zKSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bliIbpobXkv6Hmga9cclxuICAgKiBAcGFyYW0gcGF0aCDot6/lvoRcclxuICAgKiBAcGFyYW0gZGVmYXVsdFZhbHVlIOm7mOiupOWAvFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRQYWdpbmF0aW9uQ29uZmlnQnlQYXRoKHBhdGg6IHN0cmluZywgZGVmYXVsdFZhbHVlPzogYW55KSB7XHJcbiAgICBpZiAoIXBhdGggfHwgcGF0aCA9PT0gJy8nKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnBhZ2luYXRpb25JbmZvO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+i3r+W+hOW/hemhu+S4uuWtl+espuS4su+8gScpO1xyXG4gICAgfVxyXG4gICAgcGF0aCA9IHBhdGguc3Vic3RyaW5nKDEpO1xyXG4gICAgY29uc3QgcGF0aHMgPSBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKGl0ZW0gPT4gISFpdGVtICYmIGl0ZW0udHJpbSgpLmxlbmd0aCA+IDApLm1hcChpdGVtID0+IGl0ZW0udHJpbSgpKTtcclxuICAgIGxldCBjb25maWcgPSB0aGlzLnBhZ2luYXRpb25JbmZvO1xyXG4gICAgcGF0aHMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgaWYgKGNvbmZpZyAmJiBjb25maWcuaGFzT3duUHJvcGVydHkoaXRlbSkpIHtcclxuICAgICAgICBjb25maWcgPSBjb25maWdbaXRlbV07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uZmlnID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gISFjb25maWcgPyBjb25maWcgOiB0eXBlb2YgZGVmYXVsdFZhbHVlICE9PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRWYWx1ZSA6IHVuZGVmaW5lZDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5a+5YmluZGluZ0xpc3TlsLHooYzmjpLluo9cclxuICAgKiBAcGFyYW0gc3RyaW5nIOaOkuW6j+Wtl+autVxyXG4gICAqIEBwYXJhbSBkaXJlY3Rpb25zIOaOkuW6j+inhOWImeWtl+autVxyXG4gICAqIEBwYXJhbSBvcHRpb25zIOWPguaVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzb3J0QnkoZmllbGRzOiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+LCBkaXJlY3Rpb25zOiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+LCBvcHRpb25zPzogeyBbcHJvcDogc3RyaW5nXTogYW55IH0pIHtcclxuICAgIGlmICghZmllbGRzIHx8IGZpZWxkcy5sZW5ndGggPCAxIHx8ICFkaXJlY3Rpb25zIHx8IGRpcmVjdGlvbnMubGVuZ3RoIDwgMSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NvcnRCeTphcmd1bWVudCBlcnJvcicpO1xyXG4gICAgfVxyXG4gICAgLy8g6buY6K6k5Y2H5bqPXHJcbiAgICBjb25zdCBhcnJGaWVsZHM6IEFycmF5PHN0cmluZz4gPSB0eXBlb2YgZmllbGRzID09PSAnc3RyaW5nJyA/IGZpZWxkcy5zcGxpdCgnLCcpIDogZmllbGRzIHx8IFtdO1xyXG4gICAgY29uc3QgYXJyRGlyZWN0aW9uczogQXJyYXk8c3RyaW5nPiA9IHR5cGVvZiBkaXJlY3Rpb25zID09PSAnc3RyaW5nJyA/IGRpcmVjdGlvbnMuc3BsaXQoJywnKSA6IGRpcmVjdGlvbnMgfHwgW107XHJcbiAgICAvLyDmjpLluo/lrZfmrrXlkozmjpLluo/mlrnlvI/lupTkuIDoh7RcclxuICAgIGlmIChhcnJGaWVsZHMubGVuZ3RoICE9PSBhcnJEaXJlY3Rpb25zLmxlbmd0aCB8fCBhcnJGaWVsZHMubGVuZ3RoIDwgMSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NvcnRCeTpmaWVsZHMgYW5kIGRpcmVjdGlvbnMgbm90IG1hdGNoJyk7XHJcbiAgICB9XHJcbiAgICAvLyBuYWdlLGFnZSx0b3RhbFxyXG4gICAgY29uc3QgY29tcGFyYXRvciA9IChwcm9wczogQXJyYXk8c3RyaW5nPiwgb3JkZXJzOiBBcnJheTxzdHJpbmc+KSA9PiAoaXRlbTE6IEJpbmRpbmdPYmplY3QsIGl0ZW0yOiBCaW5kaW5nT2JqZWN0KSA9PiB7XHJcbiAgICAgIGZvciAoY29uc3QgcHJvcCBvZiBwcm9wcykge1xyXG4gICAgICAgIGNvbnN0IG9yZGVyID0gWydhc2MnXS5pbmNsdWRlcyhvcmRlcnNbcHJvcHMuaW5kZXhPZihwcm9wKV0pID8gMSA6IC0xO1xyXG4gICAgICAgIGlmIChpdGVtMS5nZXRWYWx1ZShwcm9wKSA+IGl0ZW0yLmdldFZhbHVlKHByb3ApKSB7IHJldHVybiBvcmRlciAqIDE7IH1cclxuICAgICAgICBpZiAoaXRlbTEuZ2V0VmFsdWUocHJvcCkgPCBpdGVtMi5nZXRWYWx1ZShwcm9wKSkgeyByZXR1cm4gb3JkZXIgKiAtMTsgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfTtcclxuICAgIHRoaXMuaW5uZXJMaXN0ID0gdGhpcy5pbm5lckxpc3Quc29ydChjb21wYXJhdG9yKGFyckZpZWxkcywgYXJyRGlyZWN0aW9ucykpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgQmluZGluZ0xpc3QgfTtcclxuIl19