/**
 * 变量解析服务
 * 职责：
 * 1、解析字符串中的变量，并替换成相应的值；
 * 2、对表达式进行求值。
 *
 * @todo 对表达式求值的部分和表达式功能重叠，是否转移到表达式中？
 */
class VariableParseService {
    /**
     * 构造变量解析服务
     * @param parsers 解析器集合
     */
    constructor(parsers) {
        this.parsers = parsers;
    }
    /**
     * 解析表达式
     * @param expression 表达式
     * @param context 上下文
     */
    parse(target, context) {
        if (typeof target === 'string' && target.length > 0) {
            // 字符串，直接解析
            return this.parseExpression(target, context);
        }
        else if (Array.isArray(target)) {
            // 遍历数组
            target.forEach((item, itemIndex) => {
                if (typeof item === 'string') {
                    target[itemIndex] = this.parseExpression(item, context);
                }
                else {
                    target[itemIndex] = this.parse(item, context);
                }
            });
        }
        else if (typeof target === 'object' && target !== null) {
            // 遍历对象可枚举属性
            const keys = Object.keys(target);
            keys.forEach(key => {
                if (typeof target[key] === 'string') {
                    target[key] = this.parseExpression(target[key], context);
                }
                else {
                    target[key] = this.parse(target[key], context);
                }
            });
        }
        return target;
    }
    /**
     * 表达式求值
     */
    evaluate(expression, context) {
        const parsedExpression = this.parse(expression, context);
        return (new Function('return ' + parsedExpression))();
    }
    /**
     * 解析表达式
     * @param expression 表达式
     * @param context 上下文
     */
    parseExpression(expression, context) {
        // 空串直接返回
        if (expression === '') {
            return '';
        }
        this.parsers.forEach(parser => {
            if (typeof expression === 'string') {
                expression = parser.parse(expression, context);
            }
        });
        return expression;
    }
}
export { VariableParseService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFyaWFibGVfcGFyc2Vfc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi92YXJpYWJsZS92YXJpYWJsZV9wYXJzZV9zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLG9CQUFvQjtJQU94Qjs7O09BR0c7SUFDSCxZQUFZLE9BQXlCO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksS0FBSyxDQUFDLE1BQVcsRUFBRSxPQUFhO1FBQ3JDLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBRW5ELFdBQVc7WUFDWCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBRTlDO2FBQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBRWhDLE9BQU87WUFDUCxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxFQUFFO2dCQUNqQyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtvQkFDNUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2lCQUN6RDtxQkFBTTtvQkFDTCxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7aUJBQy9DO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FFSjthQUFNLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7WUFFeEQsWUFBWTtZQUNaLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDakIsSUFBSSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLEVBQUU7b0JBQ25DLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztpQkFDMUQ7cUJBQU07b0JBQ0wsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2lCQUNoRDtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQ7O09BRUc7SUFDSSxRQUFRLENBQUMsVUFBa0IsRUFBRSxPQUFhO1FBQy9DLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDekQsT0FBTyxDQUFDLElBQUksUUFBUSxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUN4RCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLGVBQWUsQ0FBQyxVQUFrQixFQUFFLE9BQVk7UUFFdEQsU0FBUztRQUNULElBQUksVUFBVSxLQUFLLEVBQUUsRUFBRTtZQUNyQixPQUFPLEVBQUUsQ0FBQztTQUNYO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDNUIsSUFBSSxPQUFPLFVBQVUsS0FBSyxRQUFRLEVBQUU7Z0JBQ2xDLFVBQVUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQzthQUNoRDtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztDQUNGO0FBRUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog5Y+Y6YeP6Kej5p6Q5pyN5YqhXHJcbiAqIEBhdXRob3IgV2l0dDxqaXd0QGluc3B1ci5jb20+XHJcbiAqL1xyXG5pbXBvcnQgeyBWYXJpYWJsZVBhcnNlciwgVkFSSUFCTEVfUEFSU0VSUyB9IGZyb20gJy4vdmFyaWFibGVfcGFyc2VyJztcclxuaW1wb3J0IHsgSW5qZWN0b3IgIH0gZnJvbSAnLi4vY29yZS9pbmRleCc7XHJcblxyXG5cclxuLyoqXHJcbiAqIOWPmOmHj+ino+aekOacjeWKoVxyXG4gKiDogYzotKPvvJpcclxuICogMeOAgeino+aekOWtl+espuS4suS4reeahOWPmOmHj++8jOW5tuabv+aNouaIkOebuOW6lOeahOWAvO+8m1xyXG4gKiAy44CB5a+56KGo6L6+5byP6L+b6KGM5rGC5YC844CCXHJcbiAqXHJcbiAqIEB0b2RvIOWvueihqOi+vuW8j+axguWAvOeahOmDqOWIhuWSjOihqOi+vuW8j+WKn+iDvemHjeWPoO+8jOaYr+WQpui9rOenu+WIsOihqOi+vuW8j+S4re+8n1xyXG4gKi9cclxuY2xhc3MgVmFyaWFibGVQYXJzZVNlcnZpY2Uge1xyXG5cclxuICAvKipcclxuICAgKiDop6PmnpDlmajpm4blkIhcclxuICAgKi9cclxuICBwcml2YXRlIHBhcnNlcnM6IFZhcmlhYmxlUGFyc2VyW107XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWPmOmHj+ino+aekOacjeWKoVxyXG4gICAqIEBwYXJhbSBwYXJzZXJzIOino+aekOWZqOmbhuWQiFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHBhcnNlcnM6IFZhcmlhYmxlUGFyc2VyW10pIHtcclxuICAgIHRoaXMucGFyc2VycyA9IHBhcnNlcnM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDop6PmnpDooajovr7lvI9cclxuICAgKiBAcGFyYW0gZXhwcmVzc2lvbiDooajovr7lvI9cclxuICAgKiBAcGFyYW0gY29udGV4dCDkuIrkuIvmlodcclxuICAgKi9cclxuICBwdWJsaWMgcGFyc2UodGFyZ2V0OiBhbnksIGNvbnRleHQ/OiBhbnkpOiBhbnkge1xyXG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnICYmIHRhcmdldC5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAvLyDlrZfnrKbkuLLvvIznm7TmjqXop6PmnpBcclxuICAgICAgcmV0dXJuIHRoaXMucGFyc2VFeHByZXNzaW9uKHRhcmdldCwgY29udGV4dCk7XHJcblxyXG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcclxuXHJcbiAgICAgIC8vIOmBjeWOhuaVsOe7hFxyXG4gICAgICB0YXJnZXQuZm9yRWFjaCgoaXRlbSwgaXRlbUluZGV4KSA9PiAge1xyXG4gICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgIHRhcmdldFtpdGVtSW5kZXhdID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oaXRlbSwgY29udGV4dCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRhcmdldFtpdGVtSW5kZXhdID0gdGhpcy5wYXJzZShpdGVtLCBjb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcgJiYgdGFyZ2V0ICE9PSBudWxsKSB7XHJcblxyXG4gICAgICAvLyDpgY3ljoblr7nosaHlj6/mnprkuL7lsZ7mgKdcclxuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRhcmdldCk7XHJcbiAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0W2tleV0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHRoaXMucGFyc2VFeHByZXNzaW9uKHRhcmdldFtrZXldLCBjb250ZXh0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB0aGlzLnBhcnNlKHRhcmdldFtrZXldLCBjb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDooajovr7lvI/msYLlgLxcclxuICAgKi9cclxuICBwdWJsaWMgZXZhbHVhdGUoZXhwcmVzc2lvbjogc3RyaW5nLCBjb250ZXh0PzogYW55KTogYW55IHtcclxuICAgIGNvbnN0IHBhcnNlZEV4cHJlc3Npb24gPSB0aGlzLnBhcnNlKGV4cHJlc3Npb24sIGNvbnRleHQpO1xyXG4gICAgcmV0dXJuIChuZXcgRnVuY3Rpb24oJ3JldHVybiAnICsgcGFyc2VkRXhwcmVzc2lvbikpKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDop6PmnpDooajovr7lvI9cclxuICAgKiBAcGFyYW0gZXhwcmVzc2lvbiDooajovr7lvI9cclxuICAgKiBAcGFyYW0gY29udGV4dCDkuIrkuIvmlodcclxuICAgKi9cclxuICBwcml2YXRlIHBhcnNlRXhwcmVzc2lvbihleHByZXNzaW9uOiBzdHJpbmcsIGNvbnRleHQ6IGFueSk6IHN0cmluZyB7XHJcblxyXG4gICAgLy8g56m65Liy55u05o6l6L+U5ZueXHJcbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucGFyc2Vycy5mb3JFYWNoKHBhcnNlciA9PiB7XHJcbiAgICAgIGlmICh0eXBlb2YgZXhwcmVzc2lvbiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBleHByZXNzaW9uID0gcGFyc2VyLnBhcnNlKGV4cHJlc3Npb24sIGNvbnRleHQpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBleHByZXNzaW9uO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgVmFyaWFibGVQYXJzZVNlcnZpY2UgfTtcclxuIl19