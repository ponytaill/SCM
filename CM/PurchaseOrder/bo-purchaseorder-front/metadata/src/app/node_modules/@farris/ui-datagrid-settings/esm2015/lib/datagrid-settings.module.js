/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { ModalModule } from '@farris/ui-modal';
import { GRID_SETTINGS_SERVICE, DatagridModule } from '@farris/ui-datagrid';
import { MultiSelectModule } from '@farris/ui-multi-select';
import { FarrisCommonModule } from '@farris/ui-common';
import { LocaleModule } from '@farris/ui-locale';
import { MessagerModule } from '@farris/ui-messager';
import { ComboListModule } from '@farris/ui-combo-list';
import { SwitchModule } from '@farris/ui-switch';
import { FarrisTooltipModule } from '@farris/ui-tooltip';
import { NotifyModule } from '@farris/ui-notify';
import { OrganizationSelectorModule } from '@farris/ui-organization-selector';
import { DatagridSettingsComponent } from './datagrid-settings.component';
import { DatagridSettingsService } from './datagrid-settings.service';
import { DatagridSortSettingComponent } from './datagrid-sort-setting.component';
import { DatagridViewColumnsComponent } from './datagrid-view-columns.component';
import { ColumnFormatSettingComponent } from './column-format-setting/column-format-setting.component';
import { ColumnGroupSettingComponent } from './column-group/column-group.component';
import { ColumnVisibleDragDirective } from './column-format-setting/column-visible-drag.directive';
import { ColumnGroupDragDirective } from './column-group/column-group-drag.directive';
import { SimpleColumnsComponent } from './simple-mode/simple-columns.component';
import { NewSchemeComponent } from './scheme/newscheme.component';
import { SchemeListComponent } from './scheme/scheme-list.component';
import { LanguageTextboxModule } from '@farris/ui-language-textbox';
export class DatagridSettingsModule {
    /**
     * @param {?=} apiUri
     * @return {?}
     */
    static forRoot(apiUri = '') {
        return {
            ngModule: DatagridSettingsModule,
            providers: [
                { provide: GRID_SETTINGS_SERVICE, useClass: DatagridSettingsService }
            ]
        };
    }
}
DatagridSettingsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    DatagridSettingsComponent,
                    DatagridSortSettingComponent,
                    DatagridViewColumnsComponent,
                    ColumnFormatSettingComponent,
                    ColumnGroupSettingComponent,
                    ColumnVisibleDragDirective,
                    ColumnGroupDragDirective,
                    SimpleColumnsComponent,
                    NewSchemeComponent,
                    SchemeListComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    MultiSelectModule,
                    ComboListModule,
                    DatagridModule,
                    FarrisCommonModule.forRoot(),
                    MessagerModule.forRoot(),
                    LocaleModule.forRoot(),
                    ModalModule.forRoot(),
                    SwitchModule,
                    FarrisTooltipModule,
                    NotifyModule.forRoot(),
                    OrganizationSelectorModule,
                    LanguageTextboxModule
                ],
                entryComponents: [
                    DatagridSettingsComponent,
                    SimpleColumnsComponent,
                    NewSchemeComponent,
                    SchemeListComponent
                ],
                exports: [
                    DatagridSettingsComponent,
                    SimpleColumnsComponent,
                    NewSchemeComponent,
                    SchemeListComponent
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtc2V0dGluZ3MubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC1zZXR0aW5ncy8iLCJzb3VyY2VzIjpbImxpYi9kYXRhZ3JpZC1zZXR0aW5ncy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxjQUFjLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUMzRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2pELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRTlFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRTFFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBQ3ZHLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3BGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQ25HLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBMkNwRSxNQUFNLE9BQU8sc0JBQXNCOzs7OztJQUMvQixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxFQUFFO1FBQ3RCLE9BQU87WUFDSCxRQUFRLEVBQUUsc0JBQXNCO1lBQ2hDLFNBQVMsRUFBRTtnQkFDUCxFQUFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsdUJBQXVCLEVBQUU7YUFDeEU7U0FDSixDQUFDO0lBQ04sQ0FBQzs7O1lBbERKLFFBQVEsU0FBQztnQkFDTixZQUFZLEVBQUU7b0JBQ1YseUJBQXlCO29CQUN6Qiw0QkFBNEI7b0JBQzVCLDRCQUE0QjtvQkFDNUIsNEJBQTRCO29CQUM1QiwyQkFBMkI7b0JBQzNCLDBCQUEwQjtvQkFDMUIsd0JBQXdCO29CQUN4QixzQkFBc0I7b0JBQ3RCLGtCQUFrQjtvQkFDbEIsbUJBQW1CO2lCQUN0QjtnQkFDRCxPQUFPLEVBQUU7b0JBQ0wsWUFBWTtvQkFDWixXQUFXO29CQUNYLGlCQUFpQjtvQkFDakIsZUFBZTtvQkFDZixjQUFjO29CQUNkLGtCQUFrQixDQUFDLE9BQU8sRUFBRTtvQkFDNUIsY0FBYyxDQUFDLE9BQU8sRUFBRTtvQkFDeEIsWUFBWSxDQUFDLE9BQU8sRUFBRTtvQkFDdEIsV0FBVyxDQUFDLE9BQU8sRUFBRTtvQkFDckIsWUFBWTtvQkFDWixtQkFBbUI7b0JBQ25CLFlBQVksQ0FBQyxPQUFPLEVBQUU7b0JBQ3RCLDBCQUEwQjtvQkFDMUIscUJBQXFCO2lCQUN4QjtnQkFDRCxlQUFlLEVBQUU7b0JBQ2IseUJBQXlCO29CQUN6QixzQkFBc0I7b0JBQ3RCLGtCQUFrQjtvQkFDbEIsbUJBQW1CO2lCQUN0QjtnQkFDRCxPQUFPLEVBQUU7b0JBQ0wseUJBQXlCO29CQUN6QixzQkFBc0I7b0JBQ3RCLGtCQUFrQjtvQkFDbEIsbUJBQW1CO2lCQUN0QjthQUNKIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNb2RhbE1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xyXG5pbXBvcnQgeyBHUklEX1NFVFRJTkdTX1NFUlZJQ0UsIERhdGFncmlkTW9kdWxlfSBmcm9tICdAZmFycmlzL3VpLWRhdGFncmlkJztcclxuaW1wb3J0IHsgTXVsdGlTZWxlY3RNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW11bHRpLXNlbGVjdCc7XHJcbmltcG9ydCB7IEZhcnJpc0NvbW1vbk1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uJztcclxuaW1wb3J0IHsgTG9jYWxlTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2NhbGUnO1xyXG5pbXBvcnQgeyBNZXNzYWdlck1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5pbXBvcnQgeyBDb21ib0xpc3RNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWNvbWJvLWxpc3QnO1xyXG5pbXBvcnQgeyBTd2l0Y2hNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLXN3aXRjaCc7XHJcbmltcG9ydCB7IEZhcnJpc1Rvb2x0aXBNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLXRvb2x0aXAnO1xyXG5pbXBvcnQgeyBOb3RpZnlNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW5vdGlmeSc7XHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvblNlbGVjdG9yTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1vcmdhbml6YXRpb24tc2VsZWN0b3InO1xyXG5cclxuaW1wb3J0IHsgRGF0YWdyaWRTZXR0aW5nc0NvbXBvbmVudCB9IGZyb20gJy4vZGF0YWdyaWQtc2V0dGluZ3MuY29tcG9uZW50JztcclxuXHJcbmltcG9ydCB7IERhdGFncmlkU2V0dGluZ3NTZXJ2aWNlIH0gZnJvbSAnLi9kYXRhZ3JpZC1zZXR0aW5ncy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRGF0YWdyaWRTb3J0U2V0dGluZ0NvbXBvbmVudCB9IGZyb20gJy4vZGF0YWdyaWQtc29ydC1zZXR0aW5nLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IERhdGFncmlkVmlld0NvbHVtbnNDb21wb25lbnQgfSBmcm9tICcuL2RhdGFncmlkLXZpZXctY29sdW1ucy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDb2x1bW5Gb3JtYXRTZXR0aW5nQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW4tZm9ybWF0LXNldHRpbmcvY29sdW1uLWZvcm1hdC1zZXR0aW5nLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENvbHVtbkdyb3VwU2V0dGluZ0NvbXBvbmVudCB9IGZyb20gJy4vY29sdW1uLWdyb3VwL2NvbHVtbi1ncm91cC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDb2x1bW5WaXNpYmxlRHJhZ0RpcmVjdGl2ZSB9IGZyb20gJy4vY29sdW1uLWZvcm1hdC1zZXR0aW5nL2NvbHVtbi12aXNpYmxlLWRyYWcuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgQ29sdW1uR3JvdXBEcmFnRGlyZWN0aXZlIH0gZnJvbSAnLi9jb2x1bW4tZ3JvdXAvY29sdW1uLWdyb3VwLWRyYWcuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgU2ltcGxlQ29sdW1uc0NvbXBvbmVudCB9IGZyb20gJy4vc2ltcGxlLW1vZGUvc2ltcGxlLWNvbHVtbnMuY29tcG9uZW50JztcclxuaW1wb3J0IHsgTmV3U2NoZW1lQ29tcG9uZW50IH0gZnJvbSAnLi9zY2hlbWUvbmV3c2NoZW1lLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFNjaGVtZUxpc3RDb21wb25lbnQgfSBmcm9tICcuL3NjaGVtZS9zY2hlbWUtbGlzdC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZVRleHRib3hNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWxhbmd1YWdlLXRleHRib3gnO1xyXG5ATmdNb2R1bGUoe1xyXG4gICAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAgICAgRGF0YWdyaWRTZXR0aW5nc0NvbXBvbmVudCxcclxuICAgICAgICBEYXRhZ3JpZFNvcnRTZXR0aW5nQ29tcG9uZW50LFxyXG4gICAgICAgIERhdGFncmlkVmlld0NvbHVtbnNDb21wb25lbnQsXHJcbiAgICAgICAgQ29sdW1uRm9ybWF0U2V0dGluZ0NvbXBvbmVudCxcclxuICAgICAgICBDb2x1bW5Hcm91cFNldHRpbmdDb21wb25lbnQsXHJcbiAgICAgICAgQ29sdW1uVmlzaWJsZURyYWdEaXJlY3RpdmUsXHJcbiAgICAgICAgQ29sdW1uR3JvdXBEcmFnRGlyZWN0aXZlLFxyXG4gICAgICAgIFNpbXBsZUNvbHVtbnNDb21wb25lbnQsXHJcbiAgICAgICAgTmV3U2NoZW1lQ29tcG9uZW50LFxyXG4gICAgICAgIFNjaGVtZUxpc3RDb21wb25lbnRcclxuICAgIF0sXHJcbiAgICBpbXBvcnRzOiBbXHJcbiAgICAgICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgICAgIEZvcm1zTW9kdWxlLFxyXG4gICAgICAgIE11bHRpU2VsZWN0TW9kdWxlLFxyXG4gICAgICAgIENvbWJvTGlzdE1vZHVsZSxcclxuICAgICAgICBEYXRhZ3JpZE1vZHVsZSxcclxuICAgICAgICBGYXJyaXNDb21tb25Nb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgICAgIE1lc3NhZ2VyTW9kdWxlLmZvclJvb3QoKSxcclxuICAgICAgICBMb2NhbGVNb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgICAgIE1vZGFsTW9kdWxlLmZvclJvb3QoKSxcclxuICAgICAgICBTd2l0Y2hNb2R1bGUsXHJcbiAgICAgICAgRmFycmlzVG9vbHRpcE1vZHVsZSxcclxuICAgICAgICBOb3RpZnlNb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgICAgIE9yZ2FuaXphdGlvblNlbGVjdG9yTW9kdWxlLFxyXG4gICAgICAgIExhbmd1YWdlVGV4dGJveE1vZHVsZVxyXG4gICAgXSxcclxuICAgIGVudHJ5Q29tcG9uZW50czogW1xyXG4gICAgICAgIERhdGFncmlkU2V0dGluZ3NDb21wb25lbnQsXHJcbiAgICAgICAgU2ltcGxlQ29sdW1uc0NvbXBvbmVudCxcclxuICAgICAgICBOZXdTY2hlbWVDb21wb25lbnQsXHJcbiAgICAgICAgU2NoZW1lTGlzdENvbXBvbmVudFxyXG4gICAgXSxcclxuICAgIGV4cG9ydHM6IFtcclxuICAgICAgICBEYXRhZ3JpZFNldHRpbmdzQ29tcG9uZW50LFxyXG4gICAgICAgIFNpbXBsZUNvbHVtbnNDb21wb25lbnQsXHJcbiAgICAgICAgTmV3U2NoZW1lQ29tcG9uZW50LFxyXG4gICAgICAgIFNjaGVtZUxpc3RDb21wb25lbnRcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGFncmlkU2V0dGluZ3NNb2R1bGUge1xyXG4gICAgc3RhdGljIGZvclJvb3QoYXBpVXJpID0gJycpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBuZ01vZHVsZTogRGF0YWdyaWRTZXR0aW5nc01vZHVsZSxcclxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IEdSSURfU0VUVElOR1NfU0VSVklDRSwgdXNlQ2xhc3M6IERhdGFncmlkU2V0dGluZ3NTZXJ2aWNlIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuIl19