{"version":3,"sources":["ng://@farris/ui-switch/lib/switch.token.ts","ng://@farris/ui-switch/lib/switch.component.ts","ng://@farris/ui-switch/lib/switch.module.ts"],"names":["SWITCH_OPTIONS","InjectionToken","UI_SWITCH_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","SwitchComponent","multi","prototype","ngOnDestroy","this","_beforeChange","unsubscribe","getColor","flag","defaultBoColor","reverse","checked","switchOffColor","switchColor","defaultBgColor","color","updateChecked","event","isClick","disabled","editable","val","getValue","valueChange","emit","changeEvent","clickHandle","value","instance","onChangeCallback","onTouchedCallback","cdr","detectChanges","onToggle","_this","beforeChange","subscribe","confirm","onSpaceHandle","$event","preventDefault","stopPropagation","trueValue","undefined","falseValue","writeValue","obj","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","Component","args","selector","template","providers","Inject","type","Optional","ChangeDetectorRef","Injector","Input","Output","ViewChild","HostListener","config","injector","size","EventEmitter","v","square","checkedLabel","uncheckedLabel","SwitchModule","forRoot","ngModule","useValue","NgModule","declarations","imports","CommonModule","FormsModule","exports"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport const SWITCH_OPTIONS = new InjectionToken('UI_SWITCH_OPTIONS');\r\n","import {\r\n    ChangeDetectorRef,\r\n    Component,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    HostListener,\r\n    forwardRef,\r\n    Inject,\r\n    Optional,\r\n    ChangeDetectionStrategy,\r\n    Injector,\r\n    OnInit,\r\n    ElementRef,\r\n    ViewChild,\r\n    OnDestroy\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, NgControl } from '@angular/forms';\r\n\r\nimport { SWITCH_OPTIONS } from './switch.token';\r\nimport { SwitchModuleConfig } from './switch.config';\r\nimport { Observable, Subscription } from 'rxjs';\r\n\r\nconst UI_SWITCH_CONTROL_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    /* tslint:disable-next-line: no-use-before-declare */\r\n    useExisting: forwardRef(() => SwitchComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    // tslint:disable-next-line: component-selector\r\n    // bugNum2:462134--'display': 'flex','height':'100%','align-items':'center'\r\n    selector: 'farris-switch',\r\n    template: `\r\n    <div style=\"display:flex;height:100%;align-items:center;\">\r\n        <span #container tabindex=\"0\" role=\"button\" hidefocus=\"true\" class=\"switch f-cmp-switch\"\r\n            [ngClass]=\"{\r\n                checked: checked,\r\n                disabled: disabled || !editable,\r\n                square: square,\r\n                'switch-large': size === 'large',\r\n                'switch-medium': size === 'medium',\r\n                'switch-small': size === 'small'\r\n            }\"\r\n            [ngStyle]=\"{\r\n                'outline': 'none',\r\n                'background-color': getColor(),\r\n                'border-color': getColor('borderColor')\r\n            }\"\r\n        >\r\n            <span class=\"switch-pane\" *ngIf=\"checkedLabel || uncheckedLabel\">\r\n                <span class=\"switch-label-checked\">{{\r\n                    this.checkedLabel\r\n                }}</span>\r\n                <span class=\"switch-label-unchecked\">{{\r\n                    this.uncheckedLabel\r\n                }}</span>\r\n            </span>\r\n            <small [style.background]=\"getColor('switchColor')\">\r\n                <ng-content></ng-content>\r\n            </small>\r\n        </span>\r\n    <div>\r\n    `,\r\n    providers: [UI_SWITCH_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class SwitchComponent implements ControlValueAccessor, OnDestroy {\r\n    private _beforeChange: Subscription;\r\n\r\n    @Input() square: boolean;\r\n    @Input() size: string | 'small' | 'medium' | 'large' = 'medium';\r\n    @Input() color: string;\r\n    @Input() switchOffColor: string;\r\n    @Input() switchColor: string;\r\n    @Input() defaultBgColor: string;\r\n    @Input() defaultBoColor: string;\r\n    @Input() checkedLabel: string;\r\n    @Input() uncheckedLabel: string;\r\n\r\n    @Input() checked: boolean;\r\n    @Input() readonly: boolean;\r\n    @Input() disabled: boolean;\r\n    @Input() editable = true;\r\n    @Input() reverse: boolean;\r\n\r\n    @Input() trueValue: any = true;\r\n    @Input() falseValue: any = false;\r\n\r\n    @Input() beforeChange: Observable<boolean>;\r\n\r\n    /**\r\n     * @deprecated\r\n     */\r\n    @Output() changeEvent = new EventEmitter<any>();\r\n    @Output() clickHandle = new EventEmitter<any>();\r\n\r\n    /**\r\n     * Emits changed value\r\n     */\r\n    @Output() valueChange = new EventEmitter<boolean>();\r\n\r\n    @ViewChild('container') switchElRef: ElementRef<any>;\r\n\r\n    constructor(\r\n        @Inject(SWITCH_OPTIONS) @Optional() public config: SwitchModuleConfig = {},\r\n        private cdr: ChangeDetectorRef,\r\n        public injector: Injector\r\n    ) {\r\n        this.square = (config && config.square) || false;\r\n        this.size = (config && config.size) || this.size;\r\n        this.color = config && config.color;\r\n        this.switchOffColor = config && config.switchOffColor;\r\n        this.switchColor = config && config.switchColor;\r\n        this.defaultBgColor = config && config.defaultBgColor;\r\n        this.defaultBoColor = config && config.defaultBoColor;\r\n        this.checkedLabel = config && config.checkedLabel;\r\n        this.uncheckedLabel = config && config.uncheckedLabel;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this._beforeChange) {\r\n            this._beforeChange.unsubscribe();\r\n        }\r\n    }\r\n\r\n    getColor(flag = '') {\r\n        if (flag === 'borderColor') {\r\n            return this.defaultBoColor;\r\n        }\r\n        if (flag === 'switchColor') {\r\n            if (this.reverse) {\r\n                return !this.checked\r\n                    ? this.switchColor\r\n                    : this.switchOffColor || this.switchColor;\r\n            }\r\n            return this.checked\r\n                ? this.switchColor\r\n                : this.switchOffColor || this.switchColor;\r\n        }\r\n        if (this.reverse) {\r\n            return !this.checked ? this.color : this.defaultBgColor;\r\n        }\r\n        return this.checked ? this.color : this.defaultBgColor;\r\n    }\r\n\r\n    private updateChecked(event: any, isClick = true) {\r\n        if (this.disabled || !this.editable) {\r\n            return;\r\n        }\r\n\r\n\r\n        this.checked = !this.checked;\r\n        const val = this.getValue(this.checked);\r\n        // Component events\r\n        this.valueChange.emit(val);\r\n        this.changeEvent.emit(event);\r\n        if (isClick) {\r\n            this.clickHandle.emit({ event, checked: this.checked, value: val, instance: this });\r\n        }\r\n\r\n        this.onChangeCallback(val);\r\n        this.onTouchedCallback(val);\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onToggle(event: MouseEvent) {\r\n\r\n        if (this.beforeChange) {\r\n            this._beforeChange = this.beforeChange.subscribe((confirm: boolean) => {\r\n                if (confirm) {\r\n                    this.updateChecked(event);\r\n                }\r\n            });\r\n        } else {\r\n            this.updateChecked(event);\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown.Space', ['$event'])\r\n    onSpaceHandle($event: any) {\r\n        $event.preventDefault();\r\n        $event.stopPropagation();\r\n        this.updateChecked($event, false);\r\n    }\r\n\r\n    private getValue(checked: boolean) {\r\n        if (this.trueValue !== undefined && this.falseValue !== undefined) {\r\n            return checked ? this.trueValue : this.falseValue;\r\n        }\r\n        return checked;\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        if (this.trueValue !== undefined && this.falseValue !== undefined) {\r\n            this.checked = obj == this.trueValue;\r\n        } else {\r\n            if (obj !== this.checked) {\r\n                this.checked = !!obj;\r\n            }\r\n        }\r\n\r\n        if (this.cdr && !this.cdr['destroyed']) {\r\n            this.cdr.detectChanges();\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any) {\r\n        this.onChangeCallback = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any) {\r\n        this.onTouchedCallback = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean) {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    private onTouchedCallback = (v: any) => { };\r\n    private onChangeCallback = (v: any) => { };\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { SwitchComponent } from './switch.component';\r\nimport { SWITCH_OPTIONS } from './switch.token';\r\nimport { SwitchModuleConfig } from './switch.config';\r\n\r\n@NgModule({\r\n    declarations: [SwitchComponent],\r\n    imports: [CommonModule, FormsModule],\r\n    exports: [FormsModule, SwitchComponent]\r\n})\r\nexport class SwitchModule {\r\n    static forRoot(config?: SwitchModuleConfig | null | undefined): ModuleWithProviders {\r\n        return {\r\n            ngModule: SwitchModule,\r\n            providers: [{ provide: SWITCH_OPTIONS, useValue: config || {} }]\r\n        };\r\n    }\r\n}\r\n"]}