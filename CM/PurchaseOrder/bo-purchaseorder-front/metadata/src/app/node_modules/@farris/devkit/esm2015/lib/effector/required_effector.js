import { Inject, Injectable, Injector } from '@angular/core';
import { FrameContext, NAMESPACE } from "../frame/index";
import { TranslateToken } from '../i18n';
import { Repository } from '../repository/index';
/**
 * 必填副作用器
 * @description 当结算结果为true时设置必填校验，否则删除必填校验
 */
export class RequiredEffector {
    constructor(injector, repository, namespace, frameContext) {
        this.injector = injector;
        this.repository = repository;
        this.namespace = namespace;
        this.frameContext = frameContext;
        this.ns = namespace;
    }
    effect(path, value, options) {
        // 校验不通过时返回false
        const domInfo = this.getDomInfoByEntityPath(path);
        if (!domInfo) {
            return;
        }
        const frameContext = domInfo.frameContext;
        const rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();
        const rootViewModel = rootFrameContext.viewModel;
        const domPropertyName = domInfo.domPropertyName;
        const pathValue = this.frameContext.bindingData.getValue(path.split('/').filter(p => p));
        const expressionId = options.expressionId;
        if (expressionId) {
            // 增加校验规则
            frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, "require" /* Require */);
        }
        if (value === true) {
            if (options.message) {
                // 更新form错误信息
                // 不是grid，则认为是卡片
                if (!domInfo.isGridComponent) {
                    const message = options.message.replace(/\$property/g, domInfo.propertyName);
                    const formErrors = this.buildFormErrors(domPropertyName, message);
                    const isValidValue = this.isValidValue(path, pathValue);
                    if (!isValidValue) {
                        frameContext.form.updateFormErrors(formErrors);
                    }
                }
                else {
                    this.updateColumnValidators(frameContext, domInfo.binding, domInfo.datagridColumns, true);
                }
            }
        }
        else {
            // 返回非true值时认为非必填
            if (domInfo.isGridComponent) {
                this.updateColumnValidators(frameContext, domInfo.binding, domInfo.datagridColumns, false);
            }
            else {
                const currentErrors = frameContext.form.getFormControlErrors(domPropertyName) || null;
                if (currentErrors) {
                    if (currentErrors.hasOwnProperty('require')) {
                        // require合法，移除require校验提示
                        delete currentErrors.require;
                    }
                    frameContext.form.updateFormErrors({ [domPropertyName]: { errors: currentErrors } });
                }
                else {
                    const formErrors = this.buildFormErrors(domPropertyName, null);
                    frameContext.form.updateFormErrors(formErrors);
                }
            }
        }
    }
    updateColumnValidators(frameContext, field, datagridColumns, isRequired) {
        const frameId = frameContext.frameId;
        const componentRefs = frameContext.appContext.componentManager.get([frameId]);
        if (componentRefs && componentRefs.size > 0) {
            const datagrid = Array.from(componentRefs.values())[0];
            if (datagrid && typeof datagrid.updateColumn === 'function') {
                const columns = datagridColumns.find((array) => {
                    return array.find(item => item.field === field);
                });
                const column = columns && columns.find(item => item.field === field) || null;
                if (column) {
                    const validators = column.validators || [];
                    const index = validators.findIndex(item => item.type === 'required');
                    if (isRequired) {
                        if (index === -1) {
                            validators.push({ "type": "required", "message": "该字段不能为空！" });
                        }
                    }
                    else {
                        if (index !== -1) {
                            validators.splice(index, 1);
                        }
                    }
                    datagrid.updateColumn(field, { validators: [...validators] });
                    datagrid.columnsChanged(false);
                }
            }
        }
    }
    getDomInfoByEntityPath(entityPath) {
        let result = null;
        if (!entityPath) {
            return result;
        }
        entityPath = entityPath.split('/').filter(p => p).join('.');
        const frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || null;
        if (frameContexts && frameContexts.length > 0) {
            for (const frameContext of frameContexts) {
                if (result) {
                    break;
                }
                if (frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0) {
                    const keys = Object.keys(frameContext.form.ngFormControls);
                    for (const propertyName of keys) {
                        const ngFormControl = frameContext.form.ngFormControls[propertyName];
                        let bindingPath = frameContext.viewModel.bindingPath || '/';
                        const bindingPaths = bindingPath.split('/').filter(p => p);
                        let bindings = ngFormControl.binding.split('.');
                        bindings = bindingPaths.concat(bindings);
                        if (entityPath === bindings.join('.')) {
                            // 判断对应的组件是什么类型
                            const dgColumnNames = frameContext.viewModel['dataGridColumnsName'] || null;
                            const dgColumnInfo = frameContext.viewModel[dgColumnNames] || null;
                            if (dgColumnInfo && Array.isArray(dgColumnInfo) && dgColumnInfo.length > 0) {
                                const isEditableGrid = dgColumnInfo.find((array) => {
                                    const readonlyGroup = array.every((column) => !(column.hasOwnProperty('editor') && column.editor));
                                    if (!readonlyGroup) {
                                        return true;
                                    }
                                    else {
                                        return false;
                                    }
                                });
                                if (!isEditableGrid) {
                                    continue;
                                }
                            }
                            let isGridComponent = false;
                            if (dgColumnNames) {
                                isGridComponent = true;
                            }
                            result = {
                                domPropertyName: propertyName,
                                propertyName: ngFormControl.name || ngFormControl.defaultI18nValue,
                                frameContext,
                                id: ngFormControl.id,
                                isGridComponent,
                                binding: ngFormControl.binding,
                                datagridColumns: dgColumnInfo
                            };
                            break;
                        }
                    }
                }
            }
        }
        return result;
    }
    getDataPropInfo(path) {
        if (!path) {
            return null;
        }
        const paths = path.split('/').filter(p => p);
        return this.frameContext.repository.entityTypeInfo.getPropInfoByPath(paths);
    }
    isValidValue(path, value) {
        const dataTypeInfo = this.getDataPropInfo(path);
        if (dataTypeInfo && dataTypeInfo.metadataInfo && dataTypeInfo.metadataInfo.enableMultiLangInput === true) {
            // 多语字段
            const translate = this.injector.get(TranslateToken, null);
            const currentLanguage = translate && translate.getCurrentLanguage() || 'zh-CHS';
            if (Object.keys(value).length < 1) {
                return false;
            }
            return !!value[currentLanguage];
        }
        else if (value === null || value === '' || value === undefined) {
            return false;
        }
        return true;
    }
    buildFormErrors(domPropertyName, message) {
        if (message) {
            return {
                [domPropertyName]: {
                    errors: {
                        'require': {
                            name: message
                        }
                    }
                }
            };
        }
        else {
            return {
                [domPropertyName]: {
                    errors: {}
                }
            };
        }
    }
}
RequiredEffector.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RequiredEffector.ctorParameters = () => [
    { type: Injector },
    { type: Repository },
    { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] },
    { type: FrameContext }
];
//# sourceMappingURL=data:application/json;base64,