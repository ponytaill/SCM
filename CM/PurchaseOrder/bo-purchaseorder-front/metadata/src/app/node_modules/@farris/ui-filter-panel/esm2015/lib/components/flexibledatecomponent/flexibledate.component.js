/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ViewChild } from '@angular/core';
import { FarrisDatepickerComponent } from '@farris/ui-datepicker';
import { LocaleService } from '@farris/ui-locale';
import { getLastNumMonth, getToday } from '../daterangecomponent/utils';
export class PanelFlexibleDateComponent {
    /**
     * @param {?} localeService
     */
    constructor(localeService) {
        this.localeService = localeService;
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.canNull = true;
        this.date = new Date();
        this.dateTags = [];
        this.dayTags = [];
    }
    /**
     * @param {?} nr
     * @return {?}
     */
    set item(nr) {
        this._item = nr;
        if (this._item) {
            if (!this._item.hasOwnProperty('value')) {
                this._item.value = {
                    startValue: null,
                    endValue: null,
                    value: null,
                    single: true
                };
            }
            if (!this._item.control.hasOwnProperty('single')) {
                this._item.control.single = true;
            }
            this.beginPlaceHolder = (this._item.hasOwnProperty('beginPlaceHolder') && this._item.beginPlaceHolder) ? this._item.beginPlaceHolder : this.localeService.getValue('filterPanel.dateBeginPlaceHolder');
            this.endPlaceHolder = (this._item.hasOwnProperty('endPlaceHolder') && this._item.beginPlaceHolder) ? this._item.endPlaceHolder : this.localeService.getValue('filterPanel.dateEndPlaceHolder');
            this.placeholder = (this._item.hasOwnProperty('placeHolder') && this._item.placeHolder) ? this._item.placeHolder : '';
            this.single = this._item.control.single;
            this.showTime = (this._item.control.hasOwnProperty('showTime') && this._item.control.showTime) ? this._item.control.showTime : '';
            this.showType = (this._item.control.hasOwnProperty('showType') && this._item.control.showType) ? this._item.control.showType : '';
            /** @type {?} */
            let itemDateFormat = this._item.control.format;
            if (this.showTime && itemDateFormat) {
                if (itemDateFormat.length > 0 && itemDateFormat.indexOf('HH:mm') == -1) {
                    itemDateFormat = itemDateFormat + ' HH:mm:ss';
                }
            }
            /** @type {?} */
            const format = this.showTime ? 'yyyy-MM-dd HH:mm:ss' : (this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd'));
            this.dateFormat = itemDateFormat ? itemDateFormat : format;
        }
        this.activedDateTagId = '';
        this.activedDayTagId = '';
        this.constructMultiFieldDateRange(nr.value);
        this.dateSubmitChange();
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dateTags = [
            {
                id: 'tag1',
                text: this.localeService.getValue('filterPanel.last1Month')
            },
            {
                id: 'tag2',
                text: this.localeService.getValue('filterPanel.last3Month')
            },
            {
                id: 'tag3',
                text: this.localeService.getValue('filterPanel.last6Month')
            }
        ];
        this.dayTags = [
            {
                id: 'yesterday',
                text: this.localeService.getValue('filterPanel.yesterday')
            },
            {
                id: 'today',
                text: this.localeService.getValue('filterPanel.today')
            }
        ];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    constructMultiFieldDateRange(value) {
        if (this.single) {
            this.value = value.value == null ? null : value.value;
        }
        else {
            this.startValue = value.startValue == null ? null : value.startValue;
            this.endValue = value.endValue == null ? null : value.endValue;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateChange(event) {
        this._item.value.value = event.returnFormatted ? event.returnFormatted : null;
        this._item.valueText = event.formatted;
        this.activedDateTagId = '';
        this.activedDayTagId = '';
        this.searchHandle.emit(event);
        this.dateSubmitChange();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    beginValueChange(event) {
        this._item.value.startValue = event.returnFormatted ? event.returnFormatted : null;
        this._item.value.startValueText = event.formatted;
        this.activedDateTagId = '';
        this.activedDayTagId = '';
        this.setValueText();
        this.dateSubmitChange();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    endValueChange(event) {
        this._item.value.endValue = event.returnFormatted ? event.returnFormatted : null;
        this._item.value.endValueText = event.formatted;
        this.activedDateTagId = '';
        this.activedDayTagId = '';
        this.setValueText();
        this.dateSubmitChange();
    }
    /**
     * @return {?}
     */
    setValueText() {
        if (Object.keys(this._item.value).length === 0 || (!this._item.value.startValue && !this._item.value.endValue)) {
            this._item.valueText = '';
        }
        else if (!this._item.value.startValueText) {
            this._item.valueText = '~' + this._item.value.endValueText;
        }
        else if (!this._item.value.endValueText) {
            this._item.valueText = this._item.value.startValueText + '~';
        }
        else {
            this._item.valueText = this._item.value.startValueText + '~' + this._item.value.endValueText;
        }
    }
    /**
     * @return {?}
     */
    dateSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (this.single) {
            if (Object.keys(val).length < 0 || !val.value) {
                this.submitChange.emit(false);
            }
            else {
                this.submitChange.emit(true);
            }
        }
        else {
            if (Object.keys(val).length === 0 || (!val.startValue && !val.endValue)) {
                this.submitChange.emit(false);
            }
            else {
                this.submitChange.emit(true);
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChange(event) {
        this.single = !event;
        this._item.control.single = this.single;
        this._item.value.single = this.single;
        this.dateSubmitChange();
    }
    /**
     * @param {?} tag
     * @return {?}
     */
    clickTag(tag) {
        this.activedDateTagId = tag.id;
        /** @type {?} */
        let tagDate;
        if (tag.id == 'tag1') {
            tagDate = getLastNumMonth(1, this.showTime, this.showType);
        }
        else if (tag.id == 'tag2') {
            tagDate = getLastNumMonth(3, this.showTime, this.showType);
        }
        else if (tag.id == 'tag3') {
            tagDate = getLastNumMonth(6, this.showTime, this.showType);
        }
        this._item.value.startValue = tagDate['startTime'];
        this._item.value.endValue = tagDate['endTime'];
        this._item.value.startValueText = this.datepickerEle.dateTo(new Date(this._item.value.startValue));
        this._item.value.endValueText = this.datepickerEle.dateTo(new Date(this._item.value.endValue));
        this.startValue = this._item.value.startValue;
        this.endValue = this._item.value.endValue;
        this.setValueText();
        this.dateSubmitChange();
    }
    /**
     * @param {?} tag
     * @return {?}
     */
    clickDayTag(tag) {
        this.activedDayTagId = tag.id;
        /** @type {?} */
        let dayTag = getToday(this.activedDayTagId, this.showTime);
        this._item.value.value = dayTag;
        this.value = this._item.value.value;
        this._item.valueText = this.datepickerEle.dateTo(new Date(this._item.value.value));
        this.dateSubmitChange();
    }
}
PanelFlexibleDateComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-flexibledate',
                template: "<div class=\"f-panel-filter-tip\">\r\n    <span class=\"panel-filter-tip-text\">{{ 'filterPanel.intervalFilter' | locale }}</span>\r\n    <farris-switch size=\"small\" [checked]=\"!single\" (valueChange)=\"onChange($event)\"></farris-switch>\r\n</div>\r\n<div class=\"f-panel-filter-content\">\r\n    <ng-container *ngIf=\"single; else elseTemplate\">\r\n        <ng-container *ngIf=\"showTime;else singleDefaultdate\">\r\n            <farris-datepicker [(ngModel)]=\"value\" [editable]=\"false\" [returnFormat]=\"'yyyy-MM-dd HH:mm:ss'\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [placeholder]=\"placeholder\" [showTime]=\"showTime\" #datepicker></farris-datepicker>\r\n        </ng-container>\r\n        <ng-template #singleDefaultdate>\r\n            <farris-datepicker [(ngModel)]=\"value\" [editable]=\"false\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [placeholder]=\"placeholder\" [showType]=\"showType\" #datepicker></farris-datepicker>\r\n        </ng-template>\r\n    </ng-container>\r\n    <ng-template #elseTemplate>\r\n        <div class=\"d-flex panel-flexible-range-wrapper\">\r\n            <ng-container *ngIf=\"showTime;else startDefaultdate\">\r\n                <farris-datepicker [(ngModel)]=\"startValue\" [editable]=\"false\" [returnFormat]=\"'yyyy-MM-dd HH:mm:ss'\" [dateFormat]=\"dateFormat\" (valueChange)=\"beginValueChange($event)\" [placeholder]=\"beginPlaceHolder\" [showTime]=\"showTime\" [maxDate]=\"endValue\" #datepicker></farris-datepicker>\r\n            </ng-container>\r\n            <ng-template #startDefaultdate>\r\n                <farris-datepicker [(ngModel)]=\"startValue\" [editable]=\"false\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [dateFormat]=\"dateFormat\" (valueChange)=\"beginValueChange($event)\" [placeholder]=\"beginPlaceHolder\" [showType]=\"showType\" [maxDate]=\"endValue\" #datepicker></farris-datepicker>\r\n            </ng-template>\r\n            <span class=\"f-icon f-icon-orientation-arrow\"></span>\r\n            <ng-container *ngIf=\"showTime;else endDefaultdate\">\r\n                <farris-datepicker [(ngModel)]=\"endValue\" [editable]=\"false\" [returnFormat]=\"'yyyy-MM-dd HH:mm:ss'\" [dateFormat]=\"dateFormat\" (valueChange)=\"endValueChange($event)\" [placeholder]=\"endPlaceHolder\" [showTime]=\"showTime\" [minDate]=\"startValue\" #datepicker></farris-datepicker>\r\n            </ng-container>\r\n            <ng-template #endDefaultdate>\r\n                <farris-datepicker [(ngModel)]=\"endValue\" [editable]=\"false\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [dateFormat]=\"dateFormat\" (valueChange)=\"endValueChange($event)\" [placeholder]=\"endPlaceHolder\" [showType]=\"showType\" [minDate]=\"startValue\" #datepicker></farris-datepicker>\r\n            </ng-template>\r\n        </div>\r\n    </ng-template>\r\n\r\n</div>\r\n<div class=\"f-filter-panel-date-tags\" *ngIf=\"!single && showType !== '3'\">\r\n    <div class=\"panel-date-tag\" \r\n    *ngFor=\"let tag of dateTags\" \r\n    (click)=\"clickTag(tag)\"\r\n    [ngClass]=\"{'active': tag.id == activedDateTagId}\"\r\n    >\r\n        {{tag.text}}\r\n    </div>\r\n</div>\r\n\r\n<div class=\"f-filter-panel-date-tags\" *ngIf=\"single && showType !== '3' && showType !== '2'\">\r\n    <div class=\"panel-date-tag\" \r\n    *ngFor=\"let day of dayTags\" \r\n    (click)=\"clickDayTag(day)\"\r\n    [ngClass]=\"{'active': day.id == activedDayTagId}\"\r\n    >\r\n        {{day.text}}\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
PanelFlexibleDateComponent.ctorParameters = () => [
    { type: LocaleService }
];
PanelFlexibleDateComponent.propDecorators = {
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    submitChange: [{ type: Output, args: ['submitChange',] }],
    datepickerEle: [{ type: ViewChild, args: ['datepicker',] }],
    item: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.searchHandle;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.submitChange;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.datepickerEle;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.canNull;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.placeholder;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.beginPlaceHolder;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.endPlaceHolder;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.single;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.showTime;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.showType;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.dateFormat;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.value;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.startValue;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.endValue;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.date;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.dateTags;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.dayTags;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.activedDateTagId;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype.activedDayTagId;
    /** @type {?} */
    PanelFlexibleDateComponent.prototype._item;
    /**
     * @type {?}
     * @private
     */
    PanelFlexibleDateComponent.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,