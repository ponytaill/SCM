// tslint:disable: max-line-length member-ordering
/**
 * 绑定数据相关定义
 * @author Witt<jiwt@inspur.com>
 * @todo
 * 1、全局的BindingData和局部的BindingData应该拆成两个类，两个类之间是装饰关系；；
 * 2、为了保持兼容，减少改动量，暂时放在一起，待进一步重构。
 */
import { ChangeType } from './changes';
import { BindingList } from './binding_list';
import { BindingListFactory } from './binding_list_factory';
import { PropertyUtil } from './property_util';
import { EntityUtil } from './entity_util';
/**
 * BindingData
 */
class BindingData {
    constructor() {
        this.paginationInfo = null;
    }
    /**
     * 绑定该路径
     */
    get bindingPath() {
        if (this.viewModelContext && this.viewModelContext.viewModel.bindingPath) {
            return this.viewModelContext.viewModel.bindingPath;
        }
        return '/';
    }
    set pagingInfo(pagingInfo) {
        this.paginationInfo = pagingInfo;
        this.firePagingChangeEvent();
    }
    get pagingInfo() {
        return this.paginationInfo;
    }
    /**
     * 设置分页信息
     * @param skip 跳过
     * @param take 获取
     * @param bindingPath 路径
     */
    setPagingInfo(skip, take, bindingPath) {
        if (bindingPath.length < 1 || bindingPath === '/') {
            this.paginationInfo = Object.assign(this.paginationInfo, { pageSize: take, pageIndex: skip / take + 1 });
        }
        else {
            let pagingInfo = this.paginationInfo || {};
            const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0).map(item => item.substring(0, item.length - 1));
            bindingPaths.forEach(path => {
                if (!pagingInfo.hasOwnProperty(path)) {
                    pagingInfo[path] = {};
                }
                pagingInfo = pagingInfo[path];
            });
            pagingInfo.pageIndex = ((skip / take) || 0) + 1;
            pagingInfo.pageSize = take || 0;
        }
        this.firePagingChangeEvent();
    }
    firePagingChangeEvent() {
        this.list.changes.next({
            type: ChangeType.PaginationInfoChange,
            path: [],
            value: this.paginationInfo
        });
    }
    /**
     * 变更集
     */
    get changes() {
        return this.list.changes;
    }
    /**
     * 设置值变化执行器工厂
     * @param value 值变化执行器工厂
     */
    setValueChangeInvokerFactory(value) {
        this.valueChangeInvokerFactory = value;
    }
    /**
     * 初始化（已废弃）
     */
    init(repository, bindingPath) {
        this.initByRepository(repository, null);
    }
    /**
     * 根据Repository对BindingData进行初始化
     */
    initByRepository(repository, viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.properties = PropertyUtil.getProperties(repository.entityType);
        this.list = BindingListFactory.create(this.properties);
        // 从repository初始化bindingData
        this.pagingInfo = repository.entityCollection.paginationInfo;
        // @todo
        // BindingData不应该知道Repository，加载数据、建立关联关系的过程应该转移到外边
        EntityUtil.loadRepository(repository, this.list);
        this.dataTypeInfo = repository.entityTypeInfo;
        this.extendProperties(this.properties);
    }
    /**
     * 初始化
     */
    initByBindingList(bindingList, viewModelContext) {
        this.list = bindingList;
        this.viewModelContext = viewModelContext;
        this.extendProperties(this.list.properties);
    }
    /**
     * 获取paths对应的属性值
     * @param  paths 属性路径数组
     * @returns 属性值
     */
    getValue(paths) {
        let target = this.list;
        paths.forEach((path) => {
            if (target) {
                target = target[path];
            }
        });
        return target;
    }
    /**
     * 根据paths设置属性值
     * @param paths 属性路径数组
     * @param value 属性值
     * @param emitEventToView 如果设置为true，则发送事件通知订阅它的组件、指令去更新界面，默认为false。
     * @param emitEventToEntity 如果设置为true，则同步去更新Entity上对应的字段，默认为true。
     */
    setValue(paths, value, emitEventToView = false, emitEventToEntity = true) {
        if (!paths || paths.length === 0) {
            throw Error('路径不能为空');
        }
        const parentPaths = paths.slice(0, paths.length - 1);
        const propName = paths[paths.length - 1];
        let parent = this.getValue(parentPaths);
        if (!parent) {
            throw Error('找不到要设置的对象');
        }
        if (parent instanceof BindingData) {
            parent = parent.list.currentItem;
        }
        else if (parent instanceof BindingList) {
            parent = parent.currentItem;
        }
        if (!!this.valueChangeInvokerFactory) {
            parent.setValue(propName, value, emitEventToView, emitEventToEntity, null, this.valueChangeInvokerFactory(paths));
        }
        else {
            parent.setValue(propName, value, emitEventToView, emitEventToEntity);
        }
    }
    /**
     * 根据paths清空属性值
     */
    clearValue(paths, emitEventToView = false, emitEventToEntity = true) {
        let initValue;
        const propInfo = this.dataTypeInfo.getPropInfoByPath(paths);
        if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.initValue !== undefined) {
            initValue = propInfo.metadataInfo.initValue;
        }
        else {
            // 原来的帮助映射中，强行纠正了数值的情况，保持一致
            const oldValue = this.getValue(paths);
            if (typeof oldValue === 'number') {
                initValue = 0;
            }
            else {
                initValue = '';
            }
        }
        this.setValue(paths, initValue, emitEventToView, emitEventToEntity);
    }
    /**
     * 获取当前列表
     */
    getList() {
        if (!this.bindingPath || this.bindingPath === '/') {
            return this.list;
        }
        const bindingPath = this.bindingPath.substr(1);
        const bindingPathArray = bindingPath.split('/').filter((part) => {
            return part !== '';
        });
        return this.getValue(bindingPathArray);
    }
    /**
     * 获取当前对象
     */
    getObject() {
        const bindingList = this.getList();
        return bindingList.currentItem;
    }
    /**
     * 扩展BindingData属性，映射BindingData所持有的绑定列表当前行的属性，减少绑定层级。
     * @param properties 关联实体的属性集合
     */
    extendProperties(properties) {
        properties.forEach((property) => {
            const propName = property.name;
            Object.defineProperty(this, propName, {
                get: () => {
                    return this.list.currentItem[propName];
                },
                set: (value) => {
                    this.list.currentItem[propName] = value;
                }
            });
        });
    }
}
export { BindingData };
//# sourceMappingURL=data:application/json;base64,