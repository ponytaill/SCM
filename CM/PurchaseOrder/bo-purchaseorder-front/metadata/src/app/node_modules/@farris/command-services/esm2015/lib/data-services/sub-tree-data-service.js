import { Injectable, Optional } from '@angular/core';
import { EMPTY } from 'rxjs';
import { tap, concatMap } from 'rxjs/operators';
import { FrameContext, ViewModel } from '@farris/devkit';
import { BaseDataService } from './base-data.service';
import { FormMessageService } from '../form-message.service';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { FormErrorService } from '../error/form-error.service';
import { FormNotifyService } from '../form-notify.service';
import { LanguageService } from '../languag.service';
import { TreeRepositoryFactory } from './tree-table/repository/tree-repository-factory';
import { TreeUtilFactory } from './tree-table/util/tree-util-factory';
/**
 * 树数据服务
 */
class SubTreeDataService extends BaseDataService {
    /**
     * 构造函数
     */
    constructor(frameContext, viewModel, messageService, loadingService, errorService, formNotifyService, languageService) {
        super(frameContext);
        this.viewModel = viewModel;
        this.messageService = messageService;
        this.loadingService = loadingService;
        this.errorService = errorService;
        this.formNotifyService = formNotifyService;
        this.languageService = languageService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 分级码信息
     */
    get hierarchyInfoKey() {
        return this.virtualRootFrameContext.getParam('hierarchyInfoKey');
    }
    get hierarchyInfoField() {
        return this.hierarchyInfoKey.split('/').filter(p => p).pop();
    }
    get virtualRootFrameContext() {
        return this.frameContext.getVirtualRootFrameContext();
    }
    get messagePipe() {
        if (this.viewModel && this.viewModel.frameContext) {
            const appContext = this.viewModel.frameContext.getFormAppContext() || null;
            if (appContext) {
                return appContext.messagePipe || null;
            }
        }
        return null;
    }
    /**
     * 新增子表同级
     */
    addSubSibling() {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'addSubSibling' });
        }
        let params = this.getParams();
        // 获取分级方式
        const hierarchyType = this.getHierarchyType();
        // 执行取数
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (!repository) {
            // 错误的分级码
            throw new Error(this.languageService['errorHierarchyKey']);
        }
        const result$ = repository.addSubSibling(this.repository, params.nodeCodes, params.ids);
        return result$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.errorService.exception(this.languageService.addSubSiblingFailed, error);
        }));
    }
    /**
     * 新增下级
     */
    addSubChild() {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'addSubChild' });
        }
        let params = this.getParams();
        // 获取分级方式
        const hierarchyType = this.getHierarchyType();
        const currentList = this.frameContext && this.frameContext.bindingData && this.frameContext.bindingData.getList();
        if (!currentList['currentId']) {
            // 请选择父节点
            this.formNotifyService.warning(this.languageService['plsSelectParentNode'], { hideTitle: true });
            return EMPTY;
        }
        // 执行取数
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (!repository) {
            throw new Error(this.languageService['errorHierarchyKey']);
        }
        const addSubChild$ = repository.addSubChild(this.repository, params.nodeCodes, params.ids);
        const result$ = addSubChild$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.addSubChildFailed, error);
        }));
        return result$;
    }
    /**
     * 删除子表树节点
     * @param id id
     */
    remove(id, successMsg) {
        // 参数检查
        if (!id) {
            this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return EMPTY;
        }
        // 获取分级方式
        const hierarchyType = this.getHierarchyType();
        // 有子节点时不允许删除
        const treeNodesData = this.frameContext.bindingData.getList().toJSON();
        const bindingList = this.frameContext.bindingData.getList();
        const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
        if (treeNodeUtil === null) {
            return EMPTY;
        }
        if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoField, id) === true) {
            this.messageService.warning(this.languageService['deleteChildFirst']);
            return EMPTY;
        }
        // 确认删除
        const action$ = this.messageService.question(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(result => {
            if (!result) {
                return EMPTY;
            }
            // 获取删除后要设置的节点id
            const nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoField, id);
            // 执行删除
            const loadingTimerId = this.loadingService.show();
            const path = this.getPath();
            const remove$ = this.frameContext.repository.removeByPath(path, id);
            return remove$.pipe(tap(() => {
                // 设置选中节点
                treeNodeUtil.selectNodeByBindingList(bindingList, this.hierarchyInfoField, nextNodeId);
                this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    this.formNotifyService.success(successMsg, { hideTitle: true });
                }
                else {
                    this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, error => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                this.errorService.exception(this.languageService.deleteFailed, error);
            }));
        }));
    }
    getHierarchyType() {
        const propInfo = this.repository.entityTypeInfo.getPropInfoByPath(this.hierarchyInfoKey.split('/'));
        let hierarchyType = propInfo.metadataInfo['hierarchyType'] || null;
        if (hierarchyType == null || hierarchyType.length < 1) {
            // '分级码配置信息错误'
            throw new Error(this.languageService['incorrectHierarchyConfig']);
        }
        return hierarchyType;
    }
    /**
     * 获取参数
     * /parentId/childCodes/childId/grandsonCodes
     * [childCodes, grandsonCodes]
     * [parntId, childId]
     */
    getParams() {
        let nodeCodes = this.viewModel.bindingPath.substr(1).split('/');
        let ids = [];
        let nodeCodeArray = [];
        const rid = this.viewModel.bindingData.list.currentId; // root表数据id
        ids.push(rid);
        let subData = this.viewModel.bindingData;
        if (nodeCodes.length > 0) {
            nodeCodes.map(nodeCode => {
                subData = subData[nodeCode];
                if (subData && subData.currentId) {
                    ids.push(subData.currentId);
                }
                //去除nodeCode的s
                nodeCode ? nodeCodeArray.push(nodeCode.substring(0, nodeCode.length - 1)) : nodeCodeArray.push(nodeCode);
            });
        }
        return { nodeCodes: nodeCodeArray, ids: ids };
    }
    /**
     * 获取完整路径
     * fixed by justin: 根据bindingPath，如果是从从表，需要获取主表数据id和从表数据id
     */
    getPath() {
        const bindingPath = this.viewModel.bindingPath;
        const rid = this.viewModel.bindingData.list.currentId; // root表数据id
        let path = '/' + rid;
        const subPaths = bindingPath.split('/').filter(p => p);
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['edus', 'grades']
            let subData = this.viewModel.bindingData;
            for (let index = 1; index < subPaths.length - 1; index++) {
                const subPath = subPaths[index];
                subData = subData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);
                }
                path += `/${subPath}/${subData.currentId}`;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    }
}
SubTreeDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SubTreeDataService.ctorParameters = () => [
    { type: FrameContext },
    { type: ViewModel },
    { type: FormMessageService },
    { type: FormLoadingService },
    { type: FormErrorService },
    { type: FormNotifyService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
export { SubTreeDataService };
//# sourceMappingURL=data:application/json;base64,