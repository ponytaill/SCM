import * as tslib_1 from "tslib";
import { DataChangeType } from '../core';
var DataChangeHistory = /** @class */ (function () {
    function DataChangeHistory() {
        this.history = [];
    }
    DataChangeHistory.prototype.addChange = function (dataChange) {
        var changeType = DataChangeType[dataChange.changeType];
        this["on" + changeType + "Data"](dataChange);
    };
    DataChangeHistory.prototype.addChanges = function (dataChange) {
        var _this = this;
        dataChange.forEach(function (change) { return _this.addChange(change); });
    };
    DataChangeHistory.prototype.clear = function () {
        this.history.splice(0, this.history.length);
    };
    DataChangeHistory.prototype.clearByIds = function (ids) {
        this.history = this.history.filter(function (item) {
            var e_1, _a;
            if (item.fpath && item.fpath !== '/' && item.fpath.includes('/')) {
                try {
                    for (var ids_1 = tslib_1.__values(ids), ids_1_1 = ids_1.next(); !ids_1_1.done; ids_1_1 = ids_1.next()) {
                        var id = ids_1_1.value;
                        var include = item.fpath.split('/').includes(id);
                        return !include;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (ids_1_1 && !ids_1_1.done && (_a = ids_1.return)) _a.call(ids_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            else {
                return !ids.includes(item.dataId);
            }
        });
    };
    DataChangeHistory.prototype.isChanged = function () {
        return this.history.length > 0;
    };
    DataChangeHistory.prototype.onAddData = function (dataChange) {
        this.history.push(dataChange);
    };
    DataChangeHistory.prototype.onDeleteData = function (dataChange) {
        var index = this.history.findIndex(function (item) { return item.dataId === dataChange.dataId && item.changeType === DataChangeType.Add; });
        if (index >= 0) {
            this.history.splice(index, 1);
        }
        else {
            this.history.push(dataChange);
        }
    };
    return DataChangeHistory;
}());
export { DataChangeHistory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YV9jaGFuZ2VfaGlzdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9yZXBvc2l0b3J5L2RhdGFfY2hhbmdlX2hpc3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBYyxjQUFjLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFckQ7SUFFSTtRQUNJLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFDTSxxQ0FBUyxHQUFoQixVQUFpQixVQUFzQjtRQUNuQyxJQUFNLFVBQVUsR0FBRyxjQUFjLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxPQUFLLFVBQVUsU0FBTSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUNNLHNDQUFVLEdBQWpCLFVBQWtCLFVBQXdCO1FBQTFDLGlCQUVDO1FBREcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLEtBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQXRCLENBQXNCLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBQ00saUNBQUssR0FBWjtRQUNJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFDTSxzQ0FBVSxHQUFqQixVQUFrQixHQUFhO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQSxJQUFJOztZQUNuQyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7O29CQUM5RCxLQUFpQixJQUFBLFFBQUEsaUJBQUEsR0FBRyxDQUFBLHdCQUFBLHlDQUFFO3dCQUFqQixJQUFNLEVBQUUsZ0JBQUE7d0JBQ1QsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO3dCQUNuRCxPQUFPLENBQUMsT0FBTyxDQUFDO3FCQUNuQjs7Ozs7Ozs7O2FBQ0o7aUJBQU07Z0JBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3JDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ00scUNBQVMsR0FBaEI7UUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBQ08scUNBQVMsR0FBakIsVUFBa0IsVUFBc0I7UUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNPLHdDQUFZLEdBQXBCLFVBQXFCLFVBQXNCO1FBQ3ZDLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLE1BQU0sS0FBSyxVQUFVLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssY0FBYyxDQUFDLEdBQUcsRUFBM0UsQ0FBMkUsQ0FBQyxDQUFDO1FBQzFILElBQUksS0FBSyxJQUFJLENBQUMsRUFBRTtZQUNaLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNqQzthQUFNO1lBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDakM7SUFDTCxDQUFDO0lBQ0wsd0JBQUM7QUFBRCxDQUFDLEFBekNELElBeUNDO0FBQ0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhQ2hhbmdlLCBEYXRhQ2hhbmdlVHlwZSB9IGZyb20gJy4uL2NvcmUnO1xyXG5cclxuY2xhc3MgRGF0YUNoYW5nZUhpc3Rvcnkge1xyXG4gICAgcHJpdmF0ZSBoaXN0b3J5OiBBcnJheTxEYXRhQ2hhbmdlPjtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuaGlzdG9yeSA9IFtdO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGFkZENoYW5nZShkYXRhQ2hhbmdlOiBEYXRhQ2hhbmdlKSB7XHJcbiAgICAgICAgY29uc3QgY2hhbmdlVHlwZSA9IERhdGFDaGFuZ2VUeXBlW2RhdGFDaGFuZ2UuY2hhbmdlVHlwZV07XHJcbiAgICAgICAgdGhpc1tgb24ke2NoYW5nZVR5cGV9RGF0YWBdKGRhdGFDaGFuZ2UpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGFkZENoYW5nZXMoZGF0YUNoYW5nZTogRGF0YUNoYW5nZVtdKSB7XHJcbiAgICAgICAgZGF0YUNoYW5nZS5mb3JFYWNoKGNoYW5nZSA9PiB0aGlzLmFkZENoYW5nZShjaGFuZ2UpKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBjbGVhcigpIHtcclxuICAgICAgICB0aGlzLmhpc3Rvcnkuc3BsaWNlKDAsIHRoaXMuaGlzdG9yeS5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGNsZWFyQnlJZHMoaWRzOiBzdHJpbmdbXSkge1xyXG4gICAgICAgIHRoaXMuaGlzdG9yeSA9IHRoaXMuaGlzdG9yeS5maWx0ZXIoaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtLmZwYXRoICYmIGl0ZW0uZnBhdGggIT09ICcvJyAmJiBpdGVtLmZwYXRoLmluY2x1ZGVzKCcvJykpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaWQgb2YgaWRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5jbHVkZSA9IGl0ZW0uZnBhdGguc3BsaXQoJy8nKS5pbmNsdWRlcyhpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFpbmNsdWRlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICFpZHMuaW5jbHVkZXMoaXRlbS5kYXRhSWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgaXNDaGFuZ2VkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhpc3RvcnkubGVuZ3RoID4gMDtcclxuICAgIH1cclxuICAgIHByaXZhdGUgb25BZGREYXRhKGRhdGFDaGFuZ2U6IERhdGFDaGFuZ2UpIHtcclxuICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChkYXRhQ2hhbmdlKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgb25EZWxldGVEYXRhKGRhdGFDaGFuZ2U6IERhdGFDaGFuZ2UpIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuaGlzdG9yeS5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmRhdGFJZCA9PT0gZGF0YUNoYW5nZS5kYXRhSWQgJiYgaXRlbS5jaGFuZ2VUeXBlID09PSBEYXRhQ2hhbmdlVHlwZS5BZGQpO1xyXG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGRhdGFDaGFuZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnQgeyBEYXRhQ2hhbmdlSGlzdG9yeSB9O1xyXG4iXX0=