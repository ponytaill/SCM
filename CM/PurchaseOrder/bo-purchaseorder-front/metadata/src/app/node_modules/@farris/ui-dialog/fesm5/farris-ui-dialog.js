import { fromEvent, Observable } from 'rxjs';
import { delay } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { Injectable, Component, Input, ViewChild, Renderer2, ElementRef, Output, EventEmitter, ContentChild, NgModule } from '@angular/core';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { AngularDraggableDirective, AngularDraggableModule } from '@farris/ui-draggable';
import { ModalDirective, ModalModule } from '@farris/ui-modal';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DialogService = /** @class */ (function () {
    function DialogService() {
    }
    /**
     * @param {?=} tags
     * @return {?}
     */
    DialogService.prototype.hasDialogOpened = /**
     * @param {?=} tags
     * @return {?}
     */
    function (tags) {
        /** @type {?} */
        var k = 0;
        /** @type {?} */
        var _tags = 'farris-dialog,.overlay-pane';
        if (tags) {
            _tags += ',' + tags;
        }
        /** @type {?} */
        var dlgs = window.document.querySelectorAll(_tags);
        /** @type {?} */
        var elements = Array.from(dlgs).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return !Array.from(dlgs[0].classList).some((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item == 'f-combo-list'; })); }));
        elements.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var n1 = '';
            if (n.tagName === 'DIV') {
                n1 = window.getComputedStyle(n).display;
            }
            else {
                n1 = window.getComputedStyle(n.querySelector('div')).display;
            }
            if (n1 === '' || n1 === 'block') {
                k++;
            }
        }));
        return k > 0;
    };
    DialogService.decorators = [
        { type: Injectable }
    ];
    return DialogService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DialogComponent = /** @class */ (function () {
    function DialogComponent(render2, el) {
        this.render2 = render2;
        this.el = el;
        /**
         * 窗口标题
         */
        this.title = '我是标题';
        /**
         * 标题图标
         */
        this.iconCls = undefined;
        /**
         * 宽度
         */
        this.width = 300;
        /**
         * 高度
         */
        this.height = 200;
        this.minWidth = 100;
        this.minHeight = 100;
        this.maxWidth = null;
        this.maxHeight = null;
        /**
         * 显示底部按钮区域，默认显示
         */
        this.showButtons = true;
        /**
         * 显示右上角关闭按钮，默认显示
         */
        this.showCloseButton = true;
        /**
         * 显示最大化按钮，默认显示
         */
        this.showMaxButton = true;
        /**
         * 显示最小化按钮，默认不显示, 显示出来也没有用
         */
        this.showMinButton = false;
        /**
         * 启用拖拽改变尺寸大小
         */
        this.resizable = true;
        /**
         * 启用拖动窗口
         */
        this.draggable = true;
        /**
         * 按钮对齐方式
         */
        this.buttonAlign = 'center';
        this.scrollConfig = {};
        this.opened = new EventEmitter();
        this.closed = new EventEmitter();
        this.resized = new EventEmitter();
        this.resizing = new EventEmitter();
        this.maxed = new EventEmitter();
        this.widthChange = new EventEmitter();
        this.heightChange = new EventEmitter();
        this.enableScroll = true;
        /**
         * 标题栏高度
         */
        this.dialogHeaderHeight = 0;
        /**
         * 按钮区高度
         */
        this.dialogFooterHeight = 0;
        this.parentElement = null;
        this.isMax = false; // 是否最大窗口
        // 记录上次的高度
        this.hostId = '';
        this.windowResize$ = null;
    }
    /**
     * @return {?}
     */
    DialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hostId = "farris-dialog_" + new Date().getTime();
        this.render2.setProperty(this.el.nativeElement, 'id', this.hostId);
        if (!this.beforeOpen) {
            this.beforeOpen = (/**
             * @return {?}
             */
            function () { return true; });
        }
        if (!this.beforeClose) {
            this.beforeClose = (/**
             * @return {?}
             */
            function () { return true; });
        }
        this.modal.onShown.subscribe((/**
         * @return {?}
         */
        function () {
            // const zindex = this.modal.backdrop.location.nativeElement;
            // this.render2.setStyle(this.el.nativeElement, 'position', 'absolute');
            // this.render2.setStyle(this.el.nativeElement, 'z-index', '1041');
            _this.opened.emit();
        }));
        this.modal.onHidden.subscribe((/**
         * @return {?}
         */
        function () { return _this.closed.emit(); }));
        this.checkDialogSize();
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.parentElement) {
                _this.parentElement.appendChild(_this.el.nativeElement);
            }
            else {
                document.body.appendChild(_this.el.nativeElement);
            }
        }), 100);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DialogComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @return {?}
     */
    DialogComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.destroy();
            _this.el = null;
            if (_this.parentElement) {
                _this.parentElement = null;
            }
        }), 150);
    };
    /**
     * @return {?}
     */
    DialogComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dlgHeaderLineHeight = this.getDialogHeaderLineHeight();
        if (this.dialogHeaderHeight) {
            this.modalHeader.nativeElement.style.height = this.dialogHeaderHeight + "px";
        }
        if (this.dialogFooterHeight) {
            /** @type {?} */
            var footer = this.modalContent.nativeElement.querySelector('.modal-footer');
            if (footer) {
                footer.style.height = this.dialogFooterHeight + "px";
            }
        }
        this.originalHeight = this.height;
        this.originalWidth = this.width;
        this.resetPosition();
        this.windowResize$ = fromEvent(window, 'resize').pipe(delay(50)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var winWidth = window.innerWidth - 20;
            /** @type {?} */
            var winHeight = window.innerHeight - 20;
            if (_this.isMax) {
                _this.maxDialog();
            }
            else {
                if (_this.width > winWidth || _this.height > winHeight) {
                    _this.maxDialog();
                }
            }
            _this.isMax = _this.isMax && _this.width == winWidth;
            _this.toCenter(0, 0);
        }));
    };
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    DialogComponent.prototype.toCenter = /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    function (x, y) {
        /** @type {?} */
        var dialogEl = this.getDlgElement();
        this.resetPosition();
        this.render2.setStyle(dialogEl, 'transform', "translate3d(" + x + "px, " + y + "px, 0px)");
        this.render2.setStyle(dialogEl, 'top', '50%');
        this.render2.setStyle(dialogEl, 'left', '50%');
        this.draggbar.position = { x: x, y: y };
        this.draggbar.resetPosition();
    };
    /**
     * @return {?}
     */
    DialogComponent.prototype.destroy = /**
     * @return {?}
     */
    function () {
        if (!this.parentElement) {
            if (document.body.querySelector("#" + this.hostId)) {
                document.body.removeChild(this.el.nativeElement);
            }
        }
        else {
            if (this.parentElement.querySelector("#" + this.hostId)) {
                this.parentElement.removeChild(this.el.nativeElement);
            }
        }
        if (this.windowResize$) {
            this.windowResize$.unsubscribe();
            this.windowResize$ = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    DialogComponent.prototype.getDlgElement = /**
     * @private
     * @return {?}
     */
    function () {
        return this.el.nativeElement.querySelector('.modal-dialog');
    };
    /**
     * @private
     * @return {?}
     */
    DialogComponent.prototype.getDialogHeaderLineHeight = /**
     * @private
     * @return {?}
     */
    function () {
        return Math.ceil(this.modalHeader.nativeElement.getBoundingClientRect().height);
    };
    /**
     * @private
     * @return {?}
     */
    DialogComponent.prototype.getDialogFooterHeight = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var footerEl = this.modalContent.nativeElement.querySelector('.modal-footer');
        if (footerEl) {
            return Math.ceil(footerEl.getBoundingClientRect().height);
        }
        return 0;
    };
    Object.defineProperty(DialogComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var headerHeight = this.getDialogHeaderLineHeight();
            /** @type {?} */
            var footerHeight = this.getDialogFooterHeight();
            /** @type {?} */
            var contentHeight = this.height - headerHeight;
            if (this.showButtons) {
                contentHeight = contentHeight - footerHeight;
            }
            return {
                width: this.width,
                height: this.height,
                contentHeight: contentHeight,
                contentWidth: this.width,
                header: headerHeight,
                footer: footerHeight
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    DialogComponent.prototype._checkDialogSize = /**
     * @private
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    function (width, height) {
        // 可视区域尺寸
        /** @type {?} */
        var winSize = {
            width: document.body.offsetWidth,
            height: window.innerHeight
        };
        if (this.parentElement) {
            winSize.width = this.parentElement.offsetWidth;
            winSize.height = this.parentElement.offsetHeight;
        }
        if (winSize.width && winSize.width < width) {
            width = winSize.width;
        }
        if (winSize.height && winSize.height < height) {
            height = winSize.height;
        }
        return {
            width: width,
            height: height
        };
    };
    /**
     * @private
     * @return {?}
     */
    DialogComponent.prototype.checkDialogSize = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newSize = this._checkDialogSize(this.width, this.height);
        if (this.width !== newSize.width) {
            this.width = newSize.width - 20;
            this.widthChange.emit(this.width);
        }
        if (this.height !== newSize.height) {
            this.height = newSize.height - 20;
            this.heightChange.emit(this.height);
        }
    };
    /**
     * @return {?}
     */
    DialogComponent.prototype.updateModalBodyHeight = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var contentEl = this.el.nativeElement.querySelector('.modal-body');
        /** @type {?} */
        var contentHeight = this.size.contentHeight;
        this.render2.setStyle(contentEl, 'height', contentHeight + 'px');
    };
    /**
     * @return {?}
     */
    DialogComponent.prototype.resetPosition = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var marginLeft = Number.parseInt('' + -this.width / 2) + 'px';
        /** @type {?} */
        var marginTop = Number.parseInt('' + -this.height / 2) + 'px';
        /** @type {?} */
        var dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        /** @type {?} */
        var contentEl = this.el.nativeElement.querySelector('.modal-body');
        /** @type {?} */
        var footerEl = this.el.nativeElement.querySelector('.modal-footer');
        this.render2.setStyle(dialogEl, 'margin-left', marginLeft);
        this.render2.setStyle(dialogEl, 'margin-top', marginTop);
        /** @type {?} */
        var contentHeight = this.size.contentHeight;
        this.render2.setStyle(contentEl, 'height', contentHeight + 'px');
        this.render2.setStyle(contentEl, 'overflow', 'hidden');
        this.render2.setStyle(dialogEl, 'transform', 'translate3d(0px, 0px, 0px)');
    };
    /**
     * @private
     * @param {?} flag
     * @return {?}
     */
    DialogComponent.prototype.openDialog = /**
     * @private
     * @param {?} flag
     * @return {?}
     */
    function (flag) {
        if (flag) {
            this.resetPosition();
            this.draggbar.resetPosition();
            this.modal.show();
        }
    };
    /**
     * @private
     * @param {?} canClose
     * @return {?}
     */
    DialogComponent.prototype.closeDialog = /**
     * @private
     * @param {?} canClose
     * @return {?}
     */
    function (canClose) {
        if (canClose) {
            this.modal.hide();
        }
    };
    /**
     * @return {?}
     */
    DialogComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var result = this.beforeOpen();
        if (typeof result === 'boolean') {
            this.openDialog(result);
        }
        else {
            if (result instanceof Observable) {
                result.subscribe((/**
                 * @param {?} flag
                 * @return {?}
                 */
                function (flag) {
                    _this.openDialog(flag);
                }));
            }
            else {
                if (result instanceof Promise) {
                    result.then((/**
                     * @param {?} flag
                     * @return {?}
                     */
                    function (flag) {
                        _this.openDialog(flag);
                    }));
                }
            }
        }
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    DialogComponent.prototype.close = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if ($event) {
            $event.stopPropagation();
        }
        /** @type {?} */
        var result = this.beforeClose();
        if (typeof result === 'boolean') {
            this.closeDialog(result);
        }
        else {
            if (result instanceof Observable) {
                result.subscribe((/**
                 * @param {?} flag
                 * @return {?}
                 */
                function (flag) {
                    _this.closeDialog(flag);
                }));
            }
            else {
                if (result instanceof Promise) {
                    result.then((/**
                     * @param {?} flag
                     * @return {?}
                     */
                    function (flag) {
                        _this.closeDialog(flag);
                    }));
                }
            }
        }
    };
    /**
     * @param {?} size
     * @return {?}
     */
    DialogComponent.prototype.reSize = /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        if (size.width) {
            this.width = size.width;
        }
        if (size.height) {
            this.height = size.height;
        }
        this.resetPosition();
        this.draggbar.resetPosition();
        this.widthChange.emit(this.width);
        this.heightChange.emit(this.height);
        this.resized.emit({ size: { width: this.width, height: this.height } });
    };
    /**
     * @param {?} opts
     * @return {?}
     */
    DialogComponent.prototype.onResizing = /**
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        opts.size.width = opts.size.width < 100 ? 100 : opts.size.width;
        opts.size.height = opts.size.height < 100 ? 100 : opts.size.height;
        this.width = opts.size.width;
        this.height = opts.size.height;
        this.resizing.emit(opts);
    };
    /**
     * @param {?} opts
     * @return {?}
     */
    DialogComponent.prototype.resizeStop = /**
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        opts.size.width = opts.size.width < 100 ? 100 : opts.size.width;
        opts.size.height = opts.size.height < 100 ? 100 : opts.size.height;
        this.width = opts.size.width;
        this.height = opts.size.height;
        this.updateModalBodyHeight();
        this.widthChange.emit(this.width);
        this.heightChange.emit(this.height);
        this.resized.emit(opts);
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DialogComponent.prototype.dropdown = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        // const rect = el.getBoundingClientRect();
        // this.render2.removeStyle(el, 'margin-top');
        // this.render2.removeStyle(el, 'margin-left');
        // this.render2.setStyle(el, 'top', `${rect.top}px`);
        // this.render2.setStyle(el, 'left', `${rect.left}px`);
        // this.render2.removeStyle(el, 'transform');
        // this.render2.removeStyle(el, '-webkit-transform');
        // this.render2.removeStyle(el, '-ms-transform');
        // this.render2.removeStyle(el, '-moz-transform');
        // this.render2.removeStyle(el, '-o-transform');
    };
    /**
     * @return {?}
     */
    DialogComponent.prototype.maxDialog = /**
     * @return {?}
     */
    function () {
        if (!this.el) {
            return;
        }
        // console.log(`${document.scrollingElement.clientWidth}`)
        this.prevWidth = this.width;
        this.prevHeight = this.height;
        // this.width = (document.scrollingElement?document.scrollingElement:document.documentElement)['clientWidth']  - 20;
        // this.height = (document.scrollingElement?document.scrollingElement:document.documentElement)['clientHeight'] - 20;
        this.width = window.innerWidth - 20;
        this.height = window.innerHeight - 20;
        this.draggable = false;
        this.resizable = false;
        /** @type {?} */
        var dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this.render2.setStyle(dialogEl, 'top', '50%');
        this.render2.setStyle(dialogEl, 'left', '50%');
        this.isMax = true;
        this.resetPosition();
        this.resized.emit({ size: { width: this.width, height: this.height } });
        this.maxed.emit({ size: { width: this.width, height: this.height } });
    };
    /**
     * @return {?}
     */
    DialogComponent.prototype.revertDialog = /**
     * @return {?}
     */
    function () {
        this.isMax = false;
        /** @type {?} */
        var ww = window.innerWidth - 20;
        /** @type {?} */
        var wh = window.innerHeight - 20;
        this.width = this.prevWidth == ww ? this.originalWidth : this.prevWidth;
        this.height = this.prevHeight == wh ? this.originalHeight : this.prevHeight;
        if (this.width > ww) {
            this.width = ww;
        }
        if (this.height > wh) {
            this.height = wh;
        }
        this.draggable = true;
        this.resizable = true;
        this.resetPosition();
        this.draggbar.resetPosition();
        this.resized.emit({ size: { width: this.width, height: this.height } });
        this.maxed.emit({ size: { width: this.width, height: this.height } });
    };
    /**
     * @return {?}
     */
    DialogComponent.prototype.changeDialogSize = /**
     * @return {?}
     */
    function () {
        if (this.isMax) {
            this.revertDialog();
        }
        else {
            this.maxDialog();
        }
    };
    DialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-dialog',
                    template: "<div #backdropEl class=\"modal fade farris-modal\" bsModal #staticModal=\"bs-modal\" [config]=\"{backdrop: 'static'}\"\r\n    tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"dialog-static-name\">\r\n    <div [ngDraggable]=\"draggable\" [ngResizable]=\"resizable\" rzHandles=\"all\" [handle]=\"header\"\r\n        (rzStop)=\"resizeStop($event)\" (rzResizing)=\"onResizing($event)\" (stopped)=\"dropdown($event)\"\r\n        [rzMinWidth]=\"minWidth\" [rzMaxWidth]=\"maxWidth\" [rzMinHeight]=\"minHeight\" [rzMaxHeight]=\"maxHeight\"\r\n        [inBounds]=\"true\" [bounds]=\"backdropEl\" class=\"modal-dialog\" [style.width]=\"width + 'px'\"\r\n        [style.height]=\"height + 'px'\">\r\n        <div #modalContent class=\"modal-content\">\r\n            <div #header class=\"modal-header\">\r\n                <div class=\"modal-title\">\r\n                    <span *ngIf=\"iconCls\" [class]=\"iconCls\"></span>\r\n                    <span class=\"modal-title-label\">{{ title }}</span>\r\n                </div>\r\n                <div class=\"actions\">\r\n\r\n                    <ul>\r\n                        <li *ngIf=\"toolTemplate\">\r\n                            <ng-template [ngTemplateOutlet]=\"toolTemplate\">\r\n\r\n                            </ng-template>\r\n                        </li>\r\n                        <li *ngIf=\"showMinButton\" class=\"f-btn-icon f-bare\"><span class=\"f-icon modal_minimize\"></span>\r\n                        </li>\r\n                        <li *ngIf=\"showMaxButton\" (click)=\"changeDialogSize()\" class=\"f-btn-icon f-bare\"><span\r\n                                class=\"f-icon modal_maximize\" [class.modalrevert]=\"isMax\"></span></li>\r\n                        <li *ngIf=\"showCloseButton\" (click)=\"close($event)\" class=\"f-btn-icon f-bare\"><span\r\n                                class=\"f-icon modal_close\"></span></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <perfect-scrollbar [disabled]=\"!enableScroll\" [config]=\"scrollConfig\">\r\n                    <ng-content></ng-content>\r\n                </perfect-scrollbar>\r\n            </div>\r\n            <div class=\"modal-footer\" *ngIf=\"showButtons\" [style.textAlign]=\"buttonAlign\">\r\n                <ng-container [ngTemplateOutlet]=\"buttons\"></ng-container>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    DialogComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    DialogComponent.propDecorators = {
        title: [{ type: Input }],
        iconCls: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        minWidth: [{ type: Input }],
        minHeight: [{ type: Input }],
        maxWidth: [{ type: Input }],
        maxHeight: [{ type: Input }],
        showButtons: [{ type: Input }],
        showCloseButton: [{ type: Input }],
        showMaxButton: [{ type: Input }],
        showMinButton: [{ type: Input }],
        resizable: [{ type: Input }],
        draggable: [{ type: Input }],
        buttonAlign: [{ type: Input }],
        scrollConfig: [{ type: Input }],
        beforeOpen: [{ type: Input }],
        beforeClose: [{ type: Input }],
        modal: [{ type: ViewChild, args: [ModalDirective,] }],
        draggbar: [{ type: ViewChild, args: [AngularDraggableDirective,] }],
        opened: [{ type: Output }],
        closed: [{ type: Output }],
        resized: [{ type: Output }],
        resizing: [{ type: Output }],
        maxed: [{ type: Output }],
        widthChange: [{ type: Output }],
        heightChange: [{ type: Output }],
        enableScroll: [{ type: Input }],
        buttons: [{ type: Input }],
        dialogHeaderHeight: [{ type: Input }],
        dialogFooterHeight: [{ type: Input }],
        parentElement: [{ type: Input }],
        toolTemplate: [{ type: ContentChild, args: ['toolTemplate',] }],
        modalContent: [{ type: ViewChild, args: ['modalContent',] }],
        modalHeader: [{ type: ViewChild, args: ['header',] }]
    };
    return DialogComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisDialogModule = /** @class */ (function () {
    function FarrisDialogModule() {
    }
    /**
     * @return {?}
     */
    FarrisDialogModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: FarrisDialogModule,
            providers: [
                DialogService
            ]
        };
    };
    FarrisDialogModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        DialogComponent
                    ],
                    imports: [
                        PerfectScrollbarModule,
                        AngularDraggableModule,
                        ModalModule,
                        CommonModule,
                    ],
                    exports: [
                        DialogComponent,
                        ModalModule
                    ]
                },] }
    ];
    return FarrisDialogModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DialogService, DialogComponent, FarrisDialogModule };

//# sourceMappingURL=farris-ui-dialog.js.map