import { Subject, of } from 'rxjs';
import { Map } from 'immutable';
import { ChangeType, ViewChangeType } from './changes';
import { BindingPropertyType } from './binding_property';
/**
 * 绑定对象基类
 */
var BaseBindingObject = /** @class */ (function () {
    function BaseBindingObject() {
        this.__type__ = 'BindingObject';
        /**
         * 标识是否提交过
         */
        this.isShowValidationMsg = false;
        /**
         * 销毁流
         */
        this.unsubscribe = new Subject();
        /**
         * 以{ [propertyName]: FormControl }的形式存放每条数据的control
         */
        this.controlMap = {};
        this.innerValues = Map();
        this.changes = new Subject();
        this.viewChanges = new Subject();
    }
    Object.defineProperty(BaseBindingObject.prototype, "primaryKeyValue", {
        /**
         * 主键值
         */
        get: function () {
            return this.primaryKey ? this.getValue(this.primaryKey) : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 设置是否提交过
     */
    BaseBindingObject.prototype.setShowValidationMsg = function (flag) {
        this.isShowValidationMsg = flag;
    };
    // public abstract load(data: any);
    /**
     * 根据属性名获取属性值
     * @param   propertyName 属性名
     * @returns 属性值
     */
    BaseBindingObject.prototype.getValue = function (propertyName) {
        return this.innerValues.get(propertyName);
    };
    /**
     * 设置属性值
     * @param propertyName        属性名
     * @param propertyValue       属性值
     * @param emitEventToView     是否通知View层去更新界面，默认为false
     * @param emitEventToEntity   是否通知Entity层去更新值，默认为false
     * @param errors              错误消息
     * @param invokeOnValueChange 值变化事件执行句柄
     */
    BaseBindingObject.prototype.setValue = function (propertyName, propertyValue, emitEventToView, emitEventToEntity, errors, invokeOnValueChange, context) {
        var _this = this;
        if (emitEventToView === void 0) { emitEventToView = false; }
        if (emitEventToEntity === void 0) { emitEventToEntity = false; }
        // 屏蔽掉无效的赋值，防止后续赋值对比时跳过，导致实体无法赋值
        // if (this.primaryKey && !this.primaryKeyValue && this.primaryKey !== propertyName) {
        //   return;
        // }
        var oldPropertyValue = this.getValue(propertyName);
        // 由于特定原因（@邵珠强），无法屏蔽oldPropertyValue === propertyValue
        // if (oldPropertyValue === propertyValue) {
        //   return;
        // }
        if (!invokeOnValueChange || oldPropertyValue === propertyValue) {
            // 设定缺省
            invokeOnValueChange = function (preValue, value, entityChanged, primaryValue) {
                return of(true);
            };
        }
        if (emitEventToEntity === true) {
            // BUG 322301，删除@2019.08.10; 如果无对应实体，则中止值传递; 这种情况发生在带从表的单据新增，从表响应Load变化的情况；
            // if(!this.innerValues.has(propertyName)) {
            //   return;
            // }
            // 执行实体值变化前事件
            invokeOnValueChange(oldPropertyValue, propertyValue, false, this.primaryKeyValue).subscribe(function (result) {
                if (result) {
                    // 如果成功，执行变化，并通知实体变化
                    _this.innerValues = _this.innerValues.set(propertyName, propertyValue);
                    // this.data[propertyName] = propertyValue;
                    var viewChange = _this.buildViewChangesContext(propertyName, propertyValue, oldPropertyValue, errors, context);
                    _this.viewChanges.next(viewChange);
                    // 如果需要通知视图，通知视图相应修改
                    if (emitEventToView === true) {
                        var change = _this.buildChangesContext(propertyName, propertyValue, context, errors);
                        _this.changes.next(change);
                    }
                    // 执行实体值变化后事件
                    invokeOnValueChange(oldPropertyValue, propertyValue, true, _this.primaryKeyValue).subscribe();
                }
                else {
                    // 如果失败，不再通知实体变化
                    // 并执行界面回滚操作
                    var change = _this.buildChangesContext(propertyName, oldPropertyValue, context, errors);
                    _this.changes.next(change);
                }
            });
        }
        else {
            // `emitEventToEntity === false`, 则认定实体值已经发生变化，通知视图变化，并触发实体值变化后事件
            this.innerValues = this.innerValues.set(propertyName, propertyValue);
            // this.data[propertyName] = propertyValue;
            if (emitEventToView === true) {
                var change = this.buildChangesContext(propertyName, propertyValue, context, errors);
                this.changes.next(change);
            }
            // 执行实体值变化后事件
            invokeOnValueChange(oldPropertyValue, propertyValue, true, this.primaryKeyValue).subscribe();
        }
    };
    /**
     * 将BindingObject实例转换成JSON对象
     */
    BaseBindingObject.prototype.toJSON = function (options) {
        var _this = this;
        var langCode = this.getCurrentLanguage(); //window.localStorage.getItem('languageCode') || 'zh-CHS';
        var result = {};
        this.properties.forEach(function (property) {
            var _a;
            var propName = property.name;
            if (property.type === BindingPropertyType.List) {
                var list = _this[propName];
                result[propName] = list.toJSON(options);
            }
            else if (property.type === BindingPropertyType.Object) {
                var object = _this[propName];
                result[propName] = object.toJSON(options);
            }
            else if (property.type === BindingPropertyType.Dynamic) {
                var object = _this[propName];
                result[propName] = object.toJSON(options);
            }
            else {
                // 1、对于多语录入字段；
                // 2、传入ignoreMultiLangInput标志，则取当前语言的值给控件。
                if (property.enableMultiLangInput === true) {
                    // 忽略多语字段，只返回当前语言
                    if (options && options.ignoreMultiLangInput === true) {
                        var multiLangValueObj = _this.getValue(propName);
                        if (multiLangValueObj) {
                            result[propName] = multiLangValueObj[langCode];
                        }
                        else {
                            result[propName] = multiLangValueObj;
                        }
                    }
                    else if (options && options.useFullMultiLangProperty) {
                        // 给审批提供的扩展 @2021-10-13
                        var multiLangValueObj = _this.getValue(propName);
                        if (multiLangValueObj) {
                            result[propName + "_MULTILANGUAGE"] = multiLangValueObj;
                            // 除返回多语字段外，将当前语言也返回
                            result[propName] = multiLangValueObj[langCode];
                        }
                    }
                    else {
                        var multiLangValueObj = _this.getValue(propName);
                        if (!multiLangValueObj) {
                            result[propName] = (_a = {}, _a[langCode] = multiLangValueObj, _a);
                        }
                        else {
                            result[propName] = multiLangValueObj;
                        }
                    }
                }
                else {
                    result[propName] = _this.getValue(propName);
                }
            }
        });
        return result;
    };
    /**
     * 获取当前语言
     * @returns
     */
    BaseBindingObject.prototype.getCurrentLanguage = function () {
        this.currentLanguage = this.currentLanguage || window.localStorage.getItem('languageCode') || 'zh-CHS';
        return this.currentLanguage;
    };
    /**
     * 构造bindignData变更上下文
     * @param propertyName
     * @param propertyValue
     * @param context
     * @param errors
     * @param type
     * @returns
     */
    BaseBindingObject.prototype.buildChangesContext = function (propertyName, propertyValue, context, errors, type) {
        if (type === void 0) { type = ChangeType.ValueChanged; }
        return {
            type: type,
            path: [propertyName],
            value: propertyValue,
            id: this.primaryKeyValue,
            errors: errors,
            context: context
        };
    };
    /**
     * 构造viewChanges上下文
     * @param propertyName
     * @param value
     * @param preValue
     * @param errors
     * @param context
     * @param type
     * @returns
     */
    BaseBindingObject.prototype.buildViewChangesContext = function (propertyName, value, preValue, errors, context, type) {
        if (type === void 0) { type = ViewChangeType.ValueChanged; }
        return {
            type: type,
            path: [propertyName],
            value: value,
            preValue: preValue,
            errors: errors,
            context: context
        };
    };
    return BaseBindingObject;
}());
export { BaseBindingObject };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZV9iaW5kaW5nX29iamVjdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2JpbmRpbmctZGF0YS9iYXNlX2JpbmRpbmdfb2JqZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxFQUFVLFVBQVUsRUFBYyxjQUFjLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDM0UsT0FBTyxFQUFtQixtQkFBbUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSTFFOztHQUVHO0FBQ0g7SUF1REU7UUF0RE8sYUFBUSxHQUFHLGVBQWUsQ0FBQztRQTBDbEM7O1dBRUc7UUFDSSx3QkFBbUIsR0FBRyxLQUFLLENBQUM7UUFDbkM7O1dBRUc7UUFDSSxnQkFBVyxHQUFpQixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ2pEOztXQUVHO1FBQ0ksZUFBVSxHQUFRLEVBQUUsQ0FBQztRQUUxQixJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsRUFBZSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQVUsQ0FBQztRQUNyQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksT0FBTyxFQUFjLENBQUM7SUFDL0MsQ0FBQztJQXBCRCxzQkFBVyw4Q0FBZTtRQUgxQjs7V0FFRzthQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQy9ELENBQUM7OztPQUFBO0lBbUJEOztPQUVHO0lBQ0ksZ0RBQW9CLEdBQTNCLFVBQTRCLElBQWE7UUFDdkMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FB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QUFBO1NBQ1IsQ0FBQztJQUNKLENBQUM7SUFDSCx3QkFBQztBQUFELENBQUMsQUFqUEQsSUFpUEM7QUFDRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1YmplY3QsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IE1hcCB9IGZyb20gJ2ltbXV0YWJsZSc7XHJcbmltcG9ydCB7IENoYW5nZSwgQ2hhbmdlVHlwZSwgVmlld0NoYW5nZSwgVmlld0NoYW5nZVR5cGUgfSBmcm9tICcuL2NoYW5nZXMnO1xyXG5pbXBvcnQgeyBCaW5kaW5nUHJvcGVydHksIEJpbmRpbmdQcm9wZXJ0eVR5cGUgfSBmcm9tICcuL2JpbmRpbmdfcHJvcGVydHknO1xyXG5pbXBvcnQgeyBCaW5kaW5nTGlzdCB9IGZyb20gJy4vYmluZGluZ19saXN0JztcclxuaW1wb3J0IHsgSW52b2tlT25WYWx1ZUNoYW5nZSB9IGZyb20gJy4vdHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIOe7keWumuWvueixoeWfuuexu1xyXG4gKi9cclxuYWJzdHJhY3QgY2xhc3MgQmFzZUJpbmRpbmdPYmplY3Qge1xyXG4gIHB1YmxpYyBfX3R5cGVfXyA9ICdCaW5kaW5nT2JqZWN0JztcclxuICAvLyBwcm90ZWN0ZWQgZGF0YTogYW55ID0gdW5kZWZpbmVkO1xyXG4gIC8qKlxyXG4gICAqIGltbXV0YWJsZeWAvOWvueixoVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBpbm5lclZhbHVlczogTWFwPHN0cmluZywgYW55PjtcclxuICAvKipcclxuICAgKiDlvZPliY3or63oqIBcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgY3VycmVudExhbmd1YWdlOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICog54i25a+56LGh5oiW54i25YiX6KGoXHJcbiAgICovXHJcbiAgcHVibGljIHBhcmVudDogQmluZGluZ0xpc3QgfCBCYXNlQmluZGluZ09iamVjdDtcclxuXHJcbiAgLyoqXHJcbiAgICog5a6e5L2T5byV6LW355qE5Y+Y5pu0XHJcbiAgICovXHJcbiAgcHVibGljIGNoYW5nZXM6IFN1YmplY3Q8Q2hhbmdlPjtcclxuXHJcbiAgLyoqXHJcbiAgICog55WM6Z2i5bGC5byV6LW355qE5Y+Y5pu05rWBXHJcbiAgICovXHJcbiAgcHVibGljIHZpZXdDaGFuZ2VzOiBTdWJqZWN0PFZpZXdDaGFuZ2U+O1xyXG5cclxuICAvKipcclxuICAgKiAg5bGe5oCn6ZuG5ZCIXHJcbiAgICovXHJcbiAgcHVibGljIHByb3BlcnRpZXM6IEJpbmRpbmdQcm9wZXJ0eVtdO1xyXG5cclxuICAvKipcclxuICAgKiDkuLvplK7lkI1cclxuICAgKi9cclxuICBwdWJsaWMgcHJpbWFyeUtleTogc3RyaW5nO1xyXG5cclxuICAvKipcclxuICAgKiDkuLvplK7lgLxcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IHByaW1hcnlLZXlWYWx1ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLnByaW1hcnlLZXkgPyB0aGlzLmdldFZhbHVlKHRoaXMucHJpbWFyeUtleSkgOiAnJztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOagh+ivhuaYr+WQpuaPkOS6pOi/h1xyXG4gICAqL1xyXG4gIHB1YmxpYyBpc1Nob3dWYWxpZGF0aW9uTXNnID0gZmFsc2U7XHJcbiAgLyoqXHJcbiAgICog6ZSA5q+B5rWBXHJcbiAgICovXHJcbiAgcHVibGljIHVuc3Vic2NyaWJlOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdCgpO1xyXG4gIC8qKlxyXG4gICAqIOS7pXsgW3Byb3BlcnR5TmFtZV06IEZvcm1Db250cm9sIH3nmoTlvaLlvI/lrZjmlL7mr4/mnaHmlbDmja7nmoRjb250cm9sXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnRyb2xNYXA6IGFueSA9IHt9O1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5pbm5lclZhbHVlcyA9IE1hcDxzdHJpbmcsIGFueT4oKTtcclxuICAgIHRoaXMuY2hhbmdlcyA9IG5ldyBTdWJqZWN0PENoYW5nZT4oKTtcclxuICAgIHRoaXMudmlld0NoYW5nZXMgPSBuZXcgU3ViamVjdDxWaWV3Q2hhbmdlPigpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDorr7nva7mmK/lkKbmj5DkuqTov4dcclxuICAgKi9cclxuICBwdWJsaWMgc2V0U2hvd1ZhbGlkYXRpb25Nc2coZmxhZzogYm9vbGVhbikge1xyXG4gICAgdGhpcy5pc1Nob3dWYWxpZGF0aW9uTXNnID0gZmxhZztcclxuICB9XHJcbiAgLy8gcHVibGljIGFic3RyYWN0IGxvYWQoZGF0YTogYW55KTtcclxuICAvKipcclxuICAgKiDmoLnmja7lsZ7mgKflkI3ojrflj5blsZ7mgKflgLxcclxuICAgKiBAcGFyYW0gICBwcm9wZXJ0eU5hbWUg5bGe5oCn5ZCNXHJcbiAgICogQHJldHVybnMg5bGe5oCn5YC8XHJcbiAgICovXHJcbiAgcHVibGljIGdldFZhbHVlKHByb3BlcnR5TmFtZTogc3RyaW5nKTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLmlubmVyVmFsdWVzLmdldChwcm9wZXJ0eU5hbWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6K6+572u5bGe5oCn5YC8XHJcbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSAgICAgICAg5bGe5oCn5ZCNXHJcbiAgICogQHBhcmFtIHByb3BlcnR5VmFsdWUgICAgICAg5bGe5oCn5YC8XHJcbiAgICogQHBhcmFtIGVtaXRFdmVudFRvVmlldyAgICAg5piv5ZCm6YCa55+lVmlld+WxguWOu+abtOaWsOeVjOmdou+8jOm7mOiupOS4umZhbHNlXHJcbiAgICogQHBhcmFtIGVtaXRFdmVudFRvRW50aXR5ICAg5piv5ZCm6YCa55+lRW50aXR55bGC5Y675pu05paw5YC877yM6buY6K6k5Li6ZmFsc2VcclxuICAgKiBAcGFyYW0gZXJyb3JzICAgICAgICAgICAgICDplJnor6/mtojmga9cclxuICAgKiBAcGFyYW0gaW52b2tlT25WYWx1ZUNoYW5nZSDlgLzlj5jljJbkuovku7bmiafooYzlj6Xmn4RcclxuICAgKi9cclxuICBwdWJsaWMgc2V0VmFsdWUocHJvcGVydHlOYW1lOiBzdHJpbmcsIHByb3BlcnR5VmFsdWU6IGFueSwgZW1pdEV2ZW50VG9WaWV3OiBib29sZWFuID0gZmFsc2UsIGVtaXRFdmVudFRvRW50aXR5OiBib29sZWFuID0gZmFsc2UsIGVycm9ycz86IGFueSwgaW52b2tlT25WYWx1ZUNoYW5nZT86IEludm9rZU9uVmFsdWVDaGFuZ2UsIGNvbnRleHQ/OiBhbnkpOiB2b2lkIHtcclxuICAgIC8vIOWxj+iUveaOieaXoOaViOeahOi1i+WAvO+8jOmYsuatouWQjue7rei1i+WAvOWvueavlOaXtui3s+i/h++8jOWvvOiHtOWunuS9k+aXoOazlei1i+WAvFxyXG4gICAgLy8gaWYgKHRoaXMucHJpbWFyeUtleSAmJiAhdGhpcy5wcmltYXJ5S2V5VmFsdWUgJiYgdGhpcy5wcmltYXJ5S2V5ICE9PSBwcm9wZXJ0eU5hbWUpIHtcclxuICAgIC8vICAgcmV0dXJuO1xyXG4gICAgLy8gfVxyXG4gICAgY29uc3Qgb2xkUHJvcGVydHlWYWx1ZSA9IHRoaXMuZ2V0VmFsdWUocHJvcGVydHlOYW1lKTtcclxuICAgIC8vIOeUseS6jueJueWumuWOn+WboO+8iEDpgrXnj6DlvLrvvInvvIzml6Dms5XlsY/olL1vbGRQcm9wZXJ0eVZhbHVlID09PSBwcm9wZXJ0eVZhbHVlXHJcbiAgICAvLyBpZiAob2xkUHJvcGVydHlWYWx1ZSA9PT0gcHJvcGVydHlWYWx1ZSkge1xyXG4gICAgLy8gICByZXR1cm47XHJcbiAgICAvLyB9XHJcbiAgICBpZiAoIWludm9rZU9uVmFsdWVDaGFuZ2UgfHwgb2xkUHJvcGVydHlWYWx1ZSA9PT0gcHJvcGVydHlWYWx1ZSkge1xyXG4gICAgICAvLyDorr7lrprnvLrnnIFcclxuICAgICAgaW52b2tlT25WYWx1ZUNoYW5nZSA9IGZ1bmN0aW9uIChwcmVWYWx1ZSwgdmFsdWUsIGVudGl0eUNoYW5nZWQ6IGJvb2xlYW4sIHByaW1hcnlWYWx1ZT86IGFueSkge1xyXG4gICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZW1pdEV2ZW50VG9FbnRpdHkgPT09IHRydWUpIHtcclxuICAgICAgLy8gQlVHIDMyMjMwMe+8jOWIoOmZpEAyMDE5LjA4LjEwOyDlpoLmnpzml6Dlr7nlupTlrp7kvZPvvIzliJnkuK3mraLlgLzkvKDpgJI7IOi/meenjeaDheWGteWPkeeUn+WcqOW4puS7juihqOeahOWNleaNruaWsOWinu+8jOS7juihqOWTjeW6lExvYWTlj5jljJbnmoTmg4XlhrXvvJtcclxuICAgICAgLy8gaWYoIXRoaXMuaW5uZXJWYWx1ZXMuaGFzKHByb3BlcnR5TmFtZSkpIHtcclxuICAgICAgLy8gICByZXR1cm47XHJcbiAgICAgIC8vIH1cclxuICAgICAgLy8g5omn6KGM5a6e5L2T5YC85Y+Y5YyW5YmN5LqL5Lu2XHJcbiAgICAgIGludm9rZU9uVmFsdWVDaGFuZ2Uob2xkUHJvcGVydHlWYWx1ZSwgcHJvcGVydHlWYWx1ZSwgZmFsc2UsIHRoaXMucHJpbWFyeUtleVZhbHVlKS5zdWJzY3JpYmUoKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgIC8vIOWmguaenOaIkOWKn++8jOaJp+ihjOWPmOWMlu+8jOW5tumAmuefpeWunuS9k+WPmOWMllxyXG4gICAgICAgICAgdGhpcy5pbm5lclZhbHVlcyA9IHRoaXMuaW5uZXJWYWx1ZXMuc2V0KHByb3BlcnR5TmFtZSwgcHJvcGVydHlWYWx1ZSk7XHJcbiAgICAgICAgICAvLyB0aGlzLmRhdGFbcHJvcGVydHlOYW1lXSA9IHByb3BlcnR5VmFsdWU7XHJcbiAgICAgICAgICBjb25zdCB2aWV3Q2hhbmdlID0gdGhpcy5idWlsZFZpZXdDaGFuZ2VzQ29udGV4dChwcm9wZXJ0eU5hbWUsIHByb3BlcnR5VmFsdWUsIG9sZFByb3BlcnR5VmFsdWUsIGVycm9ycywgY29udGV4dCk7XHJcbiAgICAgICAgICB0aGlzLnZpZXdDaGFuZ2VzLm5leHQodmlld0NoYW5nZSk7XHJcbiAgICAgICAgICAvLyDlpoLmnpzpnIDopoHpgJrnn6Xop4blm77vvIzpgJrnn6Xop4blm77nm7jlupTkv67mlLlcclxuICAgICAgICAgIGlmIChlbWl0RXZlbnRUb1ZpZXcgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gdGhpcy5idWlsZENoYW5nZXNDb250ZXh0KHByb3BlcnR5TmFtZSwgcHJvcGVydHlWYWx1ZSwgY29udGV4dCwgZXJyb3JzKTtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VzLm5leHQoY2hhbmdlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vIOaJp+ihjOWunuS9k+WAvOWPmOWMluWQjuS6i+S7tlxyXG4gICAgICAgICAgaW52b2tlT25WYWx1ZUNoYW5nZShvbGRQcm9wZXJ0eVZhbHVlLCBwcm9wZXJ0eVZhbHVlLCB0cnVlLCB0aGlzLnByaW1hcnlLZXlWYWx1ZSkuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIOWmguaenOWksei0pe+8jOS4jeWGjemAmuefpeWunuS9k+WPmOWMllxyXG4gICAgICAgICAgLy8g5bm25omn6KGM55WM6Z2i5Zue5rua5pON5L2cXHJcbiAgICAgICAgICBjb25zdCBjaGFuZ2UgPSB0aGlzLmJ1aWxkQ2hhbmdlc0NvbnRleHQocHJvcGVydHlOYW1lLCBvbGRQcm9wZXJ0eVZhbHVlLCBjb250ZXh0LCBlcnJvcnMpO1xyXG4gICAgICAgICAgdGhpcy5jaGFuZ2VzLm5leHQoY2hhbmdlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gYGVtaXRFdmVudFRvRW50aXR5ID09PSBmYWxzZWAsIOWImeiupOWumuWunuS9k+WAvOW3sue7j+WPkeeUn+WPmOWMlu+8jOmAmuefpeinhuWbvuWPmOWMlu+8jOW5tuinpuWPkeWunuS9k+WAvOWPmOWMluWQjuS6i+S7tlxyXG4gICAgICB0aGlzLmlubmVyVmFsdWVzID0gdGhpcy5pbm5lclZhbHVlcy5zZXQocHJvcGVydHlOYW1lLCBwcm9wZXJ0eVZhbHVlKTtcclxuICAgICAgLy8gdGhpcy5kYXRhW3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0eVZhbHVlO1xyXG4gICAgICBpZiAoZW1pdEV2ZW50VG9WaWV3ID09PSB0cnVlKSB7XHJcbiAgICAgICAgY29uc3QgY2hhbmdlID0gdGhpcy5idWlsZENoYW5nZXNDb250ZXh0KHByb3BlcnR5TmFtZSwgcHJvcGVydHlWYWx1ZSwgY29udGV4dCwgZXJyb3JzKTtcclxuICAgICAgICB0aGlzLmNoYW5nZXMubmV4dChjaGFuZ2UpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIOaJp+ihjOWunuS9k+WAvOWPmOWMluWQjuS6i+S7tlxyXG4gICAgICBpbnZva2VPblZhbHVlQ2hhbmdlKG9sZFByb3BlcnR5VmFsdWUsIHByb3BlcnR5VmFsdWUsIHRydWUsIHRoaXMucHJpbWFyeUtleVZhbHVlKS5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog5bCGQmluZGluZ09iamVjdOWunuS+i+i9rOaNouaIkEpTT07lr7nosaFcclxuICAgKi9cclxuICBwdWJsaWMgdG9KU09OKG9wdGlvbnM/OiBhbnkpOiBhbnkge1xyXG4gICAgY29uc3QgbGFuZ0NvZGUgPSB0aGlzLmdldEN1cnJlbnRMYW5ndWFnZSgpOy8vd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYW5ndWFnZUNvZGUnKSB8fCAnemgtQ0hTJztcclxuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xyXG4gICAgdGhpcy5wcm9wZXJ0aWVzLmZvckVhY2goKHByb3BlcnR5OiBCaW5kaW5nUHJvcGVydHkpID0+IHtcclxuICAgICAgY29uc3QgcHJvcE5hbWUgPSBwcm9wZXJ0eS5uYW1lO1xyXG4gICAgICBpZiAocHJvcGVydHkudHlwZSA9PT0gQmluZGluZ1Byb3BlcnR5VHlwZS5MaXN0KSB7XHJcbiAgICAgICAgY29uc3QgbGlzdDogQmluZGluZ0xpc3QgPSB0aGlzW3Byb3BOYW1lXTtcclxuICAgICAgICByZXN1bHRbcHJvcE5hbWVdID0gbGlzdC50b0pTT04ob3B0aW9ucyk7XHJcbiAgICAgIH0gZWxzZSBpZiAocHJvcGVydHkudHlwZSA9PT0gQmluZGluZ1Byb3BlcnR5VHlwZS5PYmplY3QpIHtcclxuICAgICAgICBjb25zdCBvYmplY3Q6IEJhc2VCaW5kaW5nT2JqZWN0ID0gdGhpc1twcm9wTmFtZV07XHJcbiAgICAgICAgcmVzdWx0W3Byb3BOYW1lXSA9IG9iamVjdC50b0pTT04ob3B0aW9ucyk7XHJcbiAgICAgIH0gZWxzZSBpZiAocHJvcGVydHkudHlwZSA9PT0gQmluZGluZ1Byb3BlcnR5VHlwZS5EeW5hbWljKSB7XHJcbiAgICAgICAgY29uc3Qgb2JqZWN0OiBCYXNlQmluZGluZ09iamVjdCA9IHRoaXNbcHJvcE5hbWVdO1xyXG4gICAgICAgIHJlc3VsdFtwcm9wTmFtZV0gPSBvYmplY3QudG9KU09OKG9wdGlvbnMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIDHjgIHlr7nkuo7lpJror63lvZXlhaXlrZfmrrXvvJtcclxuICAgICAgICAvLyAy44CB5Lyg5YWlaWdub3JlTXVsdGlMYW5nSW5wdXTmoIflv5fvvIzliJnlj5blvZPliY3or63oqIDnmoTlgLznu5nmjqfku7bjgIJcclxuICAgICAgICBpZiAocHJvcGVydHkuZW5hYmxlTXVsdGlMYW5nSW5wdXQgPT09IHRydWUpIHtcclxuICAgICAgICAgIC8vIOW/veeVpeWkmuivreWtl+aute+8jOWPqui/lOWbnuW9k+WJjeivreiogFxyXG4gICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5pZ25vcmVNdWx0aUxhbmdJbnB1dCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBtdWx0aUxhbmdWYWx1ZU9iaiA9IHRoaXMuZ2V0VmFsdWUocHJvcE5hbWUpO1xyXG4gICAgICAgICAgICBpZiAobXVsdGlMYW5nVmFsdWVPYmopIHtcclxuICAgICAgICAgICAgICByZXN1bHRbcHJvcE5hbWVdID0gbXVsdGlMYW5nVmFsdWVPYmpbbGFuZ0NvZGVdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJlc3VsdFtwcm9wTmFtZV0gPSBtdWx0aUxhbmdWYWx1ZU9iajtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zICYmIG9wdGlvbnMudXNlRnVsbE11bHRpTGFuZ1Byb3BlcnR5KSB7XHJcbiAgICAgICAgICAgIC8vIOe7meWuoeaJueaPkOS+m+eahOaJqeWxlSBAMjAyMS0xMC0xM1xyXG4gICAgICAgICAgICBjb25zdCBtdWx0aUxhbmdWYWx1ZU9iaiA9IHRoaXMuZ2V0VmFsdWUocHJvcE5hbWUpO1xyXG4gICAgICAgICAgICBpZiAobXVsdGlMYW5nVmFsdWVPYmopIHtcclxuICAgICAgICAgICAgICByZXN1bHRbYCR7cHJvcE5hbWV9X01VTFRJTEFOR1VBR0VgXSA9IG11bHRpTGFuZ1ZhbHVlT2JqO1xyXG4gICAgICAgICAgICAgIC8vIOmZpOi/lOWbnuWkmuivreWtl+auteWklu+8jOWwhuW9k+WJjeivreiogOS5n+i/lOWbnlxyXG4gICAgICAgICAgICAgIHJlc3VsdFtwcm9wTmFtZV0gPSBtdWx0aUxhbmdWYWx1ZU9ialtsYW5nQ29kZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG11bHRpTGFuZ1ZhbHVlT2JqID0gdGhpcy5nZXRWYWx1ZShwcm9wTmFtZSk7XHJcbiAgICAgICAgICAgIGlmICghbXVsdGlMYW5nVmFsdWVPYmopIHtcclxuICAgICAgICAgICAgICByZXN1bHRbcHJvcE5hbWVdID0geyBbbGFuZ0NvZGVdOiBtdWx0aUxhbmdWYWx1ZU9iaiB9O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJlc3VsdFtwcm9wTmFtZV0gPSBtdWx0aUxhbmdWYWx1ZU9iajtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXN1bHRbcHJvcE5hbWVdID0gdGhpcy5nZXRWYWx1ZShwcm9wTmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuICAvKipcclxuICAgKiDojrflj5blvZPliY3or63oqIBcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgZ2V0Q3VycmVudExhbmd1YWdlKCkge1xyXG4gICAgdGhpcy5jdXJyZW50TGFuZ3VhZ2UgPSB0aGlzLmN1cnJlbnRMYW5ndWFnZSB8fCB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhbmd1YWdlQ29kZScpIHx8ICd6aC1DSFMnO1xyXG4gICAgcmV0dXJuIHRoaXMuY3VycmVudExhbmd1YWdlO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmnoTpgKBiaW5kaWduRGF0YeWPmOabtOS4iuS4i+aWh1xyXG4gICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgXHJcbiAgICogQHBhcmFtIHByb3BlcnR5VmFsdWUgXHJcbiAgICogQHBhcmFtIGNvbnRleHQgXHJcbiAgICogQHBhcmFtIGVycm9ycyBcclxuICAgKiBAcGFyYW0gdHlwZSBcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwcml2YXRlIGJ1aWxkQ2hhbmdlc0NvbnRleHQocHJvcGVydHlOYW1lOiBzdHJpbmcsIHByb3BlcnR5VmFsdWU6IGFueSwgY29udGV4dD86IGFueSwgZXJyb3JzPzogYW55LCB0eXBlOiBDaGFuZ2VUeXBlID0gQ2hhbmdlVHlwZS5WYWx1ZUNoYW5nZWQpOiBDaGFuZ2Uge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgcGF0aDogW3Byb3BlcnR5TmFtZV0sXHJcbiAgICAgIHZhbHVlOiBwcm9wZXJ0eVZhbHVlLFxyXG4gICAgICBpZDogdGhpcy5wcmltYXJ5S2V5VmFsdWUsXHJcbiAgICAgIGVycm9yczogZXJyb3JzLFxyXG4gICAgICBjb250ZXh0XHJcbiAgICB9O1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmnoTpgKB2aWV3Q2hhbmdlc+S4iuS4i+aWh1xyXG4gICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUgXHJcbiAgICogQHBhcmFtIHZhbHVlIFxyXG4gICAqIEBwYXJhbSBwcmVWYWx1ZSBcclxuICAgKiBAcGFyYW0gZXJyb3JzIFxyXG4gICAqIEBwYXJhbSBjb250ZXh0IFxyXG4gICAqIEBwYXJhbSB0eXBlIFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHByaXZhdGUgYnVpbGRWaWV3Q2hhbmdlc0NvbnRleHQocHJvcGVydHlOYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnksIHByZVZhbHVlOiBhbnksIGVycm9ycz86IGFueSwgY29udGV4dD86IGFueSwgdHlwZTogVmlld0NoYW5nZVR5cGUgPSBWaWV3Q2hhbmdlVHlwZS5WYWx1ZUNoYW5nZWQpOiBWaWV3Q2hhbmdlIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgIHBhdGg6IFtwcm9wZXJ0eU5hbWVdLFxyXG4gICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgIHByZVZhbHVlOiBwcmVWYWx1ZSxcclxuICAgICAgZXJyb3JzOiBlcnJvcnMsXHJcbiAgICAgIGNvbnRleHRcclxuICAgIH07XHJcbiAgfVxyXG59XHJcbmV4cG9ydCB7IEJhc2VCaW5kaW5nT2JqZWN0IH0iXX0=