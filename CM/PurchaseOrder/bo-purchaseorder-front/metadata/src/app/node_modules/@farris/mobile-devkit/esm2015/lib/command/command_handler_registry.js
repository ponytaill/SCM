/**
 * 命令处理注册器相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { MetadataUtil, InjectFlags } from '../core/index';
import { COMMAND_HANDLER_META } from './decorators';
import { COMMAND_HANDLERS_TOKEN } from './command_handler';
/**
 * 命令处理注册器
 */
class CommandHandlerRegistry {
    /**
     * 构造函数
     * @param handlers 命令处理实例数组
     */
    constructor(injector) {
        this.injector = injector;
        const handlers = this.injector.get(COMMAND_HANDLERS_TOKEN, null, InjectFlags.Optional);
        this.handlerMap = new Map();
        if (handlers) {
            handlers.forEach((handler) => {
                this.regist(handler);
            });
        }
    }
    /**
     * 添加命令处理
     * @param  commandName    命令名称
     * @param  commandHandler 命令处理实例
     */
    set(commandName, commandHandler) {
        if (this.handlerMap.has(commandName)) {
            throw new Error(commandName + '对应的CommandHandler已经存在');
        }
        this.handlerMap.set(commandName, commandHandler);
    }
    /**
     * 获取命令处理
     * @param   commandName 命令名称
     * @returns 命令处理实例
     */
    get(commandName) {
        if (this.handlerMap.has(commandName) === false) {
            throw new Error('找不到' + commandName + '对应的CommandHandler');
        }
        return this.handlerMap.get(commandName);
    }
    /**
     * 注册命令处理
     * @param handlers 命令处理实例
     */
    regist(commandHandler) {
        // 根据metadata获取对应的Command名称
        const handlerMetadata = MetadataUtil.getClassMetadataByName(commandHandler.constructor, COMMAND_HANDLER_META);
        if (!handlerMetadata) {
            throw new Error('CommandHandler必须指定要处理的命令名称');
        }
        const commandName = handlerMetadata.commandName;
        this.set(commandName, commandHandler);
    }
}
export { CommandHandlerRegistry };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9oYW5kbGVyX3JlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2NvbW1hbmQvY29tbWFuZF9oYW5kbGVyX3JlZ2lzdHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNILE9BQU8sRUFBRSxZQUFZLEVBQVksV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxvQkFBb0IsRUFBMEIsTUFBTSxjQUFjLENBQUM7QUFDNUUsT0FBTyxFQUFFLHNCQUFzQixFQUFrQixNQUFNLG1CQUFtQixDQUFDO0FBRTNFOztHQUVHO0FBQ0gsTUFBTSxzQkFBc0I7SUFPMUI7OztPQUdHO0lBQ0gsWUFBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNwQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZGLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxHQUFHLEVBQTBCLENBQUM7UUFDcEQsSUFBSSxRQUFRLEVBQUU7WUFDWixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBdUIsRUFBRSxFQUFFO2dCQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLEdBQUcsQ0FBQyxXQUFtQixFQUFFLGNBQThCO1FBQzVELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDcEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxXQUFXLEdBQUcsdUJBQXVCLENBQUMsQ0FBQztTQUN4RDtRQUNELElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLEdBQUcsQ0FBQyxXQUFtQjtRQUM1QixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEtBQUssRUFBRTtZQUM5QyxNQUFNLElBQUksS0FBSyxDQUFDLEtBQUssR0FBRyxXQUFXLEdBQUcsbUJBQW1CLENBQUMsQ0FBQztTQUM1RDtRQUNELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7T0FHRztJQUNJLE1BQU0sQ0FBQyxjQUE4QjtRQUUxQywyQkFBMkI7UUFDM0IsTUFBTSxlQUFlLEdBQ25CLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDeEYsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7U0FDL0M7UUFDRCxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUMsV0FBVyxDQUFDO1FBQ2hELElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Q0FFRjtBQUVELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIOWRveS7pOWkhOeQhuazqOWGjOWZqOebuOWFs+WumuS5iVxyXG4gKiBAYXV0aG9yIFdpdHQ8aml3dEBpbnNwdXIuY29tPlxyXG4gKi9cclxuaW1wb3J0IHsgTWV0YWRhdGFVdGlsLCBJbmplY3RvciwgSW5qZWN0RmxhZ3MgfSBmcm9tICcuLi9jb3JlL2luZGV4JztcclxuaW1wb3J0IHsgQ09NTUFORF9IQU5ETEVSX01FVEEsIENvbW1hbmRIYW5kbGVyTWV0YWRhdGEgfSBmcm9tICcuL2RlY29yYXRvcnMnO1xyXG5pbXBvcnQgeyBDT01NQU5EX0hBTkRMRVJTX1RPS0VOLCBDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vY29tbWFuZF9oYW5kbGVyJztcclxuXHJcbi8qKlxyXG4gKiDlkb3ku6TlpITnkIbms6jlhozlmahcclxuICovXHJcbmNsYXNzIENvbW1hbmRIYW5kbGVyUmVnaXN0cnkge1xyXG5cclxuICAvKipcclxuICAgKiBDb21tYW5kSGFuZGxlciBNYXBcclxuICAgKi9cclxuICBwcml2YXRlIGhhbmRsZXJNYXA6IE1hcDxzdHJpbmcsIENvbW1hbmRIYW5kbGVyPjtcclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICogQHBhcmFtIGhhbmRsZXJzIOWRveS7pOWkhOeQhuWunuS+i+aVsOe7hFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICBjb25zdCBoYW5kbGVycyA9IHRoaXMuaW5qZWN0b3IuZ2V0KENPTU1BTkRfSEFORExFUlNfVE9LRU4sIG51bGwsIEluamVjdEZsYWdzLk9wdGlvbmFsKTtcclxuICAgIHRoaXMuaGFuZGxlck1hcCA9IG5ldyBNYXA8c3RyaW5nLCBDb21tYW5kSGFuZGxlcj4oKTtcclxuICAgIGlmIChoYW5kbGVycykge1xyXG4gICAgICBoYW5kbGVycy5mb3JFYWNoKChoYW5kbGVyOiBDb21tYW5kSGFuZGxlcikgPT4ge1xyXG4gICAgICAgIHRoaXMucmVnaXN0KGhhbmRsZXIpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOa3u+WKoOWRveS7pOWkhOeQhlxyXG4gICAqIEBwYXJhbSAgY29tbWFuZE5hbWUgICAg5ZG95Luk5ZCN56ewXHJcbiAgICogQHBhcmFtICBjb21tYW5kSGFuZGxlciDlkb3ku6TlpITnkIblrp7kvotcclxuICAgKi9cclxuICBwdWJsaWMgc2V0KGNvbW1hbmROYW1lOiBzdHJpbmcsIGNvbW1hbmRIYW5kbGVyOiBDb21tYW5kSGFuZGxlcikge1xyXG4gICAgaWYgKHRoaXMuaGFuZGxlck1hcC5oYXMoY29tbWFuZE5hbWUpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihjb21tYW5kTmFtZSArICflr7nlupTnmoRDb21tYW5kSGFuZGxlcuW3sue7j+WtmOWcqCcpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5oYW5kbGVyTWFwLnNldChjb21tYW5kTmFtZSwgY29tbWFuZEhhbmRsZXIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5ZG95Luk5aSE55CGXHJcbiAgICogQHBhcmFtICAgY29tbWFuZE5hbWUg5ZG95Luk5ZCN56ewXHJcbiAgICogQHJldHVybnMg5ZG95Luk5aSE55CG5a6e5L6LXHJcbiAgICovXHJcbiAgcHVibGljIGdldChjb21tYW5kTmFtZTogc3RyaW5nKTogQ29tbWFuZEhhbmRsZXIge1xyXG4gICAgaWYgKHRoaXMuaGFuZGxlck1hcC5oYXMoY29tbWFuZE5hbWUpID09PSBmYWxzZSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+aJvuS4jeWIsCcgKyBjb21tYW5kTmFtZSArICflr7nlupTnmoRDb21tYW5kSGFuZGxlcicpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlck1hcC5nZXQoY29tbWFuZE5hbWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5rOo5YaM5ZG95Luk5aSE55CGXHJcbiAgICogQHBhcmFtIGhhbmRsZXJzIOWRveS7pOWkhOeQhuWunuS+i1xyXG4gICAqL1xyXG4gIHB1YmxpYyByZWdpc3QoY29tbWFuZEhhbmRsZXI6IENvbW1hbmRIYW5kbGVyKSB7XHJcblxyXG4gICAgLy8g5qC55o2ubWV0YWRhdGHojrflj5blr7nlupTnmoRDb21tYW5k5ZCN56ewXHJcbiAgICBjb25zdCBoYW5kbGVyTWV0YWRhdGE6IENvbW1hbmRIYW5kbGVyTWV0YWRhdGEgPVxyXG4gICAgICBNZXRhZGF0YVV0aWwuZ2V0Q2xhc3NNZXRhZGF0YUJ5TmFtZShjb21tYW5kSGFuZGxlci5jb25zdHJ1Y3RvciwgQ09NTUFORF9IQU5ETEVSX01FVEEpO1xyXG4gICAgaWYgKCFoYW5kbGVyTWV0YWRhdGEpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21tYW5kSGFuZGxlcuW/hemhu+aMh+WumuimgeWkhOeQhueahOWRveS7pOWQjeensCcpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY29tbWFuZE5hbWUgPSBoYW5kbGVyTWV0YWRhdGEuY29tbWFuZE5hbWU7XHJcbiAgICB0aGlzLnNldChjb21tYW5kTmFtZSwgY29tbWFuZEhhbmRsZXIpO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IENvbW1hbmRIYW5kbGVyUmVnaXN0cnkgfTtcclxuIl19