/**
 * @fileoverview added by tsickle
 * Generated from: lib/page-modal.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter, RendererFactory2, NgZone, Injector, Optional } from '@angular/core';
import { FEModalBackdropComponent } from './page-modal-backdrop.component';
import { FEPageModalComponent } from './page-modal.component';
import { FEPageModalSidebarComponent } from './page-sidebar.component';
import { FEPageModalCLASS_NAME, FEPModalConfigDefaults, FEPageModalOptions, FPageModalTRANSITION_DURATIONS } from './page-modal-options.class';
import { FEPageModalRef } from './page-modal-ref.service';
import { Utils } from '@farris/ui-modal/utils';
import { ComponentLoaderFactory } from '@farris/ui-modal/component-loader';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@farris/ui-modal/component-loader";
var FEPageModalService = /** @class */ (function () {
    function FEPageModalService(rendererFactory, clf, _injector, ngZone) {
        this.clf = clf;
        this._injector = _injector;
        this.ngZone = ngZone;
        this.version = '0.0.6';
        this.config = FEPModalConfigDefaults;
        this.onShow = new EventEmitter();
        this.onShown = new EventEmitter();
        this.onHide = new EventEmitter();
        this.onHidden = new EventEmitter();
        this.isBodyOverflowing = false;
        this.originalBodyPadding = 0;
        this.scrollbarWidth = 0;
        this.modalsCount = 0;
        this.lastDismissReason = '';
        this.loaders = [];
        this._renderer = rendererFactory.createRenderer(null, null);
    }
    /**
     * @return {?}
     */
    FEPageModalService.prototype.showByComponent = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} content
     * @param {?=} config
     * @return {?}
     */
    FEPageModalService.prototype.showByUrl = /**
     * @param {?} content
     * @param {?=} config
     * @return {?}
     */
    function (content, config) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        System.import(content).then((/**
         * @param {?} moduleFactorys
         * @return {?}
         */
        function (moduleFactorys) {
            /** @type {?} */
            var moduleFactory = Object.values(moduleFactorys)[0];
            /** @type {?} */
            var moduleRef = moduleFactory.create(_this._injector);
            if (moduleRef._bootstrapComponents.length > 0) {
                /** @type {?} */
                var entryComponent = moduleRef._bootstrapComponents[0];
                /** @type {?} */
                var compFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(entryComponent);
                /** @type {?} */
                var compRef = compFactory.create(_this._injector);
                /** @type {?} */
                var fpm = _this.show(compRef, config);
                subject.next(fpm);
            }
            else {
                subject.next(null);
            }
        }));
        return subject;
    };
    /** Shows a modal */
    /**
     * Shows a modal
     * @param {?} content
     * @param {?=} config
     * @return {?}
     */
    FEPageModalService.prototype.show = /**
     * Shows a modal
     * @param {?} content
     * @param {?=} config
     * @return {?}
     */
    function (content, config) {
        if (!this.clf) {
            this.clf = this._injector.get(ComponentLoaderFactory);
        }
        if (!this.clf) {
            throw new Error("FEPageModalService Can't Load ComponentLoaderFactory!");
        }
        this.modalsCount++;
        /** @type {?} */
        var tempConfig = { dialogType: 'modal' };
        // 
        if (config.hasOwnProperty('dialogType') && config['dialogType'] == 'sidebar') {
            tempConfig['width'] = '60%';
        }
        this.config = Object.assign({}, FEPModalConfigDefaults, tempConfig, config);
        this._createLoaders(this.config['dialogType']);
        if (config['dialogType'] != 'sidebar') {
            this.checkDialogSize();
        }
        this._showBackdrop();
        this.lastDismissReason = null;
        return this._showModal(content);
    };
    /**
     * @param {?} level
     * @return {?}
     */
    FEPageModalService.prototype.hide = /**
     * @param {?} level
     * @return {?}
     */
    function (level) {
        if (this.modalsCount === 1) {
            this._hideBackdrop();
            this.resetScrollbar();
        }
        this.modalsCount = this.modalsCount >= 1 ? this.modalsCount - 1 : 0;
        this._hideModal(level);
        this.removeLoaders(level);
    };
    /**
     * @return {?}
     */
    FEPageModalService.prototype._showBackdrop = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var isBackdropEnabled = this.config.backdrop || this.config.backdrop === 'static';
        /** @type {?} */
        var isBackdropInDOM = !this.backdropRef || !this.backdropRef.instance.isShown;
        this._backdropLoader = this.clf.createLoader(null, null, this._renderer);
        if (this.modalsCount === 1) {
            this.removeBackdrop();
            if (isBackdropEnabled && isBackdropInDOM) {
                this._backdropLoader
                    .attach(FEModalBackdropComponent)
                    .to('body')
                    .show({ isAnimated: this.config.animated, dialogType: this.config['dialogType'] });
                this.backdropRef = this._backdropLoader._componentRef;
            }
        }
    };
    /**
     * @return {?}
     */
    FEPageModalService.prototype._hideBackdrop = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.backdropRef) {
            return;
        }
        this.backdropRef.instance.isShown = false;
        /** @type {?} */
        var duration = this.config.animated ? FPageModalTRANSITION_DURATIONS.BACKDROP : 0;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.removeBackdrop(); }), duration);
        }));
    };
    /**
     * @param {?} content
     * @return {?}
     */
    FEPageModalService.prototype._showModal = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        var _this = this;
        /** @type {?} */
        var modalLoader = this.loaders[this.loaders.length - 1];
        /** @type {?} */
        var bsModalRef = new FEPageModalRef();
        // 修改showType
        this.config.initialState['showType'] = this.config.dialogType;
        /** @type {?} */
        var modalContainerRef = modalLoader
            .provide({ provide: FEPageModalOptions, useValue: this.config })
            .provide({ provide: FEPageModalRef, useValue: FEPageModalRef })
            .attach(this.config.dialogType == 'sidebar' ? FEPageModalSidebarComponent : FEPageModalComponent)
            .to('body')
            .show({ content: content, isAnimated: this.config.animated, initialState: this.config.initialState, bsModalService: this });
        modalContainerRef.instance.level = this.getModalsCount();
        modalContainerRef.instance.dialogType = this.config.dialogType;
        modalContainerRef.instance.iframe = '';
        if (this.config.dialogType === 'iframe') {
            modalContainerRef.instance.iframe = content;
        }
        bsModalRef.close = (/**
         * @return {?}
         */
        function () {
            modalContainerRef.instance.close();
        });
        // 如果是消息类型的，出现滚动条就不响应动画了
        if (!this.config.fitContent) {
            modalContainerRef.instance.toCenter();
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                document.body.addEventListener('mousedown', _this._onMouseDown.bind(_this));
            }));
        }
        bsModalRef.content = modalLoader.getInnerComponent() || null;
        bsModalRef.dialog = modalContainerRef;
        modalContainerRef.instance['modalRef'] = bsModalRef;
        if (this.config.opened) {
            this.config.opened();
        }
        return bsModalRef;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FEPageModalService.prototype._onMouseDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        if (e.target.localName === 'modal-container' || e.target.classList.contains('farris-modal')) {
            this._renderer.addClass(e.target, 'animated');
            this._renderer.addClass(e.target, 'shake');
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this._renderer.removeClass(e.target, 'animated');
                    _this._renderer.removeClass(e.target, 'shake');
                }), 650);
            }));
            return false;
        }
    };
    /**
     * @param {?} level
     * @return {?}
     */
    FEPageModalService.prototype._hideModal = /**
     * @param {?} level
     * @return {?}
     */
    function (level) {
        /** @type {?} */
        var modalLoader = this.loaders[level - 1];
        if (modalLoader) {
            modalLoader.hide();
        }
    };
    /**
     * @return {?}
     */
    FEPageModalService.prototype.getModalsCount = /**
     * @return {?}
     */
    function () {
        return this.modalsCount;
    };
    /**
     * @return {?}
     */
    FEPageModalService.prototype.getCurrentModalContainer = /**
     * @return {?}
     */
    function () {
        return this.loaders[this.getModalsCount() - 1];
    };
    /**
     * @param {?} reason
     * @return {?}
     */
    FEPageModalService.prototype.setDismissReason = /**
     * @param {?} reason
     * @return {?}
     */
    function (reason) {
        this.lastDismissReason = reason;
    };
    /**
     * @return {?}
     */
    FEPageModalService.prototype.removeBackdrop = /**
     * @return {?}
     */
    function () {
        if (this._backdropLoader) {
            this._backdropLoader.hide();
        }
        this.backdropRef = null;
    };
    /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */
    /** Scroll bar tricks */
    /** @internal */
    /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */
    /** Scroll bar tricks */
    /**
     * \@internal
     * @return {?}
     */
    FEPageModalService.prototype.checkScrollbar = /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */
    /** Scroll bar tricks */
    /**
     * \@internal
     * @return {?}
     */
    function () {
        this.isBodyOverflowing = document.body.clientWidth < window.innerWidth;
        this.scrollbarWidth = this.getScrollbarWidth();
    };
    /**
     * @return {?}
     */
    FEPageModalService.prototype.setScrollbar = /**
     * @return {?}
     */
    function () {
        if (!document) {
            return;
        }
        this.originalBodyPadding = parseInt(window
            .getComputedStyle(document.body)
            .getPropertyValue('padding-right') || '0', 10);
        if (this.isBodyOverflowing) {
            document.body.style.paddingRight = this.originalBodyPadding +
                this.scrollbarWidth + "px";
        }
    };
    /**
     * @private
     * @return {?}
     */
    FEPageModalService.prototype.resetScrollbar = /**
     * @private
     * @return {?}
     */
    function () {
        document.body.style.paddingRight = this.originalBodyPadding + "px";
    };
    // thx d.walsh
    // thx d.walsh
    /**
     * @private
     * @return {?}
     */
    FEPageModalService.prototype.getScrollbarWidth = 
    // thx d.walsh
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var scrollDiv = this._renderer.createElement('div');
        this._renderer.addClass(scrollDiv, FEPageModalCLASS_NAME.SCROLLBAR_MEASURER);
        this._renderer.appendChild(document.body, scrollDiv);
        /** @type {?} */
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        this._renderer.removeChild(document.body, scrollDiv);
        return scrollbarWidth;
    };
    /**
     * @private
     * @param {?=} dialogType
     * @return {?}
     */
    FEPageModalService.prototype._createLoaders = /**
     * @private
     * @param {?=} dialogType
     * @return {?}
     */
    function (dialogType) {
        if (dialogType === void 0) { dialogType = 'modal'; }
        /** @type {?} */
        var loader;
        if (dialogType == 'sidebar') {
            loader = this.clf.createLoader(null, null, this._renderer);
        }
        else {
            loader = this.clf.createLoader(null, null, this._renderer);
        }
        this.copyEvent(loader.onBeforeShow, this.onShow);
        this.copyEvent(loader.onShown, this.onShown);
        this.copyEvent(loader.onBeforeHide, this.onHide);
        this.copyEvent(loader.onHidden, this.onHidden);
        this.loaders.push(loader);
    };
    /**
     * @private
     * @param {?} level
     * @return {?}
     */
    FEPageModalService.prototype.removeLoaders = /**
     * @private
     * @param {?} level
     * @return {?}
     */
    function (level) {
        this.loaders.splice(level - 1, 1);
        this.loaders.forEach((/**
         * @param {?} loader
         * @param {?} i
         * @return {?}
         */
        function (loader, i) {
            loader.instance.level = i + 1;
        }));
    };
    /**
     * @private
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    FEPageModalService.prototype.copyEvent = /**
     * @private
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    function (from, to) {
        var _this = this;
        from.subscribe((/**
         * @return {?}
         */
        function () {
            to.emit(_this.lastDismissReason);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    FEPageModalService.prototype.checkDialogSize = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newSize = Utils.checkDialogSize(parseInt(this.config.width + '', 10), parseInt(this.config.height + '', 10));
        if (this.config.width !== newSize.width) {
            this.config.width = newSize.width - 20;
        }
        if (this.config.height !== newSize.height) {
            this.config.height = newSize.height - 20;
        }
    };
    FEPageModalService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FEPageModalService.ctorParameters = function () { return [
        { type: RendererFactory2 },
        { type: ComponentLoaderFactory, decorators: [{ type: Optional }] },
        { type: Injector },
        { type: NgZone }
    ]; };
    /** @nocollapse */ FEPageModalService.ngInjectableDef = i0.defineInjectable({ factory: function FEPageModalService_Factory() { return new FEPageModalService(i0.inject(i0.RendererFactory2), i0.inject(i1.ComponentLoaderFactory, 8), i0.inject(i0.INJECTOR), i0.inject(i0.NgZone)); }, token: FEPageModalService, providedIn: "root" });
    return FEPageModalService;
}());
export { FEPageModalService };
if (false) {
    /** @type {?} */
    FEPageModalService.prototype.version;
    /** @type {?} */
    FEPageModalService.prototype.config;
    /** @type {?} */
    FEPageModalService.prototype.onShow;
    /** @type {?} */
    FEPageModalService.prototype.onShown;
    /** @type {?} */
    FEPageModalService.prototype.onHide;
    /** @type {?} */
    FEPageModalService.prototype.onHidden;
    /**
     * @type {?}
     * @protected
     */
    FEPageModalService.prototype.isBodyOverflowing;
    /**
     * @type {?}
     * @protected
     */
    FEPageModalService.prototype.originalBodyPadding;
    /**
     * @type {?}
     * @protected
     */
    FEPageModalService.prototype.scrollbarWidth;
    /**
     * @type {?}
     * @protected
     */
    FEPageModalService.prototype.backdropRef;
    /**
     * @type {?}
     * @private
     */
    FEPageModalService.prototype._backdropLoader;
    /**
     * @type {?}
     * @private
     */
    FEPageModalService.prototype.modalsCount;
    /**
     * @type {?}
     * @private
     */
    FEPageModalService.prototype.lastDismissReason;
    /**
     * @type {?}
     * @private
     */
    FEPageModalService.prototype.loaders;
    /**
     * @type {?}
     * @private
     */
    FEPageModalService.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    FEPageModalService.prototype.clf;
    /**
     * @type {?}
     * @private
     */
    FEPageModalService.prototype._injector;
    /** @type {?} */
    FEPageModalService.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,