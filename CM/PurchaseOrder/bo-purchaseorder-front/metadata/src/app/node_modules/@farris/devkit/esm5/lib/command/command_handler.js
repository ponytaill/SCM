import * as tslib_1 from "tslib";
import { InjectionToken } from '@angular/core';
import { Subject, BehaviorSubject, EMPTY } from 'rxjs';
import { concatMap, map, takeLast, take, takeUntil, throwIfEmpty } from 'rxjs/operators';
import { CommandContext } from './command_context';
import { TaskFlow } from './flow/index';
import { TranslateToken } from '../i18n/translate_token';
/**
 * 命令处理抽象类，所有具体的命令处理类必须继承它，并实现schedule方法。
 */
var CommandHandler = /** @class */ (function () {
    /**
     * 构造函数
     */
    function CommandHandler() {
        this.destroy$ = new Subject();
    }
    CommandHandler.prototype.dispose = function (options) {
        if (this.destroy$) {
            this.destroy$.next();
            this.destroy$.complete();
        }
        this.frameContext = null;
    };
    CommandHandler.prototype.ngOnDestroy = function () {
        this.dispose();
    };
    /**
     * 初始化
     */
    CommandHandler.prototype.init = function (frameContext, variableParseService) {
        this.frameContext = frameContext;
        this.parseService = variableParseService;
        this.taskFlow = new TaskFlow();
        this.schedule();
    };
    /**
     * 执行任务
     * @param command 要执行的命令
     * @return 最后一个任务的执行结果
     * @todo：按功能拆分小函数
     */
    CommandHandler.prototype.execute = function (command) {
        var _this = this;
        var lastTaskResult$ = new Subject();
        var taskFlow = this.taskFlow.clone();
        // setTimeout暂时不能去掉的原因：
        // 1、树表单加载数据，依赖TreeTableBinding里设置的全局变量，需要延后执行加载时机；
        // 2、关闭前命令需要延迟执行。
        setTimeout(function () {
            if (!_this.frameContext || _this.frameContext.isDisposed) {
                return EMPTY;
            }
            // 1、解析参数
            // 避免解析变量时修改了原始的command
            var _a = tslib_1.__assign({}, command).eventParam, eventParam = _a === void 0 ? null : _a;
            delete command.eventParam;
            var commandToExecute = JSON.parse(JSON.stringify(command));
            commandToExecute.params = _this.paramsTransform(commandToExecute.params);
            commandToExecute.params = _this.parseService.parse(commandToExecute.params, _this.frameContext, eventParam);
            command.eventParam = eventParam;
            commandToExecute.eventParam = eventParam;
            _this.transParamTypes(commandToExecute.params, commandToExecute.paramDescriptions);
            // 2、串联任务流
            var initContext = new CommandContext(commandToExecute, _this.frameContext);
            initContext.eventParam = command.eventParam || null;
            var context$ = new BehaviorSubject(initContext);
            var currentTask = taskFlow.getNext('', initContext);
            var highOrder$ = context$.pipe(concatMap(function (context) {
                var result$ = currentTask.execute(context);
                return result$.pipe(take(1), map(function (result) {
                    // 写入执行结果
                    context.results[currentTask.name] = result;
                    context.latestResult = result;
                    currentTask = taskFlow.getNext(currentTask.name, context);
                    // 操作控制流
                    if (currentTask) {
                        context$.next(context);
                    }
                    else {
                        context$.complete();
                    }
                    // 将结果流转换为context流
                    return context;
                }), throwIfEmpty(function () {
                    context$.complete();
                }));
            }));
            // 3、执行合并后的任务流
            highOrder$.pipe(takeLast(1)).subscribe({
                next: function (context) {
                    _this.waitForDestroy(context);
                    lastTaskResult$.next(context.latestResult);
                },
                error: function (error) {
                    _this.waitForDestroy(initContext);
                    _this.displayError(error);
                    lastTaskResult$.error(error || '');
                },
                complete: function () {
                    _this.waitForDestroy(initContext);
                    lastTaskResult$.complete();
                },
            });
        }, 0);
        return lastTaskResult$;
    };
    /**
     * 等待销毁
     * @param commandContext
     */
    CommandHandler.prototype.waitForDestroy = function (commandContext) {
        if (!commandContext) {
            return;
        }
        commandContext.clearResults();
        if (this.frameContext && this.frameContext.appContext && this.frameContext.appContext.destorySignal) {
            this.frameContext.appContext.destorySignal.pipe(takeUntil(this.destroy$)).subscribe(function () {
                if (commandContext) {
                    commandContext.dispose();
                    commandContext = null;
                }
            });
        }
    };
    /**
     * 显示错误信息
     */
    CommandHandler.prototype.displayError = function (error) {
        if (!error) {
            return;
        }
        if (!console || !console.error) {
            return;
        }
        console.error(error);
    };
    /**
     * 参数国际化转换方法
     */
    CommandHandler.prototype.paramsTransform = function (params) {
        var exp = /\{\{(\w+)\}\}/g;
        if (!params) {
            return null;
        }
        var translateService = this.frameContext && this.frameContext.injector && this.frameContext.injector.get(TranslateToken, null) || null;
        var pArray = Object.keys(params);
        var result = {};
        if (pArray.length === 0) {
            return params;
        }
        pArray.forEach(function (p) {
            var ele = params[p];
            if (ele && exp.test(ele) && translateService) {
                ele = ele.replace(exp, function ($1, $2) {
                    return translateService.transform($2, null);
                });
            }
            result[p] = ele;
        });
        return result;
    };
    /**
     * 添加任务，只有子类可以添加任务，外部不能访问
     * @param name  任务名称
     * @param func 任务函数
     */
    CommandHandler.prototype.addTask = function (name, func) {
        this.taskFlow.addNode(name, func);
    };
    /**
     * 添加任务，只有子类可以添加任务，外部不能访问
     * @param name  任务名称
     * @param func 任务函数
     */
    CommandHandler.prototype.addLink = function (from, to, condition) {
        this.taskFlow.addLink(from, to, condition);
    };
    /**
     * 插入任务
     * @param  name 要扩展的任务名称
     * @param  func 扩展函数
     */
    CommandHandler.prototype.insertTask = function (target, name, func) {
        throw new Error('Not Implemented');
    };
    /**
     * 插入任务
     * @param  name 要扩展的任务名称
     * @param  func 扩展函数
     */
    CommandHandler.prototype.afterTask = function (target, name, func) {
        throw new Error('Not Implemented');
    };
    /**
     * 替换任务
     * @param  name 要替换的任务名称
     * @param  func 替换函数
     */
    CommandHandler.prototype.replaceTask = function (name, func) {
        throw new Error('Not Implement');
    };
    /**
     * 调用方法
     */
    CommandHandler.prototype.invoke = function (serviceInstance, method, args, context) {
        this.setContextToServiceInstance(serviceInstance, context);
        var parsedArgs = this.parseService.parse(args, context, context.eventParam);
        return serviceInstance[method].apply(serviceInstance, tslib_1.__spread(parsedArgs));
    };
    /**
     * 为服务设置命令上下文
     * @todo
     * 通过这种方式存在很大问题：
     * 1、会覆盖掉已有的context，给开发人员造成困扰和调试成本；
     * 2、服务中依赖了一个没有声明的对象，不符合面向对象的原则。
     * 建议解决方案：
     * 1、将context修改为某个特殊属性名；
     * 2、先检测服务上有没有一个CommandContext类型的context属性，有的话再赋值，
     *    这就要求需要使用context的服务需要是实现一个IContext接口。
     */
    CommandHandler.prototype.setContextToServiceInstance = function (serviceInstance, context) {
        // 如果服务上已经存在context属性，并且该属性不是CommandContext类型，则不能覆盖
        var serviceContext = serviceInstance.context;
        if (serviceContext && (serviceContext instanceof CommandContext === false)) {
            return;
        }
        serviceInstance.context = context;
    };
    /**
     * 根据参数描述信息转换参数类型
     */
    CommandHandler.prototype.transParamTypes = function (params, paramDescriptions) {
        if (!paramDescriptions) {
            return;
        }
        var keys = Object.keys(params);
        keys.forEach(function (key) {
            if (!paramDescriptions[key] || !paramDescriptions[key].type) {
                return;
            }
            var parType = paramDescriptions[key].type;
            var value = params[key];
            if (value === undefined || value === null || typeof value === parType) {
                return; // 值不存在或类型匹配，无需处理
            }
            switch (parType) {
                case 'string':
                    // 其实转换前的参数都是string，这里不会走到
                    params[key] = value + '';
                    break;
                case 'int':
                case 'double':
                case 'number':
                    // 前端数值类型只有number，这里兼容命令构件上设置为int和double的情况
                    var numResult = Number(value);
                    if (isNaN(numResult)) {
                        throw Error("\u7C7B\u578B\u8F6C\u6362\u5931\u8D25\uFF0C\u53C2\u6570" + key + "\u503C\u4E3A" + value + "\uFF0C\u65E0\u6CD5\u8F6C\u6362\u4E3A" + parType + "\u7C7B\u578B\u3002");
                    }
                    params[key] = numResult;
                    break;
                case 'boolean':
                    var boolResult = void 0;
                    var strValue = (value + '').toLowerCase();
                    if (strValue === 'true') {
                        boolResult = true;
                    }
                    else if (strValue === 'false') {
                        boolResult = false;
                    }
                    else {
                        throw Error("\u7C7B\u578B\u8F6C\u6362\u5931\u8D25\uFF0C\u53C2\u6570" + key + "\u503C\u4E3A" + value + "\uFF0C\u65E0\u6CD5\u8F6C\u6362\u4E3A" + parType + "\u7C7B\u578B\u3002");
                    }
                    params[key] = boolResult;
                    break;
                case 'datetime':
                    // todo：日期时间暂不处理
                    break;
                case 'object':
                    // 表达式解析出来的参数，无需处理，按原类型返回
                    // todo: 输入参数是个json串，转成object
                    break;
                default:
                    break;
            }
        });
    };
    return CommandHandler;
}());
/**
 * 命令处理器注入Token
 */
var COMMAND_HANDLERS_TOKEN = new InjectionToken('@Farris Command Handlers');
export { CommandHandler, COMMAND_HANDLERS_TOKEN };
//# sourceMappingURL=data:application/json;base64,