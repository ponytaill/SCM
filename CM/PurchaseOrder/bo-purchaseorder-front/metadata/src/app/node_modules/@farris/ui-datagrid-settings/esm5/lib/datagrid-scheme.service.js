/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of, Subject } from "rxjs";
/**
 * 保存方案API
 * @type {?}
 */
var SCHEME_WEBAPI = '/api/runtime/sys/v1.0/querysolution';
/**
 * 获取方案列表API
 * @type {?}
 */
var SCHEME_WEBAPI_QUERY = SCHEME_WEBAPI + "/belongId/";
/**
 * 方案列表管理- 设默认、删除 API
 * @type {?}
 */
var SCHEME_WEBAPI_UPDATE = SCHEME_WEBAPI + "/batch";
/**
 * 权限验证
 * @type {?}
 */
var SCHEME_WEBAPI_Auth = '/api/runtime/sys/v1.0/querysolution/componentType/Datagrid';
/** @type {?} */
var LANGUAGE_WEBAPI = '/api/runtime/sys/v1.0/loginInfo?infoType=supportedLanguage';
var DatagridSchemeService = /** @class */ (function () {
    function DatagridSchemeService() {
        this.restService = null;
        this.state = {};
        this.schemeList$ = new Subject();
    }
    /**
     * @param {?} d
     * @param {?} gridId
     * @return {?}
     */
    DatagridSchemeService.prototype.update = /**
     * @param {?} d
     * @param {?} gridId
     * @return {?}
     */
    function (d, gridId) {
        if (!this.state[gridId]) {
            this.state[gridId] = {};
        }
        this.state[gridId] = Object.assign(this.state[gridId], d);
    };
    /**
     * @param {?} httpSer
     * @return {?}
     */
    DatagridSchemeService.prototype.setRestService = /**
     * @param {?} httpSer
     * @return {?}
     */
    function (httpSer) {
        if (httpSer && httpSer['befRepository']) {
            this.restService = httpSer['befRepository']['restService'];
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridSchemeService.prototype.getWebFormKey = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var webformHash = window.location.hash.split('?')[0];
        return webformHash.substring(webformHash.lastIndexOf('/') + 1);
    };
    /**
     * @param {?} gridId
     * @return {?}
     */
    DatagridSchemeService.prototype.getSchemeKey = /**
     * @param {?} gridId
     * @return {?}
     */
    function (gridId) {
        /** @type {?} */
        var formKey = this.getWebFormKey();
        return formKey + "_DatagridScheme_" + gridId;
    };
    /**
     * @param {?} gridID
     * @return {?}
     */
    DatagridSchemeService.prototype.getSchemeList = /**
     * @param {?} gridID
     * @return {?}
     */
    function (gridID) {
        /** @type {?} */
        var uri = SCHEME_WEBAPI_QUERY + this.getSchemeKey(gridID);
        if (this.restService) {
            return this.restService.invoke(uri, 'GET', null, null, false);
        }
    };
    /**
     * @param {?} scheme
     * @param {?} gridID
     * @param {?=} isUpdate
     * @return {?}
     */
    DatagridSchemeService.prototype.saveScheme = /**
     * @param {?} scheme
     * @param {?} gridID
     * @param {?=} isUpdate
     * @return {?}
     */
    function (scheme, gridID, isUpdate) {
        if (isUpdate === void 0) { isUpdate = false; }
        if (this.restService) {
            /** @type {?} */
            var httpMethod = isUpdate ? 'PUT' : 'POST';
            scheme.belongId = this.getSchemeKey(gridID);
            return this.restService.invoke(SCHEME_WEBAPI, httpMethod, null, { body: scheme }, false);
        }
    };
    /**
     * @param {?} param
     * @param {?} gridID
     * @return {?}
     */
    DatagridSchemeService.prototype.updateScheme = /**
     * @param {?} param
     * @param {?} gridID
     * @return {?}
     */
    function (param, gridID) {
        if (!param) {
            return of(false);
        }
        /** @type {?} */
        var belongId = this.getSchemeKey(gridID);
        param.belongId = belongId;
        if (param.belongId) {
            return this.restService.invoke(SCHEME_WEBAPI_UPDATE, 'PUT', null, { body: param }, false);
        }
    };
    /**
     * @param {?} gridId
     * @param {...?} statePro
     * @return {?}
     */
    DatagridSchemeService.prototype.getStateValue = /**
     * @param {?} gridId
     * @param {...?} statePro
     * @return {?}
     */
    function (gridId) {
        var statePro = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            statePro[_i - 1] = arguments[_i];
        }
        /** @type {?} */
        var dgState = this.state[gridId];
        if (dgState) {
            if (statePro && statePro.length) {
                return statePro.reduce((/**
                 * @param {?} r
                 * @param {?} c
                 * @return {?}
                 */
                function (r, c) {
                    return r[c];
                }), dgState);
            }
            return dgState;
        }
        return null;
    };
    /**
     * @private
     * @param {?} gridId
     * @param {?} propertyName
     * @param {?} value
     * @return {?}
     */
    DatagridSchemeService.prototype.updateStateValue = /**
     * @private
     * @param {?} gridId
     * @param {?} propertyName
     * @param {?} value
     * @return {?}
     */
    function (gridId, propertyName, value) {
        var _a;
        this.update((_a = {}, _a[propertyName] = value, _a), gridId);
    };
    /**
     * @param {?} gridId
     * @param {?} newSchemeList
     * @return {?}
     */
    DatagridSchemeService.prototype.setSchemeList = /**
     * @param {?} gridId
     * @param {?} newSchemeList
     * @return {?}
     */
    function (gridId, newSchemeList) {
        this.updateStateValue(gridId, 'list', newSchemeList);
        this.schemeList$.next(newSchemeList);
    };
    /**
     * @param {?} gridId
     * @param {?} schemeName
     * @return {?}
     */
    DatagridSchemeService.prototype.hasSchemeName = /**
     * @param {?} gridId
     * @param {?} schemeName
     * @return {?}
     */
    function (gridId, schemeName) {
        /** @type {?} */
        var schemeList = this.getStateValue(gridId, 'list');
        if (!schemeList || !schemeList.length) {
            return false;
        }
        if (typeof schemeName === 'string') {
            return !!schemeList.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.name === schemeName.trim(); }));
        }
        else {
            if (typeof schemeName === 'object') {
                /** @type {?} */
                var replayNames_1 = [];
                schemeList.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    /** @type {?} */
                    var currentNames = Object.values(n.name);
                    for (var k in schemeName) {
                        if (currentNames.includes(schemeName[k])) {
                            replayNames_1.push(k);
                        }
                    }
                }));
                return replayNames_1;
            }
        }
    };
    /**
     * @return {?}
     */
    DatagridSchemeService.prototype.checkAuthority = /**
     * @return {?}
     */
    function () {
        return this.restService.invoke(SCHEME_WEBAPI_Auth, 'GET', null, null, false);
    };
    /**
     * @return {?}
     */
    DatagridSchemeService.prototype.getLanguages = /**
     * @return {?}
     */
    function () {
        return this.restService.invoke(LANGUAGE_WEBAPI, 'GET', null, null, false);
    };
    return DatagridSchemeService;
}());
export { DatagridSchemeService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.restService;
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.state;
    /** @type {?} */
    DatagridSchemeService.prototype.schemeList$;
}
//# sourceMappingURL=data:application/json;base64,