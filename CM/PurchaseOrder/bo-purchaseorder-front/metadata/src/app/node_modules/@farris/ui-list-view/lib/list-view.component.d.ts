import { OnInit, AfterContentInit, ElementRef, TemplateRef, EventEmitter, Renderer2, AfterViewInit, SimpleChanges, OnChanges, ChangeDetectorRef } from '@angular/core';
import { PaginationControlsComponent } from '@farris/ui-pagination';
export declare class ListViewComponent implements OnInit, OnChanges, AfterContentInit, AfterViewInit {
    private el;
    private renderer;
    private cdr;
    headerTemplate: TemplateRef<any>;
    listTemplate: TemplateRef<any>;
    footerTemplate: TemplateRef<any>;
    emptyDataTemplate: TemplateRef<any>;
    listGroup: ElementRef;
    pager: PaginationControlsComponent;
    /** 列表数据 */
    data: any[];
    id: string;
    /** 数据为空是否展示默认 */
    showEmpty: boolean;
    /** 是否自定义空数据模板 */
    emptyTemplate: boolean;
    /** 是否支持多选 默认为false */
    multipleSelect: boolean;
    /** 是否支持分页 默认false */
    supportPaging: boolean;
    pagerOnServer: boolean;
    pageSize: number;
    pageIndex: number;
    /** 启用跨页多选 */
    enableMorePageSelect: boolean;
    showSelectedList: boolean;
    selectedItemFormat: (item: any) => string;
    /**
     * 保持选中状态，默认为 true； 启用多选后有效。
     * 当设为false时，选中项再次点击将取消选中状态
     */
    keepSelect: boolean;
    fill: boolean;
    cardLayout: boolean;
    _activeIndex: number;
    activeIndex: number;
    listClassName: string;
    /**
     * 勾选值
     */
    checkValues: any[];
    checkValuesChange: EventEmitter<any[]>;
    checkItems: any[];
    checkItemsChange: EventEmitter<{
        items: any[];
        instance: any;
    }>;
    showPageList: boolean;
    showPageInfo: boolean;
    showPageNumber: boolean;
    showGotoInput: boolean;
    private _pageList;
    pageList: number[];
    private _total;
    total: any;
    /** 作为唯一标识的数据key值 如果没传 唯一标识为index值 */
    listidName: string;
    readonly listviewFill: boolean;
    /** 点击某一行后 */
    listClick: EventEmitter<{}>;
    /** 多选框 选中状态变化 */
    checkChange: EventEmitter<{}>;
    pageChanged: EventEmitter<{}>;
    pageSizeChanged: EventEmitter<{}>;
    /** 当前展示列表数据 */
    currentData: any[];
    /** 选中的列表数组 */
    selectDataList: any[];
    /** 跨页多选记录 */
    selectDataListWithOtherPager: any[];
    clickItem: any;
    maxSize: number;
    directionLinks: boolean;
    autoHide: boolean;
    responsive: boolean;
    paginationOptions: any;
    labels: any;
    mouseInSelectedList: boolean;
    openSelectedList: boolean;
    constructor(el: ElementRef, renderer: Renderer2, cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    /** 默认搜索模板 点击搜索 */
    searchList(searchField: any): {
        listdata: any[];
        searchValue: any;
        length: number;
    };
    /** 点击某一列事件 */
    listSelect(event: any, listItem: any, index: any, checkChangeEvent?: boolean): void;
    /** 获得每一行list 唯一标识 */
    getKey(list: any, index: any): any;
    /** checkbox状态变化 */
    getSelect(event: any, changeData: any, i: any): void;
    /** 排序事件 */
    sort(sortkeyName: any, sortType?: string): {
        sortResult: {
            listdata: any[];
            sortkeyName: any;
            sortType: string;
        };
    };
    selectRow(primaryValue: any): void;
    private compare;
    getItemActive(item: any): boolean;
    onPageChange(page: {
        pageIndex: number;
        pageSize: number;
    }): void;
    onPageSizeChange(pageSize: number): void;
    getCurrentData(): any[];
    getSelectData(): any[];
    /** 支持重新设置listview数据 */
    setData(listviewData: any): void;
    dataInit(): void;
    private updateDataListForMorePager;
    /** 全选 */
    listCheckAll(): void;
    /** 取消全选 */
    listCheckAllCancel(): void;
    /**
     * 勾选行
     * @param ids ids
     */
    checkRows(ids: any[]): void;
    private onCheckValuesChange;
    private differenceBy;
    private sameBy;
    onMouseEnter($event: any): void;
    closeSelectedList(): void;
    onDelSelectedItem(id: any): void;
    onClearSelected($event: any): void;
    onSelectListPanelClose($event: any): void;
    private updateCheckedValues;
    clearCheckeds(clearAll?: boolean, emit?: boolean): void;
    private _setItemsCheckedStatus;
    unCheckItems(ids: number[] | string[] | object[], emit?: boolean): void;
    checkedItems(ids: object[], emit?: boolean): void;
}
