/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Injector, ChangeDetectorRef, ElementRef, ViewChild, EventEmitter, Output } from '@angular/core';
import { NgForm } from '@angular/forms';
import { DatagridSettingsComponent } from '../datagrid-settings.component';
export class ColumnGroupSettingComponent {
    /**
     * @param {?} injector
     * @param {?} gridSettingComponentRef
     * @param {?} cd
     */
    constructor(injector, gridSettingComponentRef, cd) {
        this.injector = injector;
        this.gridSettingComponentRef = gridSettingComponentRef;
        this.cd = cd;
        this.fields = [];
        this.formatColumns = [];
        this.groupFields = [];
        this.groupFieldsChange = new EventEmitter();
        this.formatColumnsChange = new EventEmitter();
        this.groupColumns = [];
        this.allowGroupColumns = [];
        this.activeCalculationCol = null;
        this.showSelectColumnsPanel = false;
        this.summaryItems = [];
        this.summaryItems2 = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.summaryItems = this.gridSettingComponentRef.summaryItems;
        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;
        this.setGroupColumns();
        this.registerEventHandle();
        this.initCalculationColumns();
        if (this.colForm) {
            this.colForm.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                if (!this.colForm.pristine) {
                    this.formatColumnsChange.emit(this.formatColumns);
                }
            }));
        }
        this.formatColumns.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            this.checkColumnOptions(n);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.formatColumns && !changes.formatColumns.isFirstChange()) {
            this.formatColumns.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                this.checkColumnOptions(n);
            }));
            this.setGroupColumns();
            this.initCalculationColumns();
        }
    }
    /**
     * @private
     * @return {?}
     */
    initCalculationColumns() {
        if (this.formatColumns) {
            this.activeCalculationCol = this.formatColumns[0];
        }
    }
    /**
     * @private
     * @return {?}
     */
    registerEventHandle() {
        this.groupingSettingEl.nativeElement.addEventListener('click', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.target !== this.selectcolumnspanel.nativeElement) {
                this.showSelectColumnsPanel = false;
            }
        }), false);
    }
    /**
     * @private
     * @return {?}
     */
    setGroupColumns() {
        if (this.groupFields && this.groupFields.length) {
            this.groupColumns = this.groupFields.map((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                return this.columns[0].find((/**
                 * @param {?} col
                 * @return {?}
                 */
                col => col.field === f));
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n));
        }
        else {
            this.groupColumns = [];
        }
        this.onGroupFieldsChange();
    }
    /**
     * @private
     * @return {?}
     */
    getAllowGroupingColumns() {
        return this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.allowGrouping || n.allowGrouping === undefined));
    }
    /**
     * @private
     * @return {?}
     */
    onGroupFieldsChange() {
        this.groupFieldsChange.emit(this.groupFields);
    }
    /**
     * @private
     * @param {?} col
     * @return {?}
     */
    checkColumnOptions(col) {
        if (col) {
            if (col.groupFooter === undefined) {
                col.groupFooter = { options: { calculationType: -1 } };
            }
            else {
                col.groupFooter.options = col.groupFooter.options || { calculationType: -1 };
                if (col.groupFooter.options.calculationType === undefined) {
                    col.groupFooter.options.calculationType = -1;
                }
            }
            // if (this.activeField.footer === undefined) {
            //     this.activeField.footer =  { options: {calculationType: -1} };
            // } else {
            //     this.activeField.footer.options = this.activeField.footer.options || {calculationType: -1};
            //     if (this.activeField.footer.options.calculationType === undefined) {
            //         this.activeField.footer.options.calculationType = -1;
            //     }
            // }
        }
    }
    /**
     * 显示或隐藏字段选取面板
     * @param {?} $event
     * @return {?}
     */
    toggleGroupingColumnPanel($event) {
        $event.stopPropagation();
        this.showSelectColumnsPanel = !this.showSelectColumnsPanel;
        this.allowGroupColumns = this.getAllowGroupingColumns();
    }
    /**
     * 添加分组字段
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    addGroupColumn($event, col) {
        $event.stopPropagation();
        if (this.groupFields.indexOf(col.field) === -1) {
            this.groupColumns = [...this.groupColumns, col];
            this.groupFields = this.groupColumns.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
            this.onGroupFieldsChange();
            this.showSelectColumnsPanel = false;
        }
    }
    /**
     * 移除分组字段
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onRemoveGroupingField($event, col) {
        $event.stopPropagation();
        this.groupFields = this.groupFields.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n !== col.field));
        this.setGroupColumns();
    }
    /**
     * 拖动分组字段进行排序
     * @param {?} $event
     * @return {?}
     */
    onGroupingFieldDropped($event) {
        console.log('grouping field droped.', $event);
        const { removedIndex, addedIndex } = $event;
        /** @type {?} */
        const removedItem = this.groupFields.splice(removedIndex, 1);
        this.groupFields.splice(addedIndex, 0, ...removedItem);
        this.setGroupColumns();
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onFieldClick($event, col) {
        this.activeCalculationCol = col;
    }
}
ColumnGroupSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'column-group-setting',
                template: "<div #groupingSetting class=\"d-flex flex-column flex-fill column-group-setting\">\r\n\r\n    <div region=\"north\" class=\"north d-flex flex-column group-fields\" style=\"height: 78px; \">\r\n        <div class=\"title\">\r\n            {{'datagrid.settings.grouppingField' | locale }}\r\n            <span class=\"text-warning\"> ({{'datagrid.settings.moreGrouppingFieldWarningMessage' | locale }})</span>\r\n        </div>\r\n        <div #groupfieldcontainer class=\"flex-fill p-2 all-fields\">\r\n            <ul class=\"list-group\" style=\"display: inline-block;\"  column-group-drag (drop)=\"onGroupingFieldDropped($event)\">\r\n                <li class=\"list-group-item list-group-item-action btn btn-light smooth-dnd-draggable-wrapper group-field\"\r\n                *ngFor=\"let item of groupColumns\">\r\n                    {{ item.title }}\r\n                    <span class=\"f-icon f-icon-close\" style=\"cursor: pointer;\" title=\"{{'datagrid.settings.removeGrouppingFieldTip' | locale }}\" (click)=\"onRemoveGroupingField($event, item)\"></span>\r\n                </li>\r\n\r\n                <li class=\"list-group-item list-group-item-action btn btn-light btn-add-groupfield\" title=\"{{'datagrid.settings.addGrouppingFieldTip' | locale }}\"\r\n                    *ngIf=\"!groupFields || groupFields.length < 3\" (click)=\"toggleGroupingColumnPanel($event)\">\r\n                   <span class=\"f-icon f-icon-add\" style=\"font-size: 24px;\"></span>\r\n                </li>\r\n            </ul>\r\n            <div #selectcolumnspanel class=\"group-field-panel\" [style.display]=\"showSelectColumnsPanel? '': 'none'\"\r\n            [style.width.px]=\"groupfieldcontainer.offsetWidth - 16\">\r\n                <ul class=\"list-group\">\r\n                    <li class=\"list-group-item list-group-item-action btn btn-light\" *ngFor=\"let item of allowGroupColumns\"\r\n                    (click)=\"addGroupColumn($event, item)\" [style.display]=\"groupFields?.indexOf(item.field) > -1 ? 'none': ''\">\r\n                        {{ item.title }}\r\n                    </li>\r\n                </ul>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n    <div region=\"center\" class=\"center  d-flex flex-column flex-fill\" style=\"overflow:hidden;\">\r\n        <div class=\"group-sum-fields\">\r\n            {{'datagrid.settings.grouppingSummary' | locale}}\r\n        </div>\r\n        <div class=\"flex-fill p-2\" style=\" background-color: #fff; overflow: auto;\">\r\n            <div class=\"d-flex flex-row flex-fill dg-column-format-setting\" style=\"height: 100%\">\r\n                <div region=\"west\" class=\"west d-flex flex-column\" style=\"width: 360px; min-width:260px;overflow: hidden;\">\r\n                    <div style=\"overflow: auto;padding-right: 5px;\" class=\"flex-fill\">\r\n                        <ul class=\"list-group  list-group-flush\">\r\n                            <li class=\"list-group-item list-group-item-action format-setting-column\"\r\n                            *ngFor=\"let item of formatColumns\"\r\n                            [class.active]=\"activeCalculationCol && activeCalculationCol.field === item.field\"\r\n                            (click)=\"onFieldClick($event, item)\"\r\n                             >\r\n                                {{ item.title }}\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                 \r\n                </div>\r\n                <div region=\"center\" class=\"center flex-fill\" style=\"overflow:auto;padding: 0 10px; padding-left: 20px\">\r\n                    <form #groupSumform=\"ngForm\">\r\n                        <div class=\"farris-group-wrap\">\r\n                            <div class=\"form-group farris-form-group\">\r\n                                <label for=\"hpinput01\" class=\"col-form-label\">\r\n                                    <span class=\"farris-label-text\">{{'datagrid.settings.grouppingSummaryType' | locale}}</span>\r\n                                </label>\r\n                                <div class=\"farris-input-wrap\">\r\n                                   \r\n                                    <farris-combo-list name=\"groupFooter.options.calculationType\" \r\n                                    [data]=\" activeCalculationCol?.dataType === 'number'?  summaryItems : summaryItems2 \" \r\n                                    [editable]=\"false\"\r\n                                    [(ngModel)]=\"activeCalculationCol?.groupFooter.options.calculationType\"\r\n                                    [idField]=\"'value'\"\r\n                                    [textField]=\"'title'\"\r\n                                    [enableClear]=\"false\"></farris-combo-list>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"farris-group-wrap\" *ngIf=\"activeCalculationCol?.groupFooter.options.calculationType == -1\">\r\n                            <div class=\"form-group farris-form-group\">\r\n                                <label for=\"hpinput01\" class=\"col-form-label\">\r\n                                    <span class=\"farris-label-text\">{{'datagrid.settings.grouppingSummaryText' | locale}}</span>\r\n                                </label>\r\n                                <div class=\"farris-input-wrap\">\r\n                                    <input type=\"input\" name=\"groupFooter.options.text\" class=\"form-control\" [(ngModel)]=\"activeCalculationCol?.groupFooter.options.text\">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n               \r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    </div>\r\n\r\n</div>",
                styles: [`
        .column-group-setting{ height: 100%; background-color: #ffffff; padding: 0 10px 10px 10px}
        .smooth-dnd-ghost.group-field {
            z-index: 999999999 !important;
        }
        .active {
            background-color: rgb(231 241 255);
            color: rgb(0 0 0);
        }
        .column-group-setting .group-field {
            float: left;max-width: 200px;margin-right: 10px;
            width: auto; padding: 5px;padding-right: 30px;
            border-radius: 20px;padding-left: 10px; cursor:move
        }
        .group-field .f-icon { position: absolute;right: 2px;top: 7px; }
        .btn-add-groupfield{float: left;width: 32px;padding: 0px;padding-top: 3px; border-radius: 20px;}
        .group-field-panel{
            height: 260px; border-radius: 5px; z-index: 3;position: absolute;
            background: rgb(255 255 255); box-shadow: 1px 1px 4px rgb(156 155 155 / 75%);
            overflow: hidden;
            overflow-y: auto;
        }
        .group-field-panel ul {
            display: inline-block;margin: 20px;margin-top: 5px;
        }
        .group-field-panel li {
            float: left; cursor: pointer;max-width: 200px;margin-right: 10px;width: auto;
            padding: 10px; min-width: 80px; margin-top: 15px; text-align: center;
        }
        .format-setting-column {
            background: rgba(247,248,251,0.6);
            padding: 7px 10px;
            margin-bottom: 5px;
            border: 1px solid rgba(233,236,243,0.45);
            border-radius: 5px;
        }
        .format-setting-column.active {
            border: 1px solid rgb(42 135 255);
            background: rgb(239 247 255);
            border-top: 1px solid rgb(42 135 255)!important;
            border-bottom: 1px solid rgb(42 135 255)!important;
        }

        `]
            }] }
];
/** @nocollapse */
ColumnGroupSettingComponent.ctorParameters = () => [
    { type: Injector },
    { type: DatagridSettingsComponent },
    { type: ChangeDetectorRef }
];
ColumnGroupSettingComponent.propDecorators = {
    columns: [{ type: Input }],
    fields: [{ type: Input }],
    formatColumns: [{ type: Input }],
    groupFields: [{ type: Input }],
    groupFieldsChange: [{ type: Output }],
    formatColumnsChange: [{ type: Output }],
    groupingSettingEl: [{ type: ViewChild, args: ['groupingSetting',] }],
    selectcolumnspanel: [{ type: ViewChild, args: ['selectcolumnspanel',] }],
    colForm: [{ type: ViewChild, args: ['groupSumform',] }]
};
if (false) {
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.columns;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.fields;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.formatColumns;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.groupFields;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.groupFieldsChange;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.formatColumnsChange;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.groupingSettingEl;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.selectcolumnspanel;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.colForm;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.groupColumns;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.allowGroupColumns;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.activeCalculationCol;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.showSelectColumnsPanel;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.summaryItems;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.summaryItems2;
    /**
     * @type {?}
     * @private
     */
    ColumnGroupSettingComponent.prototype.injector;
    /** @type {?} */
    ColumnGroupSettingComponent.prototype.gridSettingComponentRef;
    /**
     * @type {?}
     * @private
     */
    ColumnGroupSettingComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,