/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, NgZone, Injector, Renderer2, ViewEncapsulation, ChangeDetectorRef, HostListener } from '@angular/core';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @Company: Inspur
 * @Version: v0.0.1
 * @Date: 2019-03-12 18:21:51
 * @LastEditTime: 2019-03-13 13:36:58
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { of } from 'rxjs';
var LanguageTextPanelComponent = /** @class */ (function () {
    function LanguageTextPanelComponent(el, ngzone, injector, render) {
        this.el = el;
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.opened = false;
        this.width = 365;
        this.height = 200;
        this.items = [];
        this.data = {};
        this.maxWords = null;
        this.itemClick = new EventEmitter();
        this.hidePanel = new EventEmitter();
        this.showPanel = new EventEmitter();
        this.currentItem = undefined;
        this.languageInputRef = null;
        this.panelClickHandler = undefined;
        this.cd = this.injector.get(ChangeDetectorRef);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.onEnterHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onItemClick(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.onEscHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.hide(event);
    };
    /**
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.panelClickHandler = _this.render.listen(_this.el.nativeElement, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e) {
                    e.stopPropagation();
                }
                // let name = e.target.nodeName || e.target.tagName;
                // if (!name) {
                //     name = e.target.path[0].localeName;
                // }
                // name = name.toLowerCase();
                if (_this.inputRef) {
                    _this.inputRef.lts.hide();
                }
                return false;
            }));
        }));
    };
    /**
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.opened = false;
        if (this.panelClickHandler) {
            this.panelClickHandler();
        }
    };
    /**
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.getPositionStyles = /**
     * @return {?}
     */
    function () {
        return {
            left: this.left + 'px',
            top: this.top + 'px',
            width: this.width + 'px',
        };
    };
    /**
     * @private
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.getPanelDivElement = /**
     * @private
     * @return {?}
     */
    function () {
        return this.el.nativeElement.querySelector('.language-textbox-panel');
    };
    /**
     * @private
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.resetPanelPosition = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var panelEle = this.getPanelDivElement();
        if (panelEle) {
            /** @type {?} */
            var panelHeight = panelEle.offsetHeight;
            /** @type {?} */
            var rect = this.inputRef.input.el.nativeElement.getBoundingClientRect();
            /** @type {?} */
            var winHeight = window.innerHeight;
            /** @type {?} */
            var postop = rect.top;
            if (winHeight - postop - rect.height < panelHeight) {
                postop = postop - panelHeight;
            }
            else {
                postop = postop + rect.height;
            }
            /** @type {?} */
            var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
            postop += scrollTop;
            panelEle.style.top = postop + "px";
        }
        return panelEle;
    };
    /**
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.setInputFocus = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // 第1个input 获得焦点
        // 获取当前语言的索引，根据索引值定位 input
        /** @type {?} */
        var el = this.getPanelDivElement();
        if (!el) {
            return;
        }
        /** @type {?} */
        var focusInput = el.querySelector('input');
        if (this.currentItem && (!this.languageInputRef || this.languageInputRef['autoFocus'])) {
            /** @type {?} */
            var idx = this.items.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.code === _this.currentItem.code; }));
            if (idx > -1) {
                focusInput = el.querySelectorAll('input')[idx];
            }
        }
        if (focusInput) {
            focusInput.focus();
        }
    };
    /**
     * @param {?} input
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.show = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        var _this = this;
        this.inputRef = input;
        this.opened = true;
        if (this.cd) {
            this.cd.detectChanges();
        }
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var el = _this.resetPanelPosition();
            if (!el) {
                return;
            }
            /** @type {?} */
            var transitionFlag = true;
            el.addEventListener('transitionend', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e.target === e.currentTarget && transitionFlag) {
                    transitionFlag = false;
                    _this.showPanel.emit(_this);
                }
            }), false);
            // this.render.removeClass(el, 'hide');
            _this.render.addClass(el, 'f-area-show');
        }));
        return of({ element: this.el });
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.hide = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        this.opened = false;
        /** @type {?} */
        var el = this.getPanelDivElement();
        // this.render.addClass(el, 'f-area-hide');
        this.hidePanel.emit();
        if ($event) {
            $event.stopPropagation();
            return false;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.onItemClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // this.currentItem = item;
        this.itemClick.emit(this.data);
        $event.stopPropagation();
        return false;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LanguageTextPanelComponent.prototype.inputClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        return false;
    };
    LanguageTextPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'language-textbox-panel',
                    template: "\n        <div *ngIf=\"opened\" class=\"language-textbox-panel f-area-hide\" [ngStyle]=\"getPositionStyles()\" (click)=\"inputClick($event)\">\n            <ul class=\"list-group\">\n                <li class=\"list-group-item border-0 p-2 px-2\"  *ngFor=\"let item of items\">\n                    <div class=\"farris-group-wrap form-inline farris-form-inline\">\n                        <div class=\"form-group farris-form-group\">\n                            <label for=\"hpinput01\" class=\"col-form-label\">\n                                <span class=\"farris-label-text\" [attr.title]=\"'languageLabel.'+item.code | locale: item.name\">\n                                    {{ 'languageLabel.'+item.code | locale: item.name }}</span>\n                            </label>\n                            <div class=\"farris-input-wrap\">\n                                <input type=\"input\" (click)=\"inputClick($event)\" maxlength=\"{{maxWords? maxWords[item.code] : ''}}\" [(ngModel)]=\"data[item.code]\" class=\"form-control\">\n                            </div>\n                        </div>\n                    </div>\n                </li>\n                <li class=\"list-group-item border-0 p-2 px-3 text-right\">\n                    <button class=\"btn btn-secondary mr-2\" (click)=\"hide($event)\">{{ 'languageLabel.cancel'| locale: '\u53D6\u6D88' }}</button>\n                    <button class=\"btn btn-primary\" (click)=\"onItemClick($event)\">{{ 'languageLabel.ok'| locale: '\u786E\u5B9A' }}</button>\n                </li>\n            </ul>\n        </div>\n    ",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".language-textbox-panel {\n            overflow: hidden;\n            overflow-y: auto;\n            padding: 5px;\n            position: absolute;\n            z-index: 99999;\n            background: white;\n            box-shadow: 2px 2px 5px #c6c6c6;\n        }\n\n        .language-textbox-panel .dropdown-menu {\n            left: -5px;\n            box-shadow: 0px 3px 6px 0px rgba(0, 0, 0, 0.37);\n            position: relative;\n        }\n\n        .language-selected {\n            background-color: #1890ff!important;\n            color: #fff;\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    LanguageTextPanelComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Injector },
        { type: Renderer2 }
    ]; };
    LanguageTextPanelComponent.propDecorators = {
        opened: [{ type: Input }],
        left: [{ type: Input }],
        top: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        items: [{ type: Input }],
        data: [{ type: Input }],
        maxWords: [{ type: Input }],
        itemClick: [{ type: Output }],
        hidePanel: [{ type: Output }],
        showPanel: [{ type: Output }],
        onEnterHandler: [{ type: HostListener, args: ['document:keydown.enter', ['$event'],] }],
        onEscHandler: [{ type: HostListener, args: ['document:keydown.esc', ['$event'],] }]
    };
    return LanguageTextPanelComponent;
}());
export { LanguageTextPanelComponent };
if (false) {
    /** @type {?} */
    LanguageTextPanelComponent.prototype.opened;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.left;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.top;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.width;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.height;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.items;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.data;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.maxWords;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.itemClick;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.hidePanel;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.showPanel;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.currentItem;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.languageInputRef;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.panelClickHandler;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    LanguageTextPanelComponent.prototype.inputRef;
    /**
     * @type {?}
     * @private
     */
    LanguageTextPanelComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    LanguageTextPanelComponent.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    LanguageTextPanelComponent.prototype.injector;
    /** @type {?} */
    LanguageTextPanelComponent.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,