/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Injector, NgZone, Renderer2, HostListener } from '@angular/core';
import { DatagridComponent } from '../../datagrid.component';
import { TR_PREFIX } from '../../types/constant';
export class DatagridRowDblClickDirective {
    /**
     * @param {?} el
     * @param {?} injector
     * @param {?} ngZone
     * @param {?} render
     * @param {?} dg
     */
    constructor(el, injector, ngZone, render, dg) {
        this.el = el;
        this.injector = injector;
        this.ngZone = ngZone;
        this.render = render;
        this.dg = dg;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dblclickRowEvent(event) {
        /** @type {?} */
        const tr = event.target.closest('tr');
        /** @type {?} */
        const rowid = tr.id.replace(TR_PREFIX, '').replace('_fixedright', '').replace('_fixedleft', '');
        /** @type {?} */
        const rowIndex = tr.getAttribute('index');
        /** @type {?} */
        const rowData = this.dg.dfs.findRow(rowid);
        if (this.dg.disableRow) {
            if (this.dg.disableRow(rowData.data, rowData.index)) {
                event.stopPropagation();
                return false;
            }
        }
        if (this.dg.editable) {
            if (this.dg.editMode === 'row' && this.dg.clickToEdit) {
                this.dg.editRow(rowid);
            }
            else {
                this.dg.isSingleClick = false;
                this.dg.dblclickRow.emit({ rowData, id: rowid, index: rowIndex, grid: this.dg, dblclick: true });
            }
        }
        else {
            this.dg.dblclickRow.emit({ rowData, id: rowid, index: rowIndex, grid: this.dg, dblclick: true });
        }
        event.stopPropagation();
        event.preventDefault();
    }
}
DatagridRowDblClickDirective.decorators = [
    { type: Directive, args: [{
                selector: '[row-dblclick]',
            },] }
];
/** @nocollapse */
DatagridRowDblClickDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector },
    { type: NgZone },
    { type: Renderer2 },
    { type: DatagridComponent }
];
DatagridRowDblClickDirective.propDecorators = {
    dblclickRowEvent: [{ type: HostListener, args: ['dblclick', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.render;
    /** @type {?} */
    DatagridRowDblClickDirective.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtcm93LWRibGNsaWNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9ib2R5L2RhdGFncmlkLXJvdy1kYmxjbGljay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBVSxNQUFNLEVBQUUsU0FBUyxFQUFhLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwSCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFNakQsTUFBTSxPQUFPLDRCQUE0Qjs7Ozs7Ozs7SUFHckMsWUFBb0IsRUFBYyxFQUFVLFFBQWtCLEVBQVUsTUFBYyxFQUFVLE1BQWlCLEVBQzlGLEVBQXFCO1FBRHBCLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVc7UUFDOUYsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7SUFFeEMsQ0FBQzs7OztJQUVELFFBQVE7SUFFUixDQUFDOzs7O0lBRUQsV0FBVztJQUVYLENBQUM7Ozs7O0lBSUQsZ0JBQWdCLENBQUMsS0FBVTs7Y0FFakIsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQzs7Y0FFL0IsS0FBSyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDOztjQUN6RixRQUFRLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUM7O2NBQ25DLE9BQU8sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBRTFDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUU7WUFDcEIsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDakQsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO2dCQUN4QixPQUFPLEtBQUssQ0FBQzthQUNoQjtTQUNKO1FBRUQsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxLQUFLLEtBQUssSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRTtnQkFDbkQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDMUI7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO2dCQUM5QixJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQ3BHO1NBQ0o7YUFBTTtZQUNILElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUcsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7U0FDckc7UUFFRCxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzNCLENBQUM7OztZQWpESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjthQUM3Qjs7OztZQVBtQixVQUFVO1lBQUUsUUFBUTtZQUFVLE1BQU07WUFBRSxTQUFTO1lBQzFELGlCQUFpQjs7OytCQXdCckIsWUFBWSxTQUFDLFVBQVUsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7Ozs7OztJQWR4QiwwQ0FBc0I7Ozs7O0lBQUUsZ0RBQTBCOzs7OztJQUFFLDhDQUFzQjs7Ozs7SUFBRSw4Q0FBeUI7O0lBQ3JHLDBDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0b3IsIE9uSW5pdCwgTmdab25lLCBSZW5kZXJlcjIsIE9uRGVzdHJveSwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFncmlkQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZGF0YWdyaWQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgVFJfUFJFRklYIH0gZnJvbSAnLi4vLi4vdHlwZXMvY29uc3RhbnQnO1xyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbcm93LWRibGNsaWNrXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZFJvd0RibENsaWNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSwgcHJpdmF0ZSByZW5kZXI6IFJlbmRlcmVyMixcclxuICAgICAgICAgICAgICAgIHB1YmxpYyBkZzogRGF0YWdyaWRDb21wb25lbnQpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcignZGJsY2xpY2snLCBbJyRldmVudCddKVxyXG4gICAgZGJsY2xpY2tSb3dFdmVudChldmVudDogYW55KSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHRyID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJ3RyJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJvd2lkID0gdHIuaWQucmVwbGFjZShUUl9QUkVGSVgsICcnKS5yZXBsYWNlKCdfZml4ZWRyaWdodCcsICcnKS5yZXBsYWNlKCdfZml4ZWRsZWZ0JywgJycpO1xyXG4gICAgICAgIGNvbnN0IHJvd0luZGV4ID0gdHIuZ2V0QXR0cmlidXRlKCdpbmRleCcpO1xyXG4gICAgICAgIGNvbnN0IHJvd0RhdGEgPSB0aGlzLmRnLmRmcy5maW5kUm93KHJvd2lkKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZGcuZGlzYWJsZVJvdykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kZy5kaXNhYmxlUm93KHJvd0RhdGEuZGF0YSwgcm93RGF0YS5pbmRleCkpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5kZy5lZGl0YWJsZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kZy5lZGl0TW9kZSA9PT0gJ3JvdycgJiYgdGhpcy5kZy5jbGlja1RvRWRpdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZy5lZGl0Um93KHJvd2lkKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGcuaXNTaW5nbGVDbGljayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZy5kYmxjbGlja1Jvdy5lbWl0KHsgcm93RGF0YSwgaWQ6IHJvd2lkLCBpbmRleDogcm93SW5kZXgsIGdyaWQ6IHRoaXMuZGcsIGRibGNsaWNrOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kZy5kYmxjbGlja1Jvdy5lbWl0KHsgcm93RGF0YSwgaWQ6IHJvd2lkLCBpbmRleDogcm93SW5kZXgsIGdyaWQ6IHRoaXMuZGcsICBkYmxjbGljazogdHJ1ZSB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcbn1cclxuIl19