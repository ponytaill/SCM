import { Injectable, Injector } from "@angular/core";
import { DataPropGroup, FrameContext } from "@farris/devkit";
var PaginationService = /** @class */ (function () {
    function PaginationService(injector, frameContext) {
        this.injector = injector;
        this.frameContext = frameContext;
    }
    /**
     * 重置子表分页信息
     */
    PaginationService.prototype.resetChildrenPagination = function () {
        var paginationInfo = this.frameContext.repository.entityCollection.paginationInfo || {};
        var childrenEntityCodes = this.frameContext.repository.entityTypeInfo.getPropNamesByGroup(DataPropGroup.List) || [];
        if (paginationInfo && Object.keys(paginationInfo).length > 0) {
            var keys = Object.keys(paginationInfo);
            keys.forEach(function (key) {
                var value = paginationInfo[key];
                if (Object.prototype.toString.apply(value) !== '[object Object]') {
                    return;
                }
                var rowPagination = childrenEntityCodes.find(function (nodeCode) {
                    // 去掉s
                    nodeCode = nodeCode.slice(0, -1);
                    return key.startsWith(nodeCode + "_");
                });
                if (rowPagination) {
                    delete paginationInfo[key];
                }
                else {
                    paginationInfo[key].pageIndex = 1;
                    delete paginationInfo[key].total;
                    delete paginationInfo[key].pageCount;
                }
            });
            this.frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);
        }
    };
    PaginationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PaginationService.ctorParameters = function () { return [
        { type: Injector },
        { type: FrameContext }
    ]; };
    return PaginationService;
}());
export { PaginationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3BhZ2luYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTdEO0lBRUUsMkJBQW9CLFFBQWtCLEVBQVUsWUFBMEI7UUFBdEQsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBQUksQ0FBQztJQUMvRTs7T0FFRztJQUNJLG1EQUF1QixHQUE5QjtRQUNFLElBQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsSUFBSSxFQUFFLENBQUM7UUFDMUYsSUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN0SCxJQUFJLGNBQWMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDNUQsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBVztnQkFDdkIsSUFBTSxLQUFLLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNsQyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxpQkFBaUIsRUFBRTtvQkFDaEUsT0FBTztpQkFDUjtnQkFDRCxJQUFNLGFBQWEsR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsVUFBQyxRQUFnQjtvQkFDOUQsTUFBTTtvQkFDTixRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDakMsT0FBTyxHQUFHLENBQUMsVUFBVSxDQUFJLFFBQVEsTUFBRyxDQUFDLENBQUM7Z0JBQ3hDLENBQUMsQ0FBQyxDQUFDO2dCQUNILElBQUksYUFBYSxFQUFFO29CQUNqQixPQUFPLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDNUI7cUJBQU07b0JBQ0wsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7b0JBQ2xDLE9BQU8sY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztvQkFDakMsT0FBTyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDO2lCQUN0QztZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsMEJBQTBCLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1NBQy9GO0lBQ0gsQ0FBQzs7Z0JBL0JGLFVBQVU7Ozs7Z0JBSFUsUUFBUTtnQkFDTCxZQUFZOztJQWtDcEMsd0JBQUM7Q0FBQSxBQWhDRCxJQWdDQztTQS9CWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBEYXRhUHJvcEdyb3VwLCBGcmFtZUNvbnRleHQgfSBmcm9tIFwiQGZhcnJpcy9kZXZraXRcIjtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBhZ2luYXRpb25TZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQpIHsgfVxuICAvKipcbiAgICog6YeN572u5a2Q6KGo5YiG6aG15L+h5oGvXG4gICAqL1xuICBwdWJsaWMgcmVzZXRDaGlsZHJlblBhZ2luYXRpb24oKSB7XG4gICAgY29uc3QgcGFnaW5hdGlvbkluZm8gPSB0aGlzLmZyYW1lQ29udGV4dC5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24ucGFnaW5hdGlvbkluZm8gfHwge307XG4gICAgY29uc3QgY2hpbGRyZW5FbnRpdHlDb2RlcyA9IHRoaXMuZnJhbWVDb250ZXh0LnJlcG9zaXRvcnkuZW50aXR5VHlwZUluZm8uZ2V0UHJvcE5hbWVzQnlHcm91cChEYXRhUHJvcEdyb3VwLkxpc3QpIHx8IFtdO1xuICAgIGlmIChwYWdpbmF0aW9uSW5mbyAmJiBPYmplY3Qua2V5cyhwYWdpbmF0aW9uSW5mbykubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHBhZ2luYXRpb25JbmZvKTtcbiAgICAgIGtleXMuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwYWdpbmF0aW9uSW5mb1trZXldO1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseSh2YWx1ZSkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJvd1BhZ2luYXRpb24gPSBjaGlsZHJlbkVudGl0eUNvZGVzLmZpbmQoKG5vZGVDb2RlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAvLyDljrvmjolzXG4gICAgICAgICAgbm9kZUNvZGUgPSBub2RlQ29kZS5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgcmV0dXJuIGtleS5zdGFydHNXaXRoKGAke25vZGVDb2RlfV9gKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyb3dQYWdpbmF0aW9uKSB7XG4gICAgICAgICAgZGVsZXRlIHBhZ2luYXRpb25JbmZvW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkluZm9ba2V5XS5wYWdlSW5kZXggPSAxO1xuICAgICAgICAgIGRlbGV0ZSBwYWdpbmF0aW9uSW5mb1trZXldLnRvdGFsO1xuICAgICAgICAgIGRlbGV0ZSBwYWdpbmF0aW9uSW5mb1trZXldLnBhZ2VDb3VudDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLmZyYW1lQ29udGV4dC5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24udXBkYXRlUGFnaW5hdGlvbkluZm9CeVBhdGgoJy8nLCBwYWdpbmF0aW9uSW5mbyk7XG4gICAgfVxuICB9XG59Il19