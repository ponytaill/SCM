/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-15 17:31:08
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-09-04 15:01:15
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { UtilService } from '../../services/public-api';
import { KeyCode } from '../../enums/public-api';
import { OPTS, MONTHS } from '../../constants/constants';
var MonthViewComponent = /** @class */ (function () {
    function MonthViewComponent(utilService) {
        this.utilService = utilService;
        this.months = [];
        this.monthCellClicked = new EventEmitter();
        this.monthCellKeyDown = new EventEmitter();
        this.onMouseEnter = new EventEmitter();
        this.onMouseLeave = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    MonthViewComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.hasOwnProperty(OPTS)) {
            this.opts = changes[OPTS].currentValue;
        }
        if (changes.hasOwnProperty(MONTHS)) {
            this.months = changes[MONTHS].currentValue;
        }
    };
    /**
     * @param {?} event
     * @param {?} cell
     * @return {?}
     */
    MonthViewComponent.prototype.onMonthCellClicked = /**
     * @param {?} event
     * @param {?} cell
     * @return {?}
     */
    function (event, cell) {
        event.stopPropagation();
        if (cell.disabled) {
            return;
        }
        this.monthCellClicked.emit(cell);
    };
    /**
     * @param {?} event
     * @param {?} cell
     * @return {?}
     */
    MonthViewComponent.prototype.onMonthCellKeyDown = /**
     * @param {?} event
     * @param {?} cell
     * @return {?}
     */
    function (event, cell) {
        /** @type {?} */
        var keyCode = this.utilService.getKeyCodeFromEvent(event);
        if (keyCode !== KeyCode.tab) {
            event.preventDefault();
            if (keyCode === KeyCode.enter || keyCode === KeyCode.space) {
                this.onMonthCellClicked(event, cell);
            }
            else if (this.opts.moveFocusByArrowKeys) {
                this.monthCellKeyDown.emit(cell);
            }
        }
    };
    /**
     * @param {?} cell
     * @return {?}
     */
    MonthViewComponent.prototype.onMonthCellMouseEnter = /**
     * @param {?} cell
     * @return {?}
     */
    function (cell) {
        if (this.utilService.isInitializedDate(this.selectedDateRange.begin) &&
            !this.utilService.isInitializedDate(this.selectedDateRange.end)) {
            for (var i = 0; i < this.months.length; i++) {
                /** @type {?} */
                var row = this.months[i].row;
                for (var j = 0; j < row.length; j++) {
                    /** @type {?} */
                    var month = row[j];
                    month.range =
                        (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, month.monthObj) &&
                            this.utilService.isDateSameOrEarlier(month.monthObj, cell.monthObj)) ||
                            (this.utilService.isDateSameOrEarlier(month.monthObj, this.selectedDateRange.begin) &&
                                this.utilService.isDateSameOrEarlier(cell.monthObj, month.monthObj));
                }
            }
            this.onMouseEnter.emit(cell);
        }
    };
    /**
     * @return {?}
     */
    MonthViewComponent.prototype.onMonthCellMouseLeave = /**
     * @return {?}
     */
    function () {
        for (var i = 0; i < this.months.length; i++) {
            /** @type {?} */
            var row = this.months[i].row;
            for (var j = 0; j < row.length; j++) {
                /** @type {?} */
                var month = row[j];
                month.range = false;
            }
        }
        this.onMouseLeave.emit();
    };
    /**
     * @param {?} date
     * @return {?}
     */
    MonthViewComponent.prototype.isMonthInRange = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.utilService.isDateInRange(date, this.selectedDateRange);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    MonthViewComponent.prototype.isMonthSame = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.utilService.isDateSame({
            year: this.selectedDate.year,
            month: this.selectedDate.month
        }, date);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    MonthViewComponent.prototype.isMonthRangeBeginOrEndSame = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.utilService.isDateRangeBeginOrEndSame(this.selectedDateRange, date);
    };
    MonthViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-month-view',
                    template: "<div class=\"f-datepicker-table-wrapper\">\r\n    <table class=\"f-datepicker-table\">\r\n        <tbody>\r\n            <tr *ngFor=\"let mr of months; let mi = index\">\r\n                <td\r\n                    id=\"m_{{ mi }}_{{ i }}\"\r\n                    class=\"m_{{ mi }}_{{ i }}\"\r\n                    *ngFor=\"let m of mr.row; let i = index\"\r\n                    (click)=\"onMonthCellClicked($event, m)\"\r\n                    (keydown)=\"onMonthCellKeyDown($event, m)\"\r\n                    (mouseenter)=\"onMonthCellMouseEnter(m)\"\r\n                    (mouseleave)=\"onMonthCellMouseLeave()\"\r\n                    tabindex=\"0\"\r\n                    style=\"width: 33.3%\"\r\n                >\r\n                    <div class=\"f-datepicker-month\">\r\n                        <span\r\n                            class=\"f-datepicker-month-cell\"\r\n                            [ngClass]=\"{\r\n                                'f-datepicker-current':\r\n                                    m.currMonth && opts.markCurrentMonth,\r\n                                'f-datepicker-selected':\r\n                                    (!this.opts.dateRange &&\r\n                                        isMonthSame(m.monthObj)) ||\r\n                                    (this.opts.dateRange &&\r\n                                        isMonthRangeBeginOrEndSame(m.monthObj)),\r\n                                'f-datepicker-disabled': m.disabled,\r\n                                'f-datepicker-range':\r\n                                    isMonthInRange(m.monthObj) || m.range\r\n                            }\"\r\n                            >{{ m.name }}</span\r\n                        >\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n",
                    providers: [UtilService],
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    MonthViewComponent.ctorParameters = function () { return [
        { type: UtilService }
    ]; };
    MonthViewComponent.propDecorators = {
        opts: [{ type: Input }],
        months: [{ type: Input }],
        selectedDate: [{ type: Input }],
        selectedDateRange: [{ type: Input }],
        monthCellClicked: [{ type: Output }],
        monthCellKeyDown: [{ type: Output }],
        onMouseEnter: [{ type: Output }],
        onMouseLeave: [{ type: Output }]
    };
    return MonthViewComponent;
}());
export { MonthViewComponent };
if (false) {
    /** @type {?} */
    MonthViewComponent.prototype.opts;
    /** @type {?} */
    MonthViewComponent.prototype.months;
    /** @type {?} */
    MonthViewComponent.prototype.selectedDate;
    /** @type {?} */
    MonthViewComponent.prototype.selectedDateRange;
    /** @type {?} */
    MonthViewComponent.prototype.monthCellClicked;
    /** @type {?} */
    MonthViewComponent.prototype.monthCellKeyDown;
    /** @type {?} */
    MonthViewComponent.prototype.onMouseEnter;
    /** @type {?} */
    MonthViewComponent.prototype.onMouseLeave;
    /**
     * @type {?}
     * @private
     */
    MonthViewComponent.prototype.utilService;
}
//# sourceMappingURL=data:application/json;base64,