/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Directive, TemplateRef, ContentChild, ElementRef, HostBinding, ViewEncapsulation, Output, EventEmitter, ChangeDetectionStrategy, ViewChild } from '@angular/core';
import { DataListFacadeService } from './core/datalist-facade.service';
export class DataListItemTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
DataListItemTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[list-item-tmp]'
            },] }
];
/** @nocollapse */
DataListItemTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    DataListItemTemplateDirective.prototype.template;
}
export class DatalistComponent {
    /**
     * @param {?} el
     * @param {?} store
     */
    constructor(el, store) {
        this.el = el;
        this.store = store;
        this.cls = true;
        this.fit = true;
        this.width = 300;
        this.height = 400;
        this.multiSelect = false;
        this.disabled = false;
        this.showHeader = false;
        this.showCheckBox = false;
        this.headerHeight = 40;
        this.enableCancelSelected = true;
        /**
         * 分隔符，默认为 ,
         */
        this.separator = ',';
        this.selected = new EventEmitter();
        this.unSelected = new EventEmitter();
        this.selectedValuesChange = new EventEmitter();
        this.scrollbarHeight$ = this.store.containerHeight$;
        // tslint:disable-next-line:variable-name
        this._options$ = this.store.options$;
        this.data$ = this.store.data$;
    }
    /**
     * @return {?}
     */
    get fluid() {
        return this._height === 'auto' ? false : this.fit;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes && changes.data && !changes.data.isFirstChange()) {
            this.initCtrlState();
        }
        if (changes.selectedValues && !changes.selectedValues.isFirstChange()) {
            if (this.selectedValues !== '' && this.selectedValues !== undefined && this.selectedValues !== null) {
                this.store.setSelections(this.selectedValues, this.separator);
            }
            else {
                this.clearSelections();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._height = this.height;
        this.initCtrlState();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.selectedValues && this.height !== 'auto') {
                /** @type {?} */
                let val = this.selectedValues;
                if (this.selectedValues.indexOf(this.separator) > -1) {
                    val = this.selectedValues.indexOf(this.separator)[0];
                }
                /** @type {?} */
                const index = this.data.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[this.idField] == val));
                /** @type {?} */
                const ulEl = this.el.nativeElement.querySelector('ul.list-group');
                if (ulEl.children[index]) {
                    ulEl.children[index].scrollIntoView({ block: 'nearest' });
                }
            }
        }), 10);
    }
    /**
     * @private
     * @return {?}
     */
    loadData() {
        if (this.data) {
            this.store.loadData(this.data, this.selectedValues, this.separator);
        }
    }
    /**
     * @private
     * @return {?}
     */
    initCtrlState() {
        const { title, textField, fit, idField, valueField, width, height, multiSelect, disabled, headerHeight, separator } = Object.assign({}, this);
        this.store.initState({
            title,
            textField,
            valueField,
            fit,
            idField,
            width,
            height,
            multiSelect,
            disabled,
            headerHeight,
            separator
        });
        this.loadData();
    }
    /**
     * @return {?}
     */
    clearSelections() {
        this.store.clearSelections();
    }
    /**
     * @return {?}
     */
    resize() {
        if (this.fit) {
            /** @type {?} */
            const container = this.el.nativeElement.parentElement;
            /** @type {?} */
            const width = container.offsetWidth;
            /** @type {?} */
            const height = container.offsetHeight;
            this.store.updateContainerSize(width, height);
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateSelectValues() {
        this.selectedValues = this.store.getSelections().map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            return item[this.valueField];
        })).join(this.separator);
        this.selectedValuesChange.emit(this.selectedValues);
    }
    /**
     * @param {?} event
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    onSelectHandler(event, index, item) {
        event.stopPropagation();
        if (this.disabled) {
            return false;
        }
        const { data } = Object.assign({}, item);
        if (!this.store.isSelect(item.id)) {
            this.store.selectItem(data, index);
            this.updateSelectValues();
            this.selected.emit({ index, data });
        }
        else {
            if (this.enableCancelSelected) {
                this.store.unSelectItem(data);
                this.updateSelectValues();
                this.unSelected.emit({ index, data });
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onCheckedChange($event) {
        const { index, row, originalEvent } = $event;
        this.onSelectHandler(originalEvent, index, row);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    isChecked(item) {
        /** @type {?} */
        let val = this.selectedValues;
        if (this.selectedValues === null && this.selectedValues === undefined) {
            val = '';
        }
        if (typeof val === 'boolean') {
            val = '' + val;
        }
        if (val) {
            /** @type {?} */
            let _vals = [];
            if (this.multiSelect) {
                _vals = val.split(this.separator);
            }
            else {
                _vals = [val];
            }
            return _vals.some((/**
             * @param {?} v
             * @return {?}
             */
            v => v == '' + item.data[this.valueField]));
        }
        return false;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    isSelected(item) {
        return this.isChecked(item);
    }
    /**
     * @return {?}
     */
    selectAll() {
        this.selectedValues = this.data.map((/**
         * @param {?} item
         * @return {?}
         */
        item => item[this.valueField])).join(this.separator);
        this.store.selectAll();
    }
    /**
     * @return {?}
     */
    unSelectAll() {
        this.selectedValues = '';
        this.store.clearSelections();
    }
}
DatalistComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-datalist',
                template: "<div *ngIf=\"_options$ | async as opts\" class=\"card\" [style.width.%]=\"100\" [style.height]=\"opts.height === 'auto' ? 'auto' : opts.height + 'px'\" style=\"min-height: 10px;\">\r\n    <div class=\"card-header\" *ngIf=\"opts.showHeader\">\r\n        {{ opts.title }}\r\n    </div>\r\n    <!-- <perfect-scrollbar #ps *ngIf=\"opts.height && opts.height !== 'auto'\" [style.width.%]=\"100\" [style.height.px]=\"scrollbarHeight$ | async\"> -->\r\n    <div *ngIf=\"opts.height && opts.height !== 'auto' && (data$ | async).length > 0\" style=\"overflow: auto;\" [style.width.%]=\"100\" [style.height.px]=\"scrollbarHeight$ | async\">\r\n        <ul class=\"list-group list-group-flush\">\r\n            <li style=\"cursor: default;\" [farrist-datalist-item]=\"item\" [style.height.px]=\"itemHeight\"\r\n                [class.active]=\"store.isSelect(item.id)\" class=\"list-group-item list-group-item-action\"\r\n                *ngFor=\"let item of data$ | async; let i = index\" title=\"{{item.data[textField]}}\" (click)=\"onSelectHandler( $event, i, item)\">\r\n                <dl-checkbox *ngIf=\"multiSelect\" [checked]=\"isChecked(item)\" [index]=\"i\" [row]=\"item\"\r\n                    (checkedChange)=\"onCheckedChange($event)\"></dl-checkbox>\r\n                <ng-container *ngIf=\"!itemTemplate\">\r\n                    <span class=\"f-datalist-item-text\">{{ item.data[textField] }}</span>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"itemTemplate\" [ngTemplateOutlet]=\"itemTemplate\"\r\n                    [ngTemplateOutletContext]=\"{ data: item, index: i }\">\r\n                </ng-container>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <!-- </perfect-scrollbar> -->\r\n    <div *ngIf=\"opts.height === 'auto' && (data$ | async).length > 0\" >\r\n        <ul class=\"list-group list-group-flush\">\r\n            <li style=\"cursor: default;\" [farrist-datalist-item]=\"item\" [style.height.px]=\"itemHeight\"\r\n                [class.active]=\"isSelected(item)\" class=\"list-group-item list-group-item-action\"\r\n                *ngFor=\"let item of data$ | async; let i = index\" title=\"{{item.data[textField]}}\" (click)=\"onSelectHandler( $event, i, item)\">\r\n                <dl-checkbox *ngIf=\"multiSelect\" [checked]=\"isChecked(item)\" [index]=\"i\" [row]=\"item\"\r\n                    (checkedChange)=\"onCheckedChange($event)\"></dl-checkbox>\r\n                <ng-container *ngIf=\"!itemTemplate\">\r\n                    <span class=\"f-datalist-item-text\">{{ item.data[textField] }}</span>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"itemTemplate\" [ngTemplateOutlet]=\"itemTemplate\"\r\n                    [ngTemplateOutletContext]=\"{ data: item, index: i }\">\r\n                </ng-container>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <div *ngIf=\"(data$ | async).length === 0\" style=\"height: 200px;\">\r\n        <div class=\"f-table-norecords-content\">\u6682\u65E0\u6570\u636E</div>\r\n    </div>\r\n</div>",
                providers: [DataListFacadeService],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
            .ps__rail-x,
            .ps__rail-y {
                z-index: 9;
            }
            .norecords-content {
                height: 8.125rem;
                padding: 7.8125rem 0 0;
                width: 100%;
                text-align: center;
                font-size: 1rem;
                color: rgba(0,0,0,.25);
                background: url(imgs/table-norecords.png) top center no-repeat;
                margin: -4.0625rem 0 0 -.625rem;
                line-height: 2.5rem;
            }
        `]
            }] }
];
/** @nocollapse */
DatalistComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: DataListFacadeService }
];
DatalistComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class.f-datalist',] }],
    fluid: [{ type: HostBinding, args: ['class.farris-main-area',] }],
    itemHeight: [{ type: Input }],
    title: [{ type: Input }],
    data: [{ type: Input }],
    textField: [{ type: Input }],
    valueField: [{ type: Input }],
    idField: [{ type: Input }],
    fit: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    multiSelect: [{ type: Input }],
    disabled: [{ type: Input }],
    showHeader: [{ type: Input }],
    showCheckBox: [{ type: Input }],
    headerHeight: [{ type: Input }],
    selectedValues: [{ type: Input }],
    enableCancelSelected: [{ type: Input }],
    separator: [{ type: Input }],
    itemTemplate: [{ type: ContentChild, args: [DataListItemTemplateDirective, { read: TemplateRef },] }],
    selected: [{ type: Output }],
    unSelected: [{ type: Output }],
    selectedValuesChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DatalistComponent.prototype.cls;
    /** @type {?} */
    DatalistComponent.prototype.itemHeight;
    /** @type {?} */
    DatalistComponent.prototype.title;
    /** @type {?} */
    DatalistComponent.prototype.data;
    /** @type {?} */
    DatalistComponent.prototype.textField;
    /** @type {?} */
    DatalistComponent.prototype.valueField;
    /** @type {?} */
    DatalistComponent.prototype.idField;
    /** @type {?} */
    DatalistComponent.prototype.fit;
    /** @type {?} */
    DatalistComponent.prototype.width;
    /** @type {?} */
    DatalistComponent.prototype.height;
    /** @type {?} */
    DatalistComponent.prototype.multiSelect;
    /** @type {?} */
    DatalistComponent.prototype.disabled;
    /** @type {?} */
    DatalistComponent.prototype.showHeader;
    /** @type {?} */
    DatalistComponent.prototype.showCheckBox;
    /** @type {?} */
    DatalistComponent.prototype.headerHeight;
    /** @type {?} */
    DatalistComponent.prototype.selectedValues;
    /** @type {?} */
    DatalistComponent.prototype.enableCancelSelected;
    /**
     * 分隔符，默认为 ,
     * @type {?}
     */
    DatalistComponent.prototype.separator;
    /** @type {?} */
    DatalistComponent.prototype.itemTemplate;
    /** @type {?} */
    DatalistComponent.prototype.selected;
    /** @type {?} */
    DatalistComponent.prototype.unSelected;
    /** @type {?} */
    DatalistComponent.prototype.selectedValuesChange;
    /** @type {?} */
    DatalistComponent.prototype.scrollbarHeight$;
    /** @type {?} */
    DatalistComponent.prototype._options$;
    /** @type {?} */
    DatalistComponent.prototype.data$;
    /**
     * @type {?}
     * @private
     */
    DatalistComponent.prototype._height;
    /** @type {?} */
    DatalistComponent.prototype.el;
    /** @type {?} */
    DatalistComponent.prototype.store;
}
export class DataListItemComponentDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
}
DataListItemComponentDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[farrist-datalist-item]'
            },] }
];
/** @nocollapse */
DataListItemComponentDirective.ctorParameters = () => [
    { type: ElementRef }
];
DataListItemComponentDirective.propDecorators = {
    data: [{ type: Input, args: ['farrist-datalist-item',] }]
};
if (false) {
    /** @type {?} */
    DataListItemComponentDirective.prototype.data;
    /**
     * @type {?}
     * @private
     */
    DataListItemComponentDirective.prototype.el;
}
/**
 * 表体checkbox 组件
 */
export class DataListCheckboxComponent {
    constructor() {
        this.checkedChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} event
     * @return {?}
     */
    handleClick(event) {
        this.checked = !this.checked;
        this.checkedChange.emit({ originalEvent: event, index: this.index, row: this.row, state: this.checked });
        event.stopPropagation();
    }
}
DataListCheckboxComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'dl-checkbox',
                template: `
        <div class="custom-control custom-checkbox  custom-control-inline dl-checkbox">
            <input type="checkbox" #chk class="custom-control-input" [disabled]="disabled" [checked]="checked" />
            <label class="custom-control-label" (click)="handleClick($event)"></label>
        </div>
    `,
                styles: [`
            :host .custom-checkbox {
                opacity: 1;
                float: none;
                margin: 0;
                vertical-align: top;
                padding-right: 0px;
            }
        `]
            }] }
];
/** @nocollapse */
DataListCheckboxComponent.ctorParameters = () => [];
DataListCheckboxComponent.propDecorators = {
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    index: [{ type: Input }],
    row: [{ type: Input }],
    checkedChange: [{ type: Output }],
    chk: [{ type: ViewChild, args: ['chk',] }]
};
if (false) {
    /** @type {?} */
    DataListCheckboxComponent.prototype.checked;
    /** @type {?} */
    DataListCheckboxComponent.prototype.disabled;
    /** @type {?} */
    DataListCheckboxComponent.prototype.index;
    /** @type {?} */
    DataListCheckboxComponent.prototype.row;
    /** @type {?} */
    DataListCheckboxComponent.prototype.checkedChange;
    /** @type {?} */
    DataListCheckboxComponent.prototype.chk;
}
//# sourceMappingURL=data:application/json;base64,