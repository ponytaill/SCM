import * as tslib_1 from "tslib";
import { createInjector } from '../core/index';
import { AppContext } from './app_context';
import { ViewModelContext, ViewModel } from '../view-model/index';
import { APP_BASE_PROVIDERS } from './providers';
import { APP_VARIABLE_PROVIDERS } from '../variable/index';
import { VIEW_MODEL_COMMAND_PROVIDERS } from '../command/index';
import { HTTP_PROVIDERS } from '../http/index';
var App = /** @class */ (function () {
    /**
     * 构造函数
     */
    function App(options) {
        options.providers = options.providers || [];
        var appProviders = tslib_1.__spread(APP_BASE_PROVIDERS, APP_VARIABLE_PROVIDERS, HTTP_PROVIDERS, options.providers);
        var appInjector = createInjector(appProviders);
        this.context = appInjector.get(AppContext);
    }
    /**
     * 启用ViewModel
     */
    App.prototype.createViewModel = function (options) {
        var providers = options.providers || [];
        var parent = options.parent || null;
        var mergedProviders = tslib_1.__spread([
            { provide: ViewModelContext, useClass: ViewModelContext, deps: [] }
        ], VIEW_MODEL_COMMAND_PROVIDERS, providers);
        var parentInjector = parent ? parent.injector : this.context.injector;
        var injector = createInjector(mergedProviders, parentInjector);
        var viewModel = injector.get(ViewModel);
        viewModel.init();
        return viewModel;
    };
    return App;
}());
export { App };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2FwcC9hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBNEIsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBb0IsTUFBTSxxQkFBcUIsQ0FBQztBQUVwRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDakQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDM0QsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUcvQztJQUlFOztPQUVHO0lBQ0gsYUFBWSxPQUFZO1FBRXRCLE9BQU8sQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUM7UUFDNUMsSUFBTSxZQUFZLG9CQUNiLGtCQUFrQixFQUNsQixzQkFBc0IsRUFDdEIsY0FBYyxFQUNkLE9BQU8sQ0FBQyxTQUFTLENBQ3JCLENBQUM7UUFDRixJQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRDs7T0FFRztJQUNILDZCQUFlLEdBQWYsVUFBZ0IsT0FBeUI7UUFFdkMsSUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUM7UUFDMUMsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUM7UUFFdEMsSUFBTSxlQUFlO1lBQ25CLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO1dBQ2hFLDRCQUE0QixFQUM1QixTQUFTLENBQ2IsQ0FBQztRQUVGLElBQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDeEUsSUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLGVBQWUsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNqRSxJQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFZLFNBQVMsQ0FBQyxDQUFDO1FBQ3JELFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNqQixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUgsVUFBQztBQUFELENBQUMsQUF6Q0QsSUF5Q0M7QUFFRCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGF0aWNQcm92aWRlciwgSW5qZWN0b3IsIGNyZWF0ZUluamVjdG9yfSBmcm9tICcuLi9jb3JlL2luZGV4JztcclxuaW1wb3J0IHsgQXBwQ29udGV4dCB9IGZyb20gJy4vYXBwX2NvbnRleHQnO1xyXG5pbXBvcnQgeyBWaWV3TW9kZWxDb250ZXh0LCBWaWV3TW9kZWwsIFZpZXdNb2RlbE9wdGlvbnMgfSBmcm9tICcuLi92aWV3LW1vZGVsL2luZGV4JztcclxuXHJcbmltcG9ydCB7IEFQUF9CQVNFX1BST1ZJREVSUyB9IGZyb20gJy4vcHJvdmlkZXJzJztcclxuaW1wb3J0IHsgQVBQX1ZBUklBQkxFX1BST1ZJREVSUyB9IGZyb20gJy4uL3ZhcmlhYmxlL2luZGV4JztcclxuaW1wb3J0IHsgVklFV19NT0RFTF9DT01NQU5EX1BST1ZJREVSUyB9IGZyb20gJy4uL2NvbW1hbmQvaW5kZXgnO1xyXG5pbXBvcnQgeyBIVFRQX1BST1ZJREVSUyB9IGZyb20gJy4uL2h0dHAvaW5kZXgnO1xyXG5cclxuXHJcbmNsYXNzIEFwcCB7XHJcblxyXG4gIHB1YmxpYyBjb250ZXh0OiBBcHBDb250ZXh0O1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBhbnkpIHtcclxuXHJcbiAgICBvcHRpb25zLnByb3ZpZGVycyA9IG9wdGlvbnMucHJvdmlkZXJzIHx8IFtdO1xyXG4gICAgY29uc3QgYXBwUHJvdmlkZXJzID0gW1xyXG4gICAgICAuLi5BUFBfQkFTRV9QUk9WSURFUlMsXHJcbiAgICAgIC4uLkFQUF9WQVJJQUJMRV9QUk9WSURFUlMsXHJcbiAgICAgIC4uLkhUVFBfUFJPVklERVJTLFxyXG4gICAgICAuLi5vcHRpb25zLnByb3ZpZGVyc1xyXG4gICAgXTtcclxuICAgIGNvbnN0IGFwcEluamVjdG9yID0gY3JlYXRlSW5qZWN0b3IoYXBwUHJvdmlkZXJzKTtcclxuICAgIHRoaXMuY29udGV4dCA9IGFwcEluamVjdG9yLmdldChBcHBDb250ZXh0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWQr+eUqFZpZXdNb2RlbFxyXG4gICAqL1xyXG4gIGNyZWF0ZVZpZXdNb2RlbChvcHRpb25zOiBWaWV3TW9kZWxPcHRpb25zKTogVmlld01vZGVsIHtcclxuXHJcbiAgICBjb25zdCBwcm92aWRlcnMgPSBvcHRpb25zLnByb3ZpZGVycyB8fCBbXTtcclxuICAgIGNvbnN0IHBhcmVudCA9IG9wdGlvbnMucGFyZW50IHx8IG51bGw7XHJcblxyXG4gICAgY29uc3QgbWVyZ2VkUHJvdmlkZXJzOiBTdGF0aWNQcm92aWRlcltdID0gW1xyXG4gICAgICB7IHByb3ZpZGU6IFZpZXdNb2RlbENvbnRleHQsIHVzZUNsYXNzOiBWaWV3TW9kZWxDb250ZXh0LCBkZXBzOiBbXSB9LFxyXG4gICAgICAuLi5WSUVXX01PREVMX0NPTU1BTkRfUFJPVklERVJTLFxyXG4gICAgICAuLi5wcm92aWRlcnNcclxuICAgIF07XHJcblxyXG4gICAgY29uc3QgcGFyZW50SW5qZWN0b3IgPSBwYXJlbnQgPyBwYXJlbnQuaW5qZWN0b3IgOiB0aGlzLmNvbnRleHQuaW5qZWN0b3I7XHJcbiAgICBjb25zdCBpbmplY3RvciA9IGNyZWF0ZUluamVjdG9yKG1lcmdlZFByb3ZpZGVycywgcGFyZW50SW5qZWN0b3IpO1xyXG4gICAgY29uc3Qgdmlld01vZGVsID0gaW5qZWN0b3IuZ2V0PFZpZXdNb2RlbD4oVmlld01vZGVsKTtcclxuICAgIHZpZXdNb2RlbC5pbml0KCk7XHJcbiAgICByZXR1cm4gdmlld01vZGVsO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEFwcCB9O1xyXG4iXX0=