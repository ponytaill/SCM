import { switchMap, map } from 'rxjs/operators';
import { Subject, of, timer, forkJoin } from 'rxjs';
import { EventEmitter, Component, ViewEncapsulation, ChangeDetectorRef, Injector, Input, Output, ViewChild, HostBinding, HostListener, InjectionToken, ComponentFactoryResolver, ApplicationRef, Injectable, Directive, NgZone, Renderer2, ElementRef, NgModule } from '@angular/core';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { cloneDeep } from 'lodash-es';
import { IdService, FarrisCommonModule } from '@farris/ui-common';
import { GRID_SETTINGS_SERVICE, DatagridModule } from '@farris/ui-datagrid';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { MultiSelectModule } from '@farris/ui-multi-select';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { ComboListModule } from '@farris/ui-combo-list';
import { SwitchModule } from '@farris/ui-switch';
import { FarrisTooltipModule } from '@farris/ui-tooltip';
import { OrganizationSelectorModule } from '@farris/ui-organization-selector';
import { smoothDnD, dropHandlers } from '@farris/smooth-dnd';
import { LanguageTextboxModule } from '@farris/ui-language-textbox';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridSettingsComponent {
    /**
     * @param {?} cd
     * @param {?} inject
     */
    constructor(cd, inject) {
        this.cd = cd;
        this.inject = inject;
        this.activeTabIndex = 1;
        /**
         * 排序列数据
         */
        this.sortTreeData = [];
        this.sortNames = [];
        this.sortInfo = {};
        /**
         * 显示列数据
         */
        this.viewTreeData = [];
        this.viewColumns = [];
        this.columnFormat = [];
        this.groupField = [];
        this.canSetColumnSort = true;
        this.canSetColumnVisible = true;
        this.enableReset = false;
        this.cancelHandle = new EventEmitter();
        this.submitHandle = new EventEmitter();
        this.reset = new EventEmitter();
        this.concise = new EventEmitter();
        this.schemeInfo = null;
        this.searchItems = [];
        this.alignItems = [];
        this.summaryItems = [];
        this.summaryItems2 = [];
        this.messager = this.inject.get(MessagerService, null);
        this.localeSer = this.inject.get(LocaleService);
        this.searchItems = [
            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
        ];
        this.alignItems = [
            { value: 'left', title: this.localeSer.getValue('datagrid.settings.alignLeft') },
            { value: 'center', title: this.localeSer.getValue('datagrid.settings.alignCenter') },
            { value: 'right', title: this.localeSer.getValue('datagrid.settings.alignRight') },
        ];
        this.summaryItems = [
            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },
            { value: 2, title: this.localeSer.getValue('datagrid.settings.summarySum') },
            { value: 0, title: this.localeSer.getValue('datagrid.settings.summaryMax') },
            { value: 1, title: this.localeSer.getValue('datagrid.settings.summaryMin') },
            { value: 3, title: this.localeSer.getValue('datagrid.settings.summaryAverage') },
            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },
        ];
        this.summaryItems2 = [
            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },
            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },
        ];
    }
    /**
     * @private
     * @return {?}
     */
    initData() {
        this.sortNames = this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [];
        this.viewColumns = this.getViewColumns();
        this.sortInfo = this.gridInstance['__sortInfo'] || {};
        this.columnFormat = [...this.columns[0]];
        this.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.gridInstance.enableScheme) {
            this.initData();
        }
        else {
            if (this.schemeInfo) {
                this.sortInfo = this.schemeInfo.sortInfo || {};
                if (this.sortInfo) {
                    this.sortNames = this.sortInfo.sortName || '';
                }
                this.viewColumns = this.schemeInfo.viewColumns;
                this.columnFormat = this.schemeInfo.columnFormat;
                if (!this.columnFormat) {
                    this.columnFormat = [...this.columns[0]];
                }
                if (this.schemeInfo.groupField) {
                    if (typeof this.schemeInfo.groupField === 'string') {
                        this.groupField = ((/** @type {?} */ (this.schemeInfo.groupField))).split(',');
                    }
                    else {
                        this.groupField = this.schemeInfo.groupField || [];
                    }
                }
                else {
                    this.groupField = [];
                }
                return;
            }
            this.initData();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.columns && !changes.columns.isFirstChange()) ;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    close($event) {
        $event.stopPropagation();
        if (this.modalRef) {
            this.modalRef.close();
        }
    }
    /**
     * @param {?} $event
     * @param {?} idx
     * @return {?}
     */
    changeTabs($event, idx) {
        $event.stopPropagation();
        this.activeTabIndex = idx;
    }
    /**
     * @param {?} sortInfo
     * @return {?}
     */
    onSortInfoChange(sortInfo) {
        this.sortInfo = sortInfo;
    }
    /**
     * @private
     * @return {?}
     */
    getViewColumns() {
        // 多表头
        /** @type {?} */
        let visibleCls = [];
        if (this.columns.length > 1) {
            this.columns.forEach((/**
             * @param {?} cols
             * @return {?}
             */
            cols => {
                visibleCls = visibleCls.concat(this._getViewColumns(cols));
            }));
        }
        else {
            visibleCls = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => (n.visible || n.visible === undefined)));
        }
        return visibleCls.map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
    }
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    _getViewColumns(cols) {
        return cols.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => !c.colspan && (c.visible || c.visible === undefined)));
    }
    /**
     * @private
     * @return {?}
     */
    mergeColumnFormats() {
        if (this.sortInfo && Object.keys(this.sortInfo).length && this.columnFormat && this.columnFormat.length) {
            const { sortName, sortOrder } = this.sortInfo;
            if (sortName && sortName.length) {
                sortName.forEach((/**
                 * @param {?} n
                 * @param {?} i
                 * @return {?}
                 */
                (n, i) => {
                    /** @type {?} */
                    const col = this.columnFormat.find((/**
                     * @param {?} col
                     * @return {?}
                     */
                    (col) => {
                        return col.field === n;
                    }));
                    if (col) {
                        col.sortable = true;
                        col.order = sortOrder[i] || 'asc';
                    }
                }));
            }
        }
    }
    /**
     * @param {?} colFormatData
     * @return {?}
     */
    onColumnFormatChange(colFormatData) {
        this.columnFormat = colFormatData;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSubmitClick($event) {
        this.mergeColumnFormats();
        this.submitHandle.emit($event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onCancelClick($event) {
        this.cancelHandle.emit($event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSettingReset($event) {
        // this.reset.emit($event);
        /** @type {?} */
        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                this.reset2Default();
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    reset2Default() {
        /** @type {?} */
        const options = this.gridInstance.dfs['_state'].initialOptions;
        if (options.columnFields && options.columnFields.length) {
            /** @type {?} */
            const newColumns = [];
            options.columnFields.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                if (c.field !== '_datagrid-setting-control_') {
                    /** @type {?} */
                    const col = this.gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => n.field === c.field));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = Object.assign({}, c.footer || {});
                        col.groupFooter = Object.assign({}, c.groupFooter || {});
                        newColumns.push(col);
                    }
                }
            }));
            this.columns = [newColumns];
        }
        this.viewColumns = this.getViewColumns();
        if (options.sort) {
            /** @type {?} */
            const sortOrders = options.sort.sortOrder ? options.sort.sortOrder.split(',') : [];
            this.sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];
            this.sortInfo = { sortName: this.sortNames, sortOrder: sortOrders };
        }
        else {
            this.sortNames = [];
            this.sortInfo = {};
        }
        this.columnFormat = [...this.columns[0]];
        this.groupField = options.groupField ? options.groupField.split(',') : [];
    }
    /**
     * 显示简洁模式窗口
     * @param {?} $event
     * @return {?}
     */
    showConcise($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.mergeColumnFormats();
        this.concise.emit();
    }
}
DatagridSettingsComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-settings',
                template: "<div class=\"f-datagrid-settings d-flex flex-column\" style=\"height: 100%;\">\r\n\r\n    <div class=\"d-flex justify-content-between header\" #header>\r\n        <div class=\"title\">{{'datagrid.settings.title' | locale}}</div>\r\n\r\n        <div style=\"width: 100%;\" class=\"tabs\">\r\n            <div class=\"d-flex justify-content-center\">\r\n                <div class=\"d-flex tabs-labels\" (mousedown)=\"$event.stopPropagation()\">\r\n                    <div class=\"navitem\" [class.active]=\"activeTabIndex === 1\" (click)=\"changeTabs($event, 1)\"\r\n                        style=\"border: 0;\">\r\n                        <span style=\"padding: 0 14px;display: block;\">\r\n                            {{'datagrid.settings.visible' | locale}}\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"navitem\" *ngIf=\"canSetColumnSort\" [class.active]=\"activeTabIndex === 2 && canSetColumnSort\" (click)=\"changeTabs($event, 2)\" style=\"border: 0;\">\r\n                        <span style=\"padding: 0 14px;display: block;\">\r\n                            {{'datagrid.settings.sortting' | locale}}\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"navitem\" *ngIf=\"gridInstance?.groupRows\"\r\n                        [class.active]=\"activeTabIndex === 3\" (click)=\"changeTabs($event, 3)\" style=\"border: 0;\">\r\n                        <span style=\"padding: 0 14px; display: block;\">\r\n                            {{'datagrid.settings.groupping' | locale}}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"close\">\r\n            <span class=\"f-icon modal_close\" (click)=\"close($event)\"></span>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-utils-fill tabs-container\" [ngSwitch]=\"activeTabIndex\" >\r\n        <ng-container *ngSwitchCase=\"1\">\r\n            <column-format-setting [(fields)]=\"viewColumns\" [columns]=\"columns\"\r\n                (formatChange)=\"onColumnFormatChange($event)\"></column-format-setting>\r\n        </ng-container>\r\n        <ng-container *ngSwitchCase=\"2\">\r\n            <sort-setting [treeData]=\"sortTreeData\" [selectedIds]=\"sortNames\"\r\n                (sortInfoChange)=\"onSortInfoChange($event)\"></sort-setting>\r\n        </ng-container>\r\n\r\n        <ng-container *ngSwitchCase=\"3\">\r\n            <column-group-setting [(groupFields)]=\"groupField\" [fields]=\"viewColumns\" [columns]=\"columns\"\r\n                [(formatColumns)]=\"columnFormat\"></column-group-setting>\r\n        </ng-container>\r\n    </div>\r\n\r\n    <div class=\"buttons\">\r\n        <button class=\"btn btn-link\" (click)=\"showConcise($event)\" *ngIf=\"gridInstance.enableSimpleMode\"\r\n            style=\"width: 66px;height: 32px; float: left;\">{{ 'datagrid.settings.conciseMode' | locale: '\u7B80\u6D01\u6A21\u5F0F' }}</button>\r\n        <button class=\"btn btn-link reset\" (click)=\"onSettingReset($event)\"\r\n            *ngIf=\"enableReset\">{{ 'datagrid.settings.reset' | locale: '\u6062\u590D\u9ED8\u8BA4' }}</button>\r\n        <button class=\"btn btn-secondary cancel\"\r\n            (click)=\"onCancelClick($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n        <button class=\"btn btn-primary ok\"\r\n            (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n    </div>\r\n\r\n</div>",
                encapsulation: ViewEncapsulation.None,
                styles: [`

        .f-datagrid-settings .header {
            position:relative;width:100%; height: 56px;padding: 0 24px;border:0px
        }

        .f-datagrid-settings .header .title {
            display: block; white-space: nowrap; font-size: 17px; line-height: 56px;
        }
        .f-datagrid-settings .header .tabs {
            height: 32px;
            top: 12px; font-size: 14px;
            position: relative;
            line-height: 32px;
        }
        .f-datagrid-settings .header .tabs .tabs-labels {
            background: #EFF5FF;border-radius: 17px;color:#6080AD
        }

        .f-datagrid-settings .header .tabs .tabs-labels .navitem.active {
            line-height: 28px;
            margin: 2px;
            height: 28px;
            background: rgb(246 250 255);
            border-radius: 15px;
            box-shadow: 0 4px 18px 0 rgb(2 75 193 / 20%)
        }
        .f-datagrid-settings .header .close {
            line-height: 56px;padding: 0;width: 20px
        }
        .f-datagrid-settings .tabs-container {
            height: 100%;overflow: hidden; position: relative; margin: 0 24px; border: 1px solid #DEE1EA; border-radius: 8px;
        }
        .f-datagrid-settings .buttons
        {
            height: 66px;text-align: right;padding: 14px 24px 20px 24px;
        }

        .f-datagrid-settings .buttons button {
            width: 66px;height: 32px;
        }
        .f-datagrid-settings .buttons .cancel {
            margin-left: 12px;margin-right: 8px;
        }
        .f-datagrid-settings .buttons .ok {
            width: 100px;
        }

        .f-datagrid-settings .dg-column-format-setting>div{
            width: 360px; min-width:260px;overflow: hidden;background:#ffffff;padding: 10px 5px 10px 8px;border-right: 1px solid #DEE1EA
        }

        .f-datagrid-settings .dg-column-format-setting .checkbox, .format-setting-column .checkbox{
            margin-right: 5px; font-size: 14px;color: #0089FF;
        }

        .f-datagrid-settings  .column-group-setting .title{
            height: 36px; line-height: 36px; color: #59a1ff
        }

        .f-datagrid-settings  .column-group-setting .all-fields {
            background-color:#fff;padding-top: 0px!important;
        }

        .f-datagrid-settings  .column-group-setting .group-sum-fields {
            height: 36px; line-height: 36px; border-top: 1px solid #e4e7ef; color: #59a1ff
        }


        .smooth-dnd-ghost.format-setting-column {
            border: 1px solid #2a87ff;
            z-index: 999999999 !important;
            background-color: #e7f1ff;;
            padding: 4px 8px;
            color: rgb(0 0 0);
        }

        .smooth-dnd-ghost.format-setting-column .field-drag-handle {
            float: right;
        }

        .dg-column-format-setting  .smooth-dnd-drop-preview-constant-class {
            background-color: #dee1ea;
        }
        .dg-column-format-setting .format-setting-column {
            background: #fafbfd;
            padding: 4px 8px;
            margin-bottom: 5px;
            border: 1px solid #f2f4f8;
            border-radius: 5px;
        }
        .dg-column-format-setting .format-setting-column.active {
            color: rgb(0 0 0);
            border: 1px solid #2a87ff;
            background: #e7f1ff;
            border-top: 1px solid #2a87ff!important;
            border-bottom: 1px solid #2a87ff!important;
        }

        .dg-column-format-setting .format-setting-column .field-drag-handle{
            float: right;
            cursor: grab;
        }

        .dg-column-format-setting .format-setting-column .field-drag-handle:active{
            cursor: grabbing;
        }

        `]
            }] }
];
/** @nocollapse */
DatagridSettingsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: Injector }
];
DatagridSettingsComponent.propDecorators = {
    enableReset: [{ type: Input }],
    columns: [{ type: Input }],
    cancelHandle: [{ type: Output }],
    submitHandle: [{ type: Output }],
    reset: [{ type: Output }],
    concise: [{ type: Output }],
    schemeInfo: [{ type: Input }],
    header: [{ type: ViewChild, args: ['header',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} valObj
 * @param {?} localeId
 * @return {?}
 */
function getMultilingualValue(valObj, localeId) {
    if (valObj && typeof valObj === 'object' && Object.keys(valObj).length > 0) {
        localeId = localeId || 'zh-CHS';
        /** @type {?} */
        const val = valObj[localeId];
        if (val !== undefined) {
            return val;
        }
        else {
            console.log(`can not find '${localeId}' in `, valObj);
            return '';
        }
    }
    else {
        return '';
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SimpleColumnsComponent {
    /**
     * @param {?} injector
     * @param {?} cd
     */
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.enableScheme = false;
        this.seartTypes = [];
        /**
         * 所有列
         */
        this.columns = [];
        /**
         * 显示的列
         */
        this.fields = [];
        /**
         * 点击侧边样式以外的区域隐藏面板。默认为 true
         */
        this.clickToHidden = true;
        this.top = 0;
        this._schemeList = [];
        this.cls = 'f-datagrid-settings-simple-host';
        this.formatChange = new EventEmitter();
        this.fieldsChange = new EventEmitter();
        this.submit = new EventEmitter();
        this.closed = new EventEmitter();
        this.advanced = new EventEmitter();
        this.addNewScheme = new EventEmitter();
        this.showSchemeList = new EventEmitter();
        this.activeItemChange = new EventEmitter();
        this.allCols = [];
        this.columnType = 'all';
        this.isEn = false;
        this.showSchemePanel = false;
        this.switchValue = false;
        // 当前方案
        this.currentSchemeItem = null;
        this.searchResultIsVisibleAll = false;
        this.defaultSchemeName = '系统预制';
        this.settings = {};
        this.localeSer = this.injector.get(LocaleService, null);
        this.messager = this.injector.get(MessagerService, null);
    }
    /**
     * @return {?}
     */
    get schemeList() {
        return this._schemeList;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set schemeList(val) {
        if (val && val.length) {
            val.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                n['_title_'] = getMultilingualValue(JSON.parse(n.name), this.localeSer.localeId);
            }));
        }
        this._schemeList = val || [];
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        // console.log($event);
        $event.stopPropagation();
        /** @type {?} */
        const clsname = $event.target['className'] || '';
        if (clsname.indexOf('f-datagrid-settings-simple-host') > -1) {
            // 隐藏侧边栏；
            if (this.clickToHidden) {
                this.close();
            }
        }
        this.showSchemePanel = false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onEscKeydown($event) {
        $event.stopPropagation();
        if (!document.querySelector('modal-container')) {
            this.close();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onEnterKeydown($event) {
        $event.stopPropagation();
        if (!document.querySelector('modal-container')) {
            this.onSubmitClick();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onControlGKeydown($event) {
        if ($event.ctrlKey && !document.querySelector('modal-container')) {
            $event.preventDefault();
            $event.stopPropagation();
            if ($event.key.toLowerCase() === 'g') {
                this.showAdvanced($event);
            }
            else if ($event.key.toLowerCase() === 'r') {
                this.onSettingReset();
            }
            else if ($event.key.toLowerCase() === 's') {
                this.searchInput.nativeElement.focus();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getCurrentSchemeSettings() {
        if (this.currentSchemeItem) {
            /** @type {?} */
            const schemeSettings = JSON.parse(this.currentSchemeItem.queryConditionString);
            return (/** @type {?} */ (schemeSettings[this.localeSer.localeId]));
        }
        return null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.allCols = this.columns[0];
        if (this.gridInstance.enableScheme && this.currentSchemeItem) {
            this.settings = this.getCurrentSchemeSettings() || {};
        }
        if (this.settings && this.settings.viewColumns && this.settings.viewColumns.length) {
            this.fields = this.settings.viewColumns;
            this.dirtySettings(true);
        }
        else {
            this.fields = this.getViewColumns();
        }
        this.container.nativeElement.focus();
        this.defaultSchemeName = this.localeSer.getValue('datagrid.scheme.syspreset') || this.gridInstance.defaultSchemeName;
    }
    /**
     * @private
     * @return {?}
     */
    getViewColumns() {
        // 多表头
        /** @type {?} */
        let visibleCls = [];
        if (this.columns.length > 1) {
            this.columns.forEach((/**
             * @param {?} cols
             * @return {?}
             */
            cols => {
                visibleCls = visibleCls.concat(this._getViewColumns(cols));
            }));
        }
        else {
            visibleCls = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => (n.visible || n.visible === undefined)));
        }
        return visibleCls.map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
    }
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    _getViewColumns(cols) {
        return cols.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => !c.colspan && (c.visible || c.visible === undefined)));
    }
    // 根据列的类型进行筛选过滤，
    // all 所有列
    // visible 可见列
    // hidden 隐藏列
    // group 分组列
    /**
     * @param {?=} searchWords
     * @return {?}
     */
    filterColumns(searchWords = '') {
        /** @type {?} */
        let cols = [];
        if (this.switchValue) {
            cols = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => this.fields.indexOf(n.field) > -1));
        }
        else {
            cols = this.columns[0];
        }
        if (searchWords) {
            cols = cols.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.title.toLowerCase().indexOf(searchWords.toLowerCase()) > -1));
        }
        this.allCols = cols;
    }
    /**
     * @private
     * @return {?}
     */
    onFieldsChanged() {
        if (!this.gridInstance.enableScheme) {
            this.fieldsChange.emit(this.fields);
        }
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onDblClick($event, col) {
        // console.log('显示与隐藏切换事件', col);
        this.onCheckboxClick($event, col);
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onCheckboxClick($event, col) {
        // console.log('显示与隐藏切换事件', col);
        $event.stopPropagation();
        this.showSchemePanel = false;
        /** @type {?} */
        let checked = false;
        /** @type {?} */
        const index = this.fields.indexOf(col.field);
        if (index === -1) {
            this.fields.push(col.field);
            checked = true;
        }
        else {
            this.fields.splice(index, 1);
            checked = false;
        }
        /** @type {?} */
        const item = this.columns[0].find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === col.field));
        if (item) {
            item.visible = checked;
        }
        // this.columns[0].forEach(f => {
        //     f.visible = this.fields.indexOf(f.field) > -1;
        // });
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        this.searchResultIsVisibleAll = this.allCols.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).length === this.allCols.length;
        this.dirtySettings(true);
        this.onFieldsChanged();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    searchColumn($event) {
        /** @type {?} */
        const txt = $event.target.value;
        this.filterColumns(txt);
    }
    /**
     * @param {?} fieldInfo
     * @param {?} txt
     * @param {?} ulElRef
     * @return {?}
     */
    onFieldDrop(fieldInfo, txt, ulElRef) {
        this.showSchemePanel = false;
        // console.log('drop', fieldInfo);
        const { removedIndex, addedIndex } = fieldInfo;
        /** @type {?} */
        const moveItem = this.allCols[removedIndex];
        /** @type {?} */
        const targetItem = this.allCols[addedIndex];
        /** @type {?} */
        const moveItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === moveItem.field));
        /** @type {?} */
        const targetItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === targetItem.field));
        /** @type {?} */
        const removedItem = this.columns[0].splice(moveItemIndex, 1);
        this.columns[0].splice(targetItemIndex, 0, ...removedItem);
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        this.onFieldsChanged();
        this.filterColumns(txt);
    }
    /**
     * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
     * @private
     * @return {?}
     */
    getCheckAllState() {
        if (!this.searchInput.nativeElement.value) {
            if (this.fields.length === 0) {
                return 0;
            }
            else {
                if (this.fields.length === this.columns[0].length) {
                    return 1;
                }
                return 2;
            }
        }
        else {
            /** @type {?} */
            const visibleLen = this.allCols.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible)).length;
            if (visibleLen === this.allCols.length) {
                return 1;
            }
            else {
                if (visibleLen < this.allCols.length) {
                    if (visibleLen === 0) {
                        return 0;
                    }
                    return 1;
                }
            }
        }
    }
    // 全选
    /**
     * @param {?} $event
     * @param {?} txt
     * @return {?}
     */
    onCheckAllClick($event, txt) {
        $event.stopPropagation();
        this.showSchemePanel = false;
        /** @type {?} */
        const state = this.getCheckAllState();
        /** @type {?} */
        const isCheckAll = state === 0 || state === 2;
        if (!txt) {
            this.columns[0].forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible = isCheckAll));
        }
        else {
            this.columns[0].forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                /** @type {?} */
                const item = this.allCols.find((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => n.field == a.field));
                if (item) {
                    n.visible = isCheckAll;
                    item.visible = isCheckAll;
                }
            }));
        }
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        this.searchResultIsVisibleAll = this.allCols.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).length === this.allCols.length;
        this.dirtySettings(true);
        this.onFieldsChanged();
        this.filterColumns(txt);
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    close($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.closed.emit();
    }
    // 打开高级设置窗口
    /**
     * @param {?} $event
     * @return {?}
     */
    showAdvanced($event) {
        this.close($event);
        this.advanced.emit({ viewFields: this.fields });
    }
    // 恢复默认
    /**
     * @param {?=} $event
     * @return {?}
     */
    onSettingReset($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.showSchemePanel = false;
        /** @type {?} */
        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                this.reset2Default();
                this.dirtySettings(true);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    reset2Default() {
        /** @type {?} */
        const options = this.gridInstance.dfs['_state'].initialOptions;
        if (options.columnFields && options.columnFields.length) {
            /** @type {?} */
            const newColumns = [];
            options.columnFields.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                if (c.field !== '_datagrid-setting-control_') {
                    /** @type {?} */
                    const col = this.gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => n.field === c.field));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = Object.assign({}, c.footer || {});
                        col.groupFooter = Object.assign({}, c.groupFooter || {});
                        newColumns.push(col);
                    }
                }
            }));
            this.columns = [newColumns];
        }
        this.allCols = this.columns[0];
        this.settings = {};
        this.fields = this.getViewColumns();
        this.settings.viewColumns = this.fields;
        this.settings.columnFormat = [...this.columns[0]];
        if (options.sort) {
            /** @type {?} */
            const sortOrders = options.sort.sortOrder ? options.sort.sortOrder.split(',') : [];
            /** @type {?} */
            const sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];
            this.settings.sortInfo = { sortName: sortNames, sortOrder: sortOrders };
        }
        else {
            this.settings.sortInfo = {};
        }
        this.settings.groupField = options.groupField ? options.groupField.split(',') : [];
    }
    // 确定按钮点击事件
    /**
     * @param {?=} $event
     * @return {?}
     */
    onSubmitClick($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.showSchemePanel = false;
        this.settings.viewColumns = this.fields;
        if (!this.enableScheme || !this.currentSchemeItem) {
            if (!this.settings.columnFormat) {
                this.settings.columnFormat = [...this.columns[0]];
            }
            if (!this.settings.sortInfo) {
                this.settings.sortInfo = {
                    sortName: this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [],
                    sortOrder: this.gridInstance.sortOrder ? this.gridInstance.sortOrder.split(',') : []
                };
            }
            if (this.settings.groupField === undefined) {
                this.settings.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];
            }
        }
        else {
            /** @type {?} */
            const _settings = this.getCurrentSchemeSettings();
            if (_settings) {
                this.settings = Object.assign(_settings || {}, this.settings);
            }
        }
        // this.activeItemChange.emit(this.activeSchemeItem);
        this.submit.emit({ content: this.settings, close: this.close.bind(this), target: this.btnOk.nativeElement, currentScheme: this.currentSchemeItem });
    }
    // 显示下拉方案列表
    /**
     * @param {?} $event
     * @return {?}
     */
    onChooseScheme($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.showSchemePanel = !this.showSchemePanel;
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.schemeitemsEleRef && this.currentSchemeItem) {
                /** @type {?} */
                const itemEl = this.schemeitemsEleRef.nativeElement.querySelector(`#schemeitem_${this.currentSchemeItem.id}`);
                if (itemEl) {
                    if (itemEl.scrollIntoViewIfNeeded) {
                        itemEl.scrollIntoViewIfNeeded();
                    }
                    else {
                        itemEl.scrollIntoView();
                    }
                }
            }
        }));
    }
    // 仅显示可见列
    /**
     * @param {?} $event
     * @return {?}
     */
    onlySeeVisibleColumns($event) {
        this.switchValue = $event;
        this.filterColumns();
    }
    // 新增方案
    /**
     * @param {?} $event
     * @return {?}
     */
    onNewSchemeClick($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.showSchemePanel = false;
        this.addNewScheme.emit();
    }
    // 显示方案列表管理窗口
    /**
     * @param {?} $event
     * @return {?}
     */
    onShowSchemeList($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.showSchemePanel = false;
        this.showSchemeList.emit();
    }
    // 方案点击
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onSchemeItemClick($event, item) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.currentSchemeItem = item;
            this.showSchemePanel = false;
            /** @type {?} */
            let schemeSettings = null;
            if (item) {
                schemeSettings = JSON.parse(item.queryConditionString);
                schemeSettings = schemeSettings[this.localeSer.localeId];
                if (!schemeSettings) {
                    this.reset2Default();
                }
                else {
                    this.settings = schemeSettings;
                    this.fields = schemeSettings.viewColumns;
                }
            }
            else {
                this.reset2Default();
            }
            this.cd.detectChanges();
        }));
    }
    /**
     * @param {?} flag
     * @return {?}
     */
    dirtySettings(flag) {
        // this.isChanged = flag;
    }
}
SimpleColumnsComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-settings-simple',
                template: "<div class=\"d-flex flex-column f-datagrid-settings-simple\" tabindex=\"0\" #colcontainer\r\n    [style.top.px]=\"top\" [style.height]=\"'calc(100vh - ' +  top + 'px)'\" >\r\n\r\n    <div class=\"header d-flex\">\r\n        <div class=\"f-utils-fill title d-flex flex-row\"> {{ 'datagrid.settings.simple.title' | locale }} \r\n            <button #btnSchemeName class=\"btn ml-3 px-2 scheme-name d-flex flex-row\"  *ngIf=\"enableScheme\" (click)=\"onChooseScheme($event)\">\r\n                <!-- <span *ngIf=\"isChanged\">*</span> -->\r\n                <span>{{ currentSchemeItem? currentSchemeItem._title_ : defaultSchemeName }}</span>\r\n                <span class=\"f-icon f-icon-arrow-s ml-2\" style=\"font-size: 12px;\"></span>\r\n            </button>\r\n        </div>\r\n        <div class=\"closed\" (click)=\"close($event)\">\r\n            <span class=\"f-icon f-icon-close\" style=\"font-size: 20px;\"></span>\r\n        </div>\r\n    </div>\r\n    <div class=\"scheme-manager-dropdown\" [style.display]=\"showSchemePanel? '': 'none'\" [style.left.px]=\"btnRef? btnRef.nativeElement.offsetLeft : 97\"  (click)=\"$event.stopPropagation()\">\r\n        <div class=\"f-utils-fill f-utils-flex-column m-2\">\r\n            <div class=\"pb-2\" style=\"max-height: calc(100vh - 300px);overflow: auto\">\r\n                <ul #schemeitems>\r\n                    <li class=\"scheme-manager__item\" [class.active]=\"!currentSchemeItem\" (click)=\"onSchemeItemClick($event, null)\"> \r\n                        <!-- <span *ngIf=\"isChanged && !activeSchemeItem\">*</span> -->\r\n                        {{'datagrid.scheme.syspreset' | locale}}\r\n                    </li>\r\n                    <li [attr.id]=\"'schemeitem_'+ item.id\" class=\"scheme-manager__item d-flex flex-row\" \r\n                        [class.active]=\"currentSchemeItem && currentSchemeItem?.id === item.id\"  \r\n                        *ngFor=\"let item of schemeList\" (click)=\"onSchemeItemClick($event, item)\" title=\"{{item._title_}}\">\r\n                        <!-- <span *ngIf=\"isChanged && activeSchemeItem?.id==item.id\">*</span> -->\r\n                        <span class=\"f-utils-fill mr-1\" style=\"text-overflow: ellipsis;\">{{item._title_}}</span>\r\n                        <span class=\"scheme-manager__label default\" *ngIf=\"item.isDefault\">{{'datagrid.scheme.isDefault' | locale}}</span>\r\n                        <span class=\"scheme-manager__label public\" *ngIf=\"item.type === 'public'\">{{'datagrid.scheme.isPublic' | locale}}</span>\r\n                        <span class=\"scheme-manager__label private\" *ngIf=\"!item.isDefault && item.type === 'private'\">{{'datagrid.scheme.isPrivate' | locale}}</span>\r\n                        <span class=\"scheme-manager__label org\" *ngIf=\"item.type === 'org'\">{{'datagrid.scheme.isOrg' | locale}}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div class=\"d-flex scheme-manager__button-add\">\r\n                <button (click)=\"onNewSchemeClick($event)\">\r\n                    <span class=\"f-icon f-icon-plus\"></span>{{'datagrid.scheme.newScheme' | locale}}\r\n                </button>\r\n            </div>\r\n\r\n            <div class=\"p-2 mt-2\">\r\n                <div class=\"btn-toolbar\" style=\"justify-content: flex-end;\">\r\n                    <button class=\"btn btn-link mr-3\" (click)=\"onShowSchemeList($event)\">{{'datagrid.scheme.mgrScheme' | locale}}</button>\r\n                    <button class=\"btn btn-primary mr-1\" (click)=\"onNewSchemeClick($event)\">{{'datagrid.scheme.saveas' | locale}} </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"f-utils-fill content d-flex flex-column\">\r\n        <div>\r\n            <div class=\"d-flex flex-row mb-2\" style=\"align-items: center;\">\r\n                <h5 class=\"count f-utils-fill m-0\" [innerHTML]=\"'datagrid.settings.simple.count' | locale | replaceX: fields.length\"></h5>\r\n                <div class=\"d-flex flex-row\">{{'datagrid.scheme.onlyshowcolumns' | locale}} \r\n                    <farris-switch style=\"position: relative;\r\n                    top: 2px;\r\n                    margin-left: 5px;\"\r\n                    id=\"only-visible-columns\"\r\n                    [square]=\"false\" [size]=\"'small'\"\r\n                    [ngModel]=\"switchValue\" \r\n                    (valueChange)=\"onlySeeVisibleColumns($event)\"\r\n                    ></farris-switch></div>\r\n            </div>\r\n\r\n            <div class=\"tip\">\r\n                {{ 'datagrid.settings.simple.tip' | locale }}\r\n            </div>\r\n            <div class=\"input-group mb-2 scheme-manager__search-box\">\r\n                <input #inputWord type=\"text\" class=\"form-control\" placeholder=\"{{'datagrid.settings.searchPlaceholder' | locale}}\"\r\n                (input)=\"searchColumn($event)\" style=\"height: 26px;\">\r\n                <div  class=\"input-group-append\">\r\n                    <span  class=\"fa f-icon-search\"></span>\r\n                </div>\r\n            </div>\r\n            \r\n\r\n            <div style=\"padding: 5px 0px;\">\r\n                <button class=\"btn btn-link \" style=\"height: 32px;padding-left: 4px;\" (click)=\"onCheckAllClick($event,inputWord.value)\">\r\n                    <span class=\"f-icon f-icon-minus-outline checkall\" [class.f-icon-checkbox]=\"!fields.length\"\r\n                        [class.f-icon-checkbox-checked]=\" searchInput.nativeElement.value ?  searchResultIsVisibleAll : fields.length === allCols.length\"></span>\r\n                    {{ 'datagrid.settings.checkall' | locale }}\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <div style=\"overflow: auto;padding-right:3px\" class=\"f-utils-fill\">\r\n            <ul class=\"list-group list-group-flush\" #ul column-visible-drag (drop)=\"onFieldDrop($event, inputWord.value, ul)\">\r\n                <li class=\"list-group-item list-group-item-action smooth-dnd-draggable-wrapper format-setting-column\" *ngFor=\"let col of allCols\" \r\n                    (click)=\"onDblClick($event, col)\">\r\n                    <span class=\"f-icon checkbox\"\r\n                        [class.f-icon-checkbox-checked]=\"fields.indexOf(col.field) > -1\"\r\n                        [class.f-icon-checkbox]=\"fields.indexOf(col.field) == -1\"\r\n                        (click)=\"onCheckboxClick($event, col)\"></span>\r\n                    {{ col.title}} \r\n\r\n                    <span class=\"f-icon f-icon-drag-vertical field-drag-handle\"></span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n    </div>\r\n    <div class=\"footer\">\r\n\r\n        <div class=\"buttons\">\r\n            <button class=\"btn btn-link advanced\" (click)=\"showAdvanced($event)\">{{ 'datagrid.settings.advancedMode' | locale: '\u9AD8\u7EA7\u6A21\u5F0F' }}</button>\r\n            <button class=\"btn btn-link reset\" (click)=\"onSettingReset($event)\">{{ 'datagrid.settings.reset' | locale: '\u6062\u590D\u9ED8\u8BA4' }}</button>\r\n            <button class=\"btn btn-secondary cancel\"\r\n                (click)=\"close($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n            <button class=\"btn btn-primary ok\" #okbtn\r\n                (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".f-datagrid-settings-simple{position:fixed;top:100px;right:-500px;z-index:10000;height:calc(100vh - 100px);width:468px;background:#fff;border:1px solid #e6e9f0;border-radius:10px 0 0 10px;transition:right .3s}.f-datagrid-settings-simple:focus{outline:0}.f-datagrid-settings-simple .header{height:50px;line-height:50px;border-bottom:1px solid #eaedf3;font-size:18px;color:#2d2f33}.f-datagrid-settings-simple .header .scheme-name{border-radius:6px;color:#2a87ff;background:#ebf4ff;height:28px;align-items:center}.f-datagrid-settings-simple .header .title{padding-left:21px;font-weight:700;align-items:center}.f-datagrid-settings-simple .header .closed{width:50px;text-align:center;cursor:pointer}.f-datagrid-settings-simple .content .count{font-size:14px;color:#2d2f33}.f-datagrid-settings-simple .content .tip{background:#f7faff;border-radius:6px;line-height:20px;margin-bottom:10px;min-height:42px;align-items:center;display:flex;padding:5px}.f-datagrid-settings-simple .content .checkall{margin-left:5px;font-size:14px;color:#0089ff;margin-right:5px}.f-datagrid-settings-simple .content{margin:20px 24px}.f-datagrid-settings-simple .footer{height:32px;margin:20px}.smooth-dnd-ghost.format-setting-column{z-index:999999999!important;padding:4px 8px;background-color:#e7f1ff;border:1px solid #2a87ff}.smooth-dnd-ghost.format-setting-column .field-drag-handle{float:right}.f-datagrid-settings-simple .smooth-dnd-drop-preview-constant-class{background-color:#dee1ea}.f-datagrid-settings-simple .format-setting-column{background:#fafbfd;padding:4px 8px;margin-bottom:5px;border:1px solid #f2f4f8;border-radius:5px;color:#000}.f-datagrid-settings-simple .format-setting-column.active{border:1px solid #2a87ff;background:#e7f1ff;border-top:1px solid #2a87ff!important;border-bottom:1px solid #2a87ff!important}.format-setting-column .checkbox{font-size:14px;color:#0089ff;margin-right:5px;cursor:pointer}.f-datagrid-settings-simple .format-setting-column .field-drag-handle{float:right;cursor:-webkit-grab;cursor:grab}.f-datagrid-settings-simple .format-setting-column .field-drag-handle:active{cursor:-webkit-grabbing;cursor:grabbing}.f-datagrid-settings-simple .list-group-flush:last-child .list-group-item:last-child{border-bottom:1px solid #f2f4f8}.f-datagrid-settings-simple .list-group-flush:first-child .list-group-item:first-child{border-top:1px solid #f2f4f8}.f-datagrid-settings-simple .buttons{text-align:right}.f-datagrid-settings-simple .buttons button{width:66px;height:32px}.f-datagrid-settings-simple .buttons .cancel{margin-left:12px;margin-right:8px}.f-datagrid-settings-simple .buttons .ok{width:100px}.f-datagrid-settings-simple .buttons .advanced{width:66px;height:32px;float:left}.f-datagrid-settings-simple-host{width:100%;height:100%;position:absolute;top:0;left:0;z-index:1000}.f-datagrid-settings-simple .visible-cols-count{font-size:18px;font-weight:500}.scheme-manager-dropdown{z-index:1000;position:absolute;top:50px;width:230px;border-radius:10px;background-color:#fff;border:1px solid #eaedf3;left:95px;box-shadow:0 2px 12px 0 #d8dce6}.scheme-manager-dropdown::before{content:\"\";position:absolute;border:10px solid #0000;bottom:100%;left:20px;border-bottom-color:#e3e3e3}.scheme-manager-dropdown::after{content:\"\";position:absolute;border:10px solid #0000;bottom:100%;left:20px;border-bottom-color:#fff;margin-bottom:-1px}.scheme-manager__button-add{align-items:center;justify-content:center}.scheme-manager__button-add>button{background:#fff;width:100%;height:32px;border:1px dashed #2a87ff40;border-radius:6px;cursor:pointer}.scheme-manager__button-add>button:focus{outline:0}.scheme-manager__button-add>button>span.f-icon{position:relative;top:2px}.scheme-manager__button-add>button:hover{background:#2a87ff;color:#fff}.scheme-manager__search-box{border-radius:5px}.scheme-manager__search-box .input-group-append{width:30px;background:0 0;color:#b4bccc;display:flex;align-items:center;justify-content:center}.scheme-manager__item{line-height:30px;padding:2px 10px;font-size:13px;border-radius:6px;cursor:pointer;align-items:center}.scheme-manager__item:hover{background-color:#f7f8fb}.scheme-manager__item.active{background:#cbe1ff;color:#1564cb}#only-visible-columns .switch-small{min-width:1.88rem;height:.85rem}#only-visible-columns .switch-small small{width:.775rem;height:.775rem;left:1px;top:0}#only-visible-columns .switch.switch-small.checked small{right:1px;left:auto}.f-datagrid-save-scheme .header{height:50px;align-items:center;cursor:move;border-bottom:0}.f-datagrid-save-scheme .header .title{font-size:17px;color:#2d2f33;font-weight:500;margin-left:20px}.f-datagrid_scheme-switch .switch-medium{min-width:1.88rem!important;height:.85rem!important}.scheme-manager__label{border-radius:4px;font-size:12px;height:18px;min-width:32px;align-items:end;line-height:16px;text-align:center}.scheme-manager__label.default{border:1px solid green;color:green;background:#f0f9f2}.scheme-manager__label.public{border:1px solid #4075fa;color:#4075fa;background:#ecf2ff}.scheme-manager__label.private{border:1px solid #d8dce6;color:#878d99;background:#f7f8fb}.scheme-manager__label.org{border:1px solid #f4883e;color:#e46700;background:#fff9eb}.scheme-org-tip{padding-left:5px;color:#878d99;font-size:12px}"]
            }] }
];
/** @nocollapse */
SimpleColumnsComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
SimpleColumnsComponent.propDecorators = {
    enableScheme: [{ type: Input }],
    seartTypes: [{ type: Input }],
    columns: [{ type: Input }],
    fields: [{ type: Input }],
    clickToHidden: [{ type: Input }],
    top: [{ type: Input }],
    schemeList: [{ type: Input }],
    cls: [{ type: HostBinding, args: ['class',] }],
    container: [{ type: ViewChild, args: ['colcontainer',] }],
    btnOk: [{ type: ViewChild, args: ['okbtn',] }],
    searchInput: [{ type: ViewChild, args: ['inputWord',] }],
    schemeitemsEleRef: [{ type: ViewChild, args: ['schemeitems',] }],
    btnRef: [{ type: ViewChild, args: ['btnSchemeName',] }],
    formatChange: [{ type: Output }],
    fieldsChange: [{ type: Output }],
    submit: [{ type: Output }],
    closed: [{ type: Output }],
    advanced: [{ type: Output }],
    addNewScheme: [{ type: Output }],
    showSchemeList: [{ type: Output }],
    activeItemChange: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onEscKeydown: [{ type: HostListener, args: ['window:keydown.esc', ['$event'],] }],
    onEnterKeydown: [{ type: HostListener, args: ['window:keydown.enter', ['$event'],] }],
    onControlGKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 保存方案API
 * @type {?}
 */
const SCHEME_WEBAPI = '/api/runtime/sys/v1.0/querysolution';
/**
 * 获取方案列表API
 * @type {?}
 */
const SCHEME_WEBAPI_QUERY = `${SCHEME_WEBAPI}/belongId/`;
/**
 * 方案列表管理- 设默认、删除 API
 * @type {?}
 */
const SCHEME_WEBAPI_UPDATE = `${SCHEME_WEBAPI}/batch`;
/**
 * 权限验证
 * @type {?}
 */
const SCHEME_WEBAPI_Auth = '/api/runtime/sys/v1.0/querysolution/componentType/Datagrid';
/** @type {?} */
const LANGUAGE_WEBAPI = '/api/runtime/sys/v1.0/loginInfo?infoType=supportedLanguage';
class DatagridSchemeService {
    constructor() {
        this.restService = null;
        this.state = {};
        this.schemeList$ = new Subject();
    }
    /**
     * @param {?} d
     * @param {?} gridId
     * @return {?}
     */
    update(d, gridId) {
        if (!this.state[gridId]) {
            this.state[gridId] = {};
        }
        this.state[gridId] = Object.assign(this.state[gridId], d);
    }
    /**
     * @param {?} httpSer
     * @return {?}
     */
    setRestService(httpSer) {
        if (httpSer && httpSer['befRepository']) {
            this.restService = httpSer['befRepository']['restService'];
        }
    }
    /**
     * @private
     * @return {?}
     */
    getWebFormKey() {
        /** @type {?} */
        const webformHash = window.location.hash.split('?')[0];
        return webformHash.substring(webformHash.lastIndexOf('/') + 1);
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    getSchemeKey(gridId) {
        /** @type {?} */
        const formKey = this.getWebFormKey();
        return `${formKey}_DatagridScheme_${gridId}`;
    }
    /**
     * @param {?} gridID
     * @return {?}
     */
    getSchemeList(gridID) {
        /** @type {?} */
        const uri = SCHEME_WEBAPI_QUERY + this.getSchemeKey(gridID);
        if (this.restService) {
            return this.restService.invoke(uri, 'GET', null, null, false);
        }
    }
    /**
     * @param {?} scheme
     * @param {?} gridID
     * @param {?=} isUpdate
     * @return {?}
     */
    saveScheme(scheme, gridID, isUpdate = false) {
        if (this.restService) {
            /** @type {?} */
            const httpMethod = isUpdate ? 'PUT' : 'POST';
            scheme.belongId = this.getSchemeKey(gridID);
            return this.restService.invoke(SCHEME_WEBAPI, httpMethod, null, { body: scheme }, false);
        }
    }
    /**
     * @param {?} param
     * @param {?} gridID
     * @return {?}
     */
    updateScheme(param, gridID) {
        if (!param) {
            return of(false);
        }
        /** @type {?} */
        const belongId = this.getSchemeKey(gridID);
        param.belongId = belongId;
        if (param.belongId) {
            return this.restService.invoke(SCHEME_WEBAPI_UPDATE, 'PUT', null, { body: param }, false);
        }
    }
    /**
     * @param {?} gridId
     * @param {...?} statePro
     * @return {?}
     */
    getStateValue(gridId, ...statePro) {
        /** @type {?} */
        const dgState = this.state[gridId];
        if (dgState) {
            if (statePro && statePro.length) {
                return statePro.reduce((/**
                 * @param {?} r
                 * @param {?} c
                 * @return {?}
                 */
                (r, c) => {
                    return r[c];
                }), dgState);
            }
            return dgState;
        }
        return null;
    }
    /**
     * @private
     * @param {?} gridId
     * @param {?} propertyName
     * @param {?} value
     * @return {?}
     */
    updateStateValue(gridId, propertyName, value) {
        this.update({ [propertyName]: value }, gridId);
    }
    /**
     * @param {?} gridId
     * @param {?} newSchemeList
     * @return {?}
     */
    setSchemeList(gridId, newSchemeList) {
        this.updateStateValue(gridId, 'list', newSchemeList);
        this.schemeList$.next(newSchemeList);
    }
    /**
     * @param {?} gridId
     * @param {?} schemeName
     * @return {?}
     */
    hasSchemeName(gridId, schemeName) {
        /** @type {?} */
        const schemeList = this.getStateValue(gridId, 'list');
        if (!schemeList || !schemeList.length) {
            return false;
        }
        if (typeof schemeName === 'string') {
            return !!schemeList.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.name === schemeName.trim()));
        }
        else {
            if (typeof schemeName === 'object') {
                /** @type {?} */
                const replayNames = [];
                schemeList.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    /** @type {?} */
                    const currentNames = Object.values(n.name);
                    for (let k in schemeName) {
                        if (currentNames.includes(schemeName[k])) {
                            replayNames.push(k);
                        }
                    }
                }));
                return replayNames;
            }
        }
    }
    /**
     * @return {?}
     */
    checkAuthority() {
        return this.restService.invoke(SCHEME_WEBAPI_Auth, 'GET', null, null, false);
    }
    /**
     * @return {?}
     */
    getLanguages() {
        return this.restService.invoke(LANGUAGE_WEBAPI, 'GET', null, null, false);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NewSchemeComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        this.cd = cd;
        this.dataPermissionIds = [];
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.checkAuthority = new EventEmitter();
        this.schemeInfo = {
            name: '',
            isDefault: false,
            type: 'private',
            orgids: ''
        };
        this.schemeType = 'private';
        this.noPublicAuthority = false;
        this.noOrgAuthority = false;
        this.languages = [{ code: 'zh-CHS', name: '中文简体', default: true }, { code: 'en', name: 'English' }, { code: 'zh-CHT', name: '中文繁体' }];
        this.nameMaxLength = { 'zh-CHS': 9, 'zh-CHT': 9, en: 50 };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    close($event) {
        this.closeModal.emit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    submit($event) {
        this.submitModal.emit(this.schemeInfo);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onCancelClick($event) {
        this.close($event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSelectedOrg($event) {
        if ($event.selections && $event.selections.length) {
            /** @type {?} */
            let orgids = $event.selections.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.orgId));
            this.schemeInfo.orgids = orgids;
        }
    }
    /**
     * @param {?} $event
     * @param {?} val
     * @return {?}
     */
    onSetRangeType($event, val) {
        $event.stopPropagation();
        this.schemeType = val;
        if (val === 'public' || val === 'org') {
            this.checkAuthority.emit({ value: val, schemeInfo: this.schemeInfo });
        }
        else {
            this.schemeInfo.type = val;
        }
        // console.log($event, this.schemeInfo.type);
    }
    /**
     * @param {?=} hasAuthority
     * @return {?}
     */
    refresh(hasAuthority = { public: true, org: true }) {
        this.schemeInfo = Object.assign({}, this.schemeInfo);
        this.schemeType = this.schemeInfo.type;
        this.noPublicAuthority = !hasAuthority.public;
        this.noOrgAuthority = !hasAuthority.org;
        this.cd.detectChanges();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    getSelectedId($event) {
        console.log($event);
        if ($event.selections && $event.selections.length) {
            this.schemeInfo.orgids = $event.selections.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.orgId));
        }
        else {
            this.schemeInfo.orgids = '';
        }
    }
    /**
     * @return {?}
     */
    clearAllOrgs() {
        this.schemeInfo.orgids = '';
    }
}
NewSchemeComponent.decorators = [
    { type: Component, args: [{
                selector: 'new-scheme',
                template: "\r\n\r\n\r\n<div class=\"f-datagrid-save-scheme d-flex flex-column\" style=\"height: 100%;\">\r\n\r\n    <div class=\"d-flex justify-content-between header\" #header >\r\n        <div class=\"title\">{{'datagrid.scheme.saveTitle' | locale}}</div>\r\n        <div class=\"close\" style=\"margin-right: 20px;\">\r\n            <span class=\"f-icon modal_close\" (click)=\"close($event)\"></span>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-utils-fill  mx-3 p-3 mt-1\" >\r\n        <!-- <div class=\"input-group mb-3 scheme-manager__search-box\">\r\n            <input #schemeName type=\"text\" class=\"form-control\" maxlength=\"9\" placeholder=\"{{'datagrid.scheme.namePlaceholder' | locale}}\" style=\"height: 26px;\" name=\"name\" [(ngModel)]=\"schemeInfo.name\">\r\n        </div> -->\r\n        <div class=\" mb-3\">\r\n            <language-textbox [(ngModel)]=\"schemeInfo.name\"  [languages]=\"languages\" [maxWords]=\"nameMaxLength\"></language-textbox>\r\n        </div>\r\n            \r\n    \r\n        <div class=\"input-group mb-2\" style=\"border: 0;\">\r\n          \r\n            <div class=\"custom-control custom-radio  custom-control-inline \" style=\"align-items: center\">\r\n                <input class=\"custom-control-input\" type=\"radio\" id=\"private-scheme\"  name=\"schemeType\"  (click)=\"onSetRangeType($event, 'private')\" value=\"private\" [checked]=\"schemeType === 'private'\">\r\n                <label class=\"custom-control-label\" for=\"private-scheme\">{{'datagrid.scheme.setPrivate' | locale}}</label>\r\n                <span class=\"icon-question\" farrisTooltip [placement]=\"'right'\" [delay]=\"500\" [content]=\"'datagrid.scheme.privateTip' | locale\">?</span>\r\n            </div>\r\n            <div class=\"custom-control custom-radio  custom-control-inline \" style=\"align-items: center\">\r\n                <input class=\"custom-control-input\" type=\"radio\" id=\"public-scheme\" name=\"schemeType\" (click)=\"onSetRangeType($event, 'public')\" value=\"public\" [checked]=\"schemeType === 'public'\" [disabled]=\"noPublicAuthority\">\r\n                <label class=\"custom-control-label\" for=\"public-scheme\">{{'datagrid.scheme.setPublic' | locale}}</label>\r\n                <span class=\"icon-question\" farrisTooltip [placement]=\"'right'\" [delay]=\"500\" [content]=\"'datagrid.scheme.publicTip' | locale\">?</span>\r\n            </div>\r\n            <div class=\"custom-control custom-radio  custom-control-inline \" style=\"align-items: center\">\r\n                <input class=\"custom-control-input\" type=\"radio\" id=\"org-scheme\" name=\"schemeType\" (click)=\"onSetRangeType($event, 'org')\"  value=\"org\" [checked]=\"schemeType === 'org'\" [disabled]=\"noOrgAuthority\">\r\n                <label class=\"custom-control-label\" for=\"org-scheme\">{{'datagrid.scheme.setOrg' | locale}}</label>\r\n                <span class=\"icon-question\" farrisTooltip [placement]=\"'right'\" [delay]=\"500\" [content]=\"'datagrid.scheme.orgTip' | locale\">?</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"input-group mb-2\" style=\"border: 0;\" *ngIf=\"schemeInfo.type === 'private'\">\r\n            <div class=\"custom-control custom-checkbox  custom-control-inline \" style=\"align-items: center\">\r\n                <input class=\"custom-control-input\" type=\"checkbox\" id=\"default-scheme\" name=\"isDefault\" [(ngModel)]=\"schemeInfo.isDefault\">\r\n                <label class=\"custom-control-label\" for=\"default-scheme\">{{'datagrid.scheme.setDefault' | locale}} <i class=\"scheme-org-tip\">({{'datagrid.scheme.defaultTip' | locale}})</i></label>\r\n                <!-- <span class=\"icon-question\" farrisTooltip [placement]=\"'right'\" [delay]=\"500\" [content]=\"'\u4E0B\u6B21\u8FDB\u5165\u6B64\u529F\u80FD\u65F6\uFF0C\u9ED8\u8BA4\u52A0\u8F7D\u8BE5\u65B9\u6848'\">?</span> -->\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"input-group mb-2\" style=\"border: 0;\" *ngIf=\"schemeInfo.type === 'org' && !noOrgAuthority\">\r\n            <div class=\"input-group mb-3\">\r\n                <farris-organization-selector\r\n                    [primaryField]=\"'orgId'\" [displayField]=\"'name'\"\r\n                    [absOrgType]=\"'System_organization'\"\r\n                    [layer]=\"1\" [multiSelect]=\"true\" [showTabIds]=\"'organization'\"\r\n                    [enableHierarchicalLoading]=\"false\" [cascadeCheck]=\"true\" [cascadeDown]=\"true\"\r\n                    (selectionsChange)=\"onSelectedOrg($event)\"\r\n                    [cascadeUp]=\"false\"\r\n                    [orgIds]=\"dataPermissionIds\"\r\n                    (inputClear)=\"clearAllOrgs()\" (tagRemoved)=\"getSelectedId($event)\"\r\n                    [dataPermission]=\"true\" [dataPermissionIds]=\"dataPermissionIds\" \r\n                ></farris-organization-selector>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"p-3 mb-3\" style=\"height: 50px;text-align: right;\">\r\n        <button class=\"btn btn-secondary cancel btn-lg mr-3\" style=\"width: 70px\"\r\n            (click)=\"onCancelClick($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n        <button class=\"btn btn-primary ok btn-lg\" style=\"width: 70px\"\r\n            (click)=\"submit($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n    </div>\r\n\r\n</div>",
                styles: [`
        .icon-question {
            width: 16px;
            border-radius: 20px;
            height: 16px;
            text-align: center;
            vertical-align: middle;
            line-height: 15px;
            font-size: 10px;
            margin-left: 10px;
            background: #EAF4FF;
            color: #2A87FF;
            cursor: pointer
        }

        .icon-question:hover {
            background: #2A87FF;
            color: #fff;
        }
        `]
            }] }
];
/** @nocollapse */
NewSchemeComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NewSchemeComponent.propDecorators = {
    header: [{ type: ViewChild, args: ['header',] }],
    dataPermissionIds: [{ type: Input }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    checkAuthority: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SchemeListComponent {
    /**
     * @param {?} cd
     * @param {?} localeSer
     * @param {?} injector
     */
    constructor(cd, localeSer, injector) {
        this.cd = cd;
        this.localeSer = localeSer;
        this.injector = injector;
        this.items = [];
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.removeItem = true;
        this.columns = [];
        this.changes = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const colName = this.localeSer.getValue('datagrid.scheme.columns.name') || '名称';
        /** @type {?} */
        const colType = this.localeSer.getValue('datagrid.scheme.columns.type') || '属性';
        /** @type {?} */
        const colDefault = this.localeSer.getValue('datagrid.scheme.columns.isDefault') || '默认';
        /** @type {?} */
        const colCreator = this.localeSer.getValue('datagrid.scheme.columns.username') || '创建人';
        /** @type {?} */
        const colMgr = this.localeSer.getValue('datagrid.scheme.columns.mgr') || '管理';
        /** @type {?} */
        const publicTxt = this.localeSer.getValue('datagrid.scheme.isPublic') || '公共';
        /** @type {?} */
        const privateTxt = this.localeSer.getValue('datagrid.scheme.isPrivate') || '个人';
        /** @type {?} */
        const orgTxt = this.localeSer.getValue('datagrid.scheme.isOrg') || '组织';
        this.columns = [
            // {field: 'name', title: '名称', width: 150, template: this.schemeName},
            { field: 'name', title: colName, width: 150, formatter: (/**
                 * @param {?} v
                 * @return {?}
                 */
                (v) => {
                    return getMultilingualValue(JSON.parse(v), this.localeSer.localeId);
                }) },
            { field: 'type', title: colType, width: 50, halign: 'center', align: 'center', formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @return {?}
                 */
                (v, d) => {
                    switch (v) {
                        case 'public':
                            return '<span class="scheme-manager__label px-1 public">' + publicTxt + '</span>';
                        case 'org':
                            return '<span class="scheme-manager__label px-1 org">' + orgTxt + '</span>';
                        case 'private':
                        default:
                            return '<span class="scheme-manager__label px-1 private">' + privateTxt + '</span>';
                    }
                }) },
            { field: 'isDefault', title: colDefault, width: 50, halign: 'center', align: 'center', template: this.schemeIsDefault },
            { field: 'userName', title: colCreator, width: 80 },
            { title: colMgr, width: 50, template: this.btnDel, halign: 'center', align: 'center', }
        ];
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClose($event) {
        this.closeModal.emit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSubmitClick($event) {
        this.submitModal.emit(this.changes);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onCancelClick($event) {
        this.closeModal.emit();
    }
    /**
     * @param {?} $event
     * @param {?} ctx
     * @return {?}
     */
    setDefault($event, ctx) {
        /** @type {?} */
        const r = $event == '1';
        // $event.stopPropagation();
        this.items.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            n.isDefault = false;
            if (n.id === ctx.rowData.id && r) {
                n.isDefault = r;
            }
        }));
        this.items = [...this.items];
        /** @type {?} */
        const defaultItem = this.items.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.isDefault));
        if (defaultItem) {
            this.changes = this.changes || {};
            this.changes.defaultId = defaultItem.id;
        }
        // this.cd.detectChanges();
    }
    /**
     * @param {?} $event
     * @param {?} ctx
     * @return {?}
     */
    onSchemeDel($event, ctx) {
        if (!this.removeItem) {
            return;
        }
        $event.stopPropagation();
        /** @type {?} */
        const id = ctx.rowData.id;
        this.items = this.items.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.id !== id));
        this.changes = this.changes || {};
        this.changes.deletedIds = [...(this.changes.deletedIds || []), id];
        if (id === this.changes.defaultId) {
            this.changes.defaultId = '';
            delete this.changes.defaultId;
        }
    }
}
SchemeListComponent.decorators = [
    { type: Component, args: [{
                selector: 'scheme-list',
                template: "\r\n<div class=\"f-datagrid-save-scheme d-flex flex-column\" style=\"height: 100%;\">\r\n    <div class=\"d-flex justify-content-between header\" #header >\r\n        <div class=\"title\">{{'datagrid.scheme.schemeList' | locale}}</div>\r\n        <div class=\"close\" style=\"margin-right: 20px;\">\r\n            <span class=\"f-icon modal_close\" (click)=\"onClose($event)\"></span>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-utils-fill mx-3 mt-1\" >\r\n        <farris-datagrid #dg\r\n            [columns]=\"columns\"\r\n            [data]=\"items\"\r\n            [fit]=\"true\"\r\n            [fitColumns]=\"true\"\r\n            [pagination]=\"false\"\r\n            [editable]=\"false\">\r\n        </farris-datagrid>\r\n    </div>\r\n\r\n    <div class=\"p-3 mb-3\" style=\"height: 50px;text-align: right;\">\r\n        <button class=\"btn btn-secondary cancel btn-lg mr-3\" style=\"width: 70px\"\r\n            (click)=\"onCancelClick($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n        <button class=\"btn btn-primary ok btn-lg\" style=\"width: 70px\"\r\n            (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #schemeName let-ctx>\r\n    <div class=\"input-group\">\r\n        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"ctx.rowData['name']\">\r\n    </div>\r\n</ng-template>\r\n<ng-template #schemeIsDefault let-ctx>\r\n    <div class=\"f-datagrid-cell-formgroup farris-group-auto f-datagrid_scheme-switch\" [style.opacity]=\"ctx.rowData['type'] !== 'private' ? 0.6: 1\" style=\"line-height:100%\" #ctrlbox hidefocus=\"true\">\r\n        <farris-switch [(ngModel)]=\"ctx.rowData['isDefault']\" trueValue=\"1\" falseValue=\"0\"\r\n        (valueChange)=\"setDefault($event, ctx)\"  [disabled]=\"ctx.rowData['type'] !== 'private' || ctx.rowData['isDefault']\"></farris-switch>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template let-ctx #btnDel>\r\n    <a href=\"javascript:void(0)\" (click)=\"onSchemeDel($event, ctx)\" title=\"{{'datagrid.scheme.delete' | locale}}\" *ngIf=\"removeItem\">\r\n        <span class=\"f-icon f-icon-yxs_delete\"></span>\r\n    </a>\r\n</ng-template>"
            }] }
];
/** @nocollapse */
SchemeListComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: LocaleService },
    { type: Injector }
];
SchemeListComponent.propDecorators = {
    items: [{ type: Input }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    removeItem: [{ type: Input }],
    header: [{ type: ViewChild, args: ['header',] }],
    schemeName: [{ type: ViewChild, args: ['schemeName',] }],
    schemeIsDefault: [{ type: ViewChild, args: ['schemeIsDefault',] }],
    btnDel: [{ type: ViewChild, args: ['btnDel',] }],
    dg: [{ type: ViewChild, args: ['dg',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const GRID_SETTINGS_WEBAPI = new InjectionToken(' Farris DataGrid User Setting WebApi URI.');
class DatagridSettingsService {
    /**
     * @param {?} injector
     * @param {?} modalSer
     * @param {?} messager
     * @param {?} idService
     * @param {?} localeSer
     */
    constructor(injector, modalSer, messager, idService, localeSer) {
        this.injector = injector;
        this.modalSer = modalSer;
        this.messager = messager;
        this.idService = idService;
        this.localeSer = localeSer;
        this.multiSortMsg = '列表中未开启多列排序的功能。 请检查！';
        this.columnsSortableMsg = '未开启列的排序功能。请检查！';
        this.notSupportHeaderGroupMsg = '暂不支持多表头设置';
        this.notShowDialog = '多表头暂不支持列显示设置；同时未启用列排序功能。';
        this._httpRestService = null;
        this.languages = [];
        this.gridRefs = null;
        this.activeSchemeItem = null;
        this.saving = false;
        this.cfr = null;
        this.app = null;
        this.schemeListSubscription = null;
        this.cfr = this.injector.get(ComponentFactoryResolver);
        this.app = this.injector.get(ApplicationRef);
        this.notifyService = this.injector.get(NotifyService, null);
        this.schemeService = new DatagridSchemeService();
    }
    /**
     * @return {?}
     */
    get httpRestService() {
        return this._httpRestService;
    }
    ;
    /**
     * @param {?} httpSer
     * @return {?}
     */
    set httpRestService(httpSer) {
        this._httpRestService = httpSer;
        if (this.schemeService) {
            this.schemeService.setRestService(httpSer);
        }
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    destroy(id) {
        if (id && this.gridRefs && this.gridRefs[id]) {
            delete this.gridRefs[id];
        }
        else {
            this.gridRefs = null;
        }
        this.saving = false;
        this.setActiveSchemeItem(id, null);
    }
    /**
     * @param {?} dg
     * @return {?}
     */
    registerGridInstance(dg) {
        if (!dg) {
            console.log('DatagridSettingService: grid instance is null.');
            return;
        }
        /** @type {?} */
        const id = dg.id;
        this.gridRefs = this.gridRefs || {};
        if (!this.gridRefs[id]) {
            this.gridRefs[id] = dg;
        }
    }
    /**
     * @param {?} dgID
     * @return {?}
     */
    getGridInstance(dgID) {
        return this.gridRefs ? this.gridRefs[dgID] : null;
    }
    /**
     * 更新方案中的配置数据
     * @private
     * @param {?} schemeItem
     * @param {?} settings
     * @return {?}
     */
    updateSchemeSettings(schemeItem, settings) {
        if (schemeItem && settings) {
            /** @type {?} */
            const schemeContentObj = JSON.parse(schemeItem.queryConditionString);
            if (schemeContentObj) {
                if (schemeContentObj[this.localeSer.localeId]) {
                    /** @type {?} */
                    const schemeSettings = schemeContentObj[this.localeSer.localeId];
                    schemeContentObj[this.localeSer.localeId] = Object.assign(schemeSettings, settings);
                }
                else {
                    schemeContentObj[this.localeSer.localeId] = settings;
                }
                schemeItem.queryConditionString = JSON.stringify(schemeContentObj);
            }
        }
    }
    /**
     * 更新当前方案配置数据
     * @param {?} dgId
     * @param {?} settings
     * @return {?}
     */
    updateActiveSchemeItemSettings(dgId, settings) {
        /** @type {?} */
        const schemeItem = this.getActiveSchemeItem(dgId);
        this.updateSchemeSettings(schemeItem, settings);
    }
    /**
     * 设置活动的方案
     * @param {?} dgId
     * @param {?} activeItem
     * @return {?}
     */
    setActiveSchemeItem(dgId, activeItem) {
        /** @type {?} */
        const schemekey = this.schemeService.getSchemeKey(dgId);
        this.activeSchemeItem = this.activeSchemeItem || {};
        this.activeSchemeItem[schemekey] = activeItem;
    }
    /**
     * 获取当前活动的方案
     * @param {?} dgId
     * @return {?}
     */
    getActiveSchemeItem(dgId) {
        /** @type {?} */
        const schemekey = this.schemeService.getSchemeKey(dgId);
        return this.activeSchemeItem ? this.activeSchemeItem[schemekey] : null;
    }
    /**
     * @return {?}
     */
    getSearchTypes() {
        return [
            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
        ];
    }
    /**
     * @param {?} gridInstance
     * @param {?=} settings
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    showSimple(gridInstance, settings, selectedSchemeItem) {
        /** @type {?} */
        const columns = this.convertColumnsToSimple(gridInstance.columns);
        columns[0] = columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field && n.field !== gridInstance.ControlPanelFeild));
        /** @type {?} */
        const searchTypes = this.getSearchTypes();
        if (this.cfr) {
            /** @type {?} */
            const cmpFactory = this.cfr.resolveComponentFactory(SimpleColumnsComponent);
            /** @type {?} */
            let simpleRef = cmpFactory.create(this.injector);
            this.app.attachView(simpleRef.hostView);
            simpleRef.instance.columns = columns;
            simpleRef.instance.seartTypes = searchTypes;
            simpleRef.instance.gridInstance = gridInstance;
            if (document.querySelector('#page-wrapper')) {
                simpleRef.instance.top = 76;
            }
            simpleRef.instance.enableScheme = gridInstance.enableScheme;
            if (gridInstance.enableScheme) {
                if (settings) {
                    if (selectedSchemeItem) {
                        this.updateSchemeSettings(selectedSchemeItem, settings);
                        simpleRef.instance.currentSchemeItem = selectedSchemeItem;
                    }
                    else {
                        simpleRef.instance.currentSchemeItem = null;
                        simpleRef.instance.settings = settings;
                    }
                }
                else {
                    /** @type {?} */
                    const _currentSchemtItem = this.getActiveSchemeItem(gridInstance.id);
                    simpleRef.instance.currentSchemeItem = _currentSchemtItem;
                }
            }
            document.body.appendChild(simpleRef.location.nativeElement);
            simpleRef.instance.closed.pipe(switchMap((/**
             * @return {?}
             */
            () => {
                simpleRef.instance.container.nativeElement.style.right = '-500px';
                return timer(500);
            }))).subscribe((/**
             * @return {?}
             */
            () => {
                simpleRef.location.nativeElement.remove();
                simpleRef.destroy();
                simpleRef = null;
                if (this.schemeListSubscription) {
                    this.schemeListSubscription.unsubscribe();
                }
            }));
            simpleRef.instance.advanced.subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ({ viewFields }) => {
                if (viewFields && viewFields.length) {
                    this.updateSchemeSettings(simpleRef.instance.currentSchemeItem, { viewColumns: viewFields });
                }
                this.showAdvanced(gridInstance, null, simpleRef.instance.currentSchemeItem);
            }));
            simpleRef.instance.submit.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                e.target.disabled = true;
                if (this.saving) {
                    return;
                }
                if (!this.saving) {
                    if (e.currentScheme) {
                        this.setActiveSchemeItem(gridInstance.id, e.currentScheme);
                    }
                    this.updateGridView(e, gridInstance, e.target);
                }
            }));
            simpleRef.instance.fieldsChange.subscribe((/**
             * @param {?} visibleFields
             * @return {?}
             */
            (visibleFields) => {
                this.updateActiveSchemeItemSettings(gridInstance.id, { viewColumns: visibleFields });
            }));
            // 打开新增方案窗口
            simpleRef.instance.addNewScheme.subscribe((/**
             * @return {?}
             */
            () => {
                this.showNewSchemeDialog(gridInstance, simpleRef);
            }));
            simpleRef.instance.schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];
            // 打开方案管理列表窗口
            simpleRef.instance.showSchemeList.subscribe((/**
             * @return {?}
             */
            () => {
                this.schemeService.getSchemeList(gridInstance.id).pipe(switchMap((/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    return this.schemeService.checkAuthority().pipe(map((/**
                     * @param {?} auth
                     * @return {?}
                     */
                    (auth) => {
                        return Object.assign({ list: t }, auth);
                    })));
                }))).subscribe((/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.schemeService.setSchemeList(gridInstance.id, t.list || []);
                    this.showSchemeListDialog(gridInstance, cloneDeep(t.list || []), t.success);
                }));
            }));
            this.schemeListSubscription = this.schemeService.schemeList$.subscribe((/**
             * @param {?} list
             * @return {?}
             */
            (list) => {
                simpleRef.instance.schemeList = list;
                if (!list || !list.length) {
                    this.setActiveSchemeItem(gridInstance.id, null);
                    return;
                }
                /** @type {?} */
                const _activeSchemeItem = this.getActiveSchemeItem(gridInstance.id);
                if (_activeSchemeItem) {
                    /** @type {?} */
                    let hasActiveItem = list.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.id === _activeSchemeItem.id));
                    if (!hasActiveItem) {
                        hasActiveItem = this.getDefaultScheme(list); // 获取设置为当前方案的项
                        this.setActiveSchemeItem(gridInstance.id, hasActiveItem || null);
                    }
                    simpleRef.instance.currentSchemeItem = hasActiveItem;
                }
            }));
            // 切换方案
            simpleRef.instance.activeItemChange.subscribe((/**
             * @param {?} r
             * @return {?}
             */
            (r) => {
                this.setActiveSchemeItem(gridInstance.id, r);
            }));
            simpleRef.hostView.detectChanges();
            simpleRef.instance.container.nativeElement.style.right = '0px';
            return simpleRef;
        }
    }
    /**
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    show(gridInstance, opts) {
        this.registerGridInstance(gridInstance);
        if (gridInstance.enableSimpleMode) {
            return this.showSimple(gridInstance);
        }
        else {
            return this.showAdvanced(gridInstance, opts);
        }
    }
    /**
     * @private
     * @param {?} gridInstance
     * @param {?=} opts
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    showAdvanced(gridInstance, opts, selectedSchemeItem) {
        /** @type {?} */
        let _editColSortInfo = true;
        /** @type {?} */
        const editColSortInfo = this.canSetColumnSort(gridInstance);
        if (editColSortInfo !== true) {
            // this.messager.warning(msg);
            // return;
            _editColSortInfo = false;
        }
        /** @type {?} */
        const showSetColumnsTab = !this.isHeaderGroup(gridInstance);
        /** @type {?} */
        const getActiveTabIndex = (/**
         * @return {?}
         */
        () => {
            if (showSetColumnsTab) {
                return 1;
            }
            else {
                if (_editColSortInfo) {
                    return 2;
                }
                else {
                    return -1;
                }
            }
        });
        /** @type {?} */
        const activeTabIndex = getActiveTabIndex();
        if (activeTabIndex === -1) {
            this.messager.warning(this.notShowDialog);
            return;
        }
        /** @type {?} */
        const columns = this.convertColumnsToSimple(gridInstance.columns);
        // 获取当前方案中当前语言的配置数据
        /** @type {?} */
        let currentSettings = null;
        if (selectedSchemeItem && selectedSchemeItem.queryConditionString) {
            currentSettings = JSON.parse(selectedSchemeItem.queryConditionString)[this.localeSer.localeId];
            if (currentSettings.columnFormat && currentSettings.columnFormat.length) {
                columns[0] = columns[0].map((/**
                 * @param {?} col
                 * @return {?}
                 */
                (col) => {
                    /** @type {?} */
                    const fcol = currentSettings.columnFormat.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.field === col.field));
                    if (fcol) {
                        col = Object.assign(col, fcol);
                    }
                    return col;
                }));
            }
        }
        columns[0] = columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field && n.field !== gridInstance.ControlPanelFeild));
        /** @type {?} */
        const treeData = this.convertColumns2TreeData(cloneDeep(columns), true);
        /** @type {?} */
        const viewColumnsTreeData = this.convertColumns2TreeData(cloneDeep(columns), false);
        this.checkViewTreeNodes(viewColumnsTreeData);
        /** @type {?} */
        let modalRef = null;
        /** @type {?} */
        const okText = this.localeSer.getValue('datagrid.settings.ok') || '确定';
        /** @type {?} */
        const cancelText = this.localeSer.getValue('datagrid.settings.cancel') || '取消';
        /** @type {?} */
        const resetText = this.localeSer.getValue('datagrid.settings.reset') || '重置';
        /** @type {?} */
        const defaultOpts = {
            width: 760, height: 560, showHeader: false, title: '控制面板',
            initialState: {
                columns,
                sortTreeData: treeData,
                viewTreeData: viewColumnsTreeData,
                gridInstance,
                canSetColumnSort: _editColSortInfo,
                canSetColumnVisible: showSetColumnsTab,
                activeTabIndex,
                schemeInfo: currentSettings
            },
            showButtons: false
        };
        /** @type {?} */
        const modalOpts = Object.assign(defaultOpts, opts || {});
        modalRef = this.modalSer.show(DatagridSettingsComponent, modalOpts);
        /** @type {?} */
        const instance = (/** @type {?} */ (modalRef.content));
        instance.enableReset = true;
        instance.modalRef = modalRef;
        instance.canSetColumnSort = _editColSortInfo;
        instance.canSetColumnVisible = !this.isHeaderGroup(gridInstance);
        instance.submitHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.target.disabled = true;
            if (this.saving) {
                return;
            }
            if (!this.saving) {
                if (selectedSchemeItem) {
                    this.setActiveSchemeItem(gridInstance.id, selectedSchemeItem);
                }
                this.updateGridView(modalRef, gridInstance, e.target);
            }
        }));
        instance.cancelHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            modalRef.close();
        }));
        // 切换到侧边栏简洁模式
        instance.concise.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            modalRef.close();
            /** @type {?} */
            const settings = modalRef.content;
            const { sortInfo, viewColumns, columnFormat, groupField } = settings;
            this.showSimple(gridInstance, { sortInfo, viewColumns, columnFormat, groupField }, selectedSchemeItem);
        }));
        /** @type {?} */
        const modalContainer = (/** @type {?} */ (modalRef.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
        return modalRef;
    }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    canSetColumnSort(gridInstance) {
        if (gridInstance.multiSort && this.hasEnableSortColumns(gridInstance)) {
            return true;
        }
        else {
            if (!this.hasEnableSortColumns(gridInstance)) {
                return this.columnsSortableMsg;
            }
            else if (!gridInstance.multiSort) {
                return this.multiSortMsg;
            }
        }
    }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    hasEnableSortColumns(gridInstance) {
        /** @type {?} */
        const sortColumnsCount = gridInstance.flatColumns.reduce((/**
         * @param {?} c
         * @param {?} r
         * @return {?}
         */
        (c, r) => {
            if (r.sortable) {
                return c + 1;
            }
            return c;
        }), 0);
        return sortColumnsCount > 0;
    }
    /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    isHeaderGroup(grid) {
        /** @type {?} */
        const flag = grid.columns.length > 1;
        if (flag) {
            return this.notSupportHeaderGroupMsg;
        }
        return flag;
    }
    /**
     * @private
     * @param {?} cols
     * @param {?} rowIndex
     * @param {?} colStartIndex
     * @param {?} colCount
     * @param {?=} forSort
     * @return {?}
     */
    getChilds(cols, rowIndex, colStartIndex, colCount, forSort = false) {
        /** @type {?} */
        const childCols = [];
        /** @type {?} */
        let _count = colStartIndex;
        if (!cols[rowIndex]) {
            return [];
        }
        cols[rowIndex].slice().forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            _count = _count + element.colspan;
            if (_count <= colCount) {
                childCols.push(element);
            }
        }));
        cols[rowIndex].splice(0, childCols.length);
        return childCols.map((/**
         * @param {?} c
         * @param {?} i
         * @return {?}
         */
        (c, i) => {
            /** @type {?} */
            let n = {
                data: c,
                selectable: forSort ? !!c.sortable : true
            };
            if (c.colspan && c.colspan > 1) {
                n = {
                    data: c,
                    selectable: false,
                    expanded: true,
                    children: this.getChilds(cols, rowIndex + 1, 0, c.colspan)
                };
            }
            return n;
        }));
    }
    /**
     * @param {?} cols
     * @param {?=} forSort
     * @return {?}
     */
    convertColumns2TreeData(cols, forSort = false) {
        /** @type {?} */
        const columns = cols.map((/**
         * @param {?} c
         * @return {?}
         */
        (c) => {
            c.map((/**
             * @param {?} _
             * @return {?}
             */
            (_) => {
                _.colspan = _.colspan || 1;
                return _;
            }));
            return c;
        }));
        if (columns.length === 1) {
            return columns[0].map((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                return {
                    data: c,
                    selectable: forSort ? !!c.sortable : true
                };
            }));
        }
        else {
            return columns[0].map((/**
             * @param {?} c
             * @param {?} i
             * @return {?}
             */
            (c, i) => {
                if (c.colspan && c.colspan > 1) {
                    return {
                        data: c,
                        selectable: false,
                        expanded: true,
                        children: this.getChilds(columns, 1, 0, c.colspan, forSort)
                    };
                }
                else {
                    return {
                        data: c,
                        selectable: forSort ? !!c.sortable : true
                    };
                }
            }));
        }
    }
    /**
     * @private
     * @param {?} treeNodes
     * @return {?}
     */
    checkViewTreeNodes(treeNodes) {
        treeNodes.forEach((/**
         * @param {?} tn
         * @return {?}
         */
        (tn) => {
            if (!tn.children || !tn.children.length) {
                tn.selectable = true;
            }
            else {
                tn.selectable = false;
                this.checkViewTreeNodes(tn.children);
            }
        }));
    }
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    convertColumnsToSimple(cols) {
        // 移除设置列
        return cols.map((/**
         * @param {?} _cols
         * @return {?}
         */
        (_cols) => {
            return _cols.map((/**
             * @param {?} c
             * @return {?}
             */
            (c) => {
                if (c.field !== '_datagrid-setting-control_') {
                    return {
                        field: c.field,
                        title: c.title,
                        colspan: c.colspan,
                        rowspan: c.rowspan,
                        sortable: c.sortable,
                        order: c.order,
                        halign: c.halign || 'left',
                        align: c.align || 'left',
                        visible: c.visible,
                        allowGrouping: c.allowGrouping,
                        groupFooter: c.groupFooter,
                        footer: c.footer,
                        width: c.width || 100,
                        dataType: c.dataType || 'string'
                    };
                }
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n));
        }));
    }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    resetGridView(gridInstance) {
        if (!gridInstance) {
            return;
        }
        /** @type {?} */
        const dfs = gridInstance.dfs;
        if (dfs) {
            /** @type {?} */
            const options = dfs['_state'].initialOptions;
            if (options.sort) {
                if (options.sort.sortName) {
                    gridInstance.sortName = options.sort.sortName;
                }
                if (options.sort.sortOrder) {
                    gridInstance.sortOrder = options.sort.sortOrder;
                }
            }
            gridInstance.groupField = options.groupField || '';
            // TODO: 还需要修正默认列的显示顺序
            if (options.columnFields && options.columnFields.length) {
                /** @type {?} */
                const newColumns = [];
                options.columnFields.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => {
                    /** @type {?} */
                    const col = gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => n.field === c.field));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = c.footer;
                        col.groupFooter = c.groupFooter;
                        newColumns.push(col);
                    }
                }));
                gridInstance.columns[0] = newColumns;
            }
            // gridInstance['checkOptions']();
            gridInstance['columnsChanged']();
        }
    }
    /**
     * @private
     * @param {?} modalRef
     * @param {?} gridInstance
     * @param {?=} btn
     * @return {?}
     */
    updateGridView(modalRef, gridInstance, btn = null) {
        /** @type {?} */
        const settings = modalRef.content;
        if (settings) {
            const { sortInfo, viewColumns, columnFormat, groupField } = settings;
            this.updateActiveSchemeItemSettings(gridInstance.id, { sortInfo, viewColumns, columnFormat, groupField });
            this.saving = true;
            /** @type {?} */
            let _groupField = '';
            if (gridInstance.groupRows && groupField && groupField.length) {
                _groupField = groupField.join(',');
            }
            gridInstance.groupField = _groupField;
            /** @type {?} */
            const _colformats = columnFormat ? this.convertColumnsToSimple([columnFormat])[0] : [];
            /** @type {?} */
            const saveData = { sortInfo, viewColumns, groupField: _groupField, columnFormat: _colformats };
            this.setUserConfig(gridInstance.id, saveData).subscribe((/**
             * @return {?}
             */
            () => {
                if (btn) {
                    btn.disabled = false;
                }
                this.saving = false;
                if (viewColumns && viewColumns.length) {
                    gridInstance.columns = gridInstance.columns.map((/**
                     * @param {?} cols
                     * @return {?}
                     */
                    cols => {
                        this.updateColumnFormat(cols, columnFormat, gridInstance);
                        return this.newVisibleOrderColumns(cols, viewColumns, columnFormat, gridInstance);
                    }));
                }
                gridInstance.columnsChanged(true);
                if (sortInfo && Object.keys(sortInfo).length) {
                    const { sortName, sortOrder } = sortInfo;
                    if (sortName && sortName.length) {
                        gridInstance.sort(sortName.join(','), sortOrder.join(','));
                    }
                    else {
                        gridInstance.clearSort();
                    }
                }
                else {
                    gridInstance.clearSort();
                }
                modalRef.close();
            }));
        }
        else {
            modalRef.close();
        }
    }
    /**
     * @param {?} cols
     * @param {?} viewColumns
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    newVisibleOrderColumns(cols, viewColumns, columnFormat, gridInstance) {
        /** @type {?} */
        const hideColumns = [];
        cols.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (this.isNewAddColumn(element.field, columnFormat) && element.field !== '_datagrid-setting-control_' && !gridInstance.enableScheme) {
                viewColumns.push(element.field);
            }
            else {
                element.visible = viewColumns.includes(element.field);
                if (!element.visible) {
                    hideColumns.push(element);
                }
            }
        }));
        // 清理不存在的列
        /** @type {?} */
        let newCols = viewColumns.map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            return cols.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.field === field));
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n));
        if (hideColumns.length) {
            newCols = newCols.concat(hideColumns);
        }
        return newCols.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => c && c.field && c.field !== '_datagrid-setting-control_'));
    }
    /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     * @private
     * @param {?} field
     * @param {?} columns
     * @return {?}
     */
    isNewAddColumn(field, columns) {
        columns = columns || [];
        return !columns.find((/**
         * @param {?} c
         * @return {?}
         */
        c => c.field === field));
    }
    /**
     * @param {?} cols
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    updateColumnFormat(cols, columnFormat, gridInstance) {
        if (columnFormat && columnFormat.length) {
            cols.forEach((/**
             * @param {?} col
             * @return {?}
             */
            col => {
                /** @type {?} */
                const formatCol = columnFormat.find((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f.field === col.field));
                if (formatCol) {
                    col.width = formatCol.width;
                    col.halign = formatCol.halign || 'left';
                    col.align = formatCol.align || 'left';
                    if (gridInstance.groupRows && (col.allowGrouping || col.allowGrouping === undefined)) {
                        if (!col.groupFooter) {
                            col.groupFooter = formatCol.groupFooter;
                        }
                        if (col.groupFooter && col.groupFooter.options) {
                            col.groupFooter.options.text = formatCol.groupFooter.options.text || '';
                            col.groupFooter.options.calculationType =
                                formatCol.groupFooter.options.calculationType !== undefined &&
                                    formatCol.groupFooter.options.calculationType !== null ?
                                    parseInt(formatCol.groupFooter.options.calculationType, 10) : -1;
                        }
                    }
                    if (gridInstance.showFooter && !gridInstance.footerTemplate) {
                        if (!col.footer) {
                            col.footer = formatCol.footer;
                        }
                        if (col.footer && col.footer.options) {
                            col.footer.options.text = formatCol.footer.options.text || '';
                            col.footer.options.calculationType =
                                formatCol.footer.options.calculationType !== undefined &&
                                    formatCol.footer.options.calculationType !== null ?
                                    parseInt(formatCol.footer.options.calculationType, 10) : -1;
                        }
                    }
                }
            }));
        }
    }
    // 创建唯一key, 由uri + gridId 组成，并混淆
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    createConfigKey(gridId) {
        /** @type {?} */
        const grid = this.getGridInstance(gridId);
        if (grid) {
            return grid.dgs.createConfigKey(gridId);
        }
        else {
            console.log('DatagridSettingService: Can not find the grid instance.');
        }
    }
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    getCurrentUserSettings(gridId) {
        /** @type {?} */
        const gridInstance = this.getGridInstance(gridId);
        /** @type {?} */
        const config = { sortInfo: {}, viewColumns: [], groupField: '', columnFormat: [] };
        if (gridInstance) {
            const { sortName, sortOrder, columns } = gridInstance;
            if (sortName) {
                /** @type {?} */
                const sortInfo = {
                    sortName: sortName.split(','),
                    sortOrder: sortOrder.split(',')
                };
                config.sortInfo = sortInfo;
            }
            /** @type {?} */
            const viewColumns = columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible || n.visible === undefined)).map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
            config.viewColumns = viewColumns;
            config.columnFormat = this.convertColumnsToSimple(columns)[0];
            if (gridInstance.groupRows) {
                config.groupField = gridInstance.groupField;
            }
        }
        return config;
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    saveUserConfig(gridId) {
        /** @type {?} */
        const config = this.getCurrentUserSettings(gridId);
        return this.setUserConfig(gridId, config);
    }
    /**
     * @param {?} gridId
     * @param {?} config
     * @return {?}
     */
    setUserConfig(gridId, config) {
        /** @type {?} */
        const key = this.createConfigKey(gridId);
        /** @type {?} */
        const LOCALEID = this.localeSer.localeId;
        /** @type {?} */
        const currentConfig = localStorage.getItem(key);
        /** @type {?} */
        const _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
        if (config) {
            if (_config) {
                _config[LOCALEID] = config;
            }
            localStorage.setItem(key, JSON.stringify(_config));
        }
        else {
            localStorage.removeItem(key);
        }
        if (this.httpRestService) {
            /** @type {?} */
            const gridIns = this.getGridInstance(gridId);
            if (gridIns && gridIns.enableScheme) {
                /** @type {?} */
                const activeScheme = this.getActiveSchemeItem(gridId);
                if (activeScheme) {
                    // return this.updateScheme(gridId, config);
                    if (activeScheme.type === 'private') {
                        return this.schemeService.saveScheme(activeScheme, gridId, true);
                    }
                    else {
                        return this.schemeService.checkAuthority().pipe(switchMap((/**
                         * @param {?} t
                         * @return {?}
                         */
                        (t) => {
                            if (t.success) {
                                /** @type {?} */
                                const hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;
                                if (activeScheme.type === 'public' || (activeScheme.type === 'org' && hasOrgAuthority)) {
                                    return this.schemeService.saveScheme(activeScheme, gridId, true);
                                }
                            }
                            return of(true);
                        })));
                    }
                }
                else {
                    return of(true);
                }
            }
            // 保存至数据库
            return this._saveUserConfig(key, config ? _config : '');
        }
        return of(true);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getUserConfig(key) {
        if (this.httpRestService) {
            return this._getUserConfig(key);
        }
        else {
            /** @type {?} */
            const config = localStorage.getItem(key);
            if (config) {
                /** @type {?} */
                const con = JSON.parse(config);
                if (con[this.localeSer.localeId]) {
                    return of(con[this.localeSer.localeId]);
                }
                else {
                    if (Object.keys(con).indexOf('viewColumns') > -1) {
                        return of(con);
                    }
                    return null;
                }
            }
            else {
                return of(null);
            }
        }
    }
    /**
     * @private
     * @param {?} schemeList
     * @return {?}
     */
    getDefaultScheme(schemeList) {
        // 1、有个人默认的返回个人默认方案
        // 2、没有个人默认方案的，返回公共方案第1个
        // 3、没有公共方案，返回组织方案第1个
        // 4、没有组织方案的, 返回个人方案第1个
        // 5、没有个人方案的，返回系统预制，即表单设计时的格式
        // 1、有个人默认的返回个人默认方案
        // 2、没有个人默认方案的，返回公共方案第1个
        // 3、没有公共方案，返回组织方案第1个
        // 4、没有组织方案的, 返回个人方案第1个
        // 5、没有个人方案的，返回系统预制，即表单设计时的格式
        /** @type {?} */
        let defaultScheme = null;
        if (!schemeList || !schemeList.length) {
            return defaultScheme;
        }
        else {
            defaultScheme = schemeList.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.isDefault));
            if (!defaultScheme) {
                /** @type {?} */
                let publicSchemes = schemeList.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.type === 'public'));
                if (!publicSchemes.length) {
                    publicSchemes = schemeList.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.type === 'org'));
                }
                if (publicSchemes.length) {
                    defaultScheme = publicSchemes[0];
                }
                else {
                    defaultScheme = schemeList[0];
                }
            }
        }
        return defaultScheme;
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    getSettings(gridId) {
        /** @type {?} */
        const key = this.createConfigKey(gridId);
        /** @type {?} */
        const gridIns = this.getGridInstance(gridId);
        /** @type {?} */
        let schemeList$ = of([]);
        if (gridIns && gridIns.enableScheme) {
            schemeList$ = this.getSchemeList(gridId);
        }
        return forkJoin(schemeList$, this.getUserConfig(key), this.schemeService.getLanguages()).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([schemeList, userSetting, supportedLanguages]) => {
            schemeList = schemeList || [];
            this.languages = supportedLanguages;
            if (!schemeList.length) {
                return userSetting;
            }
            else {
                // 缓存方案列表
                this.setSchemeList(schemeList, gridId);
                // 查找默认方案
                /** @type {?} */
                const defaultScheme = this.getDefaultScheme(schemeList);
                if (!defaultScheme) {
                    return userSetting;
                }
                else {
                    this.setActiveSchemeItem(gridId, defaultScheme);
                    /** @type {?} */
                    const userSettings = JSON.parse(defaultScheme.queryConditionString);
                    if (userSettings) {
                        /** @type {?} */
                        const localeId = this.localeSer.localeId;
                        if (userSettings[localeId]) {
                            localStorage.setItem(key, JSON.stringify(userSettings));
                            return userSettings[localeId];
                        }
                        else {
                            userSettings[localeId] = null;
                            localStorage.setItem(key, JSON.stringify(userSettings));
                            return null;
                        }
                    }
                    else {
                        return null;
                    }
                }
            }
        })));
    }
    /**
     * @private
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    _saveUserConfig(key, config) {
        try {
            /** @type {?} */
            const userConfigSetting = {
                configkey1: key,
                configkey2: '',
                configkey3: '',
                textvalue: config ? JSON.stringify(config) : ''
            };
            return this.httpRestService.saveUserSettings(userConfigSetting);
        }
        catch (e) {
            console.error(e);
        }
    }
    /**
     * @param {?} gridInstance
     * @param {?} modalRef
     * @return {?}
     */
    resetUserConfig(gridInstance, modalRef) {
        /** @type {?} */
        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                return this.setUserConfig(gridInstance.id, '');
            }
            return of(t);
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                this.resetGridView(gridInstance);
                modalRef.close();
            }
        }));
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    _getUserConfig(key) {
        try {
            return this.httpRestService.getUserSettings(key).pipe(map((/**
             * @param {?} ucs
             * @return {?}
             */
            (ucs) => {
                if (ucs && ucs.textValue) {
                    /** @type {?} */
                    const c = JSON.parse(ucs.textValue);
                    if (c) {
                        if (c[this.localeSer.localeId]) {
                            localStorage.setItem(key, ucs.textValue);
                            return c[this.localeSer.localeId];
                        }
                        else {
                            c[this.localeSer.localeId] = null;
                            localStorage.setItem(key, JSON.stringify(c));
                            // if (Object.keys(c).indexOf('viewColumns') > -1) {
                            //     return c;
                            // }
                            return null;
                        }
                    }
                    return null;
                }
                return null;
            })));
        }
        catch (e) {
            console.error(e);
        }
    }
    /**
     * @private
     * @param {?} gridId
     * @param {?=} settings
     * @return {?}
     */
    buildSubmitData(gridId, settings = null) {
        /** @type {?} */
        const LOCALEID = this.localeSer.localeId;
        if (!settings) {
            settings = this.getCurrentUserSettings(gridId);
        }
        /** @type {?} */
        const localeKey = this.createConfigKey(gridId);
        /** @type {?} */
        const currentConfig = localStorage.getItem(localeKey);
        /** @type {?} */
        const _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
        if (_config) {
            _config[LOCALEID] = settings;
        }
        return _config;
    }
    // ----------------------------------------------------------------------------------------------- \\
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} schemeList
     * @param {?=} canDel
     * @return {?}
     */
    showSchemeListDialog(gridInstance, schemeList, canDel = true) {
        /** @type {?} */
        const modalOpts = {
            width: 760, height: 577, showHeader: false, title: '控制面板',
            initialState: {
                items: schemeList || [],
                removeItem: canDel
            },
            showButtons: false
        };
        /** @type {?} */
        const schemeListDlg = this.modalSer.show(SchemeListComponent, modalOpts);
        /** @type {?} */
        const instance = (/** @type {?} */ (schemeListDlg.content));
        instance.closeModal.subscribe((/**
         * @return {?}
         */
        () => {
            schemeListDlg.close();
        }));
        instance.submitModal.subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            this.schemeService.updateScheme(t, gridInstance.id).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e === false) {
                    schemeListDlg.close();
                    return;
                }
                /** @type {?} */
                const msg = '列设置方案保存成功。';
                if (this.notifyService) {
                    this.notifyService.success(msg);
                }
                else {
                    this.messager.success(msg);
                }
                /** @type {?} */
                const schemeList = this.schemeService.getStateValue(gridInstance.id, 'list');
                if (t.defaultId) {
                    schemeList.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        n.isDefault = false;
                        if (n.id === t.defaultId) {
                            n.isDefault = true;
                            // this.setActiveSchemeItem(gridInstance.id, n);
                        }
                    }));
                }
                /** @type {?} */
                let newSchemeList = schemeList;
                if (t.deletedIds && t.deletedIds.length) {
                    newSchemeList = schemeList.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        return !t.deletedIds.includes(n.id);
                    }));
                }
                this.schemeService.setSchemeList(gridInstance.id, newSchemeList);
                schemeListDlg.close();
            }));
        }));
        /** @type {?} */
        const modalContainer = (/** @type {?} */ (schemeListDlg.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
    }
    // 新增或另存方案
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} simpleRef
     * @return {?}
     */
    showNewSchemeDialog(gridInstance, simpleRef) {
        /** @type {?} */
        const modalOpts = {
            width: 480, height: 269, showHeader: false, title: '控制面板',
            initialState: {
                languages: this.languages
            },
            showButtons: false,
            resizable: false
        };
        /** @type {?} */
        const newSchemeDlg = this.modalSer.show(NewSchemeComponent, modalOpts);
        /** @type {?} */
        const instance = (/** @type {?} */ (newSchemeDlg.content));
        instance.closeModal.subscribe((/**
         * @return {?}
         */
        () => {
            newSchemeDlg.close();
        }));
        instance.submitModal.pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            return this.createNewScheme(gridInstance.id, t);
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t.flag === false) {
                /** @type {?} */
                const msg = t.msg || '请输入方案名称';
                if (this.notifyService) {
                    this.notifyService.info(msg);
                }
                else {
                    this.messager.info(msg);
                }
                return;
            }
            // 更新方案列表
            /** @type {?} */
            const schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];
            if (t.isDefault) {
                schemeList.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    n.isDefault = false;
                }));
            }
            schemeList.push(t);
            this.setActiveSchemeItem(gridInstance.id, t);
            this.schemeService.setSchemeList(gridInstance.id, schemeList);
            newSchemeDlg.close();
        }));
        instance.checkAuthority.pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            return this.schemeService.checkAuthority().pipe(map((/**
             * @param {?} auth
             * @return {?}
             */
            (auth) => {
                return Object.assign({ type: t }, auth);
            })));
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            /** @type {?} */
            let hasAuthority = { public: true, org: true };
            /** @type {?} */
            let msg = '您没有将方案的使用范围设置为公共的权限。';
            if (t.type.value === 'org') {
                msg = '您没有将方案的使用范围设置为组织的权限。';
            }
            if (t.success) {
                /** @type {?} */
                const hasPublicAuthority = t.authOperationData && t.authOperationData.length;
                hasAuthority.public = hasPublicAuthority;
                /** @type {?} */
                const hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;
                hasAuthority.org = hasOrgAuthority;
                if (t.type.value === 'public') {
                    instance.schemeInfo.type = t.type.value;
                }
                else if (t.type.value === 'org') {
                    if (!hasOrgAuthority) {
                        this.notifyService.warning(msg);
                    }
                    else {
                        instance.schemeInfo.type = t.type.value;
                        instance.schemeInfo.orgids = t.authOrganizationData.join(',');
                        instance.dataPermissionIds = t.authOrganizationData;
                    }
                }
            }
            else {
                this.notifyService.warning(msg);
                hasAuthority = { public: false, org: false };
            }
            instance.refresh(hasAuthority);
        }));
        /** @type {?} */
        const modalContainer = (/** @type {?} */ (newSchemeDlg.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    getSchemeList(gridId) {
        return this.schemeService.getSchemeList(gridId);
    }
    /**
     * @param {?} gridId
     * @param {?} data
     * @return {?}
     */
    createNewScheme(gridId, data) {
        if (!data.name) {
            return of({ flag: false, msg: '请输入方案名称' });
        }
        else {
            /** @type {?} */
            const hasName = this.schemeService.hasSchemeName(gridId, data.name);
            if (typeof hasName === 'boolean' && hasName) {
                return of({ flag: false, msg: '方案名称已存在，请修改。' });
            }
            else if (Array.isArray(hasName) && hasName.length) {
                /** @type {?} */
                const msgs = hasName.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    if (n === 'zh-CHS') {
                        return '简体中文名称已存在。';
                    }
                    else if (n === 'zh-CHT') {
                        return '繁体中文名称已存在。';
                    }
                    else {
                        return '英文名称已存在。';
                    }
                }));
                return of({ flag: false, msg: msgs.join('') });
            }
        }
        /** @type {?} */
        const requiredName = [];
        this.languages.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            if (data.name[n.code] === '' || data.name[n.code] === undefined) {
                requiredName.push(n.code);
            }
        }));
        if (requiredName.length) {
            /** @type {?} */
            const msgs = requiredName.map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (n === 'zh-CHS') {
                    return '请输入简体中文名称。';
                }
                else if (n === 'zh-CHT') {
                    return '请输入繁体中文名称。';
                }
                else {
                    return '请输入英文名称。';
                }
            }));
            return of({ flag: false, msg: msgs.join('') });
        }
        if (data.type && data.type === 'org' && (!data.orgids || !data.orgids.length)) {
            return of({ flag: false, msg: '请选择组织' });
        }
        /** @type {?} */
        let _config = null;
        /** @type {?} */
        const selectedSettings = this.getCurrentSchemeSettings(gridId);
        if (selectedSettings) {
            _config = selectedSettings;
        }
        else {
            // 收集当前方案配置数据
            _config = this.buildSubmitData(gridId);
        }
        /** @type {?} */
        const newId = this.idService.guid();
        /** @type {?} */
        let isDefault = data.isDefault;
        if (isDefault) {
            if (data.type !== 'private') {
                isDefault = false;
            }
        }
        if (data.name && typeof data.name === 'object') {
            data.name = JSON.stringify(data.name);
        }
        /** @type {?} */
        const scheme = {
            id: newId,
            belongId: '',
            code: '',
            name: data.name,
            type: data.type,
            isDefault: isDefault,
            isSystem: false,
            extendId: 'datagrid-settings-scheme',
            extendInfo: this.buildOrgAndSchemeRelations(newId, data.orgids),
            queryConditionString: _config ? JSON.stringify(_config) : '',
        };
        return this.schemeService.saveScheme(scheme, gridId).pipe(map((/**
         * @return {?}
         */
        () => {
            return scheme;
        })));
    }
    /**
     * @param {?} schemeList
     * @param {?} gridId
     * @return {?}
     */
    setSchemeList(schemeList, gridId) {
        this.schemeService.update({ list: schemeList }, gridId);
    }
    /**
     * @private
     * @param {?} schemeId
     * @param {?} orgIds
     * @return {?}
     */
    buildOrgAndSchemeRelations(schemeId, orgIds) {
        if (!orgIds || !orgIds.length) {
            return [];
        }
        return orgIds.map((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return {
                id: this.idService.guid(),
                orgId: n,
                relatedId: schemeId
            };
        }));
    }
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    getCurrentSchemeSettings(gridId) {
        /** @type {?} */
        const activeScheme = (/** @type {?} */ (this.getActiveSchemeItem(gridId)));
        if (activeScheme && activeScheme.queryConditionString) {
            return JSON.parse(activeScheme.queryConditionString);
        }
        return null;
    }
}
DatagridSettingsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DatagridSettingsService.ctorParameters = () => [
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: IdService },
    { type: LocaleService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridSortSettingComponent {
    /**
     * @param {?} injector
     * @param {?} cd
     */
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.idField = 'field';
        this.valueField = 'field';
        this.textField = 'title';
        this.selectedIds = [];
        this.treeData = [];
        this.sortInfoChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} $event
     * @param {?} data
     * @param {?} order
     * @return {?}
     */
    setFieldSortOrder($event, data, order) {
        $event.stopPropagation();
        data.sortable = true;
        data.order = order;
        if (!order) {
            this.ms.moveToLeft(data);
        }
        this.cd.detectChanges();
        this.onSelectionsChange(null);
        return false;
    }
    /**
     * @return {?}
     */
    getSortInfo() {
        if (this.ms.selections) {
            /** @type {?} */
            const names = [];
            /** @type {?} */
            const orders = [];
            this.ms.selections.forEach((/**
             * @param {?} col
             * @return {?}
             */
            col => {
                col.order = col.order || 'asc';
                names.push(col.field);
                orders.push(col.order);
            }));
            return { sortName: names, sortOrder: orders };
        }
        return '';
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSelectionsChange($event) {
        /** @type {?} */
        const si = this.getSortInfo();
        this.sortInfoChange.emit(si);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onBeforeMove($event) {
        /** @type {?} */
        const items = (/** @type {?} */ ($event.items));
        if ($event.target.indexOf('rightAll') > -1) {
            for (const id in items) {
                if ($event.items[id]) {
                    $event.items[id].order = 'asc';
                }
            }
        }
        else {
            if ($event.target === 'right') {
                for (const id in items) {
                    if ($event.items[id]) {
                        $event.items[id].order = 'asc';
                    }
                }
            }
        }
    }
}
DatagridSortSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'sort-setting',
                template: "<div style=\"padding: 10px;height: 100%;\">\r\n<multi-select [dataSource]=\"treeData\" [idField]=\"idField\" [valueField]=\"valueField\"\r\n[textField]=\"textField\" [displayType]=\"'Tree'\" style=\"height: 100%\" [height]=\"0\" [showCheckbox]=\"false\"\r\n[(selectedId)]=\"selectedIds\" [leftTitle]=\"'datagrid.settings.canchoose'|locale\" [rightTitle]=\"'datagrid.settings.choosed'|locale\" #ms (dataChange)=\"onSelectionsChange($event)\" (beforeMove)=\"onBeforeMove($event)\">\r\n    <ng-template farrisTemplate=\"text\" let-data let-side=\"side\" let-selected=\"selected\" >\r\n        <ng-container *ngIf=\"side === 'L'\">\r\n            {{ data[textField] }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"side === 'R' \">\r\n            <!-- <span class=\"f-icon f-icon-sort-asc-sm sort-label\" title=\"\u5347\u5E8F\" *ngIf=\"data.sortable && data.order === 'asc'\"></span>\r\n            <span class=\"f-icon f-icon-sort-desc-sm  sort-label\" title=\"\u964D\u5E8F\" *ngIf=\"data.sortable && data.order === 'desc'\"></span> -->\r\n            <div class=\"d-flex\">\r\n                <div style=\"width: 120px;white-space: nowrap;min-width: 60px\">\r\n                    {{ data[textField] }} \r\n                </div>\r\n                <div class=\"farris-input-wrap  farris-checkradio-hor flex-fill\" style=\"justify-content: right;flex-wrap:nowrap\">\r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext mr-2\" style=\"font-size: 12px;\" (click)=\"setFieldSortOrder($event, data, 'asc')\">\r\n                        <span class=\"f-icon\" [class.f-icon-radiobutton]=\" data.order && data.order !== 'asc'\" [class.f-icon-check-circle]=\"!data.order || data.order === 'asc'\"></span>\r\n                        {{'datagrid.settings.asc'|locale}}\r\n                    </button>\r\n                    \r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext mr-2\" style=\"font-size: 12px;\" (click)=\"setFieldSortOrder($event, data, 'desc')\">\r\n                        <span class=\"f-icon\" [class.f-icon-radiobutton]=\"data.order !== 'desc'\" [class.f-icon-check-circle]=\"data.order === 'desc'\"></span>\r\n                        {{'datagrid.settings.desc'|locale}}\r\n                    </button>\r\n\r\n                    <button type=\"button\" class=\"btn btn-link btn-icontext sort-btns\" style=\"font-size: 12px;\" style=\"margin-right: 0;\" (click)=\"setFieldSortOrder($event, data, '')\" title=\"{{'datagrid.settings.cancelSort'|locale}}\">\r\n                        <span class=\"f-icon  f-icon-unsort\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        </ng-container>\r\n    </ng-template>\r\n</multi-select>\r\n</div>"
            }] }
];
/** @nocollapse */
DatagridSortSettingComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
DatagridSortSettingComponent.propDecorators = {
    idField: [{ type: Input }],
    valueField: [{ type: Input }],
    textField: [{ type: Input }],
    selectedIds: [{ type: Input }],
    treeData: [{ type: Input }],
    ms: [{ type: ViewChild, args: ['ms',] }],
    sortInfoChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridViewColumnsComponent {
    /**
     * @param {?} injector
     * @param {?} cd
     */
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.idField = 'field';
        this.valueField = 'field';
        this.textField = 'title';
        this._selectedIds = [];
        this.treeData = [];
        this.selectedIdsChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get selectedIds() {
        return this._selectedIds;
    }
    /**
     * @param {?} vals
     * @return {?}
     */
    set selectedIds(vals) {
        this._selectedIds = vals;
        this.selectedIdsChange.emit(vals);
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onBeforeMove($event) {
    }
    /**
     * @param {?} $event
     * @param {?} column
     * @return {?}
     */
    hiddenColumn($event, column) {
        $event.stopPropagation();
        this.ms.moveToLeft(column);
    }
}
DatagridViewColumnsComponent.decorators = [
    { type: Component, args: [{
                selector: 'view-columns',
                template: "<multi-select [dataSource]=\"treeData\" [idField]=\"idField\" [valueField]=\"valueField\"\r\n[textField]=\"textField\" [displayType]=\"'Tree'\" style=\"height: 100%\" [height]=\"0\" [showCheckbox]=\"false\"\r\n[(selectedId)]=\"selectedIds\" [leftTitle]=\"'datagrid.settings.canchoose'|locale\" \r\n[rightTitle]=\"'datagrid.settings.choosed'|locale\" #ms (beforeMove)=\"onBeforeMove($event)\">\r\n    <ng-template farrisTemplate=\"text\" let-data let-side=\"side\" let-selected=\"selected\">\r\n        <ng-container *ngIf=\"side === 'L'\">\r\n            {{ data[textField] }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"side === 'R' \">\r\n\r\n            {{ data[textField] }} \r\n\r\n\r\n            <span class=\"sort-btns\" >\r\n                <a href=\"javascript: void(0)\" class=\" p-1\" (click)=\"hiddenColumn($event, data)\">\r\n                    <span class=\"f-icon f-icon-close\"></span>\r\n                </a>\r\n            </span>\r\n\r\n        </ng-container>\r\n    </ng-template>\r\n</multi-select>"
            }] }
];
/** @nocollapse */
DatagridViewColumnsComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
DatagridViewColumnsComponent.propDecorators = {
    idField: [{ type: Input }],
    valueField: [{ type: Input }],
    textField: [{ type: Input }],
    selectedIds: [{ type: Input }],
    treeData: [{ type: Input }],
    ms: [{ type: ViewChild, args: ['ms',] }],
    selectedIdsChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ColumnFormatSettingComponent {
    /**
     * @param {?} injector
     * @param {?} gridSettingComponentRef
     * @param {?} cd
     */
    constructor(injector, gridSettingComponentRef, cd) {
        this.injector = injector;
        this.gridSettingComponentRef = gridSettingComponentRef;
        this.cd = cd;
        this.columns = [];
        this.fields = [];
        this.formatChange = new EventEmitter();
        this.fieldsChange = new EventEmitter();
        this.allCols = [];
        /**
         * format Data
         */
        this.formatData = [];
        this.columnType = 'all';
        this.activeField = null;
        this.showGridFooter = false;
        this.searchItems = [];
        this.alignItems = [];
        this.summaryItems = [];
        this.summaryItems2 = [];
        this.isEn = false;
        this.showGridFooter = this.gridSettingComponentRef.gridInstance.showFooter &&
            !this.gridSettingComponentRef.gridInstance.footerTemplate;
        this.localeSer = this.injector.get(LocaleService, null);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.columns && !changes.columns.isFirstChange()) {
            this.setFormatData();
            this.allCols = this.columns[0];
            this.activeField = this.columns[0][0];
            this.checkColumnOptions();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.isEn = this.localeSer.localeId === 'en';
        this.initData();
        if (this.colForm) {
            this.colForm.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                if (!this.colForm.pristine) {
                    this.formatChange.emit(this.formatData);
                }
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    setFormatData() {
        this.formatData = this.fields.map((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return this.columns[0].find((/**
             * @param {?} col
             * @return {?}
             */
            col => col.field === n));
        }));
    }
    /**
     * @private
     * @return {?}
     */
    initData() {
        this.alignItems = this.gridSettingComponentRef.alignItems;
        this.searchItems = this.gridSettingComponentRef.searchItems;
        this.summaryItems = this.gridSettingComponentRef.summaryItems;
        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;
        this.setFormatData();
        this.allCols = this.columns[0];
        this.activeField = this.columns[0][0];
        this.checkColumnOptions();
    }
    /**
     * @private
     * @return {?}
     */
    checkColumnOptions() {
        if (this.activeField) {
            if (this.activeField.allowGrouping === undefined) {
                this.activeField.allowGrouping = true;
            }
            if (this.activeField.groupFooter === undefined) {
                this.activeField.groupFooter = { options: { calculationType: -1 } };
            }
            else {
                this.activeField.groupFooter.options = this.activeField.groupFooter.options || { calculationType: -1 };
                if (this.activeField.groupFooter.options.calculationType === undefined) {
                    this.activeField.groupFooter.options.calculationType = -1;
                }
            }
            if (this.activeField.footer === undefined) {
                this.activeField.footer = { options: { calculationType: -1 } };
            }
            else {
                this.activeField.footer.options = this.activeField.footer.options || { calculationType: -1 };
                if (this.activeField.footer.options.calculationType === undefined) {
                    this.activeField.footer.options.calculationType = -1;
                }
            }
        }
    }
    // 根据列的类型进行筛选过滤，
    // all 所有列
    // visible 可见列
    // hidden 隐藏列
    // group 分组列
    /**
     * @param {?} ct
     * @param {?=} searchWords
     * @return {?}
     */
    filterColumns(ct, searchWords = '') {
        /** @type {?} */
        let cols = [];
        switch (ct) {
            case 'visible':
                cols = this.formatData;
                break;
            case 'hidden':
                cols = this.columns[0].filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => this.fields.indexOf(n.field) === -1));
                break;
            case 'all':
            default:
                cols = this.columns[0];
                break;
        }
        if (searchWords) {
            cols = cols.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.title.toLowerCase().indexOf(searchWords) > -1));
        }
        this.allCols = cols;
    }
    /**
     * @param {?} col
     * @param {?} $event
     * @return {?}
     */
    onFieldClick(col, $event) {
        this.activeField = col;
        this.checkColumnOptions();
    }
    /**
     * @private
     * @return {?}
     */
    onFieldsChanged() {
        this.setFormatData();
        this.fieldsChange.emit(this.fields);
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onDblClick($event, col) {
        // console.log('显示与隐藏切换事件', col);
        this.onCheckboxClick($event, col);
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onCheckboxClick($event, col) {
        // console.log('显示与隐藏切换事件', col);
        $event.stopPropagation();
        /** @type {?} */
        const index = this.fields.indexOf(col.field);
        if (index === -1) {
            this.fields.push(col.field);
        }
        else {
            this.fields.splice(index, 1);
        }
        this.columns[0].forEach((/**
         * @param {?} f
         * @return {?}
         */
        f => {
            f.visible = this.fields.indexOf(f.field) > -1;
        }));
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        this.onFieldsChanged();
    }
    /**
     * @param {?} $event
     * @param {?} ct
     * @return {?}
     */
    searchColumn($event, ct) {
        /** @type {?} */
        const txt = $event.target.value;
        this.filterColumns(ct, txt);
    }
    /**
     * @param {?} fieldInfo
     * @param {?} ct
     * @param {?} txt
     * @param {?} ulElRef
     * @return {?}
     */
    onFieldDrop(fieldInfo, ct, txt, ulElRef) {
        // console.log('drop', fieldInfo);
        const { removedIndex, addedIndex } = fieldInfo;
        /** @type {?} */
        const moveItem = this.allCols[removedIndex];
        /** @type {?} */
        const targetItem = this.allCols[addedIndex];
        /** @type {?} */
        const moveItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === moveItem.field));
        /** @type {?} */
        const targetItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === targetItem.field));
        /** @type {?} */
        const removedItem = this.columns[0].splice(moveItemIndex, 1);
        this.columns[0].splice(targetItemIndex, 0, ...removedItem);
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        this.onFieldsChanged();
        this.filterColumns(ct, txt);
        // if (ulElRef) {
        //     ulElRef.querySelectorAll('li .field-drag-handle').forEach(el => {
        //         el.style.cursor = 'grab';
        //     });
        // }
    }
    /**
     * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
     * @private
     * @return {?}
     */
    getCheckAllState() {
        if (this.fields.length === 0) {
            return 0;
        }
        else {
            if (this.fields.length === this.columns[0].length) {
                return 1;
            }
            return 2;
        }
    }
    /**
     * @param {?} $event
     * @param {?} ct
     * @param {?} txt
     * @return {?}
     */
    onCheckAllClick($event, ct, txt) {
        /** @type {?} */
        const state = this.getCheckAllState();
        if (state === 0 || state === 2) {
            // 执行全选
            this.columns[0].forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible = true));
            this.fields = this.columns[0].map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
        }
        else {
            // 取消全选
            this.columns[0].forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible = false));
            this.fields = [];
        }
        this.onFieldsChanged();
        this.filterColumns(ct, txt);
    }
}
ColumnFormatSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'column-format-setting',
                template: "<div class=\"d-flex flex-row flex-fill dg-column-format-setting\" style=\"height: 100%\">\r\n    <div region=\"west\" class=\"west d-flex flex-column \">\r\n        <div style=\"margin: 0 6px;\">\r\n            <input #inputWord type=\"text\" class=\"form-control\" placeholder=\"{{'datagrid.settings.searchPlaceholder' | locale}}\" (input)=\"searchColumn($event, ct.selectedValues)\" style=\"height: 30px;\">\r\n            <div style=\"padding: 5px 0px;background-color: #fff;\">\r\n                <button class=\"btn btn-link\" \r\n                    style=\"height: 32px;padding-left: 4px;\" (click)=\"onCheckAllClick($event, ct.selectedValues, inputWord.value)\">\r\n                    <span class=\"f-icon f-icon-minus-outline checkbox\" [class.f-icon-checkbox]=\"!fields.length\"\r\n                        [class.f-icon-checkbox-checked]=\"fields.length === columns[0].length\"></span>\r\n                    {{ 'datagrid.settings.checkall' | locale }}\r\n                </button>\r\n\r\n                <farris-combo-list #ct \r\n                [data]=\"searchItems\" \r\n                [editable]=\"false\"\r\n                [ngModel]=\"'all'\" [idField]=\"'value'\"\r\n                [textField]=\"'title'\"\r\n                [enableClear]=\"false\"\r\n                (valueChange)=\"filterColumns(ct.selectedValues, inputWord.value)\"\r\n                style=\"float: right;\" [style.width.px]=\"isEn ? 120: 80\"\r\n                class=\"format-setting-searchitem\"></farris-combo-list>\r\n            </div>\r\n        </div>\r\n        <div style=\"overflow: auto;padding-right:3px\" class=\"flex-fill\">\r\n            <ul class=\"list-group  list-group-flush\" #ul column-visible-drag (drop)=\"onFieldDrop($event, ct.selectedValues, inputWord.value, ul)\">\r\n                <li class=\"list-group-item list-group-item-action smooth-dnd-draggable-wrapper format-setting-column\" *ngFor=\"let col of allCols\" \r\n                    (click)=\"onFieldClick(col, $event)\" [class.active]=\"activeField && activeField.field === col.field\"\r\n                    (dblclick)=\"onDblClick($event, col)\">\r\n                    <span class=\"f-icon checkbox\"\r\n                        [class.f-icon-checkbox-checked]=\"fields.indexOf(col.field) > -1\"\r\n                        [class.f-icon-checkbox]=\"fields.indexOf(col.field) == -1\"\r\n                        (click)=\"onCheckboxClick($event, col)\"></span>\r\n                    {{ col.title}} \r\n\r\n                    <span class=\"f-icon f-icon-drag-vertical field-drag-handle\"></span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n      \r\n    </div>\r\n    <div region=\"center\" class=\"center flex-fill\" style=\"overflow:auto;padding: 0 10px; padding-left: 20px;border-right: 0;\">\r\n\r\n        <h6 style=\"margin: 15px 0px;font-weight: bold;\">{{ 'datagrid.settings.properties' | locale }}</h6>\r\n\r\n        <form #colformatform=\"ngForm\" style=\"margin-top: 5px;\">\r\n            <div class=\"farris-group-wrap mb-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\" >{{ 'datagrid.settings.headeralign' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n\r\n                        <farris-combo-list name=\"halign\" \r\n                        [data]=\"alignItems\" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField!.halign\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"farris-group-wrap  mb-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.dataalign' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n\r\n                        <farris-combo-list name=\"align\" \r\n                        [data]=\"alignItems\" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField!.align\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"farris-group-wrap  mb-3\" *ngIf=\"showGridFooter\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.summarytype' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap \">\r\n                       \r\n                        <farris-combo-list name=\"footer.options.calculationType\" \r\n                        [data]=\" activeField.dataType === 'number'?  summaryItems : summaryItems2 \" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField.footer.options.calculationType\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap  mb-3\" *ngIf=\"showGridFooter && (!activeField.footer.options.calculationType || activeField.footer.options.calculationType == -1)\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.summarytext' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                        <input type=\"input\" name=\"footer.options.text\" class=\"form-control\" [(ngModel)]=\"activeField.footer.options.text\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </form>\r\n    </div>\r\n   \r\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
ColumnFormatSettingComponent.ctorParameters = () => [
    { type: Injector },
    { type: DatagridSettingsComponent },
    { type: ChangeDetectorRef }
];
ColumnFormatSettingComponent.propDecorators = {
    columns: [{ type: Input }],
    fields: [{ type: Input }],
    colForm: [{ type: ViewChild, args: ['colformatform',] }],
    formatChange: [{ type: Output }],
    fieldsChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ColumnGroupSettingComponent {
    /**
     * @param {?} injector
     * @param {?} gridSettingComponentRef
     * @param {?} cd
     */
    constructor(injector, gridSettingComponentRef, cd) {
        this.injector = injector;
        this.gridSettingComponentRef = gridSettingComponentRef;
        this.cd = cd;
        this.fields = [];
        this.formatColumns = [];
        this.groupFields = [];
        this.groupFieldsChange = new EventEmitter();
        this.formatColumnsChange = new EventEmitter();
        this.groupColumns = [];
        this.allowGroupColumns = [];
        this.activeCalculationCol = null;
        this.showSelectColumnsPanel = false;
        this.summaryItems = [];
        this.summaryItems2 = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.summaryItems = this.gridSettingComponentRef.summaryItems;
        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;
        this.setGroupColumns();
        this.registerEventHandle();
        this.initCalculationColumns();
        if (this.colForm) {
            this.colForm.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                if (!this.colForm.pristine) {
                    this.formatColumnsChange.emit(this.formatColumns);
                }
            }));
        }
        this.formatColumns.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            this.checkColumnOptions(n);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.formatColumns && !changes.formatColumns.isFirstChange()) {
            this.formatColumns.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                this.checkColumnOptions(n);
            }));
            this.setGroupColumns();
            this.initCalculationColumns();
        }
    }
    /**
     * @private
     * @return {?}
     */
    initCalculationColumns() {
        if (this.formatColumns) {
            this.activeCalculationCol = this.formatColumns[0];
        }
    }
    /**
     * @private
     * @return {?}
     */
    registerEventHandle() {
        this.groupingSettingEl.nativeElement.addEventListener('click', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.target !== this.selectcolumnspanel.nativeElement) {
                this.showSelectColumnsPanel = false;
            }
        }), false);
    }
    /**
     * @private
     * @return {?}
     */
    setGroupColumns() {
        if (this.groupFields && this.groupFields.length) {
            this.groupColumns = this.groupFields.map((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                return this.columns[0].find((/**
                 * @param {?} col
                 * @return {?}
                 */
                col => col.field === f));
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n));
        }
        else {
            this.groupColumns = [];
        }
        this.onGroupFieldsChange();
    }
    /**
     * @private
     * @return {?}
     */
    getAllowGroupingColumns() {
        return this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.allowGrouping || n.allowGrouping === undefined));
    }
    /**
     * @private
     * @return {?}
     */
    onGroupFieldsChange() {
        this.groupFieldsChange.emit(this.groupFields);
    }
    /**
     * @private
     * @param {?} col
     * @return {?}
     */
    checkColumnOptions(col) {
        if (col) {
            if (col.groupFooter === undefined) {
                col.groupFooter = { options: { calculationType: -1 } };
            }
            else {
                col.groupFooter.options = col.groupFooter.options || { calculationType: -1 };
                if (col.groupFooter.options.calculationType === undefined) {
                    col.groupFooter.options.calculationType = -1;
                }
            }
            // if (this.activeField.footer === undefined) {
            //     this.activeField.footer =  { options: {calculationType: -1} };
            // } else {
            //     this.activeField.footer.options = this.activeField.footer.options || {calculationType: -1};
            //     if (this.activeField.footer.options.calculationType === undefined) {
            //         this.activeField.footer.options.calculationType = -1;
            //     }
            // }
        }
    }
    /**
     * 显示或隐藏字段选取面板
     * @param {?} $event
     * @return {?}
     */
    toggleGroupingColumnPanel($event) {
        $event.stopPropagation();
        this.showSelectColumnsPanel = !this.showSelectColumnsPanel;
        this.allowGroupColumns = this.getAllowGroupingColumns();
    }
    /**
     * 添加分组字段
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    addGroupColumn($event, col) {
        $event.stopPropagation();
        if (this.groupFields.indexOf(col.field) === -1) {
            this.groupColumns = [...this.groupColumns, col];
            this.groupFields = this.groupColumns.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
            this.onGroupFieldsChange();
            this.showSelectColumnsPanel = false;
        }
    }
    /**
     * 移除分组字段
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onRemoveGroupingField($event, col) {
        $event.stopPropagation();
        this.groupFields = this.groupFields.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n !== col.field));
        this.setGroupColumns();
    }
    /**
     * 拖动分组字段进行排序
     * @param {?} $event
     * @return {?}
     */
    onGroupingFieldDropped($event) {
        console.log('grouping field droped.', $event);
        const { removedIndex, addedIndex } = $event;
        /** @type {?} */
        const removedItem = this.groupFields.splice(removedIndex, 1);
        this.groupFields.splice(addedIndex, 0, ...removedItem);
        this.setGroupColumns();
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onFieldClick($event, col) {
        this.activeCalculationCol = col;
    }
}
ColumnGroupSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'column-group-setting',
                template: "<div #groupingSetting class=\"d-flex flex-column flex-fill column-group-setting\">\r\n\r\n    <div region=\"north\" class=\"north d-flex flex-column group-fields\" style=\"height: 78px; \">\r\n        <div class=\"title\">\r\n            {{'datagrid.settings.grouppingField' | locale }}\r\n            <span class=\"text-warning\"> ({{'datagrid.settings.moreGrouppingFieldWarningMessage' | locale }})</span>\r\n        </div>\r\n        <div #groupfieldcontainer class=\"flex-fill p-2 all-fields\">\r\n            <ul class=\"list-group\" style=\"display: inline-block;\"  column-group-drag (drop)=\"onGroupingFieldDropped($event)\">\r\n                <li class=\"list-group-item list-group-item-action btn btn-light smooth-dnd-draggable-wrapper group-field\"\r\n                *ngFor=\"let item of groupColumns\">\r\n                    {{ item.title }}\r\n                    <span class=\"f-icon f-icon-close\" style=\"cursor: pointer;\" title=\"{{'datagrid.settings.removeGrouppingFieldTip' | locale }}\" (click)=\"onRemoveGroupingField($event, item)\"></span>\r\n                </li>\r\n\r\n                <li class=\"list-group-item list-group-item-action btn btn-light btn-add-groupfield\" title=\"{{'datagrid.settings.addGrouppingFieldTip' | locale }}\"\r\n                    *ngIf=\"!groupFields || groupFields.length < 3\" (click)=\"toggleGroupingColumnPanel($event)\">\r\n                   <span class=\"f-icon f-icon-add\" style=\"font-size: 24px;\"></span>\r\n                </li>\r\n            </ul>\r\n            <div #selectcolumnspanel class=\"group-field-panel\" [style.display]=\"showSelectColumnsPanel? '': 'none'\"\r\n            [style.width.px]=\"groupfieldcontainer.offsetWidth - 16\">\r\n                <ul class=\"list-group\">\r\n                    <li class=\"list-group-item list-group-item-action btn btn-light\" *ngFor=\"let item of allowGroupColumns\"\r\n                    (click)=\"addGroupColumn($event, item)\" [style.display]=\"groupFields?.indexOf(item.field) > -1 ? 'none': ''\">\r\n                        {{ item.title }}\r\n                    </li>\r\n                </ul>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n    <div region=\"center\" class=\"center  d-flex flex-column flex-fill\" style=\"overflow:hidden;\">\r\n        <div class=\"group-sum-fields\">\r\n            {{'datagrid.settings.grouppingSummary' | locale}}\r\n        </div>\r\n        <div class=\"flex-fill p-2\" style=\" background-color: #fff; overflow: auto;\">\r\n            <div class=\"d-flex flex-row flex-fill dg-column-format-setting\" style=\"height: 100%\">\r\n                <div region=\"west\" class=\"west d-flex flex-column\" style=\"width: 360px; min-width:260px;overflow: hidden;\">\r\n                    <div style=\"overflow: auto;padding-right: 5px;\" class=\"flex-fill\">\r\n                        <ul class=\"list-group  list-group-flush\">\r\n                            <li class=\"list-group-item list-group-item-action format-setting-column\"\r\n                            *ngFor=\"let item of formatColumns\"\r\n                            [class.active]=\"activeCalculationCol && activeCalculationCol.field === item.field\"\r\n                            (click)=\"onFieldClick($event, item)\"\r\n                             >\r\n                                {{ item.title }}\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                 \r\n                </div>\r\n                <div region=\"center\" class=\"center flex-fill\" style=\"overflow:auto;padding: 0 10px; padding-left: 20px\">\r\n                    <form #groupSumform=\"ngForm\">\r\n                        <div class=\"farris-group-wrap\">\r\n                            <div class=\"form-group farris-form-group\">\r\n                                <label for=\"hpinput01\" class=\"col-form-label\">\r\n                                    <span class=\"farris-label-text\">{{'datagrid.settings.grouppingSummaryType' | locale}}</span>\r\n                                </label>\r\n                                <div class=\"farris-input-wrap\">\r\n                                   \r\n                                    <farris-combo-list name=\"groupFooter.options.calculationType\" \r\n                                    [data]=\" activeCalculationCol?.dataType === 'number'?  summaryItems : summaryItems2 \" \r\n                                    [editable]=\"false\"\r\n                                    [(ngModel)]=\"activeCalculationCol?.groupFooter.options.calculationType\"\r\n                                    [idField]=\"'value'\"\r\n                                    [textField]=\"'title'\"\r\n                                    [enableClear]=\"false\"></farris-combo-list>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"farris-group-wrap\" *ngIf=\"activeCalculationCol?.groupFooter.options.calculationType == -1\">\r\n                            <div class=\"form-group farris-form-group\">\r\n                                <label for=\"hpinput01\" class=\"col-form-label\">\r\n                                    <span class=\"farris-label-text\">{{'datagrid.settings.grouppingSummaryText' | locale}}</span>\r\n                                </label>\r\n                                <div class=\"farris-input-wrap\">\r\n                                    <input type=\"input\" name=\"groupFooter.options.text\" class=\"form-control\" [(ngModel)]=\"activeCalculationCol?.groupFooter.options.text\">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n               \r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    </div>\r\n\r\n</div>",
                styles: [`
        .column-group-setting{ height: 100%; background-color: #ffffff; padding: 0 10px 10px 10px}
        .smooth-dnd-ghost.group-field {
            z-index: 999999999 !important;
        }
        .active {
            background-color: rgb(231 241 255);
            color: rgb(0 0 0);
        }
        .column-group-setting .group-field {
            float: left;max-width: 200px;margin-right: 10px;
            width: auto; padding: 5px;padding-right: 30px;
            border-radius: 20px;padding-left: 10px; cursor:move
        }
        .group-field .f-icon { position: absolute;right: 2px;top: 7px; }
        .btn-add-groupfield{float: left;width: 32px;padding: 0px;padding-top: 3px; border-radius: 20px;}
        .group-field-panel{
            height: 260px; border-radius: 5px; z-index: 3;position: absolute;
            background: rgb(255 255 255); box-shadow: 1px 1px 4px rgb(156 155 155 / 75%);
            overflow: hidden;
            overflow-y: auto;
        }
        .group-field-panel ul {
            display: inline-block;margin: 20px;margin-top: 5px;
        }
        .group-field-panel li {
            float: left; cursor: pointer;max-width: 200px;margin-right: 10px;width: auto;
            padding: 10px; min-width: 80px; margin-top: 15px; text-align: center;
        }
        .format-setting-column {
            background: rgba(247,248,251,0.6);
            padding: 7px 10px;
            margin-bottom: 5px;
            border: 1px solid rgba(233,236,243,0.45);
            border-radius: 5px;
        }
        .format-setting-column.active {
            border: 1px solid rgb(42 135 255);
            background: rgb(239 247 255);
            border-top: 1px solid rgb(42 135 255)!important;
            border-bottom: 1px solid rgb(42 135 255)!important;
        }

        `]
            }] }
];
/** @nocollapse */
ColumnGroupSettingComponent.ctorParameters = () => [
    { type: Injector },
    { type: DatagridSettingsComponent },
    { type: ChangeDetectorRef }
];
ColumnGroupSettingComponent.propDecorators = {
    columns: [{ type: Input }],
    fields: [{ type: Input }],
    formatColumns: [{ type: Input }],
    groupFields: [{ type: Input }],
    groupFieldsChange: [{ type: Output }],
    formatColumnsChange: [{ type: Output }],
    groupingSettingEl: [{ type: ViewChild, args: ['groupingSetting',] }],
    selectcolumnspanel: [{ type: ViewChild, args: ['selectcolumnspanel',] }],
    colForm: [{ type: ViewChild, args: ['groupSumform',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
smoothDnD.dropHandler = dropHandlers.reactDropHandler().handler;
smoothDnD.wrapChild = false;
class ColumnVisibleDragDirective {
    /**
     * @param {?} ngzone
     * @param {?} injector
     * @param {?} render
     * @param {?} el
     */
    constructor(ngzone, injector, render, el) {
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.drop = new EventEmitter();
        this.options = {
            behaviour: 'move',
            dragHandleSelector: '.field-drag-handle',
            dropPlaceholder: {
                className: 'drop-group-field',
            },
            getGhostParent: (/**
             * @return {?}
             */
            () => {
                return document.body;
            }),
            getChildPayload: this.getChildPayload.bind(this),
            shouldAcceptDrop: (/**
             * @param {?} sourceContainerOptions
             * @param {?} payload
             * @return {?}
             */
            (sourceContainerOptions, payload) => {
                return true;
            }),
            onDropReady: (/**
             * @param {?} dropResult
             * @return {?}
             */
            (dropResult) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDropReady(dropResult);
                }));
            }),
            onDrop: (/**
             * @param {?} dropResult
             * @return {?}
             */
            (dropResult) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.drop.emit(dropResult);
                }));
            }),
            onDragEnter: (/**
             * @return {?}
             */
            () => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragEnter();
                }));
            }),
            onDragStart: (/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragStart(info);
                }));
            }),
            onDragEnd: (/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragEnd(info);
                }));
            })
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initDnD();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disposeDnd();
    }
    /**
     * @private
     * @return {?}
     */
    disposeDnd() {
        if (this.container) {
            this.container.dispose();
            this.container = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    initDnD() {
        this.disposeDnd();
        this.container = smoothDnD(this.el.nativeElement, this.options);
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    getChildPayload(index) {
        return index;
    }
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    onDropReady(dropResult) {
        // console.log('DROP READY', dropResult);
    }
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    onDragStart(info) {
        console.log('DRAG START', info);
    }
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    onDragEnd(info) {
        // console.log('DRAG END', info);
    }
    /**
     * @private
     * @return {?}
     */
    onDragEnter() {
        // console.log('DRAG ENTER');
    }
}
ColumnVisibleDragDirective.decorators = [
    { type: Directive, args: [{
                selector: '[column-visible-drag]',
            },] }
];
/** @nocollapse */
ColumnVisibleDragDirective.ctorParameters = () => [
    { type: NgZone },
    { type: Injector },
    { type: Renderer2 },
    { type: ElementRef }
];
ColumnVisibleDragDirective.propDecorators = {
    drop: [{ type: Output }],
    options: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
smoothDnD.dropHandler = dropHandlers.reactDropHandler().handler;
smoothDnD.wrapChild = false;
class ColumnGroupDragDirective {
    /**
     * @param {?} ngzone
     * @param {?} injector
     * @param {?} render
     * @param {?} el
     */
    constructor(ngzone, injector, render, el) {
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.drop = new EventEmitter();
        this.options = {
            orientation: 'horizontal',
            behaviour: 'move',
            dropPlaceholder: {
                className: 'drop-group-field',
            },
            getGhostParent: (/**
             * @return {?}
             */
            () => {
                return document.body;
            }),
            getChildPayload: this.getChildPayload.bind(this),
            shouldAcceptDrop: (/**
             * @param {?} sourceContainerOptions
             * @param {?} payload
             * @return {?}
             */
            (sourceContainerOptions, payload) => {
                return true;
            }),
            onDropReady: (/**
             * @param {?} dropResult
             * @return {?}
             */
            (dropResult) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDropReady(dropResult);
                }));
            }),
            onDrop: (/**
             * @param {?} dropResult
             * @return {?}
             */
            (dropResult) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.drop.emit(dropResult);
                }));
            }),
            onDragEnter: (/**
             * @return {?}
             */
            () => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragEnter();
                }));
            }),
            onDragStart: (/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragStart(info);
                }));
            }),
            onDragEnd: (/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragEnd(info);
                }));
            })
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initDnD();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disposeDnd();
    }
    /**
     * @private
     * @return {?}
     */
    disposeDnd() {
        if (this.container) {
            this.container.dispose();
            this.container = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    initDnD() {
        this.disposeDnd();
        this.container = smoothDnD(this.el.nativeElement, this.options);
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    getChildPayload(index) {
        return index;
    }
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    onDropReady(dropResult) {
        // console.log('DROP READY', dropResult);
    }
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    onDragStart(info) {
        // console.log('DRAG START', info);
    }
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    onDragEnd(info) {
        // console.log('DRAG END', info);
    }
    /**
     * @private
     * @return {?}
     */
    onDragEnter() {
        // console.log('DRAG ENTER');
    }
}
ColumnGroupDragDirective.decorators = [
    { type: Directive, args: [{
                selector: '[column-group-drag]',
            },] }
];
/** @nocollapse */
ColumnGroupDragDirective.ctorParameters = () => [
    { type: NgZone },
    { type: Injector },
    { type: Renderer2 },
    { type: ElementRef }
];
ColumnGroupDragDirective.propDecorators = {
    drop: [{ type: Output }],
    options: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridSettingsModule {
    /**
     * @param {?=} apiUri
     * @return {?}
     */
    static forRoot(apiUri = '') {
        return {
            ngModule: DatagridSettingsModule,
            providers: [
                { provide: GRID_SETTINGS_SERVICE, useClass: DatagridSettingsService }
            ]
        };
    }
}
DatagridSettingsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    DatagridSettingsComponent,
                    DatagridSortSettingComponent,
                    DatagridViewColumnsComponent,
                    ColumnFormatSettingComponent,
                    ColumnGroupSettingComponent,
                    ColumnVisibleDragDirective,
                    ColumnGroupDragDirective,
                    SimpleColumnsComponent,
                    NewSchemeComponent,
                    SchemeListComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    MultiSelectModule,
                    ComboListModule,
                    DatagridModule,
                    FarrisCommonModule.forRoot(),
                    MessagerModule.forRoot(),
                    LocaleModule.forRoot(),
                    ModalModule.forRoot(),
                    SwitchModule,
                    FarrisTooltipModule,
                    NotifyModule.forRoot(),
                    OrganizationSelectorModule,
                    LanguageTextboxModule
                ],
                entryComponents: [
                    DatagridSettingsComponent,
                    SimpleColumnsComponent,
                    NewSchemeComponent,
                    SchemeListComponent
                ],
                exports: [
                    DatagridSettingsComponent,
                    SimpleColumnsComponent,
                    NewSchemeComponent,
                    SchemeListComponent
                ]
            },] }
];

export { ColumnFormatSettingComponent, ColumnGroupDragDirective, ColumnGroupSettingComponent, ColumnVisibleDragDirective, DatagridSettingsComponent, DatagridSettingsModule, DatagridSettingsService, DatagridSortSettingComponent, DatagridViewColumnsComponent, GRID_SETTINGS_WEBAPI, NewSchemeComponent, SchemeListComponent, SimpleColumnsComponent };
//# sourceMappingURL=farris-ui-datagrid-settings.js.map
