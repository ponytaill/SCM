/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, NgZone, Injector, Renderer2, ElementRef, Input, Output, EventEmitter } from '@angular/core';
import { dropHandlers, smoothDnD as SmoothDndForVisible, constants } from '@farris/smooth-dnd';
const { wrapperClass, animationClass } = constants;
SmoothDndForVisible.dropHandler = dropHandlers.reactDropHandler().handler;
SmoothDndForVisible.wrapChild = false;
/**
 * @record
 */
export function DragStartEndInfo() { }
if (false) {
    /** @type {?} */
    DragStartEndInfo.prototype.isSource;
    /** @type {?} */
    DragStartEndInfo.prototype.payload;
    /** @type {?} */
    DragStartEndInfo.prototype.willAcceptDrop;
}
export class ColumnVisibleDragDirective {
    /**
     * @param {?} ngzone
     * @param {?} injector
     * @param {?} render
     * @param {?} el
     */
    constructor(ngzone, injector, render, el) {
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.drop = new EventEmitter();
        this.options = {
            behaviour: 'move',
            dragHandleSelector: '.field-drag-handle',
            dropPlaceholder: {
                className: 'drop-group-field',
            },
            getGhostParent: (/**
             * @return {?}
             */
            () => {
                return document.body;
            }),
            getChildPayload: this.getChildPayload.bind(this),
            shouldAcceptDrop: (/**
             * @param {?} sourceContainerOptions
             * @param {?} payload
             * @return {?}
             */
            (sourceContainerOptions, payload) => {
                return true;
            }),
            onDropReady: (/**
             * @param {?} dropResult
             * @return {?}
             */
            (dropResult) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDropReady(dropResult);
                }));
            }),
            onDrop: (/**
             * @param {?} dropResult
             * @return {?}
             */
            (dropResult) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.drop.emit(dropResult);
                }));
            }),
            onDragEnter: (/**
             * @return {?}
             */
            () => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragEnter();
                }));
            }),
            onDragStart: (/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragStart(info);
                }));
            }),
            onDragEnd: (/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragEnd(info);
                }));
            })
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initDnD();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disposeDnd();
    }
    /**
     * @private
     * @return {?}
     */
    disposeDnd() {
        if (this.container) {
            this.container.dispose();
            this.container = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    initDnD() {
        this.disposeDnd();
        this.container = SmoothDndForVisible(this.el.nativeElement, this.options);
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    getChildPayload(index) {
        return index;
    }
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    onDropReady(dropResult) {
        // console.log('DROP READY', dropResult);
    }
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    onDragStart(info) {
        console.log('DRAG START', info);
    }
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    onDragEnd(info) {
        // console.log('DRAG END', info);
    }
    /**
     * @private
     * @return {?}
     */
    onDragEnter() {
        // console.log('DRAG ENTER');
    }
}
ColumnVisibleDragDirective.decorators = [
    { type: Directive, args: [{
                selector: '[column-visible-drag]',
            },] }
];
/** @nocollapse */
ColumnVisibleDragDirective.ctorParameters = () => [
    { type: NgZone },
    { type: Injector },
    { type: Renderer2 },
    { type: ElementRef }
];
ColumnVisibleDragDirective.propDecorators = {
    drop: [{ type: Output }],
    options: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ColumnVisibleDragDirective.prototype.container;
    /** @type {?} */
    ColumnVisibleDragDirective.prototype.drop;
    /** @type {?} */
    ColumnVisibleDragDirective.prototype.options;
    /**
     * @type {?}
     * @private
     */
    ColumnVisibleDragDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    ColumnVisibleDragDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ColumnVisibleDragDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    ColumnVisibleDragDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,