/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NumberHelperService } from '@farris/ui-common/number';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { Compare, FilterRelation, CompareOperators, SortType } from '@farris/ui-common/types';
import * as i0 from "@angular/core";
import * as i1 from "@farris/ui-common/date";
import * as i2 from "@farris/ui-common/number";
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-01-02 14:12:47
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-18 13:59:34
 * @Company: Inspur
 * @Version: v0.0.1
 */
var ColumnFormatService = /** @class */ (function () {
    function ColumnFormatService(datehelper, numberhelper) {
        this.datehelper = datehelper;
        this.numberhelper = numberhelper;
    }
    /**
     * @param {?} value
     * @param {?=} data
     * @param {?=} formatter
     * @param {?=} context
     * @return {?}
     */
    ColumnFormatService.prototype.format = /**
     * @param {?} value
     * @param {?=} data
     * @param {?=} formatter
     * @param {?=} context
     * @return {?}
     */
    function (value, data, formatter, context) {
        if (formatter) {
            if (typeof (formatter) === 'function') {
                context = context || {};
                return formatter(value, data, tslib_1.__assign({ date: this.datehelper, number: this.numberhelper, format: this }, context));
            }
            else {
                if (formatter['type']) {
                    /** @type {?} */
                    var fmt = (/** @type {?} */ (formatter));
                    switch (fmt.type) {
                        case 'datetime':
                            if (fmt.options && fmt.options.format) {
                                return this.dateTimeFormat(value, fmt.options);
                            }
                            return value;
                        case 'number':
                            return this.numberFormat(value, fmt.options);
                        case 'enum':
                            return this.enumFormat(value, fmt.options);
                        case 'image':
                            return this.imageFormat(value, fmt.options);
                        case 'boolean':
                            return this.booleanFormat(value, fmt.options);
                        default:
                            return value;
                    }
                }
            }
        }
        return value;
    };
    /**
     * @private
     * @param {?} value
     * @param {?} opts
     * @return {?}
     */
    ColumnFormatService.prototype.dateTimeFormat = /**
     * @private
     * @param {?} value
     * @param {?} opts
     * @return {?}
     */
    function (value, opts) {
        if (value) {
            /** @type {?} */
            var fmt = 'yyyy-MM-dd';
            if (typeof (opts) === 'string') {
                fmt = opts;
            }
            else if (typeof (opts) === 'object') {
                fmt = opts.format;
            }
            fmt = fmt.replace('YYYY', 'yyyy').replace('-DD', '-dd');
            if (typeof (opts) === 'object' && opts.dateRange) {
                /** @type {?} */
                var splitStr = opts.dateRangeDatesDelimiter || '~';
                var _a = tslib_1.__read(value.split(splitStr), 2), beginDate = _a[0], endDate = _a[1];
                beginDate = this.datehelper.formatTo(beginDate, fmt);
                endDate = this.datehelper.formatTo(endDate, fmt);
                return beginDate + splitStr + endDate;
            }
            return this.datehelper.formatTo(value, fmt);
        }
        return value;
    };
    /**
     * @private
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    ColumnFormatService.prototype.numberFormat = /**
     * @private
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    function (value, opts) {
        return this.numberhelper.formatNumber(value, opts);
        // if (value !== undefined && value !== '' && value !== NaN) {
        //     return this.numberhelper.formatMoney(value, opts);
        // }
        // return value;
    };
    /**
     * @private
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    ColumnFormatService.prototype.enumFormat = /**
     * @private
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    function (value, opts) {
        if (value === undefined || value === null) {
            value = '';
        }
        if (opts && opts.data && opts.data.length) {
            /** @type {?} */
            var val = value.toString();
            /** @type {?} */
            var arr = [val];
            if (val.indexOf(',') > -1) { // 多选
                arr = val.split(',');
            }
            /** @type {?} */
            var str_1 = [];
            arr.forEach((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                /** @type {?} */
                var n = opts.data.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item[opts.valueField].toString() == v; }));
                if (n) {
                    str_1.push(n[opts.textField]);
                }
            }));
            if (str_1.length) {
                return str_1.join(',');
            }
            return value;
        }
        return value;
    };
    /**
     * @private
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    ColumnFormatService.prototype.imageFormat = /**
     * @private
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    function (value, opts) {
        if (value) {
            if (opts) {
                /** @type {?} */
                var arrStr = ["<img src=\"" + value + "\" "];
                if (opts.width) {
                    arrStr.push("width=\"" + opts.width + "\"");
                }
                if (opts.height) {
                    arrStr.push("height=\"" + opts.height + "\"");
                }
                arrStr.push('>');
                return arrStr.join('');
            }
            else {
                return "<img src=\"" + value + "\">";
            }
        }
        return value;
    };
    /**
     * @private
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    ColumnFormatService.prototype.booleanFormat = /**
     * @private
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    function (value, opts) {
        if (value !== undefined) {
            if (opts) {
                /** @type {?} */
                var val = value ? opts.trueText : opts.falseText;
                if (val === null || val === undefined) {
                    return value;
                }
                return val;
            }
            else {
                return value;
            }
        }
        return '';
    };
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    ColumnFormatService.prototype.convertCompare = /**
     * @private
     * @param {?} val
     * @return {?}
     */
    function (val) {
        /** @type {?} */
        var op = CompareOperators.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.value === val; }));
        if (op) {
            return op.label;
        }
    };
    /**
     * @param {?} sorts
     * @return {?}
     */
    ColumnFormatService.prototype.buildSortString = /**
     * @param {?} sorts
     * @return {?}
     */
    function (sorts) {
        if (sorts && sorts.length) {
            /** @type {?} */
            var str = sorts.map((/**
             * @param {?} s
             * @return {?}
             */
            function (s) {
                return s.sortField + " " + SortType[s.sortType].toString().toLowerCase() + ",";
            })).join(' ');
            if (str) {
                str = str.substr(0, str.length - 1);
            }
            return str;
        }
        return '';
    };
    /**
     * @param {?} conditions
     * @return {?}
     */
    ColumnFormatService.prototype.buildSqlWhere = /**
     * @param {?} conditions
     * @return {?}
     */
    function (conditions) {
        var _this = this;
        if (conditions && conditions.length) {
            /** @type {?} */
            var result_1 = [];
            /** @type {?} */
            var conditionList_1 = conditions.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.filterField !== ''; }));
            conditionList_1.forEach((/**
             * @param {?} condition
             * @param {?} index
             * @return {?}
             */
            function (condition, index) {
                if (!condition.filterField) {
                    return;
                }
                result_1.push(condition.lbracket);
                result_1.push(condition.filterField);
                /** @type {?} */
                var opCode = parseInt(condition.compare.toString(), 10);
                /** @type {?} */
                var op = _this.convertCompare(opCode);
                result_1.push(' ' + op.replace(/\%/g, '').replace('...', ''));
                if (opCode === Compare.Like || opCode === Compare.NotLike
                    || opCode === Compare.NotLikeEndWith
                    || opCode === Compare.LikeEndWith) {
                    result_1.push('\'');
                    result_1.push('%');
                }
                else {
                    result_1.push(' ');
                    result_1.push('\'');
                }
                if (opCode === Compare.In || opCode === Compare.NotIn) {
                    result_1.push(condition.value.replace(/\r\n/g, ','));
                }
                else {
                    result_1.push(condition.value);
                }
                if (opCode === Compare.Like || opCode === Compare.NotLike
                    || opCode === Compare.LikeStartWith || opCode === Compare.NotLikeStartWith) {
                    result_1.push('%');
                }
                result_1.push('\'');
                result_1.push(condition.rbracket);
                result_1.push(' ');
                if (index !== conditionList_1.length - 1) {
                    result_1.push(condition.relation === FilterRelation.Empty ? '' :
                        FilterRelation[condition.relation].toString().toLowerCase());
                    result_1.push(' ');
                }
            }));
            return result_1.join('');
        }
        return '';
    };
    ColumnFormatService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ColumnFormatService.ctorParameters = function () { return [
        { type: DateTimeHelperService },
        { type: NumberHelperService }
    ]; };
    /** @nocollapse */ ColumnFormatService.ngInjectableDef = i0.defineInjectable({ factory: function ColumnFormatService_Factory() { return new ColumnFormatService(i0.inject(i1.DateTimeHelperService), i0.inject(i2.NumberHelperService)); }, token: ColumnFormatService, providedIn: "root" });
    return ColumnFormatService;
}());
export { ColumnFormatService };
if (false) {
    /** @type {?} */
    ColumnFormatService.prototype.datehelper;
    /** @type {?} */
    ColumnFormatService.prototype.numberhelper;
}
//# sourceMappingURL=data:application/json;base64,