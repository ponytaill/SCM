import { take } from 'rxjs/operators';
import { Injectable, Optional } from '@angular/core';
import { ParamService } from './param.service';
import { RuntimeFrameworkService } from './rtf-service';
import { isObservable } from 'rxjs';
/**
 * 应用参数服务
 * @scope FormModule
 */
var ApplicationParamService = /** @class */ (function () {
    function ApplicationParamService(paramService, runtimeFrameworkService) {
        this.paramService = paramService;
        this.runtimeFrameworkService = runtimeFrameworkService;
        if (!this.runtimeFrameworkService) {
            this.runtimeFrameworkService = new RuntimeFrameworkService();
        }
    }
    /**
     * 解析参数
     */
    ApplicationParamService.prototype.parseParams = function (route, frameworkService, viewModel, callback) {
        var _this = this;
        var highOrderInvoke = this.highOrderInvoke(callback);
        if (!this.paramService) {
            route.queryParams.pipe(take(1)).subscribe(function (params) {
                _this.params = params;
                _this.setupParams(params, frameworkService, viewModel, highOrderInvoke);
            });
        }
        else {
            this.paramService.parse().pipe(take(1)).subscribe(function (params) {
                _this.params = params;
                _this.setupParams(params, frameworkService, viewModel, highOrderInvoke);
            });
        }
    };
    /**
     * 设置参数
     */
    ApplicationParamService.prototype.setupParams = function (params, frameworkService, viewModel, callback) {
        var queryParams = this.getParams(params);
        if (!queryParams) {
            callback();
            return;
        }
        // 先设置参数，保证普通路由也能正常执行。
        this.setQueryParams(queryParams, viewModel);
        var funcId = this.getFuncId(queryParams);
        var appId = this.getAppId(queryParams);
        if (!funcId && !appId) {
            callback();
            return;
        }
        if (funcId) {
            this.setStaticParams(funcId, queryParams, frameworkService, viewModel, callback);
        }
        else {
            callback();
        }
    };
    /**
     * 设置查询参数
     */
    ApplicationParamService.prototype.setQueryParams = function (queryParams, viewModel) {
        var parsedQueryParams = {};
        // 设置表单参数
        // 首先判断是否为弹窗
        var isInDialog = this.isInDialog(viewModel);
        var uiState = viewModel && viewModel.uiState && viewModel.uiState.innerData || {};
        // 如果是弹窗，弹窗外的参数（无论表单参数或静态参数）不应该覆盖弹窗的参数。弹窗打开时传递的参数相当于局部变量，不应被覆盖
        Object.keys(queryParams).forEach(function (paramName) {
            if (!isInDialog) {
                parsedQueryParams[paramName] = queryParams[paramName];
            }
            else {
                if (!uiState.hasOwnProperty(paramName)) {
                    parsedQueryParams[paramName] = queryParams[paramName];
                }
            }
        });
        this.updateUIState(viewModel, parsedQueryParams);
    };
    /**
     * 设置静态参数
     */
    ApplicationParamService.prototype.setStaticParams = function (funcId, queryParams, frameworkService, viewModel, callback) {
        var _this = this;
        this.runtimeFrameworkService.getMenuParams(funcId, function (staicParams) {
            var staticParamsObj = _this.mapStaticParamsToObject(staicParams, queryParams, viewModel);
            if (!staticParamsObj) {
                callback();
                return;
            }
            _this.updateUIState(viewModel, staticParamsObj);
            callback();
        });
    };
    /**
     * 将staticParams转换为普通对象
     * @param staticParams，形如：[{'name': 'key1', 'value': 'val1'}, {'name': 'key2', 'value': 'val2'}]
     * @return 形如：{key1: val1, key2: value2 }
     */
    ApplicationParamService.prototype.mapStaticParamsToObject = function (staticParams, queryParams, viewModel) {
        if (!staticParams) {
            return;
        }
        var inDialog = this.isInDialog(viewModel);
        var uiState = viewModel && viewModel.uiState && viewModel.uiState.innerData || {};
        var result = {};
        staticParams.forEach(function (value, key, map) {
            if (!inDialog) {
                // 静态参数不能覆盖查询参数
                if (!queryParams.hasOwnProperty(key)) {
                    result[key] = value;
                }
            }
            else {
                if (!queryParams.hasOwnProperty(key) && !uiState.hasOwnProperty(key)) {
                    result[key] = value;
                }
            }
        });
        return result;
    };
    /**
     * 是否在弹窗内
     * @param viewModel viewmodel
     */
    ApplicationParamService.prototype.isInDialog = function (viewModel) {
        var isInDialog = false;
        if (viewModel && viewModel.uiState) {
            // tslint:disable-next-line: max-line-length
            if (viewModel.uiState.innerData && viewModel.uiState.innerData.hasOwnProperty('DEVKIT_DIALOG') || viewModel.uiState['DEVKIT_DIALOG']) {
                isInDialog = true;
            }
        }
        return isInDialog;
    };
    /**
     * 更新UIState
     */
    ApplicationParamService.prototype.updateUIState = function (viewModel, params) {
        var _this = this;
        if (!viewModel || !params) {
            return;
        }
        var uiState = viewModel.uiState;
        // 兼容使用string传递params对象的场景
        if (typeof params === 'string' && params !== '') {
            params = JSON.parse(params);
        }
        // 在UIState为参数创建属性
        Object.keys(params).forEach(function (propName) {
            uiState.setPropertyValue(propName, params[propName]);
            if (propName && propName === 'union_session') {
                var sessionInfo = params[propName];
                _this.setSessionInfo(viewModel, sessionInfo);
            }
        });
    };
    ApplicationParamService.prototype.setSessionInfo = function (viewModel, sessionInfo) {
        if (!viewModel || !sessionInfo) {
            return;
        }
        if (sessionInfo && typeof sessionInfo === 'string' && sessionInfo.startsWith('{') && sessionInfo.endsWith('}')) {
            sessionInfo = JSON.parse(sessionInfo);
        }
        var token = sessionInfo && sessionInfo.token || null;
        var sessionId = sessionInfo && sessionInfo.sessionId || null;
        if (token) {
            viewModel.frameContext.appContext.Token = token;
        }
        if (sessionId) {
            var befRepository = viewModel.frameContext.repository;
            if (befRepository) {
                befRepository.restService.sessionService.setBeSessionId(sessionId);
            }
        }
    };
    /**
     * 获取功能菜单id
     */
    ApplicationParamService.prototype.getFuncId = function (queryParams) {
        if (!queryParams) {
            return;
        }
        return queryParams['funcId'];
    };
    /**
     * 获取应用id
     */
    ApplicationParamService.prototype.getAppId = function (queryParams) {
        if (!queryParams) {
            return;
        }
        return queryParams['appId'];
    };
    ApplicationParamService.prototype.getTabId = function (queryParams) {
        if (!queryParams) {
            return;
        }
        return queryParams['tabId'];
    };
    /**
     * 获取url参数对象
     * @param queryParams url参数
     */
    ApplicationParamService.prototype.getParams = function (queryParams) {
        if (!queryParams) {
            return {};
        }
        var result = {};
        if (queryParams.hasOwnProperty('WEB_FORM_ROUTE_PARAMS')) {
            var webFormRouteParams = queryParams['WEB_FORM_ROUTE_PARAMS'];
            if (webFormRouteParams && webFormRouteParams.startsWith('{') && webFormRouteParams.endsWith('}')) {
                webFormRouteParams = decodeURI(encodeURI(webFormRouteParams).replace(/%0A/g, '\\n').replace(/%09/g, '\\t').replace(/%0D/g, '\\r'));
                result = JSON.parse(webFormRouteParams);
            }
            Object.keys(queryParams).forEach(function (prop) {
                if (prop !== 'WEB_FORM_ROUTE_PARAMS') {
                    result[prop] = queryParams[prop];
                }
            });
            return result;
        }
        return queryParams;
    };
    ApplicationParamService.prototype.highOrderInvoke = function (callback) {
        var _this = this;
        return function () {
            try {
                var queryParams = _this.getParams(_this.params);
                var tabId = _this.getTabId(queryParams);
                if (tabId) {
                    var controlEvent = _this.runtimeFrameworkService.getMenuSwitchControlEvent();
                    if (controlEvent && isObservable(controlEvent)) {
                        controlEvent.subscribe(function (event) {
                            if (event) {
                                event.next('ok');
                            }
                        });
                    }
                }
            }
            catch (e) {
                console.warn(e);
            }
            if (callback && typeof callback === 'function') {
                callback();
            }
        };
    };
    ApplicationParamService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ApplicationParamService.ctorParameters = function () { return [
        { type: ParamService, decorators: [{ type: Optional }] },
        { type: RuntimeFrameworkService, decorators: [{ type: Optional }] }
    ]; };
    return ApplicationParamService;
}());
export { ApplicationParamService };
//# sourceMappingURL=data:application/json;base64,