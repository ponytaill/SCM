import { Directive, ElementRef, Injector } from "@angular/core";
import { FrameContext } from "@farris/devkit";
import { ComboLookupComponent } from '@farris/ui-combo-lookup';
var ComboLookupComponentRefDirective = /** @class */ (function () {
    function ComboLookupComponentRefDirective(injector, component, elementRef, frameContext) {
        this.injector = injector;
        this.component = component;
        this.elementRef = elementRef;
        this.frameContext = frameContext;
    }
    ComboLookupComponentRefDirective.prototype.ngOnInit = function () {
        var id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;
        if (this.frameContext && id) {
            this.frameContext.componentRefManager.add(id, this.component);
        }
    };
    ComboLookupComponentRefDirective.prototype.ngOnDestroy = function () {
    };
    ComboLookupComponentRefDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[comboLookupRef]'
                },] }
    ];
    /** @nocollapse */
    ComboLookupComponentRefDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ComboLookupComponent },
        { type: ElementRef },
        { type: FrameContext }
    ]; };
    return ComboLookupComponentRefDirective;
}());
export { ComboLookupComponentRefDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYm8tbG9va3VwLWNvbXBvbmVudC1yZWYuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY29tcG9uZW50LXJlZi9jb21iby1sb29rdXAtY29tcG9uZW50LXJlZi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUNuRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFL0Q7SUFJRSwwQ0FBb0IsUUFBa0IsRUFBVSxTQUErQixFQUFVLFVBQXNCLEVBQVUsWUFBMEI7UUFBL0gsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLGNBQVMsR0FBVCxTQUFTLENBQXNCO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBQUksQ0FBQztJQUN4SixtREFBUSxHQUFSO1FBQ0UsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7UUFDaEcsSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLEVBQUUsRUFBRTtZQUMzQixJQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQy9EO0lBQ0gsQ0FBQztJQUNELHNEQUFXLEdBQVg7SUFDQSxDQUFDOztnQkFaRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtpQkFDN0I7Ozs7Z0JBTitCLFFBQVE7Z0JBRS9CLG9CQUFvQjtnQkFGVCxVQUFVO2dCQUNyQixZQUFZOztJQWlCckIsdUNBQUM7Q0FBQSxBQWRELElBY0M7U0FYWSxnQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdG9yLCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCB9IGZyb20gXCJAZmFycmlzL2RldmtpdFwiO1xyXG5pbXBvcnQgeyBDb21ib0xvb2t1cENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktY29tYm8tbG9va3VwJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2NvbWJvTG9va3VwUmVmXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIENvbWJvTG9va3VwQ29tcG9uZW50UmVmRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGNvbXBvbmVudDogQ29tYm9Mb29rdXBDb21wb25lbnQsIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCkgeyB9XHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICBjb25zdCBpZCA9IHRoaXMuZWxlbWVudFJlZiAmJiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCAmJiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5pZDtcclxuICAgIGlmICh0aGlzLmZyYW1lQ29udGV4dCAmJiBpZCkge1xyXG4gICAgICB0aGlzLmZyYW1lQ29udGV4dC5jb21wb25lbnRSZWZNYW5hZ2VyLmFkZChpZCwgdGhpcy5jb21wb25lbnQpO1xyXG4gICAgfVxyXG4gIH1cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICB9XHJcblxyXG59Il19