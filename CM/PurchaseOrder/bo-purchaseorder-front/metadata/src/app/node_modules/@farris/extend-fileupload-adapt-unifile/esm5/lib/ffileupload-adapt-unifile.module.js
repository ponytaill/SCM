/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffileupload-adapt-unifile.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FFileUploadModule } from '@farris/extend-file-upload';
import { UploadDialogMoudle } from '@gsp-svc/formdoc-upload';
import { FfileuploadAdaptUnifileService } from './ffileupload-adapt-unifile.service';
import { FfilepreviewAdaptUnifileService } from './ffilepreview-adapt-unifile.service';
import { FFilePreviewAdaptUnifileDirective } from './ffilepreview-adapt-unifile.directive';
import { FileListModule, FileViewerService } from '@gsp-svc/file-viewer';
import { FFileUploadAdaptUnifileConfigToken, FFileUploadAdaptUnifileConfigService } from './ffileupload-adapt-unifile.config';
import { FfilepreviewAdaptSeeimgComponent } from './ffilepreview-adapt-seeimg/ffilepreview-adapt-seeimg.component';
import { FFileAdaptDownloadFileDirective, FFileAdaptPreviewFileDirective } from './ffilepreview-adapt-unifile-simple.directive';
var FfileuploadAdaptUnifileModule = /** @class */ (function () {
    function FfileuploadAdaptUnifileModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    FfileuploadAdaptUnifileModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: FfileuploadAdaptUnifileModule,
            providers: [
                { provide: FFileUploadAdaptUnifileConfigToken, useValue: config },
                FFileUploadAdaptUnifileConfigService,
                FfilepreviewAdaptUnifileService,
                FileViewerService
            ]
        };
    };
    FfileuploadAdaptUnifileModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [FFilePreviewAdaptUnifileDirective, FfilepreviewAdaptSeeimgComponent, FFileAdaptDownloadFileDirective, FFileAdaptPreviewFileDirective],
                    imports: [
                        CommonModule,
                        UploadDialogMoudle,
                        FileListModule,
                        FFileUploadModule.forRoot(null, FfileuploadAdaptUnifileService)
                    ],
                    exports: [FFileUploadModule, FFilePreviewAdaptUnifileDirective, FfilepreviewAdaptSeeimgComponent, FFileAdaptDownloadFileDirective, FFileAdaptPreviewFileDirective],
                    providers: [
                        FFileUploadAdaptUnifileConfigService,
                        FfilepreviewAdaptUnifileService,
                        FileViewerService
                    ]
                },] }
    ];
    return FfileuploadAdaptUnifileModule;
}());
export { FfileuploadAdaptUnifileModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmZpbGV1cGxvYWQtYWRhcHQtdW5pZmlsZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2V4dGVuZC1maWxldXBsb2FkLWFkYXB0LXVuaWZpbGUvIiwic291cmNlcyI6WyJsaWIvZmZpbGV1cGxvYWQtYWRhcHQtdW5pZmlsZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDN0QsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDckYsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdkYsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDM0YsT0FBTyxFQUFFLGNBQWMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pFLE9BQU8sRUFBaUMsa0NBQWtDLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUM3SixPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxpRUFBaUUsQ0FBQztBQUNuSCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsOEJBQThCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUdoSTtJQUFBO0lBNEJBLENBQUM7Ozs7O0lBWFEscUNBQU87Ozs7SUFBZCxVQUFlLE1BQXNDO1FBQ25ELE9BQU87WUFDTCxRQUFRLEVBQUUsNkJBQTZCO1lBQ3ZDLFNBQVMsRUFBRTtnQkFDVCxFQUFFLE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO2dCQUNqRSxvQ0FBb0M7Z0JBQ3BDLCtCQUErQjtnQkFDL0IsaUJBQWlCO2FBQ2xCO1NBQ0YsQ0FBQztJQUNKLENBQUM7O2dCQTNCRixRQUFRLFNBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsaUNBQWlDLEVBQUUsZ0NBQWdDLEVBQUMsK0JBQStCLEVBQUMsOEJBQThCLENBQUM7b0JBQ2xKLE9BQU8sRUFBRTt3QkFDUCxZQUFZO3dCQUNaLGtCQUFrQjt3QkFDbEIsY0FBYzt3QkFDZCxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLDhCQUE4QixDQUFDO3FCQUNoRTtvQkFDRCxPQUFPLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxpQ0FBaUMsRUFBRSxnQ0FBZ0MsRUFBQywrQkFBK0IsRUFBQyw4QkFBOEIsQ0FBQztvQkFDaEssU0FBUyxFQUFFO3dCQUNULG9DQUFvQzt3QkFDcEMsK0JBQStCO3dCQUMvQixpQkFBaUI7cUJBQ2xCO2lCQUNGOztJQWNELG9DQUFDO0NBQUEsQUE1QkQsSUE0QkM7U0FiWSw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBGRmlsZVVwbG9hZE1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvZXh0ZW5kLWZpbGUtdXBsb2FkJztcclxuaW1wb3J0IHsgVXBsb2FkRGlhbG9nTW91ZGxlIH0gZnJvbSAnQGdzcC1zdmMvZm9ybWRvYy11cGxvYWQnO1xyXG5pbXBvcnQgeyBGZmlsZXVwbG9hZEFkYXB0VW5pZmlsZVNlcnZpY2UgfSBmcm9tICcuL2ZmaWxldXBsb2FkLWFkYXB0LXVuaWZpbGUuc2VydmljZSc7XHJcbmltcG9ydCB7IEZmaWxlcHJldmlld0FkYXB0VW5pZmlsZVNlcnZpY2UgfSBmcm9tICcuL2ZmaWxlcHJldmlldy1hZGFwdC11bmlmaWxlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBGRmlsZVByZXZpZXdBZGFwdFVuaWZpbGVEaXJlY3RpdmUgfSBmcm9tICcuL2ZmaWxlcHJldmlldy1hZGFwdC11bmlmaWxlLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEZpbGVMaXN0TW9kdWxlLCBGaWxlVmlld2VyU2VydmljZSB9IGZyb20gJ0Bnc3Atc3ZjL2ZpbGUtdmlld2VyJztcclxuaW1wb3J0IHsgRkZpbGVVcGxvYWRBZGFwdFVuaWZpbGVDb25maWcsIEZGaWxlVXBsb2FkQWRhcHRVbmlmaWxlQ29uZmlnVG9rZW4sIEZGaWxlVXBsb2FkQWRhcHRVbmlmaWxlQ29uZmlnU2VydmljZSB9IGZyb20gJy4vZmZpbGV1cGxvYWQtYWRhcHQtdW5pZmlsZS5jb25maWcnO1xyXG5pbXBvcnQgeyBGZmlsZXByZXZpZXdBZGFwdFNlZWltZ0NvbXBvbmVudCB9IGZyb20gJy4vZmZpbGVwcmV2aWV3LWFkYXB0LXNlZWltZy9mZmlsZXByZXZpZXctYWRhcHQtc2VlaW1nLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEZGaWxlQWRhcHREb3dubG9hZEZpbGVEaXJlY3RpdmUsIEZGaWxlQWRhcHRQcmV2aWV3RmlsZURpcmVjdGl2ZSB9IGZyb20gJy4vZmZpbGVwcmV2aWV3LWFkYXB0LXVuaWZpbGUtc2ltcGxlLmRpcmVjdGl2ZSc7XHJcblxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtGRmlsZVByZXZpZXdBZGFwdFVuaWZpbGVEaXJlY3RpdmUsIEZmaWxlcHJldmlld0FkYXB0U2VlaW1nQ29tcG9uZW50LEZGaWxlQWRhcHREb3dubG9hZEZpbGVEaXJlY3RpdmUsRkZpbGVBZGFwdFByZXZpZXdGaWxlRGlyZWN0aXZlXSxcclxuICBpbXBvcnRzOiBbXHJcbiAgICBDb21tb25Nb2R1bGUsXHJcbiAgICBVcGxvYWREaWFsb2dNb3VkbGUsXHJcbiAgICBGaWxlTGlzdE1vZHVsZSxcclxuICAgIEZGaWxlVXBsb2FkTW9kdWxlLmZvclJvb3QobnVsbCwgRmZpbGV1cGxvYWRBZGFwdFVuaWZpbGVTZXJ2aWNlKVxyXG4gIF0sXHJcbiAgZXhwb3J0czogW0ZGaWxlVXBsb2FkTW9kdWxlLCBGRmlsZVByZXZpZXdBZGFwdFVuaWZpbGVEaXJlY3RpdmUsIEZmaWxlcHJldmlld0FkYXB0U2VlaW1nQ29tcG9uZW50LEZGaWxlQWRhcHREb3dubG9hZEZpbGVEaXJlY3RpdmUsRkZpbGVBZGFwdFByZXZpZXdGaWxlRGlyZWN0aXZlXSxcclxuICBwcm92aWRlcnM6IFtcclxuICAgIEZGaWxlVXBsb2FkQWRhcHRVbmlmaWxlQ29uZmlnU2VydmljZSxcclxuICAgIEZmaWxlcHJldmlld0FkYXB0VW5pZmlsZVNlcnZpY2UsXHJcbiAgICBGaWxlVmlld2VyU2VydmljZVxyXG4gIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZmaWxldXBsb2FkQWRhcHRVbmlmaWxlTW9kdWxlIHtcclxuXHJcbiAgc3RhdGljIGZvclJvb3QoY29uZmlnPzogRkZpbGVVcGxvYWRBZGFwdFVuaWZpbGVDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBGZmlsZXVwbG9hZEFkYXB0VW5pZmlsZU1vZHVsZSxcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgeyBwcm92aWRlOiBGRmlsZVVwbG9hZEFkYXB0VW5pZmlsZUNvbmZpZ1Rva2VuLCB1c2VWYWx1ZTogY29uZmlnIH0sXHJcbiAgICAgICAgRkZpbGVVcGxvYWRBZGFwdFVuaWZpbGVDb25maWdTZXJ2aWNlLFxyXG4gICAgICAgIEZmaWxlcHJldmlld0FkYXB0VW5pZmlsZVNlcnZpY2UsXHJcbiAgICAgICAgRmlsZVZpZXdlclNlcnZpY2VcclxuICAgICAgXVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19