/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/clear-fields.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Optional, Self, Injector } from '@angular/core';
import { NgControl } from '@angular/forms';
import { QueryConditionComponent } from '../querycondition.component';
var ClearFieldsDirective = /** @class */ (function () {
    function ClearFieldsDirective(ngCtrl, qcc, inject) {
        this.ngCtrl = ngCtrl;
        this.qcc = qcc;
        this.inject = inject;
        this.clearFields = '';
    }
    /**
     * @return {?}
     */
    ClearFieldsDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.clearFields && this.ngCtrl) {
            this.ngCtrl.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                _this.qcc.fieldCodeOfClearFields = [];
                _this.clearFields.split(',').forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    /** @type {?} */
                    var visibleConditions = _this.qcc.selectedFieldConditions.filter((/**
                     * @param {?} condition
                     * @return {?}
                     */
                    function (condition) { return !!condition.visible; }));
                    /** @type {?} */
                    var conditionItem = visibleConditions.find((/**
                     * @param {?} c
                     * @return {?}
                     */
                    function (c) { return c.fieldCode === n; }));
                    if (conditionItem) {
                        _this.qcc.fieldCodeOfClearFields.push(n);
                        conditionItem.value.clearValue();
                    }
                }));
            }));
        }
    };
    ClearFieldsDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[clear-fields]'
                },] }
    ];
    /** @nocollapse */
    ClearFieldsDirective.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
        { type: QueryConditionComponent },
        { type: Injector }
    ]; };
    ClearFieldsDirective.propDecorators = {
        clearFields: [{ type: Input, args: ['clear-fields',] }]
    };
    return ClearFieldsDirective;
}());
export { ClearFieldsDirective };
if (false) {
    /** @type {?} */
    ClearFieldsDirective.prototype.clearFields;
    /**
     * @type {?}
     * @private
     */
    ClearFieldsDirective.prototype.ngCtrl;
    /**
     * @type {?}
     * @private
     */
    ClearFieldsDirective.prototype.qcc;
    /**
     * @type {?}
     * @private
     */
    ClearFieldsDirective.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xlYXItZmllbGRzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tcG9uZW50LXF1ZXJ5Y29uZGl0aW9uLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY2xlYXItZmllbGRzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25GLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV0RTtJQU1JLDhCQUF3QyxNQUFpQixFQUFVLEdBQTRCLEVBQVUsTUFBZ0I7UUFBakYsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUFVLFFBQUcsR0FBSCxHQUFHLENBQXlCO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVTtRQUZsRyxnQkFBVyxHQUFHLEVBQUUsQ0FBQztJQUVvRixDQUFDOzs7O0lBRTdILHVDQUFROzs7SUFBUjtRQUFBLGlCQWNDO1FBYkcsSUFBRyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUzs7OztZQUFFLFVBQUMsQ0FBQztnQkFDbEMsS0FBSSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLENBQUM7Z0JBQ3JDLEtBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU87Ozs7Z0JBQUMsVUFBQSxDQUFDOzt3QkFDM0IsaUJBQWlCLEdBQUcsS0FBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNOzs7O29CQUFDLFVBQUEsU0FBUyxJQUFLLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUEsQ0FBQSxDQUFDLEVBQUM7O3dCQUN0RyxhQUFhLEdBQUcsaUJBQWlCLENBQUMsSUFBSTs7OztvQkFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxTQUFTLEtBQUssQ0FBQyxFQUFqQixDQUFpQixFQUFDO29CQUNwRSxJQUFJLGFBQWEsRUFBRTt3QkFDZixLQUFJLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDeEMsYUFBYSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztxQkFDcEM7Z0JBQ0wsQ0FBQyxFQUFDLENBQUM7WUFDUCxDQUFDLEVBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7Z0JBdEJKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO2lCQUM3Qjs7OztnQkFMUSxTQUFTLHVCQVNELFFBQVEsWUFBSSxJQUFJO2dCQVJ4Qix1QkFBdUI7Z0JBRm1CLFFBQVE7Ozs4QkFRdEQsS0FBSyxTQUFDLGNBQWM7O0lBbUJ6QiwyQkFBQztDQUFBLEFBdkJELElBdUJDO1NBcEJZLG9CQUFvQjs7O0lBQzdCLDJDQUF3Qzs7Ozs7SUFFNUIsc0NBQTZDOzs7OztJQUFFLG1DQUFvQzs7Ozs7SUFBRSxzQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkluaXQsIE9wdGlvbmFsLCBTZWxmLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vcXVlcnljb25kaXRpb24uY29tcG9uZW50JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbY2xlYXItZmllbGRzXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIENsZWFyRmllbGRzRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHsgXHJcbiAgICBASW5wdXQoJ2NsZWFyLWZpZWxkcycpIGNsZWFyRmllbGRzID0gJyc7XHJcbiAgIFxyXG4gICAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQFNlbGYoKSBwcml2YXRlIG5nQ3RybDogTmdDb250cm9sLCBwcml2YXRlIHFjYzogUXVlcnlDb25kaXRpb25Db21wb25lbnQsIHByaXZhdGUgaW5qZWN0OiBJbmplY3Rvcikge30gXHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgaWYodGhpcy5jbGVhckZpZWxkcyAmJiB0aGlzLm5nQ3RybCkge1xyXG4gICAgICAgICAgICB0aGlzLm5nQ3RybC52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKCAodikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5xY2MuZmllbGRDb2RlT2ZDbGVhckZpZWxkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhckZpZWxkcy5zcGxpdCgnLCcpLmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlzaWJsZUNvbmRpdGlvbnMgPSB0aGlzLnFjYy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucy5maWx0ZXIoY29uZGl0aW9uID0+IHtyZXR1cm4gISFjb25kaXRpb24udmlzaWJsZX0pOyAgXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29uZGl0aW9uSXRlbSA9IHZpc2libGVDb25kaXRpb25zLmZpbmQoYyA9PiBjLmZpZWxkQ29kZSA9PT0gbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmRpdGlvbkl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5xY2MuZmllbGRDb2RlT2ZDbGVhckZpZWxkcy5wdXNoKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25JdGVtLnZhbHVlLmNsZWFyVmFsdWUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19