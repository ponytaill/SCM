/**
 * 绑定对象工厂相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { PropertyUtil } from './property_util';
import { BindingPropertyType } from './binding_property';
import { BindingObject } from './binding_object';
import { BindingListFactory } from './binding_list_factory';
/**
 * BindingObject工厂用于创建一个空的BindingObject对象，并对其属性进行扩展。
 *
 * **扩展属性处理**
 *
 * 对于要扩展的属性（BindingProperty）有三种处理：
 * - 普通属性：初始化为一个undefined，并包装get、set方法，通过set方法监听变更；
 * - 对象属性：初始化为一个空的BindingObject对象，并监听子对象的变更；
 * - 列表属性：初始化为一个空的BindingList对象，并监听子列表的变更；
 *
 * **示例代码**
 *
 * ```ts
 *  const empProperties = PropertyUtil.getProperties(EmpEntity);
 * const empBindingObject = BindingObjectFactory.create(properties);
 * ```
 */
var BindingObjectFactory = /** @class */ (function () {
    function BindingObjectFactory() {
    }
    /**
     * 创建BindingObject实例
     * @param properties 要扩展的属性集合
     * @returns 带扩展属性的空BindingObject对象
     * @
     */
    BindingObjectFactory.create = function (properties) {
        var object = new BindingObject(properties);
        this.extendProperties(object, properties);
        return object;
    };
    BindingObjectFactory.createDynamicBindingObject = function (data) {
        var properties = PropertyUtil.getDynamicProperties(data);
        var object = new BindingObject(properties);
        this.extendProperties(object, properties);
        return object;
    };
    /**
     * 扩展属性绑定对象的属性
     * @param object     要扩展的绑定对象
     * @param properties 绑定属性集合
     */
    BindingObjectFactory.extendProperties = function (object, properties) {
        var _this = this;
        // 扩展BindingObject属性
        properties.forEach(function (property) {
            if (property.type === BindingPropertyType.List) {
                _this.extendListProperty(object, property);
            }
            else if (property.type === BindingPropertyType.Object) {
                _this.extendObjectProperty(object, property);
            }
            else if (property.type === BindingPropertyType.Dynamic) {
                _this.extendDynamicObjectProperty(object, property);
            }
            else {
                _this.extendPlainProperty(object, property);
            }
        });
    };
    /**
     * 扩展列表类型的绑定属性
     * @param object     要扩展的绑定对象
     * @param properties 列表类型的绑定属性集合
     */
    BindingObjectFactory.extendListProperty = function (object, property) {
        var propertyName = property.name;
        var childListProperties = PropertyUtil.getProperties(property.entityType);
        var childList = BindingListFactory.create(childListProperties);
        // 指定子List的parent、监听子List的changes事件
        childList.parent = object;
        childList.changes.subscribe(function (change) {
            change.path.unshift(propertyName);
            object.changes.next(change);
        });
        // 将子的BindingList实例赋值给当前属性
        Object.defineProperty(object, propertyName, {
            value: childList
        });
    };
    /**
     * 扩展对象类型的绑定属性
     * @param object     要扩展的绑定对象
     * @param properties 对象类型的绑定属性集合
     */
    BindingObjectFactory.extendObjectProperty = function (object, property) {
        var propertyName = property.name;
        var childObjectProperties = PropertyUtil.getProperties(property.entityType);
        var childObject = this.create(childObjectProperties);
        // 指定子Object的parent、监听子Object的changes事件
        childObject.parent = object;
        childObject.changes.subscribe(function (change) {
            change.path.unshift(propertyName);
            object.changes.next(change);
        });
        Object.defineProperty(object, propertyName, {
            value: childObject
        });
    };
    BindingObjectFactory.extendDynamicObjectProperty = function (object, property) {
        var propertyName = property.name;
        object[propertyName] = null;
    };
    BindingObjectFactory.attachDynamicObjectProperty = function (object, propertyName, dynamicObject) {
        dynamicObject.parent = object;
        dynamicObject.changes.subscribe(function (change) {
            change.path.unshift(propertyName);
            object.changes.next(change);
        });
        Object.defineProperty(object, propertyName, {
            value: dynamicObject
        });
    };
    /**
     * 扩展简单类型的绑定属性
     * @param object     要扩展的绑定对象
     * @param properties 简单类型的绑定属性集合
     */
    BindingObjectFactory.extendPlainProperty = function (object, property) {
        var propertyName = property.name;
        Object.defineProperty(object, propertyName, {
            get: function () {
                return object.getValue(propertyName);
            },
            set: function (value) {
                var oldValue = object.getValue(propertyName);
                if (value === oldValue) {
                    return;
                }
                object.setValue(propertyName, value, true, true);
            }
        });
    };
    return BindingObjectFactory;
}());
export { BindingObjectFactory };
//# sourceMappingURL=data:application/json;base64,