import { ParseUtil } from './parse_util';
/**
 * 数据变量解析
 */
class DataVariableParser {
    /**
     * 解析变量
     * @param expression 表达式
     * @param context 上下文
     */
    parse(expression, context) {
        const appContext = ParseUtil.getAppContext(context);
        const paths = this.extractPaths(expression);
        // 1、单个的表达式：直接求值
        if (paths.length === 1 && expression === `{DATA~${paths[0]}}`) {
            return this.getValue(paths[0], appContext);
        }
        // 2、其他情况：字符串替换
        paths.forEach((path) => {
            const searchValue = `{DATA~${path}}`;
            const replaceValue = this.getValue(path, appContext);
            expression = expression.replace(searchValue, replaceValue);
        });
        return expression;
    }
    /**
     * 提取路径
     */
    extractPaths(expression) {
        const paths = [];
        // 查找所有的uiState变量字符串
        const DATA_PATTERN_G = /\{DATA~(\S+?)\}/g;
        const dataVariables = expression.match(DATA_PATTERN_G);
        if (dataVariables === null) {
            return [];
        }
        // 提取后边的路径
        const DATA_PATTERN = /\{DATA~(\S+?)\}/;
        dataVariables.forEach(dataVariable => {
            const pathMatches = dataVariable.match(DATA_PATTERN);
            if (pathMatches != null && pathMatches.length === 2) {
                paths.push(pathMatches[1]);
            }
        });
        return paths;
    }
    /**
     * 获取值
     * @param path 路径：/
     */
    getValue(path, appContext) {
        const parts = path.split('/').filter((part) => {
            return part !== '';
        });
        const frameContext = appContext.viewModelContextManager.getContextById(parts[0]);
        if (!frameContext) {
            throw new Error(`${path}不正确，请检查！`);
        }
        const bindingData = frameContext.bindingData;
        if (!bindingData) {
            throw new Error(`${path}不正确，请检查！`);
        }
        return bindingData.getValue(parts.slice(1));
    }
}
export { DataVariableParser };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YV92YXJpYWJsZV9wYXJzZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvdmFyaWFibGUvZGF0YV92YXJpYWJsZV9wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV6Qzs7R0FFRztBQUNILE1BQU0sa0JBQWtCO0lBRXRCOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsVUFBa0IsRUFBRSxPQUFZO1FBQ3BDLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEQsTUFBTSxLQUFLLEdBQWEsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUV0RCxnQkFBZ0I7UUFDaEIsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxVQUFVLEtBQUssU0FBUyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRTtZQUM3RCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQzVDO1FBRUQsZUFBZTtRQUNmLEtBQUssQ0FBQyxPQUFPLENBQUUsQ0FBQyxJQUFZLEVBQUUsRUFBRTtZQUM5QixNQUFNLFdBQVcsR0FBRyxTQUFTLElBQUksR0FBRyxDQUFDO1lBQ3JDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3JELFVBQVUsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQVEsVUFBVSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7T0FFRztJQUNLLFlBQVksQ0FBQyxVQUFrQjtRQUNyQyxNQUFNLEtBQUssR0FBYyxFQUFFLENBQUM7UUFFNUIsb0JBQW9CO1FBQ3BCLE1BQU0sY0FBYyxHQUFHLGtCQUFrQixDQUFDO1FBQzFDLE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDdkQsSUFBSSxhQUFhLEtBQUssSUFBSSxFQUFFO1lBQzFCLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFFRCxVQUFVO1FBQ1YsTUFBTSxZQUFZLEdBQUcsaUJBQWlCLENBQUM7UUFDdkMsYUFBYSxDQUFDLE9BQU8sQ0FBRSxZQUFZLENBQUMsRUFBRTtZQUNwQyxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3JELElBQUksV0FBVyxJQUFJLElBQUksSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDbkQsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM1QjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssUUFBUSxDQUFDLElBQVksRUFBRSxVQUFzQjtRQUNuRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFO1lBQ3BELE9BQU8sSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakYsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQztTQUNwQztRQUVELE1BQU0sV0FBVyxHQUFJLFlBQVksQ0FBQyxXQUFXLENBQUM7UUFDOUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQztTQUNwQztRQUNELE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQztDQUdGO0FBRUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog5pWw5o2u5rqQ5Y+Y6YeP6Kej5p6QXHJcbiAqIEBhdXRob3IgV2l0dCA8aml3dEBpbnNwdXIuY29tPlxyXG4gKi9cclxuaW1wb3J0IHsgQXBwQ29udGV4dCB9IGZyb20gJy4uL2FwcC9pbmRleCc7XHJcbmltcG9ydCB7IFZhcmlhYmxlUGFyc2VyIH0gZnJvbSAnLi92YXJpYWJsZV9wYXJzZXInO1xyXG5pbXBvcnQgeyBQYXJzZVV0aWwgfSBmcm9tICcuL3BhcnNlX3V0aWwnO1xyXG5cclxuLyoqXHJcbiAqIOaVsOaNruWPmOmHj+ino+aekFxyXG4gKi9cclxuY2xhc3MgRGF0YVZhcmlhYmxlUGFyc2VyIGltcGxlbWVudHMgVmFyaWFibGVQYXJzZXIge1xyXG5cclxuICAvKipcclxuICAgKiDop6PmnpDlj5jph49cclxuICAgKiBAcGFyYW0gZXhwcmVzc2lvbiDooajovr7lvI9cclxuICAgKiBAcGFyYW0gY29udGV4dCDkuIrkuIvmlodcclxuICAgKi9cclxuICBwYXJzZShleHByZXNzaW9uOiBzdHJpbmcsIGNvbnRleHQ6IGFueSk6IGFueSB7XHJcbiAgICBjb25zdCBhcHBDb250ZXh0ID0gUGFyc2VVdGlsLmdldEFwcENvbnRleHQoY29udGV4dCk7XHJcbiAgICBjb25zdCBwYXRoczogc3RyaW5nW10gPSB0aGlzLmV4dHJhY3RQYXRocyhleHByZXNzaW9uKTtcclxuXHJcbiAgICAvLyAx44CB5Y2V5Liq55qE6KGo6L6+5byP77ya55u05o6l5rGC5YC8XHJcbiAgICBpZiAocGF0aHMubGVuZ3RoID09PSAxICYmIGV4cHJlc3Npb24gPT09IGB7REFUQX4ke3BhdGhzWzBdfX1gKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKHBhdGhzWzBdLCBhcHBDb250ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAy44CB5YW25LuW5oOF5Ya177ya5a2X56ym5Liy5pu/5o2iXHJcbiAgICBwYXRocy5mb3JFYWNoKCAocGF0aDogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNlYXJjaFZhbHVlID0gYHtEQVRBfiR7cGF0aH19YDtcclxuICAgICAgY29uc3QgcmVwbGFjZVZhbHVlID0gdGhpcy5nZXRWYWx1ZShwYXRoLCBhcHBDb250ZXh0KTtcclxuICAgICAgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24ucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiAgZXhwcmVzc2lvbjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaPkOWPlui3r+W+hFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZXh0cmFjdFBhdGhzKGV4cHJlc3Npb246IHN0cmluZykge1xyXG4gICAgY29uc3QgcGF0aHM6IHN0cmluZ1tdICA9IFtdO1xyXG5cclxuICAgIC8vIOafpeaJvuaJgOacieeahHVpU3RhdGXlj5jph4/lrZfnrKbkuLJcclxuICAgIGNvbnN0IERBVEFfUEFUVEVSTl9HID0gL1xce0RBVEF+KFxcUys/KVxcfS9nO1xyXG4gICAgY29uc3QgZGF0YVZhcmlhYmxlcyA9IGV4cHJlc3Npb24ubWF0Y2goREFUQV9QQVRURVJOX0cpO1xyXG4gICAgaWYgKGRhdGFWYXJpYWJsZXMgPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOaPkOWPluWQjui+ueeahOi3r+W+hFxyXG4gICAgY29uc3QgREFUQV9QQVRURVJOID0gL1xce0RBVEF+KFxcUys/KVxcfS87XHJcbiAgICBkYXRhVmFyaWFibGVzLmZvckVhY2goIGRhdGFWYXJpYWJsZSA9PiAge1xyXG4gICAgICBjb25zdCBwYXRoTWF0Y2hlcyA9IGRhdGFWYXJpYWJsZS5tYXRjaChEQVRBX1BBVFRFUk4pO1xyXG4gICAgICBpZiAocGF0aE1hdGNoZXMgIT0gbnVsbCAmJiBwYXRoTWF0Y2hlcy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICBwYXRocy5wdXNoKHBhdGhNYXRjaGVzWzFdKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcGF0aHM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5blgLxcclxuICAgKiBAcGFyYW0gcGF0aCDot6/lvoTvvJovXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRWYWx1ZShwYXRoOiBzdHJpbmcsIGFwcENvbnRleHQ6IEFwcENvbnRleHQpOiBhbnkge1xyXG4gICAgY29uc3QgcGFydHMgPSBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKChwYXJ0OiBzdHJpbmcpID0+IHtcclxuICAgICAgcmV0dXJuIHBhcnQgIT09ICcnO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgZnJhbWVDb250ZXh0ID0gYXBwQ29udGV4dC52aWV3TW9kZWxDb250ZXh0TWFuYWdlci5nZXRDb250ZXh0QnlJZChwYXJ0c1swXSk7XHJcbiAgICBpZiAoIWZyYW1lQ29udGV4dCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cGF0aH3kuI3mraPnoa7vvIzor7fmo4Dmn6XvvIFgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBiaW5kaW5nRGF0YSAgPSBmcmFtZUNvbnRleHQuYmluZGluZ0RhdGE7XHJcbiAgICBpZiAoIWJpbmRpbmdEYXRhKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtwYXRofeS4jeato+ehru+8jOivt+ajgOafpe+8gWApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGJpbmRpbmdEYXRhLmdldFZhbHVlKHBhcnRzLnNsaWNlKDEpKTtcclxuICB9XHJcblxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgRGF0YVZhcmlhYmxlUGFyc2VyIH07XHJcbiJdfQ==