/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, NgZone, Injector, Renderer2, ElementRef, Input } from '@angular/core';
import { dropHandlers, smoothDnD, constants } from '@farris/smooth-dnd';
import { DatagridComponent } from './../../datagrid.component';
import { DragDropColumnService } from './drag-drop-column.service';
smoothDnD.dropHandler = dropHandlers.reactDropHandler().handler;
smoothDnD.wrapChild = false;
const { wrapperClass, animationClass } = constants;
export class DropColumnDirective {
    /**
     * @param {?} ngzone
     * @param {?} injector
     * @param {?} render
     * @param {?} el
     * @param {?} dg
     * @param {?} dndSer
     */
    constructor(ngzone, injector, render, el, dg, dndSer) {
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.dg = dg;
        this.dndSer = dndSer;
        this.options = {
            orientation: 'horizontal',
            behaviour: 'move',
            dragHandleSelector: '.group-field',
            dropPlaceholder: {
                className: 'drop-group-field',
            },
            getGhostParent: (/**
             * @return {?}
             */
            () => {
                return document.body;
            }),
            shouldAcceptDrop: (/**
             * @param {?} sourceContainerOptions
             * @param {?} payload
             * @return {?}
             */
            (sourceContainerOptions, payload) => {
                if (typeof payload === 'number') {
                    return true;
                }
                if (this.getGroupFields().length < 3) {
                    return payload.allowGrouping === undefined || payload.allowGrouping;
                }
                return false;
            }),
            getChildPayload: (/**
             * @param {?} index
             * @return {?}
             */
            (index) => {
                return index;
            }),
            // dragClass: 'drag-column-moving',
            onDropReady: (/**
             * @param {?} dropResult
             * @return {?}
             */
            (dropResult) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDropReady(dropResult);
                }));
            }),
            onDrop: (/**
             * @param {?} dropResult
             * @return {?}
             */
            (dropResult) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDrop(dropResult);
                }));
            }),
            onDragEnter: (/**
             * @return {?}
             */
            () => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragEnter();
                }));
            }),
            onDragStart: (/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragStart(info);
                }));
            }),
            onDragEnd: (/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragEnd(info);
                }));
            })
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initDnD();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disposeDnd();
    }
    /**
     * @private
     * @return {?}
     */
    disposeDnd() {
        if (this.container) {
            this.container.dispose();
            this.container = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    initDnD() {
        this.disposeDnd();
        if (this.dg.showRowGroupPanel) {
            this.container = smoothDnD(this.el.nativeElement, this.options);
        }
    }
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    onDropReady(dropResult) {
    }
    /**
     * @private
     * @return {?}
     */
    getGroupFields() {
        return this.dg.groupField ? this.dg.groupField.split(',') : [];
    }
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    onDrop(dropResult) {
        const { addedIndex, payload, removedIndex } = dropResult;
        if (addedIndex === null) {
            return;
        }
        /** @type {?} */
        const newGroupFields = this.getGroupFields();
        if (removedIndex === null) {
            if (!newGroupFields.some((/**
             * @param {?} v
             * @return {?}
             */
            (v) => v === payload.field))) {
                // newGroupFields.splice(0, 0, payload.field);
                newGroupFields.push(payload.field);
            }
        }
        else {
            this.dndSer.moveItem(newGroupFields, addedIndex, removedIndex);
        }
        this.dg.groupField = newGroupFields.join(',');
        // this.dg.toggleVisibleColumn([this.dg.groupField], false);
        if (this.dg.useControlPanel && this.dg.settingService) {
            this.dg.checkSettingHttp();
            this.dg.settingService.saveUserConfig(this.dg.id).subscribe((/**
             * @return {?}
             */
            () => {
                this.dg.columnsChanged();
            }));
        }
        else {
            this.dg.columnsChanged();
        }
        this.dg.groupFieldChange.emit({ newGroupField: this.dg.groupField, grid: this.dg });
    }
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    onDragStart(info) {
    }
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    onDragEnd(info) {
    }
    /**
     * @private
     * @return {?}
     */
    onDragEnter() {
    }
}
DropColumnDirective.decorators = [
    { type: Directive, args: [{
                selector: '[drop-column]',
                providers: [
                    DragDropColumnService
                ]
            },] }
];
/** @nocollapse */
DropColumnDirective.ctorParameters = () => [
    { type: NgZone },
    { type: Injector },
    { type: Renderer2 },
    { type: ElementRef },
    { type: DatagridComponent },
    { type: DragDropColumnService }
];
DropColumnDirective.propDecorators = {
    options: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DropColumnDirective.prototype.options;
    /**
     * @type {?}
     * @private
     */
    DropColumnDirective.prototype.container;
    /**
     * @type {?}
     * @private
     */
    DropColumnDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    DropColumnDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DropColumnDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DropColumnDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DropColumnDirective.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    DropColumnDirective.prototype.dndSer;
}
//# sourceMappingURL=data:application/json;base64,