/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, HostListener, Renderer2, ViewChild, Output, EventEmitter, TemplateRef, Input, ViewChildren, QueryList, HostBinding } from '@angular/core';
import { AngularDraggableDirective } from '@farris/ui-draggable';
import { DomSanitizer } from "@angular/platform-browser";
import { CLASS_NAME, DISMISS_REASONS, ModalOptions, TRANSITION_DURATIONS } from './modal-options.class';
import { isBs3 } from '@farris/ui-modal/utils';
import { ModalButtonDirective } from './modal-button.directive';
import { fromEvent } from 'rxjs';
import { delay } from 'rxjs/operators';
var ModalContainerComponent = /** @class */ (function () {
    function ModalContainerComponent(options, el, _renderer, sanitizer) {
        var _this = this;
        this.el = el;
        this._renderer = _renderer;
        this.sanitizer = sanitizer;
        this.isShown = false;
        this.isModalHiding = false;
        // 记录上次的高度
        this.isMax = false;
        this.closed = new EventEmitter();
        this.opened = new EventEmitter();
        this.resized = new EventEmitter();
        this.modalID = "MODALID_" + Date.now().toPrecision();
        this.windowResize$ = null;
        this.config = Object.assign({}, options);
        if (!this.config.buttons) {
            this.config.buttons = [
                {
                    text: '取消',
                    cls: 'btn btn-light',
                    iconCls: 'k-icon k-i-close',
                    handle: (/**
                     * @return {?}
                     */
                    function () {
                        _this.close();
                    })
                },
                {
                    text: '确定',
                    cls: 'btn btn-primary',
                    iconCls: 'k-icon k-i-check',
                    handle: (/**
                     * @return {?}
                     */
                    function () { alert('好(｡･∀･)ﾉﾞ嗨哟!!'); })
                }
            ];
        }
    }
    Object.defineProperty(ModalContainerComponent.prototype, "iframe", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.sanitizer) {
                this.iframeSrc = this.sanitizer.bypassSecurityTrustResourceUrl(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ModalContainerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.boundsElement = this.el.nativeElement;
        if (this.config.fitContent) {
            this._renderer.addClass(this.el.nativeElement, 'f-modal-fitContent');
        }
        if (this.isAnimated) {
            this._renderer.addClass(this.el.nativeElement, CLASS_NAME.FADE);
        }
        // this.ngZone.runOutsideAngular(() => {
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.isShown = true;
            _this._renderer.addClass(_this.el.nativeElement, isBs3() ? CLASS_NAME.IN : CLASS_NAME.SHOW);
            _this._renderer.setStyle(_this.el.nativeElement, 'display', 'block');
            if (_this.config.fitContent && _this.el.nativeElement.className.indexOf('f-modal-fitContent-scroll') > -1) {
                _this.el.nativeElement.scrollTop = 0;
            }
            if (document && document.body) {
                /** @type {?} */
                var modalLen = _this.bsModalService.getModalsCount();
                if (modalLen === 1) {
                    _this.bsModalService.checkScrollbar();
                    _this.bsModalService.setScrollbar();
                }
                if (!document.body.classList.contains(CLASS_NAME.OPEN)) {
                    _this._renderer.addClass(document.body, CLASS_NAME.OPEN);
                }
            }
            _this.opened.emit({ modal: _this });
        }), this.isAnimated ? TRANSITION_DURATIONS.BACKDROP : 0);
        // });
        if (this.el.nativeElement) {
            this.el.nativeElement.focus();
        }
        this.dlgHeaderLineHeight = this.getDialogHeaderLineHeight() + 'px';
    };
    /**
     * @return {?}
     */
    ModalContainerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.
        // Add 'implements AfterViewInit' to the class.
        this._renderer.setStyle(this.el.nativeElement, 'display', 'block');
        // 如果内容适应宽度
        if (this.config.fitContent) {
            /** @type {?} */
            var initElRect = this.el.nativeElement.getBoundingClientRect();
            /** @type {?} */
            var initBodySize = this.getContainerSize();
            if (initElRect.height < initBodySize.height + 30) {
                this._renderer.addClass(this.el.nativeElement, 'f-modal-fitContent-scroll');
            }
        }
        this.originalHeight = this.config.height;
        this.originalWidth = this.config.width;
        this.windowResize$ = fromEvent(window, 'resize').pipe(delay(50)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var winWidth = window.innerWidth - 20;
            /** @type {?} */
            var winHeight = window.innerHeight - 20;
            if (_this.isMax) {
                _this.maxDialog();
            }
            else {
                if (_this.config.width > winWidth || _this.config.height > winHeight) {
                    _this.maxDialog();
                }
            }
            _this.isMax = _this.isMax && _this.config.width == winWidth;
            // const dlgEl = this.getDlgElement();
            // this._renderer.setStyle(dlgEl, 'transform', `translate3d(0px, 0px, 0px)`);
            _this.toCenter();
            _this.moveTo(0, 0);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ModalContainerComponent.prototype.getDlgElement = /**
     * @private
     * @return {?}
     */
    function () {
        return this.el.nativeElement.querySelector('.modal-dialog');
    };
    /**
     * @private
     * @return {?}
     */
    ModalContainerComponent.prototype.getDialogHeaderLineHeight = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.config.showHeader) {
            /** @type {?} */
            var modalHeaderStyles = window.getComputedStyle(this.modalHeader.nativeElement);
            /** @type {?} */
            var paddingTop = parseInt(modalHeaderStyles.paddingTop.replace('px', ''), 10);
            /** @type {?} */
            var paddingBottom = parseInt(modalHeaderStyles.paddingBottom.replace('px', ''), 10);
            return this.config.dialogHeaderHeight - paddingTop - paddingBottom;
        }
        else {
            return 0;
        }
    };
    // 获取内容区域的尺寸
    // 获取内容区域的尺寸
    /**
     * @return {?}
     */
    ModalContainerComponent.prototype.getContainerSize = 
    // 获取内容区域的尺寸
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var bodyTarget = this.el.nativeElement.querySelector('.modal-body');
        /** @type {?} */
        var height = bodyTarget.offsetHeight;
        /** @type {?} */
        var width = bodyTarget.offsetWidth;
        return { width: width, height: height };
    };
    /**
     * @return {?}
     */
    ModalContainerComponent.prototype.buildFooterStyles = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var styles = {};
        if (this.config.dialogFooterStyles) {
            styles = Object.assign({}, styles, this.config.dialogFooterStyles);
        }
        return styles;
    };
    /**
     * @return {?}
     */
    ModalContainerComponent.prototype.useButtonsTemplate = /**
     * @return {?}
     */
    function () {
        return this.config.buttons instanceof TemplateRef;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ModalContainerComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var tag = (/** @type {?} */ (event.target));
        // if (tag.localName === 'label') {
        //     if (tag.className) {
        //         const clsList = tag.className.split(' ');
        //         if (
        //             clsList.indexOf('k-radio-label') > -1 ||
        //             clsList.indexOf('k-checkbox-label') > -1 ||
        //             clsList.indexOf('custom-control-label') > -1
        //         ) {
        //             return;
        //         }
        //     }
        // }
        // if (tag.localName === 'input' && (tag.type === 'checkbox' || tag.type === 'radio' || tag.type === 'file')) {
        //     return;
        // }
        if (this.config.ignoreBackdropClick || this.config.backdrop === 'static' || event.target !== this.el.nativeElement) {
            event.stopPropagation();
            return;
        }
        this.bsModalService.setDismissReason(DISMISS_REASONS.BACKRDOP);
        this.close();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ModalContainerComponent.prototype.onEsc = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.isShown) {
            return;
        }
        if (event.keyCode === 27) {
            event.preventDefault();
        }
        if (this.config.keyboard &&
            this.level === this.bsModalService.getModalsCount()) {
            this.bsModalService.setDismissReason(DISMISS_REASONS.ESC);
            this.close(event);
        }
    };
    /**
     * @return {?}
     */
    ModalContainerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.isShown) {
            this.close();
        }
        if (this.windowResize$) {
            this.windowResize$.unsubscribe();
            this.windowResize$ = null;
        }
    };
    /**
     * @param {?=} e
     * @param {?=} isCloseButton
     * @return {?}
     */
    ModalContainerComponent.prototype.close = /**
     * @param {?=} e
     * @param {?=} isCloseButton
     * @return {?}
     */
    function (e, isCloseButton) {
        var _this = this;
        if (isCloseButton === void 0) { isCloseButton = false; }
        if (e && e.stopPropagation) {
            e.stopPropagation();
        }
        if (this.isModalHiding || !this.isShown) {
            return;
        }
        this.config.beforeClose(this, { event: e }).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            if (!r) {
                return false;
            }
            _this.isModalHiding = true;
            _this._renderer.removeClass(_this.el.nativeElement, isBs3() ? CLASS_NAME.IN : CLASS_NAME.SHOW);
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.isShown = false;
                if (document &&
                    document.body) {
                    if (_this.bsModalService.getModalsCount() === 1) {
                        _this._renderer.removeClass(document.body, CLASS_NAME.OPEN);
                    }
                }
                _this.bsModalService.hide(_this.level);
                _this.isModalHiding = false;
                if (_this.config.closed) {
                    _this.config.closed(isCloseButton, { modalRef: _this, event: e });
                }
                _this.closed.emit(_this.level);
            }), _this.isAnimated ? TRANSITION_DURATIONS.MODAL : 0);
            // });
        }));
    };
    /**
     * @return {?}
     */
    ModalContainerComponent.prototype.toCenter = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var marginLeft = Number.parseInt('' + -this.config.width / 2) + 'px';
        /** @type {?} */
        var marginTop = Number.parseInt('' + -this.config.height / 2) + 'px';
        /** @type {?} */
        var dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        /** @type {?} */
        var contentEl = this.el.nativeElement.querySelector('.modal-body');
        this._renderer.setStyle(dialogEl, 'margin-left', marginLeft);
        this._renderer.setStyle(dialogEl, 'margin-top', marginTop);
        /** @type {?} */
        var contentHeight = this.config.height - 38;
        if (this.config.showButtons) {
            contentHeight = contentHeight - 50;
        }
        if (!this.config.fitContent) {
            this._renderer.setStyle(contentEl, 'height', contentHeight + 'px');
        }
        this._renderer.setStyle(contentEl, 'overflow', 'hidden');
        this._renderer.setStyle(dialogEl, 'transform', "translate3d(0px, 0px, 0px)");
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var container = _this.getContainerSize();
            var containerWidth = container.width, containerHeight = container.height;
            _this.resized.emit({ width: _this.config.width, height: _this.config.height, containerWidth: containerWidth, containerHeight: containerHeight });
        }));
    };
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    ModalContainerComponent.prototype.moveTo = /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    function (x, y) {
        /** @type {?} */
        var dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.setStyle(dialogEl, 'transform', "translate3d(" + x + "px, " + y + "px, 0px)");
        this._renderer.setStyle(dialogEl, 'top', '50%');
        this._renderer.setStyle(dialogEl, 'left', '50%');
        this.draggbar.position = { x: x, y: y };
        this.draggbar.resetPosition();
    };
    /**
     * @return {?}
     */
    ModalContainerComponent.prototype.maxDialog = /**
     * @return {?}
     */
    function () {
        this.prevWidth = this.config.width;
        this.prevHeight = this.config.height;
        // this.config.width = (document.scrollingElement?document.scrollingElement:document.documentElement)['clientWidth'] - 20;
        // this.config.height = (document.scrollingElement?document.scrollingElement:document.documentElement)['clientHeight'] - 20;
        this.config.width = window.innerWidth - 20;
        this.config.height = window.innerHeight - 20;
        this.config.draggable = false;
        this.config.resizable = false;
        /** @type {?} */
        var dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.addClass(dialogEl, 'model-dialog-maximize');
        this._renderer.setStyle(dialogEl, 'top', '50%');
        this._renderer.setStyle(dialogEl, 'left', '50%');
        this.isMax = true;
        this.toCenter();
    };
    /**
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    ModalContainerComponent.prototype.resize = /**
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    function (width, height) {
        if (width) {
            this.config.width = width;
        }
        if (height) {
            this.config.height = height;
        }
        /** @type {?} */
        var dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.removeClass(dialogEl, 'model-dialog-maximize');
        this.toCenter();
        this.draggbar.resetPosition();
    };
    /**
     * @param {?} el
     * @return {?}
     */
    ModalContainerComponent.prototype.dropdown = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        // const rect = el.getBoundingClientRect();
        // this._renderer.removeStyle(el, 'margin-top');
        // this._renderer.removeStyle(el, 'margin-left');
        // this._renderer.setStyle(el, 'top', `${rect.top}px`);
        // this._renderer.setStyle(el, 'left', `${rect.left}px`);
        // this._renderer.removeStyle(el, 'transform');
        // this._renderer.removeStyle(el, '-webkit-transform');
        // this._renderer.removeStyle(el, '-ms-transform');
        // this._renderer.removeStyle(el, '-moz-transform');
        // this._renderer.removeStyle(el, '-o-transform');
    };
    /**
     * @return {?}
     */
    ModalContainerComponent.prototype.revertDialog = /**
     * @return {?}
     */
    function () {
        this.isMax = false;
        /** @type {?} */
        var ww = window.innerWidth - 20;
        /** @type {?} */
        var wh = window.innerHeight - 20;
        this.config.width = this.prevWidth == ww ? this.originalWidth : this.prevWidth;
        this.config.height = this.prevHeight == wh ? this.originalHeight : this.prevHeight;
        if (this.config.width > ww) {
            this.config.width = ww;
        }
        if (this.config.height > wh) {
            this.config.height = wh;
        }
        this.config.draggable = true;
        this.config.resizable = true;
        /** @type {?} */
        var dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.removeClass(dialogEl, 'model-dialog-maximize');
        this.toCenter();
        this.draggbar.resetPosition();
    };
    /**
     * @return {?}
     */
    ModalContainerComponent.prototype.changeDialogSize = /**
     * @return {?}
     */
    function () {
        if (this.isMax) {
            this.revertDialog();
        }
        else {
            this.maxDialog();
        }
    };
    /**
     * @param {?} opts
     * @return {?}
     */
    ModalContainerComponent.prototype.resizeStop = /**
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        // console.log('resizeStop');
        this.config.width = opts.size.width;
        this.config.height = opts.size.height;
        /** @type {?} */
        var container = this.getContainerSize();
        var containerWidth = container.width, containerHeight = container.height;
        this.resized.emit(tslib_1.__assign({}, opts.size, { containerWidth: containerWidth, containerHeight: containerHeight }));
    };
    ModalContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'modal-container',
                    template: "\n    <div [attr.id]=\"modalID\"\n\n        [ngDraggable]=\"config.draggable\"\n        [ngResizable]=\"config.resizable\"\n        [rzMinWidth]=\"config.minWidth\"\n        [rzMaxWidth]=\"config.maxWidth\"\n        [rzMinHeight]=\"config.minHeight\"\n        [rzMaxHeight]=\"config.maxHeight\"\n        rzHandles=\"all\" [handle]=\"config.showHeader ? header:dragEl\"\n        (stopped)=\"dropdown($event)\"\n        (rzStop)=\"resizeStop($event)\"\n        [inBounds]=\"true\" [bounds]=\"boundsElement\"\n        [class]=\"'modal-dialog' + (config.class ? ' ' + config.class : '')\" role=\"document\"\n        [style.width]=\"config.width + 'px'\" [style.height]=\"config.fitContent?'auto':(config.height + 'px')\"\n        style=\"position: absolute;top: 50%;left: 50%;\">\n        <div class=\"modal-content\" [ngClass]=\"{'modal-content--has-header':config.showHeader}\">\n            <div #header class=\"modal-header\" [style.display]=\"config.showHeader ? '': 'none'\">\n                <div class=\"modal-title\">\n                    <span *ngIf=\"config.iconCls\" [class]=\"config.iconCls\" style=\"margin-right: 8px\"></span>\n                    <span class=\"modal-title-label\">{{ config.title }}</span>\n                </div>\n                <div class=\"actions\">\n                    <ul>\n                        <li *ngIf=\"config.showMinButton\" class=\"f-btn-icon f-bare\">\n                            <span class=\"f-icon modal_minimize\"></span></li>\n                        <li *ngIf=\"config.showMaxButton\" (click)=\"changeDialogSize()\" class=\"f-btn-icon f-bare\">\n                            <span class=\"f-icon modal_maximize\" [class.modalrevert]=\"isMax\"></span>\n                        </li>\n                        <li *ngIf=\"config.showCloseButton\" (click)=\"close($event, true)\" class=\"f-btn-icon f-bare\">\n                             <span class=\"f-icon modal_close\"></span>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        <div #dragEl class=\"f-utils-absolute-all\" style=\"height:10px;z-index: 1;\" [style.display]=\"config.showHeader ? 'none': ''\"></div>\n            <div class=\"modal-body\" [class.f-utils-flex-column]=\"dialogType === 'iframe'\"   [f-area-response]=\"config.areaResponse\">\n                <perfect-scrollbar [config]=\"{}\" [disabled]=\"!config.enableScroll||config.fitContent\"  *ngIf=\"!dialogType || dialogType === 'default'\">\n                    <ng-content ></ng-content>\n                </perfect-scrollbar>\n                <iframe *ngIf=\"dialogType === 'iframe'\" class=\"f-utils-fill\" width=\"100%\" frameborder=\"0\" [src]=\"iframeSrc\"></iframe>\n            </div>\n\n            <div [style.textAlign]=\"config.buttonAlign\" class=\"modal-footer\" [ngStyle]=\"buildFooterStyles()\" *ngIf=\"config.showButtons && config.buttons\">\n                <ng-container [ngTemplateOutlet]=\"useButtonsTemplate() ? config.buttons : defaultButtonRef\"></ng-container>\n            </div>\n        </div>\n    </div>\n\n    <ng-template #defaultButtonRef>\n        <button type=\"button\" modal-button\n            *ngFor=\"let btn of config.buttons; last as isLast\" [class]=\"btn.cls\"\n            (click)=\"btn.handle && btn.handle($event) \" \n            [style.display]=\"(btn.display === true || btn.display === undefined) ? '' : 'none'\"\n            [farrisTooltip]=\"btn?.tipsEnable\" [placement]=\"'top'\" [delay]=\"500\" [content]=\"btn?.tipsText\">\n            <span [class]=\"btn.iconCls\" *ngIf=\"btn.iconCls\"></span> {{ btn.text }}\n        </button>\n    </ng-template>\n  ",
                    host: {
                        class: 'modal farris-modal',
                        role: 'dialog',
                        tabindex: '-1',
                        '[attr.aria-modal]': 'true'
                    }
                }] }
    ];
    /** @nocollapse */
    ModalContainerComponent.ctorParameters = function () { return [
        { type: ModalOptions },
        { type: ElementRef },
        { type: Renderer2 },
        { type: DomSanitizer }
    ]; };
    ModalContainerComponent.propDecorators = {
        iframe: [{ type: Input }],
        draggbar: [{ type: ViewChild, args: [AngularDraggableDirective,] }],
        modalHeader: [{ type: ViewChild, args: ['header',] }],
        closed: [{ type: Output }],
        opened: [{ type: Output }],
        resized: [{ type: Output }],
        modalID: [{ type: HostBinding, args: ['id',] }],
        buttons: [{ type: ViewChildren, args: [ModalButtonDirective,] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
        onEsc: [{ type: HostListener, args: ['window:keydown.esc', ['$event'],] }]
    };
    return ModalContainerComponent;
}());
export { ModalContainerComponent };
if (false) {
    /** @type {?} */
    ModalContainerComponent.prototype.config;
    /** @type {?} */
    ModalContainerComponent.prototype.isShown;
    /** @type {?} */
    ModalContainerComponent.prototype.level;
    /** @type {?} */
    ModalContainerComponent.prototype.isAnimated;
    /** @type {?} */
    ModalContainerComponent.prototype.bsModalService;
    /** @type {?} */
    ModalContainerComponent.prototype.dialogType;
    /** @type {?} */
    ModalContainerComponent.prototype.iframeSrc;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.isModalHiding;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.originalWidth;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.originalHeight;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.prevWidth;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.prevHeight;
    /** @type {?} */
    ModalContainerComponent.prototype.isMax;
    /** @type {?} */
    ModalContainerComponent.prototype.draggbar;
    /** @type {?} */
    ModalContainerComponent.prototype.modalHeader;
    /** @type {?} */
    ModalContainerComponent.prototype.boundsElement;
    /** @type {?} */
    ModalContainerComponent.prototype.closed;
    /** @type {?} */
    ModalContainerComponent.prototype.opened;
    /** @type {?} */
    ModalContainerComponent.prototype.resized;
    /** @type {?} */
    ModalContainerComponent.prototype.modalID;
    /** @type {?} */
    ModalContainerComponent.prototype.buttons;
    /** @type {?} */
    ModalContainerComponent.prototype.dlgHeaderLineHeight;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.windowResize$;
    /**
     * @type {?}
     * @protected
     */
    ModalContainerComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    ModalContainerComponent.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,