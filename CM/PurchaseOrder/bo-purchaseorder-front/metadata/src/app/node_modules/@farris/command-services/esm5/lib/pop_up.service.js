import { Injectable, Injector } from "@angular/core";
import { EMPTY, of } from "rxjs";
import { switchMap, tap } from "rxjs/operators";
import { FrameContext, DataPathCreator, Repository } from "@farris/devkit";
import { LanguageService } from "./languag.service";
import { FormMessageService } from "./form-message.service";
var PopUpService = /** @class */ (function () {
    function PopUpService(injector, frameContext, repository, languageService, messageService) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.repository = repository;
        this.languageService = languageService;
        this.messageService = messageService;
    }
    PopUpService.prototype.confirm = function () { };
    /**
     * 取消变更
     * @param frameId
     * @param id
     * @returns
     */
    PopUpService.prototype.cancel = function (frameId, id) {
        var frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        if (!frameContext) {
            throw new Error("[PopUpService]Invalid frameId " + frameId);
        }
        var primaryValue = this.frameContext.bindingData.list.currentId;
        var bindingPath = frameContext.viewModel.bindingPath;
        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
        if (!id) {
            var bindingList = this.frameContext.bindingData.getList();
            id = bindingList.currentId;
        }
        var befRepository = this.repository;
        var longPaths = DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData).toArray().map(function (path) { return path.split(':')[1]; });
        var entityListPaths = Array.from(longPaths);
        //舍弃当前表当前行
        entityListPaths.pop();
        var dialogRef = this.frameContext.frameComponent['dialogRef'];
        if (entityListPaths.length < 1) {
            // 主表
            var entity = this.repository.entityCollection.getEntityById(id);
            var originalData = entity['originalData'];
            entity.load(originalData, { loadChild: false });
        }
        else {
            var entityList_1 = befRepository.entityManager.getEntityNodeByPath(entityListPaths);
            if (entityList_1) {
                var originalData = entityList_1['originalData'];
                var item_1 = originalData.find(function (item) { return item.id === id; });
                if (item_1) {
                    // 已有数据，还原变更
                    var entity_1 = befRepository.entityManager.getEntityByPath(longPaths);
                    if (entity_1.changes && entity_1.changes.length > 0) {
                        return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(tap(function (result) {
                            if (result) {
                                entity_1.load(item_1, { loadChild: false });
                                entity_1.changes.splice(0, entity_1.changes.length);
                            }
                        }));
                    }
                    else {
                        // 没有修改，直接关闭
                        if (dialogRef) {
                            dialogRef.close();
                        }
                    }
                }
                else {
                    // 新增的数据，删除
                    var paths_1 = this.buildPath(bindingPath, primaryValue);
                    return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(switchMap(function (result) {
                        if (result) {
                            return befRepository.removeEntityByPath(paths_1, id).pipe(tap(function () {
                                befRepository.entityManager.removeEntityByPath(paths_1, id);
                                if (entityList_1.count() === 0 && dialogRef) {
                                    dialogRef.close();
                                }
                            }));
                        }
                        else {
                            return EMPTY;
                        }
                    }));
                }
            }
        }
        return of([]);
    };
    /**
     * 同步当前行
     */
    PopUpService.prototype.updateCurrentRow = function (id) {
        var _this = this;
        var bindingPath = this.frameContext.viewModel.bindingPath;
        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
        // const frameId = this.frameContext.frameId;
        var root = this.frameContext.appContext.frameContextManager.getRootFrameContext();
        var primaryKeyValue = root.bindingData.list.currentId;
        this.frameContext.bindingData.list.setCurrentId(primaryKeyValue);
        if (bindingPaths.length > 0) {
            var paths_2 = [];
            bindingPaths.forEach(function (path, index, array) {
                paths_2.push(path);
                var bindingList = root.bindingData.getValue(paths_2);
                if (bindingList) {
                    var currentId = bindingList.currentId;
                    var modalBindingList = _this.frameContext.bindingData.getValue(paths_2);
                    if (index === bindingPath.length - 1 && id) {
                        modalBindingList.setCurrentId(id);
                    }
                    else if (modalBindingList) {
                        modalBindingList.setCurrentId(currentId);
                    }
                }
            });
        }
    };
    PopUpService.prototype.closeCheck = function () {
        var frameContext = this.frameContext;
        var bindingPath = frameContext.viewModel.bindingPath;
        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
        var befRepository = this.repository;
        var longPaths = DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData).toArray().map(function (path) { return path.split(':')[1]; });
        var entityListPaths = Array.from(longPaths);
        entityListPaths.pop();
        var entityList = befRepository.entityManager.getEntityNodeByPath(entityListPaths);
        var dialogRef = this.frameContext.frameComponent['dialogRef'];
        if (entityList.count() === 0 && dialogRef) {
            dialogRef.close();
        }
    };
    /**
     * 构造子表路径
     * @param bindingPath 绑定路径
     * @param id id
     */
    PopUpService.prototype.buildPath = function (bindingPath, id) {
        var path = '/' + id;
        var subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (var index = 1; index < subPaths.length - 1; index++) {
                var subPath = subPaths[index];
                var subData = this.frameContext.viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error("\u83B7\u53D6\u5B50\u8868\u5B8C\u6574\u8DEF\u5F84\u51FA\u9519\uFF0C\u627E\u4E0D\u5230" + subData + "\u5BF9\u5E94\u7684\u5B50\u8868\uFF0C\u6216\u5BF9\u5E94\u5B50\u8868\u6CA1\u6709\u5F53\u524D\u884C\u3002");
                }
                path += "/" + subPath + "/" + subData.currentId;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    };
    PopUpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PopUpService.ctorParameters = function () { return [
        { type: Injector },
        { type: FrameContext },
        { type: Repository },
        { type: LanguageService },
        { type: FormMessageService }
    ]; };
    return PopUpService;
}());
export { PopUpService };
//# sourceMappingURL=data:application/json;base64,